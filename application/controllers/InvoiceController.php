<?php
	// Maria:: Migration ISPC to CISPC 08.08.2020
	class InvoiceController extends Pms_Controller_Action { //ISPC-2746 Carmen 25.11.2020

		public function init()
		{
		    // ISPC-2609 Ancuta 22.09.2020
		    $this->user_print_jobs = 1;
		    //
		    
		}

		public function invoiceAction()
		{ //List invoices and other invoice actions

			/*			 * **************************** System Vars Start ************ */
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			
			
			//ISPC-2609 Ancuta 28.08.2020 + Changes on  07.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  'by_invoice';
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			$this->view->print_html  = "";
			if(count($invoice_user_printjobs) > 1 ){
			    $this->view->print_html =  $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			
			$Tr = new Zend_View_Helper_Translate();
			$pagelimit = "15";
			$this->view->pagelimit = $pagelimit;

			$allowed_sort_cols = array(
				'epid',
				'rnummer',
				'completedDate',
				'dueDate',
				'invoiceTotal'
			);

			$allowed_directions = array(
				'ASC',
				'DESC',
			);
			
			$warnings = new RemindersInvoice();
			$modules = new Modules();
			if($modules->checkModulePrivileges("89", $clientid)) // change tab name
			{
				$this->view->change_tab_name = 1;
			}
			else
			{
				$this->view->change_tab_name = 0;
			}
			
			if($modules->checkModulePrivileges("170", $clientid))
			{
				$this->view->create_bulk_warnings = "1";
			}
			else
			{
				$this->view->create_bulk_warnings = "0";
			}
				
			$users = new User();
			$userarray = $users->getUserByClientid($clientid, "0", true);

			foreach($userarray as $ukey => $uval)
			{
				if(strlen($uval['first_name']) > 0)
				{
					$first_name = ", " . $uval['first_name'];
				}
				else
				{
					$first_name = "";
				}

// 				$userarray['fullname'][$uval['id']] = $uval['first_name'] . $last_name;
				$userarray['fullname'][$uval['id']] = $uval['user_title'] ." ". $uval['last_name'] . $first_name;
			}
			$this->view->usersList = $userarray;
			/*			 * ************************* System Vars End ************ */

			/*			 * ************************* Processing Post & other Requests Data START ************ */
			$invoicesForm = new Application_Form_Invoices();
//			Invoice Payment modal table
			if($_REQUEST['op'] == "listpayment")
			{
				$iPayments = new InvoicePayments();

				if($_REQUEST['d'] == "1")
				{
					$available_payments = count($iPayments->getInvoicePayments($_REQUEST['invoiceid']));
					//next status is defined by how many payments are in actual moment...
					//if there is 1 and user deleted... then status is 0(not paid)
					if($available_payments == '1')
					{
						$next_status = '0';
					}
					else
					{
						$next_status = '1';
					}

					$iPayDel = $iPayments->deleteInvoicePayment($_REQUEST['paymentid']);

					$delInvoice = $invoicesForm->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $next_status); //partialy paid
				}


				$iPayArr = $iPayments->getInvoicePayments($_REQUEST['invoiceid']);
				$this->view->payments = $iPayArr;
				$listPayments = $this->view->render('invoice/listpayments.html');
				echo $listPayments;
				exit;
			}
//			Invoice Payment modal table


			if($_REQUEST['mode'] == "delete")
			{
				$client_invoice = new ClientInvoices();
				$invoice_details = $client_invoice->getInvoice($_REQUEST['invoiceid'], $clientid);
				$invoice_status = $invoice_details[0]['status'];

				if($invoice_status != '2')
				{
					$delInvoice = $invoicesForm->DeleteInvoice($_REQUEST['invoiceid']);

					//ISPC-2312 Ancuta 06.12.2020
					if($_REQUEST['redirect2new'] == '1'){
					    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=by_invoice');
					    exit();
					}
					//-- 
					if($delInvoice > 0)
					{
						$this->_redirect(APP_BASE . 'invoice/invoice?flg=suc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/invoice?flg=err');
					}
				}
				else
				{
				    //ISPC-2312 Ancuta 06.12.2020
				    if($_REQUEST['redirect2new'] == '1'){
				        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=by_invoice');
				        exit();
				    }
				    //-- 
					$this->_redirect(APP_BASE . 'invoice/invoice?flg=err');
				}
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$client_invoices = new ClientInvoices();
					$clone_record = $client_invoices->create_storno_invoice($invoiceid);
					//ISPC-2312 Ancuta 06.12.2020
					if($_REQUEST['redirect2new'] == '1'){
					    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=by_invoice');
					    exit();
					}
					//-- 
					$this->_redirect(APP_BASE . 'invoice/invoice?flg=suc');
				}
			}

			if($_REQUEST['suche'] == "1")
			{
				$where = "";
//					Make sure we have client id selected
				if($logininfo->clientid > 0)
				{
					$where = "and e.clientid=" . $logininfo->clientid;
				}
				else
				{
					$where = 'and e.clientid =1';
				}
				//get found ipids by search in pmaster left join epid ipid
				if(strlen($_REQUEST['last_name']) > 0)
				{
					$wherelm = " and (trim(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . trim(urldecode($_REQUEST['last_name'])) . "%')) or
						concat(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . trim(urldecode($_REQUEST['last_name'])) . "%')) or
						concat(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . trim(urldecode($_REQUEST['last_name'])) . "%')) or
						concat(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . trim(urldecode($_REQUEST['last_name'])) . "%')) or
						concat(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . trim(urldecode($_REQUEST['last_name'])) . "%')))";
				}

				if(strlen($_REQUEST['first_name']) > 0)
				{
					$wherefn = " and (trim(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . trim(urldecode($_REQUEST['first_name'])) . "%')) or
						concat(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . trim(urldecode($_REQUEST['first_name'])) . "%')) or
						concat(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . trim(urldecode($_REQUEST['first_name'])) . "%')) or
						concat(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . trim(urldecode($_REQUEST['first_name'])) . "%')) or
						concat(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . trim(urldecode($_REQUEST['first_name'])) . "%')))";
				}

				if(strlen($_REQUEST['epid']) > 0 || strlen($_POST['epid']) > 0)
				{
					$whereep = " and trim(lower(e.epid))=trim(lower('" . trim(urldecode($_REQUEST['epid'])) . "'))";
				}

				$search = Doctrine_Query::create()
					->select('p.ipid')
					->from('PatientMaster p')
					->where('p.isdelete = 0 ' . $where . ' ' . $wherelm . ' ' . $wherefn . ' ' . $whereep);
				$search->leftJoin("p.EpidIpidMapping e");

				$searchResults = $search->fetchArray();

				$finalSearchIpids[] = "9999999999999999";

				foreach($searchResults as $kSearch => $vSearch)
				{
					$finalSearchIpids[] = $vSearch['ipid'];
				}

				if(strlen(trim(urldecode($_REQUEST['document_date']))) > 0 || strlen(trim(urldecode($_REQUEST['amount']))) > 0 || strlen(trim(urldecode($_REQUEST['rnummer']))) > 0)
				{
					if(strlen(trim(urldecode($_REQUEST['document_date']))) > 0)
					{
						$variousSearchData['create_date'] = date("Y-m-d", strtotime(trim(urldecode($_REQUEST['document_date']))));
					}

					if(strlen(trim(urldecode($_REQUEST['amount']))) > 0)
					{
						$variousSearchData['invoiceTotal'] = str_replace(",", "", trim(urldecode($_REQUEST['amount'])));
					}
					if(strlen(trim(urldecode($_REQUEST['rnummer']))) > 0)
					{
						$variousSearchData['rnummer'] = trim(urldecode($_REQUEST['rnummer']));
					}
				}
			}

			if($this->getRequest()->isPost())
			{
				if($_POST['delmore'] == "1")
				{
					$delInvoice = $invoicesForm->DeleteInvoices($_POST['document']);
				}
				else if($_POST['cancelmore'] == "1")
				{
					$delInvoice = $invoicesForm->ToggleStatusInvoices($_POST['document'], "3");
				}
				else if($_POST['draftmore'] == "1")
				{
					$delInvoice = $invoicesForm->ToggleStatusInvoices($_POST['document'], "4");
				}
				else if($_POST['activate'] == "1")
				{
					$activate_invoice = $invoicesForm->ToggleStatusInvoices($_POST['document'], "0", false, $clientid); // This was set wrong! 0 = unpaid :: Unbezahlt
				}
				else if($_POST['paidmore'] == "1")
				{
					$delInvoice = $invoicesForm->ToggleStatusInvoices($_POST['document'], "2"); //fully paid with selected amount
				}
				else if($_POST['payment'] == "1")
				{
					$payInvoice = $invoicesForm->SubmitPayment($_POST);
				}
				elseif($_POST['warningmore'] == "1")
				{
					//var_dump($_POST['document']); exit;
					$invoiceids_to_warn = implode(',', $_POST['document']);
						
					$this->forward('generatereminderinvoice', 'Invoicenew', null, array());
						
					return;
					//$this->_redirect(APP_BASE . 'invoicenew/generatereminderinvoice?invoiceids='.$invoiceids_to_warn.'&invoicetable='.$_POST['warningmore_table'].'&invoicewarning='.$_POST['warningmore_type']);
				}
				//ISPC-2609 + ISPC-2000 Ancuta 
				elseif($_POST['batch_print_more'] == "1")
				{
				    $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
				    $params['batch_print'] = '1'; //enables batch print procedure
				    $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
				    $params['get_pdf'] = '0'; //stops downloading single pdf
				    
				    //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
				    if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
				        
				        
				        
				    } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
				        
				        $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
				        
				        $print_job_data = array();
				        $print_job_data['clientid'] = $clientid;
				        $print_job_data['user'] = $userid;
				        $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
				        $print_job_data['output_type'] = 'pdf';
				        $print_job_data['status'] = 'active';
				        $print_job_data['invoice_type'] = 'by_invoice';
				        $print_job_data['print_params'] = serialize($params);
				        $print_job_data['print_function'] = 'editinvoiceAction';
				        $print_job_data['print_controller'] = $this->getRequest()->getControllerName();
				        
				        foreach($_POST['document'] as $k=>$inv_id){
				            $print_job_data['PrintJobsItems'][] = array(
				                'clientid'=>$print_job_data['clientid'],
				                'user'=>$print_job_data['user'],
				                'invoice_id'=>$inv_id,
				                'invoice_type'=>$print_job_data['invoice_type'],
				                'status'=>"new"
				            );
				        }
				        
				        $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
				        $print_id = $PrintJobsBulk_obj->id;
				        
				        if($print_id){
				            $this->__StartPrintJobs();
				        }
				    }
				    
				    //ISPC-2609 Ancuta 07.09.2020
				    $msg="";
				    if($print_id){
				        $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				    }
				    $this->_redirect(APP_BASE . 'invoice/invoice'.$msg); //to avoid resubmission
				    // --
				    exit;
				    
				}
			}

			/*			 * ************************* Processing Post & other Requests Data END ************ */

			/*			 * ************************* Invoices Information START ************ */
			$inv = new ClientInvoices();
			if(strlen($_REQUEST['page']) == 0)
			{
				$offset = 0;
			}
			else
			{
				$offset = ($_REQUEST['page'] - 1) * $pagelimit;
			}
			//results
			$finalSearchIpids[] = "999999999";

			$tab = $_REQUEST['tab'];


			if(strlen($_REQUEST['orderby']) > "0" && $_REQUEST['orderby'] != 'undefined' && in_array(trim(rtrim($_REQUEST['orderby'])), $allowed_sort_cols))
			{
				$orderBy = $_REQUEST['orderby'];
			}
			else
			{
				$orderBy = 'id';
			}

			if(strlen($_REQUEST['direction']) > 0 && $_REQUEST['direction'] != 'undefined' && in_array(strtoupper($_REQUEST['direction']), $allowed_directions))
			{
				$direction = $_REQUEST['direction'];
			}
			else
			{
				$direction = "DESC";
			}
			array_unique($finalSearchIpids);

			if($_REQUEST['suche'] == "1" || $_POST['suche'] == "1")
			{
				$invoices = $inv->getInvoices($finalSearchIpids, $clientid, $variousSearchData, $offset, $this->view->pagelimit, $orderBy, $tab, $direction);
				$invoicesStats = $invoices;
			}
			else
			{
				$invoices = $inv->getInvoices($finalSearchIpids, $clientid, $variousSearchData, $offset, $this->view->pagelimit, $orderBy, $tab, $direction);
				$invoicesStats = $inv->getClientInvoices($clientid);
			}

			$invoicesArr[0] = "9999999999999";
			$patientsArr[0] = "9999999999999";
			foreach($invoices as $kinv => $vinv)
			{
				$invoicesArr[] = $vinv['id'];
				$patientsArr[] = $vinv['ipid'];
			}


			$invitms = new InvoiceItems();
			$invoiceItemsArr = $invitms->getMultipleInvoiceItems($invoicesArr, $clientid);

			$invPayments = new InvoicePayments();
			$invPayArr = $invPayments->getInvoicesPaymentsSum($invoicesArr);


			$open = 0;
			$paid = 0;
			$overdue = 0;
			$draft = 0;
			$canceled = 0;
			$all = count($invoicesStats);


			$finalInvoices['open'] = array();
			$finalInvoices['paid'] = array();
			$finalInvoices['overdue'] = array();
			$finalInvoices['draft'] = array();
			$finalInvoices['canceled'] = array();
			$finalInvoices['all'] = array();

			//remap the array with new values
			foreach($invoices as $kInv => $vInv)
			{
				if(array_key_exists($vInv['id'], $invPayArr))
				{
					$invoices[$kInv]['paidAmount'] = $invPayArr[$vInv['id']]['paidAmount'];
					$invoicesStats[$kInv]['paidAmount'] = $invPayArr[$vInv['id']]['paidAmount'];
				}
			}
			
			foreach($invoices as $kInvoice => $vInvoice)
			{
				// OPEN - unpaid; partiay paid
				if($vInvoice['storno'] == 0 && !in_array($vInvoice['status'], array("2", "3", "4")) && ($vInvoice['status'] == 0 || $vInvoice['status'] == 1 || ($vInvoice['invoiceTotal'] != $vInvoice['paidAmount'] && $vInvoice['invoiceTotal'] > $vInvoice['paidAmount'])))
				{
					$finalInvoices['open'][] = $vInvoice;
				}

				//PAID
				if($vInvoice['storno'] == 0 && $vInvoice['paidDate'] != "0000-00-00 00:00:00" && $vInvoice['status'] == 2)
				{
					$finalInvoices['paid'][] = $vInvoice;
				}

				//OVERDUE
				if($vInvoice['storno'] == 0 && !in_array($vInvoice['status'], array("3", "4")) && ( (strtotime($vInvoice['dueDate']) < strtotime("now") && $vInvoice['paidDate'] == "0000-00-00 00:00:00") || (strtotime($vInvoice['paidDate']) > strtotime($vInvoice['dueDate']) && $vInvoice['paidDate'] != "0000-00-00 00:00:00")))
				{
					$finalInvoices['overdue'][] = $vInvoice;
				}

				// DRAFT
				if($vInvoice['status'] == "4")
				{
					$finalInvoices['draft'][] = $vInvoice;
				}
				//CANCELED
				if($vInvoice['status'] == "3")
				{
					$finalInvoices['canceled'][] = $vInvoice;
				}

				//ALL
				$finalInvoices['all'][] = $vInvoice;
			}
			
			
			$finalInvoices['open'] = array_values($finalInvoices['open']);
			$finalInvoices['paid'] = array_values($finalInvoices['paid']);
			$finalInvoices['overdue'] = array_values($finalInvoices['overdue']);
			$finalInvoices['draft'] = array_values($finalInvoices['draft']);
			$finalInvoices['canceled'] = array_values($finalInvoices['canceled']);
			$finalInvoices['all'] = array_values($finalInvoices['all']);
			

			//invoicestats storned and storno invoice ids
			$excluded_storno[] = '9999999999999999999';
			foreach($invoicesStats as $k_inv_stat => $v_inv_stat)
			{
				if($v_inv_stat['storno'] == '1')
				{
					$excluded_storno[] = $v_inv_stat['id'];
				}
				
				if($v_inv_stat['record_id'] != '0' && $v_inv_stat['status'] != '3' )// TODO-4024 Ancuta 09.04.2021
				{
					$excluded_storno[] = $v_inv_stat['record_id'];
				}
			}
			
			foreach($invoicesStats as $kInvoices => $vInvoices)
			{
// 				if($vInvoices['status'] == 0 || $vInvoices['status'] == 1 && ($vInvoices['invoiceTotal'] != $vInvoices['paidAmount'] && $vInvoices['invoiceTotal'] > $vInvoices['paidAmount']))
// 				{

				// OPEN - unpaid; partiay paid
				if(!in_array($vInvoices['id'], $excluded_storno) && !in_array($vInvoices['status'], array("2", "3", "4")) && ($vInvoices['status'] == 0 || $vInvoices['status'] == 1 || ($vInvoices['invoiceTotal'] != $vInvoices['paidAmount'] && $vInvoices['invoiceTotal'] > $vInvoices['paidAmount'])))
				{
//					$open_data[] = $vInvoices['id'];
					$open++;
				}

				if(!in_array($vInvoices['id'], $excluded_storno) && $vInvoices['status'] == 2 && $vInvoices['paidDate'] != "0000-00-00 00:00:00")
				{
					$paid_data[$kInvoices] = $vInvoices;
					$paid++;
				}

				if(!in_array($vInvoices['id'], $excluded_storno) && !in_array($vInvoices['status'], array("2", "3", "4")) && ( (strtotime($vInvoices['dueDate']) < strtotime("now") && $vInvoices['paidDate'] == "0000-00-00 00:00:00") ))
				{
					$overdue_data[$kInvoices] = $vInvoices;
					$overdue++;
				}

				if(!in_array($vInvoices['id'], $excluded_storno) && $vInvoices['status'] == "4")
				{
					$draft++;
				}

				if(!in_array($vInvoices['id'], $excluded_storno) && $vInvoices['status'] == "3")
				{
					$canceled++;
				}

				$all_data[$kInvoices] = $vInvoices;
			}
			
			$open_data = array_values($open_data);
			$paid_data = array_values($paid_data);
			$overdue_data = array_values($overdue_data);
			$all_data = array_values($all_data);

			$stats['open'] = $open;
			$stats['paid'] = $paid;
			$stats['overdue'] = $overdue;
			$stats['draft'] = $draft;
			$stats['canceled'] = $canceled;
			$stats['all'] = $all;

			$this->view->stats = $stats;

			$finalInvoices['open'] = $finalInvoices['open'];
			$finalInvoices['paid'] = $finalInvoices['paid'];
			$finalInvoices['overdue'] = $finalInvoices['overdue'];
			$finalInvoices['draft'] = $finalInvoices['draft'];
			$finalInvoices['canceled'] = $finalInvoices['canceled'];
			$finalInvoices['all'] = $finalInvoices['all'];
			
			$invoice_ids_old = array();
			foreach($finalInvoices as $kfi=>$vfi)
			{
				if($kfi == "open" || $kfi =="overdue" || $kfi == "all")
				{
					foreach($vfi as $knfi=>$vnfi)
					{
						$invoice_ids_old[] = $vnfi['id'];
					}
				}
			}
			
			$all_warnings = $warnings->get_reminders($invoice_ids_old, 'by_invoice', $clientid);
			//var_dump($all_warnings); exit;
			foreach($finalInvoices as $kfit=>&$vfit)
			{				
				if($kfit == "open" || $kfit =="overdue" || $kfit == "all")
				{
					foreach ($vfit as &$row) {
						if (isset($all_warnings[$row['id']])) {
							$row[$kfit]['InvoiceWarnings'] = $all_warnings[$row['id']];
						}
					}
				}
			}
			//var_dump($finalInvoices); exit;
			$this->view->finalInvoices = $finalInvoices;
			$this->view->finalInvoiceItems = $invoiceItemsArr;
			
			
			if($_REQUEST['show_debug'] == 1){
				print_R("invoice sstats");
				print_R($invoicesStats);

				print_R("all");
				print_R($finalInvoices);
				
				print_R("status count");
				print_R($stats);
				exit;
			}

			/*			 * ************************* Invoices Information END ************ */


			/*			 * ************************* Invoices Patients Informations START ************ */
			$patDetails = Doctrine_Query::create()
				->select("*")
				->from('PatientMaster p')
				->whereIn('p.ipid', $patientsArr)
				->leftJoin('p.EpidIpidMapping e')
				->where('e.ipid = p.ipid')
				->andWhere('e.clientid = "' . $clientid . '"')
				->andWhere('p.isdischarged = 0')
				->andWhere('p.isdelete=0')
				->orderBy('e.epid_num ASC');
			$patientDetailsArr = $patDetails->fetchArray();

			foreach($patientDetailsArr as $kpatdet => $vpatdet)
			{
				$patientsDetailsArray[$vpatdet['ipid']] = $vpatdet;
				$patientsEpids[$vpatdet['ipid']] = strtoupper($vpatdet['epid']);
			}


			$this->view->epidsPatient = $patientsEpids;

			$private_patients_q = Doctrine_Query::create()
				->select('*')
				->from('PatientHealthInsurance')
				->whereIn('ipid', $patientsArr)
				->andWhere('privatepatient = "1"');

			$private_patients_res = $private_patients_q->fetchArray();

			$private_patients = array('99999999999');
			foreach($private_patients_res as $k_pp_res => $v_pp_res)
			{
				$private_patients[] = $v_pp_res['ipid'];
			}

			$this->view->private_patients = $private_patients;

			$allPatDetails = Doctrine_Query::create()
				->select("*, e.epid as epid, AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
					AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_namee")
				->from('PatientMaster p')
				->leftJoin('p.EpidIpidMapping e')
				->where('e.ipid = p.ipid')
				->whereIn('p.ipid', $patientsArr)
				->andWhere('e.clientid = "' . $clientid . '"')
				->orderBy('e.epid_num ASC');
			$allPatientDetailsArr = $allPatDetails->fetchArray();

			foreach($allPatientDetailsArr as $kapatdet => $vapatdet)
			{
				$allPatientsDetailsArray[$vapatdet['ipid']] = $vapatdet;
			}

			$this->view->patients = $allPatientsDetailsArray;
			/*			 * ************************* Invoices Patients Informations START ************ */


			/*			 * ************************* Client Users START ************ */
			$cUsers = Pms_CommonData::getClientUsers($clientid);
			foreach($cUsers as $uKey => $uValue)
			{
				$cUsersFinal[$uValue['id']] = $uValue['user_title'] . " " . $uValue['last_name'] . ", " . $uValue['first_name'];
			}
			$this->view->clientUsers = $cUsersFinal;
			/*			 * ************************* Client Users   END ************ */
			if(strlen($_REQUEST['tab']) > 0)
			{
				$this->view->storned_invoces = ClientInvoices::get_storned_invoices($clientid);
				$listDocuments = $this->view->render('invoice/listinvoices.html');
				echo $listDocuments;
				exit;
			}
		}

		public function createinvoiceAction()
		{
			/*			 * ************************* System Vars Start ************ */
			$has_edit_permissions = Links::checkLinkActionsPermission();
			if(!$has_edit_permissions) // if canedit = 0 - don't allow any additions or changes
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			//ISPC-2747 Lore 08.12.2020
			if(strlen($_REQUEST['redirect2new']) > 0){
			    $this->view->redirect2new = $_REQUEST['redirect2new'];
			} else {
			    $this->view->redirect2new = '0';
			}

			/*			 * ************************* Get client data START ************ */
			$cl = new Client();
			$client_data = $cl->getClientDataByid($clientid);
			$this->view->client_city = $client_data[0]['city'];
			$this->view->client_greetings = $client_data[0]['greetings'];
			$hi_perms = new HealthInsurancePermissions();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			/*			 * ************************* Get client data END ************ */

			if(strlen($_REQUEST['invoicepid']) > 0)
			{ //another patient selected
				$decid_sel = Pms_Uuid::decrypt($_REQUEST['invoicepid']);
				$this->view->showPatientSelectModal = "0";
			}
			else
			{
				$this->view->showPatientSelectModal = "1";
			}

			$userid = $logininfo->userid;
			$ipid_sel = Pms_CommonData::getIpid($decid_sel);
			$Tr = new Zend_View_Helper_Translate();
// 			$this->view->verordnets = Pms_CommonData::getSapvCheckBox();
			$this->view->verordnets = Pms_CommonData::getSapvCheckBox(false,true);


			/*			 * ************************* System Vars End ************ */
			
			$this->view->word_addition = "";
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("100", $clientid)) // change tab name
			{
			    $this->view->word_addition = ", Anschreiben";
			}
			else
			{
			    $this->view->word_addition = "";
			}
			







			/*			 * ************************* Processing Post Data And Other Requests START ************ */
			if($this->getRequest()->isPost() && $_POST['newinvoice'] != "1")
			{
				if(!empty($_POST['patientipid']))
				{
					if($_POST['delete'] || $_POST['deletemore'] == "1")
					{
						$_POST['status'] = "3";
					}
					else if($_POST['draft'])
					{
						$_POST['status'] = "4";
					}
					else if($_POST['complete'])
					{
						$_POST['status'] = "0";
					}

					$invoicesForm = new Application_Form_Invoices();
					$invoice = $invoicesForm->InsertData($_POST);
					
					//$this->_redirect(APP_BASE . 'invoice/invoice?flg=suc');
					//ISPC-2747 Lore 08.12.2020
					if($_REQUEST['redirect2new'] == '1'){
					    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=by_invoice' );
					    exit();
					} else {
					   $this->_redirect(APP_BASE . 'invoice/invoice?flg=suc');
					}
					
				}
				else
				{
					$this->view->errors = $this->view->translate("patient is mandatory");
					$this->retainValues($_POST);
				}
			}
			if($_REQUEST['mode'] == "delete")
			{
				$invoice = $invoicesForm->DeleteInvoice($_REQUEST['invoiceid']);
				//$this->_redirect(APP_BASE . 'invoice/invoice?flg=suc');
				//ISPC-2747 Lore 08.12.2020
				if($_REQUEST['redirect2new'] == '1'){
				    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=by_invoice');
				    exit();
				} else {
				    $this->_redirect(APP_BASE . 'invoice/invoice?flg=suc');
				}
			}
			/*			 * ************************* Processing Post Data And Other Requests  END ************ */

			/* get all client patients START */
			$pat = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->where("clientid = '" . $clientid . "'")
				->orderBy('epid_num ASC');
			$patIpidsArr = $pat->fetchArray();


			$patDetails = Doctrine_Query::create()
				->select("*, e.epid as epid, AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
				AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
				AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_namee")
				->from('PatientMaster p')
				->leftJoin('p.EpidIpidMapping e')
				->where('e.ipid = p.ipid')
				->andWhere('e.clientid = "' . $clientid . '"')
				->andWhere('p.isdelete=0')
				->orderBy('e.epid_num ASC');


			$patientDetailsArr = $patDetails->fetchArray();

			foreach($patientDetailsArr as $kPatDet => $patientDet)
			{
				$patientsSelector[Pms_Uuid::encrypt($patientDet['id'])] = strtoupper($patientDet['epid']) . " - " . $patientDet['last_namee'] . ", " . $patientDet['first_name'];
				$patientsArray[$patientDet['id']] = strtoupper($patientDet['epid']) . " - " . $patientDet['last_namee'] . ", " . $patientDet['first_name'];
				$patientEpids[$patientDet['ipid']] = strtoupper($patientDet['epid']);
			}
			$this->view->patientsArray = $patientsSelector; //patients array for select (with encrypted id as value[key])
			$this->view->patientsIdsArray = $patientsArray; //patients array (with unencrypted id as value[key]) for listing only
			/* get all client patients END */



			if(strlen($_REQUEST['invoicepid']) > 0)
			{
				/*				 * ************************* Patient Information Start ************ */
				$patientmaster = new PatientMaster();
				$allpatientinfo = $patientmaster->getMasterData($decid_sel, 0);

				$lc = new Locations();
				$locationsarray = $lc->getLocations($clientid, 1);

//			Get patient first location(aka admission location)
				$loca = new PatientLocation();
				$locrray = $loca->getFirstLocation($decid_sel);

				if(count($locrray) > 0)
				{
					$this->view->admissionlocation = $locrray[0]['location_id'];
				}
				else
				{
					$this->view->admissionlocation = "0";
				}

				$locationsarray[0] = "Keine";
				$this->view->locationsarray = $locationsarray;

//get patient admissions
				$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid_sel), true);
				$admCycle[-1] = "gesamt";
				if(count($admissions[$ipid_sel]['admissionDates']) != "0")
				{
//gesamt limitation
					$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid_sel]['admissionDates'][0]['date']));

					foreach($admissions[$ipid_sel]['admissionDates'] as $keyAdm => $admitedDate)
					{
						if(!empty($admissions[$ipid_sel]['dischargeDates'][$keyAdm]['date']))
						{
							$dischargeDate = $admissions[$ipid_sel]['dischargeDates'][$keyAdm]['date'];
						}
						else
						{
							$dischargeDate = date("d.m.Y");
						}

						$admCycle[$keyAdm] = date("d.m.Y", strtotime($admitedDate['date'])) . " - " . date("d.m.Y", strtotime($dischargeDate));
						$admissionsCycles[$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
						$admissionsCycles[$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));

						if($keyAdm == (count($admissions[$ipid_sel]['admissionDates']) - 1))
						{
							$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($dischargeDate));
						}
					}
				}
				else
				{
					$admCycle[0] = date("d.m.Y", strtotime($admissions[$ipid_sel]['admission_date'])) . " - " . date("d.m.Y", strtotime($admissions[$ipid_sel]['discharge_date']));
//gesamt if no admision-readmission cycle
					$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid_sel]['admission_date']));
					$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($admissions[$ipid_sel]['discharge_date']));
					$admissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid_sel]['admission_date']));
					$admissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid_sel]['discharge_date']));
				}

				$this->view->admissionCycles = $admCycle;

				$this->view->cycleAdmissionsDetails = $admissionsCycles;
				if(!isset($_REQUEST['cycle']) || !is_numeric($_REQUEST['cycle']))
				{
					$sel_val = "-1";
				}
				else
				{
					$sel_val = $_REQUEST['cycle'];
				}
				$this->view->cycleSelected = $sel_val;


				$verd = new SapvVerordnung();
				$verdarray = $verd->getFormoneAllSapvInPeriods($ipid_sel, $admissionsCycles);

				if(count($verdarray) > 0)
				{
					foreach($verdarray as $kAdmCycle => $verord)
					{
						foreach($verord as $vKey => $verordValue)
						{

							if(strlen($verordValue['verordnet']) > 1)
							{
								//explode value
								$verords = explode(",", $verordValue['verordnet']);
								foreach($verords as $verordnet)
								{
									$finalVerordnet[$kAdmCycle][] = $verordnet;
								}
							}
							else
							{
								$finalVerordnet[$kAdmCycle][] = $verordValue['verordnet'];
							}
						}

						if(count($finalVerordnet[$kAdmCycle]) > 0)
						{
							$finalVerordnet[$kAdmCycle] = max(array_unique($finalVerordnet[$kAdmCycle]));
						}
						else
						{
							$finalVerordnet[$kAdmCycle] = 0;
						}
					}
				}

				$this->view->admissionVerordnets = json_encode($finalVerordnet);
				$this->view->highsapv = $finalVerordnet[$sel_val];
				/*				 * ************************* Patient Information End ************ */

				/*				 * ************************* Patient Addressbook Start ************ */
				$adminvisible = PatientMaster::getAdminVisibility($ipid_sel);

				if(!$adminvisible && $logininfo->usertype == 'SA')
				{
					$hide_patient_tab = true;
				}
				else
				{
					$hide_patient_tab = false;
				}

				$this->view->hide_patient_tab = $hide_patient_tab;

			// Hausarzt
			$famdoc = FamilyDoctor::getFamilyDoctors($ipid_sel);
			$this->view->fam_doctor = sizeof($famdoc);
			$fam_doctor['practice'] = $famdoc[0]['practice'];
			$fam_doctor['first_name'] = $famdoc[0]['first_name'];
			$fam_doctor['last_name'] = $famdoc[0]['last_name'];
			$fam_doctor['salutation'] = $famdoc[0]['salutation'];
			$fam_doctor['title'] = $famdoc[0]['title'];
			$fam_doctor['street1'] = $famdoc[0]['street1'];
			$fam_doctor['zip'] = $famdoc[0]['zip'];
			$fam_doctor['city'] = $famdoc[0]['city'];
			$fam_doctor['phone_practice'] = $famdoc[0]['phone_practice'];
			$fam_doctor['phone_cell'] = $famdoc[0]['phone_cell'];
			$fam_doctor['fax'] = $famdoc[0]['fax'];
			$fam_doctor['email'] = $famdoc[0]['email'];
			$fam_doctor['doctornumber'] = $famdoc[0]['doctornumber'];
			$fam_doctor['medical_speciality'] = $famdoc[0]['medical_speciality'];
			$fam_doctor['comments'] = $famdoc[0]['comments'];
			$this->view->family_doctor = $fam_doctor;
			$this->view->fam_doctor_id = $famdoc[0]['id'];

			//Ansprechpartner
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid_sel);

			$familydegree = new FamilyDegree();
			$cnt_degree_array = $familydegree->getFamilyDegrees(1);

			$this->view->degree = $cnt_degree_array;

			$this->view->patient_contacts = $pcs;

			//Pflegedienst
			$pfleg = Pflegedienstes::getPflegedienstes($ipid_sel);
			if($pfleg > 0)
			{
				$this->view->pat_pfleg = $pfleg;
			}
				
			// Pharmacy
			$pharmacy = new PatientPharmacy();
			$pharm_pat = $pharmacy->getPatientPharmacy($ipid_sel);
			if(sizeof($pharm_pat) > 0){
				$this->view->pat_pharmacy = $pharm_pat;
			}
				
			
				
			//Krankenkassen
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid_sel);
			$this->view->patient_healthinsurance = $phi;
			
				
			//Facharzt
			$m_specialists_types = new SpecialistsTypes();
			$specialists_types  =$m_specialists_types->get_specialists_types($logininfo->clientid);
				
			if(!empty($specialists_types)){
				foreach($specialists_types as $k=>$tp){
					$s_type[$tp['id']] = $tp['name'];
				}
			}
			$this->view->s_type =$s_type;
			$specialists = new PatientSpecialists();
			$specialists_arr = $specialists->get_patient_specialists($ipid_sel, true);
				
			if(count($specialists_arr))
			{
				$this->view->patient_specialists = $specialists_arr;
			}
			
			
			//Sanitatshauser
			$m_supplies =  new PatientSupplies();
			$p_spupplies =$m_supplies->getPatientSupplies($ipid_sel);
			if(count($p_spupplies))
			{
				$this->view->patient_spupplies = $p_spupplies;
			}
				
			//sonst. Versorger
			$suppliers = new PatientSuppliers();
			$pat_suppliers = $suppliers->getPatientSuppliers($ipid_sel);
			if(sizeof($pat_suppliers) > 0)
			{
				$this->view->patient_suppliers = $pat_suppliers;
			}
				
			//Physiotherapist
			$physiotherapists = new PatientPhysiotherapist();
			$pat_physio = $physiotherapists->getPatientPhysiotherapist($ipid_sel);
			if(sizeof($pat_physio) > 0)
			{
				$this->view->patient_physioterapeuten = $pat_physio;
			}
			
			//Homecare
			$m_homecare = new PatientHomecare();
			$pat_homecare = $m_homecare->getPatientHomecare($ipid_sel);
			if(sizeof($pat_homecare) > 0)
			{
				$this->view->patient_homecare = $pat_homecare;
			}
			
			
				/*				 * ************************* Patient Addressbook End ************ */


				/*				 * ************************* Invoice Information End ************ */

				/* get patient health insurance START */
			
			//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
				$hi_perms_divisions = $divisions;
				
				$ph = new PatientHealthInsurance();
				$phi = $ph->getPatientHealthInsurance($ipid_sel);
//print_r($phi);exit;
				if($phi)
				{
					$this->view->privatPatient = $phi[0]['privatepatient'];

					if(empty($phi[0]['institutskennzeichen']) || $phi[0]['institutskennzeichen'] == 0)
					{
						if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
						{
							$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
							$healtharray = $helathins->toArray();
							$institutskennzeichen = $healtharray['iknumber'];
							$phi[0]['institutskennzeichen'] = $institutskennzeichen;
							$phi[0]['cstreet'] = $healtharray['street1'] . " " . $healtharray['street2'];
							$phi[0]['czip'] = $healtharray['zip'];
							$phi[0]['ccity'] = $healtharray['city'];
						}
					}
					else
					{
						if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
						{
							$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
							$healtharray = $helathins->toArray();
							$phi[0]['cstreet'] = $healtharray['street1'] . " " . $healtharray['street2'];
							$phi[0]['czip'] = $healtharray['zip'];
							$phi[0]['ccity'] = $healtharray['city'];
						}
					}

				/* 	if($phi[0]['privatepatient'] == "1")
					{
//			get patient name and adress
						$this->view->healthinsurancecontact = $allpatientinfo['first_name'] . ', ' . $allpatientinfo['last_name'];
						$this->view->healthinsurancestreet = $allpatientinfo['street1'];
						$this->view->healthinsuranceaddress = $allpatientinfo['zip'] . ' ' . $allpatientinfo['city'];
					}
					else
					{
						//get health insurance name and address
						$this->view->healthinsurancename = $phi[0]['company_name'];
						$this->view->healthinsurancecontact = $phi[0]['ins_insurance_provider'];
						$this->view->healthinsurancestreet = $phi[0]['cstreet'];
						$this->view->healthinsuranceaddress = $phi[0]['czip'] . " " . $phi[0]['ccity'];
					} */

					$this->view->healthinsurancenumber = $phi[0]['insurance_no'];
				
		
				if($hi_perms_divisions)
				{			
					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid_sel, $phi[0]['companyid']);
				}
					
				if(strlen($healthinsu_subdiv_arr['3']['name']) > '0' && $phi[0]['privatepatient'] == "0")
					{
						$this->view->healthinsurancename = $healthinsu_subdiv_arr[3]['name'];
						$this->view->healthinsurancecontact = $healthinsu_subdiv_arr[3]['insurance_provider'];
						$this->view->healthinsurancestreet = $healthinsu_subdiv_arr[3]['street1'];
						$this->view->healthinsuranceaddress = $healthinsu_subdiv_arr[3]['zip'] . " " . $healthinsu_subdiv_arr[3]['city']; 
					}
				elseif($phi[0]['privatepatient'] == "0")
					{
						//get health insurance name and address
						$this->view->healthinsurancename = $phi[0]['company_name'];
						$this->view->healthinsurancecontact = $phi[0]['ins_insurance_provider'];
						$this->view->healthinsurancestreet = $phi[0]['cstreet'];
						$this->view->healthinsuranceaddress = $phi[0]['czip'] . " " . $phi[0]['ccity'];
					}
				else
					{
						//private patient
						$this->view->healthinsurancecontact = $allpatientinfo['first_name'] . ' ' . $allpatientinfo['last_name'];
						$this->view->healthinsurancestreet = $allpatientinfo['street1'];
						$this->view->healthinsuranceaddress = $allpatientinfo['zip'] . ' ' . $allpatientinfo['city'];
					}
				}
				
				/* get patient health insurance END */

				/* get patient other data START */
				$this->view->nvg = $allpatientinfo['last_name'] . ', ' . $allpatientinfo['first_name'] . ', ' . $allpatientinfo['birthd'];
				$this->view->admissionperiod = $admissionPeriod;


// check for highest invoice number value START
				$invoices = new ClientInvoices();
				$invoice_number_arr = $invoices->get_next_invoice_number($clientid, true);

				$this->view->prefix = $invoice_number_arr['prefix'];
				$this->view->invoicenumber = $invoice_number_arr['invoicenumber'];
// check for highest invoice number value END



				$verordnets = Pms_CommonData::getSapvCheckBox(true,true);

				foreach($verordnets as $type => $vv_sh)
				{
					$bayern_sapv_types[$vv_sh] = $type;
				}

				$shortcuts = Pms_CommonData::get_prices_shortcuts();
				$p_list = new PriceList();


				foreach($admissionsCycles as $cycle_key => $cycle_date)
				{

					$current_period['start'] = date("Y-m-d", strtotime($cycle_date['start']));
					$current_period['end'] = date("Y-m-d", strtotime($cycle_date['end']));

// 					$master_price_list[$cycle_key] = $p_list->get_period_price_list($current_period['start'], $current_period['end']); // CHanged the function  on 18.03.2019 TODO-2194
					$master_price_list[$cycle_key] = $p_list->get_period_price_list_day2type($current_period['start'], $current_period['end']);
				}

				foreach($admissionsCycles as $ckey => $cdate)
				{
					$cycle_period['start'] = date("Y-m-d", strtotime($cdate['start']));
					$cycle_period['end'] = date("Y-m-d", strtotime($cdate['end']));

					foreach($shortcuts['bayern_sapv'] as $shs)
					{
						$price_list[$ckey][$bayern_sapv_types[$shs]] = $master_price_list[$ckey][$cycle_period['start']][0]['bayern_sapv'][$shs]['price'];
					}
				}

				$this->view->pricelist = $price_list;
				$this->view->invoiceamount = $price_list[$sel_val][max($finalVerordnet)];
//			END @LE: changed to get client price set instead of the values from array 31.05.2012


				/* get patient other data END */
				/*				 * ************************* Invoice Information End ************ */
			}
			else
			{
				$this->view->admissionVerordnets = json_encode(array("0"));
			}
		}

		//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
		public function editinvoiceAction($params = array())
		{
			/*			 * ************************* System Vars Start ************ */

		    if(isset($params) && !empty($params)){
		        $_REQUEST = $params;
		        $this->_helper->viewRenderer->setNoRender();
		    }
		    
			$logininfo = new Zend_Session_Namespace('Login_Info');
			
			//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
			$clientid = isset($_REQUEST['clientid']) && ! empty($_REQUEST['clientid']) ? $_REQUEST['clientid'] :  $logininfo->clientid;
			$userid = isset($_REQUEST['userid']) && ! empty($_REQUEST['userid']) ? $_REQUEST['userid'] : $logininfo->userid;
			


			/*			 * ************************* Load Saved Invoice Data Start ************ */
			$invoiceC = new ClientInvoices();
			$inv = $invoiceC->getInvoice($_REQUEST['invoiceid'], $clientid);

			if(in_array($inv[0]['id'], ClientInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			$this->view->invoice = $inv[0];
			$this->retainValues($inv[0]);

			$invoice_status = $inv[0]['status'];

			$iinv = new InvoiceItems();
			$iinv = $iinv->getInvoiceItems($inv[0]['id'], $clientid);

			//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
			if($_REQUEST['bulk_print'] == '1' && strlen($_REQUEST['invoiceid']) > 0 && $inv[0]['storno'] == 1){
		        $_REQUEST['iid'] = $inv[0]['record_id'];
		        $_REQUEST['stornopdf'] = 1;
		        $_REQUEST['storno'] = $inv[0]['id'];
			}
			//--
			
			
			
			/*			 * ************************* Get client data START ************ */
			$cl = new Client();
			$client_data = $cl->getClientDataByid($clientid);
			$this->view->client_city = $client_data[0]['city'];
			$this->view->client_greetings = $client_data[0]['greetings'];

			/*			 * ************************* Get client data END ************ */
			$this->view->word_addition = "";
				
			$modules = new Modules();
			if($modules->checkModulePrivileges("100", $clientid)) // change tab name
			{
			    $this->view->word_addition = ", Anschreiben";
			}
			else
			{
			    $this->view->word_addition = "";
			}



			foreach($iinv as $kItem => $vItem)
			{
				if($vItem['itemValue'] != 0)
				{
					$invoiceItemsData[$vItem['itemLabel']] = $vItem['itemValue'];
				}
				else
				{
					$invoiceItemsData[$vItem['itemLabel']] = $vItem['itemString'];
				}
			}

			$this->retainValues($invoiceItemsData);


			/*			 * ************************* Load Saved Invoice Data End ************ */

			$ipid_sel = $inv[0]['ipid'];
			$this->view->patipid = $ipid_sel;
			$decid_sel = Pms_CommonData::getIdfromIpid($ipid_sel);
			$this->view->patientid = $decid_sel;
			$Tr = new Zend_View_Helper_Translate();

			/*			 * ************************* System Vars End ************ */

			/*				 * ************************* Patient Addressbook Start ************ */
			$adminvisible = PatientMaster::getAdminVisibility($ipid_sel);
			
			if(!$adminvisible && $logininfo->usertype == 'SA')
			{
				$hide_patient_tab = true;
			}
			else
			{
				$hide_patient_tab = false;
			}
			
			$this->view->hide_patient_tab = $hide_patient_tab;
			
			// Hausarzt
			$famdoc = FamilyDoctor::getFamilyDoctors($ipid_sel);
			$this->view->fam_doctor = sizeof($famdoc);
			$fam_doctor['practice'] = $famdoc[0]['practice'];
			$fam_doctor['first_name'] = $famdoc[0]['first_name'];
			$fam_doctor['last_name'] = $famdoc[0]['last_name'];
			$fam_doctor['salutation'] = $famdoc[0]['salutation'];
			$fam_doctor['title'] = $famdoc[0]['title'];
			$fam_doctor['street1'] = $famdoc[0]['street1'];
			$fam_doctor['zip'] = $famdoc[0]['zip'];
			$fam_doctor['city'] = $famdoc[0]['city'];
			$fam_doctor['phone_practice'] = $famdoc[0]['phone_practice'];
			$fam_doctor['phone_cell'] = $famdoc[0]['phone_cell'];
			$fam_doctor['fax'] = $famdoc[0]['fax'];
			$fam_doctor['email'] = $famdoc[0]['email'];
			$fam_doctor['doctornumber'] = $famdoc[0]['doctornumber'];
			$fam_doctor['medical_speciality'] = $famdoc[0]['medical_speciality'];
			$fam_doctor['comments'] = $famdoc[0]['comments'];
			$this->view->family_doctor = $fam_doctor;
			$this->view->fam_doctor_id = $famdoc[0]['id'];
				
			//Ansprechpartner
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid_sel);
			
			$familydegree = new FamilyDegree();
			//$cnt_degree_array = $familydegree->getFamilyDegrees(1);
			$cnt_degree_array = $familydegree->getClientFamilyDegrees($clientid,1);
			
			$this->view->degree = $cnt_degree_array;
			
			$this->view->patient_contacts = $pcs;
	
			//Pflegedienst
			$pfleg = Pflegedienstes::getPflegedienstes($ipid_sel);
			if($pfleg > 0)
			{
				$this->view->pat_pfleg = $pfleg;
			}
			
			// Pharmacy
			$pharmacy = new PatientPharmacy();
			$pharm_pat = $pharmacy->getPatientPharmacy($ipid_sel);
			if(sizeof($pharm_pat) > 0){
				$this->view->pat_pharmacy = $pharm_pat;
			}
			
				
			
			//Krankenkassen
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid_sel);
			$this->view->patient_healthinsurance = $phi;

			$debtor_number = '';
			if (isset($phi[0]) && $phi[0]['privatepatient'] == 1 && $modules->checkModulePrivileges(88, $clientid)) {
			    //Debitorennummer Privatpatient 
			    //get ppun (private patient unique number)
			    $ppun = new PpunIpid();
			    $ppun_number = $ppun->check_patient_ppun($ipid_sel, $clientid);
			    if ($ppun_number) {
			        $debtor_number = $ppun_number['ppun'];
			    }
			    
			} elseif (isset($phi[0]) && $phi[0]['privatepatient'] == 0 && $modules->checkModulePrivileges(90, $clientid)) {
			    //Debitoren-Nummer(Health Insurance)
			    //get debtor number from patient healthinsurance
			    if (strlen($phi[0]['ins_debtor_number']) > 0) {
			        $debtor_number =  $phi[0]['ins_debtor_number'];
			    }
			}
			
			
			//Facharzt
			$m_specialists_types = new SpecialistsTypes();
			$specialists_types  =$m_specialists_types->get_specialists_types($clientid);
			
			if(!empty($specialists_types)){
				foreach($specialists_types as $k=>$tp){
					$s_type[$tp['id']] = $tp['name'];
				}
			}
			$this->view->s_type =$s_type;
			$specialists = new PatientSpecialists();
			$specialists_arr = $specialists->get_patient_specialists($ipid_sel, true);

			if(count($specialists_arr))
			{
				$this->view->patient_specialists = $specialists_arr;
			}
				
				
			//Sanitatshauser
			$m_supplies =  new PatientSupplies();
			$p_spupplies =$m_supplies->getPatientSupplies($ipid_sel);
			if(count($p_spupplies))
			{
				$this->view->patient_spupplies = $p_spupplies;
			}
			
			//sonst. Versorger
			$suppliers = new PatientSuppliers();
			$pat_suppliers = $suppliers->getPatientSuppliers($ipid_sel);
			if(sizeof($pat_suppliers) > 0)
			{
				$this->view->patient_suppliers = $pat_suppliers;
			}
			
			//Physiotherapist
			$physiotherapists = new PatientPhysiotherapist();
			$pat_physio = $physiotherapists->getPatientPhysiotherapist($ipid_sel);
			if(sizeof($pat_physio) > 0)
			{
				$this->view->patient_physioterapeuten = $pat_physio;
			}
				
			//Homecare
			$m_homecare = new PatientHomecare();
			$pat_homecare = $m_homecare->getPatientHomecare($ipid_sel);
			if(sizeof($pat_homecare) > 0)
			{
				$this->view->patient_homecare = $pat_homecare;
			}
				
				
			/*				 * ************************* Patient Addressbook End ************ */		

			/*			 * ************************* Patient Information Start ************ */
			$patientmaster = new PatientMaster();
//			get patient admissions
			//$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid_sel), true);
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid_sel),true,$clientid);//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020 - add client param

			$admCycle[-1] = "gesamt";
			if(count($admissions[$ipid_sel]['admissionDates']) != "0")
			{
				//gesamt limitation
				$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid_sel]['admissionDates'][0]['date']));

				foreach($admissions[$ipid_sel]['admissionDates'] as $keyAdm => $admitedDate)
				{


					if(!empty($admissions[$ipid_sel]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid_sel]['dischargeDates'][$keyAdm]['date'];
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}

					$admCycle[$keyAdm] = date("d.m.Y", strtotime($admitedDate['date'])) . " - " . date("d.m.Y", strtotime($dischargeDate));
					$admissionsCycles[$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
					$admissionsCycles[$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));

					if($keyAdm == (count($admissions[$ipid_sel]['admissionDates']) - 1))
					{
						$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($dischargeDate));
					}
				}
			}
			else
			{
				$admCycle[0] = date("d.m.Y", strtotime($admissions[$ipid_sel]['admission_date'])) . " - " . date("d.m.Y", strtotime($admissions[$ipid_sel]['discharge_date']));
				//gesamt if no admision-readmission cycle
				$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid_sel]['admission_date']));
				$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($admissions[$ipid_sel]['discharge_date']));
				$admissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid_sel]['admission_date']));
				$admissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid_sel]['discharge_date']));
			}

			$this->view->admissionCycles = $admCycle;

			$this->view->cycleAdmissionsDetails = $admissionsCycles;
			if(!isset($_REQUEST['cycle']) || !is_numeric($_REQUEST['cycle']))
			{
				$sel_val = $this->view->cycle;
			}
			else
			{
				$sel_val = $_REQUEST['cycle'];
			}
			$this->view->cycleSelected = $sel_val;



			$verordnets = Pms_CommonData::getSapvCheckBox(false,true);
			$this->view->verordnets = $verordnets;

			$verd = new SapvVerordnung();
			$verdarray = $verd->getFormoneAllSapvInPeriods($ipid_sel, $admissionsCycles);

			if(count($verdarray) > 0)
			{
				foreach($verdarray as $kAdmCycle => $verord)
				{
					foreach($verord as $vKey => $verordValue)
					{

						if(strlen($verordValue['verordnet']) > 1)
						{
							//explode value
							$verords = explode(",", $verordValue['verordnet']);
							foreach($verords as $verordnet)
							{
								$finalVerordnet[$kAdmCycle][] = $verordnet;
							}
						}
						else
						{
							$finalVerordnet[$kAdmCycle][] = $verordValue['verordnet'];
						}
					}
					if(count($finalVerordnet[$kAdmCycle]) > 0)
					{
						$finalVerordnet[$kAdmCycle] = max(array_unique($finalVerordnet[$kAdmCycle]));
					}
					else
					{
						$finalVerordnet[$kAdmCycle] = 0;
					}
				}
			}

			$this->view->admissionVerordnets = json_encode($finalVerordnet);

			$verordnets_bay = Pms_CommonData::getSapvCheckBox(true,true);

			foreach($verordnets_bay as $type => $vv_sh)
			{
				$bayern_sapv_types[$vv_sh] = $type;
			}

			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$p_list = new PriceList();


			foreach($admissionsCycles as $cycle_key => $cycle_date)
			{

				$current_period['start'] = date("Y-m-d", strtotime($cycle_date['start']));
				$current_period['end'] = date("Y-m-d", strtotime($cycle_date['end']));

				$master_price_list[$cycle_key] = $p_list->get_period_price_list($current_period['start'], $current_period['end'],$clientid); // CHanged the function  on 18.03.2019 TODO-2194
				$master_price_list[$cycle_key] = $p_list->get_period_price_list_day2type($current_period['start'], $current_period['end']);
				
			}


			foreach($admissionsCycles as $ckey => $cdate)
			{
				$cycle_period['start'] = date("Y-m-d", strtotime($cdate['start']));
				$cycle_period['end'] = date("Y-m-d", strtotime($cdate['end']));

				foreach($shortcuts['bayern_sapv'] as $shs)
				{
					$price_list[$ckey][$bayern_sapv_types[$shs]] = $master_price_list[$ckey][$cycle_period['start']][0]['bayern_sapv'][$shs]['price'];
				}
			}

			$this->view->pricelist = $price_list;
//			END @LE: changed to get client price set instead of the values from array 31.05.2012

			if($_REQUEST['dbg'])
			{
				print_r($this->view->invoiceamount . "\n");
				print_r(number_format($this->view->invoiceamount) . "\n");
			}
			$this->view->invoiceTotal = $this->view->invoiceamount;

//			Get patient first location(aka admission location)
			$loca = new PatientLocation();
			$locrray = $loca->getFirstLocation($decid_sel);

			$lc = new Locations();
			$locationsarray = $lc->getLocations($clientid, 1);

			$locationsarray[0] = "Keine";

			$this->view->locationsarray = $locationsarray;


			/* get all client patients START */
			$pat = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->where("clientid = '" . $clientid . "'");
			$patIpidsArr = $pat->fetchArray();

			foreach($patIpidsArr as $kPat => $patDetails)
			{
				$patIpids[] = $patDetails['ipid'];
				$patientEpids[$patDetails['ipid']] = $patDetails['epid'];
			}

			$patDetails = Doctrine_Query::create()
				->select("*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
				AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
				AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
				AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,
				AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street,
				AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip,
				AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city")
				->from('PatientMaster p')
				->whereIn('ipid', $patIpids)
				->andWhere('isdelete=0')
				->orderBy('last_name ASC');

			$patientDetailsArr = $patDetails->fetchArray();
			
			$patientDetailsArr_un = array();
			foreach($patientDetailsArr as $kPatDet => $patientDet)
			{
				$patientsSelector[Pms_Uuid::encrypt($patientDet['id'])] = strtoupper($patientEpids[$patientDet['ipid']]) . " - " . $patientDet['last_name'] . ", " . $patientDet['first_name'];
				$patientsArray[$patientDet['id']] = strtoupper($patientEpids[$patientDet['ipid']]) . " - " . $patientDet['last_name'] . ", " . $patientDet['first_name'];
				$patientsipidsArray[$patientDet['ipid']] = strtoupper($patientEpids[$patientDet['ipid']]) . " - " . $patientDet['last_name'] . ", " . $patientDet['first_name'];
				
				$patientDetailsArr_un[$patientDet['ipid']] = $patientDet;
				$patientDetailsArr_un[$patientDet['ipid']]['epid'] = $patientEpids[$patientDet['ipid']];
				$patientDetailsArr_un[$patientDet['ipid']]['birthd'] = date("d.m.Y",strtotime($patientDet['birthd']));
			}
			$this->view->patientsArray = $patientsSelector; //patients array for select (with encrypted id as value[key])
			$this->view->patientsIdsArray = $patientsArray; //patients array (with unencrypted id as value[key]) for listing only
			$this->view->patientsipidsArray = $patientsipidsArray; //patients array (with ipids as value[key]) for listing only
			/* get all client patients END */

			/*			 * ************************* Patient Information End   ************ */

			/*			 * ************************* Process Post Data Start ************ */
			
			// ISPC-2472 @Ancuta 07.11.2019
			$pdf_file_name =  "Invoice-" . $patientEpids[$inv[0]['ipid']] . "-" . $inv[0]['id'];
			 
			$invoice_number_full="";
			$invoice_number_full .=  (strlen($inv[0]['prefix']) > 0) ? $inv[0]['prefix'] : '';
			$invoice_number_full .= $inv[0]['rnummer'];
				
			if(strlen($invoice_number_full) > 0 ){
			    $pdf_file_name = $invoice_number_full;
			}
			// -- 
	 
			
			if($this->getRequest()->isPost())
			{
				if($invoice_status != 2)
				{

					if($_POST['draft'])
					{
						$_POST['status'] = "4";
					}
					else if($_POST['complete'])
					{
						$_POST['status'] = "0";
					}
					else if($_POST['delete'] || $_POST['deletemore'] == "1")
					{
						$_POST['status'] = "3";
					}
				}
				else
				{

					$_POST['status'] = $invoice_status;
				}




				if(!$_POST['pdf'])
				{
					$invoicesForm = new Application_Form_Invoices();
					$invoice = $invoicesForm->UpdateData($_POST);
					//ISPC-2312 Ancuta 06.12.2020
					if($_REQUEST['redirect2new'] == '1'){
					    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=by_invoice');
					    exit();
					}
					//-- 
					$this->_redirect(APP_BASE . 'invoice/invoice?flg=suc');
				}
				else
				{
					$post = $_POST;
					$post['cycle'] = $admCycle[$_POST['cycle']];
					$post['highsapv'] = $verordnets[$_POST['highsapv']];
					$post['admissionlocation'] = ucfirst($locationsarray[$_POST['admissionlocation']]);
					$post['client_city'] = $client_data[0]['city'];
					$post['client_greetings'] = nl2br($client_data[0]['greetings']);
					$post['word_addition'] = $this->view->word_addition;

					//ISPC-2016
					$use_new_client_defined_docx_template = false;
					//ISPC-2016
					$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'by_invoice');
						
					
					if (isset($template_data[0])) {
					    
					    $template = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
					    
					    $tokenfilter = array();
					     
					    $post['full_invoice_number'] = $post['prefix'] .$post['invoicenumber'];
					    $post['address'] = $post['healthinsurancename']
					    . PHP_EOL . $post['healthinsurancecontact']
					    . PHP_EOL . $post['healthinsurancestreet']
					    . PHP_EOL . $post['healthinsuranceaddress'];
					    
					    $post['healthinsurance_debtor_number'] = $debtor_number;
					    
					    $tokenfilter['invoice'] = $post;
					     
					  /*   $tokenfilter['patient'] = array(
// 					         'first_name' => $patientDetailsArr[0]['first_name'],
// 					        'last_name' => $patientDetailsArr[0]['last_name'],
// 					        'birthd' => date('d.m.Y', $patientDetailsArr[0]['birthd']),
// 					        'street' => $patientDetailsArr[0]['street1'],
// 					        'zip' => $patientDetailsArr[0]['zip'],
// 					        'city' => $patientDetailsArr[0]['city'], 
					        
					        'first_name' => $patientDetailsArr_un[$inv[0]['ipid']]['first_name'],
					        'last_name' => $patientDetailsArr_un[$inv[0]['ipid']]['last_name'],
					        'birthd' => date('d.m.Y', strtotime($patientDetailsArr_un[$inv[0]['ipid']]['birthd'])),
					        'street' => $patientDetailsArr_un[$inv[0]['ipid']]['street1'],
					        'zip' =>  $patientDetailsArr_un[$inv[0]['ipid']]['zip'],
					        'city' => $patientDetailsArr_un[$inv[0]['ipid']]['city'],
					        'epid' => $patientDetailsArr_un[$inv[0]['ipid']]['epid'],
					        
					        
					    ); */
					    
					    
					    $tokenfilter['patient'] = $patientDetailsArr_un[$inv[0]['ipid']]; // send all patient details
					     
// 					    $tokenfilter['client'] = $clientid_details;
					    $tokenfilter['client'] = $client_data[0]; // send all client details
					    $tokenfilter['client']['client_ik'] = $client_data[0]['institutskennzeichen'];
					     
					    $tokenfilter['user'] = $userid_details;
					    
					    $tokenfilter['default_tokens']['default_current_date'] = date("d.m.Y"); 
					    
					    $tokenfilter['sapv'] = array(
					        'highsapv' => $post['highsapv'],
					        'cycle' => $post['cycle'],
					    );
					    


					    // ADDED By ANCUTA !!!! They are not replaced - PLEASE CHECK - !!!
					     
					    $tokenfilter['invoice']['invoiced_month'] ="";// [';invoiced_month', 'invoiced_month'],
					    $tokenfilter['invoice']['first_active_day'] ="";// [';first_active_day', 'first_active_day'],
					    $tokenfilter['invoice']['last_active_day'] ="";// [';last_active_day', 'last_active_day'],
					    $tokenfilter['invoice']['first_sapv_day'] ="";// [';first_sapv_day', 'first_sapv_day'],
					    $tokenfilter['invoice']['last_sapv_day'] ="";// [';last_sapv_day', 'last_sapv_day'],
					    $tokenfilter['invoice']['sapv_approve_date'] ="";// [';sapv_approve_date', 'sapv_approve_date'],
					    $tokenfilter['invoice']['sapv_approve_nr'] ="";// [';sapv_approve_nr', 'sapv_approve_nr'],
					    $tokenfilter['invoice']['footer'] ="";// [';footer', 'footer'],
					    $tokenfilter['invoice']['footer_text'] ="";// [';footer_text', 'footer_text'],
					    $tokenfilter['invoice']['unique_id'] ="";// [';unique_id', 'unique_id'],
					    $tokenfilter['invoice']['invoiced_month'] ="";// [';invoiced_month', 'invoiced_month'],
					    $tokenfilter['invoice']['invoice_items_html'] ="";// [';invoice_items_html', 'invoice_items_html'],
					     
					    $tokenfilter['invoice']['patient_pflegestufe'] ="";//
					    $tokenfilter['invoice']['current_date'] =date("d.m.Y");;// ???
					     
// 					    $this->_editinvoice_generate_pdf_and_download($template, $tokenfilter, "Invoice {$patientEpids[$inv[0]['ipid']]} {$inv[0]['id']}");//ISPC-2472 @Ancuta 07.11.2019
					    //sanitize filename
					    $pdf_file_name = Pms_CommonData::filter_filename($pdf_file_name, true);
					    $this->_editinvoice_generate_pdf_and_download($template, $tokenfilter, $pdf_file_name);
					    
					} else {
					    
// 					    $this->generateformPdf(3, $post, "Invoice-" . $patientEpids[$inv[0]['ipid']] . "-" . $inv[0]['id'] . "", "invoice.html");//ISPC-2472 @Ancuta 07.11.2019
					    //sanitize filename
					    $pdf_file_name = Pms_CommonData::filter_filename($pdf_file_name, true);
					    $this->generateformPdf(3, $post, $pdf_file_name, "invoice.html");
					}
					
				}
			}

			if($_REQUEST['pdfquick'] == 1)
			{
			   
			    //ISPC-2016
			    $use_new_client_defined_docx_template = false;

				$post = $invoiceItemsData;
				$post['cycle'] = $admCycle[$invoiceItemsData['cycle']];
				$post['highsapv'] = $verordnets[$invoiceItemsData['highsapv']];
				$post['admissionlocation'] = ucfirst($locationsarray[$invoiceItemsData['admissionlocation']]);
				$post['client_city'] = $client_data[0]['city'];
				$post['client_greetings'] = nl2br($client_data[0]['greetings']);
				$post['word_addition'] = $this->view->word_addition;
			

				if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
				{
					$storno_details = $invoiceC->getInvoice($_REQUEST['storno'], $clientid);
					if($storno_details)
					{

						$post['prefix'] = $storno_details[0]['prefix'];
						$post['rnummer'] = $storno_details[0]['rnummer'];
						$post['invoicenumber'] = $storno_details[0]['rnummer'];     //ISPC-2532 Lore 11.11.2020
						$post['letterdate'] = date('d.m.Y', strtotime($storno_details[0]['completedDate']));     //ISPC-2532 Lore 11.11.2020
						$pdf_file_name = $post['prefix'].$post['invoicenumber'];      //ISPC-2532 Lore 11.11.2020
						
						$post['invoiceamount'] = ($storno_details[0]['invoiceTotal'] * (-1));

						$template = 'strono_invoice.html';
					}
					else
					{
					    //ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
					    if( ! isset ( $_REQUEST['bulk_print'] )  && $_REQUEST['bulk_print'] != '1'){
					        
					        //ISPC-2312 Ancuta 06.12.2020
					        if($_REQUEST['redirect2new'] == '1'){
					            $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=by_invoice');
					            exit();
					        }
					        //-- 
    						$this->_redirect(APP_BASE . 'invoice/invoice');
    						exit;
					    }
					}
				}
				else
				{
					
				    //ISPC-2016
					$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'by_invoice');
					
					if (isset($template_data[0])) {
					    
					    $use_new_client_defined_docx_template = true;
					    
					    $template = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
					    
					} else {
					    
					    $template = 'invoice.html';
					}	
					
				}

				if ($use_new_client_defined_docx_template) {
			    
			        $tokenfilter = array();
			        
			        $post['full_invoice_number'] = $post['prefix'] .$post['invoicenumber'];
			        $post['address'] = $post['healthinsurancename'] 
			        			 . PHP_EOL . $post['healthinsurancecontact']
			        			 . PHP_EOL . $post['healthinsurancestreet']
			        			 . PHP_EOL . $post['healthinsuranceaddress'];
			        $post['healthinsurance_debtor_number'] = $debtor_number;
			        
			        $tokenfilter['invoice'] = $post;
			        
			       /*  $tokenfilter['patient'] = array(    
			            'first_name' => $patientDetailsArr_un[$inv[0]['ipid']]['first_name'],
			            'last_name' => $patientDetailsArr_un[$inv[0]['ipid']]['last_name'],
			            'birthd' => date('d.m.Y', strtotime($patientDetailsArr_un[$inv[0]['ipid']]['birthd'])),
			            'street' => $patientDetailsArr_un[$inv[0]['ipid']]['street1'],
			            'zip' =>  $patientDetailsArr_un[$inv[0]['ipid']]['zip'],
			            'city' => $patientDetailsArr_un[$inv[0]['ipid']]['city'],
			            'epid' => $patientDetailsArr_un[$inv[0]['ipid']]['city'],
// 			            'first_name' => $patientDetailsArr[0]['first_name'],
// 			            'last_name' => $patientDetailsArr[0]['last_name'],
// 			            'birthd' => date('d.m.Y', $patientDetailsArr[0]['birthd']),
// 			            'street' => date('d.m.Y', $patientDetailsArr[0]['street1']),
// 			            'zip' => date('d.m.Y', $patientDetailsArr[0]['zip']),
// 			            'city' => date('d.m.Y', $patientDetailsArr[0]['city']),
			        ); */
			        
			        $tokenfilter['patient'] = $patientDetailsArr_un[$inv[0]['ipid']]; // send all patient details
			        
			        $tokenfilter['client'] = $client_data[0];
					$tokenfilter['client']['client_ik'] = $client_data[0]['institutskennzeichen'];
					     
			        
			        $tokenfilter['user'] = $userid_details;
			        
			        $tokenfilter['default_tokens']['default_current_date'] = date("d.m.Y");
			        
			        
			        
			        $tokenfilter['sapv'] = array(
			            'highsapv' => $post['highsapv'],
			            'cycle' => $post['cycle'],    
			        );
			        
            
			        // ADDED By ANCUTA !!!! They are not replaced - PLEASE CHECK - !!! 
			        
			        $tokenfilter['invoice']['invoiced_month'] ="";// [';invoiced_month', 'invoiced_month'],
			        $tokenfilter['invoice']['first_active_day'] ="";// [';first_active_day', 'first_active_day'],
			        $tokenfilter['invoice']['last_active_day'] ="";// [';last_active_day', 'last_active_day'],
			        $tokenfilter['invoice']['first_sapv_day'] ="";// [';first_sapv_day', 'first_sapv_day'],
			        $tokenfilter['invoice']['last_sapv_day'] ="";// [';last_sapv_day', 'last_sapv_day'],
			        $tokenfilter['invoice']['sapv_approve_date'] ="";// [';sapv_approve_date', 'sapv_approve_date'],
			        $tokenfilter['invoice']['sapv_approve_nr'] ="";// [';sapv_approve_nr', 'sapv_approve_nr'],
			        $tokenfilter['invoice']['footer'] ="";// [';footer', 'footer'],
			        $tokenfilter['invoice']['footer_text'] ="";// [';footer_text', 'footer_text'],
			        $tokenfilter['invoice']['unique_id'] ="";// [';unique_id', 'unique_id'],
			        $tokenfilter['invoice']['invoiced_month'] ="";// [';invoiced_month', 'invoiced_month'],
			        $tokenfilter['invoice']['invoice_items_html'] ="";// [';invoice_items_html', 'invoice_items_html'],
			        
				    $tokenfilter['invoice']['patient_pflegestufe'] ="";//
					 $tokenfilter['invoice']['current_date'] =date("d.m.Y");;// ???
					     
// 			        $this->_editinvoice_generate_pdf_and_download($template, $tokenfilter, "Invoice {$patientEpids[$inv[0]['ipid']]} {$inv[0]['id']}");
					//sanitize filename
					$pdf_file_name = Pms_CommonData::filter_filename($pdf_file_name, true);

					if($_REQUEST['bulk_print'] == '1'){
					    
					    $pseudo_post['bulk_print'] = 1;
					    $pseudo_post['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
					    $pseudo_post['unique_id'] = $inv[0]['id'];
					    $pseudo_post['clientid'] = $clientid;
					    $pseudo_post['controller'] = $_REQUEST['print_controller'];
					    
					    $file_name = $this->_editinvoice_generate_pdf_and_download_pj($template, $tokenfilter, $pdf_file_name,$clientid,$pseudo_post);
					    
    			        return $file_name;
    			        
					} else {
    			        $this->_editinvoice_generate_pdf_and_download($template, $tokenfilter, $pdf_file_name);
					}
				     
				} else {
						 
				
				    $post['patientipid'] = $inv[0]['ipid'];
//     				$this->generateformPdf(3, $post, "Invoice-" . $patientEpids[$inv[0]['ipid']] . "-" . $inv[0]['id'] . "", $template);				
				    //sanitize filename
				    $pdf_file_name = Pms_CommonData::filter_filename($pdf_file_name, true);
				    
				    if($_REQUEST['bulk_print'] == '1'){
				        
				        $post['bulk_print'] = 1;
				        $post['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
				        $post['unique_id'] = $inv[0]['id'];
				        $post['clientid'] = $clientid;
				        $post['controller'] = $_REQUEST['print_controller'];
				        $file_name=  $this->generateformPdf(3, $post, $pdf_file_name, $template);
				        
				        return $file_name;
				        
				    } else { 
    				    $this->generateformPdf(3, $post, $pdf_file_name, $template);
				    }
				}
				
				//ISPC-2312 Ancuta 06.12.2020
				if($_REQUEST['redirect2new'] == '1'){
				    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=by_invoice');
				    exit();
				}
				//-- 
				$this->_redirect(APP_BASE . 'invoice/invoice?inv_id=' . $_GET['id']);
			}
			/*			 * ************************* Process Post Data   End ************ */
		}
		
		
		private function _editinvoice_generate_pdf_and_download($template = '', $tokenfilter = array(), $download_nice_name = 'Invoice')
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    //dd($tokenfilter);
		    //die(print_r(func_get_args(), true));
		    $docx_helper = $this->getHelper('CreateDocxFromTemplate');
		    
		    //$docx_helper->test_all_invoice_templates($template, $tokenfilter , 'pdf');
		    
		    $name = time();
		    
		    $docx_helper->setOutputFile(PDFDOCX_PATH . '/' . $clientid . '/' . $name);
		    
		    //do not add extension !
		    $docx_helper->setBrowserFilename($download_nice_name);
		    if(APPLICATION_ENV == 'development'){
		        $docx_helper->create_docx ($template, $tokenfilter) ;
		    } else{
		        $docx_helper->create_pdf ($template, $tokenfilter) ;
		    }
		    $docx_helper->file_save_on_ftp();
		    
		    $docx_helper->download_file();
		}
		
		
		
		//ISPC-2609 + ISPC-2000 Ancuta - added clientid param 
		private function _editinvoice_generate_pdf_and_download_pj($template = '', $tokenfilter = array(), $download_nice_name = 'Invoice', $clientid = false,$post_data = false)
		{

		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    if(!$clientid){
    		    $clientid = $logininfo->clientid;
		    }
		    //dd($tokenfilter);
		    //die(print_r(func_get_args(), true));
		    
		    if($post_data){
    		    $this->getRequest()->setParams($post_data);//ISPC-2609 Amcuta 26.09.2020
		    }
		    $docx_helper = $this->getHelper('CreateDocxFromTemplate');
		    //$docx_helper->test_all_invoice_templates($template, $tokenfilter , 'pdf');

		    
            $name = time();
            if( $post_data['bulk_print'] == 1 && isset($post_data['batch_temp_folder'])) {
                
                /* $docx_helper->setOutputFile(PDFDOCX_PATH . '/' . $clientid . '/' . $name);
                
                
                //do not add extension !
                $docx_helper->setBrowserFilename($download_nice_name);
                
                if(APPLICATION_ENV == 'development'){
                    $docx_helper->create_docx ($template, $tokenfilter) ;
                } else{
                    $docx_helper->create_pdf ($template, $tokenfilter) ;
                }
                $docx_helper->file_save_on_ftp();
                
                $docx_helper->download_file(); */
                
                
                
                $batch_temp_folder = $post_data['batch_temp_folder'];
                
                if(!is_dir(PDFDOCX_PATH))
                {
                    while(!is_dir(PDFDOCX_PATH))
                    {
                        mkdir(PDFDOCX_PATH);
                        if($i >= 50)
                        {
                            //exit; //failsafe
                            break;
                        }
                        $i++;
                    }
                }
                
                if(!is_dir(PDFDOCX_PATH . '/' . $clientid))
                {
                    while(!is_dir(PDFDOCX_PATH . '/' . $clientid))
                    {
                        mkdir(PDFDOCX_PATH . '/' . $clientid);
                        if($i >= 50)
                        {
                            //exit; //failsafe
                            break;
                        }
                        $i++;
                    }
                }
                
                
                
                if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
                {
                    while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
                    {
                        mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
                        if($i >= 50)
                        {
                            exit; //failsafe
                        }
                        $i++;
                    }
                }
                
                
                $destination_path = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/pdf_invoice_' . $post_data['unique_id'];
                
                
                $docx_helper->setOutputFile($destination_path);
                
                
                //do not add extension !
                $docx_helper->setBrowserFilename($download_nice_name);
                 
                $docx_helper->create_pdf ($template, $tokenfilter) ;
                $docx_helper->file_save_on_ftp();
                
                return $destination_path; 
                
                
                
            
		} else {
		    
            $docx_helper->setOutputFile(PDFDOCX_PATH . '/' . $clientid . '/' . $name);
            
//             dd($download_nice_name,$name);
            //do not add extension !
            $docx_helper->setBrowserFilename($download_nice_name);
            if(APPLICATION_ENV == 'development'){
                $docx_helper->create_docx ($template, $tokenfilter) ;
            } else{
                $docx_helper->create_pdf ($template, $tokenfilter) ;
            }
            $docx_helper->file_save_on_ftp();
    
            $docx_helper->download_file();
		}
	}
		

		public function patientsearchAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');

			$clientid = $logininfo->clientid;
			if(strlen($_REQUEST['ltr']) > 2)
			{
				$drop = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where("clientid = '" . $clientid . "'")
					->orderBy('epid asc');
				$droparray = $drop->fetchArray();

				if($droparray)
				{
					foreach($droparray as $key => $val)
					{
						$patient_epids[$val['ipid']] = strtoupper($val['epid']);
						$ipidval .= $comma . "'" . $val['ipid'] . "'";
						$comma = ",";
					}
				}

				$user_patients = PatientUsers::getUserPatients($logininfo->userid);
				if(count($droparray) > 0)
				{

					$sql = "*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,";
					$sql .="AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,";
					$sql .="AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,";
					$sql .="AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,";
					$sql .="AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,";
					$sql .="AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,";
					$sql .="AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,";
					$sql .="AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip,";
					$sql .="AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,";
					$sql .="AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone,";
					$sql .="AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') as mobile,";
					$sql .="IF(isdischarged != 1 AND isstandby != 1, 0,(IF(isdischarged = 1,1,2))) as status,";
					$sql .="AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex";

					// if super admin check if patient is visible or not
					if($logininfo->usertype == 'SA')
					{
						$sql = "*,";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
						$sql .= "IF(isdischarged != 1 AND isstandby != 1, 0,( IF(isdischarged = 1,1,2)) ) as status,";
					}

					$patient = Doctrine_Query::create()
						->select($sql)
						->from('PatientMaster p')
						->where("p.ipid in(" . $ipidval . ")  and p.ipid IN (" . $user_patients['patients_str'] . ") and p.isdelete = 0")
						->andWhere('p.isstandby="0"')
						->andWhere('p.isstandbydelete="0"');
					$patient->leftJoin("p.EpidIpidMapping e");
					$patient->andwhere("e.clientid = " . $logininfo->clientid . " and trim(lower(e.epid)) like trim(lower('" . $_REQUEST['ltr'] . "%')) or (trim(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1))) like trim(lower('" . $_REQUEST['ltr'] . "%')) or trim(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1))) like trim(lower('" . $_REQUEST['ltr'] . "%'))  or concat(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['ltr'] . "%')) or
				concat(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['ltr'] . "%')) or
				concat(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['ltr'] . "%')) or
				concat(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['ltr'] . "%')))");

					if($logininfo->hospiz == 1)
					{
						$patient->andwhere('ishospiz = 1');
					}

					$patient->orderby('status,ipid');
					$droparray1 = $patient->fetchArray();
				}
				elseif($logininfo->showinfo == 'show')
				{

					$fndrop = Doctrine_Query::create()
						->select('*')
						->from('EpidIpidMapping')
						->where("clientid = '" . $clientid . "'");
					$fndroparray = $fndrop->fetchArray();

					if($fndroparray)
					{
						$comma = ",";
						$fnipidval = "'0'";
						foreach($fndroparray as $key => $val)
						{
							$fnipidval .= $comma . "'" . $val['ipid'] . "'";
							$comma = ",";
						}
					}


					$patient1 = Doctrine_Query::create()
						->select("*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
						AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
						AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
						AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as oll,
						AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
						AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,
						AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,
						AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,
						AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip
						,AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city
						,AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone
						,AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') as mobile,
						IF(isdischarged != 1 AND isstandby != 1, 0,(IF(isdischarged = 1,1,2))) as status
						,AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex")
						->from('PatientMaster')
						->where("isdelete = 0 and ipid in(" . $fnipidval . ") and (trim(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) like trim(lower('" . $_REQUEST['ltr'] . "%')) or trim(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) like trim(lower('" . $_REQUEST['ltr'] . "%'))  or concat(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['ltr'] . "%')) or
				concat(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['ltr'] . "%')) or
				concat(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['ltr'] . "%')) or
				concat(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['ltr'] . "%')))")
						->andWhere('isstandby="0"')
						->andWhere('isstandbydelete="0"')
						->orderby('status');

					$droparray2 = $patient1->fetchArray();
				}
			}

			if(is_array($droparray2) || is_array($droparray1))
			{
				$res = array_merge((array) $droparray2, (array) $droparray1);

				for($i = 0; $i < count($res); $i++)
				{
					$res[$i]['status'] = $res[$i]['status'];


					if(strlen($res[$i]['middle_name']) > 0)
					{
						$res[$i]['middle_name'] = $res[$i]['middle_name'];
					}
					else
					{
						$res[$i]['middle_name'] = " ";
					}

					$res[$i]['epid'] = $patient_epids[$res[$i]['ipid']];
					$res[$i]['id'] = Pms_Uuid::encrypt($res[$i]['id']);
				}
			}
			else
			{
				$res = array();
			}

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "searchdropdiv_invoice";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['refs'] = $res;

			echo json_encode($response);
			exit;
		}

		public function fetchpatientsAction()
		{
			/*			 * ************************* System Vars Start ************ */
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			/*			 * ************************* System Vars End ************ */


			$this->_helper->viewRenderer->setNoRender();

			$user_patients = PatientUsers::getUserPatients($logininfo->userid);


			print_r(json_encode($user_patients));
			exit;
		}

		private function retainValues($values)
		{
			foreach($values as $key => $val)
			{
				if(!is_array($val))
				{
					$this->view->$key = $val;
				}
			}
		}

		//ISPC-2609 - changes applied 
		private function generateformPdf($chk, $post, $pdfname, $filename, $invoice_type_special = false)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			if( isset ($post['clientid'])){
			    $clientid = $post['clientid'];
			} else{
    			$clientid = $logininfo->clientid;
			}
			$ipid = $post['patientipid'];


			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);

			$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
			$pdf->setDefaults(true, 'P', $bottom_margin); //defaults with header
			$pdf->SetFont('dejavusans', '', 10);
			$pdf->setPrintFooter(false); //remove black line at bottom
			// set margin if user pdf
			if($user_invoice === true)
			{
				$pdf->SetMargins(20, 29, 50);
			}
			else
			{
				$pdf->SetMargins(20, 49, 50);
			}



			if($invoice_type_special !== false)
			{
				if($invoice_type_special == "ND_patient")
				{
					$bg_type = "24"; //ND patient
				}
				elseif($invoice_type_special == "ND_user")
				{
					$bg_type = "25"; // ND user
				}
				else
				{
					$bg_type = "16"; // Bayern invoices
				}
			}
			else
			{

				$bg_type = "16"; //Bayern invoices
			}




			//pdf background
			$bg_image = Pms_CommonData::getPdfBackground($clientid, $bg_type);
			if($bg_image !== false)
			{
				$bg_image_path = PDFBG_PATH . '/' . $clientid . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
				if(is_file($bg_image_path))
				{
					$pdf->setBackgroundImage($bg_image_path);
				}
			}

			$pdf->setHTML($htmlform);


			if($chk == 1)
			{
				$tmpstmp = uniqid(time());
// 				mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH. "/" . $tmpstmp);
// 				$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$pdf->Output(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf', "uploads" );
				
			}
			if($chk == 2)
			{

				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'I');
				exit;
			}

			if($chk == 3)
			{

				$navnames = array();

				$tmpstmp = uniqid(time());;
// 				mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH. "/" . $tmpstmp);

// 				$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				
				
				if($post['bulk_print'] == 1){
				    
				    $batch_temp_folder = $post['batch_temp_folder'];
				    
				    if(!is_dir(PDFDOCX_PATH))
				    {
				        while(!is_dir(PDFDOCX_PATH))
				        {
				            mkdir(PDFDOCX_PATH);
				            if($i >= 50)
				            {
				                //exit; //failsafe
				                break;
				            }
				            $i++;
				        }
				    }
				    
				    if(!is_dir(PDFDOCX_PATH . '/' . $clientid))
				    {
				        while(!is_dir(PDFDOCX_PATH . '/' . $clientid))
				        {
				            mkdir(PDFDOCX_PATH . '/' . $clientid);
				            if($i >= 50)
				            {
				                //exit; //failsafe
				                break;
				            }
				            $i++;
				        }
				    }
				    
				    
				    
				    if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
				    {
				        while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
				        {
				            mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
				            if($i >= 50)
				            {
				                exit; //failsafe
				            }
				            $i++;
				        }
				    }
				    
				    
				    $destination_path = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/pdf_invoice_' . $post['unique_id'].'.pdf';
				    
				    $pdf->toFile($destination_path);
				    
				    return $destination_path;
				    
				    
				} else {
				    $pdf->Output(PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				}
				
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				//moved from sapvfb8_paging.html
				unset($_SESSION['final1'], $_SESSION['final2'], $_SESSION['final3'], $_SESSION['final4'], $_SESSION['final5'], $_SESSION['final6'], $_SESSION['final7'], $_SESSION['final8'], $_SESSION['final9'], $_SESSION['final10'], $_SESSION['final11']);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', "uploads" );
				


				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');


				exit;
			}
		}

		public function pricesettingsAction()
		{
			//setting up the required values
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;


			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
			}
			//setting up the default values
			$price_list = array("1" => "200.00", "2" => "800.00", "3" => "3250.00", "4" => "3250.00");
			$this->view->verordnet_prices = $price_list;

			$verordnets = Pms_CommonData::getSapvCheckBox();
			$this->view->verordnets = $verordnets;

			if($this->getRequest()->isPost())
			{
				$has_edit_permissions = Links::checkLinkActionsPermission();
				if(!$has_edit_permissions) // if canedit = 0 - don't allow any additions or changes
				{
					$this->_redirect(APP_BASE . "error/previlege");
					exit;
				} 
				$invoicesForm = new Application_Form_Invoices();
				$invoicePrices = $invoicesForm->insertSapvPrices($_POST);
			}

			//check if the client has prices set
			$pr = new ClientSapvPrices();
			$prices = $pr->getClientPrices($clientid);

			if(!$prices)
			{
				$this->view->isdefault = '1';
				$this->view->prices_set = $price_list;
			}
			else
			{
				$this->view->isdefault = '0';
				$this->view->prices_set = $prices;
			}
		}

		public function abimportajaxAction()
		{
			$this->_helper->viewRenderer->setNoRender();

			if($this->getRequest()->isPost() && !empty($_POST['type']) && !empty($_POST['eid']))
			{
				$type = $_POST['type'];
				$entity_id = $_POST['eid'];

				switch($type)
				{

					case'H': //hausarzt
						$family_doctor = FamilyDoctor::getFamilyDoc($entity_id);

						$receipient_data = array();


						if(!empty($family_doctor[0]['practice']))
						{
							$receipient_data['line1'] = trim($family_doctor[0]['practice']);
						}

						if(!empty($family_doctor[0]['first_name']) || !empty($family_doctor[0]['last_name']))
						{

							if(!empty($family_doctor[0]['title']))
							{
								$receipient_data_name .= $family_doctor[0]['title'] . ' ';
							}

							if(!empty($family_doctor[0]['last_name']))
							{
								$receipient_data_name .= $family_doctor[0]['last_name'] . ' ';
							}

							if(!empty($family_doctor[0]['first_name']))
							{
								$receipient_data_name .= $family_doctor[0]['first_name'] . ' ';
							}

							$receipient_data['line2'] = $receipient_data_name;
						}

						if(!empty($family_doctor[0]['street1']))
						{
							$receipient_data['line3'] = $family_doctor[0]['street1'] . $family_doctor[0]['street2'];
						}


						$receipient_data['line4'] = $family_doctor[0]['zip'] . ' ' . $family_doctor[0]['city'];

						$receipient_data['fax'] = $family_doctor[0]['fax'];

						break;

					case'F': ////facharzt
						$specialist = Specialists::get_specialist($entity_id);

						$receipient_data = array();
						if(!empty($specialist[0]['practice']))
						{
							$receipient_data['line1'] = trim($specialist[0]['practice']);
						}

						if(!empty($specialist[0]['first_name']) || !empty($specialist[0]['last_name']))
						{

							if(!empty($specialist[0]['title']))
							{
								$receipient_data_name .= $specialist[0]['title'] . ' ';
							}

							if(!empty($specialist[0]['last_name']))
							{
								$receipient_data_name .= $specialist[0]['last_name'] . ' ';
							}

							if(!empty($specialist[0]['first_name']))
							{
								$receipient_data_name .= $specialist[0]['first_name'] . ' ';
							}

							$receipient_data['line2'] = $receipient_data_name;
						}


						$receipient_data['line3'] = $specialist[0]['street1'] . ' ' . $specialist[0]['street2'];

						$receipient_data['line4'] = $specialist[0]['zip'] . ' ' . $specialist[0]['city'];
						$receipient_data['fax'] = $specialist[0]['fax'];
						break;
						
					case'P': //pflegedienste
						$pflege = Pflegedienstes::getPflegedienste($entity_id);

						$receipient_data = array();
						if(!empty($pflege[0]['nursing']))
						{
							$receipient_data['line1'] = trim($pflege[0]['nursing']);
						}

						if(!empty($pflege[0]['first_name']) || !empty($pflege[0]['last_name']))
						{

							if(!empty($pflege[0]['title']))
							{
								$receipient_data_name .= $pflege[0]['title'] . ' ';
							}

							if(!empty($pflege[0]['last_name']))
							{
								$receipient_data_name .= $pflege[0]['last_name'] . ' ';
							}

							if(!empty($pflege[0]['first_name']))
							{
								$receipient_data_name .= $pflege[0]['first_name'] . ' ';
							}

							$receipient_data['line2'] = $receipient_data_name;
						}


						$receipient_data['line3'] = $pflege[0]['street1'] . ' ' . $pflege[0]['street2'];

						$receipient_data['line4'] = $pflege[0]['zip'] . ' ' . $pflege[0]['city'];
						$receipient_data['fax'] = $pflege[0]['fax'];
						break;

					case'A': //aphoteke
						//$pharmacy = Pharmacy::getPharmacy($entity_id);
						$pharmacy = Pharmacy::findPharmacyById($entity_id);


						$receipient_data = array();
						if(!empty($pharmacy[0]['pharmacy']))
						{
							$receipient_data['line1'] = trim($pharmacy[0]['pharmacy']);
						}

						if(!empty($pharmacy[0]['first_name']) || !empty($pharmacy[0]['last_name']))
						{
							$receipient_data_name = '';

							if(!empty($pharmacy[0]['last_name']))
							{
								$receipient_data_name .= $pharmacy[0]['last_name'] . ' ';
							}

							if(!empty($pharmacy[0]['first_name']))
							{
								$receipient_data_name .= $pharmacy[0]['first_name'] . ' ';
							}

							$receipient_data['line2'] = $receipient_data_name;
						}

						if(!empty($pharmacy[0]['street1']))
						{
							$receipient_data_addr = $pharmacy[0]['street1'];
						}
						if(!empty($pharmacy[0]['street2']))
						{
							$receipient_data_addr .= $pharmacy[0]['street2'];
						}

						$receipient_data['line3'] = $receipient_data_addr;
						$receipient_data['line4'] = $pharmacy[0]['zip'] . ' ' . $pharmacy[0]['city'];
						$receipient_data['fax'] = $pharmacy[0]['fax'];
						break;

					case'L': //Locations(aufenthalsorte)
						$location = Locations::getLocationbyId($entity_id);
						$location_type = Locations::getLocationTypes();



						$receipient_data = array();

						if(!empty($location[0]['location']))
						{
							$receipient_data['line1'] = $location[0]['location'];
						}

						if(!empty($location[0]['street']))
						{
							$receipient_data['line3'] = $location[0]['street'];
						}

						$receipient_data['line4'] = $location[0]['zip'] . ' ' . $location[0]['city'];
						$receipient_data['fax'] = $location[0]['fax'];
						break;

					case'S': //Sonstiges

						$uloc = UsersLocations::getUserLocation($entity_id);


						$receipient_data = array();
						if(!empty($uloc[0]['company_name']))
						{
							$receipient_data['line1'] = trim($uloc[0]['company_name']);
						}

						if(!empty($uloc[0]['first_name']) || !empty($uloc[0]['last_name']))
						{
							$receipient_data_name = '';
							if(!empty($uloc[0]['last_name']))
							{
								$receipient_data_name .= $uloc[0]['last_name'] . ' ';
							}

							if(!empty($uloc[0]['first_name']))
							{
								$receipient_data_name .= $uloc[0]['first_name'] . ' ';
							}

							$receipient_data['line2'] = $receipient_data_name;
						}

						if(!empty($uloc[0]['street']))
						{
							$receipient_data['line3'] = $uloc[0]['street'];
						}

						$receipient_data['line4'] = $uloc[0]['zip'] . ' ' . $uloc[0]['city'];
						$receipient_data['fax'] = $uloc[0]['fax'];
						break;

					case'I': //Health Insurance
						$healthins = HealthInsurance::getCompanyinfofromId($entity_id);

						$receipient_data = array();

						if(!empty($healthins[0]['name']) || !empty($healthins[0]['name2']))
						{
							$receipient_data_name = '';
							if(!empty($healthins[0]['name']))
							{
								$receipient_data['line1'] = $healthins[0]['name'];
							}
						}
						if(!empty($healthins[0]['insurance_provider']))
						{
							$receipient_data['line2'] .= $healthins[0]['insurance_provider'] . "\n";
						}
						
						if(!empty($healthins[0]['street1']))
						{
							$receipient_data['line3'] .= $healthins[0]['street1'];
						}



						$receipient_data['line4'] = $healthins['0']['zip'] . ' ' . $healthins[0]['city'];
						$receipient_data['fax'] = $healthins[0]['phonefax'];
						break;

					case'PI': //Patient Health Insurance
						$healthins = PatientHealthInsurance::getPatientHISdata($entity_id);
						$receipient_data = array();

						if(!empty($healthins[0]['company_name']))
						{
							$receipient_data['line1'] = $healthins[0]['company_name'];
						}

						if(!empty($healthins[0]['ins_insurance_provider']))
						{
							$receipient_data['line2'] = $healthins[0]['ins_insurance_provider'];
						}
						if(!empty($healthins[0]['ins_street']))
						{
							$receipient_data['line3'] = $healthins[0]['ins_street'];
						}
						$receipient_data_addr = '';
						if(!empty($healthins[0]['ins_zip']))
						{
							$receipient_data_addr .= $healthins[0]['ins_zip'] . " ";
						}
						if(!empty($healthins[0]['ins_city']))
						{
							$receipient_data_addr .= $healthins[0]['ins_city'];
						}
						$receipient_data['line4'] = $receipient_data_addr;

						break;

					case 'C': //contact person
						$cperson = ContactPersonMaster::getPatientContactById($entity_id, true);
						$receipient_data = array();

						if(!empty($cperson[0]['cnt_first_name']) || !empty($cperson[0]['cnt_first_name']))
						{
							$receipient_data_name = '';
							if(!empty($cperson[0]['cnt_title']))
							{
								$receipient_data_name .= $cperson[0]['cnt_title'] . ' ';
							}

							if(!empty($cperson[0]['cnt_last_name']))
							{
								$receipient_data_name .= $cperson[0]['cnt_last_name'] . ' ';
							}

							if(!empty($cperson[0]['cnt_first_name']))
							{
								$receipient_data_name .= $cperson[0]['cnt_first_name'] . ' ';
							}

							$receipient_data['line1'] = $receipient_data_name;
						}


						$receipient_data_addr = '';
						if(!empty($cperson[0]['cnt_street1']))
						{
							$receipient_data_addr .= $cperson[0]['cnt_street1'] . "\n";
						}
						if(!empty($cperson[0]['cnt_street2']))
						{
							$receipient_data_addr .= $cperson[0]['cnt_street2'] . "\n";
						}

						$receipient_data['line3'] = $receipient_data_addr;
						$receipient_data['line4'] = $cperson[0]['cnt_zip'] . ' ' . $cperson[0]['cnt_city'];
						break;

					case 'SH':
						$supplies = Supplies::getSupplies($entity_id);

						$fax_recipient = $supplies[0]['fax'];
						//supplier name line 1
						$receipient_data['line1'] = $supplies[0]['supplier'] . "\n";

						//supplier first_name last_name line 2
						if(!empty($supplies[0]['first_name']) || !empty($supplies[0]['last_name']))
						{
							$receipient_data_name = '';
							if(!empty($supplies[0]['last_name']))
							{
								$receipient_data_name .= $supplies[0]['last_name'] . ' ';
							}

							if(!empty($supplies[0]['first_name']))
							{
								$receipient_data_name .= $supplies[0]['first_name'] . ' ';
							}

							$receipient_data['line2'] = $receipient_data_name;
						}
						//supplier street line 3
						$receipient_data_street = '';
						if(!empty($supplies[0]['street1']))
						{
							$receipient_data_street .= $supplies[0]['street1'] . "\n";
						}
						else if(!empty($healthins[0]['street2']))
						{
							$receipient_data_street .= $supplies[0]['street2'] . "\n";
						}
						$receipient_data['line3'] = $receipient_data_street;

						//supplier zip-city line 4
						$receipient_data['line4'] = $supplies[0]['zip'] . ' ' . $supplies[0]['city'] . "\n";

						break;
						

					case 'SR':
						$supplier = Suppliers::getSuppliers($entity_id);

						$fax_recipient = $supplier[0]['fax'];
						//supplier name line 1
						$receipient_data['line1'] = $supplier[0]['supplier'] . "\n";

						//supplier first_name last_name line 2
						if(!empty($supplier[0]['first_name']) || !empty($supplier[0]['last_name']))
						{
							$receipient_data_name = '';
							if(!empty($supplier[0]['last_name']))
							{
								$receipient_data_name .= $supplier[0]['last_name'] . ' ';
							}

							if(!empty($supplier[0]['first_name']))
							{
								$receipient_data_name .= $supplier[0]['first_name'] . ' ';
							}

							$receipient_data['line2'] = $receipient_data_name;
						}
						//supplier street line 3
						$receipient_data_street = '';
						if(!empty($supplier[0]['street1']))
						{
							$receipient_data_street .= $supplier[0]['street1'] . "\n";
						}
						else if(!empty($healthins[0]['street2']))
						{
							$receipient_data_street .= $supplier[0]['street2'] . "\n";
						}
						$receipient_data['line3'] = $receipient_data_street;

						//supplier zip-city line 4
						$receipient_data['line4'] = $supplier[0]['zip'] . ' ' . $supplier[0]['city'] . "\n";

						break;
						

					case 'PH':
						$physiotherapist = Physiotherapists::get_physiotherapist($entity_id);

						$fax_recipient = $physiotherapist[0]['fax'];
						//$physiotherapist name line 1
						$receipient_data['line1'] = $physiotherapist[0]['physiotherapist'] . "\n";

						//$physiotherapist first_name last_name line 2
						if(!empty($physiotherapist[0]['first_name']) || !empty($physiotherapist[0]['last_name']))
						{
							$receipient_data_name = '';
							if(!empty($physiotherapist[0]['last_name']))
							{
								$receipient_data_name .= $physiotherapist[0]['last_name'] . ' ';
							}

							if(!empty($physiotherapist[0]['first_name']))
							{
								$receipient_data_name .= $physiotherapist[0]['first_name'] . ' ';
							}

							$receipient_data['line2'] = $receipient_data_name;
						}
						//$physiotherapist street line 3
						$receipient_data_street = '';
						if(!empty($physiotherapist[0]['street1']))
						{
							$receipient_data_street .= $physiotherapist[0]['street1'] . "\n";
						}
						else if(!empty($healthins[0]['street2']))
						{
							$receipient_data_street .= $physiotherapist[0]['street2'] . "\n";
						}
						$receipient_data['line3'] = $receipient_data_street;

						//$physiotherapist zip-city line 4
						$receipient_data['line4'] = $physiotherapist[0]['zip'] . ' ' . $physiotherapist[0]['city'] . "\n";

						break;
						
						
					case 'HC':
						$homecare = Homecare::get_homecare($entity_id);

						$fax_recipient = $homecare[0]['fax'];
						//$homecare name line 1
						$receipient_data['line1'] = $homecare[0]['homecare'] . "\n";

						//$homecare first_name last_name line 2
						if(!empty($homecare[0]['first_name']) || !empty($homecare[0]['last_name']))
						{
							$receipient_data_name = '';
							if(!empty($homecare[0]['last_name']))
							{
								$receipient_data_name .= $homecare[0]['last_name'] . ' ';
							}

							if(!empty($homecare[0]['first_name']))
							{
								$receipient_data_name .= $homecare[0]['first_name'] . ' ';
							}

							$receipient_data['line2'] = $receipient_data_name;
						}
						//$homecare street line 3
						$receipient_data_street = '';
						if(!empty($homecare[0]['street1']))
						{
							$receipient_data_street .= $homecare[0]['street1'] . "\n";
						}
						else if(!empty($healthins[0]['street2']))
						{
							$receipient_data_street .= $homecare[0]['street2'] . "\n";
						}
						$receipient_data['line3'] = $receipient_data_street;

						//$homecare zip-city line 4
						$receipient_data['line4'] = $homecare[0]['zip'] . ' ' . $homecare[0]['city'] . "\n";

						break;
						
						
						
						
						
						
						
					default:
						exit;
						break;
				}

				echo json_encode(array('data' => $receipient_data));
			}
			exit;
		}

//	Rehnung I(LB6)
		public function invoicepatientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$hi_invoices = new HiInvoices();


			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}


			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
			//check if a month is selected END


			if($this->getRequest()->isPost() && count($_POST['patient_selected']) > 0)
			{

				if($_REQUEST['old'])
				{
					$this->generate_patients_invoice($_POST['patient_selected'], $months_details[$selected_month]);
				}
				else
				{
					$this->generate_patients_invoicenew($_POST['patient_selected'], $months_details[$selected_month]);
				}
				exit;
			}

			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_rehnung_patients';
			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			
			
			//get all invoices in this period
			$patients_invoiced_inperiod[] = array("99999999");
			$generated_invoice_array = HiInvoices::get_generated_hi_invoices($clientid, $months_details[$selected_month],$exclude_storno = true);

			if($generated_invoice_array )
			{
    			foreach($generated_invoice_array as $key=>$idata){
    			    $patients_invoiced_inperiod[] = $idata['ipid'];
    			}
			}
			
			
			//get active ipids details
			$sql = "a.*,p.*,e.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "a.*,p.*,e.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex ";
			}

			$active_ipids_details = Pms_CommonData::patients_active($sql, $clientid, $months_details, false, "p.admission_date", "ASC"); // ND patient list

			foreach($active_ipids_details as $k_active_patient => $v_active_patient)
			{
				$active_patients[$v_active_patient['ipid']] = $v_active_patient;

				$active_ipids[] = $v_active_patient['ipid'];

				$last_period[$v_active_patient['ipid']] = end($v_active_patient['PatientActive']);

				$active_patients[$v_active_patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['start']));

				if($last_period[$v_active_patient['ipid']]['end'] != "0000-00-00")
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['end']));
				}
				else
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = "-";
				}
				$active_patients[$v_active_patient['ipid']]['id'] = $v_active_patient['PatientMaster']['id'];
				
				if(in_array($v_active_patient['ipid'],$patients_invoiced_inperiod))
				{
				    $active_patients[$v_active_patient['ipid']]['invoiced'] = "1"; 
				} 
				else
				{
				    $active_patients[$v_active_patient['ipid']]['invoiced'] = "0"; 
				}
				
				
			}

			$this->view->active_patients = $active_patients;

			$invoice_number_arr = $hi_invoices->get_next_invoice_number($clientid, true);
			$this->view->highest_invoice_number = $invoice_number_arr['prefix'] . $invoice_number_arr['invoicenumber'];
		}

//	tp-9
		public function sapvinvoicepatientlistAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$bw_invoices = new BwInvoices();
			$sgbv_invoices = new SgbvInvoices();


			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}


			$this->view->selected_month = $selected_month;
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
			$post_month['start'] =  date("d.m.Y",strtotime($months_details[$selected_month]['start'] ));
			$post_month['end'] =  date("d.m.Y",strtotime($months_details[$selected_month]['end'] ));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_rehnung_patients';
			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END

			switch($_REQUEST['sort'])
			{

				case 'epid':
					$order_by = 'e.epid';
					break;


				case 'ln':
					$order_by = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci';
					break;


				case 'fn':
					$order_by = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci';
					break;


				case 'adm':
					$order_by = 'a.start';
					break;


				case 'dis':
					$order_by = 'a.end';
					break;


				default:
					$order_by = 'p.admission_date';
					break;
			}

			if($_REQUEST['ord'])
			{
				$sort = $_REQUEST['ord'];
			}
			else
			{
				$sort = 'DESC';
			}

			//get active ipids details
			$sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex ";
			}

			$active_ipids_details = Pms_CommonData::patients_active($sql, $clientid, $months_details, false, $order_by, $sort); // BW patient list

			foreach($active_ipids_details as $k_active_patient => $v_active_patient)
			{
				$active_patients[$v_active_patient['ipid']] = $v_active_patient;

				$active_ipids[] = $v_active_patient['ipid'];

				$last_period[$v_active_patient['ipid']] = end($v_active_patient['PatientActive']);

				$active_patients[$v_active_patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['start']));

				if($last_period[$v_active_patient['ipid']]['end'] != "0000-00-00")
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['end']));
				}
				else
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = "-";
				}
				$active_patients[$v_active_patient['ipid']]['id'] = $v_active_patient['PatientMaster']['id'];
				$active_patients[$v_active_patient['ipid']]['period_start'] =$post_month['start'];
				$active_patients[$v_active_patient['ipid']]['period_end'] =$post_month['end'];
			}

			$this->view->active_patients = $active_patients;

			if(empty($active_ipids))
			{
				$active_ipids[] = '99999999999999999';
			}

			/* -------------------------------------  Get SAPV for all ipids in selected month -------------------------------------------- */

			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $active_ipids)
				->andWhere(' DATE(verordnungam) BETWEEN DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['start'])) . '") AND DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['end'])) . '")  OR  DATE(verordnungbis) BETWEEN DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['start'])) . '") AND DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['end'])) . '") OR (  DATE(verordnungam) <= DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['start'])) . '")  AND DATE(verordnungbis) >= DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['end'])) . '")) ')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();


			foreach($droparray as $k_sapv => $v_sapv)
			{
				$patients_with_sapv[$v_sapv['ipid']][] = $v_sapv;
			}

			/* -------------------------------------  Get generated SAPV  invoices for all ipids in selected month -------------------------------------------- */

			$patients_with_sapv_invoices = $this->check_bw_sapv_patients_invoice($selected_month, $active_ipids, $clientid);


			/* -------------------------------------  Get SGBV for all ipids in selected month -------------------------------------------- */
			$statuses = array('10', '6');

			$dropSGBV = Doctrine_Query::create()
				->select('*')
				->from('SgbvForms')
				->whereIn('ipid', $active_ipids)
				->andWhere(' DATE(valid_from) BETWEEN DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['start'])) . '") AND DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['end'])) . '")  OR  DATE(valid_till) BETWEEN DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['start'])) . '") AND DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['end'])) . '")  OR (  DATE(valid_from) <= DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['start'])) . '")  AND DATE(valid_till) >= DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['end'])) . '")) ')
				->andWhere('valid_from != "0000-00-00 00:00:00"')
				->andWhere('valid_till != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhereNotIn('status', $statuses)
				->orderBy('valid_from ASC');
			$alowed_sgbvs = $dropSGBV->fetchArray();

			foreach($alowed_sgbvs as $k_sgbva => $v_sgbva)
			{
				$patients_with_sgbv[$v_sgbva['ipid']][] = $v_sgbva;
			}

			/* ----------------------------------------  Get generated SGBV  invoices for all ipids in selected month ---------------------------------------------- */
			$patients_with_sgbv_invoices = $this->check_bw_sgbv_patients_invoice($selected_month, $active_ipids, $clientid);

			/* -------------------------------------  Get generated MEDIPUMPS  invoices for all ipids in selected month -------------------------------------------- */
			$patients_with_medipump_invoices = $this->check_bw_medipumps_patients_invoice($selected_month, $active_ipids, $clientid);

			/* -------------------------------------  Get SGB XI for all ipids in selected month -------------------------------------------- */
			$statuses = array('10', '6');

			$dropSGBXI = Doctrine_Query::create()
				->select('*')
				->from('ContactForms')
				->whereIn('ipid', $active_ipids)
				->andWhere(' DATE(billable_date) BETWEEN DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['start'])) . '") AND DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['end'])) . '")  OR  DATE(end_date) BETWEEN DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['start'])) . '") AND DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['end'])) . '")  OR (  DATE(start_date) <= DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['start'])) . '")  AND DATE(end_date) >= DATE("' . date('Y-m-d', strtotime($months_details[$selected_month]['end'])) . '")) ')
				->andWhere('start_date != "0000-00-00 00:00:00"')
				->andWhere('end_date != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('sgbxi_quality="1"')
				->andWhere('parent="0"')
				->orderBy('start_date ASC');
			$alowed_sgbxi = $dropSGBXI->fetchArray();

			foreach($alowed_sgbxi as $k_sgbxi => $v_sgbxi)
			{
				$patients_with_sgbxi[$v_sgbxi['ipid']][] = $v_sgbxi;
			}

			$this->view->visits_per_patient = $patients_with_sgbxi;

			//get form types
			$form_types = new FormTypes();
			$formtypes = $form_types->get_form_types($clientid);

			foreach($formtypes as $k_type => $v_type)
			{
				$form_types_arr[$v_type['id']] = $v_type['name'];
			}

			$this->view->contact_form_types = $form_types_arr;


			/* -------------------------------------  Get generated SGBV XI invoices for all ipids in selected month ----------------------------------------------- */
			$patients_with_sgbxi_invoices = $this->check_bw_sgbxi_patients_invoice($selected_month, $active_ipids, $clientid);
			$invoiced_contact_forms = $this->get_sgbxi_patients_invoiced_cf($selected_month, $active_ipids, $clientid);
			$this->view->invoiced_contact_forms = $invoiced_contact_forms;


			foreach($active_patients as $pat_ipid => $pat_values)
			{
				$invoice_status[$pat_ipid]['sapv_available'] = $patients_with_sapv[$pat_ipid];
				$invoice_status[$pat_ipid]['sgbv_available'] = $patients_with_sgbv[$pat_ipid];
				$invoice_status[$pat_ipid]['sgbxi_available'] = $patients_with_sgbxi[$pat_ipid];

				if(in_array($pat_ipid, $patients_with_sapv_invoices))
				{
					$invoice_status[$pat_ipid]['sapv_invoices'] = 1; // has sapv invoices in current period
				}
				else
				{
					$invoice_status[$pat_ipid]['sapv_invoices'] = 0; // Patient has NO sapv invoice in selected period
				}

				if(in_array($pat_ipid, $patients_with_sgbv_invoices))
				{
					$invoice_status[$pat_ipid]['sgbv_invoices'] = 1; // has SGBV invoices in current period
				}
				else
				{
					$invoice_status[$pat_ipid]['sgbv_invoices'] = 0; // Patient has NO SGBV invoice in selected period
				}

				if(in_array($pat_ipid, $patients_with_medipump_invoices))
				{
					$invoice_status[$pat_ipid]['medipump_invoices'] = 1; // has medipump invoices in current period
				}
				else
				{
					$invoice_status[$pat_ipid]['medipump_invoices'] = 0; // Patient has NO medipump invoice in selected period
				}

				if(in_array($pat_ipid, $patients_with_sgbxi_invoices))
				{
					$invoice_status[$pat_ipid]['sgbxi_invoices'] = 1; // has SGB XI invoices in current period
				}
				else
				{
					$invoice_status[$pat_ipid]['sgbxi_invoices'] = 0; // Patient has NO SGB XI invoice in selected period
				}
			}

			if($_REQUEST['dbgqq'])
			{
				print_r("patients_with_sgbxi \n");
				print_r($patients_with_sgbxi);
				print_r("invoiced_contact_forms");
				print_r($invoiced_contact_forms);
				print_r("patients_with_sgbxi_invoices");
				print_r($patients_with_sgbxi_invoices);
				print_r($invoice_status);
				exit;
			}

			$this->view->invoice_status = $invoice_status;


			//new way for invoice numbers
			//bw sapv invoices
			$bw_inv = new BwInvoices();
			$bw_inv_number = $bw_inv->get_next_invoice_number($clientid, true);
			$this->view->highest_invoice_number_new = $bw_inv_number['prefix'] . $bw_inv_number['invoicenumber'];

			//bw sgbv invoices
			$sgbv_inv = new SgbvInvoices();
			$sgbv_inv_number = $sgbv_inv->get_next_invoice_number($clientid, true);
			$this->view->sgbv_highest_invoice_number_new = $sgbv_inv_number['prefix'] . $sgbv_inv_number['invoicenumber'];

			//bw sgbxi invoices
			$sgbxi_inv = new SgbxiInvoices();
			$sgbxi_inv_number = $sgbxi_inv->get_next_invoice_number($clientid, true);
			$this->view->sgbxi_highest_invoice_number_new = $sgbxi_inv_number['prefix'] . $sgbxi_inv_number['invoicenumber'];

			//bw medipumps invoices
			$medipumps_inv = new MedipumpsInvoices();
			$medipumps_inv_number = $medipumps_inv->get_next_invoice_number($clientid, true);
			$this->view->mp_highest_invoice_number_new = $medipumps_inv_number['prefix'] . $medipumps_inv_number['invoicenumber'];
		}

		public function healthinsuranceinvoicesAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$hi_invoices = new HiInvoices();
			$hi_invoices_items = new HiInvoiceItems();
			$hi_invoices_form = new Application_Form_HiInvoices();
			$phealthinsurance = new PatientHealthInsurance();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);

			$client_det = $client_details->getClientDataByid($invoice_data['client']);			
			
			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}

			
			
			//ISPC-2609+ISPC-2000 Ancuta 28.09.2020
			$userid = $logininfo->userid;
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "nie_patient_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			
			if(count($invoice_user_printjobs) > 1 ){
			    echo $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			if($this->getRequest()->isPost())
			{
				if($_POST['activate'] == "1")
				{
					$activate_invoice = $hi_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid); //  set as unpaid
				}
				elseif($_POST['deletemore'] == "1")
				{
					$activate_invoice = $hi_invoices_form->ToggleStatusInvoices($_POST['document'], "4"); //  set as deleted "4" and isdelete=1
				}
				elseif($_POST['warningmore'] == "1")
				{
					$invoiceids_to_warn = implode(',', $_POST['document']);
				
					$this->forward('generatereminderinvoice', 'Invoicenew', null, array());
				
					return;
				}
				elseif($_POST['batch_print_more'])
				{
					$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'nie_patient_invoice');
					if($template_data)
					{
						$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
						$params['batch_print'] = '1'; //enables batch print procedure
						$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
						$params['get_pdf'] = '0'; //stops downloading single pdf
						
						
						//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
   						$this->healthins_print_invoice($params);
   						/* 
						if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
    						$this->healthins_print_invoice($params);
						    
						} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
						    
						    $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
						    
						    $print_job_data = array();
						    $print_job_data['clientid'] = $clientid;
						    $print_job_data['user'] = $userid;
						    $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
						    $print_job_data['output_type'] = 'pdf';
						    $print_job_data['status'] = 'active';
						    $print_job_data['invoice_type'] = 'nie_patient_invoice';
						    $print_job_data['print_params'] = serialize($params);
						    $print_job_data['print_function'] = 'healthins_print_invoice';
						    $print_job_data['print_controller'] = $this->getRequest()->getControllerName();
						    
						    foreach($_POST['document'] as $k=>$inv_id){
						        $print_job_data['PrintJobsItems'][] = array(
						            'clientid'=>$print_job_data['clientid'],
						            'user'=>$print_job_data['user'],
						            'invoice_id'=>$inv_id,
						            'invoice_type'=>$print_job_data['invoice_type'],
						            'status'=>"new"
						        );
						    }
						    
						    $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
						    $print_id = $PrintJobsBulk_obj->id;
						    
						    if($print_id){
						        $this->__StartPrintJobs();
						    }
						} */
						
					}
					else
					{
						$invoices_ids = $_POST['document'];
						//letter footer text
						$letter_boxes_details = $boxes->client_letter_boxes($clientid);
				
						$invoices_data = $hi_invoices->get_invoices($invoices_ids);
						
						$ipids = array_unique($invoices_data['invoices_ipdis']);
					
						//patient HEALTH INSURANCE START
						$healthinsu_multi_array = $phealthinsurance->get_multiple_patient_healthinsurance($ipids, true);
					
						$sql = 'e.epid,  e.ipid, p.ipid, p.birthd, p.admission_date, ';
						$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
						$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
						$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
						$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
						$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
						$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
						
						$patient = Doctrine_Query::create()
						->select($sql)
						->from('PatientMaster p')
						->whereIn("p.ipid", $ipids)
						->leftJoin("p.EpidIpidMapping e")
						->andWhere('e.clientid = ?', $clientid);
						$patients_res = $patient->fetchArray();
						//print_r($invoices_data); exit;
						$patient_details = array();
						foreach($patients_res as $kpat=>$vpat)
						{
							$patient_details[$vpat['ipid']] = $vpat;
							$patient_details[$vpat['ipid']]['epid'] = $vpat['EpidIpidMapping']['epid'];
						}
						//print_R($patient_details); exit;
						
						//$invoice_data = $hi_invoices->getHiInvoice($invoice_id);
						
						//$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
						
						//$patient_health = $phealthinsurance->getPatientHealthInsurance($invoice_data['ipid']);
						foreach($invoices_data['invoices_data'] as $invoice_data)
						{
							//print_r($invoice_data); exit;
							$invoice_data['health_insurance']['insurance_no'] = $healthinsu_multi_array[$invoice_data['ipid']]['insurance_no'];
							
							$invoice_data['client_details'] = $client_det[0];
							
							$invoice_data['patient_details'] = $patient_details[$invoice_data['ipid']];
							$replacement_arr['%first_name'] = $invoice_data['patient_details']['first_name'];
							$replacement_arr['%last_name'] = $invoice_data['patient_details']['last_name'];
							$replacement_arr['%admission_date'] = date('d.m.Y', strtotime($invoice_data['patient_details']['admission_date']));
							$replacement_arr['%client_name'] = $invoice_data['client_name'];
							$replacement_arr['%invoice_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
							$replacement_arr['%invoice_end'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
							
							//no money no honey => default gofer
							if(strlen($invoice_data['header']) == 0)
							{
								$header_default = '
							<b><u>Liquidation</u></b>
							<br />
							<br />
							O.g. <b>%first_name %last_name</b> erhält seit dem <b>%admission_date</b> SAPV-Leistungen.
							<br />
							<p>
								Wir erlauben uns, gemäß § 132 d Abs. 1 SGB V über die spezialisierte ambulante Palliativversorgung
								(SAPV) nach § 37 b SGB V und dem entsprechenden Vertrag zwischen dem
								Landeskrankenkassenverband und der %client_name für die Zeit vom %invoice_start
								bis zum  %invoice_end folgende Kosten in Rechnung zu stellen:
							</p>';
							
							
								$invoice_data['header'] = Pms_CommonData::str_replace_assoc($replacement_arr, $header_default);
							}
							
							if(strlen($invoice_data['footer']) == 0)
							{
								/* $footer_default_old = '
								 Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
								 <br />
								 <br />
								 Mit freundlichen Grüßen';
										
								 $footer_default = '
								 Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>2 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
								 <br />
								 <br />
								 Mit freundlichen Grüßen';
										
								 if($clientid == "78"){ //NOT THE CORRECt WAY::  ISPC:2035:: Please change the invoce Text for NIE_Diepholz
								 $invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);
								 } else {
								 $invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default_old);
								 } */
									
									
									
								//ISPC:2035:: Please change the invoce Text for NIE_Diepholz
								if(!empty($letter_boxes_details)){
								$footer_default = $letter_boxes_details[0]['nd_invoice_footer'];
								} else {
								$footer_default = 'Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
								<br />
								<br />
								Mit freundlichen Grüßen';
								}
								$invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);
								
								}
								
								$title = 'Rechnung';
								$template = 'health_insurance_invoice.html';
							
								$invoice_type_special = "ND_patient";
							
							
								// ISPC-2472 @Ancuta 07.11.2019
								//$this->generateformPdf(3, $invoice_data, $title . "-" . $invoice_data['prefix'] . $invoice_data['invoice_number'] . "", $template, $invoice_type_special);
							
								$pdf_file_name =  $title . "-" . $invoice_data['prefix'] . $invoice_data['invoice_number'] . "";
						
								$invoice_number_full="";
								$invoice_number_full .=  (strlen($invoice_data['prefix']) > 0) ? $invoice_data['prefix'] : '';
								$invoice_number_full .= $invoice_data['invoice_number'];
							
								if(strlen($invoice_number_full) > 0 ){
								//$pdf_file_name = $invoice_number_full;
								$inv_names[] = $invoice_number_full;
								}
								//print_r($invoice_data); exit;
								//$this->generateformPdf(3, $invoice_data, $pdf_file_name, $template, $invoice_type_special);
								//save pdf as file
								$files[] = $this->generate_joined_files_pdf('4', $invoice_data, $pdf_file_name, $template, $invoice_type_special);
								
								// --
						
						}
						
						$source = 'HiInvoice';
						$this->join_pdfs_new($files, $inv_names ,$source);
						//$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices');
						exit;
					}
				}
				else
				{
					$new_payment = $hi_invoices_form->submit_payment($_POST);
				}

				$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices'); //to avoid resubmission
				exit;
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $hi_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices?flg=delerr');
				}
			}


			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}
				if($invoiceid > '0')
				{
					$hi_invoices = new HiInvoices();
					$clone_record = $hi_invoices->create_storno_invoice($invoiceid);
					$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices?flg=suc');
					exit;
				}
			}




			if($_REQUEST['invoiceid'] && $_REQUEST['pdfquick'] == '1')
			{
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'nie_patient_invoice');
				if($template_data)
				{
					$params['invoices'] = $_REQUEST['invoiceid'];
					if($_REQUEST['stornopdf'] == 1 && $_REQUEST['storno'] > '0')
					{
						$params['invoices'] = $_REQUEST['storno'];
						$params['storno'] = '1';
					}
					
					if(strlen($_REQUEST['completed_date']) != '0')
					{
						$params['completed_date'] = date('d.m.Y', $_REQUEST['completed_date']);
					}
					
					$this->healthins_print_invoice($params);
				}
				else 
				{
					$invoice_id = $_REQUEST['invoiceid'];
					$invoice_data = $hi_invoices->getHiInvoice($invoice_id);
	
					$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
	
					$patient_health = $phealthinsurance->getPatientHealthInsurance($invoice_data['ipid']);
					$invoice_data['health_insurance']['insurance_no'] = $patient_health[0]['insurance_no'];
	
	
					$client_det = $client_details->getClientDataByid($invoice_data['client']);
					$invoice_data['patient_details'] = $patient_details;
	
					$invoice_data['client_details'] = $client_det[0];
	
					$replacement_arr['%first_name'] = $patient_details['first_name'];
					$replacement_arr['%last_name'] = $patient_details['last_name'];
					$replacement_arr['%admission_date'] = date('d.m.Y', strtotime($patient_details['admission_date']));
					$replacement_arr['%client_name'] = $invoice_data['client_name'];
					$replacement_arr['%invoice_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
					$replacement_arr['%invoice_end'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
	
					//no money no honey => default gofer
					if(strlen($invoice_data['header']) == 0)
					{
						$header_default = '
						<b><u>Liquidation</u></b>
						<br />
						<br />
						O.g. <b>%first_name %last_name</b> erhält seit dem <b>%admission_date</b> SAPV-Leistungen.
						<br />
						<p>
							Wir erlauben uns, gemäß § 132 d Abs. 1 SGB V über die spezialisierte ambulante Palliativversorgung
							(SAPV) nach § 37 b SGB V und dem entsprechenden Vertrag zwischen dem
							Landeskrankenkassenverband und der %client_name für die Zeit vom %invoice_start
							bis zum  %invoice_end folgende Kosten in Rechnung zu stellen:
						</p>';
	
	
						$invoice_data['header'] = Pms_CommonData::str_replace_assoc($replacement_arr, $header_default);
					}

					if(strlen($invoice_data['footer']) == 0)
					{
						/* $footer_default_old = '
						Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
						<br />
						<br />
						Mit freundlichen Grüßen';
						
						$footer_default = '
						Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>2 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
						<br />
						<br />
						Mit freundlichen Grüßen';
						
						if($clientid == "78"){ //NOT THE CORRECt WAY::  ISPC:2035:: Please change the invoce Text for NIE_Diepholz
							$invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);
						} else {
							$invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default_old);
						} */
						
						
						
						//ISPC:2035:: Please change the invoce Text for NIE_Diepholz
						if(!empty($letter_boxes_details)){
							$footer_default = $letter_boxes_details[0]['nd_invoice_footer'];
						} else {
							$footer_default = 'Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
									<br />
									<br />
									Mit freundlichen Grüßen';
						}
						$invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);
						
						
					}
	
					if(strlen($_REQUEST['completed_date']) != '0')
					{
						$invoice_data['completed_date'] = date('d.m.Y', $_REQUEST['completed_date']);
					}
					else
					{
						if($invoice_data['completed_date'] == '0000-00-00 00:00:00')
						{
							$invoice_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
						}
					}
					
					//ISPC-2747 Lore 27.11.2020
					if(strpos($invoice_data['show_boxes'], 'show_box_active') === false ){
					    $invoice_data['show_box_active'] = '0';
					}else {
					    $invoice_data['show_box_active'] = '1';
					}
					if(strpos($invoice_data['show_boxes'], 'show_box_patient') === false ){
					    $invoice_data['show_box_patient'] = '0';
					}else {
					    $invoice_data['show_box_patient'] = '1';
					}
					if(strpos($invoice_data['show_boxes'], 'show_box_sapv') === false ){
					    $invoice_data['show_box_sapv'] = '0';
					}else {
					    $invoice_data['show_box_sapv'] = '1';
					}
					
					
					if($_REQUEST['stornopdf'] == 1 && $_REQUEST['storno'] > '0')
					{
					    $storno_data = $hi_invoices->getHiInvoice($_REQUEST['storno']);
					    //ISPC-2532 Lore 09.11.2020
					    $invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];
					    $invoice_data['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
					    
					    $invoice_data['prefix'] = $storno_data['prefix'];
					    $invoice_data['invoice_number'] = $storno_data['invoice_number'];
					    //.
					    
						$title = 'STORNO';
						$template = 'storno_health_insurance_invoice.html';
					}
					else
					{
						$title = 'Rechnung';
						$template = 'health_insurance_invoice.html';
					}
	
					$invoice_type_special = "ND_patient"; 
					
	
					// ISPC-2472 @Ancuta 07.11.2019
					//$this->generateformPdf(3, $invoice_data, $title . "-" . $invoice_data['prefix'] . $invoice_data['invoice_number'] . "", $template, $invoice_type_special);
					
					$pdf_file_name =  $title . "-" . $invoice_data['prefix'] . $invoice_data['invoice_number'] . "";
					
					$invoice_number_full="";
					$invoice_number_full .=  (strlen($invoice_data['prefix']) > 0) ? $invoice_data['prefix'] : '';
					$invoice_number_full .= $invoice_data['invoice_number'];
					
					if(strlen($invoice_number_full) > 0 ){
					    $pdf_file_name = $invoice_number_full;
					}
					$this->generateformPdf(3, $invoice_data, $pdf_file_name, $template, $invoice_type_special);
					// --
					
	
					$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices');
					exit;
				}
			}
			else if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $hi_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices?flg=delerr');
				}
			}
			else if($_REQUEST['mode'] == 'uis' && $_REQUEST['invoiceid'])
			{
				if($_REQUEST['old'] == "1")
				{
					$generate_users_invoices = $this->generate_users_invoices_old($_REQUEST['invoiceid']);
				}
				else
				{
					$generate_users_invoices = $this->generate_users_invoices($_REQUEST['invoiceid']);
				}
			}



			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
		}

		public function edithiinvoiceAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$hi_invoices = new HiInvoices();
			$hi_invoices_items = new HiInvoiceItems();
			$hi_invoices_form = new Application_Form_HiInvoices();
			$phealthinsurance = new PatientHealthInsurance();
			$this->view->hide_patient_tab = '1';
			
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
				

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $hi_invoices->getHiInvoice($invoice_id);
			}

			if(in_array($invoice_data['id'], HiInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $hi_invoices->get_next_invoice_number($clientid);
					$_POST['invoice']['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice']['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}

				//save here
				$edit_invoice = $hi_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);


				if(empty($_REQUEST['pdf']))
				{
					if($edit_invoice)
					{
					    //ISPC-2312 Ancuta 06.12.2020
					    if($_REQUEST['redirect2new'] == '1'){
    						$this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=nie_patient_invoice');
    						exit();
					    }
					    //-- 
					    
						if(!empty($_REQUEST['users_invoice']))
						{
							$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices?mode=uis&invoiceid=' . $_REQUEST['invoiceid']);
						}
						else
						{
							$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices?flg=edtsuc');
						}
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices?flg=edterr');
					}
				}
				else
				{
					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}

					if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
					}
					else if(empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
					}
					
					$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices?invoiceid=' . $_REQUEST['invoiceid'] . '&pdfquick=1&completed_date=' . strtotime($pdf_data['completed_date']));
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{

				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices');
				}

				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_det = $client_details->getClientDataByid($invoice_data['client']);

				$patient_health = $phealthinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$health_insurance['insurance_no'] = $patient_health[0]['insurance_no'];

				$replacement_arr['%first_name'] = $patient_details['first_name'];
				$replacement_arr['%last_name'] = $patient_details['last_name'];
				$replacement_arr['%admission_date'] = date('d.m.Y', strtotime($patient_details['admission_date']));
				$replacement_arr['%client_name'] = $invoice_data['client_name'];
				$replacement_arr['%invoice_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
				$replacement_arr['%invoice_end'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));

				//no money no honey => default gofer
				if(strlen($invoice_data['header']) == 0)
				{
					$header_default = '
					<b><u>Liquidation</u></b>
					<br />
					<br />
					O.g. <b>%first_name %last_name</b> erhält seit dem <b>%admission_date</b> SAPV-Leistungen.
					<br />
					<p>
						Wir erlauben uns, gemäß § 132 d Abs. 1 SGB V über die spezialisierte ambulante Palliativversorgung
						(SAPV) nach § 37 b SGB V und dem entsprechenden Vertrag zwischen dem
						Landeskrankenkassenverband und der %client_name für die Zeit vom %invoice_start
						bis zum  %invoice_end folgende Kosten in Rechnung zu stellen:
					</p>';


					$invoice_data['header'] = Pms_CommonData::str_replace_assoc($replacement_arr, $header_default);
				}

				if(strlen($invoice_data['footer']) == 0)
				{
					/* $footer_default_old = '
					Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
					<br />
					<br />
					Mit freundlichen Grüßen';
					
					$footer_default = '
					Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>2 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
					<br />
					<br />	
					Mit freundlichen Grüßen';
					
					if($clientid == "78"){ //NOT THE CORRECt WAY::  ISPC:2035:: Please change the invoce Text for NIE_Diepholz 
						$invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);
					}else{
						$invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default_old);
					} */
					
					

					//ISPC:2035:: Please change the invoce Text for NIE_Diepholz
					if(!empty($letter_boxes_details)){
						$footer_default = $letter_boxes_details[0]['nd_invoice_footer'];
					} else {
						$footer_default = 'Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
								<br />
								<br />
								Mit freundlichen Grüßen';
					}
					$invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);
						
					
				}

				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->health_insurance = $health_insurance;
				$this->view->client_details = $client_det[0];
			}
			else
			{
				//redirect if no invoiceid is preset
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		public function fetchhiinvoicelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$hi_invoices_payments = new HiInvoicePayments();
			$users = new User();
			$warnings = new RemindersInvoice();
			$modules = new Modules();
			
			if($modules->checkModulePrivileges("170", $clientid))
			{
				$this->view->create_bulk_warnings = "1";
			}
			else
			{
				$this->view->create_bulk_warnings = "0";
			}
			
			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('HiInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);


			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{

				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND isdelete=0';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND DATE(NOW()) > DATE(invoice_end)  AND isdelete=0';
					break;

				case 'all':
					$filters['hiinvoice'] = ' ';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';
					break;
			}


			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%" )';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);

			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('HiInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);

			$inv2count = $invoices_counting->fetchArray();


			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}
				$status_count_invoices["all"][] = '1';
			}

			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('HiInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			$counted_del_inv = array();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}

			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('HiInvoices')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";

			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
// 					$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
					// HiInvoices 
// 					$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [OLD]   
// 					$orderby = 'invoice_number DESC'; //     TODO-1762 ISPC: invoice list is not sorted :: @Ancuta 22.08.2018 [OLD]      
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019       
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('HiInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);

			$invoice_payments = $hi_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);
			
			$all_warnings = $warnings->get_reminders($invoice_ids, 'nie_patient_invoice', $clientid);
				
			foreach ($invoicelimit as &$row) {
				if (isset($all_warnings[$row['id']])) {
					$row['InvoiceWarnings'] = $all_warnings[$row['id']];
				}
			}
			//var_dump($invoicelimit); exit;

			$this->view->storned_invoces = HiInvoices::get_storned_invoices($clientid);

			if($logininfo->userid == "338"){
			    //echo "<pre>";
			    //print_R($invoicelimit);
			}

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function hilistpaymentsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$hiinvoices = new HiInvoices();
			$hipayments = new HiInvoicePayments();
			$hiinvoice_form = new Application_Form_HiInvoices();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $hipayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $hipayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $hipayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $hiinvoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $hiinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $hipayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoice/hilistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		private function generate_patients_invoice($patients, $selected_month_details, $rehnung_number)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$anlage6 = new Anlage6();

			$clientdata = Pms_CommonData::getClientData($clientid);
			$c_data['clientid'] = $clientdata[0]['id'];
			$c_data['clientname'] = $clientdata[0]['client_name'];
			$c_data['clientfax'] = $clientdata[0]['fax'];
			$c_data['clientphone'] = $clientdata[0]['phone'];
			$c_data['clientemail'] = $clientdata[0]['emailid'];
			$c_data['clientteamname'] = $clientdata[0]['team_name'];

			$period_days_arr = $patientmaster->getDaysInBetween($selected_month_details['start'], $selected_month_details['end']);
			foreach($period_days_arr as $k_per_day => $v_per_day)
			{
				$period_days[$v_per_day] = array();
			}

			if(count($patients) > 0)
			{
				/* -------------------------------------------- 1. Get patients ipids from ids ------------------------------------------------------- */
				$pat_ipid_ids = Doctrine_Query::create()
					->select('id, ipid')
					->from('PatientMaster')
					->whereIn('id', $patients);
				$patient_ipids_arr = $pat_ipid_ids->fetchArray();
				$patient_ipids[] = '99999999999999';
				foreach($patient_ipids_arr as $k_pat_ipid => $v_pat_ipid)
				{

					$master_patient_data[$v_pat_ipid['ipid']] = $period_days;
					$patient_ipids[] = $v_pat_ipid['ipid'];
				}
				/* ------------------------ 2. Get patients active days in selected period for all ipids + 3. get admissions ----------------------- */
				$patient_treated_periods = $patientmaster->getTreatedDaysRealMultiple($patient_ipids, false);

//			check if patient has anlage6 saved!
				$anlage6_res = $anlage6->get_anlage_shortcut($patient_ipids, $selected_month_details['start'], 'e');
				foreach($anlage6_res as $k_anlage6 => $v_anlage6)
				{
					$anlage6_arr[$v_anlage6['ipid']][date('Y-m-d', strtotime($v_anlage6['date']))] = $v_anlage6;
				}

				foreach($patient_treated_periods as $period_ipid => $period_details)
				{
					$active_days[$period_ipid] = array();
					$active_days_per_admissions[$period_ipid] = array();
					$admission_dates[$period_ipid] = array();
					$discharge_dates_arr[$period_ipid] = array();
					if(!empty($period_details['admissionDates']))
					{
						foreach($period_details['admissionDates'] as $key_adm => $v_adm)
						{
							if(!empty($period_details['dischargeDates'][$key_adm]['date']))
							{
								$start_with_discharge = date('Y-m-d', strtotime($period_details['admissionDates'][$key_adm]['date']));
								$end_with_discharge = date('Y-m-d', strtotime($period_details['dischargeDates'][$key_adm]['date']));
								$discharge_dates_arr[$period_ipid][] = $end_with_discharge;

								$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));

								if(empty($active_days_per_admissions[$period_ipid][$key_adm]))
								{
									$active_days_per_admissions[$period_ipid][$key_adm] = array();
								}
								$active_days_per_admissions[$period_ipid][$key_adm] = array_merge($active_days_per_admissions[$period_ipid][$key_adm], $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));

								//discharge date is active!
								$active_days[$period_ipid][] = date('Y-m-d', strtotime($end));
							}
							else
							{
								$start_without_discharge = date('Y-m-d', strtotime($period_details['admissionDates'][$key_adm]['date']));
								if(!empty($period_details['discharge_date']))
								{
									$end_without_discharge = date('Y-m-d', strtotime($period_details['discharge_date']));
								}
								else
								{
									$end_without_discharge = date('Y-m-d', time());
								}
								$discharge_dates_arr[$period_ipid][] = $end_without_discharge;

								$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));

								if(empty($active_days_per_admissions[$period_ipid][$key_adm]))
								{
									$active_days_per_admissions[$period_ipid][$key_adm] = array();
								}
								$active_days_per_admissions[$period_ipid][$key_adm] = array_merge($active_days_per_admissions[$period_ipid][$key_adm], $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
							}

							if(empty($anlage6_arr[$period_ipid]))
							{
								//admission
								$a1start_formated = date('Y-m-d', strtotime($v_adm['date']));
								$a1start = strtotime(date('Y-m-d', strtotime($v_adm['date'])));
								$a1end = strtotime(date('Y-m-d', strtotime($v_adm['date'])));

								//selected period
								$p1start = strtotime($selected_month_details['start']);
								$p1end = strtotime($selected_month_details['end']);

								if(Pms_CommonData::isintersected($a1start, $a1end, $p1start, $p1end))
								{
									$admission_dates[$period_ipid][$a1start_formated]['value'] = '1';
								}
							}
							else
							{
								$admission_dates[$period_ipid] = $anlage6_arr[$period_ipid];
							}
						}
					}
					else //old patients without data in readmission table
					{
						$cycle_start_period = date('Y-m-d', strtotime($period_details['admission_date']));

						if(empty($period_details['discharge_date']))
						{

							$cycle_end_period = date('Y-m-d', time());
						}
						else
						{
							$cycle_end_period = date('Y-m-d', strtotime($period_details['discharge_date']));
						}


						$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));

						$active_days[$period_ipid][] = $cycle_end_period;
						$discharge_dates_arr[$period_ipid][] = $cycle_end_period;


						if(empty($active_days_per_admissions[$period_ipid][0]))
						{
							$active_days_per_admissions[$period_ipid][0] = array();
						}
						$active_days_per_admissions[$period_ipid][0] = array_merge($active_days_per_admissions[$period_ipid][0], $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));

						if(empty($anlage6_arr[$period_ipid]))
						{

							//admission
							$a2start = strtotime($cycle_start_period);
							$a2end = strtotime(date('Y-m-d', strtotime($cycle_start_period)));

							//selected period
							$p2start = strtotime($selected_month_details['start']);
							$p2end = strtotime($selected_month_details['end']);

							if(Pms_CommonData::isintersected($a2start, $a2end, $p2start, $p2end))
							{
								$admission_dates[$period_ipid][date('Y-m-d', strtotime($cycle_start_period))]['value'] = '1';
							}
						}
						else
						{
							$admission_dates[$period_ipid] = $anlage6_arr[$period_ipid];
						}
					}


					$active_days[$period_ipid] = array_values(array_intersect($period_days_arr, $active_days[$period_ipid]));
				}

				//admission dates array used in hospiz calculation of "B" shortcut
				foreach($admission_dates as $k_ipid_dates => $v_adm_dates)
				{
					foreach($v_adm_dates as $k_adm_d => $v_adm_d)
					{
						$admission_dates_arr[$k_ipid_dates][] = $k_adm_d;
					}
				}

				/* ------------------------- 4. Get hospital and hospiz and remove from active days of selected month ----------------------------- */

				$disallowed_location_types = array('1', '2'); //hospital and hospiz
				// ISPC_2612 Ancuta 27.06.2020 Locx
				/*
				$hospitalids = Doctrine_Query::create()
					->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
					->from('Locations')
					->where('isdelete = 0')
					->andWhere('client_id ="' . $clientid . '"')
					->andWhereIn('location_type', $disallowed_location_types);
				$hosparray = $hospitalids->fetchArray();
                */
				$loc_obj = new Locations();
				$hosparray = $loc_obj->get_locationByClientAndTypes($clientid,$disallowed_location_types);
				//--
				$hospital_ids[] = '999999999';
				$hospiz_ids[] = '999999999';
				foreach($hosparray as $hospital)
				{
					$hospital_ids[] = $hospital['id'];
					$location_types[$hospital['location_type']][] = $hospital['id'];

					if($hospital['location_type'] == '2') //hospiz
					{
						$hospiz_ids[] = $hospital['id'];
					}
				}

				//get patient hospital locations if it has
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->whereIn('ipid', $patient_ipids)
					->andWhere('isdelete="0"')
					->andWhereIn('location_id', $hospital_ids)
					->orderBy('valid_from,id ASC');
				$pat_locations_res = $patloc->fetchArray();

				//get patient all locations
				$patloc_all = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->whereIn('ipid', $patient_ipids)
					->andWhere('isdelete="0"')
					->andWhere('location_id != "0"')
					->orderBy('valid_from,id ASC');
				$pat_locations_res_all = $patloc_all->fetchArray();

				foreach($pat_locations_res_all as $k_pat_loc => $v_pat_loc)
				{
					if(in_array($v_pat_loc['location_id'], $location_types['2']))
					{
						$hospiz_locations[$v_pat_loc['ipid']][$v_pat_loc['id']] = $v_pat_loc;
					}
				}

				foreach($pat_locations_res as $k_pat_loc => $v_pat_loc)
				{
					$patients_locations[$v_pat_loc['ipid']][] = $v_pat_loc;
				}

				$hospital_days = array();
				$hosp = array();

				foreach($patients_locations as $ipid_patient => $pat_locations)
				{
					$hospital_days[$ipid_patient] = array();
					$hospiz_days_array[$ipid_patient] = array();

					foreach($pat_locations as $k_pat_loc => $v_pat_loc)
					{
						if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
						{
							$till = date('Y-m-d', strtotime('+1 day'));
						}
						else
						{
							$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
						}

						$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
						$r1end = strtotime(date('Y-m-d', strtotime($till)));
						$r2start = strtotime($selected_month_details['start']);
						$r2end = strtotime($selected_month_details['end']);

						if(in_array($v_pat_loc['location_id'], $hospiz_ids))
						{
							$h_location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

							$hospiz_heads['start'][] = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
							$hospiz_heads['end'][] = date('Y-m-d', strtotime($v_pat_loc['valid_till']));

							$hospiz_days_arr = $patientmaster->getDaysInBetween($h_location_start, $till);
							$hospiz_days[$ipid_patient] = array_merge($hospiz_days[$ipid_patient], $hospiz_days_arr);
						}

						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
						{
							$hosp = array();
							$period_hosp_locations[] = $v_pat_loc;
							$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

							$hosp = $patientmaster->getDaysInBetween($location_start, $till);

							$hospital_days[$ipid_patient] = array_merge($hospital_days[$ipid_patient], $hosp);

							if(count($hospiz_days_array[$ipid_patient]) == 0)
							{
								$hospiz_days_array[$ipid_patient] = array();
							}
							if(in_array($v_pat_loc['location_id'], $hospiz_ids))
							{
								$hospizdays_arr = $patientmaster->getDaysInBetween($location_start, $till);
								$hospiz_days_array[$ipid_patient] = array_merge($hospiz_days_array[$ipid_patient], $hospizdays_arr);
							}
						}

						//find hosp heads
						$start_hosp_period = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
						$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
						$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
						$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));

						//remove end head
						if($end_hospital_period != $next_start_hosp && $start_hosp_period != $end_hospital_period)
						{
							$find = array_search($end_hospital_period_formatted, $hospital_days[$ipid_patient]);
							$removed_days['e'][] = $hospital_days[$ipid_patient][$find];
							unset($hospital_days[$ipid_patient][$find]);

							//hospiz end head
							if(!in_array($end_hospital_period_formatted, $discharge_dates_arr[$ipid_patient]))
							{
								$find_hospiz = array_search($end_hospital_period_formatted, $hospiz_days_array[$ipid_patient]);
								$removed_days['e_h'][] = $hospiz_days_array[$ipid_patient][$find_hospiz];
								unset($hospiz_days_array[$ipid_patient][$find_hospiz]);
							}
						}

						//remove start head
						if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
						{
							$find_s = '';
							$start_hospital_formatted = '';
							$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
							$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
							$start_hospital_period = $r1start;
							$start_hospital_formatted = date('Y-m-d', $r1start);


							if($start_hospital_period != $previous_till && $start_hosp_period != $end_hospital_period)
							{
								$find_s = array_search($start_hospital_formatted, $hospital_days[$ipid_patient]);
								if($find_s !== false)
								{
									$removed_days['s'][] = $hospital_days[$ipid_patient][$find_s];
									unset($hospital_days[$ipid_patient][$find_s]);
								}

								//unset hospiz start head
								if(!in_array($start_hospital_formatted, $admission_dates_arr[$ipid_patient]))
								{
									$find_s_hospiz = array_search($start_hospital_formatted, $hospiz_days_array[$ipid_patient]);
									if($find_s_hospiz !== false)
									{
										$removed_days['s_h'][] = $hospiz_days_array[$ipid_patient][$find_s_hospiz];
										unset($hospiz_days_array[$ipid_patient][$find_s_hospiz]);
									}
								}
							}
						}
						else
						{
							$find_n = '';
							$start_hospital_formatted = date('Y-m-d', $r1start);
							$find_n = array_search($start_hospital_formatted, $hospital_days[$ipid_patient]);
							if($find_n !== false)
							{
								$removed_days['s2'][] = $hospital_days[$ipid_patient][$find_n];
								unset($hospital_days[$ipid_patient][$find_n]);
							}

							if(!in_array($start_hospital_formatted, $admission_dates_arr[$ipid_patient]))
							{
								$find_s_h = '';
								$start_hospital_formatted = date('Y-m-d', $r1start);
								$find_s_h = array_search($start_hospital_formatted, $hospiz_days_array[$ipid_patient]);
								$removed_days['s2_h'][] = $hospiz_days_array[$ipid_patient][$find_s_h];
								unset($hospiz_days_array[$ipid_patient][$find_s_h]);
							}
						}
					}
					$patients_hospital_days[$ipid_patient] = array_intersect($period_days_arr, $hospital_days[$ipid_patient]);
				}

				/* ---------------------------------------- 5. Get SAPV for all ipids in selected month -------------------------------------------- */

				$dropSapv = Doctrine_Query::create()
					->select('*')
					->from('SapvVerordnung')
					->whereIn('ipid', $patient_ipids)
					->andWhere('verordnungam != "0000-00-00 00:00:00"')
					->andWhere('verordnungbis != "0000-00-00 00:00:00"')
					->andWhere('isdelete=0')
					->andWhere('status != 1 ')
					->orderBy('verordnungam ASC');
				//get all sapvs
				$all_sapv_res = $dropSapv->fetchArray();

				foreach($all_sapv_res as $k_sapv_res => $v_sapv_res)
				{
					$all_s_start = date('Y-m-d', strtotime($v_sapv_res['verordnungam']));
					$all_s_end = date('Y-m-d', strtotime($v_sapv_res['verordnungbis']));

					if(empty($all_sapv_days_arr[$v_sapv_res['ipid']]))
					{
						$all_sapv_days_arr[$v_sapv_res['ipid']] = array();
					}

					$temp_all_sapv_days[$v_sapv_res['ipid']] = $patientmaster->getDaysInBetween($all_s_start, $all_s_end);
					$all_sapv_days_arr[$v_sapv_res['ipid']] = array_merge($all_sapv_days_arr[$v_sapv_res['ipid']], $temp_all_sapv_days[$v_sapv_res['ipid']]);
				}

				//get only sapvs in period
				$dropSapv->andWhere('"' . date('Y-m-d', strtotime($selected_month_details['start'])) . '" <= DATE(verordnungbis)');
				$dropSapv->andWhere('"' . date('Y-m-d', strtotime($selected_month_details['end'])) . '" >= DATE(verordnungam)');
				$droparray = $dropSapv->fetchArray();

				$all_sapv_days = array();
				$temp_sapv_days = array();

				foreach($droparray as $k_sapv => $v_sapv)
				{
					if(count($all_sapv_days[$v_sapv['ipid']]) == 0)
					{
						$all_sapv_days[$v_sapv['ipid']] = array();
					}


					$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
					$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));


					$temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

					$all_sapv_days[$v_sapv['ipid']] = array_intersect($period_days_arr, array_merge($all_sapv_days[$v_sapv['ipid']], $temp_sapv_days[$v_sapv['ipid']]));
				}


				/* ------------------------------------------ 5b. Get  patient approved visits types for the selected month --------------------------------------------- */
				$default_pavt = Pms_CommonData::default_approved_visit_type(); // if nothing saved -> get default
				$pavt_mod = new PatientApprovedVisitTypes();
				$existing_pavt_array = $pavt_mod->patients_approved_visits_overall($patient_ipids);
				$pavt_array = $pavt_mod->patients_approved_visits_in_period($patient_ipids, $selected_month_details['start'], $selected_month_details['end']);

				foreach($patient_ipids as $ipid)
				{
					if($ipid != "99999999999999")
					{
						if(!$existing_pavt_array[$ipid])
						{
							$pavt_array[$ipid][0]['ipid'] = $ipid;
							$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
							$pavt_array[$ipid][0]['start_date'] = date('d.m.Y', strtotime($selected_month_details['start'])); // start period
							$pavt_array[$ipid][0]['end_date'] = date('d.m.Y', strtotime($selected_month_details['end'])); // end period
							$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
						}
					}
				}
				$x = 0;

				foreach($pavt_array as $p_ipid => $pavtvalue)
				{
					foreach($pavtvalue as $k => $tv)
					{
						$pavt[$tv['ipid']][$x]['visit_type'] = $tv['visit_type'];
						$pavt[$tv['ipid']][$x]['start_date'] = $tv['start_date'];

						if(empty($tv['end_date']) || $tv['end_date'] == "0000-00-00 00:00:00")
						{
							$pavt[$tv['ipid']][$x]['end_date'] = date('Y-m-d H:i:s');
						}
						else
						{
							$pavt[$tv['ipid']][$x]['end_date'] = $tv['end_date'];
						}

						$pavt_days[$tv['ipid']][$tv['visit_type']] = $patientmaster->getDaysInBetween(date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['start_date'])), date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['end_date'])));


						if(empty($patient_vists_type_int[$tv['ipid']][$tv['visit_type']]))
						{
							$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array();
						}
						$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array_merge($patient_vists_type_int[$tv['ipid']][$tv['visit_type']], $pavt_days[$tv['ipid']][$tv['visit_type']]);

						$x++;
					}
				}


				/* ------------------------------------------ 6. Get price list(s) for selected month --------------------------------------------- */
				$shortcuts = Pms_CommonData::get_prices_shortcuts();

				$this->view->shortcuts_admission = $shortcuts['admission'];
				$this->view->shortcuts_daily = $shortcuts['daily'];
				$this->view->shortcuts_visits = $shortcuts['visits'];
				$this->view->used_shortcuts = array('E', 'EH', 'B', 'P1', 'P2', 'P3', 'A1', 'A2');


				$p_list = new PriceList();
				$master_price_list = $p_list->get_period_price_list($selected_month_details['start'], $selected_month_details['end']);

				/* ----------------------- 7. Get doctor and nurse visits for all ipids and visit_date in selected month -------------------------- */

//			get nurse visits from verlauf deleted
				$nurse_from_course = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->whereIn('ipid', $patient_ipids)
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
					->andWhere("wrong = 1")
					->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form'")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$nurse_v = $nurse_from_course->fetchArray();

				$deleted_nurse_visits[] = '9999999999999999';
				foreach($nurse_v as $k_nurse_k => $v_nurse_v)
				{
					$deleted_nurse_visits[] = $v_nurse_v['recordid'];
				}

//			get doctor visits from verlauf deleted
				$doc_from_course = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->whereIn('ipid', $patient_ipids)
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
					->andWhere("wrong = 1")
					->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$doc_v = $doc_from_course->fetchArray();

				$deleted_doctor_visits[] = '99999999999999999';
				foreach($doc_v as $k_doc_v => $v_doc_v)
				{
					$deleted_doctor_visits[] = $v_doc_v['recordid'];
				}
				//these defined shortcuts have tstart and tend
				$nurse_visit_shortcuts = array("P1", "P2", "P3");
				$doctor_visit_shortcuts = array("A1", "A2");

				/*				 * * NURSE VISITS ** */
				$knurse_visits = Doctrine_Query::create()
					->select("*")
					->from("KvnoNurse")
					->whereIn('ipid', $patient_ipids)
					->andWhereNotIn('id', $deleted_nurse_visits)
					->andWhere('MONTH(vizit_date) = MONTH("' . $selected_month_details['start'] . '") AND YEAR(vizit_date) = YEAR("' . $selected_month_details['start'] . '") ')
					->andWhere('isdelete ="0"')
					->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
				$kvno_nurse_visits = $knurse_visits->fetchArray();

				foreach($kvno_nurse_visits as $k_n_visit => $v_n_visit)
				{
					$vizit_duration = '0';
					$vizit_date = date('Y-m-d', strtotime($v_n_visit['vizit_date']));
					$vizit_duration = Pms_CommonData::calculate_visit_duration(str_pad($v_n_visit['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_n_visit['kvno_end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_n_visit['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_n_visit['kvno_end_date_m'], 2, "0", STR_PAD_LEFT), $v_n_visit['vizit_date']);


					if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p3']))
					{// if P3 approved-> all visits are taken into consideration
						foreach($nurse_visit_shortcuts as $k_shortcut_nurse => $v_shortcut_nurse)
						{
							//visit date is between shortcut time and in active and sapv days and not in hospital/hospiz days
							$shortcut = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['shortcut'];

							if($vizit_duration >= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_end'] && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array($vizit_date, $patients_hospital_days[$v_n_visit['ipid']]) && $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'] != '0.00')
							{

								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '1';
								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
							}
							else
							{
								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '0';
								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
							}
						}
					}
					else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p2']))
					{// if P2 approved -> the P3 visits are counted as P2
						if(($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end'] || $vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end'] ) && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array($vizit_date, $patients_hospital_days[$v_n_visit['ipid']]) && $master_price_list[$vizit_date][0]['P2']['price'] != '0.00')
						{
							$shortcut = 'P2';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '1';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P2']['price'];
						}
						else
						{
							$shortcut = "P2";
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '0';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P2']['price'];
						}


						if($vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end'] && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array($vizit_date, $patients_hospital_days[$v_n_visit['ipid']]) && $master_price_list[$vizit_date][0]['P1']['price'] != '0.00')
						{
							$shortcut = 'P1';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '1';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						}
						else
						{
							$shortcut = "P1";
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '0';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						}
					}
					else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p1']))
					{// if P1 approved -> the P3 visits are counted as P1
						// if P1 approved -> the P2 visits are counted as P1
						if(($vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end'] || $vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end'] || $vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end'] ) && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array($vizit_date, $patients_hospital_days[$v_n_visit['ipid']]) && $master_price_list[$vizit_date][0]['P1']['price'] != '0.00')
						{
							$shortcut = 'P1';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '1';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						}
						else
						{
							$shortcut = 'P1';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '0';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						}
					}
				}
//				print_r($master_patient_data);exit;

				/*				 * * DOCTOR VISITS ** */
				$hospital_alowed_shortcuts = array('A1', 'A2');
				$kdoctor_visits = Doctrine_Query::create()
					->select("*")
					->from("KvnoDoctor")
					->whereIn('ipid', $patient_ipids)
					->andWhereNotIn('id', $deleted_doctor_visits)
					->andWhere('MONTH(vizit_date) = MONTH("' . $selected_month_details['start'] . '") AND YEAR(vizit_date) = YEAR("' . $selected_month_details['start'] . '") ')
					->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
				$kvno_doctor_visits = $kdoctor_visits->fetchArray();

				foreach($kvno_doctor_visits as $k_d_visit => $v_d_visit)
				{
					$visit_duration = '0';
					$visit_date = date('Y-m-d', strtotime($v_d_visit['vizit_date']));
					$visit_duration = Pms_CommonData::calculate_visit_duration(str_pad($v_d_visit['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_m'], 2, "0", STR_PAD_LEFT), $v_d_visit['vizit_date']);

					foreach($doctor_visit_shortcuts as $k_shortcut_doctor => $v_shortcut_doctor)
					{
						$shortcut = $master_price_list[$visit_date][0][$v_shortcut_doctor]['shortcut'];


						if(!in_array($shortcut, $hospital_alowed_shortcuts)) //skip doctor visits from hospital and sapv check
						{
							if($visit_duration >= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_start'] && $visit_duration <= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_end'] && in_array($visit_date, $active_days[$v_d_visit['ipid']]) && in_array($visit_date, $all_sapv_days[$v_d_visit['ipid']]) && !in_array($visit_date, $patients_hospital_days[$v_d_visit['ipid']]) && $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'] != '0.00')
							{
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['qty'] += '1';
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							}
							else
							{
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['qty'] += '0';
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							}
						}
						else
						{
							if($visit_duration >= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_start'] && $visit_duration <= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_end'] && in_array($visit_date, $active_days[$v_d_visit['ipid']]) && in_array($visit_date, $all_sapv_days[$v_d_visit['ipid']]) && $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'] != '0.00')
							{
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['qty'] += '1';
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							}
							else
							{
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['qty'] += '0';
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							}
						}
					}
				}

				/* ----------------------------------- 8. Setup E, EH and B shortcuts based on active days ----------------------------------------- */

				foreach($active_days as $active_pat_ipid => $active_days_arr)
				{
					$shortcut_active_days = 'B';

					foreach($active_days_arr as $k_act_day => $v_act_day)
					{
						$shortcut_active_price = $master_price_list[$v_act_day][0][$shortcut_active_days . '0']['price'];
						if(in_array($v_act_day, $all_sapv_days[$active_pat_ipid]) && in_array($v_act_day, $period_days_arr) && !in_array($v_act_day, $hospital_days[$active_pat_ipid]) && !in_array($v_act_day, $hospiz_days_array[$active_pat_ipid]) && $shortcut_active_price != '0.00')
						{

							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['name'] = $shortcut_active_days;
							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['qty'] += '1';
							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['price'] = $shortcut_active_price;
						}
						else
						{

							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['name'] = $shortcut_active_days;
							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['qty'] += '0';
							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['price'] = $shortcut_active_price;
						}
					}
				}


				$admission_dates_arr = array();
				foreach($patient_ipids as $k_p_ipid => $v_p_ipid)
				{
					if($v_p_ipid != '99999999999999')
					{
						foreach($active_days_per_admissions[$v_p_ipid] as $k_p_adm => $v_p_adm_arr)
						{

							foreach($v_p_adm_arr as $k_adm_day => $v_adm_day)
							{
								if(in_array($v_adm_day, $all_sapv_days_arr[$v_p_ipid]) && empty($triggered_admission[$v_p_ipid][$k_p_adm]))
								{
									$triggered_admission[$v_p_ipid][$k_p_adm] = $v_adm_day;
									$admission_dates_arr[$v_p_ipid][$v_adm_day]['value'] = '1';
								}
							}
						}
					}
				}

				foreach($pat_locations_res_all as $k_location_patient => $v_location_patient)
				{
					//check if admission day happens in this location
					foreach($admission_dates_arr[$v_location_patient['ipid']] as $k_adm_loc => $v_adm_loc)
					{

						$shortcut = '';

						//location start/end
						if($v_location_patient['valid_till'] == '0000-00-00 00:00:00')
						{
							$till = date('Y-m-d', time());
						}
						else
						{
							$till = date('Y-m-d', strtotime($v_location_patient['valid_till']));
						}

						$r1start = strtotime(date('Y-m-d', strtotime($v_location_patient['valid_from'])));
						$r1end = strtotime($till);

						//admission start/end
						$admitted_date = date('Y-m-d', strtotime($k_adm_loc)); //key is always date in both db and generated admissions array
						$r2start = strtotime($admitted_date);
						$r2end = strtotime($admitted_date);


						$loc_admission_date = date('Y-m-d', strtotime($v_location_patient['valid_from']));

						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end) && $v_adm_loc['value'] == 1 && in_array($admitted_date, $all_sapv_days[$v_location_patient['ipid']]) && in_array($loc_admission_date, $active_days[$v_location_patient['ipid']]))
						{
							if(array_key_exists($v_location_patient['id'], $hospiz_locations[$v_location_patient['ipid']]))
							{
								$shortcut = 'EH';
							}
							else
							{
								$shortcut = 'E';
							}

							if(empty($master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]))
							{
								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut] = array();
							}

							if($master_price_list[$admitted_date][0][$shortcut]['price'] != '0.00')
							{
								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['qty'] += 1;
								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut]['price'];
								$admission_dates_arr[$v_location_patient['ipid']][$admitted_date]['value'] = '0';
							}
							else
							{
								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['qty'] = 0;
								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut]['price'];
								$admission_dates_arr[$v_location_patient['ipid']][$admitted_date]['value'] = '0';
							}
						}
					}
				}

				foreach($admission_dates_arr as $k_adm_ipid => $v_adm_days)
				{
					foreach($v_adm_days as $k_admission_day => $v_admission_value)
					{
						if($v_admission_value['value'] == '1')
						{
							$shortcut = 'E';
							if(empty($master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]))
							{
								$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut] = array();
							}

							if(in_array($k_admission_day, $all_sapv_days[$k_adm_ipid]))
							{
								if($master_price_list[$k_admission_day][0][$shortcut]['price'] != '0.00')
								{
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['name'] = $shortcut;
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['qty'] += 1;
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['price'] = $master_price_list[$k_admission_day][0][$shortcut]['price'];
								}
								else
								{
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['name'] = $shortcut;
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['qty'] = 0;
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['price'] = $master_price_list[$k_admission_day][0][$shortcut]['price'];
								}
							}
						}
					}
				}

				/* ----------------------------------- 9. Get all ipids health insurance details ----------------------------------------- */
				/* ----------------------------------- Changed to the new subdivision system ----------------------------------------- */
				$hi_perms = new HealthInsurancePermissions();
				$pats_helath_insurance = new PatientHealthInsurance();
				$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();

				$p_health_insurances = $pats_helath_insurance->get_multiple_patient_healthinsurance($patient_ipids);

				foreach($p_health_insurances as $k_hi_pat => $v_hi_pat)
				{
					$company_ids[] = $v_hi_pat['companyid'];
					$patient2company[$k_hi_pat] = $v_hi_pat['companyid'];
				}




				//get client subdivisions
				$divisions = $hi_perms->getClientHealthInsurancePermissions($logininfo->clientid);
				$hi_perms_divisions = $divisions;

				//get subdivisions data
				if($hi_perms_divisions)
				{
					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($company_ids);
				}

				//find out if there is a subdivision data, if not load old hi data
				$patients_health_insurances[] = array();
				foreach($patient_ipids as $k_ipidp => $v_ipidp)
				{
					if(strlen($healthinsu_subdiv_arr[$v_ipidp][3]['name']) > 0 || strlen($healthinsu_subdiv_arr[$v_ipidp][3]['city']) > 0)
					{
						$patients_health_insurances[$v_ipidp] = $healthinsu_subdiv_arr[$v_ipidp][3];
					}
					else
					{
						$patients_health_insurances[$v_ipidp] = $p_health_insurances[$v_ipidp];
					}
				}


				/* -------------------- 10. Loop through the master patient data and construct final array ------------------------------- */

				foreach($master_patient_data as $k_patient_ipid => $patient_days_activity)
				{
					foreach($patient_days_activity as $k_active_pat_day => $patient_activity)
					{
						foreach($this->view->used_shortcuts as $k_short => $v_short)
						{
							if(!empty($patient_activity['shortcuts'][$v_short]))
							{
								$totals[$k_patient_ipid][$v_short]['name'] = $patient_activity['shortcuts'][$v_short]['name'];
								$totals[$k_patient_ipid][$v_short]['qty'] += $patient_activity['shortcuts'][$v_short]['qty'];
								$totals[$k_patient_ipid][$v_short]['price'] = $patient_activity['shortcuts'][$v_short]['price'];

								if(($patient_activity['shortcuts'][$v_short]['name'] == 'B' || $patient_activity['shortcuts'][$v_short]['name'] == 'E' || $patient_activity['shortcuts'][$v_short]['name'] == 'EH') && $patient_activity['shortcuts'][$v_short]['qty'] != 0)
								{
									$totals[$k_patient_ipid][$v_short]['total'] += $patient_activity['shortcuts'][$v_short]['price'] * $patient_activity['shortcuts'][$v_short]['qty'];
								}
								else if($patient_activity['shortcuts'][$v_short]['name'] != 'B')
								{
									$totals[$k_patient_ipid][$v_short]['total'] += ($patient_activity['shortcuts'][$v_short]['qty'] * $patient_activity['shortcuts'][$v_short]['price']);
								}
							}
							else
							{
								if($v_short == 'B')
								{
									$price = $master_price_list[$k_active_pat_day][0][$v_short . '0']['price'];
								}
								else
								{
									$price = $master_price_list[$k_active_pat_day][0][$v_short]['price'];
								}

								$totals[$k_patient_ipid][$v_short]['name'] = $v_short;
								$totals[$k_patient_ipid][$v_short]['qty'] += '0';
								if(!empty($price))
								{
									$totals[$k_patient_ipid][$v_short]['price'] = $price;
								}
								$totals[$k_patient_ipid][$v_short]['total'] += '0';
							}
						}
					}
				}

				foreach($totals as $k_ipid => $v_patient_shortcuts)
				{
					foreach($v_patient_shortcuts as $k_short => $v_short_details)
					{
						$totals[$k_ipid]['grand_total'] += $v_short_details['total'];
						$invoices_ipids[] = $k_ipid;
					}
				}

				$invoices_ipids = array_values(array_unique($invoices_ipids));

				$invoices_details['ipids'] = $invoices_ipids;
				$invoices_details['active_days'] = $active_days;
				$invoices_details['client'] = $c_data;
				$invoices_details['health_insurance'] = $patients_health_insurances;
				$invoices_details['items'] = $totals;


				$generate_invoices = $this->generate_invoices($invoices_details, $clientid);



				if($generate_invoices)
				{
					$this->_redirect(APP_BASE . "invoice/healthinsuranceinvoices?list=" . date('Y-m', strtotime($selected_month_details['start'])));
				}
			}
			else
			{
				return false;
			}
		}

		private function generate_patients_invoicenew($patients, $selected_month_details, $rehnung_number,$redirect = true,$sapvid = false,$admissionid = false)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$anlage6 = new Anlage6();

			$clientdata = Pms_CommonData::getClientData($clientid);
			$c_data['clientid'] = $clientdata[0]['id'];
			$c_data['clientname'] = $clientdata[0]['client_name'];
			$c_data['clientfax'] = $clientdata[0]['fax'];
			$c_data['clientphone'] = $clientdata[0]['phone'];
			$c_data['clientemail'] = $clientdata[0]['emailid'];
			$c_data['clientteamname'] = $clientdata[0]['team_name'];

			$period_days_arr = $patientmaster->getDaysInBetween($selected_month_details['start'], $selected_month_details['end']);
			foreach($period_days_arr as $k_per_day => $v_per_day)
			{
				$period_days[$v_per_day] = array();
			}

			if(count($patients) > 0)
			{
				/* -------------------------------------------- 1. Get patients ipids from ids ------------------------------------------------------- */
				$pat_ipid_ids = Doctrine_Query::create()
					->select('id, ipid')
					->from('PatientMaster')
					->whereIn('id', $patients);
				$patient_ipids_arr = $pat_ipid_ids->fetchArray();
				$patient_ipids[] = '99999999999999';
				foreach($patient_ipids_arr as $k_pat_ipid => $v_pat_ipid)
				{
					$master_patient_data[$v_pat_ipid['ipid']] = $period_days;
					$patient_ipids[] = $v_pat_ipid['ipid'];
				}
				/* ------------------------ 2. Get patients active days in selected period for all ipids + 3. get admissions ----------------------- */
				$patient_treated_periods = $patientmaster->getTreatedDaysRealMultiple($patient_ipids, false);

                //check if patient has anlage6 saved!
				$anlage6_res = $anlage6->get_all_anlage_shortcut($patient_ipids,'e');

				foreach($anlage6_res as $k_anlage6 => $v_anlage6)
				{
					$anlage6_arr[$v_anlage6['ipid']][date('Y-m-d', strtotime($v_anlage6['date']))] = $v_anlage6;
				}

				foreach($patient_treated_periods as $period_ipid => $period_details)
				{
					$active_days[$period_ipid] = array();
					$active_days_per_admissions[$period_ipid] = array();
					$admission_dates[$period_ipid] = array();
					$discharge_dates_arr[$period_ipid] = array();
					if(!empty($period_details['admissionDates']))
					{
						foreach($period_details['admissionDates'] as $key_adm => $v_adm)
						{
							if(!empty($period_details['dischargeDates'][$key_adm]['date']))
							{
								$start_with_discharge = date('Y-m-d', strtotime($period_details['admissionDates'][$key_adm]['date']));
								$end_with_discharge = date('Y-m-d', strtotime($period_details['dischargeDates'][$key_adm]['date']));
								$discharge_dates_arr[$period_ipid][] = $end_with_discharge;

								$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));

								if(empty($active_days_per_admissions[$period_ipid][$key_adm]))
								{
									$active_days_per_admissions[$period_ipid][$key_adm] = array();
								}
								$active_days_per_admissions[$period_ipid][$key_adm] = array_merge($active_days_per_admissions[$period_ipid][$key_adm], $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));

								//discharge date is active!
								$active_days[$period_ipid][] = date('Y-m-d', strtotime($end));
							}
							else
							{
								$start_without_discharge = date('Y-m-d', strtotime($period_details['admissionDates'][$key_adm]['date']));
								if(!empty($period_details['discharge_date']))
								{
									$end_without_discharge = date('Y-m-d', strtotime($period_details['discharge_date']));
								}
								else
								{
									$end_without_discharge = date('Y-m-d', time());
								}
								$discharge_dates_arr[$period_ipid][] = $end_without_discharge;

								$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));

								if(empty($active_days_per_admissions[$period_ipid][$key_adm]))
								{
									$active_days_per_admissions[$period_ipid][$key_adm] = array();
								}
								$active_days_per_admissions[$period_ipid][$key_adm] = array_merge($active_days_per_admissions[$period_ipid][$key_adm], $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
							}

							if(empty($anlage6_arr[$period_ipid]))
							{
								//admission
								$a1start_formated = date('Y-m-d', strtotime($v_adm['date']));
								$a1start = strtotime(date('Y-m-d', strtotime($v_adm['date'])));
								$a1end = strtotime(date('Y-m-d', strtotime($v_adm['date'])));

								//selected period
								$p1start = strtotime($selected_month_details['start']);
								$p1end = strtotime($selected_month_details['end']);

								if(Pms_CommonData::isintersected($a1start, $a1end, $p1start, $p1end))
								{
									$admission_dates[$period_ipid][$a1start_formated]['value'] = '1';
								}
							}
							else
							{ // TODO:1073 14.08.2017
							  
							    //$admission_dates[$period_ipid] = $anlage6_arr[$period_ipid];
								
								//admission
								$a1start_formated = date('Y-m-d', strtotime($v_adm['date']));
								$a1start = strtotime(date('Y-m-d', strtotime($v_adm['date'])));
								$a1end = strtotime(date('Y-m-d', strtotime($v_adm['date'])));

								//selected period
								$p1start = date('Y-m-d', strtotime($selected_month_details['start']));
								$p1end = date('Y-m-d', strtotime($selected_month_details['end']));
								
								$p1start_str = strtotime($selected_month_details['start']);
								$p1end_str = strtotime($selected_month_details['end']);
								
								ksort($anlage6_arr[$period_ipid]);
								$anlage_periods[$period_ipid]['days']=array_keys($anlage6_arr[$period_ipid]);
								$anlage_periods[$period_ipid]['start'] = $anlage_periods[$period_ipid]['days'][0]; 
								$anlage_periods[$period_ipid]['end'] = end($anlage_periods[$period_ipid]['days']);

								
								// if admission in anlage period check
								if(Pms_CommonData::isintersected($p1start, $p1end, $anlage_periods[$period_ipid]['start'], $anlage_periods[$period_ipid]['end']))
								{
									foreach($anlage6_arr[$period_ipid] as $e_date=>$e_values){
									
										if(Pms_CommonData::isintersected($e_date, $e_date, $p1start, $p1end))
										{
											if($e_values['value'] == "1"){
												$admission_dates[$period_ipid][$e_date]['value'] = '1';
											} else {
												$admission_dates[$period_ipid][$e_date]['value'] = '0';
											}
										}
									}
									
									if(Pms_CommonData::isintersected($a1start_formated, $a1start_formated, $p1start, $p1end) && !Pms_CommonData::isintersected($a1start_formated, $a1start_formated, $anlage_periods[$period_ipid]['start'], $anlage_periods[$period_ipid]['end']))
									{
										$admission_dates[$period_ipid][$a1start_formated]['value'] = '1';
									}
									
								} 
								else
								{
									if(Pms_CommonData::isintersected($a1start, $a1end, $p1start_str, $p1end_str))
									{
										$admission_dates[$period_ipid][$a1start_formated]['value'] = '1';
									}
								}
							}
						}
 
					}
					else //old patients without data in readmission table
					{
						$cycle_start_period = date('Y-m-d', strtotime($period_details['admission_date']));

						if(empty($period_details['discharge_date']))
						{

							$cycle_end_period = date('Y-m-d', time());
						}
						else
						{
							$cycle_end_period = date('Y-m-d', strtotime($period_details['discharge_date']));
						}


						$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));

						$active_days[$period_ipid][] = $cycle_end_period;
						$discharge_dates_arr[$period_ipid][] = $cycle_end_period;


						if(empty($active_days_per_admissions[$period_ipid][0]))
						{
							$active_days_per_admissions[$period_ipid][0] = array();
						}
						$active_days_per_admissions[$period_ipid][0] = array_merge($active_days_per_admissions[$period_ipid][0], $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));

						if(empty($anlage6_arr[$period_ipid]))
						{

							//admission
							$a2start = strtotime($cycle_start_period);
							$a2end = strtotime(date('Y-m-d', strtotime($cycle_start_period)));

							//selected period
							$p2start = strtotime($selected_month_details['start']);
							$p2end = strtotime($selected_month_details['end']);

							if(Pms_CommonData::isintersected($a2start, $a2end, $p2start, $p2end))
							{
								$admission_dates[$period_ipid][date('Y-m-d', strtotime($cycle_start_period))]['value'] = '1';
							}
						}
						else
						{
								// TODO:1073 14.08.2017
								//$admission_dates[$period_ipid] = $anlage6_arr[$period_ipid];
								
								//admission
								$a2start_formated = date('Y-m-d', strtotime($cycle_start_period));
								$a2start = strtotime($cycle_start_period);
								$a2end = strtotime(date('Y-m-d', strtotime($cycle_start_period)));

								//selected period
								$p2start = date('Y-m-d', strtotime($selected_month_details['start']));
								$p2end = date('Y-m-d', strtotime($selected_month_details['end']));
								
								$p2start_str = strtotime($selected_month_details['start']);
								$p2end_str = strtotime($selected_month_details['end']);
								
								ksort($anlage6_arr[$period_ipid]);
								$anlage_periods[$period_ipid]['days']=array_keys($anlage6_arr[$period_ipid]);
								$anlage_periods[$period_ipid]['start'] = $anlage_periods[$period_ipid]['days'][0]; 
								$anlage_periods[$period_ipid]['end'] = end($anlage_periods[$period_ipid]['days']);

								
								// if admission in anlage period check
								if(Pms_CommonData::isintersected($p2start, $p2end, $anlage_periods[$period_ipid]['start'], $anlage_periods[$period_ipid]['end']))
								{
									foreach($anlage6_arr[$period_ipid] as $e_date=>$e_values){
									
										if(Pms_CommonData::isintersected($e_date, $e_date, $p2start, $p2end))
										{
											if($e_values['value'] == "1"){
												$admission_dates[$period_ipid][$e_date]['value'] = '1';
											} else {
												$admission_dates[$period_ipid][$e_date]['value'] = '0';
											}
										}
									}
									
									if(Pms_CommonData::isintersected($a2start_formated, $a2start_formated, $p2start, $p2end) && !Pms_CommonData::isintersected($a2start_formated, $a2start_formated, $anlage_periods[$period_ipid]['start'], $anlage_periods[$period_ipid]['end']))
									{
										$admission_dates[$period_ipid][$a2start_formated]['value'] = '1';
									}
									
								} 
								else
								{
									if(Pms_CommonData::isintersected($a2start, $a2end, $p2start_str, $p2end_str))
									{
										$admission_dates[$period_ipid][$a2start_formated]['value'] = '1';
									}
								}
							
						}
					}


					$active_days[$period_ipid] = array_values(array_intersect($period_days_arr, $active_days[$period_ipid]));
				}

				//admission dates array used in hospiz calculation of "B" shortcut
				foreach($admission_dates as $k_ipid_dates => $v_adm_dates)
				{
					foreach($v_adm_dates as $k_adm_d => $v_adm_d)
					{
						$admission_dates_arr[$k_ipid_dates][] = $k_adm_d;
						if(!empty($anlage6_arr[$k_ipid_dates])){
                            $saved_admission_date [$k_adm_d] = $v_adm_d['value'];	
                            $saved_admission_date2ipid[$k_ipid_dates] [$k_adm_d] = $v_adm_d['value'];	
						}
					}
				}

				$disallowed_location_types = array('1', '2'); //hospital and hospiz
				//ISPC-2612 Ancuta 27.06.2020 Locx
				/* 
				$hospitalids = Doctrine_Query::create()
					->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
					->from('Locations')
					->where('isdelete = 0')
					->andWhere('client_id ="' . $clientid . '"')
					->andWhereIn('location_type', $disallowed_location_types);
				$hosparray = $hospitalids->fetchArray();
                 */
				$loc_obj = new Locations();//ISPC-2612 Ancuta 27.06.2020 Locx
				$hosparray = $loc_obj->get_locationByClientAndTypes($clientid,$disallowed_location_types);
				//--
				
				$hospital_ids[] = '999999999';
				$hospiz_ids[] = '999999999';
				foreach($hosparray as $hospital)
				{
					$hospital_ids[] = $hospital['id'];
					$location_types[$hospital['location_type']][] = $hospital['id'];

					if($hospital['location_type'] == '2') //hospiz
					{
						$hospiz_ids[] = $hospital['id'];
					}
				}
				/* ------------------------- 4. Get hospital and hospiz and remove from active days of selected month ----------------------------- */

				$patloc_all = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->whereIn('ipid', $patient_ipids)
					->andWhere('isdelete="0"')
					->andWhere('location_id != "0"')
					->orderBy('valid_from,id ASC');
				$pat_locations_res_all = $patloc_all->fetchArray();

				foreach($pat_locations_res_all as $k_pat_loc => $v_pat_loc)
				{
					if(in_array($v_pat_loc['location_id'], $location_types['2']))
					{
						$hospiz_locations[$v_pat_loc['ipid']][$v_pat_loc['id']] = $v_pat_loc;
					}
				}

				/* ------------------------- 4.1 Client Hospital Settings ----------------------------- */

				//curent period
				$conditions['periods'][0]['start'] = $selected_month_details['start'];
				$conditions['periods'][0]['end'] = $selected_month_details['end'];
				$conditions['client'] = $clientid;

				if($patient_ipids[0] = '99999999999999' && count($patient_ipids) > '1')
				{
					unset($patient_ipids[0]);
				}

				$conditions['ipids'] = $patient_ipids;
				
				//ISPC - 2365 - for privatepatient add patient address
				$sql = 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';

				$patients_days = Pms_CommonData::patients_days($conditions, $sql);

				/* ---------------------------------------- 5. Get SAPV for all ipids in selected month -------------------------------------------- */

				$dropSapv = Doctrine_Query::create()
					->select('*')
					->from('SapvVerordnung')
					->whereIn('ipid', $patient_ipids)
					->andWhere('verordnungam != "0000-00-00 00:00:00"')
					->andWhere('verordnungbis != "0000-00-00 00:00:00"')
					->andWhere('isdelete=0')
					->andWhere('status != 1 ')
					->orderBy('verordnungam ASC');
				//get all sapvs
				$all_sapv_res = $dropSapv->fetchArray();

				foreach($all_sapv_res as $k_sapv_res => $v_sapv_res)
				{
					$all_s_start = date('Y-m-d', strtotime($v_sapv_res['verordnungam']));
					$all_s_end = date('Y-m-d', strtotime($v_sapv_res['verordnungbis']));

					if(empty($all_sapv_days_arr[$v_sapv_res['ipid']]))
					{
						$all_sapv_days_arr[$v_sapv_res['ipid']] = array();
					}

					$temp_all_sapv_days[$v_sapv_res['ipid']] = $patientmaster->getDaysInBetween($all_s_start, $all_s_end);
					$all_sapv_days_arr[$v_sapv_res['ipid']] = array_merge($all_sapv_days_arr[$v_sapv_res['ipid']], $temp_all_sapv_days[$v_sapv_res['ipid']]);
				}

				//get only sapvs in period
				$dropSapv->andWhere('"' . date('Y-m-d', strtotime($selected_month_details['start'])) . '" <= DATE(verordnungbis)');
				$dropSapv->andWhere('"' . date('Y-m-d', strtotime($selected_month_details['end'])) . '" >= DATE(verordnungam)');
				$droparray = $dropSapv->fetchArray();

				$all_sapv_days = array();
				$temp_sapv_days = array();

				foreach($droparray as $k_sapv => $v_sapv)
				{
					if(count($all_sapv_days[$v_sapv['ipid']]) == 0)
					{
						$all_sapv_days[$v_sapv['ipid']] = array();
					}


					$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
					$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));


					$temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

					$all_sapv_days[$v_sapv['ipid']] = array_intersect($period_days_arr, array_merge($all_sapv_days[$v_sapv['ipid']], $temp_sapv_days[$v_sapv['ipid']]));
				}


				/* ------------------------------------------ 5b. Get  patient approved visits types for the selected month --------------------------------------------- */
				$default_pavt = Pms_CommonData::default_approved_visit_type(); // if nothing saved -> get default
				$pavt_mod = new PatientApprovedVisitTypes();
				$existing_pavt_array = $pavt_mod->patients_approved_visits_overall($patient_ipids);
				$pavt_array = $pavt_mod->patients_approved_visits_in_period($patient_ipids, $selected_month_details['start'], $selected_month_details['end']);

				foreach($patient_ipids as $ipid)
				{
					if($ipid != "99999999999999")
					{
						if(!$existing_pavt_array[$ipid])
						{
							$pavt_array[$ipid][0]['ipid'] = $ipid;
							$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
							$pavt_array[$ipid][0]['start_date'] = date('d.m.Y', strtotime($selected_month_details['start'])); // start period
							$pavt_array[$ipid][0]['end_date'] = date('d.m.Y', strtotime($selected_month_details['end'])); // end period
							$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
						}
					}
				}
				$x = 0;

				foreach($pavt_array as $p_ipid => $pavtvalue)
				{
					foreach($pavtvalue as $k => $tv)
					{
						$pavt[$tv['ipid']][$x]['visit_type'] = $tv['visit_type'];
						$pavt[$tv['ipid']][$x]['start_date'] = $tv['start_date'];

						if(empty($tv['end_date']) || $tv['end_date'] == "0000-00-00 00:00:00")
						{
							$pavt[$tv['ipid']][$x]['end_date'] = date('Y-m-d H:i:s');
						}
						else
						{
							$pavt[$tv['ipid']][$x]['end_date'] = $tv['end_date'];
						}

						$pavt_days[$tv['ipid']][$tv['visit_type']] = $patientmaster->getDaysInBetween(date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['start_date'])), date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['end_date'])));


						if(empty($patient_vists_type_int[$tv['ipid']][$tv['visit_type']]))
						{
							$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array();
						}
						$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array_merge($patient_vists_type_int[$tv['ipid']][$tv['visit_type']], $pavt_days[$tv['ipid']][$tv['visit_type']]);

						$x++;
					}
				}


				/* ------------------------------------------ 6. Get price list(s) for selected month --------------------------------------------- */
				$shortcuts = Pms_CommonData::get_prices_shortcuts();

				$this->view->shortcuts_admission = $shortcuts['admission'];
				$this->view->shortcuts_daily = $shortcuts['daily'];
				$this->view->shortcuts_visits = $shortcuts['visits'];
				$this->view->used_shortcuts = array('E', 'EH', 'B', 'P1', 'P2', 'P3', 'A1', 'A2');


				$p_list = new PriceList();
				$master_price_list = $p_list->get_period_price_list($selected_month_details['start'], $selected_month_details['end']);

				/* ----------------------- 7. Get doctor and nurse visits for all ipids and visit_date in selected month -------------------------- */

				//CONTACT FORMS START
				//get doctor and nurse users
				//get all related users details
				$master_groups_first = array('4', '5');

				$client_user_groups_first = Usergroup::getUserGroups($master_groups_first);

				foreach($client_user_groups_first as $k_group_f => $v_group_f)
				{
					$master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
				}

				$client_users = User::getClientsUsers($clientid);

				$nurse_users = array();
				$doctor_users = array();
				foreach($client_users as $k_cuser_det => $v_cuser_det)
				{
					$master_user_details[$v_cuser_det['id']] = $v_cuser_det;
					if(in_array($v_cuser_det['groupid'], $master2client['5']))
					{
						$nurse_users[] = $v_cuser_det['id'];
					}
					else if(in_array($v_cuser_det['groupid'], $master2client['4']))
					{
						$doctor_users[] = $v_cuser_det['id'];
					}
				}

				//get curent contact forms
// 				$contact_forms = $this->get_patients_contact_forms($patient_ipids, $selected_month_details, true,false,false);
				//$contact_forms = $this->get_patients_contact_forms($patient_ipids, false, true,false,false);
				$contact_forms = $this->get_patients_contact_forms($patient_ipids, false, true,false,true);//  TODO-2595
// 			print_r($contact_forms);
// 			exit;
				$doctor_contact_forms = array();
				$nurse_contact_forms = array();

				foreach($contact_forms as $kcf => $day_cfs)
				{
					foreach($day_cfs as $k_dcf => $v_dcf)
					{
					    // TODO-2697  ISPC Göttingen: Bug after connection Ancuta 17.01.2020
					    //changed so only if create user is doctor- to be listed here
						//if(in_array($v_dcf['create_user'], $doctor_users) || in_array($v_dcf['change_user'], $doctor_users))
						if(in_array($v_dcf['create_user'], $doctor_users))
						{
							$doctor_contact_forms[] = $v_dcf;
						}

						// TODO-1734  17.08.2018 Ancuta
// 						if(in_array($v_dcf['create_user'], $nurse_users) || in_array($v_dcf['change_user'], $nurse_users))
						if(in_array($v_dcf['create_user'], $nurse_users))
						{
							$nurse_contact_forms[] = $v_dcf;
						}
					}
				}
				//CONTACT FORMS END
//			get nurse visits from verlauf deleted
				$nurse_from_course = Doctrine_Query::create()
					->select("id,ipid,recordid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->whereIn('ipid', $patient_ipids)
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
					->andWhere("wrong = 1")
					->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form'")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$nurse_v = $nurse_from_course->fetchArray();

				$deleted_nurse_visits[] = '9999999999999999';
				foreach($nurse_v as $k_nurse_k => $v_nurse_v)
				{
					$deleted_nurse_visits[] = $v_nurse_v['recordid'];
				}

//			get doctor visits from verlauf deleted
				$doc_from_course = Doctrine_Query::create()
					->select("id,ipid,recordid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->whereIn('ipid', $patient_ipids)
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
					->andWhere("wrong = 1")
					->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$doc_v = $doc_from_course->fetchArray();

				$deleted_doctor_visits[] = '99999999999999999';
				foreach($doc_v as $k_doc_v => $v_doc_v)
				{
					$deleted_doctor_visits[] = $v_doc_v['recordid'];
				}
				//these defined shortcuts have tstart and tend
				$nurse_visit_shortcuts = array("P1", "P2", "P3");
				$doctor_visit_shortcuts = array("A1", "A2");

				/*				 * * NURSE VISITS ** */
				$knurse_visits = Doctrine_Query::create()
					->select("*")
					->from("KvnoNurse")
					->whereIn('ipid', $patient_ipids)
					->andWhereNotIn('id', $deleted_nurse_visits)
					//->andWhere('MONTH(vizit_date) = MONTH("' . $selected_month_details['start'] . '") AND YEAR(vizit_date) = YEAR("' . $selected_month_details['start'] . '") ')
					->andWhere('DATE(vizit_date) BETWEEN DATE("' . $selected_month_details['start'] . '") and DATE("' . $selected_month_details['end'] . '")')
					->andWhere('isdelete ="0"')
					->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
				$kvno_nurse_visits = $knurse_visits->fetchArray();


				/* --------------------------------- Get nurse visits (contactform) --------------------------------------------------- */
				foreach($nurse_contact_forms as $k_nurse_cf => $v_nurse_cf)
				{
					$nurse_visit_date_cf = date('Y-m-d', strtotime($v_nurse_cf['billable_date']));
					$nurse_visit_date_cf_alt = date('d.m.Y', strtotime($v_nurse_cf['billable_date']));
					$cf_nurse_visit = array();
					$visit_type = '';
					$duration = $v_nurse_cf['visit_duration'];

					//nurse contact form source
					$v_nurse_cf['source'] = 'nurse_cf';
					$v_nurse_cf['duration'] = $duration;
					$v_nurse_cf['vizit_date'] = $v_nurse_cf['billable_date'];

					$kvno_nurse_visits[] = $v_nurse_cf;
				}

				if($_REQUEST['dbgg'])
				{
					print_r("Nurse visits (BF+CF)");
					print_r($kvno_nurse_visits);
				}

				foreach($kvno_nurse_visits as $k_n_visit => $v_n_visit)
				{
					$vizit_duration = '0';
					$vizit_date = date('Y-m-d', strtotime($v_n_visit['vizit_date']));
					if($v_n_visit['source'] == 'nurse_cf')
					{
						$vizit_duration = $v_n_visit['visit_duration'];
					}
					else
					{
						$vizit_duration = Pms_CommonData::calculate_visit_duration(str_pad($v_n_visit['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_n_visit['kvno_end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_n_visit['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_n_visit['kvno_end_date_m'], 2, "0", STR_PAD_LEFT), $v_n_visit['vizit_date']);
					}

					if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p3']))
					{// if P3 approved-> all visits are taken into consideration
						foreach($nurse_visit_shortcuts as $k_shortcut_nurse => $v_shortcut_nurse)
						{
							//visit date is between shortcut time and in active and sapv days and not in hospital/hospiz days
							$shortcut = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['shortcut'];

//							if($vizit_duration >= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_end'] && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array($vizit_date, $patients_hospital_days[$v_n_visit['ipid']]) && $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'] != '0.00')
							if(
								$vizit_duration >= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_end'] && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array(date('d.m.Y', strtotime($vizit_date)), $patients_days[$v_n_visit['ipid']]['hospital']['real_days_cs']) && !in_array(date('d.m.Y', strtotime($vizit_date)), $patients_days[$v_n_visit['ipid']]['hospiz']['real_days_cs']) && $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'] != '0.00'
							)
							{
								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '1';
								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
							}
							else
							{
								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '0';
								$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
							}
						}
					}
					else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p2']))
					{// if P2 approved -> the P3 visits are counted as P2
//						if(($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end'] || $vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end'] ) && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array($vizit_date, $patients_hospital_days[$v_n_visit['ipid']]) && $master_price_list[$vizit_date][0]['P2']['price'] != '0.00')
						if(
							( $vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end'] || $vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end']
							) && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array(date('d.m.Y', strtotime($vizit_date)), $patients_days[$v_n_visit['ipid']]['hospital']['real_days_cs']) && !in_array(date('d.m.Y', strtotime($vizit_date)), $patients_days[$v_n_visit['ipid']]['hospiz']['real_days_cs']) && $master_price_list[$vizit_date][0]['P2']['price'] != '0.00'
						)
						{
							$shortcut = 'P2';

							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '1';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P2']['price'];
						}
						else
						{
							$shortcut = "P2";
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '0';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P2']['price'];
						}

//						if($vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end'] && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array($vizit_date, $patients_hospital_days[$v_n_visit['ipid']]) && $master_price_list[$vizit_date][0]['P1']['price'] != '0.00')
						if(
							$vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end'] && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array(date('d.m.Y', strtotime($vizit_date)), $patients_days[$v_n_visit['ipid']]['hospital']['real_days_cs']) && !in_array(date('d.m.Y', strtotime($vizit_date)), $patients_days[$v_n_visit['ipid']]['hospiz']['real_days_cs']) && $master_price_list[$vizit_date][0]['P1']['price'] != '0.00'
						)
						{
							$shortcut = 'P1';

							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '1';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						}
						else
						{
							$shortcut = "P1";
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '0';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						}
					}
					else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p1']))
					{// if P1 approved -> the P3 visits are counted as P1
						// if P1 approved -> the P2 visits are counted as P1
//						if(($vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end'] || $vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end'] || $vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end'] ) && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array($vizit_date, $patients_hospital_days[$v_n_visit['ipid']]) && $master_price_list[$vizit_date][0]['P1']['price'] != '0.00')
						if(
							(
							$vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end'] || $vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end'] || $vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end']
							) && in_array($vizit_date, $active_days[$v_n_visit['ipid']]) && in_array($vizit_date, $all_sapv_days[$v_n_visit['ipid']]) && !in_array(date('d.m.Y', strtotime($vizit_date)), $patients_days[$v_n_visit['ipid']]['hospital']['real_days_cs']) && !in_array(date('d.m.Y', strtotime($vizit_date)), $patients_days[$v_n_visit['ipid']]['hospiz']['real_days_cs']) && $master_price_list[$vizit_date][0]['P1']['price'] != '0.00'
						)
						{
							$shortcut = 'P1';

							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '1';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						}
						else
						{
							$shortcut = 'P1';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['qty'] += '0';
							$master_patient_data[$v_n_visit['ipid']][$vizit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						}
					}
				}


				/*				 * * DOCTOR VISITS ** */
				$hospital_alowed_shortcuts = array('A1', 'A2');
				$kdoctor_visits = Doctrine_Query::create()
					->select("*")
					->from("KvnoDoctor")
					->whereIn('ipid', $patient_ipids)
					->andWhereNotIn('id', $deleted_doctor_visits)
					//->andWhere('MONTH(vizit_date) = MONTH("' . $selected_month_details['start'] . '") AND YEAR(vizit_date) = YEAR("' . $selected_month_details['start'] . '") ')
					->andWhere('DATE(vizit_date) BETWEEN DATE("' . $selected_month_details['start'] . '") and DATE("' . $selected_month_details['end'] . '")')
					->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
				$kvno_doctor_visits = $kdoctor_visits->fetchArray();

				/* --------------------------------- Get doctor visits (contactform) -------------------------------------------------- */
				foreach($doctor_contact_forms as $k_doc_cf => $v_doc_cf)
				{
					$doctor_visit_date_cf = date('Y-m-d', strtotime($v_doc_cf['billable_date']));
					$duration = $v_doc_cf['visit_duration'];
					$visit_type = '';

					//source doctor contactform
					$v_doc_cf['source'] = 'doctor_cf';
					$v_doc_cf['duration'] = $duration;
					$v_doc_cf['vizit_date'] = $v_doc_cf['billable_date'];

					$kvno_doctor_visits[] = $v_doc_cf;
				}


				if($_REQUEST['dbgg'])
				{
					print_r("Doctor visits (BF+CF)");
					print_r($kvno_doctor_visits);
				}

				foreach($kvno_doctor_visits as $k_d_visit => $v_d_visit)
				{
					$visit_duration = '0';
					$visit_date = date('Y-m-d', strtotime($v_d_visit['vizit_date']));
					if($v_d_visit['source'] == 'doctor_cf')
					{
						$visit_duration = $v_d_visit['duration'];
					}
					else
					{
						$visit_duration = Pms_CommonData::calculate_visit_duration(str_pad($v_d_visit['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_m'], 2, "0", STR_PAD_LEFT), $v_d_visit['vizit_date']);
					}

					foreach($doctor_visit_shortcuts as $k_shortcut_doctor => $v_shortcut_doctor)
					{
						$shortcut = $master_price_list[$visit_date][0][$v_shortcut_doctor]['shortcut'];


						if(!in_array($shortcut, $hospital_alowed_shortcuts)) //skip doctor visits from hospital and sapv check
						{
//							if($visit_duration >= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_start'] && $visit_duration <= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_end'] && in_array($visit_date, $active_days[$v_d_visit['ipid']]) && in_array($visit_date, $all_sapv_days[$v_d_visit['ipid']]) && !in_array($visit_date, $patients_hospital_days[$v_d_visit['ipid']]) && $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'] != '0.00')

							if(
								$visit_duration >= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_start'] &&
								$visit_duration <= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_end'] &&
								in_array($visit_date, $active_days[$v_d_visit['ipid']]) &&
								in_array($visit_date, $all_sapv_days[$v_d_visit['ipid']]) &&
								!in_array(date('d.m.Y', strtotime($vizit_date)), $patients_days[$v_n_visit['ipid']]['hospital']['real_days_cs']) &&
// 									!in_array(date('d.m.Y', strtotime($vizit_date)), $patients_days[$v_n_visit['ipid']]['hospiz']['real_days_cs']) &&
								$master_price_list[$visit_date][0][$v_shortcut_doctor]['price'] != '0.00'
							)
							{
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['qty'] += '1';
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							}
							else
							{
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['qty'] += '0';
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							}
						}
						else
						{
							if(
								$visit_duration >= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_start'] &&
								$visit_duration <= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_end'] &&
								in_array($visit_date, $active_days[$v_d_visit['ipid']]) &&
								in_array($visit_date, $all_sapv_days[$v_d_visit['ipid']]) &&
								$master_price_list[$visit_date][0][$v_shortcut_doctor]['price'] != '0.00'
							)
							{
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['qty'] += '1';
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							}
							else
							{
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['qty'] += '0';
								$master_patient_data[$v_d_visit['ipid']][$visit_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							}
						}
					}
				}

				/* ----------------------------------- 8. Setup E, EH and B shortcuts based on active days ----------------------------------------- */

				foreach($active_days as $active_pat_ipid => $active_days_arr)
				{
					$shortcut_active_days = 'B';

					foreach($active_days_arr as $k_act_day => $v_act_day)
					{
						$shortcut_active_price = $master_price_list[$v_act_day][0][$shortcut_active_days . '0']['price'];
//						if(in_array($v_act_day, $all_sapv_days[$active_pat_ipid]) && in_array($v_act_day, $period_days_arr) && !in_array($v_act_day, $hospital_days[$active_pat_ipid]) && !in_array($v_act_day, $hospiz_days_array[$active_pat_ipid]) && $shortcut_active_price != '0.00')
						if(
							in_array($v_act_day, $all_sapv_days[$active_pat_ipid]) && in_array($v_act_day, $period_days_arr) && !in_array(date('d.m.Y', strtotime($v_act_day)), $patients_days[$active_pat_ipid]['hospital']['real_days_cs']) && !in_array(date('d.m.Y', strtotime($v_act_day)), $patients_days[$active_pat_ipid]['hospiz']['real_days_cs']) && $shortcut_active_price != '0.00'
						)
						{

							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['name'] = $shortcut_active_days;
							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['qty'] += '1';
							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['price'] = $shortcut_active_price;
						}
						else
						{

							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['name'] = $shortcut_active_days;
							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['qty'] += '0';
							$master_patient_data[$active_pat_ipid][$v_act_day]['shortcuts'][$shortcut_active_days]['price'] = $shortcut_active_price;
						}
					}
				}
				if($_REQUEST['dbgg'])
				{
					print_r($master_patient_data);
					exit;
				}

				$admission_dates_arr = array();
				foreach($patient_ipids as $k_p_ipid => $v_p_ipid)
				{
					if($v_p_ipid != '99999999999999')
					{
        				if(!empty($saved_admission_date2ipid[$v_p_ipid])){
        				    foreach($saved_admission_date2ipid[$v_p_ipid] as $sdate=>$svalue){
        				        if($svalue == "1"){
        				            $admission_dates_arr[$v_p_ipid][$sdate]['value'] = '1';
        				        }
        				    }
        				} 
    				    else
    				    {
    						foreach($active_days_per_admissions[$v_p_ipid] as $k_p_adm => $v_p_adm_arr)
    						{
    
    							foreach($v_p_adm_arr as $k_adm_day => $v_adm_day)
    							{
    								if(in_array($v_adm_day, $all_sapv_days_arr[$v_p_ipid]) && empty($triggered_admission[$v_p_ipid][$k_p_adm]))
    								{
    									$triggered_admission[$v_p_ipid][$k_p_adm] = $v_adm_day;
    									$admission_dates_arr[$v_p_ipid][$v_adm_day]['value'] = '1';
    								}
    							}
    						}
    				    }
					}
				}

				// TODO-1178 - Göttingen - DTA Export bug 09.10.2017 Ancuta 
				foreach($admission_dates_arr as $adm_ipid =>$adm_dates_arr)
				{
					
					$shortcut = '';
					foreach($adm_dates_arr as $k_adm_loc => $v_adm_loc)
					{
						$admitted_date = date('Y-m-d', strtotime($k_adm_loc));
						$admitted_date_dmY = date('d.m.Y', strtotime($k_adm_loc));
						
						if( $v_adm_loc['value'] == 1 && in_array($admitted_date, $all_sapv_days[$adm_ipid]) )
						{
							if(in_array($admitted_date_dmY, $patients_days[$adm_ipid]['hospiz']['real_days'])){ // if admitted day in all hospiz days
								$shortcut = 'EH';
							} else{
								$shortcut = 'E';
							}
					
							if(empty($master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]))
							{
								$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut] = array();
							}
								
							if(!empty($saved_admission_date2ipid[$adm_ipid] )){
									
								if($saved_admission_date2ipid[$adm_ipid][$admitted_date] == "1" && $master_price_list[$admitted_date][0][$shortcut]['price'] != '0.00'){
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['name'] = $shortcut;
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['qty'] += 1;
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut]['price'];
									$admission_dates_arr[$adm_ipid][$admitted_date]['value'] = '0';
										
								} else{
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['name'] = $shortcut;
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['qty'] = 0;
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut]['price'];
									$admission_dates_arr[$adm_ipid][$admitted_date]['value'] = '0';
								}
							} else{
								if($master_price_list[$admitted_date][0][$shortcut]['price'] != '0.00')
								{
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['name'] = $shortcut;
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['qty'] += 1;
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut]['price'];
									$admission_dates_arr[$adm_ipid][$admitted_date]['value'] = '0';
								}
								else
								{
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['name'] = $shortcut;
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['qty'] = 0;
									$master_patient_data[$adm_ipid][$admitted_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut]['price'];
									$admission_dates_arr[$adm_ipid][$admitted_date]['value'] = '0';
								}
							}
							
						}
					}
				}
					
				/*
				foreach($pat_locations_res_all as $k_location_patient => $v_location_patient)
				{
					//check if admission day happens in this location
					foreach($admission_dates_arr[$v_location_patient['ipid']] as $k_adm_loc => $v_adm_loc)
					{

						$shortcut = '';

						//location start/end
						if($v_location_patient['valid_till'] == '0000-00-00 00:00:00')
						{
							$till = date('Y-m-d', time());
						}
						else
						{
							$till = date('Y-m-d', strtotime($v_location_patient['valid_till']));
						}

						$r1start = strtotime(date('Y-m-d', strtotime($v_location_patient['valid_from'])));
						$r1end = strtotime($till);

						//admission start/end
						$admitted_date = date('Y-m-d', strtotime($k_adm_loc)); //key is always date in both db and generated admissions array
						$r2start = strtotime($admitted_date);
						$r2end = strtotime($admitted_date);


						$loc_admission_date = date('Y-m-d', strtotime($v_location_patient['valid_from']));

						if(
							Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end) && $v_adm_loc['value'] == 1 && in_array($admitted_date, $all_sapv_days[$v_location_patient['ipid']])
// 								&& in_array($loc_admission_date, $active_days[$v_location_patient['ipid']])
						)
						{
							if(array_key_exists($v_location_patient['id'], $hospiz_locations[$v_location_patient['ipid']]))
							{
								$shortcut = 'EH';
							}
							else
							{
								$shortcut = 'E';
							}

							if(empty($master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]))
							{
								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut] = array();
							}
							
							if(!empty($saved_admission_date2ipid[$v_location_patient['ipid']] )){
							    
    							if($saved_admission_date2ipid[$v_location_patient['ipid']][$admitted_date] == "1" && $master_price_list[$admitted_date][0][$shortcut]['price'] != '0.00'){
    							    $master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['name'] = $shortcut;
    							    $master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['qty'] += 1;
    							    $master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut]['price'];
    							    $admission_dates_arr[$v_location_patient['ipid']][$admitted_date]['value'] = '0';
    							    
    							} else{
    							    $master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['name'] = $shortcut;
    							    $master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['qty'] = 0;
    							    $master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut]['price'];
    							    $admission_dates_arr[$v_location_patient['ipid']][$admitted_date]['value'] = '0';
    							}
							} else{
    							if($master_price_list[$admitted_date][0][$shortcut]['price'] != '0.00')
    							{
    								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['name'] = $shortcut;
    								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['qty'] += 1;
    								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut]['price'];
    								$admission_dates_arr[$v_location_patient['ipid']][$admitted_date]['value'] = '0';
    							}
    							else
    							{
    								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['name'] = $shortcut;
    								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['qty'] = 0;
    								$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut]['price'];
    								$admission_dates_arr[$v_location_patient['ipid']][$admitted_date]['value'] = '0';
    							}
							}
						}
					}
				}
				*/

				foreach($admission_dates_arr as $k_adm_ipid => $v_adm_days)
				{
					foreach($v_adm_days as $k_admission_day => $v_admission_value)
					{
						if($v_admission_value['value'] == '1')
						{
							$shortcut = 'E';
							if(empty($master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]))
							{
								$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut] = array();
							}

							if(in_array($k_admission_day, $all_sapv_days[$k_adm_ipid]))
							{
								if($master_price_list[$k_admission_day][0][$shortcut]['price'] != '0.00')
								{
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['name'] = $shortcut;
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['qty'] += 1;
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['price'] = $master_price_list[$k_admission_day][0][$shortcut]['price'];
								}
								else
								{
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['name'] = $shortcut;
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['qty'] = 0;
									$master_patient_data[$k_adm_ipid][$k_admission_day]['shortcuts'][$shortcut]['price'] = $master_price_list[$k_admission_day][0][$shortcut]['price'];
								}
							}
						}
					}
				}

				/* ----------------------------------- 9. Get all ipids health insurance details ----------------------------------------- */
				/* ----------------------------------- Changed to the new subdivision system ----------------------------------------- */
				$hi_perms = new HealthInsurancePermissions();
				$helath_insurance = new HealthInsurance();
				$pats_helath_insurance = new PatientHealthInsurance();
				$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();

				$p_health_insurances = $pats_helath_insurance->get_multiple_patient_healthinsurance($patient_ipids);

				foreach($p_health_insurances as $k_hi_pat => $v_hi_pat)
				{
					$company_ids[] = $v_hi_pat['companyid'];
					$patient2company[$k_hi_pat] = $v_hi_pat['companyid'];
				}
				//get healthinsurance data
				if(empty($company_ids))
				{
					$company_ids[] = "XXXXXX";
				}
				$healthinsu_master_arr = $helath_insurance->get_multiple_healthinsurances($company_ids);



				//get client subdivisions
				$divisions = $hi_perms->getClientHealthInsurancePermissions($logininfo->clientid);
				$hi_perms_divisions = $divisions;

				//get subdivisions data
				if($hi_perms_divisions)
				{
					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($company_ids);
				}

				//find out if there is a subdivision data, if not load old hi data
				$patients_health_insurances[] = array();
				foreach($patient_ipids as $k_ipidp => $v_ipidp)
				{
					//ISPC - 2365 - for privatepatient, invoice_address is patient info
					if($p_health_insurances[$v_ipidp]['privatepatient'] == '1')
					{
						$patients_health_insurances[$v_ipidp]['privatepatient'] = '1';
						$patients_health_insurances[$v_ipidp]['patient_details'] = $patients_days[$v_ipidp]['details'];
					}
					elseif(strlen($healthinsu_subdiv_arr[$v_ipidp][3]['name']) > 0 || strlen($healthinsu_subdiv_arr[$v_ipidp][3]['city']) > 0)
					{
						$patients_health_insurances[$v_ipidp] = $healthinsu_subdiv_arr[$v_ipidp][3];
					}
					else
					{
						if(empty($p_health_insurances[$v_ipidp]['ins_street']))
						{
							$p_health_insurances[$v_ipidp]['ins_street'] = $healthinsu_master_arr[$p_health_insurances[$v_ipidp]['companyid']]['street1'];
						}
						if(empty($p_health_insurances[$v_ipidp]['ins_zip']))
						{
							$p_health_insurances[$v_ipidp]['ins_zip'] = $healthinsu_master_arr[$p_health_insurances[$v_ipidp]['companyid']]['zip'];
						}
						if(empty($p_health_insurances[$v_ipidp]['ins_city']))
						{
							$p_health_insurances[$v_ipidp]['ins_city'] = $healthinsu_master_arr[$p_health_insurances[$v_ipidp]['companyid']]['city'];
						}

						$patients_health_insurances[$v_ipidp] = $p_health_insurances[$v_ipidp];
					}
				}

				//LE: 06.11.2014 - ISPC-1069
				/* -------------- 10 bis. Loop through the master patient data and limit P shortcuts to client limit---------------------- */
				$client_data = new Client();
				$client_details = $client_data->getClientDataByid($clientid);

				$nurse_visit_shortcuts = array("P1", "P2", "P3");

				krsort($nurse_visit_shortcuts);
				$nurse_visit_shortcuts = array_values($nurse_visit_shortcuts);

				foreach($master_patient_data as $k_patient_ipid => $patient_days_activity)
				{
					foreach($patient_days_activity as $k_day => $patient_activity)
					{
						$max_day_qty[$k_patient_ipid][$k_day] = $client_details[0]['max_nurse_visits'];
						foreach($nurse_visit_shortcuts as $k_short => $v_short)
						{
							if($patient_activity['shortcuts'][$v_short]['qty'] > '0')
							{
								if($patient_activity['shortcuts'][$v_short]['qty'] >= $max_day_qty[$k_patient_ipid][$k_day] && $max_day_qty[$k_patient_ipid][$k_day] != '0')
								{
									$value = $max_day_qty[$k_patient_ipid][$k_day];
									if(($max_day_qty[$k_patient_ipid][$k_day] - $patient_activity['shortcuts'][$v_short]['qty']) > '0')
									{
										$value = ($max_day_qty[$k_patient_ipid][$k_day] - $patient_activity['shortcuts'][$v_short]['qty']);
									}
									else
									{
										$value = '0';
									}

									$master_patient_data[$k_patient_ipid][$k_day]['shortcuts'][$v_short]['qty'] = $max_day_qty[$k_patient_ipid][$k_day];
								}
								else if($max_day_qty[$k_patient_ipid][$k_day] == '0')
								{
									$value = $max_day_qty[$k_patient_ipid][$k_day];
									$master_patient_data[$k_patient_ipid][$k_day]['shortcuts'][$v_short]['qty'] = $max_day_qty[$k_patient_ipid][$k_day];
								}
								else
								{
									$value = ($max_day_qty[$k_patient_ipid][$k_day] - $patient_activity['shortcuts'][$v_short]['qty']);

									$master_patient_data[$k_patient_ipid][$k_day]['shortcuts'][$v_short]['qty'] = $patient_activity['shortcuts'][$v_short]['qty'];
								}

								$max_day_qty[$k_patient_ipid][$k_day] = $value;
							}
						}
					}
				}

				/* -------------------- 10. Loop through the master patient data and construct final array ------------------------------- */

				foreach($master_patient_data as $k_patient_ipid => $patient_days_activity)
				{
					foreach($patient_days_activity as $k_active_pat_day => $patient_activity)
					{
						foreach($this->view->used_shortcuts as $k_short => $v_short)
						{
							if(!empty($patient_activity['shortcuts'][$v_short]))
							{
								$totals[$k_patient_ipid][$v_short]['name'] = $patient_activity['shortcuts'][$v_short]['name'];
								$totals[$k_patient_ipid][$v_short]['qty'] += $patient_activity['shortcuts'][$v_short]['qty'];
								$totals[$k_patient_ipid][$v_short]['price'] = $patient_activity['shortcuts'][$v_short]['price'];

								if(($patient_activity['shortcuts'][$v_short]['name'] == 'B' || $patient_activity['shortcuts'][$v_short]['name'] == 'E' || $patient_activity['shortcuts'][$v_short]['name'] == 'EH') && $patient_activity['shortcuts'][$v_short]['qty'] != 0)
								{
									$totals[$k_patient_ipid][$v_short]['total'] += $patient_activity['shortcuts'][$v_short]['price'] * $patient_activity['shortcuts'][$v_short]['qty'];
								}
								else if($patient_activity['shortcuts'][$v_short]['name'] != 'B')
								{
									$totals[$k_patient_ipid][$v_short]['total'] += ($patient_activity['shortcuts'][$v_short]['qty'] * $patient_activity['shortcuts'][$v_short]['price']);
								}
							}
							else
							{
								if($v_short == 'B')
								{
									$price = $master_price_list[$k_active_pat_day][0][$v_short . '0']['price'];
								}
								else
								{
									$price = $master_price_list[$k_active_pat_day][0][$v_short]['price'];
								}

								$totals[$k_patient_ipid][$v_short]['name'] = $v_short;
								$totals[$k_patient_ipid][$v_short]['qty'] += '0';
								if(!empty($price))
								{
									$totals[$k_patient_ipid][$v_short]['price'] = $price;
								}
								$totals[$k_patient_ipid][$v_short]['total'] += '0';
							}
						}
					}
				}

				foreach($totals as $k_ipid => $v_patient_shortcuts)
				{
					foreach($v_patient_shortcuts as $k_short => $v_short_details)
					{
						$totals[$k_ipid]['grand_total'] += $v_short_details['total'];
						$invoices_ipids[] = $k_ipid;
					}
				}

				$invoices_ipids = array_values(array_unique($invoices_ipids));

				$invoices_details['ipids'] = $invoices_ipids;
				$invoices_details['active_days'] = $active_days;
				$invoices_details['client'] = $c_data;
				$invoices_details['health_insurance'] = $patients_health_insurances;
				$invoices_details['items'] = $totals;
				
				$invoices_details['sapvid'] = $sapvid;
				$invoices_details['admissionid'] = $admissionid;

				$generate_invoices = $this->generate_invoices($invoices_details, $clientid);



				if($generate_invoices)
				{
				    if($redirect){
    					$this->_redirect(APP_BASE . "invoice/healthinsuranceinvoices?list=" . date('Y-m', strtotime($selected_month_details['start'])));
				    } else {
				        return true;
				    }
				} else {
				    return false;
				} 
			}
			else
			{
				return false;
			}
		}

		private function generate_invoices($invoice_details, $clientid)
		{

			$invoices = new HiInvoices();
			$invoice_number_arr = $invoices->get_next_invoice_number($clientid, true);

			$prefix = $invoice_number_arr['prefix'];
			$invoicenumber = $invoice_number_arr['invoicenumber'];


			if($_REQUEST['dbg'])
			{
				print_r($invoice_settings_arr);
				print_r($collective_highest_number);
				print_r($i_number);
				print_r($invoicenumber);
				exit;
			}

			foreach($invoice_details['ipids'] as $k_invoice_ipid => $v_invoice_ipid)
			{
				$invoice_start = date('Y-m-d H:i:s', strtotime($invoice_details['active_days'][$v_invoice_ipid][0]));
				$invoice_end = date('Y-m-d H:i:s', strtotime(end($invoice_details['active_days'][$v_invoice_ipid])));
				$clientid = $invoice_details['client']['clientid'];
				$client_name = $invoice_details['client']['clientteamname'];
				$invoice_total = $invoice_details['items'][$v_invoice_ipid]['grand_total'];

				if($invoice_details['admissionid']){
				    $admissionid = $invoice_details['admissionid'];
				} else{
				    $admissionid = "0'";
				}
				
				if($invoice_details['sapvid']) {
    				$sapvid = $invoice_details['sapvid'];
				} else {
    				$sapvid = "0";
				}
				
				//ISPC - 2365 - for privatepatient, invoice_address is patient info
				if($invoice_details['health_insurance'][$v_invoice_ipid]['privatepatient'])
				{
					$patient_details[$v_invoice_ipid] = $invoice_details['health_insurance'][$v_invoice_ipid]['patient_details'];
					$insurance_address = $patient_details[$v_invoice_ipid]['first_name'] . ' ' . $patient_details[$v_invoice_ipid]['last_name'];
					$insurance_address .= "\n" . $patient_details[$v_invoice_ipid]['street1']; //TODO-2894 Ancuta 07.02.2020 ( changed from  <br /> to \n
					if($patient_details[$v_invoice_ipid]['zip'] != '')
					{
					    $insurance_address .= "\n" . $patient_details[$v_invoice_ipid]['zip'] . ' ' . $patient_details[$v_invoice_ipid]['city'];//TODO-2894 Ancuta 07.02.2020 ( changed from  <br /> to \n
					}
					else
					{
					    $insurance_address .= "\n" . $patient_details[$v_invoice_ipid]['city'];//TODO-2894 Ancuta 07.02.2020 ( changed from  <br /> to \n
					}
					
				}
				elseif($invoice_details['health_insurance'][$v_invoice_ipid]['subdiv_id'] == '3')
				{
					//subdivision here
					$insurance_address = $invoice_details['health_insurance'][$v_invoice_ipid]['name'];

					// provider
					//$insurance_address .= "\n" . $invoice_details['health_insurance'][$v_invoice_ipid]['contact_person'];
					$insurance_address .= "\n" . $invoice_details['health_insurance'][$v_invoice_ipid]['insurance_provider'];
					
					if(!empty($invoice_details['health_insurance'][$v_invoice_ipid]['street1']))
					{
						$insurance_address .= "\n" . $invoice_details['health_insurance'][$v_invoice_ipid]['street1'] . "\n";
					}

					if(!empty($invoice_details['health_insurance'][$v_invoice_ipid]['zip']))
					{
						$insurance_address .= $invoice_details['health_insurance'][$v_invoice_ipid]['zip'];
					}

					if(!empty($invoice_details['health_insurance'][$v_invoice_ipid]['city']))
					{
						$insurance_address .= ' ' . $invoice_details['health_insurance'][$v_invoice_ipid]['city'];
					}
				}
				else
				{
					$insurance_address = $invoice_details['health_insurance'][$v_invoice_ipid]['company_name'];
					
					/* if(!empty($invoice_details['health_insurance'][$v_invoice_ipid]['ins_contactperson']))
					{
						$insurance_address .= "\n" . $invoice_details['health_insurance'][$v_invoice_ipid]['ins_contactperson'];
					} */
					if(!empty($invoice_details['health_insurance'][$v_invoice_ipid]['ins_insurance_provider']))
					{
						$insurance_address .= "\n" . $invoice_details['health_insurance'][$v_invoice_ipid]['ins_insurance_provider'];
					}
					
					if(!empty($invoice_details['health_insurance'][$v_invoice_ipid]['ins_street']))
					{
						$insurance_address .= "\n" . $invoice_details['health_insurance'][$v_invoice_ipid]['ins_street'] . "\n";
					}

					if(!empty($invoice_details['health_insurance'][$v_invoice_ipid]['ins_zip']))
					{
						$insurance_address .= $invoice_details['health_insurance'][$v_invoice_ipid]['ins_zip'];
					}

					if(!empty($invoice_details['health_insurance'][$v_invoice_ipid]['ins_city']))
					{
						$insurance_address .= ' ' . $invoice_details['health_insurance'][$v_invoice_ipid]['ins_city'];
					}


					if(!empty($invoice_details['health_insurance'][$v_invoice_ipid]['ins_country']))
					{
						$insurance_address .= "\n" . $invoice_details['health_insurance'][$v_invoice_ipid]['ins_country'];
					}
				}

				$records[] = array(
					"invoice_start" => $invoice_start,
					"invoice_end" => $invoice_end,
					"ipid" => $v_invoice_ipid,
					"client" => $clientid,
					"prefix" => $prefix,
					"invoice_number" => $invoicenumber,
					"invoice_total" => $invoice_total,
					"paid_date" => '0000-00-00 00:00:00',
					"status" => '1',
					"client_name" => $client_name,
					"address" => $insurance_address,
					"sapvid" => $sapvid,
					"admissionid" => $admissionid,
					"isdelete" => '0'
				);
				$invoicenumber++;
			}
			
			
			//insert many records with one query!!
			$collection = new Doctrine_Collection('HiInvoices');
			$collection->fromArray($records);
			$collection->save();


			//retrive inserted invoices and create its items
			$inserted_ids = $collection->getPrimaryKeys();

			if(count($inserted_ids) > 0)
			{
				$select_inserted = Doctrine_Query::create()
					->select('id, ipid')
					->from('HiInvoices')
					->whereIn('id', $inserted_ids);

				$inserted_invoices = $select_inserted->fetchArray();

				foreach($inserted_invoices as $k_invoice => $v_invoice)
				{
					foreach($invoice_details['items'][$v_invoice['ipid']] as $k_inv => $v_inv)
					{
						if($k_inv != 'grand_total') //skip grand total from items
						{
							$items[] = array(
								'invoice' => $v_invoice['id'],
								'client' => $invoice_details['client']['clientid'],
								'shortcut' => $v_inv['name'],
								'qty' => $v_inv['qty'],
								'price' => $v_inv['price']
							);
						}
					}
				}

				$items_collection = new Doctrine_Collection('HiInvoiceItems');
				$items_collection->fromArray($items);
				$items_collection->save();

				$items_inserted = $items_collection->getPrimaryKeys();
			}

			if($inserted_ids && $items_inserted)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		private function getActivePatients($start_date, $end_date)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$finalipidval = array();

			//get all client ipids non deleted or standby
			$c_patients = Doctrine_Query::create()
				->select("p.ipid")
				->from('PatientMaster p');
			$c_patients->leftJoin("p.EpidIpidMapping e");
			$c_patients->where('e.clientid = ' . $clientid);
			$c_patients->andwhere('p.isdelete = 0 AND p.isstandby = 0 AND p.isstandbydelete = 0');
			$c_patients_res = $c_patients->fetchArray();

			$client_ipids[] = '9999999999999999';
			foreach($c_patients_res as $k_pat_res => $v_pat_res)
			{
				$client_ipids[] = $v_pat_res['ipid'];
			}
			if($_REQUEST['dbga'])
			{
				print_r("Initial ipids\n");
				var_dump($c_patients->getSqlQuery());
				var_dump($client_ipids);
			}

			$actpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 0')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('(date(admission_date) <= "' . date('Y-m-d', strtotime($end_date)) . '")')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere('e.ipid IS NOT NULL AND e.clientid = ' . $logininfo->clientid);
			$actpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$actipidarray = $actpatient->fetchArray();

			foreach($actipidarray as $key => $val)
			{
				$finalipidval[] = $val['ipid'];
			}

			if($_REQUEST['dbga'])
			{
				print_r("#1 ipids\n");
				var_dump($finalipidval);
			}
			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('(date(admission_date) <= "' . date('Y-m-d', strtotime($end_date)) . '")')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere('e.ipid IS NOT NULL AND e.clientid = ' . $logininfo->clientid);
			$patient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$ipidarray = $patient->fetchArray();

			if(is_array($ipidarray) && sizeof($ipidarray) > 0)
			{
				foreach($ipidarray as $key => $val)
				{
					$disipidval .= '"' . $val['ipid'] . '",';
					$disipidarr[] = $val['ipid'];
				}

				$disipidarr[] = '999999';
				$disquery = Doctrine_Query::create()
					->select("*")
					->from('PatientDischarge')
					->where('(date(discharge_date) >= "' . date('Y-m-d', strtotime($start_date)) . '")')
					->andWhereIn('ipid', $disipidarr);

				$disarray = $disquery->fetchArray();

				foreach($disarray as $key => $val)
				{
					$finalipidval[] = $val['ipid'];
				}
			}

			if($_REQUEST['dbga'])
			{
				print_r($disquery->getDQL());
				print_r("\n\n");
				print_r($patient->getDQL());
			}


			$readmission_add = Doctrine_Query::create()
				->select("p.ipid as theipid, p.date AS date_start, id")
				->addSelect("(SELECT r.date FROM PatientReadmission r WHERE r.date_type = 2 and r.date > p.date and p.ipid=r.ipid order by r.date ASC limit 1) AS date_end")
				->from("PatientReadmission p")
				->where('p.date_type = 1')
				->andWhereIn('p.ipid', $client_ipids)
				->having('(((date(date_start) <= "' . date('Y-m-d', strtotime($start_date)) . '") AND (date(date_end) >= "' . date('Y-m-d', strtotime($start_date)) . '")) OR ((date(date_start) >= "' . date('Y-m-d', strtotime($start_date)) . '") AND (date(date_start) < "' . date('Y-m-d', strtotime($end_date)) . '")))')
				->orderBy("theipid asc, date_start, date_end");
			$add_array = $readmission_add->fetchArray(); //get patients that WERE active during time frame and add to final array

			if(sizeof($add_array) > 0)
			{
				foreach($add_array as $add_pat)
				{
					$finalipidval[] = $add_pat['theipid'];
				}
			}
			if($_REQUEST['dbga'])
			{
				print_r($readmission_add->getSqlQuery());
			}

			$finalipidval = array_unique($finalipidval);

			$readmission_del = Doctrine_Query::create()
				->select("p.ipid as theipid, p.date AS date_start, id")
				->addSelect("(SELECT r.date FROM PatientReadmission r WHERE r.date_type = 1 and r.date > p.date and p.ipid=r.ipid order by r.date ASC limit 1) AS date_end")
				->from("PatientReadmission p")
				->where('p.date_type = 2')
				->andWhereIn('p.ipid', $client_ipids)
				->having('(date_start IS NOT NULL AND (date(date_start) < "' . date('Y-m-d', strtotime($start_date)) . '") AND date(date_end) > "' . date('Y-m-d', strtotime($end_date)) . '")')
				->orderBy("theipid asc, date_start, date_end");
			$del_array = $readmission_del->fetchArray(); //get patients that WERE NOT active during time frame and DELETE from final array

			if(sizeof($del_array) > 0)
			{
				foreach($del_array as $del_pat)
				{
					$thekey = array_search($del_pat['theipid'], $finalipidval);
					if($thekey !== false)
					{
						unset($finalipidval[$thekey]);
					}
				}
			}

			if($_REQUEST['show_ipids'] == '1')
			{
				print_r($finalipidval);
				print_r("\n");
				foreach($finalipidval as $k => $ip)
				{
					$ipids_str .= '"' . $ip . '",';
				}
				print_r("\n string: ");
				print_r(substr($ipids_str, 0, -1));
				exit;
			}

			return $finalipidval;
		}

//	Rehnung II
		public function generate_users_invoices($invoice)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$hi_invoices = new HiInvoices();
			$anlage6 = new Anlage6();
			$user = new User();

			$usergroups = new Usergroup();
			$user2adm = new User2admission();
			$user_invoices = new UserInvoices();
			$client = new Client();
			$user_vacation = new UserVacations();
			$vacations_replacemets = new VacationsReplacements();

			$related_users['users'][] = '9999999999999';

			$client_users = $user->getClientsUsers($clientid);

			$invoice_details = $hi_invoices->getHiInvoice($invoice);
			if($invoice_details)
			{
				$ipid = $invoice_details['ipid'];
				$epid = Pms_CommonData::getEpid($ipid);

				$assigned = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid="' . $epid . '"');
				$assigned_users_res = $assigned->fetchArray();
				$assigned_users[] = '9999999999999';
				foreach($assigned_users_res as $key => $value)
				{
					if(in_array($value['userid'], $client_users['ids']))
					{
						$assigned_users[] = $value['userid'];
					}
				}

				if($_REQUEST['dbg'])
				{
					print_r("Assigned Users\n");
					print_r($assigned_users);
				}




				/* ----------------------- 1. Patient period days-------------------------- */
				$selected_month_details['start'] = date('Y-m-d', strtotime($invoice_details['invoice_start']));
				$selected_month_details['end'] = date('Y-m-d', strtotime($invoice_details['invoice_end']));

				$period_days_array = $patientmaster->getDaysInBetween($selected_month_details['start'], $selected_month_details['end'], "Y-m");

				if($_REQUEST['dbg'])
				{
					print_r("\n 1. Invoice Period  Days \n\n");
					print_r($period_days_array);
				}
				/* ----------------------- 3. Get patient sapv data in invoice period -------------------------- */

				$dropSapv = Doctrine_Query::create()
					->select('*')
					->from('SapvVerordnung')
					->whereIn('ipid', array($ipid))
					->andWhere('verordnungam != "0000-00-00 00:00:00"')
					->andWhere('verordnungbis != "0000-00-00 00:00:00"')
					->andWhere('isdelete=0')
					->andWhere('status != 1 ')
					->orderBy('verordnungam ASC');
				$droparray = $dropSapv->fetchArray();

				$all_sapv_days = array();
				$temp_sapv_days = array();

				foreach($droparray as $k_sapv => $v_sapv)
				{
					if(count($all_sapv_days[$v_sapv['ipid']]) == 0)
					{
						$all_sapv_days[$v_sapv['ipid']] = array();
					}

					$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
					$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));


					$temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

					$all_sapv_days[$v_sapv['ipid']] = array_intersect($period_days_array, array_merge($all_sapv_days[$v_sapv['ipid']], $temp_sapv_days[$v_sapv['ipid']]));
				}


				if($_REQUEST['dbg'])
				{
					print_r("\n patient sapv days \n");
					print_r($all_sapv_days);
					print_r("\n");
				}



				##############################################################
				###################### Client settings #######################
				##############################################################
				$conditions['periods'] = array('0' => array('start' => "2008-01-01", 'end' => date("Y-m-d")));
				$conditions['client'] = $clientid;
				$conditions['ipids'] = array($ipid);
				$patient_days = Pms_CommonData::patients_days($conditions);

				// all active days of patient including hospital and hospiz
				$patient_real_active_days = $patient_days[$ipid]['real_active_days'];
				foreach($patient_real_active_days as $k_ractive => $v_ractive)
				{
					if(in_array(date('Y-m-d', strtotime($v_ractive)), $period_days_array))
					{
						$patient[$ipid]['active_days_in_period'][$k_ractive] = date('Y-m-d', strtotime($v_ractive));
					}
					if(in_array(date('Y-m-d', strtotime($v_ractive)), $period_days_array) && in_array(date('Y-m-d', strtotime($v_ractive)), $all_sapv_days[$ipid]))
					{
						$patient[$ipid]['doc_active_days'][$k_ractive] = date('Y-m-d', strtotime($v_ractive));
					}
				}



				// hospital days according to  client settings
				$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
				foreach($hospital_days_cs as $k_hospital_cs => $v_hospital_cs)
				{
					if(in_array(date('Y-m-d', strtotime($v_hospital_cs)), $period_days_array))
					{
						$patient[$ipid]['hospital_days_cs'][$k_hospital_cs] = date('Y-m-d', strtotime($v_hospital_cs));
					}
				}


				// hospiz days according to  client settings
				$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];
				foreach($hospiz_days_cs as $k_hospiz_cs => $v_hospiz_cs)
				{
					if(in_array(date('Y-m-d', strtotime($v_hospiz_cs)), $period_days_array))
					{
						$patient[$ipid]['hospiz_days_cs'][$k_hospiz_cs] = date('Y-m-d', strtotime($v_hospiz_cs));
					}
				}


				// hospiz days - overall hopsiz days of patient - no client settings
				$hospiz_days = $patient_days[$ipid]['hospiz']['real_days'];
				foreach($hospiz_days as $k_hospiz => $v_hospiz)
				{
					$patient[$ipid]['overall_hospiz_days'][$k_hospiz] = date('Y-m-d', strtotime($v_hospiz));
				}


				// active days of patient according to client settings: no hospital, no hospiz
				$patient_cycle_days_cs = $patient_days[$ipid]['treatment_days'];
				foreach($patient_cycle_days_cs as $k_pat_cycle_cs => $v_pat_cycle_cs)
				{
					if(in_array(date('Y-m-d', strtotime($v_pat_cycle_cs)), $period_days_array))
					{
						$patient[$ipid]['active_days_cs'][$k_pat_cycle_cs] = date('Y-m-d', strtotime($v_pat_cycle_cs));
					}
					if(in_array(date('Y-m-d', strtotime($v_pat_cycle_cs)), $period_days_array) && in_array(date('Y-m-d', strtotime($v_pat_cycle_cs)), $all_sapv_days[$ipid]))
					{
						$patient[$ipid]['active_days_cs_sapv'][$k_pat_cycle_cs] = date('Y-m-d', strtotime($v_pat_cycle_cs));
					}
				}


				// admission days of patient
				foreach($patient_days[$ipid]['active_periods'] as $per => $dper)
				{
					$patient[$ipid]['admission_dates'][] = date('Y-m-d', strtotime($dper['start']));
				}
				if($_REQUEST['dbg'])
				{
					print_r("\n patient cs \n");
					print_r($patient);
					print_r("\n");
				}


				/* ------------------------ 2. Get patients active days in selected period for all ipids + 3. get admissions ----------------------- */
				$patient_treated_periods = $patientmaster->getTreatedDaysRealMultiple(array($ipid));

				//	check if patient has anlage6 saved!
				$anlage6_res = $anlage6->get_anlage_shortcut($ipid, $selected_month_details['start'], 'e');

				if($_REQUEST['dbg'])
				{
					print_r("\n 3. Anlage6\n");
					print_r($anlage6_res);
				}

				foreach($anlage6_res as $k_anlage6 => $v_anlage6)
				{
					$anlage6_arr[$v_anlage6['ipid']][date('Y-m-d', strtotime($v_anlage6['date']))] = $v_anlage6;
				}

				if($_REQUEST['dbg'])
				{
					print_r($patient_treated_periods);
				}

				foreach($patient_treated_periods as $period_ipid => $period_details)
				{
					$active_days[$period_ipid] = array();
					$admission_dates[$period_ipid] = array();
					$discharge_dates_arr[$period_ipid] = array();
					if(!empty($period_details['admissionDates']))
					{
						foreach($period_details['admissionDates'] as $key_adm => $v_adm)
						{
							if(!empty($period_details['dischargeDates'][$key_adm]['date']))
							{
								$start_with_discharge = date('Y-m-d', strtotime($period_details['admissionDates'][$key_adm]['date']));
								$end_with_discharge = date('Y-m-d', strtotime($period_details['dischargeDates'][$key_adm]['date']));

								$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
								$discharge_dates_arr[$period_ipid][] = $end_with_discharge;
								//discharge date is active!
								$active_days[$period_ipid][] = date('Y-m-d', strtotime($end));
							}
							else
							{
								$start_without_discharge = date('Y-m-d', strtotime($period_details['admissionDates'][$key_adm]['date']));
								if(!empty($period_details['discharge_date']))
								{
									$end_without_discharge = date('Y-m-d', strtotime($period_details['discharge_date']));
								}
								else
								{
									$end_without_discharge = date('Y-m-d', time());
								}
								$discharge_dates_arr[$period_ipid][] = $end_without_discharge;
								$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
							}

							if(empty($anlage6_arr[$period_ipid]))
							{
								//admission
								$a1start_formated = date('Y-m-d', strtotime($v_adm['date']));
								$a1start = strtotime(date('Y-m-d', strtotime($v_adm['date'])));
								$a1end = strtotime(date('Y-m-d', strtotime($v_adm['date'])));

								//selected period
								$p1start = strtotime($selected_month_details['start']);
								$p1end = strtotime($selected_month_details['end']);

								if(Pms_CommonData::isintersected($a1start, $a1end, $p1start, $p1end))
								{
									$admission_dates[$period_ipid][$a1start_formated]['value'] = '1';
									$admission_dates[$period_ipid][$a1start_formated]['userid'] = $v_adm['create_user'];
									$admission_dates[$period_ipid][$a1start_formated]['date'] = $v_adm['date'];
									if(in_array($v_adm['create_user'], $client_users['ids']))
									{
										$related_users['users'][] = $v_adm['create_user'];
									}
								}
							}
							else
							{
								$admission_dates[$period_ipid] = $anlage6_arr[$period_ipid];
							}
						}
					}
					else
					{
						$cycle_start_period = date('Y-m-d', strtotime($period_details['admission_date']));

						if(empty($period_details['discharge_date']))
						{

							$cycle_end_period = date('Y-m-d', time());
						}
						else
						{
							$cycle_end_period = date('Y-m-d', strtotime($period_details['discharge_date']));
						}


						$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));

						$active_days[$period_ipid][] = $cycle_end_period;
						$discharge_dates_arr[$period_ipid][] = $cycle_end_period;

						if(empty($anlage6_arr[$period_ipid]))
						{

							//admission
							$a2start = strtotime($cycle_start_period);
							$a2end = strtotime(date('Y-m-d', strtotime($cycle_start_period)));

							//selected period
							$p2start = strtotime($selected_month_details['start']);
							$p2end = strtotime($selected_month_details['end']);

							if(Pms_CommonData::isintersected($a2start, $a2end, $p2start, $p2end))
							{
								$admission_dates[$period_ipid][date('Y-m-d', strtotime($cycle_start_period))]['value'] = '1';
							}
						}
						else
						{
							$admission_dates[$period_ipid] = $anlage6_arr[$period_ipid];
						}
					}

					$active_days[$period_ipid] = array_values(array_intersect($period_days_array, $active_days[$period_ipid]));
				}

// 				print_r($admission_dates); exit;


				if($_REQUEST['dbg'])
				{
					print_r("\n4. Active Days\n\n");
					print_r($active_days);

					print_r("\n5. Admission Dates \n\n");
					print_r($admission_dates);
					print_r("\n5.x. Discharge Dates \n\n");
					print_r($discharge_dates_arr);
				}

				/* ------------------------- 4. Get hospital and hospiz and remove from active days of selected month ----------------------------- */
				$disallowed_location_types = array('1', '2'); //hospital and hospiz
				
				//ISPC-2612 Ancuta 27.06.2020 Locx
				/*
				$hospitalids = Doctrine_Query::create()
					->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
					->from('Locations')
					->where('isdelete = 0')
					->andWhere('client_id ="' . $clientid . '"')
					->andWhereIn('location_type', $disallowed_location_types);
				$hosparray = $hospitalids->fetchArray();
				*/
				
				$loc_obj = new Locations();
				$hosparray = $loc_obj->get_locationByClientAndTypes($clientid,$disallowed_location_types);
				
				
				$hospital_ids[] = '999999999';
				foreach($hosparray as $hospital)
				{
					$hospital_ids[] = $hospital['id'];
					$location_types[$hospital['location_type']][] = $hospital['id'];
				}

				//get patient hospital locations if it has
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->whereIn('ipid', array($ipid))
					->andWhere('isdelete="0"')
					->andWhereIn('location_id', $hospital_ids)
					->orderBy('valid_from,id ASC');
				$pat_locations_res = $patloc->fetchArray();

				//get patient all locations
				$patloc_all = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->whereIn('ipid', array($ipid))
					->andWhere('isdelete="0"')
					->orderBy('valid_from,id ASC');
				$pat_locations_res_all = $patloc_all->fetchArray();



				foreach($pat_locations_res as $k_pat_loc => $v_pat_loc)
				{
					$patients_locations[$v_pat_loc['ipid']][] = $v_pat_loc;

					if(in_array($v_pat_loc['location_id'], $location_types['2']))
					{
						$hospiz_locations[$v_pat_loc['ipid']][$v_pat_loc['id']] = $v_pat_loc;


						$h_location_start[$v_pat_loc['ipid']] = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
						$hospiz_heads[$v_pat_loc['ipid']]['start'][] = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
						$hospiz_heads[$v_pat_loc['ipid']]['end'][] = date('Y-m-d', strtotime($v_pat_loc['valid_till']));


						if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
						{
							$till = date('Y-m-d', strtotime('+1 day'));
						}
						else
						{
							$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
						}

						$hospiz_days_arr = $patientmaster->getDaysInBetween($h_location_start[$v_pat_loc['ipid']], $till);
						if(count($hospiz_days[$v_pat_loc['ipid']]) == '0')
						{
							$hospiz_days[$v_pat_loc['ipid']] = array();
						}
						$hospiz_days[$v_pat_loc['ipid']] = array_merge($hospiz_days[$v_pat_loc['ipid']], $hospiz_days_arr);
					}
				}

				$hospiz_days_array = $hospiz_days;
				foreach($admission_dates_arr as $k_admission_d => $v_admission_d)
				{
					if(!in_array($v_admission_d, $hospiz_heads['start']))
					{
						//remove hospiz head from hospiz days array if is not == admission day
						$start_day_key = array_search($v_admission_d, $hospiz_days_array);
						if(is_numeric($start_day_key))
						{
							unset($hospiz_days_array[$start_day_key]);
						}
					}
				}

				foreach($discharge_dates_arr as $k_discharge_d => $v_discharge_d)
				{
					if(!in_array($v_discharge_d, $hospiz_heads['end']))
					{
						//remove hospiz head from hospiz days array if is not == discharge day
						$end_day_key = array_search($v_discharge_d, $hospiz_days_array);
						if(is_numeric($end_day_key))
						{
							unset($hospiz_days_array[$end_day_key]);
						}
					}
				}

				if($_REQUEST['dbg'])
				{
					print_r($hospiz_heads);
					print_r($hospiz_days);
					print_r($hospiz_days_array);
				}

				$hospital_days = array();
				$hosp = array();

				foreach($patients_locations as $ipid_patient => $pat_locations)
				{
					$hospital_days[$ipid_patient] = array();
					foreach($pat_locations as $k_pat_loc => $v_pat_loc)
					{

						if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
						{
							$till = date('Y-m-d', strtotime('+1 day'));
						}
						else
						{
							$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
						}

						$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
						$r1end = strtotime(date('Y-m-d', strtotime($till)));
						$r2start = strtotime($selected_month_details['start']);
						$r2end = strtotime($selected_month_details['end']);

						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
						{
							$hosp = array();
							$period_hosp_locations[] = $v_pat_loc;
							$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

							$hosp = $patientmaster->getDaysInBetween($location_start, $till);

							$hospital_days[$ipid_patient] = array_merge($hospital_days[$ipid_patient], $hosp);
						}

						//find hosp heads
						$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
						$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
						$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));

						//remove end head
						if($end_hospital_period != $next_start_hosp)
						{
							$find = array_search($end_hospital_period_formatted, $hospital_days[$ipid_patient]);
							$removed_days['e'][] = $hospital_days[$ipid_patient][$find];
							unset($hospital_days[$ipid_patient][$find]);
						}

						//remove start head
						if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
						{
							$start_hospital_formatted = '';
							$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
							$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
							$start_hospital_period = $r1start;
							$start_hospital_formatted = date('Y-m-d', $r1start);

							if($start_hospital_period != $previous_till)
							{
								$find_s = array_search($start_hospital_formatted, $hospital_days[$ipid_patient]);
								if($find_s !== false)
								{
									$removed_days['s'][] = $hospital_days[$ipid_patient][$find_s];
									unset($hospital_days[$ipid_patient][$find_s]);
								}
							}
						}
						else
						{
							$find_n = '';
							$start_hospital_formatted = date('Y-m-d', $r1start);
							$find_n = array_search($start_hospital_formatted, $hospital_days[$ipid_patient]);
							if($find_n !== false)
							{
								$removed_days['s2'][] = $hospital_days[$ipid_patient][$find_n];
								unset($hospital_days[$ipid_patient][$find_n]);
							}
						}
					}

					$patients_hospital_days[$ipid_patient] = array_intersect($period_days_array, $hospital_days[$ipid_patient]);
				}
				if($_REQUEST['dbg'])
				{
					print_r("\nHospital Days\n");
					print_r($patients_hospital_days);
				}



				/* ------------------------------------------ 5. Get price list(s) for selected month --------------------------------------------- */
				$shortcuts = Pms_CommonData::get_prices_shortcuts();

				$this->view->shortcuts_admission = $shortcuts['admission'];
				$this->view->shortcuts_daily = $shortcuts['daily'];
				$this->view->shortcuts_visits = $shortcuts['visits'];
				$this->view->used_shortcuts = array('E', 'EH', 'B', 'P1', 'P2', 'P3', 'A1', 'A2');


				$p_list = new PriceList();
				$master_price_list = $p_list->get_period_price_list($selected_month_details['start'], $selected_month_details['end']);


				//get client users
				//get all related users details
				$master_groups_first = array('4', '5');

				$client_user_groups_first = $usergroups->getUserGroups($master_groups_first);

				foreach($client_user_groups_first as $k_group_f => $v_group_f)
				{
					$client_groups[] = $v_group_f['id'];
					$master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
				}



				$nurse_users_first = array();
				$doctor_users_first = array();
				foreach($client_users as $k_cuser_det => $v_cuser_det)
				{
					$master_user_details[$v_cuser_det['id']] = $v_cuser_det;
					if(in_array($v_cuser_det['groupid'], $master2client['5']))
					{
						$nurse_users_first[] = $v_cuser_det['id'];
					}
					else if(in_array($v_cuser_det['groupid'], $master2client['4']))
					{
						$doctor_users_first[] = $v_cuser_det['id'];
					}
				}



				/* ------------------------------------------ Get  patient approved visits types for the selected month --------------------------------------------- */
				$default_pavt = Pms_CommonData::default_approved_visit_type(); // if nothing saved -> get default
				$pavt_mod = new PatientApprovedVisitTypes();
				$existing_pavt_array = $pavt_mod->patients_approved_visits_overall($ipid);
				$pavt_array = $pavt_mod->patients_approved_visits_in_period($ipid, $selected_month_details['start'], $selected_month_details['end']);


				if(!$existing_pavt_array[$ipid])
				{
					$pavt_array[$ipid][0]['ipid'] = $ipid;
					$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
					$pavt_array[$ipid][0]['start_date'] = date('d.m.Y', strtotime($selected_month_details['start'])); // start period
					$pavt_array[$ipid][0]['end_date'] = date('d.m.Y', strtotime($selected_month_details['end'])); // end period
					$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
				}


				$x = 0;

				foreach($pavt_array as $p_ipid => $pavtvalue)
				{
					foreach($pavtvalue as $k => $tv)
					{
						$pavt[$tv['ipid']][$x]['visit_type'] = $tv['visit_type'];
						$pavt[$tv['ipid']][$x]['start_date'] = $tv['start_date'];

						if(empty($tv['end_date']) || $tv['end_date'] == "0000-00-00 00:00:00")
						{
							$pavt[$tv['ipid']][$x]['end_date'] = date('Y-m-d H:i:s');
						}
						else
						{
							$pavt[$tv['ipid']][$x]['end_date'] = $tv['end_date'];
						}

						$pavt_days[$tv['ipid']][$tv['visit_type']] = $patientmaster->getDaysInBetween(date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['start_date'])), date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['end_date'])));


						if(empty($patient_vists_type_int[$tv['ipid']][$tv['visit_type']]))
						{
							$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array();
						}
						$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array_merge($patient_vists_type_int[$tv['ipid']][$tv['visit_type']], $pavt_days[$tv['ipid']][$tv['visit_type']]);

						$x++;
					}
				}

				/* ----------------------- 6. Get doctor and nurse visits for all ipids but exclude verlauf deleted -------------------------- */

//			7.1get verlauf deleted visits
//			get nurse visits from verlauf deleted
				$nurse_from_course = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->where('ipid ="' . $ipid . '" ')
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
					->andWhere("wrong = 1")
					->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form'")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$nurse_v = $nurse_from_course->fetchArray();

				$deleted_nurse_visits[] = '9999999999999999';
				foreach($nurse_v as $k_nurse_k => $v_nurse_v)
				{
					$deleted_nurse_visits[] = $v_nurse_v['recordid'];
				}

//			get doctor visits from verlauf deleted
				$doc_from_course = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->where('ipid ="' . $ipid . '" ')
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
					->andWhere("wrong = 1")
					->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$doc_v = $doc_from_course->fetchArray();

				$deleted_doctor_visits[] = '99999999999999999';
				foreach($doc_v as $k_doc_v => $v_doc_v)
				{
					$deleted_doctor_visits[] = $v_doc_v['recordid'];
				}

//			7.2 get visits
				//these defined shortcuts have tstart and tend
				$nurse_visit_shortcuts = array("P1", "P2", "P3");
				$doctor_visit_shortcuts = array("A1", "A2");

				

				//get curent contact forms
				$contact_forms = array();
				$contact_forms = $this->get_patients_contact_forms(array($ipid), false, true,false,false);
				$doctor_contact_forms = array();
				$nurse_contact_forms = array();
				
				foreach($contact_forms as $kcf => $day_cfs)
				{
					foreach($day_cfs as $k_dcf => $v_dcf)
					{
						if(in_array($v_dcf['create_user'], $doctor_users_first) || in_array($v_dcf['change_user'], $doctor_users_first))
						{
							$doctor_contact_forms[] = $v_dcf;
						}
				
						if(in_array($v_dcf['create_user'], $nurse_users_first) || in_array($v_dcf['change_user'], $nurse_users_first))
						{
							$nurse_contact_forms[] = $v_dcf;
						}
					}
				}
				

				/*				 * * NURSE VISITS ** */
				$knurse_visits = Doctrine_Query::create()
					->select("*")
					->from("KvnoNurse")
					->where('ipid ="' . $ipid . '" ')
					->andWhereNotIn('id', $deleted_nurse_visits)
					->andWhere('DATE(vizit_date) BETWEEN DATE("' . $selected_month_details['start'] . '") AND DATE("' . $selected_month_details['end'] . '")')
					->andWhere('isdelete ="0"')
					->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
				$kvno_nurse_visits = $knurse_visits->fetchArray();

				
				/* --------------------------------- Get nurse visits (contactform) --------------------------------------------------- */
				foreach($nurse_contact_forms as $k_nurse_cf => $v_nurse_cf)
				{
					$nurse_visit_date_cf = date('Y-m-d', strtotime($v_nurse_cf['billable_date']));
					$nurse_visit_date_cf_alt = date('d.m.Y', strtotime($v_nurse_cf['billable_date']));
					$cf_nurse_visit = array();
					$visit_type = '';
					$duration = $v_nurse_cf['visit_duration'];
				
					//nurse contact form source
					$v_nurse_cf['source'] = 'nurse_cf';
					$v_nurse_cf['duration'] = $duration;
					$v_nurse_cf['vizit_date'] = $v_nurse_cf['billable_date'];
				
					$kvno_nurse_visits[] = $v_nurse_cf;
				}
				
				if($_REQUEST['dbg'])
				{
					print_r(" \n Nurse visits (BF+CF)  \n ");
					print_r($kvno_nurse_visits);
				}

				foreach($kvno_nurse_visits as $k_n_visit => $v_n_visit)
				{
					$vizit_duration = '0';
					$vizit_date = date('Y-m-d', strtotime($v_n_visit['start_date']));
					$vizit_duration = Pms_CommonData::calculate_visit_duration(date('H', strtotime($v_n_visit['start_date'])), date('H', strtotime($v_n_visit['end_date'])), date('i', strtotime($v_n_visit['start_date'])), date('i', strtotime($v_n_visit['end_date'])), $v_n_visit['start_date']);

					$user_visits['nurse'][$v_n_visit['create_user']][$v_n_visit['id']]['date'] = $vizit_date;
					$user_visits['nurse'][$v_n_visit['create_user']][$v_n_visit['id']]['duration'] = $vizit_duration;

					if(in_array($v_n_visit['create_user'], $client_users['ids']))
					{
						$related_users['users'][] = $v_n_visit['create_user'];
						$related_users['nurse_visits'][$v_n_visit['create_user']][] = '1';
					}



					if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p3']))
					{
						foreach($nurse_visit_shortcuts as $k_shortcut_nurse => $v_shortcut_nurse)
						{
							$shortcut = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['shortcut'];

							if(
								$vizit_duration >= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_end'] && in_array($vizit_date, $patient[$v_n_visit['ipid']]['active_days_cs_sapv']) && in_array($v_n_visit['create_user'], $nurse_users_first)
							)
							{

								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
							}
							else
							{
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
							}
						}
					}
					else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p2']))
					{

						if(
							(($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end']) ) && in_array($vizit_date, $patient[$v_n_visit['ipid']]['active_days_cs_sapv']) && in_array($v_n_visit['create_user'], $nurse_users_first)
						)
						{
							$shortcut = "P2";

							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = "P2";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]["P2"]['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]["P2"]['price'];
						}
						else
						{
							$shortcut = "P2";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P2';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P2']['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
						}


						if(
							$vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end'] && in_array($vizit_date, $patient[$v_n_visit['ipid']]['active_days_cs_sapv']) && in_array($v_n_visit['create_user'], $nurse_users_first)
						)
						{
							$shortcut = "P1";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]['P1']['price'];
						}
						else
						{
							$shortcut = "P1";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
						}
					}
					else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p1']))
					{

						if(
							(($vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end'])) && in_array($vizit_date, $patient[$v_n_visit['ipid']]['active_days_cs_sapv']) && in_array($v_n_visit['create_user'], $nurse_users_first)
						)
						{
							$shortcut = "P1";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = "P1";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]["P1"]['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]["P1"]['price'];
						}
						else
						{
							$shortcut = "P1";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
						}
					}
				}

				/*				 * * DOCTOR VISITS ** */
				$kdoctor_visits = Doctrine_Query::create()
					->select("*")
					->from("KvnoDoctor")
					->where('ipid ="' . $ipid . '" ')
					->andWhereNotIn('id', $deleted_doctor_visits)
					->andWhere('DATE(vizit_date) BETWEEN DATE("' . $selected_month_details['start'] . '") AND DATE("' . $selected_month_details['end'] . '")')
					->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
				$kvno_doctor_visits = $kdoctor_visits->fetchArray();

				/* --------------------------------- Get doctor visits (contactform) -------------------------------------------------- */
				foreach($doctor_contact_forms as $k_doc_cf => $v_doc_cf)
				{
					$doctor_visit_date_cf = date('Y-m-d', strtotime($v_doc_cf['billable_date']));
					$duration = $v_doc_cf['visit_duration'];
					$visit_type = '';
				
					//source doctor contactform
					$v_doc_cf['source'] = 'doctor_cf';
					$v_doc_cf['duration'] = $duration;
					$v_doc_cf['vizit_date'] = $v_doc_cf['billable_date'];
				
					$kvno_doctor_visits[] = $v_doc_cf;
				}
				
				
				if($_REQUEST['dbg'])
				{
					print_r("Doctor visits (BF+CF)");
					print_r($kvno_doctor_visits);
				}

				foreach($kvno_doctor_visits as $k_d_visit => $v_d_visit)
				{
					$visit_duration = '0';
					$visit_date = date('Y-m-d', strtotime($v_d_visit['vizit_date']));
					$visit_duration = Pms_CommonData::calculate_visit_duration(str_pad($v_d_visit['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_m'], 2, "0", STR_PAD_LEFT), $v_d_visit['vizit_date']);

					if(in_array($v_n_visit['create_user'], $client_users['ids']))
					{
						$related_users['users'][] = $v_d_visit['create_user'];
						$related_users['doctor_visits'][$v_d_visit['create_user']][] = '1';
					}

					foreach($doctor_visit_shortcuts as $k_shortcut_doctor => $v_shortcut_doctor)
					{
						$shortcut = $master_price_list[$visit_date][0][$v_shortcut_doctor]['shortcut'];

						if(
							$visit_duration >= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_start'] && $visit_duration <= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_end'] && in_array($visit_date, $patient[$ipid]['doc_active_days']) && in_array($v_d_visit['create_user'], $doctor_users_first)
						)
						{
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
						}
						else
						{
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
						}
					}
				}



				//merge assigned users with involved users(nurse/doctor visits and admitted by)
				$related_users['users'] = array_merge($related_users['users'], $assigned_users);
				$related_users['users'] = array_unique($related_users['users']);
				asort($related_users['users']);
				$related_users['users'] = array_values($related_users['users']);
				ksort($related_users['doctor_visits']);
				ksort($related_users['nurse_visits']);


				/* ----------------------- 7. Get users duty rooster in invoice period for all related users -------------------------- */

				$docid = Doctrine_Query::create()
					->select('*')
					->from('Roster')
					->where('clientid = ' . $clientid)
					->andWhere('DATE("' . date('Y-m-d', strtotime($selected_month_details['start'])) . '") <= DATE(`shiftEndTime`) AND DATE("' . date('Y-m-d', strtotime($selected_month_details['end'])) . '") >= DATE(`shiftStartTime`)')
					->andWhere('isdelete = "0"');

				$dutyes = $docid->fetchArray();


				$patient_duty_users[] = '9999999999999';
				foreach($dutyes as $k_u_duty => $v_u_duty)
				{
					$patient_duty_users[] = $v_u_duty['userid'];
					if($v_u_duty['shiftStartTime'] != '0000-00-00 00:00:00' && $v_u_duty['shiftEndTime'] != '0000-00-00 00:00:00')
					{
						if(count($user_duty_patient_active_days[$v_u_duty['userid']]) == 0)
						{
							$user_duty_patient_active_days[$v_u_duty['userid']] = array();
						}

						$duty_start = date('Y-m-d', strtotime($v_u_duty['shiftStartTime']));
						$duty_end = date('Y-m-d', strtotime($v_u_duty['shiftEndTime']));

						$user_duty_patient_active_days[$v_u_duty['userid']] = array_merge($user_duty_patient_active_days[$v_u_duty['userid']], $patientmaster->getDaysInBetween($duty_start, $duty_end));
					}
					else
					{
						$user_duty_patient_active_days[$v_u_duty['userid']][] = $v_u_duty['duty_date'];
					}

					$user_duty_patient_active_days[$v_u_duty['userid']] = array_intersect($user_duty_patient_active_days[$v_u_duty['userid']], $patient[$ipid]['active_days_cs_sapv']);
					$user_duty_patient_active_days[$v_u_duty['userid']] = array_values($user_duty_patient_active_days[$v_u_duty['userid']]);
				}


				$patient_duty_users = array_values(array_unique($patient_duty_users));

				if($_REQUEST['dbg'])
				{
					print_r("Dutyes");
					print_r($dutyes);
					print_r("Patient Duty Users");
					print_r($patient_duty_users);
				}
				//merge related users with duty users which had duty in patient active day
				$related_users['users'] = array_merge($related_users['users'], $patient_duty_users);

				/* ----------------------- 8. User vacation replacements -------------------------- */
				$users_vacations_array = $user_vacation->get_users_vacations($selected_month_details['start'], $selected_month_details['end'], $related_users['users']);
				if($_REQUEST['dbg'])
				{
					print_r("USERS VACATION \n");
					print_r($users_vacations_array);
				}

				foreach($users_vacations_array as $k_vacation => $v_vacation)
				{
					$u_vacations[$v_vacation['userid']][] = $v_vacation['id'];
					$vacations_details[$v_vacation['id']] = $v_vacation;
				}
				if($_REQUEST['dbg'])
				{
					print_r("V2");
					print_r($u_vacations);
				}

				foreach($u_vacations as $k_u_vacation => $v_u_vacation)
				{
					foreach($v_u_vacation as $k_u_v => $v_u_v)
					{
						//vacation with replacement
						$ret_vacations[$v_u_v] = $vacations_replacemets->get_user_vacation_replacements($k_u_vacation, $v_u_v, $ipid);

						if($ret_vacations[$v_u_v])
						{
							$start_vacation = date('Y-m-d', strtotime($vacations_details[$v_u_v]['start']));
							$end_vacation = date('Y-m-d', strtotime($vacations_details[$v_u_v]['end']));

							if(count($user_vacation_days[$vacations_details[$v_u_v]['userid']]) == 0)
							{
								$user_vacation_days[$vacations_details[$v_u_v]['userid']] = array();
							}

							if(count($days_per_vacation[$vacations_details[$v_u_v]['id']]) == 0)
							{
								$days_per_vacation[$vacations_details[$v_u_v]['id']] = array();
							}



							$days_per_vacation[$vacations_details[$v_u_v]['id']] = array_merge($days_per_vacation[$vacations_details[$v_u_v]['id']], $patientmaster->getDaysInBetween($start_vacation, $end_vacation));

							$user_vacation_days[$vacations_details[$v_u_v]['userid']] = array_merge($user_vacation_days[$vacations_details[$v_u_v]['userid']], $patientmaster->getDaysInBetween($start_vacation, $end_vacation));
							$vacation_u_replacements[$v_u_v] = $ret_vacations[$v_u_v][0]['replacement'];
						}
						else
						{
							$start_vacation = date('Y-m-d', strtotime($vacations_details[$v_u_v]['start']));
							$end_vacation = date('Y-m-d', strtotime($vacations_details[$v_u_v]['end']));
							//vacation without replacements

							if(count($vacation_without_replacement[$vacations_details[$v_u_v]['userid']]) == 0)
							{
								$vacation_without_replacement[$vacations_details[$v_u_v]['userid']] = array();
							}
							$vacation_without_replacement[$vacations_details[$v_u_v]['userid']] = array_merge($vacation_without_replacement[$vacations_details[$v_u_v]['userid']], $patientmaster->getDaysInBetween($start_vacation, $end_vacation));
						}
					}
				}

				foreach($days_per_vacation as $k_vacation_id => $v_vacation_days)
				{
					foreach($v_vacation_days as $k_vacation_day => $v_vacation_day)
					{
						$vacation2days[$v_vacation_day] = $k_vacation_id;
						$vacation2replacement[$vacations_details[$k_vacation_id]['userid']][$v_vacation_day] = $vacation_u_replacements[$k_vacation_id];
					}
				}
				if($_REQUEST['dbg'])
				{
					print_r("VACATION DETAILS\n");
					print_r($vacations_details);

					print_r("VACATION DAYS\n");
					print_r($user_vacation_days);

					print_r("DAYS per vacation\n");
					print_r($days_per_vacation);

					print_r("Vacation 2 DAYS\n");
					print_r($vacation2days);

					print_r("Vacation 2 Replacement\n");
					print_r($vacation2replacement);

					print_r("Vacation Without Replacement\n");
					print_r($vacation_without_replacement);

					print_r("REPLACEMETNS\n");
					print_r($vacation_u_replacements);

					print_r("\nRelated users \n");
					print_r($related_users);
				}

				//get all related users details
				$master_groups = array('4', '5');

				$client_user_groups = $usergroups->getUserGroups($master_groups);

				foreach($client_user_groups as $k_group => $v_group)
				{
					$client_groups[] = $v_group['id'];
					$master2client[$v_group['groupmaster']][] = $v_group['id'];
				}

				if($_REQUEST['dbg'])
				{
					print_r("Client User Groups\n");
					print_r($client_user_groups);
					print_r($master2client);
				}
				$users_details_arr = $user->getMultipleUserDetails($related_users['users']);

				$doctor_users = array();
				foreach($users_details_arr as $k_user_det => $v_user_det)
				{
					$master_user_details[$v_user_det['id']] = $v_user_det;
					if(in_array($v_user_det['groupid'], $master2client['5']))
					{
						$nurse_users[] = $v_user_det['id'];
					}
					else if(in_array($v_user_det['groupid'], $master2client['4']))
					{
						$doctor_users[] = $v_user_det['id'];
					}
				}
				if($_REQUEST['dbg'])
				{
					print_r("Doctor Users\n");
					print_r($doctor_users);

					print_r("Nurse Users\n");
					print_r($nurse_users);
				}

				$related_users['users'] = array_unique($related_users['users']);



				/* ----------------------- 9. Get B shortcuts for all related users -------------------------- */
				//returns [userid] [day] = [patients_involved]
				$users_occupation_degree = $this->users_occupation_degee($related_users['users'], $ipid, $selected_month_details['start'], $selected_month_details['end'], $patient[$ipid]['active_days_cs_sapv']);
// 				$users_occupation_degree = $this->users_occupation_degee($related_users['users'], $ipid, $selected_month_details['start'], $selected_month_details['end'], $real_active_days[$ipid]);

				if($_REQUEST['dbg'])
				{
					print_r("Users Ocupattion degree");
					print_r($users_occupation_degree);
				}

				foreach($users_occupation_degree as $k_degree_date => $v_degree_users)
				{
					foreach($v_degree_users as $v_degree_user => $user_ipids)
					{
						if(
							in_array($v_degree_user, $doctor_users) && !in_array($k_degree_date, $vacation_without_replacement[$v_degree_user]) && in_array($k_degree_date, $patient[$ipid]['active_days_cs_sapv'])
						)
						{
							$price_type = 'doctor';

							$shortcut_b = '';

							$active_day_patients = count($user_ipids);
							if($active_day_patients > '0' && $active_day_patients <= '5')
							{
								$shortcut_b = 'B0';
							}
							elseif($active_day_patients >= '6' && $active_day_patients <= '10')
							{
								$shortcut_b = 'B5';
							}
							elseif($active_day_patients > '10')
							{
								$shortcut_b = 'B10';
							}
							if($_REQUEST['dbg'])
							{
								print_r("Is replaced? ");
								var_dump(in_array($k_degree_date, $user_vacation_days[$v_degree_user]));
							}
							if(in_array($k_degree_date, $user_vacation_days[$v_degree_user]))
							{
								if($_REQUEST['dbg'])
								{
									print_r("New invoice from :" . $v_degree_user);
								}
								$v_degree_user_from = $v_degree_user;
								$v_degree_user = $vacation2replacement[$v_degree_user][$k_degree_date];
								$v_degree_user_to = $v_degree_user;

								if($_REQUEST['dbg'])
								{
									print_r(" to user " . $v_degree_user);
								}
							}

							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['name'] = $shortcut_b;
							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['qty'] += '1';
							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['date'] = $k_degree_date;
							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['price_t'] = $price_type;
							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['price'] = $master_price_list[$k_degree_date][0][$shortcut_b][$price_type];
							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['shortcut_total'] += $master_price_list[$k_degree_date][0][$shortcut_b][$price_type];

							if($_REQUEST['dbg']):
								$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['days'][$k_degree_date]['data'] = $k_degree_date;
								$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['days'][$k_degree_date]['from'] = $v_degree_user_from;
								$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['days'][$k_degree_date]['to'] = $v_degree_user_to;
								$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['days'][$k_degree_date][$shortcut_b] = $shortcut_b;
								$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['days'][$k_degree_date]['qty'] += '1';
							endif;
						}
					}
				}

				if($_REQUEST['dbg'])
				{
					print_r("Duty active days");
					print_r($user_duty_patient_active_days);
				}
				foreach($user_duty_patient_active_days as $k_duty_user => $v_duty_dates)
				{
					foreach($v_duty_dates as $k_date => $v_date)
					{
						if($_REQUEST['dbg'])
						{
							var_dump($vacation2replacement[$k_duty_user][$v_date]);
							print_r(" <= " . $k_duty_user . " -- " . $v_date . "\n\n");
						}
						if(!$vacation2replacement[$k_duty_user][$v_date] && !in_array($v_date, $vacation_without_replacement[$k_duty_user]))
						{
							$shortcut = 'X';
							if(in_array($k_duty_user, $doctor_users))
							{
								$price_type_du = 'duty_doctor';
							}
							else if(in_array($k_duty_user, $nurse_users))
							{
								$price_type_du = 'duty_nurse';
							}

							$master_data[$ipid][$k_duty_user]['shortcuts'][$shortcut]['name'] = $shortcut;
							if($_REQUEST['dbg']):
								$master_data[$ipid][$k_duty_user]['shortcuts'][$shortcut]['date'][] = $v_date;
							endif;
							$master_data[$ipid][$k_duty_user]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$ipid][$k_duty_user]['shortcuts'][$shortcut]['price'] = $master_price_list[$v_date][0]['B0'][$price_type_du];
							$master_data[$ipid][$k_duty_user]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$v_date][0]['B0'][$price_type_du];
						}
					}
				}

				//get patient admissions from users2admission
				$new_patient_admissions = $user2adm->getAdmissions($ipid, $selected_month_details['start'], $selected_month_details['end']);
				if($_REQUEST['dbg'])
				{
					print_r("Admissions TEST\n");
					print_r($new_patient_admissions);
				}
				if($new_patient_admissions)
				{
					foreach($new_patient_admissions as $k_adm_pat => $v_adm_pat)
					{
						$shortcut = '';
						$price_type_adm = '';

						if(in_array($v_adm_pat['user_id'], $doctor_users))
						{
							$price_type_adm = 'doctor';
						}
						else if(in_array($v_adm_pat['user_id'], $nurse_users))
						{
							$price_type_adm = 'nurse';
						}


						if($v_adm_pat['admission_status'] == 'n')
						{
							$shortcut = 'E';
						}
						else if($v_adm_pat['admission_status'] == 'h')
						{
							$shortcut = 'EH';
						}


						$adm_date = date('Y-m-d', strtotime($v_adm_pat['date']));
						$master_data[$ipid][$v_adm_pat['user_id']]['shortcuts'][$shortcut]['name'] = $shortcut;
						$master_data[$ipid][$v_adm_pat['user_id']]['shortcuts'][$shortcut]['qty'] += '1';
						$master_data[$ipid][$v_adm_pat['user_id']]['shortcuts'][$shortcut]['price'] = $master_price_list[$adm_date][0][$shortcut][$price_type_adm];
						$master_data[$ipid][$v_adm_pat['user_id']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$adm_date][0][$shortcut][$price_type_adm];
					}
				}
				else
				{
					if(in_array($v_adm_pat['user_id'], $doctor_users))
					{
						$price_type_adm = 'doctor';
					}
					else if(in_array($v_adm_pat['user_id'], $nurse_users))
					{
						$price_type_adm = 'nurse';
					}

					if($pat_locations_res_all)
					{
						foreach($pat_locations_res_all as $k_location_patient => $v_location_patient)
						{
							//check if admission day happens in this location
							$found_location = false;

							foreach($admission_dates[$v_location_patient['ipid']] as $k_adm_loc => $v_adm_loc)
							{

								$shortcut = '';

								//location start/end
								if($v_location_patient['valid_till'] == '0000-00-00 00:00:00')
								{
									$till = date('Y-m-d', time());
								}
								else
								{
									$till = date('Y-m-d', strtotime($v_location_patient['valid_till']));
								}

								$r1start = strtotime(date('Y-m-d', strtotime($v_location_patient['valid_from'])));
								$r1end = strtotime($till);

								//admission start/end
								$admitted_date = date('Y-m-d', strtotime($k_adm_loc)); //key is always date in both db and generated admissions array
								$r2start = strtotime($admitted_date);
								$r2end = strtotime($admitted_date);

								if(
									Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end) && $v_adm_loc['value'] == 1 && in_array($admitted_date, $all_sapv_days[$v_location_patient['ipid']])
								)
								{
									$shortcut = '';
									$price_type_adm = '';
									if(array_key_exists($v_location_patient['id'], $hospiz_locations[$v_location_patient['ipid']]))
									{
										$shortcut = 'EH';
									}
									else
									{
										$shortcut = 'E';
									}

									if(in_array($v_adm_loc['userid'], $doctor_users))
									{
										$price_type_adm = 'doctor';
									}
									else if(in_array($v_adm_loc['userid'], $nurse_users))
									{
										$price_type_adm = 'nurse';
									}



									if(empty($master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]))
									{
										$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut] = array();
									}
									$master_data[$v_location_patient['ipid']][$v_adm_loc['userid']]['shortcuts'][$shortcut]['name'] = $shortcut;
									$master_data[$v_location_patient['ipid']][$v_adm_loc['userid']]['shortcuts'][$shortcut]['qty'] += '1';
									$master_data[$v_location_patient['ipid']][$v_adm_loc['userid']]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];
									$master_data[$v_location_patient['ipid']][$v_adm_loc['userid']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];

									$found_location = true;
								}
							}

							if(!$found_location)
							{
								//consider location being E
								foreach($admission_dates[$ipid] as $k_adm_loc => $v_adm_loc)
								{
									$shortcut = 'E';

									if(in_array($v_adm_loc['userid'], $doctor_users))
									{
										$price_type_adm = 'doctor';
									}
									else if(in_array($v_adm_loc['userid'], $nurse_users))
									{
										$price_type_adm = 'nurse';
									}

									$admitted_date = date('Y-m-d', strtotime($k_adm_loc)); //key is always date in both db and generated admissions array

									if(in_array($admitted_date, $patient[$ipid]['active_days_cs_sapv']))
									{
										if(empty($master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]))
										{
											$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut] = array();
										}
										$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['name'] = $shortcut;
										$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];
										$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];
									}
								}
							}
						}
					}
					else
					{
						//admission when patient has no locations
						foreach($admission_dates[$ipid] as $k_adm_loc => $v_adm_loc)
						{
							$shortcut = 'E';

							if(in_array($v_adm_loc['userid'], $doctor_users))
							{
								$price_type_adm = 'doctor';
							}
							else if(in_array($v_adm_loc['userid'], $nurse_users))
							{
								$price_type_adm = 'nurse';
							}

							$admitted_date = date('Y-m-d', strtotime($k_adm_loc)); //key is always date in both db and generated admissions array
							if(in_array($admitted_date, $patient[$ipid]['active_days_cs_sapv']))
							{
								if(empty($master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]))
								{
									$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut] = array();
								}
								$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['qty'] += '1';
								$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];
								$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];
							}
						}
					}
				}

				if($_REQUEST['dbg'])
				{
					print_r($master_data);
				}

				$invoice_subnumber = $user_invoices->get_highest_invoice_sub_number($invoice_details['invoice_number']);

				if(!$invoice_subnumber)
				{
					$i_subnr = '1';
				}
				else
				{
					$i_subnr = ($invoice_subnumber['invoice_subnumber'] + 1);
				}
				$client_details = $client->getClientDataByid($invoice_details['client']);

				$invoice_settings = new InvoiceSettings();
				$invoice_settings_arr = $invoice_settings->getClientInvoiceSettings($clientid, 'nie_user_invoice');

				if(strlen($invoice_settings_arr['nie_user_invoice']['invoice_prefix']))
				{
					$prefix = $invoice_settings_arr['nie_user_invoice']['invoice_prefix'];
				}

				foreach($master_data[$ipid] as $k_current_user => $current_data)
				{

					foreach($current_data['shortcuts'] as $k_shortcut => $shortcut_fields)
					{
						$invoice_total[$k_current_user] += $shortcut_fields['shortcut_total'];
					}

					if($k_current_user != '1' && $invoice_total[$k_current_user] != 0 && !empty($k_current_user) && (in_array($k_current_user, $doctor_users) || in_array($k_current_user, $nurse_users)))
					{
						$user_bank_details = $master_user_details[$k_current_user]['bank_name'] . "\n";
						$user_bank_details .= $master_user_details[$k_current_user]['bank_account_number'] . "\n";
						$user_bank_details .= $master_user_details[$k_current_user]['bank_number'] . "\n";
						$user_bank_details .= $master_user_details[$k_current_user]['iban'] . "\n";
						$user_bank_details .= $master_user_details[$k_current_user]['bic'] . "\n";

						$user_address = $master_user_details[$k_current_user]['street1'] . "\n";

						if(!empty($master_user_details[$k_current_user]['zip']))
						{
							$user_address .= $master_user_details[$k_current_user]['zip'];
						}

						if(!empty($master_user_details[$k_current_user]['city']))
						{
							$user_address .= " " . $master_user_details[$k_current_user]['city'];
						}

						$ins_invoice_details[$k_current_user]['invoice_start'] = $invoice_details['invoice_start'];
						$ins_invoice_details[$k_current_user]['invoice_end'] = $invoice_details['invoice_end'];
						$ins_invoice_details[$k_current_user]['ipid'] = $invoice_details['ipid'];
						$ins_invoice_details[$k_current_user]['userid'] = $k_current_user;
						$ins_invoice_details[$k_current_user]['client'] = $invoice_details['client'];
						$ins_invoice_details[$k_current_user]['prefix'] = $prefix;
						$ins_invoice_details[$k_current_user]['invoice_number'] = $invoice_details['invoice_number'];
						$ins_invoice_details[$k_current_user]['invoice_subnumber'] = $i_subnr;
						$ins_invoice_details[$k_current_user]['invoice_total'] = $invoice_total[$k_current_user];
						$ins_invoice_details[$k_current_user]['status'] = '1';
						$ins_invoice_details[$k_current_user]['recipient'] = $client_details[0]['recipient'];
						$ins_invoice_details[$k_current_user]['user_bank_details'] = $user_bank_details;
						$ins_invoice_details[$k_current_user]['user_address'] = $user_address;
						$ins_invoice_details[$k_current_user]['ikuser'] = $master_user_details[$k_current_user]['ikusernumber'];
						$ins_invoice_details[$k_current_user]['isdelete'] = '0';

						$i_subnr++;
					}
				}

				if(!$_REQUEST['dbg'])
				{
					//insert many records with one query!!
					$collection = new Doctrine_Collection('UserInvoices');
					$collection->fromArray($ins_invoice_details);
					$collection->save();
				}




				if($_REQUEST['dbg'])
				{
					print_r("\n Master Data \n");
					print_r($master_data);

					print_r("\nFinal Invoices\n");
					print_r($ins_invoice_details);
					exit;
				}
				$count_inserted = count($collection->getPrimaryKeys());
				$count_expected_ins = count($master_data[$ipid]);

				$this->_redirect(APP_BASE . 'invoice/clientusersinvoices');
				exit;
			}
		}

		public function generate_users_invoices_old($invoice)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$hi_invoices = new HiInvoices();
			$anlage6 = new Anlage6();
			$user = new User();

			$usergroups = new Usergroup();
			$user2adm = new User2admission();
			$user_invoices = new UserInvoices();
			$client = new Client();
			$user_vacation = new UserVacations();
			$vacations_replacemets = new VacationsReplacements();

			$related_users['users'][] = '9999999999999';

//		only paid invoices
//		$invoice_details = $hi_invoices->getHiInvoice($invoice, "3");

			$client_users = $user->getClientsUsers($clientid);

			$invoice_details = $hi_invoices->getHiInvoice($invoice);
			if($invoice_details)
			{
				$ipid = $invoice_details['ipid'];
				$epid = Pms_CommonData::getEpid($ipid);

				$assigned = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid="' . $epid . '"');
				$assigned_users_res = $assigned->fetchArray();
				$assigned_users[] = '9999999999999';
				foreach($assigned_users_res as $key => $value)
				{
					if(in_array($value['userid'], $client_users['ids']))
					{
						$assigned_users[] = $value['userid'];
					}
				}

				if($_REQUEST['dbg'])
				{
					print_r("Assigned Users\n");
					print_r($assigned_users);
				}

				/* ----------------------- 1. Patient period days-------------------------- */
				$selected_month_details['start'] = date('Y-m-d', strtotime($invoice_details['invoice_start']));
				$selected_month_details['end'] = date('Y-m-d', strtotime($invoice_details['invoice_end']));

				$period_days_array = $patientmaster->getDaysInBetween($selected_month_details['start'], $selected_month_details['end'], "Y-m");

				if($_REQUEST['dbg'])
				{
					print_r("\n 1. Invoice Period  Days \n\n");
					print_r($period_days_array);
				}


				/* ------------------------ 2. Get patients active days in selected period for all ipids + 3. get admissions ----------------------- */
				$patient_treated_periods = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
				if($_REQUEST['dbg'])
				{
					print_r("\n 2.Readmissions\n");
					print_r($patient_treated_periods);
				}


//			check if patient has anlage6 saved!
				$anlage6_res = $anlage6->get_anlage_shortcut($ipid, $selected_month_details['start'], 'e');

				if($_REQUEST['dbg'])
				{
					print_r("\n 3. Anlage6\n");
					print_r($anlage6_res);
				}


				foreach($anlage6_res as $k_anlage6 => $v_anlage6)
				{
					$anlage6_arr[$v_anlage6['ipid']][date('Y-m-d', strtotime($v_anlage6['date']))] = $v_anlage6;
				}

				if($_REQUEST['dbg'])
				{
					print_r($patient_treated_periods);
				}

				foreach($patient_treated_periods as $period_ipid => $period_details)
				{
					$active_days[$period_ipid] = array();
					$admission_dates[$period_ipid] = array();
					$discharge_dates_arr[$period_ipid] = array();
					if(!empty($period_details['admissionDates']))
					{
						foreach($period_details['admissionDates'] as $key_adm => $v_adm)
						{
							if(!empty($period_details['dischargeDates'][$key_adm]['date']))
							{
								$start_with_discharge = date('Y-m-d', strtotime($period_details['admissionDates'][$key_adm]['date']));
								$end_with_discharge = date('Y-m-d', strtotime($period_details['dischargeDates'][$key_adm]['date']));

								$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
								$discharge_dates_arr[$period_ipid][] = $end_with_discharge;
								//discharge date is active!
								$active_days[$period_ipid][] = date('Y-m-d', strtotime($end));
							}
							else
							{
								$start_without_discharge = date('Y-m-d', strtotime($period_details['admissionDates'][$key_adm]['date']));
								if(!empty($period_details['discharge_date']))
								{
									$end_without_discharge = date('Y-m-d', strtotime($period_details['discharge_date']));
								}
								else
								{
									$end_without_discharge = date('Y-m-d', time());
								}
								$discharge_dates_arr[$period_ipid][] = $end_without_discharge;
								$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
							}

							if(empty($anlage6_arr[$period_ipid]))
							{
								//admission
								$a1start_formated = date('Y-m-d', strtotime($v_adm['date']));
								$a1start = strtotime(date('Y-m-d', strtotime($v_adm['date'])));
								$a1end = strtotime(date('Y-m-d', strtotime($v_adm['date'])));

								//selected period
								$p1start = strtotime($selected_month_details['start']);
								$p1end = strtotime($selected_month_details['end']);

								if(Pms_CommonData::isintersected($a1start, $a1end, $p1start, $p1end))
								{
									$admission_dates[$period_ipid][$a1start_formated]['value'] = '1';
									$admission_dates[$period_ipid][$a1start_formated]['userid'] = $v_adm['create_user'];
									$admission_dates[$period_ipid][$a1start_formated]['date'] = $v_adm['date'];
									if(in_array($v_adm['create_user'], $client_users['ids']))
									{
										$related_users['users'][] = $v_adm['create_user'];
									}
								}
							}
							else
							{
								$admission_dates[$period_ipid] = $anlage6_arr[$period_ipid];
							}
						}
					}
					else
					{
						$cycle_start_period = date('Y-m-d', strtotime($period_details['admission_date']));

						if(empty($period_details['discharge_date']))
						{

							$cycle_end_period = date('Y-m-d', time());
						}
						else
						{
							$cycle_end_period = date('Y-m-d', strtotime($period_details['discharge_date']));
						}


						$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));

						$active_days[$period_ipid][] = $cycle_end_period;
						$discharge_dates_arr[$period_ipid][] = $cycle_end_period;

						if(empty($anlage6_arr[$period_ipid]))
						{

							//admission
							$a2start = strtotime($cycle_start_period);
							$a2end = strtotime(date('Y-m-d', strtotime($cycle_start_period)));

							//selected period
							$p2start = strtotime($selected_month_details['start']);
							$p2end = strtotime($selected_month_details['end']);

							if(Pms_CommonData::isintersected($a2start, $a2end, $p2start, $p2end))
							{
								$admission_dates[$period_ipid][date('Y-m-d', strtotime($cycle_start_period))]['value'] = '1';
							}
						}
						else
						{
							$admission_dates[$period_ipid] = $anlage6_arr[$period_ipid];
						}
					}

					$active_days[$period_ipid] = array_values(array_intersect($period_days_array, $active_days[$period_ipid]));
				}

				//admission dates array used in hospiz calculation of "B" shortcut
				foreach($admission_dates as $k_ipid_dates => $v_adm_dates)
				{
					foreach($v_adm_dates as $k_adm_d => $v_adm_d)
					{
						$admission_dates_arr[$k_ipid_dates][] = $k_adm_d['value'];
					}
				}


				if($_REQUEST['dbg'])
				{
					print_r("\n4. Active Days\n\n");
					print_r($active_days);

					print_r("\n5. Admission Dates \n\n");
					print_r($admission_dates);
					print_r("\n5.x. Discharge Dates \n\n");
					print_r($discharge_dates_arr);
				}


				/* ----------------------- 3. Get patient sapv data in invoice period -------------------------- */

				$dropSapv = Doctrine_Query::create()
					->select('*')
					->from('SapvVerordnung')
					->whereIn('ipid', array($ipid))
					->andWhere('"' . date('Y-m-d', strtotime($selected_month_details['start'])) . '" <= DATE(verordnungbis)')
					->andWhere('"' . date('Y-m-d', strtotime($selected_month_details['end'])) . '" >= DATE(verordnungam)')
					->andWhere('verordnungam != "0000-00-00 00:00:00"')
					->andWhere('verordnungbis != "0000-00-00 00:00:00"')
					->andWhere('isdelete=0')
					->andWhere('status != 1 ')
					->orderBy('verordnungam ASC');
				$droparray = $dropSapv->fetchArray();

				$all_sapv_days = array();
				$temp_sapv_days = array();

				foreach($droparray as $k_sapv => $v_sapv)
				{
					if(count($all_sapv_days[$v_sapv['ipid']]) == 0)
					{
						$all_sapv_days[$v_sapv['ipid']] = array();
					}


					$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
					$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));


					$temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

					$all_sapv_days[$v_sapv['ipid']] = array_intersect($period_days_array, array_merge($all_sapv_days[$v_sapv['ipid']], $temp_sapv_days[$v_sapv['ipid']]));
				}

				if($_REQUEST['dbg'])
				{
					print_r("\n 6. SPV Days\n");
					print_r($all_sapv_days);
				}

				/* ------------------------- 4. Get hospital and hospiz and remove from active days of selected month ----------------------------- */
				$disallowed_location_types = array('1', '2'); //hospital and hospiz
				//ISPC-2612 Ancuta 27.06.2020 Locx
				/*
				 $hospitalids = Doctrine_Query::create()
				 ->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				 ->from('Locations')
				 ->where('isdelete = 0')
				 ->andWhere('client_id ="' . $clientid . '"')
				 ->andWhereIn('location_type', $disallowed_location_types);
				 $hosparray = $hospitalids->fetchArray();
				 */
				
				$loc_obj = new Locations();
				$hosparray = $loc_obj->get_locationByClientAndTypes($clientid,$disallowed_location_types);
				
				
				
				
				$hospital_ids[] = '999999999';
				foreach($hosparray as $hospital)
				{
					$hospital_ids[] = $hospital['id'];
					$location_types[$hospital['location_type']][] = $hospital['id'];
				}

				//get patient hospital locations if it has
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->whereIn('ipid', array($ipid))
					->andWhere('isdelete="0"')
					->andWhereIn('location_id', $hospital_ids)
					->orderBy('valid_from,id ASC');
				$pat_locations_res = $patloc->fetchArray();

				//get patient all locations
				$patloc_all = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->whereIn('ipid', array($ipid))
					->andWhere('isdelete="0"')
					->orderBy('valid_from,id ASC');
				$pat_locations_res_all = $patloc_all->fetchArray();



				foreach($pat_locations_res as $k_pat_loc => $v_pat_loc)
				{
					$patients_locations[$v_pat_loc['ipid']][] = $v_pat_loc;

					if(in_array($v_pat_loc['location_id'], $location_types['2']))
					{
						$hospiz_locations[$v_pat_loc['ipid']][$v_pat_loc['id']] = $v_pat_loc;


						$h_location_start[$v_pat_loc['ipid']] = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
						$hospiz_heads[$v_pat_loc['ipid']]['start'][] = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
						$hospiz_heads[$v_pat_loc['ipid']]['end'][] = date('Y-m-d', strtotime($v_pat_loc['valid_till']));


						if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
						{
							$till = date('Y-m-d', strtotime('+1 day'));
						}
						else
						{
							$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
						}

						$hospiz_days_arr = $patientmaster->getDaysInBetween($h_location_start[$v_pat_loc['ipid']], $till);
						if(count($hospiz_days[$v_pat_loc['ipid']]) == '0')
						{
							$hospiz_days[$v_pat_loc['ipid']] = array();
						}
						$hospiz_days[$v_pat_loc['ipid']] = array_merge($hospiz_days[$v_pat_loc['ipid']], $hospiz_days_arr);
					}
				}

				$hospiz_days_array = $hospiz_days;
				foreach($admission_dates_arr as $k_admission_d => $v_admission_d)
				{
					if(!in_array($v_admission_d, $hospiz_heads['start']))
					{
						//remove hospiz head from hospiz days array if is not == admission day
						$start_day_key = array_search($v_admission_d, $hospiz_days_array);
						if(is_numeric($start_day_key))
						{
							unset($hospiz_days_array[$start_day_key]);
						}
					}
				}

				foreach($discharge_dates_arr as $k_discharge_d => $v_discharge_d)
				{
					if(!in_array($v_discharge_d, $hospiz_heads['end']))
					{
						//remove hospiz head from hospiz days array if is not == discharge day
						$end_day_key = array_search($v_discharge_d, $hospiz_days_array);
						if(is_numeric($end_day_key))
						{
							unset($hospiz_days_array[$end_day_key]);
						}
					}
				}

				if($_REQUEST['dbg'])
				{
					print_r($hospiz_heads);
					print_r($hospiz_days);
					print_r($hospiz_days_array);
				}

				$hospital_days = array();
				$hosp = array();

				foreach($patients_locations as $ipid_patient => $pat_locations)
				{
					$hospital_days[$ipid_patient] = array();
					foreach($pat_locations as $k_pat_loc => $v_pat_loc)
					{

						if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
						{
							$till = date('Y-m-d', strtotime('+1 day'));
						}
						else
						{
							$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
						}

						$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
						$r1end = strtotime(date('Y-m-d', strtotime($till)));
						$r2start = strtotime($selected_month_details['start']);
						$r2end = strtotime($selected_month_details['end']);

						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
						{
							$hosp = array();
							$period_hosp_locations[] = $v_pat_loc;
							$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

							$hosp = $patientmaster->getDaysInBetween($location_start, $till);

							$hospital_days[$ipid_patient] = array_merge($hospital_days[$ipid_patient], $hosp);
						}

						//find hosp heads
						$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
						$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
						$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));

						//remove end head
						if($end_hospital_period != $next_start_hosp)
						{
							$find = array_search($end_hospital_period_formatted, $hospital_days[$ipid_patient]);
							$removed_days['e'][] = $hospital_days[$ipid_patient][$find];
							unset($hospital_days[$ipid_patient][$find]);
						}

						//remove start head
						if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
						{
							$start_hospital_formatted = '';
							$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
							$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
							$start_hospital_period = $r1start;
							$start_hospital_formatted = date('Y-m-d', $r1start);

							if($start_hospital_period != $previous_till)
							{
								$find_s = array_search($start_hospital_formatted, $hospital_days[$ipid_patient]);
								if($find_s !== false)
								{
									$removed_days['s'][] = $hospital_days[$ipid_patient][$find_s];
									unset($hospital_days[$ipid_patient][$find_s]);
								}
							}
						}
						else
						{
							$find_n = '';
							$start_hospital_formatted = date('Y-m-d', $r1start);
							$find_n = array_search($start_hospital_formatted, $hospital_days[$ipid_patient]);
							if($find_n !== false)
							{
								$removed_days['s2'][] = $hospital_days[$ipid_patient][$find_n];
								unset($hospital_days[$ipid_patient][$find_n]);
							}
						}
					}

					$patients_hospital_days[$ipid_patient] = array_intersect($period_days_array, $hospital_days[$ipid_patient]);
				}
				if($_REQUEST['dbg'])
				{
					print_r("\nHospital Days\n");
					print_r($patients_hospital_days);
				}



				/* ------------------------------------------ 5. Get price list(s) for selected month --------------------------------------------- */
				$shortcuts = Pms_CommonData::get_prices_shortcuts();

				$this->view->shortcuts_admission = $shortcuts['admission'];
				$this->view->shortcuts_daily = $shortcuts['daily'];
				$this->view->shortcuts_visits = $shortcuts['visits'];
				$this->view->used_shortcuts = array('E', 'EH', 'B', 'P1', 'P2', 'P3', 'A1', 'A2');


				$p_list = new PriceList();
				$master_price_list = $p_list->get_period_price_list($selected_month_details['start'], $selected_month_details['end']);


				/* -------------------------- 8. Calculate active days (with sapv and no hospiz/hospital) ----------------------------- */
				$real_active_days[$ipid] = array();
				foreach($active_days[$ipid] as $k_active => $v_active_day)
				{
					if(!in_array($v_active_day, $hospital_days[$ipid]) && in_array($v_active_day, $all_sapv_days[$ipid]) && !in_array($v_active_day, $hospiz_days_array[$ipid]))
					{
						$real_active_days[$ipid][] = $v_active_day;
					}

					if(in_array($v_active_day, $all_sapv_days[$ipid]))
					{
						$doc_active_days[$ipid][] = $v_active_day;
					}
				}
				if($_REQUEST['dbg'])
				{
					print_r("Real Active Days\n\n");
					print_r($real_active_days[$ipid]);
				}


				//get client users
				//get all related users details
				$master_groups_first = array('4', '5');

				$client_user_groups_first = $usergroups->getUserGroups($master_groups_first);

				foreach($client_user_groups_first as $k_group_f => $v_group_f)
				{
					$client_groups[] = $v_group_f['id'];
					$master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
				}



				$nurse_users_first = array();
				$doctor_users_first = array();
				foreach($client_users as $k_cuser_det => $v_cuser_det)
				{
					$master_user_details[$v_cuser_det['id']] = $v_cuser_det;
					if(in_array($v_cuser_det['groupid'], $master2client['5']))
					{
						$nurse_users_first[] = $v_cuser_det['id'];
					}
					else if(in_array($v_cuser_det['groupid'], $master2client['4']))
					{
						$doctor_users_first[] = $v_cuser_det['id'];
					}
				}



				/* ------------------------------------------ Get  patient approved visits types for the selected month --------------------------------------------- */
				$default_pavt = Pms_CommonData::default_approved_visit_type(); // if nothing saved -> get default
				$pavt_mod = new PatientApprovedVisitTypes();
				$existing_pavt_array = $pavt_mod->patients_approved_visits_overall($ipid);
				$pavt_array = $pavt_mod->patients_approved_visits_in_period($ipid, $selected_month_details['start'], $selected_month_details['end']);


				if(!$existing_pavt_array[$ipid])
				{
					$pavt_array[$ipid][0]['ipid'] = $ipid;
					$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
					$pavt_array[$ipid][0]['start_date'] = date('d.m.Y', strtotime($selected_month_details['start'])); // start period
					$pavt_array[$ipid][0]['end_date'] = date('d.m.Y', strtotime($selected_month_details['end'])); // end period
					$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
				}


				$x = 0;

				foreach($pavt_array as $p_ipid => $pavtvalue)
				{
					foreach($pavtvalue as $k => $tv)
					{
						$pavt[$tv['ipid']][$x]['visit_type'] = $tv['visit_type'];
						$pavt[$tv['ipid']][$x]['start_date'] = $tv['start_date'];

						if(empty($tv['end_date']) || $tv['end_date'] == "0000-00-00 00:00:00")
						{
							$pavt[$tv['ipid']][$x]['end_date'] = date('Y-m-d H:i:s');
						}
						else
						{
							$pavt[$tv['ipid']][$x]['end_date'] = $tv['end_date'];
						}

						$pavt_days[$tv['ipid']][$tv['visit_type']] = $patientmaster->getDaysInBetween(date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['start_date'])), date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['end_date'])));


						if(empty($patient_vists_type_int[$tv['ipid']][$tv['visit_type']]))
						{
							$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array();
						}
						$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array_merge($patient_vists_type_int[$tv['ipid']][$tv['visit_type']], $pavt_days[$tv['ipid']][$tv['visit_type']]);

						$x++;
					}
				}

				/* ----------------------- 6. Get doctor and nurse visits for all ipids but exclude verlauf deleted -------------------------- */

//			7.1get verlauf deleted visits
//			get nurse visits from verlauf deleted
				$nurse_from_course = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->where('ipid ="' . $ipid . '" ')
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
					->andWhere("wrong = 1")
					->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form'")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$nurse_v = $nurse_from_course->fetchArray();

				$deleted_nurse_visits[] = '9999999999999999';
				foreach($nurse_v as $k_nurse_k => $v_nurse_v)
				{
					$deleted_nurse_visits[] = $v_nurse_v['recordid'];
				}

//			get doctor visits from verlauf deleted
				$doc_from_course = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->where('ipid ="' . $ipid . '" ')
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
					->andWhere("wrong = 1")
					->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$doc_v = $doc_from_course->fetchArray();

				$deleted_doctor_visits[] = '99999999999999999';
				foreach($doc_v as $k_doc_v => $v_doc_v)
				{
					$deleted_doctor_visits[] = $v_doc_v['recordid'];
				}

//			7.2 get visits
				//these defined shortcuts have tstart and tend
				$nurse_visit_shortcuts = array("P1", "P2", "P3");
				$doctor_visit_shortcuts = array("A1", "A2");


				/*				 * * NURSE VISITS ** */
				$knurse_visits = Doctrine_Query::create()
					->select("*")
					->from("KvnoNurse")
					->where('ipid ="' . $ipid . '" ')
					->andWhereNotIn('id', $deleted_nurse_visits)
					->andWhere('DATE(vizit_date) BETWEEN DATE("' . $selected_month_details['start'] . '") AND DATE("' . $selected_month_details['end'] . '")')
					->andWhere('isdelete ="0"')
					->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
				$kvno_nurse_visits = $knurse_visits->fetchArray();

				if($_REQUEST['dbg'] == "nurse")
				{
					print_r($kvno_nurse_visits);
					exit;
				}

				foreach($kvno_nurse_visits as $k_n_visit => $v_n_visit)
				{
					$vizit_duration = '0';
					$vizit_date = date('Y-m-d', strtotime($v_n_visit['start_date']));
					$vizit_duration = Pms_CommonData::calculate_visit_duration(date('H', strtotime($v_n_visit['start_date'])), date('H', strtotime($v_n_visit['end_date'])), date('i', strtotime($v_n_visit['start_date'])), date('i', strtotime($v_n_visit['end_date'])), $v_n_visit['start_date']);

					$user_visits['nurse'][$v_n_visit['create_user']][$v_n_visit['id']]['date'] = $vizit_date;
					$user_visits['nurse'][$v_n_visit['create_user']][$v_n_visit['id']]['duration'] = $vizit_duration;

					if(in_array($v_n_visit['create_user'], $client_users['ids']))
					{
						$related_users['users'][] = $v_n_visit['create_user'];
						$related_users['nurse_visits'][$v_n_visit['create_user']][] = '1';
					}



					if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p3']))
					{
						foreach($nurse_visit_shortcuts as $k_shortcut_nurse => $v_shortcut_nurse)
						{
							$shortcut = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['shortcut'];

							if($vizit_duration >= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_end'] && in_array($vizit_date, $real_active_days[$v_n_visit['ipid']]) && in_array($v_n_visit['create_user'], $nurse_users_first))
							{

								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
							}
							else
							{
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
								$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
							}
						}
					}
					else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p2']))
					{

						if((($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end']) ) && in_array($vizit_date, $real_active_days[$v_n_visit['ipid']]) && in_array($v_n_visit['create_user'], $nurse_users_first))
						{
							$shortcut = "P2";

							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = "P2";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]["P2"]['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]["P2"]['price'];
						}
						else
						{
							$shortcut = "P2";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P2';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P2']['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
						}


						if($vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end'] && in_array($vizit_date, $real_active_days[$v_n_visit['ipid']]) && in_array($v_n_visit['create_user'], $nurse_users_first))
						{
							$shortcut = "P1";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]['P1']['price'];
						}
						else
						{
							$shortcut = "P1";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
						}
					}
					else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p1']))
					{

						if((($vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end'])) && in_array($vizit_date, $real_active_days[$v_n_visit['ipid']]) && in_array($v_n_visit['create_user'], $nurse_users_first))
						{
							$shortcut = "P1";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = "P1";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]["P1"]['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]["P1"]['price'];
						}
						else
						{
							$shortcut = "P1";
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
						}
					}
				}

				/*				 * * DOCTOR VISITS ** */
				$kdoctor_visits = Doctrine_Query::create()
					->select("*")
					->from("KvnoDoctor")
					->where('ipid ="' . $ipid . '" ')
					->andWhereNotIn('id', $deleted_doctor_visits)
					->andWhere('DATE(vizit_date) BETWEEN DATE("' . $selected_month_details['start'] . '") AND DATE("' . $selected_month_details['end'] . '")')
					->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
				$kvno_doctor_visits = $kdoctor_visits->fetchArray();

				if($_REQUEST['dbg'])
				{
					print_r("Doc Active Dates");
					print_r($doc_active_days);
				}

				foreach($kvno_doctor_visits as $k_d_visit => $v_d_visit)
				{
					$visit_duration = '0';
					$visit_date = date('Y-m-d', strtotime($v_d_visit['vizit_date']));
					$visit_duration = Pms_CommonData::calculate_visit_duration(str_pad($v_d_visit['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_m'], 2, "0", STR_PAD_LEFT), $v_d_visit['vizit_date']);

					if(in_array($v_n_visit['create_user'], $client_users['ids']))
					{
						$related_users['users'][] = $v_d_visit['create_user'];
						$related_users['doctor_visits'][$v_d_visit['create_user']][] = '1';
					}

					foreach($doctor_visit_shortcuts as $k_shortcut_doctor => $v_shortcut_doctor)
					{
						$shortcut = $master_price_list[$visit_date][0][$v_shortcut_doctor]['shortcut'];

						if(
							$visit_duration >= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_start'] && $visit_duration <= $master_price_list[$visit_date][0][$v_shortcut_doctor]['t_end'] && in_array($vizit_date, $doc_active_days[$ipid]) && in_array($v_d_visit['create_user'], $doctor_users_first)
						)
						{
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
						}
						else
						{
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$visit_date][0][$v_shortcut_doctor]['price'];
							$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
						}
					}
				}



				//merge assigned users with involved users(nurse/doctor visits and admitted by)
				$related_users['users'] = array_merge($related_users['users'], $assigned_users);
				$related_users['users'] = array_unique($related_users['users']);
				asort($related_users['users']);
				$related_users['users'] = array_values($related_users['users']);
				ksort($related_users['doctor_visits']);
				ksort($related_users['nurse_visits']);


				/* ----------------------- 7. Get users duty rooster in invoice period for all related users -------------------------- */

				$docid = Doctrine_Query::create()
					->select('*')
					->from('Roster')
					->where('clientid = ' . $clientid)
					->andWhere('DATE("' . date('Y-m-d', strtotime($selected_month_details['start'])) . '") <= DATE(`shiftEndTime`) AND DATE("' . date('Y-m-d', strtotime($selected_month_details['end'])) . '") >= DATE(`shiftStartTime`)')
					->andWhere('isdelete = "0"');

				$dutyes = $docid->fetchArray();


				$patient_duty_users[] = '9999999999999';
				foreach($dutyes as $k_u_duty => $v_u_duty)
				{
					$patient_duty_users[] = $v_u_duty['userid'];
					if($v_u_duty['shiftStartTime'] != '0000-00-00 00:00:00' && $v_u_duty['shiftEndTime'] != '0000-00-00 00:00:00')
					{
						if(count($user_duty_patient_active_days[$v_u_duty['userid']]) == 0)
						{
							$user_duty_patient_active_days[$v_u_duty['userid']] = array();
						}

						$duty_start = date('Y-m-d', strtotime($v_u_duty['shiftStartTime']));
						$duty_end = date('Y-m-d', strtotime($v_u_duty['shiftEndTime']));

						$user_duty_patient_active_days[$v_u_duty['userid']] = array_merge($user_duty_patient_active_days[$v_u_duty['userid']], $patientmaster->getDaysInBetween($duty_start, $duty_end));
					}
					else
					{
						$user_duty_patient_active_days[$v_u_duty['userid']][] = $v_u_duty['duty_date'];
					}

					$user_duty_patient_active_days[$v_u_duty['userid']] = array_intersect($user_duty_patient_active_days[$v_u_duty['userid']], $real_active_days[$ipid]);
					$user_duty_patient_active_days[$v_u_duty['userid']] = array_values($user_duty_patient_active_days[$v_u_duty['userid']]);
				}


				$patient_duty_users = array_values(array_unique($patient_duty_users));

				if($_REQUEST['dbg'])
				{
					print_r("Dutyes");
					print_r($dutyes);
					print_r("Patient Duty Users");
					print_r($patient_duty_users);
				}
				//merge related users with duty users which had duty in patient active day
				$related_users['users'] = array_merge($related_users['users'], $patient_duty_users);

				/* ----------------------- 8. User vacation replacements -------------------------- */
				$users_vacations_array = $user_vacation->get_users_vacations($selected_month_details['start'], $selected_month_details['end'], $related_users['users']);
				if($_REQUEST['dbg'])
				{
					print_r("USERS VACATION \n");
					print_r($users_vacations_array);
				}

				foreach($users_vacations_array as $k_vacation => $v_vacation)
				{
					$u_vacations[$v_vacation['userid']][] = $v_vacation['id'];
					$vacations_details[$v_vacation['id']] = $v_vacation;
				}
				if($_REQUEST['dbg'])
				{
					print_r("V2");
					print_r($u_vacations);
				}

				foreach($u_vacations as $k_u_vacation => $v_u_vacation)
				{
					foreach($v_u_vacation as $k_u_v => $v_u_v)
					{
						//vacation with replacement
						$ret_vacations[$v_u_v] = $vacations_replacemets->get_user_vacation_replacements($k_u_vacation, $v_u_v, $ipid);

						if($ret_vacations[$v_u_v])
						{
							$start_vacation = date('Y-m-d', strtotime($vacations_details[$v_u_v]['start']));
							$end_vacation = date('Y-m-d', strtotime($vacations_details[$v_u_v]['end']));

							if(count($user_vacation_days[$vacations_details[$v_u_v]['userid']]) == 0)
							{
								$user_vacation_days[$vacations_details[$v_u_v]['userid']] = array();
							}

							if(count($days_per_vacation[$vacations_details[$v_u_v]['id']]) == 0)
							{
								$days_per_vacation[$vacations_details[$v_u_v]['id']] = array();
							}



							$days_per_vacation[$vacations_details[$v_u_v]['id']] = array_merge($days_per_vacation[$vacations_details[$v_u_v]['id']], $patientmaster->getDaysInBetween($start_vacation, $end_vacation));

							$user_vacation_days[$vacations_details[$v_u_v]['userid']] = array_merge($user_vacation_days[$vacations_details[$v_u_v]['userid']], $patientmaster->getDaysInBetween($start_vacation, $end_vacation));
							$vacation_u_replacements[$v_u_v] = $ret_vacations[$v_u_v][0]['replacement'];
						}
						else
						{
							$start_vacation = date('Y-m-d', strtotime($vacations_details[$v_u_v]['start']));
							$end_vacation = date('Y-m-d', strtotime($vacations_details[$v_u_v]['end']));
							//vacation without replacements

							if(count($vacation_without_replacement[$vacations_details[$v_u_v]['userid']]) == 0)
							{
								$vacation_without_replacement[$vacations_details[$v_u_v]['userid']] = array();
							}
							$vacation_without_replacement[$vacations_details[$v_u_v]['userid']] = array_merge($vacation_without_replacement[$vacations_details[$v_u_v]['userid']], $patientmaster->getDaysInBetween($start_vacation, $end_vacation));
						}
					}
				}

				foreach($days_per_vacation as $k_vacation_id => $v_vacation_days)
				{
					foreach($v_vacation_days as $k_vacation_day => $v_vacation_day)
					{
						$vacation2days[$v_vacation_day] = $k_vacation_id;
						$vacation2replacement[$vacations_details[$k_vacation_id]['userid']][$v_vacation_day] = $vacation_u_replacements[$k_vacation_id];
					}
				}
				if($_REQUEST['dbg'])
				{
					print_r("VACATION DETAILS\n");
					print_r($vacations_details);

					print_r("VACATION DAYS\n");
					print_r($user_vacation_days);

					print_r("DAYS per vacation\n");
					print_r($days_per_vacation);

					print_r("Vacation 2 DAYS\n");
					print_r($vacation2days);

					print_r("Vacation 2 Replacement\n");
					print_r($vacation2replacement);

					print_r("Vacation Without Replacement\n");
					print_r($vacation_without_replacement);

					print_r("REPLACEMETNS\n");
					print_r($vacation_u_replacements);

					print_r("\nRelated users \n");
					print_r($related_users);
				}

				//get all related users details
				$master_groups = array('4', '5');

				$client_user_groups = $usergroups->getUserGroups($master_groups);

				foreach($client_user_groups as $k_group => $v_group)
				{
					$client_groups[] = $v_group['id'];
					$master2client[$v_group['groupmaster']][] = $v_group['id'];
				}

				if($_REQUEST['dbg'])
				{
					print_r("Client User Groups\n");
					print_r($client_user_groups);
					print_r($master2client);
				}
				$users_details_arr = $user->getMultipleUserDetails($related_users['users']);

				$doctor_users = array();
				foreach($users_details_arr as $k_user_det => $v_user_det)
				{
					$master_user_details[$v_user_det['id']] = $v_user_det;
					if(in_array($v_user_det['groupid'], $master2client['5']))
					{
						$nurse_users[] = $v_user_det['id'];
					}
					else if(in_array($v_user_det['groupid'], $master2client['4']))
					{
						$doctor_users[] = $v_user_det['id'];
					}
				}
				if($_REQUEST['dbg'])
				{
					print_r("Doctor Users\n");
					print_r($doctor_users);

					print_r("Nurse Users\n");
					print_r($nurse_users);
				}
				/* ----------------------- 9. Get B shortcuts for all related users -------------------------- */
				//returns [userid] [day] = [patients_involved]
				$users_occupation_degree = $this->users_occupation_degee_no_cs($related_users['users'], $ipid, $selected_month_details['start'], $selected_month_details['end'], $real_active_days[$ipid]);

				if($_REQUEST['dbg'])
				{
					print_r("Users Ocupattion degree");
					print_r($users_occupation_degree);
				}

				foreach($users_occupation_degree as $k_degree_date => $v_degree_users)
				{
					foreach($v_degree_users as $v_degree_user => $user_ipids)
					{
						if(
							in_array($v_degree_user, $doctor_users) && !in_array($k_degree_date, $vacation_without_replacement[$v_degree_user]) && in_array($k_degree_date, $real_active_days[$ipid])
						)
						{
							$price_type = 'doctor';

							$shortcut_b = '';

							$active_day_patients = count($user_ipids);
							if($active_day_patients > '0' && $active_day_patients <= '5')
							{
								$shortcut_b = 'B0';
							}
							elseif($active_day_patients >= '6' && $active_day_patients <= '10')
							{
								$shortcut_b = 'B5';
							}
							elseif($active_day_patients > '10')
							{
								$shortcut_b = 'B10';
							}
							if($_REQUEST['dbg'])
							{
								print_r("Is replaced? ");
								var_dump(in_array($k_degree_date, $user_vacation_days[$v_degree_user]));
							}
							if(in_array($k_degree_date, $user_vacation_days[$v_degree_user]))
							{
								if($_REQUEST['dbg'])
								{
									print_r("New invoice from :" . $v_degree_user);
								}
								$v_degree_user_from = $v_degree_user;
								$v_degree_user = $vacation2replacement[$v_degree_user][$k_degree_date];
								$v_degree_user_to = $v_degree_user;

								if($_REQUEST['dbg'])
								{
									print_r(" to user " . $v_degree_user);
								}
							}

							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['name'] = $shortcut_b;
							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['qty'] += '1';
							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['date'] = $k_degree_date;
							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['price_t'] = $price_type;
							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['price'] = $master_price_list[$k_degree_date][0][$shortcut_b][$price_type];
							$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['shortcut_total'] += $master_price_list[$k_degree_date][0][$shortcut_b][$price_type];

							if($_REQUEST['dbg']):
								$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['days'][$k_degree_date]['data'] = $k_degree_date;
								$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['days'][$k_degree_date]['from'] = $v_degree_user_from;
								$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['days'][$k_degree_date]['to'] = $v_degree_user_to;
								$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['days'][$k_degree_date][$shortcut_b] = $shortcut_b;
								$master_data[$ipid][$v_degree_user]['shortcuts'][$shortcut_b]['days'][$k_degree_date]['qty'] += '1';
							endif;
						}
					}
				}

				if($_REQUEST['dbg'])
				{
					print_r("Duty active days");
					print_r($user_duty_patient_active_days);
				}
				foreach($user_duty_patient_active_days as $k_duty_user => $v_duty_dates)
				{
					foreach($v_duty_dates as $k_date => $v_date)
					{
						if($_REQUEST['dbg'])
						{
							var_dump($vacation2replacement[$k_duty_user][$v_date]);
							print_r(" <= " . $k_duty_user . " -- " . $v_date . "\n\n");
						}
						if(!$vacation2replacement[$k_duty_user][$v_date] && !in_array($v_date, $vacation_without_replacement[$k_duty_user]))
						{
							$shortcut = 'X';
							if(in_array($k_duty_user, $doctor_users))
							{
								$price_type_du = 'duty_doctor';
							}
							else if(in_array($k_duty_user, $nurse_users))
							{
								$price_type_du = 'duty_nurse';
							}

							$master_data[$ipid][$k_duty_user]['shortcuts'][$shortcut]['name'] = $shortcut;
							if($_REQUEST['dbg']):
								$master_data[$ipid][$k_duty_user]['shortcuts'][$shortcut]['date'][] = $v_date;
							endif;
							$master_data[$ipid][$k_duty_user]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$ipid][$k_duty_user]['shortcuts'][$shortcut]['price'] = $master_price_list[$v_date][0]['B0'][$price_type_du];
							$master_data[$ipid][$k_duty_user]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$v_date][0]['B0'][$price_type_du];
						}
					}
				}



				//get patient admissions from users2admission
				$new_patient_admissions = $user2adm->getAdmissions($ipid, $selected_month_details['start'], $selected_month_details['end']);
				if($_REQUEST['dbg'])
				{
					print_r("Admissions TEST\n");
					print_r($new_patient_admissions);
				}
				if($new_patient_admissions)
				{
					foreach($new_patient_admissions as $k_adm_pat => $v_adm_pat)
					{
						$shortcut = '';
						$price_type_adm = '';

						if(in_array($v_adm_pat['user_id'], $doctor_users))
						{
							$price_type_adm = 'doctor';
						}
						else if(in_array($v_adm_pat['user_id'], $nurse_users))
						{
							$price_type_adm = 'nurse';
						}


						if($v_adm_pat['admission_status'] == 'n')
						{
							$shortcut = 'E';
						}
						else if($v_adm_pat['admission_status'] == 'h')
						{
							$shortcut = 'EH';
						}


						$adm_date = date('Y-m-d', strtotime($v_adm_pat['date']));
						$master_data[$ipid][$v_adm_pat['user_id']]['shortcuts'][$shortcut]['name'] = $shortcut;
						$master_data[$ipid][$v_adm_pat['user_id']]['shortcuts'][$shortcut]['qty'] += '1';
						$master_data[$ipid][$v_adm_pat['user_id']]['shortcuts'][$shortcut]['price'] = $master_price_list[$adm_date][0][$shortcut][$price_type_adm];
						$master_data[$ipid][$v_adm_pat['user_id']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$adm_date][0][$shortcut][$price_type_adm];
					}
				}
				else
				{
					if(in_array($v_adm_pat['user_id'], $doctor_users))
					{
						$price_type_adm = 'doctor';
					}
					else if(in_array($v_adm_pat['user_id'], $nurse_users))
					{
						$price_type_adm = 'nurse';
					}

					if($pat_locations_res_all)
					{
						foreach($pat_locations_res_all as $k_location_patient => $v_location_patient)
						{
							//check if admission day happens in this location
							$found_location = false;

							foreach($admission_dates[$v_location_patient['ipid']] as $k_adm_loc => $v_adm_loc)
							{

								$shortcut = '';

								//location start/end
								if($v_location_patient['valid_till'] == '0000-00-00 00:00:00')
								{
									$till = date('Y-m-d', time());
								}
								else
								{
									$till = date('Y-m-d', strtotime($v_location_patient['valid_till']));
								}

								$r1start = strtotime(date('Y-m-d', strtotime($v_location_patient['valid_from'])));
								$r1end = strtotime($till);

								//admission start/end
								$admitted_date = date('Y-m-d', strtotime($k_adm_loc)); //key is always date in both db and generated admissions array
								$r2start = strtotime($admitted_date);
								$r2end = strtotime($admitted_date);

								if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end) && $v_adm_loc['value'] == 1 && in_array($admitted_date, $all_sapv_days[$v_location_patient['ipid']]))
								{
									$shortcut = '';
									$price_type_adm = '';
									if(array_key_exists($v_location_patient['id'], $hospiz_locations[$v_location_patient['ipid']]))
									{
										$shortcut = 'EH';
									}
									else
									{
										$shortcut = 'E';
									}

									if(in_array($v_adm_loc['userid'], $doctor_users))
									{
										$price_type_adm = 'doctor';
									}
									else if(in_array($v_adm_loc['userid'], $nurse_users))
									{
										$price_type_adm = 'nurse';
									}



									if(empty($master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]))
									{
										$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut] = array();
									}
									$master_data[$v_location_patient['ipid']][$v_adm_loc['userid']]['shortcuts'][$shortcut]['name'] = $shortcut;
									$master_data[$v_location_patient['ipid']][$v_adm_loc['userid']]['shortcuts'][$shortcut]['qty'] += '1';
									$master_data[$v_location_patient['ipid']][$v_adm_loc['userid']]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];
									$master_data[$v_location_patient['ipid']][$v_adm_loc['userid']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];

									$found_location = true;
								}
							}

							if(!$found_location)
							{
								//consider location being E
								foreach($admission_dates[$ipid] as $k_adm_loc => $v_adm_loc)
								{
									$shortcut = 'E';

									if(in_array($v_adm_loc['userid'], $doctor_users))
									{
										$price_type_adm = 'doctor';
									}
									else if(in_array($v_adm_loc['userid'], $nurse_users))
									{
										$price_type_adm = 'nurse';
									}

									$admitted_date = date('Y-m-d', strtotime($k_adm_loc)); //key is always date in both db and generated admissions array

									if(in_array($admitted_date, $real_active_days))
									{
										if(empty($master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]))
										{
											$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut] = array();
										}
										$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['name'] = $shortcut;
										$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];
										$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];
									}
								}
							}
						}
					}
					else
					{
						//admission when patient has no locations
						foreach($admission_dates[$ipid] as $k_adm_loc => $v_adm_loc)
						{
							$shortcut = 'E';

							if(in_array($v_adm_loc['userid'], $doctor_users))
							{
								$price_type_adm = 'doctor';
							}
							else if(in_array($v_adm_loc['userid'], $nurse_users))
							{
								$price_type_adm = 'nurse';
							}

							$admitted_date = date('Y-m-d', strtotime($k_adm_loc)); //key is always date in both db and generated admissions array
							if(in_array($admitted_date, $real_active_days))
							{
								if(empty($master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut]))
								{
									$master_patient_data[$v_location_patient['ipid']][$admitted_date]['shortcuts'][$shortcut] = array();
								}
								$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['name'] = $shortcut;
								$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['qty'] += '1';
								$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['price'] = $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];
								$master_data[$ipid][$v_adm_loc['userid']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$admitted_date][0][$shortcut][$price_type_adm];
							}
						}
					}
				}

				if($_REQUEST['dbg'])
				{
					print_r($master_data);
				}

				$invoice_subnumber = $user_invoices->get_highest_invoice_sub_number($invoice_details['invoice_number']);

				if(!$invoice_subnumber)
				{
					$i_subnr = '1';
				}
				else
				{
					$i_subnr = ($invoice_subnumber['invoice_subnumber'] + 1);
				}
				$client_details = $client->getClientDataByid($invoice_details['client']);

				$invoice_settings = new InvoiceSettings();
				$invoice_settings_arr = $invoice_settings->getClientInvoiceSettings($clientid, 'nie_user_invoice');

				if(strlen($invoice_settings_arr['nie_user_invoice']['invoice_prefix']))
				{
					$prefix = $invoice_settings_arr['nie_user_invoice']['invoice_prefix'];
				}

				foreach($master_data[$ipid] as $k_current_user => $current_data)
				{

					foreach($current_data['shortcuts'] as $k_shortcut => $shortcut_fields)
					{
						$invoice_total[$k_current_user] += $shortcut_fields['shortcut_total'];
					}

					if($k_current_user != '1' && $invoice_total[$k_current_user] != 0 && !empty($k_current_user) && (in_array($k_current_user, $doctor_users) || in_array($k_current_user, $nurse_users)))
					{
						$user_bank_details = $master_user_details[$k_current_user]['bank_name'] . "\n";
						$user_bank_details .= $master_user_details[$k_current_user]['bank_account_number'] . "\n";
						$user_bank_details .= $master_user_details[$k_current_user]['bank_number'] . "\n";
						$user_bank_details .= $master_user_details[$k_current_user]['iban'] . "\n";
						$user_bank_details .= $master_user_details[$k_current_user]['bic'] . "\n";

						$user_address = $master_user_details[$k_current_user]['street1'] . "\n";

						if(!empty($master_user_details[$k_current_user]['zip']))
						{
							$user_address .= $master_user_details[$k_current_user]['zip'];
						}

						if(!empty($master_user_details[$k_current_user]['city']))
						{
							$user_address .= " " . $master_user_details[$k_current_user]['city'];
						}

						$ins_invoice_details[$k_current_user]['invoice_start'] = $invoice_details['invoice_start'];
						$ins_invoice_details[$k_current_user]['invoice_end'] = $invoice_details['invoice_end'];
						$ins_invoice_details[$k_current_user]['ipid'] = $invoice_details['ipid'];
						$ins_invoice_details[$k_current_user]['userid'] = $k_current_user;
						$ins_invoice_details[$k_current_user]['client'] = $invoice_details['client'];
						$ins_invoice_details[$k_current_user]['prefix'] = $prefix;
						$ins_invoice_details[$k_current_user]['invoice_number'] = $invoice_details['invoice_number'];
						$ins_invoice_details[$k_current_user]['invoice_subnumber'] = $i_subnr;
						$ins_invoice_details[$k_current_user]['invoice_total'] = $invoice_total[$k_current_user];
						$ins_invoice_details[$k_current_user]['status'] = '1';
						$ins_invoice_details[$k_current_user]['recipient'] = $client_details[0]['recipient'];
						$ins_invoice_details[$k_current_user]['user_bank_details'] = $user_bank_details;
						$ins_invoice_details[$k_current_user]['user_address'] = $user_address;
						$ins_invoice_details[$k_current_user]['ikuser'] = $master_user_details[$k_current_user]['ikusernumber'];
						$ins_invoice_details[$k_current_user]['isdelete'] = '0';

						$i_subnr++;
					}
				}

				if(!$_REQUEST['dbg'])
				{
					//insert many records with one query!!
					$collection = new Doctrine_Collection('UserInvoices');
					$collection->fromArray($ins_invoice_details);
					$collection->save();
				}




				if($_REQUEST['dbg'])
				{
					print_r("\n Master Data \n");
					print_r($master_data);

					print_r("\nFinal Invoices\n");
					print_r($ins_invoice_details);
					exit;
				}
				$count_inserted = count($collection->getPrimaryKeys());
				$count_expected_ins = count($master_data[$ipid]);

				$this->_redirect(APP_BASE . 'invoice/clientusersinvoices');
				exit;
			}
		}

		public function userslistpaymentsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$u_invoices = new UserInvoices();
			$u_payments = new UserInvoicePayments();
			$u_invoice_form = new Application_Form_UsersInvoices();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $u_payments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $u_payments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $u_payments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $u_invoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $u_invoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $u_payments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoice/userslistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		private function users_occupation_degee($users, $current_ipid, $period_start, $period_end, $patient_real_active)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$qpa_map = new PatientQpaMapping();

			$conditions['periods'][0]['start'] = $period_start;
			$conditions['periods'][0]['end'] = $period_end;
			$conditions['client'] = $clientid;

			$patient_days = Pms_CommonData::patients_days($conditions);
			$active_ipids = array_keys($patient_days); // return ipids


			foreach($patient_days as $kipid => $pvalues)
			{

// 				$patients_active_details[$kipid] = $pvalues['real_active_days'];
				if(!empty($pvalues['treatment_days']))
				{
					$patients_active_details[$kipid] = $pvalues['treatment_days'];
				}
			}
			// not on 16
			// 002e1ded11ce6b7ec7752d0d9978ea846321f9ec
			//135ac0189c3566f6b4113c257343f78f8fdbe2e2
// 			print_r($patients_active_details); exit;
// 			$active_ipids = $this->getActivePatients($period_start, $period_end);
			$patientmaster = new PatientMaster();

//		preapare master data days array
			$period_days = $patientmaster->getDaysInBetween($period_start, $period_end);

			foreach($period_days as $k_period_day => $v_period_day)
			{
				$master_data[$v_period_day] = array();
			}

			$active_ipids[] = '999999999999';
			$assignments_details = $qpa_map->getAssignedUsers($active_ipids, $users);

			//users involved with current patient -> how many assigned patients has
			foreach($assignments_details['assignments'] as $k_assigned_ipid => $v_assigned_users)
			{
				foreach($v_assigned_users as $k_assigned_user => $assigned_user)
				{
					$assignment[$assigned_user][] = $k_assigned_ipid;
					$assignment[$assigned_user] = array_values(array_unique($assignment[$assigned_user]));
				}
			}

			//verify each assigned patient (active with sapv and no hospital/hospiz) each day
			$assigned_real_active_days = $this->patient_real_active_days($assignment, $clientid, $period_start, $period_end);

			foreach($assigned_real_active_days as $k_assigned_u => $v_period_array)
			{
				foreach($v_period_array as $k_period_array => $v_period_ipids)
				{
					foreach($v_period_ipids as $k_ipid_assigned => $v_ipid_assigned)
					{
						$master_data[$k_period_array][$k_assigned_u][] = $v_ipid_assigned;
					}
				}
			}

			//get duty roster in period
			$docid = Doctrine_Query::create()
				->select('*')
				->from('Roster')
				->where('clientid = ' . $clientid)
				->andWhere('DATE("' . date('Y-m-d', strtotime($period_start)) . '") <= DATE(`shiftEndTime`) AND DATE("' . date('Y-m-d', strtotime($period_end)) . '") >= DATE(`shiftStartTime`)')
				->andWhere('isdelete = "0"');
			$dutyes = $docid->fetchArray();




			foreach($dutyes as $k_duty => $v_duty)
			{

				$period_duty_days = $patientmaster->getDaysInBetween($v_duty['shiftStartTime'], $v_duty['shiftEndTime']);



				foreach($period_duty_days as $duty_period_key => $v_duty_date)
				{
					if(in_array($v_duty_date, $period_days))
					{
						foreach($patients_active_details as $ipid => $days_array)
						{
							if(in_array(date('d.m.Y', strtotime($v_duty_date)), $days_array))
							{
								$duty_active_ipids[$v_duty_date][$v_duty['userid']][] = $ipid;

								$master_data[$v_duty_date][$v_duty['userid']][] = $ipid;
								$master_data[$v_duty_date][$v_duty['userid']] = array_values(array_unique($master_data[$v_duty_date][$v_duty['userid']]));
							}
						}
					}
				}
			}


// 			foreach($period_days as $k_period_d => $v_period_d)
// 			{
// 				if(array_key_exists($v_period_d, $duty_active_ipids) && in_array($v_period_d, $period_days))
// 				{
// 					foreach($duty_active_ipids[$v_period_d] as $k_user_id => $duty_ipids)
// 					{
// 						if(count($master_data[$v_period_d][$k_user_id]) == 0)
// 						{
// 							$master_data[$v_period_d][$k_user_id] = array();
// 						}
// 						$user_duty_ipids[$k_user_id] = $duty_ipids;
// 						$real_active_days = $this->patient_real_active_days($user_duty_ipids, $clientid, $v_period_d, $v_period_d, true);
// 						$master_data[$v_period_d][$k_user_id] = array_merge($master_data[$v_period_d][$k_user_id], $real_active_days);
// 						$master_data[$v_period_d][$k_user_id] = array_values(array_unique($master_data[$v_period_d][$k_user_id]));
// 					}
// 				}
// 			}
//		get nurse visits from verlauf deleted
			$nurse_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->whereIn('ipid', $active_ipids)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form'")
					->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$nurse_v = $nurse_from_course->fetchArray();

			$deleted_nurse_visits[] = '9999999999999999';
			foreach($nurse_v as $k_nurse_k => $v_nurse_v)
			{
				$deleted_nurse_visits[] = $v_nurse_v['recordid'];
			}

//			get doctor visits from verlauf deleted
			$doc_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->whereIn('ipid', $active_ipids)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'")
					->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$doc_v = $doc_from_course->fetchArray();

			$deleted_doctor_visits[] = '99999999999999999';
			foreach($doc_v as $k_doc_v => $v_doc_v)
			{
				$deleted_doctor_visits[] = $v_doc_v['recordid'];
			}

			/*			 * * NURSE VISITS ** */
			$knurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $active_ipids)
				->andWhereNotIn('id', $deleted_nurse_visits)
				->andWhere('DATE(vizit_date) BETWEEN DATE("' . $period_start . '") AND DATE("' . $period_end . '")')
				->andWhere('isdelete ="0"')
				->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
			$kvno_nurse_visits = $knurse_visits->fetchArray();

			/*			 * * DOCTOR VISITS ** */
			$kdoctor_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoDoctor")
				->whereIn('ipid', $active_ipids)
				->andWhereNotIn('id', $deleted_doctor_visits)
				->andWhere('DATE(vizit_date) BETWEEN DATE("' . $period_start . '") AND DATE("' . $period_end . '")')
				->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
			$kvno_doctor_visits = $kdoctor_visits->fetchArray();

			foreach($kvno_nurse_visits as $k_vnurse => $v_vnurse)
			{
				$visit_date = date('Y-m-d', strtotime($v_vnurse['vizit_date']));

				$master_data[$visit_date][$v_vnurse['create_user']][] = $v_vnurse['ipid'];
				$master_data[$visit_date][$v_vnurse['create_user']] = array_values(array_unique($master_data[$visit_date][$v_vnurse['create_user']]));
			}

			foreach($kvno_doctor_visits as $k_vdoctor => $v_vdoctor)
			{
				$visit_date = date('Y-m-d', strtotime($v_vdoctor['vizit_date']));

				$master_data[$visit_date][$v_vdoctor['create_user']][] = $v_vdoctor['ipid'];
				$master_data[$visit_date][$v_vdoctor['create_user']] = array_values(array_unique($master_data[$visit_date][$v_vdoctor['create_user']]));
			}


			//append current ipid in real active patient period
			$users = array_values(array_unique($users));

			foreach($patient_real_active as $k_active_day => $v_active_day)
			{
				foreach($users as $k_active_user => $v_active_user)
				{
					if($v_active_user != '9999999999999') //remove dummy no errors
					{
						$master_data[$v_active_day][$v_active_user][] = $current_ipid;
						$master_data[$v_active_day][$v_active_user] = array_values(array_unique($master_data[$v_active_day][$v_active_user]));
					}
				}
			}

			return $master_data;
		}

		private function users_occupation_degee_no_cs($users, $current_ipid, $period_start, $period_end, $patient_real_active)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$qpa_map = new PatientQpaMapping();
			$active_ipids = $this->getActivePatients($period_start, $period_end);
			$patientmaster = new PatientMaster();

			//		preapare master data days array
			$period_days = $patientmaster->getDaysInBetween($period_start, $period_end);

			foreach($period_days as $k_period_day => $v_period_day)
			{
				$master_data[$v_period_day] = array();
			}

			$active_ipids[] = '999999999999';
			$assignments_details = $qpa_map->getAssignedUsers($active_ipids, $users);

			//users involved with current patient -> how many assigned patients has
			foreach($assignments_details['assignments'] as $k_assigned_ipid => $v_assigned_users)
			{
				foreach($v_assigned_users as $k_assigned_user => $assigned_user)
				{
					$assignment[$assigned_user][] = $k_assigned_ipid;
					$assignment[$assigned_user] = array_values(array_unique($assignment[$assigned_user]));
				}
			}


			//verify each assigned patient (active with sapv and no hospital/hospiz) each day
			$assigned_real_active_days = $this->patient_real_active_days_no_cs($assignment, $clientid, $period_start, $period_end);


			foreach($assigned_real_active_days as $k_assigned_u => $v_period_array)
			{
				foreach($v_period_array as $k_period_array => $v_period_ipids)
				{
					foreach($v_period_ipids as $k_ipid_assigned => $v_ipid_assigned)
					{
						$master_data[$k_period_array][$k_assigned_u][] = $v_ipid_assigned;
					}
				}
			}

			//get duty roster in period
			$docid = Doctrine_Query::create()
				->select('*')
				->from('Roster')
				->where('clientid = ' . $clientid)
				->andWhere('DATE("' . date('Y-m-d', strtotime($period_start)) . '") <= DATE(`shiftEndTime`) AND DATE("' . date('Y-m-d', strtotime($period_end)) . '") >= DATE(`shiftStartTime`)')
				->andWhere('isdelete = "0"');
			$dutyes = $docid->fetchArray();

			foreach($dutyes as $k_duty => $v_duty)
			{

				$period_duty_days = $patientmaster->getDaysInBetween($v_duty['shiftStartTime'], $v_duty['shiftEndTime']);

				foreach($period_duty_days as $duty_period_key => $v_duty_date)
				{
					if(in_array($v_duty_date, $period_days))
					{
						$duty_active_ipids[$v_duty_date][$v_duty['userid']] = $this->getActivePatients($v_duty_date, $v_duty_date);
					}
				}
			}



			foreach($period_days as $k_period_d => $v_period_d)
			{
				if(array_key_exists($v_period_d, $duty_active_ipids) && in_array($v_period_d, $period_days))
				{
					foreach($duty_active_ipids[$v_period_d] as $k_user_id => $duty_ipids)
					{
						if(count($master_data[$v_period_d][$k_user_id]) == 0)
						{
							$master_data[$v_period_d][$k_user_id] = array();
						}

						$user_duty_ipids[$k_user_id] = $duty_ipids;
						$real_active_days = $this->patient_real_active_days_no_cs($user_duty_ipids, $clientid, $v_period_d, $v_period_d, true);

						$master_data[$v_period_d][$k_user_id] = array_merge($master_data[$v_period_d][$k_user_id], $real_active_days);
						$master_data[$v_period_d][$k_user_id] = array_values(array_unique($master_data[$v_period_d][$k_user_id]));
					}
				}
			}

			//		get nurse visits from verlauf deleted
			$nurse_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->whereIn('ipid', $active_ipids)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form'")
					->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$nurse_v = $nurse_from_course->fetchArray();

			$deleted_nurse_visits[] = '9999999999999999';
			foreach($nurse_v as $k_nurse_k => $v_nurse_v)
			{
				$deleted_nurse_visits[] = $v_nurse_v['recordid'];
			}

			//			get doctor visits from verlauf deleted
			$doc_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->whereIn('ipid', $active_ipids)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'")
					->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$doc_v = $doc_from_course->fetchArray();

			$deleted_doctor_visits[] = '99999999999999999';
			foreach($doc_v as $k_doc_v => $v_doc_v)
			{
				$deleted_doctor_visits[] = $v_doc_v['recordid'];
			}

			/*			 * * NURSE VISITS ** */
			$knurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $active_ipids)
				->andWhereNotIn('id', $deleted_nurse_visits)
				->andWhere('DATE(vizit_date) BETWEEN DATE("' . $period_start . '") AND DATE("' . $period_end . '")')
				->andWhere('isdelete ="0"')
				->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
			$kvno_nurse_visits = $knurse_visits->fetchArray();

			/*			 * * DOCTOR VISITS ** */
			$kdoctor_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoDoctor")
				->whereIn('ipid', $active_ipids)
				->andWhereNotIn('id', $deleted_doctor_visits)
				->andWhere('DATE(vizit_date) BETWEEN DATE("' . $period_start . '") AND DATE("' . $period_end . '")')
				->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
			$kvno_doctor_visits = $kdoctor_visits->fetchArray();

			foreach($kvno_nurse_visits as $k_vnurse => $v_vnurse)
			{
				$visit_date = date('Y-m-d', strtotime($v_vnurse['vizit_date']));

				$master_data[$visit_date][$v_vnurse['create_user']][] = $v_vnurse['ipid'];
				$master_data[$visit_date][$v_vnurse['create_user']] = array_values(array_unique($master_data[$visit_date][$v_vnurse['create_user']]));
			}

			foreach($kvno_doctor_visits as $k_vdoctor => $v_vdoctor)
			{
				$visit_date = date('Y-m-d', strtotime($v_vdoctor['vizit_date']));

				$master_data[$visit_date][$v_vdoctor['create_user']][] = $v_vdoctor['ipid'];
				$master_data[$visit_date][$v_vdoctor['create_user']] = array_values(array_unique($master_data[$visit_date][$v_vdoctor['create_user']]));
			}


			//append current ipid in real active patient period
			$users = array_values(array_unique($users));

			foreach($patient_real_active as $k_active_day => $v_active_day)
			{
				foreach($users as $k_active_user => $v_active_user)
				{
					if($v_active_user != '9999999999999') //remove dummy no errors
					{
						$master_data[$v_active_day][$v_active_user][] = $current_ipid;
						$master_data[$v_active_day][$v_active_user] = array_values(array_unique($master_data[$v_active_day][$v_active_user]));
					}
				}
			}

			return $master_data;
		}

		private function patient_real_active_days($users_ipids, $clientid, $period_start, $period_end, $strip_user_id = false)
		{
			$patientmaster = new PatientMaster();
			$period_days_array = $patientmaster->getDaysInBetween($period_start, $period_end);


			/* ---------------------- Get details according to client settings---------------------------- */
			$conditions['periods'][0]['start'] = $period_start;
			$conditions['periods'][0]['end'] = $period_end;
			$conditions['client'] = $clientid;

			$patient_days = Pms_CommonData::patients_days($conditions);

			$active_inperiod = array_keys($patient_days);

			if(empty($active_inperiod))
			{
				$active_inperiod[] = "XXXXXX";
			}
			/* ---------------------- Get sapv details ---------------------------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $active_inperiod)
				->andWhere('"' . date('Y-m-d', strtotime($period_start)) . '" <= DATE(verordnungbis)')
				->andWhere('"' . date('Y-m-d', strtotime($period_end)) . '" >= DATE(verordnungam)')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();

			foreach($droparray as $k_sapv => $v_sapv)
			{
				if(count($all_sapv_days[$v_sapv['ipid']]) == 0)
				{
					$all_sapv_days[$v_sapv['ipid']] = array();
				}

				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

				$all_sapv_days[$v_sapv['ipid']] = array_intersect($period_days_array, array_merge($all_sapv_days[$v_sapv['ipid']], $temp_sapv_days[$v_sapv['ipid']]));
			}



			/* ---------- Patient details---------- */
			foreach($active_inperiod as $k => $ipid)
			{

				$patients_details[$ipid]['active_days_in_period'] = $patient_days[$ipid]['real_active_days'];

				$patients_details[$ipid]['sapv_days_in_period'] = $all_sapv_days[$ipid];

				$patients_details[$ipid]['hospiz_real_days'] = $patient_days[$ipid]['hospiz']['real_days'];
				$patients_details[$ipid]['hospiz_real_days_cs'] = $patient_days[$ipid]['hospiz']['real_days_cs'];

				$patients_details[$ipid]['hospital_real_days'] = $patient_days[$ipid]['hospital']['real_days'];
				$patients_details[$ipid]['hospital_real_days_cs'] = $patient_days[$ipid]['hospital']['real_days_cs'];

				$patients_details[$ipid]['treatment_days_cs'] = $patient_days[$ipid]['treatment_days'];


				foreach($patient_days[$ipid]['treatment_days'] as $k => $tdays)
				{

					$patients_details[$ipid]['treatment_days_cs_Ymd'][] = date("Y-m-d", strtotime($tdays));

					if(in_array(date("Y-m-d", strtotime($tdays)), $all_sapv_days[$ipid]))
					{
						$patients_details[$ipid]['treatment_days_cs_sapv'][] = date("Y-m-d", strtotime($tdays));
					}
				}
			}

			foreach($users_ipids as $k_user => $ipids)
			{

				foreach($ipids as $key_ipid => $v_ipid)
				{
					foreach($period_days_array as $k_day => $v_day)
					{
						if(in_array($v_day, $patients_details[$v_ipid]['treatment_days_cs_sapv']))
						{
							if($strip_user_id)
							{
								$master_data[] = $v_ipid;
							}
							else
							{
								$master_data[$k_user][$v_day][] = $v_ipid;
							}
						}
					}
				}
			}

			return $master_data;
		}

		private function patient_real_active_days_no_cs($users_ipids, $clientid, $period_start, $period_end, $strip_user_id = false)
		{
			$patientmaster = new PatientMaster();
			$period_days_array = $patientmaster->getDaysInBetween($period_start, $period_end);

			foreach($users_ipids as $k_user => $ipids)
			{
				$dropSapv = Doctrine_Query::create()
					->select('*')
					->from('SapvVerordnung')
					->whereIn('ipid', $ipids)
					->andWhere('"' . date('Y-m-d', strtotime($period_start)) . '" <= DATE(verordnungbis)')
					->andWhere('"' . date('Y-m-d', strtotime($period_end)) . '" >= DATE(verordnungam)')
					->andWhere('verordnungam != "0000-00-00 00:00:00"')
					->andWhere('verordnungbis != "0000-00-00 00:00:00"')
					->andWhere('isdelete=0')
					->andWhere('status != 1 ')
					->orderBy('verordnungam ASC');
				$droparray = $dropSapv->fetchArray();

				$all_sapv_days = array();
				$temp_sapv_days = array();

				foreach($droparray as $k_sapv => $v_sapv)
				{
					if(count($all_sapv_days[$v_sapv['ipid']]) == 0)
					{
						$all_sapv_days[$v_sapv['ipid']] = array();
					}


					$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
					$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));


					$temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

					$all_sapv_days[$v_sapv['ipid']] = array_intersect($period_days_array, array_merge($all_sapv_days[$v_sapv['ipid']], $temp_sapv_days[$v_sapv['ipid']]));
				}

				$disallowed_location_types = array('1', '2'); //hospital and hospiz
				//ISPC-2612 Ancuta 27.06.2020 Locx
				/*
				$hospitalids = Doctrine_Query::create()
					->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
					->from('Locations')
					->where('isdelete = 0')
					->andWhere('client_id ="' . $clientid . '"')
					->andWhereIn('location_type', $disallowed_location_types);
				$hosparray = $hospitalids->fetchArray();
				 */
				$loc_obj = new Locations();
				$hosparray = $loc_obj->get_locationByClientAndTypes($clientid,$disallowed_location_types);
                // --				
				
				
				
				$hospital_ids[] = '999999999';
				foreach($hosparray as $hospital)
				{
					$hospital_ids[] = $hospital['id'];
					$location_types[$hospital['location_type']][] = $hospital['id'];
				}

				//get patient hospital locations if it has
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->whereIn('ipid', $ipids)
					->andWhere('isdelete="0"')
					->andWhereIn('location_id', $hospital_ids)
					->orderBy('valid_from,id ASC');
				$pat_locations_res = $patloc->fetchArray();

				//get patient all locations
				$patloc_all = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->whereIn('ipid', $ipids)
					->andWhere('isdelete="0"')
					->orderBy('valid_from,id ASC');
				$pat_locations_res_all = $patloc_all->fetchArray();

				foreach($pat_locations_res as $k_pat_loc => $v_pat_loc)
				{
					$patients_locations[$v_pat_loc['ipid']][] = $v_pat_loc;

					if(in_array($v_pat_loc['location_id'], $location_types['2']))
					{
						$hospiz_locations[$v_pat_loc['ipid']][$v_pat_loc['id']] = $v_pat_loc;
					}
				}

				$hospital_days = array();
				$hosp = array();

				foreach($patients_locations as $ipid_patient => $pat_locations)
				{
					$hospital_days[$ipid_patient] = array();
					foreach($pat_locations as $k_pat_loc => $v_pat_loc)
					{

						if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
						{
							$till = date('Y-m-d', strtotime('+1 day'));
						}
						else
						{
							$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
						}

						$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
						$r1end = strtotime(date('Y-m-d', strtotime($till)));
						$r2start = strtotime($period_start);
						$r2end = strtotime($period_end);

						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
						{
							$hosp = array();
							$period_hosp_locations[] = $v_pat_loc;
							$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

							$hosp = $patientmaster->getDaysInBetween($location_start, $till);

							$hospital_days[$ipid_patient] = array_merge($hospital_days[$ipid_patient], $hosp);
						}

						//find hosp heads
						$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
						$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
						$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));

						//remove end head
						if($end_hospital_period != $next_start_hosp)
						{
							$find = array_search($end_hospital_period_formatted, $hospital_days[$ipid_patient]);
							$removed_days['e'][] = $hospital_days[$ipid_patient][$find];
							unset($hospital_days[$ipid_patient][$find]);
						}

						//remove start head
						if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
						{
							$start_hospital_formatted = '';
							$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
							$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
							$start_hospital_period = $r1start;
							$start_hospital_formatted = date('Y-m-d', $r1start);


							if($start_hospital_period != $previous_till)
							{
								$intersected_from_arr = array_intersect(array($start_hospital_formatted), $hospital_days[$ipid_patient]);
								foreach($intersected_from_arr as $k_from_int => $v_from_int)
								{
									$removed_days['s'][] = $hospital_days[$ipid_patient][$k_from_int];
									unset($hospital_days[$ipid_patient][$k_from_int]);
								}
							}
						}
						else
						{
							$start_hospital_formatted = date('Y-m-d', $r1start);
							$intersected_arr = array_intersect(array($start_hospital_formatted), $hospital_days[$ipid_patient]);

							foreach($intersected_arr as $k_int => $v_int)
							{
								$removed_days['s2'][] = $hospital_days[$ipid_patient][$k_int];
								unset($hospital_days[$ipid_patient][$k_int]);
							}
						}
					}

					$patients_hospital_days[$ipid_patient] = array_intersect($period_days_array, $hospital_days[$ipid_patient]);
				}


				$patient_treated_periods = $patientmaster->getTreatedDaysRealMultiple($ipids);
				foreach($patient_treated_periods as $period_ipid => $period_details)
				{
					$active_days[$period_ipid] = array();
					if(!empty($period_details['admissionDates']))
					{
						foreach($period_details['admissionDates'] as $key_adm => $v_adm)
						{
							if(!empty($period_details['dischargeDates'][$key_adm]['date']))
							{
								$start_with_discharge = date('Y-m-d', strtotime($period_details['admissionDates'][$key_adm]['date']));
								$end_with_discharge = date('Y-m-d', strtotime($period_details['dischargeDates'][$key_adm]['date']));

								$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));

								//discharge date is active!
								$active_days[$period_ipid][] = date('Y-m-d', strtotime($end));
							}
							else
							{
								$start_without_discharge = date('Y-m-d', strtotime($period_details['admissionDates'][$key_adm]['date']));
								if(!empty($period_details['discharge_date']))
								{
									$end_without_discharge = date('Y-m-d', strtotime($period_details['discharge_date']));
								}
								else
								{
									$end_without_discharge = date('Y-m-d', time());
								}

								$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
							}
						}
					}
					else
					{
						$cycle_start_period = date('Y-m-d', strtotime($period_details['admission_date']));

						if(empty($period_details['discharge_date']))
						{

							$cycle_end_period = date('Y-m-d', time());
						}
						else
						{
							$cycle_end_period = date('Y-m-d', strtotime($period_details['discharge_date']));
						}


						$active_days[$period_ipid] = array_merge($active_days[$period_ipid], $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));

						$active_days[$period_ipid][] = $cycle_end_period;
					}

					$active_days[$period_ipid] = array_values(array_intersect($period_days_array, $active_days[$period_ipid]));
				}

				foreach($ipids as $key_ipid => $v_ipid)
				{
					foreach($period_days_array as $k_day => $v_day)
					{
						if(in_array($v_day, $all_sapv_days[$v_ipid]) && in_array($v_day, $active_days[$v_ipid]) && !in_array($v_day, $patients_hospital_days[$v_ipid]))
						{
							if($strip_user_id)
							{
								$master_data[] = $v_ipid;
							}
							else
							{
								$master_data[$k_user][$v_day][] = $v_ipid;
							}
						}
					}
				}
			}

			return $master_data;
		}

		public function clientusersinvoicesAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$user_det = new User();
			$user_invoices = new UserInvoices();
			$user_invoices_form = new Application_Form_UsersInvoices();
			$phealthinsurance = new PatientHealthInsurance();
			$users = new User();

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			
			$clients_details = $client_details->get_all_clients();			
			
			
			//ISPC-2609+ISPC-2000 Ancuta 28.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "nie_user_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			
			if(count($invoice_user_printjobs) > 1 ){
			    
			    $this->view->print_html = $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			if($this->getRequest()->isPost())
			{
				if($_POST['activate'] == "1")
				{
					$activate_invoice = $user_invoices_form->ToggleStatusInvoices($_POST['document'], "2"); //  set as unpaid
				}
				elseif($_POST['deletemore'] == "1")
				{
					$del_invoice = $user_invoices_form->ToggleStatusInvoices($_POST['document'], "4"); //  set as deleted
				}
				elseif($_POST['batch_print_more'])
				{
					$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'nie_user_invoice');
					if($template_data)
					{
						$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
						$params['batch_print'] = '1'; //enables batch print procedure
						$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
						$params['get_pdf'] = '0'; //stops downloading single pdf
						$params['userinvoice'] = '1';
					
						//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
						if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
                            $this->healthins_print_invoice($params);
						} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
						    
						    $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
						    
						    $print_job_data = array();
						    $print_job_data['clientid'] = $clientid;
						    $print_job_data['user'] = $userid;
						    $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
						    $print_job_data['output_type'] = 'pdf';
						    $print_job_data['status'] = 'active';
						    $print_job_data['invoice_type'] = 'nie_user_invoice';
						    $print_job_data['print_params'] = serialize($params);
						    $print_job_data['print_function'] = 'healthins_print_invoice';
						    $print_job_data['print_controller'] = $this->getRequest()->getControllerName();
						    
						    foreach($_POST['document'] as $k=>$inv_id){
						        $print_job_data['PrintJobsItems'][] = array(
						            'clientid'=>$print_job_data['clientid'],
						            'user'=>$print_job_data['user'],
						            'invoice_id'=>$inv_id,
						            'invoice_type'=>$print_job_data['invoice_type'],
						            'status'=>"new"
						        );
						    }
						    
						    $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
						    $print_id = $PrintJobsBulk_obj->id;
						    
						    if($print_id){
						        $this->__StartPrintJobs();
						    }
						    
						    
						    //ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
						    $msg="";
						    if($print_id){
						        $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
						    }
						    $this->_redirect(APP_BASE . 'invoice/clientusersinvoices'.$msg); //to avoid resubmission
						    //--
						}
					}
					else 
					{
						$invoices_ids = $_POST['document'];
						$invoices_data = $user_invoices->get_invoices($invoices_ids);
						//print_r($invoices_data); exit;
						$userids = array_unique($invoices_data['userids']);						
						$users_details = $user_det->getUsersDetails($userids);
						//print_r($users_details); exit;
						//patient HEALTH INSURANCE START
						$healthinsu_multi_array = $phealthinsurance->get_multiple_patient_healthinsurance($ipids, true);
					

						$ipids = array_unique($invoices_data['invoices_ipdis']);
						$sql = 'e.epid,  e.ipid, p.ipid, p.birthd, p.admission_date, ';
						$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
						$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
						$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
						$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
						$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
						$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
						
						$patient = Doctrine_Query::create()
						->select($sql)
						->from('PatientMaster p')
						->whereIn("p.ipid", $ipids)
						->leftJoin("p.EpidIpidMapping e")
						->andWhere('e.clientid = ?', $clientid);
						$patients_res = $patient->fetchArray();
						//print_r($invoices_data); exit;
						$patient_details = array();
						foreach($patients_res as $kpat=>$vpat)
						{
							$patient_details[$vpat['ipid']] = $vpat;
							$patient_details[$vpat['ipid']]['epid'] = $vpat['EpidIpidMapping']['epid'];
						}
						
						foreach($invoices_data['invoices_data'] as $invoice_data)
						{
							
					
						$invoice_data['health_insurance']['insurance_no'] = $healthinsu_multi_array[$insurance_data['ipid']]['insurance_no'];
						
						$invoice_data['patient_details'] = $patient_details;
						$invoice_data['client_details'] = $clients_details[$invoice_data['client']];
						$invoice_data['user_details'] = $users_details[$invoice_data['userid']];
						
						$title = 'Rechnung';
						$template = 'health_insurance_user_invoice.html';
						
						$invoice_type_special = "ND_user";
						
						// ISPC-2472 @Ancuta 07.11.2019
						
						$pdf_file_name = $title . "-" . $invoice_data['prefix'] . $invoice_data['invoice_number'] . "-" . $invoice_data['invoice_subnumber'];
						
						$invoice_number_full="";
						$invoice_number_full .=  (strlen($invoice_data['prefix']) > 0) ? $invoice_data['prefix'] : '';
						$invoice_number_full .= $invoice_data['invoice_number'];
						$invoice_number_full .=  (strlen($invoice_data['invoice_subnumber']) > 0) ? '-'.$invoice_data['invoice_subnumber'] : '';
						
						if(strlen($invoice_number_full) > 0 ){
							$pdf_file_name = $invoice_number_full;
						}
						// --
						$files[] = $this->generate_joined_files_pdf('4', $invoice_data, $pdf_file_name, $template, $invoice_type_special);
						
						}
						
						$source = 'HiUserInvoice';
						$this->join_pdfs_new($files, $inv_names ,$source);
						
						//$this->generateformPdf(3, $invoice_data, $title . "-" . $invoice_data['prefix'] . $invoice_data['invoice_number'] . "-" . $invoice_data['invoice_subnumber'], $template, $invoice_type_special);// ISPC-2472 @Ancuta 07.11.2019
						//$this->generateformPdf(3, $invoice_data, $pdf_file_name, $template, $invoice_type_special);
						//$this->_redirect(APP_BASE . 'invoice/clientusersinvoices');
						exit;
						
					}
				}
				else
				{
					$new_payment = $user_invoices_form->submit_payment($_POST);
				}

				$this->_redirect(APP_BASE . 'invoice/clientusersinvoices'); //to avoid resubmission
				exit;
			}


			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$user_invoices = new UserInvoices();
					$clone_record = $user_invoices->create_storno_invoice($invoiceid);
					$this->_redirect(APP_BASE . 'invoice/clientusersinvoices?flg=suc');
					exit;
				}
			}




			if($_REQUEST['invoiceid'] && $_REQUEST['pdfquick'] == '1')
			{
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'nie_user_invoice');
				if($template_data)
				{
					$params['invoices'] = $_REQUEST['invoiceid'];
					$params['userinvoice'] = '1';
					
					if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
					{
						$params['invoices'] = $_REQUEST['storno'];
						$params['storno'] = '1';
					}
					else 
					{
						$params['storno'] = '0';
					}
					
					$this->healthins_print_invoice($params);
				}
				else 
				{
					
					$invoice_id = $_REQUEST['invoiceid'];
					$invoice_data = $user_invoices->getUserInvoice($invoice_id);
	
	
					if(!$invoice_data || empty($invoice_data))
					{
						$this->_redirect(APP_BASE . 'invoice/clientusersinvoices');
					}
	
					$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
					$client_details = $client_details->getClientDataByid($invoice_data['client']);
					$user_details = $user_det->getUserDetails($invoice_data['userid']);
	
					$patient_health = $phealthinsurance->getPatientHealthInsurance($invoice_data['ipid']);
					$invoice_data['health_insurance']['insurance_no'] = $patient_health[0]['insurance_no'];
	
					$invoice_data['patient_details'] = $patient_details;
					$invoice_data['client_details'] = $client_details[0];
					$invoice_data['user_details'] = $user_details[0];
	
					if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
					{
						$storno_data = $user_invoices->getUserInvoice($_REQUEST['storno']);
	
						//ISPC-2532 Lore 09.11.2020
						$invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];
						$invoice_data['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
						
						$invoice_data['invoice_start'] = $storno_data['invoice_start'];
						$invoice_data['invoice_end'] = $storno_data['invoice_end'];
						$invoice_data['user_address'] = $storno_data['user_address'];
						$invoice_data['invoice_total'] = ($storno_data['invoice_total'] * (-1));
						$invoice_data['prefix'] = $storno_data['prefix'];
						$invoice_data['invoice_number'] = $storno_data['invoice_number'];
						$invoice_data['invoice_subnumber'] = $storno_data['invoice_subnumber'];
	
						$title = 'STORNO';
						$template = 'storno_health_insurance_user_invoice.html';
					}
					else
					{
						$title = 'Rechnung';
						$template = 'health_insurance_user_invoice.html';
					}
	
					$invoice_type_special = "ND_user";
					
					// ISPC-2472 @Ancuta 07.11.2019
					
					$pdf_file_name = $title . "-" . $invoice_data['prefix'] . $invoice_data['invoice_number'] . "-" . $invoice_data['invoice_subnumber'];
	
					$invoice_number_full="";
					$invoice_number_full .=  (strlen($invoice_data['prefix']) > 0) ? $invoice_data['prefix'] : '';
					$invoice_number_full .= $invoice_data['invoice_number'];
					$invoice_number_full .=  (strlen($invoice_data['invoice_subnumber']) > 0) ? '-'.$invoice_data['invoice_subnumber'] : '';
					
					if(strlen($invoice_number_full) > 0 ){
					    $pdf_file_name = $invoice_number_full;
					}
					// --
					
					
					//$this->generateformPdf(3, $invoice_data, $title . "-" . $invoice_data['prefix'] . $invoice_data['invoice_number'] . "-" . $invoice_data['invoice_subnumber'], $template, $invoice_type_special);// ISPC-2472 @Ancuta 07.11.2019
					$this->generateformPdf(3, $invoice_data, $pdf_file_name, $template, $invoice_type_special);
					$this->_redirect(APP_BASE . 'invoice/clientusersinvoices');
					exit;
				}
			}
			else if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $user_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/clientusersinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/clientusersinvoices?flg=delerr');
				}
			}

			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}


			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);


			$client_users = $users->getUserByClientid($clientid, '1', false);
			$this->view->users_selector = $this->view->formSelect("user_selected", '', null, $client_users);
		}

		public function fetchusersinvoicelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$users_invoices_payments = new UserInvoicePayments();
			$users = new User();

			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('UserInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);


			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{

				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND isdelete=0';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND DATE(NOW()) > DATE(invoice_end)  AND isdelete=0';
					break;

				case 'all':
					$filters['hiinvoice'] = ' ';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';
					break;
			}


			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['user_selected']))
			{
				$filters['hiinvoice'] .= ' AND userid = "' . $_REQUEST['user_selected'] . '"';
				$filters['hiinvoice_search'] .= ' AND userid = "' . $_REQUEST['user_selected'] . '"';
				;
			}

			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);

			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('UserInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}
				$status_count_invoices["all"][] = '1';
			}
			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('UserInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();

			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('UserInvoices')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";


			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;

				default:
					//UserInvoices
                    //$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [OLD]
                    $orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*,concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('UserInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
				$invoice_uids[] = $v_il['userid'];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $users_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);

			$this->view->storned_invoces = UserInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function edituserinvoiceAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$user_det = new User();
			$users_invoices = new UserInvoices();
			$user_invoices_form = new Application_Form_UsersInvoices();
			$phealthinsurance = new PatientHealthInsurance();

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}


				//save here
				$edit_invoice = $user_invoices_form->edit_invoice($_REQUEST['invoiceid'], $_POST, $status);


				if(empty($_REQUEST['pdf']))
				{
					if($edit_invoice)
					{
						$this->_redirect(APP_BASE . 'invoice/clientusersinvoices?flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/clientusersinvoices?flg=edterr');
					}
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/clientusersinvoices?invoiceid=' . $_REQUEST['invoiceid'] . '&pdfquick=1');
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $users_invoices->getUserInvoice($invoice_id);


				if(in_array($invoice_data['id'], UserInvoices::get_storned_invoices($clientid)))
				{
					$this->view->has_storno = '1';
				}
				else
				{
					$this->view->has_storno = '0';
				}

				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoice/clientusersinvoices');
				}

				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$user_details = $user_det->getUserDetails($invoice_data['userid']);

				$patient_health = $phealthinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$health_insurance['insurance_no'] = $patient_health[0]['insurance_no'];

				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->health_insurance = $health_insurance;
				$this->view->client_details = $client_detail[0];
				$this->view->user_details = $user_details[0];
			}
			else
			{
				//redirect if no invoiceid is preset
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		public function performancerecordformAction()
		{
			set_time_limit(0);
			setlocale(LC_ALL, 'de_DE.UTF8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$tm = new TabMenus();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$bw_invoices = new BwInvoices();
			$users = new User();


			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);

			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$client = new Client();
			$client_details = $client->getClientDataByid($clientid);
			$this->view->client_details = $client_details[0];
			
			$client_user_array = $users->getUserByClientid($clientid,0,true,false);
			foreach($client_user_array as $k=>$cu)
			{
			    $user_array[$cu['id']] = $cu;
			    if(strlen($cu['shortname']) >  0){
			        $user_array[$cu['id']]['initials'] = $cu['shortname'];
			    } 
			    else
			    {
			         $user_array[$cu['id']]['initials'] = mb_substr($cu['first_name'], 0, 1, "UTF-8") . "" . mb_substr($cu['last_name'], 0, 1, "UTF-8");
			        
			    }
			}

			if(strlen($_REQUEST['iid']) > 0)
			{
				//get invoice address/footer
				$bwinvoices = new BwInvoices();
				$bwinvoice_details = $bwinvoices->getBwInvoice($_REQUEST['iid']);
				$ipid = $bwinvoice_details['ipid'];
				$decid = Pms_CommonData::getIdfromIpid($ipid);

				$invoicenumber = $bwinvoice_details['invoice_number'];
				$pseudo_post['address'] = $bwinvoice_details['address'];
				$pseudo_post['sapv_footer'] = $bwinvoice_details['footer'];
				$pseudo_post['unique_id'] = $bwinvoice_details['id'];
				$pseudo_post['prefix'] = $bwinvoice_details['prefix'];


				$pseudo_post['first_sapv_day'] = date('d.m.Y', strtotime($bwinvoice_details['start_sapv']));
				$pseudo_post['last_sapv_day'] = date('d.m.Y', strtotime($bwinvoice_details['end_sapv']));

				$pseudo_post['first_active_day'] = date('d.m.Y', strtotime($bwinvoice_details['start_active']));
				$pseudo_post['last_active_day'] = date('d.m.Y', strtotime($bwinvoice_details['end_active']));

				$list = date('Y-m', strtotime($bwinvoice_details['invoice_start']));

				if(strlen($_REQUEST['completed_date']) > '0')
				{
					$pseudo_post['completed_date'] = date('d.m.Y', $_REQUEST['completed_date']);
				}
				else
				{
					if($bwinvoice_details['completed_date'] != '0000-00-00 00:00:00')
					{
						$pseudo_post['completed_date'] = date('d.m.Y', strtotime($bwinvoice_details['completed_date']));
					}
					else
					{
						$pseudo_post['completed_date'] = date('d.m.Y', strtotime($bwinvoice_details['create_date']));
					}
				}
				
				
				$pseudo_post['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($bwinvoice_details['invoice_start']));
				$pseudo_post['invoice_data']['invoice_end'] = date('d.m.Y', strtotime($bwinvoice_details['invoice_end']));
				$pseudo_post['invoice_data']['invoice_number'] = html_entity_decode($bwinvoice_details['prefix'] . $bwinvoice_details['invoice_number'], ENT_QUOTES, 'UTF-8');;
				
				
			}
			else
			{
				$pseudo_post['sapv_footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				$pseudo_post['completed_date'] = date('d.m.Y', time());
			}

			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;

			$pseudo_post['patid'] = $decid;
			$pseudo_post['ipid'] = $ipid;
			$pseudo_post['clientid'] = $clientid;


			$pm = $patientmaster->getMasterData($decid, 0);
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->patientdetails = $pm;
			$pseudo_post['patientdetails'] = $pm;
			
			//get patient main diagnosis
			$pat_diagnosis = new PatientDiagnosis();
			$patient_main_diag = $pat_diagnosis->get_main_diagnosis($ipid, $logininfo->clientid);
			$pseudo_post['patient_data']['main_diagnosis'] = implode(', ', $patient_main_diag['icd']);
				
			
			if(strlen($_REQUEST['iid']) == 0)
			{
				$this->view->tabmenus = $tm->getMenuTabs();
			}


			$divisions = $hi_perms->getClientHealthInsurancePermissions($logininfo->clientid);
			$hi_perms_divisions = $divisions;

			//health insurance
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(empty($healthinsu_array[0]['name']))
				{
					$healthinsu_array[0]['name'] = $healtharray['name'];
				}
				if(empty($healthinsu_array[0]['ins_street']))
				{
					$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
				}
				if(empty($healthinsu_array[0]['ins_city']))
				{
					$healthinsu_array[0]['ins_city'] = $healtharray['city'];
				}
				if(empty($healthinsu_array[0]['ins_zip']))
				{
					$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
				}

				if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
				{
					$this->view->health_insurance_ik = $healtharray['iknumber'];
				}

				if(strlen($healthinsu_array[0]['kvk_no']) == 0)
				{
					$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
				}
				else
				{
					$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				}
			}
			
			$pseudo_post['kv_header']['insurance_company_name'] = $healthinsu_array[0]['name'];
			$pseudo_post['kv_header']['kvnumber'] = $this->view->health_insurance_kassenr ;
			$pseudo_post['kv_header']['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$pseudo_post['kv_header']['insurance_status'] =$healthinsu_array[0]['insurance_status'];
			
			$master_user_details = new User();
			$users_details = $master_user_details->getUserDetails($logininfo->userid);
			$pseudo_post['kv_header']['betriebsstatten_nr'] = $users_details[0]['betriebsstattennummer'];
			$pseudo_post['kv_header']['arzt_nr'] = $users_details[0]['LANR'];

			if($hi_perms_divisions)
			{
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
			}

			if($healthinsu_array[0]['privatepatient'] == "1" && strlen($_REQUEST['iid']) == '0')
			{
				//get patient name and adress
				$patient_address = '&nbsp;' . htmlspecialchars($pm['first_name']) . ' ' . htmlspecialchars($pm['last_name']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['street1']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['zip']) . ' ' . '&nbsp;' . htmlspecialchars($pm['city']);
			}

			if(!empty($healthinsu_subdiv_arr['3']['name']))
			{
				//get new SAPV hi address
				$hi_address = '&nbsp;' . $healthinsu_subdiv_arr[3]['name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['street1'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$this->view->health_insurance_ik = $healthinsu_subdiv_arr[3]['iknumber'];
				$this->view->health_insurance_kassenr = $healthinsu_subdiv_arr[3]['kvnumber'];
			}
			else
			{
				//get old hi_address
				$hi_address = '&nbsp;' . $healthinsu_array[0]['company_name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_insurance_provider'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_street'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];

				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
			}

			$pathealthinsurancenr = "";
			if(count($healthinsu_array[0]))
			{
				$phi_details = $healthinsu_array[0]['name'];
			}
			else
			{
				$phi_details = "--";
			}
			$phi_details_sub = $hi_address;


			$this->view->health_insurance = $phi_details;
			$this->view->hi_subdiv_address = $phi_details_sub;
			$pseudo_post['health_insurance'] = $phi_details;
			$pseudo_post['hi_subdiv_address'] = $phi_details_sub;


			//get admission-readmission cycles to extract months where there is at least 1 day active START
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$months = array();
			$active_days = array();

			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));


					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{

					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}


				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
			}

			if($_REQUEST['dbgx'])
			{
				print_r($active_days);
				print_r($cycle_start_period);
				print_r($cycles);
				print_r($period_months);
				print_r($months);
				exit;
			}

			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
				$month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
			}

			//get number of days in each month + start/end day START
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_performance';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];

			$days_in_period = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			//	overall period
			$overall_period['start'] = $months_details[$months[0]]['start'];
			$overall_period['end'] = $current_period['end'];

			$overall_performance_period['start'] = $months_details[$months[0]]['start'];
			$overall_performance_period['c_month_end'] = date('Y-m-d', strtotime('-1 day', strtotime($current_period['start'])));
			$overall_performance_period['end'] = date('Y-m-d', strtotime('-1 day', strtotime('+1 month', strtotime($current_period['start']))));
 
			if($_REQUEST['dbg_periods_overall'])
			{
				print_r("months_details\n");
				print_r($months_details);
				print_r("overall_performance_period\n");
				print_r($overall_performance_period);
			}
			
			// get days in period
			$days_in_period_overall = $patientmaster->getDaysInBetween($overall_period['start'], $overall_period['end']);
			$days_in_period_overall_performance_cmonth = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['c_month_end']);
			$days_in_period_overall_performance = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['end']);

			foreach($active_days as $k_active_day => $v_active_day)
			{
				if(in_array($v_active_day, $days_in_period))
				{
					$active_days_in_period[] = $v_active_day;
				}
			}

 
			// current period data
			$conditions['periods'][0]['start'] = $current_period['start'];
			$conditions['periods'][0]['end'] = $current_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			// overall period data
			$conditions_overall['periods'][0]['start'] = $overall_period['start'];
			$conditions_overall['periods'][0]['end'] = $overall_period['end'];
			$conditions_overall['client'] = $clientid;
			$conditions_overall['ipids'] = array($ipid);
			$patient_days_overall = Pms_CommonData::patients_days($conditions_overall);


			$patient_days2locationtypes = array();
			$hospital_days_cs_dmY = array();
			$hospiz_days_cs_dmY = array();
			
			foreach($patient_days_overall as $patient_ipid =>$pdata)
			{
				
				//hospital days cs
				if(!empty($pdata['hospital']['real_days_cs']))
				{
					$hospital_days_cs_dmY[$patient_ipid] = $pdata['hospital']['real_days_cs'];
				}
				//hospiz days cs
				if(!empty($pdata['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs_dmY[$patient_ipid] = $pdata['hospiz']['real_days_cs'];
				}
				
				foreach($pdata['locations'] as $pat_location_row_id => $pat_location_data)
				{
					foreach($pat_location_data['days'] as $kl=>$lday)
					{
						if(in_array($lday,$pdata['real_active_days']))
						{

							if( empty($pat_location_data['type'])){
								$pat_location_data['type'] = 0 ;
							}
							
							//ISPC-2100 Carmen 28.10.2020
							if($pat_location_data['type'] == "4" )
							{
								$patient_days2locationtypes[$patient_ipid][$lday][] = "3";
							}
							elseif($pat_location_data['type'] == "6" )
							{
								$patient_days2locationtypes[$patient_ipid][$lday][] = "5";
							}
							else
							{
								$patient_days2locationtypes[$patient_ipid][$lday][] = $pat_location_data['type'];
							}
							//--
						}
					}
				}
			}
			
			foreach( $patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$del_val = "1";
					if ( ! in_array($loc_day,$hospital_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
						unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
					}
					
					/* 
					$del_val = "2";
					if ( ! in_array($loc_day,$hospiz_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
						unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
					} 
					*/
				}
			}
			foreach($patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$patient_days2locationtypes[$pipid][$loc_day] = end($day_loc_types);
				}
			}

			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
			$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];
			$active_days_in_period_cs = $patient_days[$ipid]['real_active_days'];


			$hospital_overall_days_cs = $patient_days_overall[$ipid]['hospital']['real_days_cs'];
			$hospiz_overall_days_cs = $patient_days_overall[$ipid]['hospiz']['real_days_cs'];
			$patient_all_days_overall_cs = $patient_days_overall[$ipid]['active_days'];

			if(empty($hospital_overall_days_cs))
			{
				$hospital_overall_days_cs = array();
			}

			if(empty($hospiz_overall_days_cs))
			{
				$hospiz_overall_days_cs = array();
			}

			// ALLOW HOSPIZ DAYS TO BE BILLED -  ISPC-2100
			$hospital_hospiz_overall_days_cs = array_merge($hospital_overall_days_cs, $hospiz_overall_days_cs);
// 			$hospital_hospiz_overall_days_cs = $hospital_overall_days_cs;

			foreach($hospital_hospiz_overall_days_cs as $k_hh => $v_hh)
			{
				$hospital_hospiz_overall_days_cs[$k_hh] = date('Y-m-d', strtotime($v_hh));
			}

			foreach($patient_all_days_overall_cs as $k_pad => $v_pad)
			{
				$patient_all_days_overall_cs[$k_pad] = date('Y-m-d', strtotime($v_pad));
			}

			foreach($active_days_in_period_cs as $k_active => $v_active)
			{
				$active_days_in_period_cs[$k_active] = date('Y-m-d', strtotime($v_active));
			}


			if($_REQUEST['csdbg'])
			{
				print_r("Old hospital_days\n");
				print_r($hospital_days);

				print_r("CS hospital_days\n");
				print_r($hospital_days_cs);

				print_r("Old Overall hospital_days\n");
				print_r($hospital_overall_days);

				print_r("CS Overall hospital_days\n");
				print_r($hospital_overall_days_cs);

				print_r("Old active_days_in_period\n");
				print_r($active_days_in_period);

				print_r("CS active_days_in_period\n");
				print_r($active_days_in_period_cs);

				print_r("CS hospital_hospiz_overall_days_cs\n");
				print_r($hospital_hospiz_overall_days_cs);



				exit;
			}
			//Client Hospital Settings END

			//get sapv in current period
			$sapv_days_cs = $this->get_period_sapv($ipid, $current_period, $hospital_hospiz_overall_days_cs);
			$sapv_days_overall_cs = $this->get_period_sapv($ipid, $overall_period, $hospital_hospiz_overall_days_cs);

			foreach($sapv_days_cs as $k_s_days => $v_s_days)
			{
				if($k_s_days != 'relevant_sapvs_days')
				{
					$sapv_days_inperiod_cs[] = $k_s_days;
				}
				else
				{
					$relevant_sapvs_days_cs = $v_s_days;
				}
			}
			asort($sapv_days_inperiod_cs);


			if(empty($pseudo_post['first_sapv_day']))
			{
				if(count($relevant_sapvs_days_cs['start']) > 0)
				{
					$this->view->first_sapv_day = date('d.m.Y', strtotime($relevant_sapvs_days_cs['start'][0]));
					$end_sapv_last = end($relevant_sapvs_days_cs['end']);
					$this->view->last_sapv_day = date('d.m.Y', strtotime($end_sapv_last));
				}
				else
				{
					$this->view->first_sapv_day = '0000-00-00 00:00:00';
					$this->view->last_sapv_day = '0000-00-00 00:00:00';
				}
			}

			//get pflegestuffe in current period
			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $current_period['start'], $current_period['end']);
			if($pflege_arr)
			{
				$last_pflege = end($pflege_arr);
				$this->view->patient_pflegestufe = $last_pflege['stage'];
			}
			else
			{
				$this->view->patient_pflegestufe = ' - ';
			}

			//get sapv(s) in current period
			$period_sapv = $sapvs->getSapvInPeriod($ipid, $current_period['start'], $current_period['end']);


			if($period_sapv[0]['status'] == "2" && $period_sapv[0]['approved_date'] != '0000-00-00 00:00:00' && strlen($period_sapv[0]['approved_date']) > 0 && date('Y-m-d', strtotime($period_sapv[0]['approved_date'])) != '1970-01-01')
			{
				$this->view->sapv_approve_date = date('d.m.Y', strtotime($period_sapv[0]['approved_date']));
			}
			else
			{
				$this->view->sapv_approve_date = ' - ';
			}

			if($period_sapv[0]['status'] == "2" && strlen($period_sapv[0]['approved_number']) > 0)
			{
				$this->view->sapv_approve_nr = $period_sapv[0]['approved_number'];
			}
			else
			{
				$this->view->sapv_approve_nr = ' - ';
			}


			$this->view->start_relevant_sapv = $period_sapv[0]['verordnungam'];
			$last_relevant_sapv = end($period_sapv);
			$this->view->end_relevant_sapv = $last_relevant_sapv['verordnungbis'];
			
			//get all sets form types
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
				$set_one_ids[] = $v_set_one['id'];
			}

			$set_two = $form_types->get_form_types($clientid, '2');
			foreach($set_two as $k_set_two => $v_set_two)
			{
				$set_two_ids[] = $v_set_two['id'];
			}

			$set_three = $form_types->get_form_types($clientid, '3');
			foreach($set_three as $k_set_three => $v_set_three)
			{
				$set_three_ids[] = $v_set_three['id'];
			}


			$set_fourth = $form_types->get_form_types($clientid, '4');
			foreach($set_fourth as $k_set_fourth => $v_set_fourth)
			{
				$set_fourth_ids[] = $v_set_fourth['id'];
			}

			$set_ids['one'] = $set_one_ids;
			$set_ids['two'] = $set_two_ids;
			$set_ids['three'] = $set_three_ids;
			$set_ids['fourth'] = $set_fourth_ids;

			//get contact forms in current period
			$contact_forms_days = $this->get_period_contact_forms($ipid, $current_period);
			
			$contact_forms_ids[] = '999999999';

			$exclude_after_discharge = array();
			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf))
					{
						if(strtotime($v_cf['start_date']) > strtotime($cycles[$ipid]['discharge_date']) && $pm['isdischarged'] == '1')
						{
							//excluded cf after last discharge
							$exclude_after_discharge[] = $v_cf['id'];
						}
						$contact_forms_ids[] = $v_cf['id'];
					}
				}
			}
			ksort($contact_forms_days);
			$block_classification = new FormBlockClassification();
			$classification_data = $block_classification->get_multiple_block_classification($ipid, $contact_forms_ids);


			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data) && in_array($k_cf_day, $active_days_in_period_cs))
					{
						if((in_array($v_cf['form_type'], $set_ids['fourth']) && $classification_data[$v_cf['id']]['intern'] == '0') || !in_array($v_cf['form_type'], $set_ids['fourth']))
						{
							$contact_forms_days_ids[$k_cf_day][] = $v_cf['id'];
							$contact_forms_days_details[$k_cf_day][$v_cf['id']] = $v_cf;
							$contact_forms2form_types[$v_cf['id']][] = $v_cf['form_type'];
						}
					}
				}
			}
			
			if($_REQUEST['dbggq'])
			{
				print_r($pm);
				print_r("\nset_ids\n");
				print_r($set_ids);
				print_r("contact_forms_days \n");
				print_r($contact_forms_days);

				print_r("classification_data \n");
				print_r($classification_data);
				exit;
			}

			foreach($contact_forms_ids as $k_contactform_data => $v_contactform_data)
			{
				if(!array_key_exists($v_contactform_data, $classification_data))
				{
					unset($contact_forms_ids[array_search($v_contactform_data, $contact_forms_ids)]);
				}
			}
			$contact_forms_ids = array_values(array_unique($contact_forms_ids));

			//get patient course in current period
			$course_days = $this->get_period_course($ipid, $cycles[$ipid]['discharge_date'],true);
			
			if($_REQUEST['qz'])
			{
				print_r($course_days);
				exit;
			}

			foreach($course_days as $k_course_date => $v_course_details)
			{
			    foreach($v_course_details as $k_couses => $v_courses)
			    {
			        $course[$k_course_date][] = $v_courses['course_type'];
			    } 
			    
				$k_course_date_alt = date('d.m.Y', strtotime($k_course_date));
				if(in_array($k_course_date, $active_days_in_period_cs) 
						&& !in_array($k_course_date_alt, $hospital_days_cs) 
						&& !in_array($k_course_date_alt, $hospiz_days_cs)
				)
				{
					foreach($v_course_details as $k_couse => $v_course)
					{
						if($v_course_details[$k_couse]['course_type'] == "U" && in_array($k_course_date, $sapv_days_inperiod_cs) && in_array('1', $sapv_days_cs[$k_course_date]))
						{
							$clasifizierung[$k_course_date]['beratung'] += 1;
							//ISPC-1562 BW Nachweis
							$extra_details[$k_course_date]['beratung'][] = $v_course;;
						}
						else if($v_course['course_type'] == 'V' && in_array($k_course_date, $sapv_days_inperiod_cs) && in_array('2', $sapv_days_cs[$k_course_date]))
						{
							$clasifizierung[$k_course_date]['koordination'] += 1;
							//ISPC-1562 BW Nachweis
							$extra_details[$k_course_date]['koordination'][] = $v_course;;
						}
					}
				}
			}
			
			if($_REQUEST['qz'])
			{
				print_r($clasifizierung);
				print_r($extra_details);
			}

			//get real active patient days (active, with sapv and no hospital/hospiz)
			$real_active_days_overall_cs = $this->real_active_days($active_days, $hospital_hospiz_overall_days_cs, $sapv_days_overall_cs);
			$days_nosapv_overall_cs = $this->nosapv_days($patient_all_days_overall_cs, $hospital_hospiz_overall_days_cs, $sapv_days_overall_cs);


			asort($active_days_in_period);


			if(count($cycles[$ipid]['admissionDates']) > 0)
			{
				foreach($cycles[$ipid]['admissionDates'] as $k_adm => $v_adm)
				{
					$start_periods[$k_adm] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$k_adm]))
					{
						$end_periods[$k_adm] = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$k_adm]['date']));
					}
					else
					{
						$end_periods[$k_adm] = date('Y-m-d', time());
					}
				}
			}
			else
			{
				$start_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));
				$end_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
			}

			//get check for flatrate case and return "7 days flat rate" days
			$flatrate = $this->flatrate_days($ipid, $clientid, $start_periods, $end_periods, $current_period, $real_active_days_overall_cs, $cycles[$ipid], $days_nosapv_overall_cs, $hospital_hospiz_overall_days_cs);
			 
			if($_REQUEST['dbg_flatrate'] == "1")
			{
				print_r("start_period\ns");
				print_r($start_periods);

				print_r("end_periods\n");
				print_r($end_periods);

				print_r("current_period\n");
				print_r($current_period);

				print_r("real_active_days_overall\n");
				print_r($real_active_days_overall);


				print_r("CS real_active_days\n");
				print_r($real_active_days_cs);

				print_r("CS real_active_days_overall\n");
				print_r($real_active_days_overall_cs);

				print_r("PAtient days overall");
				print_r($patient_days_overall[$ipid]['treatment_days']);

				print_r("cycles\n");
				print_r($cycles[$ipid]);

				print_r("sapv_days_overall\n");
				print_r($sapv_days_overall);

				print_r("sapv_days_overall_cs\n");
				print_r($sapv_days_overall_cs);

				print_r("days_nosapv_overall\n");
				print_r($days_nosapv_overall);

				print_r("CS days_nosapv_overall\n");
				print_r($days_nosapv_overall_cs);

				print_r("hospital_overall_days\n");
				print_r($hospital_overall_days);
				print_r("CS hospital hospiz overall\n");
				print_r($hospital_hospiz_overall_days_cs);

				print_r($patient_days);

				print_r("Flatrate \n");
				print_r($flatrate);

				print_r("Flatrate Overall");
				print_r($flatrate_overall);
				exit;
			}

			//get performance shortcuts
			$shortcuts = Pms_CommonData::get_prices_shortcuts();

// 			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);
			$master_price_list = $p_list->get_period_price_list_specific($current_period['start'], $current_period['end'],"PricePerformance");

			$this->view->real_active_days_overall_cs = $real_active_days_overall_cs;
			$this->view->shortcuts = $shortcuts['performance'];
			$this->view->price_list = $master_price_list;
			$pseudo_post['shortcuts'] = $shortcuts['performance'];
			$pseudo_post['price_list'] = $master_price_list;

			// ==============================================
			// HACK - TODO-16 BWS10337  - 16.15.2015 - Start
			// ==============================================
			$remove_flatrate_ipids = array("61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"); // BWS10295
			$rfi_start["61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"] = "2015-11-24";
			$rfi_end["61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"] = "2015-11-30";
			
			if(in_array($ipid,$remove_flatrate_ipids)  &&  Pms_CommonData::isintersected($rfi_start[$ipid], $rfi_end[$ipid], $current_period['start'], $current_period['end']) )
			{
			    $flatrate = array();
			}
			// ==============================================
			// HACK - TODO-16 BWS10337  - 16.15.2015 - End
			// ==============================================
			
			/*  ###################################################### */
			/*  ################### MASTER ####################### */
			/*  ###################################################### */
			
			$performance_overall_saved_params = array();
			
			$performance_overall_saved_params['ipid'] = $ipid; 
			$performance_overall_saved_params['clientid'] = $clientid; 
			$performance_overall_saved_params['overall_period'] = $overall_performance_period; 
			$performance_overall_saved_params['active_days'] = $active_days; 
			$performance_overall_saved_params['set_ids'] = $set_ids; 
			$performance_overall_saved_params['flatrate'] = $flatrate; 
			$performance_overall_saved_params['flatrate_admissions'] = $flatrate_admissions; 
			$performance_overall_saved_params['master_price_list'] = $master_price_list; 
			$performance_overall_saved_params['days_in_period_overall'] = $days_in_period_overall_performance; 
			$performance_overall_saved_params['hospital_hospiz_days'] = $hospital_hospiz_overall_days_cs; 
			$performance_overall_saved_params['sapv_days_cs'] = false;
			$performance_overall_saved_params['patient_days2locationtypes'] = $patient_days2locationtypes;

			$overall_patient_shortcuts = $this->patient_performance_overall_saved($performance_overall_saved_params);
			$flatrate_continued = $this->flatrate_days_continued_saved($ipid, $clientid, $start_periods, $end_periods, $current_period, $real_active_days_overall_cs, $cycles[$ipid], $days_nosapv_overall_cs, $hospital_hospiz_overall_days_cs, $overall_patient_shortcuts['days_products']);

// 			dd($overall_patient_shortcuts);
			
			if($_REQUEST['dbg_flatrate'] == "2")
			{
				print_r("flatrate\n");
				print_r($flatrate);
				print_r("overall_patient_shortcuts\n");
				print_r($overall_patient_shortcuts);
				print_r("flatrate_continued\n");
				print_r($flatrate_continued);
				exit;
			}
	 
						
			
			
			$overall_shorts['shortcuts'] = array();
			foreach($overall_patient_shortcuts['shortcuts'] as $k_short_overall => $v_short_overall)
			{
				if(in_array($k_short_overall, $days_in_period_overall_performance_cmonth))
				{
					$overall_shorts['shortcuts'] = array_merge($overall_shorts['shortcuts'], $v_short_overall);
				}
			}
			$overall_patient_shortcuts['shortcuts'] = $overall_shorts['shortcuts'];

			$overall_k_shorts['last_koord_dates'] = array();
			foreach($overall_patient_shortcuts['last_koord_dates'] as $k_short_overall => $v_short_overall)
			{
				if(in_array($k_short_overall, $days_in_period_overall_performance_cmonth))
				{
					$overall_k_shorts['last_koord_dates'] = array_merge($overall_k_shorts['last_koord_dates'], $v_short_overall);
				}
			}
			$overall_patient_shortcuts['last_koord_dates'] = $overall_k_shorts['last_koord_dates'];

			$week_numbers_arr[] = '9999999999';

			if(count($overall_patient_shortcuts['last_koord_dates']) != 0)
			{
				$last_koord_dates = $overall_patient_shortcuts['last_koord_dates'];
			}
			else
			{
				$last_koord_dates[] = '1970-01-01';
			}

			foreach($days_in_period as $k_period_day => $v_period_day)
			{
				//$hospital_days_cs format is d.m.Y
				$v_period_day_alt = date('d.m.Y', strtotime($v_period_day));

				$day_location_type = $patient_days2locationtypes[$ipid][date('d.m.Y',strtotime($v_period_day))];
				
				$day_shortcuts = array();

				if(count($month_shortcuts) == 0)
				{
					$month_shortcuts = array();
				}

				$master_data[$v_period_day] = array();

				if(count($overall_patient_shortcuts['last_koord_dates']) > '0')
				{
					$last_koord_date_overall = end($overall_patient_shortcuts['last_koord_dates']);
					$week_numbers_arr[$last_koord_date_overall] = date('W', strtotime($last_koord_date_overall));
				}

				//calculate set one form_type visits
				//first get flatrate exception and set shortcut
				$shortcut = '';
				$set_one_result = array_intersect($set_one_ids, $contact_forms_days[$v_period_day]['form_types']);

				if($_REQUEST['sapv_days'] == '1')
				{
					print_r("contact_forms_days\n");
					print_r($sapv_days);
					print_r("Overall shortcuts\n");
					print_r($overall_patient_shortcuts);

					exit;
				}

				if((in_array($v_period_day, $flatrate) || in_array($v_period_day, $flatrate_continued)) && !in_array($v_period_day, $hospital_days))
				{
					$shortcut = '37b1';
					$month_shortcuts[] = $shortcut;
					$overall_patient_shortcuts['shortcuts'][] = $shortcut;
				}
				
				
				
				foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf_one)
				{
					if(!in_array($v_cf_one['id'], $exclude_after_discharge) && in_array($v_cf_one['form_type'], $set_one_ids))
					{
						if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && array_key_exists($v_period_day, $contact_forms_days) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs) && count($set_one_result) != 0) //normal set conditions
						{
//						we have visits=> check if there are required visits for this action set
							if(in_array('4', $sapv_days_cs[$v_period_day]) || in_array('3', $sapv_days_cs[$v_period_day]))
							{
								$shortcut = '37b2';
								
								//ISPC-1562 BW Nachweis
								$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
								
							}
						}
					}
				}

				if(!empty($shortcut))
				{
					if($shortcut == '37b1' && (in_array($v_period_day, $flatrate['pay_days']) || in_array($v_period_day, $flatrate_continued['pay_days'])))
					{
						$master_data[$v_period_day][$shortcut]['pay_days'] = '1';
					}
					$day_shortcuts[] = $shortcut;
					$master_data[$v_period_day][$shortcut]['shortcut'] = $shortcut;
					$master_data[$v_period_day][$shortcut]['qty'] = '1';
					$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
					$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
					$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
					
					
					$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
				}
				
				
				
				
				if($_REQUEST['qd'])
				{
					print_r("OPS: \n");
					print_r($overall_patient_shortcuts);
					print_r("MD: \n");
					print_r($master_data);
					exit;
				}
				//sapv overwrite if formtype is set 4
				//calculate set two form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				$set_fourth_result = array_intersect($set_fourth_ids, $contact_forms_days[$v_period_day]['form_types']);

				if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					$set_two_result = array_intersect($set_two_ids, $contact_forms_days[$v_period_day]['form_types']);

//					if((count($set_two_result) != 0 || in_array('U', $course_days[$v_period_day])) && in_array('1', $sapv_days_cs[$v_period_day]))
// 					if((count($set_two_result) != 0 || in_array('U', $course_days[$v_period_day])) && in_array('1', $sapv_days_cs[$v_period_day]) || (count($set_ones_result) != 0 && in_array('1', $sapv_days_cs[$v_period_day])))
					if((count($set_two_result) != 0 || in_array('U', $course[$v_period_day])) && in_array('1', $sapv_days_cs[$v_period_day]) || (count($set_ones_result) != 0 && in_array('1', $sapv_days_cs[$v_period_day])))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							if(is_numeric($k_cf) && !in_array($v_cf['id'], $exclude_after_discharge))
							{
								$shortcut = '';
								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']) && !in_array($v_cf['form_type'], $set_one_ids))
								{
									$shortcut = '37b5';
								}


								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_two_ids) ))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
    									//ISPC-1562 BW Nachweis
    									$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
    									//ISPC-1562 BW Nachweis
    									$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
									}

									$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
								}
							}
						}

						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							if($v_day_course['course_type'] == 'U')
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$v_period_day]['37b6']['qty'] < '2')
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
									
                                    //ISPC-1562 BW Nachweis 
									$extra_data[$v_period_day][$shortcut][] = $course_days[$v_period_day][$k_day_course];
									
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
								}
							}
						}
					}
				}


				//calculate set three form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					$last_koord_day = end($last_koord_dates);
					$set_three_result = array_intersect($set_three_ids, $contact_forms_days[$v_period_day]['form_types']);

// 					if((count($set_three_result) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days_cs[$v_period_day]))
					if((count($set_three_result) != 0 || in_array('V', $course[$v_period_day])) && in_array('2', $sapv_days_cs[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform) && !in_array($v_cform['id'], $exclude_after_discharge))
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']) && !in_array($v_cform['form_type'], $set_one_ids))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && in_array($v_cform['form_type'], $set_three_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
    									//ISPC-1562 BW Nachweis
        								$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
    									
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
    									//ISPC-1562 BW Nachweis
        								$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
									
									}

									$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
									
									
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}

						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							$last_koord_day = end($last_koord_dates);
							if($v_day_course['course_type'] == 'V')
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(($shortcut == '37b7' || $shortcut == '37b8'))
								{
									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr))
									{
										$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];

										$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
										$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
										
										
										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $course_days[$v_period_day][$k_day_course];
										
										$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$week_numbers_arr[] = $week_number;
										$last_koord_dates[] = $v_period_day;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
										$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
										$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
										
										
										
										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $course_days[$v_period_day][$k_day_course]; //  need more info here
										
										$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$last_koord_dates[] = $v_period_day;
									}
								}
							}
						}
					}
				}


				//calculate set 4 (ISPC-241)
				if((count($set_fourth_result) != 0 || count($set_one_result) != 0) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					//setup each form sapv based on classification block selection
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
						{
							if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
							else if(in_array('1', $sapv_days_cs[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
						}
						else if($classification_data[$v_cf_day]['intern'] != '1')
						{
							if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								//switch between BE-KO if VV is not BE
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
						}
					}

					//U & V at the top
					//beratung
					if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array('1', $sapv_days_cs[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							//check if there are 2 beratung change sapv in koord
							if($master_data[$v_period_day]['37b6']['qty'] == '2' && (count($set_fourth_result) != 0 || count($set_one_result) != 0) && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
							}

							if(is_numeric($k_cf) && $sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1' && !in_array($v_cf['id'], $exclude_after_discharge) && (in_array($v_cf['form_type'], $set_fourth_ids) && (($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')) || in_array($v_cf['form_type'], $set_one_ids)))
							{
								$shortcut = '';
								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5') //only b5 or b6
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_fourth_ids) || in_array($v_cf['form_type'], $set_one_ids)))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
										
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
										//ISPC-1562 BW Nachweis										
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
										
									}

									$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
								}
							}
						}
					}

					//koordination
					$last_koord_day = end($last_koord_dates);

					if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array('2', $sapv_days_cs[$v_period_day]))
					{

						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform) && $sapv_status[$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2' && !in_array($v_cform['id'], $exclude_after_discharge))
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}
									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;

									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && (in_array($v_cform['form_type'], $set_fourth_ids) || in_array($v_cform['form_type'], $set_one_ids)))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];

										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
										
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];

										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
									}

									$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
									
									
									
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}
					}
				}
				
				//add exclusion
				if(in_array($v_period_day, $sapv_days_inperiod_cs) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						//check if contactform type for each days
						if(in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids) && (in_array('4', $sapv_days_cs[$v_period_day]) || in_array('3', $sapv_days_cs[$v_period_day]) ))
						{
							$clasifizierung[$v_period_day]['home_visit'] += 1;
							//ISPC-1562 BW Nachweis
							$extra_details[$v_period_day]['home_visit'] []= $contact_forms_days_details[$v_period_day][$v_cf_day];;
						}
						else
						{
							//$clasifizierung[$v_period_day]['home_visit'] += 0;
							//sum classifizierung data if form is not housebesuche type(1)
							if($clasifizierung[$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days_cs[$v_period_day]) &&
								(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
								//ISPC-1562 BW Nachweis
								$extra_details[$v_period_day]['beratung'] []= $contact_forms_days_details[$v_period_day][$v_cf_day];
								
							}
							else if($clasifizierung[$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$v_period_day]) || in_array('2', $sapv_days_cs[$v_period_day])))
							{
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]) && !in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
							}
							else if($clasifizierung[$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$v_period_day]) || in_array('2', $sapv_days_cs[$v_period_day])))
							{
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]) && !in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days_cs[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
								//ISPC-1562 BW Nachweis
								$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
							}
							else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days_cs[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['koordination'] += '1';
								//ISPC-1562 BW Nachweis
								$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
							}
							else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0') && in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids))
							{
								if(in_array('1', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else if(in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
							}

							$count_be[$v_period_day] += 1;
						}
					}
				}
			}
			ksort($clasifizierung);
			ksort($extra_details);
			
			
			
// 			dd($master_data);
// 			dd($master_price_list);
// 			dd($patient_days2locationtypes);
			
			/* ################################### */
			/* SAVED DATA  -- ISPC:1927  */
			/* ################################### */

			$bw_pr = new BwPerformanceRecord();
			$bw_data = $bw_pr->get_bw_performance_record($ipid, $current_period['start'], $master_price_list,$patient_days2locationtypes);
			
			if(!isset($bw_data) || empty($bw_data))
			{
				$save_data = "0";
			} else{
				$save_data = "1";
			}

			
			if(!empty($bw_data)){
				$saved_per_moth[$ipid] = array();
				foreach($bw_data as $days=>$vals){
					foreach($vals as $sh=>$shd){
						$saved_per_moth[$ipid][date("mY",strtotime($days))][] = $sh;
					}
				}
		 
				foreach($days_in_period  as $k=>$act_day){
					if( isset($bw_data[$act_day]) && !empty($bw_data[$act_day]) ){ // check if more thant the flatrate from prevoius month is saved.
						if(count($saved_per_moth[$ipid][date("mY",strtotime($act_day))]) >=6 ){
							$final_data[$ipid][$act_day] = $bw_data[$act_day];
						} else {
							$final_data[$ipid][$act_day] = array_merge($master_data[$act_day],$bw_data[$act_day]);
							$save_data = "0";
						}
							
					} else {
						$final_data[$ipid][$act_day] = $master_data[$act_day];
					}
				}
				$master_data = $final_data[$ipid];
			}
			$this->view->save_data = $save_data;
			
// 			print_r($master_data); //exit;
			
			// ########################
			// CREATE ALL PATIENT FLATRATE
			// ########################
			foreach($months as $k=>$mnth){
				$overall_data[$mnth] = $this->performancerecordform_data($_REQUEST['id'],$mnth);
			}
			
			foreach($overall_data as $month=>$mdata){
				foreach($mdata as $mdate=>$date_values){
					foreach($date_values as $dv_sh=>$dv_sh_data){
						if($dv_sh_data['shortcut'] == "37b1" && $dv_sh_data['qty'] > 0){
							$patient_flatrate['fl_days'][] = $mdate;
							if($dv_sh_data['pay_days'] > 0){
								$patient_flatrate['pay_days'][] = $mdate;
							}
						}
					}
				}
			}
			
			$flatrate_intervals = array();
			$fl_added_days = array();
			foreach($patient_flatrate['pay_days'] as $kpd=>$fpd ){
				foreach($patient_flatrate['fl_days'] as $k=>$fd ){
					if(isset($patient_flatrate['pay_days'][$kpd+1])){
						if($fd == $fpd || strtotime($fd) < strtotime($patient_flatrate['pay_days'][$kpd+1]) && !in_array($fd,$fl_added_days)) {
							$flatrate_intervals[$fpd][]= $fd;
							$fl_added_days[]= $fd;
						}
					} else{
						if(!in_array($fd,$fl_added_days)){
							$flatrate_intervals[$fpd][]= $fd;
						}
					}
					
				}
			}
			
			foreach($flatrate_intervals as $pay_dayss => $fdays){
				foreach($fdays as $k=>$fdate){
					$flatrate_intervals_d2p[$fdate] = $pay_dayss;
				}
			}
			
			
// 			var_dump($flatrate_intervals); 
// 			exit;
			$this->view->overall_flatrate_days_js =json_encode($patient_flatrate['fl_days']); ;
			$this->view->flatrate_days2payd = $flatrate_intervals_d2p;
			$this->view->flatrate_days2payd_js =json_encode($flatrate_intervals_d2p); ;
			$this->view->flatrate_intervals = $flatrate_intervals;
			$this->view->flatrate_intervals_js = json_encode($flatrate_intervals);;
	 
			
			
			if($_REQUEST['qz'])
			{
				print_r("2: \n");
				print_r($clasifizierung);
				print_r($sapv_status);
				print_r($extra_details);
				exit;
			}

			if(strlen($pseudo_post['first_active_day']) == 0)
			{

				if(count($clasifizierung) > 0)
				{
					$activity_days_array = array_keys($clasifizierung);
					$end_activity_date = end($activity_days_array);

					$first_active_day = date('d.m.Y', strtotime($activity_days_array[0]));
					$last_active_day = date('d.m.Y', strtotime($end_activity_date));
				}
				else
				{
					$first_active_day = '0000-00-00 00:00:00';
					$last_active_day = '0000-00-00 00:00:00';
				}
			}
			else
			{
				$first_active_day = $pseudo_post['first_active_day'];
				$last_active_day = $pseudo_post['last_active_day'];
			}

			$this->view->first_active_day = $first_active_day;
			$this->view->last_active_day = $last_active_day;
			$pseudo_post['first_active_day'] = $first_active_day;
			$pseudo_post['last_active_day'] = $last_active_day;

			if($_REQUEST['dbg'])
			{
				print_r("X\n");
				print_r($classification_data);
				print_r("Y\n");
				print_r($contact_forms_days);
				print_r("Z\n");
				print_r($contact_forms2form_types);
//				exit;
			}

			$this->view->classification_box = $clasifizierung;
			$pseudo_post['classification_box'] = $clasifizierung;

			if($_REQUEST['dbg'])
			{
				print_r("(Hospital \n");
				print_r($hospital_days);
				print_r("(Active days in period \n");
				print_r($active_days_in_period);
				print_r($sapv_status);
				print_r($master_data);
				
				print_r("Extra details listed in invoices"); //     ISPC-1562 BW Nachweis 
				print_r($extra_details);
				exit;
			}





			if($_REQUEST['dbgq'] == 3)
			{
//			print_r("\n Cycles Days \n");
//			print_r($cycles);
//			print_r("\n Active Days \n");
//			print_r($active_days_in_period);
//			print_r("\n Current Days \n");
//			print_r($current_period);
//			print_r("\n SAPV Days\n");
//			print_r($sapv_days);
//			print_r("\n Hospital Days\n");
//			print_r($hospital_days);
//			print_r("\n Contact Forms Days\n");
//			print_r($contact_forms_days);
//			print_r("\n Course Days \n");
//			print_r($course_days);
//			print_r($week_numbers_arr);
//			print_r("\n Real Active Days \n");
//			print_r($real_active_days);
//			print_r("\n Flatrate\n");
//			print_r($flatrate);
//			print_r("\n Flatrate period days \n");
//			print_r($flatrate_admissions);
//		print_r("\n Master Price List\n");
//		print_r($master_price_list);
				print_r("\n Master Data\n");
				print_r($master_data);
			}

			$this->view->period_days = $days_in_period;
			$this->view->totals = $totals;
			$this->view->master_data = $master_data;

			$pseudo_post['clientid'] = $clientid;
			$pseudo_post['period_days'] = $days_in_period;

			$pseudo_post['totals'] = $totals;
			$pseudo_post['master_data'] = $master_data;
			$pseudo_post['extra_data'] = $extra_data;
			$pseudo_post['extra_data_details'] = $extra_details;
			
			$pseudo_post['health_insurance_ik'] = $this->view->health_insurance_ik;
			$pseudo_post['insurance_no'] = $this->view->insurance_no;
			$pseudo_post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;

			$pseudo_post['address'] = $pseudo_post['hi_subdiv_address'];
			$pseudo_post['patient_address'] = $patient_address;
			$pseudo_post['sapv_approve_date'] = $this->view->sapv_approve_date;
			$pseudo_post['sapv_approve_nr'] = $this->view->sapv_approve_nr;

			$pseudo_post['patient_pflegestufe'] = $this->view->patient_pflegestufe;

			if(empty($pseudo_post['first_sapv_day']))
			{
				$pseudo_post['first_sapv_day'] = $this->view->first_sapv_day;
				$pseudo_post['last_sapv_day'] = $this->view->last_sapv_day;
			}

			
			$pseudo_post['kv_header']['patient_name_address'] = htmlspecialchars($pm['last_name']) . ", " . htmlspecialchars($pm['first_name']) . "\n" . htmlspecialchars($pm['street1']) . "\n" . htmlspecialchars($pm['zip']) . "&nbsp;" . htmlspecialchars($pm['city']);
			$pseudo_post['kv_header']['patient_birthdate'] = $pm['birthd'];
			$pseudo_post['kv_header']['patient_name'] = htmlspecialchars($pm['last_name']) . ", " . htmlspecialchars($pm['first_name']);
			$pseudo_post['kv_header']['patient_address'] = htmlspecialchars($pm['street1']) . "&nbsp;" . htmlspecialchars($pm['zip']) . "\n" . htmlspecialchars($pm['city']);
				
			$client_form_type =  FormTypeActions::get_form_type_actions();
			
// 			print_r($client_form_type); exit;
			$pseudo_post['client_form_type'] = $client_form_type;
			$pseudo_post['users_array'] = $user_array ;
			
			$pseudo_post['alias']['home_visit'] = "Hausbesuch";
			$pseudo_post['alias']['beratung'] = "Beratung";
			$pseudo_post['alias']['koordination'] = "Koordination";

			if($this->getRequest()->isPost())
			{
			    
				  
				if(strlen($_POST['pdf']) > 0){
					
	// 			    print_R($pseudo_post['kv_header']); exit;
					//normal anlage like pdf
					$pseudo_post['client_details'] = $client_details[0];
					$pseudo_post['client_city'] = $client_details[0]['city'];
					$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];
	
					$pseudo_post['bottom_part'] = true;
					if($_REQUEST['new_version'] == "1")
					{
	    				$this->generate_pdf($pseudo_post, "form_performance_items_pdf", "performancerecordpdf_items.html", "P"); // This is per patient - the form
					} 
					else
					{
	    				$this->generate_pdf($pseudo_post, "PerformancePdf", "performancerecordpdf.html");
					}
				}  elseif(strlen($_POST['save_bwperformance']) > 0 && strlen($_POST['reset_bwperformance']) == 0){
			 
					if(strlen($_REQUEST['list']) > 0)
					{
						$period_list = '&list=' . $_REQUEST['list'];
					}
					else
					{
						$period_list = '';
					}
					
// 					clear old entries for curent month
					$reset_sapv_form_data = Application_Form_BwPerformanceRecord::reset_for_saving($ipid, $current_period['start'], $_POST['master_data'],$flatrate_intervals,$days_in_period);
					
					//insert
					$insert_sapv_form_data = Application_Form_BwPerformanceRecord::insert_values($ipid, $_POST['master_data'], $days_in_period, $shortcuts['performance'],$flatrate_intervals);
					$this->_redirect(APP_BASE . 'invoice/performancerecordform?id=' . $_REQUEST['id'] . $period_list);
					exit;
					
					
					
				} elseif (strlen($_POST['reset_bwperformance']) > "1"){
					if(strlen($_REQUEST['list']) > 0)
					{
						$period_list = '&list=' . $_REQUEST['list'];
					}
					else
					{
						$period_list = '';
					}
					
// 					$reset_sapv_form_data = Application_Form_BwPerformanceRecord::reset($ipid, $current_period['start'],  $flatrate_intervals,$days_in_period);
					$reset_sapv_form_data = Application_Form_BwPerformanceRecord::reset($ipid, $current_period['start'], $_POST['master_data'],$flatrate_intervals,$days_in_period);
					$this->_redirect(APP_BASE . 'invoice/performancerecordform?id=' . $_REQUEST['id'] . $period_list);
					exit;
					
				}
			}

			// ========================================================================================
			// ======================= START ::  $_REQUEST['mode'] == 'pdfs' =============================
			// ========================================================================================
					
			//change masterdata to invoicemasterdata and list pdf with invoice and anlage like
			if($_REQUEST['mode'] == 'pdfs')
			{
				
			
				$only_one = array();
				foreach($master_data as $k_master_data => $v_master_data)
				{
					foreach($v_master_data as $k_master_shortcut => $v_master_values)
					{

						if($k_master_shortcut == '37b1')
						{
							if($v_master_data[$k_master_shortcut]['pay_days'] == '1')
							{
								if(!in_array($k_master_shortcut, $only_one) && ($v_master_values['price_list'] && $v_master_values['price'] && $v_master_values['qty'] > 0 ) )
								{
									$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut'] = $k_master_shortcut;
									$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['qty'] += '1';
									$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['price'] = $v_master_values['price'];
// 									$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['dates'][] = $k_master_data;
									$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut_total'] = $v_master_values['price'];
									
									
									$grand_total += $v_master_values['price'];
								}
							}	
						}
						else
						{
							/* $invoice_master[$k_master_shortcut]['qty'] += $v_master_values['qty'];
							$invoice_master[$k_master_shortcut]['price'] = $v_master_values['price'];
							$invoice_master[$k_master_shortcut]['shortcut_total'] += ($v_master_values['qty'] * $v_master_values['price']); */
							if($v_master_values['price_list'] && $v_master_values['price'] && $v_master_values['qty'] > 0 ) {
								$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut'] = $k_master_shortcut;
								$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['qty'] += $v_master_values['qty'];
								$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['price'] = $v_master_values['price'];
// 								$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['dates'][] = $k_master_data;
								$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut_total'] += ($v_master_values['qty'] * $v_master_values['price']);
								$grand_total += ($v_master_values['qty'] * $v_master_values['price']);
							}
						}
					}
				}
				
// 				ksort($invoice_master);
				$pseudo_post['invoice_items'] = array_values($invoice_master);
				$pseudo_post['grand_total'] = $grand_total;
				$pseudo_post['client_details'] = $client_details[0];
				$pseudo_post['client_city'] = $client_details[0]['city'];
				$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];

				if(empty($pseudo_post['current_period_start']))
				{
					$pseudo_post['current_period_start'] = date('d.m.Y', strtotime($this->view->start_relevant_sapv));
					$pseudo_post['current_period_end'] = date('d.m.Y', strtotime($this->view->end_relevant_sapv));
				}
				$pseudo_post['bottom_part'] = false;


				if($_REQUEST['old_version'] =="1")
				{
    				$orientation = array('P', 'L');
				} 
				else
				{
    				$orientation = array('P', 'P');
				}
				$background_pages = array('0'); //0 is first page;
				
								
				if($_REQUEST['pdfquick'] != '1' || strlen($_REQUEST['pdfquick']) == 0)
				{

//				21.06.2013 Added invoice number type START
					$bw_invoices_number = $bw_invoices->get_next_invoice_number($clientid, true);
					$prefix = $bw_invoices_number['prefix'];
					$invoicenumber = $bw_invoices_number['invoicenumber'];

//				21.06.2013 Added invoice number type END
					//insert invoice
					$ins_inv = new BwInvoices();
					$ins_inv->invoice_start = $current_period['start'];
					$ins_inv->invoice_end = $current_period['end'];
					$ins_inv->start_active = date('Y-m-d H:i:s', strtotime($pseudo_post['first_active_day']));
					$ins_inv->end_active = date('Y-m-d H:i:s', strtotime($pseudo_post['last_active_day']));

					$ins_inv->start_sapv = date('Y-m-d H:i:s', strtotime($pseudo_post['first_sapv_day']));
					$ins_inv->end_sapv = date('Y-m-d H:i:s', strtotime($pseudo_post['last_sapv_day']));

					$ins_inv->sapv_approve_date = date('Y-m-d H:i:s', strtotime($pseudo_post['sapv_approve_date']));
					$ins_inv->sapv_approve_nr = $pseudo_post['sapv_approve_nr'];
					$ins_inv->ipid = $ipid;
					$ins_inv->client = $clientid;
					$ins_inv->prefix = $prefix;
					$ins_inv->invoice_number = $invoicenumber;
					$ins_inv->invoice_total = $grand_total;
					$ins_inv->address = (strlen($pseudo_post['patient_address']) > '0') ? $pseudo_post['patient_address'] : $pseudo_post['address'];
// 				$ins_inv->status = '2';
					$ins_inv->status = '1'; // DRAFT - ENTWURF
					$ins_inv->save();

					$ins_id = $ins_inv->id;
					$pseudo_post['prefix'] = $prefix;

					foreach($invoice_master as $k_shortcut_inv => $v_values_inv)
					{
						if($v_values_inv['qty'] > 0){
							$invoice_items[] = array(
								'invoice' => $ins_id,
								'client' => $clientid,
								'shortcut' => $v_values_inv['shortcut'],
								'qty' => $v_values_inv['qty'],
								'price' => $v_values_inv['price']
							);
						}
					}

					if(count($invoice_items) > 0)
					{
						//insert many records with one query!!
						$collection = new Doctrine_Collection('BwInvoiceItems');
						$collection->fromArray($invoice_items);
						$collection->save();
					}

					$pseudo_post['unique_id'] = $ins_id;
					
					

					$pseudo_post['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($current_period['start']));
					$pseudo_post['invoice_data']['invoice_end'] = date('d.m.Y', strtotime($current_period['end']));
					$pseudo_post['invoice_data']['invoice_number'] = $prefix.$invoicenumber;
					
				}

				if(strlen($_REQUEST['iid']) > 0)
				{
					if($bwinvoice_details['sapv_approve_date'] != '0000-00-00 00:00:00' && strlen($bwinvoice_details['sapv_approve_date']) > 0 && $bwinvoice_details['sapv_approve_date'] != '1970-01-01 00:00:00')
					{
						$pseudo_post['sapv_approve_date'] = date('d.m.Y', strtotime($bwinvoice_details['sapv_approve_date']));
					}
					else
					{
						$pseudo_post['sapv_approve_date'] = ' - ';
					}


					foreach($bwinvoice_details['items'] as $k_itm => $v_itm)
					{
						$items_invoice[$v_itm['shortcut']] = $v_itm;
						$items_invoice[$v_itm['shortcut']]['shortcut_total'] = ($v_itm['qty'] * $v_itm['price']);
					}
					$pseudo_post['invoice_items'] = $items_invoice;
					$pseudo_post['grand_total'] = $bwinvoice_details['invoice_total'];
				}

				if(!empty($bwinvoice_details['address']))
				{

					$pseudo_post['address'] = $bwinvoice_details['address'];
					$pseudo_post['hi_subdiv_address'] = $bwinvoice_details['address'];
				}
				$pseudo_post['invoice_number'] = $invoicenumber;

				
				
				
				if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
				{
					$storno_data = $bw_invoices->getBwInvoice($_REQUEST['storno']);

					//ISPC-2532 Lore 09.11.2020
					$pseudo_post['storned_invoice_number'] = $pseudo_post['prefix'].$pseudo_post['invoice_number'];
					
					$pseudo_post['address'] = $storno_data['address'];
					$pseudo_post['prefix'] = $storno_data['prefix'];
					$pseudo_post['invoice_number'] = $storno_data['invoice_number'];
					
					if($storno_data['completed_date'] != '0000-00-00 00:00:00')
					{
						$pseudo_post['completed_date'] = $storno_data['completed_date'];
					}
					$pseudo_post['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
					
					$pseudo_post['first_active_day'] = date('d.m.Y', strtotime($storno_data['start_active']));
					$pseudo_post['last_active_day'] = date('d.m.Y', strtotime($storno_data['end_active']));
					
					if($storno_data['start_sapv'] != '0000-00-00 00:00:00' && $storno_data['end_sapv'] != '0000-00-00 00:00:00')
					{
						$pseudo_post['first_sapv_day'] = date('d.m.Y', strtotime($storno_data['start_sapv']));
						$pseudo_post['last_sapv_day'] = date('d.m.Y', strtotime($storno_data['end_sapv']));
					}

					$pseudo_post['sapv_approve_date'] = date('d.m.Y', strtotime($storno_data['sapv_approve_date']));
					$pseudo_post['sapv_approve_nr'] = $storno_data['sapv_approve_nr'];
					$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];
					$pseudo_post['unique_id'] = $storno_data['record_id'];
					$pseudo_post['grand_total'] = ($storno_data['invoice_total'] * (-1));
					$pseudo_post['sapv_footer'] = $storno_data['footer'];

                    //$template_files = array('storno_invoice_sapv_pdf.html', 'performancerecordpdf.html');

					
                    // Changed for  ISPC-1562 BW Nachweis
					if($_REQUEST['old_version'] =="1")
					{
    					$template_files = array('storno_invoice_sapv_pdf.html', 'performancerecordpdf.html');// This is per patient - storno invoice
					}
					else
					{
    					$template_files = array('storno_invoice_sapv_pdf.html', 'performancerecordpdf_items.html');// This is per patient - storno invoice
					}
				}
				else
				{
				    // Changed for  ISPC-1562 BW Nachweis
				    if($_REQUEST['old_version'] =="1")
				    {
                        $template_files = array('invoice_sapv_pdf.html', 'performancerecordpdf.html');
				    }
				    else
				    {
    					$template_files = array('invoice_sapv_pdf.html', 'performancerecordpdf_items.html');// This is per patient - invoice
				    } 
				}
				if($_REQUEST['dbgqq'])
				{
					print_r($pseudo_post);
					exit;
				}
// 					print_r($pseudo_post);
// 					exit;

				if($_REQUEST['old_version'] =="1")
				{
    				$this->generate_pdf($pseudo_post, "PerformancePdfs", $template_files, $orientation, $background_pages);// This is per patient - invoice
				}
				else 
				{
    				$this->generate_pdf($pseudo_post, "PerformancePdf_invoice_items", $template_files, $orientation, $background_pages);// This is per patient - invoice
				}
			}
			// ========================================================================================
			// ======================= END::  $_REQUEST['mode'] == 'pdfs' =============================
			// ========================================================================================
			
		}

		public function performancerecordform_data($pat_id,$pat_month)
		{
	 
			set_time_limit(0);
			setlocale(LC_ALL, 'de_DE.UTF8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$tm = new TabMenus();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$pflege = new PatientMaintainanceStage();
			$users = new User();


			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			$decid = Pms_Uuid::decrypt($pat_id);
			$ipid = Pms_CommonData::getIpid($decid);
			$client = new Client();
			$client_details = $client->getClientDataByid($clientid);
			$this->view->client_details = $client_details[0];
			
			$client_user_array = $users->getUserByClientid($clientid,0,true,false);

	 

// 			$this->view->patid = $decid;
// 			$this->view->ipid = $ipid;
// 			$this->view->clientid = $clientid;

	 

			//get admission-readmission cycles to extract months where there is at least 1 day active START
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$months = array();
			$active_days = array();

//			if(strlen($cycles[$ipid]['admission_date']) != '0' && strlen($cycles[$ipid]['discharge_date']) != '0')
//			{
////				get all days of patient including discharge
//				$patient_all_days = $patientmaster->getDaysInBetween(date('Y-m-d', strtotime($cycles[$ipid]['admission_date'])), date('Y-m-d', strtotime($cycles[$ipid]['discharge_date'])));
//			}

			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));


					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{

					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}


				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
			}

	 
			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
				$month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
			}

			//get number of days in each month + start/end day START
			//check if a month is selected START
			if(empty($pat_month) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $pat_month;
				}
				$selected_month = $month_select_array[$list];
			}
// 			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
// 			$attrs['onChange'] = 'changeMonth(this.value);';
// 			$attrs['class'] = 'select_month_performance';

// 			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];

			$days_in_period = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

//overall period
			$overall_period['start'] = $months_details[$months[0]]['start'];
			$overall_period['end'] = $current_period['end'];

//			if($months_details[$months[0]]['start'] != $current_period['start'])
//			{
			$overall_performance_period['start'] = $months_details[$months[0]]['start'];
			$overall_performance_period['c_month_end'] = date('Y-m-d', strtotime('-1 day', strtotime($current_period['start'])));
			$overall_performance_period['end'] = date('Y-m-d', strtotime('-1 day', strtotime('+1 month', strtotime($current_period['start']))));
//			}
//			else
//			{
//				$overall_performance_period['start'] = "1970-01-01";
//				$overall_performance_period['end'] = "1970-01-01";
//			}
 
//get days in period
			$days_in_period_overall = $patientmaster->getDaysInBetween($overall_period['start'], $overall_period['end']);
			$days_in_period_overall_performance_cmonth = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['c_month_end']);
			$days_in_period_overall_performance = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['end']);

			foreach($active_days as $k_active_day => $v_active_day)
			{
				if(in_array($v_active_day, $days_in_period))
				{
					$active_days_in_period[] = $v_active_day;
				}
			}
 
//Client Hospital Settings START
			//curent period
			$conditions['periods'][0]['start'] = $current_period['start'];
			$conditions['periods'][0]['end'] = $current_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			$conditions_overall['periods'][0]['start'] = $overall_period['start'];
			$conditions_overall['periods'][0]['end'] = $overall_period['end'];
			$conditions_overall['client'] = $clientid;
			$conditions_overall['ipids'] = array($ipid);
			$patient_days_overall = Pms_CommonData::patients_days($conditions_overall);

			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
			$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];
			$active_days_in_period_cs = $patient_days[$ipid]['real_active_days'];

			/*
			$patient_days2locationtypes = array();
			foreach($patient_days_overall as $patient_ipid =>$pdata)
			{
				foreach($pdata['locations'] as $pat_location_row_id => $pat_location_data)
				{
					foreach($pat_location_data['days'] as $kl=>$lday)
					{
						if(in_array($lday,$pdata['real_active_days']))
						{
			
							if( empty($pat_location_data['type'])){
								$pat_location_data['type'] = 0 ;
							}
								
							if($pat_location_data['type'] == "4" )
							{
								$patient_days2locationtypes[$patient_ipid][$lday][] = "3";
							}
							else
							{
								$patient_days2locationtypes[$patient_ipid][$lday][] = $pat_location_data['type'];
							}
						}
					}
				}
			}
				
			foreach( $patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$del_val = "1";
					if ( ! in_array($loc_day,$hospital_days_cs[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
						unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
					}
				}
			}
			foreach($patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$patient_days2locationtypes[$pipid][$loc_day] = end($day_loc_types);
				}
			}
			
			*/
			
			$hospital_overall_days_cs = $patient_days_overall[$ipid]['hospital']['real_days_cs'];
			$hospiz_overall_days_cs = $patient_days_overall[$ipid]['hospiz']['real_days_cs'];
			$patient_all_days_overall_cs = $patient_days_overall[$ipid]['active_days'];

			if(empty($hospital_overall_days_cs))
			{
				$hospital_overall_days_cs = array();
			}

			if(empty($hospiz_overall_days_cs))
			{
				$hospiz_overall_days_cs = array();
			}

			$hospital_hospiz_overall_days_cs = array_merge($hospital_overall_days_cs, $hospiz_overall_days_cs);

			foreach($hospital_hospiz_overall_days_cs as $k_hh => $v_hh)
			{
				$hospital_hospiz_overall_days_cs[$k_hh] = date('Y-m-d', strtotime($v_hh));
			}

			foreach($patient_all_days_overall_cs as $k_pad => $v_pad)
			{
				$patient_all_days_overall_cs[$k_pad] = date('Y-m-d', strtotime($v_pad));
			}

			foreach($active_days_in_period_cs as $k_active => $v_active)
			{
				$active_days_in_period_cs[$k_active] = date('Y-m-d', strtotime($v_active));
			}
 
//Client Hospital Settings END
			//get sapv in current period
			$sapv_days_cs = $this->get_period_sapv($ipid, $current_period, $hospital_hospiz_overall_days_cs);
			$sapv_days_overall_cs = $this->get_period_sapv($ipid, $overall_period, $hospital_hospiz_overall_days_cs);


			foreach($sapv_days_cs as $k_s_days => $v_s_days)
			{
				if($k_s_days != 'relevant_sapvs_days')
				{
					$sapv_days_inperiod_cs[] = $k_s_days;
				}
				else
				{
					$relevant_sapvs_days_cs = $v_s_days;
				}
			}
			asort($sapv_days_inperiod_cs);

/* 
			if(empty($pseudo_post['first_sapv_day']))
			{
				if(count($relevant_sapvs_days_cs['start']) > 0)
				{
					$this->view->first_sapv_day = date('d.m.Y', strtotime($relevant_sapvs_days_cs['start'][0]));
					$end_sapv_last = end($relevant_sapvs_days_cs['end']);
					$this->view->last_sapv_day = date('d.m.Y', strtotime($end_sapv_last));
				}
				else
				{
					$this->view->first_sapv_day = '0000-00-00 00:00:00';
					$this->view->last_sapv_day = '0000-00-00 00:00:00';
				}
			}

			//get pflegestuffe in current period
			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $current_period['start'], $current_period['end']);
			if($pflege_arr)
			{
				$last_pflege = end($pflege_arr);
				$this->view->patient_pflegestufe = $last_pflege['stage'];
			}
			else
			{
				$this->view->patient_pflegestufe = ' - ';
			}

			//get sapv(s) in current period
			$period_sapv = $sapvs->getSapvInPeriod($ipid, $current_period['start'], $current_period['end']);


			if($period_sapv[0]['status'] == "2" && $period_sapv[0]['approved_date'] != '0000-00-00 00:00:00' && strlen($period_sapv[0]['approved_date']) > 0 && date('Y-m-d', strtotime($period_sapv[0]['approved_date'])) != '1970-01-01')
			{
				$this->view->sapv_approve_date = date('d.m.Y', strtotime($period_sapv[0]['approved_date']));
			}
			else
			{
				$this->view->sapv_approve_date = ' - ';
			}

			if($period_sapv[0]['status'] == "2" && strlen($period_sapv[0]['approved_number']) > 0)
			{
				$this->view->sapv_approve_nr = $period_sapv[0]['approved_number'];
			}
			else
			{
				$this->view->sapv_approve_nr = ' - ';
			}


			$this->view->start_relevant_sapv = $period_sapv[0]['verordnungam'];
			$last_relevant_sapv = end($period_sapv);
			$this->view->end_relevant_sapv = $last_relevant_sapv['verordnungbis'];
			 */
			//get all sets form types
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
				$set_one_ids[] = $v_set_one['id'];
			}

			$set_two = $form_types->get_form_types($clientid, '2');
			foreach($set_two as $k_set_two => $v_set_two)
			{
				$set_two_ids[] = $v_set_two['id'];
			}

			$set_three = $form_types->get_form_types($clientid, '3');
			foreach($set_three as $k_set_three => $v_set_three)
			{
				$set_three_ids[] = $v_set_three['id'];
			}


			$set_fourth = $form_types->get_form_types($clientid, '4');
			foreach($set_fourth as $k_set_fourth => $v_set_fourth)
			{
				$set_fourth_ids[] = $v_set_fourth['id'];
			}

			$set_ids['one'] = $set_one_ids;
			$set_ids['two'] = $set_two_ids;
			$set_ids['three'] = $set_three_ids;
			$set_ids['fourth'] = $set_fourth_ids;

			//get contact forms in current period
			$contact_forms_days = $this->get_period_contact_forms($ipid, $current_period);
			
			$contact_forms_ids[] = '999999999';

			$exclude_after_discharge = array();
			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf))
					{
						if(strtotime($v_cf['start_date']) > strtotime($cycles[$ipid]['discharge_date']) && $pm['isdischarged'] == '1')
						{
							//excluded cf after last discharge
							$exclude_after_discharge[] = $v_cf['id'];
						}
						$contact_forms_ids[] = $v_cf['id'];
					}
				}
			}
			ksort($contact_forms_days);
			$block_classification = new FormBlockClassification();
			$classification_data = $block_classification->get_multiple_block_classification($ipid, $contact_forms_ids);


			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data) && in_array($k_cf_day, $active_days_in_period_cs))
					{
						if((in_array($v_cf['form_type'], $set_ids['fourth']) && $classification_data[$v_cf['id']]['intern'] == '0') || !in_array($v_cf['form_type'], $set_ids['fourth']))
						{
							$contact_forms_days_ids[$k_cf_day][] = $v_cf['id'];
							$contact_forms_days_details[$k_cf_day][$v_cf['id']] = $v_cf;
							$contact_forms2form_types[$v_cf['id']][] = $v_cf['form_type'];
						}
					}
				}
			}
 

			foreach($contact_forms_ids as $k_contactform_data => $v_contactform_data)
			{
				if(!array_key_exists($v_contactform_data, $classification_data))
				{
					unset($contact_forms_ids[array_search($v_contactform_data, $contact_forms_ids)]);
				}
			}
			$contact_forms_ids = array_values(array_unique($contact_forms_ids));

			//get patient course in current period
// 			$course_days = $this->get_period_course($ipid, $cycles[$ipid]['discharge_date']);
			$course_days = $this->get_period_course($ipid, $cycles[$ipid]['discharge_date'],true);
	 

			foreach($course_days as $k_course_date => $v_course_details)
			{
			    foreach($v_course_details as $k_couses => $v_courses)
			    {
			        $course[$k_course_date][] = $v_courses['course_type'];
			    }
			    
				$k_course_date_alt = date('d.m.Y', strtotime($k_course_date));
				if(in_array($k_course_date, $active_days_in_period_cs) && !in_array($k_course_date_alt, $hospital_days_cs) && !in_array($k_course_date_alt, $hospiz_days_cs))
				{
					foreach($v_course_details as $k_couse => $v_course)
					{
						if($v_course_details[$k_couse]['course_type'] == "U" && in_array($k_course_date, $sapv_days_inperiod_cs) && in_array('1', $sapv_days_cs[$k_course_date]))
						{
							$clasifizierung[$k_course_date]['beratung'] += 1;
							//ISPC-1562 BW Nachweis
							$extra_details[$k_course_date]['beratung'][] = $v_course;;
						}
						else if($v_course['course_type'] == 'V' && in_array($k_course_date, $sapv_days_inperiod_cs) && in_array('2', $sapv_days_cs[$k_course_date]))
						{
							$clasifizierung[$k_course_date]['koordination'] += 1;
							//ISPC-1562 BW Nachweis
							$extra_details[$k_course_date]['koordination'][] = $v_course;;
						}
					}
				}
			}
			
			//get real active patient days (active, with sapv and no hospital/hospiz)
//			$real_active_days_cs = $this->real_active_days($active_days_in_period, $hospital_hospiz_overall_days_cs, $sapv_days_cs);

			$real_active_days_overall_cs = $this->real_active_days($active_days, $hospital_hospiz_overall_days_cs, $sapv_days_overall_cs);
			$days_nosapv_overall_cs = $this->nosapv_days($patient_all_days_overall_cs, $hospital_hospiz_overall_days_cs, $sapv_days_overall_cs);


			asort($active_days_in_period);


			if(count($cycles[$ipid]['admissionDates']) > 0)
			{
				foreach($cycles[$ipid]['admissionDates'] as $k_adm => $v_adm)
				{
					$start_periods[$k_adm] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$k_adm]))
					{
						$end_periods[$k_adm] = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$k_adm]['date']));
					}
					else
					{
						$end_periods[$k_adm] = date('Y-m-d', time());
					}
				}
			}
			else
			{
				$start_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));
				$end_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
			}

			//get check for flatrate case and return "7 days flat rate" days
			$flatrate = $this->flatrate_days($ipid, $clientid, $start_periods, $end_periods, $current_period, $real_active_days_overall_cs, $cycles[$ipid], $days_nosapv_overall_cs, $hospital_hospiz_overall_days_cs);

			//get performance shortcuts
			$shortcuts = Pms_CommonData::get_prices_shortcuts();

			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

// 			$this->view->real_active_days_overall_cs = $real_active_days_overall_cs;
// 			$this->view->shortcuts = $shortcuts['performance'];
// 			$this->view->price_list = $master_price_list;
			$pseudo_post['shortcuts'] = $shortcuts['performance'];
			$pseudo_post['price_list'] = $master_price_list;

			// ==============================================
			// HACK - TODO-16 BWS10337  - 16.15.2015 - Start
			// ==============================================
			$remove_flatrate_ipids = array("61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"); // BWS10295
			$rfi_start["61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"] = "2015-11-24";
			$rfi_end["61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"] = "2015-11-30";
			
			if(in_array($ipid,$remove_flatrate_ipids)  &&  Pms_CommonData::isintersected($rfi_start[$ipid], $rfi_end[$ipid], $current_period['start'], $current_period['end']) )
			{
			    $flatrate = array();
			}
			// ==============================================
			// HACK - TODO-16 BWS10337  - 16.15.2015 - End
			// ==============================================
			
			
// 			$bw_pr = new BwPerformanceRecord();
// 			$bw_data_overall = $bw_pr->get_multiple_bw_performance_record_in_period($ipid, $current_period['start'], $master_price_list);
// 			print_R($flatrate);
			
			
			/*  ###################################################### */
			/*  ################### MASTER ####################### */
			/*  ###################################################### */
			
// 			$overall_patient_shortcuts = $this->patient_performance_overall($ipid, $clientid, $overall_performance_period, $active_days, $set_ids, $flatrate, $flatrate_admissions, $master_price_list, $days_in_period_overall_performance, $hospital_hospiz_days);
// 			$overall_patient_shortcuts = $this->patient_performance_overall($ipid, $clientid, $overall_performance_period, $active_days, $set_ids, $flatrate, $flatrate_admissions, $master_price_list, $days_in_period_overall_performance, $hospital_hospiz_overall_days_cs);
			$overall_patient_shortcuts = $this->patient_performance_overall_saved($ipid, $clientid, $overall_performance_period, $active_days, $set_ids, $flatrate, $flatrate_admissions, $master_price_list, $days_in_period_overall_performance, $hospital_hospiz_overall_days_cs);
// 			$flatrate_continued = $this->flatrate_days_continued($ipid, $clientid, $start_periods, $end_periods, $current_period, $real_active_days_overall_cs, $cycles[$ipid], $days_nosapv_overall_cs, $hospital_hospiz_overall_days_cs, $overall_patient_shortcuts['days_products']);
// print_r($flatrate_continued); 
//exit;
			
// 			print_r("\n");
// 			print_r("days ");
// 			print_r("\n");
// 			print_r($overall_patient_shortcuts['days_products'] ); exit;
			$flatrate_continued = $this->flatrate_days_continued_saved($ipid, $clientid, $start_periods, $end_periods, $current_period, $real_active_days_overall_cs, $cycles[$ipid], $days_nosapv_overall_cs, $hospital_hospiz_overall_days_cs, $overall_patient_shortcuts['days_products']);
			
// 			print_r($flatrate_continued);
// 			print_r($overall_patient_shortcuts['full_data']);
// 			exit;

			foreach($overall_patient_shortcuts['full_data'] as $date => $sh_details){
				foreach($sh_details as $ksh=>$vsh){
					if($ksh == "37b1" && $vsh['qty'] > "0"){
						$overall_flatrate_days[$ipid][]  = $date;
					}
				}
			}
			
// 			print_r($overall_flatrate_days);
// 			exit;
			if($_REQUEST['dbg_flatrate'] == "2")
			{
				print_r("flatrate\n");
				print_r($flatrate);
				print_r("overall_patient_shortcuts\n");
				print_r($overall_patient_shortcuts);
				print_r("flatrate_continued\n");
				print_r($flatrate_continued);
				exit;
			}

			
	 
						
			
			
			$overall_shorts['shortcuts'] = array();
			foreach($overall_patient_shortcuts['shortcuts'] as $k_short_overall => $v_short_overall)
			{
				if(in_array($k_short_overall, $days_in_period_overall_performance_cmonth))
				{
					$overall_shorts['shortcuts'] = array_merge($overall_shorts['shortcuts'], $v_short_overall);
				}
			}
			$overall_patient_shortcuts['shortcuts'] = $overall_shorts['shortcuts'];

			$overall_k_shorts['last_koord_dates'] = array();
			foreach($overall_patient_shortcuts['last_koord_dates'] as $k_short_overall => $v_short_overall)
			{
				if(in_array($k_short_overall, $days_in_period_overall_performance_cmonth))
				{
					$overall_k_shorts['last_koord_dates'] = array_merge($overall_k_shorts['last_koord_dates'], $v_short_overall);
				}
			}
			$overall_patient_shortcuts['last_koord_dates'] = $overall_k_shorts['last_koord_dates'];

			$week_numbers_arr[] = '9999999999';

			if(count($overall_patient_shortcuts['last_koord_dates']) != 0)
			{
				$last_koord_dates = $overall_patient_shortcuts['last_koord_dates'];
			}
			else
			{
				$last_koord_dates[] = '1970-01-01';
			}

			foreach($days_in_period as $k_period_day => $v_period_day)
			{
				//$hospital_days_cs format is d.m.Y
				$v_period_day_alt = date('d.m.Y', strtotime($v_period_day));

				$day_shortcuts = array();

				if(count($month_shortcuts) == 0)
				{
					$month_shortcuts = array();
				}

				$master_data[$v_period_day] = array();

				if(count($overall_patient_shortcuts['last_koord_dates']) > '0')
				{
					$last_koord_date_overall = end($overall_patient_shortcuts['last_koord_dates']);
					$week_numbers_arr[$last_koord_date_overall] = date('W', strtotime($last_koord_date_overall));
				}

				//calculate set one form_type visits
				//first get flatrate exception and set shortcut
				$shortcut = '';
				$set_one_result = array_intersect($set_one_ids, $contact_forms_days[$v_period_day]['form_types']);

 
				if((in_array($v_period_day, $flatrate) || in_array($v_period_day, $flatrate_continued)) && !in_array($v_period_day, $hospital_days))
				{
					$shortcut = '37b1';
					$month_shortcuts[] = $shortcut;
					$overall_patient_shortcuts['shortcuts'][] = $shortcut;
				}
				
				
				
				foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf_one)
				{
					if(!in_array($v_cf_one['id'], $exclude_after_discharge) && in_array($v_cf_one['form_type'], $set_one_ids))
					{
						if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && array_key_exists($v_period_day, $contact_forms_days) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs) && count($set_one_result) != 0) //normal set conditions
						{
//						we have visits=> check if there are required visits for this action set
							if(in_array('4', $sapv_days_cs[$v_period_day]) || in_array('3', $sapv_days_cs[$v_period_day]))
							{
								$shortcut = '37b2';
								
								//ISPC-1562 BW Nachweis
								$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
								
							}
						}
					}
				}

				if(!empty($shortcut))
				{
					if($shortcut == '37b1' && (in_array($v_period_day, $flatrate['pay_days']) || in_array($v_period_day, $flatrate_continued['pay_days'])))
					{
						$master_data[$v_period_day][$shortcut]['pay_days'] = '1';
					}
					$day_shortcuts[] = $shortcut;
					$master_data[$v_period_day][$shortcut]['shortcut'] = $shortcut;
					$master_data[$v_period_day][$shortcut]['qty'] = '1';
					$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
					
					
					$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
				}
				
 
				//sapv overwrite if formtype is set 4
				//calculate set two form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				$set_fourth_result = array_intersect($set_fourth_ids, $contact_forms_days[$v_period_day]['form_types']);

				if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					$set_two_result = array_intersect($set_two_ids, $contact_forms_days[$v_period_day]['form_types']);

//					if((count($set_two_result) != 0 || in_array('U', $course_days[$v_period_day])) && in_array('1', $sapv_days_cs[$v_period_day]))
// 					if((count($set_two_result) != 0 || in_array('U', $course_days[$v_period_day])) && in_array('1', $sapv_days_cs[$v_period_day]) || (count($set_ones_result) != 0 && in_array('1', $sapv_days_cs[$v_period_day])))
					if((count($set_two_result) != 0 || in_array('U', $course[$v_period_day])) && in_array('1', $sapv_days_cs[$v_period_day]) || (count($set_ones_result) != 0 && in_array('1', $sapv_days_cs[$v_period_day])))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							if(is_numeric($k_cf) && !in_array($v_cf['id'], $exclude_after_discharge))
							{
								$shortcut = '';
								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']) && !in_array($v_cf['form_type'], $set_one_ids))
								{
									$shortcut = '37b5';
								}


								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_two_ids) ))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										
    									//ISPC-1562 BW Nachweis
    									$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										
    									//ISPC-1562 BW Nachweis
    									$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
									}

									
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}

						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							if($v_day_course['course_type'] == 'U')
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$v_period_day]['37b6']['qty'] < '2')
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									
                                    //ISPC-1562 BW Nachweis 
									$extra_data[$v_period_day][$shortcut][] = $course_days[$v_period_day][$k_day_course];
									
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}
					}
				}


				//calculate set three form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					$last_koord_day = end($last_koord_dates);
					$set_three_result = array_intersect($set_three_ids, $contact_forms_days[$v_period_day]['form_types']);

// 					if((count($set_three_result) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days_cs[$v_period_day]))
					if((count($set_three_result) != 0 || in_array('V', $course[$v_period_day])) && in_array('2', $sapv_days_cs[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform) && !in_array($v_cform['id'], $exclude_after_discharge))
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']) && !in_array($v_cform['form_type'], $set_one_ids))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && in_array($v_cform['form_type'], $set_three_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										
    									//ISPC-1562 BW Nachweis
        								$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
    									
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										
    									//ISPC-1562 BW Nachweis
        								$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
									
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}

						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							$last_koord_day = end($last_koord_dates);
							if($v_day_course['course_type'] == 'V')
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(($shortcut == '37b7' || $shortcut == '37b8'))
								{
									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr))
									{
										$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];

										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $course_days[$v_period_day][$k_day_course];
										
										$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$week_numbers_arr[] = $week_number;
										$last_koord_dates[] = $v_period_day;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										
										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $course_days[$v_period_day][$k_day_course]; //  need more info here
										
										$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[] = $v_period_day;
									}
								}
							}
						}
					}
				}


				//calculate set 4 (ISPC-241)
				if((count($set_fourth_result) != 0 || count($set_one_result) != 0) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					//setup each form sapv based on classification block selection
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
						{
							if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
							else if(in_array('1', $sapv_days_cs[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
						}
						else if($classification_data[$v_cf_day]['intern'] != '1')
						{
							if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								//switch between BE-KO if VV is not BE
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
						}
					}

					//U & V at the top
					//beratung
					if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array('1', $sapv_days_cs[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							//check if there are 2 beratung change sapv in koord
							if($master_data[$v_period_day]['37b6']['qty'] == '2' && (count($set_fourth_result) != 0 || count($set_one_result) != 0) && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
							}
//							print_r($v_period_day);
//							var_dump(is_numeric($k_cf) && $sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1' && !in_array($v_cf['id'], $exclude_after_discharge) && (in_array($v_cf['form_type'], $set_fourth_ids) && (($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')) || in_array($v_cf['form_type'], $set_one_ids)));
//							var_dump($sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1');
//							var_dump(!in_array($v_cf['id'], $exclude_after_discharge));
//							var_dump(in_array($v_cf['form_type'], $set_fourth_ids));
//							var_dump((($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')));
//							print_r("\n");
//							print_r("\n");

							if(is_numeric($k_cf) && $sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1' && !in_array($v_cf['id'], $exclude_after_discharge) && (in_array($v_cf['form_type'], $set_fourth_ids) && (($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')) || in_array($v_cf['form_type'], $set_one_ids)))
							{
								$shortcut = '';
								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5') //only b5 or b6
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_fourth_ids) || in_array($v_cf['form_type'], $set_one_ids)))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										
										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
										
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										
										//ISPC-1562 BW Nachweis										
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
										
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}
					}

					//koordination
					$last_koord_day = end($last_koord_dates);

					if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array('2', $sapv_days_cs[$v_period_day]))
					{

						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform) && $sapv_status[$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2' && !in_array($v_cform['id'], $exclude_after_discharge))
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}
									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;

									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && (in_array($v_cform['form_type'], $set_fourth_ids) || in_array($v_cform['form_type'], $set_one_ids)))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];

										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
										
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];

										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									
									
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}
					}
				}
				
				//add exclusion
				if(in_array($v_period_day, $sapv_days_inperiod_cs) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						//check if contactform type for each days
						if(in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids) && (in_array('4', $sapv_days_cs[$v_period_day]) || in_array('3', $sapv_days_cs[$v_period_day]) ))
						{
							$clasifizierung[$v_period_day]['home_visit'] += 1;
							//ISPC-1562 BW Nachweis
							$extra_details[$v_period_day]['home_visit'] []= $contact_forms_days_details[$v_period_day][$v_cf_day];;
						}
						else
						{
							//$clasifizierung[$v_period_day]['home_visit'] += 0;
							//sum classifizierung data if form is not housebesuche type(1)
							if($clasifizierung[$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days_cs[$v_period_day]) &&
								(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
								//ISPC-1562 BW Nachweis
								$extra_details[$v_period_day]['beratung'] []= $contact_forms_days_details[$v_period_day][$v_cf_day];
								
							}
							else if($clasifizierung[$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$v_period_day]) || in_array('2', $sapv_days_cs[$v_period_day])))
							{
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]) && !in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
							}
							else if($clasifizierung[$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$v_period_day]) || in_array('2', $sapv_days_cs[$v_period_day])))
							{
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]) && !in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days_cs[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
								//ISPC-1562 BW Nachweis
								$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
							}
							else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days_cs[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['koordination'] += '1';
								//ISPC-1562 BW Nachweis
								$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
							}
							else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0') && in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids))
							{
								if(in_array('1', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else if(in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
							}

							$count_be[$v_period_day] += 1;
						}
					}
				}
			}
			ksort($clasifizierung);
			ksort($extra_details);
			
			
			/* ################################### */
			/* SAVED DATA  -- ISPC:1927  */
			/* ################################### */

			$bw_pr = new BwPerformanceRecord();
			$patient_days2locationtypes = array();// ISUUE FROM MOVING SERVER - White page - 16.03.2018 Acuta
			$bw_data = $bw_pr->get_bw_performance_record($ipid, $current_period['start'], $master_price_list,$patient_days2locationtypes);
			
			if(!isset($bw_data) || empty($bw_data))
			{
				$save_data = "0";
			} else{
				$save_data = "1";
			}

			
			if(!empty($bw_data)){
				$saved_per_moth[$ipid] = array();
				foreach($bw_data as $days=>$vals){
					foreach($vals as $sh=>$shd){
						$saved_per_moth[$ipid][date("mY",strtotime($days))][] = $sh;
					}
				}
				
				foreach($days_in_period  as $k=>$act_day){
					if( isset($bw_data[$act_day]) && !empty($bw_data[$act_day]) ){ // check if more thant the flatrate from prevoius month is saved.
						if(count($saved_per_moth[$ipid][date("mY",strtotime($act_day))]) >=6 ){
							$final_data[$ipid][$act_day] = $bw_data[$act_day];
						} else {
							$final_data[$ipid][$act_day] = array_merge($master_data[$act_day],$bw_data[$act_day]);
							$save_data = "0";
						}
							
					} else {
						$final_data[$ipid][$act_day] = $master_data[$act_day];
					}
				}
// 				$master_data = array();
				$master_data = $final_data[$ipid];
			}
			
			
// 			$this->view->save_data = $save_data;
/* 			
			if($_REQUEST['qz'])
			{
				print_r("2: \n");
				print_r($clasifizierung);
				print_r($sapv_status);
				print_r($extra_details);
				exit;
			}

			if(strlen($pseudo_post['first_active_day']) == 0)
			{

				if(count($clasifizierung) > 0)
				{
					$activity_days_array = array_keys($clasifizierung);
					$end_activity_date = end($activity_days_array);

					$first_active_day = date('d.m.Y', strtotime($activity_days_array[0]));
					$last_active_day = date('d.m.Y', strtotime($end_activity_date));
				}
				else
				{
					$first_active_day = '0000-00-00 00:00:00';
					$last_active_day = '0000-00-00 00:00:00';
				}
			}
			else
			{
				$first_active_day = $pseudo_post['first_active_day'];
				$last_active_day = $pseudo_post['last_active_day'];
			}

			$this->view->first_active_day = $first_active_day;
			$this->view->last_active_day = $last_active_day;
			$pseudo_post['first_active_day'] = $first_active_day;
			$pseudo_post['last_active_day'] = $last_active_day;

 
			$this->view->classification_box = $clasifizierung;
			$pseudo_post['classification_box'] = $clasifizierung;

 


 

			$this->view->period_days = $days_in_period;
			$this->view->totals = $totals;
			$this->view->master_data = $master_data;

			$pseudo_post['clientid'] = $clientid;
			$pseudo_post['period_days'] = $days_in_period;

			$pseudo_post['totals'] = $totals;
			$pseudo_post['master_data'] = $master_data;
			$pseudo_post['extra_data'] = $extra_data;
			$pseudo_post['extra_data_details'] = $extra_details;
			
			$pseudo_post['health_insurance_ik'] = $this->view->health_insurance_ik;
			$pseudo_post['insurance_no'] = $this->view->insurance_no;
			$pseudo_post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;

			$pseudo_post['address'] = $pseudo_post['hi_subdiv_address'];
			$pseudo_post['patient_address'] = $patient_address;
			$pseudo_post['sapv_approve_date'] = $this->view->sapv_approve_date;
			$pseudo_post['sapv_approve_nr'] = $this->view->sapv_approve_nr;

			$pseudo_post['patient_pflegestufe'] = $this->view->patient_pflegestufe;

			if(empty($pseudo_post['first_sapv_day']))
			{
				$pseudo_post['first_sapv_day'] = $this->view->first_sapv_day;
				$pseudo_post['last_sapv_day'] = $this->view->last_sapv_day;
			}

			
			$pseudo_post['kv_header']['patient_name_address'] = htmlspecialchars($pm['last_name']) . ", " . htmlspecialchars($pm['first_name']) . "\n" . htmlspecialchars($pm['street1']) . "\n" . htmlspecialchars($pm['zip']) . "&nbsp;" . htmlspecialchars($pm['city']);
			$pseudo_post['kv_header']['patient_birthdate'] = $pm['birthd'];
			$pseudo_post['kv_header']['patient_name'] = htmlspecialchars($pm['last_name']) . ", " . htmlspecialchars($pm['first_name']);
			$pseudo_post['kv_header']['patient_address'] = htmlspecialchars($pm['street1']) . "&nbsp;" . htmlspecialchars($pm['zip']) . "\n" . htmlspecialchars($pm['city']);
				
			$client_form_type =  FormTypeActions::get_form_type_actions();
			
// 			print_r($client_form_type); exit;
			$pseudo_post['client_form_type'] = $client_form_type;
			$pseudo_post['users_array'] = $user_array ;
			
			$pseudo_post['alias']['home_visit'] = "Hausbesuch";
			$pseudo_post['alias']['beratung'] = "Beratung";
			$pseudo_post['alias']['koordination'] = "Koordination";
 */
			return $master_data;
			
		}
		
		//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
		public function performancerecordAction($params = array())
		{
			set_time_limit(0);
			setlocale(LC_ALL, 'de_DE.UTF8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$tm = new TabMenus();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$bw_invoices = new BwInvoices();
			$users = new User();

			if(isset($params) && !empty($params)){
			    $_REQUEST = $params;
			    $this->_helper->viewRenderer->setNoRender();
			}
			
            //ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
			$clientid = isset($_REQUEST['clientid']) && ! empty($_REQUEST['clientid']) ? $_REQUEST['clientid'] :  $logininfo->clientid;
			$userid = isset($_REQUEST['userid']) && ! empty($_REQUEST['userid']) ? $_REQUEST['userid'] : $logininfo->userid;
			
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);

			if(!empty($_REQUEST['id'])){
	       		$decid = Pms_Uuid::decrypt($_REQUEST['id']);
    			$ipid = Pms_CommonData::getIpid($decid);
			}
			$client = new Client();
			$client_details = $client->getClientDataByid($clientid);
			$this->view->client_details = $client_details[0];
			
			$client_user_array = $users->getUserByClientid($clientid,0,true,false);
			foreach($client_user_array as $k=>$cu)
			{
			    $user_array[$cu['id']] = $cu;
			    if(strlen($cu['shortname']) >  0){
			        $user_array[$cu['id']]['initials'] = $cu['shortname'];
			    } 
			    else
			    {
			         $user_array[$cu['id']]['initials'] = mb_substr($cu['first_name'], 0, 1, "UTF-8") . "" . mb_substr($cu['last_name'], 0, 1, "UTF-8");
			        
			    }
			}
			
			//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
			if($_REQUEST['bulk_print'] == '1' && strlen($_REQUEST['iid']) > 0){
		        $bwinvoices = new BwInvoices();
		        $bwinvoice_details = $bwinvoices->getBwInvoice($_REQUEST['iid']);
		        if($bwinvoice_details['storno'] == '1'){
		            $_REQUEST['iid'] = $bwinvoice_details['record_id'];
		            $_REQUEST['stornopdf'] = 1;
		            $_REQUEST['storno'] = $bwinvoice_details['id'];
		        }
		    }
			//--
			
			
			
			if(strlen($_REQUEST['iid']) > 0)
			{
				//get invoice address/footer
				$bwinvoices = new BwInvoices();
				$bwinvoice_details = $bwinvoices->getBwInvoice($_REQUEST['iid']);
				
				$ipid = $bwinvoice_details['ipid'];
				$decid = Pms_CommonData::getIdfromIpid($ipid);

				$invoicenumber = $bwinvoice_details['invoice_number'];
				$pseudo_post['address'] = $bwinvoice_details['address'];
				$pseudo_post['sapv_footer'] = $bwinvoice_details['footer'];
				$pseudo_post['unique_id'] = $bwinvoice_details['id'];
				$pseudo_post['prefix'] = $bwinvoice_details['prefix'];


				$pseudo_post['first_sapv_day'] = date('d.m.Y', strtotime($bwinvoice_details['start_sapv']));
				$pseudo_post['last_sapv_day'] = date('d.m.Y', strtotime($bwinvoice_details['end_sapv']));

				$pseudo_post['first_active_day'] = date('d.m.Y', strtotime($bwinvoice_details['start_active']));
				$pseudo_post['last_active_day'] = date('d.m.Y', strtotime($bwinvoice_details['end_active']));

				$list = date('Y-m', strtotime($bwinvoice_details['invoice_start']));

				if(strlen($_REQUEST['completed_date']) > '0')
				{
					$pseudo_post['completed_date'] = date('d.m.Y', $_REQUEST['completed_date']);
				}
				else
				{
					if($bwinvoice_details['completed_date'] != '0000-00-00 00:00:00')
					{
						$pseudo_post['completed_date'] = date('d.m.Y', strtotime($bwinvoice_details['completed_date']));
					}
					else
					{
						$pseudo_post['completed_date'] = date('d.m.Y', strtotime($bwinvoice_details['create_date']));
					}
				}
				
				
				$pseudo_post['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($bwinvoice_details['invoice_start']));
				$pseudo_post['invoice_data']['invoice_end'] = date('d.m.Y', strtotime($bwinvoice_details['invoice_end']));
				$pseudo_post['invoice_data']['invoice_number'] = html_entity_decode($bwinvoice_details['prefix'] . $bwinvoice_details['invoice_number'], ENT_QUOTES, 'UTF-8');;
				
				//ISPC-2747 Lore 27.11.2020
				if(strpos($bwinvoice_details['show_boxes'], 'show_box_active') === false ){
				    $pseudo_post['show_box_active'] = '0';
				}else {
				    $pseudo_post['show_box_active'] = '1';
				}
				if(strpos($bwinvoice_details['show_boxes'], 'show_box_patient') === false ){
				    $pseudo_post['show_box_patient'] = '0';
				}else {
				    $pseudo_post['show_box_patient'] = '1';
				}
				if(strpos($bwinvoice_details['show_boxes'], 'show_box_sapv') === false ){
				    $pseudo_post['show_box_sapv'] = '0';
				}else {
				    $pseudo_post['show_box_sapv'] = '1';
				}
				
			}
			else
			{
				$pseudo_post['sapv_footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				$pseudo_post['completed_date'] = date('d.m.Y', time());
			}

			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;

			$pseudo_post['patid'] = $decid;
			$pseudo_post['ipid'] = $ipid;
			$pseudo_post['clientid'] = $clientid;

			//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
			if($_REQUEST['bulk_print'] == '1'){
			    
			    $pdet = $patientmaster->get_patients_details_By_Ipids(array($ipid));
			    $pm = $pdet[$ipid];
			    $pseudo_post['patientdetails'] = $pm;
			    
			} else{
			    
    			$pm = $patientmaster->getMasterData($decid, 0);
    			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
    			$this->view->patientdetails = $pm;
    			$pseudo_post['patientdetails'] = $pm;
    			
            }
            
            
			//get patient main diagnosis
			$pat_diagnosis = new PatientDiagnosis();
			$patient_main_diag = $pat_diagnosis->get_main_diagnosis($ipid, $clientid);
			$pseudo_post['patient_data']['main_diagnosis'] = implode(', ', $patient_main_diag['icd']);
				
			
			if(strlen($_REQUEST['iid']) == 0)
			{
			
				$this->view->tabmenus = $tm->getMenuTabs();
			}


			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			$hi_perms_divisions = $divisions;

			//health insurance
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(empty($healthinsu_array[0]['name']))
				{
					$healthinsu_array[0]['name'] = $healtharray['name'];
				}
				if(empty($healthinsu_array[0]['ins_street']))
				{
					$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
				}
				if(empty($healthinsu_array[0]['ins_city']))
				{
					$healthinsu_array[0]['ins_city'] = $healtharray['city'];
				}
				if(empty($healthinsu_array[0]['ins_zip']))
				{
					$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
				}

				if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
				{
					$this->view->health_insurance_ik = $healtharray['iknumber'];
				}

				if(strlen($healthinsu_array[0]['kvk_no']) == 0)
				{
					$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
				}
				else
				{
					$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				}
			}
			
			$pseudo_post['kv_header']['insurance_company_name'] = $healthinsu_array[0]['name'];
			$pseudo_post['kv_header']['kvnumber'] = $this->view->health_insurance_kassenr ;
			$pseudo_post['kv_header']['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$pseudo_post['kv_header']['insurance_status'] =$healthinsu_array[0]['insurance_status'];
			
			$master_user_details = new User();
			$users_details = $master_user_details->getUserDetails($userid);
			$pseudo_post['kv_header']['betriebsstatten_nr'] = $users_details[0]['betriebsstattennummer'];
			$pseudo_post['kv_header']['arzt_nr'] = $users_details[0]['LANR'];

			if($hi_perms_divisions)
			{
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
			}

			if($healthinsu_array[0]['privatepatient'] == "1" && strlen($_REQUEST['iid']) == '0')
			{
//			get patient name and adress
// 				$patient_address = '&nbsp;' . htmlspecialchars($pm['first_name']) . ' ' . htmlspecialchars($pm['last_name']) . '<br />';
				$patient_address = '&nbsp;' . htmlspecialchars($pm['first_name']) . ' ' . htmlspecialchars($pm['last_name']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['street1']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['zip']) . ' ' . '&nbsp;' . htmlspecialchars($pm['city']);
				$this->view->patient_address = $patient_address;
			}

			if(!empty($healthinsu_subdiv_arr['3']['name']))
			{
				//get new SAPV hi address
				$hi_address = '&nbsp;' . $healthinsu_subdiv_arr[3]['name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br />';
				//$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['contact_person'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['street1'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$this->view->health_insurance_ik = $healthinsu_subdiv_arr[3]['iknumber'];
				$this->view->health_insurance_kassenr = $healthinsu_subdiv_arr[3]['kvnumber'];
			}
			else
			{
				//get old hi_address
				$hi_address = '&nbsp;' . $healthinsu_array[0]['company_name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_insurance_provider'] . '<br />';
				//$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_contactperson'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_street'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];

				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
			}

			$pathealthinsurancenr = "";
			if(count($healthinsu_array[0]))
			{
				$phi_details = $healthinsu_array[0]['name'];
			}
			else
			{
				$phi_details = "--";
			}
			$phi_details_sub = $hi_address;


			$this->view->health_insurance = $phi_details;
			$this->view->hi_subdiv_address = $phi_details_sub;
			$pseudo_post['health_insurance'] = $phi_details;
			$pseudo_post['hi_subdiv_address'] = $phi_details_sub;


			//get admission-readmission cycles to extract months where there is at least 1 day active START
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid),true,$clientid);//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020 - add client param
			$months = array();
			$active_days = array();

//			if(strlen($cycles[$ipid]['admission_date']) != '0' && strlen($cycles[$ipid]['discharge_date']) != '0')
//			{
////				get all days of patient including discharge
//				$patient_all_days = $patientmaster->getDaysInBetween(date('Y-m-d', strtotime($cycles[$ipid]['admission_date'])), date('Y-m-d', strtotime($cycles[$ipid]['discharge_date'])));
//			}

			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));


					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{

					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}


				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
			}

			if($_REQUEST['dbgx'])
			{
				print_r($active_days);
				print_r($cycle_start_period);
				print_r($cycles);
				print_r($period_months);
				print_r($months);
				exit;
			}

			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
				$month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
			}

			//get number of days in each month + start/end day START
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_performance';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];

			$days_in_period = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

//overall period
			$overall_period['start'] = $months_details[$months[0]]['start'];
			$overall_period['end'] = $current_period['end'];

//			if($months_details[$months[0]]['start'] != $current_period['start'])
//			{
			$overall_performance_period['start'] = $months_details[$months[0]]['start'];
			$overall_performance_period['c_month_end'] = date('Y-m-d', strtotime('-1 day', strtotime($current_period['start'])));
			$overall_performance_period['end'] = date('Y-m-d', strtotime('-1 day', strtotime('+1 month', strtotime($current_period['start']))));
//			}
//			else
//			{
//				$overall_performance_period['start'] = "1970-01-01";
//				$overall_performance_period['end'] = "1970-01-01";
//			}

            
			if($_REQUEST['dbg_periods_overall'])
			{
				print_r("months_details\n");
				print_r($months_details);
				print_r("overall_performance_period\n");
				print_r($overall_performance_period);
			}
//get days in period
			$days_in_period_overall = $patientmaster->getDaysInBetween($overall_period['start'], $overall_period['end']);
			$days_in_period_overall_performance_cmonth = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['c_month_end']);
			$days_in_period_overall_performance = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['end']);

			foreach($active_days as $k_active_day => $v_active_day)
			{
				if(in_array($v_active_day, $days_in_period))
				{
					$active_days_in_period[] = $v_active_day;
				}
			}

			//get hospital/hospiz in current period
//			$hospital_days = $this->get_period_hospitals($ipid, $clientid, $current_period, $active_days_in_period);
//			if($_REQUEST['show'])
//			{
//				print_r("\nhospital_days\n");
//				print_r($hospital_days);
//			}
			//get hospital overall
//			foreach($months_details as $k_mnth => $v_mnth)
//			{
//				$hospital_overall[$k_mnth] = $this->get_period_hospitals($ipid, $clientid, $v_mnth);
//			}
//
//			foreach($hospital_overall as $k_hosp => $v_hosp)
//			{
//				if(empty($hospital_overall_days))
//				{
//					$hospital_overall_days = array();
//				}
//				$hospital_overall_days = array_merge_recursive($v_hosp, $hospital_overall_days);
//			}
//Client Hospital Settings START
			//curent period
			$conditions['periods'][0]['start'] = $current_period['start'];
			$conditions['periods'][0]['end'] = $current_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			$conditions_overall['periods'][0]['start'] = $overall_period['start'];
			$conditions_overall['periods'][0]['end'] = $overall_period['end'];
			$conditions_overall['client'] = $clientid;
			$conditions_overall['ipids'] = array($ipid);
			$patient_days_overall = Pms_CommonData::patients_days($conditions_overall);

			
			
			$patient_days2locationtypes = array();
			$hospital_days_cs_dmY = array();
			$hospiz_days_cs_dmY = array();
				
			foreach($patient_days_overall as $patient_ipid =>$pdata)
			{
			
				//hospital days cs
				if(!empty($pdata['hospital']['real_days_cs']))
				{
					$hospital_days_cs_dmY[$patient_ipid] = $pdata['hospital']['real_days_cs'];
				}
				//hospiz days cs
				if(!empty($pdata['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs_dmY[$patient_ipid] = $pdata['hospiz']['real_days_cs'];
				}
			
				foreach($pdata['locations'] as $pat_location_row_id => $pat_location_data)
				{
					foreach($pat_location_data['days'] as $kl=>$lday)
					{
						if(in_array($lday,$pdata['real_active_days']))
						{
			
							if( empty($pat_location_data['type'])){
								$pat_location_data['type'] = 0 ;
							}
								
							if($pat_location_data['type'] == "4" )
							{
								$patient_days2locationtypes[$patient_ipid][$lday][] = "3";
							}
							else
							{
								$patient_days2locationtypes[$patient_ipid][$lday][] = $pat_location_data['type'];
							}
						}
					}
				}
			}
				
			foreach( $patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$del_val = "1";
					if ( ! in_array($loc_day,$hospital_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
						unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
					}
						
					/*
					 $del_val = "2";
					 if ( ! in_array($loc_day,$hospiz_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
					 unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
					 }
					 */
				}
			}
			foreach($patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$patient_days2locationtypes[$pipid][$loc_day] = end($day_loc_types);
				}
			}
			
			
			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
			$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];
			$active_days_in_period_cs = $patient_days[$ipid]['real_active_days'];


			$hospital_overall_days_cs = $patient_days_overall[$ipid]['hospital']['real_days_cs'];
			$hospiz_overall_days_cs = $patient_days_overall[$ipid]['hospiz']['real_days_cs'];
			$patient_all_days_overall_cs = $patient_days_overall[$ipid]['active_days'];

			if(empty($hospital_overall_days_cs))
			{
				$hospital_overall_days_cs = array();
			}

			if(empty($hospiz_overall_days_cs))
			{
				$hospiz_overall_days_cs = array();
			}

			$hospital_hospiz_overall_days_cs = array_merge($hospital_overall_days_cs, $hospiz_overall_days_cs);

			foreach($hospital_hospiz_overall_days_cs as $k_hh => $v_hh)
			{
				$hospital_hospiz_overall_days_cs[$k_hh] = date('Y-m-d', strtotime($v_hh));
			}

			foreach($patient_all_days_overall_cs as $k_pad => $v_pad)
			{
				$patient_all_days_overall_cs[$k_pad] = date('Y-m-d', strtotime($v_pad));
			}

			foreach($active_days_in_period_cs as $k_active => $v_active)
			{
				$active_days_in_period_cs[$k_active] = date('Y-m-d', strtotime($v_active));
			}


			if($_REQUEST['csdbg'])
			{
				print_r("Old hospital_days\n");
				print_r($hospital_days);

				print_r("CS hospital_days\n");
				print_r($hospital_days_cs);

				print_r("Old Overall hospital_days\n");
				print_r($hospital_overall_days);

				print_r("CS Overall hospital_days\n");
				print_r($hospital_overall_days_cs);

				print_r("Old active_days_in_period\n");
				print_r($active_days_in_period);

				print_r("CS active_days_in_period\n");
				print_r($active_days_in_period_cs);

				print_r("CS hospital_hospiz_overall_days_cs\n");
				print_r($hospital_hospiz_overall_days_cs);



				exit;
			}
//Client Hospital Settings END
			//get sapv in current period
//			$sapv_days = $this->get_period_sapv($ipid, $current_period, $hospital_days);
//			$sapv_days_overall = $this->get_period_sapv($ipid, $overall_period, $hospital_overall_days);

			$sapv_days_cs = $this->get_period_sapv($ipid, $current_period, $hospital_hospiz_overall_days_cs);
			$sapv_days_overall_cs = $this->get_period_sapv($ipid, $overall_period, $hospital_hospiz_overall_days_cs);

//			print_r($current_period);
//			print_r($overall_period);
//			print_r($sapv_days);
//			print_r($sapv_days_cs);
//			print_r($hospital_hospiz_overall_days_cs);
//			exit;

			foreach($sapv_days_cs as $k_s_days => $v_s_days)
			{
				if($k_s_days != 'relevant_sapvs_days')
				{
					$sapv_days_inperiod_cs[] = $k_s_days;
				}
				else
				{
					$relevant_sapvs_days_cs = $v_s_days;
				}
			}
			asort($sapv_days_inperiod_cs);


			if(empty($pseudo_post['first_sapv_day']))
			{
				if(count($relevant_sapvs_days_cs['start']) > 0)
				{
					$this->view->first_sapv_day = date('d.m.Y', strtotime($relevant_sapvs_days_cs['start'][0]));
					$end_sapv_last = end($relevant_sapvs_days_cs['end']);
					$this->view->last_sapv_day = date('d.m.Y', strtotime($end_sapv_last));
				}
				else
				{
					$this->view->first_sapv_day = '0000-00-00 00:00:00';
					$this->view->last_sapv_day = '0000-00-00 00:00:00';
				}
			}

			//get pflegestuffe in current period
			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $current_period['start'], $current_period['end']);
			if($pflege_arr)
			{
				$last_pflege = end($pflege_arr);
				$this->view->patient_pflegestufe = $last_pflege['stage'];
			}
			else
			{
				$this->view->patient_pflegestufe = ' - ';
			}

			//get sapv(s) in current period
			$period_sapv = $sapvs->getSapvInPeriod($ipid, $current_period['start'], $current_period['end']);


			if($period_sapv[0]['status'] == "2" && $period_sapv[0]['approved_date'] != '0000-00-00 00:00:00' && strlen($period_sapv[0]['approved_date']) > 0 && date('Y-m-d', strtotime($period_sapv[0]['approved_date'])) != '1970-01-01')
			{
				$this->view->sapv_approve_date = date('d.m.Y', strtotime($period_sapv[0]['approved_date']));
			}
			else
			{
				$this->view->sapv_approve_date = ' - ';
			}

			if($period_sapv[0]['status'] == "2" && strlen($period_sapv[0]['approved_number']) > 0)
			{
				$this->view->sapv_approve_nr = $period_sapv[0]['approved_number'];
			}
			else
			{
				$this->view->sapv_approve_nr = ' - ';
			}


			$this->view->start_relevant_sapv = $period_sapv[0]['verordnungam'];
			$last_relevant_sapv = end($period_sapv);
			$this->view->end_relevant_sapv = $last_relevant_sapv['verordnungbis'];
			
			//get all sets form types
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
				$set_one_ids[] = $v_set_one['id'];
			}

			$set_two = $form_types->get_form_types($clientid, '2');
			foreach($set_two as $k_set_two => $v_set_two)
			{
				$set_two_ids[] = $v_set_two['id'];
			}

			$set_three = $form_types->get_form_types($clientid, '3');
			foreach($set_three as $k_set_three => $v_set_three)
			{
				$set_three_ids[] = $v_set_three['id'];
			}


			$set_fourth = $form_types->get_form_types($clientid, '4');
			foreach($set_fourth as $k_set_fourth => $v_set_fourth)
			{
				$set_fourth_ids[] = $v_set_fourth['id'];
			}

			$set_ids['one'] = $set_one_ids;
			$set_ids['two'] = $set_two_ids;
			$set_ids['three'] = $set_three_ids;
			$set_ids['fourth'] = $set_fourth_ids;

			
			
			//get contact forms in current period
			$contact_forms_days = $this->get_period_contact_forms($ipid, $current_period,false,false,false,$clientid);
			
			
			$contact_forms_ids[] = '999999999';

			$exclude_after_discharge = array();
			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf))
					{
						if(strtotime($v_cf['start_date']) > strtotime($cycles[$ipid]['discharge_date']) && $pm['isdischarged'] == '1')
						{
							//excluded cf after last discharge
							$exclude_after_discharge[] = $v_cf['id'];
						}
						$contact_forms_ids[] = $v_cf['id'];
					}
				}
			}
			ksort($contact_forms_days);
			$block_classification = new FormBlockClassification();
			$classification_data = $block_classification->get_multiple_block_classification($ipid, $contact_forms_ids);
			

			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data) && in_array($k_cf_day, $active_days_in_period_cs))
					{
						if((in_array($v_cf['form_type'], $set_ids['fourth']) && $classification_data[$v_cf['id']]['intern'] == '0') || !in_array($v_cf['form_type'], $set_ids['fourth']))
						{
							$contact_forms_days_ids[$k_cf_day][] = $v_cf['id'];
							$contact_forms_days_details[$k_cf_day][$v_cf['id']] = $v_cf;
							$contact_forms2form_types[$v_cf['id']][] = $v_cf['form_type'];
						}
					}
				}
			}
			
			if($_REQUEST['dbggq'])
			{
				print_r($pm);
				print_r("\nset_ids\n");
				print_r($set_ids);
				print_r("contact_forms_days \n");
				print_r($contact_forms_days);

				print_r("classification_data \n");
				print_r($classification_data);
				exit;
			}

			foreach($contact_forms_ids as $k_contactform_data => $v_contactform_data)
			{
				if(!array_key_exists($v_contactform_data, $classification_data))
				{
					unset($contact_forms_ids[array_search($v_contactform_data, $contact_forms_ids)]);
				}
			}
			$contact_forms_ids = array_values(array_unique($contact_forms_ids));

			//get patient course in current period
// 			$course_days = $this->get_period_course($ipid, $cycles[$ipid]['discharge_date']);
			$course_days = $this->get_period_course($ipid, $cycles[$ipid]['discharge_date'],true);
			
			if($_REQUEST['qz'])
			{
				print_r($course_days);
				exit;
			}
			
			foreach($course_days as $k_course_date => $v_course_details)
			{
			    foreach($v_course_details as $k_couses => $v_courses)
			    {
			        $course[$k_course_date][] = $v_courses['course_type'];
			    }
			    
				$k_course_date_alt = date('d.m.Y', strtotime($k_course_date));
				if(in_array($k_course_date, $active_days_in_period_cs) && !in_array($k_course_date_alt, $hospital_days_cs) && !in_array($k_course_date_alt, $hospiz_days_cs))
				{
					foreach($v_course_details as $k_couse => $v_course)
					{
						if($v_course_details[$k_couse]['course_type'] == "U" && in_array($k_course_date, $sapv_days_inperiod_cs) && in_array('1', $sapv_days_cs[$k_course_date]))
						{
							$clasifizierung[$k_course_date]['beratung'] += 1;
							//ISPC-1562 BW Nachweis
							$extra_details[$k_course_date]['beratung'][] = $v_course;;
						}
						else if($v_course['course_type'] == 'V' && in_array($k_course_date, $sapv_days_inperiod_cs) && in_array('2', $sapv_days_cs[$k_course_date]))
						{
							$clasifizierung[$k_course_date]['koordination'] += 1;
							//ISPC-1562 BW Nachweis
							$extra_details[$k_course_date]['koordination'][] = $v_course;;
						}
					}
				}
			}
			
			if($_REQUEST['qz'])
			{
				print_r($clasifizierung);
				print_r($extra_details);
			}

			//get real active patient days (active, with sapv and no hospital/hospiz)
//			$real_active_days_cs = $this->real_active_days($active_days_in_period, $hospital_hospiz_overall_days_cs, $sapv_days_cs);

			$real_active_days_overall_cs = $this->real_active_days($active_days, $hospital_hospiz_overall_days_cs, $sapv_days_overall_cs);
			$days_nosapv_overall_cs = $this->nosapv_days($patient_all_days_overall_cs, $hospital_hospiz_overall_days_cs, $sapv_days_overall_cs);


			asort($active_days_in_period);


			if(count($cycles[$ipid]['admissionDates']) > 0)
			{
				foreach($cycles[$ipid]['admissionDates'] as $k_adm => $v_adm)
				{
					$start_periods[$k_adm] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$k_adm]))
					{
						$end_periods[$k_adm] = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$k_adm]['date']));
					}
					else
					{
						$end_periods[$k_adm] = date('Y-m-d', time());
					}
				}
			}
			else
			{
				$start_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));
				$end_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
			}

			//get check for flatrate case and return "7 days flat rate" days
			$flatrate = $this->flatrate_days($ipid, $clientid, $start_periods, $end_periods, $current_period, $real_active_days_overall_cs, $cycles[$ipid], $days_nosapv_overall_cs, $hospital_hospiz_overall_days_cs);

		
			if($_REQUEST['dbg_flatrate'] == "1")
			{
				print_r("start_period\ns");
				print_r($start_periods);

				print_r("end_periods\n");
				print_r($end_periods);

				print_r("current_period\n");
				print_r($current_period);

				print_r("real_active_days_overall\n");
				print_r($real_active_days_overall);


				print_r("CS real_active_days\n");
				print_r($real_active_days_cs);

				print_r("CS real_active_days_overall\n");
				print_r($real_active_days_overall_cs);

				print_r("PAtient days overall");
				print_r($patient_days_overall[$ipid]['treatment_days']);

				print_r("cycles\n");
				print_r($cycles[$ipid]);

				print_r("sapv_days_overall\n");
				print_r($sapv_days_overall);

				print_r("sapv_days_overall_cs\n");
				print_r($sapv_days_overall_cs);

				print_r("days_nosapv_overall\n");
				print_r($days_nosapv_overall);

				print_r("CS days_nosapv_overall\n");
				print_r($days_nosapv_overall_cs);

				print_r("hospital_overall_days\n");
				print_r($hospital_overall_days);
				print_r("CS hospital hospiz overall\n");
				print_r($hospital_hospiz_overall_days_cs);

				print_r($patient_days);

				print_r("Flatrate \n");
				print_r($flatrate);

				print_r("Flatrate Overall");
				print_r($flatrate_overall);
				exit;
			}

			//get performance shortcuts
			$shortcuts = Pms_CommonData::get_prices_shortcuts();

// 			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);
			$master_price_list = $p_list->get_period_price_list_specific($current_period['start'], $current_period['end'],"PricePerformance",$clientid); ////ISPC-2609 + ISPC-2000 Ancuta 24.09.2020 - add client param +  $specific was missing- not used !?!?
	
			
			
			$this->view->shortcuts = $shortcuts['performance'];
			$this->view->price_list = $master_price_list;
			$pseudo_post['shortcuts'] = $shortcuts['performance'];
			$pseudo_post['price_list'] = $master_price_list;

			// ==============================================
			// HACK - TODO-16 BWS10337  - 16.15.2015 - Start
			// ==============================================
			$remove_flatrate_ipids = array("61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"); // BWS10295
			$rfi_start["61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"] = "2015-11-24";
			$rfi_end["61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"] = "2015-11-30";
			
			if(in_array($ipid,$remove_flatrate_ipids)  &&  Pms_CommonData::isintersected($rfi_start[$ipid], $rfi_end[$ipid], $current_period['start'], $current_period['end']) )
			{
			    $flatrate = array();
			}
			// ==============================================
			// HACK - TODO-16 BWS10337  - 16.15.2015 - End
			// ==============================================
			
			
// 			$overall_patient_shortcuts = $this->patient_performance_overall($ipid, $clientid, $overall_performance_period, $active_days, $set_ids, $flatrate, $flatrate_admissions, $master_price_list, $days_in_period_overall_performance, $hospital_hospiz_days);
			$overall_patient_shortcuts = $this->patient_performance_overall($ipid, $clientid, $overall_performance_period, $active_days, $set_ids, $flatrate, $flatrate_admissions, $master_price_list, $days_in_period_overall_performance, $hospital_hospiz_overall_days_cs);
			
			$flatrate_continued = $this->flatrate_days_continued($ipid, $clientid, $start_periods, $end_periods, $current_period, $real_active_days_overall_cs, $cycles[$ipid], $days_nosapv_overall_cs, $hospital_hospiz_overall_days_cs, $overall_patient_shortcuts['days_products']);
			
			if($_REQUEST['dbg_flatrate'] == "2")
			{
				print_r("flatrate\n");
				print_r($flatrate);
				print_r("overall_patient_shortcuts\n");
				print_r($overall_patient_shortcuts);
				print_r("flatrate_continued\n");
				print_r($flatrate_continued);
				exit;
			}

			$overall_shorts['shortcuts'] = array();
			foreach($overall_patient_shortcuts['shortcuts'] as $k_short_overall => $v_short_overall)
			{
				if(in_array($k_short_overall, $days_in_period_overall_performance_cmonth))
				{
					$overall_shorts['shortcuts'] = array_merge($overall_shorts['shortcuts'], $v_short_overall);
				}
			}
			$overall_patient_shortcuts['shortcuts'] = $overall_shorts['shortcuts'];

			$overall_k_shorts['last_koord_dates'] = array();
			foreach($overall_patient_shortcuts['last_koord_dates'] as $k_short_overall => $v_short_overall)
			{
				if(in_array($k_short_overall, $days_in_period_overall_performance_cmonth))
				{
					$overall_k_shorts['last_koord_dates'] = array_merge($overall_k_shorts['last_koord_dates'], $v_short_overall);
				}
			}
			$overall_patient_shortcuts['last_koord_dates'] = $overall_k_shorts['last_koord_dates'];

			$week_numbers_arr[] = '9999999999';

			if(count($overall_patient_shortcuts['last_koord_dates']) != 0)
			{
				$last_koord_dates = $overall_patient_shortcuts['last_koord_dates'];
			}
			else
			{
				$last_koord_dates[] = '1970-01-01';
			}

			foreach($days_in_period as $k_period_day => $v_period_day)
			{
				//$hospital_days_cs format is d.m.Y
				$v_period_day_alt = date('d.m.Y', strtotime($v_period_day));
				

				$day_location_type = $patient_days2locationtypes[$ipid][date('d.m.Y',strtotime($v_period_day))];
				
				$day_shortcuts = array();

				if(count($month_shortcuts) == 0)
				{
					$month_shortcuts = array();
				}

				$master_data[$v_period_day] = array();

				if(count($overall_patient_shortcuts['last_koord_dates']) > '0')
				{
					$last_koord_date_overall = end($overall_patient_shortcuts['last_koord_dates']);
					$week_numbers_arr[$last_koord_date_overall] = date('W', strtotime($last_koord_date_overall));
				}

				//calculate set one form_type visits
				//first get flatrate exception and set shortcut
				$shortcut = '';
				$set_one_result = array_intersect($set_one_ids, $contact_forms_days[$v_period_day]['form_types']);

				if($_REQUEST['sapv_days'] == '1')
				{
					print_r("contact_forms_days\n");
					print_r($sapv_days);
					print_r("Overall shortcuts\n");
					print_r($overall_patient_shortcuts);

					exit;
				}

				if((in_array($v_period_day, $flatrate) || in_array($v_period_day, $flatrate_continued)) && !in_array($v_period_day, $hospital_days))
				{
					$shortcut = '37b1';
					$month_shortcuts[] = $shortcut;
					$overall_patient_shortcuts['shortcuts'][] = $shortcut;
				}
				
				
				
				foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf_one)
				{
					if(!in_array($v_cf_one['id'], $exclude_after_discharge) && in_array($v_cf_one['form_type'], $set_one_ids))
					{
						if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && array_key_exists($v_period_day, $contact_forms_days) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs) && count($set_one_result) != 0) //normal set conditions
						{
//						we have visits=> check if there are required visits for this action set
							if(in_array('4', $sapv_days_cs[$v_period_day]) || in_array('3', $sapv_days_cs[$v_period_day]))
							{
								$shortcut = '37b2';
								
								//ISPC-1562 BW Nachweis
								$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
								
							}
						}
					}
				}

				
				if(!empty($shortcut))
				{
					if($shortcut == '37b1' && (in_array($v_period_day, $flatrate['pay_days']) || in_array($v_period_day, $flatrate_continued['pay_days'])))
					{
						$master_data[$v_period_day][$shortcut]['pay_days'] = '1';
					}
					$day_shortcuts[] = $shortcut;
					$master_data[$v_period_day][$shortcut]['shortcut'] = $shortcut;
					$master_data[$v_period_day][$shortcut]['qty'] = '1';$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
					$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
					$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
 					
					$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
				}
				
				
				
				
				if($_REQUEST['qd'])
				{
					print_r("OPS: \n");
					print_r($overall_patient_shortcuts);
					print_r("MD: \n");
					print_r($master_data);
					exit;
				}
				//sapv overwrite if formtype is set 4
				//calculate set two form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				$set_fourth_result = array_intersect($set_fourth_ids, $contact_forms_days[$v_period_day]['form_types']);

				if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					$set_two_result = array_intersect($set_two_ids, $contact_forms_days[$v_period_day]['form_types']);

//					if((count($set_two_result) != 0 || in_array('U', $course_days[$v_period_day])) && in_array('1', $sapv_days_cs[$v_period_day]))
// 					if((count($set_two_result) != 0 || in_array('U', $course_days[$v_period_day])) && in_array('1', $sapv_days_cs[$v_period_day]) || (count($set_ones_result) != 0 && in_array('1', $sapv_days_cs[$v_period_day])))
					if((count($set_two_result) != 0 || in_array('U', $course[$v_period_day])) && in_array('1', $sapv_days_cs[$v_period_day]) || (count($set_ones_result) != 0 && in_array('1', $sapv_days_cs[$v_period_day])))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							if(is_numeric($k_cf) && !in_array($v_cf['id'], $exclude_after_discharge))
							{
								$shortcut = '';
								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']) && !in_array($v_cf['form_type'], $set_one_ids))
								{
									$shortcut = '37b5';
								}


								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_two_ids) ))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];;
										
    									//ISPC-1562 BW Nachweis
    									$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
    									//ISPC-1562 BW Nachweis
    									$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
									}

									
									// pricelist
									
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
								}
							}
						}

						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							if($v_day_course['course_type'] == 'U')
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$v_period_day]['37b6']['qty'] < '2')
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
									$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									
                                    //ISPC-1562 BW Nachweis 
									$extra_data[$v_period_day][$shortcut][] = $course_days[$v_period_day][$k_day_course];
									
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
								}
							}
						}
					}
				}


				//calculate set three form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					$last_koord_day = end($last_koord_dates);
					$set_three_result = array_intersect($set_three_ids, $contact_forms_days[$v_period_day]['form_types']);

// 					if((count($set_three_result) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days_cs[$v_period_day]))
					if((count($set_three_result) != 0 || in_array('V', $course[$v_period_day])) && in_array('2', $sapv_days_cs[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform) && !in_array($v_cform['id'], $exclude_after_discharge))
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']) && !in_array($v_cform['form_type'], $set_one_ids))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && in_array($v_cform['form_type'], $set_three_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
    									//ISPC-1562 BW Nachweis
        								$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
    									
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
    									//ISPC-1562 BW Nachweis
        								$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
									
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}

						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							$last_koord_day = end($last_koord_dates);
							if($v_day_course['course_type'] == 'V')
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(($shortcut == '37b7' || $shortcut == '37b8'))
								{
									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr))
									{
										$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];

										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $course_days[$v_period_day][$k_day_course];
										
										$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$week_numbers_arr[] = $week_number;
										$last_koord_dates[] = $v_period_day;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $course_days[$v_period_day][$k_day_course]; //  need more info here
										
										$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$last_koord_dates[] = $v_period_day;
									}
								}
							}
						}
					}
				}


				//calculate set 4 (ISPC-241)
				if((count($set_fourth_result) != 0 || count($set_one_result) != 0) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					//setup each form sapv based on classification block selection
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
						{
							if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
							else if(in_array('1', $sapv_days_cs[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
						}
						else if($classification_data[$v_cf_day]['intern'] != '1')
						{
							if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								//switch between BE-KO if VV is not BE
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
						}
					}

					//U & V at the top
					//beratung
					if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array('1', $sapv_days_cs[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							//check if there are 2 beratung change sapv in koord
							if($master_data[$v_period_day]['37b6']['qty'] == '2' && (count($set_fourth_result) != 0 || count($set_one_result) != 0) && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
							}
//							print_r($v_period_day);
//							var_dump(is_numeric($k_cf) && $sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1' && !in_array($v_cf['id'], $exclude_after_discharge) && (in_array($v_cf['form_type'], $set_fourth_ids) && (($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')) || in_array($v_cf['form_type'], $set_one_ids)));
//							var_dump($sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1');
//							var_dump(!in_array($v_cf['id'], $exclude_after_discharge));
//							var_dump(in_array($v_cf['form_type'], $set_fourth_ids));
//							var_dump((($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')));
//							print_r("\n");
//							print_r("\n");

							if(is_numeric($k_cf) && $sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1' && !in_array($v_cf['id'], $exclude_after_discharge) && (in_array($v_cf['form_type'], $set_fourth_ids) && (($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')) || in_array($v_cf['form_type'], $set_one_ids)))
							{
								$shortcut = '';
								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5') //only b5 or b6
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_fourth_ids) || in_array($v_cf['form_type'], $set_one_ids)))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
										
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										
										//ISPC-1562 BW Nachweis										
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cf];
										
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
								}
							}
						}
					}

					//koordination
					$last_koord_day = end($last_koord_dates);

					if(!in_array($v_period_day, $flatrate) && !in_array($v_period_day, $flatrate_continued) && !in_array('37b2', $day_shortcuts) && in_array('2', $sapv_days_cs[$v_period_day]))
					{

						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform) && $sapv_status[$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2' && !in_array($v_cform['id'], $exclude_after_discharge))
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}
									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;

									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && (in_array($v_cform['form_type'], $set_fourth_ids) || in_array($v_cform['form_type'], $set_one_ids)))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];

										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
										
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';$master_data[$v_period_day][$shortcut]['location_type'] = $day_location_type;
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];

										//ISPC-1562 BW Nachweis
										$extra_data[$v_period_day][$shortcut][] = $contact_forms_days[$v_period_day][$k_cform];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['list'];
									
									
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}
					}
				}
				
				//add exclusion
				if(in_array($v_period_day, $sapv_days_inperiod_cs) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						//check if contactform type for each days
						if(in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids) && (in_array('4', $sapv_days_cs[$v_period_day]) || in_array('3', $sapv_days_cs[$v_period_day]) ))
						{
							$clasifizierung[$v_period_day]['home_visit'] += 1;
							//ISPC-1562 BW Nachweis
							$extra_details[$v_period_day]['home_visit'] []= $contact_forms_days_details[$v_period_day][$v_cf_day];;
						}
						else
						{
							//$clasifizierung[$v_period_day]['home_visit'] += 0;
							//sum classifizierung data if form is not housebesuche type(1)
							if($clasifizierung[$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days_cs[$v_period_day]) &&
								(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
								//ISPC-1562 BW Nachweis
								$extra_details[$v_period_day]['beratung'] []= $contact_forms_days_details[$v_period_day][$v_cf_day];
								
							}
							else if($clasifizierung[$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$v_period_day]) || in_array('2', $sapv_days_cs[$v_period_day])))
							{
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]) && !in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
							}
							else if($clasifizierung[$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$v_period_day]) || in_array('2', $sapv_days_cs[$v_period_day])))
							{
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]) && !in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days_cs[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
								//ISPC-1562 BW Nachweis
								$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
							}
							else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days_cs[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['koordination'] += '1';
								//ISPC-1562 BW Nachweis
								$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
							}
							else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0') && in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids))
							{
								if(in_array('1', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['beratung'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
								else if(in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
									//ISPC-1562 BW Nachweis
									$extra_details[$v_period_day]['koordination'] [] = $contact_forms_days_details[$v_period_day][$v_cf_day];
								}
							}

							$count_be[$v_period_day] += 1;
						}
					}
				}
			}
			ksort($clasifizierung);
			ksort($extra_details);
			
			/* ################################### */
			/* SAVED DATA  -- ISPC:1927  */
			/* ################################### */
			
			$bw_pr = new BwPerformanceRecord();
			$bw_data = $bw_pr->get_bw_performance_record($ipid, $current_period['start'], $master_price_list,$patient_days2locationtypes);
				
			if(!isset($bw_data) || empty($bw_data))
			{
				$save_data = "0";
			} else{
				$save_data = "1";
			}
			
				
			if(!empty($bw_data)){
				$saved_per_moth[$ipid] = array();
				foreach($bw_data as $days=>$vals){
					foreach($vals as $sh=>$shd){
						$saved_per_moth[$ipid][date("mY",strtotime($days))][] = $sh;
					}
				}
					
				foreach($days_in_period  as $k=>$act_day){
					if( isset($bw_data[$act_day]) && !empty($bw_data[$act_day]) ){ // check if more thant the flatrate from prevoius month is saved.
						if(count($saved_per_moth[$ipid][date("mY",strtotime($act_day))]) >=6 ){
							$final_data[$ipid][$act_day] = $bw_data[$act_day];
						} else {
							$final_data[$ipid][$act_day] = array_merge($master_data[$act_day],$bw_data[$act_day]);
							$save_data = "0";
						}
							
					} else {
						$final_data[$ipid][$act_day] = $master_data[$act_day];
					}
				}
				$master_data = $final_data[$ipid];
			}
			
			
			
			if($_REQUEST['qz'])
			{
				print_r("2: \n");
				print_r($clasifizierung);
				print_r($sapv_status);
				print_r($extra_details);
				exit;
			}

			if(strlen($pseudo_post['first_active_day']) == 0)
			{

				if(count($clasifizierung) > 0)
				{
					$activity_days_array = array_keys($clasifizierung);
					$end_activity_date = end($activity_days_array);

					$first_active_day = date('d.m.Y', strtotime($activity_days_array[0]));
					$last_active_day = date('d.m.Y', strtotime($end_activity_date));
				}
				else
				{
					$first_active_day = '0000-00-00 00:00:00';
					$last_active_day = '0000-00-00 00:00:00';
				}
			}
			else
			{
				$first_active_day = $pseudo_post['first_active_day'];
				$last_active_day = $pseudo_post['last_active_day'];
			}

			$this->view->first_active_day = $first_active_day;
			$this->view->last_active_day = $last_active_day;
			$pseudo_post['first_active_day'] = $first_active_day;
			$pseudo_post['last_active_day'] = $last_active_day;

			if($_REQUEST['dbg'])
			{
				print_r("X\n");
				print_r($classification_data);
				print_r("Y\n");
				print_r($contact_forms_days);
				print_r("Z\n");
				print_r($contact_forms2form_types);
//				exit;
			}

			$this->view->classification_box = $clasifizierung;
			$pseudo_post['classification_box'] = $clasifizierung;

			if($_REQUEST['dbg'])
			{
				print_r("(Hospital \n");
				print_r($hospital_days);
				print_r("(Active days in period \n");
				print_r($active_days_in_period);
				print_r($sapv_status);
				print_r($master_data);
				
				print_r("Extra details listed in invoices"); //     ISPC-1562 BW Nachweis 
				print_r($extra_details);
				exit;
			}

			


			if($_REQUEST['dbgq'] == 3)
			{
//			print_r("\n Cycles Days \n");
//			print_r($cycles);
//			print_r("\n Active Days \n");
//			print_r($active_days_in_period);
//			print_r("\n Current Days \n");
//			print_r($current_period);
//			print_r("\n SAPV Days\n");
//			print_r($sapv_days);
//			print_r("\n Hospital Days\n");
//			print_r($hospital_days);
//			print_r("\n Contact Forms Days\n");
//			print_r($contact_forms_days);
//			print_r("\n Course Days \n");
//			print_r($course_days);
//			print_r($week_numbers_arr);
//			print_r("\n Real Active Days \n");
//			print_r($real_active_days);
//			print_r("\n Flatrate\n");
//			print_r($flatrate);
//			print_r("\n Flatrate period days \n");
//			print_r($flatrate_admissions);
//		print_r("\n Master Price List\n");
//		print_r($master_price_list);
				print_r("\n Master Data\n");
				print_r($master_data);
			}

			$this->view->period_days = $days_in_period;
			$this->view->totals = $totals;
			$this->view->master_data = $master_data;

			$pseudo_post['clientid'] = $clientid;
			$pseudo_post['period_days'] = $days_in_period;

			$pseudo_post['totals'] = $totals;
			$pseudo_post['master_data'] = $master_data;
			$pseudo_post['extra_data'] = $extra_data;
			$pseudo_post['extra_data_details'] = $extra_details;
			
			$pseudo_post['health_insurance_ik'] = $this->view->health_insurance_ik;
			$pseudo_post['insurance_no'] = $this->view->insurance_no;
			$pseudo_post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;

			$pseudo_post['address'] = $pseudo_post['hi_subdiv_address'];
			$pseudo_post['patient_address'] = $patient_address;
			$pseudo_post['sapv_approve_date'] = $this->view->sapv_approve_date;
			$pseudo_post['sapv_approve_nr'] = $this->view->sapv_approve_nr;

			$pseudo_post['patient_pflegestufe'] = $this->view->patient_pflegestufe;

			if(empty($pseudo_post['first_sapv_day']))
			{
				$pseudo_post['first_sapv_day'] = $this->view->first_sapv_day;
				$pseudo_post['last_sapv_day'] = $this->view->last_sapv_day;
			}

			
			$pseudo_post['kv_header']['patient_name_address'] = htmlspecialchars($pm['last_name']) . ", " . htmlspecialchars($pm['first_name']) . "\n" . htmlspecialchars($pm['street1']) . "\n" . htmlspecialchars($pm['zip']) . "&nbsp;" . htmlspecialchars($pm['city']);
			$pseudo_post['kv_header']['patient_birthdate'] = $pm['birthd'];
			$pseudo_post['kv_header']['patient_name'] = htmlspecialchars($pm['last_name']) . ", " . htmlspecialchars($pm['first_name']);
			$pseudo_post['kv_header']['patient_address'] = htmlspecialchars($pm['street1']) . "&nbsp;" . htmlspecialchars($pm['zip']) . "\n" . htmlspecialchars($pm['city']);
				
			$client_form_type =  FormTypeActions::get_form_type_actions();
			
// 			print_r($client_form_type); exit;
			$pseudo_post['client_form_type'] = $client_form_type;
			$pseudo_post['users_array'] = $user_array ;
			
			$pseudo_post['alias']['home_visit'] = "Hausbesuch";
			$pseudo_post['alias']['beratung'] = "Beratung";
			$pseudo_post['alias']['koordination'] = "Koordination";
			
			if($this->getRequest()->isPost())
			{
			    
// 			    print_R($pseudo_post['kv_header']); exit;
				//normal anlage like pdf
				$pseudo_post['client_details'] = $client_details[0];
				$pseudo_post['client_city'] = $client_details[0]['city'];
				$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];

				$pseudo_post['bottom_part'] = true;
				if($_REQUEST['new_version'] == "1")
				{
    				$this->generate_pdf($pseudo_post, "form_performance_items_pdf", "performancerecordpdf_items.html", "P"); // This is per patient - the form
				} 
				else
				{
    				$this->generate_pdf($pseudo_post, "PerformancePdf", "performancerecordpdf.html");
				}
			}

			
			// ========================================================================================
			// ======================= START ::  $_REQUEST['mode'] == 'pdfs' =============================
			// ========================================================================================
					
			//change masterdata to invoicemasterdata and list pdf with invoice and anlage like
			if($_REQUEST['mode'] == 'pdfs')
			{
				$only_one = array();
				foreach($master_data as $k_master_data => $v_master_data)
				{
					foreach($v_master_data as $k_master_shortcut => $v_master_values)
					{

						if($k_master_shortcut == '37b1')
						{
							if($v_master_data[$k_master_shortcut]['pay_days'] == '1')
							{
								if(!in_array($k_master_shortcut, $only_one) && ($v_master_values['price_list'] && $v_master_values['price'] && $v_master_values['qty'] > 0 ) )
								{
									$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut'] = $k_master_shortcut;
									$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['qty'] += '1';
									$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['price'] = $v_master_values['price'];
// 									$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['dates'][] = $k_master_data;
									$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut_total'] = $v_master_values['price'];
										
									$grand_total += $v_master_values['price'];
//									$only_one[] = $k_master_shortcut;
								}
							}	
						}
						else
						{
							/* $invoice_master[$k_master_shortcut]['qty'] += $v_master_values['qty'];
							$invoice_master[$k_master_shortcut]['price'] = $v_master_values['price'];
							$invoice_master[$k_master_shortcut]['shortcut_total'] += ($v_master_values['qty'] * $v_master_values['price']); */
							if($v_master_values['price_list'] && $v_master_values['price'] && $v_master_values['qty'] > 0 ) {
								$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut'] = $k_master_shortcut;
								$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['qty'] += $v_master_values['qty'];
								$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['price'] = $v_master_values['price'];
// 								$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['dates'][] = $k_master_data;
								$invoice_master[$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut_total'] += ($v_master_values['qty'] * $v_master_values['price']);
								$grand_total += ($v_master_values['qty'] * $v_master_values['price']);
							}
						}
					}
				}
				$pseudo_post['invoice_items'] = $invoice_master;
				$pseudo_post['grand_total'] = $grand_total;
				$pseudo_post['client_details'] = $client_details[0];
				$pseudo_post['client_city'] = $client_details[0]['city'];
				$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];

				if(empty($pseudo_post['current_period_start']))
				{
					$pseudo_post['current_period_start'] = date('d.m.Y', strtotime($this->view->start_relevant_sapv));
					$pseudo_post['current_period_end'] = date('d.m.Y', strtotime($this->view->end_relevant_sapv));
				}
				$pseudo_post['bottom_part'] = false;


				if($_REQUEST['old_version'] =="1")
				{
    				$orientation = array('P', 'L');
				} 
				else
				{
    				$orientation = array('P', 'P');
				}
				$background_pages = array('0'); //0 is first page;
				
								
				if($_REQUEST['pdfquick'] != '1' || strlen($_REQUEST['pdfquick']) == 0)
				{

//				21.06.2013 Added invoice number type START
					$bw_invoices_number = $bw_invoices->get_next_invoice_number($clientid, true);
					$prefix = $bw_invoices_number['prefix'];
					$invoicenumber = $bw_invoices_number['invoicenumber'];

//				21.06.2013 Added invoice number type END
					//insert invoice
					$ins_inv = new BwInvoices();
					$ins_inv->invoice_start = $current_period['start'];
					$ins_inv->invoice_end = $current_period['end'];
					$ins_inv->start_active = date('Y-m-d H:i:s', strtotime($pseudo_post['first_active_day']));
					$ins_inv->end_active = date('Y-m-d H:i:s', strtotime($pseudo_post['last_active_day']));

					$ins_inv->start_sapv = date('Y-m-d H:i:s', strtotime($pseudo_post['first_sapv_day']));
					$ins_inv->end_sapv = date('Y-m-d H:i:s', strtotime($pseudo_post['last_sapv_day']));

					$ins_inv->sapv_approve_date = date('Y-m-d H:i:s', strtotime($pseudo_post['sapv_approve_date']));
					$ins_inv->sapv_approve_nr = $pseudo_post['sapv_approve_nr'];
					$ins_inv->ipid = $ipid;
					$ins_inv->client = $clientid;
					$ins_inv->prefix = $prefix;
					$ins_inv->invoice_number = $invoicenumber;
					$ins_inv->invoice_total = $grand_total;
					$ins_inv->address = (strlen($pseudo_post['patient_address']) > '0') ? $pseudo_post['patient_address'] : $pseudo_post['address'];
// 				$ins_inv->status = '2';
					$ins_inv->status = '1'; // DRAFT - ENTWURF
					$ins_inv->save();

					$ins_id = $ins_inv->id;
					$pseudo_post['prefix'] = $prefix;

					foreach($invoice_master as $k_shortcut_inv => $v_values_inv)
					{
						if($v_values_inv['qty'] > 0){
							$invoice_items[] = array(
								'invoice' => $ins_id,
								'client' => $clientid,
								'shortcut' => $k_shortcut_inv,
								'qty' => $v_values_inv['qty'],
								'price' => $v_values_inv['price']
							);
						}
					}

					if(count($invoice_items) > 0)
					{
						//insert many records with one query!!
						$collection = new Doctrine_Collection('BwInvoiceItems');
						$collection->fromArray($invoice_items);
						$collection->save();
					}

					$pseudo_post['unique_id'] = $ins_id;
					
					

					$pseudo_post['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($current_period['start']));
					$pseudo_post['invoice_data']['invoice_end'] = date('d.m.Y', strtotime($current_period['end']));
					$pseudo_post['invoice_data']['invoice_number'] = $prefix.$invoicenumber;
					
				}
				
				if(strlen($_REQUEST['iid']) > 0)
				{
					if($bwinvoice_details['sapv_approve_date'] != '0000-00-00 00:00:00' && strlen($bwinvoice_details['sapv_approve_date']) > 0 && $bwinvoice_details['sapv_approve_date'] != '1970-01-01 00:00:00')
					{
						$pseudo_post['sapv_approve_date'] = date('d.m.Y', strtotime($bwinvoice_details['sapv_approve_date']));
					}
					else
					{
						$pseudo_post['sapv_approve_date'] = ' - ';
					}
					/* 
					foreach($bwinvoice_details['items'] as $k_itm => $v_itm)
					{
						$items_invoice[$v_itm['shortcut'].$v_itm['price']] = $v_itm;
						$items_invoice[$v_itm['shortcut'].$v_itm['price']]['shortcut_total'] = ($v_itm['qty'] * $v_itm['price']);
					}

					$pseudo_post['invoice_items'] = $items_invoice; 
					*/
					$pseudo_post['invoice_items'] = $bwinvoice_details['items'];
					$pseudo_post['grand_total'] = $bwinvoice_details['invoice_total'];
				}

				if(!empty($bwinvoice_details['address']))
				{

					$pseudo_post['address'] = $bwinvoice_details['address'];
					$pseudo_post['hi_subdiv_address'] = $bwinvoice_details['address'];
				}
				$pseudo_post['invoice_number'] = $invoicenumber;

				
	
				
				if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
				{
					$storno_data = $bw_invoices->getBwInvoice($_REQUEST['storno']);

					//ISPC-2532 Lore 09.11.2020
					$pseudo_post['storned_invoice_number'] = $pseudo_post['prefix'].$pseudo_post['invoice_number'];
					
					$pseudo_post['address'] = $storno_data['address'];
					$pseudo_post['prefix'] = $storno_data['prefix'];
					$pseudo_post['invoice_number'] = $storno_data['invoice_number'];
					
					if($storno_data['completed_date'] != '0000-00-00 00:00:00')
					{
						$pseudo_post['completed_date'] = $storno_data['completed_date'];
					}
					$pseudo_post['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
					$pseudo_post['first_active_day'] = date('d.m.Y', strtotime($storno_data['start_active']));
					$pseudo_post['last_active_day'] = date('d.m.Y', strtotime($storno_data['end_active']));
					
					if($storno_data['start_sapv'] != '0000-00-00 00:00:00' && $storno_data['end_sapv'] != '0000-00-00 00:00:00')
					{
						$pseudo_post['first_sapv_day'] = date('d.m.Y', strtotime($storno_data['start_sapv']));
						$pseudo_post['last_sapv_day'] = date('d.m.Y', strtotime($storno_data['end_sapv']));
					}

					$pseudo_post['sapv_approve_date'] = date('d.m.Y', strtotime($storno_data['sapv_approve_date']));
					$pseudo_post['sapv_approve_nr'] = $storno_data['sapv_approve_nr'];
					$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];
					//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
					if($_REQUEST['bulk_print'] == '1'){
					   $pseudo_post['unique_id'] = $storno_data['id'];
					}else{
					   $pseudo_post['unique_id'] = $storno_data['record_id'];
					}
					$pseudo_post['grand_total'] = ($storno_data['invoice_total'] * (-1));
					$pseudo_post['sapv_footer'] = $storno_data['footer'];

                    //$template_files = array('storno_invoice_sapv_pdf.html', 'performancerecordpdf.html');

					
                    // Changed for  ISPC-1562 BW Nachweis
					if($_REQUEST['old_version'] =="1")
					{
    					$template_files = array('storno_invoice_sapv_pdf.html', 'performancerecordpdf.html');// This is per patient - storno invoice
					}
					else
					{
    					$template_files = array('storno_invoice_sapv_pdf.html', 'performancerecordpdf_items.html');// This is per patient - storno invoice
					}
				}
				else
				{
				   
				    // Changed for  ISPC-1562 BW Nachweis
				    if($_REQUEST['old_version'] =="1")
				    {
                        $template_files = array('invoice_sapv_pdf.html', 'performancerecordpdf.html');
				    }
				    else
				    {
    					$template_files = array('invoice_sapv_pdf.html', 'performancerecordpdf_items.html');// This is per patient - invoice
				    } 
				}
				if($_REQUEST['dbgqq'])
				{
					print_r($pseudo_post);
					exit;
				}
// 					print_r($pseudo_post);
// 					exit;
                //ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
				if($_REQUEST['bulk_print'] == '1'){
				    $pseudo_post['bulk_print'] = 1;
				    $pseudo_post['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
				    
    				if($_REQUEST['old_version'] =="1")
    				{
        				$files = $this->generate_pdf($pseudo_post, "PerformancePdfs", $template_files, $orientation, $background_pages);// This is per patient - invoice
    				}
    				else 
    				{
    				 
    				    $files = $this->generate_pdf($pseudo_post, "PerformancePdf_invoice_items", $template_files, $orientation, $background_pages);// This is per patient - invoice
    				}
    				
    				return $files;
    				exit();
    				
				} else{
				    
				
    				if($_REQUEST['old_version'] =="1")
    				{
        				$this->generate_pdf($pseudo_post, "PerformancePdfs", $template_files, $orientation, $background_pages);// This is per patient - invoice
    				}
    				else 
    				{
        				$this->generate_pdf($pseudo_post, "PerformancePdf_invoice_items", $template_files, $orientation, $background_pages);// This is per patient - invoice
    				}
				}
			}
			// ========================================================================================
			// ======================= END::  $_REQUEST['mode'] == 'pdfs' =============================
			// ========================================================================================
			
		}

		private function patient_performance_overall($ipid, $clientid, $overall_period, $active_days, $set_ids, $flatrate, $flatrate_admissions, $master_price_list, $days_in_period_overall, $hospital_hospiz_days = false, $sapv_days_cs = false)
		{
			foreach($active_days as $k_active_day => $v_active_day)
			{
				if(in_array($v_active_day, $days_in_period_overall))
				{
					$active_days_in_period[] = $v_active_day;
				}
			}

			//get hospital overall days
			if($hospital_hospiz_days)
			{
				$hospital_days = $hospital_hospiz_days;
			}
			else
			{
				//changed with hospital-hospiz CS
				$hospital_days = $this->get_period_hospitals($ipid, $clientid, $overall_period);
			}

			//get sapv overall data
			if($sapv_days_cs)
			{
				$sapv_days = $sapv_days_cs;
			}
			else
			{
				$sapv_days_overall = $this->get_period_sapv($ipid, $overall_period, $hospital_days);
				foreach($sapv_days_overall as $k_sapv => $v_sapv)
				{
					$sapv_days_inperiod[] = $k_sapv;
				}
				$sapv_days = $sapv_days_overall;
			}

			//get course overall data
			$course_days = $this->get_period_course($ipid);

			foreach($course_days as $k_course_date => $v_course_details)
			{
				foreach($v_course_details as $k_couse => $v_course)
				{
					if($v_course == 'U' && in_array($k_course_date, $sapv_days_inperiod) && in_array('1', $sapv_days_overall[$k_course_date]))
					{
						$clasifizierung[$k_course_date]['beratung'] += 1;
					}
					else if($v_course == 'V' && in_array($k_course_date, $sapv_days_inperiod) && in_array('2', $sapv_days_overall[$k_course_date]))
					{
						$clasifizierung[$k_course_date]['koordination'] += 1;
					}
				}
			}


			$contact_forms_days = $this->get_period_contact_forms($ipid, $overall_period);

			$contact_forms_ids[] = '999999999';
			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf))
					{
						$contact_forms_ids[] = $v_cf['id'];
					}
				}
			}
			ksort($contact_forms_days);

			$block_classification = new FormBlockClassification();
			$classification_data = $block_classification->get_multiple_block_classification($ipid, $contact_forms_ids);

			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data))
					{
						$contact_forms_days_ids[$k_cf_day][] = $v_cf['id'];
						$contact_forms2form_types[$v_cf['id']][] = $v_cf['form_type'];
					}
				}
			}

			$set_one_ids = $set_ids['one'];
			$set_two_ids = $set_ids['two'];
			$set_three_ids = $set_ids['three'];
			$set_fourth_ids = $set_ids['fourth'];

			foreach($days_in_period_overall as $k_period_day => $v_period_day)
			{

				$day_shortcuts = array();
				if(count($month_shortcuts[date('Ym', strtotime($v_period_day))]) == 0)
				{
					$month_shortcuts = array();
				}
				
				$pseudo_overall_shortcuts = array();
				$master_data[$v_period_day] = array();

				//calculate set one form_type visits
				//first get flatrate exception and set shortcut
				$shortcut = '';
				if(in_array($v_period_day, $flatrate) && !in_array($v_period_day, $hospital_days))
				{
					$shortcut = '37b1';
					$month_shortcuts[date('Ym', strtotime($v_period_day))][] = $shortcut;
					$pseudo_overall_shortcuts[] = $shortcut;
				}
				else if(!in_array($v_period_day, $flatrate) && array_key_exists($v_period_day, $contact_forms_days) && in_array($v_period_day, $active_days_in_period) && !in_array($v_period_day, $hospital_days)) //normal set conditions
				{

//					we have visits=> check if there are required visits for this action set
					$set_one_result = array_intersect($set_one_ids, $contact_forms_days[$v_period_day]['form_types']);

					if(count($set_one_result) != 0 && (in_array('3', $sapv_days[$v_period_day]) || in_array('4', $sapv_days[$v_period_day])))
					{
						$shortcut = '37b2';
					}
				}

				if(!empty($shortcut))
				{
					$day_shortcuts[] = $shortcut;
					$master_data[$v_period_day][$shortcut]['shortcut'] = $shortcut;
					$master_data[$v_period_day][$shortcut]['qty'] = '1';
					$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
					$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
				}

				//sapv overwrite if formtype is set 4
				//calculate set two form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period) && !in_array($v_period_day, $hospital_days))
				{
					$set_ones_result = array_intersect($set_one_ids, $contact_forms_days[$v_period_day]['form_types']);
					$set_two_result = array_intersect($set_two_ids, $contact_forms_days[$v_period_day]['form_types']);

					if((count($set_two_result) != 0 || in_array('U', $course_days[$v_period_day])) && in_array('1', $sapv_days[$v_period_day]) || (count($set_ones_result) != 0 && in_array('1', $sapv_days[$v_period_day]) )
					)
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							if(is_numeric($k_cf))
							{
								$shortcut = '';
								if(!in_array('37b1', $pseudo_overall_shortcuts) && empty($flatrate['pay_days']) && !in_array('37b7', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b5';
										$pseudo_overall_shortcuts[] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}


								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_two_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}

						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							$shortcut = '';
							if(!in_array('37b1', $pseudo_overall_shortcuts) && empty($flatrate['pay_days']) &&  !in_array('37b7', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts))
							{
								$shortcut = '37b5';
							}
							
							if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
							{
								$shortcut = '37b6';
							}

							if(!empty($shortcut))
							{
								if($shortcut == '37b5')
								{
									$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b5';
									$pseudo_overall_shortcuts[] = '37b5';
								}

								$day_shortcuts[] = $shortcut;
							}

							if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$v_period_day]['37b6']['qty'] < '2' && $v_day_course == 'U')
							{
								$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
								$master_data[$v_period_day][$shortcut]['qty'] += '1';
								$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
								$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
							}
							

						}
					}
				}

				//calculate set three form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				
				if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period) && !in_array($v_period_day, $hospital_days))
				{
					$last_koord_day = end($last_koord_dates);
					$set_three_result = array_intersect($set_three_ids, $contact_forms_days[$v_period_day]['form_types']);
					$set_ones_result = array_intersect($set_one_ids, $contact_forms_days[$v_period_day]['form_types']);
				

					if(
						(count($set_three_result) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days[$v_period_day]) || (count($set_ones_result) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days[$v_period_day])
					)
					{
						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform))
							{
		
								$shortcut = '';

								if(!in_array('37b1', $pseudo_overall_shortcuts) && !in_array('37b5', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts))
								{
									if(in_array('4', $sapv_days[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate['pay_days']))
									{
										$shortcut = '37b7';
									}

									if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
								}


								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b7';
										$pseudo_overall_shortcuts[] = '37b7';
									}

									$day_shortcuts[] = $shortcut;
								}


								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && in_array($v_cform['form_type'], $set_three_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}
						
						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							$shortcut = '';
							$last_koord_day = end($last_koord_dates);
							
							if(!in_array('37b1', $pseudo_overall_shortcuts) && !in_array('37b5', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts))
							{	
								if(in_array('4', $sapv_days[$v_period_day]))
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}
								else if(empty($flatrate['pay_days']))
								{
									$shortcut = '37b7';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}
							}


							if(!empty($shortcut))
							{
								if($shortcut == '37b7')
								{
									$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b7';
									$pseudo_overall_shortcuts[] = '37b7';
								}

								$day_shortcuts[] = $shortcut;
								
							}

							if(($shortcut == '37b7' || $shortcut == '37b8') && $v_day_course == 'V')
							{
								if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$week_numbers_arr[] = $week_number;
									$last_koord_dates[] = $v_period_day;
								}
								else if($shortcut == '37b7')
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}
					}
				}
				
				
				//calculate set 4 (ISPC-241)
				$set_fourth_result = array_intersect($set_fourth_ids, $contact_forms_days[$v_period_day]['form_types']);

				if(count($set_fourth_result) != 0 && in_array($v_period_day, $active_days_in_period) && !in_array($v_period_day, $hospital_days))
				{
					//setup each form sapv based on classification block selection
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
						{
							if(!in_array('1', $sapv_days[$v_period_day]) && in_array('2', $sapv_days[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
							else if(in_array('1', $sapv_days[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
						}
						else if($classification_data[$v_cf_day]['intern'] != '1')
						{
							if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								//switch between BE-KO if VV is not BE
								if(!in_array('1', $sapv_days[$v_period_day]) && in_array('2', $sapv_days[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
						}
					}

					//U & V at the top
					//beratung
					if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array('1', $sapv_days[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							//check if there are 2 beratung change sapv in koord
							if($master_data[$v_period_day]['37b6']['qty'] == '2' && count($set_fourth_result) != 0 && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
							}

							if(is_numeric($k_cf) && $sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1')
							{
								$shortcut = '';
								if(!in_array('37b1', $pseudo_overall_shortcuts) && empty($flatrate['pay_days']) && !in_array('37b7', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5') //only b5 or b6
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b5';
										$pseudo_overall_shortcuts[] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}


								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_fourth_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}
					}

					//koordination
					$last_koord_days = end($last_koord_dates);
					if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array('2', $sapv_days[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform) && $sapv_status[$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2')
							{
								$shortcut = '';

								if(!in_array('37b1', $pseudo_overall_shortcuts) && !in_array('37b5', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts))
								{
									if(in_array('4', $sapv_days[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate['pay_days']))
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b7';
										$pseudo_overall_shortcuts[] = '37b7';
									}
									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;

									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && in_array($v_cform['form_type'], $set_fourth_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}
					}
				}


				if(in_array($v_period_day, $sapv_days_inperiod))
				{
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						//check if contactform type for each days
						if(in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids))
						{
							if(in_array('4', $sapv_days[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['home_visit'] += 1;
							}
						}
						else
						{
							//sum classifizierung data if form is not housebesuche type(1)
							if($clasifizierung[$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days[$v_period_day]) &&
								(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
							}
							else if($clasifizierung[$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$v_period_day]) || in_array('2', $sapv_days[$v_period_day])))
							{
								if(!in_array('1', $sapv_days[$v_period_day]) && in_array('2', $sapv_days[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
								}
								else if(in_array('1', $sapv_days[$v_period_day]) && !in_array('2', $sapv_days[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
								}
								else
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
								}
							}
							else if($clasifizierung[$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$v_period_day]) || in_array('2', $sapv_days[$v_period_day])))
							{
								if(!in_array('1', $sapv_days[$v_period_day]) && in_array('2', $sapv_days[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
								}
								else if(in_array('1', $sapv_days[$v_period_day]) && !in_array('2', $sapv_days[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
								}
								else
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
							}
							else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['koordination'] += '1';
							}

							$count_be[$v_period_day] += 1;
						}
					}
				}
			}

			$fl_start = false;
			foreach($master_data as $k_day => $v_day_values)
			{
				foreach($v_day_values as $k_shortcut => $v_shortcut_values)
				{
					$overall_shortcuts[$k_day][] = $k_shortcut;
				}

				if(count($v_day_values) > '0' && count($v_day_values['37b1']) == '0')
				{
					$days_products[] = $k_day;
				}
				elseif(count($v_day_values['37b1']) > '0')
				{
					if(!$fl_start)
					{
						$fl_start = $k_day;
					}

					$days_products[] = $fl_start;
				}
			}
//			print_r($sapv_days);
			//get days in which sapv is 3 or 4
			foreach($sapv_days as $ksapv_days => $vsapv_days)
			{
				if(in_array('3', $vsapv_days) || in_array('4', $vsapv_days))
				{
					$flatrate_sapv_days[] = $ksapv_days;
				}
			}
			
			//return only the products which have more than 28 days from last billable product
			$pm = new PatientMaster();
			foreach($days_products as $key_day => $v_day)
			{
				if($key_day > '0')
				{
					$prod_gap[$v_day] = $pm->getDaysInBetween($days_products[($key_day - 1)], $v_day);
					$prod_gap[$v_day] = array_values(array_unique($prod_gap[$v_day]));

					$rewrite_value = false;
					if(count($prod_gap[$v_day]) >= '30')
					{
						$last_product_gap_days[] = $v_day;
						$master_overall_data['shortcuts'][$v_day] = '37b1';
					}
					else if(count($prod_gap[$v_day]) < '7' && in_array($v_day, $last_product_gap_days))
					{
						$rewrite_value = true;
					}

					if($rewrite_value === true)
					{
						//rewrite the value of last product if a period is less than 7 days from last flatrate product
						$days_products[$key_day] = $prod_gap[$v_day][0];
					}
				}
			}

//			$master_overall_data['shortcuts'] = array_values(array_unique($overall_shortcuts));
			$master_overall_data['shortcuts'] = $overall_shortcuts;
			$master_overall_data['last_koord_dates'] = array_values(array_unique($last_koord_dates));
			$master_overall_data['days_products'] = array_values(array_unique($last_product_gap_days));
//			$master_overall_data['days_products_dbg'] = $prod_gap;

			if($_REQUEST['dbg_fl_limit'])
			{
				print_r("contact_forms_days_ids\n");
				print_r($contact_forms_days_ids);
				print_r("active_days_in_period\n");
				print_r($active_days_in_period);
				print_r("flatrate\n");
				print_r($flatrate);
				print_r("flatrate_sapv_days\n");
				print_r($flatrate_sapv_days);
				print_r("last prod gap_days\n");
				print_r($last_product_gap_days);
				print_r("next_prod_alowed\n");
				print_r($next_prod_alowed);
				print_r("prod_gap\n");
				print_r($prod_gap);
				print_r("master_overall_data\n");
				print_r($master_overall_data);
				print_r("master_data\n");
				print_r($master_data);
				print_r("clasifizierung\n");
				print_r($clasifizierung);
				print_r("sapv_days_inperiod\n");
				print_r($sapv_days_inperiod);
				print_r("days_in_period_overall\n");
				print_r($days_in_period_overall);
				exit;
			}
//			print_r($master_data);exit;

			return $master_overall_data;
		}

		private function patient_performance_overall_saved($params)
		{
			$ipid = $params['ipid'];
			$clientid = $params['clientid'];
			$overall_period = $params['overall_period'];
			$active_days = $params['active_days'];
			$set_ids = $params['set_ids'];
			$flatrate = $params['flatrate'] ;
			$flatrate_admissions = $params['1flatrate_admissions'];
			$master_price_list = $params['master_price_list'] ;
			$days_in_period_overall = $params['days_in_period_overall'];
			$hospital_hospiz_days = $params['hospital_hospiz_days'];
			$sapv_days_cs = $params['sapv_days_cs'];
			$patient_days2locationtypes = $params['patient_days2locationtypes'];
			
			foreach($active_days as $k_active_day => $v_active_day)
			{
				if(in_array($v_active_day, $days_in_period_overall))
				{
					$active_days_in_period[] = $v_active_day;
				}
			}

			//get hospital overall days
			if($hospital_hospiz_days)
			{
				$hospital_days = $hospital_hospiz_days;
			}
			else
			{
				//changed with hospital-hospiz CS
				$hospital_days = $this->get_period_hospitals($ipid, $clientid, $overall_period);
			}

			//get sapv overall data
			if($sapv_days_cs)
			{
				$sapv_days = $sapv_days_cs;
			}
			else
			{
				$sapv_days_overall = $this->get_period_sapv($ipid, $overall_period, $hospital_days);
				foreach($sapv_days_overall as $k_sapv => $v_sapv)
				{
					$sapv_days_inperiod[] = $k_sapv;
				}
				$sapv_days = $sapv_days_overall;
			}

			//get course overall data
			$course_days = $this->get_period_course($ipid);

			foreach($course_days as $k_course_date => $v_course_details)
			{
				foreach($v_course_details as $k_couse => $v_course)
				{
					if($v_course == 'U' && in_array($k_course_date, $sapv_days_inperiod) && in_array('1', $sapv_days_overall[$k_course_date]))
					{
						$clasifizierung[$k_course_date]['beratung'] += 1;
					}
					else if($v_course == 'V' && in_array($k_course_date, $sapv_days_inperiod) && in_array('2', $sapv_days_overall[$k_course_date]))
					{
						$clasifizierung[$k_course_date]['koordination'] += 1;
					}
				}
			}


			$contact_forms_days = $this->get_period_contact_forms($ipid, $overall_period);

			$contact_forms_ids[] = '999999999';
			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf))
					{
						$contact_forms_ids[] = $v_cf['id'];
					}
				}
			}
			ksort($contact_forms_days);

			$block_classification = new FormBlockClassification();
			$classification_data = $block_classification->get_multiple_block_classification($ipid, $contact_forms_ids);

			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data))
					{
						$contact_forms_days_ids[$k_cf_day][] = $v_cf['id'];
						$contact_forms2form_types[$v_cf['id']][] = $v_cf['form_type'];
					}
				}
			}

			$set_one_ids = $set_ids['one'];
			$set_two_ids = $set_ids['two'];
			$set_three_ids = $set_ids['three'];
			$set_fourth_ids = $set_ids['fourth'];

			
			
			$totals = array();
			foreach($days_in_period_overall as $k_period_day => $v_period_day)
			{
				$day_location_type = $patient_days2locationtypes[$ipid][date('d.m.Y',strtotime($v_period_day))];

				$day_shortcuts = array();
				if(count($month_shortcuts[date('Ym', strtotime($v_period_day))]) == 0)
				{
					$month_shortcuts = array();
				}
				
				$pseudo_overall_shortcuts = array();
				$master_data[$v_period_day] = array();

				//calculate set one form_type visits
				//first get flatrate exception and set shortcut
				$shortcut = '';
				if(in_array($v_period_day, $flatrate) && !in_array($v_period_day, $hospital_days))
				{
					$shortcut = '37b1';
					$month_shortcuts[date('Ym', strtotime($v_period_day))][] = $shortcut;
					$pseudo_overall_shortcuts[] = $shortcut;
				}
				else if(!in_array($v_period_day, $flatrate) && array_key_exists($v_period_day, $contact_forms_days) && in_array($v_period_day, $active_days_in_period) && !in_array($v_period_day, $hospital_days)) //normal set conditions
				{

					// we have visits=> check if there are required visits for this action set
					$set_one_result = array_intersect($set_one_ids, $contact_forms_days[$v_period_day]['form_types']);

					if(count($set_one_result) != 0 && (in_array('3', $sapv_days[$v_period_day]) || in_array('4', $sapv_days[$v_period_day])))
					{
						$shortcut = '37b2';
					}
				}

				if(!empty($shortcut))
				{
					$day_shortcuts[] = $shortcut;
					$master_data[$v_period_day][$shortcut]['shortcut'] = $shortcut;
					$master_data[$v_period_day][$shortcut]['qty'] = '1';
					$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
					$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
					
				}

				//sapv overwrite if formtype is set 4
				//calculate set two form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period) && !in_array($v_period_day, $hospital_days))
				{
					$set_ones_result = array_intersect($set_one_ids, $contact_forms_days[$v_period_day]['form_types']);
					$set_two_result = array_intersect($set_two_ids, $contact_forms_days[$v_period_day]['form_types']);

					if((count($set_two_result) != 0 || in_array('U', $course_days[$v_period_day])) && in_array('1', $sapv_days[$v_period_day]) || (count($set_ones_result) != 0 && in_array('1', $sapv_days[$v_period_day]) )
					)
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							if(is_numeric($k_cf))
							{
								$shortcut = '';
								if(!in_array('37b1', $pseudo_overall_shortcuts) && empty($flatrate['pay_days']) && !in_array('37b7', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b5';
										$pseudo_overall_shortcuts[] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}


								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_two_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
								}
							}
						}

						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							$shortcut = '';
							if(!in_array('37b1', $pseudo_overall_shortcuts) && empty($flatrate['pay_days']) &&  !in_array('37b7', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts))
							{
								$shortcut = '37b5';
							}
							
							if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
							{
								$shortcut = '37b6';
							}

							if(!empty($shortcut))
							{
								if($shortcut == '37b5')
								{
									$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b5';
									$pseudo_overall_shortcuts[] = '37b5';
								}

								$day_shortcuts[] = $shortcut;
							}

							if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$v_period_day]['37b6']['qty'] < '2' && $v_day_course == 'U')
							{
								$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
								$master_data[$v_period_day][$shortcut]['qty'] += '1';
								$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
								$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
								$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut][$day_location_type]['price'];
							}
							

						}
					}
				}

				//calculate set three form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				
				if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period) && !in_array($v_period_day, $hospital_days))
				{
					$last_koord_day = end($last_koord_dates);
					$set_three_result = array_intersect($set_three_ids, $contact_forms_days[$v_period_day]['form_types']);
					$set_ones_result = array_intersect($set_one_ids, $contact_forms_days[$v_period_day]['form_types']);
				

					if(
						(count($set_three_result) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days[$v_period_day]) || (count($set_ones_result) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days[$v_period_day])
					)
					{
						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform))
							{
		
								$shortcut = '';

								if(!in_array('37b1', $pseudo_overall_shortcuts) && !in_array('37b5', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts))
								{
									if(in_array('4', $sapv_days[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate['pay_days']))
									{
										$shortcut = '37b7';
									}

									if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
								}


								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b7';
										$pseudo_overall_shortcuts[] = '37b7';
									}

									$day_shortcuts[] = $shortcut;
								}


								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && in_array($v_cform['form_type'], $set_three_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}
						
						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							$shortcut = '';
							$last_koord_day = end($last_koord_dates);
							
							if(!in_array('37b1', $pseudo_overall_shortcuts) && !in_array('37b5', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts))
							{	
								if(in_array('4', $sapv_days[$v_period_day]))
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}
								else if(empty($flatrate['pay_days']))
								{
									$shortcut = '37b7';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}
							}


							if(!empty($shortcut))
							{
								if($shortcut == '37b7')
								{
									$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b7';
									$pseudo_overall_shortcuts[] = '37b7';
								}

								$day_shortcuts[] = $shortcut;
								
							}

							if(($shortcut == '37b7' || $shortcut == '37b8') && $v_day_course == 'V')
							{
								if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$week_numbers_arr[] = $week_number;
									$last_koord_dates[] = $v_period_day;
								}
								else if($shortcut == '37b7')
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}
					}
				}
				
				
				//calculate set 4 (ISPC-241)
				$set_fourth_result = array_intersect($set_fourth_ids, $contact_forms_days[$v_period_day]['form_types']);

				if(count($set_fourth_result) != 0 && in_array($v_period_day, $active_days_in_period) && !in_array($v_period_day, $hospital_days))
				{
					//setup each form sapv based on classification block selection
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
						{
							if(!in_array('1', $sapv_days[$v_period_day]) && in_array('2', $sapv_days[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
							else if(in_array('1', $sapv_days[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
						}
						else if($classification_data[$v_cf_day]['intern'] != '1')
						{
							if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								//switch between BE-KO if VV is not BE
								if(!in_array('1', $sapv_days[$v_period_day]) && in_array('2', $sapv_days[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
						}
					}

					//U & V at the top
					//beratung
					if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array('1', $sapv_days[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							//check if there are 2 beratung change sapv in koord
							if($master_data[$v_period_day]['37b6']['qty'] == '2' && count($set_fourth_result) != 0 && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
							}

							if(is_numeric($k_cf) && $sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1')
							{
								$shortcut = '';
								if(!in_array('37b1', $pseudo_overall_shortcuts) && empty($flatrate['pay_days']) && !in_array('37b7', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5') //only b5 or b6
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b5';
										$pseudo_overall_shortcuts[] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}


								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_fourth_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
								}
							}
						}
					}

					//koordination
					$last_koord_days = end($last_koord_dates);
					if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array('2', $sapv_days[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform) && $sapv_status[$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2')
							{
								$shortcut = '';

								if(!in_array('37b1', $pseudo_overall_shortcuts) && !in_array('37b5', $month_shortcuts[date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts))
								{
									if(in_array('4', $sapv_days[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate['pay_days']))
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[date('Ym', strtotime($v_period_day))][] = '37b7';
										$pseudo_overall_shortcuts[] = '37b7';
									}
									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;

									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && in_array($v_cform['form_type'], $set_fourth_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}
					}
				}


				if(in_array($v_period_day, $sapv_days_inperiod))
				{
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						//check if contactform type for each days
						if(in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids))
						{
							if(in_array('4', $sapv_days[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['home_visit'] += 1;
							}
						}
						else
						{
							//sum classifizierung data if form is not housebesuche type(1)
							if($clasifizierung[$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days[$v_period_day]) &&
								(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
							}
							else if($clasifizierung[$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$v_period_day]) || in_array('2', $sapv_days[$v_period_day])))
							{
								if(!in_array('1', $sapv_days[$v_period_day]) && in_array('2', $sapv_days[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
								}
								else if(in_array('1', $sapv_days[$v_period_day]) && !in_array('2', $sapv_days[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
								}
								else
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
								}
							}
							else if($clasifizierung[$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$v_period_day]) || in_array('2', $sapv_days[$v_period_day])))
							{
								if(!in_array('1', $sapv_days[$v_period_day]) && in_array('2', $sapv_days[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
								}
								else if(in_array('1', $sapv_days[$v_period_day]) && !in_array('2', $sapv_days[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
								}
								else
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
							}
							else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['koordination'] += '1';
							}

							$count_be[$v_period_day] += 1;
						}
					}
				}
			}
			
			/* ###################################### */
			/* ####### SAVED DATA ################### */
			/* ###################################### */
			//get saved data ISPC-1927
			$full_period[$ipid] = $days_in_period_overall;
			$full_price_list[$ipid] = $master_price_list;
			$bw_pr = new BwPerformanceRecord();
			$bw_data = $bw_pr->get_multiple_bw_performance_record_in_period(array($ipid), $full_period, $full_price_list,$patient_days2locationtypes);

			if(!empty($bw_data[$ipid])){
				// get saved info for month - to see the number of days saved in each month
				$saved_per_moth[$ipid] = array();
				foreach($bw_data[$ipid] as $days=>$vals){
					foreach($vals as $sh=>$shd){
						$saved_per_moth[$ipid][date("mY",strtotime($days))][] = $sh;
					}
				}
				
				foreach($active_days as $k=>$act_day){
					
					if( isset($bw_data[$ipid][$act_day]) && !empty($bw_data[$ipid][$act_day]) ){ // check if more thant the flatrate from prevoius month is saved.
						if(count($saved_per_moth[$ipid][date("mY",strtotime($act_day))]) >=6 ){
							$final_data[$ipid][$act_day] = $bw_data[$ipid][$act_day];
						} else {
							$final_data[$ipid][$act_day] = array_merge($master_data[$act_day],$bw_data[$ipid][$act_day]);
						}
							
					} else {
						$final_data[$ipid][$act_day] = $master_data[$act_day];
					}
				}
					
				$master_data = array();
				$master_data = $final_data[$ipid];
			}
	
			$fl_start = false;
			foreach($master_data as $k_day => $v_day_values)
			{
				foreach($v_day_values as $k_shortcut => $v_shortcut_values)
				{
					if($v_shortcut_values['qty'] > '0'){
						$overall_shortcuts[$k_day][] = $k_shortcut;
					}
				}

// 				if(count($v_day_values) > '0' && count($v_day_values['37b1']) == '0')
				if(count($v_day_values) > '0')
				{ // include also flatrate days as billable products

					foreach($v_day_values as $k_shortcut => $v_shortcut_values)
					{
						if($v_shortcut_values['qty'] > '0'){
							$days_products[] = $k_day;
						}
					}
					
				}
				elseif(count($v_day_values['37b1']) > '0')
				{
					if(!$fl_start)
					{
						$fl_start = $k_day;
					}

					$days_products[] = $fl_start;
				}
			}
			
			$days_products = array_unique($days_products);
			$days_products = array_values($days_products);

			//get days in which sapv is 3 or 4
			foreach($sapv_days as $ksapv_days => $vsapv_days)
			{
				if(in_array('3', $vsapv_days) || in_array('4', $vsapv_days))
				{
					$flatrate_sapv_days[] = $ksapv_days;
				}
			}
			
			//return only the products which have more than 28 days from last billable product
			$pm = new PatientMaster();
			foreach($days_products as $key_day => $v_day)
			{
				if($key_day > '0')
				{
					$prod_gap[$v_day] = $pm->getDaysInBetween($days_products[($key_day - 1)], $v_day);
					$prod_gap[$v_day] = array_values(array_unique($prod_gap[$v_day]));

					$rewrite_value = false;
					if(count($prod_gap[$v_day]) >= '30')
					{
						$last_product_gap_days[] = $v_day;
						$master_overall_data['shortcuts'][$v_day] = '37b1';
					}
					else if(count($prod_gap[$v_day]) < '7' && in_array($v_day, $last_product_gap_days))
					{
						$rewrite_value = true;
					}

					if($rewrite_value === true)
					{
						//rewrite the value of last product if a period is less than 7 days from last flatrate product
						$days_products[$key_day] = $prod_gap[$v_day][0];
					}
				}
			}
			
			$master_overall_data['shortcuts'] = $overall_shortcuts;
			$master_overall_data['last_koord_dates'] = array_values(array_unique($last_koord_dates));
			$master_overall_data['days_products'] = array_values(array_unique($last_product_gap_days));
			$master_overall_data['full_data'] = $master_data;

			if($_REQUEST['dbg_fl_limit'])
			{
				print_r("contact_forms_days_ids\n");
				print_r($contact_forms_days_ids);
				print_r("active_days_in_period\n");
				print_r($active_days_in_period);
				print_r("flatrate\n");
				print_r($flatrate);
				print_r("flatrate_sapv_days\n");
				print_r($flatrate_sapv_days);
				print_r("last prod gap_days\n");
				print_r($last_product_gap_days);
				print_r("next_prod_alowed\n");
				print_r($next_prod_alowed);
				print_r("prod_gap\n");
				print_r($prod_gap);
				print_r("master_overall_data\n");
				print_r($master_overall_data);
				print_r("master_data\n");
				print_r($master_data);
				print_r("clasifizierung\n");
				print_r($clasifizierung);
				print_r("sapv_days_inperiod\n");
				print_r($sapv_days_inperiod);
				print_r("days_in_period_overall\n");
				print_r($days_in_period_overall);
				exit;
			}


			return $master_overall_data;
		}

		private function patients_performance_overall($ipids, $clientid, $overall_period, $active_days, $set_ids, $flatrate, $master_price_list, $days_in_period_overall, $hospital_days = false, $sapv_days = false, $course_days = false, $contact_forms_days = false, $classification_data = false)
		{
			if($_REQUEST['dbgss'])
			{
				print_r("ipids\n");
				print_r($ipids);
				print_r("overall_period\n");
				print_r($overall_period);
				print_r("active_days\n");
				print_r($active_days);
				print_r("set_ids\n");
				print_r($set_ids);
				print_r("flatrate\n");
				print_r($flatrate);
				print_r("days_in_period_overall - patients_periods_days\n");
				print_r($days_in_period_overall);
				print_r("hospital_days\n");
				print_r($hospital_days);
				print_r("sapv_days\n");
				print_r($sapv_days);
				print_r("course_days\n");
				print_r($course_days);
				print_r("contact_forms_days\n");
				print_r($contact_forms_days);
				print_r("classification_data\n");
				print_r($classification_data);
				
				exit;
			}

			foreach($ipids as $k_ipid => $ipid)
			{
				foreach($active_days[$ipid] as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $days_in_period_overall))
					{
						$active_days_in_period[$ipid][] = $v_active_day;
					}
				}

				foreach($course_days[$ipid] as $k_course_date => $v_course_details)
				{
					foreach($v_course_details as $k_couse => $v_course)
					{
						if($v_course == 'U' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('1', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['beratung'] += 1;
						}
						else if($v_course == 'V' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('2', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
						}
					}
				}

				$contact_forms_ids[$ipid][] = '999999999';
				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							$contact_forms_ids[$ipid][] = $v_cf['id'];
						}
					}
				}
				ksort($contact_forms_days[$ipid]);

				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data))
						{
							$contact_forms_days_ids[$ipid][$k_cf_day][] = $v_cf['id'];
							$contact_forms2form_types[$ipid][$v_cf['id']][] = $v_cf['form_type'];
						}
					}
				}

				$set_one_ids = $set_ids['one'];
				$set_two_ids = $set_ids['two'];
				$set_three_ids = $set_ids['three'];
				$set_fourth_ids = $set_ids['fourth'];
				
				$pseudo_overall_shortcuts[$ipid] = array();
				foreach($days_in_period_overall as $k_period_day => $v_period_day)
				{

					$day_shortcuts[$ipid] = array();
					if(count($month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}

					$master_data[$ipid][$v_period_day] = array();

					//calculate set one form_type visits
					//first get flatrate exception and set shortcut
					$shortcut = '';
					if(in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$shortcut = '37b1';
						$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = $shortcut;
						$pseudo_overall_shortcuts[$ipid][] = $shortcut;
					}
					else if(!in_array($v_period_day, $flatrate[$ipid]) && array_key_exists($v_period_day, $contact_forms_days[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid])) //normal set conditions
					{

//					we have visits=> check if there are required visits for this action set
						$set_one_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(count($set_one_result[$ipid]) != 0 && (in_array('3', $sapv_days[$ipid][$v_period_day]) || in_array('4', $sapv_days[$ipid][$v_period_day])))
						{
							$shortcut = '37b2';
						}
					}

					if(!empty($shortcut))
					{
						$day_shortcuts[$ipid][] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['shortcut'] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
						$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
						$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
					}

					//sapv overwrite if formtype is set 4
					//calculate set two form_type visits
					//exclude calculation if following shortcuts are calculated on current day

					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_two_result[$ipid] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_two_result[$ipid]) != 0 || in_array('U', $course_days[$ipid][$v_period_day])) && in_array('1', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 && in_array('1', $sapv_days[$ipid][$v_period_day]) )
						)
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								if(is_numeric($k_cf))
								{
									$shortcut = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]))
									{
										$shortcut = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
									{
										$shortcut = '37b6';
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_two_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										}
										else if($shortcut == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
										$pseudo_overall_shortcuts[$ipid][] = '37b5';
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && $v_day_course == 'U')
								{
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}
					}

					//calculate set three form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					$week_number = array();
					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
						$set_three_result[$ipid] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(
							(count($set_three_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day])
						)
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform))
								{
									$shortcut = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids[$ipid]))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';
								$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
								{
									if(in_array('4', $sapv_days[$ipid][$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate[$ipid]['pay_days']))
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number[$ipid] = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
										$pseudo_overall_shortcuts[$ipid][] = '37b7';
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								if(($shortcut == '37b7' || $shortcut == '37b8') && $v_day_course == 'V')
								{
									if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$week_numbers_arr[$ipid][] = $week_number[$ipid];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}


					//calculate set 4 (ISPC-241)
					$set_fourth_result[$ipid] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

					if(count($set_fourth_result[$ipid]) != 0 && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						//setup each form sapv based on classification block selection
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['intern'] != '1')
							{
								if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									//switch between BE-KO if VV is not BE
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
							}
						}

						//U & V at the top
						//beratung
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								//check if there are 2 beratung change sapv in koord
								if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && count($set_fourth_result[$ipid]) != 0 && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
								}

								if(is_numeric($k_cf) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1')
								{
									$shortcut = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]))
									{
										$shortcut = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5') //only b5 or b6
									{
										$shortcut = '37b6';
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										}
										else if($shortcut == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
								}
							}
						}

						//koordination
						$last_koord_days[$ipid] = end($last_koord_dates[$ipid]);
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2')
								{
									$shortcut = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}
										$day_shortcuts[] = $shortcut;
									}

									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;

										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}

//					TODO:Continue adding [$ipid]
					if(in_array($v_period_day, $sapv_days_inperiod[$ipid]))
					{
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							//check if contactform type for each days
							if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids))
							{
								if(in_array('4', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
								}
							}
							else
							{
								//sum classifizierung data if form is not housebesuche type(1)
								if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days[$ipid][$v_period_day]) &&
									(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
								}

								$count_be[$ipid][$v_period_day] += 1;
							}
						}
					}
				}

				foreach($master_data[$ipid] as $k_day => $v_day_values)
				{
					foreach($v_day_values as $k_shortcut => $v_shortcut_values)
					{
						$overall_shortcuts[$ipid][] = $k_shortcut;
						$overall_shortcuts_dates[$ipid][$k_day][] = $k_shortcut;
					}

					if(count($v_day_values) > '0')
					{
						$days_products[$ipid][] = $k_day;
					}
				}
				
//				foreach($master_data[$ipid] as $k_day => $v_day_values)
//				{
//					foreach($v_day_values as $k_shortcut => $v_shortcut_values)
//					{
//						$overall_shortcuts[$ipid][] = $k_shortcut;
//						$overall_shortcuts_dates[$ipid][$k_day][] = $k_shortcut;
//					}
//					
//					if(count($v_day_values) > '0' && count($v_day_values['37b1']) == '0')
//					{
//						$days_products[$ipid][] = $k_day;
//					}
//					elseif(count($v_day_values['37b1']) > '0')
//					{
//						if(!$fl_start)
//						{
//							$fl_start = $k_day;
//						}
//
//						$days_products[$ipid][] = $fl_start;
//					}
//				}

				//get days in which sapv is 3 or 4
				foreach($sapv_days[$ipid] as $ksapv_days => $vsapv_days)
				{
					if(in_array('3', $vsapv_days) || in_array('4', $vsapv_days))
					{
						$flatrate_sapv_days[$ipid][] = $ksapv_days;
					}
				}

				//return only the products which have more than 28 days from last billable product
				$pm = new PatientMaster();

				foreach($days_products[$ipid] as $key_day => $v_day)
				{
					if($key_day > '0')
					{
						$prod_gap[$ipid][$v_day] = $pm->getDaysInBetween($days_products[$ipid][($key_day - 1)], $v_day);
//						$prod_gap[$ipid][$v_day] = array_intersect($prod_gap[$ipid][$v_day], $active_days[$ipid], $flatrate_sapv_days[$ipid]);

						$prod_gap[$ipid][$v_day] = array_values(array_unique($prod_gap[$ipid][$v_day]));

						if(count($prod_gap[$ipid][$v_day]) >= '30')
						{
							$last_product_gap_days[$ipid][] = $v_day;
							$master_overall_data[$ipid]['shortcuts'][$v_day] = '37b1';
						}
					}
				}

				$master_overall_data[$ipid]['shortcuts'] = array_values(array_unique($overall_shortcuts[$ipid]));
				$master_overall_data[$ipid]['shortcuts_dates'] = $overall_shortcuts_dates[$ipid];
				$master_overall_data[$ipid]['last_koord_dates'] = array_values(array_unique($last_koord_dates[$ipid]));
				$master_overall_data[$ipid]['days_products'] = array_values(array_unique($last_product_gap_days[$ipid]));
			}

			return $master_overall_data;
		}

		private function patients_performance_overall_saved($ipids, $clientid, $overall_period, $active_days, $set_ids, $flatrate, $master_price_list, $days_in_period_overall, $hospital_days = false, $sapv_days = false, $course_days = false, $contact_forms_days = false, $classification_data = false)
		{
			if($_REQUEST['dbgss'])
			{
				print_r("ipids\n");
				print_r($ipids);
				print_r("overall_period\n");
				print_r($overall_period);
				print_r("active_days\n");
				print_r($active_days);
				print_r("set_ids\n");
				print_r($set_ids);
				print_r("flatrate\n");
				print_r($flatrate);
				print_r("days_in_period_overall - patients_periods_days\n");
				print_r($days_in_period_overall);
				print_r("hospital_days\n");
				print_r($hospital_days);
				print_r("sapv_days\n");
				print_r($sapv_days);
				print_r("course_days\n");
				print_r($course_days);
				print_r("contact_forms_days\n");
				print_r($contact_forms_days);
				print_r("classification_data\n");
				print_r($classification_data);
				
				exit;
			}
			//get saved data ISPC-1927
			$bw_pr = new BwPerformanceRecord();
			$bw_data = $bw_pr->get_multiple_bw_performance_record_in_period($ipids, $active_days, $master_price_list,array());
			
			foreach($ipids as $k_ipid => $ipid)
			{
				foreach($active_days[$ipid] as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $days_in_period_overall))
					{
						$active_days_in_period[$ipid][] = $v_active_day;
					}
				}

				foreach($course_days[$ipid] as $k_course_date => $v_course_details)
				{
					foreach($v_course_details as $k_couse => $v_course)
					{
						if($v_course == 'U' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('1', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['beratung'] += 1;
						}
						else if($v_course == 'V' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('2', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
						}
					}
				}

				$contact_forms_ids[$ipid][] = '999999999';
				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							$contact_forms_ids[$ipid][] = $v_cf['id'];
						}
					}
				}
				ksort($contact_forms_days[$ipid]);

				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data))
						{
							$contact_forms_days_ids[$ipid][$k_cf_day][] = $v_cf['id'];
							$contact_forms2form_types[$ipid][$v_cf['id']][] = $v_cf['form_type'];
						}
					}
				}

				$set_one_ids = $set_ids['one'];
				$set_two_ids = $set_ids['two'];
				$set_three_ids = $set_ids['three'];
				$set_fourth_ids = $set_ids['fourth'];
				
				$pseudo_overall_shortcuts[$ipid] = array();
				foreach($days_in_period_overall as $k_period_day => $v_period_day)
				{

					$day_shortcuts[$ipid] = array();
					if(count($month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}

					$master_data[$ipid][$v_period_day] = array();

					//calculate set one form_type visits
					//first get flatrate exception and set shortcut
					$shortcut = '';
					if(in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$shortcut = '37b1';
						$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = $shortcut;
						$pseudo_overall_shortcuts[$ipid][] = $shortcut;
					}
					else if(!in_array($v_period_day, $flatrate[$ipid]) && array_key_exists($v_period_day, $contact_forms_days[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid])) //normal set conditions
					{

//					we have visits=> check if there are required visits for this action set
						$set_one_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(count($set_one_result[$ipid]) != 0 && (in_array('3', $sapv_days[$ipid][$v_period_day]) || in_array('4', $sapv_days[$ipid][$v_period_day])))
						{
							$shortcut = '37b2';
						}
					}

					if(!empty($shortcut))
					{
						$day_shortcuts[$ipid][] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['shortcut'] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
						$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
						$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
					}

					//sapv overwrite if formtype is set 4
					//calculate set two form_type visits
					//exclude calculation if following shortcuts are calculated on current day

					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_two_result[$ipid] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_two_result[$ipid]) != 0 || in_array('U', $course_days[$ipid][$v_period_day])) && in_array('1', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 && in_array('1', $sapv_days[$ipid][$v_period_day]) )
						)
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								if(is_numeric($k_cf))
								{
									$shortcut = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]))
									{
										$shortcut = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
									{
										$shortcut = '37b6';
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_two_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										}
										else if($shortcut == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
										$pseudo_overall_shortcuts[$ipid][] = '37b5';
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && $v_day_course == 'U')
								{
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}
					}

					//calculate set three form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					$week_number = array();
					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
						$set_three_result[$ipid] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(
							(count($set_three_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day])
						)
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform))
								{
									$shortcut = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids[$ipid]))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';
								$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
								{
									if(in_array('4', $sapv_days[$ipid][$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate[$ipid]['pay_days']))
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number[$ipid] = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
										$pseudo_overall_shortcuts[$ipid][] = '37b7';
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								if(($shortcut == '37b7' || $shortcut == '37b8') && $v_day_course == 'V')
								{
									if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$week_numbers_arr[$ipid][] = $week_number[$ipid];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}


					//calculate set 4 (ISPC-241)
					$set_fourth_result[$ipid] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

					if(count($set_fourth_result[$ipid]) != 0 && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						//setup each form sapv based on classification block selection
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['intern'] != '1')
							{
								if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									//switch between BE-KO if VV is not BE
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
							}
						}

						//U & V at the top
						//beratung
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								//check if there are 2 beratung change sapv in koord
								if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && count($set_fourth_result[$ipid]) != 0 && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
								}

								if(is_numeric($k_cf) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1')
								{
									$shortcut = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]))
									{
										$shortcut = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5') //only b5 or b6
									{
										$shortcut = '37b6';
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										}
										else if($shortcut == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
								}
							}
						}

						//koordination
						$last_koord_days[$ipid] = end($last_koord_dates[$ipid]);
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2')
								{
									$shortcut = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}
										$day_shortcuts[] = $shortcut;
									}

									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;

										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}

//					TODO:Continue adding [$ipid]
					if(in_array($v_period_day, $sapv_days_inperiod[$ipid]))
					{
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							//check if contactform type for each days
							if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids))
							{
								if(in_array('4', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
								}
							}
							else
							{
								//sum classifizierung data if form is not housebesuche type(1)
								if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days[$ipid][$v_period_day]) &&
									(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
								}

								$count_be[$ipid][$v_period_day] += 1;
							}
						}
					}
				}

				/* ###################################### */
				/* ####### SAVED DATA ################### */
				/* ###################################### */
				if(!empty($bw_data[$ipid])){
					// get saved info for month - to see the number of days saved in each month
					$saved_per_moth[$ipid] = array();
					foreach($bw_data[$ipid] as $days=>$vals){
						foreach($vals as $sh=>$shd){
							$saved_per_moth[$ipid][date("mY",strtotime($days))][] = $sh;
						}
					}
						
					foreach($active_days[$ipid] as $k=>$act_day){
						if( isset($bw_data[$ipid][$act_day]) && !empty($bw_data[$ipid][$act_day]) ){ // check if more thant the flatrate from prevoius month is saved.
							if(count($saved_per_moth[$ipid][date("mY",strtotime($act_day))]) >=6 ){
								$final_data[$ipid][$act_day] = $bw_data[$ipid][$act_day];
							} else {
								$final_data[$ipid][$act_day] = array_merge($master_data[$ipid][$act_day],$bw_data[$ipid][$act_day]);
							}
								
						} else {
							$final_data[$ipid][$act_day] = $master_data[$ipid][$act_day];
						}
					}
						
					$master_data[$ipid] = array();
					$master_data[$ipid] = $final_data[$ipid];
				}
				/* ###################################### */
				
				
				foreach($master_data[$ipid] as $k_day => $v_day_values)
				{
					foreach($v_day_values as $k_shortcut => $v_shortcut_values)
					{
						if($v_shortcut_values['qty'] > '0'){
						$overall_shortcuts[$ipid][] = $k_shortcut;
						$overall_shortcuts_dates[$ipid][$k_day][] = $k_shortcut;
						}
					}

					if(count($v_day_values) > '0')
					{
						$days_products[$ipid][] = $k_day;
					}
				}
				
//				foreach($master_data[$ipid] as $k_day => $v_day_values)
//				{
//					foreach($v_day_values as $k_shortcut => $v_shortcut_values)
//					{
//						$overall_shortcuts[$ipid][] = $k_shortcut;
//						$overall_shortcuts_dates[$ipid][$k_day][] = $k_shortcut;
//					}
//					
//					if(count($v_day_values) > '0' && count($v_day_values['37b1']) == '0')
//					{
//						$days_products[$ipid][] = $k_day;
//					}
//					elseif(count($v_day_values['37b1']) > '0')
//					{
//						if(!$fl_start)
//						{
//							$fl_start = $k_day;
//						}
//
//						$days_products[$ipid][] = $fl_start;
//					}
//				}

				//get days in which sapv is 3 or 4
				foreach($sapv_days[$ipid] as $ksapv_days => $vsapv_days)
				{
					if(in_array('3', $vsapv_days) || in_array('4', $vsapv_days))
					{
						$flatrate_sapv_days[$ipid][] = $ksapv_days;
					}
				}

				//return only the products which have more than 28 days from last billable product
				$pm = new PatientMaster();

				
				foreach($days_products[$ipid] as $key_day => $v_day)
				{
					if($key_day > '0')
					{
						$prod_gap[$ipid][$v_day] = $pm->getDaysInBetween($days_products[$ipid][($key_day - 1)], $v_day);
//						$prod_gap[$ipid][$v_day] = array_intersect($prod_gap[$ipid][$v_day], $active_days[$ipid], $flatrate_sapv_days[$ipid]);

						$prod_gap[$ipid][$v_day] = array_values(array_unique($prod_gap[$ipid][$v_day]));

						if(count($prod_gap[$ipid][$v_day]) >= '30')
						{
							$last_product_gap_days[$ipid][] = $v_day;
							$master_overall_data[$ipid]['shortcuts'][$v_day] = '37b1';
						}
					}
				}

				$master_overall_data[$ipid]['shortcuts'] = array_values(array_unique($overall_shortcuts[$ipid]));
				$master_overall_data[$ipid]['shortcuts_dates'] = $overall_shortcuts_dates[$ipid];
				$master_overall_data[$ipid]['last_koord_dates'] = array_values(array_unique($last_koord_dates[$ipid]));
				$master_overall_data[$ipid]['days_products'] = array_values(array_unique($last_product_gap_days[$ipid]));
			}
			
			return $master_overall_data;
		}

		private function get_period_sapv($ipid, $current_period, $hospital_days)
		{
			$patientmaster = new PatientMaster();
			if(count($hospital_days) == 0)
			{
				$hospital_days[] = '999999999999';
			}
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('verordnungbis >= "' . date('Y-m-d', strtotime($current_period['start'])) . '"')
				->andWhere('verordnungam <= "' . date('Y-m-d', strtotime($current_period['end'])) . '"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();


			$all_sapv_days = array();
			$temp_sapv_days = array();

			$period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			foreach($droparray as $k_sapv => $v_sapv)
			{

				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);

				$relevant_sapvs_days['start'][] = $s_start;
				$relevant_sapvs_days['end'][] = $s_end;

				foreach($temp_sapv_days as $k_tsapv => $v_tsapv)
				{

					if(in_array($v_tsapv, $period_days))
					{
						$temp_sapv_verordnet = explode(',', $v_sapv['verordnet']);

						if(empty($all_sapv_days[$v_tsapv]))
						{
							$all_sapv_days[$v_tsapv] = array();
						}
						$all_sapv_days[$v_tsapv] = array_merge_recursive($all_sapv_days[$v_tsapv], $temp_sapv_verordnet);

						$all_sapv_days[$v_tsapv] = array_values(array_unique($all_sapv_days[$v_tsapv]));
					}
				}
			}

			foreach($all_sapv_days as $k_s_day => $v_s_day)
			{
				if(in_array($k_s_day, $period_days) && !in_array($k_s_day, $hospital_days))
				{
					$all_sapv_days_arr[$k_s_day] = $v_s_day;
				}
			}

			$all_sapv_days_arr['relevant_sapvs_days'] = $relevant_sapvs_days;

			return $all_sapv_days_arr;
		}

		private function get_period_sapvs($ipids, $current_period, $hospital_days)
		{
			$patientmaster = new PatientMaster();
			if(count($hospital_days) == 0)
			{
				$hospital_days[] = '999999999999';
			}

			if(is_array($ipids))
			{
				$ipids_arr = $ipids;
			}
			else
			{
				$ipids_arr[] = $ipids;
			}

			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipids_arr)
				->andWhere('verordnungbis >= "' . date('Y-m-d', strtotime($current_period['start'])) . '"')
				->andWhere('verordnungam <= "' . date('Y-m-d', strtotime($current_period['end'])) . '"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();

			$period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			foreach($droparray as $k_sapv => $v_sapv)
			{
				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);

//				$relevant_sapvs_days[$v_sapv['ipid']]['start'][] = $s_start;
//				$relevant_sapvs_days[$v_sapv['ipid']]['end'][] = $s_end;

				foreach($temp_sapv_days as $k_tsapv => $v_tsapv)
				{

					if(in_array($v_tsapv, $period_days) && !in_array($v_tsapv, $hospital_days))
					{
						$temp_sapv_verordnet[$v_sapv['ipid']] = explode(',', $v_sapv['verordnet']);

						if(empty($all_sapv_days[$v_sapv['ipid']][$v_tsapv]))
						{
							$all_sapv_days[$v_sapv['ipid']][$v_tsapv] = array();
						}
						$all_sapv_days[$v_sapv['ipid']][$v_tsapv] = array_merge_recursive($all_sapv_days[$v_sapv['ipid']][$v_tsapv], $temp_sapv_verordnet[$v_sapv['ipid']]);

						$all_sapv_days[$v_sapv['ipid']][$v_tsapv] = array_values(array_unique($all_sapv_days[$v_sapv['ipid']][$v_tsapv]));
					}
				}
			}

			foreach($all_sapv_days as $k_ipid => $v_sapv_days)
			{
				foreach($v_sapv_days as $k_s_day => $v_s_day)
				{
					if(in_array($k_s_day, $period_days) && !in_array($k_s_day, $hospital_days))
					{
						$all_sapv_days_arr[$k_ipid][$k_s_day] = $v_s_day;
					}
//					$all_sapv_days_arr['relevant_sapvs_days'][$k_ipid] = $relevant_sapvs_days[$k_ipid];
				}
			}

			return $all_sapv_days_arr;
		}

		private function get_period_hospitals($ipid, $clientid, $current_period, $active_days_in_period = false)
		{// Ancuta
			$patientmaster = new PatientMaster();

			//get master locations
			//ISPC-2612 Ancuta 27.06.2020 Locx
			/*
			$hospitalids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"');
			$hosparray = $hospitalids->fetchArray();
			 */
			
			$loc_obj = new Locations();
			$hosparray = $loc_obj->get_locationByClientAndTypes($clientid);
			//--
			
			
			
			$hospital_ids[] = '999999999';
			foreach($hosparray as $key => $hospital)
			{
				$hospital_ids[] = $hospital['id'];
				$locations[$hospital['id']]['type'] = $hospital['location_type'];
			}

			//	get patient locations
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$pat_locations = $patloc->fetchArray();




			$patient_discharge = PatientDischarge::getPatientDischarge($ipid);
			$discharge_dead_date = '';
			if($patient_discharge)
			{
				//get discharge methods
				$dis = new DischargeMethod();
				$discharge_methods = $dis->getDischargeMethod($clientid, 0);

				foreach($discharge_methods as $k_dis_method => $v_dis_method)
				{
					if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
					{
						$death_methods[] = $v_dis_method['id'];
					}
				}
				$death_methods = array_values(array_unique($death_methods));

				if(in_array($patient_discharge[0]['discharge_method'], $death_methods))
				{
					$discharge_dead_date = date('Y-m-d', strtotime($patient_discharge[0]['discharge_date']));
				}
			}

			$period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			$hospital_days = array();
			$hosp_days = array();
			foreach($pat_locations as $k_pat_loc => $v_pat_loc)
			{
				if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
				{
					$till = date('Y-m-d');
					$till = date("Y-m-d", strtotime("-1 day"));
				}
				else
				{
					$till = date("Y-m-d", strtotime("-1 day", strtotime($v_pat_loc['valid_till'])));
				}

				if((date('Y-m-d', strtotime($v_pat_loc['valid_till'])) == $discharge_dead_date) && empty($pat_locations[($k_pat_loc + 1)]['valid_till']) && ($locations[$v_pat_loc['location_id']]['type'] == '1' || $locations[$v_pat_loc['location_id']]['type'] == '2'))
				{
					$till = $discharge_dead_date;
				}

				$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
				$r1end = strtotime(date('Y-m-d', strtotime($till)));

				$r2start = strtotime($current_period['start']);
				$r2end = strtotime($current_period['end']);

				if($locations[$v_pat_loc['location_id']]['type'] == '1' || $locations[$v_pat_loc['location_id']]['type'] == '2')
				{

					if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
					{
						$period_hosp_locations[] = $v_pat_loc;
						$location_start = date("Y-m-d", strtotime("+1 day", strtotime($v_pat_loc['valid_from'])));

						$hosp = $patientmaster->getDaysInBetween($location_start, $till);
						$hospital_days = array_merge($hospital_days, $hosp);
					}

					$current_location = date('Y-m-d', strtotime($pat_locations[$k_pat_loc]['valid_till']));
					$nextlocation = date('Y-m-d', strtotime($pat_locations[$k_pat_loc + 1]['valid_from']));

					if($locations[$pat_locations[$k_pat_loc + 1]['location_id']]['type'] == '1' || $locations[$pat_locations[$k_pat_loc + 1]['location_id']]['type'] == '2')
					{
						if($current_location == $nextlocation && in_array($nextlocation, $period_days))
						{
							$hospital_days[] = $nextlocation;
						}
					}
				}
			}

			$full_hospital_days = array_values(array_unique($hospital_days));

			if($_REQUEST['dbg'] == 'hospital')
			{

				print_r("full_hospital_days START:\n");
				print_r($full_hospital_days);
				print_r("\n full_hospital_days END");
				print_r("\ndischarge dead date:");
				print_r($discharge_dead_date);
				exit;
			}


			return $full_hospital_days;
		}
		
		//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020 - add client param
		private function get_period_contact_forms($ipid, $current_period, $sgbxi = false, $duration = false, $duration_after_death = false, $clientid = false)
		{
			if($duration_after_death){

			   
			    if(!$clientid){//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020 - add client param
				    $logininfo = new Zend_Session_Namespace('Login_Info');
				    $clientid = $logininfo->clientid;
			    }
				
				$patientdischarge = new PatientDischarge();
				$discharge_method = new DischargeMethod();
				$patient_discharge = $patientdischarge->getPatientDischarge($ipid);
				$discharge_dead_date = '';
				if($patient_discharge)
				{
					//get discharge methods
					$discharge_methods = $discharge_method->getDischargeMethod($clientid, 0);
				
					foreach($discharge_methods as $k_dis_method => $v_dis_method)
					{
						if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
						{
							$death_methods[] = $v_dis_method['id'];
						}
					}
					$death_methods = array_values(array_unique($death_methods));
				
					if(in_array($patient_discharge[0]['discharge_method'], $death_methods))
					{
						$discharge_dead_date = date('Y-m-d', strtotime($patient_discharge[0]['discharge_date']));
						$discharge_dead_date_time = date('Y-m-d H:i:00', strtotime($patient_discharge[0]['discharge_date']));
					}
				}
				
			}
			
			$contact_from_course = Doctrine_Query::create()
				->select("id,ipid,recordid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid ="' . $ipid . '"')
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');

			$contact_v = $contact_from_course->fetchArray();

			foreach($contact_v as $k_contact_v => $v_contact_v)
			{
				$deleted_contact_forms[] = $v_contact_v['recordid'];
			}

			$contact_form_visits = Doctrine_Query::create()
				->select("*")
				->from("ContactForms")
				->where('ipid = ?', $ipid);
				if(!empty($deleted_contact_forms)){
					$contact_form_visits->andWhereNotIn('id', $deleted_contact_forms);
				}
				$contact_form_visits->andWhere('DATE(billable_date) BETWEEN ? AND ?', array(date("Y-m-d",strtotime($current_period['start'])),date("Y-m-d",strtotime($current_period['end'])) ))
				->andWhere('isdelete ="0"')
				->andWhere('parent ="0"');

			if($sgbxi)
			{
				$contact_form_visits->andWhere('sgbxi_quality = "1"');
			}

			$contact_form_visits->orderBy('begin_date_h, begin_date_m ASC');
			$contact_form_visits_res = $contact_form_visits->fetchArray();

			foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
			{

				if(!$sgbxi)
				{
					$contact_form_visit_date = date('Y-m-d', strtotime($v_contact_visit['billable_date']));

					if($duration)
					{
						$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_durationbydates($v_contact_visit['start_date'],$v_contact_visit['end_date']);
					}
					elseif($duration_after_death)
					{
						if(!empty($discharge_dead_date_time)){
								
							// RE calculate visit duration  // ISPC 2051
							$visit_start_date = strtotime(date('Y-m-d H:i:00', strtotime($v_contact_visit['start_date'])));
							$visit_end_date = strtotime(date('Y-m-d H:i:00', strtotime($v_contact_visit['end_date'])));
							$a1start = strtotime($discharge_dead_date_time);
							$a1end = strtotime($discharge_dead_date_time);
						
							if(Pms_CommonData::isintersected($visit_start_date, $visit_end_date, $a1start, $a1end))
							{
								$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_durationbydates($v_contact_visit['start_date'],$discharge_dead_date_time);
							} 
							else
							{
								$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_durationbydates($v_contact_visit['start_date'],$v_contact_visit['end_date']);
							}
						}
						else
						{
							$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_durationbydates($v_contact_visit['start_date'],$v_contact_visit['end_date']);
						}
					}
					
					
					$cf_visit_days[$contact_form_visit_date][] = $v_contact_visit;

					$cf_visit_days[$contact_form_visit_date]['form_types'][] = $v_contact_visit['form_type'];
					$cf_visit_days[$contact_form_visit_date]['form_types'] = array_unique($cf_visit_days[$contact_form_visit_date]['form_types']);
				}
				else
				{
					$cf_visit_days[$v_contact_visit['id']] = $v_contact_visit;
				}
			}

			return $cf_visit_days;
		}
		
		private function get_overall_contact_forms($ipid)
		{
			$contact_from_course = Doctrine_Query::create()
				->select("id,ipid,recordid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid =?', $ipid)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');

			$contact_v = $contact_from_course->fetchArray();

			foreach($contact_v as $k_contact_v => $v_contact_v)
			{
				$deleted_contact_forms[] = $v_contact_v['recordid'];
			}

			$contact_form_visits = Doctrine_Query::create()
				->select("*")
				->from("ContactForms")
				->where('ipid = ?', $ipid);
				if(!empty($deleted_contact_forms)){
					$contact_form_visits ->andWhereNotIn('id', $deleted_contact_forms);
				}
				$contact_form_visits ->andWhere('isdelete ="0"')
				->andWhere('parent ="0"');
			$contact_form_visits->orderBy('begin_date_h, begin_date_m ASC');
			$contact_form_visits_res = $contact_form_visits->fetchArray();

			foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
			{
				$contact_form_visit_date = date('Y-m-d', strtotime($v_contact_visit['billable_date']));

				$cf_visit_days[$contact_form_visit_date][] = $v_contact_visit;
 
			}

			return $cf_visit_days;
		}

		private function get_patients_period_cf($ipids, $current_period, $sgbxi = false)
		{
			if(is_array($ipids))
			{
				$ipids_arr = $ipids;
			}
			else
			{
				$ipids_arr[] = $ipids;
			}
			$contact_from_course = Doctrine_Query::create()
				->select("id,ipid,recordid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->whereIn('ipid', $ipids_arr)
// 				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("course_type = AES_ENCRYPT('F','" . Zend_Registry::get('salt') . "')")
				->andWhere("wrong = 1")
// 				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->andWhere("tabname = AES_ENCRYPT('contact_form','" . Zend_Registry::get('salt') . "')")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');

			$contact_v = $contact_from_course->fetchArray();

			foreach($contact_v as $k_contact_v => $v_contact_v)
			{
				$deleted_contact_forms[] = $v_contact_v['recordid'];
			}

			$contact_form_visits = Doctrine_Query::create()
				->select("*")
				->from("ContactForms")
				->whereIn('ipid', $ipids_arr);
				if(!empty($deleted_contact_forms)){
					$contact_form_visits ->andWhereNotIn('id', $deleted_contact_forms);
				}
				$contact_form_visits ->andWhere('DATE(billable_date) BETWEEN ? AND ?', array(date("Y-m-d",strtotime($current_period['start'])),date("Y-m-d",strtotime($current_period['end'])) ) )  
				->andWhere('isdelete ="0"')
				->andWhere('parent ="0"');

			if($sgbxi)
			{
				$contact_form_visits->andWhere('sgbxi_quality = "1"');
			}

			$contact_form_visits->orderBy('begin_date_h, begin_date_m ASC');
			$contact_form_visits_res = $contact_form_visits->fetchArray();

			foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
			{

				if(!$sgbxi)
				{
					$contact_form_visit_date = date('Y-m-d', strtotime($v_contact_visit['billable_date']));

					$cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date][] = $v_contact_visit;

					$cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date]['form_types'][] = $v_contact_visit['form_type'];
					$cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date]['form_types'] = array_unique($cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date]['form_types']);
				}
				else
				{
					$cf_visit_days[$v_contact_visit['ipid']][$v_contact_visit['id']] = $v_contact_visit;
				}
			}

			return $cf_visit_days;
		}

		//used in ND invoices
		private function get_patients_contact_forms($ipids = false, $current_period = false, $duration = false,$exclude_intern = false, $hide_on_invoice = false,$hide_no_billing_types = true)
		{
		    // TODO-3998 Ancuta 24.03.2021
		    if($hide_no_billing_types){
		        $logininfo = new Zend_Session_Namespace('Login_Info');
		        $clientid = $logininfo->clientid;
		        
		        $form_types = new FormTypes();
		        $no_billing_types_array = $form_types->get_form_types($clientid, '200');//Ohne Berechnung
		        
		        $no_billing_types = array();
		        foreach($no_billing_types_array as $k => $type_data)
		        {
		            $no_billing_types[] = $type_data['id'];
		        }
		    }
		    // --
		    
			if(is_array($ipids))
			{
				$ipids_arr = $ipids;
			}
			else
			{
				$ipids_arr[] = $ipids;
			}
			$contact_from_course = Doctrine_Query::create()
				->select("id,ipid,recordid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->whereIn('ipid', $ipids_arr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');

			$contact_v = $contact_from_course->fetchArray();

			foreach($contact_v as $k_contact_v => $v_contact_v)
			{
				$deleted_contact_forms[] = $v_contact_v['recordid'];
			}

			$contact_form_visits = Doctrine_Query::create()
				->select("*")
				->from("ContactForms")
				->whereIn('ipid', $ipids_arr);
				if(!empty($deleted_contact_forms))
				{
					$contact_form_visits->andWhereNotIn('id', $deleted_contact_forms);
				}
				$contact_form_visits ->andWhere('parent ="0"')
				->andWhere('isdelete ="0"');
				
				if($current_period)
				{
					$contact_form_visits->andWhere('DATE(billable_date) BETWEEN ? AND ?', array(date("Y-m-d",strtotime($current_period['start'])), date("Y-m-d",strtotime($current_period['end'])) ) );  
				}
				if($hide_on_invoice){
					$contact_form_visits->andWhere('invoice_condition = "show_on_invoice"');
				}
				//TODO-3998 Ancuta 24.03.2021
				if($hide_no_billing_types && !empty($no_billing_types)){
				    $contact_form_visits->andWhereNotIN('form_type',$no_billing_types);
				}
				// --
			$contact_form_visits->orderBy('begin_date_h, begin_date_m ASC');
			$contact_form_visits_res = $contact_form_visits->fetchArray();
			
			if($exclude_intern ){
				foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
				{
					$contact_forms_ids[] = $v_contact_visit['id'];
				}
				if($contact_forms_ids){
						
					$fbc = new FormBlockClassification();
					$classification = $fbc->get_multiple_block_classification($ipids_arr,$contact_forms_ids);

					$intern_cf_ids = array();
					foreach($classification as $cfid=>$class){
						if($class['intern'] == "1"){
							$intern_cf_ids[] = $cfid;
						}
					}
				}
			}
				
			
			foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
			{
				
				if($exclude_intern)
				{
					if(!in_array($v_contact_visit['id'],$intern_cf_ids)){
						if($duration)
						{
// 							$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_duration(str_pad($v_contact_visit['begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_m'], 2, "0", STR_PAD_LEFT), $v_contact_visit['date']);
							$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_durationbydates($v_contact_visit['start_date'],$v_contact_visit['end_date']);
						}
						$cf_visit_days[$v_contact_visit['ipid']][$v_contact_visit['id']] = $v_contact_visit;				
					}
					
					
				} else {
					if($duration)
					{
// 						$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_duration(str_pad($v_contact_visit['begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_m'], 2, "0", STR_PAD_LEFT), $v_contact_visit['date']);
						$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_durationbydates($v_contact_visit['start_date'],$v_contact_visit['end_date']);
					}
	
					$cf_visit_days[$v_contact_visit['ipid']][$v_contact_visit['id']] = $v_contact_visit;
				}
				
				
			}

			return $cf_visit_days;
		}

		private function get_period_course($ipid, $discharge_date = false, $details = false)
		{

			$course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid ="' . $ipid . '"')
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U' OR AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');

			if($discharge_date)
			{
				$discharge_date_f = date('Y-m-d H:i:s', strtotime($discharge_date));
				$course->andWhere('done_date < "' . $discharge_date_f . '"');
			}

			$course_res = $course->fetchArray();

			
			foreach($course_res as $k_course => $v_course)
			{
				$course_date = date('Y-m-d', strtotime($v_course['done_date']));

				if($details)
				{
    				$days_course[$course_date][] = $v_course;
				}
				else
				{
    				$days_course[$course_date][] = $v_course['course_type'];
				}
			}

			return $days_course;
		}

		private function get_patients_period_course($ipids = false, $discharge_dates = false, $period = false)
		{
			$course = Doctrine_Query::create()
				->select("id, ipid, course_date, wrong, done_date, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type")
				->from('PatientCourse')
				->where("course_type = AES_ENCRYPT('U','" . Zend_Registry::get('salt') . "')  OR course_type = AES_ENCRYPT('V','" . Zend_Registry::get('salt') . "')")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');


			if($ipids)
			{
				if($period)
				{
					$course->andWhere('DATE(done_date) BETWEEN DATE("' . date('Y-m-d H:i:s', strtotime($period['start'])) . '") AND DATE("' . date('Y-m-d H:i:s', strtotime('-1 second', strtotime('+1 day', strtotime($period['end'])))) . '") ');
				}

				$course->andWhereIn('ipid', $ipids);
			}

			$course_res = $course->fetchArray();

			foreach($course_res as $k_course => $v_course)
			{
//				var_dump(strtotime($v_course['done_date']) <= strtotime($discharge_dates[$v_course['ipid']]));
//				print_r($v_course['ipid'] . ' --->' . $v_course['done_date'] . ' (<=)-- ' . $discharge_dates[$v_course['ipid']]."\n\n");

				if(strtotime($v_course['done_date']) <= strtotime($discharge_dates[$v_course['ipid']]))
				{
					$course_date = date('Y-m-d', strtotime($v_course['done_date']));
					$days_course[$v_course['ipid']][$course_date][] = $v_course['course_type'];
				}
				else if(strlen($discharge_dates[$v_course['ipid']]) == "0")
				{
					$course_date = date('Y-m-d', strtotime($v_course['done_date']));
					$days_course[$v_course['ipid']][$course_date][] = $v_course['course_type'];
				}
			}

			return $days_course;
		}

		private function real_active_days($active_days_in_period, $hospital_days, $sapv_days)
		{
			foreach($active_days_in_period as $k_active_day => $v_active_day)
			{
				$v_active_day_alt = date('d.m.Y', strtotime($v_active_day));
				if(!in_array($v_active_day_alt, $hospital_days) && array_key_exists($v_active_day, $sapv_days))
				{
					$real_active_days[] = $v_active_day;
				}
			}

			return $real_active_days;
		}

		private function patients_real_active_days($ipids, $active_days_in_period, $hospital_days, $sapv_days)
		{
			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($active_days_in_period[$v_ipid] as $k_active_day => $v_active_day)
				{
//					if($v_ipid == '0bbb28fdffcf6bf09a7d5ba9d6090c2d684005cc')
//					{
//						print_r($v_active_day."\n");
//						var_dump(!in_array($v_active_day, $hospital_days[$v_ipid]));
//						var_dump(array_key_exists($v_active_day, $sapv_days[$v_ipid]));
//						print_r("\n\n");
//					}

					if(!in_array($v_active_day, $hospital_days[$v_ipid]) && array_key_exists($v_active_day, $sapv_days[$v_ipid]))
					{
						$real_active_days[$v_ipid][] = $v_active_day;
					}
				}
			}

			return $real_active_days;
		}

		private function nosapv_days($active_days_in_period, $hospital_days, $sapv_days)
		{
			foreach($active_days_in_period as $k_active_day => $v_active_day)
			{
				$v_active_day_alt = date('d.m.Y', strtotime($v_active_day));
				if(!in_array($v_active_day_alt, $hospital_days) && !array_key_exists($v_active_day, $sapv_days))
				{
					$real_active_days[] = $v_active_day;
				}
			}

			return $real_active_days;
		}

		private function real_active_days_nosapv($active_days_in_period, $hospital_days)
		{
			foreach($active_days_in_period as $k_active_day => $v_active_day)
			{
				if(!in_array($v_active_day, $hospital_days))
				{
					$real_active_days[] = $v_active_day;
				}
			}

			return $real_active_days;
		}

		private function multi_patients_flatrate_days_oldx($ipids, $clientid, $start, $end, $current_period, $active_days_overall, $cycles, $days_nosapv_overall, $hospital_overall_days, $patients_details)
		{
			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn("ipid", $ipids)
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			//get patients discharges
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids);

			//get client discharge methods
			$discharge_methods = DischargeMethod::getDischargeMethod($clientid, 0);

			//get only dead methods
			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			//get discharged dead date
			foreach($patients_discharge as $k_pat_dis => $v_pat_dis)
			{
				if(in_array($v_pat_dis['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$v_pat_dis['ipid']] = date('Y-m-d', strtotime($v_pat_dis['discharge_date']));
				}
			}


			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
//				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days[$v_sapv['ipid']]))
				{
					$sapv_days[$v_sapv['ipid']] = array();
				}

				$sapv_days[$v_sapv['ipid']] = array_merge_recursive($s_days, $sapv_days[$v_sapv['ipid']]);
			}
			$sapv_days[$v_sapv['ipid']] = array_values(array_unique($sapv_days[$v_sapv['ipid']]));

			foreach($ipids as $k_ipid => $v_ipid)
			{
				$active_days_overall[$v_ipid] = array_diff($active_days_overall[$v_ipid], $hospital_overall_days[$v_ipid]);

				//calculate allowed days for each patient
				foreach($cycles[$v_ipid] as $k_cycle => $v_cycle)
				{
					//start allowed cycle based on 4week from last discharge(first admission is excluded)
					if($k_cycle > '0')
					{
						$last_discharge_date[$v_ipid] = date('Y-m-d', strtotime($v_cycle['end']));
						$next_allowed_start_cycle[$v_ipid] = date('Y-m-d', strtotime('+4 weeks', strtotime($last_discharge_date[$v_ipid])));
					}

					if((strtotime($next_allowed_start_cycle[$v_ipid]) <= strtotime($v_cycle['date'])) || $k_cycle == '0')
					{
						$start_cycle = date('Y-m-d', strtotime($v_cycle['start']));
						if($v_cycle['end'] != '0000-00-00' && $v_cycle['end'] != '1970-01-01')
						{
							$end_cycle = date('Y-m-d', strtotime($v_cycle['end']));
						}

						$allowed_fl_cycle_days[$v_ipid] = $patientmaster->getDaysInBetween($start_cycle, $end_cycle);

						if(empty($allowed_flatrate_days[$v_ipid]))
						{
							$allowed_flatrate_days[$v_ipid] = array();
						}

						$allowed_flatrate_days[$v_ipid] = array_merge_recursive($allowed_fl_cycle_days[$v_ipid], $allowed_flatrate_days[$v_ipid]);

						//create array with days per cycle
						$flatrate_cycle = date('Ym', strtotime($start_cycle));
						if(empty($allowed_fl_days[$v_ipid][$flatrate_cycle]))
						{
							$allowed_fl_days[$v_ipid][$flatrate_cycle] = array();
						}

						$allowed_fl_days[$v_ipid][$flatrate_cycle] = array_merge_recursive($allowed_fl_days[$v_ipid][$flatrate_cycle], $allowed_fl_cycle_days[$v_ipid]);
						$allowed_fl_days[$v_ipid][$flatrate_cycle] = array_values(array_unique($allowed_fl_days[$v_ipid][$flatrate_cycle]));
					}

					unset($start_cycle);
					unset($end_cycle);
				}
				asort($allowed_flatrate_days);
				$allowed_flatrate_days[$v_ipid] = array_values(array_unique($allowed_flatrate_days[$v_ipid]));


				foreach($sapv_days[$v_ipid] as $k_sapv_day => $v_sapv_day)
				{
					$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
					$curent_start_month = date('Ym', strtotime($current_period['start']));

					//calculate overall
					if(count($flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall[$v_ipid]) && in_array($v_sapv_day, $allowed_flatrate_days[$v_ipid]))
					{
						$flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
					}
				}

				$sapv_days_active[$v_ipid] = array_intersect($active_days_overall[$v_ipid], $sapv_days[$v_ipid]);
				$sapv_days_active[$v_ipid] = array_values(array_unique($sapv_days_active[$v_ipid]));
				asort($sapv_days[$v_ipid]);

				$sapv_days[$v_ipid] = array_values($sapv_days[$v_ipid]);

				$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
				$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

				if(count($sapv_days_active[$v_ipid]) > '0')
				{
					$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
					$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

					$currtime[$v_ipid] = $last_sapv_day_ts[$v_ipid];
					$discharge_date = end(end($patients_details[$v_ipid]['active_periods']));

					$end_time[$v_ipid] = strtotime(date('Y-m-d', strtotime($discharge_date)));


					$counted_days[$v_ipid] = array();
					$dbg_count[$v_ipid] = array();
					$i = '0';
					$first_flatrate[$v_ipid] = true;

					//while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
					while($currtime[$v_ipid] <= $end_time[$v_ipid])
					{
						$cur_time_formated[$v_ipid] = date('Y-m-d', $currtime[$v_ipid]);

						if(in_array($cur_time_formated[$v_ipid], $days_nosapv_overall[$v_ipid]))
						{
							//increment $counted days
							$counted_days[$v_ipid][] = $cur_time_formated[$v_ipid];
							$dbg_count[$v_ipid][$i][] = $cur_time_formated[$v_ipid];
						}
						else
						{
							$dbg_count[$v_ipid][$i] = array_diff($dbg_count[$v_ipid][$i], $sapv_days_active[$v_ipid]);
							$dbg_count[$v_ipid][$i] = array_diff($dbg_count[$v_ipid][$i], $hospital_overall_days[$v_ipid]);
							$dbg_count[$v_ipid][$i] = array_values(array_unique($dbg_count[$v_ipid][$i]));

							//remove sapv days from counted days
							$counted_days[$v_ipid] = array_diff($counted_days[$v_ipid], $sapv_days_active[$v_ipid]);
							$counted_days[$v_ipid] = array_diff($counted_days[$v_ipid], $hospital_overall_days[$v_ipid]);
							$counted_days[$v_ipid] = array_values(array_unique($counted_days[$v_ipid]));


							if($first_flatrate[$v_ipid] && in_array($cur_time_formated[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($cur_time_formated[$v_ipid], $hospital_overall_days[$v_ipid]))
							{
								$flatrate_structured[$v_ipid]['pay_days'][] = $cur_time_formated[$v_ipid];

								$fl_start_key[$v_ipid] = array_search($cur_time_formated[$v_ipid], $flatrate_structured[$v_ipid]['pay_days']);
								$flatrate_structured[$v_ipid][$fl_start_key[$v_ipid]][] = $cur_time_formated[$v_ipid];
								$counted_days[$v_ipid] = array();
								$dbg_count[$v_ipid][$i] = array();
								$first_flatrate[$v_ipid] = false;
								$i++;
							}

							//not found in nosapv days(possible sapv) check if is not hospital
							if(count($counted_days[$v_ipid]) >= '28' && in_array($cur_time_formated[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($cur_time_formated[$v_ipid], $hospital_overall_days[$v_ipid]))
							{
								$flatrate_structured[$v_ipid]['pay_days'][] = $cur_time_formated[$v_ipid];

								//get curent fl start day key
								$fl_start_key[$v_ipid] = array_search($cur_time_formated[$v_ipid], $flatrate_structured[$v_ipid]['pay_days']);
								$flatrate_structured[$v_ipid][$fl_start_key[$v_ipid]][] = $cur_time_formated[$v_ipid];

								//reset counted days
								$counted_days[$v_ipid] = array();
								$dbg_count[$v_ipid][$i] = array();
								$i++;
							}
							else
							{
								$counted_days[$v_ipid][] = $cur_time_formated[$v_ipid];
								$dbg_count[$v_ipid][$i][] = $cur_time_formated[$v_ipid];
							}
						}

						$currtime[$v_ipid] = strtotime('+1 day', $currtime[$v_ipid]);
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $kk_flatrate => $vv_flatrate)
				{
					$start_fl_period_day[$v_ipid] = $vv_flatrate;
					$i = 0;

					while(count($flatrate_structured[$v_ipid][$kk_flatrate]) < '7')
					{
						if(!in_array($start_fl_period_day[$v_ipid], $hospital_overall_days[$v_ipid]) && in_array($start_fl_period_day[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($start_fl_period_day[$v_ipid], $flatrate_structured[$v_ipid][$kk_flatrate]))
						{
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $start_fl_period_day[$v_ipid];
						}
						else
						{
							//make sure we reach 7 elements
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $vv_flatrate;
						}
						asort($flatrate_structured[$v_ipid][$kk_flatrate]);
						$start_fl_period_day[$v_ipid] = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day[$v_ipid])));
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $k_flatrate => $v_flatrate)
				{
					$max_flatrate_day[$v_ipid][$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

					$flatrate_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;
					$flatrate_structured_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;

					foreach($flatrate_structured[$v_ipid][$k_flatrate] as $k_day_key => $v_day_value)
					{
						if(strtotime($v_day_value) <= $max_flatrate_day[$v_ipid][$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod[$v_ipid]) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
						{
							$flatrate_inperiod[$v_ipid][] = $v_day_value;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_day_value;
						}
						else
						{
							$flatrate_inperiod[$v_ipid][] = $v_flatrate;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_flatrate;
						}
					}
				}

				foreach($flatrate_structured_inperiod[$v_ipid]['pay_days'] as $k_fl_per => $v_fl_per)
				{
					$flatrate_inperiod_temp[$v_ipid] = $flatrate_structured_inperiod[$v_ipid][$k_fl_per];
					$flatrate_inperiod_temp[$v_ipid] = array_values(array_unique($flatrate_inperiod_temp[$v_ipid]));


					$last_day_flatrate[$v_ipid] = end($flatrate_inperiod_temp[$v_ipid]);
					$ts_last_day_flatrate[$v_ipid] = strtotime($last_day_flatrate[$v_ipid]);
					$next_flatrate_day[$v_ipid] = '';
					while(count($flatrate_inperiod_temp[$v_ipid]) < '7')
					{

						if(strlen($next_flatrate_day[$v_ipid]) == '0')
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $ts_last_day_flatrate[$v_ipid]);
						}
						else
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $next_flatrate_day[$v_ipid]);
						}

						//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
						if($next_flatrate_day[$v_ipid] <= strtotime($current_period['end']))
						{
							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days_overall[$v_ipid]))
//							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days[$v_ipid]))
							{
								$flatrate_inperiod_temp[$v_ipid][] = date('Y-m-d', $next_flatrate_day[$v_ipid]);
							}
						}
						else
						{
							$flatrate_inperiod_temp[$v_ipid][] = $last_day_flatrate[$v_ipid]; //dummy control
						}
					}

//					if($v_ipid == '0bbb28fdffcf6bf09a7d5ba9d6090c2d684005cc')
//					{
//						print_r($active_days_overall[$v_ipid]);
//
//					}
					if(empty($final_flatrate[$v_ipid]))
					{
						$final_flatrate[$v_ipid] = array();
					}

					$final_flatrate[$v_ipid] = array_merge_recursive($final_flatrate[$v_ipid], $flatrate_inperiod_temp[$v_ipid]);
				}

				foreach($final_flatrate[$v_ipid] as $k_fl_day => $v_fl_day)
				{
					$seached_key = '';
					if(!in_array($v_fl_day, $sapv_days_active[$v_ipid]))
					{
						$seached_key = array_search($v_fl_day, $final_flatrate[$v_ipid]);

						if(strlen($seached_key) > '0')
						{
							unset($final_flatrate[$v_ipid][$seached_key]);
							array_values($final_flatrate[$v_ipid]);
						}
					}
					unset($seached_key);
				}

				//get back pay days
				$final_flatrate[$v_ipid]['pay_days'] = $flatrate_structured_inperiod[$v_ipid]['pay_days'];
			}



//			print_r("allowed_flatrate_days\n");
//			print_r($allowed_flatrate_days);
//			print_r("sapv_days_active\n");
//			print_r($sapv_days_active);
//			print_r("sapv_days\n");
//			print_r($sapv_days);
//			print_r("flatrate_structured\n");
//			print_r($flatrate_structured);
//			print_r("fl in period\n");
//			print_r($flatrate_inperiod);
//			print_r("fl in structured period\n");
//			print_r($flatrate_structured_inperiod);
//			print_r("final flatrate\n");
//			print_r($final_flatrate);
//			print_r("patients_details\n");
//			print_r($patients_details);
//			exit;

			return $final_flatrate;
		}

		private function multi_patients_flatrate_days($ipids, $clientid, $start, $end, $current_period, $active_days_overall, $cycles, $days_nosapv_overall, $hospital_overall_days, $patients_details)
		{
			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn("ipid", $ipids)
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			//get patients discharges
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids);

			//get client discharge methods
			$discharge_methods = DischargeMethod::getDischargeMethod($clientid, 0);

			//get only dead methods
			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			//get discharged dead date
			foreach($patients_discharge as $k_pat_dis => $v_pat_dis)
			{
				if(in_array($v_pat_dis['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$v_pat_dis['ipid']] = date('Y-m-d', strtotime($v_pat_dis['discharge_date']));
				}
			}


			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
//				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days[$v_sapv['ipid']]))
				{
					$sapv_days[$v_sapv['ipid']] = array();
				}

				$sapv_days[$v_sapv['ipid']] = array_merge_recursive($s_days, $sapv_days[$v_sapv['ipid']]);
			}
			$sapv_days[$v_sapv['ipid']] = array_values(array_unique($sapv_days[$v_sapv['ipid']]));

			foreach($ipids as $k_ipid => $v_ipid)
			{
				$active_days_overall[$v_ipid] = array_diff($active_days_overall[$v_ipid], $hospital_overall_days[$v_ipid]);

//				//calculate allowed days for each patient
//				foreach($cycles[$v_ipid] as $k_cycle => $v_cycle)
//				{
//					//start allowed cycle based on 4week from last discharge(first admission is excluded)
//					if($k_cycle > '0')
//					{
//						$last_discharge_date[$v_ipid] = date('Y-m-d', strtotime($v_cycle['end']));
//						$next_allowed_start_cycle[$v_ipid] = date('Y-m-d', strtotime('+4 weeks', strtotime($last_discharge_date[$v_ipid])));
//					}
//
//					if((strtotime($next_allowed_start_cycle[$v_ipid]) <= strtotime($v_cycle['date'])) || $k_cycle == '0')
//					{
//						$start_cycle = date('Y-m-d', strtotime($v_cycle['start']));
//						if($v_cycle['end'] != '0000-00-00' && $v_cycle['end'] != '1970-01-01')
//						{
//							$end_cycle = date('Y-m-d', strtotime($v_cycle['end']));
//						}
//
//						$allowed_fl_cycle_days[$v_ipid] = $patientmaster->getDaysInBetween($start_cycle, $end_cycle);
//
//						if(empty($allowed_flatrate_days[$v_ipid]))
//						{
//							$allowed_flatrate_days[$v_ipid] = array();
//						}
//
//						$allowed_flatrate_days[$v_ipid] = array_merge_recursive($allowed_fl_cycle_days[$v_ipid], $allowed_flatrate_days[$v_ipid]);
//
//						//create array with days per cycle
//						$flatrate_cycle = date('Ym', strtotime($start_cycle));
//						if(empty($allowed_fl_days[$v_ipid][$flatrate_cycle]))
//						{
//							$allowed_fl_days[$v_ipid][$flatrate_cycle] = array();
//						}
//
//						$allowed_fl_days[$v_ipid][$flatrate_cycle] = array_merge_recursive($allowed_fl_days[$v_ipid][$flatrate_cycle], $allowed_fl_cycle_days[$v_ipid]);
//						$allowed_fl_days[$v_ipid][$flatrate_cycle] = array_values(array_unique($allowed_fl_days[$v_ipid][$flatrate_cycle]));
//					}
//
//					unset($start_cycle);
//					unset($end_cycle);
//				}
//				asort($allowed_flatrate_days);
//				$allowed_flatrate_days[$v_ipid] = array_values(array_unique($allowed_flatrate_days[$v_ipid]));


				foreach($sapv_days[$v_ipid] as $k_sapv_day => $v_sapv_day)
				{
					$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
					$curent_start_month = date('Ym', strtotime($current_period['start']));

					//calculate overall
					if(count($flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall[$v_ipid]))
					{
						$flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
					}
				}

				$sapv_days_active[$v_ipid] = array_intersect($active_days_overall[$v_ipid], $sapv_days[$v_ipid]);
				$sapv_days_active[$v_ipid] = array_values(array_unique($sapv_days_active[$v_ipid]));
				asort($sapv_days[$v_ipid]);

				$sapv_days[$v_ipid] = array_values($sapv_days[$v_ipid]);

				$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
				$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

				if(count($sapv_days_active[$v_ipid]) > '0')
				{
					$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
					$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

					$currtime[$v_ipid] = $last_sapv_day_ts[$v_ipid];
					$discharge_date = end(end($patients_details[$v_ipid]['active_periods']));

					$end_time[$v_ipid] = strtotime(date('Y-m-d', strtotime($discharge_date)));


					$i = '0';
					$first_flatrate[$v_ipid] = true;

					//while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
					while($currtime[$v_ipid] <= $end_time[$v_ipid])
					{
						$cur_time_formated[$v_ipid] = date('Y-m-d', $currtime[$v_ipid]);

						if(
								!in_array($cur_time_formated[$v_ipid], $days_nosapv_overall) 
								&& $first_flatrate[$v_ipid] 
								&& in_array($cur_time_formated[$v_ipid], $sapv_days_active[$v_ipid]) 
								&& !in_array($cur_time_formated[$v_ipid], $hospital_overall_days[$v_ipid]))
						{
							$flatrate_structured[$v_ipid]['pay_days'][] = $cur_time_formated[$v_ipid];

							$fl_start_key[$v_ipid] = array_search($cur_time_formated[$v_ipid], $flatrate_structured[$v_ipid]['pay_days']);
							$flatrate_structured[$v_ipid][$fl_start_key[$v_ipid]][] = $cur_time_formated[$v_ipid];

							$first_flatrate[$v_ipid] = false;
							$i++;
						}

						$currtime[$v_ipid] = strtotime('+1 day', $currtime[$v_ipid]);
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $kk_flatrate => $vv_flatrate)
				{
					$start_fl_period_day[$v_ipid] = $vv_flatrate;
					$i = 0;

					while(count($flatrate_structured[$v_ipid][$kk_flatrate]) < '7')
					{
						if(!in_array($start_fl_period_day[$v_ipid], $hospital_overall_days[$v_ipid]) && in_array($start_fl_period_day[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($start_fl_period_day[$v_ipid], $flatrate_structured[$v_ipid][$kk_flatrate]))
						{
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $start_fl_period_day[$v_ipid];
						}
						else
						{
							//make sure we reach 7 elements
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $vv_flatrate;
						}
						asort($flatrate_structured[$v_ipid][$kk_flatrate]);
						$start_fl_period_day[$v_ipid] = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day[$v_ipid])));
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $k_flatrate => $v_flatrate)
				{
					$max_flatrate_day[$v_ipid][$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

					$flatrate_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;
					$flatrate_structured_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;

					foreach($flatrate_structured[$v_ipid][$k_flatrate] as $k_day_key => $v_day_value)
					{
						if(strtotime($v_day_value) <= $max_flatrate_day[$v_ipid][$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod[$v_ipid]) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
						{
							$flatrate_inperiod[$v_ipid][] = $v_day_value;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_day_value;
						}
						else
						{
							$flatrate_inperiod[$v_ipid][] = $v_flatrate;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_flatrate;
						}
					}
				}

				foreach($flatrate_structured_inperiod[$v_ipid]['pay_days'] as $k_fl_per => $v_fl_per)
				{
					$flatrate_inperiod_temp[$v_ipid] = $flatrate_structured_inperiod[$v_ipid][$k_fl_per];
					$flatrate_inperiod_temp[$v_ipid] = array_values(array_unique($flatrate_inperiod_temp[$v_ipid]));


					$last_day_flatrate[$v_ipid] = end($flatrate_inperiod_temp[$v_ipid]);
					$ts_last_day_flatrate[$v_ipid] = strtotime($last_day_flatrate[$v_ipid]);
					$next_flatrate_day[$v_ipid] = '';
					while(count($flatrate_inperiod_temp[$v_ipid]) < '7')
					{

						if(strlen($next_flatrate_day[$v_ipid]) == '0')
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $ts_last_day_flatrate[$v_ipid]);
						}
						else
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $next_flatrate_day[$v_ipid]);
						}

						//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
						if($next_flatrate_day[$v_ipid] <= strtotime($current_period['end']))
						{
							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days_overall[$v_ipid]))
//							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days[$v_ipid]))
							{
								$flatrate_inperiod_temp[$v_ipid][] = date('Y-m-d', $next_flatrate_day[$v_ipid]);
							}
						}
						else
						{
							$flatrate_inperiod_temp[$v_ipid][] = $last_day_flatrate[$v_ipid]; //dummy control
						}
					}

//					if($v_ipid == '0bbb28fdffcf6bf09a7d5ba9d6090c2d684005cc')
//					{
//						print_r($active_days_overall[$v_ipid]);
//
//					}
					if(empty($final_flatrate[$v_ipid]))
					{
						$final_flatrate[$v_ipid] = array();
					}

					$final_flatrate[$v_ipid] = array_merge_recursive($final_flatrate[$v_ipid], $flatrate_inperiod_temp[$v_ipid]);
				}

				foreach($final_flatrate[$v_ipid] as $k_fl_day => $v_fl_day)
				{
					$seached_key = '';
					if(!in_array($v_fl_day, $sapv_days_active[$v_ipid]))
					{
						$seached_key = array_search($v_fl_day, $final_flatrate[$v_ipid]);

						if(strlen($seached_key) > '0')
						{
							unset($final_flatrate[$v_ipid][$seached_key]);
							array_values($final_flatrate[$v_ipid]);
						}
					}
					unset($seached_key);
				}

				//get back pay days
				$final_flatrate[$v_ipid]['pay_days'] = $flatrate_structured_inperiod[$v_ipid]['pay_days'];
			}



//			print_r("allowed_flatrate_days\n");
//			print_r($allowed_flatrate_days);
//			print_r("sapv_days_active\n");
//			print_r($sapv_days_active);
//			print_r("sapv_days\n");
//			print_r($sapv_days);
//			print_r("flatrate_structured\n");
//			print_r($flatrate_structured);
//			print_r("fl in period\n");
//			print_r($flatrate_inperiod);
//			print_r("fl in structured period\n");
//			print_r($flatrate_structured_inperiod);
//			print_r("final flatrate\n");
//			print_r($final_flatrate);
//			print_r("patients_details\n");
//			print_r($patients_details);
//			exit;

			return $final_flatrate;
		}

		
		/**
		 * 
		 * @param unknown $ipids
		 * @param unknown $clientid
		 * @param unknown $start
		 * @param unknown $end
		 * @param unknown $current_period
		 * @param unknown $active_days_overall
		 * @param unknown $cycles
		 * @param unknown $days_nosapv_overall
		 * @param unknown $hospital_overall_days
		 * @param unknown $patients_details
		 * @param unknown $allowed_flatrate_restart_days
		 * @return multitype:
		 */
		private function multi_patients_flatrate_days_continued($ipids, $clientid, $start, $end, $current_period, $active_days_overall, $cycles, $days_nosapv_overall, $hospital_overall_days, $patients_details, $allowed_flatrate_restart_days)
		{
			//days where there is sapv and at least 4w from last product
//			$allowed_flatrate_restart_days[$ipid]['days_products']
			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn("ipid", $ipids)
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			//get patients discharges
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids);

			//get client discharge methods
			$discharge_methods = DischargeMethod::getDischargeMethod($clientid, 0);

			//get only dead methods
			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			//get discharged dead date
			foreach($patients_discharge as $k_pat_dis => $v_pat_dis)
			{
				if(in_array($v_pat_dis['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$v_pat_dis['ipid']] = date('Y-m-d', strtotime($v_pat_dis['discharge_date']));
				}
			}


			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
//				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days[$v_sapv['ipid']]))
				{
					$sapv_days[$v_sapv['ipid']] = array();
				}

				$sapv_days[$v_sapv['ipid']] = array_merge_recursive($s_days, $sapv_days[$v_sapv['ipid']]);
			}
			$sapv_days[$v_sapv['ipid']] = array_values(array_unique($sapv_days[$v_sapv['ipid']]));

			foreach($ipids as $k_ipid => $v_ipid)
			{
				$active_days_overall[$v_ipid] = array_diff($active_days_overall[$v_ipid], $hospital_overall_days[$v_ipid]);



				foreach($sapv_days[$v_ipid] as $k_sapv_day => $v_sapv_day)
				{
					$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
					$curent_start_month = date('Ym', strtotime($current_period['start']));

					//calculate overall
					if(count($flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall[$v_ipid]))
					{
						$flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
					}
				}

				$sapv_days_active[$v_ipid] = array_intersect($active_days_overall[$v_ipid], $sapv_days[$v_ipid]);
				$sapv_days_active[$v_ipid] = array_values(array_unique($sapv_days_active[$v_ipid]));
				asort($sapv_days[$v_ipid]);

				$sapv_days[$v_ipid] = array_values($sapv_days[$v_ipid]);

				$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
				$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);
				
				if(count($sapv_days_active[$v_ipid]) > '0')
				{
					$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
					$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

					$currtime[$v_ipid] = $last_sapv_day_ts[$v_ipid];
					$discharge_date = end(end($patients_details[$v_ipid]['active_periods']));

					$end_time[$v_ipid] = strtotime(date('Y-m-d', strtotime($discharge_date)));


					$counted_days[$v_ipid] = array();
					$dbg_count[$v_ipid] = array();
					$i = '0';
					$first_flatrate[$v_ipid] = true;

					//while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
					while($currtime[$v_ipid] <= $end_time[$v_ipid])
					{
						$cur_time_formated[$v_ipid] = date('Y-m-d', $currtime[$v_ipid]);

						//not found in nosapv days(possible sapv) check if is not hospital
						if(!in_array($cur_time_formated[$v_ipid], $days_nosapv_overall) &&
							in_array($cur_time_formated[$v_ipid], $allowed_flatrate_restart_days[$v_ipid]['days_products']) &&
							in_array($cur_time_formated[$v_ipid], $sapv_days_active[$v_ipid]) &&
							!in_array($cur_time_formated[$v_ipid], $hospital_overall_days[$v_ipid])
						)
						{
							$flatrate_structured[$v_ipid]['pay_days'][] = $cur_time_formated[$v_ipid];

							//get curent fl start day key
							$fl_start_key[$v_ipid] = array_search($cur_time_formated[$v_ipid], $flatrate_structured[$v_ipid]['pay_days']);
							$flatrate_structured[$v_ipid][$fl_start_key[$v_ipid]][] = $cur_time_formated[$v_ipid];

							$i++;
						}

						$currtime[$v_ipid] = strtotime('+1 day', $currtime[$v_ipid]);
					}
				}
				
				foreach($flatrate_structured[$v_ipid]['pay_days'] as $kk_flatrate => $vv_flatrate)
				{
					$start_fl_period_day[$v_ipid] = $vv_flatrate;
					$i = 0;

					while(count($flatrate_structured[$v_ipid][$kk_flatrate]) < '7')
					{
						if(!in_array($start_fl_period_day[$v_ipid], $hospital_overall_days[$v_ipid]) && in_array($start_fl_period_day[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($start_fl_period_day[$v_ipid], $flatrate_structured[$v_ipid][$kk_flatrate]))
						{
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $start_fl_period_day[$v_ipid];
						}
						else
						{
							//make sure we reach 7 elements
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $vv_flatrate;
						}
						asort($flatrate_structured[$v_ipid][$kk_flatrate]);
						$start_fl_period_day[$v_ipid] = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day[$v_ipid])));
					}
				}

				
				foreach($flatrate_structured[$v_ipid]['pay_days'] as $k_flatrate => $v_flatrate)
				{
					$max_flatrate_day[$v_ipid][$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

					$flatrate_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;
					$flatrate_structured_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;

					foreach($flatrate_structured[$v_ipid][$k_flatrate] as $k_day_key => $v_day_value)
					{
						if(strtotime($v_day_value) <= $max_flatrate_day[$v_ipid][$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod[$v_ipid]) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
						{
							$flatrate_inperiod[$v_ipid][] = $v_day_value;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_day_value;
						}
						else
						{
							$flatrate_inperiod[$v_ipid][] = $v_flatrate;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_flatrate;
						}
					}
				}
			
				foreach($flatrate_structured_inperiod[$v_ipid]['pay_days'] as $k_fl_per => $v_fl_per)
				{
					$flatrate_inperiod_temp[$v_ipid] = $flatrate_structured_inperiod[$v_ipid][$k_fl_per];
					$flatrate_inperiod_temp[$v_ipid] = array_values(array_unique($flatrate_inperiod_temp[$v_ipid]));


					$last_day_flatrate[$v_ipid] = end($flatrate_inperiod_temp[$v_ipid]);
					$ts_last_day_flatrate[$v_ipid] = strtotime($last_day_flatrate[$v_ipid]);
					$next_flatrate_day[$v_ipid] = '';
					while(count($flatrate_inperiod_temp[$v_ipid]) < '7')
					{

						if(strlen($next_flatrate_day[$v_ipid]) == '0')
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $ts_last_day_flatrate[$v_ipid]);
						}
						else
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $next_flatrate_day[$v_ipid]);
						}

						//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
						if($next_flatrate_day[$v_ipid] <= strtotime($current_period['end']))
						{
							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days_overall[$v_ipid]))
//							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days[$v_ipid]))
							{
								$flatrate_inperiod_temp[$v_ipid][] = date('Y-m-d', $next_flatrate_day[$v_ipid]);
							}
						}
						else
						{
							$flatrate_inperiod_temp[$v_ipid][] = $last_day_flatrate[$v_ipid]; //dummy control
						}
					}

//					if($v_ipid == '0bbb28fdffcf6bf09a7d5ba9d6090c2d684005cc')
//					{
//						print_r($active_days_overall[$v_ipid]);
//
//					}
					if(empty($final_flatrate[$v_ipid]))
					{
						$final_flatrate[$v_ipid] = array();
					}

					$final_flatrate[$v_ipid] = array_merge_recursive($final_flatrate[$v_ipid], $flatrate_inperiod_temp[$v_ipid]);
				}

				 
				foreach($final_flatrate[$v_ipid] as $k_fl_day => $v_fl_day)
				{
					$seached_key = '';
					if(!in_array($v_fl_day, $sapv_days_active[$v_ipid]))
					{
						$seached_key = array_search($v_fl_day, $final_flatrate[$v_ipid]);

						if(strlen($seached_key) > '0')
						{
							unset($final_flatrate[$v_ipid][$seached_key]);
							array_values($final_flatrate[$v_ipid]);
						}
					}
					unset($seached_key);
				}

				//get back pay days
				$final_flatrate[$v_ipid]['pay_days'] = $flatrate_structured_inperiod[$v_ipid]['pay_days'];
				
				//period in which the flatrate is not billed
				$excluded_fl_period = Pms_CommonData::exclude_bw_flatrate($v_ipid);

				if($excluded_fl_period)
				{
					$pre_final_days[$v_ipid] = $final_flatrate[$v_ipid];

					unset($pre_final_days[$v_ipid]['pay_days']);

					$temp_final_fl[$v_ipid]['days'] = array_diff($pre_final_days[$v_ipid], $excluded_fl_period);
					$temp_final_fl[$v_ipid]['pay_days'] = array_diff($final_flatrate[$v_ipid]['pay_days'], $excluded_fl_period);


					if(count($temp_final_fl[$v_ipid]['days']) == '0' || count($temp_final_fl[$v_ipid]['pay_days']) == '0')
					{
						$final_flatrate[$v_ipid] = array();
					}		
				}
			}
// dd($final_flatrate);


//			print_r("allowed_flatrate_days\n");
//			print_r($allowed_flatrate_days);
//			print_r("sapv_days_active\n");
//			print_r($sapv_days_active);
//			print_r("sapv_days\n");
//			print_r($sapv_days);
//			print_r("flatrate_structured\n");
//			print_r($flatrate_structured);
//			print_r("fl in period\n");
//			print_r($flatrate_inperiod);
//			print_r("fl in structured period\n");
//			print_r($flatrate_structured_inperiod);
//			print_r("final flatrate\n");
//			print_r($final_flatrate);
//			print_r("patients_details\n");
//			print_r($patients_details);
//			exit;

			return $final_flatrate;
		}

		private function flatrate_days_oldx($ipid, $clientid, $start, $end, $current_period, $active_days_overall, $readmission_cycles, $days_nosapv_overall, $hospital_overall_days)
		{
			$patientmaster = new PatientMaster();

			//calculate allowed days
			foreach($readmission_cycles['admissionDates'] as $k_cycle => $v_cycle)
			{
				//start allowed cycle based on 4week from last discharge(first admission is excluded)

				if($k_cycle > '0')
				{

					$last_discharge_date = date('Y-m-d', strtotime($readmission_cycles['dischargeDates'][($k_cycle - 1)]['date']));
					$next_allowed_start_cycle = date('Y-m-d', strtotime('+4 weeks', strtotime($last_discharge_date)));


					if((strtotime($next_allowed_start_cycle) <= strtotime($v_cycle['date'])) || $k_cycle == '0')
					{
//						print_r("[[<=]] [".$k_cycle."](".$last_discharge_date." +4w) => ".$next_allowed_start_cycle." <= (Curent cycle adm: ".$v_cycle['date'].") Next cycle dis".$readmission_cycles['dischargeDates'][$k_cycle]['date']."\n");

						$start_cycle = date('Y-m-d', strtotime($v_cycle['date']));
						if(strlen($readmission_cycles['dischargeDates'][$k_cycle]['date']) != '0' && $readmission_cycles['dischargeDates'][$k_cycle]['date'] != '0000-00-00 00:00:00')
						{
							$end_cycle = date('Y-m-d', strtotime($readmission_cycles['dischargeDates'][$k_cycle]['date']));
						}
						else
						{
							$end_cycle = date('Y-m-d', strtotime($readmission_cycles['discharge_date']));
						}

						$allowed_fl_cycle_days = $patientmaster->getDaysInBetween($start_cycle, $end_cycle);

						if(empty($allowed_flatrate_days))
						{
							$allowed_flatrate_days = array();
						}

						$allowed_flatrate_days = array_merge_recursive($allowed_fl_cycle_days, $allowed_flatrate_days);

						//create array with days per cycle
						$flatrate_cycle = date('Ym', strtotime($start_cycle));
						if(empty($allowed_fl_days[$flatrate_cycle]))
						{
							$allowed_fl_days[$flatrate_cycle] = array();
						}
						$allowed_fl_days[$flatrate_cycle] = array_merge_recursive($allowed_fl_days[$flatrate_cycle], $allowed_fl_cycle_days);
						$allowed_fl_days[$flatrate_cycle] = array_values(array_unique($allowed_fl_days[$flatrate_cycle]));
					}
					elseif((strtotime($next_allowed_start_cycle) >= strtotime($v_cycle['date'])) || $k_cycle == '0')
					{
//						print_r("[[>=]] [".$k_cycle."](".$last_discharge_date." +4w) => ".$next_allowed_start_cycle." <= (Curent cycle adm: ".$v_cycle['date'].") Next cycle dis".$readmission_cycles['dischargeDates'][$k_cycle]['date']."\n");
						$start_cycle = date('Y-m-d', strtotime($next_allowed_start_cycle));
						if(strlen($readmission_cycles['dischargeDates'][$k_cycle]['date']) != '0' && $readmission_cycles['dischargeDates'][$k_cycle]['date'] != '0000-00-00 00:00:00')
						{
							$end_cycle = date('Y-m-d', strtotime($readmission_cycles['dischargeDates'][$k_cycle]['date']));
						}
						else
						{
							$end_cycle = date('Y-m-d', strtotime($readmission_cycles['discharge_date']));
						}

						$allowed_fl_cycle_days = $patientmaster->getDaysInBetween($start_cycle, $end_cycle);

						if(empty($allowed_flatrate_days))
						{
							$allowed_flatrate_days = array();
						}

						$allowed_flatrate_days = array_merge_recursive($allowed_fl_cycle_days, $allowed_flatrate_days);

						//create array with days per cycle
						$flatrate_cycle = date('Ym', strtotime($start_cycle));
						if(empty($allowed_fl_days[$flatrate_cycle]))
						{
							$allowed_fl_days[$flatrate_cycle] = array();
						}
						$allowed_fl_days[$flatrate_cycle] = array_merge_recursive($allowed_fl_days[$flatrate_cycle], $allowed_fl_cycle_days);
						$allowed_fl_days[$flatrate_cycle] = array_values(array_unique($allowed_fl_days[$flatrate_cycle]));
					}
				}
			}

			asort($allowed_flatrate_days);
			$allowed_flatrate_days = array_values(array_unique($allowed_flatrate_days));

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where("ipid='" . $ipid . "'")
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days))
				{
					$sapv_days = array();
				}
				$sapv_days = array_merge_recursive($s_days, $sapv_days);
			}
			$sapv_days = array_values(array_unique($sapv_days));



			foreach($sapv_days as $k_sapv_day => $v_sapv_day)
			{
				$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
				$curent_start_month = date('Ym', strtotime($current_period['start']));

				//calculate overall
				if(count($flatrate_starts['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall) && in_array($v_sapv_day, $allowed_flatrate_days))
				{
					$flatrate_starts['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
				}
			}

			$sapv_days_active = array_intersect($active_days_overall, $sapv_days);
			$sapv_days_active = array_values(array_unique($sapv_days_active));
			asort($sapv_days);

			if($_REQUEST['tmp'])
			{
				print_r("SAPV DAYS active \n");
				print_r($sapv_days_active);

				print_r("SAPV DAYS all \n");
				print_r($sapv_days);
			}

			$sapv_days = array_values($sapv_days);
			$last_sapv_day = $sapv_days_active[0];
			$last_sapv_day_ts = strtotime($last_sapv_day);

			if(count($sapv_days_active) > '0')
			{
				$last_sapv_day = $sapv_days_active[0];
				$last_sapv_day_ts = strtotime($last_sapv_day);

				$currtime = $last_sapv_day_ts;
				$end_time = strtotime(date('Y-m-d', strtotime($readmission_cycles['discharge_date'])));

				$counted_days = array();
				$dbg_count = array();
				$i = '0';
				$first_flatrate = true;

//				while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
				while($currtime <= $end_time)
				{
					$cur_time_formated = date('Y-m-d', $currtime);

					if(in_array($cur_time_formated, $days_nosapv_overall))
					{
						//increment $counted days
						$counted_days[] = $cur_time_formated;
						$dbg_count[$i][] = $cur_time_formated;
					}
					else
					{
						$dbg_count[$i] = array_diff($dbg_count[$i], $sapv_days_active);
						$dbg_count[$i] = array_diff($dbg_count[$i], $hospital_overall_days);
						$dbg_count[$i] = array_values(array_unique($dbg_count[$i]));

						//remove sapv days from counted days
						$counted_days = array_diff($counted_days, $sapv_days_active);
						$counted_days = array_diff($counted_days, $hospital_overall_days);
						$counted_days = array_values(array_unique($counted_days));


						if($first_flatrate && in_array($cur_time_formated, $sapv_days_active) && !in_array($cur_time_formated, $hospital_overall_days))
						{
							$flatrate_structured['pay_days'][] = $cur_time_formated;

							$fl_start_key = array_search($cur_time_formated, $flatrate_structured['pay_days']);
							$flatrate_structured[$fl_start_key][] = $cur_time_formated;
							$counted_days = array();
							$dbg_count[$i] = array();
							$first_flatrate = false;
							$i++;
						}

						//not found in nosapv days(possible sapv) check if is not hospital
						if(count($counted_days) >= '28' && in_array($cur_time_formated, $sapv_days_active) && !in_array($cur_time_formated, $hospital_overall_days) && in_array($cur_time_formated, $allowed_flatrate_days))
						{
							$flatrate_structured['pay_days'][] = $cur_time_formated;

							//get curent fl start day key
							$fl_start_key = array_search($cur_time_formated, $flatrate_structured['pay_days']);
							$flatrate_structured[$fl_start_key][] = $cur_time_formated;

							//reset counted days
							$counted_days = array();
							$dbg_count[$i] = array();
							$i++;
						}
						else
						{
							$counted_days[] = $cur_time_formated;
							$dbg_count[$i][] = $cur_time_formated;
						}
					}

					$currtime = strtotime('+1 day', $currtime);
				}
			}

			if($_REQUEST['tmp'])
			{
				print_r("DBG CNT:\n");
				print_r($dbg_count);
				exit;
			}


			foreach($flatrate_structured['pay_days'] as $kk_flatrate => $vv_flatrate)
			{
				$start_fl_period_day = $vv_flatrate;
				$i = 0;

				while(count($flatrate_structured[$kk_flatrate]) < '7')
				{
					if(!in_array($start_fl_period_day, $hospital_overall_days) && in_array($start_fl_period_day, $sapv_days_active) && !in_array($start_fl_period_day, $flatrate_structured[$kk_flatrate]))
					{
						$flatrate_structured[$kk_flatrate][] = $start_fl_period_day;
					}
					else
					{
						//make sure we reach 7 elements
						$flatrate_structured[$kk_flatrate][] = $vv_flatrate;
					}
					asort($flatrate_structured[$kk_flatrate]);
					$start_fl_period_day = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day)));
				}
			}

			foreach($flatrate_structured['pay_days'] as $k_flatrate => $v_flatrate)
			{
				$max_flatrate_day[$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

				$flatrate_inperiod['pay_days'][$k_flatrate] = $v_flatrate;
				$flatrate_structured_inperiod['pay_days'][$k_flatrate] = $v_flatrate;

				foreach($flatrate_structured[$k_flatrate] as $k_day_key => $v_day_value)
				{
					if(strtotime($v_day_value) <= $max_flatrate_day[$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
					{
						$flatrate_inperiod[] = $v_day_value;
						$flatrate_structured_inperiod[$k_flatrate][] = $v_day_value;
					}
					else
					{
						$flatrate_inperiod[] = $v_flatrate;
						$flatrate_structured_inperiod[$k_flatrate][] = $v_flatrate;
					}
				}
			}

			//changed flatrate to be continued after a hospital pause
			//L.E: added discharge method dead in hospital check
			//get patients discharge details
			$patient_discharge = PatientDischarge::getPatientDischarge($ipid);
			$discharge_dead_date = '';
			if($patient_discharge)
			{
				//get discharge methods
				$dis = new DischargeMethod();
				$discharge_methods = $dis->getDischargeMethod($clientid, 0);

				foreach($discharge_methods as $k_dis_method => $v_dis_method)
				{
					if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
					{
						$death_methods[] = $v_dis_method['id'];
					}
				}
				$death_methods = array_values(array_unique($death_methods));

				if(in_array($patient_discharge[0]['discharge_method'], $death_methods))
				{
					$discharge_dead_date = date('Y-m-d', strtotime($patient_discharge[0]['discharge_date']));
				}
			}



			foreach($flatrate_structured_inperiod['pay_days'] as $k_fl_per => $v_fl_per)
			{
				$flatrate_inperiod_temp = $flatrate_structured_inperiod[$k_fl_per];
				$flatrate_inperiod_temp = array_values(array_unique($flatrate_inperiod_temp));


				$last_day_flatrate = end($flatrate_inperiod_temp);
				$ts_last_day_flatrate = strtotime($last_day_flatrate);
				$next_flatrate_day = '';
				while(count($flatrate_inperiod_temp) < '7')
				{

					if(strlen($next_flatrate_day) == '0')
					{
						$next_flatrate_day = strtotime('+1 day', $ts_last_day_flatrate);
					}
					else
					{
						$next_flatrate_day = strtotime('+1 day', $next_flatrate_day);
					}

					//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
					if($next_flatrate_day <= strtotime($current_period['end']))
					{
						if(in_array(date('Y-m-d', $next_flatrate_day), $active_days_overall))
						{
							$flatrate_inperiod_temp[] = date('Y-m-d', $next_flatrate_day);
						}
					}
					else
					{
						$flatrate_inperiod_temp[] = $last_day_flatrate; //dummy control
					}
				}

				if(empty($final_flatrate))
				{
					$final_flatrate = array();
				}

				$final_flatrate = array_merge_recursive($final_flatrate, $flatrate_inperiod_temp);
			}

			foreach($final_flatrate as $k_fl_day => $v_fl_day)
			{
				$seached_key = '';
				if(!in_array($v_fl_day, $sapv_days_active))
				{
					$seached_key = array_search($v_fl_day, $final_flatrate);

					if(strlen($seached_key) > '0')
					{
						unset($final_flatrate[$seached_key]);
						array_values($final_flatrate);
					}
				}
			}
//		get back pay days
			$final_flatrate['pay_days'] = $flatrate_structured_inperiod['pay_days'];

			if($_REQUEST['dbq'])
			{
				print_r("allowed_fl_days 2\n");
				print_r($allowed_fl_days);
				print_r("flatrate_final \n");
				print_r($flatrate_days_final);
				print_r("flatrate_structured \n");
				print_r($flatrate_structured);
				print_r("flatrate_in_period \n");
				print_r($flatrate_inperiod);
				print_r("flatrate_in_period structured \n");
				print_r($flatrate_structured_inperiod);
//			print_r("flatrate_starts \n");
//			print_r($flatrate_starts);
				print_r("temp_flatrate");
				print_r($flatrate_inperiod_temp);
				print_r("final fl");
				print_r($final_flatrate);

//			print_r("unset_values \n");
//			print_r($unset_values);

				print_r($sapv_days);
				print_r("Start: \n");
				print_r($start);
				print_r("End: \n");
				print_r($end);
				print_r("Current period: \n");
				print_r($current_period);
				print_r("Active days in period: \n");
				print_r($active_days_overall);
				print_r($final_flatrate);
				print_r($active_days_overall);

				exit;
			}

			return $final_flatrate;
		}

		private function flatrate_days($ipid, $clientid, $start, $end, $current_period, $active_days_overall, $readmission_cycles, $days_nosapv_overall, $hospital_overall_days)
		{
			$patientmaster = new PatientMaster();
			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where("ipid='" . $ipid . "'")
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days))
				{
					$sapv_days = array();
				}
				$sapv_days = array_merge_recursive($s_days, $sapv_days);
			}
			$sapv_days = array_values(array_unique($sapv_days));

			foreach($sapv_days as $k_sapv_day => $v_sapv_day)
			{
				$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
				$curent_start_month = date('Ym', strtotime($current_period['start']));

				//calculate overall
				if(count($flatrate_starts['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall))
				{
					$flatrate_starts['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
				}
			}

			$sapv_days_active = array_intersect($active_days_overall, $sapv_days);
			$sapv_days_active = array_values(array_unique($sapv_days_active));
			asort($sapv_days);

			if($_REQUEST['tmp'])
			{
				print_r("SAPV DAYS active \n");
				print_r($sapv_days_active);

				print_r("SAPV DAYS all \n");
				print_r($sapv_days);
			}

			$sapv_days = array_values($sapv_days);
			$last_sapv_day = $sapv_days_active[0];
			$last_sapv_day_ts = strtotime($last_sapv_day);

			if(count($sapv_days_active) > '0')
			{
				$last_sapv_day = $sapv_days_active[0];
				$last_sapv_day_ts = strtotime($last_sapv_day);

				$currtime = $last_sapv_day_ts;
				$end_time = strtotime(date('Y-m-d', strtotime($readmission_cycles['discharge_date'])));

				$counted_days = array();
				$dbg_count = array();
				$i = '0';
				$first_flatrate = true;

//				while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
				while($currtime <= $end_time)
				{
					$cur_time_formated = date('Y-m-d', $currtime);

					if($first_flatrate &&
						in_array($cur_time_formated, $sapv_days_active) &&
						!in_array($cur_time_formated, $hospital_overall_days) &&
						!in_array($cur_time_formated, $days_nosapv_overall)
					)
					{
						$flatrate_structured['pay_days'][] = $cur_time_formated;

						$fl_start_key = array_search($cur_time_formated, $flatrate_structured['pay_days']);
						$flatrate_structured[$fl_start_key][] = $cur_time_formated;
						$first_flatrate = false;
						$i++;
					}

					$currtime = strtotime('+1 day', $currtime);
				}
			}

			foreach($flatrate_structured['pay_days'] as $kk_flatrate => $vv_flatrate)
			{
				$start_fl_period_day = $vv_flatrate;
				$i = 0;

				while(count($flatrate_structured[$kk_flatrate]) < '7')
				{
					if(!in_array($start_fl_period_day, $hospital_overall_days) && in_array($start_fl_period_day, $sapv_days_active) && !in_array($start_fl_period_day, $flatrate_structured[$kk_flatrate]))
					{
						$flatrate_structured[$kk_flatrate][] = $start_fl_period_day;
					}
					else
					{
						//make sure we reach 7 elements
						$flatrate_structured[$kk_flatrate][] = $vv_flatrate;
					}
					asort($flatrate_structured[$kk_flatrate]);
					$start_fl_period_day = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day)));
				}
			}

			foreach($flatrate_structured['pay_days'] as $k_flatrate => $v_flatrate)
			{
				$max_flatrate_day[$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

				$flatrate_inperiod['pay_days'][$k_flatrate] = $v_flatrate;
				$flatrate_structured_inperiod['pay_days'][$k_flatrate] = $v_flatrate;

				foreach($flatrate_structured[$k_flatrate] as $k_day_key => $v_day_value)
				{
					if(strtotime($v_day_value) <= $max_flatrate_day[$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
					{
						$flatrate_inperiod[] = $v_day_value;
						$flatrate_structured_inperiod[$k_flatrate][] = $v_day_value;
					}
					else
					{
						$flatrate_inperiod[] = $v_flatrate;
						$flatrate_structured_inperiod[$k_flatrate][] = $v_flatrate;
					}
				}
			}

			//changed flatrate to be continued after a hospital pause
			//L.E: added discharge method dead in hospital check
			//get patients discharge details
			$patient_discharge = PatientDischarge::getPatientDischarge($ipid);
			$discharge_dead_date = '';
			if($patient_discharge)
			{
				//get discharge methods
				$dis = new DischargeMethod();
				$discharge_methods = $dis->getDischargeMethod($clientid, 0);

				foreach($discharge_methods as $k_dis_method => $v_dis_method)
				{
					if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
					{
						$death_methods[] = $v_dis_method['id'];
					}
				}
				$death_methods = array_values(array_unique($death_methods));

				if(in_array($patient_discharge[0]['discharge_method'], $death_methods))
				{
					$discharge_dead_date = date('Y-m-d', strtotime($patient_discharge[0]['discharge_date']));
				}
			}



			foreach($flatrate_structured_inperiod['pay_days'] as $k_fl_per => $v_fl_per)
			{
				$flatrate_inperiod_temp = $flatrate_structured_inperiod[$k_fl_per];
				$flatrate_inperiod_temp = array_values(array_unique($flatrate_inperiod_temp));

				$last_day_flatrate = end($flatrate_inperiod_temp);
				$ts_last_day_flatrate = strtotime($last_day_flatrate);
				$next_flatrate_day = '';
				while(count($flatrate_inperiod_temp) < '7')
				{

					if(strlen($next_flatrate_day) == '0')
					{
						$next_flatrate_day = strtotime('+1 day', $ts_last_day_flatrate);
					}
					else
					{
						$next_flatrate_day = strtotime('+1 day', $next_flatrate_day);
					}

					//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
					if($next_flatrate_day <= strtotime($current_period['end']))
					{
						if(in_array(date('Y-m-d', $next_flatrate_day), $active_days_overall))
						{
							$flatrate_inperiod_temp[] = date('Y-m-d', $next_flatrate_day);
						}
					}
					else
					{
						$flatrate_inperiod_temp[] = $last_day_flatrate; //dummy control
					}
				}

				if(empty($final_flatrate))
				{
					$final_flatrate = array();
				}

				$final_flatrate = array_merge_recursive($final_flatrate, $flatrate_inperiod_temp);
			}



			foreach($final_flatrate as $k_fl_day => $v_fl_day)
			{
				$seached_key = '';
				if(!in_array($v_fl_day, $sapv_days_active))
				{
					$seached_key = array_search($v_fl_day, $final_flatrate);

					if(strlen($seached_key) > '0')
					{
						unset($final_flatrate[$seached_key]);
						array_values($final_flatrate);
					}
				}
			}
//		get back pay days
			$final_flatrate['pay_days'] = $flatrate_structured_inperiod['pay_days'];

			
			//period in which the flatrate is not billed
			$excluded_fl_period = Pms_CommonData::exclude_bw_flatrate($ipid);

			if($excluded_fl_period)
			{
				$pre_final_days = $final_flatrate;
				
				unset($pre_final_days['pay_days']);
				
			
				$temp_final_fl['days'] = array_diff($pre_final_days, $excluded_fl_period);
				$temp_final_fl['pay_days'] = array_diff($final_flatrate['pay_days'], $excluded_fl_period);

				
				if(count($temp_final_fl['days'])=='0' || count($temp_final_fl['pay_days'])=='0')
				{
					$final_flatrate = array();
				}		
			}


			if($_REQUEST['dbq'])
			{
				print_r("allowed_fl_days 2\n");
				print_r($allowed_fl_days);
				print_r("flatrate_final \n");
				print_r($flatrate_days_final);
				print_r("flatrate_structured \n");
				print_r($flatrate_structured);
				print_r("flatrate_in_period \n");
				print_r($flatrate_inperiod);
				print_r("flatrate_in_period structured \n");
				print_r($flatrate_structured_inperiod);
//			print_r("flatrate_starts \n");
//			print_r($flatrate_starts);
				print_r("temp_flatrate");
				print_r($flatrate_inperiod_temp);
				print_r("final fl");
				print_r($final_flatrate);

//			print_r("unset_values \n");
//			print_r($unset_values);

				print_r($sapv_days);
				print_r("Start: \n");
				print_r($start);
				print_r("End: \n");
				print_r($end);
				print_r("Current period: \n");
				print_r($current_period);
				print_r("Active days in period: \n");
				print_r($active_days_overall);
				print_r($final_flatrate);
				print_r($active_days_overall);

				exit;
			}
			
			return $final_flatrate;
		}

		private function flatrate_days_continued($ipid, $clientid, $start, $end, $current_period, $active_days_overall, $readmission_cycles, $days_nosapv_overall, $hospital_overall_days, $allowed_flatrate_restart_days = false)
		{

			//days where there is sapv and at least 4w from last product 
//			print_r($allowed_flatrate_restart_days);

			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where("ipid='" . $ipid . "'")
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days))
				{
					$sapv_days = array();
				}
				$sapv_days = array_merge_recursive($s_days, $sapv_days);
			}
			$sapv_days = array_values(array_unique($sapv_days));



			foreach($sapv_days as $k_sapv_day => $v_sapv_day)
			{
				$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
				$curent_start_month = date('Ym', strtotime($current_period['start']));

				//calculate overall
				if(count($flatrate_starts['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall))
				{
					$flatrate_starts['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
				}
			}

			$sapv_days_active = array_intersect($active_days_overall, $sapv_days);
			$sapv_days_active = array_values(array_unique($sapv_days_active));
			asort($sapv_days);

			if($_REQUEST['tmp'])
			{
				print_r("SAPV DAYS active \n");
				print_r($sapv_days_active);

				print_r("SAPV DAYS all \n");
				print_r($sapv_days);
			}

			$sapv_days = array_values($sapv_days);
			$last_sapv_day = $sapv_days_active[0];
			$last_sapv_day_ts = strtotime($last_sapv_day);

			if(count($sapv_days_active) > '0')
			{
				$last_sapv_day = $sapv_days_active[0];
				$last_sapv_day_ts = strtotime($last_sapv_day);

				$currtime = $last_sapv_day_ts;
				$end_time = strtotime(date('Y-m-d', strtotime($readmission_cycles['discharge_date'])));

				$counted_days = array();
				$dbg_count = array();
				$i = '0';
				$first_flatrate = true;

//				while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
				while($currtime <= $end_time)
				{
					$cur_time_formated = date('Y-m-d', $currtime);
					//not found in nosapv days(possible sapv) check if is not hospital
					if(in_array($cur_time_formated, $sapv_days_active) &&
						in_array($cur_time_formated, $allowed_flatrate_restart_days) &&
						!in_array($cur_time_formated, $days_nosapv_overall) &&
						!in_array($cur_time_formated, $hospital_overall_days)
					)
					{
						$flatrate_structured['pay_days'][] = $cur_time_formated;

						//get curent fl start day key
						$fl_start_key = array_search($cur_time_formated, $flatrate_structured['pay_days']);
						$flatrate_structured[$fl_start_key][] = $cur_time_formated;

						//reset counted days
						$counted_days = array();
						$dbg_count[$i] = array();
						$i++;
					}

					$currtime = strtotime('+1 day', $currtime);
				}
			}

			if($_REQUEST['tmp'])
			{
				print_r("DBG CNT:\n");
				print_r($dbg_count);
				exit;
			}


			foreach($flatrate_structured['pay_days'] as $kk_flatrate => $vv_flatrate)
			{
				$start_fl_period_day = $vv_flatrate;
				$i = 0;

				while(count($flatrate_structured[$kk_flatrate]) < '7')
				{
					if(!in_array($start_fl_period_day, $hospital_overall_days) && in_array($start_fl_period_day, $sapv_days_active) && !in_array($start_fl_period_day, $flatrate_structured[$kk_flatrate]))
					{
						$flatrate_structured[$kk_flatrate][] = $start_fl_period_day;
					}
					else
					{
						//make sure we reach 7 elements
						$flatrate_structured[$kk_flatrate][] = $vv_flatrate;
					}
					asort($flatrate_structured[$kk_flatrate]);
					$start_fl_period_day = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day)));
				}
			}

			foreach($flatrate_structured['pay_days'] as $k_flatrate => $v_flatrate)
			{
				$max_flatrate_day[$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

				$flatrate_inperiod['pay_days'][$k_flatrate] = $v_flatrate;
				$flatrate_structured_inperiod['pay_days'][$k_flatrate] = $v_flatrate;

				foreach($flatrate_structured[$k_flatrate] as $k_day_key => $v_day_value)
				{
					if(strtotime($v_day_value) <= $max_flatrate_day[$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
					{
						$flatrate_inperiod[] = $v_day_value;
						$flatrate_structured_inperiod[$k_flatrate][] = $v_day_value;
					}
					else
					{
						$flatrate_inperiod[] = $v_flatrate;
						$flatrate_structured_inperiod[$k_flatrate][] = $v_flatrate;
					}
				}
			}

			//changed flatrate to be continued after a hospital pause
			//L.E: added discharge method dead in hospital check
			//get patients discharge details
			$patient_discharge = PatientDischarge::getPatientDischarge($ipid);
			$discharge_dead_date = '';
			if($patient_discharge)
			{
				//get discharge methods
				$dis = new DischargeMethod();
				$discharge_methods = $dis->getDischargeMethod($clientid, 0);

				foreach($discharge_methods as $k_dis_method => $v_dis_method)
				{
					if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
					{
						$death_methods[] = $v_dis_method['id'];
					}
				}
				$death_methods = array_values(array_unique($death_methods));

				if(in_array($patient_discharge[0]['discharge_method'], $death_methods))
				{
					$discharge_dead_date = date('Y-m-d', strtotime($patient_discharge[0]['discharge_date']));
				}
			}



			foreach($flatrate_structured_inperiod['pay_days'] as $k_fl_per => $v_fl_per)
			{
				$flatrate_inperiod_temp = $flatrate_structured_inperiod[$k_fl_per];
				$flatrate_inperiod_temp = array_values(array_unique($flatrate_inperiod_temp));


				$last_day_flatrate = end($flatrate_inperiod_temp);
				$ts_last_day_flatrate = strtotime($last_day_flatrate);
				$next_flatrate_day = '';
				while(count($flatrate_inperiod_temp) < '7')
				{

					if(strlen($next_flatrate_day) == '0')
					{
						$next_flatrate_day = strtotime('+1 day', $ts_last_day_flatrate);
					}
					else
					{
						$next_flatrate_day = strtotime('+1 day', $next_flatrate_day);
					}

					//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
					if($next_flatrate_day <= strtotime($current_period['end']))
					{
						if(in_array(date('Y-m-d', $next_flatrate_day), $active_days_overall))
						{
							$flatrate_inperiod_temp[] = date('Y-m-d', $next_flatrate_day);
						}
					}
					else
					{
						$flatrate_inperiod_temp[] = $last_day_flatrate; //dummy control
					}
				}

				if(empty($final_flatrate))
				{
					$final_flatrate = array();
				}

				$final_flatrate = array_merge_recursive($final_flatrate, $flatrate_inperiod_temp);
			}

			foreach($final_flatrate as $k_fl_day => $v_fl_day)
			{
				$seached_key = '';
				if(!in_array($v_fl_day, $sapv_days_active))
				{
					$seached_key = array_search($v_fl_day, $final_flatrate);

					if(strlen($seached_key) > '0')
					{
						unset($final_flatrate[$seached_key]);
						array_values($final_flatrate);
					}
				}
			}
//		get back pay days
			$final_flatrate['pay_days'] = $flatrate_structured_inperiod['pay_days'];
			if($_REQUEST['dbqq'])
			{
				print_r("start\n");
				print_r($start);
				print_r("end\n");
				print_r($end);
				print_r("current_period\n");
				print_r($current_period);
				print_r("active_days_overall\n");
				print_r($active_days_overall);
				print_r("readmission_cycles\n");
				print_r($readmission_cycles);
				print_r("days_nosapv_overall\n");
				print_r($days_nosapv_overall);
				print_r("hospital_overall_days\n");
				print_r($hospital_overall_days);
				
				print_r("sapv_days_active\n");
				print_r($sapv_days_active);

				print_r("final_flatrate\n");
				print_r($final_flatrate);

				exit;
			}
			if($_REQUEST['dbq'])
			{
				print_r("allowed_fl_days 2\n");
				print_r($allowed_fl_days);
				print_r("flatrate_final \n");
				print_r($flatrate_days_final);
				print_r("flatrate_structured \n");
				print_r($flatrate_structured);
				print_r("flatrate_in_period \n");
				print_r($flatrate_inperiod);
				print_r("flatrate_in_period structured \n");
				print_r($flatrate_structured_inperiod);
//			print_r("flatrate_starts \n");
//			print_r($flatrate_starts);
				print_r("temp_flatrate");
				print_r($flatrate_inperiod_temp);
				print_r("final fl");
				print_r($final_flatrate);

//			print_r("unset_values \n");
//			print_r($unset_values);

				print_r($sapv_days);
				print_r("Start: \n");
				print_r($start);
				print_r("End: \n");
				print_r($end);
				print_r("Current period: \n");
				print_r($current_period);
				print_r("Active days in period: \n");
				print_r($active_days_overall);
				print_r($final_flatrate);
				print_r($active_days_overall);

				exit;
			}

			
			//period in which the flatrate is not billed
			$excluded_fl_period = Pms_CommonData::exclude_bw_flatrate($ipid);

			if($excluded_fl_period)
			{
				$pre_final_days = $final_flatrate;
				
				unset($pre_final_days['pay_days']);
				
			
				$temp_final_fl['days'] = array_diff($pre_final_days, $excluded_fl_period);
				$temp_final_fl['pay_days'] = array_diff($final_flatrate['pay_days'], $excluded_fl_period);

				
				if(count($temp_final_fl['days'])=='0' || count($temp_final_fl['pay_days'])=='0')
				{
					$final_flatrate = array();
				}		
			}
			
			return $final_flatrate;
		}

		
		private function flatrate_days_continued_saved($ipid, $clientid, $start, $end, $current_period, $active_days_overall, $readmission_cycles, $days_nosapv_overall, $hospital_overall_days, $allowed_flatrate_restart_days = false)
		{

			//days where there is sapv and at least 4w from last product 
// 			print_r($allowed_flatrate_restart_days); exit;

			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where("ipid='" . $ipid . "'")
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days))
				{
					$sapv_days = array();
				}
				$sapv_days = array_merge_recursive($s_days, $sapv_days);
			}
			$sapv_days = array_values(array_unique($sapv_days));



// 			foreach($sapv_days as $k_sapv_day => $v_sapv_day)
// 			{
// 				$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
// 				$curent_start_month = date('Ym', strtotime($current_period['start']));

// 				//calculate overall
// 				if(count($flatrate_starts['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall))
// 				{
// 					$flatrate_starts['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
// 				}
// 			}

			$sapv_days_active = array_intersect($active_days_overall, $sapv_days);
			$sapv_days_active = array_values(array_unique($sapv_days_active));
			asort($sapv_days);

			if($_REQUEST['tmp'])
			{
				print_r("SAPV DAYS active \n");
				print_r($sapv_days_active);

				print_r("SAPV DAYS all \n");
				print_r($sapv_days);
			}

			$sapv_days = array_values($sapv_days);
			$last_sapv_day = $sapv_days_active[0];
			$last_sapv_day_ts = strtotime($last_sapv_day);

			if(count($sapv_days_active) > '0')
			{
				$last_sapv_day = $sapv_days_active[0];
				$last_sapv_day_ts = strtotime($last_sapv_day);

				$currtime = $last_sapv_day_ts;
				$end_time = strtotime(date('Y-m-d', strtotime($readmission_cycles['discharge_date'])));

				$counted_days = array();
				$dbg_count = array();
				$i = '0';
				$first_flatrate = true;

//				while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
				while($currtime <= $end_time)
				{
					$cur_time_formated = date('Y-m-d', $currtime);
					//not found in nosapv days(possible sapv) check if is not hospital
					if(in_array($cur_time_formated, $sapv_days_active) &&
						in_array($cur_time_formated, $allowed_flatrate_restart_days) &&
						!in_array($cur_time_formated, $days_nosapv_overall) &&
						!in_array($cur_time_formated, $hospital_overall_days)
					)
					{
						$flatrate_structured['pay_days'][] = $cur_time_formated;

						//get curent fl start day key
						$fl_start_key = array_search($cur_time_formated, $flatrate_structured['pay_days']);
						$flatrate_structured[$fl_start_key][] = $cur_time_formated;

						//reset counted days
						$counted_days = array();
						$dbg_count[$i] = array();
						$i++;
					}

					$currtime = strtotime('+1 day', $currtime);
				}
			}

// 			print_r($flatrate_structured); exit;
			
			if($_REQUEST['tmp'])
			{
				print_r("DBG CNT:\n");
				print_r($dbg_count);
				exit;
			}


			foreach($flatrate_structured['pay_days'] as $kk_flatrate => $vv_flatrate)
			{
				$start_fl_period_day = $vv_flatrate;
				$i = 0;

				while(count($flatrate_structured[$kk_flatrate]) < '7')
				{
					if(!in_array($start_fl_period_day, $hospital_overall_days) && in_array($start_fl_period_day, $sapv_days_active) && !in_array($start_fl_period_day, $flatrate_structured[$kk_flatrate]))
					{
						$flatrate_structured[$kk_flatrate][] = $start_fl_period_day;
					}
					else
					{
						//make sure we reach 7 elements
						$flatrate_structured[$kk_flatrate][] = $vv_flatrate;
					}
					asort($flatrate_structured[$kk_flatrate]);
					$start_fl_period_day = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day)));
				}
			}

			foreach($flatrate_structured['pay_days'] as $k_flatrate => $v_flatrate)
			{
				$max_flatrate_day[$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

				$flatrate_inperiod['pay_days'][$k_flatrate] = $v_flatrate;
				$flatrate_structured_inperiod['pay_days'][$k_flatrate] = $v_flatrate;

				foreach($flatrate_structured[$k_flatrate] as $k_day_key => $v_day_value)
				{
					if(strtotime($v_day_value) <= $max_flatrate_day[$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
					{
						$flatrate_inperiod[] = $v_day_value;
						$flatrate_structured_inperiod[$k_flatrate][] = $v_day_value;
					}
					else
					{
						$flatrate_inperiod[] = $v_flatrate;
						$flatrate_structured_inperiod[$k_flatrate][] = $v_flatrate;
					}
				}
			}

			//changed flatrate to be continued after a hospital pause
			//L.E: added discharge method dead in hospital check
			//get patients discharge details
			$patient_discharge = PatientDischarge::getPatientDischarge($ipid);
			$discharge_dead_date = '';
			if($patient_discharge)
			{
				//get discharge methods
				$dis = new DischargeMethod();
				$discharge_methods = $dis->getDischargeMethod($clientid, 0);

				foreach($discharge_methods as $k_dis_method => $v_dis_method)
				{
					if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
					{
						$death_methods[] = $v_dis_method['id'];
					}
				}
				$death_methods = array_values(array_unique($death_methods));

				if(in_array($patient_discharge[0]['discharge_method'], $death_methods))
				{
					$discharge_dead_date = date('Y-m-d', strtotime($patient_discharge[0]['discharge_date']));
				}
			}



			foreach($flatrate_structured_inperiod['pay_days'] as $k_fl_per => $v_fl_per)
			{
				$flatrate_inperiod_temp = $flatrate_structured_inperiod[$k_fl_per];
				$flatrate_inperiod_temp = array_values(array_unique($flatrate_inperiod_temp));


				$last_day_flatrate = end($flatrate_inperiod_temp);
				$ts_last_day_flatrate = strtotime($last_day_flatrate);
				$next_flatrate_day = '';
				while(count($flatrate_inperiod_temp) < '7')
				{

					if(strlen($next_flatrate_day) == '0')
					{
						$next_flatrate_day = strtotime('+1 day', $ts_last_day_flatrate);
					}
					else
					{
						$next_flatrate_day = strtotime('+1 day', $next_flatrate_day);
					}

					//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
					if($next_flatrate_day <= strtotime($current_period['end']))
					{
						if(in_array(date('Y-m-d', $next_flatrate_day), $active_days_overall))
						{
							$flatrate_inperiod_temp[] = date('Y-m-d', $next_flatrate_day);
						}
					}
					else
					{
						$flatrate_inperiod_temp[] = $last_day_flatrate; //dummy control
					}
				}

				if(empty($final_flatrate))
				{
					$final_flatrate = array();
				}

				$final_flatrate = array_merge_recursive($final_flatrate, $flatrate_inperiod_temp);
			}

			foreach($final_flatrate as $k_fl_day => $v_fl_day)
			{
				$seached_key = '';
				if(!in_array($v_fl_day, $sapv_days_active))
				{
					$seached_key = array_search($v_fl_day, $final_flatrate);

					if(strlen($seached_key) > '0')
					{
						unset($final_flatrate[$seached_key]);
						array_values($final_flatrate);
					}
				}
			}
//		get back pay days
			$final_flatrate['pay_days'] = $flatrate_structured_inperiod['pay_days'];
			if($_REQUEST['dbqq'])
			{
				print_r("start\n");
				print_r($start);
				print_r("end\n");
				print_r($end);
				print_r("current_period\n");
				print_r($current_period);
				print_r("active_days_overall\n");
				print_r($active_days_overall);
				print_r("readmission_cycles\n");
				print_r($readmission_cycles);
				print_r("days_nosapv_overall\n");
				print_r($days_nosapv_overall);
				print_r("hospital_overall_days\n");
				print_r($hospital_overall_days);
				
				print_r("sapv_days_active\n");
				print_r($sapv_days_active);

				print_r("final_flatrate\n");
				print_r($final_flatrate);

				exit;
			}
			if($_REQUEST['dbq'])
			{
				print_r("allowed_fl_days 2\n");
				print_r($allowed_fl_days);
				print_r("flatrate_final \n");
				print_r($flatrate_days_final);
				print_r("flatrate_structured \n");
				print_r($flatrate_structured);
				print_r("flatrate_in_period \n");
				print_r($flatrate_inperiod);
				print_r("flatrate_in_period structured \n");
				print_r($flatrate_structured_inperiod);
//			print_r("flatrate_starts \n");
//			print_r($flatrate_starts);
				print_r("temp_flatrate");
				print_r($flatrate_inperiod_temp);
				print_r("final fl");
				print_r($final_flatrate);

//			print_r("unset_values \n");
//			print_r($unset_values);

				print_r($sapv_days);
				print_r("Start: \n");
				print_r($start);
				print_r("End: \n");
				print_r($end);
				print_r("Current period: \n");
				print_r($current_period);
				print_r("Active days in period: \n");
				print_r($active_days_overall);
				print_r($final_flatrate);
				print_r($active_days_overall);

				exit;
			}

			
			//period in which the flatrate is not billed
			$excluded_fl_period = Pms_CommonData::exclude_bw_flatrate($ipid);

			if($excluded_fl_period)
			{
				$pre_final_days = $final_flatrate;
				
				unset($pre_final_days['pay_days']);
				
			
				$temp_final_fl['days'] = array_diff($pre_final_days, $excluded_fl_period);
				$temp_final_fl['pay_days'] = array_diff($final_flatrate['pay_days'], $excluded_fl_period);

				
				if(count($temp_final_fl['days'])=='0' || count($temp_final_fl['pay_days'])=='0')
				{
					$final_flatrate = array();
				}		
			}
			
			return $final_flatrate;
		}

		private function flatrate_days_old($ipid, $start, $end, $current_period, $active_days_in_period)
		{
			$patientmaster = new PatientMaster();

			foreach($start as $k_start => $v_start)
			{
				$drop = Doctrine_Query::create()
					->select('*')
					->from('SapvVerordnung')
					->where("ipid='" . $ipid . "'")
					->andWhere('isdelete=0')
					->andWhere("status != 1")
					->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
					->andWhere('"' . date('Y-m-d', strtotime($v_start)) . '" <= DATE(verordnungbis)')
					->andWhere('"' . date('Y-m-d', strtotime($end[$k_start])) . '" >= DATE(verordnungam)')
					->andWhere('verordnungam != "0000-00-00 00:00:00"')
					->andWhere('verordnungbis != "0000-00-00 00:00:00"')
					->orderBy("verordnungam ASC")
					->limit('1');

				$res = $drop->fetchArray();

				if($res)
				{
					$start_vv = date('Y-m-d', strtotime($res[0]['verordnungam']));
					$next_week = strtotime('+6 days', strtotime($start_vv));
					$max_end = date('Y-m-d', $next_week);


					if(strtotime($max_end) > strtotime($current_period['end']))
					{
						$max_end = date('Y-m-d', strtotime($current_period['end']));
					}

					if(strtotime($max_end) > strtotime($res[0]['verordnungbis']))
					{
						$max_end = date('Y-m-d', strtotime($res[0]['verordnungbis']));
					}

					$fl_days = $patientmaster->getDaysInBetween($start_vv, $max_end);
					if(empty($flatrate_days))
					{
						$flatrate_days = array();
					}

					$flatrate_days = array_merge_recursive($fl_days, $flatrate_days);

					if(date('Ym', strtotime($res[0]['verordnungam'])) == date('Ym', strtotime($current_period['start'])))
					{
						$flatrate_days['pay_days'][] = $start_vv;
						$flatrate_days[] = $start_vv;
					}
				}
			}

			$flatrate_inperiod = array();
			foreach($flatrate_days as $k_flatrate => $v_flatrate)
			{
				if(in_array($v_flatrate, $active_days_in_period) && $k_flatrate != 'pay_days')
				{
					$flatrate_inperiod[] = $v_flatrate;
				}
			}

			foreach($flatrate_days['pay_days'] as $k_pay_day => $v_pay_day)
			{
				if(in_array($v_pay_day, $active_days_in_period))
				{
					$flatrate_inperiod['pay_days'][] = $v_pay_day;
				}
			}

			return $flatrate_inperiod;
		}

		private function get_period_months($date1, $date2, $format = "Ym")
		{
			$time1 = strtotime(date('Y-m', strtotime($date1) . "-01")); //
			$time2 = strtotime($date2);
			$my = date('mY', $time2);

			while($time1 < $time2)
			{
				if(!in_array(date($format, $time1), $months))
				{
					$months[] = date($format, $time1);
				}
				$time1 = strtotime(' +1 month', $time1);
			}

			if(!in_array(date($format, $time2), $months))
			{
				$months[] = date($format, $time2);
			}
			return $months;
		}

		private function generate_pdf($post_data, $pdfname, $filename, $orientation = false, $background_pages = false)
		{
// 			print_r(func_get_args());
// 			die();
			$pdf_names = array(
				// "forms" - from patient menu
				'PerformancePdf' => 'Formular SAPV Leistungsnachweis',
				'form_performance_items_pdf' => 'Formular SAPV Leistungsnachweis',
				'SocialcodePdf' => 'Formular SGB V Abrechnung',
				'MedipumpsControl' => 'Formular Medikamenten Pumpen',
				// invoices
				'PerformancePdfs' => 'SAPV Leistungsnachweis Rechnung',
				'PerformancePdf_invoice_items' => 'SAPV Leistungsnachweis Rechnung',
				'SocialcodePdfs' => 'SGB V Abrechnung Rechnung',
				'MedipumpsControlPdfs' => 'Medikamenten Pumpen Rechnung ',
				'InvoiceJournal' => 'Rechnungsausgangsjournal',
			    //ISPC-2424
			    'InvoiceJournal_sh' => 'Rechnungsausgangsjournal SH',
				'HeInvoice' => 'Hessen Rechnung',
				'BayernPdf' => 'Bayern Rechnung',
				'SGB_XI' => 'SGB XI',
				'rpinvoice' => 'RP - Abrechnung',
				'rpperformancerecord' => 'RP - Leistungsübersicht',
				'BreHospizSapvPerformanceInvoice' => 'BRE Hospiz Rechnung'
			);

			if($pdfname == 'HeInvoice' || $pdfname == 'PerformancePdfs'  || $pdfname == 'PerformancePdf_invoice_items' || $pdfname == 'BayernPdf' ||    $pdfname == 'SocialcodePdfs' || $pdfname == 'SGB_XI' || $pdfname == 'MedipumpsControlPdfs' )
			{

				if(strlen($post_data['address']) > 0)
				{
				    if(strpos($post_data['address'],"style"))
				    {
				        $post_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $post_data['address']);
				    }
				    
					$post_data['address'] = str_replace(array("<p>","<p >"), "", $post_data['address']);
					$post_data['address'] = str_replace("</p>", "", $post_data['address']);
					$post_data['address'] = str_replace("\n", "<br/>", $post_data['address']);
				}
			}
			if( $pdfname == 'PerformancePdfs' || $pdfname == 'PerformancePdf_invoice_items' || $pdfname == 'SocialcodePdfs'  || $pdfname == 'SGB_XI'  || $pdfname == 'MedipumpsControlPdfs' )
			{

				if(strlen($post_data['hi_subdiv_address']) > 0)
				{
				    if(strpos($post_data['hi_subdiv_address'],"style"))
				    {
				        $post_data['hi_subdiv_address'] = preg_replace('/style=\"(.*)\"/i', '', $post_data['hi_subdiv_address']);
				    }
				    
					$post_data['hi_subdiv_address'] = str_replace(array("<p>","<p >"), "", $post_data['hi_subdiv_address']);
					$post_data['hi_subdiv_address'] = str_replace("</p>", "", $post_data['hi_subdiv_address']);
					$post_data['hi_subdiv_address'] = str_replace("\n", "<br/>", $post_data['hi_subdiv_address']);
				}

				if(strlen($post_data['patient_address']) > 0)
				{
				    if(strpos($post_data['patient_address'],"style"))
				    {
				        $post_data['patient_address'] = preg_replace('/style=\"(.*)\"/i', '', $post_data['patient_address']);
				    }
				    
					$post_data['patient_address'] = str_replace(array("<p>","<p >"), "", $post_data['patient_address']);
					$post_data['patient_address'] = str_replace("</p>", "", $post_data['patient_address']);
					$post_data['patient_address'] = str_replace("\n", "<br/>", $post_data['patient_address']);
				}
			}
			

			if(is_array($filename))
			{
				foreach($filename as $k_file => $v_file)
				{
					$htmlform[$k_file] = Pms_Template::createTemplate($post_data, 'templates/' . $v_file);
					$html[$k_file] = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform[$k_file]);
				}
			}
			else
			{
				$htmlform = Pms_Template::createTemplate($post_data, 'templates/' . $filename);
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
			}

			if($pdfname == 'PerformancePdfs')
			{
				$pdf_type = '19';
			}
			
			elseif($pdfname == 'PerformancePdf_invoice_items')
			{
				$pdf_type = '19';
			}
			else if($pdfname == 'SocialcodePdfs')
			{
				$pdf_type = '22';
			}
			else if($pdfname == 'MedipumpsControlPdfs')
			{
				$pdf_type = '35';
			}
			else if($pdfname == 'HeInvoice')
			{
				$pdf_type = '36';
			}
			else if($pdfname == 'BayernPdf')
			{
				$pdf_type = '37';
			}
			else if($pdfname == 'SGB_XI')
			{
				$pdf_type = '38';
			}
			else if($pdfname == 'rpinvoice')
			{
				$pdf_type = '48';
			}
			else if($pdfname == 'BreHospizSapvPerformanceInvoice')
			{
				$pdf_type = '52';
			}
			
			else if($pdfname == 'InvoiceJournal_sh')
			{
				$pdf_type = '73';
			}
			//TODO-3799 Ancuta 01.02.2021
			else if($pdfname == 'BayernPdf')
			{
			    $pdf_type = '37';
			}
			// ---
		

			$pdf = new Pms_PDF('L', 'mm', 'A4', true, 'UTF-8', false);
			$pdf->setDefaults(true); //defaults with header
// 			$pdf->setDefaults(true,$orientation,$bottom_margin); //defaults with header
			$pdf->setImageScale(1.6);
			if($pdfname != 'PerformancePdf_invoice_items' && $pdfname != 'form_performance_items_pdf' && $pdfname != 'RP_invoice_items'){
    			$pdf->SetFont('dejavusans', '', 10);
			}
			if($pdfname == 'PerformancePdf_invoice_items'){
			    $pdf->SetFont('', '', 10);
			}
			if($pdfname == 'form_performance_items_pdf'){
			    $pdf->SetFont('', '', 10);
			}
				
			$pdf->SetMargins(6, 5, 10); //reset margins
			$pdf->setPrintFooter(false); // remove black line at bottom
			$pdf->SetAutoPageBreak(TRUE, 10);

			if($pdfname == 'HeInvoice')
			{
				$pdf->firstpagebackground = true; // set pdf background only for the first page
				$pdf->SetMargins(6, 20, 10); //reset margins
				$pdf->SetAutoPageBreak(TRUE, 30);
			}
			else if($pdfname == 'HeInvoice')
			{
				$pdf->firstpagebackground = true; // set pdf background only for the first page
			}
			else if($pdfname == 'rpinvoice')
			{
//				$pdf->firstpagebackground = true;
				$pdf->SetMargins(28, 18, 28);
//				$pdf->SetAutoPageBreak(TRUE, 30);
			}
			else if($pdfname == 'RP_invoice_items')
			{
//				$pdf->firstpagebackground = true;
// 				$pdf->SetMargins(28, 18, 28);
				$pdf->SetMargins(10, 5, 10);
//				$pdf->SetAutoPageBreak(TRUE, 30);
			}
			else if($pdfname == 'PerformancePdf_invoice_items')
			{
				$pdf->SetMargins(10, 5, 10);
			}
			else if($pdfname == 'form_performance_items_pdf')
			{
				$pdf->SetMargins(10, 5, 10);
			}
			elseif( $pdfname == 'rpperformancerecord')
			{
				$pdf->SetAutoPageBreak(TRUE, 1);
			}

			if($pdfname == 'InvoiceJournal')
			{
				if(strlen($post_data['start_date']) == 0)
				{
					//get current month default
					$post_data['start_date'] = date('Y-m-', time()) . '01';
					$post_data['end_date'] = date('Y-m-', time()) . date('t', time());
				}
				$pdf->SetMargins(10, 40, 10);
				$pdf->SetHeaderMargin(5);

				$header_text = '<table width="890" border="0">
                        		<tr>
                        			<td style="font-size: 14;" colspan="6"><strong>Rechnungsausgangsjournal</strong></td>
                        			<td style="font-size: 9;font-weight: bold;text-align: right;" colspan="2">' . $post_data['clientinfo']['client_name'] . '</td>
                        		</tr>
                        		<tr>
                        			<td style="font-size: 9;" colspan="2">Auswertung nach:</td>
                        			<td style="font-size: 9;font-weight: bold;text-align: left;" colspan="2">Rechnungsdatum</td>
                        			<td></td>
                        			<td></td>
                        			<td style="font-size: 9;font-weight: bold;text-align: right;" colspan="2"></td>
                        		</tr>
                        		<tr>
                        			<td style="font-size: 9;" colspan="2">Sortiert nach:</td>
                        			<td style="font-size: 9;font-weight: bold;" colspan="2">' . $this->view->translate($post_data['j_sortby']) . '</td>
                        			<td></td>
                        			<td></td>
                        			<td style="font-size: 9;font-weight: bold;text-align: right;" colspan="2">' . $post_data['clientinfo']['street1'] . $post_data['clientinfo']['street2'] . '</td>
                        		</tr>
                        		<tr>
                        			<td style="font-size: 9;" colspan="2">Zeitraum:</td>
                        			<td style="font-size: 9;font-weight: bold;" colspan="2">' . date('d.m.Y', strtotime($post_data['start_date'])) . ' - ' . date('d.m.Y', strtotime($post_data['end_date'])) . '</td>
                        			<td></td>
                        			<td></td>
                        			<td style="font-size: 9;font-weight: bold;text-align: right;" colspan="2">' . $post_data['clientinfo']['city'] . '</td>
                        		</tr>
                        		<tr>
                        			<td style="font-size: 9;" colspan="2">Druckdatum:</td>
                        			<td style="font-size: 9;font-weight: bold;" colspan="2">' . date('d.m.Y H:i', time()) . '</td>
                        			<td></td>
                        			<td></td>
                        			<td style="font-size: 9;" colspan="2"></td>
                        		</tr>
                        		<tr>
                        			<td style="font-size: 9;" colspan="2">Seite:</td>
                        			<td style="font-size: 9;font-weight: bold;text-align: left;" colspan="2">' . $pdf->getAliasNumPage() . '</td>
                        			<td></td>
                        			<td></td>
                        			<td style="font-size: 9;font-weight: bold;text-align: right;" colspan="2">IK: ' . $post_data['clientinfo']['institutskennzeichen'] . '</td>
                        		</tr>
                        
                        </table>';

// 				$pdf->setHeaderFont(Array('arial', '', 11));
				$pdf->setHeaderFont(Array('dejavusans', '', 11));
				$pdf->HeaderText = $header_text;
			}

//ISPC-2424
			if($pdfname == 'InvoiceJournal_sh')
			{
			    if(strlen($post_data['start_date']) == 0)
			    {
			        //get current month default
			        $post_data['start_date'] = date('Y-m-', time()) . '01';
			        $post_data['end_date'] = date('Y-m-', time()) . date('t', time());
			    }
			    $pdf->SetMargins(10, 45, 10);
			    $pdf->SetHeaderMargin(17);
			    
			    $header_text = '<table width="960" >
	                            <tr>
                        			<td style="font-size: 18;font-weight: bold; color: #6d6d6d; " colspan="3">FIBU Protokoll</td>
                        			<td style="font-size: 12;" colspan="4">' . date('d.m.Y', strtotime($post_data['start_date'])) . ' - ' . date('d.m.Y', strtotime($post_data['end_date'])) . '</td>
                        			<td style="width:180;color: #f2f2f2;font-weight: bold;text-align: right;"  >
                                        <font size="12">' . $pdf->getAliasNumPage() . '</font><br/>
                                        <font size="9">von ' . $pdf->getAliasNbPages() . '</font>
                                    </td>
                                    <td></td>
                        		</tr>

                         
                        		<tr>
                                    <td   colspan="9" > </td>
                                </tr>
                        		<tr>
                        			<td style="font-size: 9;font-weight: bold;" colspan="4">Team ' . $post_data['clientinfo']['team_name'] . '</td>
                        			<td></td>
                        			<td></td>
                                    <td   colspan="3" > </td>
                                </tr>

                        		<tr>
                        			<td style="font-size: 9;font-weight: bold;  color: #6c6c6c;" colspan="4">Fibu-Datei vom ' . date('d.m.Y H:i', time()) . '</td>
                        		</tr>
                      			    
                        </table>';
// 			    echo $header_text; exit;
			    // 				$pdf->setHeaderFont(Array('arial', '', 11));
			    $pdf->setHeaderFont(Array('dejavusans', '', 11));
			    $pdf->HeaderText = $header_text;
			}
			
			if($pdfname == 'PerformancePdf_invoice_items')
			{
			    $pdf->SetAutoPageBreak(TRUE, 35);
			    
			   $pdf->setFooterFont(Array('helvetica', '', 7));

			   $pdf->no_first_page_invoice_footer = true; //remove footer from the first page 
			   
			   $pdf->invoice_footer = true; // set special footer
			   $footer_text = '<table width="100%">
                                	<tr>
                                		<td width="45%">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                                		<td width="10%"></td>
                                		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                                	</tr>
                                	<tr>
                                        <td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td></td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Verantwortlicher Leistungserbinger PCT</td>
                                		<td></td>
                                		<td>Versicherter / Bezugsperson</td>
                                	</tr>
                                    <tr>
                                		<td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                		<td></td>
                                		<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                	</tr>
                                </table>'; 
			   
			   
    		   $pdf->footer_text = $footer_text; // set pdf background only for the first page
			   $pdf->setPrintFooter(true); // remove black line at bottomC
			}
			if($pdfname == 'form_performance_items_pdf')
			{
			    
			   $pdf->setFooterFont(Array('helvetica', '', 7));
// 			   $pdf->firstpagebackground = false; // set pdf background only for the first page
			   $pdf->invoice_footer = true; // set special footer
			   $footer_text = '<table width="100%">
                                	<tr>
                                		<td width="45%">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                                		<td width="10%"></td>
                                		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                                	</tr>
                                	<tr>
                                        <td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td></td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Verantwortlicher Leistungserbinger PCT</td>
                                		<td></td>
                                		<td>Versicherter / Bezugsperson</td>
                                	</tr>
                                    <tr>
                                		<td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                		<td></td>
                                		<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                	</tr>
                                </table>'; 
			   
			   
    		   $pdf->footer_text = $footer_text; // set pdf background only for the first page
			   $pdf->setPrintFooter(true); // remove black line at bottomC
			}
			if($pdfname == 'PerformancePdf') //ISPC-2187
			{
				$pdf->setPrintFooter(true);
				//$pdf->SetMargins(10, 5, 10); //reset margins > ace3stea sunt necesare? le-am lasat pt ca dadea exemplu rooster si am zis sa fie poz la fel
				$pdf->footer_text = $this->view->translate("This certificate of achievement was printed on"). " " . date("d.m.Y");
				$pdf->setFooterType('1 of n date');
			}
			
			if($pdfname == 'PerformancePdfs')//ISPC-2187
			{
				$pdf->setPrintFooter(true);
				//$pdf->SetMargins(10, 5, 10); //reset margins
				$pdf->footer_text = $this->view->translate("This certificate of achievement was printed on"). " " . date("d.m.Y");
				$pdf->setFooterType('1 of n date');
			}
			
			// ISPC-1603
			if($pdfname == 'RP_invoice_items')
			{
			    $pdf->SetAutoPageBreak(TRUE, 35);
			    
			   $pdf->setFooterFont(Array('helvetica', '', 7));

			   $pdf->no_first_page_invoice_footer = true; //remove footer from the first page 
			   
			   $pdf->invoice_footer = true; // set special footer
			   $footer_text = '<table width="100%">
                                	<tr>
                                		<td width="45%">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                                		<td width="10%"></td>
                                		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                                	</tr>
                                	<tr>
                                        <td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td></td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Verantwortlicher Leistungserbinger PCT</td>
                                		<td></td>
                                		<td>Versicherter / Bezugsperson</td>
                                	</tr>
                                    <tr>
                                		<td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                		<td></td>
                                		<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                	</tr>
                                </table>'; 
			   
			   
    		   $pdf->footer_text = $footer_text; // set pdf background only for the first page
			   $pdf->setPrintFooter(true); // remove black line at bottomC
			}
			

			//set page background for a defined page key in $background_pages array
			$bg_image = Pms_CommonData::getPdfBackground($post_data['clientid'], $pdf_type);
			if($bg_image !== false)
			{
				$bg_image_path = PDFBG_PATH . '/' . $post_data['clientid'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
				if(is_file($bg_image_path))
				{
					$pdf->setBackgroundImage($bg_image_path);
				}
			}

 //			print_r($html);exit;

			if(is_array($html))
			{
				foreach($html as $k_html => $v_html)
				{
					if(is_array($orientation))
					{
						if(is_array($background_pages))
						{
							if(!in_array($k_html, $background_pages))
							{
								//unset page background for a nondefined page key in $background_pages array
								$pdf->setBackgroundImage();
							}
						}
						//each page has it`s own orientation
						$pdf->setHTML($v_html, $orientation[$k_html]);
					}
					else
					{
						//all pages one custom orientation
						$pdf->setHTML($v_html, $orientation);
					}
				}
			}
			else
			{
				if(empty($background_pages) && is_file($bg_image_path))
				{
					$pdf->setBackgroundImage($bg_image_path);
				}
				
				$pdf->setHTML($html, $orientation);
			}

			

		    //$tmpstmp = substr(md5(time() . rand(0, 999)), 0, 12);
		    //mkdir('uploads/' . $tmpstmp);
		    $tmpstmp = $pdf->uniqfolder(PDF_PATH);
			   
			if($post_data['bulk_print'] == 1){

			    $invoice_number_full="";
			    $invoice_number_full .=  (strlen($post_data['prefix']) > 0) ? $post_data['prefix'] : '';
			    $invoice_number_full .= $post_data['invoice_number'];
			    
			    $pdfname_inv = $pdfname;
			    if(strlen($invoice_number_full) > 0 ){
			        $pdfname_inv = $pdfname.'_'.$invoice_number_full;
			    }
// 			    $source_path = PDF_PATH . '/' . $tmpstmp . '/' . $pdfname_inv . '.pdf';
			    			    
// 			    $pdf->toFile($source_path);
			    
			    
			    $batch_temp_folder = $post_data['batch_temp_folder'];
 
			    if(!is_dir(PDFDOCX_PATH))
			    {
			        while(!is_dir(PDFDOCX_PATH))
			        {
			            mkdir(PDFDOCX_PATH);
			            if($i >= 50)
			            {
			                //exit; //failsafe
			                break;
			            }
			            $i++;
			        }
			    }
			    
			    if(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid']))
			    {
			        while(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid']))
			        {
			            mkdir(PDFDOCX_PATH . '/' . $post_data['clientid']);
			            if($i >= 50)
			            {
			                //exit; //failsafe
			                break;
			            }
			            $i++;
			        }
			    }
			    
			    
			    
			    if(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder))
			    {
			        while(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder))
			        {
			            mkdir(PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder);
			            if($i >= 50)
			            {
			                exit; //failsafe
			            }
			            $i++;
			        }
			    }
			    
			    
			    $destination_path = PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder . '/pdf_invoice_' . $post_data['unique_id'].'.pdf';
			    
			    $pdf->toFile($destination_path);
			    
// 			    $destination_path = '/home/www/ispc20172/public/pdfdocx_files/70/338_bw_sapv_invoice_3/pdf_invoice_6295.pdf';
// 			    copy($source_path, $destination_path);
			    return $destination_path;
			    
			} else {
			    
			    $pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
			}
			
			
			
			
			
			
			$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 			$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 			exec($cmd);
			$zipname = $tmpstmp . ".zip";
			$filename = "uploads/" . $tmpstmp . ".zip";
			/*
			$con_id = Pms_FtpFileupload::ftpconnect();
			if($con_id)
			{
				$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
				Pms_FtpFileupload::ftpconclose($con_id);
			}
			*/
				
			
			if($pdfname == 'PerformancePdf' || $pdfname == 'PerformancePdfs'  || $pdfname == 'PerformancePdf_invoice_items'   || $pdfname == 'form_performance_items_pdf' )
			{
				$tabname = 'sapvinvoice';
			}
			else if($pdfname == 'SocialcodePdf' || $pdfname == 'SocialcodePdfs')
			{
				$tabname = 'sgbvinvoice';
			}
			else if($pdfname == 'InvoiceJournal')
			{
				$tabname = 'invoicejournal';
			}
			else if($pdfname == 'HeInvoice')
			{
				$tabname = 'heinvoice';
			}
			else if($pdfname == 'BayernPdf')
			{
				$tabname = 'bayerninvoice';
			}

			if(
				$pdfname == 'PerformancePdf' ||
// 				$pdfname == 'form_performance_items_pdf' ||
				$pdfname == 'SocialcodePdf' ||
				$pdfname == 'MedipumpsControl')
			{
				$patient_file = '1';
			}
			else
			{
				$patient_file = '0';
			}

			if($patient_file == "1")
			{// No invoice should go to patient files
				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $post_data['ipid'];
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->tabname = $tabname;
				$cust->save();
				$file_id = $cust->id;

				if(
				    $pdfname == "PerformancePdf" || 
				    $pdfname == "SocialcodePdf" 
// 				    ||  $pdfname == "form_performance_items_pdf"
				    )
				{
					//insert system file tags
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id, array('6'));
				}
				
				//upload to ftp
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				
			}

			ob_end_clean();
			ob_start();

			// ISPC-2472 @Ancuta 07.11.2019
			// THIS AFFECTS ALL INVOICES THAT USE THIS FUNCTION
			$invoice_number_full="";
			$invoice_number_full .=  (strlen($post_data['prefix']) > 0) ? $post_data['prefix'] : '';
			$invoice_number_full .= $post_data['invoice_number'];
			
			if(strlen($invoice_number_full) > 0 ){
			    $pdfname = $invoice_number_full;
			}
			// --
			    
			$pdf->toBrowser($pdfname . '.pdf', 'D');
			exit;
		}

//	BW Invoices
		public function bwinvoicesAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			
			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$bw_invoices = new BwInvoices();
			$bw_invoices_items = new BwInvoiceItems();
			$bw_invoices_form = new Application_Form_BwInvoices();

			
			
			//ISPC-2609 Ancuta 24.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "bw_sapv_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';

			if(count($invoice_user_printjobs) > 1 ){
			    echo $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			

			if($this->getRequest()->isPost())
			{

				if($_POST['draftmore'] == "1")
				{
					$transform = $bw_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $bw_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				elseif($_POST['warningmore'] == "1")
				{
					
					$invoiceids_to_warn = implode(',', $_POST['document']);
				
					$this->forward('generatereminderinvoice', 'Invoicenew', null, array());
				
					return;
				}
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				elseif($_POST['batch_print_more'])
				{
				    $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
				    $params['batch_print'] = '1'; //enables batch print procedure
				    $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
				    $params['get_pdf'] = '0'; //stops downloading single pdf
				    
				    //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
				    if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
				        
				        
				        
				    } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
				        
				        $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020

				        $print_job_data = array();
				        $print_job_data['clientid'] = $clientid;
				        $print_job_data['user'] = $userid;
				        $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
				        $print_job_data['output_type'] = 'pdf';
				        $print_job_data['status'] = 'active';
				        $print_job_data['invoice_type'] = 'bw_sapv_invoice';
				        $print_job_data['print_params'] = serialize($params);
				        $print_job_data['print_function'] = 'performancerecordAction';
				        $print_job_data['print_controller'] = $this->getRequest()->getControllerName();
				        
				        foreach($_POST['document'] as $k=>$inv_id){
				            $print_job_data['PrintJobsItems'][] = array(
				                'clientid'=>$print_job_data['clientid'],
				                'user'=>$print_job_data['user'],
				                'invoice_id'=>$inv_id,
				                'invoice_type'=>$print_job_data['invoice_type'],
				                'status'=>"new"
				            );
				        }
				        
				        $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
				        $print_id = $PrintJobsBulk_obj->id;
				        
				        if($print_id){
				           $this->__StartPrintJobs();
				        }
				    }
				    
				}
				else
				{
					$new_payment = $bw_invoices_form->submit_payment($_POST);
				}
				
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				$msg="";
				if($print_id){
				    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				}
				$this->_redirect(APP_BASE . 'invoice/bwinvoices'.$msg); //to avoid resubmission
				//$this->_redirect(APP_BASE . 'invoice/bwinvoices'); //to avoid resubmission
				//--
				
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$clone_record = $bw_invoices->create_storno_invoice($invoiceid);
					$this->_redirect(APP_BASE . 'invoice/bwinvoices?flg=suc');
					exit;
				}
			}


			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $bw_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/bwinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/bwinvoices?flg=delerr');
				}
			}




			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("89", $clientid)) // change tab name
			{
				$this->view->change_tab_name = 1;
			}
			else
			{
				$this->view->change_tab_name = 0;
			}
			
		}

		public function fetchbwinvoicelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$bw_invoices_payments = new BwInvoicePayments();
			$users = new User();
			$warnings = new RemindersInvoice();
			$modules = new Modules();
			
			if($modules->checkModulePrivileges("170", $clientid))
			{
				$this->view->create_bulk_warnings = "1";
			}
			else
			{
				$this->view->create_bulk_warnings = "0";
			}
			
			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();


			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('BwInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);



			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{

				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND isdelete=0';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND DATE(NOW()) > DATE(invoice_end)  AND isdelete=0';
					break;

				case 'all':
					$filters['hiinvoice'] = ' ';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';
					break;
			}

			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);

			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BwInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}
				$status_count_invoices["all"][] = '1';
			}
			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BwInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}

			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('BwInvoices')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";


			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
					//BwInvoices
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [OLD]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort,concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('BwInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $bw_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);
			
			$all_warnings = $warnings->get_reminders($invoice_ids, 'bw_sapv_invoice', $clientid);
				
			foreach ($invoicelimit as &$row) {
				if (isset($all_warnings[$row['id']])) {
					$row['InvoiceWarnings'] = $all_warnings[$row['id']];
				}
			}
			//var_dump($invoicelimit); exit;

			$this->view->storned_invoces = BwInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function bwlistpaymentsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$bwinvoices = new BwInvoices();
			$bwpayments = new BwInvoicePayments();
			$bwinvoice_form = new Application_Form_BwInvoices();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $bwpayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $bwpayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $bwpayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $bwinvoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $bwinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $bwpayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoice/bwlistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		public function editsapvinvoiceAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$bw_invoices = new BwInvoices();
			$bw_invoices_items = new BwInvoiceItems();
			$bw_invoices_form = new Application_Form_BwInvoices();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$this->view->hide_patient_tab = '1';

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $bw_invoices->getBwInvoice($invoice_id);
			}

			if(in_array($invoice_data['id'], BwInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $bw_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{
					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}
				
				//save here
				if(strlen($_POST['invoice']['address']) > 0 ){
				    if(strpos($_POST['invoice']['address'],"style"))
				    {
				        $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
				    }
				    $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
				}
				$edit_invoice = $bw_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);


				if(empty($_REQUEST['pdf']))
				{
					if($edit_invoice)
					{

						$this->_redirect(APP_BASE . 'invoice/bwinvoices?flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/bwinvoices?flg=edterr');
					}
				}
				else if(!empty($_REQUEST['pdf']) && $edit_invoice)
				{

					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}

					if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
					}
					else if(empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
					}
					$this->_redirect(APP_BASE . 'invoice/performancerecord?iid=' . $_REQUEST['invoiceid'] . '&mode=pdfs&pdfquick=1&completed_date=' . strtotime($pdf_data['completed_date']));
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{


				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoice/bwinvoices');
				}

				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];

				//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}

					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}


				if($hi_perms_divisions)
				{

					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
				}

				$pathealthinsurancenr = "";
				if(count($healthinsu_array[0]))
				{
					$phi_details = $healthinsu_array[0]['name'];
				}
				else
				{
					$phi_details = "--";
				}

				$phi_details_sub = $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br/> ' . $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$this->view->health_insurance = $phi_details;
				$this->view->hi_subdiv_address = $phi_details_sub;


				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}

				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}

				if(strlen($invoice_data['footer']) == 0)
				{
					$invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				}

				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is preset
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		private function week_flat_rate($ipid, $current_period, $real_active_days_in_period, $cycles)
		{
			$patientmaster = new PatientMaster();
			//we have discharges = 1 || 2 admissions
			if(count($cycles[$ipid]['dischargeDates']) != 0)
			{
				foreach($cycles[$ipid]['dischargeDates'] as $k_discharge => $v_discharge)
				{
					$admission_key = ($k_discharge + 1);

					if(array_key_exists($admission_key, $cycles[$ipid]['admissionDates']))
					{
						$counted_discharge_days[$k_discharge] = $patientmaster->getDaysDiff($v_discharge['date'], $cycles[$ipid]['admissionDates'][$admission_key]['date']);
					}
				}
			}

			//k_discharge becomes k_count_dis
			$week_flatrate_possible = array();
			//only one admission
			if(count($cycles[$ipid]['dischargeDates']) == 1 && count($cycles[$ipid]['admissionDates']) == 1) //1a-1d
			{
				if(strtotime(date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][0]['date']))) <= strtotime($current_period['end']))
				{
					$start = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][0]['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][0]['date']))
					{
						$end = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][0]['date']));
					}
					else
					{
						$end = date('Y-m-d', time());
					}

					$week_flatrate_possible = array_merge($week_flatrate_possible, $patientmaster->getDaysInBetween($start, $end));
				}
			}
			else if(strlen($cycles[$ipid]['admission_date']) > 0 && count($cycles[$ipid]['dischargeDates']) == 0) //1a - 0d
			{
				if(strtotime(date('Y-m-d', strtotime($cycles[$ipid]['admission_date']))) <= strtotime($current_period['start']) ||
					(strtotime(date('Y-m-d', strtotime($cycles[$ipid]['admission_date']))) <= strtotime($current_period['end']) && strtotime(date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']))) >= strtotime($current_period['start']) )
				)
				{
					$start = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));
					$end = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));

					$week_flatrate_possible = array_merge($week_flatrate_possible, $patientmaster->getDaysInBetween($start, $end));
				}
			}
			else
			{
				foreach($cycles[$ipid]['admissionDates'] as $k_adm => $v_adm)
				{
					if(strtotime(date('Y-m-d', strtotime($v_adm['date']))) <= strtotime($current_period['start']) ||
						(strtotime(date('Y-m-d', strtotime($v_adm['date']))) <= strtotime($current_period['end']) && (count($cycles[$ipid]['dischargeDates'][$k_adm]) == '0' || (count($cycles[$ipid]['dischargeDates'][$k_adm]) > '0' && strtotime(date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$k_adm]['date']))) >= strtotime($current_period['start']))) )
					)
					{
						$start = date('Y-m-d', strtotime($v_adm['date']));

						if(count($cycles[$ipid]['dischargeDates'][$k_adm]) == '0')
						{
							$end = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
						}
						else
						{
							$end = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$k_adm]['date']));
						}

						if($counted_discharge_days[($k_adm - 1)] >= '28' || $k_adm == '0')
						{
							$week_flatrate_possible = array_merge($week_flatrate_possible, $patientmaster->getDaysInBetween($start, $end));
						}
						else if(count($cycles[$ipid]['admissionDates']) > count($cycles[$ipid]['dischargeDates']) && ($k_adm + 1) == count($cycles[$ipid]['admissionDates']))
						{
							$week_flatrate_possible = array_merge($week_flatrate_possible, $patientmaster->getDaysInBetween($start, $end));
						}
					}
				}
			}

			foreach($counted_discharge_days as $k_count_dis => $v_count_days)
			{
				if($v_count_days >= '28')// 4 weeks passed from last discharge
				{
					if($cycles[$ipid]['admissionDates'][($k_count_dis + 1)]['date'])
					{
						$start = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][($k_count_dis + 1)]['date']));
					}

					if(strlen($cycles[$ipid]['dischargeDates'][($k_count_dis + 1)]['date']) > 0)
					{
						$end = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][($k_count_dis + 1)]['date']));
					}
					else
					{
						$end = date('Y-m-d', time());
					}

					if(strtotime($cycles[$ipid]['admissionDates'][($k_count_dis + 1)]['date']) <= strtotime($current_period['start']) ||
						strtotime(date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][($k_count_dis + 1)]['date']))) <= strtotime($current_period['end']) && strtotime($end) >= strtotime($current_period['start'])
					)
					{

						$week_flatrate_possible = array_merge($week_flatrate_possible, $patientmaster->getDaysInBetween($start, $end));
					}
				}
			}

			return $week_flatrate_possible;
		}

		public function sgbvinvoicesAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$sgbv_invoices_form = new Application_Form_SgbvInvoices();

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			
			
			//ISPC-2609 Ancuta 24.09.2020
			$userid = $logininfo->userid;
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "bw_sgbv_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			
			if(count($invoice_user_printjobs) > 1 ){
			    echo $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			if($this->getRequest()->isPost())
			{
				if($_POST['draftmore'] == "1")
				{
					$transform = $sgbv_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $sgbv_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				elseif($_POST['batch_print_more'])
				{
				    $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
				    $params['batch_print'] = '1'; //enables batch print procedure
				    $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
				    $params['get_pdf'] = '0'; //stops downloading single pdf
				    
				    //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
				    if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
				        
				        
				        
				        
				    } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
				        
				        $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
				        
				        $print_job_data = array();
				        $print_job_data['clientid'] = $clientid;
				        $print_job_data['user'] = $userid;
				        $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
				        $print_job_data['output_type'] = 'pdf';
				        $print_job_data['status'] = 'active';
				        $print_job_data['invoice_type'] = 'bw_sgbv_invoice';
				        $print_job_data['print_params'] = serialize($params);
				        $print_job_data['print_function'] = 'socialcoderecordAction';
				        $print_job_data['print_controller'] = $this->getRequest()->getControllerName();
				        
				        foreach($_POST['document'] as $k=>$inv_id){
				            $print_job_data['PrintJobsItems'][] = array(
				                'clientid'=>$print_job_data['clientid'],
				                'user'=>$print_job_data['user'],
				                'invoice_id'=>$inv_id,
				                'invoice_type'=>$print_job_data['invoice_type'],
				                'status'=>"new"
				            );
				        }
				        
				        $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
				        $print_id = $PrintJobsBulk_obj->id;
				        
				        if($print_id){
				            $this->__StartPrintJobs();
				        }
				    }
				
				}
				
				else
				{
					$new_payment = $sgbv_invoices_form->submit_payment($_POST);
				}
				
				
				
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				$msg="";
				if($print_id){
				    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				}
				$this->_redirect(APP_BASE . 'invoice/sgbvinvoices'.$msg); //to avoid resubmission
				//$this->_redirect(APP_BASE . 'invoice/sgbvinvoices'); //to avoid resubmission
				//--
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$sgbv_invoices = new SgbvInvoices();
					$clone_record = $sgbv_invoices->create_storno_invoice($invoiceid);
					$this->_redirect(APP_BASE . 'invoice/sgbvinvoices?flg=suc');
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $sgbv_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/sgbvinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/sgbvinvoices?flg=delerr');
				}
			}

			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("89", $clientid)) // change tab name
			{
				$this->view->change_tab_name = 1;
			}
			else
			{
				$this->view->change_tab_name = 0;
			}
			
			
		}

		public function fetchsgbvinvoicelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$sgbv_invoices_payments = new SgbvInvoicePayments();
			$users = new User();

			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('SgbvInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);


			//process tabs
			$filters['hiinvoice_search'] = '';

			switch($_REQUEST['f_status'])
			{

				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND isdelete=0';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND DATE(NOW()) > DATE(invoice_end)  AND isdelete=0';
					break;

				case 'all':
					$filters['hiinvoice'] = ' ';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';
					break;
			}


			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
				CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);

			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('SgbvInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}
				$status_count_invoices["all"][] = '1';
			}

			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('SgbvInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}
			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('SgbvInvoices')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";

			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
					//SgbvInvoices
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [OLD] 
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					 
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort,concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('SgbvInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}


			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $sgbv_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);

			$this->view->storned_invoces = SgbvInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function editsgbvinvoiceAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$sgbv_invoices = new SgbvInvoices();
			$sgbv_invoices_items = new SgbvInvoiceItems();
			$sgbv_invoices_form = new Application_Form_SgbvInvoices();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$this->view->hide_patient_tab = '1';

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $sgbv_invoices->getSgbvInvoice($invoice_id);
			}

			if(in_array($invoice_data['id'], SgbvInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $sgbv_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{
					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}

				//save here
				if(strlen($_POST['invoice']['address']) > 0 ){
				    if(strpos($_POST['invoice']['address'],"style"))
				    {
				        $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
				    }
				    $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
				}				
				$edit_invoice = $sgbv_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);


				if(empty($_REQUEST['pdf']))
				{
					if($edit_invoice)
					{

						$this->_redirect(APP_BASE . 'invoice/sgbvinvoices?flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/sgbvinvoices?flg=edterr');
					}
				}
				else if(!empty($_REQUEST['pdf']) && $edit_invoice)
				{
					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}

					if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
					}
					else if(empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
					}

					$this->_redirect(APP_BASE . 'invoice/socialcoderecord?iid=' . $_REQUEST['invoiceid'] . '&mode=pdfs&pdfquick=1&completed_date=' . strtotime($pdf_data['completed_date']));
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{

				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoice/sgbvinvoices');
				}


				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];
				//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}

				if($hi_perms_divisions)
				{

					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
				}

				if(!empty($healthinsu_subdiv_arr['1']['name']))
				{
					//get new SAPV hi address
					$hi_address = '&nbsp;' . $healthinsu_subdiv_arr['1']['name'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr['1']['insurance_provider'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr['1']['street1'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr['1']['zip'] . ' ' . $healthinsu_subdiv_arr['1']['city'] . '' . '<br />';
				}
				else
				{
					//get old hi_address
					$hi_address = '&nbsp;' . $healthinsu_array[0]['name'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_insurance_provider'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_street'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'] . '<br />';
				}

				$pathealthinsurancenr = "";
				if(count($healthinsu_array[0]))
				{
					$phi_details = $healthinsu_array[0]['name'];
				}
				else
				{
					$phi_details = "--";
				}

				$phi_details_sub = $hi_address;

				$this->view->health_insurance = $phi_details;
				$this->view->hi_subdiv_address = $phi_details_sub;


				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}

				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}

				if(strlen($invoice_data['footer']) == 0)
				{
					$invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				}

				//get socialcode group prices assigned to the health insurance of the patient
				$phelathinsurance = new PatientHealthInsurance();
				$patient_healthinsurance = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);

				if($patient_healthinsurance)
				{
					$health_insurance_id = $patient_healthinsurance[0]['companyid'];

					$hi_query = Doctrine_Query::create()
						->select('price_sheet, price_sheet_group')
						->from('HealthInsurance')
						->where("id='" . $health_insurance_id . "'");
					$hi_array = $hi_query->fetchArray();


					if(!empty($hi_array))
					{
						$price_sheet_group = $hi_array[0]['price_sheet_group'];
					}
				}

				$period_pricelist['start'] = date('Y-m-d', strtotime($invoice_data['invoice_start']));
				$period_pricelist['end'] = date('Y-m-d', strtotime($invoice_data['invoice_end']));

				$socialcode_price = new SocialCodePriceList();
				$price_sheet = $socialcode_price->get_group_period_pricelist($price_sheet_group, $clientid, $period_pricelist);
				if($_REQUEST['dbgq'])
				{
					print_r($invoice_data);
					print_r("Patient Health insurance\n");
					print_r($patient_healthinsurance);
					print_r("Health Insurance pricesheet group\n");
					print_r($price_sheet_group);
					print_r("Group Pricelists\n");
					print_r($price_sheet);
					exit;
				}

				//get pricelist based on pricesheet from health insurance
				$p_groups = new SocialCodePriceGroups();
				$price_groups = $p_groups->get_prices($price_sheet, $clientid);


				foreach($price_groups as $k_price_group => $v_price_group)
				{
					$group_price_details[$v_price_group['groupshortcut']] = $v_price_group['groupname'];
				}

				$b_groups = new SocialCodePriceBonuses();
				$bonuses_price = $b_groups->get_prices($price_sheet, $clientid);

				foreach($bonuses_price as $k_bprice_group => $v_bprice_group)
				{
					$bonuses_price_details[$v_bprice_group['bonusshortcut']] = $v_bprice_group['bonusname'];
				}



				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;

				$this->view->group_price_details = $group_price_details;
				$this->view->bonuses_price_details = $bonuses_price_details;

				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is preset
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		public function sgbvlistpaymentsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$sgbvinvoices = new SgbvInvoices();
			$sgbvpayments = new SgbvInvoicePayments();
			$sgbvinvoice_form = new Application_Form_SgbvInvoices();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $sgbvpayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $sgbvpayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $sgbvpayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $sgbvinvoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $sgbvinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $sgbvpayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoice/sgbvlistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		//ISPC-2609 + ISPC-2000 Ancuta 26.09.2020
		// medipumps invoices
		public function medipumpscontrolAction($params = array())
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$tm = new TabMenus();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$medipumpsinvoices = new MedipumpsInvoices();
			$medipumpsinvoices_items = new MedipumpsInvoiceItems();
			$client = new Client();

			//ISPC-2609 + ISPC-2000 Ancuta 26.09.2020
			if(isset($params) && !empty($params)){
			    $_REQUEST = $params;
			    $this->_helper->viewRenderer->setNoRender();
			}
			//--
			
			
			//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
			$clientid = isset($_REQUEST['clientid']) && ! empty($_REQUEST['clientid']) ? $_REQUEST['clientid'] :  $logininfo->clientid;
			$userid = isset($_REQUEST['userid']) && ! empty($_REQUEST['userid']) ? $_REQUEST['userid'] : $logininfo->userid;
			
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$client_details = $client->getClientDataByid($clientid);
			$this->view->client_details = $client_details[0];

			if(!empty($_REQUEST['id'])){
    			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
    			$ipid = Pms_CommonData::getIpid($decid);
			}

			
			//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
			if($_REQUEST['bulk_print'] == '1' && strlen($_REQUEST['iid']) > 0){
			    $medipumpsinvoice_details = $medipumpsinvoices->getMedipumpsInvoice($_REQUEST['iid']);
			    $_REQUEST['single'] = $medipumpsinvoice_details['type'];
			    if($medipumpsinvoice_details['storno'] == '1'){
			        $_REQUEST['iid'] = $medipumpsinvoice_details['record_id'];
			        $_REQUEST['stornopdf'] = 1;
			        $_REQUEST['storno'] = $medipumpsinvoice_details['id'];
			    }
			}
			//--
			
			
			
			if(strlen($_REQUEST['iid']) > 0)
			{
				//get invoice address/footer
				$medipumpsinvoice_details = $medipumpsinvoices->getMedipumpsInvoice($_REQUEST['iid']);
				$medipumpsinvoice_items = $medipumpsinvoices_items->getInvoicesItems($_REQUEST['iid']);

				$ipid = $medipumpsinvoice_details['ipid'];
				$decid = Pms_CommonData::getIdfromIpid($ipid);

				$list = date('Y-m', strtotime($medipumpsinvoice_details['invoice_start']));

				$rnummer = $medipumpsinvoice_details['invoice_number'];
				$prefix = $medipumpsinvoice_details['prefix'];
				if($medipumpsinvoice_details['type'] == 'p')
				{
					$pseudo_post['patient_address'] = $medipumpsinvoice_details['address'];

					$medipumpsinvoice_items['grand_total'] = $medipumpsinvoice_details['total_amount'];
					$medipumpsinvoice_items['percentless_amount'] = $medipumpsinvoice_details['invoice_total'];
					$medipumpsinvoice_items['percent_value'] = $medipumpsinvoice_details['shared_amount'];
				}
				else if($medipumpsinvoice_details['type'] == 'h')
				{
					$pseudo_post['hi_address'] = $medipumpsinvoice_details['address'];

					$medipumpsinvoice_items['grand_total'] = $medipumpsinvoice_details['total_amount'];
					$medipumpsinvoice_items['percentless_amount'] = $medipumpsinvoice_details['invoice_total'];
					$medipumpsinvoice_items['percent_value'] = $medipumpsinvoice_details['shared_amount'];
				}

				$pseudo_post['start_mp_rent'] = date('d.m.Y', strtotime($medipumpsinvoice_details['start_mp_rent']));
				$pseudo_post['end_mp_rent'] = date('d.m.Y', strtotime($medipumpsinvoice_details['end_mp_rent']));

				$pseudo_post['first_active_day'] = date('d.m.Y', strtotime($medipumpsinvoice_details['start_active']));
				$pseudo_post['last_active_day'] = date('d.m.Y', strtotime($medipumpsinvoice_details['end_active']));

				if($medipumpsinvoice_details['completed_date'] != '0000-00-00 00:00:00')
				{
					$pseudo_post['completed_date'] = date('d.m.Y', strtotime($medipumpsinvoice_details['completed_date']));
				}
				else
				{
					$pseudo_post['completed_date'] = date('d.m.Y', strtotime($medipumpsinvoice_details['create_date']));
				}
				$pseudo_post['unique_id'] = $_REQUEST['iid'];
				
				//ISPC-2747 Lore 27.11.2020
				if(strpos($medipumpsinvoice_details['show_boxes'], 'show_box_active') === false ){
				    $pseudo_post['show_box_active'] = '0';
				}else {
				    $pseudo_post['show_box_active'] = '1';
				}
				if(strpos($medipumpsinvoice_details['show_boxes'], 'show_box_patient') === false ){
				    $pseudo_post['show_box_patient'] = '0';
				}else {
				    $pseudo_post['show_box_patient'] = '1';
				}
				if(strpos($medipumpsinvoice_details['show_boxes'], 'show_box_sapv') === false ){
				    $pseudo_post['show_box_sapv'] = '0';
				}else {
				    $pseudo_post['show_box_sapv'] = '1';
				}
				
			}

			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;

			$pseudo_post['patid'] = $decid;
			$pseudo_post['ipid'] = $ipid;
			$pseudo_post['clientid'] = $clientid;

			//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
			if($_REQUEST['bulk_print'] == '1'){
			    
			    $pdet = $patientmaster->get_patients_details_By_Ipids(array($ipid));
			    $pm = $pdet[$ipid];
			    $pseudo_post['patientdetails'] = $pm;
			    
			} else{
			    
    			$pm = $patientmaster->getMasterData($decid, 0);
    			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
    			$this->view->patientdetails = $pm;
    			$pseudo_post['patientdetails'] = $pm;
			}
			
			
			if(strlen($_REQUEST['iid']) == 0)
			{
				$this->view->tabmenus = $tm->getMenuTabs();
			}

			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			$hi_perms_divisions = $divisions;

			//health insurance
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
			$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$privatpatient = false;
			if($healthinsu_array[0]['privatepatient'] == '1')
			{
				$privatpatient = true;
			}
			else
			{
				$privatpatient = false;
			}

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(empty($healthinsu_array[0]['name']))
				{
					$healthinsu_array[0]['name'] = $healtharray['name'];
				}
				if(empty($healthinsu_array[0]['ins_street']))
				{
					$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
				}
				if(empty($healthinsu_array[0]['ins_zip']))
				{
					$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
				}
				if(empty($healthinsu_array[0]['ins_city']))
				{
					$healthinsu_array[0]['ins_city'] = $healtharray['city'];
				}

				if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
				{
					$this->view->health_insurance_ik = $healtharray['iknumber'];
				}

				if(strlen($healthinsu_array[0]['kvk_no']) == 0)
				{
					$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
				}
			}


			if($hi_perms_divisions)
			{
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
			}

			if(!empty($healthinsu_subdiv_arr['4']['name']))
			{
				//get new SAPV hi address
				$hi_address = '&nbsp;' . $healthinsu_subdiv_arr[4]['name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[4]['insurance_provider'] . '<br />';
				//$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[4]['contact_person'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[4]['street1'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[4]['zip'] . ' ' . $healthinsu_subdiv_arr[4]['city'];
			}
			else
			{
				//get old hi_address
				$hi_address = '&nbsp;' . $healthinsu_array[0]['name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_insurance_provider'] . '<br />';
				//$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_contactperson'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_street'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];
			}

			$pathealthinsurancenr = "";

			$phi_details_sub = $hi_address;

			$this->view->health_insurance = $phi_details;
			$this->view->hi_subdiv_address = $phi_details_sub;


			$pseudo_post['health_insurance'] = $phi_details;
			if(empty($pseudo_post['hi_address']))
			{
				$pseudo_post['hi_address'] = $phi_details_sub;
			}
		
			//get admission-readmission cycles to extract months where there is at least 1 day active START
			//$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid),true,$clientid);//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020 - add client param
			$months = array();
			$active_days = array();
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$end_with_discharge = '';
					$start_without_discharge = '';
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{


						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}

					$cycle_periods['start'][] = date('Y-m-d', strtotime($v_adm['date']));

					if($end_with_discharge)
					{
						$cycle_periods['end'][] = $end_with_discharge;
					}
					else
					{
						$cycle_periods['end'][] = $end_without_discharge;
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{
					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}

				$cycle_periods['start'][] = $cycle_start_period;
				$cycle_periods['end'][] = $cycle_end_period;

				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
			}

			if($_REQUEST['dbgx'])
			{
//				print_r($active_days);
//				print_r($cycle_start_period);
				print_r($cycle_periods);
//				print_r($cycles);
//				print_r($period_months);
				print_r($months);
//				print_r($cycle_months);
//				exit;
			}
			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}
			//get number of days in each month + start/end day START
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_performance';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];

			$monthdays_in_period = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);
//
//			foreach($active_days as $k_active_day => $v_active_day)
//			{
//				if(in_array($v_active_day, $days_in_period))
//				{
//					$active_days_in_period[] = $v_active_day;
//				}
//			}
			$this->view->monthdays_in_period = $monthdays_in_period;

//get hospital/hospiz in current period
//$hospital_days = $this->get_period_hospitals($ipid, $clientid, $current_period, $active_days_in_period);
//$this->view->hospital_days = $hospital_days;
			//get pflegestuffe in current period
			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $current_period['start'], $current_period['end']);
			if($pflege_arr)
			{
				$last_pflege = end($pflege_arr);
				$this->view->patient_pflegestufe = $last_pflege['stage'];
			}
			else
			{
				$this->view->patient_pflegestufe = ' - ';
			}


			//get real active patient days (active,  no hospital/hospiz - not depending of sapv)
//	$real_active_days = $this->real_active_days_nosapv($active_days_in_period, $hospital_days);
//
//	asort($real_active_days);
//	asort($active_days_in_period);
//
//
//	$this->view->active_days_in_period = $active_days_in_period;

			if(count($cycles[$ipid]['admissionDates']) > 0)
			{
				foreach($cycles[$ipid]['admissionDates'] as $k_adm => $v_adm)
				{
					$start_periods[$k_adm] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$k_adm]))
					{
						$end_periods[$k_adm] = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$k_adm]['date']));
					}
					else
					{
						$end_periods[$k_adm] = date('Y-m-d', time());
					}
				}
			}
			else
			{
				$start_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));
				$end_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
			}

//Client Hospital Settings START
			//curent period
			$conditions['periods'][0]['start'] = $current_period['start'];
			$conditions['periods'][0]['end'] = $current_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
			$this->view->hospital_days_cs = $hospital_days_cs;

			$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];
			$this->view->hospiz_days_cs = $hospiz_days_cs;


			$active_days_in_period_cs = $patient_days[$ipid]['treatment_days'];
			$this->view->active_days_in_period = $active_days_in_period_cs;

			$conditions['periods'][0]['start'] = '2008-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d', time());
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);
				
			
			$overall_conditions['periods'][0]['start'] = '2008-01-01';
			$overall_conditions['periods'][0]['end'] = date('Y-m-d', time());
			$overall_conditions['client'] = $clientid;
			$overall_conditions['ipids'] = array($ipid);
			$patient_days_overall = Pms_CommonData::patients_days($overall_conditions);
				
			$active_days_overall_cs = $patient_days_overall[$ipid]['treatment_days'];
			$hospital_days_overall_cs = $patient_days_overall[$ipid]['hospital']['real_days_cs'];			

			$days_in_period_cs = $patient_days[$ipid]['real_active_days'];
			$this->view->period_days_cs = $days_in_period_cs;

			if($_REQUEST['csdbg'])
			{
				print_r("Old Real active days in period");
				print_r($real_active_days);
				print_r("CS Real active days in period");
				print_r($active_days_in_period_cs);


//				print_r("Old active_days_in_period\n");
//				print_r($active_days_in_period);
//
//				print_r("CS active_days_in_period\n");
//				print_r($active_days_in_period_cs);

				print_r("Old hospital/hospiz_days\n");
				print_r($hospital_days);

				print_r("CS hospital_days\n");
				print_r($hospital_days_cs);

				print_r("CS hospiz_days\n");
				print_r($hospiz_days_cs);

				print_r($patient_days);

				exit;
			}
//Client Hospital Settings END
			// national holidays
			$nhollyday = new NationalHolidays();
			$national_holidays_arr = $nhollyday->getNationalHoliday($clientid, $current_period['start'], true);

			foreach($national_holidays_arr as $k_natholliday => $v_natholliday)
			{
				$national_holidays[] = strtotime(date('Y-m-d', strtotime($v_natholliday['NationalHolidays']['date'])));
			}

			$this->view->national_holidays = $national_holidays;



			if($this->getRequest()->isPost())
			{

				$list_month_year = '';
				if($_REQUEST['list'])
				{
					$list_month_year = '&list=' . $_REQUEST['list'];
				}

				if($_POST['save'])
				{
					ksort($_POST['medipump']);
					foreach($_POST['medipump_ids'] as $k_medipump => $v_medipump_id)
					{
						if(strlen($_POST['medipump'][$v_medipump_id]) == '0')
						{
							//empty save
//							foreach($days_in_period as $k_day_p => $v_day_p)
							foreach($days_in_period_cs as $k_day_p => $v_day_p)
							{
								$medipump_data[$v_medipump_id][$v_day_p] = array(
									'clientid' => $clientid,
									'ipid' => $ipid,
									'medipump' => $v_medipump_id,
									'patient_medipump' => '0',
//									'date' => $v_day_p,
									'date' => date('Y-m-d', strtotime($v_day_p)),
									'value' => '0',
									'start' => '0',
								);
							}
						}
						else
						{

							$day_was_selected = false;
							foreach($_POST['medipump'][$v_medipump_id] as $k_pat_medipump => $v_pat_medipump)
							{
//								foreach($days_in_period as $k_day_p => $v_day_p)
								foreach($days_in_period_cs as $k_day_p => $v_day_p)
								{
									$v_day_p_alt = date('Y-m-d', strtotime($v_day_p));
//									if(array_key_exists($v_day_p, $v_pat_medipump) || array_key_exists($v_day_p, $_POST['medipump_start'][$v_medipump_id][$k_pat_medipump]))
									if(array_key_exists($v_day_p_alt, $v_pat_medipump) || array_key_exists($v_day_p_alt, $_POST['medipump_start'][$v_medipump_id][$k_pat_medipump]))
									{
										if(array_key_exists($v_day_p_alt, $v_pat_medipump))
										{
											$selected = '1';
										}
										else
										{
											$selected = '0';
										}

										if(array_key_exists($v_day_p_alt, $_POST['medipump_start'][$v_medipump_id][$k_pat_medipump]))
										{
											$start = '1';
										}
										else
										{
											$start = '0';
										}



										$medipump_data[$v_medipump_id][$v_day_p] = array(
											'clientid' => $clientid,
											'ipid' => $ipid,
											'medipump' => $v_medipump_id,
											'patient_medipump' => $k_pat_medipump,
											'date' => $v_day_p_alt,
											'value' => $selected,
											'start' => $start,
										);
									}
								}
							}
						}
					}



					$medipump_data_final = array();
					foreach($medipump_data as $k_medipump_id => $v_mp_arr)
					{

						foreach($days_in_period_cs as $k_date => $v_date)
						{

							if(!array_key_exists($v_date, $v_mp_arr))
							{
								$v_date_alt = date('Y-m-d', strtotime($v_date));

								$medipump_data_final[] = array(
									'clientid' => $clientid,
									'ipid' => $ipid,
									'medipump' => $k_medipump_id,
									'patient_medipump' => '0',
									'date' => $v_date_alt,
									'value' => '0',
									'start' => '0',
								);
							}
							else
							{
								$medipump_data_final[] = $v_mp_arr[$v_date];
							}
						}
					}

					//clear old entries for curent month
					$medipumps_form = Application_Form_PatientMedipumps::reset_patient_medipumps($ipid, $current_period['start']);

					//insert current month data
					$mp_collection = new Doctrine_Collection('PatientMedipumpsControl');
					$mp_collection->fromArray($medipump_data_final);
					$mp_collection->save();



					$this->_redirect(APP_BASE . 'invoice/medipumpscontrol?id=' . $_REQUEST['id'] . $list_month_year);
					exit;
				}
				else if($_POST['reset'])
				{
					$medipumps_form = Application_Form_PatientMedipumps::reset_patient_medipumps($ipid, $current_period['start']);


					$this->_redirect(APP_BASE . 'invoice/medipumpscontrol?id=' . $_REQUEST['id'] . $list_month_year);
					exit;
				}
			}


			//start medipump data gathering
			// get client medipump
			$medp = new Medipumps();
			$client_medipumps = $medp->getMedipumps($clientid);


			foreach($client_medipumps as $k_medipump => $v_medipump)
			{
				$medipump_list[$v_medipump['id']] = $v_medipump;
			}
			$this->view->medipump_list = $medipump_list;



			// get patient medipumps
			$pat_medp = new PatientMedipumps();
			$patient_medipumps_details = $pat_medp->get_patient_medipumps($ipid);


			// get medipumps in report period
			$patient_medipumps_days = $pat_medp->get_period_medipumps($ipid, $current_period);
			$pat_medipumpe_inv = $pat_medp->get_period_medipumps_invoice($ipid, $current_period);
			$pumps_in_period[] = '999999999';
			foreach($patient_medipumps_days as $medk => $medv)
			{
				$pumps_in_period[] = $medk;
			}
			$pat_medp_control = new PatientMedipumpsControl();
			$patient_medipumps_control = $pat_medp_control->get_medipumps_controlsheet($ipid, $current_period['start']);

			$controlled_patient_medipumps = array();

			if($patient_medipumps_control)
			{
				foreach($patient_medipumps_control as $kh => $med_control)
				{

					if($med_control['value'] == '1')
					{
						$medipumps_control[$med_control['medipump']][$med_control['patient_medipump']][] = date('Y-m-d', strtotime($med_control['date']));
					}

					if($med_control['start'] == '1')
					{
						$start_days_control[$med_control['medipump']][$med_control['patient_medipump']][] = date('Y-m-d', strtotime($med_control['date']));
					}



					$controlled_patient_medipumps['patient_medipump'][$med_control['patient_medipump']] = $med_control['patient_medipump'];
					$controlled_patient_medipumps['medipump'][$med_control['medipump']] = $med_control['medipump'];
				}
			}

			$medipumpe_details_only = array();
			foreach($patient_medipumps_details as $k_vmedipumpe => $v_vmedipumpe)
			{
				if(in_array($v_vmedipumpe['medipump'], $pumps_in_period))
				{

					//to invoices + controlsheet
					$medipumpedetails_invoice[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_id'] = $v_vmedipumpe['medipump'];
					$medipumpedetails_invoice[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_name'] = $medipump_list[$v_vmedipumpe['medipump']]['medipump'];
					$medipumpedetails_invoice[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_sht'] = $medipump_list[$v_vmedipumpe['medipump']]['shortcut'];

					//medipumpe details only
					$medipumpe_details_only[$v_vmedipumpe['medipump']]['medipump_id'] = $v_vmedipumpe['medipump'];
					$medipumpe_details_only[$v_vmedipumpe['medipump']]['medipump_name'] = $medipump_list[$v_vmedipumpe['medipump']]['medipump'];
					$medipumpe_details_only[$v_vmedipumpe['medipump']]['medipump_sht'] = $medipump_list[$v_vmedipumpe['medipump']]['shortcut'];

					// overwrite if control sheet was saved
					if(!empty($patient_medipumps_control) && (in_array($v_vmedipumpe['id'], $controlled_patient_medipumps['patient_medipump']) || in_array($v_vmedipumpe['medipump'], $controlled_patient_medipumps['medipump']))) //control sheet overwrite
					{
						$medipumpedetails_invoice[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days'] = $medipumps_control[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']];
						$medipumpedetails_invoice[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_start_days'] = $start_days_control[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']];
					}
					else
					{
						//estabilish start-end dates
						if($v_vmedipumpe['end_date'] == '0000-00-00 00:00:00')
						{
							$pat_till = date('Y-m-d');
						}
						else
						{
							$pat_till = date('Y-m-d', strtotime($v_vmedipumpe['end_date']));
						}

						$pat_start = date('Y-m-d', strtotime($v_vmedipumpe['start_date']));


						$r1start = strtotime(date('Y-m-d', strtotime($v_vmedipumpe['start_date'])));
						$r1end = strtotime($pat_till);
						$r2start = strtotime($current_period['start']);
						$r2end = strtotime($current_period['end']);

						$medipumpedetails_invoice[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_start_days'][] = $pat_start;

						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
						{
							$medipumpedetails_invoice[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days'] = $patientmaster->getDaysInBetween($pat_start, $pat_till);
						}
					}
					asort($medipumpedetails_invoice[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days']);
				}
			}
 
			//estabilish in/out period days
			foreach($medipumpedetails_invoice as $k_medipump => $patient_medipumps)
			{
				foreach($patient_medipumps as $k_mp_det => $v_mp_det)
				{
					$medipumpedetails_invoice[$k_medipump][$k_mp_det]['medipump_out_period_days'] = array();
					$medipumpedetails_invoice[$k_medipump][$k_mp_det]['medipump_in_period_days'] = array();
					foreach($v_mp_det['medipump_days'] as $k_pump_days => $v_pump_day)
					{
						//$days_in_period_cs format is d.m.Y
						$v_pump_day_alt = date('d.m.Y', strtotime($v_pump_day));
						if(!in_array($v_pump_day_alt, $days_in_period_cs))
						{
							if(strtotime($v_pump_day) < strtotime($current_period['start']))
							{
								$medipumpedetails_invoice[$k_medipump][$k_mp_det]['medipump_out_period_days'][] = $v_pump_day;
							}
						}
						else
						{
							if(strtotime($v_pump_day) < time())
							{
								$medipumpedetails_invoice[$k_medipump][$k_mp_det]['medipump_in_period_days'][] = $v_pump_day;
							}
						}
					}
				}
			}

			if($_REQUEST['zx'])
			{
				print_r("medipumpedetails\n");
				print_r($medipumpedetails);
				print_r("pumps in period");
				print_r($pumps_in_period);
			}


			$this->view->medipumpedetails = $medipumpedetails_invoice;
			//processing data to be inserted in invoice pdfs
			//getting pricelist
			$current_price_list = $p_list->get_client_list_period($current_period['start'], $current_period['end']);

			if($current_price_list)
			{
				$price_mp = new PriceMedipumps();
				$price_medipumps = $price_mp->get_prices($current_price_list[0]['id'], $clientid);
			}


//check if patient has invoice in current fall START
			//get current fall based on curent period
			$current_fall = array();
			foreach($cycle_periods['start'] as $k_period => $v_period)
			{
				$r1start = $v_period;
				$r1end = $cycle_periods['end'][$k_period];
				$r2start = $current_period['start'];
				$r2end = $current_period['end'];

				if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
				{
					$current_fall['start'] = $v_period;
					$current_fall['end'] = $cycle_periods['end'][$k_period];
				}
			}

			//get patient medipump invoices in patient fall not current period(the one [5, 10]) intersected in curent period
			$medipumpsinvoice_details = $medipumpsinvoices->get_period_patients_medipumps_invoices($ipid, $clientid, $current_fall, 'p');
//			print_R($medipumpsinvoice_details);
//			print_R($current_period);
//			exit;
//			//calculate previously generated invoices in same fall
			$fall_total = '0.00';
			$gen_invoices_months = array();
			foreach($medipumpsinvoice_details as $k_mpf_det => $v_mpf_det)
			{
				$gen_invoices_months[] = date('Y-m-d', strtotime($v_mpf_det['invoice_start']));
				$fall_total += number_format($v_mpf_det['invoice_total'], '2', '.', '');
			}

			if($_REQUEST['dbgg'])
			{
//				print_r($medipumpsinvoice_details);
				print_r($current_period['start'] . "\n");
				print_r($gen_invoices_months);
				var_dump(in_array($current_period['start'], $gen_invoices_months));
			}

			$has_patient_invoice_fall = false;
			if($medipumpsinvoice_details && (bccomp($fall_total, '10.00', '2') == '0' || in_array($current_period['start'], $gen_invoices_months)))
			{
				$has_patient_invoice_fall = true;
			}
			else
			{
				$has_patient_invoice_fall = false;
			}

			if($_REQUEST['dbgg'])
			{
				var_dump($has_patient_invoice_fall);
				print_r($medipumpedetails_invoice);
				print_r($active_days_in_period_cs);
				exit;
			}
//check if patient has invoice in current fall END
			//invoice items splitting by the start_days
			$mps_activity[] = '99999999';
			$mps_rent[] = '99999999';
			foreach($medipumpedetails_invoice as $k_mpdets => $v_mpdets)
			{
				$days_incrementor[$k_mpdets] = '1';
				foreach($v_mpdets as $k_mpdet => $v_mpdet)
				{
					//estabilish price acordingly to the number of pump days
					$total_pump_days = count($v_mpdet['medipump_days']);
					$total_inside_period_days = count($v_mpdet['medipump_in_period_days']);
					$total_outside_period_days = count($v_mpdet['medipump_out_period_days']);
					$master_data_medipump_ids[] = $k_mpdets;

					if(!empty($v_mpdet['medipump_in_period_days']))
					{
						$mps_activity = array_merge_recursive($mps_activity, $v_mpdet['medipump_in_period_days']);
					}
					if(!empty($v_mpdet['medipump_days']))
					{
						$mps_rent = array_merge_recursive($mps_rent, $v_mpdet['medipump_days']);
					}

					$no_first_price_set = false;
					foreach($v_mpdet['medipump_days'] as $key_day => $v_day)
					{
						$v_day_alt = date('d.m.Y', strtotime($v_day));
// 						if(in_array($v_day_alt, $active_days_in_period_cs) && !in_array($v_day_alt, $hospital_days_cs))
						if(in_array($v_day_alt, $active_days_overall_cs) && !in_array($v_day_alt, $hospital_days_overall_cs))
						{
							if(in_array($v_day, $v_mpdet['medipump_in_period_days']))
							{
								$master_data_control_sheet[$k_mpdets][$v_day] = '1';
							}
							
                            foreach($v_mpdet['medipump_start_days'] as $k=>$start_dayYms){
                                if(in_array(date('d.m.Y',strtotime($start_dayYms)),$active_days_in_period_cs)){
                                    $v_mpdet['medipump_start_days_inperiod'][] = $start_dayYms;
                                }
                            }
							
							if(in_array($v_day, $v_mpdet['medipump_start_days_inperiod']))
							{
								$previous_start_day = $v_day;
								$days_incrementor[$k_mpdets] = '1';
							}

							if(count($v_mpdet['medipump_start_days_inperiod']) != 0 && strtotime($v_day) >= strtotime($previous_start_day))
							{
								if($days_incrementor[$k_mpdets] <= $price_medipumps[$k_mpdets]['first_end'] && in_array($v_day, $v_mpdet['medipump_in_period_days']) && in_array($v_day_alt, $active_days_in_period_cs))
								{
									$invoice_items[$k_mpdets]['first_price']['shortcut'] = $v_mpdet['medipump_sht'];
									$invoice_items[$k_mpdets]['first_price']['name'] = $v_mpdet['medipump_name'];
									$invoice_items[$k_mpdets]['first_price']['item_price_days'][] = $v_day;
									$invoice_items[$k_mpdets]['first_price']['prev_starts'][] = $previous_start_day;

									//first price count and sums
									$invoice_items[$k_mpdets]['first_price']['qty'] += 1;
									$invoice_items[$k_mpdets]['first_price']['price'] = $price_medipumps[$k_mpdets]['price_first'];
									$invoice_items[$k_mpdets]['first_price']['total'] += $price_medipumps[$k_mpdets]['price_first'];
									$invoice_items['grand_total'] += $price_medipumps[$k_mpdets]['price_first'];
								}
							}
							else
							{
								$no_first_price_set = true;
							}
                            // print_r($days_incrementor[$k_mpdets]);
							if(($days_incrementor[$k_mpdets] <= $price_medipumps[$k_mpdets]['first_end'] && $no_first_price_set) && in_array($v_day, $v_mpdet['medipump_in_period_days']) && in_array($v_day_alt, $active_days_in_period_cs)) // this is for pumps that started oustide period - but still in first price range 
							{
							    $invoice_items[$k_mpdets]['first_price']['shortcut'] = $v_mpdet['medipump_sht'];
							    $invoice_items[$k_mpdets]['first_price']['name'] = $v_mpdet['medipump_name'];
							    $invoice_items[$k_mpdets]['first_price']['item_price_days'][] = $v_day;
							    $invoice_items[$k_mpdets]['first_price']['prev_starts'][] = $previous_start_day;
							    
							    //first price count and sums
							    $invoice_items[$k_mpdets]['first_price']['qty'] += 1;
							    $invoice_items[$k_mpdets]['first_price']['price'] = $price_medipumps[$k_mpdets]['price_first'];
							    $invoice_items[$k_mpdets]['first_price']['total'] += $price_medipumps[$k_mpdets]['price_first'];
							    $invoice_items['grand_total'] += $price_medipumps[$k_mpdets]['price_first'];							    
							}
							elseif(($days_incrementor[$k_mpdets] >= $price_medipumps[$k_mpdets]['follow_start'] || $no_first_price_set) && in_array($v_day, $v_mpdet['medipump_in_period_days']) && in_array($v_day_alt, $active_days_in_period_cs))
							{
								$invoice_items[$k_mpdets]['second_price']['shortcut'] = $v_mpdet['medipump_sht'];
								$invoice_items[$k_mpdets]['second_price']['name'] = $v_mpdet['medipump_name'];
								$invoice_items[$k_mpdets]['second_price']['item_price_days'][] = $v_day;

								//second price count and sums
								$invoice_items[$k_mpdets]['second_price']['qty'] += 1;
								$invoice_items[$k_mpdets]['second_price']['price'] = $price_medipumps[$k_mpdets]['price_follow'];
								$invoice_items[$k_mpdets]['second_price']['total'] += $price_medipumps[$k_mpdets]['price_follow'];
								$invoice_items['grand_total'] += $price_medipumps[$k_mpdets]['price_follow'];
							}

							$days_incrementor[$k_mpdets] += '1';
						}
					}
				}
			}
			
// 			print_R($invoice_items);

// 			exit;
			//medipumps in period activity days
			$mps_activity = array_unique($mps_activity);
			asort($mps_activity);
			unset($mps_activity[array_search('99999999', $mps_activity)]);
			$mps_activity = array_values($mps_activity);

			//medipumps all rent period days
			$mps_rent = array_unique($mps_rent);
			asort($mps_rent);
			unset($mps_rent[array_search('99999999', $mps_rent)]);
			$mps_rent = array_values($mps_rent);

			$master_data_medipump_ids = array_values(array_unique($master_data_medipump_ids));

			//calculate patient 10%
			$both_invoices = false;
			if($_REQUEST['dbgg'])
			{
				var_dump($has_patient_invoice_fall);
				exit;
			}
			if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] != '1' && $privatpatient === false && $has_patient_invoice_fall === false)
			{
				//patient has to pay his part (A-10% [5, 10])
				//L.E: generate the patient invoice only if patient has no "p" type invoice in this fall
				//L.L.E: generate the patient invoice only if has no "p" type invoice and sum of previously invoices < 10
				//TODO remove corect ammount from both invoices from last invoice
				if($invoice_items['grand_total'] > '0')
				{
					$total_amount = $invoice_items['grand_total'];
					$percent = '10';


					$percent_value = ($total_amount * ($percent / 100));

					if($percent_value >= '5' && $percent_value <= '10')
					{
						$percent_final_value = $percent_value;
					}
					else if($percent_value < '5')
					{
						$percent_final_value = '5';
					}
					else if($percent_value > '10')
					{
						$percent_final_value = '10';
					}

					if($fall_total != '0.00' && bccomp($fall_total, '10.00', '2') < '0')
					{
						//maximum amount - previous fall invoices ammount
						$percent_final_value = ('10.00' - $fall_total);
					}


					$invoice_items['percent_value'] = $percent_final_value;
					$total_value = ($total_amount - $percent_final_value);
					$invoice_items['percentless_amount'] = $total_value;

					$both_invoices = true;
				}
				else
				{
					$invoice_items['percent_value'] = $percent_final_value;
					$invoice_items['percentless_amount'] = '0';
					$both_invoices = true;
				}
			}
			else
			{
				$total_amount = $invoice_items['grand_total'];

				$invoice_items['percent_value'] = '0';
				$invoice_items['percentless_amount'] = $total_amount;

				$both_invoices = false;
			}

			
			$mps_activity_dmY = $mps_activity;
			array_walk($mps_activity_dmY, function(&$value) {
			    $value = date("d.m.Y",strtotime($value));
			});
			
			foreach($mps_activity_dmY as $k=>$md){
			    if(in_array($md,$active_days_in_period_cs)){
			        $mps_activity_in_period[] = $md; 
			    }			        
			}
			
			if(empty($pseudo_post['first_active_day']))
			{
				//$start_activity = $mps_activity[0];
				//$last_element = end($mps_activity);
				$start_activity = $mps_activity_in_period[0];
				$last_element = end($mps_activity_in_period);
				$end_activity = $last_element;
			}
			else
			{
				$start_activity = $pseudo_post['first_active_day'];
				$end_activity = $pseudo_post['last_active_day'];
			}

			if(empty($pseudo_post['start_mp_rent']))
			{
				$start_rent = $mps_rent[0];
				$last_rent_elem = end($mps_rent);
				$end_rent = $last_rent_elem;
			}
			else
			{
				$start_rent = $pseudo_post['start_mp_rent'];
				$end_rent = $pseudo_post['end_mp_rent'];
			}

			$this->view->first_active_day = $start_activity;
			$this->view->last_active_day = $end_activity;

			$pseudo_post['first_active_day'] = $start_activity;
			$pseudo_post['last_active_day'] = $end_activity;

			$this->view->start_mp_rent = $start_rent;
			$this->view->end_mp_rent = $end_rent;

			$pseudo_post['start_mp_rent'] = $start_rent;
			$pseudo_post['end_mp_rent'] = $end_rent;
			$pseudo_post['insurance_no'] = $this->view->insurance_no;


			$this->view->client_ik = $client_details[0]['institutskennzeichen'];
			$pseudo_post['client_ik'] = $this->view->client_ik;

			if(strlen($_POST['pdf']) > 0 || $_REQUEST['mode'] == 'pdfs')
			{
				if(strlen($_REQUEST['iid']) == '0')
				{
					$pseudo_post['clientid'] = $clientid;
					$pseudo_post['monthdays_in_period'] = $monthdays_in_period;
					$pseudo_post['period_days_cs'] = $days_in_period_cs;
					$pseudo_post['national_holidays'] = $national_holidays;
					$pseudo_post['health_insurance_ik'] = $this->view->health_insurance_ik;
					$pseudo_post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;

					$patient_address = $pseudo_post['patientdetails']['first_name'] . ' ' . $pseudo_post['patientdetails']['last_name'] . "<br />";
					$patient_address .= $pseudo_post['patientdetails']['street1'] . "<br />";
					$patient_address .= $pseudo_post['patientdetails']['zip'] . ' ' . $pseudo_post['patientdetails']['city'] . "<br />";

					$pseudo_post['patient_address'] = $patient_address;
					$pseudo_post['hi_address'] = $hi_address;
					$pseudo_post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
					$pseudo_post['first_sapv_day'] = $this->view->first_sapv_day;
					$pseudo_post['last_sapv_day'] = $this->view->last_sapv_day;
					$pseudo_post['invoice_items'] = $invoice_items;
					$pseudo_post['active_days_in_period'] = $this->view->active_days_in_period;
					$pseudo_post['medipumpe'] = $this->view->medipumpedetails;
					$pseudo_post['medipumpe_details_only'] = $medipumpe_details_only;
					$pseudo_post['hospital_days'] = $this->view->hospital_days;
					$pseudo_post['medipumpedetails'] = $_POST['medipump'];
					$pseudo_post['medipump_ids'] = $_POST['medipump_ids'];
				}
				else
				{
					$pseudo_post['clientid'] = $clientid;
					$pseudo_post['monthdays_in_period'] = $monthdays_in_period;
					$pseudo_post['period_days_cs'] = $days_in_period_cs;
					$pseudo_post['national_holidays'] = $national_holidays;
					$pseudo_post['health_insurance_ik'] = $this->view->health_insurance_ik;
					$pseudo_post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;
					$pseudo_post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
					$pseudo_post['saved_invoice'] = '1';
					$pseudo_post['invoice_items'] = $medipumpsinvoice_items;
					$pseudo_post['active_days_in_period'] = $this->view->active_days_in_period;
					$pseudo_post['medipumpe'] = $this->view->medipumpedetails;
					$pseudo_post['medipump_list'] = $this->view->medipump_list;
					$pseudo_post['hospital_days'] = $this->view->hospital_days;
					$pseudo_post['medipumpedetails'] = $medipumpsinvoice_details;

//				$pseudo_post['medipump_ids'] = $_POST['medipump_ids'];
				}

				if(strlen($_POST['pdf']) > 0)
				{
					$this->generate_pdf($pseudo_post, "MedipumpsControl", "medipumpscontrolpdf.html");
				}

				//generate patient and healthinsurance pdfs
				if($_REQUEST['pdfquick'] != 1)
				{
//					21.06.2013 Added invoice number type START
					$medipumps_inv_number = $medipumpsinvoices->get_next_invoice_number($clientid, true);
					$prefix = $medipumps_inv_number['prefix'];
					$invoicenumber = $medipumps_inv_number['invoicenumber'];
//					21.06.2013 Added invoice number type END

					$invoice_ids = array();

					if($both_invoices || $privatpatient)
					{
						//insert_patient_invoice
						$ins_inv_patient = new MedipumpsInvoices();
						$ins_inv_patient->invoice_start = $current_period['start'];
						$ins_inv_patient->invoice_end = $current_period['end'];
						$ins_inv_patient->start_active = date('Y-m-d H:i:s', strtotime($pseudo_post['first_active_day']));
						$ins_inv_patient->end_active = date('Y-m-d H:i:s', strtotime($pseudo_post['last_active_day']));
						$ins_inv_patient->start_mp_rent = date('Y-m-d H:i:s', strtotime($pseudo_post['start_mp_rent']));
						$ins_inv_patient->end_mp_rent = date('Y-m-d H:i:s', strtotime($pseudo_post['end_mp_rent']));
						$ins_inv_patient->ipid = $ipid;
						$ins_inv_patient->client = $clientid;
						$ins_inv_patient->prefix = $prefix;
						$ins_inv_patient->invoice_number = $invoicenumber;
						$ins_inv_patient->total_amount = $invoice_items['grand_total'];

						if($privatpatient)
						{
							$ins_inv_patient->shared_amount = $invoice_items['percent_value'];
							$ins_inv_patient->invoice_total = $invoice_items['percentless_amount'];
						}
						else
						{
							$ins_inv_patient->shared_amount = $invoice_items['percentless_amount'];
							$ins_inv_patient->invoice_total = $invoice_items['percent_value'];
						}

						$ins_inv_patient->address = $pseudo_post['patient_address'];
						$ins_inv_patient->type = 'p';
						$ins_inv_patient->status = '1'; // DRAFT - ENTWURF
						$ins_inv_patient->save();
						$invoice_ids[] = $ins_inv_patient->id;

						$invoicenumber++;
					}

					if($privatpatient === false)
					{
						//insert hi invoice START
						$ins_inv = new MedipumpsInvoices();
						$ins_inv->invoice_start = $current_period['start'];
						$ins_inv->invoice_end = $current_period['end'];
						$ins_inv->start_active = date('Y-m-d H:i:s', strtotime($pseudo_post['first_active_day']));
						$ins_inv->end_active = date('Y-m-d H:i:s', strtotime($pseudo_post['last_active_day']));
						$ins_inv->start_mp_rent = date('Y-m-d H:i:s', strtotime($pseudo_post['start_mp_rent']));
						$ins_inv->end_mp_rent = date('Y-m-d H:i:s', strtotime($pseudo_post['end_mp_rent']));
						$ins_inv->ipid = $ipid;
						$ins_inv->client = $clientid;
						$ins_inv->prefix = $prefix;
						$ins_inv->invoice_number = $invoicenumber;
						$ins_inv->total_amount = $invoice_items['grand_total'];
						$ins_inv->shared_amount = $invoice_items['percent_value'];
						$ins_inv->invoice_total = $invoice_items['percentless_amount'];
						$ins_inv->address = $pseudo_post['hi_address'];
						$ins_inv->type = 'h';
						$ins_inv->status = '1'; // DRAFT - ENTWURF
						$ins_inv->save();
						$invoice_ids[] = $ins_inv->id;
					}


					foreach($invoice_ids as $k_inv_id => $v_inv_id)
					{
						foreach($invoice_items as $k_inv => $v_inv_items)
						{
							if(is_numeric($k_inv))
							{
								foreach($v_inv_items as $k_invoice_pricetype => $v_invoice_details)
								{
									$priceset = substr($k_invoice_pricetype, 0, 1);

									$invoice_items_arr[] = array(
										'invoice' => $v_inv_id,
										'client' => $clientid,
										'shortcut' => $v_invoice_details['shortcut'],
										'name' => $v_invoice_details['name'],
										'qty' => $v_invoice_details['qty'],
										'price' => $v_invoice_details['price'],
										'priceset' => $priceset
									);
								}
							}
						}
					}

					if(count($invoice_items) > 0)
					{
						//insert many records with one query!!
						$collection = new Doctrine_Collection('MedipumpsInvoiceItems');
						$collection->fromArray($invoice_items_arr);
						$collection->save();
					}
				}


				if(strlen($_REQUEST['single']) == '0' && strlen($_REQUEST['pdfquick']) == '0')
				{
					//dont get pdf
					$this->_redirect(APP_BASE . 'invoice/medipumpsinvoices');
					exit;
				}

				//insert invoice END
				$pseudo_post['prefix'] = $prefix;
				$pseudo_post['invoice_number'] = $rnummer;
				
				if($_REQUEST['mode'] == 'pdfs' && strlen($_REQUEST['single']) > '0')
				{
					$pseudo_post['medipumpedetails'] = $this->view->medipumpedetails;
					$pseudo_post['medipump_ids'] = $master_data_medipump_ids;
					if(strlen($_REQUEST['compl_date']) > 0)
					{
						$pseudo_post['completed_date'] = date('d.m.Y', $_REQUEST['compl_date']);
					}

					if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
					{
						$storno_data = $medipumpsinvoices->getMedipumpsInvoice($_REQUEST['storno']);

						//ISPC-2532 Lore 09.11.2020
						$pseudo_post['storned_invoice_number'] = $pseudo_post['prefix'].$pseudo_post['invoice_number'];
						
						$pseudo_post['address'] = $storno_data['address'];
						$pseudo_post['prefix'] = $storno_data['prefix'];
						$pseudo_post['invoice_number'] = $storno_data['invoice_number'];
						if($storno_data['completed_date'] != '0000-00-00 00:00:00')
						{
						    $pseudo_post['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
						}
						$pseudo_post['first_active_day'] = date('d.m.Y', strtotime($storno_data['start_active']));
						$pseudo_post['last_active_day'] = date('d.m.Y', strtotime($storno_data['end_active']));
						$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];

						if($storno_data['start_mp_rent'] != '0000-00-00 00:00:00' && $storno_data['end_mp_rent'] != '0000-00-00 00:00:00')
						{
							$pseudo_post['start_mp_rent'] = date('d.m.Y', strtotime($storno_data['start_mp_rent']));
							$pseudo_post['end_mp_rent'] = date('d.m.Y', strtotime($storno_data['end_mp_rent']));
						}


						//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
						if($_REQUEST['bulk_print'] == '1'){
						    $pseudo_post['unique_id'] = $storno_data['id'];
						}else{
						    $pseudo_post['unique_id'] = $storno_data['record_id'];
						}
						$pseudo_post['sapv_footer'] = $storno_data['footer'];

						$pseudo_post['grand_total'] = $storno_data['total_amount'];
						$pseudo_post['percent_value'] = $storno_data['shared_amount'];
						$pseudo_post['percentless_amount'] = ($storno_data['invoice_total'] * (-1));



						if($_REQUEST['single'] == 'p') //patient invoice only
						{
							$template_files = array('storno_invoice_medipumps_patient.html');
						}
						else if($_REQUEST['single'] == 'h') //health insurance only
						{
							$template_files = array('storno_invoice_medipumps_hi.html');
						}
					}
					else
					{
						if($_REQUEST['single'] == 'p') //patient invoice only
						{
							$template_files = array('invoice_medipumps_patient.html');
						}
						else if($_REQUEST['single'] == 'h') //health insurance only
						{
							$template_files = array('invoice_medipumps_hi.html');
						}
					}

					$orientation = array('P');
					$background_pages = array('0'); //0 is first page;

					//$pseudo_post['invoice_number'] = $rnummer;
					if($_REQUEST['bulk_print'] == '1'){
					    $pseudo_post['bulk_print'] = 1;
					    $pseudo_post['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
					    
					    $files = $this->generate_pdf($pseudo_post, "MedipumpsControlPdfs", $template_files, $orientation, $background_pages);
					    
					    return $files;
					    exit();
					} else{
    					$this->generate_pdf($pseudo_post, "MedipumpsControlPdfs", $template_files, $orientation, $background_pages);
					    
					}
				}
			}
		}

		public function medipumpsinvoicesAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$medipumps_invoices_form = new Application_Form_MedipumpsInvoices();

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			
			//ISPC-2609 Ancuta 26.09.2020
			$userid = $logininfo->userid;
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "bw_mp_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			
			if(count($invoice_user_printjobs) > 1 ){
			    echo $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			
			
			if($this->getRequest()->isPost())
			{
				if($_POST['draftmore'] == "1")
				{
					$transform = $medipumps_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $medipumps_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				elseif($_POST['batch_print_more'])
				{
				    $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
				    $params['batch_print'] = '1'; //enables batch print procedure
				    $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
				    $params['get_pdf'] = '0'; //stops downloading single pdf
				    
				    //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
				    if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
				        
				        
				        
				    } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
				        
				        $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
				        
				        $print_job_data = array();
				        $print_job_data['clientid'] = $clientid;
				        $print_job_data['user'] = $userid;
				        $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
				        $print_job_data['output_type'] = 'pdf';
				        $print_job_data['status'] = 'active';
				        $print_job_data['invoice_type'] = 'bw_mp_invoice';
				        $print_job_data['print_params'] = serialize($params);
				        $print_job_data['print_function'] = 'medipumpscontrolAction';
				        $print_job_data['print_controller'] = $this->getRequest()->getControllerName();
				        
				        foreach($_POST['document'] as $k=>$inv_id){
				            $print_job_data['PrintJobsItems'][] = array(
				                'clientid'=>$print_job_data['clientid'],
				                'user'=>$print_job_data['user'],
				                'invoice_id'=>$inv_id,
				                'invoice_type'=>$print_job_data['invoice_type'],
				                'status'=>"new"
				            );
				        }
				        
				        $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
				        $print_id = $PrintJobsBulk_obj->id;
				        
				        if($print_id){
				            $this->__StartPrintJobs();
				        }
				    }
				}
				else
				{
					$new_payment = $medipumps_invoices_form->submit_payment($_POST);
				}
				
				
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				$msg="";
				if($print_id){
				    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				}
				$this->_redirect(APP_BASE . 'invoice/medipumpsinvoices'.$msg); //to avoid resubmission
				//$this->_redirect(APP_BASE . 'invoice/medipumpsinvoices'); //to avoid resubmission
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$mp_invoices = new MedipumpsInvoices();
					$clone_record = $mp_invoices->create_storno_invoice($invoiceid);
					$this->_redirect(APP_BASE . 'invoice/medipumpsinvoices?flg=suc');
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $medipumps_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/medipumpsinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/medipumpsinvoices?flg=delerr');
				}
			}

			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("89", $clientid)) // change tab name
			{
				$this->view->change_tab_name = 1;
			}
			else
			{
				$this->view->change_tab_name = 0;
			}
			
		}

		public function fetchmedipumpsinvoicelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$medipumps_invoices_payments = new MedipumpsInvoicePayments();
			$users = new User();

			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('MedipumpsInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);


			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{
				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND isdelete = 0 ';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND isdelete=0';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND DATE(NOW()) > DATE(invoice_end)  AND isdelete=0';
					break;

				case 'all':
					$filters['hiinvoice'] = ' ';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';
					break;
			}


			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
				CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);

			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('MedipumpsInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}
				$status_count_invoices["all"][] = '1';
			}

			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('MedipumpsInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}
			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('MedipumpsInvoices')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";

			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
					//MedipumpsInvoices
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [OLD] 
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort,concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('MedipumpsInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
//		print_r($invoices->getSqlQuery());
			$invoicelimit = $invoices->fetchArray();
//		print_r($invoicelimit);
//		exit;



			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $medipumps_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);

			$this->view->storned_invoces = MedipumpsInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function editmedipumpsinvoiceAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
//		$sgbv_invoices = new SgbvInvoices();
			$medipumps_invoices = new MedipumpsInvoices();
			$medipumps_invoices_items = new MedipumpsInvoiceItems();
			$medipumps_invoices_form = new Application_Form_MedipumpsInvoices();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$this->view->hide_patient_tab = '1';

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $medipumps_invoices->getMedipumpsInvoice($invoice_id);
			}

			if(in_array($invoice_data['id'], MedipumpsInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $medipumps_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{
					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}

				//save here
				if(strlen($_POST['invoice']['address']) > 0 ){
				    if(strpos($_POST['invoice']['address'],"style"))
				    {
				        $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
				    }
				    $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
				}				
				
				$edit_invoice = $medipumps_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);

				if(empty($_REQUEST['pdf']))
				{
					if($edit_invoice)
					{

						$this->_redirect(APP_BASE . 'invoice/medipumpsinvoices?flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/medipumpsinvoices?flg=edterr');
					}
				}
				else if(!empty($_REQUEST['pdf']) && $edit_invoice)
				{

					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}

					if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
					}
					else if(empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
					}


					$this->_redirect(APP_BASE . 'invoice/medipumpscontrol?iid=' . $_REQUEST['invoiceid'] . '&mode=pdfs&pdfquick=1&single=' . $_POST['invoice_type'] . '&compl_date=' . strtotime($pdf_data['completed_date']));
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{

				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoice/medipumpsinvoices');
				}

				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];

				$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);

				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}
					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}


				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}

				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}
//			print_r($invoice_data);exit;
				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;

				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is preset
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		public function medipumpslistpaymentsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$mp_invoices = new MedipumpsInvoices();
			$mp_payments = new MedipumpsInvoicePayments();
			$mp_invoice_form = new Application_Form_MedipumpsInvoices();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $mp_payments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $mp_payments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $mp_payments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $mp_invoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $mp_invoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $mp_payments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoice/mplistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		//INVOICE SETTINGS
		public function invoicesettingsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$invoice_settings = new InvoiceSettings();


//21.06.2013 added client individual and collective price range!
			//check if individual or collective price range

			$client = new Client();
			$client_data = $client->getClientDataByid($clientid);
			$this->view->client_details = $client_data;

			if(!$client_data)
			{
				$this->_redirect(APP_BASE . 'error/privileges');
			}
			else
			{
				$this->view->invoice_number_type = $client_data[0]['invoice_number_type'];

				if($client_data[0]['invoice_number_type'] == '1')
				{
					$this->view->invoice_number_prefix = $client_data[0]['invoice_number_prefix'];
					$this->view->invoice_number_start = $client_data[0]['invoice_number_start'];
				}
			}
//21.06.2013 END
			//get client permissions to the invoices from leftnavigation start
			$client_menu_perms = Doctrine_Query::create()
				->select('*')
				->from('MenuClient')
				->andWhere('clientid = "' . $clientid . '"');
			$client_menu_permssions = $client_menu_perms->fetchArray();

			$menu_perms[] = '999999999';
			foreach($client_menu_permssions as $val)
			{
				$menu_perms[] = $val['menu_id'];
			}

			$menus_cl = Doctrine_Query::create()
				->select('id, menu_link, parent_id, isdelete')
				->from('Menus m')
				->where('m.isdelete = "0"')
				->andWhereIn("m.id", $menu_perms)
				->andWhere('m.isdelete = 0')
				->andWhere('m.forsuperadmin = 0')
				->andWhere('m.menu_link LIKE "%invoice/%"  OR m.menu_link LIKE "%invoicenew/%"')
				->orderBy('m.sortorder ASC');
			$menus_cl_arr = $menus_cl->fetchArray();

			foreach($menus_cl_arr as $k_menu => $v_menu)
			{
				if(strlen($v_menu['menu_link']) > 0)
				{
					$allowed_menu_links[] = $v_menu['menu_link'];
				}
			}

			$this->view->alowed_client_invoices = $allowed_menu_links;

			//get client permissions to the invoices from leftnavigation start

			$invoice_types = Pms_CommonData::get_invoice_types();

			
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
			$this->view->allowed_invoice = $client_allowed_invoice[0];
				
			// if client has invoicenew/invoicesnew and 
			

			//filter the invoice types and check if is allowed
			foreach($invoice_types as $k_invoice_type => $v_invoice_type)
			{
				if(in_array($k_invoice_type, $allowed_menu_links))
				{
					$allowed_types[] = $v_invoice_type;
				}
			}
			
			if(!empty($allowed_menu_links) && in_array('invoicenew/invoicesnew',$allowed_menu_links)){
			    $allowed_types[] = $client_allowed_invoice[0]; // something should be added for the new system in both old and new are named the same
			}
			
 			

			$this->view->invoice_types = $allowed_types;
			$this->view->invoice_type_res = $invoice_settings->getClientInvoiceSettings($clientid, $allowed_types);


			if($this->getRequest()->isPost())
			{
				$has_edit_permissions = Links::checkLinkActionsPermission();
				if(!$has_edit_permissions) // if canedit = 0 - don't allow any additions or changes
				{
					$this->_redirect(APP_BASE . "error/previlege");
					exit;
				}
				
				$invoice_settings_form = new Application_Form_InvoiceSettings();

				if($_POST['invoice_number_type'] == '0') //first way, individual settings
				{
					$save_settings = $invoice_settings_form->insert_invoice_settings($_POST, $clientid);

					if($save_settings)
					{
						$this->_redirect(APP_BASE . 'invoice/invoicesettings?flg=suc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/invoicesettings?flg=err');
					}
				}
				else if($_POST['invoice_number_type'] == '1') //second way, collective settings
				{
					$save_settings = $invoice_settings_form->update_collective_settings($_POST, $clientid);

					if($save_settings)
					{
						$this->_redirect(APP_BASE . 'invoice/invoicesettings?flg=suc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/invoicesettings?flg=err');
					}
				}
			}
		}

		public function invoicejournalAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			
			$patientmaster = new PatientMaster();
			$client = new Client();


			$modules = new Modules();
			$client_modules = $modules->get_client_modules();
			$this->view->client_modules = $client_modules;
			
			
			$client_data = $client->getClientDataByid($clientid);
			$this->view->client_details = $client_data;
			//$invoice_types = Pms_CommonData::get_invoice_types();
			$invoice_types = Pms_CommonData::get_all_invoice_types(false,true); //Show only external invoices (TODO-2510)

			
			//all invoice types
			//get allowed client invoices
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
			$new_invoices_allowed = $client_allowed_invoice[0];
			
			
			//all invoice types
			$this->view->invoice_types = $invoice_types;

			//get invoices from menu permissions
			$client_menu_perms = Doctrine_Query::create()
				->select('*')
				->from('MenuClient')
				->andWhere('clientid = "' . $clientid . '"');
			$client_menu_permssions = $client_menu_perms->fetchArray();

			$menu_perms[] = '999999999';
			foreach($client_menu_permssions as $val)
			{
				$menu_perms[] = $val['menu_id'];
			}

			$menus_cl = Doctrine_Query::create()
				->select('id, menu_link, parent_id, isdelete')
				->from('Menus m')
				->where('m.isdelete = "0"')
				->andWhereIn("m.id", $menu_perms)
				->andWhere('m.isdelete = 0')
				->andWhere('m.forsuperadmin = 0')
				->andWhere('m.menu_link LIKE "%invoice/%" or m.menu_link LIKE "%invoicenew/%"')
				->orderBy('m.sortorder ASC');
			$menus_cl_arr = $menus_cl->fetchArray();
			
			foreach($menus_cl_arr as $k_menu => $v_menu)
			{
				if(strlen($v_menu['menu_link']) > 0)
				{
					$allowed_menu_links[] = $v_menu['menu_link'];
				}
			}
			$allowed_invoice_types = array();
			foreach($invoice_types as $k_invoice_type => $v_invoice_type)
			{
				
				if(in_array($k_invoice_type, $allowed_menu_links))
				{
					$allowed_invoice_types[] = $v_invoice_type;
				}
			}
			if( ! empty($new_invoices_allowed) && in_array("invoicenew/invoicesnew",$allowed_menu_links)){
				$allowed_invoice_types[] = $new_invoices_allowed;
			}
			$allowed_invoice_types = array_unique($allowed_invoice_types);
			//ISPC-2312 Ancuta 08.12.2020
			if($_REQUEST['new']=="1"){
			    $allowed_invoice_types = array();
			    //all invoice types
			    $this->view->invoice_types = array();
			    
	       		$client_allowed_invoice_new = ClientInvoiceMultiplePermissions::get_client_allowed_invoices($clientid);
	       		if(!empty($client_allowed_invoice_new)){
	       		    $allowed_invoice_types = array_keys($client_allowed_invoice_new);
	       		}
	       		
			}
			
			
			$this->view->allowed_invoice_types = $allowed_invoice_types;

			if(in_array("sh_internal_invoice",$allowed_invoice_types ) && count($allowed_invoice_types) > 1 ){
			    $sh_internal_invoice  = "include_sh_internal";
			} else if ( in_array("sh_internal_invoice",$allowed_invoice_types) && count($allowed_invoice_types) == 1 ) {
			    $sh_internal_invoice  = "only_sh_internal";
			} else {
			    $sh_internal_invoice  = "no_sh_internal";
			}
			
			$this->view->sh_internal_invoice_status = $sh_internal_invoice;
			
			if(in_array("nie_patient_invoice",$allowed_invoice_types ) && count($allowed_invoice_types) > 1 ){
			    $nie_patient_invoice  = "include_hi_invoice";
			} else if ( in_array("nie_patient_invoice",$allowed_invoice_types) && count($allowed_invoice_types) == 1 ) {
			    $nie_patient_invoice  = "only_hi_invoice";
			} else {
			    $nie_patient_invoice  = "no_hi_invoice";
			}
			
			$this->view->nie_patient_invoice_status = $nie_patient_invoice;
            
			
			// ISPC-1866 and ISPC-2171
			$generate_csv_select  = array();
			$generate_csv_select = array(
					'' => $this->view->translate("select"),
					"csv" => $this->view->translate("generate_v1_csv"),
					"csv_v2" => $this->view->translate("generate_v2_csv"),
			);
			
			if($nie_patient_invoice == "include_hi_invoice" || $nie_patient_invoice == "only_hi_invoice"){
    			$generate_csv_select['nie_csv'] = $this->view->translate("generate_nie_csv");  
			}
			
			if ( isset($client_modules[169]) && $client_modules[169] == 1 ){
    			$generate_csv_select['unna_csv'] = $this->view->translate("generate_unna_csv");
			}
			//ISPC-2505 Lore 17.12.2019
			if ( isset($client_modules[210]) && $client_modules[210] == 1 ){
			    $generate_csv_select['e_s_csv'] = $this->view->translate("generate_e_s_csv");
			}
			
			if ( isset($client_modules[166]) && $client_modules[166] == 1 ){
    			$generate_csv_select['sap_txt'] = $this->view->translate("generate_sap_text");  
			}

		    //ISPC-2452 Ancuta 19.09.2019
			if ( isset($client_modules[198]) && $client_modules[198] == 1 ){
    			$generate_csv_select['sap_ii_txt'] = $this->view->translate("generate_sap_ii_text"); 
    			
    			//TODO-2969 Ancuta 05.03.2020
    			$show_inital_file_generate_button = 0 ; 
    			$logininfo = new Zend_Session_Namespace('Login_Info');
    			if($logininfo->usertype == 'SA')
    			{
    			    $show_inital_file_generate_button = 1 ;
    			}
    			$this->view->inital_file_generate_button = $show_inital_file_generate_button;
    			// --
    			
			}
			
			
			
			if ( isset($client_modules[177]) && $client_modules[177] == 1 ){
    			$generate_csv_select['sh_txt'] = $this->view->translate("generate_sh_text");  
			}
			if ( isset($client_modules[179]) && $client_modules[179] == 1 ){
    			$generate_csv_select['sh_external_txt'] = $this->view->translate("generate_sh_external_txt");  
			}
			
			
			if ( isset($client_modules[185]) && $client_modules[185] == 1 ){
    			$generate_csv_select['bw_external_csv'] = $this->view->translate("generate_bw_external_csv");  
			}
			
			if ( isset($client_modules[194]) && $client_modules[194] == 1 ){
    			$generate_csv_select['bw_external_2_csv'] = $this->view->translate("generate_bw_external_2_csv");  
			}
			
			if ( isset($client_modules[232]) && $client_modules[232] == 1 ){ // ISPC-2566 Andrei 28.05.2020 
			    $generate_csv_select['bw_external_3_csv'] = $this->view->translate("generate_bw_external_3_csv");
			}
	
			
			$this->view->generate_csv_select =$generate_csv_select;

			
			$period['start'] = date('Y-m-', time()) . '01';
			$period['end'] = date('Y-m-', time()) . date('t', time());

			$this->view->period = $period;

			$del_storno = 0;
			if($_REQUEST['mode'] == 'storno' && strlen($_REQUEST['inv_id']) > '0')
			{
				$invoice_arr = explode('-', $_REQUEST['inv_id']);
				$case = $invoice_arr[0];
				$invoiceid = $invoice_arr[1];

				if(strlen($invoice_arr[2]) > 0)
				{
					$del_storno = $invoice_arr[2];
				}

				if($del_storno == '0')
				{
					switch($case)
					{
						case 'client_invoices':
							$client_invoices = new ClientInvoices();
							$clone_record = $client_invoices->create_storno_invoice($invoiceid);
							break;
						case 'hi_invoice':
							$hi_invoices = new HiInvoices();
							$clone_record = $hi_invoices->create_storno_invoice($invoiceid);
							break;
						case 'u_invoice':
							$u_invoices = new UserInvoices();
							$clone_record = $u_invoices->create_storno_invoice($invoiceid);
							break;
						case 'bw_invoice':
							$bw_invoices = new BwInvoices();
							$clone_record = $bw_invoices->create_storno_invoice($invoiceid);
							break;
						case 'sgbv_invoice':
							$sgbv_invoices = new SgbvInvoices();
							$clone_record = $sgbv_invoices->create_storno_invoice($invoiceid);
							break;
						case 'medipumps_invoice':
							$table = 'MedipumpsInvoices';
							$mp_invoices = new MedipumpsInvoices();
							$clone_record = $mp_invoices->create_storno_invoice($invoiceid);
							break;
						case 'bre_invoices':
//						$table = 'BreInvoice';
							$bre_invoices = new BreInvoices();
							$clone_record = $bre_invoices->create_storno_invoice($invoiceid);
							break;
						case 'bre_hospiz_invoices':
//						$table = 'BreInvoice';
							$bre_hospiz_invoices = new BreHospizInvoices();
							$clone_record = $bre_hospiz_invoices->create_storno_invoice($invoiceid);
							break;
						case 'sgbxi_invoice':
							$sgbxi_invoices = new SgbxiInvoices();
							$clone_record = $sgbxi_invoices->create_storno_invoice($invoiceid);
							break;
						case 'he_invoice':
							$he_invoices = new HeInvoices();
							$clone_record = $he_invoices->create_storno_invoice($invoiceid);
							break;
						

						case 'sh_internal_invoice':
							$sh_internal_invoices = new ShInternalInvoices();
							$clone_record = $sh_internal_invoices->create_storno_invoice($invoiceid);
							break;
							

							
						// NEW INVOICES
						case 'sh_invoice':
							$sh_invoices = new ShInvoices();
							$clone_record = $sh_invoices->create_storno_invoice($invoiceid);
							break;
						
						case 'bayern_invoices_new':
							$bay_invoices = new BayernInvoicesNew();
							$clone_record = $bay_invoices->create_storno_invoice($invoiceid);
							break;
							
						case 'rlp_invoice':
							$rlp_invoices = new RlpInvoices();
							$clone_record = $rlp_invoices->create_storno_invoice($invoiceid);
							break;
							
						case 'bw_invoice_new':
							$bw_invoices_new = new BwInvoicesNew();
							$clone_record = $bw_invoices_new->create_storno_invoice($invoiceid);
							break;
							
						case 'hospiz_invoice':
							$hospiz_invoice = new HospizInvoices();
							$clone_record = $hospiz_invoice->create_storno_invoice($invoiceid);
							break;
							
						case 'bw_medipumps_invoice':
							$medipump_invoice = new MedipumpsInvoicesNew();
							$clone_record = $medipump_invoice->create_storno_invoice($invoiceid);
							break;

						//ISPC-2263 Ancuta 14.05.2021
						case 'rp_invoice':
						    $rp_invoices = new RpInvoices();
							$clone_record = $rp_invoices->create_storno_invoice($invoiceid);
							break;
						// --	
							
						//ISPC-2407 Ancuta 14.05.2021
						case 'bra_invoice':
							$bra_invoices = new BraInvoices();
							$clone_record = $bra_invoices->create_storno_invoice($invoiceid);
							break;
                        //--
							
						//ISPC-2257 + ISPC-2272	
						case 'sh_shifts_internal_invoice':
							$sh_shifts_internal_invoices = new ShShiftsInternalInvoices();
							$clone_record = $sh_shifts_internal_invoices->create_storno_invoice($invoiceid);
							break;

							
							
							
						default:
							$table = false;
							break;
					}
				}
				else if($del_storno == '1')
				{
					switch($case)
					{
						case 'client_invoices':
							$client_invoices = new ClientInvoices();
							$clone_record = $client_invoices->del_storno_invoice($invoiceid);
							break;
						case 'hi_invoice':
							$hi_invoices = new HiInvoices();
							$clone_record = $hi_invoices->del_storno_invoice($invoiceid);
							break;
						case 'u_invoice':
							$u_invoices = new UserInvoices();
							$clone_record = $u_invoices->del_storno_invoice($invoiceid);
							break;
						case 'bw_invoice':
							$bw_invoices = new BwInvoices();
							$clone_record = $bw_invoices->del_storno_invoice($invoiceid);
							break;
						case 'bre_invoices':
							$bre_invoices = new BreInvoices();
							$clone_record = $bre_invoices->del_storno_invoice($invoiceid);
						case 'bre_hospiz_invoices':
							$bre_hospiz_invoices = new BreHospizInvoices();
							$clone_record = $bre_hospiz_invoices->del_storno_invoice($invoiceid);
							break;
						case 'sgbv_invoice':
							$sgbv_invoices = new SgbvInvoices();
							$clone_record = $sgbv_invoices->del_storno_invoice($invoiceid);
							break;
						case 'medipumps_invoice':
							$table = 'MedipumpsInvoices';
							$mp_invoices = new MedipumpsInvoices();
							$clone_record = $mp_invoices->del_storno_invoice($invoiceid);
							break;
						case 'sgbxi_invoice':
							$table = 'SgbxiInvoice';
							$sgbxi_invoices = new SgbxiInvoices();
							$clone_record = $sgbxi_invoices->del_storno_invoice($invoiceid);
							break;
						case 'he_invoice':
							$table = 'HeInvoice';
							$he_invoices = new HeInvoices();
							$clone_record = $he_invoices->del_storno_invoice($invoiceid);
							break;
							
						
						
						case 'sh_internal_invoice':
							$sh_internal_invoices = new ShInternalInvoices();
							$clone_record = $sh_internal_invoices->del_storno_invoice($invoiceid);
							break;

							
						// NEW INVOICES							
						case 'sh_invoice':
							$table = 'ShInvoice';
							$sh_invoices = new ShInvoices();
							$clone_record = $sh_invoices->del_storno_invoice($invoiceid);
							break;
							
						case 'bayern_invoices_new':
							$bay_invoices = new BayernInvoicesNew();
							$clone_record = $bay_invoices->del_storno_invoice($invoiceid);
							break;
							
						case 'rlp_invoice':
							$rlp_invoices = new RlpInvoices();
							$clone_record = $rlp_invoices->del_storno_invoice($invoiceid);
							break;
							
						case 'bw_invoice_new':
							$bw_invoices_new = new BwInvoicesNew();
							$clone_record = $bw_invoices_new->del_storno_invoice($invoiceid);
							break;
							
						case 'hospiz_invoice':
							$hospiz_invoice = new HospizInvoices();
							$clone_record = $hospiz_invoice->del_storno_invoice($invoiceid);
							break;

						case 'bw_medipumps_invoice':
							$medipump_invoice = new MedipumpsInvoicesNew();
							$clone_record = $medipump_invoice->del_storno_invoice($invoiceid);
							break;							
							
						//ISPC-2257 + ISPC-2272
						case 'sh_shifts_internal_invoice':
						    $sh_shifts_internal_invoices = new ShShiftsInternalInvoices();
						    $clone_record = $sh_shifts_internal_invoices->del_storno_invoice($invoiceid);
						    break;
						    
						    
						//ISPC-2263 Ancuta 14.05.2021
						case 'rp_invoice':
						    $rp_invoices = new RpInvoices();
						    $clone_record = $rp_invoices->del_storno_invoice($invoiceid);
						    break;
						 // --
						    
						//ISPC-2407 Ancuta 14.05.2021
						case 'bra_invoice':
						    $bra_invoices = new BraInvoices();
						    $clone_record = $bra_invoices->del_storno_invoice($invoiceid);
						    break;
						//--
						
						    
						default:
							$table = false;
							break;
					}
				}

				exit;
			}
		}

		
		
		/**
		 * TODO-2510 ISPC: Invoice journal
		 * Ancuta 27.08.2019
		 * Copy of fn  invoicejournal
		 */
		public function internalinvoicejournalAction()
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		
		    if(!$logininfo->clientid)
		    {
		        $this->_redirect(APP_BASE . "error/noclient");
		        exit;
		    }
		    	
		    $patientmaster = new PatientMaster();
		    $client = new Client();
		
		
		    $modules = new Modules();
		    $client_modules = $modules->get_client_modules();
		    $this->view->client_modules = $client_modules;
		    	
		    	
		    $client_data = $client->getClientDataByid($clientid);
		    $this->view->client_details = $client_data;
		    $invoice_types = Pms_CommonData::get_all_invoice_types(true,false); //Show only internal invoices (TODO-2510)

		    //all invoice types
		    //get allowed client invoices
		    $client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
		    $new_invoices_allowed = $client_allowed_invoice[0];
		    	
		    //all invoice types
		    $this->view->invoice_types = $invoice_types;
		
		    //get invoices from menu permissions
		    $client_menu_perms = Doctrine_Query::create()
		    ->select('*')
		    ->from('MenuClient')
		    ->andWhere('clientid = "' . $clientid . '"');
		    $client_menu_permssions = $client_menu_perms->fetchArray();
		
		    $menu_perms[] = '999999999';
		    foreach($client_menu_permssions as $val)
		    {
		        $menu_perms[] = $val['menu_id'];
		    }
		
		    $menus_cl = Doctrine_Query::create()
		    ->select('id, menu_link, parent_id, isdelete')
		    ->from('Menus m')
		    ->where('m.isdelete = "0"')
		    ->andWhereIn("m.id", $menu_perms)
		    ->andWhere('m.isdelete = 0')
		    ->andWhere('m.forsuperadmin = 0')
		    ->andWhere('m.menu_link LIKE "%invoice/%" or m.menu_link LIKE "%invoicenew/%"')
		    ->orderBy('m.sortorder ASC');
		    $menus_cl_arr = $menus_cl->fetchArray();
		
		    foreach($menus_cl_arr as $k_menu => $v_menu)
		    {
		        if(strlen($v_menu['menu_link']) > 0)
		        {
		            $allowed_menu_links[] = $v_menu['menu_link'];
		        }
		    }
		    $allowed_invoice_types = array();
		    foreach($invoice_types as $k_invoice_type => $v_invoice_type)
		    {
		
		        if(in_array($k_invoice_type, $allowed_menu_links))
		        {
		            $allowed_invoice_types[] = $v_invoice_type;
		        }
		    }
		    
		    /* 
		     * // In client invoices - new there are no INTERNAL invoices
		    if( ! empty($new_invoices_allowed) && in_array("invoicenew/invoicesnew",$allowed_menu_links)){
		        $allowed_invoice_types[] = $new_invoices_allowed;
		    }
		     */
 
		    $this->view->allowed_invoice_types = $allowed_invoice_types;
		
		    if(in_array("sh_internal_invoice",$allowed_invoice_types ) && count($allowed_invoice_types) > 1 ){
		        $sh_internal_invoice  = "include_sh_internal";
		    } else if ( in_array("sh_internal_invoice",$allowed_invoice_types) && count($allowed_invoice_types) == 1 ) {
		        $sh_internal_invoice  = "only_sh_internal";
		    } else {
		        $sh_internal_invoice  = "no_sh_internal";
		    }
		    	
		    $this->view->sh_internal_invoice_status = $sh_internal_invoice;
		    	
		    if(in_array("nie_patient_invoice",$allowed_invoice_types ) && count($allowed_invoice_types) > 1 ){
		        $nie_patient_invoice  = "include_hi_invoice";
		    } else if ( in_array("nie_patient_invoice",$allowed_invoice_types) && count($allowed_invoice_types) == 1 ) {
		        $nie_patient_invoice  = "only_hi_invoice";
		    } else {
		        $nie_patient_invoice  = "no_hi_invoice";
		    }
		    	
		    $this->view->nie_patient_invoice_status = $nie_patient_invoice;
		
		    	
		    // ISPC-1866 and ISPC-2171
		    $generate_csv_select  = array();
		    $generate_csv_select = array(
		        '' => $this->view->translate("select"),
		        "csv" => $this->view->translate("generate_v1_csv"),
		        "csv_v2" => $this->view->translate("generate_v2_csv"),
		    );
		    	
		    if($nie_patient_invoice == "include_hi_invoice" || $nie_patient_invoice == "only_hi_invoice"){
		        $generate_csv_select['nie_csv'] = $this->view->translate("generate_nie_csv");
		    }
		    	
		    if ( isset($client_modules[169]) && $client_modules[169] == 1 ){
		        $generate_csv_select['unna_csv'] = $this->view->translate("generate_unna_csv");
		    }
		    //ISPC-2505 Lore 17.12.2019
		    if ( isset($client_modules[210]) && $client_modules[210] == 1 ){
		        $generate_csv_select['e_s_csv'] = $this->view->translate("generate_e_s_csv");
		    }
		    
		    if ( isset($client_modules[166]) && $client_modules[166] == 1 ){
		        $generate_csv_select['sap_txt'] = $this->view->translate("generate_sap_text");
		    }
		    //ISPC-2452 Ancuta 19.09.2019
		    if ( isset($client_modules[198]) && $client_modules[198] == 1 ){
		        $generate_csv_select['sap_ii_txt'] = $this->view->translate("generate_sap_ii_text");
		    }
		    	
		    	
		    if ( isset($client_modules[177]) && $client_modules[177] == 1 ){
		        $generate_csv_select['sh_txt'] = $this->view->translate("generate_sh_text");
		    }
		    if ( isset($client_modules[179]) && $client_modules[179] == 1 ){
		        $generate_csv_select['sh_external_txt'] = $this->view->translate("generate_sh_external_txt");
		    }
		    	
		    	
		    if ( isset($client_modules[185]) && $client_modules[185] == 1 ){
		        $generate_csv_select['bw_external_csv'] = $this->view->translate("generate_bw_external_csv");
		    }
		    	
		    if ( isset($client_modules[194]) && $client_modules[194] == 1 ){ // ISPC-2566 Corrected from 192 to 194 by Andrei on 28.05.2020
		        $generate_csv_select['bw_external_2_csv'] = $this->view->translate("generate_bw_external_2_csv");
		    }
		    
		    if ( isset($client_modules[232]) && $client_modules[232] == 1 ){ // ISPC-2566 Andrei 28.05.2020
		        $generate_csv_select['bw_external_3_csv'] = $this->view->translate("generate_bw_external_3_csv");
		    }
		
		    
		    $this->view->generate_csv_select =$generate_csv_select;
		
		    	
		    $period['start'] = date('Y-m-', time()) . '01';
		    $period['end'] = date('Y-m-', time()) . date('t', time());
		
		    $this->view->period = $period;
		
		    $del_storno = 0;
		    if($_REQUEST['mode'] == 'storno' && strlen($_REQUEST['inv_id']) > '0')
		    {
		        $invoice_arr = explode('-', $_REQUEST['inv_id']);
		        $case = $invoice_arr[0];
		        $invoiceid = $invoice_arr[1];
		
		        if(strlen($invoice_arr[2]) > 0)
		        {
		            $del_storno = $invoice_arr[2];
		        }
		
		        if($del_storno == '0')
		        {
		            switch($case)
		            {
		                case 'client_invoices':
		                    $client_invoices = new ClientInvoices();
		                    $clone_record = $client_invoices->create_storno_invoice($invoiceid);
		                    break;
		                case 'hi_invoice':
		                    $hi_invoices = new HiInvoices();
		                    $clone_record = $hi_invoices->create_storno_invoice($invoiceid);
		                    break;
		                case 'u_invoice':
		                    $u_invoices = new UserInvoices();
		                    $clone_record = $u_invoices->create_storno_invoice($invoiceid);
		                    break;
		                case 'bw_invoice':
		                    $bw_invoices = new BwInvoices();
		                    $clone_record = $bw_invoices->create_storno_invoice($invoiceid);
		                    break;
		                case 'sgbv_invoice':
		                    $sgbv_invoices = new SgbvInvoices();
		                    $clone_record = $sgbv_invoices->create_storno_invoice($invoiceid);
		                    break;
		                case 'medipumps_invoice':
		                    $table = 'MedipumpsInvoices';
		                    $mp_invoices = new MedipumpsInvoices();
		                    $clone_record = $mp_invoices->create_storno_invoice($invoiceid);
		                    break;
		                case 'bre_invoices':
		                    //						$table = 'BreInvoice';
		                    $bre_invoices = new BreInvoices();
		                    $clone_record = $bre_invoices->create_storno_invoice($invoiceid);
		                    break;
		                case 'bre_hospiz_invoices':
		                    //						$table = 'BreInvoice';
		                    $bre_hospiz_invoices = new BreHospizInvoices();
		                    $clone_record = $bre_hospiz_invoices->create_storno_invoice($invoiceid);
		                    break;
		                case 'sgbxi_invoice':
		                    $sgbxi_invoices = new SgbxiInvoices();
		                    $clone_record = $sgbxi_invoices->create_storno_invoice($invoiceid);
		                    break;
		                case 'he_invoice':
		                    $he_invoices = new HeInvoices();
		                    $clone_record = $he_invoices->create_storno_invoice($invoiceid);
		                    break;
		
		
		                case 'sh_internal_invoice':
		                    $sh_internal_invoices = new ShInternalInvoices();
		                    $clone_record = $sh_internal_invoices->create_storno_invoice($invoiceid);
		                    break;
		                    	
		
		                    	
		                    // NEW INVOICES
		                case 'sh_invoice':
		                    $sh_invoices = new ShInvoices();
		                    $clone_record = $sh_invoices->create_storno_invoice($invoiceid);
		                    break;
		
		                case 'bayern_invoices_new':
		                    $bay_invoices = new BayernInvoicesNew();
		                    $clone_record = $bay_invoices->create_storno_invoice($invoiceid);
		                    break;
		                    	
		                case 'rlp_invoice':
		                    $rlp_invoices = new RlpInvoices();
		                    $clone_record = $rlp_invoices->create_storno_invoice($invoiceid);
		                    break;
		                    	
		                case 'bw_invoice_new':
		                    $bw_invoices_new = new BwInvoicesNew();
		                    $clone_record = $bw_invoices_new->create_storno_invoice($invoiceid);
		                    break;
		                    	
		                case 'hospiz_invoice':
		                    $hospiz_invoice = new HospizInvoices();
		                    $clone_record = $hospiz_invoice->create_storno_invoice($invoiceid);
		                    break;
		                    	
		                case 'bw_medipumps_invoice':
		                    $medipump_invoice = new MedipumpsInvoicesNew();
		                    $clone_record = $medipump_invoice->create_storno_invoice($invoiceid);
		                    break;
		
		                    	
		                    //ISPC-2257 + ISPC-2272
		                case 'sh_shifts_internal_invoice':
		                    $sh_shifts_internal_invoices = new ShShiftsInternalInvoices();
		                    $clone_record = $sh_shifts_internal_invoices->create_storno_invoice($invoiceid);
		                    break;
		
		                    	
		                    	
		                    	
		                default:
		                    $table = false;
		                    break;
		            }
		        }
		        else if($del_storno == '1')
		        {
		            switch($case)
		            {
		                case 'client_invoices':
		                    $client_invoices = new ClientInvoices();
		                    $clone_record = $client_invoices->del_storno_invoice($invoiceid);
		                    break;
		                case 'hi_invoice':
		                    $hi_invoices = new HiInvoices();
		                    $clone_record = $hi_invoices->del_storno_invoice($invoiceid);
		                    break;
		                case 'u_invoice':
		                    $u_invoices = new UserInvoices();
		                    $clone_record = $u_invoices->del_storno_invoice($invoiceid);
		                    break;
		                case 'bw_invoice':
		                    $bw_invoices = new BwInvoices();
		                    $clone_record = $bw_invoices->del_storno_invoice($invoiceid);
		                    break;
		                case 'bre_invoices':
		                    $bre_invoices = new BreInvoices();
		                    $clone_record = $bre_invoices->del_storno_invoice($invoiceid);
		                case 'bre_hospiz_invoices':
		                    $bre_hospiz_invoices = new BreHospizInvoices();
		                    $clone_record = $bre_hospiz_invoices->del_storno_invoice($invoiceid);
		                    break;
		                case 'sgbv_invoice':
		                    $sgbv_invoices = new SgbvInvoices();
		                    $clone_record = $sgbv_invoices->del_storno_invoice($invoiceid);
		                    break;
		                case 'medipumps_invoice':
		                    $table = 'MedipumpsInvoices';
		                    $mp_invoices = new MedipumpsInvoices();
		                    $clone_record = $mp_invoices->del_storno_invoice($invoiceid);
		                    break;
		                case 'sgbxi_invoice':
		                    $table = 'SgbxiInvoice';
		                    $sgbxi_invoices = new SgbxiInvoices();
		                    $clone_record = $sgbxi_invoices->del_storno_invoice($invoiceid);
		                    break;
		                case 'he_invoice':
		                    $table = 'HeInvoice';
		                    $he_invoices = new HeInvoices();
		                    $clone_record = $he_invoices->del_storno_invoice($invoiceid);
		                    break;
		                    	
		
		
		                case 'sh_internal_invoice':
		                    $sh_internal_invoices = new ShInternalInvoices();
		                    $clone_record = $sh_internal_invoices->del_storno_invoice($invoiceid);
		                    break;
		
		                    	
		                    // NEW INVOICES
		                case 'sh_invoice':
		                    $table = 'ShInvoice';
		                    $sh_invoices = new ShInvoices();
		                    $clone_record = $sh_invoices->del_storno_invoice($invoiceid);
		                    break;
		                    	
		                case 'bayern_invoices_new':
		                    $bay_invoices = new BayernInvoicesNew();
		                    $clone_record = $bay_invoices->del_storno_invoice($invoiceid);
		                    break;
		                    	
		                case 'rlp_invoice':
		                    $rlp_invoices = new RlpInvoices();
		                    $clone_record = $rlp_invoices->del_storno_invoice($invoiceid);
		                    break;
		                    	
		                case 'bw_invoice_new':
		                    $bw_invoices_new = new BwInvoicesNew();
		                    $clone_record = $bw_invoices_new->del_storno_invoice($invoiceid);
		                    break;
		                    	
		                case 'hospiz_invoice':
		                    $hospiz_invoice = new HospizInvoices();
		                    $clone_record = $hospiz_invoice->del_storno_invoice($invoiceid);
		                    break;
		
		                case 'bw_medipumps_invoice':
		                    $medipump_invoice = new MedipumpsInvoicesNew();
		                    $clone_record = $medipump_invoice->del_storno_invoice($invoiceid);
		                    break;
		                    	
		                    //ISPC-2257 + ISPC-2272
		                case 'sh_shifts_internal_invoice':
		                    $sh_shifts_internal_invoices = new ShShiftsInternalInvoices();
		                    $clone_record = $sh_shifts_internal_invoices->del_storno_invoice($invoiceid);
		                    break;
		                default:
		                    $table = false;
		                    break;
		            }
		        }
		
		        exit;
		    }
		}		
		

		public function fetchinvoicejournalAction()
		{
		    
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->_helper->layout->setLayout('layout_ajax');
			$this->view->hidemagic = $hidemagic;
			//$clientinfo = Pms_CommonData::getClientData($logininfo->clientid);
			$clientinfo = Client::getClientDataByid($logininfo->clientid); 
	
			//set limits, pages, order, sort, period
			

		
			$limit = 50;
			$this->view->limit = $limit;

			$ppun = new PpunIpid();
			//used modules checks
			$modules = new Modules();
			if($modules->checkModulePrivileges("88", $clientid))
			{
			    $ppun_module = "1";
			}
			else
			{
			    $ppun_module = "0";
			}

            if($modules->checkModulePrivileges("90", $this->clientid))
			{
				$debtor_number_module = "1";
			}
			else
			{
				$debtor_number_module = "0";
			}
			
			//offset
			if(strlen($_REQUEST['page']) == 0)
			{
				$offset = 0;
			}
			else
			{
				$offset = ($_REQUEST['page'] - 1) * $limit;
			}

			//current page
			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			//sort direction
			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			if(strlen($_REQUEST['j_sortdir']) > 0)
			{
				$sort = $_REQUEST['j_sortdir'];
			}

			if(strlen($_REQUEST['ord']) > '0')
			{
				$order_by = $_REQUEST['ord'];
			}

			if(strlen($_REQUEST['j_sortby']) > '0')
			{
				$order_by = $_REQUEST['j_sortby'];
			}

			if(strlen($_REQUEST['j_sortby']) == '0' && strlen($_REQUEST['sortby']) == '0')
			{
				$order_by = 'inv_date';
			}

//		$this->view->invoice_cols = $invoice_cols;
//		$post_data['col_types'] = $invoice_cols;
			//selected period
			if(strlen($_REQUEST['start_date']) == 0)
			{
				//get current month default
				$period['start'] = date('Y-m-', time()) . '01';
				$period['end'] = date('Y-m-', time()) . date('t', time());

				$item_period['start'] = date('Y-m-', time()) . '01';
				$item_period['end'] = date('Y-m-', time()) . date('t', time());
			}
			else
			{
				//get requested period
				$period['start'] = $_REQUEST['start_date'];
				$period['end'] = $_REQUEST['end_date'];

				$item_period['start'] = $_REQUEST['item_start_date'];
				$item_period['end'] = $_REQUEST['item_end_date'];
			}
			
			//get allowed client invoices
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
			$new_invoices_allowed = $client_allowed_invoice[0];

			// TODO-3952 Ancuta 12.03.2021
			
			if($_REQUEST['new']=="1"){
    		    $client_allowed_invoice_new = ClientInvoiceMultiplePermissions::get_client_allowed_invoices($clientid);
    		    if(!empty($client_allowed_invoice_new)){
    		        $new_multiple_invoices_allowed = array_keys($client_allowed_invoice_new);
    		    }
			}
		    // --
			//all invoice types
			
			//$invoice_types = Pms_CommonData::get_invoice_types();
			if($_REQUEST['type']=="internal"){
			    $invoice_types = Pms_CommonData::get_all_invoice_types(true,false); //Show only internal invoices (TODO-2510)
			} else{
			    // show only external
			    $invoice_types = Pms_CommonData::get_all_invoice_types(false,true); //Show only external invoices (TODO-2510)
			}

			//get invoices from menu permissions
			$client_menu_perms = Doctrine_Query::create()
				->select('*')
				->from('MenuClient')
				->andWhere('clientid = "' . $clientid . '"');
			$client_menu_permssions = $client_menu_perms->fetchArray();

			$menu_perms[] = '999999999';
			foreach($client_menu_permssions as $val)
			{
				$menu_perms[] = $val['menu_id'];
			}

			$menus_cl = Doctrine_Query::create()
				->select('id, menu_link, parent_id, isdelete')
				->from('Menus m')
				->where('m.isdelete = "0"')
				->andWhereIn("m.id", $menu_perms)
				->andWhere('m.isdelete = 0')
				->andWhere('m.forsuperadmin = 0')
				->andWhere('m.menu_link LIKE "%invoice/%" or m.menu_link LIKE "%invoicenew/%"')
				->orderBy('m.sortorder ASC');
			$menus_cl_arr = $menus_cl->fetchArray();

			foreach($menus_cl_arr as $k_menu => $v_menu)
			{
				if(strlen($v_menu['menu_link']) > 0)
				{
					$allowed_menu_links[] = $v_menu['menu_link'];
				}
			}
			
//		print_r($allowed_menu_links);exit;

			foreach($invoice_types as $k_invoice_type => $v_invoice_type)
			{
				if(in_array($k_invoice_type, $allowed_menu_links))
				{
					$allowed_invoice_types[] = $v_invoice_type;
				}
			}

			

			if( ! empty($new_invoices_allowed) && in_array("invoicenew/invoicesnew",$allowed_menu_links)){
				$allowed_invoice_types[] = $new_invoices_allowed;
			}
			
			// TODO-3952 Ancuta 12.03.2021
			if($_REQUEST['new']=="1" && !empty($new_multiple_invoices_allowed)){
    			$allowed_invoice_types = $new_multiple_invoices_allowed;
			}
			//-- 
			
			$allowed_invoice_types = array_unique($allowed_invoice_types);
		
			
			$where = "";
//		Make sure we have client id selected
			if($logininfo->clientid > 0)
			{
				$where = "and e.clientid=" . $logininfo->clientid;
			}
			else
			{
				$where = 'and e.clientid =1';
			}

			//search filter data
			if(strlen($_REQUEST['invoice_number']) != '0')
			{
				$filter_data['invoice_number'][] = $_REQUEST['invoice_number'];
			}

			if(strlen($_REQUEST['storno']) != '0')
			{
				$filter_data['storno'][] = $_REQUEST['storno'];
			}

			$found_ipids[] = '99999999999';
			
			$patient_health_insu = array();
			$patient_health_insu_no = array();
			if(strlen($_REQUEST['health_insurance']) != '0')
			{

				//do health insurance search
				$drop = Doctrine_Query::create()
					->select('*')
					->from('HealthInsurance')
					->where("trim(lower(name)) like trim(lower('%" . $_REQUEST['health_insurance'] . "%'))")
					->andWhere('isdelete="0"')
//				->andWhere('extra="0"') //extra 0 = no custom
					->andWhere('clientid="' . $logininfo->clientid . '" or clientid="0"')
					->orderBy('id ASC');

				$droparray = $drop->fetchArray();

				$hi_master_ids[] = '99999999';
				foreach($droparray as $k_hi_drop => $v_hi_drop)
				{
					$hi_master_ids[] = $v_hi_drop['id'];
				}

				$sql_hi = "ipid,AES_DECRYPT(insurance_status,'" . Zend_Registry::get('salt') . "') as insurance_status";
				$sql_hi.=",insurance_no as insurance_no";
				$sql_hi.=",institutskennzeichen as institutskennzeichen";
				$sql_hi.=",kvk_no as kvk_no, companyid";
				$sql_hi.=",rezeptgebuhrenbefreiung as rezeptgebuhrenbefreiung";
				$sql_hi.=",privatepatient as privatepatient";
				$sql_hi.=",direct_billing as direct_billing";
				$sql_hi.=",AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name";

				$hi_pat = Doctrine_Query::create()
					->select($sql_hi)
					->from('PatientHealthInsurance')
					->whereIn('companyid', $hi_master_ids);
				$hi_pat_arr = $hi_pat->fetchArray();


				
				foreach($hi_pat_arr as $k_pat_hi => $v_pat_hi)
				{
					$found_ipids[] = $v_pat_hi['ipid'];
					$patient_health_insu[$v_pat_hi['ipid']] = $v_pat_hi['company_name'];
					$patient_health_insu_no[$v_pat_hi['ipid']] = $v_pat_hi['insurance_no'];
				}

//			$this->view->patient2healthinsurance = $patient_health_insu;
			}

			//patient name search
			if(strlen($_REQUEST['patient_name']) != '0' || strlen($_REQUEST['health_insurance']) != '0' && strlen($_REQUEST['user_name']) == '0')
			{
				//do patient search
				$whereln = " and (trim(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1))) like trim(lower('" . $_REQUEST['patient_name'] . "%')) or trim(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1))) like trim(lower('" . $_REQUEST['patient_name'] . "%'))  or concat(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['patient_name'] . "%')) or
			concat(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['patient_name'] . "%')) or
			concat(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['patient_name'] . "%')) or
			concat(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_REQUEST['patient_name'] . "%')))";

				$resulted_patients_ipids[] = '99999999999';
				$patient = Doctrine_Query::create()
					->select('p.ipid, e.epid')
					->from('PatientMaster p')
					->where(" p.isdelete = 0");
				if(strlen($_REQUEST['health_insurance']) != '0' && count($found_ipids) > '0')
				{
					$patient->andWhereIn('ipid', $found_ipids);
				}

				$patient->leftJoin("p.EpidIpidMapping e");
				$patient->andwhere("e.clientid = " . $logininfo->clientid . " " . $wherefn . " " . $whereln);

				$resulted_patients_data = $patient->fetchArray();

				foreach($resulted_patients_data as $k_res_ipid => $v_res_ipid)
				{
					$resulted_patients_ipids[] = $v_res_ipid['ipid'];
				}
				$resulted_userids[] = "9999999999";
			} else if(strlen($_REQUEST['user_name']) != '0' && strlen($_REQUEST['patient_name']) == '0' &&  strlen($_REQUEST['health_insurance']) == '0') {
				//do user search
			    $where_user_ln = " and ( 
			        trim(lower(first_name)) like trim(lower('" . $_REQUEST['user_name'] . "%')) or trim(lower(last_name)) like trim(lower('" . $_REQUEST['user_name'] . "%'))  or concat(lower(first_name),', ',lower(last_name)) LIKE trim(lower('%" . $_REQUEST['user_name'] . "%')) or
			concat(lower(last_name),', ',lower(first_name)) LIKE trim(lower('%" . $_REQUEST['user_name'] . "%')) or
			concat(lower(first_name),' ',lower(last_name)) LIKE trim(lower('%" . $_REQUEST['user_name'] . "%')) or
			concat(lower(last_name),' ',lower(first_name)) LIKE trim(lower('%" . $_REQUEST['user_name'] . "%'))
			    
			    )";
 
				$userq = Doctrine_Query::create()
					->select('id')
					->from('User')
					->where("isdelete = 0");
				$userq->andwhere("clientid = " . $logininfo->clientid . " " . $where_user_ln);
				$resulted_user_data = $userq->fetchArray();

				foreach($resulted_user_data as $k_res_id => $v_res_id)
				{
					$resulted_userids[] = $v_res_id['id'];
				}
				$resulted_patients_ipids[] = '99999999999';
				if(empty($resulted_userids)){
				    $resulted_userids = false;
				}
			}
 
			if(count($allowed_invoice_types) > 1){
			    
    			if(empty($_REQUEST['invoice_type'])){
    			    echo '<div class="err">'.$this->view->translate("please select invoice type then filter").'</div>';
    			    exit;
    			}
			}
			
			if(strlen($_REQUEST['invoice_type']) != '0' && in_array($_REQUEST['invoice_type'], $allowed_invoice_types))
			{
				//force allowed invoice types!! to selected table
				$allowed_invoice_types = array($_REQUEST['invoice_type']);
			}
			else if(strlen($_REQUEST['invoice_type']) != '0' && !in_array($_REQUEST['invoice_type'], $allowed_invoice_types))
			{
				$allowed_invoice_types = array();
			}

            if(in_array("sh_internal_invoice",$allowed_invoice_types ) && count($allowed_invoice_types) > 1 ){
                $sh_internal_invoice  = "include_sh_internal";
            } else if ( in_array("sh_internal_invoice",$allowed_invoice_types) && count($allowed_invoice_types) == 1 ) {
                $sh_internal_invoice  = "only_sh_internal";
            } else {
                $sh_internal_invoice  = "no_sh_internal";
            }
            
            $this->view->sh_internal_invoice_status = $sh_internal_invoice;
            
            
            
			if(strlen($_REQUEST['amount']) != '0')
			{
				$filter_data['invoice_total'][] = $_REQUEST['amount'];
			}


			//get client invoice data
			//only used for client invoices data
			$filter_data['completed_date']['start_date'] = $period['start'];
			$filter_data['completed_date']['end_date'] = $period['end'];

			if(strlen($_REQUEST['item_date_filter']) != '0')
			{
				$filter_data['item_date']['item_start_date'] = $item_period['start'];
				$filter_data['item_date']['item_end_date'] = $item_period['end'];
			}

// 			get all exported invoices by invoice type
            $InvoicejournalExportInvoices_obj = new InvoicejournalExportInvoices();
            $all_exported_inv_array = $InvoicejournalExportInvoices_obj->get_all_exported_invoices($clientid,false);
			
            $exported_invoice2invoice_type = array();
			if(!empty($all_exported_inv_array)){
			    foreach($all_exported_inv_array as $k=>$exi){
			        $exported_invoice2invoice_type[$exi['invoice_type']] [] = $exi['invoice'];
			    }
			}
			
			if( !isset($_REQUEST['only_not_exported']) || $_REQUEST['only_not_exported'] != "1" ){
			    $exported_invoice2invoice_type  = array();
			}
			
			$remove_drafts = true; // don't show drafts

			$client_invoice_data_arr = array();
			    
       		$client_invoices = new ClientInvoices();
			$client_invoice_data_arr = $client_invoices->get_all_client_invoices($resulted_patients_ipids, $clientid, $filter_data, $allowed_invoice_types, $offset, $limit, $order_by, $sort, $remove_drafts,$resulted_userids);
			
			$patients_details_ipids = array();
			$client_invoice_data = array();
			$list_ids_storno= array();       //ISPC-2171 Lore 10.06.2020
			foreach($client_invoice_data_arr as $k_client_inv => $v_client_inv)
			{
			    if( empty($exported_invoice2invoice_type[$v_client_inv['inv_type']])  || !in_array($v_client_inv['id'],$exported_invoice2invoice_type[$v_client_inv['inv_type']])){
			    
			        if($v_client_inv['inv_type'] == "sh_shifts_internal_invoice"){
			            $sh_Sh_invids[] = $v_client_inv['id'];
			        }
			        
    				$patients_details_ipids[] = $v_client_inv['ipid'];
    
    				
    				$client_invoice_data[$k_client_inv] = $v_client_inv;
    				$client_invoice_data[$k_client_inv]['type'] = 'by_invoice';
    
    				if($v_client_inv['storno'] == '1')
    				{
    					$client_invoice_data[$k_client_inv]['invoice_total'] = ($v_client_inv['invoice_total'] * -1);
    					$list_ids_storno[] = $v_client_inv['record_id'];       //ISPC-2171 Lore 10.06.2020
    				}
    
    				if($v_client_inv['rnummer'])
    				{
    					$client_invoice_data[$k_client_inv]['invoice_number'] = $v_client_inv['rnummer'];
    				}
    				else
    				{
    					$client_invoice_data[$k_client_inv]['invoice_number'] = $v_client_inv['invoice_number'];
    				}
			    } 
			}
			
			//ISPC-2171 Lore 10.06.2020
			 $invoice_storno_data_arr_selected_inv = array();
			 $client_storno_data_arr_selected_inv = $client_invoices->get_all_storno_nr_client_invoices($allowed_invoice_types, $list_ids_storno );
			 if(!empty($client_storno_data_arr_selected_inv)){
			     foreach($client_storno_data_arr_selected_inv as $keys=>$vals){
			         $invoice_storno_data_arr_selected_inv[$vals['id']] = $vals;
			     }
			 }
			//.
			
			
			if(!empty($sh_Sh_invids)){
			    
    			$sh_inv = new ShShiftsInternalInvoices();
    			$invoices_details = $sh_inv->get_invoices($sh_Sh_invids);
    			
    			$full_invoice_details = array();
    			foreach($invoices_details['invoices_data'] as $k => $dets){
    			    $full_invoice_details[$dets['id']] = $dets;
    			    if($dets['user_type'] == "system_user"){
    			        $user_ids[] = $dets['user'];
    			    }
    			    if($dets['user_type'] == "familly_doctor"){
    			        $doctor_ids[] = $dets['user'];
    			    }
    			}
    			
    			$f_doc_info = array();
    			if(!empty($doctor_ids)){
    			
    			    $fdoc_obj = new FamilyDoctor();
    			    $fdoc_details = $fdoc_obj->get_family_doctors_multiple($doctor_ids);
    			
    			    foreach($fdoc_details as $fdoc_id=>$fdoc_details){
    			        $f_doc_info[$fdoc_details['id']]['name'] = $fdoc_details['last_name'].' '.$fdoc_details['first_name'];
    			        $f_doc_info[$fdoc_details['id']]['debitor_number'] = $fdoc_details['debitor_number'];
    			    }
    			}    
			}
			 
			
			
			
			if (empty($patients_details_ipids)) {
				$patients_details_ipids[] = '99999999999';
			}

            // get all users details
            $users = Pms_CommonData::getClientUsers($clientid);

			foreach($users as $k=>$usr){
			    $user_details[$usr['id']]['last_name'] = $usr['last_name'];
			    $user_details[$usr['id']]['first_name'] = $usr['first_name'];
			}

			
			//get all patients details
			$pat_details = Doctrine_Query::create()
				->select("*, e.epid as epid,e.epid_num as epid_num, 
					AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
					AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex,
					AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,
					AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip,
					AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,		
					AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone		
				")
				->from('PatientMaster p')
				->where('p.isdelete = 0 ' . $where)
				->andWhereIn('p.ipid', $patients_details_ipids);
			$pat_details->leftJoin("p.EpidIpidMapping e");
			$pat_details->andWhere('p.ipid = e.ipid');

			$pat_details_res = $pat_details->fetchArray();
			foreach($pat_details_res as $k_pat_det => $v_pat_det)
			{
				$patient_details[$v_pat_det['ipid']] = $v_pat_det;
			}

			if(strlen($_REQUEST['health_insurance']) == '0' || $_POST['export_type'] == "csv_v2" || $_POST['export_type'] == "sh_external_txt")
			{
				//get patients health insurance *listing only*
				$sql_hi = "ipid,AES_DECRYPT(insurance_status,'" . Zend_Registry::get('salt') . "') as insurance_status";
				$sql_hi.=",insurance_no as insurance_no";
				$sql_hi.=",institutskennzeichen as institutskennzeichen";
				$sql_hi.=",kvk_no as kvk_no, companyid";
				$sql_hi.=",rezeptgebuhrenbefreiung as rezeptgebuhrenbefreiung";
				$sql_hi.=",privatepatient as privatepatient";
				$sql_hi.=",direct_billing as direct_billing";
				$sql_hi.=",AES_DECRYPT(ins_debtor_number,'" . Zend_Registry::get('salt') . "') as ins_debtor_number";
				$sql_hi.=",AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name";
				$sql_hi.=",AES_DECRYPT(ins_zip,'" . Zend_Registry::get('salt') . "') as ins_zip";
				$sql_hi.=",AES_DECRYPT(ins_city,'" . Zend_Registry::get('salt') . "') as ins_city";
				$sql_hi.=",AES_DECRYPT(ins_street,'" . Zend_Registry::get('salt') . "') as ins_street";
				$sql_hi.=",AES_DECRYPT(ins_phone,'" . Zend_Registry::get('salt') . "') as ins_phone";
				
				//$sql_hi = "*";

				$hi_pat = Doctrine_Query::create()
					->select($sql_hi)
					->from('PatientHealthInsurance')
					->whereIn('ipid', $patients_details_ipids);
				$hi_pat_arr = $hi_pat->fetchArray();
				
	
				$health_insurances = array();
				$ipid2healthinsurance = array();
				$patient_hi_insurance_no = array();
				$private_patients = array();
				$patient_hi_info = array();
				foreach($hi_pat_arr as $k_hi_pat => $v_hi_pat)
				{
					$health_insurances[] = $v_hi_pat['companyid'];

					$ipid2healthinsurance[$v_hi_pat['ipid']] = $v_hi_pat['companyid'];

					if($v_hi_pat['privatepatient'] == "1"){
					    $private_patients[] = $v_hi_pat['ipid'];
					}
					
                    if($ppun_module == "1" && $v_hi_pat['privatepatient'] == "1")
					{
					    //get ppun (private patient unique number)
					    $ppun_number = $ppun->check_patient_ppun($v_hi_pat['ipid'], $clientid);
					    if($ppun_number)
					    {
					        $ipid2debtor[$v_hi_pat['ipid']]['debtor_number'] = $ppun_number['ppun'];
					        $ipid2debtor[$v_hi_pat['ipid']]['debitor_number'] = $ppun_number['ppun'];
					    }
					}
					
					if($debtor_number_module == "1" && $v_hi_pat['privatepatient'] == "0")
					{
					    //get debtor number from patient healthinsurance
					    if(strlen($v_hi_pat['ins_debtor_number']) > '0')
					    {
        					$ipid2debtor[$v_hi_pat['ipid']]['debtor_number'] = $v_hi_pat['ins_debtor_number'];
        					$ipid2debtor[$v_hi_pat['ipid']]['debitor_number'] = $v_hi_pat['ins_debtor_number'];
					    }
					}
					
					$patient_hi_company_name[$v_hi_pat['ipid']]['company_name'] = $v_hi_pat['company_name'];
					$patient_hi_insurance_no[$v_hi_pat['ipid']]['insurance_no'] = $v_hi_pat['insurance_no'];
					
					$patient_hi_info[$v_hi_pat['ipid']]['company_name'] = $v_hi_pat['company_name'];
					$patient_hi_info[$v_hi_pat['ipid']]['company_street'] = $v_hi_pat['ins_street'];
					$patient_hi_info[$v_hi_pat['ipid']]['company_zip'] = $v_hi_pat['ins_zip'];
					$patient_hi_info[$v_hi_pat['ipid']]['company_city'] = $v_hi_pat['ins_city'];
					$patient_hi_info[$v_hi_pat['ipid']]['company_phone'] = $v_hi_pat['ins_phone'];
					
					$patient_details[$v_hi_pat['ipid']]['PatientHealthInsurance'] = $v_hi_pat;
				}
				
// 				dd($patient_hi_info );
				if (empty($health_insurances)) {
					$health_insurances[] = '99999999';
				}

				$PatientHealthInsuranceSubdivisions = array();
				//TODO-2605  Get subdevisions for shexport. Ancuta 25.11.2019 
				if (isset($_POST['export_type']) && ($_POST['export_type'] == "csv_v2" || $_POST['export_type'] == "sh_external_txt") ) {
					$PatientHealthInsuranceSubdivisions = PatientHealthInsurance2Subdivisions::get_hi_subdivisions_multiple($health_insurances , array_unique($patients_details_ipids));
				}
				
				$drop = Doctrine_Query::create()
					->select('*')
					->from('HealthInsurance')
					->whereIn('id', $health_insurances)
					//->andWhere('isdelete="0"') //TODO-3043 Ancuta 31.03.2020
					->andWhere('clientid="' . $logininfo->clientid . '" or clientid="0"')
					->orderBy('id ASC');
				$droparray = $drop->fetchArray();

				foreach($droparray as $k_hi_drop => $v_hi_drop)
				{
					$hi_array[$v_hi_drop['id']] = $v_hi_drop;
				}

			
				
				foreach($ipid2healthinsurance as $k_hi_ipid => $k_company)
				{
					if(!empty($patient_hi_company_name[$k_hi_ipid]['company_name'])){
    					$patients_health_insurances[$k_hi_ipid] =$patient_hi_company_name[$k_hi_ipid]['company_name'] ;
					} else{
    					$patients_health_insurances[$k_hi_ipid] = $hi_array[$k_company]['name'];
					}

					
					if(array_key_exists($k_hi_ipid, $patient_details) && (strlen($hi_array[$k_company]['name']) > 0 || strlen($patient_hi_company_name[$k_hi_ipid]['company_name']) > 0))
					{
					    if(!empty($patient_hi_company_name[$k_hi_ipid]['company_name'])){ 
					       $patient_details[$k_hi_ipid]['health_insurance'] =$patient_hi_company_name[$k_hi_ipid]['company_name'] ;
					    } else{
    						$patient_details[$k_hi_ipid]['health_insurance'] = $hi_array[$k_company]['name'];
					    }

					    

					    
					    if(!empty($patient_hi_company_name[$k_hi_ipid]['company_name'])){ 
					       $patient_details[$k_hi_ipid]['health_insurance'] =$patient_hi_company_name[$k_hi_ipid]['company_name'] ;
					    } else{
    						$patient_details[$k_hi_ipid]['health_insurance'] = $hi_array[$k_company]['name'];
					    }

						$patient_details[$k_hi_ipid]['health_insurance_street']   = !empty($patient_hi_info[$k_hi_ipid]['company_street'])    ?   $patient_hi_info[$k_hi_ipid]['company_street']  : $hi_array[$k_company]['street1'] ;
						$patient_details[$k_hi_ipid]['health_insurance_zip']      = !empty($patient_hi_info[$k_hi_ipid]['company_zip'])       ?   $patient_hi_info[$k_hi_ipid]['company_zip']     : $hi_array[$k_company]['zip'] ;
						$patient_details[$k_hi_ipid]['health_insurance_city']     = !empty($patient_hi_info[$k_hi_ipid]['company_city'])      ?   $patient_hi_info[$k_hi_ipid]['company_city']    : $hi_array[$k_company]['city'] ;
						$patient_details[$k_hi_ipid]['health_insurance_phone']    = !empty($patient_hi_info[$k_hi_ipid]['company_phone'])     ?   $patient_hi_info[$k_hi_ipid]['company_phone']   : $hi_array[$k_company]['phone'] ;
				    
					    
					    
					    if(!empty($patient_hi_insurance_no[$k_hi_ipid]['insurance_no'])){ 
					       $patient_details[$k_hi_ipid]['insurance_no'] =$patient_hi_insurance_no[$k_hi_ipid]['insurance_no'] ;
					    }  
						
					    if($ipid2debtor[$k_hi_ipid]['debtor_number'] && !empty($ipid2debtor[$k_hi_ipid]['debtor_number'])){//TODO-3043
    						$patient_details[$k_hi_ipid]['debtor_number'] = $ipid2debtor[$k_hi_ipid]['debtor_number'] ;
						} else{
                            if(!in_array($k_hi_ipid,$private_patients) && $debtor_number_module == "1" ){
    						  $patient_details[$k_hi_ipid]['debtor_number'] = $hi_array[$k_company]['debtor_number'];
    					    }
						}
					
                        if(in_array($k_hi_ipid,$private_patients)){
						  $patient_details[$k_hi_ipid]['privatepatient'] = "1";
						  $patient_details[$k_hi_ipid]['private_patient'] = "1";
					    } else{
						  $patient_details[$k_hi_ipid]['privatepatient'] = "0";
						  $patient_details[$k_hi_ipid]['private_patient'] = "0";
					    }
					}
					
				}
//			$this->view->patient2healthinsurance = $patients_health_insurances;
			}
			else
			{
				foreach($patient_health_insu as $k_ipid => $v_ipid)
				{
					if(array_key_exists($k_ipid, $patient_details))
					{
						$patient_details[$k_ipid]['health_insurance'] = $patient_health_insu[$k_ipid];
						$patient_details[$k_ipid]['insurance_no'] = $patient_health_insu_no[$k_ipid];
					}
				}
			}
			
			
			//insert healthinsurance and patient name in invoice master data
			foreach($client_invoice_data as $kc_inv_data => $vc_inv_data)
			{
				$client_invoice_data[$kc_inv_data]['health_insurance'] = $patient_details[$vc_inv_data['ipid']]['health_insurance'];
				$client_invoice_data[$kc_inv_data]['patient_health_insurance'] = $patient_details[$vc_inv_data['ipid']]['PatientHealthInsurance'];

				$client_invoice_data[$kc_inv_data]['patient_name'] = "";
   				$client_invoice_data[$kc_inv_data]['user_name'] = "";
   				
				if($vc_inv_data['inv_type'] == "sh_internal_invoice" ){
    				$client_invoice_data[$kc_inv_data]['user_name'] = $user_details[$vc_inv_data['user']]['last_name'] . ', ' . $user_details[$vc_inv_data['user']]['first_name'];
				}
				elseif($vc_inv_data['inv_type'] == "sh_shifts_internal_invoice" ){
    				if($full_invoice_details[$vc_inv_data['id']]['user_type'] == "system_user"){
    				    $client_invoice_data[$kc_inv_data]['user_name'] = $user_details[$vc_inv_data['user']]['last_name'] . ', ' . $user_details[$vc_inv_data['user']]['first_name'];

    				} elseif($full_invoice_details[$vc_inv_data['id']]['user_type'] == "familly_doctor"){

    				    $client_invoice_data[$kc_inv_data]['user_name'] = $f_doc_info[$full_invoice_details[$vc_inv_data['id']]['user']]['name'];
    				
    				}
    				$client_invoice_data[$kc_inv_data]['patient_name'] = $patient_details[$vc_inv_data['ipid']]['last_name'] . ', ' . $patient_details[$vc_inv_data['ipid']]['first_name'];
    				
    				
				} else {
    				$client_invoice_data[$kc_inv_data]['patient_name'] = $patient_details[$vc_inv_data['ipid']]['last_name'] . ', ' . $patient_details[$vc_inv_data['ipid']]['first_name'];
				}
				
   				$client_invoice_data[$kc_inv_data]['nie_booking_text'] = $patient_details[$vc_inv_data['ipid']]['first_name'].' '. $patient_details[$vc_inv_data['ipid']]['last_name'] . ', ' . date("d.m.Y", strtotime($patient_details[$vc_inv_data['ipid']]['birthd'])).', '.$patient_details[$vc_inv_data['ipid']]['health_insurance'];
   				
   				$client_invoice_data[$kc_inv_data]['last_name'] =  $patient_details[$vc_inv_data['ipid']]['last_name'];
   				$client_invoice_data[$kc_inv_data]['first_name'] = $patient_details[$vc_inv_data['ipid']]['first_name'];
   				$client_invoice_data[$kc_inv_data]['birthd'] = date("d.m.Y", strtotime($patient_details[$vc_inv_data['ipid']]['birthd']));
   				$client_invoice_data[$kc_inv_data]['insurance_no'] = $patient_details[$vc_inv_data['ipid']]['insurance_no'];
				
   				
				$client_invoice_data[$kc_inv_data]['epid'] = $patient_details[$vc_inv_data['ipid']]['EpidIpidMapping']['epid'];
				$client_invoice_data[$kc_inv_data]['epid_num'] = $patient_details[$vc_inv_data['ipid']]['EpidIpidMapping']['epid_num'];
				$client_invoice_data[$kc_inv_data]['debtor_number'] = $patient_details[$vc_inv_data['ipid']]['debtor_number'];
				
				// SH - external 
				$client_invoice_data[$kc_inv_data]['patient_gender_title'] = $patient_details[$vc_inv_data['ipid']]['sex'] == 1 ? "Herr" : "Frau";
   				$client_invoice_data[$kc_inv_data]['patient_last_name'] =  $patient_details[$vc_inv_data['ipid']]['last_name'];
   				$client_invoice_data[$kc_inv_data]['patient_first_name'] = $patient_details[$vc_inv_data['ipid']]['first_name'];
   				$client_invoice_data[$kc_inv_data]['patient_birthd'] = date("d.m.Y", strtotime($patient_details[$vc_inv_data['ipid']]['birthd']));
   				$client_invoice_data[$kc_inv_data]['year_birthd'] = date("Y", strtotime($patient_details[$vc_inv_data['ipid']]['birthd']));
   				$client_invoice_data[$kc_inv_data]['patient_gender'] = $patient_details[$vc_inv_data['ipid']]['sex'];

   				$client_invoice_data[$kc_inv_data]['patient_street'] = $patient_details[$vc_inv_data['ipid']]['street1'];
   				$client_invoice_data[$kc_inv_data]['patient_zip'] = $patient_details[$vc_inv_data['ipid']]['zip'];
   				$client_invoice_data[$kc_inv_data]['patient_city'] = $patient_details[$vc_inv_data['ipid']]['city'];
   				$client_invoice_data[$kc_inv_data]['patient_phone'] = $patient_details[$vc_inv_data['ipid']]['phone'];
   				
				$client_invoice_data[$kc_inv_data]['private_patient'] = $patient_details[$vc_inv_data['ipid']]['privatepatient'];
				$client_invoice_data[$kc_inv_data]['health_insurance_company'] = $patient_details[$vc_inv_data['ipid']]['health_insurance'];
				
				$client_invoice_data[$kc_inv_data]['health_insurance_street'] = $patient_details[$vc_inv_data['ipid']]['health_insurance_street'];
				$client_invoice_data[$kc_inv_data]['health_insurance_zip'] = $patient_details[$vc_inv_data['ipid']]['health_insurance_zip'];
				$client_invoice_data[$kc_inv_data]['health_insurance_city'] = $patient_details[$vc_inv_data['ipid']]['health_insurance_city'];
				$client_invoice_data[$kc_inv_data]['health_insurance_phone'] = $patient_details[$vc_inv_data['ipid']]['health_insurance_phone'];
				
				
				
			}

			if($order_by == 'inv_hi')
			{
				$client_invoice_data = $this->array_sort($client_invoice_data, 'health_insurance', SORT_ . strtoupper($sort));
			}

			if($order_by == 'inv_pat')
			{
				$client_invoice_data = $this->array_sort($client_invoice_data, 'patient_name', SORT_ . strtoupper($sort));
			}
			//ISPC-2312 Lore 08.12.2020
			if($order_by == 'inv_birthd')
			{
			    $client_invoice_data = $this->array_sort($client_invoice_data, 'year_birthd', SORT_ . strtoupper($sort));
			}
			if($order_by == 'inv_user')
			{
				$client_invoice_data = $this->array_sort($client_invoice_data, 'user_name', SORT_ . strtoupper($sort));
			}

			$this->view->master_invoices_data = $client_invoice_data;

			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['invoice_data'] = $client_invoice_data;
				$post['clientinfo'] = $clientinfo[0];
				$post['sh_internal_invoice_status'] = $sh_internal_invoice;
				
				
				//ispc-1866 if
				if($_POST['export_type'] == "csv_v2")
				{
					
					$iinv = new InvoiceItems();
					$iinv = $iinv->getMultipleInvoiceItems(array_column($client_invoice_data_arr, 'id'), $clientid);
					foreach ($iinv as $k=>$iinv_obj) {
						foreach($iinv_obj as $invoice_items){
							$items_of_invoice[ $invoice_items['invoiceId'] ] [ $invoice_items['itemLabel'] ] = $invoice_items['itemString'];
						}
					}
// 					print_r($PatientHealthInsuranceSubdivisions);die();
					$i = 0;
					//table 'row-headers'
					$export_data[$i]['head']['invoice number'] = $this->view->translate('rnummer');
					$export_data[$i]['head']['invoice date'] = $this->view->translate('invoice_date');
					$export_data[$i]['head']['invoice ammount'] = $this->view->translate("invoice_amount");
					$export_data[$i]['head']['patient ID'] = $this->view->translate("patientnumber");
					$export_data[$i]['head']['surname patient'] = $this->view->translate("patient_lastname");
					$export_data[$i]['head']['firstname patient '] = $this->view->translate("patient_firstname");
					//ISPC-2312 Lore 08.12.2020
					$export_data[$i]['head']['birthd patient '] = $this->view->translate("birthd");
					
					$export_data[$i]['head']['Privatpatient'] = $this->view->translate("privatepatient");
					$export_data[$i]['head']['Kassenummer health insurance'] = $this->view->translate("health_insurance_kassennummer");
					$export_data[$i]['head']['IK number of health insurance'] = $this->view->translate("health_insurance_IK");
					$export_data[$i]['head']['name of health insurance'] = $this->view->translate("healthinsurance_company");
					$export_data[$i]['head']['debitor of health insurance '] = $this->view->translate("debtor_number");
					
					$export_data[$i]['head']['SURNAME on invoice (health insurance mostly, in case of privat patient name of patient) '] = $this->view->translate("SURNAME on invoice");
					$export_data[$i]['head']['firstname on invoice (leave blank if halth insurance is on invoice, firstname of patient if privatpatient'] = $this->view->translate("firstname on invoice");
					$export_data[$i]['head']['Street on invoice'] = $this->view->translate("Street on invoice");
					$export_data[$i]['head']['zip on invoice'] = $this->view->translate("zip on invoice");
					$export_data[$i]['head']['city on invoice'] = $this->view->translate("city on invoice");
					
					$i++;
					$export_data[$i]['head'][] = '';


					$invoice_amount_total = 0;
					foreach($client_invoice_data as $k => $export_values)
					{
						$i++;
						
						$SURNAME_on_invoice = "";
						$firstname_on_invoice =  ""; 
						
						if ($patient_details[$export_values['ipid']] ['PatientHealthInsurance'] ['privatepatient'] == '1'){
							if (trim($items_of_invoice[$export_values['id']]['nvg']) != '') {
								$SURNAME_on_invoice = explode(",", $items_of_invoice[$export_values['id']] ['nvg']);
								$firstname_on_invoice = trim($SURNAME_on_invoice[0]);
								$SURNAME_on_invoice = trim($SURNAME_on_invoice[1]);
							}
							elseif (trim($items_of_invoice[$export_values['id']]['healthinsurancename'] != '')) {
								$SURNAME_on_invoice = $items_of_invoice[$export_values['id']]['healthinsurancename'];
							}
							elseif (trim($items_of_invoice[$export_values['id']]['healthinsurancecontact']) != '') {
								$SURNAME_on_invoice = $items_of_invoice[$export_values['id']]['healthinsurancecontact'];
							}
						
						}else{
							if (trim($items_of_invoice[$export_values['id']]['healthinsurancename'] != '')) {
								$SURNAME_on_invoice = $items_of_invoice[$export_values['id']]['healthinsurancename'];
							}
							elseif (trim($items_of_invoice[$export_values['id']]['healthinsurancecontact']) != '') {
								$SURNAME_on_invoice = $items_of_invoice[$export_values['id']]['healthinsurancecontact'];
							}
						}
						
						
						$Street_on_invoice = "";
						$zip_on_invoice = "";
						$city_on_invoice = "";					
						
						if ($patient_details[$export_values['ipid']] ['PatientHealthInsurance'] ['privatepatient'] == '1'){
							$zip_on_invoice = $patient_details[$export_values['ipid']]['zip'];
							$city_on_invoice = $patient_details[$export_values['ipid']]['city'];
							$Street_on_invoice = $patient_details[$export_values['ipid']]['street1'];
						}
						elseif (isset($PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]) 
								&&
								(!empty($PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['street1']) || !empty($PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['zip']) || !empty($PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['city']))
						) {
							//zip,city street from sapv
							$zip_on_invoice = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['zip'];
							$city_on_invoice = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['city'];
							$Street_on_invoice = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['street1'];
						} 
						elseif (isset($PatientHealthInsuranceSubdivisions[$export_values['ipid']][3])
								&&
								(!empty($PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['post_office_box']) || !empty($PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['post_office_box_location']) || !empty($PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['zip_mailbox']))
						) {
							//zip,city street from sapv
							$zip_on_invoice = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['zip_mailbox'];
							$city_on_invoice = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['post_office_box_location'];
							$Street_on_invoice = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['post_office_box'];
						}
						elseif (isset($patient_details[$export_values['ipid']] ['PatientHealthInsurance'])
								&&
								(!empty($patient_details[$export_values['ipid']]['PatientHealthInsurance']['ins_street']) || !empty($patient_details[$export_values['ipid']]['PatientHealthInsurance']['ins_zip']) || !empty($patient_details[$export_values['ipid']]['PatientHealthInsurance']['ins_city']))
								
						){
							$zip_on_invoice = $patient_details[$export_values['ipid']]['PatientHealthInsurance']['ins_zip'];
							$city_on_invoice = $patient_details[$export_values['ipid']]['PatientHealthInsurance']['ins_city'];
							$Street_on_invoice = $patient_details[$export_values['ipid']]['PatientHealthInsurance']['ins_street'];
						} else {
							
						}
						
						
						$export_data[$i][$export_values['ipid']]['invoice_number'] = $export_values['invoice_number'];
						$export_data[$i][$export_values['ipid']]['invoice_date'] = date('d.m.Y', strtotime($export_values['completed_date']));
						if($export_values['invoice_total'] != "0.00")
						{
							$export_data[$i][$export_values['ipid']]['invoice_amount'] = number_format($export_values['invoice_total'], 2, ',', '');	
						}
						else
						{
							$export_data[$i][$export_values['ipid']]['invoice_amount'] = "0";
						}
						
						$invoice_amount_total += $export_values['invoice_total'];
						 
						
						$export_data[$i][$export_values['ipid']]['patient ID'] = $export_values['epid'];
						
						$export_data[$i][$export_values['ipid']]['surname patient'] = $patient_details[$export_values['ipid']] ['last_name'];
						$export_data[$i][$export_values['ipid']]['firstname patient '] = $patient_details[$export_values['ipid']] ['first_name'];
						$export_data[$i][$export_values['ipid']]['patient_birth'] = date('d.m.Y', strtotime($patient_details[$export_values['ipid']] ['birthd']));  // ISPC-2312 Lore 08.12.2020
						
						
						if ($patient_details[$export_values['ipid']] ['PatientHealthInsurance'] ['privatepatient'] == '1'){
							$export_data[$i][$export_values['ipid']]['Privatpatient'] = "j";
						}else{
							$export_data[$i][$export_values['ipid']]['Privatpatient'] = "n";
						}
						
						
											
						$export_data[$i][$export_values['ipid']]['Kassenummer health insurance'] = $patient_details[$export_values['ipid']] ['PatientHealthInsurance'] ['kvk_no'];
						$export_data[$i][$export_values['ipid']]['IK number of health insurance'] = $patient_details[$export_values['ipid']] ['PatientHealthInsurance'] ['institutskennzeichen'];
						$export_data[$i][$export_values['ipid']]['name of health insurance'] = $export_values ['health_insurance'];
						$export_data[$i][$export_values['ipid']]['debitor of health insurance '] = $export_values['debtor_number'];
						
						
						$export_data[$i][$export_values['ipid']]['SURNAME on invoice (health insurance mostly, in case of privat patient name of patient) '] = $SURNAME_on_invoice;
						$export_data[$i][$export_values['ipid']]['firstname on invoice (leave blank if halth insurance is on invoice, firstname of patient if privatpatient'] = $firstname_on_invoice;
						$export_data[$i][$export_values['ipid']]['Street on invoice'] = $Street_on_invoice;
						$export_data[$i][$export_values['ipid']]['zip on invoice'] = $zip_on_invoice;
						$export_data[$i][$export_values['ipid']]['city on invoice'] = $city_on_invoice;
						
					}
					
					$i++;
					/*
					$export_data[$i]['final'][] = '';
					$export_data[$i]['final'][] = '';
					$export_data[$i]['final'][] = html_entity_decode($this->view->translate('journal_total_ammount')). ' ' . $invoice_amount_total;
					*/
					
					
// 					die("ddddddddd");
					$this->generateCSV($export_data, 'Rechnungsjournal_v2.csv');
					exit;
				}
				elseif($_POST['export_type'] == "csv")
				{
					$i = 1;

					foreach($client_invoice_data as $k => $export_values)
					{

						$export_data[$i][$export_values['ipid']]['create_date_year'] = date('Y', strtotime($export_values['completed_date']));
						$export_data[$i][$export_values['ipid']]['create_date_month'] = date('m', strtotime($export_values['completed_date']));
// 					$export_data[$i][$export_values['ipid']]['invoice_date'] = "'".date('d.m.Y',strtotime($export_values['invoice_date']));
						$export_data[$i][$export_values['ipid']]['invoice_date'] = date('d.m.Y', strtotime($export_values['completed_date']));

						if($export_values['invoice_total'] != "0.00")
						{
							$export_data[$i][$export_values['ipid']]['invoice_amount'] = number_format($export_values['invoice_total'], 2, ',', '');
						}
						else
						{
							$export_data[$i][$export_values['ipid']]['invoice_amount'] = "0";
						}

						if($export_values['inv_type'] == "sh_internal_invoice"){
    						$export_data[$i][$export_values['ipid']]['patient_name'] = $export_values['user_name'];
						} else{
    						$export_data[$i][$export_values['ipid']]['patient_name'] = $export_values['patient_name'];
						}
						$export_data[$i][$export_values['ipid']]['patient_birth'] = $export_values['birthd'];  // ISPC-2312 Lore 08.12.2020
						
						$export_data[$i][$export_values['ipid']]['patient_number'] = strtoupper($patient_details[$export_values['ipid']]['epid']);
						$export_data[$i][$export_values['ipid']]['invoice_number'] = $export_values['invoice_number'];
						$export_data[$i][$export_values['ipid']]['invoice_dummy_number'] = "9999";
						$export_data[$i][$export_values['ipid']]['health_insurance'] = $export_values['health_insurance'];

						$i++;
					}

					$this->generateCSV($export_data, 'Rechnungsjournal.csv');
					exit;
				}
				elseif($_POST['export_type'] == "nie_csv")
				{
				    
					$i = 1;

					foreach($client_invoice_data as $k => $export_values)
					{

						$export_data[$i][$export_values['ipid']]['invoice_date'] = date('d.m.Y', strtotime($export_values['completed_date']));
						$export_data[$i][$export_values['ipid']]['invoice_number'] = $export_values['invoice_number'];
						$export_data[$i][$export_values['ipid']]['booking_text'] = $export_values['nie_booking_text'];
						if($export_values['invoice_total'] != "0.00")
						{
							$export_data[$i][$export_values['ipid']]['invoice_amount'] = number_format($export_values['invoice_total'], 2, ',', '');
						}
						else
						{
							$export_data[$i][$export_values['ipid']]['invoice_amount'] = "0";
						}

						$export_data[$i][$export_values['ipid']]['debitor_number'] = $export_values['debtor_number'];
						$export_data[$i][$export_values['ipid']]['account'] = "";
						$i++;
					}

					$this->generateCSV($export_data, 'Rechnungsjournal.csv');
					exit;
				}
				elseif ($this->getRequest()->getPost('export_type') == 'sap_txt')
				{
					$i = 1;
                    $export_type = 'sap_txt';

					foreach($client_invoice_data as $k => $export_values)
					{
					    // all values
					    $export_data[$i][$export_values['ipid']] = $export_values;
						//patient details 
						$export_data[$i][$export_values['ipid']]['invoice_id'] = $export_values['id'];
						$export_data[$i][$export_values['ipid']]['invoice_type'] = $export_values['inv_type'];
						
						$export_data[$i][$export_values['ipid']]['last_name'] = $export_values['last_name'];
						$export_data[$i][$export_values['ipid']]['first_name'] = $export_values['first_name'];
						$export_data[$i][$export_values['ipid']]['birthd'] = $export_values['birthd'];
						$export_data[$i][$export_values['ipid']]['insurance_no'] = $export_values['insurance_no'];

						$export_data[$i][$export_values['ipid']]['invoice_date'] = date('d.m.Y', strtotime($export_values['completed_date']));
						$export_data[$i][$export_values['ipid']]['invoice_start'] = date('d.m.Y', strtotime($export_values['invoice_date']));
						$export_data[$i][$export_values['ipid']]['invoice_end'] = date('d.m.Y', strtotime($export_values['invoice_end']));
						$export_data[$i][$export_values['ipid']]['invoice_number'] = $export_values['invoice_number'];
						$export_data[$i][$export_values['ipid']]['booking_text'] = $export_values['nie_booking_text'];
						
						//ISPC-2171 Lore 10.06.2020
						$export_data[$i][$export_values['ipid']]['storned_inv_number'] = '';
						 
						if($export_values['invoice_total'] != "0.00")
						{
						    if ( $export_values['storno'] == "1"){
						        
    							$export_data[$i][$export_values['ipid']]['invoice_amount'] = number_format(abs($export_values['invoice_total']), 2, ',', '');
    							
    							$export_data[$i][$export_values['ipid']]['storned_inv_number'] = $invoice_storno_data_arr_selected_inv[$export_values['record_id']]['invoice_number'];   //ISPC-2171 Lore 10.06.2020
    							
						    } else {
						        
    							$export_data[$i][$export_values['ipid']]['invoice_amount'] = number_format($export_values['invoice_total'], 2, ',', '');
						    }
						}
						else
						{
							$export_data[$i][$export_values['ipid']]['invoice_amount'] = "0";
						}

						$export_data[$i][$export_values['ipid']]['debitor_number'] = $export_values['debtor_number'];
						$export_data[$i][$export_values['ipid']]['account'] = "";
						$export_data[$i][$export_values['ipid']]['storno'] = $export_values['storno'];
						
						$i++;
					}

					$this->generateTXT($clientid, $export_data, $export_type, 'Rechnungsjournal.txt');
					exit;
				}
				elseif ($this->getRequest()->getPost('export_type') == 'sap_ii_txt')
				{
				    //ISPC-2452 Ancuta 19.09.2019
					$i = 1;
                    $export_type = 'sap_ii_txt';

					foreach($client_invoice_data as $k => $export_values)
					{

					    // all values
					    $export_data[$i][$export_values['ipid']] = $export_values;
						//patient details 
						$export_data[$i][$export_values['ipid']]['invoice_id'] = $export_values['id'];
						$export_data[$i][$export_values['ipid']]['invoice_type'] = $export_values['inv_type'];
						
						$export_data[$i][$export_values['ipid']]['last_name'] = $export_values['last_name'];
						$export_data[$i][$export_values['ipid']]['first_name'] = $export_values['first_name'];
						$export_data[$i][$export_values['ipid']]['birthd'] = $export_values['birthd'];
						$export_data[$i][$export_values['ipid']]['insurance_no'] = $export_values['insurance_no'];

						$export_data[$i][$export_values['ipid']]['invoice_date'] = date('d.m.Y', strtotime($export_values['completed_date']));
						$export_data[$i][$export_values['ipid']]['invoice_start'] = date('d.m.Y', strtotime($export_values['invoice_date']));
						$export_data[$i][$export_values['ipid']]['invoice_end'] = date('d.m.Y', strtotime($export_values['invoice_end']));
						$export_data[$i][$export_values['ipid']]['invoice_number'] = $export_values['invoice_number'];
						$export_data[$i][$export_values['ipid']]['booking_text'] = $export_values['nie_booking_text'];
						if($export_values['invoice_total'] != "0.00")
						{
						    if ( $export_values['storno'] == "1"){
						        
    							$export_data[$i][$export_values['ipid']]['invoice_amount'] = number_format(abs($export_values['invoice_total']), 2, ',', '');
    							
						    } else {
						        
    							$export_data[$i][$export_values['ipid']]['invoice_amount'] = number_format($export_values['invoice_total'], 2, ',', '');
						    }
						}
						else
						{
							$export_data[$i][$export_values['ipid']]['invoice_amount'] = "0";
						}

						$export_data[$i][$export_values['ipid']]['debitor_number'] = $export_values['debtor_number'];
						$export_data[$i][$export_values['ipid']]['account'] = "";
						$export_data[$i][$export_values['ipid']]['storno'] = $export_values['storno'];
						$i++;
					}

					$this->generate_sap_ii_txt($clientid, $export_data, $export_type, 'Rechnungsjournal.txt',$_POST);      //ISPC-2171 Lore 19.03.2020
					exit;
				}
				elseif ($this->getRequest()->getPost('export_type') == 'sh_txt') // ISPC-2272
				{
                    $export_type = 'sh_txt';

					foreach($client_invoice_data as $k => $export_values)
					{
					    $invoice_ids[] = $export_values['id'];
					}
					
					if( empty($invoice_ids) || empty($client_invoice_data)){
					    $this->_redirect(APP_BASE . "invoice/invoicejournal?msg=Keine");
					    exit;
					}
					
					
				    $sh_inv = new ShShiftsInternalInvoices();
				    $invoices_details = $sh_inv->get_invoices($invoice_ids);
				    
					$full_invoice_details = array();
				    foreach($invoices_details['invoices_data'] as $k => $dets){
				        $full_invoice_details[$dets['id']] = $dets;
				        if($dets['user_type'] == "system_user"){
				            $user_ids[] = $dets['user'];
				        }
				        if($dets['user_type'] == "familly_doctor"){
				            $doctor_ids[] = $dets['user'];
				        }
				    }
				    
				    

				    //ISPC-2272 07.11.2018
				    /*
				     * In example is "68110"
				     this field is different depending if the export line is for a : Doctor, Nurse service or family doctor
				     Doctor = 68110
				     family doctor = 68150
				     nurse / nurse service = 68160
				     * */
				    $user_specific_number = array();
				    $user_specific_number['doctor'] = '68110';
				    $user_specific_number['family_doctor'] = '68150';
				    $user_specific_number['nurse'] = '68160';
				    
				    
				    $f_doc_info = array();
				    if(!empty($doctor_ids)){
				    
	   			        $fdoc_obj = new FamilyDoctor();
    				    $fdoc_details = $fdoc_obj->get_family_doctors_multiple($doctor_ids);

    				    //TODO-3236 Ancuta 24.06.2020
    				    $master_fdoc_ids = array();
    				    $doc2master  = array();
    				    // -- 
    				    
    				    foreach($fdoc_details as $fdoc_id=>$fdoc_details){
    				        $f_doc_info[$fdoc_details['id']]['name'] = $fdoc_details['last_name'].' '.$fdoc_details['first_name'];
    				        $f_doc_info[$fdoc_details['id']]['debitor_number'] = $fdoc_details['debitor_number'];
    				        $f_doc_info[$fdoc_details['id']]['user_specific_number'] = $user_specific_number['family_doctor'];

    				        //TODO-3236 Ancuta 24.06.2020
    				        $master_fdoc_ids[] = $fdoc_details['self_id'];
    				        $doc2master[$fdoc_details['id']] = $fdoc_details['self_id'];
    				        //--
    				    }
    				    
    				    //TODO-3236 Ancuta 24.06.2020
    				    $master_fdoc_details = $fdoc_obj->get_family_doctors_multiple($master_fdoc_ids);
    				    $masterDoc2Debitornumber = array();
    				    
    				    foreach($master_fdoc_details as $msfdoc_id => $mfdon_details){
    				        $masterDoc2Debitornumber[$mfdon_details['id']] = $mfdon_details['debitor_number'];
    				    }
    				    
    				    foreach($doctor_ids as $d_id){
    				        if( empty($f_doc_info[$d_id]['debitor_number']) && !empty($doc2master[$d_id]) &&  !empty($masterDoc2Debitornumber[$doc2master[$d_id]] )){
   				                $f_doc_info[$d_id]['debitor_number'] = $masterDoc2Debitornumber[$doc2master[$d_id]];
    				        }
    				    }
    				    // -- 
    				    
				    }
				     
				    
				    
				    // here i also need the user groups
				    
				    $users_info = array();
				    if(!empty($user_ids)){
				    
				        // get client grous 
				        $usergroups = new Usergroup();
				        $master_groups_first = array('4', '5');
				        	
				        $client_user_groups_first = $usergroups->getUserGroups($master_groups_first);
				        $master2client = array();
				        foreach($client_user_groups_first as $k_group_f => $v_group_f)
				        {
				            $master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
				        }
				        	
	   			        $user_obj = new User();
    				    $users_details = $user_obj->getMultipleUserDetails($user_ids);
    				    
    				    foreach($users_details as $uid=>$u_details){
                            
    				        //ISPC-2272 Ancuta 30-31.03.2020
    				        if(!empty($u_details['user_specific_account'])){
    				            
    				            $users_info[$u_details['id']]['user_specific_number'] = $u_details['user_specific_account'];
       				            
    				        } else {//ISPC-2272 Ancuta 30-31.03.2020
    				            
        				        if(in_array($u_details['groupid'], $master2client['4']))
        				        {
        				            $users_info[$u_details['id']]['user_specific_number'] = $user_specific_number['doctor'];
        				        }
        				        else if(in_array($u_details['groupid'], $master2client['5']))
        				        {
        				            $users_info[$u_details['id']]['user_specific_number'] = $user_specific_number['nurse'];
        				        }
    				        }//ISPC-2272 Ancuta 30-31.03.2020
    				        $users_info[$u_details['id']]['name'] = $u_details['last_name'].' '.$u_details['first_name'];
    				        $users_info[$u_details['id']]['debitor_number'] = $u_details['debitor_number'];
    				    }
				    }
				     
				    $export_data = array();
				    $i = 0 ; 
					foreach($client_invoice_data as $k => $export_values)
					{
						//patient details 
						$export_data[$i][$export_values['id']]['invoice_id'] = $export_values['id'];
						$export_data[$i][$export_values['id']]['invoice_type'] = $export_values['inv_type'];
						
						$export_data[$i][$export_values['id']]['user_type'] = $full_invoice_details[$export_values['id']]['user_type'];
						$export_data[$i][$export_values['id']]['user'] = $full_invoice_details[$export_values['id']]['user'];
						
						if($full_invoice_details[$export_values['id']]['user_type'] == "system_user"){
    						$export_data[$i][$export_values['id']]['user_name'] = $users_info[$full_invoice_details[$export_values['id']]['user']]['name'];
    						$export_data[$i][$export_values['id']]['user_debitor_number'] = $users_info[$full_invoice_details[$export_values['id']]['user']]['debitor_number'];
    						$export_data[$i][$export_values['id']]['user_specific_number'] = $users_info[$full_invoice_details[$export_values['id']]['user']]['user_specific_number'];
						} elseif($full_invoice_details[$export_values['id']]['user_type'] == "familly_doctor"){
    						$export_data[$i][$export_values['id']]['user_name'] = $f_doc_info[$full_invoice_details[$export_values['id']]['user']]['name'];
    						$export_data[$i][$export_values['id']]['user_debitor_number'] = $f_doc_info[$full_invoice_details[$export_values['id']]['user']]['debitor_number'];
    						$export_data[$i][$export_values['id']]['user_specific_number'] = $f_doc_info[$full_invoice_details[$export_values['id']]['user']]['user_specific_number'];
						    
						} 
						$export_data[$i][$export_values['id']]['last_name'] = $export_values['last_name'];
						$export_data[$i][$export_values['id']]['first_name'] = $export_values['first_name'];
						$export_data[$i][$export_values['id']]['birthd'] = $export_values['birthd'];
						$export_data[$i][$export_values['id']]['insurance_no'] = $export_values['insurance_no'];

						$export_data[$i][$export_values['id']]['invoice_date'] = date('d.m.Y', strtotime($export_values['completed_date']));
						$export_data[$i][$export_values['id']]['invoice_start'] = date('d.m.Y', strtotime($export_values['inv_start_date']));
						$export_data[$i][$export_values['id']]['invoice_end'] = date('d.m.Y', strtotime($export_values['inv_end_date']));
						$export_data[$i][$export_values['id']]['invoice_number'] = $export_values['invoice_number'];
						$export_data[$i][$export_values['id']]['booking_text'] = $export_values['nie_booking_text'];
						if($export_values['invoice_total'] != "0.00")
						{
						    if ( $export_values['storno'] == "1"){
						        
    							$export_data[$i][$export_values['id']]['invoice_amount'] = number_format(abs($export_values['invoice_total']), 2, '.', '');
    							
						    } else {
						        
    							$export_data[$i][$export_values['id']]['invoice_amount'] = number_format($export_values['invoice_total'], 2, '.', '');
						    }
						}
						else
						{
							$export_data[$i][$export_values['id']]['invoice_amount'] = "0";
						}

						$export_data[$i][$export_values['id']]['debitor_number'] = $export_values['debtor_number'];
						$export_data[$i][$export_values['id']]['account'] = "";
						$export_data[$i][$export_values['id']]['storno'] = $export_values['storno'];
						
						
						$export_data[$i][$export_values['id']]['client_company_number'] = $clientinfo[0]['company_number'];
						$export_data[$i][$export_values['id']]['client_cost_center'] = $clientinfo[0]['cost_center'];
						$export_data[$i][$export_values['id']]['client_team_name'] = $clientinfo[0]['team_name'];
						
						$i++;
					}

					$this->generateSHTXT($clientid, $export_data, 'sh_txt', 'Rechnungsjournal.txt');
					exit;
				}
				elseif ($this->getRequest()->getPost('export_type') == 'sh_external_txt' || $this->getRequest()->getPost('export_type') == 'pdf-sh' || $this->getRequest()->getPost('export_type') == 'excel-sh') // ISPC-2272 + ISPC-2424 + TODO-2915
				{
				    //$export_type = 'sh_external_txt';
				    $export_type = $this->getRequest()->getPost('export_type');
				    

					foreach($client_invoice_data as $k => $export_values)
					{
					    $invoice_ids[] = $export_values['id'];
					}
					
					if( empty($invoice_ids) || empty($client_invoice_data)){
					    $this->_redirect(APP_BASE . "invoice/invoicejournal?msg=Keine");
					    exit;
					}
					
					// HEalth insurance name 
					// Patient name  - if private
					
					// health insurance debitor number
					// private patient debitor number 
					
					//$sz_kk
					//this is "SZ" for Privatpatient and "KK" for health insurance
					// patient gender
					
					// company_number -  CLIENT
					// cost_center  - CLIENT
					
					
					$sapv_type_codes = array(
					    "KO"=>"43200",
					    "TV"=>"43210",
					    "VV"=>"43220"
					);
					
					
				    $sh_inv = new ShShiftsInternalInvoices();
				    $invoices_details = $sh_inv->get_invoices($invoice_ids);

				    
					
				    $sh_inv = new ShShiftsInternalInvoices();
				    $invoices_details = $sh_inv->get_invoices($invoice_ids);
				    
					$full_invoice_details = array();
				    foreach($invoices_details['invoices_data'] as $k => $dets){
				        $full_invoice_details[$dets['id']] = $dets;
				        if($dets['user_type'] == "system_user"){
				            $user_ids[] = $dets['user'];
				        }
				        if($dets['user_type'] == "familly_doctor"){
				            $doctor_ids[] = $dets['user'];
				        }
				    }
				    
				    

				    //ISPC-2272 07.11.2018
				    /*
				     * In example is "68110"
				     this field is different depending if the export line is for a : Doctor, Nurse service or family doctor
				     Doctor = 68110
				     family doctor = 68150
				     nurse / nurse service = 68160
				     * */
				    $user_specific_number = array();
				    $user_specific_number['doctor'] = '68110';
				    $user_specific_number['family_doctor'] = '68150';
				    $user_specific_number['nurse'] = '68160';
				    
				    
				    $f_doc_info = array();
				    if(!empty($doctor_ids)){
				    
	   			        $fdoc_obj = new FamilyDoctor();
    				    $fdoc_details = $fdoc_obj->get_family_doctors_multiple($doctor_ids);

    				    foreach($fdoc_details as $fdoc_id=>$fdoc_details){
    				        $f_doc_info[$fdoc_details['id']]['name'] = $fdoc_details['last_name'].' '.$fdoc_details['first_name'];
    				        $f_doc_info[$fdoc_details['id']]['debitor_number'] = $fdoc_details['debitor_number'];
    				        $f_doc_info[$fdoc_details['id']]['user_specific_number'] = $user_specific_number['family_doctor'];
    				    }
				    }
				     
				    
				    
				    // here i also need the user groups
				    
				    $users_info = array();
				    if(!empty($user_ids)){
				    
				        // get client grous 
				        $usergroups = new Usergroup();
				        $master_groups_first = array('4', '5');
				        	
				        $client_user_groups_first = $usergroups->getUserGroups($master_groups_first);
				        $master2client = array();
				        foreach($client_user_groups_first as $k_group_f => $v_group_f)
				        {
				            $master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
				        }
				        	
	   			        $user_obj = new User();
    				    $users_details = $user_obj->getMultipleUserDetails($user_ids);
    				    
    				    foreach($users_details as $uid=>$u_details){
    				        if(in_array($u_details['groupid'], $master2client['4']))
    				        {
    				            $users_info[$u_details['id']]['user_specific_number'] = $user_specific_number['doctor'];
    				        }
    				        else if(in_array($u_details['groupid'], $master2client['5']))
    				        {
    				            $users_info[$u_details['id']]['user_specific_number'] = $user_specific_number['nurse'];
    				        }
    				        
    				        $users_info[$u_details['id']]['name'] = $u_details['last_name'].' '.$u_details['first_name'];
    				        $users_info[$u_details['id']]['debitor_number'] = $u_details['debitor_number'];
    				    }
				    }
				     
				    $export_data = array();
				    $i = 0 ; 
//				    dd($client_invoice_data);
					foreach($client_invoice_data as $k => $export_values)
					{
						//patient details 
						$export_data[$i][$export_values['id']]['invoice_id'] = $export_values['id'];
						$export_data[$i][$export_values['id']]['invoice_type'] = $export_values['inv_type'];
						
						$export_data[$i][$export_values['id']]['user_type'] = $full_invoice_details[$export_values['id']]['user_type'];
						$export_data[$i][$export_values['id']]['user'] = $full_invoice_details[$export_values['id']]['user'];
						
						if($full_invoice_details[$export_values['id']]['user_type'] == "system_user"){
    						$export_data[$i][$export_values['id']]['user_name'] = $users_info[$full_invoice_details[$export_values['id']]['user']]['name'];
    						$export_data[$i][$export_values['id']]['user_debitor_number'] = $users_info[$full_invoice_details[$export_values['id']]['user']]['debitor_number'];
    						$export_data[$i][$export_values['id']]['user_specific_number'] = $users_info[$full_invoice_details[$export_values['id']]['user']]['user_specific_number'];
						} elseif($full_invoice_details[$export_values['id']]['user_type'] == "familly_doctor"){
    						$export_data[$i][$export_values['id']]['user_name'] = $f_doc_info[$full_invoice_details[$export_values['id']]['user']]['name'];
    						$export_data[$i][$export_values['id']]['user_debitor_number'] = $f_doc_info[$full_invoice_details[$export_values['id']]['user']]['debitor_number'];
    						$export_data[$i][$export_values['id']]['user_specific_number'] = $f_doc_info[$full_invoice_details[$export_values['id']]['user']]['user_specific_number'];
						    
						} 
						$export_data[$i][$export_values['id']]['last_name'] = $export_values['last_name'];
						$export_data[$i][$export_values['id']]['first_name'] = $export_values['first_name'];
						$export_data[$i][$export_values['id']]['birthd'] = $export_values['birthd'];
						$export_data[$i][$export_values['id']]['insurance_no'] = $export_values['insurance_no'];

						$export_data[$i][$export_values['id']]['invoice_date'] = date('d.m.Y', strtotime($export_values['completed_date']));
						$export_data[$i][$export_values['id']]['invoice_start'] = date('d.m.Y', strtotime($export_values['inv_start_date']));
						$export_data[$i][$export_values['id']]['invoice_end'] = date('d.m.Y', strtotime($export_values['inv_end_date']));
						$export_data[$i][$export_values['id']]['invoice_number'] = $export_values['invoice_number'];
						$export_data[$i][$export_values['id']]['booking_text'] = $export_values['nie_booking_text'];
						
						if($export_values['invoice_total'] != "0.00")
						{
						    if ( $export_values['storno'] == "1"){
						
						        $export_data[$i][$export_values['id']]['invoice_amount'] = number_format(abs($export_values['invoice_total']), 2, '.', '');
						        	
						    } else {
						
						        $export_data[$i][$export_values['id']]['invoice_amount'] = number_format($export_values['invoice_total'], 2, '.', '');
						    }
						}
						else
						{
						    $export_data[$i][$export_values['id']]['invoice_amount'] = "0";
						}
						
						

						$export_data[$i][$export_values['id']]['debitor_number'] = $export_values['debtor_number'];
						$export_data[$i][$export_values['id']]['debitor_number'] = $export_values['debtor_number'];
						$export_data[$i][$export_values['id']]['account'] = "";
						$export_data[$i][$export_values['id']]['storno'] = $export_values['storno'];
						//ISPC-2272 Ancuta 30-31.03.2020
						$export_data[$i][$export_values['id']]['record_id'] = $export_values['record_id'];
						//--
						
						
						
						
						
						
						$export_data[$i][$export_values['id']]['client_company_number'] = $clientinfo[0]['company_number'];
						$export_data[$i][$export_values['id']]['client_cost_center'] = $clientinfo[0]['cost_center'];
						$export_data[$i][$export_values['id']]['client_team_name'] = $clientinfo[0]['team_name'];
						
						
						// SH - external
						$export_data[$i][$export_values['id']]['patient_ipid'] = $export_values['ipid'];
						$export_data[$i][$export_values['id']]['patient_gender_title'] = $export_values['patient_gender_title'];
						$export_data[$i][$export_values['id']]['patient_last_name'] =  $export_values['patient_last_name'];
						$export_data[$i][$export_values['id']]['patient_first_name'] = $export_values['patient_first_name'];
						
						//$export_data[$i][$export_values['id']]['patient_full_name'] =  $export_values['patient_first_name'].', '.$export_values['patient_last_name'];
						$export_data[$i][$export_values['id']]['patient_full_name'] =  $export_values['patient_last_name'].', '.$export_values['patient_first_name'];
						
						$export_data[$i][$export_values['id']]['patient_birthd'] =  $export_values['patient_birthd'];
						$export_data[$i][$export_values['id']]['patient_gender'] = $export_values['patient_gender'];
						
						$export_data[$i][$export_values['id']]['patient_street'] = $export_values['patient_street'];
						$export_data[$i][$export_values['id']]['patient_zip'] = $export_values['patient_zip'];
						$export_data[$i][$export_values['id']]['patient_city'] = $export_values['patient_city'];
						$export_data[$i][$export_values['id']]['patient_phone'] = $export_values['patient_phone'];
							
						$export_data[$i][$export_values['id']]['private_patient'] = $export_values['private_patient'];
						$export_data[$i][$export_values['id']]['health_insurance_company'] = $export_values['health_insurance_company'];
						
						$export_data[$i][$export_values['id']]['health_insurance_street'] = $export_values['health_insurance_street'];
						$export_data[$i][$export_values['id']]['health_insurance_zip'] = $export_values['health_insurance_zip'];
						$export_data[$i][$export_values['id']]['health_insurance_city'] = $export_values['health_insurance_city'];
						$export_data[$i][$export_values['id']]['health_insurance_phone'] = $export_values['health_insurance_phone'];
						
						$export_data[$i][$export_values['id']]['invoice_total_ammount'] = $export_values['invoice_total'];
	 
						
						//TODO-2605  Get subdevisions for shexport. Ancuta 25.11.2019
						//    TODO-2869 ISPC: Invoice journal export- Debitorennumber is missing in the Export File :: also check if data is added to subd 3!! 
						if(isset($PatientHealthInsuranceSubdivisions[$export_values['ipid']][3])
						    && strlen($PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['name']) > 1
						    ){
    						
						    $export_data[$i][$export_values['id']]['health_insurance_company'] = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['name'];
						    $export_data[$i][$export_values['id']]['health_insurance_street']  = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['street1'];
    						$export_data[$i][$export_values['id']]['health_insurance_zip']     = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['zip'];
    						$export_data[$i][$export_values['id']]['health_insurance_city']    = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['city'];
    						$export_data[$i][$export_values['id']]['health_insurance_phone']   = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['phone'];
    						$export_data[$i][$export_values['id']]['debitor_number']           = $PatientHealthInsuranceSubdivisions[$export_values['ipid']][3]['debtor_number'];
						}
						
						$i++;
					}
					//$this->generateSH_external_TXT($clientid, $export_data, 'sh_external_txt', 'Rechnungsjournal.txt');
   					$this->generateSH_external_TXT($clientid, $export_data, $export_type, 'Rechnungsjournal.txt');
					exit;
				}
				elseif($_POST['export_type'] == "bw_external_csv")
				{
				   
				
				    $dta_request =array();
				    if($_POST['activate_items_date'] == "on"){
				        $dta_request['start_date'] = $_POST['item_start_date'];
				        $dta_request['end_date'] =  $_POST['item_end_date'];
				    } else{
				        $dta_request['start_date'] = $_POST['start_date'];
				        $dta_request['end_date'] =  $_POST['end_date'];
				    }
				    
// 				    dd($client_invoice_data);
				    $invoice_detailss = array();
				    $invoices_ids = array();
				    foreach($client_invoice_data as $k => $export_values)
				    {
				        $invoices_ids[] = $export_values['id'];
				        $dta_request['invoices']['bw'][] = $export_values['id'];
				        
				        $invoice_detailss[$export_values['id']]['invoice_date'] = date('d.m.Y', strtotime($export_values['completed_date']));
				        $invoice_detailss[$export_values['id']]['patient'] = $export_values['patient_name'];
				        // ISPC-2312 Lore 08.12.2020
				        $invoice_detailss[$export_values['id']]['birthd'] = $export_values['birthd'];
				        
				        $invoice_detailss[$export_values['id']]['patient_epid'] = $export_values['epid'];
				        $invoice_detailss[$export_values['id']]['ipid'] = $export_values['ipid'];
				        $invoice_detailss[$export_values['id']]['invoice_number'] = $export_values['invoice_number'];
				    }

				    // get invoices items
				    
				    $bwn_inv = new BwInvoicesNew();
				    $invoices_details = $bwn_inv->get_invoices($invoices_ids);
				    $i = 1;
				    
				    $export_data[$i]["header"]['patient_number']  =  $this->view->translate('bw_invoice_patient_number');
				    $export_data[$i]["header"]['patient_name']  =  $this->view->translate('bw_invoice_patient_name');
				    $export_data[$i]["header"]['birthd']  =  $this->view->translate('birthd');      // ISPC-2312 Lore 08.12.2020
				    
				    $export_data[$i]["header"]['invoice_number']  = $this->view->translate('bw_invoice_number');
				    $export_data[$i]["header"]['product_name']  =  $this->view->translate('bw_product_name');
				    $export_data[$i]["header"]['product_amount']  =  $this->view->translate('bw_product_ammount');
				    $export_data[$i]["header"]['product_price']  =  $this->view->translate('bw_product_price');
 				    $export_data[$i]["header"]['invoice_date']  =  $this->view->translate('bw_invoice_date');
				    	$I++;
				    foreach($invoices_details['invoices_data'] as  $inv_id=>$inv_data){
				        
				        $negative_ammount[$inv_data['id']] = "";
				        if($inv_data['storno'] == "1"){
				            $negative_ammount[$inv_data['id']]="-";
				        }
				        foreach($inv_data['items'] as $k=>$item){
				          
				            $export_data[$i][$inv_data['ipid']]['patient_number'] = $invoice_detailss[$inv_data['id']]['patient_epid'];
				            $export_data[$i][$inv_data['ipid']]['patient'] = $invoice_detailss[$inv_data['id']]['patient'];
				            // ISPC-2312 Lore 08.12.2020
				            $export_data[$i][$inv_data['ipid']]['birthd'] = $invoice_detailss[$inv_data['id']]['birthd'];
				            
				            $export_data[$i][$inv_data['ipid']]['invoice_number'] = $invoice_detailss[$inv_data['id']]['invoice_number'];
				            $export_data[$i][$inv_data['ipid']]['product_name'] = $this->view->translate('shortcut_description_'.$item['shortcut']);
				            $export_data[$i][$inv_data['ipid']]['product_amount'] = $negative_ammount[$inv_data['id']].$item['qty'];
				            $export_data[$i][$inv_data['ipid']]['product_price'] = number_format($item['price'], 2, ',', '.');
				            $export_data[$i][$inv_data['ipid']]['invoice_date'] = $invoice_detailss[$inv_data['id']]['invoice_date'];
// 				            $export_data[$i][$inv_data['ipid']]['invoice_number'] = $invoice_detailss[$inv_data['id']]['invoice_number'];
				            $i++;
				            
				        }
				        
				    }
// 				    dd($export_data);
				    /* include 'DtaController.php';

				    $dtaController = new DtaController($this->_request, $this->_response);
				    $invoices_expanded = $dtaController->gather_dta_bw_data("new",$clientid,$userid, $dta_request,'invoicejournal');
				    $i = 1;
				        foreach ($invoices_expanded  as $invoice_id=>$products_dates){
				            foreach($products_dates as $indent => $products){
        				        foreach($products as $tr=>$td){
        				            $export_data[$i][$td['ipid']]['product_date'] = date("d.m.Y",strtotime($td['day']));
        				            $export_data[$i][$td['ipid']]['patient'] = $invoice_details[$invoice_id]['patient'];
        				            $export_data[$i][$td['ipid']]['product_name'] = $td['name'];
        				            $export_data[$i][$td['ipid']]['product_amount'] = "1";
        				            $export_data[$i][$td['ipid']]['product_price'] = $td['price'];
        				            $export_data[$i][$td['ipid']]['invoice_date'] = $invoice_details[$invoice_id]['invoice_date'];
        				            $export_data[$i][$td['ipid']]['invoice_number'] = $invoice_details[$invoice_id]['invoice_number'];
        				            $i++;
        				        }
				            }
				        } */
				  
				
				    $this->generateCSV($export_data, 'Rechnungsjournal.csv');
				    exit;
				}				
				elseif($_POST['export_type'] == "bw_external_2_csv")
				{
				   
				
				    $dta_request =array();
				    if($_POST['activate_items_date'] == "on"){
				        $dta_request['start_date'] = $_POST['item_start_date'];
				        $dta_request['end_date'] =  $_POST['item_end_date'];
				    } else{
				        $dta_request['start_date'] = $_POST['start_date'];
				        $dta_request['end_date'] =  $_POST['end_date'];
				    }
				    
// 				    dd($client_invoice_data);
				    $invoice_detailss = array();
				    $invoices_ids = array();
				    foreach($client_invoice_data as $k => $export_values)
				    {
				        $invoices_ids[] = $export_values['id'];
				        $dta_request['invoices']['bw'][] = $export_values['id'];
				        
				        $invoice_detailss[$export_values['id']]['invoice_date'] = date('d.m.Y', strtotime($export_values['completed_date']));
				        $invoice_detailss[$export_values['id']]['patient'] = $export_values['patient_name'];
				        // ISPC-2312 Lore 08.12.2020
				        $invoice_detailss[$export_values['id']]['birthd'] = $export_values['patient_birthd'];
				        
				        $invoice_detailss[$export_values['id']]['patient_epid'] = $export_values['epid'];
				        $invoice_detailss[$export_values['id']]['ipid'] = $export_values['ipid'];
				        $invoice_detailss[$export_values['id']]['invoice_number'] = $export_values['invoice_number'];
				    }

				    // get invoices items
				    
				    $bwn_inv = new BwInvoicesNew();
				    $invoices_details = $bwn_inv->get_invoices($invoices_ids);
				    $i = 1;
				    
				    $export_data[$i]["header"]['patient_number']  =  $this->view->translate('bw_invoice_patient_number');
				    $export_data[$i]["header"]['patient_name']  =  $this->view->translate('bw_invoice_patient_name');
				    $export_data[$i]["header"]['birthd']  =  $this->view->translate('birthd');      // ISPC-2312 Lore 08.12.2020
				    
				    $export_data[$i]["header"]['invoice_number']  = $this->view->translate('bw_invoice_number');
				    $export_data[$i]["header"]['product_name']  =  $this->view->translate('bw_product_name');
				    $export_data[$i]["header"]['product_amount']  =  $this->view->translate('bw_product_ammount');
				    $export_data[$i]["header"]['product_price']  =  $this->view->translate('bw_product_price');
 				    $export_data[$i]["header"]['invoice_date']  =  $this->view->translate('bw_invoice_date');
 				    
 				    $export_data[$i]["header"]['debitornumber']  =  $this->view->translate('bw_debitornumber');
 				    $export_data[$i]["header"]['booking_account']  =  $this->view->translate('bw_booking_account');
 
 				    
				    include 'DtaController.php';

				    $dtaController = new DtaController($this->_request, $this->_response);
				    $invoices_expanded = $dtaController->gather_dta_bw_data_full("new",$clientid,$userid, $dta_request,'invoicejournal');
// 				    dd($invoices_expanded);
				    $i = 1;
				        foreach ($invoices_expanded  as $invoice_id=>$inv_data){
				            
				            $negative_ammount[$inv_data['invoice_id']] = "";
				            if($inv_data['storno'] == "1"){
				                $negative_ammount[$inv_data['invoice_id']]="-";
				            }
				            
				            foreach($inv_data['products'] as $indent => $products){
				                
				                $item=array();
				                $item = $products[0];
    				            $export_data[$i][$inv_data['ipid']]['patient_number'] = $invoice_detailss[$inv_data['invoice_id']]['patient_epid'];
    				            $export_data[$i][$inv_data['ipid']]['patient'] = $invoice_detailss[$inv_data['invoice_id']]['patient'];
    				            // ISPC-2312 Lore 08.12.2020
    				            $export_data[$i][$inv_data['ipid']]['birthd']  = $invoice_detailss[$inv_data['invoice_id']]['birthd'];
    				            $export_data[$i][$inv_data['ipid']]['invoice_number'] = $invoice_detailss[$inv_data['invoice_id']]['invoice_number'];
    				            $export_data[$i][$inv_data['ipid']]['product_name'] = $this->view->translate('shortcut_description_'.$item['shortcut']);
    				            $export_data[$i][$inv_data['ipid']]['product_amount'] = $negative_ammount[$inv_data['invoice_id']].$item['item_qty'];
    				            $export_data[$i][$inv_data['ipid']]['product_price'] =  !empty($item['price']) ? $item['price'] : $item['item_price'] ;
    				            $export_data[$i][$inv_data['ipid']]['product_date'] = $invoice_detailss[$inv_data['invoice_id']]['invoice_date'];;
    				            $export_data[$i][$inv_data['ipid']]['product_debitor_number'] = $item['debitor_number'];
    				            $export_data[$i][$inv_data['ipid']]['product_booking_account'] = $item['booking_account'];
    				            $i++;
    				            
// 			                    dd("echo",count($products),$products);
    				            /* foreach($products as $k=>$item){
        				            $export_data[$i][$inv_data['ipid']]['patient_number'] = $invoice_detailss[$inv_data['invoice_id']]['patient_epid'];
        				            $export_data[$i][$inv_data['ipid']]['patient'] = $invoice_detailss[$inv_data['invoice_id']]['patient'];
        				            $export_data[$i][$inv_data['ipid']]['invoice_number'] = $invoice_detailss[$inv_data['invoice_id']]['invoice_number'];
        				            $export_data[$i][$inv_data['ipid']]['product_name'] = $this->view->translate('shortcut_description_'.$item['shortcut']);
        				            $export_data[$i][$inv_data['ipid']]['product_amount'] = $negative_ammount[$inv_data['invoice_id']].'1';
        				            $export_data[$i][$inv_data['ipid']]['product_price'] =  $item['price'] ;
        				            $export_data[$i][$inv_data['ipid']]['product_date'] = $item['day'];
        				            $export_data[$i][$inv_data['ipid']]['product_debitor_number'] = $item['debitor_number'];
        				            $export_data[$i][$inv_data['ipid']]['product_booking_account'] = $item['booking_account'];
        				            $i++;
    				            } */
    				            
				            }
				            
				        } 
// 				  exit;
// 				    dd($export_data);
				    $this->generateCSV($export_data, 'Rechnungsjournal.csv');
				    exit;
				}
				elseif($_POST['export_type'] == "bw_external_3_csv") // ISPC-2566 Andrei 28.05.2020
				{
				    
				    
				    $dta_request =array();
				    if($_POST['activate_items_date'] == "on"){
				        $dta_request['start_date'] = $_POST['item_start_date'];
				        $dta_request['end_date'] =  $_POST['item_end_date'];
				    } else{
				        $dta_request['start_date'] = $_POST['start_date'];
				        $dta_request['end_date'] =  $_POST['end_date'];
				    }
				    
				    // 				    dd($client_invoice_data);
				    $invoice_detailss = array();
				    $invoices_ids = array();
				    foreach($client_invoice_data as $k => $export_values)
				    {
				        $invoices_ids[] = $export_values['id'];
				        $dta_request['invoices']['bw'][] = $export_values['id'];
				        
				        $invoice_detailss[$export_values['id']]['invoice_date'] = date('d.m.Y', strtotime($export_values['completed_date']));
				        $invoice_detailss[$export_values['id']]['patient'] = $export_values['patient_name'];
				        // ISPC-2312 Lore 08.12.2020
				        $invoice_detailss[$export_values['id']]['birthd'] = $export_values['patient_birthd'];
				        
				        $invoice_detailss[$export_values['id']]['patient_epid'] = $export_values['epid'];
				        $invoice_detailss[$export_values['id']]['ipid'] = $export_values['ipid'];
				        $invoice_detailss[$export_values['id']]['invoice_number'] = $export_values['invoice_number'];
				        
				        //TODO-4013 Lore 22.04.2021
				        $invoice_detailss[$export_values['id']]['billing_month'] = $export_values['invoice_date'];
				    }
				    
				    // get invoices items
				    
				    $bwn_inv = new BwInvoicesNew();
				    $invoice_details2 = $bwn_inv->get_invoices($invoices_ids);
				    $i = 1;
				    
				    $export_data[$i]["header"]['patient_number']  =  $this->view->translate('bw_invoice_patient_number');
				    $export_data[$i]["header"]['patient_name']  =  $this->view->translate('bw_invoice_patient_name');
				    $export_data[$i]["header"]['birthd']  =  $this->view->translate('birthd');      // ISPC-2312 Lore 08.12.2020
				    
				    $export_data[$i]["header"]['invoice_number']  = $this->view->translate('bw_invoice_number');
				    $export_data[$i]["header"]['billing_month'] = $this->view->translate('bw_billing_month');
				    $export_data[$i]["header"]['cost_center'] = $this->view->translate('bw_cost_center');
				    $export_data[$i]["header"]['product_name']  =  $this->view->translate('bw_product_name');
				    $export_data[$i]["header"]['product_amount']  =  $this->view->translate('bw_product_ammount');
				    $export_data[$i]["header"]['product_price']  =  $this->view->translate('bw_product_price');
				    $export_data[$i]["header"]['product_totalprice']  =  $this->view->translate('bw_product_totalprice'); 
				    $export_data[$i]["header"]['invoice_date']  =  $this->view->translate('bw_invoice_date');
				    
				    $export_data[$i]["header"]['debitornumber']  =  $this->view->translate('bw_debitornumber');
				    $export_data[$i]["header"]['booking_account']  =  $this->view->translate('bw_booking_account');
				    
				    
				    include 'DtaController.php';
				    
				    $dtaController = new DtaController($this->_request, $this->_response);
				    $invoices_expanded = $dtaController->gather_dta_bw_data_full("new",$clientid,$userid, $dta_request,'invoicejournal');
				    $i = 1;
				    
				    foreach ($invoices_expanded  as $invoice_id=>$inv_data){
				        
				        $negative_ammount[$inv_data['invoice_id']] = "";
				        if($inv_data['storno'] == "1"){
				            $negative_ammount[$inv_data['invoice_id']]="-";
				        }
				        
				        foreach($inv_data['products'] as $indent => $products){
				            
				            if(!empty($products)){ //TODO-4013 Ancuta 30.03.2021 - added if 
    				            $item=array();
    				            $item = $products[0];
    				            $export_data[$i][$inv_data['ipid']]['patient_number'] = $invoice_detailss[$inv_data['invoice_id']]['patient_epid'];
    				            $export_data[$i][$inv_data['ipid']]['patient'] = $invoice_detailss[$inv_data['invoice_id']]['patient'];
    				            
    				            // ISPC-2312 Lore 08.12.2020
    				            $export_data[$i][$inv_data['ipid']]['birthd']  = $invoice_detailss[$inv_data['invoice_id']]['birthd'];
    				            
    				            $export_data[$i][$inv_data['ipid']]['invoice_number'] = $invoice_detailss[$inv_data['invoice_id']]['invoice_number'];
    				            //$export_data[$i][$inv_data['ipid']]['billing_month'] = date('m/Y', strtotime($invoice_detailss[$inv_data['invoice_id']]['invoice_date']));// TODO-4013 Ancuta 15.04.2021
    				            $export_data[$i][$inv_data['ipid']]['billing_month'] = date('m/Y', strtotime($invoice_detailss[$inv_data['invoice_id']]['billing_month']));// TODO-4013 Lore 22.04.2021
    				            $export_data[$i][$inv_data['ipid']]['cost_center'] = $clientinfo[0]['cost_center'];
    				            $export_data[$i][$inv_data['ipid']]['product_name'] = $this->view->translate('shortcut_description_'.$item['shortcut']);
    				            $export_data[$i][$inv_data['ipid']]['product_amount'] = $negative_ammount[$inv_data['invoice_id']].$item['item_qty'];
    				            
    				            //TODO-4013 Ancuta 15.04.2021 - commented line 
    				            $export_data[$i][$inv_data['ipid']]['product_price'] =  !empty($item['price']) ? $item['price'] : $item['item_price'] ;
    				            //-- 
    				            //$export_data[$i][$inv_data['ipid']]['product_totalprice'] =  $export_data[$i][$inv_data['ipid']]['product_price']*$export_data[$i][$inv_data['ipid']]['product_amount'];
    				            //$export_data[$i][$inv_data['ipid']]['product_date'] = $invoice_detailss[$inv_data['invoice_id']]['invoice_date'];;
    				            //ISPC-2566 Lore 24.06.2020
    				            $product_price_sg = str_replace('.','',$export_data[$i][$inv_data['ipid']]['product_price']);
    				            $product_price_fn = str_replace(',','.',$product_price_sg);

    				            //TODO-4013 Ancuta 15.04.2021 - added new line  
    				            $export_data[$i][$inv_data['ipid']]['product_price'] =  number_format($product_price_fn, 2, ',', '.') ;
    				            //
    				            
    				            //TODO-4013 Ancuta 15.04.2021
    				            //$export_data[$i][$inv_data['ipid']]['product_totalprice'] =  $product_price_fn*$item['item_qty']*($inv_data['storno'] == "1" ? -1 : 1 );
    				            $product_totalprice = "";
    				            $product_totalprice = $product_price_fn*$item['item_qty'];
    				            $product_totalprice = number_format($product_totalprice, 2, ',', '.');
    				            if($inv_data['storno'] == "1" ){
    				                $product_totalprice = '-'.$product_totalprice;
    				            }
    				            $export_data[$i][$inv_data['ipid']]['product_totalprice'] =  $product_totalprice;
    				            //--
    				            $export_data[$i][$inv_data['ipid']]['product_date'] = date(' d.m.Y', strtotime($invoice_detailss[$inv_data['invoice_id']]['invoice_date']));//TODO-4013 Ancuta 07.04.2021
    				            $export_data[$i][$inv_data['ipid']]['product_debitor_number'] = $item['debitor_number'];
    				            $export_data[$i][$inv_data['ipid']]['product_booking_account'] = $item['booking_account'];
    				            $i++;
					        }
				           
				        }
				        
				    }
				    $this->generateCSV($export_data, 'Rechnungsjournal.csv'); 
				    exit;
				}	
				else if($_POST['export_type'] == "pdf")
				{
					$this->generate_pdf($post, "InvoiceJournal", "invoicejournal_pdf.html", "p");
					exit;
				}
				elseif ($this->getRequest()->getPost('export_type') == 'unna_csv') {
				    /*
				     * ISPC-2189
				     * to see the requested columns
				     */
				    
				    $i = 1;
				    $export_data = array();
				    //dd($clientinfo, $client_invoice_data);
				    foreach($client_invoice_data as $row)
				    {
				        $model_row = array(
				            1 => '25',
				            2 => date("Y", strtotime($row['completed_date']) ),
				            4 => date("d.m.Y H:i", strtotime($row['completed_date']) ),
				            5 => '1',
				            6 => '1',
				            7 => $row['epid_num'],//$clientinfo[0]['sepa_iban'], //ISPC-2189  changed by Ancuta : Comment 13/Jun/18 BY Administrator
				            8 => $row['invoice_number'],
				            10 => $row['invoice_number'], //ISPC-2189  changed bb Ancuta : Comment 13/Jun/18 BY Administrator
				            12 => '400160',
				            14 => date("d.m.Y", strtotime($row['completed_date']) ),
				            15 => date("n", strtotime($row['completed_date']) ),
				            16 => $row['invoice_total'],
				            18 => $row['patient_name'],
				            19 => $row['insurance_no'],
				            26 => '9300000',
				            45 => $row['health_insurance']
				            
				        );
				        
				        for ($j=1; $j<46; $j++) {
				            if ( ! isset($model_row[$j])) {
				                $model_row[$j] = '';
				            }
				        }
				        ksort($model_row);
				        
				        $export_data[$i][$row['ipid']] = $model_row ;
				        
				        $i++;
				        
				    }
				    
				    $this->generateCSV($export_data, 'Rechnungsjournal_Unna.csv', chr(59), '"');
				    exit;
				    
				}
				elseif ($this->getRequest()->getPost('export_type') == 'e_s_csv') {
				    /*
				     * ISPC-2505 Lore 17.12.2019
				     * to see the requested columns
				     */
				    
				    $i = 1;
				    $export_data = array();
				    				    
				    foreach($client_invoice_data as $row)
				    {
				        $model_row = array(
				            1 => '3',
				            2 => date("Y", strtotime($row['completed_date']) ),
				            3 => 'REAUS',
				            4 => date("d.m.Y H:i", strtotime($row['completed_date']) ),
				            5 => '1',
				            6 => '2',
				            7 => $row['epid_num'], 
				            8 => $row['debtor_number'],
				            10 => $row['invoice_number'],
				            12 => ($row['storno'] == 1) ? '1' : '',
				            13 => '40500',
				            14 => date("d.m.Y", strtotime($row['completed_date']) ),
				            15 => date("m", strtotime($row['invoice_date'])),                  // change on 02.03.2020
				            16 => str_replace(".", ",", $row['invoice_total']) ,          //$row['invoice_total'],
				            18 => $row['patient_name'],
				            19 => $row['insurance_no'],
				            26 => '9300000',
				            45 => $row['health_insurance']
				            
				        );
				      
				        for ($j=1; $j<46; $j++) {
				            if ( ! isset($model_row[$j])) {
				                $model_row[$j] = '';
				            }
				        }
				        ksort($model_row);
				        
				        $export_data[$i][$row['ipid']] = $model_row ;
				        
				        $i++;
				        
				    }
				    
				    $this->generateCSV($export_data, 'Rechnungsjournal_E_S.csv', chr(59), '"');
				    exit;
				    
				} 

			}
		}



		public function getexportedfilesAction() {
		    $logininfo = new Zend_Session_Namespace ( 'Login_Info' );
		    $clientid = $logininfo->clientid;
		
		    $query = Doctrine_Query::create()
		    ->select('*')
		    ->from('InvoicejournalExportFiles')
		    ->where('clientid = ? ', $clientid);
		    $query->orderBy("create_date DESC");
		    $q_res = $query->fetchArray();
		
		    $full_count = count ($q_res);
		
		    $row_id = 0;
		    $link = "";
		    $resulted_data = array ();
		    foreach ( $q_res as $r => $mdata ) {
		        $link = '%s ';
		        $resulted_data [$row_id] ['export_date'] = sprintf ( $link, date ( "d.m.Y H:i", strtotime ( $mdata ['create_date']  ) ) );
		        $resulted_data [$row_id] ['export_type'] =  $this->view->translate($mdata ['export_type']);
		        $resulted_data [$row_id] ['delete'] = '';
		        $resulted_data [$row_id] ['delete'] .= '<a href="'.APP_BASE .'invoice/downloadfile?file_id='.$mdata['id'].'"  ><img border="0" src="'.RES_FILE_PATH.'/images/file_download.png"></a>';
		        $resulted_data [$row_id] ['delete'] .= '<a href="javascript:void(0);"  class="delete_file" rel="'.$mdata['id'].'" id="delete_'.$mdata['id'].'"><img border="0" src="'.RES_FILE_PATH.'/images/action_delete.png"></a>';
		        $row_id ++;
		    }
		
		    $response ['draw'] = $_REQUEST ['draw']; // ? get the sent draw from data table
		    $response ['recordsTotal'] = $full_count;
		    $response ['recordsFiltered'] = $full_count; // ??
		    $response ['data'] = $resulted_data;
		
		    header ( "Content-type: application/json; charset=UTF-8" );
		
		    echo json_encode ( $response );
		    exit ();
		}

		public function deleteexportedfileAction ()
		{
		    $logininfo = new Zend_Session_Namespace ( 'Login_Info' );
		    $clientid = $logininfo->clientid;
		    $userid = $logininfo->userid;
		
		    $this->_helper->viewRenderer->setNoRender();
		    $this->_helper->layout->setLayout('layout_ajax');
		     
		
		    if(!empty($_GET['file_id']) && strlen($_GET['file_id']) > 0 ){
		        // get file details
		        $db_id = $_GET['file_id'];
		        
		        
		        $ijef = new InvoicejournalExportFiles();
		        $ijef->delete_row( $db_id, $clientid);
 
		    }
		
		    $this->_redirect(APP_BASE . "invoice/invoicejournal");
		    exit;
		}

		public function downloadfileAction ()
		{
		    $logininfo = new Zend_Session_Namespace ( 'Login_Info' );
		    $clientid = $logininfo->clientid;
		    $userid = $logininfo->userid;
		     
		    $this->_helper->viewRenderer->setNoRender();
		    $this->_helper->layout->setLayout('layout_ajax');
		
		    if(!empty($_GET['file_id'])){
		        	
		        // get file
		        // file type
		        $db_id = $_GET['file_id'];
		        $entity  = new InvoicejournalExportFiles();
		        $records = $entity->findOneByIdAndClientid($db_id,$clientid, Doctrine_Core::HYDRATE_RECORD);
		        
		        $file_data = array();
		        $file_data = $records->toArray();
		       
		        if(empty($file_data) || $file_data['clientid'] != $clientid){
		            return;
		        }

		        $file_export_content = "";
		        if(strlen($file_data['export_content']) > 0 ){
		            $file_export_content = unserialize($file_data['export_content']);
		        }
		  
		   		if(empty($file_export_content) || !$file_export_content){
		            $file_export_content = $file_data['export_content'];
		            $file_export_content .= "[...]";
		        }
		        
		        switch($file_data['export_type'])
		        {
		            case 'sap_txt':
		            case 'sap_ii_txt':
		                $filename  = "Rechnungsausgangsjournal.txt"; 
		                header('Content-Encoding: UTF-8');
		                header('Content-type: text/plain; charset=utf-8');
		                header("Content-Disposition: attachment; filename=" . $filename);
		                echo $file_export_content;
		                
		               break;
		               
		            case 'sh_txt':
		                $filename  = "Rechnungsausgangsjournal.txt"; 
                        header('Content-Encoding: Windows-1252');
		                header('Content-type: text/plain; charset=WINDOWS-1252');
		                header("Content-Disposition: attachment; filename=" . $filename);
		                echo $file_export_content;
		                
		               break;
		               
		            case 'sh_external_txt':
		                $filename  = "Rechnungsausgangsjournal_External.er2"; 
		                header('Content-Encoding: Windows-1252');
		                header('Content-type: text/plain; charset=WINDOWS-1252');
		                header("Content-Disposition: attachment; filename=" . $filename);
		                echo $file_export_content;
		                
		               break;
		               
		            default: 
		                break;
		        }
		    }
		
		    exit;
		}
		
		private function array_sort($array, $on = NULL, $order = SORT_ASC)
		{
			$new_array = array();
			$sortable_array = array();

			if(count($array) > 0)
			{
				foreach($array as $k => $v)
				{
					if(is_array($v))
					{
						foreach($v as $k2 => $v2)
						{
							if($k2 == $on)
							{
								if($on == 'date' || $on == 'discharge_date' || $on == 'from_date' || $on == 'from' || $on == 'start_date_filter')
								{
									$sortable_array[$k] = strtotime($v2);
								}
								else
								{
									$sortable_array[$k] = ucfirst($v2);
								}
							}
						}
					}
					else
					{
						if($on == 'date' || $on == 'from_date' || $on == 'from' || $on == 'start_date_filter')
						{
							$sortable_array[$k] = strtotime($v);
						}
						else
						{
							$sortable_array[$k] = ucfirst($v);
						}
					}
				}

				switch($order)
				{
					case 'SORT_ASC':
//						asort($sortable_array);
						$sortable_array = Pms_CommonData::a_sort($sortable_array);
						break;
					case 'SORT_DESC':
//						arsort($sortable_array);
						$sortable_array = Pms_CommonData::ar_sort($sortable_array);
						break;
				}

				foreach($sortable_array as $k => $v)
				{
					$new_array[$k] = $array[$k];
				}
			}

			return $new_array;
		}

		public function bresapvinvoicepatientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$bw_invoices = new BwInvoices();
			$sgbv_invoices = new SgbvInvoices();
			$bre_invoices = new BreInvoices();


			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}


			$this->view->selected_month = $selected_month;
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
			
			$post_month['start'] =  date("d.m.Y",strtotime($months_details[$selected_month]['start'] ));
			$post_month['end'] =  date("d.m.Y",strtotime($months_details[$selected_month]['end'] ));
			//check if a month is selected END

			if($this->getRequest()->isPost())
			{
				$decrypted_ids = array_map('Pms_Uuid::decrypt', $_POST['selected_patient']);

				if(count($decrypted_ids) == '0')
				{
					$decrypted_ids[] = '99999999999';
				}

				$pat_details = Doctrine_Query::create()
					->select('p.ipid, e.epid')
					->from('PatientMaster p')
					->where('p.isdelete=0')
					->andWhereIn('p.id', $decrypted_ids)
					->andWhere('p.isstandbydelete=0')
					->leftJoin("p.EpidIpidMapping e")
					->andWhere("p.ipid = e.ipid")
					->orderBy('p.admission_date DESC');

				$pat_details_res = $pat_details->fetchArray();


				foreach($pat_details_res as $k_pat_res => $v_pat_res)
				{
					$selected_patients[] = $v_pat_res['ipid'];
				}

				if(count($selected_patients) == '0')
				{
					$selected_patients[] = '999999999';
				}

//				$generate_invoices = $this->bre_multiple_invoices($selected_patients, $months_details[$selected_month]);
				$generate_invoices = $this->bre_multiple_invoicesnew($selected_patients, $months_details[$selected_month]);
				$this->_redirect(APP_BASE . 'invoice/breinvoices'); //to avoid resubmission
			}


			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_rehnung_patients';
			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//get active ipids details
			$sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex ";
			}

			$active_ipids_details = Pms_CommonData::patients_active($sql, $clientid, $months_details, false, "p.admission_date", "ASC"); // BRE patient list

			foreach($active_ipids_details as $k_active_patient => $v_active_patient)
			{
				$active_patients[$v_active_patient['ipid']] = $v_active_patient;

				$active_ipids[] = $v_active_patient['ipid'];

				$last_period[$v_active_patient['ipid']] = end($v_active_patient['PatientActive']);

				$active_patients[$v_active_patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['start']));

				if($last_period[$v_active_patient['ipid']]['end'] != "0000-00-00")
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['end']));
				}
				else
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = "-";
				}
				$active_patients[$v_active_patient['ipid']]['id'] = $v_active_patient['PatientMaster']['id'];
				$active_patients[$v_active_patient['ipid']]['period_start'] =$post_month['start'];
				$active_patients[$v_active_patient['ipid']]['period_end'] =$post_month['end'];
			}

			$this->view->active_patients = $active_patients;

			if(empty($active_ipids))
			{
				$active_ipids[] = '99999999999999999';
			}

			$this->view->active_patients = $active_patients;


			$this->view->patients_with_invoices = $this->check_bre_patients_invoice($selected_month, $active_ipids);

			//add invoice number
			$bre_inv_number = $bre_invoices->get_next_invoice_number($clientid, true);
			$this->view->bre_highest_invoice_number = $bre_inv_number['prefix'] . $bre_inv_number['invoicenumber'];
		}

		//ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
		public function breinvoicesAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$bre_invoices = new BreInvoices();
			$bre_invoices_items = new BreInvoiceItems();
			$bre_invoices_form = new Application_Form_BreInvoices();

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}

// 		if ($this->getRequest()->isPost())
// 		{
// 			$new_payment = $bre_invoices_form->submit_payment($_POST);
// 			$this->_redirect(APP_BASE . 'invoice/breinvoices'); //to avoid resubmission
// 			exit;
// 		}

            //ISPC-2609 Ancuta 24.09.2020
            //get printjobs - active or completed - for client, user and invoice type
            $allowed_invoice_name =  "bre_sapv_invoice";
            $userid = $logininfo->userid;
            $this->view->allowed_invoice = $allowed_invoice_name;
            $invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
            
            $print_html = '<div class="print_jobs_div">';
            $print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
            $print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
            $table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
            $print_html .= $table_html;
            $print_html .= '</div>';
            
            
            $this->view->print_html = '';
            if(count($invoice_user_printjobs) > 1 ){
                //echo $print_html;
                $this->view->print_html = $print_html;
            }
            
            $this->view->show_print_jobs = $this->user_print_jobs;
            
            //---
			if($this->getRequest()->isPost())
			{
				if($_POST['activate'] == "1")
				{
					$activate_invoice = $bre_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid); //  set as unpaid
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $bre_invoices_form->ToggleStatusInvoices($_POST['document'], "4");
				}
				elseif($_POST['warningmore'] == "1")
				{
					$invoiceids_to_warn = implode(',', $_POST['document']);
				
					$this->forward('generatereminderinvoice', 'Invoicenew', null, array());
				
					return;
				}//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				elseif($_POST['batch_print_more'])
				{
				    $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
				    $params['batch_print'] = '1'; //enables batch print procedure
				    $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
				    $params['get_pdf'] = '0'; //stops downloading single pdf
				    
				    //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
				    if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
				        
				        
				        
				    } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
				        
				        $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
				        
				        $print_job_data = array();
				        $print_job_data['clientid'] = $clientid;
				        $print_job_data['user'] = $userid;
				        $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
				        $print_job_data['output_type'] = 'pdf';
				        $print_job_data['status'] = 'active';
				        $print_job_data['invoice_type'] = 'bre_sapv_invoice';
				        $print_job_data['print_params'] = serialize($params);
				        $print_job_data['print_function'] = 'bresapvperformanceAction';
				        $print_job_data['print_controller'] = "patientform";
				        
				        foreach($_POST['document'] as $k=>$inv_id){
				            $print_job_data['PrintJobsItems'][] = array(
				                'clientid'=>$print_job_data['clientid'],
				                'user'=>$print_job_data['user'],
				                'invoice_id'=>$inv_id,
				                'invoice_type'=>$print_job_data['invoice_type'],
				                'status'=>"new"
				            );
				        }
				        
				        $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
				        $print_id = $PrintJobsBulk_obj->id;
				        
				        if($print_id){
				            $this->__StartPrintJobs();
				        }
				    }
				    
				}
				else
				{
					$new_payment = $bre_invoices_form->submit_payment($_POST);
				}
				
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				$msg="";
				if($print_id){
				    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				}
				$this->_redirect(APP_BASE . 'invoice/breinvoices'.$msg); //to avoid resubmission
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$clone_record = $bre_invoices->create_storno_invoice($invoiceid);
					//ISPC-2312 Ancuta 07.12.2020
					if($_REQUEST['redirect2new'] == '1'){
					    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bre_sapv_invoice&flg=suc');
					    exit();
					}
					//--
					$this->_redirect(APP_BASE . 'invoice/breinvoices?flg=suc');
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $bre_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/breinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/breinvoices?flg=delerr');
				}
			}



			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
		}

		public function fetchbreinvoicelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$bre_invoices_payments = new BreInvoicePayments();
			$users = new User();
			$warnings = new RemindersInvoice();
			$modules = new Modules();
			
			if($modules->checkModulePrivileges("170", $clientid))
			{
				$this->view->create_bulk_warnings = "1";
			}
			else
			{
				$this->view->create_bulk_warnings = "0";
			}
			
			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('BreInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);


			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{

				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0  AND isdelete = 0 AND id NOT IN (' . $storno_ids_str . ')';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0   AND isdelete=0';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND DATE(NOW()) > DATE(invoice_end)  AND isdelete=0';
					break;

				case 'all':
					$filters['hiinvoice'] = ' ';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';
					break;
			}


			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);

			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BreInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}
				$status_count_invoices["all"][] = '1';
			}

			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BreInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}
			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('BreInvoices')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";

			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
					//BreInvoices
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [OLD] 
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*,  IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort,concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('BreInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $bre_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);
			
			$all_warnings = $warnings->get_reminders($invoice_ids, 'bre_sapv_invoice', $clientid);
				
			foreach ($invoicelimit as &$row) {
				if (isset($all_warnings[$row['id']])) {
					$row['InvoiceWarnings'] = $all_warnings[$row['id']];
				}
			}
			//var_dump($invoicelimit); exit;


			$this->view->storned_invoces = BreInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function brelistpaymentsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$breinvoices = new BreInvoices();
			$brepayments = new BreInvoicePayments();
			$breinvoice_form = new Application_Form_BreInvoices();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $brepayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $brepayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $brepayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $breinvoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
//					print_r($status."\n\n");
						$update_status = $breinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
//					print_r($update_status);
					}

					//reload the payments
					unset($payments);
					$payments = $brepayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoice/brelistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		public function editbresapvinvoiceAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$bre_invoices = new BreInvoices();
			$bre_invoices_items = new BreInvoiceItems();
			$bre_invoices_form = new Application_Form_BreInvoices();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$this->view->hide_patient_tab = '1';

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $bre_invoices->getBreInvoice($invoice_id);
			}


			if(in_array($invoice_data['id'], BreInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_')
				{
					$high_invoice_nr = $bre_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{


					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}
				
				//save here
				if(strlen($_POST['invoice']['address']) > 0 ){
				    if(strpos($_POST['invoice']['address'],"style"))
				    {
				        $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
				    }
				    $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("\r\n"),"<br />", $_POST['invoice']['address']);
				}
				
				$edit_invoice = $bre_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);


				if(empty($_REQUEST['pdf']))
				{
					if($edit_invoice)
					{

					    //ISPC-2312 Ancuta 07.12.2020
					    if($_REQUEST['redirect2new'] == '1'){
					        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bre_sapv_invoice&flg=edtsuc');
					        exit();
					    }
					    //--
						$this->_redirect(APP_BASE . 'invoice/breinvoices?flg=edtsuc');
					}
					else
					{
					    //ISPC-2312 Ancuta 07.12.2020
					    if($_REQUEST['redirect2new'] == '1'){
					        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bre_sapv_invoice&flg=edterr');
					        exit();
					    }
					    //--
						$this->_redirect(APP_BASE . 'invoice/breinvoices?flg=edterr');
					}
				}
				else if(!empty($_REQUEST['pdf']) && $edit_invoice)
				{
					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}
					if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
					}
					else if(empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
					}



					$this->_redirect(APP_BASE . 'patientform/bresapvperformance?iid=' . $_REQUEST['invoiceid'] . '&mode=pdfs&pdfquick=1&completed_date=' . strtotime($pdf_data['completed_date']));
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				if(!$invoice_data || empty($invoice_data))
				{
				    //ISPC-2312 Ancuta 07.12.2020
				    if($_REQUEST['redirect2new'] == '1'){
				        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bre_sapv_invoice');
				        exit();
				    }
				    //--
					$this->_redirect(APP_BASE . 'invoice/breinvoices');
				}

				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);

				//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				$this->view->health_insurance_ver_nr = $healthinsu_array[0]['insurance_no'];

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}

					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}


				if($hi_perms_divisions)
				{

					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
				}

				$pathealthinsurancenr = "";
				if(count($healthinsu_subdiv_arr[3]['name']))
				{
					$phi_details = $healthinsu_subdiv_arr[3]['name'];
				}
				else if(count($healthinsu_array[0]))
				{
					$phi_details = $healthinsu_array[0]['name'];
				}
				else
				{
					$phi_details = "--";
				}

				$phi_details_sub = $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br/> ' . $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$this->view->health_insurance = $phi_details;
				$this->view->hi_subdiv_address = $phi_details_sub;


				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}

				if(strlen($invoice_data['healthinsurance_name']) == 0)
				{
					$invoice_data['healthinsurance_name'] = $phi_details;
				}

				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}

				if(strlen($invoice_data['footer']) == 0)
				{
					$invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				}

				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is preset
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		private function check_bre_patients_invoice($month, $ipids)
		{
			$period['start'] = $month . '-01';
			$period['end'] = $month . '-' . date('t', strtotime($period['start']));

			$bre_invoices = BreInvoices::get_period_patients_bre_invoices($ipids, $period);

			foreach($bre_invoices as $k_invoice => $v_invoice)
			{
				$invoice_ids[] = $v_invoice['ipid'];
			}
			$invoice_ids = array_unique($invoice_ids);

			return $invoice_ids;
		}

		private function check_bw_sapv_patients_invoice($month, $ipids, $clientid)
		{
			$period['start'] = $month . '-01';
			$period['end'] = $month . '-' . date('t', strtotime($period['start']));

			$sapv_invoices = BwInvoices::get_period_patients_sapv_invoices($ipids, $clientid, $period);

			foreach($sapv_invoices as $k_invoice => $v_invoice)
			{
				$invoice_ids[] = $v_invoice['ipid'];
			}
			$invoice_ids = array_unique($invoice_ids);

			return $invoice_ids;
		}

		private function check_bw_sgbv_patients_invoice($month, $ipids, $clientid)
		{
			$period['start'] = $month . '-01';
			$period['end'] = $month . '-' . date('t', strtotime($period['start']));

			$sgbv_invoices = SgbvInvoices::get_period_patients_sgbv_invoices($ipids, $clientid, $period);

			foreach($sgbv_invoices as $k_invoice => $v_invoice)
			{
				$invoice_ids[] = $v_invoice['ipid'];
			}
			$invoice_ids = array_unique($invoice_ids);

			return $invoice_ids;
		}

		private function check_bw_medipumps_patients_invoice($month, $ipids, $clientid)
		{
			$period['start'] = $month . '-01';
			$period['end'] = $month . '-' . date('t', strtotime($period['start']));

			$mp_invoices = MedipumpsInvoices::get_period_patients_medipumps_invoices($ipids, $clientid, $period);

			foreach($mp_invoices as $k_invoice => $v_invoice)
			{
				$invoice_ids[] = $v_invoice['ipid'];
			}
			$invoice_ids = array_unique($invoice_ids);

			return $invoice_ids;
		}

		private function check_bw_sgbxi_patients_invoice($month, $ipids, $clientid)
		{
			$period['start'] = $month . '-01';
			$period['end'] = $month . '-' . date('t', strtotime($period['start']));

			$mp_invoices = SgbxiInvoices::get_period_patients_sgbxi_invoices($ipids, $clientid, $period);

			foreach($mp_invoices as $k_invoice => $v_invoice)
			{
				$invoice_ids[] = $v_invoice['ipid'];
			}
			$invoice_ids = array_unique($invoice_ids);

			return $invoice_ids;
		}

		private function get_sgbxi_patients_invoiced_cf($month, $ipids, $clientid)
		{
			$period['start'] = $month . '-01';
			$period['end'] = $month . '-' . date('t', strtotime($period['start']));

			$sgbxi_invoices = SgbxiInvoices::get_period_patients_sgbxi_invoices($ipids, $clientid, $period);

			foreach($sgbxi_invoices as $k_invoice => $v_invoice)
			{
				$invoiced_contact_forms[$v_invoice['ipid']][] = $v_invoice['contact_form_id'];
				$invoiced_contact_forms[$v_invoice['ipid']] = array_unique($invoiced_contact_forms[$v_invoice['ipid']]);
			}

			return $invoiced_contact_forms;
		}

		private function check_bayern_invoiced_patients($month, $ipids, $clientid)
		{
			$period['start'] = $month . '-01';
			$period['end'] = $month . '-' . date('t', strtotime($period['start']));

			$bayern_invoices = BayernInvoices::get_period_bayern_invoices($ipids, $clientid, $period);
//		print_r($bayern_invoices);
			foreach($bayern_invoices as $k_invoice => $v_invoice)
			{
				$invoice_ids[] = $v_invoice['ipid'];
			}
			$invoice_ids = array_unique($invoice_ids);

			return $invoice_ids;
		}

		private function check_bre_hospiz_patients_invoice($month, $ipids)
		{
			$period['start'] = $month . '-01';
			$period['end'] = $month . '-' . date('t', strtotime($period['start']));

			$bre_hospiz_invoices = BreHospizInvoices::get_period_patients_bre_hospiz_invoices($ipids, $period);

			foreach($bre_hospiz_invoices as $k_invoice => $v_invoice)
			{
				$invoice_ids[] = $v_invoice['ipid'];
			}
			$invoice_ids = array_unique($invoice_ids);

			return $invoice_ids;
		}

		private function bre_multiple_invoices($ipids, $period)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$boxes = new LettersTextBoxes();
			$patientmaster = new PatientMaster();
			//get client letterbox details
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
//		print_r($letter_boxes_details);exit;
			//to be applied in all patient arrays
			$master['sapv_footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
			//$master['reminder_text'] = 'Bitte überweisen Sie den Betrag bis zum (' . date('d.m.Y', strtotime('+21 days')) . ') auf unser Konto.<br /> Bei Rückfragen erreichen Sie uns unter der Rufnummer: 0421-879 15 45';
			//TODO-1233
			$master['reminder_text'] = 'Bitte überweisen Sie den Betrag bis zum ' . date('d.m.Y', strtotime('+21 days')) . ' auf unser Konto.';

			$cycles = $patientmaster->getTreatedDaysRealMultiple($ipids);
			$active_days = array();

			foreach($ipids as $k_ipid => $ipid)
			{
				if(!empty($cycles[$ipid]['admissionDates']))
				{
					if(empty($months[$ipid]))
					{
						$months[$ipid] = array();
					}

					foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
					{
						$admission_dates[$ipid][] = date('Y-m-d', strtotime($v_adm['date']));

						if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
						{
							$start_with_discharge[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
							$end_with_discharge[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));
							$discharge_dates[$ipid] = $end_with_discharge[$ipid];

							if(!$active_days[$ipid])
							{
								$active_days[$ipid] = array();
							}

							$period_months[$ipid] = Pms_CommonData::get_period_months($start_with_discharge[$ipid], $end_with_discharge[$ipid], "Y-m");
							$active_days[$ipid] = array_merge($active_days[$ipid], $patientmaster->getDaysInBetween($start_with_discharge[$ipid], $end_with_discharge[$ipid]));
							$months[$ipid] = array_merge($months[$ipid], $period_months[$ipid]);

							//discharge date is active!
							$active_days[$ipid][] = date('Y-m-d', strtotime($end_with_discharge[$ipid]));
						}
						else
						{
							if(!$active_days[$ipid])
							{
								$active_days[$ipid] = array();
							}

							$start_without_discharge[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
							$end_without_discharge[$ipid] = date('Y-m-d', time());
							$discharge_dates[$ipid] = $end_without_discharge[$ipid];

							$period_months_till_now[$ipid] = Pms_CommonData::get_period_months($start_without_discharge[$ipid], $end_without_discharge[$ipid], "Y-m");
							$active_days[$ipid] = array_merge($active_days[$ipid], $patientmaster->getDaysInBetween($start_without_discharge[$ipid], $end_without_discharge[$ipid]));
							$months[$ipid] = array_merge($months[$ipid], $period_months_till_now[$ipid]);
						}
					}
				}
				else
				{
					$cycle_start_period[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

					if(empty($cycles[$ipid]['discharge_date']))
					{

						$cycle_end_period[$ipid] = date('Y-m-d', time());
					}
					else
					{
						$cycle_end_period[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
					}

					if(!$active_days[$ipid])
					{
						$active_days[$ipid] = array();
					}

					$period_months[$ipid] = Pms_CommonData::get_period_months($cycle_start_period[$ipid], $cycle_end_period[$ipid], "Y-m");
					$active_days[$ipid] = array_merge($active_days[$ipid], $patientmaster->getDaysInBetween($cycle_start_period[$ipid], $cycle_end_period[$ipid]));
					$months[$ipid] = array_merge($months[$ipid], $period_months[$ipid]);

					$active_days[$ipid][] = $cycle_end_period[$ipid];
					$admission_dates[$ipid][] = $cycle_start_period[$ipid];
					$discharge_dates[$ipid][] = $cycle_end_period[$ipid];
				}

				$admission_dates[$ipid] = array_values(array_unique($admission_dates[$ipid]));
				$discharge_dates[$ipid] = array_values(array_unique($discharge_dates[$ipid]));
//			$active_days[$ipid] = array_values(array_unique($active_days[$ipid]));
				$months[$ipid] = array_values(array_unique($months[$ipid]));

				foreach($months[$ipid] as $k_month => $v_month)
				{
					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
					}

					$months_details[$v_month]['start'] = $v_month . "-01";
					$months_details[$v_month]['days_in_month'] = $month_days;
					$months_details[$v_month]['end'] = $v_month . '-' . $month_days;
				}

				asort($months_details);


				//get current period days
				if(empty($current_period) && !empty($_REQUEST['list']))
				{
					$current_period = $months_details[$_REQUEST['list']];
				}
				else if(empty($_REQUEST['list']))
				{
					$current_period = end($months_details);
				}
				$current_period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

				//get active days in period
				foreach($active_days[$ipid] as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $current_period_days))
					{
						$active_days_in_period[$ipid][] = $v_active_day;
					}
				}

				foreach($active_days_in_period as $k_ipid => $v_active_days)
				{
					$first_active_day[$k_ipid] = date('d.m.Y', strtotime($v_active_days[0]));
					$last_day = end($v_active_days);
					$last_active_day[$k_ipid] = date('d.m.Y', strtotime($last_day));
				}
			}


			//find if there is a sapv for current period START!
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipids)
				->andWhere('"' . date('Y-m-d', strtotime($current_period['start'])) . '" <= verordnungbis')
				->andWhere('"' . date('Y-m-d', strtotime($current_period['end'])) . '" >= verordnungam')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();

			foreach($droparray as $k_sapv => $v_sapv)
			{

				$patients_sapv[$v_sapv['ipid']][] = $v_sapv;

				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				if(empty($all_sapv_days[$v_sapv['ipid']]))
				{
					$all_sapv_days[$v_sapv['ipid']] = array();
				}
				if(empty($temp_sapv_days[$v_sapv['ipid']]))
				{
					$temp_sapv_days[$v_sapv['ipid']] = array();
				}

				$temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

				$all_sapv_days[$v_sapv['ipid']] = array_merge($all_sapv_days[$v_sapv['ipid']], $temp_sapv_days[$v_sapv['ipid']]);

				foreach($temp_sapv_days[$v_sapv['ipid']] as $k_tmp_sapv => $v_tmp_sapv)
				{
					if(!$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv])
					{
						$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array();
					}

					$current_verordnet[$v_sapv['ipid']] = explode(',', $v_sapv['verordnet']);
					$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array_merge($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv], $current_verordnet[$v_sapv['ipid']]);

					asort($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv]);
					$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array_values(array_unique($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv]));
				}
			}

			$all_sapv_days = array_unique($all_sapv_days);


			//get patients locations START
			$disallowed_location_types = array('1', '2'); //hospital and hospiz
			//ISPC-2612 Ancuta 27.06.2020 Locx
			/*
			$hospitalids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhereIn('location_type', $disallowed_location_types);
			$hosparray = $hospitalids->fetchArray();
			 */
			
			$loc_obj = new Locations();
			$hosparray = $loc_obj->get_locationByClientAndTypes($clientid,$disallowed_location_types);
			//--
			
			
			$hospital_ids[] = '999999999';
			$hospiz_ids[] = '999999999';
			foreach($hosparray as $hospital)
			{
				$hospital_ids[] = $hospital['id'];

				if($hospital['location_type'] == '2') //hospiz
				{
					$hospiz_ids[] = $hospital['id'];
				}
			}

//	get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('ipid', $ipids)
				->andWhere('isdelete="0"')
				->andWhereIn('location_id', $hospital_ids)
				->orderBy('valid_from,id ASC');
			$pat_loc_arr = $patloc->fetchArray();

			//get patient all locations
			$patloc_all = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('ipid', $ipids)
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$pat_locations_res_all = $patloc_all->fetchArray();

			foreach($pat_loc_arr as $k_loc => $v_loc)
			{
				$pat_locations_grouped[$v_loc['ipid']][$k_loc] = $v_loc;
			}


			foreach($pat_locations_grouped as $k_ipid => $pat_locations)
			{
				foreach($pat_locations as $k_pat_loc => $v_pat_loc)
				{
					if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
					{
						$till = date('Y-m-d', strtotime('+1 day'));
					}
					else
					{
						$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
					}

					$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
					$r1end = strtotime(date('Y-m-d', strtotime($till)));
					$r2start = strtotime($current_period['start']);
					$r2end = strtotime($current_period['end']);


					//hospiz locations
					if(in_array($v_pat_loc['location_id'], $hospiz_ids))
					{
						if(!$hospiz_days[$v_pat_loc['ipid']])
						{
							$hospiz_days[$v_pat_loc['ipid']] = array();
						}
						$h_location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

						$hospiz_heads['start'][] = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
						$hospiz_heads['end'][] = date('Y-m-d', strtotime($v_pat_loc['valid_till']));

						$hospiz_days_arr[$v_pat_loc['ipid']] = $patientmaster->getDaysInBetween($h_location_start, $till);

						//used in view
						if($hospiz_days_arr[$v_pat_loc['ipid']])
						{
							$hospiz_days[$v_pat_loc['ipid']] = array_merge($hospiz_days[$v_pat_loc['ipid']], $hospiz_days_arr[$v_pat_loc['ipid']]);
						}
					}

					if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
					{
						$period_hosp_locations[] = $v_pat_loc;
						$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
						if(empty($hospital_days[$v_pat_loc['ipid']]))
						{
							$hospital_days[$v_pat_loc['ipid']] = array();
						}

						if(!$hospiz_days_array[$v_pat_loc['ipid']])
						{
							$hospiz_days_array[$v_pat_loc['ipid']] = array();
						}

						$hosp[$v_pat_loc['ipid']] = $patientmaster->getDaysInBetween($location_start, $till);
						$hospital_days[$v_pat_loc['ipid']] = array_merge($hospital_days[$v_pat_loc['ipid']], $hosp[$v_pat_loc['ipid']]);

						if(in_array($v_pat_loc['location_id'], $hospiz_ids))
						{
							$hospizdays_arr[$v_pat_loc['ipid']] = $patientmaster->getDaysInBetween($location_start, $till);
							if($hospizdays_arr[$v_pat_loc['ipid']])
							{
								$hospiz_days_array[$v_pat_loc['ipid']] = array_merge($hospiz_days_array[$v_pat_loc['ipid']], $hospizdays_arr[$v_pat_loc['ipid']]);
							}
						}
					}

					//			find hosp heads
					$start_hosp_period = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
					$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
					$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
					$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));

					//remove end head
					if($end_hospital_period != $next_start_hosp && $start_hosp_period != $end_hospital_period)
					{
						$find = array_search($end_hospital_period_formatted, $hospital_days[$v_pat_loc['ipid']]);
						$removed_days['e'][$v_pat_loc['ipid']][] = $hospital_days[$v_pat_loc['ipid']][$find];
						unset($hospital_days[$v_pat_loc['ipid']][$find]);

						//hospiz end head
						if(!in_array($end_hospital_period_formatted, $discharge_dates))
						{
							if(!$hospiz_days_array[$v_pat_loc['ipid']])
							{
								$hospiz_days_array[$v_pat_loc['ipid']] = array();
							}
							$find_hospiz = array_search($end_hospital_period_formatted, $hospiz_days_array[$v_pat_loc['ipid']]);
							$removed_days['e_h'][$v_pat_loc['ipid']][] = $hospiz_days_array[$v_pat_loc['ipid']][$find_hospiz];
							unset($hospiz_days_array[$v_pat_loc['ipid']][$find_hospiz]);
						}
					}

					//remove start head
					if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
					{
						$find_s = '';
						$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
						$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
						$start_hospital_period = $r1start;
						$start_hospital_formatted = date('Y-m-d', $r1start);

						if($start_hosp_period != $previous_till && $start_hosp_period != $end_hospital_period)
						{
							//unset hospital start head
							$find_s = array_search($start_hospital_formatted, $hospital_days[$v_pat_loc['ipid']]);
							$removed_days['s'][$v_pat_loc['ipid']][] = $hospital_days[$v_pat_loc['ipid']][$find_s];
							unset($hospital_days[$v_pat_loc['ipid']][$find_s]);

							if(!in_array($start_hospital_formatted, $admission_dates[$v_pat_loc['ipid']]))
							{
								if(!$hospiz_days_array[$v_pat_loc['ipid']])
								{
									$hospiz_days_array[$v_pat_loc['ipid']] = array();
								}
								//unset hospiz start head
								$find_s_hospiz = array_search($start_hospital_formatted, $hospiz_days_array[$v_pat_loc['ipid']]);
								$removed_days['s_h'][$v_pat_loc['ipid']][] = $hospiz_days_array[$v_pat_loc['ipid']][$find_s_hospiz];
								unset($hospiz_days_array[$v_pat_loc['ipid']][$find_s_hospiz]);
							}
						}
					}
					else
					{
						$find_s = '';
						$start_hospital_formatted = date('Y-m-d', $r1start);
						$find_s = array_search($start_hospital_formatted, $hospital_days[$v_pat_loc['ipid']]);

						$removed_days['s2'][$v_pat_loc['ipid']][] = $hospital_days[$v_pat_loc['ipid']][$find_s];
						unset($hospital_days[$v_pat_loc['ipid']][$find_s]);

						if(!in_array($start_hospital_formatted, $admission_dates[$v_pat_loc['ipid']]))
						{
							if(!$hospiz_days_array[$v_pat_loc['ipid']])
							{
								$hospiz_days_array[$v_pat_loc['ipid']] = array();
							}
							$find_s_h = '';
							$start_hospital_formatted = date('Y-m-d', $r1start);
							$find_s_h = array_search($start_hospital_formatted, $hospiz_days_array[$v_pat_loc['ipid']]);
							$removed_days['s2_h'][$v_pat_loc['ipid']][] = $hospiz_days_array[$v_pat_loc['ipid']][$find_s_h];
							unset($hospiz_days_array[$v_pat_loc['ipid']][$find_s_h]);
						}
					}
				}

				$hospiz_days_arr[$v_pat_loc['ipid']] = array_unique($hospiz_days_array[$v_pat_loc['ipid']]);
				$full_hospital_days[$v_pat_loc['ipid']] = array_unique($hospital_days[$v_pat_loc['ipid']]);
			}


//get health insurance data START
			$hi_perms = new HealthInsurancePermissions();
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			$hi_perms_divisions = $divisions;

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($ipids);


			$company_ids[] = '9999999999999';
			foreach($healthinsu_array as $k_healthinsu => $v_healthinsu)
			{
				$patients_healthinsu[$v_healthinsu['ipid']][] = $v_healthinsu;
				if($v_healthinsu['companyid'] != '0')
				{
					$company_ids[] = $v_healthinsu['companyid'];
				}
			}

			$health_insurance_master = HealthInsurance::get_multiple_healthinsurances($company_ids);
			if($hi_perms_divisions)
			{
				$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($company_ids);
			}


			foreach($patients_healthinsu as $k_ipid_hi => $v_health_insurance)
			{
				$healthinsu[$k_ipid_hi]['health_insurance_name'] = $v_health_insurance['company_name'];
				$healthinsu[$k_ipid_hi]['health_insurance_ik'] = $v_health_insurance['institutskennzeichen'];
				$healthinsu[$k_ipid_hi]['health_insurance_kassenr'] = $v_health_insurance['kvk_no'];

				if(!empty($v_health_insurance['companyid']) && $v_health_insurance['companyid'] != 0)
				{
					$healtharray = $health_insurance_master[$v_health_insurance['companyid']];

					if(empty($v_health_insurance['name']))
					{
						$v_health_insurance['name'] = $healtharray['name'];
					}
					if(empty($v_health_insurance['ins_street']))
					{
						$v_health_insurance['ins_street'] = $healtharray['street1'];
					}
					if(empty($v_health_insurance['ins_city']))
					{
						$v_health_insurance['ins_city'] = $healtharray['city'];
					}
					if(empty($v_health_insurance['ins_zip']))
					{
						$v_health_insurance['ins_zip'] = $healtharray['zip'];
					}

					if(strlen($v_health_insurance['company_name']) == 0)
					{
						$v_health_insurance['health_insurance_name'] = $healtharray['name'];
					}

					if(strlen($v_health_insurance['institutskennzeichen']) == 0)
					{
						$v_health_insurance['health_insurance_ik'] = $healtharray['iknumber'];
					}

					if(strlen($v_health_insurance['kvk_no']) == 0)
					{
						$v_health_insurance['health_insurance_kassenr'] = $healtharray['kvnumber'];
					}
				}

				$pathealthinsurancenr = "";
				if(count($v_health_insurance))
				{
					$phi_details = $v_health_insurance[0]['company_name'];
				}
				else
				{
					$phi_details = "--";
				}

				if(strlen($healthinsu_subdiv_arr[$k_ipid_hi][3]['name']) == '0' && strlen($healthinsu_subdiv_arr[$k_ipid_hi][3]['street1']) == '0')
				{
					$phi_name[$k_ipid_hi] = $v_health_insurance['company_name'];
					$phi_ik[$k_ipid_hi] = $v_health_insurance['institutskennzeichen'];
					$phi_details_sub[$k_ipid_hi] = $v_health_insurance[0]['company_name'] . '<br /> ' . $v_health_insurance[0]['ins_insurance_provider'] . '<br /> ' . $v_health_insurance[0]['ins_street'] . '<br/> ' . $v_health_insurance[0]['ins_zip'] . ' ' . $v_health_insurance[0]['ins_city'];
				}
				else
				{
					$phi_name[$k_ipid_hi] = $healthinsu_subdiv_arr[$k_ipid_hi][3]['name'];
					$phi_ik[$k_ipid_hi] = $healthinsu_subdiv_arr[$k_ipid_hi][3]['iknumber'];
					$phi_details_sub[$k_ipid_hi] = $healthinsu_subdiv_arr[$k_ipid_hi][3]['name'] . '<br/> ' . $healthinsu_subdiv_arr[$k_ipid_hi][3]['insurance_provider'] . '<br/> ' . $healthinsu_subdiv_arr[$k_ipid_hi][3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[$k_ipid_hi][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$k_ipid_hi][3]['city'];
				}
			}

			if($_REQUEST['dbgq'])
			{
				print_r($v_health_insurance);
				print_r($phi_details_sub);
				exit;
			}
			$health_insurance = $phi_details;
			$hi_subdiv_address = $phi_details_sub;
//get health insurance data END
//get pflegestuffe for current period START
			$pflege = new PatientMaintainanceStage();
			$pflege_arr = $pflege->get_multiple_patatients_mt_period($ipids, $current_period['start'], $current_period['end']);

			foreach($pflege_arr as $k_pflege => $v_pflege)
			{
				$grouped_pflege[$v_pflege['ipid']][] = $v_pflege;
			}

			foreach($grouped_pflege as $k_gpflege => $v_gpflege)
			{
				$last_pflege = end($v_gpflege);

				if(strlen(trim($last_pflege['stage'])) != '0')
				{
					$patients_pflegestufe[$k_gpflege] = $last_pflege['stage'];
				}
				else
				{
					$patients_pflegestufe[$k_gpflege] = ' - ';
				}
			}
//get pflegestuffe for current period END
			//get client users
			$user = new User();
			$c_users = $user->getUserByClientid($clientid, 0, true);

			foreach($c_users as $k_c_users => $v_c_users)
			{
				$client_users[$v_c_users['id']] = $v_c_users;
			}

			//get contact forms START
			//get deleted cf from patient course
			$deleted_cf = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhereIn("ipid", $ipids)
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhere('source_ipid = ""');
			$deleted_cf_array = $deleted_cf->fetchArray();

			$excluded_cf_ids[] = '99999999999';
			foreach($deleted_cf_array as $k_dcf => $v_dcf)
			{
				$excluded_cf_ids[] = $v_dcf['recordid'];
			}

			//get cf in period - deleted cf
			$cf = new ContactForms();
			$p_contactforms = $cf->get_multiple_contact_form_period($ipids, $current_period, $excluded_cf_ids);

			$contact_forms_ids[] = '9999999999999';
			foreach($p_contactforms as $kk_cf => $vv_cf)
			{
				foreach($vv_cf as $k_cfs => $v_cfs)
				{
					$contact_forms_ids[] = $v_cfs['id'];
					$contact_forms_ungrouped[] = $v_cfs;
				}
			}

			$block_aditional_users = new FormBlockAdditionalUsers();
//		$block_au_data = $block_aditional_users->getPatientFormBlockAdditionalUsers($ipid, $contact_forms_ids, false, true);
			$block_au_data = $block_aditional_users->getPatientFormBlockAdditionalUsers($ipids, $contact_forms_ids, false, true);

			$cnt = array();
			foreach($contact_forms_ungrouped as $k_cf => $v_cf)
			{
				$visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));

				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['start_date'] = $v_cf['start_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['end_date'] = $v_cf['end_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['del_id'] = 'cf_' . $v_cf['id'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['date'] = $v_cf['billable_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['extra_forms'] = '0';
				$has_creator = false;

				if(count($cnt[$v_cf['ipid']][$visit_date]) >= '3')
				{
					$contact_forms2dates[$v_cf['ipid']][$visit_date]['2']['extra_forms'] += '1'; //show the remaining
				}


				if(count($block_au_data[$v_cf['id']]) != 0)
				{
					foreach($block_au_data[$v_cf['id']] as $k_block_au_data => $v_block_au)
					{
						$visit_user = $client_users[$v_block_au['additional_user']];
						if($v_block_au['creator'] == '1')
						{
							$has_creator = true;
						}

						if(count($client_users[$v_block_au['additional_user']]) != 0)
						{
							if(strlen($visit_user['shortname']) > '0')
							{
								$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = $visit_user['shortname'];
							}
							else
							{
// 							$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(substr($visit_user['first_name'], 0, 1) . substr($visit_user['last_name'], 0, 1));
								$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(mb_substr($visit_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_user['last_name'], 0, 1, "UTF-8"));
							}
						}
					}
				}

				if(count($block_au_data[$v_cf['id']]) == '0' || $has_creator === false)
				{
					$visit_create_user = $client_users[$v_cf['create_user']];
					if(count($client_users[$v_cf['create_user']]) != 0)
					{
						if(strlen($visit_user['shortname']) > '0')
						{
							$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = $visit_create_user['shortname'];
						}
						else
						{
// 						$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(substr($visit_create_user['first_name'], 0, 1) . substr($visit_create_user['last_name'], 0, 1));
							$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(mb_substr($visit_create_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_create_user['last_name'], 0, 1, "UTF-8"));
						}
					}
				}

				foreach($contact_forms2dates[$v_cf['ipid']] as $k_cf_dates => $v_cf_dates)
				{
					$contact_forms2dates[$v_cf['ipid']][$k_cf_dates] = array_values($v_cf_dates);
				}

				$cnt[$v_cf['ipid']][$visit_date][] = $v_cf['id'];
			}
			$visits_array = $contact_forms2dates;
//get contact forms END
//get pricelist	START
			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']); //get bra sapv pricelist and then shortcuts

			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$totals = array();
			foreach($shortcuts['bre_sapv'] as $k_sh => $v_sh)
			{
				$totals[$v_sh] = '0';
				$totals_pdf[$v_sh] = '0';
			}
//get pricelist END
//get bre sapv saved data START
			$bre_sapv = new BreSapvControl();
			$bre_sapv_data = $bre_sapv->get_bre_sapv_controlsheet($ipids, $current_period['start'], $master_price_list, $active_days, $full_hospital_days, $hospiz_days_arr);
//get bre sapv saved data END
//get invoice number type and last incremented value START
//		$client = new Client();
//		$client_data = $client->getClientDataByid($clientid);
//
//		$collective = '0';
//		if($client_data[0]['invoice_number_type'] == '1')
//		{
//			$collective = '1';
//		}
//		$required_shortcuts = array('bre_sapv_invoice');
//		$invoice_settings = new InvoiceSettings();
//		$invoice_settings_arr = $invoice_settings->getClientInvoiceSettings($clientid, $required_shortcuts, $collective);
//
//		$invoices = new BreInvoices();
//		if($client_data[0]['invoice_number_type'] == '0') //individual type
//		{
//			//sgbv invoice
//			$bre_invoice_rnummer = $invoices->get_highest_invoice_number($clientid, $invoice_settings_arr['bre_sapv_invoice']['invoice_prefix']);
//			if($bre_invoice_rnummer)
//			{
//				if($bre_invoice_rnummer['invoice_number'] > $invoice_settings_arr['bre_sapv_invoice']['invoice_start'] && $bre_invoice_rnummer['prefix'] == $invoice_settings_arr['bre_sapv_invoice']['invoice_prefix'])
//				{
//					$prefix = $invoice_settings_arr['bre_sapv_invoice']['invoice_prefix'];
//					$i_number = $bre_invoice_rnummer['invoice_number'];
//					$i_number++;
//				}
//				else
//				{
//					$prefix = $invoice_settings_arr['bre_sapv_invoice']['invoice_prefix'];
//					$i_number = $invoice_settings_arr['bre_sapv_invoice']['invoice_start'];
//					$i_number++;
//				}
//			}
//			else
//			{
//				if(strlen($invoice_settings_arr['bre_sapv_invoice']['invoice_start']) > 0)
//				{
//					$prefix = $invoice_settings_arr['bre_sapv_invoice']['invoice_prefix'];
//					$i_number = $invoice_settings_arr['bre_sapv_invoice']['invoice_start'];
//					$i_number++;
//				}
//				else
//				{
//					$prefix = "";
//					$i_number = '1000';
//				}
//			}
//			$invoicenumber = $i_number;
//		}
//		else
//		{
//			//get all client invoices highest number if collective settings are applied
//			$collective_highest_number = $invoice_settings->get_all_invoices_high_number($clientid);
//
//			foreach($invoice_settings_arr as $k_inv_settigns=> $v_inv_settings)
//			{
//				if(in_array($v_inv_settings['invoice_prefix'], $collective_highest_number['prefix']))
//				{
//					foreach($collective_highest_number['number'] as $k_coll_high=> $v_coll_high)
//					{
//						if($collective_highest_number['prefix'][$k_coll_high] == $v_inv_settings['invoice_prefix'])
//						{
//							$coll_numbers[] = $v_coll_high;
//						}
//					}
//
//					if(count($coll_numbers) > 0)
//					{
//						$max_collection_number = max($coll_numbers);
//
//						if($max_collection_number > $v_inv_settings['invoice_start'])
//						{
//							$i_number[$k_inv_settigns] = $max_collection_number;
//						}
//						else
//						{
//							$i_number[$k_inv_settigns] = $v_inv_settings['invoice_start'];
//						}
//
//						$i_number[$k_inv_settigns] ++;
//					}
//				}
//				else
//				{
//
//					$i_number[$k_inv_settigns] = $v_inv_settings['invoice_start'];
//					$i_number[$k_inv_settigns] ++;
//				}
//			}
//
//			$final_invoice_number = max($i_number);
//
//			$prefix = $client_data[0]['invoice_number_prefix'];
//			$invoicenumber = $final_invoice_number;
//		}

			$breinvoices = new BreInvoices();
			$bre_inv_number = $breinvoices->get_next_invoice_number($clientid, true);
			$prefix = $bre_inv_number['prefix'];
			$invoicenumber = $bre_inv_number['invoicenumber'];



//get invoice number type and last incremented value END

			foreach($ipids as $k_ipid => $v_ipid)
			{
				if($bre_sapv_data[$v_ipid]) //read saved data
				{
					$master_data[$v_ipid] = $bre_sapv_data[$v_ipid];
					$totals[$v_ipid] = $bre_sapv_data[$v_ipid]['totals'];
				}
				else //load system wide date
				{
					foreach($shortcuts['bre_sapv'] as $k_short => $v_short)
					{
						foreach($current_period_days as $k_c_day => $v_c_day)
						{
							//Assessment, Beratung und Koordination
							if($v_short == 'abk' && in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}

							//Beratung und Koordination
							if($v_short == 'bk' && in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}

							$v_vv_values = $days2verordnet[$v_ipid][$v_c_day];
//						print_r($v_ipid." - ".$v_c_day.": \n");
//						print_r($v_vv_values);
//						print_r($current_period_days);
//						print_r($active_days[$v_ipid]);
//						var_dump($v_short == 'vv');
//						var_dump(in_array('4', $v_vv_values));
//						var_dump(in_array($v_c_day, $current_period_days));
//						var_dump(in_array($v_c_day, $active_days[$v_ipid]));
//						var_dump(!in_array($v_c_day, $full_hospital_days[$v_ipid]));
//						var_dump(!in_array($v_c_day, $hospiz_days_arr[$v_ipid]));
//						var_dump(count($visits_array[$v_ipid][$v_c_day]) > '0');
//						print_r("---------\n");
							//Additiv unterstützte Teilversorgung
							if($v_short == 'aut' && in_array('3', $v_vv_values) && !in_array('4', $v_vv_values) && in_array($v_c_day, $current_period_days) && in_array($v_c_day, $active_days[$v_ipid]) && !in_array($v_c_day, $full_hospital_days[$v_ipid]) && !in_array($v_c_day, $hospiz_days_arr[$v_ipid]) && count($visits_array[$v_ipid][$v_c_day]) > '0') //tv reqired
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}

							//Vollständige Versorgung
							if($v_short == 'vv' && in_array('4', $v_vv_values) && in_array($v_c_day, $current_period_days) && in_array($v_c_day, $active_days[$v_ipid]) && !in_array($v_c_day, $full_hospital_days[$v_ipid]) && !in_array($v_c_day, $hospiz_days_arr[$v_ipid]) && count($visits_array[$v_ipid][$v_c_day]) > '0') //vv required
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}
						}
					}
				}
			}


			foreach($master_data as $k_master_data_ipid => $v_m_data)
			{
				foreach($v_m_data as $k_master_data => $v_master_data)
				{
					if($k_master_data != 'totals' && $active_days[$k_master_data_ipid])
					{
						foreach($v_master_data as $k_day => $v_data_values)
						{
							if($v_data_values['qty'] != '0' && in_array($k_day, $active_days[$k_master_data_ipid]) && !in_array($k_day, $full_hospital_days[$k_master_data_ipid]) && !in_array($k_day, $hospiz_days_arr[$k_master_data_ipid]))
							{
								$final_pdf_master_data[$k_master_data_ipid][$k_master_data][date('d', strtotime($k_day))] = $v_data_values['qty'];
								$invoice_items[$k_master_data_ipid][$k_master_data]['qty'] += $v_data_values['qty'];
								$invoice_items[$k_master_data_ipid][$k_master_data]['price'] = $v_data_values['price'];
								$invoice_items[$k_master_data_ipid][$k_master_data]['shortcut_total'] += ($v_data_values['qty'] * $v_data_values['price']);
								$grand_total[$k_master_data_ipid] += ($v_data_values['qty'] * $v_data_values['price']);
							}
						}
					}
				}
			}

			if($_POST['selected_patient'])
			{
				foreach($ipids as $k_ipid => $v_ipid)
				{
					if($master_data[$v_ipid])
					{
						$invoice_ipid_order[] = $v_ipid;
						$invoices_arr[$v_ipid] = array(
							'invoice_start' => $current_period['start'],
							'invoice_end' => $current_period['end'],
							'start_active' => date('Y-m-d H:i:s', strtotime($first_active_day[$v_ipid])),
							'end_active' => date('Y-m-d H:i:s', strtotime($last_active_day[$v_ipid])),
							'sapv_approve_date' => date('Y-m-d H:i:s', strtotime($patients_sapv[$v_ipid][0]['approved_date'])),
							'sapv_approve_nr' => $patients_sapv[$v_ipid][0]['approved_number'],
							'ipid' => $v_ipid,
							'client' => $clientid,
							'prefix' => $prefix,
							'healthinsurance_name' => $phi_name[$v_ipid],
							'healthinsurance_ik' => $phi_ik[$v_ipid],
							'invoice_number' => $invoicenumber,
							'invoice_total' => $grand_total[$v_ipid],
							'address' => $phi_details_sub[$v_ipid],
							'footer' => $master['sapv_footer'],
							'reminder_text' => $master['reminder_text'],
							'status' => '1'
						);
						$invoicenumber++;
					}
				}
//			print_r($invoices_arr);
//			exit;
				$collection = new Doctrine_Collection('BreInvoices');
				$collection->fromArray($invoices_arr);
				$collection->save();

				$inserted_keys = $collection->getPrimaryKeys();

				foreach($invoice_ipid_order as $k_inserted_key => $invoice_ipid)
				{
					foreach($invoice_items[$invoice_ipid] as $k_shortcut_inv => $v_values_inv)
					{
						$invoice_items_arr[] = array(
							'invoice' => $inserted_keys[$k_inserted_key],
							'client' => $clientid,
							'shortcut' => $k_shortcut_inv,
							'qty' => $v_values_inv['qty'],
							'price' => $v_values_inv['price']
						);
					}
				}

				if(count($invoice_items_arr) > 0)
				{
					//insert many records with one query!!
					$collection = new Doctrine_Collection('BreInvoiceItems');
					$collection->fromArray($invoice_items_arr);
					$collection->save();
				}
			}
		}

		private function bre_multiple_invoicesnew($ipids, $period)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$boxes = new LettersTextBoxes();
			$patientmaster = new PatientMaster();
			//get client letterbox details
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
//		print_r($letter_boxes_details);exit;
			//to be applied in all patient arrays
			$master['sapv_footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
 			//$master['reminder_text'] = 'Bitte überweisen Sie den Betrag bis zum (' . date('d.m.Y', strtotime('+21 days')) . ') auf unser Konto.<br /> Bei Rückfragen erreichen Sie uns unter der Rufnummer: 0421-879 15 45';
			//TODO-1233
			$master['reminder_text'] = 'Bitte überweisen Sie den Betrag bis zum ' . date('d.m.Y', strtotime('+21 days')) . ' auf unser Konto.';


			$cycles = $patientmaster->getTreatedDaysRealMultiple($ipids);
			$active_days = array();

			foreach($ipids as $k_ipid => $ipid)
			{
				if(!empty($cycles[$ipid]['admissionDates']))
				{
					if(empty($months[$ipid]))
					{
						$months[$ipid] = array();
					}

					foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
					{
						$admission_dates[$ipid][] = date('Y-m-d', strtotime($v_adm['date']));

						if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
						{
							$start_with_discharge[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
							$end_with_discharge[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));
							$discharge_dates[$ipid] = $end_with_discharge[$ipid];

							if(!$active_days[$ipid])
							{
								$active_days[$ipid] = array();
							}

							$period_months[$ipid] = Pms_CommonData::get_period_months($start_with_discharge[$ipid], $end_with_discharge[$ipid], "Y-m");
							$active_days[$ipid] = array_merge($active_days[$ipid], $patientmaster->getDaysInBetween($start_with_discharge[$ipid], $end_with_discharge[$ipid]));
							$months[$ipid] = array_merge($months[$ipid], $period_months[$ipid]);

							//discharge date is active!
							$active_days[$ipid][] = date('Y-m-d', strtotime($end_with_discharge[$ipid]));
						}
						else
						{
							if(!$active_days[$ipid])
							{
								$active_days[$ipid] = array();
							}

							$start_without_discharge[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
							$end_without_discharge[$ipid] = date('Y-m-d', time());
							$discharge_dates[$ipid] = $end_without_discharge[$ipid];

							$period_months_till_now[$ipid] = Pms_CommonData::get_period_months($start_without_discharge[$ipid], $end_without_discharge[$ipid], "Y-m");
							$active_days[$ipid] = array_merge($active_days[$ipid], $patientmaster->getDaysInBetween($start_without_discharge[$ipid], $end_without_discharge[$ipid]));
							$months[$ipid] = array_merge($months[$ipid], $period_months_till_now[$ipid]);
						}
					}
				}
				else
				{
					$cycle_start_period[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

					if(empty($cycles[$ipid]['discharge_date']))
					{

						$cycle_end_period[$ipid] = date('Y-m-d', time());
					}
					else
					{
						$cycle_end_period[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
					}

					if(!$active_days[$ipid])
					{
						$active_days[$ipid] = array();
					}

					$period_months[$ipid] = Pms_CommonData::get_period_months($cycle_start_period[$ipid], $cycle_end_period[$ipid], "Y-m");
					$active_days[$ipid] = array_merge($active_days[$ipid], $patientmaster->getDaysInBetween($cycle_start_period[$ipid], $cycle_end_period[$ipid]));
					$months[$ipid] = array_merge($months[$ipid], $period_months[$ipid]);

					$active_days[$ipid][] = $cycle_end_period[$ipid];
					$admission_dates[$ipid][] = $cycle_start_period[$ipid];
					$discharge_dates[$ipid][] = $cycle_end_period[$ipid];
				}

				$admission_dates[$ipid] = array_values(array_unique($admission_dates[$ipid]));
				$discharge_dates[$ipid] = array_values(array_unique($discharge_dates[$ipid]));
//			$active_days[$ipid] = array_values(array_unique($active_days[$ipid]));
				$months[$ipid] = array_values(array_unique($months[$ipid]));

				foreach($months[$ipid] as $k_month => $v_month)
				{
					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
					}

					$months_details[$v_month]['start'] = $v_month . "-01";
					$months_details[$v_month]['days_in_month'] = $month_days;
					$months_details[$v_month]['end'] = $v_month . '-' . $month_days;
				}

				asort($months_details);


				//get current period days
				if(empty($current_period) && !empty($_REQUEST['list']))
				{
					$current_period = $months_details[$_REQUEST['list']];
				}
				else if(empty($_REQUEST['list']))
				{
					$current_period = end($months_details);
				}
				$current_period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

				//get active days in period
				foreach($active_days[$ipid] as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $current_period_days))
					{
						$active_days_in_period[$ipid][] = $v_active_day;
					}
				}

				foreach($active_days_in_period as $k_ipid => $v_active_days)
				{
					$first_active_day[$k_ipid] = date('d.m.Y', strtotime($v_active_days[0]));
					$last_day = end($v_active_days);
					$last_active_day[$k_ipid] = date('d.m.Y', strtotime($last_day));
				}
			}


			//find if there is a sapv for current period START!
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipids)
				->andWhere('"' . date('Y-m-d', strtotime($current_period['start'])) . '" <= verordnungbis')
				->andWhere('"' . date('Y-m-d', strtotime($current_period['end'])) . '" >= verordnungam')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();

			foreach($droparray as $k_sapv => $v_sapv)
			{

				$patients_sapv[$v_sapv['ipid']][] = $v_sapv;

				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				if(empty($all_sapv_days[$v_sapv['ipid']]))
				{
					$all_sapv_days[$v_sapv['ipid']] = array();
				}
				if(empty($temp_sapv_days[$v_sapv['ipid']]))
				{
					$temp_sapv_days[$v_sapv['ipid']] = array();
				}

				$temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

				$all_sapv_days[$v_sapv['ipid']] = array_merge($all_sapv_days[$v_sapv['ipid']], $temp_sapv_days[$v_sapv['ipid']]);

				foreach($temp_sapv_days[$v_sapv['ipid']] as $k_tmp_sapv => $v_tmp_sapv)
				{
					if(!$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv])
					{
						$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array();
					}

					$current_verordnet[$v_sapv['ipid']] = explode(',', $v_sapv['verordnet']);
					$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array_merge($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv], $current_verordnet[$v_sapv['ipid']]);

					asort($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv]);
					$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array_values(array_unique($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv]));
				}
			}

			$all_sapv_days = array_unique($all_sapv_days);


//			//get patients locations START
//			$disallowed_location_types = array('1', '2'); //hospital and hospiz
//			$hospitalids = Doctrine_Query::create()
//				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
//				->from('Locations')
//				->where('isdelete = 0')
//				->andWhere('client_id ="' . $clientid . '"')
//				->andWhereIn('location_type', $disallowed_location_types);
//			$hosparray = $hospitalids->fetchArray();
//
//			$hospital_ids[] = '999999999';
//			$hospiz_ids[] = '999999999';
//			foreach($hosparray as $hospital)
//			{
//				$hospital_ids[] = $hospital['id'];
//
//				if($hospital['location_type'] == '2') //hospiz
//				{
//					$hospiz_ids[] = $hospital['id'];
//				}
//			}
//
////	get patient hospital locations if it has
//			$patloc = Doctrine_Query::create()
//				->select('*')
//				->from('PatientLocation')
//				->whereIn('ipid', $ipids)
//				->andWhere('isdelete="0"')
//				->andWhereIn('location_id', $hospital_ids)
//				->orderBy('valid_from,id ASC');
//			$pat_loc_arr = $patloc->fetchArray();
//
//			//get patient all locations
//			$patloc_all = Doctrine_Query::create()
//				->select('*')
//				->from('PatientLocation')
//				->whereIn('ipid', $ipids)
//				->andWhere('isdelete="0"')
//				->orderBy('valid_from,id ASC');
//			$pat_locations_res_all = $patloc_all->fetchArray();
//
//			foreach($pat_loc_arr as $k_loc => $v_loc)
//			{
//				$pat_locations_grouped[$v_loc['ipid']][$k_loc] = $v_loc;
//			}
//
//
//			foreach($pat_locations_grouped as $k_ipid => $pat_locations)
//			{
//				foreach($pat_locations as $k_pat_loc => $v_pat_loc)
//				{
//					if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
//					{
//						$till = date('Y-m-d', strtotime('+1 day'));
//					}
//					else
//					{
//						$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
//					}
//
//					$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
//					$r1end = strtotime(date('Y-m-d', strtotime($till)));
//					$r2start = strtotime($current_period['start']);
//					$r2end = strtotime($current_period['end']);
//
//
//					//hospiz locations
//					if(in_array($v_pat_loc['location_id'], $hospiz_ids))
//					{
//						if(!$hospiz_days[$v_pat_loc['ipid']])
//						{
//							$hospiz_days[$v_pat_loc['ipid']] = array();
//						}
//						$h_location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
//
//						$hospiz_heads['start'][] = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
//						$hospiz_heads['end'][] = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
//
//						$hospiz_days_arr[$v_pat_loc['ipid']] = $patientmaster->getDaysInBetween($h_location_start, $till);
//
//						//used in view
//						if($hospiz_days_arr[$v_pat_loc['ipid']])
//						{
//							$hospiz_days[$v_pat_loc['ipid']] = array_merge($hospiz_days[$v_pat_loc['ipid']], $hospiz_days_arr[$v_pat_loc['ipid']]);
//						}
//					}
//
//					if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
//					{
//						$period_hosp_locations[] = $v_pat_loc;
//						$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
//						if(empty($hospital_days[$v_pat_loc['ipid']]))
//						{
//							$hospital_days[$v_pat_loc['ipid']] = array();
//						}
//
//						if(!$hospiz_days_array[$v_pat_loc['ipid']])
//						{
//							$hospiz_days_array[$v_pat_loc['ipid']] = array();
//						}
//
//						$hosp[$v_pat_loc['ipid']] = $patientmaster->getDaysInBetween($location_start, $till);
//						$hospital_days[$v_pat_loc['ipid']] = array_merge($hospital_days[$v_pat_loc['ipid']], $hosp[$v_pat_loc['ipid']]);
//
//						if(in_array($v_pat_loc['location_id'], $hospiz_ids))
//						{
//							$hospizdays_arr[$v_pat_loc['ipid']] = $patientmaster->getDaysInBetween($location_start, $till);
//							if($hospizdays_arr[$v_pat_loc['ipid']])
//							{
//								$hospiz_days_array[$v_pat_loc['ipid']] = array_merge($hospiz_days_array[$v_pat_loc['ipid']], $hospizdays_arr[$v_pat_loc['ipid']]);
//							}
//						}
//					}
//
//					//			find hosp heads
//					$start_hosp_period = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
//					$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
//					$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
//					$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));
//
//					//remove end head
//					if($end_hospital_period != $next_start_hosp && $start_hosp_period != $end_hospital_period)
//					{
//						$find = array_search($end_hospital_period_formatted, $hospital_days[$v_pat_loc['ipid']]);
//						$removed_days['e'][$v_pat_loc['ipid']][] = $hospital_days[$v_pat_loc['ipid']][$find];
//						unset($hospital_days[$v_pat_loc['ipid']][$find]);
//
//						//hospiz end head
//						if(!in_array($end_hospital_period_formatted, $discharge_dates))
//						{
//							if(!$hospiz_days_array[$v_pat_loc['ipid']])
//							{
//								$hospiz_days_array[$v_pat_loc['ipid']] = array();
//							}
//							$find_hospiz = array_search($end_hospital_period_formatted, $hospiz_days_array[$v_pat_loc['ipid']]);
//							$removed_days['e_h'][$v_pat_loc['ipid']][] = $hospiz_days_array[$v_pat_loc['ipid']][$find_hospiz];
//							unset($hospiz_days_array[$v_pat_loc['ipid']][$find_hospiz]);
//						}
//					}
//
//					//remove start head
//					if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
//					{
//						$find_s = '';
//						$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
//						$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
//						$start_hospital_period = $r1start;
//						$start_hospital_formatted = date('Y-m-d', $r1start);
//
//						if($start_hosp_period != $previous_till && $start_hosp_period != $end_hospital_period)
//						{
//							//unset hospital start head
//							$find_s = array_search($start_hospital_formatted, $hospital_days[$v_pat_loc['ipid']]);
//							$removed_days['s'][$v_pat_loc['ipid']][] = $hospital_days[$v_pat_loc['ipid']][$find_s];
//							unset($hospital_days[$v_pat_loc['ipid']][$find_s]);
//
//							if(!in_array($start_hospital_formatted, $admission_dates[$v_pat_loc['ipid']]))
//							{
//								if(!$hospiz_days_array[$v_pat_loc['ipid']])
//								{
//									$hospiz_days_array[$v_pat_loc['ipid']] = array();
//								}
//								//unset hospiz start head
//								$find_s_hospiz = array_search($start_hospital_formatted, $hospiz_days_array[$v_pat_loc['ipid']]);
//								$removed_days['s_h'][$v_pat_loc['ipid']][] = $hospiz_days_array[$v_pat_loc['ipid']][$find_s_hospiz];
//								unset($hospiz_days_array[$v_pat_loc['ipid']][$find_s_hospiz]);
//							}
//						}
//					}
//					else
//					{
//						$find_s = '';
//						$start_hospital_formatted = date('Y-m-d', $r1start);
//						$find_s = array_search($start_hospital_formatted, $hospital_days[$v_pat_loc['ipid']]);
//
//						$removed_days['s2'][$v_pat_loc['ipid']][] = $hospital_days[$v_pat_loc['ipid']][$find_s];
//						unset($hospital_days[$v_pat_loc['ipid']][$find_s]);
//
//						if(!in_array($start_hospital_formatted, $admission_dates[$v_pat_loc['ipid']]))
//						{
//							if(!$hospiz_days_array[$v_pat_loc['ipid']])
//							{
//								$hospiz_days_array[$v_pat_loc['ipid']] = array();
//							}
//							$find_s_h = '';
//							$start_hospital_formatted = date('Y-m-d', $r1start);
//							$find_s_h = array_search($start_hospital_formatted, $hospiz_days_array[$v_pat_loc['ipid']]);
//							$removed_days['s2_h'][$v_pat_loc['ipid']][] = $hospiz_days_array[$v_pat_loc['ipid']][$find_s_h];
//							unset($hospiz_days_array[$v_pat_loc['ipid']][$find_s_h]);
//						}
//					}
//				}
//
//				$hospiz_days_arr[$v_pat_loc['ipid']] = array_unique($hospiz_days_array[$v_pat_loc['ipid']]);
//				$full_hospital_days[$v_pat_loc['ipid']] = array_unique($hospital_days[$v_pat_loc['ipid']]);
//			}
//Client Hospital Settings START
			//curent period
			$conditions['periods'][0]['start'] = $current_period['start'];
			$conditions['periods'][0]['end'] = $current_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $ipids;
			
			//ISPC - 2365 - for privatepatient add patient address
			$sql = 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			
			$patients_days = Pms_CommonData::patients_days($conditions, $sql);

			if($_REQUEST['csdbg'])
			{
				print_r("Old hospital_days\n");
				print_r($full_hospital_days);

				print_r("CS hospital_days\n");
				print_r($hospital_days_cs);

				print_r("Oldhospiz_days\n");
				print_r($hospiz_days_arr);

				print_r("CS hospiz_days\n");
				print_r($hospiz_days_cs);

				print_r("Old active_days_in_period\n");
				print_r($active_days_in_period);

				print_r("CS active_days_in_period\n");
				print_r($active_days_in_period_cs);

				print_r("Old active_days\n");
				print_r($active_days);

				print_r("CS active_days\n");
				print_r($active_days_cs);

				print_r($patient_days);

				exit;
			}
//Client Hospital Settings END
//get health insurance data START
			$hi_perms = new HealthInsurancePermissions();
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			$hi_perms_divisions = $divisions;

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($ipids);


			$company_ids[] = '9999999999999';
			foreach($healthinsu_array as $k_healthinsu => $v_healthinsu)
			{
				$patients_healthinsu[$v_healthinsu['ipid']][] = $v_healthinsu;
				if($v_healthinsu['companyid'] != '0')
				{
					$company_ids[] = $v_healthinsu['companyid'];
				}
			}

			$health_insurance_master = HealthInsurance::get_multiple_healthinsurances($company_ids);
			if($hi_perms_divisions)
			{
				$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($company_ids);
			}


			foreach($patients_healthinsu as $k_ipid_hi => $v_health_insurance)
			{
				$healthinsu[$k_ipid_hi]['health_insurance_name'] = $v_health_insurance['company_name'];
				$healthinsu[$k_ipid_hi]['health_insurance_ik'] = $v_health_insurance['institutskennzeichen'];
				$healthinsu[$k_ipid_hi]['health_insurance_kassenr'] = $v_health_insurance['kvk_no'];

				if(!empty($v_health_insurance['companyid']) && $v_health_insurance['companyid'] != 0)
				{
					$healtharray = $health_insurance_master[$v_health_insurance['companyid']];

					if(empty($v_health_insurance['name']))
					{
						$v_health_insurance['name'] = $healtharray['name'];
					}
					if(empty($v_health_insurance['ins_street']))
					{
						$v_health_insurance['ins_street'] = $healtharray['street1'];
					}
					if(empty($v_health_insurance['ins_city']))
					{
						$v_health_insurance['ins_city'] = $healtharray['city'];
					}
					if(empty($v_health_insurance['ins_zip']))
					{
						$v_health_insurance['ins_zip'] = $healtharray['zip'];
					}

					if(strlen($v_health_insurance['company_name']) == 0)
					{
						$v_health_insurance['health_insurance_name'] = $healtharray['name'];
					}

					if(strlen($v_health_insurance['institutskennzeichen']) == 0)
					{
						$v_health_insurance['health_insurance_ik'] = $healtharray['iknumber'];
					}

					if(strlen($v_health_insurance['kvk_no']) == 0)
					{
						$v_health_insurance['health_insurance_kassenr'] = $healtharray['kvnumber'];
					}
				}

				$pathealthinsurancenr = "";
				if(count($v_health_insurance))
				{
					$phi_details = $v_health_insurance[0]['company_name'];
				}
				else
				{
					$phi_details = "--";
				}

				if($v_health_insurance[0]['privatepatient'] == "1")
				{
					//get patient name and adress
					$patient_address = '&nbsp;' . htmlspecialchars($patients_days[$k_ipid_hi]['details']['first_name']) . ' ' . htmlspecialchars($patients_days[$k_ipid_hi]['details']['last_name']) . '<br />';
					$patient_address .= '&nbsp;' . htmlspecialchars($patients_days[$k_ipid_hi]['details']['street1']) . '<br />';
					if($patients_days[$k_ipid_hi]['details']['zip'] != "")
					{
						$patient_address .= '&nbsp;' . htmlspecialchars($patients_days[$k_ipid_hi]['details']['zip']) . ' ' . '&nbsp;' . htmlspecialchars($patients_days[$k_ipid_hi]['details']['city']);
					}
					else 
					{
						$patient_address .= '&nbsp;' . htmlspecialchars($patients_days[$k_ipid_hi]['details']['city']);
					}
					$phi_details_sub[$k_ipid_hi] = $patient_address;
				}
				elseif(strlen($healthinsu_subdiv_arr[$k_ipid_hi][3]['name']) == '0' && strlen($healthinsu_subdiv_arr[$k_ipid_hi][3]['street1']) == '0')
				{
					$phi_name[$k_ipid_hi] = $v_health_insurance['company_name'];
					$phi_ik[$k_ipid_hi] = $v_health_insurance['institutskennzeichen'];
					$phi_details_sub[$k_ipid_hi] = $v_health_insurance[0]['company_name'] . '<br /> ' . $v_health_insurance[0]['ins_insurance_provider'] . '<br /> ' . $v_health_insurance[0]['ins_street'] . '<br/> ' . $v_health_insurance[0]['ins_zip'] . ' ' . $v_health_insurance[0]['ins_city'];
				}
				else
				{
					$phi_name[$k_ipid_hi] = $healthinsu_subdiv_arr[$k_ipid_hi][3]['name'];
					$phi_ik[$k_ipid_hi] = $healthinsu_subdiv_arr[$k_ipid_hi][3]['iknumber'];
					$phi_details_sub[$k_ipid_hi] = $healthinsu_subdiv_arr[$k_ipid_hi][3]['name'] . '<br/> ' . $healthinsu_subdiv_arr[$k_ipid_hi][3]['insurance_provider'] . '<br/> ' . $healthinsu_subdiv_arr[$k_ipid_hi][3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[$k_ipid_hi][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$k_ipid_hi][3]['city'];
				}
			}

			if($_REQUEST['dbgq'])
			{
				print_r($v_health_insurance);
				print_r($phi_details_sub);
				exit;
			}
			$health_insurance = $phi_details;
			$hi_subdiv_address = $phi_details_sub;
//get health insurance data END
//get pflegestuffe for current period START
			$pflege = new PatientMaintainanceStage();
			$pflege_arr = $pflege->get_multiple_patatients_mt_period($ipids, $current_period['start'], $current_period['end']);

			foreach($pflege_arr as $k_pflege => $v_pflege)
			{
				$grouped_pflege[$v_pflege['ipid']][] = $v_pflege;
			}

			foreach($grouped_pflege as $k_gpflege => $v_gpflege)
			{
				$last_pflege = end($v_gpflege);

				if(strlen(trim($last_pflege['stage'])) != '0')
				{
					$patients_pflegestufe[$k_gpflege] = $last_pflege['stage'];
				}
				else
				{
					$patients_pflegestufe[$k_gpflege] = ' - ';
				}
			}
//get pflegestuffe for current period END
			//get client users
			$user = new User();
			$c_users = $user->getUserByClientid($clientid, 0, true);

			foreach($c_users as $k_c_users => $v_c_users)
			{
				$client_users[$v_c_users['id']] = $v_c_users;
			}

			//get contact forms START
			//get deleted cf from patient course
			$deleted_cf = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhereIn("ipid", $ipids)
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhere('source_ipid = ""');
			$deleted_cf_array = $deleted_cf->fetchArray();

			$excluded_cf_ids[] = '99999999999';
			foreach($deleted_cf_array as $k_dcf => $v_dcf)
			{
				$excluded_cf_ids[] = $v_dcf['recordid'];
			}

			//get cf in period - deleted cf
			$cf = new ContactForms();
			$p_contactforms = $cf->get_multiple_contact_form_period($ipids, $current_period, $excluded_cf_ids);

			$contact_forms_ids[] = '9999999999999';
			foreach($p_contactforms as $kk_cf => $vv_cf)
			{
				foreach($vv_cf as $k_cfs => $v_cfs)
				{
					$contact_forms_ids[] = $v_cfs['id'];
					$contact_forms_ungrouped[] = $v_cfs;
				}
			}

			$block_aditional_users = new FormBlockAdditionalUsers();
//		$block_au_data = $block_aditional_users->getPatientFormBlockAdditionalUsers($ipid, $contact_forms_ids, false, true);
			$block_au_data = $block_aditional_users->getPatientFormBlockAdditionalUsers($ipids, $contact_forms_ids, false, true);

			$cnt = array();
			foreach($contact_forms_ungrouped as $k_cf => $v_cf)
			{
				$visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));

				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['start_date'] = $v_cf['start_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['end_date'] = $v_cf['end_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['del_id'] = 'cf_' . $v_cf['id'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['date'] = $v_cf['billable_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['extra_forms'] = '0';
				$has_creator = false;

				if(count($cnt[$v_cf['ipid']][$visit_date]) >= '3')
				{
					$contact_forms2dates[$v_cf['ipid']][$visit_date]['2']['extra_forms'] += '1'; //show the remaining
				}


				if(count($block_au_data[$v_cf['id']]) != 0)
				{
					foreach($block_au_data[$v_cf['id']] as $k_block_au_data => $v_block_au)
					{
						$visit_user = $client_users[$v_block_au['additional_user']];
						if($v_block_au['creator'] == '1')
						{
							$has_creator = true;
						}

						if(count($client_users[$v_block_au['additional_user']]) != 0)
						{
							if(strlen($visit_user['shortname']) > '0')
							{
								$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = $visit_user['shortname'];
							}
							else
							{
// 							$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(substr($visit_user['first_name'], 0, 1) . substr($visit_user['last_name'], 0, 1));
								$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(mb_substr($visit_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_user['last_name'], 0, 1, "UTF-8"));
							}
						}
					}
				}

				if(count($block_au_data[$v_cf['id']]) == '0' || $has_creator === false)
				{
					$visit_create_user = $client_users[$v_cf['create_user']];
					if(count($client_users[$v_cf['create_user']]) != 0)
					{
						if(strlen($visit_user['shortname']) > '0')
						{
							$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = $visit_create_user['shortname'];
						}
						else
						{
// 						$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(substr($visit_create_user['first_name'], 0, 1) . substr($visit_create_user['last_name'], 0, 1));
							$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(mb_substr($visit_create_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_create_user['last_name'], 0, 1, "UTF-8"));
						}
					}
				}

				foreach($contact_forms2dates[$v_cf['ipid']] as $k_cf_dates => $v_cf_dates)
				{
					$contact_forms2dates[$v_cf['ipid']][$k_cf_dates] = array_values($v_cf_dates);
				}

				$cnt[$v_cf['ipid']][$visit_date][] = $v_cf['id'];
			}
			$visits_array = $contact_forms2dates;
//get contact forms END
//get pricelist	START
			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']); //get bra sapv pricelist and then shortcuts

			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$totals = array();
			foreach($shortcuts['bre_sapv'] as $k_sh => $v_sh)
			{
				$totals[$v_sh] = '0';
				$totals_pdf[$v_sh] = '0';
			}
//get pricelist END
//get bre sapv saved data START
			$bre_sapv = new BreSapvControl();
//			$bre_sapv_data = $bre_sapv->get_bre_sapv_controlsheet($ipids, $current_period['start'], $master_price_list, $active_days, $full_hospital_days, $hospiz_days_arr);
			$bre_sapv_data = $bre_sapv->get_bre_sapv_controlsheetnew($ipids, $current_period['start'], $master_price_list, false, false, false, $patients_days);

//get bre sapv saved data END
//get invoice number type and last incremented value START
			$breinvoices = new BreInvoices();
			$bre_inv_number = $breinvoices->get_next_invoice_number($clientid, true);
			$prefix = $bre_inv_number['prefix'];
			$invoicenumber = $bre_inv_number['invoicenumber'];
//get invoice number type and last incremented value END

			foreach($ipids as $k_ipid => $v_ipid)
			{
				if($bre_sapv_data[$v_ipid]) //read saved data
				{
					$master_data[$v_ipid] = $bre_sapv_data[$v_ipid];
					$totals[$v_ipid] = $bre_sapv_data[$v_ipid]['totals'];
				}
				else //load system wide date
				{
					foreach($shortcuts['bre_sapv'] as $k_short => $v_short)
					{
						foreach($current_period_days as $k_c_day => $v_c_day)
						{
							$v_c_day_alt = date('d.m.Y', strtotime($v_c_day));

							//Assessment, Beratung und Koordination
							if($v_short == 'abk' && in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}

							//Beratung und Koordination
							if($v_short == 'bk' && in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}

							$v_vv_values = $days2verordnet[$v_ipid][$v_c_day];
//						print_r($v_ipid." - ".$v_c_day.": \n");
//						print_r($v_vv_values);
////						print_r($current_period_days);
////						print_r($active_days[$v_ipid]);
//						var_dump($v_short == 'vv');
//						var_dump(in_array('4', $v_vv_values));
//						var_dump(in_array($v_c_day, $current_period_days));
//						var_dump(in_array($v_c_day, $active_days[$v_ipid]));
//						var_dump(!in_array($v_c_day, $full_hospital_days[$v_ipid]));
//						var_dump(!in_array($v_c_day, $hospiz_days_arr[$v_ipid]));
//						var_dump(count($visits_array[$v_ipid][$v_c_day]) > '0');
//						print_r("---------\n");
							//Additiv unterstützte Teilversorgung
//							if($v_short == 'aut' && in_array('3', $v_vv_values) && !in_array('4', $v_vv_values) && in_array($v_c_day, $current_period_days) && in_array($v_c_day, $active_days[$v_ipid]) && !in_array($v_c_day, $full_hospital_days[$v_ipid]) && !in_array($v_c_day, $hospiz_days_arr[$v_ipid]) && count($visits_array[$v_ipid][$v_c_day]) > '0') //tv reqired
							if($v_short == 'aut' && in_array('3', $v_vv_values) && !in_array('4', $v_vv_values) && in_array($v_c_day, $current_period_days) && in_array($v_c_day_alt, $patients_days[$v_ipid]['active_days']) && !in_array($v_c_day_alt, $patients_days[$v_ipid]['hospital']['real_days_cs']) && !in_array($v_c_day_alt, $patients_days[$v_ipid]['hospiz']['real_days_cs']) && count($visits_array[$v_ipid][$v_c_day]) > '0') //tv reqired
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}

							//Vollständige Versorgung
							if($v_short == 'vv' && in_array('4', $v_vv_values) && in_array($v_c_day, $current_period_days) && in_array($v_c_day_alt, $patients_days[$v_ipid]['active_days']) && !in_array($v_c_day_alt, $patients_days[$v_ipid]['hospital']['real_days_cs']) && !in_array($v_c_day_alt, $patients_days[$v_ipid]['hospiz']['real_days_cs']) && count($visits_array[$v_ipid][$v_c_day]) > '0') //vv required
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}
						}
					}
				}
			}

			foreach($master_data as $k_master_data_ipid => $v_m_data)
			{
				foreach($v_m_data as $k_master_data => $v_master_data)
				{
//					if($k_master_data != 'totals' && $active_days[$k_master_data_ipid])
					if($k_master_data != 'totals' && $patients_days[$k_master_data_ipid]['active_days'])
					{
						foreach($v_master_data as $k_day => $v_data_values)
						{
							$k_day_alt = date('d.m.Y', strtotime($k_day));
							if($v_data_values['qty'] != '0' && in_array($k_day_alt, $patients_days[$k_master_data_ipid]['active_days']) && !in_array($k_day_alt, $patients_days[$k_master_data_ipid]['hospital']['real_days_cs']) && !in_array($k_day_alt, $patients_days[$k_master_data_ipid]['hospiz']['real_days_cs']))
							{
								$final_pdf_master_data[$k_master_data_ipid][$k_master_data][date('d', strtotime($k_day))] = $v_data_values['qty'];
								$invoice_items[$k_master_data_ipid][$k_master_data]['qty'] += $v_data_values['qty'];
								$invoice_items[$k_master_data_ipid][$k_master_data]['price'] = $v_data_values['price'];
								$invoice_items[$k_master_data_ipid][$k_master_data]['shortcut_total'] += ($v_data_values['qty'] * $v_data_values['price']);
								$grand_total[$k_master_data_ipid] += ($v_data_values['qty'] * $v_data_values['price']);
							}
						}
					}
				}
			}

			if($_POST['selected_patient'])
			{
				foreach($ipids as $k_ipid => $v_ipid)
				{
					if($master_data[$v_ipid])
					{
						$invoice_ipid_order[] = $v_ipid;
						$invoices_arr[$v_ipid] = array(
							'invoice_start' => $current_period['start'],
							'invoice_end' => $current_period['end'],
							'start_active' => date('Y-m-d H:i:s', strtotime($first_active_day[$v_ipid])),
							'end_active' => date('Y-m-d H:i:s', strtotime($last_active_day[$v_ipid])),
							'sapv_approve_date' => date('Y-m-d H:i:s', strtotime($patients_sapv[$v_ipid][0]['approved_date'])),
							'sapv_approve_nr' => $patients_sapv[$v_ipid][0]['approved_number'],
							'ipid' => $v_ipid,
							'client' => $clientid,
							'prefix' => $prefix,
							'healthinsurance_name' => $phi_name[$v_ipid],
							'healthinsurance_ik' => $phi_ik[$v_ipid],
							'invoice_number' => $invoicenumber,
							'invoice_total' => $grand_total[$v_ipid],
							'address' => $phi_details_sub[$v_ipid],
							'footer' => $master['sapv_footer'],
							'reminder_text' => $master['reminder_text'],
							'status' => '1'
						);
						$invoicenumber++;
					}
				}
//			print_r($invoices_arr);
//			exit;
				$collection = new Doctrine_Collection('BreInvoices');
				$collection->fromArray($invoices_arr);
				$collection->save();

				$inserted_keys = $collection->getPrimaryKeys();

				foreach($invoice_ipid_order as $k_inserted_key => $invoice_ipid)
				{
					foreach($invoice_items[$invoice_ipid] as $k_shortcut_inv => $v_values_inv)
					{
						$invoice_items_arr[] = array(
							'invoice' => $inserted_keys[$k_inserted_key],
							'client' => $clientid,
							'shortcut' => $k_shortcut_inv,
							'qty' => $v_values_inv['qty'],
							'price' => $v_values_inv['price']
						);
					}
				}

				if(count($invoice_items_arr) > 0)
				{
					//insert many records with one query!!
					$collection = new Doctrine_Collection('BreInvoiceItems');
					$collection->fromArray($invoice_items_arr);
					$collection->save();
				}
			}
		}

		public function heinvoiceAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);

			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			$patientmaster = new PatientMaster();
			$tab_menus = new TabMenus();
			$client_details = new Client();
			$pflege = new PatientMaintainanceStage();
			$locations = new Locations();
			$pat_locations = new PatientLocation();
			$phelathinsurance = new PatientHealthInsurance();
			$modules = new Modules();
			$p_list = new PriceList();
			$p_hessen = new PriceHessen();
			$p_xbdt_goaii = new PriceXbdtActions();
			$hi_perms = new HealthInsurancePermissions();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$he_invoices = new HeInvoices();
			$he_invoices_items_p = new HeInvoiceItemsPeriod();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);


			$isclient = Pms_CommonData::getPatientClient($decid, $clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			//Check patient permissions on controller and action
			$patient_privileges = PatientPermissions::checkPermissionOnRun();
			if(!$patient_privileges)
			{
				$this->_redirect(APP_BASE . 'error/previlege');
			}
			
			/*			 * ******* Patient Information ************ */
			$patient_details = $patientmaster->getMasterData($decid, 0);
			$this->view->patient_details = $patient_details;

			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->tabmenus = $tab_menus->getMenuTabs();
			/*			 * *************************************** */


			$client_detail = $client_details->getClientDataByid($clientid);
			$this->view->client_details = $client_detail[0];

// Get patient admissions and construct cycle days
			$patient_admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
//
//			$patient_cycle_days = array();
//			foreach($patient_admissions[$ipid]['admissionDates'] as $k_admission => $v_admission)
//			{
//				$start_cycle = date('Y-m-d', strtotime($v_admission['date']));
//
//				if(!empty($patient_admissions[$ipid]['dischargeDates'][$k_admission]))
//				{
//					$end_cycle = date('Y-m-d', strtotime($patient_admissions[$ipid]['dischargeDates'][$k_admission]['date']));
//				}
//				else
//				{
//					$end_cycle = date('Y-m-d', strtotime($patient_admissions[$ipid]['discharge_date']));
//				}
//
//				$patient_cycle = $patientmaster->getDaysInBetween($start_cycle, $end_cycle);
//
//				if(!empty($patient_cycle))
//				{
//					$patient_cycle_days = array_merge_recursive($patient_cycle_days, $patient_cycle);
//				}
//			}
//
//			$patient_cycle_days = array_values(array_unique($patient_cycle_days));
//
			//Get client locations
			$locationsarray = $locations->getLocations($clientid, 3); //get location_id => location_type

			foreach($locationsarray as $k_loc_arr => $v_loc_arr)
			{
				if($v_loc_arr == '2')
				{
					$hospiz_location_ids[] = $k_loc_arr;
				}

				if($v_loc_arr == '1')
				{
					$hospital_location_ids[] = $k_loc_arr;
				}
			}


			//Get patient hospital locations
			$pat_locations_array = $pat_locations->get_valid_patient_locations($ipid);

			//end location today if not closed
			foreach($pat_locations_array as $k_p_location => $v_p_location)
			{
				if($v_p_location['valid_till'] == '0000-00-00 00:00:00')
				{
					$pat_locations_array[$k_p_location]['valid_till'] = date('Y-m-d H:i:s', strtotime(date('Y-m-d', time())));
				}
			}

			//get hospiz and hospital locations
			foreach($pat_locations_array as $k_p_location => $v_p_location)
			{
				if(in_array($v_p_location['location_id'], $hospiz_location_ids))
				{
					$hospiz_patient_locations[] = $v_p_location;
				}

				if(in_array($v_p_location['location_id'], $hospital_location_ids))
				{
					$hospital_patient_locations[] = $v_p_location;
				}
			}
//
//
//
//			//hospital days (with both margins)
//			//remove last day if not dead
//			if($patient_details['isdischarged'] == '1')
//			{
//				$distod = Doctrine_Query::create()
//					->select("*")
//					->from('DischargeMethod')
//					->where("isdelete = 0  and clientid=" . $clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
//
//				$todarray = $distod->fetchArray();
//
//				$todIds[] = "9999999999999";
//				foreach($todarray as $todmethod)
//				{
//					$todIds[] = $todmethod['id'];
//				}
//
//				$dispat = Doctrine_Query::create()
//					->select("*")
//					->from("PatientDischarge")
//					->where("ipid LIKE '" . $ipid . "'")
//					->andWhere('isdelete = 0')
//					->andWhereIn("discharge_method", $todIds);
//				$dischargedArr = $dispat->fetchArray();
//
//				if(!empty($dischargedArr) && count($dischargedArr) == 1)
//				{
//					$death_date = date('Y-m-d', strtotime($dischargedArr[0]['discharge_date']));
//				}
//			}
//
//
//			$hospital_days = array();
//			$hosp_days = array();
//			foreach($hospital_patient_locations as $k_pat_loc => $v_pat_loc)
//			{
//				$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
//
//				$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
//				$r1end = strtotime(date('Y-m-d', strtotime($till)));
//				$r2start = strtotime($patient_cycle_days[0]);
//				$r2end = strtotime(end($patient_cycle_days));
//
//				if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
//				{
//					$period_hosp_locations[] = $v_pat_loc;
//					$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
//
//
//					$hosp = $patientmaster->getDaysInBetween($location_start, $till);
//					$hospital_days = array_merge($hospital_days, $hosp);
//				}
//
//				//find hosp heads
//				$start_hosp_period = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
//				$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
//				$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
//				$next_start_hosp = strtotime(date('Y-m-d', strtotime($hospital_patient_locations[($k_pat_loc + 1)]['valid_from'])));
//
//				//remove end head
//				if($end_hospital_period != $next_start_hosp && $start_hosp_period != $end_hospital_period)
//				{
//					$find = array_search($end_hospital_period_formatted, $hospital_days);
//					$removed_days['e'][] = $hospital_days[$find];
//
//					if($death_date != $end_hospital_period_formatted)
//					{
//						unset($hospital_days[$find]);
//					}
//				}
//			}
//			$hospital_days = array_values(array_unique($hospital_days));
//
//			//hospiz day
//			$hospiz_days_arr = array();
			foreach($hospiz_patient_locations as $k_pat_hospiz => $v_pat_hospiz)
			{
				$start_hospiz = date('Y-m-d', strtotime($v_pat_hospiz['valid_from']));
				$end_hospiz = date('Y-m-d', strtotime($v_pat_hospiz['valid_till']));

				$hospiz_days = $patientmaster->getDaysInBetween($start_hospiz, $end_hospiz);
				if(!empty($hospiz_days))
				{
//					$hospiz_days_arr = array_merge($hospiz_days_arr, $hospiz_days);

					if(empty($hospiz_days_arr_type[$v_pat_hospiz['id']]))
					{
						$hospiz_days_arr_type[$v_pat_hospiz['id']] = array();
					}
					$hospiz_days_arr_type[$v_pat_hospiz['id']] = array_merge($hospiz_days_arr_type[$v_pat_hospiz['id']], $hospiz_days);
				}
			}
//			$hospiz_days_arr = array_values(array_unique($hospiz_days_arr));
//
//			//remove hospital days from hospiz days arr
//			$hospiz_days_arr = array_diff($hospiz_days_arr, $hospital_days);
//Client Hospital Settings START
			//curent period
			$conditions['periods'][0]['start'] = '2008-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d', time());
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			
			//ISPC - 2365 - for privatepatient add patient address
			$sql = 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			
			$patient_days = Pms_CommonData::patients_days($conditions, $sql);

			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
			$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];

			$patient_cycle_days_cs = $patient_days[$ipid]['active_days'];

			$fall_key = '0';
			foreach($patient_days[$ipid]['active_periods'] as $k_period => $v_period)
			{
				$admission_date_fl[$fall_key] = $v_period['start'];
				$fall_key++;
			}
//			$admission_date_fl = $patient_days[$ipid]['active_days'][0];

			$admission_date = $patient_days[$ipid]['active_days'][0];
			$dis_date = $patient_days[$ipid]['active_days'][0];

			foreach($hospital_days_cs as $k_hospital_cs => $v_hospital_cs)
			{
				$hospital_days_cs[$k_hospital_cs] = date('Y-m-d', strtotime($v_hospital_cs));
			}

			if(empty($hospital_days_cs))
			{
				$hospital_days_cs = array();
			}

			foreach($hospiz_days_cs as $k_hospiz_cs => $v_hospiz_cs)
			{
				$hospiz_days_cs[$k_hospiz_cs] = date('Y-m-d', strtotime($v_hospiz_cs));
			}

			foreach($patient_cycle_days_cs as $k_pat_cycle_cs => $v_pat_cycle_cs)
			{
				$patient_cycle_days_cs[$k_pat_cycle_cs] = date('Y-m-d', strtotime($v_pat_cycle_cs));
			}

			if(empty($patient_cycle_days_cs))
			{
				$patient_cycle_days_cs = array();
			}

			foreach($hospiz_days_arr_type as $k_h_ty => $v_h_ty)
			{
				foreach($v_h_ty as $k_hospiz_day => $v_hospiz_day)
				{
					if(!in_array($v_hospiz_day, $hospiz_days_cs))
					{
						unset($hospiz_days_arr_type[$k_h_ty][$k_hospiz_day]);
						array_values($hospiz_days_arr_type[$k_h_ty]);
					}
				}
			}

			if($_REQUEST['csdbg'])
			{
				print_r("Old hospital_days\n");
				print_r($hospital_days);

				print_r("CS hospital_days\n");
				print_r($hospital_days_cs);

				print_r("Old hospiz_days\n");
				print_r($hospiz_days_arr);

				print_r("CS hospiz_days\n");
				print_r($hospiz_days_cs);

//				print_r("Old active_days_in_period\n");
//				print_r($active_days_in_period);

				print_r("CS active_days\n");
				print_r($patient_cycle_days_cs);

				print_r($patient_days);
				exit;
			}
//Client Hospital Settings END
			//pflege
			//get pflegestuffe in current invoice period
			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $patient_cycle_days_cs[0], end($patient_cycle_days_cs));

			if($pflege_arr)
			{
				$last_pflege = end($pflege_arr);
				$this->view->patient_pflegestufe = $last_pflege['stage'];
			}
			else
			{
				$this->view->patient_pflegestufe = ' - ';
			}

//get health insurance patient
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			
			if($healthinsu_array[0]['privatepatient'] =="1"){
			    $this->view->privat_patient  = "1";
			} else {
			    $this->view->privat_patient  = "0";
			}
			
			
			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(empty($healthinsu_array[0]['name']))
				{
					$healthinsu_array[0]['name'] = $healtharray['name'];
				}
				if(empty($healthinsu_array[0]['ins_street']))
				{
					$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
				}
				if(empty($healthinsu_array[0]['ins_city']))
				{
					$healthinsu_array[0]['ins_city'] = $healtharray['city'];
				}
				if(empty($healthinsu_array[0]['ins_zip']))
				{
					$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
				}
				$healthinsu_array[0]['he_price_list_type'] = $healtharray['he_price_list_type'];
			}

			if($divisions)
			{
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
			}

			$pathealthinsurancenr = "";
			if(count($healthinsu_array[0]))
			{
				$phi_details = $healthinsu_array[0]['name'];
			}
			else
			{
				$phi_details = "--";
			}

			if($healthinsu_array[0]['privatepatient'] == "1")
			{
				//get patient name and adress
				$patient_address = '&nbsp;' . htmlspecialchars($patient_days[$ipid]['details']['first_name']) . ' ' . htmlspecialchars($patient_days[$ipid]['details']['last_name']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($patient_days[$ipid]['details']['street1']) . '<br />';
				if($patients_days[$ipid]['details']['zip'] != "")
				{
					$patient_address .= '&nbsp;' . htmlspecialchars($patient_days[$ipid]['details']['zip']) . ' ' . '&nbsp;' . htmlspecialchars($patient_days[$ipid]['details']['city']);
				}
				else
				{
					$patient_address .= '&nbsp;' . htmlspecialchars($patient_days[$ipid]['details']['city']);
				}
				$phi_details_sub = $patient_address;
			}
			else
			{
				if(!empty($healthinsu_subdiv_arr['3']['name']))
				{
				//get new SAPV hi address
				$hi_address  = '&nbsp;' . $healthinsu_subdiv_arr[3]['name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br />';
				//$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['contact_person'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['street1'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];
				}
				else
				{
					//get old hi_address
					$hi_address  = '&nbsp;' . $healthinsu_array[0]['name'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_insurance_provider'] . '<br />';
					//$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_contactperson'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_street'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];
				}

				$phi_details_sub = $hi_address;
			}

			//call each calculation function based on healthinsurance price list type
			$admission_date = $patient_admissions[$ipid]['admission_date'];
			$dis_date = $patient_admissions[$ipid]['discharge_date'];
			$price_list = $p_list->get_client_list_period($admission_date, $dis_date);
			
			
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$default_price_list = Pms_CommonData::get_default_price_shortcuts();
			$cl_xa_goa = XbdtActions ::client_xbdt_actions ($clientid);

     		$pricelist_hessen = $p_hessen->get_prices($price_list[0]['id'], $clientid, $shortcuts['hessen'], $default_price_list['hessen']);
			
			    
			foreach( $price_list as $k=>$pl){
		        $pricelist_xbdt_goa[$pl['id']] = $p_xbdt_goaii->get_prices($pl['id'], $clientid);
		        $price_list_days[$pl['id']] = $patientmaster->getDaysInBetween(date('Y-m-d',strtotime($pl['start'])), date('Y-m-d',strtotime($pl['end'])));
			}
			
			
			foreach($price_list_days as $list_id=>$dates){
			    foreach($dates as $k=>$pl_date){
    			    $dates2pl[$pl_date] = $list_id;
			    }
			}
			
			
			foreach($cl_xa_goa as $k=>$goa_act){
			    $xbdt_goa_list[$goa_act['id']] = $goa_act;			    
			    $xbdt_goa_list[$goa_act['id']]['shortcut'] = $goa_act['action_id'];			    
			    if(strlen($pricelist_xbdt_goa[$goa_act['id']]['price'])>0){
    			    $xbdt_goa_list[$goa_act['id']]['price'] = $pricelist_xbdt_goa[$goa_act['id']]['price'];			    
			    } else{
    			    $xbdt_goa_list[$goa_act['id']]['price'] = '0.00';			    
			    }
			}
			
            if($_REQUEST['dbg'] == "xbdt"){
                print_R("\n price list client\n ");
                print_R($price_list[0]['id']);
                print_R("\n price list xbdt\n ");
                print_R($pricelist_xbdt_goa);
                print_R("\n list \n ");
                print_R($xbdt_goa_list);
                exit;                
            }
			// get all patient le actions - PatientXbdtActions
			$saved_xbdt_goa = PatientXbdtActions::get_actions($ipid);
			$cxg_cnt=0;
			foreach($saved_xbdt_goa as $kxg=>$cxg){
				$cxg_cnt++;
			    if($cxg['file_id'] == "0"){
			        $xbdt_goa_actions[$cxg_cnt] = $cxg; 
			        $xbdt_goa_actions[$cxg_cnt]['xbdt_action'] =  $cxg['id']; 
			        
			        //$xbdt_goa_actions[$cxg['id']]['price'] =  $xbdt_goa_list[$cxg['action']]['price']; 
			        // get price list for action date 
			        if($pricelist_xbdt_goa[ $dates2pl[date("Y-m-d", strtotime($cxg['action_date']))]  ][$cxg['action']]['price']){
    			        $xbdt_goa_actions[$cxg_cnt]['price'] =  $pricelist_xbdt_goa[ $dates2pl[date("Y-m-d", strtotime($cxg['action_date']))]  ][$cxg['action']]['price']; 
			        } else{
    			        $xbdt_goa_actions[$cxg_cnt]['price'] =  '0.00'; 
			        }
			        $xbdt_goa_actions[$cxg_cnt]['name'] =  $xbdt_goa_list[$cxg['action']]['name']; 
			        $xbdt_goa_actions[$cxg_cnt]['shortcut'] =  $xbdt_goa_list[$cxg['action']]['action_id']; 
			        $xbdt_goa_actions[$cxg_cnt]['from_date'][] =  date("Y-m-d H:i", strtotime($cxg['action_date'])); 
			        $xbdt_goa_actions[$cxg_cnt]['from_date_view'][] =  date("d.m.Y", strtotime($cxg['action_date'])); 
			        $xbdt_goa_actions[$cxg_cnt]['till_date'][] =  date("Y-m-d H:i", strtotime($cxg['action_date'])); 
			    }
			}
			$this->view->xbdt_goa_actions = $xbdt_goa_actions;
			
			
			foreach($shortcuts['hessen'] as $type => $list_items_array){
			    
				if($type == $healthinsu_array[0]['he_price_list_type']){
					foreach($list_items_array as $k=>$item_sh){
						$hessen_related_dta[$item_sh] = strtoupper ($item_sh) .'  -  '.$this->view->translate('shortcut_description_'.$item_sh);
					}
				}
			}
			$hessen_related_dta["custom_dta"] = $this->view->translate('enter custom DTA ID');
				
			$this->view->hessen_related_dta = $hessen_related_dta;
			if($_REQUEST['dbga'])
			{
				print_r($patient_admissions);

				print_r("period pl\n");
				print_r($price_list);

				print_r("pl hessen\n");
				print_r($pricelist_hessen);
				exit;
			}

			$patient_location_changes = true;
			if(count($pat_locations_array) == '0')//no location so no change
			{
				$patient_location_changes = false;
			}
			else if(count($pat_locations_array) > '0' && count($hospiz_patient_locations) == '0')//no hospiz so no change
			{
				$patient_location_changes = false;
			}
			else if(count($pat_locations_array) > '0' && count($hospiz_patient_locations) > '0')//all locations hospiz
			{
				//double check if all period is hospiz
				foreach($patient_cycle_days_cs as $k_cday_pat => $v_cday_pat)
				{
					if(in_array($v_cday_pat, $hospiz_days_cs))
					{
						$days_in_hospiz[] = $v_cday_pat;
					}
					else
					{
						$days_non_hospiz[] = $v_cday_pat;
					}
				}

				if(count($days_in_hospiz) != count($patient_cycle_days_cs) && count($days_non_hospiz) != count($patient_cycle_days_cs))
				{
					//change
					$patient_location_changes = true;
				}
				else
				{
					$patient_location_changes = false;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_R("Admission Details \n ");
				print_R($admission_details);
				print_R("no_hospital_cycle_days \n ");
				print_R($no_hospital_cycle_days);
				print_R("\n");
				print_R("hospiz_days_arr \n");
				print_R($hospiz_days_arr);
				print_R("\n");
				print_r("HealthInsurance\n");
				print_r($healthinsu_array);
				print_r("Location changes\n");
				var_dump($patient_location_changes);
				print_r("hospiz_days_arr_type\n");
				print_r($hospiz_days_arr_type);
			}

			//exclude sapv fall calculated days from other calculation methods
			
			if(!empty($healthinsu_array[0]['he_price_list_type'])){
			    $h_type = $healthinsu_array[0]['he_price_list_type'];
			}else{
			    $h_type = false;
			}
// 			$sapv_fall_items = $this->calculate_sapv_be_fall($ipid, $patient_admissions[$ipid], $pricelist_hessen['sapvbe']);
			$sapv_fall_items = $this->calculate_sapv_be_fall($ipid, $patient_admissions[$ipid], $pricelist_hessen,$h_type);
			if(empty($excluded_fall_days))
			{
				$excluded_fall_days = array();
			}

			$excluded_be_falls = array();
			foreach($sapv_fall_items as $k_sapv_f => $v_sapv_f)
			{
				foreach($v_sapv_f['from_date'] as $k_sapv_fall => $v_sapv_fall_start)
				{
					$start = $v_sapv_fall_start;
					$end = $v_sapv_f['till_date'][$k_sapv_fall];

					$excluded_fall_days = array_merge($excluded_fall_days, $patientmaster->getDaysInBetween($start, $end));
				}
				$excluded_be_falls[] = $v_sapv_f['fall'];
			}

			//remove hospital from cycle days array
			$no_hospital_cycle_days = array_values(array_diff($patient_cycle_days_cs, $hospital_days_cs));

			//get previous patient invoices
			$previous_invoices = $he_invoices->get_previous_patient_invoices($ipid, $clientid);
			foreach($previous_invoices as $k_prev_inv => $v_prev_inv)
			{
				$previous_inv[] = array(
					'from' => date('d.m.Y', strtotime($v_prev_inv['invoice_start'])),
					'till' => date('d.m.Y', strtotime($v_prev_inv['invoice_end'])),
					'shortcut' => 'INV' . $v_prev_inv['id'],
					'description' => $this->view->translate('invoice') . ' ' . $v_prev_inv['prefix'] . $v_prev_inv['invoice_number'],
					'qty' => '1',
					'price' => $v_prev_inv['invoice_total'],
					'total' => Pms_CommonData::str2num(($v_prev_inv['invoice_total'] * (-1))),
					'custom' => '2',
				);
				$previous_invoices_ids[] = $v_prev_inv['id'];
			}

			$prev_inv_items_periods = $he_invoices_items_p->get_flatrate_items_period($previous_invoices_ids);
//			print_r($prev_inv_items_periods);
//			exit;

			$previous_inv = $this->array_sort($previous_inv, 'from', SORT_ . strtoupper(ASC));
			$this->view->previous_invoices = $previous_inv;

			//LOCAL HEW10768 - hospital fl pause
			//LOCAL HEW10769 - readmission fl pause
			//NEW SYSTEM
			//append hospiz days to a new treatment days array (hospiz does not pause fl)
			if(!empty($patient_days[$ipid]['hospiz']['real_days_cs']))
			{
				$patient_days[$ipid]['treatment_days_with_hospiz'] = array_merge($patient_days[$ipid]['treatment_days'], $patient_days[$ipid]['hospiz']['real_days_cs']);
			}
			else
			{
				$patient_days[$ipid]['treatment_days_with_hospiz'] = $patient_days[$ipid]['treatment_days'];
			}

			array_walk($patient_days[$ipid]['treatment_days_with_hospiz'], function(&$value) {
				$value = strtotime($value);
			});

			asort($patient_days[$ipid]['treatment_days_with_hospiz']);
			$patient_days[$ipid]['treatment_days_with_hospiz'] = array_values($patient_days[$ipid]['treatment_days_with_hospiz']);
			array_walk($patient_days[$ipid]['treatment_days_with_hospiz'], function(&$value) {
				$value = date('Y-m-d', $value);
			});


			$patient_days[$ipid]['treatment_days_with_hospiz'] = array_diff($patient_days[$ipid]['treatment_days_with_hospiz'], $excluded_fall_days);

			$flatrate_days_calculated = false;
			foreach($admission_date_fl as $k_fall => $admission_fall_date)
			{
				if(!in_array($k_fall, $excluded_be_falls) && $flatrate_days_calculated === false)
				{
					$pat_first_location_array = $pat_locations->get_first_location($ipid, $admission_fall_date);

					//determine first admision location normal/hospiz and calculate admission 10days flatrate days
					$admission_details = array();

//					OLD SYSTEM
//					$flatrate_start = date('Y-m-d', strtotime($admission_fall_date));
//					$flatrate_end = date('Y-m-d', strtotime('+9 days', strtotime($admission_fall_date)));
//
//					$admission_details['flatrate_days'] = $patientmaster->getDaysInBetween($flatrate_start, $flatrate_end);
					//NEW SYSTEM
					$i = 1;
					foreach($patient_days[$ipid]['treatment_days_with_hospiz'] as $k_pat_day => $v_pat_day)
					{
						if($i <= '10')
						{
							$admission_details['flatrate_days'][] = strtotime($v_pat_day);
						}
						$i++;
					}

					asort($admission_details['flatrate_days']);
					$admission_details['flatrate_days'] = array_values($admission_details['flatrate_days']);
					array_walk($admission_details['flatrate_days'], function(&$value, $index) {
						$value = date("Y-m-d", $value);
					});

					if(count($pat_first_location_array) > '0')
					{
						//check if is hospiz
						if(in_array($pat_first_location_array[0]['location_id'], $hospiz_location_ids))
						{
							$admission_details['type'] = 'h';
						}
						else //normal if no hospiz
						{
							$admission_details['type'] = 'n';
						}
					}
					else //no first location in that day is considered normal admission
					{
						$admission_details['type'] = 'n';
					}

					$flatrate_days_calculated = true;
				}
			}
			
			foreach($admission_details['flatrate_days'] as $k_date => $v_date)
			{
				if(!in_array($v_date, $no_hospital_cycle_days))
				{
					unset($admission_details['flatrate_days'][$k_date]);
				}
			}
			$admission_details['flatrate_days'] = array_values($admission_details['flatrate_days']);
			foreach($hospiz_days_arr_type as $k_hospiz_type_arr => $v_hospiz_type_arr)
			{
				$hospiz_days_arr_type[$k_hospiz_type_arr] = array_values(array_intersect($hospiz_days_arr_type[$k_hospiz_type_arr], $no_hospital_cycle_days));
			}

			if($_REQUEST['dbg_old'])
			{
				print_r("no_hospital_cycle_days #1\n");
				print_r($no_hospital_cycle_days);
				print_r("excluded_fall_days #1\n");
				print_r($excluded_fall_days);
			}
			$no_hospital_cycle_days = array_diff($no_hospital_cycle_days, $excluded_fall_days);
			$hospiz_days_cs = array_diff($hospiz_days_cs, $excluded_fall_days);

			if($_REQUEST['dbg_old'])
			{
				print_r("no_hospital_cycle_days #2\n");
				print_r($no_hospital_cycle_days);
				print_r("patient_location_changes\n");
				print_r($patient_location_changes);
			}

			switch($healthinsu_array[0]['he_price_list_type'])
			{
				case "vdek":
					if(count($no_hospital_cycle_days) > '0' || count($hospiz_days_cs) > '0')
					{
						$invoice_items = $this->vdek_method($ipid, $admission_details, $no_hospital_cycle_days, $hospiz_days_cs, $pricelist_hessen[$healthinsu_array[0]['he_price_list_type']], $prev_inv_items_periods);
					}

					break;

				case "privat":
					if(count($no_hospital_cycle_days) > '0' || count($hospiz_days_cs) > '0')
					{
						$invoice_items = $this->privat_method($ipid, $admission_details, $no_hospital_cycle_days, $hospiz_days_cs, $pricelist_hessen[$healthinsu_array[0]['he_price_list_type']], $prev_inv_items_periods);
					}
					break;

				case "primar":
					if($patient_location_changes)
					{
						if(count($no_hospital_cycle_days) > '0' || count($hospiz_days_cs) > '0')
						{
//							$invoice_items = $this->primary_method_changes($ipid, $admission_details, $no_hospital_cycle_days, $hospiz_days_cs, $pricelist_hessen[$healthinsu_array[0]['he_price_list_type']], $hospiz_days_arr_type);
							$invoice_items = $this->primary_method_changes_new($ipid, $admission_details, $no_hospital_cycle_days, $hospiz_days_cs, $pricelist_hessen[$healthinsu_array[0]['he_price_list_type']], $hospiz_days_arr_type);
							if($_REQUEST['dqd'])
							{
								print_r("invoice_items\n");
								print_r($invoice_items);
								exit;
							}
						}
					}
					else
					{
						if(count($no_hospital_cycle_days) > '0' || count($hospiz_days_cs) > '0')
						{
							$invoice_items = $this->primary_method($ipid, $admission_details, $no_hospital_cycle_days, $hospiz_days_cs, $pricelist_hessen[$healthinsu_array[0]['he_price_list_type']], $excluded_fall_days);
						}
					}
					ksort($invoice_items, SORT_REGULAR);
					break;

				default:
					break;
			}

			
			
			
			if($_REQUEST['dbg_old'])
			{
				var_dump($patient_location_changes);

				print_r("\nadmission_details\n");
				print_r($admission_details);
				print_r("\ncycle_days\n");
				print_r($patient_cycle_days);
				print_r("\nhosp days\n");
				print_r($hospital_days);
				print_r("\nexcluded_fall_days\n");
				print_r($excluded_fall_days);
				print_r("\nno_hospital_cycle_days\n");
				print_r($no_hospital_cycle_days);
				print_r("\nhospiz_days_arr\n");
				print_r($hospiz_days_arr);

				print_r("invoice_items\n");
				print_r($invoice_items);
				print_r("sapv_fall_items\n");
				print_r($sapv_fall_items);
			}

			if(count($sapv_fall_items) > '0' && count($invoice_items) > '0')
			{
				//merge invoice items with fall items
				$invoice_items = array_merge($invoice_items, $sapv_fall_items);
			}
			else if(count($sapv_fall_items) > '0')
//			if(count($sapv_fall_items) > '0')
			{
				$invoice_items = $sapv_fall_items;
			}
			else if(count($invoice_items) > '0')
			{
				$invoice_items = $invoice_items;
			}

			if($_REQUEST['dbg_old'])
			{
				print_r("invoice_items after merge\n");
				print_r($invoice_items);
				exit;
			}

			foreach($invoice_items as $k_inv_item => $v_inv_item)
			{
				if(!in_array($k_inv_item, $excluded_normal_items))
				{
					$invoice_data['invoice_total'] += $v_inv_item['total'];

					if(strlen($v_inv_item['from_date'][0]) == '10')
					{
						$invoice_items[$k_inv_item]['start_date_filter'] = $v_inv_item['from_date'][0];
					}
					else
					{
						$invoice_items[$k_inv_item]['start_date_filter'] = $v_inv_item['from_date'];
					}
				}
			}

			$invoice_items = $this->array_sort($invoice_items, 'start_date_filter', SORT_ . strtoupper(ASC));

			if($_REQUEST['dbg'] == 'items1')
			{
				print_r($invoice_items);
				exit;
			}

			$invoice_data['items'] = $invoice_items;
			$invoice_data['list_type'] = $healthinsu_array[0]['he_price_list_type'];

			if($_REQUEST['dbg'] == 'items')
			{
				print_r($invoice_data);
				exit;
			}
			if(strlen($invoice_data['footer']) == 0)
			{
				$invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
			}
			$this->view->invoice_data = $invoice_data;

			//second parameter is temp true||false
			$high_invoice_nr = $he_invoices->get_next_invoice_number($clientid, true);
			$this->view->prefix = $high_invoice_nr['prefix'];
			$this->view->invoice_number = $high_invoice_nr['invoicenumber'];
			$this->view->address = $phi_details_sub;

			//post data
			if($this->getRequest()->isPost())
			{
				//normal items to be excluded
				$excluded_normal_items_arr = explode(',', $_POST['excluded_normal_items']);

				$excluded_normal_items[] = '999999999';
				foreach($excluded_normal_items_arr as $k_excl_n_items => $v_excl_n_items)
				{
					if(strlen(trim(rtrim(str_replace('del_', '', $v_excl_n_items)))) > '0')
					{
						$excluded_normal_items[] = trim(rtrim(str_replace('del_', '', $v_excl_n_items)));
					}
				}

				foreach($invoice_items as $k_inv_item => $v_inv_item)
				{
					if(in_array($k_inv_item, $excluded_normal_items))
					{
						unset($invoice_items[$k_inv_item]);
						$unset_normal_vsits[] = $k_inv_item;
					}
				}

				//previous items to be excluded
				$excluded_pv_items_arr = explode(',', $_POST['excluded_pv_items']);

				$excluded_pv_items[] = '999999999';
				foreach($excluded_pv_items_arr as $k_excl_pv_items => $v_excl_pv_item)
				{
					if(strlen(trim(rtrim(str_replace('del_', '', $v_excl_pv_item)))) > '0')
					{
						$excluded_pv_items[] = trim(rtrim(str_replace('del_', '', $v_excl_pv_item)));
					}
				}

				foreach($previous_inv as $k_pv_inv => $v_pv_inv)
				{
					if(in_array($k_pv_inv, $excluded_pv_items))
					{
						unset($previous_inv[$k_pv_inv]);
						$unset_pv_vsits[] = $k_pv_inv;
					}
				}

				
				$post = $_POST;
				$post['ipid'] = $ipid;
				$post['pricelist_type'] = $healthinsu_array[0]['he_price_list_type'];
				$post['list_type'] = $healthinsu_array[0]['he_price_list_type'];
			
				
				$post['items'] = $invoice_items;
				$post['start_invoice'] = date('Y-m-d', strtotime($patient_admissions[$ipid]['admission_date']));
				$post['end_invoice'] = date('Y-m-d', strtotime($patient_admissions[$ipid]['discharge_date']));
				if(empty($_POST['invoice_total']))
				{
					$post['invoice_total'] = $invoice_data['invoice_total'];
				}

				$post['patientdetails'] = $this->view->patient_details;
				$post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
				$post['insurance_no'] = $this->view->insurance_no;
				$post['prefix'] = $this->view->prefix;
				$post['invoice_number'] = $this->view->invoice_number;
				$post['previous_invoices'] = $previous_inv;

				$he_invoice_form = new Application_Form_HeInvoices();
				if($_POST['create_invoice'])
				{
					$insert_invoice = $he_invoice_form->create_invoice($clientid, $post);
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
					exit;
				}
				else if($_POST['create_pdf'])
				{ 
					$item_counter = 0;
					foreach($post['custom']['shortcut'] as $k_cust_item => $v_cust_item)
					{
						$item_counter++;
					    if($post['custom']['xbdt_action'][$k_cust_item]){
					        $postcustom = "3";
					    } else{
					        $postcustom = "1";
					    }
					    
					    //ispc-1871
					    //$post['items'][strtoupper($v_cust_item)] = array(
						$post['items'][$item_counter] = array(
							'shortcut' => htmlspecialchars(strtoupper($v_cust_item)),
							'from_date' => $post['custom']['from_date'][$k_cust_item],
							'description' => $post['custom']['description'][$k_cust_item],
							'qty' => $post['custom']['qty'][$k_cust_item],
							'price' => $post['custom']['price'][$k_cust_item],
							'total' => $post['custom']['total'][$k_cust_item],
							'custom' => $postcustom
						);


						if(empty($_POST['invoice_total']))
						{
							$post['invoice_total'] += $post['custom']['total'][$k_cust_item];
						}
					}
//					print_r($post);
//					exit;

					$template_files = array('invoice_he_pdf.html');
					$orientation = array('P');
					$background_pages = array('0'); //0 is first page;
					$post['clientid'] = $clientid;
					$post['create_date'] = date('Y-m-d', time());

					if($_REQUEST['dbg_pdfz'])
					{
						print_r($post);
						exit;
					}
//					print_r($post);
//					exit;

					$this->generate_pdf($post, "HeInvoice", $template_files, $orientation, $background_pages);
				}
			}
		}

		/**
		 * Function changed to also consider the health insurance type
		 * Changed by Ancuta on 07.03.2019 
		 */
		private function calculate_sapv_be_fall($ipid, $patient_admissions, $pricelist, $health_insurance_type = false)
		{
		    
		   
			//@todo on office for test TP10064
			$pm = new PatientMaster();
			$sapv = new SapvVerordnung();

			$sapv_verordnet_days = $sapv->get_patients_valid_sapv(array($ipid));

			//get patient all sapv
			foreach($patient_admissions['dischargeDates'] as $k_full_fall => $v_full_fall)
			{
				$fall_start = date('Y-m-d', strtotime($patient_admissions['admissionDates'][$k_full_fall]['date']));
				$fall_end = date('Y-m-d', strtotime($v_full_fall['date']));

				$period_days[$k_full_fall] = $pm->getDaysInBetween($fall_start, $fall_end);
			}


			foreach($period_days as $k_fall => $v_days_arr)
			{
				$invoiced_falls[$k_fall] = '0'; //default not invoiced
				$skip_fall = false;
				foreach($v_days_arr as $k_day => $v_day)
				{
					if(in_array($v_day, $sapv_verordnet_days[1]) && $skip_fall === false)
					{
						$invoiced_falls[$k_fall] = '1';
					}

					//reset fall to 0 if day exists in vv(2, 3, 4)
					//added skip fall var
					if(in_array($v_day, $sapv_verordnet_days[2]) || in_array($v_day, $sapv_verordnet_days[3]) || in_array($v_day, $sapv_verordnet_days[4]))
					{
						$skip_fall = true;
						$invoiced_falls[$k_fall] = '0';
					}
				}
			}


			$first_fall = true;
			foreach($invoiced_falls as $k_fall => $v_allow_invoice)
			{
				if($v_allow_invoice == '1' && !empty($health_insurance_type))
				{

					if($first_fall)
					{
						$shortcut = 'pb1';
						$first_fall = false;
					}
					else
					{
						$shortcut = 'pb2';
					}

					$master_data[$shortcut]['from_date'][] = $period_days[$k_fall][0];
					$master_data[$shortcut]['till_date'][] = end($period_days[$k_fall]);
					$master_data[$shortcut]['shortcut'] = $shortcut;
					$master_data[$shortcut]['qty'] += 1;
					$master_data[$shortcut]['price'] = $pricelist[$health_insurance_type][$shortcut]['price'];
					$master_data[$shortcut]['total'] += $pricelist[$health_insurance_type][$shortcut]['price'];
					$master_data[$shortcut]['price_details'] = $pricelist[$health_insurance_type][$shortcut];
					$master_data[$shortcut]['fall'] = $k_fall;
					$master_data[$shortcut]['custom'] = '0';
				}
			}
			return $master_data;
		}

		private function vdek_method($ipid, $admission_details, $no_hospital_cycle_days, $hospiz_days, $pricelist, $prev_inv_items_periods)
		{
			if($_REQUEST['dbgqz'])
			{
				print_r("A\n");
				print_r($admission_details);

				print_r("B\n");
				print_r($no_hospital_cycle_days);

				print_r("C\n");
				print_r($hospiz_days);
				exit;
			}

			//		L.E. changed to calculate by following rule Flatrate + (each day price)
			//determine admission type hospiz/normal
			$shortcut_flatrate = '';
			if($admission_details['type'] == 'h')
			{
				$shortcut_flatrate = 'ph1';
			}
			else if($admission_details['type'] == 'n')
			{
				$shortcut_flatrate = 'pv1';
			}

			//extract flatrate days from total number of days
			$patient_period_days = array_diff($no_hospital_cycle_days, $admission_details['flatrate_days']); //105 - 10 = 95 days
			$patient_period_days = array_values(array_unique($patient_period_days));

			if($_REQUEST['dbgqz'])
			{
				print_r("D\n");
				print_r($patient_period_days);
				exit;
			}
			
			//exclude flatrate_days from total number of days
			$hospiz_days = array_diff($hospiz_days, $admission_details['flatrate_days']);
			$hospiz_days = array_values(array_unique($hospiz_days));

			if(count($patient_period_days) > '0')
			{
				$incr = 0;
				//loop through patient days no flatrate included
				foreach($patient_period_days as $k_period_day => $v_period_day)
				{
					//				determine day number (from 10+)
					$curent_day_no = (11 + $k_period_day);


					//determine curent day condition
					if(in_array($v_period_day, $hospiz_days))
					{
						$curent_day_type = 'h';
					}
					else
					{
						$curent_day_type = 'n';
					}

					//determine curent condition shortcut
					if($curent_day_no >= '11' && $curent_day_no <= '56')
					{
						$condition_shortcut['n'] = 'pv2';
					}
					else if($curent_day_no >= '57')
					{
						$condition_shortcut['n'] = 'pv3';
					}

					//hospiz
					if($curent_day_no >= '11')
					{
						$condition_shortcut['h'] = 'ph2';
					}



					//determine curent day condition
					if(in_array($patient_period_days[$k_period_day + 1], $hospiz_days))
					{
						$next_day_type = 'h';
					}
					else
					{
						$next_day_type = 'n';
					}


					if($condition_shortcut[$curent_day_type])
					{
						//array each day with coresponding price
						$invoice_details[$condition_shortcut[$curent_day_type]][$v_period_day] = $pricelist[$condition_shortcut[$curent_day_type]]['price'];

						// get date range
						$invoice_date_range[$condition_shortcut[$curent_day_type]][$incr][] = $v_period_day;
						if($next_day_type != $curent_day_type)
						{
							$incr++;
						}

						if(strtotime($patient_period_days[$k_period_day + 1]) != strtotime("+1 day", strtotime($v_period_day)))
						{
							$incr++;
						}
					}
				}
			}
			if($_REQUEST['gbs'] == 1)
			{
				print_R($invoice_date_range);
			}

			//construct items array
			if(strlen($shortcut_flatrate) > '0')
			{
//				OLD
//				$invoice_items[$shortcut_flatrate]['from_date'][] = $admission_details['flatrate_days'][0];
//				$invoice_items[$shortcut_flatrate]['till_date'][] = end($admission_details['flatrate_days']);
				//NEW
				$k_period = '0';
				foreach($admission_details['flatrate_days'] as $k_adm_fl_day => $v_adm_fl_day)
				{
					$tmp_period[$k_period][] = $v_adm_fl_day;

					$next_expected_day = date('Y-m-d', strtotime('+1 day', strtotime($v_adm_fl_day)));
					if($admission_details['flatrate_days'][($k_adm_fl_day + 1)] != $next_expected_day)
					{
						$invoice_items[$shortcut_flatrate]['from_date'][$k_period] = $tmp_period[$k_period]['0'];
						$invoice_items[$shortcut_flatrate]['till_date'][$k_period] = end($tmp_period[$k_period]);

						if(!in_array($tmp_period[$k_period]['0'] . ' 00:00:00', $prev_inv_items_periods[$shortcut_flatrate]['from_date']) && !empty($prev_inv_items_periods[$shortcut_flatrate]['from_date']))
						{
							$invoice_items[$shortcut_flatrate]['paid_periods'][$k_period] = '1';
						}
						else
						{
							$invoice_items[$shortcut_flatrate]['paid_periods'][$k_period] = '0';
						}
						$k_period++;
					}
				}


				$invoice_items[$shortcut_flatrate]['qty'] = '1';
				$invoice_items[$shortcut_flatrate]['total'] = $pricelist[$shortcut_flatrate]['price'];
				$invoice_items[$shortcut_flatrate]['shortcut'] = $shortcut_flatrate;
				$invoice_items[$shortcut_flatrate]['price_details'] = $pricelist[$shortcut_flatrate];
				$invoice_items[$shortcut_flatrate]['price'] = $pricelist[$shortcut_flatrate]['price'];
				$invoice_items[$shortcut_flatrate]['custom'] = '0';
			}


			foreach($invoice_details as $k_inv_det => $v_inv_det)
			{
				$invoice_items[$k_inv_det]['qty'] = count($v_inv_det);
				$invoice_items[$k_inv_det]['shortcut'] = $k_inv_det;
				$invoice_items[$k_inv_det]['price_details'] = $pricelist[$k_inv_det];
				$invoice_items[$k_inv_det]['price'] = $pricelist[$k_inv_det]['price'];
				$invoice_items[$k_inv_det]['total'] = array_sum($v_inv_det);
				$invoice_items[$k_inv_det]['custom'] = '0';
			}


			foreach($invoice_date_range as $k_shortcut => $sh_interval_details)
			{
				foreach($sh_interval_details as $knr => $sh_interval_values)
				{
					$invoice_items[$k_shortcut]['from_date'][] = $sh_interval_values[0];
					$invoice_items[$k_shortcut]['till_date'][] = end($sh_interval_values);
				}
			}
			if($_REQUEST['gbs'] == 1)
			{
				print_R($invoice_items);
				exit;
				// 			print_R($invoice_details); exit;
			}
			return $invoice_items;
		}

		private function privat_method($ipid, $admission_details, $no_hospital_cycle_days, $hospiz_days, $pricelist, $prev_inv_items_periods)
		{

//		L.E. changed to calculate by following rule Flatrate + (each day price)
			//determine admission type hospiz/normal
			$shortcut_flatrate = '';
			if($admission_details['type'] == 'h')
			{
				$shortcut_flatrate = 'ph1pp';
			}
			else if($admission_details['type'] == 'n')
			{
				$shortcut_flatrate = 'pv1pp';
			}

			//extract flatrate days from total number of days
			$patient_period_days = array_diff($no_hospital_cycle_days, $admission_details['flatrate_days']); //105 - 10 = 95 days
			$patient_period_days = array_values(array_unique($patient_period_days));

			//exclude flatrate_days from total number of days
			$hospiz_days = array_diff($hospiz_days, $admission_details['flatrate_days']);
			$hospiz_days = array_values(array_unique($hospiz_days));

			if(count($patient_period_days) > '0')
			{

				$incr = 0;
				//loop through patient days no flatrate included
				foreach($patient_period_days as $k_period_day => $v_period_day)
				{
//				determine day number (from 10+)
					$curent_day_no = (11 + $k_period_day);


					//determine curent day condition
					if(in_array($v_period_day, $hospiz_days))
					{
						$curent_day_type = 'h';
					}
					else
					{
						$curent_day_type = 'n';
					}

					//determine curent condition shortcut
					if($curent_day_no >= '11' && $curent_day_no <= '56')
					{
						$condition_shortcut['n'] = 'pv2pp';
					}
					else if($curent_day_no >= '57')
					{
						$condition_shortcut['n'] = 'pv3pp';
					}

					//hospiz
					if($curent_day_no >= '11')
					{
						$condition_shortcut['h'] = 'ph2pp';
					}

					//determine next day condition
					if(in_array($patient_period_days[$k_period_day + 1], $hospiz_days))
					{
						$next_day_type = 'h';
					}
					else
					{
						$next_day_type = 'n';
					}


					if($condition_shortcut[$curent_day_type])
					{
						//array each day with coresponding price
						$invoice_details[$condition_shortcut[$curent_day_type]][$v_period_day] = $pricelist[$condition_shortcut[$curent_day_type]]['price'];

						// get date range
						$invoice_date_range[$condition_shortcut[$curent_day_type]][$incr][] = $v_period_day;
						if($next_day_type != $curent_day_type)
						{
							$incr++;
						}
						if(strtotime($patient_period_days[$k_period_day + 1]) != strtotime("+1 day", strtotime($v_period_day)))
						{
							$incr++;
						}
					}
				}
			}


			$heinvoice_items = new HeInvoiceItems();
			//construct items array
			if(strlen($shortcut_flatrate) > '0')
			{
//				OLD
//				$invoice_items[$shortcut_flatrate]['from_date'][] = $admission_details['flatrate_days'][0];
//				$invoice_items[$shortcut_flatrate]['till_date'][] = end($admission_details['flatrate_days']);
//				NEW
				$k_period = '0';
				foreach($admission_details['flatrate_days'] as $k_adm_fl_day => $v_adm_fl_day)
				{
					$tmp_period[$k_period][] = $v_adm_fl_day;

					$next_expected_day = date('Y-m-d', strtotime('+1 day', strtotime($v_adm_fl_day)));
					if($admission_details['flatrate_days'][($k_adm_fl_day + 1)] != $next_expected_day)
					{
						$invoice_items[$shortcut_flatrate]['from_date'][$k_period] = $tmp_period[$k_period]['0'];
						$invoice_items[$shortcut_flatrate]['till_date'][$k_period] = end($tmp_period[$k_period]);

						if(!in_array($tmp_period[$k_period]['0'] . ' 00:00:00', $prev_inv_items_periods[$shortcut_flatrate]['from_date']) && !empty($prev_inv_items_periods[$shortcut_flatrate]['from_date']))
						{
							$invoice_items[$shortcut_flatrate]['paid_periods'][$k_period] = '1';
						}
						else
						{
							$invoice_items[$shortcut_flatrate]['paid_periods'][$k_period] = '0';
						}
						$k_period++;
					}
				}


				$invoice_items[$shortcut_flatrate]['qty'] = '1';
				$invoice_items[$shortcut_flatrate]['total'] = $pricelist[$shortcut_flatrate]['price'];
				$invoice_items[$shortcut_flatrate]['shortcut'] = $shortcut_flatrate;
				$invoice_items[$shortcut_flatrate]['price_details'] = $pricelist[$shortcut_flatrate];
				$invoice_items[$shortcut_flatrate]['price'] = $pricelist[$shortcut_flatrate]['price'];
				$invoice_items[$shortcut_flatrate]['custom'] = '0';
			}

			foreach($invoice_details as $k_inv_det => $v_inv_det)
			{
				$invoice_items[$k_inv_det]['qty'] = count($v_inv_det);
				$invoice_items[$k_inv_det]['shortcut'] = $k_inv_det;
				$invoice_items[$k_inv_det]['price_details'] = $pricelist[$k_inv_det];
				$invoice_items[$k_inv_det]['price'] = $pricelist[$k_inv_det]['price'];
				$invoice_items[$k_inv_det]['total'] = array_sum($v_inv_det);
				$invoice_items[$k_inv_det]['custom'] = '0';
			}


			foreach($invoice_date_range as $k_shortcut => $sh_interval_details)
			{
				foreach($sh_interval_details as $knr => $sh_interval_values)
				{
					$invoice_items[$k_shortcut]['from_date'][] = $sh_interval_values[0];
					$invoice_items[$k_shortcut]['till_date'][] = end($sh_interval_values);
				}
			}

//			print_r($prev_inv_items_periods);
//			print_r($invoice_items);
//			exit;
			return $invoice_items;
		}

		private function primary_method($ipid, $admission_details, $no_hospital_cycle_days, $hospiz_days, $pricelist)
		{

			//count patient days and determine the shortcut to be used
			$total_patient_days = count($no_hospital_cycle_days); //111 => PA10 || PC10
//		print_r($total_patient_days);
			//assing shortcut based on total patients
			//non hospiz
			if($total_patient_days <= '10')
			{
				$condition_shortcut['n'] = 'pa1';
			}
			else if($total_patient_days <= '20')
			{
				$condition_shortcut['n'] = 'pa2';
			}
			else if($total_patient_days <= '30')
			{
				$condition_shortcut['n'] = 'pa3';
			}
			else if($total_patient_days <= '40')
			{
				$condition_shortcut['n'] = 'pa4';
			}
			else if($total_patient_days <= '50')
			{
				$condition_shortcut['n'] = 'pa5';
			}
			else if($total_patient_days <= '60')
			{
				$condition_shortcut['n'] = 'pa6';
			}
			else if($total_patient_days <= '75')
			{
				$condition_shortcut['n'] = 'pa7';
			}
			else if($total_patient_days <= '90')
			{
				$condition_shortcut['n'] = 'pa8';
			}
			else if($total_patient_days <= '105')
			{
				$condition_shortcut['n'] = 'pa9';
			}
			else if($total_patient_days <= '120')
			{
				$condition_shortcut['n'] = 'pa10';
			}
			else if($total_patient_days <= '150')
			{
				$condition_shortcut['n'] = 'pa11';
			}
			else if($total_patient_days <= '180')
			{
				$condition_shortcut['n'] = 'pa12';
			}
			else if($total_patient_days > '180')
			{
				$condition_shortcut['n'] = 'pa13';
				$previous_short['n'] = 'pa12';
			}

			//hospiz conditions
			if($total_patient_days <= '10')
			{
				$condition_shortcut['h'] = 'pc1';
			}
			else if($total_patient_days <= '20')
			{
				$condition_shortcut['h'] = 'pc2';
			}
			else if($total_patient_days <= '30')
			{
				$condition_shortcut['h'] = 'pc3';
			}
			else if($total_patient_days <= '40')
			{
				$condition_shortcut['h'] = 'pc4';
			}
			else if($total_patient_days <= '50')
			{
				$condition_shortcut['h'] = 'pc5';
			}
			else if($total_patient_days <= '60')
			{
				$condition_shortcut['h'] = 'pc6';
			}
			else if($total_patient_days <= '75')
			{
				$condition_shortcut['h'] = 'pc7';
			}
			else if($total_patient_days <= '90')
			{
				$condition_shortcut['h'] = 'pc8';
			}
			else if($total_patient_days <= '105')
			{
				$condition_shortcut['h'] = 'pc9';
			}
			else if($total_patient_days <= '120')
			{
				$condition_shortcut['h'] = 'pc10';
			}
			else if($total_patient_days <= '150')
			{
				$condition_shortcut['h'] = 'pc11';
			}
			else if($total_patient_days <= '180')
			{
				$condition_shortcut['h'] = 'pc12';
			}
			else if($total_patient_days > '180')
			{
				$condition_shortcut['h'] = 'pc13';
				$previous_short['h'] = 'pc12';
			}


			$shortcut = $condition_shortcut[$admission_details['type']];

			if(!empty($hospiz_days))
			{
				$nonhospiz_days_arr = array_diff($no_hospital_cycle_days, $hospiz_days);
			}
			else
			{
				$nonhospiz_days_arr = $no_hospital_cycle_days;
			}

			asort($nonhospiz_days_arr);
			asort($hospiz_days);

			$hospiz_days = array_values($hospiz_days);

			$incr = '0';

			$calculated_period_days = array();
			if($admission_details['type'] == 'h')
			{
				$calculated_period_days = $hospiz_days;
			}
			else
			{
				$calculated_period_days = $nonhospiz_days_arr;
			}

			$calculated_period_days_arr = array();
			$days_counter = '1';
			foreach($calculated_period_days as $k_day => $v_day)
			{
				//PA12 || PC12 period
				if($days_counter <= '180' && $previous_short[$admission_details['type']])
				{
					$max_days_periods[$incr][] = $v_day;
				}

				//PA13 || PC13
				if($days_counter > '180' && $previous_short[$admission_details['type']])
				{
					$calculated_period_days_arr[$incr][] = $v_day;
				}
				else if($days_counter < '180' && empty($previous_short[$admission_details['type']]))
				{
					$calculated_period_days_arr[$incr][] = $v_day;
				}

				if(strtotime('+1 day', strtotime($v_day)) != strtotime($calculated_period_days[$k_day + 1]))
				{
					$incr++;
				}

				$days_counter++;
			}

			if($total_patient_days > '180')
			{
				$patient_days_overdue = ($total_patient_days - 180);
				$multiplier = ceil($patient_days_overdue / 30);

				//PA12 || PC12
				$invoice_items[$previous_short[$admission_details['type']]]['shortcut'] = $previous_short[$admission_details['type']];
				$invoice_items[$previous_short[$admission_details['type']]]['qty'] = '1';
				$invoice_items[$previous_short[$admission_details['type']]]['price_details'] = $pricelist[$previous_short[$admission_details['type']]];
				$invoice_items[$previous_short[$admission_details['type']]]['price'] = $pricelist[$previous_short[$admission_details['type']]]['price'];
				$invoice_items[$previous_short[$admission_details['type']]]['total'] = $pricelist[$previous_short[$admission_details['type']]]['price'];
				$invoice_items[$previous_short[$admission_details['type']]]['custom'] = '0';


				foreach($max_days_periods as $k_max_period => $v_max_period)
				{
					$invoice_items[$previous_short[$admission_details['type']]]['from_date'][] = $v_max_period[0];
					$invoice_items[$previous_short[$admission_details['type']]]['till_date'][] = end($v_max_period);
				}


				//PA13 || PC13
				if($multiplier > '0')
				{
					$invoice_items[$shortcut]['shortcut'] = $shortcut;
					$invoice_items[$shortcut]['price_details'] = $pricelist[$shortcut];
					$invoice_items[$shortcut]['price'] = $pricelist[$shortcut]['price'];
					$invoice_items[$shortcut]['qty'] = $multiplier;
					$invoice_items[$shortcut]['total'] = ($multiplier * $pricelist[$shortcut]['price']);
					$invoice_items[$shortcut]['custom'] = '0';
				}
			}
			else
			{
				$invoice_items[$shortcut]['shortcut'] = $shortcut;
				$invoice_items[$shortcut]['price_details'] = $pricelist[$shortcut];
				$invoice_items[$shortcut]['price'] = $pricelist[$shortcut]['price'];
				$invoice_items[$shortcut]['qty'] = '1';
				$invoice_items[$shortcut]['total'] = $pricelist[$shortcut]['price'];
				$invoice_items[$shortcut]['custom'] = '0';
			}

			foreach($calculated_period_days_arr as $k_period => $v_period)
			{
				$invoice_items[$shortcut]['from_date'][] = $v_period[0];
				$invoice_items[$shortcut]['till_date'][] = end($v_period);
			}
			if($_REQUEST['dbg_nc'] == '1')
			{
				print_r("Shortcut: " . $shortcut . " -- TOTal patient days: " . $total_patient_days . ", Multiplier = " . $multiplier . "\n");
				print_r("Condition shortcut :\n");
				print_r($condition_shortcut);
				print_r("Total patient days :\n");
				print_r($total_patient_days);
				print_r("Invoice Items :\n");
				print_r($invoice_items);
				exit;
			}

			return $invoice_items;
		}

		private function primary_method_changes($ipid, $admission_details, $no_hospital_cycle_days, $hospiz_days, $pricelist, $hospiz_days_arr_type)
		{

			if($_REQUEST['dbgq'])
			{
				print_r("hospiz_days_cs\n");
				print_r($hospiz_days);
				print_r("hospiz_days_arr_type\n");
				print_r($hospiz_days_arr_type);
				exit;
			}
			asort($hospiz_days);
			$hospiz_days = array_values($hospiz_days);
			//count patient days and determine the shortcut to be used
			$total_patient_days = count($no_hospital_cycle_days); //111 => PA10 || PC10
			//assing shortcut based on total patients
			//non hospiz
			if($total_patient_days <= '10')
			{
				$condition_shortcut['n'] = 'pa1';
			}
			else if($total_patient_days <= '20')
			{
				$condition_shortcut['n'] = 'pa2';
			}
			else if($total_patient_days <= '30')
			{
				$condition_shortcut['n'] = 'pa3';
			}
			else if($total_patient_days <= '40')
			{
				$condition_shortcut['n'] = 'pa4';
			}
			else if($total_patient_days <= '50')
			{
				$condition_shortcut['n'] = 'pa5';
			}
			else if($total_patient_days <= '60')
			{
				$condition_shortcut['n'] = 'pa6';
			}
			else if($total_patient_days <= '75')
			{
				$condition_shortcut['n'] = 'pa7';
			}
			else if($total_patient_days <= '90')
			{
				$condition_shortcut['n'] = 'pa8';
			}
			else if($total_patient_days <= '105')
			{
				$condition_shortcut['n'] = 'pa9';
			}
			else if($total_patient_days <= '120')
			{
				$condition_shortcut['n'] = 'pa10';
			}
			else if($total_patient_days <= '150')
			{
				$condition_shortcut['n'] = 'pa11';
			}
			else if($total_patient_days <= '180')
			{
				$condition_shortcut['n'] = 'pa12';
			}
			else if($total_patient_days > '180')
			{
				$condition_shortcut['n'] = 'pa13';
			}

			//hospiz conditions
			if($total_patient_days <= '10')
			{
				$condition_shortcut['h'] = 'pc1';
			}
			else if($total_patient_days <= '20')
			{
				$condition_shortcut['h'] = 'pc2';
			}
			else if($total_patient_days <= '30')
			{
				$condition_shortcut['h'] = 'pc3';
			}
			else if($total_patient_days <= '40')
			{
				$condition_shortcut['h'] = 'pc4';
			}
			else if($total_patient_days <= '50')
			{
				$condition_shortcut['h'] = 'pc5';
			}
			else if($total_patient_days <= '60')
			{
				$condition_shortcut['h'] = 'pc6';
			}
			else if($total_patient_days <= '75')
			{
				$condition_shortcut['h'] = 'pc7';
			}
			else if($total_patient_days <= '90')
			{
				$condition_shortcut['h'] = 'pc8';
			}
			else if($total_patient_days <= '105')
			{
				$condition_shortcut['h'] = 'pc9';
			}
			else if($total_patient_days <= '120')
			{
				$condition_shortcut['h'] = 'pc10';
			}
			else if($total_patient_days <= '150')
			{
				$condition_shortcut['h'] = 'pc11';
			}
			else if($total_patient_days <= '180')
			{
				$condition_shortcut['h'] = 'pc12';
			}
			else if($total_patient_days > '180')
			{
				$condition_shortcut['h'] = 'pc13';
			}

			//calculate each amount
			$all_hospiz_days = count($hospiz_days);
			$all_non_hospiz_days = ($total_patient_days - $all_hospiz_days);

			//calculate hospiz/non-hospiz percent from overall time
			// and extract the percent from overall time shortcut price

			if($all_hospiz_days > '0')
			{
				$hospiz_percent = ($all_hospiz_days / $total_patient_days) * 100;
				$hospiz_amount = round((($hospiz_percent / 100) * $pricelist[$condition_shortcut['h']]['price']), 2);

				if($non_hospiz_percent != '0')
				{
					$invoice_items[$condition_shortcut['h']]['qty'] = '1';
					$invoice_items[$condition_shortcut['h']]['percent'] = number_format($hospiz_percent, '2', '.', '');
					$invoice_items[$condition_shortcut['h']]['shortcut'] = $condition_shortcut['h'];
					$invoice_items[$condition_shortcut['h']]['price_details'] = $pricelist[$condition_shortcut['h']];
					$invoice_items[$condition_shortcut['h']]['price'] = $pricelist[$condition_shortcut['h']]['price'];
					$invoice_items[$condition_shortcut['h']]['total'] = $hospiz_amount;
					$invoice_items[$condition_shortcut['h']]['custom'] = '0';

					foreach($hospiz_days_arr_type as $k_period_id => $v_period_days)
					{
						if(strlen(trim(rtrim($v_period_days[0]))) > '0')
						{
							$invoice_items[$condition_shortcut['h']]['from_date'][$k_period_id] = $v_period_days[0];
							$invoice_items[$condition_shortcut['h']]['till_date'][$k_period_id] = end($v_period_days);
						}
					}

					if(count($invoice_items[$condition_shortcut['h']]['from_date']) > '0')
					{
						$invoice_items[$condition_shortcut['h']]['from_date'] = array_values($invoice_items[$condition_shortcut['h']]['from_date']);
					}

					if(count($invoice_items[$condition_shortcut['h']]['till_date']) > '0')
					{
						$invoice_items[$condition_shortcut['h']]['till_date'] = array_values($invoice_items[$condition_shortcut['h']]['till_date']);
					}
				}
			}

			$nonhospiz_days_arr = array_diff($no_hospital_cycle_days, $hospiz_days);

			asort($nonhospiz_days_arr);
			$incr = '0';
			foreach($nonhospiz_days_arr as $k_day => $v_day)
			{
				$period_non_hospiz_days[$incr][] = $v_day;
				if(strtotime('+1 day', strtotime($v_day)) != strtotime($nonhospiz_days_arr[$k_day + 1]))
				{
					$incr++;
				}
			}

			$non_hospiz_percent = ($all_non_hospiz_days / $total_patient_days) * 100;
			$non_hospiz_amount = round((($non_hospiz_percent / 100) * $pricelist[$condition_shortcut['n']]['price']), 2);

			if($non_hospiz_percent != '0')
			{
				$invoice_items[$condition_shortcut['n']]['qty'] = '1';
				$invoice_items[$condition_shortcut['n']]['percent'] = number_format($non_hospiz_percent, '2', '.', '');
				$invoice_items[$condition_shortcut['n']]['shortcut'] = $condition_shortcut['n'];
				$invoice_items[$condition_shortcut['n']]['price'] = $pricelist[$condition_shortcut['n']]['price'];
				$invoice_items[$condition_shortcut['n']]['price_details'] = $pricelist[$condition_shortcut['n']];
				$invoice_items[$condition_shortcut['n']]['total'] = $non_hospiz_amount;
				$invoice_items[$condition_shortcut['n']]['custom'] = '0';

				foreach($period_non_hospiz_days as $k_period => $v_period)
				{
					if(strlen(trim(rtrim($v_period[0]))) > '0')
					{
						$invoice_items[$condition_shortcut['n']]['from_date'][] = $v_period[0];
						$invoice_items[$condition_shortcut['n']]['till_date'][] = end($v_period);
					}
				}
			}


			if($_REQUEST['dbg'] == 'z')
			{
				print_r("hospiz_days_arr_type\n");
				print_r($hospiz_days_arr_type);

				print_r("only hospiz_days\n");
				print_r($hospiz_days);

				print_r('invoice_items\n');
				print_r($invoice_items);

				print_r("no_hospital_cycle_days\n");
				print_r($no_hospital_cycle_days);
//			print_r("no_hospital_cycle_days\n");
//			print_r($no_hospital_cycle_days);
				print_r("all_hospiz_days: ");
				print_r($all_hospiz_days);
				print_r("\n all_non_hospiz_days: ");
				print_r($all_non_hospiz_days);
				print_r("\n hopsiz percentage: ");
				print_r($hospiz_percent);
				print_r("\n hospiz amount ");
				print_r($hospiz_amount);
				print_r("\n nonhospiz percentage ");
				print_r($non_hospiz_percent);
				print_r("\n nonhospiz amount ");
				print_r($non_hospiz_amount);
				print_r("\n hospiz_percent_no_round: ");
				print_r($hospiz_percent_no_round);
				exit;
			}




//		print_r($invoice_items);
//		print_r("total_patient_days :".$total_patient_days."\n");
//		print_r("all_hospiz_days :".$all_hospiz_days."\n");
//		print_r("all_non_hospiz_days :".$all_non_hospiz_days."\n");
//		print_r($condition_shortcut);
//		print_r("\nNon Hospiz percent: ".$non_hospiz_percent."% from ". $pricelist[$condition_shortcut['n']]['price'] ." = ".$non_hospiz_amount."\n");
//		print_r("\nHospiz percent: ".$hospiz_percent."% from ". $pricelist[$condition_shortcut['h']]['price'] ." = ".$hospiz_amount."\n");
//		exit;

			return $invoice_items;
		}

		private function primary_method_changes_new($ipid, $admission_details, $no_hospital_cycle_days, $hospiz_days, $pricelist, $hospiz_days_arr_type)
		{
			asort($hospiz_days);
			$hospiz_days = array_values($hospiz_days);
			//count patient days and determine the shortcut to be used
			$total_patient_days = count($no_hospital_cycle_days); //111 => PA10 || PC10
			//assing shortcut based on total patients
			//non hospiz
			if($total_patient_days <= '10')
			{
				$condition_shortcut['n'] = 'pa1';
			}
			else if($total_patient_days <= '20')
			{
				$condition_shortcut['n'] = 'pa2';
			}
			else if($total_patient_days <= '30')
			{
				$condition_shortcut['n'] = 'pa3';
			}
			else if($total_patient_days <= '40')
			{
				$condition_shortcut['n'] = 'pa4';
			}
			else if($total_patient_days <= '50')
			{
				$condition_shortcut['n'] = 'pa5';
			}
			else if($total_patient_days <= '60')
			{
				$condition_shortcut['n'] = 'pa6';
			}
			else if($total_patient_days <= '75')
			{
				$condition_shortcut['n'] = 'pa7';
			}
			else if($total_patient_days <= '90')
			{
				$condition_shortcut['n'] = 'pa8';
			}
			else if($total_patient_days <= '105')
			{
				$condition_shortcut['n'] = 'pa9';
			}
			else if($total_patient_days <= '120')
			{
				$condition_shortcut['n'] = 'pa10';
			}
			else if($total_patient_days <= '150')
			{
				$condition_shortcut['n'] = 'pa11';
			}
			else if($total_patient_days <= '180')
			{
				$condition_shortcut['n'] = 'pa12';
			}
			else if($total_patient_days > '180')
			{
				$condition_shortcut['n'] = 'pa13';
				$previous_shortcut['n'] = 'pa12';
			}

			//hospiz conditions
			if($total_patient_days <= '10')
			{
				$condition_shortcut['h'] = 'pc1';
			}
			else if($total_patient_days <= '20')
			{
				$condition_shortcut['h'] = 'pc2';
			}
			else if($total_patient_days <= '30')
			{
				$condition_shortcut['h'] = 'pc3';
			}
			else if($total_patient_days <= '40')
			{
				$condition_shortcut['h'] = 'pc4';
			}
			else if($total_patient_days <= '50')
			{
				$condition_shortcut['h'] = 'pc5';
			}
			else if($total_patient_days <= '60')
			{
				$condition_shortcut['h'] = 'pc6';
			}
			else if($total_patient_days <= '75')
			{
				$condition_shortcut['h'] = 'pc7';
			}
			else if($total_patient_days <= '90')
			{
				$condition_shortcut['h'] = 'pc8';
			}
			else if($total_patient_days <= '105')
			{
				$condition_shortcut['h'] = 'pc9';
			}
			else if($total_patient_days <= '120')
			{
				$condition_shortcut['h'] = 'pc10';
			}
			else if($total_patient_days <= '150')
			{
				$condition_shortcut['h'] = 'pc11';
			}
			else if($total_patient_days <= '180')
			{
				$condition_shortcut['h'] = 'pc12';
			}
			else if($total_patient_days > '180')
			{
				$condition_shortcut['h'] = 'pc13';
				$previous_shortcut['h'] = 'pc12';
			}

			//calculate each amount
			$all_hospiz_days = count($hospiz_days);
			$all_non_hospiz_days = ($total_patient_days - $all_hospiz_days);

//			L.E: new method calculates the sum of pa12&&pc12 which will be
//			used as price for percent calculation below
			//calculate multiplier for curent condition shortcut and previous shortcut
			$grouped_pre_item['n'] = array();
			$grouped_pre_item['h'] = array();
			if(in_array('pa13', $condition_shortcut) || in_array('pc13', $condition_shortcut))
			{
				$qty = '1';
				//pa12
				//get previous shortcut price non-hospiz
				$pre_item[$previous_shortcut['n']]['shortcut'] = $previous_shortcut['n'];
				$pre_item[$previous_shortcut['n']]['qty'] = $qty;
				$pre_item[$previous_shortcut['n']]['name'] = '( ' . $qty . ' x ' . number_format($pricelist[$previous_shortcut['n']]['price'], 2, ',', '.') . ')';
				$pre_item[$previous_shortcut['n']]['price'] = $pricelist[$previous_shortcut['n']]['price'];
				$pre_item[$previous_shortcut['n']]['total'] = ($qty * $pricelist[$previous_shortcut['n']]['price']);

				//pa13
				$patient_days_overdue = ($total_patient_days - 180);

				if($patient_days_overdue > 0)
				{
					$multiplier = ceil($patient_days_overdue / 30);
				}

				$pre_item[$condition_shortcut['n']]['shortcut'] = $condition_shortcut['n'];
				$pre_item[$condition_shortcut['n']]['qty'] = $multiplier;
				$pre_item[$condition_shortcut['n']]['name'] = '( ' . $multiplier . ' x ' . number_format($pricelist[$condition_shortcut['n']]['price'], 2, ',', '.') . ')';
				$pre_item[$condition_shortcut['n']]['price'] = $pricelist[$condition_shortcut['n']]['price'];
				$pre_item[$condition_shortcut['n']]['total'] = ($multiplier * $pricelist[$condition_shortcut['n']]['price']);
				array_push($grouped_pre_item['n'], $pre_item[$previous_shortcut['n']]);
				array_push($grouped_pre_item['n'], $pre_item[$condition_shortcut['n']]);

				//pc12 && pc13
				if($all_hospiz_days > '0')
				{
					$pre_item[$previous_shortcut['h']]['shortcut'] = $previous_shortcut['h'];
					$pre_item[$previous_shortcut['h']]['qty'] = $qty;
					$pre_item[$previous_shortcut['h']]['name'] = '( ' . $qty . ' x ' . number_format($pricelist[$previous_shortcut['h']]['price'], 2, ',', '.') . ')';
					$pre_item[$previous_shortcut['h']]['price'] = $pricelist[$previous_shortcut['h']]['price'];
					$pre_item[$previous_shortcut['h']]['total'] = ($qty * $pricelist[$previous_shortcut['h']]['price']);

					$pre_item[$condition_shortcut['h']]['shortcut'] = $condition_shortcut['h'];
					$pre_item[$condition_shortcut['h']]['qty'] = $multiplier;
					$pre_item[$condition_shortcut['h']]['name'] = '( ' . $multiplier . ' x ' . number_format($pricelist[$condition_shortcut['h']]['price'], 2, ',', '.') . ')';
					$pre_item[$condition_shortcut['h']]['price'] = $pricelist[$condition_shortcut['h']]['price'];
					$pre_item[$condition_shortcut['h']]['total'] = ($multiplier * $pricelist[$condition_shortcut['h']]['price']);

					array_push($grouped_pre_item['h'], $pre_item[$previous_shortcut['h']]);
					array_push($grouped_pre_item['h'], $pre_item[$condition_shortcut['h']]);
				}

				//sum pa12 + pa13 => new price
				$sub_price['n'] = ($pre_item[$previous_shortcut['n']]['total'] + $pre_item[$condition_shortcut['n']]['total']);
				$sub_price['h'] = ($pre_item[$previous_shortcut['h']]['total'] + $pre_item[$condition_shortcut['h']]['total']);
				if($_REQUEST['dqd'])
				{
					print_r($pre_item);
					print_r($grouped_pre_item);
					print_r($sub_price);
				}
			}



			if($previous_shortcut['h'])
			{
				$short_prefix = '_';
			}
			//calculate hospiz/non-hospiz percent from overall time
			// and extract the percent from overall time shortcut price
			if($all_hospiz_days > '0')
			{
				if($sub_price['h'])
				{
					$hospiz_item_price = number_format($sub_price['h'], 2, '.', '');
				}
				else
				{
					$hospiz_item_price = number_format($pricelist[$condition_shortcut['h']]['price'], 2, '.', '');
				}
				$hospiz_percent = number_format((($all_hospiz_days / $total_patient_days) * 100), 2, '.', '');
				$hospiz_amount = number_format((($hospiz_percent / 100) * $hospiz_item_price), 2, '.', '');

				if($hospiz_percent != '0')
				{
					$invoice_items[$condition_shortcut['h']]['qty'] = '1';
					$invoice_items[$condition_shortcut['h']]['percent'] = number_format($hospiz_percent, '2', '.', '');

					foreach($grouped_pre_item['h'] as $k_item_h => $v_item_h)
					{
						$invoice_items[$condition_shortcut['h']]['description_items'][] = '&nbsp;' . $this->view->translate('shortcut_name_' . $v_item_h['shortcut']) . '&nbsp;&nbsp;&nbsp;&nbsp;' . $this->view->translate('shortcut_description_' . $v_item_h['shortcut']) . ' ' . $v_item_h['name'];
					}

					if(!empty($grouped_pre_item['h']))
					{
						$invoice_items[$condition_shortcut['h']]['description'] = implode('<br /> ', $invoice_items[$condition_shortcut['h']]['description_items']);
					}

					$invoice_items[$condition_shortcut['h']]['shortcut'] = $condition_shortcut['h'] . $short_prefix;
					$invoice_items[$condition_shortcut['h']]['price_details'] = $pricelist[$condition_shortcut['h']];

					if($sub_price['h'])
					{
						$invoice_items[$condition_shortcut['h']]['price_details']['price'] = $hospiz_item_price;
					}


					$invoice_items[$condition_shortcut['h']]['price'] = $hospiz_item_price;
					$invoice_items[$condition_shortcut['h']]['total'] = $hospiz_amount;
					$invoice_items[$condition_shortcut['h']]['custom'] = '0';

					foreach($hospiz_days_arr_type as $k_period_id => $v_period_days)
					{
						if(strlen(trim(rtrim($v_period_days[0]))) > '0')
						{
							$invoice_items[$condition_shortcut['h']]['from_date'][$k_period_id] = $v_period_days[0];
							$invoice_items[$condition_shortcut['h']]['till_date'][$k_period_id] = end($v_period_days);
						}
					}

					if(count($invoice_items[$condition_shortcut['h']]['from_date']) > '0')
					{
						$invoice_items[$condition_shortcut['h']]['from_date'] = array_values($invoice_items[$condition_shortcut['h']]['from_date']);
					}

					if(count($invoice_items[$condition_shortcut['h']]['till_date']) > '0')
					{
						$invoice_items[$condition_shortcut['h']]['till_date'] = array_values($invoice_items[$condition_shortcut['h']]['till_date']);
					}
				}
			}

			$nonhospiz_days_arr = array_diff($no_hospital_cycle_days, $hospiz_days);

			asort($nonhospiz_days_arr);
			$incr = '0';
			foreach($nonhospiz_days_arr as $k_day => $v_day)
			{
				$period_non_hospiz_days[$incr][] = $v_day;
				if(strtotime('+1 day', strtotime($v_day)) != strtotime($nonhospiz_days_arr[$k_day + 1]))
				{
					$incr++;
				}
			}

			if($sub_price['h'])
			{
				$non_hospiz_item_price = number_format($sub_price['n'], 2, '.', '');
			}
			else
			{
				$non_hospiz_item_price = number_format($pricelist[$condition_shortcut['n']]['price'], 2, '.', '');
			}
//			$non_hospiz_item_price = number_format($sub_price['n'], 2, '.','');
			$non_hospiz_percent = number_format((($all_non_hospiz_days / $total_patient_days) * 100), 2, '.', '');
			$non_hospiz_amount = number_format((($non_hospiz_percent / 100) * $non_hospiz_item_price), 2, '.', '');

			if($non_hospiz_percent != '0')
			{
				$invoice_items[$condition_shortcut['n']]['qty'] = '1';
				$invoice_items[$condition_shortcut['n']]['percent'] = $non_hospiz_percent;

				foreach($grouped_pre_item['n'] as $k_item_n => $v_item_n)
				{
					$invoice_items[$condition_shortcut['n']]['description_items'][] = '&nbsp;' . $this->view->translate('shortcut_name_' . $v_item_n['shortcut']) . '&nbsp;&nbsp;&nbsp;&nbsp;' . $this->view->translate('shortcut_description_' . $v_item_n['shortcut']) . ' ' . $v_item_n['name'];
				}

				if(!empty($grouped_pre_item['n']))
				{
					$invoice_items[$condition_shortcut['n']]['description'] = implode('<br /> ', $invoice_items[$condition_shortcut['n']]['description_items']);
				}

				$invoice_items[$condition_shortcut['n']]['shortcut'] = $condition_shortcut['n'] . $short_prefix;
				$invoice_items[$condition_shortcut['n']]['price'] = $non_hospiz_item_price;

				$invoice_items[$condition_shortcut['n']]['price_details'] = $pricelist[$condition_shortcut['n']];

				if($sub_price['n'])
				{
					$invoice_items[$condition_shortcut['n']]['price_details']['price'] = $non_hospiz_item_price;
				}

				$invoice_items[$condition_shortcut['n']]['total'] = $non_hospiz_amount;
				$invoice_items[$condition_shortcut['n']]['custom'] = '0';

				foreach($period_non_hospiz_days as $k_period => $v_period)
				{
					if(strlen(trim(rtrim($v_period[0]))) > '0')
					{
						$invoice_items[$condition_shortcut['n']]['from_date'][] = $v_period[0];
						$invoice_items[$condition_shortcut['n']]['till_date'][] = end($v_period);
					}
				}
			}


			if($_REQUEST['dbgtst'])
			{
				print_r("Total patient days:" . $total_patient_days . "\n");
				print_r("Hospiz days:" . $all_hospiz_days . "\n");
				print_r("Non-Hospiz days:" . $all_non_hospiz_days . "\n");

				print_r("Hospiz Days Arr\n");
				print_r($hospiz_days);
				print_r("Non Hospiz Days Arr\n");
				print_r($nonhospiz_days_arr);

				exit;
			}

			return $invoice_items;
		}

		
		// ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
		public function heinvoiceslistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$he_invoices = new HeInvoices();
			$he_invoices_items = new HeInvoiceItems();
			$he_invoices_form = new Application_Form_HeInvoices();

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			
			
			//ISPC-2609 Ancuta 24.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "he_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			
			$this->view->print_html = '';
			if(count($invoice_user_printjobs) > 1 ){
			    
			    $this->view->print_html = $print_html;
			}
			$this->view->show_print_jobs = $this->user_print_jobs;
			//---
			
			
			if($this->getRequest()->isPost())
			{

				if($_POST['draftmore'] == "1")
				{
					$transform = $he_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $he_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				elseif($_POST['warningmore'] == "1")
				{
					$invoiceids_to_warn = implode(',', $_POST['document']);
				
					$this->forward('generatereminderinvoice', 'Invoicenew', null, array());
				
					return;
				}
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				elseif($_POST['batch_print_more'])
				{
				    $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
				    $params['batch_print'] = '1'; //enables batch print procedure
				    $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
				    $params['get_pdf'] = '0'; //stops downloading single pdf
				    
				    //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
				    if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
				        
				        
				    } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
				        
				        $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
				        
				        $print_job_data = array();
				        $print_job_data['clientid'] = $clientid;
				        $print_job_data['user'] = $userid;
				        $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
				        $print_job_data['output_type'] = 'pdf';
				        $print_job_data['status'] = 'active';
				        $print_job_data['invoice_type'] = 'he_invoice';
				        $print_job_data['print_params'] = serialize($params);
				        $print_job_data['print_function'] = 'editheinvoiceAction';
				        $print_job_data['print_controller'] = 'invoice';
				        
				        foreach($_POST['document'] as $k=>$inv_id){
				            $print_job_data['PrintJobsItems'][] = array(
				                'clientid'=>$print_job_data['clientid'],
				                'user'=>$print_job_data['user'],
				                'invoice_id'=>$inv_id,
				                'invoice_type'=>$print_job_data['invoice_type'],
				                'status'=>"new"
				            );
				        }
				        
				        $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
				        $print_id = $PrintJobsBulk_obj->id;
				        
				        if($print_id){
				            $this->__StartPrintJobs();
				        }
				    }
				    
				}
				else
				{
					$new_payment = $he_invoices_form->submit_payment($_POST);
				}
				$this->_redirect(APP_BASE . 'invoice/heinvoiceslist'); //to avoid resubmission
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$clone_record = $he_invoices->create_storno_invoice($invoiceid);
					$this->_redirect(APP_BASE . 'invoice/heinvoiceslist?flg=suc');
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $he_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/heinvoiceslist?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/heinvoiceslist?flg=delerr');
				}
			}




			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
		}

		public function fetchheinvoicelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$he_invoices_payments = new HeInvoicePayments();
			$users = new User();
			$warnings = new RemindersInvoice();
			$modules = new Modules();
			
			if($modules->checkModulePrivileges("170", $clientid))
			{
				$this->view->create_bulk_warnings = "1";
			}
			else
			{
				$this->view->create_bulk_warnings = "0";
			}
			
			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('HeInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);


			//process tabs
			$filters['hiinvoice_search'] = '';

			switch($_REQUEST['f_status'])
			{

				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND isdelete=0';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND DATE(NOW()) > DATE(invoice_end)  AND isdelete=0';
					break;

				case 'all':
					$filters['hiinvoice'] = ' ';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';
					break;
			}


			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "p.id,e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "p.id,e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);

			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
				$patients_encrypted_ids[$v_f_pat_res['EpidIpidMapping']['ipid']] = Pms_Uuid::encrypt($v_f_pat_res['id']);
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('HeInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();

			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}
				$status_count_invoices["all"][] = '1';
			}

			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('HeInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}
			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('HeInvoices')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";

			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
					//HeInvoices
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [OLD] 
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*,  IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort,concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('HeInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
				$invoicelimit[$k_il]['patient_id'] = $patients_encrypted_ids[$v_il['ipid']];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $he_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);
			
			$all_warnings = $warnings->get_reminders($invoice_ids, 'he_invoice', $clientid);
				
			foreach ($invoicelimit as &$row) {
				if (isset($all_warnings[$row['id']])) {
					$row['InvoiceWarnings'] = $all_warnings[$row['id']];
				}
			}
			//var_dump($invoicelimit); exit;

			$this->view->storned_invoces = HeInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function helistpaymentsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$heinvoices = new HeInvoices();
			$hepayments = new HeInvoicePayments();
			$heinvoice_form = new Application_Form_HeInvoices();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $hepayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $hepayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $hepayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $heinvoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						//					print_r($status."\n\n");
						$update_status = $heinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
						//					print_r($update_status);
					}

					//reload the payments
					unset($payments);
					$payments = $hepayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoice/helistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		//ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
		public function editheinvoiceAction($params = array())
		{

			setlocale(LC_ALL, 'de_DE.UTF-8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			//$clientid = $logininfo->clientid;
		 
			//$clientid = $logininfo->clientid;
			if(isset($params) && !empty($params) && $params['bulk_print'] == 1){
			    $_REQUEST = $params;
			    $_REQUEST['pdf'] = 1;
			    $_REQUEST['mode'] =  null;
			    $this->_helper->viewRenderer->setNoRender();
			}
			
			//ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
			$clientid = isset($_REQUEST['clientid']) && ! empty($_REQUEST['clientid']) ? $_REQUEST['clientid'] :  $logininfo->clientid;
			$userid = isset($_REQUEST['userid']) && ! empty($_REQUEST['userid']) ? $_REQUEST['userid'] : $logininfo->userid;
			
			
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$he_invoices = new HeInvoices();
			$he_invoices_items = new HeInvoiceItems();
			$he_invoices_form = new Application_Form_HeInvoices();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$this->view->hide_patient_tab = '1';


			//ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
			if($_REQUEST['bulk_print'] == '1' && strlen($_REQUEST['invoiceid']) > 0){
			    $invoice_details = $he_invoices->getHeInvoice($_REQUEST['invoiceid']);
			    if($invoice_details['storno'] == '1'){
			        $_REQUEST['invoiceid'] = $invoice_details['record_id'];
			        $_REQUEST['stornopdf'] = 1;
			        $_REQUEST['storno'] = $invoice_details['id'];
			    }
			}
			//--
			
			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $he_invoices->getHeInvoice($invoice_id);

				if($_REQUEST['dbgqq'])
				{
					print_r($invoice_data);
					exit;
				}
				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoice/heinvoiceslist');
				}

				if(in_array($invoice_data['id'], HeInvoices::get_storned_invoices($clientid)))
				{
					$this->view->has_storno = '1';
				}
				else
				{
					$this->view->has_storno = '0';
				}

				//ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
				if($_REQUEST['bulk_print'] == '1'){
				    $pdet = $patientmaster->get_patients_details_By_Ipids(array($invoice_data['ipid']));
				    $pm = $pdet[$invoice_data['ipid']];
				    $patient_details = $pm;
				    
				} else {
				    $patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				}
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];

				//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}

					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
					
					
					$healthinsu_array[0]['he_price_list_type']   = $healtharray['he_price_list_type'];
				}


				if($hi_perms_divisions)
				{

					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
				}

				$pathealthinsurancenr = "";
				if(count($healthinsu_array[0]))
				{
					$phi_details = $healthinsu_array[0]['name'];
				}
				else
				{
					$phi_details = "--";
				}

				$phi_details_sub = $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br/> ' . $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$this->view->health_insurance = $phi_details;
				$this->view->hi_subdiv_address = $phi_details_sub;

				$shortcuts = Pms_CommonData::get_prices_shortcuts();
				
				foreach($shortcuts['hessen'] as $type => $list_items_array){
					
					if(!empty($healthinsu_array[0]['he_price_list_type'])){
						if($type == $healthinsu_array[0]['he_price_list_type']){
							foreach($list_items_array as $k=>$item_sh){
								$hessen_related_dta[$item_sh] = strtoupper ($item_sh) .'  -  '.$this->view->translate('shortcut_description_'.$item_sh);
							}
						}
					}  else {
						foreach($list_items_array as $k=>$item_sh){
							$hessen_related_dta[$item_sh] = strtoupper ($item_sh) .'  -  '.$this->view->translate('shortcut_description_'.$item_sh);
						}
					}
				}
				
				$hessen_related_dta["custom_dta"] = $this->view->translate('enter custom DTA ID');
				$this->view->hessen_related_dta = $hessen_related_dta;
				
				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}

				$this->view->has_custom = '0';
				foreach($invoice_data['items'] as $k_itm => $v_itm)
				{
					if($v_itm['custom'] == '1')
					{
						$this->view->has_custom = '1';
					}
				}

				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}

				if(strlen($invoice_data['footer']) == 0)
				{
					$invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				}


				foreach($invoice_data['items'] as $k_inv_item => $v_inv_item)
				{
					$invoice_data['items'][$k_inv_item]['start_date_filter'] = $v_inv_item['from_date'][0];

					if($v_inv_item['custom'] == '0')
					{

						if(bccomp(number_format(($v_inv_item['qty'] * $v_inv_item['price']), 2, '.', ''), $v_inv_item['total'], '2') != '0' && bccomp($v_inv_item['percent'], '0.00', '2') == '0' && (str_replace('pa', '', $v_inv_item['shortcut']) || str_replace('pc', '', $v_inv_item['shortcut'])))
						{
							//get percent if item is (qty*price != total and custom=0)
							$percent = ($v_inv_item['total'] / $v_inv_item['price']);
							$invoice_data['items'][$k_inv_item]['percent'] = number_format(($percent * 100), '2', '.', '');
						}

						if(bccomp($invoice_data['items'][$k_inv_item]['percent'], '0', '2') == '0')
						{
							unset($invoice_data['items'][$k_inv_item]['percent']);
						}
					}
					//make sure they are always last
					else if($v_inv_item['custom'] == '1')
					{
						$invoice_data['items'][$k_inv_item]['start_date_filter'] = date('Y-m-d H:i:s', strtotime('+ ' . $v_inv_item['id'] . ' seconds', strtotime($v_inv_item['create_date'])));
						unset($invoice_data['items'][$k_inv_item]['percent']);
//					$invoice_data['items'][$k_inv_item]['start_date_filter'] = date('Y-m-d H:i:s', strtotime($v_inv_item['create_date']));
					}
					else if($v_inv_item['custom'] == '2') //always stay on bottom
					{
						$invoice_data['items'][$k_inv_item]['start_date_filter'] = date('Y-m-d H:i:s', strtotime('+1 year', time()));
						unset($invoice_data['items'][$k_inv_item]['percent']);
					}
					//ispc-1871 - 
					else if($v_inv_item['custom'] == '3') 
					{
						$invoice_data['items'][$k_inv_item]['start_date_filter'] = $v_inv_item['from_date'];
					}
				}

				$invoice_data['items'] = $this->array_sort($invoice_data['items'], 'start_date_filter', SORT_ . strtoupper(ASC));

				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->client_details = $client_detail[0];

				$this->view->read_only_items = '0';
				if($invoice_data['status'] >= '2')
				{
					$this->view->read_only_items = '1';
				}
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				//remove items from db
				$delete_normal_ids = explode(',', $_POST['excluded_normal_items']);
				$delete['normal_ids'][] = '999999999';

				foreach($delete_normal_ids as $k_del_n => $v_del_n)
				{
					if(strlen(trim(rtrim(str_replace('del_', '', $v_del_n)))) > '0')
					{
						$delete['normal_ids'][] = trim(rtrim(str_replace('del_', '', $v_del_n)));
					}
				}


				$delete_pv_ids = explode(',', $_POST['excluded_pv_items']);
				$delete['pv_ids'][] = '999999999';

				foreach($delete_pv_ids as $k_del_pv => $v_del_pv)
				{
					$item_id = str_replace('del_', '', $v_del_pv);
					if(strlen(trim(rtrim($item_id))) > '0')
					{
						$delete['pv_ids'][] = trim(rtrim($item_id));
					}
				}

				if(empty($_REQUEST['pdf']))
				{
					if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
					{
						$high_invoice_nr = $he_invoices->get_next_invoice_number($clientid);
						$_POST['prefix'] = $high_invoice_nr['prefix'];
						$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
					}
					else
					{
						$_POST['prefix'] = $invoice_data['prefix'];
						$_POST['invoice_number'] = $invoice_data['invoice_number'];
					}

					$_POST['delete_ids'] = $delete;

					//save here
					if(strlen($_POST['address']) > 0 ){
					    if(strpos($_POST['address'],"style"))
					    {
					        $_POST['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['address']);
					    }
					    $_POST['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['address']);
					    $_POST['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['address']);
					    $_POST['address'] = str_replace(array("\n"),"<br />", $_POST['address']);
					}
					$edit_invoice = $he_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);

					if($edit_invoice)
					{
						$this->_redirect(APP_BASE . 'invoice/editheinvoice?invoiceid=' . $_REQUEST['invoiceid'] . '&flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/editheinvoice?invoiceid=' . $_REQUEST['invoiceid'] . '&flg=edterr');
					}
				}
				//pdf with data from db + post(links)
				else if(!empty($_REQUEST['pdf']) && !empty($_REQUEST['invoiceid']))
				{

					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}
					$pdf_data = $_POST;

					//prepare items and custom items for pdf
					foreach($invoice_data['items'] as $k_item => $v_item)
					{
						$invoice_total += $v_item['total'];
					}

//				foreach($_POST['custom']['shortcut'] as $k_cust_item=> $v_cust_item)
					foreach($_POST['custom']['id'] as $k_cust_item => $v_cust_item)
					{
					    if( $_POST['custom']['xbdt_action'][$k_cust_item])
					    {
					        $post_custom ="3";
					    } else {
					        $post_custom ="1";
					    }
					    
					    
						$invoice_data['items'][$v_cust_item] = array(
							'shortcut' => $_POST['custom']['shortcut'][$k_cust_item],
							'description' => $_POST['custom']['description'][$k_cust_item],
							'from_date' => $_POST['custom']['from_date'][$k_cust_item],
							'qty' => $_POST['custom']['qty'][$k_cust_item],
							'price' => $_POST['custom']['price'][$k_cust_item],
							'total' => $_POST['custom']['total'][$k_cust_item],
							'custom' =>  $post_custom ,
						    //TODO-3701 Ancuta 05.01.2021
							'related_shortcut' => $_POST['custom']['related_shortcut'][$k_cust_item],
							'custom_dta_id' => $_POST['custom']['custom_dta_id'][$k_cust_item],
						    //--
						);

						$invoice_total += $_POST['custom']['total'][$k_cust_item];
					}

					if(strlen($_POST['completed_date']) > '0')
					{
					    $pdf_data['completed_date'] = date('d.m.Y', strtotime($_POST['completed_date']));
					}
					else
					{
						if($invoice_data['completed_date'] != '0000-00-00 00:00:00')
						{
							$pdf_data['completed_date'] = $invoice_data['completed_date'];
						}
						else
						{
							$pdf_data['completed_date'] = $invoice_data['completed_date_sort'];
						}
					}

					//exclude items from pdf
					foreach($invoice_data['items'] as $k_item => $v_item)
					{
						if(in_array($v_item['id'], $delete['normal_ids']) && $v_item['custom'] == '0')
						{
							unset($invoice_data['items'][$k_item]);
						}
						else if(in_array($v_item['id'], $delete['pv_ids']) && $v_item['custom'] == '2')
						{
							unset($invoice_data['items'][$k_item]);
						}
					}
					$pdf_data['items'] = $invoice_data['items'];
					$pdf_data['prefix'] = $invoice_data['prefix'];
					$pdf_data['invoice_number'] = $invoice_data['invoice_number'];
					$pdf_data['patientdetails'] = $patient_details;
					$pdf_data['client_details'] = $client_detail[0];

					if(strlen($_POST['invoice_total']) == '0')
					{
						$pdf_data['invoice_total'] = $invoice_total;
					}

					$pdf_data['list_type'] = $invoice_data['pricelist_type'];

					$pdf_data['has_custom'] = $this->view->has_custom;
					$pdf_data['insurance_no'] = $this->view->insurance_no;
					$pdf_data['clientid'] = $clientid;

					//ISPC-2747 Lore 27.11.2020 - ADDED BY ANCUTA 06.01.2021 !!!!!!! - it was missing
					if(strpos($invoice_data['show_boxes'], 'show_box_active') === false ){
					    $pdf_data['show_box_active'] = '0';
					}else {
					    $pdf_data['show_box_active'] = '1';
					}
					if(strpos($invoice_data['show_boxes'], 'show_box_patient') === false ){
					    $pdf_data['show_box_patient'] = '0';
					}else {
					    $pdf_data['show_box_patient'] = '1';
					}
					if(strpos($invoice_data['show_boxes'], 'show_box_sapv') === false ){
					    $pdf_data['show_box_sapv'] = '0';
					}else {
					    $pdf_data['show_box_sapv'] = '1';
					}
					
					
					//TODO-3706 Ancuta 05.01.2021
					//create batch name
					$Batch_name = false;
					$Batch_name = $pdf_data['prefix'].$pdf_data['invoice_number'];
					$Batch_name = Pms_CommonData::filter_filename($Batch_name, true);
					
					$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'he_invoice');

					if($template_data)
					{
					    // generate invoice page
					    $tokenfilter = array();
					    
					    // ADDED By ANCUTA !!!! They are not replaced - PLEASE CHECK - !!! 06.01.2021
					    $tokenfilter['invoice']['invoiced_month'] ="";// [';invoiced_month', 'invoiced_month'],
					    $tokenfilter['invoice']['first_active_day'] ="";// [';first_active_day', 'first_active_day'],
					    $tokenfilter['invoice']['last_active_day'] ="";// [';last_active_day', 'last_active_day'],
					    $tokenfilter['invoice']['first_sapv_day'] ="";// [';first_sapv_day', 'first_sapv_day'],
					    $tokenfilter['invoice']['last_sapv_day'] ="";// [';last_sapv_day', 'last_sapv_day'],
					    $tokenfilter['invoice']['sapv_approve_date'] ="";// [';sapv_approve_date', 'sapv_approve_date'],
					    $tokenfilter['invoice']['sapv_approve_nr'] ="";// [';sapv_approve_nr', 'sapv_approve_nr'],
					    $tokenfilter['invoice']['footer'] ="";// [';footer', 'footer'],
					    $tokenfilter['invoice']['footer_text'] ="";// [';footer_text', 'footer_text'],
					    $tokenfilter['invoice']['unique_id'] ="";// [';unique_id', 'unique_id'],
					    $tokenfilter['invoice']['invoiced_month'] ="";// [';invoiced_month', 'invoiced_month'],
					    $tokenfilter['invoice']['invoice_items_html'] ="";// [';invoice_items_html', 'invoice_items_html'],
					    $tokenfilter['invoice']['patient_pflegestufe'] ="";//
					    $tokenfilter['invoice']['debtor_number'] ="";//
					    $tokenfilter['invoice']['invoiced_period'] ="";//
					    $tokenfilter['debtor_number'] ="";//
					    $tokenfilter['patient']['debtor_number'] ="";//
					    // -- 
					    
					    $tokenfilter['invoice']['address'] = $pdf_data['address'];
					    if($pdf_data['completed_date'] != "0000-00-00 00:00:00" && $pdf_data['completed_date'] != "1970-01-01 00:00:00")
					    {
					        $tokenfilter['invoice']['invoicedate'] = strftime('%A, %d. %B %Y', strtotime($pdf_data['completed_date']));
					    }
					    else
					    {
					        $tokenfilter['invoice']['invoicedate'] = strftime('%A, %d. %B %Y', strtotime($pdf_data['create_date']));
					    }
					    
					    $tokenfilter['invoice']['prefix'] = $pdf_data['prefix'];
					    $tokenfilter['invoice']['invoicenumber'] = $pdf_data['invoice_number'];
					    $tokenfilter['invoice']['full_invoice_number'] = $pdf_data['prefix'].$pdf_data['invoice_number'];
					    $tokenfilter['invoice']['healthinsurancenumber'] = $pdf_data['insurance_no'];
					    $tokenfilter['patient'] = $pdf_data['patientdetails'];
					    $tokenfilter['invoice']['patient_pflegestufe'] = $pdf_data['patient_pflegestufe'];
					    $tokenfilter['footer'] = $pdf_data['footer'];
					    if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'])
					    {
					        $tokenfilter['invoice']['invoiceamount'] = number_format($pdf_data['invoice_total'], '2', ',', '.');
					    }
					    else
					    {
					        $tokenfilter['invoice']['invoiceamount'] = number_format($pdf_data['invoice_total'], '2', ',', '.');
					    }
					    
					    $keyi = 0;
					    $he_invoice_items = array();
					    foreach($pdf_data['items'] as $kivi => $vivi)
					    {
					        $he_invoice_items['items'][$keyi]['shortcuts'][$kivi] = $vivi;
					        $keyi++;
					    }
					    
					    if(count($pdf_data['items']) > '0')
					    {
					        $rows = count($he_invoice_items['items']);
					        $grid = new Pms_Grid($he_invoice_items['items'], 1, $rows, "he_invoice_items_list_pdf.html");
					        $grid->invoice_total = $tokenfilter['invoice']['invoiceamount'];
					        $grid->max_entries = $rows;
					        $html_items = $grid->renderGrid();
					        //$html_items_short = $grid_short->renderGrid();
					    }
					    else
					    {
					        $html_items = "";
					        $html_items_short = "";
					    }
					    
					    $tokenfilter['invoice']['invoice_items_html'] = $html_items;
					    //$tokenfilter['invoice']['invoice_items_html_short'] = $html_items_short;
					    //print_r($tokenfilter); exit;
					    
					    $template = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
					    $pdf_file_name = Pms_CommonData::filter_filename($Batch_name, true);
					    $this->_editinvoice_generate_pdf_and_download($template, $tokenfilter, $pdf_file_name);
					}
					else
					{
					   $this->generate_pdf($pdf_data, "HeInvoice", "invoice_he_pdf.html", "P");
					}
					// -- 
				}
			}
			//pdf with data from db(links)
			else if(!empty($_REQUEST['invoiceid']) && $_REQUEST['pdf'] == '1')
			{
		 
				//prepare items and custom items for pdf
				foreach($invoice_data['items'] as $k_item => $v_item)
				{
					$invoice_total += $v_item['total'];
				}

				$pdf_data = $invoice_data;

				if($invoice_data['completed_date'] != '0000-00-00 00:00:00')
				{
					$pdf_data['completed_date'] = $invoice_data['completed_date'];
				}
				else
				{
					$pdf_data['completed_date'] = $invoice_data['completed_date_sort'];
				}
				$pdf_data['patientdetails'] = $patient_details;
				$pdf_data['client_details'] = $client_detail[0];

				$pdf_data['list_type'] = $invoice_data['pricelist_type'];

				$pdf_data['has_custom'] = $this->view->has_custom;
				$pdf_data['insurance_no'] = $this->view->insurance_no;
				$pdf_data['invoice_total'] = $invoice_total;
				$pdf_data['clientid'] = $clientid;
				$pdf_data['unique_id'] = $invoice_data['id'];

				//ISPC-2747 Lore 27.11.2020
				if(strpos($invoice_data['show_boxes'], 'show_box_active') === false ){
				    $pdf_data['show_box_active'] = '0';
				}else {
				    $pdf_data['show_box_active'] = '1';
				}
				if(strpos($invoice_data['show_boxes'], 'show_box_patient') === false ){
				    $pdf_data['show_box_patient'] = '0';
				}else {
				    $pdf_data['show_box_patient'] = '1';
				}
				if(strpos($invoice_data['show_boxes'], 'show_box_sapv') === false ){
				    $pdf_data['show_box_sapv'] = '0';
				}else {
				    $pdf_data['show_box_sapv'] = '1';
				}
				
				if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
				{
				    //ISPC-2532 Lore 09.11.2020
				    $pdf_data['storned_invoice_number'] = $pdf_data['prefix'].$pdf_data['invoice_number'];
				    
					$storno_data = $invoice_data = $he_invoices->getHeInvoice($_REQUEST['storno']);

					$pdf_data['address'] = $storno_data['address'];
					$pdf_data['invoice_total'] = ($storno_data['invoice_total'] * (-1));
					$pdf_data['prefix'] = $storno_data['prefix'];
					$pdf_data['invoice_number'] = $storno_data['invoice_number'];

					if($storno_data['completed_date'] != '0000-00-00 00:00:00')
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
					}

					
					//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
					if($_REQUEST['bulk_print'] == '1'){
					    $pdf_data['unique_id'] = $storno_data['id'];
					}else{
					    $pdf_data['unique_id'] = $storno_data['record_id'];
					}
					
					$template_files = 'storno_invoice_he_pdf.html';
				}
				else
				{
					$template_files = 'invoice_he_pdf.html';
				}

				
				//TODO-3706 Ancuta 05.01.2021
				
				//ISPC-2745 Carmen 17.11.2020
				//create batch name
				$Batch_name = false;
				$Batch_name = $pdf_data['prefix'].$pdf_data['invoice_number'];
				$Batch_name = Pms_CommonData::filter_filename($Batch_name, true);
					
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'he_invoice');

				if($template_data)
				{
					// generate invoice page
					$tokenfilter = array();
					
					// ADDED By ANCUTA !!!! They are not replaced - PLEASE CHECK - !!! //06.01.2021
					$tokenfilter['invoice']['invoiced_month'] ="";// [';invoiced_month', 'invoiced_month'],
					$tokenfilter['invoice']['first_active_day'] ="";// [';first_active_day', 'first_active_day'],
					$tokenfilter['invoice']['last_active_day'] ="";// [';last_active_day', 'last_active_day'],
					$tokenfilter['invoice']['first_sapv_day'] ="";// [';first_sapv_day', 'first_sapv_day'],
					$tokenfilter['invoice']['last_sapv_day'] ="";// [';last_sapv_day', 'last_sapv_day'],
					$tokenfilter['invoice']['sapv_approve_date'] ="";// [';sapv_approve_date', 'sapv_approve_date'],
					$tokenfilter['invoice']['sapv_approve_nr'] ="";// [';sapv_approve_nr', 'sapv_approve_nr'],
					$tokenfilter['invoice']['footer'] ="";// [';footer', 'footer'],
					$tokenfilter['invoice']['footer_text'] ="";// [';footer_text', 'footer_text'],
					$tokenfilter['invoice']['unique_id'] ="";// [';unique_id', 'unique_id'],
					$tokenfilter['invoice']['invoiced_month'] ="";// [';invoiced_month', 'invoiced_month'],
					$tokenfilter['invoice']['invoice_items_html'] ="";// [';invoice_items_html', 'invoice_items_html'],
					$tokenfilter['invoice']['patient_pflegestufe'] ="";//
					$tokenfilter['invoice']['debtor_number'] ="";//
					$tokenfilter['invoice']['invoiced_period'] ="";//
					$tokenfilter['debtor_number'] ="";//
					$tokenfilter['patient']['debtor_number'] ="";//
					// -- 
					
					$tokenfilter['invoice']['address'] = $pdf_data['address'];
					if($pdf_data['completed_date'] != "0000-00-00 00:00:00" && $pdf_data['completed_date'] != "1970-01-01 00:00:00")
					{
						$tokenfilter['invoice']['invoicedate'] = strftime('%A, %d. %B %Y', strtotime($pdf_data['completed_date']));
					}
					else
					{
						$tokenfilter['invoice']['invoicedate'] = strftime('%A, %d. %B %Y', strtotime($pdf_data['create_date']));
					}
				
					$tokenfilter['invoice']['prefix'] = $pdf_data['prefix'];
					$tokenfilter['invoice']['invoicenumber'] = $pdf_data['invoice_number'];
					$tokenfilter['invoice']['full_invoice_number'] = $pdf_data['prefix'].$pdf_data['invoice_number'];
					$tokenfilter['invoice']['healthinsurancenumber'] = $pdf_data['insurance_no'];
					$tokenfilter['patient'] = $pdf_data['patientdetails'];
					$tokenfilter['invoice']['patient_pflegestufe'] = $pdf_data['patient_pflegestufe'];
					$tokenfilter['footer'] = $pdf_data['footer'];
			 
					if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'])
					{
						$tokenfilter['invoice']['invoiceamount'] = number_format($pdf_data['invoice_total'], '2', ',', '.');
					}
					else
					{
						$tokenfilter['invoice']['invoiceamount'] = number_format($pdf_data['invoice_total'], '2', ',', '.');
					}
						
					$keyi = 0;
					
					$he_invoice_items = array();
					foreach($pdf_data['items'] as $kivi => $vivi)
					{
						$he_invoice_items['items'][$keyi]['shortcuts'][$kivi] = $vivi;
						$keyi++;
							
					}
				
					if(count($pdf_data['items']) > '0')
					{
						$rows = count($he_invoice_items['items']);
						$grid = new Pms_Grid($he_invoice_items['items'], 1, $rows, "he_invoice_items_list_pdf.html");
							
						$grid->invoice_total = $tokenfilter['invoice']['invoiceamount'];
						$grid->max_entries = $rows;
							
						$html_items = $grid->renderGrid();
					}
					else
					{
						$html_items = "";
						$html_items_short = "";
					}
					$tokenfilter['invoice']['invoice_items_html'] = $html_items;
					
					
					
					$template = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
					$pdf_file_name = Pms_CommonData::filter_filename($Batch_name, true);
					
					if($_REQUEST['bulk_print'] == '1'){
					    
					    $pseudo_post['bulk_print'] = 1;
					    $pseudo_post['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
					    $pseudo_post['unique_id'] = $pdf_data['id'];
					    $pseudo_post['clientid'] = $clientid;
					    $pseudo_post['controller'] = $_REQUEST['print_controller'];
					    
					    $file_name = $this->_editinvoice_generate_pdf_and_download_pj($template, $tokenfilter, $pdf_file_name,$clientid,$pseudo_post);
					    
					    return $file_name;
					    
					} else{
				        $this->_editinvoice_generate_pdf_and_download($template, $tokenfilter, $pdf_file_name);
				    }
				}
				else
				{
				    if($_REQUEST['bulk_print'] == '1'){
				        
				        $pdf_data['bulk_print'] = 1;
				        $pdf_data['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
				        $pdf_data['clientid'] = $clientid;
				        
				        $files = $this->generate_pdf($pdf_data, "HeInvoice", $template_files, "P");
				        
				        return $files;
				        exit();
				    }
				    else
				    {
						$this->generate_pdf($pdf_data, "HeInvoice", $template_files, "P");
				    }
				}
			}
		}

		public function generateCSV($data, $filename = 'export.csv', $delimiter = null, $enclosure = null )
		{
			$file = fopen('php://output', 'w');
			
			/*
			 * ispc-1866
			 * http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files/1648671#1648671
			 * echo "\xEF\xBB\xBF"; // UTF-8 BOM
			 * 
			 * http://stackoverflow.com/questions/4348802/how-can-i-output-a-utf-8-csv-in-php-that-excel-will-read-properly
			 * mb_convert_encoding($csv, 'UTF-16LE', 'UTF-8');
			 * 
			 * http://stackoverflow.com/questions/14933929/php-converting-utf-8-string-to-ansi
			 * $csv = iconv("UTF-8", "Windows-1252", $csv);
			 */
			//echo "\xEF\xBB\xBF"; // UTF-8 BOM
			$tab = chr(9); // \t
			$space = chr(32); // space
			$comma = chr(44); // ,
			$semicolon = chr(59); // ;
			/*
			if ("Rechnungsjournal_v2.csv" == $filename){
				$delimiter = $comma;
			}else{
				$delimiter = $semicolon;
			}
			*/
			if (is_null($delimiter)) {
    			$delimiter = $comma; 
			}
			
			if (is_null($enclosure)) {
			    $enclosure = '"';
			}
			
			foreach($data as $key => $patient_data)
			{
// 			fputcsv($file, array(''));
// 			fputcsv($file, array(strtoupper(utf8_encode($symptom))));
				foreach($patient_data as $ipid => $values)
				{
					//if ("Rechnungsjournal_v2.csv" == $filename){
						foreach($values as $k => $v){
// 							$v = str_replace($delimiter, $space, $v);
							$values[$k] = iconv("UTF-8", "Windows-1252", $v);
						}
					//}
					fputcsv($file, $values, $delimiter, $enclosure);
				}
			}
			header("Pragma: public");
			header("Expires: 0");
			header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
			header("Content-Type: application/force-download");
			header("Content-dType: application/octet-stream");
			header("Content-type: application/vnd.ms-excel; charset=utf-8");
			header("Content-Disposition: attachment; filename=" . $filename);
			exit;
		}
		
		
		public function generateTXT($clientid, $data, $export_type = "sap_txt", $filename = 'export.txt')
		{ 
// 		    dd($data);
		    // ISPC-2331 Ancuta 05.03.2019
		    // We get the revenue account and dat from client
		    // 05.03.2019
		    $clientinfo = Client::getClientDataByid($clientid);
		    if( ! empty($clientinfo)){
		        $client_data = $clientinfo[0];
		    }
		    
		    if( ! empty($client_data['rlp_books_end_day']) && !empty($client_data['rlp_books_end_month'])){
		        $current_books_end = date("Y-m-d",strtotime(date('Y').'-'.$client_data['rlp_books_end_month'].'-'.$client_data['rlp_books_end_day']));
		    }

		    if( ! empty($client_data['rlp_past_revenue'])){
		        $client_past_revenue = $client_data['rlp_past_revenue'];
		    }
		    //ISPC-2171 Ancuta 08.01.2020
		    if( ! empty($client_data['rlp_document_header_txt'])){
		        $client_document_header_txt = $client_data['rlp_document_header_txt'];
		    }
		    // --
		    
		    $current_date = date('Y-m-d');
		    $current_year = date('Y');
		    $last_year = date('Y') - 1;
            //--
            
 
		    
		    
		    
            // ISPC-2171 Ancuta Comment form 14.11.2019    
	        $client_hospiz_hi_cont = ! empty($client_data['hospiz_hi_cont']) ? $client_data['hospiz_hi_cont'] : "";
	        $client_hospiz_pv_cont = ! empty($client_data['hospiz_pv_cont']) ? $client_data['hospiz_pv_cont'] : "";
	        $client_hospiz_const_center = ! empty($client_data['hospiz_const_center']) ? $client_data['hospiz_const_center'] : "";
		    
		    $modules = new Modules();
	        $hospiz_invoice_export = 0;
		    if($modules->checkModulePrivileges("201", $clientid)) // Check if client has hospiz invoices  
		    {
		        $hospiz_invoice_export = 1;
		    }
		    
		    // --
		    
		    
		    
		    
		    
			// ISPC-2171
			//get sap data for export
			$sap_obj = new SapExcelTemplate();
			$sap_data = $sap_obj->grab_sap_export_data();
			
			$header_lines = array();
			$invoices_lines = array();
			foreach($sap_data as $sdata=>$sval){
				if($sval['line'] == 0 ){
					$header_lines[$sval['line'].'_'.$sval['nr'].'_'.$sval['field']] = $sval;
				} 
			}
			
			$text = "";
			$text .= "header";
			$excel_header_lines = array_keys($header_lines);

			$header_date = date("Ymd");
			$header_values_substitute = array();
			
			$header_values_substitute['0_1_STYPE'] = "0";// $header_values_substitute['5_1'] = "0";
			$header_values_substitute['0_2_GROUP'] = "0001-ISPCBEL";//"0001-SAPVBEL";[ISPC-2171- Ancuta 27.10.2020- change From "0001-SAPVBEL"  to   "0001-ISPCBEL" ] // $header_values_substitute['6_2'] = "0001-SAPVBEL";
// 			$header_values_substitute['0_2_GROUP'] = "0001-ISPCDEB"; // "0001-SAPVBEL" to "0001-ISPCDEB" - ISPC-2171 Lore 19.03.2020 
			
			$header_values_substitute['0_3_MANDT'] = "101";//$header_values_substitute['7_3'] = "303";
			$header_values_substitute['0_4_USNAM'] = "WF-BATCH";//$header_values_substitute['8_4'] = "WF-BATCH";
			$header_values_substitute['0_5_START'] = "00000000";//$header_values_substitute['9_5'] = $header_date;
			$header_values_substitute['0_6_XKEEP'] = "X";//$header_values_substitute['10_6'] = "X";
			$header_values_substitute['0_7_NODATA'] = "";//$header_values_substitute['11_7'] = "";
			
			
			
			$ident = "";
			$padd_char = " ";

			// create file header
			foreach($sap_data as $k => $sap_rows)
			{
				if($sap_rows['type']=='DATS'){
// 					$padd_char = "0";
					$padd_char = " ";
				}
				else { // ... ,CHAR, CHAR8, CLNT, CUKY,	DATS, LANG, UNIT < all types from file
					$padd_char = " ";
				}
				
				
// 				$ident = $sap_rows['line'].'_'.$sap_rows['nr'];

				$ident = $sap_rows['line'].'_'.$sap_rows['nr'].'_'.$sap_rows['field'];
				
				if(array_key_exists($ident,$header_values_substitute))
				{
					if(strlen($header_values_substitute[$ident])>0)
					{
			 			$header_values[] = str_pad($header_values_substitute[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT); 
					} else {
			 			$header_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT); 
					}
				}
			}

			$text = "";
			$text .= implode("",$header_values);

			
			$padding_left_0fielsd = array('1_10_BELNR','2_114_NEWKO','3_114_NEWKO','3_16_KOSTL');
			
			
			//create invoice lines
			$invoice_values = array();
			$exported_invoices = array();
			foreach($data as $invoice_key => $inv_data_array)
			{
				foreach($inv_data_array as $ipid=>$inv_data){
				    
				    // ISPC-2331 Ancuta 05.03.2019
				    $revenu_account  = "406503"; 
 
				    $old_invoice = 0 ;
				    if( isset($current_books_end) 
				        && $current_date > $current_books_end 
			            && (date("Y",strtotime($inv_data['invoice_start'])) < $current_year && date("Y",strtotime($inv_data['invoice_end'])) < $current_year)  
                    )
				    {
				        $old_invoice = 1 ;
                        $revenu_account  = $client_past_revenue; 
				    }
				    // --
				    
					//$inv_data['invoice_date'] = "2018-02-26 00:00:00";
					$ident = "";
					// first line
					$invoice_substitution['1_1_STYPE'] = "1";
					$invoice_substitution['1_2_TCODE'] = "FB01";// fix - hardcoded
					$invoice_substitution['1_3_BLDAT'] = date("dmY",strtotime($inv_data['invoice_date']));
					$invoice_substitution['1_4_BLART'] = "FI"; // fix - hardcoded
					$invoice_substitution['1_5_BUKRS'] = "0001"; // fix - hardcoded
					$invoice_substitution['1_6_BUDAT'] = date("dmY",strtotime($inv_data['invoice_end']));
					$invoice_substitution['1_7_MONAT'] = date("m",strtotime($inv_data['invoice_date']));
					$invoice_substitution['1_8_WAERS'] = "EUR";
					$invoice_substitution['1_10_BELNR'] = $inv_data['invoice_number'];
					$invoice_substitution['1_12_XBLNR'] = $inv_data['invoice_number'];
					$invoice_substitution['1_14_BKTXT'] = "SAPV-SP";
					// ISPC-2171 Ancuta 08.01.2020
					if(!empty($client_document_header_txt)){
					    $invoice_substitution['1_14_BKTXT'] = $client_document_header_txt;
					}
					// -- 
					$invoice_substitution['1_18_XMWST'] = "X";
					
					
					// second line
					$invoice_substitution['2_1_STYPE'] = "2";
					$invoice_substitution['2_2_TBNAM'] = "BBSEG";
					$invoice_substitution['2_3_NEWBS'] = $inv_data['storno'] != 1 ? "01" : "11";// ISPC-2171, comment 05/Jun/18, change only for storno , @ancuta
					$invoice_substitution['2_7_WRBTR'] = $inv_data['invoice_amount'];
					//$invoice_substitution['2_34_ZUONR'] = $inv_data['invoice_number'];
					//ISPC-2171 Lore 10.06.2020
					if( $inv_data['storno'] == 1){
					   $invoice_substitution['2_34_ZUONR'] = $inv_data['storned_inv_number'];
					} else {
					   $invoice_substitution['2_34_ZUONR'] = $inv_data['invoice_number'];
					}
					
					
/* 					//ISPC-2171 Lore + Ancuta 18.02.2020
					if( $inv_data['storno'] == 1){
    					$invoice_substitution['2_35_FKONT'] = $inv_data['invoice_number'];
					} */

					
					
// 					$invoice_substitution['2_37_SGTXT'] = "*".$inv_data['last_name'].", ".$inv_data['first_name']." - ".$inv_data['birthd']." - ".date("m",strtotime($inv_data['invoice_start']))."/".date('Y',strtotime($inv_data['invoice_start']));
					$v = "*";
// 					$v .= $inv_data['last_name'];
// 					$v .= iconv("UTF-8", "Windows-1252", $inv_data['last_name']);
// 					$v .= mb_strtoupper($inv_data['last_name'], 'UTF-8');
					$v .= utf8_decode($inv_data['last_name']);
					$v .= ", ";
					//$v .= $inv_data['first_name'];
// 					$v .= iconv("UTF-8", "Windows-1252", $inv_data['first_name']);
// 					$v .= mb_strtoupper($inv_data['first_name'], 'UTF-8');
					$v .= utf8_decode($inv_data['first_name']);
					$v .= " - ";
					$v .= $inv_data['birthd'];
					$v .= " - ";
					$v .= date("m",strtotime($inv_data['invoice_start']))."/".date('Y',strtotime($inv_data['invoice_start']));
					$invoice_substitution['2_37_SGTXT'] = $v;
					
					
					$invoice_substitution['2_114_NEWKO'] = $inv_data['debitor_number'];
					$invoice_substitution['2_146_XREF1'] = $inv_data['insurance_no'];
// 					$invoice_substitution['2_147_XREF2'] = mb_strtoupper($inv_data['last_name'], 'UTF-8');
					$invoice_substitution['2_147_XREF2'] = strtoupper(utf8_decode($inv_data['last_name']));;

					// third line
					$invoice_substitution['3_1_STYPE'] = "2";
					$invoice_substitution['3_2_TBNAM'] = "BBSEG";
					$invoice_substitution['3_3_NEWBS'] = $inv_data['storno'] != 1 ? "50" : "40";//"50";
					$invoice_substitution['3_7_WRBTR'] = $inv_data['invoice_amount'];
					$invoice_substitution['3_11_MWSKZ'] = "00"; // FIX
					
					if($hospiz_invoice_export == '1'){
					   $invoice_substitution['3_16_KOSTL'] = $client_hospiz_const_center; //ISPC-2171- Changed by ancuta - to client setting  if hospiz invoices
					} else{
					   $invoice_substitution['3_16_KOSTL'] = "901400"; // FIX
					}
					
					
                    $y = "";
// 					$invoice_substitution['3_34_ZUONR'] = $inv_data['last_name'].", ".$inv_data['first_name'];
//                     $y .= $inv_data['last_name'];
                    $y .= utf8_decode($inv_data['last_name']);
                    $y .= ", ";
//                     $y .= $inv_data['first_name'];
                    $y .= utf8_decode($inv_data['first_name']);
					$invoice_substitution['3_34_ZUONR'] = $y;
					
					
					
// 					$invoice_substitution['3_37_SGTXT'] = "*".$inv_data['last_name'].", ".$inv_data['first_name']." - ".$inv_data['birthd']." - ".date("m",strtotime($inv_data['invoice_start']))."/".date('Y',strtotime($inv_data['invoice_start']));
					$h = "*";
// 					$h .=$inv_data['last_name'];
// 					$h .= mb_strtoupper($inv_data['last_name'], 'UTF-8');
					$h .= utf8_decode($inv_data['last_name']);
					$h .=", ";
// 					$h .=$inv_data['first_name'];
// 					$h .= mb_strtoupper($inv_data['first_name'], 'UTF-8');
					$h .= utf8_decode($inv_data['first_name']);
					$h .=" - ";
					$h .=$inv_data['birthd'];
					$h .=" - ";
					$h .=date("m",strtotime($inv_data['invoice_start']))."/".date('Y',strtotime($inv_data['invoice_start']));
					$invoice_substitution['3_37_SGTXT'] = $h;
					
					if($hospiz_invoice_export == '1'){
					    if($old_invoice ==1){ //TODO-4014 Ancuta 30.03.2021
					        $invoice_substitution['3_114_NEWKO'] = $revenu_account;
					    } else{
					        
    					    if($inv_data['private_patient'] == "1"){
        					   $invoice_substitution['3_114_NEWKO'] = $client_hospiz_pv_cont; //ISPC-2171- Changed by ancuta - to client setting  if hospiz invoices- and patient is private
    					    } else{
        					   $invoice_substitution['3_114_NEWKO'] = $client_hospiz_hi_cont; //ISPC-2171- Changed by ancuta - to client setting  if hospiz invoices
    					    }
					    }
					}else{
					   $invoice_substitution['3_114_NEWKO'] = $revenu_account; //"406503";// FIX, $inv_data['debitor_number']; // ISPC-2331 Ancuta 05.03.2019
					}
					
					
					$invoice_substitution['3_146_XREF1'] = $inv_data['insurance_no'];
// 					$invoice_substitution['3_147_XREF2'] = mb_strtoupper($inv_data['last_name'], 'UTF-8'); //strtoupper($inv_data['last_name']);
					$invoice_substitution['3_147_XREF2'] = strtoupper(utf8_decode($inv_data['last_name']));
					

					foreach($sap_data as $k => $sap_rows){
						if($sap_rows['value_length'] > 0){
							if($sap_rows['type']=='DATS'){
								$padd_char = "0";
							}
							else 
							{ // ... ,CHAR, CHAR8, CLNT, CUKY,	DATS, LANG, UNIT < all types from file
								$padd_char = " ";
							}
							
// 							$ident = $sap_rows['line'].'_'.$sap_rows['nr'];
							$ident = $sap_rows['line'].'_'.$sap_rows['nr'].'_'.$sap_rows['field'];
		
							if(strlen($invoice_substitution[$ident]) > $sap_rows['value_length']){
							    $invoice_substitution[$ident] = substr($invoice_substitution[$ident],0,$sap_rows['value_length']);
							}
							
							
							if(!array_key_exists($ident, $header_values_substitute)){
								if($sap_rows['nr'] =="1"){
// 									$invoice_values[] = "\n";
								}
								if($sap_rows['line'] == "1" && $sap_rows['nr'] == "1"){
								    
// 								    $invoice_values[] = "\r\n";// Commented on 11.12.2019 Ancuta 
								    $invoice_values[] = "\r\n";
								}
								
								if( ($sap_rows['line'] == "2" && $sap_rows['nr'] == "1")
                                    || ($sap_rows['line'] == "3" && $sap_rows['nr'] == "1")
								    
								    ){
								    $invoice_values[] = "\r\n";
								}
								if(! in_array($ident,$padding_left_0fielsd)){
									if(strlen($invoice_substitution[$ident])>0)
									{
										$invoice_values[] = str_pad($invoice_substitution[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT);
									} else {
										$invoice_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT);
									}
								} else{
									
									$padd_char = " ";
									 
									if(strlen($invoice_substitution[$ident])>0)
									{
										$invoice_values[] = str_pad($invoice_substitution[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_LEFT);
									} else {
										$invoice_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_LEFT);
									}
								}
							
							}
						}
					}
					
					
					$exported_invoices[$inv_data['invoice_type']][] = $inv_data['invoice_id'];
				}
			}
			
			
			$text .=implode("", $invoice_values);
			
			// save files and exported invoices
			if(!empty($text) && !empty($exported_invoices)){
			    
    			$ins_inv = new InvoicejournalExportFiles();
    			$ins_inv->clientid = $clientid;
    			$ins_inv->export_type = $export_type;
//     			$ins_inv->export_content = $text;
    			$ins_inv->export_content = serialize($text);
    			$ins_inv->export_invoices = serialize($exported_invoices);
    			$ins_inv->save();
    			$ins_id = $ins_inv->id;
    			
    			if($ins_id){
    			    $result = array();
    			    foreach($exported_invoices as $invoice_type => $exinvoices){
    			        
    			        foreach($exinvoices as $invoice_id){
    			            
        			        $result [] = array(
                                'clientid' => $clientid,
                                'export_type' => $export_type,
                                'export_file_id' => $ins_id,
                                'invoice_type' => $invoice_type,
                                'invoice' => $invoice_id
        			        ); 
    			        }
    			    }

    			    if(count($result) > 0)
    			    {
    			        //insert many records with one query!!
    			        $collection = new Doctrine_Collection('InvoicejournalExportInvoices');
    			        $collection->fromArray($result);
    			        $collection->save();
    			    }
    			}
			}
			
			$file_time = date("dmY_Hm");
			$client_name = Pms_CommonData::filter_filename($client_data['client_name'], true);
			$filename_text ="SAP_".$client_name.'_'.$file_time;
			$filename = $filename_text.'.txt';
			
			header('Content-Encoding: UTF-8');
			header('Content-type: text/plain; charset=utf-8; codepage="4110"');
			header("Content-Disposition: attachment; filename=" . $filename);
			$content = $text;
			
			echo $content;
			
		}
		
		/**
		 * @Auth Ancuta
		 * ISPC-2452
		 * 20.09.2019
		 * ::NOT used - OLD version ( 06.11.2019 )
		 * @param unknown $clientid
		 * @param unknown $data
		 * @param string $export_type
		 * @param string $filename
		 */
		public function generate_sap_ii_txt_v1($clientid, $data, $export_type = "sap_ii_txt", $filename = 'export.txt')
		{
		    $clientinfo = Client::getClientDataByid($clientid);
		    if( ! empty($clientinfo)){
		        $client_data = $clientinfo[0];
		    }
		    $rlp_hi_account_number = ! empty($client_data['rlp_hi_account_number']) ? $client_data['rlp_hi_account_number'] : "";
		    $rlp_pv_account_number = ! empty($client_data['rlp_pv_account_number']) ? $client_data['rlp_pv_account_number'] : "";
		    $rlp_terms_of_payment  = ! empty($client_data['rlp_terms_of_payment'])  ? $client_data['rlp_terms_of_payment'] : "";
		
		    $current_date = date('Y-m-d');
		    $current_year = date('Y');
		    $last_year = date('Y') - 1;
		    //--
		
		    // for each patient check if data was changed from the last exoport
		    //  get exported invoices
		    $InvoicejournalExportInvoices_obj = new InvoicejournalExportInvoices();
		    $all_exported_inv_array = $InvoicejournalExportInvoices_obj->get_all_exported_invoices($clientid,array($export_type));
		
		    $exported_inv_info = array();
		    $overall_exported_invoices= array();
		    $exported_informations = array();
		    foreach($all_exported_inv_array as  $k => $ij_export){
		        $overall_exported_invoices[] = $ij_export['invoice'];
		        $exported_inv_info[$ij_export['invoice']] = unserialize($ij_export['invoice_info']);
		        $exported_informations[] = unserialize($ij_export['invoice_info']);
		    }
		    $exported = array();
		    foreach($exported_informations as $kl=>$linedata){
   		        $exported['db']['healthinsurance'][]   = $linedata['health_insurance']['name'].' '.$linedata['health_insurance']['street'].' '.$linedata['health_insurance']['zip'].' '.$linedata['health_insurance']['city'];
		        $exported['db']['patients'][]          = $linedata['ipid'].'-'.$linedata['patient']['last_name'].' '.$linedata['patient']['first_name'].' '.$linedata['patient']['street'].' '.$linedata['patient']['zip'].' '.$linedata['patient']['city'];
		    }

		    $exported['db']['healthinsurance'] = array_values(array_unique($exported['db']['healthinsurance']));
		    $exported['db']['patients'] = array_values(array_unique($exported['db']['patients']));
	    

		    
		    // 		    dd($exported_inv_info);
		    // la fiecare invoice  trebuie luat pacientul - si trebuie verificat daca s-a modificat  pacientul, sau healthinsurance
		    // last_name, first_name,street1,zip,city
		    //
		
		
		
		    // ISPC-2171
		    //get sap data for export
		    $sap_obj = new SapExcelTemplate();
		    $sap_data = $sap_obj->grab_sap_ii_export_data();
		
		    $header_lines = array();
		    $invoices_lines = array();
		    foreach($sap_data as $sdata=>$sval){
		    if($sval['line'] == 0 ){
		        $header_lines[$sval['line'].'_'.$sval['nr'].'_'.$sval['field']] = $sval;
		    }
		    }
		    // 			dd($header_lines);
		    	
		    $text = "";
		    $text .= "header";
		        $excel_header_lines = array_keys($header_lines);
		
		        $header_date = date("Ymd");
		        $header_values_substitute = array();
		        	
		        $header_values_substitute['0_1_STYPE'] = "0";
				$header_values_substitute['0_2_GROUP'] = "0001-ISPCDEB"; 
		        $header_values_substitute['0_3_MANDT'] = "101";
		        $header_values_substitute['0_4_USNAM'] = "WF-BATCH";
		        $header_values_substitute['0_5_START'] = "00000000";
		        $header_values_substitute['0_6_XKEEP'] = "X";
		        $header_values_substitute['0_7_NODATA'] = "";
		        	
		        $ident = "";
		        $padd_char = " ";
		
		        // create file header
		        foreach($sap_data as $k => $sap_rows)
		        {
		            if($sap_rows['type']=='DATS'){
		                // 					$padd_char = "0";
		                $padd_char = " ";
		            }
		            else { // ... ,CHAR, CHAR8, CLNT, CUKY,	DATS, LANG, UNIT < all types from file
		                $padd_char = " ";
		            }
		
		
		            // 				$ident = $sap_rows['line'].'_'.$sap_rows['nr'];
		
		            $ident = $sap_rows['line'].'_'.$sap_rows['nr'].'_'.$sap_rows['field'];
		
		            if(array_key_exists($ident,$header_values_substitute))
		            {
		                if(strlen($header_values_substitute[$ident])>0)
		                {
		                    $header_values[] = str_pad($header_values_substitute[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT);
		                } else {
		                    $header_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT);
		                }
		            }
		        }
		        $text = "";
		        $text .= implode("",$header_values);
		
		
		        	
		        $padding_left_0fielsd = array('1_10_BELNR','2_114_NEWKO','3_114_NEWKO','3_16_KOSTL');
		        	
		        //create invoice lines
		        $invoice_values = array();
		        $exported_invoices = array();
		        	
		        	
		        	
		        $export_invoices_info = array();
		        $current_export_patients = array();
		        foreach($data as $invoice_key => $inv_data_array)
		        {
		            foreach($inv_data_array as $ipid=>$inv_data){
		
		                //$inv_data['invoice_date'] = "2018-02-26 00:00:00";
		                $ident = "";
					$patient_ident="";
					$patient_ident =  $inv_data['ipid'].'-'.$inv_data['patient_last_name'].' '.$inv_data['patient_first_name'].' '.$inv_data['patient_street'].' '.$inv_data['patient_zip'].' '.$inv_data['patient_city'];
					
					$healthinsurance_ident = "";
					$healthinsurance_ident = $inv_data['health_insurance_company'].' '.$inv_data['health_insurance_street'].' '.$inv_data['health_insurance_zip'].' '.$inv_data['health_insurance_city'];
					
					
					
		                // first line
		                // 					$invoice_substitution['1_1_stype'] = "/";
		                $invoice_substitution['1_1_STYPE'] = "1";
		                	
		                // XD01 for a new customer record. New means he was never ever exported before.
		                // XD02 for a changed customer, when customer data was changed after the last XD01 or XD02
						$patient_generated[$inv_data['id']] = 0 ;
						if( $inv_data['private_patient'] == "1" && (in_array($patient_ident,$exported['current']['patients']) || in_array($patient_ident,$exported['db']['patients']))  ){
					    	$patient_generated[$inv_data['id']] = 1; 
						}
					
						$health_insurance_generated[$inv_data['id']] = 0 ;
						if( $inv_data['private_patient'] != "1" && (in_array($healthinsurance_ident,$exported['current']['healthinsurance']) || in_array($healthinsurance_ident,$exported['db']['healthinsurance']))  ){
					    	$health_insurance_generated[$inv_data['id']] = 1; 
						}		
					
		                $XD01 = false;
		                $XD02 = false;
						/* if( ! in_array($inv_data['invoice_id'],$overall_exported_invoices) && !in_array($inv_data['ipid'],$current_export_patients) ){
		                    // never exported - so is considered as NEW
		                    $XD01 = true;
						} */
					
						if($inv_data['private_patient'] == "1"){
					    	if($patient_generated[$inv_data['id']] == 0){
    						   $XD01 = true;
					    	}
		                    	
						} else{
					    	if($health_insurance_generated[$inv_data['id']] == 0){
    					 	  $XD01 = true;
					    	}
		                }
		

						if($inv_data['private_patient'] == "1"){
					    	if(!in_array($patient_ident,$exported['current']['patients'])){
    					  	  $exported['current']['patients'][] = $patient_ident;
					   		}
						}else{
					    	if(!in_array($healthinsurance_ident,$exported['current']['healthinsurance'])){
    					    	$exported['current']['healthinsurance'][] = $healthinsurance_ident;
					    	}
						}	
					
		                if($XD01){
		                    $invoice_substitution['1_2_TCODE'] = "XD01";
		                }else{
		                    $invoice_substitution['1_2_TCODE'] = "XD02";
		                }
		                	
		                	
		                //invoice -> health insurance: debitornumber  for health insurance
		                // invoice -> Privatversicherte: debitornumber  for patient
		                $invoice_substitution['1_3_KUNNR'] = $inv_data['debitor_number'];
		                	
		                //Buchungskreis 0001 fix
		                $invoice_substitution['1_4_BUKRS'] = '0001';
		                	
		                //verschiedene Kontengruppen stehen zur Auswahl, siehe Tabellenblatt Kontengruppen
		                //"Invoice -> health insurance: account number  for health insurance
		                //invoice -> Privatversicherte: account number  for patient
		                $ktokd="";
		                if($inv_data['private_patient'] == "1"){
		                    $invoice_substitution['1_8_KTOKD'] = $rlp_pv_account_number;
		                    $ktokd = $rlp_pv_account_number;
		                } else{
		                    $invoice_substitution['1_8_KTOKD'] = $rlp_hi_account_number;
		                    $ktokd = $rlp_hi_account_number;
		                    	
		                }
		
		                // second line
		                $invoice_substitution['2_1_STYPE'] = "2";
		                // 					$invoice_substitution['2_2_tbnam'] = "/";
		                $invoice_substitution['2_2_TBNAM'] = "BKNA1";
		                //"Herr" for male patients, "Frau" for female Patients
   						//b) the customer saw that we fill the field BKNA1-ANRED also for health insurances with "Frau". please leave empty for helath insurances.
						if($inv_data['private_patient'] == "1"){
		                	$invoice_substitution['2_3_ANRED'] = $inv_data['patient_gender_title'];
						}  else {
    						$invoice_substitution['2_3_ANRED'] = "";
						}
		
		                // Invoice -> health insurance: Name of the health insurance
		                // invoice -> Privatversicherte: SURNAME, FIRSTNAME of patient
		                if($inv_data['private_patient'] == "1"){
		                    $invoice_substitution['2_4_NAME1'] = utf8_decode($inv_data['patient_last_name']).', '.utf8_decode($inv_data['patient_first_name']);
		                } else{
    						$invoice_substitution['2_4_NAME1'] =  !empty($inv_data['health_insurance_company']) ?  utf8_decode($inv_data['health_insurance_company']) : "";
//     					$invoice_substitution['2_4_NAME1'] = $inv_data['health_insurance_company'];
		                }
		                	
		                // Invoice -> health insurance: Name of the health insurance
		                // invoice -> Privatversicherte: SURNAME of patient
		                if($inv_data['private_patient'] == "1"){
		                    $invoice_substitution['2_5_NAME2'] = utf8_decode($inv_data['patient_last_name']);
		                } else{
    						$invoice_substitution['2_5_NAME2'] = !empty($inv_data['health_insurance_company']) ? utf8_decode($inv_data['health_insurance_company']) : "";
//     					$invoice_substitution['2_5_NAME2'] = $inv_data['health_insurance_company'];
		                }
		                	
		                	
		                // Invoice -> health insurance: Name of the health insurance
		                // Invoice -> Privatversicherte: Firstname  of patient
		                if($inv_data['private_patient'] == "1"){
		                    $invoice_substitution['2_6_NAME3'] = utf8_decode($inv_data['patient_first_name']);
		                } else{
    						$invoice_substitution['2_6_NAME3'] = "";
//     					$invoice_substitution['2_6_NAME3'] = utf8_decode($inv_data['health_insurance_company']);
//     					$invoice_substitution['2_6_NAME3'] = $inv_data['health_insurance_company'];
		                }
		
		                	
		                	
		                $invoice_substitution['2_7_NAME4'] = '/';
		
		                //Surname, Firstname (Attention: max length 10!)
				   		//a) Fill the field BKNA1-SORTL with same content as field BKNA1-NAME1
   						if($inv_data['private_patient'] == "1"){
		                	$invoice_substitution['2_8_SORTL'] = utf8_decode($inv_data['patient_last_name']).','.utf8_decode($inv_data['patient_first_name']);
   						} else {
   					    	$invoice_substitution['2_8_SORTL'] = !empty($inv_data['health_insurance_company']) ?  utf8_decode($inv_data['health_insurance_company']) : "";
   						}					   					
		                 
		
		                // Invoice -> health insurance: street of health insurance
		                // Invoice -> Privatversicherte: street  of patient
		                if($inv_data['private_patient'] == "1"){
   					    	$invoice_substitution['2_9_STRAS'] = utf8_decode($inv_data['patient_street']);
		                } else{
   					   		$invoice_substitution['2_9_STRAS'] = !empty($inv_data['health_insurance_street']) ? utf8_decode($inv_data['health_insurance_street']) : "";
//    					    $invoice_substitution['2_9_STRAS'] = $inv_data['health_insurance_street'];
		                }
		
		
		                //Invoice -> health insurance: city of health insurance
		                //Invoice -> Privatversicherte: city  of patient
		                if($inv_data['private_patient'] == "1"){
   					    	$invoice_substitution['2_11_ORT01'] = utf8_decode($inv_data['patient_city']);
		                } else{
   					    	$invoice_substitution['2_11_ORT01'] = !empty($inv_data['health_insurance_city']) ? utf8_decode($inv_data['health_insurance_city']) : "";
//    					    $invoice_substitution['2_11_ORT01'] = $inv_data['health_insurance_city'];
		                }
		
		
		                //Invoice -> health insurance: zip of health insurance
		                //invoice -> Privatversicherte: zip  of patient
		                if($inv_data['private_patient'] == "1"){
		                    $invoice_substitution['2_12_PSTLZ'] = $inv_data['patient_zip'];
		                } else{
   					    	$invoice_substitution['2_12_PSTLZ'] = !empty($inv_data['health_insurance_zip']) ? $inv_data['health_insurance_zip'] : "";
		                }
		                	
		                	
		                //country key of invoice recipient from tab "Länderschlüssel"
		                $invoice_substitution['2_15_LAND1'] = 'DE';
		
		                // Hardcoded
		                $invoice_substitution['2_17_SPRAS'] = 'DE';
		
		
		                //Invoice -> health insurance: phone number  of the health insurance
		                //invoice -> Privatversicherte: phone number  of patient
		                if($inv_data['private_patient'] == "1"){
   					    	$invoice_substitution['2_19_TELF1'] = !empty($inv_data['patient_phone']) ? $inv_data['patient_phone'] : "";
		                } else{
   					    	$invoice_substitution['2_19_TELF1'] = !empty($inv_data['health_insurance_phone']) ? $inv_data['health_insurance_phone'] : "" ;
		                }
		
		                //hardcoded
		                $invoice_substitution['2_26_BEGRU'] = 'Z001';
		
		                //hardcoded
		                $invoice_substitution['2_124_SENDE'] = '/';
		
		                // Line 3
		
		                //hardcoded
		                $invoice_substitution['3_1_STYPE'] = '2';
		                	
		                //hardcoded
		                // 					$invoice_substitution['3_2_tbnam'] = '/';
		                $invoice_substitution['3_2_TBNAM'] = 'BKNB1';
		
		                if($XD01){
		                    	
		                    // if ktokd 112, 113, 114, 115 , 116 then  "120000"
		                    // if ktokd 512, 513, 514, 515 ,  516 then "120200"
		                    // Important:
		                    // ONLY FOR XD01 messages. If XD02 message then  "/"
		                    $akont="";
		                    if(in_array($ktokd,array('112', '113', '114', '115' , '116'))){
		                        $akont = "120000";
		                    }elseif(in_array($ktokd,array('512', '513', '514', '515',  '516'))){
		                        $akont = "120200";
		                    }
		                    $invoice_substitution['3_3_AKONT'] = $akont;
		                } else{
		                    //hardcoded
		                    $invoice_substitution['3_3_AKONT'] = '/';
		                }
		                	
		                //Hardcoded - 0009 (fix)
						// c) field: BKNB1-ZUAWA . they assume an error due to their wrong specs in the excel file. plz correct the fix value from 0009 to 009
   						$invoice_substitution['3_4_ZUAWA'] = '009';
		
		                //Hardcoded - Z001 (fix)
		                $invoice_substitution['3_9_BEGRU'] = 'Z001';
		                	
		                //Zahlungsbedingung laut Tabelle
		                //create a new field in client data for this. It is a hard value per client. New field name "Zahlungsbedingung"
		                $invoice_substitution['3_14_ZTERM'] = $rlp_terms_of_payment;
		                	
		                	
		                //Hardcoded - Wert "X" (fix)
		                $invoice_substitution['3_17_XZVER'] = 'X';
		                //Hardcoded - Wenn SEPA-Einzug vorhanden, Zahlweg "E" setzen, Sonst immer Zahlweg "U"
		                $invoice_substitution['3_19_ZWELS'] = 'U';
		
		                //Hardcoded
		                $invoice_substitution['3_68_SENDE'] = '/';
		                	
		                	
		                // line 4
		
		                //Hardcoded
		                $invoice_substitution['4_1_STYPE'] = '2';
		                //Hardcoded
		                $invoice_substitution['4_2_TBNAM'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_3_XDELE'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_4_BANKS'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_5_BANKL'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_6_BANKN'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_7_BKONT'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_8_BVTYP'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_9_XEZER'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_10_BANKA'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_14_SWIFT'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_22_KOINH'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_25_IBAN'] = '/';
		                //Hardcoded
		                $invoice_substitution['4_17_SENDE'] = '/';
		
		                // line 5
		                //Hardcoded
		                $invoice_substitution['5_1_STYPE'] = '2';
		                //Hardcoded
		                //    					$invoice_substitution['5_2_tbnam'] = '/';
		                $invoice_substitution['5_2_TBNAM'] = 'BKNB5';
		
		                //if ktokd 512, 513, 514, 515,  516 then "SZ"
		                //if ktokd 512, 513, 514, 515,  516 then  "KASS"
		                $mahna="";
		                if(in_array($ktokd,array('506', '512', '513', '514', '515', '520', '521'))){
		                    $mahna = "SZ";
		                }elseif(in_array($ktokd,array('106', '112', '113', '114', '115', '120', '121'))){
		                    $mahna = "KASS";
		                }
		                $invoice_substitution['5_3_MAHNA'] = $mahna;
		                $exxe[] = $invoice_substitution;
		
		                	
		                foreach($sap_data as $k => $sap_rows){
		                    if($sap_rows['value_length'] > 0){
		                        if($sap_rows['type']=='DATS'){
		                            $padd_char = "0";
		                        }
		                        else
		                        { // ... ,CHAR, CHAR8, CLNT, CUKY,	DATS, LANG, UNIT < all types from file
		                            $padd_char = " ";
		                        }
		                        	
		                        $ident = $sap_rows['line'].'_'.$sap_rows['nr'].'_'.$sap_rows['field'];
		                        	
		                        if(strlen($invoice_substitution[$ident]) > $sap_rows['value_length']){
		                            $invoice_substitution[$ident] = substr($invoice_substitution[$ident],0,$sap_rows['value_length']);
		                        }
		                        	
		                        	
		                        if(!array_key_exists($ident, $header_values_substitute)){
		                            if($sap_rows['nr'] =="1"){
		                                // 									$invoice_values[] = "\n";
		                            }
		                            if($sap_rows['line'] == "1" && $sap_rows['nr'] == "1"){
		
		                                $invoice_values[] = "\r\n";
		                                // 								    $invoice_values[] = "\r\n";
		                            }
		
		                            if( $sap_rows['line'] != 1 && $sap_rows['nr'] == "1" ){
		                                $invoice_values[] = "\r\n";
		                            }
		                            if(! in_array($ident,$padding_left_0fielsd)){
		
		                                if(strlen($invoice_substitution[$ident])>0)
		                                {
		                                    $invoice_values[] = str_pad($invoice_substitution[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT);
		                                } else {
		                                    $invoice_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT);
		                                }
		                            } else{
		                                	
		                                $padd_char = " ";
		
		                                if(strlen($invoice_substitution[$ident])>0)
		                                {
		                                    $invoice_values[] = str_pad($invoice_substitution[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_LEFT);
		                                } else {
		                                    $invoice_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_LEFT);
		                                }
		                            }
		                            	
		                        }
		                    }
		                }
		                	
		
		                $exported_invoices[$inv_data['invoice_type']][] = $inv_data['invoice_id'];
		                	
		                $export_invoices_info[$inv_data['invoice_id']]['ipid'] = $inv_data['ipid'];
		                $export_invoices_info[$inv_data['invoice_id']]['private'] = $inv_data['private_patient'] == "1" ? "1" : "0";
		                $export_invoices_info[$inv_data['invoice_id']]['patient']['last_name'] = $inv_data['patient_last_name'];
		                $export_invoices_info[$inv_data['invoice_id']]['patient']['first_name'] = $inv_data['patient_first_name'];
		                $export_invoices_info[$inv_data['invoice_id']]['patient']['street'] = $inv_data['patient_street'];
		                $export_invoices_info[$inv_data['invoice_id']]['patient']['zip'] = $inv_data['patient_zip'];
		                $export_invoices_info[$inv_data['invoice_id']]['patient']['city'] = $inv_data['patient_city'];
		                	
		                $export_invoices_info[$inv_data['invoice_id']]['health_insurance']['name'] = $inv_data['health_insurance_company'];
		                $export_invoices_info[$inv_data['invoice_id']]['health_insurance']['street'] = $inv_data['health_insurance_street'];
		                $export_invoices_info[$inv_data['invoice_id']]['health_insurance']['zip'] = $inv_data['health_insurance_zip'];
		                $export_invoices_info[$inv_data['invoice_id']]['health_insurance']['city'] = $inv_data['health_insurance_city'];
		            }
		        }
		        // 			dd($export_invoices_info);
		        $text .=implode("", $invoice_values);
		        // 			echo "<pre>";
		        // 			print_r($text);
		        // 			exit;
		        // 			dd($text);
		        	
		        // save files and exported invoices
		        if(!empty($text) && !empty($exported_invoices)){
		             
		            $ins_inv = new InvoicejournalExportFiles();
		            $ins_inv->clientid = $clientid;
		            $ins_inv->export_type = $export_type;
		            //     			$ins_inv->export_content = $text;
		            $ins_inv->export_content = serialize($text);
		            $ins_inv->export_invoices = serialize($exported_invoices);
		            $ins_inv->save();
		            $ins_id = $ins_inv->id;
		             
		            if($ins_id){
		                $result = array();
		                foreach($exported_invoices as $invoice_type => $exinvoices){
		                     
		                    foreach($exinvoices as $invoice_id){
		                         
		                        $result [] = array(
		                            'clientid' => $clientid,
		                            'export_type' => $export_type,
		                            'export_file_id' => $ins_id,
		                            'invoice_type' => $invoice_type,
		                            'invoice' => $invoice_id,
		                            'invoice_info' => serialize($export_invoices_info[$invoice_id])
		                        );
		                    }
		                }
		
		                if(count($result) > 0)
		                {
		                    //insert many records with one query!!
		                    $collection = new Doctrine_Collection('InvoicejournalExportInvoices');
		                    $collection->fromArray($result);
		                    $collection->save();
		                }
		            }
		        }
		        header('Content-Encoding: UTF-8');
		        header('Content-type: text/plain; charset=utf-8; codepage="4110"');
		        header("Content-Disposition: attachment; filename=" . $filename);
		        $content = $text;
		        	
		        echo $content;
		        	
		}
		/**
		 * @Auth Ancuta
		 * ISPC-2452
		 * Copy of generate_sap_ii_txt_v1
		 * 06.11.2019
		 * @param unknown $clientid
		 * @param unknown $data
		 * @param string $export_type
		 * @param string $filename
		 */
		public function generate_sap_ii_txt($clientid, $data, $export_type = "sap_ii_txt", $filename = 'export.txt', $post)
		{
		    $clientinfo = Client::getClientDataByid($clientid);
		    if( ! empty($clientinfo)){
		        $client_data = $clientinfo[0];
		    }
	        $rlp_hi_account_number = ! empty($client_data['rlp_hi_account_number']) ? $client_data['rlp_hi_account_number'] : "";
	        $rlp_pv_account_number = ! empty($client_data['rlp_pv_account_number']) ? $client_data['rlp_pv_account_number'] : "";
	        $rlp_terms_of_payment  = ! empty($client_data['rlp_terms_of_payment'])  ? $client_data['rlp_terms_of_payment'] : "";

	        $current_date = date('Y-m-d');
		    $current_year = date('Y');
		    $last_year = date('Y') - 1;
            //--
		    
		    // for each patient check if data was changed from the last exoport 
            //  get exported invoices
		    $InvoicejournalExportInvoices_obj = new InvoicejournalExportInvoices();
		    $all_exported_inv_array = $InvoicejournalExportInvoices_obj->get_all_exported_invoices($clientid,array($export_type));

		    $exported_inv_info = array();
		    $overall_exported_invoices= array();
		    $exported_informations = array();
		    foreach($all_exported_inv_array as  $k => $ij_export){
		        $overall_exported_invoices[] = $ij_export['invoice'];
		        $exported_inv_info[$ij_export['invoice']] = unserialize($ij_export['invoice_info']);
		        $exported_informations[] = unserialize($ij_export['invoice_info']);
		    } 
		    $exported = array();
		    foreach($exported_informations as $kl=>$linedata){
   		        $exported['db']['healthinsurance'][]           = trim($linedata['health_insurance']['debitor_number']).' '.trim($linedata['health_insurance']['name']).' '.trim($linedata['health_insurance']['street']).' '.trim($linedata['health_insurance']['zip']).' '.trim($linedata['health_insurance']['city']);
		        $exported['db']['patients'][]                  = $linedata['ipid'].'-'.trim($linedata['patient']['debitor_number']).' '.trim($linedata['patient']['last_name']).' '.trim($linedata['patient']['first_name']).' '.trim($linedata['patient']['street']).' '.trim($linedata['patient']['zip']).' '.trim($linedata['patient']['city']);
		        //ISPC-2452 - comment from 06.11.2019
		        $exported['db']['patients_ipids'][]            = $linedata['ipid'];
		        if($linedata['health_insurance']['debitor_number']){
    		        $exported['db']['healthinsurance_debitors'][]  = trim($linedata['health_insurance']['debitor_number']);
		        }
		    }
		    
		    
		    $exported['db']['healthinsurance'] = array_values(array_unique($exported['db']['healthinsurance']));
		    $exported['db']['patients'] = array_values(array_unique($exported['db']['patients']));
		    
		    $exported['db']['patients_ipids'] = array_values(array_unique($exported['db']['patients_ipids']));
    

// 		    dd($exported_inv_info);
		    // la fiecare invoice  trebuie luat pacientul - si trebuie verificat daca s-a modificat  pacientul, sau healthinsurance
		    // last_name, first_name,street1,zip,city
		    //
		    
		    
		    
			// ISPC-2171
			//get sap data for export
			$sap_obj = new SapExcelTemplate();
			$sap_data = $sap_obj->grab_sap_ii_export_data();
 
			$header_lines = array();
			$invoices_lines = array();
			foreach($sap_data as $sdata=>$sval){
				if($sval['line'] == 0 ){
					$header_lines[$sval['line'].'_'.$sval['nr'].'_'.$sval['field']] = $sval;
				} 
			}
// 			dd($header_lines);
			
			$text = "";
			$text .= "header";
			$excel_header_lines = array_keys($header_lines);

			$header_date = date("Ymd");
			$header_values_substitute = array();
			
			$header_values_substitute['0_1_STYPE'] = "0";
			$header_values_substitute['0_2_GROUP'] = "0001-ISPCDEB"; 
			$header_values_substitute['0_3_MANDT'] = "101";
			$header_values_substitute['0_4_USNAM'] = "WF-BATCH";
			$header_values_substitute['0_5_START'] = "00000000";
			$header_values_substitute['0_6_XKEEP'] = "X";
			$header_values_substitute['0_7_NODATA'] = "";
			
			$ident = "";
			$padd_char = " ";
 
			// create file header
			foreach($sap_data as $k => $sap_rows)
			{
				if($sap_rows['type']=='DATS'){
// 					$padd_char = "0";
					$padd_char = " ";
				}
				else { // ... ,CHAR, CHAR8, CLNT, CUKY,	DATS, LANG, UNIT < all types from file
					$padd_char = " ";
				}
				
				
// 				$ident = $sap_rows['line'].'_'.$sap_rows['nr'];

				$ident = $sap_rows['line'].'_'.$sap_rows['nr'].'_'.$sap_rows['field'];
				
				if(array_key_exists($ident,$header_values_substitute))
				{
					if(strlen($header_values_substitute[$ident])>0)
					{
			 			$header_values[] = str_pad($header_values_substitute[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT); 
					} else {
			 			$header_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT); 
					}
				}
			}
			$text = "";
			$text .= implode("",$header_values);

 
			
			$padding_left_0fielsd = array('1_10_BELNR','2_114_NEWKO','3_114_NEWKO','3_16_KOSTL');
			
			//create invoice lines
			$invoice_values = array();
			$exported_invoices = array();
			
			
			
			$export_invoices_info = array();
			$current_export_patients = array();
			foreach($data as $invoice_key => $inv_data_array)
			{
				foreach($inv_data_array as $ipid=>$inv_data){
				    // remove extra spaces for  identification data
				    //For pateint
				    $inv_data['debitor_number'] = trim($inv_data['debitor_number']);
				    $inv_data['patient_last_name'] = trim($inv_data['patient_last_name']);
				    $inv_data['patient_first_name'] = trim($inv_data['patient_first_name']);
				    $inv_data['patient_street'] = trim($inv_data['patient_street']);
				    $inv_data['patient_zip'] = trim($inv_data['patient_zip']);
				    $inv_data['patient_city'] = trim($inv_data['patient_city']);
				    
				    // for health insurance
				    $inv_data['health_insurance_company'] = trim($inv_data['health_insurance_company']);
				    $inv_data['health_insurance_street'] = trim($inv_data['health_insurance_street']);
				    $inv_data['health_insurance_zip'] = trim($inv_data['health_insurance_zip']);
				    $inv_data['health_insurance_city'] = trim($inv_data['health_insurance_city']);
				    
				    
					//$inv_data['invoice_date'] = "2018-02-26 00:00:00";
					$ident = "";
					$patient_ident="";
//					$patient_ident =  $inv_data['ipid'].'-'.$inv_data['patient_last_name'].' '.$inv_data['patient_first_name'].' '.$inv_data['patient_street'].' '.$inv_data['patient_zip'].' '.$inv_data['patient_city'];
					$patient_ident =  $inv_data['ipid'].'-'.$inv_data['debitor_number'].' '.$inv_data['patient_last_name'].' '.$inv_data['patient_first_name'].' '.$inv_data['patient_street'].' '.$inv_data['patient_zip'].' '.$inv_data['patient_city'];
					
					$healthinsurance_ident = "";
//					$healthinsurance_ident = $inv_data['health_insurance_company'].' '.$inv_data['health_insurance_street'].' '.$inv_data['health_insurance_zip'].' '.$inv_data['health_insurance_city'];					
					$healthinsurance_ident = $inv_data['debitor_number'].' '.$inv_data['health_insurance_company'].' '.$inv_data['health_insurance_street'].' '.$inv_data['health_insurance_zip'].' '.$inv_data['health_insurance_city'];
					
					// first line
// 					$invoice_substitution['1_1_stype'] = "/";
					$invoice_substitution['1_1_STYPE'] = "1";
                    // XD01 for a new customer record. New means he was never ever exported before.
                    // XD02 for a changed customer, when customer data was changed after the last XD01 or XD02
                    // CHANGE:: a debitor just needs to be exported once. and then again ONLY (with an XD02) if something did change!
                    
					// Check if debitor was ever exported

					// check if  ipid OR hi_debitor was sent. 
					// If ipid was NEVER sent - then  send ONCE with XD01
					// if ipid was sent - but data was NOT changed - DO not SEN
					// If ipid was sent - but data WAS changed - send again - with XDO2
					
					$XD01 = false;
					$XD02 = false;
					$export_current_invoice_debitor[$inv_data['id']] = 0;
					// For pateint:					
					if( $inv_data['private_patient'] == "1"){
    			        // Check if the pateint was sent before or in current export
					    if(in_array($inv_data['ipid'],$exported['db']['patients_ipids']) ||  in_array($inv_data['ipid'],$exported['current']['patients_ipids'])){
					        //If sent -  check if data was changed
					        if( ! in_array($patient_ident,$exported['current']['patients']) &&  ! in_array($patient_ident,$exported['db']['patients'])){
					            // data was changed - SEND 
					            $export_current_invoice_debitor[$inv_data['id']] = 1;
					            $XD02 = false;
					        } else{
					            // Data was NOT changed- do not SEND
					            $export_current_invoice_debitor[$inv_data['id']] = 0;
					        }
					    } else {
					        // was never sent - SEND
					        $export_current_invoice_debitor[$inv_data['id']] = 1;
					        $XD01 = true;
					    }
					} 
					else
					{ // If not privat- check health insurance 
					    
					    // Check if the hi debitor  was sent before or in current export
					    if(in_array($inv_data['debitor_number'],$exported['db']['healthinsurance_debitors']) ||  in_array($inv_data['debitor_number'],$exported['current']['healthinsurance_debitors'])){
					        // If sent - check if data was changed 
					        if( ! in_array($healthinsurance_ident,$exported['current']['healthinsurance']) &&  ! in_array($healthinsurance_ident,$exported['db']['healthinsurance'])){
					            // data was changed -
					            $export_current_invoice_debitor[$inv_data['id']] = 1;
					            $XD02 = false;
					        } else {
					            // Data was NOT changed- do not SEND
					            $export_current_invoice_debitor[$inv_data['id']] = 0;
					        }
					    } else{
					        // was never sent - SEND
					        $export_current_invoice_debitor[$inv_data['id']] = 1;
					        $XD01 = true;
					    }
					}
					
					// ----------------------
					// IF EXPORT IS ALLOWED: 
					//------------------------
					if($export_current_invoice_debitor[$inv_data['id']] == 1){
					    
					    if($inv_data['private_patient'] == "1"){
					        // add pateint identification to current export
					        if(!in_array($patient_ident,$exported['current']['patients'])){
					            $exported['current']['patients'][] = $patient_ident;
					        }
					        // add patient ipid to current export
					        if(!in_array($inv_data['ipid'],$exported['current']['patients_ipids'])){
					            $exported['current']['patients_ipids'][] = $inv_data['ipid'];
					        }
					         
					    }else{
					         
					        //add health insurance identification to current export
					        if(!in_array($healthinsurance_ident,$exported['current']['healthinsurance'])){
					            $exported['current']['healthinsurance'][] = $healthinsurance_ident;
					        }
					        // add health insurance debitor  to current export
					        if(!in_array($inv_data['debitor_number'],$exported['current']['healthinsurance_debitors'])){
					            $exported['current']['healthinsurance_debitors'][] = $inv_data['debitor_number'];
					        }
					    }
					    
					    
					    
    					if($XD01){
        					$invoice_substitution['1_2_TCODE'] = "XD01";
    					}else{
        					$invoice_substitution['1_2_TCODE'] = "XD02";
    					}
    					
    					
    					//invoice -> health insurance: debitornumber  for health insurance
                        // invoice -> Privatversicherte: debitornumber  for patient
    					$invoice_substitution['1_3_KUNNR'] = $inv_data['debitor_number'];
    					
    					//Buchungskreis 0001 fix
    					$invoice_substitution['1_4_BUKRS'] = '0001';
    					
    					
    					
    					//verschiedene Kontengruppen stehen zur Auswahl, siehe Tabellenblatt Kontengruppen
    				    //"Invoice -> health insurance: account number  for health insurance
    				    //invoice -> Privatversicherte: account number  for patient
    					$ktokd="";
    					if($inv_data['private_patient'] == "1"){
        					$invoice_substitution['1_8_KTOKD'] = $rlp_pv_account_number;
        					$ktokd = $rlp_pv_account_number;
    					} else{
        					$invoice_substitution['1_8_KTOKD'] = $rlp_hi_account_number;
        					$ktokd = $rlp_hi_account_number;
    					    
    					}
    						
    					// second line
    					$invoice_substitution['2_1_STYPE'] = "2";
    // 					$invoice_substitution['2_2_tbnam'] = "/";
    					$invoice_substitution['2_2_TBNAM'] = "BKNA1";
    					
       					//"Herr" for male patients, "Frau" for female Patients
       					//b) the customer saw that we fill the field BKNA1-ANRED also for health insurances with "Frau". please leave empty for helath insurances.
    					if($inv_data['private_patient'] == "1"){
    					   $invoice_substitution['2_3_ANRED'] = $inv_data['patient_gender_title'];
    					}  else {
        					$invoice_substitution['2_3_ANRED'] = "";
    					}
    					
    					
    					// Invoice -> health insurance: Name of the health insurance
    					// invoice -> Privatversicherte: SURNAME, FIRSTNAME of patient
    					if($inv_data['private_patient'] == "1"){
        					$invoice_substitution['2_4_NAME1'] = utf8_decode($inv_data['patient_last_name']).', '.utf8_decode($inv_data['patient_first_name']);
    					} else{
        					$invoice_substitution['2_4_NAME1'] =  !empty($inv_data['health_insurance_company']) ?  utf8_decode($inv_data['health_insurance_company']) : "";
    //     					$invoice_substitution['2_4_NAME1'] = $inv_data['health_insurance_company'];
    					}
    					
    					// Invoice -> health insurance: Name of the health insurance
    					// invoice -> Privatversicherte: SURNAME of patient
    					if($inv_data['private_patient'] == "1"){
        					$invoice_substitution['2_5_NAME2'] = utf8_decode($inv_data['patient_last_name']);
    					} else{
        					$invoice_substitution['2_5_NAME2'] = !empty($inv_data['health_insurance_company']) ? utf8_decode($inv_data['health_insurance_company']) : "";
    //     					$invoice_substitution['2_5_NAME2'] = $inv_data['health_insurance_company'];
    					}
    					
    					
    					// Invoice -> health insurance: Name of the health insurance
    					// Invoice -> Privatversicherte: Firstname  of patient
    					if($inv_data['private_patient'] == "1"){
        					$invoice_substitution['2_6_NAME3'] = utf8_decode($inv_data['patient_first_name']);
    					} else{
        					$invoice_substitution['2_6_NAME3'] = "";
    //     					$invoice_substitution['2_6_NAME3'] = utf8_decode($inv_data['health_insurance_company']);
    //     					$invoice_substitution['2_6_NAME3'] = $inv_data['health_insurance_company'];
    					}
    										
    					
    					
       					$invoice_substitution['2_7_NAME4'] = '/';
       					
       					
       					//  Surname, Firstname (Attention: max length 10!)
    				    //a) Fill the field BKNA1-SORTL with same content as field BKNA1-NAME1
       					if($inv_data['private_patient'] == "1"){
       					    $invoice_substitution['2_8_SORTL'] = utf8_decode($inv_data['patient_last_name']).','.utf8_decode($inv_data['patient_first_name']);
       					} else {
       					    $invoice_substitution['2_8_SORTL'] = !empty($inv_data['health_insurance_company']) ?  utf8_decode($inv_data['health_insurance_company']) : "";
       					}					   					
       					
       					// Invoice -> health insurance: street of health insurance
                        // Invoice -> Privatversicherte: street  of patient
       					if($inv_data['private_patient'] == "1"){
       					    $invoice_substitution['2_9_STRAS'] = utf8_decode($inv_data['patient_street']);
       					} else{
       					    $invoice_substitution['2_9_STRAS'] = !empty($inv_data['health_insurance_street']) ? utf8_decode($inv_data['health_insurance_street']) : "";
    //    					    $invoice_substitution['2_9_STRAS'] = $inv_data['health_insurance_street'];
       					}
       					
       					
       					//Invoice -> health insurance: city of health insurance
                        //Invoice -> Privatversicherte: city  of patient
       					if($inv_data['private_patient'] == "1"){
       					    $invoice_substitution['2_11_ORT01'] = utf8_decode($inv_data['patient_city']);
       					} else{
       					    $invoice_substitution['2_11_ORT01'] = !empty($inv_data['health_insurance_city']) ? utf8_decode($inv_data['health_insurance_city']) : "";
    //    					    $invoice_substitution['2_11_ORT01'] = $inv_data['health_insurance_city'];
       					}
       					
       					
       					//Invoice -> health insurance: zip of health insurance
       					//invoice -> Privatversicherte: zip  of patient   						
       					if($inv_data['private_patient'] == "1"){
       					    $invoice_substitution['2_12_PSTLZ'] = $inv_data['patient_zip'];
       					} else{
       					    $invoice_substitution['2_12_PSTLZ'] = !empty($inv_data['health_insurance_zip']) ? $inv_data['health_insurance_zip'] : "";
       					}
       						
    					
       					//country key of invoice recipient from tab "Länderschlüssel"
    				    $invoice_substitution['2_15_LAND1'] = 'DE';
    
    				    // Hardcoded
    				    $invoice_substitution['2_17_SPRAS'] = 'DE';
    
    				    
    				    //Invoice -> health insurance: phone number  of the health insurance
    				    //invoice -> Privatversicherte: phone number  of patient
       					if($inv_data['private_patient'] == "1"){
       					    $invoice_substitution['2_19_TELF1'] = !empty($inv_data['patient_phone']) ? $inv_data['patient_phone'] : "";
       					} else{
       					    $invoice_substitution['2_19_TELF1'] = !empty($inv_data['health_insurance_phone']) ? $inv_data['health_insurance_phone'] : "" ;
       					}
       					
       					//hardcoded 
    					$invoice_substitution['2_26_BEGRU'] = 'Z001';
       					
       					//hardcoded 
    					$invoice_substitution['2_124_SENDE'] = '/';
       					
       					// Line 3
       					
       					//hardcoded 
    					$invoice_substitution['3_1_STYPE'] = '2';
    					
       					//hardcoded 
    // 					$invoice_substitution['3_2_tbnam'] = '/';
    					$invoice_substitution['3_2_TBNAM'] = 'BKNB1';
       					
    					if($XD01){
    					    
    					   // if ktokd 112, 113, 114, 115 , 116 then  "120000"
                           // if ktokd 512, 513, 514, 515 ,  516 then "120200"
                           // Important:
                           // ONLY FOR XD01 messages. If XD02 message then  "/"
                            
    					   $akont="";
                           /*
                           // Changed By Ancuta:: 28.11.2019
                           if(in_array($ktokd,array('112', '113', '114', '115' , '116'))){
                               $akont = "120000";
                           }elseif(in_array($ktokd,array('512', '513', '514', '515',  '516'))){
                               $akont = "120200";
                           }
                           */
    					   
                           if(in_array($ktokd,array('106','112','113','114','115','120','121'))){
                               $akont = "120000";
                           }elseif(in_array($ktokd,array('506','512','512','514','515','520','521'))){
                               $akont = "120200";
                           }
                           
    					   $invoice_substitution['3_3_AKONT'] = $akont;
    					} else{
           					//hardcoded 
        					$invoice_substitution['3_3_AKONT'] = '/';
    					}
    					
    					//Hardcoded - 0009 (fix)
    					// c) field: BKNB1-ZUAWA . they assume an error due to their wrong specs in the excel file. plz correct the fix value from 0009 to 009
       					$invoice_substitution['3_4_ZUAWA'] = '009';
       					
    					//Hardcoded - Z001 (fix)
       					$invoice_substitution['3_9_BEGRU'] = 'Z001';
    					
                        //Zahlungsbedingung laut Tabelle
                        //create a new field in client data for this. It is a hard value per client. New field name "Zahlungsbedingung"
       					$invoice_substitution['3_14_ZTERM'] = $rlp_terms_of_payment;
    					
    					
    					//Hardcoded - Wert "X" (fix)
       					$invoice_substitution['3_17_XZVER'] = 'X';
    					//Hardcoded - Wenn SEPA-Einzug vorhanden, Zahlweg "E" setzen, Sonst immer Zahlweg "U"
       					$invoice_substitution['3_19_ZWELS'] = 'U';
       					
       					//Hardcoded
       					$invoice_substitution['3_68_SENDE'] = '/';
    					
    					
       					// line 4
       					
       					//Hardcoded
       					$invoice_substitution['4_1_STYPE'] = '2';
       					//Hardcoded
       					$invoice_substitution['4_2_TBNAM'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_3_XDELE'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_4_BANKS'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_5_BANKL'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_6_BANKN'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_7_BKONT'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_8_BVTYP'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_9_XEZER'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_10_BANKA'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_14_SWIFT'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_22_KOINH'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_25_IBAN'] = '/';
       					//Hardcoded
       					$invoice_substitution['4_17_SENDE'] = '/';
    
       					// line 5
       					//Hardcoded
       					$invoice_substitution['5_1_STYPE'] = '2';   					
       					//Hardcoded
    //    					$invoice_substitution['5_2_tbnam'] = '/';
       					$invoice_substitution['5_2_TBNAM'] = 'BKNB5';
       					
       					//if ktokd 512, 513, 514, 515,  516 then "SZ"
       					//if ktokd 512, 513, 514, 515,  516 then  "KASS"
       					$mahna="";
       					if(in_array($ktokd,array('506', '512', '513', '514', '515', '520', '521'))){
       					    $mahna = "SZ";
       					}elseif(in_array($ktokd,array('106', '112', '113', '114', '115', '120', '121'))){
       					    $mahna = "KASS";
       					}
       					$invoice_substitution['5_3_MAHNA'] = $mahna;
       					$exxe[] = $invoice_substitution;
       					
       			 
    					foreach($sap_data as $k => $sap_rows){
    						if($sap_rows['value_length'] > 0){
    							if($sap_rows['type']=='DATS'){
    								$padd_char = "0";
    							}
    							else 
    							{ // ... ,CHAR, CHAR8, CLNT, CUKY,	DATS, LANG, UNIT < all types from file
    								$padd_char = " ";
    							}
    							
    							$ident = $sap_rows['line'].'_'.$sap_rows['nr'].'_'.$sap_rows['field'];
    							
    							if(strlen($invoice_substitution[$ident]) > $sap_rows['value_length']){
    							    $invoice_substitution[$ident] = substr($invoice_substitution[$ident],0,$sap_rows['value_length']);
    							}
    							
    							
    							if(!array_key_exists($ident, $header_values_substitute)){
    								if($sap_rows['nr'] =="1"){
    // 									$invoice_values[] = "\n";
    								}
    								if($sap_rows['line'] == "1" && $sap_rows['nr'] == "1"){
    								    
    								    $invoice_values[] = "\r\n";
    // 								    $invoice_values[] = "\r\n";
    								}
    								
    								if( $sap_rows['line'] != 1 && $sap_rows['nr'] == "1" ){
    								    $invoice_values[] = "\r\n";
    								}
    								if(! in_array($ident,$padding_left_0fielsd)){
    
    									if(strlen($invoice_substitution[$ident])>0)
    									{
    										$invoice_values[] = str_pad($invoice_substitution[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT);
    									} else {
    										$invoice_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT);
    									}
    								} else{
    									
    									$padd_char = " ";
    									 
    									if(strlen($invoice_substitution[$ident])>0)
    									{
    										$invoice_values[] = str_pad($invoice_substitution[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_LEFT);
    									} else {
    										$invoice_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_LEFT);
    									}
    								}
    							
    							}
    						}
    					}
    					
     
    					$exported_invoices[$inv_data['invoice_type']][] = $inv_data['invoice_id'];
    					
    					$export_invoices_info[$inv_data['invoice_id']]['ipid'] = $inv_data['ipid'];
    					$export_invoices_info[$inv_data['invoice_id']]['patient']['debitor_number'] = $inv_data['debitor_number'];
    					$export_invoices_info[$inv_data['invoice_id']]['private'] = $inv_data['private_patient'] == "1" ? "1" : "0";
    					$export_invoices_info[$inv_data['invoice_id']]['patient']['last_name'] = $inv_data['patient_last_name'];
    					$export_invoices_info[$inv_data['invoice_id']]['patient']['first_name'] = $inv_data['patient_first_name'];
    					$export_invoices_info[$inv_data['invoice_id']]['patient']['street'] = $inv_data['patient_street'];
    					$export_invoices_info[$inv_data['invoice_id']]['patient']['zip'] = $inv_data['patient_zip'];
    					$export_invoices_info[$inv_data['invoice_id']]['patient']['city'] = $inv_data['patient_city'];
    					
    					$export_invoices_info[$inv_data['invoice_id']]['health_insurance']['debitor_number'] = $inv_data['debitor_number'];
    					$export_invoices_info[$inv_data['invoice_id']]['health_insurance']['name'] = $inv_data['health_insurance_company'];
    					$export_invoices_info[$inv_data['invoice_id']]['health_insurance']['street'] = $inv_data['health_insurance_street'];
    					$export_invoices_info[$inv_data['invoice_id']]['health_insurance']['zip'] = $inv_data['health_insurance_zip'];
    					$export_invoices_info[$inv_data['invoice_id']]['health_insurance']['city'] = $inv_data['health_insurance_city'];
					
					}
					
				}
			}
			
			if(empty($invoice_values) ){
			    //ISPC-2171 Lore 19.03.2020  can we display a message "No new debitors. No Export."
			    
			    //dd($post);
			    $filter_post = (!empty($post['start_date']) ? '&ps='.$post['start_date'] : '') ;
			    $filter_post .= (!empty($post['end_date']) ? '&pe='.$post['end_date'] : '') ;
			    $filter_post .= (!empty($post['item_start_date']) ? '&isd='.$post['item_start_date'] : '') ;
			    $filter_post .= (!empty($post['item_end_date']) ? '&ied='.$post['item_end_date'] : '') ;
			    $filter_post .= (!empty($post['patient_name']) ? '&n='.$post['patient_name'] : '') ;
			    $filter_post .= (!empty($post['invoice_number']) ? '&r='.$post['invoice_number'] : '') ;
			    $filter_post .= (!empty($post['health_insurance']) ? '&hi='.$post['health_insurance'] : '') ;
			    $filter_post .= (!empty($post['amount']) ? '&am='.$post['amount'] : '') ;
			    //dd($filter_post);
			    //$this->_redirect(APP_BASE . 'invoice/invoicejournal?msg=Keine_data&ps='.$post['start_date'].'&pe='.$post['end_date'].'&n='.$post['patient_name'].'&r='.$post['invoice_number']);
			    $this->_redirect(APP_BASE . 'invoice/invoicejournal?msg=Keine_data'.$filter_post);
			    
			    exit;
			}
			
// 			dd($export_invoices_info);
			$text .=implode("", $invoice_values);
// 			echo "<pre>";
//			print_r($text);
// 			exit;
// 			dd($text);
			
			// save files and exported invoices
			if(!empty($text) && !empty($exported_invoices)){
			    
    			$ins_inv = new InvoicejournalExportFiles();
    			$ins_inv->clientid = $clientid;
    			$ins_inv->export_type = $export_type;
//     			$ins_inv->export_content = $text;
		        $ins_inv->export_content = serialize($text);
    			$ins_inv->export_invoices = serialize($exported_invoices);
    			$ins_inv->save();
    			$ins_id = $ins_inv->id;
    			
    			if($ins_id){
    			    $result = array();
    			    foreach($exported_invoices as $invoice_type => $exinvoices){
    			        
    			        foreach($exinvoices as $invoice_id){
    			            
        			        $result [] = array(
                                'clientid' => $clientid,
                                'export_type' => $export_type,
                                'export_file_id' => $ins_id,
                                'invoice_type' => $invoice_type,
                                'invoice' => $invoice_id,
                                'invoice_info' => serialize($export_invoices_info[$invoice_id])
        			        ); 
    			        }
    			    }

    			    if(count($result) > 0)
    			    {
    			        //insert many records with one query!!
    			        $collection = new Doctrine_Collection('InvoicejournalExportInvoices');
    			        $collection->fromArray($result);
    			        $collection->save();
    			    }
    			}
			}
			
			
			//ISPC-2452 Ancuta 21.11.2019
			//b) the debitor export (the file from this ticket) - can we name this "debitor_clientname_ddmmyyyy_hhmm"
		
			$file_time = date("dmY_Hm");
			$client_name = Pms_CommonData::filter_filename($client_data['client_name'], true);
			$filename_text ="debitor_".$client_name.'_'.$file_time;
			$filename = $filename_text.'.txt';
			// --
			
			header('Content-Encoding: UTF-8');
			header('Content-type: text/plain; charset=utf-8; codepage="4110"');
			header("Content-Disposition: attachment; filename=" . $filename);
			$content = $text;
			
			echo $content;
			
		}
		
		/**
		 * @author Ancuta
		 * TODO-2969 Ancuta 05.03.2020
		 */
		public function generatedebitorstartupAction()
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $this->_helper->viewRenderer->setNoRender();
		    
		    $this->generate_sap_ii_initial_txt();
		    exit;
		    
		}
		/**
		 * @author Ancuta
		 * Copy of fn generate_sap_ii_txt
		 * Changed to generate for all curent debitors .NOT based on invoices
		 * TODO-2969 Ancuta 05.03.2020
		 */
		public function generate_sap_ii_initial_txt()
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $this->_helper->viewRenderer->setNoRender();
		    $clientid = $logininfo->clientid;
		    $export_type = "sap_ii_txt";
		    $filename = 'export.txt';
		    $data = array();
		     
		    // get client details
		    $clientinfo = Client::getClientDataByid($clientid);
		    if( ! empty($clientinfo)){
		        $client_data = $clientinfo[0];
		    }
		    $rlp_hi_account_number = ! empty($client_data['rlp_hi_account_number']) ? $client_data['rlp_hi_account_number'] : "";
		    $rlp_pv_account_number = ! empty($client_data['rlp_pv_account_number']) ? $client_data['rlp_pv_account_number'] : "";
		    $rlp_terms_of_payment  = ! empty($client_data['rlp_terms_of_payment'])  ? $client_data['rlp_terms_of_payment'] : "";
		    //get allowed client invoices
		    $client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
		    $allowed_invoice = $client_allowed_invoice[0];
		    
		    
		    
		    // get all healthinsurance of client
		    $client_healthinsurance = array();
		    $client_healthinsurance = Doctrine_Query::create()
		    ->select('*,name as health_insurance_company,
                    street1 as health_insurance_street,
                    zip as health_insurance_zip,
                    city as health_insurance_city,
                    debtor_number as debitor_number')
		    ->from('HealthInsurance IndexBy id')
		    ->where('isdelete = ?', 0)
		    ->andWhere('extra = 0')
		    ->andWhere("clientid = ?",$clientid)
		    ->andWhere("onlyclients = '1'")
		    ->orderBy('name ASC')
		    ->fetchArray();
		    
		    $data['healthinsurance'] = $client_healthinsurance;
		    
		    // get all private patients of client
            $pv_patients =  Doctrine_Query::create()
            ->select("pm.ipid, e.epid as epid, 
                    AES_DECRYPT(pm.first_name,'" . Zend_Registry::get('salt') . "') as patient_first_name,
					AES_DECRYPT(pm.last_name,'" . Zend_Registry::get('salt') . "') as patient_last_name,
					AES_DECRYPT(pm.street1,'" . Zend_Registry::get('salt') . "') as patient_street,
					AES_DECRYPT(pm.zip,'" . Zend_Registry::get('salt') . "') as patient_zip,
					AES_DECRYPT(pm.city,'" . Zend_Registry::get('salt') . "') as patient_city,
                    ph.*,
					AES_DECRYPT(ph.company_name,'" . Zend_Registry::get('salt') . "') as company_name,
					AES_DECRYPT(ph.insurance_status,'" . Zend_Registry::get('salt') . "') as insurance_status,
					AES_DECRYPT(ph.ins_insurance_provider,'" . Zend_Registry::get('salt') . "') as ins_insurance_provider,
					AES_DECRYPT(ph.ins_contactperson,'" . Zend_Registry::get('salt') . "') as ins_contactperson,
					AES_DECRYPT(ph.ins_zip,'" . Zend_Registry::get('salt') . "') as ins_zip,
					AES_DECRYPT(ph.ins_city,'" . Zend_Registry::get('salt') . "') as ins_city,
					AES_DECRYPT(ph.ins_phone,'" . Zend_Registry::get('salt') . "') as ins_phone,
					AES_DECRYPT(ph.ins_phone2,'" . Zend_Registry::get('salt') . "') as ins_phone2,
					AES_DECRYPT(ph.ins_phonefax,'" . Zend_Registry::get('salt') . "') as ins_phonefax,
					AES_DECRYPT(ph.ins_post_office_box,'" . Zend_Registry::get('salt') . "') as ins_post_office_box,
					AES_DECRYPT(ph.ins_post_office_box_location,'" . Zend_Registry::get('salt') . "') as ins_post_office_box_location,
					AES_DECRYPT(ph.ins_email,'" . Zend_Registry::get('salt') . "') as ins_email,
					AES_DECRYPT(ph.ins_zip_mailbox,'" . Zend_Registry::get('salt') . "') as ins_zip_mailbox,
					AES_DECRYPT(ph.ins_street,'" . Zend_Registry::get('salt') . "') as ins_street,
					AES_DECRYPT(ph.comment,'" . Zend_Registry::get('salt') . "') as comment,
					AES_DECRYPT(ph.ins_debtor_number,'" . Zend_Registry::get('salt') . "') as ins_debtor_number,
					AES_DECRYPT(ph.ins_debtor_number,'" . Zend_Registry::get('salt') . "') as debitor_number,
					AES_DECRYPT(ph.ins_debtor_number,'" . Zend_Registry::get('salt') . "') as patient_debitor_number,
                    ph.privatepatient as private_patient")
            ->from('PatientMaster pm indexby ipid')
            ->leftJoin('pm.EpidIpidMapping e')
            ->leftJoin('pm.PatientHealthInsurance ph')
            ->where('pm.isdelete= 0')
            ->andWhere('e.clientid = ?',$clientid)
            ->andWhere('ph.isdelete = 0 ')
            ->andWhere('ph.privatepatient = 1 ')
            ->orderBy('field(isstandby,"0","1"), TRIM(CONVERT(CONVERT(AES_DECRYPT(pm.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci ASC ')
            ->fetchArray();
     
            $modules = new Modules();
            $use_ppun = false;
            $use_ppun = $modules->checkModulePrivileges(88, $clientid);
            
            
            
            $ppun = new PpunIpid();
            $privatepateints = array();
            foreach($pv_patients as $patient_ipid=>$details){
  
                
                $privatepateints[$patient_ipid]['ipid'] = $patient_ipid;
                $privatepateints[$patient_ipid]['private_patient'] = "1";
                $privatepateints[$patient_ipid]['patient_first_name'] = $details['patient_first_name'];
                $privatepateints[$patient_ipid]['patient_last_name'] = $details['patient_last_name'];
                $privatepateints[$patient_ipid]['patient_street'] = $details['patient_street'];
                $privatepateints[$patient_ipid]['patient_zip'] = $details['patient_zip'];
                $privatepateints[$patient_ipid]['patient_city'] = $details['patient_city'];
                $privatepateints[$patient_ipid]['debitor_number'] = $details['PatientHealthInsurance']['ins_debtor_number'];
                if($use_ppun){
                    $ppun_number = $ppun->check_patient_ppun($patient_ipid, $clientid);
                    if ($ppun_number) {
                        $privatepateints[$patient_ipid]['debitor_number'] = $ppun_number['ppun'];
                    }
                }
            }
   
            $data['private_patients'] = $privatepateints;
            
            $exported = array();
		    // for each patient check if data was changed from the last exoport 
            //  get exported invoices
            
            /*
		    $InvoicejournalExportInvoices_obj = new InvoicejournalExportInvoices();
		    $all_exported_inv_array = $InvoicejournalExportInvoices_obj->get_all_exported_invoices($clientid,array($export_type));
		    
		    $exported_inv_info = array();
		    $overall_exported_invoices= array();
		    $exported_informations = array();
		    foreach($all_exported_inv_array as  $k => $ij_export){
		        $overall_exported_invoices[] = $ij_export['invoice'];
		        $exported_inv_info[$ij_export['invoice']] = unserialize($ij_export['invoice_info']);
		        $exported_informations[] = unserialize($ij_export['invoice_info']);
		    } 
		    $exported = array();
		    foreach($exported_informations as $kl=>$linedata){
   		        $exported['db']['healthinsurance'][]           = trim($linedata['health_insurance']['debitor_number']).' '.trim($linedata['health_insurance']['name']).' '.trim($linedata['health_insurance']['street']).' '.trim($linedata['health_insurance']['zip']).' '.trim($linedata['health_insurance']['city']);
		        $exported['db']['patients'][]                  = $linedata['ipid'].'-'.trim($linedata['patient']['debitor_number']).' '.trim($linedata['patient']['last_name']).' '.trim($linedata['patient']['first_name']).' '.trim($linedata['patient']['street']).' '.trim($linedata['patient']['zip']).' '.trim($linedata['patient']['city']);
		        //ISPC-2452 - comment from 06.11.2019
		        $exported['db']['patients_ipids'][]            = $linedata['ipid'];
		        if($linedata['health_insurance']['debitor_number']){
    		        $exported['db']['healthinsurance_debitors'][]  = trim($linedata['health_insurance']['debitor_number']);
		        }
		    }
		    
		    
		    $exported['db']['healthinsurance'] = array_values(array_unique($exported['db']['healthinsurance']));
		    $exported['db']['patients'] = array_values(array_unique($exported['db']['patients']));
		    $exported['db']['patients_ipids'] = array_values(array_unique($exported['db']['patients_ipids']));
	        */
		    
		    
			// ISPC-2171
			//get sap data for export
			$sap_obj = new SapExcelTemplate();
			$sap_data = $sap_obj->grab_sap_ii_export_data();
 
			$header_lines = array();
			$invoices_lines = array();
			foreach($sap_data as $sdata=>$sval){
				if($sval['line'] == 0 ){
					$header_lines[$sval['line'].'_'.$sval['nr'].'_'.$sval['field']] = $sval;
				} 
			}
			
			$text = "";
			$text .= "header";
			$excel_header_lines = array_keys($header_lines);

			$header_date = date("Ymd");
			$header_values_substitute = array();
			
			$header_values_substitute['0_1_STYPE'] = "0";
			$header_values_substitute['0_2_GROUP'] = "0001-ISPCDEB"; 
			$header_values_substitute['0_3_MANDT'] = "101";
			$header_values_substitute['0_4_USNAM'] = "WF-BATCH";
			$header_values_substitute['0_5_START'] = "00000000";
			$header_values_substitute['0_6_XKEEP'] = "X";
			$header_values_substitute['0_7_NODATA'] = "";
			
			$ident = "";
			$padd_char = " ";
 
			// create file header
			foreach($sap_data as $k => $sap_rows)
			{
				if($sap_rows['type']=='DATS'){
// 					$padd_char = "0";
					$padd_char = " ";
				}
				else { // ... ,CHAR, CHAR8, CLNT, CUKY,	DATS, LANG, UNIT < all types from file
					$padd_char = " ";
				}
				
				
// 				$ident = $sap_rows['line'].'_'.$sap_rows['nr'];

				$ident = $sap_rows['line'].'_'.$sap_rows['nr'].'_'.$sap_rows['field'];
				
				if(array_key_exists($ident,$header_values_substitute))
				{
					if(strlen($header_values_substitute[$ident])>0)
					{
			 			$header_values[] = str_pad($header_values_substitute[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT); 
					} else {
			 			$header_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT); 
					}
				}
			}
			$text = "";
			$text .= implode("",$header_values);

 
			
			$padding_left_0fielsd = array('1_10_BELNR','2_114_NEWKO','3_114_NEWKO','3_16_KOSTL');
			
			//create invoice lines
			$invoice_values = array();
			$exported_invoices = array();
			
			foreach($data as $data_type => $data_array)
			{
			    //$data_type = healthinsurance OR private_patients
			    
			    foreach($data_array as $debitor_identification => $inv_data){
			        //$debitor_identification = health insurance  id  for $data_type = healthinsurance
			        //$debitor_identification = ipid for $data_type= private_patients
			        
				    // remove extra spaces for  identification data
				    //For pateint
				    $inv_data['debitor_number'] = trim($inv_data['debitor_number']);
				    $inv_data['patient_last_name'] = trim($inv_data['patient_last_name']);
				    $inv_data['patient_first_name'] = trim($inv_data['patient_first_name']);
				    $inv_data['patient_street'] = trim($inv_data['patient_street']);
				    $inv_data['patient_zip'] = trim($inv_data['patient_zip']);
				    $inv_data['patient_city'] = trim($inv_data['patient_city']);
				    
				    // for health insurance
				    $inv_data['health_insurance_company'] = trim($inv_data['health_insurance_company']);
				    $inv_data['health_insurance_street'] = trim($inv_data['health_insurance_street']);
				    $inv_data['health_insurance_zip'] = trim($inv_data['health_insurance_zip']);
				    $inv_data['health_insurance_city'] = trim($inv_data['health_insurance_city']);
				    
				    
					//$inv_data['invoice_date'] = "2018-02-26 00:00:00";
					$ident = "";
					$patient_ident="";
					$patient_ident =  $inv_data['ipid'].'-'.$inv_data['debitor_number'].' '.$inv_data['patient_last_name'].' '.$inv_data['patient_first_name'].' '.$inv_data['patient_street'].' '.$inv_data['patient_zip'].' '.$inv_data['patient_city'];
					
					$healthinsurance_ident = "";
					//					$healthinsurance_ident = $inv_data['health_insurance_company'].' '.$inv_data['health_insurance_street'].' '.$inv_data['health_insurance_zip'].' '.$inv_data['health_insurance_city'];
					$healthinsurance_ident = $inv_data['debitor_number'].' '.$inv_data['health_insurance_company'].' '.$inv_data['health_insurance_street'].' '.$inv_data['health_insurance_zip'].' '.$inv_data['health_insurance_city'];
					
					// first line
// 					$invoice_substitution['1_1_stype'] = "/";
					$invoice_substitution['1_1_STYPE'] = "1";
                    // XD01 for a new customer record. New means he was never ever exported before.
                    // XD02 for a changed customer, when customer data was changed after the last XD01 or XD02
                    // CHANGE:: a debitor just needs to be exported once. and then again ONLY (with an XD02) if something did change!
                    
					// Check if debitor was ever exported

					// check if  ipid OR hi_debitor was sent. 
					// If ipid was NEVER sent - then  send ONCE with XD01
					// if ipid was sent - but data was NOT changed - DO not SEN
					// If ipid was sent - but data WAS changed - send again - with XDO2
					
					
					//1) as if there was never an export. its the initial file.
					
					/* 
					$XD01 = false;
					$XD02 = false;
					$export_current_invoice_debitor[$inv_data['id']] = 0;
					// For pateint:					
					if( $inv_data['private_patient'] == "1"){
    			        // Check if the pateint was sent before or in current export
					    if(in_array($inv_data['ipid'],$exported['db']['patients_ipids']) ||  in_array($inv_data['ipid'],$exported['current']['patients_ipids'])){
					        //If sent -  check if data was changed
					        if( ! in_array($patient_ident,$exported['current']['patients']) &&  ! in_array($patient_ident,$exported['db']['patients'])){
					            // data was changed - SEND 
					            $export_current_invoice_debitor[$inv_data['id']] = 1;
					            $XD02 = false;
					        } else{
					            // Data was NOT changed- do not SEND
					            $export_current_invoice_debitor[$inv_data['id']] = 0;
					        }
					    } else {
					        // was never sent - SEND
					        $export_current_invoice_debitor[$inv_data['id']] = 1;
					        $XD01 = true;
					    }
					} 
					else
					{ // If not privat- check health insurance 
					    
					    // Check if the hi debitor  was sent before or in current export
					    if(in_array($inv_data['debitor_number'],$exported['db']['healthinsurance_debitors']) ||  in_array($inv_data['debitor_number'],$exported['current']['healthinsurance_debitors'])){
					        // If sent - check if data was changed 
					        if( ! in_array($healthinsurance_ident,$exported['current']['healthinsurance']) &&  ! in_array($healthinsurance_ident,$exported['db']['healthinsurance'])){
					            // data was changed -
					            $export_current_invoice_debitor[$inv_data['id']] = 1;
					            $XD02 = false;
					        } else {
					            // Data was NOT changed- do not SEND
					            $export_current_invoice_debitor[$inv_data['id']] = 0;
					        }
					    } else{
					        // was never sent - SEND
					        $export_current_invoice_debitor[$inv_data['id']] = 1;
					        $XD01 = true;
					    }
					}  
					
					 */
					
				    $XD01 = true;
				    if($inv_data['private_patient'] == "1"){
				        // add pateint identification to current export
				        if(!in_array($patient_ident,$exported['current']['patients'])){
				            $exported['current']['patients'][] = $patient_ident;
				        }
				        // add patient ipid to current export
				        if(!in_array($inv_data['ipid'],$exported['current']['patients_ipids'])){
				            $exported['current']['patients_ipids'][] = $inv_data['ipid'];
				        }
				         
				    }else{
				         
				        //add health insurance identification to current export
				        if(!in_array($healthinsurance_ident,$exported['current']['healthinsurance'])){
				            $exported['current']['healthinsurance'][] = $healthinsurance_ident;
				        }
				        // add health insurance debitor  to current export
				        if(!in_array($inv_data['debitor_number'],$exported['current']['healthinsurance_debitors'])){
				            $exported['current']['healthinsurance_debitors'][] = $inv_data['debitor_number'];
				        }
				    }
				    
				    
				    
					if($XD01){
    					$invoice_substitution['1_2_TCODE'] = "XD01";
					}else{
    					$invoice_substitution['1_2_TCODE'] = "XD02";
					}
					
					
					//invoice -> health insurance: debitornumber  for health insurance
                    // invoice -> Privatversicherte: debitornumber  for patient
					$invoice_substitution['1_3_KUNNR'] = $inv_data['debitor_number'];
					
					//Buchungskreis 0001 fix
					$invoice_substitution['1_4_BUKRS'] = '0001';
					
					
					
					//verschiedene Kontengruppen stehen zur Auswahl, siehe Tabellenblatt Kontengruppen
				    //"Invoice -> health insurance: account number  for health insurance
				    //invoice -> Privatversicherte: account number  for patient
					$ktokd="";
					if($inv_data['private_patient'] == "1"){
    					$invoice_substitution['1_8_KTOKD'] = $rlp_pv_account_number;
    					$ktokd = $rlp_pv_account_number;
					} else{
    					$invoice_substitution['1_8_KTOKD'] = $rlp_hi_account_number;
    					$ktokd = $rlp_hi_account_number;
					    
					}
						
					// second line
					$invoice_substitution['2_1_STYPE'] = "2";
// 					$invoice_substitution['2_2_tbnam'] = "/";
					$invoice_substitution['2_2_TBNAM'] = "BKNA1";
					
   					//"Herr" for male patients, "Frau" for female Patients
   					//b) the customer saw that we fill the field BKNA1-ANRED also for health insurances with "Frau". please leave empty for helath insurances.
					if($inv_data['private_patient'] == "1"){
					   $invoice_substitution['2_3_ANRED'] = $inv_data['patient_gender_title'];
					}  else {
    					$invoice_substitution['2_3_ANRED'] = "";
					}
					
					
					// Invoice -> health insurance: Name of the health insurance
					// invoice -> Privatversicherte: SURNAME, FIRSTNAME of patient
					if($inv_data['private_patient'] == "1"){
    					$invoice_substitution['2_4_NAME1'] = utf8_decode($inv_data['patient_last_name']).', '.utf8_decode($inv_data['patient_first_name']);
					} else{
    					$invoice_substitution['2_4_NAME1'] =  !empty($inv_data['health_insurance_company']) ?  utf8_decode($inv_data['health_insurance_company']) : "";
//     					$invoice_substitution['2_4_NAME1'] = $inv_data['health_insurance_company'];
					}
					
					// Invoice -> health insurance: Name of the health insurance
					// invoice -> Privatversicherte: SURNAME of patient
					if($inv_data['private_patient'] == "1"){
    					$invoice_substitution['2_5_NAME2'] = utf8_decode($inv_data['patient_last_name']);
					} else{
    					$invoice_substitution['2_5_NAME2'] = !empty($inv_data['health_insurance_company']) ? utf8_decode($inv_data['health_insurance_company']) : "";
//     					$invoice_substitution['2_5_NAME2'] = $inv_data['health_insurance_company'];
					}
					
					
					// Invoice -> health insurance: Name of the health insurance
					// Invoice -> Privatversicherte: Firstname  of patient
					if($inv_data['private_patient'] == "1"){
    					$invoice_substitution['2_6_NAME3'] = utf8_decode($inv_data['patient_first_name']);
					} else{
    					$invoice_substitution['2_6_NAME3'] = "";
//     					$invoice_substitution['2_6_NAME3'] = utf8_decode($inv_data['health_insurance_company']);
//     					$invoice_substitution['2_6_NAME3'] = $inv_data['health_insurance_company'];
					}
										
					
					
   					$invoice_substitution['2_7_NAME4'] = '/';
   					
   					
   					//  Surname, Firstname (Attention: max length 10!)
				    //a) Fill the field BKNA1-SORTL with same content as field BKNA1-NAME1
   					if($inv_data['private_patient'] == "1"){
   					    $invoice_substitution['2_8_SORTL'] = utf8_decode($inv_data['patient_last_name']).','.utf8_decode($inv_data['patient_first_name']);
   					} else {
   					    $invoice_substitution['2_8_SORTL'] = !empty($inv_data['health_insurance_company']) ?  utf8_decode($inv_data['health_insurance_company']) : "";
   					}					   					
   					
   					// Invoice -> health insurance: street of health insurance
                    // Invoice -> Privatversicherte: street  of patient
   					if($inv_data['private_patient'] == "1"){
   					    $invoice_substitution['2_9_STRAS'] = utf8_decode($inv_data['patient_street']);
   					} else{
   					    $invoice_substitution['2_9_STRAS'] = !empty($inv_data['health_insurance_street']) ? utf8_decode($inv_data['health_insurance_street']) : "";
//    					    $invoice_substitution['2_9_STRAS'] = $inv_data['health_insurance_street'];
   					}
   					
   					
   					//Invoice -> health insurance: city of health insurance
                    //Invoice -> Privatversicherte: city  of patient
   					if($inv_data['private_patient'] == "1"){
   					    $invoice_substitution['2_11_ORT01'] = utf8_decode($inv_data['patient_city']);
   					} else{
   					    $invoice_substitution['2_11_ORT01'] = !empty($inv_data['health_insurance_city']) ? utf8_decode($inv_data['health_insurance_city']) : "";
//    					    $invoice_substitution['2_11_ORT01'] = $inv_data['health_insurance_city'];
   					}
   					
   					
   					//Invoice -> health insurance: zip of health insurance
   					//invoice -> Privatversicherte: zip  of patient   						
   					if($inv_data['private_patient'] == "1"){
   					    $invoice_substitution['2_12_PSTLZ'] = $inv_data['patient_zip'];
   					} else{
   					    $invoice_substitution['2_12_PSTLZ'] = !empty($inv_data['health_insurance_zip']) ? $inv_data['health_insurance_zip'] : "";
   					}
   						
					
   					//country key of invoice recipient from tab "Länderschlüssel"
				    $invoice_substitution['2_15_LAND1'] = 'DE';

				    // Hardcoded
				    $invoice_substitution['2_17_SPRAS'] = 'DE';

				    
				    //Invoice -> health insurance: phone number  of the health insurance
				    //invoice -> Privatversicherte: phone number  of patient
   					if($inv_data['private_patient'] == "1"){
   					    $invoice_substitution['2_19_TELF1'] = !empty($inv_data['patient_phone']) ? $inv_data['patient_phone'] : "";
   					} else{
   					    $invoice_substitution['2_19_TELF1'] = !empty($inv_data['health_insurance_phone']) ? $inv_data['health_insurance_phone'] : "" ;
   					}
   					
   					//hardcoded 
					$invoice_substitution['2_26_BEGRU'] = 'Z001';
   					
   					//hardcoded 
					$invoice_substitution['2_124_SENDE'] = '/';
   					
   					// Line 3
   					
   					//hardcoded 
					$invoice_substitution['3_1_STYPE'] = '2';
					
   					//hardcoded 
// 					$invoice_substitution['3_2_tbnam'] = '/';
					$invoice_substitution['3_2_TBNAM'] = 'BKNB1';
   					
					if($XD01){
					    
					   // if ktokd 112, 113, 114, 115 , 116 then  "120000"
                       // if ktokd 512, 513, 514, 515 ,  516 then "120200"
                       // Important:
                       // ONLY FOR XD01 messages. If XD02 message then  "/"
                        
					   $akont="";
                       /*
                       // Changed By Ancuta:: 28.11.2019
                       if(in_array($ktokd,array('112', '113', '114', '115' , '116'))){
                           $akont = "120000";
                       }elseif(in_array($ktokd,array('512', '513', '514', '515',  '516'))){
                           $akont = "120200";
                       }
                       */
					   
                       if(in_array($ktokd,array('106','112','113','114','115','120','121'))){
                           $akont = "120000";
                       }elseif(in_array($ktokd,array('506','512','512','514','515','520','521'))){
                           $akont = "120200";
                       }
                       
					   $invoice_substitution['3_3_AKONT'] = $akont;
					} else{
       					//hardcoded 
    					$invoice_substitution['3_3_AKONT'] = '/';
					}
					
					//Hardcoded - 0009 (fix)
					// c) field: BKNB1-ZUAWA . they assume an error due to their wrong specs in the excel file. plz correct the fix value from 0009 to 009
   					$invoice_substitution['3_4_ZUAWA'] = '009';
   					
					//Hardcoded - Z001 (fix)
   					$invoice_substitution['3_9_BEGRU'] = 'Z001';
					
                    //Zahlungsbedingung laut Tabelle
                    //create a new field in client data for this. It is a hard value per client. New field name "Zahlungsbedingung"
   					$invoice_substitution['3_14_ZTERM'] = $rlp_terms_of_payment;
					
					
					//Hardcoded - Wert "X" (fix)
   					$invoice_substitution['3_17_XZVER'] = 'X';
					//Hardcoded - Wenn SEPA-Einzug vorhanden, Zahlweg "E" setzen, Sonst immer Zahlweg "U"
   					$invoice_substitution['3_19_ZWELS'] = 'U';
   					
   					//Hardcoded
   					$invoice_substitution['3_68_SENDE'] = '/';
					
					
   					// line 4
   					
   					//Hardcoded
   					$invoice_substitution['4_1_STYPE'] = '2';
   					//Hardcoded
   					$invoice_substitution['4_2_TBNAM'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_3_XDELE'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_4_BANKS'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_5_BANKL'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_6_BANKN'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_7_BKONT'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_8_BVTYP'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_9_XEZER'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_10_BANKA'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_14_SWIFT'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_22_KOINH'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_25_IBAN'] = '/';
   					//Hardcoded
   					$invoice_substitution['4_17_SENDE'] = '/';

   					// line 5
   					//Hardcoded
   					$invoice_substitution['5_1_STYPE'] = '2';   					
   					//Hardcoded
//    					$invoice_substitution['5_2_tbnam'] = '/';
   					$invoice_substitution['5_2_TBNAM'] = 'BKNB5';
   					
   					//if ktokd 512, 513, 514, 515,  516 then "SZ"
   					//if ktokd 512, 513, 514, 515,  516 then  "KASS"
   					$mahna="";
   					if(in_array($ktokd,array('506', '512', '513', '514', '515', '520', '521'))){
   					    $mahna = "SZ";
   					}elseif(in_array($ktokd,array('106', '112', '113', '114', '115', '120', '121'))){
   					    $mahna = "KASS";
   					}
   					$invoice_substitution['5_3_MAHNA'] = $mahna;
   					$exxe[] = $invoice_substitution;
   					
   			 
					foreach($sap_data as $k => $sap_rows){
						if($sap_rows['value_length'] > 0){
							if($sap_rows['type']=='DATS'){
								$padd_char = "0";
							}
							else 
							{ // ... ,CHAR, CHAR8, CLNT, CUKY,	DATS, LANG, UNIT < all types from file
								$padd_char = " ";
							}
							
							$ident = $sap_rows['line'].'_'.$sap_rows['nr'].'_'.$sap_rows['field'];
							
							if(strlen($invoice_substitution[$ident]) > $sap_rows['value_length']){
							    $invoice_substitution[$ident] = substr($invoice_substitution[$ident],0,$sap_rows['value_length']);
							}
							
							
							if(!array_key_exists($ident, $header_values_substitute)){
								if($sap_rows['nr'] =="1"){
// 									$invoice_values[] = "\n";
								}
								if($sap_rows['line'] == "1" && $sap_rows['nr'] == "1"){
								    
								    $invoice_values[] = "\r\n";
// 								    $invoice_values[] = "\r\n";
								}
								
								if( $sap_rows['line'] != 1 && $sap_rows['nr'] == "1" ){
								    $invoice_values[] = "\r\n";
								}
								if(! in_array($ident,$padding_left_0fielsd)){

									if(strlen($invoice_substitution[$ident])>0)
									{
										$invoice_values[] = str_pad($invoice_substitution[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT);
									} else {
										$invoice_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_RIGHT);
									}
								} else{
									
									$padd_char = " ";
									 
									if(strlen($invoice_substitution[$ident])>0)
									{
										$invoice_values[] = str_pad($invoice_substitution[$ident], $sap_rows['value_length'], $padd_char, STR_PAD_LEFT);
									} else {
										$invoice_values[] = str_pad("/", $sap_rows['value_length'], $padd_char, STR_PAD_LEFT);
									}
								}
							
							}
						}
					}
					
 
					$exported_invoices[$allowed_invoice][] = $data_type.$debitor_identification;
					
					if($data_type == 'private_patients'){
					    
    					$export_invoices_info[$data_type.$debitor_identification]['ipid'] = $inv_data['ipid'];
    					$export_invoices_info[$data_type.$debitor_identification]['patient']['debitor_number'] = $inv_data['debitor_number'];
    					$export_invoices_info[$data_type.$debitor_identification]['private'] = $inv_data['private_patient'] == "1" ? "1" : "0";
    					$export_invoices_info[$data_type.$debitor_identification]['patient']['last_name'] = $inv_data['patient_last_name'];
    					$export_invoices_info[$data_type.$debitor_identification]['patient']['first_name'] = $inv_data['patient_first_name'];
    					$export_invoices_info[$data_type.$debitor_identification]['patient']['street'] = $inv_data['patient_street'];
    					$export_invoices_info[$data_type.$debitor_identification]['patient']['zip'] = $inv_data['patient_zip'];
    					$export_invoices_info[$data_type.$debitor_identification]['patient']['city'] = $inv_data['patient_city'];
					} elseif($data_type== 'healthinsurance') {
    					$export_invoices_info[$data_type.$debitor_identification]['health_insurance']['debitor_number'] = $inv_data['debitor_number'];
    					$export_invoices_info[$data_type.$debitor_identification]['health_insurance']['name'] = $inv_data['health_insurance_company'];
    					$export_invoices_info[$data_type.$debitor_identification]['health_insurance']['street'] = $inv_data['health_insurance_street'];
    					$export_invoices_info[$data_type.$debitor_identification]['health_insurance']['zip'] = $inv_data['health_insurance_zip'];
    					$export_invoices_info[$data_type.$debitor_identification]['health_insurance']['city'] = $inv_data['health_insurance_city'];
					}
					
				}
			}
			
			
			
		 
			
			if(empty($invoice_values) ){
			    $this->_redirect(APP_BASE . "invoice/invoicejournal?msg=Keine_datein");
			    exit;
			}
			
// 			dd($export_invoices_info);
			$text .=implode("", $invoice_values);
 
			
			// save files and exported invoices
			if(!empty($text) && !empty($exported_invoices)){
			    
    			$ins_inv = new InvoicejournalExportFiles();
    			$ins_inv->clientid = $clientid;
    			$ins_inv->export_type = $export_type;
		        $ins_inv->export_content = serialize($text);
    			$ins_inv->export_invoices = serialize($exported_invoices);
    			$ins_inv->save();
    			$ins_id = $ins_inv->id;
    			
    			if($ins_id){
    			    $result = array();
    			    foreach($exported_invoices as $invoice_type => $exinvoices){
    			        
    			        foreach($exinvoices as $invoice_id){
    			            
        			        $result [] = array(
                                'clientid' => $clientid,
                                'export_type' => $export_type,
                                'export_file_id' => $ins_id,
                                'invoice_type' => $invoice_type,
                                'invoice' => 0,
                                'invoice_info' => serialize($export_invoices_info[$invoice_id])
        			        ); 
    			        }
    			    }

    			    if(count($result) > 0)
    			    {
    			        //insert many records with one query!!
    			        $collection = new Doctrine_Collection('InvoicejournalExportInvoices');
    			        $collection->fromArray($result);
    			        $collection->save();
    			    }
    			}
			}
			
			
			//ISPC-2452 Ancuta 21.11.2019
			//b) the debitor export (the file from this ticket) - can we name this "debitor_clientname_ddmmyyyy_hhmm"
		
			$file_time = date("dmY_Hm");
			$client_name = Pms_CommonData::filter_filename($client_data['client_name'], true);
			$filename_text ="debitor_".$client_name.'_'.$file_time;
			$filename = $filename_text.'.txt';
			// --
			
			header('Content-Encoding: UTF-8');
			header('Content-type: text/plain; charset=utf-8; codepage="4110"');
			header("Content-Disposition: attachment; filename=" . $filename);
			$content = $text;
			
			echo $content;
			
		}
		
		/**
		 * @Ancuta 19.10.2018 = ISPC-2272
		 * @param number $clientid
		 * @param unknown $data
		 * @param string $export_type
		 * @param string $filename
		 */
		public function generateSHTXT($clientid = 0, $data = array(), $export_type = "sh_txt", $filename = 'export.txt')
		{
		    
			// ISPC-2272
			if(empty($clientid) || empty($data)){
                $this->_redirect(APP_BASE . "invoice/invoicejournal?msg=Keine_datein");
                exit;   
			}

			$ilines = array();
			$exported_invoices = array();
		    foreach($data as $jurnal_line => $invoices_data )
		    {
		        foreach($invoices_data as $inv_id => $inv_data){
		            
		            $invoice_export_values = array();
		            // line one
		            $invoice_export_values[1] = "F";
		            $invoice_export_values[2] = "0";
		            $invoice_export_values[3] = $inv_data['client_company_number'];//"120"; // Changed to client new input  Firmen-Nummer (07.11.2018)
		            $invoice_export_values[4] = "";
		            $invoice_export_values[5] = "";
		            $invoice_export_values[6] = "EG";
		            $invoice_export_values[7] = date("dmY",strtotime($inv_data['invoice_date']));
		            $invoice_export_values[8] = date("mY",strtotime($inv_data['invoice_start']));//ISPC-2272 changed by Ancuta from invoice_date to invoice_start 19.02.2019
		            $invoice_export_values[9] = "";
		            $invoice_export_values[10] = $inv_data['invoice_number'];
			        $invoice_export_values[11] = ( ! empty($inv_data['user_debitor_number'])) ? $inv_data['user_debitor_number'] : "";
		            $invoice_export_values[12] = $inv_data['user_specific_number'];//"68110"; // Changed to user specific 07.11.2018
		            $invoice_export_values[13] = "-1";
		            $invoice_export_values[14] = "";
		            $invoice_export_values[15] = "-".$inv_data['invoice_amount'];
		            $invoice_export_values[16] = "'".$inv_data['user_name']." ".date("m/y",strtotime($inv_data['invoice_start'])) ." ".$inv_data['last_name']." ".$inv_data['first_name'].", ".$inv_data['birthd']."'";//ISPC-2272 changed by Ancuta from invoice_date to invoice_start 23.05.2019
		            $invoice_export_values[17] = "";
		            $invoice_export_values[18] = "";
		            $invoice_export_values[19] = "EUR";
		            $invoice_export_values[20] = "";
		            $invoice_export_values[21] = "";
		            $invoice_export_values[22] = "";
		            $invoice_export_values[23] = "";
		            $invoice_export_values[24] = "";
		            $invoice_export_values[25] = "";
		            $invoice_export_values[26] = "";
		            $invoice_export_values[27] = "";
		            $invoice_export_values[28] = "";
		            $invoice_export_values[29] = "";
		            $invoice_export_values[30] = "";
		            $invoice_export_values[31] = "";
		            $invoice_export_values[32] = "";
		            $invoice_export_values[33] = "";
		            $invoice_export_values[34] = "";
		            $invoice_export_values[35] = "";
		            $invoice_export_values[36] = "";
		            $invoice_export_values[37] = "";
		            $invoice_export_values[38] = "";
		            $invoice_export_values[39] = "";
		            $invoice_export_values[40] = "";
		            $invoice_export_values[41] = "";
		            $invoice_export_values[42] = "";
		            $invoice_export_values[43] = "";
		            $invoice_export_values[44] = "";
		            $invoice_export_values[45] = "''";
		            $invoice_export_values[46] = "''";
		            $invoice_export_values[47] = "''";
		            $invoice_export_values[48] = "''";
		            $invoice_export_values[49] = "''";
		            $invoice_export_values[50] = "''";
		            $invoice_export_values[51] = "''";
		            $invoice_export_values[52] = "''";
		            $invoice_export_values[53] = "'SAPV ".date("m/y",strtotime($inv_data['invoice_start'])) ." ".$inv_data['last_name']." ".$inv_data['first_name'].", ".$inv_data['birthd']."'";//ISPC-2272 changed by Ancuta from invoice_date to invoice_start 23.05.2019
		            $invoice_export_values[54] = "'".$inv_data['invoice_number']."'";
		            $invoice_export_values[55] = "";
		            $invoice_export_values[56] = "";
		            $invoice_export_values[57] = "";
		            $invoice_export_values[58] = "";
		            $invoice_export_values[59] = "";
		            $invoice_export_values[60] = "";
		            $invoice_export_values[61] = "";
		            $invoice_export_values[62] = "";
		            $invoice_export_values[63] = "";
		            $invoice_export_values[64] = "";
		            $invoice_export_values[65] = "";
		            $invoice_export_values[66] = "";

		            $invoices2lines[$inv_data['invoice_id']]['line_1']  = implode(',',$invoice_export_values);
		            
		            
		            
		            //line 2
		            $invoice_export_values_2 = array();
		            $invoice_export_values_2[1] = "K";
		            $invoice_export_values_2[2] = "0";
		            $invoice_export_values_2[3] = $inv_data['client_cost_center'];//"0810"; // Changed to client new input  Kostenstelle (07.11.2018)
		            $invoice_export_values_2[4] = "";
		            $invoice_export_values_2[5] = "";
		            $invoice_export_values_2[6] = "";
		            $invoice_export_values_2[7] = "";
		            $invoice_export_values_2[8] = "";
		            $invoice_export_values_2[9] = $inv_data['invoice_amount'];
		            $invoice_export_values_2[10] = "";
		            $invoice_export_values_2[11] = $inv_data['user_specific_number'];//"68110"; // Changed to user specific 07.11.2018
		            $invoice_export_values_2[12] = "";
		            $invoice_export_values_2[13] = "";
		            $invoice_export_values_2[14] = "";
		            $invoice_export_values_2[15] = "";
		            $invoice_export_values_2[16] = "";
		            $invoice_export_values_2[17] = "";
		            $invoice_export_values_2[18] = "";

		            $invoices2lines[$inv_data['invoice_id']]['line_2']  = implode(',',$invoice_export_values_2);
		            
		            $ilines[]  =  $invoices2lines[$inv_data['invoice_id']]['line_1']."\r\n".$invoices2lines[$inv_data['invoice_id']]['line_2'];
		            
		            $exported_invoices[$inv_data['invoice_type']][] = $inv_data['invoice_id'];
		        }
		    }

		    $text_lineas = implode("\r\n",$ilines);
		    $text = iconv("UTF-8", "Windows-1252", $text_lineas); // TODO-2296 Ancuta 10.05.2019

			// save files and exported invoices
			if(!empty($text) && !empty($exported_invoices)){
			    
    			$ins_inv = new InvoicejournalExportFiles();
    			$ins_inv->clientid = $clientid;
    			$ins_inv->export_type = $export_type;
    			$ins_inv->export_content = serialize($text);
    			$ins_inv->export_invoices = serialize($exported_invoices);
    			$ins_inv->save();
    			$ins_id = $ins_inv->id;
    			
    			if($ins_id){
    			    $result = array();
    			    foreach($exported_invoices as $invoice_type => $exinvoices){
    			        
    			        foreach($exinvoices as $invoice_id){
    			            
        			        $result [] = array(
                                'clientid' => $clientid,
                                'export_type' => $export_type,
                                'export_file_id' => $ins_id,
                                'invoice_type' => $invoice_type,
                                'invoice' => $invoice_id
        			        ); 
    			        }
    			    }

    			    if(count($result) > 0)
    			    {
    			        //insert many records with one query!!
    			        $collection = new Doctrine_Collection('InvoicejournalExportInvoices');
    			        $collection->fromArray($result);
    			        $collection->save();
    			    }
    			}
			}
			// TODO-2296 Ancuta 10.05.2019 - Changed from UTF-8 to Windows-1252  
			header('Content-Encoding: Windows-1252');
			header('Content-type: text/plain; charset=WINDOWS-1252');
			header("Content-Disposition: attachment; filename=" . $filename);
			$content = $text;
			
			echo $content;
			
		}
		
		/**
		 * 
		 * @Ancuta 09.11.2018
		 * @param number $clientid
		 * @param unknown $data
		 * @param string $export_type
		 * @param string $filename
		 */
		
		public function generateSH_external_TXT($clientid = 0, $data = array(), $export_type = "sh_external_txt", $filename = 'export.er2')
		{
			// ISPC-2272  - EXTERNAL
			if(empty($clientid) || empty($data)){
                $this->_redirect(APP_BASE . "invoice/invoicejournal?msg=Keine_datein");
                exit;   
			}
			$patientmaster = new PatientMaster();
			$ilines = array();
			$ilines_arr = array();
			$exported_invoices = array();

			
			// get here all invoice items
			$invoice_ids = array();
			$invoice_dates = array();
			$invoice2days = array();
			
			foreach($data as $jurnal_line => $invoices_data )
			{
			    $ival = array();
			    foreach($invoices_data as $inv_id => $inv_data)
			    {
        			$invoice_ids[] = $inv_data['invoice_id']; 
        			$invoice_ipids[] = $inv_data['patient_ipid']; 
        			
        			$invoice_dates[] = date("Y-m-d",strtotime($inv_data['invoice_start']));
        			$invoice_dates[] = date("Y-m-d",strtotime($inv_data['invoice_end']));
        			$invoice2period[$inv_data['invoice_id']]['start'] = date("Y-m-d",strtotime($inv_data['invoice_start']));
        			$invoice2period[$inv_data['invoice_id']]['end'] = date("Y-m-d",strtotime($inv_data['invoice_end']));
        			$invoice2ipid[$inv_data['invoice_id']] = $inv_data['patient_ipid'];
        			$invoice2days[$inv_data['invoice_id']] = $patientmaster->getDaysInBetween(date("Y-m-d",strtotime($inv_data['invoice_start'])),  date("Y-m-d",strtotime($inv_data['invoice_end'])),false,"d.m.Y");
        			
        			//ISPC-2272 Ancuta 30-31.03.2020
        			if($inv_data['storno'] == '1'){
        			    $invoice_ids[] = $inv_data['record_id'];
        			    $invoice2ipid[$inv_data['record_id']] = $inv_data['patient_ipid'];
        			    $invoice2days[$inv_data['record_id']] = $patientmaster->getDaysInBetween(date("Y-m-d",strtotime($inv_data['invoice_start'])),  date("Y-m-d",strtotime($inv_data['invoice_end'])),false,"d.m.Y");
        			}
        			//--
			    }
			}
			
			usort($invoice_dates, array(new Pms_Sorter(), "_date_compare"));
			
			$invoice_period['start'] = $invoice_dates[0]; 
			$invoice_period['end'] = end($invoice_dates); 
			
			$conditions['periods'][0]['start'] = $invoice_period['start'];
			$conditions['periods'][0]['end'] = $invoice_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $invoice_ipids;
			$patient_days = Pms_CommonData::patients_days($conditions);
			
			// get all sh anlage   - relevant data :: The health insurance billing
           $anlage_14_control = new Anlage14Control();
           $invoice_data = $anlage_14_control->anlage_14_invoicesactions($clientid, $patient_days, $invoice_period);
			 
           $special_sh_arr['visits'] = array('sh_flatrate','');
           $special_sh_arr['visits'] = array('sh_flatrate');
           $billed_days = array();
           $flatrate_billed_days = array();
           $billed_days_system = array();
           
           
           foreach($invoice_data['master_data_invoices'] as $patient_ipid => $billable_days){
            $w = 0;
            foreach ($billable_days as $day => $sh_items) {
                foreach ($sh_items as $shortcut => $vals) {
                    
                    $sapv_day_type = "";
                    $sapv_day_type = $invoice_data['export_data'][$patient_ipid]['sapv_day2sapv_type'][$day];
                    
                    if ($vals['checked'] == "1") {
                        
                        if ($shortcut == 'sh_flatrate') {
                            
                            if (! in_array($day, $billed_days[$patient_ipid]['sh_overall_doc_nur_non_hospiz'][$sapv_day_type])){
                                
                                $cumulate[$patient_ipid][$w]['daytype'] = $sapv_day_type;
                                $cumulate[$patient_ipid][$w]['day'] = $day;
                                $cumulate[$patient_ipid][$w]['shortcut'] = $shortcut;
                                $cumulate[$patient_ipid][$w]['billed_as'] = "VISIT";
                                $billed_days[$patient_ipid]['sh_overall_doc_nur_non_hospiz'][$sapv_day_type][] = $day;
                                $billed_days_system[$patient_ipid][$sapv_day_type]['sh_overall_doc_nur_non_hospiz'][] = $day;
                                
                                $flatrate_billed_days[$patient_ipid][] = $day;
                                $w ++;
                            }
                        } elseif (($shortcut == 'sh_nur_non_hospiz_visits' || $shortcut == 'sh_doc_non_hospiz_visits')) {
                            
                            if (! in_array($day, $billed_days[$patient_ipid]['sh_overall_doc_nur_non_hospiz'][$sapv_day_type]) 
                                && ! in_array($day, $flatrate_billed_days[$patient_ipid])
                                
                                ) {
                                
                                $cumulate[$patient_ipid][$w]['daytype'] = $sapv_day_type;
                                $cumulate[$patient_ipid][$w]['day'] = $day;
                                $cumulate[$patient_ipid][$w]['shortcut'] = $shortcut;
                                $cumulate[$patient_ipid][$w]['billed_as'] = "VISIT";
                                $billed_days[$patient_ipid]['sh_overall_doc_nur_non_hospiz'][$sapv_day_type][] = $day;
                                $billed_days_system[$patient_ipid][$sapv_day_type]['sh_overall_doc_nur_non_hospiz'][] = $day;
                                $w ++;
                            }
                        } elseif (($shortcut == 'sh_nur_hospiz_visits' || $shortcut == 'sh_doc_hospiz_visits')) {
                            
                            if (! in_array($day, $billed_days[$patient_ipid]['sh_overall_doc_nur_hospiz'][$sapv_day_type]) 
                                && ! in_array($day, $flatrate_billed_days[$patient_ipid])
                                ) {
                                
                                $cumulate[$patient_ipid][$w]['daytype'] = $sapv_day_type;
                                $cumulate[$patient_ipid][$w]['day'] = $day;
                                $cumulate[$patient_ipid][$w]['shortcut'] = $shortcut;
                                $cumulate[$patient_ipid][$w]['billed_as'] = "hospiz visit";
                                $billed_days[$patient_ipid]['sh_overall_doc_nur_hospiz'][$sapv_day_type][] = $day;
                                $billed_days_system[$patient_ipid][$sapv_day_type]['sh_overall_doc_nur_hospiz'][] = $day;
                                $w ++;
                            }
                        } elseif ($shortcut == 'sh_telefonat') {
                            
                            if (! in_array($day, $billed_days[$patient_ipid]['sh_overall_phones'][$invoice_data['export_data'][$patient_ipid]['sapv_day2sapv_type'][$day]])) {
                                
                                $cumulate[$patient_ipid][$w]['daytype'] = $invoice_data['export_data'][$patient_ipid]['sapv_day2sapv_type'][$day];
                                $cumulate[$patient_ipid][$w]['day'] = $day;
                                $cumulate[$patient_ipid][$w]['shortcut'] = $shortcut;
                                $cumulate[$patient_ipid][$w]['billed_as'] = "phone";
                                $billed_days[$patient_ipid]['sh_overall_phones'][$invoice_data['export_data'][$patient_ipid]['sapv_day2sapv_type'][$day]][] = $day;
                                $billed_days_system[$patient_ipid][$sapv_day_type]['sh_overall_phones'][] = $day;
                                // Calculate multiple
                                if($vals['qty']>1 ){
                                    $billed_days[$patient_ipid]['sh_overall_phones'][$invoice_data['export_data'][$patient_ipid]['sapv_day2sapv_type'][$day]][] = $day;
                                    $billed_days_system[$patient_ipid][$sapv_day_type]['sh_overall_phones'][] = $day.' '.$vals['qty'];
                                }
                                
                                $w ++;
                            }
                        } elseif ($shortcut == 'sh_beko') {
                            if (! in_array($day, $billed_days[$patient_ipid]['sh_overall_beko'][2])) {
                                
                                $cumulate[$patient_ipid][$w]['daytype'] = "2"; // Force to be billed as KO
                                $cumulate[$patient_ipid][$w]['day'] = $day;
                                $cumulate[$patient_ipid][$w]['shortcut'] = $shortcut;
                                $cumulate[$patient_ipid][$w]['billed_as'] = "coordinator";
                                $billed_days[$patient_ipid]['sh_overall_beko'][2][] = $day;
                                $billed_days_system[$patient_ipid][2]['sh_overall_beko'][] = $day;
                                $w ++;
                            }
                        } elseif ($shortcut == 'sh_folgeko') {
                            if (! in_array($day, $billed_days[$patient_ipid]['sh_overall_folgeko'][2])) {
                                
                                $cumulate[$patient_ipid][$w]['daytype'] = "2"; // Force to be billed as KO
                                $cumulate[$patient_ipid][$w]['day'] = $day;
                                $cumulate[$patient_ipid][$w]['shortcut'] = $shortcut;
                                $cumulate[$patient_ipid][$w]['billed_as'] = "Folgecoordinator";
                                $billed_days[$patient_ipid]['sh_overall_folgeko'][2][] = $day;
                                $billed_days_system[$patient_ipid][2]['sh_overall_folgeko'][] = $day;
                                $w ++;
                            }
                        }
                    }
                }
            }
        }
           
           // get all items from invoices 
           $sh_invoice_items = new ShInvoiceItems();
           $inv_items = $sh_invoice_items->getInvoicesItems($invoice_ids);
           
           $sapve_code_type = array(
               "2"=>"43200", //KO
               "3"=>"43210",//TV
               "4"=>"43220"//VV
           );
           
           $new_invoice = array();
           foreach($inv_items as $invoice_id=>$items_on_invoice)
           {
               foreach($items_on_invoice as $iident => $itm)
               {
                    if(in_array($itm['shortcut'],array('sh_overall_beko','sh_overall_folgeko')))
                    {

                        if( $itm['qty'] != 0 && ! empty( $billed_days[$invoice2ipid[$itm['invoice']]][$itm['shortcut']][2]) )
                        {
                            $new_invoice[$itm['invoice']][$sapve_code_type['2']] += $itm['qty']*$itm['price']; // STRICT TO SAVED INVOICE ITEMS
                            // here we add botk ko items 
                        }

                    } else { 
                        if( ! empty( $billed_days[$invoice2ipid[$itm['invoice']]][$itm['shortcut']]) ) 
                        {
                            
                            $invoice_count[$itm['invoice']][$itm['shortcut']] = 0;
                            if($itm['shortcut'] == 'sh_overall_phones'){
                                foreach($billed_days[$invoice2ipid[$itm['invoice']]][$itm['shortcut']] as $sapv_type=> $bil_days ){
                                    foreach($bil_days as $kd=>$bday){
                                        if( in_array($bday,$invoice2days[$itm['invoice']]) && $invoice_count[$itm['invoice']][$itm['shortcut']] < $itm['qty']){
                                            $new_invoice[$itm['invoice']][$sapve_code_type[$sapv_type]] +=  $itm['price'];
                                            $new_invoicex[$itm['invoice']][$sapve_code_type[$sapv_type]][] =  $bday." ".$itm['qty']." PHONE - ".$itm['price']." ".$itm['shortcut'].' '. $invoice_count[$itm['invoice']][$itm['shortcut']] ." SAPV: ".$sapv_type;
                                            $invoice_count[$itm['invoice']][$itm['shortcut']]++;
                                        }
                                    }
                                }
                                
                            } else {
                                
                                foreach($billed_days[$invoice2ipid[$itm['invoice']]][$itm['shortcut']] as $sapv_type=> $bil_days ){
    
                                    foreach($bil_days as $kd=>$bday){
                                        
                                        if( in_array($bday,$invoice2days[$itm['invoice']]) && $invoice_count[$itm['invoice']][$itm['shortcut']] < $itm['qty'])
                                        {
                                            $new_invoice[$itm['invoice']][$sapve_code_type[$sapv_type]] +=  $itm['price']; 
                                            $new_invoicex[$itm['invoice']][$sapve_code_type[$sapv_type]][] =  $bday." - ".$itm['price']." ".$itm['shortcut'].' '. $invoice_count[$itm['invoice']][$itm['shortcut']] ." SAPV: ".$sapv_type;
                                            $invoice_count[$itm['invoice']][$itm['shortcut']]++;
                                        }
                                    }
                                    
                                }
                            }
                        }
                    }
               }
           }
           
           
//            $logininfo = new Zend_Session_Namespace('Login_Info');
//            $userid = $logininfo->userid;
//            if($userid == "338ZZZZ"){
//                echo "<pre/>";
//                print_R($invoice2days);
//                print_R($billed_days);
//                print_R("\n invoice data ");
//                print_R($invoice_data['export_data']);
//                print_R("\n invoice cumu ");
//                print_R($cumulate);
//                print_R("\n invoice ITEMS ");
//                print_R($inv_items);
//                print_R("\n new_invoice ");
//                print_R($new_invoice);
//                exit;
               
//            }

           // ISPC-2424 Ancuta 11.11.2019
           if($export_type == "pdf-sh"){
//                client_cost_center
//                dd($new_invoice);
//                dd($data,$new_invoice);
               $pdf_data = array();
               $ln=0;
               foreach ($data as $jln => $inv_data_arr){
                   foreach($inv_data_arr as $invoice_id=>$invoice_data_arr){
                       if(!empty($new_invoice[$invoice_id])){
                           foreach($new_invoice[$invoice_id] as $item_account => $item_price){
                               $pdf_data[$ln] = $invoice_data_arr;
                               $pdf_data[$ln]['item_account'] = $item_account;
                               $pdf_data[$ln]['item_amount'] = $item_price;
                               $ln++;
                           }
                       } else{
                           $pdf_data[$ln] = $invoice_data_arr;
                           $pdf_data[$ln]['item_account'] = '';
                           $pdf_data[$ln]['item_amount'] = $invoice_data_arr['invoice_total_ammount'];
                           $ln++;
                       }
                   }
               }
               $post = $_POST;
               $post['clientid']= $clientid;
               $clientinfo = Client::getClientDataByid($clientid);
               $post['clientinfo']= $clientinfo[0];
               $post['invoice_data'] = $pdf_data;
               
               $this->generate_pdf($post, "InvoiceJournal_sh", "invoicejournal_sh_pdf.html", "p");
               exit;
           }
           //--
		
           // ISPC-2424 Lore 20.02.2020  TODO-2915
           if($export_type == "excel-sh"){
               //                client_cost_center
               //                dd($new_invoice);
               //                dd($data,$new_invoice);
               $pdf_data = array();
               $ln=0;
               foreach ($data as $jln => $inv_data_arr){
                   foreach($inv_data_arr as $invoice_id=>$invoice_data_arr){
                       if(!empty($new_invoice[$invoice_id])){
                           foreach($new_invoice[$invoice_id] as $item_account => $item_price){
                               $pdf_data[$ln] = $invoice_data_arr;
                               $pdf_data[$ln]['item_account'] = $item_account;
                               $pdf_data[$ln]['item_amount'] = $item_price;
                               $ln++;
                           }
                       } else{
                           $pdf_data[$ln] = $invoice_data_arr;
                           $pdf_data[$ln]['item_account'] = '';
                           $pdf_data[$ln]['item_amount'] = $invoice_data_arr['invoice_total_ammount'];
                           $ln++;
                       }
                   }
               }
               $post = $_POST;
               $post['clientid']= $clientid;
               $clientinfo = Client::getClientDataByid($clientid);
               $post['clientinfo']= $clientinfo[0];
               $post['invoice_data'] = $pdf_data;
               
               $export_data = array();
 							
               $header_row = array(
                   1 => '#',
                   2 => 'Konto',
                   3 => 'Gegenkonto',
                   4 => 'KST',
                   5 => 'Buch.Datum',
                   6 => 'Belegdatum',
                   7 => 'BelegNr',
                   8 => 'Betrag',
                   9 => 'Patient Name',
                  10 => 'Krankenversicherung'
               );
               
               $export_data[0] = $header_row;
               
               $i = 1;
               foreach($post['invoice_data'] as $row)
               {
                   $new_ammount = str_replace( '.', ',', $row['item_amount']);
                   $model_row = array(
                       1 => $i,
                       2 => $row['debitor_number'],
                       3 => $row['item_account'],
                       4 => $row['client_cost_center'],
                       5 => date(' m.Y', strtotime($row['invoice_date']) ),      // TODO-2915 Lore 25.02.2020
                       6 => date('d.m.Y', strtotime($row['invoice_date']) ),
                       7 => $row['invoice_number'],
                            //8 => $row['item_amount'].' €',                            // TODO-2915 Lore 25.02.2020
                       8 => $new_ammount.' €',                                  //TODO-3052 Lore 02.04.2020
                       9 => $row['first_name'].' '. $row['last_name'] ,
                       10 => $row['health_insurance_company']
                       
                   );
                   
                   for ($j=1; $j<11; $j++) {
                       if ( ! isset($model_row[$j])) {
                           $model_row[$j] = '';
                       }
                   }
                   ksort($model_row);
                   
                   $export_data[$i] = $model_row ;
                   
                   $i++;
                   
               }
               $this->generatePHPExcel('Rechnungsausgangsjournal_SH', $export_data);
               
               exit;

           }
           
		    foreach($data as $jurnal_line => $invoices_data )
		    {
		        $ival = array();
		        foreach($invoices_data as $inv_id => $inv_data)
		        {
		            //ISPC-2272 Ancuta 30-31.03.2020
		            if($inv_data['storno'] == "1"){
		               $new_invoice[$inv_data['invoice_id']] = $new_invoice[$inv_data['record_id']];
		            }
		            //-- 
		            
		            
		            /* ============================================== */
		            /* ============================================== */
		            /* =============== S - start ==================== */
		            /* ============================================== */
		            /* ============================================== */
		            $ival['S']['1'] = "S";
		            $ival['S']['2'] = "0";
		            $ival['S']['3'] = "D";
		            $ival['S']['4'] = $inv_data['debitor_number'];
		            
		            $ival['S']['5'] = "";
		            
		            $ival['S']['6'] = $inv_data['private_patient'] == "1" ? "'".$inv_data['patient_full_name']."'" : "'".$inv_data['health_insurance_company']."'";
		            $ival['S']['7'] = $inv_data['private_patient'] == "1" ? "' '" :  (!empty($inv_data['health_insurance_company']) ? "'Krankenkasse'" : "''");
   		            
		            $ival['S']['8'] = "";
		            $ival['S']['9'] = "";
		            $ival['S']['10'] = "";
		            $ival['S']['11'] = "";
		            $ival['S']['12'] = "";
		            $ival['S']['13'] = "";
		            
		            $ival['S']['14'] = $inv_data['private_patient'] == "1" ? "SZ" :  (!empty($inv_data['health_insurance_company']) ? "KK" : "");
		            $ival['S']['15'] = "D";
		            
		            $ival['S']['16'] = "";
		            $ival['S']['17'] = "";
		            $ival['S']['18'] = "";
		            $ival['S']['19'] = "";
		            $ival['S']['20'] = "";
		            $ival['S']['21'] = "";
		            $ival['S']['22'] = "";
		            $ival['S']['23'] = "";
		            $ival['S']['24'] = "";
		            $ival['S']['25'] = "";
		            
		            $ival['S']['26'] = $inv_data['private_patient'] == "1" ? "'".$inv_data['patient_first_name']."'" : "''";
		            $ival['S']['27'] = $inv_data['private_patient'] == "1" ? "'".$inv_data['patient_last_name']."'" : (!empty($inv_data['health_insurance_company']) ? "'".$inv_data['health_insurance_company']."'" : "''");
		            
		            $ival['S']['28'] = "' '";
		            $ival['S']['29'] = ""; 
		            
		            $ival['S']['30'] = $inv_data['private_patient'] == "1" ? "'".$inv_data['patient_street']."'" : (!empty($inv_data['health_insurance_street']) ? "'".$inv_data['health_insurance_street']."'" : "''");
		            $ival['S']['31'] = $inv_data['private_patient'] == "1" ? "'".$inv_data['patient_zip']."'" : (!empty($inv_data['health_insurance_zip']) ? "'".$inv_data['health_insurance_zip']."'" : "''");
		            $ival['S']['32'] = $inv_data['private_patient'] == "1" ? "'".$inv_data['patient_city']."'" : (!empty($inv_data['health_insurance_city']) ? "'".$inv_data['health_insurance_city']."'" : "''");

		            $ival['S']['33'] = "";
		            $ival['S']['34'] = "";
		            $ival['S']['35'] = "";
		            
		            $ival['S']['36'] = $inv_data['private_patient'] == "1" ? "'".$inv_data['patient_phone']."'" : (!empty($inv_data['health_insurance_city']) ? "'".$inv_data['health_insurance_phone']."'" : "''");

		            $ival['S']['37'] = "";
		            $ival['S']['38'] = "";
		            $ival['S']['39'] = "";
		            
		            $ival['S']['40'] = $inv_data['private_patient'] == "1" ? "'".$inv_data['patient_gender_title']."'" : "''";
		            
		            $ival['S']['41'] = "";
		            
		            $ival['S']['42'] = $inv_data['private_patient'] == "1" ? "'".$inv_data['patient_first_name']."'" : "''";
		            $ival['S']['43'] = $inv_data['private_patient'] == "1" ? "'".$inv_data['patient_last_name']."'" : "''";
		            
		            $ival['S']['44'] = "";
		            $ival['S']['45'] = "";
		            $ival['S']['46'] = "";
		            $ival['S']['47'] = "";
		            $ival['S']['48'] = "";
		            $ival['S']['49'] = "";
		            $ival['S']['50'] = "";
		            $ival['S']['51'] = "D";
		            $ival['S']['52'] = "";
		            $ival['S']['53'] = "";
		            $ival['S']['55'] = "";
		            $ival['S']['56'] = "";
		            /* ============================================== */
		            /* ============================================== */
		            /* =============== S - end ====================== */
		            /* ============================================== */
		            /* ============================================== */
		            
		            
		            
		            /* ============================================== */
		            /* ============================================== */
		            /* =============== F - start ====================== */
		            /* ============================================== */
		            /* ============================================== */
		            $ival['F']['1'] = "F";
		            $ival['F']['2'] = "0";
		            $ival['F']['3'] = $inv_data['client_company_number'];
		            $ival['F']['4'] = "";
		            $ival['F']['5'] = "";
		            $ival['F']['6'] = "ISPC";
		            $ival['F']['7'] = date("dmY",strtotime($inv_data['invoice_date']));
		            $ival['F']['8'] = date("mY",strtotime($inv_data['invoice_start'])); //ISPC-2272 changed by Ancuta from invoice_date to invoice_start 18.02.2019
		            $ival['F']['9'] = $inv_data['invoice_number'];
		            $ival['F']['10'] = $inv_data['invoice_number'];
		            $ival['F']['11'] = $inv_data['debitor_number'];
		            
		            if(empty($new_invoice[$inv_data['invoice_id']])){
       		            $ival['F']['12'] = "";
		            } else {
    		            
		                if(count($new_invoice[$inv_data['invoice_id']]) == "1") {
    		                $inccodes  = array_keys($new_invoice[$inv_data['invoice_id']]);
        		            $ival['F']['12'] = $inccodes[0] ;
    		            } else {
        		            $ival['F']['12'] = "";
    		            }
		            }
		            
		            
		            $ival['F']['13'] = "3";
		            
		            $ival['F']['14'] = "";
		            
/* 		            //ISPC-2272 Ancuta 25.11.2020 - So the F-Line must have a positive amount
		            //$ival['F']['15'] = $inv_data['storno'] == "1" ? "-".$inv_data['invoice_amount'] : $inv_data['invoice_amount'];
		            $ival['F']['15'] = $inv_data['storno'] == "1" ? $inv_data['invoice_amount'] : $inv_data['invoice_amount'];
		            //-- */
		            //ISPC-2272 Lore 26.01.2021 - So for a Storno the F-Line should have a negative amount
		            $ival['F']['15'] = $inv_data['storno'] == "1" ? "-".$inv_data['invoice_amount'] : $inv_data['invoice_amount'];
		            //--
		            $ival['F']['16'] = "'".($inv_data['storno'] == "1" ? "St." : "Re.") .$inv_data['patient_first_name'].' '.$inv_data['patient_last_name'].' '.$inv_data['patient_birthd']."'";

		            $ival['F']['17'] = "";
		            $ival['F']['18'] = "";
		            
		            $ival['F']['19'] = "EUR";
		            
		            $ival['F']['20'] = "";
		            $ival['F']['21'] = "";
		            $ival['F']['22'] = "";
		            $ival['F']['23'] = "";
		            $ival['F']['24'] = "";
		            $ival['F']['25'] = "";
		            $ival['F']['26'] = "";
		            $ival['F']['27'] = "";
		            $ival['F']['28'] = "";
		            $ival['F']['29'] = "";
		            
		            $ival['F']['30'] = "R";
		            
		            $ival['F']['31'] = "";
		            $ival['F']['32'] = "";
		            $ival['F']['33'] = "";
		            $ival['F']['34'] = "";
		            $ival['F']['35'] = "";
		            
		            $ival['F']['36'] = "'".($inv_data['storno'] == "1" ? "St." : "Re.") .$inv_data['patient_first_name'].' '.$inv_data['patient_last_name'].' '.$inv_data['patient_birthd']."'";

		            $ival['F']['37'] = "";
		            $ival['F']['38'] = "";
		            $ival['F']['39'] = "";
		            
		            $ival['F']['40'] = "'ISPC'";
		            
		            $ival['F']['41'] = "";
		            $ival['F']['42'] = "";
		            $ival['F']['43'] = "";
		            $ival['F']['44'] = "";
		            
		            $ival['F']['45'] = "'".$inv_data['debitor_number']."'";
		            $ival['F']['46'] = "'".$inv_data['patient_last_name'].', '.$inv_data['patient_first_name']."'";
		            $ival['F']['47'] = "'".$inv_data['insurance_no']."'";

		            $ival['F']['48'] = "";
		            
		            $ival['F']['49'] = "'".$inv_data['patient_birthd']."'";
		            $ival['F']['50'] = "'".$inv_data['client_cost_center']."'";
		            $ival['F']['51'] = "'".$inv_data['client_team_name']."'";
		            $ival['F']['52'] = "'".$inv_data['invoice_start'].'-'.$inv_data['invoice_end']."'";
		            $ival['F']['53'] = "";
		            $ival['F']['54'] = "";
		            
		            /* =============== F - end ====================== */
		            
		            /*
		            if an invoice contains billed items of more than one SAPV type then the ammount is splitted to the different groups. 
		            -an invoice which contains just ONE type, has just one K line. 
		            -an invoice which contains 2 types has 2 K lines and 2 G lines.
                            a K & G complex is billing the ammount of the invoice for The SAPV type.
                    */ 
		            
		            //ISPC-2272 Lore 12.08.2020
		            if($inv_data['invoice_amount'][0] == '-'){
		                $inv_data['invoice_amount'] = substr($inv_data['invoice_amount'], 1);
		            }

		            
		            
		            if(empty($new_invoice[$inv_data['invoice_id']]) || count($new_invoice[$inv_data['invoice_id']]) == 1){
		                
		                /* =============== K - start ====================== */
		                $ival['K']['1'] = "K";
		                $ival['K']['2'] = "0";
		                $ival['K']['3'] = $inv_data['client_cost_center'];
		                $ival['K']['4'] = "";
		                $ival['K']['5'] = "V";
		                $ival['K']['6'] = "";
		                $ival['K']['7'] = "";
		                $ival['K']['8'] = "";
   		                //$ival['K']['9'] = $inv_data['storno'] == "1" ? "-".$inv_data['invoice_amount'] : $inv_data['invoice_amount'];
   		                
		                //ISPC-2272 Ancuta 25.11.2020 -  K-Line a negative amount
		                //$ival['K']['9'] = $inv_data['storno'] == "1" ? $inv_data['invoice_amount'] : "-".$inv_data['invoice_amount'];         //ISPC-2272 Lore 12.08.2020
		                $ival['K']['9'] = $inv_data['storno'] == "1" ? "-".$inv_data['invoice_amount'] : $inv_data['invoice_amount'];  
		                //--
		                $ival['K']['10'] = "";
		                $ival['K']['11'] = "";
		                $ival['K']['12'] = "";
		                $ival['K']['13'] = "";
		                $ival['K']['14'] = "";
		                $ival['K']['15'] = "";
		                $ival['K']['16'] = "";
		                $ival['K']['17'] = "";
		                /* =============== K - end ====================== */		                
		                
		            } 
		            else 
		            {
		                  $l =1;
		                  foreach($new_invoice[$inv_data['invoice_id']] as $sapv_code => $splited_amount){
        		            
        	                /* =============== G - start ====================== */
        		            $ival['G'.$l]['1'] = "G";
        		            $ival['G'.$l]['2'] = "0";
        		            $ival['G'.$l]['3'] = $sapv_code;
        		            $ival['G'.$l]['4'] = "3";
        		            $ival['G'.$l]['5'] = "";
        		            //$ival['G'.$l]['6'] = "-".number_format($splited_amount, '2', '.', '');
        		            $ival['G'.$l]['6'] = ($inv_data['storno'] == "1") ? number_format($splited_amount, '2', '.', '') : "-".number_format($splited_amount, '2', '.', '');             //ISPC-2272 Lore 12.08.2020
        		            
        		            //ISPC-2272 Ancuta 30-31.03.2020
        		            //$ival['G'.$l]['7'] = "'Re.".$inv_data['patient_first_name'].' '.$inv_data['patient_last_name'].''.$inv_data['patient_birthd']."'";
        		            $ival['G'.$l]['7'] = "'".($inv_data['storno'] == "1" ? "St." : "Re.").$inv_data['patient_first_name'].' '.$inv_data['patient_last_name'].''.$inv_data['patient_birthd']."'";
        		            //--
        		            /* =============== G - end ====================== */

        		            
        		            /* =============== K - start ====================== */
        	                $ival['K'.$l]['1'] = "K";
        	                $ival['K'.$l]['2'] = "0";
        	                $ival['K'.$l]['3'] = $inv_data['client_cost_center'];
        	                $ival['K'.$l]['4'] = "";
        	                $ival['K'.$l]['5'] = "V";
        	                $ival['K'.$l]['6'] = "";
        	                $ival['K'.$l]['7'] = "";
        	                $ival['K'.$l]['8'] = "";
        	                //$ival['K'.$l]['9'] = "-".number_format($splited_amount, '2', '.', '');
        	                //ISPC-2272 Ancuta 25.11.2020 -  K-Line a negative amount
        	                //$ival['K'.$l]['9'] = ($inv_data['storno'] == "1") ? number_format($splited_amount, '2', '.', '') : "-".number_format($splited_amount, '2', '.', '');           //ISPC-2272 Lore 12.08.2020
        	                $ival['K'.$l]['9'] = ($inv_data['storno'] == "1") ? "-".number_format($splited_amount, '2', '.', '') : number_format($splited_amount, '2', '.', '');         
        	                //--
        	                $ival['K'.$l]['10'] = "";
        	                $ival['K'.$l]['11'] = "";
        	                $ival['K'.$l]['12'] = "";
        	                $ival['K'.$l]['13'] = "";
        	                $ival['K'.$l]['14'] = "";
        	                $ival['K'.$l]['15'] = "";
        	                $ival['K'.$l]['16'] = "";
        	                $ival['K'.$l]['17'] = "";
        	                /* =============== K - end ====================== */
                            $l++;
		                  }
		            }

		            /* =============== O - start ====================== */
		            if($inv_data['storno'] == "1"){
		                
		                $ival['O']['1'] = "O";
		                $ival['O']['2'] = "0";
		                $ival['O']['3'] = $inv_data['invoice_number'];
		                $ival['O']['4'] = "-".$inv_data['invoice_amount'];
		                $ival['O']['5'] = "".$inv_data['debitor_number'];
		            }
		            /* =============== O - end ====================== */
		            
		            //$ival['X']['1'] = "";// DUMMY line to add  empty line between invoices
		            $ilines_arr[$inv_data['invoice_id']] = $ival;
		            $exported_invoices[$inv_data['invoice_type']][] = $inv_data['invoice_id'];
		           
		        }
		    }
		    
		    foreach($ilines_arr as $invoice_id => $invoice_lines){
		         foreach($invoice_lines as $lin3_ident=>$values){
    		         $lines[] = implode(";",$values);
		         }
		    }
		    
// 		    print_r($lines);exit;
		    $ilines = implode("\r\n",$lines);
		    $text = iconv("UTF-8", "Windows-1252", $ilines); // TODO-2296 Ancuta 10.05.2019
		    
		    
			// save files and exported invoices
			if(!empty($text) && !empty($exported_invoices)){
			    
    			$ins_inv = new InvoicejournalExportFiles();
    			$ins_inv->clientid = $clientid;
    			$ins_inv->export_type = $export_type;
    			$ins_inv->export_content = serialize($text);
    			$ins_inv->export_invoices = serialize($exported_invoices);
    			$ins_inv->save();
    			$ins_id = $ins_inv->id;
    			
    			if($ins_id){
    			    $result = array();
    			    foreach($exported_invoices as $invoice_type => $exinvoices){
    			        
    			        foreach($exinvoices as $invoice_id){
    			            
        			        $result [] = array(
                                'clientid' => $clientid,
                                'export_type' => $export_type,
                                'export_file_id' => $ins_id,
                                'invoice_type' => $invoice_type,
                                'invoice' => $invoice_id
        			        ); 
    			        }
    			    }

    			    if(count($result) > 0)
    			    {
    			        //insert many records with one query!!
    			        $collection = new Doctrine_Collection('InvoicejournalExportInvoices');
    			        $collection->fromArray($result);
    			        $collection->save();
    			    }
    			}
			}
			// TODO-2296 Ancuta 10.05.2019 - Changed from UTF-8 to Windows-1252
			$filename =  "Rechnungsausgangsjournal_External.er2";
			header('Content-Encoding: Windows-1252');
			header('Content-type: text/plain; charset=WINDOWS-1252');
			header("Content-Disposition: attachment; filename=" . $filename);
			$content = $text;
			
			echo $content;
			
		}
		

		//bw SGB XI invoices
		//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
		public function sgbxiinvoiceAction($params = array())
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$patientmaster = new PatientMaster();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$client = new Client();
			$sapvs = new SapvVerordnung();
			$sgbxiinvoices = new SgbxiInvoices();
			$p_sgbxi = new PriceSgbxi();

			if(isset($params) && !empty($params)){
			    $_REQUEST = $params;
			    $this->_helper->viewRenderer->setNoRender();
			}

			//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
			$clientid = isset($_REQUEST['clientid']) && ! empty($_REQUEST['clientid']) ? $_REQUEST['clientid'] :  $logininfo->clientid;
			$userid = isset($_REQUEST['userid']) && ! empty($_REQUEST['userid']) ? $_REQUEST['userid'] : $logininfo->userid;
			
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$client_details = $client->getClientDataByid($clientid);

			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			
			//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
			if($_REQUEST['bulk_print'] == '1' && strlen($_REQUEST['iid']) > 0){
			    $sgbxiinvoice_details = $sgbxiinvoices->getSgbxiInvoice($_REQUEST['iid']);
			    if($sgbxiinvoice_details['storno'] == '1'){
			        $_REQUEST['iid'] = $sgbxiinvoice_details['record_id'];
			        $_REQUEST['stornopdf'] = 1;
			        $_REQUEST['storno'] = $sgbxiinvoice_details['id'];
			    }
			}
			//--
			
			
			
			
			if(strlen($_REQUEST['iid']) > 0)
			{
				//get invoice address/footer
				$sgbxiinvoice_details = $sgbxiinvoices->getSgbxiInvoice($_REQUEST['iid']);
				$ipid = $sgbxiinvoice_details['ipid'];
				$decid = Pms_CommonData::getIdfromIpid($ipid);
				$invoicenumber = $sgbxiinvoice_details['invoice_number'];

				$pseudo_post['address'] = $sgbxiinvoice_details['address'];
				$pseudo_post['sapv_footer'] = $sgbxiinvoice_details['footer'];
				$pseudo_post['unique_id'] = $_REQUEST['iid'];
				$pseudo_post['prefix'] = $sgbxiinvoice_details['prefix'];


				$pseudo_post['start_sgbxi_activity'] = date('d.m.Y', strtotime($sgbxiinvoice_details['start_sgbxi']));
				$pseudo_post['end_sgbxi_activity'] = date('d.m.Y', strtotime($sgbxiinvoice_details['end_sgbxi']));

				$pseudo_post['first_active_day'] = date('d.m.Y', strtotime($sgbxiinvoice_details['start_active']));
				$pseudo_post['last_active_day'] = date('d.m.Y', strtotime($sgbxiinvoice_details['end_active']));

				if(strlen($_REQUEST['completed_date']) > '0')
				{
					$pseudo_post['completed_date'] = date('d.m.Y', $_REQUEST['completed_date']);
				}
				else
				{
					if($sgbxiinvoice_details['completed_date'] != '0000-00-00 00:00:00')
					{
						$pseudo_post['completed_date'] = date('d.m.Y', strtotime($sgbxiinvoice_details['completed_date']));
					}
					else
					{
						$pseudo_post['completed_date'] = date('d.m.Y', strtotime($sgbxiinvoice_details['create_date']));
					}
				}
				
				//ISPC-2747 Lore 27.11.2020
				if(strpos($sgbxiinvoice_details['show_boxes'], 'show_box_active') === false ){
				    $pseudo_post['show_box_active'] = '0';
				}else {
				    $pseudo_post['show_box_active'] = '1';
				}
				if(strpos($sgbxiinvoice_details['show_boxes'], 'show_box_patient') === false ){
				    $pseudo_post['show_box_patient'] = '0';
				}else {
				    $pseudo_post['show_box_patient'] = '1';
				}
				if(strpos($sgbxiinvoice_details['show_boxes'], 'show_box_sapv') === false ){
				    $pseudo_post['show_box_sapv'] = '0';
				}else {
				    $pseudo_post['show_box_sapv'] = '1';
				}

				$list = date('Y-m', strtotime($sgbxiinvoice_details['invoice_start']));
			}
			else
			{
				$pseudo_post['sapv_footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				$pseudo_post['completed_date'] = date('d.m.Y', time());
			}

			$pseudo_post['patid'] = $decid;
			$pseudo_post['ipid'] = $ipid;
			$pseudo_post['clientid'] = $clientid;
			
			//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
			if($_REQUEST['bulk_print'] == '1'){
			    
			    $pdet = $patientmaster->get_patients_details_By_Ipids(array($ipid));
			    $pm = $pdet[$ipid];
			    $pseudo_post['patientdetails'] = $pm;
			    
			} else{
    			$pm = $patientmaster->getMasterData($decid, 0);
    			$pseudo_post['patientdetails'] = $pm;
			}

			$hi_perms_divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);

			//health insurance
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$pseudo_post['insurance_no'] = $healthinsu_array[0]['insurance_no'];

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(empty($healthinsu_array[0]['name']))
				{
					$healthinsu_array[0]['name'] = $healtharray['name'];
				}
				if(empty($healthinsu_array[0]['ins_street']))
				{
					$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
				}
				if(empty($healthinsu_array[0]['ins_zip']))
				{
					$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
				}
				if(empty($healthinsu_array[0]['ins_city']))
				{
					$healthinsu_array[0]['ins_city'] = $healtharray['city'];
				}

				if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
				{
					$pseudo_post['health_insurance_ik'] = $healtharray['iknumber'];
				}

				if(strlen($healthinsu_array[0]['kvk_no']) == 0)
				{
					$pseudo_post['health_insurance_kassenr'] = $healtharray['kvnumber'];
				}
			}


			if($hi_perms_divisions)
			{
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
			}

			if($healthinsu_array[0]['privatepatient'] == "1")
			{
//			get patient name and adress
				$patient_address = '&nbsp;' . htmlspecialchars($pm['first_name']) . ' ' . htmlspecialchars($pm['last_name']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['street1']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['zip']) . ' ' . '&nbsp;' . htmlspecialchars($pm['city']);
			}

			if(!empty($healthinsu_subdiv_arr['2']['name']))
			{
				//get new SGB XI hi address
				$hi_address = '&nbsp;' . htmlspecialchars($healthinsu_subdiv_arr[2]['name']) . '<br />';
				$hi_address .= '&nbsp;' . htmlspecialchars($healthinsu_subdiv_arr[2]['insurance_provider']) . '<br />';
				//$hi_address .= '&nbsp;' . htmlspecialchars($healthinsu_subdiv_arr[2]['contact_person']) . '<br />';
				$hi_address .= '&nbsp;' . htmlspecialchars($healthinsu_subdiv_arr[2]['street1']) . '<br />';
				$hi_address .= '&nbsp;' . htmlspecialchars($healthinsu_subdiv_arr[2]['zip']) . ' ' . htmlspecialchars($healthinsu_subdiv_arr[2]['city']);

				$pseudo_post['health_insurance_ik'] = $healthinsu_subdiv_arr[1]['iknumber'];
				$pseudo_post['health_insurance_kassenr'] = $healthinsu_subdiv_arr[1]['kvnumber'];
			}
			else
			{
				//get old hi_address
				$hi_address = '&nbsp;' . htmlspecialchars($healthinsu_array[0]['name']) . '<br />';
				$hi_address .= '&nbsp;' . htmlspecialchars($healthinsu_array[0]['ins_insurance_provider']) . '<br />';
				//$hi_address .= '&nbsp;' . htmlspecialchars($healthinsu_array[0]['ins_contactperson']) . '<br />';
				$hi_address .= '&nbsp;' . htmlspecialchars($healthinsu_array[0]['ins_street']) . '<br />';
				$hi_address .= '&nbsp;' . htmlspecialchars($healthinsu_array[0]['ins_zip']) . ' ' . htmlspecialchars($healthinsu_array[0]['ins_city']);

				$pseudo_post['health_insurance_ik'] = $healthinsu_array[0]['institutskennzeichen'];
				$pseudo_post['health_insurance_kassenr'] = $healthinsu_array[0]['kvk_no'];
			}


			$pathealthinsurancenr = "";
			if(count($healthinsu_array[0]))
			{
				$phi_details = $healthinsu_array[0]['name'];
			}
			else
			{
				$phi_details = "--";
			}

			$phi_details_sub = $hi_address;

			$pseudo_post['health_insurance'] = $phi_details;


			//get admission-readmission cycles to extract months where there is at least 1 day active START
			//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
			//$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid),true,$clientid);//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020 - add client param
			$months = array();
			$active_days = array();
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));


					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{

					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}


				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
			}

			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}
			//get number of days in each month + start/end day START
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}

			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];

			$days_in_period = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			foreach($active_days as $k_active_day => $v_active_day)
			{
				if(in_array($v_active_day, $days_in_period))
				{
					$active_days_in_period[] = $v_active_day;
				}
			}

			//get hospital/hospiz in current period
			$hospital_days = $this->get_period_hospitals($ipid, $clientid, $current_period, $active_days_in_period);

			//get sapv in current period
			$sapv_days = $this->get_period_sapv($ipid, $current_period, $hospital_days);

			foreach($sapv_days as $k_s_days => $v_s_days)
			{
				$sapv_days_inperiod[] = $k_s_days;
			}
			asort($sapv_days_inperiod);

			if(empty($pseudo_post['first_sapv_day']))
			{
				if(count($sapv_days_inperiod) > 0)
				{
					$this->view->first_sapv_day = date('d.m.Y', strtotime($sapv_days_inperiod[0]));
					$last_date = end($sapv_days_inperiod);
					$this->view->last_sapv_day = date('d.m.Y', strtotime($last_date));
				}
				else
				{
					$this->view->first_sapv_day = ' - ';
					$this->view->last_sapv_day = ' - ';
				}
			}

			//get pflegestuffe in current period
			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $current_period['start'], $current_period['end']);

			if(count($pflege_arr) > '0')
			{
				$last_pflege = end($pflege_arr);
				if(strlen($last_pflege['stage']) > '0' && $last_pflege['stage'] != 'keine')
				{
					$patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$patient_pflegestufe = '-';
				}
			}
			else
			{
				$patient_pflegestufe = '-';
			}

			//get sapv(s) in current period
			$period_sapv = $sapvs->getSapvInPeriod($ipid, $current_period['start'], $current_period['end']);

			if($period_sapv[0]['approved_date'] != '0000-00-00 00:00:00' && strlen($period_sapv[0]['approved_date']) > 0 && $period_sapv[0]['approved_date'] != '1970-01-01 00:00:00')
			{
				$sapv_approve_date = date('d.m.Y', strtotime($period_sapv[0]['approved_date']));
			}
			else
			{
				$sapv_approve_date = '-';
			}

			if(strlen($period_sapv[0]['approved_number']) > 0)
			{
				$sapv_approve_nr = $period_sapv[0]['approved_number'];
			}
			else
			{
				$sapv_approve_nr = '-';
			}



			//get contact forms in current period
			$contact_forms_days = $this->get_period_contact_forms($ipid, $current_period, true);



			if(!empty($_REQUEST['visit_id']) && is_numeric($_REQUEST['visit_id']) && count($contact_forms_days[$_REQUEST['visit_id']]) > '0')
			{
				//set dates acording to the invoice selected
				$visitid = $_REQUEST['visit_id'];


				$pseudo_post['first_active_day'] = $contact_forms_days[$visitid]['start_date'];
				$pseudo_post['start_sgbv_activity'] = $contact_forms_days[$visitid]['start_date'];

				$pseudo_post['last_active_day'] = $contact_forms_days[$visitid]['end_date'];
				$pseudo_post['end_sgbv_activity'] = $contact_forms_days[$visitid]['end_date'];
			}
			else if(!empty($_REQUEST['iid']))
			{
				$pseudo_post['first_active_day'] = $sgbxiinvoice_details['start_active'];
				$pseudo_post['start_sgbv_activity'] = $sgbxiinvoice_details['start_sgbxi'];

				$pseudo_post['last_active_day'] = $sgbxiinvoice_details['end_active'];
				$pseudo_post['end_sgbv_activity'] = $sgbxiinvoice_details['end_sgbxi'];
			}

			//get real active patient days (active, with sapv and no hospital/hospiz)
			$real_active_days = $this->real_active_days($active_days_in_period, $hospital_days, $sapv_days);

			asort($real_active_days);


			if(count($cycles[$ipid]['admissionDates']) > 0)
			{
				foreach($cycles[$ipid]['admissionDates'] as $k_adm => $v_adm)
				{
					$start_periods[$k_adm] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$k_adm]))
					{
						$end_periods[$k_adm] = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$k_adm]['date']));
					}
					else
					{
						$end_periods[$k_adm] = date('Y-m-d', time());
					}
				}
			}
			else
			{
				$start_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));
				$end_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
			}

			$price_list = $p_list->get_client_list_period($current_period['start'], $current_period['end'],$clientid);
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$default_price_list = Pms_CommonData::get_default_price_shortcuts();
			$pricelist_sgbxi = $p_sgbxi->get_prices($price_list[0]['id'], $clientid, $shortcuts['sgbxi'], $default_price_list['sgbxi']);

//NEW INVOICE PROCESS 16.10.2013
			//set shortcut based on pflegestuffe
			$shortcut = '';
			if($patient_pflegestufe != '-')
			{
				if($patient_pflegestufe != '3+')
				{
					$shortcut = 'pf' . $patient_pflegestufe;
				}
				else
				{
					$shortcut = 'pf3';
				}

				$invoice_items['shortcuts'][0]['shortcut'] = $shortcut;
				$invoice_items['shortcuts'][0]['price'] = $pricelist_sgbxi[$shortcut]['price'];
				$invoice_items['shortcuts'][0]['qty'] = '1';
				$invoice_items['shortcuts'][0]['shortcut_total'] = $pricelist_sgbxi[$shortcut]['price'];
				$invoice_items['grand_total'] = $pricelist_sgbxi[$shortcut]['price'];
			}

			if($_REQUEST['pdfquick'] == '1' || $_REQUEST['mode'] == 'pdfs' || strlen($_POST['pdf']) > 0)
			{
				$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];
				$pseudo_post['client_details'] = $client_details[0];
				$pseudo_post['clientid'] = $clientid;
				$pseudo_post['period_days'] = $days_in_period;

				if(strlen($_REQUEST['iid']) == '0')
				{
					$pseudo_post['patient_address'] = $patient_address;
				}

				if(strlen($pseudo_post['address']) == '0')
				{
					$pseudo_post['address'] = $hi_address;
				}

				$pseudo_post['sapv_approve_date'] = $sapv_approve_date;
				$pseudo_post['sapv_approve_nr'] = $sapv_approve_nr;
				$pseudo_post['patient_pflegestufe'] = $patient_pflegestufe;


				if(strlen($_REQUEST['iid']))
				{
					$pseudo_post['address'] = $sgbxiinvoice_details['address'];
					$pseudo_post['patient_pflegestufe'] = $sgbxiinvoice_details['care_level'];

					$items_invoice['grand_total'] = $sgbxiinvoice_details['invoice_total'];

					foreach($sgbxiinvoice_details['items'] as $k_itm => $v_itm)
					{
						$items_invoice['shortcuts'][$v_itm['shortcut']] = $v_itm;
						$items_invoice['shortcuts'][$v_itm['shortcut']]['shortcut_total'] = ($v_itm['qty'] * $v_itm['price']);
					}

					$pseudo_post['invoice_items'] = $items_invoice;
				}
				else
				{
					$pseudo_post['invoice_items'] = $invoice_items;
				}

				if($_REQUEST['pdfquick'] != 1)
				{
//				21.06.2013 Added invoice number type START
					$sgbxi_inv = new SgbxiInvoices();
					$sgbxi_inv_number = $sgbxi_inv->get_next_invoice_number($clientid, true);
					$prefix = $sgbxi_inv_number['prefix'];
					$invoicenumber = $sgbxi_inv_number['invoicenumber'];
//				21.06.2013 Added invoice number type END

					$pseudo_post['prefix'] = $prefix;

					if(strlen($_REQUEST['visit']) && is_numeric($_REQUEST['visit']))
					{
						$visitid = $_REQUEST['visit'];
					}

					//insert invoice START
					$ins_inv = new SgbxiInvoices();
					$ins_inv->invoice_start = date('Y-m-d H:i:s', strtotime($current_period['start']));
					$ins_inv->invoice_end = date('Y-m-d H:i:s', strtotime($current_period['end']));
					$ins_inv->start_active = date('Y-m-d H:i:s', strtotime($pseudo_post['first_active_day']));
					$ins_inv->end_active = date('Y-m-d H:i:s', strtotime($pseudo_post['last_active_day']));
					$ins_inv->start_sgbxi = date('Y-m-d H:i:s', strtotime($pseudo_post['start_sgbv_activity']));
					$ins_inv->end_sgbxi = date('Y-m-d H:i:s', strtotime($pseudo_post['end_sgbv_activity']));
					$ins_inv->ipid = $ipid;
					$ins_inv->client = $clientid;
					$ins_inv->contact_form_id = $visitid;
					$ins_inv->prefix = $prefix;
					$ins_inv->invoice_number = $invoicenumber;
					$ins_inv->invoice_total = $invoice_items['grand_total'];
					$ins_inv->address = (strlen($pseudo_post['patient_address']) > '0') ? $pseudo_post['patient_address'] : $pseudo_post['address'];
					$ins_inv->care_level = $patient_pflegestufe;
					$ins_inv->status = '1'; // DRAFT - ENTWURF
					$ins_inv->save();

					$ins_id = $ins_inv->id;
//@todo add single insert item in sgbxi_items with ins_id

					if(count($pseudo_post['invoice_items']) > '0')
					{
						$ins_inv_item = new SgbxiInvoiceItems();
						$ins_inv_item->invoice = $ins_id;
						$ins_inv_item->client = $clientid;
						$ins_inv_item->shortcut = $invoice_items['shortcuts'][0]['shortcut'];
						$ins_inv_item->qty = $invoice_items['shortcuts'][0]['qty'];
						$ins_inv_item->price = $invoice_items['shortcuts'][0]['price'];
						$ins_inv_item->save();
					}

					$pseudo_post['unique_id'] = $ins_id;
				}

				//insert invoice END
				$pseudo_post['invoice_number'] = $invoicenumber;

				if($_REQUEST['mode'] == 'pdfs')
				{

					if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
					{
						$storno_data = $sgbxiinvoices->getSgbxiInvoice($_REQUEST['storno']);

						//ISPC-2532 Lore 09.11.2020
						$pseudo_post['storned_invoice_number'] = $pseudo_post['prefix'].$pseudo_post['invoice_number'];
						
						$pseudo_post['address'] = $storno_data['address'];
						$pseudo_post['prefix'] = $storno_data['prefix'];
						$pseudo_post['invoice_number'] = $storno_data['invoice_number'];

						if($storno_data['completed_date'] != '0000-00-00 00:00:00')
						{
						    $pseudo_post['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
						}

						$pseudo_post['first_active_day'] = date('d.m.Y', strtotime($storno_data['start_active']));
						$pseudo_post['last_active_day'] = date('d.m.Y', strtotime($storno_data['end_active']));
						if($storno_data['start_sgbxi'] != '0000-00-00 00:00:00' && $storno_data['end_sgbxi'] != '0000-00-00 00:00:00')
						{
							$pseudo_post['start_sgbv_activity'] = date('d.m.Y', strtotime($storno_data['start_sgbxi']));
							$pseudo_post['end_sgbv_activity'] = date('d.m.Y', strtotime($storno_data['end_sgbxi']));
						}


						$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];
						//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
						if($_REQUEST['bulk_print'] == '1'){
						    $pseudo_post['unique_id'] = $storno_data['id'];
						}else{
						    $pseudo_post['unique_id'] = $storno_data['record_id'];
						}
						$pseudo_post['grand_total'] = ($storno_data['invoice_total'] * (-1));

						$template_files = array('storno_invoice_sgbxi_pdf.html');
					}
					else
					{
						$template_files = array('invoice_sgbxi_pdf.html');
					}
					$orientation = array('P');
					$background_pages = array('0'); //0 is first page;
//				print_r($pseudo_post);exit;

					//ISPC-2747 Lore 11.12.2020
					if($sgbxiinvoice_details['custom_invoice'] == 'custom_invoice'){
					    $pseudo_post['insurance_no'] = $sgbxiinvoice_details['insurance_no'];
					    $pseudo_post['patient_pflegestufe'] = $sgbxiinvoice_details['patient_care'];
					}
					
                    //ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
					if($_REQUEST['bulk_print'] == '1'){
					    $pseudo_post['bulk_print'] = 1;
					    $pseudo_post['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
					    
					    $files = $this->generate_pdf($pseudo_post, "SGB_XI", $template_files, $orientation, $background_pages);
					    
					    return $files;
					   
					} else{
						//ISPC-2745 Carmen 17.11.2020
						//create batch name
						$Batch_name = false;
						$Batch_name = $pseudo_post['prefix'].$pseudo_post['invoice_number'];
						
						$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'bw_sgbxi_invoice');
						
						if($template_data)
						{
							// generate invoice page
							$tokenfilter = array();
							$tokenfilter['patient'] = $pseudo_post['patientdetails'];
							$tokenfilter['invoice']['healthinsurancenumber'] = $pseudo_post['insurance_no'];
							$tokenfilter['invoice']['institutskennzeichen'] = $pseudo_post['client_ik'];
								
							$tokenfilter['invoice']['prefix'] = $pseudo_post['prefix'];
							$tokenfilter['invoice']['invoicenumber'] = $pseudo_post['invoice_number'];
							$tokenfilter['invoice']['full_invoice_number'] = $pseudo_post['prefix'].$pseudo_post['invoice_number'];
							$tokenfilter['invoice']['invoicedate'] = strftime('%A, %d. %B %Y', strtotime($pseudo_post['completed_date']));
							$tokenfilter['invoice']['patient_pflegestufe'] = $pseudo_post['patient_pflegestufe'];
							$tokenfilter['invoice']['unique_id'] = $pseudo_post['unique_id'];
							$tokenfilter['invoice']['start_sgbxi_activity'] = $pseudo_post['start_sgbxi_activity'];
							$tokenfilter['invoice']['end_sgbxi_activity'] = $pseudo_post['end_sgbxi_activity'];
							if($pseudo_post['start_sgbxi_activity'] != "0000-00-00 00:00:00" && $pseudo_post['start_sgbxi_activity'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['start_sgbxi_activity'] = date('d.m.Y', strtotime($pseudo_post['start_sgbxi_activity']));
							}
							else
							{
								$tokenfilter['invoice']['start_sgbxi_activity'] = "-";
							}
							if($pseudo_post['end_sgbxi_activity'] != "0000-00-00 00:00:00" && $pseudo_post['end_sgbxi_activity'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['end_sgbxi_activity'] = date('d.m.Y', strtotime($pseudo_post['end_sgbxi_activity']));
							}
							else
							{
								$tokenfilter['invoice']['end_sgbv_activity'] = "-";
							}
							if($pseudo_post['first_active_day'] != "0000-00-00 00:00:00" && $pseudo_post['first_active_day'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['first_active_day'] = date('d.m.Y', strtotime($pseudo_post['first_active_day']));
							}
							else
							{
								$tokenfilter['invoice']['first_active_day'] = "-";
							}
							if($pseudo_post['last_active_day'] != "0000-00-00 00:00:00" && $pseudo_post['last_active_day'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['last_active_day'] = date('d.m.Y', strtotime($pseudo_post['last_active_day']));
							}
							else
							{
								$tokenfilter['invoice']['last_active_day'] = "-";
							}
							
							if($pseudo_post['patient_address'] != "")
							{
								$tokenfilter['invoice']['address'] = $pseudo_post['patient_address'];
							}
							else
							{
								$tokenfilter['invoice']['address'] = $pseudo_post['address'];
							}
								
							$tokenfilter['invoice']['invoicefooter'] = $pseudo_post['sapv_footer'];
							if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'])
							{
								$tokenfilter['invoice']['invoiceamount'] = number_format($pseudo_post['grand_total'], '2', ',', '.');
							}
							else
							{
								$tokenfilter['invoice']['invoiceamount'] = number_format($pseudo_post['invoice_items']['grand_total'], '2', ',', '.');
							}
							
							$keyi = 0;
							foreach($pseudo_post['invoice_items'] as $kivi => $vivi)
							{
								if($kivi != 'grand_total')
								{
									$sgbxi_invoice_items['items'][$keyi][$kivi] = $vivi;
									$keyi++;
								}
						
							}
							
							if(count($pseudo_post['invoice_items']) > '0')
							{
								$rows = count($sgbxi_invoice_items['items']);
								$grid = new Pms_Grid($sgbxi_invoice_items['items'], 1, $rows, "bw_sgbxi_invoice_items_list_pdf.html");
								$grid_short = new Pms_Grid($sgbxi_invoice_items['items'], 1, $rows, "bw_sgbxi_invoice_items_list_pdf_short.html");
								
								$grid->invoice_total = $tokenfilter['invoice']['invoiceamount'];
								$grid->max_entries = $rows;
								
								$grid_short->invoice_total = $tokenfilter['invoice']['invoiceamount'];
								$grid_short->max_entries = $rows;
									
								$html_items = $grid->renderGrid();
								$html_items_short = $grid_short->renderGrid();
							}
							else
							{
								$html_items = "";
								$html_items_short = "";
							}
						
							$tokenfilter['invoice']['invoice_items_html'] = $html_items;
							$tokenfilter['invoice']['invoice_items_html_short'] = $html_items_short;
							//print_r($tokenfilter); exit;
								
							$docx_helper = $this->getHelper('CreateDocxFromTemplate');
							$docx_helper->setTokenController('invoice');
								
							//create public/joined_files/ dir
							while(!is_dir(PDFJOIN_PATH))
							{
								mkdir(PDFJOIN_PATH);
								if($i >= 50)
								{
									exit; //failsafe
								}
								$i++;
							}
								
							//create public/joined_files/$clientid dir
							$pdf_path = PDFJOIN_PATH . '/' . $clientid;
								
							while(!is_dir($pdf_path))
							{
								mkdir($pdf_path);
								if($i >= 50)
								{
									exit; //failsafe
								}
								$i++;
							}
								
							$tmpstmp = isset($this->view->folder_stamp) ? $this->view->folder_stamp : time();
								
							while(!is_dir($pdf_path . '/' . $tmpstmp))
							{
								mkdir($pdf_path . '/' . $tmpstmp);
								if($i >= 50)
								{
									exit; //failsafe
								}
								$i++;
							}
								
							$template = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
								
							$destination_path = $pdf_path . '/' . $tmpstmp . '/';
								
							$docx_helper->setOutputFile($destination_path.$Batch_name);
								
								
							//do not add extension !
							$docx_helper->setBrowserFilename($Batch_name);
								
							$docx_helper->create_pdf ($template, $tokenfilter) ;
							
							$docx_helper->download_file();
							exit;
								
							/* $temp_files[] = $destination_path.$Batch_name.'.pdf';
							
							$source = 'Bw_sgbxi_invoice';
							$patient_data = array();
							ob_end_clean();
							$this->join_pdfs_new($temp_files, $patient_data ,$source); */
						}
						else
						{
					   		$this->generate_pdf($pseudo_post, "SGB_XI", $template_files, $orientation, $background_pages);
						}
					}
				}
			}
		}

		public function sgbxiinvoicesAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$sgbxi_invoices_form = new Application_Form_SgbxiInvoices();
			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			
			
			//ISPC-2609 Ancuta 24.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$userid = $logininfo->userid;
			$allowed_invoice_name =  "bw_sgbxi_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			
			if(count($invoice_user_printjobs) > 1 ){
			    echo $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			if($this->getRequest()->isPost())
			{
				if($_POST['draftmore'] == "1")
				{
					$transform = $sgbxi_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $sgbxi_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				elseif($_POST['batch_print_more'])
				{
				    $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
				    $params['batch_print'] = '1'; //enables batch print procedure
				    $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
				    $params['get_pdf'] = '0'; //stops downloading single pdf
				    
				    //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
				    if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
				        
				        
				        
				    } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
				        
				        $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
				        
				        $print_job_data = array();
				        $print_job_data['clientid'] = $clientid;
				        $print_job_data['user'] = $userid;
				        $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
				        $print_job_data['output_type'] = 'pdf';
				        $print_job_data['status'] = 'active';
				        $print_job_data['invoice_type'] = 'bw_sgbxi_invoice';
				        $print_job_data['print_params'] = serialize($params);
				        $print_job_data['print_function'] = 'sgbxiinvoiceAction';
				        $print_job_data['print_controller'] = $this->getRequest()->getControllerName();
				        
				        foreach($_POST['document'] as $k=>$inv_id){
				            $print_job_data['PrintJobsItems'][] = array(
				                'clientid'=>$print_job_data['clientid'],
				                'user'=>$print_job_data['user'],
				                'invoice_id'=>$inv_id,
				                'invoice_type'=>$print_job_data['invoice_type'],
				                'status'=>"new"
				            );
				        }
				        
				        $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
				        $print_id = $PrintJobsBulk_obj->id;
				        
				        if($print_id){
				            $this->__StartPrintJobs();
				        }
				    }
				    
				}
				else
				{
					$new_payment = $sgbxi_invoices_form->submit_payment($_POST);
				}
				
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				$msg="";
				if($print_id){
				    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				}
				$this->_redirect(APP_BASE . 'invoice/sgbxiinvoices'.$msg); //to avoid resubmission
				//$this->_redirect(APP_BASE . 'invoice/sgbxiinvoices'); //to avoid resubmission
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$sgbxi_invoices = new SgbxiInvoices();
					$clone_record = $sgbxi_invoices->create_storno_invoice($invoiceid);
					$this->_redirect(APP_BASE . 'invoice/sgbxiinvoices?flg=suc');
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $sgbxi_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/sgbxiinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/sgbxiinvoices?flg=delerr');
				}
			}

			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
			
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("89", $clientid)) // change tab name
			{
				$this->view->change_tab_name = 1;
			}
			else
			{
				$this->view->change_tab_name = 0;
			}
		}

		public function fetchsgbxiinvoicelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$sgbxi_invoices_payments = new SgbxiInvoicePayments();
			$users = new User();

			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('SgbxiInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);


			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{

				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND isdelete=0';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND DATE(NOW()) > DATE(invoice_end)  AND isdelete=0';
					break;

				case 'all':
					$filters['hiinvoice'] = ' ';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';
					break;
			}


			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
				CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);

			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('SgbxiInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}
				$status_count_invoices["all"][] = '1';
			}

			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('SgbxiInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}
			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('SgbxiInvoices')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";


			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
					//SgbxiInvoices
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [OLD]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort,concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('SgbxiInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $sgbxi_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);

			$this->view->storned_invoces = SgbxiInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}


		public function editsgbxiinvoiceAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$sgbxi_invoices = new SgbxiInvoices();
			$sgbxi_invoices_items = new SgbxiInvoiceItems();
			$sgbxi_invoices_form = new Application_Form_SgbxiInvoices();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$this->view->hide_patient_tab = '1';
 
			

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $sgbxi_invoices->getSgbxiInvoice($invoice_id);
			}

			if(in_array($invoice_data['id'], SgbxiInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $sgbxi_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{
					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}

				//save here
				if(strlen($_POST['invoice']['address']) > 0 ){
				    if(strpos($_POST['invoice']['address'],"style"))
				    {
				        $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
				    }
				    $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
				}
				$edit_invoice = $sgbxi_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);


				if(empty($_REQUEST['pdf']))
				{
					if($edit_invoice)
					{

						$this->_redirect(APP_BASE . 'invoice/sgbxiinvoices?flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/sgbxiinvoices?flg=edterr');
					}
				}
				else if(!empty($_REQUEST['pdf']) && $edit_invoice)
				{

					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}

					if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
					}
					else if(empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
					}


					$this->_redirect(APP_BASE . 'invoice/sgbxiinvoice?iid=' . $_REQUEST['invoiceid'] . '&mode=pdfs&pdfquick=1&completed_date=' . strtotime($pdf_data['completed_date']));
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{

				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoice/sgbxiinvoices');
				}


				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];
				//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}

				if($hi_perms_divisions)
				{

					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
				}

				if(!empty($healthinsu_subdiv_arr['1']['name']))
				{
					//get new SAPV hi address
					$hi_address = '&nbsp;' . $healthinsu_subdiv_arr['1']['name'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr['1']['insurance_provider'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr['1']['street1'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr['1']['zip'] . ' ' . $healthinsu_subdiv_arr['1']['city'] . '' . '<br />';
				}
				else
				{
					//get old hi_address
					$hi_address = '&nbsp;' . $healthinsu_array[0]['name'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_insurance_provider'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_street'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'] . '<br />';
				}

				$pathealthinsurancenr = "";
				if(count($healthinsu_array[0]))
				{
					$phi_details = $healthinsu_array[0]['name'];
				}
				else
				{
					$phi_details = "--";
				}

//			$phi_details_sub = $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];
				$phi_details_sub = $hi_address;

				$this->view->health_insurance = $phi_details;
				$this->view->hi_subdiv_address = $phi_details_sub;

				if(strlen($invoice_data['care_level']) > '0' && $invoice_data['care_level'] != 'keine')
				{
					$this->view->patient_pflegestufe = $invoice_data['care_level'];
				}
				else
				{
					$this->view->patient_pflegestufe = '-';
				}



				//pflege
				//get pflegestuffe in current invoice period
//			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);
//
//			if ($pflege_arr)
//			{
//				$last_pflege = end($pflege_arr);
//				$this->view->patient_pflegestufe = $last_pflege['stage'];
//			}
//			else
//			{
//				$this->view->patient_pflegestufe = ' - ';
//			}

				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}

				if(strlen($invoice_data['footer']) == 0)
				{
					$invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				}

				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is preset
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		public function sgbxilistpaymentsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$sgbxiinvoices = new SgbxiInvoices();
			$sgbxipayments = new SgbxiInvoicePayments();
			$sgbxiinvoice_form = new Application_Form_SgbxiInvoices();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $sgbxipayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $sgbxipayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $sgbxipayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $sgbxiinvoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $sgbxiinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $sgbxipayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoice/sgbxilistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		public function bayerninvoicesAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$bayern_invoices = new BayernInvoices();
			$bayern_invoices_items = new BayernInvoiceItems();
			$bayern_invoices_form = new Application_Form_BayernInvoices();


			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			
			//ISPC-2609 Ancuta 24.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "bayern_invoice";
			$userid = $logininfo->userid;
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			
			if(count($invoice_user_printjobs) > 1 ){
			    $this->view->print_html = $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			if($this->getRequest()->isPost())
			{
				$has_edit_permissions = Links::checkLinkActionsPermission();
				if(!$has_edit_permissions) // if canedit = 0 - don't allow any additions or changes
				{
					$this->_redirect(APP_BASE . "error/previlege");
					exit;
				}
				
				
				if($_POST['draftmore'] == "1")
				{
					$transform = $bayern_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $bayern_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				elseif($_POST['batch_print_more'])
				{
				    $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
				    $params['batch_print'] = '1'; //enables batch print procedure
				    $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
				    $params['get_pdf'] = '0'; //stops downloading single pdf
				    
				    //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
				    if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
				        
				        
				        
				    } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
				        
				        $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
				        
				        $print_job_data = array();
				        $print_job_data['clientid'] = $clientid;
				        $print_job_data['user'] = $userid;
				        $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
				        $print_job_data['output_type'] = 'pdf';
				        $print_job_data['status'] = 'active';
				        $print_job_data['invoice_type'] = 'bayern_invoice';
				        $print_job_data['print_params'] = serialize($params);
				        $print_job_data['print_function'] = 'editbayerninvoiceAction';
				        $print_job_data['print_controller'] = $this->getRequest()->getControllerName();
				        
				        foreach($_POST['document'] as $k=>$inv_id){
				            $print_job_data['PrintJobsItems'][] = array(
				                'clientid'=>$print_job_data['clientid'],
				                'user'=>$print_job_data['user'],
				                'invoice_id'=>$inv_id,
				                'invoice_type'=>$print_job_data['invoice_type'],
				                'status'=>"new"
				            );
				        }
				        
				        $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
				        $print_id = $PrintJobsBulk_obj->id;
				        
				        if($print_id){
				           $this->__StartPrintJobs();
				        }
				    }
				    
				}
				else
				{
					$new_payment = $bayern_invoices_form->submit_payment($_POST);
				}
				
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				$msg="";
				if($print_id){
				    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				}
				
				$this->_redirect(APP_BASE . 'invoice/bayerninvoices'.$msg); //to avoid resubmission
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				
				$has_edit_permissions = Links::checkLinkActionsPermission();
				if(!$has_edit_permissions) // if canedit = 0 - don't allow any additions or changes
				{
					$this->_redirect(APP_BASE . "error/previlege");
					exit;
				}
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$clone_record = $bayern_invoices->create_storno_invoice($invoiceid);
					$this->_redirect(APP_BASE . 'invoice/bayerninvoices?flg=suc');
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $bayern_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/bayerninvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/bayerninvoices?flg=delerr');
				}
			}


			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
			
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("89", $clientid)) // change tab name
			{
				$this->view->change_tab_name = 1;
			}
			else
			{
				$this->view->change_tab_name = 0;
			}
				
			
		}

		public function fetchbayerninvoicelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$bayern_invoices_payments = new BayernInvoicePayments();
			$users = new User();

			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('BayernInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);

			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{

				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0  AND isdelete = 0  AND id NOT IN (' . $storno_ids_str . ')';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0   AND isdelete=0 AND id NOT IN (' . $storno_ids_str . ')';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0  AND DATE(NOW()) > DATE(invoice_end)  AND isdelete=0 AND id NOT IN (' . $storno_ids_str . ')';
					break;

				case 'all':
					$filters['hiinvoice'] = ' ';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';
					break;
			}


			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "p.id,e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "p.id,e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);

			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
				$patients_encrypted_ids[$v_f_pat_res['EpidIpidMapping']['ipid']] = Pms_Uuid::encrypt($v_f_pat_res['id']);
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BayernInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}
				$status_count_invoices["all"][] = '1';
			}

			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BayernInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}

			//filter invoices status/invoice_number/amount

			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('BayernInvoices')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";

			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
					//BayernInvoices
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [OLD]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort,concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('BayernInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
				$invoicelimit[$k_il]['patient_id'] = $patients_encrypted_ids[$v_il['ipid']];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);

			$invoice_payments = $bayern_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);

			$this->view->storned_invoces = BayernInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function bayerninvoicepatientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$bayern_invoices = new BayernInvoices();
			$patientmaster = new PatientMaster();


			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}


			$this->view->selected_month = $selected_month;
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
			$post_month['start'] =  date("d.m.Y",strtotime($months_details[$selected_month]['start'] ));
			$post_month['end'] =  date("d.m.Y",strtotime($months_details[$selected_month]['end'] ));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_rehnung_patients';
			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END


			switch($_REQUEST['sort'])
			{
				case 'epid':
					$order_by = 'e.epid';
					break;

				case 'ln':
					$order_by = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci';
					break;

				case 'fn':
					$order_by = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci';
					break;

				case 'adm':
					$order_by = 'p.admission_date';
					break;

				default:
					$order_by = 'p.admission_date';
					break;
			}

			if($_REQUEST['ord'])
			{
				$sort = $_REQUEST['ord'];
			}
			else
			{
				$sort = 'DESC';
			}

			//get active ipids details
			$sql = "p.*,e.*,a.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "p.*,e.*,a.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex ";
			}

			$active_ipids_details = Pms_CommonData::patients_active($sql, $clientid, $months_details, false, $order_by, $sort); // Bayern patient list

			foreach($active_ipids_details as $k_active_patient => $v_active_patient)
			{
				$active_patients[$v_active_patient['ipid']] = $v_active_patient;

				$active_ipids[] = $v_active_patient['ipid'];

				$last_period[$v_active_patient['ipid']] = end($v_active_patient['PatientActive']);

				$active_patients[$v_active_patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['start']));

				if($last_period[$v_active_patient['ipid']]['end'] != "0000-00-00")
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['end']));
				}
				else
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = "-";
				}
				$active_patients[$v_active_patient['ipid']]['id'] = $v_active_patient['PatientMaster']['id'];
				
				$active_patients[$v_active_patient['ipid']]['period_start'] =$post_month['start'];
				$active_patients[$v_active_patient['ipid']]['period_end'] =$post_month['end'];
			}

			$this->view->active_patients = $active_patients;


			/* -------------------------------------  Get generated BAYERN INVOCIES for all ipids in selected month -------------------------------------------- */
			$patients_with_bayern_invoices = $this->check_bayern_invoiced_patients($selected_month, $active_ipids, $clientid);

			foreach($active_patients as $pat_ipid => $pat_values)
			{
				if(in_array($pat_ipid, $patients_with_bayern_invoices))
				{
					$invoice_status[$pat_ipid]['bayern_invoices'] = 1; // has medipump invoices in current period
				}
				else
				{
					$invoice_status[$pat_ipid]['bayern_invoices'] = 0; // Patient has NO medipump invoice in selected period
				}
			}
			$this->view->invoice_status = $invoice_status;


			//check invoice number type

			$invoice_number_arr = $bayern_invoices->get_next_invoice_number($clientid, true);

			$this->view->highest_invoice_number = $invoice_number_arr['prefix'] . $invoice_number_arr['invoicenumber'];
		}

		private function get_high_sapv_period($ipid, $current_period, $day2verordnet = false)
		{
			$patientmaster = new PatientMaster();

			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('verordnungbis >= "' . date('Y-m-d', strtotime($current_period['start'])) . '"')
				->andWhere('verordnungam <= "' . date('Y-m-d', strtotime($current_period['end'])) . '"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();


			$all_sapv_days = array();
			$temp_sapv_days = array();

			$period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			foreach($droparray as $k_sapv => $v_sapv)
			{

				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);



				foreach($temp_sapv_days as $k_tsapv => $v_tsapv)
				{

					if(in_array($v_tsapv, $period_days))
					{
						$temp_sapv_verordnet = explode(',', $v_sapv['verordnet']);

						if(empty($all_sapv_days[$v_tsapv]))
						{
							$all_sapv_days[$v_tsapv] = array();
						}
						$all_sapv_days[$v_tsapv] = array_merge_recursive($all_sapv_days[$v_tsapv], $temp_sapv_verordnet);

						$all_sapv_days[$v_tsapv] = array_values(array_unique($all_sapv_days[$v_tsapv]));
						asort($all_sapv_days[$v_tsapv]);

						//get KO verordnets
						if(end($all_sapv_days[$v_tsapv]) == '2' && $day2verordnet)
						{
							$all_sapv_days['KOverordnets'][$v_tsapv] = $v_sapv['id'];
						}
					}
				}
			}



			return $all_sapv_days;
		}

		public function bayerninvoiceAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF8');

			$this->_helper->viewRenderer->setNoRender();

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$client = new Client();
			$patientmaster = new PatientMaster();
			$pflege = new PatientMaintainanceStage();
			$sapvs = new SapvVerordnung();
			$bayern_doctor_visit = new BayernDoctorVisit();
			$patient_course = new PatientCourse();
			$p_list = new PriceList();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$invoice_settings = new InvoiceSettings();
			$bayern_invoices = new BayernInvoices();


			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			$pm = $patientmaster->getMasterData($decid, 0);
			$pseudo_post['patientdetails'] = $pm;

			$client_details = $client->getClientDataByid($clientid);

			//get healthinsurance address
			$divisions = $hi_perms->getClientHealthInsurancePermissions($logininfo->clientid);
			$hi_perms_divisions = $divisions;

			//health insurance
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
			if(strlen($healthinsu_array[0]['insurance_no']) > '0')
			{
				$pseudo_post['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			}
			else
			{
				$pseudo_post['insurance_no'] = ' - ';
			}


			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(empty($healthinsu_array[0]['name']))
				{
					$healthinsu_array[0]['name'] = $healtharray['name'];
				}
				
				if(empty($healthinsu_array[0]['ins_insurance_provider']))
				{
					$healthinsu_array[0]['ins_insurance_provider'] = $healtharray['ins_insurance_provider'];
				}
				
				if(empty($healthinsu_array[0]['ins_street']))
				{
					$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
				}
				if(empty($healthinsu_array[0]['ins_city']))
				{
					$healthinsu_array[0]['ins_city'] = $healtharray['city'];
				}
				if(empty($healthinsu_array[0]['ins_zip']))
				{
					$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
				}

				if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
				{
					$pseudo_post['health_insurance_ik'] = $healtharray['iknumber'];
				}

				if(strlen($healthinsu_array[0]['kvk_no']) == 0)
				{
					$pseudo_post['health_insurance_kassenr'] = $healtharray['kvnumber'];
				}
			}

			if($hi_perms_divisions)
			{
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
			}

			if($healthinsu_array[0]['privatepatient'] == "1")
			{
//			get patient name and adress
				$patient_address = '&nbsp;' . htmlspecialchars($pm['last_name']) . ' ' . htmlspecialchars($pm['first_name']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['street1']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['zip']) . ' ' . htmlspecialchars($pm['city']);
			}
	
			if(!empty($healthinsu_subdiv_arr['3']['name']))
			{
				//get new SAPV hi address
				$hi_address = '&nbsp;' . $healthinsu_subdiv_arr[3]['name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['street1'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$pseudo_post['health_insurance_ik'] = $healthinsu_subdiv_arr[3]['iknumber'];
				$pseudo_post['health_insurance_kassenr'] = $healthinsu_subdiv_arr[3]['kvnumber'];
			}
			else
			{
				//get old hi_address
				$hi_address = '&nbsp;' . $healthinsu_array[0]['company_name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_insurance_provider'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_street'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];

				$pseudo_post['health_insurance_ik'] = $healthinsu_array[0]['institutskennzeichen'];
				$pseudo_post['health_insurance_kassenr'] = $healthinsu_array[0]['kvk_no'];
			}


			//get admission-readmission cycles to extract months where there is at least 1 day active START
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));

			$months = array();
			$active_days = array();
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));


					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{

					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}


				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
			}

			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}
			//get number of days in each month + start/end day START
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}

			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$days_in_period = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			//overall period
			$overall_period['start'] = $months_details[$months[0]]['start'];

			if(strtotime('-1 day', strtotime($current_period['start'])) > strtotime($months_details[$months[0]]['start']))
			{
				$overall_period['end'] = date('Y-m-d', strtotime('-1 day', strtotime($current_period['start'])));
			}
			else
			{
				$overall_period['end'] = date('Y-m-d', strtotime($months_details[$months[0]]['start']));
			}


//			foreach($active_days as $k_active_day => $v_active_day)
//			{
//				if(in_array($v_active_day, $days_in_period))
//				{
//					$active_days_in_period[] = $v_active_day;
//				}
//			}
			//get sapvs in period
			$period_sapv = $sapvs->getSapvInPeriod($ipid, $current_period['start'], $current_period['end']);

			if($period_sapv[0]['approved_date'] != '0000-00-00 00:00:00' && strlen($period_sapv[0]['approved_date']) > 0 && date('Y-m-d', strtotime($period_sapv[0]['approved_date'])) != '1970-01-01')
			{
				$pseudo_post['sapv_approve_date'] = date('d.m.Y', strtotime($period_sapv[0]['approved_date']));
			}
			else
			{
				$pseudo_post['sapv_approve_date'] = ' - ';
			}

			if(strlen($period_sapv[0]['approved_number']) > 0)
			{
				$pseudo_post['sapv_approve_nr'] = $period_sapv[0]['approved_number'];
			}
			else
			{
				$pseudo_post['sapv_approve_nr'] = ' - ';
			}

			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $current_period['start'], $current_period['end']);
			if($pflege_arr)
			{
				$last_pflege = end($pflege_arr);
				if(strlen($last_pflege) > '0')
				{
					$pseudo_post['patient_pflegestufe'] = $last_pflege['stage'];
				}
				else
				{
					$pseudo_post['patient_pflegestufe'] = ' - ';
				}
			}
			else
			{
				$pseudo_post['patient_pflegestufe'] = ' - ';
			}



			//get price list
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			//get bayern invoice settings
			$bayern_settings = new BayernInvoiceSettings();
			$bayern_settings_arr = $bayern_settings->get_invoice_settings($current_period['start'], $current_period['end'], $clientid);


			$overall_limit_settings = $bayern_settings_arr['max_days_amount'];
// 			$overall_limit = $bayern_settings_arr['max_days_amount'];



			$available_for_invoice = 0;
			//	GET already existing invoices - for overall quantity -   START

			$byi = new BayernInvoices();
			$byi_status = array("2", "3", "5"); // 2 - Completed ,3 - paid, 5 - partialy paid
			$bayern_patient_invoices = $byi->get_patient_bayern_invoice($ipid, $byi_status);
			if($_REQUEST['show_existing'] == "1")
			{
				print_r($bayern_patient_invoices);
			}
			if($bayern_patient_invoices['paid_items'])
			{
				$paid_items = $bayern_patient_invoices['paid_items'];
			}
			else
			{
				$paid_items = "0";
			}
			$available_for_invoice = $overall_limit_settings - $paid_items;
			if($_REQUEST['show_existing'] == "1")
			{
				print_r("\n overall limit for products set in price lits\n");
				print_r($overall_limit_settings);
				print_r("\n available products \n");
				print_r($available_for_invoice);
				exit;
			}
			// 	GET already existing invoices - for overall quantity -   END
			//get hospital in current period <= removed due to the client hospital settings
//			$hospital_days = $this->get_hospital_days($ipid, $current_period);
			//get hospital in current period <= removed due to the client hospital settings
//			$hospiz_days = $this->get_hospiz_days($ipid, $current_period);
			//get sapv in current period
			$sapv_days = $this->get_high_sapv_period($ipid, $current_period, true);
			$sapv_days_keys = array_keys($sapv_days);

			//get sapv denied in current period
			$sapv_days_denied = $this->get_high_sapv_period_denied($ipid, $current_period, true);
			$sapv_days_denied_keys = array_keys($sapv_days_denied);

			//get all sapv aproved+denied in curent period
			$sapv_days_all = array_values(array_unique(array_merge($sapv_days_keys, $sapv_days_denied_keys)));

			//get deleted visits from course and then remaining bayern visits
// 			$bayern_doc_visits = $bayern_doctor_visit->get_bayern_doctor_visits_period($ipid, $current_period, true);
			$bayern_doc_visits_array = $bayern_doctor_visit->get_bayern_doctor_visits_period($ipid, $current_period, true);
			
			foreach($bayern_doc_visits_array as $vday=>$vdetails){
			    foreach($vdetails as $k => $bv){
    			    $bayern_doc_visits[date('Y-m-d',strtotime($bv['start_date'])) ] [ ] = $bv; 
			    }
			}
			$contact_forms = $this->get_patients_contact_forms(array($ipid), $current_period);
			foreach($contact_forms as $cf_ipid=>$cfs){
			    foreach ( $cfs as $cfid=>$cfdata){
			        $bayern_doc_visits[date('Y-m-d',strtotime($cfdata['start_date'])) ] [ ] = $cfdata;
			    }
			}

			//get phone from patient course
			$phone_courses = $patient_course->get_patient_shortcuts_course($ipid, array('XT'), $current_period, false);

			foreach($phone_courses as $k_course => $v_course)
			{
				$day_course_activity[date('Y-m-d', strtotime($v_course['done_date']))][] = $v_course;
			}


			//CALCULATE OVERALL
			//get hospital in current period <= removed due to the client hospital settings
//			$hospital_days_overall = $this->get_hospital_days($ipid, $overall_period);
			//get hospital in current period <= removed due to the client hospital settings
//			$hospiz_days_overall = $this->get_hospiz_days($ipid, $overall_period);
			//get sapv in current period
			$sapv_days_overall = $this->get_high_sapv_period($ipid, $overall_period, true);

			//get sapv denied in current period
			$sapv_days_denied_overall = $this->get_high_sapv_period_denied($ipid, $overall_period);

			//get deleted visits from course and then remaining bayern visits
			$bayern_doc_visits_overall_array = $bayern_doctor_visit->get_bayern_doctor_visits_period($ipid,  false, true);

			foreach($bayern_doc_visits_overall_array as $vday=>$vdetails){
			    foreach($vdetails as $k => $bv){
			        $bayern_doc_visits_overall[date('Y-m-d',strtotime($bv['start_date'])) ] [ ] = $bv;
			    }
			}
			
			
			$contact_forms_overall_array = $this->get_overall_contact_forms($ipid);
			
			foreach($contact_forms_overall_array as $vday=>$vdetails){
			    foreach($vdetails as $k => $bv){
			        $bayern_doc_visits_overall[date('Y-m-d',strtotime($bv['start_date'])) ] [ ] = $bv;
			    }
			}
			
			//get phone from patient course
			$phone_courses_overall = $patient_course->get_patient_shortcuts_course($ipid, array('XT'), $overall_period, false);

			foreach($phone_courses_overall as $k_course => $v_course)
			{
				$day_course_activity_overall[date('Y-m-d', strtotime($v_course['done_date']))][] = $v_course;
			}



			//Client Hospital Settings START
			//patient days output format is d.m.Y!!!
			//curent period
			$conditions['periods'][0]['start'] = $current_period['start'];
			$conditions['periods'][0]['end'] = $current_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			foreach($patient_days as $k_day => $v_day)
			{
				if(!empty($v_day['real_active_days']))
				{
					$patient_real_active_days = $v_day['real_active_days'];
					array_walk($patient_real_active_days, function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
			}
			$patient_real_active_days = array_values($patient_real_active_days);
			//get sapv days in active period
			$patient_sapv_active_days = array_values(array_intersect($sapv_days_all, $patient_real_active_days));
			//overall period
			$overall_conditions['periods'][0]['start'] = $overall_period['start'];
			$overall_conditions['periods'][0]['end'] = $overall_period['end'];
			$overall_conditions['client'] = $clientid;
			$overall_conditions['ipids'] = array($ipid);
			$patient_days_overall = Pms_CommonData::patients_days($overall_conditions);

			//final resulted data
			$hospital_days = $patient_days[$ipid]['hospital']['real_days_cs'];
			$hospiz_days = $patient_days[$ipid]['hospiz']['real_days_cs'];

			$hospital_days_overall = $patient_days_overall[$ipid]['hospital']['real_days_cs'];
			$hospiz_days_overall = $patient_days_overall[$ipid]['hospiz']['real_days_cs'];

			$active_days_in_period = $patient_days[$ipid]['real_active_days'];
			//Client Hospital Settings END
			//get overall patient data for KO1 and KO2
			if($_REQUEST['dbgz'])
			{
				print_r("\n current_period \n");
				print_r($current_period);

				print_r("\n hospital_days \n");
				print_r($hospital_days);

				print_r("\n overall_period \n");
				print_r($overall_period);

				print_r("\n hospital_days_overall \n");
				print_r($hospital_days_overall);

				print_r("\n sapv_days_overall \n");
				print_r($sapv_days_overall);

				print_r("\n sapv_days \n");
				print_r($sapv_days);

				print_r("\n sapv_days denied \n");
				print_r($sapv_days_denied);

				print_r("\n  sapv_all \n");
				print_r($sapv_days_all);

				print_r("\n patient real active days \n");
				print_r($patient_real_active_days);

				print_r("\n patient sapv active days \n");
				print_r($patient_sapv_active_days);
// 				exit;


				print_r("PATIENT DAYS ===============\n");
				print_r($patient_days);
//				exit;
			}

			$verordnet_passed_shortcuts = array();
			foreach($sapv_days_overall as $k_active_overall => $v_active_overall)
			{
				//$k_active_overall d.m.Y for $hospital_days_overall and $hospital_days
				$v_active_overall_alt = date('d.m.Y', strtotime($k_active_overall));
				if(!in_array($v_active_overall_alt, $hospital_days_overall) && in_array($k_active_overall, $active_days) && (array_key_exists($k_active_overall, $day_course_activity_overall) || array_key_exists($k_active_overall, $bayern_doc_visits_overall)) && !array_key_exists($k_active_overall, $sapv_days_denied_overall)
				)
				{
					if(!in_array($k_active_overall, $hospiz_days_overall))
					{
// 						if(count($verordnet_passed_shortcuts[$sapv_days_overall['KOverordnets'][$k_active_overall]]) < '3')
// 						{
							$verordnet_passed_shortcuts[$sapv_days_overall['KOverordnets'][$k_active_overall]][] = 'KO1 - ' . $k_active_overall;
// 						}
					}
					else
					{
// 						if(count($verordnet_passed_shortcuts[$sapv_days_overall['KOverordnets'][$k_active_overall]]) < '3')
// 						{
							$verordnet_passed_shortcuts[$sapv_days_overall['KOverordnets'][$k_active_overall]][] = 'KO2 - ' . $k_active_overall;
// 						}
					}
				}
			}

			
			//create master data for invoice
			$verordnet_mapping = array('1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'TV');
			$day_shortcuts = array();
			if($_REQUEST['dbgz'])
			{
				print_r($sapv_days);
			}
			//new tv does not require any visit or telefonat (ISPC-584)
			foreach($active_days_in_period as $k_active_day => $v_active_day_alt)
			{
				//$v_active_day d.m.Y for $hospital_days_overall and $hospital_days
				$v_active_day = date('Y-m-d', strtotime($v_active_day_alt));

				//exclude Range 3 price
				if(!array_key_exists($v_active_day, $sapv_days_denied) && array_key_exists($v_active_day, $sapv_days))
				{
					if(!in_array($v_active_day_alt, $hospiz_days) && !in_array($v_active_day_alt, $hospital_days))
					{
						if((array_key_exists($v_active_day, $bayern_doc_visits) || array_key_exists($v_active_day, $day_course_activity)) && end($sapv_days[$v_active_day]) <= '2')
						{
    					    //ISPC-1350 && TODO-536
// 							if(end($sapv_days[$v_active_day]) == '2' && count($verordnet_passed_shortcuts[$sapv_days['KOverordnets'][$v_active_day]]) < '3')
							if(end($sapv_days[$v_active_day]) == '2')
							{
//							Range 1 (KO) price - check verordnung
								$master_data[$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "1";
								$master_data[$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "1";
								$master_data[$v_active_day]['price'] = $master_price_list[$v_active_day][0][$verordnet_mapping[end($sapv_days[$v_active_day])] . "1"]['price'];
								$master_data[$v_active_day]['qty'] = (count($bayern_doc_visits[$v_active_day]) + count($day_course_activity[$v_active_day]));
								$verordnet_passed_shortcuts[$sapv_days['KOverordnets'][$v_active_day]][] = 'KO1';
							}
							else if(end($sapv_days[$v_active_day]) < '2')
							{
//							Range 1 (ALL OTHER) prices - check verordnung
								if(end($sapv_days[$v_active_day]) == '1')
								{
									if(empty($day_shortcuts[$v_active_day]))
									{
										$master_data[$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "1";
										$master_data[$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "1";
										$master_data[$v_active_day]['price'] = $master_price_list[$v_active_day][0][$verordnet_mapping[end($sapv_days[$v_active_day])] . "1"]['price'];
										$master_data[$v_active_day]['qty'] = (count($bayern_doc_visits[$v_active_day]) + count($day_course_activity[$v_active_day]));
									}
									$day_shortcuts[$v_active_day] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "1";
								}
								else
								{
									$master_data[$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "1";
									$master_data[$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "1";
									$master_data[$v_active_day]['price'] = $master_price_list[$v_active_day][0][$verordnet_mapping[end($sapv_days[$v_active_day])] . "1"]['price'];
									$master_data[$v_active_day]['qty'] = (count($bayern_doc_visits[$v_active_day]) + count($day_course_activity[$v_active_day]));
								}
							}
//
						}
						else if(end($sapv_days[$v_active_day]) > '2')
						{

							$master_data[$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "1";
							$master_data[$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "1";
							$master_data[$v_active_day]['price'] = $master_price_list[$v_active_day][0][$verordnet_mapping[end($sapv_days[$v_active_day])] . "1"]['price'];
							$master_data[$v_active_day]['qty'] += 1;
						}
					}
					else
					{


						if(!in_array($v_active_day_alt, $hospital_days) && (array_key_exists($v_active_day, $bayern_doc_visits) || array_key_exists($v_active_day, $day_course_activity)) && end($sapv_days[$v_active_day]) <= '2')
						{
						    
						    //ISPC-1350 && TODO-536
// 							if(end($sapv_days[$v_active_day]) == '2' && count($verordnet_passed_shortcuts[$sapv_days['KOverordnets'][$v_active_day]]) < '3')
							if(end($sapv_days[$v_active_day]) == '2')
							{
//							Range 2 (KO) price - check verordnung
								$master_data[$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "2";
								$master_data[$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "2";
								$master_data[$v_active_day]['price'] = $master_price_list[$v_active_day][0][$verordnet_mapping[end($sapv_days[$v_active_day])] . "2"]['price'];
								$master_data[$v_active_day]['qty'] = (count($bayern_doc_visits[$v_active_day]) + count($day_course_activity[$v_active_day]));
								$verordnet_passed_shortcuts[$sapv_days['KOverordnets'][$v_active_day]][] = 'KO2';
							}
							else if(end($sapv_days[$v_active_day]) < '2')
							{
//							Range 2 (ALL OTHER) prices - check verordnung
								if(end($sapv_days[$v_active_day]) == '1')
								{
									if(empty($day_shortcuts[$v_active_day]))
									{
										$master_data[$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "2";
										$master_data[$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "2";
										$master_data[$v_active_day]['price'] = $master_price_list[$v_active_day][0][$verordnet_mapping[end($sapv_days[$v_active_day])] . "2"]['price'];
										$master_data[$v_active_day]['qty'] = (count($bayern_doc_visits[$v_active_day]) + count($day_course_activity[$v_active_day]));
									}
									$day_shortcuts[$v_active_day] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "2";
								}
								else
								{
									$master_data[$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "2";
									$master_data[$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "2";
									$master_data[$v_active_day]['price'] = $master_price_list[$v_active_day][0][$verordnet_mapping[end($sapv_days[$v_active_day])] . "2"]['price'];
									$master_data[$v_active_day]['qty'] = (count($bayern_doc_visits[$v_active_day]) + count($day_course_activity[$v_active_day]));
								}
							}
						}
						else if(!in_array($v_active_day_alt, $hospital_days) && end($sapv_days[$v_active_day]) > '2')
						{
							$master_data[$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "2";
							$master_data[$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$v_active_day])] . "2";
							$master_data[$v_active_day]['price'] = $master_price_list[$v_active_day][0][$verordnet_mapping[end($sapv_days[$v_active_day])] . "2"]['price'];
							$master_data[$v_active_day]['qty'] += 1;
						}
					}
				}
				else if(array_key_exists($v_active_day, $sapv_days_denied))
				{

//				Range 3 price - check for verordnung
					$master_data[$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days_denied[$v_active_day])] . "3";
					$master_data[$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days_denied[$v_active_day])] . "3";
					$master_data[$v_active_day]['price'] = $master_price_list[$v_active_day][0][$verordnet_mapping[end($sapv_days_denied[$v_active_day])] . "3"]['price'];
					$master_data[$v_active_day]['qty'] = (count($bayern_doc_visits[$v_active_day]) + count($day_course_activity[$v_active_day]));
				}
			}


			$counted_days = array();
			foreach($master_data as $k_m_day => $v_m_value)
			{
// 				if(count($counted_days) < $overall_limit)
				if(count($counted_days) < $available_for_invoice)
				{
					$master_items[$v_m_value['shortcut']]['shortcut'] = $v_m_value['shortcut'];
					$master_items[$v_m_value['shortcut']]['price'] = $v_m_value['price'];
					$master_items[$v_m_value['shortcut']]['custom'] = '0';
					//remove this if amount of visits is counted
					$master_items[$v_m_value['shortcut']]['qty'] += 1;
					$master_items[$v_m_value['shortcut']]['shortcut_total'] += $v_m_value['price'];
					$master_total['grand_total'] += $v_m_value['price'];

					$counted_days[] = $k_m_day;
				}
			}

			if(count($master_data) > '0')
			{
				$activity_days = array_keys($master_data);

				//$first_activity_day = date('d.m.Y', strtotime($activity_days[0]));
				//$last_activity_day = date('d.m.Y', strtotime(end($activity_days)));
			}

			//Modified from ISPC 1035
			$first_activity_day = date('d.m.Y', strtotime($patient_sapv_active_days[0]));
			$last_activity_day = date('d.m.Y', strtotime(end($patient_sapv_active_days)));



			if($_REQUEST['dbgz'])
			{
				print_r("bayern_doc_visits\n");
				print_r($bayern_doc_visits);
				print_r("day_course_activity\n");
				print_r($day_course_activity);
				print_r("counted_days \n");
				print_r($counted_days);
				print_r("Master data \n");
				print_r($master_data);
				print_r("Master data items\n");
				print_r($master_items);
				exit;
			}

			$pseudo_post['clientid'] = $clientid;
			$pseudo_post['shortcuts'] = $shortcuts['bayern'];
			$pseudo_post['master_data'] = $master_data;
			$pseudo_post['master_items'] = $master_items;
			$pseudo_post['grand_total'] = $master_total['grand_total'];
			$pseudo_post['first_active_day'] = $first_activity_day;
			$pseudo_post['last_active_day'] = $last_activity_day;
			$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];
			$pseudo_post['patient_address'] = $patient_address;

			if(strlen($pseudo_post['address']) == '0')
			{
				$pseudo_post['address'] = $hi_address;
			}



//generate invoice
			if($_REQUEST['pdfquick'] != 1 && $_REQUEST['mode'] == 'pdfs')
			{
				//check invoice number type
				$invoice_number_arr = $bayern_invoices->get_next_invoice_number($clientid, true);


				$pseudo_post['prefix'] = $invoice_number_arr['prefix'];
				$pseudo_post['invoice_number'] = $invoice_number_arr['invoicenumber'];
				$pseudo_post['completed_date'] = date('Y-m-d H:i:s', time());


				$sapv_days_keys = array_keys($sapv_days);
				$pseudo_post['first_sapv_day'] = $sapv_days_keys[0];
				$pseudo_post['last_sapv_day'] = end($sapv_days_keys);


				//insert invoice START
				$ins_inv = new BayernInvoices();
				$ins_inv->invoice_start = date('Y-m-d H:i:s', strtotime($current_period['start']));
				$ins_inv->invoice_end = date('Y-m-d H:i:s', strtotime($current_period['end']));

				$ins_inv->start_active = date('Y-m-d H:i:s', strtotime($pseudo_post['first_active_day']));
				$ins_inv->end_active = date('Y-m-d H:i:s', strtotime($pseudo_post['last_active_day']));

				$ins_inv->start_sapv = date('Y-m-d H:i:s', strtotime($pseudo_post['first_sapv_day']));
				$ins_inv->end_sapv = date('Y-m-d H:i:s', strtotime($pseudo_post['last_sapv_day']));

				$ins_inv->sapv_approve_date = date('Y-m-d H:i:s', strtotime($pseudo_post['sapv_approve_date']));
				$ins_inv->sapv_approve_nr = $pseudo_post['sapv_approve_nr'];

				$ins_inv->ipid = $ipid;
				$ins_inv->client = $clientid;
				$ins_inv->prefix = $invoice_number_arr['prefix'];
				$ins_inv->invoice_number = $invoice_number_arr['invoicenumber'];
				$ins_inv->invoice_total = $master_total['grand_total'];
				$ins_inv->address = (strlen($pseudo_post['patient_address']) > '0') ? $pseudo_post['patient_address'] : $pseudo_post['address'];
				$ins_inv->status = '1'; // DRAFT - ENTWURF
				$ins_inv->completed_date = $pseudo_post['completed_date'];
				$ins_inv->save();

				$ins_id = $ins_inv->id;

				foreach($master_items as $k_inv => $v_inv)
				{
					$invoice_items_arr[] = array(
						'invoice' => $ins_id,
						'client' => $clientid,
						'name' => '',
						'shortcut' => $v_inv['shortcut'],
						'qty' => $v_inv['qty'],
						'price' => $v_inv['price'],
						'isdelete' => '0'
					);
				}



				if(count($master_items) > 0)
				{
					//insert many records with one query!!
					$collection = new Doctrine_Collection('BayernInvoiceItems');
					$collection->fromArray($invoice_items_arr);
					$collection->save();
				}

				$pseudo_post['unique_id'] = $ins_id;


				$template_files = array('invoice_bayern_pdf.html');
				$orientation = array('P');
				$background_pages = array('0'); //0 is first page;


				$this->generate_pdf($pseudo_post, "BayernPdf", $template_files, $orientation, $background_pages);
				exit;
			}
			exit;
		}

		private function get_high_sapv_period_denied($ipid, $current_period)
		{
			$patientmaster = new PatientMaster();

			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('verordnungbis >= "' . date('Y-m-d', strtotime($current_period['start'])) . '"')
				->andWhere('verordnungam <= "' . date('Y-m-d', strtotime($current_period['end'])) . '"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status = 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();

			$denied_sapv_days = array();
			$temp_sapv_days = array();

			$period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			foreach($droparray as $k_sapv => $v_sapv)
			{

				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

				if($v_sapv['verorddisabledate'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($v_sapv['verorddisabledate'])) != '1970-01-01')
				{
					$s_end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
				}
				else
				{
					$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
				}

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);

				foreach($temp_sapv_days as $k_tsapv => $v_tsapv)
				{
					if(in_array($v_tsapv, $period_days))
					{
						$temp_sapv_verordnet = explode(',', $v_sapv['verordnet']);

						if(empty($denied_sapv_days[$v_tsapv]))
						{
							$denied_sapv_days[$v_tsapv] = array();
						}
						$denied_sapv_days[$v_tsapv] = array_merge_recursive($denied_sapv_days[$v_tsapv], $temp_sapv_verordnet);

						$denied_sapv_days[$v_tsapv] = array_values(array_unique($denied_sapv_days[$v_tsapv]));
						asort($denied_sapv_days[$v_tsapv]);
					}
				}
			}

			return $denied_sapv_days;
		}

		private function get_hospital_days($ipid, $current_period)
		{
			$patientmaster = new PatientMaster();
			//get patient locations START
			$disallowed_location_types = array('1'); //hospital
 
			$hospitalids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhereIn('location_type', $disallowed_location_types);
			$hosparray = $hospitalids->fetchArray();
		 
			
			$hospital_ids[] = '999999999';
			foreach($hosparray as $hospital)
			{
				$hospital_ids[] = $hospital['id'];
			}

			//get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
				->andWhereIn('location_id', $hospital_ids)
				->orderBy('valid_from,id ASC');

			$pat_locations = $patloc->fetchArray();

			$hospital_days = array();
			foreach($pat_locations as $k_pat_loc => $v_pat_loc)
			{
				if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
				{
					$till = date('Y-m-d', strtotime('+1 day'));
				}
				else
				{
					$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
				}

				$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
				$r1end = strtotime(date('Y-m-d', strtotime($till)));
				$r2start = strtotime($current_period['start']);
				$r2end = strtotime($current_period['end']);

				if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
				{
					$period_hosp_locations[] = $v_pat_loc;
					$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

					$hosp = $patientmaster->getDaysInBetween($location_start, $till);
					$hospital_days = array_merge($hospital_days, $hosp);
				}

				//find hosp heads
				$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
				$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
				$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));

				//remove end head
				if($end_hospital_period != $next_start_hosp)
				{
					$find = array_search($end_hospital_period_formatted, $hospital_days);
					$removed_days['e'][] = $hospital_days[$find];
					unset($hospital_days[$find]);
				}

				//remove start head
				if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
				{
					$find_s = '';
					$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
					$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
					$start_hospital_period = $r1start;
					$start_hospital_formatted = date('Y-m-d', $r1start);

					if($start_hospital_period != $previous_till)
					{
						$find_s = array_search($start_hospital_formatted, $hospital_days);
						$removed_days['s'][] = $hospital_days[$find_s];
						unset($hospital_days[$find_s]);
					}
				}
				else
				{
					$find_s = '';
					$start_hospital_formatted = date('Y-m-d', $r1start);
					$find_s = array_search($start_hospital_formatted, $hospital_days);
					$removed_days['s2'][] = $hospital_days[$find_s];
					unset($hospital_days[$find_s]);
				}
			}


			$full_hospital_days = array_values(array_unique($hospital_days));

			return $full_hospital_days;
		}

		private function get_hospiz_days($ipid, $current_period)
		{
			$patientmaster = new PatientMaster();
			//get patient locations START
			$disallowed_location_types = array('2'); //hospiz
			$hospizids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhereIn('location_type', $disallowed_location_types);
			$hosparray = $hospizids->fetchArray();

			$hospiz_ids[] = '999999999';
			foreach($hosparray as $hospiz)
			{
				$hospiz_ids[] = $hospiz['id'];
			}

			//get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
				->andWhereIn('location_id', $hospiz_ids)
				->orderBy('valid_from,id ASC');

			$pat_locations = $patloc->fetchArray();

			$hospiz_days = array();
			foreach($pat_locations as $k_pat_loc => $v_pat_loc)
			{
				if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
				{
					$till = date('Y-m-d', strtotime('+1 day'));
				}
				else
				{
					$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
				}

				$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
				$r1end = strtotime(date('Y-m-d', strtotime($till)));
				$r2start = strtotime($current_period['start']);
				$r2end = strtotime($current_period['end']);

				if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
				{
					$period_hosp_locations[] = $v_pat_loc;
					$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

					$hosp = $patientmaster->getDaysInBetween($location_start, $till);
					$hospiz_days = array_merge($hospiz_days, $hosp);
				}

				//find hosp heads
				$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
				$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
				$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));

				//remove end head
				if($end_hospital_period != $next_start_hosp)
				{
					$find = array_search($end_hospital_period_formatted, $hospiz_days);
					$removed_days['e'][] = $hospiz_days[$find];
					unset($hospiz_days[$find]);
				}

				//remove start head
				if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
				{
					$find_s = '';
					$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
					$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
					$start_hospital_period = $r1start;
					$start_hospital_formatted = date('Y-m-d', $r1start);

					if($start_hospital_period != $previous_till)
					{
						$find_s = array_search($start_hospital_formatted, $hospiz_days);
						$removed_days['s'][] = $hospiz_days[$find_s];
						unset($hospiz_days[$find_s]);
					}
				}
				else
				{
					$find_s = '';
					$start_hospital_formatted = date('Y-m-d', $r1start);
					$find_s = array_search($start_hospital_formatted, $hospiz_days);
					$removed_days['s2'][] = $hospiz_days[$find_s];
					unset($hospiz_days[$find_s]);
				}
			}


			$full_hospiz_days = array_values(array_unique($hospiz_days));

			return $full_hospiz_days;
		}
		//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
		public function editbayerninvoiceAction($params = array())
		{
			setlocale(LC_ALL, 'de_DE.UTF8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$bayern_invoices = new BayernInvoices();
			$bayern_invoices_items = new BayernInvoiceItems();
			$bayern_invoices_form = new Application_Form_BayernInvoices();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			
			if(isset($params) && !empty($params)  && $params['bulk_print'] == '1'){
			    $_REQUEST = $params;
			    $_REQUEST['pdf'] =1;
			    $_REQUEST['mode'] =  null;
			    $this->_helper->viewRenderer->setNoRender();
			}
	 
			//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
			$clientid = isset($_REQUEST['clientid']) && ! empty($_REQUEST['clientid']) ? $_REQUEST['clientid'] :  $logininfo->clientid;
			$userid = isset($_REQUEST['userid']) && ! empty($_REQUEST['userid']) ? $_REQUEST['userid'] : $logininfo->userid;
			
			
			
			$has_edit_permissions = Links::checkLinkActionsPermission();
			if(!$has_edit_permissions) // if canedit = 0 - don't allow any additions or changes
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}
			
			//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
			if($_REQUEST['bulk_print'] == '1' && strlen($_REQUEST['invoiceid']) > 0){
			    $binvoice_details = $bayern_invoices->getBayernInvoice($_REQUEST['invoiceid']);
			    if($binvoice_details['storno'] == '1'){
			        $_REQUEST['invoiceid'] = $binvoice_details['record_id'];
			        $_REQUEST['stornopdf'] = 1;
			        $_REQUEST['storno'] = $binvoice_details['id'];
			    }
			}
			//--
			
	 
			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $bayern_invoices->getBayernInvoice($invoice_id);

				if(in_array($invoice_data['id'], BayernInvoices::get_storned_invoices($clientid)))
				{
					$this->view->has_storno = '1';
				}
				else
				{
					$this->view->has_storno = '0';
				}

				if(!$invoice_id && empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoice/bayerninvoices');
				}
	 

				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];

				//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}

					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}


				if($hi_perms_divisions)
				{

					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
				}

				$pathealthinsurancenr = "";
				if(count($healthinsu_array[0]))
				{
					$phi_details = $healthinsu_array[0]['name'];
				}
				else
				{
					$phi_details = "--";
				}

				$phi_details_sub = $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br/> ' . $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$this->view->health_insurance = $phi_details;
				$this->view->hi_subdiv_address = $phi_details_sub;


				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}


				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}

				if(strlen($invoice_data['footer']) == 0)
				{
					$invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				}

				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->client_details = $client_detail[0];

				$this->view->read_only_items = '0';
				if($invoice_data['status'] == '2' || $invoice_data['status'] == '3' || $invoice_data['status'] == '5')
				{
					$this->view->read_only_items = '1';
				}
			}
			 
	 
			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']) && empty($_REQUEST['pdf']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if(empty($_REQUEST['pdf']))
				{

					if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
					{
						$high_invoice_nr = $bayern_invoices->get_next_invoice_number($clientid);
						$_POST['prefix'] = $high_invoice_nr['prefix'];
						$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
					}
					else
					{
						$_POST['prefix'] = $invoice_data['prefix'];
						$_POST['invoice_number'] = $invoice_data['invoice_number'];
					}

					//save here
					
					// remove style from address
					if(strlen($_POST['invoice']['address']) > 0 ){
    				    if(strpos($_POST['invoice']['address'],"style"))
    				    {
    				        $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
    				    }
    				    $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
    				    $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
    				    $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
                    }
					$edit_invoice = $bayern_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);

					if($edit_invoice)
					{

						$this->_redirect(APP_BASE . 'invoice/bayerninvoices?invoiceid=' . $_REQUEST['invoiceid'] . '&flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/bayerninvoices?invoiceid=' . $_REQUEST['invoiceid'] . '&flg=edterr');
					}
				}
			}
			else if((!empty($_REQUEST['pdf']) || $_POST['pdf']) && !empty($_REQUEST['invoiceid']))
			{
 
				if($invoice_data['status'] == '1')
				{
					$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
				}

				$pdf_data = $_POST;
				//prepare items and custom items for pdf
				$pdf_data['prefix'] = $invoice_data['prefix'];
				$pdf_data['invoice_number'] = $invoice_data['invoice_number'];
				$pdf_data['patientdetails'] = $patient_details;
				$pdf_data['client_details'] = $client_detail[0];
				$pdf_data['invoice_total'] = $invoice_data['invoice_total'];
				$pdf_data['first_active_day'] = $invoice_data['start_active'];
				$pdf_data['last_active_day'] = $invoice_data['end_active'];
				$pdf_data['first_sapv_day'] = $invoice_data['start_sapv'];
				$pdf_data['last_sapv_day'] = $invoice_data['end_sapv'];
				
				$pdf_data['sapv_approve_nr'] = $invoice_data['sapv_approve_nr'];
				
				//$pdf_data['sapv_approve_date'] = $invoice_data['sapv_approve_date'];
				//ISPC-2747 Lore 25.11.2020
				if(isset($invoice_data['sapv_approve_date']) && $invoice_data['sapv_approve_date'] != "0000-00-00 00:00:00"){
				    $pdf_data['sapv_approve_date'] = $invoice_data['sapv_approve_date'];
				}else{
				    $pdf_data['sapv_approve_date'] = '';
				}

				if(strlen($_POST['invoice']['address']) > '0')
				{
					$pdf_data['address'] = $_POST['invoice']['address'];
				}
				else
				{
					$pdf_data['address'] = $invoice_data['address'];
				}

				if(strlen($_POST['footer']) > '0')
				{
					$pdf_data['sapv_footer'] = $_POST['footer'];
				}
				else
				{
					$pdf_data['sapv_footer'] = $invoice_data['footer'];
				}

				
				if($_REQUEST['pdf'] == '1')
				{
					$pdf_data['master_items'] = $invoice_data['items'];
				}
				else
				{

					foreach($_POST['price'] as $k_item => $v_price)
					{
						if(strlen($v_price) > '0' && strlen($_POST['total'][$k_item]) > '0' && strlen($_POST['qty'][$k_item]) > '0')
						{
							$post_items[$k_item]['shortcut'] = $_POST['shortcut'][$k_item];
							$post_items[$k_item]['name'] = $_POST['name'][$k_item];
							$post_items[$k_item]['qty'] = $_POST['qty'][$k_item];
							$post_items[$k_item]['price'] = $v_price;
							$post_items[$k_item]['custom'] = $_POST['custom'][$k_item];
							$post_items[$k_item]['total'] = $_POST['total'][$k_item];
							$post_items[$k_item]['shortcut_total'] = $_POST['total'][$k_item];
						}
					}

					$pdf_data['master_items'] = $post_items;
				}
				$pdf_data['client_ik'] = $this->view->client_ik;
				$pdf_data['patient_pflegestufe'] = $this->view->patient_pflegestufe;

				$pdf_data['insurance_no'] = $this->view->insurance_no;
				$pdf_data['clientid'] = $clientid;


				if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && empty($pdf_data['completed_date']))
				{
					$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
				}
				else if(empty($pdf_data['completed_date']))
				{
					$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
				}

				//ISPC-2747 Lore 27.11.2020
				if(strpos($invoice_data['show_boxes'], 'show_box_active') === false ){
				    $pdf_data['show_box_active'] = '0';
				}else {
				    $pdf_data['show_box_active'] = '1';
				}
				if(strpos($invoice_data['show_boxes'], 'show_box_patient') === false ){
				    $pdf_data['show_box_patient'] = '0';
				}else {
				    $pdf_data['show_box_patient'] = '1';
				}
				if(strpos($invoice_data['show_boxes'], 'show_box_sapv') === false ){
				    $pdf_data['show_box_sapv'] = '0';
				}else {
				    $pdf_data['show_box_sapv'] = '1';
				}
				
				$pdf_data['unique_id'] = $invoice_data['id'];
				
				if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
				{
					$storno_data = $bayern_invoices->getBayernInvoice($_REQUEST['storno']);

					//ISPC-2532 Lore 09.11.2020
					$pdf_data['storned_invoice_number'] = $pdf_data['prefix'].$pdf_data['invoice_number'];
					$pdf_data['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
					//
					
					$pdf_data['grand_total'] = ($storno_data['invoice_total'] * (-1));
					$pdf_data['address'] = $storno_data['address'];
					$pdf_data['sapv_footer'] = $storno_data['footer'];
					//TODO-3416 Ancuta 10.09.2020
					$pdf_data['prefix'] = $storno_data['prefix'];
					$pdf_data['invoice_number'] = $storno_data['invoice_number'];
                    //
                    
					
					if($_REQUEST['bulk_print'] == '1'){
					    $pdf_data['unique_id'] = $storno_data['id'];
					} else {
					    $pdf_data['unique_id'] = $storno_data['record_id'];
					}
					
					$template = 'storno_invoice_bayern_pdf.html';
				}
				else
				{
					$template = 'invoice_bayern_pdf.html';
				}
				
				
				if($_REQUEST['bulk_print'] == '1'){
				    $pdf_data['bulk_print'] = 1;
				    $pdf_data['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
				    
				    $files =$this->generate_pdf($pdf_data, "BayernPdf", $template, "P");

				    return $files;
				    exit();
				    
				} else {
				    $this->generate_pdf($pdf_data, "BayernPdf", $template, "P");
				}
			}
		}

		public function bayernlistpaymentsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$bayerninvoices = new BayernInvoices();
			$bayernpayments = new BayernInvoicePayments();
			$bayerninvoice_form = new Application_Form_BayernInvoices();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $bayernpayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $bayernpayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $bayernpayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $bayerninvoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $bayerninvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $bayernpayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoice/bayernlistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		//SGB V Verordnung Invoices
		//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
		public function socialcoderecordAction($params = array() )
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$tm = new TabMenus();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$sgbvinvoices = new SgbvInvoices();
			$client = new Client();

			if(isset($params) && !empty($params)){
			    $_REQUEST = $params;
			    $this->_helper->viewRenderer->setNoRender();
			}

			//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
			$clientid = isset($_REQUEST['clientid']) && ! empty($_REQUEST['clientid']) ? $_REQUEST['clientid'] :  $logininfo->clientid;
			$userid = isset($_REQUEST['userid']) && ! empty($_REQUEST['userid']) ? $_REQUEST['userid'] : $logininfo->userid;
			
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$client_details = $client->getClientDataByid($clientid);
			$this->view->client_details = $client_details[0];

			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			
			
			//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
			if($_REQUEST['bulk_print'] == '1' && strlen($_REQUEST['iid']) > 0){
			    $sgbvinvoice_details = $sgbvinvoices->getSgbvInvoice($_REQUEST['iid']);
			    if($sgbvinvoice_details['storno'] == '1'){
			        $_REQUEST['iid'] = $sgbvinvoice_details['record_id'];
			        $_REQUEST['stornopdf'] = 1;
			        $_REQUEST['storno'] = $sgbvinvoice_details['id'];
			    }
			}
			//--
			
			

			if(strlen($_REQUEST['iid']) > 0)
			{
				//get invoice address/footer
				$sgbvinvoice_details = $sgbvinvoices->getSgbvInvoice($_REQUEST['iid']);

				$ipid = $sgbvinvoice_details['ipid'];
				$decid = Pms_CommonData::getIdfromIpid($ipid);
				$invoicenumber = $sgbvinvoice_details['invoice_number'];

				$pseudo_post['address'] = $sgbvinvoice_details['address'];
				$pseudo_post['sapv_footer'] = $sgbvinvoice_details['footer'];
				$pseudo_post['unique_id'] = $_REQUEST['iid'];
				$pseudo_post['prefix'] = $sgbvinvoice_details['prefix'];


				$pseudo_post['start_sgbv_activity'] = date('d.m.Y', strtotime($sgbvinvoice_details['start_sgbv']));
				$pseudo_post['end_sgbv_activity'] = date('d.m.Y', strtotime($sgbvinvoice_details['end_sgbv']));

				$pseudo_post['first_active_day'] = date('d.m.Y', strtotime($sgbvinvoice_details['start_active']));
				$pseudo_post['last_active_day'] = date('d.m.Y', strtotime($sgbvinvoice_details['end_active']));

				$list = date('Y-m', strtotime($sgbvinvoice_details['invoice_start']));

				if(strlen($_REQUEST['completed_date']) > '0')
				{
					$pseudo_post['completed_date'] = date('d.m.Y', $_REQUEST['completed_date']);
				}
				else
				{
					if($sgbvinvoice_details['completed_date'] != '0000-00-00 00:00:00')
					{
						$pseudo_post['completed_date'] = date('d.m.Y', strtotime($sgbvinvoice_details['completed_date']));
					}
					else
					{
						$pseudo_post['completed_date'] = date('d.m.Y', strtotime($sgbvinvoice_details['create_date']));
					}
				}
				
				//ISPC-2747 Lore 27.11.2020
				if(strpos($sgbvinvoice_details['show_boxes'], 'show_box_active') === false ){
				    $pseudo_post['show_box_active'] = '0';
				}else {
				    $pseudo_post['show_box_active'] = '1';
				}
				if(strpos($sgbvinvoice_details['show_boxes'], 'show_box_patient') === false ){
				    $pseudo_post['show_box_patient'] = '0';
				}else {
				    $pseudo_post['show_box_patient'] = '1';
				}
				if(strpos($sgbvinvoice_details['show_boxes'], 'show_box_sapv') === false ){
				    $pseudo_post['show_box_sapv'] = '0';
				}else {
				    $pseudo_post['show_box_sapv'] = '1';
				}
				
			}
			else
			{
				$pseudo_post['sapv_footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				$pseudo_post['completed_date'] = date('d.m.Y', time());
			}

			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;

			$pseudo_post['patid'] = $decid;
			$pseudo_post['ipid'] = $ipid;
			$pseudo_post['clientid'] = $clientid;


			
			if($_REQUEST['bulk_print'] == '1'){
			    
			    $pdet = $patientmaster->get_patients_details_By_Ipids(array($ipid));
			    $pm = $pdet[$ipid];
			    $pseudo_post['patientdetails'] = $pm;
			    
			} else{
    			$pm = $patientmaster->getMasterData($decid, 0);
    			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
    			$this->view->patientdetails = $pm;
    			$pseudo_post['patientdetails'] = $pm;
			}
			
			
			if(strlen($_REQUEST['iid']) == 0)
			{
				$this->view->tabmenus = $tm->getMenuTabs();
			}

			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			$hi_perms_divisions = $divisions;

			//health insurance
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(empty($healthinsu_array[0]['name']))
				{
					$healthinsu_array[0]['name'] = $healtharray['name'];
				}
				if(empty($healthinsu_array[0]['ins_street']))
				{
					$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
				}
				if(empty($healthinsu_array[0]['ins_zip']))
				{
					$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
				}
				if(empty($healthinsu_array[0]['ins_city']))
				{
					$healthinsu_array[0]['ins_city'] = $healtharray['city'];
				}

				if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
				{
					$this->view->health_insurance_ik = $healtharray['iknumber'];
				}

				if(strlen($healthinsu_array[0]['kvk_no']) == 0)
				{
					$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
				}
			}


			if($hi_perms_divisions)
			{
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
			}

			if($healthinsu_array[0]['privatepatient'] == "1")
			{
//			get patient name and adress
				$patient_address = '&nbsp;' . htmlspecialchars($pm['first_name']) . ' ' . htmlspecialchars($pm['last_name']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['street1']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['zip']) . ' ' . '&nbsp;' . htmlspecialchars($pm['city']);
			}

			if(!empty($healthinsu_subdiv_arr['1']['name']))
			{
				//get new SAPV hi address
				$hi_address = '&nbsp;' . $healthinsu_subdiv_arr[1]['name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[1]['insurance_provider'] . '<br />';
				//$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[1]['contact_person'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[1]['street1'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[1]['zip'] . ' ' . $healthinsu_subdiv_arr[1]['city'];

				$this->view->health_insurance_ik = $healthinsu_subdiv_arr[1]['iknumber'];
				$this->view->health_insurance_kassenr = $healthinsu_subdiv_arr[1]['kvnumber'];
			}
			else
			{
				//get old hi_address
				$hi_address = '&nbsp;' . $healthinsu_array[0]['name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_insurance_provider'] . '<br />';
				//$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_contactperson'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_street'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];

				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
			}


			$pathealthinsurancenr = "";
			if(count($healthinsu_array[0]))
			{
				$phi_details = $healthinsu_array[0]['name'];
			}
			else
			{
				$phi_details = "--";
			}

			$phi_details_sub = $hi_address;

			$this->view->health_insurance = $phi_details;
			$this->view->hi_subdiv_address = $phi_details_sub;
			$pseudo_post['health_insurance'] = $phi_details;
			$pseudo_post['hi_subdiv_address'] = $phi_details_sub;


			//get admission-readmission cycles to extract months where there is at least 1 day active START
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$months = array();
			$active_days = array();
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));


					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{

					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}


				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
			}

			if($_REQUEST['dbgx'])
			{
				print_r($active_days);
				print_r($cycle_start_period);
				print_r($cycles);
				print_r($period_months);
				print_r($months);
				exit;
			}
			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}
			//get number of days in each month + start/end day START
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_performance';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];

			$days_in_period = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			foreach($active_days as $k_active_day => $v_active_day)
			{
				if(in_array($v_active_day, $days_in_period))
				{
					$active_days_in_period[] = $v_active_day;
				}
			}
			$this->view->period_days = $days_in_period;

			//get hospital/hospiz in current period
			$hospital_days = $this->get_period_hospitals($ipid, $clientid, $current_period, $active_days_in_period);

			//get sapv in current period
			$sapv_days = $this->get_period_sapv($ipid, $current_period, $hospital_days);

			foreach($sapv_days as $k_s_days => $v_s_days)
			{
				$sapv_days_inperiod[] = $k_s_days;
			}
			asort($sapv_days_inperiod);

			if(empty($pseudo_post['first_sapv_day']))
			{
				if(count($sapv_days_inperiod) > 0)
				{
					$this->view->first_sapv_day = date('d.m.Y', strtotime($sapv_days_inperiod[0]));
					$last_date = end($sapv_days_inperiod);
					$this->view->last_sapv_day = date('d.m.Y', strtotime($last_date));
				}
				else
				{
					$this->view->first_sapv_day = ' - ';
					$this->view->last_sapv_day = ' - ';
				}
			}

			//get pflegestuffe in current period
			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $current_period['start'], $current_period['end']);
			if($pflege_arr)
			{
				$last_pflege = end($pflege_arr);
				$this->view->patient_pflegestufe = $last_pflege['stage'];
			}
			else
			{
				$this->view->patient_pflegestufe = ' - ';
			}

			//get sapv(s) in current period
			$period_sapv = $sapvs->getSapvInPeriod($ipid, $current_period['start'], $current_period['end']);

			if($period_sapv[0]['approved_date'] != '0000-00-00 00:00:00' && strlen($period_sapv[0]['approved_date']) > 0 && $period_sapv[0]['approved_date'] != '1970-01-01 00:00:00')
			{
				$this->view->sapv_approve_date = date('d.m.Y', strtotime($period_sapv[0]['approved_date']));
			}
			else
			{
				$this->view->sapv_approve_date = ' - ';
			}

			if(strlen($period_sapv[0]['approved_number']) > 0)
			{
				$this->view->sapv_approve_nr = $period_sapv[0]['approved_number'];
			}
			else
			{
				$this->view->sapv_approve_nr = ' - ';
			}



			//get contact forms in current period
			$contact_forms_days = $this->get_period_contact_forms($ipid, $current_period);

			//get patient course in current period
			$course_days = $this->get_period_course($ipid, $current_period);

			//get real active patient days (active, with sapv and no hospital/hospiz)
			$real_active_days = $this->real_active_days($active_days_in_period, $hospital_days, $sapv_days);

			asort($real_active_days);
			asort($active_days_in_period);


			if(count($cycles[$ipid]['admissionDates']) > 0)
			{
				foreach($cycles[$ipid]['admissionDates'] as $k_adm => $v_adm)
				{
					$start_periods[$k_adm] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$k_adm]))
					{
						$end_periods[$k_adm] = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$k_adm]['date']));
					}
					else
					{
						$end_periods[$k_adm] = date('Y-m-d', time());
					}
				}
			}
			else
			{
				$start_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));
				$end_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
			}



			//start sgbv data gathering
			//get client national hollidays
			$nhollyday = new NationalHolidays();
			$national_holidays_arr = $nhollyday->getNationalHoliday($clientid, $current_period['start'], true);

			foreach($national_holidays_arr as $k_natholliday => $v_natholliday)
			{
				$national_holidays[] = strtotime(date('Y-m-d', strtotime($v_natholliday['NationalHolidays']['date'])));
			}

			$this->view->national_holidays = $national_holidays;

			//get day shortcuts group
			$sapv_day_gr = Pms_CommonData::get_sgbv_day_groups();


			//get day groups shortcuts
			$master_data = array();
			foreach($sapv_day_gr as $k_dgr => $v_dgr)
			{
				$master_data[$k_dgr] = array();
			}
			foreach($days_in_period as $k_period_day => $v_period_day)
			{
				$period_days_arr[$v_period_day] = array();
			}



			//get socialcode groups
			$socialcodegroups = new SocialCodeGroups();
			$grouplist = $socialcodegroups->getCientSocialCodeGroups($clientid);

			foreach($grouplist as $k_group => $v_group)
			{
				$group_list[$v_group['id']] = $v_group;
				$group_list_order[$v_group['id']] = $v_group['group_order'];
			}
			$this->view->group_list = $group_list;


			//get contact forms in period
			$cf = new ContactForms();
			$p_contactforms = $cf->get_contact_form_period($ipid, $current_period);

			foreach($p_contactforms as $k_p_cf => $v_p_cf)
			{
				$contact_form_ids[] = $v_p_cf['id'];
				$period_contact_form_date[$v_p_cf['id']] = date('Y-m-d', strtotime($v_p_cf['billable_date']));
				$period_contactforms[$v_p_cf['id']] = $v_p_cf;
			}

			//get saved actions
			$sgbv_form = new FormBlockSgbv();
			$initial_form_actions = $sgbv_form->getFormsSavedActions($ipid, $contact_form_ids);

			//get patient sgbv forms
			$disabled_statuses = array("10", "6");

			$form_date['start'] = $current_period['start'];
			$form_date['end'] = $current_period['end'];

			//allowed sgbv actions per days
			$sgbvforms = new SgbvForms();
			$alowed_sgbvs = $sgbvforms->getallPatientSgbvForm($ipid, $form_date, false, $disabled_statuses);

			if(empty($pseudo_post['start_sgbv_activity']))
			{
				if(count($alowed_sgbvs) > '0')
				{
					$start_sgbv_activity = date('d.m.Y', strtotime($alowed_sgbvs['0']['valid_from']));

					$last_alowed_sgbv = end($alowed_sgbvs);
					$end_sgbv_activity = date('d.m.Y', strtotime($last_alowed_sgbv['valid_till']));
				}
				else
				{
					$start_sgbv_activity = '0000-00-00 00:00:00';
					$end_sgbv_activity = '0000-00-00 00:00:00';
				}
				$this->view->start_sgbv_activity = $start_sgbv_activity;
				$this->view->end_sgbv_activity = $end_sgbv_activity;

				$pseudo_post['start_sgbv_activity'] = $start_sgbv_activity;
				$pseudo_post['end_sgbv_activity'] = $end_sgbv_activity;
			}
			else
			{
				$this->view->start_sgbv_activity = $pseudo_post['start_sgbv_activity'];
				$this->view->end_sgbv_activity = $pseudo_post['end_sgbv_activity'];
			}

			$a_sgbv_ids[] = '999999999';

			foreach($alowed_sgbvs as $k_sgbva => $v_sgbva)
			{
				$a_sgbv_ids[] = $v_sgbva['id'];

				$allowed_sgbv_start = date('Y-m-d', strtotime($v_sgbva['valid_from']));
				$allowed_sgbv_end = date('Y-m-d', strtotime($v_sgbva['valid_till']));
				$sgbv_alowed_days[$v_sgbva['id']] = $patientmaster->getDaysInBetween($allowed_sgbv_start, $allowed_sgbv_end);
			}

			$a_sgbv_ids = array_values(array_unique($a_sgbv_ids));

			$sgbv_form_items = new SgbvFormsItems();
			$allowed_sgbv_form_items_arr = $sgbv_form_items->getPatientSgbvFormItems($ipid, $a_sgbv_ids);

			foreach($allowed_sgbv_form_items_arr as $k_allowed_sgbv_item => $v_allowed_sgbv_item)
			{
				//free of charge
				if($v_allowed_sgbv_item['free_of_charge'] == '1')
				{
					$foc_sgbv2items[$v_allowed_sgbv_item['sgbv_form_id']][] = $v_allowed_sgbv_item['action_id'];
					$sgbv_foc_days[$v_allowed_sgbv_item['action_id']] = $patientmaster->getDaysInBetween($v_allowed_sgbv_item['valid_from'], $v_allowed_sgbv_item['valid_till']);
				}
				$allowed_sgbv2items[$v_allowed_sgbv_item['sgbv_form_id']][] = $v_allowed_sgbv_item['action_id'];

				$items_rules[$v_allowed_sgbv_item['sgbv_form_id']][$v_allowed_sgbv_item['action_id']]['day'] += $v_allowed_sgbv_item['per_day'];
				$items_rules[$v_allowed_sgbv_item['sgbv_form_id']][$v_allowed_sgbv_item['action_id']]['week'] += $v_allowed_sgbv_item['per_week'];

				$items_valid_period[$v_allowed_sgbv_item['sgbv_form_id']][$v_allowed_sgbv_item['action_id']] = $patientmaster->getDaysInBetween($v_allowed_sgbv_item['valid_from'], $v_allowed_sgbv_item['valid_till']);
			}

			foreach($items_valid_period as $k_sgbv_form => $v_form_action_arr)
			{
				foreach($v_form_action_arr as $k_action => $v_action_days)
				{
					foreach($v_action_days as $k_day => $v_day)
					{
						$v_week = date('W', strtotime($v_day));
						$items_period_rules[$k_action]['day'][$v_day] = $items_rules[$k_sgbv_form][$k_action]['day'];
						$items_period_rules[$k_action]['week'][$v_week] = $items_rules[$k_sgbv_form][$k_action]['week'];
						$items_period_rules[$k_action]['week_day'][$v_week][$v_day] = $items_rules[$k_sgbv_form][$k_action]['week'];
						// form an array - with valid days of action :: TODO-1053 10.07.2017
						$items_period_rules[$k_action]['valid_days'][] = $v_day;
					}
				}
			}

			if($_REQUEST['dbgz'] == 'y')
			{
				print_r("items_rules\n");
				print_r($items_rules);

				print_r("items_sgbv_periods\n");
				print_r($items_valid_period);

				print_r("items_period_rules\n");
				print_r($items_period_rules);

				exit;
			}

			//denied and free of charge sgbv actions per day
			//Latter change 07.05.13: get all sgbv items free of charge
			$denied_sgbvs = $sgbvforms->getallPatientSgbvForm($ipid, $form_date, $disabled_statuses);



			$d_sgbv_ids[] = '999999999';
			foreach($denied_sgbvs as $k_sgbvd => $v_sgbvd)
			{
				$d_sgbv_ids[] = $v_sgbvd['id'];

				$sgbv_start = date('Y-m-d', strtotime($v_sgbvd['valid_from']));
				$sgbv_end = date('Y-m-d', strtotime($v_sgbvd['valid_till']));
				$sgbv_denied_days[$v_sgbvd['id']] = $patientmaster->getDaysInBetween($sgbv_start, $sgbv_end);
			}

			$d_sgbv_ids = array_values(array_unique($d_sgbv_ids));

			$sgbv_form_items_arr = $sgbv_form_items->getPatientSgbvFormItems($ipid, $d_sgbv_ids);

			foreach($sgbv_form_items_arr as $k_sgbv_item => $v_sgbv_item)
			{
				$sgbv2items[$v_sgbv_item['sgbv_form_id']][] = $v_sgbv_item['action_id'];
			}

			$master_denied_days = array();
			foreach($active_days_in_period as $k_active_day_period => $v_active_day_period)
			{

				//construct array with allowed sgbv actions each day
				foreach($alowed_sgbvs as $k_sgbv_a => $v_sgbv_a)
				{

					if(in_array($v_active_day_period, $sgbv_alowed_days[$v_sgbv_a['id']]))
					{
						if(count($master_allowed_days[$v_active_day_period][0]) == 0)
						{
							$days_allowed[0] = array();
						}

						$days_allowed[0] = array_unique(array_values(array_merge($days_allowed[0], $allowed_sgbv2items[$v_sgbv_a['id']])));
						$master_allowed_days[$v_active_day_period] = $days_allowed[0];
					}
				}
				//construct array with denied sgbv actions each day
				foreach($denied_sgbvs as $k_sgbv_d => $v_sgbv_d)
				{
					if(in_array($v_active_day_period, $sgbv_denied_days[$v_sgbv_d['id']]))
					{
						if(count($master_denied_days[$v_active_day_period][0]) == 0)
						{
							$days[0] = array();
						}

						$days[0] = array_unique(array_values(array_merge($days[0], $sgbv2items[$v_sgbv_d['id']])));
						$days[] = "0";

						if(count($master_denied_days[$v_active_day_period]) > 0)
						{
							$master_denied_days[$v_active_day_period] = array_unique(array_values(array_merge($master_denied_days[$v_active_day_period], $days[0])));
						}
						else
						{
							$master_denied_days[$v_active_day_period] = $days[0];
						}
					}
				}
			}


			/* 
			  // TODO-1053 10.07.2017
			  foreach($master_allowed_days as $day=>$item2day){
				foreach($item2day as $key_itm=>$itm){

					if(!in_array($day,$items_period_rules[ $itm ]['valid_days'])){
						$invalid_item_days[$day][] = $itm;
						unset($master_allowed_days[$day][$key_itm]);
					}
				}
			} */
 
			//array foc(free of charge) days with actions ids
			foreach($sgbv_foc_days as $k_foc_sgbv_id => $v_foc_sgbv_dates)
			{
				foreach($v_foc_sgbv_dates as $k_dates => $v_date)
				{
					$master_denied_days[$v_date][] = $k_foc_sgbv_id;
				}
			}


			$socialcode_actions = new SocialCodeActions();
			$sgbv_actions = $socialcode_actions->official_actions_details($clientid);


			$sgbv_actions_details = $sgbv_actions['action_name'];
			$sgbv_action2groups = $sgbv_actions['group'];


			$this->view->sgbv_actions_details = $sgbv_actions_details;

			//excluded actions which have disabled sgbv
			foreach($initial_form_actions as $k_ff_action => $v_ff_action)
			{
				$fform_actions_arr[$v_ff_action['contact_form_id']][] = $v_ff_action['action_id'];
				$i_form_actions[$v_ff_action['action_id']] = $v_ff_action;
			}

			foreach($fform_actions_arr as $kk_contact_form_id => $v_actions)
			{
				$current_contact_form_date = $period_contact_form_date[$kk_contact_form_id];
				foreach($v_actions as $k_v_action => $v_v_action)
				{
					if(!in_array($v_v_action, $master_denied_days[$current_contact_form_date]) && in_array($v_v_action, $master_allowed_days[$current_contact_form_date]))
					{
						$remaing_form_actions[$kk_contact_form_id][] = $v_v_action;
					}
				}
			}


			foreach($initial_form_actions as $k_f_action => $v_f_action)
			{
				//excluded actions which have disabled sgbv
				if($sgbv_action2groups[$v_f_action['action_id']] != '' && in_array($v_f_action['action_id'], $remaing_form_actions[$v_f_action['contact_form_id']]))
				{
					$form_actions_arr[$v_f_action['contact_form_id']][] = $v_f_action['action_id'];
					$actions2high_group[$v_f_action['contact_form_id']][$v_f_action['action_id']] = $sgbv_action2groups[$v_f_action['action_id']];
					$actions2high_group_order[$v_f_action['contact_form_id']][$sgbv_action2groups[$v_f_action['action_id']]] = $group_list_order[$sgbv_action2groups[$v_f_action['action_id']]];

					$cf_with_actions_ids[] = $v_f_action['contact_form_id'];
				}
			}

			$cf_with_actions_ids = array_values(array_unique($cf_with_actions_ids));

			//contact forms highest group and actions from highest group per contact form
			foreach($actions2high_group_order as $k_contact_form_ord => $groups_contact_form_ord)
			{
				asort($groups_contact_form_ord);
				$max_group = end($groups_contact_form_ord);

				//flip previous maxed array to get the groupid
				$fliped_groups_contact_form_ord = array_flip($groups_contact_form_ord);

				$contact_form_high_group[$k_contact_form_ord] = $fliped_groups_contact_form_ord[$max_group];
			}

			foreach($actions2high_group as $k_contact_form => $groups_contact_form)
			{
				foreach($groups_contact_form as $k_action_id => $v_group_id)
				{
					$highest_actions[$k_contact_form][] = $k_action_id;
					$highest_actions_details[$k_contact_form][$k_action_id] = $sgbv_actions_details[$k_action_id];
				}
			}


			//get socialcode group prices assigned to the health insurance of the patient
			$phelathinsurance = new PatientHealthInsurance();
			$patient_healthinsurance = $phelathinsurance->getPatientHealthInsurance($ipid);

			if($patient_healthinsurance)
			{
				$health_insurance_id = $patient_healthinsurance[0]['companyid'];

				$hi_query = Doctrine_Query::create()
					->select('price_sheet, price_sheet_group')
					->from('HealthInsurance')
					->where("id='" . $health_insurance_id . "'");
				$hi_array = $hi_query->fetchArray();


				if(!empty($hi_array))
				{
					$price_sheet_group = $hi_array[0]['price_sheet_group'];
				}
			}

			/* -------------------------- RWH - get healthinsurance pricelists - START --------------------------------- */

			//default period without sgbv form id(current month

			$period_pricelist['start'] = date('Y-m-d', strtotime($current_period['start']));
			$period_pricelist['end'] = date('Y-m-d', strtotime($current_period['start']));


			$socialcode_price = new SocialCodePriceList();
			$price_sheet = $socialcode_price->get_group_period_pricelist($price_sheet_group, $clientid, $period_pricelist);

			if($_REQUEST['dbgq'])
			{
				print_r($period_pricelist);
				print_r("Patient Health insurance\n");
				print_r($patient_healthinsurance);
				print_r("Health Insurance pricesheet group\n");
				print_r($price_sheet_group);
				print_r("Group Pricelists\n");
				print_r($price_sheet);
				exit;
			}
			/* -------------------------- RWH - get healthinsurance pricelists - END --------------------------------- */

			//get pricelist based on pricesheet from health insurance
			$p_groups = new SocialCodePriceGroups();
			$price_groups = $p_groups->get_prices($price_sheet, $clientid);

			foreach($price_groups as $k_price_group => $v_price_group)
			{
				$group_price_details[$v_price_group['groupshortcut']] = $v_price_group['groupname'];
			}
			$b_groups = new SocialCodePriceBonuses();
			$bonuses_price = $b_groups->get_prices($price_sheet, $clientid);
			foreach($bonuses_price as $k_bprice_group => $v_bprice_group)
			{
				$bonuses_price_details[$v_bprice_group['bonusshortcut']] = $v_bprice_group['bonusname'];
				$bonuses_prices[$v_bprice_group['bonusshortcut']] = $v_bprice_group['price'];
			}

			if($_REQUEST['dbg'] == "x")
			{
				print_r("\nDENIED SGBV\n");
				print_r($denied_sgbvs);
				print_r($free_of_charge_sgbvs);
				print_r($sgbv_denied_days);

				print_r("Master Denied Days\n\n");
				print_r($master_denied_days);
				print_r($sgbv_form_items_arr);
				print_r($sgbv2items);

				print_r("Remaing Form Actions");
				print_r($remaing_form_actions);

				print_r("\nPatient Contact forms\n\n");
				print_r($p_contactforms);

				print_r("\nForm actions arr\n\n");
				print_r($form_actions_arr);

				print_r("\n" . 'CF 2 Highest group' . "\n");
				print_r($contact_form_high_group);

				print_r("\n" . 'CF actions that are in Highest group $highest_actions' . "\n");
				print_r($highest_actions);
				print_r("\n" . 'CF date' . "\n");
				print_r($period_contact_form_date);

				print_r("\n" . 'CF actions' . "\n");
				print_r($form_actions);

				print_r("\n cf_with_actions_ids\n\n");
				print_r($cf_with_actions_ids);
			
				exit;
			}

			foreach($p_contactforms as $k_pcf => $v_pcf)
			{
				if(in_array($v_pcf['id'], $cf_with_actions_ids))
				{
					foreach($sapv_day_gr as $k_d_gr => $v_d_gr)
					{
						if((($v_pcf['begin_date_h'] < '06' || $v_pcf['end_date_h'] >= '20') && $k_d_gr == 'Z') || ($v_pcf['end_date_h'] < $v_d_gr['end'] && $v_pcf['end_date_h'] >= $v_d_gr['start'] && $v_pcf['end_date_h'] < '20' && $v_pcf['begin_date_h'] >= '06')
						)
						{
							$current_week_day = date('w', strtotime($v_pcf['billable_date']));
							$current_date = date('Y-m-d', strtotime($v_pcf['billable_date']));

							$skip_night_bonus = false;
							if($v_pcf['end_date_h'] == "20" && $v_pcf['end_date_m'] == "00")
							{
								$skip_night_bonus = true;
							}


							foreach($highest_actions[$v_pcf['id']] as $k_high_group_action => $v_high_group_action)
							{
								//limit per day and week
								$current_week = date('W', strtotime($current_date));

								if($_REQUEST['dbgz'] == 'yy')
								{
									print_r("Current date: " . $current_date . " -- Current week." . $current_week . "\n");
									print_r("Week(" . $current_week . ") used qty < Item week rule\n");
									print_r($current_week_qty['actions'][$v_high_group_action][$current_week]['qty'] . " < " . $items_period_rules[$v_high_group_action]['week_day'][$current_week][$current_date]);
									var_dump($current_week_qty['actions'][$v_high_group_action][$current_week]['qty'] < $items_period_rules[$v_high_group_action]['week_day'][$current_week][$current_date]);
									print_r("\n");
									print_r("Day used qty < Item day rule\n");
									print_r($current_day_qty['actions'][$v_high_group_action][$current_date]['qty'] . " < " . $items_period_rules[$v_high_group_action]['day'][$current_date]);
									var_dump($current_day_qty['actions'][$v_high_group_action][$current_date]['qty'] < $items_period_rules[$v_high_group_action]['day'][$current_date]);
									print_r("\n\n");
								}

								if($current_week_qty['actions'][$v_high_group_action][$current_week]['qty'] < $items_period_rules[$v_high_group_action]['week_day'][$current_week][$current_date] && $current_day_qty['actions'][$v_high_group_action][$current_date]['qty'] < $items_period_rules[$v_high_group_action]['day'][$current_date])
								{
									$current_week_qty['actions'][$v_high_group_action][$current_week]['qty'] += 1;
									$current_day_qty['actions'][$v_high_group_action][$current_date]['qty'] += 1;

									//initialize arrays with days if empty
									if(count($master_data[$k_d_gr]['bonus'][$contact_form_high_group[$v_pcf['id']]]) == '0')
									{
										$master_data[$k_d_gr]['bonus'][$contact_form_high_group[$v_pcf['id']]] = $period_days_arr;
									}

									//initialize arrays with days if empty
									if(count($master_data[$k_d_gr]['actions'][$contact_form_high_group[$v_pcf['id']]][$v_high_group_action]) == '0')
									{
										$master_data[$k_d_gr]['actions'][$contact_form_high_group[$v_pcf['id']]][$v_high_group_action] = $period_days_arr;
									}

									//initialize group days if array is empty
									if(count($master_data[$k_d_gr]['group'][$contact_form_high_group[$v_pcf['id']]]) == '0')
									{
										$master_data[$k_d_gr]['group'][$contact_form_high_group[$v_pcf['id']]] = $period_days_arr;
									}

									//populate actions data
									$master_data[$k_d_gr]['actions'][$contact_form_high_group[$v_pcf['id']]][$v_high_group_action][$current_date]['qty'] += 1;

									//populate master group data
									$master_data[$k_d_gr]['group'][$contact_form_high_group[$v_pcf['id']]][$current_date][] = $v_pcf['id'];
									$master_data[$k_d_gr]['group'][$contact_form_high_group[$v_pcf['id']]][$current_date] = array_values(array_unique($master_data[$k_d_gr]['group'][$contact_form_high_group[$v_pcf['id']]][$current_date]));


									if(count($master_data[$k_d_gr]['actions'][$contact_form_high_group[$v_pcf['id']]][$v_high_group_action][$current_date]) > 0)
									{
										//night shift bonus
										if($k_d_gr == 'Z' && !$skip_night_bonus)
										{
											$master_data[$k_d_gr]['bonus'][$contact_form_high_group[$v_pcf['id']]][$current_date]['qty_n'] = 1;
											$master_data[$k_d_gr]['bonus'][$contact_form_high_group[$v_pcf['id']]][$current_date]['qty_n_cf'][$v_pcf['id']] += 1;
										}

										//holidays and sunday === moved below (//populate group dataRichten)
										if($current_week_day == 0 || in_array(strtotime($current_date), $national_holidays))
										{
											$master_data[$k_d_gr]['bonus'][$contact_form_high_group[$v_pcf['id']]][$current_date]['qty_h'] = 1;
										}

										if(count($master_data[$k_d_gr]['group'][$contact_form_high_group[$v_pcf['id']]][$current_date]) > 0)
										{
											//old master data items with days in keys
											$mdi_old['group'][$contact_form_high_group[$v_pcf['id']]][$current_date] = '1';
											$master_data_items['group'][$contact_form_high_group[$v_pcf['id']]][$v_pcf['id']] = '1';
										}
									}



									if(count($master_data[$k_d_gr]['group'][$contact_form_high_group[$v_pcf['id']]][$current_date]) > '0' && ($current_week_day == 0 || in_array(strtotime($current_date), $national_holidays)))
									{
										$master_data[$k_d_gr]['bonus'][$contact_form_high_group[$v_pcf['id']]][$current_date]['qty_h'] = count($master_data[$k_d_gr]['group'][$contact_form_high_group[$v_pcf['id']]][$current_date]);
									}

									if(count($master_data[$k_d_gr]['bonus'][$contact_form_high_group[$v_pcf['id']]][$current_date]['qty_n_cf']) > '0')
									{
										$master_data[$k_d_gr]['bonus'][$contact_form_high_group[$v_pcf['id']]][$current_date]['qty_n'] = count($master_data[$k_d_gr]['bonus'][$contact_form_high_group[$v_pcf['id']]][$current_date]['qty_n_cf']);
									}
								}
							}

							//night shift bonus
							if($k_d_gr == 'Z')
							{
								$master_data_items['bonus']['n']['qty'][$current_date] = count($master_data[$k_d_gr]['bonus'][$contact_form_high_group[$v_pcf['id']]][$current_date]['qty_n_cf']);
							}

							//holidays and sunday
							if($current_week_day == 0 || in_array(strtotime($current_date), $national_holidays))
							{
								$master_data_items['bonus']['h'] += $master_data[$k_d_gr]['bonus'][$contact_form_high_group[$v_pcf['id']]][$current_date]['qty_h'];
							}
						}
					}
				}
			}
			if($_REQUEST['dbgz'] == 'yy')
			{
				print_r("current_day_qty\n");
				print_r($current_day_qty);
				print_r("current_week_qty\n");
				print_r($current_week_qty);
				exit;
			}
			if($_REQUEST['dbgz'])
			{
				print_r($master_data);
				print_r("XX\n");
				print_r($master_data_items);
				exit;
			}

			$item = '1';
			$grand_total = '0';

			foreach($master_data_items as $k_group_items => $v_group_items)
			{
				foreach($v_group_items as $k_group => $v_group_qty)
				{
					//used to get the activity dates

					if($k_group_items == 'group')
					{
						$invoice_items['group'][$item]['shortcut'] = $price_groups[$k_group]['groupshortcut'];
						$invoice_items['group'][$item]['price'] = $price_groups[$k_group]['price'];
						$invoice_items['group'][$item]['qty'] = count($v_group_qty);
						$invoice_items['group'][$item]['shortcut_total'] = (count($v_group_qty) * $price_groups[$k_group]['price']);
						$grand_total += (count($v_group_qty) * $price_groups[$k_group]['price']);
						$item++;
					}

					if($k_group_items == 'bonus')
					{
						if($k_group == 'n')
						{
							$v_group_qty_sum = array_sum($v_group_qty['qty']);
						}
						else
						{
							$v_group_qty_sum = $v_group_qty;
						}
						$invoice_items['bonus'][$item]['shortcut'] = $k_group;
						$invoice_items['bonus'][$item]['qty'] = $v_group_qty_sum;

						//todo add price group here
						$invoice_items['bonus'][$item]['price'] = $bonuses_prices[strtoupper($k_group)];
						$invoice_items['bonus'][$item]['shortcut_total'] = ($v_group_qty_sum * $bonuses_prices[strtoupper($k_group)]);
						$grand_total += ($v_group_qty_sum * $bonuses_prices[strtoupper($k_group)]);
						$item++;
					}

					$invoice_items['grand_total'] = $grand_total;
				}
			}

			$activity_days[] = '9999999';
			foreach($mdi_old as $k_group_mdi => $v_group_mdi)
			{
				foreach($v_group_mdi as $k_gr => $v_gr_qty)
				{
					//used to get the activity dates
					$extracted_keys = array_keys($v_gr_qty);
					if(!empty($extracted_keys))
					{
						$activity_days = array_merge_recursive($extracted_keys, $activity_days);
					}
				}
			}
			unset($activity_days[array_search('9999999', $activity_days)]);
			asort($activity_days);
			$activity_days = array_values($activity_days);

			if(strlen($pseudo_post['first_active_day']) == 0)
			{
				if(count($activity_days) > 0)
				{
					$first_active_day = date('d.m.Y', strtotime($activity_days[0]));

					$last_date = end($activity_days);
					$last_active_day = date('d.m.Y', strtotime($last_date));
				}
				else
				{
					$first_active_day = '0000-00-00 00:00:00';
					$last_active_day = '0000-00-00 00:00:00';
				}

				$pseudo_post['first_active_day'] = $first_active_day;
				$pseudo_post['last_active_day'] = $last_active_day;
				$this->view->first_active_day = $first_active_day;
				$this->view->last_active_day = $last_active_day;
			}

			$this->view->master_data = $master_data;
			$this->view->shortcuts = $sapv_day_gr;



			if($_REQUEST['pdfquick'] == '1' || $_REQUEST['mode'] == 'pdfs' || strlen($_POST['pdf']) > 0)
			{

				$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];
				$pseudo_post['client_details'] = $client_details[0];
				$pseudo_post['clientid'] = $clientid;
				$pseudo_post['period_days'] = $days_in_period;
				$pseudo_post['totals'] = $totals;
				$pseudo_post['master_data'] = $master_data;

				$pseudo_post['group_list'] = $group_list;
				$pseudo_post['sgbv_actions_details'] = $sgbv_actions_details;
				$pseudo_post['national_holidays'] = $national_holidays;


				$pseudo_post['health_insurance_ik'] = $this->view->health_insurance_ik;
				$pseudo_post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;
				$pseudo_post['insurance_no'] = $this->view->insurance_no;

				$pseudo_post['patient_address'] = $patient_address;
				if(strlen($pseudo_post['address']) == '0')
				{
					$pseudo_post['address'] = $hi_address;
				}

				$pseudo_post['sapv_approve_date'] = $this->view->sapv_approve_date;
				$pseudo_post['sapv_approve_nr'] = $this->view->sapv_approve_nr;
				$pseudo_post['patient_pflegestufe'] = $this->view->patient_pflegestufe;


				if(strlen($_REQUEST['iid']))
				{
					$pseudo_post['address'] = $sgbvinvoice_details['address'];
					$pseudo_post['hi_subdiv_address'] = $sgbvinvoice_details['address'];
					
					// Take saved address- do not overwrite
					if(strlen($sgbvinvoice_details['address']) > 0 ){
					    $pseudo_post['patient_address'] = $sgbvinvoice_details['address'];
					} else{
					    $pseudo_post['patient_address'] = $patient_address;
					    
					}
					

					$bonuses_arr = array('n', 'h');
					$items_invoice['grand_total'] = $sgbvinvoice_details['invoice_total'];
					foreach($sgbvinvoice_details['items'] as $k_itm => $v_itm)
					{
						if(!in_array($v_itm['shortcut'], $bonuses_arr))
						{
							$grouper = 'group';
						}
						else
						{
							$grouper = 'bonus';
						}
						$items_invoice[$grouper][$v_itm['shortcut']] = $v_itm;
						$items_invoice[$grouper][$v_itm['shortcut']]['shortcut_total'] = ($v_itm['qty'] * $v_itm['price']);
					}

					$pseudo_post['invoice_items'] = $items_invoice;
				}
				else
				{
					$pseudo_post['invoice_items'] = $invoice_items;
				}

				$pseudo_post['group_price_details'] = $group_price_details;
				$pseudo_post['bonuses_price_details'] = $bonuses_price_details;

				if($_REQUEST['pdfquick'] != 1 && strlen($_POST['pdf']) == '0')
				{
//				21.06.2013 Added invoice number type START
					$sgbv_invoices_number = $sgbvinvoices->get_next_invoice_number($clientid, true);
					$prefix = $sgbv_invoices_number['prefix'];
					$invoicenumber = $sgbv_invoices_number['invoicenumber'];
//				21.06.2013 Added invoice number type END


					$pseudo_post['prefix'] = $prefix;

					//insert invoice START
					$ins_inv = new SgbvInvoices();
					$ins_inv->invoice_start = date('Y-m-d H:i:s', strtotime($current_period['start']));
					$ins_inv->invoice_end = date('Y-m-d H:i:s', strtotime($current_period['end']));

					$ins_inv->start_active = date('Y-m-d H:i:s', strtotime($pseudo_post['first_active_day']));
					$ins_inv->end_active = date('Y-m-d H:i:s', strtotime($pseudo_post['last_active_day']));

					$ins_inv->start_sgbv = date('Y-m-d H:i:s', strtotime($pseudo_post['start_sgbv_activity']));
					$ins_inv->end_sgbv = date('Y-m-d H:i:s', strtotime($pseudo_post['end_sgbv_activity']));

					$ins_inv->ipid = $ipid;
					$ins_inv->client = $clientid;
					$ins_inv->prefix = $prefix;
					$ins_inv->invoice_number = $invoicenumber;
					$ins_inv->invoice_total = $invoice_items['grand_total'];
					$ins_inv->address = (strlen($pseudo_post['patient_address']) > '0') ? $pseudo_post['patient_address'] : $pseudo_post['address'];
					$ins_inv->status = '1'; // DRAFT - ENTWURF
					$ins_inv->save();

					$ins_id = $ins_inv->id;

					foreach($invoice_items['group'] as $k_inv => $v_inv)
					{
						$invoice_items_arr[] = array(
							'invoice' => $ins_id,
							'client' => $clientid,
							'shortcut' => $v_inv['shortcut'],
							'qty' => $v_inv['qty'],
							'price' => $v_inv['price']
						);
					}
					foreach($invoice_items['bonus'] as $k_b_inv => $v_b_inv)
					{
						$invoice_items_arr[] = array(
							'invoice' => $ins_id,
							'client' => $clientid,
							'shortcut' => $v_b_inv['shortcut'],
							'qty' => $v_b_inv['qty'],
							'price' => $v_b_inv['price']
						);
					}


					if(count($invoice_items) > 0)
					{
						//insert many records with one query!!
						$collection = new Doctrine_Collection('SgbvInvoiceItems');
						$collection->fromArray($invoice_items_arr);
						$collection->save();
					}

					$pseudo_post['unique_id'] = $ins_id;
				}

				//insert invoice END
				$pseudo_post['invoice_number'] = $invoicenumber;

				if(($_REQUEST['pdfquick'] == '1' || strlen($_POST['pdf']) > 0) && $_REQUEST['mode'] != 'pdfs')
				{
					$this->generate_pdf($pseudo_post, "SocialcodePdf", "socialcodepdf.html");
				}
				else if($_REQUEST['mode'] == 'pdfs')
				{

					if($_REQUEST['dbg'] == 'show')
					{
						print_R($pseudo_post);
						exit;
					}

					if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'])
					{
						$storno_data = $sgbvinvoices->getSgbvInvoice($_REQUEST['storno']);

						//ISPC-2532 Lore 09.11.2020
						$pseudo_post['storned_invoice_number'] = $pseudo_post['prefix'].$pseudo_post['invoice_number'];
						
						$pseudo_post['address'] = $storno_data['address'];
						$pseudo_post['client'] = $storno_data['client'];
						$pseudo_post['prefix'] = $storno_data['prefix'];
						$pseudo_post['invoice_number'] = $storno_data['invoice_number'];
						$pseudo_post['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
						$pseudo_post['first_active_day'] = date('d.m.Y', strtotime($storno_data['start_active']));
						$pseudo_post['last_active_day'] = date('d.m.Y', strtotime($storno_data['end_active']));
						if($storno_data['start_sgbv'] != '0000-00-00 00:00:00' && $storno_data['end_sgbv'] != '0000-00-00 00:00:00')
						{
							$pseudo_post['start_sgbv_activity'] = date('d.m.Y', strtotime($storno_data['start_sgbv']));
							$pseudo_post['end_sgbv_activity'] = date('d.m.Y', strtotime($storno_data['end_sgbv']));
						}
						$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];
						if($_REQUEST['bulk_print'] == '1'){
						    $pseudo_post['unique_id'] = $storno_data['id'];
						} else { 
						  $pseudo_post['unique_id'] = $storno_data['record_id'];
						}
						$pseudo_post['grand_total'] = ($storno_data['invoice_total'] * (-1));
						$pseudo_post['sapv_footer'] = $storno_data['footer'];

						$template_files = array('storno_invoice_sgbv_pdf.html', 'socialcodepdf.html');
					}
					else
					{
						$template_files = array('invoice_sgbv_pdf.html', 'socialcodepdf.html');
					}

					//ISPC-2747 Lore 11.12.2020
					if($sgbvinvoice_details['custom_invoice'] == 'custom_invoice'){
					    $pseudo_post['insurance_no'] = $sgbvinvoice_details['insurance_no'];
					    $pseudo_post['patient_pflegestufe'] = $sgbvinvoice_details['patient_care'];
					}


					$orientation = array('P', 'L');
					$background_pages = array('0'); //0 is first page;

					if($_REQUEST['bulk_print'] == '1'){
					    $pseudo_post['bulk_print'] = 1;
					    $pseudo_post['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
					    
					    $files =$this->generate_pdf($pseudo_post, "SocialcodePdfs", $template_files, $orientation, $background_pages);
					
					    return $files;
					    exit();
					    
					} else {
						//ISPC-2745 Carmen 17.11.2020
						//create batch name
						$Batch_name = false;
						$Batch_name = $pseudo_post['prefix'].$pseudo_post['invoice_number'];
					
						$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'bw_sgbv_invoice');
						
						if($template_data)
						{								
							// generate invoice page
							$tokenfilter = array();
							$tokenfilter['patient'] = $pseudo_post['patientdetails'];
							$tokenfilter['invoice']['healthinsurancenumber'] = $pseudo_post['insurance_no'];
							$tokenfilter['invoice']['institutskennzeichen'] = $pseudo_post['client_ik'];
							
							$tokenfilter['invoice']['prefix'] = $pseudo_post['prefix'];
							$tokenfilter['invoice']['invoicenumber'] = $pseudo_post['invoice_number'];							
							$tokenfilter['invoice']['full_invoice_number'] = $pseudo_post['prefix'].$pseudo_post['invoice_number'];
							$tokenfilter['invoice']['invoicedate'] = strftime('%A, %d. %B %Y', strtotime($pseudo_post['completed_date']));
							$tokenfilter['invoice']['patient_pflegestufe'] = $pseudo_post['patient_pflegestufe'];
							$tokenfilter['invoice']['unique_id'] = $pseudo_post['unique_id'];
							if($pseudo_post['start_sgbv_activity'] != "0000-00-00 00:00:00" && $pseudo_post['start_sgbv_activity'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['start_sgbv_activity'] = date('d.m.Y', strtotime($pseudo_post['start_sgbv_activity']));
							}
							else 
							{
								$tokenfilter['invoice']['start_sgbv_activity'] = "-";
							}
							if($pseudo_post['end_sgbv_activity'] != "0000-00-00 00:00:00" && $pseudo_post['end_sgbv_activity'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['end_sgbv_activity'] = date('d.m.Y', strtotime($pseudo_post['end_sgbv_activity']));
							}
							else 
							{
								$tokenfilter['invoice']['end_sgbv_activity'] = "-";
							}
							if($pseudo_post['first_active_day'] != "0000-00-00 00:00:00" && $pseudo_post['first_active_day'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['first_active_day'] = date('d.m.Y', strtotime($pseudo_post['first_active_day']));
							}
							else
							{
								$tokenfilter['invoice']['first_active_day'] = "-";
							}
							if($pseudo_post['last_active_day'] != "0000-00-00 00:00:00" && $pseudo_post['last_active_day'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['last_active_day'] = date('d.m.Y', strtotime($pseudo_post['last_active_day']));
							}
							else
							{
								$tokenfilter['invoice']['last_active_day'] = "-";
							}
							
							if($pseudo_post['patient_address'] != "")
							{
								$tokenfilter['invoice']['address'] = $pseudo_post['patient_address'];
							}
							else 
							{
								$tokenfilter['invoice']['address'] = $pseudo_post['address'];
							}
							
							$tokenfilter['invoice']['invoicefooter'] = $pseudo_post['sapv_footer'];
							if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'])
							{
								$tokenfilter['invoice']['invoiceamount'] = number_format($pseudo_post['grand_total'], '2', ',', '.');
							}
							else 
							{
								$tokenfilter['invoice']['invoiceamount'] = number_format($pseudo_post['invoice_items']['grand_total'], '2', ',', '.');
							}
							$keyi = 0;
							foreach($pseudo_post['invoice_items'] as $kivi => $vivi)
							{
								if($kivi != 'grand_total')
								{
									$invoice_items['items'][$keyi][$kivi] = $vivi;
									$keyi++;
								}
								
							}
							
							if(count($pseudo_post['invoice_items']) > '0')
							{
								$rows = count($invoice_items['items']);
								$grid = new Pms_Grid($invoice_items['items'], 1, $rows, "bw_sgbv_invoice_items_list_pdf.html");
								$grid_short = new Pms_Grid($invoice_items['items'], 1, $rows, "bw_sgbv_invoice_items_list_pdf_short.html");
								
								$grid->group_price_details = $pseudo_post['group_price_details'];
								$grid->bonuses_price_details = $pseudo_post['bonuses_price_details'];
								$grid->invoice_total = $tokenfilter['invoice']['invoiceamount'];
								$grid->max_entries = $rows;
								
								$grid_short->group_price_details = $pseudo_post['group_price_details'];
								$grid_short->bonuses_price_details = $pseudo_post['bonuses_price_details'];
								$grid_short->invoice_total = $tokenfilter['invoice']['invoiceamount'];
								$grid_short->max_entries = $rows;
							
								$html_items = $grid->renderGrid();
								$html_items_short = $grid_short->renderGrid();
							}
							else
							{
								$html_items = "";
								$html_items_short = "";
							}
								
							$tokenfilter['invoice']['invoice_items_html'] = $html_items;
							$tokenfilter['invoice']['invoice_items_html_short'] = $html_items_short;
							//print_r($tokenfilter); exit;
							
							$docx_helper = $this->getHelper('CreateDocxFromTemplate');
							$docx_helper->setTokenController('invoice');
							
							//create public/joined_files/ dir
							while(!is_dir(PDFJOIN_PATH))
							{
								mkdir(PDFJOIN_PATH);
								if($i >= 50)
								{
									exit; //failsafe
								}
								$i++;
							}
							
							//create public/joined_files/$clientid dir
							$pdf_path = PDFJOIN_PATH . '/' . $clientid;
							
							while(!is_dir($pdf_path))
							{
								mkdir($pdf_path);
								if($i >= 50)
								{
									exit; //failsafe
								}
								$i++;
							}
							
							$tmpstmp = isset($this->view->folder_stamp) ? $this->view->folder_stamp : time();
							
							while(!is_dir($pdf_path . '/' . $tmpstmp))
							{
								mkdir($pdf_path . '/' . $tmpstmp);
								if($i >= 50)
								{
									exit; //failsafe
								}
								$i++;
							}
							
							$template = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
							
							$destination_path = $pdf_path . '/' . $tmpstmp . '/';
							
							$docx_helper->setOutputFile($destination_path.$Batch_name);
							
							
							//do not add extension !
							$docx_helper->setBrowserFilename($Batch_name);
							
							$docx_helper->create_pdf ($template, $tokenfilter) ;
							
							$temp_files[] = $destination_path.$Batch_name.'.pdf';
						
							//generate socialcoderecor page
							$temp_files[] = $this->generate_joined_files_pdf('4', $pseudo_post, 'SocialcodePdfs', 'socialcodepdf.html');
							
							$source = 'Bw_sgbv_invoice';
							$patient_data = array();
							ob_end_clean();
							$this->join_pdfs_new($temp_files, $patient_data ,$source);
						}
						else 
						{
					   		$this->generate_pdf($pseudo_post, "SocialcodePdfs", $template_files, $orientation, $background_pages);
						}
						//--
					}
					
				}
			}
		}

		public function shortperformancerecordAction()
		{
			set_time_limit(0);
			setlocale(LC_ALL, 'de_DE.UTF8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$tm = new TabMenus();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$bw_invoices = new BwInvoices();

			//Check patient permissions on controller and action
			$patient_privileges = PatientPermissions::checkPermissionOnRun();
			if(!$patient_privileges)
			{
				$this->_redirect(APP_BASE . 'error/previlege');
			}
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);

			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$client = new Client();
			$client_details = $client->getClientDataByid($clientid);
			$this->view->client_details = $client_details[0];

			if(strlen($_REQUEST['iid']) > 0)
			{
				//get invoice address/footer
				$bwinvoices = new BwInvoices();
				$bwinvoice_details = $bwinvoices->getBwInvoice($_REQUEST['iid']);
				$ipid = $bwinvoice_details['ipid'];
				$decid = Pms_CommonData::getIdfromIpid($ipid);
				$invoicenumber = $bwinvoice_details['invoice_number'];
				$pseudo_post['address'] = $bwinvoice_details['address'];
				$pseudo_post['sapv_footer'] = $bwinvoice_details['footer'];
				$pseudo_post['unique_id'] = $bwinvoice_details['id'];
				$pseudo_post['prefix'] = $bwinvoice_details['prefix'];


				$pseudo_post['first_sapv_day'] = date('d.m.Y', strtotime($bwinvoice_details['start_sapv']));
				$pseudo_post['last_sapv_day'] = date('d.m.Y', strtotime($bwinvoice_details['end_sapv']));

				$pseudo_post['first_active_day'] = date('d.m.Y', strtotime($bwinvoice_details['start_active']));
				$pseudo_post['last_active_day'] = date('d.m.Y', strtotime($bwinvoice_details['end_active']));

				$list = date('Y-m', strtotime($bwinvoice_details['invoice_start']));

				if(strlen($_REQUEST['completed_date']) > '0')
				{
					$pseudo_post['completed_date'] = date('d.m.Y', $_REQUEST['completed_date']);
				}
				else
				{
					if($bwinvoice_details['completed_date'] != '0000-00-00 00:00:00')
					{
						$pseudo_post['completed_date'] = date('d.m.Y', strtotime($bwinvoice_details['completed_date']));
					}
					else
					{
						$pseudo_post['completed_date'] = date('d.m.Y', strtotime($bwinvoice_details['create_date']));
					}
				}
			}
			else
			{
				$pseudo_post['sapv_footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				$pseudo_post['completed_date'] = date('d.m.Y', time());
			}

			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;

			$pseudo_post['patid'] = $decid;
			$pseudo_post['ipid'] = $ipid;
			$pseudo_post['clientid'] = $clientid;


			$pm = $patientmaster->getMasterData($decid, 0);
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->patientdetails = $pm;
			$pseudo_post['patientdetails'] = $pm;

			if(strlen($_REQUEST['iid']) == 0)
			{
				$this->view->tabmenus = $tm->getMenuTabs();
			}


			$divisions = $hi_perms->getClientHealthInsurancePermissions($logininfo->clientid);
			$hi_perms_divisions = $divisions;

			//health insurance
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];


			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(empty($healthinsu_array[0]['name']))
				{
					$healthinsu_array[0]['name'] = $healtharray['name'];
				}
				if(empty($healthinsu_array[0]['ins_street']))
				{
					$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
				}
				if(empty($healthinsu_array[0]['ins_city']))
				{
					$healthinsu_array[0]['ins_city'] = $healtharray['city'];
				}
				if(empty($healthinsu_array[0]['ins_zip']))
				{
					$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
				}

				if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
				{
					$this->view->health_insurance_ik = $healtharray['iknumber'];
				}

				if(strlen($healthinsu_array[0]['kvk_no']) == 0)
				{
					$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
				}
			}

			if($hi_perms_divisions)
			{
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
			}

			if($healthinsu_array[0]['privatepatient'] == "1" && strlen($_REQUEST['iid']) == '0')
			{
				//			get patient name and adress
				$patient_address = '&nbsp;' . htmlspecialchars($pm['first_name']) . ' ' . htmlspecialchars($pm['last_name']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['street1']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($pm['zip']) . ' ' . '&nbsp;' . htmlspecialchars($pm['city']);
			}

			if(!empty($healthinsu_subdiv_arr['3']['name']))
			{
				//get new SAPV hi address
				$hi_address = '&nbsp;' . $healthinsu_subdiv_arr[3]['name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['street1'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$this->view->health_insurance_ik = $healthinsu_subdiv_arr[3]['iknumber'];
				$this->view->health_insurance_kassenr = $healthinsu_subdiv_arr[3]['kvnumber'];
			}
			else
			{
				//get old hi_address
				$hi_address = '&nbsp;' . $healthinsu_array[0]['name'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_insurance_provider'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_street'] . '<br />';
				$hi_address .= '&nbsp;' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];

				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
			}

			$pathealthinsurancenr = "";
			if(count($healthinsu_array[0]))
			{
				$phi_details = $healthinsu_array[0]['name'];
			}
			else
			{
				$phi_details = "--";
			}
			$phi_details_sub = $hi_address;


			$this->view->health_insurance = $phi_details;
			$this->view->hi_subdiv_address = $phi_details_sub;
			$pseudo_post['health_insurance'] = $phi_details;
			$pseudo_post['hi_subdiv_address'] = $phi_details_sub;


			//get admission-readmission cycles to extract months where there is at least 1 day active START
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$months = array();
			$active_days = array();

			//			if(strlen($cycles[$ipid]['admission_date']) != '0' && strlen($cycles[$ipid]['discharge_date']) != '0')
			//			{
			////				get all days of patient including discharge
			//				$patient_all_days = $patientmaster->getDaysInBetween(date('Y-m-d', strtotime($cycles[$ipid]['admission_date'])), date('Y-m-d', strtotime($cycles[$ipid]['discharge_date'])));
			//			}

			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));


					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{

					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}


				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
			}

			if($_REQUEST['dbgx'])
			{
				print_r($active_days);
				print_r($cycle_start_period);
				print_r($cycles);
				print_r($period_months);
				print_r($months);
				exit;
			}

			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
				$month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
			}

			//get number of days in each month + start/end day START
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_performance';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];

			$days_in_period = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			//overall period
			$overall_period['start'] = $months_details[$months[0]]['start'];
			$overall_period['end'] = $current_period['end'];

			if($months_details[$months[0]]['start'] != $current_period['start'])
			{
				$overall_performance_period['start'] = $months_details[$months[0]]['start'];
				$overall_performance_period['end'] = date('Y-m-d', strtotime('-1 day', strtotime($current_period['start'])));
			}
			else
			{
				$overall_performance_period['start'] = "1970-01-01";
				$overall_performance_period['end'] = "1970-01-01";
			}

			//get days in period
			$days_in_period_overall = $patientmaster->getDaysInBetween($overall_period['start'], $overall_period['end']);
			$days_in_period_overall_performance = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['end']);

			foreach($active_days as $k_active_day => $v_active_day)
			{
				if(in_array($v_active_day, $days_in_period))
				{
					$active_days_in_period[] = $v_active_day;
				}
			}

			//get hospital/hospiz in current period
			//			$hospital_days = $this->get_period_hospitals($ipid, $clientid, $current_period, $active_days_in_period);
			//			if($_REQUEST['show'])
			//			{
			//				print_r("\nhospital_days\n");
			//				print_r($hospital_days);
			//			}
			//get hospital overall
			//			foreach($months_details as $k_mnth => $v_mnth)
			//			{
			//				$hospital_overall[$k_mnth] = $this->get_period_hospitals($ipid, $clientid, $v_mnth);
			//			}
			//
				//			foreach($hospital_overall as $k_hosp => $v_hosp)
			//			{
			//				if(empty($hospital_overall_days))
			//				{
			//					$hospital_overall_days = array();
			//				}
			//				$hospital_overall_days = array_merge_recursive($v_hosp, $hospital_overall_days);
			//			}
			//Client Hospital Settings START
			//curent period
			$conditions['periods'][0]['start'] = $current_period['start'];
			$conditions['periods'][0]['end'] = $current_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			$conditions_overall['periods'][0]['start'] = $overall_period['start'];
			$conditions_overall['periods'][0]['end'] = $overall_period['end'];
			$conditions_overall['client'] = $clientid;
			$conditions_overall['ipids'] = array($ipid);
			$patient_days_overall = Pms_CommonData::patients_days($conditions_overall);

			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
			$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];
			$active_days_in_period_cs = $patient_days[$ipid]['real_active_days'];


			$hospital_overall_days_cs = $patient_days_overall[$ipid]['hospital']['real_days_cs'];
			$hospiz_overall_days_cs = $patient_days_overall[$ipid]['hospiz']['real_days_cs'];
			$patient_all_days_overall_cs = $patient_days_overall[$ipid]['active_days'];

			if(empty($hospital_overall_days_cs))
			{
				$hospital_overall_days_cs = array();
			}

			if(empty($hospiz_overall_days_cs))
			{
				$hospiz_overall_days_cs = array();
			}

			$hospital_hospiz_overall_days_cs = array_merge($hospital_overall_days_cs, $hospiz_overall_days_cs);

			foreach($hospital_hospiz_overall_days_cs as $k_hh => $v_hh)
			{
				$hospital_hospiz_overall_days_cs[$k_hh] = date('Y-m-d', strtotime($v_hh));
			}

			foreach($patient_all_days_overall_cs as $k_pad => $v_pad)
			{
				$patient_all_days_overall_cs[$k_pad] = date('Y-m-d', strtotime($v_pad));
			}

			foreach($active_days_in_period_cs as $k_active => $v_active)
			{
				$active_days_in_period_cs[$k_active] = date('Y-m-d', strtotime($v_active));
			}


			if($_REQUEST['csdbg'])
			{
				print_r("Old hospital_days\n");
				print_r($hospital_days);

				print_r("CS hospital_days\n");
				print_r($hospital_days_cs);

				print_r("Old Overall hospital_days\n");
				print_r($hospital_overall_days);

				print_r("CS Overall hospital_days\n");
				print_r($hospital_overall_days_cs);

				print_r("Old active_days_in_period\n");
				print_r($active_days_in_period);

				print_r("CS active_days_in_period\n");
				print_r($active_days_in_period_cs);

				print_r("CS hospital_hospiz_overall_days_cs\n");
				print_r($hospital_hospiz_overall_days_cs);



				exit;
			}
			//Client Hospital Settings END
			//get sapv in current period
			//			$sapv_days = $this->get_period_sapv($ipid, $current_period, $hospital_days);
			//			$sapv_days_overall = $this->get_period_sapv($ipid, $overall_period, $hospital_overall_days);

			$sapv_days_cs = $this->get_period_sapv($ipid, $current_period, $hospital_hospiz_overall_days_cs);
			$sapv_days_overall_cs = $this->get_period_sapv($ipid, $overall_period, $hospital_hospiz_overall_days_cs);

			//			print_r($current_period);
			//			print_r($overall_period);
			//			print_r($sapv_days);
			//			print_r($sapv_days_cs);
			//			print_r($hospital_hospiz_overall_days_cs);
			//			exit;

			foreach($sapv_days_cs as $k_s_days => $v_s_days)
			{
				if($k_s_days != 'relevant_sapvs_days')
				{
					$sapv_days_inperiod_cs[] = $k_s_days;
				}
				else
				{
					$relevant_sapvs_days_cs = $v_s_days;
				}
			}
			asort($sapv_days_inperiod_cs);


			if(empty($pseudo_post['first_sapv_day']))
			{
				if(count($relevant_sapvs_days_cs['start']) > 0)
				{
					$this->view->first_sapv_day = date('d.m.Y', strtotime($relevant_sapvs_days_cs['start'][0]));
					$end_sapv_last = end($relevant_sapvs_days_cs['end']);
					$this->view->last_sapv_day = date('d.m.Y', strtotime($end_sapv_last));
				}
				else
				{
					$this->view->first_sapv_day = '0000-00-00 00:00:00';
					$this->view->last_sapv_day = '0000-00-00 00:00:00';
				}
			}

			//get pflegestuffe in current period
			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $current_period['start'], $current_period['end']);
			if($pflege_arr)
			{
				$last_pflege = end($pflege_arr);
				$this->view->patient_pflegestufe = $last_pflege['stage'];
			}
			else
			{
				$this->view->patient_pflegestufe = ' - ';
			}

			//get sapv(s) in current period
			$period_sapv = $sapvs->getSapvInPeriod($ipid, $current_period['start'], $current_period['end']);


			if($period_sapv[0]['status'] == "2" && $period_sapv[0]['approved_date'] != '0000-00-00 00:00:00' && strlen($period_sapv[0]['approved_date']) > 0 && date('Y-m-d', strtotime($period_sapv[0]['approved_date'])) != '1970-01-01')
			{
				$this->view->sapv_approve_date = date('d.m.Y', strtotime($period_sapv[0]['approved_date']));
			}
			else
			{
				$this->view->sapv_approve_date = ' - ';
			}

			if($period_sapv[0]['status'] == "2" && strlen($period_sapv[0]['approved_number']) > 0)
			{
				$this->view->sapv_approve_nr = $period_sapv[0]['approved_number'];
			}
			else
			{
				$this->view->sapv_approve_nr = ' - ';
			}


			$this->view->start_relevant_sapv = $period_sapv[0]['verordnungam'];
			$last_relevant_sapv = end($period_sapv);
			$this->view->end_relevant_sapv = $last_relevant_sapv['verordnungbis'];

			//get all sets form types
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
				$set_one_ids[] = $v_set_one['id'];
			}

			$set_two = $form_types->get_form_types($clientid, '2');
			foreach($set_two as $k_set_two => $v_set_two)
			{
				$set_two_ids[] = $v_set_two['id'];
			}

			$set_three = $form_types->get_form_types($clientid, '3');
			foreach($set_three as $k_set_three => $v_set_three)
			{
				$set_three_ids[] = $v_set_three['id'];
			}


			$set_fourth = $form_types->get_form_types($clientid, '4');
			foreach($set_fourth as $k_set_fourth => $v_set_fourth)
			{
				$set_fourth_ids[] = $v_set_fourth['id'];
			}

			$set_ids['one'] = $set_one_ids;
			$set_ids['two'] = $set_two_ids;
			$set_ids['three'] = $set_three_ids;
			$set_ids['fourth'] = $set_fourth_ids;

			//get contact forms in current period
			$contact_forms_days = $this->get_period_contact_forms($ipid, $current_period);
			$contact_forms_ids[] = '999999999';

			$exclude_after_discharge = array();
			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf))
					{
						if(strtotime($v_cf['start_date']) > strtotime($cycles[$ipid]['discharge_date']) && $pm['isdischarged'] == '1')
						{
							//excluded cf after last discharge
							$exclude_after_discharge[] = $v_cf['id'];
						}
						$contact_forms_ids[] = $v_cf['id'];
					}
				}
			}
			ksort($contact_forms_days);
			$block_classification = new FormBlockClassification();
			$classification_data = $block_classification->get_multiple_block_classification($ipid, $contact_forms_ids);


			foreach($contact_forms_days as $k_cf_day => $v_cf_data)
			{
				foreach($v_cf_data as $k_cf => $v_cf)
				{
					if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data) && in_array($k_cf_day, $active_days_in_period_cs))
					{
						if((in_array($v_cf['form_type'], $set_ids['fourth']) && $classification_data[$v_cf['id']]['intern'] == '0') || !in_array($v_cf['form_type'], $set_ids['fourth']))
						{
							$contact_forms_days_ids[$k_cf_day][] = $v_cf['id'];
							$contact_forms2form_types[$v_cf['id']][] = $v_cf['form_type'];
						}
					}
				}
			}
			if($_REQUEST['dbggq'])
			{
				print_r($pm);
				print_r("\nset_ids\n");
				print_r($set_ids);
				print_r("contact_forms_days \n");
				print_r($contact_forms_days);

				print_r("classification_data \n");
				print_r($classification_data);
				exit;
			}

			foreach($contact_forms_ids as $k_contactform_data => $v_contactform_data)
			{
				if(!array_key_exists($v_contactform_data, $classification_data))
				{
					unset($contact_forms_ids[array_search($v_contactform_data, $contact_forms_ids)]);
				}
			}
			$contact_forms_ids = array_values(array_unique($contact_forms_ids));

			//get patient course in current period
			$course_days = $this->get_period_course($ipid, $cycles[$ipid]['discharge_date']);
			if($_REQUEST['qz'])
			{
				print_r($course_days);
			}


			foreach($course_days as $k_course_date => $v_course_details)
			{
				$k_course_date_alt = date('d.m.Y', strtotime($k_course_date));
				if(in_array($k_course_date, $active_days_in_period_cs) && !in_array($k_course_date_alt, $hospital_days_cs) && !in_array($k_course_date_alt, $hospiz_days_cs))
				{
					foreach($v_course_details as $k_couse => $v_course)
					{
						if($v_course == 'U' && in_array($k_course_date, $sapv_days_inperiod_cs) && in_array('1', $sapv_days_cs[$k_course_date]))
						{
							$clasifizierung[$k_course_date]['beratung'] += 1;
						}
						else if($v_course == 'V' && in_array($k_course_date, $sapv_days_inperiod_cs) && in_array('2', $sapv_days_cs[$k_course_date]))
						{
							$clasifizierung[$k_course_date]['koordination'] += 1;
						}
					}
				}
			}
			if($_REQUEST['qz'])
			{
				print_r($clasifizierung);
			}

			//get real active patient days (active, with sapv and no hospital/hospiz)
			//			$real_active_days_cs = $this->real_active_days($active_days_in_period, $hospital_hospiz_overall_days_cs, $sapv_days_cs);

			$real_active_days_overall_cs = $this->real_active_days($active_days, $hospital_hospiz_overall_days_cs, $sapv_days_overall_cs);
			$days_nosapv_overall_cs = $this->nosapv_days($patient_all_days_overall_cs, $hospital_hospiz_overall_days_cs, $sapv_days_overall_cs);


			asort($active_days_in_period);


			if(count($cycles[$ipid]['admissionDates']) > 0)
			{
				foreach($cycles[$ipid]['admissionDates'] as $k_adm => $v_adm)
				{
					$start_periods[$k_adm] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$k_adm]))
					{
						$end_periods[$k_adm] = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$k_adm]['date']));
					}
					else
					{
						$end_periods[$k_adm] = date('Y-m-d', time());
					}
				}
			}
			else
			{
				$start_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));
				$end_periods[0] = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
			}

			//get check for flatrate case and return "7 days flat rate" days
			$flatrate = $this->flatrate_days($ipid, $clientid, $start_periods, $end_periods, $current_period, $real_active_days_overall_cs, $cycles[$ipid], $days_nosapv_overall_cs, $hospital_hospiz_overall_days_cs);
			$flatrate_overall = $this->flatrate_days_old($ipid, $start_periods, $end_periods, $current_period, $days_in_period_overall);

			if($_REQUEST['dbg_flatrate'])
			{
				print_r("start_period\ns");
				print_r($start_periods);

				print_r("end_periods\n");
				print_r($end_periods);

				print_r("current_period\n");
				print_r($current_period);

				print_r("real_active_days_overall\n");
				print_r($real_active_days_overall);


				print_r("CS real_active_days\n");
				print_r($real_active_days_cs);

				print_r("CS real_active_days_overall\n");
				print_r($real_active_days_overall_cs);

				print_r("PAtient days overall");
				print_r($patient_days_overall[$ipid]['treatment_days']);

				print_r("cycles\n");
				print_r($cycles[$ipid]);

				print_r("sapv_days_overall\n");
				print_r($sapv_days_overall);

				print_r("sapv_days_overall_cs\n");
				print_r($sapv_days_overall_cs);

				print_r("days_nosapv_overall\n");
				print_r($days_nosapv_overall);

				print_r("CS days_nosapv_overall\n");
				print_r($days_nosapv_overall_cs);

				print_r("hospital_overall_days\n");
				print_r($hospital_overall_days);
				print_r("CS hospital hospiz overall\n");
				print_r($hospital_hospiz_overall_days_cs);

				print_r($patient_days);

				print_r("Flatrate \n");
				print_r($days_in_period_overall);

				print_r("Flatrate Overall");
				print_r($flatrate_overall);
				exit;
			}

			//get performance shortcuts
			$shortcuts = Pms_CommonData::get_prices_shortcuts();

			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			$this->view->shortcuts = $shortcuts['performance'];
			$this->view->price_list = $master_price_list;
			$pseudo_post['shortcuts'] = $shortcuts['performance'];
			$pseudo_post['price_list'] = $master_price_list;

			$overall_patient_shortcuts = $this->patient_performance_overall($ipid, $clientid, $overall_performance_period, $active_days, $set_ids, $flatrate_overall, $flatrate_admissions, $master_price_list, $days_in_period_overall_performance, $hospital_hospiz_days);

			$week_numbers_arr[] = '9999999999';

			if(count($overall_patient_shortcuts['last_koord_dates']) != 0)
			{
				$last_koord_dates = $overall_patient_shortcuts['last_koord_dates'];
			}
			else
			{
				$last_koord_dates[] = '1970-01-01';
			}

			foreach($days_in_period as $k_period_day => $v_period_day)
			{
				//$hospital_days_cs format is d.m.Y
				$v_period_day_alt = date('d.m.Y', strtotime($v_period_day));

				$day_shortcuts = array();

				if(count($month_shortcuts) == 0)
				{
					$month_shortcuts = array();
				}

				$master_data[$v_period_day] = array();

				if(count($overall_patient_shortcuts['last_koord_dates']) > '0')
				{
					$last_koord_date_overall = end($overall_patient_shortcuts['last_koord_dates']);
					$week_numbers_arr[$last_koord_date_overall] = date('W', strtotime($last_koord_date_overall));
				}

				//calculate set one form_type visits
				//first get flatrate exception and set shortcut
				$shortcut = '';
				$set_one_result = array_intersect($set_one_ids, $contact_forms_days[$v_period_day]['form_types']);

				if($_REQUEST['sapv_days'] == '1')
				{
					print_r("contact_forms_days\n");
					print_r($sapv_days);
					print_r("Overall shortcuts\n");
					print_r($overall_patient_shortcuts);

					exit;
				}

				if(in_array($v_period_day, $flatrate) && !in_array($v_period_day, $hospital_days))
				{
					$shortcut = '37b1';
					$month_shortcuts[] = $shortcut;
					$overall_patient_shortcuts['shortcuts'][] = $shortcut;
				}

				foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf_one)
				{
					if(!in_array($v_cf_one['id'], $exclude_after_discharge) && in_array($v_cf_one['form_type'], $set_one_ids))
					{
						if(!in_array($v_period_day, $flatrate) && array_key_exists($v_period_day, $contact_forms_days) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs) && count($set_one_result) != 0) //normal set conditions
						{
							//						we have visits=> check if there are required visits for this action set
							if(in_array('4', $sapv_days_cs[$v_period_day]) || in_array('3', $sapv_days_cs[$v_period_day]))
							{
								$shortcut = '37b2';
							}
						}
					}
				}

				if(!empty($shortcut))
				{
					if($shortcut == '37b1' && in_array($v_period_day, $flatrate['pay_days']))
					{
						$master_data[$v_period_day][$shortcut]['pay_days'] = '1';
					}
					$day_shortcuts[] = $shortcut;
					$master_data[$v_period_day][$shortcut]['shortcut'] = $shortcut;
					$master_data[$v_period_day][$shortcut]['qty'] = '1';
					$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
					$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
				}
				if($_REQUEST['qd'])
				{
					print_r($master_data);
					exit;
				}
				//sapv overwrite if formtype is set 4
				//calculate set two form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				$set_fourth_result = array_intersect($set_fourth_ids, $contact_forms_days[$v_period_day]['form_types']);

				if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					$set_two_result = array_intersect($set_two_ids, $contact_forms_days[$v_period_day]['form_types']);

					if((count($set_two_result) != 0 || in_array('U', $course_days[$v_period_day])) && in_array('1', $sapv_days_cs[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							if(is_numeric($k_cf) && !in_array($v_cf['id'], $exclude_after_discharge))
							{
								$shortcut = '';
								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']) && !in_array($v_cf['form_type'], $set_one_ids))
								{
									$shortcut = '37b5';
								}


								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_two_ids) ))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}

						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							if($v_day_course == 'U')
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$v_period_day]['37b6']['qty'] < '2')
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}
					}
				}


				//calculate set three form_type visits
				//exclude calculation if following shortcuts are calculated on current day
				if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					$last_koord_day = end($last_koord_dates);

					$set_three_result = array_intersect($set_three_ids, $contact_forms_days[$v_period_day]['form_types']);

					if((count($set_three_result) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days_cs[$v_period_day]))
					{

						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform) && !in_array($v_cform['id'], $exclude_after_discharge))
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']) && !in_array($v_cform['form_type'], $set_one_ids))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && in_array($v_cform['form_type'], $set_three_ids))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}

						foreach($course_days[$v_period_day] as $k_day_course => $v_day_course)
						{
							$last_koord_day = end($last_koord_dates);
							if($v_day_course == 'V')
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(($shortcut == '37b7' || $shortcut == '37b8'))
								{
									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr))
									{
										$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$week_numbers_arr[] = $week_number;
										$last_koord_dates[] = $v_period_day;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[] = $v_period_day;
									}
								}
							}
						}
					}
				}


				//calculate set 4 (ISPC-241)
				if((count($set_fourth_result) != 0 || count($set_one_result) != 0) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					//setup each form sapv based on classification block selection
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
						{
							if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
							else if(in_array('1', $sapv_days_cs[$v_period_day]))
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
						}
						else if($classification_data[$v_cf_day]['intern'] != '1')
						{
							if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								//switch between BE-KO if VV is not BE
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]))
								{
									$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
							}
						}
					}

					//U & V at the top
					//beratung
					if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array('1', $sapv_days_cs[$v_period_day]))
					{
						foreach($contact_forms_days[$v_period_day] as $k_cf => $v_cf)
						{
							//check if there are 2 beratung change sapv in koord
							if($master_data[$v_period_day]['37b6']['qty'] == '2' && (count($set_fourth_result) != 0 || count($set_one_result) != 0) && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
							{
								$sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
							}

							if(is_numeric($k_cf) && $sapv_status[$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1' && !in_array($v_cf['id'], $exclude_after_discharge) && (in_array($v_cf['form_type'], $set_fourth_ids) && (($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')) || in_array($v_cf['form_type'], $set_one_ids)))
							{
								$shortcut = '';
								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b7', $month_shortcuts) && !in_array('37b5', $overall_patient_shortcuts['shortcuts']))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b5', $day_shortcuts) && $shortcut != '37b5') //only b5 or b6
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[] = '37b5';
										$overall_patient_shortcuts['shortcuts'][] = '37b5';
									}

									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_fourth_ids) || in_array($v_cf['form_type'], $set_one_ids)))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
									else if($shortcut == '37b5')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}
					}

					//koordination
					$last_koord_day = end($last_koord_dates);

					if(!in_array($v_period_day, $flatrate) && !in_array('37b2', $day_shortcuts) && in_array('2', $sapv_days_cs[$v_period_day]))
					{

						foreach($contact_forms_days[$v_period_day] as $k_cform => $v_cform)
						{
							if(is_numeric($k_cform) && $sapv_status[$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2' && !in_array($v_cform['id'], $exclude_after_discharge))
							{
								$shortcut = '';

								if(!in_array('37b1', $overall_patient_shortcuts['shortcuts']) && !in_array('37b5', $month_shortcuts) && !in_array('37b7', $overall_patient_shortcuts['shortcuts']))
								{
									if(in_array('4', $sapv_days_cs[$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}
									else
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts) && !in_array('37b7', $day_shortcuts) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[] = '37b7';
										$overall_patient_shortcuts['shortcuts'][] = '37b7';
									}
									$day_shortcuts[] = $shortcut;
								}

								if(!empty($shortcut))
								{
									$master_data[$v_period_day][$shortcut]['shortcut'][] = $shortcut;

									if($shortcut == '37b8' && !in_array($week_number, $week_numbers_arr) && (in_array($v_cform['form_type'], $set_fourth_ids) || in_array($v_cform['form_type'], $set_one_ids)))
									{
										$master_data[$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$week_numbers_arr[] = $week_number;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$v_period_day][$shortcut]['qty'] = '1';
										$master_data[$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									}

									$master_data[$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$last_koord_dates[] = $v_period_day;
								}
							}
						}
					}
				}

				//add exclusion
				if(in_array($v_period_day, $sapv_days_inperiod_cs) && in_array($v_period_day, $active_days_in_period_cs) && !in_array($v_period_day_alt, $hospital_days_cs) && !in_array($v_period_day_alt, $hospiz_days_cs))
				{
					foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
					{
						//check if contactform type for each days
						if(in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids) && (in_array('4', $sapv_days_cs[$v_period_day]) || in_array('3', $sapv_days_cs[$v_period_day]) ))
						{
							$clasifizierung[$v_period_day]['home_visit'] += 1;
						}
						else
						{
							//$clasifizierung[$v_period_day]['home_visit'] += 0;
							//sum classifizierung data if form is not housebesuche type(1)
							if($clasifizierung[$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days_cs[$v_period_day]) &&
								(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
							}
							else if($clasifizierung[$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$v_period_day]) || in_array('2', $sapv_days_cs[$v_period_day])))
							{
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]) && !in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
								}
								else
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
								}
							}
							else if($clasifizierung[$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$v_period_day]) || in_array('2', $sapv_days_cs[$v_period_day])))
							{
								if(!in_array('1', $sapv_days_cs[$v_period_day]) && in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
								}
								else if(in_array('1', $sapv_days_cs[$v_period_day]) && !in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
								}
								else
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
								}
							}
							else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days_cs[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['beratung'] += '1';
							}
							else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days_cs[$v_period_day]))
							{
								$clasifizierung[$v_period_day]['koordination'] += '1';
							}
							else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0') && in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids))
							{
								if(in_array('1', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['beratung'] += '1';
								}
								else if(in_array('2', $sapv_days_cs[$v_period_day]))
								{
									$clasifizierung[$v_period_day]['koordination'] += '1';
								}
							}

							$count_be[$v_period_day] += 1;
						}
					}
				}
			}
			ksort($clasifizierung);
			if($_REQUEST['qz'])
			{
				print_r("2: \n");
				print_r($clasifizierung);
				exit;
			}



			if(strlen($pseudo_post['first_active_day']) == 0)
			{

				if(count($clasifizierung) > 0)
				{
					$activity_days_array = array_keys($clasifizierung);
					$end_activity_date = end($activity_days_array);

					$first_active_day = date('d.m.Y', strtotime($activity_days_array[0]));
					$last_active_day = date('d.m.Y', strtotime($end_activity_date));
				}
				else
				{
					$first_active_day = '0000-00-00 00:00:00';
					$last_active_day = '0000-00-00 00:00:00';
				}
			}
			else
			{
				$first_active_day = $pseudo_post['first_active_day'];
				$last_active_day = $pseudo_post['last_active_day'];
			}

			$this->view->first_active_day = $first_active_day;
			$this->view->last_active_day = $last_active_day;
			$pseudo_post['first_active_day'] = $first_active_day;
			$pseudo_post['last_active_day'] = $last_active_day;

			if($_REQUEST['dbg'])
			{
				print_r("X\n");
				print_r($classification_data);
				print_r("Y\n");
				print_r($contact_forms_days);
				print_r("Z\n");
				print_r($contact_forms2form_types);
				//				exit;
			}

			$this->view->classification_box = $clasifizierung;
			$pseudo_post['classification_box'] = $clasifizierung;

			if($_REQUEST['dbg'])
			{
				print_r("(Hospital \n");
				print_r($hospital_days);
				print_r("(Active days in period \n");
				print_r($active_days_in_period);
				print_r($sapv_status);
				print_r($master_data);
				exit;
			}





			if($_REQUEST['dbgq'] == 3)
			{
				//			print_r("\n Cycles Days \n");
				//			print_r($cycles);
				//			print_r("\n Active Days \n");
				//			print_r($active_days_in_period);
				//			print_r("\n Current Days \n");
				//			print_r($current_period);
				//			print_r("\n SAPV Days\n");
				//			print_r($sapv_days);
				//			print_r("\n Hospital Days\n");
				//			print_r($hospital_days);
				//			print_r("\n Contact Forms Days\n");
				//			print_r($contact_forms_days);
				//			print_r("\n Course Days \n");
				//			print_r($course_days);
				//			print_r($week_numbers_arr);
				//			print_r("\n Real Active Days \n");
				//			print_r($real_active_days);
				//			print_r("\n Flatrate\n");
				//			print_r($flatrate);
				//			print_r("\n Flatrate period days \n");
				//			print_r($flatrate_admissions);
				//		print_r("\n Master Price List\n");
				//		print_r($master_price_list);
				print_r("\n Master Data\n");
				print_r($master_data);
			}

			$this->view->period_days = $days_in_period;
			$this->view->totals = $totals;
			$this->view->master_data = $master_data;

			$pseudo_post['clientid'] = $clientid;
			$pseudo_post['period_days'] = $days_in_period;

			$pseudo_post['totals'] = $totals;
			$pseudo_post['master_data'] = $master_data;

			$pseudo_post['health_insurance_ik'] = $this->view->health_insurance_ik;
			$pseudo_post['insurance_no'] = $this->view->insurance_no;
			$pseudo_post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;

			$pseudo_post['address'] = $pseudo_post['hi_subdiv_address'];
			$pseudo_post['patient_address'] = $patient_address;
			$pseudo_post['sapv_approve_date'] = $this->view->sapv_approve_date;
			$pseudo_post['sapv_approve_nr'] = $this->view->sapv_approve_nr;

			$pseudo_post['patient_pflegestufe'] = $this->view->patient_pflegestufe;

			if(empty($pseudo_post['first_sapv_day']))
			{
				$pseudo_post['first_sapv_day'] = $this->view->first_sapv_day;
				$pseudo_post['last_sapv_day'] = $this->view->last_sapv_day;
			}

			if($this->getRequest()->isPost())
			{
				//normal anlage like pdf
				$pseudo_post['client_details'] = $client_details[0];
				$pseudo_post['client_city'] = $client_details[0]['city'];
				$pseudo_post['client_ik'] = $client_details[0]['institutskennzeichen'];

				$pseudo_post['bottom_part'] = true;
				$this->generate_pdf($pseudo_post, "PerformancePdf", "shortperformancerecordpdf.html");
			}
		}

		public function clientperformancerecordAction()
		{
			set_time_limit(0);
			setlocale(LC_ALL, 'de_DE.UTF8');

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$tm = new TabMenus();
			$client = new Client();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$bw_invoices = new BwInvoices();

			
			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}

			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			$client_details = $client->getClientDataByid($clientid);

			$this->view->clientid = $clientid;
			$client_patients = $this->getAllClientPatients($clientid, '');
			$this->view->client_details = $client_details[0];

			foreach($client_patients as $k_cl_pat => $v_cl_pat)
			{
				$ipids[] = $v_cl_pat['ipid'];
				$epids[$v_cl_pat['ipid']] = $v_cl_pat['EpidIpidMapping']['epid'];
			}
			$ipids = array_values(array_unique($ipids));
//pms8856 - local
// 			$ipids = array('dc5ee9b06ee02b73ce2d7ac41547ce0294f67576');
//			$ipids = array('1fb6337d022c109574498d7f5f535d3f08ee5c17');
//bws10020 - local
//			$ipids = array('c593978fc7138194338cbd4a141026244eb83708');
			//health insurance divisions
			$hi_perms_divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);

			//patients health insurance
			$healthinsu_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids);

			//Pateint days START
			//curent period
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $ipids;
			$patient_days = Pms_CommonData::patients_days($conditions);
			//Pateint days END

			$all_patients_periods = array();
			foreach($patient_days as $k_ipid => $patient_data)
			{
				//used to create months selector
				$all_patients_periods = array_merge_recursive($all_patients_periods, $patient_data['active_periods']);

				//used in flatrate
				if(empty($patient_periods[$k_ipid]))
				{
					$patient_periods[$k_ipid] = array();
				}

				array_walk_recursive($patient_data['active_periods'], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$patient_periods[$k_ipid] = array_merge($patient_periods[$k_ipid], $patient_data['active_periods']);

				//hospital days cs
				if(!empty($patient_data['hospital']['real_days_cs']))
				{
					$hospital_days_cs[$k_ipid] = $patient_data['hospital']['real_days_cs'];
					array_walk($hospital_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//hospiz days cs
				if(!empty($patient_data['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
					array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//real active days
				if(!empty($patient_data['real_active_days']))
				{
					$active_days_in_period_cs[$k_ipid] = $patient_data['real_active_days'];
					array_walk($active_days_in_period_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//treatment days
				if(!empty($patient_data['treatment_days']))
				{
					$treatment_days_cs[$k_ipid] = $patient_data['treatment_days'];
					array_walk($treatment_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//active days
				if(!empty($patient_data['active_days']))
				{
					$active_days[$k_ipid] = $patient_data['active_days'];
					array_walk($active_days[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				if(empty($hospital_days_cs[$k_ipid]))
				{
					$hospital_days_cs[$k_ipid] = array();
				}

				if(empty($hospiz_days_cs[$k_ipid]))
				{
					$hospiz_days_cs[$k_ipid] = array();
				}

				$hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);
//				array_walk($active_days[$k_ipid], function(&$value) { $value = date("Y-m-d", strtotime($value)); });
			}

			$all_patients_periods = array_values($all_patients_periods);

			$months = array();
			foreach($all_patients_periods as $k_period => $v_period)
			{
				$period_months = $this->get_period_months($v_period['start'], $v_period['end'], "Y-m");
				$months = array_merge($months, $period_months);
			}
			$months = array_values(array_unique($months));

			foreach($months as $k_m => $v_m)
			{
				$months_unsorted[strtotime($v_m)] = $v_m;
			}
			ksort($months_unsorted);
			$months = array_values(array_unique($months_unsorted));


			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
				$month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
			}

			//get number of days in each month + start/end day START
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_performance';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$days_in_period = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			foreach($active_days as $k_ipid => $ipid_days)
			{
				$active_days_in_period[$k_ipid] = array_intersect($days_in_period, $ipid_days);
				if(empty($active_days_in_period[$k_ipid]))
				{
					unset($ipids[array_search($k_ipid, $ipids)]);
				}
			}

			//overall period
			$overall_period['start'] = $months_details[$months[0]]['start'];
			$overall_period['end'] = $current_period['end'];

			$days_in_period_overall = $patientmaster->getDaysInBetween($overall_period['start'], $overall_period['end']);

			if($months_details[$months[0]]['start'] != $current_period['start'])
			{
				//used in overall performance record data start till the end of previous month (curent month-01 -1 day)
				$overall_performance_period['start'] = $months_details[$months[0]]['start'];
				$overall_performance_period['c_month_end'] = date('Y-m-d', strtotime('-1 day', strtotime($current_period['start'])));
				$overall_performance_period['end'] = date('Y-m-d', strtotime('-1 day', strtotime('+1 month', strtotime($current_period['start']))));
			}
			else
			{
				//no overall period (no previous months)
				$overall_performance_period['start'] = "1970-01-01";
				$overall_performance_period['end'] = "1970-01-01";
			}


			$days_in_period_overall_performance = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['end']);
			$days_in_period_overall_performance_cmonth = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['c_month_end']);
			//sapv in curent period
			//(ipid-day-verordnet_statuses)
			$sapv_days_cs = $this->get_period_sapvs($ipids, $current_period, $hospital_hospiz_days_cs);

			//sapv till last day of prev month
			$sapv_days_overall = $this->get_period_sapvs($ipids, $overall_performance_period, $hospital_hospiz_days_cs);


			foreach($sapv_days_cs as $k_s_ipid => $v_s_data)
			{
				$sapv_days_inperiod_cs[$k_s_ipid] = array_keys($v_s_data);
				asort($sapv_days_inperiod_cs[$k_s_ipid]);
			}

			//get pflegestuffe in current period
			$pflege_arr = $pflege->get_multiple_patatients_mt_period($ipids, $current_period['start'], $current_period['end']);

			foreach($pflege_arr as $k_pflege => $v_pflege)
			{
				$patients_pflege[$v_pflege['ipid']] = $v_pflege['stage'];
			}

			//get all sets form types
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
				$set_one_ids[] = $v_set_one['id'];
			}

			$set_two = $form_types->get_form_types($clientid, '2');
			foreach($set_two as $k_set_two => $v_set_two)
			{
				$set_two_ids[] = $v_set_two['id'];
			}

			$set_three = $form_types->get_form_types($clientid, '3');
			foreach($set_three as $k_set_three => $v_set_three)
			{
				$set_three_ids[] = $v_set_three['id'];
			}


			$set_fourth = $form_types->get_form_types($clientid, '4');
			foreach($set_fourth as $k_set_fourth => $v_set_fourth)
			{
				$set_fourth_ids[] = $v_set_fourth['id'];
			}

			$set_ids['one'] = $set_one_ids;
			$set_ids['two'] = $set_two_ids;
			$set_ids['three'] = $set_three_ids;
			$set_ids['fourth'] = $set_fourth_ids;

			//get contact forms in current period and in overall period
			$contact_forms_days = $this->get_patients_period_cf($ipids, $current_period);
			$contact_forms_overall_days = $this->get_patients_period_cf($ipids, $overall_performance_period);

			
			//get patients discharge dates
			$pat_dis = new PatientDischarge();
			$patients_discharge = $pat_dis->get_patients_discharge($ipids);
			
			foreach($patients_discharge as $k_dis => $v_dis)
			{
				$patients_discharge_date[$v_dis['ipid']] = $v_dis['discharge_date'];
			}
			
			
			$contact_forms_ids[] = '999999999';

			$exclude_after_discharge = array();
			foreach($ipids as $k_ipid => $v_ipid)
			{
				//last discharge date
//				$patients_discharge_date[$v_ipid] = end($patient_days[$v_ipid]['discharge']);

				foreach($contact_forms_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							if(strtotime(date('Y-m-d H:i:s', strtotime($v_cf['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge[] = $v_cf['id'];
							}
							$contact_forms_ids[] = $v_cf['id'];
							$all_contact_forms[$v_cf['id']] = $v_cf;
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);


				foreach($contact_forms_overall_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cfo => $v_cfo)
					{
						if(is_numeric($k_cfo))
						{
							if(strtotime(date('Y-m-d H:i:s', strtotime($v_cfo['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge_overall[] = $v_cfo['id'];
							}
							$contact_forms_ids_overall[] = $v_cfo['id'];
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);
			}

			$block_classification = new FormBlockClassification();
			$classification_data = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids);
			$classification_data_overall = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids_overall);


			foreach($all_contact_forms as $k_cf => $v_cf)
			{
				$k_cf_day = date('Y-m-d', strtotime($v_cf['start_date']));

				if(array_key_exists($v_cf['id'], $classification_data) && in_array($k_cf_day, $active_days_in_period_cs[$v_cf['ipid']]))
				{
					if((in_array($v_cf['form_type'], $set_ids['fourth']) && $classification_data[$v_cf['id']]['intern'] == '0') || !in_array($v_cf['form_type'], $set_ids['fourth']))
					{
						$contact_forms_days_ids[$k_cf_day][] = $v_cf['id'];
						$contact_forms2form_types[$v_cf['id']][] = $v_cf['form_type'];
					}
				}

				if(!array_key_exists($v_cf['id'], $classification_data))
				{
					unset($contact_forms_ids[array_search($v_cf['id'], $contact_forms_ids)]);
				}
			}

			$contact_forms_ids = array_values(array_unique($contact_forms_ids));


			//get patients courses
			$course_days = $this->get_patients_period_course($ipids, $patients_discharge_date, $current_period);

			//get real active patient days (active, with sapv and no hospital/hospiz)
//			print_r($hospital_hospiz_days_cs['0bbb28fdffcf6bf09a7d5ba9d6090c2d684005cc']);

			$real_active_days_cs = $this->patients_real_active_days($ipids, $active_days, $hospital_hospiz_days_cs, $sapv_days_cs);

			//get no sapv days
			$days_nosapv_cs = $this->nosapv_days($active_days, $hospital_hospiz_days_cs, $sapv_days_cs);


			//unset ipids which have no contact form or course in selected period
			foreach($ipids as $kipid => $v_ipid)
			{

				if(count($course_days[$v_ipid]) == "0" && count($contact_forms_days[$v_ipid]) == "0" && count($sapv_days_cs[$v_ipid]) == "0")
				{
					unset($ipids[$kipid]);
				}
			}
			$ipids[] = '999999999'; //dumy control for no ipids
			$ipids = array_values(array_unique($ipids));


			//get patient fall periods to be used in flatrate
			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($patient_days[$v_ipid]['active_periods'] as $k_period => $v_period)
				{
					$start_periods[$v_ipid][] = date('Y-m-d', strtotime($v_period['start']));
					$end_periods[$v_ipid][] = date('Y-m-d', strtotime($v_period['end']));
				}
			}

			//get check for flatrate case and return "7 days flat rate" days
			$flatrate = $this->multi_patients_flatrate_days($ipids, $clientid, $start_periods, $end_periods, $current_period, $active_days, $patient_periods, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_days);

			//get performance shortcuts
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$this->view->shortcuts = $shortcuts['performance'];

			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);
			$this->view->price_list = $master_price_list;

// 			$overall_patient_shortcuts = $this->patients_performance_overall($ipids, $clientid, $overall_performance_period, $active_days, $set_ids, $flatrate, $master_price_list, $days_in_period_overall_performance, $hospital_hospiz_days_cs, $sapv_days_overall, $course_days, $contact_forms_overall_days, $classification_data_overall);
			$overall_patient_shortcuts = $this->patients_performance_overall_saved($ipids, $clientid, $overall_performance_period, $active_days, $set_ids, $flatrate, $master_price_list, $days_in_period_overall_performance, $hospital_hospiz_days_cs, $sapv_days_overall, $course_days, $contact_forms_overall_days, $classification_data_overall);
			$flatrate_continued = $this->multi_patients_flatrate_days_continued($ipids, $clientid, $start_periods, $end_periods, $current_period, $active_days, $patient_periods, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_days, $overall_patient_shortcuts);
			
			
			
			if($_REQUEST['asd'] == "1")
			{
	//			print_r("overall_patient_shortcuts\n");
	//			print_r($overall_patient_shortcuts['bb779fbed4c544092cae78c801dfe7aeb5885ad5']);
				print_r("days_in_period_overall_performance_cmonth\n");
				print_r($days_in_period_overall_performance_cmonth);
				print_r("flatrate\n");
				print_r($flatrate);
				print_r("flatrate_continued\n");
				print_r($flatrate_continued);
				exit;
			}


			//get saved data ISPC-1927
			$bw_pr = new BwPerformanceRecord();
			$bw_data = $bw_pr->get_multiple_bw_performance_record_in_period($ipids, $active_days, $master_price_list,array());
				
			
			
			$week_numbers_arr[] = '9999999999';
			foreach($ipids as $k_ipid => $ipid)
			{
				
//				$overall_shorts[$ipid]['shortcuts'] = array_merge($overall_shorts[$ipid]['shortcuts'], $v_short_overall);
				$overall_shorts[$ipid]['shortcuts'] = array();
				foreach($overall_patient_shortcuts[$ipid]['shortcuts_dates'] as $k_short_overall => $v_short_overall)
				{
					if(in_array($k_short_overall, $days_in_period_overall_performance_cmonth))
					{
						$overall_shorts[$ipid]['shortcuts'] = array_merge($overall_shorts[$ipid]['shortcuts'], $v_short_overall);
					}
				}
				$overall_patient_shortcuts[$ipid]['shortcuts'] = array_values(array_unique($overall_shorts[$ipid]['shortcuts']));

				foreach($overall_patient_shortcuts[$ipid]['last_koord_dates'] as $kk_short_overall => $vk_short_overall)
				{
					if(in_array($kk_short_overall, $days_in_period_overall_performance_cmonth))
					{
						$overall_k_shorts[$ipid]['last_koord_dates'][$kk_short_overall] = $vk_short_overall;
					}
				}
				$overall_patient_shortcuts[$ipid]['last_koord_dates'] = $overall_k_shorts[$ipid]['last_koord_dates'];

//				if($ipid == '655aa3ac5880703d344eb1202d25259b8c6ecd54')
//				{
//					print_r("pat shortcuts\n");
//					print_r($overall_patient_shortcuts[$ipid]);
//					exit;
//
//				}
				
				foreach($days_in_period as $k_period_day => $v_period_day)
				{
					$day_shortcuts[$ipid] = array();
					if(count($month_shortcuts[$ipid]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}

					if(empty($overall_data[$v_period_day]))
					{
						$overall_data[$v_period_day] = array();
					}

					$master_data[$ipid][$v_period_day] = array();

					if(count($overall_patient_shortcuts[$ipid]['last_koord_dates']) > '0')
					{
						$last_koord_date_overall[$ipid] = end($overall_patient_shortcuts[$ipid]['last_koord_dates']);
						$week_numbers_arr[$ipid][$last_koord_date_overall[$ipid]] = date('W', strtotime($last_koord_date_overall[$ipid]));
					}

					$last_koord_dates[$ipid] = $overall_patient_shortcuts[$ipid]['last_koord_dates'];

					//calculate set one form_type visits
					//first get flatrate exception and set shortcut
					$shortcut[$ipid] = '';
					$set_one_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

					if((in_array($v_period_day, $flatrate[$ipid]) || in_array($v_period_day, $flatrate_continued[$ipid])) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$shortcut[$ipid] = '37b1';
						$month_shortcuts[$ipid][] = $shortcut[$ipid];
						$overall_patient_shortcuts[$ipid]['shortcuts'][] = $shortcut[$ipid];
					}

					foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf_one)
					{
						if(!in_array($v_cf_one['id'], $exclude_after_discharge) && in_array($v_cf_one['form_type'], $set_one_ids))
						{
							if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && array_key_exists($v_period_day, $contact_forms_days[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]) && count($set_one_result[$ipid]) != 0) //normal set conditions
							{
//								we have visits=> check if there are required visits for this action set
								if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]) || in_array('3', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$shortcut[$ipid] = '37b2';
								}
							}
						}
					}

					if(!empty($shortcut[$ipid]))
					{
						if($shortcut[$ipid] == '37b1' && (in_array($v_period_day, $flatrate[$ipid]['pay_days']) || in_array($v_period_day, $flatrate_continued[$ipid]['pay_days'])))
						{
							$master_data[$ipid][$v_period_day][$shortcut]['pay_days'] = '1';
						}
						$day_shortcuts[$ipid][] = $shortcut[$ipid];
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
						$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

						$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
					}

					//sapv overwrite if formtype is set 4
					//calculate set two form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					$set_fourth_result[$ipid] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);


					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						$set_two_result[$ipid] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_two_result[$ipid]) != 0 || in_array('U', $course_days[$ipid][$v_period_day])) && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								if(is_numeric($k_cf) && !in_array($v_cf['id'], $exclude_after_discharge))
								{
									$shortcut = '';
									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b7', $month_shortcuts[$ipid]) && !in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array($v_cf['form_type'], $set_one_ids))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5')
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][] = '37b5';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_two_ids) ))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								if($v_day_course == 'U')
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b7', $month_shortcuts[$ipid]) && !in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts']))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5')
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][] = '37b5';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(($shortcut[$ipid] == '37b6' || $shortcut[$ipid] == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2')
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

										$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
									}
								}
							}
						}
					}

					//calculate set three form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

						$set_three_result[$ipid] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_three_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && !in_array($v_cform['id'], $exclude_after_discharge))
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array($v_cform['form_type'], $set_one_ids))
									{
										if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][] = '37b7';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
								if($v_day_course == 'V')
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts']))
									{
										if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][] = '37b7';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(($shortcut[$ipid] == '37b7' || $shortcut[$ipid] == '37b8'))
									{
										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
											$last_koord_dates[$ipid][] = $v_period_day;

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$last_koord_dates[$ipid][] = $v_period_day;

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
									}
								}
							}
						}
					}

					if((count($set_fourth_result[$ipid]) != 0 || count($set_one_result[$ipid]) != 0) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						//setup each form sapv based on classification block selection
						foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
						{
							if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['intern'] != '1')
							{
								if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									//switch between BE-KO if VV is not BE
									if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
							}
						}

						//calculate set 4 (ISPC-241)
						//U & V at the top
						//beratung
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								//check if there are 2 beratung change sapv in koord
								if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && (count($set_fourth_result[$ipid]) != 0 || count($set_one_result[$ipid]) != 0) && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
								}

								if(is_numeric($k_cf) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1' && !in_array($v_cf['id'], $exclude_after_discharge) && (in_array($v_cf['form_type'], $set_fourth_ids) && (($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')) || in_array($v_cf['form_type'], $set_one_ids)))
								{
									$shortcut[$ipid] = '';
									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b7', $month_shortcuts[$ipid]) && !in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts']))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5') //only b5 or b6
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][] = '37b5';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_fourth_ids) || in_array($v_cf['form_type'], $set_one_ids)))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
									}
								}
							}
						}

						//koordination
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2' && !in_array($v_cform['id'], $exclude_after_discharge))
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts']))
									{
										if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][] = '37b7';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b7';
										}
										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];

										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && (in_array($v_cform['form_type'], $set_fourth_ids) || in_array($v_cform['form_type'], $set_one_ids)))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$ipid][$v_period_day][0][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}

					//add exclusion
					if(in_array($v_period_day, $sapv_days_inperiod_cs[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							//check if contactform type for each days
							if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids) && (in_array('4', $sapv_days_cs[$ipid][$v_period_day]) || in_array('3', $sapv_days_cs[$ipid][$v_period_day]) ))
							{
								$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
							}
							else
							{
								//$clasifizierung[$v_period_day]['home_visit'] += 0;
								//sum classifizierung data if form is not housebesuche type(1)
								if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days_cs[$ipid][$v_period_day]) &&
									(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$ipid][$v_period_day]) || in_array('2', $sapv_days_cs[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && !in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$ipid][$v_period_day]) || in_array('2', $sapv_days_cs[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && !in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0') && in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids))
								{
									if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else if(in_array('2', $sapv_days_cs[$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}

								$count_be[$ipid][$v_period_day] += 1;
							}
						}
					}

					ksort($overall_data[$v_period_day]);
					if(empty($master_data[$ipid][$v_period_day]))
					{
						unset($master_data[$ipid][$v_period_day]);
					}
				}
				
				/* ###################################### */
				/* ####### SAVED DATA ################### */
				/* ###################################### */
				if(!empty($bw_data[$ipid])){
					// get saved info for month - to see the number of days saved in each month
					$saved_per_moth[$ipid] = array();
					foreach($bw_data[$ipid] as $days=>$vals){
						foreach($vals as $sh=>$shd){
							$saved_per_moth[$ipid][date("mY",strtotime($days))][] = $sh;
						}
					}
						
					foreach($active_days[$ipid] as $k=>$act_day){
						if( isset($bw_data[$ipid][$act_day]) && !empty($bw_data[$ipid][$act_day]) ){ // check if more thant the flatrate from prevoius month is saved.
							if(count($saved_per_moth[$ipid][date("mY",strtotime($act_day))]) >=6 ){
								$final_data[$ipid][$act_day] = $bw_data[$ipid][$act_day];
							} else {
								$final_data[$ipid][$act_day] = array_merge($master_data[$ipid][$act_day],$bw_data[$ipid][$act_day]);
							}
								
						} else {
							$final_data[$ipid][$act_day] = $master_data[$ipid][$act_day];
						}
						
						if(empty($final_data[$ipid][$act_day]))
						{
							unset($final_data[$ipid][$act_day]);
						}
						
						
					}
						
					$master_data[$ipid] = array();
					$master_data[$ipid] = $final_data[$ipid];
				}
				
				
				foreach($days_in_period as $k_period_day => $v_period_day)
				{
					foreach($master_data[$ipid][$v_period_day] as $sh =>$shdata){
						$final_overall_data[$v_period_day][$sh] +=$shdata['qty'];
					}
					ksort($final_overall_data[$v_period_day]);
				}
				if(!empty($final_overall_data)){
					$overall_data= $final_overall_data;
				}
				/* ###################################### */
				
			}
			if($_REQUEST['dbgf'])
			{
				print_r("Week Numbers\n");
				print_r($week_numbers_arr);
				print_r("\n\n");
			}

// 			print_r($final_overall_data);
// 			print_r($overall_data);
// 			print_r("master_data\n");
// 			print_r($master_data);
// 			exit;
			$this->view->days_in_period = $days_in_period;
			$this->view->overall_data = $overall_data;


//			print_r("#1: ipids\n");
//			print_r($ipids);
//			print_r("#2: start_periods\n");
//			print_r($start_periods);
//			print_r("#3: end_periods\n");
//			print_r($end_periods);
//			print_r("#4: current_period\n");
//			print_r($current_period);
//			print_r("#5: real_active_days_cs\n");
//			print_r($real_active_days_cs);
//			print_r("#6: days_nosapv_cs\n");
//			print_r($days_nosapv_cs);
//			print_r("#7: hospital_hospiz_days_cs\n");
//			print_r($hospital_hospiz_days_cs);
//			print_r("overall_patient_shortcuts\n");
//			print_r($overall_patient_shortcuts);
//			print_r($course_days);
//			print_r($hospital_days_cs);
//			print_r($active_days);
//			print_r($real_active_days_cs);
//			print_r($start_periods);
//			print_r($end_periods);
//			print_r($patient_days);
//			print_r($active_days_in_period_cs);
//			print_r($contact_forms_days);
//			print_r($all_contact_forms);
//			print_r($classification_data);
//			print_r($contact_forms_days_ids);
//			print_r($contact_forms2form_types);
			if($_REQUEST['dbgf'])
			{
				print_r($master_data);

				print_r("\n\n EPIDS \n\n");
				foreach($master_data as $kmmdata => $vmmdata)
				{
//					if(count($vmmdata) > '0')
//					{
						print_r($epids[$kmmdata] . " - [" . $kmmdata . "] ( ".count($vmmdata)." ) \n");
//					}
				}
				exit;
			}
			if($_REQUEST['dbgq1'])
			{
				print_r($overall_data);
				exit;
			}
		}
		
		public function clientperformancerecordoldAction()
		{
			$this->_helper->viewRenderer('clientperformancerecord');
			set_time_limit(0);
			setlocale(LC_ALL, 'de_DE.UTF8');

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$tm = new TabMenus();
			$client = new Client();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$bw_invoices = new BwInvoices();


			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			$client_details = $client->getClientDataByid($clientid);

			$this->view->clientid = $clientid;
			$client_patients = $this->getAllClientPatients($clientid, '');
			$this->view->client_details = $client_details[0];

			foreach($client_patients as $k_cl_pat => $v_cl_pat)
			{
				$ipids[] = $v_cl_pat['ipid'];
			}
			$ipids = array_values(array_unique($ipids));
//pms8856 - local
//			$ipids = array('1fb6337d022c109574498d7f5f535d3f08ee5c17');
//bws10020 - local
//			$ipids = array('c593978fc7138194338cbd4a141026244eb83708');
			//health insurance divisions
			$hi_perms_divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);

			//patients health insurance
			$healthinsu_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids);

			//Pateint days START
			//curent period
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $ipids;
			$patient_days = Pms_CommonData::patients_days($conditions);
			//Pateint days END

			$all_patients_periods = array();
			foreach($patient_days as $k_ipid => $patient_data)
			{
				//used to create months selector
				$all_patients_periods = array_merge_recursive($all_patients_periods, $patient_data['active_periods']);

				//used in flatrate
				if(empty($patient_periods[$k_ipid]))
				{
					$patient_periods[$k_ipid] = array();
				}

				array_walk_recursive($patient_data['active_periods'], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$patient_periods[$k_ipid] = array_merge($patient_periods[$k_ipid], $patient_data['active_periods']);

				//hospital days cs
				if(!empty($patient_data['hospital']['real_days_cs']))
				{
					$hospital_days_cs[$k_ipid] = $patient_data['hospital']['real_days_cs'];
					array_walk($hospital_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//hospiz days cs
				if(!empty($patient_data['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
					array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//real active days
				if(!empty($patient_data['real_active_days']))
				{
					$active_days_in_period_cs[$k_ipid] = $patient_data['real_active_days'];
					array_walk($active_days_in_period_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//treatment days
				if(!empty($patient_data['treatment_days']))
				{
					$treatment_days_cs[$k_ipid] = $patient_data['treatment_days'];
					array_walk($treatment_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//active days
				if(!empty($patient_data['active_days']))
				{
					$active_days[$k_ipid] = $patient_data['active_days'];
					array_walk($active_days[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
				
				if(empty($hospital_days_cs[$k_ipid]))
				{
					$hospital_days_cs[$k_ipid] = array();
				}

				if(empty($hospiz_days_cs[$k_ipid]))
				{
					$hospiz_days_cs[$k_ipid] = array();
				}

				$hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);
//				array_walk($active_days[$k_ipid], function(&$value) { $value = date("Y-m-d", strtotime($value)); });
			}

			$all_patients_periods = array_values($all_patients_periods);


			$months = array();
			foreach($all_patients_periods as $k_period => $v_period)
			{
				$period_months = $this->get_period_months($v_period['start'], $v_period['end'], "Y-m");
				$months = array_merge($months, $period_months);
			}
			$months = array_values(array_unique($months));

			foreach($months as $k_m => $v_m)
			{
				$months_unsorted[strtotime($v_m)] = $v_m;
			}
			ksort($months_unsorted);
			$months = array_values(array_unique($months_unsorted));


			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
				$month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
			}

			//get number of days in each month + start/end day START
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_performance';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$days_in_period = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);


			//overall period
			$overall_period['start'] = $months_details[$months[0]]['start'];
			$overall_period['end'] = $current_period['end'];

			$days_in_period_overall = $patientmaster->getDaysInBetween($overall_period['start'], $overall_period['end']);

			if($months_details[$months[0]]['start'] != $current_period['start'])
			{
				//used in overall performance record data start till the end of previous month (curent month-01 -1 day)
				$overall_performance_period['start'] = $months_details[$months[0]]['start'];
				$overall_performance_period['c_month_end'] = date('Y-m-d', strtotime('-1 day', strtotime($current_period['start'])));
				$overall_performance_period['end'] = date('Y-m-d', strtotime('-1 day', strtotime('+1 month', strtotime($current_period['start']))));
			}
			else
			{
				//no overall period (no previous months)
				$overall_performance_period['start'] = "1970-01-01";
				$overall_performance_period['end'] = "1970-01-01";
			}


			$days_in_period_overall_performance = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['end']);
			$days_in_period_overall_performance_cmonth = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['c_month_end']);
			//sapv in curent period
			//(ipid-day-verordnet_statuses)
			$sapv_days_cs = $this->get_period_sapvs($ipids, $current_period, $hospital_hospiz_days_cs);

			//sapv till last day of prev month
			$sapv_days_overall = $this->get_period_sapvs($ipids, $overall_performance_period, $hospital_hospiz_days_cs);


			foreach($sapv_days_cs as $k_s_ipid => $v_s_data)
			{
				$sapv_days_inperiod_cs[$k_s_ipid] = array_keys($v_s_data);
				asort($sapv_days_inperiod_cs[$k_s_ipid]);
			}

			//get pflegestuffe in current period
			$pflege_arr = $pflege->get_multiple_patatients_mt_period($ipids, $current_period['start'], $current_period['end']);

			foreach($pflege_arr as $k_pflege => $v_pflege)
			{
				$patients_pflege[$v_pflege['ipid']] = $v_pflege['stage'];
			}

			//get all sets form types
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
				$set_one_ids[] = $v_set_one['id'];
			}

			$set_two = $form_types->get_form_types($clientid, '2');
			foreach($set_two as $k_set_two => $v_set_two)
			{
				$set_two_ids[] = $v_set_two['id'];
			}

			$set_three = $form_types->get_form_types($clientid, '3');
			foreach($set_three as $k_set_three => $v_set_three)
			{
				$set_three_ids[] = $v_set_three['id'];
			}


			$set_fourth = $form_types->get_form_types($clientid, '4');
			foreach($set_fourth as $k_set_fourth => $v_set_fourth)
			{
				$set_fourth_ids[] = $v_set_fourth['id'];
			}

			$set_ids['one'] = $set_one_ids;
			$set_ids['two'] = $set_two_ids;
			$set_ids['three'] = $set_three_ids;
			$set_ids['fourth'] = $set_fourth_ids;

			//get contact forms in current period and in overall period
			$contact_forms_days = $this->get_patients_period_cf($ipids, $current_period);
			$contact_forms_overall_days = $this->get_patients_period_cf($ipids, $overall_performance_period);

			$contact_forms_ids[] = '999999999';

			$exclude_after_discharge = array();
			foreach($ipids as $k_ipid => $v_ipid)
			{
				//last discharge date
				$patients_discharge_date[$v_ipid] = end($patient_days[$v_ipid]['discharge']);

				foreach($contact_forms_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							if(strtotime($v_cf['start_date']) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge[] = $v_cf['id'];
							}
							$contact_forms_ids[] = $v_cf['id'];
							$all_contact_forms[$v_cf['id']] = $v_cf;
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);


				foreach($contact_forms_overall_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cfo => $v_cfo)
					{
						if(is_numeric($k_cfo))
						{
							if(strtotime($v_cfo['start_date']) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge_overall[] = $v_cfo['id'];
							}
							$contact_forms_ids_overall[] = $v_cfo['id'];
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);
			}

			$block_classification = new FormBlockClassification();
			$classification_data = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids);
			$classification_data_overall = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids_overall);


			foreach($all_contact_forms as $k_cf => $v_cf)
			{
				$k_cf_day = date('Y-m-d', strtotime($v_cf['start_date']));

				if(array_key_exists($v_cf['id'], $classification_data) && in_array($k_cf_day, $active_days_in_period_cs[$v_cf['ipid']]))
				{
					if((in_array($v_cf['form_type'], $set_ids['fourth']) && $classification_data[$v_cf['id']]['intern'] == '0') || !in_array($v_cf['form_type'], $set_ids['fourth']))
					{
						$contact_forms_days_ids[$k_cf_day][] = $v_cf['id'];
						$contact_forms2form_types[$v_cf['id']][] = $v_cf['form_type'];
					}
				}

				if(!array_key_exists($v_cf['id'], $classification_data))
				{
					unset($contact_forms_ids[array_search($v_cf['id'], $contact_forms_ids)]);
				}
			}

			$contact_forms_ids = array_values(array_unique($contact_forms_ids));


			//get patients courses
			$course_days = $this->get_patients_period_course($ipids, $patients_discharge_date, $current_period);

			//get real active patient days (active, with sapv and no hospital/hospiz)
//			print_r($hospital_hospiz_days_cs['0bbb28fdffcf6bf09a7d5ba9d6090c2d684005cc']);

			$real_active_days_cs = $this->patients_real_active_days($ipids, $active_days, $hospital_hospiz_days_cs, $sapv_days_cs);

			//get no sapv days
			$days_nosapv_cs = $this->nosapv_days($active_days, $hospital_hospiz_days_cs, $sapv_days_cs);

			//unset ipids which have no contact form or course in selected period
			foreach($ipids as $kipid => $v_ipid)
			{

				if(count($course_days[$v_ipid]) == "0" && count($contact_forms_days[$v_ipid]) == "0" && count($sapv_days_cs[$v_ipid]) == "0")
				{
					unset($ipids[$kipid]);
				}
			}
			$ipids[] = '999999999'; //dumy control for no ipids
			$ipids = array_values(array_unique($ipids));


			//get patient fall periods to be used in flatrate
			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($patient_days[$v_ipid]['active_periods'] as $k_period => $v_period)
				{
					$start_periods[$v_ipid][] = date('Y-m-d', strtotime($v_period['start']));
					$end_periods[$v_ipid][] = date('Y-m-d', strtotime($v_period['end']));
				}
			}

			//get check for flatrate case and return "7 days flat rate" days
			$flatrate = $this->multi_patients_flatrate_days($ipids, $clientid, $start_periods, $end_periods, $current_period, $active_days, $patient_periods, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_days);

			//get performance shortcuts
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$this->view->shortcuts = $shortcuts['performance'];

			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);
			$this->view->price_list = $master_price_list;

			$overall_patient_shortcuts = $this->patients_performance_overall($ipids, $clientid, $overall_performance_period, $active_days, $set_ids, $flatrate, $master_price_list, $days_in_period_overall_performance, $hospital_hospiz_days_cs, $sapv_days_overall, $course_days, $contact_forms_overall_days, $classification_data_overall);
			$flatrate_continued = $this->multi_patients_flatrate_days_continued($ipids, $clientid, $start_periods, $end_periods, $current_period, $active_days, $patient_periods, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_days, $overall_patient_shortcuts);
//			print_r($flatrate);
//			print_r($flatrate_continued);
//			exit;
			$week_numbers_arr[] = '9999999999';
			foreach($ipids as $k_ipid => $ipid)
			{

				foreach($overall_patient_shortcuts[$ipid]['shortcuts'] as $k_short_overall => $v_short_overall)
				{
					if(in_array($k_short_overall, $days_in_period_overall_performance_cmonth))
					{
						$overall_shorts[$ipid]['shortcuts'][$k_short_overall] = $v_short_overall;
					}
				}
				$overall_patient_shortcuts[$ipid]['shortcuts'] = $overall_shorts[$ipid]['shortcuts'];


				foreach($overall_patient_shortcuts[$ipid]['last_koord_dates'] as $kk_short_overall => $vk_short_overall)
				{
					if(in_array($kk_short_overall, $days_in_period_overall_performance_cmonth))
					{
						$overall_k_shorts[$ipid]['last_koord_dates'][$kk_short_overall] = $vk_short_overall;
					}
				}
				$overall_patient_shortcuts[$ipid]['last_koord_dates'] = $overall_k_shorts[$ipid]['last_koord_dates'];

				foreach($days_in_period as $k_period_day => $v_period_day)
				{
					$day_shortcuts[$ipid] = array();
					if(count($month_shortcuts[$ipid]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}

					if(empty($overall_data[$v_period_day]))
					{
						$overall_data[$v_period_day] = array();
					}

					$master_data[$ipid][$v_period_day] = array();

					if(count($overall_patient_shortcuts[$ipid]['last_koord_dates']) > '0')
					{
						$last_koord_date_overall[$ipid] = end($overall_patient_shortcuts[$ipid]['last_koord_dates']);
						$week_numbers_arr[$ipid][$last_koord_date_overall[$ipid]] = date('W', strtotime($last_koord_date_overall[$ipid]));
					}

					$last_koord_dates[$ipid] = $overall_patient_shortcuts[$ipid]['last_koord_dates'];

					//calculate set one form_type visits
					//first get flatrate exception and set shortcut
					$shortcut[$ipid] = '';
					$set_one_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

					if((in_array($v_period_day, $flatrate[$ipid]) || in_array($v_period_day, $flatrate_continued[$ipid])) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$shortcut[$ipid] = '37b1';
						$month_shortcuts[$ipid][] = $shortcut[$ipid];
						$overall_patient_shortcuts[$ipid]['shortcuts'][] = $shortcut[$ipid];
					}

					foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf_one)
					{
						if(!in_array($v_cf_one['id'], $exclude_after_discharge) && in_array($v_cf_one['form_type'], $set_one_ids))
						{
							if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && array_key_exists($v_period_day, $contact_forms_days[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]) && count($set_one_result[$ipid]) != 0) //normal set conditions
							{
//								we have visits=> check if there are required visits for this action set
								if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]) || in_array('3', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$shortcut[$ipid] = '37b2';
								}
							}
						}
					}


					if(!empty($shortcut[$ipid]))
					{
						if($shortcut[$ipid] == '37b1' && (in_array($v_period_day, $flatrate[$ipid]['pay_days']) || in_array($v_period_day, $flatrate_continued[$ipid]['pay_days'])))
						{
							$master_data[$ipid][$v_period_day][$shortcut]['pay_days'] = '1';
						}
						$day_shortcuts[$ipid][] = $shortcut[$ipid];
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
						$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

						$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
					}


					//sapv overwrite if formtype is set 4
					//calculate set two form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					$set_fourth_result[$ipid] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);


					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						$set_two_result[$ipid] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_two_result[$ipid]) != 0 || in_array('U', $course_days[$ipid][$v_period_day])) && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								if(is_numeric($k_cf) && !in_array($v_cf['id'], $exclude_after_discharge))
								{
									$shortcut = '';
									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b7', $month_shortcuts[$ipid]) && !in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array($v_cf['form_type'], $set_one_ids))
									{
										$shortcut[$ipid] = '37b5';
									}


									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5')
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][] = '37b5';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_two_ids) ))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								if($v_day_course == 'U')
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b7', $month_shortcuts[$ipid]) && !in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts']))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5')
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][] = '37b5';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(($shortcut[$ipid] == '37b6' || $shortcut[$ipid] == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2')
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

										$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
									}
								}
							}
						}
					}


					//calculate set three form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

						$set_three_result[$ipid] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_three_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && !in_array($v_cform['id'], $exclude_after_discharge))
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array($v_cform['form_type'], $set_one_ids))
									{
										if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][] = '37b7';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
								if($v_day_course == 'V')
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts']))
									{
										if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][] = '37b7';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(($shortcut[$ipid] == '37b7' || $shortcut[$ipid] == '37b8'))
									{
										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
											$last_koord_dates[$ipid][] = $v_period_day;

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
											$last_koord_dates[$ipid][] = $v_period_day;

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
									}
								}
							}
						}
					}

					if((count($set_fourth_result[$ipid]) != 0 || count($set_one_result[$ipid]) != 0) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						//setup each form sapv based on classification block selection
						foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
						{
							if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['intern'] != '1')
							{
								if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									//switch between BE-KO if VV is not BE
									if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
							}
						}

						//calculate set 4 (ISPC-241)
						//U & V at the top
						//beratung
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								//check if there are 2 beratung change sapv in koord
								if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && (count($set_fourth_result[$ipid]) != 0 || count($set_one_result[$ipid]) != 0) && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
								}

								if(is_numeric($k_cf) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1' && !in_array($v_cf['id'], $exclude_after_discharge) && (in_array($v_cf['form_type'], $set_fourth_ids) && (($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')) || in_array($v_cf['form_type'], $set_one_ids)))
								{
									$shortcut[$ipid] = '';
									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b7', $month_shortcuts[$ipid]) && !in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts']))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5') //only b5 or b6
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][] = '37b5';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_fourth_ids) || in_array($v_cf['form_type'], $set_one_ids)))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$v_period_day][0][$shortcut[$ipid]]['price'];
									}
								}
							}
						}

						//koordination
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2' && !in_array($v_cform['id'], $exclude_after_discharge))
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts']))
									{
										if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][] = '37b7';
											$overall_patient_shortcuts[$ipid]['shortcuts'][] = '37b7';
										}
										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];

										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && (in_array($v_cform['form_type'], $set_fourth_ids) || in_array($v_cform['form_type'], $set_one_ids)))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$shortcut[$ipid]]['price'];

											$overall_data[$v_period_day][$shortcut[$ipid]] += '1';
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$ipid][$v_period_day][0][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}

					//add exclusion
					if(in_array($v_period_day, $sapv_days_inperiod_cs[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							//check if contactform type for each days
							if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids) && (in_array('4', $sapv_days_cs[$ipid][$v_period_day]) || in_array('3', $sapv_days_cs[$ipid][$v_period_day]) ))
							{
								$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
							}
							else
							{
								//$clasifizierung[$v_period_day]['home_visit'] += 0;
								//sum classifizierung data if form is not housebesuche type(1)
								if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days_cs[$ipid][$v_period_day]) &&
									(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$ipid][$v_period_day]) || in_array('2', $sapv_days_cs[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && !in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$ipid][$v_period_day]) || in_array('2', $sapv_days_cs[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && !in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0') && in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids))
								{
									if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else if(in_array('2', $sapv_days_cs[$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}

								$count_be[$ipid][$v_period_day] += 1;
							}
						}
					}

					ksort($overall_data[$v_period_day]);
					if(empty($master_data[$ipid][$v_period_day]))
					{
						unset($master_data[$ipid][$v_period_day]);
					}
				}
			}

			$this->view->days_in_period = $days_in_period;
			$this->view->overall_data = $overall_data;


//			print_r("#1: ipids\n");
//			print_r($ipids);
//			print_r("#2: start_periods\n");
//			print_r($start_periods);
//			print_r("#3: end_periods\n");
//			print_r($end_periods);
//			print_r("#4: current_period\n");
//			print_r($current_period);
//			print_r("#5: real_active_days_cs\n");
//			print_r($real_active_days_cs);
//			print_r("#6: days_nosapv_cs\n");
//			print_r($days_nosapv_cs);
//			print_r("#7: hospital_hospiz_days_cs\n");
//			print_r($hospital_hospiz_days_cs);
//			print_r("overall_patient_shortcuts\n");
//			print_r($overall_patient_shortcuts);
//			print_r($course_days);
//			print_r($hospital_days_cs);
//			print_r($active_days);
//			print_r($real_active_days_cs);
//			print_r($start_periods);
//			print_r($end_periods);
//			print_r($patient_days);
//			print_r($active_days_in_period_cs);
//			print_r($contact_forms_days);
//			print_r($all_contact_forms);
//			print_r($classification_data);
//			print_r($contact_forms_days_ids);
//			print_r($contact_forms2form_types);
			if($_REQUEST['dbgf'])
			{
				print_r($master_data);
				print_r("\n\n IPIDS \n\n");

				print_r(array_keys($master_data));
				exit;
			}
			if($_REQUEST['dbgq1'])
			{
				print_r($overall_data);
				exit;
			}
		}

		function getAllClientPatients($clientid, $whereepid)
		{
			$actpatient = Doctrine_Query::create()
				->select("p.ipid, e.epid")
				->from('PatientMaster p');
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->where($whereepid . 'e.clientid = ' . $clientid);


			$actipidarray = $actpatient->fetchArray();

			return $actipidarray;
		}

		public function rpinvoiceAction()
		{
			set_time_limit(0);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$patientmaster = new PatientMaster();
			$tab_menus = new TabMenus();
			$client = new Client();
			$p_list = new PriceList();
			$user = new User();
			$usergroups = new Usergroup();
			$patientdischarge = new PatientDischarge();
			$discharge_method = new DischargeMethod();
			$rp_invoices_form = new Application_Form_RpInvoices();


			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$patient_epid = strtoupper(Pms_CommonData::getEpid($ipid));
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$sapv = new SapvVerordnung();
			$pat_diagnosis = new PatientDiagnosis();

			$isclient = Pms_CommonData::getPatientClient($decid, $clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
				exit;
			}
			//Check patient permissions on controller and action
			$patient_privileges = PatientPermissions::checkPermissionOnRun();
			if(!$patient_privileges)
			{
				$this->_redirect(APP_BASE . 'error/previlege');
			}
			$client_details = $client->getClientDataByid($clientid);

			if(strlen($client_details[0]['institutskennzeichen']) > 0)
			{
				$client_address['ik'] = $client_details[0]['institutskennzeichen'];
			}

			if(strlen($client_details[0]['team_name']) > 0)
			{
				$client_address['team_name'] = $client_details[0]['team_name'];
			}

			if(strlen($client_details[0]['street1']) > 0)
			{
				$client_address['street1'] = $client_details[0]['street1'];
			}

			if(strlen($client_details[0]['postcode']) > 0)
			{
				$client_address['postcode_city'] = $client_details[0]['postcode'];
			}

			if(strlen($client_details[0]['city']) > 0)
			{
				$client_address['postcode_city'] = $client_address['postcode_city'] . ' ' . $client_details[0]['city'];
			}

			if(strlen($client_details[0]['phone']) > 0)
			{
				$client_address['phone'] = "Tel: " . $client_details[0]['phone'];
			}

			if(strlen($client_details[0]['fax']) > 0)
			{
				$client_address['fax'] = "Fax: " . $client_details[0]['fax'];
			}


			$this->view->client_nice_address = implode("\n", $client_address);
			
			$this->view->client_details = $client_details[0];
			
			// Groups  details
			//ISPC-2134 - 19.12.2017
			$client_usergroups_array = $usergroups->getClientGroups($clientid);
			
			$ug_details = array();
			foreach($client_usergroups_array as $k=>$group_data){
				$ug_details[$group_data['id']] = $group_data;
			}
			
			//user details
			$users = new User();
			$client_user_array = $users->getUserByClientid($clientid,0,true,false);
			foreach($client_user_array as $k=>$cu)
			{
			    $user_array[$cu['id']] = $cu;
			    $user_array[$cu['id']]['groupname'] = $ug_details[$cu['groupid']]['groupname'];
			    if(strlen($cu['shortname']) >  0){
			        $user_array[$cu['id']]['initials'] = $cu['shortname'];
			    }
			    else
			    {
			        $user_array[$cu['id']]['initials'] = mb_substr($cu['first_name'], 0, 1, "UTF-8") . "" . mb_substr($cu['last_name'], 0, 1, "UTF-8");
			         
			    }
			}
				
			/*			 * ******* Patient Information ************ */
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->tabmenus = $tab_menus->getMenuTabs();
			/*			 * *************************************** */

			//get patinet info
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'] . "\n" . $parr['street1'] . "\n" . $parr['zip'] . "&nbsp;" . $parr['city'];
			$this->view->birthdate = $parr['birthd'];

			//get patient health insurance
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];

			//get master healthinsurance
			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

			//user Betriebsstätten-Nr.
			$user = Doctrine::getTable('User')->find($userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->arzt_nr = $uarray['LANR'];
			}


			//get client details
			$clientdata = Pms_CommonData::getClientData($clientid);
			$this->view->client_ik = $clientdata[0]['institutskennzeichen'];


			//get all sapvs
			$patient_sapvs = $sapv->get_all_sapvs($ipid);

			
			foreach($patient_sapvs as $k=>$sv_data){
				$st_date = date('Y-m-d',strtotime($sv_data['verordnungam']));
				$sapv_period2type[$st_date] = $sv_data['verordnet'];  
			}
			
			



			$patient_discharge = $patientdischarge->getPatientDischarge($ipid);
			$discharge_dead_date = '';
			if($patient_discharge)
			{
				//get discharge methods
				$discharge_methods = $discharge_method->getDischargeMethod($clientid, 0);

				foreach($discharge_methods as $k_dis_method => $v_dis_method)
				{
					if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
					{
						$death_methods[] = $v_dis_method['id'];
					}
				}
				$death_methods = array_values(array_unique($death_methods));

				if(in_array($patient_discharge[0]['discharge_method'], $death_methods))
				{
					$discharge_dead_date = date('Y-m-d', strtotime($patient_discharge[0]['discharge_date']));
					$discharge_dead_date_time = date('Y-m-d H:i:00', strtotime($patient_discharge[0]['discharge_date']));
				}
			}


			//construct sapv_period_selector
			//if no sapvid requested then use the last sapv
			$sapv_selector[] = 'Select Verordnung period';
			$has_no_sapv = true;
			foreach($patient_sapvs as $k_sapv => $v_sapv)
			{
				$sapv_selector[$v_sapv['id']] = $v_sapv['fam_doc']['last_name'] . ' - ' . date('d.m.Y', strtotime($v_sapv['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($v_sapv['verordnungbis']));

				$sapv_dates['id'] = $v_sapv['id'];
				$sapv_dates['from'] = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$sapv_dates['till'] = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
				$sapv_dates['type'] = trim($v_sapv['verordnet']);

				$sapv_selector_source[$v_sapv['id']] = $sapv_dates;
				$has_no_sapv = false;
			}
 
			if($_REQUEST['period_id'] > 0)
			{
				$selected_period = $_REQUEST['period_id'];
			}
			else if(empty($_REQUEST['period_id']) || $_REQUEST['period_id'] == '0')
			{
				$last_sel_per = end($sapv_selector_source);
				$selected_period = $last_sel_per['id'];
			}

			$attrs['onChange'] = 'changePeriod(this.value);';
			$this->view->period_selector = $this->view->formSelect("period_id", $selected_period, $attrs, $sapv_selector);


			$first_sapv_id = $patient_sapvs[0]['id'];

			//erstverordnung
			$this->view->sapv_erst = '0';

			if(count($patient_sapvs) >= '1' && $selected_period == $first_sapv_id && $has_no_sapv === false)
			{
				$this->view->sapv_erst = '1';
			}

			//folgeverordnung
			$this->view->sapv_folge = '0';
			if(count($patient_sapvs) > '1' && $has_no_sapv === false)
			{
				$this->view->sapv_folge = '1';
			}

			if($has_no_sapv === false)
			{
				//get curent verordnung date from-till
				$curent_sapv_from = $sapv_selector_source[$selected_period]['from'];
				$curent_sapv_till = $sapv_selector_source[$selected_period]['till'];
				$curent_sapv_type = $sapv_selector_source[$selected_period]['type'];
				//overide the end of selected sapv period with discharge date
				if(strlen($discharge_dead_date) > 0)
				{
					if(strtotime($curent_sapv_till) > strtotime($discharge_dead_date))
					{
						$curent_sapv_till = date('Y-m-d', strtotime($discharge_dead_date));
					}

					if(strtotime($curent_sapv_from) > strtotime($discharge_dead_date))
					{
						$curent_sapv_from = date('Y-m-d', strtotime($discharge_dead_date));
					}
				}


				
				// check if there were sapv periods with only BE
				foreach($sapv_period2type as $per_start => $per_type )
				{
					if(strtotime($per_start)  < strtotime($curent_sapv_from)  && $per_type == "1")
					{
						$only_be_before[] =  $per_start ;
					} else {
						$execpt_be[] =  $per_start ;
					}
				}
				
				/* the patient gets ANOTHER Verordnung AFTER that Beratung verordnung then there is one rule to be applied
				if the next admission is within 28 days after the Beratung admission, NO assessment is again billed
				if the next admission is AFTER 28 days after the Beratung admission, a "reduziertes Assessment" is only billed */
				
				// if before the current sapv patient had only - check the admision
				
				
				
				$curent_sapv_from_f = date('d.m.Y', strtotime($curent_sapv_from));
				$curent_sapv_till_f = date('d.m.Y', strtotime($curent_sapv_till));

				$this->view->curent_sapv_from = $curent_sapv_from_f;
				$this->view->curent_sapv_till = $curent_sapv_till_f;

				$this->view->invoice_date_from = $curent_sapv_from_f;
				$this->view->invoice_date_till = $curent_sapv_till_f;

				$curent_period['start'] = $curent_sapv_from;
				$curent_period['end'] = $curent_sapv_till;
				$pd_curent_period['start'] = $curent_sapv_from;
				$pd_curent_period['end'] = $curent_sapv_till;

			}
			else
			{
				$curent_period['start'] = '1970-01-01';
				$curent_period['end'] = '1970-01-01';
				$pd_curent_period['start'] = '2009-01-01';
				$pd_curent_period['end'] = date('Y-m-d');
				
			}

			// get active days of patient 
			$conditions['periods'][0]['start'] = $pd_curent_period['start'];
			$conditions['periods'][0]['end'] = $pd_curent_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);			
			
			if($_REQUEST['dbg_pd']=="1"){
				print_r($patient_days); exit;
			}
			// if patient had an only be before 
			$bill_assessment = 1;
			$bill_secondary_assessment = 0;
			if(isset($only_be_before) && !empty($only_be_before)){
				$admission_days = $patient_days[$ipid]['admission_days']; 
			
				$last_only_be = end($only_be_before);
				$last_admission_date  = end($admission_days);

				if(strtotime($last_only_be) < strtotime($last_admission_date)){
					$from_sapv_be2patient_admision = $patientmaster->getDaysInBetween($last_only_be, $last_admission_date);
					if(count($from_sapv_be2patient_admision) < 28 ){
					    // if the next admission is within 28 days after the Beratung admission, NO assessment is again billed
						$bill_assessment = 0; 
						$bill_secondary_assessment = 0; 
						
					} else {
					 //if the next admission is AFTER 28 days after the Beratung admission, a "reduziertes Assessment" is only billed
						$bill_assessment = 0;
						$bill_secondary_assessment = 1;
					}
				}
			}
			
			//get patient main diagnosis
			$patient_main_diag = $pat_diagnosis->get_main_diagnosis($ipid, $clientid);
			$this->view->main_diagnosis = implode(', ', $patient_main_diag['icd']);


			//get patient locations and construct day2location_type arr
			$pat_locations = PatientLocation::get_period_locations($ipid, $curent_period);

			$pat_days2loctype = array();
			foreach($pat_locations as $k_pat => $v_pat)
			{
				if($v_pat['discharge_location'] == "0")
				{
					foreach($v_pat['all_days'] as $k_day => $v_day)
					{
						if(in_array(date("d.m.Y",strtotime($v_day)),$patient_days[$ipid]['real_active_days']) )
						{ // allow only location days that are included in patient active days
							$pat_days2loctype[$v_day][] = $v_pat['master_details']['location_type'];
						}
					}
				}
			}
			
			// TODO-2722 Ancuta 10.12.2019 - move patient location so locations according to client settings
			foreach($pat_days2loctype  as $loc_day => $day_loc_types ){
			    
			    $del_val = "1";
			    if (  ! in_array(date("d.m.Y",strtotime($loc_day)),$patient_days[$ipid]['hospital']['real_days_cs']) && ($key = array_search($del_val, $day_loc_types)) !== false) {
			        unset($pat_days2loctype[$loc_day][$key]);
			    }
			    
			    $del_val = "2";
			    if (  ! in_array(date("d.m.Y",strtotime($loc_day)),$patient_days[$ipid]['hospiz']['real_days_cs']) && ($key = array_search($del_val, $day_loc_types)) !== false) {
			        unset($pat_days2loctype[$loc_day][$key]);
			    }
			}
			
			foreach($pat_days2loctype as $loc_day => $day_loc_types){
			    if (in_array(date("d.m.Y",strtotime($loc_day)),$patient_days[$ipid]['hospital']['real_days_cs']) ) {
			        $pat_days2loctype[$loc_day] = '1';
			    }
			    elseif (in_array(date("d.m.Y",strtotime($loc_day)),$patient_days[$ipid]['hospiz']['real_days_cs']) ) {
			        $pat_days2loctype[$loc_day] = '2';
			    } else{
			        $pat_days2loctype [$loc_day] = end($day_loc_types);
			    }
			    
			}
			//-- 
			
			
			
			if($_REQUEST['rpdbg']=="1"){
				print_r($patient_days);
				print_r($pat_days2loctype);
				exit;
			}
				
			
			//get default products pricelist
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$default_price_list = Pms_CommonData::get_default_price_shortcuts();

			$invoice_date_start = $invoice_date_end = date('Y-m-d', time());

//			$ppl = PriceList::get_period_price_list($curent_sapv_from, $curent_sapv_till);
			if(!$curent_sapv_from)
			{
				$pr_date_from = $pr_date_till = date('Y-m-d', time());
				$ppl = PriceList::get_period_price_list($pr_date_from, $pr_date_till);
			}
			else
			{
				$ppl = PriceList::get_period_price_list($curent_sapv_from, $curent_sapv_till);
			}

			// get product shortcuts
			// grid is based on this -> latter use this arr
			// as source to build products arr
			$this->view->shortcuts = $shortcuts['rp'];

			//location type to price_type mapping
			$location_type_match = Pms_CommonData::get_rp_price_mapping();

			foreach($shortcuts['rp'] as $k_short => $v_short)
			{
				if(!$curent_sapv_from)
				{
					$price_date = date('Y-m-d', time());
				}
				else
				{
					$price_date = $curent_sapv_from;
				}
				$products[$v_short]['shortcut'] = $v_short;
				$products[$v_short]['price'] = '';
				$products[$v_short]['qty_gr']['p_home'] = '0';
				$products[$v_short]['price_gr']['p_home'] = $ppl[$price_date][0][$v_short]['p_home'];
				$products[$v_short]['total']['p_home'] = '0.00';

				$products[$v_short]['qty_gr']['p_nurse'] = '0';
				$products[$v_short]['price_gr']['p_nurse'] = $ppl[$price_date][0][$v_short]['p_nurse'];
				$products[$v_short]['total']['p_nurse'] = '0.00';

				$products[$v_short]['qty_gr']['p_hospiz'] = '0';
				$products[$v_short]['price_gr']['p_hospiz'] = $ppl[$price_date][0][$v_short]['p_hospiz'];
				$products[$v_short]['total']['p_hospiz'] = '0.00';
			}


			//get invoice temp number
			$rp_invoice_nr = RpInvoices::get_next_invoice_number($clientid, true);

			$this->view->prefix = $rp_invoice_nr['prefix'];
			$this->view->invoice_number = $rp_invoice_nr['invoicenumber'];


			/*------------------- Get all visits  details --------------------------*/
			//get used form types
			$form_types = new FormTypes();
			$all_forms = $form_types->get_form_types($clientid);
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
			    $set_one_ids[] = $v_set_one['id'];
			}
			
			//get doctor and nurse users
			//get all related users details
			$master_groups_first = array('4', '5');
			
			$client_user_groups_first = $usergroups->getUserGroups($master_groups_first);
			
			foreach($client_user_groups_first as $k_group_f => $v_group_f)
			{
			    $master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
			}
			
			$client_users = $user->getClientsUsers($clientid);
			
			$nurse_users = array();
			$doctor_users = array();
			foreach($client_users as $k_cuser_det => $v_cuser_det)
			{
			    $master_user_details[$v_cuser_det['id']] = $v_cuser_det;
			    if(in_array($v_cuser_det['groupid'], $master2client['5']))
			    {
			        $nurse_users[] = $v_cuser_det['id'];
			    }
			    else if(in_array($v_cuser_det['groupid'], $master2client['4']))
			    {
			        $doctor_users[] = $v_cuser_det['id'];
			    }
			}
			
			//get curent contact forms
			$contact_forms = $this->get_period_contact_forms($ipid, $curent_period, false, false, true);
			
			$doctor_contact_forms = array();
			$nurse_contact_forms = array();
			ksort($contact_forms);
			foreach($contact_forms as $kcf => $day_cfs)
			{
			    foreach($day_cfs as $k_dcf => $v_dcf)
			    {
			    	if(!empty($discharge_dead_date_time)){
						if(strtotime($v_dcf['start_date']) <= strtotime($discharge_dead_date_time)){ // excude if the visit started after the discharge dead hour
					        $all_contact_forms[] = $v_dcf;
						}
			    	}
			    	else
			    	{
				        $all_contact_forms[] = $v_dcf;
			    	}
			    	
			    }
			}

			if ($_REQUEST['cfdbg']=="1"){
			    print_r($all_contact_forms);
			}
			
			
			$contact_forms2date = array();
			foreach($all_contact_forms as $k_cf => $v_cf)
			{
			    //visit date formated
			    $visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));
			
			    //switch shortcut_type based on patient location for *visit* date
			    $vday_matched_loc_price_type = $location_type_match[$pat_days2loctype[$visit_date]];
			
			    //switch shortcut doctor/nurse
			    $shortcut_switch = false;
			    if(in_array($v_cf['create_user'], $doctor_users))
			    {
			        $shortcut_switch = 'doc';
			    }
			    else if(in_array($v_cf['create_user'], $nurse_users))
			    {
			        $shortcut_switch = 'nur';
			    }
			
			    //create products (doc||nurse)
			    if(strlen($vday_matched_loc_price_type) > 0 && $shortcut_switch && in_array($v_cf['form_type'], $set_one_ids))
			    {
			        if($ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type] != '0.00')
			        {
			            $contact_forms2date[date('Y-m-d', strtotime($v_cf['billable_date']))][] = $v_cf;
			        }
			    }
			}
			
			//check if patient has saved data in db
			$saved_data = RpControl::get_rp_controlsheet($ipid, $curent_period['start'], $curent_period['end']);
//			print_r($curent_period);
//			exit;

			if ($_REQUEST['cfdbg']=="1"){
			    print_r("\n");
			    print_r("saved data \n ");
			    print_r($saved_data);
			    exit;
			}
			if($saved_data)
			{
				//reconstruct array
				foreach($saved_data as $k_shortcut => $v_sv_data)
				{
					$saved_data_arr[$k_shortcut]['shortcut'] = $k_shortcut;

					foreach($v_sv_data as $k_date => $v_qty)
					{
						if($ppl[$k_date][0][$k_shortcut]['p_home'] != '0.00')
						{
							$saved_data_arr[$k_shortcut]['qty_gr']['p_home'] += $v_qty['p_home'];
							$saved_data_arr[$k_shortcut]['price_gr']['p_home'] = $ppl[$k_date][0][$k_shortcut]['p_home'];
							$saved_data_arr[$k_shortcut]['total']['p_home'] += ($v_qty['p_home'] * $ppl[$k_date][0][$k_shortcut]['p_home']);
							if($v_qty['p_home'] != 0  && !empty($contact_forms2date[$k_date])){
    							$dates[$k_shortcut][$k_date] += $v_qty['p_home']; 
							}
						}

						if($ppl[$k_date][0][$k_shortcut]['p_nurse'] != '0.00')
						{
							$saved_data_arr[$k_shortcut]['qty_gr']['p_nurse'] += $v_qty['p_nurse'];
							$saved_data_arr[$k_shortcut]['price_gr']['p_nurse'] = $ppl[$k_date][0][$k_shortcut]['p_nurse'];
    						$saved_data_arr[$k_shortcut]['total']['p_nurse'] += ($v_qty['p_nurse'] * $ppl[$k_date][0][$k_shortcut]['p_nurse']);
    						if($v_qty['p_nurse'] != 0   && !empty($contact_forms2date[$k_date]) ){
                                $dates[$k_shortcut][$k_date] += $v_qty['p_nurse']; 
    						}
						}

						if($ppl[$k_date][0][$k_shortcut]['p_hospiz'] != '0.00')
						{
							$saved_data_arr[$k_shortcut]['qty_gr']['p_hospiz'] += $v_qty['p_hospiz'];
							$saved_data_arr[$k_shortcut]['price_gr']['p_hospiz'] = $ppl[$k_date][0][$k_shortcut]['p_hospiz'];
							$saved_data_arr[$k_shortcut]['total']['p_hospiz'] += ($v_qty['p_hospiz'] * $ppl[$k_date][0][$k_shortcut]['p_hospiz']);
							if($v_qty['p_hospiz'] != 0   && !empty($contact_forms2date[$k_date]) ){
							    $dates[$k_shortcut][$k_date] += $v_qty['p_hospiz']; 
							}
						}
					}
				}

				$products = $saved_data_arr;
			}
            				
			foreach($dates as $dn_sh=>$visits_values)
			{
			    if($dn_sh == "rp_doc_2" || $dn_sh == "rp_nur_2")
			    {
        			foreach($visits_values as $date=>$saved_qty)
        			{
        			    if($saved_qty != 0 && (count($contact_forms2date[$date]) <= $saved_qty) )
        			    {
        			        foreach($contact_forms2date[$date] as $cfk=>$cf_data)
        			        {
        			            $extra_data['home_visit'][$cf_data['id']] = $cf_data;
        			        }
        			    }
        			    else if($saved_qty != 0 && (count($contact_forms2date[$date]) > $saved_qty) )
        			    {
        			        $cfs[$date] = 0;
        			        
        			        foreach($contact_forms2date[$date] as $cfk=>$cf_data)
        			        {
        			            if( $cfs[$date] <= $saved_qty )
        			            {
            			            $extra_data['home_visit'][$cf_data['id']] = $cf_data;
            			            $cfs[$date]++;
        			            }
        			        }
        			    }
        			}
			    }
			}

			if($_REQUEST['de'] == "1"){
				print_r($curent_sapv_type);
				var_dump($saved_data);
				var_dump($has_no_sapv);
			}
			
			
			if(!$saved_data)
			{
				if($has_no_sapv === false)
				{
					if($curent_sapv_type == "1") // only BE
					{
						$rp_asses = Rpassessment::get_patient_completed_rpassessment($ipid, $curent_period);
						
						if(!empty($rp_asses)){
							$rp_assessment_final[0] = $rp_asses[0];
							
							$v_assessment = $rp_assessment_final[0];
// 							foreach($rp_assessment_final as $k_assessment => $v_assessment)
// 							{
								$location_matched_price = $location_type_match[$pat_days2loctype[$v_assessment['completed_date']]];
							
								if(strlen($location_matched_price) > 0)
								{
									//found saved data for day of assessment completion
									if(strlen($saved_data['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price]))
									{
										$products['rp_eb_1']['qty_gr'][$location_matched_price] += $saved_data['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price];
										$products['rp_eb_1']['price'] = $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price];
										$products['rp_eb_1']['total'][$location_matched_price] = ($products['rp_eb_1']['total'][$location_matched_price] + ($saved_data_arr['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price] * $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price]));
										$products['rp_eb_1']['source']['saved_data'][$sapvday_loc_matched_price][$v_assessment['completed_date']] += $saved_data['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price];
										$excluded_saved_data_days['rp_eb_1'][] = $v_assessment['completed_date'];
									}
									//no saved data, load system data instead
									else
									{
										$products['rp_eb_1']['qty_gr'][$location_matched_price] += '1';
										$products['rp_eb_1']['price'] = $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price];
										$products['rp_eb_1']['total'][$location_matched_price] = ($products['rp_eb_1']['total'][$location_matched_price] + $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price]);
										$products['rp_eb_1']['source']['system_data'][$location_matched_price][$v_assessment['completed_date']] += '1';
									}
								}
// 							}
						}
						
						
						
						$visit_cnt['rp_doc_1'] = 0;
						$visit_cnt['rp_doc_2'] = 0;
						$visit_cnt['rp_doc_3'] = 0;
						$visit_cnt['rp_doc_4'] = 0;
						
						$visit_cnt['rp_nur_1'] = 0;
						$visit_cnt['rp_nur_2'] = 0;
						$visit_cnt['rp_nur_3'] = 0;
						$visit_cnt['rp_nur_4'] = 0;
						
						//DOCTOR and NURSE VISITS - all
						foreach($all_contact_forms as $k_cf => $v_cf)
						{
							//visit date formated
							$visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));
						
							//switch shortcut_type based on patient location for *visit* date
							$vday_matched_loc_price_type = $location_type_match[$pat_days2loctype[$visit_date]];
							if($_REQUEST['de'] == "1"){
								print_r($vday_matched_loc_price_type);
							}
							//switch shortcut doctor/nurse
							$shortcut_switch = false;
							if(in_array($v_cf['create_user'], $doctor_users))
							{
								$shortcut_switch = 'doc';
							}
							else if(in_array($v_cf['create_user'], $nurse_users))
							{
								$shortcut_switch = 'nur';
							}
						
							//create products (doc||nurse)
							if(strlen($vday_matched_loc_price_type) > 0 && $shortcut_switch && in_array($v_cf['form_type'], $set_one_ids)
							)
							{
								//DOCTOR VISITS - Vor- und Nachbereitung Arzt - price for the preparation of the doctor visit (no matter how long). ONCE per visit (rp_doc_2||rp_nur_2)
								if($ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type] != '0.00')
								{
									//overide with saved data
									if(strlen($saved_data['rp_' . $shortcut_switch . '_2'][$visit_date][$vday_matched_loc_price_type]) > '0')
									{
										$products['rp_' . $shortcut_switch . '_2']['qty_gr'][$vday_matched_loc_price_type] += $saved_data['rp_' . $shortcut_switch . '_2'][$visit_date][$vday_matched_loc_price_type];
										$products['rp_' . $shortcut_switch . '_2']['price'] = $ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type];
										$products['rp_' . $shortcut_switch . '_2']['extra_data'] = $v_cf;
										$extra_data['home_visit'][$v_cf['id']] = $v_cf;
										$products['rp_' . $shortcut_switch . '_2']['total'][$vday_matched_loc_price_type] = ($products['rp_' . $shortcut_switch . '_2']['total'][$vday_matched_loc_price_type] + ($saved_data['rp_' . $shortcut_switch . '_2'][$visit_date][$vday_matched_loc_price_type] * $ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type]));
										$excluded_saved_data_days['rp_' . $shortcut_switch . '_2'][] = $visit_date;
									}
									else
									{
										
										if($visit_cnt['rp_' . $shortcut_switch . '_2'] == 0 ){
											$products['rp_' . $shortcut_switch . '_2']['qty_gr'][$vday_matched_loc_price_type] += 1;
											$extra_data['home_visit'][$v_cf['id']] = $v_cf;
											$products['rp_' . $shortcut_switch . '_2']['price'] = $ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type];
											$products['rp_' . $shortcut_switch . '_2']['total'][$vday_matched_loc_price_type] = ($products['rp_' . $shortcut_switch . '_2']['total'][$vday_matched_loc_price_type] + $ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type]);
											$visit_cnt['rp_' . $shortcut_switch . '_2']++;
											
											$prod_vis_ident[$shortcut_switch][] = $v_cf['id'];
										}
									}
						
						
									$shortcut = '';
									$qty[$vday_matched_loc_price_type] = '';
								}
						
								//DOCTOR VISITS - Ärztlicher Hausbesuch - price for the doctor visit from minute 20 - 45 (rp_doc_1||rp_nur_1)
								if($v_cf['visit_duration'] >= '0')
								{
									$shortcut = 'rp_' . $shortcut_switch . '_1';
									$qty[$vday_matched_loc_price_type] = '1';
						
									if($shortcut && $qty[$vday_matched_loc_price_type] && $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] != '0.00')
									{
										//overide with saved data
										if(strlen($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type]) > '0')
										{
											$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type];
											$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
											$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type] * $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type]));
											$excluded_saved_data_days[$shortcut][] = $visit_date;
										}
										else
										{
											if($visit_cnt[$shortcut] == 0  && in_array($v_cf['id'],$prod_vis_ident[$shortcut_switch])){
												$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $qty[$vday_matched_loc_price_type];
												$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
												$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] * $qty[$vday_matched_loc_price_type]));
												$visit_cnt[$shortcut]++;
												
										 
											}
										}
									}
									$shortcut = '';
								}
						
								//DOCTOR VISITS - Zusatzentgeld Arzt - for EVERY 15 minutes more from minute 61 this product is added. (doctor) (rp_doc_3||rp_nur_3)
								if($v_cf['visit_duration'] > '45')
								{
									// calculate multiplier of 15 minutes after 60 min (round up)
									// ISPC-2006 29.06.2017 :: From 60 was changed to 45
									// calculate multiplier of 15 minutes after 45 min (round up)
									
									$shortcut = 'rp_' . $shortcut_switch . '_3';
									$multiplier = ceil(($v_cf['visit_duration'] - 45) / 15);
									$qty[$vday_matched_loc_price_type] = $multiplier; //multiplier value
						
									if($shortcut && $qty[$vday_matched_loc_price_type] && $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] != '0.00')
									{
						
										//overide with saved data
										if(strlen($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type]) > '0')
										{
											$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type];
											$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
											$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type] * $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type]));
											$excluded_saved_data_days[$shortcut][] = $visit_date;
										}
										else
										{
											if($visit_cnt[$shortcut] == 0  && in_array($v_cf['id'],$prod_vis_ident[$shortcut_switch])){
												$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $qty[$vday_matched_loc_price_type];
												$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
												$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] * $qty[$vday_matched_loc_price_type]));
												$visit_cnt[$shortcut]++;
											}
										}
									}
									$shortcut = '';
								}
						
								//DOCTOR VISITS - Abschlag Arzt - reduction of the doctor visit price when visit is shorter than 20 minutes.(rp_doc_4||||rp_nur_4)
								if($v_cf['visit_duration'] < '20')
								{
									$shortcut = 'rp_' . $shortcut_switch . '_4';
									$qty[$vday_matched_loc_price_type] = '1';
						
									if($shortcut && $qty[$vday_matched_loc_price_type] && $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] != '0.00')
									{
										//overide with saved data
										if(strlen($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type]) > '0')
										{
											$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type];
											$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
											$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type] * $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type]));
											$excluded_saved_data_days[$shortcut][] = $visit_date;
										}
										else
										{
											if($visit_cnt[$shortcut] == 0  && in_array($v_cf['id'],$prod_vis_ident[$shortcut_switch])){
												$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $qty[$vday_matched_loc_price_type];
												$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
												$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] * $qty[$vday_matched_loc_price_type]));
												$visit_cnt[$shortcut]++;
											}
										}
									}
									$shortcut = '';
								}
							}
						}
						
					}
					else
					{
						
						//--if the next admission is within 28 days after the Beratung admission, NO assessment is again billed
						//--if the next admission is AFTER 28 days after the Beratung admission, a "reduziertes Assessment" is only billed
						
						
							if($bill_assessment == "1"){
								//GATHER INVOICE ITEMS START
								//Ebene 1 (Assessment / Beratung) - RP-Assessment marked as completed
								$rp_asses = Rpassessment::get_patient_completed_rpassessment($ipid, $curent_period);
			
								foreach($rp_asses as $k_assessment => $v_assessment)
								{
									$location_matched_price = $location_type_match[$pat_days2loctype[$v_assessment['completed_date']]];
			
									if(strlen($location_matched_price) > 0)
									{
										//found saved data for day of assessment completion
										if(strlen($saved_data['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price]))
										{
											$products['rp_eb_1']['qty_gr'][$location_matched_price] += $saved_data['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price];
											$products['rp_eb_1']['price'] = $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price];
											$products['rp_eb_1']['total'][$location_matched_price] = ($products['rp_eb_1']['total'][$location_matched_price] + ($saved_data_arr['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price] * $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price]));
											$products['rp_eb_1']['source']['saved_data'][$sapvday_loc_matched_price][$v_assessment['completed_date']] += $saved_data['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price];
											$excluded_saved_data_days['rp_eb_1'][] = $v_assessment['completed_date'];
										}
										//no saved data, load system data instead
										else
										{
											$products['rp_eb_1']['qty_gr'][$location_matched_price] += '1';
											$products['rp_eb_1']['price'] = $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price];
											$products['rp_eb_1']['total'][$location_matched_price] = ($products['rp_eb_1']['total'][$location_matched_price] + $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price]);
											$products['rp_eb_1']['source']['system_data'][$location_matched_price][$v_assessment['completed_date']] += '1';
										}
									}
								}
							} 
							else
							{
								//Ebene 1 (reduziertes Assessment) - Not used yet (saved data for this shortcut as is not calculated by system)
								if($bill_secondary_assessment == "1"){
									$rp_asses = Rpassessment::get_patient_completed_rpassessment($ipid, $curent_period);
				
									foreach($rp_asses as $k_assessment => $v_assessment)
									{
										$location_matched_price = $location_type_match[$pat_days2loctype[$v_assessment['completed_date']]];
				
										if(strlen($location_matched_price) > 0)
										{
											//found saved data for day of assessment completion
											if(strlen($saved_data['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price]))
											{
												$products['rp_eb_2']['qty_gr'][$location_matched_price] += $saved_data['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price];
												$products['rp_eb_2']['price'] = $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price];
												$products['rp_eb_2']['total'][$location_matched_price] = ($products['rp_eb_1']['total'][$location_matched_price] + ($saved_data_arr['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price] * $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price]));
												$products['rp_eb_2']['source']['saved_data'][$sapvday_loc_matched_price][$v_assessment['completed_date']] += $saved_data['rp_eb_1'][$v_assessment['completed_date']][$location_matched_price];
												$excluded_saved_data_days['rp_eb_1'][] = $v_assessment['completed_date'];
											}
											//no saved data, load system data instead
											else
											{
												$products['rp_eb_2']['qty_gr'][$location_matched_price] += '1';
												$products['rp_eb_2']['price'] = $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price];
												$products['rp_eb_2']['total'][$location_matched_price] = ($products['rp_eb_1']['total'][$location_matched_price] + $ppl[$v_assessment['completed_date']][0]['rp_eb_1'][$location_matched_price]);
												$products['rp_eb_2']['source']['system_data'][$location_matched_price][$v_assessment['completed_date']] += '1';
											}
										}
									}
								}
							}
							
							
							//Ebene 2 - the daily added price when patient is active and has Verordnung
							$sapv_days = $patientmaster->getDaysInBetween($curent_sapv_from, $curent_sapv_till);
							$sapv_days = array_values(array_unique($sapv_days));
		
							foreach($sapv_days as $k_sapv_day => $v_sapv_day)
							{
								$sapvday_loc_matched_price = $location_type_match[$pat_days2loctype[$v_sapv_day]];
		
								if(strlen($sapvday_loc_matched_price) > 0 && $ppl[$v_sapv_day][0]['rp_eb_3'][$sapvday_loc_matched_price] != '0.00')
								{
									if(strlen($saved_data['rp_eb_3'][$v_sapv_day][$sapvday_loc_matched_price]) > '0')
									{
										$products['rp_eb_3']['qty_gr'][$sapvday_loc_matched_price] += $saved_data['rp_eb_3'][$v_sapv_day][$sapvday_loc_matched_price];
										$products['rp_eb_3']['price'] = $ppl[$v_sapv_day][0]['rp_eb_3'][$sapvday_loc_matched_price];
										$products['rp_eb_3']['source']['saved_data'][$sapvday_loc_matched_price][$v_sapv_day] += $saved_data['rp_eb_3'][$v_sapv_day][$sapvday_loc_matched_price];
										$excluded_saved_data_days['rp_eb_3'][] = $v_sapv_day;
									}
									else
									{
										$products['rp_eb_3']['qty_gr'][$sapvday_loc_matched_price] += 1;
										$products['rp_eb_3']['price'] = $ppl[$v_sapv_day][0]['rp_eb_3'][$sapvday_loc_matched_price];
										$products['rp_eb_3']['source']['system_data'][$sapvday_loc_matched_price][$v_sapv_day] += '1';
									}
		
									$products['rp_eb_3']['total'][$sapvday_loc_matched_price] = ($products['rp_eb_3']['qty_gr'][$sapvday_loc_matched_price] * $ppl[$v_sapv_day][0]['rp_eb_3'][$sapvday_loc_matched_price]);
								}
							}
		
							//DOCTOR and NURSE VISITS - all
							foreach($all_contact_forms as $k_cf => $v_cf)
							{
								//visit date formated
								$visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));
		
								//switch shortcut_type based on patient location for *visit* date
								$vday_matched_loc_price_type = $location_type_match[$pat_days2loctype[$visit_date]];
		
								//switch shortcut doctor/nurse
								$shortcut_switch = false;
								if(in_array($v_cf['create_user'], $doctor_users))
								{
									$shortcut_switch = 'doc';
								}
								else if(in_array($v_cf['create_user'], $nurse_users))
								{
									$shortcut_switch = 'nur';
								}
		
								//create products (doc||nurse)
								if(strlen($vday_matched_loc_price_type) > 0 && $shortcut_switch && in_array($v_cf['form_type'], $set_one_ids)
								)
								{
									//DOCTOR VISITS - Vor- und Nachbereitung Arzt - price for the preparation of the doctor visit (no matter how long). ONCE per visit (rp_doc_2||rp_nur_2)
									if($ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type] != '0.00')
									{
										//overide with saved data
										if(strlen($saved_data['rp_' . $shortcut_switch . '_2'][$visit_date][$vday_matched_loc_price_type]) > '0')
										{
											$products['rp_' . $shortcut_switch . '_2']['qty_gr'][$vday_matched_loc_price_type] += $saved_data['rp_' . $shortcut_switch . '_2'][$visit_date][$vday_matched_loc_price_type];
											$products['rp_' . $shortcut_switch . '_2']['price'] = $ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type];
											$products['rp_' . $shortcut_switch . '_2']['extra_data'] = $v_cf;
											$extra_data['home_visit'][$v_cf['id']] = $v_cf;
											$products['rp_' . $shortcut_switch . '_2']['total'][$vday_matched_loc_price_type] = ($products['rp_' . $shortcut_switch . '_2']['total'][$vday_matched_loc_price_type] + ($saved_data['rp_' . $shortcut_switch . '_2'][$visit_date][$vday_matched_loc_price_type] * $ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type]));
											$excluded_saved_data_days['rp_' . $shortcut_switch . '_2'][] = $visit_date;
										}
										else
										{
											$products['rp_' . $shortcut_switch . '_2']['qty_gr'][$vday_matched_loc_price_type] += 1;
											$extra_data['home_visit'][$v_cf['id']] = $v_cf;
											$products['rp_' . $shortcut_switch . '_2']['price'] = $ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type];
											$products['rp_' . $shortcut_switch . '_2']['total'][$vday_matched_loc_price_type] = ($products['rp_' . $shortcut_switch . '_2']['total'][$vday_matched_loc_price_type] + $ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type]);
										}
		
		
										$shortcut = '';
										$qty[$vday_matched_loc_price_type] = '';
									}
		
									//DOCTOR VISITS - Ärztlicher Hausbesuch - price for the doctor visit from minute 20 - 45 (rp_doc_1||rp_nur_1)
									if($v_cf['visit_duration'] >= '0')
									{
										$shortcut = 'rp_' . $shortcut_switch . '_1';
										$qty[$vday_matched_loc_price_type] = '1';
		
										if($shortcut && $qty[$vday_matched_loc_price_type] && $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] != '0.00')
										{
											//overide with saved data
											if(strlen($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type]) > '0')
											{
												$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type];
												$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
												$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type] * $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type]));
												$excluded_saved_data_days[$shortcut][] = $visit_date;
											}
											else
											{
												$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $qty[$vday_matched_loc_price_type];
												$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
												$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] * $qty[$vday_matched_loc_price_type]));
												
												
											}
										}
									}
		
									//DOCTOR VISITS - Zusatzentgeld Arzt - for EVERY 15 minutes more from minute 61 this product is added. (doctor) (rp_doc_3||rp_nur_3)
									if($v_cf['visit_duration'] > '45')
									{
									// calculate multiplier of 15 minutes after 60 min (round up)
									// ISPC-2006 29.06.2017 :: From 60 was changed to 45
									// calculate multiplier of 15 minutes after 45 min (round up)
									
										$shortcut = 'rp_' . $shortcut_switch . '_3';
										$multiplier = ceil(($v_cf['visit_duration'] - 45) / 15);
										$qty[$vday_matched_loc_price_type] = $multiplier; //multiplier value
		
										if($shortcut && $qty[$vday_matched_loc_price_type] && $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] != '0.00')
										{
		
											//overide with saved data
											if(strlen($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type]) > '0')
											{
												$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type];
												$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
												$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type] * $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type]));
												$excluded_saved_data_days[$shortcut][] = $visit_date;
											}
											else
											{
												$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $qty[$vday_matched_loc_price_type];
												$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
												$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] * $qty[$vday_matched_loc_price_type]));
											}
										}
									}
		
									//DOCTOR VISITS - Abschlag Arzt - reduction of the doctor visit price when visit is shorter than 20 minutes.(rp_doc_4||||rp_nur_4)
									if($v_cf['visit_duration'] < '20')
									{
										$shortcut = 'rp_' . $shortcut_switch . '_4';
										$qty[$vday_matched_loc_price_type] = '1';
		
										if($shortcut && $qty[$vday_matched_loc_price_type] && $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] != '0.00')
										{
											//overide with saved data
											if(strlen($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type]) > '0')
											{
												$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type];
												$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
												$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($saved_data[$shortcut][$visit_date][$vday_matched_loc_price_type] * $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type]));
												$excluded_saved_data_days[$shortcut][] = $visit_date;
											}
											else
											{
												$products[$shortcut]['qty_gr'][$vday_matched_loc_price_type] += $qty[$vday_matched_loc_price_type];
												$products[$shortcut]['price'] = $ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type];
												$products[$shortcut]['total'][$vday_matched_loc_price_type] = ($products[$shortcut]['total'][$vday_matched_loc_price_type] + ($ppl[$visit_date][0][$shortcut][$vday_matched_loc_price_type] * $qty[$vday_matched_loc_price_type]));
											}
										}
									}
								}
							}
		
							//Fallabschluss - patient death coordination. added once (rp_pat_dead)
							if(strlen($discharge_dead_date) > 0)
							{
								//visit date formated
								$visit_date = date('Y-m-d', strtotime($discharge_dead_date));
		
								//switch shortcut_type based on patient location for *visit* date
								$dead_matched_loc_price_type = $location_type_match[$pat_days2loctype[$discharge_dead_date]];
								$qty[$dead_matched_loc_price_type] = '1';
		
								if($dead_matched_loc_price_type && $ppl[$visit_date][0]['rp_pat_dead'][$dead_matched_loc_price_type] != '0.00')
								{
									//overide with saved data
									if(strlen($saved_data['rp_pat_dead'][$visit_date][$dead_matched_loc_price_type]) > '0')
									{
										$products['rp_pat_dead']['qty_gr'][$dead_matched_loc_price_type] += $saved_data['rp_pat_dead'][$visit_date][$dead_matched_loc_price_type];
										$products['rp_pat_dead']['price'] = $ppl[$visit_date][0]['rp_pat_dead'][$dead_matched_loc_price_type];
										$products['rp_pat_dead']['total'][$dead_matched_loc_price_type] = ($products['rp_pat_dead']['total'][$dead_matched_loc_price_type] + ($saved_data['rp_pat_dead'][$visit_date][$dead_matched_loc_price_type] * $ppl[$visit_date][0]['rp_pat_dead'][$dead_matched_loc_price_type]));
										$excluded_saved_data_days['rp_pat_dead'][] = $visit_date;
									}
									else
									{
										$products['rp_pat_dead']['qty_gr'][$dead_matched_loc_price_type] += $qty[$dead_matched_loc_price_type];
										$products['rp_pat_dead']['price'] = $ppl[$discharge_dead_date][0]['rp_pat_dead'][$dead_matched_loc_price_type];
										$products['rp_pat_dead']['total'][$dead_matched_loc_price_type] = ($products['rp_pat_dead']['total'][$dead_matched_loc_price_type] + ($ppl[$visit_date][0]['rp_pat_dead'][$dead_matched_loc_price_type] * $qty[$dead_matched_loc_price_type]));
									}
								}
								//GATHER INVOICE ITEMS END
							}
					}
				}
				else
				{
					//reset date values
					$this->view->curent_sapv_from = '';
					$this->view->curent_sapv_till = '';
					$this->view->invoice_date_from = '';
					$this->view->invoice_date_till = '';
				}
			}

			//append the rest of saved data for existing invoiced sapv days
//			print_r("products I\n");
// 			print_r($products); exit;
			//removed rp_eb_3 from shortcuts arr because is allready calculated
			$shortcuts_array = array('rp_eb_1', 'rp_eb_2', 'rp_doc_1', 'rp_doc_2', 'rp_doc_3', 'rp_doc_4', 'rp_nur_1', 'rp_nur_2', 'rp_nur_3', 'rp_nur_4', 'rp_pat_dead');
			foreach($shortcuts_array as $k_short => $v_short)
			{
				foreach($sapv_days as $k_sapv_day => $vsapv_day)
				{
					$sapv_day_loc_matched_price = $location_type_match[$pat_days2loctype[$vsapv_day]];

					if(!in_array($vsapv_day, $excluded_saved_data_days[$v_short]) && !in_array($vsapv_day, $second_exclude[$v_short][$sapv_day_loc_matched_price]) && $ppl[$vsapv_day][0][$v_short][$sapv_day_loc_matched_price] != '0.00' && strlen($saved_data[$v_short][$vsapv_day][$sapv_day_loc_matched_price]) > 0
					)
					{
						$products[$v_short]['qty_gr'][$sapv_day_loc_matched_price] += $saved_data[$v_short][$vsapv_day][$sapv_day_loc_matched_price];
						$products[$v_short]['price'] = $ppl[$vsapv_day][0][$v_short][$sapv_day_loc_matched_price];
						$products[$v_short]['total'][$sapv_day_loc_matched_price] = ($products[$v_short]['qty_gr'][$sapv_day_loc_matched_price] * $ppl[$vsapv_day][0][$v_short][$sapv_day_loc_matched_price]);
						$second_exclude[$v_short][$sapv_day_loc_matched_price][] = $vsapv_day;
					}
				}
			}
			if($_REQUEST['de'] == "1"){
				print_r($products);
				print_r($all_contact_forms);
				exit;
			}
			$this->view->items = $products;
// 			print_r($products); exit;
//			print_r("products II\n");
//			if($_REQUEST['dbgqz'])
//			{
//
//				print_r("saved_data\n");
//				print_r($saved_data);
//
//				print_r("excluded dates\n");
//				print_r($excluded_saved_data_days);
//
//				print_r("saved_data_arr\n");
//				print_r($saved_data_arr);
//				exit;
//			}
			$client_form_type =  FormTypeActions::get_form_type_actions();

            foreach($all_forms as $k=>$ft){
                $form2action[$ft['id']] = $client_form_type[$ft['action']]['name']; 
            }
// sort $extra_data
            
            usort($extra_data['home_visit'], array(new Pms_Sorter('billable_date'), "_date_compare"));
//            $extra_data['home_visit'] = array_reverse($extra_data['home_visit']);

			if($this->getRequest()->isPost())
			{
				//export pdf
				if($_POST['pdf'])
				{

				    
					$post = $_POST;
					$post['clientid'] = $clientid;
					$post['shortcuts'] = $shortcuts['rp'];
					$post['items'] = $products;
					
					$post['extra_data'] = $extra_data;
					$post['users_array'] = $user_array ;
					$post['client_details'] = $this->view->client_details ;
					$post['client_form_type'] = $client_form_type;
					$post['form2action'] = $form2action;
					
					$post['alias']['home_visit'] = "Hausbesuch";
					$post['alias']['beratung'] = "Beratung";
					$post['alias']['koordination'] = "Koordination";
					
					$post['epid'] = $patient_epid;
					
					if($_REQUEST['dbg'] == "extra_data"){
						print_r($extra_data); exit;
					}
					if($_REQUEST['version'] == "old"){
					    $this->generate_pdf($post, "rpinvoice", "rpinvoice_pdf.html", 'P');
					} 
					else
					{
					    
					    $this->_helper->layout->setLayout('layout_ajax');
					    $this->_helper->viewRenderer->setNoRender();
					    
					    
    // 					$template_files = array('rpinvoice_pdf.html', 'rp_invoice_items.html');// This is per patient - invoice
    // 					$background_pages = array('0'); //0 is first page;
    					
    // 					$orientation = array('P', 'P');
    // 					$this->generate_pdf($post, "rpinvoice", "rpinvoice_pdf.html", 'P');
    // 					$this->generate_pdf($post, "RP_invoice_items", $template_files, $orientation, $background_pages);// This is per patient - invoice
    					
    					$files[] = $this->generate_joined_files_pdf(4,$post,'rpinvoice',"rpinvoice_pdf.html");
    					if(!empty($extra_data))
    					{
        					$files[] = $this->generate_joined_files_pdf(4,$post,'RP_invoice_items',"rp_invoice_items.html");
    					}
    					
    					//Final step merge generated files!
    					$patient_data['ipid'] = $ipid;
    					$patient_data['epid'] = $patient_epid;
    					$patient_data['invoice_full_number']= 'TEMP_'.$patient_epid;//TODO-3490
    					$source = 'Rp_invoice_and_items';
    					ob_end_clean();//TODO-3490
    					$this->join_pdfs_new($files, $patient_data, $source);
					}
					
				}
				else if($_POST['save'])
				//save invoice
				{
					if($rp_invoices_form->validate($_POST))
					{
						$post = $_POST;
						$post['ipid'] = $ipid;
						$post['items'] = $this->view->items;
						$create_rp_invoice = $rp_invoices_form->create_invoice($clientid, $post);

						if($create_rp_invoice)
						{
							$this->_redirect(APP_BASE . 'invoice/rpinvoice?id=' . $_REQUEST['id']); //to avoid resubmission and load new data
							exit;
						}
					}
					else
					{
						$rp_invoices_form->assignErrorMessages();
						$this->retainValues($_POST);
					}
				}
			}
		}

		//ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
		function rpinvoiceslistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$rp_invoices = new RpInvoices();
			$rp_invoices_items = new RpInvoiceItems();
			$rp_invoices_form = new Application_Form_RpInvoices();

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}

			//ISPC-2609 Ancuta 24.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "rp_invoice";
			$userid = $logininfo->userid;
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			
			
			$this->view->print_html = '';
			if(count($invoice_user_printjobs) > 1 ){
			    //echo $print_html;
			    $this->view->print_html = $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			if($this->getRequest()->isPost())
			{
				if($_POST['draftmore'] == "1")
				{
					$transform = $rp_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $rp_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				elseif($_POST['warningmore'] == "1")
				{
					$invoiceids_to_warn = implode(',', $_POST['document']);
				
					$this->forward('generatereminderinvoice', 'Invoicenew', null, array());
				
					return;
				}
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				elseif($_POST['batch_print_more'])
				{
				    $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
				    $params['batch_print'] = '1'; //enables batch print procedure
				    $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
				    $params['get_pdf'] = '0'; //stops downloading single pdf
				    
				    //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
				    if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
				        
				        
				        
				    } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
				        
				        $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
				        
				        $print_job_data = array();
				        $print_job_data['clientid'] = $clientid;
				        $print_job_data['user'] = $userid;
				        $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
				        $print_job_data['output_type'] = 'pdf';
				        $print_job_data['status'] = 'active';
				        $print_job_data['invoice_type'] = 'rp_invoice';
				        $print_job_data['print_params'] = serialize($params);
				        $print_job_data['print_function'] = 'editrpinvoiceAction';
				        $print_job_data['print_controller'] = "invoice";
				        
				        foreach($_POST['document'] as $k=>$inv_id){
				            $print_job_data['PrintJobsItems'][] = array(
				                'clientid'=>$print_job_data['clientid'],
				                'user'=>$print_job_data['user'],
				                'invoice_id'=>$inv_id,
				                'invoice_type'=>$print_job_data['invoice_type'],
				                'status'=>"new"
				            );
				        }
				        
				        $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
				        $print_id = $PrintJobsBulk_obj->id;
				        
				        if($print_id){
				            $this->__StartPrintJobs();
				        }
				    }
				    
				}
				else
				{
					$new_payment = $rp_invoices_form->submit_payment($_POST);
				}
				$this->_redirect(APP_BASE . 'invoice/rpinvoiceslist'); //to avoid resubmission
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$clone_record = $rp_invoices->create_storno_invoice($invoiceid);
					//ISPC-2312 Ancuta 07.12.2020
					if($_REQUEST['redirect2new'] == '1'){
					    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=rpinvoice');
					    exit();
					}
					//--
					$this->_redirect(APP_BASE . 'invoice/rpinvoiceslist?flg=suc');
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $rp_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/rpinvoiceslist?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/rpinvoiceslist?flg=delerr');
				}
			}




			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
		}

		function fetchrpinvoicelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$rp_invoices_payments = new RpInvoicePayments();
			$users = new User();
			$warnings = new RemindersInvoice();
			$modules = new Modules();
			
			if($modules->checkModulePrivileges("170", $clientid))
			{
				$this->view->create_bulk_warnings = "1";
			}
			else
			{
				$this->view->create_bulk_warnings = "0";
			}
			
			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*, DATE_ADD(`completed_date`,INTERVAL 2 WEEK) as test_date")
				->from('RpInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);


			//process tabs
			$filters['rpinvoice_search'] = '';

			switch($_REQUEST['f_status'])
			{

				case 'draft':
					$filters['rpinvoice'] = ' AND status ="1" AND isdelete=0';
					break;

				case 'unpaid':
					$filters['rpinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';

					break;

				case 'paid':
					$filters['rpinvoice'] = ' AND status="3"  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND isdelete=0';
					break;

				case 'deleted':
					$filters['rpinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['rpinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND DATE(NOW()) > DATE(DATE_ADD(`completed_date`,INTERVAL 2 WEEK)) AND isdelete=0';
					break;

				case 'all':
					$filters['rpinvoice'] = ' ';
					break;

				default: // unpaid- open
					$filters['rpinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';
					break;
			}


			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['rpinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['rpinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['rpinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['rpinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "p.id,e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "p.id,e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);
			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
				$patients_encrypted_ids[$v_f_pat_res['EpidIpidMapping']['ipid']] = Pms_Uuid::encrypt($v_f_pat_res['id']);
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('RpInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['rpinvoice_search']);

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();

			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime("+2 weeks", strtotime($v_inv2count['completed_date'])))
				{
					$status_count_invoices["overdue"][] = '1';
				}
				$status_count_invoices["all"][] = '1';
			}

			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('RpInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['rpinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}
			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('RpInvoices')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['rpinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";

			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
					//RpInvoices
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [OLD] 
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*,  IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort,concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('RpInvoices')
				->where("client='" . $clientid . "'" . $filters['rpinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
				$invoicelimit[$k_il]['patient_id'] = $patients_encrypted_ids[$v_il['ipid']];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $rp_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);
			
			$all_warnings = $warnings->get_reminders($invoice_ids, 'rp_invoice', $clientid);
				
			foreach ($invoicelimit as &$row) {
				if (isset($all_warnings[$row['id']])) {
					$row['InvoiceWarnings'] = $all_warnings[$row['id']];
				}
			}
			//var_dump($invoicelimit); exit;

			$this->view->storned_invoces = RpInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function rplistpaymentsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$rpinvoices = new RpInvoices();
			$rppayments = new RpInvoicePayments();
			$rpinvoice_form = new Application_Form_RpInvoices();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $rppayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $rppayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $rppayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $rpinvoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						//					print_r($status."\n\n");
						$update_status = $rpinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
						//					print_r($update_status);
					}

					//reload the payments
					unset($payments);
					$payments = $rppayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoice/helistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
		public function editrpinvoiceAction($params = array())
		{
			setlocale(LC_TIME, 'de_DE.UTF8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			//$clientid = $logininfo->clientid;
			if(isset($params) && !empty($params) && $params['bulk_print'] == 1){
			    $_REQUEST = $params;
			    $_REQUEST['pdf'] = 1;
			    $_REQUEST['mode'] = null;
			    $this->_helper->viewRenderer->setNoRender();
			}
			
			//ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
			$clientid = isset($_REQUEST['clientid']) && ! empty($_REQUEST['clientid']) ? $_REQUEST['clientid'] :  $logininfo->clientid;
			$userid = isset($_REQUEST['userid']) && ! empty($_REQUEST['userid']) ? $_REQUEST['userid'] : $logininfo->userid;
			
			$client_details = new Client();
			$user = new User();
			$rp_invoices = new RpInvoices();
			$rp_invoices_items = new RpInvoiceItems();
			$usergroups = new Usergroup();
			$rp_invoices_form = new Application_Form_RpInvoices();

			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$this->view->shortcuts = $shortcuts['rp'];
			
			
			//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
			if($_REQUEST['bulk_print'] == '1' && strlen($_REQUEST['invoiceid']) > 0){
			    $invoice_details = $rp_invoices->getRpInvoice($_REQUEST['invoiceid']);
			    if($invoice_details['storno'] == '1'){
			        $_REQUEST['invoiceid'] = $invoice_details['record_id'];
			        $_REQUEST['stornopdf'] = 1;
			        $_REQUEST['storno'] = $invoice_details['id'];
			    }
			}
			//--
			
			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $rp_invoices->getRpInvoice($invoice_id);

// 				print_r($invoice_data); exit;
				
				$curent_period['start'] = date('Y-m-d',strtotime($invoice_data['invoice_start']));
				$curent_period['end'] =  date('Y-m-d',strtotime($invoice_data['invoice_end']));
				
				
				// Patient details
                $ipid = $invoice_data['ipid'];
				$patient_epid = strtoupper(Pms_CommonData::getEpid($ipid));
				
				// get active days of patient
				$conditions['periods'][0]['start'] = $curent_period['start'];
				$conditions['periods'][0]['end'] = $curent_period['end'];
				$conditions['client'] = $clientid;
				$conditions['ipids'] = array($ipid);
				$patient_days = Pms_CommonData::patients_days($conditions);
					
				
				
				//get patient locations and construct day2location_type arr
				$pat_locations = PatientLocation::get_period_locations($ipid, $curent_period);
				
				
				foreach($pat_locations as $k_pat => $v_pat)
				{
					if($v_pat['discharge_location'] == "0")
					{
						foreach($v_pat['all_days'] as $k_day => $v_day)
					    {
					        if(in_array(date("d.m.Y",strtotime($v_day)),$patient_days[$ipid]['real_active_days']) )
					        { // allow only location days that are included in patient active days
					            $pat_days2loctype[$v_day] = $v_pat['master_details']['location_type'];
					        }
					    }
					}
				}
				
				// Client details 
				$client_details = $client_details->getClientDataByid($invoice_data['client']);
				
				// Groups  details
				//ISPC-2134 - 19.12.2018
				$client_usergroups_array = $usergroups->getClientGroups($invoice_data['client']);
				
				$ug_details = array();
				foreach($client_usergroups_array as $k=>$group_data){
					$ug_details[$group_data['id']] = $group_data;
				}
				
				// User details
				$client_user_array = $user->getUserByClientid($clientid,0,true,false);
				foreach($client_user_array as $k=>$cu)
				{
				    $user_array[$cu['id']] = $cu;
				    $user_array[$cu['id']]['groupname'] = $ug_details[$cu['groupid']]['groupname'];
				    if(strlen($cu['shortname']) >  0){
				        $user_array[$cu['id']]['initials'] = $cu['shortname'];
				    }
				    else
				    {
				        $user_array[$cu['id']]['initials'] = mb_substr($cu['first_name'], 0, 1, "UTF-8") . "" . mb_substr($cu['last_name'], 0, 1, "UTF-8");
				    }
				}
				
				// price list details
                $shortcuts = Pms_CommonData::get_prices_shortcuts();
                $default_price_list = Pms_CommonData::get_default_price_shortcuts();
                $ppl = PriceList::get_period_price_list($invoice_data['invoice_start'], $invoice_data['invoice_end'],$clientid);
                $location_type_match = Pms_CommonData::get_rp_price_mapping();
				
				// Contact form details
				
				//get used form types
				$form_types = new FormTypes();
				$all_forms = $form_types->get_form_types($clientid);
				$set_one = $form_types->get_form_types($clientid, '1');
				foreach($set_one as $k_set_one => $v_set_one)
				{
				    $set_one_ids[] = $v_set_one['id'];
				}

				$client_form_type =  FormTypeActions::get_form_type_actions();
				
				foreach($all_forms as $k=>$ft){
				    $form2action[$ft['id']] = $client_form_type[$ft['action']]['name'];
				}
				
				//get doctor and nurse users
				//get all related users details
				$master_groups_first = array('4', '5');
					
				$client_user_groups_first = $usergroups->getUserGroups($master_groups_first,array($clientid));
					
				foreach($client_user_groups_first as $k_group_f => $v_group_f)
				{
				    $master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
				}
					
				$client_users = $user->getClientsUsers($clientid);
					
				$nurse_users = array();
				$doctor_users = array();
				foreach($client_users as $k_cuser_det => $v_cuser_det)
				{
				    $master_user_details[$v_cuser_det['id']] = $v_cuser_det;
				    if(in_array($v_cuser_det['groupid'], $master2client['5']))
				    {
				        $nurse_users[] = $v_cuser_det['id'];
				    }
				    else if(in_array($v_cuser_det['groupid'], $master2client['4']))
				    {
				        $doctor_users[] = $v_cuser_det['id'];
				    }
				}
					
				//get current contact forms
				$contact_forms = $this->get_period_contact_forms($ipid, $curent_period, false, true,false,$clientid);
				
				$saved_data = RpControl::get_rp_controlsheet($ipid, $curent_period['start'], $curent_period['end']);
				
				$doctor_contact_forms = array();
				$nurse_contact_forms = array();
					
				foreach($contact_forms as $kcf => $day_cfs)
				{
				    foreach($day_cfs as $k_dcf => $v_dcf)
				    {
				        $all_contact_forms[] = $v_dcf;
				    }
				}
				
				//DOCTOR and NURSE VISITS - all
				$extra_data= array();
				//TODO-3916 Ancuta 05.03.2021
				usort($all_contact_forms, array(new Pms_Sorter('billable_date'), "_date_compare"));
				///--
				foreach($all_contact_forms as $k_cf => $v_cf)
				{
				    //visit date formated
				    $visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));
				
				    //switch shortcut_type based on patient location for *visit* date
				    $vday_matched_loc_price_type = $location_type_match[$pat_days2loctype[$visit_date]];
				
				    //switch shortcut doctor/nurse
				    $shortcut_switch = false;
				    if(in_array($v_cf['create_user'], $doctor_users))
				    {
				        $shortcut_switch = 'doc';
				    }
				    else if(in_array($v_cf['create_user'], $nurse_users))
				    {
				        $shortcut_switch = 'nur';
				    }
				
				    //create products (doc||nurse)
				    if(strlen($vday_matched_loc_price_type) > 0 && $shortcut_switch && in_array($v_cf['form_type'], $set_one_ids))
				    {
				        //DOCTOR VISITS - Vor- und Nachbereitung Arzt - price for the preparation of the doctor visit (no matter how long). ONCE per visit (rp_doc_2||rp_nur_2)
				        if($ppl[$visit_date][0]['rp_' . $shortcut_switch . '_2'][$vday_matched_loc_price_type] != '0.00')
				        {
				            //overide with saved data
				            if(strlen($saved_data['rp_' . $shortcut_switch . '_2'][$visit_date][$vday_matched_loc_price_type]) > '0')
				            {
				                $extra_data['home_visit'][$v_cf['id']] = $v_cf;
				            }
				            else
				            {
				                $extra_data['home_visit'][$v_cf['id']] = $v_cf;
				            }
				
				            $shortcut = '';
				            $qty[$vday_matched_loc_price_type] = '';
				        }
				    }
				}
				
				if(!$invoice_data || empty($invoice_data))
				{
				    //ISPC-2312 Ancuta 07.12.2020
				    if($_REQUEST['redirect2new'] == '1'){
				        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=rpinvoice');
				        exit();
				    }
				    //--
					$this->_redirect(APP_BASE . 'invoice/rpinvoiceslist');
				}

				if(in_array($invoice_data['id'], RpInvoices::get_storned_invoices($clientid)))
				{
					$this->view->has_storno = '1';
				}
				else
				{
					$this->view->has_storno = '0';
				}

				foreach($invoice_data as $v_key => $v_value)
				{
					$this->view->$v_key = $v_value;
				}
			}
			

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}
				//delete items here if is the case

				if(empty($_REQUEST['pdf']) && $rp_invoices_form->validate($_POST))
				{
					if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
					{
						$high_invoice_nr = $rp_invoices->get_next_invoice_number($clientid);
						$_POST['prefix'] = $high_invoice_nr['prefix'];
						$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
					}
					else
					{
						$_POST['prefix'] = $invoice_data['prefix'];
						$_POST['invoice_number'] = $invoice_data['invoice_number'];
					}

					//save here
					$edit_invoice = $rp_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);

					if($edit_invoice)
					{
					    //ISPC-2312 Ancuta 07.12.2020
					    if($_REQUEST['redirect2new'] == '1'){
					        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=rpinvoice&flg=edtsuc');
					        exit();
					    }
					    //--
						$this->_redirect(APP_BASE . 'invoice/editrpinvoice?invoiceid=' . $_REQUEST['invoiceid'] . '&flg=edtsuc');
					}
					else
					{
					    //ISPC-2312 Ancuta 07.12.2020
					    if($_REQUEST['redirect2new'] == '1'){
					        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=rpinvoice&flg=edterr');
					        exit();
					    }
					    //--
						$this->_redirect(APP_BASE . 'invoice/editrpinvoice?invoiceid=' . $_REQUEST['invoiceid'] . '&flg=edterr');
					}
				}
				//pdf with data from db + post(buttons)
				else if(!empty($_REQUEST['pdf']) && !empty($_REQUEST['invoiceid']))
				{
					$pdf_data = $_POST;
					$pdf_data['shortcuts'] = $this->view->shortcuts;
					$pdf_data['items'] = $this->view->items;
					
					if($_REQUEST['version'] == "old"){
    					$this->generate_pdf($pdf_data, "rpinvoice", "rpinvoice_pdf.html", "P");
					}
					else
					{
					    $this->_helper->layout->setLayout('layout_ajax');
					    $this->_helper->viewRenderer->setNoRender();

					    $pdf_data['client_details'] = $client_details[0];
					    $pdf_data['extra_data'] = $extra_data;
					    $pdf_data['users_array'] = $user_array ;
					    $pdf_data['client_form_type'] = $client_form_type;
					    $pdf_data['form2action'] = $form2action;
					    	
					    $pdf_data['alias']['home_visit'] = "Hausbesuch";
					    $pdf_data['alias']['beratung'] = "Beratung";
					    $pdf_data['alias']['koordination'] = "Koordination";
					    
					    //ISPC-2745 Carmen 17.11.2020
					    //create batch name
					    $Batch_name = false;
					    $Batch_name = $pdf_data['prefix'].$pdf_data['invoice_number'];
					     
					    $template_data = InvoiceTemplates::get_template($clientid, false, '1', 'he_invoice');
					    
					    if($template_data)
					    {
					    	// generate invoice page
					    	$tokenfilter = array();
					    	$tokenfilter['invoice']['address'] = $pdf_data['patient_name'];
					    	//$tokenfilter['client']['city'] = $pdf_data['client_city'];
					    	$tokenfilter['client']['institutskennzeichen'] = $pdf_data['client_ik'];
					    	if($pdf_data['completed_date'] != "0000-00-00 00:00:00" && $pdf_data['completed_date'] != "1970-01-01 00:00:00")
					    	{
					    		$tokenfilter['invoice']['invoicedate'] = strftime('%A, %d. %B %Y', strtotime($pdf_data['completed_date']));
					    	}
					    	else
					    	{
					    		$tokenfilter['invoice']['invoicedate'] = '';
					    	}
					    	 
					    	$tokenfilter['invoice']['prefix'] = $pdf_data['prefix'];
					    	$tokenfilter['invoice']['invoicenumber'] = $pdf_data['invoice_number'];
					    	$tokenfilter['invoice']['full_invoice_number'] = $pdf_data['prefix'].$pdf_data['invoice_number'];
					    	/* if($pdf_data['first_active_day'] != "0000-00-00 00:00:00" && $pdf_data['first_active_day'] != "1970-01-01 00:00:00")
					    	 {
					    	 $tokenfilter['invoice']['first_active_day'] = date('d.m.Y', strtotime($pdf_data['first_active_day']));
					    	 }
					    	 else
					    	 {
					    	 $tokenfilter['invoice']['first_active_day'] = "-";
					    	 }
					    	 if($pdf_data['last_active_day'] != "0000-00-00 00:00:00" && $pdf_data['last_active_day'] != "1970-01-01 00:00:00")
					    	 {
					    	 $tokenfilter['invoice']['last_active_day'] = date('d.m.Y', strtotime($pdf_data['last_active_day']));
					    	 }
					    	 else
					    	 {
					    	 $tokenfilter['invoice']['last_active_day'] = "-";
					    	 } */
					    	 
					    	//$tokenfilter['invoice']['healthinsurancenumber'] = $pdf_data['insurance_no'];
					    	//$tokenfilter['invoice']['health_insurance_ik'] = $pdf_data['health_insurance_ik'];
					    	$tokenfilter['invoice']['healthinsurance_versnr'] = $pdf_data['versicherten_nr'];
					    	$tokenfilter['invoice']['healthinsurance_kassennr'] = $pdf_data['kassen_nr'];
					    	$tokenfilter['invoice']['healthinsurance_status'] = $pdf_data['status'];
					    	 
					    	$tokenfilter['familydoctor']['doctor_bsnr'] = $pdf_data['betriebsstatten_nr'];
					    	$tokenfilter['familydoctor']['doctor_lbnr'] = $pdf_data['arzt_nr'];
					    	$tokenfilter['invoice']['topdatum'] = $pdf_data['topdatum'];
					    
					    	$tokenfilter['invoice']['stample'] = $pdf_data['stample'];
					    
					    	if($pdf_data['sapv_erst'] == 1)
					    	{
					    		$tokenfilter['sapv']['sapv_erst'] = 'X';
					    	}
					    	else
					    	{
					    		$tokenfilter['sapv']['sapv_erst'] = '';
					    	}
					    
					    	if($pdf_data['sapv_folge'] == 1)
					    	{
					    		$tokenfilter['sapv']['sapv_folge'] = 'X';
					    	}
					    	else
					    	{
					    		$tokenfilter['sapv']['sapv_folge'] = '';
					    	}
					    
					    	$tokenfilter['sapv']['sapv_from'] = $pdf_data['curent_sapv_from'];
					    	$tokenfilter['sapv']['sapv_till'] = $pdf_data['curent_sapv_till'];
					    	$tokenfilter['invoice']['invoiced_period_start'] = $pdf_data['invoice_date_from'];
					    	$tokenfilter['invoice']['invoiced_period_end'] = $pdf_data['invoice_date_till'];
					    
					    	$tokenfilter['ionvoice']['main_diagnosis'] = $pdf_data['main_diagnosis'];
					    
					    	$tokenfilter['patient']['birthd'] = $pdf_data['geb'];
					    	//$tokenfilter['invoice']['patient_pflegestufe'] = $pdf_data['patient_pflegestufe'];
					    	//$tokenfilter['footer'] = $pdf_data['footer'];
					    	 
					    	/* if($pdf_data['healthinsurance_name'] != "")
					    	{
					    		$tokenfilter['healthinsurance']['healthinsurance_name'] = $pdf_data['krankenkasse'];
					    	}
					    	else
					    	{
					    		$tokenfilter['healthinsurance']['healthinsurance_name'] = "--";
					    	} */
					    
					    	/* $tokenfilter['invoice']['unique_id'] = $pdf_data['unique_id'];
					    
					    	if($pdf_data['current_period']['start'] != "0000-00-00 00:00:00" && $pdf_data['current_period']['start'] != "1970-01-01 00:00:00")
					    	{
					    		$tokenfilter['invoice']['invoice_period_start'] = date('d.m.Y', strtotime($pdf_data['current_period']['start']));
					    	}
					    	else
					    	{
					    		$tokenfilter['invoice']['invoice_period_start'] = "-";
					    	}
					    	if($pdf_data['current_period']['end'] != "0000-00-00 00:00:00" && $pdf_data['current_period']['end'] != "1970-01-01 00:00:00")
					    	{
					    		$tokenfilter['invoice']['invoice_period_end'] = date('d.m.Y', strtotime($pdf_data['current_period']['end']));
					    	}
					    	else
					    	{
					    		$tokenfilter['invoice']['invoice_period_end'] = "-";
					    	} */
					    	 
					    	/* if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'])
					    	 {
					    	 $tokenfilter['invoice']['invoiceamount'] = number_format($pdf_data['invoice_total'], '2', ',', '.');
					    	 }
					    	 else
					    	 {
					    	 $tokenfilter['invoice']['invoiceamount'] = number_format($pdf_data['invoice_total'], '2', ',', '.');
					    	 } */
					    	 
					    	$keyi = 0;
					    	foreach($pdf_data['items'] as $kivi => $vivi)
					    	{
					    		$rp_invoice_items['items'][$keyi]['shortcuts'][$kivi] = $vivi;
					    		$keyi++;
					    		 
					    	}
					    	 
					    	if(count($pdf_data['items']) > '0')
					    	{
					    		$rows = count($rp_invoice_items['items']);
					    		$grid = new Pms_Grid($rp_invoice_items['items'], 1, $rows, "he_invoice_items_list_pdf.html");
					    		//$grid_short = new Pms_Grid($sgbxi_invoice_items['items'], 1, $rows, "bw_sgbxi_invoice_items_list_pdf_short.html");
					    		 
					    		//$grid->invoice_total = $tokenfilter['invoice']['invoiceamount'];
					    		$grid->max_entries = $rows;
					    		 
					    		/* $grid_short->invoice_total = $tokenfilter['invoice']['invoiceamount'];
					    		 $grid_short->max_entries = $rows; */
					    
					    		$html_items = $grid->renderGrid();
					    		//$html_items_short = $grid_short->renderGrid();
					    	}
					    	else
					    	{
					    		$html_items = "";
					    		$html_items_short = "";
					    	}
					    	 
					    	$tokenfilter['invoice']['invoice_items_html'] = $html_items;
					    	//$tokenfilter['invoice']['invoice_items_html_short'] = $html_items_short;
					    	//print_r($tokenfilter); exit;
					    	 
					    	$docx_helper = $this->getHelper('CreateDocxFromTemplate');
					    	$docx_helper->setTokenController('invoice');
					    	 
					    	//create public/joined_files/ dir
					    	while(!is_dir(PDFJOIN_PATH))
					    	{
					    		mkdir(PDFJOIN_PATH);
					    		if($i >= 50)
					    		{
					    			exit; //failsafe
					    		}
					    		$i++;
					    	}
					    	 
					    	//create public/joined_files/$clientid dir
					    	$pdf_path = PDFJOIN_PATH . '/' . $clientid;
					    	 
					    	while(!is_dir($pdf_path))
					    	{
					    		mkdir($pdf_path);
					    		if($i >= 50)
					    		{
					    			exit; //failsafe
					    		}
					    		$i++;
					    	}
					    	 
					    	$tmpstmp = isset($this->view->folder_stamp) ? $this->view->folder_stamp : time();
					    	 
					    	while(!is_dir($pdf_path . '/' . $tmpstmp))
					    	{
					    		mkdir($pdf_path . '/' . $tmpstmp);
					    		if($i >= 50)
					    		{
					    			exit; //failsafe
					    		}
					    		$i++;
					    	}
					    	 
					    	$template = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
					    	 
					    	$destination_path = $pdf_path . '/' . $tmpstmp . '/';
					    	 
					    	$docx_helper->setOutputFile($destination_path.$Batch_name);
					    	 
					    	//do not add extension !
					    	$docx_helper->setBrowserFilename($Batch_name);
					    	 
					    	$docx_helper->create_pdf ($template, $tokenfilter) ;
					    
					    	if(!empty($extra_data))
					    	{
					    		$temp_files[] = $destination_path.$Batch_name.'.pdf';
					    
					    		//generate leistungs page
					    		$temp_files[] = $this->generate_joined_files_pdf(4,$pdf_data,'RP_invoice_items',"rp_invoice_items.html");
					    		 
					    		$source = 'RP_invoice_token';
					    		$patient_data = array();
					    		$patient_data['invoice_full_number'] = $tokenfilter['invoice']['full_invoice_number'];
					    		ob_end_clean();
					    		$this->join_pdfs_new($temp_files, $patient_data ,$source);
					    	}
					    	else
					    	{
					    		$docx_helper->download_file();
					    		exit;
					    	}
					    }
					    else
					    {
				 
						    $files[] = $this->generate_joined_files_pdf(4,$pdf_data,'rpinvoice',"rpinvoice_pdf.html");
						    if(!empty($extra_data))
						    {
						        $files[] = $this->generate_joined_files_pdf(4,$pdf_data,'RP_invoice_items',"rp_invoice_items.html");
						    }
						    	
						    //Final step merge generated files!
						    $patient_data['ipid'] = $invoice_data['ipid'];
						    $patient_epid = strtoupper(Pms_CommonData::getEpid($invoice_data['ipid']));
						    $patient_data['epid'] = $patient_epid;
						    $source = 'Rp_invoice_and_items';
						    $this->join_pdfs_new($files, $patient_data, $source);
					    }
					}
				}
				else
				{
					$rp_invoices_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}
			//pdf with data from db(links)
			else if(!empty($_REQUEST['invoiceid']) && $_REQUEST['pdf'] == '1')
			{		 
			    
				$pdf_data = $invoice_data;
				$pdf_data['shortcuts'] = $this->view->shortcuts;
				$pdf_data['items'] = $this->view->items;
				$pdf_data['clientid'] = $clientid;
			
				if($invoice_data['completed_date'] != '0000-00-00 00:00:00')
				{
					$pdf_data['completed_date'] = $invoice_data['completed_date'];
				}
				else
				{
//					$pdf_data['completed_date'] = $invoice_data['completed_date_sort'];
				}
				
				$pdf_data['unique_id'] = $invoice_data['id'];
				if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
				{
					$storno_data = $rp_invoices->getRpInvoice($_REQUEST['storno']);
					$pdf_data['invoice_total'] = ($storno_data['invoice_total'] * (-1));
					$pdf_data['prefix'] = $storno_data['prefix'];
					$pdf_data['invoice_number'] = $storno_data['invoice_number'];
					$pdf_data['clientid'] = $clientid;
					
					//ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
					if($_REQUEST['bulk_print'] == '1'){
					    $pdf_data['unique_id'] = $storno_data['id'];
					}else{
					    $pdf_data['unique_id'] = $storno_data['record_id'];
					}
					
					if($storno_data['completed_date'] != '0000-00-00 00:00:00')
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
					}

					$template_files = 'storno_rpinvoice_pdf.html';
				}
				else
				{
					$template_files = 'rpinvoice_pdf.html';
				}
				
				 
				if($_REQUEST['version'] == "old"){
    				$this->generate_pdf($pdf_data, "rpinvoice", $template_files, "P");
// 				    $this->generate_pdf($pdf_data, "rpinvoice", "rpinvoice_pdf.html", "P");
				}
				else
				{
				
				    $this->_helper->layout->setLayout('layout_ajax');
				    $this->_helper->viewRenderer->setNoRender();
				
				    $pdf_data['client_details'] = $client_details[0];
				    $pdf_data['extra_data'] = $extra_data;
				    $pdf_data['users_array'] = $user_array ;
				    $pdf_data['client_form_type'] = $client_form_type;
				    $pdf_data['form2action'] = $form2action;
			
				    $pdf_data['alias']['home_visit'] = "Hausbesuch";
				    $pdf_data['alias']['beratung'] = "Beratung";
				    $pdf_data['alias']['koordination'] = "Koordination";
				    
				    if($_REQUEST['bulk_print'] == '1' ){
				        
				        $pdf_data['bulk_print'] = 1;
				        $pdf_data['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
				        $pdf_data['clientid'] = $clientid;
				        $this->view->folder_stamp = time();
				        
				        
    				    $files[] = $this->generate_joined_files_pdf(4,$pdf_data,'rpinvoice',$template_files);
    				    if(!empty($extra_data))
    				    {
    				        $files[] = $this->generate_joined_files_pdf(4,$pdf_data,'RP_invoice_items',"rp_invoice_items.html");
    				    }
    				    
    				    //Final step merge generated files!
    				    $patient_data['ipid'] = $invoice_data['ipid'];
    				    $patient_epid = strtoupper(Pms_CommonData::getEpid($invoice_data['ipid']));
    				    $patient_data['epid'] = $patient_epid;
    				    
    				    // ISPC-2472 Ancuta 07.11.2019
    				    $invoice_number_full="";
    				    $invoice_number_full .=  (strlen($pdf_data['prefix']) > 0) ? $pdf_data['prefix'] : '';
    				    $invoice_number_full .= $pdf_data['invoice_number'];
    				    $patient_data['invoice_full_number'] = $invoice_number_full;
    				    // --
    				    $source = 'Rp_invoice_and_items';
//     				    $this->join_pdfs_new($files, $patient_data, $source, $pdf_data);
    				    $merged_file = $this->join_pdfs_new($files, $patient_data, $source, $pdf_data);
    				    
    				    return $merged_file;
    				    exit();
				    }
				    else
				    {
				    	//ISPC-2745 Carmen 17.11.2020
				    	//create batch name
				    	$Batch_name = false;
				    	$Batch_name = $pdf_data['prefix'].$pdf_data['invoice_number'];
				    	
				    	$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'rpinvoice');
				    		
				    	if($template_data)
				    	{
				    		// generate invoice page
				    		$tokenfilter = array();
				    		$tokenfilter['invoice']['address'] = $pdf_data['patient_name'];
				    		//$tokenfilter['client']['city'] = $pdf_data['client_city'];
				    		$tokenfilter['client']['institutskennzeichen'] = $pdf_data['client_ik'];
				    		if($pdf_data['completed_date'] != "0000-00-00 00:00:00" && $pdf_data['completed_date'] != "1970-01-01 00:00:00")
				    		{
				    			$tokenfilter['invoice']['invoicedate'] = strftime('%A, %d. %B %Y', strtotime($pdf_data['completed_date']));
				    		}
				    		else
				    		{
				    			$tokenfilter['invoice']['invoicedate'] = '';
				    		}
				    			
				    		$tokenfilter['invoice']['prefix'] = $pdf_data['prefix'];
				    		$tokenfilter['invoice']['invoicenumber'] = $pdf_data['invoice_number'];
				    		$tokenfilter['invoice']['full_invoice_number'] = $pdf_data['prefix'].$pdf_data['invoice_number'];
				    		/* if($pdf_data['first_active_day'] != "0000-00-00 00:00:00" && $pdf_data['first_active_day'] != "1970-01-01 00:00:00")
				    		 {
				    		 $tokenfilter['invoice']['first_active_day'] = date('d.m.Y', strtotime($pdf_data['first_active_day']));
				    		 }
				    		 else
				    		 {
				    		 $tokenfilter['invoice']['first_active_day'] = "-";
				    		 }
				    		 if($pdf_data['last_active_day'] != "0000-00-00 00:00:00" && $pdf_data['last_active_day'] != "1970-01-01 00:00:00")
				    		 {
				    		 $tokenfilter['invoice']['last_active_day'] = date('d.m.Y', strtotime($pdf_data['last_active_day']));
				    		 }
				    		 else
				    		 {
				    		 $tokenfilter['invoice']['last_active_day'] = "-";
				    		 } */
				    			
				    		//$tokenfilter['invoice']['healthinsurancenumber'] = $pdf_data['insurance_no'];
				    		//$tokenfilter['invoice']['health_insurance_ik'] = $pdf_data['health_insurance_ik'];
				    		$tokenfilter['invoice']['healthinsurance_versnr'] = $pdf_data['versicherten_nr'];
				    		$tokenfilter['invoice']['healthinsurance_kassennr'] = $pdf_data['kassen_nr'];
				    		$tokenfilter['invoice']['healthinsurance_status'] = $pdf_data['status'];
				    			
				    		$tokenfilter['familydoctor']['doctor_bsnr'] = $pdf_data['betriebsstatten_nr'];
				    		$tokenfilter['familydoctor']['doctor_lbnr'] = $pdf_data['arzt_nr'];
				    		$tokenfilter['invoice']['topdatum'] = $pdf_data['topdatum'];
				    		
				    		$tokenfilter['invoice']['stample'] = $pdf_data['stample'];
				    		
				    		if($pdf_data['sapv_erst'] == 1)
				    		{
				    			$tokenfilter['sapv']['sapv_erst'] = 'X';
				    		}
				    		else
				    		{
				    			$tokenfilter['sapv']['sapv_erst'] = '';
				    		}
				    		
				    		if($pdf_data['sapv_folge'] == 1)
				    		{
				    			$tokenfilter['sapv']['sapv_folge'] = 'X';
				    		}
				    		else
				    		{
				    			$tokenfilter['sapv']['sapv_folge'] = '';
				    		}
				    		
				    		$tokenfilter['sapv']['sapv_from'] = $pdf_data['curent_sapv_from'];
				    		$tokenfilter['sapv']['sapv_till'] = $pdf_data['curent_sapv_till'];
				    		$tokenfilter['invoice']['invoiced_period_start'] = $pdf_data['invoice_date_from'];
				    		$tokenfilter['invoice']['invoiced_period_end'] = $pdf_data['invoice_date_till'];
				    		
				    		$tokenfilter['invoice']['main_diagnosis'] = $pdf_data['main_diagnosis'];
				    		
				    		$tokenfilter['patient']['birthd'] = $pdf_data['geb'];
				    		//$tokenfilter['invoice']['patient_pflegestufe'] = $pdf_data['patient_pflegestufe'];
				    		//$tokenfilter['footer'] = $pdf_data['footer'];
				    	
				    		 /* if($pdf_data['healthinsurance_name'] != "")
				    		 {
				    		 $tokenfilter['healthinsurance']['healthinsurance_name'] = $pdf_data['krankenkasse'];
				    		 }
				    		 else
				    		 {
				    		 $tokenfilter['healthinsurance']['healthinsurance_name'] = "--";
				    		 } */
				    				
				    		 //$tokenfilter['invoice']['unique_id'] = $pdf_data['unique_id'];
				    				
				    		 /* if($pdf_data['current_period']['start'] != "0000-00-00 00:00:00" && $pdf_data['current_period']['start'] != "1970-01-01 00:00:00")
				    		 {
				    		 $tokenfilter['invoice']['invoice_period_start'] = date('d.m.Y', strtotime($pdf_data['current_period']['start']));
				    		 }
				    		 else
				    		 {
				    		 $tokenfilter['invoice']['invoice_period_start'] = "-";
				    		 }
				    		 if($pdf_data['current_period']['end'] != "0000-00-00 00:00:00" && $pdf_data['current_period']['end'] != "1970-01-01 00:00:00")
				    		 {
				    		 $tokenfilter['invoice']['invoice_period_end'] = date('d.m.Y', strtotime($pdf_data['current_period']['end']));
				    		 }
				    		 else
				    		 {
				    		 $tokenfilter['invoice']['invoice_period_end'] = "-";
				    		 } */
				    			
				    		/* if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'])
				    		{
				    			$tokenfilter['invoice']['invoiceamount'] = number_format($pdf_data['invoice_total'], '2', ',', '.');
				    		}
				    		else
				    		{
				    			$tokenfilter['invoice']['invoiceamount'] = number_format($pdf_data['invoice_total'], '2', ',', '.');
				    		} */
				    			
				    		$keyi = 0;
				    		foreach($pdf_data['items'] as $kivi => $vivi)
				    		{
				    			$rp_invoice_items['items'][$keyi]['shortcuts'][$kivi] = $vivi;
				    			$keyi++;
				    	
				    		}
				    			
				    		if(count($pdf_data['items']) > '0')
				    		{
				    			$rows = count($rp_invoice_items['items']);
				    			$grid = new Pms_Grid($rp_invoice_items['items'], 1, $rows, "rp_invoice_items_list_pdf.html");
				    			//$grid_short = new Pms_Grid($sgbxi_invoice_items['items'], 1, $rows, "bw_sgbxi_invoice_items_list_pdf_short.html");
				    	
				    			//$grid->invoice_total = $tokenfilter['invoice']['invoiceamount'];
				    			$grid->max_entries = $rows;
				    	
				    			/* $grid_short->invoice_total = $tokenfilter['invoice']['invoiceamount'];
				    			 $grid_short->max_entries = $rows; */
				    				
				    			$html_items = $grid->renderGrid();
				    			//$html_items_short = $grid_short->renderGrid();
				    		}
				    		else
				    		{
				    			$html_items = "";
				    			$html_items_short = "";
				    		}
				    			
				    		$tokenfilter['invoice']['invoice_items_html'] = $html_items;
				    		//$tokenfilter['invoice']['invoice_items_html_short'] = $html_items_short;
				    		//print_r($tokenfilter); exit;
				    			
				    		$docx_helper = $this->getHelper('CreateDocxFromTemplate');
				    		$docx_helper->setTokenController('invoice');
				    			
				    		//create public/joined_files/ dir
				    		while(!is_dir(PDFJOIN_PATH))
				    		{
				    			mkdir(PDFJOIN_PATH);
				    			if($i >= 50)
				    			{
				    				exit; //failsafe
				    			}
				    			$i++;
				    		}
				    			
				    		//create public/joined_files/$clientid dir
				    		$pdf_path = PDFJOIN_PATH . '/' . $clientid;
				    			
				    		while(!is_dir($pdf_path))
				    		{
				    			mkdir($pdf_path);
				    			if($i >= 50)
				    			{
				    				exit; //failsafe
				    			}
				    			$i++;
				    		}
				    			
				    		$tmpstmp = isset($this->view->folder_stamp) ? $this->view->folder_stamp : time();
				    			
				    		while(!is_dir($pdf_path . '/' . $tmpstmp))
				    		{
				    			mkdir($pdf_path . '/' . $tmpstmp);
				    			if($i >= 50)
				    			{
				    				exit; //failsafe
				    			}
				    			$i++;
				    		}
				    			
				    		$template = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
				    			
				    		$destination_path = $pdf_path . '/' . $tmpstmp . '/';
				    			
				    		$docx_helper->setOutputFile($destination_path.$Batch_name);
				    			
				    		//do not add extension !
				    		$docx_helper->setBrowserFilename($Batch_name);
				    			
				    		$docx_helper->create_pdf ($template, $tokenfilter) ;
				    		
				    		if(!empty($extra_data))
				    		{
				    			$temp_files[] = $destination_path.$Batch_name.'.pdf';
						
								//generate leistungs page				    		
				    			$temp_files[] = $this->generate_joined_files_pdf(4,$pdf_data,'RP_invoice_items',"rp_invoice_items.html");
				    			
				    			$source = 'RP_invoice_token';
				    			$patient_data = array();
				    			$patient_data['invoice_full_number'] = $tokenfilter['invoice']['full_invoice_number'];
				    			ob_end_clean();
				    			$this->join_pdfs_new($temp_files, $patient_data ,$source);
				    		}
				    		else
				    		{
				    			$docx_helper->download_file();
				    			exit;
				    		}
				    	}
				    	else
				    	{
				        
	    				    $files[] = $this->generate_joined_files_pdf(4,$pdf_data,'rpinvoice',$template_files);
	    				    if(!empty($extra_data))
	    				    {
	    				        $files[] = $this->generate_joined_files_pdf(4,$pdf_data,'RP_invoice_items',"rp_invoice_items.html");
	    				    }
	    				    
	    				    //Final step merge generated files!
	    				    $patient_data['ipid'] = $invoice_data['ipid'];
	    				    $patient_epid = strtoupper(Pms_CommonData::getEpid($invoice_data['ipid']));
	    				    $patient_data['epid'] = $patient_epid;
	    				    
	    				    // ISPC-2472 Ancuta 07.11.2019
	    				    $invoice_number_full="";
	    				    $invoice_number_full .=  (strlen($pdf_data['prefix']) > 0) ? $pdf_data['prefix'] : '';
	    				    $invoice_number_full .= $pdf_data['invoice_number'];
	    				    $patient_data['invoice_full_number'] = $invoice_number_full;
	    				    // --
	    				    $source = 'Rp_invoice_and_items';
	    				    $this->join_pdfs_new($files, $patient_data, $source);
				    	}
				    }
				}
			}
			else
			{
				$rp_invoices_form->assignErrorMessages();
				$this->retainValues($_POST);
			}
		}

		public function rpperformancerecordAction()
		{
			setlocale(LC_TIME, 'de_DE.UTF8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$tabmenus = new TabMenus();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$user = new User();
			$usergroups = new Usergroup();
			$rp_form = new Application_Form_RpControl();

			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			$this->view->tabmenus = $tabmenus->getMenuTabs();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			//Check patient permissions on controller and action
			$patient_privileges = PatientPermissions::checkPermissionOnRun();
			if(!$patient_privileges)
			{
				$this->_redirect(APP_BASE . 'error/previlege');
			}
			//Check patient permissions on controller and action
			$patient_privileges = PatientPermissions::checkPermissionOnRun();
			if(!$patient_privileges)
			{
				$this->_redirect(APP_BASE . 'error/previlege');
			}
			
			//get patient details
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			//get patient active periods
			$all_patients_periods = array_values($patient_days[$ipid]['active_periods']);

			//get active period months
			$months = array();
			foreach($all_patients_periods as $k_period => $v_period)
			{
				$period_months = $this->get_period_months($v_period['start'], $v_period['end'], "Y-m");
				$months = array_merge($months, $period_months);
			}
			$months = array_values(array_unique($months));

			//sort months
			foreach($months as $k_m => $v_m)
			{
				$months_unsorted[strtotime($v_m)] = $v_m;
			}
			ksort($months_unsorted);
			$months = array_values(array_unique($months_unsorted));

			//calculate start_day, number_of_days, end_day for each month
			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
				$month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
			}

			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}
//			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//get default products pricelist
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$default_price_list = Pms_CommonData::get_default_price_shortcuts();

			$this->view->shortcuts = $shortcuts['rp'];

//			DATA IS LOADED FROM AJAXCONTROLLER



			if($this->getRequest()->isPost())
			{
				unset($_POST['todoids']);
// 				echo "<pre>";
// 				die(print_r($_REQUEST));
				if($_POST['save_rpperformance'])
				{
// 					die("a");
					$ins_data = $rp_form->insert_rp_values($ipid, $_POST, $month_days_arr[str_replace('-', '', $selected_month)], $shortcuts['rp']);
					$this->_redirect(APP_BASE . 'invoice/rpperformancerecord?id=' . $_REQUEST['id'] . '&list=' . $_REQUEST['list']);
					exit;
				}
				else if($_POST['reset'])
				{
// 					die("b");
					//redirect required
					$reset_data = $rp_form->reset_rp_control($ipid, $month_days_arr[str_replace('-', '', $selected_month)][0]);
					$this->_redirect(APP_BASE . 'invoice/rpperformancerecord?id=' . $_REQUEST['id'] . '&list=' . $_REQUEST['list']);
					exit;
				}
				else if($_POST['pdf'])
				{
// 					die("c");
					

					//print_r($this->view->list);exit;
					$post['period_days'] = $month_days_arr[str_replace('-', '', $selected_month)];
					$post['shortcuts'] = $shortcuts['rp'];
					$post['products'] = $_POST;
					$post['list']=$_POST['list'];
					$post['selected_month'] = strftime('%B %G', strtotime($month_days_arr[str_replace('-', '', $selected_month)][0]));
					
					$pmd = array($patientmaster->get_patientMasterData());
					PatientMaster::beautifyName($pmd);
					$post['PatientMasterData']  = $pmd[0];
										
					$template_files = array('rpperformancerecord_pdf.html');
					$orientation = array('L');
					$background_pages = '';
					$this->generate_pdf($post, "rpperformancerecord", $template_files, $orientation, $background_pages);
				}
			}
		}

		public function brehospizsapvinvoicepatientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$bre_hospiz_invoices = new BreHospizInvoices();


			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}


			$this->view->selected_month = $selected_month;
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
			$post_month['start'] =  date("d.m.Y",strtotime($months_details[$selected_month]['start'] ));
			$post_month['end'] =  date("d.m.Y",strtotime($months_details[$selected_month]['end'] ));
			//check if a month is selected END

			if($this->getRequest()->isPost())
			{
				$decrypted_ids = array_map('Pms_Uuid::decrypt', $_POST['selected_patient']);

				if(count($decrypted_ids) == '0')
				{
					$decrypted_ids[] = '99999999999';
				}

				$pat_details = Doctrine_Query::create()
					->select('p.ipid, e.epid')
					->from('PatientMaster p')
					->where('p.isdelete=0')
					->andWhereIn('p.id', $decrypted_ids)
					->andWhere('p.isstandbydelete=0')
					->leftJoin("p.EpidIpidMapping e")
					->andWhere("p.ipid = e.ipid")
					->orderBy('p.admission_date DESC');

				$pat_details_res = $pat_details->fetchArray();


				foreach($pat_details_res as $k_pat_res => $v_pat_res)
				{
					$selected_patients[] = $v_pat_res['ipid'];
				}

				if(count($selected_patients) == '0')
				{
					$selected_patients[] = '999999999';
				}

				$generate_invoices = $this->bre_hospiz_multiple_invoices($selected_patients, $months_details[$selected_month]);
				$this->_redirect(APP_BASE . 'invoice/brehospizinvoices'); //to avoid resubmission
			}

			//generate one patient invoice and serve the generated invoice
			if($_REQUEST['pid'] && $_REQUEST['mode'] == 'pdfs')
			{
				$decrypted_ids = array(Pms_Uuid::decrypt($_REQUEST['pid']));

				if(count($decrypted_ids) == '0')
				{
					$decrypted_ids[] = '99999999999';
				}

				$pat_details = Doctrine_Query::create()
					->select('p.ipid, e.epid')
					->from('PatientMaster p')
					->where('p.isdelete=0')
					->andWhereIn('p.id', $decrypted_ids)
					->andWhere('p.isstandbydelete=0')
					->leftJoin("p.EpidIpidMapping e")
					->andWhere("p.ipid = e.ipid")
					->orderBy('p.admission_date DESC');

				$pat_details_res = $pat_details->fetchArray();


				foreach($pat_details_res as $k_pat_res => $v_pat_res)
				{
					$selected_patients[] = $v_pat_res['ipid'];
				}

				if(count($selected_patients) == '0')
				{
					$selected_patients[] = '999999999';
				}

				$generate_invoice = $this->bre_hospiz_multiple_invoices($selected_patients, $months_details[$selected_month]);
				if(count($generate_invoice) == '1')
				{
					$this->_redirect(APP_BASE . 'invoice/editbrehospizsapvinvoice?invoiceid=' . $generate_invoice[0] . '&pdf=1');
					exit;
				}
			}


			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_rehnung_patients';
			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//get active ipids details
			$sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex ";
			}

			$active_ipids_details = Pms_CommonData::patients_active($sql, $clientid, $months_details, false, "p.admission_date", "ASC"); // BRE patient list

			foreach($active_ipids_details as $k_active_patient => $v_active_patient)
			{
				$active_patients[$v_active_patient['ipid']] = $v_active_patient;

				$active_ipids[] = $v_active_patient['ipid'];

				$last_period[$v_active_patient['ipid']] = end($v_active_patient['PatientActive']);

				$active_patients[$v_active_patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['start']));

				if($last_period[$v_active_patient['ipid']]['end'] != "0000-00-00")
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['end']));
				}
				else
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = "-";
				}
				$active_patients[$v_active_patient['ipid']]['id'] = $v_active_patient['PatientMaster']['id'];
				
				$active_patients[$v_active_patient['ipid']]['period_start'] =$post_month['start'];
				$active_patients[$v_active_patient['ipid']]['period_end'] =$post_month['end'];
			}

			$this->view->active_patients = $active_patients;

			if(empty($active_ipids))
			{
				$active_ipids[] = '99999999999999999';
			}

			$this->view->active_patients = $active_patients;


			$this->view->patients_with_invoices = $this->check_bre_hospiz_patients_invoice($selected_month, $active_ipids);

			//add invoice number
			$bre_hospiz_inv_number = $bre_hospiz_invoices->get_next_invoice_number($clientid, true);
			$this->view->bre_hospiz_highest_invoice_number = $bre_hospiz_inv_number['prefix'] . $bre_hospiz_inv_number['invoicenumber'];
		}

		public function brehospizinvoicesAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$bre_hospiz_invoices = new BreHospizInvoices();
			$bre_hospiz_invoices_items = new BreHospizInvoiceItems();
			$bre_hospiz_invoices_form = new Application_Form_BreHospizInvoices();

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			
			//ISPC-2609 Ancuta 24.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "bre_hospiz_sapv_invoice";
			$userid = $logininfo->userid;
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			
			
			$this->view->print_html = '';
			if(count($invoice_user_printjobs) > 1 ){
			    //echo $print_html;
			    $this->view->print_html = $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			if($this->getRequest()->isPost())
			{
				if($_POST['activate'] == "1")
				{
					$activate_invoice = $bre_hospiz_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid); //  set as unpaid
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $bre_hospiz_invoices_form->ToggleStatusInvoices($_POST['document'], "4");
				}
				elseif($_POST['warningmore'] == "1")
				{
					$invoiceids_to_warn = implode(',', $_POST['document']);
				
					$this->forward('generatereminderinvoice', 'Invoicenew', null, array());
				
					return;
				}
				//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
				elseif($_POST['batch_print_more'])
				{
				    $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
				    $params['batch_print'] = '1'; //enables batch print procedure
				    $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
				    $params['get_pdf'] = '0'; //stops downloading single pdf
				    
				    //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
				    if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
				        
				        
				        
				    } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
				        
				        $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
				        
				        $print_job_data = array();
				        $print_job_data['clientid'] = $clientid;
				        $print_job_data['user'] = $userid;
				        $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
				        $print_job_data['output_type'] = 'pdf';
				        $print_job_data['status'] = 'active';
				        $print_job_data['invoice_type'] = 'bre_hospiz_sapv_invoice';
				        $print_job_data['print_params'] = serialize($params);
				        $print_job_data['print_function'] = 'editbrehospizsapvinvoiceAction';
				        $print_job_data['print_controller'] = "invoice";
				        
				        foreach($_POST['document'] as $k=>$inv_id){
				            $print_job_data['PrintJobsItems'][] = array(
				                'clientid'=>$print_job_data['clientid'],
				                'user'=>$print_job_data['user'],
				                'invoice_id'=>$inv_id,
				                'invoice_type'=>$print_job_data['invoice_type'],
				                'status'=>"new"
				            );
				        }
				        
				        $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
				        $print_id = $PrintJobsBulk_obj->id;
				        
				        if($print_id){
				            $this->__StartPrintJobs();
				        }
				    }
				    
				}
				else
				{
					$new_payment = $bre_hospiz_invoices_form->submit_payment($_POST);
				}
				$this->_redirect(APP_BASE . 'invoice/brehospizinvoices'); //to avoid resubmission
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$clone_record = $bre_hospiz_invoices->create_storno_invoice($invoiceid);
					$this->_redirect(APP_BASE . 'invoice/brehospizinvoices?flg=suc');
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $bre_hospiz_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoice/brehospizinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoice/brehospizinvoices?flg=delerr');
				}
			}



			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
		}

		private function bre_hospiz_multiple_invoices($ipids, $period = false)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$boxes = new LettersTextBoxes();
			$patientmaster = new PatientMaster();

			//get client letterbox details
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);

			//to be applied in all patient arrays
			$master['sapv_footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
 			//$master['reminder_text'] = 'Bitte überweisen Sie den Betrag bis zum (' . date('d.m.Y', strtotime('+21 days')) . ') auf unser Konto.<br /> Bei Rückfragen erreichen Sie uns unter der Rufnummer: 0421-879 15 45';
			//TODO-1233
			$master['reminder_text'] = 'Bitte überweisen Sie den Betrag bis zum ' . date('d.m.Y', strtotime('+21 days')) . ' auf unser Konto.';
			/* -----------------------------Selected period days START ----------------------------------------------- */
			if($period)
			{
				$selected_month_days = $patientmaster->getDaysInBetween($period['start'], $period['end']);
			}

			//format array days to d.m.Y
			array_walk($selected_month_days, function(&$value) {
				$value = date("d.m.Y", strtotime($value));
			});
			/* --------------------------------Selected period days END ----------------------------------------------- */

			/* ----------------Patients - admissions, active, hospiz days START -------------------------------------- */
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $ipids;
			
			//ISPC - 2365 - for privatepatient add patient address
			$sql = 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			
			//beware of date d.m.Y format here
			$patient_days = Pms_CommonData::patients_days($conditions, $sql);
			
			foreach($ipids as $kipid => $v_ipid)
			{
				$active_days[$v_ipid] = $patient_days[$v_ipid]['active_days'];
				$patient_admission_days[$v_ipid] = $patient_days[$v_ipid]['admission_days'];
				$hospiz_days_client_settings[$v_ipid] = $patient_days[$v_ipid]['hospiz']['real_days'];
			}
			/* ----------------Patients - admissions, active, hospiz days END -------------------------------------- */

			/* ----------------Patients - Healthinsurance & pflegestufe header data START -------------------------------------- */
			$hi_perms = new HealthInsurancePermissions();
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			$hi_perms_divisions = $divisions;

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);

			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			
			foreach($healthinsu_array as $k_hi_ipid => $v_hi)
			{
				$master_data[$k_hi_ipid]['health_insurance']['name'] = $v_hi['company_name'];
				$master_data[$k_hi_ipid]['health_insurance']['ik'] = $v_hi['institutskennzeichen'];
				$master_data[$k_hi_ipid]['health_insurance']['kassenr'] = $v_hi['kvk_no'];
				$master_data[$k_hi_ipid]['health_insurance']['versnr'] = $v_hi['insurance_no'];

				if(!empty($v_hi['companyid']) && $v_hi['companyid'] != 0)
				{
					if(empty($v_hi['name']))
					{
						$master_data[$k_hi_ipid]['health_insurance']['name'] = $v_hi['company']['name'];
					}
					if(empty($v_hi['ins_street']))
					{
						$master_data[$k_hi_ipid]['health_insurance']['ins_street'] = $v_hi['company']['street1'];
					}
					if(empty($v_hi['ins_city']))
					{
						$master_data[$k_hi_ipid]['health_insurance']['ins_city'] = $v_hi['company']['city'];
					}
					if(empty($v_hi['ins_zip']))
					{
						$master_data[$k_hi_ipid]['health_insurance']['ins_zip'] = $v_hi['company']['zip'];
					}

					if(strlen($v_hi['institutskennzeichen']) == 0)
					{
						$master_data[$k_hi_ipid]['health_insurance']['ik'] = $v_hi['company']['iknumber'];
					}

					if(strlen($v_hi['kvk_no']) == 0)
					{
						$master_data[$k_hi_ipid]['health_insurance']['kassenr'] = $v_hi['company']['kvnumber'];
					}
				}

				if($hi_perms_divisions)
				{
					$healthinsu_subdiv_arr[$k_hi_ipid] = $healthinsu_subdiv->get_hi_subdivisions($k_hi_ipid, $v_hi['companyid']);
				}

				if($v_hi['privatepatient'] == "1")
				{
					//get patient name and adress
					$patient_address = '&nbsp;' . htmlspecialchars($patient_days[$k_hi_ipid]['details']['first_name']) . ' ' . htmlspecialchars($patient_days[$k_hi_ipid]['details']['last_name']) . '<br />';
					$patient_address .= '&nbsp;' . htmlspecialchars($patient_days[$k_hi_ipid]['details']['street1']) . '<br />';
					if($patients_days[$k_hi_ipid]['details']['zip'] != "")
					{
						$patient_address .= '&nbsp;' . htmlspecialchars($patient_days[$k_hi_ipid]['details']['zip']) . ' ' . '&nbsp;' . htmlspecialchars($patient_days[$k_hi_ipid]['details']['city']);
					}
					else 
					{
						$patient_address .= '&nbsp;' . htmlspecialchars($patient_days[$k_hi_ipid]['details']['city']);
					}
					$master_data[$k_hi_ipid]['health_insurance']['address'] = $patient_address;
				}
				else
				{
					if(strlen($healthinsu_subdiv_arr[$k_hi_ipid][3]['name']) == '0' && strlen($healthinsu_subdiv_arr[$k_hi_ipid][3]['street1']) == '0')
					{
						$phi_details_sub[$k_hi_ipid] = $v_hi['company']['name'] . '<br/> ' . $v_hi['company']['insurance_provider'] . '<br/> ' . $v_hi['company']['street1'] . '<br/> ' . $v_hi['company']['zip'] . ' ' . $v_hi['company']['city'];
					}
					else
					{
						$phi_details_sub[$k_hi_ipid] = $healthinsu_subdiv_arr[$k_hi_ipid][3]['name'] . '<br/> ' . $healthinsu_subdiv_arr[$k_hi_ipid][3]['insurance_provider']. '<br/> ' . $healthinsu_subdiv_arr[$k_hi_ipid][3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[$k_hi_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$k_hi_ipid][3]['city'];
					}
					$master_data[$k_hi_ipid]['health_insurance']['address'] = $phi_details_sub[$k_hi_ipid];
				}
			}



			$pflege = new PatientMaintainanceStage();
			$pflege_arr = $pflege->get_multiple_patatients_mt_period($ipids, $period['start'], $period['end']);

			foreach($pflege_arr as $k_pflege => $v_pflege)
			{
				$grouped_pflege[$v_pflege['ipid']][] = $v_pflege;
			}

			foreach($grouped_pflege as $k_gpflege => $v_gpflege)
			{
				$last_pflege = end($v_gpflege);

				if(strlen(trim($last_pflege['stage'])) != '0')
				{
					$master_data[$k_gpflege]['patient_pflegestuffe'] = $last_pflege['stage'];
				}
				else
				{
					$master_data[$k_gpflege]['patient_pflegestuffe'] = ' - ';
				}
			}

			/* ----------------Patients - Healthinsurance & pflegestufe header data END -------------------------------------- */


			/* ----------------Patient - Get SAPV -------------------------------------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipids)
				->andWhere('verordnungbis !="000-00-00 00:00:00" ')
				->andWhere('verordnungam !="000-00-00 00:00:00" ')
				->andWhere('isdelete=0')
// 				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$sapv_array = $dropSapv->fetchArray();

			$s = 1;
			$active_sapv_interval = array();
			foreach($sapv_array as $sapvkey => $sapvvalue)
			{

				if($sapvvalue['status'] == 1 && ($sapvvalue['verorddisabledate'] == '0000-00-00 00:00:00' || $sapvvalue['verorddisabledate'] == '1970-01-01 00:00:00') ){
					// no sapv taken here - becouse it is considered to be fully denied
				}
				else
				{
					$patients_sapv[$v_sapv['ipid']][] = $sapvvalue;

					if($sapvvalue['status'] == '1' && $sapvvalue['verorddisabledate'] != '0000-00-00 00:00:00' && $sapvvalue['verorddisabledate'] != '1970-01-01 00:00:00')
					{
						$sapvvalue ['verordnungbis'] = date('Y-m-d', strtotime($sapvvalue['verorddisabledate']));
					}
				
					$active_sapv_interval[$sapvvalue['ipid']][$s]['start'] = date('Y-m-d', strtotime($sapvvalue['verordnungam']));
					$active_sapv_interval[$sapvvalue['ipid']][$s]['end'] = date('Y-m-d', strtotime($sapvvalue['verordnungbis']));
	
					$patient_active_sapv[$sapvvalue['ipid']] = $patientmaster->getDaysInBetween($active_sapv_interval[$sapvvalue['ipid']][$s]['start'], $active_sapv_interval[$sapvvalue['ipid']][$s]['end']);
	
					if(empty($pat_active_sapv[$sapvvalue['ipid']]))
					{
						$pat_active_sapv[$sapvvalue['ipid']] = array();
					}
	
					$pat_active_sapv[$sapvvalue['ipid']] = array_merge($pat_active_sapv[$sapvvalue['ipid']], $patient_active_sapv[$sapvvalue['ipid']]);
	
					$s++;
				}
			}

			foreach($ipids as $kipid => $v_ipid)
			{
				if(count($pat_active_sapv[$v_ipid]) > '0')
				{
					//transform sapv days in d.m.Y
					array_walk($pat_active_sapv[$v_ipid], function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
				}
				$pat_active_sapv[$v_ipid] = array_unique($pat_active_sapv[$v_ipid]);

				$all_active_sapv_days[$v_ipid] = array_intersect($pat_active_sapv[$v_ipid], $active_days[$v_ipid]);
			}
			/* ----------------Patient - Get SAPV END -------------------------------------- */


			/* ---------------- Patients - Get Contact Forms and exclude deleted START -------------------------------------- */
			$deleted_cf = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhereIn("ipid", $ipids)
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhere('source_ipid = ""');
			$deleted_cf_array = $deleted_cf->fetchArray();

			$excluded_cf_ids[] = '99999999999';
			foreach($deleted_cf_array as $k_dcf => $v_dcf)
			{
				$excluded_cf_ids[] = $v_dcf['recordid'];
			}

			//get cf in period - deleted cf
			$cf = new ContactForms();
			$p_contactforms = $cf->get_multiple_contact_form_period($ipids, $period, $excluded_cf_ids);
			foreach($ipids as $kipid => $v_ipidcf)
			{
				foreach($p_contactforms[$v_ipidcf] as $k_cf => $v_cf)
				{
					$cf_day = date('d.m.Y', strtotime($v_cf['billable_date']));
					$days_contact_forms[$v_cf['ipid']][$cf_day][] = $v_cf['id'];

					$all_month_cf[$v_cf['ipid']][$v_cf['id']] = $v_cf;
				}
			}
			/* ---------------- Patients - Get Contact Forms and exclude deleted END -------------------------------------- */


			/* ----------------Patients - Get telefonat START -------------------------------------- */
			$course = new PatientCourse();
			$patient_course = $course->get_multiple_patient_course($ipids, "XT", false, true);

			foreach($ipids as $kipid => $v_ipidph)
			{
				foreach($patient_course[$v_ipidph] as $k_tel => $v_tel)
				{
					$course_day = date('d.m.Y', strtotime($v_tel['done_date']));
					$days_phone[$v_tel['ipid']][$course_day][] = $v_tel['id'];

					$all_month_course[$v_tel['ipid']][$v_tel['id']] = $v_tel;
				}
			}
			/* ----------------Patients - Get telefonat END -------------------------------------- */


			/* ---------------- Client- Get pricelist START -------------------------------------- */
			$master_price_list = PriceList::get_period_price_list($period['start'], $period['end']);
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			/* ---------------- Client- Get pricelist END -------------------------------------- */


			$hospiz_control_data = HospizControl::get_multiple_hospiz_controlsheet($ipids, $period['start']);

			$master_item = array();
			foreach($ipids as $k_ipid => $v_ipid)
			{
				$has_data[$v_ipid] = '0';
				if($hospiz_control_data[$v_ipid])
				{
					$has_data[$v_ipid] = '1';
				}

				foreach($selected_month_days as $k_m_day => $v_m_day)
				{
					$formated_day = date('Y-m-d', strtotime($v_m_day));
					$has_assesment = false;

					$master_items[$v_ipid][$v_m_day]['qty']['assessment'] = '0';
					$master_items[$v_ipid][$v_m_day]['qty']['visit'] = '0';
					$master_items[$v_ipid][$v_m_day]['qty']['phone'] = '0';

					if(in_array($v_m_day, $hospiz_days_client_settings[$v_ipid]) && in_array($v_m_day, $all_active_sapv_days[$v_ipid]))
					{
						//get admission days in hospiz location (assessment shortcut triggered)
						if((in_array($v_m_day, $patient_admission_days[$v_ipid]) && $has_data[$v_ipid] == '0') ||
							(array_key_exists($v_m_day, $hospiz_control_data[$v_ipid]['assessment']) && $hospiz_control_data[$v_ipid]['assessment'][$v_m_day] != '0' && $has_data[$v_ipid] == '1')
						)
						{
							$master_items[$v_ipid][$v_m_day]['qty']['assessment'] = '1';
							$has_assesment = true;
						}

						//contact forms this day
						if(array_key_exists($v_m_day, $days_contact_forms[$v_ipid]))
						{
							$visit_item_price[$v_ipid] = $master_price_list[$formated_day][0]['visit']['price'];

							$master_items[$v_ipid][$v_m_day]['qty']['visit'] += count($days_contact_forms[$v_ipid][$v_m_day]);
							$master_items[$v_ipid][$v_m_day]['price']['visit'] = $visit_item_price[$v_ipid];
							$master_items[$v_ipid][$v_m_day]['ammount']['visit'] = (count($days_contact_forms[$v_ipid][$v_m_day]) * $visit_item_price[$v_ipid]);
						}

						if(array_key_exists($v_m_day, $days_phone[$v_ipid]))
						{
							$phone_item_price[$v_ipid] = $master_price_list[$formated_day][0]['phone']['price'];

							$master_items[$v_ipid][$v_m_day]['qty']['phone'] += count($days_phone[$v_ipid][$v_m_day]);
							$master_items[$v_ipid][$v_m_day]['price']['phone'] = $phone_item_price[$v_ipid];
							$master_items[$v_ipid][$v_m_day]['ammount']['phone'] += (count($days_phone[$v_ipid][$v_m_day]) * $phone_item_price[$v_ipid]);
						}
					}

					if(array_sum($master_items[$v_ipid][$v_m_day]['qty']) > '0')
					{
						$master_items[$v_ipid][$v_m_day]['total'] = array_sum($master_items[$v_ipid][$v_m_day]['ammount']);

						//check if ammount exceeds the limit
						if($master_items[$v_ipid][$v_m_day]['total'] >= $master_price_list[$formated_day][0]['v_p_limit']['price'])
						{
							$master_items[$v_ipid][$v_m_day]['total'] = $master_price_list[$formated_day][0]['v_p_limit']['price'];
						}

						//add assessment price after visit/phone calculation and limitation
						if($has_assesment === true)
						{
							$master_items[$v_ipid][$v_m_day]['total'] += $master_price_list[$formated_day][0]['assessment']['price'];
						}
					}
					elseif(array_sum($master_items[$v_ipid][$v_m_day]['qty']) == '0')
					{
						$master_items[$v_ipid][$v_m_day]['total'] = '0.00';
					}
					else
					{
						$master_items[$v_ipid][$v_m_day]['total'] = '0.00';
					}

					$master_total[$v_ipid] += $master_items[$v_ipid][$v_m_day]['total'];
				}
				$master_item_total[$v_ipid]['shortcut_vv_hospiz'] = $master_total[$v_ipid];
			}
			unset($shortcuts['bre_hospiz'][array_search("v_p_limit", $shortcuts['bre_hospiz'])]);

			//get first temp invoice number
			$brehospizinvoices = new BreHospizInvoices();
			$bre_inv_number = $brehospizinvoices->get_next_invoice_number($clientid, true);

			$prefix = $bre_inv_number['prefix'];
			$invoicenumber = $bre_inv_number['invoicenumber'];


			//get first and last activity day
			foreach($ipids as $kkipid => $vvipid)
			{
				foreach($master_items[$vvipid] as $k_day => $v_day_details)
				{
					if($v_day_details['total'] != '0.00' && strlen($v_day_details['total']) > '0')
					{
						$activity_dayss[$vvipid][] = $k_day;
					}
				}

				$activity_dayss[$vvipid] = array_values(array_unique($activity_dayss[$vvipid]));
			}

			if($ipids)
			{
				foreach($ipids as $k_ipid => $v_ipid)
				{
					if($master_items[$v_ipid])
					{
						$invoice_ipid_order[] = $v_ipid;
						$invoices_arr[$v_ipid] = array(
							'invoice_start' => $period['start'],
							'invoice_end' => $period['end'],
							'start_active' => date('Y-m-d H:i:s', strtotime($activity_dayss[$v_ipid][0])),
							'end_active' => date('Y-m-d H:i:s', strtotime(end($activity_dayss[$v_ipid]))),
							'sapv_approve_date' => date('Y-m-d H:i:s', strtotime($patients_sapv[$v_ipid][0]['approved_date'])),
							'sapv_approve_nr' => $patients_sapv[$v_ipid][0]['approved_number'],
							'ipid' => $v_ipid,
							'client' => $clientid,
							'prefix' => $prefix,
							'healthinsurance_name' => $master_data[$v_ipid]['health_insurance']['name'],
							'healthinsurance_ik' => $master_data[$v_ipid]['health_insurance']['ik'],
							'healthinsurance_ver' => $master_data[$v_ipid]['health_insurance']['versnr'],
							'invoice_number' => $invoicenumber,
							'invoice_total' => $master_total[$v_ipid],
							'address' => $master_data[$v_ipid]['health_insurance']['address'],
							'footer' => $master['sapv_footer'],
							'reminder_text' => $master['reminder_text'],
							'status' => '1'
						);
						$invoicenumber++;
					}
				}

				$collection = new Doctrine_Collection('BreHospizInvoices');
				$collection->fromArray($invoices_arr);
				$collection->save();

				$inserted_keys = $collection->getPrimaryKeys();

				foreach($invoice_ipid_order as $k_inserted_key => $invoice_ipid)
				{
					foreach($master_item_total[$invoice_ipid] as $k_shortcut_inv => $v_values_inv)
					{
						$invoice_items_arr[] = array(
							'invoice' => $inserted_keys[$k_inserted_key],
							'client' => $clientid,
							'shortcut' => $k_shortcut_inv,
							'qty' => '1',
							'price' => $v_values_inv,
							'start_active' => date('Y-m-d H:i:s', strtotime($activity_dayss[$invoice_ipid][0])),
							'end_active' => date('Y-m-d H:i:s', strtotime(end($activity_dayss[$invoice_ipid]))),
						);
					}
				}

				if(count($invoice_items_arr) > 0)
				{
					//insert many records with one query!!
					$collection = new Doctrine_Collection('BreHospizInvoiceItems');
					$collection->fromArray($invoice_items_arr);
					$collection->save();
				}

				return $inserted_keys;
			}
		}

		public function fetchbrehospizinvoicelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$bre_invoices_payments = new BreHospizInvoicePayments();
			$users = new User();
			$warnings = new RemindersInvoice();
			$modules = new Modules();
			
			if($modules->checkModulePrivileges("170", $clientid))
			{
				$this->view->create_bulk_warnings = "1";
			}
			else
			{
				$this->view->create_bulk_warnings = "0";
			}
			
			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('BreHospizInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);


			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{

				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0  AND isdelete = 0 AND id NOT IN (' . $storno_ids_str . ')';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0   AND isdelete=0';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND DATE(NOW()) > DATE(invoice_end)  AND isdelete=0';
					break;

				case 'all':
					$filters['hiinvoice'] = ' ';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 ';
					break;
			}


			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`, CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);

			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BreHospizInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}
				$status_count_invoices["all"][] = '1';
			}

			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BreHospizInvoices')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}
			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('BreHospizInvoices')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";

			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
					//BreHospizInvoices
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [OLD]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*,  IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort,concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('BreHospizInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $bre_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);

			$all_warnings = $warnings->get_reminders($invoice_ids, 'bre_hospiz_sapv_invoice', $clientid);
				
			foreach ($invoicelimit as &$row) {
				if (isset($all_warnings[$row['id']])) {
					$row['InvoiceWarnings'] = $all_warnings[$row['id']];
				}
			}
			//var_dump($invoicelimit); exit;
			
			$this->view->storned_invoces = BreHospizInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function brehospizlistpaymentsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$breinvoices = new BreHospizInvoices();
			$brepayments = new BreHospizInvoicePayments();
			$breinvoice_form = new Application_Form_BreHospizInvoices();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $brepayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $brepayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $brepayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $breinvoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
//					print_r($status."\n\n");
						$update_status = $breinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
//					print_r($update_status);
					}

					//reload the payments
					unset($payments);
					$payments = $brepayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoice/brelistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
		public function editbrehospizsapvinvoiceAction($params = array())
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			//$clientid = $logininfo->clientid;
			if(isset($params) && !empty($params) && $params['bulk_print'] == 1){
			    $_REQUEST = $params;
			    $_REQUEST['pdf'] = 1;
			    $this->_helper->viewRenderer->setNoRender();
			}
			
			//ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
			$clientid = isset($_REQUEST['clientid']) && ! empty($_REQUEST['clientid']) ? $_REQUEST['clientid'] :  $logininfo->clientid;
			$userid = isset($_REQUEST['userid']) && ! empty($_REQUEST['userid']) ? $_REQUEST['userid'] : $logininfo->userid;
			
			
			
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$bre_invoices = new BreHospizInvoices();
			$bre_invoices_items = new BreHospizInvoiceItems();
			$bre_invoices_form = new Application_Form_BreHospizInvoices();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$this->view->hide_patient_tab = '1';


			
			//ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
			if($_REQUEST['bulk_print'] == '1' && strlen($_REQUEST['invoiceid']) > 0){
			    $invoice_details = $bre_invoices->getBreInvoice($_REQUEST['invoiceid']);
			    if($invoice_details['storno'] == '1'){
			        $_REQUEST['invoiceid'] = $invoice_details['record_id'];
			        $_REQUEST['stornopdf'] = 1;
			        $_REQUEST['storno'] = $invoice_details['id'];
			    }
			}
			//--
			 
			if($_REQUEST['invoiceid'] > '0')
			{
				if(empty($_REQUEST['storno']))
				{
					//here get the invoice details
					$invoice_id = $_REQUEST['invoiceid'];
				}
				else if(!empty($_REQUEST['storno']) && strlen($_REQUEST['storno']) > '0')
				{
					//here get the storned invoice details
					$invoice_id = $_REQUEST['storno'];
				}

				$invoice_data = $bre_invoices->getBreInvoice($invoice_id);
			}

			if(in_array($invoice_data['id'], BreHospizInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
			    
			    if(strlen($_POST['invoice']['address']) > 0 ){
			        if(strpos($_POST['invoice']['address'],"style"))
			        {
			            $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
			        }
			        $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
			        $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
			        $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
			    }
			    
			    
			    if(empty($_REQUEST['pdf']))
				{
					$status = '0';
					if(!empty($_POST['completed']))
					{
						$status = '2'; //unpaid
					}
					else if(!empty($_REQUEST['edit_invoice']))
					{
						$status = '1'; //draft
					}
					else if($_POST['deletemore'] == "1")
					{
						$status = '4'; //deleted
					}
					else if(!empty($_REQUEST['pdf']))
					{
						$status = '0'; //no change
					}
					else if(!empty($_REQUEST['users_invoice']))
					{
						$status = '0'; //no change
					}

					if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_')
					{
						$high_invoice_nr = $bre_invoices->get_next_invoice_number($clientid);
						$_POST['prefix'] = $high_invoice_nr['prefix'];
						$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
					}
					else
					{
						$_POST['prefix'] = $invoice_data['prefix'];
						$_POST['invoice_number'] = $invoice_data['invoice_number'];
					}
					//save here
					$edit_invoice = $bre_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);

					if($edit_invoice)
					{

						$this->_redirect(APP_BASE . 'invoice/brehospizinvoices?flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoice/brehospizinvoices?flg=edterr');
					}
				}
			}

			if($_REQUEST['invoiceid'])
			{
				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoice/breinvoices');
					exit;
				}

                //ISPC-2609 + ISPC-2000 Ancuta 29.09.2020
                if($_REQUEST['bulk_print'] == '1'){
    
                    $pdet = $patientmaster->get_patients_details_By_Ipids(array($invoice_data['ipid']));
                    $pm = $pdet[$invoice_data['ipid']];
                    $patient_details = $pm;
                    
                } else { 
				    $patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
                }
                
				$client_details = $client_details->getClientDataByid($invoice_data['client']);

				//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				$this->view->health_insurance_ver_nr = $healthinsu_array[0]['insurance_no'];

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}

					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}

				if($hi_perms_divisions)
				{

					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
				}

				$pathealthinsurancenr = "";
				if(count($healthinsu_subdiv_arr[3]['name']))
				{
					$phi_details = $healthinsu_subdiv_arr[3]['name'];
				}
				else if(count($healthinsu_array[0]))
				{
					$phi_details = $healthinsu_array[0]['name'];
				}
				else
				{
					$phi_details = "--";
				}

				$phi_details_sub = $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br/> ' . $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$this->view->health_insurance = $phi_details;
				$this->view->hi_subdiv_address = $phi_details_sub;


				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}

				if(strlen($invoice_data['healthinsurance_name']) == 0)
				{
					$invoice_data['healthinsurance_name'] = $phi_details;
				}

				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}

				if(strlen($invoice_data['footer']) == 0)
				{
					$invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				}

				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->client_details = $client_details[0];

				if($this->getRequest()->isPost() && $_POST['pdf'])
				{
					$pseudo_post['invoice_data'] = $invoice_data;
					$pseudo_post['patient_details'] = $patient_details;
					$pseudo_post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
					$pseudo_post['client_details'] = $client_details[0];

					if($_POST['completed_date'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($_POST['completed_date'])) != '1970-01-01')
					{
						$pseudo_post['invoice_data']['completed_date'] = date('d.m.Y', strtotime($_POST['completed_date']));
					}
					else
					{
						$pseudo_post['invoice_data']['completed_date'] = date('d.m.Y', time());
					}


					if($invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($invoice_data['start_active'])) != '1970-01-01')
					{
						$pseudo_post['invoice_data']['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
					}

					if($invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($invoice_data['end_active'])) != '1970-01-01')
					{
						$pseudo_post['invoice_data']['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
					}

					if($invoice_data['invoice_start'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($invoice_data['invoice_start'])) != '1970-01-01')
					{
						$pseudo_post['invoice_data']['current_period_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
					}

					if($invoice_data['invoice_end'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($invoice_data['invoice_end'])) != '1970-01-01')
					{
						$pseudo_post['invoice_data']['current_period_end'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
					}
					
					//ISPC-2747 Lore 27.11.2020
					if(strpos($invoice_data['show_boxes'], 'show_box_active') === false ){
					    $pseudo_post['show_box_active'] = '0';
					}else {
					    $pseudo_post['show_box_active'] = '1';
					}
					if(strpos($invoice_data['show_boxes'], 'show_box_patient') === false ){
					    $pseudo_post['show_box_patient'] = '0';
					}else {
					    $pseudo_post['show_box_patient'] = '1';
					}
					if(strpos($invoice_data['show_boxes'], 'show_box_sapv') === false ){
					    $pseudo_post['show_box_sapv'] = '0';
					}else {
					    $pseudo_post['show_box_sapv'] = '1';
					}
					
					$pseudo_post['invoice_data']['address'] = $_POST['invoice']['address'];
					$pseudo_post['invoice_data']['footer'] = $_POST['footer'];
					$pseudo_post['invoice_data']['reminder_text'] = $_POST['reminder_text'];
				}
				else if(!empty($_REQUEST['pdf']))
				{
				    
				    if(strlen($invoice_data['address']) > 0 ){
				        if(strpos($invoice_data['address'],"style"))
				        {
				            $invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
				        }
				        $invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
				        $invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
				        $invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
				    }
				    

					$pseudo_post['invoice_data'] = $invoice_data;
					$pseudo_post['unique_id'] = $invoice_data['id'];
					$pseudo_post['patient_details'] = $patient_details;
					$pseudo_post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
					$pseudo_post['client_details'] = $client_details[0];

					if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($invoice_data['completed_date'])) != '1970-01-01')
					{
						$pseudo_post['invoice_data']['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
					}
					else
					{
						$pseudo_post['invoice_data']['completed_date'] = date('d.m.Y', time());
					}

					if($invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($invoice_data['start_active'])) != '1970-01-01')
					{
						$pseudo_post['invoice_data']['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
					}

					if($invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($invoice_data['end_active'])) != '1970-01-01')
					{
						$pseudo_post['invoice_data']['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
					}

					if($invoice_data['invoice_start'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($invoice_data['invoice_start'])) != '1970-01-01')
					{
						$pseudo_post['invoice_data']['current_period_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
					}

					if($invoice_data['invoice_end'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($invoice_data['invoice_end'])) != '1970-01-01')
					{
						$pseudo_post['invoice_data']['current_period_end'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
					}
				}

				if($_REQUEST['storno'] > '0')
				{
					$pseudo_post['invoice_data']['invoice_total'] = ($invoice_data['invoice_total'] * (-1));
				}

				if(!empty($_REQUEST['pdf']) || $_POST['pdf'])
				{
				    /*
					if($_REQUEST['stornopdf'] == '1')
					{
					    //ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
					    if($_REQUEST['bulk_print'] == '1'){
					        $pseudo_post['unique_id'] = $storno_data['id'];
					    }else{
					        $pseudo_post['unique_id'] = $storno_data['record_id'];
					    }
					}
					*/
					if($_REQUEST['stornopdf'] == '1')
					{
					    //ISPC-2532 Lore 09.11.2020
					    $storned_data = $bre_invoices->getBreInvoice($_REQUEST['invoiceid']);       // e pe invers ...
					    $pseudo_post['storned_invoice_number'] = $storned_data['prefix'].$storned_data['invoice_number'];
					    $pseudo_post['completed_date'] = date('d.m.Y', strtotime($storned_data['completed_date']));
					    
					    //.
					    
						$template_files = array('storno_bre_hospiz_sapv_pdf.html');
						$orientation = array('P');
						$background_pages = array('0');
					}
					else
					{
						$template_files = array('invoice_bre_hospiz_sapv_pdf.html');
						$orientation = array('P');
						$background_pages = array('0');
					}
					
				     // Clean styles from address  

					// ISPC-2472 @Ancuta 07.11.2019
					$pdf_file_name = "BreHospizSapvPerformanceInvoice";
					$invoice_number_full="";
					$invoice_number_full .=  (strlen($invoice_data['prefix']) > 0) ? $invoice_data['prefix'] : '';
					$invoice_number_full .= $invoice_data['invoice_number'];
						
					if(strlen($invoice_number_full) > 0 ){
					    $pdf_file_name = $invoice_number_full;
					}
					// --

					if($_REQUEST['bulk_print'] == '1'){
					    $pseudo_post['bulk_print'] = 1;
					    $pseudo_post['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
					    $pseudo_post['clientid'] = $clientid;
					   
					    $files = $this->generate_pdf($pseudo_post, $pdf_file_name, $template_files, $orientation, $background_pages);
					    return $files;
					    exit();
					} else {
						//ISPC-2745 Carmen 17.11.2020
						//create batch name
						$Batch_name = false;
						$Batch_name = $pseudo_post['invoice_data']['prefix'].$pseudo_post['invoice_data']['invoice_number'];
							
						$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'bre_hospiz_sapv_invoice');
							
						if($template_data)
						{
							// generate invoice page
							$tokenfilter = array();
							$tokenfilter['invoice']['address'] = $pseudo_post['invoice_data']['address'];
							$tokenfilter['client']['city'] = $pseudo_post['client_details']['city'];
							$tokenfilter['client']['institutskennzeichen'] = $pseudo_post['invoice_data']['institutskennzeichen'];
							if($pseudo_post['invoice_data']['completed_date'] != "0000-00-00 00:00:00" && $pseudo_post['invoice_data']['completed_date'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['invoicedate'] = date('d.m.Y', strtotime($pseudo_post['invoice_data']['completed_date']));
							}
							else
							{
								$tokenfilter['invoice']['invoicedate'] = "";
							}
						
							$tokenfilter['invoice']['prefix'] = $pseudo_post['invoice_data']['prefix'];
							$tokenfilter['invoice']['invoicenumber'] = $pseudo_post['invoice_data']['invoice_number'];
							$tokenfilter['invoice']['full_invoice_number'] = $pseudo_post['invoice_data']['prefix'].$pseudo_post['invoice_data']['invoice_number'];
							if($pseudo_post['invoice_data']['first_active_day'] != "0000-00-00 00:00:00" && $pseudo_post['invoice_data']['first_active_day'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['first_active_day'] = date('d.m.Y', strtotime($pseudo_post['invoice_data']['first_active_day']));
							}
							else
							{
								$tokenfilter['invoice']['first_active_day'] = "-";
							}
							if($pseudo_post['invoice_data']['last_active_day'] != "0000-00-00 00:00:00" && $pseudo_post['invoice_data']['last_active_day'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['last_active_day'] = date('d.m.Y', strtotime($pseudo_post['invoice_data']['last_active_day']));
							}
							else
							{
								$tokenfilter['invoice']['last_active_day'] = "-";
							}
						
							$tokenfilter['invoice']['healthinsurancenumber'] = $pseudo_post['invoice_data']['insurance_no'];
							$tokenfilter['invoice']['health_insurance_ik'] = $pseudo_post['invoice_data']['health_insurance_ik'];
							$tokenfilter['invoice']['healthinsurance_versnr'] = $pseudo_post['invoice_data']['healthinsurance_versnr'];
						
						
							$tokenfilter['patient'] = $pseudo_post['patient_details'];
							$tokenfilter['invoice']['patient_pflegestufe'] = $pseudo_post['patient_pflegestufe'];
						
							if($post['healthinsurance_name'] != "")
							{
								$tokenfilter['healthinsurance']['healthinsurance_name'] = $pseudo_post['invoice_data']['healthinsurance_name'];
							}
							else
							{
								$tokenfilter['healthinsurance']['healthinsurance_name'] = "--";
							}
						
							$tokenfilter['invoice']['unique_id'] = $pseudo_post['invoice_data']['id'];
						
							if($pseudo_post['invoice_data']['current_period_start'] != "0000-00-00 00:00:00" && $pseudo_post['invoice_data']['current_period_start'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['invoice_period_start'] = date('d.m.Y', strtotime($pseudo_post['invoice_data']['current_period_start']));
							}
							else
							{
								$tokenfilter['invoice']['invoice_period_start'] = "-";
							}
							if($pseudo_post['invoice_data']['current_period_end'] != "0000-00-00 00:00:00" && $pseudo_post['invoice_data']['current_period_end'] != "1970-01-01 00:00:00")
							{
								$tokenfilter['invoice']['invoice_period_end'] = date('d.m.Y', strtotime($pseudo_post['invoice_data']['current_period_end']));
							}
							else
							{
								$tokenfilter['invoice']['invoice_period_end'] = "-";
							}
						
							if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'])
							{
								$tokenfilter['invoice']['invoiceamount'] = number_format($pseudo_post['invoice_data']['invoice_total'], '2', ',', '.');
							}
							else
							{
								$tokenfilter['invoice']['invoiceamount'] = number_format($pseudo_post['invoice_data']['invoice_total'], '2', ',', '.');
							}
						
							$bre_sapv_hospiz_invoice_items['items'] = $pseudo_post['invoice_data']['items'];

							
							
							foreach($bre_sapv_hospiz_invoice_items['items'] as $kitem => &$vitem)
							{
								$vitem['shortcut_description'] = $this->view->translate('shortcut_name_'.$vitem['shortcut']);
								if(date('Y-m-d', strtotime($vitem['start_active'])) != '1970-01-01')
								{
									$vitem['shortcut_description'] .= date('Y-m-d', strtotime($vitem['start_active']));
								}
								if(date('Y-m-d', strtotime($vitem['end_active'])) != '1970-01-01')
								{
									$vitem['shortcut_description'] .= ' - ' . date('Y-m-d', strtotime($vitem['end_active']));
								}
								
							}
						
							if(count($pseudo_post['invoice_data']) > '0')
							{
								$rows = count($bre_sapv_hospiz_invoice_items['items']);
								$grid = new Pms_Grid($bre_sapv_hospiz_invoice_items['items'], 1, $rows, "bre_sapv_hospiz_invoice_items_list_pdf.html");
								//$grid_short = new Pms_Grid($sgbxi_invoice_items['items'], 1, $rows, "bw_sgbxi_invoice_items_list_pdf_short.html");
									
								$grid->invoice_total = $tokenfilter['invoice']['invoiceamount'];
								$grid->max_entries = $rows;
									
								/* $grid_short->invoice_total = $tokenfilter['invoice']['invoiceamount'];
								 $grid_short->max_entries = $rows; */
						
								$html_items = $grid->renderGrid();
								//$html_items_short = $grid_short->renderGrid();
							}
							else
							{
								$html_items = "";
								$html_items_short = "";
							}
						
							$tokenfilter['invoice']['invoice_items_html'] = $html_items;
							//$tokenfilter['invoice']['invoice_items_html_short'] = $html_items_short;
							//print_r($tokenfilter); exit;
						
							$docx_helper = $this->getHelper('CreateDocxFromTemplate');
							$docx_helper->setTokenController('invoice');
						
							//create public/joined_files/ dir
							while(!is_dir(PDFJOIN_PATH))
							{
								mkdir(PDFJOIN_PATH);
								if($i >= 50)
								{
									exit; //failsafe
								}
								$i++;
							}
						
							//create public/joined_files/$clientid dir
							$pdf_path = PDFJOIN_PATH . '/' . $clientid;
						
							while(!is_dir($pdf_path))
							{
								mkdir($pdf_path);
								if($i >= 50)
								{
									exit; //failsafe
								}
								$i++;
							}
						
							$tmpstmp = isset($this->view->folder_stamp) ? $this->view->folder_stamp : time();
						
							while(!is_dir($pdf_path . '/' . $tmpstmp))
							{
								mkdir($pdf_path . '/' . $tmpstmp);
								if($i >= 50)
								{
									exit; //failsafe
								}
								$i++;
							}
						
							$template = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
						
							$destination_path = $pdf_path . '/' . $tmpstmp . '/';
						
							$docx_helper->setOutputFile($destination_path.$Batch_name);
						
						
							//do not add extension !
							$docx_helper->setBrowserFilename($Batch_name);
						
							$docx_helper->create_pdf ($template, $tokenfilter) ;
						
							$docx_helper->download_file();
							exit;
						}
						else 
						{
	    					// $this->generate_pdf($pseudo_post, "BreHospizSapvPerformanceInvoice", $template_files, $orientation, $background_pages);// ISPC-2472 @Ancuta 07.11.2019
						   $this->generate_pdf($pseudo_post, $pdf_file_name, $template_files, $orientation, $background_pages);
						   exit;
						}
					}
				}
			}
			else if(strlen($_REQUEST['invoiceid']) == '0')
			{
				//redirect if no invoiceid is present
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}
		
		
		public function secondclientperformancerecordAction()
		{
			set_time_limit(600);
			setlocale(LC_ALL, 'de_DE.UTF8');

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$tm = new TabMenus();
			$client = new Client();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$bw_invoices = new BwInvoices();

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}

			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			
			if($_REQUEST['show_errors'] == "1" && $userid == "338"){
				error_reporting(E_ALL & ~E_NOTICE & ~E_WARNING & ~E_STRICT);
			}
// 				error_reporting(E_ALL & ~E_WARNING & ~E_STRICT);
// 			error_reporting(E_ALL);
			
			
			$client_details = $client->getClientDataByid($clientid);

			$this->view->clientid = $clientid;
			$whereepid = 'p.isstandby = 0 and p.isstandbydelete = 0 and p.isdelete = 0 and ';
			$client_patients = $this->getAllClientPatients($clientid, $whereepid);
			$this->view->client_details = $client_details[0];
			
			$ipids = array();
			foreach($client_patients as $k_cl_pat => $v_cl_pat)
			{
				$ipids[] = $v_cl_pat['ipid'];
				$epids[$v_cl_pat['ipid']] = $v_cl_pat['EpidIpidMapping']['epid'];
			}
			$ipids = array_values(array_unique($ipids));
			
			if(empty($ipids)){
// 				return array();
			}
			if($_REQUEST['spipid'] && $userid == "338" ){
				$ipids = array($_REQUEST['spipid']);
			}

			
			//health insurance divisions
			$hi_perms_divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);

			//patients health insurance
			$healthinsu_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids);

			//Pateint days START
			//curent period
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $ipids;
			$patient_days = Pms_CommonData::patients_days($conditions);
			//Pateint days END

			$all_patients_periods = array();
			
			$patient_days2locationtypes = array();
			$hospital_days_cs_dmY = array();
			$hospiz_days_cs_dmY = array();
				
			foreach($patient_days as $k_ipid => $patient_data)
			{
				//used to create months selector
				$all_patients_periods = array_merge_recursive($all_patients_periods, $patient_data['active_periods']);

				//used in flatrate
				if(empty($patient_periods[$k_ipid]))
				{
					$patient_periods[$k_ipid] = array();
				}

				array_walk_recursive($patient_data['active_periods'], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$patient_periods[$k_ipid] = array_merge($patient_periods[$k_ipid], $patient_data['active_periods']);

				//hospital days cs
				if(!empty($patient_data['hospital']['real_days_cs']))
				{
					$hospital_days_cs[$k_ipid] = $patient_data['hospital']['real_days_cs'];
					array_walk($hospital_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//hospiz days cs
				if(!empty($patient_data['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
					array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//real active days
				if(!empty($patient_data['real_active_days']))
				{
					$active_days_in_period_cs[$k_ipid] = $patient_data['real_active_days'];
					array_walk($active_days_in_period_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//treatment days
				if(!empty($patient_data['treatment_days']))
				{
					$treatment_days_cs[$k_ipid] = $patient_data['treatment_days'];
					array_walk($treatment_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//active days
				if(!empty($patient_data['active_days']))
				{
					$active_days[$k_ipid] = $patient_data['active_days'];
					array_walk($active_days[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				if(empty($hospital_days_cs[$k_ipid]))
				{
					$hospital_days_cs[$k_ipid] = array();
				}

				if(empty($hospiz_days_cs[$k_ipid]))
				{
					$hospiz_days_cs[$k_ipid] = array();
				}

				$hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);
//				array_walk($active_days[$k_ipid], function(&$value) { $value = date("Y-m-d", strtotime($value)); });
				
				
				
				//hospital days cs
				if(!empty($patient_data['hospital']['real_days_cs']))
				{
					$hospital_days_cs_dmY[$k_ipid] = $patient_data['hospital']['real_days_cs'];
				}
				//hospiz days cs
				if(!empty($patient_data['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs_dmY[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
				}
				
				
				foreach($patient_data['locations'] as $pat_location_row_id => $pat_location_data)
				{
					foreach($pat_location_data['days'] as $kl=>$lday)
					{
						if(in_array($lday,$patient_data['real_active_days']))
						{
				
							if( empty($pat_location_data['type'])){
								$pat_location_data['type'] = 0 ;
							}
								
							if($pat_location_data['type'] == "4" )
							{
								$patient_days2locationtypes[$k_ipid][$lday][] = "3";
							}
							else
							{
								$patient_days2locationtypes[$k_ipid][$lday][] = $pat_location_data['type'];
							}
						}
					}
				}
				
			}

			foreach( $patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$del_val = "1";
					if ( ! in_array($loc_day,$hospital_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
						unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
					}
						
					/*
					 $del_val = "2";
					 if ( ! in_array($loc_day,$hospiz_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
					 unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
					 }
					 */
				}
			}
			foreach($patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$patient_days2locationtypes[$pipid][$loc_day] = end($day_loc_types);
				}
			}
			
// 			dd($patient_days2locationtypes);
// 			exit;
			$all_patients_periods = array_values($all_patients_periods);


			$months = array();
			foreach($all_patients_periods as $k_period => $v_period)
			{
				$period_months = $this->get_period_months($v_period['start'], $v_period['end'], "Y-m");
				$months = array_merge($months, $period_months);
			}
			$months = array_values(array_unique($months));

			foreach($months as $k_m => $v_m)
			{
				$months_unsorted[strtotime($v_m)] = $v_m;
			}
			ksort($months_unsorted);
			$months = array_values(array_unique($months_unsorted));


			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
				$month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
			}

			//get number of days in each month + start/end day START
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == 0)
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_performance';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$days_in_period = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			foreach($active_days as $k_ipid => $ipid_days)
			{
				$active_days_in_period[$k_ipid] = array_intersect($days_in_period, $ipid_days);
				if(empty($active_days_in_period[$k_ipid]))
				{
					unset($ipids[array_search($k_ipid, $ipids)]);
				}
			}

			//overall period
			$overall_period['start'] = $months_details[$months[0]]['start'];
			$overall_period['end'] = $current_period['end'];

			$days_in_period_overall = $patientmaster->getDaysInBetween($overall_period['start'], $overall_period['end']);

			if($months_details[$months[0]]['start'] != $current_period['start'])
			{
				//used in overall performance record data start till the end of previous month (curent month-01 -1 day)
				$overall_performance_period['start'] = $months_details[$months[0]]['start'];
				$overall_performance_period['c_month_end'] = date('Y-m-d', strtotime('-1 day', strtotime($current_period['start'])));
				$overall_performance_period['end'] = date('Y-m-d', strtotime('-1 day', strtotime('+1 month', strtotime($current_period['start']))));
			}
			else
			{
				//no overall period (no previous months)
				$overall_performance_period['start'] = "1970-01-01";
				$overall_performance_period['end'] = "1970-01-01";
			}
			
			foreach($patient_periods as $k_ipid => $v_periods)
			{
				foreach($v_periods as $k_period => $v_period)
				{
					if(empty($patients_periods_days[$k_ipid]))
					{
						$patients_periods_days[$k_ipid] = array();
					}
					
					$patients_periods_days[$k_ipid] = array_merge($patients_periods_days[$k_ipid], $patientmaster->getDaysInBetween($v_period['start'], $v_period['end']));
				}
			}

			$days_in_period_overall_performance = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['end']);
			$days_in_period_overall_performance_cmonth = $patientmaster->getDaysInBetween($overall_performance_period['start'], $overall_performance_period['c_month_end']);
			//sapv in curent period
			//(ipid-day-verordnet_statuses)
			$sapv_days_cs = $this->get_period_sapvs($ipids, $current_period, $hospital_hospiz_days_cs);

			//sapv till last day of prev month
			$sapv_days_overall = $this->get_period_sapvs($ipids, $overall_performance_period, $hospital_hospiz_days_cs);


			foreach($sapv_days_cs as $k_s_ipid => $v_s_data)
			{
				$sapv_days_inperiod_cs[$k_s_ipid] = array_keys($v_s_data);
				asort($sapv_days_inperiod_cs[$k_s_ipid]);
			}

			//get pflegestuffe in current period
			$pflege_arr = $pflege->get_multiple_patatients_mt_period($ipids, $current_period['start'], $current_period['end']);

			foreach($pflege_arr as $k_pflege => $v_pflege)
			{
				$patients_pflege[$v_pflege['ipid']] = $v_pflege['stage'];
			}

			//get all sets form types
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
				$set_one_ids[] = $v_set_one['id'];
			}

			$set_two = $form_types->get_form_types($clientid, '2');
			foreach($set_two as $k_set_two => $v_set_two)
			{
				$set_two_ids[] = $v_set_two['id'];
			}

			$set_three = $form_types->get_form_types($clientid, '3');
			foreach($set_three as $k_set_three => $v_set_three)
			{
				$set_three_ids[] = $v_set_three['id'];
			}


			$set_fourth = $form_types->get_form_types($clientid, '4');
			foreach($set_fourth as $k_set_fourth => $v_set_fourth)
			{
				$set_fourth_ids[] = $v_set_fourth['id'];
			}

			$set_ids['one'] = $set_one_ids;
			$set_ids['two'] = $set_two_ids;
			$set_ids['three'] = $set_three_ids;
			$set_ids['fourth'] = $set_fourth_ids;

			//get contact forms in current period and in overall period
			$contact_forms_days = array();
			$contact_forms_days = $this->get_patients_period_cf($ipids, $current_period);
			$contact_forms_overall_days = array();
			$contact_forms_overall_days = $this->get_patients_period_cf($ipids, $overall_performance_period);
			if($_REQUEST['dbggx'])
			{

				print_r(count($ipids)."\n");
				print_r("count_cf: ");
				print_r(count($contact_forms_days));
				print_r("\n");
				
				print_r("count_overall_cf: ");
				print_r(count($contact_forms_overall_days));
				print_r("\n");

				print_r($contact_forms_days);
				print_r("overall2 \n");

				print_r($contact_forms_overall_days);
				exit;
			}
			
			//get patients discharge dates
			$pat_dis = new PatientDischarge();
			$patients_discharge = $pat_dis->get_patients_discharge($ipids);
			
			$patients_discharge_date = array();
			foreach($patients_discharge as $k_dis => $v_dis)
			{
				$patients_discharge_date[$v_dis['ipid']] = $v_dis['discharge_date'];
			}
			
			$contact_forms_ids[] = '999999999';

			$exclude_after_discharge = array();
			foreach($ipids as $k_ipid => $v_ipid)
			{
				//last discharge date
//				$patients_discharge_date[$v_ipid] = end($patient_days[$v_ipid]['discharge']);

				foreach($contact_forms_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							if(strtotime(date('Y-m-d H:i:s', strtotime($v_cf['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge[] = $v_cf['id'];
								unset($contact_forms_ids_overall[$k_cf_day][$k_cf]);
							}
							$contact_forms_ids[] = $v_cf['id'];
							$all_contact_forms[$v_cf['id']] = $v_cf;
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);


				foreach($contact_forms_overall_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cfo => $v_cfo)
					{
						if(is_numeric($k_cfo))
						{
							if(isset($patients_discharge_date[$v_ipid]) &&  strtotime(date('Y-m-d H:i:s', strtotime($v_cfo['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge_overall[] = $v_cfo['id'];
								unset($contact_forms_ids_overall[$k_cf_day][$k_cfo]);
							}
							$contact_forms_ids_overall[] = $v_cfo['id'];
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);
			}

			$block_classification = new FormBlockClassification();
			$classification_data = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids);
			$classification_data_overall = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids_overall);


			foreach($all_contact_forms as $k_cf => $v_cf)
			{
				$k_cf_day = date('Y-m-d', strtotime($v_cf['start_date']));

				if(array_key_exists($v_cf['id'], $classification_data) && in_array($k_cf_day, $active_days_in_period_cs[$v_cf['ipid']]))
				{
					if((in_array($v_cf['form_type'], $set_ids['fourth']) && $classification_data[$v_cf['id']]['intern'] == '0') || !in_array($v_cf['form_type'], $set_ids['fourth']))
					{
						$contact_forms_days_ids[$k_cf_day][] = $v_cf['id'];
						$contact_forms2form_types[$v_cf['id']][] = $v_cf['form_type'];
					}
				}

				if(!array_key_exists($v_cf['id'], $classification_data))
				{
					unset($contact_forms_ids[array_search($v_cf['id'], $contact_forms_ids)]);
				}
			}

			$contact_forms_ids = array_values(array_unique($contact_forms_ids));


			//get patients courses
			$course_days = $this->get_patients_period_course($ipids, $patients_discharge_date, $current_period);

			//get real active patient days (active, with sapv and no hospital/hospiz)
			$real_active_days_cs = $this->patients_real_active_days($ipids, $active_days, $hospital_hospiz_days_cs, $sapv_days_cs);

			//get no sapv days
			$days_nosapv_cs = array();
			$days_nosapv_cs = $this->nosapv_days($active_days, $hospital_hospiz_days_cs, $sapv_days_cs);
			//unset ipids which have no contact form or course in selected period
			foreach($ipids as $kipid => $v_ipid)
			{
				if(count($course_days[$v_ipid]) == "0" && count($contact_forms_days[$v_ipid]) == "0" && count($sapv_days_cs[$v_ipid]) == "0")
				{
					unset($ipids[$kipid]);
				}
			}

			if( empty($ipids)){
				$ipids[] = '999999999'; //dumy control for no ipids :: NO 
// 				return array();
			}
			$ipids = array_values(array_unique($ipids));


			//get patient fall periods to be used in flatrate
			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($patient_days[$v_ipid]['active_periods'] as $k_period => $v_period)
				{
					$start_periods[$v_ipid][] = date('Y-m-d', strtotime($v_period['start']));
					$end_periods[$v_ipid][] = date('Y-m-d', strtotime($v_period['end']));
				}
			}

			//get check for flatrate case and return "7 days flat rate" days
			$flatrate = $this->multi_patients_flatrate_days($ipids, $clientid, $start_periods, $end_periods, $current_period, $active_days, $patient_periods, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_days);

			//get performance shortcuts
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$this->view->shortcuts = $shortcuts['performance'];

// 			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);
			$master_price_list = $p_list->get_period_price_list_specific($current_period['start'], $current_period['end'],"PricePerformance");
			$this->view->price_list = $master_price_list;

			$overall_patient_shortcuts = array();
			$overall_patient_shortcuts = $this->second_patients_performance_overall_saved($ipids, $clientid, $overall_performance_period, $active_days, $set_ids, $flatrate, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_overall, $course_days, $contact_forms_overall_days, $classification_data_overall,$patient_days2locationtypes);
			
			
			$flatrate_continued = $this->multi_patients_flatrate_days_continued($ipids, $clientid, $start_periods, $end_periods, $current_period, $active_days,         $patient_periods, $days_nosapv_cs,      $hospital_hospiz_days_cs, $patient_days,     $overall_patient_shortcuts);
// 			dd($overall_patient_shortcuts,$flatrate_continued);
			
			if($_REQUEST['dbg_fl'] == "1")
			{
				print_r("flatrate\n");
				print_r($flatrate);
				print_r("overall_patient_shortcuts\n");
				print_r($overall_patient_shortcuts);
				print_r("flatrate_continued\n");
				print_r($flatrate_continued);
//				print_r("days_in_period_overall_performance_cmonth\n");
//				print_r($days_in_period_overall_performance_cmonth);
//				print_r("course_days\n");
//				print_r($course_days);
				exit;
			}
			
			/* ###################################### */
			/* ####### SAVED DATA ################### */
			/* ###################################### */
			//get saved data ISPC-1927
			$bw_pr = new BwPerformanceRecord();
			$full_price_list = array();
			foreach($ipids as $k=>$ipid){
				 $full_price_list[$ipid] = $master_price_list;
			}
			$bw_data = $bw_pr->get_multiple_bw_performance_record_in_period($ipids, $active_days_in_period, $full_price_list, $patient_days2locationtypes);
				
			
			$master_data = array();
			$overall_data_per_patient = array();
			$week_numbers_arr[] = '9999999999';
			foreach($ipids as $k_ipid => $ipid)
			{
				$overall_patient_shortcuts[$ipid]['shortcuts_res'] = array();
				foreach($overall_patient_shortcuts[$ipid]['shortcuts_dates'] as $k_short_overall => $v_short_overall)
				{
					if(in_array($k_short_overall, $days_in_period_overall_performance_cmonth))
					{
//						$overall_shorts[$ipid]['shortcuts_dates'][$k_short_overall] = $v_short_overall;
						$overall_patient_shortcuts[$ipid]['shortcuts_res'] = array_merge($overall_patient_shortcuts[$ipid]['shortcuts_res'], $v_short_overall);
					}
				}
//				$overall_patient_shortcuts[$ipid]['shortcuts'] = array_unique(array_values($overall_shorts[$ipid]['shortcuts_dates']));

				foreach($overall_patient_shortcuts[$ipid]['last_koord_dates'] as $kk_short_overall => $vk_short_overall)
				{
					if(in_array($kk_short_overall, $days_in_period_overall_performance_cmonth))
					{
						$overall_k_shorts[$ipid]['last_koord_dates'][$kk_short_overall] = $vk_short_overall;
					}
				}
				$overall_patient_shortcuts[$ipid]['last_koord_dates'] = $overall_k_shorts[$ipid]['last_koord_dates'];
 

				foreach($days_in_period as $k_period_day => $v_period_day)
				{
					
					// the day
					$day_location_type[$ipid] = "";
					$day_location_type[$ipid] = $patient_days2locationtypes[$ipid][date('d.m.Y',strtotime($v_period_day))];
					
					
					$day_shortcuts[$ipid] = array();
					if(count($month_shortcuts[$ipid]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}
					
					if(empty($overall_data[$v_period_day]))
					{
						$overall_data[$v_period_day] = array();
					}
					
					
					if(empty($overall_data_per_patient[$ipid]))
					{
						$overall_data_per_patient[$ipid] = array();
					}
					
					$master_data[$ipid][$v_period_day] = array();
					
					if(!empty($bw_data[$ipid][$v_period_day])){
						
						foreach($bw_data[$ipid][$v_period_day] as $ksortcut =>$sh_values){
							if($sh_values['qty'] > 0 ){
									
								if($ksortcut == "37b1" && $sh_values['pay_days'] == "1"){
									
									$day_shortcuts[$ipid][] = $ksortcut;
									$master_data[$ipid][$v_period_day][$ksortcut]['shortcut'][] = $ksortcut;
									$master_data[$ipid][$v_period_day][$ksortcut]['qty'] = '1';
									$master_data[$ipid][$v_period_day][$ksortcut]['location_type'] = $day_location_type[$ipid];
									$master_data[$ipid][$v_period_day][$ksortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$ksortcut]['price'];;
									$master_data[$ipid][$v_period_day][$ksortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$ksortcut]['list'];
									
									$totals[$ipid][$ksortcut] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$ksortcut]['price'];
									
									$overall_data[$v_period_day][$ksortcut] += '1';
									$overall_data_per_patient[$ipid][$v_period_day][$ksortcut] += '1';
									
								} 
								else if($ksortcut != "37b1")
								{
									
									$day_shortcuts[$ipid][] = $ksortcut;
									$master_data[$ipid][$v_period_day][$ksortcut]['shortcut'][] = $ksortcut;
									$master_data[$ipid][$v_period_day][$ksortcut]['qty'] = '1';
									$master_data[$ipid][$v_period_day][$ksortcut]['location_type'] = $day_location_type[$ipid];
									$master_data[$ipid][$v_period_day][$ksortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$ksortcut]['price'];;
									$master_data[$ipid][$v_period_day][$ksortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$ksortcut]['list'];
									
									$totals[$ipid][$ksortcut] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$ksortcut]['price'];;
									
									$overall_data[$v_period_day][$ksortcut] += $sh_values['qty'];
									$overall_data_per_patient[$ipid][$v_period_day][$ksortcut] +=  $sh_values['qty'];
								}
							}
						}
					}
					else
					{
			
	
						if(count($overall_patient_shortcuts[$ipid]['last_koord_dates']) > '0')
						{
							$last_koord_date_overall[$ipid] = end($overall_patient_shortcuts[$ipid]['last_koord_dates']);
							$week_numbers_arr[$ipid][$last_koord_date_overall[$ipid]] = date('W', strtotime($last_koord_date_overall[$ipid]));
						}
	
						$last_koord_dates[$ipid] = $overall_patient_shortcuts[$ipid]['last_koord_dates'];
	
						//calculate set one form_type visits
						//first get flatrate exception and set shortcut
						$shortcut = '';
						$set_one_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
	
						if((in_array($v_period_day, $flatrate[$ipid]['pay_days']) || in_array($v_period_day, $flatrate_continued[$ipid]['pay_days'])) && !in_array($v_period_day, $hospital_days[$ipid]))
						{
							$shortcut = '37b1';
							$month_shortcuts[$ipid][] = $shortcut;
							$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = $shortcut;
						}
	
						foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf_one)
						{
							if(!in_array($v_cf_one['id'], $exclude_after_discharge) && in_array($v_cf_one['form_type'], $set_one_ids))
							{
								
								if(
									!in_array($v_period_day, $flatrate[$ipid]) 
									&& !in_array($v_period_day, $flatrate_continued[$ipid]) 
									&& array_key_exists($v_period_day, $contact_forms_days[$ipid]) 
									&& in_array($v_period_day, $active_days_in_period_cs[$ipid]) 
									&& !in_array($v_period_day, $hospital_days_cs[$ipid]) 
									&& !in_array($v_period_day, $hospiz_days_cs[$ipid]) 
									&& count($set_one_result[$ipid]) != 0
										) //normal set conditions
								{
	//								we have visits=> check if there are required visits for this action set
									if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]) || in_array('3', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$shortcut = '37b2';
									}
								}
							}
						}
	
						if(!empty($shortcut))
						{
							if($shortcut == '37b1' && (in_array($v_period_day, $flatrate[$ipid]['pay_days']) || in_array($v_period_day, $flatrate_continued[$ipid]['pay_days'])))
							{
								$master_data[$ipid][$v_period_day][$shortcut]['pay_days'] = '1';
							}
							$day_shortcuts[$ipid][] = $shortcut;
							$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
							$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
							$master_data[$ipid][$v_period_day][$shortcut]['location_type'] = $day_location_type[$ipid];
							$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];
							$master_data[$ipid][$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['list'];
	
							$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];
	
							$overall_data[$v_period_day][$shortcut] += '1';
							$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
						}
	
						//sapv overwrite if formtype is set 4
						//calculate set two form_type visits
						//exclude calculation if following shortcuts are calculated on current day
						$set_fourth_result[$ipid] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
	
	
						if(
							!in_array($v_period_day, $flatrate[$ipid]) 
							&& !in_array($v_period_day, $flatrate_continued[$ipid]) 
							&& !in_array('37b2', $day_shortcuts[$ipid]) 
							&& in_array($v_period_day, $active_days_in_period_cs[$ipid]) 
							&& !in_array($v_period_day, $hospital_days_cs[$ipid]) 
							&& !in_array($v_period_day, $hospiz_days_cs[$ipid]))
						{
							$set_two_result[$ipid] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
	
							if((count($set_two_result[$ipid]) != 0 || in_array('U', $course_days[$ipid][$v_period_day])) && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
							{
								foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
								{
									if(is_numeric($k_cf) && !in_array($v_cf['id'], $exclude_after_discharge))
									{
										$shortcut = '';
										if(
											! in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) 
											&& ! in_array('37b7', $month_shortcuts[$ipid]) 
											&& ! in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts_res'])
											&& ! in_array($v_cf['form_type'], $set_one_ids))
										{
											$shortcut = '37b5';
										}
	
										if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
										{
											$shortcut = '37b6';
										}
	
										if(!empty($shortcut))
										{
											if($shortcut == '37b5')
											{
												$month_shortcuts[$ipid][] = '37b5';
												$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b5';
											}
	
											$day_shortcuts[$ipid][] = $shortcut;
										}
	
										if(!empty($shortcut))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
											if($shortcut == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_two_ids) ))
											{
												$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
	
												$overall_data[$v_period_day][$shortcut] += '1';
												$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
											}
											else if($shortcut == '37b5')
											{
												$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
	
												$overall_data[$v_period_day][$shortcut] += '1';
												$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
											}
	
											$master_data[$ipid][$v_period_day][$shortcut]['location_type'] = $day_location_type[$ipid];
											$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
											$master_data[$ipid][$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['list'];
											$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
										}
									}
								}
	
								foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
								{
									if($v_day_course == 'U')
									{
										$shortcut = '';
	
										if(
												! in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) 
												&& ! in_array('37b7', $month_shortcuts[$ipid]) 
												&& ! in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts_res']))
										{
											$shortcut = '37b5';
										}
	
										if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
										{
											$shortcut = '37b6';
										}
	
										if(!empty($shortcut))
										{
											if($shortcut == '37b5')
											{
												$month_shortcuts[$ipid][] = '37b5';
												$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b5';
											}
	
											$day_shortcuts[$ipid][] = $shortcut;
										}
	
										if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['location_type'] = $day_location_type[$ipid];
											$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
											$master_data[$ipid][$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['list'];
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
											$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
	
											$overall_data[$v_period_day][$shortcut] += '1';
											$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
										}
									}
								}
							}
						}
	
						//calculate set three form_type visits
						//exclude calculation if following shortcuts are calculated on current day
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
						{
							$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
	
							$set_three_result[$ipid] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
	
							if((count($set_three_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
							{
								foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
								{
									if(is_numeric($k_cform) && !in_array($v_cform['id'], $exclude_after_discharge))
									{
										$shortcut = '';
	
										if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array($v_cform['form_type'], $set_one_ids))
										{
											if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
											{
												$shortcut = '37b8';
												$week_number[$ipid] = date('W', strtotime($v_period_day));
											}
											else
											{
												$shortcut = '37b7';
											}
										}
	
										if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
	
										if(!empty($shortcut))
										{
											if($shortcut == '37b7')
											{
												$month_shortcuts[$ipid][] = '37b7';
												$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b7';
											}
	
											$day_shortcuts[$ipid][] = $shortcut;
										}
	
										if(!empty($shortcut))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
											if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids))
											{
												$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
												$week_numbers_arr[$ipid][] = $week_number[$ipid];
	
												$overall_data[$v_period_day][$shortcut] += '1';
												$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
												
											}
											else if($shortcut == '37b7')
											{
												$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];
	
												$overall_data[$v_period_day][$shortcut] += '1';
												$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
											}
											$master_data[$ipid][$v_period_day][$shortcut]['location_type'] = $day_location_type[$ipid];
											$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
											$master_data[$ipid][$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['list'];
											$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
											$last_koord_dates[$ipid][] = $v_period_day;
										}
									}
								}
	
								foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
								{
									$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
									if($v_day_course == 'V')
									{
										$shortcut = '';
	
										if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts_res']))
										{
											if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
											{
												$shortcut = '37b8';
												$week_number[$ipid] = date('W', strtotime($v_period_day));
											}
											else
											{
												$shortcut = '37b7';
											}
										}
	
										if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
	
										if(!empty($shortcut))
										{
											if($shortcut == '37b7')
											{
												$month_shortcuts[$ipid][] = '37b7';
												$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b7';
											}
	
											$day_shortcuts[$ipid][] = $shortcut;
										}
	
										if(($shortcut == '37b7' || $shortcut == '37b8'))
										{
											if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
											{
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
												$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
												$master_data[$ipid][$v_period_day][$shortcut]['location_type'] = $day_location_type[$ipid];
												$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
												$master_data[$ipid][$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['list'];
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
												$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
												$week_numbers_arr[$ipid][] = $week_number[$ipid];
												$last_koord_dates[$ipid][] = $v_period_day;
	
												$overall_data[$v_period_day][$shortcut] += '1';
												$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
											}
											else if($shortcut == '37b7')
											{
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
												$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
												$master_data[$ipid][$v_period_day][$shortcut]['location_type'] = $day_location_type[$ipid];
												$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
												$master_data[$ipid][$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['list'];
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
												$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
												$last_koord_dates[$ipid][] = $v_period_day;
	
												$overall_data[$v_period_day][$shortcut] += '1';
												$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
											}
										}
									}
								}
							}
						}
	
						if((count($set_fourth_result[$ipid]) != 0 || count($set_one_result[$ipid]) != 0) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
						{
							//setup each form sapv based on classification block selection
							foreach($contact_forms_days_ids[$v_period_day] as $k_cf_day => $v_cf_day)
							{
								if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['intern'] != '1')
								{
									if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
									else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
									{
										//switch between BE-KO if VV is not BE
										if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
										}
										else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
										}
									}
									else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
								}
							}
	
							//calculate set 4 (ISPC-241)
							//U & V at the top
							//beratung
							if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
							{
								foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
								{
									//check if there are 2 beratung change sapv in koord
									if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && (count($set_fourth_result[$ipid]) != 0 || count($set_one_result[$ipid]) != 0) && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
									}
	
									if(is_numeric($k_cf) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1' && !in_array($v_cf['id'], $exclude_after_discharge) && (in_array($v_cf['form_type'], $set_fourth_ids) && (($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')) || in_array($v_cf['form_type'], $set_one_ids)))
									{
										$shortcut = '';
										if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array('37b7', $month_shortcuts[$ipid]) && !in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts_res']))
										{
											$shortcut = '37b5';
										}
	
										if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5') //only b5 or b6
										{
											$shortcut = '37b6';
										}
	
										if(!empty($shortcut))
										{
											if($shortcut == '37b5')
											{
												$month_shortcuts[$ipid][] = '37b5';
												$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b5';
											}
	
											$day_shortcuts[$ipid][] = $shortcut;
										}
	
										if(!empty($shortcut))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
											if($shortcut == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_fourth_ids) || in_array($v_cf['form_type'], $set_one_ids)))
											{
												$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
	
												$overall_data[$v_period_day][$shortcut] += '1';
												$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
											}
											else if($shortcut == '37b5')
											{
												$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
	
												$overall_data[$v_period_day][$shortcut] += '1';
												$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
											}
	
											$master_data[$ipid][$v_period_day][$shortcut]['location_type'] = $day_location_type[$ipid];
											$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
											$master_data[$ipid][$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['list'];
											$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
										}
									}
								}
							}
	
							//koordination
							$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
	
							if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
							{
	
								foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
								{
									if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2' && !in_array($v_cform['id'], $exclude_after_discharge))
									{
										$shortcut = '';
	
										if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts_res']))
										{
											if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
											{
												$shortcut = '37b8';
												$week_number[$ipid] = date('W', strtotime($v_period_day));
											}
											else
											{
												$shortcut = '37b7';
											}
										}
	
										if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
	
										if(!empty($shortcut))
										{
											if($shortcut == '37b7')
											{
												$month_shortcuts[$ipid][] = '37b7';
												$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b7';
											}
											$day_shortcuts[$ipid][] = $shortcut;
										}
	
										if(!empty($shortcut))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
	
											if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && (in_array($v_cform['form_type'], $set_fourth_ids) || in_array($v_cform['form_type'], $set_one_ids)))
											{
												$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];
												$week_numbers_arr[$ipid][] = $week_number[$ipid];
	
												$overall_data[$v_period_day][$shortcut] += '1';
												$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
											}
											else if($shortcut == '37b7')
											{
												$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
												$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];
	
												$overall_data[$v_period_day][$shortcut] += '1';
												$overall_data_per_patient[$ipid][$v_period_day][$shortcut] += '1';
											}
	
											$master_data[$ipid][$v_period_day][$shortcut]['location_type'] = $day_location_type[$ipid];
											$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];;
											$master_data[$ipid][$v_period_day][$shortcut]['price_list'] = $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['list'];
											$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type[$ipid]][$shortcut]['price'];
											$last_koord_dates[$ipid][] = $v_period_day;
										}
									}
								}
							}
						}
	
						//add exclusion
						/* if(in_array($v_period_day, $sapv_days_inperiod_cs[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
						{
							foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
							{
								//check if contactform type for each days
								if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids) && (in_array('4', $sapv_days_cs[$ipid][$v_period_day]) || in_array('3', $sapv_days_cs[$ipid][$v_period_day]) ))
								{
									$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
								}
								else
								{
									//$clasifizierung[$v_period_day]['home_visit'] += 0;
									//sum classifizierung data if form is not housebesuche type(1)
									if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days_cs[$ipid][$v_period_day]) &&
										(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$ipid][$v_period_day]) || in_array('2', $sapv_days_cs[$ipid][$v_period_day])))
									{
										if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										}
										else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && !in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										}
										else
										{
											$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										}
									}
									else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$ipid][$v_period_day]) || in_array('2', $sapv_days_cs[$ipid][$v_period_day])))
									{
										if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										}
										else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && !in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										}
										else
										{
											$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										}
									}
									else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0') && in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids))
									{
										if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										}
										else if(in_array('2', $sapv_days_cs[$v_period_day]))
										{
											$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										}
									}
	
									$count_be[$ipid][$v_period_day] += 1;
								}
							}
						} */
					
					}
					ksort($overall_data[$v_period_day]);
					if(empty($master_data[$ipid][$v_period_day]))
					{
						unset($master_data[$ipid][$v_period_day]);
					}
				}
			}
			
// 			dd($overall_data_per_patient);
// 			dd($overall_data,$master_data);

			 
			
			if($_REQUEST['dbgf'])
			{
				print_r("Week Numbers\n");
				print_r($week_numbers_arr);
				print_r("\n\n");
			}

//			print_r($overall_data);
//			print_r("master_data\n");
//			print_r($master_data);
//			exit;
			$this->view->days_in_period = $days_in_period;
			$this->view->overall_data = $overall_data;

//			print_r("#1: ipids\n");
//			print_r($ipids);
//			print_r("#2: start_periods\n");
//			print_r($start_periods);
//			print_r("#3: end_periods\n");
//			print_r($end_periods);
//			print_r("#4: current_period\n");
//			print_r($current_period);
//			print_r("#5: real_active_days_cs\n");
//			print_r($real_active_days_cs);
//			print_r("#6: days_nosapv_cs\n");
//			print_r($days_nosapv_cs);
//			print_r("#7: hospital_hospiz_days_cs\n");
//			print_r($hospital_hospiz_days_cs);
//			print_r("overall_patient_shortcuts\n");
//			print_r($overall_patient_shortcuts);
//			print_r($course_days);
//			print_r($hospital_days_cs);
//			print_r($active_days);
//			print_r($real_active_days_cs);
//			print_r($start_periods);
//			print_r($end_periods);
//			print_r($patient_days);
//			print_r($active_days_in_period_cs);
//			print_r($contact_forms_days);
//			print_r($all_contact_forms);
//			print_r($classification_data);
//			print_r($contact_forms_days_ids);
//			print_r($contact_forms2form_types);
			if($_REQUEST['dbgf'])
			{
				print_r($master_data);

				print_r("\n\n EPIDS \n\n");
				foreach($master_data as $kmmdata => $vmmdata)
				{
					if(count($vmmdata) > '0')
					{
						print_r($epids[$kmmdata]." - [".$kmmdata."] \n");
					}
				}
				print_r("\n\n saved dataa  \n\n");
				print_r($bw_data);
				
				exit;
			}
			if($_REQUEST['dbgq1'])
			{
				print_r($overall_data);
				exit;
			}
		}
		
		private function second_patients_performance_overall($ipids, $clientid, $overall_period, $active_days, $set_ids, $flatrate, $master_price_list, $patients_periods_days, $hospital_days = false, $sapv_days = false, $course_days = false, $contact_forms_days = false, $classification_data = false)
		{
			if($_REQUEST['dbgss'])
			{
				print_r("ipids\n");
				print_r($ipids);
				print_r("overall_period\n");
				print_r($overall_period);
				print_r("active_days\n");
				print_r($active_days);
				print_r("set_ids\n");
				print_r($set_ids);
				print_r("flatrate\n");
				print_r($flatrate);
				print_r("patients_periods_days - days_in_period_overall\n");
				print_r($patients_periods_days);
				print_r("hospital_days\n");
				print_r($hospital_days);
				print_r("sapv_days\n");
				print_r($sapv_days);
				print_r("course_days\n");
				print_r($course_days);
				print_r("contact_forms_days\n");
				print_r($contact_forms_days);
				print_r("classification_data\n");
				print_r($classification_data);
				
				exit;
			}

			foreach($ipids as $k_ipid => $ipid)
			{
				foreach($active_days[$ipid] as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $patients_periods_days[$ipid]))
					{
						$active_days_in_period[$ipid][] = $v_active_day;
					}
				}
				

				foreach($course_days[$ipid] as $k_course_date => $v_course_details)
				{
					foreach($v_course_details as $k_couse => $v_course)
					{
						if($v_course == 'U' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('1', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['beratung'] += 1;
						}
						else if($v_course == 'V' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('2', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
						}
					}
				}

				$contact_forms_ids[$ipid][] = '999999999';
				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							$contact_forms_ids[$ipid][] = $v_cf['id'];
						}
					}
				}
				ksort($contact_forms_days[$ipid]);

				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data))
						{
							$contact_forms_days_ids[$ipid][$k_cf_day][] = $v_cf['id'];
							$contact_forms2form_types[$ipid][$v_cf['id']][] = $v_cf['form_type'];
						}
					}
				}

				$set_one_ids = $set_ids['one'];
				$set_two_ids = $set_ids['two'];
				$set_three_ids = $set_ids['three'];
				$set_fourth_ids = $set_ids['fourth'];

				$pseudo_overall_shortcuts[$ipid] = array();
				foreach($patients_periods_days[$ipid] as $k_period_day => $v_period_day)
				{

					$day_shortcuts[$ipid] = array();
					if(count($month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}

					$master_data[$ipid][$v_period_day] = array();

					//calculate set one form_type visits
					//first get flatrate exception and set shortcut
					$shortcut = '';
					if(in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$shortcut = '37b1';
						$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = $shortcut;
						$pseudo_overall_shortcuts[$ipid][] = $shortcut;
					}
					else if(!in_array($v_period_day, $flatrate[$ipid]) && array_key_exists($v_period_day, $contact_forms_days[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid])) //normal set conditions
					{

//					we have visits=> check if there are required visits for this action set
						$set_one_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(count($set_one_result[$ipid]) != 0 && (in_array('3', $sapv_days[$ipid][$v_period_day]) || in_array('4', $sapv_days[$ipid][$v_period_day])))
						{
							$shortcut = '37b2';
						}
					}

					if(!empty($shortcut))
					{
						$day_shortcuts[$ipid][] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['shortcut'] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
						$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
						$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
					}

					//sapv overwrite if formtype is set 4
					//calculate set two form_type visits
					//exclude calculation if following shortcuts are calculated on current day

					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_two_result[$ipid] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_two_result[$ipid]) != 0 || in_array('U', $course_days[$ipid][$v_period_day])) && in_array('1', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 && in_array('1', $sapv_days[$ipid][$v_period_day]) )
						)
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								if(is_numeric($k_cf))
								{
									$shortcut = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										$shortcut = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
									{
										$shortcut = '37b6';
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_two_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										}
										else if($shortcut == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
										$pseudo_overall_shortcuts[$ipid][] = '37b5';
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && $v_day_course == 'U')
								{
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}
					}

					//calculate set three form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					$week_number = array();
					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
						$set_three_result[$ipid] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(
							(count($set_three_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day])
						)
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform))
								{
									$shortcut = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids[$ipid]))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';
								$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
								{
									if(in_array('4', $sapv_days[$ipid][$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate[$ipid]['pay_days']))
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number[$ipid] = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
										$pseudo_overall_shortcuts[$ipid][] = '37b7';
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								if(($shortcut == '37b7' || $shortcut == '37b8') && $v_day_course == 'V')
								{
									if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$week_numbers_arr[$ipid][] = $week_number[$ipid];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}


					//calculate set 4 (ISPC-241)
					$set_fourth_result[$ipid] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

					if(count($set_fourth_result[$ipid]) != 0 && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						//setup each form sapv based on classification block selection
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['intern'] != '1')
							{
								if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									//switch between BE-KO if VV is not BE
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
							}
						}

						//U & V at the top
						//beratung
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								//check if there are 2 beratung change sapv in koord
								if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && count($set_fourth_result[$ipid]) != 0 && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
								}

								if(is_numeric($k_cf) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1')
								{
									$shortcut = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										$shortcut = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5') //only b5 or b6
									{
										$shortcut = '37b6';
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										}
										else if($shortcut == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
								}
							}
						}

						//koordination
						$last_koord_days[$ipid] = end($last_koord_dates[$ipid]);
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2')
								{
									$shortcut = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}
										$day_shortcuts[] = $shortcut;
									}

									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;

										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}

//					TODO:Continue adding [$ipid]
					if(in_array($v_period_day, $sapv_days[$ipid]))
					{
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							//check if contactform type for each days
							if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids))
							{
								if(in_array('4', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
								}
							}
							else
							{
								//sum classifizierung data if form is not housebesuche type(1)
								if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days[$ipid][$v_period_day]) &&
									(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
								}

								$count_be[$ipid][$v_period_day] += 1;
							}
						}
					}
				}
				
				$fl_start[$ipid] = false;
				foreach($master_data[$ipid] as $k_day => $v_day_values)
				{
					
					foreach($v_day_values as $k_shortcut => $v_shortcut_values)
					{
						$overall_shortcuts[$ipid][] = $k_shortcut;
						$overall_shortcuts_dates[$ipid][$k_day][] = $k_shortcut;
					}
					
					if(count($v_day_values) > '0' && count($v_day_values['37b1']) == '0')
					{
						$days_products[$ipid][] = $k_day;
					}
					elseif(count($v_day_values['37b1']) > '0')
					{
						if(!$fl_start[$ipid])
						{
							$fl_start[$ipid] = $k_day;
						}

						$days_products[$ipid][] = $fl_start[$ipid];
					}
				}
				

				//get days in which sapv is 3 or 4
				foreach($sapv_days[$ipid] as $ksapv_days => $vsapv_days)
				{
					if(in_array('3', $vsapv_days) || in_array('4', $vsapv_days))
					{
						$flatrate_sapv_days[$ipid][] = $ksapv_days;
					}
				}

				//return only the products which have more than 28 days from last billable product
				$pm = new PatientMaster();

				foreach($days_products[$ipid] as $key_day => $v_day)
				{
					if($key_day > '0')
					{
						$prod_gap[$ipid][$v_day] = $pm->getDaysInBetween($days_products[$ipid][($key_day - 1)], $v_day);
//						$prod_gap[$ipid][$v_day] = array_intersect($prod_gap[$ipid][$v_day], $active_days[$ipid], $flatrate_sapv_days[$ipid]);

						$prod_gap[$ipid][$v_day] = array_values(array_unique($prod_gap[$ipid][$v_day]));

						if(count($prod_gap[$ipid][$v_day]) >= '30')
						{
							$last_product_gap_days[$ipid][] = $v_day;
							$master_overall_data[$ipid]['shortcuts'][$v_day] = '37b1';
						}
					}
				}

				$master_overall_data[$ipid]['shortcuts'] = array_values(array_unique($overall_shortcuts[$ipid]));
				$master_overall_data[$ipid]['shortcuts_dates'] = $overall_shortcuts_dates[$ipid];
				$master_overall_data[$ipid]['last_koord_dates'] = array_values(array_unique($last_koord_dates[$ipid]));
				$master_overall_data[$ipid]['days_products'] = array_values(array_unique($last_product_gap_days[$ipid]));
			}

			return $master_overall_data;
		}
		/**
		 * 
		 * @param unknown $ipids
		 * @param unknown $clientid
		 * @param unknown $overall_period
		 * @param unknown $active_days
		 * @param unknown $set_ids
		 * @param unknown $flatrate
		 * @param unknown $master_price_list
		 * @param unknown $patients_periods_days
		 * @param string $hospital_days
		 * @param string $sapv_days
		 * @param string $course_days
		 * @param string $contact_forms_days
		 * @param string $classification_data
		 * @param unknown $patient_days2locationtypes
		 * @return unknown
		 */
		private function second_patients_performance_overall_saved($ipids, $clientid, $overall_period, $active_days, $set_ids, $flatrate, $master_price_list, $patients_periods_days, $hospital_days = false, $sapv_days = false, $course_days = false, $contact_forms_days = false, $classification_data = false,$patient_days2locationtypes)
		{
			if($_REQUEST['dbgssz'])
			{
				print_r("ipids\n");
				print_r($ipids);
				print_r("overall_period\n");
				print_r($overall_period);
				print_r("active_days\n");
				print_r($active_days);
				print_r("set_ids\n");
				print_r($set_ids);
				print_r("flatrate\n");
				print_r($flatrate);
				print_r("patients_periods_days - days_in_period_overall\n");
				print_r($patients_periods_days);
				print_r("hospital_days\n");
				print_r($hospital_days);
				print_r("sapv_days\n");
				print_r($sapv_days);
				print_r("course_days\n");
				print_r($course_days);
				print_r("contact_forms_days\n");
				print_r($contact_forms_days);
				print_r("classification_data\n");
				print_r($classification_data);
				print_r("patient_days2locationtypes\n");
				print_r($patient_days2locationtypes);
				
				exit;
			}

			/* ###################################### */
			/* ####### SAVED DATA ################### */
			/* ###################################### */
			//get saved data ISPC-1927
			$bw_pr = new BwPerformanceRecord();
			$full_price_list = array();
			foreach($ipids as $k=>$ipid){
				$full_price_list[$ipid] = $master_price_list;
			}
			$bw_data = $bw_pr->get_multiple_bw_performance_record_in_period($ipids, $patients_periods_days, $full_price_list,$patient_days2locationtypes);
			
			$master_overall_data = array();
			$master_data = array();
			
			$overall_shortcuts_dates = array();
			$overall_shortcuts = array();
			$days_products = array();
			foreach($ipids as $k_ipid => $ipid)
			{
				foreach($active_days[$ipid] as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $patients_periods_days[$ipid]))
					{
						$active_days_in_period[$ipid][] = $v_active_day;
					}
				}
				

				foreach($course_days[$ipid] as $k_course_date => $v_course_details)
				{
					foreach($v_course_details as $k_couse => $v_course)
					{
						if($v_course == 'U' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('1', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['beratung'] += 1;
						}
						else if($v_course == 'V' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('2', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
						}
					}
				}

				$contact_forms_ids[$ipid][] = '999999999';
				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							$contact_forms_ids[$ipid][] = $v_cf['id'];
						}
					}
				}
				ksort($contact_forms_days[$ipid]);

				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data))
						{
							$contact_forms_days_ids[$ipid][$k_cf_day][] = $v_cf['id'];
							$contact_forms2form_types[$ipid][$v_cf['id']][] = $v_cf['form_type'];
						}
					}
				}

				$set_one_ids = $set_ids['one'];
				$set_two_ids = $set_ids['two'];
				$set_three_ids = $set_ids['three'];
				$set_fourth_ids = $set_ids['fourth'];

				$pseudo_overall_shortcuts[$ipid] = array();
				$day_location_type = "";
				foreach($patients_periods_days[$ipid] as $k_period_day => $v_period_day)
				{
					$day_location_type = $patient_days2locationtypes[$ipid][date('d.m.Y',strtotime($v_period_day))];
					
					$day_shortcuts[$ipid] = array();
					if(count($month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}

					$master_data[$ipid][$v_period_day] = array();

					//calculate set one form_type visits
					//first get flatrate exception and set shortcut
					$shortcut = '';
					if(in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$shortcut = '37b1';
						$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = $shortcut;
						$pseudo_overall_shortcuts[$ipid][] = $shortcut;
					}
					else if(!in_array($v_period_day, $flatrate[$ipid]) && array_key_exists($v_period_day, $contact_forms_days[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid])) //normal set conditions
					{

//					we have visits=> check if there are required visits for this action set
						$set_one_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(count($set_one_result[$ipid]) != 0 && (in_array('3', $sapv_days[$ipid][$v_period_day]) || in_array('4', $sapv_days[$ipid][$v_period_day])))
						{
							$shortcut = '37b2';
						}
					}

					if(!empty($shortcut))
					{
						$day_shortcuts[$ipid][] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['shortcut'] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
						$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
						$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
					}

					//sapv overwrite if formtype is set 4
					//calculate set two form_type visits
					//exclude calculation if following shortcuts are calculated on current day

					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_two_result[$ipid] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_two_result[$ipid]) != 0 || in_array('U', $course_days[$ipid][$v_period_day])) && in_array('1', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 && in_array('1', $sapv_days[$ipid][$v_period_day]) )
						)
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								if(is_numeric($k_cf))
								{
									$shortcut = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										$shortcut = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
									{
										$shortcut = '37b6';
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_two_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										}
										else if($shortcut == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
										$pseudo_overall_shortcuts[$ipid][] = '37b5';
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && $v_day_course == 'U')
								{
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
								}
							}
						}
					}

					//calculate set three form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					$week_number = array();
					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
						if( ! empty($contact_forms_days[$ipid][$v_period_day])) {
							$set_three_result[$ipid] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
							$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						}

						if(
							(count($set_three_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day])
						)
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform))
								{
									$shortcut = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids[$ipid]))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';
								$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
								{
									if(in_array('4', $sapv_days[$ipid][$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate[$ipid]['pay_days']))
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number[$ipid] = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
										$pseudo_overall_shortcuts[$ipid][] = '37b7';
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								if(($shortcut == '37b7' || $shortcut == '37b8') && $v_day_course == 'V')
								{
									if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$week_numbers_arr[$ipid][] = $week_number[$ipid];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}


					//calculate set 4 (ISPC-241)
					$set_fourth_result[$ipid] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

					if(count($set_fourth_result[$ipid]) != 0 && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						//setup each form sapv based on classification block selection
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['intern'] != '1')
							{
								if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									//switch between BE-KO if VV is not BE
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
							}
						}

						//U & V at the top
						//beratung
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								//check if there are 2 beratung change sapv in koord
								if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && count($set_fourth_result[$ipid]) != 0 && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
								}

								if(is_numeric($k_cf) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1')
								{
									$shortcut = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										$shortcut = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5') //only b5 or b6
									{
										$shortcut = '37b6';
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										}
										else if($shortcut == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
									}
								}
							}
						}

						//koordination
						$last_koord_days[$ipid] = end($last_koord_dates[$ipid]);
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2')
								{
									$shortcut = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}
										$day_shortcuts[] = $shortcut;
									}

									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;

										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$day_location_type][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}

//					TODO:Continue adding [$ipid]
					if(in_array($v_period_day, $sapv_days[$ipid]))
					{
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							//check if contactform type for each days
							if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids))
							{
								if(in_array('4', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
								}
							}
							else
							{
								//sum classifizierung data if form is not housebesuche type(1)
								if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days[$ipid][$v_period_day]) &&
									(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
								}

								$count_be[$ipid][$v_period_day] += 1;
							}
						}
					}
				}
				
				
				$fl_start[$ipid] = false;

				if(!empty($bw_data[$ipid])){
					foreach($master_data[$ipid] as $k_day => $v_day_values)
					{
						if(array_key_exists($k_day, $bw_data[$ipid])){
							$master_data[$ipid][$k_day] = $bw_data[$ipid][$k_day];
						}
					}
					
					foreach($master_data[$ipid] as $k_day => $v_day_values)
					{
						foreach($v_day_values as $k_shortcut => $v_shortcut_values)
						{
							if(empty($v_shortcut_values['qty'])){
								unset($master_data[$ipid][$k_day][$k_shortcut]);
							} 
						}
					}
				}
				

				/*
				 * [2017-04-03] => Array
				 (
				 [37b1] => Array
				 (
				 [pay_days] => 1
				 [shortcut] => 37b1
				 [qty] => 1
				 [location_type] => 5
				 [price] =>
				 [price_list] =>
				 )
				
				 )
				 * */
				
				
				/*
				 *
				 *  [2016-01-01] => Array
				 (
				 [37b1] => Array
				 (
				 [shortcut] => 37b1
				 [qty] => 1
				 [price] =>
				 )
				
				 )
				 * */

				
				
				foreach($master_data[$ipid] as $k_day => $v_day_values)
				{
					
					foreach($v_day_values as $k_shortcut => $v_shortcut_values)
					{
						$overall_shortcuts[$ipid][] = $k_shortcut;
						$overall_shortcuts_dates[$ipid][$k_day][] = $k_shortcut;
					}
				 
					
					
					if( ! empty($v_day_values) && empty($v_day_values['37b1']))
					{
						$days_products[$ipid][] = $k_day;
					}
					elseif(!empty($v_day_values['37b1']))
					{
						if($v_day_values['37b1']['pay_days'] == "1"){
							$days_products[$ipid][] = $k_day;
						}
						else
						{
							if(!$fl_start[$ipid])
							{
								$fl_start[$ipid] = $k_day;
							}
						}

						$days_products[$ipid][] = $fl_start[$ipid];
					}
				}
				
				


				
				//get days in which sapv is 3 or 4
				foreach($sapv_days[$ipid] as $ksapv_days => $vsapv_days)
				{
					if(in_array('3', $vsapv_days) || in_array('4', $vsapv_days))
					{
						$flatrate_sapv_days[$ipid][] = $ksapv_days;
					}
				}
				
				$days_products[$ipid] = array_unique($days_products[$ipid]);
				asort($days_products[$ipid]);
				$days_products[$ipid] = array_values($days_products[$ipid]);
 
				
				//return only the products which have more than 28 days from last billable product
				$pm = new PatientMaster();
				$last_product_gap_days[$ipid] = array();
				foreach($days_products[$ipid] as $key_day => $v_day)
				{
					if($key_day > '0')
					{
						$prod_gap[$ipid][$v_day] = $pm->getDaysInBetween($days_products[$ipid][($key_day - 1)], $v_day);
//						$prod_gap[$ipid][$v_day] = array_intersect($prod_gap[$ipid][$v_day], $active_days[$ipid], $flatrate_sapv_days[$ipid]);

						$prod_gap[$ipid][$v_day] = array_values(array_unique($prod_gap[$ipid][$v_day]));

						if(count($prod_gap[$ipid][$v_day]) >= '30')
						{
							$last_product_gap_days[$ipid][] = $v_day;
							$master_overall_data[$ipid]['shortcuts'][$v_day] = '37b1';
						}
					}
				}
				$master_overall_data[$ipid]['shortcuts'] = array_values(array_unique($overall_shortcuts[$ipid]));
				$master_overall_data[$ipid]['shortcuts_dates'] = $overall_shortcuts_dates[$ipid];
				$master_overall_data[$ipid]['last_koord_dates'] = array_values(array_unique($last_koord_dates[$ipid]));
				$master_overall_data[$ipid]['days_products'] = array_values(array_unique($last_product_gap_days[$ipid]));
			}
			
			return $master_overall_data;
		}
		//ISPC-2312 Ancuta 07.12.2020 changed to public 
		public function generate_joined_files_pdf($chk, $post, $pdfname, $filename, $invoice_type_special = false)
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = isset($post['clientid']) && !empty($post['clientid']) ? $post['clientid'] :  $logininfo->clientid;
		    $clientinfo = Pms_CommonData::getClientData($clientid);

		    if(isset($_GET['id'])){
	       	    $decid = Pms_Uuid::decrypt($_GET['id']);
    		    $ipid = Pms_CommonData::getIpid($decid);
		    }
		    	
		    if($pdfname == "SocialcodePdfs")
		    {
		    	if(strlen($post['hi_subdiv_address']) > 0)
		    	{
		    		if(strpos($post['hi_subdiv_address'],"style"))
		    		{
		    			$post['hi_subdiv_address'] = preg_replace('/style=\"(.*)\"/i', '', $post['hi_subdiv_address']);
		    		}
		    		 
		    		$post['hi_subdiv_address'] = str_replace(array("<p>","<p >"), "", $post['hi_subdiv_address']);
		    		$post['hi_subdiv_address'] = str_replace("</p>", "", $post['hi_subdiv_address']);
		    		$post['hi_subdiv_address'] = str_replace("\n", "<br/>", $post['hi_subdiv_address']);
		    	}
		    	 
		    	if(strlen($post['patient_address']) > 0)
		    	{
		    		if(strpos($post['patient_address'],"style"))
		    		{
		    			$post['patient_address'] = preg_replace('/style=\"(.*)\"/i', '', $post['patient_address']);
		    		}
		    		 
		    		$post['patient_address'] = str_replace(array("<p>","<p >"), "", $post['patient_address']);
		    		$post['patient_address'] = str_replace("</p>", "", $post['patient_address']);
		    		$post['patient_address'] = str_replace("\n", "<br/>", $post['patient_address']);
		    	}
		    }
		    
		    $excluded_keys = array(
		        'RP_invoice_items',
		        "rpinvoice",
		    );
		    //print_r($post);exit;
		    if($invoice_type_special === false && $pdfname != "SocialcodePdfs") //ISPC-2745 Carmen 17.11.2020
		    {
		   	 $post = Pms_CommonData::clear_pdf_data($post, $excluded_keys);
		    }

		    if(is_array($filename))
		    {
		        foreach($filename as $k_file => $v_file)
		        {
		            $htmlform[$k_file] = Pms_Template::createTemplate($post, 'templates/' . $v_file);
		            $html[$k_file] = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform[$k_file]);
		        }
		    }
		    else
		    {
		        $htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);
		        if($invoice_type_special === false)
		        {
		        	$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
		        }
		        else 
		        {
		        	$html = $htmlform;
		        }
		    }
		    
		
		    //dont return the pdf file to user
		    if($chk == 4)
		    {
		        $navnames = array(
		            "rpinvoice" => "SAPV-Abrechnungsbogen",
		            "RP_invoice_items" => "RP-Leistungsnachweis",
		        	"SocialcodePdfs" => "SocialcodePdf" //ISPC-2745 Carmen 16.11.2020
		        );
		
		        if($pdfname == 'rpinvoice')
		        {
		            $orientation = 'P';
		            $format = "A4";
		            $bottom_margin = "5";
		        }
		        else if($pdfname == 'RP_invoice_items')
		        {
		            $orientation = 'P';
		            $format = "A4";
		        }
		        //ISPC-2745 Carmen 16.11.2020
		        if($pdfname == 'SocialcodePdfs')
		        {
		        	$orientation = 'L';
		        	$format = "A4";
		        	$bottom_margin = "5";
		        }
		        //--
		        else
		        {
		            $orientation = 'P';
		            $format = "A4";
		        }
		        
		        $pdf = new Pms_PDF($orientation, 'mm', $format, true, 'UTF-8', false);
		        $pdf->setDefaults(true, $orientation, $bottom_margin); //defaults with header
		        
		        if($invoice_type_special !== false)
		        {
		        	$pdf->SetFont('dejavusans', '', 10);
		        	$pdf->setPrintFooter(false); //remove black line at bottom
		        	$pdf->SetMargins(20, 49, 50);
		        	if($invoice_type_special == "ND_patient")
		        	{
		        		$background_type = "24"; //ND patient
		        	}
		        	elseif($invoice_type_special == "ND_user")
		        	{
		        		$background_type = "25"; // ND user
		        	}
		        }
		        else 
		        {
			        $pdf->setImageScale(1.6);
			        $pdf->format = $format;
			        $pdf->SetMargins(10, 5, 10); //reset margins
		        }
		        
		        
		
		        switch($pdfname)
		        {
		            case 'rpinvoice':
		                $pdf->SetMargins(28, 18, 28);
		                $pdf->setPrintFooter(false); // remove black line at bottom
		                $pdf->SetFont('dejavusans', '', 10);
		                $background_type="48";
		                
		                break;
		                
		            case 'RP_invoice_items':
		                $pdf->SetMargins(10, 5, 10);
		                
		                // ISPC-1603
		                $pdf->SetAutoPageBreak(TRUE, 35);
		                $pdf->setFooterFont(Array('helvetica', '', 7));
		                //$pdf->no_first_page_invoice_footer = true; //remove footer from the first page
		                $pdf->invoice_footer = true; // set special footer
		                
		                $footer_text = '<table width="100%">
                                	<tr>
                                		<td width="45%">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                                		<td width="10%"></td>
                                		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                                	</tr>
                                	<tr>
                                        <td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td></td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Verantwortlicher Leistungserbinger PCT</td>
                                		<td></td>
                                		<td>Versicherter / Bezugsperson</td>
                                	</tr>
                                    <tr>
                                		<td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                		<td></td>
                                		<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                	</tr>
                                </table>';
		                
		                
		                $pdf->footer_text = $footer_text; // set pdf background only for the first page
		                $pdf->setPrintFooter(true); // remove black line at bottomC
		                break;
		        }
		
		        if($background_type != false)
		        {
		            $bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], $background_type);
		            if($bg_image !== false)
		            {
		                $bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
		                if(is_file($bg_image_path))
		                {
		                    $pdf->setBackgroundImage($bg_image_path);
		                }
		            }
		        }
		
		        if($invoice_type_special === false)
		        {
		        	$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
		        }
		
		        $excluded_css_cleanup_pdfs = array(
		            "rpinvoice",
		            "RP_invoice_items",
		        	"SocialcodePdfs"
		        );
		
		        if($invoice_type_special === false)
		        {
			        if(!in_array($pdfname, $excluded_css_cleanup_pdfs))
			        {
			            $html = preg_replace('/style=\"(.*)\"/i', '', $html);
			        }
		        }
			
		        // 				print_r($html); exit;
		        $pdf->setHTML($html);
		
		        //create public/joined_files/ dir
		        while(!is_dir(PDFJOIN_PATH))
		        {
		            mkdir(PDFJOIN_PATH);
		            if($i >= 50)
		            {
		                exit; //failsafe
		            }
		            $i++;
		        }
		
		        //create public/joined_files/$clientid dir
		        $pdf_path = PDFJOIN_PATH . '/' . $clientid;
		
		        while(!is_dir($pdf_path))
		        {
		            mkdir($pdf_path);
		            if($i >= 50)
		            {
		                exit; //failsafe
		            }
		            $i++;
		        }
		
		        $tmpstmp = isset($this->view->folder_stamp) ? $this->view->folder_stamp : time();
		        
		        while(!is_dir($pdf_path . '/' . $tmpstmp))
		        {
		            mkdir($pdf_path . '/' . $tmpstmp);
		            if($i >= 50)
		            {
		                exit; //failsafe
		            }
		            $i++;
		        }
		
		        if($pdfname == 'shimplementationproof' || $pdfname == 'shanlage14' )
		        {
		            $pdfname = $pdfname.'_'.$post['epid'];
		        }
		        
		        if($pdfname == 'rpinvoice' || $pdfname == 'RP_invoice_items' )
		        {
    	            $pdfname = $pdfname.'_'.$post['unique_id'];
		        }
		
		        $pdf->toFile($pdf_path . '/' . $tmpstmp . '/' . $pdfname. '.pdf');
		
		        return $pdf_path . '/' . $tmpstmp . '/' . $pdfname. '.pdf';
		    }
		}
		
		
		public function join_pdfs_new($files = false, $patient_data = false, $source , $extra = false)
		{
		 
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    if($extra && !empty($extra)){
		        $clientid = $extra['clientid'];
		    } else{
    		    $clientid = $logininfo->clientid;
		    }
		    	
		    $file_data = array();
		    $file_data['ipid'] = $patient_data['ipid'];
		    $file_data['file_title'] = $source;
		
		    if($source == 'Rp_invoice_and_items')
		    {
// 		        $file_data['pdfname'] = $patient_data['epid'] . '_Rechnung';
// 		        $output_name = $patient_data['epid'].'_Rechnung.pdf';

		        $file_data['pdfname'] = 'RP_Rechnung';
		        
		        //ISPC-2472Ancuta 07.11.2019
                if($patient_data['invoice_full_number']){
    		        $output_name = $patient_data['invoice_full_number'].'.pdf';
                } else{
		          $output_name = 'RP_Rechnung.pdf';
                }
		    }
		    elseif($source == 'HiInvoice' || $source == 'HiUserInvoice')
		    {		    
		    	if($patient_data){
		    		$Batch_name = "";
		    		$Batch_name = $patient_data[0];
		    		if(count($patient_data) > 1){
		    			$Batch_name .='_'.end($patient_data);
		    		}
		    		$output_name = $Batch_name;
		    	} else{
		    		$output_name = 'Benutzer_Rechnung.pdf';
		    	}
		    }
		    //ISPC-2745 Carmen 17.11.2020
		    if($source == 'Bw_sgbv_invoice')
		    {
		    	// 		        $file_data['pdfname'] = $patient_data['epid'] . '_Rechnung';
		    	// 		        $output_name = $patient_data['epid'].'_Rechnung.pdf';
		    
		    	$file_data['pdfname'] = 'BW SGBV';
		    	
		    	$output_name = 'BW_SGBV_Rechnung.pdf';
		    	
		    }
		    if($source == 'Bw_sgbxi_invoice')
		    {
		    	// 		        $file_data['pdfname'] = $patient_data['epid'] . '_Rechnung';
		    	// 		        $output_name = $patient_data['epid'].'_Rechnung.pdf';
		    
		    	$file_data['pdfname'] = 'BW SGBXI';
		    	 
		    	$output_name = 'BW_SGBXI_Rechnung.pdf';
		    	 
		    }
		    if($source == 'RP_invoice_token')
		    {
		    	// 		        $file_data['pdfname'] = $patient_data['epid'] . '_Rechnung';
		    	// 		        $output_name = $patient_data['epid'].'_Rechnung.pdf';
		    
		    	$file_data['pdfname'] = 'RP_Rechnung';
		    
		    	//ISPC-2472Ancuta 07.11.2019
		    	if($patient_data['invoice_full_number']){
		    		$output_name = $patient_data['invoice_full_number'].'.pdf';
		    	} else{
		    		$output_name = 'RP_Rechnung.pdf';
		    	}
		    }
		    //--
		    
		    	
		    if($extra['bulk_print'] == '1' && !empty($extra['batch_temp_folder']) )
		    {
		        $file_data['return_file_name'] = 1;
		        $batch_temp_folder = $extra['batch_temp_folder'];
		        
		        if(!is_dir(PDFDOCX_PATH))
		        {
		            while(!is_dir(PDFDOCX_PATH))
		            {
		                mkdir(PDFDOCX_PATH);
		                if($i >= 50)
		                {
		                    //exit; //failsafe
		                    break;
		                }
		                $i++;
		            }
		        }
		        
		        if(!is_dir(PDFDOCX_PATH . '/' . $clientid))
		        {
		            while(!is_dir(PDFDOCX_PATH . '/' . $clientid))
		            {
		                mkdir(PDFDOCX_PATH . '/' . $clientid);
		                if($i >= 50)
		                {
		                    //exit; //failsafe
		                    break;
		                }
		                $i++;
		            }
		        }
		        
		        
		        
		        if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
		        {
		            while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
		            {
		                mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
		                if($i >= 50)
		                {
		                    exit; //failsafe
		                }
		                $i++;
		            }
		        }
		    
		        $destination_path = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/pdf_invoice_' . $extra['unique_id'].'.pdf';
// 		        $merged_other_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/pdf_invoice_' . $extra['unique_id'].'.pdf';
// 		        //merge all files existing in $batch_temp_files!
// 		        $merge = new MultiMerge();
// 		        $merge_process = $merge->mergePdf($files, $merged_other_filename);
		        
// 		        dd($files);
// 		        $merge = new MultiMerge();
// 		        $merge_process = $merge->mergePdf($files,$destination_path);
		        
// 		        return $destination_path;
		        
		        if($files)
		        {
		            $pdf = new Pms_PDFMerger();
		            
		            foreach($files AS $file) {
		                $pdf->addPDF($file, 'all');
		            }
		            $merged_files = $pdf->merge('browser', $destination_path, $file_data);

		            return $merged_files;
		        }
		        
		        
		    } 
		    else
		    {
		        
    		    //create public/joined_files/ dir
    		    while(!is_dir(PDFJOIN_PATH))
    		    {
    		        mkdir(PDFJOIN_PATH);
    		        if($i >= 50)
    		        {
    		            exit; //failsafe
    		        }
    		        $i++;
    		    }
    		    	
    		    //create public/joined_files/$clientid dir
    		    $pdf_path = PDFJOIN_PATH . '/' . $clientid;
    		    	
    		    while(!is_dir($pdf_path))
    		    {
    		        mkdir($pdf_path);
    		        if($i >= 50)
    		        {
    		            exit; //failsafe
    		        }
    		        $i++;
    		    }
    		    	
    		    $outputh_path = $pdf_path . '/' . $output_name;
    		    
    		    if($files)
    		    {
    		        $pdf = new Pms_PDFMerger();
    		         
    		        foreach($files AS $file) {
    		            $pdf->addPDF($file, 'all');
    		        }
    		        $pdf->merge('download', $output_name, $file_data);
    		    }
		    
		  }
		    
		}
		
		
		
		

		public function newinvoicepatientlistAction()
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $userid = $logininfo->userid;
		    $patientmaster = new PatientMaster();
		
		
		    //construct months selector array START
		    $start_period = '2010-01-01';
		    $end_period = date('Y-m-d', time());
		    $period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
		    
		    foreach($period_months_array as $k_month => $v_month)
		    {
		        $month_select_array[$v_month] = $v_month;
		    }
		    //construct months selector array END
		    //check if a month is selected START
		    if(strlen($_REQUEST['list']) == '0')
		    {
		        $selected_month = end($month_select_array);
		    }
		    else
		    {
		        $selected_month = $month_select_array[$_REQUEST['list']];
		    }
		
		    $this->view->selected_month = $selected_month;
		    $this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
		
		    if(!function_exists('cal_days_in_month'))
		    {
		        $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
		    }
		    else
		    {
		        $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
		    }
		
		    $months_details[$selected_month]['start'] = $selected_month . "-01";
		    $months_details[$selected_month]['days_in_month'] = $month_days;
		    $months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
		
		    $month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);
		
		    array_walk($month_days_arr, function(&$value) {
		        $value = date("d.m.Y", strtotime($value));
		    });
		    $months_details[$selected_month]['days'] = $month_days_arr;
		    //check if a month is selected END
		    //construct month_selector START
		    $attrs['onChange'] = 'changeMonth(this.value);';
		    $attrs['class'] = 'select_month_rehnung_patients';
		    $this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
		    //construct month_selector END
		
		    if($this->getRequest()->isPost())
		    {
		        if($_POST['selected_patient'])
		        {
		            $epids_ipids = Pms_CommonData::get_multiple_ipids($_POST['selected_patient']);
		
		            //loop throuhg posted patients (0 = no sapv period, >0 = sapv period id)
		            if($_POST['selected_patient_period'])
		            {
		                $selected_sapv_falls_ipids[] = '99999999999';
		                $selected_fall_ipids[] = '99999999999';
		
		                foreach($_POST['selected_patient'] as $k_sel_pat => $v_sel_pat)
		                {
		                    $ipids[] = $epids_ipids[$v_sel_pat];
		
		                    $params['nosapvperiod'][$epids_ipids[$v_sel_pat]] = '0';
		
		                    $period_id_exploded = explode('_', $_POST['selected_patient_period'][$v_sel_pat]);
		
		                    //construct array with patients which have admission period selected
		                    if(count($period_id_exploded) == "2" && $period_id_exploded[0] == "admission")
		                    {
		                        $admission_fall[$epids_ipids[$v_sel_pat]] = $period_id_exploded[1];
		                    }
		
		                    if($_POST['selected_patient_period'][$v_sel_pat] != '0' && count($period_id_exploded) == "1")
		                    {
		                        $selected_sapv_falls_ipids[] = $epids_ipids[$v_sel_pat];
		                        $selected_sapv_falls[$epids_ipids[$v_sel_pat]] = $_POST['selected_patient_period'][$v_sel_pat];
		                    }
		                    else if(count($period_id_exploded) == "1")
		                    {
		                        $selected_fall_ipids[] = $epids_ipids[$v_sel_pat];
		                        $selected_fall[$epids_ipids[$v_sel_pat]] = $months_details[$selected_month];
		                    }
		                }
		
		                //get patients sapvs last fall
		                if($selected_sapv_falls_ipids)
		                {
		                    $patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods($selected_sapv_falls_ipids, true);
		                    foreach($selected_sapv_falls as $k_ipid => $fall_id)
		                    {
		                        $patients_sapv[$k_ipid] = $fall_id;
		                        $patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
		                        $params['nosapvperiod'][$k_ipid] = '0';
		                        $params['period'] = $patients_selected_periods;
		                    }
		                }
		
		                //patient days
		                $conditions['client'] = $this->clientid;
		                $conditions['ipids'] = $ipids;
		                $conditions['periods'][0]['start'] = '2009-01-01';
		                $conditions['periods'][0]['end'] = date('Y-m-d');
		
		                $sql = 'e.epid, p.ipid, e.ipid,';
		                $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		                $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		                $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		                $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		                $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		                $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
		                //be aware of date d.m.Y format here
		                $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		
		                //rewrite the periods array if the period is entire month not sapv fall
		                $patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods($ipids, true);
		
		                foreach($patients_sapv_periods as $k_sapv_ipid => $v_sapvs)
		                {
		                    foreach($v_sapvs as $k_sapv_id => $v_sapv_data)
		                    {
		                        if(empty($sapv_days[$v_sapv_data['ipid']]))
		                        {
		                            $sapv_days[$v_sapv_data['ipid']] = array();
		                        }
		
		                        $sapv_days[$v_sapv_data['ipid']] = array_merge($sapv_days[$v_sapv_data['ipid']], $v_sapv_data['days']);
		                        $sapv_days[$v_sapv_data['ipid']] = array_values(array_unique($sapv_days[$v_sapv_data['ipid']]));
		                    }
		                }
		
		
		                foreach($ipids as $k_ipid => $v_ipid)
		                {
		                    if(!in_array($v_ipid, $selected_sapv_falls_ipids))
		                    {
		                        //								var_dump(array_key_exists($v_ipid, $admission_fall));
		                        if(array_key_exists($v_ipid, $admission_fall))
		                        {
		                            $selected_period[$v_ipid] = $patient_days[$v_ipid]['active_periods'][$admission_fall[$v_ipid]];
		
		                            array_walk($selected_period[$v_ipid], function(&$value) {
		                                $value = date("Y-m-d", strtotime($value));
		                            });
		
		                                $selected_period[$v_ipid]['days'] = PatientMaster::getDaysInBetween($selected_period[$v_ipid]['start'], $selected_period[$v_ipid]['end']);
		
		                                array_walk($selected_period[$v_ipid]['days'], function(&$value) {
		                                    $value = date("d.m.Y", strtotime($value));
		                                });
		
		                                    $params['nosapvperiod'][$v_ipid] = '1';
		                                    $params['selected_period'][$v_ipid] = $selected_period[$v_ipid];
		                                    $params['selected_period'][$v_ipid]['days'] = $selected_period[$v_ipid]['days'];
		
		
		                                    array_walk($params['selected_period'][$v_ipid]['days'], function(&$value) {
		                                        $value = date("d.m.Y", strtotime($value));
		                                    });
		
		                                        //exclude outside admission falls days from sapv!
		                                        if(empty($sapv_days[$v_ipid]))
		                                        {
		                                            $sapv_days[$v_ipid] = array();
		                                        }
		
		                                        if(empty($params['selected_period'][$v_ipid]['days']))
		                                        {
		                                            $params['selected_period'][$v_ipid]['days'] = array();
		                                        }
		                                        $patient_active_sapv_days[$v_ipid] = array_intersect($params['selected_period'][$v_ipid]['days'], $sapv_days[$v_ipid]);
		                                        $params['sapv_in_period'][$v_ipid] = array_values($patient_active_sapv_days[$v_ipid]);
		
		                                        $start_dmy = date('d.m.Y', strtotime($selected_period[$v_ipid]['start']));
		                                        $end_dmy = date('d.m.Y', strtotime($selected_period[$v_ipid]['end']));
		
		                                        $start_sapv_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
		                                        $end_sapv_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));
		
		                                        //get all days of all sapvs in a period
		                                        $params['existing_sapv_days'][$v_ipid] = array_values($patient_active_sapv_days[$v_ipid]);
		                                        $params['period'][$v_ipid] = $selected_period[$v_ipid];
		
		                                        //									$start_sapv_dmy = $patient_active_sapv_days[$v_ipid][0];
		                                        //									$end_sapv_dmy = end($patient_active_sapv_days[$v_ipid]);
		
		                                        $params['period'][$v_ipid]['start'] = $start_dmy;
		                                        $params['period'][$v_ipid]['end'] = $end_dmy;
		
		                                        $last_sapv_data['ipid'] = $v_ipid;
		                                        $last_sapv_data['start_period'] = date('Y-m-d', strtotime($selected_period[$v_ipid]['start']));
		                                        $last_sapv_data['end_period'] = date('Y-m-d', strtotime($selected_period[$v_ipid]['end']));
		                                        $sapv_last_require_data[] = $last_sapv_data;
		
		                                        $params['admissionid'][$v_ipid] = $admission_fall[$v_ipid];
		                        }
		                        else
		                        {
		
		                            $start_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
		                            $end_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));
		
		                            $params['nosapvperiod'][$v_ipid] = '1';
		                            $params['selected_period'][$v_ipid] = $months_details[$selected_month];
		                            $params['sapv_in_period'][$v_ipid] = array_values($months_details[$selected_month]['days']);
		                            $params['existing_sapv_days'][$v_ipid] = array_values($months_details[$selected_month]['days']);
		                            $params['period'][$v_ipid] = $months_details[$selected_month];
		                            $params['period'][$v_ipid]['start'] = $start_dmy;
		                            $params['period'][$v_ipid]['end'] = $end_dmy;
		
		                            $last_sapv_data['ipid'] = $v_ipid;
		                            $last_sapv_data['start_period'] = date('Y-m-d', strtotime($start_dmy));
		                            $last_sapv_data['end_period'] = date('Y-m-d', strtotime($end_dmy));
		                            $sapv_last_require_data[] = $last_sapv_data;
		                        }
		                    }
		                }
		                //						}
		                $all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipids);
		                if($sapv_last_require_data)
		                {
		                    $last_sapvs_in_period = SapvVerordnung::get_multiple_last_sapvs_inperiod($sapv_last_require_data, true, true);
		                }
		
		                foreach($all_patients_sapvs as $k_sapv => $v_sapv)
		                {
		                    if(empty($sapv_days_overall[$v_sapv['ipid']]))
		                    {
		                        $sapv_days_overall[$v_sapv['ipid']] = array();
		                    }
		
		
		                    $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
		                    if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
		                    }
		                    else
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
		                    }
		
		                    //FIND A WAY TO GET MULTIPLE LAST SAPV IN EACH PERIOD FOR EACH PATIENT
		                    if($last_sapvs_in_period[$v_sapv['ipid']])
		                    {
		                        $params['period'][$v_sapv['ipid']] = array_merge($params['period'][$v_sapv['ipid']], $last_sapvs_in_period[$v_sapv['ipid']]);
		                    }
		
		                    $sapv_days_overall[$v_sapv['ipid']] = array_merge($sapv_days_overall[$v_sapv['ipid']], PatientMaster::getDaysInBetween($start, $end));
		                    array_walk($sapv_days_overall[$v_sapv['ipid']], function(&$value) {
		                        $value = date("d.m.Y", strtotime($value));
		                    });
		                    $sapv_days_overall[$v_sapv['ipid']] = array_values(array_unique($sapv_days_overall[$v_sapv['ipid']]));
		                }
		
		                foreach($last_sapvs_in_period as $k_sapvs => $v_sapvs)
		                {
		                    foreach($v_sapvs as $k_sapvp => $v_sapvp)
		                    {
		                        $startp = date('Y-m-d', strtotime($v_sapvp['verordnungam']));
		
		                        if($v_sapvp['status'] == '1' && $v_sapvp['verorddisabledate'] != '0000-00-00 00:00:00')
		                        {
		                            $endp = date('Y-m-d', strtotime($v_sapvp['verorddisabledate']));
		                        }
		                        else
		                        {
		                            $endp = date('Y-m-d', strtotime($v_sapvp['verordnungbis']));
		                        }
		                        if(empty($period_sapv_alldays[$v_sapvp['ipid']]))
		                        {
		                            $period_sapv_alldays[$v_sapvp['ipid']] = array();
		                        }
		                        $period_sapv_alldays[$v_sapvp['ipid']] = array_merge($period_sapv_alldays[$v_sapvp['ipid']], PatientMaster::getDaysInBetween($startp, $endp));
		                    }
		                }
		
		
		                $params['period_sapvs_alldays'] = $period_sapv_alldays;
		                $params['sapv_overall'] = $sapv_days_overall;
		            }

		             if(empty($ipids)){
                		$this->_redirect(APP_BASE . "invoice/healthinsuranceinvoices");
                		exit;
		             }
		
		            $params['ipids'] = $ipids;
		            //					$params['patient_sapvs'] = $patients_sapv;
		            $params['patient_days'] = $patient_days;
		            $params['get_pdf'] = '0';
		            $params['only_pdf'] = 0;
		
    				$search = Doctrine_Query::create()
					->select('id,ipid')
					->from('PatientMaster')
					->where('isdelete = 0 ')
    				->andWhereIn('ipid',$ipids);
					$searchResults = $search->fetchArray();		            					
    					
					foreach($searchResults as $k=>$pid){
					    $id2ipid[$pid['ipid']] = $pid['id'];
					}
					
					$period_details = array();
					
					$generated_invoice = false;
                    foreach($params['period'] as $ipid=>$pdetails){
                        $period_details[$ipid]['period']['start'] =  date("Y-m-d",strtotime($pdetails['start']));
                        $period_details[$ipid]['period']['end'] = date("Y-m-d",strtotime($pdetails['end']));
                        $period_details[$ipid]['ids'] = array($id2ipid[$ipid]);
                        
                        if(!empty($params['admissionid'][$ipid])){
                            $admission_id[$ipid]= $params['admissionid'][$ipid]; 
                        } else{
                            $admission_id[$ipid]= false; 
                        }
                        
                        if(!empty($pdetails['id'])){
                            $sapv_id[$ipid]= $pdetails['id']; 
                        } else{
                            $sapv_id[$ipid]= false; 
                        }
                        
                        $generated_invoice = $this->generate_patients_invoicenew($period_details[$ipid]['ids'], $period_details[$ipid]['period'], '',$redirect = false, $sapv_id[$ipid], $admission_id[$ipid]);
                    }
                                					
                    $this->_redirect(APP_BASE . "invoice/healthinsuranceinvoices");
		            exit;
		        }
		    }
		}

 
		
		
		public function newhiinvoiceAction()
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $userid = $logininfo->userid;
		    $boxes = new LettersTextBoxes();
		    $letter_boxes_details = $boxes->client_letter_boxes($clientid);
// print_r($_REQUEST); exit;
		    $this->_helper->viewRenderer->setNoRender();
		    
		    if(!empty($_REQUEST['patient']))
		    {
		        $ipid = Pms_CommonData::get_ipid_from_epid($_REQUEST['patient'], $clientid);
		
		
		        //patient days
		        $conditions['client'] = $clientid;
		        $conditions['ipids'] = array($ipid);
		        $conditions['periods'][0]['start'] = '2009-01-01';
		        $conditions['periods'][0]['end'] = date('Y-m-d');
		
		        $sql = 'e.epid, p.ipid, e.ipid,';
		        $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		        $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		        $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		        $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		        $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		        $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
		        //beware of date d.m.Y format here
		        $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		
		        if($_REQUEST['sapvid'])
		        {
		            $selected_sapv_falls = array($ipid => $_REQUEST['sapvid']);
		
		            //get patients sapvs last fall
		            $patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid), true);
		
		            foreach($selected_sapv_falls as $k_ipid => $fall_id)
		            {
		                $patients_sapv[$k_ipid] = $fall_id;
		                $patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
		            }
		
		            $params['nosapvperiod'][$ipid] = '0';
		            $params['period'] = $patients_selected_periods;
		        }
		        else if(!empty($_REQUEST['list']))
		        {
		            //construct curent month period days
		            $selected_month = $_REQUEST['list'];
		            if(!function_exists('cal_days_in_month'))
		            {
		                $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
		            }
		            else
		            {
		                $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
		            }
		
		            $months_details[$selected_month]['start'] = $selected_month . "-01";
		            $months_details[$selected_month]['days_in_month'] = $month_days;
		            $months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
		            $month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);
		
		            array_walk($month_days_arr, function(&$value) {
		                $value = date("d.m.Y", strtotime($value));
		            });
		            $months_details[$selected_month]['days'] = $month_days_arr;
		
		            //get sapv periods in curent month period and make days
		            if($months_details)
		            {
		                //						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
		                $sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
		
		                $patients_selected_periods = array();
		                foreach($sapv_array as $k_sapv => $v_sapv)
		                {
		                    $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
		                    if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
		                    }
		                    else
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
		                    }
		
		                    if(empty($patients_selected_periods))
		                    {
		                        $patients_selected_periods = array();
		                    }
		
		                    $patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
		                    array_walk($patients_selected_periods, function(&$value) {
		                        $value = date("d.m.Y", strtotime($value));
		                    });
		                    $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                    $existing_sapv_days = $patients_selected_periods;
		                }
		
		                $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                $sapv_days_in_period = array_intersect($month_days_arr, $patients_selected_periods);
		            }
		
		            $params['nosapvperiod'][$ipid] = '1';
		            $params['selected_period'][$ipid] = $months_details[$selected_month];
		            $params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
		            $params['existing_sapv_days'] = array_values($patients_selected_periods);
		            $params['period'][$ipid] = $months_details[$selected_month];
		        }
		        else if(!empty($_REQUEST['admission']))
		        {
		            $selected_period = $_REQUEST['admission'];
		            $admission_start = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['start'];
		            $admission_end = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['end'];
		
		            $period_days_arr = PatientMaster::getDaysInBetween($admission_start, $admission_end);
		
		            array_walk($period_days_arr, function(&$value) {
		                $value = date("d.m.Y", strtotime($value));
		            });
		            $period_details[$selected_period]['start'] = $admission_start;
		            $period_details[$selected_period]['end'] = $admission_end;
		            $period_details[$selected_period]['days'] = $period_days_arr;
		
		            //get sapv periods in curent month period and make days
		            if($period_details[$selected_period])
		            {
		                //						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_period]['start'], $months_details[$selected_period]['end']);
		                $sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $period_details[$selected_period]['start'], $period_details[$selected_period]['end']);
		
		                $patients_selected_periods = array();
		                foreach($sapv_array as $k_sapv => $v_sapv)
		                {
		                    $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
		                    if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
		                    }
		                    else
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
		                    }
		
		                    if(empty($patients_selected_periods))
		                    {
		                        $patients_selected_periods = array();
		                    }
		
		                    $patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
		                    array_walk($patients_selected_periods, function(&$value) {
		                        $value = date("d.m.Y", strtotime($value));
		                    });
		                    $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                    $existing_sapv_days = $patients_selected_periods;
		                }
		
		                $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                $sapv_days_in_period = array_intersect($period_days_arr, $patients_selected_periods);
		            }
		
		            $params['nosapvperiod'][$ipid] = '1';
		            $params['admissionid'][$ipid] = $selected_period;
		            $params['selected_period'][$ipid] = $period_details[$selected_period];
		            $params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
		            $params['existing_sapv_days'] = array_values($patients_selected_periods);
		            $params['period'][$ipid] = $period_details[$selected_period];
		        }
		
		        $all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipid);
		
		        foreach($all_patients_sapvs as $k_sapv => $v_sapv)
		        {
		            if(empty($sapv_days_overall))
		            {
		                $sapv_days_overall = array();
		            }
		
		
		            $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
		            if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
		            {
		                $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
		            }
		            else
		            {
		                $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
		            }
		
		
		            $sapv_days_overall = array_merge($sapv_days_overall, PatientMaster::getDaysInBetween($start, $end));
		            array_walk($sapv_days_overall, function(&$value) {
		                $value = date("d.m.Y", strtotime($value));
		            });
		            $sapv_days_overall = array_values(array_unique($sapv_days_overall));
		        }
		        $params['sapv_overall'][$ipid] = array_values($sapv_days_overall);
		        $params['ipids'] = array($ipid);
		        $params['patient_sapvs'] = $patients_sapv[$ipid];
		        $params['patient_days'] = $patient_days;
		        $params['get_pdf'] = '1';
		        $params['only_pdf'] = (int) $_REQUEST['only_invoice'];
		        $params['stornopdf'] = (int) $_REQUEST['stornopdf'];
		        $params['stornoid'] = (int) $_REQUEST['stornoid'];
		        if(!empty($_REQUEST['iid']))
		        {
		            $params['invoices'] = array((int) $_REQUEST['iid']);
		        }
		
		        
		        $search = Doctrine_Query::create()
		        ->select('id,ipid')
		        ->from('PatientMaster')
		        ->where('isdelete = 0 ')
		        ->andWhereIn('ipid', array($ipid) );
		        $searchResults = $search->fetchArray();
		        	
		        foreach($searchResults as $k=>$pid){
		            $id2ipid[$pid['ipid']] = $pid['id'];
		        }
		        	
		        // CREATE INVOICES 

		        foreach($params['period'] as $o_ipid=>$pdetails){
		            $period_details[$o_ipid]['period']['start'] =  date("Y-m-d",strtotime($pdetails['start']));
		            $period_details[$o_ipid]['period']['end'] = date("Y-m-d",strtotime($pdetails['end']));
		            $period_details[$o_ipid]['ids'] = array($id2ipid[$o_ipid]);
 
		            
		            if(!empty($_REQUEST['sapvid'])){
		                $sapv_id[$o_ipid]= $_REQUEST['sapvid'];
		            } else{
		                $sapv_id[$o_ipid]= false;
		            }
		            
		            $generated_invoice = $this->generate_patients_invoicenew($period_details[$o_ipid]['ids'], $period_details[$o_ipid]['period'], '',$redirect = false,$sapv_id[$o_ipid],$params['admissionid'][$o_ipid]);
		        }
		        
		        // get last inserted invoice
		        $client_details = new Client();
		        $patientmaster = new PatientMaster();
		        $hi_invoices = new HiInvoices();
		        $phealthinsurance = new PatientHealthInsurance();

		        $invoice_data = $hi_invoices->get_last_patient_HiInvoice($ipid);

		        
		        // PRINT INVOICE
		        if(!empty($invoice_data))
		        {
		        	//ISPC-2538 Carmen 21.02.2020
		        	$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'nie_patient_invoice');
		        	if($template_data)
		        	{
		        		$params['invoices'] = $invoice_data['id'];		        	
		        		$this->healthins_print_invoice($params);
		        	}
		        	else
		        	{
			            $patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
			        
			            $patient_health = $phealthinsurance->getPatientHealthInsurance($invoice_data['ipid']);
			            $invoice_data['health_insurance']['insurance_no'] = $patient_health[0]['insurance_no'];
			        
			        
			            $client_det = $client_details->getClientDataByid($invoice_data['client']);
			            $invoice_data['patient_details'] = $patient_details;
			        
			            $invoice_data['client_details'] = $client_det[0];
			        
			            $replacement_arr['%first_name'] = $patient_details['first_name'];
			            $replacement_arr['%last_name'] = $patient_details['last_name'];
			            $replacement_arr['%admission_date'] = date('d.m.Y', strtotime($patient_details['admission_date']));
			            $replacement_arr['%client_name'] = $invoice_data['client_name'];
			            $replacement_arr['%invoice_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
			            $replacement_arr['%invoice_end'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
			        
			            //no money no honey => default gofer
			            if(strlen($invoice_data['header']) == 0)
			            {
			                $header_default = '
						<b><u>Liquidation</u></b>
						<br />
						<br />
						O.g. <b>%first_name %last_name</b> erhält seit dem <b>%admission_date</b> SAPV-Leistungen.
						<br />
						<p>
							Wir erlauben uns, gemäß § 132 d Abs. 1 SGB V über die spezialisierte ambulante Palliativversorgung
							(SAPV) nach § 37 b SGB V und dem entsprechenden Vertrag zwischen dem
							Landeskrankenkassenverband und der %client_name für die Zeit vom %invoice_start
							bis zum  %invoice_end folgende Kosten in Rechnung zu stellen:
						</p>';
			        
			        
			                $invoice_data['header'] = Pms_CommonData::str_replace_assoc($replacement_arr, $header_default);
			            }
			        
			            if(strlen($invoice_data['footer']) == 0)
			            {
			                /* $footer_default_old = '
							Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
							<br />
							<br />
							Mit freundlichen Grüßen';
			                
			                $footer_default = '
							Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>2 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
							<br />
							<br />
							Mit freundlichen Grüßen';
			                
			                
			                if($clientid == "78"){ //NOT THE CORRECt WAY::  ISPC:2035:: Please change the invoce Text for NIE_Diepholz
				                $invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);
			                } else{
				                $invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default_old);
			                } */
			            	
			            	//ISPC:2035:: Please change the invoce Text for NIE_Diepholz
			            	if(!empty($letter_boxes_details)){
				            	$footer_default = $letter_boxes_details[0]['nd_invoice_footer'];
			            	} else {
			            		$footer_default = 'Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
									<br />
									<br />
									Mit freundlichen Grüßen';
			            	}
			            	$invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);
			            	
			            }
			        
		                if($invoice_data['completed_date'] == '0000-00-00 00:00:00')
		                {
		                    $invoice_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
		                }
			        
		                $title = 'Rechnung';
		                $template = 'health_insurance_invoice.html';
			        
			            $invoice_type_special = "ND_patient";
			            $this->generateformPdf(3, $invoice_data, $title . "-" . $invoice_data['prefix'] . $invoice_data['invoice_number'] . "", $template, $invoice_type_special);
			        
			            $this->_redirect(APP_BASE . 'invoice/healthinsuranceinvoices');
			            exit;
		        	}
		        }
		        
		        
		        
// 		        $generated_invoice = $this->generate_patients_invoicenew($period_details[$ipid]['ids'], $period_details[$ipid]['period'], '',$redirect = false);
		        
		        
		        
		    }
		}
		
		
		
		
		
		public function fetchnewinvoicepatientlistAction()
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $userid = $logininfo->userid;
		
		    //get allowed client invoices
		    $client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
		    $this->view->allowed_invoice = $client_allowed_invoice[0];
		
		    $client_data = Client::getClientDataByid($clientid);
		    $this->view->billing_method = $client_data[0]['billing_method'];
		
		    if($client_data[0]['billing_method'] == "both")
		    {
		        $this->view->rowspan_rows = "4";
		    }
		    else if($client_data[0]['billing_method'] == "sapv" || $client_data[0]['billing_method'] == "month" || $client_data[0]['billing_method'] == "admission")
		    {
		        $this->view->rowspan_rows = "2";
		    }
		    else
		    {
		        $this->view->rowspan_rows = "1";
		    }
		
		    //construct months selector array START
		    $start_period = '2010-01-01';
		    $end_period = date('Y-m-d', time());
		    $period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
		
		    foreach($period_months_array as $k_month => $v_month)
		    {
		        $month_select_array[$v_month] = $v_month;
		    }
		    //construct months selector array END
		    //check if a month is selected START
		    if(strlen($_REQUEST['list']) == '0')
		    {
		        $selected_month = end($month_select_array);
		    }
		    else
		    {
		        $selected_month = $month_select_array[$_REQUEST['list']];
		    }
		    $this->view->selected_month = $selected_month;
		
		    if(!function_exists('cal_days_in_month'))
		    {
		        $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
		    }
		    else
		    {
		        $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
		    }
		
		    $months_details[$selected_month]['start'] = $selected_month . "-01";
		    $months_details[$selected_month]['days_in_month'] = $month_days;
		    $months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
		    $this->view->selected_month_details = $months_details[$selected_month];
		    //check if a month is selected END
		    //sort and ordering START
		    $columnarray = array(
		        "epid" => "e.epid",
		        "fn" => 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci',
		        "ln" => 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci',
		        "adm" => "a.start",
		        "dis" => "a.end",
		    );
		
		    if(strlen($_REQUEST['clm']) == '0')
		    {
		        $sortby = 'ln';
		    }
		    else
		    {
		        $sortby = $_REQUEST['clm'];
		    }
		
		    if(strlen($_REQUEST['ord']) == '0')
		    {
		        $order = 'ASC';
		    }
		    else
		    {
		        $order = $_REQUEST['ord'];
		    }
		
		
		    $orderarray = array("ASC" => "DESC", "DESC" => "ASC");
		    $this->view->order = $orderarray[$order];
		    $this->view->{$sortby . "order"} = $orderarray[$order];
		    $x = "TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci";
		    $search_sql = "(TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci like '%" . trim($_REQUEST['val']) . "%' or TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci like '%" . trim($_REQUEST['val']) . "%' or e.epid like '%" . trim($_REQUEST['val']) . "%' )";
		
		    //sort and ordering END
		
		    $active_ipids_count = Pms_CommonData::patients_active('count(*)', $clientid, $months_details, false, $columnarray[$sortby], $order, $search_sql); // BW->SH patient list
		
		    $limit = '9999';
		    $page = $_REQUEST['pgno'];
		    $sql = Pms_CommonData::sql_getters('patients_active');
		    $active_ipids = Pms_CommonData::patients_active($sql, $clientid, $months_details, false, $columnarray[$sortby], $order, $search_sql, $limit, $page);
		
		    $active_ipids_array[] = '99999999999999999';
		    foreach($active_ipids as $k_active => $v_active)
		    {
		        $active_ipids_array[] = $v_active['ipid'];
		    }
		
		    //take all patients details
		    $conditions['client'] = $clientid;
		    $conditions['ipids'] = $active_ipids_array;
		    $conditions['periods'][0]['start'] = '2009-01-01';
		    $conditions['periods'][0]['end'] = date('Y-m-d');
		
		    $sql = 'e.epid, p.ipid, e.ipid,';
		    $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		    $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		    $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		    $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		    $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		    $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
		    //be aware of date d.m.Y format here
		    $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		
		    foreach($patient_days as $k_ipid => $v_pat_data)
		    {
		        foreach($v_pat_data['active_periods'] as $v_period_id => $v_period)
		        {
		
		            $v_period['days'] = PatientMaster::getDaysInBetween($v_period['start'], $v_period['end']);
		            $patients_admissions_periods[$k_ipid][$v_period_id] = $v_period;
		        }
		    }
		
		    foreach($active_ipids as $k_active_patient => $v_active_patient)
		    {
		        $active_patients[$v_active_patient['ipid']] = $v_active_patient;
		
		        $active_ipids_arr[] = $v_active_patient['ipid'];
		
		        $last_period[$v_active_patient['ipid']] = end($v_active_patient['PatientActive']);
		
		        $active_patients[$v_active_patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['start']));
		
		        if($last_period[$v_active_patient['ipid']]['end'] != "0000-00-00")
		        {
		            $active_patients[$v_active_patient['ipid']]['discharge_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['end']));
		        }
		        else
		        {
		            $active_patients[$v_active_patient['ipid']]['discharge_date'] = "-";
		        }
		        $active_patients[$v_active_patient['ipid']]['id'] = $v_active_patient['PatientMaster']['id'];
		    }
		

		    $invoiced_sapv_ids = HiInvoices::get_hi_invoiced_sapvs($active_ipids_arr);
// 		    			print_r($invoiced_sapv_ids);
// 		    			exit;


		    //get all invoices in this period -  for month
		    $generated_invoice_array = HiInvoices::get_generated_hi_invoices($clientid, $months_details[$selected_month],$exclude_storno = true);
		    
		    
		    if($generated_invoice_array )
		    {
		        foreach($generated_invoice_array as $key=>$idata){
		            $invoiced_month_fall_ipids[] = $idata['ipid'];
		        }
		    }
		    
		    $this->view->invoiced_month_fall_ipids = $invoiced_month_fall_ipids;
		    
		    if($invoiced_sapv_ids)
		    {
		        $this->view->invoiced_sapv_ids = $invoiced_sapv_ids['sapv'];
		        $this->view->invoiced_fall_ids = $invoiced_sapv_ids['fall'];
		        $this->view->invoiced_admissions_ids = $invoiced_sapv_ids['admission'];
		    }
		
		    $patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods($active_ipids_arr);
		
		    $this->view->{"style" . $_GET['pgno']} = "active";
		
		    $grid = new Pms_Grid($active_patients, 1, $active_ipids_count[0]['count'], "ndnewinvoicepatients.html");
		
		    $grid->admission_periods = $patients_admissions_periods;
		    $grid->sapv_periods = $patients_sapv_periods;
		    $this->view->newinvoicepatientsgrid = $grid->renderGrid();
		    $this->view->navigation = $grid->dotnavigation("ndnewinvoicepatientsnavigation.html", 5, $page, $limit);
		
		    $response['msg'] = "Success";
		    $response['error'] = "";
		    $response['callBack'] = "callBack";
		    $response['callBackParameters'] = array();
		    $response['callBackParameters']['newinvoicepatientlist'] = $this->view->render('invoice/fetchnewinvoicepatientlist.html');
		
		    echo json_encode($response);
		    exit;
		}
		
		//ISPC_2609 + ISPC-2000 Ancuta 28.09.2020
		public function healthins_print_invoice($params)
		{
		    if($params['bulk_print'] == '1'){
		        $this->_helper->viewRenderer->setNoRender();
		    }
		    
			//spl_autoload_register(array('AutoLoader', 'autoloadPdf')); // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
			//ISPC-2538 Carmen 20.02.2020 add token sapv_approve_nr
			$logininfo = new Zend_Session_Namespace('Login_Info');
			//$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			//$client_details = new Client();
			$hi_invoices = new HiInvoices();
			$hi_invoices_items = new HiInvoiceItems();
			$hi_user_invoices = new UserInvoices(); 
			$hi_invoices_form = new Application_Form_HiInvoices();
			$phealthinsurance = new PatientHealthInsurance();
			$boxes = new LettersTextBoxes();
			$users = new User();
			
			//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
			$clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] :  $logininfo->clientid;
			$userid = isset($params['userid']) && ! empty($params['userid']) ? $params['userid'] : $logininfo->userid;
			
			if(!empty($params) && isset($params['inv_type']) && $params['inv_type']="nie_user_invoice" ){
			    $params['userinvoice'] = 1;
			}

			$invoices_ids = $params['invoices'];			

			if($invoices_ids)
			{
				//load template data
				if($params['userinvoice'])
				{
					$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'nie_user_invoice');
				}
				else 
				{
					$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'nie_patient_invoice');
				}
				
				if (isset($template_data[0])) {
				
					$template = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
				
					//client data
					$client_details = Pms_CommonData::getClientData($clientid);
					
					//batch temp folder
					$batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $clientid);
					
					if($params['userinvoice'])
					{
						$invoices_data = $hi_user_invoices->get_invoices($invoices_ids);
					}
					else 
					{
						//letter footer text
						$letter_boxes_details = $boxes->client_letter_boxes($clientid);
						
						$invoices_data = $hi_invoices->get_invoices($invoices_ids);
				
						
					}
					
					$ipids = array_values(array_unique($invoices_data['invoices_ipdis']));
					
					//patient HEALTH INSURANCE START
					$healthinsu_multi_array = $phealthinsurance->get_multiple_patient_healthinsurance($ipids, true);
			
					$sql = 'e.epid,  e.ipid, p.ipid, p.birthd, p.admission_date, ';
					$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
					$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
					$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
					$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
					$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
					$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
						
					$patient = Doctrine_Query::create()
					->select($sql)
					->from('PatientMaster p')
					->whereIn("p.ipid", $ipids)
					->leftJoin("p.EpidIpidMapping e")
					->andWhere('e.clientid = ?', $clientid);
					$patients_res = $patient->fetchArray();				
					
					$patient_details = array();
					foreach($patients_res as $kpat=>$vpat)
					{
						$patient_details[$vpat['ipid']] = $vpat;
						$patient_details[$vpat['ipid']]['epid'] = $vpat['EpidIpidMapping']['epid'];
					}
					//print_R($invoices_data); exit;
					$entity = new SapvVerordnung();
					$sapv_multi_array = $entity->get_all_sapvs($ipids);

					$sapv2ipid = array();
					foreach($sapv_multi_array as $k=>$sdata){
						$sapv2ipid[$sdata['ipid']][$sdata['id']] = $sdata;
					}
					
					if($params['batch_print'] == '1' && count($params['invoices']) > '0')
					{
						$token_filter['client'] = $client_details[0];
						
						$docx_helper = $this->getHelper('CreateDocxFromTemplate');
						$docx_helper->setTokenController('invoice');


						// ISPC-2472  Ancuta 12.11.2019::create batch name
						$inv_names = array();
						foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
						    if($params['userinvoice'])
						    {
						      $inv_names[] = $invdata['prefix'].$invdata['invoice_number'].'-'.$invdata['invoice_subnumber'];
						    } else{
						      $inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
						    }
						}
						$Batch_name = false;
						if(!empty($inv_names)){
						    $Batch_name = "";
						    $Batch_name = $inv_names[0];
						    if(count($inv_names) > 1){
						        $Batch_name .='_'.end($inv_names);
						    }
						}
						//--
						
						if($params['userinvoice'])
						{
							$extra_columns = array('street1', 'zip', 'city', 'bank_name', 'bank_account_number', 'bank_number', 'iban', 'bic');
							$user_details = $users->getUsersNiceName($invoices_data['userids'], 0, $extra_columns);

							foreach($invoices_data['invoices_data'] as $kinvoice=>$invoice_data)
							{	
								$tokenfilter['patient'] = $patient_details[$invoice_data['ipid']];
								$tokenfilter['patient']['birthd'] = date('d.m.Y', strtotime($patient_details[$invoice_data['ipid']]['birthd']));
								$tokenfilter['user'] = $user_details[$invoice_data['userid']];
								$tokenfilter['invoice'] = $invoice_data;
								
								$tokenfilter['invoice']['user_address'] = nl2br($invoice_data['user_address']);
								$tokenfilter['invoice']['healthinsurancenumber'] = $healthinsu_multi_array[$invoice_data['ipid']]['insurance_no'];
								
								$tokenfilter['invoice']['prefix'] = $invoice_data['prefix'];
								$tokenfilter['invoice']['invoicenumber'] = $invoice_data['invoice_number'] . '-' . $invoice_data['invoice_subnumber'];
								$tokenfilter['invoice']['full_invoice_number'] = $invoice_data['prefix'] . $invoice_data['invoice_number'] . '-' . $invoice_data['invoice_subnumber'];								
								
								$tokenfilter['invoice']['invoiceamount'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
							
								$tokenfilter['invoice']['invoiced_period'] = date('d.m.Y', strtotime($invoice_data['invoice_start'])) . ' - ' . date('d.m.Y', strtotime($invoice_data['invoice_end']));

								$tokenfilter['invoice']['current_date'] = date("d.m.Y", time());
								
								$tokenfilter['invoice']['invoiceheader']  = '
									<p>
										<b>Abrechnung spezialisierte palliativmedizinische und palliativ - hausärztliche Versorgung</b>
										<br/>
										<u>gem. &sect;&sect; 2/1; 13/III; 37b;	&sect;92/I/2 Nr.14; 132d/I SGB V i.Verb. m. &sect; 8/1 der Richtlinie des
										Gemeinsamen Bundesausschusses vom 20.12.2007 und den Gemeinsamen
										Empfehlungen der Spitzenverbände der Krankenkassen vom 30.06.2009.</u>
									</p>';
								//print_r($tokenfilter); exit;
								$name = mt_rand();
									
								$docx_helper->setOutputFile(PDFDOCX_PATH . '/' . $clientid . '/' . $name);
								
								//do not add extension !
								$docx_helper->setBrowserFilename( "ND User Invoices");
								$docx_helper->setBrowserFilename($Batch_name);//ISPC-2472  Ancuta 12.11.2019::added batch name
								// generate and save docx/pdf for every invoice
								
								$docx_helper->create_docx ($template, $tokenfilter) ;
								
							}
							
						}
						else 
						{
					
							foreach($invoices_data['invoices_data'] as $kinvoice=>$invoice_data)
							{
								$sapv_approved = array();
								if($invoice_data['sapvid'] == '0')
								{
								    foreach($sapv2ipid[$invoice_data['ipid']] as $sk=>$sapvData){
								        
								        $r1start = strtotime($sapvData['verordnungam']);
								        $r1end = strtotime($sapvData['verordnungbis']);
								        
								        $r2start = strtotime($invoice_data['invoice_start']);
								        $r2end = strtotime($invoice_data['invoice_end']);
								        if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end)){
								            if(!empty($sapvData['approved_number'])){
								                $sapv_approved['numbers'][$sapvData['ipid']][] =  $sapvData['approved_number'];
								            }
								            if($sapvData['approved_date'] != "0000-00-00 00:00:00"){
    								            $sapv_approved['dates'][$sapvData['ipid']][$invoice_data['id']][] =  date('d.m.Y', strtotime($sapvData['approved_date']));
								            }
								        }
								    }
								}
								else
								{
								    $sapv_approved['numbers'][$invoice_data['ipid']][] = $sapv2ipid[$invoice_data['ipid']][$invoice_data['sapvid']]['approved_number'];
								    $sapv_approved['dates'][$invoice_data['ipid']][$invoice_data['id']][] = date('d.m.Y', strtotime($sapv2ipid[$invoice_data['ipid']][$invoice_data['sapvid']]['approved_date']));
								}
								
								$replacement_arr['%first_name'] = $patient_details[$invoice_data['ipid']]['first_name'];
								$replacement_arr['%last_name'] = $patient_details[$invoice_data['ipid']]['last_name'];
								$replacement_arr['%admission_date'] = date('d.m.Y', strtotime($patient_details[$invoice_data['ipid']]['admission_date']));
								$replacement_arr['%client_name'] = $invoice_data['client_name'];
								$replacement_arr['%invoice_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
								$replacement_arr['%invoice_end'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
									
								//no money no honey => default gofer
								if(strlen($invoice_data['header']) == 0)
								{
									$header_default = '<b><u>Liquidation</u></b>
									<br />
									<br />
									O.g. <b>%first_name %last_name</b> erhält seit dem <b>%admission_date</b> SAPV-Leistungen.
									<br />
									<p>
										Wir erlauben uns, gemäß § 132 d Abs. 1 SGB V über die spezialisierte ambulante Palliativversorgung
										(SAPV) nach § 37 b SGB V und dem entsprechenden Vertrag zwischen dem
										Landeskrankenkassenverband und der %client_name für die Zeit vom %invoice_start
										bis zum  %invoice_end folgende Kosten in Rechnung zu stellen:
									</p>';
						
									
									$invoice_data['header'] = Pms_CommonData::str_replace_assoc($replacement_arr, $header_default);
								}
								
								if(strlen($invoice_data['footer']) == 0)
								{
									//ISPC:2035:: Please change the invoce Text for NIE_Diepholz
									if(!empty($letter_boxes_details)){
										$footer_default = $letter_boxes_details[0]['nd_invoice_footer'];
									} else {
										$footer_default = 'Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
										<br />
										<br />
										Mit freundlichen Grüßen';
										
									}
									$invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);	
								}
								
								$tokenfilter['patient'] = $patient_details[$invoice_data['ipid']];
								$tokenfilter['patient']['admission_date'] = date('d.m.Y', strtotime($patient_details[$invoice_data['ipid']]['admission_date']));
								$tokenfilter['patient']['birthd'] = date('d.m.Y', strtotime($patient_details[$invoice_data['ipid']]['birthd']));//TODO-4164 Ancuta 26.05.2021
								$tokenfilter['client']['lbg_city'] = $client_details[0]['lbg_city'];
								$tokenfilter['invoice']['healthinsurancenumber'] = $healthinsu_multi_array[$invoice_data['ipid']]['insurance_no'];
								
								$tokenfilter['invoice']['prefix'] = $invoice_data['prefix'];
								$tokenfilter['invoice']['invoicenumber'] = $invoice_data['invoice_number'];
								$tokenfilter['invoice']['full_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];
								
								$tokenfilter['invoice']['address'] = nl2br($invoice_data['address']);
								$tokenfilter['invoice']['invoiceheader'] = $invoice_data['header'];
								$tokenfilter['invoice']['invoicefooter'] = $invoice_data['footer'];
								
								$tokenfilter['invoice']['invoiceamount'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
							
								//TODO-4164 Ancuta 26.05.2021
								//sapv approve date

								if($invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['sapv_approve_date'])) != "1970")
								{
								    $tokenfilter['invoice']['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
								}
								else
								{
								    if( !empty($sapv_approved['dates'][$invoice_data['ipid']][$invoice_data['id']]) ){
								        
								        $tokenfilter['invoice']['sapv_approve_date'] = implode(", ",$sapv_approved['dates'][$invoice_data['ipid']][$invoice_data['id']]);
								        
								    } else{
								        
								        $tokenfilter['invoice']['sapv_approve_date'] = '';
								    }
								}
							
								
								//TODO-4164 Ancuta 26.05.2021
								$Abrechnungszeitraum = "";
								
								//start billed action day
								if($invoice_data['invoice_start'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['invoice_start'])) != "1970")
								{
								    $tokenfilter['invoice']['first_active_day'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
								    $tokenfilter['first_active_day'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
								    $Abrechnungszeitraum .= date('d.m.Y', strtotime($invoice_data['invoice_start']));
								}
								else
								{
								    $tokenfilter['invoice']['first_active_day'] = '';
								    $tokenfilter['first_active_day'] = '';
								}
								
								//end billed action day
								if($invoice_data['invoice_end'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['invoice_end'])) != "1970")
								{
								    $tokenfilter['invoice']['last_active_day'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
								    $tokenfilter['last_active_day'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
								    $Abrechnungszeitraum .= ' - '.date('d.m.Y', strtotime($invoice_data['invoice_end']));
								}
								else
								{
								    $tokenfilter['invoice']['last_active_day'] = '';
								    $tokenfilter['last_active_day'] = '';
								}
								
								if(strlen($Abrechnungszeitraum) > 0)
								{
								    $tokenfilter['invoice']['Abrechnungszeitraum'] = $Abrechnungszeitraum;
								    $tokenfilter['Abrechnungszeitraum'] = $Abrechnungszeitraum;
								} else {
								    $tokenfilter['invoice']['Abrechnungszeitraum'] = "";
								    $tokenfilter['Abrechnungszeitraum'] = "";
								}
								
								//-- 
								
								if(count($invoice_data['items']) > '0')
								{
									$rows = count($invoice_data['items']);
								
									$grid = new Pms_Grid($invoice_data['items'], 1, $rows, "health_insurance_invoice_items_list_pdf.html");
								
									$grid->invoice_total = $tokenfilter['invoice']['invoiceamount'];
									$grid->max_entries = $rows;
								
									$html_items = $grid->renderGrid();
								}
								else
								{
									$html_items = "";
									$html_items_short = "";
								}
							
								$tokenfilter['invoice']['invoice_items_html'] = $html_items;
								
								if($invoice_data['completed_date'] == '0000-00-00 00:00:00')
								{
									$tokenfilter['invoice']['invoicedate'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
								}
								else
								{
									$tokenfilter['invoice']['invoicedate'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
								}
								
								$tokenfilter['invoice']['sapv_approve_nr'] = implode(", ",$sapv_approved['numbers'][$invoice_data['ipid']]);
								//print_r($tokenfilter);
								$name = mt_rand();
								 
								$docx_helper->setOutputFile(PDFDOCX_PATH . '/' . $clientid . '/' . $name);
								
								//do not add extension !
// 								$docx_helper->setBrowserFilename("ND Invoices");
								$docx_helper->setBrowserFilename($Batch_name);//ISPC-2472  Ancuta 12.11.2019::added batch name
								// generate and save docx/pdf for every invoice						
								
								$docx_helper->create_docx ($template, $tokenfilter) ;

							}
						}
						//merge all invoices
			    		$docx_helper->merge_as_pdf();
			    
			    		//$x = $docx_helper->file_save_on_ftp();
			    		 
			    		// save $x if needed
			    		$docx_helper->download_file();
			    		exit;
					}
					else 
					{
		 
					   
						$token_filter['client'] = $client_details[0];
						
						if(!empty($params)){
						    $params['controller'] = 'invoice';
						    $this->getRequest()->setParams($params);//ISPC-2609 Amcuta 26.09.2020
						}
						$docx_helper = $this->getHelper('CreateDocxFromTemplate');
   						$docx_helper->setTokenController('invoice');
				
				
						$inv_names = array();
						foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
							if($params['userinvoice'])
							{
								$inv_names[] = $invdata['prefix'].$invdata['invoice_number'].'-'.$invdata['invoice_subnumber'];
							} else{
								$inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
							}
							
							//ISPC-2609 + ISPC-2000 Ancuta 28.09.2020
							if($params['bulk_print'] == '1' && $invdata['storno'] == 1){
							    $params['storno'] = 1;
							}
							//--
							
						}
						
						if($params['bulk_print'] == '1'){
						    
						    $batch_temp_folder = $params['batch_temp_folder'];
						    
						    if(!is_dir(PDFDOCX_PATH))
						    {
						        while(!is_dir(PDFDOCX_PATH))
						        {
						            mkdir(PDFDOCX_PATH);
						            if($i >= 50)
						            {
						                //exit; //failsafe
						                break;
						            }
						            $i++;
						        }
						    }
						    
						    if(!is_dir(PDFDOCX_PATH . '/' . $clientid))
						    {
						        while(!is_dir(PDFDOCX_PATH . '/' . $clientid))
						        {
						            mkdir(PDFDOCX_PATH . '/' . $clientid);
						            if($i >= 50)
						            {
						                //exit; //failsafe
						                break;
						            }
						            $i++;
						        }
						    }
						    
						    
						    
						    if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
						    {
						        while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
						        {
						            mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
						            if($i >= 50)
						            {
						                exit; //failsafe
						            }
						            $i++;
						        }
						    }
						    
						}
						
						
						$file_name = "";
						
						if($params['userinvoice'])
						{
							$extra_columns = array('street1', 'zip', 'city', 'bank_name', 'bank_account_number', 'bank_number', 'iban', 'bic');
							$user_details = $users->getUsersNiceName($invoices_data['userids'], $clientid, $extra_columns);
							
							foreach($invoices_data['invoices_data'] as $kinvoice=>$invoice_data)
							{
								$tokenfilter['patient'] = $patient_details[$invoice_data['ipid']];
								$tokenfilter['patient']['birthd'] = date('d.m.Y', strtotime($patient_details[$invoice_data['ipid']]['birthd']));
								$tokenfilter['user'] = $user_details[$invoice_data['userid']];
								$tokenfilter['invoice'] = $invoice_data;
						
								$tokenfilter['invoice']['user_address'] = nl2br($invoice_data['user_address']);
								$tokenfilter['invoice']['healthinsurancenumber'] = $healthinsu_multi_array[$invoice_data['ipid']]['insurance_no'];
								$tokenfilter['invoice']['invoicenumber'] = $invoice_data['prefix'] . $invoice_data['invoice_number'] . '-' . $invoice_data['invoice_subnumber'];
						
								$tokenfilter['invoice']['invoiceamount'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
								if($params['storno'] == '1')
								{
									$tokenfilter['invoice']['invoiceamount'] = number_format(((-1)*$invoice_data['invoice_total']), '2', ',', '.');
								}
									
								$tokenfilter['invoice']['invoiced_period'] = date('d.m.Y', strtotime($invoice_data['invoice_start'])) . ' - ' . date('d.m.Y', strtotime($invoice_data['invoice_end']));
						
								$tokenfilter['invoice']['current_date'] = date("d.m.Y", time());
						
								$tokenfilter['invoice']['invoiceheader']  = '
									<p>
										<b>Abrechnung spezialisierte palliativmedizinische und palliativ - hausärztliche Versorgung</b>
										<br/>
										<u>gem. &sect;&sect; 2/1; 13/III; 37b;	&sect;92/I/2 Nr.14; 132d/I SGB V i.Verb. m. &sect; 8/1 der Richtlinie des
										Gemeinsamen Bundesausschusses vom 20.12.2007 und den Gemeinsamen
										Empfehlungen der Spitzenverbände der Krankenkassen vom 30.06.2009.</u>
									</p>';
								
								if($params['bulk_print'] == '1'){
								    
								    $destination_path = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/pdf_invoice_' . $invoice_data['id'];
								    $docx_helper->setOutputFile($destination_path);
								    
								    //do not add extension !
								    $docx_helper->setBrowserFilename($inv_names[0]);
								    
								    $docx_helper->create_pdf ($template, $tokenfilter) ;
								    
								    $file_name = $destination_path;
								    
								} else {
								
    								//print_r($tokenfilter); exit;
    								$name = mt_rand();
    									
    								$docx_helper->setOutputFile(PDFDOCX_PATH . '/' . $clientid . '/' . $name);
    						
    								//do not add extension !
    								$docx_helper->setBrowserFilename( "ND User Invoices");
    								$docx_helper->setBrowserFilename($inv_names[0]);
    								// generate and save docx/pdf for every invoice
    						
    								$docx_helper->create_docx ($template, $tokenfilter) ;
								}
							}
							
						}
						else
						{
							foreach($invoices_data['invoices_data'] as $kinvoice=>$invoice_data)
							{
								$sapv_approved = array();
								if($invoice_data['sapvid'] == '0')
								{	
									foreach($sapv2ipid[$invoice_data['ipid']] as $sk=>$sapvData){
											
										$r1start = strtotime($sapvData['verordnungam']);
										$r1end = strtotime($sapvData['verordnungbis']);
											
										$r2start = strtotime($invoice_data['invoice_start']);
										$r2end = strtotime($invoice_data['invoice_end']);
										if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end)){
											if(!empty($sapvData['approved_number'])){
											    $sapv_approved['numbers'][$sapvData['ipid']][] =  $sapvData['approved_number'];
											}
												
// 											$sapv_approved['dates'][$sapvData['ipid']][$invoice_data['id']][] =  $sapvData['approved_date'];
											if($sapvData['approved_date'] != "0000-00-00 00:00:00"){
											    $sapv_approved['dates'][$sapvData['ipid']][$invoice_data['id']][] =  date('d.m.Y', strtotime($sapvData['approved_date']));
											}
										}
									}
								}
								else
								{
								    $sapv_approved['numbers'][$invoice_data['ipid']][] = $sapv2ipid[$invoice_data['ipid']][$invoice_data['sapvid']]['approved_number'];
								    $sapv_approved['dates'][$invoice_data['ipid']][$invoice_data['id']][] = date('d.m.Y', strtotime($sapv2ipid[$invoice_data['ipid']][$invoice_data['sapvid']]['approved_date']));
								}
							 
								//dd($invoice_data['sapvid'],$sapv_approved);
								$replacement_arr['%first_name'] = $patient_details[$invoice_data['ipid']]['first_name'];
								$replacement_arr['%last_name'] = $patient_details[$invoice_data['ipid']]['last_name'];
								$replacement_arr['%admission_date'] = date('d.m.Y', strtotime($patient_details[$invoice_data['ipid']]['admission_date']));
								$replacement_arr['%client_name'] = $invoice_data['client_name'];
								$replacement_arr['%invoice_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
								$replacement_arr['%invoice_end'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
									
								//no money no honey => default gofer
								if(strlen($invoice_data['header']) == 0)
								{
									$header_default = '<b><u>Liquidation</u></b>
									<br />
									<br />
									O.g. <b>%first_name %last_name</b> erhält seit dem <b>%admission_date</b> SAPV-Leistungen.
									<br />
									<p>
										Wir erlauben uns, gemäß § 132 d Abs. 1 SGB V über die spezialisierte ambulante Palliativversorgung
										(SAPV) nach § 37 b SGB V und dem entsprechenden Vertrag zwischen dem
										Landeskrankenkassenverband und der %client_name für die Zeit vom %invoice_start
										bis zum  %invoice_end folgende Kosten in Rechnung zu stellen:
									</p>';
						
									
									$invoice_data['header'] = Pms_CommonData::str_replace_assoc($replacement_arr, $header_default);
								}
								
								if(strlen($invoice_data['footer']) == 0)
								{
									//ISPC:2035:: Please change the invoce Text for NIE_Diepholz
									if(!empty($letter_boxes_details)){
										$footer_default = $letter_boxes_details[0]['nd_invoice_footer'];
									} else {
										$footer_default = 'Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
										<br />
										<br />
										Mit freundlichen Grüßen';
						
									}
									$invoice_data['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);
								}
						
								$tokenfilter['patient'] = $patient_details[$invoice_data['ipid']];
								$tokenfilter['patient']['admission_date'] = date('d.m.Y', strtotime($patient_details[$invoice_data['ipid']]['admission_date']));
								$tokenfilter['patient']['birthd'] = date('d.m.Y', strtotime($patient_details[$invoice_data['ipid']]['birthd']));//TODO-4164 Ancuta 26.05.2021
								$tokenfilter['client']['lbg_city'] = $client_details[0]['lbg_city'];
								$tokenfilter['invoice']['healthinsurancenumber'] = $healthinsu_multi_array[$invoice_data['ipid']]['insurance_no'];
								
								$tokenfilter['invoice']['prefix'] = $invoice_data['prefix'];
								$tokenfilter['invoice']['invoicenumber'] = $invoice_data['invoice_number'];
								$tokenfilter['invoice']['full_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];
								
								$tokenfilter['invoice']['address'] = nl2br($invoice_data['address']);
								$tokenfilter['invoice']['invoiceheader'] = $invoice_data['header'];
								$tokenfilter['invoice']['invoicefooter'] = $invoice_data['footer'];
						
								$tokenfilter['invoice']['invoiceamount'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
								if($params['storno'] == '1')
								{
									$tokenfilter['invoice']['invoiceamount'] = number_format(((-1)*$invoice_data['invoice_total']), '2', ',', '.');
								}
									
								if(count($invoice_data['items']) > '0')
								{
									$rows = count($invoice_data['items']);
						
									$grid = new Pms_Grid($invoice_data['items'], 1, $rows, "health_insurance_invoice_items_list_pdf.html");
						
									$grid->invoice_total = $tokenfilter['invoice']['invoiceamount'];
									$grid->max_entries = $rows;
									
									$html_items = $grid->renderGrid();
								}
								else
								{
									$html_items = "";
									$html_items_short = "";
								}
								//print_r($html_items); exit;
								$tokenfilter['invoice']['invoice_items_html'] = $html_items;
									
								if($params['completed_date'])
								{
									$tokenfilter['invoice']['invoicedate'] = $params['completed_date'];
								}
								else if($invoice_data['completed_date'] == '0000-00-00 00:00:00')
								{
									$tokenfilter['invoice']['invoicedate'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
								}
								else 
								{
									$tokenfilter['invoice']['invoicedate'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
								}
								$tokenfilter['invoice']['sapv_approve_nr'] = implode(", ",$sapv_approved['numbers'][$invoice_data['ipid']]);
	 
								//TODO-4164 Ancuta 26.05.2021
								//sapv approve date
								if($invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['sapv_approve_date'])) != "1970")
								{
								    $tokenfilter['invoice']['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
								}
								else
								{
								    if( !empty($sapv_approved['dates'][$invoice_data['ipid']][$invoice_data['id']]) ){
								        
								        $tokenfilter['invoice']['sapv_approve_date'] = implode(", ",$sapv_approved['dates'][$invoice_data['ipid']][$invoice_data['id']]);
								        
								    } else{
								        
								        $tokenfilter['invoice']['sapv_approve_date'] = '';
								    }
								}

								$Abrechnungszeitraum = "";
								
								//start billed action day
								if($invoice_data['invoice_start'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['invoice_start'])) != "1970")
								{
								    $tokenfilter['invoice']['first_active_day'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
								    $tokenfilter['first_active_day'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
								    $Abrechnungszeitraum .= date('d.m.Y', strtotime($invoice_data['invoice_start']));
								}
								else
								{
								    $tokenfilter['invoice']['first_active_day'] = '';
								    $tokenfilter['first_active_day'] = '';
								}
								
								//end billed action day
								if($invoice_data['invoice_end'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['invoice_end'])) != "1970")
								{
								    $tokenfilter['invoice']['last_active_day'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
								    $tokenfilter['last_active_day'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
								    $Abrechnungszeitraum .= ' - '.date('d.m.Y', strtotime($invoice_data['invoice_end']));
								}
								else
								{
								    $tokenfilter['invoice']['last_active_day'] = '';
								    $tokenfilter['last_active_day'] = '';
								}
								
								if(strlen($Abrechnungszeitraum) > 0)
								{
								    $tokenfilter['invoice']['Abrechnungszeitraum'] = $Abrechnungszeitraum;
								    $tokenfilter['Abrechnungszeitraum'] = $Abrechnungszeitraum;
								} else {
								    $tokenfilter['invoice']['Abrechnungszeitraum'] = "";
								    $tokenfilter['Abrechnungszeitraum'] = "";
								}
								
								//-- 
								
								if($params['bulk_print'] == '1'){
								    
								    $destination_path = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/pdf_invoice_' . $invoice_data['id'];
								    $docx_helper->setOutputFile($destination_path);
								    
								    
								    //do not add extension !
								    $docx_helper->setBrowserFilename($inv_names[0]);
								    
								    $docx_helper->create_pdf ($template, $tokenfilter) ;
								    
								    $file_name = $destination_path;
								    
								} else {
								    $name = mt_rand();
								    
								    $docx_helper->setOutputFile(PDFDOCX_PATH . '/' . $clientid . '/' . $name);
								    
								    //do not add extension !
								    // 								$docx_helper->setBrowserFilename("ND Invoices");
								    $docx_helper->setBrowserFilename($inv_names[0]);
								    // generate and save docx/pdf for every invoice
								    
								    $docx_helper->create_docx ($template, $tokenfilter) ;
								}
							}
						}
						
						if($params['bulk_print'] == '1'){
						    
						    return $file_name;
						    exit;
						}
						else
						{
    						//merge all invoices
    						$docx_helper->merge_as_pdf();
    						 
    						//$x = $docx_helper->file_save_on_ftp();
    						
    						// save $x if needed
    				 
           					$docx_helper->download_file();
    						exit;
						}
					}
				}
			}
		}
		
		/**
		 * ISPC-2424 Lore 20.02.2020  
		 * TODO-2915
		 * @param unknown $report_name
		 * @param unknown $data
		 */
		private function generatePHPExcel($report_name,$data)
		{
		    $Tr = new Zend_View_Helper_Translate();
		    		    
		    // Create new PHPExcel object
		    $excel = new PHPExcel();
		    
		    $excel->getDefaultStyle()->getFont()
		    ->setSize(10);
		    
		    $xls = $excel->getActiveSheet();
		    
		    $line= 1;

		    foreach($data as $key => $key_date)
		    {		    
		        $char_it = 65;
		        foreach($key_date as $valcell)
		        {		        
		            $valcell = str_replace("<br />", "\n", $valcell);
    		        $xls->setCellValue(chr($char_it).$line, $valcell);  		        
    		        $char_it++;
     		    }
    		    $line++;
		    }  
		    
		    $file = str_replace(" ", "_", $report_name);
		    $fileName = $file . ".xls";	    
		    
		    header('Content-Type: application/vnd.ms-excel');
		    header('Content-Disposition: attachment;filename="'.$fileName.'"');
		    header('Cache-Control: max-age=0');
		    $objWriter = PHPExcel_IOFactory::createWriter($excel, 'Excel5');
		    $objWriter->save('php://output');
		    exit;
		}
	
		
		/**
		 * ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
		 */
		public function __StartPrintJobs(){
		    $appInfo = Zend_Registry::get('appInfo');
		    $app_path  = 	isset($appInfo['appCronPath']) && !empty($appInfo['appCronPath']) ? $appInfo['appCronPath'] : false;
		    
		    $function_path = $app_path.'/cron/processprintjobs';
		    popen('curl -s '.$function_path.' &', 'r');
		}
		
		
	}

?>