<?php
// Maria:: Migration ISPC to CISPC 08.08.2020
	class InvoicenewController extends Pms_Controller_Action {

		public function init()
		{
			/* Initialize action controller here */
			
// 			setlocale(LC_ALL, 'de_DE.utf-8');
// 			//date_default_timezone_set('Europe/Berlin');
			
// 			$logininfo = new Zend_Session_Namespace('Login_Info');
// 			$this->clientid = $logininfo->clientid;
// 			$this->userid = $logininfo->userid;
// 			$this->usertype = $logininfo->usertype;
// 			$this->filepass = $logininfo->filepass;
// 			if(!$logininfo->clientid)
// 			{
// 				//redir to select client error
// 				$this->_redirect(APP_BASE . "error/noclient");
// 				exit;
// 			}
			
// 			//call template_init for selected action
// 			$this_action = $this->getRequest()->getActionName();
// 			if(in_array($this_action, self::$actions_with_js_file)) {
// 				$this->template_init();
// 			}

            // ISPC-2609 Ancuta 03.09.2020
            $this->user_print_jobs = 1; 
            //
			
			$this
			->setActionsWithPatientinfoAndTabmenus([
			    /*
			     * actions that have the patient header
			*/
			])
			->setActionsWithJsFile([
			    /*
			     * actions that will include in the <head>:  /public {_ipad} /javascript/views / CONTROLLER / ACTION .js"
			*/
			    'membersinvoices',
			    'invoicesnew',
			])
			->setActionsWithLayoutNew([
			    /*
			     * actions that will use layout_new.phtml
			* Actions With Patientinfo And Tabmenus also use layout_new.phtml
			*/
			])
			;
			
			//ISPC-2623 Carmen 20.08.2020 - import csv payments dialog
			$modules =  new Modules();
			$clientModules = $modules->get_client_modules($clientid);
			
			if($clientModules['236'])
			{
				$af = new Application_Form_ImportCsvDateDialog();
				$import_csv_form = $af->create_form_importcsvdialog();
				$this->view->import_csv_form = $import_csv_form->render();
			}
			else
			{
				$this->view->import_csv_form = "";
			}
			//--
			
		}

// 		private function template_init()
// 		{
// 			setlocale(LC_ALL, 'de_DE.UTF-8');
		
// 			if ( (isset($_REQUEST['pdf_print_template']) && $_REQUEST['pdf_print_template']=="pdf_print_template")
// 					|| (isset($_REQUEST['bypass_template']) && $_REQUEST['bypass_template']== "1" )
// 			)
// 			{
// 				//pdf print template
// 				$this->_helper->viewRenderer->setNoRender(true);
		
// 			}
// 			elseif ( ! $this->getRequest()->isXmlHttpRequest()) {
// 				/* ------------- Include js file of this action --------------------- */
// 				$actionName = $this->getRequest()->getActionName();
// 				$controllerName = $this->getRequest()->getControllerName();
					
// 				//sanitize $js_file_name ?
// 				$actionName = Pms_CommonData::normalizeString($actionName);
// 				$controllerName = Pms_CommonData::normalizeString($controllerName);
		
// 				//this is only on pc... so remember to put the ipad version
// 				$pc_js_file =  PUBLIC_PATH . "/javascript/views/" . $controllerName . "/".  $actionName . ".js";
					
// 				//$js_filename is for http ipad/pc
// 				$js_filename = RES_FILE_PATH . "/javascript/views/" . $controllerName . "/".  $actionName . ".js";
					
// 				if (file_exists( $pc_js_file )) {
// 					$this->view->headScript()->appendFile($js_filename . "?_".(int)filemtime($pc_js_file));
// 				}
		
// 			}
				
// 		}
		
		public function shinvoicepatientlistAction()
		{
			$clientid = $this->clientid;
			$userid = $this->userid;
			$patientmaster = new PatientMaster();

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$this->view->selected_month = $selected_month;
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			$month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);

			array_walk($month_days_arr, function(&$value) {
				$value = date("d.m.Y", strtotime($value));
			});
			$months_details[$selected_month]['days'] = $month_days_arr;
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_rehnung_patients';
			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END


			if($this->getRequest()->isPost())
			{
				if($_POST['selected_patient'])
				{
					$epids_ipids = Pms_CommonData::get_multiple_ipids($_POST['selected_patient']);
					//TODO-3562 Carmen 06.11.2020
					$ipids = array_values($epids_ipids);
					//--
					//loop throuhg posted patients
					if($_POST['selected_patient_period'])
					{
						$selected_sapv_falls_ipids[] = '99999999999';
						$selected_fall_ipids[] = '99999999999';

						foreach($_POST['selected_patient'] as $k_sel_pat => $v_sel_pat)
						{
						// have already invoice for that period ???
						//ISPC-2480 Lore 29.11.2019
						$adm_id = substr($_POST['selected_patient_period'][$v_sel_pat],10);
						
						$have_inv = Doctrine_Query::create()
						->select('*')
						->from('ShInvoices')
						->where('isdelete = 0')
						->andWhere('admissionid = ?', $adm_id);
						$have_inv_arr = $have_inv->fetchArray();
						
						if (empty($have_inv_arr)){
						    $ipids[] = $epids_ipids[$v_sel_pat];
						    
						    $params['nosapvperiod'][$epids_ipids[$v_sel_pat]] = '0';
						    $period_id_exploded = explode('_', $_POST['selected_patient_period'][$v_sel_pat]);
						    
						    //construct array with patients which have admission period selected
						    if(count($period_id_exploded) == "2" && $period_id_exploded[0] == "admission")
						    {
						        $admission_fall[$epids_ipids[$v_sel_pat]] = $period_id_exploded[1];
						    }
						    
						    if($_POST['selected_patient_period'][$v_sel_pat] != '0' && count($period_id_exploded) == "1")
						    {
						        $selected_sapv_falls_ipids[] = $epids_ipids[$v_sel_pat];
						        $selected_sapv_falls[$epids_ipids[$v_sel_pat]] = $_POST['selected_patient_period'][$v_sel_pat];
						    }
						    else if(count($period_id_exploded) == "1")
						    {
						        $selected_fall_ipids[] = $epids_ipids[$v_sel_pat];
						        $selected_fall[$epids_ipids[$v_sel_pat]] = $months_details[$selected_month];
						    }
						}

						}
						
						//get patients sapvs last fall
						if($selected_sapv_falls_ipids)
						{
							$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods($selected_sapv_falls_ipids, true);
							foreach($selected_sapv_falls as $k_ipid => $fall_id)
							{
								$patients_sapv[$k_ipid] = $fall_id;
								$patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
								$params['nosapvperiod'][$k_ipid] = '0';
								$params['period'] = $patients_selected_periods;
							}
						}


						//patient days
						$conditions['client'] = $this->clientid;
						$conditions['ipids'] = $ipids;
						$conditions['periods'][0]['start'] = '2009-01-01';
						$conditions['periods'][0]['end'] = date('Y-m-d');

						$sql = 'e.epid, p.ipid, e.ipid,';
						$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
						$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
						$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
						$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
						$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
						$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

						//be aware of date d.m.Y format here
						$patient_days = Pms_CommonData::patients_days($conditions, $sql);

						//rewrite the periods array if the period is entire month not sapv fall
						$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods($ipids, true);

						foreach($patients_sapv_periods as $k_sapv_ipid => $v_sapvs)
						{
							foreach($v_sapvs as $k_sapv_id => $v_sapv_data)
							{
								if(empty($sapv_days[$v_sapv_data['ipid']]))
								{
									$sapv_days[$v_sapv_data['ipid']] = array();
								}

								$sapv_days[$v_sapv_data['ipid']] = array_merge($sapv_days[$v_sapv_data['ipid']], $v_sapv_data['days']);
								$sapv_days[$v_sapv_data['ipid']] = array_values(array_unique($sapv_days[$v_sapv_data['ipid']]));
							}
						}

						foreach($ipids as $k_ipid => $v_ipid)
						{
							if(!in_array($v_ipid, $selected_sapv_falls_ipids))
							{
								if(array_key_exists($v_ipid, $admission_fall))
								{
									$selected_period[$v_ipid] = $patient_days[$v_ipid]['active_periods'][$admission_fall[$v_ipid]];

									array_walk($selected_period[$v_ipid], function(&$value) {
//										$value = date("Y-m-d", strtotime($value));
										$value = date("d.m.Y", strtotime($value));
									});

									$selected_period[$v_ipid]['days'] = PatientMaster::getDaysInBetween($selected_period[$v_ipid]['start'], $selected_period[$v_ipid]['end']);

									array_walk($selected_period[$v_ipid]['days'], function(&$value) {
										$value = date("d.m.Y", strtotime($value));
									});

									$params['nosapvperiod'][$v_ipid] = '1';
									$params['selected_period'][$v_ipid] = $selected_period[$v_ipid];
									$params['selected_period'][$v_ipid]['days'] = $selected_period[$v_ipid]['days'];


									array_walk($params['selected_period'][$v_ipid]['days'], function(&$value) {
										$value = date("d.m.Y", strtotime($value));
									});

									//exclude outside admission falls days from sapv!
									if(empty($sapv_days[$v_ipid]))
									{
										$sapv_days[$v_ipid] = array();
									}

									if(empty($params['selected_period'][$v_ipid]['days']))
									{
										$params['selected_period'][$v_ipid]['days'] = array();
									}
									$patient_active_sapv_days[$v_ipid] = array_intersect($params['selected_period'][$v_ipid]['days'], $sapv_days[$v_ipid]);
									$params['sapv_in_period'][$v_ipid] = array_values($patient_active_sapv_days[$v_ipid]);

									$start_dmy = date('d.m.Y', strtotime($selected_period[$v_ipid]['start']));
									$end_dmy = date('d.m.Y', strtotime($selected_period[$v_ipid]['end']));

									$start_sapv_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
									$end_sapv_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));

									$params['existing_sapv_days'][$v_ipid] = array_values($patient_active_sapv_days[$v_ipid]);
									$params['period'][$v_ipid] = $selected_period[$v_ipid];

//									$start_sapv_dmy = $patient_active_sapv_days[$v_ipid][0];
//									$end_sapv_dmy = end($patient_active_sapv_days[$v_ipid]);

									$params['period'][$v_ipid]['start'] = $start_dmy;
									$params['period'][$v_ipid]['end'] = $end_dmy;

									$last_sapv_data['ipid'] = $v_ipid;
									$last_sapv_data['start_period'] = date('Y-m-d', strtotime($start_dmy));
									$last_sapv_data['end_period'] = date('Y-m-d', strtotime($end_dmy));
									$sapv_last_require_data[] = $last_sapv_data;

									$params['admissionid'][$v_ipid] = $admission_fall[$v_ipid];
								}
								else
								{
									$start_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
									$end_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));

									$params['nosapvperiod'][$v_ipid] = '1';
									$params['selected_period'][$v_ipid] = $months_details[$selected_month];
									$params['sapv_in_period'][$v_ipid] = array_values($months_details[$selected_month]['days']);
									$params['existing_sapv_days'][$v_ipid] = array_values($months_details[$selected_month]['days']);
									$params['period'][$v_ipid] = $months_details[$selected_month];
									$params['period'][$v_ipid]['start'] = $start_dmy;
									$params['period'][$v_ipid]['end'] = $end_dmy;

									$start_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
									$end_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));

									$last_sapv_data['ipid'] = $v_ipid;
									$last_sapv_data['start_period'] = date('Y-m-d', strtotime($start_dmy));
									$last_sapv_data['end_period'] = date('Y-m-d', strtotime($end_dmy));
									$sapv_last_require_data[] = $last_sapv_data;
								}
							}
						}

						$all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipids);

						if($sapv_last_require_data)
						{
							$last_sapvs_in_period = SapvVerordnung::get_multiple_last_sapvs_inperiod($sapv_last_require_data, true, true);
						}

						foreach($all_patients_sapvs as $k_sapv => $v_sapv)
						{
							if(empty($sapv_days_overall[$v_sapv['ipid']]))
							{
								$sapv_days_overall[$v_sapv['ipid']] = array();
							}


							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}


							$sapv_days_overall[$v_sapv['ipid']] = array_merge($sapv_days_overall[$v_sapv['ipid']], PatientMaster::getDaysInBetween($start, $end));
							array_walk($sapv_days_overall[$v_sapv['ipid']], function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$sapv_days_overall[$v_sapv['ipid']] = array_values(array_unique($sapv_days_overall[$v_sapv['ipid']]));
						}

						foreach($last_sapvs_in_period as $k_sapvs => $v_sapvs)
						{
							foreach($v_sapvs as $k_sapvp => $v_sapvp)
							{
								$startp = date('Y-m-d', strtotime($v_sapvp['verordnungam']));

								if($v_sapvp['status'] == '1' && $v_sapvp['verorddisabledate'] != '0000-00-00 00:00:00')
								{
									$endp = date('Y-m-d', strtotime($v_sapvp['verorddisabledate']));
								}
								else
								{
									$endp = date('Y-m-d', strtotime($v_sapvp['verordnungbis']));
								}
								if(empty($period_sapv_alldays[$v_sapvp['ipid']]))
								{
									$period_sapv_alldays[$v_sapvp['ipid']] = array();
								}
								$period_sapv_alldays[$v_sapvp['ipid']] = array_merge($period_sapv_alldays[$v_sapvp['ipid']], PatientMaster::getDaysInBetween($startp, $endp));
							}
						}


						$params['period_sapvs_alldays'] = $period_sapv_alldays;
						$params['sapv_overall'] = $sapv_days_overall;
					}

//					if($_SERVER['REMOTE_ADDR'] == "10.0.0.12")
//					{
//						print_r($sapv_last_require_data);
//						print_r($last_sapvs_in_period);
////						print_r($params);
//						exit;
//					}
//					print_r("selected_sapv_falls\n");
//					print_r($selected_sapv_falls_ipids);
//					print_r($selected_sapv_falls);
//					print_r("selected_falls\n");
//					print_r($selected_fall_ipids);
//					print_r($selected_fall);
//					print_r("existing_sapv_days\n");
//					print_r($existing_sapv_days);
//					print_r("XX\n\n");

					$params['ipids'] = $ipids;
//					$params['patient_sapvs'] = $patients_sapv;
					$params['patient_days'] = $patient_days;
					$params['get_pdf'] = '0';
					$params['only_pdf'] = 0;
//					print_r($params);
//					exit;
					$this->anlage14_invoice($params);

					$this->redirect(APP_BASE . 'invoicenew/invoicesnew');
					exit;
				}
			}
		}

		public function fetchshpatientlistAction()
		{
			$this->_helper->layout->setLayout('layout_ajax');
			$client_data = Client::getClientDataByid($this->clientid);
			$this->view->billing_method = $client_data[0]['billing_method'];

			if($client_data[0]['billing_method'] == "both")
			{
				$this->view->rowspan_rows = "4";
			}
			else if($client_data[0]['billing_method'] == "sapv" || $client_data[0]['billing_method'] == "month" || $client_data[0]['billing_method'] == "admission")
			{
				$this->view->rowspan_rows = "2";
			}
			else
			{
				$this->view->rowspan_rows = "1";
			}

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}
			$this->view->selected_month = $selected_month;

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
			$this->view->selected_month_details = $months_details[$selected_month];
			//check if a month is selected END
			//sort and ordering START
			$columnarray = array(
				"epid" => "e.epid",
				"fn" => 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci',
				"ln" => 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci',
				"adm" => "a.start",
				"dis" => "a.end",
			);

			if(strlen($_REQUEST['clm']) == '0')
			{
				$sortby = 'ln';
			}
			else
			{
				$sortby = $_REQUEST['clm'];
			}

			if(strlen($_REQUEST['ord']) == '0')
			{
				$order = 'ASC';
			}
			else
			{
				$order = $_REQUEST['ord'];
			}


			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$this->view->order = $orderarray[$order];
			$this->view->{$sortby . "order"} = $orderarray[$order];
			$x = "TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci";
			$search_sql = "(TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci like '%" . trim($_REQUEST['val']) . "%' or TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci like '%" . trim($_REQUEST['val']) . "%' or e.epid like '%" . trim($_REQUEST['val']) . "%' )";

			//sort and ordering END

			$active_ipids_count = Pms_CommonData::patients_active('count(*)', $this->clientid, $months_details, false, $columnarray[$sortby], $order, $search_sql,false,0,true); // BW->SH patient list// TODO-2873 Ancuta 03.02.2020 [add standby condition, for patients thata are NOW standby but had active periods]

			$limit = '9999';
			$page = $_REQUEST['pgno'];
			$sql = Pms_CommonData::sql_getters('patients_active');
			$active_ipids = Pms_CommonData::patients_active($sql, $this->clientid, $months_details, false, $columnarray[$sortby], $order, $search_sql, $limit, $page);

			$active_ipids_array[] = '99999999999999999';
			foreach($active_ipids as $k_active => $v_active)
			{
				$active_ipids_array[] = $v_active['ipid'];
			}

			//take all patients details
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $active_ipids_array;
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['include_standby'] = true;// TODO-2873 Ancuta 03.02.2020 [add standby condition, for patients thata are NOW standby but had active periods]

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			//be aware of date d.m.Y format here
			$patient_days = Pms_CommonData::patients_days($conditions, $sql);


			// TODO-2873 Ancuta 03.02.2020
			$fullstandby= array();
			foreach($patient_days as $k_ipid => $v_pat_data)
			{
			    foreach($v_pat_data['active_periods'] as $v_period_id => $v_period)
			    {
			        if($v_pat_data['details']['isstandby'] == '1'){
			            foreach($v_pat_data['standby_periods'] as $s_per_id => $s_per){
			                if($s_per['start'] == $v_period['start'] &&  $s_per['end'] == $v_period['end']){
			                    $fullstandby[$k_ipid][] = $v_period['start'].$v_period['end'];
			                }
			            }
			        }
			    }
			}
			// -- 
 
			foreach($patient_days as $k_ipid => $v_pat_data)
			{
				foreach($v_pat_data['active_periods'] as $v_period_id => $v_period)
				{
				    $period_ident = 0;
				    $period_ident = $v_period['start'].$v_period['end'];
				 
				    // TODO-2873 Ancuta 03.02.2020
				    if($period_ident!=0 && !in_array($period_ident,$fullstandby[$k_ipid]) )
				    {
    					$v_period['days'] = PatientMaster::getDaysInBetween($v_period['start'], $v_period['end']);
    					$patients_admissions_periods[$k_ipid][$v_period_id] = $v_period;
    					// TODO-2315 16.07.2019
    					if( $v_pat_data['patient_active'][$v_period_id]['end'] == "0000-00-00" ){
    					    $patients_admissions_periods[$k_ipid][$v_period_id]['completed'] = 0;
    					}
				    }
					
				}
			}

			foreach($active_ipids as $k_active_patient => $v_active_patient)
			{
				$active_patients[$v_active_patient['ipid']] = $v_active_patient;

				$active_ipids_arr[] = $v_active_patient['ipid'];

				$last_period[$v_active_patient['ipid']] = end($v_active_patient['PatientActive']);

				$active_patients[$v_active_patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['start']));

				if($last_period[$v_active_patient['ipid']]['end'] != "0000-00-00")
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['end']));
				}
				else
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = "-";
				}
				$active_patients[$v_active_patient['ipid']]['id'] = $v_active_patient['PatientMaster']['id'];
			}

			$invoiced_sapv_ids = ShInvoices::get_sh_invoiced_sapvs($active_ipids_arr);

			$this->view->invoiced_sapv_ids = $invoiced_sapv_ids['sapv'];
			$this->view->invoiced_fall_ids = $invoiced_sapv_ids['fall'];
			$this->view->invoiced_bay_admissions_ids = $invoiced_sapv_ids['admission'];

			$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods($active_ipids_arr);


			$this->view->{"style" . $_GET['pgno']} = "active";

			$grid = new Pms_Grid($active_patients, 1, $active_ipids_count[0]['count'], "listshpatients.html");
			$grid->sapv_periods = $patients_sapv_periods;
			$grid->admission_periods = $patients_admissions_periods;
			$this->view->shpatientsgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("shpatientsnavigation.html", 5, $page, $limit);
			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['shpatientlist'] = $this->view->render('invoicenew/fetchshpatientlist.html');

			echo json_encode($response);
			exit;
		}

		//used when generating invoices by link (one at a time normal || storno)
		public function shanlage14invoiceAction()
		{
			if(!empty($_REQUEST['patient']))
			{
				$ipid = Pms_CommonData::get_ipid_from_epid($_REQUEST['patient'], $this->clientid);


				//patient days
				$conditions['client'] = $this->clientid;
				$conditions['ipids'] = array($ipid);
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');
				$conditions['include_standby'] = true;// TODO-2873 Ancuta 03.02.2020 [add standby condition, for patients thata are NOW standby but had active periods]
				
				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

				//beware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);

				if($_REQUEST['sapvid'])
				{
					$selected_sapv_falls = array($ipid => $_REQUEST['sapvid']);

					//get patients sapvs last fall
					$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid), true);

					foreach($selected_sapv_falls as $k_ipid => $fall_id)
					{
						$patients_sapv[$k_ipid] = $fall_id;
						$patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
					}

					$params['nosapvperiod'][$ipid] = '0';
					$params['period'] = $patients_selected_periods;
				}
				else if(!empty($_REQUEST['list']))
				{
					//construct curent month period days
					$selected_month = $_REQUEST['list'];
					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}

					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
					$month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);

					array_walk($month_days_arr, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$months_details[$selected_month]['days'] = $month_days_arr;

					//get sapv periods in curent month period and make days
					if($months_details)
					{
//						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
						$sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);

						$patients_selected_periods = array();
						foreach($sapv_array as $k_sapv => $v_sapv)
						{
							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}

							if(empty($patients_selected_periods))
							{
								$patients_selected_periods = array();
							}

							$patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
							array_walk($patients_selected_periods, function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$patients_selected_periods = array_values(array_unique($patients_selected_periods));
							$existing_sapv_days = $patients_selected_periods;
						}

						$patients_selected_periods = array_values(array_unique($patients_selected_periods));
						$sapv_days_in_period = array_intersect($month_days_arr, $patients_selected_periods);
					}

					$params['nosapvperiod'][$ipid] = '1';
					$params['selected_period'][$ipid] = $months_details[$selected_month];
					$params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
					$params['existing_sapv_days'] = array_values($patients_selected_periods);
					$params['period'][$ipid] = $months_details[$selected_month];
				}
				else if(!empty($_REQUEST['admission']))
				{
					$selected_period = $_REQUEST['admission'];
					$admission_start = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['start'];
					$admission_end = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['end'];

					$period_days_arr = PatientMaster::getDaysInBetween($admission_start, $admission_end);

					array_walk($period_days_arr, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$period_details[$selected_period]['start'] = $admission_start;
					$period_details[$selected_period]['end'] = $admission_end;
					$period_details[$selected_period]['days'] = $period_days_arr;

					//get sapv periods in curent month period and make days
					if($period_details[$selected_period])
					{
//						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_period]['start'], $months_details[$selected_period]['end']);
						$sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $period_details[$selected_period]['start'], $period_details[$selected_period]['end']);

						$patients_selected_periods = array();
						foreach($sapv_array as $k_sapv => $v_sapv)
						{
							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}

							if(empty($patients_selected_periods))
							{
								$patients_selected_periods = array();
							}

							$patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
							array_walk($patients_selected_periods, function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$patients_selected_periods = array_values(array_unique($patients_selected_periods));
							$existing_sapv_days = $patients_selected_periods;
						}

						$patients_selected_periods = array_values(array_unique($patients_selected_periods));
						$sapv_days_in_period = array_intersect($period_days_arr, $patients_selected_periods);
					}

					$params['nosapvperiod'][$ipid] = '1';
					$params['admissionid'][$ipid] = $selected_period;
					$params['selected_period'][$ipid] = $period_details[$selected_period];
					$params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
					$params['existing_sapv_days'] = array_values($patients_selected_periods);
					$params['period'][$ipid] = $period_details[$selected_period];
				}

				$all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipid);
				//ISPC-2478 Ancuta 27.10.2020
				$patient_Erstsapv_days = array();
				//--
				foreach($all_patients_sapvs as $k_sapv => $v_sapv)
				{
					if(empty($sapv_days_overall))
					{
						$sapv_days_overall = array();
					}


					$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

					if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
					{
						$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
					}
					else
					{
						$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
					}


					$sapv_days_overall = array_merge($sapv_days_overall, PatientMaster::getDaysInBetween($start, $end));
					array_walk($sapv_days_overall, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$sapv_days_overall = array_values(array_unique($sapv_days_overall));
					
					
					//ISPC-2478 Ancuta 27.10.2020
					if($v_sapv['sapv_order'] == '1'){
					    $patient_Erstsapv_days[$v_sapv['ipid']][$v_sapv['id']] =  PatientMaster::getDaysInBetween($start, $end);
					}
					// --
					
					
					
				}
				//ISPC-2478 Ancuta 27.10.2020
				$params['sapv_type_first'][$ipid] = $patient_Erstsapv_days[$ipid];
				// --
				
				$params['sapv_overall'][$ipid] = array_values($sapv_days_overall);
				$params['ipids'] = array($ipid);
				$params['patient_sapvs'] = $patients_sapv[$ipid];
				$params['patient_days'] = $patient_days;
				$params['get_pdf'] = '1';
				$params['only_pdf'] = (int) $_REQUEST['only_invoice'];
				$params['stornopdf'] = (int) $_REQUEST['stornopdf'];
				$params['stornoid'] = (int) $_REQUEST['stornoid'];
				$params['invoices'] = array((int) $_REQUEST['iid']);

				$this->anlage14_invoice($params);
			}
		}

		// changed  from private to public ISPC-2609 Ancuta 31.08.2020
		public function anlage14_invoice($params)
		{
		    if(isset($params['print_job']) && $params['print_job'] == '1'){
    		    $this->_helper->layout->setLayout('layout_ajax');
    		    $this->_helper->viewRenderer->setNoRender();
		    }
		
			//spl_autoload_register(array('AutoLoader', 'autoloadPdf'));  // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
			//initialize used models
			$master_data = array();
			$clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] : $this->clientid;
			$patientmaster = new PatientMaster();
			$sapv = new SapvVerordnung();
			$phelathinsurance = new PatientHealthInsurance();
			$anlage14ctrl = new Anlage14Control();
			$sh_invoices = new ShInvoices();
			$sh_form = new Application_Form_ShInvoices();
			$p_list = new PriceList();
			$ppun = new PpunIpid();
			$ipids = $params['ipids'];
			$patient_days = $params['patient_days'];

			
			
			//ISPC-2478 Ancuta 29.10.2020
			$modules = new Modules();
			$fisrt_Sapv_trigger_flatrate = $modules->checkModulePrivileges("246", $clientid);
			// --
			
			//set current period to work with
			$current_period = $params['period'];

			//client data
			$client_details = Pms_CommonData::getClientData($clientid);

			if($client_details)
			{
				$master_data['client']['id'] = $clientid;
				$master_data['client']['team_name'] = $client_details[0]['team_name'];
			}

			//used modules checks
			// TODO-2104 Ancuta 01.02.2019
			$modules = new Modules();
			$ppun_module = $modules->checkModulePrivileges("88", $clientid) ? "1" : "0" ;
		    $debitor_number_module = $modules->checkModulePrivileges("90", $clientid)? "1": "0";
			// -- 
			
			//patient HEALTH INSURANCE START
			$healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);

			//multiple hi subdivisions && hi subdivisions permissions
			$divisions = HealthInsurancePermissions::getClientHealthInsurancePermissions($clientid);

			if($divisions)
			{
				foreach($healthinsu_multi_array as $k_hi => $v_hi)
				{
					$hi_companyids[] = $v_hi['companyid'];
				}

				$healthinsu_subdiv_arr = PatientHealthInsurance2Subdivisions::get_hi_subdivisions_multiple($hi_companyids);
			}
			
//			print_r($divisions);
//			print_r("AAAA\n");
//			print_r($hi_companyids);
//			print_r($healthinsu_subdiv_arr);
//			print_r($healthinsu_multi_array);
		
			$patient_debitor_details = array();// TODO-2104
			foreach($ipids as $k_ipid => $v_ipid)
			{
				$master_data['patients'][$v_ipid]['details'] = $params['patient_days'][$v_ipid]['details'];
				
				if($divisions && strlen($healthinsu_subdiv_arr[$v_ipid]['3']['name']) > '0')
				{
					$sapv_address[$v_ipid][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['street1']);
					$sapv_address[$v_ipid][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city']);
					$master_data['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = implode('<br />', array_values(array_unique($sapv_address[$v_ipid])));
				}
				else 
				{
					$master_data['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = '';
				}
				
				
				if($params['nosapvperiod'][$v_ipid] == '1')
				{
					$curent_period[$v_ipid]['start'] = $params['selected_period'][$v_ipid]['start'];
					$curent_period[$v_ipid]['end'] = $params['selected_period'][$v_ipid]['end'];
					$curent_period_days[$v_ipid] = $params['selected_period'][$v_ipid]['days'];
					$curent_period_days_sapv[$v_ipid] = $params['sapv_in_period'][$v_ipid];
				}
				else //sapv period selected case
				{
					$curent_period[$v_ipid]['start'] = $params['period'][$v_ipid]['start'];
					$curent_period[$v_ipid]['end'] = $params['period'][$v_ipid]['end'];
					$curent_period_days[$v_ipid] = $params['period'][$v_ipid]['days'];
					$curent_period_days_sapv[$v_ipid] = array_intersect($params['patient_days'][$v_ipid]['active_days'], $params['period'][$v_ipid]['days']);
					$curent_period_days_sapv[$v_ipid] = array_intersect($curent_period_days_sapv[$v_ipid], $params['sapv_overall'][$v_ipid]);
				}

				$master_data['patients'][$v_ipid]['invoice_data']['period'] = $curent_period[$v_ipid];
				$master_data['patients'][$v_ipid]['invoice_data']['sapv'] = $params['period'][$v_ipid];
				$master_data['patients'][$v_ipid]['invoice_data']['admissionid'] = $params['admissionid'][$v_ipid];

				//map array to have sapv like start-end
				if(empty($master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam']))
				{
					if($params['existing_sapv_days'][$v_ipid])
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam'] = date('Y-m-d H:i:s', strtotime($params['existing_sapv_days'][$v_ipid][0]));
					}
					else if($params['existing_sapv_days'][0])
					{

						$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam'] = date('Y-m-d H:i:s', strtotime($params['existing_sapv_days'][0]));
					}
				}

				if(empty($master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis']))
				{
					if($params['existing_sapv_days'][$v_ipid])
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis'] = date('Y-m-d H:i:s', strtotime(end($params['existing_sapv_days'][$v_ipid])));
					}
					else if($params['existing_sapv_days'][0])
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis'] = date('Y-m-d H:i:s', strtotime(end($params['existing_sapv_days'])));
					}
				}

				if(!empty($params['period_sapvs_alldays'][$v_ipid]))
				{
					$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam'] = date('Y-m-d H:i:s', strtotime($params['period_sapvs_alldays'][$v_ipid][0]));
					$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis'] = date('Y-m-d H:i:s', strtotime(end($params['period_sapvs_alldays'][$v_ipid])));
				}

				$master_data['patients'][$v_ipid]['invoice_data']['hi_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
				$master_data['patients'][$v_ipid]['invoice_data']['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
				$master_data['patients'][$v_ipid]['invoice_data']['privatepatient'] = $healthinsu_multi_array[$v_ipid]['privatepatient'];
				
                //TODO-2605 Ancuta 25.11.2019 :: If patient has  subdivision SAPV - get debitor number from SAPV subdivision
				if($divisions && strlen($healthinsu_subdiv_arr[$v_ipid]['3']['name']) > '0' && $healthinsu_multi_array[$v_ipid]['privatepatient']  == '0')
				{
    				// TODO-2104 Ancuta 01.02.2019
    				if($debitor_number_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "0")
    				{
    				    //get debtor number from patient healthinsurance
    				    if(strlen($healthinsu_subdiv_arr[$v_ipid][3]['debtor_number']) > '0')
    				    {
    				        $patient_debitor_details[$v_ipid]['debitor_number'] = $healthinsu_subdiv_arr[$v_ipid][3]['debtor_number'];
    				    }
    				    else
    				    {
    				        $patient_debitor_details[$v_ipid]['debitor_number'] = '';
    				    }
    				}
    				
    				if($ppun_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "1")
    				{
    				    //get ppun (private patient unique number)
    				    $ppun_number = $ppun->check_patient_ppun($v_ipid, $clientid);
    				    if($ppun_number)
    				    {
    				        $master_data['patients'][$v_ipid]['invoice_data']['ppun'] = $ppun_number['ppun'];
    				        $patient_debitor_details[$v_ipid]['debitor_number']= $ppun_number['ppun'];
    				    }
    				}
				    
				} else{
				    
    				// TODO-2104 Ancuta 01.02.2019
    				if($debitor_number_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "0")
    				{
    				    //get debtor number from patient healthinsurance
    				    if(strlen($healthinsu_multi_array[$v_ipid]['ins_debtor_number']) > '0')
    				    {
    				        $patient_debitor_details[$v_ipid]['debitor_number'] = $healthinsu_multi_array[$v_ipid]['ins_debtor_number'];
    				    }
    				    else
    				    {
    				        $patient_debitor_details[$v_ipid]['debitor_number'] = $healthinsu_multi_array[$v_ipid]['company']['debtor_number'];
    				    }
    				}
    				if($ppun_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "1")
    				{
    				    //get ppun (private patient unique number)
    				    $ppun_number = $ppun->check_patient_ppun($v_ipid, $clientid);
    				    if($ppun_number)
    				    {
    				        $master_data['patients'][$v_ipid]['invoice_data']['ppun'] = $ppun_number['ppun'];
    				        $patient_debitor_details[$v_ipid]['debitor_number']= $ppun_number['ppun'];
    				    }
    				}
				}
				
				
								
				
				
				//-- 
				$master_data['patients'][$v_ipid]['invoice_data']['hospital_real_days_cs'] =  $params['patient_days'][$v_ipid]['hospital']['real_days_cs'];
				$master_data['patients'][$v_ipid]['invoice_data']['hospiz_real_days_cs'] =  $params['patient_days'][$v_ipid]['hospiz']['real_days_cs']; // TODO-2957 Ancuta 28.02.2020
			}
			
			
			
			// TODO-2096
			//  get all sapv details
			if(!empty($ipids)){
			    
    			$all_sapvs = array();
                $all_sapvs = $sapv->get_all_sapvs($ipids);
    
                $sapv2ipid = array();
                foreach($all_sapvs as $k=>$sdata){
                    $sapv2ipid[$sdata['ipid']][] = $sdata;
                }
    
                $sapv_approved = array();
                foreach($sapv2ipid as $s_ipid => $sdetails){
                    foreach($sdetails as $sk=>$sapvData){
    
                        $r1start = strtotime($sapvData['verordnungam']);
                        $r1end = strtotime($sapvData['verordnungbis']);
                        
                        $r2start = strtotime($curent_period[$sapvData['ipid']]['start']);
                        $r2end = strtotime($curent_period[$sapvData['ipid']]['end']);
                        if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end)){
                            if(!empty($sapvData['approved_number'])){
                                $sapv_approved['numbers'][$s_ipid][$sapvData['id']] =  $sapvData['approved_number'];
                            }
                            
                            $sapv_approved['dates'][$s_ipid][$sapvData['id']] =  $sapvData['approved_date'];
                        }
                    }
                }
                
                foreach($ipids as $k_ipids => $v_ipidd)
                {
                    $master_data['patients'][$v_ipidd]['invoice_data']['sapv']['approved_number'] =  implode(", ",$sapv_approved['numbers'][$v_ipidd]);
                }
			}
//             $master_data['patients'][$k_ipid]['invoice_data']['sapv']['approved_number'];

// 		 dd($sapv_approved);
//			print_r($params['period']);
//
//			print_r($healthinsu_multi_array);
//			print_r($curent_period_days);
//			print_r($curent_period_days_sapv);
//			exit;
			if($params['only_pdf'] == '0')
			{
				$shortcuts_arr = array(
					'sh_beko',
					'sh_folgeko',
					'sh_doc_non_hospiz_visits',
					'sh_nur_non_hospiz_visits',
					'sh_other_visits',
					'sh_doc_hospiz_visits',
					'sh_telefonat',
					'sh_flatrate',
					//used only in custom totals
					'sh_nur_visits',
					'sh_nur_hospiz_visits',
				);

				$visits_shortcuts = array(
					'sh_doc_non_hospiz_visits',
					'sh_nur_non_hospiz_visits',
					'sh_other_visits',
					'sh_doc_hospiz_visits',
					//used only in custom totals
					'sh_nur_hospiz_visits',
					'sh_nur_non_hospiz_visits',
				);
				
				//TODO-3562 Carmen 06.11.2020
				//shortcuts calculated internaly but not shown in view
				$excluded_shortcuts = array(
						'sh_nur_visits',
						'sh_nur_hospiz_visits',
				);
				//--
				
				foreach($ipids as $k_ipid => $v_ipid)
				{
					$hi_address[$v_ipid] = array();

					if($divisions && strlen($healthinsu_subdiv_arr[$v_ipid]['3']['name']) > '0' && $master_data['patients'][$v_ipid]['invoice_data']['privatepatient'] == '0')
					{
						$master_data['patients'][$v_ipid]['health_insurace'] = $healthinsu_subdiv_arr[$v_ipid]['3'];

						$hi_address[$v_ipid]['address'][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['name']);
						if($healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider'])
						{
							$hi_address[$v_ipid]['address'][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider']);
						}
						/* else 
						{
							$hi_address[$v_ipid]['address'][] = $healthinsu_subdiv_arr[$v_ipid][3]['contact_person'];
						} */
			
						$hi_address[$v_ipid]['address'][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['street1']);
						$hi_address[$v_ipid]['address'][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city']);
					}
					else if($master_data['patients'][$v_ipid]['invoice_data']['privatepatient'] == '0')
					{
						$master_data['patients'][$v_ipid]['health_insurace'] = $healthinsu_multi_array[$v_ipid];

						if(strlen($healthinsu_multi_array[$v_ipid]['company_name']) > '0')
						{
							$hi_address[$v_ipid]['address'][] = htmlentities($healthinsu_multi_array[$v_ipid]['company_name']);
						}
						else
						{
							$hi_address[$v_ipid]['address'][] = htmlentities($healthinsu_multi_array[$v_ipid]['company']['name']);
						}

						if(strlen($healthinsu_multi_array[$v_ipid]['ins_insurance_provider']) > '0')
						{
							$hi_address[$v_ipid]['address'][] = htmlentities($healthinsu_multi_array[$v_ipid]['ins_insurance_provider']);
						}
						else
						{
							$hi_address[$v_ipid]['address'][] = htmlentities($healthinsu_multi_array[$v_ipid]['company']['insurance_provider']);
						}
						
						if(strlen($healthinsu_multi_array[$v_ipid]['ins_street']) > '0')
						{
							$hi_address[$v_ipid]['address'][] = htmlentities($healthinsu_multi_array[$v_ipid]['ins_street']);
						}
						else
						{
							$hi_address[$v_ipid]['address'][] = htmlentities($healthinsu_multi_array[$v_ipid]['company']['street1']);
						}

						if(strlen($healthinsu_multi_array[$v_ipid]['ins_zip']) > '0' || strlen($healthinsu_multi_array[$v_ipid]['ins_city']) > '0')
						{
							if(strlen($healthinsu_multi_array[$v_ipid]['ins_zip']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] = $healthinsu_multi_array[$v_ipid]['ins_zip'];
							}

							if(strlen($healthinsu_multi_array[$v_ipid]['ins_city']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] = htmlentities($healthinsu_multi_array[$v_ipid]['ins_city']);
							}

							$hi_address[$v_ipid]['address'][] = implode(' ', $hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']]);
						}
						else
						{
							if(strlen($healthinsu_multi_array[$v_ipid]['zip']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] = $healthinsu_multi_array[$v_ipid]['zip'];
							}

							if(strlen($healthinsu_multi_array[$v_ipid]['city']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] = htmlentities($healthinsu_multi_array[$v_ipid]['city']);
							}

							$hi_address[$v_ipid]['address'][] = implode(' ', array_values(array_unique($hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']])));
						}
					}
					else
					{
						//private patient case!
						$hi_address[$v_ipid]['address'][] = htmlentities($params['patient_days'][$v_ipid]['details']['first_name'] . ' ' . $params['patient_days'][$v_ipid]['details']['last_name']);
						$hi_address[$v_ipid]['address'][] = htmlentities($params['patient_days'][$v_ipid]['details']['street1']);
						$hi_address[$v_ipid]['address'][] = htmlentities($params['patient_days'][$v_ipid]['details']['zip'] . ' ' . $params['patient_days'][$v_ipid]['details']['city']);
					}
					$master_data['patients'][$v_ipid]['invoice_data']['health_insurace_address'] = implode('<br />', array_values(array_unique($hi_address[$v_ipid]['address'])));
				}
				
				//patient HEALTH INSURANCE END
				
				$pat_dis = new PatientDischarge();
				$patients_discharge = $pat_dis->get_patients_discharge($ipids);
					
				$patients_discharge_date = array();
				foreach($patients_discharge as $k_dis => $v_dis)
				{
				    $patients_discharge_date[$v_dis['ipid']] = $v_dis['discharge_date'];
				}
					
				
				
				//get patient TELEFONAT (XT) START
				$tel_array = PatientCourse::get_sh_patient_shortcuts_course($ipids, array('XT'));
				$patient_phones = array();
				foreach($tel_array as $k_tel => $v_tel)
				{
					$v_tel_date = date('d.m.Y', strtotime($v_tel['done_date']));

					if(in_array($v_tel_date, $curent_period_days_sapv[$v_tel['ipid']]))
					{
        				// REMOVE CONTACTS AFTER DISCHARGE TIME
					    if($v_tel_date == date('d.m.Y', strtotime($patients_discharge_date[$v_tel['ipid']])) && strtotime(date('Y-m-d H:i:s', strtotime($v_tel['done_date']))) > strtotime($patients_discharge_date[$v_tel['ipid']])){
					        // do not add
					    } else{
					        
                            $patient_phones[$v_tel['ipid']][$v_tel_date]['sh_telefonat'][] = $v_tel;
					    }
					}
					$v_tel_date = '';
				}
				
				//get patient TELEFONAT (XT) END
				//get contact forms (ALL) START
				$contact_forms_all = array();
				$contact_forms_all = ContactForms::get_sh_period_contact_forms($ipids, false, false, $curent_period_days_sapv);
				
				// REMOVE CONTACTS AFTER DISCHARGE TIME
				foreach($contact_forms_all as $kcf => $day_cfs)
				{
				    foreach($day_cfs as $k_dcf => $v_dcf)
				    {
				        if(is_numeric($k_dcf))
				        {
				            if(strtotime(date('Y-m-d H:i:s', strtotime($v_dcf['start_date']))) > strtotime($patients_discharge_date[$v_dcf['ipid']]) && $patient_days[$v_dcf['ipid']]['details']['isdischarged'] == '1')
				            {
				                unset($contact_forms_all[$kcf][$k_dcf]);
				            }
				        }
				    }
				}
				
				
				
				
				
				$current_form = array('shanlage14');
				$form_items = FormsItems::get_all_form_items($clientid, $current_form, 'v');

				foreach($form_items[$current_form[0]] as $k_item => $v_item)
				{
					$items_arr[] = $v_item['id'];
				}

				$items_contact_forms = Forms2Items::get_items_forms($clientid, $items_arr);

				foreach($contact_forms_all as $kcf => $day_cfs)
				{
					foreach($day_cfs as $k_dcf => $v_dcf)
					{
						//format contact form date to fit the format used in patients_days()
						$contact_form_date = date('d.m.Y', strtotime($kcf));

						if( in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['real_active_days'])){
						    
    						//all contact forms mapped with id as key
    						$contact_forms_details[$v_dcf['id']] = $v_dcf;
    
    						if( in_array($v_dcf['form_type'], $items_contact_forms['sh_other_visits'])
    						    && ! in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospiz']['real_days_cs']) 
    						    && ! in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospital']['real_days_cs'])
    						    )
    						{
    							//catch the contact forms added by users which belong to the client setting selected groups
    							$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_other_visits'][] = $v_dcf['id'];
    						}
    
    						if(in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']) || in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_non_hospiz_visits']))
    						{
    							//all doctor contactforms
    							$contact_forms[$v_dcf['ipid']][$contact_form_date]['doctor_all'][] = $v_dcf['id'];
    
    							//split doctors contact forms into 2 entities (hospiz and non-hospiz)
    							//TODO-3562 Carmen 05.11.2020
    							/* if((in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospiz']['real_days_cs']) || in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']))
    							{ */
    							if((in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospiz']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']))
    							{
    							//--
    								$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_doc_hospiz_visits'][] = $v_dcf['id'];
    							}
    							else if((!in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospiz']['real_days_cs']) && !in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_non_hospiz_visits']))
    							{
    								$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_doc_non_hospiz_visits'][] = $v_dcf['id'];
    							}
    						}
    
    						if(in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']) || in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_non_hospiz_visits']))
    						{
    							//all nurse contactforms
    							$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_nur_visits'][] = $v_dcf['id'];
    
    							//nurse contact forms in hospiz and non hospiz(non hospiz is used in "Anzahl Tagespauschale")
    							//TODO-3562 Carmen 05.11.2020
    							/* if((in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospiz']['real_days_cs']) || in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']))
    							{ */
    							if((in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospiz']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']))
    							{
    								$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_nur_hospiz_visits'][] = $v_dcf['id'];
    							}
    							//--
    							//nurse contact forms in hospiz and non hospiz(non hospiz is used in "Anzahl Tagespauschale")
    							else if((!in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospiz']['real_days_cs']) && !in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_non_hospiz_visits']))
    							{
    								$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_nur_non_hospiz_visits'][] = $v_dcf['id'];
    							}
    						}
					   }
					}
				}

				//get contact forms (ALL) END
				//get saved data if any START
				$this->view->has_data = '0';
				$anlage14_res = $anlage14ctrl->get_period_anlage14_controlsheet($ipids, $current_period, true, $excluded_shortcuts); //TODO-3562 Carmen 06.11.2020
				
				if(!empty($anlage14_res))
				{
					foreach($anlage14_res as $k_res => $v_res)
					{
						if(!empty($v_res))
						{
							$has_data[$k_res] = '1';
						}
					}
				}
				
				//dd($params);
				//get saved data if any END
				//load saved data and create master data array START
				$patient_29th_days = array();
				$erst_29_days = array();
				foreach($ipids as $kk_ipid => $vv_ipid)
				{
					$treated_days_all[$vv_ipid] = array_values($patient_days[$vv_ipid]['treatment_days']);

					$pat_sapv_days_dmy[$vv_ipid] = $params['sapv_overall'][$vv_ipid];

					array_walk($pat_sapv_days_dmy[$vv_ipid], function(&$value) {
						$value = date('d.m.Y', strtotime($value));
					});

					$treated_days_all[$vv_ipid] = array_intersect($treated_days_all[$vv_ipid], $pat_sapv_days_dmy[$vv_ipid]);

					$treated_days_all_ts[$vv_ipid] = $treated_days_all[$vv_ipid];
					array_walk($treated_days_all_ts[$vv_ipid], function(&$value) {
						$value = strtotime($value);
					});

					asort($treated_days_all_ts[$vv_ipid], SORT_NUMERIC);

					$treated_days_all_ts[$vv_ipid] = array_values(array_unique($treated_days_all_ts[$vv_ipid]));

					
					
					//TODO-3669 Ancuta 11.10.2020
					$treated_days_all[$vv_ipid] = $treated_days_all_ts[$vv_ipid];
					array_walk($treated_days_all[$vv_ipid], function(&$value) {
					    $value = date('d.m.Y', $value);
					});
					// -- 
					
					$pat_treatment_days[$vv_ipid] = $treated_days_all_ts[$vv_ipid];
					array_walk($pat_treatment_days[$vv_ipid], function(&$value) {
						$value = date('Y-m-d', $value);
					});

					$flatrate_treatment_days[$vv_ipid] = $treated_days_all_ts[$vv_ipid];

					if(count($flatrate_treatment_days[$vv_ipid]) > 0)
					{
						$flatrate_start[$vv_ipid] = $flatrate_treatment_days[$vv_ipid][0];
						$fl_days[$vv_ipid] = array();
						while(count($fl_days[$vv_ipid]) < '7')
						{
							if(in_array($flatrate_start[$vv_ipid], $flatrate_treatment_days[$vv_ipid]))
							{
								$fl_days[$vv_ipid][] = $flatrate_start[$vv_ipid];
							}
							else
							{
								$fl_days[$vv_ipid][] = $flatrate_treatment_days[$vv_ipid][0];
							}

							$flatrate_start[$vv_ipid] = strtotime('+1 day', $flatrate_start[$vv_ipid]);
						}
					}

					
				
				//TODO-3724 Ancuta 21-25.01.2021 + TODO-3743 Ancuta 25.01.2021 $beck_array	
				foreach($params['sapv_type_first'][$vv_ipid] as $sid =>$s_days){
				    foreach($s_days as $k=>$se){
				        if(in_array(date('d.m.Y',strtotime($se)),$treated_days_all[$vv_ipid])){
				            $Valid_patient_Erstsapv_days[$vv_ipid][$sid][]=$se;
				        }
				    }
				}
				
				foreach($Valid_patient_Erstsapv_days[$vv_ipid] as $ksi=>$es_dates_v){
				    $valid_erst_sapv_starts[$vv_ipid][] = date('d.m.Y',strtotime($es_dates_v[0]));
				    $all_valid_erst_sapv_starts[$vv_ipid][] = date('d.m.Y',strtotime($es_dates_v[0]));
				}
				//--
					
                // ISPC-2478 Ancuta 27.10.2020 Start
				$days29ths[$vv_ipid] = array();
                if($fisrt_Sapv_trigger_flatrate){ // check module
                    foreach ($params['sapv_type_first'][$vv_ipid] as $sid => $s_days) {
                        array_walk($s_days, function (&$value) {
                            $value = date('d.m.Y', strtotime($value));
                        });
                        
                        $params['sapv_type_first'][$vv_ipid][$sid] = array_values(array_intersect($treated_days_all[$vv_ipid], $s_days));
                        array_walk($params['sapv_type_first'][$vv_ipid][$sid], function (&$value) {
                            $value = date('Y-m-d', strtotime($value));
                        });
                    }
         
                    foreach ($params['sapv_type_first'][$vv_ipid] as $sid => $s_days) {
    
                        $s_days_ts = $s_days;
                        array_walk($s_days_ts, function (&$value) {
                            $value = strtotime($value);
                        });
    
                        // if existing flatrates - ar in the curent $s sapv days then skip
                        if (array_intersect($fl_days[$vv_ipid], $s_days_ts)) {
                            
                        } else {
                            //TODO-3725 Ancuta Added [$vv_ipid] key ::START
                            $flatrate_treatment_days_sapv[$vv_ipid][$sid] = $s_days_ts;
    
                            if (count($flatrate_treatment_days_sapv[$vv_ipid][$sid]) > 0) {
                                $flatrate_start_sapv[$vv_ipid][$sid] = $flatrate_treatment_days_sapv[$vv_ipid][$sid][0];
                                $flatrate_start_days_sapv[$vv_ipid][$sid] = $flatrate_treatment_days_sapv[$vv_ipid][$sid][0];
                                $fl_days_Sapv[$vv_ipid][$sid] = array();
                                while (count($fl_days_Sapv[$vv_ipid][$sid]) < '7') {
                                    if (in_array($flatrate_start_sapv[$vv_ipid][$sid], $flatrate_treatment_days_sapv[$vv_ipid][$sid])) {
                                        $fl_days_Sapv[$vv_ipid][$sid][] = $flatrate_start_sapv[$vv_ipid][$sid];
                                    } else {
                                        $fl_days_Sapv[$vv_ipid][$sid][] = $flatrate_treatment_days_sapv[$vv_ipid][$sid][0];
                                    }
    
                                    $flatrate_start_sapv[$vv_ipid][$sid] = strtotime('+1 day', $flatrate_start_sapv[$vv_ipid][$sid]);
                                }
    
                                $fl_days[$vv_ipid] = array_merge($fl_days[$vv_ipid], $fl_days_Sapv[$vv_ipid][$sid]);
                            }
                            //TODO-3725 Ancuta Added [$vv_ipid] key ::END
                        }
                    }
                    
                    
                    
                    $fl_rts[$vv_ipid]  =array();
                    foreach($flatrate_start_days_sapv[$vv_ipid] as $sapv_id=>$start_flartare_Date){//TODO-3725 Ancuta Added [$vv_ipid] key 
                        $fl_rts[$vv_ipid][$sapv_id][] = $start_flartare_Date;
                        
                        foreach($treated_days_all_ts[$vv_ipid] as $kdt => $day_treatment){
                            if($day_treatment > $start_flartare_Date && count($fl_rts[$vv_ipid][$sapv_id]) <  30){
                                $fl_rts[$vv_ipid][$sapv_id][] = $day_treatment;
                            }
                        }
                    }
                    
                    foreach($fl_rts[$vv_ipid] as $sids=>$trsdays){
                        if(count($trsdays) >=29){
                            $days29ths[$vv_ipid][] = end($trsdays);
                        }
                    }
                    
                    
                    
                    
                    
                    
                    //TODO-3724 Ancuta 21-25.01.2021 Start
                    $fall_sapv_treatment_days = array();
                    foreach($patient_days as $pipid=>$pdata){
                        $flnr= 0;
                        foreach($pdata['patient_active'] as $pid=>$pa){
                            if($pa['end'] == "0000-00-00" ){
                                $pa['end'] = date("Y-m-d");
                            }
                            foreach($pdata['treatment_days'] as $tk=>$tr_day){
                                if(Pms_CommonData::isintersected(strtotime($tr_day), strtotime($tr_day), strtotime($pa['start']), strtotime($pa['end']))
                                    && in_array($tr_day,$pat_sapv_days_dmy[$vv_ipid])
                                    ){
                                        $fall_sapv_treatment_days[$pipid][$flnr][] = $tr_day;
                                }
                            }
                            
                            $flnr++;
                        }
                    }
       
                    foreach($valid_erst_sapv_starts[$vv_ipid] as $k=>$ss_start_date){
                        
                        if($valid_erst_sapv_starts[$vv_ipid][$k+1]){
                            $per_sapv_start_dates[$ss_start_date] = PatientMaster::getDaysInBetween(date('Y-m-d',strtotime($ss_start_date)), date('Y-m-d',strtotime($valid_erst_sapv_starts[$vv_ipid][$k+1])),null,"d.m.Y");
                            
                            foreach($per_sapv_start_dates[$ss_start_date] as $l=>$sdate){
                                $erst_29_days[$vv_ipid][$ss_start_date][] = $sdate;
                            }
                            
                            if(count($erst_29_days[$vv_ipid][$ss_start_date]) < 29){
                                unset($valid_erst_sapv_starts[$vv_ipid][$k+1]);
                            }
                        }
                    }
                 
                    foreach ($fall_sapv_treatment_days[$vv_ipid] as $fall_nr=>$tr_sapv_fall_days){ //date fromat d.m.Y
                        if( count($tr_sapv_fall_days) <  29 ){
                            // SKIP
                            
                        } else {
                            // If it is the first period ever - we add the FIrst 29days  no matter the  sapv type (ERST or not)
                            if($fall_nr == 0){
                                // first - we add the FIRST EVER 29th date
                                $patient_29th_days[$vv_ipid][]  = $tr_sapv_fall_days[28]; // starts with key 0
                                
                                // we check if here we have additional ERST falls
                                foreach($tr_sapv_fall_days as $k=>$d){
                                    if(strtotime($d) > strtotime($tr_sapv_fall_days[28])){
                                        $fall_remaining_days[$vv_ipid][$fall_nr][] = $d;
                                    }
                                }
                                
                                if(count($fall_remaining_days[$vv_ipid][$fall_nr]) < 29){
                                    //skip
                                    
                                } else {
                                    
                                    $esdays = array();
                                    foreach($valid_erst_sapv_starts[$vv_ipid] as $sk=>$se_date){
                                        if( in_array($se_date, $fall_remaining_days[$vv_ipid][$fall_nr]))
                                        {
                                            $esdays[$vv_ipid][$se_date][] = $se_date;
                                            
                                            foreach($fall_remaining_days[$vv_ipid][$fall_nr] as $kl=>$ftrd){
                                                if( strtotime($ftrd) > strtotime($se_date) && !in_array($ftrd,$esdays[$vv_ipid][$se_date]) && count($esdays[$vv_ipid][$se_date] )< 29){
                                                    $esdays[$vv_ipid][$se_date][] = $ftrd;
                                                }
                                            }
                                            $patient_29th_days[$vv_ipid][] = $esdays[$vv_ipid][$se_date][28];// starts with key 0
                                        }
                                    }
                                }
                            }
                            //If it is a following fall - we check if the we have ERST and we start counting from it
                            elseif($fall_nr > 0){
                                
                                $esdays = array();
                                
                                foreach($valid_erst_sapv_starts[$vv_ipid] as $sk=>$se_date){
                                    
                                    if( in_array($se_date, $fall_sapv_treatment_days[$vv_ipid][$fall_nr]))
                                    {
                                        $esdays[$vv_ipid][$se_date][] = $se_date;
                                        
                                        foreach($fall_sapv_treatment_days[$vv_ipid][$fall_nr] as $kl=>$ftrd){
                                            if( strtotime($ftrd) > strtotime($se_date) && !in_array($ftrd,$esdays[$vv_ipid][$se_date]) && count($esdays[$vv_ipid][$se_date] )< 29){
                                                $esdays[$vv_ipid][$se_date][] = $ftrd;
                                            }
                                        }
                                        $patient_29th_days[$vv_ipid][] = $esdays[$vv_ipid][$se_date][28];// starts with key 0
                                    }
                                }
                            }
                        }
                    }
                    //TODO-3724 Ancuta 21-25.01.2021 END
                }
                
                
                //TODO-3743 Ancuta 25.01.2021 $beck_array
                $beck_array[$vv_ipid][] = $pat_treatment_days[$vv_ipid][0];
                foreach($all_valid_erst_sapv_starts[$vv_ipid] as $k=>$pm_day){
                    
                    $last_beck = end($beck_array[$vv_ipid]);
                    $per_sapv_start_dates[$vv_ipid][$pm_day] = PatientMaster::getDaysInBetween($last_beck, date('Y-m-d',strtotime($pm_day)) ,null,"Y-m-d");
                    
                    if(count($per_sapv_start_dates[$vv_ipid][$pm_day]) > 28){
                        $beck_array[$vv_ipid][] = date('Y-m-d',strtotime($pm_day));
                    }
                    
                }
                //--
                
//                 dd($patient_29th_days,$curent_period_days);
					//ISPC-2478 Ancuta 27.10.2020 END
					//get FLATRATE DAYS - END
					
					
					foreach($curent_period_days[$vv_ipid] as $k_day => $v_day)
					{
					 
					    // TODO-2957 Ancuta 28.02.2020
					    $sh_telefonat_max_amount = 2;
					    if(in_array(date("d.m.Y",strtotime($v_day)), $master_data['patients'][$v_ipid]['invoice_data']['hospiz_real_days_cs'])){
					        $sh_telefonat_max_amount = 1;
					    }
					    // -- 
					    
					   if(in_array($v_day,$patient_days[$vv_ipid]['real_active_days'])){
					    
						$day_is_sapv = false;
						if(in_array($v_day, $curent_period_days_sapv[$vv_ipid]))
						{
							$day_is_sapv = true;
						}

						foreach($shortcuts_arr as $k_short => $v_short)
						{
							if(in_array($v_short, $visits_shortcuts))
							{
								//handle visitable shortcuts here
								//stop if day is in flatrate days
								//reverted ISPC-1131 - show visits in flatrate days
								if($anlage14_res[$vv_ipid][$v_day][$v_short] > 0)
								{
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $anlage14_res[$vv_ipid][$v_day][$v_short];

									if(strlen($first_active_day[$vv_ipid]) == '0')
									{
										$first_active_day[$vv_ipid] = $v_day;
									}
									$last_active_day[$vv_ipid] = $v_day;
								}
								else if(count($contact_forms[$vv_ipid][$v_day][$v_short]) > '0' && !array_key_exists($v_day, $anlage14_res[$vv_ipid]) && $day_is_sapv)
								{
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = count($contact_forms[$vv_ipid][$v_day][$v_short]);

									if(strlen($first_active_day[$vv_ipid]) == '0')
									{
										$first_active_day[$vv_ipid] = $v_day;
									}
									$last_active_day[$vv_ipid] = $v_day;
								}
								else
								{
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
								}

								//add to totals
								$master_data['invoices'][$vv_ipid]['totals'][$v_short] += $master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'];

								//add to custom overall totals
								if(
								    $v_short == 'sh_nur_non_hospiz_visits' 
								    || $v_short == 'sh_doc_non_hospiz_visits'
								    || $v_short == 'sh_other_visits'
								    )
								{
									//Anzahl Tagespauschale - total days doc/nurse non hospiz
									if($master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] == '1')
									{
										$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'][] = $v_day;
										$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']));
									}
								}
								else if($v_short == 'sh_nur_hospiz_visits' || $v_short == 'sh_doc_hospiz_visits')
								{
									//Tagespauschalen Hospiz - total visits doc/nurse in hospiz
									if($master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] == '1')
									{
										$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_hospiz'][] = $v_day;
										$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_hospiz'] = array_unique(array_values($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_hospiz']));
									}
								}

								$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_doc_nur_non_hospiz'] = count($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']);
								$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_doc_nur_hospiz'] = count($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_hospiz']);
							}
							else
							{
								//handle the rest of shortcuts here
								if($v_short == 'sh_beko')
								{
									if($anlage14_res[$vv_ipid][$v_day][$v_short] > '0')
									{
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $anlage14_res[$vv_ipid][$v_day][$v_short];

										if(strlen($first_active_day[$vv_ipid]) == '0')
										{
											$first_active_day[$vv_ipid] = $v_day;
										}
										$last_active_day[$vv_ipid] = $v_day;
									}
									//else if(strtotime($v_day) == strtotime($pat_treatment_days[$vv_ipid][0]) && !array_key_exists($v_day, $anlage14_res[$vv_ipid]) && $day_is_sapv)
									else if(in_array( date('Y-m-d',strtotime($v_day)),$beck_array[$vv_ipid])   && !array_key_exists($v_day, $anlage14_res[$vv_ipid]) && $day_is_sapv)
									{//TODO-3743 Ancuta 25.01.2021 $beck_array
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '1';

										if(strlen($first_active_day[$vv_ipid]) == '0')
										{
											$first_active_day[$vv_ipid] = $v_day;
										}
										$last_active_day[$vv_ipid] = $v_day;
									}
									else
									{
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
									}

									$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_beko'] += $master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'];
								}

								if($v_short == 'sh_folgeko')
								{
								    if($fisrt_Sapv_trigger_flatrate){//TODO-3724 Ancuta 21-25.01.2021 Start
    									if($anlage14_res[$vv_ipid][$v_day][$v_short] > '0')
    									{
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $anlage14_res[$vv_ipid][$v_day][$v_short];
    										if(strlen($first_active_day[$vv_ipid]) == '0')
    										{
    											$first_active_day[$vv_ipid] = $v_day;
    										}
    										$last_active_day[$vv_ipid] = $v_day;
    									}
    									//else if( in_array($v_day, $patient_29th_days[$vv_ipid]) )
    									else if( in_array($v_day, $patient_29th_days[$vv_ipid]) && !isset($anlage14_res[$vv_ipid][$v_day]) )    //TODO-3992 Lore 05.04.2021
    									{
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '1';
    
    										if(strlen($first_active_day[$vv_ipid]) == '0')
    										{
    											$first_active_day[$vv_ipid] = $v_day;
    										}
    										$last_active_day[$vv_ipid] = $v_day;
    									}
    									else
    									{
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
    									}
    
    									$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_folgeko'] += $master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'];
								    }
								    else
								    {
								        
    									if($anlage14_res[$vv_ipid][$v_day][$v_short] > '0')
    									{
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $anlage14_res[$vv_ipid][$v_day][$v_short];
    										if(strlen($first_active_day[$vv_ipid]) == '0')
    										{
    											$first_active_day[$vv_ipid] = $v_day;
    										}
    										$last_active_day[$vv_ipid] = $v_day;
    									}
    									else if(count($treated_days_all_ts[$vv_ipid]) >= '26' && strtotime($v_day) == $treated_days_all_ts[$vv_ipid][28] && !array_key_exists($v_day, $anlage14_res[$vv_ipid]) && $day_is_sapv)
    									{
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '1';
    
    										if(strlen($first_active_day[$vv_ipid]) == '0')
    										{
    											$first_active_day[$vv_ipid] = $v_day;
    										}
    										$last_active_day[$vv_ipid] = $v_day;
    									}
    									else
    									{
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
    										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
    									}
    
    									$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_folgeko'] += $master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'];
								    }
								    
								}

								if($v_short == 'sh_flatrate')
								{
									if($anlage14_res[$vv_ipid][$v_day][$v_short] > '0')
									{
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $anlage14_res[$vv_ipid][$v_day][$v_short];

										if(strlen($first_active_day[$vv_ipid]) == '0')
										{
											$first_active_day[$vv_ipid] = $v_day;
										}
										$last_active_day[$vv_ipid] = $v_day;

										//append flatrate into the Anzahl Tagespauschale
										$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'][] = $v_day;
										$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']));
									}
									else if(!empty($fl_days) && !array_key_exists($v_day, $anlage14_res[$vv_ipid]) && $day_is_sapv)
									{
										if(in_array(strtotime($v_day), $fl_days[$vv_ipid]))
										{
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '1';

											if(strlen($first_active_day[$vv_ipid]) == '0')
											{
												$first_active_day[$vv_ipid] = $v_day;
											}
											$last_active_day[$vv_ipid] = $v_day;

											//append flatrate into the Anzahl Tagespauschale
											$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'][] = $v_day;
											$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']));
										}
										else
										{
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
										}
									}
									else
									{
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
									}
								}

								//added limit to shown/calculate phones only in days with no Anzahl Tagepauschale triggered(has visit and/or flatrate)
								if($v_short == 'sh_telefonat')
								{
									$qty_limit[$vv_ipid] = '0';
									if($anlage14_res[$vv_ipid][$v_day][$v_short] > 0)
									{
									    // TODO-2957 Ancuta 28.02.2020 - add limit  depending on hospiz location $sh_telefonat_max_amount
										//changed to show maximum 2 phones (same way as it was calculated)
									    if($anlage14_res[$vv_ipid][$v_day][$v_short] >= $sh_telefonat_max_amount)
										{
										    $qty_limit[$vv_ipid] = $sh_telefonat_max_amount;
										}
										else
										{
											$qty_limit[$vv_ipid] = $anlage14_res[$vv_ipid][$v_day][$v_short];
										}

										if($anlage14_res[$vv_ipid][$v_day][$v_short] > '0')
										{
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $qty_limit[$vv_ipid];

											if(strlen($first_active_day[$vv_ipid]) == '0')
											{
												$first_active_day[$vv_ipid] = $v_day;
											}
											$last_active_day[$vv_ipid] = $v_day;
										}
										else
										{
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
										}
									}
									else if( 
									       !in_array($v_day, $master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']) 
									    && !in_array(strtotime($v_day), $fl_days[$vv_ipid]) 
									    && !array_key_exists($v_day, $anlage14_res[$vv_ipid]) 
									    && $day_is_sapv
									    && !in_array(date("d.m.Y",strtotime($v_day)), $master_data['patients'][$v_ipid]['invoice_data']['hospital_real_days_cs'])
									    && !in_array($v_day, $master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_hospiz']) 
									    
									    )
									{
									    
										//changed to show maximum 2 phones (same way as it was calculated)
									    // TODO-2957 Ancuta 28.02.2020 - add limit  depending on hospiz location $sh_telefonat_max_amount
									    if(count($patient_phones[$vv_ipid][$v_day][$v_short]) >= $sh_telefonat_max_amount)
										{
										    $qty_limit[$vv_ipid] = $sh_telefonat_max_amount;
										}
										else
										{
											$qty_limit[$vv_ipid] = count($patient_phones[$vv_ipid][$v_day][$v_short]);
										}

										if(count($patient_phones[$vv_ipid][$v_day][$v_short]) > '0')
										{
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $qty_limit[$vv_ipid];

											if(strlen($first_active_day[$vv_ipid]) == '0')
											{
												$first_active_day[$vv_ipid] = $v_day;
											}
											$last_active_day[$vv_ipid] = $v_day;
										}
										else
										{
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
											$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
										}
									}
									else
									{
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
									}

									//Anzahl Telefonpauschale - total phones with limit per day of 2 qty
									$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_phones'] += $qty_limit[$vv_ipid];
								}

								//add to totals
								$master_data['invoices'][$vv_ipid]['totals'][$v_short] += $master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'];
							}

							$master_data['patients'][$vv_ipid]['invoice_data']['first_active_day'] = $first_active_day[$vv_ipid];
							$master_data['patients'][$vv_ipid]['invoice_data']['last_active_day'] = $last_active_day[$vv_ipid];

							$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_doc_nur_non_hospiz'] = count($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']);
							$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_doc_nur_hospiz'] = count($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_hospiz']);
						}
//						}

					}
					}
				}
				//load saved data and create master data array END
				$master_price_list = $p_list->get_period_price_list(date('Y-m-d', strtotime($master_data['patients'][$v_ipid_pat]['invoice_data']['period']['start'])), date('Y-m-d', strtotime($master_data['patients'][$v_ipid_pat]['invoice_data']['period']['end'])));


				//prepare items to be added in invoice START
				foreach($ipids as $k_ipid => $v_ipid_pat)
				{
					$master_price_list[$v_ipid_pat] = $p_list->get_period_price_list(date('Y-m-d', strtotime($master_data['patients'][$v_ipid_pat]['invoice_data']['period']['start'])), date('Y-m-d', strtotime($master_data['patients'][$v_ipid_pat]['invoice_data']['period']['end'])));
					$master_data['invoices'][$v_ipid_pat]['pricelist'] = end($master_price_list[$v_ipid_pat]);
				}

				$master_data['invoiced_month'] = "0000-00-00 00:00:00";
				if(strlen($params['selected_period'][$v_ipid_pat]['days_in_month']) > '0')
				{
					$master_data['invoiced_month'] = date('Y-m-d H:i:s', strtotime($params['selected_period'][$v_ipid_pat]['start']));
				}

				
				if($this->userid == "338x"){
				    echo "<pre>";
                    print_r($anlage14_res);
                    print_r($master_data);
                    exit;
				}
				
				$inserted_invoices = $sh_form->insert_invoice($master_data);
			}
			else if($params['invoices'])
			{
				$inserted_invoices = $params['invoices'];
			}

			if($params['get_pdf'] == "1")
			{
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$invoice_data = $sh_invoices->getShInvoice($params['stornoid'], false);
					
					$invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];     //ISPC-2532 Lore 10.11.2020
					
					//ISPC-2532 Carmen 18.02.2020 - get the prefix and the number of storno invoice
					$invoice_data_storno = $sh_invoices->get_invoice($inserted_invoices[0]);
					$invoice_data['prefix'] = $invoice_data_storno[0]['prefix'];
					$invoice_data['invoice_number'] = $invoice_data_storno[0]['invoice_number'];
					//--
				}
				else
				{
					$invoice_data = $sh_invoices->getShInvoice($inserted_invoices[0], false,true);
				}

				//rewrite invoice_data with custom data (which comes from POST)
				if($params['custom_data'])
				{
					//rewrite custom data from POST to $invoice_data.
					foreach($params['custom_data'] as $k_custom => $v_custom)
					{
						$invoice_data[$k_custom] = $v_custom;
					}
				}

				$pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
				}
				else
				{
					$invoice_data['patient_pflegestufe'] = ' - ';
				}


				//load template data
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'sh_invoice');

				//setup tokens (remove pseudopost when all works)
				//client tokens
				$tokens = array();
				$tokens['client_ik'] = $client_details[0]['institutskennzeichen'];

				//patient details tokens
				$tokens['patienten_id'] = strtoupper(html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
				$tokens['first_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
				$tokens['last_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
				$tokens['birthd'] = date('d.m.Y', strtotime($params['patient_days'][$invoice_data['ipid']]['details']['birthd']));
				$tokens['street'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
				$tokens['zip'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
				$tokens['city'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
				$tokens['patient_pflegestufe'] = html_entity_decode($invoice_data['patient_pflegestufe'], ENT_QUOTES, 'UTF-8');

				//health insurance tokens
				$tokens['insurance_no'] = html_entity_decode($master_data['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
 				//$tokens['address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8'); // anlage14_invoice
				$tokens['address'] = htmlentities($invoice_data['address']); // TODO-1517 //anlage14_invoice
				$tokens['SAPV_Rechnungsempfaenger'] = htmlentities($master_data['patients'][$invoice_data['ipid']]['invoice_data']['sapv_recipient']); // ISPC-1236
				//$tokens['address'] = htmlspecialchars($invoice_data['address']); // TODO-1517 //anlage14_invoice
				//$tokens['address'] = $invoice_data['address']; // TODO-1517 //anlage14_invoice
				$tokens['beneficiary_address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');

				//invoice specific tokens
				$tokens['invoiced_month'] = "";
				if(!empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
				{
					$tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
				}

				$tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
				$tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');

				
				
				$tokens['debitoren_nummer_oder_pv'] = '';
				//if ppun is active and patient has number saved in invoice db get ppun
				if($ppun_module == "1" && strlen($patient_debitor_details[$invoice_data['ipid']]['ppun']) > '0')
				{
				    $tokens['ppun'] = $patient_debitor_details[$invoice_data['ipid']]['ppun'];
				    $tokens['debitoren_nummer_oder_pv'] = $patient_debitor_details[$invoice_data['ipid']]['ppun'];
				}
				else
				{
				    $tokens['ppun'] = ''; 
				}
				
				// TODO-2104 Ancuta 01.02.2019
				//if debtor number is active and patient has number saved in invoice db get debtor number
				if($debitor_number_module == "1" && strlen($patient_debitor_details[$invoice_data['ipid']]['debitor_number'] ) > '0')
				{
				    $tokens['debitor_number'] = $patient_debitor_details[$invoice_data['ipid']]['debitor_number'];
				    $tokens['debitoren_nummer_oder_pv'] = $patient_debitor_details[$invoice_data['ipid']]['debitor_number'];
				}
				else
				{
				    $tokens['debitor_number'] = '';
				}
				
				//invoice date
				if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970")
				{
					$tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
				}
				else
				{
					$tokens['invoice_date'] = '';
				}

				//start billed action day
				if($invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_active'])) != "1970")
				{
					$tokens['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
				}
				else
				{
					$tokens['first_active_day'] = '';
				}

				//end billed action day
				if($invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_active'])) != "1970")
				{
					$tokens['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
				}
				else
				{
					$tokens['last_active_day'] = '';
				}

				//first sapv day
				if($invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_sapv'])) != "1970")
				{
					$tokens['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
				}
				else
				{
					$tokens['first_sapv_day'] = '';
				}

				//last sapv day
				if($invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_sapv'])) != "1970")
				{
					$tokens['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));
				}
				else
				{
					$tokens['last_sapv_day'] = '';
				}

				
				//SAPV APPROVED NUMBERS
				foreach($sapv2ipid[$invoice_data['ipid']] as $sk=>$sapvData){
				
			        $r1start = strtotime($sapvData['verordnungam']);
			        $r1end = strtotime($sapvData['verordnungbis']);
			
			        $r2start = strtotime($invoice_data['invoice_start']);
			        $r2end = strtotime($invoice_data['invoice_end']);
			        if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end)){
			            if(!empty($sapvData['approved_number'])){
			                $sapv_approved2invoice['numbers'][$invoice_data['ipid']][$invoice_data['id']][] =  $sapvData['approved_number'];
			            }
			            
			            if(!empty($sapvData['approved_date']) && $sapvData['approved_date'] != "0000-00-00 00:00:00" ){
			                $sapv_approved2invoice['dates'][$invoice_data['ipid']][$invoice_data['id']][] =  date("d.m.Y",strtotime($sapvData['approved_date']));
			            }
			
			        }
				}
				

				if(!empty($invoice_data['sapv_approve_nr'])){
    				$tokens['sapv_approve_nr'] = html_entity_decode($invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
				} else {
    				if(!empty($sapv_approved2invoice['numbers'][$invoice_data['ipid']][$invoice_data['id']])){
        				$tokens['sapv_approve_nr'] = html_entity_decode(implode(", ",$sapv_approved2invoice['numbers'][$invoice_data['ipid']][$invoice_data['id']]), ENT_QUOTES, 'UTF-8');
    				} else{
        				$tokens['sapv_approve_nr'] = "";
    				}
				}

				//sapv approve date
				if($invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['sapv_approve_date'])) != "1970")
				{
				    $tokens['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
				}
				else
				{
				    if( !empty($sapv_approved2invoice['dates'][$invoice_data['ipid']][$invoice_data['id']]) ){
    				    
				        $tokens['sapv_approve_date'] = implode(", ",$sapv_approved2invoice['dates'][$invoice_data['ipid']][$invoice_data['id']]);
    				    
				    } else{
				        
    				    $tokens['sapv_approve_date'] = '';
				    }
				}
				
				
				$tokens['footer'] = html_entity_decode($invoice_data['footer'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_items'] = $invoice_data['items'];

				$tokens['footer'] = html_entity_decode($invoice_data['footer'], ENT_QUOTES, 'UTF-8');

				if($invoice_data['storno'] == '1')
				{
					//rewrite invoice prefix if storned 
					$tokens['prefix'] = 'STORNO_' . $tokens['prefix'];
				}

				//ISPC-2532 Lore 10.11.2020
				if($invoice_data_storno[0]['storno'] == '1') {
				    $tokens['full_invoice_number'] = ' Storno '.$tokens['full_invoice_number']; // ISPC-2532 Ancuta 11.12.2020- comment from 10.12.2020 - overwtite - and add STORNO in front
				    $tokens['full_invoice_number'] .= ' zur Rechnung '.$invoice_data['storned_invoice_number'];
				}
				
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$tokens['unique_id'] = $invoice_data['record_id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total'] * (-1)), '2', ',', '.');
				}
				else
				{
					$tokens['unique_id'] = $invoice_data['id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
				}

				if(count($invoice_data['items']) > '0')
				{
					//ISPC-1236 - new token invoice_items_html_short, without id
					$rows = count($invoice_data['items']);
					$grid = new Pms_Grid($invoice_data['items'], 1, $rows, "invoice_items_list_pdf.html");
					$grid_short = new Pms_Grid($invoice_data['items'], 1, $rows, "invoice_items_list_pdf_short.html");
					
					$grid->invoice_total = $tokens['invoice_total'];
					$grid->max_entries = $rows;

					$grid_short->invoice_total = $tokens['invoice_total'];
					$grid_short->max_entries = $rows;
					
					$html_items = $grid->renderGrid();
					$html_items_short = $grid_short->renderGrid();
				}

				$tokens['invoice_items_html'] = $html_items;
				$tokens['invoice_items_html_short'] = $html_items_short;

				if($template_data)
				{
					$this->generate_file($template_data[0], $tokens);
					exit;
				}
				else
				{
// 					$this->redirect(APP_BASE . 'invoicenew/newinvoicepatientlist?flg=notemplate');
					$this->redirect(APP_BASE . 'invoicenew/shinvoicepatientlist?flg=notemplate');
					exit;
				}
			}

			if($params['batch_print'] == '1' && count($params['invoices']) > '0')
			{
				//batch temp folder
				$batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $clientid);
				$invoices_ids = $params['invoices'];

				//load template data
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'sh_invoice');

				if(!$template_data){
				    $this->redirect(APP_BASE . 'invoicenew/shinvoicepatientlist?flg=notemplate');
				    exit;
				}
				
				//load invoices data
				$invoices_data = $sh_invoices->get_invoices($invoices_ids);
				
				//TODO-3407 Ancuta 08.09.2020
				if(empty($invoices_data)){
				    return;
				}
				// -- 
				
				//ISPC-2472 Ancuta
				$inv_names = array();
				foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
				    $inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
				}
				$Batch_name = false;
				if(!empty($inv_names)){
        			$Batch_name = $inv_names[0]; 
    				if( count($inv_names) > 1){
        				$Batch_name .='_'.end($inv_names); 
    				}
				}
				//--
				
				
				//patient days // NOT NEEDED!
				/* 
				$conditions['client'] = $clientid;
				$conditions['ipids'] = $invoices_data['invoices_ipdis'];
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');
				*/
				
				$sql = 'e.epid, p.ipid, p.birthd, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';


				//be aware of date d.m.Y format here
				//$patient_days = Pms_CommonData::patients_days($conditions, $sql); // NOt used - so changed.
				
			    //filter patients name/surname/epid
			    $f_patient = Doctrine_Query::create()
			    ->select($sql)
			    ->from('PatientMaster p INDEXBY ipid')
			    ->where("p.isdelete =0")
			    ->andWhereIn('p.ipid',$invoices_data['invoices_ipdis'])
			    ->leftJoin("p.EpidIpidMapping e")
			    ->andWhere('e.clientid = ' . $clientid );
			    $f_patients_res = $f_patient->fetchArray();
			    
				foreach($f_patients_res as $ipid=>$ipid_data){
				    $patient_days[$ipid]['details'] = $ipid_data; 
				    $patient_days[$ipid]['details']['epid'] = $ipid_data['EpidIpidMapping']['epid']; 
				}
	
				$ipids_array = array_keys($patient_days);
				
				
				//patient HEALTH INSURANCE START
				if(empty($ipids_array)){
				    $ipids_array[] = "999999999";
				}
				$healthinsu_multi_array = array();
				$healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids_array, true);
				
				//multiple hi subdivisions && hi subdivisions permissions
				$divisions = HealthInsurancePermissions::getClientHealthInsurancePermissions($clientid);
				
				if($divisions)
				{
					foreach($healthinsu_multi_array as $k_hi => $v_hi)
					{
						$hi_companyids[] = $v_hi['companyid'];
					}
				
					$healthinsu_subdiv_arr = PatientHealthInsurance2Subdivisions::get_hi_subdivisions_multiple($hi_companyids);
				}
				
				//ISPC-1236 - Carmen 20.02.2019
				foreach($ipids_array as $k_ipid => $v_ipid)
				{
				
					if($divisions && strlen($healthinsu_subdiv_arr[$v_ipid]['3']['name']) > '0')
					{
						$sapv_address[$v_ipid][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['street1']);
						$sapv_address[$v_ipid][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city']);
						$master_data['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = implode('<br />', array_values(array_unique($sapv_address[$v_ipid])));
					}
					else
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = '';
					}
				}
				
				
				// TODO-2124
				// Ancuta 14.02.2019
				
				$all_sapvs = array();
				$all_sapvs = $sapv->get_all_sapvs($ipids_array);
				
				$sapv2ipid = array();
				foreach($all_sapvs as $k=>$sdata){
				    $sapv2ipid[$sdata['ipid']][] = $sdata;
				}
                // -- 				
				
				
				// TODO-2104 Ancuta 01.02.2019
				$patient_debitor_details = array();// TODO-2104
				foreach($ipids_array as $v_ipid){
				    
    				if($ppun_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "1")
    				{
    				    //get ppun (private patient unique number)
    				    $ppun_number = $ppun->check_patient_ppun($v_ipid, $clientid);
    				    if($ppun_number)
    				    {
    				       $patient_debitor_details[$v_ipid]['ppun'] = $ppun_number['ppun'];
    				    }
    				}
    				
    				if($debitor_number_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "0")
    				{
    				    //get debtor number from patient healthinsurance
    				    if(strlen($healthinsu_multi_array[$v_ipid]['ins_debtor_number']) > '0')
    				    {
    				        $patient_debitor_details[$v_ipid]['debitor_number'] = $healthinsu_multi_array[$v_ipid]['ins_debtor_number'];
    				    }
    				    else
    				    {
    				        $patient_debitor_details[$v_ipid]['debitor_number'] = $healthinsu_multi_array[$v_ipid]['company']['debtor_number'];
    				    }
    				}
				}
				//--

				// get pflegestufe for all
				
				$all_pflegestufe = array();
				$all_pflegestufe = Doctrine_Query::create()
				->select("*")
				->from('PatientMaintainanceStage')
				->whereIn("ipid", $ipids_array)
				->orderBy('fromdate,create_date asc')
				->fetchArray();

				$pflegesufe2ipid = array();
				foreach($all_pflegestufe as $k=>$pflg) {
				    $pflegesufe2ipid[$pflg['ipid']][] = $pflg; 
				}
				
				//$this->getHelper('Log')->error ("Time BATCH PRINT 6" .  $this->getRequest()->getControllerName() . "/{$method}".round((microtime(true) - $start), 0));
				
				foreach($invoices_data['invoices_data'] as $k_invoice_id => $v_invoice_data)
				{
				    $invoice_pflegesute = array();
					foreach($pflegesufe2ipid[$v_invoice_data['ipid']] as $k=>$pflitem){

					    if($pflitem['tilldate'] == "0000-00-00"){
					         $pflitem['tilldate'] == date('Y-m-d', strtotime($v_invoice_data['invoice_end']));
					    }
					    
					    if(Pms_CommonData::isintersected(date('Y-m-d', strtotime($v_invoice_data['invoice_start'])), date('Y-m-d', strtotime($v_invoice_data['invoice_end'])), $pflitem['fromdate'], $pflitem['tilldate'])){
					        $invoice_pflegesute[$v_invoice_data['ipid']][] = $pflitem;
					    }
					    
					}

					$pflege_arr = array();
					$pflege_arr = end($invoice_pflegesute[$v_invoice_data['ipid']] );

					if(!empty($pflege_arr))
					{
						$v_invoice_data['patient_pflegestufe'] = $pflege_arr['stage'];
					}
					else
					{
						$v_invoice_data['patient_pflegestufe'] = ' - ';
					}

					//setup tokens
					$tokens_multi = array();
					//client tokens
					$tokens_multi['debitoren_nummer_oder_pv'] = '';
					$tokens_multi['client_ik'] = $client_details[0]['institutskennzeichen'];

					//patient details tokens
					$tokens_multi['patienten_id'] = strtoupper(html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
					$tokens_multi['first_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['last_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['birthd'] = date('d.m.Y', strtotime($patient_days[$v_invoice_data['ipid']]['details']['birthd']));
					$tokens_multi['street'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['zip'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['city'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['patient_pflegestufe'] = $v_invoice_data['patient_pflegestufe'];

					//health insurance tokens
// 					$tokens_multi['insurance_no'] = html_entity_decode($patient_days['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['insurance_no'] = $healthinsu_multi_array[$v_invoice_data['ipid']]['insurance_no'];;
					$tokens_multi['beneficiary_address'] = html_entity_decode($v_invoice_data['address'], ENT_QUOTES, 'UTF-8');
					
					//$tokens_multi['address'] = html_entity_decode($v_invoice_data['address'], ENT_QUOTES, 'UTF-8');//anlage14_invoice
					$tokens_multi['address'] = htmlentities($v_invoice_data['address']); // TODO-1517 //anlage14_invoice
					$tokens_multi['SAPV_Rechnungsempfaenger'] = htmlentities($master_data['patients'][$v_invoice_data['ipid']]['invoice_data']['sapv_recipient']); // ISPC-1236
					
					//invoice specific tokens
					$tokens_multi['invoiced_month'] = "";
					if(!empty($v_invoice_data['invoiced_month']) && $v_invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
					{
						$tokens_multi['invoiced_month'] = date('m/Y', strtotime($v_invoice_data['invoiced_month']));
					}

					$tokens_multi['prefix'] = html_entity_decode($v_invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['invoice_number'] = html_entity_decode($v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['full_invoice_number'] = html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');

					//invoice date
					if($v_invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['completed_date'])) != "1970")
					{
						$tokens_multi['invoice_date'] = date('d.m.Y', strtotime($v_invoice_data['completed_date']));
					}
					else
					{
						$tokens_multi['invoice_date'] = '';
					}

					//start billed action day
					if($v_invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_active'])) != "1970")
					{
						$tokens_multi['first_active_day'] = date('d.m.Y', strtotime($v_invoice_data['start_active']));
					}
					else
					{
						$tokens_multi['first_active_day'] = '';
					}

					//end billed action day
					if($v_invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_active'])) != "1970")
					{
						$tokens_multi['last_active_day'] = date('d.m.Y', strtotime($v_invoice_data['end_active']));
					}
					else
					{
						$tokens_multi['last_active_day'] = '';
					}

					//first sapv day
					if($v_invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_sapv'])) != "1970")
					{
						$tokens_multi['first_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['start_sapv']));
					}
					else
					{
						$tokens_multi['first_sapv_day'] = '';
					}

					//last sapv day
					if($v_invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_sapv'])) != "1970")
					{
						$tokens_multi['last_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['end_sapv']));
					}
					else
					{
						$tokens_multi['last_sapv_day'] = '';
					}

					

					

					//SAPV APPROVED NUMBERS
					foreach($sapv2ipid[$v_invoice_data['ipid']] as $sk=>$sapvData){
					
					    $r1start = strtotime($sapvData['verordnungam']);
					    $r1end = strtotime($sapvData['verordnungbis']);
					    	
					    $r2start = strtotime($v_invoice_data['invoice_start']);
					    $r2end = strtotime($v_invoice_data['invoice_end']);
					    if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end)){
					        if(!empty($sapvData['approved_number'])){
					            $sapv_approved2invoice['numbers'][$v_invoice_data['ipid']][$v_invoice_data['id']][] =  $sapvData['approved_number'];
					        }
					         
					        if(!empty($sapvData['approved_date']) && $sapvData['approved_date']!="0000-00-00 00:00:00"){
					            $sapv_approved2invoice['dates'][$v_invoice_data['ipid']][$v_invoice_data['id']][] =  date("d.m.Y",strtotime($sapvData['approved_date']));
					        }
					        	
					    }
					}
					
					
					
					if(!empty($v_invoice_data['sapv_approve_nr'])){
					     $tokens_multi['sapv_approve_nr'] = html_entity_decode($v_invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
					} else{
					    if(!empty($sapv_approved2invoice['numbers'][$v_invoice_data['ipid']][$v_invoice_data['id']])){
					       $tokens_multi['sapv_approve_nr'] = html_entity_decode(implode(', ', $sapv_approved2invoice['numbers'][$v_invoice_data['ipid']][$v_invoice_data['id']]), ENT_QUOTES, 'UTF-8');
					    } else{
					       $tokens_multi['sapv_approve_nr'] = "";
					    }
					}  
					

					//sapv approve date
					if($v_invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['sapv_approve_date'])) != "1970")
					{
					    $tokens_multi['sapv_approve_date'] = date('d.m.Y', strtotime($v_invoice_data['sapv_approve_date']));
					}
					else
					{
					    if(!empty($sapv_approved2invoice['dates'][$v_invoice_data['ipid']][$v_invoice_data['id']])){
    					    $tokens_multi['sapv_approve_date'] = implode(', ',$sapv_approved2invoice['dates'][$v_invoice_data['ipid']][$v_invoice_data['id']]);
					    } else{
    					    $tokens_multi['sapv_approve_date'] = '';
					    }
					    
					}
						
					
					
					$tokens_multi['footer'] = html_entity_decode($v_invoice_data['footer'], ENT_QUOTES, 'UTF-8');

					if($v_invoice_data['storno'] == '1')
					{
						//rewrite invoice prefix if storned
						$tokens_multi['prefix'] = 'STORNO_' . $tokens['prefix'];
						$tokens_multi['unique_id'] = $v_invoice_data['record_id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total'] * (-1)), '2', ',', '.');
					}
					else
					{
						$tokens_multi['unique_id'] = $v_invoice_data['id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total']), '2', ',', '.');
					}

					
					
					// TODO-2104 Ancuta 01.02.2019
					$tokens_multi['debitoren_nummer_oder_pv'] = "";
					if($ppun_module == "1" && strlen($patient_debitor_details[$v_invoice_data['ipid']]['ppun']) > '0')
					{
					    $tokens_multi['ppun'] = $patient_debitor_details[$v_invoice_data['ipid']]['ppun'];
					    $tokens_multi['debitoren_nummer_oder_pv'] = $patient_debitor_details[$v_invoice_data['ipid']]['ppun'];
					}
					else
					{
					    $tokens_multi['ppun'] = '';
					}
						
					
					//if debtor number is active and patient has number saved in invoice db get debtor number
					if($debitor_number_module == "1" && strlen($patient_debitor_details[$v_invoice_data['ipid']]['debitor_number'] ) > '0')
					{
					    $tokens_multi['debitor_number'] = $patient_debitor_details[$v_invoice_data['ipid']]['debitor_number'];
					    $tokens_multi['debitoren_nummer_oder_pv'] = $patient_debitor_details[$v_invoice_data['ipid']]['debitor_number'];
					}
					else
					{
					    $tokens_multi['debitor_number'] = '';
					}
					
					//--
					
					if(count($v_invoice_data['items']) > '0')
					{
						//ISPC-1236 - new token invoice_items_html_short, without id
						$rows = count($v_invoice_data['items']);

						$grid = new Pms_Grid($v_invoice_data['items'], 1, $rows, "invoice_items_list_pdf.html");
						$grid_short = new Pms_Grid($v_invoice_data['items'], 1, $rows, "invoice_items_list_pdf_short.html");
						
						$grid->invoice_total = $tokens_multi['invoice_total'];
						$grid->max_entries = $rows;
						
						$grid_short->invoice_total = $tokens_multi['invoice_total'];
						$grid_short->max_entries = $rows;

						$html_items = $grid->renderGrid();
						$html_items_short = $grid_short->renderGrid();
					}
					else 
					{
						$html_items = "";
						$html_items_short = "";
					}

					$tokens_multi['invoice_items_html'] = $html_items;
					$tokens_multi['invoice_items_html_short'] = $html_items_short;
					
					if($template_data)
					{
					    
					    if(isset($params['print_job']) && $params['print_job'] == '1'){
					        
					        $print_params = array();
					        $print_params = $params;
					        $print_params['template_data'] = $template_data[0];
					        $print_params['vars'] = $tokens_multi;
					        $print_params['export_file_type'] = "pdf";

					        $batch_temp_files = $this->print_job_generate_and_save_file($print_params);
					
					        return $batch_temp_files ;
					        
					    } else{
    				        $temp_files[] = $this->generate_file($template_data[0], $tokens_multi, 'docx', $batch_temp_folder, 'generate');
					        
					    }
					    
					}
				}

				if(count($temp_files) > '0')
				{
					//final cleanup (check if files are on disk)
					foreach($temp_files as $k_temp => $v_file)
					{
						if(!is_file($v_file))
						{
							//remove unexisting files
//							$unsetted_files[] = $v_file; //for debugs
							unset($temp_files[$v_file]);
						}
					}

					$remaining_temp_files = array_values(array_unique($temp_files));

					if(count($remaining_temp_files) > '0')
					{
        				//ISPC-2472  Ancuta 12.11.2019::added batch name
					    if( !isset($params['print_job'])){ // ISPC-2609 Ancuta 31.08.2020
       						$final_file = $this->generate_file($template_data[0], false, 'pdf', $batch_temp_folder, 'merge', $temp_files,$Batch_name);
					    }
						//--
						
					}
				}
				
				if ( ! isset($params['print_job']) && $params['print_job'] == '1' ){
				    
				} else {
    				exit;
				}
			}
		}
		
		public function braanlage5invoiceAction()
		{
		    if(!empty($_REQUEST['patient']))
		    {
		        $ipid = Pms_CommonData::get_ipid_from_epid($_REQUEST['patient'], $this->clientid);
		
		
		        //patient days
		        $conditions['client'] = $this->clientid;
		        $conditions['ipids'] = array($ipid);
		        $conditions['periods'][0]['start'] = '2009-01-01';
		        $conditions['periods'][0]['end'] = date('Y-m-d');
		
		        $sql = 'e.epid, p.ipid, e.ipid,';
		        $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		        $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		        $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		        $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		        $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		        $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
		        //beware of date d.m.Y format here
		        $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		
		        if($_REQUEST['sapvid'])
		        {
		            $selected_sapv_falls = array($ipid => $_REQUEST['sapvid']);
		
		            //get patients sapvs last fall
		            $patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid), true);
		
		            foreach($selected_sapv_falls as $k_ipid => $fall_id)
		            {
		                $patients_sapv[$k_ipid] = $fall_id;
		                $patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
		            }
		
		            $params['nosapvperiod'][$ipid] = '0';
		            $params['period'] = $patients_selected_periods;
		        }
		        else if(!empty($_REQUEST['list']))
		        {
		            //construct curent month period days
		            $selected_month = $_REQUEST['list'];
		            if(!function_exists('cal_days_in_month'))
		            {
		                $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
		            }
		            else
		            {
		                $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
		            }
		
		            $months_details[$selected_month]['start'] = $selected_month . "-01";
		            $months_details[$selected_month]['days_in_month'] = $month_days;
		            $months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
		            $month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);
		
		            array_walk($month_days_arr, function(&$value) {
		                $value = date("d.m.Y", strtotime($value));
		            });
		            $months_details[$selected_month]['days'] = $month_days_arr;
		
		            //get sapv periods in curent month period and make days
		            if($months_details)
		            {
		                //						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
		                $sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
		
		                $patients_selected_periods = array();
		                foreach($sapv_array as $k_sapv => $v_sapv)
		                {
		                    $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
		                    if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
		                    }
		                    else
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
		                    }
		
		                    if(empty($patients_selected_periods))
		                    {
		                        $patients_selected_periods = array();
		                    }
		
		                    $patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
		                    array_walk($patients_selected_periods, function(&$value) {
		                        $value = date("d.m.Y", strtotime($value));
		                    });
		                    $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                    $existing_sapv_days = $patients_selected_periods;
		                }
		
		                $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                $sapv_days_in_period = array_intersect($month_days_arr, $patients_selected_periods);
		            }
		
		            $params['nosapvperiod'][$ipid] = '1';
		            $params['selected_period'][$ipid] = $months_details[$selected_month];
		            $params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
		            $params['existing_sapv_days'] = array_values($patients_selected_periods);
		            $params['period'][$ipid] = $months_details[$selected_month];
		        }
		        else if(!empty($_REQUEST['admission']))
		        {
		            $selected_period = $_REQUEST['admission'];
		            $admission_start = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['start'];
		            $admission_end = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['end'];
		
		            $period_days_arr = PatientMaster::getDaysInBetween($admission_start, $admission_end);
		
		            array_walk($period_days_arr, function(&$value) {
		                $value = date("d.m.Y", strtotime($value));
		            });
		            $period_details[$selected_period]['start'] = $admission_start;
		            $period_details[$selected_period]['end'] = $admission_end;
		            $period_details[$selected_period]['days'] = $period_days_arr;
		
		            //get sapv periods in curent month period and make days
		            if($period_details[$selected_period])
		            {
		                //						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_period]['start'], $months_details[$selected_period]['end']);
		                $sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $period_details[$selected_period]['start'], $period_details[$selected_period]['end']);
		
		                $patients_selected_periods = array();
		                foreach($sapv_array as $k_sapv => $v_sapv)
		                {
		                    $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
		                    if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
		                    }
		                    else
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
		                    }
		
		                    if(empty($patients_selected_periods))
		                    {
		                        $patients_selected_periods = array();
		                    }
		
		                    $patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
		                    array_walk($patients_selected_periods, function(&$value) {
		                        $value = date("d.m.Y", strtotime($value));
		                    });
		                    $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                    $existing_sapv_days = $patients_selected_periods;
		                }
		
		                $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                $sapv_days_in_period = array_intersect($period_days_arr, $patients_selected_periods);
		            }
		
		            $params['nosapvperiod'][$ipid] = '1';
		            $params['admissionid'][$ipid] = $selected_period;
		            $params['selected_period'][$ipid] = $period_details[$selected_period];
		            $params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
		            $params['existing_sapv_days'] = array_values($patients_selected_periods);
		            $params['period'][$ipid] = $period_details[$selected_period];
		        }
		
		        $all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipid);
		
		        foreach($all_patients_sapvs as $k_sapv => $v_sapv)
		        {
		            if(empty($sapv_days_overall))
		            {
		                $sapv_days_overall = array();
		            }
		
		
		            $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
		            if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
		            {
		                $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
		            }
		            else
		            {
		                $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
		            }
		
		
		            $sapv_days_overall = array_merge($sapv_days_overall, PatientMaster::getDaysInBetween($start, $end));
		            array_walk($sapv_days_overall, function(&$value) {
		                $value = date("d.m.Y", strtotime($value));
		            });
		            $sapv_days_overall = array_values(array_unique($sapv_days_overall));
		        }
		        $params['sapv_overall'][$ipid] = array_values($sapv_days_overall);
		        $params['ipids'] = array($ipid);
		        $params['patient_sapvs'] = $patients_sapv[$ipid];
		        $params['patient_days'] = $patient_days;
		        $params['get_pdf'] = '1';
		        $params['only_pdf'] = (int) $_REQUEST['only_invoice'];
		        $params['stornopdf'] = (int) $_REQUEST['stornopdf'];
		        $params['stornoid'] = (int) $_REQUEST['stornoid'];
		        $params['invoices'] = array((int) $_REQUEST['iid']);
		
		        $this->generate_braanlage5_invoice($params);
		    }
		}
		
		
		// ISPC-2609 ISPC-2000 ANcuta 01.10.2020 
		public function generate_braanlage5_invoice($params)
		{
		    if(isset($params['print_job']) && $params['print_job'] == '1'){
		        $this->_helper->layout->setLayout('layout_ajax');
		        $this->_helper->viewRenderer->setNoRender();
		        
		    }
			//spl_autoload_register(array('AutoLoader', 'autoloadPdf'));  // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
			//initialize used models
		    $clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] : $this->clientid;
			$patientmaster = new PatientMaster();
			$sapv = new SapvVerordnung();
			$phelathinsurance = new PatientHealthInsurance();
			$anlage14ctrl = new Anlage14Control();
			$bra_invoices = new BraInvoices();
			$bra_form = new Application_Form_BraInvoices();
			$p_list = new PriceList();

			$ipids = $params['ipids'];
			$patient_days = $params['patient_days'];
			
			$this->view->folder_stamp = time();
			//set current period to work with
			$current_period = $params['period'];

			//client data
		    $client_details = Pms_CommonData::getClientData($clientid);

			if($client_details)
			{

			    $invoice_id = $params['invoices'][0];
			    	
			    $invoice_data = BraInvoices::getBraInvoice($invoice_id);
			    
			    if($invoice_data){
			        $ipid = $invoice_data['ipid'];
			        
			       
			     
			        
			        if(isset($params['print_job']) && $params['print_job'] == '1'){
			            
			            $conditions['client'] = $clientid;
			            $conditions['ipids'] = array($invoice_data['ipid']);
			            $conditions['periods'][0]['start'] = '2009-01-01';
			            $conditions['periods'][0]['end'] = date('Y-m-d');
			            
			            $sql = 'e.epid, p.ipid, e.ipid,';
			            $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			            $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			            $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			            $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			            $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			            $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			            
			            //be aware of date d.m.Y format here
			            $params['patient_days'] = Pms_CommonData::patients_days($conditions, $sql);
			        }
			        
			        $bra_anlage_5 = BraAnlage5::get_bra_anlage5_by_id($ipid,$invoice_data['anlage5_id']);
			        $bra_anlage_5_items = BraAnlage5Products::get_bra_anlage5products($ipid,$invoice_data['anlage5_id']);
			        
			        foreach($bra_anlage_5_items as $kp=>$vp){
			            $anlage_data['invoice']['items'][$vp['shortcut']] = $vp; 
			        }
			    }
 
			    /* -------------------- Client Details ---------------------------------- */
			    $anlage_data['client']['team_name'] = $client_details[0]['team_name'];
			    $anlage_data['client']['ik'] = $client_details[0]['institutskennzeichen'];
			    $anlage_data['client']['bsnr'] = $client_details[0]['betriebsstattennummer'];
			    $anlage_data['client']['id'] = $clientid;
			    
			    /* -------------------- Patient Details ---------------------------------- */
			    $patientmaster = new PatientMaster();
			    
			    if(isset($params['print_job']) && $params['print_job'] == '1'){
                    $pdet = $patientmaster->get_patients_details_By_Ipids(array($invoice_data['ipid']));
                    $patientinfo = $pdet[$invoice_data['ipid']];
			    } else{
                    $patientinfo = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');;
			    }
			    $this->view->first_name = $patientinfo['first_name'];
			    $this->view->last_name = $patientinfo['last_name'];
			    $this->view->birthd = $patientinfo['birthd'];
			    	
			    $anlage_data['patient']['first_name'] = $patientinfo['first_name'];
			    $anlage_data['patient']['last_name'] = $patientinfo['last_name'];
			    $anlage_data['patient']['dob'] = $patientinfo['birthd'];
			    $anlage_data['patient']['zip'] = $patientinfo['zip'];
			    $anlage_data['patient']['city'] = $patientinfo['city'];
			    $anlage_data['patient']['address'] = $patientinfo['first_name'].', '.$patientinfo['last_name'].'<br />'.$patientinfo['street1'].'<br />'.$patientinfo['zip'].' '.$patientinfo['city'];
			    
			    /* -------------------- Patient Health insurance --------------------------- */
			    $phelathinsurance = new PatientHealthInsurance();
			    $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
			    $anlage_data['patient']['insurance_company'] = $healthinsu_array[0]['company_name'];
			    $anlage_data['patient']['insurance_number'] = $healthinsu_array[0]['insurance_no'];
			    	
			    $divisions = HealthInsurancePermissions::getClientHealthInsurancePermissions($clientid);
			    
			    if($divisions)
			    {
			    	$healthinsu_subdiv_arr = PatientHealthInsurance2Subdivisions::get_hi_subdivisions_multiple($healthinsu_array[0]['companyid']);
			    }
			    
			    if($divisions && strlen($healthinsu_subdiv_arr[$invoice_data['ipid']]['3']['name']) > '0')
			    {
			    	$sapv_address[] = htmlentities($healthinsu_subdiv_arr[$invoice_data['ipid']]['3']['street1']);
			    	$sapv_address[] = htmlentities($healthinsu_subdiv_arr[$invoice_data['ipid']]['3']['zip'] . ' ' . $healthinsu_subdiv_arr[$invoice_data['ipid']]['3']['city']);
			    	$anlage_data['patient']['sapv_recipient'] = implode('<br />', array_values(array_unique($sapv_address)));
			    }
			    else
			    {
			    	$anlage_data['patient']['sapv_recipient'] = '';
			    }
			    
			    /* -------------------- Patient discharge data --------------------------- */
			    $discharge_methods = DischargeMethod::getDischargeMethod($clientid);
			    	
			    $dead_abbr = array("tod","verstorben");
			    foreach($discharge_methods as $k=> $dis_data){
			        if(in_array(strtolower($dis_data['abbr']),$dead_abbr  )){
			            $dead_methods[] = $dis_data['id'];
			        }
			    }
			    if(empty($dead_methods)){
			        $dead_methods[] = "999999999";
			    }
			    	
			    $discharge_details = PatientDischarge::getPatientDischarge($invoice_data['ipid']);
			    $anlage_data['patient']['discharge_details'] = $discharge_details[0];
			    	
			    if(!empty($discharge_details) && in_array($discharge_details[0]['discharge_method'],$dead_methods )){
			        $anlage_data['patient']['date_of_death'] = date('d.m.Y',strtotime($discharge_details[0]['discharge_date']));
			    } else{
			        $anlage_data['patient']['date_of_death'] ="";
			    }
			    	
			    	
			    /* -------------------- Patient SAPV data --------------------------- */
			    $sapv_array = SapvVerordnung::get_all_sapvs($invoice_data['ipid']);
			    	
			    if(!empty($sapv_array)){
			        $anlage_data['patient']['sapv_first_day'] = date('d.m.Y',strtotime($sapv_array[0]['verordnungam']));
			    }
			    	
			    foreach($sapv_array as $k_sapv => $v_sapv)
			    {
			        $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
			        	
			        if($v_sapv['status'] == '1' && $v_sapv['verordnungam'] != '0000-00-00 00:00:00')
			        {
			            $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
			        }
			        else
			        {
			            $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
			        }
			        	
			        if(empty($patient_sapv_days))
			        {
			            $patient_sapv_days = array();
			        }
			        	
			        $patient_sapv_days = array_merge($patient_sapv_days, PatientMaster::getDaysInBetween($start, $end));
			    
			    
			        if(empty($temp_sapv_days))
			        {
			            $temp_sapv_days = array();
			        }
			    
			    
			        $temp_sapv_days = PatientMaster::getDaysInBetween($start, $end);
			        	
			    
			        foreach($temp_sapv_days as $k_tmp_sapv => $v_tmp_sapv)
			        {
			            if(!$days2bra_options[$v_tmp_sapv])
			            {
			                $days2bra_options[$v_tmp_sapv] = array();
			            }
			    
			            $current_bra_options = explode(',', $v_sapv['bra_options']);
			            $days2bra_options[$v_tmp_sapv] = array_merge($days2bra_options[$v_tmp_sapv], $current_bra_options);
			    
			            asort($days2bra_options[$v_tmp_sapv]);
			            $days2bra_options[$v_tmp_sapv] = array_values(array_unique($days2bra_options[$v_tmp_sapv]));
			        }
			    }
			    /* -------------------- Users --------------------------- */
			    $master_groups = array('4', '5');
			    	
			    $client_user_groups_first = Usergroup::getUserGroups($master_groups);
			    foreach($client_user_groups_first as $k_group_f => $v_group_f)
			    {
			        $master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
			    }
			    	
			    $client_users = User::getClientsUsers($clientid);
			    
			    $nurse_users = array();
			    $doctor_users = array();
			    foreach($client_users as $k_cuser_det => $v_cuser_det)
			    {
			        $user_address[$v_cuser_det['id']] = $v_cuser_det['zip'].' '.$v_cuser_det['city'];
			         
			        $master_user_details[$v_cuser_det['id']] = $v_cuser_det;
			        if(in_array($v_cuser_det['groupid'], $master2client['5']))
			        {
			            if(strlen(trim($user_address[$v_cuser_det['id']])) > 3 ){
			                $anlage_data['user']['nurse'][$v_cuser_det['id']] = $v_cuser_det['first_name'].' '.$v_cuser_det['last_name'].', '. $user_address[$v_cuser_det['id']];
			            } else{
			                $anlage_data['user']['nurse'][$v_cuser_det['id']] = $v_cuser_det['first_name'].' '.$v_cuser_det['last_name'];
			            }
			            $anlage_data['user']['nurse_users'][] = $v_cuser_det['id'];
			        }
			        else if(in_array($v_cuser_det['groupid'], $master2client['4']))
			        {
			            if(strlen(trim($user_address[$v_cuser_det['id']])) > 3 ){
			                $anlage_data['user']['doctor'][$v_cuser_det['id']] =  $v_cuser_det['user_title'].' '.$v_cuser_det['first_name'].' '.$v_cuser_det['last_name'].', '.$user_address[$v_cuser_det['id']];
			            } else{
			                $anlage_data['user']['doctor'][$v_cuser_det['id']] =  $v_cuser_det['user_title'].' '.$v_cuser_det['first_name'].' '.$v_cuser_det['last_name'];
			            }
			    
			            $anlage_data['user']['doctor_users'][] = $v_cuser_det['id'];
			        }
			    }
			    				    

		    //load template data
		    $template_data = InvoiceTemplates::get_template($clientid, false, '1', 'bra_invoice');
                
                // client tokens
            if (strlen($invoice_data['client_ik']) > '0') {
                $tokens['client_ik'] = $invoice_data['client_ik'];
            } else {
                $tokens['client_ik'] = $client_details[0]['institutskennzeichen'];
            }
            
            // patient details tokens
            $tokens['patienten_id'] = strtoupper(html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
            $tokens['first_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
            $tokens['last_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
            $tokens['birthd'] = date('d.m.Y', strtotime($params['patient_days'][$invoice_data['ipid']]['details']['birthd']));
            $tokens['street'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
            $tokens['zip'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
            $tokens['city'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
            $tokens['patient_pflegestufe'] = html_entity_decode($invoice_data['patient_pflegestufe'], ENT_QUOTES, 'UTF-8');
            $tokens['patient_address'] = html_entity_decode($anlage_data['patient']['address'], ENT_QUOTES, 'UTF-8');
            
            // health insurance tokens
            $tokens['insurance_no'] = html_entity_decode($master_data['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
            $tokens['address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');//generate_braanlage5_invoice
            $tokens['SAPV_Rechnungsempfaenger'] = htmlentities($anlage_data['patient']['sapv_recipient']);//ISPC-1236
            
            // invoice specific tokens
            $tokens['invoiced_month'] = "";
            if (! empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00") {
                $tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
            }
            
            $tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
            $tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
            $tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
            
            // invoice date
            if ($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970") {
                $tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
            } else {
                $tokens['invoice_date'] = '';
            }
            
            // start billed action day
            if ($invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_active'])) != "1970") {
                $tokens['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
            } else {
                $tokens['first_active_day'] = '';
            }
            
            // end billed action day
            if ($invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_active'])) != "1970") {
                $tokens['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
            } else {
                $tokens['last_active_day'] = '';
            }
            
            // first sapv day
            if ($invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_sapv'])) != "1970") {
                $tokens['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
            } else {
                $tokens['first_sapv_day'] = '';
            }
            
            // last sapv day
            if ($invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_sapv'])) != "1970") {
                $tokens['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));
            } else {
                $tokens['last_sapv_day'] = '';
            }
            
            // sapv approve date
            if ($invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['sapv_approve_date'])) != "1970") {
                $tokens['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
            } else {
                $tokens['sapv_approve_date'] = '';
            }
            
            $tokens['sapv_approve_nr'] = html_entity_decode($invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
            
            $tokens['footer'] = html_entity_decode($invoice_data['footer'], ENT_QUOTES, 'UTF-8');
            $tokens['invoice_items'] = $invoice_data['items'];
            
            if ($invoice_data['storno'] == '1') {
                // rewrite invoice prefix if storned
                $tokens['prefix'] = 'STORNO_' . $tokens['prefix'];
            }
            
            //ISPC-2532 Lore 10.11.2020
            if ($params['stornopdf'] == '1' && $params['stornoid'] > '0') {
                $storned_invoice_data_detail = BraInvoices::getBraInvoice($params['stornoid']);
                $tokens['full_invoice_number'] = ' Storno '.$tokens['full_invoice_number']; // ISPC-2532 Ancuta 11.12.2020- comment from 10.12.2020 - overwtite - and add STORNO in front
                $tokens['full_invoice_number'] .= ' zur Rechnung '.$storned_invoice_data_detail['prefix'].$storned_invoice_data_detail['invoice_number'];
            }
            
            if ($params['stornopdf'] == '1' && $params['stornoid'] > '0') {
                $tokens['unique_id'] = $invoice_data['record_id'];
                $tokens['invoice_total'] = number_format(($invoice_data['invoice_total'] * (- 1)), '2', ',', '.');
            } else {
                $tokens['unique_id'] = $invoice_data['id'];
                $tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
            }
            
            // used in edit!
            // rewrite invoice_data with custom data (which comes from POST)
            if ($params['custom_data']) {
                // rewrite custom data from POST to $invoice_data.
                foreach ($params['custom_data'] as $k_custom => $v_custom) {
                    $invoice_data[$k_custom] = $v_custom;
                    $tokens[$k_custom] = $v_custom;
                }
            }
            $invoice_data['items'] = array_values($invoice_data['items']);
            
            if (count($invoice_data['items']) > '0') {
            	//ISPC-1236 - new token invoice_items_html_short, without id
                $rows = count($invoice_data['items']);
                $grid = new Pms_Grid($invoice_data['items'], 1, $rows, "invoice_items_list_bra_pdf.html");
                $grid_short = new Pms_Grid($invoice_data['items'], 1, $rows, "invoice_items_list_pdf_short.html");
                
                $grid->invoice_total = $tokens['invoice_total'];
                $grid->max_entries = $rows;
                
                $grid_short->invoice_total = $tokens['invoice_total'];
                $grid_short->max_entries = $rows;
                
                $html_items = $grid->renderGrid();
                $html_items_short = $grid_short->renderGrid();
            }
            
            if ($_REQUEST['zzz1'] == '1') {
                print_r("<pre>");
                print_r($html_items);
                print_r("</pre>");
                exit();
            }
            $tokens['invoice_items_html'] = $html_items;
            $tokens['invoice_items_html_short'] = $html_items_short;
            
            // ISPC-2472  Ancuta 12.11.2019::create batch name
            $Batch_name = false;
            $Batch_name = $invoice_data['prefix'].$invoice_data['invoice_number'];
            //
            
            if ($template_data) {
                
                // generate invoice page
                $temp_files[] = $this->generate_file($template_data[0], $tokens, 'pdf', $this->view->folder_stamp, 'generate_pdf');
                
                // generate anlage_5 page
                $post_anlage_data['anlage_data']['client'] = $anlage_data['client'];
                $post_anlage_data['anlage_data']['patient'] = $anlage_data['patient'];
                $post_anlage_data['anlage_data']['user'] = $anlage_data['user'];
                $post_anlage_data['anlage_data']['invoice'] = $bra_anlage_5;
                $post_anlage_data['anlage_data']['invoice']['location_data'] = explode(",",$bra_anlage_5['location_data']);
                $post_anlage_data['anlage_data']['invoice']['items'] =  $anlage_data['invoice']['items'];

                $temp_files[] = $this->generate_joined_files_pdf('4', $post_anlage_data, 'bra_anlage_5', 'bra_anlage_5_pdf_docx.html');
                // join generated files
                if (count($temp_files) > '0') {
                    
                    //ISDPC-2609 Ancuta
                    if(isset($params['print_job']) && $params['print_job'] == '1'){
                        $print_params = array();
                        $print_params = $params;
                        $print_params['template_data'] = $template_data[0];
                        $print_params['export_file_type'] = "pdf";
                        $print_params['batch_printing_mode'] = "merge_pdfs_multiple";
                        $print_params['vars'] = $tokens;
                        $print_params['batch_temp_files'] = $temp_files;
                        
                        $batch_temp_files = $this->print_job_generate_and_save_file($print_params);

                        return $batch_temp_files ;
                    } else { 
                        //ISPC-2472  Ancuta 12.11.2019::added batch name
                        $final_file = $this->generate_file($template_data[0], false, 'pdf', $this->view->folder_stamp, 'merge_pdfs', $temp_files,$Batch_name);
                    }
                }
                
            } else {
                $this->_redirect(APP_BASE . 'error/previlege');
                exit();
				                                                                                                        				    }
			}
		}

		public function shinvoicesAction()
		{
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$sh_invoices = new ShInvoices();
			$sh_invoices_items = new ShInvoiceItems();
			$sh_invoices_form = new Application_Form_ShInvoices();
			$clientid = $this->clientid;
			$userid = $this->userid;
			//ISPC-2609 Ancuta 28.08.2020 + Changes on  07.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "sh_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$this->userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$this->userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			if(count($invoice_user_printjobs) > 1 ){
			    echo $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			
			
			//ISPC-2623 carmen 21.08.2020
			$this->view->importstatus = "";
			if($_REQUEST['flg'])
			{
				if($_REQUEST['responseid'])
				{
					$importresponse = InvoicePaymentsImportStatusTable::getInstance()->findOneById($_REQUEST['responseid'], Doctrine_Core::HYDRATE_ARRAY);
					$response_status = unserialize($importresponse['status']);
					
					$this->view->importstatus = implode('<br />', $response_status['message']);
				}
				else 
				{
					$this->view->importstatus = $this->view->translate('You have to select a csv file!');
				}
			}
			//--
			
			//mark invoice as paid from invoices list link
			if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
			{
				if($_REQUEST['mode'] == "paid")
				{
					//mark as paid
					$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
					$invoice_pay_data['paymentAmount'] = '0.00';
					$invoice_pay_data['paymentComment'] = "";
					$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
					$invoice_pay_data['mark_as_paid'] = "1";

					$new_payment = $sh_invoices_form->submit_payment($invoice_pay_data);
					//TODO-2730 Ancuta 10.12.2019 - for clients that do not have access to invoices new but to shinvoices
					if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "invoicenew/shinvoices") !== false) {
					    $this->_redirect(APP_BASE . 'invoicenew/shinvoices');
					    exit; //for readability
					} else {
    					$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
					    exit; //for readability
					}
					
				}
			}

			if($this->getRequest()->isPost())
			{
				//ISPC-2623 carmen 20.08.2020
				if($_POST['formular']['button_action'] == 'importcsv')
				{
					if($_FILES['csvfile']['name'] != '' && $_FILES['csvfile']['type'] == 'text/plain')
					{
						$dir = 'uploadfile/';
						$filename = Pms_CommonData::filter_filename($_FILES['csvfile']['name'], true);
						$uploadfile = $dir . $filename;
						
						if (move_uploaded_file($_FILES['csvfile']['tmp_name'], $uploadfile)) {
							/* $importdata = urlencode(serialize(array(
								'fileuploaded' => $uploadfile,
								'delimiter' => $_POST['delimiter']
							))); */
							
							//estabilish a delimiter if none was provided via post
							if(strlen(trim(rtrim($_POST['delimiter']))) > 0)
							{
								$delimiter = trim(rtrim($_POST['delimiter']));
							}
							else
							{
								$delimiter = ";";
							}
							
							$handle = fopen($uploadfile, "r");
							$filecontent = file($uploadfile);
							fclose($handle);
							unlink($uploadfile);
							
							$invoice_type = "sh_invoice";
							
							$data_import_status['id'] = '';
							$data_import_status['clientid'] = $clientid;
							$data_import_status['invoice_type'] = $invoice_type;
							$data_import_status['filename'] = $filename;
							$data_import_status['filecontent'] = serialize($filecontent);
							$data_import_status['filedelimiter'] = $delimiter;
							
							$import_status_entity = InvoicePaymentsImportStatusTable::getInstance()->createIfNotExistsOneBy(array('id'), array($data_import_status['id']), $data_import_status);
							$fid = $import_status_entity->id;
							
							$oldurl = APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();
							$this->redirect(APP_BASE.'import/importcsvdatev?oldurl='.urlencode($oldurl).'&fid='.$fid);
						}
					}
					else 
					{
						$this->redirect(APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName().'?flg=error');
					}
				}
				//--
				if($_POST['draftmore'] == "1")
				{
					$transform = $sh_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $sh_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				elseif($_POST['archive_invoices_more'] == "1")
				{
					$archive = $sh_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
				}
				elseif($_POST['warningmore'] == "1")
				{
					$invoiceids_to_warn = implode(',', $_POST['document']);
				
					$this->forward('generatereminderinvoice', null, null, array('oldaction' => 'shinvoices'));
				
					return;
				}
				elseif($_POST['batch_print_more'])
				{
					$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
					$params['batch_print'] = '1'; //enables batch print procedure
					$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
					$params['get_pdf'] = '0'; //stops downloading single pdf
					
					//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
					if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
					    
					    $this->anlage14_invoice($params);
					    
					} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
					
    					$params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
    					
    					$print_job_data = array();
    					$print_job_data['clientid'] = $this->clientid;
    					$print_job_data['user'] = $this->userid;
    					$print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
    					$print_job_data['output_type'] = 'pdf';
    					$print_job_data['status'] = 'active';
    					$print_job_data['invoice_type'] = 'sh_invoice';
    					$print_job_data['print_params'] = serialize($params);
    					$print_job_data['print_function'] = 'anlage14_invoice';
    					$print_job_data['print_controller'] = $this->getRequest()->getControllerName();
    					foreach($_POST['document'] as $k=>$inv_id){
    					    $print_job_data['PrintJobsItems'][] = array(
    					        'clientid'=>$print_job_data['clientid'],
    					        'user'=>$print_job_data['user'],
    					        'invoice_id'=>$inv_id,
    					        'invoice_type'=>$print_job_data['invoice_type'],
    					        'status'=>"new"
    					    );
    					}
    					$PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
    					$print_id = $PrintJobsBulk_obj->id;
    					
    					if($print_id){
    					    $this->__StartPrintJobs();
    					}
					            					
    					
    					
					}
					
				}
				else
				{
					$post = $_POST;
					$post["mark_as_paid"] = "0";
					$new_payment = $sh_invoices_form->submit_payment($post);
				}
				
				$msg="";
				if($print_id){
				    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				}
				
				//TODO-2730 Ancuta 10.12.2019 - for clients that do not have access to invoices new but to shinvoices
				if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "invoicenew/shinvoices") !== false) {
				    $this->_redirect(APP_BASE . 'invoicenew/shinvoices'.$msg);
				    exit; //for readability
				} else {
				    $this->_redirect(APP_BASE . 'invoicenew/invoicesnew'.$msg);
				    exit; //for readability
				}
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$clone_record = $sh_invoices->create_storno_invoice($invoiceid);
					//TODO-2730 Ancuta 10.12.2019 - for clients that do not have access to invoices new but to shinvoices
					if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "invoicenew/shinvoices") !== false) {
					    $this->_redirect(APP_BASE . 'invoicenew/shinvoices?flg=suc');
					    exit; //for readability
					} else {
					    $this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=suc');
					    exit; //for readability
					}
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $sh_invoices_form->delete_invoice($_REQUEST['invoiceid']);
                $flg_msg = "";
				if($delete_invoice)
				{
                    $flg_msg = "?flg=delsuc";
				}
				else
				{
                    $flg_msg = "?flg=delerr";
				}
				
				//TODO-2730 Ancuta 10.12.2019 - for clients that do not have access to invoices new but to shinvoices
				if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "invoicenew/shinvoices") !== false) {
				    $this->_redirect(APP_BASE . 'invoicenew/shinvoices'.$flg_msg);
				    exit; //for readability
				} else {
				    $this->_redirect(APP_BASE . 'invoicenew/invoicesnew'.$flg_msg);
				    exit; //for readability
				}
				
				
			}

			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
		}

		public function invoicesnewAction()
		{
		   
		    
		    
		    //you reach this if from a inline ajax
		    if ($this->getRequest()->isXmlHttpRequest()) {
		        
		        switch ($this->getRequest()->getPost('__action')) {
		            case "transmit_hl7_ft1":
		                $this->_helper->layout->setLayout('layout_ajax');
		                $this->_helper->viewRenderer->setNoRender();
		                
		                $this->__invoicesnew_hl7_ft1();
		                
		                exit; //for read-ability 
		                
		                break;
		            // Ancuta 12.05.2020    
		            case "transmit_hl7_activation":
		                $this->_helper->layout->setLayout('layout_ajax');
		                $this->_helper->viewRenderer->setNoRender();
		                
		                $this->__invoicesnew_hl7_activation();
		                
		                exit; //for read-ability 
		                
		                break;
		        }
		    }
		    
		    
		    
		    
			//general data
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$clientid = $this->clientid;
			

			//get allowed client invoices
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
			$this->view->allowed_invoice = $client_allowed_invoice[0];
			
			
			//ISPC-2312 Ancuta 07.12.2020 - add filter - so if this page OTHER invoices arrive - they do not pass as they are not handeled here.
			$allowed_invoices = array(
			    "bw_sapv_invoice_new",
			    "bw_medipumps_invoice",
			    "bayern_sapv_invoice", 
			    "sh_invoice",
			    "hospiz_invoice", 
			    "rlp_invoice", 
			    "bre_kinder_invoice",
			    "nr_invoice",
			    "demstepcare_invoice"
			);
			if(!in_array($client_allowed_invoice[0],$allowed_invoices)){
			    $this->_redirect(APP_BASE . "error/previlege");
			}
			// --
			
			//ISPC-2609 Ancuta 28.08.2020 + Changes on  07.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  $client_allowed_invoice[0];
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$this->userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$this->userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			if(count($invoice_user_printjobs) > 1 ){
			    echo $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			//sh invoice data
			$sh_invoices = new ShInvoices();
			$sh_invoices_items = new ShInvoiceItems();
			$sh_invoices_form = new Application_Form_ShInvoices();

			//bayern tagepauschale invoice data
			$bay_invoices = new BayernInvoicesNew();
			$bay_invoices_items = new BayernInvoiceItemsNew();
			$bay_invoices_form = new Application_Form_BayernInvoicesNew();

			//medipumps invoice data
			$mp_invoices = new MedipumpsInvoicesNew();
			$mp_invoices_items = new MedipumpsInvoiceItemsNew();
			$mp_invoices_form = new Application_Form_MedipumpsInvoicesNew();

			//bayern tagepauschale invoice data
			$bw_sapv_invoices = new BwInvoicesNew();
			$bw_sapv_invoices_items = new BwInvoiceItemsNew();
			$bw_sapv_invoices_form = new Application_Form_BwInvoicesNew();
			
			
			//Hospiz invoice data
			$hospiz_invoices = new HospizInvoices();
			$hospiz_invoices_items = new HospizInvoiceItems();
			$hospiz_invoices_form = new Application_Form_HospizInvoices();
			
			//rp invoice data - ISPC-2143
			$rlp_invoices = new RlpInvoices();
			$rlp_invoices_items = new RlpInvoiceItems();
			$rlp_invoices_form = new Application_Form_RlpInvoices();
			
			//bre_kinder_invoice data - ISPC-2214
			//introduce - one table to rulle them all :: 19.06.2018
			// includes ISPC-2286 nr_invoice
			$invoices_system = new InvoiceSystem();
			$invoices_system_items = new InvoiceSystemItems();
			$invoices_system_form = new Application_Form_InvoiceSystem();
			
			
			switch($client_allowed_invoice[0])
			{
				case "sh_invoice":
					//mark invoice as paid from invoices list link
					if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
					{
						if($_REQUEST['mode'] == "paid")
						{
							//mark as paid
							$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
							$invoice_pay_data['paymentAmount'] = '0.00';
							$invoice_pay_data['paymentComment'] = "";
							$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
							$invoice_pay_data['mark_as_paid'] = "1";

							$new_payment = $sh_invoices_form->submit_payment($invoice_pay_data);
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
						}
					}

					if($this->getRequest()->isPost())
					{
						if($_POST['draftmore'] == "1")
						{
							$transform = $sh_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
						}
						elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
						{
							$del_invoice = $sh_invoices_form->delete_multiple_invoices($_POST['document']);
						}
						elseif($_POST['archive_invoices_more'] == "1")
						{
							$archive = $sh_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
						}
						elseif($_POST['warningmore'] == "1")
						{
							$invoiceids_to_warn = implode(',', $_POST['document']);
								
							$this->forward('generatereminderinvoice', null, null, array('oldaction' => 'invoicesnew'));
								
							return;
						}
						elseif($_POST['batch_print_more'])
						{
							$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
							$params['batch_print'] = '1'; //enables batch print procedure
							$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
							$params['get_pdf'] = '0'; //stops downloading single pdf
							
							//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
							if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
    							$this->anlage14_invoice($params);
							} 
							elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 )
							{ 
    							$params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
    							
    							$print_job_data = array();
    							$print_job_data['clientid'] = $this->clientid;
    							$print_job_data['user'] = $this->userid;
    							$print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
    							$print_job_data['output_type'] = 'pdf';
    							$print_job_data['status'] = 'active';
    							$print_job_data['invoice_type'] = 'sh_invoice';
    							$print_job_data['print_params'] = serialize($params);
    							$print_job_data['print_function'] = 'anlage14_invoice';
    							$print_job_data['print_controller'] = $this->getRequest()->getControllerName();
    							
    							foreach($_POST['document'] as $k=>$inv_id){
    							    $print_job_data['PrintJobsItems'][] = array(
    							        'clientid'=>$print_job_data['clientid'],
    							        'user'=>$print_job_data['user'],
    							        'invoice_id'=>$inv_id,
    							        'invoice_type'=>$print_job_data['invoice_type'],
    					                'status'=>"new"
    							    );
    							}
    							
    							$PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
    							$print_id = $PrintJobsBulk_obj->id;
    							
    							if($print_id){
    							    $this->__StartPrintJobs();
    							}

							}
						}
						else
						{
							$post = $_POST;
							$post["mark_as_paid"] = "0";
							$new_payment = $sh_invoices_form->submit_payment($post);
						}
						//ISPC-2609 Ancuta 07.09.2020
						$msg="";
						if($print_id){
						    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
						}
						
						//$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'); //to avoid resubmission
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'.$msg); //to avoid resubmission
						// --
						exit;
					}

					if($_REQUEST['mode'] == 'setstorno')
					{
						if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
						{
							$invoiceid = $_REQUEST['inv_id'];
						}
						else
						{
							$invoiceid = '0';
						}

						if($invoiceid > '0')
						{
							$clone_record = $sh_invoices->create_storno_invoice($invoiceid);
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=suc');
							exit;
						}
					}

					if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
					{
						$delete_invoice = $sh_invoices_form->delete_invoice($_REQUEST['invoiceid']);

						if($delete_invoice)
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delsuc');
						}
						else
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delerr');
						}
					}

					//construct months array
					$start_period = '2010-01-01';
					$end_period = date('Y-m-d', time());
					$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
					$month_select_array['99999999'] = '';
					foreach($period_months_array as $k_month => $v_month)
					{
						$month_select_array[$v_month] = $v_month;
					}

					//see how many days in selected month
					$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}

					//construct selected month array (start, days, end)
					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

					krsort($month_select_array);

					$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
					break;

				case "bayern_sapv_invoice":
					$modules = new Modules();
					if($modules->checkModulePrivileges("89", $clientid)) // change tab name
					{
						$this->view->change_tab_name = 1;
					}
					else
					{
						$this->view->change_tab_name = 0;
					}

					//mark invoice as paid from invoices list link
					if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
					{
						if($_REQUEST['mode'] == "paid")
						{
							//mark as paid
							$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
							$invoice_pay_data['paymentAmount'] = '0.00';
							$invoice_pay_data['paymentComment'] = "";
							$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
							$invoice_pay_data['mark_as_paid'] = "1";

							$new_payment = $bay_invoices_form->submit_payment($invoice_pay_data);
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
						}
					}
					

					if($this->getRequest()->isPost())
					{
						if($_POST['draftmore'] == "1")
						{
							$transform = $bay_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
						}
						elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
						{
							$del_invoice = $bay_invoices_form->delete_multiple_invoices($_POST['document']);
						}
						elseif($_POST['archive_invoices_more'] == "1")
						{
							$archive = $bay_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
						}
						elseif($_POST['warningmore'] == "1")
						{
							$invoiceids_to_warn = implode(',', $_POST['document']);
								
							$this->forward('generatereminderinvoice', null, null, array('oldaction' => 'invoicesnew'));
								
							return;
						}
						elseif(!empty($_POST['batch_print_more']))
						{
							$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
							$params['batch_print'] = '1'; //enables batch print procedure
							$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
							$params['get_pdf'] = '0'; //stops downloading single pdf
							
							//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
							if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
							    
							    $this->bayern_sapv_invoice($params);
							    
							} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
    							$params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
    							
    							$print_job_data = array();
    							$print_job_data['clientid'] = $this->clientid;
    							$print_job_data['user'] = $this->userid;
    							$print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
    							$print_job_data['output_type'] = 'pdf';
    							$print_job_data['status'] = 'active';
    							$print_job_data['invoice_type'] = 'bayern_sapv_invoice';
    							$print_job_data['print_params'] = serialize($params);
    							$print_job_data['print_function'] = 'bayern_sapv_invoice';
    							$print_job_data['print_controller'] = $this->getRequest()->getControllerName();
    							
    							foreach($_POST['document'] as $k=>$inv_id){
    							    $print_job_data['PrintJobsItems'][] = array(
    							        'clientid'=>$print_job_data['clientid'],
    							        'user'=>$print_job_data['user'],
    							        'invoice_id'=>$inv_id,
    							        'invoice_type'=>$print_job_data['invoice_type'],
    					                'status'=>"new"
    							    );
    							}
    							
    							$PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
    							$print_id = $PrintJobsBulk_obj->id;
    							
    							if($print_id){
    							    $this->__StartPrintJobs();
    							}
    						}
							
						}
						else if(!empty($_POST['csv_export']))
						{
							BayernInvoicesNew::generatecsv($_POST);
						}
						else if(!empty($_POST['invoiceId']))
						{
							$post = $_POST;
							$post["mark_as_paid"] = "0";
							$new_payment = $bay_invoices_form->submit_payment($post);
						}
						
						// ISPC-2609 Ancuta 07.09.202
						$msg="";
						if($print_id){
						    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
						}
						
						//$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'); //to avoid resubmission
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'.$msg); //to avoid resubmission
						//--
						exit;
					}

					if($_REQUEST['mode'] == 'setstorno')
					{
						if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
						{
							$invoiceid = $_REQUEST['inv_id'];
						}
						else
						{
							$invoiceid = '0';
						}

						if($invoiceid > '0')
						{
							$clone_record = $bay_invoices->create_storno_invoice($invoiceid);
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=suc');
							exit;
						}
					}

					if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
					{
						$delete_invoice = $bay_invoices_form->delete_invoice($_REQUEST['invoiceid']);

						if($delete_invoice)
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delsuc');
						}
						else
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delerr');
						}
					}

					//construct months array
					$start_period = '2010-01-01';
					$end_period = date('Y-m-d', time());
					$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
					$month_select_array['99999999'] = '';
					foreach($period_months_array as $k_month => $v_month)
					{
						$month_select_array[$v_month] = $v_month;
					}

					//see how many days in selected month
					$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}

					//construct selected month array (start, days, end)
					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

					krsort($month_select_array);

					$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
					break;

				case "bw_medipumps_invoice":
					//mark invoice as paid from invoices list link
					if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
					{
						if($_REQUEST['mode'] == "paid")
						{
							//mark as paid
							$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
							$invoice_pay_data['paymentAmount'] = '0.00';
							$invoice_pay_data['paymentComment'] = "";
							$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
							$invoice_pay_data['mark_as_paid'] = "1";

							$new_payment = $mp_invoices_form->submit_payment($invoice_pay_data);
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
						}
					}

					if($this->getRequest()->isPost())
					{
// 					    var_Dump($_POST['batch_print_more']);
// 					    dd($_POST);
						if($_POST['draftmore'] == "1")
						{
							$transform = $mp_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
						}
						elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
						{
							$del_invoice = $mp_invoices_form->delete_multiple_invoices($_POST['document']);
						}
						elseif($_POST['archive_invoices_more'] == "1")
						{
							$archive = $mp_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
						}
						elseif($_POST['batch_print_more'] == '1')
						{
						    
							$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
							$params['batch_print'] = '1'; //enables batch print procedure
							$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
							$params['get_pdf'] = '0'; //stops downloading single pdf
							

							
						    $this->bwmedipumpsinvoice($params);
							
							/* //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
							if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
							
							    $this->bwmedipumpsinvoice($params);
							    
							} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
    							$params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
    							
    							$print_job_data = array();
    							$print_job_data['clientid'] = $this->clientid;
    							$print_job_data['user'] = $this->userid;
    							$print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
    							$print_job_data['output_type'] = 'pdf';
    							$print_job_data['status'] = 'active';
    							$print_job_data['invoice_type'] = 'bw_medipumps_invoice';
    							$print_job_data['print_params'] = serialize($params);
    							$print_job_data['print_function'] = 'bwmedipumpsinvoice';
    							$print_job_data['print_controller'] = $this->getRequest()->getControllerName();
    							
    							PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
							} */
						}
						else
						{
							$post = $_POST;
							$post["mark_as_paid"] = "0";
							$new_payment = $mp_invoices_form->submit_payment($post);
						}
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'); //to avoid resubmission
						exit;
					}

					if($_REQUEST['mode'] == 'setstorno')
					{
						if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
						{
							$invoiceid = $_REQUEST['inv_id'];
						}
						else
						{
							$invoiceid = '0';
						}

						if($invoiceid > '0')
						{
							$clone_record = $mp_invoices->create_storno_invoice($invoiceid);
							//ISPC-2312 Ancuta 07.12.2020
							if($_REQUEST['redirect2new'] == '1'){
							    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bw_medipumps_invoice');
							    exit();
							}
							//-- 
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=suc');
							exit;
						}
					}

					if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
					{
						$delete_invoice = $mp_invoices_form->delete_invoice($_REQUEST['invoiceid']);

						if($delete_invoice)
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delsuc');
						}
						else
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delerr');
						}
					}

					//construct months array
					$start_period = '2010-01-01';
					$end_period = date('Y-m-d', time());
					$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
					$month_select_array['99999999'] = '';
					foreach($period_months_array as $k_month => $v_month)
					{
						$month_select_array[$v_month] = $v_month;
					}

					//see how many days in selected month
					$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}

					//construct selected month array (start, days, end)
					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

					krsort($month_select_array);

					$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);

					break;


				case "bw_sapv_invoice_new":
				    
					$modules = new Modules();
					if($modules->checkModulePrivileges("89", $clientid)) // change tab name
					{
						$this->view->change_tab_name = 1;
					}
					else
					{
						$this->view->change_tab_name = 0;
					}

					//mark invoice as paid from invoices list link
					if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
					{
						if($_REQUEST['mode'] == "paid")
						{
							//mark as paid
							$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
							$invoice_pay_data['paymentAmount'] = '0.00';
							$invoice_pay_data['paymentComment'] = "";
							$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
							$invoice_pay_data['mark_as_paid'] = "1";

							$new_payment = $bw_sapv_invoices_form->submit_payment($invoice_pay_data);
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
						}
					}

					if($this->getRequest()->isPost())
					{
						if($_POST['draftmore'] == "1")
						{
							$transform = $bw_sapv_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
						}
						elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
						{
							$del_invoice = $bw_sapv_invoices_form->delete_multiple_invoices($_POST['document']);
						}
						elseif($_POST['archive_invoices_more'] == "1")
						{
							$archive = $bw_sapv_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
						}
						elseif($_POST['warningmore'] == "1")
						{
							$invoiceids_to_warn = implode(',', $_POST['document']);
								
							$this->forward('generatereminderinvoice', null, null, array('oldaction' => 'invoicesnew'));
								
							return;
						}
						elseif(!empty($_POST['batch_print_more']))
						{
							$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
							$params['batch_print'] = '1'; //enables batch print procedure
							$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
							$params['get_pdf'] = '0'; //stops downloading single pdf
							
							//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
							if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
							    
							    $this->bwsapvsinvoice($params);
							    
							} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
    							$params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
    							
    							$print_job_data = array();
    							$print_job_data['clientid'] = $this->clientid;
    							$print_job_data['user'] = $this->userid;
    							$print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
    							$print_job_data['output_type'] = 'pdf';
    							$print_job_data['status'] = 'active';
    							$print_job_data['invoice_type'] = 'bw_sapv_invoice_new';
    							$print_job_data['print_params'] = serialize($params);
    							$print_job_data['print_function'] = 'bwsapvsinvoice';
    							$print_job_data['print_controller'] = $this->getRequest()->getControllerName();
    							
    							foreach($_POST['document'] as $k=>$inv_id){
    							    $print_job_data['PrintJobsItems'][] = array(
    							        'clientid'=>$print_job_data['clientid'],
    							        'user'=>$print_job_data['user'],
    							        'invoice_id'=>$inv_id,
    							        'invoice_type'=>$print_job_data['invoice_type'],
    					                'status'=>"new"
    							    );
    							}
    							
    							$PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
    							$print_id = $PrintJobsBulk_obj->id;
    							
    							if($print_id){
    							    $this->__StartPrintJobs();
    							}
                            }
							
						}
						else if(!empty($_POST['invoiceId']))
						{
							$post = $_POST;
							$post["mark_as_paid"] = "0";
							$new_payment = $bw_sapv_invoices_form->submit_payment($post);
						}
						
						//ISPC-2609 Ancuta 07.09.2020
						$msg="";
						if($print_id){
						    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
						}
						
						
						//$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'); //to avoid resubmission
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'.$msg); //to avoid resubmission
						// -- 
						exit;
					}

					if($_REQUEST['mode'] == 'setstorno')
					{
						if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
						{
							$invoiceid = $_REQUEST['inv_id'];
						}
						else
						{
							$invoiceid = '0';
						}

						if($invoiceid > '0')
						{
							$clone_record = $bw_sapv_invoices->create_storno_invoice($invoiceid);
							//ISPC-2312 Ancuta 07.12.2020
							if($_REQUEST['redirect2new'] == '1'){
							    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bw_sapv_invoice_new');
							    exit();
							}
							//-- 
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=suc');
							exit;
						}
					}

					if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
					{
						$delete_invoice = $bw_sapv_invoices_form->delete_invoice($_REQUEST['invoiceid']);

						if($delete_invoice)
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delsuc');
						}
						else
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delerr');
						}
					}

					//construct months array
					$start_period = '2010-01-01';
					$end_period = date('Y-m-d', time());
					$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
					$month_select_array['99999999'] = '';
					foreach($period_months_array as $k_month => $v_month)
					{
						$month_select_array[$v_month] = $v_month;
					}

					//see how many days in selected month
					$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}

					//construct selected month array (start, days, end)
					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

					krsort($month_select_array);

					$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
					break;
					
					
				case "rlp_invoice": // ISPC-2143
					//mark invoice as paid from invoices list link
					if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
					{
						if($_REQUEST['mode'] == "paid")
						{
							//mark as paid
							$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
							$invoice_pay_data['paymentAmount'] = '0.00';
							$invoice_pay_data['paymentComment'] = "";
							$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
							$invoice_pay_data['mark_as_paid'] = "1";

							
							$new_payment = $rlp_invoices_form->submit_payment($invoice_pay_data);
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
						}
					}

					if($this->getRequest()->isPost())
					{
						if($_POST['draftmore'] == "1")
						{
							$transform = $rlp_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
						}
						elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
						{
							$del_invoice = $rlp_invoices_form->delete_multiple_invoices($_POST['document']);
						}
						elseif($_POST['archive_invoices_more'] == "1")
						{
							$archive = $rlp_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
						}
						elseif($_POST['warningmore'] == "1")
						{
							$invoiceids_to_warn = implode(',', $_POST['document']);
								
							$this->forward('generatereminderinvoice', null, null, array('oldaction' => 'invoicesnew'));
								
							return;
						}
						elseif(!empty($_POST['batch_print_more']))
						{
							$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
							$params['batch_print'] = '1'; //enables batch print procedure
							$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
							$params['get_pdf'] = '0'; //stops downloading single pdf
							
							//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
							if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
							    
    							$this->generate_rlpinvoice($params);
    							
							} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
							
							     $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
							
    							$print_job_data = array();
    							$print_job_data['clientid'] = $this->clientid;
    							$print_job_data['user'] = $this->userid;
    							$print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
    							$print_job_data['output_type'] = 'pdf';
    							$print_job_data['status'] = 'active';
    							$print_job_data['invoice_type'] = 'rlp_invoice';
    							$print_job_data['print_params'] = serialize($params);
    							$print_job_data['print_function'] = 'generate_rlpinvoice';
    							$print_job_data['print_controller'] = $this->getRequest()->getControllerName();
    							
    							foreach($_POST['document'] as $k=>$inv_id){
    							    $print_job_data['PrintJobsItems'][] = array(
    							        'clientid'=>$print_job_data['clientid'],
    							        'user'=>$print_job_data['user'],
    							        'invoice_id'=>$inv_id,
    							        'invoice_type'=>$print_job_data['invoice_type'],
                                        'status'=>"new"
    							    );
    							}
    							
    							$PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
    							$print_id = $PrintJobsBulk_obj->id;
    							
    							if($print_id){
    							    $this->__StartPrintJobs();
    							}
							}
							
						}
						else if(!empty($_POST['invoiceId']))
						{
							$post = $_POST;
							$post["mark_as_paid"] = "0";
							$new_payment = $rlp_invoices_form->submit_payment($post);
						}
						
						//ISPC-2609 Ancuta 07.09.2020
						$msg="";
						if($print_id){
						    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
						}
						
						//$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'); //to avoid resubmission
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'.$msg); //to avoid resubmission
						//--
						exit;
					}

					if($_REQUEST['mode'] == 'setstorno')
					{
						if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
						{
							$invoiceid = $_REQUEST['inv_id'];
						}
						else
						{
							$invoiceid = '0';
						}

						if($invoiceid > '0')
						{
							$clone_record = $rlp_invoices->create_storno_invoice($invoiceid);
							
							//ISPC-2312 Ancuta 07.12.2020
							if($_REQUEST['redirect2new'] == '1'){
							    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=rlp_invoice');
							    exit();
							}
							//-- 
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=suc');
							exit;
						}
					}

					if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
					{
						$delete_invoice = $rlp_invoices_form->delete_invoice($_REQUEST['invoiceid']);

						if($delete_invoice)
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delsuc');
						}
						else
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delerr');
						}
					}

					//construct months array
					$start_period = '2010-01-01';
					$end_period = date('Y-m-d', time());
					$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
					$month_select_array['99999999'] = '';
					foreach($period_months_array as $k_month => $v_month)
					{
						$month_select_array[$v_month] = $v_month;
					}

					//see how many days in selected month
					$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}

					//construct selected month array (start, days, end)
					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

					krsort($month_select_array);

					$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
					break;

				case "hospiz_invoice":{
	
					//mark invoice as paid from invoices list link
					if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
					{
						if($_REQUEST['mode'] == "paid")
						{
							//mark as paid
							$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
							$invoice_pay_data['paymentAmount'] = '0.00';
							$invoice_pay_data['paymentComment'] = "";
							$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
							$invoice_pay_data['mark_as_paid'] = "1";

							$new_payment = $hospiz_invoices_form->submit_payment($invoice_pay_data);
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
						}
					}

					if($this->getRequest()->isPost())
					{
						
						
						if($_POST['draftmore'] == "1")
						{
							$transform = $hospiz_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
						}
						elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
						{
							$del_invoice = $hospiz_invoices_form->delete_multiple_invoices($_POST['document']);
						}
						elseif($_POST['archive_invoices_more'] == "1")
						{
							$archive = $hospiz_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
						}
						elseif($_POST['warningmore'] == "1")
						{
							$invoiceids_to_warn = implode(',', $_POST['document']);
							
							$this->forward('generatereminderinvoice', null, null, array('oldaction' => 'invoicesnew'));
							
							return;
							//$this->_redirect(APP_BASE . 'invoicenew/generatereminderinvoice?invoiceids='.$invoiceids_to_warn.'&invoicetable='.$_POST['warningmore_table'].'&invoicewarning='.$_POST['warningmore_type']);
						}
						elseif(!empty($_POST['batch_print_more']))
						{
							$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
							$params['batch_print'] = '1'; //enables batch print procedure
							$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
							$params['get_pdf'] = '0'; //stops downloading single pdf
							
							//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
							if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
							    
							    $this->hospizinvoice($params);
							    
							} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
    							    
    							$params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
    							
    							$print_job_data = array();
    							$print_job_data['clientid'] = $this->clientid;
    							$print_job_data['user'] = $this->userid;
    							$print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
    							$print_job_data['output_type'] = 'pdf';
    							$print_job_data['status'] = 'active';
    							$print_job_data['invoice_type'] = 'hospiz_invoice';
    							$print_job_data['print_params'] = serialize($params);
    							$print_job_data['print_function'] = 'hospizinvoice';
    							$print_job_data['print_controller'] = $this->getRequest()->getControllerName();
    							
    							foreach($_POST['document'] as $k=>$inv_id){
    							    $print_job_data['PrintJobsItems'][] = array(
    							        'clientid'=>$print_job_data['clientid'],
    							        'user'=>$print_job_data['user'],
    							        'invoice_id'=>$inv_id,
    							        'invoice_type'=>$print_job_data['invoice_type'],
                                        'status'=>"new"
    							    );
    							}
    							
    							$PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
    							$print_id = $PrintJobsBulk_obj->id;
    							
    							if($print_id){
    							    $this->__StartPrintJobs();
    							}
							}
							
							
						}
						else if(!empty($_POST['invoiceId']))
						{
							$post = $_POST;
							$post["mark_as_paid"] = "0";
							$new_payment = $hospiz_invoices_form->submit_payment($post);
						}
						
						//ISPC-2609 Ancuta 07.09.2020
						$msg="";
						if($print_id){
						    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
						}
						
						
						//$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'); //to avoid resubmission
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'.$msg); //to avoid resubmission
						//--
						exit;
					}

					if($_REQUEST['mode'] == 'setstorno')
					{
						if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
						{
							$invoiceid = $_REQUEST['inv_id'];
						}
						else
						{
							$invoiceid = '0';
						}

						if($invoiceid > '0')
						{
							$clone_record = $hospiz_invoices->create_storno_invoice($invoiceid);
							//ISPC-2312 Ancuta 07.12.2020
							if($_REQUEST['redirect2new'] == '1'){
							    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=hospiz_invoice');
							    exit();
							}
							//-- 
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=suc');
							exit;
						}
					}

					if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
					{
						$delete_invoice = $hospiz_invoices_form->delete_invoice($_REQUEST['invoiceid']);

						if($delete_invoice)
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delsuc');
						}
						else
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delerr');
						}
					}

					//construct months array
					$start_period = '2010-01-01';
					$end_period = date('Y-m-d', time());
					$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
					$month_select_array['99999999'] = '';
					foreach($period_months_array as $k_month => $v_month)
					{
						$month_select_array[$v_month] = $v_month;
					}

					//see how many days in selected month
					$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}

					//construct selected month array (start, days, end)
					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

					krsort($month_select_array);

					$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
					break;
				}
				
				
				case "bre_kinder_invoice": // ISPC-2214
				case "nr_invoice": // ISPC-2286
				case "demstepcare_invoice": // ISPC-2461
				    
				    
				    $invoice_type = $client_allowed_invoice[0]; 
				    
					//mark invoice as paid from invoices list link
					if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
					{
						if($_REQUEST['mode'] == "paid")
						{
							//mark as paid
							$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
							$invoice_pay_data['paymentAmount'] = '0.00';
							$invoice_pay_data['paymentComment'] = "";
							$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
							$invoice_pay_data['mark_as_paid'] = "1";

							
							$new_payment = $invoices_system_form->submit_payment($invoice_type,$invoice_pay_data);
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
						}
					}

					if($this->getRequest()->isPost())
					{   
						if($_POST['draftmore'] == "1")
						{
							$transform = $invoices_system_form->ToggleStatusInvoices($invoice_type,$_POST['document'], "2", $clientid);
						}
						elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
						{
							$del_invoice = $invoices_system_form->delete_multiple_invoices($invoice_type,$_POST['document']);
						}
						elseif($_POST['archive_invoices_more'] == "1")
						{
							$archive = $invoices_system_form->archive_multiple_invoices($invoice_type,$_POST['document'], $clientid);
						}
						elseif($_POST['warningmore'] == "1")
						{
							$invoiceids_to_warn = implode(',', $_POST['document']);
								
							$this->forward('generatereminderinvoice', null, null, array('oldaction' => 'invoicesnew'));
								
							return;
						}
						elseif(!empty($_POST['batch_print_more']))
						{
							$params['invoice_type'] = $invoice_type; //invoice_type
							$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
							$params['batch_print'] = '1'; //enables batch print procedure
							$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
							$params['get_pdf'] = '0'; //stops downloading single pdf
							
							//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
							if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
							    
    							$this->generate_systeminvoice($params);
							    
							} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
    							
    							$params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
    							
    							$print_job_data = array();
    							$print_job_data['clientid'] = $this->clientid;
    							$print_job_data['user'] = $this->userid;
    							$print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
    							$print_job_data['output_type'] = 'pdf';
    							$print_job_data['status'] = 'active';
    							$print_job_data['invoice_type'] = $invoice_type;
    							$print_job_data['print_params'] = serialize($params);
    							$print_job_data['print_function'] = 'generate_systeminvoice';
    							$print_job_data['print_controller'] = $this->getRequest()->getControllerName();
    							
    							foreach($_POST['document'] as $k=>$inv_id){
    							    $print_job_data['PrintJobsItems'][] = array(
    							        'clientid'=>$print_job_data['clientid'],
    							        'user'=>$print_job_data['user'],
    							        'invoice_id'=>$inv_id,
    							        'invoice_type'=>$print_job_data['invoice_type'],
                                        'status'=>"new"
    							    );
    							}
    							
    							$PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
    							$print_id = $PrintJobsBulk_obj->id;
    							
    							if($print_id){
    							    $this->__StartPrintJobs();
    							}
							}
							
						}
						else if(!empty($_POST['invoiceId']))
						{
							$post = $_POST;
							$post["mark_as_paid"] = "0";
							$new_payment = $invoices_system_form->submit_payment($invoice_type,$post);
						}
						
						//ISPC-2609 Ancuta 07.09.2020
						$msg="";
						if($print_id){
						    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
						}
						
						//$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'); //to avoid resubmission
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew'.$msg); //to avoid resubmission
						//--
						exit;
					}

					if($_REQUEST['mode'] == 'setstorno')
					{
						if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
						{
							$invoiceid = $_REQUEST['inv_id'];
						}
						else
						{
							$invoiceid = '0';
						}

						if($invoiceid > '0')
						{
							$clone_record = $invoices_system->create_storno_invoice($invoice_type,$invoiceid);

							//ISPC-2312 Ancuta 07.12.2020
							if($_REQUEST['redirect2new'] == '1'){
							    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type='.$invoice_type);
							    exit();
							}
							//-- 
							
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=suc');
							exit;
						}
					}

					if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
					{
						$delete_invoice = $invoices_system_form->delete_invoice($invoice_type,$_REQUEST['invoiceid']);

						if($delete_invoice)
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delsuc');
						}
						else
						{
							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delerr');
						}
					}

					//construct months array
					$start_period = '2010-01-01';
					$end_period = date('Y-m-d', time());
					$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
					$month_select_array['99999999'] = '';
					foreach($period_months_array as $k_month => $v_month)
					{
						$month_select_array[$v_month] = $v_month;
					}

					//see how many days in selected month
					$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}

					//construct selected month array (start, days, end)
					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

					krsort($month_select_array);

					$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
					break;
					
				default:
					$this->_redirect(APP_BASE . "error/previlege");
					exit;
					break;
			}
		}

		public function fetchshinvoicelistAction()
		{
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');

			$users = new User();
			$warnings = new RemindersInvoice();
			$modules = new Modules();
			$sh_invoices_payments = new ShInvoicePayments();

			$clientid = $this->clientid;			
			
			if($modules->checkModulePrivileges("170", $clientid))
			{
				$this->view->create_bulk_warnings = "1";
			}
			else
			{
				$this->view->create_bulk_warnings = "0";
			}
			
			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('ShInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);

			// get client data
			$client_details_m = new Client();
			$client_details = $client_details_m->getClientDataByid($clientid);

			$invoice_due_days = $client_details[0]['invoice_due_days'];
			$plus_due_days = '+' . $invoice_due_days . ' days';
			$this->view->plus_due_days = $plus_due_days;

			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{
				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND isdelete=0 AND isarchived ="0"';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") AND isarchived ="0"';
					break;

				case 'overdue':
// 					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND DATE(NOW()) > DATE(completed_date)  AND isdelete=0 AND isarchived ="0"';
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
					break;

				case 'all':
					$filters['hiinvoice'] = ' AND isarchived ="0"';
					break;
				case 'archived':
					$filters['hiinvoice'] = ' AND isarchived ="1" AND isdelete=0';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';
					break;
			}

			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($this->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				//filter patients name/surname/epid
				$f_patient = Doctrine_Query::create()
					->select($sql)
					->from('PatientMaster p')
					->where("p.isdelete =0")
					->leftJoin("p.EpidIpidMapping e")
					->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);
				$f_patients_res = $f_patient->fetchArray();

				$f_patients_ipids[] = '9999999999999';
				foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
				{
					$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
				}
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('ShInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$invoices_counting->andWhereIn('ipid', $f_patients_ipids);
			}

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();



			foreach($inv2count as $k_inv2count => $v_inv2count)
			{

				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
// 				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($v_inv2count['completed_date']))) && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["overdue"][] = '1';
				}

				if($v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["all"][] = '1';
				}

				if($v_inv2count['isarchived'] == "1")
				{
					$status_count_invoices["archived"][] = '1';
				}
			}
			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('ShInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$del_invoices_counting->andWhereIn('ipid', $f_patients_ipids);
			}
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}

			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('ShInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice']);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$invoices_nl->andWhereIn('ipid', $f_patients_ipids);
			}
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";


			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->leftJoin("p.EpidIpidMapping e")
				->where('e.clientid = ' . $clientid);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$patient->andWhereIn('p.ipid', $f_patients_ipids);
			}
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
				    //ShInvoices
					$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [NEW]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort,concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('ShInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $sh_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);
			
			$all_warnings = $warnings->get_reminders($invoice_ids, 'sh_invoice', $clientid);
			
			foreach ($invoicelimit as &$row) {
				if (isset($all_warnings[$row['id']])) {
					$row['InvoiceWarnings'] = $all_warnings[$row['id']];
				}
			}
			//var_dump($invoicelimit); exit;

			$this->view->storned_invoces = ShInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function shlistpaymentsAction()
		{

			$this->_helper->viewRenderer->setNoRender();
			$clientid = $this->clientid;
			$shinvoices = new ShInvoices();
			$shpayments = new ShInvoicePayments();
			$shinvoice_form = new Application_Form_ShInvoices();

			$user = new User();


			//get allowed client invoices
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
			$this->view->allowed_invoice = $client_allowed_invoice[0];


			if($_REQUEST['invoiceid'])
			{
				$payments = $shpayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $shpayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $shpayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $shpayments->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $shinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $shpayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoicenew/shlistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		public function editshinvoiceAction()
		{
			$clientid = $this->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$sh_invoices = new ShInvoices();
			$sh_invoices_items = new ShInvoiceItems();
			$sh_invoices_form = new Application_Form_ShInvoices();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$this->view->hide_patient_tab = '1';

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $sh_invoices->getShInvoice($invoice_id,false,true);
			}

			if(in_array($invoice_data['id'], ShInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}
			//TODO-2730 Ancuta 10.12.2019 - for clients that do not have access to invoices new but to shinvoices
			$initial_page = "invoicenew/invoicesnew";
			if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "invoicenew/shinvoices") !== false) {
			    $initial_page = "invoicenew/shinvoices";
			}  
		
			$this->view->http_referer_var = $initial_page;
			//-- 
			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
			    
			    //TODO-2730 Ancuta 10.12.2019 - for clients that do not have access to invoices new but to shinvoices
			    $redirect_page = 'invoicenew/invoicesnew';
			    if(!empty($_POST['http_referer_var']) && $_POST['http_referer_var'] == "invoicenew/shinvoices"){
			        $redirect_page = 'invoicenew/shinvoices';
			    } 
			    
			    //ISPC-2312 Ancuta 07.12.2020
			    if($_REQUEST['redirect2new'] == '1'){
			        $redirect_page = 'invoiceclient/invoices?invoice_type=sh_invoice';
			    }
			    //-- 
			    
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if(!empty($_POST['paid']))
				{
					//mark as paid
					$invoice_pay_data['invoiceId'] = $_REQUEST['invoiceid'];
					$invoice_pay_data['paymentAmount'] = '0.00';
					$invoice_pay_data['paymentComment'] = "";
					$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
					$invoice_pay_data['mark_as_paid'] = "1";

					$new_payment = $sh_invoices_form->submit_payment($invoice_pay_data);

					//TODO-2730 Ancuta 10.12.2019 - for clients that do not have access to invoices new but to shinvoices
   					//$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
					$this->_redirect(APP_BASE . $redirect_page);
					exit;
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $sh_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{
					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}
				//save/edit invoice here
				
				if(strlen($_POST['invoice']['address']) > 0 ){
				    if(strpos($_POST['invoice']['address'],"style"))
				    {
				        $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
				    }
				    $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
				}
					
				
				$edit_invoice = $sh_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);


				//redirect to invoices list
				if(empty($_POST['pdf']))
				{
					if($edit_invoice)
					{

					    //TODO-2730 Ancuta 10.12.2019 - for clients that do not have access to invoices new but to shinvoices
						//$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edtsuc');
					    $this->_redirect(APP_BASE . $redirect_page.'?flg=edtsuc');
					}
					else
					{
					    //TODO-2730 Ancuta 10.12.2019 - for clients that do not have access to invoices new but to shinvoices
						//$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edterr');
					    $this->_redirect(APP_BASE . $redirect_page.'?flg=edterr');
					}
				}
				elseif($_POST['pdf'])
				{
					foreach($_POST['custom'] as $k_item => $v_custom)
					{
						$new_invoice_items[] = array(
							'shortcut' => $_POST['shortcut'][$k_item],
							'description' => $_POST['description'][$k_item],
							'qty' => $_POST['qty'][$k_item],
							'price' => Pms_CommonData::str2num($_POST['price'][$k_item]),
							'total' => Pms_CommonData::str2num($_POST['total'][$k_item]),
							'custom' => $v_custom,
						);
					}
					$params['ipids'] = array($invoice_data['ipid']);

					//patient days
					$conditions['client'] = $this->clientid;
					$conditions['ipids'] = array($invoice_data['ipid']);
					$conditions['periods'][0]['start'] = '2009-01-01';
					$conditions['periods'][0]['end'] = date('Y-m-d');

					$sql = 'e.epid, p.ipid, e.ipid,';
					$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
					$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
					$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
					$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
					$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
					$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

					//be aware of date d.m.Y format here
					$patient_days = Pms_CommonData::patients_days($conditions, $sql);

					$params['invoices'] = array($invoice_data['id']);
					$params['patient_days'] = $patient_days;
					$params['get_pdf'] = '1';
					$params['only_pdf'] = 1;
					$_REQUEST['type'] = 'pdf';

					$params['custom_data']['address'] = $_POST['invoice']['address'];
					$params['custom_data']['footer'] = $_POST['footer'];
					$params['custom_data']['items'] = $new_invoice_items;

					$this->anlage14_invoice($params);
					exit;
				}
			}


			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				if(!$invoice_data || empty($invoice_data))
				{
				    //TODO-2730 Ancuta 10.12.2019 - for clients that do not have access to invoices new but to shinvoices
					//$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
				    $this->_redirect(APP_BASE . $initial_page);
				}

				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];

				//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}

					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}


				if($hi_perms_divisions)
				{
					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
				}

				$pathealthinsurancenr = "";
				if(count($healthinsu_array[0]))
				{
					$phi_details = $healthinsu_array[0]['name'];
				}
				else
				{
					$phi_details = "--";
				}

				$phi_details_sub = $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$this->view->health_insurance = $phi_details;
				$this->view->hi_subdiv_address = $phi_details_sub;


				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}

				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}


				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is present
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		
		
		/* ######################################################### */
		public function listclientinvoicetemplatesoldAction()
		{
			if($_REQUEST['flg'])
			{
				if($_REQUEST['flg'] == 'err')
				{
					$this->view->error_mesage = $this->view->translate('error');
				}
				else if($_REQUEST['flg'] == 'inv')
				{
					$this->view->error_mesage = $this->view->translate('invalid_template');
				}
				else if($_REQUEST['flg'] == 'suc')
				{
					$this->view->success_message = $this->view->translate('success');
				}
				else if($_REQUEST['flg'] == 'del_suc')
				{
					$this->view->delete_message = $this->view->translate('deletedsuccessfully');
				}
			}
		}

		public function fetchclienttemplatelistAction()
		{
			$userid = $this->userid;
			$clientid = $this->clientid;
			$user_type = $this->usertype;

			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$this->view->order = $orderarray[$_REQUEST['ord']];
			$this->view->{$_REQUEST['clm'] . "order"} = $orderarray[$_REQUEST['ord']];

			$all_clients = Client::get_all_clients();

			$client_ids[] = $clientid;
// 			foreach($all_clients as $k_client => $v_client)
// 			{
// 				$client_ids[] = $v_client['id'];
// 			}

			$client_users_res = User::get_clients_users($client_ids);

			foreach($client_users_res as $k_user => $v_user)
			{
				$client_users[$v_user['id']] = $v_user['first_name'] . ' ' . $v_user['last_name'];
			}

			$this->view->client_users = $client_users;

			if($user_type == "CA" || $user_type == "SA")
			{
				$this->view->reveal_actions_col = '1';
			}
			else
			{
				$this->view->reveal_actions_col = '0';
			}

			$fdoc = Doctrine_Query::create();
			$fdoc->select('*');
			$fdoc->from('InvoiceTemplates');
			$fdoc->where("isdeleted = 0");
			$fdoc->andWhereIn('clientid', $client_ids);
			if(isset($_REQUEST['val']) && strlen($_REQUEST['val']) > 0)
			{
				$fdoc->andWhere("(title != '' or file_type != '')");
				$fdoc->andWhere("(title like '%" . trim($_REQUEST['val']) . "%' OR file_type like '%" . trim($_REQUEST['val']) . "%')");
			}
			$fdoc->OrderBy('clientid ASC');
			$fdoclimit = Pms_CommonData::array_stripslashes($fdoc->fetchArray());

			foreach($fdoclimit as $k_res => $v_res)
			{
//				$clients_templates[$v_res['clientid']] = $v_res;
				$clients_templates[] = $v_res;
			}

			$this->view->client_templates = $clients_templates;
			$this->view->all_clients = $all_clients;
			$this->view->{"style" . $_GET['pgno']} = "active";

//			foreach($all_clients as $k_cl => $v_cl)
//			{
//				if(!in_array($v_cl['id'], $clients_with_data))
//				{
//					unset($all_clients[$k_cl]);
//				}
//			}

			if(count($clients_templates) > '0')
			{
//				print_r($clients_templates);

				$grid = new Pms_Grid($clients_templates, 1, count($clients_templates), "clientinvoicetemplateslist.html");
				$this->view->templates_grid = $grid->renderGrid();
				$this->view->navigation = $grid->dotnavigation("clienttemplatesnavigation.html", 5, $_REQUEST['pgno'], $limit);
			}
			else
			{
				//no items found
				$this->view->templates_grid = '<tr><td colspan="5" style="text-align:center;">' . $this->view->translate('noresultfound') . '</td></tr>';
				$this->view->navigation = '';
			}

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['templateslist'] = $this->view->render('invoicenew/fetchclienttemplatelist.html');

			echo json_encode($response);
			exit;
		}

		public function addclientinvoicetemplateAction()
		{
			$userid = $this->userid;
			$clientid = $this->clientid;

			$all_clients = Client::get_all_clients();
			$all_clients_select[] = $this->view->translate('select_client');

			//get existing clients templates - exclude them from selector
			$fdoc = Doctrine_Query::create()
				->select('*')
				->from('InvoiceTemplates')
				->where("isdeleted = 0");
			$fdoc_arr = $fdoc->fetchArray();

			//removed the exclusion when added invoice type
			//(this is no longer unique template per client but unique template per client invoice type)
//			foreach($fdoc_arr as $k_tpl => $v_tpl)
//			{
//				$excluded_clients[] = $v_tpl['clientid'];
//			}

			foreach($all_clients as $k_client => $v_client)
			{
				if(!in_array($v_client['id'], $excluded_clients))
				{
					$all_clients_select[$v_client['id']] = $v_client['client_name'];
				}
			}

			if($this->getRequest()->isPost())
			{
				$upload_form = new Application_Form_InvoiceTemplate();

				$post = $_POST;
				$post['clients'] = $clientid;
				$post['sh_inv_template_filename'] = $_SESSION['sh_inv_template_filename'];
				$post['sh_inv_template_filetype'] = $_SESSION['sh_inv_template_filetype'];
				$post['sh_inv_template_filepath'] = $_SESSION['sh_inv_template_filepath'];

				if($upload_form->validate($post))
				{
					$upload_form->insert_template_data($post);
					$this->view->error_message = $this->view->translate("recordinsertsucessfully");
					//$this->_redirect(APP_BASE . 'invoicenew/listclientinvoicetemplates?flg=suc_add');
				}
				else
				{
					$upload_form->assignErrorMessages();
					$this->retain_values($_POST);
				}

				$this->resetuploadvars();
			}

			$this->view->all_clients_select = $all_clients_select;

			
			// client setting invoices
			$invoice_types_src = Pms_CommonData::allinvoices();
			
			
			//all invoice types
			$invoice_types = Pms_CommonData::get_invoice_types();
			
			//get invoices from menu permissions
			$client_menu_perms = Doctrine_Query::create()
			->select('*')
			->from('MenuClient')
			->andWhere('clientid = "' . $clientid . '"');
			$client_menu_permssions = $client_menu_perms->fetchArray();
			
			$menu_perms[] = '999999999';
			foreach($client_menu_permssions as $val)
			{
			    $menu_perms[] = $val['menu_id'];
			}
			
			$menus_cl = Doctrine_Query::create()
			->select('id, menu_link, parent_id, isdelete')
			->from('Menus m')
			->where('m.isdelete = "0"')
			->andWhereIn("m.id", $menu_perms)
			->andWhere('m.isdelete = 0')
			->andWhere('m.forsuperadmin = 0')
			->andWhere('m.menu_link LIKE "%invoice/%" or m.menu_link LIKE "%invoicenew/%" or m.menu_link LIKE "%internalinvoice/%"')
			->orderBy('m.sortorder ASC');
			$menus_cl_arr = $menus_cl->fetchArray();
			
			foreach($menus_cl_arr as $k_menu => $v_menu)
			{
			    if(strlen($v_menu['menu_link']) > 0)
			    {
			        $allowed_menu_links[] = $v_menu['menu_link'];
			    }
			}
			
			//ISPC-2745 Carmen 24.11.2020
			//get invoices from tabmenu permissions
			$client_tabmenu_perms = Doctrine_Query::create()
			->select('*')
			->from('TabMenuClient')
			->andWhere('clientid = "' . $clientid . '"');
			$client_tabmenu_permssions = $client_tabmenu_perms->fetchArray();
			
			$tab_menu_perms[] = '999999999';
			foreach($client_tabmenu_permssions as $val)
			{
			    $tab_menu_perms[] = $val['menu_id'];
			}
			
			$tabmenus_cl = Doctrine_Query::create()
			->select('id, menu_link, parent_id, isdelete')
			->from('TabMenus m')
			->where('m.isdelete = "0"')
			->andWhereIn("m.id", $tab_menu_perms)
			->andWhere('m.isdelete = 0')
			//->andWhere('m.forsuperadmin = 0')
			->andWhere('m.menu_link LIKE "%invoice/%" or m.menu_link LIKE "%invoicenew/%" or m.menu_link LIKE "%internalinvoice/%"')
			->orderBy('m.sortorder ASC');
			$tabmenus_cl_arr = $tabmenus_cl->fetchArray();
		
			foreach($tabmenus_cl_arr as $k_menu => $v_menu)
			{
			    if(strlen($v_menu['menu_link']) > 0)
			    {
			        $allowed_tabmenu_links[] = $v_menu['menu_link'];
			    }
			}
			//--
			
			foreach($invoice_types as $k_invoice_type => $v_invoice_type)
			{
			    if(in_array($k_invoice_type, $allowed_menu_links) && in_array($v_invoice_type,$invoice_types_src))
// 			    if(in_array($k_invoice_type, $allowed_menu_links))
			    {
			        $allowed_invoice_types[$v_invoice_type] = $this->view->translate($v_invoice_type . '_label');
			    }
			    //ISPC-2745 Carmen 24.11.2020
			    if(in_array($k_invoice_type, $allowed_tabmenu_links) && in_array($v_invoice_type,$invoice_types_src))
			    // 			    if(in_array($k_invoice_type, $allowed_menu_links))
			    {
			    	$allowed_invoice_types[$v_invoice_type] = $this->view->translate($v_invoice_type . '_label');
			    }
			    //--
			}
			
			//add invoice selected in the radio of client/clientinvoicepermissions?cid=clientid
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
			if (is_array($client_allowed_invoice)) {
				foreach ($client_allowed_invoice as $v) {
						
					if ( ! isset($allowed_invoice_types[$v])) {
						$allowed_invoice_types[$v] = $this->view->translate($v . '_label');
					}
				}
			}
			
			$this->view->all_invoices_select = $allowed_invoice_types;
		}

		public function editclientinvoicetemplateAction()
		{
			$userid = $this->userid;
			$clientid = $this->clientid;
			$upload_form = new Application_Form_InvoiceTemplate();


			if($_REQUEST['tid'] > '0')
			{
				$template_id = trim(rtrim($_REQUEST['tid']));

				if($this->getRequest()->isPost())
				{
					$post = $_POST;
					$post['template_id'] = $template_id;

					//used to cleanup in edit mode(file uploaded but check was deselected)
					$post['sh_inv_template_filepath'] = $_SESSION['sh_inv_template_filepath'];
					$post['sh_inv_template_filetype'] = $_SESSION['sh_inv_template_filetype'];

					//reset upload vars(if any) if change template is not checked
					if($post['change_file'] != '1')
					{
						$this->resetuploadvars();
					}

					if($upload_form->validate($post))
					{
						$upload_form->update_template_data($post);
						$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
						$this->_redirect(APP_BASE . 'invoicenew/listclientinvoicetemplates?flg=succ&mes='.urlencode($this->view->error_message));
						exit;
					}
					else
					{
						$this->retain_values($post);
					}
					$this->resetuploadvars();
				}



			// client setting invoices
			$invoice_types_src = Pms_CommonData::allinvoices();
			
			
			//all invoice types
			$invoice_types = Pms_CommonData::get_invoice_types();
			
			//get invoices from menu permissions
			$client_menu_perms = Doctrine_Query::create()
			->select('*')
			->from('MenuClient')
			->andWhere('clientid = "' . $clientid . '"');
			$client_menu_permssions = $client_menu_perms->fetchArray();
			
			$menu_perms[] = '999999999';
			foreach($client_menu_permssions as $val)
			{
			    $menu_perms[] = $val['menu_id'];
			}
			
			$menus_cl = Doctrine_Query::create()
			->select('id, menu_link, parent_id, isdelete')
			->from('Menus m')
			->where('m.isdelete = "0"')
			->andWhereIn("m.id", $menu_perms)
			->andWhere('m.isdelete = 0')
			->andWhere('m.forsuperadmin = 0')
			->andWhere('m.menu_link LIKE "%invoice/%" or m.menu_link LIKE "%invoicenew/%"')
			->orderBy('m.sortorder ASC');
			$menus_cl_arr = $menus_cl->fetchArray();
			
			foreach($menus_cl_arr as $k_menu => $v_menu)
			{
			    if(strlen($v_menu['menu_link']) > 0)
			    {
			        $allowed_menu_links[] = $v_menu['menu_link'];
			    }
			}
			
			//ISPC-2745 Carmen 24.11.2020
			//get invoices from tabmenu permissions
			$client_tabmenu_perms = Doctrine_Query::create()
			->select('*')
			->from('TabMenuClient')
			->andWhere('clientid = "' . $clientid . '"');
			$client_tabmenu_permssions = $client_tabmenu_perms->fetchArray();
				
			$tab_menu_perms[] = '999999999';
			foreach($client_tabmenu_permssions as $val)
			{
				$tab_menu_perms[] = $val['menu_id'];
			}
				
			$tabmenus_cl = Doctrine_Query::create()
			->select('id, menu_link, parent_id, isdelete')
			->from('TabMenus m')
			->where('m.isdelete = "0"')
			->andWhereIn("m.id", $tab_menu_perms)
			->andWhere('m.isdelete = 0')
			//->andWhere('m.forsuperadmin = 0')
			->andWhere('m.menu_link LIKE "%invoice/%" or m.menu_link LIKE "%invoicenew/%" or m.menu_link LIKE "%internalinvoice/%"')
			->orderBy('m.sortorder ASC');
			$tabmenus_cl_arr = $tabmenus_cl->fetchArray();
			
			foreach($tabmenus_cl_arr as $k_menu => $v_menu)
			{
				if(strlen($v_menu['menu_link']) > 0)
				{
					$allowed_tabmenu_links[] = $v_menu['menu_link'];
				}
			}
			//--
					
			
			foreach($invoice_types as $k_invoice_type => $v_invoice_type)
			{
			    if(in_array($k_invoice_type, $allowed_menu_links) && in_array($v_invoice_type,$invoice_types_src))
// 			    if(in_array($k_invoice_type, $allowed_menu_links))
			    {
			        $allowed_invoice_types[$v_invoice_type] = $this->view->translate($v_invoice_type . '_label');
			    }
			    //ISPC-2745 Carmen 24.11.2020
			    if(in_array($k_invoice_type, $allowed_tabmenu_links) && in_array($v_invoice_type,$invoice_types_src))
			    // 			    if(in_array($k_invoice_type, $allowed_menu_links))
			    {
			    	$allowed_invoice_types[$v_invoice_type] = $this->view->translate($v_invoice_type . '_label');
			    }
			    //--
			}
			
			//add invoice selected in the radio of client/clientinvoicepermissions?cid=clientid
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);

			if (is_array($client_allowed_invoice)) {
				foreach ($client_allowed_invoice as $v) {
					
					if ( ! isset($allowed_invoice_types[$v])) {
						$allowed_invoice_types[$v] = $this->view->translate($v . '_label');
					}
				}
			}
		
			$this->view->all_invoices_select = $allowed_invoice_types;

				
				$all_clients = Client::get_all_clients();
				$all_clients_select[] = $this->view->translate('select_client');
				
				foreach($all_clients as $k_client => $v_client)
				{
				    if(!in_array($v_client['id'], $excluded_clients))
				    {
				        $all_clients_select[$v_client['id']] = $v_client['client_name'];
				    }
				}
				
				$this->view->all_clients_select = $all_clients_select;
				
				//load data
				$template_data = InvoiceTemplates::get_template(false, $template_id, '1');
				if($template_data)
				{
					$this->retain_values($template_data[0]);
				}
				else
				{
					$this->redirect(APP_BASE . 'invoicenew/listclientinvoicetemplates?flg=inv');
					exit;
				}
			}
			else
			{
				$this->redirect(APP_BASE . 'invoicenew/listclientinvoicetemplates?flg=inv');
				exit;
			}
		}

		
		/* ######################################################### */
		
		
		public function listinvoicetemplatesAction()
		{
			if($_REQUEST['flg'])
			{
				if($_REQUEST['flg'] == 'err')
				{
					$this->view->error_mesage = $this->view->translate('error');
				}
				else if($_REQUEST['flg'] == 'inv')
				{
					$this->view->error_mesage = $this->view->translate('invalid_template');
				}
				else if($_REQUEST['flg'] == 'suc')
				{
					$this->view->success_message = $this->view->translate('success');
				}
				else if($_REQUEST['flg'] == 'del_suc')
				{
					$this->view->delete_message = $this->view->translate('deletedsuccessfully');
				}
			}
		}

		public function fetchtemplatelistAction()
		{
			$userid = $this->userid;
			$clientid = $this->clientid;
			$user_type = $this->usertype;

			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$this->view->order = $orderarray[$_REQUEST['ord']];
			$this->view->{$_REQUEST['clm'] . "order"} = $orderarray[$_REQUEST['ord']];

			$all_clients = Client::get_all_clients();

			$client_ids[] = '99999999999';
			foreach($all_clients as $k_client => $v_client)
			{
				$client_ids[] = $v_client['id'];
			}

			$client_users_res = User::get_clients_users($client_ids);

			foreach($client_users_res as $k_user => $v_user)
			{
				$client_users[$v_user['id']] = $v_user['first_name'] . ' ' . $v_user['last_name'];
			}

			$this->view->client_users = $client_users;

			if($user_type == "CA" || $user_type == "SA")
			{
				$this->view->reveal_actions_col = '1';
			}
			else
			{
				$this->view->reveal_actions_col = '0';
			}

			$fdoc = Doctrine_Query::create();
			$fdoc->select('*');
			$fdoc->from('InvoiceTemplates');
			$fdoc->where("isdeleted = 0");
			$fdoc->andWhereIn('clientid', $client_ids);
			if(isset($_REQUEST['val']) && strlen($_REQUEST['val']) > 0)
			{
				$fdoc->andWhere("(title != '' or file_type != '')");
				$fdoc->andWhere("(title like '%" . trim($_REQUEST['val']) . "%' OR file_type like '%" . trim($_REQUEST['val']) . "%')");
			}
			$fdoc->OrderBy('clientid ASC');
			$fdoclimit = Pms_CommonData::array_stripslashes($fdoc->fetchArray());

			foreach($fdoclimit as $k_res => $v_res)
			{
//				$clients_templates[$v_res['clientid']] = $v_res;
				$clients_templates[] = $v_res;
			}

			$this->view->client_templates = $clients_templates;
			$this->view->all_clients = $all_clients;
			$this->view->{"style" . $_GET['pgno']} = "active";

//			foreach($all_clients as $k_cl => $v_cl)
//			{
//				if(!in_array($v_cl['id'], $clients_with_data))
//				{
//					unset($all_clients[$k_cl]);
//				}
//			}

			if(count($clients_templates) > '0')
			{
//				print_r($clients_templates);

				$grid = new Pms_Grid($clients_templates, 1, count($clients_templates), "invoicetemplateslist.html");
				$this->view->templates_grid = $grid->renderGrid();
				$this->view->navigation = $grid->dotnavigation("templatesnavigation.html", 5, $_REQUEST['pgno'], $limit);
			}
			else
			{
				//no items found
				$this->view->templates_grid = '<tr><td colspan="5" style="text-align:center;">' . $this->view->translate('noresultfound') . '</td></tr>';
				$this->view->navigation = '';
			}

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['templateslist'] = $this->view->render('invoicenew/fetchtemplatelist.html');

			echo json_encode($response);
			exit;
		}

		public function addinvoicetemplateAction()
		{
			$userid = $this->userid;
			$clientid = $this->clientid;

			$all_clients = Client::get_all_clients();
			$all_clients_select[] = $this->view->translate('select_client');

			//get existing clients templates - exclude them from selector
			$fdoc = Doctrine_Query::create()
				->select('*')
				->from('InvoiceTemplates')
				->where("isdeleted = 0");
			$fdoc_arr = $fdoc->fetchArray();

			//removed the exclusion when added invoice type
			//(this is no longer unique template per client but unique template per client invoice type)
//			foreach($fdoc_arr as $k_tpl => $v_tpl)
//			{
//				$excluded_clients[] = $v_tpl['clientid'];
//			}

			foreach($all_clients as $k_client => $v_client)
			{
				if(!in_array($v_client['id'], $excluded_clients))
				{
					$all_clients_select[$v_client['id']] = $v_client['client_name'];
				}
			}

			if($this->getRequest()->isPost())
			{
				$upload_form = new Application_Form_InvoiceTemplate();

				$post = $_POST;
				$post['sh_inv_template_filename'] = $_SESSION['sh_inv_template_filename'];
				$post['sh_inv_template_filetype'] = $_SESSION['sh_inv_template_filetype'];
				$post['sh_inv_template_filepath'] = $_SESSION['sh_inv_template_filepath'];

				if($upload_form->validate($post))
				{
					$upload_form->insert_template_data($post);
					$this->_redirect(APP_BASE . 'invoicenew/listinvoicetemplates?flg=suc_add');
				}
				else
				{
					$upload_form->assignErrorMessages();
					$this->retain_values($_POST);
				}

				$this->resetuploadvars();
			}

			$this->view->all_clients_select = $all_clients_select;

			$invoice_types_src = Pms_CommonData::allinvoices();

			foreach($invoice_types_src as $k_inv_type => $v_inv_type)
			{
				$invoice_types[$v_inv_type] = $this->view->translate($v_inv_type . '_label');
			}

			$this->view->all_invoices_select = $invoice_types;
		}

		public function editinvoicetemplateAction()
		{
			$userid = $this->userid;
			$clientid = $this->clientid;
			$upload_form = new Application_Form_InvoiceTemplate();


			if($_REQUEST['tid'] > '0')
			{
				$template_id = trim(rtrim($_REQUEST['tid']));

				if($this->getRequest()->isPost())
				{
					$post = $_POST;
					$post['template_id'] = $template_id;

					//used to cleanup in edit mode(file uploaded but check was deselected)
					$post['sh_inv_template_filepath'] = $_SESSION['sh_inv_template_filepath'];
					$post['sh_inv_template_filetype'] = $_SESSION['sh_inv_template_filetype'];

					//reset upload vars(if any) if change template is not checked
					if($post['change_file'] != '1')
					{
						$this->resetuploadvars();
					}

					if($upload_form->validate($post))
					{
						$upload_form->update_template_data($post);
						$this->_redirect(APP_BASE . 'invoicenew/listinvoicetemplates?flg=suc_edt');
						exit;
					}
					else
					{
						$this->retain_values($post);
					}
					$this->resetuploadvars();
				}



				$invoice_types_src = Pms_CommonData::allinvoices();

				foreach($invoice_types_src as $k_inv_type => $v_inv_type)
				{
					$invoice_types[$v_inv_type] = $this->view->translate($v_inv_type . '_label');
				}

				$this->view->all_invoices_select = $invoice_types;

				
				$all_clients = Client::get_all_clients();
				$all_clients_select[] = $this->view->translate('select_client');
				
				foreach($all_clients as $k_client => $v_client)
				{
				    if(!in_array($v_client['id'], $excluded_clients))
				    {
				        $all_clients_select[$v_client['id']] = $v_client['client_name'];
				    }
				}
				
				$this->view->all_clients_select = $all_clients_select;
				
				//load data
				$template_data = InvoiceTemplates::get_template(false, $template_id, '1');
				if($template_data)
				{
					$this->retain_values($template_data[0]);
				}
				else
				{
					$this->redirect(APP_BASE . 'invoicenew/listinvoicetemplates?flg=inv');
					exit;
				}
			}
			else
			{
				$this->redirect(APP_BASE . 'invoicenew/listinvoicetemplates?flg=inv');
				exit;
			}
		}

		public function templateuploadAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$this->_helper->layout->setLayout('layout_ajax');

			if($_REQUEST['op'] == 'invoicenew')
			{
				$this->resetuploadvars();
			}

			$extension = explode(".", $_FILES['qqfile']['name']);

			if($_REQUEST['op'] == 'invoicenew')
			{
				$timestamp_filename = time() . "_file";
				$path = INVOICE_TEMPLATE_PATH;

				//create first directory in /public
				while(!is_dir($path))
				{
					mkdir($path);
					chmod($path, "0755");
					if($i >= 50)
					{
						exit; //failsafe
					}
					$i++;
				}
			}

			$filename = $path . "/" . trim($timestamp_filename) . '.' . $extension[count($extension) - 1];

			//file name
			$_SESSION['sh_inv_template_filename'] = trim($timestamp_filename) . '.' . $extension[count($extension) - 1];

			//file path
			$_SESSION['sh_inv_template_filepath'] = "/" . trim($timestamp_filename) . '.' . $extension[count($extension) - 1];

			//file extension
			$_SESSION['sh_inv_template_filetype'] = $extension[count($extension) - 1];
//			print_r($_FILES['qqfile']['tmp_name']);

			if(move_uploaded_file($_FILES['qqfile']['tmp_name'], $filename))
			{
				echo json_encode(array('success' => true));
				exit;
			}
		}
		
		public function remindertemplateuploadAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$this->_helper->layout->setLayout('layout_ajax');
		
			if($_REQUEST['op'] == 'remindernew')
			{
				$this->resetuploadvars();
			}
		
			$extension = explode(".", $_FILES['qqfile']['name']);
		
			if($_REQUEST['op'] == 'remindernew')
			{
				$timestamp_filename = time() . "_file";
				$path = REMINDERINVOICE_TEMPLATE_PATH;

				//create first directory in /public
				while(!is_dir($path))
				{
					mkdir($path);
					chmod($path, "0755");
					if($i >= 50)
					{
						exit; //failsafe
					}
					$i++;
					
				}
			}
			//var_dump(is_dir($path));exit;
			$filename = $path . "/" . trim($timestamp_filename) . '.' . $extension[count($extension) - 1];
		
			//file name
			$_SESSION['sh_inv_template_filename'] = trim($timestamp_filename) . '.' . $extension[count($extension) - 1];
		
			//file path
			$_SESSION['sh_inv_template_filepath'] = "/" . trim($timestamp_filename) . '.' . $extension[count($extension) - 1];
		
			//file extension
			$_SESSION['sh_inv_template_filetype'] = $extension[count($extension) - 1];
			//			print_r($_FILES['qqfile']['tmp_name']);
		
			if(move_uploaded_file($_FILES['qqfile']['tmp_name'], $filename))
			{
				echo json_encode(array('success' => true));
				exit;
			}
		}

		public function gettemplateAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$this->_helper->layout->setLayout('layout_ajax');
			$clientid = $this->clientid;

			if($_REQUEST['tid'])
			{
				$template_id = trim(rtrim($_REQUEST['tid']));
				$template_data = InvoiceTemplates::get_template(false, $template_id, '1');
				$file_check_path = INVOICE_TEMPLATE_PATH . '/' . $template_data['0']['file_path'];

				if($template_data && is_file($file_check_path))
				{
					$this->_redirect(APP_BASE . '/invoice_templates/' . $template_data['0']['file_path']);
					exit;
				}
				else
				{
					$this->_redirect(APP_BASE . "error/nofile");
				}
			}
		}
		
		public function getremindertemplateAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$this->_helper->layout->setLayout('layout_ajax');
			$clientid = $this->clientid;
			
		
			if($_REQUEST['tid'])
			{
				$template_id = trim(rtrim($_REQUEST['tid']));
				$template_data = RemindersInvoiceTemplates::get_reminders_template($clientid, $template_id, '1');
				$file_check_path = REMINDERINVOICE_TEMPLATE_PATH . '/' . $template_data['0']['file_path'];
		
				if($template_data && is_file($file_check_path))
				{
					$this->_redirect(APP_BASE . '/reminder_invoice_templates/' . $template_data['0']['file_path']);
					exit;
				}
				else
				{
					$this->_redirect(APP_BASE . "error/nofile");
				}
			}
		}

		/* PHPDOCX WORD AND PDF START */

//		$batch_printing_mode (false, generate, merge)
//
//		false (no batch)
//		generate (generates only temp docx file)
//		merge (does a merge of all files in a directory)

		private function generate_file($template_data = false, $vars = false, $export_file_type = 'docx', $batch_temp_folder = false, $batch_printing_mode = false, $batch_temp_files = false, $batch_temp_name = false)
		{
			//ISPC-2472  Ancuta- added $batch_temp_name	 12.11.2019	 
// 			die(INVOICE_TEMPLATE_PATH . '/' . $template_data['file_path']);
			$userid = $this->userid;
			$clientid = $this->clientid;
			ob_end_clean(); 
			
			if($template_data && file_exists(INVOICE_TEMPLATE_PATH . '/' . $template_data['file_path']))
			{
				$template_path = INVOICE_TEMPLATE_PATH . '/' . $template_data['file_path']; 
				$docx = new CreateDocxFromTemplate($template_path);
// 				$docx->setDefaultFont('Arial');
				if($vars)
				{
				    $client_details_vars = BriefTemplates::get_client_details($clientid);
				    $client_details_vars = (!empty($client_details_vars) ? $client_details_vars : array());
				    
				    $user_details_vars = BriefTemplates::get_user_details($userid);
				    $user_details_vars = (!empty($user_details_vars) ? $user_details_vars : array());
				    
				    $vars = array_merge($vars, $client_details_vars, $user_details_vars);
				    
				    //CUSTOM VARS
				    $vars['aktuelles_datum'] = date('d.m.Y', time());
				    
				    //ISPC-1236 - new token invoice_items_html_short, without id, SAPV_Rechnungsempfaenger for sapv subdivision addresse
				    //ISPC-2427 - new token:  internal_invoice_overall_html
					$html_tokens = array('address', 'SAPV_Rechnungsempfaenger', 'footer', 'invoice_items_html', 'invoice_items_html_short', 'benutzer_adresse', 'recipient', 'comment', 'control_sheet', 'internal_invoice_items_html', 'internal_invoice_items_html_short','internal_invoice_overall_html');

					foreach($html_tokens as $k_html => $token_html)
					{		
						
						//unset the html variable from tokens $vars to avoid errors
						if(strlen(trim(rtrim($vars[$token_html]))) > '0')
						{
							//set html options
							$html_options = array('isFile' => false, 'parseDivsAsPs' => false, 'downloadImages' => false, "strictWordStyles" => false);

							//cleanup token html entities
							$html = html_entity_decode($vars[$token_html], ENT_COMPAT, 'UTF-8');


							if($token_html == 'address' || $token_html == 'SAPV_Rechnungsempfaenger' || $token_html == 'footer' || $token_html == "recipient" || $token_html == "benutzer_adresse" || $token_html == "comment")
							{
								$type = "inline";

// 								//get token fonts only for inline tokens
// 								$docx_tmp = new CreateDocxFromTemplate($template_path);
// 								$docx_tmp->replaceVariableByHTML($token_html, $type, $html, $html_options);
// 								//$token_fonts = $docx_tmp->getTokenFont();
// 								$token_fonts = array();

								//convert inline_html_tokens to string_tokens
// 								$new_tokens[] = $token_html;

								$vars[$token_html . '_text'] = strip_tags(html_entity_decode($vars[$token_html], ENT_COMPAT, 'UTF-8'), "<br>");
								$vars[$token_html . '_text'] = str_replace(array('<br/>', '<br />', '<br>'), '\n\r', $vars[$token_html . '_text']);


								$html = ($vars[$token_html]);
								$html = utf8_decode($vars[$token_html]);// UMLAUTS FOR  ITEMS TOKEN (19.03.2018)
								$html = $vars[$token_html];// UMLAUTS ISSUE 19.11.2019 ISPC-2484 Ancuta
								if ($res = Pms_DocUtil::process_html_token($docx, $token_html, $html)) {
									$html = $res;
								}

							}
							else
							{
								$type = "block";
								
								//$html = utf8_decode($vars[$token_html]); // UMLAUTS FOR  ITEMS TOKEN
								$html = $vars[$token_html];// UMLAUTS ISSUE 19.11.2019 ISPC-2484 Ancuta
// 								$html = ($vars[$token_html]);
								
							}

							//set each token font
// 							if($type == "inline")
// 							{
// 								$css_style = array();
// 								if(strlen($token_fonts[$token_html]['font']['name']) > '0')
// 								{
// 									$css_style[] = 'font-family:' . $token_fonts[$token_html]['font']['name'];
// 								}

// 								if(strlen($token_fonts[$token_html]['font']['size']) > '0')
// 								{
// 									$css_style[] = 'font-size:' . $token_fonts[$token_html]['font']['size'] . 'pt';
// 								}

// 								if(strlen($token_fonts[$token_html]['font']['color']) > '0')
// 								{
// 									$css_style[] = 'color:#' . $token_fonts[$token_html]['font']['color'];
// 								}

// 								if($token_fonts[$token_html]['font']['isbold'] == '1')
// 								{
// 									$css_style[] = 'font-weight:bold';
// 								}

// 								if($token_fonts[$token_html]['font']['isitalic'] == '1')
// 								{
// 									$css_style[] = 'font-style:italic';
// 								}

// 								if($token_fonts[$token_html]['font']['isunderline'] == "1")
// 								{
// 									$css_style[] = 'text-decoration:underline';
// 								}

// 								//dummy css control
// 								if(!empty($css_style))
// 								{
// 									$css_style[] = '';
// 								}

// 								$html = html_entity_decode('<p>' . strip_tags($vars[$token_html], '<br>') . '</p>', ENT_COMPAT, 'UTF-8');
// 							}

							$docx->replaceVariableByHTML($token_html, $type, $html, $html_options);
							unset($vars[$token_html]);
						}
						else
						{
							$vars[$token_html] = '';
							$vars[$token_html . '_text'] = '';
						}
					}

					//parse header
					$docx->replaceVariableByText($vars, array('parseLineBreaks' => true, 'target' => 'header'));

					//parse body
					$options = array('parseLineBreaks' => true);
					$docx->replaceVariableByText($vars, $options);

					//parse footer
					$docx->replaceVariableByText($vars, array('parseLineBreaks' => true, 'target' => 'footer'));
				}
				
				if(!is_dir(PDFDOCX_PATH))
				{
					while(!is_dir(PDFDOCX_PATH))
					{
						mkdir(PDFDOCX_PATH);
						if($i >= 50)
						{
							exit; //failsafe
						}
						$i++;
					}
				}

				if(!is_dir(PDFDOCX_PATH . '/' . $clientid))
				{
					while(!is_dir(PDFDOCX_PATH . '/' . $clientid))
					{
						mkdir(PDFDOCX_PATH . '/' . $clientid);
						if($i >= 50)
						{
							exit; //failsafe
						}
						$i++;
					}
				}

				if($vars)
				{
					$suffix = $vars['prefix'] . $vars['invoice_number'];
				}
				else
				{
					$suffix = '';
				}
				
				$suffix =  Pms_CommonData::filter_filename($suffix, true);////ANCUTA HOTFIX 26.03.2020 - for mess done by Carmen in //TODO-2891
				$filename = PDFDOCX_PATH . '/' . $clientid . '/invoice_' . $suffix;

				//rewrite $filename on batch job in another location
				//check and create temp folder used in batch
				if($batch_printing_mode && ($batch_printing_mode == 'merge' || $batch_printing_mode == 'merge_pdfs'))
				{
					if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
					{
						while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
						{
							mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
							if($i >= 50)
							{
								exit; //failsafe
							}
							$i++;
						}
					}

					$filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/invoice_' . $suffix;
					$merged_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/merged_invoices' . $suffix . '.docx';
					$merged_other_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/merged_invoices_' . $suffix . '.' . $export_file_type;
				}
				else if($batch_printing_mode && $batch_printing_mode == 'merge_pdfs_multiple')
				{
					if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
					{
						while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
						{
							mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
							if($i >= 50)
							{
								exit; //failsafe
							}
							$i++;
						}
					}

					$filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/invoice_' . $suffix;
					$merged_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/merged_invoices' . $suffix . '.docx';
					$merged_other_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/final_merged_invoices_' . $suffix . '.' . $export_file_type;
				}
				else if($batch_printing_mode == 'generate_pdf')
				{
					if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
					{
						while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
						{
							mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
							if($i >= 50)
							{
								exit; //failsafe
							}
							$i++;
						}
					}

					$filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/invoice_' . $suffix;
// 					$other_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/invoice_sapv_bw_' . $suffix . '.' . $export_file_type;
					$other_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/invoice_' . $suffix . '.' . $export_file_type;
				}


//				rewrite file extension
				if($_REQUEST['type'] == "pdf")
				{
					$export_file_type = $_REQUEST['type'];
				}

				//rewrite file extension for local use only!
// 				if($_SERVER['SERVER_ADDR'] == "10.0.0.15")
// 				{
// 					$export_file_type = 'docx';
// 				}
				//batch printing methods
				//batch printing only docx(in a temp file) and then merge all in one file docx and then pdf
				if($batch_printing_mode && $batch_printing_mode == 'generate')
				{
					//make sure export file type is set to docx
					if($export_file_type == 'docx')
					{
						$docx->createDocx($filename);
						return $filename . '.' . $export_file_type;
					}
					
				}
				else if($batch_printing_mode && $batch_printing_mode == 'generate_pdf')
				{
					//create pdf but dont download it
					$docx->createDocx($filename);

					//$docx->enableCompatibilityMode();  // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
					$docx->transformDocument($filename . '.docx', $other_filename);

					return $other_filename;
				}
				else if($batch_printing_mode && $batch_printing_mode == 'merge')
				{
					//merge all files existing in $batch_temp_files!
					$merge = new MultiMerge();
					$merge_options = array(
						'mergeType' => '0',
						'numbering' => 'continue',
					);

					$first_shit = $batch_temp_files[0];
					unset($batch_temp_files[0]);
					$merge_process = $merge->mergeDocx($first_shit, $batch_temp_files, $merged_filename, $merge_options);

					array_map("unlink" , $batch_temp_files);
					@unlink( $first_shit );
					
					if(file_exists($merged_filename))
					{
						$docx = new CreateDocxFromTemplate($merged_filename);
						//$docx->enableCompatibilityMode();  // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
						$docx->transformDocument($merged_filename, $merged_other_filename);

						$this->system_file_upload($clientid, $merged_other_filename, true);
						
						//stop unlinking files
//						unlink($merged_filename);
						ob_end_clean();
						header("Expires: Tue, 03 Jul 2001 06:00:00 GMT");
						header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
						header("Cache-Control: no-store, no-cache, must-revalidate");
						header("Cache-Control: post-check=0, pre-check=0", false);
						header("Pragma: no-cache");

						switch($export_file_type)
						{
							case 'pdf':
								header('Content-type: application/pdf');
								break;
							case 'doc':
								header('Content-type: application/vnd.ms-word');
								break;
							case 'rtf':
								header("Content-type: application/rtf");
								break;
							case 'odt':
								header('Content-type: application/vnd.oasis.opendocument.text');
								break;
							default:
								exit;
								break;
						}

						//ISPC-2472  Ancuta- added $batch_temp_name	 12.11.2019	 
						if($batch_temp_name){
                            header('Content-Disposition: attachment; Filename="' . $batch_temp_name . '.' . $export_file_type . '"');
						} else{
    						header('Content-Disposition: attachment; Filename="merged_invoice' . $suffix . '.' . $export_file_type . '"');
						}
						readfile($merged_other_filename);
						@unlink($merged_other_filename);
						@unlink($merged_filename);
						exit;
					}
				}
				else if($batch_printing_mode && $batch_printing_mode == 'merge_pdfs_multiple')
				{
					$merge = new MultiMerge();
					$merge_process = $merge->mergePdf($batch_temp_files, $merged_other_filename);

					return $merged_other_filename;
				}
				else if($batch_printing_mode && $batch_printing_mode == 'merge_pdfs')
				{
					//merge all files existing in $batch_temp_files!
					$merge = new MultiMerge();
					$merge_process = $merge->mergePdf($batch_temp_files, $merged_other_filename);

					if(file_exists($merged_other_filename))
					{
						$this->system_file_upload($clientid, $merged_other_filename, true);
						//stop unlinking files
//						unlink($merged_filename);
						ob_end_clean();
						header("Expires: Tue, 03 Jul 2001 06:00:00 GMT");
						header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
						header("Cache-Control: no-store, no-cache, must-revalidate");
						header("Cache-Control: post-check=0, pre-check=0", false);
						header("Pragma: no-cache");

						switch($export_file_type)
						{
							case 'pdf':
								header('Content-type: application/pdf');
								break;
							case 'doc':
								header('Content-type: application/vnd.ms-word');
								break;
							case 'rtf':
								header("Content-type: application/rtf");
								break;
							case 'odt':
								header('Content-type: application/vnd.oasis.opendocument.text');
								break;
							default:
								exit;
								break;
						}
						//ISPC-2472  Ancuta- added $batch_temp_name	 12.11.2019
						if($batch_temp_name){
    						header('Content-Disposition: attachment; Filename="' . $batch_temp_name . '.' . $export_file_type . '"');
						} else{
    						header('Content-Disposition: attachment; Filename="merged_invoice' . $suffix . '.' . $export_file_type . '"');
						}
						readfile($merged_other_filename);
						unlink($merged_other_filename);
						exit;
					}
					exit;
				}
				else if($export_file_type == 'docx')
				{
					$docx->createDocxAndDownload($filename);
//					unlink($filename . '.docx');
					exit;
				}
				else
				{
					$docx->createDocx($filename);
					//$other_filename = PDFDOCX_PATH . '/' . $clientid . '/invoice_final_' . $suffix . '.' . $export_file_type; // ISPC-2472 Ancuta 07.11.2019
					$other_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $suffix . '.' . $export_file_type;
					//$docx->enableCompatibilityMode();  // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
					$docx->transformDocument($filename . '.docx', $other_filename);

					$this->system_file_upload($clientid, $other_filename , true);
//					unlink($filename . '.docx');

					header("Expires: Tue, 03 Jul 2001 06:00:00 GMT");
					header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
					header("Cache-Control: no-store, no-cache, must-revalidate");
					header("Cache-Control: post-check=0, pre-check=0", false);
					header("Pragma: no-cache");

					switch($export_file_type)
					{
						case 'pdf':
							header('Content-type: application/pdf');
							break;
						case 'doc':
							header('Content-type: application/vnd.ms-word');
							break;
						case 'rtf':
							header("Content-type: application/rtf");
							break;
						case 'odt':
							header('Content-type: application/vnd.oasis.opendocument.text');
							break;
						default:
							exit;
							break;
					}
					//header('Content-Disposition: attachment; Filename="invoice_final_' . $suffix . '.' . $export_file_type . '"');// ISPC-2472 Ancuta 07.11.2019
					header('Content-Disposition: attachment; Filename="' . $suffix . '.' . $export_file_type . '"');
					readfile($other_filename);
					unlink($other_filename);
					exit;
				}
			}
			else
			{
				$this->redirect(APP_BASE . 'invoicenew/shinvoicepatientlist?list=' . $_REQUEST['list'] . '&flg=notemplate');
				exit;
				
				return false;
			}
		}
		//private function generate_file($template_data = false, $vars = false, $export_file_type = 'docx', $batch_temp_folder = false, $batch_printing_mode = false, $batch_temp_files = false, $batch_temp_name = false)
		public function print_job_generate_and_save_file($print_params)
		{
		    $template_data = isset($print_params['template_data']) ? $print_params['template_data'] : false;
		    $vars =  isset($print_params['vars']) ? $print_params['vars'] : false;
		    $export_file_type = isset($print_params['export_file_type']) ? $print_params['export_file_type'] : 'docx';
		    $batch_temp_folder = isset($print_params['batch_temp_folder']) ? $print_params['batch_temp_folder'] : false;
		    $batch_printing_mode = isset($print_params['batch_printing_mode']) ? $print_params['batch_printing_mode'] : false;
		    $batch_temp_files = isset($print_params['batch_temp_files']) ? $print_params['batch_temp_files'] : false;
		    $batch_temp_name = isset($print_params['batch_temp_name']) ? $print_params['batch_temp_name'] : false;
		    
		    $userid = isset($print_params['userid']) ? $print_params['userid'] : $this->userid;
		    $clientid = isset($print_params['clientid']) ? $print_params['clientid'] : $this->clientid;
		    
			ob_end_clean(); 
			
			if($template_data && file_exists(INVOICE_TEMPLATE_PATH . '/' . $template_data['file_path']))
			{
				$template_path = INVOICE_TEMPLATE_PATH . '/' . $template_data['file_path']; 
				$docx = new CreateDocxFromTemplate($template_path);
				if($vars)
				{
				    $client_details_vars = BriefTemplates::get_client_details($clientid);
				    $client_details_vars = (!empty($client_details_vars) ? $client_details_vars : array());
				    
				    $user_details_vars = BriefTemplates::get_user_details($userid);
				    $user_details_vars = (!empty($user_details_vars) ? $user_details_vars : array());
				    
				    $vars = array_merge($vars, $client_details_vars, $user_details_vars);
				    
				    //CUSTOM VARS
				    $vars['aktuelles_datum'] = date('d.m.Y', time());
				    
					$html_tokens = array('address', 'SAPV_Rechnungsempfaenger', 'footer', 'invoice_items_html', 'invoice_items_html_short', 'benutzer_adresse', 'recipient', 'comment', 'control_sheet', 'internal_invoice_items_html', 'internal_invoice_items_html_short','internal_invoice_overall_html');

					foreach($html_tokens as $k_html => $token_html)
					{
						
						//unset the html variable from tokens $vars to avoid errors
						if(strlen(trim(rtrim($vars[$token_html]))) > '0')
						{
							//set html options
							$html_options = array('isFile' => false, 'parseDivsAsPs' => false, 'downloadImages' => false, "strictWordStyles" => false);

							//cleanup token html entities
							$html = html_entity_decode($vars[$token_html], ENT_COMPAT, 'UTF-8');


							if($token_html == 'address' || $token_html == 'SAPV_Rechnungsempfaenger' || $token_html == 'footer' || $token_html == "recipient" || $token_html == "benutzer_adresse" || $token_html == "comment")
							{
								$type = "inline";

								$vars[$token_html . '_text'] = strip_tags(html_entity_decode($vars[$token_html], ENT_COMPAT, 'UTF-8'), "<br>");
								$vars[$token_html . '_text'] = str_replace(array('<br/>', '<br />', '<br>'), '\n\r', $vars[$token_html . '_text']);


								$html = ($vars[$token_html]);
								$html = utf8_decode($vars[$token_html]);// UMLAUTS FOR  ITEMS TOKEN (19.03.2018)
								$html = $vars[$token_html];// UMLAUTS ISSUE 19.11.2019 ISPC-2484 Ancuta
								if ($res = Pms_DocUtil::process_html_token($docx, $token_html, $html)) {
									$html = $res;
								}

							}
							else
							{
								$type = "block";
								$html = $vars[$token_html];// UMLAUTS ISSUE 19.11.2019 ISPC-2484 Ancuta
							}

							$docx->replaceVariableByHTML($token_html, $type, $html, $html_options);
							unset($vars[$token_html]);
						}
						else
						{
							$vars[$token_html] = '';
							$vars[$token_html . '_text'] = '';
						}
					}

					//parse header
					$docx->replaceVariableByText($vars, array('parseLineBreaks' => true, 'target' => 'header'));

					//parse body
					$options = array('parseLineBreaks' => true);
					$docx->replaceVariableByText($vars, $options);

					//parse footer
					$docx->replaceVariableByText($vars, array('parseLineBreaks' => true, 'target' => 'footer'));
				}
				
				 
				
				if(!is_dir(PDFDOCX_PATH))
				{
					while(!is_dir(PDFDOCX_PATH))
					{
						mkdir(PDFDOCX_PATH);
						if($i >= 50)
						{
							exit; //failsafe
						}
						$i++;
					}
				}

				if(!is_dir(PDFDOCX_PATH . '/' . $clientid))
				{
					while(!is_dir(PDFDOCX_PATH . '/' . $clientid))
					{
						mkdir(PDFDOCX_PATH . '/' . $clientid);
						if($i >= 50)
						{
							exit; //failsafe
						}
						$i++;
					}
				}

				if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
				{
				    while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
				    {
				        mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
				        if($i >= 50)
				        {
				            exit; //failsafe
				        }
				        $i++;
				    }
				}

				
				if($vars)
				{
					$suffix = $vars['unique_id'];
				}
				else
				{
					$suffix = '';
				}
				$suffix =  Pms_CommonData::filter_filename($suffix, true);
				
				$filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/invoice_' . $suffix;
				$other_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/pdf_invoice_' . $suffix . '.' . $export_file_type;
				
				if($batch_temp_files && $batch_printing_mode == 'merge_pdfs_multiple')
				{
				    $merge = new MultiMerge();
				    $merge_process = $merge->mergePdf($batch_temp_files, $other_filename);
				    
				    return $other_filename;
				}
				else
				{
				    
				    $docx->createDocx($filename);
    				$docx->transformDocument($filename . '.docx', $other_filename);
//     				$this->system_file_upload($clientid, $other_filename , true);
    				unlink($filename . '.docx');
    				
    				
    				return $other_filename;
    			 
				}
			}
			else
			{
				return false;
			}
		}
 
		
		private function generate_reminder_file($template_data = false, $vars = false, $export_file_type = 'docx', $batch_temp_folder = false, $batch_printing_mode = false, $batch_temp_files = false)
		{
// 			die(INVOICE_TEMPLATE_PATH . '/' . $template_data['file_path']);
			$userid = $this->userid;
			$clientid = $this->clientid;
			ob_end_clean();
			
			if($template_data && file_exists(REMINDERINVOICE_TEMPLATE_PATH . '/' . $template_data['file_path']))
			{
			
				$template_path = REMINDERINVOICE_TEMPLATE_PATH . '/' . $template_data['file_path'];
				$docx = new CreateDocxFromTemplate($template_path);
// 				$docx->setDefaultFont('Arial');
				if($vars)
				{
					$client_details_vars = BriefTemplates::get_client_details($clientid);
					$client_details_vars = (!empty($client_details_vars) ? $client_details_vars : array());
		
					$user_details_vars = BriefTemplates::get_user_details($userid);
					$user_details_vars = (!empty($user_details_vars) ? $user_details_vars : array());
		
					$vars = array_merge($vars, $client_details_vars, $user_details_vars);
		
					//CUSTOM VARS
					$vars['aktuelles_datum'] = date('d.m.Y', time());
		
					//ISPC-1236 - new token invoice_items_html_short, without id, SAPV_Rechnungsempfaenger for sapv subdivision addresse
					//ISPC-2427 - new token:  internal_invoice_overall_html
					$html_tokens = array('address', 'SAPV_Rechnungsempfaenger', 'footer', 'invoice_items_html', 'invoice_items_html_short', 'benutzer_adresse', 'recipient', 'comment', 'control_sheet', 'internal_invoice_items_html','internal_invoice_overall_html');
		
					foreach($html_tokens as $k_html => $token_html)
					{
		
						//unset the html variable from tokens $vars to avoid errors
						if(strlen(trim(rtrim($vars[$token_html]))) > '0')
						{
							//set html options
							$html_options = array('isFile' => false, 'parseDivsAsPs' => false, 'downloadImages' => false, "strictWordStyles" => false);
		
							//cleanup token html entities
							$html = html_entity_decode($vars[$token_html], ENT_COMPAT, 'UTF-8');
		
		
							if($token_html == 'address' || $token_html == 'SAPV_Rechnungsempfaenger' || $token_html == 'footer' || $token_html == "recipient" || $token_html == "benutzer_adresse" || $token_html == "comment")
							{
								$type = "inline";
		
// 								//get token fonts only for inline tokens
// 								$docx_tmp = new CreateDocxFromTemplate($template_path);
// 								$docx_tmp->replaceVariableByHTML($token_html, $type, $html, $html_options);
// 								//$token_fonts = $docx_tmp->getTokenFont();
// 								$token_fonts = array();
		
								//convert inline_html_tokens to string_tokens
// 								$new_tokens[] = $token_html;
		
								$vars[$token_html . '_text'] = strip_tags(html_entity_decode($vars[$token_html], ENT_COMPAT, 'UTF-8'), "<br>");
								$vars[$token_html . '_text'] = str_replace(array('<br/>', '<br />', '<br>'), '\n\r', $vars[$token_html . '_text']);
		
		
								//$html = ($vars[$token_html]);
								//$html = utf8_decode($vars[$token_html]);// UMLAUTS FOR  ITEMS TOKEN (19.03.2018)
								$html = $vars[$token_html]; //TODO-2664
								if ($res = Pms_DocUtil::process_html_token($docx, $token_html, $html)) {
									$html = $res;
								}
		
							}
							else
							{
								$type = "block";
		
								//$html = utf8_decode($vars[$token_html]); // UMLAUTS FOR  ITEMS TOKEN
								$html = $vars[$token_html]; //TODO-2664
// 								$html = ($vars[$token_html]);
		
							}
		
//set each token font
// 							if($type == "inline")
// 							{
// 								$css_style = array();
// 								if(strlen($token_fonts[$token_html]['font']['name']) > '0')
// 								{
// 									$css_style[] = 'font-family:' . $token_fonts[$token_html]['font']['name'];
// 								}

// 								if(strlen($token_fonts[$token_html]['font']['size']) > '0')
// 								{
// 									$css_style[] = 'font-size:' . $token_fonts[$token_html]['font']['size'] . 'pt';
// 								}

// 								if(strlen($token_fonts[$token_html]['font']['color']) > '0')
// 								{
// 									$css_style[] = 'color:#' . $token_fonts[$token_html]['font']['color'];
// 								}

// 								if($token_fonts[$token_html]['font']['isbold'] == '1')
// 								{
// 									$css_style[] = 'font-weight:bold';
// 								}

// 								if($token_fonts[$token_html]['font']['isitalic'] == '1')
// 								{
// 									$css_style[] = 'font-style:italic';
// 								}

// 								if($token_fonts[$token_html]['font']['isunderline'] == "1")
// 								{
// 									$css_style[] = 'text-decoration:underline';
// 								}

// 								//dummy css control
// 								if(!empty($css_style))
// 								{
// 									$css_style[] = '';
// 								}

// 								$html = html_entity_decode('<p>' . strip_tags($vars[$token_html], '<br>') . '</p>', ENT_COMPAT, 'UTF-8');
// 							}

							$docx->replaceVariableByHTML($token_html, $type, $html, $html_options);
							unset($vars[$token_html]);
						}
						else
						{
							$vars[$token_html] = '';
							$vars[$token_html . '_text'] = '';
						}
					}
		
					//parse header
					$docx->replaceVariableByText($vars, array('parseLineBreaks' => true, 'target' => 'header'));

					//parse body
					$options = array('parseLineBreaks' => true);
					$docx->replaceVariableByText($vars, $options);

					//parse footer
					$docx->replaceVariableByText($vars, array('parseLineBreaks' => true, 'target' => 'footer'));
				}

				if(!is_dir(PDFDOCX_PATH))
				{
					while(!is_dir(PDFDOCX_PATH))
					{
						mkdir(PDFDOCX_PATH);
						if($i >= 50)
						{
							//exit; //failsafe
							break;
						}
						$i++;
					}
				}

				if(!is_dir(PDFDOCX_PATH . '/' . $clientid))
				{
					while(!is_dir(PDFDOCX_PATH . '/' . $clientid))
					{
						mkdir(PDFDOCX_PATH . '/' . $clientid);
						if($i >= 50)
						{
							//exit; //failsafe
							break;
						}
						$i++;
					}
				}
				if($vars)
				{
					$suffix = $vars['prefix'] . $vars['invoice_number'];
				}
				else
				{
					$suffix = '';
				}
				
				$suffix = Pms_CommonData::filter_filename($suffix, true); //ANCUTA HOTFIX 26.03.2020 - for mess done by Carmen in //TODO-2891 

				$filename = PDFDOCX_PATH . '/' . $clientid . '/reminderinvoice_' . $suffix;
				//$filename = Pms_CommonData::filter_filename($filename, true); //TODO-2891 Carmen 12.02.2020 [Reminder]
				
				//rewrite $filename on batch job in another location
				//check and create temp folder used in batch
				

				if($batch_printing_mode && ($batch_printing_mode == 'merge' || $batch_printing_mode == 'merge_pdfs'))
				{
					if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
					{
						while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
						{
							mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
							if($i >= 50)
							{
								exit; //failsafe
							}
							$i++;
						}
					}

					$filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/reminderinvoice_' . $suffix;
					//$filename = Pms_CommonData::filter_filename($filename, true); //TODO-2891 Carmen 12.02.2020 [Reminder]
					$merged_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/merged_reminderinvoices' . $suffix . '.docx';
					//$merged_filename = Pms_CommonData::filter_filename($merged_filename, true); //TODO-2891 Carmen 12.02.2020 [Reminder]
					$merged_other_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/merged_reminderinvoices_' . $suffix . '.' . $export_file_type;
					//$merged_other_filename = Pms_CommonData::filter_filename($merged_other_filename, true); //TODO-2891 Carmen 12.02.2020
				}
				else if($batch_printing_mode && $batch_printing_mode == 'merge_pdfs_multiple')
				{
					if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
					{
						while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
						{
							mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
							if($i >= 50)
							{
								exit; //failsafe
							}
							$i++;
						}
					}

					$filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/reminderinvoice_' . $suffix;
					//$filename = Pms_CommonData::filter_filename($filename, true); //TODO-2891 Carmen 12.02.2020
					$merged_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/merged_reminderinvoices' . $suffix . '.docx';
					//$merged_filename = Pms_CommonData::filter_filename($merged_filename, true); //TODO-2891 Carmen 12.02.2020
					$merged_other_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/final_merged_reminderinvoices_' . $suffix . '.' . $export_file_type;
					//$merged_other_filename = Pms_CommonData::filter_filename($merged_other_filename, true); //TODO-2891 Carmen 12.02.2020
				}
				else if($batch_printing_mode == 'generate_pdf')
				{
					if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
					{
						while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
						{
							
							mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
							if($i >= 50)
							{
								exit; //failsafe
							}
							$i++;
						}
					}

					$filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/reminderinvoice_' . $suffix;
					//$filename = Pms_CommonData::filter_filename($filename, true); //TODO-2891 Carmen 12.02.2020
					// 					$other_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/invoice_sapv_bw_' . $suffix . '.' . $export_file_type;
					$other_filename = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/reminderinvoice_' . $suffix . '.' . $export_file_type;
					//$other_filename = Pms_CommonData::filter_filename($other_filename, true); //TODO-2891 Carmen 12.02.2020
				}
				//				rewrite file extension
				if($_REQUEST['type'] == "pdf")
				{
					$export_file_type = $_REQUEST['type'];
				}

				//rewrite file extension for local use only!
// 				if($_SERVER['SERVER_ADDR'] == "10.0.0.15")
// 				{
// 					$export_file_type = 'docx';
// 				}
				//batch printing methods
				//batch printing only docx(in a temp file) and then merge all in one file docx and then pdf
				



				if($batch_printing_mode && $batch_printing_mode == 'generate')
				{
					//make sure export file type is set to docx
					if($export_file_type == 'docx')
					{
						$docx->createDocx($filename);
						return $filename . '.' . $export_file_type;
					}
						
				}
				else if($batch_printing_mode && $batch_printing_mode == 'generate_pdf')
				{
					//create pdf but dont download it
					$docx->createDocx($filename);

					//$docx->enableCompatibilityMode();  // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
					$docx->transformDocument($filename . '.docx', $other_filename);
					return $other_filename;
				}
				else if($batch_printing_mode && $batch_printing_mode == 'merge')
				{
					//merge all files existing in $batch_temp_files!
					$merge = new MultiMerge();
					$merge_options = array(
							'mergeType' => '0',
							'numbering' => 'continue',
					);

					$first_shit = $batch_temp_files[0];
					unset($batch_temp_files[0]);
					$merge_process = $merge->mergeDocx($first_shit, $batch_temp_files, $merged_filename, $merge_options);

					array_map("unlink" , $batch_temp_files);
					@unlink( $first_shit );
						
					if(file_exists($merged_filename))
					{

						$docx = new CreateDocxFromTemplate($merged_filename);
						//$docx->enableCompatibilityMode();  // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
						$docx->transformDocument($merged_filename, $merged_other_filename);

						$this->system_file_upload($clientid, $merged_other_filename, true);
						//stop unlinking files
//						unlink($merged_filename);
						ob_end_clean();
						header("Expires: Tue, 03 Jul 2001 06:00:00 GMT");
						header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
						header("Cache-Control: no-store, no-cache, must-revalidate");
						header("Cache-Control: post-check=0, pre-check=0", false);
						header("Pragma: no-cache");

						switch($export_file_type)
						{
							case 'pdf':
								header('Content-type: application/pdf');
								break;
							case 'doc':
							case 'docx':
								header('Content-type: application/vnd.ms-word');
								break;
							case 'rtf':
								header("Content-type: application/rtf");
								break;
							case 'odt':
								header('Content-type: application/vnd.oasis.opendocument.text');
								break;
							default:
								exit;
								break;
						}
						header('Content-Disposition: attachment; Filename="merged_reminderinvoice_' . $suffix . '.' . $export_file_type . '"');
						readfile($merged_other_filename);
						@unlink($merged_other_filename);
						@unlink($merged_filename);
						exit;
					}
				}
				else if($batch_printing_mode && $batch_printing_mode == 'merge_pdfs_multiple')
				{
					$merge = new MultiMerge();
					$merge_process = $merge->mergePdf($batch_temp_files, $merged_other_filename);

					return $merged_other_filename;
				}
				else if($batch_printing_mode && $batch_printing_mode == 'merge_pdfs')
				{
				    
				    
				    
				    
					//merge all files existing in $batch_temp_files!
					$merge = new MultiMerge();
					$merge_process = $merge->mergePdf($batch_temp_files, $merged_other_filename);
				    
					if(file_exists($merged_other_filename))
					{
						$this->system_file_upload($clientid, $merged_other_filename, true);
						//stop unlinking files
//						unlink($merged_filename);
						ob_end_clean();
						header("Expires: Tue, 03 Jul 2001 06:00:00 GMT");
						header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
						header("Cache-Control: no-store, no-cache, must-revalidate");
						header("Cache-Control: post-check=0, pre-check=0", false);
						header("Pragma: no-cache");

						switch($export_file_type)
						{
							case 'pdf':
								header('Content-type: application/pdf');
								break;
							case 'doc':
								header('Content-type: application/vnd.ms-word');
								break;
							case 'rtf':
								header("Content-type: application/rtf");
								break;
							case 'odt':
								header('Content-type: application/vnd.oasis.opendocument.text');
								break;
							default:
								exit;
								break;
						}
						header('Content-Disposition: attachment; Filename="merged_reminderinvoice_' . $suffix . '.' . $export_file_type . '"');
						readfile($merged_other_filename);
						unlink($merged_other_filename);
						exit;
					}
					exit;
				}
				else if($export_file_type == 'docx')
				{
					$docx->createDocxAndDownload($filename);
//					unlink($filename . '.docx');
					exit;
				}
				else
				{
					$docx->createDocx($filename);
					$other_filename = PDFDOCX_PATH . '/' . $clientid . '/reminderinvoice_final_' . $suffix . '.' . $export_file_type;
					//$other_filename = Pms_CommonData::filter_filename($other_filename, true); //TODO-2891 Carmen 12.02.2020
					//$docx->enableCompatibilityMode();  // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
					$docx->transformDocument($filename . '.docx', $other_filename);

					$this->system_file_upload($clientid, $other_filename , true);
//					unlink($filename . '.docx');

					header("Expires: Tue, 03 Jul 2001 06:00:00 GMT");
					header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
					header("Cache-Control: no-store, no-cache, must-revalidate");
					header("Cache-Control: post-check=0, pre-check=0", false);
					header("Pragma: no-cache");

					switch($export_file_type)
					{
						case 'pdf':
							header('Content-type: application/pdf');
							break;
						case 'doc':
							header('Content-type: application/vnd.ms-word');
							break;
						case 'rtf':
							header("Content-type: application/rtf");
							break;
						case 'odt':
							header('Content-type: application/vnd.oasis.opendocument.text');
							break;
						default:
							exit;
							break;
					}
					header('Content-Disposition: attachment; Filename="reminderinvoice__final_' . $suffix . '.' . $export_file_type . '"');
					readfile($other_filename);
					unlink($other_filename);
					exit;
				}
			}
			else
			{
// 				$this->redirect(APP_BASE . 'invoicenew/shinvoicepatientlist?list=' . $_REQUEST['list'] . '&flg=notemplate');
				exit;

				return false;
			}
		}
		
		private function system_file_upload($clientid, $source_path = false , $foster_file = false)
		{	//die($source_path . " " . __FUNCTION__ );
			if($source_path)
			{
				if ($foster_file == true) {
					$legacy_path = strtolower(__CLASS__);					
				} else {
					$legacy_path = "uploads";
				}
				
				//prepare unique upload folder
//				$tmpstmp = $this->uniqfolder(PDF_PATH);
				$tmpstmp = Pms_CommonData::uniqfolder(PDF_PATH,$date_prefix);

				//get upload folder name
				$tmpstmp_filename = basename($tmpstmp);

				//get original file name
				$file_name_real = basename($source_path);
				$source_path_info = pathinfo($source_path);


				//construct upload folder, file destination
				$destination_path = PDF_PATH . "/" . $tmpstmp . '/' . $source_path_info['filename'] . '.' . $source_path_info['extension'];
				$db_filename_destination = $tmpstmp . '/' . $source_path_info['filename'] . '.' . $source_path_info['extension'];

				//do a copy (from place where the pdf is generated to upload folder
				copy($source_path, $destination_path);

				//prepare cmd for folder zip
// 				$cmd = "zip -9 -r -P " . $this->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;


				//execute - zip the folder
// 				exec($cmd);

				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				
				$upload = Pms_CommonData :: ftp_put_queue($destination_path ,  $legacy_path, $is_zipped = NULL, $foster_file );
				
				/*
				//connect
				$con_id = Pms_FtpFileupload::ftpconnect();

				if($con_id)
				{
					//do upload
					$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
					//close connection
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/

				return $upload;
			}
		}

		/* PHPDOCX WORD AND PDF END */

		private function resetuploadvars()
		{
			//clear failed/other upload session vars
			$_SESSION['sh_inv_template_filename'] = '';
			unset($_SESSION['sh_inv_template_filename']);

			$_SESSION['sh_inv_template_filepath'] = '';
			unset($_SESSION['sh_inv_template_filepath']);

			$_SESSION['sh_inv_template_filetype'] = '';
			unset($_SESSION['sh_inv_template_filetype']);
		}

		private function retain_values($values, $prefix = '')
		{
			foreach($values as $key => $val)
			{
				if(!is_array($val))
				{
					$this->view->$key = $val;
				}
				else
				{
					foreach($val as $k_val => $v_val)
					{
						if(!is_array($v_val))
						{
							$this->view->{$prefix . $key . $k_val} = $v_val;
						}
					}
				}
			}
		}

		public function newinvoicepatientlistAction()
		{

			if($_REQUEST['flg'] == "notemplate")
			{
				$this->view->error_no_template = $this->view->translate('client_has_no_template');
			}

			$clientid = $this->clientid;
			$userid = $this->userid;
			$patientmaster = new PatientMaster();

			//get allowed client invoices
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
			$this->view->allowed_invoice = $client_allowed_invoice[0];

			if(!$client_allowed_invoice[0])
			{
// 				echo '<div id="errorPrevilege_ErrorMsg" align="center" class="err"><b>There is no client invoice type set</b></div>';
				// TODO-1310
				echo '<div id="errorPrevilege_ErrorMsg" align="center" class="err"><b>'.$this->view->translate('There is no client invoice type set').'</b></div>';
				return;
			}

			//TODO-2788 Ancuta 06.01.2020
			if($client_allowed_invoice[0] == 'hospiz_invoice')
			{
			    echo '<div id="errorPrevilege_ErrorMsg" align="center" class="err"><b>'.$this->view->translate('Client invoice type -Hospz register- does not use this page, invoices are generated from patient menu').'</b></div>';
			    return;
			}
			//--
			
			$invoice_links = Pms_CommonData::invoices_links();
			$this->view->invoice_links = $invoice_links;

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$this->view->selected_month = $selected_month;
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			$month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);

			array_walk($month_days_arr, function(&$value) {
				$value = date("d.m.Y", strtotime($value));
			});
			$months_details[$selected_month]['days'] = $month_days_arr;
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_rehnung_patients';
			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			
			// TODO-1310
			if($this->getRequest()->isPost() && !empty($client_allowed_invoice[0]))
			{			
				if($_POST['selected_patient'])
				{
					$epids_ipids = Pms_CommonData::get_multiple_ipids($_POST['selected_patient']);

					//loop throuhg posted patients (0 = no sapv period, >0 = sapv period id)
					if($_POST['selected_patient_period'])
					{
						$selected_sapv_falls_ipids[] = '99999999999';
						$selected_fall_ipids[] = '99999999999';

						foreach($_POST['selected_patient'] as $k_sel_pat => $v_sel_pat)
						{
						    //ISPC-2480 Lore 29.11.2019
						    // verify if have already invoice for that period ONLY for sh_invoice ???
						    $have_inv_arr = array();
						    
						    if ($client_allowed_invoice[0] == 'sh_invoice'){
						        
						        $adm_id = substr($_POST['selected_patient_period'][$v_sel_pat],10);
						        
						        $have_inv = Doctrine_Query::create()
						        ->select('*')
						        ->from('ShInvoices')
						        ->where('isdelete = 0')
						        ->andWhere('admissionid = ?', $adm_id);
						        $have_inv_arr = $have_inv->fetchArray();
						    } 
						    
						    if (empty($have_inv_arr)){
						        $ipids[] = $epids_ipids[$v_sel_pat];
						        
						        $params['nosapvperiod'][$epids_ipids[$v_sel_pat]] = '0';
						        
						        $period_id_exploded = explode('_', $_POST['selected_patient_period'][$v_sel_pat]);
						        
						        //construct array with patients which have admission period selected
						        if(count($period_id_exploded) == "2" && $period_id_exploded[0] == "admission")
						        {
						            $admission_fall[$epids_ipids[$v_sel_pat]] = $period_id_exploded[1];
						        }
						        
						        //ISPC-2461
						        //construct array with patients which have quarter period selected
						        if(count($period_id_exploded) == "2" && $period_id_exploded[0] == "quarter")
						        {
						            $quarter_fall[$epids_ipids[$v_sel_pat]] = $period_id_exploded[1];
						        }
						        
						        if($_POST['selected_patient_period'][$v_sel_pat] != '0' && count($period_id_exploded) == "1")
						        {
						            $selected_sapv_falls_ipids[] = $epids_ipids[$v_sel_pat];
						            $selected_sapv_falls[$epids_ipids[$v_sel_pat]] = $_POST['selected_patient_period'][$v_sel_pat];
						        }
						        else if(count($period_id_exploded) == "1")
						        {
						            $selected_fall_ipids[] = $epids_ipids[$v_sel_pat];
						            $selected_fall[$epids_ipids[$v_sel_pat]] = $months_details[$selected_month];
						        }
						    }

						}

						//get patients sapvs last fall
						if($selected_sapv_falls_ipids)
						{
							$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods($selected_sapv_falls_ipids, true);
							foreach($selected_sapv_falls as $k_ipid => $fall_id)
							{
								$patients_sapv[$k_ipid] = $fall_id;
								$patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
								$params['nosapvperiod'][$k_ipid] = '0';
								$params['period'] = $patients_selected_periods;
							}
						}

						//patient days
						$conditions['client'] = $this->clientid;
						$conditions['ipids'] = $ipids;
						$conditions['periods'][0]['start'] = '2009-01-01';
						$conditions['periods'][0]['end'] = date('Y-m-d');

						$sql = 'e.epid, p.ipid, e.ipid,';
						$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
						$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
						$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
						$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
						$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
						$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

						//be aware of date d.m.Y format here
						$patient_days = Pms_CommonData::patients_days($conditions, $sql);

						//rewrite the periods array if the period is entire month not sapv fall
						$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods($ipids, true);

						foreach($patients_sapv_periods as $k_sapv_ipid => $v_sapvs)
						{
							foreach($v_sapvs as $k_sapv_id => $v_sapv_data)
							{
								if(empty($sapv_days[$v_sapv_data['ipid']]))
								{
									$sapv_days[$v_sapv_data['ipid']] = array();
								}

								$sapv_days[$v_sapv_data['ipid']] = array_merge($sapv_days[$v_sapv_data['ipid']], $v_sapv_data['days']);
								$sapv_days[$v_sapv_data['ipid']] = array_values(array_unique($sapv_days[$v_sapv_data['ipid']]));
							}
						}


						foreach($ipids as $k_ipid => $v_ipid)
						{
							if(!in_array($v_ipid, $selected_sapv_falls_ipids))
							{
//								var_dump(array_key_exists($v_ipid, $admission_fall));
								if(array_key_exists($v_ipid, $admission_fall))
								{
									$selected_period[$v_ipid] = $patient_days[$v_ipid]['active_periods'][$admission_fall[$v_ipid]];

									array_walk($selected_period[$v_ipid], function(&$value) {
										$value = date("Y-m-d", strtotime($value));
									});

									$selected_period[$v_ipid]['days'] = PatientMaster::getDaysInBetween($selected_period[$v_ipid]['start'], $selected_period[$v_ipid]['end']);

									array_walk($selected_period[$v_ipid]['days'], function(&$value) {
										$value = date("d.m.Y", strtotime($value));
									});

									$params['nosapvperiod'][$v_ipid] = '1';
									$params['selected_period'][$v_ipid] = $selected_period[$v_ipid];
									$params['selected_period'][$v_ipid]['days'] = $selected_period[$v_ipid]['days'];


									array_walk($params['selected_period'][$v_ipid]['days'], function(&$value) {
										$value = date("d.m.Y", strtotime($value));
									});

									//exclude outside admission falls days from sapv!
									if(empty($sapv_days[$v_ipid]))
									{
										$sapv_days[$v_ipid] = array();
									}

									if(empty($params['selected_period'][$v_ipid]['days']))
									{
										$params['selected_period'][$v_ipid]['days'] = array();
									}
									$patient_active_sapv_days[$v_ipid] = array_intersect($params['selected_period'][$v_ipid]['days'], $sapv_days[$v_ipid]);
									$params['sapv_in_period'][$v_ipid] = array_values($patient_active_sapv_days[$v_ipid]);

									$start_dmy = date('d.m.Y', strtotime($selected_period[$v_ipid]['start']));
									$end_dmy = date('d.m.Y', strtotime($selected_period[$v_ipid]['end']));

									$start_sapv_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
									$end_sapv_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));

									//get all days of all sapvs in a period
									$params['existing_sapv_days'][$v_ipid] = array_values($patient_active_sapv_days[$v_ipid]);
									$params['period'][$v_ipid] = $selected_period[$v_ipid];

//									$start_sapv_dmy = $patient_active_sapv_days[$v_ipid][0];
//									$end_sapv_dmy = end($patient_active_sapv_days[$v_ipid]);

									$params['period'][$v_ipid]['start'] = $start_dmy;
									$params['period'][$v_ipid]['end'] = $end_dmy;

									$last_sapv_data['ipid'] = $v_ipid;
									$last_sapv_data['start_period'] = date('Y-m-d', strtotime($selected_period[$v_ipid]['start']));
									$last_sapv_data['end_period'] = date('Y-m-d', strtotime($selected_period[$v_ipid]['end']));
									$sapv_last_require_data[] = $last_sapv_data;

									$params['admissionid'][$v_ipid] = $admission_fall[$v_ipid];
								}
								//ISPC-2461
								elseif(array_key_exists($v_ipid, $quarter_fall))
								{
// 								    dd($quarter_fall);
								    
								    
								    $post_q = $quarter_fall[$v_ipid];
								    $post_q_arr = explode("/",$post_q);
								    $q_no = (int)$post_q_arr[0];
								    $q_year = (int)$post_q_arr[1];
								     
// 								    $period_days_arr[$v_ipid] = array();
								    $q_per = array();
								    $quarter_start = "";
								    $quarter_end = "";
								    
								    $q_per = Pms_CommonData::get_dates_of_quarter($q_no,$q_year,'Y-m-d');
								    $quarter_start = $q_per['start'];
								    $quarter_end = $q_per['end'];
								    
								    $selected_period[$v_ipid] = array();
								    $selected_period[$v_ipid]['days'] = PatientMaster::getDaysInBetween($quarter_start, $quarter_end);
								    $selected_period[$v_ipid]['start'] = $quarter_start;
								    $selected_period[$v_ipid]['end'] = $quarter_end;
								    
									array_walk($selected_period[$v_ipid]['days'], function(&$value) {
										$value = date("d.m.Y", strtotime($value));
									});
									    
									$params['nosapvperiod'][$v_ipid] = '1';
									$params['selected_period'][$v_ipid] = $selected_period[$v_ipid];
									$params['selected_period'][$v_ipid]['days'] = $selected_period[$v_ipid]['days'];


									array_walk($params['selected_period'][$v_ipid]['days'], function(&$value) {
										$value = date("d.m.Y", strtotime($value));
									});

									//exclude outside admission falls days from sapv!
									if(empty($sapv_days[$v_ipid]))
									{
										$sapv_days[$v_ipid] = array();
									}

									if(empty($params['selected_period'][$v_ipid]['days']))
									{
										$params['selected_period'][$v_ipid]['days'] = array();
									}
									$patient_active_sapv_days[$v_ipid] = array_intersect($params['selected_period'][$v_ipid]['days'], $sapv_days[$v_ipid]);
									$params['sapv_in_period'][$v_ipid] = array_values($patient_active_sapv_days[$v_ipid]);

									$start_dmy = date('d.m.Y', strtotime($selected_period[$v_ipid]['start']));
									$end_dmy = date('d.m.Y', strtotime($selected_period[$v_ipid]['end']));

									$start_sapv_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
									$end_sapv_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));

									//get all days of all sapvs in a period
									$params['existing_sapv_days'][$v_ipid] = array_values($patient_active_sapv_days[$v_ipid]);
									$params['period'][$v_ipid] = $selected_period[$v_ipid];

//									$start_sapv_dmy = $patient_active_sapv_days[$v_ipid][0];
//									$end_sapv_dmy = end($patient_active_sapv_days[$v_ipid]);

									$params['period'][$v_ipid]['start'] = $start_dmy;
									$params['period'][$v_ipid]['end'] = $end_dmy;

									$last_sapv_data['ipid'] = $v_ipid;
									$last_sapv_data['start_period'] = date('Y-m-d', strtotime($selected_period[$v_ipid]['start']));
									$last_sapv_data['end_period'] = date('Y-m-d', strtotime($selected_period[$v_ipid]['end']));
									$sapv_last_require_data[] = $last_sapv_data;

									$params['quarterid'][$v_ipid] = $quarter_fall[$v_ipid];
								}
								else
								{

									$start_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
									$end_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));

									$params['nosapvperiod'][$v_ipid] = '1';
									$params['selected_period'][$v_ipid] = $months_details[$selected_month];
									$params['sapv_in_period'][$v_ipid] = array_values($months_details[$selected_month]['days']);
									$params['existing_sapv_days'][$v_ipid] = array_values($months_details[$selected_month]['days']);
									$params['period'][$v_ipid] = $months_details[$selected_month];
									$params['period'][$v_ipid]['start'] = $start_dmy;
									$params['period'][$v_ipid]['end'] = $end_dmy;

									$last_sapv_data['ipid'] = $v_ipid;
									$last_sapv_data['start_period'] = date('Y-m-d', strtotime($start_dmy));
									$last_sapv_data['end_period'] = date('Y-m-d', strtotime($end_dmy));
									$sapv_last_require_data[] = $last_sapv_data;
								}
							}
						}
						
						
//						}
						$all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipids);
						if($sapv_last_require_data)
						{
							$last_sapvs_in_period = SapvVerordnung::get_multiple_last_sapvs_inperiod($sapv_last_require_data, true, true);
						}

						foreach($all_patients_sapvs as $k_sapv => $v_sapv)
						{
							if(empty($sapv_days_overall[$v_sapv['ipid']]))
							{
								$sapv_days_overall[$v_sapv['ipid']] = array();
							}


							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}

							//FIND A WAY TO GET MULTIPLE LAST SAPV IN EACH PERIOD FOR EACH PATIENT
							if($last_sapvs_in_period[$v_sapv['ipid']])
							{
								$params['period'][$v_sapv['ipid']] = array_merge($params['period'][$v_sapv['ipid']], $last_sapvs_in_period[$v_sapv['ipid']]);
							}

							$sapv_days_overall[$v_sapv['ipid']] = array_merge($sapv_days_overall[$v_sapv['ipid']], PatientMaster::getDaysInBetween($start, $end));
							array_walk($sapv_days_overall[$v_sapv['ipid']], function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$sapv_days_overall[$v_sapv['ipid']] = array_values(array_unique($sapv_days_overall[$v_sapv['ipid']]));
						}

						foreach($last_sapvs_in_period as $k_sapvs => $v_sapvs)
						{
							foreach($v_sapvs as $k_sapvp => $v_sapvp)
							{
								$startp = date('Y-m-d', strtotime($v_sapvp['verordnungam']));

								if($v_sapvp['status'] == '1' && $v_sapvp['verorddisabledate'] != '0000-00-00 00:00:00')
								{
									$endp = date('Y-m-d', strtotime($v_sapvp['verorddisabledate']));
								}
								else
								{
									$endp = date('Y-m-d', strtotime($v_sapvp['verordnungbis']));
								}
								if(empty($period_sapv_alldays[$v_sapvp['ipid']]))
								{
									$period_sapv_alldays[$v_sapvp['ipid']] = array();
								}
								$period_sapv_alldays[$v_sapvp['ipid']] = array_merge($period_sapv_alldays[$v_sapvp['ipid']], PatientMaster::getDaysInBetween($startp, $endp));
							}
						}


						$params['period_sapvs_alldays'] = $period_sapv_alldays;
						$params['sapv_overall'] = $sapv_days_overall;
					}
					
					
					$params['ipids'] = $ipids;
//					$params['patient_sapvs'] = $patients_sapv;
					$params['patient_days'] = $patient_days;
					$params['get_pdf'] = '0';
					$params['only_pdf'] = 0;
					$params['invoice_type'] = $client_allowed_invoice[0];

					
					//TODO-3112 - Lore 23.04.2020
					//get invoices type allowed from menu permissions
					$client_menu_perms = Doctrine_Query::create()
					->select('*')
					->from('MenuClient')
					->andWhere('clientid = "' . $clientid . '"');
					$client_menu_permssions = $client_menu_perms->fetchArray();
					
					$allowed_menu_links = array();
					if(!empty($client_menu_permssions)){
					    
					    foreach($client_menu_permssions as $val)
					    {
					        $menu_perms[] = $val['menu_id'];
					    }
					    
					    $menus_cl = Doctrine_Query::create()
					    ->select('id, menu_link, parent_id, isdelete')
					    ->from('Menus m')
					    ->where('m.isdelete = "0"')
					    ->andWhereIn("m.id", $menu_perms)
					    ->andWhere('m.isdelete = 0')
					    ->andWhere('m.forsuperadmin = 0')
					    ->andWhere('m.menu_link LIKE "%invoice/%" or m.menu_link LIKE "%invoicenew/%" or m.menu_link LIKE "%internalinvoice/%"')
					    ->orderBy('m.sortorder ASC');
					    $menus_cl_arr = $menus_cl->fetchArray();
					    
					    foreach($menus_cl_arr as $k_menu => $v_menu)
					    {
					        if(strlen($v_menu['menu_link']) > 0)
					        {
					            $allowed_menu_links[] = $v_menu['menu_link'];
					        }
					    }  
					}
					//.
					
//					print_r($client_allowed_invoice);

					switch($client_allowed_invoice[0])
					{
						case "bayern_sapv_invoice":
							$this->bayern_sapv_invoice($params);
							
							//TODO-3112 Lore 23.04.2020
							if(in_array('invoicenew/bayerninvoices', $allowed_menu_links)){
							    $this->redirect(APP_BASE . 'invoicenew/bayerninvoices');
							}else {
							    $this->redirect(APP_BASE . 'invoicenew/invoicesnew');
							}
							//.
							//$this->redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
							break;

						case "sh_invoice":
							$this->anlage14_invoice($params);
							$this->redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
							break;

						case "bw_medipumps_invoice":
							$this->bwmedipumpsinvoice($params);
							$this->redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
							break;

						case "bw_sapv_invoice_new":
							$this->bwsapvsinvoice($params);
							$this->redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
							break;
							
						case "rlp_invoice":
							$this->generate_rlpinvoice($params);
							$this->redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
							break;
							
						case "bre_kinder_invoice":
						case "nr_invoice":
						case "demstepcare_invoice": // ISPC-2461
							$this->generate_systeminvoice($params);
							$this->redirect(APP_BASE . 'invoicenew/invoicesnew');
							exit;
							break;

						default:
							exit;
							break;
					}
				}
			}
		}

		public function fetchnewinvoicepatientlistAction()
		{
			$clientid = $this->clientid;
			$userid = $this->userid;

			//get allowed client invoices
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
			$invoice_type = $client_allowed_invoice[0];
			$this->view->allowed_invoice = $client_allowed_invoice[0];
			
			
			// TODO-1310
			if(  ! $client_allowed_invoice[0] || $client_allowed_invoice[0] == 'hospiz_invoice')
			{//TODO-2788 Ancuta 06.01.2020 - added hospiz_invoice contition- as this type of invoice does not use - this page to generate invoices
				
				$response['msg'] = "Success";
				$response['error'] = "";
				$response['callBack'] = "callBack";
				$response['callBackParameters'] = array();
				$response['callBackParameters']['newinvoicepatientlist'] = "";
	
				echo json_encode($response);
				exit;
			}
				
			$client_data = Client::getClientDataByid($this->clientid);
			$billing_method = $client_data[0]['billing_method'];
			// ISPC-2286 - 4) invoices will be generated on a monthly basis.
			if($invoice_type == "nr_invoice"){
 			    $billing_method  = "month";
			}
			// ISPC-2461 - allow only quart
			elseif($invoice_type == "demstepcare_invoice"){
 			    $billing_method  = "quarter";
			}
			//--
			$this->view->billing_method = $billing_method;
			
			
			$this->view->rowspan_rows = "1";
			if($billing_method == "both")
			{
			    if($invoice_type == "demstepcare_invoice"){
    				$this->view->rowspan_rows = "5";
			    } else{
    				$this->view->rowspan_rows = "4";
			    }
			}
			else if($billing_method == "sapv" || $billing_method == "month" || $billing_method == "admission" )
			{
				$this->view->rowspan_rows = "2";
			}
			else if($billing_method == "quarter" )
			{
				$this->view->rowspan_rows = "2";
			}
			else
			{
				$this->view->rowspan_rows = "1";
			}

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}
			$this->view->selected_month = $selected_month;

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
			$this->view->selected_month_details = $months_details[$selected_month];
			//check if a month is selected END
			//sort and ordering START
			$columnarray = array(
				"epid" => "e.epid",
				"fn" => 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci',
				"ln" => 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci',
				"adm" => "a.start",
				"dis" => "a.end",
			);

			if(strlen($_REQUEST['clm']) == '0')
			{
				$sortby = 'ln';
			}
			else
			{
				$sortby = $_REQUEST['clm'];
			}

			if(strlen($_REQUEST['ord']) == '0')
			{
				$order = 'ASC';
			}
			else
			{
				$order = $_REQUEST['ord'];
			}


			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$this->view->order = $orderarray[$order];
			$this->view->{$sortby . "order"} = $orderarray[$order];
			$x = "TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci";
			$search_sql = "(TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci like '%" . trim($_REQUEST['val']) . "%' or TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci like '%" . trim($_REQUEST['val']) . "%' or e.epid like '%" . trim($_REQUEST['val']) . "%' )";

			//sort and ordering END

			$active_ipids_count = Pms_CommonData::patients_active('count(*)', $this->clientid, $months_details, false, $columnarray[$sortby], $order, $search_sql); // BW->SH patient list

			$limit = '9999';
			$page = $_REQUEST['pgno'];
			$sql = Pms_CommonData::sql_getters('patients_active');
			$active_ipids = Pms_CommonData::patients_active($sql, $this->clientid, $months_details, false, $columnarray[$sortby], $order, $search_sql, $limit, $page);
		
			$active_ipids_array[] = '99999999999999999';
			foreach($active_ipids as $k_active => $v_active)
			{
				$active_ipids_array[] = $v_active['ipid'];
			}

			//take all patients details
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $active_ipids_array;
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['include_standby'] = true;// TODO-2873 Ancuta 13.02.2020 [add standby condition, for patients thata are NOW standby but had active periods]

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			//be aware of date d.m.Y format here
			$patient_days = Pms_CommonData::patients_days($conditions, $sql);
			
			// TODO-2873 Ancuta 13.02.2020
			$fullstandby= array();
			foreach($patient_days as $k_ipid => $v_pat_data)
			{
			    foreach($v_pat_data['active_periods'] as $v_period_id => $v_period)
			    {
			        
			        if($v_pat_data['details']['isstandby'] == '1'){
			            foreach($v_pat_data['standby_periods'] as $s_per_id => $s_per){
			                if($s_per['start'] == $v_period['start'] &&  $s_per['end'] == $v_period['end']){
			                    $fullstandby[$k_ipid][] = $v_period['start'].$v_period['end'];
			                }
			            }
			        }
			    }
			}
			// -- 

			$patients_active_days = array();
			foreach($patient_days as $k_ipid => $v_pat_data)
			{
			    $patients_active_days[$k_ipid] = $v_pat_data['real_active_days'];
			    
			    //sort invoice Lore 10.03.2020
			    $ksort_v_pat_data = $v_pat_data['active_periods'];        
			    ksort($ksort_v_pat_data);
			    
			    foreach($ksort_v_pat_data as $v_period_id => $v_period)
				{
				    // TODO-2873 Ancuta 13.02.2020
				    $period_ident = 0;
				    $period_ident = $v_period['start'].$v_period['end'];
				    
				    if($period_ident!=0 && !in_array($period_ident,$fullstandby[$k_ipid]) )
				    {
    					$v_period['days'] = PatientMaster::getDaysInBetween($v_period['start'], $v_period['end']);
    					$patients_admissions_periods[$k_ipid][$v_period_id] = $v_period;
    					$patients_admissions_periods[$k_ipid][$v_period_id]['completed'] = 1;
    					
    					// TODO-2315 16.07.2019
    					if( $v_pat_data['patient_active'][$v_period_id]['end'] == "0000-00-00" ){
    					   $patients_admissions_periods[$k_ipid][$v_period_id]['completed'] = 0;
    					}
				    }
			 
				}
			}
			//dd($patients_admissions_periods);
			foreach($active_ipids as $k_active_patient => $v_active_patient)
			{
				$active_patients[$v_active_patient['ipid']] = $v_active_patient;

				$active_ipids_arr[] = $v_active_patient['ipid'];

				$last_period[$v_active_patient['ipid']] = end($v_active_patient['PatientActive']);

				$active_patients[$v_active_patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['start']));

				if($last_period[$v_active_patient['ipid']]['end'] != "0000-00-00")
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['end']));
				}
				else
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = "-";
				}
				$active_patients[$v_active_patient['ipid']]['id'] = $v_active_patient['PatientMaster']['id'];
			}

// 			dd($active_patients);
			//check what was invoiced
			switch($client_allowed_invoice[0])
			{
				case "bayern_sapv_invoice":
					$invoiced_sapv_ids = BayernInvoicesNew::get_bay_invoiced_sapvs($active_ipids_arr);
					break;

				case "sh_invoice":
					$invoiced_sapv_ids = ShInvoices::get_sh_invoiced_sapvs($active_ipids_arr);
					break;

				case "bw_medipumps_invoice":
					$invoiced_sapv_ids = MedipumpsInvoicesNew::get_mp_invoiced_sapvs($active_ipids_arr);
					break;
				case "bw_sapv_invoice_new":
					$invoiced_sapv_ids = BwInvoicesNew::get_bw_invoiced_sapvs($active_ipids_arr);
					break;
				case "rlp_invoice":
				    $invoiced_sapv_ids = RlpInvoices::get_rlp_invoiced_sapvs($active_ipids_arr,$clientid);//TODO-2997 Ancuta 11.03.2020
					break;
					
				case "bre_kinder_invoice":
					$invoiced_sapv_ids = InvoiceSystem::get_invoiced_sapvs("bre_kinder_invoice",$active_ipids_arr);
					break;

				// ISPC-2286	
				case "nr_invoice":
					$invoiced_sapv_ids = InvoiceSystem::get_invoiced_sapvs("nr_invoice",$active_ipids_arr);
					break;
					
				case "demstepcare_invoice": // ISPC-2461
					$invoiced_sapv_ids = InvoiceSystem::get_invoiced_sapvs("demstepcare_invoice",$active_ipids_arr);
					break;

				default:
					exit;
					break;
			}
// 			dd($invoiced_sapv_ids);
// 			dd($client_allowed_invoice);
//			print_r($invoiced_sapv_ids);
//			exit;
			if($invoiced_sapv_ids)
			{
				$this->view->invoiced_sapv_ids = $invoiced_sapv_ids['sapv'];
				$this->view->invoiced_fall_ids = $invoiced_sapv_ids['fall'];
   				
				//TODO-2820 Plz check: new invoices not marked as green if they are created Ancuta 17.01.2020
				if($client_allowed_invoice[0] == 'sh_invoice'){
    				$this->view->invoiced_fall_ids = $invoiced_sapv_ids['fall_full'];
				} 
				//--
				$this->view->invoiced_admissions_ids = $invoiced_sapv_ids['admission'];
				$this->view->invoiced_quarter_ids = $invoiced_sapv_ids['quarter'];
			}

			$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods($active_ipids_arr);

			//9641931c87a04669eaa4f352add7a6d6cd7de643
			
			//ISPC-2461 create qurters
// 			dd($patients_active_days['9641931c87a04669eaa4f352add7a6d6cd7de643']);
			$patient_quart_arr = array();
 			
            foreach($patients_active_days as $ipid=>$patient_active_days){

                //$patient_active_days_sort = ksort($patient_active_days);
                $month ="";
    			$yearQuarter="";
    			foreach($patient_active_days as $date){
    			    $month = date("n", strtotime($date));
    			    $yearQuarter = ceil($month / 3);
    			    $patient_quart_arr[$ipid] ['0'.$yearQuarter.'/'.date("Y", strtotime($date))]['q'] = '0'.$yearQuarter.'/'.date("Y", strtotime($date));
    			    $patient_quart_arr[$ipid] ['0'.$yearQuarter.'/'.date("Y", strtotime($date))]['q_ident'] = '0'.$yearQuarter.'_'.date("Y", strtotime($date));
    			    $patient_quart_arr[$ipid] ['0'.$yearQuarter.'/'.date("Y", strtotime($date))]['q_no'] = $yearQuarter;
    			    $patient_quart_arr[$ipid] ['0'.$yearQuarter.'/'.date("Y", strtotime($date))]['q_year'] = date("Y", strtotime($date));
    			    $patient_quart_arr[$ipid] ['0'.$yearQuarter.'/'.date("Y", strtotime($date))]['days'][] =  $date ;
    			    
    			    
    			    
    			    $q++;
    			}
            }
            
            foreach($patient_quart_arr as $pat_ipid=>$q_id_data){
/*                  if ($pat_ipid == '7975a3a95ccd355bdd3e7e2d62fbe637d948de73'){
                        dd($q_id_data);
                 } */
                foreach($q_id_data as $q_id=>$q_info){
                    usort($q_info['days'], array(new Pms_Sorter(), "_date_compare"));
                    $patient_quart_arr[$pat_ipid][$q_id]['start'] = $q_info['days'][0];
                    $patient_quart_arr[$pat_ipid][$q_id]['end'] = end($q_info['days']);
                    
                    
                    
    			    $patient_quart_arr[$pat_ipid][$q_id]['completed'] = 1; // ADD  CHECKES
                }
            }
            
			$this->view->{"style" . $_GET['pgno']} = "active";

			$grid = new Pms_Grid($active_patients, 1, $active_ipids_count[0]['count'], "listnewinvoicepatients.html");
			

			$grid->admission_periods = $patients_admissions_periods;
			$grid->sapv_periods = $patients_sapv_periods;
			$grid->quarter_periods = $patient_quart_arr;
			$this->view->invoice_type = $client_allowed_invoice[0];
			$this->view->newinvoicepatientsgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("newinvoicepatientsnavigation.html", 5, $page, $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['newinvoicepatientlist'] = $this->view->render('invoicenew/fetchnewinvoicepatientlist.html');

			echo json_encode($response);
			exit;
		}

		// Changed for ISPC-2609 Ancuta 01.09.2020
		public function bayern_sapv_invoice($params)
		{
		    if(isset($params['print_job']) && $params['print_job'] =='1'){
		        $this->_helper->layout->setLayout('layout_ajax');
		        $this->_helper->viewRenderer->setNoRender();
		    }
		    
			//spl_autoload_register(array('AutoLoader', 'autoloadPdf')); // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
		    $clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] : $this->clientid;
			$userid = $this->userid;

			$client = new Client();
			$patientmaster = new PatientMaster();
			$pflege = new PatientMaintainanceStage();
			$sapvs = new SapvVerordnung();
			$bayern_doctor_visit = new BayernDoctorVisit();
			$patient_course = new PatientCourse();
			$p_list = new PriceList();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$invoice_settings = new InvoiceSettings();
			$bayern_invoices = new BayernInvoicesNew();
			$bayern_settings = new BayernInvoiceSettings();
			$ppun = new PpunIpid();
			$modules = new Modules();
			$paycenters = new Paycenters();
			$boxes = new LettersTextBoxes();
			$paycenters = new Paycenters();
			
			
			//used modules checks
			if($modules->checkModulePrivileges("88", $clientid))
			{
				$ppun_module = "1";
			}
			else
			{
				$ppun_module = "0";
			}

			if($modules->checkModulePrivileges("90", $clientid))
			{
				$debtor_number_module = "1";
			}
			else
			{
				$debtor_number_module = "0";
			}

			if($modules->checkModulePrivileges("91", $clientid))
			{
				$paycenter_module = "1";
			}
			else
			{
				$paycenter_module = "0";
			}

			//new version data
			$ipids = $params['ipids'];
			$patient_days = $params['patient_days'];

			if ($params['batch_print'] == '1' && count($params['invoices']) > '0' && empty($params['ipids']) && !empty($params['invoices'])){
			    $invoices_ids = $params['invoices'];
			    //load invoices data
			    $invoices_data = $bayern_invoices->get_invoices($invoices_ids);
			    $ipids = $invoices_data['invoices_ipdis'];
			}
						
			//set current period to work with
			$current_period = $params['period'];

			//client data
			$client_details = Pms_CommonData::getClientData($clientid);

			//letter footer text
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);

			if($client_details)
			{
				$master_data['client']['id'] = $client_details[0]['id'];
				$master_data['client']['team_name'] = $client_details[0]['team_name'];
				$master_data['client']['client_ik'] = $client_details[0]['institutskennzeichen'];
			}

			//patient HEALTH INSURANCE START
			$healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);

			//multiple hi subdivisions && hi subdivisions permissions
			$divisions = HealthInsurancePermissions::getClientHealthInsurancePermissions($clientid);

			if($divisions)
			{
				foreach($healthinsu_multi_array as $k_hi => $v_hi)
				{
					$hi_companyids[] = $v_hi['companyid'];
				}

				$healthinsu_subdiv_arr = PatientHealthInsurance2Subdivisions::get_hi_subdivisions_multiple($hi_companyids);
			}
			
			foreach($ipids as $k_ipid => $v_ipid)
			{
			
				if($divisions && strlen($healthinsu_subdiv_arr[$v_ipid]['3']['name']) > '0')
				{
					$sapv_address[$v_ipid][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['street1']);
					$sapv_address[$v_ipid][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city']);
					$master_data['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = implode('<br />', array_values(array_unique($sapv_address[$v_ipid])));
				}
				else
				{
					$master_data['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = '';
				}
			}

			//generate invoice from patient system data!
			if($params['only_pdf'] == '0')
			{
				//	GET already existing invoices - for overall quantity -   START
				$byi_status = array("2", "3", "5"); // 2 - Completed ,3 - paid, 5 - partialy paid
				$bayern_patient_invoices = $bayern_invoices->get_multi_patient_bayern_invoice($ipids, $byi_status, $clientid);


				//get sapv (overall period)
				$sapv_days = SapvVerordnung::get_multi_high_sapv($ipids, true);

				//get sapv denied (overall period)
				$sapv_days_denied = SapvVerordnung::get_multi_high_sapv_period_denied($ipids);

				//grouped parameter is false because we need all raw data to be processed and splitted in 2 arrays
				//visits in period and visits overall
				$bayern_doc_visits_data = $bayern_doctor_visit->get_multi_bay_doctor_visits_period($ipids, false, true, false);

                foreach($bayern_doc_visits_data as $k_bay_visit => $v_bay_visit)
                {
                    $check_visit_date = date('d.m.Y', strtotime($v_bay_visit['visit_date']));
                    $current_visit_date = date('Y-m-d', strtotime($v_bay_visit['visit_date']));
                
                    if(in_array($check_visit_date, $current_period[$v_bay_visit['ipid']]['days']))
                    {
                        $bayern_doc_visits[$v_bay_visit['ipid']][$current_visit_date][] = $v_bay_visit;
                    }
                
                    $bayern_doc_visits_overall[$v_bay_visit['ipid']][$current_visit_date][] = $v_bay_visit;
                }
                
                
				// get multiple contat froms 
				//get contact forms in current period and in overall period
				$contact_forms_data = $this->get_overall_contact_forms($ipids,false);
				
                 foreach($contact_forms_data as $k_bay_visit => $v_bay_visit)
                 {
                     $check_visit_date = date('d.m.Y', strtotime($v_bay_visit['date']));
                     $current_visit_date = date('Y-m-d', strtotime($v_bay_visit['date']));
                 
                     if(in_array($check_visit_date, $current_period[$v_bay_visit['ipid']]['days']))
                     {
                         $bayern_doc_visits[$v_bay_visit['ipid']][$current_visit_date][] = $v_bay_visit;
                     }
                 
                     $bayern_doc_visits_overall[$v_bay_visit['ipid']][$current_visit_date][] = $v_bay_visit;
                 }
				
				//get phone from patient course (overall period)
				$phone_courses = $patient_course->get_multi_pat_shortcuts_course($ipids, array('XT'), false, false);

				foreach($phone_courses as $k_p_course => $v_p_course)
				{
					//use d.m.Y patients_active default
					$check_phone_date = date('d.m.Y', strtotime($v_p_course['done_date']));
					$current_phone_date = date('Y-m-d', strtotime($v_p_course['done_date']));

					if(in_array($check_phone_date, $current_period[$v_p_course['ipid']]['days']))
					{
						$day_course_activity[$v_p_course['ipid']][$current_phone_date][] = $v_p_course;
					}

					$day_course_activity_overall[$v_p_course['ipid']][$current_phone_date][] = $v_p_course;
				}

				//initialize required data
				foreach($ipids as $ipid)
				{
					//hospital/hospiz in period
					$hospital_days[$ipid] = array_intersect($current_period[$ipid]['days'], $patient_days[$ipid]['hospital']['real_days_cs']);
					$hospiz_days[$ipid] = array_intersect($current_period[$ipid]['days'], $patient_days[$ipid]['hospiz']['real_days_cs']);

					//hospital/hospiz overall
					$hospital_days_overall[$ipid] = $patient_days[$ipid]['hospital']['real_days_cs'];
					$hospiz_days_overall[$ipid] = $patient_days[$ipid]['hospiz']['real_days_cs'];

					$patient_real_active_days[$ipid] = array_intersect($patient_days[$ipid]['real_active_days'], $current_period[$ipid]['days']);
					array_walk($patient_real_active_days[$ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
					$patient_real_active_days[$ipid] = array_values($patient_real_active_days[$ipid]);

					$active_days_in_period[$ipid] = $patient_real_active_days[$ipid];
					$active_days[$ipid] = $patient_days[$ipid]['active_days'];

					$available_for_invoice[$ipid] = '0';

					//get price list
					$shortcuts[$ipid] = Pms_CommonData::get_prices_shortcuts();
					$master_price_list[$ipid] = $p_list->get_period_price_list($current_period[$ipid]['start'], $current_period[$ipid]['end']);

					//get bayern invoice settings
					$bayern_settings_arr[$ipid] = $bayern_settings->get_invoice_settings(date('Y-m-d', strtotime($current_period[$ipid]['start'])), date('Y-m-d', strtotime($current_period[$ipid]['end'])), $clientid);
					$overall_limit_settings[$ipid] = (int) $bayern_settings_arr[$ipid]['max_days_amount'];

					//get sapv days
					$sapv_days_keys[$ipid] = array_keys($sapv_days[$ipid]);
					$sapv_days_denied_keys[$ipid] = array_keys($sapv_days_denied[$ipid]);

					if(empty($sapv_days_keys[$ipid]))
					{
						$sapv_days_keys[$ipid] = array();
					}

					if(empty($sapv_days_denied_keys[$ipid]))
					{
						$sapv_days_denied_keys[$ipid] = array();
					}

					//get all sapv aproved+denied in curent period
					$sapv_days_all[$ipid] = array_values(array_unique(array_merge($sapv_days_keys[$ipid], $sapv_days_denied_keys[$ipid])));
					$patient_sapv_active_days[$ipid] = array_values(array_intersect($sapv_days_all[$ipid], $patient_real_active_days[$ipid]));

					$current_period_check[$ipid] = $current_period[$ipid]['days'];

					array_walk($current_period_check[$ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});

					$patient_sapv_active_days[$ipid] = array_intersect($patient_sapv_active_days[$ipid], $current_period_check[$ipid]);

					if(empty($bayern_patient_invoices[$ipid]))
					{
						$available_for_invoice[$ipid] = $overall_limit_settings[$ipid];
					}
				}


				//calculate all paid items for all patients => available to invoice items number per patient
				foreach($bayern_patient_invoices as $k_p_inv => $v_p_inv)
				{

					if($v_p_inv['paid_items'])
					{
						$paid_items[$v_p_inv['ipid']] = $v_p_inv['paid_items'];
					}
					else
					{
						$paid_items[$v_p_inv['ipid']] = "0";
					}


					if(empty($overall_limit_settings_counted[$v_p_inv['ipid']]) && $overall_limit_settings_counted[$v_p_inv['ipid']] != '0')
					{
						$overall_limit_settings_counted[$v_p_inv['ipid']] = $overall_limit_settings[$v_p_inv['ipid']];
					}

//					if($_SERVER['REMOTE_ADDR'] == "10.0.0.12")
//					{
//						print_r($v_p_inv['id'].' - '.$v_p_inv['ipid'].' - '.($overall_limit_settings_counted[$v_p_inv['ipid']] - $paid_items[$v_p_inv['ipid']]['paid_items']).' ->> '."\n");
//					}

					if(($overall_limit_settings[$v_p_inv['ipid']] - $paid_items[$v_p_inv['ipid']]['paid_items']) > '0')
					{
						$overall_limit_settings_counted[$v_p_inv['ipid']] = ($overall_limit_settings_counted[$v_p_inv['ipid']] - $paid_items[$v_p_inv['ipid']]['paid_items']);
						$available_for_invoice[$v_p_inv['ipid']] = $overall_limit_settings_counted[$v_p_inv['ipid']];
					}
					else
					{
						$available_for_invoice[$v_p_inv['ipid']] = '0';
					}
				}

//				if($_SERVER['REMOTE_ADDR'] == "10.0.0.12")
//				{
//					print_r($overall_limit_settings);
//
//					print_r($bayern_patient_invoices);
//					print_r($available_for_invoice);
//					exit;
//				}

				foreach($ipids as $k_ipid => $v_ipid)
				{
					if($params['nosapvperiod'][$v_ipid] == '1')
					{
						$curent_period[$v_ipid]['start'] = $params['selected_period'][$v_ipid]['start'];
						$curent_period[$v_ipid]['end'] = $params['selected_period'][$v_ipid]['end'];
						$curent_period_days[$v_ipid] = $params['selected_period'][$v_ipid]['days'];
						$curent_period_days_sapv[$v_ipid] = $params['sapv_in_period'][$v_ipid];
					}
					else //sapv period selected case
					{
						$curent_period[$v_ipid]['start'] = $params['period'][$v_ipid]['start'];
						$curent_period[$v_ipid]['end'] = $params['period'][$v_ipid]['end'];
						$curent_period_days[$v_ipid] = $params['period'][$v_ipid]['days'];
						$curent_period_days_sapv[$v_ipid] = array_intersect($patient_days[$v_ipid]['active_days'], $params['period'][$v_ipid]['days']);
						$curent_period_days_sapv[$v_ipid] = array_intersect($curent_period_days_sapv[$v_ipid], $params['sapv_overall'][$v_ipid]);
					}

					$master_data['patients'][$v_ipid]['invoice_data']['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];

					$master_data['patients'][$v_ipid]['details'] = $params['patient_days'][$v_ipid]['details'];
					$master_data['patients'][$v_ipid]['invoice_data']['period'] = $curent_period[$v_ipid];
					$master_data['patients'][$v_ipid]['invoice_data']['sapv'] = $params['period'][$v_ipid];
					$master_data['patients'][$v_ipid]['invoice_data']['admissionid'] = $params['admissionid'][$v_ipid];

					if($paycenter_module == "1" && $params['patient_days'][$v_ipid]['details']['zip'] > '0')
					{
						$found_paycenter = $paycenters->get_paycenter($params['patient_days'][$v_ipid]['details']['zip'], $clientid);
						$master_data['patients'][$v_ipid]['invoice_data']['paycenter'] = '';
						if($found_paycenter)
						{
							$master_data['patients'][$v_ipid]['invoice_data']['paycenter'] = $found_paycenter;
						}
					}

					//map array to have sapv like start-end
					if(empty($master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam']))
					{
						if($params['existing_sapv_days'][$v_ipid])
						{
							$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam'] = date('Y-m-d H:i:s', strtotime($params['existing_sapv_days'][$v_ipid][0]));
						}
						else if($params['existing_sapv_days'][0])
						{

							$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam'] = date('Y-m-d H:i:s', strtotime($params['existing_sapv_days'][0]));
						}
					}

					if(empty($master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis']))
					{
						if($params['existing_sapv_days'][$v_ipid])
						{
							$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis'] = date('Y-m-d H:i:s', strtotime(end($params['existing_sapv_days'][$v_ipid])));
						}
						else if($params['existing_sapv_days'][0])
						{
							$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis'] = date('Y-m-d H:i:s', strtotime(end($params['existing_sapv_days'])));
						}
					}

					if(!empty($params['period_sapvs_alldays'][$v_ipid]))
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam'] = date('Y-m-d H:i:s', strtotime($params['period_sapvs_alldays'][$v_ipid][0]));
						$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis'] = date('Y-m-d H:i:s', strtotime(end($params['period_sapvs_alldays'][$v_ipid])));
					}

					$master_data['patients'][$v_ipid]['invoice_data']['hi_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
					$master_data['patients'][$v_ipid]['invoice_data']['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
					$master_data['patients'][$v_ipid]['invoice_data']['privatepatient'] = $healthinsu_multi_array[$v_ipid]['privatepatient'];

					if($ppun_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "1")
					{
						//get ppun (private patient unique number)
						$ppun_number = $ppun->check_patient_ppun($v_ipid, $clientid);
						if($ppun_number)
						{
							$master_data['patients'][$v_ipid]['invoice_data']['ppun'] = $ppun_number['ppun'];
						}
					}

					if($debtor_number_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "0")
					{
						//get debtor number from patient healthinsurance
						if(strlen($healthinsu_multi_array[$v_ipid]['ins_debtor_number']) > '0')
						{
							$master_data['patients'][$v_ipid]['invoice_data']['debtor_number'] = $healthinsu_multi_array[$v_ipid]['ins_debtor_number'];
						}
						else
						{
							$master_data['patients'][$v_ipid]['invoice_data']['debtor_number'] = $healthinsu_multi_array[$v_ipid]['company']['debtor_number'];
						}
					}

					$hi_address[$v_ipid] = array();

					if($divisions && strlen($healthinsu_subdiv_arr[$v_ipid]['3']['name']) > '0' && $healthinsu_multi_array[$v_ipid]['privatepatient'] == '0')
					{
						$master_data['patients'][$v_ipid]['health_insurace'] = $healthinsu_subdiv_arr[$v_ipid]['3'];

						$hi_address[$v_ipid]['address'][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['name']);
						if($healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider'])
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider']);
						}
						/* else
						{
							$hi_address[$v_ipid]['address'][] = $healthinsu_subdiv_arr[$v_ipid][3]['contact_person'];
						} */
						
						$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['street1']);
						$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['zip']) . ' ' .  htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['city']);
					}
					else if($healthinsu_multi_array[$v_ipid]['privatepatient'] == '0')
					{
						$master_data['patients'][$v_ipid]['health_insurace'] = $healthinsu_multi_array[$v_ipid];

						if(strlen($healthinsu_multi_array[$v_ipid]['company_name']) > '0')
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['company_name']);
						}
						else
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['company']['name']);
						}

						if(strlen($healthinsu_multi_array[$v_ipid]['ins_insurance_provider']) > '0')
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['ins_insurance_provider']);
						}
						else 
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['company']['insurance_provider']);
						}
						if(strlen($healthinsu_multi_array[$v_ipid]['ins_street']) > '0')
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['ins_street']);
						}
						else
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['company']['street1']);
						}

						if(strlen($healthinsu_multi_array[$v_ipid]['ins_zip']) > '0' || strlen($healthinsu_multi_array[$v_ipid]['ins_city']) > '0')
						{
							if(strlen($healthinsu_multi_array[$v_ipid]['ins_zip']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] =  htmlentities($healthinsu_multi_array[$v_ipid]['ins_zip']);
							}

							if(strlen($healthinsu_multi_array[$v_ipid]['ins_city']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] =  htmlentities($healthinsu_multi_array[$v_ipid]['ins_city']);
							}

							$hi_address[$v_ipid]['address'][] = implode(' ', $hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']]);
						}
						else
						{
							if(strlen($healthinsu_multi_array[$v_ipid]['company']['zip']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] = $healthinsu_multi_array[$v_ipid]['company']['zip'];
							}

							if(strlen($healthinsu_multi_array[$v_ipid]['company']['city']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] = $healthinsu_multi_array[$v_ipid]['company']['city'];
							}

							$hi_address[$v_ipid]['address'][] = implode(' ', array_values(array_unique($hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']])));
						}
					}
					else
					{
						//private patient case!
						$hi_address[$v_ipid]['address'][] = htmlentities($patient_days[$v_ipid]['details']['first_name']) . ' ' . htmlentities($patient_days[$v_ipid]['details']['last_name']);
						$hi_address[$v_ipid]['address'][] = htmlentities($patient_days[$v_ipid]['details']['street1']);
						$hi_address[$v_ipid]['address'][] = htmlentities($patient_days[$v_ipid]['details']['zip']) . ' ' . htmlentities($patient_days[$v_ipid]['details']['city']);
					}

					$master_data['patients'][$v_ipid]['invoice_data']['health_insurace_address'] = implode('<br />', array_values(array_unique($hi_address[$v_ipid]['address'])));

					//get sapvs in period
					if($params['period'][$v_ipid]['approved_date'] != '0000-00-00 00:00:00' && strlen($params['period'][$v_ipid]['approved_date']) > 0 && date('Y-m-d', strtotime($params['period'][$v_ipid]['approved_date'])) != '1970-01-01')
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv_approve_date'] = date('d.m.Y', strtotime($params['period'][$v_ipid]['approved_date']));
					}
					else
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv_approve_date'] = ' - ';
					}

					if(strlen($params['period'][$v_ipid]['approved_number']) > 0)
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv_approve_nr'] = $params['period'][$v_ipid]['approved_number'];
					}
					else
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv_approve_nr'] = ' - ';
					}

					$pflege_arr[$v_ipid] = $pflege->getpatientMaintainanceStageInPeriod($v_ipid, $curent_period[$v_ipid]['start'], $curent_period[$v_ipid]['end']);
					if($pflege_arr[$v_ipid])
					{
						$last_pflege[$v_ipid] = end($pflege_arr[$v_ipid]);

						if(is_numeric($last_pflege[$v_ipid]['stage']))
						{
							$master_data['patients'][$v_ipid]['invoice_data']['patient_pflegestufe'] = $last_pflege[$v_ipid]['stage'];
						}
						else
						{
							$master_data['patients'][$v_ipid]['invoice_data']['patient_pflegestufe'] = ' - ';
						}
					}
					else
					{
						$master_data['patients'][$v_ipid]['invoice_data']['patient_pflegestufe'] = ' - ';
					}
				}

				foreach($ipids as $ki => $vi)
				{
					foreach($sapv_days[$vi]['KOverordnets'] as $k_day => $vv_value)
					{
						$k_day_alt = date('d.m.Y', strtotime($k_day));
						$last_period_day = strtotime(end($params['period'][$vi]['days']));

						if(!in_array($k_day_alt, $params['period'][$vi]['days']) && strtotime($k_day) <= $last_period_day)
						{
							$sapv_vv_till_now[$k_day] = $vv_value;
						}
					}

					$verordnet_passed_shortcuts[$vi] = array();
					foreach($sapv_days[$vi] as $k_active_overall => $v_active_overall)
					{
						//$k_active_overall d.m.Y for $hospital_days_overall and $hospital_days
						$v_active_overall_alt = date('d.m.Y', strtotime($k_active_overall));
						if(!in_array($v_active_overall_alt, $hospital_days_overall[$vi]) && in_array($v_active_overall_alt, $active_days[$vi]) && (array_key_exists($k_active_overall, $day_course_activity_overall[$vi]) || array_key_exists($k_active_overall, $bayern_doc_visits_overall[$vi])) && !array_key_exists($k_active_overall, $sapv_days_denied_overall[$vi])
						)
						{
							if(!empty($sapv_vv_till_now[$k_active_overall]))
							{
								if(!in_array($k_active_overall, $hospiz_days_overall))
								{
// 									if(count($verordnet_passed_shortcuts[$vi][$sapv_vv_till_now[$k_active_overall]]) < '3')
// 									{
										$verordnet_passed_shortcuts[$vi][$sapv_vv_till_now[$k_active_overall]][] = 'KO1 - ' . $k_active_overall;
// 									}
								}
								else
								{
// 									if(count($verordnet_passed_shortcuts[$vi][$sapv_vv_till_now[$k_active_overall]]) < '3')
// 									{
										$verordnet_passed_shortcuts[$vi][$sapv_vv_till_now[$k_active_overall]][] = 'KO2 - ' . $k_active_overall;
// 									}
								}
							}
						}
					}

					//create master data for invoice
					$verordnet_mapping = array('1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'TV');
					$day_shortcuts[$vi] = array();

					//new tv does not require any visit or telefonat (ISPC-584)
					foreach($active_days_in_period[$vi] as $k_active_day => $v_active_day_alt)
					{
						//$v_active_day d.m.Y for $hospital_days_overall and $hospital_days
						$v_active_day = date('Y-m-d', strtotime($v_active_day_alt));
						$v_active_day_alt = date('d.m.Y', strtotime($v_active_day_alt));
						$master_data['invoices'][$vi][$v_active_day] = array();

						//exclude Range 3 price
						if(!array_key_exists($v_active_day, $sapv_days_denied[$vi]) && array_key_exists($v_active_day, $sapv_days[$vi]))
						{
							if(!in_array($v_active_day_alt, $hospiz_days[$vi]) && !in_array($v_active_day_alt, $hospital_days[$vi]))
							{
								if((array_key_exists($v_active_day, $bayern_doc_visits[$vi]) || array_key_exists($v_active_day, $day_course_activity[$vi])) && end($sapv_days[$vi][$v_active_day]) <= '2')
								{
									//ISPC-1350
//									if(end($sapv_days[$vi][$v_active_day]) == '2' && count($verordnet_passed_shortcuts[$vi][$sapv_days[$vi]['KOverordnets'][$v_active_day]]) < '3')
									if(end($sapv_days[$vi][$v_active_day]) == '2')
									{
										//Range 1 (KO) price - check verordnung
										$master_data['invoices'][$vi][$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1";
										$master_data['invoices'][$vi][$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1";
										$master_data['invoices'][$vi][$v_active_day]['price'] = $master_price_list[$vi][$v_active_day][0][$verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1"]['price'];
										$master_data['invoices'][$vi][$v_active_day]['qty'] = (count($bayern_doc_visits[$vi][$v_active_day]) + count($day_course_activity[$vi][$v_active_day]));
//										$verordnet_passed_shortcuts[$vi][$sapv_days[$vi]['KOverordnets'][$v_active_day]][] = 'KO1';
									}
									else if(end($sapv_days[$vi][$v_active_day]) < '2')
									{
										//Range 1 (ALL OTHER) prices - check verordnung
										if(end($sapv_days[$vi][$v_active_day]) == '1')
										{
											if(empty($day_shortcuts[$vi][$v_active_day]))
											{
												$master_data['invoices'][$vi][$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1";
												$master_data['invoices'][$vi][$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1";
												$master_data['invoices'][$vi][$v_active_day]['price'] = $master_price_list[$vi][$v_active_day][0][$verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1"]['price'];
												$master_data['invoices'][$vi][$v_active_day]['qty'] = (count($bayern_doc_visits[$vi][$v_active_day]) + count($day_course_activity[$vi][$v_active_day]));
											}
											$day_shortcuts[$vi][$v_active_day] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1";
										}
										else
										{
											$master_data['invoices'][$vi][$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1";
											$master_data['invoices'][$vi][$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1";
											$master_data['invoices'][$vi][$v_active_day]['price'] = $master_price_list[$vi][$v_active_day][0][$verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1"]['price'];
											$master_data['invoices'][$vi][$v_active_day]['qty'] = (count($bayern_doc_visits[$vi][$v_active_day]) + count($day_course_activity[$vi][$v_active_day]));
										}
									}
								}
								else if(end($sapv_days[$vi][$v_active_day]) > '2')
								{

									$master_data['invoices'][$vi][$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1";
									$master_data['invoices'][$vi][$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1";
									$master_data['invoices'][$vi][$v_active_day]['price'] = $master_price_list[$vi][$v_active_day][0][$verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "1"]['price'];
									$master_data['invoices'][$vi][$v_active_day]['qty'] += 1;
								}
							}
							else
							{
								if(!in_array($v_active_day_alt, $hospital_days[$vi]) && (array_key_exists($v_active_day, $bayern_doc_visits[$vi]) || array_key_exists($v_active_day, $day_course_activity[$vi])) && end($sapv_days[$vi][$v_active_day]) <= '2')
								{
//									if(end($sapv_days[$vi][$v_active_day]) == '2' && count($verordnet_passed_shortcuts[$vi][$sapv_days[$vi]['KOverordnets'][$v_active_day]]) < '3')
									if(end($sapv_days[$vi][$v_active_day]) == '2')
									{

//										print_r("type=2 - 1.1\n");
										//Range 2 (KO) price - check verordnung
										$master_data['invoices'][$vi][$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2";
										$master_data['invoices'][$vi][$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2";
										$master_data['invoices'][$vi][$v_active_day]['price'] = $master_price_list[$vi][$v_active_day][0][$verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2"]['price'];
										$master_data['invoices'][$vi][$v_active_day]['qty'] = (count($bayern_doc_visits[$vi][$v_active_day]) + count($day_course_activity[$vi][$v_active_day]));
//										$verordnet_passed_shortcuts[$vi][$sapv_days[$vi]['KOverordnets'][$v_active_day]][] = 'KO2';
									}
									else if(end($sapv_days[$vi][$v_active_day]) < '2')
									{
										//Range 2 (ALL OTHER) prices - check verordnung
										if(end($sapv_days[$vi][$v_active_day]) == '1')
										{
//											print_r("type=2 - 1.2.1\n");
											if(empty($day_shortcuts[$vi][$v_active_day]))
											{
												$master_data['invoices'][$vi][$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2";
												$master_data['invoices'][$vi][$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2";
												$master_data['invoices'][$vi][$v_active_day]['price'] = $master_price_list[$vi][$v_active_day][0][$verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2"]['price'];
												$master_data['invoices'][$vi][$v_active_day]['qty'] = (count($bayern_doc_visits[$vi][$v_active_day]) + count($day_course_activity[$vi][$v_active_day]));
											}
											$day_shortcuts[$vi][$v_active_day] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2";
										}
										else
										{
//											print_r("type=2 - 1.2.2\n");
											$master_data['invoices'][$vi][$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2";
											$master_data['invoices'][$vi][$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2";
											$master_data['invoices'][$vi][$v_active_day]['price'] = $master_price_list[$vi][$v_active_day][0][$verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2"]['price'];
											$master_data['invoices'][$vi][$v_active_day]['qty'] = (count($bayern_doc_visits[$vi][$v_active_day]) + count($day_course_activity[$vi][$v_active_day]));
										}
									}
								}
								else if(!in_array($v_active_day_alt, $hospital_days[$vi]) && end($sapv_days[$vi][$v_active_day]) > '2')
								{
//									print_r("type=2 - 2\n");

									$master_data['invoices'][$vi][$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2";
									$master_data['invoices'][$vi][$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2";
									$master_data['invoices'][$vi][$v_active_day]['price'] = $master_price_list[$vi][$v_active_day][0][$verordnet_mapping[end($sapv_days[$vi][$v_active_day])] . "2"]['price'];
									$master_data['invoices'][$vi][$v_active_day]['qty'] += 1;
								}
							}
						}
						else if(array_key_exists($v_active_day, $sapv_days_denied[$vi]))
						{

							//Range 3 price - check for verordnung
							$master_data['invoices'][$vi][$v_active_day]['sapv'][] = $verordnet_mapping[end($sapv_days_denied[$vi][$v_active_day])] . "3";
							$master_data['invoices'][$vi][$v_active_day]['shortcut'] = $verordnet_mapping[end($sapv_days_denied[$vi][$v_active_day])] . "3";
							$master_data['invoices'][$vi][$v_active_day]['price'] = $master_price_list[$vi][$v_active_day][0][$verordnet_mapping[end($sapv_days_denied[$vi][$v_active_day])] . "3"]['price'];
							$master_data['invoices'][$vi][$v_active_day]['qty'] = (count($bayern_doc_visits[$vi][$v_active_day]) + count($day_course_activity[$vi][$v_active_day]));
						}
					}
				}

				foreach($ipids as $k_m_item => $v_m_item)
				{
					$counted_days[$v_m_item] = array();
					foreach($master_data['invoices'][$v_m_item] as $k_m_day => $v_m_value)
					{
						if(count($counted_days[$v_m_item]) < $available_for_invoice[$v_m_item] && !empty($v_m_value['shortcut']))
						{
							$master_items[$v_m_item][$v_m_value['shortcut']]['shortcut'] = $v_m_value['shortcut'];
							$master_items[$v_m_item][$v_m_value['shortcut']]['price'] = $v_m_value['price'];
							$master_items[$v_m_item][$v_m_value['shortcut']]['custom'] = '0';
							$master_items[$v_m_item][$v_m_value['shortcut']]['name'] = $this->view->translate('shortcut_name_bayern_' . substr($v_m_value['shortcut'], 0, -1));

							//remove this if amount of visits is counted
							$master_items[$v_m_item][$v_m_value['shortcut']]['qty'] += 1;
							$master_items[$v_m_item][$v_m_value['shortcut']]['shortcut_total'] += $v_m_value['price'];
							$master_total[$v_m_item]['grand_total'] += $v_m_value['price'];

							$counted_days[$v_m_item][] = $k_m_day;
						}
					}

					if(count($master_data['invoices'][$v_m_item]) > '0')
					{
						$activity_days[$v_m_item] = array_keys($master_data['invoices'][$v_m_item]);
					}

					//$first_activity_day[$v_m_item] = date('d.m.Y', strtotime($activity_days[$v_m_item][0]));
					//$last_activity_day[$v_m_item] = date('d.m.Y', strtotime(end($activity_days[$v_m_item])));
					//Modified from ISPC 1035
					$first_activity_day[$v_m_item] = date('d.m.Y', strtotime($patient_sapv_active_days[$v_m_item][0]));
					$last_activity_day[$v_m_item] = date('d.m.Y', strtotime(end($patient_sapv_active_days[$v_m_item])));

					$master_data['patients'][$v_m_item]['invoice_data']['first_active_day'] = $first_activity_day[$v_m_item];
					$master_data['patients'][$v_m_item]['invoice_data']['last_active_day'] = $last_activity_day[$v_m_item];
					$master_data['items_invoices'] = $master_items;
				}

				$bayern_form = new Application_Form_BayernInvoicesNew();
				$master_data['invoiced_month'] = "0000-00-00 00:00:00";
				if(strlen($params['selected_period'][$ipid]['days_in_month']) > '0')
				{
					$master_data['invoiced_month'] = date('Y-m-d H:i:s', strtotime($params['selected_period'][$ipid]['start']));
				}

				$inserted_invoices = $bayern_form->insert_invoice($master_data);
			}
			else if($params['invoices'])
			{

				foreach($ipids as $k_ipids => $v_ipid_x)
				{
					$master_data['patients'][$v_ipid_x]['invoice_data']['hi_company_name'] = $healthinsu_multi_array[$v_ipid_x]['company_name'];
					$master_data['patients'][$v_ipid_x]['invoice_data']['insurance_no'] = $healthinsu_multi_array[$v_ipid_x]['insurance_no'];
				}

				$inserted_invoices = $params['invoices'];
			}


			if($params['get_pdf'] == "1")
			{
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$invoice_data = $bayern_invoices->getBayernInvoice($params['stornoid'], false, true);
					
					$invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];     //ISPC-2532 Lore 10.11.2020
					
					//ISPC-2532 Carmen 18.02.2020 - get the prefix and the number of storno invoice
					$invoice_data_storno = $bayern_invoices->get_invoice($inserted_invoices[0]);
					$invoice_data['prefix'] = $invoice_data_storno[0]['prefix'];
					$invoice_data['invoice_number'] = $invoice_data_storno[0]['invoice_number'];
					//--
				}
				else
				{
					//get inserted invoice data (used when user clicks the new abrechnung period)
					$invoice_data = $bayern_invoices->getBayernInvoice($inserted_invoices[0], false);
				}

				
				if(strlen($invoice_data['address']) > 0 ){
				    if(strpos($invoice_data['address'],"style"))
				    {
				        $invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
				    }
				    
				    $invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
				    $invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
				    $invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
				}
				
				$pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					if(is_numeric($last_pflege['stage']))
					{
						$invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
					}
					else
					{
						$invoice_data['patient_pflegestufe'] = " - ";
					}
				}
				else
				{
					$invoice_data['patient_pflegestufe'] = ' - ';
				}

				$tokens['debitoren_nummer_oder_pv'] = '';   
				//if ppun is active and patient has number saved in invoice db get ppun
				if($ppun_module == "1" && strlen($invoice_data['ppun']) > '0')
				{
					$tokens['ppun'] = $invoice_data['ppun'];
					$tokens['debitoren_nummer_oder_pv'] = $invoice_data['ppun'];
				}
				else
				{
					$tokens['ppun'] = '';
				}

				//if debtor number is active and patient has number saved in invoice db get debtor number
				if($debtor_number_module == "1" && strlen($invoice_data['debtor_number']) > '0')
				{
					$tokens['debtor_number'] = $invoice_data['debtor_number'];
					$tokens['debitoren_nummer_oder_pv'] = $invoice_data['debtor_number'];
				}
				else
				{
					$tokens['debtor_number'] = '';
				}

				//if ppun is active and patient has number saved in invoice db get ppun
				if($paycenter_module == "1" && strlen($invoice_data['paycenter']) > '0')
				{
					$tokens['paycenter'] = $invoice_data['paycenter'];
				}
				else
				{
					$tokens['paycenter'] = '';
				}

				//load template data
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'bayern_sapv_invoice');


				//client tokens
				if(strlen($invoice_data['client_ik']) > '0')
				{
					$tokens['client_ik'] = $invoice_data['client_ik'];
				}
				else
				{
					$tokens['client_ik'] = $client_details[0]['institutskennzeichen'];
				}

				//patient details tokens
				$tokens['patienten_id'] = strtoupper(html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
				$tokens['first_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
				$tokens['last_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
				$tokens['birthd'] = date('d.m.Y', strtotime($params['patient_days'][$invoice_data['ipid']]['details']['birthd']));
				$tokens['street'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
				$tokens['zip'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
				$tokens['city'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
				$tokens['patient_pflegestufe'] = html_entity_decode($invoice_data['patient_pflegestufe'], ENT_QUOTES, 'UTF-8');

				//health insurance tokens
				$tokens['insurance_no'] = html_entity_decode($master_data['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
// 				$tokens['address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');// bayern_sapv_invoice
				$tokens['address'] = htmlentities($invoice_data['address']);//bayern_sapv_invoice // TODO-2021
				$tokens['SAPV_Rechnungsempfaenger'] = htmlentities($master_data['patients'][$invoice_data['ipid']]['invoice_data']['sapv_recipient']);//ISPC-1236
				//invoice specific tokens
				$tokens['invoiced_month'] = "";
				if(!empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
				{
					$tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
				}

				$tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
				$tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');

				//invoice date
				if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970")
				{
					$tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
				}
				else
				{
					$tokens['invoice_date'] = '';
				}

				//start billed action day
				if($invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_active'])) != "1970")
				{
					$tokens['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
				}
				else
				{
					$tokens['first_active_day'] = '';
				}

				//end billed action day
				if($invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_active'])) != "1970")
				{
					$tokens['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
				}
				else
				{
					$tokens['last_active_day'] = '';
				}

				//first sapv day
				if($invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_sapv'])) != "1970")
				{
					$tokens['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
				}
				else
				{
					$tokens['first_sapv_day'] = '';
				}

				//last sapv day
				if($invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_sapv'])) != "1970")
				{
					$tokens['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));
				}
				else
				{
					$tokens['last_sapv_day'] = '';
				}

				//sapv approve date
				if($invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['sapv_approve_date'])) != "1970")
				{
					$tokens['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
				}
				else
				{
					$tokens['sapv_approve_date'] = '';
				}

				$tokens['sapv_approve_nr'] = html_entity_decode($invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');

				$tokens['footer'] = html_entity_decode($invoice_data['footer'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_items'] = $invoice_data['items'];


				if($invoice_data['storno'] == '1')
				{
					//rewrite invoice prefix if storned
					$tokens['prefix'] = 'STORNO_' . $tokens['prefix'];
				}

				//ISPC-2532 Lore 10.11.2020
				if($invoice_data_storno[0]['storno'] == '1') {
				    $tokens['full_invoice_number'] = ' Storno '.$tokens['full_invoice_number']; // ISPC-2532 Ancuta 11.12.2020- comment from 10.12.2020 - overwtite - and add STORNO in front
				    $tokens['full_invoice_number'] .= ' zur Rechnung '.$invoice_data['storned_invoice_number'];
				}
				
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$tokens['unique_id'] = $invoice_data['record_id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total'] * (-1)), '2', ',', '.');
				}
				else
				{
					$tokens['unique_id'] = $invoice_data['id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
				}

				//used in edit!
				//rewrite invoice_data with custom data (which comes from POST)
				if($params['custom_data'])
				{
					//rewrite custom data from POST to $invoice_data.
					foreach($params['custom_data'] as $k_custom => $v_custom)
					{
						$invoice_data[$k_custom] = $v_custom;
						$tokens[$k_custom] = $v_custom;
					}
				}
				$invoice_data['items'] = array_values($invoice_data['items']);

				if(count($invoice_data['items']) > '0')
				{
					//ISPC-1236 - new token invoice_items_html_short, without id
					$rows = count($invoice_data['items']);
					$grid = new Pms_Grid($invoice_data['items'], 1, $rows, "invoice_items_list_bay_pdf.html");
					$grid_short = new Pms_Grid($invoice_data['items'], 1, $rows, "invoice_items_list_nocustom_pdf_short.html");
					
					$grid->invoice_total = $tokens['invoice_total'];
					$grid->max_entries = $rows;
					
					$grid_short->invoice_total = $tokens['invoice_total'];
					$grid_short->max_entries = $rows;

					$html_items = $grid->renderGrid();
					$html_items_short = $grid_short->renderGrid();
				}

				if($_REQUEST['zzz1'] == '1')
				{
					print_r("<pre>");
					print_r($html_items);
					print_r("</pre>");
					exit;
				}
				$tokens['invoice_items_html'] = $html_items;
				$tokens['invoice_items_html_short'] = $html_items_short;


				if($template_data)
				{
					$this->generate_file($template_data[0], $tokens,'pdf');
					
					exit;
				}
				else
				{
					$this->redirect(APP_BASE . 'invoicenew/newinvoicepatientlist?list=' . $_REQUEST['list'] . '&flg=notemplate');
					exit;
				}
			}



			if($params['batch_print'] == '1' && count($params['invoices']) > '0')
			{
				//batch temp folder
				$batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $clientid);
				$invoices_ids = $params['invoices'];
				
				//load template data
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'bayern_sapv_invoice');
				
				//load invoices data
				$invoices_data = $bayern_invoices->get_invoices($invoices_ids);

				//TODO-3407 Ancuta 08.09.2020
				if(empty($invoices_data)){
				    return;
				}
				// -- 
				
				//ISPC-2472 Ancuta
				$inv_names = array();
				foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
				    $inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
				}
				$Batch_name = false;
				if(!empty($inv_names)){
				    $Batch_name = $inv_names[0];
				    if( count($inv_names) > 1){
				        $Batch_name .='_'.end($inv_names);
				    }
				}
				//--				
				
				//patient days
				$conditions['client'] = $clientid;
				$conditions['ipids'] = $invoices_data['invoices_ipdis'];
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');

				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

				//be aware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);

				foreach($invoices_data['invoices_data'] as $k_invoice_id => $v_invoice_data)
				{
				    // Clean styles from address
				    if(strlen($v_invoice_data['address']) > 0 ){
				        if(strpos($v_invoice_data['address'],"style"))
				        {
				            $v_invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $v_invoice_data['address']);
				        }
				        
				         $v_invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"",  $v_invoice_data['address']);
				         $v_invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"",  $v_invoice_data['address']);
				         $v_invoice_data['address'] = str_replace(array("\n"),"<br />",  $v_invoice_data['address']);
				        
				    }
				    
				    
					//fucking pflegestuffe i hate how this shit is saved!!! -- change this shit sometime to a better way
					$pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($v_pat_ipid, date('Y-m-d', strtotime($invoice_data['invoice_start'])), date('Y-m-d', strtotime($invoice_data['invoice_end'])));

					if($pflege_arr)
					{
						$last_pflege = end($pflege_arr);
						if(is_numeric($last_pflege['stage']))
						{
							$invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
						}
						else
						{
							$invoice_data['patient_pflegestufe'] = " - ";
						}
					}
					else
					{
						$invoice_data['patient_pflegestufe'] = ' - ';
					}

					//setup tokens
					//client tokens
					$tokens_multi['client_ik'] = $client_details[0]['institutskennzeichen'];

					$tokens_multi['debitoren_nummer_oder_pv'] = '';
					//if ppun is active and patient has number saved in invoice db get ppun
					if($ppun_module == "1" && strlen($invoice_data['ppun']) > '0')
					{
						$tokens_multi['ppun'] = $invoice_data['ppun'];
						$tokens_multi['debitoren_nummer_oder_pv'] = $invoice_data['ppun'];
					}
					else
					{
						$tokens_multi['ppun'] = '';
					}

					//if debtor number is active and patient has number saved in invoice db get debtor number
					if($debtor_number_module == "1" && strlen($invoice_data['debtor_number']) > '0')
					{
						$tokens_multi['debtor_number'] = $invoice_data['debtor_number'];
						$tokens_multi['debitor_number'] = $invoice_data['debtor_number'];
						$tokens_multi['debitoren_nummer_oder_pv'] = $invoice_data['debtor_number'];
					}
					else
					{
						$tokens_multi['debtor_number'] = '';
						$tokens_multi['debitor_number'] = '';
					}

					
					//if ppun is active and patient has number saved in invoice db get ppun
					$found_paycenter ="";
					if($paycenter_module == "1")
					{
					    if(strlen($invoice_data['paycenter']) > '0'){
    					    
		  				    $tokens_multi['paycenter'] = $invoice_data['paycenter'];
		  				    
	   				    } elseif($patient_days[$v_invoice_data['ipid']]['details']['zip'] > 0)
	   				    {
	   				        $found_paycenter = $paycenters->get_paycenter($patient_days[$v_invoice_data['ipid']]['details']['zip'], $clientid);
	   				        
	   				        if($found_paycenter)
	   				        {
    		  				    $tokens_multi['paycenter'] = $found_paycenter;
	   				        } else{
    		  				    $tokens_multi['paycenter'] = "";
	   				        }
	   				    
	   				    }
					}
					else
					{
						$tokens_multi['paycenter'] = '';
					}
					
					/* if($paycenter_module == "1" && strlen($invoice_data['paycenter']) > '0')
					{
						$tokens_multi['paycenter'] = $invoice_data['paycenter'];
					}
					else
					{
						$tokens_multi['paycenter'] = '';
					} */
					
					
					
					//patient details tokens
					$tokens_multi['patienten_id'] = strtoupper(html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
					$tokens_multi['first_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['last_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['birthd'] = date('d.m.Y', strtotime($patient_days[$v_invoice_data['ipid']]['details']['birthd']));
					$tokens_multi['street'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['zip'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['city'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['patient_pflegestufe'] = $v_invoice_data['patient_pflegestufe'];

					//health insurance tokens
					//$tokens_multi['insurance_no'] = html_entity_decode($patient_days['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['insurance_no'] = html_entity_decode($master_data['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'] , ENT_QUOTES, 'UTF-8');
					//$tokens_multi['address'] = html_entity_decode($v_invoice_data['address'], ENT_QUOTES, 'UTF-8');//bayern_sapv_invoice
					$tokens_multi['address'] = htmlentities($v_invoice_data['address']);//bayern_sapv_invoice // TODO-2021
					$tokens_multi['SAPV_Rechnungsempfaenger'] = htmlentities($master_data['patients'][$v_invoice_data['ipid']]['invoice_data']['sapv_recipient']);//ISPC-1236
					//invoice specific tokens
					$tokens_multi['invoiced_month'] = "";
					if(!empty($v_invoice_data['invoiced_month']) && $v_invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
					{
						$tokens_multi['invoiced_month'] = date('m/Y', strtotime($v_invoice_data['invoiced_month']));
					}

					$tokens_multi['prefix'] = html_entity_decode($v_invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['invoice_number'] = html_entity_decode($v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['full_invoice_number'] = html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');

					//invoice date
					if($v_invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['completed_date'])) != "1970")
					{
						$tokens_multi['invoice_date'] = date('d.m.Y', strtotime($v_invoice_data['completed_date']));
					}
					else
					{
						$tokens_multi['invoice_date'] = '';
					}

					//start billed action day
					if($v_invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_active'])) != "1970")
					{
						$tokens_multi['first_active_day'] = date('d.m.Y', strtotime($v_invoice_data['start_active']));
					}
					else
					{
						$tokens_multi['first_active_day'] = '';
					}

					//end billed action day
					if($v_invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_active'])) != "1970")
					{
						$tokens_multi['last_active_day'] = date('d.m.Y', strtotime($v_invoice_data['end_active']));
					}
					else
					{
						$tokens_multi['last_active_day'] = '';
					}

					//first sapv day
					if($v_invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_sapv'])) != "1970")
					{
						$tokens_multi['first_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['start_sapv']));
					}
					else
					{
						$tokens_multi['first_sapv_day'] = '';
					}

					//last sapv day
					if($v_invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_sapv'])) != "1970")
					{
						$tokens_multi['last_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['end_sapv']));
					}
					else
					{
						$tokens_multi['last_sapv_day'] = '';
					}

					//sapv approve date
					if($v_invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['sapv_approve_date'])) != "1970")
					{
						$tokens_multi['sapv_approve_date'] = date('d.m.Y', strtotime($v_invoice_data['sapv_approve_date']));
					}
					else
					{
						$tokens_multi['sapv_approve_date'] = '';
					}

					$tokens_multi['sapv_approve_nr'] = html_entity_decode($v_invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');

					$tokens_multi['footer'] = html_entity_decode($v_invoice_data['footer'], ENT_QUOTES, 'UTF-8');

					if($v_invoice_data['storno'] == '1')
					{
						//rewrite invoice prefix if storned
						$tokens_multi['prefix'] = 'STORNO_' . $tokens['prefix'];
						$tokens_multi['unique_id'] = $v_invoice_data['record_id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total'] * (-1)), '2', ',', '.');
					}
					else
					{
						$tokens_multi['unique_id'] = $v_invoice_data['id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total']), '2', ',', '.');
					}

					if(count($v_invoice_data['items']) > '0')
					{
						//ISPC-1236 - new token invoice_items_html_short, without id
						$rows = count($v_invoice_data['items']);

						$grid = new Pms_Grid($v_invoice_data['items'], 1, $rows, "invoice_items_list_bay_pdf.html");
						$grid_short = new Pms_Grid($v_invoice_data['items'], 1, $rows, "invoice_items_list_nocustom_pdf_short.html");
						
						$grid->invoice_total = $tokens_multi['invoice_total'];
						$grid->max_entries = $rows;
						
						$grid_short->invoice_total = $tokens_multi['invoice_total'];
						$grid_short->max_entries = $rows;

						$html_items = $grid->renderGrid();
						$html_items_short = $grid_short->renderGrid();
					}
					else 
					{
						$html_items = "";
						$html_items_short = "";
					}

					$tokens_multi['invoice_items_html'] = $html_items;
					$tokens_multi['invoice_items_html_short'] = $html_items_short;

					if($template_data)
					{
					    if(isset($params['print_job']) && $params['print_job'] == '1'){
					        
					        $print_params = array();
					        $print_params = $params;
					        $print_params['template_data'] = $template_data[0];
					        $print_params['vars'] = $tokens_multi;
					        $print_params['export_file_type'] = "pdf";
					        
					        $batch_temp_files = $this->print_job_generate_and_save_file($print_params);
					        
					        return $batch_temp_files ;
					        
					    } else{
						  $temp_files[] = $this->generate_file($template_data[0], $tokens_multi, 'docx', $batch_temp_folder, 'generate');
					    }
					}
				}

				if(count($temp_files) > '0')
				{
					//final cleanup (check if files are on disk)
					foreach($temp_files as $k_temp => $v_file)
					{
						if(!is_file($v_file))
						{
							//remove unexisting files
//							$unsetted_files[] = $v_file; //for debugs
							unset($temp_files[$v_file]);
						}
					}

					$remaining_temp_files = array_values(array_unique($temp_files));

					if(count($remaining_temp_files) > '0')
					{
					    //ISPC-2472 Ancuta 12.11.2019
						$final_file = $this->generate_file($template_data[0], false, 'pdf', $batch_temp_folder, 'merge', $temp_files,$Batch_name);
					}
				}
				if ( ! isset($params['print_job']) && $params['print_job'] == '1' ){
				    
				} else {
				    exit;
				}
			}
		}

		public function bayernsapvinvoiceAction()
		{
			if($_REQUEST['patient'])
			{
				$ipid = Pms_CommonData::get_ipid_from_epid($_REQUEST['patient'], $this->clientid);

				//patient days
				$conditions['client'] = $this->clientid;
				$conditions['ipids'] = array($ipid);
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');

				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

				//beware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);

				if($_REQUEST['sapvid'])
				{
					$selected_sapv_falls = array($ipid => $_REQUEST['sapvid']);

					//get patients sapvs last fall
					$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid), true);

					foreach($selected_sapv_falls as $k_ipid => $fall_id)
					{
						$patients_sapv[$k_ipid] = $fall_id;
						$patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
					}

					$params['nosapvperiod'][$ipid] = '0';
					$params['period'] = $patients_selected_periods;
				}
				else if($_REQUEST['list'])
				{
					//construct curent month period days
					$selected_month = $_REQUEST['list'];
					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}

					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
					$month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);

					array_walk($month_days_arr, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$months_details[$selected_month]['days'] = $month_days_arr;

					//get sapv periods in curent month period and make days
					if($months_details)
					{
//						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
						$sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);

						$patients_selected_periods = array();
						foreach($sapv_array as $k_sapv => $v_sapv)
						{
							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}

							if(empty($patients_selected_periods))
							{
								$patients_selected_periods = array();
							}

							$patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
							array_walk($patients_selected_periods, function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$patients_selected_periods = array_values(array_unique($patients_selected_periods));
							$existing_sapv_days = $patients_selected_periods;
						}

						$patients_selected_periods = array_values(array_unique($patients_selected_periods));
						$sapv_days_in_period = array_intersect($month_days_arr, $patients_selected_periods);
					}

					$params['nosapvperiod'][$ipid] = '1';
					$params['selected_period'][$ipid] = $months_details[$selected_month];
					$params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
					$params['existing_sapv_days'] = array_values($patients_selected_periods);
					$params['period'][$ipid] = $months_details[$selected_month];
				}
				else if(!empty($_REQUEST['admission']))
				{
					$selected_period = $_REQUEST['admission'];
					$admission_start = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['start'];
					$admission_end = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['end'];

					$period_days_arr = PatientMaster::getDaysInBetween($admission_start, $admission_end);

					array_walk($period_days_arr, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$period_details[$selected_period]['start'] = $admission_start;
					$period_details[$selected_period]['end'] = $admission_end;
					$period_details[$selected_period]['days'] = $period_days_arr;

					//get sapv periods in curent month period and make days
					if($period_details[$selected_period])
					{
//						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_period]['start'], $months_details[$selected_period]['end']);
						$sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $period_details[$selected_period]['start'], $period_details[$selected_period]['end']);

						$patients_selected_periods = array();
						foreach($sapv_array as $k_sapv => $v_sapv)
						{
							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}

							if(empty($patients_selected_periods))
							{
								$patients_selected_periods = array();
							}

							$patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
							array_walk($patients_selected_periods, function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$patients_selected_periods = array_values(array_unique($patients_selected_periods));
							$existing_sapv_days = $patients_selected_periods;
						}

						$patients_selected_periods = array_values(array_unique($patients_selected_periods));
						$sapv_days_in_period = array_intersect($period_days_arr, $patients_selected_periods);
					}

					$params['nosapvperiod'][$ipid] = '1';
					$params['admissionid'][$ipid] = $selected_period;
					$params['selected_period'][$ipid] = $period_details[$selected_period];
					$params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
					$params['existing_sapv_days'] = array_values($patients_selected_periods);
					$params['period'][$ipid] = $period_details[$selected_period];
				}

				$all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipid);

				foreach($all_patients_sapvs as $k_sapv => $v_sapv)
				{
					if(empty($sapv_days_overall))
					{
						$sapv_days_overall = array();
					}


					$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

					if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
					{
						$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
					}
					else
					{
						$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
					}


					$sapv_days_overall = array_merge($sapv_days_overall, PatientMaster::getDaysInBetween($start, $end));
					array_walk($sapv_days_overall, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$sapv_days_overall = array_values(array_unique($sapv_days_overall));
				}
				$params['sapv_overall'][$ipid] = array_values($sapv_days_overall);
			}

			$params['ipids'] = array($ipid);
			$params['patient_sapvs'] = $patients_sapv[$ipid];
			$params['patient_days'] = $patient_days;
			$params['get_pdf'] = '1';
			$params['only_pdf'] = (int) $_REQUEST['only_invoice'];
			$params['stornopdf'] = (int) $_REQUEST['stornopdf'];
			$params['stornoid'] = (int) $_REQUEST['stornoid'];
			$params['invoices'] = array((int) $_REQUEST['iid']);
			if(isset($_REQUEST['redirect2new']) && $_REQUEST['redirect2new'] == 1) {
                $params['redirect2new'] = 1;
			}
//			print_r($params);
//			exit;
			$this->bayern_sapv_invoice($params);
		}

		public function bayerninvoicesAction()
		{
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$bay_invoices = new BayernInvoicesNew();
			$bay_invoices_items = new BayernInvoiceItems();
			$bay_invoices_form = new Application_Form_BayernInvoicesNew();
			$clientid = $this->clientid;
			
			//ISPC-2609 Ancuta 28.08.2020 + Changes on  07.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "new_bayern_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$this->userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$this->userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			if(count($invoice_user_printjobs) > 1 ){
			    echo $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			

			$modules = new Modules();
			if($modules->checkModulePrivileges("89", $clientid)) // change tab name
			{
				$this->view->change_tab_name = 1;
			}
			else
			{
				$this->view->change_tab_name = 0;
			}
			
			//TODO-3112 - Ancuta 28.04.2020
			//get invoices type allowed from menu permissions
			$client_menu_perms = Doctrine_Query::create()
			->select('*')
			->from('MenuClient')
			->andWhere('clientid = ?', $clientid);
			$client_menu_permssions = $client_menu_perms->fetchArray();
			
			$allowed_menu_links = array();
			if(!empty($client_menu_permssions)){
			    
			    foreach($client_menu_permssions as $val)
			    {
			        $menu_perms[] = $val['menu_id'];
			    }
			    
			    if(!empty($menu_perms)){
			        
				    $menus_cl = Doctrine_Query::create()
				    ->select('id, menu_link, parent_id, isdelete')
				    ->from('Menus m')
				    ->where('m.isdelete = "0"')
				    ->andWhereIn("m.id", $menu_perms)
				    ->andWhere('m.isdelete = 0')
				    ->andWhere('m.forsuperadmin = 0')
				    ->andWhere('m.menu_link LIKE "%invoice/%" or m.menu_link LIKE "%invoicenew/%" or m.menu_link LIKE "%internalinvoice/%"')
				    ->orderBy('m.sortorder ASC');
				    $menus_cl_arr = $menus_cl->fetchArray();
			    
				    foreach($menus_cl_arr as $k_menu => $v_menu)
				    {
				        if(strlen($v_menu['menu_link']) > 0)
				        {
				            $allowed_menu_links[] = $v_menu['menu_link'];
				        }
				    }
				}
			}
					
			//TODO-3112 Lore 23.04.2020
			if(in_array('invoicenew/bayerninvoices', $allowed_menu_links) && in_array('invoicenew/invoicesnew', $allowed_menu_links) ){
			    $redirect_url = APP_BASE . 'invoicenew/invoicesnew';
			} else {
			    if(in_array('invoicenew/bayerninvoices', $allowed_menu_links)){
			        $redirect_url = APP_BASE . 'invoicenew/bayerninvoices';
			    } else {
			        $redirect_url = APP_BASE . 'invoicenew/invoicesnew';
			    } 
			}
			//.
			//echo "<pre/>";
			//print_r($allowed_menu_links);exit();
			//mark invoice as paid from invoices list link
			if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
			{
				if($_REQUEST['mode'] == "paid")
				{
					//mark as paid
					$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
					$invoice_pay_data['paymentAmount'] = '0.00';
					$invoice_pay_data['paymentComment'] = "";
					$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
					$invoice_pay_data['mark_as_paid'] = "1";

					$new_payment = $bay_invoices_form->submit_payment($invoice_pay_data);
					$this->_redirect($redirect_url);//TODO-3112 - Ancuta 28.04.2020 //$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
					exit;
				}
			}

			if($this->getRequest()->isPost())
			{
				if($_POST['draftmore'] == "1")
				{
					$transform = $bay_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $bay_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				elseif($_POST['archive_invoices_more'] == "1")
				{
					$archive = $bay_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
				}
				elseif($_POST['warningmore'] == "1")
				{
					$invoiceids_to_warn = implode(',', $_POST['document']);
				
					$this->forward('generatereminderinvoice', null, null, array('oldaction' => 'bayerninvoices'));
				
					return;
				}
				elseif(!empty($_POST['batch_print_more']))
				{
				    
					$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
					$params['batch_print'] = '1'; //enables batch print procedure
					$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
					$params['get_pdf'] = '0'; //stops downloading single pdf
					
					//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
					if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
					    
    					$this->bayern_sapv_invoice($params);
					    
					} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
					
    					$params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
					
    					$print_job_data = array();
    					$print_job_data['clientid'] = $this->clientid;
    					$print_job_data['user'] = $this->userid;
    					$print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
    					$print_job_data['output_type'] = 'pdf';
    					$print_job_data['status'] = 'active';
    					$print_job_data['invoice_type'] = 'new_bayern_invoice';
    					$print_job_data['print_params'] = serialize($params);
    					$print_job_data['print_function'] = 'bayern_sapv_invoice';
    					$print_job_data['print_controller'] = $this->getRequest()->getControllerName();
    					
    					foreach($_POST['document'] as $k=>$inv_id){
    					    $print_job_data['PrintJobsItems'][] = array(
    					        'clientid'=>$print_job_data['clientid'],
    					        'user'=>$print_job_data['user'],
    					        'invoice_id'=>$inv_id,
    					        'invoice_type'=>$print_job_data['invoice_type'],
    					        'status'=>"new"
    					    );
    					}
    					
    					$PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
    					$print_id = $PrintJobsBulk_obj->id;
    					
    					if($print_id){
    					    $this->__StartPrintJobs();
    					}
    					
    					
    					//ISPC-2609 Ancuta 07.09.2020
    					$msg="";
    					if($print_id){
    					    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
    					}
    					
    					//$this->_redirect($redirect_url);
    					$this->_redirect($redirect_url.$msg);
    					//--
    					exit;
					}
					
					
				}
				else if(!empty($_POST['csv_export']))
				{
					BayernInvoicesNew::generatecsv($_POST, $clientid);
				}
				else if(!empty($_POST['invoiceId']))
				{
					$post = $_POST;
					$post["mark_as_paid"] = "0";
					$new_payment = $bay_invoices_form->submit_payment($post);
				}
				
				//ISPC-2609 Ancuta 07.09.2020
				$msg="";
				if($print_id){
				    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				}
				
				//$this->_redirect($redirect_url);//TODO-3112 - Ancuta 28.04.2020 //$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');//to avoid resubmission
				$this->_redirect($redirect_url.$msg);//TODO-3112 - Ancuta 28.04.2020 //$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');//to avoid resubmission
                //--			
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$clone_record = $bay_invoices->create_storno_invoice($invoiceid);
					
					
					//ISPC-2312 Ancuta 07.12.2020
					if($_REQUEST['redirect2new'] == '1'){
					    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bayern_sapv_invoice');
					    exit();
					}
					
					$this->_redirect($redirect_url.'?flg=suc');//TODO-3112 - Ancuta 28.04.2020 //$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');//to avoid resubmission
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $bay_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
				    $this->_redirect($redirect_url.'?flg=delsuc');//TODO-3112 - Ancuta 28.04.2020 //$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delsuc');
				}
				else
				{
				    $this->_redirect($redirect_url.'?flg=delerr');//TODO-3112 - Ancuta 28.04.2020 //$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=delerr');
				}
			}

			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
		}

		public function fetchbayinvoicelistAction()
		{
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');

			$users = new User();
			$warnings = new RemindersInvoice();
			$modules = new Modules();
			$bay_invoices_payments = new BayernInvoicePaymentsNew();

			$clientid = $this->clientid;
			
			if($modules->checkModulePrivileges("170", $clientid))
			{
				$this->view->create_bulk_warnings = "1";
			}
			else
			{
				$this->view->create_bulk_warnings = "0";
			}
			
			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('BayernInvoicesNew')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);


			// get client data
			$client_details_m = new Client();
			$client_details = $client_details_m->getClientDataByid($clientid);

			$invoice_due_days = $client_details[0]['invoice_due_days'];
			$plus_due_days = '+' . $invoice_due_days . ' days';
			$this->view->plus_due_days = $plus_due_days;


			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{
				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND isdelete=0 AND isarchived ="0"';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") AND isarchived ="0"';
					break;

				case 'overdue':
// 					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND DATE(NOW()) > DATE(completed_date)  AND isdelete=0 AND isarchived ="0"';
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
					break;

				case 'all':
					$filters['hiinvoice'] = ' AND isarchived ="0"';
					break;
				case 'archived':
					$filters['hiinvoice'] = ' AND isarchived ="1" AND isdelete=0';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';
					break;
			}

			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($this->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				//filter patients name/surname/epid
				$f_patient = Doctrine_Query::create()
					->select($sql)
					->from('PatientMaster p')
					->where("p.isdelete =0")
					->leftJoin("p.EpidIpidMapping e")
					->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);
				$f_patients_res = $f_patient->fetchArray();

				$f_patients_ipids[] = '9999999999999';
				foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
				{
					$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
				}
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BayernInvoicesNew')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$invoices_counting->andWhereIn('ipid', $f_patients_ipids);
			}

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
// 				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($v_inv2count['completed_date']))) && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["overdue"][] = '1';
				}

				if($v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["all"][] = '1';
				}

				if($v_inv2count['isarchived'] == "1")
				{
					$status_count_invoices["archived"][] = '1';
				}
			}
			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BayernInvoicesNew')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$del_invoices_counting->andWhereIn('ipid', $f_patients_ipids);
			}
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}

			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('BayernInvoicesNew')
				->where("client='" . $clientid . "'" . $filters['hiinvoice']);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$invoices_nl->andWhereIn('ipid', $f_patients_ipids);
			}
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";


			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->leftJoin("p.EpidIpidMapping e")
				->where('e.clientid = ' . $clientid);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$patient->andWhereIn('p.ipid', $f_patients_ipids);
			}
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
				    //BayernInvoicesNew
					$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [NEW]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('BayernInvoicesNew')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();

			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $bay_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);
			
			$all_warnings = $warnings->get_reminders($invoice_ids, 'bayern_sapv_invoice', $clientid);
			 
			foreach ($invoicelimit as &$row) {
				if (isset($all_warnings[$row['id']])) {
					$row['InvoiceWarnings'] = $all_warnings[$row['id']];
				}
			}
			//var_dump($invoicelimit); exit;
			
			$this->view->storned_invoces = BayernInvoicesNew::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function bayernlistpaymentsAction()
		{

			$this->_helper->viewRenderer->setNoRender();
			$clientid = $this->clientid;
			$bayinvoices = new BayernInvoicesNew();
			$baypayments = new BayernInvoicePaymentsNew();
			$bayinvoice_form = new Application_Form_BayernInvoicesNew();

			$user = new User();

			//get allowed client invoices
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
			$this->view->allowed_invoice = $client_allowed_invoice[0];

			if($_REQUEST['invoiceid'])
			{
				$payments = $baypayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $baypayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $baypayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));


						$invoice_details = $bayinvoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $bayinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $baypayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoicenew/bayernlistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				print_r("no_invoice");
				exit;
			}
		}

		public function editbayerninvoiceAction()
		{
			$clientid = $this->clientid;
			$modules = new Modules();
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$bayern_invoices = new BayernInvoicesNew();
			$bayern_invoices_items = new BayernInvoiceItems();
			$bayern_invoices_form = new Application_Form_BayernInvoicesNew();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);

			if($modules->checkModulePrivileges("88", $this->clientid))
			{
				$ppun_module = "1";
			}
			else
			{
				$ppun_module = "0";
			}

			if($modules->checkModulePrivileges("90", $this->clientid))
			{
				$debtor_number_module = "1";
			}
			else
			{
				$debtor_number_module = "0";
			}

			if($modules->checkModulePrivileges("91", $this->clientid))
			{
				$paycenter_module = "1";
			}
			else
			{
				$paycenter_module = "0";
			}

			$this->view->ppun_module = $ppun_module;
			$this->view->debtor_number_module = $debtor_number_module;
			$this->view->paycenter_module = $paycenter_module;


			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $bayern_invoices->getBayernInvoice($invoice_id);


				if(in_array($invoice_data['id'], BayernInvoicesNew::get_storned_invoices($clientid)))
				{
					$this->view->has_storno = '1';
				}
				else
				{
					$this->view->has_storno = '0';
				}

				if(!$invoice_id && empty($invoice_data))
				{
				    //ISPC-2312 Ancuta 07.12.2020
				    if($_REQUEST['redirect2new'] == '1'){
				        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bayern_sapv_invoice');
				        exit();
				    }  
				    //--
//					$this->_redirect(APP_BASE . 'invoicenew/bayerninvoices');
					$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
				}

// 				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');				
				$patient_details = $patientmaster->getMasterData(null, false, null, $invoice_data['ipid']);
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];

				//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}

					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}


				if($hi_perms_divisions)
				{

					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
				}

				$pathealthinsurancenr = "";
				if(count($healthinsu_array[0]))
				{
					$phi_details = $healthinsu_array[0]['name'];
				}
				else
				{
					$phi_details = "--";
				}

				$phi_details_sub = $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$this->view->health_insurance = $phi_details;
				$this->view->hi_subdiv_address = $phi_details_sub;


				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}


				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}

				if(strlen($invoice_data['footer']) == 0)
				{
					$invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				}

				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->client_details = $client_detail[0];

				$this->view->read_only_items = '0';
				if($invoice_data['status'] == '2' || $invoice_data['status'] == '3' || $invoice_data['status'] == '5')
				{
					$this->view->read_only_items = '1';
				}
			}


			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']) && empty($_REQUEST['pdf']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if(!empty($_POST['paid']))
				{
					//mark as paid
					$invoice_pay_data['invoiceId'] = $_REQUEST['invoiceid'];
					$invoice_pay_data['paymentAmount'] = '0.00';
					$invoice_pay_data['paymentComment'] = "";
					$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
					$invoice_pay_data['mark_as_paid'] = "1";

					$new_payment = $bayern_invoices_form->submit_payment($invoice_pay_data);

					//ISPC-2312 Ancuta 07.12.2020
					if($_REQUEST['redirect2new'] == '1'){
					    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bayern_sapv_invoice');
					    exit();
					}
					//--
					$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
					exit;
				}

				if(empty($_REQUEST['pdf']))
				{
					if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
					{
						$high_invoice_nr = $bayern_invoices->get_next_invoice_number($clientid);


						$_POST['prefix'] = $high_invoice_nr['prefix'];
						$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
					}
					else
					{
						$_POST['prefix'] = $invoice_data['prefix'];
						$_POST['invoice_number'] = $invoice_data['invoice_number'];
					}
					//save here
					if(strlen($_POST['invoice']['address']) > 0 ){
					    if(strpos($_POST['invoice']['address'],"style"))
					    {
					        $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
					    }
    				    $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
    				    $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
    				    $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
					}
						
					$edit_invoice = $bayern_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);

					//ISPC-2312 Ancuta 07.12.2020
					if($_REQUEST['redirect2new'] == '1'){
					    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bayern_sapv_invoice');
					    exit();
					}
					//--
					
					if($edit_invoice)
					{

						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?invoiceid=' . $_REQUEST['invoiceid'] . '&flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?invoiceid=' . $_REQUEST['invoiceid'] . '&flg=edterr');
					}
				}
			}
			else if((!empty($_REQUEST['pdf']) || $_POST['pdf']) && !empty($_REQUEST['invoiceid']))
			{	
			    
			    if(strlen($_POST['invoice']['address']) > 0 ){
				    if(strpos($_POST['invoice']['address'],"style"))
				    {
				        $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
				    }
				    $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
				}
 
				
				foreach($_POST['row'] as $k_item => $v_custom)
				{
					$new_invoice_items[] = array(
						'shortcut' => $_POST['shortcut'][$k_item],
						'name' => $_POST['name'][$k_item],
						'description' => $_POST['name'][$k_item],
						'qty' => $_POST['qty'][$k_item],
						'price' => Pms_CommonData::str2num($_POST['price'][$k_item]),
						'total' => Pms_CommonData::str2num($_POST['total'][$k_item]),
						'custom' => $v_custom,
					);
				}
				$params['ipids'] = array($invoice_data['ipid']);

				//patient days
				$conditions['client'] = $this->clientid;
				$conditions['ipids'] = array($invoice_data['ipid']);
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');

				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

				//be aware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);

				$params['invoices'] = array($invoice_data['id']);
				$params['patient_days'] = $patient_days;
				$params['get_pdf'] = '1';
				$params['only_pdf'] = 1;
				$_REQUEST['type'] = 'pdf';

				$params['custom_data']['address'] = $_POST['invoice']['address'];
				$params['custom_data']['footer'] = $_POST['footer'];
				$params['custom_data']['invoice_total'] = number_format($_POST['invoice_total'], '2', ',', '.');
				$params['custom_data']['items'] = $new_invoice_items;

				$this->bayern_sapv_invoice($params);
				exit;
			}
		}

		public function createcustominvoiceAction()
		{
			$ppun = new PpunIpid();
			$modules = new Modules();
			$paycenters = new Paycenters();
			$bayern_invoices_form = new Application_Form_BayernInvoicesNew();

			if($modules->checkModulePrivileges("88", $this->clientid))
			{
				$ppun_module = "1";
			}
			else
			{
				$ppun_module = "0";
			}

			if($modules->checkModulePrivileges("90", $this->clientid))
			{
				$debtor_number_module = "1";
			}
			else
			{
				$debtor_number_module = "0";
			}

			if($modules->checkModulePrivileges("91", $this->clientid))
			{
				$paycenter_module = "1";
			}
			else
			{
				$paycenter_module = "0";
			}

			//ISPC-2747 Lore 09.12.2020
			if(strlen($_REQUEST['redirect2new']) > 0){
			    $this->view->redirect2new = $_REQUEST['redirect2new'];
			} else {
			    $this->view->redirect2new = '0';
			}
			
			$this->view->ppun_module = $ppun_module;
			$this->view->debtor_number_module = $debtor_number_module;
			$this->view->paycenter_module = $paycenter_module;

			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();

			$ipid_sel = false;
			if(strlen($_REQUEST['pid']) > 0)
			{
				//another patient selected
				$decid_sel = Pms_Uuid::decrypt($_REQUEST['pid']);
				$ipid_sel = Pms_CommonData::getIpid($decid_sel);

				$this->view->show_pat_modal = "0";
			}
			else
			{
				$this->view->show_pat_modal = "1";
			}


			if($ipid_sel !== false)
			{
				$client_details = Pms_CommonData::getClientData($this->clientid);

				//get invoice selected patient data
				//patient days
				$conditions['client'] = $this->clientid;
				$conditions['ipids'] = array($ipid_sel);
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');

				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

				//beware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);

				//patient HEALTH INSURANCE START
				$healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance(array($ipid_sel), true);

				//multiple hi subdivisions && hi subdivisions permissions
				$divisions = HealthInsurancePermissions::getClientHealthInsurancePermissions($this->clientid);

				if($divisions)
				{
					foreach($healthinsu_multi_array as $k_hi => $v_hi)
					{
						$hi_companyids[] = $v_hi['companyid'];
					}

					$healthinsu_subdiv_arr = PatientHealthInsurance2Subdivisions::get_hi_subdivisions_multiple($hi_companyids);
				}

				$hi_address[$ipid_sel] = array();
				$this->view->privatepatient = $healthinsu_multi_array[$ipid_sel]['privatepatient'];


				//ppun
				if($ppun_module == "1" && $healthinsu_multi_array[$ipid_sel]['privatepatient'] == "1")
				{
					//get ppun (private patient unique number)
					$ppun_number = $ppun->check_patient_ppun($ipid_sel, $this->clientid);
					if($ppun_number)
					{
						$invoice_data['ppun'] = $ppun_number['ppun'];
					}
				}

				if($paycenter_module == "1" && $patient_days[$ipid_sel]['details']['zip'] > '0')
				{
					$found_paycenter = $paycenters->get_paycenter($patient_days[$ipid_sel]['details']['zip'], $this->clientid);
					$invoice_data['paycenter'] = '';
					if($found_paycenter)
					{
						$invoice_data['paycenter'] = $found_paycenter;
					}
				}

				//debtor number
				if($debtor_number_module == "1" && $healthinsu_multi_array[$ipid_sel]['privatepatient'] == "0")
				{
					//get debtor number from patient healthinsurance
					if(strlen($healthinsu_multi_array[$ipid_sel]['ins_debtor_number']) > '0')
					{
						$invoice_data['debtor_number'] = $healthinsu_multi_array[$ipid_sel]['ins_debtor_number'];
					}
					else
					{
						$invoice_data['debtor_number'] = $healthinsu_multi_array[$ipid_sel]['company']['debtor_number'];
					}
				}

				if($divisions && strlen($healthinsu_subdiv_arr[$ipid_sel]['3']['name']) > '0' && $healthinsu_multi_array[$ipid_sel]['privatepatient'] == '0')
				{
					$master_data['patients'][$ipid_sel]['health_insurace'] = $healthinsu_subdiv_arr[$ipid_sel]['3'];

					$hi_address[$ipid_sel]['address'][] = $healthinsu_subdiv_arr[$ipid_sel][3]['name'];
					if($healthinsu_subdiv_arr[$ipid_sel][3]['insurance_provider'])
					{
						$hi_address[$ipid_sel]['address'][] = $healthinsu_subdiv_arr[$ipid_sel][3]['insurance_provider'];
					}
					/* else 
					{
						$hi_address[$ipid_sel]['address'][] = $healthinsu_subdiv_arr[$ipid_sel][3]['contact_person'];
					} */
					$hi_address[$ipid_sel]['address'][] = $healthinsu_subdiv_arr[$ipid_sel][3]['street1'];
					$hi_address[$ipid_sel]['address'][] = $healthinsu_subdiv_arr[$ipid_sel][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$ipid_sel][3]['city'];
				}
				else if($healthinsu_multi_array[$ipid_sel]['privatepatient'] == '0')
				{
					$master_data['patients'][$ipid_sel]['health_insurace'] = $healthinsu_multi_array[$ipid_sel];

					if(strlen($healthinsu_multi_array[$ipid_sel]['company_name']) > '0')
					{
						$hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['company_name'];
					}
					else
					{
						$hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['company']['name'];
					}

					if(strlen($healthinsu_multi_array[$ipid_sel]['ins_insurance_provider']) > '0')
					{
						$hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['ins_insurance_provider'];
					}
					else 
					{
						$hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['company']['insurance_provider'];
					}
					if(strlen($healthinsu_multi_array[$ipid_sel]['ins_street']) > '0')
					{
						$hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['ins_street'];
					}
					else
					{
						$hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['company']['street1'];
					}

					if(strlen($healthinsu_multi_array[$ipid_sel]['ins_zip']) > '0' || strlen($healthinsu_multi_array[$ipid_sel]['ins_city']) > '0')
					{
						if(strlen($healthinsu_multi_array[$ipid_sel]['ins_zip']) > '0')
						{
							$hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']][] = $healthinsu_multi_array[$ipid_sel]['ins_zip'];
						}

						if(strlen($healthinsu_multi_array[$ipid_sel]['ins_city']) > '0')
						{
							$hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']][] = $healthinsu_multi_array[$ipid_sel]['ins_city'];
						}

						$hi_address[$ipid_sel]['address'][] = implode(' ', $hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']]);
					}
					else
					{
						if(strlen($healthinsu_multi_array[$ipid_sel]['company']['zip']) > '0')
						{
							$hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']][] = $healthinsu_multi_array[$ipid_sel]['company']['zip'];
						}

						if(strlen($healthinsu_multi_array[$ipid_sel]['company']['city']) > '0')
						{
							$hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']][] = $healthinsu_multi_array[$ipid_sel]['company']['city'];
						}

						$hi_address[$ipid_sel]['address'][] = implode(' ', array_values(array_unique($hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']])));
					}
				}
				else
				{
					//private patient case!
					$hi_address[$ipid_sel]['address'][] = $patient_days[$ipid_sel]['details']['first_name'] . ' ' . $patient_days[$ipid_sel]['details']['last_name'];
					$hi_address[$ipid_sel]['address'][] = $patient_days[$ipid_sel]['details']['street1'];
					$hi_address[$ipid_sel]['address'][] = $patient_days[$ipid_sel]['details']['zip'] . ' ' . $patient_days[$ipid_sel]['details']['city'];
				}

				$invoice_data['client_ik'] = $client_details[0]['institutskennzeichen'];

				$patient_days[$ipid_sel]['details']['birthd'] = date('d.m.Y', strtotime($patient_days[$ipid_sel]['details']['birthd']));

				$invoice_data['epid'] = $patient_days[$ipid_sel]['details']['epid'];
				$invoice_data['first_name'] = $patient_days[$ipid_sel]['details']['first_name'];
				$invoice_data['last_name'] = $patient_days[$ipid_sel]['details']['last_name'];
				$invoice_data['birthd'] = $patient_days[$ipid_sel]['details']['birthd'];
				$invoice_data['street1'] = $patient_days[$ipid_sel]['details']['street1'] . "\n" . $patient_days[$ipid_sel]['details']['zip'] . ' ' . $patient_days[$ipid_sel]['details']['city'];
				$invoice_data['address'] = implode('<br />', array_values(array_unique($hi_address[$ipid_sel]['address'])));

				$this->view->invoice_data = $invoice_data;

				//insert invoice
				if($this->getRequest()->isPost())
				{
					$post = $_POST;
					$post['clientid'] = $this->clientid;
					$post['ipid'] = $ipid_sel;

					if(empty($_POST['pdf']))
					{
						if($bayern_invoices_form->validate_custom_invoice($post))
						{
							$bayern_invoices_form->insert_custom_invoice($post);

							//$this->redirect(APP_BASE . 'invoicenew/invoicesnew');
							//ISPC-2747 Lore 09.12.2020
							if($_REQUEST['redirect2new'] == '1'){
							    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bayern_sapv_invoice' );
							    exit();
							} else {
							    $this->redirect(APP_BASE . 'invoicenew/invoicesnew');
							}
						}
						else
						{
							$bayern_invoices_form->assignErrorMessages();

							//keep invoice data if errors occurs
							$this->view->invoice_data = $post;

							//keep invoice items data if error occurs
							foreach($post['row'] as $k_post => $v_post)
							{
								$invoice_items[] = array(
									'shortcut' => $post['shortcut'][$k_post],
									'name' => $post['name'][$k_post],
									'qty' => $post['qty'][$k_post],
									'price' => $post['price'][$k_post],
									'custom' => $post['custom'][$k_post],
									'total' => $post['total'][$k_post],
								);
							}

							$this->view->invoice_items = $invoice_items;
						}
					}


					if(!empty($_POST['pdf']))
					{
						foreach($_POST['row'] as $k_post => $v_post)
						{
							$invoice_items[] = array(
								'shortcut' => $_POST['shortcut'][$k_post],
								'name' => $_POST['name'][$k_post],
								'qty' => $_POST['qty'][$k_post],
								'price' => $_POST['price'][$k_post],
								'custom' => $_POST['custom'][$k_post],
								'total' => $_POST['total'][$k_post],
							);
						}

						$params['ipids'] = array($ipid_sel);

						//patient days
						$conditions['client'] = $this->clientid;
						$conditions['ipids'] = array($ipid_sel);
						$conditions['periods'][0]['start'] = '2009-01-01';
						$conditions['periods'][0]['end'] = date('Y-m-d');

						$sql = 'e.epid, p.ipid, e.ipid,';
						$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
						$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
						$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
						$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
						$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
						$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

						//be aware of date d.m.Y format here
						$patient_days = Pms_CommonData::patients_days($conditions, $sql);

						$params['invoices'] = array($invoice_data['id']);
						$params['patient_days'] = $patient_days;
						$params['get_pdf'] = '1';
						$params['only_pdf'] = 1;

						$params['custom_data']['address'] = $_POST['address'];
						$params['custom_data']['birthd'] = $_POST['birthd'];
						$params['custom_data']['birthdate'] = $_POST['birthdate'];

						$params['custom_data']['first_name'] = $_POST['first_name'];
						$params['custom_data']['last_name'] = $_POST['last_name'];

						$params['custom_data']['invoice_start'] = $_POST['start_active'];
						$params['custom_data']['invoice_end'] = $_POST['end_active'];

						$params['custom_data']['first_active_day'] = $_POST['start_active'];
						$params['custom_data']['last_active_day'] = $_POST['end_active'];

						$params['custom_data']['start_active'] = $_POST['start_active'];
						$params['custom_data']['end_active'] = $_POST['end_active'];

						$params['custom_data']['start_sapv'] = $_POST['start_sapv'];
						$params['custom_data']['end_sapv'] = $_POST['end_sapv'];

						$params['custom_data']['first_sapv_day'] = $_POST['start_sapv'];
						$params['custom_data']['last_sapv_day'] = $_POST['end_sapv'];

						$params['custom_data']['sapv_approve_date'] = $_POST['sapv_approve_date'];
						$params['custom_data']['sapv_approve_nr'] = $_POST['sapv_approve_nr'];

						$params['custom_data']['prefix'] = $_POST['prefix'];
						$params['custom_data']['invoice_number'] = $_POST['invoice_number'];
						$params['custom_data']['full_invoice_number'] = $_POST['prefix'] . $_POST['invoice_number'];

						$params['custom_data']['client_ik'] = $_POST['client_ik'];
						$params['custom_data']['beneficiary_address'] = $_POST['street1'];
						$params['custom_data']['street1'] = $_POST['street1'];
						$params['custom_data']['patient_pflegestufe'] = $_POST['patient_pflegestufe'];
						$params['custom_data']['insurance_no'] = $_POST['insurance_no'];


						$params['custom_data']['ppun'] = $_POST['ppun'];
						$params['custom_data']['debtor_number'] = $_POST['debtor_number'];
						$params['custom_data']['paycenter'] = $_POST['paycenter'];


						$params['custom_data']['address'] = $_POST['address'];
						$params['custom_data']['footer'] = $_POST['footer'];
						$params['custom_data']['items'] = $invoice_items;
						$_REQUEST['type'] = "pdf";
						$this->bayern_sapv_invoice($params);
						exit;
					}
				}
			}
		}

		public function editcustominvoiceAction()
		{
			$ppun = new PpunIpid();
			$modules = new Modules();
			$paycenters = new Paycenters();
			$bayern_invoices = new BayernInvoicesNew();
			$bayern_invoices_form = new Application_Form_BayernInvoicesNew();

			$clientid = $this->clientid;


			if($_REQUEST['invoiceid'])
			{
				//check modules only if invoiceid is provided
				if($modules->checkModulePrivileges("88", $this->clientid))
				{
					$ppun_module = "1";
				}
				else
				{
					$ppun_module = "0";
				}

				if($modules->checkModulePrivileges("90", $this->clientid))
				{
					$debtor_number_module = "1";
				}
				else
				{
					$debtor_number_module = "0";
				}

				if($modules->checkModulePrivileges("91", $this->clientid))
				{
					$paycenter_module = "1";
				}
				else
				{
					$paycenter_module = "0";
				}

				$this->view->ppun_module = $ppun_module;
				$this->view->debtor_number_module = $debtor_number_module;
				$this->view->paycenter_module = $paycenter_module;


				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $bayern_invoices->getBayernInvoice($invoice_id);

				//get invoice patient details
				$conditions['client'] = $this->clientid;
				$conditions['ipids'] = array($invoice_data['ipid']);
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');

				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

				//beware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);

				$invoice_data['street1'] = $invoice_data['beneficiary_address'];
				$invoice_data['birthd'] = date('d.m.Y', strtotime($invoice_data['birthdate']));
				$invoice_data['patient_pflegestufe'] = $invoice_data['patient_care'];
				$invoice_data['epid'] = $patient_days[$invoice_data['ipid']]['details']['epid'];

//				print_r($invoice_data['items']);

				if(!$this->getRequest()->isPost())
				{
					$invoice_items = array_values($invoice_data['items']);
				}

				$this->view->invoice_data = $invoice_data;
				$this->view->invoice_items = $invoice_items;

				if($this->getRequest()->isPost())
				{
					$status = '0';
					if(!empty($_POST['completed']))
					{
						$status = '2'; //unpaid
					}
					else if(!empty($_REQUEST['edit_invoice']))
					{
						$status = '1'; //draft
					}
					else if($_POST['deletemore'] == "1")
					{
						$status = '4'; //deleted
					}
					else if(!empty($_REQUEST['pdf']))
					{
						$status = '0'; //no change
					}
					else if(!empty($_REQUEST['users_invoice']))
					{
						$status = '0'; //no change
					}

					if(!empty($_POST['paid']))
					{
						//mark as paid
						$invoice_pay_data['invoiceId'] = $_REQUEST['invoiceid'];
						$invoice_pay_data['paymentAmount'] = '0.00';
						$invoice_pay_data['paymentComment'] = "";
						$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
						$invoice_pay_data['mark_as_paid'] = "1";

						$new_payment = $bayern_invoices_form->submit_payment($invoice_pay_data);

						//$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
						//ISPC-2747 Lore 09.12.2020
						if($_REQUEST['redirect2new'] == '1'){
						    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bayern_sapv_invoice' );
						    exit();
						} else {
						    $this->redirect(APP_BASE . 'invoicenew/invoicesnew');
						}
						exit;
					}

					if(!empty($_POST['pdf']))
					{
						foreach($_POST['row'] as $k_post => $v_post)
						{
							$invoice_items[] = array(
								'shortcut' => $_POST['shortcut'][$k_post],
								'name' => $_POST['name'][$k_post],
								'qty' => $_POST['qty'][$k_post],
								'price' => $_POST['price'][$k_post],
								'custom' => $_POST['custom'][$k_post],
								'total' => $_POST['total'][$k_post],
							);
						}

						$params['ipids'] = array($invoice_data['ipid']);

						//patient days
						$conditions['client'] = $this->clientid;
						$conditions['ipids'] = array($invoice_data['ipid']);
						$conditions['periods'][0]['start'] = '2009-01-01';
						$conditions['periods'][0]['end'] = date('Y-m-d');

						$sql = 'e.epid, p.ipid, e.ipid,';
						$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
						$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
						$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
						$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
						$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
						$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

						//be aware of date d.m.Y format here
						$patient_days = Pms_CommonData::patients_days($conditions, $sql);

						$params['invoices'] = array($invoice_data['id']);
						$params['patient_days'] = $patient_days;
						$params['get_pdf'] = '1';
						$params['only_pdf'] = 1;

						$params['custom_data']['address'] = $_POST['address'];
						$params['custom_data']['birthd'] = $_POST['birthd'];
						$params['custom_data']['birthdate'] = $_POST['birthdate'];

						$params['custom_data']['first_name'] = $_POST['first_name'];
						$params['custom_data']['last_name'] = $_POST['last_name'];

						$params['custom_data']['invoice_start'] = $_POST['start_active'];
						$params['custom_data']['invoice_end'] = $_POST['end_active'];

						$params['custom_data']['first_active_day'] = $_POST['start_active'];
						$params['custom_data']['last_active_day'] = $_POST['end_active'];

						$params['custom_data']['start_active'] = $_POST['start_active'];
						$params['custom_data']['end_active'] = $_POST['end_active'];

						$params['custom_data']['start_sapv'] = $_POST['start_sapv'];
						$params['custom_data']['end_sapv'] = $_POST['end_sapv'];

						$params['custom_data']['first_sapv_day'] = $_POST['start_sapv'];
						$params['custom_data']['last_sapv_day'] = $_POST['end_sapv'];

						$params['custom_data']['sapv_approve_date'] = $_POST['sapv_approve_date'];
						$params['custom_data']['sapv_approve_nr'] = $_POST['sapv_approve_nr'];

						$params['custom_data']['prefix'] = $_POST['prefix'];
						$params['custom_data']['invoice_number'] = $_POST['invoice_number'];
						$params['custom_data']['full_invoice_number'] = $_POST['prefix'] . $_POST['invoice_number'];

						$params['custom_data']['client_ik'] = $_POST['client_ik'];
						$params['custom_data']['beneficiary_address'] = $_POST['street1'];
						$params['custom_data']['street1'] = $_POST['street1'];
						$params['custom_data']['patient_pflegestufe'] = $_POST['patient_pflegestufe'];
						$params['custom_data']['insurance_no'] = $_POST['insurance_no'];


						$params['custom_data']['ppun'] = $_POST['ppun'];
						$params['custom_data']['debtor_number'] = $_POST['debtor_number'];
						$params['custom_data']['paycenter'] = $_POST['paycenter'];

						$params['custom_data']['invoice_total'] = number_format($_POST['invoice_total'], '2', ',', '.');
						$params['custom_data']['address'] = $_POST['address'];
						$params['custom_data']['footer'] = $_POST['footer'];
						$params['custom_data']['items'] = $invoice_items;
						$_REQUEST['type'] = "pdf";
						$this->bayern_sapv_invoice($params);
						exit;
					}

					$post = $_POST;
					$post['clientid'] = $this->clientid;
					$post['ipid'] = $invoice_data['ipid'];

					if($bayern_invoices_form->validate_custom_invoice($post))
					{
						$bayern_invoices_form->update_custom_invoice($invoice_id, $post, $status);

						//$this->redirect(APP_BASE . 'invoicenew/invoicesnew');
						//ISPC-2747 Lore 09.12.2020
						if($_REQUEST['redirect2new'] == '1'){
						    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bayern_sapv_invoice' );
						    exit();
						} else {
						    $this->redirect(APP_BASE . 'invoicenew/invoicesnew');
						}
					}
					else
					{
						$bayern_invoices_form->assignErrorMessages();

						//keep invoice data if errors occurs
						$this->view->invoice_data = $post;

						//keep invoice items data if error occurs
						foreach($post['row'] as $k_post => $v_post)
						{
							$invoice_items[] = array(
								'shortcut' => $post['shortcut'][$k_post],
								'name' => $post['name'][$k_post],
								'qty' => $post['qty'][$k_post],
								'price' => $post['price'][$k_post],
								'custom' => $post['custom'][$k_post],
								'total' => $post['total'][$k_post],
							);
						}

						$this->view->invoice_items = $invoice_items;
					}
				}
			}
			else
			{
				$this->redirect(APP_BASE . 'invoicenew/invoicesnew');
			}
		}

		public function shinternalinvoiceuserslistAction()
		{
			$clientid = $this->clientid;
			$userid = $this->userid;
			$patientmaster = new PatientMaster();

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$this->view->selected_month = $selected_month;
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			$month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);

			array_walk($month_days_arr, function(&$value) {
				$value = date("d.m.Y", strtotime($value));
			});
			$months_details[$selected_month]['days'] = $month_days_arr;
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_rehnung_patients';
			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			if($this->getRequest()->isPost())
			{
				if($_POST['selected_users'])
				{
					//loop throuhg posted patients
					if($_POST['selected_users_period'])
					{
						$selected_fall[] = '99999999999';

						//TODO-3543 Lore 28.10.2020
						$generated_inv = ShInternalInvoices::get_sh_internal_invoiced($_POST['selected_users']);
						
						foreach($_POST['selected_users'] as $k_usr => $v_usr)
						{
						    //TODO-3543 Lore 28.10.2020
						    $look_for_inv_user_period = $v_usr.'_'.date("Y_m", strtotime($_POST['select_month']));
						    
						    if(!in_array($look_for_inv_user_period, $generated_inv['fall'] )){      //TODO-3543 Lore 28.10.2020
						        
    						    $selected_fall_userids[] = $v_usr;
    							$selected_fall[$v_usr] = $months_details[$selected_month];
    
    							$start_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
    							$end_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));
    
    							$params['selected_period'][$v_usr] = $months_details[$selected_month];
    
    							$start_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
    							$end_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));
							
						    }
						}
					}

					$params['users'] = $selected_fall_userids;
					$params['get_pdf'] = '0';
					$params['only_pdf'] = 0;

					$this->shinternalinvoice($params);
					$this->redirect(APP_BASE . 'invoicenew/shinternalinvoices');
					exit;
				}
			}
		}

		public function fetchshinternaluserslistAction()
		{
			$clientid = $this->clientid;
			$userid = $this->userid;

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}
			$this->view->selected_month = $selected_month;

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
			$this->view->selected_month_details = $months_details[$selected_month];
			//check if a month is selected END
			//sort and ordering START
			$columnarray = array(
				"usr" => "username",
				"ln" => 'last_name',
				"fn" => 'first_name',
			);

			if(strlen($_REQUEST['clm']) == '0')
			{
				$sortby = 'username';
			}
			else
			{
				$sortby = $_REQUEST['clm'];
			}

			if(strlen($_REQUEST['ord']) == '0')
			{
				$order = 'ASC';
			}
			else
			{
				$order = $_REQUEST['ord'];
			}

			if(strlen($_REQUEST['pgno']) == '0')
			{
				$page = "0";
			}
			else
			{
				$page = $_REQUEST['pgno'];
			}

			$search_sql = "";
			if(strlen($_REQUEST['val']) > '0')
			{
				$search_sql = "(TRIM(CONVERT(CONVERT(AES_DECRYPT(first_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci like '%" . trim($_REQUEST['val']) . "%' or TRIM(CONVERT(CONVERT(AES_DECRYPT(last_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci like '%" . trim($_REQUEST['val']) . "%' or username like '%" . trim($_REQUEST['val']) . "%' )";
			}

			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$this->view->order = $orderarray[$order];
			$this->view->{$sortby . "order"} = $orderarray[$order];
			//sort and ordering END
			//get selected internal users
			$internal_users_ids = ShInternalUsers::get_shinternal_users($clientid);

			if(!$internal_users_ids)
			{
				$internal_users_ids[] = '999999999999999999';
			}

			//count users
			$users = Doctrine_Query::create()
				->select('count(*)')
				->from('User')
				->where('isdelete = 0')
				->andWhere('clientid = ?', $clientid)
				->andWhere('usertype != ?', 'SA')
				->andWhere('isactive="0"')
				->andWhereIn('id', $internal_users_ids);
			if(strlen($search_sql) > '0')
			{
				$users->andWhere($search_sql);
			}
			$users->orderBy($columnarray[$sortby] . " " . $order);
			$counted_users = $users->fetchArray();

			$limit = 0;
			$users->select('*');
			$users->where('isdelete = 0');
			$users->andWhere('clientid = ?', $clientid);
			$users->andWhere('usertype != ?', 'SA');
			$users->andWhere('isactive="0"');
			$users->andWhereIn('id', $internal_users_ids);

			if(strlen($search_sql) > '0')
			{
				$users->andWhere($search_sql);
			}

			$users->orderBy($columnarray[$sortby] . " " . $order);
			$users->offset($page * $limit);

			$users_limit = $users->fetchArray();

			$invoiced_users_fall_ids = ShInternalInvoices::get_sh_internal_invoiced($internal_users_ids);
			$this->view->invoiced_fall_ids = $invoiced_users_fall_ids['fall'];

			$this->view->{"style" . $_GET['pgno']} = "active";

			$grid = new Pms_Grid($users_limit, 1, $counted_users[0]['count'], "listshinternalusers.html");
			$this->view->shusersgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("shpatientsnavigation.html", 5, $page, $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['shinternaluserslist'] = $this->view->render('invoicenew/fetchshinternaluserslist.html');

			echo json_encode($response);
			exit;
		}

		//generate invoice from url(green buttons)
		public function shinternalinvoiceAction()
		{
			if(!empty($_REQUEST['user']) && !empty($_REQUEST['list']))
			{
				$params['users'][] = $_REQUEST['user'];

				//construct curent month period days
				$selected_month = $_REQUEST['list'];
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
				}

				$months_details[$selected_month]['start'] = $selected_month . "-01";
				$months_details[$selected_month]['days_in_month'] = $month_days;
				$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
				$month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);

				array_walk($month_days_arr, function(&$value) {
					$value = date("d.m.Y", strtotime($value));
				});
				$months_details[$selected_month]['days'] = $month_days_arr;

				$params['selected_period'][$_REQUEST['user']] = $months_details[$selected_month];


				$params['get_pdf'] = '1';
				$params['only_pdf'] = (int) $_REQUEST['only_invoice'];
				$params['stornopdf'] = (int) $_REQUEST['stornopdf'];
				$params['stornoid'] = (int) $_REQUEST['stornoid'];
				$params['invoices'] = array((int) $_REQUEST['iid']);

				$this->shinternalinvoice($params);
			}
		}

		//actual function which is generating blank sh internal invoice
		// Changed for ISPC-2609 Ancuta 01.09.2020
		public function shinternalinvoice($params)
		{
		    if(isset($params['print_job']) && $params['print_job'] =='1'){
		        $this->_helper->layout->setLayout('layout_ajax');
		        $this->_helper->viewRenderer->setNoRender();
		    }
			//spl_autoload_register(array('AutoLoader', 'autoloadPdf')); // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added

			//initialize used models
			$p_list = new PriceList();
			$sh_internal_form = new Application_Form_ShInternalInvoices();
			$sh_internal_invoices = new ShInternalInvoices();
			$sh_internal_invoices_items = new ShInternalInvoiceItems();
			$clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] : $this->clientid;

			$used_users = $params['users'];

			$master_data['client']['id'] = $clientid;

			if($params['only_pdf'] == '0')
			{			   
				foreach($used_users as $k_usr => $v_usr)
				{
			        $recipient = array();
			        $all_shortcuts = Pms_CommonData::get_prices_shortcuts();
			        $shortcuts_arr = $all_shortcuts['sh_internal'];
			        
			        $curent_period[$v_usr]['start'] = $params['selected_period'][$v_usr]['start'];
			        $curent_period[$v_usr]['end'] = $params['selected_period'][$v_usr]['end'];
			        $curent_period_days[$v_usr] = $params['selected_period'][$v_usr]['days'];
			        
			        $master_data['users'][$v_usr]['invoice_data']['user'] = $v_usr;
			        $master_data['users'][$v_usr]['invoice_data']['period'] = $curent_period[$v_usr];
			        
			        $users = new User();
			        $user_details = $users->getUsersDetails($v_usr);
			        
			        $recipient_title = trim(rtrim($user_details[$v_usr]['user_title']));
			        $recipient_name = trim(rtrim($user_details[$v_usr]['first_name'])) . ' ' . trim(rtrim($user_details[$v_usr]['last_name']));
			        $recipient_street = trim(rtrim($user_details[$v_usr]['street1']));
			        $recipient_zip = trim(rtrim($user_details[$v_usr]['zip']));
			        $recipient_city = trim(rtrim($user_details[$v_usr]['city']));
			        
			        if($recipient_title)
			        {
			            $recipient[$v_usr][] = $recipient_title;
			        }
			        
			        if($recipient_name)
			        {
			            $recipient[$v_usr][] = $recipient_name;
			        }
			        
			        if($recipient_street)
			        {
			            $recipient[$v_usr][] = $recipient_street;
			        }
			        
			        
			        if($recipient_zip || $recipient_city)
			        {
			            $recipient_blocks = array();
			            
			            if($recipient_zip)
			            {
			                $recipient_blocks[] = $recipient_zip;
			            }
			            
			            if($recipient_city)
			            {
			                $recipient_blocks[] = $recipient_city;
			            }
			            
			            $recipient[$v_usr][] = implode(" ", $recipient_blocks);
			        }
			        
			        // benutzer_adresse(recipient) - never changes
			        $master_data['recipient'][$v_usr] = implode("<br />", $recipient[$v_usr]);
			        
			        if(!array_key_exists($v_usr, $master_price_list))
			        {
			            $master_price_list[$v_usr] = $p_list->get_period_price_list(date('Y-m-d', strtotime($curent_period[$v_usr]['start'])), date('Y-m-d', strtotime($curent_period[$v_usr]['end'])));
			        }
			        
			        $current_pricelist = end($master_price_list[$v_usr]);
			        
			        foreach($shortcuts_arr as $k_short => $v_short)
			        {
			            $item_details['shortcut'] = $v_short;
			            $item_details['qty'] = "0";
			            $item_details['custom'] = "0";
			            
			            $master_data['invoices'][$v_usr]['items'][] = $item_details;
			        }
			        
			        $master_data['invoiced_month'] = "0000-00-00 00:00:00";
			        if(strlen($params['selected_period'][$v_usr]['days_in_month']) > '0')
			        {
			            $master_data['invoiced_month'] = date('Y-m-d H:i:s', strtotime($params['selected_period'][$v_usr]['start']));
			        }
			        
			        $master_data['invoices'][$v_usr]['pricelist'] = $current_pricelist;
				        
				}
				$inserted_invoices = $sh_internal_form->insert_invoice($master_data);
			}
			else if($params['invoices'])
			{
				$inserted_invoices = $params['invoices'];
			}


			if($params['get_pdf'] == "1")
			{
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$invoice_data = $sh_internal_invoices->getShInvoice($params['stornoid'], false, true);
					
					$invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];     //ISPC-2532 Lore 10.11.2020
					
					//ISPC-2532 Carmen 19.02.2020 - get the prefix and the number of storno invoice
					$invoice_data_storno = $sh_internal_invoices->get_invoice($inserted_invoices[0]);
					$invoice_data['prefix'] = $invoice_data_storno[0]['prefix'];
					$invoice_data['invoice_number'] = $invoice_data_storno[0]['invoice_number'];
					//--
				}
				else
				{
					$invoice_data = $sh_internal_invoices->getShInvoice($inserted_invoices[0], false,true);
				}

                if(strlen($invoice_data['recipient']) > 0 ){
                    if(strpos($invoice_data['recipient'],"style"))
                    {
                        $invoice_data['recipient'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['recipient']);
                    }
                    $invoice_data['recipient'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['recipient']);
                    $invoice_data['recipient'] = str_replace(array("</p>"," </p>","</p> "," </p> "),"", $invoice_data['recipient']);
                    $invoice_data['recipient'] = str_replace(array("\r\n"),"<br />", $invoice_data['recipient']);
                }

				//rewrite invoice_data with custom data (which comes from POST)
				if($params['custom_data'])
				{
					//rewrite custom data from POST to $invoice_data.
					foreach($params['custom_data'] as $k_custom => $v_custom)
					{
						$invoice_data[$k_custom] = $v_custom;
					}
				}

				//load template data
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'sh_internal_invoice');


				$recipient = array();
				//setup tokens (remove pseudopost when all works)
				//user tokens
				$users = new User();
				$user_details = $users->getUsersDetails($invoice_data['user']);

				$recipient_name = trim(rtrim($user_details[$invoice_data['user']]['first_name'])) . ' ' . trim(rtrim($user_details[$invoice_data['user']]['last_name']));
				$recipient_street = trim(rtrim($user_details[$invoice_data['user']]['street1']));
				$recipient_zip = trim(rtrim($user_details[$invoice_data['user']]['zip']));
				$recipient_city = trim(rtrim($user_details[$invoice_data['user']]['city']));

				if($recipient_name)
				{
					$recipient[] = $recipient_name;
				}

				if($recipient_street)
				{
					$recipient[] = $recipient_street;
				}

				if($recipient_zip || $recipient_city)
				{
					$recipient_blocks = array();

					if($recipient_zip)
					{
						$recipient_blocks[] = $recipient_zip;
					}

					if($recipient_city)
					{
						$recipient_blocks[] = $recipient_city;
					}

					$recipient[] = implode(" ", $recipient_blocks);
				}


				// benutzer_adresse - never changes
				$tokens['benutzer_adresse'] = implode("<br />", $recipient);

				$tokens['bank_name'] = $user_details[$invoice_data['user']]['bank_name'];
				$tokens['kontonummer'] = $user_details[$invoice_data['user']]['bank_account_number'];
				$tokens['blz'] = $user_details[$invoice_data['user']]['bank_number'];
				$tokens['iban'] = $user_details[$invoice_data['user']]['iban'];
				$tokens['bic'] = $user_details[$invoice_data['user']]['bic'];
				$tokens['steuernummer'] = $user_details[$invoice_data['user']]['control_number'];

//				//client tokens
				$tokens['client_ik'] = "";

//				//patient details tokens
				$tokens['patienten_id'] = "";
				$tokens['first_name'] = "";
				$tokens['last_name'] = "";
				$tokens['birthd'] = "";
				$tokens['street'] = "";
				$tokens['zip'] = "";
				$tokens['city'] = "";
				$tokens['patient_pflegestufe'] = "";

				//sapv
				$tokens['first_sapv_day'] = "";
				$tokens['last_sapv_day'] = "";
				$tokens['sapv_approve_date'] = "";
				$tokens['sapv_approve_nr'] = "";
				$tokens['ppun'] = "";
				$tokens['debtor_number'] = "";
				$tokens['paycenter'] = "";

				//health insurance tokens
				$tokens['insurance_no'] = "";
				$tokens['address'] = "";
				$tokens['SAPV_Rechnungsempfaenger'] = "";
				
				//default is the benutzer_addrese but can be changed

				if(!empty($_POST['recipient']))
				{
					$tokens['recipient'] = nl2br($_POST['recipient']);
				}
				else if(!empty($invoice_data['recipient']))
				{
					$tokens['recipient'] = $invoice_data['recipient'];
				}
				else
				{
					$tokens['recipient'] = $tokens['benutzer_adresse'];
				}

				$tokens['recipient'] = htmlentities($tokens['recipient']);//TODO-1517
				
				$tokens['beneficiary_address'] = "";

//				//invoice specific tokens
				$tokens['first_active_day'] = "";
				$tokens['last_active_day'] = "";
				$tokens['invoiced_month'] = "";
				if(!empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
				{
					$tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
				}
//
				$tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
				$tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
				$tokens['ppun'] = "";
				$tokens['debtor_number'] = "";
				$tokens['paycenter'] = "";


//				//invoice date
				if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970")
				{
					$tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
				}
				else
				{
					$tokens['invoice_date'] = "";
				}

				if($_POST['comment'])
				{
					$tokens['comment'] = $_POST['comment'];
				}
				else
				{
					$tokens['comment'] = html_entity_decode($invoice_data['comment'], ENT_QUOTES, 'UTF-8');
				}
				
				$tokens['invoice_items'] = $invoice_data['items'];


				if($invoice_data['storno'] == '1')
				{
					//rewrite invoice prefix if storned
					$tokens['prefix'] = 'STORNO_' . $tokens['prefix'];
				}
				
				//ISPC-2532 Lore 10.11.2020
				if($invoice_data_storno[0]['storno'] == '1') {
				    $tokens['full_invoice_number'] = ' Storno '.$tokens['full_invoice_number'];  // ISPC-2532 Ancuta 11.12.2020- comment from 10.12.2020 - overwtite - and add STORNO in front
				    $tokens['full_invoice_number'] .= ' zur Rechnung '.$invoice_data['storned_invoice_number'];
				}

				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$tokens['unique_id'] = $invoice_data['record_id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total'] * (-1)), '2', ',', '.');
				}
				else
				{
					$tokens['unique_id'] = $invoice_data['id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
				}
				
				if(count($invoice_data['items']) > '0')
				{
					//ISPC-1236 - new token invoice_items_html_short, without id
					//"Rechnungsbetrag" text grid
					$rows = count($invoice_data['items']);
					$grid = new Pms_Grid($invoice_data['items'], 1, $rows, "sh_internal_invoice_items_list_pdf.html");
					$grid_short = new Pms_Grid($invoice_data['items'], 1, $rows, "invoice_items_list_nocustom_pdf_short.html");
					
					$grid->invoice_total = $tokens['invoice_total'];
					$grid->max_entries = $rows;
					
					$grid_short->invoice_total = $tokens['invoice_total'];
					$grid_short->max_entries = $rows;

					$html_items = $grid->renderGrid();
					$html_items_short = $grid_short->renderGrid();
					
					//"Summe" text grid
					$rows_summe = count($invoice_data['items']);
					$grid_summe = new Pms_Grid($invoice_data['items'], 1, $rows_summe, "sh_internal_invoice_items_list_summe_pdf.html");
					$grid_summe_short = new Pms_Grid($invoice_data['items'], 1, $rows_summe, "sh_internal_invoice_items_list_summe_pdf_short.html");
					
					$grid_summe->invoice_total = $tokens['invoice_total'];
					$grid_summe->max_entries = $rows_summe;
					
					$grid_summe_short->invoice_total = $tokens['invoice_total'];
					$grid_summe_short->max_entries = $rows_summe;

					$html_items_summe = $grid_summe->renderGrid();
					$html_items_summe_short = $grid_summe_short->renderGrid();
				}

				$tokens['invoice_items_html'] = $html_items;
				$tokens['invoice_items_html_short'] = $html_items_short;
				$tokens['internal_invoice_items_html'] = $html_items_summe;
				$tokens['internal_invoice_items_html_short'] = $html_items_summe_short;

				if($template_data)
				{
					$this->generate_file($template_data[0], $tokens);
					exit;
				}
				else
				{
					$this->redirect(APP_BASE . 'invoicenew/shinternalinvoiceuserslist?flg=notemplate');
					exit;
				}
			}

			if($params['batch_print'] == '1' && count($params['invoices']) > '0')
			{
				//batch temp folder
				$batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $clientid);
				$invoices_ids = $params['invoices'];

				//load template data
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'sh_internal_invoice');

				//load invoices data
				$invoices_data = $sh_internal_invoices->get_invoices($invoices_ids);

				//TODO-3407 Ancuta 08.09.2020
				if(empty($invoices_data)){
				    return;
				}
				// -- 
				
				//ISPC-2472  Ancuta 12.11.2019::added batch name
				$inv_names = array();
				foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
				    $inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
				}
				$Batch_name = false;
				if(!empty($inv_names)){
				    $Batch_name = $inv_names[0];
				    if( count($inv_names) > 1){
				        $Batch_name .='_'.end($inv_names);
				    }
				}
				//--
				

				foreach($invoices_data['invoices_data'] as $k_invoice_id => $v_invoice_data)
				{
					//setup tokens
					//user tokens
					$recipient = array();
					$users = new User();
					$user_details = $users->getUsersDetails($v_invoice_data['user']);

					$recipient_title = trim(rtrim($user_details[$v_invoice_data['user']]['user_title']));
					$recipient_name = trim(rtrim($user_details[$v_invoice_data['user']]['first_name'])) . ' ' . trim(rtrim($user_details[$v_invoice_data['user']]['last_name']));
					$recipient_street = trim(rtrim($user_details[$v_invoice_data['user']]['street1']));
					$recipient_zip = trim(rtrim($user_details[$v_invoice_data['user']]['zip']));
					$recipient_city = trim(rtrim($user_details[$v_invoice_data['user']]['city']));

					if($recipient_title)
					{
						$recipient[] = $recipient_title;
					}
					
					if($recipient_name)
					{
						$recipient[] = $recipient_name;
					}

					if($recipient_street)
					{
						$recipient[] = $recipient_street;
					}

					if($recipient_zip || $recipient_city)
					{
						$recipient_blocks = array();

						if($recipient_zip)
						{
							$recipient_blocks[] = $recipient_zip;
						}

						if($recipient_city)
						{
							$recipient_blocks[] = $recipient_city;
						}

						$recipient[] = implode(" ", $recipient_blocks);
					}


					// benutzer_adresse - never changes
					$tokens_multi['benutzer_adresse'] = implode("<br />", $recipient);

					$tokens_multi['bank_name'] = $user_details[$v_invoice_data['user']]['bank_name'];
					$tokens_multi['kontonummer'] = $user_details[$v_invoice_data['user']]['bank_account_number'];
					$tokens_multi['blz'] = $user_details[$v_invoice_data['user']]['bank_number'];
					$tokens_multi['iban'] = $user_details[$v_invoice_data['user']]['iban'];
					$tokens_multi['bic'] = $user_details[$v_invoice_data['user']]['bic'];
					$tokens_multi['steuernummer'] = $user_details[$v_invoice_data['user']]['control_number'];
					

					//client tokens
					$tokens_multi['client_ik'] = "";

					//patient details tokens
					$tokens_multi['patienten_id'] = "";
					$tokens_multi['first_name'] = "";
					$tokens_multi['last_name'] = "";
					$tokens_multi['birthd'] = "";
					$tokens_multi['street'] = "";
					$tokens_multi['zip'] = "";
					$tokens_multi['city'] = "";
					$tokens_multi['patient_pflegestufe'] = "";

					//health insurance tokens
					$tokens_multi['insurance_no'] = "";
					$tokens_multi['beneficiary_address'] = "";
					$tokens_multi['address'] = "";
					$tokens_multi['SAPV_Rechnungsempfaenger'] = "";
					//default is the benutzer_addrese but can be changed
					if(!empty($v_invoice_data['recipient']))
					{
					    if(strlen($v_invoice_data['recipient']) > 0 ){
					        if(strpos($v_invoice_data['recipient'],"style"))
					        {
					            $v_invoice_data['recipient'] = preg_replace('/style=\"(.*)\"/i', '', $v_invoice_data['recipient']);
					        }
					        $v_invoice_data['recipient'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $v_invoice_data['recipient']);
					        $v_invoice_data['recipient'] = str_replace(array("</p>"," </p>","</p> "," </p> "),"", $v_invoice_data['recipient']);
					        $v_invoice_data['recipient'] = str_replace(array("\r\n"),"<br />", $v_invoice_data['recipient']);
					    }
					    
						$tokens_multi['recipient'] = $v_invoice_data['recipient'];
					}
					else
					{
						$tokens_multi['recipient'] = $tokens_multi['benutzer_adresse'];
					}

// 					$tokens_multi['recipient'] = htmlentities($tokens_multi['recipient']);
					$tokens_multi['recipient'] = htmlspecialchars($tokens_multi['recipient']); //TODO-1517 
					
					//invoice specific tokens
					if(!empty($v_invoice_data['invoiced_month']) && $v_invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
					{
						$tokens_multi['invoiced_month'] = date('m/Y', strtotime($v_invoice_data['invoiced_month']));
					}
					else
					{
						$tokens_multi['invoiced_month'] = "";
					}

					$tokens_multi['prefix'] = html_entity_decode($v_invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['invoice_number'] = html_entity_decode($v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['full_invoice_number'] = html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');

					//invoice date
					if($v_invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['completed_date'])) != "1970")
					{
						$tokens_multi['invoice_date'] = date('d.m.Y', strtotime($v_invoice_data['completed_date']));
					}
					else
					{
						$tokens_multi['invoice_date'] = '';
					}

					$tokens_multi['first_active_day'] = '';
					$tokens_multi['last_active_day'] = '';
					$tokens_multi['first_sapv_day'] = '';
					$tokens_multi['last_sapv_day'] = '';
					$tokens_multi['sapv_approve_date'] = '';
					$tokens_multi['sapv_approve_nr'] = '';
					$tokens_multi['comment'] = html_entity_decode($v_invoice_data['comment'], ENT_QUOTES, 'UTF-8');

					if($v_invoice_data['storno'] == '1')
					{
						//rewrite invoice prefix if storned
						$tokens_multi['prefix'] = 'STORNO_' . $tokens['prefix'];
						$tokens_multi['unique_id'] = $v_invoice_data['record_id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total'] * (-1)), '2', ',', '.');
					}
					else
					{
						$tokens_multi['unique_id'] = $v_invoice_data['id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total']), '2', ',', '.');
					}

					if(count($v_invoice_data['items']) > '0')
					{
						//ISPC-1236 - new token invoice_items_html_short, without id
						$rows = count($v_invoice_data['items']);

						$grid = new Pms_Grid($v_invoice_data['items'], 1, $rows, "sh_internal_invoice_items_list_pdf.html");
						$grid_short = new Pms_Grid($v_invoice_data['items'], 1, $rows, "invoice_items_list_nocustom_pdf_short.html");
						
						$grid->invoice_total = $tokens_multi['invoice_total'];
						$grid->max_entries = $rows;
						
						$grid_short->invoice_total = $tokens_multi['invoice_total'];
						$grid_short->max_entries = $rows;

						$html_items = $grid->renderGrid();
						$html_items_short = $grid_short->renderGrid();
						
						//"Summe" text grid
						$rows_summe = count($v_invoice_data['items']);
						$grid_summe = new Pms_Grid($v_invoice_data['items'], 1, $rows_summe, "sh_internal_invoice_items_list_summe_pdf.html");
						$grid_summe_short = new Pms_Grid($v_invoice_data['items'], 1, $rows_summe, "sh_internal_invoice_items_list_summe_pdf_short.html");
						
						$grid_summe->invoice_total = $tokens_multi['invoice_total'];
						$grid_summe->max_entries = $rows_summe;
						
						$grid_summe_short->invoice_total = $tokens_multi['invoice_total'];
						$grid_summe_short->max_entries = $rows_summe;

						$html_items_summe = $grid_summe->renderGrid();
						$html_items_summe_short = $grid_summe_short->renderGrid();
					}
					else
					{
						$html_items = "";
						$html_items_short = "";
						$html_items_summe = "";
						$html_items_summe_short = "";
					}

					$tokens_multi['invoice_items_html'] = $html_items;
					$tokens_multi['invoice_items_html_short'] = $html_items_short;
					$tokens_multi['internal_invoice_items_html'] = $html_items_summe;
					$tokens_multi['internal_invoice_items_html_short'] = $html_items_summe_short;

					if($template_data)
					{
					    
					    
					    if(isset($params['print_job']) && $params['print_job'] == '1'){
					        
					        $print_params = array();
					        $print_params = $params;
					        $print_params['template_data'] = $template_data[0];
					        $print_params['vars'] = $tokens_multi;
					        $print_params['export_file_type'] = "pdf";
					        
					        $batch_temp_files = $this->print_job_generate_and_save_file($print_params);
					        
					        return $batch_temp_files ;
					        
					    } else{
                            $temp_files[] = $this->generate_file($template_data[0], $tokens_multi, 'docx', $batch_temp_folder, 'generate');
					    }
					}
				}
				
				if(count($temp_files) > '0')
				{
					//final cleanup (check if files are on disk)
					foreach($temp_files as $k_temp => $v_file)
					{
						if(!is_file($v_file))
						{
							//remove unexisting files
//							$unsetted_files[] = $v_file; //for debugs
							unset($temp_files[$v_file]);
						}
					}

					$remaining_temp_files = array_values(array_unique($temp_files));

					if(count($remaining_temp_files) > '0')
					{
					    //ISPC-2472  Ancuta 12.11.2019::added batch name
						$final_file = $this->generate_file($template_data[0], false, 'pdf', $batch_temp_folder, 'merge', $temp_files, $Batch_name);
					}
				}
				if ( ! isset($params['print_job']) && $params['print_job'] == '1' ){
				    
				} else {
				    exit;
				}
			}
		}

		public function shinternalinvoicesAction()
		{
			$sh_invoices = new ShInternalInvoices();
			$sh_invoices_items = new ShInternalInvoiceItems();
			$sh_invoices_form = new Application_Form_ShInternalInvoices();
			$clientid = $this->clientid;

			//ISPC-2609 Ancuta 28.08.2020 + Changes on  07.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "sh_internal_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$this->userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$this->userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			if(count($invoice_user_printjobs) > 1 ){
			    echo $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			
			//mark invoice as paid from invoices list link
			if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
			{
				if($_REQUEST['mode'] == "paid")
				{
					//mark as paid
					$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
					$invoice_pay_data['paymentAmount'] = '0.00';
					$invoice_pay_data['paymentComment'] = "";
					$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
					$invoice_pay_data['mark_as_paid'] = "1";

					$new_payment = $sh_invoices_form->submit_payment($invoice_pay_data);
					$this->_redirect(APP_BASE . 'invoicenew/shinternalinvoices');
					exit;
				}
			}

			if($this->getRequest()->isPost())
			{
//				print_r($_POST);
//				exit;
				if($_POST['draftmore'] == "1")
				{
					$transform = $sh_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $sh_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				elseif($_POST['archive_invoices_more'] == "1")
				{
					$archive = $sh_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
				}
				elseif(!empty($_POST['batch_print_more']))
				{
					$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
					$params['batch_print'] = '1'; //enables batch print procedure
					$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
					$params['get_pdf'] = '0'; //stops downloading single pdf
					
					//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
					if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
					    
					    $this->shinternalinvoice($params);
					    
					} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
					    
					    $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
					    
					    $print_job_data = array();
					    $print_job_data['clientid'] = $this->clientid;
					    $print_job_data['user'] = $this->userid;
					    $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
					    $print_job_data['output_type'] = 'pdf';
					    $print_job_data['status'] = 'active';
					    $print_job_data['invoice_type'] = 'sh_internal_invoice';
					    $print_job_data['print_params'] = serialize($params);
					    $print_job_data['print_function'] = 'shinternalinvoice';
					    $print_job_data['print_controller'] = $this->getRequest()->getControllerName();
					    
					    foreach($_POST['document'] as $k=>$inv_id){
					        $print_job_data['PrintJobsItems'][] = array(
					            'clientid'=>$print_job_data['clientid'],
					            'user'=>$print_job_data['user'],
					            'invoice_id'=>$inv_id,
					            'invoice_type'=>$print_job_data['invoice_type'],
    					        'status'=>"new"
					        );
					    }
					    
					    $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
					    $print_id = $PrintJobsBulk_obj->id;
					    
					    if($print_id){
					        $this->__StartPrintJobs();
					    }
					}
					
//					print_r($params);
//					exit;
					
				}
				else
				{
					$post = $_POST;
					$post["mark_as_paid"] = "0";
					$new_payment = $sh_invoices_form->submit_payment($post);
				}
				
				//ISPC-2609 Ancuta 07.09.2020
				$msg="";
				if($print_id){
				    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				}
				
				//$this->_redirect(APP_BASE . 'invoicenew/shinternalinvoices'); //to avoid resubmission
				$this->_redirect(APP_BASE . 'invoicenew/shinternalinvoices'.$msg); //to avoid resubmission
				//-- 
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$clone_record = $sh_invoices->create_storno_invoice($invoiceid);
					$this->_redirect(APP_BASE . 'invoicenew/shinternalinvoices?flg=suc');
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $sh_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoicenew/shinternalinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoicenew/shinternalinvoices?flg=delerr');
				}
			}

			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
		}

		public function fetchshinternalinvoiceslistAction()
		{
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');

			$users = new User();
			$sh_invoices_payments = new ShInternalInvoicePayments();

			$clientid = $this->clientid;

			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
// 				->select("*")
				->select("id, record_id")
				->from('ShInternalInvoices')
				->where('client = ?',$clientid)
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			/* $storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);
 */
			$storno_ids = array();
			$storno_ids_str="";
			foreach($storno_invoices_array as $k => $st)
			{
			    $storno_ids[] = $st['record_id'];
			    $storno_ids_str .= '"' . $st['record_id'] . '",';
			}
			
			if( strlen($storno_ids_str) > 0 )
			{
			    $storno_ids_str = substr($storno_ids_str, 0, -1);
			    $storno_ids_str_sql = " AND id NOT IN (" . $storno_ids_str . ")";
			} else{
			    $storno_ids_str_sql = "";
			}
				
			
			
			// get client data
			$client_details_m = new Client();
			$client_details = $client_details_m->getClientDataByid($clientid);

			$invoice_due_days = $client_details[0]['invoice_due_days'];
			$plus_due_days = '+' . $invoice_due_days . ' days';
			$this->view->plus_due_days = $plus_due_days;

			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{
				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 '.$storno_ids_str_sql.' AND isdelete = 0 AND isarchived ="0"';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0   '.$storno_ids_str_sql.'  AND isdelete=0 AND isarchived ="0"';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1")';
					break;

				case 'overdue':
// 					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND DATE(NOW()) > DATE(completed_date)  AND isdelete=0 AND isarchived ="0"';
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0  '.$storno_ids_str_sql.'   AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
					break;

				case 'all':
					$filters['hiinvoice'] = ' AND isarchived ="0"';
					break;
				case 'archived':
					$filters['hiinvoice'] = ' AND isarchived ="1" AND status !="4" AND isdelete != "1"';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0  '.$storno_ids_str_sql.'  AND isdelete = 0 AND isarchived ="0"';
					break;
			}

			if(!empty($_REQUEST['last_name']))
			{
				$filters['user'] = ' AND (LOWER(last_name) LIKE "%' . addslashes(strtolower($_REQUEST['last_name'])) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['user'] .= ' AND (LOWER(first_name) LIKE "%' . addslashes(strtolower($_REQUEST['first_name'])) . '%")';
			}

			if(!empty($_REQUEST['username']))
			{
				$filters['user'] .= ' AND ( LOWER(username) LIKE "%' . addslashes(strtolower($_REQUEST['username'])) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			$sql = "*";
			//get invoice users
			$f_users[] = '9999999999999';
			if(!empty($_REQUEST['username']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				//filter patients name/surname/epid
				//changed to user instead of patient
				$f_user = Doctrine_Query::create()
					->select($sql)
					->from('User')
					->where("isdelete =0")
					//->andWhere('isactive = "0"') // TODO-2220 :: Commented by Ancuta 01.04.2019
					->andWhere('clientid = ' . $clientid . $filters['user']);
				$f_user_res = $f_user->fetchArray();
			}
			else
			{
				$f_user = Doctrine_Query::create()
					->select($sql)
					->from('User')
					->where("isdelete =0")
// 					->andWhere('isactive = "0"') // TODO-2220 :: Commented by Ancuta 01.04.2019
					->andWhere('clientid = "' . $clientid . '"');
				$f_user_res = $f_user->fetchArray();
			}

			foreach($f_user_res as $k_f_user_res => $v_f_user_value)
			{
				$f_users[] = $v_f_user_value['id'];
				$all_users_details[$v_f_user_value['id']] = $v_f_user_value;
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('ShInternalInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			if(!empty($_REQUEST['username']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$invoices_counting->andWhereIn('user', $f_users);
			}
			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();

			$status_count_invoices = array();


			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
// 				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($v_inv2count['completed_date']))) && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["overdue"][] = '1';
				}

				if($v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["all"][] = '1';
				}

				if($v_inv2count['isarchived'] == "1" && $v_inv2count['status'] != "4" && $v_inv2count['isdelete'] != "1")
				{
					$status_count_invoices["archived"][] = '1';
				}
			}
			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
// 				->select("*")
				->select("id, status")
				->from('ShInternalInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$del_invoices_counting->andWhereIn('user', $f_users);
			}
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}

			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('ShInternalInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice']);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$invoices_nl->andWhereIn('user', $f_users);
			}
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{
				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
				    //ShInternalInvoices
					$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [NEW]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}

			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('ShInternalInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('user', $f_users);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);

			if(!empty($_REQUEST['username']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				//$invoices->andWhereIn('user', $f_users);
			}
			
			$invoicelimit = $invoices->fetchArray();


// 			$invoice_uids[] = '9999999999';
			$invoice_uids = array();
			
			$invoice_ids = array();
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}

			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] = count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $sh_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);

			$this->view->storned_invoces = ShInternalInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->users_details = $all_users_details;

			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function shinternallistpaymentsAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$clientid = $this->clientid;
			$shinvoices = new ShInternalInvoices();
			$shpayments = new ShInternalInvoicePayments();
			$shinvoice_form = new Application_Form_ShInternalInvoices();
			$user = new User();

			if($_REQUEST['invoiceid'])
			{
				$payments = $shpayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}

					$del_payment = $shpayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $shpayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $shpayments->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $shinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $shpayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoicenew/shinternallistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		public function editshinternalinvoiceAction()
		{
			$clientid = $this->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$sh_invoices = new ShInternalInvoices();
			$sh_invoices_form = new Application_Form_ShInternalInvoices();

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $sh_invoices->getShInvoice($invoice_id);

				$this->view->read_only_items = '0';
				if($invoice_data['status'] >= '2')
				{
					$this->view->read_only_items = '1';
				}
			}

			if(in_array($invoice_data['id'], ShInternalInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if(!empty($_POST['paid']))
				{
					//mark as paid
					$invoice_pay_data['invoiceId'] = $_REQUEST['invoiceid'];
					$invoice_pay_data['paymentAmount'] = '0.00';
					$invoice_pay_data['paymentComment'] = "";
					$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
					$invoice_pay_data['mark_as_paid'] = "1";

					$new_payment = $sh_invoices_form->submit_payment($invoice_pay_data);

					$this->_redirect(APP_BASE . 'invoicenew/shinternalinvoices');
					exit;
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $sh_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{
					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}

				
				if(strlen($_POST['recipient']) > 0 ){
				    if(strpos($_POST['recipient'],"style"))
				    {
				        $_POST['recipient'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['recipient']);
				    }
				    $_POST['recipient'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['recipient']);
				    $_POST['recipient'] = str_replace(array("</p>"," </p>","</p> "," </p> "),"", $_POST['recipient']);
				    $_POST['recipient'] = str_replace(array("\r\n"),"<br />", $_POST['recipient']);
				}

				if(empty($_POST['pdf']))
				{
					//save/edit invoice here
					$edit_invoice = $sh_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);
				}

				//redirect to invoices list
				if(empty($_POST['pdf']))
				{
					if($edit_invoice)
					{

						$this->_redirect(APP_BASE . 'invoicenew/shinternalinvoices?flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoicenew/shinternalinvoices?flg=edterr');
					}
				}
				elseif($_POST['pdf'])
				{
					foreach($_POST['custom'] as $k_item => $v_custom)
					{
						$new_invoice_items[] = array(
							'shortcut' => $_POST['shortcut'][$k_item],
							'description' => $_POST['description'][$k_item],
							'qty' => $_POST['qty'][$k_item],
							'price' => Pms_CommonData::str2num($_POST['price'][$k_item]),
							'total' => Pms_CommonData::str2num($_POST['total'][$k_item]),
							'custom' => $v_custom,
						);

						$inv_total += Pms_CommonData::str2num($_POST['total'][$k_item]);
					}

					$params['user'] = array($invoice_data['user']);
					$params['list'] = date('Y-m', strtotime($invoice_data['invoiced_month']));
					$params['invoices'] = array($invoice_data['id']);
					$params['get_pdf'] = '1';
					$params['only_pdf'] = '1';
					$_REQUEST['type'] = 'pdf';

					$params['custom_data']['recipient'] = $_POST['recipient'];
					$params['custom_data']['comment'] = $_POST['comment'];
					$params['custom_data']['items'] = $new_invoice_items;
					$params['custom_data']['invoice_total'] = $inv_total;

					$this->shinternalinvoice($params);
					exit;
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoicenew/shinternalinvoices');
				}

				$user_details = User::getUsersDetails($invoice_data['user']);
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];

				$this->view->invoice_data = $invoice_data;
				$this->view->user_details = $user_details;
				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is present
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		
		
		//################################################################3
		//################################################################3
		//################################################################3
		//##################### ISPC-2257 ########################3
		//################################################################3
		//################################################################3
		//################################################################3
		
		

		public function shshiftsinternalinvoiceuserslistAction()
		{
			$clientid = $this->clientid;
			$userid = $this->userid;
			$patientmaster = new PatientMaster();

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$this->view->selected_month = $selected_month;
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			$month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);

			array_walk($month_days_arr, function(&$value) {
				$value = date("d.m.Y", strtotime($value));
			});
			$months_details[$selected_month]['days'] = $month_days_arr;
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_rehnung_patients';
			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			if($this->getRequest()->isPost())
			{
				if($_POST['selected_users'])
				{
					//loop throuhg posted patients
					if($_POST['selected_users_period'])
					{
						$selected_fall[] = '99999999999';
						
						//TODO-3543 Lore 28.10.2020
						//$generated_inv_shift = ShShiftsInternalInvoices::get_sh_internal_invoiced($_POST['selected_users']);
						
						foreach($_POST['selected_users'] as $k_usr => $v_usr)
						{
						    //TODO-3543 Lore 28.10.2020
						    //$look_for_inv_user_period = $v_usr.'_'.date("Y_m", strtotime($_POST['select_month']));
						    
						    //if(!in_array($look_for_inv_user_period, $generated_inv_shift['fall'] )){      //TODO-3543 Lore 28.10.2020
						        
    						    $selected_fall_userids[] = $v_usr;
    							$selected_fall[$v_usr] = $months_details[$selected_month];
    
    							$start_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
    							$end_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));
    
    							$params['selected_period'][$v_usr] = $months_details[$selected_month];
    
    							$start_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['start']));
    							$end_dmy = date('d.m.Y', strtotime($months_details[$selected_month]['end']));
    							
						    //}
						}
					}

					$params['users'] = $selected_fall_userids;
					$params['get_pdf'] = '0';
					$params['only_pdf'] = 0;

					$this->shshiftsinternalinvoice($params);
					$this->redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices');
					exit;
				}
			}
		}

		public function fetchshshiftsinternaluserslistAction()
		{
			$clientid = $this->clientid;
			$userid = $this->userid;

			//construct months selector array START
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');

			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
			//check if a month is selected START
			if(strlen($_REQUEST['list']) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}
			$this->view->selected_month = $selected_month;

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
			$this->view->selected_month_details = $months_details[$selected_month];
			//check if a month is selected END
			//sort and ordering START
			$columnarray = array(
				"usr" => "username",
				"ln" => 'last_name',
				"fn" => 'first_name',
			);

			if(strlen($_REQUEST['clm']) == '0')
			{
				$sortby = 'username';
			}
			else
			{
				$sortby = $_REQUEST['clm'];
			}

			if(strlen($_REQUEST['ord']) == '0')
			{
				$order = 'ASC';
			}
			else
			{
				$order = $_REQUEST['ord'];
			}

			if(strlen($_REQUEST['pgno']) == '0')
			{
				$page = "0";
			}
			else
			{
				$page = $_REQUEST['pgno'];
			}

			$search_sql = "";
			if(strlen($_REQUEST['val']) > '0')
			{
				$search_sql = "(TRIM(CONVERT(CONVERT(AES_DECRYPT(first_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci like '%" . trim($_REQUEST['val']) . "%' or TRIM(CONVERT(CONVERT(AES_DECRYPT(last_name, '" . Zend_Registry::get('salt') . "') using utf8) using latin1)) COLLATE latin1_german2_ci like '%" . trim($_REQUEST['val']) . "%' or username like '%" . trim($_REQUEST['val']) . "%' )";
			}

			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$this->view->order = $orderarray[$order];
			$this->view->{$sortby . "order"} = $orderarray[$order];
			//sort and ordering END
			//get selected internal users
			$internal_users_ids = ShShiftsInternalUsers::get_shinternal_users($clientid);

			if(!$internal_users_ids)
			{
				$internal_users_ids[] = '999999999999999999';
			}

			//count users
			$users = Doctrine_Query::create()
				->select('count(*)')
				->from('User')
				->where('isdelete = 0')
				->andWhere('clientid = ?', $clientid)
				->andWhere('usertype != ?', 'SA')
				->andWhere('isactive="0"')
				->andWhereIn('id', $internal_users_ids);
			if(strlen($search_sql) > '0')
			{
				$users->andWhere($search_sql);
			}
			$users->orderBy($columnarray[$sortby] . " " . $order);
			$counted_users = $users->fetchArray();

			$limit = 0;
			$users->select('*');
			$users->where('isdelete = 0');
			$users->andWhere('clientid = ?', $clientid);
			$users->andWhere('usertype != ?', 'SA');
			$users->andWhere('isactive="0"');
			$users->andWhereIn('id', $internal_users_ids);

			if(strlen($search_sql) > '0')
			{
				$users->andWhere($search_sql);
			}

			$users->orderBy($columnarray[$sortby] . " " . $order);
			$users->offset($page * $limit);

			$users_limit = $users->fetchArray();

			$invoiced_users_fall_ids = ShShiftsInternalInvoices::get_sh_internal_invoiced($internal_users_ids);
			$this->view->invoiced_fall_ids = $invoiced_users_fall_ids['fall'];

			$this->view->{"style" . $_GET['pgno']} = "active";

			$grid = new Pms_Grid($users_limit, 1, $counted_users[0]['count'], "listshshiftsinternalusers.html");
			$this->view->shusersgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("shpatientsnavigation.html", 5, $page, $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['shshiftsinternaluserslist'] = $this->view->render('invoicenew/fetchshshiftsinternaluserslist.html');

			echo json_encode($response);
			exit;
		}

		//generate invoice from url(green buttons)
		public function shshiftsinternalinvoiceAction()
		{
			if(!empty($_REQUEST['user']) && !empty($_REQUEST['list']))
			{
				$params['users'][] = $_REQUEST['user'];

				//construct curent month period days
				$selected_month = $_REQUEST['list'];
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
				}

				$months_details[$selected_month]['start'] = $selected_month . "-01";
				$months_details[$selected_month]['days_in_month'] = $month_days;
				$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
				$month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);

				array_walk($month_days_arr, function(&$value) {
					$value = date("d.m.Y", strtotime($value));
				});
				$months_details[$selected_month]['days'] = $month_days_arr;

				$params['selected_period'][$_REQUEST['user']] = $months_details[$selected_month];


				$params['get_pdf'] = '1';
				$params['only_pdf'] = (int) $_REQUEST['only_invoice'];
				$params['stornopdf'] = (int) $_REQUEST['stornopdf'];
				$params['stornoid'] = (int) $_REQUEST['stornoid'];
				$params['invoices'] = array((int) $_REQUEST['iid']);

				$this->shshiftsinternalinvoice($params);
			}
		}

		//actual function which is generating blank sh internal invoice
		// changed  from private to public ISPC-2609 Ancuta 31.08.2020
		public function shshiftsinternalinvoice($params)
		{
		    if(isset($params['print_job']) && $params['print_job'] == '1'){
		        $this->_helper->layout->setLayout('layout_ajax');
		        $this->_helper->viewRenderer->setNoRender();
		    }
			//spl_autoload_register(array('AutoLoader', 'autoloadPdf')); // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added

			//initialize used models
			$p_list = new PriceList();
			$sh_internal_form = new Application_Form_ShShiftsInternalInvoices();
			$sh_internal_invoices = new ShShiftsInternalInvoices();
			$sh_internal_invoices_items = new ShShiftsInternalInvoiceItems();
			$clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] : $this->clientid;

			$used_users = $params['users'];

			$master_data['client']['id'] = $clientid;

			if($params['only_pdf'] == '0')
			{
			    
			    foreach($used_users as $k_usr => $v_usr)
			    {
			        $user_periods[$v_usr]['start'] = $params['selected_period'][$v_usr]['start'];
			        $user_periods[$v_usr]['end'] = $params['selected_period'][$v_usr]['end'];
			        
    			    $selected_pers[] = $params['selected_period'][$v_usr]['start'];
    			    $selected_pers[] = $params['selected_period'][$v_usr]['end'];
			    } 
			    asort($selected_pers);

			    $invoice_period['start'] = $selected_pers[0];
			    $invoice_period['end'] = end($selected_pers);
			    
			    $Usershifts2patients_obj = new Usershifts2patients();
			    $data = $Usershifts2patients_obj->get_shift_assignment($clientid, $used_users, $invoice_period, $user_periods);
			    $users = new User();
			    
	
		 
			    $new_invoice_data = array();
			    $inv = 0;
			    if(!empty($data['system_user'])){
			        
			        $invoice_users = array();
			        $exiting_invoices = array();
    			    foreach($data['system_user'] as $v_usr => $invoiced_patients  ){
    			        $invoice_users[] = $v_usr;
    			    }    			        
                    $exiting_invoices = $sh_internal_invoices->find_invoiced_ShShiftsInternalInvoice($invoice_users,true);
                    
   
                    
    			    foreach($data['system_user'] as $v_usr => $invoiced_patients  ){
    			        
    			        $user_periods[$v_usr]['start'] = $params['selected_period'][$v_usr]['start'];
    			        $user_periods[$v_usr]['end'] = $params['selected_period'][$v_usr]['end'];
    			        
    			        foreach($invoiced_patients as $iipid=>$invoice_data){

    			            $user_details = array();
    			            $user_details = $users->getUsersDetails($v_usr);
    			            
    			            $inv_recipient = "";
    			            $recipient = array();
    			            $recipient_title = "";
    			            if(strlen(trim($user_details[$v_usr]['user_title'])) > 0 ){
                                $recipient_title = trim(rtrim($user_details[$v_usr]['user_title'])).' ';
    			            }
    			            $recipient_name = $recipient_title.trim(rtrim($user_details[$v_usr]['first_name'])) . ' ' . trim(rtrim($user_details[$v_usr]['last_name']));
    			            $recipient_street = trim(rtrim($user_details[$v_usr]['street1']));
    			            $recipient_zip = trim(rtrim($user_details[$v_usr]['zip']));
    			            $recipient_city = trim(rtrim($user_details[$v_usr]['city']));
    			            
    			     
    			            if($recipient_name)
    			            {
    			                $recipient[$v_usr][] =  htmlentities($recipient_name);
    			            }
    			            
    			            if($recipient_street)
    			            {
    			                $recipient[$v_usr][] = htmlentities($recipient_street);
    			            }
    			            
    			            
    			            if($recipient_zip || $recipient_city)
    			            {
    			                $recipient_blocks = array();
    			            
    			                if($recipient_zip)
    			                {
    			                    $recipient_blocks[] = htmlentities($recipient_zip);
    			                }
    			            
    			                if($recipient_city)
    			                {
    			                    $recipient_blocks[] = htmlentities($recipient_city);
    			                }
    			            
    			                $recipient[$v_usr][] = implode(" ", $recipient_blocks);
    			            }
    			             
    			            $inv_recipient = implode("<br />", $recipient[$v_usr]);
    			            
    			            //TODO-2377 - Ancuta - add overall amount - if 0 do not  create invoice !
    			            $overall_amount = 0;
    			            foreach($invoice_data['items'] as $sh=>$sh_data_arr){
    			                foreach($sh_data_arr['entries'] as $shift_type => $sh_dates){
    			                    foreach($sh_dates as $sh_date=>$sh_values){
        			                    $invoice_data['items_groupped'][$sh.'_'.$shift_type.'_'.$sh_values['list']]['shortcut'] = $sh;
        			                    $invoice_data['items_groupped'][$sh.'_'.$shift_type.'_'.$sh_values['list']]['qty'] += $sh_values['qty'];
        			                    $invoice_data['items_groupped'][$sh.'_'.$shift_type.'_'.$sh_values['list']]['price'] = $sh_values['price'];
        			                    $invoice_data['items_groupped'][$sh.'_'.$shift_type.'_'.$sh_values['list']]['shift_type'] = $shift_type;
        			                    
        			                    $overall_amount += $sh_values['price'];
    			                    }
    			                }
    			                
    			                foreach($sh_data_arr['days'] as $shift_type2 => $sh_dates2){
    			                    foreach($sh_dates2 as $d2=>$invoiced_day){
    			                        if(!in_array($invoiced_day,$invoiced_days[$v_usr])){
        			                        $invoiced_days[$v_usr][$iipid][] = $invoiced_day;
    			                        }
    			                    }
    			                }
    			            }
    			            
    			            asort($invoiced_days[$v_usr][$iipid]);
    			            
    			            $start_active[$v_usr][$iipid] = $invoiced_days[$v_usr][$iipid][0];
    			            $end_active[$v_usr][$iipid] = end($invoiced_days[$v_usr][$iipid]);
    			            
    			 
    			            if(isset($exiting_invoices['system_user'][$v_usr][$iipid]) && !empty($exiting_invoices['system_user'][$v_usr][$iipid])){
    			                
    			                
        			            foreach($exiting_invoices['system_user'][$v_usr][$iipid] as $inv_id=>$ex_invoice_periods){
        			                
        			                if(date("Y-m-d",strtotime($ex_invoice_periods['start_active'])) == date("Y-m-d",strtotime($start_active[$v_usr][$iipid])) 
        			                    && date("Y-m-d",strtotime($ex_invoice_periods['end_active'])) == date("Y-m-d",strtotime($end_active[$v_usr][$iipid]))  
        			                    )
        			                {
        			                    $__period[$v_usr][$iipid] [$start_active[$v_usr][$iipid].'-'.$end_active[$v_usr][$iipid]][] = $inv_id;
        			                }
        			            }
    			            }
    			            

    			      
    			            
    			            
    			            if( $overall_amount != 0 && empty($__period[$v_usr][$iipid] [$start_active[$v_usr][$iipid].'-'.$end_active[$v_usr][$iipid]])){
    			                
        			            $new_invoice_data[$inv]= array(
        			              'client'=>$clientid , 
        			              'recipient'=>$inv_recipient,  
        			              'user_type'=>'system_user',  
        			              'user'=>$v_usr,  
        			              'ipid'=>$iipid,  
        			              'invoiced_month' => $user_periods[$v_usr]['start'],  
        			              'invoice_start'=>$user_periods[$v_usr]['start'],  
        			              'invoice_end'=>$user_periods[$v_usr]['end'],
        			              'start_active'=> $start_active[$v_usr][$iipid],
        			              'end_active'=> $end_active[$v_usr][$iipid],
        			              'items'=>$invoice_data['items'],
        			              'items_groupped'=>$invoice_data['items_groupped']
        			                  
        			            );
        			            $inv++;
    			            }
    			        }
    			    }
			    }
			    
			    $fdoc_obj = new FamilyDoctor();
			    if(!empty($data['family_doctors'])){
			        
			        $invoice_users_fd = array();
			        $exiting_invoices_fd = array();
			        foreach($data['family_doctors'] as $v_usr => $invoiced_patients  ){
			            $invoice_users_fd[] = $v_usr;
			        }
			        $exiting_invoices_fd = $sh_internal_invoices->find_invoiced_ShShiftsInternalInvoice($invoice_users_fd,true);
			         
			        
    			    foreach($data['family_doctors'] as $v_usr => $invoiced_patients  ){
    			        
    			        foreach($invoiced_patients as $iipid=>$invoice_data){
    			            
    			            $fdoc_details = array();
    			            
    			            $fdoc_details = $fdoc_obj->get_family_doctors_multiple(array($v_usr));
    			            
    			            $inv_recipient = "";
    			            $recipient = array();
    			            
    			            $recipient_title = "";
    			            if(strlen(trim(rtrim($fdoc_details[$v_usr]['title']))) > 0 ){
                                $recipient_title = trim(rtrim($fdoc_details[$v_usr]['title'])).' ';
    			            }
    			            $recipient_name = $recipient_title.trim(rtrim($fdoc_details[$v_usr]['first_name'])) . ' ' . trim(rtrim($fdoc_details[$v_usr]['last_name']));
    			            $recipient_street = trim(rtrim($fdoc_details[$v_usr]['street1']));
    			            $recipient_zip = trim(rtrim($fdoc_details[$v_usr]['zip']));
    			            $recipient_city = trim(rtrim($fdoc_details[$v_usr]['city']));
    			            
    			            	
    			            if($recipient_name)
    			            {
    			                $recipient[$v_usr][] =  htmlentities($recipient_name);
    			            }
    			            
    			            if($recipient_street)
    			            {
    			                $recipient[$v_usr][] =  htmlentities($recipient_street);
    			            }
    			            
    			            
    			            if($recipient_zip || $recipient_city)
    			            {
    			                $recipient_blocks = array();
    			            
    			                if($recipient_zip)
    			                {
    			                    $recipient_blocks[] =  htmlentities($recipient_zip);
    			                }
    			            
    			                if($recipient_city)
    			                {
    			                    $recipient_blocks[] =  htmlentities($recipient_city);
    			                }
    			            
    			                $recipient[$v_usr][] = implode(" ", $recipient_blocks);
    			            }
    			             
    			            $inv_recipient = implode("<br />", $recipient[$v_usr]);
    			            //TODO-2377 - Ancuta - add overall amount - if 0 do not  create invoice !
    			            $overall_amount = 0;
    			            foreach($invoice_data['items'] as $sh=>$sh_data_arr){
    			                foreach($sh_data_arr['entries'] as $shift_type => $sh_dates){
    			                    foreach($sh_dates as $sh_date=>$sh_values){
    			                        $invoice_data['items_groupped'][$sh.'_'.$shift_type.'_'.$sh_values['list']]['shortcut'] = $sh;
    			                        $invoice_data['items_groupped'][$sh.'_'.$shift_type.'_'.$sh_values['list']]['qty'] += $sh_values['qty'];
    			                        $invoice_data['items_groupped'][$sh.'_'.$shift_type.'_'.$sh_values['list']]['price'] = $sh_values['price'];
    			                        $invoice_data['items_groupped'][$sh.'_'.$shift_type.'_'.$sh_values['list']]['shift_type'] = $shift_type;
    			                        
    			                        $overall_amount += $sh_values['price'];
    			                    }
    			                }

    			                foreach($sh_data_arr['days'] as $shift_type2 => $sh_dates2){
    			                    foreach($sh_dates2 as $d2=>$invoiced_day){
    			                        if(!in_array($invoiced_day,$invoiced_days_fd[$v_usr])){
    			                            $invoiced_days_fd[$v_usr][$iipid][] = $invoiced_day;
    			                        }
    			                    }
    			                }
    			                
    			            }
    			            
    			            
    			            asort($invoiced_days_fd[$v_usr][$iipid]);
    			             
    			            $start_active_fd[$v_usr][$iipid] = $invoiced_days_fd[$v_usr][$iipid][0];
    			            $end_active_fd[$v_usr][$iipid] = end($invoiced_days_fd[$v_usr][$iipid]);
    			             
    			            foreach($exiting_invoices_fd['familly_doctor'][$v_usr][$iipid] as $inv_id=>$ex_invoice_periods){
    			                 
    			                if(date("Y-m-d",strtotime($ex_invoice_periods['start_active'])) == date("Y-m-d",strtotime($start_active_fd[$v_usr][$iipid]))
    			                    && date("Y-m-d",strtotime($ex_invoice_periods['end_active'])) == date("Y-m-d",strtotime($end_active_fd[$v_usr][$iipid]))
    			                )
    			                {
    			                    $__period_fd[$v_usr][$iipid][$start_active_fd[$v_usr][$iipid].'-'.$end_active_fd[$v_usr][$iipid]][] = $inv_id;
    			                }
    			            }
    			            
    			            
    			            
    			            if($overall_amount != 0 && empty( $__period_fd[$v_usr][$iipid][$start_active_fd[$v_usr][$iipid].'-'.$end_active_fd[$v_usr][$iipid]])){
        			            $new_invoice_data[$inv]= array(
        			              'client'=>$clientid , 
        			              'recipient'=>$inv_recipient,  
        			              'user_type'=>'familly_doctor',  
        			              'user'=>$v_usr,  
        			              'ipid'=>$iipid,  
        			              'invoiced_month'=> $invoice_period['start'],  
        			              'invoice_start'=> $invoice_period['start'],  
        			              'invoice_end'=> $invoice_period['end'],
    			                  'start_active'=>  $start_active_fd[$v_usr][$iipid],
    			                  'end_active'=> $end_active_fd[$v_usr][$iipid],
        			              'items'=>$invoice_data['items'],
        			              'items_groupped'=>$invoice_data['items_groupped']
        			                  
        			            );
                                $inv++;
    			            }
    			        }
    			    }
			}
			
			/*
			echo "<pre>";
			print_r($new_invoice_data);
			exit;
			*/
// 			dd($new_invoice_data);
// 			print_R($new_invoice_data);exit;
			
			     if( empty($new_invoice_data)){
			         $this->redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices?flg=No_invoice_generated');
			         exit;
			         
			     } else {
			         
    			    $inserted_invoices = $sh_internal_form->insert_invoice($new_invoice_data);
    			    $this->redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices?flg=Success');
			        exit;
			     } 
				 
			}
			else if($params['invoices'])
			{
				$inserted_invoices = $params['invoices'];
			}


			if($params['get_pdf'] == "1")
			{
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$invoice_data = $sh_internal_invoices->getShInvoice($params['stornoid'], false, true);
					
					$invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];     //ISPC-2532 Lore 10.11.2020
					
					//ISPC-2532 Carmen 19.02.2020 - get the prefix and the number of storno invoice
					$invoice_data_storno = $sh_internal_invoices->get_invoice($inserted_invoices[0]);
					$invoice_data['prefix'] = $invoice_data_storno[0]['prefix'];
					$invoice_data['invoice_number'] = $invoice_data_storno[0]['invoice_number'];
					//--
				}
				else
				{
					$invoice_data = $sh_internal_invoices->getShInvoice($inserted_invoices[0], false,true);
				}

				// ISPC-2427 Ancuta 13.11.2019
				$exiting_user2patient__invoices = array();
				$exiting_user2patient__invoices = $sh_internal_invoices->find_invoiced_ShShiftsInternalInvoiceOverall(array($invoice_data['user']));
				// --
				$user_debitor_number="";
				if($invoice_data['user_type']=='system_user'){

				    $user_details = array();
				    $users = new User();
				    $user_details = $users->getUsersDetails($invoice_data['user']);
				    $user_debitor_number = $user_details[$invoice_data['user']]['debitor_number'];
				    $user_last_name = $user_details[$invoice_data['user']]['last_name'];
				    $user_first_name = $user_details[$invoice_data['user']]['first_name'];
				    
				} elseif ($invoice_data['user_type']=='familly_doctor'){

				    $fdoc_details = array();
				    $fdoc_obj = new FamilyDoctor();
				    $fdoc_details = $fdoc_obj->get_family_doctors_multiple(array($invoice_data['user']));
				    $user_debitor_number = $fdoc_details[$invoice_data['user']]['debitor_number'];
				    $user_last_name = $fdoc_details[$invoice_data['user']]['last_name'];
				    $user_first_name = $fdoc_details[$invoice_data['user']]['first_name'];
				}
				
				
                if(strlen($invoice_data['recipient']) > 0 ){
                    if(strpos($invoice_data['recipient'],"style"))
                    {
                        $invoice_data['recipient'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['recipient']);
                    }
                    $invoice_data['recipient'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['recipient']);
                    $invoice_data['recipient'] = str_replace(array("</p>"," </p>","</p> "," </p> "),"", $invoice_data['recipient']);
                    $invoice_data['recipient'] = str_replace(array("\r\n"),"<br />", $invoice_data['recipient']);
                }

				//rewrite invoice_data with custom data (which comes from POST)
				if($params['custom_data'])
				{
					//rewrite custom data from POST to $invoice_data.
					foreach($params['custom_data'] as $k_custom => $v_custom)
					{
						$invoice_data[$k_custom] = $v_custom;
					}
				}

				//load template data
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'sh_shifts_internal_invoice');

				// benutzer_adresse - never changes
				$tokens['address'] = implode("<br />", $invoice_data['recipient']);
				$tokens['recipient'] = implode("<br />", $invoice_data['recipient']);
				$tokens['benutzer_adresse'] = implode("<br />", $invoice_data['recipient']);

				
				
				
				$tokens['bank_name'] = "";
				$tokens['kontonummer'] = "";
				$tokens['blz'] = "";
				$tokens['iban'] = "";
				$tokens['bic'] = "";
				$tokens['benutzer_vorname'] = '';
				$tokens['benutzer_nachname'] = '';
				$tokens['steuernummer'] = '';
				
				if($invoice_data['user_type'] =="system_user")
				{
    				$tokens['bank_name'] = $user_details[$invoice_data['user']]['bank_name'];
    				$tokens['kontonummer'] = $user_details[$invoice_data['user']]['bank_account_number'];
    				$tokens['blz'] = $user_details[$invoice_data['user']]['bank_number'];
    				$tokens['iban'] = $user_details[$invoice_data['user']]['iban'];
    				$tokens['bic'] = $user_details[$invoice_data['user']]['bic'];
    				$tokens['steuernummer'] = $user_details[$invoice_data['user']]['control_number'];
    				
    				$tokens['benutzer_vorname'] = $user_details[$invoice_data['user']]['first_name'];
    				$tokens['benutzer_nachname'] = $user_details[$invoice_data['user']]['last_name'];
				
				} else if($invoice_data['user_type'] =="familly_doctor"){
    				
    				$tokens['benutzer_vorname'] = $fdoc_details[$invoice_data['user']]['first_name'];
    				$tokens['benutzer_nachname'] = $fdoc_details[$invoice_data['user']]['last_name'];
				}
				


				// user debitor
				// TODO-2205
				$tokens['user_debitor_number'] = "";
				if(!empty($user_debitor_number)){
				    $tokens['user_debitor_number'] = $user_debitor_number;
				}
				
				
//				//client tokens
				$tokens['client_ik'] = "";


				//patient details tokens
				$patientmaster = new PatientMaster();
				$patient_details_array = array();
				$patient_details_array = $patientmaster->get_multiple_patients_details(array($invoice_data['ipid']));
				
				$tokens['patienten_id'] = $patient_details_array[$invoice_data['ipid']]['EpidIpidMapping']['epid'];
				$tokens['first_name'] = $patient_details_array[$invoice_data['ipid']]['first_name'];
				$tokens['last_name'] =  $patient_details_array[$invoice_data['ipid']]['last_name'];
				$tokens['birthd'] = date('d.m.Y',strtotime($patient_details_array[$invoice_data['ipid']]['birthd']));
				$tokens['street'] = $patient_details_array[$invoice_data['ipid']]['street1'];
				$tokens['zip'] = $patient_details_array[$invoice_data['ipid']]['zip'];
				$tokens['city'] =  $patient_details_array[$invoice_data['ipid']]['city'];
				
				$tokens['patient_pflegestufe'] = "";

				//sapv
				$tokens['first_sapv_day'] = "";
				$tokens['last_sapv_day'] = "";
				$tokens['sapv_approve_date'] = "";
				$tokens['sapv_approve_nr'] = "";
				$tokens['ppun'] = "";
				$tokens['debtor_number'] = "";
				$tokens['paycenter'] = "";

				//health insurance tokens
				$tokens['insurance_no'] = "";
				$tokens['address'] = "";
				$tokens['SAPV_Rechnungsempfaenger'] = "";
				
				//default is the benutzer_addrese but can be changed

				if(!empty($_POST['recipient']))
				{
					$tokens['recipient'] = nl2br($_POST['recipient']);
				}
				else if(!empty($invoice_data['recipient']))
				{
					$tokens['recipient'] = $invoice_data['recipient'];
				}
				else
				{
					$tokens['recipient'] = $tokens['benutzer_adresse'];
				}

				$tokens['address'] = "";
// 				$tokens['address'] =  $tokens['recipient']; 
// 				$tokens['address']  = html_entity_decode($tokens['recipient']).' _-_ ';
				$tokens['address']  = htmlentities($tokens['recipient']);
// 				$tokens['address'] =  htmlentities($tokens['recipient']);//TODO-2275 - Added by Ancuta 24.04.2019 
				$tokens['recipient'] = htmlentities($tokens['recipient']);//TODO-1517
				

				
				
// 				$tokens['address'] = "";
// 				$tokens['address'] =  htmlentities($tokens['recipient']);
// 				$tokens['address'] =  htmlspecialchars($tokens['recipient']);
// 				$tokens['address'] =   html_entity_decode($tokens['recipient'], ENT_QUOTES, 'UTF-8');;;				
				
				
				
				
				
				$tokens['beneficiary_address'] = "";

//				//invoice specific tokens
				$tokens['first_active_day'] = "";
				$tokens['last_active_day'] = "";
				$tokens['invoiced_month'] = "";
				if(!empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
				{
					$tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
				}
//
				$tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
				$tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
				$tokens['ppun'] = "";
				$tokens['debtor_number'] = "";
				$tokens['paycenter'] = "";

				$tokens['invoiced_period'] = date('d.m.Y', strtotime($invoice_data['invoice_start']))." - ".date('d.m.Y', strtotime($invoice_data['invoice_end']));
				

//				//invoice date
				if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970")
				{
					$tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
				}
				else
				{
					$tokens['invoice_date'] = "";
				}

				if($_POST['comment'])
				{
					$tokens['comment'] = $_POST['comment'];
				}
				else
				{
					$tokens['comment'] = html_entity_decode($invoice_data['comment'], ENT_QUOTES, 'UTF-8');
				}
				
				$tokens['invoice_items'] = $invoice_data['items'];


				if($invoice_data['storno'] == '1')
				{
					//rewrite invoice prefix if storned
					$tokens['prefix'] = 'STORNO_' . $tokens['prefix'];
				}

				//ISPC-2532 Lore 10.11.2020
				if($invoice_data_storno[0]['storno'] == '1') {
				    $tokens['full_invoice_number'] = ' Storno '.$tokens['full_invoice_number']; // ISPC-2532 Ancuta 11.12.2020- comment from 10.12.2020 - overwtite - and add STORNO in front
				    $tokens['full_invoice_number'] .= ' zur Rechnung '.$invoice_data['storned_invoice_number'];
				    $tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data_storno[0]['completed_date']));
				}
				
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$tokens['unique_id'] = $invoice_data['record_id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total'] * (-1)), '2', ',', '.');
				}
				else
				{
					$tokens['unique_id'] = $invoice_data['id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
				}
				
				if(count($invoice_data['items']) > '0')
				{
					//ISPC-1236 - new token invoice_items_html_short, without id
					//"Rechnungsbetrag" text grid
					$rows = count($invoice_data['items']);
					$grid = new Pms_Grid($invoice_data['items'], 1, $rows, "sh_shifts_internal_invoice_items_list_pdf.html");
					$grid_short = new Pms_Grid($invoice_data['items'], 1, $rows, "invoice_items_list_nocustom_pdf_short.html");
					
					$grid->invoice_total = $tokens['invoice_total'];
					$grid->max_entries = $rows;
					
					$grid_short->invoice_total = $tokens['invoice_total'];
					$grid_short->max_entries = $rows;

					$html_items = $grid->renderGrid();
					$html_items_short = $grid_short->renderGrid();
					
					//"Summe" text grid
					$rows_summe = count($invoice_data['items']);
					$grid_summe = new Pms_Grid($invoice_data['items'], 1, $rows_summe, "sh_shifts_internal_invoice_items_list_summe_pdf.html");
					$grid_summe_short = new Pms_Grid($invoice_data['items'], 1, $rows_summe, "sh_shifts_internal_invoice_items_list_summe_pdf_short.html");
					
					$grid_summe->invoice_total = $tokens['invoice_total'];
					$grid_summe->max_entries = $rows_summe;

					$grid_summe_short->invoice_total = $tokens['invoice_total'];
					$grid_summe_short->max_entries = $rows_summe;
					
					$html_items_summe = $grid_summe->renderGrid();
					$html_items_summe_short = $grid_summe_short->renderGrid();
				}

				$tokens['invoice_items_html'] = $html_items;
				$tokens['invoice_items_html_short'] = $html_items_short;
				$tokens['internal_invoice_items_html'] = $html_items_summe;
				$tokens['internal_invoice_items_html_short'] = $html_items_summe_short;

				// ISPC-2427 Ancuta 13.11.2019
				$overall_html="";
				if( ! empty($exiting_user2patient__invoices[$invoice_data['user']])){
				    $uipids = array_keys($exiting_user2patient__invoices[$invoice_data['user']]);
				    $multiple_patient_details_array = array();
				    $multiple_patient_details_array = $patientmaster->get_multiple_patients_details($uipids);

				    $rows = count($exiting_user2patient__invoices[$invoice_data['user']]);
				    $grid_overall = new Pms_Grid($exiting_user2patient__invoices[$invoice_data['user']], 1, $rows, "sh_shifts_internal_invoice_overall_list_summe_pdf.html");
				    $grid_overall->pat_Details = $multiple_patient_details_array;
				    $grid_overall->max_entries = $rows;
				    
				    $overall_amount_per_user =  0;
				    foreach($exiting_user2patient__invoices[$invoice_data['user']] as $p_ipid=>$inv_data){
				        $overall_amount_per_user +=$inv_data['total_per_patient'];
				    }
				    $grid_overall->overall_amount_per_user = $overall_amount_per_user;
				    
				    $overall_html = $grid_overall->renderGrid();
				    
				}
			    $tokens['internal_invoice_overall_html'] = $overall_html;
				//--
				
				
				if($template_data)
				{
					$this->generate_file($template_data[0], $tokens);
					exit;
				}
				else
				{
					$this->redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoiceuserslist?flg=notemplate');
					exit;
				}
			}

			if($params['batch_print'] == '1' && count($params['invoices']) > '0')
			{
				//batch temp folder
			    $batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $clientid);
				$invoices_ids = $params['invoices'];

				//load template data
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'sh_shifts_internal_invoice');

				//load invoices data
				$invoices_data = $sh_internal_invoices->get_invoices($invoices_ids);

				//TODO-3407 Ancuta 08.09.2020
				if(empty($invoices_data)){
				    return;
				}
				// -- 
				
				//ISPC-2472  Ancuta 12.11.2019::create batch name
				$inv_names = array();
				foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
				    $inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
				}
				$Batch_name = false;
				if(!empty($inv_names)){
				    $Batch_name = $inv_names[0];
				    if( count($inv_names) > 1){
				        $Batch_name .='_'.end($inv_names);
				    }
				}
				//--
				
				$invoiced_ipids = array();
				$invoices_users = array();
				foreach($invoices_data['invoices_data'] as $k_invoice_id => $v_invoice_data)
				{
				    $invoiced_ipids[] =$v_invoice_data['ipid'];
				    
				    if($v_invoice_data['user_type'] == "system_user"){
				        $user_ids[] = $v_invoice_data['user'];
				    }
				    if($v_invoice_data['user_type'] == "familly_doctor"){
				        $doctor_ids[] = $v_invoice_data['user'];
				    }
				    $invoices_users[] =$v_invoice_data['user'];//ISPC-2427 Ancuta 13.11.2019
				}

				$f_doc_info = array();
				if(!empty($doctor_ids)){
				
				    $fdoc_obj = new FamilyDoctor();
				    $fdoc_details = $fdoc_obj->get_family_doctors_multiple($doctor_ids);
				
				    foreach($fdoc_details as $fdoc_id=>$fdoc_details){
				        $f_doc_info[$fdoc_details['id']] = $fdoc_details;
				        $f_doc_info[$fdoc_details['id']]['name'] = $fdoc_details['last_name'].' '.$fdoc_details['first_name'];
				        $f_doc_info[$fdoc_details['id']]['debitor_number'] = $fdoc_details['debitor_number'];
				        $f_doc_info[$fdoc_details['id']]['user_specific_number'] = $user_specific_number['family_doctor'];
				    }
				}
				$users_info = array();
				if(!empty($user_ids)){
				
				    // get client grous
				    $usergroups = new Usergroup();
				    $master_groups_first = array('4', '5');
				     
				    $client_user_groups_first = $usergroups->getUserGroups($master_groups_first);
				    $master2client = array();
				    foreach($client_user_groups_first as $k_group_f => $v_group_f)
				    {
				        $master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
				    }
				     
				    $user_obj = new User();
				    $users_details = $user_obj->getMultipleUserDetails($user_ids);
				
				    foreach($users_details as $uid=>$u_details){
				        $users_info[$u_details['id']]  = $u_details ;
				        if(in_array($u_details['groupid'], $master2client['4']))
				        {
				            $users_info[$u_details['id']]['user_specific_number'] = $user_specific_number['doctor'];
				        }
				        else if(in_array($u_details['groupid'], $master2client['5']))
				        {
				            $users_info[$u_details['id']]['user_specific_number'] = $user_specific_number['nurse'];
				        }
				
				        $users_info[$u_details['id']]['name'] = $u_details['last_name'].' '.$u_details['first_name'];
				        $users_info[$u_details['id']]['debitor_number'] = $u_details['debitor_number'];
				    }
				}
				 
				
 
				
				// ISPC-2427 Ancuta 13.11.2019
				$exiting_user2patient__invoices = array();
				$exiting_user2patient__invoices = $sh_internal_invoices->find_invoiced_ShShiftsInternalInvoiceOverall($invoices_users);
				// --
				
				
				
				if(!empty($invoiced_ipids)){
				    
			     	$patientmaster = new PatientMaster();
	       			$patient_details_array = array();
    				$patient_details_array = $patientmaster -> get_multiple_patients_details($invoiced_ipids);
				}
				
				
				foreach($invoices_data['invoices_data'] as $k_invoice_id => $v_invoice_data)
				{
					//setup tokens
					//user tokens
					$tokens_multi['benutzer_adresse'] = $v_invoice_data['recipient'];
					$tokens_multi['address'] = $v_invoice_data['recipient'];

					
					

					$tokens_multi['bank_name'] = '';
					$tokens_multi['kontonummer'] ='';
					$tokens_multi['blz'] = '';
					$tokens_multi['iban'] = '';
					$tokens_multi['bic'] = '';
					$tokens_multi['bic'] = '';
					$tokens_multi['user_debitor_number'] = '';
   					$tokens_multi['benutzer_vorname'] = '';
   					$tokens_multi['benutzer_nachname'] = '';
   					$tokens_multi['steuernummer'] = '';
   					
					if($v_invoice_data['user_type'] =="system_user")
					{
    					$tokens_multi['bank_name'] = $users_info[$v_invoice_data['user']]['bank_name'];
    					$tokens_multi['kontonummer'] = $users_info[$v_invoice_data['user']]['bank_account_number'];
    					$tokens_multi['blz'] = $users_info[$v_invoice_data['user']]['bank_number'];
    					$tokens_multi['iban'] = $users_info[$v_invoice_data['user']]['iban'];
    					$tokens_multi['bic'] = $users_info[$v_invoice_data['user']]['bic'];
    					$tokens_multi['bic'] = $users_info[$v_invoice_data['user']]['bic'];
    					$tokens_multi['steuernummer'] = $users_info[$v_invoice_data['user']]['control_number'];
    					
    					$tokens_multi['benutzer_vorname'] = $users_info[$v_invoice_data['user']]['first_name'];
    					$tokens_multi['benutzer_nachname'] = $users_info[$v_invoice_data['user']]['last_name'];
    					
    					$tokens_multi['user_debitor_number'] = $users_info[$v_invoice_data['user']]['debitor_number'];
    					
					} else if($v_invoice_data['user_type'] =="familly_doctor"){
					    
    					$tokens_multi['benutzer_vorname'] = $f_doc_info[$v_invoice_data['user']]['first_name'];
    					$tokens_multi['benutzer_nachname'] = $f_doc_info[$v_invoice_data['user']]['last_name'];
					    
    					$tokens_multi['user_debitor_number'] = $f_doc_info[$v_invoice_data['user']]['debitor_number'] ;
					}

					
                    //patient details tokens
					$tokens_multi['patienten_id'] = $patient_details_array[$v_invoice_data['ipid']]['EpidIpidMapping']['epid'];
					$tokens_multi['first_name'] = $patient_details_array[$v_invoice_data['ipid']]['first_name'];
					$tokens_multi['last_name'] =  $patient_details_array[$v_invoice_data['ipid']]['last_name'];
					$tokens_multi['birthd'] = date('d.m.Y',strtotime($patient_details_array[$v_invoice_data['ipid']]['birthd']));
					$tokens_multi['street'] = $patient_details_array[$v_invoice_data['ipid']]['street1'];
					$tokens_multi['zip'] = $patient_details_array[$v_invoice_data['ipid']]['zip'];
					$tokens_multi['city'] =  $patient_details_array[$v_invoice_data['ipid']]['city'];
					
					
					//client tokens
					$tokens_multi['client_ik'] = "";
					$tokens_multi['patient_pflegestufe'] = "";

					//health insurance tokens
					$tokens_multi['insurance_no'] = "";
					$tokens_multi['beneficiary_address'] = "";
					$tokens_multi['address'] = "";
					$tokens_multi['SAPV_Rechnungsempfaenger'] = "";
					//default is the benutzer_addrese but can be changed
					if(!empty($v_invoice_data['recipient']))
					{
					    if(strlen($v_invoice_data['recipient']) > 0 ){
					        if(strpos($v_invoice_data['recipient'],"style"))
					        {
					            $v_invoice_data['recipient'] = preg_replace('/style=\"(.*)\"/i', '', $v_invoice_data['recipient']);
					        }
					        $v_invoice_data['recipient'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $v_invoice_data['recipient']);
					        $v_invoice_data['recipient'] = str_replace(array("</p>"," </p>","</p> "," </p> "),"", $v_invoice_data['recipient']);
					        $v_invoice_data['recipient'] = str_replace(array("\r\n"),"<br />", $v_invoice_data['recipient']);
					    }
					    
						$tokens_multi['recipient'] = $v_invoice_data['recipient'];
					}
					else
					{
						$tokens_multi['recipient'] = $tokens_multi['benutzer_adresse'];
					}

// 					$tokens_multi['recipient'] = htmlentities($tokens_multi['recipient']);
// 					$tokens_multi['address'] = $tokens_multi['recipient']; //TODO-1517 
					$tokens_multi['address'] = htmlentities($tokens_multi['recipient']); //TODO-2275 07.05.2019 Ancuta
					$tokens_multi['recipient'] = htmlspecialchars($tokens_multi['recipient']); //TODO-1517 
					
					//invoice specific tokens
					if(!empty($v_invoice_data['invoiced_month']) && $v_invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
					{
						$tokens_multi['invoiced_month'] = date('m/Y', strtotime($v_invoice_data['invoiced_month']));
					}
					else
					{
						$tokens_multi['invoiced_month'] = "";
					}

					$tokens_multi['prefix'] = html_entity_decode($v_invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['invoice_number'] = html_entity_decode($v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['full_invoice_number'] = html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');

					//invoice date
					if($v_invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['completed_date'])) != "1970")
					{
						$tokens_multi['invoice_date'] = date('d.m.Y', strtotime($v_invoice_data['completed_date']));
					}
					else
					{
						$tokens_multi['invoice_date'] = '';
					}
					$tokens_multi['invoiced_period'] = date('d.m.Y', strtotime($v_invoice_data['invoice_start']))." - ".date('d.m.Y', strtotime($v_invoice_data['invoice_end']));

					$tokens_multi['first_active_day'] = '';
					$tokens_multi['last_active_day'] = '';
					$tokens_multi['first_sapv_day'] = '';
					$tokens_multi['last_sapv_day'] = '';
					$tokens_multi['sapv_approve_date'] = '';
					$tokens_multi['sapv_approve_nr'] = '';
					$tokens_multi['comment'] = html_entity_decode($v_invoice_data['comment'], ENT_QUOTES, 'UTF-8');

					if($v_invoice_data['storno'] == '1')
					{
						//rewrite invoice prefix if storned
						$tokens_multi['prefix'] = 'STORNO_' . $tokens['prefix'];
						$tokens_multi['unique_id'] = $v_invoice_data['record_id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total'] * (-1)), '2', ',', '.');
					}
					else
					{
						$tokens_multi['unique_id'] = $v_invoice_data['id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total']), '2', ',', '.');
					}

					if(count($v_invoice_data['items']) > '0')
					{
						//ISPC-1236 - new token invoice_items_html_short, without id
						$rows = count($v_invoice_data['items']);

						$grid = new Pms_Grid($v_invoice_data['items'], 1, $rows, "sh_shifts_internal_invoice_items_list_pdf.html");
						$grid_short = new Pms_Grid($v_invoice_data['items'], 1, $rows, "invoice_items_list_nocustom_pdf_short.html");
						
						$grid->invoice_total = $tokens_multi['invoice_total'];
						$grid->max_entries = $rows;
						
						$grid_short->invoice_total = $tokens_multi['invoice_total'];
						$grid_short->max_entries = $rows;

						$html_items = $grid->renderGrid();
						$html_items_short = $grid_short->renderGrid();
						
						//"Summe" text grid
						$rows_summe = count($v_invoice_data['items']);
						$grid_summe = new Pms_Grid($v_invoice_data['items'], 1, $rows_summe, "sh_shifts_internal_invoice_items_list_summe_pdf.html");
						$grid_summe_short = new Pms_Grid($v_invoice_data['items'], 1, $rows_summe, "sh_shifts_internal_invoice_items_list_summe_pdf_short.html");
						
						$grid_summe->invoice_total = $tokens_multi['invoice_total'];
						$grid_summe->max_entries = $rows_summe;
						
						$grid_summe_short->invoice_total = $tokens_multi['invoice_total'];
						$grid_summe_short->max_entries = $rows_summe;

						$html_items_summe = $grid_summe->renderGrid();
						$html_items_summe_short = $grid_summe_short->renderGrid();
					}
					else
					{
						$html_items = "";
						$html_items_short = "";
						$html_items_summe = "";
						$html_items_summe_short = "";
					}

					$tokens_multi['invoice_items_html'] = $html_items;
					$tokens_multi['invoice_items_html_short'] = $html_items_short;
					$tokens_multi['internal_invoice_items_html'] = $html_items_summe;
					$tokens_multi['internal_invoice_items_html_short'] = $html_items_summe_short;

					// ISPC-2427 Ancuta 13.11.2019
					$overall_html="";
					if( ! empty($exiting_user2patient__invoices[$v_invoice_data['user']])){
					    $uipids = array_keys($exiting_user2patient__invoices[$v_invoice_data['user']]);
					    $multiple_patient_details_array = array();
					    $multiple_patient_details_array = $patientmaster->get_multiple_patients_details($uipids);
					
					    $rows = count($exiting_user2patient__invoices[$v_invoice_data['user']]);
					    $grid_overall = new Pms_Grid($exiting_user2patient__invoices[$v_invoice_data['user']], 1, $rows, "sh_shifts_internal_invoice_overall_list_summe_pdf.html");
					    $grid_overall->pat_Details = $multiple_patient_details_array;
					    $grid_overall->max_entries = $rows;
					
					    $overall_amount_per_user =  0;
					    foreach($exiting_user2patient__invoices[$v_invoice_data['user']] as $p_ipid=>$inv_data){
					        $overall_amount_per_user +=$inv_data['total_per_patient'];
					    }
					    $grid_overall->overall_amount_per_user = $overall_amount_per_user;
					
					    $overall_html = $grid_overall->renderGrid();
					
					}
					$tokens_multi['internal_invoice_overall_html'] = $overall_html;
					//--
					
					
					
					if($template_data)
					{
					    
					    if(isset($params['print_job']) && $params['print_job'] == '1'){
					        
					        $print_params = array();
					        $print_params = $params;
					        $print_params['template_data'] = $template_data[0];
					        $print_params['vars'] = $tokens_multi;
					        $print_params['export_file_type'] = "pdf";
					        
					        $batch_temp_files = $this->print_job_generate_and_save_file($print_params);
					        
					        return $batch_temp_files ;
					        
					    } else{
						  $temp_files[] = $this->generate_file($template_data[0], $tokens_multi, 'docx', $batch_temp_folder, 'generate');
					   }
					}
				}
				
				if(count($temp_files) > '0')
				{
					//final cleanup (check if files are on disk)
					foreach($temp_files as $k_temp => $v_file)
					{
						if(!is_file($v_file))
						{
							//remove unexisting files
//							$unsetted_files[] = $v_file; //for debugs
							unset($temp_files[$v_file]);
						}
					}

					$remaining_temp_files = array_values(array_unique($temp_files));

					if(count($remaining_temp_files) > '0')
					{
					    //ISPC-2472  Ancuta 12.11.2019::added batch name
						$final_file = $this->generate_file($template_data[0], false, 'pdf', $batch_temp_folder, 'merge', $temp_files, $Batch_name);
					}
				}
				exit;
			}
		}

		public function shshiftsinternalinvoicesAction()
		{
			$sh_invoices = new ShShiftsInternalInvoices();
			$sh_invoices_items = new ShShiftsInternalInvoiceItems();
			$sh_invoices_form = new Application_Form_ShShiftsInternalInvoices();
			$clientid = $this->clientid;

			
			//ISPC-2609 Ancuta 28.08.2020 + Changes on  07.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "sh_shifts_internal_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$this->userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$this->userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			if(count($invoice_user_printjobs) > 1 ){
			    echo $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			
			//mark invoice as paid from invoices list link
			if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
			{
				if($_REQUEST['mode'] == "paid")
				{
					//mark as paid
					$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
					$invoice_pay_data['paymentAmount'] = '0.00';
					$invoice_pay_data['paymentComment'] = "";
					$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
					$invoice_pay_data['mark_as_paid'] = "1";

					$new_payment = $sh_invoices_form->submit_payment($invoice_pay_data);
					$this->_redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices');
					exit;
				}
			}

			if($this->getRequest()->isPost())
			{
//				print_r($_POST);
//				exit;
				if($_POST['draftmore'] == "1")
				{
					$transform = $sh_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $sh_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				elseif($_POST['archive_invoices_more'] == "1")
				{
					$archive = $sh_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
				}
				elseif(!empty($_POST['batch_print_more']))
				{
					$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
					$params['batch_print'] = '1'; //enables batch print procedure
					$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
					$params['get_pdf'] = '0'; //stops downloading single pdf
					//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
					if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
					    
					    $this->shshiftsinternalinvoice($params);
					    
					} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
					    $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
					    
					    $print_job_data = array();
					    $print_job_data['clientid'] = $this->clientid;
					    $print_job_data['user'] = $this->userid;
					    $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
					    $print_job_data['output_type'] = 'pdf';
					    $print_job_data['status'] = 'active';
					    $print_job_data['invoice_type'] = 'sh_shifts_internal_invoice';
					    $print_job_data['print_params'] = serialize($params);
					    $print_job_data['print_function'] = 'shshiftsinternalinvoice';
					    $print_job_data['print_controller'] = $this->getRequest()->getControllerName();
					    
					    foreach($_POST['document'] as $k=>$inv_id){
					        $print_job_data['PrintJobsItems'][] = array(
					            'clientid'=>$print_job_data['clientid'],
					            'user'=>$print_job_data['user'],
					            'invoice_id'=>$inv_id,
					            'invoice_type'=>$print_job_data['invoice_type'],
    					        'status'=>"new"
					        );
					    }
					    
					    $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
					    $print_id = $PrintJobsBulk_obj->id;
					    
					    if($print_id){
					        $this->__StartPrintJobs();
					    }
					}
					
//					print_r($params);
//					exit;
					
				}
				else
				{
					$post = $_POST;
					$post["mark_as_paid"] = "0";
					$new_payment = $sh_invoices_form->submit_payment($post);
				}
				
				//ISPC-2609 Ancuta 07.09.2020
				$msg="";
				if($print_id){
				    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				}
				//$this->_redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices'); //to avoid resubmission
				$this->_redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices'.$msg); //to avoid resubmission
				//--
				
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$clone_record = $sh_invoices->create_storno_invoice($invoiceid);
					$this->_redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices?flg=suc');
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $sh_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices?flg=delerr');
				}
			}

			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
		}

		public function fetchshshiftsinternalinvoiceslistAction()
		{
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');

			$users = new User();
			$sh_invoices_payments = new ShShiftsInternalInvoicePayments();

			$clientid = $this->clientid;

			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
// 				->select("*")
				->select("id, record_id")
				->from('ShShiftsInternalInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);

			// get client datam
			$client_details_m = new Client();
			$client_details = $client_details_m->getClientDataByid($clientid);

			$invoice_due_days = $client_details[0]['invoice_due_days'];
			$plus_due_days = '+' . $invoice_due_days . ' days';
			$this->view->plus_due_days = $plus_due_days;

			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{
				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND isdelete=0 AND isarchived ="0"';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1")';
					break;

				case 'overdue':
// 					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND DATE(NOW()) > DATE(completed_date)  AND isdelete=0 AND isarchived ="0"';
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
					break;

				case 'all':
					$filters['hiinvoice'] = ' AND isarchived ="0"';
					break;
				case 'archived':
					$filters['hiinvoice'] = ' AND isarchived ="1" AND status !="4" AND isdelete != "1"';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';
					break;
			}

			if(!empty($_REQUEST['last_name']))
			{
				$filters['user'] = ' AND (LOWER(last_name) LIKE "%' . addslashes(strtolower($_REQUEST['last_name'])) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['user'] .= ' AND (LOWER(first_name) LIKE "%' . addslashes(strtolower($_REQUEST['first_name'])) . '%")';
			}

			if(!empty($_REQUEST['username']))
			{
				$filters['user'] .= ' AND ( LOWER(username) LIKE "%' . addslashes(strtolower($_REQUEST['username'])) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
			    $filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}
			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			$sql = "*";
			//get invoice users
			
			$invoice_users = array();
			if(!empty($_REQUEST['username']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				//filter patients name/surname/epid
				//changed to user instead of patient
				$f_user = Doctrine_Query::create()
					->select($sql)
					->from('User')
					->where("isdelete =0")
					->andWhere('isactive = "0"')
					->andWhere('clientid = ' . $clientid . $filters['user']);
				$f_user_res = $f_user->fetchArray();
				
    			foreach($f_user_res as $k_f_user_res => $v_f_user_value)
    			{
    				$invoice_users[] = $v_f_user_value['id'];
    			}
			}
			
			if(!empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
			    
				//filter patients name/surname/epid
				//changed to user instead of patient
				$f_docs_q = Doctrine_Query::create()
					->select($sql)
					->from('FamilyDoctor')
					->where('clientid = ' . $clientid . $filters['user']);
				$f_docs_res = $f_docs_q->fetchArray();
				
    			foreach($f_docs_res as $k_f_user_res => $v_f_user_value)
    			{
    				$invoice_users[] = $v_f_user_value['id'];
    			}
			}
			
            if(empty($invoice_users)){
                $invoice_users = array(0);
            }
            
			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			
			// if super admin check if patient is visible or not
			if($this->usertype == 'SA')
			{
			    $sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
			    $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
			    $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
			    $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
			    $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
			    $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}
			
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
			    //filter patients name/surname/epid
			    $f_patient = Doctrine_Query::create()
			    ->select($sql)
			    ->from('PatientMaster p')
			    ->where("p.isdelete =0")
			    ->leftJoin("p.EpidIpidMapping e")
			    ->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);
			    $f_patients_res = $f_patient->fetchArray();
			
			    foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			    {
			        $f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
			    }
			    
			    if(empty($f_patients_ipids)){
			        $f_patients_ipids = array(0);
			    }
			}
			

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('ShShiftsInternalInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			if(!empty($_REQUEST['username']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$invoices_counting->andWhereIn('user', $invoice_users);
			}
			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();

			$status_count_invoices = array();


			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["overdue"][] = '1';
				}

				if($v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["all"][] = '1';
				}

				if($v_inv2count['isarchived'] == "1" && $v_inv2count['status'] != "4" && $v_inv2count['isdelete'] != "1")
				{
					$status_count_invoices["archived"][] = '1';
				}
			}
			
			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
// 				->select("*")
				->select("id, status")
				->from('ShShiftsInternalInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			if(!empty($_REQUEST['username']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$del_invoices_counting->andWhereIn('user', $invoice_users);
			}
			if(!empty($_REQUEST['epid']))
			{
			    $del_invoices_counting->andwhereIn('ipid', $f_patients_ipids);
			}
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}

			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('ShShiftsInternalInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice']);
			if(!empty($_REQUEST['username']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$invoices_nl->andWhereIn('user', $invoice_users);
			}
			if(!empty($_REQUEST['epid']))
			{
			    $invoices_nl->andwhereIn('ipid', $f_patients_ipids);
			}
			
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			$order_by = '';
			switch($_REQUEST['ord'])
			{
				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				//TODO-3173 Lore 27.05.2020
				case 'username':
				    //$orderby = 'username ' . $sort;       // nu exista campul in tabela in db, pun ce e pe default
				    $orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
				    $order_by = 'username';
				    break;
				
				case 'patient':
				    //$orderby = 'patient ' . $sort;        // nu exista campul in tabela in db, pun ce e pe default
				    $orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
				    $order_by = 'patient';
				    break;
				//.
				
				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
				    //ShShiftsInternalInvoices
					$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [NEW]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}

			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('ShShiftsInternalInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice']);
			if(!empty($_REQUEST['username']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$invoices->andwhereIn('user', $invoice_users);
		    }
			if(!empty($_REQUEST['epid']))
			{
				$invoices->andwhereIn('ipid', $f_patients_ipids);
		    }
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);

			
			$invoicelimit = $invoices->fetchArray();

			
			$invoice_ids = array();
			$invoice_uids = array();
			$docids = array();
			$invoice_ipids = array();
			
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				
				if($v_il['user_type'] == "system_user"){
    				$invoice_uids[] = $v_il['user'];
				} 
				if($v_il['user_type'] == "familly_doctor"){
    				$docids[] = $v_il['user'];
				} 
				
				$invoice_ipids[] = $v_il['ipid'];
				
			}

			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] = count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);
			
			$FamilyDoctor_obj = new FamilyDoctor();
			$doctor_details = $FamilyDoctor_obj->get_family_doctors_multiple($docids);
			
			$patientmaster = new PatientMaster();
			$patient_invoice_details = $patientmaster->getPatientsNiceName($invoice_ipids);
			$patient_details_array = array();
			foreach($patient_invoice_details as $k=>$pdet){
			    $patient_details_array[$pdet['ipid']] = $pdet;
			}
			
			//TODO-3173 Lore 27.05.2020
			foreach($invoicelimit as $keyi => $valsi){
			     $invoicelimit[$keyi]['patient'] = $patient_details_array[$valsi['ipid']]['epid'];
    			 
    			 if($valsi['user_type'] == 'system_user'){
    			     $invoicelimit[$keyi]['username'] = $users_details[$valsi['user']]['last_name'].' '.$users_details[$valsi['user']]['first_name'];
    			 } else {
    			 $invoicelimit[$keyi]['username'] = $doctor_details[$valsi['user']]['last_name'].' '.$doctor_details[$valsi['user']]['first_name'];
    			 }
			 }
			 if($order_by == 'username' || $order_by == 'patient'){
			     if($sort == 'asc') {
			         $invoicelimit = $this->array_sort($invoicelimit, $order_by, SORT_ASC);
			     } else {
			         $invoicelimit = $this->array_sort($invoicelimit, $order_by, SORT_DESC);
			     }
			 }
			//.
			 
			$invoice_payments = $sh_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);

			$this->view->storned_invoces = ShShiftsInternalInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$all_users_details = User:: getClientsUsers($clientid,true);
			$this->view->users_details = $all_users_details;
			
			$this->view->doctor_details = $doctor_details;
			$this->view->patients_details = $patient_details_array;

			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function shshiftsinternallistpaymentsAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$clientid = $this->clientid;
			$shinvoices = new ShShiftsInternalInvoices();
			$shpayments = new ShShiftsInternalInvoicePayments();
			$shinvoice_form = new Application_Form_ShShiftsInternalInvoices();
			$user = new User();

			if($_REQUEST['invoiceid'])
			{
				$payments = $shpayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}

					$del_payment = $shpayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $shpayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $shpayments->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $shinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $shpayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoicenew/shshiftsinternallistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		public function editshshiftsinternalinvoiceAction()
		{
			$clientid = $this->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$sh_invoices = new ShShiftsInternalInvoices();
			$sh_invoices_form = new Application_Form_ShShiftsInternalInvoices();

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $sh_invoices->getShInvoice($invoice_id,false,true);

				$this->view->read_only_items = '0';
				if($invoice_data['status'] >= '2')
				{
					$this->view->read_only_items = '1';
				}
			}

			if(in_array($invoice_data['id'], ShShiftsInternalInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if(!empty($_POST['paid']))
				{
					//mark as paid
					$invoice_pay_data['invoiceId'] = $_REQUEST['invoiceid'];
					$invoice_pay_data['paymentAmount'] = '0.00';
					$invoice_pay_data['paymentComment'] = "";
					$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
					$invoice_pay_data['mark_as_paid'] = "1";

					$new_payment = $sh_invoices_form->submit_payment($invoice_pay_data);

					$this->_redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices');
					exit;
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $sh_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{
					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}

				
				if(strlen($_POST['recipient']) > 0 ){
				    if(strpos($_POST['recipient'],"style"))
				    {
				        $_POST['recipient'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['recipient']);
				    }
				    $_POST['recipient'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['recipient']);
				    $_POST['recipient'] = str_replace(array("</p>"," </p>","</p> "," </p> "),"", $_POST['recipient']);
				    $_POST['recipient'] = str_replace(array("\r\n"),"<br />", $_POST['recipient']);
				}

				if(empty($_POST['pdf']))
				{
					//save/edit invoice here
					$edit_invoice = $sh_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);
				}

				//redirect to invoices list
				if(empty($_POST['pdf']))
				{
					if($edit_invoice)
					{

						$this->_redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices?flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices?flg=edterr');
					}
				}
				elseif($_POST['pdf'])
				{
					foreach($_POST['custom'] as $k_item => $v_custom)
					{
						$new_invoice_items[] = array(
							'shortcut' => $_POST['shortcut'][$k_item],
							'description' => $_POST['description'][$k_item],
							'qty' => $_POST['qty'][$k_item],
							'price' => Pms_CommonData::str2num($_POST['price'][$k_item]),
							'total' => Pms_CommonData::str2num($_POST['total'][$k_item]),
							'custom' => $v_custom,
						);

						$inv_total += Pms_CommonData::str2num($_POST['total'][$k_item]);
					}

					$params['user'] = array($invoice_data['user']);
					$params['list'] = date('Y-m', strtotime($invoice_data['invoiced_month']));
					$params['invoices'] = array($invoice_data['id']);
					$params['get_pdf'] = '1';
					$params['only_pdf'] = '1';
					$_REQUEST['type'] = 'pdf';

					$params['custom_data']['recipient'] = $_POST['recipient'];
					$params['custom_data']['comment'] = $_POST['comment'];
					$params['custom_data']['items'] = $new_invoice_items;
					$params['custom_data']['invoice_total'] = $inv_total;

					$this->shshiftsinternalinvoice($params);
					exit;
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoicenew/shshiftsinternalinvoices');
				}

				$user_details = User::getUsersDetails($invoice_data['user']);
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				
				$patientmaster = new PatientMaster();
				$patient_invoice_details = $patientmaster->getPatientsNiceName(array($invoice_data['ipid']));
					
				
				$patient_details_array = array();
				foreach($patient_invoice_details as $k=>$pdet){
				    $patient_details_array[$pdet['ipid']] = $pdet;
				}
				
				$invoice_data['patient_details']=$patient_details_array[$invoice_data['ipid']]['nice_name_epid'];
				$invoice_data['invoiced_month']= date('m-Y',strtotime($invoice_data['invoice_start']));
				
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];
				$this->view->invoice_data = $invoice_data;
				$this->view->user_details = $user_details;
				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is present
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		
		
		// #################################################
		// ########## MEMBERS - START ######################
		// #################################################
		//generate invoice from url(green buttons)
		public function membersinvoiceAction()
		{
			if(!empty($_REQUEST['member']) && !empty($_REQUEST['membership_data']))
			{
				$params['members'][] = $_REQUEST['member'];
				$params['membership_data'] = $_REQUEST['membership_data'];
				$mmembership2member_id = $_REQUEST['membership_data'];
				$membership_data_array = Member2Memberships::get_memberships_data($_REQUEST['member'],$mmembership2member_id,false);
				
				if(count($membership_data_array) > 0){
    				$selected_period = $mmembership2member_id;

    				$params['get_pdf'] = '1';
				    $params['only_pdf'] = (int) $_REQUEST['only_invoice'];
				    $params['stornopdf'] = (int) $_REQUEST['stornopdf'];
				    $params['stornoid'] = (int) $_REQUEST['stornoid'];
				    $params['invoices'] = array((int) $_REQUEST['iid']);
				    
				    
				    if($_REQUEST['int_start']){
    				    $params['interval']['start'] =  date('Y-m-d H:i:s',$_REQUEST['int_start']);
				    }
				    
				    if($_REQUEST['int_end']){
    				    $params['interval']['end'] =  date('Y-m-d H:i:s',$_REQUEST['int_end']);
				    }
				    
				    $membership_data = $membership_data_array[0];
   				    $period_details[$selected_period]['membership'] = $membership_data['membership'];
				    $period_details[$selected_period]['membership_start'] = $membership_data['start_date'];
				    $period_details[$selected_period]['membership_end'] = $membership_data['end_date'];
				    $period_details[$selected_period]['membership_price'] = $membership_data['membership_price'];
				    
    				// get client settings.
    				$client_data_array = Client::getClientDataByid($this->clientid);
    				$client_data = $client_data_array[0];
    				
    				if($params['interval']){ // invoice interval
    				    $period_details[$selected_period]['start'] = $params['interval']['start'];
    				    $period_details[$selected_period]['end'] = $params['interval']['end'];
    				    
    				    $days_array = PatientMaster::getDaysInBetween( $params['interval']['start'],$params['interval']['end']);
    				    array_walk($days_array, function(&$value) {
    				        $value = date("d.m.Y", strtotime($value));
    				    });
    				    
    				    $period_details[$selected_period]['days'] = $days_array;
    				}
    				
    				$params['selected_period'][$_REQUEST['member']] = $period_details[$selected_period];
    				$this->membersinvoice($params);
    
    			}
			}
		}

		//actual function which is generating blank member invoice
		// changed  from private to public ISPC-2609 Ancuta 31.08.2020
		public function membersinvoice($params)
		{
		    if(isset($params['print_job']) && $params['print_job'] == '1'){
		        $this->_helper->layout->setLayout('layout_ajax');
		        $this->_helper->viewRenderer->setNoRender();
		    }
			//spl_autoload_register(array('AutoLoader', 'autoloadPdf')); // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added

			//initialize used models
			$p_list = new PriceList();
			$members_invoices_form = new Application_Form_MembersInvoices();
			$members_invoices_invoices = new MembersInvoices();
			$members_invoices_invoices_items = new MembersInvoiceItems();
			$clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] : $this->clientid;

			$used_members = $params['members'];

			$master_data['client']['id'] = $clientid;

			if($params['only_pdf'] == '0')
			{
				foreach($used_members as $k_usr => $v_usr)
				{
					$recipient = array();

					// get client memberships data
					$membership_data = Memberships::membership_details($clientid,$params['selected_period'][$v_usr]['membership']);
					
					$curent_period[$v_usr]['start'] = $params['selected_period'][$v_usr]['start'];
					$curent_period[$v_usr]['end'] = $params['selected_period'][$v_usr]['end'];
					
					$membership_period[$v_usr]['start'] = $params['selected_period'][$v_usr]['membership_start'];
					$membership_period[$v_usr]['end'] = $params['selected_period'][$v_usr]['membership_end'];

					$curent_period_days[$v_usr] = $params['selected_period'][$v_usr]['days'];

					$master_data['members'][$v_usr]['invoice_data']['member'] = $v_usr;
					$master_data['members'][$v_usr]['invoice_data']['period'] = $curent_period[$v_usr];
					//ispc 1842
 					$master_data['members'][$v_usr]['invoice_data']['membership_period'] = $membership_period[$v_usr];
					//$master_data['members'][$v_usr]['invoice_data']['membership_period'] = $curent_period[$v_usr];

					$members = new Member();
					$member_details = $members->getMemberDetails($v_usr);

					$recipient_title = trim(rtrim($member_details[$v_usr]['title']));
					if($member_details[$v_usr]['type'] == "company"){
    					$recipient_company = trim(rtrim($member_details[$v_usr]['member_company']));
					}
					if(!empty($member_details[$v_usr]['first_name'])  || !empty($member_details[$v_usr]['last_name']) ){
    					$recipient_name = trim(rtrim($member_details[$v_usr]['first_name'])) . ' ' . trim(rtrim($member_details[$v_usr]['last_name']));
					}
					$recipient_street = trim(rtrim($member_details[$v_usr]['street1']));
					$recipient_zip = trim(rtrim($member_details[$v_usr]['zip']));
					$recipient_city = trim(rtrim($member_details[$v_usr]['city']));

		 
					if($recipient_company)
					{
						$recipient[$v_usr][] = $recipient_company;
					}
					if($recipient_name)
					{
						$recipient[$v_usr][] = $recipient_name;
					}

					if($recipient_street)
					{
						$recipient[$v_usr][] = $recipient_street;
					}


					if($recipient_zip || $recipient_city)
					{
						$recipient_blocks = array();

						if($recipient_zip)
						{
							$recipient_blocks[] = $recipient_zip;
						}

						if($recipient_city)
						{
							$recipient_blocks[] = $recipient_city;
						}

						$recipient[$v_usr][] = implode(" ", $recipient_blocks);
					}

					// member_adresse(recipient) - never changes
					$master_data['recipient'][$v_usr] = implode("<br />", $recipient[$v_usr]);

					if(!array_key_exists($v_usr, $master_price_list))
					{
// 						$master_price_list[$v_usr] = $p_list->get_period_price_list(date('Y-m-d', strtotime($curent_period[$v_usr]['start'])), date('Y-m-d', strtotime($curent_period[$v_usr]['end'])));
						$master_price_list[$v_usr] = $p_list->get_client_list_period(date('Y-m-d', strtotime($curent_period[$v_usr]['start'])), date('Y-m-d', strtotime($curent_period[$v_usr]['end'])));
					}

// 					$current_pricelist = end($master_price_list[$v_usr]);
					$current_pricelist = $master_price_list[$v_usr][0];
					
					if($current_pricelist)
					{
					    $price_memberships_model = new PriceMemberships();
					    $price_memberships = $price_memberships_model->get_prices($current_pricelist['id'], $clientid);
					}
					
					
					
					$item_details['description'] = $price_memberships[$membership_data['id']]['membership'];
					$item_details['shortcut'] = $price_memberships[$membership_data['id']]['shortcut'];
					$item_details['qty'] = "1";
					if($params['selected_period'][$v_usr]['membership_price'] !="0.00"){
    					$item_details['price'] = $params['selected_period'][$v_usr]['membership_price'];
					} else{
    					$item_details['price'] = $price_memberships[$membership_data['id']]['price'];
					}
					$item_details['custom'] = "0";

					$master_data['invoices'][$v_usr]['items'][] = $item_details;
					
					
					$master_data['invoiced_month'] = date('Y-m-d H:i:s', strtotime($params['selected_period'][$v_usr]['start']));
					
					$master_data['membership_data'] = $params['membership_data'];

					$master_data['invoices'][$v_usr]['pricelist'] = $current_pricelist;
					

					
				}
				
				$inserted_invoices = $members_invoices_form->insert_invoice($master_data);
			}
			else if($params['invoices'])
			{
				$inserted_invoices = $params['invoices'];
			}


			if($params['get_pdf'] == "1")
			{
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
				    $invoice_data = $members_invoices_invoices->get_members_invoices($params['stornoid'], false, false); //TODO-2970  Ancuta 04.03.2020 :: third param - remove archived = false 

				    $invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];     //ISPC-2532 Lore 10.11.2020
				    
					//ISPC-2532 Carmen 18.02.2020 - get the prefix and the number of storno invoice
					$invoice_data_storno = $members_invoices_invoices->get_invoice($inserted_invoices[0]);
					$invoice_data['prefix'] = $invoice_data_storno[0]['prefix'];
					$invoice_data['invoice_number'] = $invoice_data_storno[0]['invoice_number'];
					//--
				}
				else
				{
				    $invoice_data = $members_invoices_invoices->get_members_invoices($inserted_invoices[0], false,false);//TODO-2970  Ancuta 04.03.2020 :: third param - remove archived = false 
				}

				
				if(strlen($invoice_data['recipient']) > 0 ){
				    if(strpos($invoice_data['recipient'],"style"))
				    {
				        $invoice_data['recipient'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['recipient']);
				    }
				    $invoice_data['recipient'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['recipient']);
				    $invoice_data['recipient'] = str_replace(array("</p>"," </p>","</p> "," </p> "),"", $invoice_data['recipient']);
				    $invoice_data['recipient'] = str_replace(array("\r\n"),"<br />", $invoice_data['recipient']);
				}
				
				
				//rewrite invoice_data with custom data (which comes from POST)
				if($params['custom_data'])
				{
					//rewrite custom data from POST to $invoice_data.
					foreach($params['custom_data'] as $k_custom => $v_custom)
					{
						$invoice_data[$k_custom] = $v_custom;
					}
				}

				//load template data
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'members_invoice');

				$recipient = array();
				//setup tokens (remove pseudopost when all works)
				//user tokens
				$members = new Member();
				$member_details = $members->getMemberDetails($invoice_data['member']);

				if($member_details[$invoice_data['member']]['type'] == "company"){
    				$recipient_company = trim(rtrim($member_details[$invoice_data['member']]['member_company']));
				}
				if( ! empty($member_details[$invoice_data['member']]['first_name']) || !empty($member_details[$invoice_data['member']]['last_name'])){
    				$recipient_name = trim(rtrim($member_details[$invoice_data['member']]['first_name'])) . ' ' . trim(rtrim($member_details[$invoice_data['member']]['last_name']));
				}
				$recipient_street = trim(rtrim($member_details[$invoice_data['member']]['street1']));
				$recipient_zip = trim(rtrim($member_details[$invoice_data['member']]['zip']));
				$recipient_city = trim(rtrim($member_details[$invoice_data['member']]['city']));

				if($recipient_company)
				{
					$recipient[] = $recipient_company;
				}
				
				if($recipient_name)
				{
					$recipient[] = $recipient_name;
				}

				if($recipient_street)
				{
					$recipient[] = $recipient_street;
				}

				if($recipient_zip || $recipient_city)
				{
					$recipient_blocks = array();

					if($recipient_zip)
					{
						$recipient_blocks[] = $recipient_zip;
					}

					if($recipient_city)
					{
						$recipient_blocks[] = $recipient_city;
					}

					$recipient[] = implode(" ", $recipient_blocks);
				}


				// member_adresse - never changes
				$tokens['member_recipient_block'] = implode("<br />", $recipient);

				
				$tokens['member_firstname'] = trim(rtrim($member_details[$invoice_data['member']]['first_name']));
				$tokens['member_surname'] = trim(rtrim($member_details[$invoice_data['member']]['last_name']));
				$tokens['member_geb_datum'] = date("d.m.Y",strtotime($member_details[$invoice_data['member']]['birthd']));
				$tokens['member_birthd'] = date("d.m.Y",strtotime($member_details[$invoice_data['member']]['birthd']));
				$tokens['member_street'] =trim(rtrim($member_details[$invoice_data['member']]['street1'])) ;
				$tokens['member_zip']= trim(rtrim($member_details[$invoice_data['member']]['zip'])) ;
				$tokens['member_city'] = trim(rtrim($member_details[$invoice_data['member']]['city'])) ;
				
				//ISPC-1236 Lore 05.02.2020
				$tokens['membersbank'] = trim(rtrim($member_details[$invoice_data['member']]['bank_name'])) ;
				

				$tokens['invoice_start'] =  date('d.m.Y', strtotime($invoice_data['invoice_start']));;
				$tokens['invoice_end'] =  date('d.m.Y', strtotime($invoice_data['invoice_end']));;

				$tokens['membership_start_date'] =  date('d.m.Y', strtotime($invoice_data['membership_start']));;
				
				if($invoice_data['membership_end'] != "0000-00-00 00:00:00"){
    				$tokens['membership_end_date'] =  date('d.m.Y', strtotime($invoice_data['membership_end']));;
				} else{
    				$tokens['membership_end_date'] =  " - ";
				}
				

				//client tokens
				$tokens['client_ik'] = "";

				//sapv
				$tokens['first_sapv_day'] = "";
				$tokens['last_sapv_day'] = "";
				
				$tokens['sapv_approve_date'] = "";
				$tokens['sapv_approve_nr'] = "";
				$tokens['ppun'] = "";
				$tokens['debtor_number'] = "";
				$tokens['paycenter'] = "";

				//health insurance tokens
				$tokens['insurance_no'] = "";
				$tokens['address'] = "";
				$tokens['SAPV_Rechnungsempfaenger'] = "";
				
				//default is the benutzer_addrese but can be changed
				if(!empty($_POST['recipient']))
				{
					$tokens['recipient'] = nl2br($_POST['recipient']);
				}
				else if(!empty($invoice_data['recipient']))
				{
					$tokens['recipient'] = $invoice_data['recipient'];
				}
				else
				{
					$tokens['recipient'] = $tokens['member_recipient_block'];
				}
				
				// FORCE ADDRESS TO WORK
				$tokens['address'] = $tokens['recipient']; // membersinvoice

				 

				$tokens['beneficiary_address'] = "";

				//invoice specific tokens
				$tokens['first_active_day'] = "";
				$tokens['last_active_day'] = "";
				$tokens['invoiced_month'] = "";
				if(!empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
				{
					$tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
				}

				$tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
				$tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
				$tokens['ppun'] = "";
				$tokens['debtor_number'] = "";
				$tokens['paycenter'] = "";


				//invoice date
				if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970")
				{
					$tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
				}
				else
				{
					$tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['create_date']));
				}

				if($_POST['comment'])
				{
					$tokens['comment'] = $_POST['comment'];
				}
				else
				{
					$tokens['comment'] = html_entity_decode($invoice_data['comment'], ENT_QUOTES, 'UTF-8');
				}
				
				$tokens['invoice_items'] = $invoice_data['items'];


				if($invoice_data['storno'] == '1')
				{
					//rewrite invoice prefix if storned
					$tokens['prefix'] = 'STORNO_' . $tokens['prefix'];
				}

				//ISPC-2532 Lore 10.11.2020
				if($invoice_data_storno[0]['storno'] == '1') {
				    $tokens['full_invoice_number'] = ' Storno '.$tokens['full_invoice_number']; // ISPC-2532 Ancuta 11.12.2020- comment from 10.12.2020 - overwtite - and add STORNO in front
				    $tokens['full_invoice_number'] .= ' zur Rechnung '.$invoice_data['storned_invoice_number'];
				}
				
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$tokens['unique_id'] = $invoice_data['record_id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total'] * (-1)), '2', ',', '.');
				}
				else
				{
					$tokens['unique_id'] = $invoice_data['id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
				}
				
				if(count($invoice_data['items']) > '0')
				{
					//ISPC-1236 - new token invoice_items_html_short, without id
					//"Rechnungsbetrag" text grid
					$rows = count($invoice_data['items']);
					$grid = new Pms_Grid($invoice_data['items'], 1, $rows, "members_invoice_items_list_pdf.html");
					$grid_short = new Pms_Grid($invoice_data['items'], 1, $rows, "invoice_items_list_nocustom_pdf_short.html");
					
					$grid->invoice_total = $tokens['invoice_total'];
					$grid->max_entries = $rows;
					
					$grid_short->invoice_total = $tokens['invoice_total'];
					$grid_short->max_entries = $rows;

					$html_items = $grid->renderGrid();
					$html_items_short = $grid_short->renderGrid();
					
					//"Summe" text grid
					$rows_summe = count($invoice_data['items']);
					$grid_summe = new Pms_Grid($invoice_data['items'], 1, $rows_summe, "members_invoice_items_list_summe_pdf.html");
					$grid_summe_short = new Pms_Grid($invoice_data['items'], 1, $rows_summe, "members_invoice_items_list_summe_pdf_short.html");
					
					$grid_summe->invoice_total = $tokens['invoice_total'];
					$grid_summe->max_entries = $rows_summe;
					
					$grid_summe_short->invoice_total = $tokens['invoice_total'];
					$grid_summe_short->max_entries = $rows_summe;

					$html_items_summe = $grid_summe->renderGrid();
					$html_items_summe_short = $grid_summe_short->renderGrid();
				}

				$tokens['invoice_items_html'] = $html_items;
				$tokens['invoice_items_html_short'] = $html_items_short;
				$tokens['internal_invoice_items_html'] = $html_items_summe;
				$tokens['internal_invoice_items_html_short'] = $html_items_summe_short;

				if($template_data)
				{
					$this->generate_file($template_data[0], $tokens,'pdf');
					exit;
				}
				else
				{
					$this->redirect(APP_BASE . 'invoicenew/membersinvoices?flg=notemplate');
					exit;
				}
			}

			if($params['batch_print'] == '1' && count($params['invoices']) > '0')
			{
				// batch temp folder
				if(!is_dir(PDFDOCX_PATH))
				{
				    while(!is_dir(PDFDOCX_PATH))
				    {
				        mkdir(PDFDOCX_PATH);
				        if($i >= 50)
				        {
				            exit; //failsafe
				        }
				        $i++;
				    }
				}
				
				if(!is_dir(PDFDOCX_PATH . '/' . $clientid))
				{
				    while(!is_dir(PDFDOCX_PATH . '/' . $clientid))
				    {
				        mkdir(PDFDOCX_PATH . '/' . $clientid);
				        if($i >= 50)
				        {
				            exit; //failsafe
				        }
				        $i++;
				    }
				}
				
				$path = PDFDOCX_PATH . '/' . $clientid;
				$i = 0;
				$dir = substr(md5(rand(1, 9999) . microtime()), 0, 10);
				while(!is_dir($path . '/' . $dir))
				{
				    $dir = substr(md5(rand(1, 9999) . microtime()), 0, 10);
				    mkdir($path . '/' . $dir);
				    if($i >= 50)
				    {
				        exit; //failsafe
				    }
				    $i++;
				}
				$batch_temp_folder = $dir;
				
				
				
				
				
				
				$invoices_ids = $params['invoices'];

				//load template data
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'members_invoice');

				//load invoices data
				$invoices_data = $members_invoices_invoices->get_invoices($invoices_ids,false); //TODO-2970  Ancuta 04.03.2020 :: second param - remove archived = false

				// ISPC-2472  Ancuta 12.11.2019::create batch name
				$inv_names = array();
				foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
				    $inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
				}
				$Batch_name = false;
				if(!empty($inv_names)){
				    $Batch_name = $inv_names[0];
				    if( count($inv_names) > 1){
				        $Batch_name .='_'.end($inv_names);
				    }
				}
				//--				

				foreach($invoices_data['invoices_data'] as $k_invoice_id => $v_invoice_data)
				{
					//setup tokens
					//user tokens
					$recipient = array();
					$users = new User();
					$user_details = $users->getUsersDetails($v_invoice_data['user']);
					$members = new Member();
					$member_details = $members->getMembersDetails($v_invoice_data['member']);

					if($member_details[$v_invoice_data['member']]['type'] == "company"){
					    $recipient_company = trim(rtrim($member_details[$v_invoice_data['member']]['member_company']));
					}
					if(!empty($member_details[$v_invoice_data['member']]['first_name']) || !empty($member_details[$v_invoice_data['member']]['last_name'])){
    					$recipient_name = trim(rtrim($member_details[$v_invoice_data['member']]['first_name'])) . ' ' . trim(rtrim($member_details[$v_invoice_data['member']]['last_name']));
					}
					$recipient_street = trim(rtrim($member_details[$v_invoice_data['member']]['street1']));
					$recipient_zip = trim(rtrim($member_details[$v_invoice_data['member']]['zip']));
					$recipient_city = trim(rtrim($member_details[$v_invoice_data['member']]['city']));

					if(strlen($v_invoice_data['recipient']) > 0 ){
					    if(strpos($v_invoice_data['recipient'],"style"))
					    {
					        $v_invoice_data['recipient'] = preg_replace('/style=\"(.*)\"/i', '', $v_invoice_data['recipient']);
					    }
					    $v_invoice_data['recipient'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $v_invoice_data['recipient']);
					    $v_invoice_data['recipient'] = str_replace(array("</p>"," </p>","</p> "," </p> "),"", $v_invoice_data['recipient']);
					    $v_invoice_data['recipient'] = str_replace(array("\r\n"),"<br />", $v_invoice_data['recipient']);
					}
						
					
					
					if($recipient_company)
					{
						$recipient[] = $recipient_company;
					}
					
					if($recipient_name)
					{
						$recipient[] = $recipient_name;
					}

					if($recipient_street)
					{
						$recipient[] = $recipient_street;
					}

					if($recipient_zip || $recipient_city)
					{
						$recipient_blocks = array();

						if($recipient_zip)
						{
							$recipient_blocks[] = $recipient_zip;
						}

						if($recipient_city)
						{
							$recipient_blocks[] = $recipient_city;
						}

						$recipient[] = implode(" ", $recipient_blocks);
					}


					// benutzer_adresse - never changes
					$tokens_multi['member_recipient_block'] = implode("<br />", $recipient);


					//client tokens
					$tokens_multi['client_ik'] = "";

					$tokens_multi['member_firstname'] = trim(rtrim($member_details[$v_invoice_data['member']]['first_name']));
					$tokens_multi['member_surname'] = trim(rtrim($member_details[$v_invoice_data['member']]['last_name']));
					$tokens_multi['member_geb_datum'] = date("d.m.Y",strtotime($member_details[$v_invoice_data['member']]['birthd']));
					$tokens_multi['member_birthd'] = date("d.m.Y",strtotime($member_details[$v_invoice_data['member']]['birthd']));
					$tokens_multi['member_street'] =trim(rtrim($member_details[$v_invoice_data['member']]['street1'])) ;
					$tokens_multi['member_zip']= trim(rtrim($member_details[$v_invoice_data['member']]['zip'])) ;
					$tokens_multi['member_city'] = trim(rtrim($member_details[$v_invoice_data['member']]['city'])) ;
					

					$tokens_multi['invoice_start'] =  date('d.m.Y', strtotime($v_invoice_data['invoice_start']));;
					$tokens_multi['invoice_end'] =  date('d.m.Y', strtotime($v_invoice_data['invoice_end']));;
					
					$tokens_multi['membership_start_date'] =  date('d.m.Y', strtotime($v_invoice_data['membership_start']));;
					
					if($v_invoice_data['membership_end'] != "0000-00-00 00:00:00"){
    					$tokens_multi['membership_end_date'] =  date('d.m.Y', strtotime($v_invoice_data['membership_end']));;
					} else{
    					$tokens_multi['membership_end_date'] =  " - ";
					}
					
					//ISPC-1236 Lore 05.02.2020
					$tokens_multi['membersbank'] = (strlen(trim(rtrim($member_details[$v_invoice_data['member']]['bank_name']))) > '0' ? html_entity_decode(trim(rtrim($member_details[$v_invoice_data['member']]['bank_name'])), ENT_QUOTES, 'utf-8') : '');

					//health insurance tokens
					$tokens_multi['insurance_no'] = "";
					$tokens_multi['beneficiary_address'] = "";
					$tokens_multi['address'] = "";
					$tokens_multi['SAPV_Rechnungsempfaenger'] = "";
					//default is the benutzer_addrese but can be changed
					if(!empty($v_invoice_data['recipient']))
					{
						$tokens_multi['recipient'] = $v_invoice_data['recipient'];
					}
					else
					{
						$tokens_multi['recipient'] = $tokens_multi['member_recipient_block'];
					}
					// FORCE ADDRESS TO WORK
					$tokens_multi['address'] = $tokens_multi['recipient']; //membersinvoice
					
					//invoice specific tokens
					if(!empty($v_invoice_data['invoiced_month']) && $v_invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
					{
						$tokens_multi['invoiced_month'] = date('m/Y', strtotime($v_invoice_data['invoiced_month']));
					}
					else
					{
						$tokens_multi['invoiced_month'] = "";
					}

					$tokens_multi['prefix'] = html_entity_decode($v_invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['invoice_number'] = html_entity_decode($v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['full_invoice_number'] = html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');

					//invoice date
					if($v_invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['completed_date'])) != "1970")
					{
						$tokens_multi['invoice_date'] = date('d.m.Y', strtotime($v_invoice_data['completed_date']));
					}
					else
					{
						$tokens_multi['invoice_date'] =  date('d.m.Y', strtotime($v_invoice_data['create_date']));
					}

					$tokens_multi['first_active_day'] = '';
					$tokens_multi['last_active_day'] = '';
					$tokens_multi['first_sapv_day'] = '';
					$tokens_multi['last_sapv_day'] = '';
					$tokens_multi['sapv_approve_date'] = '';
					$tokens_multi['sapv_approve_nr'] = '';
					$tokens_multi['comment'] = html_entity_decode($v_invoice_data['comment'], ENT_QUOTES, 'UTF-8');

					if($v_invoice_data['storno'] == '1')
					{
						//rewrite invoice prefix if storned
						$tokens_multi['prefix'] = 'STORNO_' . $tokens['prefix'];
						$tokens_multi['unique_id'] = $v_invoice_data['record_id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total'] * (-1)), '2', ',', '.');
					}
					else
					{
						$tokens_multi['unique_id'] = $v_invoice_data['id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total']), '2', ',', '.');
					}

					if(count($v_invoice_data['items']) > '0')
					{
						//ISPC-1236 - new token invoice_items_html_short, without id
						$rows = count($v_invoice_data['items']);

						$grid = new Pms_Grid($v_invoice_data['items'], 1, $rows, "members_invoice_items_list_pdf.html");
						$grid_short = new Pms_Grid($v_invoice_data['items'], 1, $rows, "invoice_items_list_nocustom_pdf_short.html");
						
						$grid->invoice_total = $tokens_multi['invoice_total'];
						$grid->max_entries = $rows;
						
						$grid_short->invoice_total = $tokens_multi['invoice_total'];
						$grid_short->max_entries = $rows;

						$html_items = $grid->renderGrid();
						$html_items_short = $grid_short->renderGrid();
						
						//"Summe" text grid
						$rows_summe = count($v_invoice_data['items']);
						$grid_summe = new Pms_Grid($v_invoice_data['items'], 1, $rows_summe, "members_invoice_items_list_summe_pdf.html");
						$grid_summe_short = new Pms_Grid($v_invoice_data['items'], 1, $rows_summe, "members_invoice_items_list_summe_pdf_short.html");
						
						$grid_summe->invoice_total = $tokens_multi['invoice_total'];
						$grid_summe->max_entries = $rows_summe;
						
						$grid_summe_short->invoice_total = $tokens_multi['invoice_total'];
						$grid_summe_short->max_entries = $rows_summe;

						$html_items_summe = $grid_summe->renderGrid();
						$html_items_summe_short = $grid_summe_short->renderGrid();
					}
					else
					{
						$html_items = "";
						$html_items_short = "";
						$html_items_summe = "";
						$html_items_summe_short = "";
					}

					$tokens_multi['invoice_items_html'] = $html_items;
					$tokens_multi['invoice_items_html_short'] = $html_items_short;
					$tokens_multi['internal_invoice_items_html'] = $html_items_summe;
					$tokens_multi['internal_invoice_items_html_short'] = $html_items_summe_short;

					if($template_data)
					{
					    if(isset($params['print_job']) && $params['print_job'] == '1'){
					        
					        $print_params = array();
					        $print_params = $params;
					        $print_params['template_data'] = $template_data[0];
					        $print_params['vars'] = $tokens_multi;
					        $print_params['export_file_type'] = "pdf";
					        
					        $batch_temp_files = $this->print_job_generate_and_save_file($print_params);
					        
					        return $batch_temp_files ;
					        
					    } else{
						  $temp_files[] = $this->generate_file($template_data[0], $tokens_multi, 'docx', $batch_temp_folder, 'generate');
					    }
					}
				}

				if(count($temp_files) > '0')
				{
					//final cleanup (check if files are on disk)
					foreach($temp_files as $k_temp => $v_file)
					{
						if(!is_file($v_file))
						{
							//remove unexisting files
//							$unsetted_files[] = $v_file; //for debugs
							unset($temp_files[$v_file]);
						}
					}

					$remaining_temp_files = array_values(array_unique($temp_files));

					if(count($remaining_temp_files) > '0')
					{  
					    //ISPC-2472  Ancuta 12.11.2019::added batch name
					    if( !isset($params['print_job'])){ // ISPC-2609 Ancuta 31.08.2020
						  $final_file = $this->generate_file($template_data[0], false, 'pdf', $batch_temp_folder, 'merge', $temp_files,$Batch_name);
					    }
					}
				}
				if ( ! isset($params['print_job']) && $params['print_job'] == '1' ){
				    
				} else {
				    exit;
				}
			}
		}
		// function which is auto generating invoices - that at the moment where not generated
		private function generatemembersinvoice($params)
		{
			//initialize used models
			$p_list = new PriceList();
			$members_invoices_form = new Application_Form_MembersInvoices();
			$members_invoices_invoices = new MembersInvoices();
			$members_invoices_invoices_items = new MembersInvoiceItems();
			$clientid = $this->clientid;

			$used_members = $params['members'];

			$master_data['client']['id'] = $clientid;
			if($params['auto_generate'] == '1')
			{
				foreach($used_members as $k_usr => $v_usr)
				{
// print_r($params['selected_period'][$v_usr]); 
				    foreach($params['selected_period'][$v_usr] as $k=>$inv_data){
				        
    					$recipient = array();
    					// get client memberships data
    					$membership_data = Memberships::membership_details($clientid,$inv_data['membership']);
    					
    					$curent_period[$v_usr]['start'] = $inv_data['int_start_s'];
    					$curent_period[$v_usr]['end'] = $inv_data['int_end_s'];
    					
    					$membership_period[$v_usr]['start'] = $inv_data['membership_start'];
    					$membership_period[$v_usr]['end'] = $inv_data['membership_end'];
    
    					$curent_period_days[$v_usr] = $inv_data['days'];
    
    					$master_data[$k]['members'][$v_usr]['invoice_data']['client'] = $clientid;
    					$master_data[$k]['members'][$v_usr]['invoice_data']['membership_data'] = $inv_data['membership_data'];
    					$master_data[$k]['members'][$v_usr]['invoice_data']['invoiced_month'] =  date('Y-m-d H:i:s', strtotime($inv_data['int_start_s']));
    					
    					$master_data[$k]['members'][$v_usr]['invoice_data']['member'] = $v_usr;
    					$master_data[$k]['members'][$v_usr]['invoice_data']['period'] = $curent_period[$v_usr];
//     					$master_data[$k]['members'][$v_usr]['invoice_data']['membership_period'] = $membership_period[$v_usr];
    					$master_data[$k]['members'][$v_usr]['invoice_data']['membership_period'] = $curent_period[$v_usr];
    
    					$members = new Member();
    					$member_details = $members->getMemberDetails($v_usr);
    
    					$recipient_title = trim(rtrim($member_details[$v_usr]['title']));
    					
    					if( $member_details[$v_usr]['type'] == "company"){
        					$recipient_company = trim(rtrim($member_details[$v_usr]['member_company']));
    					}
    					
    					if( ! empty($member_details[$v_usr]['first_name']) || !empty($member_details[$v_usr]['last_name'])){
    					   $recipient_name = trim(rtrim($member_details[$v_usr]['first_name'])) . ' ' . trim(rtrim($member_details[$v_usr]['last_name']));
    					}
    					$recipient_street = trim(rtrim($member_details[$v_usr]['street1']));
    					$recipient_zip = trim(rtrim($member_details[$v_usr]['zip']));
    					$recipient_city = trim(rtrim($member_details[$v_usr]['city']));
    
    		 
    					if($recipient_company)
    					{
    						$recipient[$v_usr][] = $recipient_company;
    					}
    					if($recipient_name)
    					{
    						$recipient[$v_usr][] = $recipient_name;
    					}
    
    					if($recipient_street)
    					{
    						$recipient[$v_usr][] = $recipient_street;
    					}
    
    
    					if($recipient_zip || $recipient_city)
    					{
    						$recipient_blocks = array();
    
    						if($recipient_zip)
    						{
    							$recipient_blocks[] = $recipient_zip;
    						}
    
    						if($recipient_city)
    						{
    							$recipient_blocks[] = $recipient_city;
    						}
    
    						$recipient[$v_usr][] = implode(" ", $recipient_blocks);
    					}
    
    					$master_data[$k]['recipient'][$v_usr] = implode("<br />", $recipient[$v_usr]);
    
    					if(!array_key_exists($v_usr, $master_price_list))
    					{
    						$master_price_list[$v_usr] = $p_list->get_client_list_period(date('Y-m-d', strtotime($curent_period[$v_usr]['start'])), date('Y-m-d', strtotime($curent_period[$v_usr]['end'])));
    					}
    					$current_pricelist = $master_price_list[$v_usr][0];
    					
    					if($current_pricelist)
    					{
    					    $price_memberships_model = new PriceMemberships();
    					    $price_memberships = $price_memberships_model->get_prices($current_pricelist['id'], $clientid);
    					}
    					
    					$item_details[$v_usr]['description'] = $price_memberships[$membership_data['id']]['membership'];
    					$item_details[$v_usr]['shortcut'] = $price_memberships[$membership_data['id']]['shortcut'];
    					$item_details[$v_usr]['qty'] = "1";
    					
    					if($inv_data['membership_price'] != "0.00"){
        					$item_details[$v_usr]['price'] = $inv_data['membership_price']; // get custom price 
    					} else{
        					$item_details[$v_usr]['price'] = $price_memberships[$membership_data['id']]['price'];
    					}
    					
    					$item_details[$v_usr]['custom'] = "0";
    
    					$master_data[$k]['invoices'][$v_usr]['items'][] = $item_details[$v_usr];
    					$master_data[$k]['invoices'][$v_usr]['pricelist'] = $current_pricelist;
				    }
// 				    print_r($master_data);
				    $inserted_invoices = $members_invoices_form->auto_insert_invoice($master_data);
				}
// 				exit;
			}
		}

		public function membersinvoicesAction()
		{
			
			$members_invoices = new MembersInvoices();
			$members_invoices_items = new MembersInvoiceItems();
			$members_invoices_form = new Application_Form_MembersInvoices();
			$clientid = $this->clientid;
			//ISPC-2609 Ancuta 28.08.2020 + Changes on  07.09.2020
			//get printjobs - active or completed - for client, user and invoice type
			$allowed_invoice_name =  "members_invoice";
			$this->view->allowed_invoice = $allowed_invoice_name;
			$invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$this->userid,$allowed_invoice_name );
			
			$print_html = '<div class="print_jobs_div">';
			$print_html .= "<h3> ".$this->translate('print_job_table_headline')."</h3>";
			$print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$this->userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->translate('Clear_all_prints')."</span>";
			$table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
			$print_html .= $table_html;
			$print_html .= '</div>';
			if(count($invoice_user_printjobs) > 1 ){
			    echo $print_html;
			}
			
			$this->view->show_print_jobs = $this->user_print_jobs;
			
			//---
			
			
			// get client settings.
			$client_data_array = Client::getClientDataByid($this->clientid);
			$client_data = $client_data_array[0];
			$billing_method = $client_data['membership_billing_method'];
						
            // get all invoices
			$invoices_q = Doctrine_Query::create()
			->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
			->from('MembersInvoices')
			->where("client='" . $clientid . "'")
			->andWhere('isdelete = "0"  ');
			$invoices_array = $invoices_q->fetchArray();
			
			$this->view->invoices_array = $invoices_array;
			/*
			 * the next lines ware commented on 12.01.2018, ISPC-2148
			 * comment-ISPC-2148 start 
			 */
			/*
			foreach($invoices_array as $k => $invoice){
			        $invoice_data[$invoice['member']][$invoice['membership_data']][$invoice['id']]['start'] = strtotime($invoice['invoice_start']);
			        $invoice_data[$invoice['member']][$invoice['membership_data']][$invoice['id']]['end'] = strtotime($invoice['invoice_end']);
			        $invoice_data_s[$invoice['member']][$invoice['id']]['start'] = $invoice['invoice_start'];
			        $invoice_data_s[$invoice['member']][$invoice['id']]['end'] = $invoice['invoice_end'];
			        $members2invoices[] = $invoice['member'];
			}
			if(empty($members2invoices)){
			    $members2invoices[] = "9999999999";
			}
			$members2invoices = array_unique($members2invoices);
			
			//get all client members
			$client_members = Member::get_client_members($clientid,0);

			foreach($client_members as $mk =>$member_value){
   			    
			    if($member_value['inactive'] == "1" &&  $member_value['inactive_from'] == "0000-00-00"){
   			        $fully_inactiv[] = $member_value['id'];
   			    } else {
    			    $member_ids[] = $member_value['id'];
   			    }

   			    
			    $inactive_details[$member_value['id']]['inactive'] = $member_value['inactive'];
   			    $inactive_details[$member_value['id']]['date'] = $member_value['inactive_from'];
   			    
   			    
			}
			
			if(empty($member_ids)) {
				
				//if empty $member_ids then what should we list? invoices of deleted members?
				
			    $member_ids[] = "9999999999";
			    
			}
			
			// get all membership data.
			$membership2members = Member2Memberships::get_memberships_history($clientid,$member_ids);
			
			
			$current_date = date("d.m.Y", time());
			// check if membership periods were invoiced
			if(!empty($membership2members)){
			    
                //################################################
			    foreach($membership2members as $sk=>$md_h){
			        //IMPORTANT
			        // - CHANGE MEMBERSHIP  END DATE IF INACTIVE DATE IS SET
			        if($memberarray['inactive'] == "1" && $memberarray['inactive_from'] !=  "0000-00-00"){
			            $inactive_date = date("Y-m-d H:i:s", strtotime($memberarray['inactive_from']));
			            if( $md_h['end_date'] != "0000-00-00 00:00:00"){
			                if( strtotime($md_h['end_date'])  >  strtotime($inactive_date)){
			                    $membership2members[$$sk]['end_date'] =$inactive_date;
			                }
			            } else {
			    
			                if( strtotime($md_h['start_date']) < strtotime($inactive_date) ){
			                    $membership2members[$sk]['end_date'] = $inactive_date;
			                } else {
			                    unset($membership2members[$sk]); // remove periods that are after the inactive date
			                }
			            }
			        }
			    }
			    
			    
			    $m = 0;
			    foreach($membership2members as $k=>$md){
			        
			        $membership_history[$md['member']][$md['id']] = $md;

			        if($client_data['membership_billing_method'] == "membership"){
			            
			            if($md['start_date'] != "0000-00-00 00:00:00"){
			                $membership_history[$md['member']][$md['id']]['start'] = date( 'd.m.Y',strtotime($md['start_date']));
			            } else{
			                $membership_history[$md['member']][$md['id']]['start'] = "";
			            }
			            
			            if($md['end_date'] != "0000-00-00 00:00:00"){
			                
			                $membership_history[$md['member']][$md['id']]['end'] = date( 'd.m.Y',strtotime($md['end_date']));
			                $membership_history_cal[$md['member']][$md['id']]['end'] = date( 'd.m.Y',strtotime($md['end_date']));
			                
			            } else {
			                
			                $membership_history[$md['member']][$md['id']]['end'] = "";
// 			                $membership_history_cal[$md['member']][$md['id']]['end'] = $current_date;

			                if(strtotime($md['start_date']) >= strtotime(date("d.m.Y",time()))){
			                    
			                    $membership_history_cal[$md['member']][$md['id']]['end'] = date("d.m.Y", strtotime("-1 day", strtotime("+12 months", strtotime($md['start_date']))));
			                    
			                } else{
			                    
			                    $membership_history_cal[$md['member']][$md['id']]['end'] = date("d.m.Y", strtotime("-1 day", strtotime("+12 months", time())));
			                    
			                }
			            }
			            
			            
    			        // get last invoiced date for member and membership
    			        $last_invoiced_date[$md['member']][$md['id']] = MembersInvoices:: get_last_invoice_date($clientid,$md['member'],$md['id']);


    			        // make date interval between last_invoiced_date and today
    			        if($last_invoiced_date[$md['member']][$md['id']]){
    			            // get months number between last invoice date and current date
        			        $start_interval[$md['member']][$md['id']] = new DateTime(date("Y-m-d", strtotime("+1 day", strtotime($last_invoiced_date[$md['member']][$md['id']]))));
//         			        $end_interval[$md['member']][$md['id']] = new DateTime(date("Y-m-d", strtotime($current_date)));
        			        $end_interval[$md['member']][$md['id']] = new DateTime(date("Y-m-d", strtotime(date("d.m.Y", strtotime("-1 day", strtotime("+12 months", time()))))));
        			        $overall_months[$md['member']][$md['id']] = 0;
        			        
        			        $start_interval[$md['member']][$md['id']]->add(new \DateInterval('P1M'));
        			        while ($start_interval[$md['member']][$md['id']] <= $end_interval[$md['member']][$md['id']]){
        			            $overall_months[$md['member']][$md['id']] ++;
        			            $start_interval[$md['member']][$md['id']]->add(new \DateInterval('P1M'));
        			        }
        			        
        			        if($overall_months[$md['member']][$md['id']] < 12){
        			            // do nothing
        			            
        			        } elseif ($overall_months[$md['member']][$md['id']] >= 12){
        			            
        			            $membership_intervals[$md['member']][$md['id']] = Pms_CommonData::generateDateRangeArray(  $membership_history[$md['member']][$md['id']]['start'], $membership_history_cal[$md['member']][$md['id']]['end'],"+1 year");
        			            
        			            foreach($membership_intervals[$md['member']][$md['id']] as $kmps => $start_dates){
        			                 
        			                if($membership_intervals[$md['member']][$md['id']] >= 1 && $membership_history[$md['id']]['end'] == "") {
        			                    
        			                    if( date( 'Y',strtotime($start_dates)) <= date("Y",time()) ){
            			                    $msp_intervals[$md['member']][$md['id']][$kmps]['start'] = $start_dates;
            			                    if($membership_intervals[$md['member']][$md['id']][$kmps+1]){
            			                        $msp_intervals[$md['member']][$md['id']][$kmps]['end'] = date("d.m.Y",strtotime("-1 day", strtotime($membership_intervals[$md['member']][$md['id']][$kmps+1])));
            			                    } else{
            			                        $msp_intervals[$md['member']][$md['id']][$kmps]['end'] = date("d.m.Y", strtotime("-1 day", strtotime("+12 months", strtotime($membership_intervals[$md['member']][$md['id']][$kmps]))));
            			                    }
        			                    }  
        			                    
        			                } else{
        			                    $msp_intervals[$kmps]['start'] = $start_dates;
        			                    if($membership_intervals[$md['member']][$md['id']][$kmps+1]){
        			                        $msp_intervals[$md['member']][$md['id']][$kmps]['end'] = date("d.m.Y",strtotime("-1 day", strtotime($membership_intervals[$md['member']][$md['id']][$kmps+1])));
        			                    } else{
        			                        $msp_intervals[$md['member']][$md['id']][$kmps]['end'] = date("d.m.Y", strtotime("-1 day", strtotime("+12 months", strtotime($start_dates))));
        			                    }
        			                }
        			            }
        			            
        			            foreach($msp_intervals[$md['member']][$md['id']] as $int_k => $int_dates){
        			                $start_m_interval[$int_k] = new DateTime(date("Y-m-d", strtotime($int_dates['start'])));
        			                $end_m_interval[$int_k] =  new DateTime(date("Y-m-d", strtotime("+1 day" ,strtotime($int_dates['end']))));
        			                $membership_months[$md['member']] [$md['id']] [$int_k] = 0;
        			                 
        			                 $start_m_interval[$int_k] ->add(new \DateInterval('P1M'));
        			                while ( $start_m_interval[$int_k] <= $end_m_interval[$int_k]){
        			                    $membership_months[$md['member']][$md['id']][$int_k]  ++;
        			                    $start_m_interval[$int_k] ->add(new \DateInterval('P1M'));
        			                }
        			            }
        			            
        			            $m=0;
        			            foreach($msp_intervals[$md['member']][$md['id']] as $int_kk => $int_dates){
        			                
        			                if( $membership_months[$md['member']][$md['id']][$int_kk] == 12 ){
        			                    
            			                $invoiced_periods[$md['member']][$md['id']][$m]['invoiced'] = 0;
            			                $invoiced_periods[$md['member']][$md['id']][$m]['member'] = $md['member'];
            			                $invoiced_periods[$md['member']][$md['id']][$m]['membership'] = $md['membership'];
            			                $invoiced_periods[$md['member']][$md['id']][$m]['membership_start'] = $md['start_date'];
            			                if($md['end_date'] == "0000-00-00 00:00:00"){
            			                    $invoiced_periods[$md['member']][$md['id']][$m]['membership_end'] = " - ";
            			                } else {
            			                    $invoiced_periods[$md['member']][$md['id']][$m]['membership_end'] = $md['end_date'];
            			                }
           			                    $invoiced_periods[$md['member']][$md['id']][$m]['membership_price'] = $md['membership_price'];
            			                $invoiced_periods[$md['member']][$md['id']][$m]['start'] =  $int_dates['start'];
            			                $invoiced_periods[$md['member']][$md['id']][$m]['end'] =  $int_dates['end'];
            			                 
            			                // check if periods are invoiced
            			                foreach($invoice_data[$md['member']][$md['id']] as $inv_id =>$inv_dates){
            			                    if(strtotime($invoiced_periods[$md['member']][$md['id']][$m]['start']) == $inv_dates['start']  && strtotime($invoiced_periods[$md['member']][$md['id']][$m]['end']) == $inv_dates['end']  ){
            			                        $invoiced_periods[$md['member']][$md['id']][$m]['invoiced'] += 1;
            			                    }
            			                    else
            			                    {
            			                        $invoiced_periods[$md['member']][$md['id']][$m]['invoiced'] += 0;
            			                    }
            			                }
            			                $m++;
        			                }
        			            }
        			        } 
        			        
    			        }
			            
			        } else { // CALENDAR YEAR
			            
			            if($md['start_date'] != "0000-00-00 00:00:00"){
			                $membership_history[$md['member']][$md['id']]['start'] = date( 'd.m.Y',strtotime($md['start_date']));
			            } else{
			                $membership_history[$md['member']][$md['id']]['start'] = "";
			            }
			             
			            if($md['end_date'] != "0000-00-00 00:00:00"){
			                $membership_history[$md['member']][$md['id']]['end'] = date( 'd.m.Y',strtotime($md['end_date']));
			                $membership_history_cal[$md['member']][$md['id']]['end'] = date( 'd.m.Y',strtotime($md['end_date']));
			            } else{
			                $membership_history[$md['member']][$md['id']]['end'] = "";
// 			                $membership_history_cal[$md['member']][$md['id']]['end'] = $current_date;
			                if( date( 'Y',strtotime($md['start_date'])) > date("Y",time()) ){
			                    $membership_history_cal[$md['member']][$md['id']]['end'] = date("d.m.Y",mktime(0,0,0,12,31,date( 'Y',strtotime($md['start_date']))));;
			                } else{
			                    $membership_history_cal[$md['member']][$md['id']]['end'] = date("d.m.Y",mktime(0,0,0,12,31,date("Y",strtotime($current_date))));;
			                }
			                
			            }
			            
			            
			                // break membership period in calendar year intervals
			                $start_year = date('Y',strtotime($membership_history[$md['member']][$md['id']]['start']));
			                $end_year  = date('Y',strtotime($membership_history_cal[$md['member']][$md['id']]['end']));
			                $i= 0;
			                $interval[$md['id']] = array();
			            
			                for ($i = $start_year; $i <= $end_year; $i++ ){
			                    if($i ==  $start_year &&  $start_year != $end_year){
			                        $interval[$md['id']][$i]['start'] = $membership_history[$md['member']][$md['id']]['start'];
			                        $interval[$md['id']][$i]['end'] =  date("d.m.Y",mktime(0,0,0,12,31,$i));
			                    } else if($i ==  $end_year && $start_year  != $end_year ){
			                        $interval[$md['id']][$i]['start'] = date("d.m.Y",mktime(0,0,0,01,01,$i));
			                        $interval[$md['id']][$i]['end'] =  $membership_history_cal[$md['member']][$md['id']]['end'];
			                    } else if($start_year == $end_year ){
			                        $interval[$md['id']][$i]['start'] = $membership_history[$md['member']][$md['id']]['start'];
			                        $interval[$md['id']][$i]['end'] =  $membership_history_cal[$md['member']][$md['id']]['end'];
			                    } else {
			                        $interval[$md['id']][$i]['start'] = date("d.m.Y",mktime(0,0,0,01,01,$i));
			                        $interval[$md['id']][$i]['end'] =  date("d.m.Y",mktime(0,0,0,12,31,$i));
			                    }
			                }
			                $y=0;
			                
			                
			                foreach($interval[$md['id']]  as $int_k => $int_dates){
			                	
			                    $start_m_interval[$int_k] = new DateTime(date("Y-m-d", strtotime($int_dates['start'])));
			                    $end_m_interval[$int_k] =  new DateTime(date("Y-m-d", strtotime("+1 day" ,strtotime($int_dates['end']))));
			                   
			                    $membership_months[$md['member']] [$md['id']] [$int_k] = 0;
			                
			                    $start_m_interval[$int_k] ->add(new \DateInterval('P1M'));
			                    while ( $start_m_interval[$int_k] <= $end_m_interval[$int_k]){
			                        $membership_months[$md['member']][$md['id']][$int_k]  ++;
			                        $start_m_interval[$int_k] ->add(new \DateInterval('P1M'));
			                    }
			                }
			                
			                
			             
			                foreach($interval[$md['id']] as $int_kk => $int_dates){
    		                    if( $membership_months[$md['member']][$md['id']][$int_kk] == 12 ){
    			                    $invoiced_periods[$md['member']][$md['id']][$y]['invoiced'] = 0;
    			                    $invoiced_periods[$md['member']][$md['id']][$y]['member'] = $md['member'];
    			                    $invoiced_periods[$md['member']][$md['id']][$y]['membership'] = $md['membership'];
    			                    $invoiced_periods[$md['member']][$md['id']][$y]['membership_start'] = $md['start_date'];
    			                    $invoiced_periods[$md['member']][$md['id']][$y]['membership_end'] = $md['end_date'];
    			                    $invoiced_periods[$md['member']][$md['id']][$y]['membership_price'] = $md['membership_price'];
    			                    $invoiced_periods[$md['member']][$md['id']][$y]['start'] = $int_dates['start'];
    			                    $invoiced_periods[$md['member']][$md['id']][$y]['end'] = $int_dates['end'];
    			                    foreach($invoice_data[$md['member']][$md['id']] as $inv_id =>$inv_dates){
    			                        if(strtotime($invoiced_periods[$md['member']][$md['id']][$y]['start']) == $inv_dates['start']  && strtotime($invoiced_periods[$md['member']][$md['id']][$y]['end']) == $inv_dates['end']  ){
    			                            $invoiced_periods[$md['member']][$md['id']][$y]['invoiced'] += 1;
    			                        } else{
    			                            $invoiced_periods[$md['member']][$md['id']][$y]['invoiced'] += 0;
    			                        }
    			                    }
    			                    $y++;
    		                    }
			                }
			        }
			    }
			}
			
			foreach($invoiced_periods as  $member_id => $m_invoiced_periods){
			    if(in_array($member_id ,$members2invoices)){ // Only if member alredy has a generated invoice
    			    foreach($m_invoiced_periods as $membership2member => $membership_intervals){
    			        foreach($membership_intervals as $k=>$mintv){
    			            if( $mintv['invoiced'] == "0" &&  date("Y",strtotime($mintv['start'])) <=  date("Y",time()) ){
    			                $period2invoice[$member_id][$k]['invoiced'] = $mintv['invoiced'];
    			                $period2invoice[$member_id][$k]['member'] = $member_id;
    			                $period2invoice[$member_id][$k]['membership'] = $mintv['membership'];
    			                $period2invoice[$member_id][$k]['membership_start'] = $mintv['membership_start'];
    			                $period2invoice[$member_id][$k]['membership_end'] = $mintv['membership_end'];
    			                $period2invoice[$member_id][$k]['membership_data'] = $membership2member;
    			                $period2invoice[$member_id][$k]['membership_price'] = $mintv['membership_price'];
    			                $period2invoice[$member_id][$k]['int_start'] =  strtotime($mintv['start']);
    			                $period2invoice[$member_id][$k]['int_end'] = strtotime($mintv['end']);
    			                $period2invoice[$member_id][$k]['int_start_s'] = $mintv['start'];
    			                $period2invoice[$member_id][$k]['int_end_s'] = $mintv['end'];
    			                if(!in_array($member_id,$invoice_data_params['members'])){
        			                $invoice_data_params['members'][] = $member_id;
    			                }
    			                $invoice_data_params['selected_period'][$member_id] = $period2invoice[$member_id];
    			            }
    			        }
    			    }
			    }
			}

			$invoice_data_params['auto_generate'] = "1";
	 
			if(!empty($invoice_data_params)){
			    //$this->generatemembersinvoice($invoice_data_params);
			    //die_claudiu marker to find the line, will remove when fixed
			}
			*/
			/*
			 * comment-ISPC-2148 end
			 */
			
			//mark invoice as paid from invoices list link
			if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
			{
				if($_REQUEST['mode'] == "paid")
				{
					//mark as paid
					$invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
					$invoice_pay_data['paymentAmount'] = '0.00';
					$invoice_pay_data['paymentComment'] = "";
					$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
					$invoice_pay_data['mark_as_paid'] = "1";

					$new_payment = $members_invoices_form->submit_payment($invoice_pay_data);
					$this->_redirect(APP_BASE . 'invoicenew/membersinvoices');
					exit;
				}
			}

			if($this->getRequest()->isPost())
			{
				if($_POST['draftmore'] == "1")
				{
					//ispc 1956
					//create new payments for this invoices
					$payments = $members_invoices_form->create_payments($_POST['document'], $clientid);
					
					$transform = $members_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
					
					
					/*
					//sepa_xml
					if(is_array($_POST['document'])){
						$sepa_invoice_data = $members_invoices->get_invoices($_POST['document']);
						foreach ($sepa_invoice_data['invoices_data'] as $sinv){
							$result  = self::generate_sepa_xml($sinv);
						}
					}
					*/
					
					
						
				}
				elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
				{
					$del_invoice = $members_invoices_form->delete_multiple_invoices($_POST['document']);
				}
				elseif($_POST['archive_invoices_more'] == "1")
				{
					$archive = $members_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
				}
				elseif(!empty($_POST['batch_print_more']))
				{
					$params['invoices'] = $_POST['document']; //contains invoices ids to be printed
					$params['batch_print'] = '1'; //enables batch print procedure
					$params['only_pdf'] = '1'; //stops invoice calculation(from system data)
					$params['get_pdf'] = '0'; //stops downloading single pdf
					//ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
					if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
					    
    					$this->membersinvoice($params);
					    
					} elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
    					$params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
    					
    					$print_job_data = array();
    					$print_job_data['clientid'] = $this->clientid;
    					$print_job_data['user'] = $this->userid;
    					$print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
    					$print_job_data['output_type'] = 'pdf';
    					$print_job_data['status'] = 'active';
    					$print_job_data['invoice_type'] = 'members_invoice';
    					$print_job_data['print_params'] = serialize($params);
    					$print_job_data['print_function'] = 'membersinvoice';
    					$print_job_data['print_controller'] = $this->getRequest()->getControllerName();
    
    					foreach($_POST['document'] as $k=>$inv_id){
    					    $print_job_data['PrintJobsItems'][] = array(
    					        'clientid'=>$print_job_data['clientid'],
    					        'user'=>$print_job_data['user'],
    					        'invoice_id'=>$inv_id,
    					        'invoice_type'=>$print_job_data['invoice_type'],
    					        'status'=>"new"
    					    );
    					}
    					
    					$PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
    					$print_id = $PrintJobsBulk_obj->id;
    					
    					if($print_id){
    					    $this->__StartPrintJobs();
    					}
					}
					
					
					
					
				}
				else
				{
					
					$post = $_POST;
					$post["mark_as_paid"] = "0";
					$new_payment = $members_invoices_form->submit_payment($post);
				}
				
				//ISPC-2609 Ancuta 07.09.2020
				$msg="";
				if($print_id){
				    $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
				}
				
				//$this->_redirect(APP_BASE . 'invoicenew/membersinvoices'); //to avoid resubmission
				$this->_redirect(APP_BASE . 'invoicenew/membersinvoices'.$msg); //to avoid resubmission
				// --
				exit;
			}

			if($_REQUEST['mode'] == 'setstorno')
			{
				if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
				{
					$invoiceid = $_REQUEST['inv_id'];
				}
				else
				{
					$invoiceid = '0';
				}

				if($invoiceid > '0')
				{
					$clone_record = $members_invoices->create_storno_invoice($invoiceid , $_REQUEST);
					$this->_redirect(APP_BASE . 'invoicenew/membersinvoices?flg=suc');
					exit;
				}
			}

			if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
			{
				$delete_invoice = $members_invoices_form->delete_invoice($_REQUEST['invoiceid']);

				if($delete_invoice)
				{
					$this->_redirect(APP_BASE . 'invoicenew/membersinvoices?flg=delsuc');
				}
				else
				{
					$this->_redirect(APP_BASE . 'invoicenew/membersinvoices?flg=delerr');
				}
			}

			//construct months array
			$start_period = '2010-01-01';
			$end_period = date('Y-m-d', time());
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
			$month_select_array['99999999'] = '';
			foreach($period_months_array as $k_month => $v_month)
			{
				$month_select_array[$v_month] = $v_month;
			}

			//see how many days in selected month
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));

			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}

			//construct selected month array (start, days, end)
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;

			krsort($month_select_array);

			$this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
			
			
			
			$mip_obj = new MembersInvoicePayments();			
			$this->view->payments_status_values = $mip_obj->getTable()->getEnumValues('status');
				
				
		}

		
		private function fetch_members_invoice_payments()
		{

			$limit = isset($_REQUEST['items_per_page']) ? (int)$_REQUEST['items_per_page'] : 50;
			$current_page = isset($_REQUEST['page']) ? (int)$_REQUEST['page'] : 1;
			
			$this->view->limit = $limit;
			$this->view->items_per_page = $limit;
			$this->view->current_page = $current_page;
			
			//this tab is rendered by another viewScript
			$this->_helper->viewRenderer('fetch-members-invoice-payments');
			$mi_obj = new MembersInvoices();
			$mip_obj = new MembersInvoicePayments();
			$member_obj = new Member();
			
			$filters = array();
			
			
			//filter by payment status
			if ( ! empty($_REQUEST['filter_by_payment_status'])) { 
				$filters['status'] = array(
						"whereIn"=>"status",
						"params"=> $_REQUEST['filter_by_payment_status']		
				);				
			} else {
				return;	//cannot filter if you have no status on your payment
			}
			
			//filter by first/last name of member
			if( trim($_REQUEST['last_name']) != ""  ||  trim($_REQUEST['first_name']) != "") {
					
				$member_id_arr = $member_obj->search_memberids_by_columns(
						array(
			
								"last_name"		=> $_REQUEST['last_name'],
								"first_name"	=> $_REQUEST['first_name']
						),
						$this->clientid
				);
			
				if ( ! empty($member_id_arr)) {
					$filters['memberid'] = array(
							"whereIn" => "mi.member",
							"params" => $member_id_arr
								
					);
				} else {
					return;//no member with this first/last name...return empty json
				}
			}

			//filter by invoice number
			if( trim($_REQUEST['rnummer']) != "" ) {
				
				$filters_invoices = array(						
						'isdelete' => array(
								"where"		=> "isdelete = ?",
								"params"	=> "0"
						),
						'invoice_number' => array(
								"where"		=> "LOWER(CONCAT(prefix ,CAST( invoice_number AS CHAR ))) LIKE ?",
								"params"	=> "%". $_REQUEST['rnummer'] . "%"
						),
				);
				$invoiceid_array = $mi_obj->get_client_invoices($this->clientid , $filters_invoices , "id");
				
				if ( ! empty($invoiceid_array)) {
					
					$invoiceid_array = array_column($invoiceid_array, "id");

					$filters['invoiceid'] = array(
							"whereIn"	=> "invoice",
							"params"	=> $invoiceid_array
					);	
				} else {
					return;//no invoice like this...return empty json
				}
			}
			
			//filter by date
			if ( ! empty($_REQUEST['payments_date_from']) && ! empty($_REQUEST['payments_date_till']) ){
					
				$filters['create_date'] = array(
						"where"		=> "IF(scheduled_due_date IS NULL, paid_date, scheduled_due_date) BETWEEN STR_TO_DATE(?, '%d.%m.%Y') AND STR_TO_DATE(?, '%d.%m.%Y')",
						"params"	=> array(
								$_REQUEST['payments_date_from'],
								$_REQUEST['payments_date_till']
						)
				);
				
			} elseif ( ! empty ($_REQUEST['payments_date_from']) ){
			
				$filters['create_date'] = array(
						"where"		=> "IF(scheduled_due_date IS NULL, paid_date, scheduled_due_date) >= STR_TO_DATE(?, '%d.%m.%Y')",
						"params"	=> $_REQUEST['payments_date_from']
				);
				
			} elseif ( ! empty($_REQUEST['payments_date_till']) ){
						
				$filters['create_date'] = array(
						"where"		=> "IF(scheduled_due_date IS NULL, paid_date, scheduled_due_date) <= STR_TO_DATE(?, '%d.%m.%Y')",
						"params"	=> $_REQUEST['payments_date_till']
				);
			}
			
			
			//order by
			if (! empty ($_REQUEST['ord'])) {
				$orderby = $_REQUEST['ord'];
				$sort = $_REQUEST['sort'];
				
				$mip_allowed_columns = $mip_obj->getTable()->getColumns();
				$mip_allowed_columns['custom_order_date1'] = "custom_order_date1"; // include our single date column 
				if (array_key_exists($_REQUEST['ord'], $mip_allowed_columns)) {
				
					if (strtolower($_REQUEST['sort']) == "asc") {
						$ord = "ASC";
					} else {
						$ord = "DESC";
					}
					
					$filters['orderBy']  = array("orderBy" => $_REQUEST['ord']. " ".$ord);
				}
			}
			
			
			if ( $limit > 0) {
				$filters['limit']	= array("limit" => $limit);
				$filters['offset']	= array("offset" => (($current_page - 1) * $limit));
			}
			
			//do the counting first
			$invoices_payments_counter = $mip_obj->get_client_payments($this->clientid , $filters, true);
			$invoices_payments_counter =  $invoices_payments_counter['counter'];

			//now get all the data
			if ($invoices_payments_counter > 0) {
				
				$members_invoices_payments = $mip_obj->get_client_payments($this->clientid , $filters);	
	
				$member_arr = array_column(array_column($members_invoices_payments['order_by_status'], "MembersInvoices") , "member");
				$user_arr = array_merge(array_column($members_invoices_payments['order_by_status'], "create_user"), array_column($members_invoices_payments['order_by_status'], "change_user") );
	
				$members_details = Member::getMembersNiceName($member_arr, $this->clientid);
				$users_details = User::getUsersNiceName($user_arr, $this->clientid);
			}
			
			$this->view->members_invoices_payments = $members_invoices_payments;
			$this->view->members_details = $members_details;
			$this->view->users_details = $users_details;
			$this->view->orderby = $orderby;
			$this->view->sort = $sort;
			
			
			if ($limit > 0 ) {
				$no_pages = ceil($invoices_payments_counter / $limit);
					
			} else {
				$no_pages = 0;
			}
			$this->view->no_pages = $no_pages;
			
			$this->view->counted =  array('invoice-payments' => $invoices_payments_counter);
				
			
			$this->view->invoices_payments_counter = $invoices_payments_counter;
						
			
		}
		
		private function fetch_members_sepa_files_history_tab()
		{
			$limit = isset($_REQUEST['items_per_page']) ? (int)$_REQUEST['items_per_page'] : 50;
			$current_page = isset($_REQUEST['page']) ? (int)$_REQUEST['page'] : 1;
				
			$this->view->limit = $limit;
			$this->view->items_per_page = $limit;
			
			//this tab is rendered by another viewScript
			$this->_helper->viewRenderer('invoicenew-sepa-list-files');
			
			
			$filters = array();
			
			
			//filter by date
			if ( ! empty($_REQUEST['sepa_date_from']) && ! empty($_REQUEST['sepa_date_till']) ){
					
				$filters['create_date'] = array(
						"where"=>"create_date BETWEEN STR_TO_DATE(:sepa_date_from, '%d.%m.%Y') AND STR_TO_DATE(:sepa_date_till, '%d.%m.%Y')",
						"params"=>array(
								"sepa_date_from"=> $_REQUEST['sepa_date_from'],
								"sepa_date_till"=> $_REQUEST['sepa_date_till']
									
						));
			} else {
				if ( ! empty ($_REQUEST['sepa_date_from']) ){
						
					$filters['create_date'] = array(
							"where"=>"create_date >= STR_TO_DATE(:sepa_date_from, '%d.%m.%Y')",
							"params"=>array(
									"sepa_date_from"=> $_REQUEST['sepa_date_from'],
										
							));
				} elseif ( ! empty($_REQUEST['sepa_date_till']) ){
					
					$filters['create_date'] = array(
							"where"=>"create_date <= STR_TO_DATE(:sepa_date_till, '%d.%m.%Y')",
							"params"=>array(
									"sepa_date_till"=> $_REQUEST['sepa_date_till']
										
						));
				} 
				
			}

			
// 			if ((int)$limit > 0) {
// 				$filters['limit'] = array("limit" => $limit);
// 				$filters['offset'] = array("offset"=> (($current_page - 1) * $limit));
// 			}
			
			//filter by first/last name of member
			if( trim($_REQUEST['last_name']) != ""  ||  trim($_REQUEST['first_name']) != "") {

				$f_member = Doctrine_Query::create()
				->select("id")
				->from('Member')
				->Where('clientid = ?' , $this->clientid);
				
				if(trim($_REQUEST['last_name']) != "")
				{
					//not concat search, only if empty
					$f_member->andWhere("IF(last_name != '', LOWER(last_name), LOWER(member_company))  LIKE ? " , '%'. strtolower($_REQUEST['last_name']) . '%' );
				}
				
				
				if(trim($_REQUEST['first_name']) != "")
				{
					$f_member->andWhere("IF(first_name != '', LOWER(first_name), LOWER(member_company)) LIKE ? " , '%'. strtolower($_REQUEST['first_name']) . '%' );
				}			
								
				$f_member_res = $f_member->fetchArray();
				if ( ! empty($f_member_res)) {
					$memberid_array =  array_column($f_member_res, 'id');
					$filters['memberid'] = array(
							"where"=>"memberid IN ( " . implode(",", $memberid_array) . " )",
							"params"=>array()
						
					);
				} else {
					//no member with this first/last name...return empty json
					return;
				}
				
			}
			
			//filter by invoice number
			if( trim($_REQUEST['rnummer']) != "" ) {
				$f_rnummer = Doctrine_Query::create()
				->select("id")
				->from('MembersInvoices')
				->Where('client = ?' , $this->clientid)
				->andWhere("LOWER(CONCAT(prefix ,CAST( invoice_number AS CHAR ))) LIKE ?" , "%" .$_REQUEST['rnummer'] ."%");
				$f_rnummer_res = $f_rnummer->fetchArray();
								
				if ( ! empty($f_rnummer_res)) {
					
					$invoiceid_array =  array_column($f_rnummer_res, 'id');
					
					//filter the serialized invoiceid_extra .. what a joy that i was "lazy" and not made another model class, so i can now intersect :( (in my defense project changed 2 times since then and this feauture is now added on a column that could have not been here)
					//one could make a misc action to create a new table for all existing and furture records... and get rid of this with a join
					$invoiceid_extra = array();
					foreach($invoiceid_array as $row) {
						$invoiceid_extra[] =  " invoiceid_extra LIKE '%\"". $row ."\"%' " ;
					} 			
					
					$filters['invoiceid'] = array(
							"where"=>"(invoiceid IN ( " . implode(",", $invoiceid_array) . " ) OR  " . implode(" OR ", $invoiceid_extra) .")",
							"params"=>array()
				
					);
					
					
				} else {
					//no invoice like this...return empty json
					return;
				}
				
				
			}
					
			
			$sepa_xml = MembersSepaXml :: get_client_sepa_files( $this->clientid , $filters);			

			//get the payments details
			$members_invoices_payments = array();
			if (! empty($sepa_xml)) {
				$payments_ids = array_column($sepa_xml, 'paymentid');
				$mip_obj = new MembersInvoicePayments();
				$payments = $mip_obj->get_client_payments($this->clientid , array("id"=> array("whereIn"=>"id", "params"=>$payments_ids)));
				foreach ($payments['order_by_status'] as $row) {
					$members_invoices_payments[$row['id']] = $row;
				}				
			}
			$invoice_ids_all = array();
			$sepa_xml_2 = array();
			$sepa_xml_3 = array();
			$member_ids_all = array();
				
			
			foreach ($sepa_xml as $onefile){
			
				
				$group_by_key = $onefile['batchid'] > 0 ? $onefile['batchid'] : $onefile['ftp_file'];
				
				$onefile['invoiceid_array'] = array();
				$onefile['memberid_array'] = array();
				
				
				$member_ids_all[] =
				$onefile['memberid_array'][] = $onefile['memberid'];				
				
				
				$invoice_ids_all[] = 
				$onefile['invoiceid_array'][] = $onefile['invoiceid'];
				
				if ( ($invoiceid_extra_arr = unserialize($onefile['invoiceid_extra'])) !== false) {
						
					$onefile ['invoiceid_extra'] = $invoiceid_extra_arr;
					
					$invoice_ids_all = array_merge($invoice_ids_all, $invoiceid_extra_arr);
					
					$onefile['invoiceid_array'] = array_merge($onefile['invoiceid_array'], $invoiceid_extra_arr); //maybe we don;t have a zero

				}
					
				if (isset($sepa_xml_2[ $group_by_key ] )) {
					
					$onefile ['invoiceid_array'] =  array_unique(array_merge( $sepa_xml_2[ $group_by_key ] ['invoiceid_array'] , $onefile ['invoiceid_array']));
					$onefile ['memberid_array'] =  array_unique(array_merge( $sepa_xml_2[ $group_by_key ] ['memberid_array'] , $onefile ['memberid_array']));
				}	
				
// 				foreach ($onefile ['invoiceid_array'] as $row) {
					
// 				}
				
				
				$sepa_xml_2[ $group_by_key ] = $onefile;
				$sepa_xml_2[ $group_by_key ]["group_by_key"] = $group_by_key;
				
				$sepa_xml_3[ $group_by_key ][] = $onefile;
			}
			$sepa_xml_2 = array_values($sepa_xml_2);
		
			//FAKE PAGINATION
			$count_sepa_files = count($sepa_xml_2);
			
			if ((int)$limit > 0 ) {
				$no_pages = ceil($count_sepa_files / $limit);
			
			} else {
				$no_pages = 0;
			}
			$this->view->items_per_page = $limit;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			
			$this->view->count_sepa_files = $count_sepa_files;
// 			$this->view->orderby = $_REQUEST['ord'];
// 			$this->view->sort = $_REQUEST['sort'];
			
			$i_start = 0;
			if ((int)$limit > 0) {
		
				$fetch_details = array();
				
				if (count($sepa_xml_2) > $limit) {
					
					//we need to paginate
					
					$length = $limit;
					
					$offset = ($current_page - 1) * $limit;
					$i_start = (int)$offset;

					
					for ($i = $i_start; $i<$i_start +$length; $i++ ){
						if (isset($sepa_xml_2 [$i])) {
							$fetch_details[$i] = $sepa_xml_2 [$i];
						}
					}
					$sepa_xml_2 = $fetch_details;
				}
			}
			
			$this->view->i_start = $i_start;
			
						
			if ( ! empty($sepa_xml_2)) {
			
				//get member nice names
				$member_ids_all = (array_unique($member_ids_all));
				$MemberNiceName =  Member::getMembersNiceName($member_ids_all, $this->clientid );
	
				
				$invoice_ids_all = array_unique($invoice_ids_all);
				$invoice_ids_all = Doctrine_Query::create()
				->select("id, prefix, invoice_number, status")
				->from('MembersInvoices INDEXBY id')
				->where('client = ?' , $this->clientid )
				->andWhereIn('id', $invoice_ids_all)
				->fetchArray();

												
				foreach ($sepa_xml_2 as & $one_file)
				{

					$arr_payments = array();
					foreach ( $sepa_xml_3[$one_file['group_by_key']] as $row) {
					
						if (isset($invoice_ids_all [ $row['invoiceid']  ] )) {
								
							$arr_payments[$row['invoiceid']][] = isset($members_invoices_payments[$row['paymentid']]) ? number_format($members_invoices_payments[$row['paymentid']]['amount'],2 , ',' , '.') . "€"  : "";
							
							$one_file['InvoicePayments'][] =  $members_invoices_payments[$row['paymentid']];
						}
					
					}
					
					//get nice invoice number
					$arr_invoices  = array();
					foreach( $one_file['invoiceid_array'] as $file_invoice ){
						
						if (isset($invoice_ids_all [ $file_invoice ] )) {
							
							$pay_amount = !empty($arr_payments[$file_invoice]) ? "(".implode(", " ,$arr_payments[$file_invoice]) .")": "";
							
							$invoice_ids_all [ $file_invoice ]['invoice_nicename'] = 
							$arr_invoices['name'][] = $invoice_ids_all [ $file_invoice ] ['prefix'] . $invoice_ids_all [ $file_invoice ] ['invoice_number'] .  $pay_amount ;
							$arr_invoices['full'][] = $invoice_ids_all [ $file_invoice ];
						}
						
					}	


					
					
					$one_file['invoiceid_nicenames'] = $arr_invoices['name'];
					$one_file['invoiceid_array'] = $arr_invoices['full'];
					
					//get nice user name
					$arr_members  = array();
					foreach( array_unique($one_file['memberid_array']) as $memberid ){
					
						if (isset($MemberNiceName [ $memberid ] )) {
							$arr_members[] = $MemberNiceName [ $memberid ] ['nice_name'];
						}
					
					}
					$one_file['memberid_array'] = $arr_members;
					
				}
			
				
				
// 				foreach ($sepa_xml_2 as $k=>$v){
					
// 					if (is_array($v['invoiceid_extra'])){
// 						$arr = array();
// 						foreach ($v['invoiceid_extra'] as $extra){
								
// 							$arr[] = $invoice_ids_all [ $extra ] ['prefix'] . $invoice_ids_all [ $extra ] ['invoice_number'];
// 						}
// 						$sepa_xml_2[$k]['invoiceid_extra'] = $arr;
							
// 					}else{
							
// 						$arr = $invoice_ids_all [ $v['invoiceid'] ] ['prefix'] . $invoice_ids_all [ $v['invoiceid']  ] ['invoice_number'];
// 						$sepa_xml_2[$k]['invoiceid_extra'] = array($arr);
// 					}
						
						
// 				}
				
			}
// 			status == 3 => paid!			
			$grid = new Pms_Grid($sepa_xml_2, 1, count($sepa_xml_2), "invoicenew_sepa_list_files.html");
				
			$grid->invoice_total = $tokens['invoice_total'];
			$this->view->max_entries = count($sepa_xml_2);
				
			$this->view->counted =  array('sepa-history' => $count_sepa_files);

			$this->view->gridView = $grid->renderGrid();
		
			
			return;
			exit;
			
		}
		
		//sepafiles_markaspaid
		public function sepafilesmarkaspaidAction() 
		{
			
			//anyone can view/edit member invoices
			//$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($this->clientid);
			
			$af_mi = new Application_Form_MembersInvoices();
			$res = $af_mi->sepafiles_markaspaid($_POST , $this->clientid);
			
			
			
						
			$response['msg'] = "Success";
			$response['error'] = "";
			$response['marked_as_paid'] = $res;
			
			$response['callBack'] = "markaspaid_sepaxml_callback";
			$response['callBackParameters'] = array();
			
			
			ob_end_clean();	ob_start();
			
			$this->_helper->json->sendJson($response);
			exit;
		
		}	
		
		
		
		//sepafiles_delete
		public function sepafilesdeleteAction(){
			//anyone can view/edit member invoices
			//$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($this->clientid);
				
			$af_mi = new Application_Form_MembersInvoices();
			$res = $af_mi->sepafiles_delete($_POST , $this->clientid);
				
				
				
			
			$response['msg'] = "Success";
			$response['error'] = "";
			$response['marked_as_deleted'] = $res;
				
			$response['callBack'] = "delete_sepaxml_callback";
			$response['callBackParameters'] = array();
				
				
			ob_end_clean();	ob_start();
				
			$this->_helper->json->sendJson($response);
			exit;
		}
		
		public function fetchmembersinvoiceslistAction()
		{
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			
			$limit = isset($_REQUEST['items_per_page']) ? (int)$_REQUEST['items_per_page'] : 50;
			$current_page = isset($_REQUEST['page']) ? (int)$_REQUEST['page'] : 1;
			
			$this->view->limit = $limit;
			$this->view->items_per_page = $limit;
			

			//invoice-payments & sepa-history tabs are processed in other fn
			switch($_REQUEST['f_status'])
			{
				case 'sepa-history': {
					////ispc 1842, ISPC-1943
					//a place where all generated XMLs are stored and listed
					$this->fetch_members_sepa_files_history_tab();
					return;
				}
				case 'invoice-payments': {
					$this->fetch_members_invoice_payments();
					return;
				}
			}
			
			$users = new User();
			$members = new Member();
			$members_invoices_payments = new MembersInvoicePayments();

			$clientid = $this->clientid;

			
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('MembersInvoices')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);

			// get client data
			$client_details_m = new Client();
			$client_details = $client_details_m->getClientDataByid($clientid);

			$invoice_due_days = $client_details[0]['invoice_due_days'];
			$plus_due_days = '+' . $invoice_due_days . ' days';
			$this->view->plus_due_days = $plus_due_days;

			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{
				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND isdelete=0 AND isarchived ="0"';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1")';
					break;

				case 'overdue':
// 					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND DATE(NOW()) > DATE(completed_date)  AND isdelete=0 AND isarchived ="0"';
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
					break;

				case 'all':
					$filters['hiinvoice'] = ' AND isarchived ="0"';
					break;
				case 'archived':
					$filters['hiinvoice'] = ' AND isarchived ="1" AND status !="4" AND isdelete != "1"';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';
					break;
			}

			if(!empty($_REQUEST['last_name']))
			{
				$filters['member'] = ' AND (LOWER(last_name) LIKE "%' . addslashes(strtolower($_REQUEST['last_name'])) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['member'] .= ' AND (LOWER(first_name) LIKE "%' . addslashes(strtolower($_REQUEST['first_name'])) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice members
			$f_members[] = '9999999999999';
			if(!empty($_REQUEST['username']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				//filter patients name/surname/epid
				//changed to member instead of patient
				$f_member = Doctrine_Query::create()
					->select($sql)
					->from('Member')
					->where("isdelete =0")
// 					->andWhere('inactive = "0"')
					->andWhere('clientid = ' . $clientid . $filters['member']);
				$f_member_res = $f_member->fetchArray();
			}
			else
			{
				$f_member = Doctrine_Query::create()
					->select($sql)
					->from('Member')
					->where("isdelete =0")
// 					->andWhere('inactive = "0"')
					->andWhere('clientid = "' . $clientid . '"');
				$f_member_res = $f_member->fetchArray();
			}

			foreach($f_member_res as $k_f_member_res => $v_f_member_value)
			{
				$f_members[] = $v_f_member_value['id'];
				$all_members_details[$v_f_member_value['id']] = $v_f_member_value;
			}
			
			$f_user = Doctrine_Query::create()
				->select($sql)
				->from('User')
				->where("isdelete =0")
				->andWhere('isactive = "0"');
			$f_user_res = $f_user->fetchArray();

			foreach($f_user_res as $k_f_user_res => $v_f_user_value)
			{
				$f_users[] = $v_f_user_value['id'];
				$all_users_details[$v_f_user_value['id']] = $v_f_user_value;
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('MembersInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
				$invoices_counting->andWhereIn('member', $f_members);
			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();



			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
// 				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($v_inv2count['completed_date']))) && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["overdue"][] = '1';
				}

				if($v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["all"][] = '1';
				}

				if($v_inv2count['isarchived'] == "1" && $v_inv2count['status'] != "4" && $v_inv2count['isdelete'] != "1")
				{
					$status_count_invoices["archived"][] = '1';
				}
			}
			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('MembersInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
				$del_invoices_counting->andWhereIn('member', $f_members);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}

			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('MembersInvoices')
				->where("client='" . $clientid . "'" . $filters['hiinvoice']);
				$invoices_nl->andWhereIn('member', $f_members);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{
				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;
					//TODO-2939 Lore 21.02.2020
				case 'last_name':
				    $orderby = 'last_name ' . $sort;
				    break;
				    
				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
				    //MembersInvoices
					$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [NEW]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}

/* 			$invoices = Doctrine_Query::create()
			->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
			->from('MembersInvoices')
			->where("client='" . $clientid . "'" . $filters['hiinvoice'])
			->andwhereIn('member', $f_members);
			$invoices->orderby($orderby); */
				
			//TODO-2939 Lore 21.02.2020
			$invoices = Doctrine_Query::create()
				->select("IF(mb.type != 'company', mb.last_name, mb.member_company ) as last_name, m.*, IF(m.completed_date = '0000-00-00 00:00:00', m.create_date, IF(m.completed_date = '1970-01-01 01:00:00', m.create_date, m.completed_date)) as completed_date_sort, concat(m.prefix,m.invoice_number) as full_invoice_number_sort")
				->from('MembersInvoices m')
				->where("m.client='" . $clientid . "'" . $filters['hiinvoice'])
				->leftJoin('m.Member mb ')
				->andwhereIn('m.member', $f_members);
			$invoices->orderby($orderby);
			
			if ((int)$limit > 0) {
				$invoices->offset(($current_page - 1) * $limit)->limit($limit);
			}
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}

			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$members_details = $members->getMultipleMemberDetails($invoice_uids);
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $members_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			
			if ((int)$limit > 0 ) {
				$no_pages = ceil($no_invoices / $limit);
				
			} else {
				$no_pages = 0;
			}
			
			//count invoice-payments, without filters
			$invoices_payments_counter = $members_invoices_payments->get_client_payments($this->clientid , array(), true);
			$counted['invoice-payments'] = $invoices_payments_counter['counter'];
			$counted['sepa-history'] = 0;
			
			$all_payments = $members_invoices_payments->get_payments($invoice_ids);
			
			foreach ($invoicelimit as &$row) {
				if (isset($all_payments[$row['id']])) {
					$row['MembersInvoicePayments'] = $all_payments[$row['id']];	
				}
			}
				
			$this->view->items_per_page = $limit;
			
			$this->view->storned_invoces = MembersInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->member_details = $members_details;
			$this->view->members_details = $all_members_details;
			$this->view->user_details = $users_details;
			$this->view->users_details = $all_users_details;

			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
			
			
			
		}

		public function memberslistpaymentsAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$clientid = $this->clientid;
// 			$members_invoices = new MembersInvoices();
			$shpayments = new MembersInvoicePayments();
			$members_invoice_form = new Application_Form_MembersInvoices();
// 			$user = new User();

			if(empty($_REQUEST['invoiceid']))
			{
				exit;
			}
			
			//verify if this invoice belongs to this client or we are in cronjob
			$invoice = Doctrine::getTable('MembersInvoices')->find($_REQUEST['invoiceid']);	
			if ( ! $invoice instanceof MembersInvoices || $invoice->client != $this->clientid)
			{
				//somenthing is not ok
				//is this a cronjob?
				$controller = $this->getRequest()->getControllerName();				
				if($controller != 'cron') {
					//this is not your client?!
					$this->redirect(APP_BASE . "error/previlege" , array("exit" => true));//not your invoice ?
				}
			}

			switch($_REQUEST['op']) 
			{
				case'del':{
			
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}
					$del_payment = $shpayments->delete_row($_REQUEST['paymentid']);
// 					$del_payment = $shpayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
// 						$invoice_payments_sum = $shpayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_paid_sum = 0;
						$invoice_payments_counter = 0; //how many payments we should have
						if ($invoice_payments = $shpayments->get_payments(array($_REQUEST['invoiceid']))) {
							//calculate paid
							foreach ($invoice_payments[$_REQUEST['invoiceid']] as $row) {
								
								if ($row['status'] == 'paid') {
									$invoice_paid_sum += $row['amount'];
								}
								$invoice_payments_counter ++;
							}
						}
							
// 						$invoice_details = $shpayments->get_invoice($_REQUEST['invoiceid']);
						$invoice_details = $invoice->toArray();

						
						if($invoice_paid_sum > 0)
						{
							if($invoice_paid_sum >= $invoice_details['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						} 
						elseif($invoice_payments_counter > 0) {
							$status = '2';//find if any payment with any other status
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						
						
						if ($status != $invoice_details['status']) {
							//status has changed
							$update_status = $members_invoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);	
						}
						
					} else {
						//error on deleting payment... we have $shpayments->error_message
						$this->view->error_mesage = $shpayments->error_message;
					}
					}break;
				
				case "markaspaid":{
					$members_invoice_form->update_payments("markaspaid", array($_REQUEST['paymentid']) , $this->clientid);
				} break;
				
				
			
			}
		
			//view the payments 
			$invoice_payments = $shpayments->get_payments(array($_REQUEST['invoiceid']));
			$payments =	$invoice_payments[$_REQUEST['invoiceid']];
				
			$users =  array();
			foreach($payments as $row) {
				$users[] = $row['create_user'];
				$users[] = $row['change_user'];
			}
			$users_list = User::getUsersNiceName($users , $this->clientid);
				
			$this->view->payments = $payments;
			$this->view->users_list = $users_list;
			
			$payments_list = $this->view->render('invoicenew/memberslistpayments.html');
			
			echo $payments_list;
			exit;
		
		}

		public function editmembersinvoiceAction()
		{
			
			$clientid = $this->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$members_invoices = new MembersInvoices();
			$members_invoices_form = new Application_Form_MembersInvoices();

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $members_invoices->get_members_invoices($invoice_id);

				$this->view->read_only_items = '0';
				if($invoice_data['status'] >= '2')
				{
					$this->view->read_only_items = '1';
				}
				//check if same clientid
				if ($invoice_data['client'] != $this->clientid) {
					$this->redirect(APP_BASE . "error/previlege" , array("exit" => true));//not your invoice ?
				}
			}
			
			
			
			/*
			if($this->getRequest()->isPost() && !empty($_REQUEST['sepa_xml']))
			{
				
				//$layout = $this->_helper->layout();
				//echo $layout;
				
				
				//$contextSwitch = $this->_helper->getHelper('contextSwitch');
				//$contextSwitch->addActionContext('editmembersinvoice', 'xml')->initContext('xml');
			
				$result  = self::generate_sepa_xml($invoice_data);
				if ($result !== true){
					die(print_r($result));
					
				}else{
					$this->_helper->viewRenderer->setNoRender(true);
					$this->_helper->layout->disableLayout();
					return;
					
				}
				
			}
			*/

			if(in_array($invoice_data['id'], MembersInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if(!empty($_POST['paid']))
				{
					//mark as paid
					$invoice_pay_data['invoiceId'] = $_REQUEST['invoiceid'];
					$invoice_pay_data['paymentAmount'] = '0.00';
					$invoice_pay_data['paymentComment'] = "";
					$invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
					$invoice_pay_data['mark_as_paid'] = "1";

					$new_payment = $members_invoices_form->submit_payment($invoice_pay_data);

					$this->_redirect(APP_BASE . 'invoicenew/membersinvoices');
					exit;
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $members_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{
					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}

/* 				if(strlen($_POST['recipient']) > 0 ){
				    if(strpos($_POST['recipient'],"style"))
				    {
				        $_POST['recipient'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['recipient']);
				    }
				    $_POST['recipient'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['recipient']);
				    $_POST['recipient'] = str_replace(array("</p>"," </p>","</p> "," </p> "),"", $_POST['recipient']);
				    $_POST['recipient'] = str_replace(array("\r\n"),"<br />", $_POST['recipient']);
				} */
				if(empty($_POST['pdf']))
				{
					//save/edit invoice here
					$edit_invoice = $members_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);
					
					if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
					{
						$payments = $members_invoices_form->create_payments(array($_REQUEST['invoiceid']), $clientid);
					}
						
					
					/*
					//generate sepa xml
					if ($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_')
					{
						$result  = self::generate_sepa_xml($invoice_data);
					
					}
					*/
				}

				//redirect to invoices list
				if(empty($_POST['pdf']) && empty($_REQUEST['sepa_xml']))
				{
					if($edit_invoice)
					{

						$this->_redirect(APP_BASE . 'invoicenew/membersinvoices?flg=edtsuc');
					}
					else
					{
						$this->_redirect(APP_BASE . 'invoicenew/membersinvoices?flg=edterr');
					}
				}
				elseif($_POST['pdf'])
				{
					foreach($_POST['custom'] as $k_item => $v_custom)
					{
						$new_invoice_items[] = array(
							'shortcut' => $_POST['shortcut'][$k_item],
							'description' => $_POST['description'][$k_item],
							'qty' => $_POST['qty'][$k_item],
							'price' => Pms_CommonData::str2num($_POST['price'][$k_item]),
							'total' => Pms_CommonData::str2num($_POST['total'][$k_item]),
							'custom' => $v_custom,
						);

						$inv_total += Pms_CommonData::str2num($_POST['total'][$k_item]);
					}

					$params['member'] = array($invoice_data['member']);
					$params['list'] = date('Y-m', strtotime($invoice_data['invoiced_month']));
					$params['invoices'] = array($invoice_data['id']);
					$params['get_pdf'] = '1';
					$params['only_pdf'] = '1';
					$_REQUEST['type'] = 'pdf';

					$params['custom_data']['recipient'] = $_POST['recipient'];
					$params['custom_data']['comment'] = $_POST['comment'];
					$params['custom_data']['items'] = $new_invoice_items;
					$params['custom_data']['invoice_total'] = $inv_total;

					$this->membersinvoice($params);
					exit;
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoicenew/membersinvoices');
				}

				$member_details = Member::getMemberDetails($invoice_data['member']);
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];

				$this->view->invoice_data = $invoice_data;
				$this->view->member_details = $member_details;
				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is present
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		//ispc 1842
		public function generateinvoicesAction(){
			$this->_helper->viewRenderer('membersinvoices');
			
			//echo "<pre>";
			
			$members_invoices = new MembersInvoices();
			$members_invoices_items = new MembersInvoiceItems();
			$clientid = $this->clientid;
			
			// get client settings.
			$client_data_array = Client :: getClientDataByid( $clientid );
			$client_data = $client_data_array[0];
			$billing_method = $client_data['membership_billing_method'];
			
			// get all invoices of this client		
			$invoices_array = MembersInvoices :: get_invoices_of_client( $clientid );	
			foreach($invoices_array as $k => $invoice){
				$invoice_data[$invoice['member']][$invoice['membership_data']][$invoice['id']]['start'] = strtotime($invoice['invoice_start']);
				$invoice_data[$invoice['member']][$invoice['membership_data']][$invoice['id']]['end'] = strtotime($invoice['invoice_end']);
				$invoice_data[$invoice['member']][$invoice['membership_data']]['alldetails'] = $invoice;
				$invoice_data_s[$invoice['member']][$invoice['id']]['start'] = $invoice['invoice_start'];
				$invoice_data_s[$invoice['member']][$invoice['id']]['end'] = $invoice['invoice_end'];
				$members2invoices[] = $invoice['member'];
			}
			if(empty($members2invoices)){
				$members2invoices[] = "9999999999";
			}
			$members2invoices = array_unique($members2invoices);
				
			//get all client members
			$client_members = Member::get_client_members($clientid, 0);
			
			foreach($client_members as $mk =>$member_value){
			
				if($member_value['inactive'] == "1" &&  $member_value['inactive_from'] == "0000-00-00"){
					$fully_inactiv[] = $member_value['id'];
				} else {
					$member_ids[] = $member_value['id'];
				}
			
			
				$inactive_details[$member_value['id']]['inactive'] = $member_value['inactive'];
				$inactive_details[$member_value['id']]['date'] = $member_value['inactive_from'];
			
			
			}
				
			if(empty($member_ids)){
				$member_ids[] = "9999999999";
			}
				
			// get all membership data.
			$membership2members = Member2Memberships :: get_memberships_history($clientid, $member_ids);
			foreach($membership2members as $val){
				$new_membership2members[ $val['id'] ] = $val;
			}	
			$membership2members = $new_membership2members;

			$member_id_arr = array_column($membership2members, 'member');
			$MembersSepaSettings = MembersSepaSettings :: get_member_settings($member_id_arr , $clientid);

			// if cronjob misfired we must manualy trigger this... so add a manual-param
			
			foreach($MembersSepaSettings as $memberid => $settings){
				foreach($settings as $id => $val){
					
					//monthly
					if ($val['howoften'] == 'monthly'){
						$issue_invoice_date =  date('Y-m-d', strtotime("-7 days", strtotime(date("Y")."-". sprintf('%02d', $val['when_month']) ."-" . sprintf('%02d', $val['when_day']))));						
	
						// if cronjob misfired we must manualy trigger this... so add a manual-param
						if (strtotime($issue_invoice_date) == strtotime("Today")){
							
							$invoice_month_date_start =  strtotime( date("Y") . "-" . sprintf('%02d', $val['when_month']) . "-01" . " 00:00:00" );
							
							$month_start = DateTime::createFromFormat("Y-m-d H:i:s",  date("Y-m-d H:i:s", $invoice_month_date_start));
							$month_end = DateTime::createFromFormat("Y-m-d H:i:s", date("Y-m-d H:i:s", strtotime($month_start->format( 'Y-m-t' ))));
							
							$new_invoice = true;
							//verify if member was allready invoiced for this interval
							foreach($invoice_data[ $val['memberid'] ] [ $val['member2membershipsid'] ] as $inv_id => $inv_val){
								
								if (	isset($inv_val['start'], $inv_val['end'])
										&& ($inv_val['start']<=$month_start->getTimestamp() && $inv_val['end'] >= $month_end->getTimestamp()) 
									)
								{
									//allready invoiced
									$new_invoice = false;
									
								}
								
							}
							
							if ($new_invoice){
								//generate new invoice draft
								$params = array();
								
								$params['members'] = array($memberid);
								$params['membership_data'] = $val['member2membershipsid'] ;
								$params['get_pdf'] = 0;
								$params['only_pdf'] = 0;
								$params['stornopdf'] = 0;
								$params['stornoid'] = 0;
								$params['invoices'] = array("0");
								$params['interval']['start'] = $month_start->format("Y-m-d H:i:s");
								$params['interval']['end'] = $month_end->format("Y-m-d H:i:s");
								$params['selected_period'] = array();
								$params['selected_period'][$memberid] =  array(
										'membership' => $membership2members[$val['member2membershipsid']]['membership'],
										'membership_start' => $membership2members[$val['member2membershipsid']]['start_date'] ,
										'membership_end' => $membership2members[$val['member2membershipsid']]['end_date'] ,
										'membership_price' => $val['amount'],
										'start' => $month_start->format("Y-m-d H:i:s"),
										'end' => $month_end->format("Y-m-d H:i:s"),
								);
								
								$this->membersinvoice($params);
							}
						}
					}
					
					//quarterly
					elseif ($val['howoften'] == 'quarterly'){

						if  ($this->CurrentQuarter() != $val['when_month']){
							continue;
						}
						$current_q = Pms_CommonData::get_dates_of_quarter ( 'current', null, "d.m.Y" );
						
						$issue_invoice_date =  date('Y-m-d', strtotime( ($val['when_day']-7)." days", strtotime( $current_q['start']) ) );
						//die("$issue_invoice_date");
						if (strtotime($issue_invoice_date) == strtotime("Today")){

							$params = array();
							
							$params['members'] = array($memberid);
							$params['membership_data'] = $val['member2membershipsid'] ;
							$params['get_pdf'] = 0;
							$params['only_pdf'] = 0;
							$params['stornopdf'] = 0;
							$params['stornoid'] = 0;
							$params['invoices'] = array("0");
							$params['interval']['start'] = $current_q['start'];
							$params['interval']['end'] = $current_q['end'];
							$params['selected_period'] = array();
							$params['selected_period'][$memberid] =  array(
									'membership' => $membership2members[$val['member2membershipsid']]['membership'],
									'membership_start' => $membership2members[$val['member2membershipsid']]['start_date'] ,
									'membership_end' => $membership2members[$val['member2membershipsid']]['end_date'] ,
									'membership_price' => $val['amount'],
									'start' => $current_q['start'],
									'end' => $current_q['end'],
							);

							$this->membersinvoice($params);
						}
					}
					//annually
					elseif ($val['howoften'] == 'annually'){
												
						$issue_invoice_date =  date('Y-m-d', strtotime("-7 days", strtotime( date("Y") . "-" . sprintf('%02d', $val['when_month']) . "-" . sprintf('%02d', $val['when_day']) . " 00:00:00" ) ) );
	
						if (strtotime($issue_invoice_date) == strtotime("Today")){
							
// 							die($issue_invoice_date);
							$membership_history_one_memeber = array();
							$member_details = $client_members[$memberid] ; 
							if(!empty($membership2members)){
								foreach($membership2members as $k=>$md){
									if($md['member'] ==  $memberid){
										$membership_history_one_memeber[$k]=$md;
									}
								}
							}
							
							$membership_intervals = $this->membership_intervals($membership_history_one_memeber, $billing_method, $member_details , $invoice_data);
// 							print_r($membership_intervals);
// 							print_r($membership_history_one_memeber);
							
							foreach($membership_intervals['invoice_period'] as $membership_id => $period ){
								foreach ($period as $pval){
									if($pval['invoiced'] != '0'){
										//allready invoiced
										continue;
									}
									
									$params = array();
									
									$params['members'] = array($memberid);
									$params['membership_data'] = $membership_id ;
									
									$params['get_pdf'] = 0;
									$params['only_pdf'] = 0;
									$params['stornopdf'] = 0;
									$params['stornoid'] = 0;
									$params['invoices'] = array("0");
									
									$params['interval']['start'] = $pval['start'];
									$params['interval']['end'] = $pval['end'];
									
									$params['selected_period'] = array();
									$params['selected_period'][$memberid] =  array(
											'membership' => $membership_intervals['membership_history'][$membership_id]['membership'],
											'membership_start' => $pval['start'] ,
											'membership_end' => $pval['end'] ,
											'membership_price' => $membership_intervals['membership_history'][$membership_id]['price'],
											'start' => $pval['start'],
											'end' => $pval['end'],
									);
									$this->membersinvoice($params);
								}		
							}							
						}	
					}//elseif ($val['howoften'] == 'annually')
					
				}
				
			}
			$this->redirect(APP_BASE . 'invoicenew/membersinvoices');
								
		}
		
		private function CurrentQuarter(){
			$n = date('n');
			if($n < 4){
				return "1";
			} elseif($n > 3 && $n <7){
				return "2";
			} elseif($n >6 && $n < 10){
				return "3";
			} elseif($n >9){
				return "4";
			}
		}
		
		private function membership_intervals($membership_history_array , $membership_billing_method = "membership", $memberarray, $invoice_data)
		{
			if(!empty($membership_history_array)){
			
				$member_id = $memberarray['id'];
				$clientid = $this->clientid;
				
				foreach($membership_history_array as $k=>$md){
			
					//IMPORTANT
					// - CHANGE MEMBERSHIP  END DATE IF INACTIVE DATE IS SET
					if($memberarray['inactive'] == "1" && $memberarray['inactive_from'] !=  "0000-00-00"){
						$inactive_date = date("Y-m-d H:i:s", strtotime($memberarray['inactive_from']));
						if( $md['end_date'] != "0000-00-00 00:00:00"){
							if( strtotime($md['end_date'])  >  strtotime($inactive_date)){
								$membership_history_array[$k]['end_date'] =$inactive_date;
							}
						} else {
			
							if( strtotime($md['start_date']) < strtotime($inactive_date) ){
								$membership_history_array[$k]['end_date'] = $inactive_date;
							} else {
								unset($membership_history_array[$k]);
							}
						}
					}
				}
				foreach($membership_history_array as $k=>$md){
			
					$membership_history[$md['id']] = $md;
					if($membership_billing_method == "membership"){
						// membership
						if($md['start_date'] != "0000-00-00 00:00:00"){
							$membership_history[$md['id']]['start'] = date( 'd.m.Y',strtotime($md['start_date']));
						} else{
							$membership_history[$md['id']]['start'] = "";
						}
						 
			
						if($md['end_date'] != "0000-00-00 00:00:00"){
							$membership_history[$md['id']]['end'] = date( 'd.m.Y',strtotime($md['end_date']));
							$membership_history_cal[$md['id']]['end'] = date( 'd.m.Y',strtotime($md['end_date']));
						} else{
							$membership_history[$md['id']]['end'] = "";
			
							if(strtotime($md['start_date']) >= strtotime(date("d.m.Y",time()))){
								$membership_history_cal[$md['id']]['end'] = date("d.m.Y", strtotime("-1 day", strtotime("+12 months", strtotime($md['start_date']))));
							} else{
								$membership_history_cal[$md['id']]['end'] = date("d.m.Y", strtotime("-1 day", strtotime("+12 months", time())));
							}
						}
			
						// break membership in 12 months interval
						$membership_intervals[$md['id']] = Pms_CommonData::generateDateRangeArray(  $membership_history[$md['id']]['start'] ,$membership_history_cal[$md['id']]['end'],"+1 year");
			
						foreach($membership_intervals[$md['id']] as $k => $start_dates){
							if(count($membership_intervals[$md['id']]) >= 1 && $membership_history[$md['id']]['end'] == "") {
			
								if( date( 'Y',strtotime($start_dates)) <= date("Y",time()) ){
									$msp_intervals[$md['id']][$k]['start'] = $start_dates;
									if($membership_intervals[$md['id']][$k+1]){
										$msp_intervals[$md['id']][$k]['end'] = date("d.m.Y",strtotime("-1 day", strtotime($membership_intervals[$md['id']][$k+1])));
									} else{
										$msp_intervals[$md['id']][$k]['end'] = date("d.m.Y", strtotime("-1 day", strtotime("+12 months", strtotime($membership_intervals[$md['id']][$k]))));
									}
								}
			
							} else{
			
								$msp_intervals[$md['id']][$k]['start'] = $start_dates;
								if($membership_intervals[$md['id']][$k+1]){
									$msp_intervals[$md['id']][$k]['end'] = date("d.m.Y",strtotime("-1 day", strtotime($membership_intervals[$md['id']][$k+1])));
								} else{
									//   $msp_intervals[$md['id']][$k]['end'] = date("d.m.Y", strtotime("-1 day", strtotime("+12 months", strtotime($start_dates))));
									$msp_intervals[$md['id']][$k]['end'] = date("d.m.Y", strtotime($membership_history[$md['id']]['end']));
								}
							}
						}
							
						$m=0;
						foreach($msp_intervals[$md['id']] as $int_k => $int_dates){
							$invoice_period[$md['id']][$m]['start'] =  $int_dates['start'];
							$invoice_period[$md['id']][$m]['end'] =  $int_dates['end'];
			
							$invoice_period[$md['id']][$m]['invoiced'] = 0;
							if($invoice_data[$member_id][$md['id']]){
								foreach($invoice_data[$member_id][$md['id']] as $inv_id =>$inv_dates){
									if(strtotime($invoice_period[$md['id']][$m]['start']) == $inv_dates['start']  && strtotime( $invoice_period[$md['id']][$m]['end']) == $inv_dates['end']  ){
										$invoice_period[$md['id']][$m]['invoiced'] += 1;
									} else
									{
										$invoice_period[$md['id']][$m]['invoiced'] += 0;
									}
								}
							}
							$m++;
						}
					} else { // CALENDAR YEAR METHOD
							
						// Membership interval
						if($md['start_date'] != "0000-00-00 00:00:00"){
							$membership_history[$md['id']]['start'] = date( 'd.m.Y',strtotime($md['start_date']));
						} else{
							$membership_history[$md['id']]['start'] = "";
						}
			
						if($md['end_date'] != "0000-00-00 00:00:00"){
							$membership_history[$md['id']]['end'] = date( 'd.m.Y',strtotime($md['end_date']));
							$membership_history_cal[$md['id']]['end'] = date( 'd.m.Y',strtotime($md['end_date']));
						} else{
							$membership_history[$md['id']]['end'] = "";
							 
							if( date( 'Y',strtotime($md['start_date'])) > date("Y",time()) ){
								$membership_history_cal[$md['id']]['end'] = date("d.m.Y",mktime(0,0,0,12,31,date( 'Y',strtotime($md['start_date']))));;
							} else{
								$membership_history_cal[$md['id']]['end'] = date("d.m.Y",mktime(0,0,0,12,31,date("Y",time())));;
							}
						}
			
						// break membership period in calendar year intervals
						$start_year = date('Y',strtotime($membership_history[$md['id']]['start']));
						$end_year  = date('Y',strtotime($membership_history_cal[$md['id']]['end']));
						$i= 0;
						$interval[$md['id']] = array();
			
						for ($i = $start_year; $i <= $end_year; $i++ ){
							if($i ==  $start_year &&  $start_year != $end_year){
								$interval[$md['id']][$i]['start'] = $membership_history[$md['id']]['start'];
								$interval[$md['id']][$i]['end'] =  date("d.m.Y",mktime(0,0,0,12,31,$i));
							} else if($i ==  $end_year && $start_year  != $end_year ){
								$interval[$md['id']][$i]['start'] = date("d.m.Y",mktime(0,0,0,01,01,$i));
								$interval[$md['id']][$i]['end'] =  $membership_history_cal[$md['id']]['end'];
							} else if($start_year == $end_year ){
								$interval[$md['id']][$i]['start'] = $membership_history[$md['id']]['start'];
								$interval[$md['id']][$i]['end'] =  $membership_history_cal[$md['id']]['end'];
							} else {
								$interval[$md['id']][$i]['start'] = date("d.m.Y",mktime(0,0,0,01,01,$i));
								$interval[$md['id']][$i]['end'] =  date("d.m.Y",mktime(0,0,0,12,31,$i));
							}
						}
			
						$m=0;
						foreach($interval[$md['id']] as $int_k => $int_dates){
							$invoice_period[$md['id']][$m]['start'] =  $int_dates['start'];
							$invoice_period[$md['id']][$m]['end'] =  $int_dates['end'];
			
							$invoice_period[$md['id']][$m]['invoiced'] = 0;
			
							if($invoice_data[$member_id][$md['id']]){
								foreach($invoice_data[$member_id][$md['id']] as $inv_id =>$inv_dates){
									if(strtotime($invoice_period[$md['id']][$m]['start']) == $inv_dates['start']  && strtotime( $invoice_period[$md['id']][$m]['end']) == $inv_dates['end']  ){
										$invoice_period[$md['id']][$m]['invoiced'] += 1;
									}
									else
									{
										$invoice_period[$md['id']][$m]['invoiced'] += 0;
									}
								}
							}
							$m++;
						}
					}
					 
					 
					 
					$p_list = new PriceList();
			
					if($md['end_date'] == "0000-00-00 00:00:00") {
						if(strtotime( date('Y-m-d',strtotime($md['start_date']))) <= strtotime(date('Y-m-d'))){
							$md['end_date'] = date('Y-m-d H:i:s');
						} else{
							$md['end_date'] = $md['start_date'];
						}
					}
					 
					$master_price_list[$md['id']] = $p_list->get_client_list_period(date('Y-m-d', strtotime($md['start_date'])), date('Y-m-d', strtotime($md['end_date'])));
			
					$current_pricelist = $master_price_list[$md['id']][0];
					if($current_pricelist)
					{
						$price_memberships_model = new PriceMemberships();
						$price_memberships = $price_memberships_model->get_prices($current_pricelist['id'], $clientid);
					}
					 
					 
					if($md['membership_price'] != "0.00"){
						$membership_history[$md['id']]['price'] = $md['membership_price'];
						 
					} else {
						// get membership price from price list
						$membership_history[$md['id']]['price'] = $price_memberships[$md['membership']]['price'];
					}
					$membership_history[$md['id']]['price_from_list'] = $price_memberships[$md['membership']]['price'];
					 
					 
				}
			}
			return array('invoice_period'=>$invoice_period , 'membership_history'=> $membership_history);
		}
		
		
		// #################################################
		// ########## MEMBERS - END ######################
		// #################################################		
		
		//ISPC-2312 Ancuta 07.12.2020 changed to pubilc 
		public function bwmedipumpsinvoice($params)
		{
			//spl_autoload_register(array('AutoLoader', 'autoloadPdf')); // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
		    
			$p_list = new PriceList();
			$patientmaster = new PatientMaster();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$pat_medp = new PatientMedipumps();
			$pat_medp_control = new PatientMedipumpsControl();
			$medipumpsinvoices = new MedipumpsInvoicesNew();
			$medipumpsinvoices_items = new MedipumpsInvoiceItemsNew();
			$holidays = new NationalHolidays();
			$client = new Client();

			$clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] : $this->clientid;
			$userid = $this->userid;

			$client_details = $client->getClientDataByid($clientid);

			//new invoice required data START
			$ipids = $params['ipids'];
			$patient_days = $params['patient_days'];

			//set current period to work with
			$current_period = $params['period'];
			
			$current_period_arr = $params['period'];

			//client data
			$client_details = Pms_CommonData::getClientData($clientid);

			if($client_details)
			{
				$master_data['client']['id'] = $clientid;
				$master_data['client']['team_name'] = $client_details[0]['team_name'];
			}

			//patient HEALTH INSURANCE START
			$healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);

			//multiple hi subdivisions && hi subdivisions permissions
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);

			if($divisions)
			{
				foreach($healthinsu_multi_array as $k_hi => $v_hi)
				{
					$hi_companyids[] = $v_hi['companyid'];
				}

				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($hi_companyids);
			}
			//patient HEALTH INSURANCE END
			//client national holidays START
//			$national_holidays_res = $holidays->getNationalHoliday($clientid, $current_period['start'], true);
			$national_holidays_res = $holidays->getNationalHoliday($clientid);

			foreach($national_holidays_res as $k_natholliday => $v_natholliday)
			{
				$national_holidays[] = strtotime(date('Y-m-d', strtotime($v_natholliday['NationalHolidays']['date'])));
			}
			//client national holidays END
			//client medipumps data START
			$medp = new Medipumps();
			$client_medipumps = $medp->getMedipumps($clientid);


			foreach($client_medipumps as $k_medipump => $v_medipump)
			{
				$medipump_list[$v_medipump['id']] = $v_medipump;
			}
			//client medipumps data END
			//patient medipumps data START
			$patient_medipumps_details = $pat_medp->get_multi_patient_medipumps($ipids);

//verify this in case of debugging!!!
			$patient_medipumps_days = $pat_medp->get_multi_pat_period_medipumps($ipids, $current_period);

			//get patient medipumps saved data
			$patient_medipumps_control = $pat_medp_control->get_multi_patients_controlsheet($ipids, $current_period);
		

			if($patient_medipumps_control)
			{
				foreach($patient_medipumps_control as $kh => $mp_data)
				{
					foreach($mp_data as $k_med_control => $med_control)
					{
						if($med_control['value'] == '1')
						{
							$medipumps_control[$med_control['medipump']][$med_control['patient_medipump']][] = date('Y-m-d', strtotime($med_control['date']));
						}

						if($med_control['start'] == '1')
						{
							$start_days_control[$med_control['medipump']][$med_control['patient_medipump']][] = date('Y-m-d', strtotime($med_control['date']));
						}

						$controlled_patient_medipumps['patient_medipump'][$med_control['ipid']][$med_control['patient_medipump']] = $med_control['patient_medipump'];
						$controlled_patient_medipumps['medipump'][$med_control['ipid']][$med_control['medipump']] = $med_control['medipump'];
					}
				}
			}
			//patient medipumps data END
			//gather old generated  invoices in curent period (sapv, admissionid or both 0 and then is month period) START
			$medipumpsinvoice_details = $medipumpsinvoices->get_period_multi_patients_medipumps_invoices($ipids, $clientid, $current_period, 'p');

			foreach($medipumpsinvoice_details as $k_mpf_det => $v_mpf_det)
			{
				$gen_invoices_months[$v_mpf_det['ipid']][] = date('Y-m-d', strtotime($v_mpf_det['invoice_start']));
				$fall_total[$v_mpf_det['ipid']] += number_format($v_mpf_det['invoice_total'], '2', '.', '');
			}

			//gather old generated  invoices in curent period (sapv, admissionid or both 0 and then is month period) END
			//getting pricelist START
			$current_price_list = $p_list->get_client_list_patients_periods($current_period);

			if($current_price_list)
			{
				$price_mp = new PriceMedipumps();
				$price_medipumps = $price_mp->get_prices($current_price_list[0]['id'], $clientid);
			}
			//getting pricelist END

			foreach($ipids as $k_ipid => $v_ipid)
			{
				if($divisions && strlen($healthinsu_subdiv_arr[$v_ipid]['3']['name']) > '0')
				{
					$sapv_address[$v_ipid][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['street1']);
					$sapv_address[$v_ipid][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city']);
					$master_data['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = implode('<br />', array_values(array_unique($sapv_address[$v_ipid])));
				}
				else
				{
					$master_data['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = '';
				}
				if($params['nosapvperiod'][$v_ipid] == '1')
				{
					$curent_period[$v_ipid]['start'] = $params['selected_period'][$v_ipid]['start'];
					$curent_period[$v_ipid]['end'] = $params['selected_period'][$v_ipid]['end'];
					$curent_period_days[$v_ipid] = $params['selected_period'][$v_ipid]['days'];
					$curent_period_days_sapv[$v_ipid] = $params['sapv_in_period'][$v_ipid];
				}
				else //sapv period selected case
				{
					$curent_period[$v_ipid]['start'] = $params['period'][$v_ipid]['start'];
					$curent_period[$v_ipid]['end'] = $params['period'][$v_ipid]['end'];
					$curent_period_days[$v_ipid] = $params['period'][$v_ipid]['days'];
					$curent_period_days_sapv[$v_ipid] = array_intersect($params['patient_days'][$v_ipid]['active_days'], $params['period'][$v_ipid]['days']);
					$curent_period_days_sapv[$v_ipid] = array_intersect($curent_period_days_sapv[$v_ipid], $params['sapv_overall'][$v_ipid]);
				}

				$master_data['patients'][$v_ipid]['invoice_data']['period'] = $curent_period[$v_ipid];
				$master_data['patients'][$v_ipid]['invoice_data']['sapv'] = $params['period'][$v_ipid];
				$master_data['patients'][$v_ipid]['invoice_data']['admissionid'] = $params['admissionid'][$v_ipid];

				//map array to have sapv like start-end
				if(empty($master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam']))
				{
					if($params['existing_sapv_days'][$v_ipid])
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam'] = date('Y-m-d H:i:s', strtotime($params['existing_sapv_days'][$v_ipid][0]));
					}
					else if($params['existing_sapv_days'][0])
					{

						$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam'] = date('Y-m-d H:i:s', strtotime($params['existing_sapv_days'][0]));
					}
				}

				if(empty($master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis']))
				{
					if($params['existing_sapv_days'][$v_ipid])
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis'] = date('Y-m-d H:i:s', strtotime(end($params['existing_sapv_days'][$v_ipid])));
					}
					else if($params['existing_sapv_days'][0])
					{
						$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis'] = date('Y-m-d H:i:s', strtotime(end($params['existing_sapv_days'])));
					}
				}

				if(!empty($params['period_sapvs_alldays'][$v_ipid]))
				{
					$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungam'] = date('Y-m-d H:i:s', strtotime($params['period_sapvs_alldays'][$v_ipid][0]));
					$master_data['patients'][$v_ipid]['invoice_data']['sapv']['verordnungbis'] = date('Y-m-d H:i:s', strtotime(end($params['period_sapvs_alldays'][$v_ipid])));
				}

				$master_data['patients'][$v_ipid]['invoice_data']['hi_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
				$master_data['patients'][$v_ipid]['invoice_data']['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
				$master_data['patients'][$v_ipid]['invoice_data']['privatepatient'] = $healthinsu_multi_array[$v_ipid]['privatepatient'];

				$master_data['patients'][$v_ipid]['invoice_data']['patient_address'] =  htmlentities( $patient_days[$v_ipid]['details']['first_name']) . ' ' . htmlentities($patient_days[$v_ipid]['details']['last_name']) . "<br />";
				$master_data['patients'][$v_ipid]['invoice_data']['patient_address'] .= htmlentities($patient_days[$v_ipid]['details']['street1']) . "<br />";
				$master_data['patients'][$v_ipid]['invoice_data']['patient_address'] .= htmlentities($patient_days[$v_ipid]['details']['zip']) . ' ' .htmlentities( $patient_days[$v_ipid]['details']['city']) . "<br />";
			}
			//new invoice required data END

			if($params['only_pdf'] == '0')
			{
				//loop through the patients START
				foreach($ipids as $k_ipid => $v_ipid)
				{
					//process patient HEALTH INSURANCE START
					$hi_address[$v_ipid] = array();
					if($divisions && strlen($healthinsu_subdiv_arr[$v_ipid]['4']['name']) > '0')
					{
						$master_data['patients'][$v_ipid]['health_insurace'] = $healthinsu_subdiv_arr[$v_ipid]['4'];

						$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_subdiv_arr[$v_ipid][4]['name']);
						if($healthinsu_subdiv_arr[$v_ipid][4]['insurance_provider'])
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_subdiv_arr[$v_ipid][4]['insurance_provider']);
						}
						/* else 
						{
							$hi_address[$v_ipid]['address'][] = $healthinsu_subdiv_arr[$v_ipid][4]['contact_person'];
						} */
						
						$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_subdiv_arr[$v_ipid][4]['street1']);
						$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_subdiv_arr[$v_ipid][4]['zip']) . ' ' .  htmlentities($healthinsu_subdiv_arr[$v_ipid][4]['city']);
					}
					else
					{
						$master_data['patients'][$v_ipid]['health_insurace'] = $healthinsu_multi_array[$v_ipid];

						if(strlen($healthinsu_multi_array[$v_ipid]['company_name']) > '0')
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['company_name']);
						}
						else
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['company']['name']);
						}

						if(strlen($healthinsu_multi_array[$v_ipid]['ins_insurance_provider']) > '0')
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['ins_insurance_provider']);
						}
						else 
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['company']['insurance_provider']);
						}
						if(strlen($healthinsu_multi_array[$v_ipid]['ins_street']) > '0')
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['ins_street']);
						}
						else
						{
							$hi_address[$v_ipid]['address'][] =  htmlentities($healthinsu_multi_array[$v_ipid]['company']['street1']);
						}

						if(strlen($healthinsu_multi_array[$v_ipid]['ins_zip']) > '0' || strlen($healthinsu_multi_array[$v_ipid]['ins_city']) > '0')
						{
							if(strlen($healthinsu_multi_array[$v_ipid]['ins_zip']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] = $healthinsu_multi_array[$v_ipid]['ins_zip'];
							}

							if(strlen($healthinsu_multi_array[$v_ipid]['ins_city']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] =  htmlentities($healthinsu_multi_array[$v_ipid]['ins_city']);
							}

							$hi_address[$v_ipid]['address'][] = implode(' ', $hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']]);
						}
						else
						{
							if(strlen($healthinsu_multi_array[$v_ipid]['zip']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] = $healthinsu_multi_array[$v_ipid]['zip'];
							}

							if(strlen($healthinsu_multi_array[$v_ipid]['city']) > '0')
							{
								$hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']][] =  htmlentities($healthinsu_multi_array[$v_ipid]['city']);
							}

							$hi_address[$v_ipid]['address'][] = implode(' ', array_values(array_unique($hi_addr_zip_city[$healthinsu_multi_array[$v_ipid]['id']])));
						}
					}

					$master_data['patients'][$v_ipid]['invoice_data']['health_insurace_address'] = implode('<br />', array_values(array_unique($hi_address[$v_ipid]['address'])));
					
					//process patient HEALTH INSURANCE END
					//client settings data setup START
					$hospital_days_cs = $patient_days[$v_ipid]['hospital']['real_days_cs'];
					$hospiz_days_cs = $patient_days[$v_ipid]['hospiz']['real_days_cs'];
					$active_days_in_period_cs = $patient_days[$v_ipid]['treatment_days'];
					$days_in_period_cs = $patient_days[$v_ipid]['real_active_days'];
					//client settings data setup END

					$medipumpe_details_only = array();
					foreach($patient_medipumps_details[$v_ipid] as $k_vmedipumpe => $v_vmedipumpe)
					{
						if(in_array($v_vmedipumpe['medipump'], $patient_medipumps_days['mp_ids'][$v_vmedipumpe['ipid']]))
						{
							//to invoices + controlsheet
							$medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_id'] = $v_vmedipumpe['medipump'];
							$medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_name'] = $medipump_list[$v_vmedipumpe['medipump']]['medipump'];
							$medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_sht'] = $medipump_list[$v_vmedipumpe['medipump']]['shortcut'];
							if(empty($medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days']))
							{
								$medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days'] = array();
							}
// 							$patient_medipumps_days
							$medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days'] = array_merge($medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days'], $patient_medipumps_days['mp_days'][$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']] );
							//medipumpe details only
							$medipumpe_details_only[$v_vmedipumpe['medipump']]['medipump_id'] = $v_vmedipumpe['medipump'];
							$medipumpe_details_only[$v_vmedipumpe['medipump']]['medipump_name'] = $medipump_list[$v_vmedipumpe['medipump']]['medipump'];
							$medipumpe_details_only[$v_vmedipumpe['medipump']]['medipump_sht'] = $medipump_list[$v_vmedipumpe['medipump']]['shortcut'];

							// overwrite if control sheet was saved
							if(!empty($patient_medipumps_control[$v_vmedipumpe['ipid']]) && (in_array($v_vmedipumpe['id'], $controlled_patient_medipumps['patient_medipump'][$v_vmedipumpe['ipid']]) || in_array($v_vmedipumpe['medipump'], $controlled_patient_medipumps['medipump'][$v_vmedipumpe['ipid']]))) //control sheet overwrite
							{
								$medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days'] = array_merge($medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days'], $medipumps_control[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]);
								$medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_start_days'] = $start_days_control[$v_vmedipumpe['medipump']][$v_vmedipumpe['id']];
							}
						
							//estabilish start-end dates
							if($v_vmedipumpe['end_date'] == '0000-00-00 00:00:00')
							{
								$pat_till = date('Y-m-d');
							}
							else
							{
								$pat_till = date('Y-m-d', strtotime($v_vmedipumpe['end_date']));
							}

							$pat_start = date('Y-m-d', strtotime($v_vmedipumpe['start_date']));


							$r1start = strtotime(date('Y-m-d', strtotime($v_vmedipumpe['start_date'])));
							$r1end = strtotime($pat_till);
							$r2start = strtotime($current_period[$v_vmedipumpe['ipid']]['start']);
							$r2end = strtotime($current_period[$v_vmedipumpe['ipid']]['end']);

							$medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_start_days'][] = $pat_start;
							//print_r($r1start .' -- '.$r1end.' --- '.$r2start .' -- '.$r2end."\n\n");
							//var_dump(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end));
							//print_r("\n\n");
							
							$intersected_medipumps_days = array();
							if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
							{
								$intersected_medipumps_days = $patientmaster->getDaysInBetween($pat_start, $pat_till);
								
								$medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days'] = array_merge($medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days'],$intersected_medipumps_days);
							}
							
							$medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days'] = array_values(array_unique($medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days']));
							asort($medipumpedetails_invoice[$v_vmedipumpe['ipid']][$v_vmedipumpe['medipump']][$v_vmedipumpe['id']]['medipump_days']);
						}
					}
					if($_REQUEST['dbg_med'] == "1"){
						print_r(" \n medipumpedetails_invoice\n ");
						print_r($medipumpedetails_invoice);
						exit;
					}

					foreach($medipumpedetails_invoice[$v_ipid] as $k_medipump => $patient_medipumps)
					{
						foreach($patient_medipumps as $k_mp_det => $v_mp_det)
						{
							$medipumpedetails_invoice[$v_ipid][$k_medipump][$k_mp_det]['medipump_out_period_days'] = array();
							$medipumpedetails_invoice[$v_ipid][$k_medipump][$k_mp_det]['medipump_in_period_days'] = array();
							foreach($v_mp_det['medipump_days'] as $k_pump_days => $v_pump_day)
							{
								//$days_in_period_cs format is d.m.Y
								$v_pump_day_alt = date('d.m.Y', strtotime($v_pump_day));
//								print_r($v_pump_day." -- ".$v_pump_day_alt. "\n");
//								var_dump(!in_array($v_pump_day_alt, $days_in_period_cs));
//								var_dump(in_array($v_pump_day, $patient_medipumps_days['mp_days'][$v_ipid][$k_medipump]));
//								print_r("\n\n");

								if(in_array($v_pump_day, $patient_medipumps_days['mp_days'][$v_ipid][$k_medipump]))
								{
									if(!in_array($v_pump_day_alt, $days_in_period_cs))
									{
										if(strtotime($v_pump_day) < strtotime($current_period[$v_ipid]['start']))
										{
											$medipumpedetails_invoice[$v_ipid][$k_medipump][$k_mp_det]['medipump_out_period_days'][] = $v_pump_day;
										}
									}
									else
									{
										if(strtotime($v_pump_day) < time())
										{
											$medipumpedetails_invoice[$v_ipid][$k_medipump][$k_mp_det]['medipump_in_period_days'][] = $v_pump_day;
										}
									}
								}
								
								
							}
							
							//remove the days which are not in curent period from saved daya array
							array_walk($current_period_arr[$v_ipid]['days'], function(&$value) {
								$value = date("Y-m-d", strtotime($value));
							});
							$medipumps_control[$k_medipump][$k_mp_det] = array_intersect($current_period_arr[$v_ipid]['days'], $medipumps_control[$k_medipump][$k_mp_det]);
							$medipumps_control[$k_medipump][$k_mp_det] = array_values(array_unique($medipumps_control[$k_medipump][$k_mp_det]));
							
							//do a merge with saved days
							//initialize arrays in order to avoid array_merge fault
							if(empty($medipumps_control[$k_medipump][$k_mp_det]))
							{
								$medipumps_control[$k_medipump][$k_mp_det] = array();
							}
							
							
							$medipumpedetails_invoice[$v_ipid][$k_medipump][$k_mp_det]['medipump_in_period_days'] = array_merge($medipumpedetails_invoice[$v_ipid][$k_medipump][$k_mp_det]['medipump_in_period_days'], $medipumps_control[$k_medipump][$k_mp_det]);
							$medipumpedetails_invoice[$v_ipid][$k_medipump][$k_mp_det]['medipump_in_period_days'] = array_values(array_unique($medipumpedetails_invoice[$v_ipid][$k_medipump][$k_mp_det]['medipump_in_period_days']));
						}
					}
					
//					print_r("controlled_patient_medipumps\n");
//					print_r($controlled_patient_medipumps);
//					print_r("medipumps_control\n");
//					print_r($medipumps_control);
//
//					print_r("patient_medipumps_days\n");
//					print_r($patient_medipumps_days);
//					print_r("medipumpedetails_invoice\n");
//					print_r($medipumpedetails_invoice);
//					print_r($days_in_period_cs);
//					exit;

					$has_patient_invoice_fall[$v_ipid] = "0";
					if($medipumpsinvoice_details && (bccomp($fall_total[$v_ipid], '10.00', '2') == '0' || in_array($current_period[$v_ipid]['start'], $gen_invoices_months[$v_ipid])))
					{
						$has_patient_invoice_fall[$v_ipid] = "1";
					}


					$mps_activity[$v_ipid][] = '99999999';
					$mps_rent[$v_ipid][] = '99999999';
					foreach($medipumpedetails_invoice[$v_ipid] as $k_mpdets => $v_mpdets)
					{
						$days_incrementor[$v_ipid][$k_mpdets] = '1';

						foreach($v_mpdets as $k_mpdet => $v_mpdet)
						{
							//estabilish price acordingly to the number of pump days
							$total_pump_days[$v_ipid] = count($v_mpdet['medipump_days']);
							$total_inside_period_days[$v_ipid] = count($v_mpdet['medipump_in_period_days']);
							$total_outside_period_days[$v_ipid] = count($v_mpdet['medipump_out_period_days']);
							$master_data_medipump_ids[$v_ipid][] = $k_mpdets;

							if(!empty($v_mpdet['medipump_in_period_days']))
							{
								$mps_activity[$v_ipid] = array_merge_recursive($mps_activity[$v_ipid], $v_mpdet['medipump_in_period_days']);
							}
							if(!empty($v_mpdet['medipump_days']))
							{
								$mps_rent[$v_ipid] = array_merge_recursive($mps_rent[$v_ipid], $v_mpdet['medipump_days']);
							}

							$no_first_price_set[$v_ipid] = "0";
							foreach($v_mpdet['medipump_days'] as $key_day => $v_day)
							{
								$v_day_alt = date('d.m.Y', strtotime($v_day));

								if(in_array($v_day_alt, $active_days_in_period_cs) && !in_array($v_day_alt, $hospital_days_cs))
								{
									if(in_array($v_day, $v_mpdet['medipump_in_period_days']))
									{
										$master_data_control_sheet[$v_ipid][$k_mpdets][$v_day] = '1';
									}

									if(in_array($v_day, $v_mpdet['medipump_start_days']))
									{
										$previous_start_day[$v_ipid] = $v_day;
										$days_incrementor[$v_ipid][$k_mpdets] = '1';
									}

									if(count($v_mpdet['medipump_start_days']) != 0 && strtotime($v_day) >= strtotime($previous_start_day[$v_ipid]))
									{
										if($days_incrementor[$v_ipid][$k_mpdets] <= $price_medipumps[$k_mpdets]['first_end'] && in_array($v_day, $v_mpdet['medipump_in_period_days']))
										{
											$invoice_items[$v_ipid][$k_mpdets]['first_price']['shortcut'] = $v_mpdet['medipump_sht'];
											$invoice_items[$v_ipid][$k_mpdets]['first_price']['name'] = $v_mpdet['medipump_name'];
											$invoice_items[$v_ipid][$k_mpdets]['first_price']['item_price_days'][] = $v_day;
											$invoice_items[$v_ipid][$k_mpdets]['first_price']['prev_starts'][] = $previous_start_day[$v_ipid];

											//first price count and sums
											$invoice_items[$v_ipid][$k_mpdets]['first_price']['qty'] += 1;
											$invoice_items[$v_ipid][$k_mpdets]['first_price']['price'] = $price_medipumps[$k_mpdets]['price_first'];
											$invoice_items[$v_ipid][$k_mpdets]['first_price']['total'] += $price_medipumps[$k_mpdets]['price_first'];
											$invoice_items[$v_ipid]['grand_total'] += $price_medipumps[$k_mpdets]['price_first'];
										}
									}
									else
									{
										$no_first_price_set[$v_ipid] = "1";
									}

									if(($days_incrementor[$v_ipid][$k_mpdets] >= $price_medipumps[$k_mpdets]['follow_start'] || $no_first_price_set[$v_ipid]) && in_array($v_day, $v_mpdet['medipump_in_period_days']))
									{
										$invoice_items[$v_ipid][$k_mpdets]['second_price']['shortcut'] = $v_mpdet['medipump_sht'];
										$invoice_items[$v_ipid][$k_mpdets]['second_price']['name'] = $v_mpdet['medipump_name'];
										$invoice_items[$v_ipid][$k_mpdets]['second_price']['item_price_days'][] = $v_day;

										//second price count and sums
										$invoice_items[$v_ipid][$k_mpdets]['second_price']['qty'] += 1;
										$invoice_items[$v_ipid][$k_mpdets]['second_price']['price'] = $price_medipumps[$k_mpdets]['price_follow'];
										$invoice_items[$v_ipid][$k_mpdets]['second_price']['total'] += $price_medipumps[$k_mpdets]['price_follow'];
										$invoice_items[$v_ipid]['grand_total'] += $price_medipumps[$k_mpdets]['price_follow'];
									}

									$days_incrementor[$v_ipid][$k_mpdets] += '1';
								}
							}
						}
					}
					
//					print_r("patient_medipumps_details\n");
//					print_r($patient_medipumps_details);
//
//					print_r("controlled_patient_medipumps\n");
//					print_r($controlled_patient_medipumps);
//					print_r("medipumps_control\n");
//					print_r($medipumps_control);
//					print_r("patient_medipumps_days\n");
//					print_r($patient_medipumps_days);
//					print_r("medipumpedetails_invoice\n");
//					print_r($medipumpedetails_invoice);
//					print_r($days_in_period_cs);
//					print_r("invoice_items\n");
//					print_r($invoice_items);
//					exit;
					if($_REQUEST['dbg_med'] == "1"){
						print_r(" \n current_period\n ");
						print_r($current_period);
				 
						print_r(" \n medipump all details \n ");
						print_r($patient_medipumps_details);
	 
						print_r(" \n medipump in period \n ");
						print_r($patient_medipumps_days );
 
						print_r(" \n medipump SAVED in period \n ");
						print_r($patient_medipumps_control );
 
						print_r(" \n medipump SAVED by days \n ");
						print_r($medipumps_control );
						exit;
					}
					
					$mps_activity[$v_ipid] = array_unique($mps_activity[$v_ipid]);
					asort($mps_activity[$v_ipid]);
					unset($mps_activity[$v_ipid][array_search('99999999', $mps_activity[$v_ipid])]);
					$mps_activity[$v_ipid] = array_values($mps_activity[$v_ipid]);

					//medipumps all rent period days
					$mps_rent[$v_ipid] = array_unique($mps_rent[$v_ipid]);
					asort($mps_rent[$v_ipid]);
					unset($mps_rent[$v_ipid][array_search('99999999', $mps_rent[$v_ipid])]);
					$mps_rent[$v_ipid] = array_values($mps_rent[$v_ipid]);

					$master_data_medipump_ids[$v_ipid] = array_values(array_unique($master_data_medipump_ids[$v_ipid]));


					//calculate patient 10%
					//$privatepatient = $healthinsu_multi_array[$v_ipid]['privatepatient'];
					$both_invoices[$v_ipid] = "0";
					if($healthinsu_multi_array[$v_ipid]['rezeptgebuhrenbefreiung'] != '1' && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "0" && $has_patient_invoice_fall[$v_ipid] == "0")
					{
						//patient has to pay his part (A-10% [5, 10])
						//L.E: generate the patient invoice only if patient has no "p" type invoice in this fall
						//L.L.E: generate the patient invoice only if has no "p" type invoice and sum of previously invoices < 10
						//TODO remove corect ammount from both invoices from last invoice
						if($invoice_items[$v_ipid]['grand_total'] > '0')
						{
							$total_amount[$v_ipid] = $invoice_items[$v_ipid]['grand_total'];
							$percent[$v_ipid] = '10';

							$percent_value[$v_ipid] = ($total_amount[$v_ipid] * ($percent[$v_ipid] / 100));

							if($percent_value[$v_ipid] >= '5' && $percent_value[$v_ipid] <= '10')
							{
								$percent_final_value[$v_ipid] = $percent_value[$v_ipid];
//								$tmp_percent_final_value[$v_ipid] = "A[".$percent_value[$v_ipid]."]";
							}
							else if($percent_value[$v_ipid] < '5')
							{
								$percent_final_value[$v_ipid] = '5';
//								$tmp_percent_final_value[$v_ipid] = "B[5]";
							}
							else if($percent_value[$v_ipid] > '10')
							{
								$percent_final_value[$v_ipid] = '10';
//								$tmp_percent_final_value[$v_ipid] = "C[10]";
							}

							if($fall_total[$v_ipid] != '0.00' && !empty($fall_total[$v_ipid]) && bccomp($fall_total[$v_ipid], '10.00', '2') < '0')
							{
								//maximum amount - previous fall invoices ammount
								$percent_final_value[$v_ipid] = ('10.00' - $fall_total[$v_ipid]);
							}

							$invoice_items[$v_ipid]['percent_value'] = $percent_final_value[$v_ipid];
							$total_value[$v_ipid] = ($total_amount[$v_ipid] - $percent_final_value[$v_ipid]);
							$invoice_items[$v_ipid]['percentless_amount'] = $total_value[$v_ipid];

							$both_invoices[$v_ipid] = "1";
						}
						else
						{
							$invoice_items[$v_ipid]['percent_value'] = $percent_final_value;
							$invoice_items[$v_ipid]['percentless_amount'] = '0';
							$both_invoices[$v_ipid] = "1";
						}
					}
					else
					{
						$total_amount[$v_ipid] = $invoice_items[$v_ipid]['grand_total'];

						$invoice_items[$v_ipid]['percent_value'] = '0';
						$invoice_items[$v_ipid]['percentless_amount'] = $total_amount[$v_ipid];

						$both_invoices[$v_ipid] = "0";
					}

					$master_data['patients'][$v_ipid]['invoice_data']['both_invoices'] = $both_invoices[$v_ipid];

					$master_data['patients'][$v_ipid]['invoice_data']['current_period_start'] = date('Y-m-d H:i:s', strtotime($current_period[$v_ipid]['start']));
					$master_data['patients'][$v_ipid]['invoice_data']['current_period_end'] = date('Y-m-d H:i:s', strtotime($current_period[$v_ipid]['end']));


					if(empty($invoice_data['first_active_day']))
					{
						$start_activity[$v_ipid] = $mps_activity[$v_ipid][0];
						$last_element[$v_ipid] = end($mps_activity[$v_ipid]);
						$end_activity[$v_ipid] = $last_element[$v_ipid];
					}
					else
					{
						$start_activity[$v_ipid] = $invoice_data['first_active_day'];
						$end_activity[$v_ipid] = $invoice_data['last_active_day'];
					}

					if(empty($invoice_data['start_mp_rent']))
					{
						$start_rent[$v_ipid] = $mps_rent[$v_ipid][0];
						$last_rent_elem[$v_ipid] = end($mps_rent[$v_ipid]);
						$end_rent[$v_ipid] = $last_rent_elem[$v_ipid];
					}
					else
					{
						$start_rent[$v_ipid] = $invoice_data['start_mp_rent'];
						$end_rent[$v_ipid] = $invoice_data['end_mp_rent'];
					}

					if($start_activity[$v_ipid])
					{
						$master_data['patients'][$v_ipid]['invoice_data']['first_active_day'] = date('Y-m-d H:i:s', strtotime($start_activity[$v_ipid]));
					}
					else
					{
						$master_data['patients'][$v_ipid]['invoice_data']['first_active_day'] = '0000-00-00 00:00:00';
					}

					if($end_activity[$v_ipid])
					{
						$master_data['patients'][$v_ipid]['invoice_data']['last_active_day'] = date('Y-m-d H:i:s', strtotime($end_activity[$v_ipid]));
					}
					else
					{
						$master_data['patients'][$v_ipid]['invoice_data']['last_active_day'] = '0000-00-00 00:00:00';
					}

					if($start_rent[$v_ipid])
					{
						$master_data['patients'][$v_ipid]['invoice_data']['start_mp_rent'] = date('Y-m-d H:i:s', strtotime($start_rent[$v_ipid]));
					}
					else
					{
						$master_data['patients'][$v_ipid]['invoice_data']['start_mp_rent'] = '0000-00-00 00:00:00';
					}

					if($end_rent[$v_ipid])
					{
						$master_data['patients'][$v_ipid]['invoice_data']['end_mp_rent'] = date('Y-m-d H:i:s', strtotime($end_rent[$v_ipid]));
					}
					else
					{
						$master_data['patients'][$v_ipid]['invoice_data']['end_mp_rent'] = '0000-00-00 00:00:00';
					}


					$master_data['patients'][$v_ipid]['invoice_items'] = $invoice_items[$v_ipid];

					if(strlen($params['selected_period'][$v_ipid]['days_in_month']) > '0')
					{
						$master_data['patients'][$v_ipid]['invoice_data']['invoiced_month'] = date('Y-m-d H:i:s', strtotime($params['selected_period'][$v_ipid]['start']));
					}
					else
					{
						$master_data['patients'][$v_ipid]['invoice_data']['invoiced_month'] = "0000-00-00 00:00:00";
					}
				}//end foreach $ipids
				//loop through the patients END


				$mp_forms = new Application_Form_MedipumpsInvoicesNew();
				$inserted_invoices = $mp_forms->insert_invoice($master_data);
			}//end if $params['only_pdf'] == 0
			else if($params['invoices'])
			{
				$inserted_invoices = $params['invoices'];
			}

			
//			print_r("master_data\n");
//			print_r($master_data);
//			print_r("invoice_items\n");
//			print_r($invoice_items);
//			exit;
			if($params['get_pdf'] == "1")
			{
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$invoice_data = $medipumpsinvoices->getMedipumpsInvoice($params['stornoid'], false, true);
					
					$invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];     //ISPC-2532 Lore 10.11.2020
					
					//ISPC-2532 Carmen 18.02.2020 - get the prefix and the number of storno invoice
					$invoice_data_storno = $medipumpsinvoices->get_invoice($inserted_invoices[0]);
					$invoice_data['prefix'] = $invoice_data_storno[0]['prefix'];
					$invoice_data['invoice_number'] = $invoice_data_storno[0]['invoice_number'];
					//--
				}
				else
				{
					$invoice_data = $medipumpsinvoices->getMedipumpsInvoice($inserted_invoices[0], false);
				}

				
				if(strlen($invoice_data['address']) > 0 ){
				    if(strpos($invoice_data['address'],"style"))
				    {
				        $invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
				    }
				    $invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
				    $invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
				    $invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
				}
				
				
				//rewrite invoice_data with custom data (which comes from POST)
				if($params['custom_data'])
				{
					//rewrite custom data from POST to $invoice_data.
					foreach($params['custom_data'] as $k_custom => $v_custom)
					{
						$invoice_data[$k_custom] = $v_custom;
					}
				}

				$pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
				}
				else
				{
					$invoice_data['patient_pflegestufe'] = ' - ';
				}

				//load template data
				$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'bw_medipumps_invoice');

				//setup tokens (remove pseudopost when all works)
				//client tokens
				$tokens['client_ik'] = $client_details[0]['institutskennzeichen'];
				
				$tokens['debitoren_nummer_oder_pv'] = '';
				//patient details tokens
				$tokens['patienten_id'] = strtoupper(html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
				$tokens['first_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
				$tokens['last_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
				$tokens['birthd'] = date('d.m.Y', strtotime($params['patient_days'][$invoice_data['ipid']]['details']['birthd']));
				$tokens['street'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
				$tokens['zip'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
				$tokens['city'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
				$tokens['patient_pflegestufe'] = html_entity_decode($invoice_data['patient_pflegestufe'], ENT_QUOTES, 'UTF-8');

				//health insurance tokens
				$tokens['insurance_no'] = html_entity_decode($master_data['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
 				//$tokens['address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');//medipumpinvoice
				$tokens['address'] = htmlentities($invoice_data['address']);//medipumpinvoice
				//$tokens['address'] = htmlentities($invoice_data['address'], ENT_QUOTES, 'UTF-8');//medipumpinvoice
				$tokens['SAPV_Rechnungsempfaenger'] = htmlentities($master_data['patients'][$invoice_data['ipid']]['invoice_data']['sapv_recipient']);//ISPC-1236
				$tokens['beneficiary_address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');

				//invoice specific tokens
				$tokens['invoiced_month'] = "";
				if(!empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
				{
					$tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
				}

				$tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
				$tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');

				//invoice date
				if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970")
				{
					$tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
				}
				else
				{
					$tokens['invoice_date'] = '';
				}

				//start billed action day
				if($invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_active'])) != "1970")
				{
					$tokens['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
				}
				else
				{
					$tokens['first_active_day'] = '';
				}

				//end billed action day
				if($invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_active'])) != "1970")
				{
					$tokens['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
				}
				else
				{
					$tokens['last_active_day'] = '';
				}

				//start rent action day
				if($invoice_data['start_mp_rent'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_mp_rent'])) != "1970")
				{
					$tokens['start_mp_rent'] = date('d.m.Y', strtotime($invoice_data['start_mp_rent']));
				}
				else
				{
					$tokens['start_mp_rent'] = '';
				}

				//end rent action day
				if($invoice_data['end_mp_rent'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_mp_rent'])) != "1970")
				{
					$tokens['end_mp_rent'] = date('d.m.Y', strtotime($invoice_data['end_mp_rent']));
				}
				else
				{
					$tokens['end_mp_rent'] = '';
				}

				$tokens['footer'] = html_entity_decode($invoice_data['footer'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_items'] = $invoice_data['items'];

				$tokens['footer'] = html_entity_decode($invoice_data['footer'], ENT_QUOTES, 'UTF-8');

				if($invoice_data['storno'] == '1')
				{
					//rewrite invoice prefix if storned
					$tokens['prefix'] = 'STORNO_' . $tokens['prefix'];
				}

				//ISPC-2532 Lore 10.11.2020
				if($invoice_data_storno[0]['storno'] == '1') {
				    $tokens['full_invoice_number'] = ' Storno '.$tokens['full_invoice_number'];  // ISPC-2532 Ancuta 11.12.2020- comment from 10.12.2020 - overwtite - and add STORNO in front
				    $tokens['full_invoice_number'] .= ' zur Rechnung '.$invoice_data['storned_invoice_number'];
				}
				
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$tokens['unique_id'] = $invoice_data['record_id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total'] * (-1)), '2', ',', '.');
				}
				else
				{
					$tokens['unique_id'] = $invoice_data['id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
				}

				if(count($invoice_data['items']) > '0')
				{
					//ISPC-1236 - new token invoice_items_html_short, without id
					$rows = count($invoice_data['items']);
					$grid = new Pms_Grid($invoice_data['items'], 1, $rows, "bw_mp_invoice_items_list_pdf.html");
					$grid_short = new Pms_Grid($invoice_data['items'], 1, $rows, "invoice_items_list_nocustom_bw_pdf_short.html");
					
					$grid->invoice_total = $tokens['invoice_total'];
					$grid->max_entries = $rows;
					
					$grid_short->invoice_total = $tokens['invoice_total'];
					$grid_short->max_entries = $rows;

					$html_items = $grid->renderGrid();
					$html_items_short = $grid_short->renderGrid();
				}

				$tokens['invoice_items_html'] = $html_items;
				$tokens['invoice_items_html_short'] = $html_items_short;
				
				if($template_data)
				{
					$this->generate_file($template_data[0], $tokens);
					exit;
				}
				else
				{
					$this->redirect(APP_BASE . 'invoicenew/newinvoicepatientlist?flg=notemplate');
					exit;
				}
			}
//			print_r("master_data\n");
//			print_r($master_data);
//			print_r("invoice_items\n");
//			print_r($invoice_items);
//			print_r("percent_value\n");
//			print_r($percent_value);
//			print_r("percent_final_value\n");
//			print_r($percent_final_value);
//			print_r("fall_total\n");
//			print_r($fall_total);
//			print_r("tmp_percent_final_value\n");
//			print_r($tmp_percent_final_value);
//			print_r("ipids\n");
//			print_r($ipids);
//			print_r("mps_activity\n");
//			print_r($mps_activity);
//			print_r("mps_rent\n");
//			print_r($mps_rent);
//			print_r("medipumpsinvoice_details");
//			print_r($medipumpsinvoice_details);
//			print_r("fall_total");
//			print_r($fall_total);
//			print_r("gen_invoices_months\n");
//			print_r($gen_invoices_months);
//			print_r("has_patient_invoice_fall\n");
//			print_r($has_patient_invoice_fall);
//			print_r("controlled_patient_medipumps\n");
//			print_r($controlled_patient_medipumps);
//			print_r("patient_medipumps_details\n");
//			print_r($patient_medipumps_details);
//			print_r("medipumpe_details_only\n");
//			print_r($medipumpe_details_only);
//			print_r("medipumpedetails_invoice\n");
//			print_r($medipumpedetails_invoice);
//			print_r("current_period\n");
//			print_r($current_period);
//			print_r("medipumpedetails_invoice\n");
//			print_r($medipumpedetails_invoice);
//			print_r("price_medipumps\n");
//			print_r($price_medipumps);
//			exit;
		}

		public function fetchbwmedipumpsinvoicelistAction()
		{
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');

			$users = new User();
			$bw_mp_invoices_payments = new MedipumpsInvoicePaymentsNew();

			$clientid = $this->clientid;

			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();

			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('MedipumpsInvoicesNew')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);

			// get client data
			$client_details_m = new Client();
			$client_details = $client_details_m->getClientDataByid($clientid);

			$invoice_due_days = $client_details[0]['invoice_due_days'];
			$plus_due_days = '+' . $invoice_due_days . ' days';
			$this->view->plus_due_days = $plus_due_days;

			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{
				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND isdelete=0 AND isarchived ="0"';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") AND isarchived ="0"';
					break;

				case 'overdue':
// 					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND DATE(NOW()) > DATE(completed_date)  AND isdelete=0 AND isarchived ="0"';
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
					break;

				case 'all':
					$filters['hiinvoice'] = ' AND isarchived ="0"';
					break;
				case 'archived':
					$filters['hiinvoice'] = ' AND isarchived ="1" AND isdelete=0';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';
					break;
			}

			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($this->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				//filter patients name/surname/epid
				$f_patient = Doctrine_Query::create()
					->select($sql)
					->from('PatientMaster p')
					->where("p.isdelete =0")
					->leftJoin("p.EpidIpidMapping e")
					->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);
				$f_patients_res = $f_patient->fetchArray();

				$f_patients_ipids[] = '9999999999999';
				foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
				{
					$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
				}
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('MedipumpsInvoicesNew')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$invoices_counting->andWhereIn('ipid', $f_patients_ipids);
			}

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();



			foreach($inv2count as $k_inv2count => $v_inv2count)
			{

				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
// 				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($v_inv2count['completed_date']))) && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["overdue"][] = '1';
				}

				if($v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["all"][] = '1';
				}

				if($v_inv2count['isarchived'] == "1")
				{
					$status_count_invoices["archived"][] = '1';
				}
			}
			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('MedipumpsInvoicesNew')
				->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$del_invoices_counting->andWhereIn('ipid', $f_patients_ipids);
			}
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}

			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('MedipumpsInvoicesNew')
				->where("client='" . $clientid . "'" . $filters['hiinvoice']);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$invoices_nl->andWhereIn('ipid', $f_patients_ipids);
			}
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";


			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->leftJoin("p.EpidIpidMapping e")
				->where('e.clientid = ' . $clientid);
			if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
			{
				$patient->andWhereIn('p.ipid', $f_patients_ipids);
			}
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
				    //MedipumpsInvoicesNew
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [NEW]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('MedipumpsInvoicesNew')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}


			//count tabs contents
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $bw_mp_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);

			$this->view->storned_invoces = MedipumpsInvoices::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		//used when generating invoices by link (one at a time normal || storno)
		public function bwmedipumpsinvoiceAction()
		{
	 
			if(!empty($_REQUEST['patient']))
			{
				$ipid = Pms_CommonData::get_ipid_from_epid($_REQUEST['patient'], $this->clientid);


				//patient days
				$conditions['client'] = $this->clientid;
				$conditions['ipids'] = array($ipid);
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');

				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

				//beware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);

				if($_REQUEST['sapvid'])
				{
					$selected_sapv_falls = array($ipid => $_REQUEST['sapvid']);

					//get patients sapvs last fall
					$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid), true);

					foreach($selected_sapv_falls as $k_ipid => $fall_id)
					{
						$patients_sapv[$k_ipid] = $fall_id;
						$patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
					}

					$params['nosapvperiod'][$ipid] = '0';
					$params['period'] = $patients_selected_periods;
				}
				else if(!empty($_REQUEST['list']))
				{
					//construct curent month period days
					$selected_month = $_REQUEST['list'];
					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}

					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
					$month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);

					array_walk($month_days_arr, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$months_details[$selected_month]['days'] = $month_days_arr;

					//get sapv periods in curent month period and make days
					if($months_details)
					{
//						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
						$sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);

						$patients_selected_periods = array();
						foreach($sapv_array as $k_sapv => $v_sapv)
						{
							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}

							if(empty($patients_selected_periods))
							{
								$patients_selected_periods = array();
							}

							$patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
							array_walk($patients_selected_periods, function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$patients_selected_periods = array_values(array_unique($patients_selected_periods));
							$existing_sapv_days = $patients_selected_periods;
						}

						$patients_selected_periods = array_values(array_unique($patients_selected_periods));
						$sapv_days_in_period = array_intersect($month_days_arr, $patients_selected_periods);
					}

					$params['nosapvperiod'][$ipid] = '1';
					$params['selected_period'][$ipid] = $months_details[$selected_month];
					$params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
					$params['existing_sapv_days'] = array_values($patients_selected_periods);
					$params['period'][$ipid] = $months_details[$selected_month];
				}
				else if(!empty($_REQUEST['admission']))
				{
					$selected_period = $_REQUEST['admission'];
					$admission_start = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['start'];
					$admission_end = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['end'];

					$period_days_arr = PatientMaster::getDaysInBetween($admission_start, $admission_end);

					array_walk($period_days_arr, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$period_details[$selected_period]['start'] = $admission_start;
					$period_details[$selected_period]['end'] = $admission_end;
					$period_details[$selected_period]['days'] = $period_days_arr;

					//get sapv periods in curent month period and make days
					if($period_details[$selected_period])
					{
//						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_period]['start'], $months_details[$selected_period]['end']);
						$sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $period_details[$selected_period]['start'], $period_details[$selected_period]['end']);

						$patients_selected_periods = array();
						foreach($sapv_array as $k_sapv => $v_sapv)
						{
							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}

							if(empty($patients_selected_periods))
							{
								$patients_selected_periods = array();
							}

							$patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
							array_walk($patients_selected_periods, function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$patients_selected_periods = array_values(array_unique($patients_selected_periods));
							$existing_sapv_days = $patients_selected_periods;
						}

						$patients_selected_periods = array_values(array_unique($patients_selected_periods));
						$sapv_days_in_period = array_intersect($period_days_arr, $patients_selected_periods);
					}

					$params['nosapvperiod'][$ipid] = '1';
					$params['admissionid'][$ipid] = $selected_period;
					$params['selected_period'][$ipid] = $period_details[$selected_period];
					$params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
					$params['existing_sapv_days'] = array_values($patients_selected_periods);
					$params['period'][$ipid] = $period_details[$selected_period];
				}

				$all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipid);

				foreach($all_patients_sapvs as $k_sapv => $v_sapv)
				{
					if(empty($sapv_days_overall))
					{
						$sapv_days_overall = array();
					}


					$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

					if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
					{
						$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
					}
					else
					{
						$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
					}


					$sapv_days_overall = array_merge($sapv_days_overall, PatientMaster::getDaysInBetween($start, $end));
					array_walk($sapv_days_overall, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$sapv_days_overall = array_values(array_unique($sapv_days_overall));
				}
				$params['sapv_overall'][$ipid] = array_values($sapv_days_overall);
				$params['ipids'] = array($ipid);
				$params['patient_sapvs'] = $patients_sapv[$ipid];
				$params['patient_days'] = $patient_days;
				$params['get_pdf'] = '1';
				$params['only_pdf'] = (int) $_REQUEST['only_invoice'];
				$params['stornopdf'] = (int) $_REQUEST['stornopdf'];
				$params['stornoid'] = (int) $_REQUEST['stornoid'];
				$params['invoices'] = array((int) $_REQUEST['iid']);

				$this->bwmedipumpsinvoice($params);
			}
		}

		public function editmedipumpsinvoiceAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$medipumps_invoices = new MedipumpsInvoicesNew();
			$medipumps_invoices_items = new MedipumpsInvoiceItemsNew();
			$medipumps_invoices_form = new Application_Form_MedipumpsInvoicesNew();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$this->view->hide_patient_tab = '1';

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $medipumps_invoices->getMedipumpsInvoice($invoice_id);
			}

			if(in_array($invoice_data['id'], MedipumpsInvoicesNew::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $medipumps_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{
					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}
				//save here
				
				if(strlen($_POST['invoice']['address']) > 0 ){
				    if(strpos($_POST['invoice']['address'],"style"))
				    {
				        $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
				    }
				    $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
				}
				
				$edit_invoice = $medipumps_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);

				if(empty($_POST['pdf']))
				{
					if($edit_invoice)
					{
					    //ISPC-2312 Ancuta 07.12.2020
					    if($_REQUEST['redirect2new'] == '1'){
					        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bw_medipumps_invoice&flg=edtsuc');
					        exit();
					    }
					    //-- 
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edtsuc');
					}
					else
					{
					    //ISPC-2312 Ancuta 07.12.2020
					    if($_REQUEST['redirect2new'] == '1'){
					        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bw_medipumps_invoice&flg=edterr');
					        exit();
					    }
					    //-- 
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edterr');
					}
				}
				else if(!empty($_REQUEST['pdf']))
				{
//					if($invoice_data['status'] == '1')
//					{
//						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
//					}
//
					if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
					}
					else if(empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
					}

					foreach($invoice_data['items'] as $k_item => $v_custom)
					{
						$new_invoice_items[] = array(
							'shortcut' => $v_custom['shortcut'],
							'name' => $v_custom['name'],
							'qty' => $v_custom['qty'],
							'price' => $v_custom['price'],
							'total' => $v_custom['total'],
						);
					}

					$params['ipids'] = array($invoice_data['ipid']);

					//patient days
					$conditions['client'] = $this->clientid;
					$conditions['ipids'] = array($invoice_data['ipid']);
					$conditions['periods'][0]['start'] = '2009-01-01';
					$conditions['periods'][0]['end'] = date('Y-m-d');

					$sql = 'e.epid, p.ipid, e.ipid,';
					$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
					$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
					$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
					$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
					$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
					$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

					//be aware of date d.m.Y format here
					$patient_days = Pms_CommonData::patients_days($conditions, $sql);

					$params['invoices'] = array($invoice_data['id']);
					$params['patient_days'] = $patient_days;
					$params['get_pdf'] = '1';
					$params['only_pdf'] = 1;
					$_REQUEST['type'] = 'pdf';

					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}
//

					$params['custom_data']['address'] = $_POST['invoice']['address'];
					$params['custom_data']['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
					$params['custom_data']['items'] = $new_invoice_items;

					$this->bwmedipumpsinvoice($params);
					exit;
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{

				if(!$invoice_data || empty($invoice_data))
				{
					$this->_redirect(APP_BASE . 'invoice/medipumpsinvoices');
				}

				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];

				$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);

				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}
					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}


				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}

				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}
//			print_r($invoice_data);exit;
				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;

				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is preset
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		public function bwmplistpaymentsAction()
		{

			$this->_helper->viewRenderer->setNoRender();
			$clientid = $this->clientid;
			$shinvoices = new MedipumpsInvoicesNew();
			$shpayments = new MedipumpsInvoicePaymentsNew();
			$shinvoice_form = new Application_Form_MedipumpsInvoicesNew();

			$user = new User();


			//get allowed client invoices
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
			$this->view->allowed_invoice = $client_allowed_invoice[0];


			if($_REQUEST['invoiceid'])
			{
				$payments = $shpayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $shpayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $shpayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $shpayments->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $shinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $shpayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoicenew/bw_mp_listpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		//used when generating invoices by link (one at a time normal || storno)
		public function bwsapvinvoiceAction()
		{
			if(!empty($_REQUEST['patient']))
			{
				$ipid = Pms_CommonData::get_ipid_from_epid($_REQUEST['patient'], $this->clientid);


				//patient days
				$conditions['client'] = $this->clientid;
				$conditions['ipids'] = array($ipid);
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');

				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

				//beware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);

				if($_REQUEST['sapvid'])
				{
					$selected_sapv_falls = array($ipid => $_REQUEST['sapvid']);

					//get patients sapvs last fall
					$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid), true);

					foreach($selected_sapv_falls as $k_ipid => $fall_id)
					{
						$patients_sapv[$k_ipid] = $fall_id;
						$patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
					}

					$params['nosapvperiod'][$ipid] = '0';
					$params['period'] = $patients_selected_periods;
				}
				else if(!empty($_REQUEST['list']))
				{
					//construct curent month period days
					$selected_month = $_REQUEST['list'];
					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}

					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
					$month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);

					array_walk($month_days_arr, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$months_details[$selected_month]['days'] = $month_days_arr;

					//get sapv periods in curent month period and make days
					if($months_details)
					{
//						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
						$sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);

						$patients_selected_periods = array();
						foreach($sapv_array as $k_sapv => $v_sapv)
						{
							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}

							if(empty($patients_selected_periods))
							{
								$patients_selected_periods = array();
							}

							$patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
							array_walk($patients_selected_periods, function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$patients_selected_periods = array_values(array_unique($patients_selected_periods));
							$existing_sapv_days = $patients_selected_periods;
						}

						$patients_selected_periods = array_values(array_unique($patients_selected_periods));
						$sapv_days_in_period = array_intersect($month_days_arr, $patients_selected_periods);
					}

					$params['nosapvperiod'][$ipid] = '1';
					$params['selected_period'][$ipid] = $months_details[$selected_month];
					$params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
					$params['existing_sapv_days'] = array_values($patients_selected_periods);
					$params['period'][$ipid] = $months_details[$selected_month];
				}
				else if(!empty($_REQUEST['admission']))
				{
					$selected_period = $_REQUEST['admission'];
					$admission_start = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['start'];
					$admission_end = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['end'];

					$period_days_arr = PatientMaster::getDaysInBetween($admission_start, $admission_end);

					array_walk($period_days_arr, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$period_details[$selected_period]['start'] = $admission_start;
					$period_details[$selected_period]['end'] = $admission_end;
					$period_details[$selected_period]['days'] = $period_days_arr;

					//get sapv periods in curent month period and make days
					if($period_details[$selected_period])
					{
//						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_period]['start'], $months_details[$selected_period]['end']);
						$sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $period_details[$selected_period]['start'], $period_details[$selected_period]['end']);

						$patients_selected_periods = array();
						foreach($sapv_array as $k_sapv => $v_sapv)
						{
							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}

							if(empty($patients_selected_periods))
							{
								$patients_selected_periods = array();
							}

							$patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
							array_walk($patients_selected_periods, function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$patients_selected_periods = array_values(array_unique($patients_selected_periods));
							$existing_sapv_days = $patients_selected_periods;
						}

						$patients_selected_periods = array_values(array_unique($patients_selected_periods));
						$sapv_days_in_period = array_intersect($period_days_arr, $patients_selected_periods);
					}

					$params['nosapvperiod'][$ipid] = '1';
					$params['admissionid'][$ipid] = $selected_period;
					$params['selected_period'][$ipid] = $period_details[$selected_period];
					$params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
					$params['existing_sapv_days'] = array_values($patients_selected_periods);
					$params['period'][$ipid] = $period_details[$selected_period];
				}

				$all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipid);

				foreach($all_patients_sapvs as $k_sapv => $v_sapv)
				{
					if(empty($sapv_days_overall))
					{
						$sapv_days_overall = array();
					}


					$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

					if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
					{
						$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
					}
					else
					{
						$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
					}


					$sapv_days_overall = array_merge($sapv_days_overall, PatientMaster::getDaysInBetween($start, $end));
					array_walk($sapv_days_overall, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$sapv_days_overall = array_values(array_unique($sapv_days_overall));
				}
				$params['sapv_overall'][$ipid] = array_values($sapv_days_overall);
				$params['ipids'] = array($ipid);
				$params['patient_sapvs'] = $patients_sapv[$ipid];
				$params['patient_days'] = $patient_days;
				$params['get_pdf'] = '1';
				$params['only_pdf'] = (int) $_REQUEST['only_invoice'];
				$params['stornopdf'] = (int) $_REQUEST['stornopdf'];
				$params['stornoid'] = (int) $_REQUEST['stornoid'];
				if(!empty($_REQUEST['iid']))
				{
					$params['invoices'] = array((int) $_REQUEST['iid']);
				}

				$this->bwsapvsinvoice($params);
			}
		}

		// changed  from private to public ISPC-2609 Ancuta 31.08.2020
		public function bwsapvsinvoice($params)
		{
		    if(isset($params['print_job']) && $params['print_job'] == '1'){
		        $this->_helper->layout->setLayout('layout_ajax');
		        $this->_helper->viewRenderer->setNoRender();
		    }
		    
		    
			//spl_autoload_register(array('AutoLoader', 'autoloadPdf')); // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
			$client = new Client();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$bw_invoices = new BwInvoicesNew();
			$bw_invoices_form = new Application_Form_BwInvoicesNew();
			$pat_diagnosis = new PatientDiagnosis();
			//this is the timestamp join folder name!
			$this->view->folder_stamp = time();

			$clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] : $this->clientid;
			$userid = $this->userid;

			$letter_boxes_details = $boxes->client_letter_boxes($clientid);

			if(!$clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}


			/*
			 * TODO-1544
			 * ancuta
			 * 08.05.2018
			 */
			$modules = new Modules();
			if($modules->checkModulePrivileges("90", $clientid))
			{
			    $debtor_number_module = "1";
			}
			else
			{
			    $debtor_number_module = "0";
			}
			//TODO-2665 Ancuta 19.11.2019
			$ppun = new PpunIpid();
			$ppun_module = $modules->checkModulePrivileges("88", $clientid ) ? "1" : "0" ;
            // --
			
			//client_details
			$users = new User();
			$client_user_array = $users->getUserByClientid($clientid,0,true,false);
			
			foreach($client_user_array as $k=>$cu)
			{
			    $user_array[$cu['id']] = $cu;
			    if(strlen($cu['shortname']) >  0){
			        $user_array[$cu['id']]['initials'] = $cu['shortname'];
			    }
			    else
			    {
			        $user_array[$cu['id']]['initials'] = mb_substr($cu['first_name'], 0, 1, "UTF-8") . "" . mb_substr($cu['last_name'], 0, 1, "UTF-8");
			         
			    }
			}
				
			
			//client_details
			$client_details = $client->getClientDataByid($clientid);
			$invoices_ids = $params['invoices'];
			//new invoice required data START

			if(!empty($params['invoices']))
			{
				//load invoices data
				$invoices_data = $bw_invoices->get_invoices($params['invoices'],true);//TODO-2429 Ancuta 17.07.2019

				$inv_names = array();// ISPC-2472  Ancuta 12.11.2019::create batch name
				foreach($invoices_data['invoices_data'] as $v_invoice)
				{
					$ipids[] = $v_invoice['ipid'];
					
				    $inv_names[] = $v_invoice['prefix'].$v_invoice['invoice_number'];// ISPC-2472  Ancuta 12.11.2019::create batch name
					
					$current_period[$v_invoice['ipid']]['start'] = date('Y-m-d', strtotime($v_invoice['invoice_start']));
					$current_period[$v_invoice['ipid']]['end'] = date('Y-m-d', strtotime($v_invoice['invoice_end']));

					if(empty($current_period[$v_invoice['ipid']]['days']))
					{
						$current_period[$v_invoice['ipid']]['days'] = array();
					}

					$days_arr = $patientmaster->getDaysInBetween($v_invoice['invoice_start'], $v_invoice['invoice_end']);
					$current_period[$v_invoice['ipid']]['days'] = array_merge($current_period[$v_invoice['ipid']]['days'], $days_arr);

					array_walk_recursive($current_period[$v_invoice['ipid']], function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});

					$days_arr = array();
				}

				//patient days
				$conditions['client'] = $clientid;
				$conditions['ipids'] = $ipids;
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');

				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

				//be aware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);
				$params['patient_days'] = $patient_days;
				$params['period'] = $current_period;
			}
			else
			{
				$ipids = $params['ipids'];
				$current_period = $params['period'];
				$patient_days = $params['patient_days'];
			}

			$ipids = array_values(array_unique($ipids));
			//set current period to work with
			//shortcuts
			$shortcuts = Pms_CommonData::get_prices_shortcuts();

			//patient HEALTH INSURANCE START
			$healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);

			//multiple hi subdivisions && hi subdivisions permissions
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);

			if($divisions)
			{
				foreach($healthinsu_multi_array as $k_hi => $v_hi)
				{
					$hi_companyids[] = $v_hi['companyid'];
				}

				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($hi_companyids);
			}

			$alias['home_visit'] = "Hausbesuch";
			$alias['beratung'] = "Beratung";
			$alias['koordination'] = "Koordination";
			
			//patient HEALTH INSURANCE END
			$patient_debitor_details = array();// TODO-2665
			foreach($ipids as $k_ipid => $v_ipid)
			{
				$pat_details = $params['patient_days'][$v_ipid]['details'];

				$master_data_all['client']['id'] = $clientid;
				$master_data_all['ipids'][] = $v_ipid;
				$master_data_all['patients'][$v_ipid]['details'] = $params['patient_days'][$v_ipid]['details'];
				$master_data_all['patients'][$v_ipid]['invoice_data']['period'] = $params['period'][$v_ipid];
				$master_data_all['patients'][$v_ipid]['invoice_data']['sapv'] = $params['period'][$v_ipid];
				$master_data_all['patients'][$v_ipid]['invoice_data']['admissionid'] = $params['admissionid'][$v_ipid];

				$patient_address[$v_ipid]['address'] = "";
				if($healthinsu_multi_array[$v_ipid]['privatepatient'] == "1" && strlen($_REQUEST['iid']) == '0')
				{
					$patient_address[$v_ipid]['address'] = '&nbsp;' . htmlspecialchars($pat_details['last_name']) . ' ' . htmlspecialchars($pat_details['first_name']) . '<br />';
					$patient_address[$v_ipid]['address'] .= '&nbsp;' . htmlspecialchars($pat_details['street1']) . '<br />';
					$patient_address[$v_ipid]['address'] .= '&nbsp;' . htmlspecialchars($pat_details['zip']) . ' ' . '&nbsp;' . htmlspecialchars($pat_details['city']);
				}

				$hi_name[$v_ipid]['hi_name'] = "";
				$hi_address[$v_ipid]['address'] = "";
				$sapv_address[$v_ipid] = "";
				if(!empty($healthinsu_subdiv_arr[$v_ipid]['3']['name']))
				{
					//get new SAPV hi address
					$hi_name[$v_ipid]['hi_name'] = '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['name'];
					$hi_address[$v_ipid]['address'] = '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['name'] . '<br />';
					if($healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider'])
					{
						$hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider'] . '<br />';
					}
					$hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['street1'] . '<br />';
					$hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city'];
					
					$sapv_address[$v_ipid] .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['street1'] . '<br />';
					$sapv_address[$v_ipid] .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city'];
				}
				else
				{
					//get old hi_address
					$hi_name[$v_ipid]['hi_name'] = '&nbsp;' . $healthinsu_multi_array[$v_ipid]['name'];
					$hi_address[$v_ipid]['address'] = '&nbsp;' . $healthinsu_multi_array[$v_ipid]['company_name'] . '<br />';
					$hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_insurance_provider'] . '<br />';
					$hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_street'] . '<br />';
					$hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_zip'] . ' ' . $healthinsu_multi_array[$v_ipid]['ins_city'];
					
					$sapv_address[$v_ipid] .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_street'] . '<br />';
					$sapv_address[$v_ipid] .= '&nbsp;' . '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_zip'] . ' ' . $healthinsu_multi_array[$v_ipid]['ins_city'];
				}
				
				// Kv header for the second page
				$kv_header[$v_ipid]['insurance_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
				
				if(strlen($healthinsu_multi_array[$v_ipid]['kvk_no']) > 0 )
				{
				    $kv_header[$v_ipid]['kvnumber'] = $healthinsu_multi_array[$v_ipid]['kvk_no'];
				} 
				else
				{
				    $kv_header[$v_ipid]['kvnumber'] = $healthinsu_multi_array[$v_ipid]['company']['kvnumber'];
				}
				
				$kv_header[$v_ipid]['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
				$kv_header[$v_ipid]['insurance_status'] = $healthinsu_multi_array[$v_ipid]['insurance_status'];
				$master_user_details = new User();
				$users_details = $master_user_details->getUserDetails($userid);
				$kv_header[$v_ipid]['betriebsstatten_nr'] = $users_details[0]['betriebsstattennummer'];
				$kv_header[$v_ipid]['arzt_nr'] = $users_details[0]['LANR'];
				$kv_header[$v_ipid]['patient_name_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['last_name']) . ", " . htmlspecialchars($params['patient_days'][$v_ipid]['details']['first_name']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);
				$kv_header[$v_ipid]['patient_birthdate'] =date("d.m.Y",strtotime($params['patient_days'][$v_ipid]['details']['birthd']));
				$kv_header[$v_ipid]['patient_name'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['last_name']) . ", " . htmlspecialchars($params['patient_days'][$v_ipid]['details']['first_name']);
				$kv_header[$v_ipid]['patient_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);
				$kv_header[$v_ipid]['patient_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);

				
				
				$master_data_all['patients'][$v_ipid]['invoice_data']['hi_name'] = $hi_name[$v_ipid]['hi_name'];
				$master_data_all['patients'][$v_ipid]['invoice_data']['hi_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
				$master_data_all['patients'][$v_ipid]['invoice_data']['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
				$master_data_all['patients'][$v_ipid]['invoice_data']['privatepatient'] = $healthinsu_multi_array[$v_ipid]['privatepatient'];

				$master_data_all['patients'][$v_ipid]['invoice_data']['address'] = $hi_address[$v_ipid]['address'];
				$master_data_all['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = $sapv_address[$v_ipid];
				
				if(strlen($patient_address[$v_ipid]['address']) > 0)
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['patient_address'] = $patient_address[$v_ipid]['address'];
				} else{
					$master_data_all['patients'][$v_ipid]['invoice_data']['patient_address'] = "";
				}

				$master_data_all['patients'][$v_ipid]['invoice_data']['health_insurance_ik'] = $healthinsu_multi_array[$v_ipid]['institutskennzeichen'];
				$master_data_all['patients'][$v_ipid]['invoice_data']['health_insurance_kassenr'] = $healthinsu_multi_array[$v_ipid]['kvk_no'];

				$master_data_all['patients'][$v_ipid]['invoice_data']['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];

				if($params['period'][$v_ipid]['approved_date'] != '0000-00-00 00:00:00' && strlen($params['period'][$v_ipid]['approved_date']) > 0 && date('Y-m-d', strtotime($params['period'][$v_ipid]['approved_date'])) != '1970-01-01')
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_date'] = date('d.m.Y', strtotime($params['period'][$v_ipid]['approved_date']));
				}
				else
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_date'] = ' - ';
				}

				if(strlen($params['period'][$v_ipid]['approved_number']) > 0)
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_nr'] = $params['period'][$v_ipid]['approved_number'];
				}
				else
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_nr'] = ' - ';
				}
				/*
				 * TODO-1544
				 * debtor number
				 */
				
				if($debtor_number_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "0")
				{
				    //get debtor number from patient healthinsurance
				    if(strlen($healthinsu_multi_array[$v_ipid]['ins_debtor_number']) > '0')
				    {
				        $master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number'] = $healthinsu_multi_array[$v_ipid]['ins_debtor_number'];
				    }
				    else
				    {
				        $master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number'] = $healthinsu_multi_array[$v_ipid]['company']['debtor_number'];
				    }
				}
				

				// TODO-2665 Ancuta 19.11.2019
				if($debtor_number_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "0")
				{
				    //get debtor number from patient healthinsurance
				    if(strlen($healthinsu_multi_array[$v_ipid]['ins_debtor_number']) > '0')
				    {
				        $patient_debitor_details[$v_ipid]['debitor_number'] = $healthinsu_multi_array[$v_ipid]['ins_debtor_number'];
				    }
				    else
				    {
				        $patient_debitor_details[$v_ipid]['debitor_number'] = $healthinsu_multi_array[$v_ipid]['company']['debtor_number'];
				    }
				}
				if($ppun_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "1")
				{
				    //get ppun (private patient unique number)
				    $ppun_number = $ppun->check_patient_ppun($v_ipid, $clientid);
				    if($ppun_number)
				    {
				        $master_data_all['patients'][$v_ipid]['invoice_data']['ppun'] = $ppun_number['ppun'];
				        $patient_debitor_details[$v_ipid]['ppun']= $ppun_number['ppun'];
				        $patient_debitor_details[$v_ipid]['debitor_number']= $ppun_number['ppun'];
				    }
				}
								
				//--
				/// diagnosisi data

				//get patient main diagnosis
				$patient_main_diag[$v_ipid] = $pat_diagnosis->get_main_diagnosis($v_ipid, $clientid);
				$patient_data_diagnos[$v_ipid]['main_diagnosis'] = implode(', ', $patient_main_diag[$v_ipid]['icd']);
			}
			 
			$all_patients_periods = array();
			$patient_days2locationtypes = array();
			$hospital_days_cs_dmY = array();
			$hospiz_days_cs_dmY = array();
			
			foreach($patient_days as $k_ipid => $patient_data)
			{
				//all patients periods
				$all_patients_periods = array_merge_recursive($all_patients_periods, $patient_data['active_periods']);

				//used in flatrate
				if(empty($patient_periods[$k_ipid]))
				{
					$patient_periods[$k_ipid] = array();
				}

				array_walk_recursive($patient_data['active_periods'], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$patient_periods[$k_ipid] = array_merge($patient_periods[$k_ipid], $patient_data['active_periods']);

				//hospital days cs
				if(!empty($patient_data['hospital']['real_days_cs']))
				{
					$hospital_days_cs_dmY[$k_ipid] = $patient_data['hospital']['real_days_cs'];
					$hospital_days_cs[$k_ipid] = $patient_data['hospital']['real_days_cs'];
					array_walk($hospital_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//hospiz days cs
				if(!empty($patient_data['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs_dmY[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
					$hospiz_days_cs[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
					array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//real active days
				if(!empty($patient_data['real_active_days']))
				{
					$active_days_in_period_cs[$k_ipid] = $patient_data['real_active_days'];
					array_walk($active_days_in_period_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//treatment days
				if(!empty($patient_data['treatment_days']))
				{
					$treatment_days_cs[$k_ipid] = $patient_data['treatment_days'];
					array_walk($treatment_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//active days
				if(!empty($patient_data['active_days']))
				{
					$active_days[$k_ipid] = $patient_data['active_days'];
					array_walk($active_days[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				if(empty($hospital_days_cs[$k_ipid]))
				{
					$hospital_days_cs[$k_ipid] = array();
				}

				if(empty($hospiz_days_cs[$k_ipid]))
				{
					$hospiz_days_cs[$k_ipid] = array();
				}

				$hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);

				foreach($patient_data['locations'] as $pat_location_row_id => $pat_location_data)
				{
					foreach($pat_location_data['days'] as $kl=>$lday)
					{
						if(in_array($lday,$patient_data['real_active_days']))
						{
							
							if( empty($pat_location_data['type'])){
								$pat_location_data['type'] = 0 ;
							}
							
							//ISPC-2100 Carmen 28.10.2020
							if($pat_location_data['type'] == "4" )
							{
								$patient_days2locationtypes[$k_ipid][$lday][] = "3";
							}
							elseif($pat_location_data['type'] == "6" )
							{
							    $patient_days2locationtypes[$k_ipid][$lday][] = "5";
							}
							else
							{
								$patient_days2locationtypes[$k_ipid][$lday][] = $pat_location_data['type'];
							} 
							//--
						}
					}
				}
			}
			
			foreach( $patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$del_val = "1";
					if ( ! in_array($loc_day,$hospital_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
						unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
					}
					/* 
					$del_val = "2";
					if ( ! in_array($loc_day,$hospiz_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
						unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
					} 
					*/
				}
			}
			foreach($patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$patient_days2locationtypes[$pipid][$loc_day] = end($day_loc_types);
				}
			}
 
			$all_patients_periods = array_values($all_patients_periods);
			
			foreach($all_patients_periods as $k_period => $v_period)
			{
				if(empty($months))
				{
					$months = array();
				}

				$period_months = Pms_CommonData::get_period_months($v_period['start'], $v_period['end'], 'Y-m');
				$months = array_merge($months, $period_months);
			}
			$months = array_values(array_unique($months));

			foreach($months as $k_m => $v_m)
			{
				$months_unsorted[strtotime($v_m)] = $v_m;
			}
			ksort($months_unsorted);
			$months = array_values(array_unique($months_unsorted));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
				$month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
			}

			foreach($ipids as $k_ipid => $v_ipid)
			{
				$days_in_period[$v_ipid] = $patientmaster->getDaysInBetween($current_period[$v_ipid]['start'], $current_period[$v_ipid]['end']);

				$active_days_in_period[$v_ipid] = array_intersect($days_in_period[$v_ipid], $active_days[$v_ipid]);

				if($months_details[$months[0]]['start'] != date('Y-m-d', strtotime($current_period[$v_ipid]['start'])))
				{
					//used in overall performance record data start till the end of previous month (curent month-01 -1 day)
					$overall_performance_period[$v_ipid]['start'] = $months_details[$months[0]]['start'];
					$overall_performance_period[$v_ipid]['c_month_end'] = date('Y-m-d', strtotime('-1 day', strtotime($current_period[$v_ipid]['start'])));
					$overall_performance_period[$v_ipid]['end'] = date('Y-m-d', strtotime($current_period[$v_ipid]['end']));
				}
				else
				{
					//no overall period (no previous months) -- get curent month still
					$overall_performance_period[$v_ipid] = $current_period[$v_ipid];
				}


				foreach($patient_periods[$v_ipid] as $k_period => $v_period)
				{
					if(empty($patients_periods_days[$v_ipid]))
					{
						$patients_periods_days[$v_ipid] = array();
					}

					$patients_periods_days[$v_ipid] = array_merge($patients_periods_days[$v_ipid], $patientmaster->getDaysInBetween($v_period['start'], $v_period['end']));
				}

				$days_in_period_overall_performance[$v_ipid] = $patientmaster->getDaysInBetween($overall_performance_period[$v_ipid]['start'], $overall_performance_period[$v_ipid]['end']);
				$days_in_period_overall_performance_cmonth[$v_ipid] = $patientmaster->getDaysInBetween($overall_performance_period[$v_ipid]['start'], $overall_performance_period[$v_ipid]['c_month_end']);
			}//end foreach ipids
			//(ipid-day-verordnet_statuses)
			$sapv_days_cs = $this->get_period_sapvs($ipids, $current_period, $hospital_hospiz_days_cs);
			
			$sapv_details = $this->get_sapvs_approved_details($ipids, $current_period);

			//sapv till last day of prev month
			$sapv_days_overall = $this->get_period_sapvs($ipids, $overall_performance_period, $hospital_hospiz_days_cs);
			

			//get pflegestuffe in current period
			$pflege_arr = $pflege->get_multiple_patients_mt_period($ipids, $current_period);

			foreach($pflege_arr as $k_pflege => $v_pflege)
			{
				$patients_pflege[$v_pflege['ipid']] = $v_pflege['stage'];
			}

			//get all sets form types
			$set_ids = ContactForms::get_all_client_form_types($clientid);
			$set_one_ids = $set_ids['one'];
			$set_two_ids = $set_ids['two'];
			$set_three_ids = $set_ids['three'];
			$set_fourth_ids = $set_ids['fourth'];

			//get contact forms in current period and in overall period
			$contact_forms_days = $this->get_patients_period_cf($ipids, $current_period);
			$contact_forms_overall_days = $this->get_patients_period_cf($ipids, $overall_performance_period);

			//get patients discharge dates
			$pat_dis = new PatientDischarge();
			$patients_discharge = $pat_dis->get_patients_discharge($ipids);

			foreach($patients_discharge as $k_dis => $v_dis)
			{
				$patients_discharge_date[$v_dis['ipid']] = $v_dis['discharge_date'];
			}

			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($sapv_days_cs[$v_ipid] as $k_s_days => $v_s_days)
				{
					if($k_s_days != 'relevant_sapvs_days')
					{
						$sapv_days_inperiod_cs[$v_ipid][] = $k_s_days;
					}
					else
					{
						$relevant_sapvs_days_cs[$v_ipid] = $v_s_days;
					}
				}
				asort($sapv_days_inperiod_cs);

				if(count($relevant_sapvs_days_cs[$v_ipid]['start']) > 0)
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['first_sapv_day'] = date('d.m.Y', strtotime($relevant_sapvs_days_cs[$v_ipid]['start'][0]));
					$end_sapv_last = end($relevant_sapvs_days_cs[$v_ipid]['end']);
					$master_data_all['patients'][$v_ipid]['invoice_data']['last_sapv_day'] = date('d.m.Y', strtotime($end_sapv_last));
				}
				else
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['first_sapv_day'] = '0000-00-00 00:00:00';
					$master_data_all['patients'][$v_ipid]['invoice_data']['last_sapv_day'] = '0000-00-00 00:00:00';
				}

				$contact_forms_ids[] = '999999999';
				foreach($contact_forms_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							if(strtotime(date('Y-m-d H:i:s', strtotime($v_cf['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge[] = $v_cf['id'];
								unset($contact_forms_ids_overall[$k_cf_day][$k_cf]);
							}
							$contact_forms_ids[] = $v_cf['id'];
							$all_contact_forms[$v_cf['id']] = $v_cf;
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);

				foreach($contact_forms_overall_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cfo => $v_cfo)
					{
						if(is_numeric($k_cfo))
						{
							if(strtotime(date('Y-m-d H:i:s', strtotime($v_cfo['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge_overall[] = $v_cfo['id'];
								unset($contact_forms_ids_overall[$k_cf_day][$k_cfo]);
							}
							$contact_forms_ids_overall[] = $v_cfo['id'];
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);
			}

			$block_classification = new FormBlockClassification();
			$classification_data = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids);
			$classification_data_overall = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids_overall);

			foreach($all_contact_forms as $k_cf => $v_cf)
			{
				$k_cf_day = date('Y-m-d', strtotime($v_cf['billable_date']));

				if(array_key_exists($v_cf['id'], $classification_data) && in_array($k_cf_day, $active_days_in_period_cs[$v_cf['ipid']]))
				{
					if((in_array($v_cf['form_type'], $set_ids['fourth']) && $classification_data[$v_cf['id']]['intern'] == '0') || !in_array($v_cf['form_type'], $set_ids['fourth']))
					{
						$contact_forms_days_ids[$v_cf['ipid']][$k_cf_day][] = $v_cf['id'];
						$contact_forms_days_ids2details[$v_cf['ipid']][$v_cf['id']] = $v_cf;
						$contact_forms2form_types[$v_cf['ipid']][$v_cf['id']][] = $v_cf['form_type'];
					}
				}

				if(!array_key_exists($v_cf['id'], $classification_data))
				{
					unset($contact_forms_ids[array_search($v_cf['id'], $contact_forms_ids)]);
				}
			}

			$contact_forms_ids = array_values(array_unique($contact_forms_ids));

			//get patients courses
			$course_days = $this->get_patients_period_course($ipids, $patients_discharge_date, $overall_performance_period,true);

			//get real active patient days (active, with sapv and no hospital/hospiz)
			$real_active_days_cs = $this->patients_real_active_days($ipids, $active_days, $hospital_hospiz_days_cs, $sapv_days_overall);

			//get no sapv days
			$days_nosapv_cs = $this->nosapv_days($active_days, $hospital_hospiz_days_cs, $sapv_days_cs);

			//unset ipids which have no contact form and no course in selected period -- canceled..invoice must be generated
			//--
			//get patient fall periods to be used in flatrate
			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($patient_days[$v_ipid]['active_periods'] as $k_period => $v_period)
				{
					$start_periods[$v_ipid][] = date('Y-m-d', strtotime($v_period['start']));
					$end_periods[$v_ipid][] = date('Y-m-d', strtotime($v_period['end']));
				}
			}

			//get check for flatrate case and return "7 days flat rate" days
			$flatrate = $this->multi_patients_flatrate_days($ipids, $clientid, $start_periods, $end_periods, $current_period, $active_days, $patient_periods, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_days);

			//get performance shortcuts
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$this->view->shortcuts = $shortcuts['performance'];

			foreach($ipids as $kmp_ipid => $vmp_ipid)
			{
// 				$master_price_list[$vmp_ipid] = $p_list->get_period_price_list($current_period[$vmp_ipid]['start'], $current_period[$vmp_ipid]['end']);
				$master_price_list[$vmp_ipid] = $p_list->get_period_price_list_specific($current_period[$vmp_ipid]['start'], $current_period[$vmp_ipid]['end']);
			}
// 			dd($master_price_list); 

			// ==============================================
			// HACK - TODO-16 BWS10337  - 16.15.2015 - Start
			// ==============================================
			$remove_flatrate_ipids = array("61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"); // BWS10295
			$rfi_start["61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"] = "2015-11-24";
			$rfi_end["61bea7f8ac69a4cf8ef28f8e95a6fb29a6f0e447"] = "2015-11-30";
			
			foreach($ipids as $k_ipid => $ipid)
			{
    			if(in_array($ipid,$remove_flatrate_ipids) && Pms_CommonData::isintersected($rfi_start[$ipid], $rfi_end[$ipid], $current_period[$ipid]['start'], $current_period[$ipid]['end'])  ){
    			    $flatrate[$ipid] = array();
    			}
			}
			// ============================================
			// HACK - TODO-16 BWS10337  - 16.15.2015 - End
			// ============================================
			
			

			// CHANGE TO  LOCATION
			$overall_patient_shortcuts = $this->second_patients_performance_overall_saved($ipids, $clientid, $overall_performance_period, $active_days, $set_ids, $flatrate, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_overall, $course_days, $contact_forms_overall_days, $classification_data_overall,$patient_days2locationtypes);
			
			$flatrate_continued = $this->multi_patients_flatrate_days_continued_saved($ipids, $clientid, $start_periods, $end_periods, $current_period, $active_days, $patient_periods, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_days, $overall_patient_shortcuts);
			
			/* ########################################### */
			//get saved data ISPC-1927
			/* ########################################### */
			$bw_pr = new BwPerformanceRecord();
			$bw_data = $bw_pr->get_multiple_bw_performance_record_in_period($ipids, $patients_periods_days, $master_price_list, $patient_days2locationtypes);

			$master_data = array();
			foreach($ipids as $k_ipid => $ipid)
			{
				foreach($course_days[$ipid] as $k_course_date => $v_course_details)
				{
				    foreach($v_course_details as $k_couses => $v_courses)
				    {
				        $course[$ipid][$k_course_date][] = $v_courses['course_type'];
				    }

				    $k_course_date_alt = date('d.m.Y', strtotime($k_course_date));
					if(in_array($k_course_date, $active_days_in_period_cs[$ipid]) && !in_array($k_course_date_alt, $hospital_days_cs[$ipid]) && !in_array($k_course_date_alt, $hospiz_days_cs[$ipid]))
					{
						foreach($v_course_details as $k_couse => $v_course)
						{
							if($v_course['course_type'] == 'U' && in_array($k_course_date, $sapv_days_inperiod_cs[$ipid]) && in_array('1', $sapv_days_cs[$ipid][$k_course_date]))
							{
								$clasifizierung[$ipid][$k_course_date]['beratung'] += 1;
								$extra_details[$ipid][$k_course_date]['beratung'][] = $v_course;
							}
							else if($v_course['course_type'] == 'V' && in_array($k_course_date, $sapv_days_inperiod_cs[$ipid]) && in_array('2', $sapv_days_cs[$ipid][$k_course_date]))
							{
								$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
								$extra_details[$ipid][$k_course_date]['koordination'][] = $v_course;
							}
						}
					}
				}

				$overall_patient_shortcuts[$ipid]['shortcuts_res'] = array();
				foreach($overall_patient_shortcuts[$ipid]['shortcuts_dates'] as $k_short_overall => $v_short_overall)
				{
					if(in_array($k_short_overall, $days_in_period_overall_performance_cmonth[$ipid]))
					{
						$overall_patient_shortcuts[$ipid]['shortcuts_res'] = array_merge($overall_patient_shortcuts[$ipid]['shortcuts_res'], $v_short_overall);
					}
				}

				foreach($overall_patient_shortcuts[$ipid]['last_koord_dates'] as $kk_short_overall => $vk_short_overall)
				{
					if(in_array($kk_short_overall, $days_in_period_overall_performance_cmonth[$ipid]))
					{
						$overall_k_shorts[$ipid]['last_koord_dates'][$kk_short_overall] = $vk_short_overall;
					}
				}
				$overall_patient_shortcuts[$ipid]['last_koord_dates'] = $overall_k_shorts[$ipid]['last_koord_dates'];

				
				$day_location_type = "";
				foreach($days_in_period[$ipid] as $k_period_day => $v_period_day)
				{
					$day_shortcuts[$ipid] = array();
					
					$day_location_type = $patient_days2locationtypes[$ipid][date('d.m.Y',strtotime($v_period_day))];
					
					if(count($month_shortcuts[$ipid]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}

					if(empty($overall_data[$ipid][$v_period_day]))
					{
						$overall_data[$ipid][$v_period_day] = array();
					}

					$master_data[$ipid][$v_period_day] = array();

					if(count($overall_patient_shortcuts[$ipid]['last_koord_dates']) > '0')
					{
						$last_koord_date_overall[$ipid] = end($overall_patient_shortcuts[$ipid]['last_koord_dates']);
						$week_numbers_arr[$ipid][$last_koord_date_overall[$ipid]] = date('W', strtotime($last_koord_date_overall[$ipid]));
					}

					$last_koord_dates[$ipid] = $overall_patient_shortcuts[$ipid]['last_koord_dates'];

					//calculate set one form_type visits
					//first get flatrate exception and set shortcut
					$shortcut[$ipid] = '';
					$set_one_result[$ipid][$v_period_day] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

					if((in_array($v_period_day, $flatrate[$ipid]['pay_days']) || in_array($v_period_day, $flatrate_continued[$ipid]['pay_days'])) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$shortcut[$ipid] = '37b1';
						$month_shortcuts[$ipid][] = $shortcut[$ipid];
						$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = $shortcut[$ipid];
					}

					foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf_one)
					{
						if(!in_array($v_cf_one['id'], $exclude_after_discharge) && in_array($v_cf_one['form_type'], $set_one_ids))
						{
							if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && array_key_exists($v_period_day, $contact_forms_days[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]) && count($set_one_result[$ipid][$v_period_day]) != 0) //normal set conditions
							{
								//we have visits=> check if there are required visits for this action set
								if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]) || in_array('3', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$shortcut[$ipid] = '37b2';
								}
							}
						}
					}

					if(!empty($shortcut[$ipid]))
					{

						if($shortcut[$ipid] == '37b1' && (in_array($v_period_day, $flatrate[$ipid]['pay_days']) || in_array($v_period_day, $flatrate_continued[$ipid]['pay_days'])))
						{
							$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['pay_days'] = '1';
						}
						$day_shortcuts[$ipid][] = $shortcut[$ipid];
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['location_type'] = $day_location_type;
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price_list'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['list'];
						$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];

						$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
					}

					//sapv overwrite if formtype is set 4
					//calculate set two form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					$set_fourth_result[$ipid][$v_period_day] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);


					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						$set_two_result[$ipid][$v_period_day] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_two_result[$ipid][$v_period_day]) != 0 || in_array('U', $course[$ipid][$v_period_day])) && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								if(is_numeric($k_cf) && !in_array($v_cf['id'], $exclude_after_discharge))
								{
									$shortcut[$ipid] = '';
									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array('37b7', $month_shortcuts[$ipid]) && !in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array($v_cf['form_type'], $set_one_ids))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5')
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][] = '37b5';
											$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_two_ids) ))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];

											$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];

											$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
										}
										
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['location_type'] = $day_location_type;
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price_list'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['list'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								if($v_day_course['course_type'] == 'U')
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array('37b7', $month_shortcuts[$ipid]) && !in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts_res']))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5')
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][] = '37b5';
											$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(($shortcut[$ipid] == '37b6' || $shortcut[$ipid] == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2')
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['location_type'] = $day_location_type;
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price_list'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['list'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];

										$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
									}
								}
							}
						}
					}


					//calculate set three form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

						$set_three_result[$ipid][$v_period_day] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_three_result[$ipid][$v_period_day]) != 0 || in_array('V', $course[$ipid][$v_period_day])) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && !in_array($v_cform['id'], $exclude_after_discharge))
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array($v_cform['form_type'], $set_one_ids))
									{
										if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][] = '37b7';
											$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];

											$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];

											$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
										}
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['location_type'] = $day_location_type;
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price_list'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['list'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
								if($v_day_course['course_type'] == 'V')
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts_res']))
									{
										if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][] = '37b7';
											$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(($shortcut[$ipid] == '37b7' || $shortcut[$ipid] == '37b8'))
									{
										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['location_type'] = $day_location_type;
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price_list'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['list'];
											$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
											$last_koord_dates[$ipid][] = $v_period_day;

											$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['location_type'] = $day_location_type;
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price_list'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['list'];
											$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$last_koord_dates[$ipid][] = $v_period_day;

											$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
										}
									}
								}
							}
						}
					}

					if((count($set_fourth_result[$ipid][$v_period_day]) != 0 || count($set_one_result[$ipid][$v_period_day]) != 0) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						//setup each form sapv based on classification block selection
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['intern'] != '1')
							{
								if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									//switch between BE-KO if VV is not BE
									if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
							}
						}

						//calculate set 4 (ISPC-241)
						//U & V at the top
						//beratung
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								//check if there are 2 beratung change sapv in koord
								if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && (count($set_fourth_result[$ipid][$v_period_day]) != 0 || count($set_one_result[$ipid][$v_period_day]) != 0) && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
								}

								if(is_numeric($k_cf) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1' && !in_array($v_cf['id'], $exclude_after_discharge) && (in_array($v_cf['form_type'], $set_fourth_ids) && (($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1')) || in_array($v_cf['form_type'], $set_one_ids)))
								{
									$shortcut[$ipid] = '';
									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array('37b7', $month_shortcuts[$ipid]) && !in_array('37b5', $overall_patient_shortcuts[$ipid]['shortcuts_res']))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5') //only b5 or b6
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][] = '37b5';
											$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_fourth_ids) || in_array($v_cf['form_type'], $set_one_ids)))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];

											$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];

											$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['location_type'] = $day_location_type;
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price_list'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['list'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
									}
								}
							}
						}

						//koordination
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $flatrate_continued[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2' && !in_array($v_cform['id'], $exclude_after_discharge))
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $overall_patient_shortcuts[$ipid]['shortcuts_res']) && !in_array('37b5', $month_shortcuts[$ipid]) && !in_array('37b7', $overall_patient_shortcuts[$ipid]['shortcuts_res']))
									{
										if(in_array('4', $sapv_days_cs[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][] = '37b7';
											$overall_patient_shortcuts[$ipid]['shortcuts_res'][] = '37b7';
										}
										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];

										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && (in_array($v_cform['form_type'], $set_fourth_ids) || in_array($v_cform['form_type'], $set_one_ids)))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];

											$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];

											$overall_data[$ipid][$v_period_day][$shortcut[$ipid]] += '1';
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['location_type'] = $day_location_type;
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price_list'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['list'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}


					//add exclusion
					if(in_array($v_period_day, $sapv_days_inperiod_cs[$ipid]) && in_array($v_period_day, $active_days_in_period_cs[$ipid]) && !in_array($v_period_day, $hospital_days_cs[$ipid]) && !in_array($v_period_day, $hospiz_days_cs[$ipid]))
					{
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							//check if contactform type for each days
							if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids) && (in_array('4', $sapv_days_cs[$ipid][$v_period_day]) || in_array('3', $sapv_days_cs[$ipid][$v_period_day]) ))
							{
								$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
								$extra_details[$ipid][$v_period_day]['home_visit'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
							}
							else
							{
								//$clasifizierung[$v_period_day]['home_visit'] += 0;
								//sum classifizierung data if form is not housebesuche type(1)
								if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days_cs[$ipid][$v_period_day]) &&
									(
									($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') ||
									($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
									)
								)
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									$extra_details[$ipid][$v_period_day]['beratung'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$ipid][$v_period_day]) || in_array('2', $sapv_days_cs[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										$extra_details[$ipid][$v_period_day]['koordination'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
									}
									else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && !in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										$extra_details[$ipid][$v_period_day]['beratung'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										$extra_details[$ipid][$v_period_day]['koordination'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
									}
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days_cs[$ipid][$v_period_day]) || in_array('2', $sapv_days_cs[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										$extra_details[$ipid][$v_period_day]['koordination'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
									}
									else if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]) && !in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										$extra_details[$ipid][$v_period_day]['beratung'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										$extra_details[$ipid][$v_period_day]['beratung'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									$extra_details[$ipid][$v_period_day]['beratung'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days_cs[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									$extra_details[$ipid][$v_period_day]['koordination'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0') && in_array($contact_forms2form_types[$v_cf_day][0], $set_one_ids))
								{
									if(in_array('1', $sapv_days_cs[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										$extra_details[$ipid][$v_period_day]['beratung'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
									}
									else if(in_array('2', $sapv_days_cs[$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										$extra_details[$ipid][$v_period_day]['koordination'][] = $contact_forms_days_ids2details[$ipid][$v_cf_day];
									}
								}

								$count_be[$ipid][$v_period_day] += 1;
							}
						}
					}

					ksort($clasifizierung[$ipid]);
					ksort($extra_details[$ipid]);
					ksort($overall_data[$ipid][$v_period_day]);
				}

				if(count($clasifizierung[$ipid]) > 0)
				{
					$activity_days_array[$ipid] = array_keys($clasifizierung[$ipid]);
					$end_activity_date[$ipid] = end($activity_days_array[$ipid]);

					$master_data_all['patients'][$ipid]['invoice_data']['first_active_day'] = date('d.m.Y', strtotime($activity_days_array[$ipid][0]));
					$master_data_all['patients'][$ipid]['invoice_data']['last_active_day'] = date('d.m.Y', strtotime($end_activity_date[$ipid]));
				}
				else
				{
					$master_data_all['patients'][$ipid]['invoice_data']['first_active_day'] = '0000-00-00 00:00:00';
					$master_data_all['patients'][$ipid]['invoice_data']['last_active_day'] = '0000-00-00 00:00:00';
				}

				
// 				echo "<pre>";
// 				print_r($master_data); exit;
				
				
				/* ###################################### */
				/* ####### SAVED DATA ################### */
				/* ###################################### */
// 				$bw_data[$ipid] = array();

				if(!empty($bw_data[$ipid])){
					// get saved info for month - to see the number of days saved in each month
					$saved_per_moth[$ipid] = array();
					foreach($bw_data[$ipid] as $days=>$vals){
						foreach($vals as $sh=>$shd){
							$saved_per_moth[$ipid][date("mY",strtotime($days))][] = $sh;
						}
					}
					
					foreach($days_in_period[$ipid] as $k=>$act_day){
						if( isset($bw_data[$ipid][$act_day]) && !empty($bw_data[$ipid][$act_day]) ){ // check if more thant the flatrate from prevoius month is saved.
							if(count($saved_per_moth[$ipid][date("mY",strtotime($act_day))]) >=6 ){
								$final_data[$ipid][$act_day] = $bw_data[$ipid][$act_day];
							} else {
								$final_data[$ipid][$act_day] = array_merge($master_data[$ipid][$act_day],$bw_data[$ipid][$act_day]);
							}
								
						} else {
							$final_data[$ipid][$act_day] = $master_data[$ipid][$act_day];
						}
							
						if(empty($final_data[$ipid][$act_day]))
						{
							unset($final_data[$ipid][$act_day]);
						}
						
					}
					
					$master_data[$ipid] = array();
					$master_data[$ipid] = $final_data[$ipid];
				}
				/* ###################################### */
				
				$overall_flatrate_days[$ipid] = array();
				foreach($master_data[$ipid] as $date => $sh_details){
					foreach($sh_details as $ksh=>$vsh){
						if($ksh == "37b1" && $vsh['qty'] > "0"){
							$overall_flatrate_days[$ipid][]  = $date;
						}
					}
				}

				$only_one = array();
				foreach($master_data[$ipid] as $k_master_data => $v_master_data)
				{
					foreach($v_master_data as $k_master_shortcut => $v_master_values)
					{
						if($k_master_shortcut == '37b1')
						{
							if($v_master_data[$k_master_shortcut]['pay_days'] == '1')
							{
								if(!in_array($k_master_shortcut, $only_one))
								{
									if($v_master_values['price_list'] && $v_master_values['price']){
										
										$invoice_master[$ipid] [$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut'] = $k_master_shortcut;
										$invoice_master[$ipid] [$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['qty'] += '1';
										$invoice_master[$ipid] [$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['price'] = $v_master_values['price'];
// 										$invoice_master[$ipid] [$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['dates'][] = $k_master_data;
										$invoice_master[$ipid] [$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut_total'] = $v_master_values['price'];
										$grand_total[$ipid] += $v_master_values['price'];
									}
								}
							}
						}
						else
						{
							if($v_master_values['price_list'] && $v_master_values['price'] && $v_master_values['qty'] > 0 ){
								$invoice_master[$ipid][$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut'] = $k_master_shortcut;
								$invoice_master[$ipid][$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['qty'] += $v_master_values['qty'];
								$invoice_master[$ipid][$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['price'] = $v_master_values['price'];
	// 							$invoice_master[$ipid][$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['dates'][] = $k_master_data;
								$invoice_master[$ipid][$k_master_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut_total'] += ($v_master_values['qty'] * $v_master_values['price']);
								$grand_total[$ipid] += ($v_master_values['qty'] * $v_master_values['price']);
							}
						}
					}
// 					ksort($invoice_master[$ipid]);
					$master_data_all['invoice_items'][$ipid] = $invoice_master[$ipid];
					$master_data_all['grand_total'][$ipid] = $grand_total[$ipid];
					$sapv_details_data[$ipid] = end($sapv_details[$ipid]);
				}
			}

			if($params['only_pdf'] == '0')
			{
				$inserted_invoices = $bw_invoices_form->insert_invoice($master_data_all);
			}//end only_pdf=0
			else
			{
				$inserted_invoices = $params['invoices'];
			}

			//load template data
			//TODO-2777 07.01.2020 Carmen/Ancuta - changed from bw_sapv_invoice to bw_sapv_invoice_new
			$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'bw_sapv_invoice_new');
			//--

			
		
//single invoice print with 2 pages
			if($params['get_pdf'] == "1")
			{
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$invoice_data = $bw_invoices->getBwInvoice($params['stornoid'], false, true);
					
					$invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];     //ISPC-2532 Lore 10.11.2020
					
					//ISPC-2532 Carmen 18.02.2020 - get the prefix and the number of storno invoice
					$invoice_data_storno = $bw_invoices->get_invoice($inserted_invoices[0]);
					$invoice_data['prefix'] = $invoice_data_storno[0]['prefix'];
					$invoice_data['invoice_number'] = $invoice_data_storno[0]['invoice_number'];
					//--
				}
				else
				{
					$invoice_data = $bw_invoices->getBwInvoice($inserted_invoices[0], false);
				}
                
				if(strlen($invoice_data['address']) > 0 ){
				    if(strpos($invoice_data['address'],"style"))
				    {
				        $invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
				    }
				
				    $invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
				    $invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
				    $invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
				}
				

				//rewrite invoice_data with custom data (which comes from POST)
				if($params['custom_data'])
				{
					//rewrite custom data from POST to $invoice_data.
					foreach($params['custom_data'] as $k_custom => $v_custom)
					{
						$invoice_data[$k_custom] = $v_custom;
					}
				}

				$pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
				}
				else
				{
					$invoice_data['patient_pflegestufe'] = ' - ';
				}

				//setup tokens (remove pseudopost when all works)
				//client tokens
				$tokens['client_ik'] = $client_details[0]['institutskennzeichen'];


				//patient details tokens
				$tokens['patienten_id'] = strtoupper(html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
				$tokens['first_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
				$tokens['last_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
				$tokens['birthd'] = date('d.m.Y', strtotime($params['patient_days'][$invoice_data['ipid']]['details']['birthd']));
				$tokens['street'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
				$tokens['zip'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
				$tokens['city'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
				$tokens['patient_pflegestufe'] = html_entity_decode($invoice_data['patient_pflegestufe'], ENT_QUOTES, 'UTF-8');

				//health insurance tokens
				$tokens['insurance_no'] = html_entity_decode($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
				$tokens['address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');//bwsapvsinvoice
				$tokens['beneficiary_address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');

				$tokens['SAPV_Rechnungsempfaenger'] = htmlentities($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['sapv_recipient']);//ISPC-1236

				
				
				//TODO-2665 Ancuta 19.11.2019
				if($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['privatepatient'] == '1'){
				    
    				if($ppun_module == "1" && strlen($patient_debitor_details[$invoice_data['ipid']]['ppun']) > '0')
    				{
    				    $tokens['ppun'] = $patient_debitor_details[$invoice_data['ipid']]['ppun'];
    				    $tokens['debtor_number'] = '';
    				    $tokens['debitoren_nummer_oder_pv'] = $patient_debitor_details[$invoice_data['ipid']]['ppun'];
    				}
    				else
    				{
    				    $tokens['debtor_number'] = '';
    				    $tokens['ppun'] = '';
    				    $tokens['debitoren_nummer_oder_pv'] = "";
    				}
    				//--
				}
				else
				{
				    
    				//if debtor number is active and patient has number saved in invoice db get debtor number
    				if($debtor_number_module == "1" && strlen($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number']) > '0')
    				{
    				    $tokens['debtor_number'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number'];
    				    $tokens['debitor_number'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number'];
    				    $tokens['debitoren_nummer_oder_pv'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number'];//TODO-2665 Ancuta 19.11.2019
    				}
    				else
    				{
    				    $tokens['debtor_number'] = '';
    				    $tokens['debitor_number'] = '';
    				    $tokens['debitoren_nummer_oder_pv'] = "";//TODO-2665 Ancuta 19.11.2019
    				}				
				}
				
				//invoice specific tokens
				$tokens['invoiced_month'] = "";
				if(!empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
				{
					$tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
				}

				$tokens['invoiced_period'] = "";
				
				if(!empty($invoice_data['invoice_start']) && $invoice_data['invoice_start'] != "0000-00-00 00:00:00" && !empty($invoice_data['invoice_end']) && $invoice_data['invoice_end'] != "0000-00-00 00:00:00")
				{
				    $tokens['invoiced_period'] = date('d.m.Y', strtotime($invoice_data['invoice_start'])).'-'.date('d.m.Y', strtotime($invoice_data['invoice_end']));
				}
				
				$tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
				$tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');

				//invoice date
				if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970")
				{
					$tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
				}
				else
				{
					$tokens['invoice_date'] = '';
				}

				//start billed action day
				if($invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_active'])) != "1970")
				{
					$tokens['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
				}
				else
				{
					$tokens['first_active_day'] = '';
				}

				//end billed action day
				if($invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_active'])) != "1970")
				{
					$tokens['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
				}
				else
				{
					$tokens['last_active_day'] = '';
				}

				//first sapv day
				if($invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_sapv'])) != "1970")
				{
					$tokens['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
				}
				else
				{
					$tokens['first_sapv_day'] = '';
				}

				//last sapv day
				if($invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_sapv'])) != "1970")
				{
					$tokens['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));
				}
				else
				{
					$tokens['last_sapv_day'] = '';
				}

				//sapv approve date
				if($invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['sapv_approve_date'])) != "1970")
				{
					$tokens['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
				}
				elseif(date('Y', strtotime($sapv_details_data[$invoice_data['ipid']]['approved_date'])) != "1970" && strlen($invoice_data['sapv_approve_date']) > '0')
				{
					$tokens['sapv_approve_date'] = $sapv_details_data[$invoice_data['ipid']]['approved_date'];
				}
				else
				{
					$tokens['sapv_approve_date'] = '';
				}

				if($invoice_data['sapv_approve_nr'] == "-" || strlen(trim(rtrim($invoice_data['sapv_approve_nr']))) == "0")
				{
					$tokens['sapv_approve_nr'] = html_entity_decode($invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
				}
				else
				{
					$tokens['sapv_approve_nr'] = html_entity_decode($sapv_details_data[$invoice_data['ipid']]['approved_number'], ENT_QUOTES, 'UTF-8');
				}

				$tokens['footer'] = html_entity_decode($invoice_data['footer'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_items'] = $invoice_data['items'];

				if($invoice_data['storno'] == '1')
				{
					//rewrite invoice prefix if storned
					$tokens['prefix'] = 'STORNO_' . $tokens['prefix'];
				}

				//ISPC-2532 Lore 10.11.2020
				if($invoice_data_storno[0]['storno'] == '1') {
				    $tokens['full_invoice_number'] = ' Storno '.$tokens['full_invoice_number'];  // ISPC-2532 Ancuta 11.12.2020- comment from 10.12.2020 - overwtite - and add STORNO in front
				    $tokens['full_invoice_number'] .= ' zur Rechnung '.$invoice_data['storned_invoice_number'];
				}
				
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$tokens['unique_id'] = $invoice_data['record_id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total'] * (-1)), '2', ',', '.');
				}
				else
				{
					$tokens['unique_id'] = $invoice_data['id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
				}

				$invoice_data['items'] = $this->array_sort($invoice_data['items'], 'shortcut', SORT_ASC);

				if(count($invoice_data['items']) > '0')
				{
					//ISPC-1236 - new token invoice_items_html_short, without id
					$rows = count($invoice_data['items']);
					$grid = new Pms_Grid($invoice_data['items'], 1, $rows, "bw_sapv_invoice_items_list_pdf.html");
					$grid_short = new Pms_Grid($invoice_data['items'], 1, $rows, "invoice_items_list_nocustom_bw_pdf_short.html");
					
					$grid->invoice_total = $tokens['invoice_total'];
					$grid->max_entries = $rows;
					
					$grid_short->invoice_total = $tokens['invoice_total'];
					$grid_short->max_entries = $rows;

					$html_items = $grid->renderGrid();
					$html_items_short = $grid_short->renderGrid();
				}

				$tokens['invoice_items_html'] = $html_items;
				$tokens['invoice_items_html_short'] = $html_items_short;

				$current_period_tmp[$invoice_data['ipid']] = $current_period[$invoice_data['ipid']]['days'];

				array_walk($current_period_tmp[$invoice_data['ipid']], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$current_period_tmp[$invoice_data['ipid']] = array_values(array_unique($current_period_tmp[$invoice_data['ipid']]));

				foreach($current_period_tmp[$invoice_data['ipid']] as $k_period => $v_period_day)
				{
					$current_period_month_days[date('Y-m', strtotime($v_period_day))][] = $v_period_day;
				}

				$patient_months[$invoice_data['id']] = array_keys($current_period_month_days);

				foreach($patient_months[$invoice_data['id']] as $k_inv_data => $v_inv_month)
				{
					if(!function_exists('cal_days_in_month'))
					{
						$month_days_nr = date('t', mktime(0, 0, 0, date("n", strtotime($v_inv_month . "-01")), 1, date("Y", strtotime($v_inv_month . "-01"))));
					}
					else
					{
						$month_days_nr = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_inv_month . "-01")), date("Y", strtotime($v_inv_month . "-01")));
					}

					$start_month = $v_inv_month . "-01";
					$end_month = $v_inv_month . '-' . $month_days_nr;

					$month_days_arr_source[$invoice_data['id']][date('Y-m', strtotime($start_month))] = $patientmaster->getDaysInBetween($start_month, $end_month);
				}

				
				$invoice_control_sheet_data['kv_header'] = $kv_header[$invoice_data['ipid']];
				$invoice_control_sheet_data['patient_data'] = $patient_data_diagnos[$invoice_data['ipid']];
				$invoice_control_sheet_data['alias'] = $alias;
				
				//organize leistung data
				$invoice_control_sheet_data['patientdetails'] = $params['patient_days'][$invoice_data['ipid']]['details'];

				$invoice_control_sheet_data['period_days_source'] = $month_days_arr_source[$invoice_data['id']];
				$invoice_control_sheet_data['period_days'] = $current_period_tmp[$invoice_data['ipid']];
				$invoice_control_sheet_data['shortcuts'] = $shortcuts['performance'];
				$invoice_control_sheet_data['master_data'] = $master_data[$invoice_data['ipid']];
				$invoice_control_sheet_data['classification_box'] = $clasifizierung[$invoice_data['ipid']];
				$invoice_control_sheet_data['extra_data_details'] = $extra_details[$invoice_data['ipid']];
				$invoice_control_sheet_data['users_array'] = $user_array ;
				$invoice_control_sheet_data['client_details'] = $client_details[0];
				$invoice_control_sheet_data['health_insurance'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['hi_name'];
				$invoice_control_sheet_data['insurance_no'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'];
				$invoice_control_sheet_data['hi_subdiv_address'] = $invoice_data['address'];
				$invoice_control_sheet_data['patient_pflegestufe'] = $patients_pflege[$v_pflege['ipid']];
				$invoice_control_sheet_data['health_insurance_ik'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['health_insurance_ik'];
				$invoice_control_sheet_data['health_insurance_kassenr'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['health_insurance_kassenr'];
				$invoice_control_sheet_data['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
				$invoice_control_sheet_data['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
				$invoice_control_sheet_data['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
				$invoice_control_sheet_data['sapv_approve_nr'] = $invoice_data['sapv_approve_nr'];
				$invoice_control_sheet_data['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
				$invoice_control_sheet_data['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));

				$invoice_control_sheet_data['invoice_data']['invoice_number'] =  html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');;
				$invoice_control_sheet_data['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
				$invoice_control_sheet_data['invoice_data']['invoice_end']  = date('d.m.Y', strtotime($invoice_data['invoice_end']));

				
				$temp_files = array();
				if($template_data)
				{
					//generate invoice page
					$temp_files[] = $this->generate_file($template_data[0], $tokens, 'pdf', $this->view->folder_stamp, 'generate_pdf');

					//generate leistung page
                    //$temp_files[] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'performancerecordminicontrol', 'performancerecordminipdf.html');
					
					// Changed for  ISPC-1562 BW Nachweis - added a new pdf version
					$temp_files[] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'performancerecordminicontrol_new', 'performancerecordpdf_items.html');
					
					//join generated files
					if(count($temp_files) > '0')
					{
					    
					    
					    // ISPC-2472  Ancuta 12.11.2019::create batch name
					    $Batch_name = false;
					    if(!empty($inv_names)){
					        $Batch_name = $inv_names[0];
					        if( count($inv_names) > 1){
					            $Batch_name .='_'.end($inv_names);
					        }
					    }
					    //--
						$final_file = $this->generate_file($template_data[0], false, 'pdf', $this->view->folder_stamp, 'merge_pdfs', $temp_files,$Batch_name);
					}
				}
				else
				{
					$this->redirect(APP_BASE . 'invoicenew/newinvoicepatientlist?flg=notemplate');
					exit;
				}
			}

//batch print - multiple invoices each with 2 joined pages! // 3 pages fro the new invoice
			if($params['batch_print'] == '1' && count($params['invoices']) > '0')
			{
				//batch temp folder
				$invoices_ids = $params['invoices'];

				//load invoices data
				$invoices_data = $bw_invoices->get_invoices($invoices_ids);
				
				//TODO-3407 Ancuta 08.09.2020
				if(empty($invoices_data)){
				    return;
				}
				// -- 
				
				// ISPC-2472  Ancuta 12.11.2019::create batch name
				$inv_names = array();
				foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
				    $inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
				}
				$Batch_name = false;
				if(!empty($inv_names)){
				    $Batch_name = $inv_names[0];
				    if( count($inv_names) > 1){
				        $Batch_name .='_'.end($inv_names);
				    }
				}
				//--
				
				
				$final_files = array();

				foreach($invoices_data['invoices_data'] as $k_invoice_id => $v_invoice_data)
				{
					$batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $clientid);

					//fucking pflegestuffe i hate how this shit is saved!!! -- change this shit sometime to a better way
					$pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($v_pat_ipid, date('Y-m-d', strtotime($v_invoice_data['invoice_start'])), date('Y-m-d', strtotime($v_invoice_data['invoice_end'])));

					if($pflege_arr)
					{
						$v_invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
					}
					else
					{
						$v_invoice_data['patient_pflegestufe'] = ' - ';
					}

					
					if(strlen($invoice_data['address']) > 0 ){
					    if(strpos($invoice_data['address'],"style"))
					    {
					        $invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
					    }
					
					    $invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
					    $invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
					    $invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
					}
					
					
					//setup tokens
					//client tokens
					$tokens_multi['client_ik'] = $client_details[0]['institutskennzeichen'];

					//patient details tokens
					$tokens_multi['patienten_id'] = strtoupper(html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
					$tokens_multi['first_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['last_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['birthd'] = date('d.m.Y', strtotime($patient_days[$v_invoice_data['ipid']]['details']['birthd']));
					$tokens_multi['street'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['zip'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['city'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['patient_pflegestufe'] = $v_invoice_data['patient_pflegestufe'];

					//health insurance tokens
					//$tokens_multi['insurance_no'] = html_entity_decode($patient_days['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['insurance_no'] = html_entity_decode($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['beneficiary_address'] = html_entity_decode($v_invoice_data['address'], ENT_QUOTES, 'UTF-8');

					$tokens_multi['address'] = html_entity_decode($v_invoice_data['address'], ENT_QUOTES, 'UTF-8');//bwsapvsinvoice
					$tokens_multi['SAPV_Rechnungsempfaenger'] = htmlentities($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['sapv_recipient']);//ISPC-1236
					//if debtor number is active and patient has number saved in invoice db get debtor number< for this invoice, no debtor_number in db
					$tokens_multi['debitoren_nummer_oder_pv'] = "";
					if($debtor_number_module == "1" && strlen($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number']) > '0')
					{
					    $tokens_multi['debtor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
					    $tokens_multi['debitor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
					}
					else
					{
					    $tokens_multi['debtor_number'] = '';
					    $tokens_multi['debitor_number'] = '';
					}
						
					
					

					//+TODO-2729 Ancuta 10.12.2019
					if($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['privatepatient'] == '1'){
					    
					    if($ppun_module == "1" && strlen($patient_debitor_details[$v_invoice_data['ipid']]['ppun']) > '0')
					    {
					        $tokens_multi['ppun'] = $patient_debitor_details[$invoice_data['ipid']]['ppun'];
					        $tokens_multi['debtor_number'] = '';
					        $tokens_multi['debitoren_nummer_oder_pv'] = $patient_debitor_details[$invoice_data['ipid']]['ppun'];
					    }
					    else
					    {
					        $tokens_multi['debtor_number'] = '';
					        $tokens_multi['ppun'] = '';
					        $tokens_multi['debitoren_nummer_oder_pv'] = "";
					    }
					    //--
					}
					else
					{
					    
					    //if debtor number is active and patient has number saved in invoice db get debtor number
					    if($debtor_number_module == "1" && strlen($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number']) > '0')
					    {
					        $tokens_multi['debtor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
					        $tokens_multi['debitor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
					        $tokens_multi['debitoren_nummer_oder_pv'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];//TODO-2665 Ancuta 19.11.2019
					    }
					    else
					    {
					        $tokens_multi['debtor_number'] = '';
					        $tokens_multi['debitor_number'] = '';
					        $tokens_multi['debitoren_nummer_oder_pv'] = "";//TODO-2665 Ancuta 19.11.2019
					    }
					}
					//--
					
					//invoice specific tokens
					$tokens_multi['invoiced_month'] = "";
					if(!empty($v_invoice_data['invoiced_month']) && $v_invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
					{
						$tokens_multi['invoiced_month'] = date('m/Y', strtotime($v_invoice_data['invoiced_month']));
					}

					$tokens_multi['prefix'] = html_entity_decode($v_invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['invoice_number'] = html_entity_decode($v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['full_invoice_number'] = html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');

					//invoice date
					if($v_invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['completed_date'])) != "1970")
					{
						$tokens_multi['invoice_date'] = date('d.m.Y', strtotime($v_invoice_data['completed_date']));
					}
					else
					{
						$tokens_multi['invoice_date'] = '';
					}

					//start billed action day
					if($v_invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_active'])) != "1970")
					{
						$tokens_multi['first_active_day'] = date('d.m.Y', strtotime($v_invoice_data['start_active']));
					}
					else
					{
						$tokens_multi['first_active_day'] = '';
					}

					//end billed action day
					if($v_invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_active'])) != "1970")
					{
						$tokens_multi['last_active_day'] = date('d.m.Y', strtotime($v_invoice_data['end_active']));
					}
					else
					{
						$tokens_multi['last_active_day'] = '';
					}

					//first sapv day
					if($v_invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_sapv'])) != "1970")
					{
						$tokens_multi['first_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['start_sapv']));
					}
					else
					{
						$tokens_multi['first_sapv_day'] = '';
					}

					//last sapv day
					if($v_invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_sapv'])) != "1970")
					{
						$tokens_multi['last_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['end_sapv']));
					}
					else
					{
						$tokens_multi['last_sapv_day'] = '';
					}

					//sapv approve date
					if($v_invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['sapv_approve_date'])) != "1970")
					{
						$tokens_multi['sapv_approve_date'] = date('d.m.Y', strtotime($v_invoice_data['sapv_approve_date']));
					}
					else
					{
						$tokens_multi['sapv_approve_date'] = '';
					}

					//$tokens_multi['sapv_approve_nr'] = html_entity_decode($v_invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
					if($v_invoice_data['sapv_approve_nr'] == "-" || strlen(trim(rtrim($v_invoice_data['sapv_approve_nr']))) == "0")
					{
					    $tokens_multi['sapv_approve_nr'] = html_entity_decode($v_invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
					}
					else
					{
					    $tokens_multi['sapv_approve_nr'] = html_entity_decode($sapv_details_data[$v_invoice_data['ipid']]['approved_number'], ENT_QUOTES, 'UTF-8');
					}
						
					
					
					$tokens_multi['footer'] = html_entity_decode($v_invoice_data['footer'], ENT_QUOTES, 'UTF-8');


					$tokens_multi['invoiced_period'] = "";
						
					if(!empty($v_invoice_data['invoice_start']) && $v_invoice_data['invoice_start'] != "0000-00-00 00:00:00" && !empty($v_invoice_data['invoice_end']) && $v_invoice_data['invoice_end'] != "0000-00-00 00:00:00")
					{
					    $tokens_multi['invoiced_period'] = date('d.m.Y', strtotime($v_invoice_data['invoice_start'])).'-'.date('d.m.Y', strtotime($v_invoice_data['invoice_end']));
					}
						
					
					
					
					if($v_invoice_data['storno'] == '1')
					{
						//rewrite invoice prefix if storned
						$tokens_multi['prefix'] = 'STORNO_' . $tokens['prefix'];
						$tokens_multi['unique_id'] = $v_invoice_data['record_id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total'] * (-1)), '2', ',', '.');
					}
					else
					{
						$tokens_multi['unique_id'] = $v_invoice_data['id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total']), '2', ',', '.');
					}

					if(count($v_invoice_data['items']) > '0')
					{
						//ISPC-1236 - new token invoice_items_html_short, without id
						$rows = count($v_invoice_data['items']);

						$grid = new Pms_Grid($v_invoice_data['items'], 1, $rows, "bw_sapv_invoice_items_list_pdf.html");
						$grid_short = new Pms_Grid($v_invoice_data['items'], 1, $rows, "invoice_items_list_nocustom_bw_pdf_short.html");
						
						$grid->invoice_total = $tokens_multi['invoice_total'];
						$grid->max_entries = $rows;
						
						$grid_short->invoice_total = $tokens_multi['invoice_total'];
						$grid_short->max_entries = $rows;

						$html_items = $grid->renderGrid();
						$html_items_short = $grid_short->renderGrid();
					}
					else 
					{
						$html_items = "";
						$html_items_short = "";
					}

					$tokens_multi['invoice_items_html'] = $html_items;
					$tokens_multi['invoice_items_html_short'] = $html_items_short;

					$current_invoices_period[$v_invoice_data['id']] = $patientmaster->getDaysInBetween($v_invoice_data['invoice_start'], $v_invoice_data['invoice_end']);

					$current_period_tmp[$v_invoice_data['id']] = $current_invoices_period[$v_invoice_data['id']];

					array_walk($current_period_tmp[$v_invoice_data['id']], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});

					$current_period_tmp[$v_invoice_data['id']] = array_values(array_unique($current_period_tmp[$v_invoice_data['id']]));

					foreach($current_period_tmp[$v_invoice_data['id']] as $k_period => $v_period_day)
					{
						$current_period_month_days[date('Y-m', strtotime($v_period_day))][] = $v_period_day;
					}

					$patient_months[$v_invoice_data['id']] = array_keys($current_period_month_days);

					foreach($patient_months[$v_invoice_data['id']] as $k_inv_data => $v_inv_month)
					{
						if(!function_exists('cal_days_in_month'))
						{
							$month_days_nr = date('t', mktime(0, 0, 0, date("n", strtotime($v_inv_month . "-01")), 1, date("Y", strtotime($v_inv_month . "-01"))));
						}
						else
						{
							$month_days_nr = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_inv_month . "-01")), date("Y", strtotime($v_inv_month . "-01")));
						}

						$start_month = $v_inv_month . "-01";
						$end_month = $v_inv_month . '-' . $month_days_nr;

						$month_days_arr_source[$v_invoice_data['id']][date('Y-m', strtotime($start_month))] = $patientmaster->getDaysInBetween($start_month, $end_month);
					}
					//organize leistung data
					$invoice_control_sheet_data['patientdetails'] = $params['patient_days'][$v_invoice_data['ipid']]['details'];

					$invoice_control_sheet_data['period_days_source'] = $month_days_arr_source[$v_invoice_data['id']];
					
					
					$invoice_control_sheet_data['kv_header'] = $kv_header[$v_invoice_data['ipid']];
					$invoice_control_sheet_data['alias'] = $alias;
					$invoice_control_sheet_data['patient_data'] = $patient_data_diagnos[$v_invoice_data['ipid']];
					
					$invoice_control_sheet_data['period_days'] = $current_period_tmp[$v_invoice_data['ipid']];
					$invoice_control_sheet_data['shortcuts'] = $shortcuts['performance'];
					$invoice_control_sheet_data['master_data'] = $master_data[$v_invoice_data['ipid']];
					$invoice_control_sheet_data['classification_box'] = $clasifizierung[$v_invoice_data['ipid']];
					$invoice_control_sheet_data['extra_data_details'] = $extra_details[$v_invoice_data['ipid']];
					$invoice_control_sheet_data['users_array'] = $user_array ;
					$invoice_control_sheet_data['client_details'] = $client_details[0];
					$invoice_control_sheet_data['health_insurance'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['hi_name'];
					$invoice_control_sheet_data['insurance_no'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'];
					$invoice_control_sheet_data['hi_subdiv_address'] = $v_invoice_data['address'];
					$invoice_control_sheet_data['patient_pflegestufe'] = $patients_pflege[$v_pflege['ipid']];
					$invoice_control_sheet_data['health_insurance_ik'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['health_insurance_ik'];
					$invoice_control_sheet_data['health_insurance_kassenr'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['health_insurance_kassenr'];
					$invoice_control_sheet_data['health_insurance_kassenr'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['health_insurance_kassenr'];
					$invoice_control_sheet_data['first_active_day'] = $invoice_data['start_active'];
					$invoice_control_sheet_data['last_active_day'] = $invoice_data['end_active'];
					$invoice_control_sheet_data['sapv_approve_date'] = $invoice_data['sapv_approve_date'];
					$invoice_control_sheet_data['sapv_approve_nr'] = $invoice_data['sapv_approve_nr'];
					$invoice_control_sheet_data['first_sapv_day'] = $invoice_data['start_sapv'];
					$invoice_control_sheet_data['last_sapv_day'] = $invoice_data['end_sapv'];
					

					$invoice_control_sheet_data['invoice_data']['invoice_number'] =  html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');;
					$invoice_control_sheet_data['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($v_invoice_data['invoice_start']));
					$invoice_control_sheet_data['invoice_data']['invoice_end']  = date('d.m.Y', strtotime($v_invoice_data['invoice_end']));


					$temp_files = array();
					if($template_data)
					{

						//generate invoice page
						$temp_files[$v_invoice_data['id']][] = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'generate_pdf');

						//generate leistung page
                        //$temp_files[$v_invoice_data['id']][] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'performancerecordminicontrol', 'performancerecordminipdf.html');
						
						// Changed for  ISPC-1562 BW Nachweis - added a new pdf version
						$temp_files[$v_invoice_data['id']][] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'performancerecordminicontrol_new', 'performancerecordpdf_items.html');

						//join generated files
						if(count($temp_files[$v_invoice_data['id']]) > '0')
						{

							if(isset($params['print_job']) && $params['print_job'] == '1'){
    							$print_params = array();
    							$print_params = $params;
    							$print_params['template_data'] = $template_data[0];
    							$print_params['export_file_type'] = "pdf";
    							$print_params['batch_printing_mode'] = "merge_pdfs_multiple";
    							$print_params['vars'] = $tokens_multi;
    							$print_params['batch_temp_files'] = $temp_files[$v_invoice_data['id']];
    							
    							$batch_temp_files = $this->print_job_generate_and_save_file($print_params);
    							
    							return $batch_temp_files ;
    							
							}   else {
							    
    							$final_files[$v_invoice_data['id']] = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'merge_pdfs_multiple', $temp_files[$v_invoice_data['id']]);
    							
							}
						}
					}

					$tokens_multi = array();
					$invoice_control_sheet_data = array();
				}
 
				$final_files = array_values($final_files);

				if(count($final_files) > '0')
				{
					//final cleanup (check if files are on disk)
					foreach($final_files as $k_temp => $v_file)
					{
						if(!is_file($v_file))
						{
							//remove unexisting files
//							$unsetted_files[] = $v_file; //for debugs
							unset($final_files[$v_file]);
						}
					}

					$remaining_temp_files = array_values(array_unique($final_files));


					if(count($remaining_temp_files) > '0')
					{
					    //ISPC-2472  Ancuta 12.11.2019::added batch name
						$final_file = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'merge_pdfs', $final_files, $Batch_name);
					}
				}
				exit;
			}
		}

		public function editbwsapvinvoiceAction()
		{
			$clientid = $this->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$bw_invoices = new BwInvoicesNew();
			$bw_invoices_items = new BwInvoiceItemsNew();
			$bw_invoices_form = new Application_Form_BwInvoicesNew();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$this->view->hide_patient_tab = '1';

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $bw_invoices->getBwInvoice($invoice_id);
			}

			if(in_array($invoice_data['id'], BwInvoicesNew::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}

				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $bw_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{
					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}
				//save here
				
				if(strlen($_POST['invoice']['address']) > 0 ){
				    if(strpos($_POST['invoice']['address'],"style"))
				    {
				        $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
				    }
				    $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
				    $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
				}
				
				$edit_invoice = $bw_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);


				if(empty($_REQUEST['pdf']))
				{
					if($edit_invoice)
					{
					    //ISPC-2312 Ancuta 07.12.2020
					    if($_REQUEST['redirect2new'] == '1'){
					        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bw_sapv_invoice_new&flg=edtsuc');
					        exit();
					    }
					    //-- 
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edtsuc');
					}
					else
					{
					    //ISPC-2312 Ancuta 07.12.2020
					    if($_REQUEST['redirect2new'] == '1'){
					        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bw_sapv_invoice_new&flg=edterr');
					        exit();
					    }
					    //-- 
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edterr');
					}
				}
				else if(!empty($_REQUEST['pdf']) && $edit_invoice)
				{

					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}

					if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
					}
					else if(empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
					}
//					$this->_redirect(APP_BASE . 'invoice/performancerecord?iid=' . $_REQUEST['invoiceid'] . '&mode=pdfs&pdfquick=1&completed_date=' . strtotime($pdf_data['completed_date']));

					$params['ipids'] = array($invoice_data['ipid']);

					//patient days
					$conditions['client'] = $this->clientid;
					$conditions['ipids'] = array($invoice_data['ipid']);
					$conditions['periods'][0]['start'] = '2009-01-01';
					$conditions['periods'][0]['end'] = date('Y-m-d');

					$sql = 'e.epid, p.ipid, e.ipid,';
					$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
					$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
					$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
					$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
					$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
					$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

					//be aware of date d.m.Y format here
					$patient_days = Pms_CommonData::patients_days($conditions, $sql);

					$params['invoices'] = array($invoice_data['id']);
					$params['patient_days'] = $patient_days;
					$params['get_pdf'] = '1';
					$params['only_pdf'] = 1;
					$_REQUEST['type'] = 'pdf';

					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}

					$params['custom_data']['address'] = $_POST['invoice']['address'];
					$params['custom_data']['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));

					$this->bwsapvsinvoice($params);
				}
			}

			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				if(!$invoice_data || empty($invoice_data))
				{
				    
				    //ISPC-2312 Ancuta 07.12.2020
				    if($_REQUEST['redirect2new'] == '1'){
				        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=bw_sapv_invoice_new');
				        exit();
				    }
				    //-- 
					$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
				}

				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];

				//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
				$hi_perms_divisions = $divisions;

				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}

					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}

					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}


				if($hi_perms_divisions)
				{

					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
				}

				$pathealthinsurancenr = "";
				if(count($healthinsu_array[0]))
				{
					$phi_details = $healthinsu_array[0]['name'];
				}
				else
				{
					$phi_details = "--";
				}

				$phi_details_sub = $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];

				$this->view->health_insurance = $phi_details;
				$this->view->hi_subdiv_address = $phi_details_sub;


				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);

				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}

				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}

				if(strlen($invoice_data['footer']) == 0)
				{
					$invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				}

				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is preset
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		public function fetchbwsapvsinvoicelistAction()
		{
			$clientid = $this->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$bw_invoices_payments = new BwInvoicePaymentsNew();
			$users = new User();
			$warnings = new RemindersInvoice();
			$modules = new Modules();
			
			if($modules->checkModulePrivileges("170", $clientid))
			{
				$this->view->create_bulk_warnings = "1";
			}
			else
			{
				$this->view->create_bulk_warnings = "0";
			}
			
			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();


			$storno_invoices_q = Doctrine_Query::create()
				->select("*")
				->from('BwInvoicesNew')
				->where('client = "' . $clientid . '"  ')
				->andWhere('storno = 1')
				->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();

			$storno_ids_str = '"XXXXXX",';
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}

			if(empty($storno_ids))
			{
				$storno_ids[] = "XXXXXXX";
			}

			$storno_ids_str = substr($storno_ids_str, 0, -1);

			// get client data
			$client_details_m = new Client();
			$client_details = $client_details_m->getClientDataByid($clientid);

			$invoice_due_days = $client_details[0]['invoice_due_days'];
			$plus_due_days = '+' . $invoice_due_days . ' days';
			$this->view->plus_due_days = $plus_due_days;

			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{

				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
					break;

				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0" ';

					break;

				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND isdelete=0 AND isarchived ="0"';
					break;

				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;

				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
					break;

				case 'all':
					$filters['hiinvoice'] = ' AND isarchived ="0"';
					break;

				case 'archived':
					$filters['hiinvoice'] = ' AND isarchived ="1" AND status !="4" AND isdelete != "1"';
					break;

				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';
					break;
			}

			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}

			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}

			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}

			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}

			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";

			// if super admin check if patient is visible or not
			if($this->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}

			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->where("p.isdelete =0")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);

			$f_patients_res = $f_patient->fetchArray();

			$f_patients_ipids[] = '9999999999999';
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
			}

			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BwInvoicesNew')
				->whereIn('ipid', $f_patients_ipids);
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);

			$inv2count = $invoices_counting->fetchArray();

			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';

				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}

				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}

				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["deleted"][] = '1';
				}

				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
//				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}

				if($v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["all"][] = '1';
				}

				if($v_inv2count['isarchived'] == "1" && $v_inv2count['status'] != "4" && $v_inv2count['isdelete'] != "1")
				{
					$status_count_invoices["archived"][] = '1';
				}
			}
			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
				->select("*")
				->from('BwInvoicesNew')
				->whereIn('ipid', $f_patients_ipids);
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}

			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
				->select("*")
				->from('BwInvoicesNew')
				->whereIn('ipid', $f_patients_ipids)
				->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
			$invoices_no_limit[] = "XXXXXX";


			$invoice_ipids[] = '99999999999999';
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $f_patients_ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();

			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}

			switch($_REQUEST['ord'])
			{

				case 'id':
					$orderby = 'id ' . $sort;
					break;

				case 'ln':
					$orderby = 'epid ' . $sort;
					break;

				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;

				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;

				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;

				default:
				    //BwInvoicesNew
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [NEW]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}



			$invoices = Doctrine_Query::create()
				->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
				->from('BwInvoicesNew')
				->where("client='" . $clientid . "'" . $filters['hiinvoice'])
				->andwhereIn('ipid', $invoice_ipids);
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();


			$invoice_uids[] = '9999999999';
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}


			//count tabs contents
//			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');

			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}

			$invoice_uids = array_values(array_unique($invoice_uids));
			$users_details = $users->getMultipleUserDetails($invoice_uids);


			$invoice_payments = $bw_invoices_payments->getInvoicesPaymentsSum($invoice_ids);

			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);
			
			$all_warnings = $warnings->get_reminders($invoice_ids, 'bw_sapv_invoice_new', $clientid);
			
			foreach ($invoicelimit as &$row) {
				if (isset($all_warnings[$row['id']])) {
					$row['InvoiceWarnings'] = $all_warnings[$row['id']];
				}
			}
			//var_dump($invoicelimit); exit;
			
			$this->view->storned_invoces = BwInvoicesNew::get_storned_invoices($clientid);

			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}

		public function bwsapvlistpaymentsAction()
		{
			$clientid = $this->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$bwinvoices = new BwInvoicesNew();
			$bwpayments = new BwInvoicePaymentsNew();
			$bwinvoice_form = new Application_Form_BwInvoicesNew();

			$user = new User();

			if($_REQUEST['invoiceid'])
			{

				$payments = $bwpayments->getInvoicePayments($_REQUEST['invoiceid']);

				$users[] = '999999999999';
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}

				$users_list = $user->getMultipleUserDetails($users);

				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}

				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}


					$del_payment = $bwpayments->delete_invoice_payment($_REQUEST['paymentid']);

					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $bwpayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $bwinvoices->get_invoice($_REQUEST['invoiceid']);

						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $bwinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}

					//reload the payments
					unset($payments);
					$payments = $bwpayments->getInvoicePayments($_REQUEST['invoiceid']);
				}

				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoicenew/bwlistpayments.html');
				echo $payments_list;

				exit;
			}
			else
			{
				exit;
			}
		}

		private function get_period_sapvs($ipids, $current_period = false, $hospital_days)
		{
			$patientmaster = new PatientMaster();
			if(count($hospital_days) == 0)
			{
				$hospital_days[] = '999999999999';
			}

			if(is_array($ipids))
			{
				$ipids_arr = $ipids;
			}
			else
			{
				$ipids_arr[] = $ipids;
			}

			if($current_period)
			{
				foreach($current_period as $k_ipid => $v_current_per_data)
				{
					$sql_where[] = '(`ipid` LIKE "' . $k_ipid . '" AND (DATE(`verordnungbis`) >= "' . date('Y-m-d', strtotime($v_current_per_data['start'])) . '" AND DATE(`verordnungam`) <= "' . date('Y-m-d', strtotime($v_current_per_data['end'])) . '")) ';
					$period_days[$k_ipid] = $patientmaster->getDaysInBetween($v_current_per_data['start'], $v_current_per_data['end']);
				}
			}

			if ( ! empty($sql_where)) {
    			$dropSapv = Doctrine_Query::create()
    				->select('*')
    				->from('SapvVerordnung')
    				->where('status != "1"')
    				->andWhere(implode(" OR ", $sql_where))
    				->andWhere('verordnungam != "0000-00-00 00:00:00"')
    				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
    				->andWhere('isdelete=0')
    				->orderBy('verordnungam ASC');
    			$droparray = $dropSapv->fetchArray();
			} else{
			    $droparray = array();
			}

			$all_sapv_days = array();
			$temp_sapv_days = array();

			foreach($droparray as $k_sapv => $v_sapv)
			{

				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);

				$relevant_sapvs_days[$v_sapv['ipid']]['start'][] = $s_start;
				$relevant_sapvs_days[$v_sapv['ipid']]['end'][] = $s_end;

				
				if($v_sapv['approved_date'] != "0000-00-00 00:00:00")
				{
					$sapvs_details[$v_sapv['id']]['approved_date'] = date('d.m.Y', strtotime($v_sapv['approved_date']));
				}
				
				if(strlen(trim(rtrim($v_sapv['approved_number']))) > '0')
				{
					
					$sapvs_details[$v_sapv['id']]['approved_number'] = $v_sapv['approved_number'];
				}
				
				foreach($temp_sapv_days as $k_tsapv => $v_tsapv)
				{
					if(in_array($v_tsapv, $period_days[$v_sapv['ipid']]) && !in_array($v_tsapv, $hospital_days[$v_sapv['ipid']]))
					{
						$temp_sapv_verordnet[$v_sapv['ipid']] = explode(',', $v_sapv['verordnet']);

						if(empty($all_sapv_days[$v_sapv['ipid']][$v_tsapv]))
						{
							$all_sapv_days[$v_sapv['ipid']][$v_tsapv] = array();
						}

						$all_sapv_days[$v_sapv['ipid']][$v_tsapv] = array_merge_recursive($all_sapv_days[$v_sapv['ipid']][$v_tsapv], $temp_sapv_verordnet[$v_sapv['ipid']]);
						$all_sapv_days[$v_sapv['ipid']][$v_tsapv] = array_values(array_unique($all_sapv_days[$v_sapv['ipid']][$v_tsapv]));
					}
				}
			}

			foreach($all_sapv_days as $k_ipid => $v_sapv_days)
			{
				foreach($v_sapv_days as $k_s_day => $v_s_day)
				{
					if(in_array($k_s_day, $period_days[$k_ipid]) && !in_array($k_s_day, $hospital_days[$k_ipid]))
					{
						$all_sapv_days_arr[$k_ipid][$k_s_day] = $v_s_day;
					}
					$all_sapv_days_arr[$k_ipid]['relevant_sapvs_days'] = $relevant_sapvs_days[$k_ipid];
				}
			}
			
			$all_sapv_days_arr[$v_sapv['ipid']]['sapv_details'][$v_sapv['id']] = $sapvs_details[$v_sapv['id']];

			return $all_sapv_days_arr;
		}
		
		//ISPC-2312  ANcuta 07.12.2020 changed to public
		public function get_sapvs_approved_details($ipids, $current_period = false)
		{
			$patientmaster = new PatientMaster();

			if(is_array($ipids))
			{
				$ipids_arr = $ipids;
			}
			else
			{
				$ipids_arr[] = $ipids;
			}

			if($current_period)
			{
				foreach($current_period as $k_ipid => $v_current_per_data)
				{
					$sql_where[] = '(`ipid` LIKE "' . $k_ipid . '" AND (DATE(`verordnungbis`) >= "' . date('Y-m-d', strtotime($v_current_per_data['start'])) . '" AND DATE(`verordnungam`) <= "' . date('Y-m-d', strtotime($v_current_per_data['end'])) . '")) ';
					$period_days[$k_ipid] = $patientmaster->getDaysInBetween($v_current_per_data['start'], $v_current_per_data['end']);
				}
			}
 
			if ( ! empty($sql_where)){
			    
    			$dropSapv = Doctrine_Query::create()
    				->select('*')
    				->from('SapvVerordnung')
    				->where('status != "1"')
    				->andWhere(implode(" OR ", $sql_where))
    				->andWhere('verordnungam != "0000-00-00 00:00:00"')
    				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
    				->andWhere('isdelete=0')
    				->orderBy('verordnungam ASC');
    			$droparray = $dropSapv->fetchArray();
			} else{
			    $droparray = array();
			}

			foreach($droparray as $k_sapv => $v_sapv)
			{
				if($v_sapv['approved_date'] != "0000-00-00 00:00:00")
				{
					$sapvs_details[$v_sapv['id']]['approved_date'] = date('d.m.Y', strtotime($v_sapv['approved_date']));
				}
				else
				{
					$sapvs_details[$v_sapv['id']]['approved_date'] = "";
				}

				if(strlen(trim(rtrim($v_sapv['approved_number']))) > '0')
				{

					$sapvs_details[$v_sapv['id']]['approved_number'] = $v_sapv['approved_number'];
				}
				else
				{
					$sapvs_details[$v_sapv['id']]['approved_number'] = "";
				}

				$approved_sapv_details[$v_sapv['ipid']][$v_sapv['id']] = $sapvs_details[$v_sapv['id']];
			}

			return $approved_sapv_details;
		}

		private function get_patients_period_cf($ipids, $current_period, $sgbxi = false)
		{
			if(empty($ipids)){
				return false;
			}
			if(is_array($ipids))
			{
				$ipids_arr = $ipids;
			}
			else
			{
				$ipids_arr[] = $ipids;
			}

			$contact_from_course = Doctrine_Query::create()
				->select("id,ipid,recordid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->whereIn('ipid', $ipids_arr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$contact_v = $contact_from_course->fetchArray();

			foreach($contact_v as $k_contact_v => $v_contact_v)
			{
				$deleted_contact_forms[] = $v_contact_v['recordid'];
			}

			foreach($ipids_arr as $k_ipid => $v_ipid)
			{
				$sql_w[] = ' (`ipid` LIKE "%' . $v_ipid . '%" AND DATE(`billable_date`) BETWEEN DATE("' . date("Y-m-d", strtotime($current_period[$v_ipid]['start'])) . '") AND DATE("' . date("Y-m-d", strtotime($current_period[$v_ipid]['end'])) . '")) ';
			}


			$contact_form_visits = Doctrine_Query::create()
				->select("*")
				->from("ContactForms")
				->where('isdelete ="0"');
				if(!empty($deleted_contact_forms)){
					$contact_form_visits->andWhereNotIn('id', $deleted_contact_forms);
				}
				$contact_form_visits->andWhere('parent ="0"');
			if(count($sql_w))
			{
				$contact_form_visits->andWhere(implode("OR", $sql_w));
			}

			if($sgbxi)
			{
				$contact_form_visits->andWhere('sgbxi_quality = "1"');
			}

			$contact_form_visits->orderBy('begin_date_h, begin_date_m ASC');
			$contact_form_visits_res = $contact_form_visits->fetchArray();


			foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
			{
				if(!$sgbxi)
				{
					$contact_form_visit_date = date('Y-m-d', strtotime($v_contact_visit['billable_date']));

					$cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date][] = $v_contact_visit;

					$cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date]['form_types'][$v_contact_visit['id']] = $v_contact_visit['form_type'];
					$cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date]['form_types'] = array_unique($cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date]['form_types']);
				}
				else
				{
					$cf_visit_days[$v_contact_visit['ipid']][$v_contact_visit['id']] = $v_contact_visit;
				}
			}

			return $cf_visit_days;
		}

		private function get_patients_period_course($ipids = false, $discharge_dates = false, $period = false,$details = false)
		{
			$course = Doctrine_Query::create()
				->select("id, ipid, course_date, wrong, done_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type")
				->from('PatientCourse')
				->where("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U' OR AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			if($ipids && $period)
			{
				foreach($ipids as $ipid)
				{
					$sql_w[] = ' ipid LIKE "' . $ipid . '" AND (DATE(`done_date`) BETWEEN DATE("' . date('Y-m-d H:i:s', strtotime($period[$ipid]['start'])) . '") AND DATE("' . date('Y-m-d H:i:s', strtotime('-1 second', strtotime('+1 day', strtotime($period[$ipid]['end'])))) . '")) ';
				}

				$course->andWhere(implode("OR", $sql_w));
			}
			else
			{
				$course->andWhereIn('ipid', $ipids);
			}

			$course_res = $course->fetchArray();

			foreach($course_res as $k_course => $v_course)
			{
//				var_dump(strtotime($v_course['done_date']) <= strtotime($discharge_dates[$v_course['ipid']]));
//				print_r($v_course['ipid'] . ' --->' . $v_course['done_date'] . ' (<=)-- ' . $discharge_dates[$v_course['ipid']]."\n\n");

				if(strtotime($v_course['done_date']) <= strtotime($discharge_dates[$v_course['ipid']]))
				{
					$course_date = date('Y-m-d', strtotime($v_course['done_date']));
				}
				else if(strlen($discharge_dates[$v_course['ipid']]) == "0")
				{
					$course_date = date('Y-m-d', strtotime($v_course['done_date']));
				}
				
				if($details)
				{
    				$days_course[$v_course['ipid']][$course_date][] = $v_course;
				} 
				else 
				{
				    $days_course[$v_course['ipid']][$course_date][] = $v_course['course_type'];
				}
				
				
			}

			return $days_course;
		}


		private function get_patients_period_course_by_shortcuts($ipids = false, $shortcuts , $discharge_dates = false, $period = false,$details = false)
		{
		    if(empty($ipids) ){
		        return;
		    }
		    
			$course = Doctrine_Query::create()
				->select("id, ipid, course_date, wrong, done_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type")
				->from('PatientCourse')
				->where("wrong = 0")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			if($ipids && $period)
			{
				foreach($ipids as $ipid)
				{
					$sql_w[] = ' ipid LIKE "' . $ipid . '" AND (DATE(`done_date`) BETWEEN DATE("' . date('Y-m-d H:i:s', strtotime($period[$ipid]['start'])) . '") AND DATE("' . date('Y-m-d H:i:s', strtotime('-1 second', strtotime('+1 day', strtotime($period[$ipid]['end'])))) . '")) ';
				}

				$course->andWhere(implode("OR", $sql_w));
			}
			else
			{
				$course->andWhereIn('ipid', $ipids);
			}


			if(is_array($shortcuts))
			{
				$shortcuts_arr[] = '999999999';
				foreach($shortcuts as $shortcut)
				{
					$shortcuts_arr[] = Pms_CommonData::aesEncrypt($shortcut);
				}
			
				$course->andWhereIn('course_type', $shortcuts_arr);
			}
			else
			{
				$course->andWhere("course_type='" . addslashes(Pms_CommonData::aesEncrypt($shrt)) . "'");
			}
				
			
			$course_res = $course->fetchArray();
// 			dd("echo",$course->getSqlQuery());
// dd($course_res);
			foreach($course_res as $k_course => $v_course)
			{
//				var_dump(strtotime($v_course['done_date']) <= strtotime($discharge_dates[$v_course['ipid']]));
//				print_r($v_course['ipid'] . ' --->' . $v_course['done_date'] . ' (<=)-- ' . $discharge_dates[$v_course['ipid']]."\n\n");
			    $course_date = date('Y-m-d', strtotime($v_course['done_date']));// TODO-2451 Added by Ancuta 30.07.2019
			    
				if(strtotime($v_course['done_date']) <= strtotime($discharge_dates[$v_course['ipid']]))
				{
					$course_date = date('Y-m-d', strtotime($v_course['done_date']));
				}
				else if(strlen($discharge_dates[$v_course['ipid']]) == "0")
				{
					$course_date = date('Y-m-d', strtotime($v_course['done_date']));
				}
				
				if($details)
				{
    				$days_course[$v_course['ipid']][$course_date][] = $v_course;
				} 
				else 
				{
				    $days_course[$v_course['ipid']][$course_date][] = $v_course['course_type'];
				}
				
				
			}

			return $days_course;
		}

		private function patients_real_active_days($ipids, $active_days_in_period, $hospital_days, $sapv_days)
		{
			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($active_days_in_period[$v_ipid] as $k_active_day => $v_active_day)
				{
//					if($v_ipid == '0bbb28fdffcf6bf09a7d5ba9d6090c2d684005cc')
//					{
//						print_r($v_active_day."\n");
//						var_dump(!in_array($v_active_day, $hospital_days[$v_ipid]));
//						var_dump(array_key_exists($v_active_day, $sapv_days[$v_ipid]));
//						print_r("\n\n");
//					}

					if(!in_array($v_active_day, $hospital_days[$v_ipid]) && array_key_exists($v_active_day, $sapv_days[$v_ipid]))
					{
						$real_active_days[$v_ipid][] = $v_active_day;
					}
				}
			}

			return $real_active_days;
		}

		private function nosapv_days($active_days_in_period, $hospital_days, $sapv_days)
		{
			foreach($active_days_in_period as $k_active_day => $v_active_day)
			{
				$v_active_day_alt = date('d.m.Y', strtotime($v_active_day));
				if(!in_array($v_active_day_alt, $hospital_days) && !array_key_exists($v_active_day, $sapv_days))
				{
					$real_active_days[$k_active_day][] = $v_active_day;
				}
			}

			return $real_active_days;
		}

		//copy of Invoicecontroller::multi_patients_flatrate_days
		private function multi_patients_flatrate_days($ipids, $clientid, $start, $end, $current_period, $active_days_overall, $cycles, $days_nosapv_overall, $hospital_overall_days, $patients_details)
		{
			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn("ipid", $ipids)
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			//get patients discharges
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids);

			//get client discharge methods
			$discharge_methods = DischargeMethod::getDischargeMethod($clientid, 0);

			//get only dead methods
			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			//get discharged dead date
			foreach($patients_discharge as $k_pat_dis => $v_pat_dis)
			{
				if(in_array($v_pat_dis['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$v_pat_dis['ipid']] = date('Y-m-d', strtotime($v_pat_dis['discharge_date']));
				}
			}

			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
//				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days[$v_sapv['ipid']]))
				{
					$sapv_days[$v_sapv['ipid']] = array();
				}

				$sapv_days[$v_sapv['ipid']] = array_merge_recursive($s_days, $sapv_days[$v_sapv['ipid']]);
			}
			$sapv_days[$v_sapv['ipid']] = array_values(array_unique($sapv_days[$v_sapv['ipid']]));

			foreach($ipids as $k_ipid => $v_ipid)
			{
				$active_days_overall[$v_ipid] = array_diff($active_days_overall[$v_ipid], $hospital_overall_days[$v_ipid]);

				foreach($sapv_days[$v_ipid] as $k_sapv_day => $v_sapv_day)
				{
					$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
					$curent_start_month = date('Ym', strtotime($current_period[$v_ipid]['start']));

					//calculate overall
					if(count($flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall[$v_ipid]))
					{
						$flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
					}
				}

				$sapv_days_active[$v_ipid] = array_intersect($active_days_overall[$v_ipid], $sapv_days[$v_ipid]);
				$sapv_days_active[$v_ipid] = array_values(array_unique($sapv_days_active[$v_ipid]));
				asort($sapv_days[$v_ipid]);

				$sapv_days[$v_ipid] = array_values($sapv_days[$v_ipid]);

				$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
				$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

				if(count($sapv_days_active[$v_ipid]) > '0')
				{
					$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
					$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

					$currtime[$v_ipid] = $last_sapv_day_ts[$v_ipid];
					$discharge_date = end(end($patients_details[$v_ipid]['active_periods']));

					$end_time[$v_ipid] = strtotime(date('Y-m-d', strtotime($discharge_date)));


					$i = '0';
					$first_flatrate[$v_ipid] = true;

					//while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
					while($currtime[$v_ipid] <= $end_time[$v_ipid])
					{
						$cur_time_formated[$v_ipid] = date('Y-m-d', $currtime[$v_ipid]);

						if(!in_array($cur_time_formated[$v_ipid], $days_nosapv_overall[$v_ipid]) && $first_flatrate[$v_ipid] && in_array($cur_time_formated[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($cur_time_formated[$v_ipid], $hospital_overall_days[$v_ipid]))
						{
							$flatrate_structured[$v_ipid]['pay_days'][] = $cur_time_formated[$v_ipid];

							$fl_start_key[$v_ipid] = array_search($cur_time_formated[$v_ipid], $flatrate_structured[$v_ipid]['pay_days']);
							$flatrate_structured[$v_ipid][$fl_start_key[$v_ipid]][] = $cur_time_formated[$v_ipid];

							$first_flatrate[$v_ipid] = false;
							$i++;
						}

						$currtime[$v_ipid] = strtotime('+1 day', $currtime[$v_ipid]);
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $kk_flatrate => $vv_flatrate)
				{
					$start_fl_period_day[$v_ipid] = $vv_flatrate;
					$i = 0;

					while(count($flatrate_structured[$v_ipid][$kk_flatrate]) < '7')
					{
						if(!in_array($start_fl_period_day[$v_ipid], $hospital_overall_days[$v_ipid]) && in_array($start_fl_period_day[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($start_fl_period_day[$v_ipid], $flatrate_structured[$v_ipid][$kk_flatrate]))
						{
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $start_fl_period_day[$v_ipid];
						}
						else
						{
							//make sure we reach 7 elements
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $vv_flatrate;
						}
						asort($flatrate_structured[$v_ipid][$kk_flatrate]);
						$start_fl_period_day[$v_ipid] = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day[$v_ipid])));
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $k_flatrate => $v_flatrate)
				{
					$max_flatrate_day[$v_ipid][$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

					$flatrate_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;
					$flatrate_structured_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;

					foreach($flatrate_structured[$v_ipid][$k_flatrate] as $k_day_key => $v_day_value)
					{
						if(strtotime($v_day_value) <= $max_flatrate_day[$v_ipid][$k_flatrate] &&
							((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod[$v_ipid]) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
						{
							$flatrate_inperiod[$v_ipid][] = $v_day_value;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_day_value;
						}
						else
						{
							$flatrate_inperiod[$v_ipid][] = $v_flatrate;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_flatrate;
						}
					}
				}

				foreach($flatrate_structured_inperiod[$v_ipid]['pay_days'] as $k_fl_per => $v_fl_per)
				{
					$flatrate_inperiod_temp[$v_ipid] = $flatrate_structured_inperiod[$v_ipid][$k_fl_per];
					$flatrate_inperiod_temp[$v_ipid] = array_values(array_unique($flatrate_inperiod_temp[$v_ipid]));

					$last_day_flatrate[$v_ipid] = end($flatrate_inperiod_temp[$v_ipid]);
					$ts_last_day_flatrate[$v_ipid] = strtotime($last_day_flatrate[$v_ipid]);
					$next_flatrate_day[$v_ipid] = '';
					while(count($flatrate_inperiod_temp[$v_ipid]) < '7')
					{
						if(strlen($next_flatrate_day[$v_ipid]) == '0')
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $ts_last_day_flatrate[$v_ipid]);
						}
						else
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $next_flatrate_day[$v_ipid]);
						}

						//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
						if($next_flatrate_day[$v_ipid] <= strtotime($current_period[$v_ipid]['end']))
						{
							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days_overall[$v_ipid]))
//							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days[$v_ipid]))
							{
								$flatrate_inperiod_temp[$v_ipid][] = date('Y-m-d', $next_flatrate_day[$v_ipid]);
							}
						}
						else
						{
							$flatrate_inperiod_temp[$v_ipid][] = $last_day_flatrate[$v_ipid]; //dummy control
						}
					}

					if(empty($final_flatrate[$v_ipid]))
					{
						$final_flatrate[$v_ipid] = array();
					}

					$final_flatrate[$v_ipid] = array_merge_recursive($final_flatrate[$v_ipid], $flatrate_inperiod_temp[$v_ipid]);
				}


				foreach($final_flatrate[$v_ipid] as $k_fl_day => $v_fl_day)
				{
					$seached_key = '';
					if(!in_array($v_fl_day, $sapv_days_active[$v_ipid]))
					{
						$seached_key = array_search($v_fl_day, $final_flatrate[$v_ipid]);

						if(strlen($seached_key) > '0')
						{
							unset($final_flatrate[$v_ipid][$seached_key]);
							array_values($final_flatrate[$v_ipid]);
						}
					}
					unset($seached_key);
				}

				//get back pay days
				$final_flatrate[$v_ipid]['pay_days'] = $flatrate_structured_inperiod[$v_ipid]['pay_days'];
			}

			return $final_flatrate;
		}

		private function second_patients_performance_overall($ipids, $clientid, $overall_period, $active_days, $set_ids, $flatrate, $master_price_list, $patients_periods_days, $hospital_days = false, $sapv_days = false, $course_days = false, $contact_forms_days = false, $classification_data = false,$patient_days2locationtypes = false)
		{
			foreach($ipids as $k_ipid => $ipid)
			{
				foreach($active_days[$ipid] as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $patients_periods_days[$ipid]))
					{
						$active_days_in_period[$ipid][] = $v_active_day;
					}
				}


				foreach($course_days[$ipid] as $k_course_date => $v_course_details)
				{
					foreach($v_course_details as $k_couse => $v_course)
					{
						if($v_course == 'U' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('1', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['beratung'] += 1;
						}
						else if($v_course == 'V' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('2', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
						}
					}
				}

				$contact_forms_ids[$ipid][] = '999999999';
				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							$contact_forms_ids[$ipid][] = $v_cf['id'];
						}
					}
				}
				ksort($contact_forms_days[$ipid]);

				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data))
						{
							$contact_forms_days_ids[$ipid][$k_cf_day][] = $v_cf['id'];
							$contact_forms2form_types[$ipid][$v_cf['id']][] = $v_cf['form_type'];
						}
					}
				}

				$set_one_ids = $set_ids['one'];
				$set_two_ids = $set_ids['two'];
				$set_three_ids = $set_ids['three'];
				$set_fourth_ids = $set_ids['fourth'];

				$pseudo_overall_shortcuts[$ipid] = array();
				$day_location_type = "";
				foreach($patients_periods_days[$ipid] as $k_period_day => $v_period_day)
				{
					$day_location_type = $patient_days2locationtypes[$ipid][date('d.m.Y',strtotime($v_period_day))];
					
					$day_shortcuts[$ipid] = array();
					if(count($month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}

					$master_data[$ipid][$v_period_day] = array();

					//calculate set one form_type visits
					//first get flatrate exception and set shortcut
					$shortcut[$ipid] = '';
					if(in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$shortcut[$ipid] = '37b1';
						$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = $shortcut[$ipid];
						$pseudo_overall_shortcuts[$ipid][] = $shortcut[$ipid];
					}
					else if(!in_array($v_period_day, $flatrate[$ipid]) && array_key_exists($v_period_day, $contact_forms_days[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid])) //normal set conditions
					{

//					we have visits=> check if there are required visits for this action set
						$set_one_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(count($set_one_result[$ipid]) != 0 && (in_array('3', $sapv_days[$ipid][$v_period_day]) || in_array('4', $sapv_days[$ipid][$v_period_day])))
						{
							$shortcut[$ipid] = '37b2';
						}
					}

					if(!empty($shortcut[$ipid]))
					{
						$day_shortcuts[$ipid][] = $shortcut[$ipid];
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'] = $shortcut[$ipid];
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
						$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
					}

					//sapv overwrite if formtype is set 4
					//calculate set two form_type visits
					//exclude calculation if following shortcuts are calculated on current day

					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_two_result[$ipid] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_two_result[$ipid]) != 0 || in_array('U', $course_days[$ipid][$v_period_day])) && in_array('1', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 && in_array('1', $sapv_days[$ipid][$v_period_day]) )
						)
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								if(is_numeric($k_cf))
								{
									$shortcut[$ipid] = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5')
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}


									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_two_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}
										else if($shortcut[$ipid] == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut[$ipid] = '';

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
								{
									$shortcut[$ipid] = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5')
								{
									$shortcut[$ipid] = '37b6';
								}

								if(!empty($shortcut[$ipid]))
								{
									if($shortcut[$ipid] == '37b5')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
										$pseudo_overall_shortcuts[$ipid][] = '37b5';
									}

									$day_shortcuts[$ipid][] = $shortcut[$ipid];
								}

								if(($shortcut[$ipid] == '37b6' || $shortcut[$ipid] == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && $v_day_course == 'U')
								{
									$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
									$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
									$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
									$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
									$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
								}
							}
						}
					}

					//calculate set three form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
						$set_three_result[$ipid] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(
							(count($set_three_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) &&
							in_array('2', $sapv_days[$ipid][$v_period_day]) ||
							(count($set_ones_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) &&
							in_array('2', $sapv_days[$ipid][$v_period_day])
						)
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform))
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}


									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids[$ipid]))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut[$ipid] = '';
								$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
								{
									if(in_array('4', $sapv_days[$ipid][$v_period_day]))
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate[$ipid]['pay_days']))
									{
										$shortcut[$ipid] = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
								{
									$shortcut[$ipid] = '37b8';
									$week_number[$ipid] = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut[$ipid]))
								{
									if($shortcut[$ipid] == '37b7')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
										$pseudo_overall_shortcuts[$ipid][] = '37b7';
									}

									$day_shortcuts[$ipid][] = $shortcut[$ipid];
								}

								if(($shortcut[$ipid] == '37b7' || $shortcut[$ipid] == '37b8') && $v_day_course == 'V')
								{
									if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$week_numbers_arr[$ipid][] = $week_number[$ipid];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
									else if($shortcut[$ipid] == '37b7')
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}


					//calculate set 4 (ISPC-241)
					$set_fourth_result[$ipid] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

					if(count($set_fourth_result[$ipid]) != 0 && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						//setup each form sapv based on classification block selection
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['intern'] != '1')
							{
								if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									//switch between BE-KO if VV is not BE
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
							}
						}

						//U & V at the top
						//beratung
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								//check if there are 2 beratung change sapv in koord
								if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && count($set_fourth_result[$ipid]) != 0 && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
								}

								if(is_numeric($k_cf) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1')
								{
									$shortcut[$ipid] = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5') //only b5 or b6
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[] = $shortcut[$ipid];
									}


									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}
										else if($shortcut[$ipid] == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
									}
								}
							}
						}

						//koordination
						$last_koord_days[$ipid] = end($last_koord_dates[$ipid]);
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2')
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}
										$day_shortcuts[] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];

										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}

//					TODO:Continue adding [$ipid]
					if(in_array($v_period_day, $sapv_days[$ipid]))
					{
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							//check if contactform type for each days
							if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids))
							{
								if(in_array('4', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
								}
							}
							else
							{
								//sum classifizierung data if form is not housebesuche type(1)
								if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days[$ipid][$v_period_day]) &&
									(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
								}

								$count_be[$ipid][$v_period_day] += 1;
							}
						}
					}
				}


				$fl_start[$ipid] = false;
				foreach($master_data[$ipid] as $k_day => $v_day_values)
				{

					foreach($v_day_values as $k_shortcut => $v_shortcut_values)
					{
						$overall_shortcuts[$ipid][] = $k_shortcut;
						$overall_shortcuts_dates[$ipid][$k_day][] = $k_shortcut;
					}

					if(count($v_day_values) > '0' && count($v_day_values['37b1']) == '0')
					{
						$days_products[$ipid][] = $k_day;
					}
					elseif(count($v_day_values['37b1']) > '0')
					{
						if(!$fl_start[$ipid])
						{
							$fl_start[$ipid] = $k_day;
						}

						$days_products[$ipid][] = $fl_start[$ipid];
					}
				}


				//get days in which sapv is 3 or 4
				foreach($sapv_days[$ipid] as $ksapv_days => $vsapv_days)
				{
					if(in_array('3', $vsapv_days) || in_array('4', $vsapv_days))
					{
						$flatrate_sapv_days[$ipid][] = $ksapv_days;
					}
				}

				//return only the products which have more than 28 days from last billable product
				$pm = new PatientMaster();

				foreach($days_products[$ipid] as $key_day => $v_day)
				{
					if($key_day > '0')
					{
						$prod_gap[$ipid][$v_day] = $pm->getDaysInBetween($days_products[$ipid][($key_day - 1)], $v_day);
//						$prod_gap[$ipid][$v_day] = array_intersect($prod_gap[$ipid][$v_day], $active_days[$ipid], $flatrate_sapv_days[$ipid]);

						$prod_gap[$ipid][$v_day] = array_values(array_unique($prod_gap[$ipid][$v_day]));

						if(count($prod_gap[$ipid][$v_day]) >= '30')
						{
							$last_product_gap_days[$ipid][] = $v_day;
							$master_overall_data[$ipid]['shortcuts'][$v_day] = '37b1';
						}
					}
				}

				$master_overall_data[$ipid]['shortcuts'] = array_values(array_unique($overall_shortcuts[$ipid]));
				$master_overall_data[$ipid]['shortcuts_dates'] = $overall_shortcuts_dates[$ipid];
				$master_overall_data[$ipid]['last_koord_dates'] = array_values(array_unique($last_koord_dates[$ipid]));
				$master_overall_data[$ipid]['days_products'] = array_values(array_unique($last_product_gap_days[$ipid]));
			}

			return $master_overall_data;
		}
		
		private function second_patients_performance_overall_saved($ipids, $clientid, $overall_period, $active_days, $set_ids, $flatrate, $master_price_list, $patients_periods_days, $hospital_days = false, $sapv_days = false, $course_days = false, $contact_forms_days = false, $classification_data = false,$patient_days2locationtypes)
		{
			
			//get saved data ISPC-1927
			$bw_pr = new BwPerformanceRecord();
			$bw_data = $bw_pr->get_multiple_bw_performance_record_in_period($ipids, $patients_periods_days, $master_price_list,$patient_days2locationtypes);
					
			
			foreach($ipids as $k_ipid => $ipid)
			{
				foreach($active_days[$ipid] as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $patients_periods_days[$ipid]))
					{
						$active_days_in_period[$ipid][] = $v_active_day;
					}
				}


				foreach($course_days[$ipid] as $k_course_date => $v_course_details)
				{
					foreach($v_course_details as $k_couse => $v_course)
					{
						if($v_course == 'U' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('1', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['beratung'] += 1;
						}
						else if($v_course == 'V' && in_array($k_course_date, $sapv_days_inperiod[$ipid]) && in_array('2', $sapv_days_overall[$ipid][$k_course_date]))
						{
							$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
						}
					}
				}

				$contact_forms_ids[$ipid][] = '999999999';
				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							$contact_forms_ids[$ipid][] = $v_cf['id'];
						}
					}
				}
				ksort($contact_forms_days[$ipid]);

				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data))
						{
							$contact_forms_days_ids[$ipid][$k_cf_day][] = $v_cf['id'];
							$contact_forms2form_types[$ipid][$v_cf['id']][] = $v_cf['form_type'];
						}
					}
				}

				$set_one_ids = $set_ids['one'];
				$set_two_ids = $set_ids['two'];
				$set_three_ids = $set_ids['three'];
				$set_fourth_ids = $set_ids['fourth'];

				$pseudo_overall_shortcuts[$ipid] = array();
				$day_location_type = "";
				foreach($patients_periods_days[$ipid] as $k_period_day => $v_period_day)
				{

					$day_shortcuts[$ipid] = array();
					
					$day_location_type = $patient_days2locationtypes[$ipid][date('d.m.Y',strtotime($v_period_day))];
					
					
					if(count($month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}

					$master_data[$ipid][$v_period_day] = array();

					//calculate set one form_type visits
					//first get flatrate exception and set shortcut
					$shortcut[$ipid] = '';
					if(in_array($v_period_day, $flatrate[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$shortcut[$ipid] = '37b1';
						$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = $shortcut[$ipid];
						$pseudo_overall_shortcuts[$ipid][] = $shortcut[$ipid];
					}
					else if(!in_array($v_period_day, $flatrate[$ipid]) && array_key_exists($v_period_day, $contact_forms_days[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid])) //normal set conditions
					{

//					we have visits=> check if there are required visits for this action set
						$set_one_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(count($set_one_result[$ipid]) != 0 && (in_array('3', $sapv_days[$ipid][$v_period_day]) || in_array('4', $sapv_days[$ipid][$v_period_day])))
						{
							$shortcut[$ipid] = '37b2';
						}
					}

					if(!empty($shortcut[$ipid]))
					{
						$day_shortcuts[$ipid][] = $shortcut[$ipid];
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'] = $shortcut[$ipid];
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
						$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
						$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
					}

					//sapv overwrite if formtype is set 4
					//calculate set two form_type visits
					//exclude calculation if following shortcuts are calculated on current day

					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_two_result[$ipid] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_two_result[$ipid]) != 0 || in_array('U', $course_days[$ipid][$v_period_day])) && in_array('1', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 && in_array('1', $sapv_days[$ipid][$v_period_day]) )
						)
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								if(is_numeric($k_cf))
								{
									$shortcut[$ipid] = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5')
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}


									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_two_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}
										else if($shortcut[$ipid] == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut[$ipid] = '';

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
								{
									$shortcut[$ipid] = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5')
								{
									$shortcut[$ipid] = '37b6';
								}

								if(!empty($shortcut[$ipid]))
								{
									if($shortcut[$ipid] == '37b5')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
										$pseudo_overall_shortcuts[$ipid][] = '37b5';
									}

									$day_shortcuts[$ipid][] = $shortcut[$ipid];
								}

								if(($shortcut[$ipid] == '37b6' || $shortcut[$ipid] == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && $v_day_course == 'U')
								{
									$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
									$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
									$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
									$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
									$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
								}
							}
						}
					}

					//calculate set three form_type visits
					//exclude calculation if following shortcuts are calculated on current day
					if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
						$set_three_result[$ipid] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(
							(count($set_three_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) &&
							in_array('2', $sapv_days[$ipid][$v_period_day]) ||
							(count($set_ones_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) &&
							in_array('2', $sapv_days[$ipid][$v_period_day])
						)
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform))
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut[$ipid];
									}


									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids[$ipid]))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut[$ipid] = '';
								$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

								if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
								{
									if(in_array('4', $sapv_days[$ipid][$v_period_day]))
									{
										$shortcut[$ipid] = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate[$ipid]['pay_days']))
									{
										$shortcut[$ipid] = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
								{
									$shortcut[$ipid] = '37b8';
									$week_number[$ipid] = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut[$ipid]))
								{
									if($shortcut[$ipid] == '37b7')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
										$pseudo_overall_shortcuts[$ipid][] = '37b7';
									}

									$day_shortcuts[$ipid][] = $shortcut[$ipid];
								}

								if(($shortcut[$ipid] == '37b7' || $shortcut[$ipid] == '37b8') && $v_day_course == 'V')
								{
									if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$week_numbers_arr[$ipid][] = $week_number[$ipid];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
									else if($shortcut[$ipid] == '37b7')
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}


					//calculate set 4 (ISPC-241)
					$set_fourth_result[$ipid] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

					if(count($set_fourth_result[$ipid]) != 0 && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						//setup each form sapv based on classification block selection
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							if($classification_data[$v_cf_day]['intern'] == '0' && $classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0')
							{
								if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
								else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
							}
							else if($classification_data[$v_cf_day]['intern'] != '1')
							{
								if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									//switch between BE-KO if VV is not BE
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
							}
						}

						//U & V at the top
						//beratung
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								//check if there are 2 beratung change sapv in koord
								if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && count($set_fourth_result[$ipid]) != 0 && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
								}

								if(is_numeric($k_cf) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1')
								{
									$shortcut[$ipid] = '';
									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) && !in_array($v_period_day, $flatrate[$ipid]['pay_days']))
									{
										$shortcut[$ipid] = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b5') //only b5 or b6
									{
										$shortcut[$ipid] = '37b6';
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = '37b5';
										}

										$day_shortcuts[] = $shortcut[$ipid];
									}


									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];
										if($shortcut[$ipid] == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}
										else if($shortcut[$ipid] == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
									}
								}
							}
						}

						//koordination
						$last_koord_days[$ipid] = end($last_koord_dates[$ipid]);
						if(!in_array($v_period_day, $flatrate[$ipid]) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2')
								{
									$shortcut[$ipid] = '';

									if(!in_array('37b1', $pseudo_overall_shortcuts[$ipid]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $pseudo_overall_shortcuts[$ipid]))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut[$ipid] = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut[$ipid] = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut[$ipid] != '37b7')
									{
										$shortcut[$ipid] = '37b8';
										$week_number = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut[$ipid]))
									{
										if($shortcut[$ipid] == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = '37b7';
										}
										$day_shortcuts[] = $shortcut[$ipid];
									}

									if(!empty($shortcut[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut'][] = $shortcut[$ipid];

										if($shortcut[$ipid] == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut[$ipid] == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['shortcut_total'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut[$ipid]]['price'] = $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$totals[$ipid][$shortcut[$ipid]] += $master_price_list[$ipid][$v_period_day][0][$day_location_type][$shortcut[$ipid]]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}

//					TODO:Continue adding [$ipid]
					if(in_array($v_period_day, $sapv_days[$ipid]))
					{
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							//check if contactform type for each days
							if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids))
							{
								if(in_array('4', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
								}
							}
							else
							{
								//sum classifizierung data if form is not housebesuche type(1)
								if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days[$ipid][$v_period_day]) &&
									(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
								}

								$count_be[$ipid][$v_period_day] += 1;
							}
						}
					}
				}
				
				/* ###################################### */
				/* ####### SAVED DATA ################### */
				/* ###################################### */
				if(!empty($bw_data[$ipid])){
					// get saved info for month - to see the number of days saved in each month
					$saved_per_moth[$ipid] = array();
					foreach($bw_data[$ipid] as $days=>$vals){
						foreach($vals as $sh=>$shd){
							$saved_per_moth[$ipid][date("mY",strtotime($days))][] = $sh;
						}
					}
					
					foreach($active_days[$ipid] as $k=>$act_day){
						if( isset($bw_data[$ipid][$act_day]) && !empty($bw_data[$ipid][$act_day]) ){ // check if more thant the flatrate from prevoius month is saved.
							if(count($saved_per_moth[$ipid][date("mY",strtotime($act_day))]) >=6 ){
								$final_data[$ipid][$act_day] = $bw_data[$ipid][$act_day]; 
							} else {
								$final_data[$ipid][$act_day] = array_merge($master_data[$ipid][$act_day],$bw_data[$ipid][$act_day]); 
							}
							
						} else {
							$final_data[$ipid][$act_day] = $master_data[$ipid][$act_day]; 
						}
					}
					
					$master_data[$ipid] = array(); 
					$master_data[$ipid] = $final_data[$ipid];
				}
				/* ###################################### */
				
// print_r($master_data);
				$fl_start[$ipid] = false;
				foreach($master_data[$ipid] as $k_day => $v_day_values)
				{

					foreach($v_day_values as $k_shortcut => $v_shortcut_values)
					{
						if($v_shortcut_values['qty']> '0'){
							
							$overall_shortcuts[$ipid][] = $k_shortcut;
							$overall_shortcuts_dates[$ipid][$k_day][] = $k_shortcut;
						}
					}

// 					if(count($v_day_values) > '0' && count($v_day_values['37b1']) == '0')
					if(count($v_day_values) > '0' )
					{
// 						$days_products[$ipid][] = $k_day;
						foreach($v_day_values as $k_shortcut => $v_shortcut_values)
						{
							if($v_shortcut_values['qty']> '0'){
								$days_products[$ipid][] = $k_day;
							}
						}
					}
					elseif(count($v_day_values['37b1']) > '0')
					{
						if(!$fl_start[$ipid])
						{
							$fl_start[$ipid] = $k_day;
						}

						$days_products[$ipid][] = $fl_start[$ipid];
					}
				}
				$days_products[$ipid] = array_unique($days_products[$ipid]);
				$days_products[$ipid] = array_values($days_products[$ipid]);
				

				//get days in which sapv is 3 or 4
				foreach($sapv_days[$ipid] as $ksapv_days => $vsapv_days)
				{
					if(in_array('3', $vsapv_days) || in_array('4', $vsapv_days))
					{
						$flatrate_sapv_days[$ipid][] = $ksapv_days;
					}
				}

				//return only the products which have more than 28 days from last billable product
				$pm = new PatientMaster();

// 				print_r($days_products[$ipid]);// exit;
				
				foreach($days_products[$ipid] as $key_day => $v_day)
				{
					if($key_day > '0')
					{
						$prod_gap[$ipid][$v_day] = $pm->getDaysInBetween($days_products[$ipid][($key_day - 1)], $v_day);
//						$prod_gap[$ipid][$v_day] = array_intersect($prod_gap[$ipid][$v_day], $active_days[$ipid], $flatrate_sapv_days[$ipid]);

						$prod_gap[$ipid][$v_day] = array_values(array_unique($prod_gap[$ipid][$v_day]));

						if(count($prod_gap[$ipid][$v_day]) >= '30')
						{
							$last_product_gap_days[$ipid][] = $v_day;
							$master_overall_data[$ipid]['shortcuts'][$v_day] = '37b1';
						}
					}
				}

				$master_overall_data[$ipid]['shortcuts'] = array_values(array_unique($overall_shortcuts[$ipid]));
				$master_overall_data[$ipid]['shortcuts_dates'] = $overall_shortcuts_dates[$ipid];
				$master_overall_data[$ipid]['last_koord_dates'] = array_values(array_unique($last_koord_dates[$ipid]));
				$master_overall_data[$ipid]['days_products'] = array_values(array_unique($last_product_gap_days[$ipid]));
			}
			
// 			print_r($master_overall_data); exit;

			return $master_overall_data;
		}

		private function multi_patients_flatrate_days_continued($ipids, $clientid, $start, $end, $current_period, $active_days_overall, $cycles, $days_nosapv_overall, $hospital_overall_days, $patients_details, $allowed_flatrate_restart_days)
		{
			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn("ipid", $ipids)
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			//get patients discharges
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids);

			//get client discharge methods
			$discharge_methods = DischargeMethod::getDischargeMethod($clientid, 0);

			//get only dead methods
			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			//get discharged dead date
			foreach($patients_discharge as $k_pat_dis => $v_pat_dis)
			{
				if(in_array($v_pat_dis['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$v_pat_dis['ipid']] = date('Y-m-d', strtotime($v_pat_dis['discharge_date']));
				}
			}

			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
//				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days[$v_sapv['ipid']]))
				{
					$sapv_days[$v_sapv['ipid']] = array();
				}

				$sapv_days[$v_sapv['ipid']] = array_merge_recursive($s_days, $sapv_days[$v_sapv['ipid']]);
			}
			$sapv_days[$v_sapv['ipid']] = array_values(array_unique($sapv_days[$v_sapv['ipid']]));

			foreach($ipids as $k_ipid => $v_ipid)
			{
				$active_days_overall[$v_ipid] = array_diff($active_days_overall[$v_ipid], $hospital_overall_days[$v_ipid]);

				foreach($sapv_days[$v_ipid] as $k_sapv_day => $v_sapv_day)
				{
					$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
					$curent_start_month = date('Ym', strtotime($current_period[$v_ipid]['start']));

					//calculate overall
					if(count($flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall[$v_ipid]))
					{
						$flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
					}
				}

				$sapv_days_active[$v_ipid] = array_intersect($active_days_overall[$v_ipid], $sapv_days[$v_ipid]);
				$sapv_days_active[$v_ipid] = array_values(array_unique($sapv_days_active[$v_ipid]));
				asort($sapv_days[$v_ipid]);

				$sapv_days[$v_ipid] = array_values($sapv_days[$v_ipid]);

				$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
				$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

				if(count($sapv_days_active[$v_ipid]) > '0')
				{
					$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
					$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

					$currtime[$v_ipid] = $last_sapv_day_ts[$v_ipid];
					$discharge_date = end(end($patients_details[$v_ipid]['active_periods']));

					$end_time[$v_ipid] = strtotime(date('Y-m-d', strtotime($discharge_date)));


					$counted_days[$v_ipid] = array();
					$dbg_count[$v_ipid] = array();
					$i = '0';
					$first_flatrate[$v_ipid] = true;

					//while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
					while($currtime[$v_ipid] <= $end_time[$v_ipid])
					{
						$cur_time_formated[$v_ipid] = date('Y-m-d', $currtime[$v_ipid]);

						//not found in nosapv days(possible sapv) check if is not hospital
						if(!in_array($cur_time_formated[$v_ipid], $days_nosapv_overall[$v_ipid]) &&
							in_array($cur_time_formated[$v_ipid], $allowed_flatrate_restart_days[$v_ipid]['days_products']) &&
							in_array($cur_time_formated[$v_ipid], $sapv_days_active[$v_ipid]) &&
							!in_array($cur_time_formated[$v_ipid], $hospital_overall_days[$v_ipid])
						)
						{
							$flatrate_structured[$v_ipid]['pay_days'][] = $cur_time_formated[$v_ipid];

							//get curent fl start day key
							$fl_start_key[$v_ipid] = array_search($cur_time_formated[$v_ipid], $flatrate_structured[$v_ipid]['pay_days']);
							$flatrate_structured[$v_ipid][$fl_start_key[$v_ipid]][] = $cur_time_formated[$v_ipid];

							$i++;
						}

						$currtime[$v_ipid] = strtotime('+1 day', $currtime[$v_ipid]);
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $kk_flatrate => $vv_flatrate)
				{
					$start_fl_period_day[$v_ipid] = $vv_flatrate;
					$i = 0;

					while(count($flatrate_structured[$v_ipid][$kk_flatrate]) < '7')
					{
						if(!in_array($start_fl_period_day[$v_ipid], $hospital_overall_days[$v_ipid]) && in_array($start_fl_period_day[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($start_fl_period_day[$v_ipid], $flatrate_structured[$v_ipid][$kk_flatrate]))
						{
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $start_fl_period_day[$v_ipid];
						}
						else
						{
							//make sure we reach 7 elements
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $vv_flatrate;
						}
						asort($flatrate_structured[$v_ipid][$kk_flatrate]);
						$start_fl_period_day[$v_ipid] = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day[$v_ipid])));
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $k_flatrate => $v_flatrate)
				{
					$max_flatrate_day[$v_ipid][$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

					$flatrate_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;
					$flatrate_structured_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;

					foreach($flatrate_structured[$v_ipid][$k_flatrate] as $k_day_key => $v_day_value)
					{
						if(strtotime($v_day_value) <= $max_flatrate_day[$v_ipid][$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod[$v_ipid]) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
						{
							$flatrate_inperiod[$v_ipid][] = $v_day_value;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_day_value;
						}
						else
						{
							$flatrate_inperiod[$v_ipid][] = $v_flatrate;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_flatrate;
						}
					}
				}

				foreach($flatrate_structured_inperiod[$v_ipid]['pay_days'] as $k_fl_per => $v_fl_per)
				{
					$flatrate_inperiod_temp[$v_ipid] = $flatrate_structured_inperiod[$v_ipid][$k_fl_per];
					$flatrate_inperiod_temp[$v_ipid] = array_values(array_unique($flatrate_inperiod_temp[$v_ipid]));


					$last_day_flatrate[$v_ipid] = end($flatrate_inperiod_temp[$v_ipid]);
					$ts_last_day_flatrate[$v_ipid] = strtotime($last_day_flatrate[$v_ipid]);
					$next_flatrate_day[$v_ipid] = '';
					while(count($flatrate_inperiod_temp[$v_ipid]) < '7')
					{

						if(strlen($next_flatrate_day[$v_ipid]) == '0')
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $ts_last_day_flatrate[$v_ipid]);
						}
						else
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $next_flatrate_day[$v_ipid]);
						}

						//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
						if($next_flatrate_day[$v_ipid] <= strtotime($current_period[$v_ipid]['end']))
						{
							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days_overall[$v_ipid]))
//							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days[$v_ipid]))
							{
								$flatrate_inperiod_temp[$v_ipid][] = date('Y-m-d', $next_flatrate_day[$v_ipid]);
							}
						}
						else
						{
							$flatrate_inperiod_temp[$v_ipid][] = $last_day_flatrate[$v_ipid]; //dummy control
						}
					}

					if(empty($final_flatrate[$v_ipid]))
					{
						$final_flatrate[$v_ipid] = array();
					}

					$final_flatrate[$v_ipid] = array_merge_recursive($final_flatrate[$v_ipid], $flatrate_inperiod_temp[$v_ipid]);
				}

				foreach($final_flatrate[$v_ipid] as $k_fl_day => $v_fl_day)
				{
					$seached_key = '';
					if(!in_array($v_fl_day, $sapv_days_active[$v_ipid]))
					{
						$seached_key = array_search($v_fl_day, $final_flatrate[$v_ipid]);

						if(strlen($seached_key) > '0')
						{
							unset($final_flatrate[$v_ipid][$seached_key]);
							array_values($final_flatrate[$v_ipid]);
						}
					}
					unset($seached_key);
				}

				//get back pay days
				$final_flatrate[$v_ipid]['pay_days'] = $flatrate_structured_inperiod[$v_ipid]['pay_days'];

				//period in which the flatrate is not billed
				$excluded_fl_period = Pms_CommonData::exclude_bw_flatrate($v_ipid);

				if($excluded_fl_period)
				{
					$pre_final_days[$v_ipid] = $final_flatrate[$v_ipid];

					unset($pre_final_days[$v_ipid]['pay_days']);

					$temp_final_fl[$v_ipid]['days'] = array_diff($pre_final_days[$v_ipid], $excluded_fl_period);
					$temp_final_fl[$v_ipid]['pay_days'] = array_diff($final_flatrate[$v_ipid]['pay_days'], $excluded_fl_period);


					if(count($temp_final_fl[$v_ipid]['days']) == '0' || count($temp_final_fl[$v_ipid]['pay_days']) == '0')
					{
						$final_flatrate[$v_ipid] = array();
					}
				}
			}

			return $final_flatrate;
		}
		private function multi_patients_flatrate_days_continued_saved($ipids, $clientid, $start, $end, $current_period, $active_days_overall, $cycles, $days_nosapv_overall, $hospital_overall_days, $patients_details, $allowed_flatrate_restart_days)
		{
			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn("ipid", $ipids)
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			//get patients discharges
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids);

			//get client discharge methods
			$discharge_methods = DischargeMethod::getDischargeMethod($clientid, 0);

			//get only dead methods
			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			//get discharged dead date
			foreach($patients_discharge as $k_pat_dis => $v_pat_dis)
			{
				if(in_array($v_pat_dis['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$v_pat_dis['ipid']] = date('Y-m-d', strtotime($v_pat_dis['discharge_date']));
				}
			}

			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
//				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days[$v_sapv['ipid']]))
				{
					$sapv_days[$v_sapv['ipid']] = array();
				}

				$sapv_days[$v_sapv['ipid']] = array_merge_recursive($s_days, $sapv_days[$v_sapv['ipid']]);
			}
			$sapv_days[$v_sapv['ipid']] = array_values(array_unique($sapv_days[$v_sapv['ipid']]));

			foreach($ipids as $k_ipid => $v_ipid)
			{
				$active_days_overall[$v_ipid] = array_diff($active_days_overall[$v_ipid], $hospital_overall_days[$v_ipid]);

				foreach($sapv_days[$v_ipid] as $k_sapv_day => $v_sapv_day)
				{
					$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
					$curent_start_month = date('Ym', strtotime($current_period[$v_ipid]['start']));

					//calculate overall
					if(count($flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall[$v_ipid]))
					{
						$flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
					}
				}

				$sapv_days_active[$v_ipid] = array_intersect($active_days_overall[$v_ipid], $sapv_days[$v_ipid]);
				$sapv_days_active[$v_ipid] = array_values(array_unique($sapv_days_active[$v_ipid]));
				asort($sapv_days[$v_ipid]);

				$sapv_days[$v_ipid] = array_values($sapv_days[$v_ipid]);

				$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
				$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

				if(count($sapv_days_active[$v_ipid]) > '0')
				{
					$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
					$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

					$currtime[$v_ipid] = $last_sapv_day_ts[$v_ipid];
					$discharge_date = end(end($patients_details[$v_ipid]['active_periods']));

					$end_time[$v_ipid] = strtotime(date('Y-m-d', strtotime($discharge_date)));


					$counted_days[$v_ipid] = array();
					$dbg_count[$v_ipid] = array();
					$i = '0';
					$first_flatrate[$v_ipid] = true;

					//while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
					while($currtime[$v_ipid] <= $end_time[$v_ipid])
					{
						$cur_time_formated[$v_ipid] = date('Y-m-d', $currtime[$v_ipid]);

						//not found in nosapv days(possible sapv) check if is not hospital
						if(!in_array($cur_time_formated[$v_ipid], $days_nosapv_overall[$v_ipid]) &&
							in_array($cur_time_formated[$v_ipid], $allowed_flatrate_restart_days[$v_ipid]['days_products']) &&
							in_array($cur_time_formated[$v_ipid], $sapv_days_active[$v_ipid]) &&
							!in_array($cur_time_formated[$v_ipid], $hospital_overall_days[$v_ipid])
						)
						{
							$flatrate_structured[$v_ipid]['pay_days'][] = $cur_time_formated[$v_ipid];

							//get curent fl start day key
							$fl_start_key[$v_ipid] = array_search($cur_time_formated[$v_ipid], $flatrate_structured[$v_ipid]['pay_days']);
							$flatrate_structured[$v_ipid][$fl_start_key[$v_ipid]][] = $cur_time_formated[$v_ipid];

							$i++;
						}

						$currtime[$v_ipid] = strtotime('+1 day', $currtime[$v_ipid]);
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $kk_flatrate => $vv_flatrate)
				{
					$start_fl_period_day[$v_ipid] = $vv_flatrate;
					$i = 0;

					while(count($flatrate_structured[$v_ipid][$kk_flatrate]) < '7')
					{
						if(!in_array($start_fl_period_day[$v_ipid], $hospital_overall_days[$v_ipid]) && in_array($start_fl_period_day[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($start_fl_period_day[$v_ipid], $flatrate_structured[$v_ipid][$kk_flatrate]))
						{
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $start_fl_period_day[$v_ipid];
						}
						else
						{
							//make sure we reach 7 elements
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $vv_flatrate;
						}
						asort($flatrate_structured[$v_ipid][$kk_flatrate]);
						$start_fl_period_day[$v_ipid] = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day[$v_ipid])));
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $k_flatrate => $v_flatrate)
				{
					$max_flatrate_day[$v_ipid][$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

					$flatrate_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;
					$flatrate_structured_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;

					foreach($flatrate_structured[$v_ipid][$k_flatrate] as $k_day_key => $v_day_value)
					{
						if(strtotime($v_day_value) <= $max_flatrate_day[$v_ipid][$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod[$v_ipid]) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
						{
							$flatrate_inperiod[$v_ipid][] = $v_day_value;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_day_value;
						}
						else
						{
							$flatrate_inperiod[$v_ipid][] = $v_flatrate;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_flatrate;
						}
					}
				}

				foreach($flatrate_structured_inperiod[$v_ipid]['pay_days'] as $k_fl_per => $v_fl_per)
				{
					$flatrate_inperiod_temp[$v_ipid] = $flatrate_structured_inperiod[$v_ipid][$k_fl_per];
					$flatrate_inperiod_temp[$v_ipid] = array_values(array_unique($flatrate_inperiod_temp[$v_ipid]));


					$last_day_flatrate[$v_ipid] = end($flatrate_inperiod_temp[$v_ipid]);
					$ts_last_day_flatrate[$v_ipid] = strtotime($last_day_flatrate[$v_ipid]);
					$next_flatrate_day[$v_ipid] = '';
					while(count($flatrate_inperiod_temp[$v_ipid]) < '7')
					{

						if(strlen($next_flatrate_day[$v_ipid]) == '0')
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $ts_last_day_flatrate[$v_ipid]);
						}
						else
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $next_flatrate_day[$v_ipid]);
						}

						//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
						if($next_flatrate_day[$v_ipid] <= strtotime($current_period[$v_ipid]['end']))
						{
							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days_overall[$v_ipid]))
//							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days[$v_ipid]))
							{
								$flatrate_inperiod_temp[$v_ipid][] = date('Y-m-d', $next_flatrate_day[$v_ipid]);
							}
						}
						else
						{
							$flatrate_inperiod_temp[$v_ipid][] = $last_day_flatrate[$v_ipid]; //dummy control
						}
					}

					if(empty($final_flatrate[$v_ipid]))
					{
						$final_flatrate[$v_ipid] = array();
					}

					$final_flatrate[$v_ipid] = array_merge_recursive($final_flatrate[$v_ipid], $flatrate_inperiod_temp[$v_ipid]);
				}

				foreach($final_flatrate[$v_ipid] as $k_fl_day => $v_fl_day)
				{
					$seached_key = '';
					if(!in_array($v_fl_day, $sapv_days_active[$v_ipid]))
					{
						$seached_key = array_search($v_fl_day, $final_flatrate[$v_ipid]);

						if(strlen($seached_key) > '0')
						{
							unset($final_flatrate[$v_ipid][$seached_key]);
							array_values($final_flatrate[$v_ipid]);
						}
					}
					unset($seached_key);
				}

				//get back pay days
				$final_flatrate[$v_ipid]['pay_days'] = $flatrate_structured_inperiod[$v_ipid]['pay_days'];

				//period in which the flatrate is not billed
				$excluded_fl_period = Pms_CommonData::exclude_bw_flatrate($v_ipid);

				if($excluded_fl_period)
				{
					$pre_final_days[$v_ipid] = $final_flatrate[$v_ipid];

					unset($pre_final_days[$v_ipid]['pay_days']);

					$temp_final_fl[$v_ipid]['days'] = array_diff($pre_final_days[$v_ipid], $excluded_fl_period);
					$temp_final_fl[$v_ipid]['pay_days'] = array_diff($final_flatrate[$v_ipid]['pay_days'], $excluded_fl_period);


					if(count($temp_final_fl[$v_ipid]['days']) == '0' || count($temp_final_fl[$v_ipid]['pay_days']) == '0')
					{
						$final_flatrate[$v_ipid] = array();
					}
				}
			}

			return $final_flatrate;
		}

		//generate leistung page for sapv bw using tcpdf from PHPDocX but with the old ISPC method
		private function generate_joined_files_pdf($chk, $post, $pdfname, $filename)
		{
			$clientid = $this->clientid;
			$clientinfo = Pms_CommonData::getClientData($clientid);

			$excluded_keys = array(
				'stamp_block',
				'kv_header',
				'hi_subdiv_address',
			);
			$post = Pms_CommonData::clear_pdf_data($post, $excluded_keys);

			// sapv questionnaire
			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);

			//dont return the pdf file to user
			if($chk == 4)
			{
				$navnames = array(
					"performancerecordminicontrol" => 'Leistungsnachweis',
					"performancerecordminicontrol_new" => 'Leistungsnachweis',
					"rlp_invoice_visits" => 'Leistungsnachweis Rheinland-Pfalz',
					"bra_anlage_5" => 'Anlage 5',
				);

				if($pdfname == 'performancerecordminicontrol')
				{
					$orientation = 'L';
					$bottom_margin = '20';
					$format = "A4";
				}
				elseif($pdfname == 'performancerecordminicontrol_new')
				{
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
				}
				elseif($pdfname == 'rlp_invoice_visits')
				{
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
				}
				else if($pdfname == 'bra_anlage_5')
				{
					$orientation = 'L';
					$bottom_margin = '20';
					$format = "A4";
				}


				$pdf = new Pms_DocxPDF($orientation, 'mm', $format, true, 'UTF-8', false);
				$pdf->setDefaults(true, $orientation, $bottom_margin); //defaults with header
				$pdf->setImageScale(1.6);
				$pdf->format = $format;
//				$pdf->SetFont('dejavusans', '', 10);

				switch($pdfname)
				{
					case 'performancerecordminicontrol':
						$background_type = false;
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(6, 5, 10); //reset margins
						$pdf->setPrintFooter(false); //remove footer black line
						break;
						
						
					case 'performancerecordminicontrol_new': // the new version
                       $pdf->SetMargins(10, 5, 10);
                       $pdf->SetAutoPageBreak(TRUE, 35);
        			   $pdf->setFooterFont(Array('helvetica', '', 7));
        
        			   $pdf->no_first_page_invoice_footer = false; //remove footer from the first page 
        			   
        			   $pdf->invoice_footer = true; // set special footer
        			   $footer_text = '<table width="100%">
                                        	<tr>
                                        		<td width="45%" style="text-align: left;">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                                        		<td width="10%"></td>
                                        		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                                        	</tr>
                                        	<tr>
                                                <td colsapn="3">&nbsp;</td>
                                        	</tr>
                                        	<tr>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td></td>
                                        		<td style="border-bottom:1px solid #000000;"></td>
                                        	</tr>
                                        	<tr>
                                        		<td>Verantwortlicher Leistungserbinger PCT</td>
                                        		<td></td>
                                        		<td>Versicherter / Bezugsperson</td>
                                        	</tr>
                                            <tr>
                                        		<td colsapn="3">&nbsp;</td>
                                        	</tr>
                                        	<tr>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td style="border-bottom:1px solid #000000;"></td>
                                        	</tr>
                                        	<tr>
                                        		<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                        		<td></td>
                                        		<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                        	</tr>
                                        </table>'; 
        			   
        			   
            		   $pdf->footer_text = $footer_text; // set pdf background only for the first page
        			   $pdf->setPrintFooter(true); // remove black line at bottomC
						break;
						
					case 'rlp_invoice_visits': // the new version
                       $pdf->SetMargins(10, 5, 10);
                       $pdf->SetAutoPageBreak(TRUE, 35);
        			   $pdf->setFooterFont(Array('helvetica', '', 7));
        
        			   $pdf->no_first_page_invoice_footer = false; //remove footer from the first page 
        			   
        			   $pdf->invoice_footer = true; // set special footer
        			   $footer_text = '<table width="100%">
                                        	<tr>
                                        		<td width="45%" style="text-align: left;">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                                        		<td width="10%"></td>
                                        		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                                        	</tr>
                                        	<tr>
                                                <td colsapn="3">&nbsp;</td>
                                        	</tr>
                                        	<tr>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td></td>
                                        		<td style="border-bottom:1px solid #000000;"></td>
                                        	</tr>
                                        	<tr>
                                        		<td>Verantwortlicher Leistungserbinger PCT</td>
                                        		<td></td>
                                        		<td>Versicherter / Bezugsperson</td>
                                        	</tr>
                                            <tr>
                                        		<td colsapn="3">&nbsp;</td>
                                        	</tr>
                                        	<tr>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td style="border-bottom:1px solid #000000;"></td>
                                        	</tr>
                                        	<tr>
                                        		<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                        		<td></td>
                                        		<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                        	</tr>
                                        </table>'; 
        			   
        			   
            		   $pdf->footer_text = $footer_text; // set pdf background only for the first page
        			   $pdf->setPrintFooter(true); // remove black line at bottomC
						break;
						
						
						
					case 'bra_anlage_5':
						$background_type = false;
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(6, 5, 10); //reset margins
						$pdf->setPrintFooter(false); //remove footer black line
						break;
					default:
						exit;
						break;
				}


				if($background_type != false)
				{
					$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], $background_type);
					if($bg_image !== false)
					{
						$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
						if(is_file($bg_image_path))
						{
							$pdf->setBackgroundImage($bg_image_path);
						}
					}
				}

				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

				$excluded_css_cleanup_pdfs = array(
					'performancerecordminicontrol',
					'performancerecordminicontrol_new',
					'rlp_invoice_visits',
					'bra_anlage_5',
				);

				if(!in_array($pdfname, $excluded_css_cleanup_pdfs))
				{
					$html = preg_replace('/style=\"(.*)\"/i', '', $html);
				}

				$pdf->setHTML($html);

				//create public/joined_files/ dir
				while(!is_dir(PDFDOCX_PATH))
				{
					mkdir(PDFDOCX_PATH);
					if($i >= 50)
					{
						exit; //failsafe
					}
					$i++;
				}

				//create public/joined_files/$clientid dir
				$pdf_path = PDFDOCX_PATH . '/' . $clientid;
				while(!is_dir($pdf_path))
				{
					mkdir($pdf_path);
					if($i >= 50)
					{
						exit; //failsafe
					}
					$i++;
				}

				$tmpstmp = $this->view->folder_stamp;
				while(!is_dir($pdf_path . '/' . $tmpstmp))
				{
					mkdir($pdf_path . '/' . $tmpstmp);
					if($i >= 50)
					{
						exit; //failsafe
					}
					$i++;
				}

				//TODO-3441 Ancuta 16.09.2020
				if($pdfname == 'rlp_invoice_visits')
				{
				    $pdfname = $pdfname.'_'.$post['invoice_data']['invoice_number'];
				}
				//--
				$pdf->toFile($pdf_path . '/' . $tmpstmp . '/' . $pdfname . '.pdf');

				return $pdf_path . '/' . $tmpstmp . '/' . $pdfname . '.pdf';
			}
		}

		private function array_sort($array, $on = NULL, $order = SORT_ASC)
		{
			$new_array = array();
			$sortable_array = array();
			if(count($array) > 0)
			{
				foreach($array as $k => $v)
				{
					if(is_array($v))
					{
						foreach($v as $k2 => $v2)
						{
							if($k2 == $on)
							{
								if($on == 'birthd' || $on == 'admissiondate' || $on == 'admission_date' || $on == 'discharge_date' || $on == 'diedon' || $on == 'birthdyears' || $on == 'dischargedate' || $on == 'beginvisit' || $on == 'endvisit' || $on == 'dateofbirth' || $on == 'date' || $on == 'day' || $on == 'assessment_completed_date' || $on == 'visit_date' || $on == 'contact_form_date' || $on == 'first_sapv_active_day' || $on == 'patient_discharge_date' || $on == 'death_date' || $on == 'entry_date')
								{
		
									if($on == 'birthdyears')
									{
										$v2 = substr($v2, 0, 10);
									}
									$sortable_array[$k] = strtotime($v2);
								}
								elseif($on == 'epid')
								{
									$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v2);
								}
								//TODO-3715 Ancuta 05.04.2021
								elseif($on == 'full_invoice_number_sort')
								{
									$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v2);
								}
								//--
								elseif($on == 'percentage')
								{
									$sortable_array[$k] = preg_replace('/[^\d\.]/', '', $v2);
								}
								else
								{
									$sortable_array[$k] = ucfirst($v2);
								}
							}
						}
					}
					else
					{
						if($on == 'birthd' || $on == 'admission_date' || $on == 'admissiondate' || $on == 'discharge_date' || $on == 'diedon' || $on == 'birthdyears' || $on == 'dischargedate' || $on == 'beginvisit' || $on == 'endvisit' || $on == 'dateofbirth' || $on == 'date' || $on == 'day' || $on == 'assessment_completed_date' || $on == 'visit_date' || $on == 'contact_form_date' || $on == 'first_sapv_active_day' || $on == 'patient_discharge_date' || $on == 'death_date')
						{
							if($on == 'birthdyears')
							{
								$v = substr($v, 0, 10);
							}
							$sortable_array[$k] = strtotime($v);
						}
						elseif($on == 'epid' || $on == 'percentage')
						{
							$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v);
						}
						//TODO-3715 Ancuta 05.04.2021
						elseif($on == 'full_invoice_number_sort')
						{
							$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v);
						}
						//--
						elseif($on == 'percentage')
						{
							$sortable_array[$k] = preg_replace('/[^\d\.]/', '', $v2);
						}
						else
						{
							$sortable_array[$k] = ucfirst($v);
						}
					}
				}
				switch($order)
				{
					case SORT_ASC:
						$sortable_array = Pms_CommonData::a_sort($sortable_array);
						break;
		
					case SORT_DESC:
						$sortable_array = Pms_CommonData::ar_sort($sortable_array);
		
						break;
				}
		
				foreach($sortable_array as $k => $v)
				{
					$new_array[$k] = $array[$k];
				}
			}
		
			return $new_array;
		}

		public function brainvoicesAction()
		{
		    $patientmaster = new PatientMaster();
		    $client_details = new Client();
		    $bra_invoices = new BraInvoices();
		    $bra_invoices_items = new BraInvoiceItems();
		    $bra_invoices_form = new Application_Form_BraInvoices();
		    $clientid = $this->clientid;
		
		    
		    $allowed_invoice_name =  "bra_invoice";
		    $this->view->allowed_invoice = $allowed_invoice_name;
		    $invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$this->userid,$allowed_invoice_name );
		    
		    $print_html = '<div class="print_jobs_div">';
		    $print_html .= "<h3> ".$this->translate('print_job_table_headline')."</h3>";
		    $print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$this->userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->translate('Clear_all_prints')."</span>";
		    $table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
		    $print_html .= $table_html;
		    $print_html .= '</div>';
		    if(count($invoice_user_printjobs) > 1 ){
		        echo $print_html;
		    }
		    
		    $this->view->show_print_jobs = $this->user_print_jobs;
		    
		    //---
		    
		
		    //mark invoice as paid from invoices list link
		    if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
		    {
		        if($_REQUEST['mode'] == "paid")
		        {
		            //mark as paid
		            $invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
		            $invoice_pay_data['paymentAmount'] = '0.00';
		            $invoice_pay_data['paymentComment'] = "";
		            $invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
		            $invoice_pay_data['mark_as_paid'] = "1";
		
		            $new_payment = $bra_invoices_form->submit_payment($invoice_pay_data);
		            $this->_redirect(APP_BASE . 'invoicenew/brainvoices');
		            exit;
		        }
		    }
		
		    if($this->getRequest()->isPost())
		    {
		        if($_POST['draftmore'] == "1")
		        {
		            $transform = $bra_invoices_form->ToggleStatusInvoices($_POST['document'], "2", $clientid);
		        }
		        elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
		        {
		            $del_invoice = $bra_invoices_form->delete_multiple_invoices($_POST['document']);
		        }
		        elseif($_POST['archive_invoices_more'] == "1")
		        {
		            $archive = $bra_invoices_form->archive_multiple_invoices($_POST['document'], $clientid);
		        }
		        elseif($_POST['warningmore'] == "1")
		        {
		        	$invoiceids_to_warn = implode(',', $_POST['document']);
		        
		        	$this->forward('generatereminderinvoice', null, null, array());
		        
		        	return;
		        }
		        elseif($_POST['batch_print_more'])
		        {
		            $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
		            $params['batch_print'] = '1'; //enables batch print procedure
		            $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
		            $params['get_pdf'] = '0'; //stops downloading single pdf
		
		            //$this->anlage14_invoice($params);
		            //ISPC-2609 Ancuta 27.08-30.09.2020 :: Do not print, add to print jobs
		            if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
		                
		                
		            } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
		                
		                $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
		                
		                $print_job_data = array();
		                $print_job_data['clientid'] = $clientid;
		                $print_job_data['user'] = $this->userid;
		                $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
		                $print_job_data['output_type'] = 'pdf';
		                $print_job_data['status'] = 'active';
		                $print_job_data['invoice_type'] = 'bra_invoice';
		                $print_job_data['print_params'] = serialize($params);
		                $print_job_data['print_function'] = 'generate_braanlage5_invoice';
		                $print_job_data['print_controller'] = $this->getRequest()->getControllerName();
		                foreach($_POST['document'] as $k=>$inv_id){
		                    $print_job_data['PrintJobsItems'][] = array(
		                        'clientid'=>$print_job_data['clientid'],
		                        'user'=>$print_job_data['user'],
		                        'invoice_id'=>$inv_id,
		                        'invoice_type'=>$print_job_data['invoice_type'],
		                        'status'=>"new"
		                    );
		                }
		                $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
		                $print_id = $PrintJobsBulk_obj->id;
		                
		                if($print_id){
		                    $this->__StartPrintJobs();
		                }
		                
		                
		                
		            }
		        }
		        else
		        {
		            $post = $_POST;
		            $post["mark_as_paid"] = "0";
		            $new_payment = $bra_invoices_form->submit_payment($post);
		        }
		        $msg="";
		        if($print_id){
		            $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
		        }
		        $this->_redirect(APP_BASE . 'invoicenew/brainvoices'.$msg); //to avoid resubmission
		        exit;
		    }
		
		    if($_REQUEST['mode'] == 'setstorno')
		    {
		        if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
		        {
		            $invoiceid = $_REQUEST['inv_id'];
		        }
		        else
		        {
		            $invoiceid = '0';
		        }
		
		        if($invoiceid > '0')
		        {
		            $clone_record = $bra_invoices->create_storno_invoice($invoiceid);
		            $this->_redirect(APP_BASE . 'invoicenew/brainvoices?flg=suc');
		            exit;
		        }
		    }
		
		    if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
		    {
		        $delete_invoice = $bra_invoices_form->delete_invoice($_REQUEST['invoiceid']);
		
		        if($delete_invoice)
		        {
		            $this->_redirect(APP_BASE . 'invoicenew/brainvoices?flg=delsuc');
		        }
		        else
		        {
		            $this->_redirect(APP_BASE . 'invoicenew/brainvoices?flg=delerr');
		        }
		    }
		
		    //construct months array
		    $start_period = '2010-01-01';
		    $end_period = date('Y-m-d', time());
		    $period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
		    $month_select_array['99999999'] = '';
		    foreach($period_months_array as $k_month => $v_month)
		    {
		        $month_select_array[$v_month] = $v_month;
		    }
		
		    //see how many days in selected month
		    $this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
		
		    if(!function_exists('cal_days_in_month'))
		    {
		        $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
		    }
		    else
		    {
		        $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
		    }
		
		    //construct selected month array (start, days, end)
		    $months_details[$selected_month]['start'] = $selected_month . "-01";
		    $months_details[$selected_month]['days_in_month'] = $month_days;
		    $months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
		
		    krsort($month_select_array);
		
		    $this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
		}
		
		public function fetchbrainvoicelistAction()
		{
		    $this->_helper->layout->setLayout('layout_ajax');
		    $hidemagic = Zend_Registry::get('hidemagic');
		
		    $users = new User();
		    $warnings = new RemindersInvoice();
		    $modules = new Modules();
		    $bra_invoices_payments = new BraInvoicePayments();
		
		    $clientid = $this->clientid;		   
		    
		    if($modules->checkModulePrivileges("170", $clientid))
		    {
		    	$this->view->create_bulk_warnings = "1";
		    }
		    else
		    {
		    	$this->view->create_bulk_warnings = "0";
		    }
		    
		    $limit = 50;
		    $this->view->limit = $limit;
		    $filters = array();
		
		    $storno_invoices_q = Doctrine_Query::create()
		    ->select("*")
		    ->from('BraInvoices')
		    ->where('client = "' . $clientid . '"  ')
		    ->andWhere('storno = 1')
		    ->andWhere('isdelete = 0');
		    $storno_invoices_array = $storno_invoices_q->fetchArray();
		
		    $storno_ids_str = '"XXXXXX",';
		    foreach($storno_invoices_array as $k => $st)
		    {
		        $storno_ids[] = $st['record_id'];
		        $storno_ids_str .= '"' . $st['record_id'] . '",';
		    }
		
		    if(empty($storno_ids))
		    {
		        $storno_ids[] = "XXXXXXX";
		    }
		
		    $storno_ids_str = substr($storno_ids_str, 0, -1);
		
		    // get client data
		    $client_details_m = new Client();
		    $client_details = $client_details_m->getClientDataByid($clientid);
		
		    $invoice_due_days = $client_details[0]['invoice_due_days'];
		    $plus_due_days = '+' . $invoice_due_days . ' days';
		    $this->view->plus_due_days = $plus_due_days;
		
		    //process tabs
		    $filters['hiinvoice_search'] = '';
		    switch($_REQUEST['f_status'])
		    {
		        case 'draft':
		            $filters['hiinvoice'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
		            break;
		
		        case 'unpaid':
		            $filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';
		
		            break;
		
		        case 'paid':
		            $filters['hiinvoice'] = ' AND status="3"  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND isdelete=0 AND isarchived ="0"';
		            break;
		
		        case 'deleted':
		            $filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") AND isarchived ="0"';
		            break;
		
		        case 'overdue':
		            // 					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND DATE(NOW()) > DATE(completed_date)  AND isdelete=0 AND isarchived ="0"';
		            $filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
		            break;
		
		        case 'all':
		            $filters['hiinvoice'] = ' AND isarchived ="0"';
		            break;
		        case 'archived':
		            $filters['hiinvoice'] = ' AND isarchived ="1" AND isdelete=0';
		            break;
		
		        default: // unpaid- open
		            $filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';
		            break;
		    }
		
		    if(!empty($_REQUEST['last_name']))
		    {
		        $filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
		    }
		
		    if(!empty($_REQUEST['first_name']))
		    {
		        $filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
		    }
		
		    if(!empty($_REQUEST['epid']))
		    {
		        $filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
		    }
		
		    if(!empty($_REQUEST['rnummer']))
		    {
		        $filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
		        $filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
		    }
		    if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
		    {
		        $filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
		        $filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
		    }
		
		    //get invoice patients
		    $sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
		    $sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
		    $sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
		    $sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
		    $sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
		
		    // if super admin check if patient is visible or not
		    if($this->usertype == 'SA')
		    {
		        $sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
		    }
		
		    if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
		    {
		        //filter patients name/surname/epid
		        $f_patient = Doctrine_Query::create()
		        ->select($sql)
		        ->from('PatientMaster p')
		        ->where("p.isdelete =0")
		        ->leftJoin("p.EpidIpidMapping e")
		        ->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);
		        $f_patients_res = $f_patient->fetchArray();
		
		        $f_patients_ipids[] = '9999999999999';
		        foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
		        {
		            $f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
		        }
		    }
		
		    //all invoices for counting
		    $invoices_counting = Doctrine_Query::create()
		    ->select("*")
		    ->from('BraInvoices')
		    ->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
		    if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
		    {
		        $invoices_counting->andWhereIn('ipid', $f_patients_ipids);
		    }
		
		    $inv2count = $invoices_counting->fetchArray();
		
		    $count_invoices = array();
		
		
		
		    foreach($inv2count as $k_inv2count => $v_inv2count)
		    {
		
		        $count_invoices[$v_inv2count['status']][] = '1';
		
		        if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["draft"][] = '1';
		        }
		
		        if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["unpaid"][] = '1';
		        }
		
		        if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["paid"][] = '1';
		        }
		
		        if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["deleted"][] = '1';
		        }
		
		        if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
		        // 				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($v_inv2count['completed_date']))) && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["overdue"][] = '1';
		        }
		
		        if($v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["all"][] = '1';
		        }
		
		        if($v_inv2count['isarchived'] == "1")
		        {
		            $status_count_invoices["archived"][] = '1';
		        }
		    }
		    //deleted_invoices
		    $del_invoices_counting = Doctrine_Query::create()
		    ->select("*")
		    ->from('BraInvoices')
		    ->where("client='" . $clientid . "'" . $filters['hiinvoice_search']);
		    if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
		    {
		        $del_invoices_counting->andWhereIn('ipid', $f_patients_ipids);
		    }
		    $del_invoices_counting->andWhere("isdelete=1 or status=4");
		    $del_inv2count = $del_invoices_counting->fetchArray();
		    foreach($del_inv2count as $k_del_inv => $v_del_inv)
		    {
		        $counted_del_inv[$v_del_inv['status']][] = '1';
		    }
		
		    //filter invoices status/invoice_number/amount
		    $invoices_nl = Doctrine_Query::create()
		    ->select("*")
		    ->from('BraInvoices')
		    ->where("client='" . $clientid . "'" . $filters['hiinvoice']);
		    if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
		    {
		        $invoices_nl->andWhereIn('ipid', $f_patients_ipids);
		    }
		    $invoices_no_limit = $invoices_nl->fetchArray();
		    $invoices_no_limit[] = "XXXXXX";
		
		
		    $invoice_ipids[] = '99999999999999';
		    foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
		    {
		        $invoice_ipids[] = $v_nl_inv['ipid'];
		    }
		
		    $patient = Doctrine_Query::create()
		    ->select($sql)
		    ->from('PatientMaster p')
		    ->leftJoin("p.EpidIpidMapping e")
		    ->where('e.clientid = ' . $clientid);
		    if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
		    {
		        $patient->andWhereIn('p.ipid', $f_patients_ipids);
		    }
		    $patients_res = $patient->fetchArray();
		
		    if($patients_res)
		    {
		        foreach($patients_res as $k_pat => $v_pat)
		        {
		            $patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
		        }
		    }
		
		    if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
		    {
		        $current_page = $_REQUEST['page'];
		    }
		    else
		    {
		        $current_page = 1;
		    }
		
		    if($_REQUEST['sort'] == 'asc')
		    {
		        $sort = 'asc';
		    }
		    else
		    {
		        $sort = 'desc';
		    }
		
		    switch($_REQUEST['ord'])
		    {
		
		        case 'id':
		            $orderby = 'id ' . $sort;
		            break;
		
		        case 'ln':
		            $orderby = 'epid ' . $sort;
		            break;
		
		        case 'nr':
		            //$orderby = 'invoice_number ' . $sort;
		            $orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
		            break;
		
		        case 'date':
		            $orderby = 'change_date, create_date ' . $sort;
		            break;
		
		        case 'amnt':
		            $orderby = 'invoice_total ' . $sort;
		            break;
		        case 'invoice_date':
		            $orderby = 'completed_date_sort ' . $sort;
		            break;
		
		        default:
		            //$orderby = 'id ' . $sort;
		            $orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
		            break;
		    }
		
		
		
		    $invoices = Doctrine_Query::create()
		    ->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
		    ->from('BraInvoices')
		    ->where("client='" . $clientid . "'" . $filters['hiinvoice'])
		    ->andwhereIn('ipid', $invoice_ipids);
		    $invoices->orderby($orderby);
		    $invoices->offset(($current_page - 1) * $limit);
		    $invoices->limit($limit);
		    $invoicelimit = $invoices->fetchArray();
		
		
		    $invoice_uids[] = '9999999999';
		    foreach($invoicelimit as $k_il => $v_il)
		    {
		        $invoice_ids[] = $v_il['id'];
		        $invoice_uids[] = $v_il['create_user'];
		        $invoice_uids[] = $v_il['change_user'];
		    }
		
		
		    //count tabs contents
		    $invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');
		
		    $counted = array();
		    foreach($invoice_tabs as $tab)
		    {
		        $counted[$tab] += count($status_count_invoices[$tab]);
		    }
		
		    $invoice_uids = array_values(array_unique($invoice_uids));
		    $users_details = $users->getMultipleUserDetails($invoice_uids);
		
		
		    $invoice_payments = $bra_invoices_payments->getInvoicesPaymentsSum($invoice_ids);
		
		    $no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
		    $no_pages = ceil($no_invoices / $limit);
		    
		    $all_warnings = $warnings->get_reminders($invoice_ids, 'bra_invoice', $clientid);
		    
		    foreach ($invoicelimit as &$row) {
		    	if (isset($all_warnings[$row['id']])) {
		    		$row['InvoiceWarnings'] = $all_warnings[$row['id']];
		    	}
		    }
		    //var_dump($invoicelimit); exit;
		
		    $this->view->storned_invoces = BraInvoices::get_storned_invoices($clientid);
		
		    $this->view->invoicelist = $invoicelimit;
		    $this->view->user_details = $users_details;
		    $this->view->patient_details = $patient_details;
		    $this->view->invoice_payments = $invoice_payments;
		    $this->view->current_page = $current_page;
		    $this->view->no_pages = $no_pages;
		    $this->view->no_invoices = $no_invoices;
		    $this->view->orderby = $_REQUEST['ord'];
		    $this->view->sort = $_REQUEST['sort'];
		    $this->view->counted = $counted;
		}
		
		public function bralistpaymentsAction()
		{
		
		    $this->_helper->viewRenderer->setNoRender();
		    $clientid = $this->clientid;
		    $brainvoices = new BraInvoices();
		    $brapayments = new BraInvoicePayments();
		    $brainvoice_form = new Application_Form_BraInvoices();
		
		    $user = new User();
		
		
		    //get allowed client invoices
		    $client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
		    $this->view->allowed_invoice = $client_allowed_invoice[0];
		
		
		    if($_REQUEST['invoiceid'])
		    {
		        $payments = $brapayments->getInvoicePayments($_REQUEST['invoiceid']);
		
		        $users[] = '999999999999';
		        foreach($payments as $k_payment => $v_payment)
		        {
		            $users[] = $v_payment['create_user'];
		        }
		
		        $users_list = $user->getMultipleUserDetails($users);
		
		        foreach($users_list as $k_user => $v_user)
		        {
		            $users_list_details[$v_user['id']] = $v_user;
		        }
		
		        if($_REQUEST['op'] == 'del')
		        {
		            if(count($payments) == 1)
		            {
		                $next = '0';
		            }
		            else
		            {
		                $next = '1';
		            }
		
		
		            $del_payment = $brapayments->delete_invoice_payment($_REQUEST['paymentid']);
		
		            //update invoice status when deleting an payment
		            if($del_payment)
		            {
		                $invoice_payments_sum = $brapayments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
		                $invoice_details = $brapayments->get_invoice($_REQUEST['invoiceid']);
		
		                if($invoice_payments_sum)
		                {
		                    if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
		                    {
		                        $status = '3'; //paid
		                    }
		                    else
		                    {
		                        $status = '5'; //not paid/partial paid
		                    }
		                }
		                else
		                {
		                    //no payments => draft
		                    $status = '2';
		                }
		                $update_status = $brainvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
		            }
		
		            //reload the payments
		            unset($payments);
		            $payments = $brapayments->getInvoicePayments($_REQUEST['invoiceid']);
		        }
		
		        $this->view->payments = $payments;
		        $this->view->users_list = $users_list_details;
		        $payments_list = $this->view->render('invoicenew/bralistpayments.html');
		        echo $payments_list;
		
		        exit;
		    }
		    else
		    {
		        exit;
		    }
		}
		
		public function editbrainvoiceAction()
		{
		    $clientid = $this->clientid;
		    $patientmaster = new PatientMaster();
		    $client_details = new Client();
		    $bra_invoices = new BraInvoices();
		    $bra_invoices_items = new BraInvoiceItems();
		    $bra_invoices_form = new Application_Form_BraInvoices();
		    $hi_perms = new HealthInsurancePermissions();
		    $pflege = new PatientMaintainanceStage();
		    $phelathinsurance = new PatientHealthInsurance();
		    $healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
		    $boxes = new LettersTextBoxes();
		    $letter_boxes_details = $boxes->client_letter_boxes($clientid);
		    $this->view->hide_patient_tab = '1';
		
		    if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
		    {
		        //here get the invoice details
		        $invoice_id = $_REQUEST['invoiceid'];
		        $invoice_data = $bra_invoices->getBraInvoice($invoice_id);
		    }
		    
		
		    if(in_array($invoice_data['id'], BraInvoices::get_storned_invoices($clientid)))
		    {
		        $this->view->has_storno = '1';
		    }
		    else
		    {
		        $this->view->has_storno = '0';
		    }
		
		    if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
		    {
		        $status = '0';
		        if(!empty($_POST['completed']))
		        {
		            $status = '2'; //unpaid
		        }
		        else if(!empty($_REQUEST['edit_invoice']))
		        {
		            $status = '1'; //draft
		        }
		        else if($_POST['deletemore'] == "1")
		        {
		            $status = '4'; //deleted
		        }
		        else if(!empty($_REQUEST['pdf']))
		        {
		            $status = '0'; //no change
		        }
		        else if(!empty($_REQUEST['users_invoice']))
		        {
		            $status = '0'; //no change
		        }
		
		        if(!empty($_POST['paid']))
		        {
		            //mark as paid
		            $invoice_pay_data['invoiceId'] = $_REQUEST['invoiceid'];
		            $invoice_pay_data['paymentAmount'] = '0.00';
		            $invoice_pay_data['paymentComment'] = "";
		            $invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
		            $invoice_pay_data['mark_as_paid'] = "1";
		
		            $new_payment = $bra_invoices_form->submit_payment($invoice_pay_data);
		
		            $this->_redirect(APP_BASE . 'invoicenew/brainvoices');
		            exit;
		        }
		
		        if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
		        {
		            $high_invoice_nr = $bra_invoices->get_next_invoice_number($clientid);
		            $_POST['prefix'] = $high_invoice_nr['prefix'];
		            $_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
		        }
		        else
		        {
		            $_POST['prefix'] = $invoice_data['prefix'];
		            $_POST['invoice_number'] = $invoice_data['invoice_number'];
		        }
		        //save/edit invoice here
		        if(strlen($_POST['invoice']['address']) > 0 ){
		            if(strpos($_POST['invoice']['address'],"style"))
		            {
		                $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
		            }
		            $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
		            $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
		            $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
		        }
		        $edit_invoice = $bra_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);
		
		
		        //redirect to invoices list
		        if(empty($_POST['pdf']))
		        {
		            if($edit_invoice)
		            {
		
		                $this->_redirect(APP_BASE . 'invoicenew/brainvoices?flg=edtsuc');
		            }
		            else
		            {
		                $this->_redirect(APP_BASE . 'invoicenew/brainvoices?flg=edterr');
		            }
		        }
		        elseif($_POST['pdf'])
		        {
		            foreach($_POST['custom'] as $k_item => $v_custom)
		            {
		                $new_invoice_items[] = array(
		                    'shortcut' => $_POST['shortcut'][$k_item],
		                    'description' => $_POST['description'][$k_item],
		                    'qty' => $_POST['qty'][$k_item],
		                    'price' => Pms_CommonData::str2num($_POST['price'][$k_item]),
		                    'total' => Pms_CommonData::str2num($_POST['total'][$k_item]),
		                    'custom' => $v_custom,
		                );
		            }
		            $params['ipids'] = array($invoice_data['ipid']);
		
		            //patient days
		            $conditions['client'] = $this->clientid;
		            $conditions['ipids'] = array($invoice_data['ipid']);
		            $conditions['periods'][0]['start'] = '2009-01-01';
		            $conditions['periods'][0]['end'] = date('Y-m-d');
		
		            $sql = 'e.epid, p.ipid, e.ipid,';
		            $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		            $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		            $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		            $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		            $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		            $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
		            //be aware of date d.m.Y format here
		            $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		
		            $params['invoices'] = array($invoice_data['id']);
		            $params['patient_days'] = $patient_days;
		            $params['get_pdf'] = '1';
		            $params['only_pdf'] = 1;
		            $_REQUEST['type'] = 'pdf';
		
		            $params['custom_data']['address'] = $_POST['invoice']['address'];
		            $params['custom_data']['footer'] = $_POST['footer'];
		            $params['custom_data']['items'] = $new_invoice_items;
		
// 		            print_r($params); exit;
		            
// 		            $this->anlage14_invoice($params);
		            $this->generate_braanlage5_invoice($params);
		            exit;
		        }
		    }
		
		
		    if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
		    {
		        if(!$invoice_data || empty($invoice_data))
		        {
		            $this->_redirect(APP_BASE . 'invoicenew/brainvoices');
		        }
		
		        $patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
		        $client_detail = $client_details->getClientDataByid($invoice_data['client']);
		        $this->view->client_ik = $client_detail[0]['institutskennzeichen'];
		
		        //health insurance
		        $divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
		        $hi_perms_divisions = $divisions;
		
		        //health insurance
		        $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
		        $this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
		        $this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
		        $this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
		
		        if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
		        {
		            $helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
		            $healtharray = $helathins->toArray();
		
		            if(empty($healthinsu_array[0]['name']))
		            {
		                $healthinsu_array[0]['name'] = $healtharray['name'];
		            }
		            if(empty($healthinsu_array[0]['ins_street']))
		            {
		                $healthinsu_array[0]['ins_street'] = $healtharray['street1'];
		            }
		            if(empty($healthinsu_array[0]['ins_zip']))
		            {
		                $healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
		            }
		
		            if(empty($healthinsu_array[0]['ins_city']))
		            {
		                $healthinsu_array[0]['ins_city'] = $healtharray['city'];
		            }
		
		            if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
		            {
		                $this->view->health_insurance_ik = $healtharray['iknumber'];
		            }
		
		            if(strlen($healthinsu_array[0]['kvk_no']) == 0)
		            {
		                $this->view->health_insurance_kassenr = $healtharray['kvnumber'];
		            }
		        }
		
		
		        if($hi_perms_divisions)
		        {
		            $healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
		        }
		
		        $pathealthinsurancenr = "";
		        if(count($healthinsu_array[0]))
		        {
		            $phi_details = $healthinsu_array[0]['name'];
		        }
		        else
		        {
		            $phi_details = "--";
		        }
		
		        $phi_details_sub = $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];
		
		        $this->view->health_insurance = $phi_details;
		        $this->view->hi_subdiv_address = $phi_details_sub;
		
		
		        //pflege
		        //get pflegestuffe in current invoice period
		        $pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);
		
		        if($pflege_arr)
		        {
		            $last_pflege = end($pflege_arr);
		            $this->view->patient_pflegestufe = $last_pflege['stage'];
		        }
		        else
		        {
		            $this->view->patient_pflegestufe = ' - ';
		        }
		
		        if(strlen($invoice_data['address']) == 0)
		        {
		            $invoice_data['address'] = $phi_details_sub;
		        }
		
		
		        $this->view->invoice_data = $invoice_data;
		        $this->view->patient_details = $patient_details;
		        $this->view->client_details = $client_detail[0];
		    }
		    else
		    {
		        //redirect if no invoiceid is present
		        $this->_redirect(APP_BASE . "error/previlege");
		    }
		}
		

		

		//used when generating invoices by link (one at a time normal || storno)
		public function hospizinvoiceAction()
		{
		    if(!empty($_REQUEST['patient']))
		    {
		        $ipid = Pms_CommonData::get_ipid_from_epid($_REQUEST['patient'], $this->clientid);
		
		
		        //patient days
		        $conditions['client'] = $this->clientid;
		        $conditions['ipids'] = array($ipid);
		        $conditions['periods'][0]['start'] = '2009-01-01';
		        $conditions['periods'][0]['end'] = date('Y-m-d');
		
		        $sql = 'e.epid, p.ipid, e.ipid,';
		        $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		        $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		        $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		        $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		        $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		        $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
		        //beware of date d.m.Y format here
		        $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		
		        if($_REQUEST['sapvid'])
		        {
		            $selected_sapv_falls = array($ipid => $_REQUEST['sapvid']);
		
		            //get patients sapvs last fall
		            $patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid), true);
		
		            foreach($selected_sapv_falls as $k_ipid => $fall_id)
		            {
		                $patients_sapv[$k_ipid] = $fall_id;
		                $patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
		            }
		
		            $params['nosapvperiod'][$ipid] = '0';
		            $params['period'] = $patients_selected_periods;
		        }
		        else if(!empty($_REQUEST['list']))
		        {
		            //construct curent month period days
		            $selected_month = $_REQUEST['list'];
		            if(!function_exists('cal_days_in_month'))
		            {
		                $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
		            }
		            else
		            {
		                $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
		            }
		
		            $months_details[$selected_month]['start'] = $selected_month . "-01";
		            $months_details[$selected_month]['days_in_month'] = $month_days;
		            $months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
		            $month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);
		
		            array_walk($month_days_arr, function(&$value) {
		                $value = date("d.m.Y", strtotime($value));
		            });
		            $months_details[$selected_month]['days'] = $month_days_arr;
		
		            //get sapv periods in curent month period and make days
		            if($months_details)
		            {
		                //						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
		                $sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
		
		                $patients_selected_periods = array();
		                foreach($sapv_array as $k_sapv => $v_sapv)
		                {
		                    $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
		                    if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
		                    }
		                    else
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
		                    }
		
		                    if(empty($patients_selected_periods))
		                    {
		                        $patients_selected_periods = array();
		                    }
		
		                    $patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
		                    array_walk($patients_selected_periods, function(&$value) {
		                        $value = date("d.m.Y", strtotime($value));
		                    });
		                    $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                    $existing_sapv_days = $patients_selected_periods;
		                }
		
		                $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                $sapv_days_in_period = array_intersect($month_days_arr, $patients_selected_periods);
		            }
		
		            $params['nosapvperiod'][$ipid] = '1';
		            $params['selected_period'][$ipid] = $months_details[$selected_month];
		            $params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
		            $params['existing_sapv_days'] = array_values($patients_selected_periods);
		            $params['period'][$ipid] = $months_details[$selected_month];
		        }
		        else if(!empty($_REQUEST['admission']))
		        {
		            $selected_period = $_REQUEST['admission'];
		            $admission_start = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['start'];
		            $admission_end = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['end'];
		
		            $period_days_arr = PatientMaster::getDaysInBetween($admission_start, $admission_end);
		
		            array_walk($period_days_arr, function(&$value) {
		                $value = date("d.m.Y", strtotime($value));
		            });
		            $period_details[$selected_period]['start'] = $admission_start;
		            $period_details[$selected_period]['end'] = $admission_end;
		            $period_details[$selected_period]['days'] = $period_days_arr;
		
		            //get sapv periods in curent month period and make days
		            if($period_details[$selected_period])
		            {
		                //						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_period]['start'], $months_details[$selected_period]['end']);
		                $sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $period_details[$selected_period]['start'], $period_details[$selected_period]['end']);
		
		                $patients_selected_periods = array();
		                foreach($sapv_array as $k_sapv => $v_sapv)
		                {
		                    $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
		                    if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
		                    }
		                    else
		                    {
		                        $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
		                    }
		
		                    if(empty($patients_selected_periods))
		                    {
		                        $patients_selected_periods = array();
		                    }
		
		                    $patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
		                    array_walk($patients_selected_periods, function(&$value) {
		                        $value = date("d.m.Y", strtotime($value));
		                    });
		                    $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                    $existing_sapv_days = $patients_selected_periods;
		                }
		
		                $patients_selected_periods = array_values(array_unique($patients_selected_periods));
		                $sapv_days_in_period = array_intersect($period_days_arr, $patients_selected_periods);
		            }
		
		            $params['nosapvperiod'][$ipid] = '1';
		            $params['admissionid'][$ipid] = $selected_period;
		            $params['selected_period'][$ipid] = $period_details[$selected_period];
		            $params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
		            $params['existing_sapv_days'] = array_values($patients_selected_periods);
		            $params['period'][$ipid] = $period_details[$selected_period];
		        }
		
		        $all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipid);
		
		        foreach($all_patients_sapvs as $k_sapv => $v_sapv)
		        {
		            if(empty($sapv_days_overall))
		            {
		                $sapv_days_overall = array();
		            }
		
		
		            $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
		            if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
		            {
		                $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
		            }
		            else
		            {
		                $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
		            }
		
		
		            $sapv_days_overall = array_merge($sapv_days_overall, PatientMaster::getDaysInBetween($start, $end));
		            array_walk($sapv_days_overall, function(&$value) {
		                $value = date("d.m.Y", strtotime($value));
		            });
		            $sapv_days_overall = array_values(array_unique($sapv_days_overall));
		        }
		        $params['sapv_overall'][$ipid] = array_values($sapv_days_overall);
		        $params['ipids'] = array($ipid);
		        $params['patient_sapvs'] = $patients_sapv[$ipid];
		        $params['patient_days'] = $patient_days;
		        $params['get_pdf'] = '1';
		        $params['only_pdf'] = (int) $_REQUEST['only_invoice'];
		        $params['stornopdf'] = (int) $_REQUEST['stornopdf'];
		        $params['stornoid'] = (int) $_REQUEST['stornoid'];
		        if(!empty($_REQUEST['iid']))
		        {
		            $params['invoices'] = array((int) $_REQUEST['iid']);
		        }
		
		        $this->hospizinvoice($params);
		    }
		}
		
		// changed  from private to public ISPC-2609 Ancuta 31.08.2020
		public function hospizinvoice($params)
		{
		    if(isset($params['print_job']) && $params['print_job'] == '1'){
		        $this->_helper->layout->setLayout('layout_ajax');
		        $this->_helper->viewRenderer->setNoRender();
		    }
		    
		    //spl_autoload_register(array('AutoLoader', 'autoloadPdf')); // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
		    $client = new Client();
		    $p_list = new PriceList();
		    $form_types = new FormTypes();
		    $sapvs = new SapvVerordnung();
		    $patientmaster = new PatientMaster();
		    $sapvverordnung = new SapvVerordnung();
		    $pflege = new PatientMaintainanceStage();
		    $hi_perms = new HealthInsurancePermissions();
		    $phelathinsurance = new PatientHealthInsurance();
		    $healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
		    $boxes = new LettersTextBoxes();
		    
		    
		    $hospiz_invoices = new HospizInvoices();
		    $hospiz_invoices_form = new Application_Form_HospizInvoices();
		    
		    
		    $pat_diagnosis = new PatientDiagnosis();
		    //this is the timestamp join folder name!
		    $this->view->folder_stamp = time();
		
		    $clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] : $this->clientid;
		    $userid = $this->userid;
		
		    $letter_boxes_details = $boxes->client_letter_boxes($clientid);
		
		    if(!$clientid)
		    {
		        $this->_redirect(APP_BASE . "error/noclient");
		        exit;
		    }
		    
		    /*
		     * TODO-2805
		     * carmen
		     * 14.01.2020
		     */
		    $modules = new Modules();
		    if($modules->checkModulePrivileges("90", $clientid))
		    {
		    	$debtor_number_module = "1";
		    }
		    else
		    {
		    	$debtor_number_module = "0";
		    }
		   
		    $ppun = new PpunIpid();
		    $ppun_module = $modules->checkModulePrivileges("88", $clientid ) ? "1" : "0" ;
		    // --
		
		    //client_details
		    $users = new User();
		    $client_user_array = $users->getUserByClientid($clientid,0,true,false);
		    	
		    foreach($client_user_array as $k=>$cu)
		    {
		        $user_array[$cu['id']] = $cu;
		        if(strlen($cu['shortname']) >  0){
		            $user_array[$cu['id']]['initials'] = $cu['shortname'];
		        }
		        else
		        {
		            $user_array[$cu['id']]['initials'] = mb_substr($cu['first_name'], 0, 1, "UTF-8") . "" . mb_substr($cu['last_name'], 0, 1, "UTF-8");
		
		        }
		    }
		
		    	
		    //client_details
		    $client_details = $client->getClientDataByid($clientid);
		    $invoices_ids = $params['invoices'];
		    //new invoice required data START
		
		    if(!empty($params['invoices']))
		    {
		        //load invoices data
		        $invoices_data = $hospiz_invoices->get_invoices($params['invoices'],true); //     TODO-2821 ISPC : wrong address in invoice for private patients Ancuta 23.01.2020
		
		        foreach($invoices_data['invoices_data'] as $v_invoice)
		        {
		            $ipids[] = $v_invoice['ipid'];
		
		            $current_period[$v_invoice['ipid']]['start'] = date('Y-m-d', strtotime($v_invoice['invoice_start']));
		            $current_period[$v_invoice['ipid']]['end'] = date('Y-m-d', strtotime($v_invoice['invoice_end']));
		
		            if(empty($current_period[$v_invoice['ipid']]['days']))
		            {
		                $current_period[$v_invoice['ipid']]['days'] = array();
		            }
		
		            $days_arr = $patientmaster->getDaysInBetween($v_invoice['invoice_start'], $v_invoice['invoice_end']);
		            $current_period[$v_invoice['ipid']]['days'] = array_merge($current_period[$v_invoice['ipid']]['days'], $days_arr);
		
		            array_walk_recursive($current_period[$v_invoice['ipid']], function(&$value) {
		                $value = date("d.m.Y", strtotime($value));
		            });
		
		                $days_arr = array();
		        }
		
		        //patient days
		        $conditions['client'] = $clientid;
		        $conditions['ipids'] = $ipids;
		        $conditions['periods'][0]['start'] = '2009-01-01';
		        $conditions['periods'][0]['end'] = date('Y-m-d');
		
		        $sql = 'e.epid, p.ipid, e.ipid,';
		        $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		        $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		        $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		        $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		        $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		        $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
		        //be aware of date d.m.Y format here
		        $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		        $params['patient_days'] = $patient_days;
		        $params['period'] = $current_period;
		    }
		    else
		    {
		        $ipids = $params['ipids'];
		        $current_period = $params['period'];
		        $patient_days = $params['patient_days'];
		    }
		
		    $ipids = array_values(array_unique($ipids));
		    //set current period to work with
		    //shortcuts
		    $shortcuts = Pms_CommonData::get_prices_shortcuts();
		
		    //patient HEALTH INSURANCE START
		    $healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);
		
		    //multiple hi subdivisions && hi subdivisions permissions
		    $divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
		
		    if($divisions)
		    {
		        foreach($healthinsu_multi_array as $k_hi => $v_hi)
		        {
		            $hi_companyids[] = $v_hi['companyid'];
		        }
		
		        $healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($hi_companyids);
		    }
		
		    $alias['home_visit'] = "Hausbesuch";
		    $alias['beratung'] = "Beratung";
		    $alias['koordination'] = "Koordination";
		    	
		    //patient HEALTH INSURANCE END
		    $patient_debitor_details = array();
		    foreach($ipids as $k_ipid => $v_ipid)
		    {
		        $pat_details = $params['patient_days'][$v_ipid]['details'];
		
		        $master_data_all['client']['id'] = $clientid;
		        $master_data_all['ipids'][] = $v_ipid;
		        $master_data_all['patients'][$v_ipid]['details'] = $params['patient_days'][$v_ipid]['details'];
		        $master_data_all['patients'][$v_ipid]['invoice_data']['period'] = $params['period'][$v_ipid];
		        $master_data_all['patients'][$v_ipid]['invoice_data']['sapv'] = $params['period'][$v_ipid];
		        $master_data_all['patients'][$v_ipid]['invoice_data']['admissionid'] = $params['admissionid'][$v_ipid];
		
		        $patient_address[$v_ipid]['address'] = "";
		        if($healthinsu_multi_array[$v_ipid]['privatepatient'] == "1" && strlen($_REQUEST['iid']) == '0')
		        {
		            $patient_address[$v_ipid]['address']  = '&nbsp;' . htmlspecialchars($pat_details['last_name']) . ' ' . htmlspecialchars($pat_details['first_name']) . '<br />';
		            $patient_address[$v_ipid]['address']  .= '&nbsp;' . htmlspecialchars($pat_details['street1']) . '<br />';
		            $patient_address[$v_ipid]['address']  .= '&nbsp;' . htmlspecialchars($pat_details['zip']) . ' ' . '&nbsp;' . htmlspecialchars($pat_details['city']);
		        }
		
		        
		        $hi_name[$v_ipid]['hi_name'] = "";
		        $hi_address[$v_ipid]['address'] = "";
		        $sapv_address[$v_ipid] = "";
		        if(!empty($healthinsu_subdiv_arr[$v_ipid]['3']['name']))
		        {
		            //get new SAPV hi address
		            $hi_name[$v_ipid]['hi_name']  = '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['name'];
		            $hi_address[$v_ipid]['address'] = '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['name'] . '<br />';
		            if($healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider'])
		            {
		                $hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider'] . '<br />';
		            }
		            /* else
		             {
		             $hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['contact_person'] . '<br />';
		             } */
		            	
		            $hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['street1'] . '<br />';
		            $hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city'];
		            
		            $sapv_address[$v_ipid] .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['street1'] . '<br />';
		            $sapv_address[$v_ipid] .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city'];
		        }
		        else
		        {
		            //get old hi_address
		            $hi_name[$v_ipid]['hi_name']  = '&nbsp;' . $healthinsu_multi_array[$v_ipid]['name'];
		            $hi_address[$v_ipid]['address'] = '&nbsp;' . $healthinsu_multi_array[$v_ipid]['company_name'] . '<br />';
		            $hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_insurance_provider'] . '<br />';
		            //$hi_address .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_contactperson'] . '<br />';
		            $hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_street'] . '<br />';
		            $hi_address[$v_ipid]['address'] .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_zip'] . ' ' . $healthinsu_multi_array[$v_ipid]['ins_city'];
		            
		            $sapv_address[$v_ipid] .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_street'] . '<br />';
		            $sapv_address[$v_ipid] .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_zip'] . ' ' . $healthinsu_multi_array[$v_ipid]['ins_city'];
		        }
		
		        // Kv header for the second page
		        $kv_header[$v_ipid]['insurance_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
		
		        if(strlen($healthinsu_multi_array[$v_ipid]['kvk_no']) > 0 )
		        {
		            $kv_header[$v_ipid]['kvnumber'] = $healthinsu_multi_array[$v_ipid]['kvk_no'];
		        }
		        else
		        {
		            $kv_header[$v_ipid]['kvnumber'] = $healthinsu_multi_array[$v_ipid]['company']['kvnumber'];
		        }
		
		        $kv_header[$v_ipid]['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
		        $kv_header[$v_ipid]['insurance_status'] = $healthinsu_multi_array[$v_ipid]['insurance_status'];
		        $master_user_details = new User();
		        $users_details = $master_user_details->getUserDetails($userid);
		        $kv_header[$v_ipid]['betriebsstatten_nr'] = $users_details[0]['betriebsstattennummer'];
		        $kv_header[$v_ipid]['arzt_nr'] = $users_details[0]['LANR'];
		        $kv_header[$v_ipid]['patient_name_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['last_name']) . ", " . htmlspecialchars($params['patient_days'][$v_ipid]['details']['first_name']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);
		        $kv_header[$v_ipid]['patient_birthdate'] =date("d.m.Y",strtotime($params['patient_days'][$v_ipid]['details']['birthd']));
		        $kv_header[$v_ipid]['patient_name'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['last_name']) . ", " . htmlspecialchars($params['patient_days'][$v_ipid]['details']['first_name']);
		        $kv_header[$v_ipid]['patient_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);
		        $kv_header[$v_ipid]['patient_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);
		
		
		
		        $master_data_all['patients'][$v_ipid]['invoice_data']['hi_name'] = $hi_name[$v_ipid]['hi_name'] ;
		        $master_data_all['patients'][$v_ipid]['invoice_data']['hi_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
		        $master_data_all['patients'][$v_ipid]['invoice_data']['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
		        $master_data_all['patients'][$v_ipid]['invoice_data']['privatepatient'] = $healthinsu_multi_array[$v_ipid]['privatepatient'];
		
		        $master_data_all['patients'][$v_ipid]['invoice_data']['address'] = $hi_address[$v_ipid]['address'];
		        $master_data_all['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = $sapv_address[$v_ipid];
		
		    	if(strlen($patient_address[$v_ipid]['address']) > 0)
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['patient_address'] = $patient_address[$v_ipid]['address'];
				} else{
					$master_data_all['patients'][$v_ipid]['invoice_data']['patient_address'] = "";
				}
		
		        $master_data_all['patients'][$v_ipid]['invoice_data']['health_insurance_ik'] = $healthinsu_multi_array[$v_ipid]['institutskennzeichen'];
		        $master_data_all['patients'][$v_ipid]['invoice_data']['health_insurance_kassenr'] = $healthinsu_multi_array[$v_ipid]['kvk_no'];
		
		        $master_data_all['patients'][$v_ipid]['invoice_data']['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
		
		        if($params['period'][$v_ipid]['approved_date'] != '0000-00-00 00:00:00' && strlen($params['period'][$v_ipid]['approved_date']) > 0 && date('Y-m-d', strtotime($params['period'][$v_ipid]['approved_date'])) != '1970-01-01')
		        {
		            $master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_date'] = date('d.m.Y', strtotime($params['period'][$v_ipid]['approved_date']));
		        }
		        else
		        {
		            $master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_date'] = ' - ';
		        }
		
		        if(strlen($params['period'][$v_ipid]['approved_number']) > 0)
		        {
		            $master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_nr'] = $params['period'][$v_ipid]['approved_number'];
		        }
		        else
		        {
		            $master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_nr'] = ' - ';
		        }

		        /*
		         * TODO-2805 carmen 14.01.2020
		         * debtor number
		         */
		        
		        if($debtor_number_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "0")
		        {
		        	//get debtor number from patient healthinsurance
		        	if(strlen($healthinsu_multi_array[$v_ipid]['ins_debtor_number']) > '0')
		        	{
		        		$master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number'] = $healthinsu_multi_array[$v_ipid]['ins_debtor_number'];
		        	}
		        	else
		        	{
		        		$master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number'] = $healthinsu_multi_array[$v_ipid]['company']['debtor_number'];
		        	}
		        }
		        
		        if($debtor_number_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "0")
		        {
		        	//get debtor number from patient healthinsurance
		        	if(strlen($healthinsu_multi_array[$v_ipid]['ins_debtor_number']) > '0')
		        	{
		        		$patient_debitor_details[$v_ipid]['debitor_number'] = $healthinsu_multi_array[$v_ipid]['ins_debtor_number'];
		        	}
		        	else
		        	{
		        		$patient_debitor_details[$v_ipid]['debitor_number'] = $healthinsu_multi_array[$v_ipid]['company']['debtor_number'];
		        	}
		        }
		        if($ppun_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "1")
		        {
		        	//get ppun (private patient unique number)
		        	$ppun_number = $ppun->check_patient_ppun($v_ipid, $clientid);
		        	if($ppun_number)
		        	{
		        		$master_data_all['patients'][$v_ipid]['invoice_data']['ppun'] = $ppun_number['ppun'];
		        		$patient_debitor_details[$v_ipid]['ppun']= $ppun_number['ppun'];
		        		$patient_debitor_details[$v_ipid]['debitor_number']= $ppun_number['ppun'];
		        	}
		        }

		        //--
		        /// diagnosisi data
		
		        //get patient main diagnosis
		        $patient_main_diag[$v_ipid] = $pat_diagnosis->get_main_diagnosis($v_ipid, $clientid);
		        $patient_data_diagnos[$v_ipid]['main_diagnosis'] = implode(', ', $patient_main_diag[$v_ipid]['icd']);
		    }
		    	
		    $all_patients_periods = array();
		    foreach($patient_days as $k_ipid => $patient_data)
		    {
		        //all patients periods
		        $all_patients_periods = array_merge_recursive($all_patients_periods, $patient_data['active_periods']);
		
		        //used in flatrate
		        if(empty($patient_periods[$k_ipid]))
		        {
		            $patient_periods[$k_ipid] = array();
		        }
		
		        array_walk_recursive($patient_data['active_periods'], function(&$value) {
		            $value = date("Y-m-d", strtotime($value));
		        });
		        $patient_periods[$k_ipid] = array_merge($patient_periods[$k_ipid], $patient_data['active_periods']);
		
		        //hospital days cs
		        if(!empty($patient_data['hospital']['real_days_cs']))
		        {
		            $hospital_days_cs[$k_ipid] = $patient_data['hospital']['real_days_cs'];
		            array_walk($hospital_days_cs[$k_ipid], function(&$value) {
		                $value = date("Y-m-d", strtotime($value));
		            });
		        }
		
		        //hospiz days cs
		        if(!empty($patient_data['hospiz']['real_days_cs']))
		        {
		            $hospiz_days_cs[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
		            array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
		                $value = date("Y-m-d", strtotime($value));
		            });
		        }
		
		        //real active days
		        if(!empty($patient_data['real_active_days']))
		        {
		            $active_days_in_period_cs[$k_ipid] = $patient_data['real_active_days'];
		            array_walk($active_days_in_period_cs[$k_ipid], function(&$value) {
		                $value = date("Y-m-d", strtotime($value));
		            });
		        }
		
		        //treatment days
		        if(!empty($patient_data['treatment_days']))
		        {
		            $treatment_days_cs[$k_ipid] = $patient_data['treatment_days'];
		            array_walk($treatment_days_cs[$k_ipid], function(&$value) {
		                $value = date("Y-m-d", strtotime($value));
		            });
		        }
		
		        //active days
		        if(!empty($patient_data['active_days']))
		        {
		            $active_days[$k_ipid] = $patient_data['active_days'];
		            array_walk($active_days[$k_ipid], function(&$value) {
		                $value = date("Y-m-d", strtotime($value));
		            });
		        }
		
		        if(empty($hospital_days_cs[$k_ipid]))
		        {
		            $hospital_days_cs[$k_ipid] = array();
		        }
		
		        if(empty($hospiz_days_cs[$k_ipid]))
		        {
		            $hospiz_days_cs[$k_ipid] = array();
		        }
		
		        $hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);
		    }
		
		    $all_patients_periods = array_values($all_patients_periods);
		
		    foreach($all_patients_periods as $k_period => $v_period)
		    {
		        if(empty($months))
		        {
		            $months = array();
		        }
		
		        $period_months = Pms_CommonData::get_period_months($v_period['start'], $v_period['end'], 'Y-m');
		        $months = array_merge($months, $period_months);
		    }
		    $months = array_values(array_unique($months));
		
		    foreach($months as $k_m => $v_m)
		    {
		        $months_unsorted[strtotime($v_m)] = $v_m;
		    }
		    ksort($months_unsorted);
		    $months = array_values(array_unique($months_unsorted));
		
		    foreach($months as $k_month => $v_month)
		    {
		        if(!function_exists('cal_days_in_month'))
		        {
		            $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
		        }
		        else
		        {
		            $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
		        }
		
		        $months_details[$v_month]['start'] = $v_month . "-01";
		        $months_details[$v_month]['days_in_month'] = $month_days;
		        $months_details[$v_month]['end'] = $v_month . '-' . $month_days;
		
		        $month_select_array[$v_month] = $v_month;
		        $month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
		    }
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    $inserted_invoices = $params['invoices'];
		
		    //load template data
		    $template_data = InvoiceTemplates::get_template($clientid, false, '1', 'hospiz_invoice');
		    	
		    //single invoice print with 2 pages
		    if($params['get_pdf'] == "1")
		    {
		        if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
		        {
		            $invoice_data = $hospiz_invoices->getHospizInvoice($params['stornoid'], false, true);
		            
		            $invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];     //ISPC-2532 Lore 10.11.2020
		            
		            //ISPC-2532 Carmen 18.02.2020 - get the prefix and the number of storno invoice
		            $invoice_data_storno = $hospiz_invoices->get_invoice($inserted_invoices[0]);
		            $invoice_data['prefix'] = $invoice_data_storno[0]['prefix'];
		            $invoice_data['invoice_number'] = $invoice_data_storno[0]['invoice_number'];
		            //--
		        }
		        else
		        {
		            $invoice_data = $hospiz_invoices->getHospizInvoice($inserted_invoices[0], false);
		        }
		
		        if(strlen($invoice_data['address']) > 0 ){
		            if(strpos($invoice_data['address'],"style"))
		            {
		                $invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
		            }
		
		            $invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
		            $invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
		            $invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
		        }
		
		
		        //rewrite invoice_data with custom data (which comes from POST)
		        if($params['custom_data'])
		        {
		            //rewrite custom data from POST to $invoice_data.
		            foreach($params['custom_data'] as $k_custom => $v_custom)
		            {
		                $invoice_data[$k_custom] = $v_custom;
		            }
		        }
		
		        $pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);
		
		        if($pflege_arr)
		        {
		            $last_pflege = end($pflege_arr);
		            $invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
		        }
		        else
		        {
		            $invoice_data['patient_pflegestufe'] = ' - ';
		        }
		
		        //setup tokens (remove pseudopost when all works)
		        //client tokens
		        $tokens['client_ik'] = $client_details[0]['institutskennzeichen'];
		        $tokens['debitoren_nummer_oder_pv'] = "";
		        //patient details tokens
		        $tokens['patienten_id'] = strtoupper(html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
		        $tokens['first_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
		        $tokens['last_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
		        $tokens['birthd'] = date('d.m.Y', strtotime($params['patient_days'][$invoice_data['ipid']]['details']['birthd']));
		        $tokens['street'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
		        $tokens['zip'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
		        $tokens['city'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
		        $tokens['patient_pflegestufe'] = html_entity_decode($invoice_data['patient_pflegestufe'], ENT_QUOTES, 'UTF-8');
		        $tokens['pflegegrad'] = $tokens['patient_pflegestufe'];//ispc-1876 3) add a token $pflegegrad$ which just displays the number of the pflegegrad in the invoice.
		        
		        //health insurance tokens
		        $tokens['insurance_no'] = html_entity_decode($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
                //$tokens['address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');// hospizinvoice :: do not changed for  TODO-1563
                $tokens['address'] = htmlentities($invoice_data['address']);// hospizinvoice :: do not changed for  TODO-1563
		        //$tokens['address'] = $invoice_data['address'];// hospizinvoice :: do not changed for  TODO-1563
                $tokens['SAPV_Rechnungsempfaenger'] = htmlentities($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['sapv_recipient']);//ISPC-1236
		        $tokens['beneficiary_address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');
		
		        //TODO-2866 Lore 30.01.2020
		        $tokens['debitor_number'] = '';
		        $tokens['invoiced_period'] = "";

		        if(!empty($invoice_data['invoice_start']) && $invoice_data['invoice_start'] != "0000-00-00 00:00:00" && !empty($invoice_data['invoice_end']) && $invoice_data['invoice_end'] != "0000-00-00 00:00:00")
		        {
		            $tokens['invoiced_period'] = date('d.m.Y', strtotime($invoice_data['invoice_start'])).'-'.date('d.m.Y', strtotime($invoice_data['invoice_end']));
		        }
		        //.


		        //TODO-2805 carmen 14.01.2020
		        if($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['privatepatient'] == '1'){
		        
		        	if($ppun_module == "1" && strlen($patient_debitor_details[$invoice_data['ipid']]['ppun']) > '0')
		        	{
		        		$tokens['ppun'] = $patient_debitor_details[$invoice_data['ipid']]['ppun'];
		        		$tokens['debtor_number'] = '';
		        		$tokens['debitoren_nummer_oder_pv'] = $patient_debitor_details[$invoice_data['ipid']]['ppun'];
		        		$tokens['debitor_number'] = $patient_debitor_details[$invoice_data['ipid']]['ppun']; //TODO-2866 Ancuta  31.01.2020
		        	}
		        	else
		        	{
						$tokens['debtor_number'] = '';
		        		$tokens['ppun'] = '';
		        		$tokens['debitoren_nummer_oder_pv'] = "";
		        		$tokens['debitor_number'] = ''; //TODO-2866 Ancuta  31.01.2020
		        	}
		        	//--
		        }
		        else
		        {
		        
		        	//if debtor number is active and patient has number saved in invoice db get debtor number
		        	if($debtor_number_module == "1" && strlen($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number']) > '0')
		        	{
		        		$tokens['debtor_number'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number'];
		        		$tokens['debitor_number'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number'];
		        		$tokens['debitoren_nummer_oder_pv'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number'];//TODO-2665 Ancuta 19.11.2019
		        	}
		        	else
		        	{
		        		$tokens['debtor_number'] = '';
		        		$tokens['debitor_number'] = '';
		        		$tokens['debitoren_nummer_oder_pv'] = "";
		        	}
		        }
		       
		        //invoice specific tokens
		        $tokens['invoiced_month'] = "";
		        if(!empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
		        {
		            $tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
		        }
		
		        $tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
		        $tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
		        $tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
		
		        //invoice date
		        if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970")
		        {
		            $tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
		        }
		        else
		        {
		            $tokens['invoice_date'] = '';
		        }
		
		        $Abrechnungszeitraum = "";
		        
		        //start billed action day
		        if($invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_active'])) != "1970")
		        {
		            $tokens['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
		            $Abrechnungszeitraum .= date('d.m.Y', strtotime($invoice_data['start_active']));
		        }
		        else
		        {
		            $tokens['first_active_day'] = '';
		        }
		
		        //end billed action day
		        if($invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_active'])) != "1970")
		        {
		            $tokens['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
		            $Abrechnungszeitraum .= ' - '.date('d.m.Y', strtotime($invoice_data['end_active']));
		        }
		        else
		        {
		            $tokens['last_active_day'] = '';
		        }
		
		        if(strlen($Abrechnungszeitraum) > 0) 
		        {
		            $tokens['Abrechnungszeitraum'] = $Abrechnungszeitraum;
		        } else {
		            $tokens['Abrechnungszeitraum'] = "";
		        }
		        
		        //first sapv day
		        if($invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_sapv'])) != "1970")
		        {
		            $tokens['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
		        }
		        else
		        {
		            $tokens['first_sapv_day'] = '';
		        }
		
		        //last sapv day
		        if($invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_sapv'])) != "1970")
		        {
		            $tokens['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));
		        }
		        else
		        {
		            $tokens['last_sapv_day'] = '';
		        }
		
		        //sapv approve date
		        if($invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['sapv_approve_date'])) != "1970")
		        {
		            $tokens['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
		        }
		        elseif(date('Y', strtotime($sapv_details_data[$invoice_data['ipid']]['approved_date'])) != "1970" && strlen($invoice_data['sapv_approve_date']) > '0')
		        {
		            $tokens['sapv_approve_date'] = $sapv_details_data[$invoice_data['ipid']]['approved_date'];
		        }
		        else
		        {
		            $tokens['sapv_approve_date'] = '';
		        }
		
		        if($invoice_data['sapv_approve_nr'] == "-" || strlen(trim(rtrim($invoice_data['sapv_approve_nr']))) == "0")
		        {
		            $tokens['sapv_approve_nr'] = html_entity_decode($invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
		        }
		        else
		        {
		            $tokens['sapv_approve_nr'] = html_entity_decode($sapv_details_data[$invoice_data['ipid']]['approved_number'], ENT_QUOTES, 'UTF-8');
		        }
		
		        $tokens['footer'] = html_entity_decode($invoice_data['footer'], ENT_QUOTES, 'UTF-8');
		        $tokens['invoice_items'] = $invoice_data['items'];
		
		        if($invoice_data['storno'] == '1')
		        {
		            //rewrite invoice prefix if storned
		            $tokens['prefix'] = 'STORNO_' . $tokens['prefix'];
		        }
		
		        //ISPC-2532 Lore 10.11.2020
		        if($invoice_data_storno[0]['storno'] == '1') {
		            $tokens['full_invoice_number'] = ' Storno '.$tokens['full_invoice_number'];  // ISPC-2532 Ancuta 11.12.2020- comment from 10.12.2020 - overwtite - and add STORNO in front
		            $tokens['full_invoice_number'] .= ' zur Rechnung '.$invoice_data['storned_invoice_number'];
		        }
		        
		        if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
		        {
		            $tokens['unique_id'] = $invoice_data['record_id'];
		            $tokens['invoice_total'] = number_format(($invoice_data['invoice_total'] * (-1)), '2', ',', '.');
		            //TODO-3900 Ancuta 01.03.2021
		            $invoice_data['invoice_total'] = $invoice_data['invoice_total'] * (-1);
		            //-- 
		        }
		        else
		        {
		            $tokens['unique_id'] = $invoice_data['id'];
		            $tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
		        }
		
// 		        $invoice_data['items'] = $this->array_sort($invoice_data['items'], 'shortcut', SORT_ASC);

		        $care_level_balance = 0;
		          foreach( $invoice_data['items'] as $k=>$items_details)
		          {
		              if($items_details['special'] == 0 && $items_details['custom'] == 0 ) {
    		              $invoice_data['hospiz_items'][] = $items_details;
    		              
		              }
		              elseif($items_details['special'] == 1 && $items_details['custom'] == 0 ) { 
    		              $invoice_data['pfl_items'][] = $items_details;
    		              if($items_details['shortcut'] != "care_level_remaining"){
    		                  $care_level_balance += $items_details['total'];
    		              }
		              }
		              elseif($items_details['special'] == 0 && $items_details['custom'] == 1 ) { 
    		              $invoice_data['custom_items'][] = $items_details;
		              }
		          }
		          
		        if(count($invoice_data['items']) > '0')
		        {
		            if($invoice_data['type'] == "private"){

		            	
			            
		            	
		            	// table header
		            	$html_data = "";
			            $html_data .= '<table width="600"  style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;">';
						$html_data .= '<tr>';
							$html_data .= '<td width="210"  style="border-bottom: 1px solid #000000;" width="40%">Rechnungsposition</td>';
							$html_data .= '<td width="120"   style="border-bottom: 1px solid #000000;">Anzahl</td>';
							$html_data .= '<td width="110"  style="border-bottom: 1px solid #000000;"> Einzelpreis  &euro;</td>';
							$html_data .= '<td width="160"  style="border-bottom: 1px solid #000000;" align="right"> Gesamtpreis &euro;</td>';
						$html_data .= '</tr>';
		            
						// products  rows
    		            foreach($invoice_data['hospiz_items'] as $k=>$v_shortcut_values)
    		            {
    		                $html_data .= '<tr>';
    		                $html_data .= '<td align="left">'.$v_shortcut_values['description'].'</td>';
    		                $html_data .= '<td align="left">'.$v_shortcut_values['qty'].'</td>';
    		                $html_data .= '<td align="left">'.number_format($v_shortcut_values['price'], '2', ',', '.').'</td>';
    		                $html_data .= '<td align="right">'.number_format($v_shortcut_values['total'], '2', ',', '.').'</td>';
		                    $html_data .= '</tr>';
    		            }
	                    $html_data .= '</table>';
	                    
	                    // total table	                    
    		            $html_data .= '<table style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;  " width="600"  >';
	                    $html_data .= '<tr>';
	                    $html_data .= '<td style="border-top: 1px solid #000000;"  align="left"><b>Zu zahlender Betrag in EUR</b></td>';
	                    $html_data .= '<td style="border-top: 1px solid #000000;">  </td>';
	                    $html_data .= '<td style="border-top: 1px solid #000000;"  align="right">'.number_format($invoice_data['invoice_total'], '2', ',', '.').'</td>';
	                    $html_data .= '</tr>';
	                    $html_data .= '</table>';
	                    
	                    
	                    
	                    
		            }
                    else
                    {
                    	// table header
			            $html_data = "";
			            $html_data .= '<table width="600"  style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;"  >';
						$html_data .= '<tr>';
							$html_data .= '<td width="210" style="border-bottom: 1px solid #000000;" width="40%">Rechnungsposition</td>';
							$html_data .= '<td width="120"  style="border-bottom: 1px solid #000000;">Anzahl</td>';
							$html_data .= '<td width="110" style="border-bottom: 1px solid #000000;"> Einzelpreis  &euro;</td>';
							$html_data .= '<td width="160" style="border-bottom: 1px solid #000000;" align="right"> Gesamtpreis &euro;</td>';
						$html_data .= '</tr>';
						
						
						// products  rows 1
    		            foreach($invoice_data['hospiz_items'] as $kh=>$v_shortcut_values)
    		            {
    		                $html_data .= '<tr>';
    		                $html_data .= '<td align="left">'.$v_shortcut_values["description"].'</td>';
    		                $html_data .= '<td align="left">'.$v_shortcut_values["qty"].'</td>';
    		                $html_data .= '<td align="left">'.$v_shortcut_values["price"].'</td>';
    		                $html_data .= '<td align="right">'.number_format($v_shortcut_values['total'], '2', ',', '.').'</td>';
		                    $html_data .= '</tr>';
    		            }
    		            $html_data .= '</table>';
    		            // total table
    		            $html_data .= '<table style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;  " width="600"   >';
	                    $html_data .= '<tr>';
	                    $html_data .= '<td colspan="1" style="border-top: 1px solid #000000; border-bottom: 1px solid #000000;"><b>Gesamtkosten</b></td>';
	                    $html_data .= '<td align="right" colspan="1" style="border-top: 1px solid #000000; border-bottom: 1px solid #000000;">'.number_format(($invoice_data['sub_invoice_total']), '2', ',', '.').'</td>';
	                    $html_data .= '</tr>';
	                    $html_data .= '</table>';
	                    
	                    
	                    
	                    // products  rows 2
	                    $html_data .= '<table width="600"  style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;"  >';
    		            foreach($invoice_data['pfl_items'] as $k=>$v_shortcut_values)
    		            {
    		                $html_data .= '<tr>';
    		                $html_data .= '<td align="left">'.$v_shortcut_values['description'].'</td>';
    		                
    		                if($v_shortcut_values['shortcut'] == "care_level_remaining"){
        		                $html_data .= '<td align="left"     ></td>';
        		                $html_data .= '<td align="left"     ></td>';
        		                $html_data .= '<td align="right"  >'.number_format(($invoice_data['sub_invoice_total'] - $care_level_balance), '2', ',', '.').'</td>';
    		                }
    		                else 
    		                {
        		                $html_data .= '<td align="left">'.$v_shortcut_values['qty'].'</td>';
        		                $html_data .= '<td align="left">'.number_format($v_shortcut_values['price'], '2', ',', '.').'</td>';
        		                $html_data .= '<td align="right">'.number_format($v_shortcut_values['total'], '2', ',', '.').'</td>';
    		                    
    		                }
		                    $html_data .= '</tr>';
    		            }
    		            
    		            
    		            // custom products  rows 1
    		            foreach($invoice_data['custom_items'] as $k=>$v_shortcut_values)
    		            {
    		                $html_data .= '<tr>';
    		                $html_data .= '<td align="left">'.$v_shortcut_values['description'].'</td>';
    		                $html_data .= '<td align="left">'.$v_shortcut_values['qty'].'</td>';
    		                $html_data .= '<td align="left">'.number_format($v_shortcut_values['price'], '2', ',', '.').'</td>';
    		                $html_data .= '<td align="right">'.number_format($v_shortcut_values['total'], '2', ',', '.').'</td>';
		                    $html_data .= '</tr>';
    		            }
    		            $html_data .= '</table>';
	                    // total table
	                    $html_data .= '<table style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;  " width="600" >';
	                    $html_data .= '<tr>';
	                    $html_data .= '<td  align="left"  style="border-top: 1px solid #000000; "  ><b>Zu zahlender Gesamtbetrag in EUR</b></td>';
	                    $html_data .= '<td  align="right" style="border-top: 1px solid #000000;  "  ><b>'.number_format($invoice_data['invoice_total'], '2', ',', '.').'</b></td>';
	                    $html_data .= '</tr>';
	                    $html_data .= '</table>';
	                    
	                    
                    }


		           $html_items = $html_data;
		        }
		
		        
		        $html_items = mb_convert_encoding($html_items, 'HTML-ENTITIES', 'UTF-8');
		        $tokens['invoice_items_html'] = $html_items;
		        
		        $current_period_tmp[$invoice_data['ipid']] = $current_period[$invoice_data['ipid']]['days'];
		
		        array_walk($current_period_tmp[$invoice_data['ipid']], function(&$value) {
		            $value = date("Y-m-d", strtotime($value));
		        });
		        $current_period_tmp[$invoice_data['ipid']] = array_values(array_unique($current_period_tmp[$invoice_data['ipid']]));
		
		        foreach($current_period_tmp[$invoice_data['ipid']] as $k_period => $v_period_day)
		        {
		            $current_period_month_days[date('Y-m', strtotime($v_period_day))][] = $v_period_day;
		        }
		
		        $patient_months[$invoice_data['id']] = array_keys($current_period_month_days);
		
		        foreach($patient_months[$invoice_data['id']] as $k_inv_data => $v_inv_month)
		        {
		            if(!function_exists('cal_days_in_month'))
		            {
		                $month_days_nr = date('t', mktime(0, 0, 0, date("n", strtotime($v_inv_month . "-01")), 1, date("Y", strtotime($v_inv_month . "-01"))));
		            }
		            else
		            {
		                $month_days_nr = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_inv_month . "-01")), date("Y", strtotime($v_inv_month . "-01")));
		            }
		
		            $start_month = $v_inv_month . "-01";
		            $end_month = $v_inv_month . '-' . $month_days_nr;
		
		            $month_days_arr_source[$invoice_data['id']][date('Y-m', strtotime($start_month))] = $patientmaster->getDaysInBetween($start_month, $end_month);
		        }
		
		
		        $invoice_control_sheet_data['kv_header'] = $kv_header[$invoice_data['ipid']];
		        $invoice_control_sheet_data['patient_data'] = $patient_data_diagnos[$invoice_data['ipid']];
		        $invoice_control_sheet_data['alias'] = $alias;
		
		        //organize leistung data
		        $invoice_control_sheet_data['patientdetails'] = $params['patient_days'][$invoice_data['ipid']]['details'];
		
		        $invoice_control_sheet_data['period_days_source'] = $month_days_arr_source[$invoice_data['id']];
		        // print_r($extra_details);exit;
		        $invoice_control_sheet_data['period_days'] = $current_period_tmp[$invoice_data['ipid']];
		        $invoice_control_sheet_data['shortcuts'] = $shortcuts['performance'];
		        $invoice_control_sheet_data['master_data'] = $master_data[$invoice_data['ipid']];
		        $invoice_control_sheet_data['classification_box'] = $clasifizierung[$invoice_data['ipid']];
		        $invoice_control_sheet_data['extra_data_details'] = $extra_details[$invoice_data['ipid']];
		        $invoice_control_sheet_data['users_array'] = $user_array ;
		        $invoice_control_sheet_data['client_details'] = $client_details[0];
		        $invoice_control_sheet_data['health_insurance'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['hi_name'];
		        $invoice_control_sheet_data['insurance_no'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'];
		        $invoice_control_sheet_data['hi_subdiv_address'] = $invoice_data['address'];
		        $invoice_control_sheet_data['patient_pflegestufe'] = $patients_pflege[$v_pflege['ipid']];
		        $invoice_control_sheet_data['health_insurance_ik'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['health_insurance_ik'];
		        $invoice_control_sheet_data['health_insurance_kassenr'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['health_insurance_kassenr'];
		        $invoice_control_sheet_data['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
		        $invoice_control_sheet_data['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
		        $invoice_control_sheet_data['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
		        $invoice_control_sheet_data['sapv_approve_nr'] = $invoice_data['sapv_approve_nr'];
		        $invoice_control_sheet_data['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
		        $invoice_control_sheet_data['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));
		
		        $invoice_control_sheet_data['invoice_data']['invoice_number'] =  html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');;
		        $invoice_control_sheet_data['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
		        $invoice_control_sheet_data['invoice_data']['invoice_end']  = date('d.m.Y', strtotime($invoice_data['invoice_end']));

		        $temp_files = array();
		        if($template_data)
		        {
		            //generate invoice page
		            $temp_files[] = $this->generate_file($template_data[0], $tokens, 'pdf', $this->view->folder_stamp, 'generate_pdf');
		
		            //generate leistung page
		            //$temp_files[] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'performancerecordminicontrol', 'performancerecordminipdf.html');
		            	
		            // Changed for  ISPC-1562 BW Nachweis - added a new pdf version
// 		            $temp_files[] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'performancerecordminicontrol_new', 'performancerecordpdf_items.html');
		
		            //join generated files
		            if(count($temp_files) > '0')
		            {
		                $final_file = $this->generate_file($template_data[0], false, 'pdf', $this->view->folder_stamp, 'merge_pdfs', $temp_files);
		            }
		        }
		        else
		        {
// 		            $this->redirect(APP_BASE . 'invoicenew/newinvoicepatientlist?flg=notemplate');
		            $this->redirect(APP_BASE . 'invoicenew/invoicesnew?flg=notemplate');
		            exit;
		        }
		    }
		
		    //batch print - multiple invoices each with 2 joined pages! // 3 pages fro the new invoice
		    if($params['batch_print'] == '1' && count($params['invoices']) > '0')
		    {
		        //batch temp folder
		        $invoices_ids = $params['invoices'];
		        
		        //load invoices data
		        $invoices_data = $hospiz_invoices->get_invoices($invoices_ids,true);//     TODO-2821 ISPC : wrong address in invoice for private patients Ancuta 23.01.2020
		
		        //TODO-3407 Ancuta 08.09.2020
		        if(empty($invoices_data)){
		            return;
		        }
		        // -- 
		        
		        // ISPC-2472  Ancuta 12.11.2019::create batch name
		        $inv_names = array();
		        foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
		            $inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
		        }
		        $Batch_name = false;
		        if(!empty($inv_names)){
		            $Batch_name = $inv_names[0];
		            if( count($inv_names) > 1){
		                $Batch_name .='_'.end($inv_names);
		            }
		        }
		        //--		        
		        
		        $final_files = array();
		
		        foreach($invoices_data['invoices_data'] as $k_invoice_id => $v_invoice_data)
		        {
		            $batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $clientid);
		
		            //fucking pflegestuffe i hate how this shit is saved!!! -- change this shit sometime to a better way
		            $pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($v_invoice_data['ipid'], date('Y-m-d', strtotime($v_invoice_data['invoice_start'])), date('Y-m-d', strtotime($v_invoice_data['invoice_end'])));

		            if($pflege_arr)
		            {
		                $last_pflege = end($pflege_arr);
		                $v_invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
		            }
		            else
		            {
		                $v_invoice_data['patient_pflegestufe'] = ' - ';
		            }
		
		            	
		            if(strlen($invoice_data['address']) > 0 ){
		                if(strpos($invoice_data['address'],"style"))
		                {
		                    $invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
		                }
		                	
		                $invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
		                $invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
		                $invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
		            }
		            	
		            	
		            //setup tokens
		            //client tokens
		            $tokens_multi['client_ik'] = $client_details[0]['institutskennzeichen'];
		            $tokens_multi['debitoren_nummer_oder_pv'] = "";
		            //patient details tokens
		            $tokens_multi['patienten_id'] = strtoupper(html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
		            $tokens_multi['first_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
		            $tokens_multi['last_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
		            $tokens_multi['birthd'] = date('d.m.Y', strtotime($patient_days[$v_invoice_data['ipid']]['details']['birthd']));
		            $tokens_multi['street'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
		            $tokens_multi['zip'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
		            $tokens_multi['city'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
		            $tokens_multi['patient_pflegestufe'] = $v_invoice_data['patient_pflegestufe'];
		            $tokens_multi['pflegegrad'] = $tokens_multi['patient_pflegestufe'];//ispc-1876 3) add a token $pflegegrad$ which just displays the number of the pflegegrad in the invoice.
		            
		            //health insurance tokens
		            //$tokens_multi['insurance_no'] = html_entity_decode($patient_days['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
		            $tokens_multi['insurance_no'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'];
		            $tokens_multi['beneficiary_address'] = html_entity_decode($v_invoice_data['address'], ENT_QUOTES, 'UTF-8');
		
		            $tokens_multi['address'] = htmlentities($v_invoice_data['address']);// hospizinvoice :: do not changed for  TODO-1563
		            //$tokens_multi['address'] = htmlentities($v_invoice_data['address']); //  TODO-1563
		            $tokens_multi['SAPV_Rechnungsempfaenger'] = htmlentities($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['sapv_recipient']);//ISPC-1236
		            //TODO-2805 carmen 14.01.2020
		            //if debtor number is active and patient has number saved in invoice db get debtor number< for this invoice, no debtor_number in db
		            $tokens_multi['debitoren_nummer_oder_pv'] = "";
		            if($debtor_number_module == "1" && strlen($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number']) > '0')
		            {
		            	$tokens_multi['debtor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
		            	$tokens_multi['debitor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
		            }
		            else
		            {
		            	$tokens_multi['debtor_number'] = '';
		            	$tokens_multi['debitor_number'] = '';
		            }
		            
		            if($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['privatepatient'] == '1'){
		            		
		            	if($ppun_module == "1" && strlen($patient_debitor_details[$v_invoice_data['ipid']]['ppun']) > '0')
		            	{
		            		$tokens_multi['ppun'] = $patient_debitor_details[$v_invoice_data['ipid']]['ppun'];
		            		$tokens_multi['debtor_number'] = '';
		            		$tokens_multi['debitoren_nummer_oder_pv'] = $patient_debitor_details[$v_invoice_data['ipid']]['ppun'];
		            		$tokens_multi['debitor_number'] = $patient_debitor_details[$v_invoice_data['ipid']]['ppun']; //TODO-2866 Ancuta  31.01.2020
		            	}
		            	else
		            	{
		            		$tokens_multi['debtor_number'] = '';
		            		$tokens_multi['ppun'] = '';
		            		$tokens_multi['debitoren_nummer_oder_pv'] = "";
		            		$tokens_multi['debitor_number'] = ""; //TODO-2866 Ancuta  31.01.2020
		            	}
		            	//--
		            }
		            else
		            {
		            		
		            	//if debtor number is active and patient has number saved in invoice db get debtor number
		            	if($debtor_number_module == "1" && strlen($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number']) > '0')
		            	{
		            		$tokens_multi['debtor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
		            		$tokens_multi['debitor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
		            		$tokens_multi['debitoren_nummer_oder_pv'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
		            	}
		            	else
		            	{
		            		$tokens_multi['debtor_number'] = '';
		            		$tokens_multi['debitor_number'] = '';
		            		$tokens_multi['debitoren_nummer_oder_pv'] = "";
		            	}
		            }
		            //--
		           
		            //invoice specific tokens
		            $tokens_multi['invoiced_month'] = "";
		            if(!empty($v_invoice_data['invoiced_month']) && $v_invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
		            {
		                $tokens_multi['invoiced_month'] = date('m/Y', strtotime($v_invoice_data['invoiced_month']));
		            }
		
		            $tokens_multi['prefix'] = html_entity_decode($v_invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
		            $tokens_multi['invoice_number'] = html_entity_decode($v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
		            $tokens_multi['full_invoice_number'] = html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
		
		            //invoice date
		            if($v_invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['completed_date'])) != "1970")
		            {
		                $tokens_multi['invoice_date'] = date('d.m.Y', strtotime($v_invoice_data['completed_date']));
		            }
		            else
		            {
		                $tokens_multi['invoice_date'] = '';
		            }
		
		            
		            //TODO-2866 Lore 30.01.2020
		            $tokens_multi['invoiced_period'] = "";
		            
		            if(!empty($v_invoice_data['invoice_start']) && $v_invoice_data['invoice_start'] != "0000-00-00 00:00:00" && !empty($v_invoice_data['invoice_end']) && $v_invoice_data['invoice_end'] != "0000-00-00 00:00:00")
		            {
		                $tokens_multi['invoiced_period'] = date('d.m.Y', strtotime($v_invoice_data['invoice_start'])).'-'.date('d.m.Y', strtotime($v_invoice_data['invoice_end']));
		            }
		            //.
		            
		            //start billed action day
		            $Abrechnungszeitraum = "";     // TODO-2822  ISPC : different print views in invoices ANcuta 17.01.2020 - Added Abrechnungszeitraum to  batch print
		            
		            if($v_invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_active'])) != "1970")
		            {
		                $tokens_multi['first_active_day'] = date('d.m.Y', strtotime($v_invoice_data['start_active']));
		                $Abrechnungszeitraum .= date('d.m.Y', strtotime($v_invoice_data['start_active'])); // TODO-2822  ISPC : different print views in invoices ANcuta 17.01.2020 - Added Abrechnungszeitraum to  batch print
		            }
		            else
		            {
		                $tokens_multi['first_active_day'] = '';
		            }
		
		            //end billed action day
		            if($v_invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_active'])) != "1970")
		            {
		                $tokens_multi['last_active_day'] = date('d.m.Y', strtotime($v_invoice_data['end_active']));
		                $Abrechnungszeitraum .= ' - '.date('d.m.Y', strtotime($v_invoice_data['end_active'])); // TODO-2822  ISPC : different print views in invoices ANcuta 17.01.2020 - Added Abrechnungszeitraum to  batch print
		            }
		            else
		            {
		                $tokens_multi['last_active_day'] = '';
		            }
		            // TODO-2822  ISPC : different print views in invoices ANcuta 17.01.2020 - Added Abrechnungszeitraum to  batch print
		            if(strlen($Abrechnungszeitraum) > 0)
		            {
		                $tokens_multi['Abrechnungszeitraum'] = $Abrechnungszeitraum;
		            } else {
		                $tokens_multi['Abrechnungszeitraum'] = "";
		            }
		            //
		            
		            
		            //first sapv day
		            if($v_invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_sapv'])) != "1970")
		            {
		                $tokens_multi['first_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['start_sapv']));
		            }
		            else
		            {
		                $tokens_multi['first_sapv_day'] = '';
		            }
		
		            //last sapv day
		            if($v_invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_sapv'])) != "1970")
		            {
		                $tokens_multi['last_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['end_sapv']));
		            }
		            else
		            {
		                $tokens_multi['last_sapv_day'] = '';
		            }
		
		            //sapv approve date
		            if($v_invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['sapv_approve_date'])) != "1970")
		            {
		                $tokens_multi['sapv_approve_date'] = date('d.m.Y', strtotime($v_invoice_data['sapv_approve_date']));
		            }
		            else
		            {
		                $tokens_multi['sapv_approve_date'] = '';
		            }
		
		            //$tokens_multi['sapv_approve_nr'] = html_entity_decode($v_invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
		
		            if($v_invoice_data['sapv_approve_nr'] == "-" || strlen(trim(rtrim($v_invoice_data['sapv_approve_nr']))) == "0")
		            {
		            	$tokens_multi['sapv_approve_nr'] = html_entity_decode($v_invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
		            }
		            else
		            {
		            	$tokens_multi['sapv_approve_nr'] = html_entity_decode($sapv_details_data[$v_invoice_data['ipid']]['approved_number'], ENT_QUOTES, 'UTF-8');
		            }
		            
		            $tokens_multi['footer'] = html_entity_decode($v_invoice_data['footer'], ENT_QUOTES, 'UTF-8');
		
		            if($v_invoice_data['storno'] == '1')
		            {
		                //rewrite invoice prefix if storned
		                $tokens_multi['prefix'] = 'STORNO_' . $tokens['prefix'];
		                $tokens_multi['unique_id'] = $v_invoice_data['record_id'];
		                $tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total'] * (-1)), '2', ',', '.');
		            }
		            else
		            {
		                $tokens_multi['unique_id'] = $v_invoice_data['id'];
		                $tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total']), '2', ',', '.');
		            }
		            
		            $v_invoice_data['items'] = $this->array_sort($v_invoice_data['items'], 'shortcut', SORT_ASC);
		            
		            $care_level_balance = 0;
		            foreach( $v_invoice_data['items'] as $k=>$items_details)
		            {
		            	if($items_details['special'] == 0 && $items_details['custom'] == 0 ) {
		            		$v_invoice_data['hospiz_items'][] = $items_details;
		            
		            	}
		            	elseif($items_details['special'] == 1 && $items_details['custom'] == 0 ) {
		            		$v_invoice_data['pfl_items'][] = $items_details;
		            		if($items_details['shortcut'] != "care_level_remaining"){
		            			$care_level_balance += $items_details['total'];
		            		}
		            	}
		            	elseif($items_details['special'] == 0 && $items_details['custom'] == 1 ) {
		            		$v_invoice_data['custom_items'][] = $items_details;
		            	}
		            }
		
		            if($v_invoice_data['type'] == "private"){
		            
		            	 
		            	 
		            	 
		            	// table header
		            	$html_data = "";
		            	$html_data .= '<table width="600"  style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;">';
		            	$html_data .= '<tr>';
		            	$html_data .= '<td width="210" style="border-bottom: 1px solid #000000;" width="40%">Rechnungsposition</td>';
		            	$html_data .= '<td width="120"  style="border-bottom: 1px solid #000000;">Anzahl</td>';
		            	$html_data .= '<td width="110" style="border-bottom: 1px solid #000000;"> Einzelpreis  &euro;</td>';
		            	$html_data .= '<td width="150" style="border-bottom: 1px solid #000000;" align="right"> Gesamtpreis &euro;</td>';
		            	$html_data .= '</tr>';
		            
		            	// products  rows
		            	foreach($v_invoice_data['hospiz_items'] as $k=>$v_shortcut_values)
		            	{
		            		$html_data .= '<tr>';
		            		$html_data .= '<td align="left">'.$v_shortcut_values['description'].'</td>';
		            		$html_data .= '<td align="left">'.$v_shortcut_values['qty'].'</td>';
		            		$html_data .= '<td align="left">'.number_format($v_shortcut_values['price'], '2', ',', '.').'</td>';
		            		$html_data .= '<td align="right">'.number_format($v_shortcut_values['total'], '2', ',', '.').'</td>';
		            		$html_data .= '</tr>';
		            	}
		            	$html_data .= '</table>';
		            	 
		            	// total table
		            	$html_data .= '<table style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;  " width="600"  >';
		            	$html_data .= '<tr>';
		            	$html_data .= '<td  align="left"  style="border-top: 1px solid #000000; "  ><b>Zu zahlender Betrag in EUR</b></td>';
		            	$html_data .= '<td                style="border-top: 1px solid #000000;">  </td>';
		            	$html_data .= '<td  align="right" style="border-top: 1px solid #000000;  "  >'.number_format($v_invoice_data['invoice_total'], '2', ',', '.').'</td>';
		            	$html_data .= '</tr>';
		            	$html_data .= '</table>';
		            	 
		            	 
		            	 
		            	 
		            }
		            else
		            {
		            	// table header
		            	$html_data = "";
		            	$html_data .= '<table width="600"  style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;"  >';
		            	$html_data .= '<tr>';
		            	$html_data .= '<td width="210" style="border-bottom: 1px solid #000000;" width="40%">Rechnungsposition</td>';
		            	$html_data .= '<td width="120"  style="border-bottom: 1px solid #000000;">Anzahl</td>';
		            	$html_data .= '<td width="110" style="border-bottom: 1px solid #000000;"> Einzelpreis  &euro;</td>';
		            	$html_data .= '<td width="160" style="border-bottom: 1px solid #000000;" align="right" > Gesamtpreis &euro;</td>';
		            	$html_data .= '</tr>';
		            
		            
		            	// products  rows 1
		            	foreach($v_invoice_data['hospiz_items'] as $kh=>$v_shortcut_values)
		            	{
		            		$html_data .= '<tr>';
		            		$html_data .= '<td align="left">'.$v_shortcut_values["description"].'</td>';
		            		$html_data .= '<td align="left">'.$v_shortcut_values["qty"].'</td>';
		            		$html_data .= '<td align="left">'.$v_shortcut_values["price"].'</td>';
		            		$html_data .= '<td align="right">'.number_format($v_shortcut_values['total'], '2', ',', '.').'</td>';
		            		$html_data .= '</tr>';
		            	}
		            	$html_data .= '</table>';
		            	// total table
		            	$html_data .= '<table style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;  " width="600"   >';
		            	$html_data .= '<tr>';
		            	$html_data .= '<td style="border-top: 1px solid #000000; border-bottom: 1px solid #000000;"><b>Gesamtkosten</b></td>';
		            	$html_data .= '<td style="border-top: 1px solid #000000; border-bottom: 1px solid #000000;" align="right" >'.number_format(($v_invoice_data['sub_invoice_total']), '2', ',', '.').'</td>';
		            	$html_data .= '</tr>';
		            	$html_data .= '</table>';
		            	 
		            	 
		            	 
		            	// products  rows 2
		            	$html_data .= '<table width="600"  style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;"  >';
		            	foreach($v_invoice_data['pfl_items'] as $k=>$v_shortcut_values)
		            	{
		            		$html_data .= '<tr>';
		            		$html_data .= '<td align="left">'.$v_shortcut_values['description'].'</td>';
		            
		            		if($v_shortcut_values['shortcut'] == "care_level_remaining"){
		            			$html_data .= '<td align="left"></td>';
		            			$html_data .= '<td align="left"></td>';
		            			$html_data .= '<td align="right">'.number_format(($v_invoice_data['sub_invoice_total'] - $care_level_balance), '2', ',', '.').'</td>';
		            		}
		            		else
		            		{
		            			$html_data .= '<td align="left">'.$v_shortcut_values['qty'].'</td>';
		            			$html_data .= '<td align="left">'.number_format($v_shortcut_values['price'], '2', ',', '.').'</td>';
		            			$html_data .= '<td align="right">'.number_format($v_shortcut_values['total'], '2', ',', '.').'</td>';
		            
		            		}
		            		$html_data .= '</tr>';
		            	}
		            
		            
		            	// custom products  rows 1
		            	foreach($v_invoice_data['custom_items'] as $k=>$v_shortcut_values)
		            	{
		            		$html_data .= '<tr>';
		            		$html_data .= '<td align="left">'.$v_shortcut_values['description'].'</td>';
		            		$html_data .= '<td align="left">'.$v_shortcut_values['qty'].'</td>';
		            		$html_data .= '<td align="left">'.number_format($v_shortcut_values['price'], '2', ',', '.').'</td>';
		            		$html_data .= '<td align="right">'.number_format($v_shortcut_values['total'], '2', ',', '.').'</td>';
		            		$html_data .= '</tr>';
		            	}
		            	$html_data .= '</table>';
		            	// total table
		            	$html_data .= '<table style="font-family: Arial, Helvetica, sans-serif;font-size: 10pt;  " width="600" >';
		            	$html_data .= '<tr>';
		            	$html_data .= '<td  align="left"  style="border-top: 1px solid #000000; "  ><b>Zu zahlender Gesamtbetrag in EUR</b></td>';
		            	$html_data .= '<td  align="right" style="border-top: 1px solid #000000;  "  ><b>'.number_format($v_invoice_data['invoice_total'], '2', ',', '.').'</b></td>';
		            	$html_data .= '</tr>';
		            	$html_data .= '</table>';
		            	 
		            	 
		            }
		            
		            
		           	$html_items = $html_data;
		
		            /*$tokens_multi['invoice_items_html'] = $html_items;
		            $tokens_multi['invoice_items_html_short'] = $html_items_short; */
		            
		            $html_items = mb_convert_encoding($html_items, 'HTML-ENTITIES', 'UTF-8');
		            $tokens_multi['invoice_items_html'] = $html_items;
		
		            $current_invoices_period[$v_invoice_data['id']] = $patientmaster->getDaysInBetween($v_invoice_data['invoice_start'], $v_invoice_data['invoice_end']);
		
		            $current_period_tmp[$v_invoice_data['id']] = $current_invoices_period[$v_invoice_data['id']];
		
		            array_walk($current_period_tmp[$v_invoice_data['id']], function(&$value) {
		                $value = date("Y-m-d", strtotime($value));
		            });
		
		                $current_period_tmp[$v_invoice_data['id']] = array_values(array_unique($current_period_tmp[$v_invoice_data['id']]));
		
		                foreach($current_period_tmp[$v_invoice_data['id']] as $k_period => $v_period_day)
		                {
		                    $current_period_month_days[date('Y-m', strtotime($v_period_day))][] = $v_period_day;
		                }
		
		                $patient_months[$v_invoice_data['id']] = array_keys($current_period_month_days);
		
		                foreach($patient_months[$v_invoice_data['id']] as $k_inv_data => $v_inv_month)
		                {
		                    if(!function_exists('cal_days_in_month'))
		                    {
		                        $month_days_nr = date('t', mktime(0, 0, 0, date("n", strtotime($v_inv_month . "-01")), 1, date("Y", strtotime($v_inv_month . "-01"))));
		                    }
		                    else
		                    {
		                        $month_days_nr = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_inv_month . "-01")), date("Y", strtotime($v_inv_month . "-01")));
		                    }
		
		                    $start_month = $v_inv_month . "-01";
		                    $end_month = $v_inv_month . '-' . $month_days_nr;
		
		                    $month_days_arr_source[$v_invoice_data['id']][date('Y-m', strtotime($start_month))] = $patientmaster->getDaysInBetween($start_month, $end_month);
		                }
		                //organize leistung data
		                $invoice_control_sheet_data['patientdetails'] = $params['patient_days'][$v_invoice_data['ipid']]['details'];
		
		                $invoice_control_sheet_data['period_days_source'] = $month_days_arr_source[$v_invoice_data['id']];
		                	
		                	
		                $invoice_control_sheet_data['kv_header'] = $kv_header[$v_invoice_data['ipid']];
		                $invoice_control_sheet_data['alias'] = $alias;
		                $invoice_control_sheet_data['patient_data'] = $patient_data_diagnos[$v_invoice_data['ipid']];
		                	
		                $invoice_control_sheet_data['period_days'] = $current_period_tmp[$v_invoice_data['ipid']];
		                $invoice_control_sheet_data['shortcuts'] = $shortcuts['performance'];
		                $invoice_control_sheet_data['master_data'] = $master_data[$v_invoice_data['ipid']];
		                $invoice_control_sheet_data['classification_box'] = $clasifizierung[$v_invoice_data['ipid']];
		                $invoice_control_sheet_data['extra_data_details'] = $extra_details[$v_invoice_data['ipid']];
		                $invoice_control_sheet_data['users_array'] = $user_array ;
		                $invoice_control_sheet_data['client_details'] = $client_details[0];
		                $invoice_control_sheet_data['health_insurance'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['hi_name'];
		                $invoice_control_sheet_data['insurance_no'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'];
		                $invoice_control_sheet_data['hi_subdiv_address'] = $v_invoice_data['address'];
		                $invoice_control_sheet_data['patient_pflegestufe'] = $patients_pflege[$v_pflege['ipid']];
		                $invoice_control_sheet_data['health_insurance_ik'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['health_insurance_ik'];
		                $invoice_control_sheet_data['health_insurance_kassenr'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['health_insurance_kassenr'];
		                $invoice_control_sheet_data['health_insurance_kassenr'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['health_insurance_kassenr'];
		                $invoice_control_sheet_data['first_active_day'] = $invoice_data['start_active'];
		                $invoice_control_sheet_data['last_active_day'] = $invoice_data['end_active'];
		                $invoice_control_sheet_data['sapv_approve_date'] = $invoice_data['sapv_approve_date'];
		                $invoice_control_sheet_data['sapv_approve_nr'] = $invoice_data['sapv_approve_nr'];
		                $invoice_control_sheet_data['first_sapv_day'] = $invoice_data['start_sapv'];
		                $invoice_control_sheet_data['last_sapv_day'] = $invoice_data['end_sapv'];
		                	
		
		                $invoice_control_sheet_data['invoice_data']['invoice_number'] =  html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');;
		                $invoice_control_sheet_data['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($v_invoice_data['invoice_start']));
		                $invoice_control_sheet_data['invoice_data']['invoice_end']  = date('d.m.Y', strtotime($v_invoice_data['invoice_end']));
		
		
		                $temp_files = array();
		                if($template_data)
		                {
		
		                    //generate invoice page
		                    if(isset($params['print_job']) && $params['print_job'] == '1'){
		                        
		                        $print_params = array();
		                        $print_params = $params;
		                        $print_params['template_data'] = $template_data[0];
		                        $print_params['vars'] = $tokens_multi;
		                        $print_params['export_file_type'] = "pdf";
		                        
		                        $batch_temp_files = $this->print_job_generate_and_save_file($print_params);
		                        
		                        return $batch_temp_files ;
		                        
		                    } else{
                                $temp_files[$v_invoice_data['id']][] = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'generate_pdf');
		                    }
		
		                    //generate leistung page
		                    //$temp_files[$v_invoice_data['id']][] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'performancerecordminicontrol', 'performancerecordminipdf.html');
		
		                    // Changed for  ISPC-1562 BW Nachweis - added a new pdf version
		                    //    TODO-2823 ISPC : Leistungsnachweis on Rechnung Hospiz not needed Ancuta 17.01.2020 :: Commented line - that generates the second page
		                    //$temp_files[$v_invoice_data['id']][] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'performancerecordminicontrol_new', 'performancerecordpdf_items.html');
		                    // --
		
		                    //join generated files
		                    if(count($temp_files[$v_invoice_data['id']]) > '0')
		                    {
		
		                        $final_files[$v_invoice_data['id']] = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'merge_pdfs_multiple', $temp_files[$v_invoice_data['id']]);
		                    }
		                }
		
		                $tokens_multi = array();
		                $invoice_control_sheet_data = array();
		        }
		
		        $final_files = array_values($final_files);
		
		        if(count($final_files) > '0')
		        {
		            //final cleanup (check if files are on disk)
		            foreach($final_files as $k_temp => $v_file)
		            {
		                if(!is_file($v_file))
		                {
		                    //remove unexisting files
		                    //							$unsetted_files[] = $v_file; //for debugs
		                    unset($final_files[$v_file]);
		                }
		            }
		
		            $remaining_temp_files = array_values(array_unique($final_files));
		
		
		            if(count($remaining_temp_files) > '0')
		            {
		                //ISPC-2472  Ancuta 12.11.2019::added batch name
		                $final_file = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'merge_pdfs', $final_files,$Batch_name);
		            }
		        }
		        if ( ! isset($params['print_job']) && $params['print_job'] == '1' ){
		            
		        } else {
		            exit;
		        }
		    }
		}
		
		
		
		public function patienthospizinvoiceAction()
		{
		    $clientid = $this->clientid;
		    $userid = $this->userid;
		    $this->view->userid = $userid;
		    
		    $patientmaster = new PatientMaster();
		    $client_details = new Client();
		    $hospiz_invoices = new HospizInvoices();
		    $hospiz_invoices_items = new HospizInvoiceItems();
		    $hospiz_invoices_form = new Application_Form_HospizInvoices();
		    
		    $hi_perms = new HealthInsurancePermissions();
		    $pflege = new PatientMaintainanceStage();
		    $phelathinsurance = new PatientHealthInsurance();
		    $healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
		    $boxes = new LettersTextBoxes();
		    $letter_boxes_details = $boxes->client_letter_boxes($clientid);
		    $this->view->hide_patient_tab = '1';
		    $p_list = new PriceList();
		    
		    
		    
		    $decid = Pms_Uuid::decrypt($_GET['id']);
		    $ipid = Pms_CommonData::getIpId($decid);
		    $invoice_data['ipid'] = $ipid;
		    /* ================ PATIENT HEADER ======================= */
		    $patientmaster = new PatientMaster();
		    $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
		    /* ================ PATIENT TAB MENU ======================= */
		    $tm = new TabMenus();
		    $this->view->tabmenus = $tm->getMenuTabs();
  
		    // cleint details
		    $client_detail = $client_details->getClientDataByid($clientid);
		    $this->view->client_ik = $client_detail[0]['institutskennzeichen'];
		    
		    // invoice number - TEMP
		    $high_invoice_nr = $hospiz_invoices->get_next_invoice_number($clientid, true);
		    $this->view->prefix = $high_invoice_nr['prefix'];
		    $this->view->invoice_number = $high_invoice_nr['invoicenumber'];
		    $invoice_data['prefix'] = $high_invoice_nr['prefix'];
		    $invoice_data['invoice_number'] = $high_invoice_nr['invoicenumber'];

		    
		    // get patient days
		    //patient days
		    $conditions['client'] = $this->clientid;
		    $conditions['ipids'] = array($ipid);
		    $conditions['periods'][0]['start'] = '2009-01-01';
		    $conditions['periods'][0]['end'] = date('Y-m-d');
		    
		    // invoicenew/patienthospizinvoice
		    $sql = 'e.epid, p.ipid, e.ipid,';
		    $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		    $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		    $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		    $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		    $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		    $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		    
		    //be aware of date d.m.Y format here
		    $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		    
		    foreach($patient_days as $pat_ipid => $data)
		    {
		        foreach($data['active_periods'] as $period_identification => $period_details)
		        {
                    $admission_periods[$pat_ipid][$period_identification]['start'] = $period_details['start'];
                    $admission_periods[$pat_ipid][$period_identification]['end'] = $period_details['end'];
		        }
		        
		        $overall_periods[$ipid] = array_values($data['active_periods']);
		        $overall[$ipid]['start'] = $overall_periods[$ipid][0]['start'];
		        $last_period[$ipid] = end($overall_periods[$ipid]);
		        $overall[$ipid]['end'] = $last_period[$ipid]['end'];
		        
		        $patient_details[$pat_ipid]['last_name'] = $data['details']['last_name'];
		        $patient_details[$pat_ipid]['first_name'] = $data['details']['first_name'];
		        $patient_details[$pat_ipid]['street1'] = $data['details']['street1'];
		        $patient_details[$pat_ipid]['zip'] = $data['details']['zip'];
		        $patient_details[$pat_ipid]['birthd'] = date("d.m.Y",strtotime($data['details']['birthd']));
		        
		        //TODO-2821 Carmen 16.01.2020
		        $patient_address[$pat_ipid]['address'] = '&nbsp;' . htmlspecialchars($data['details']['first_name']) . ' ' . htmlspecialchars($data['details']['last_name']) . '<br />';// TODO-1544
		        $patient_address[$pat_ipid]['address'] .= '&nbsp;' . htmlspecialchars($data['details']['street1']) . '<br />';
		        $patient_address[$pat_ipid]['address'] .= '&nbsp;' . htmlspecialchars($data['details']['zip']) . ' ' . '&nbsp;' . htmlspecialchars($data['details']['city']);
		        //TODO-2821 Carmen 16.01.2020
		        
		        // days of treatment in  period
		        $patient_details[$pat_ipid]['active_days'] = $data['real_active_days'];
		    }

		    $this->view->patient_details = $patient_details[$ipid];
		    $this->view->admission_periods = $admission_periods[$ipid];

		    $months_array = array();
		    foreach($admission_periods[$ipid] as $adm_id => $adm_period){
//     		    $period_months_array[] = Pms_CommonData::get_period_months($adm_period['start'], $adm_period['end'], 'Y-m');
    		    $months_array = array_merge($months_array,Pms_CommonData::get_period_months($adm_period['start'], $adm_period['end'], 'Y-m'));
		    }
		    
		    foreach($months_array as $k_month => $v_month)
		    {
		        $month_select_array[$v_month] = $v_month;
		    }
		    $this->view->month_select =  $month_select_array;
		    //construct months selector array END
		    //check if a month is selected START
		    if(strlen($_REQUEST['monthdata']) == '0')
		    {
		        $selected_month = end($month_select_array);
		    }
		    else
		    {
		        $selected_month = $month_select_array[$_REQUEST['monthdata']];
		    }
		    
		    $this->view->selected_month = $selected_month;
		    $this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
		    
		    if(!function_exists('cal_days_in_month'))
		    {
		        $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
		    }
		    else
		    {
		        $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
		    }
		    
		    $months_details[$selected_month]['start'] = $selected_month . "-01";
		    $months_details[$selected_month]['days_in_month'] = $month_days;
		    $months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
		    
		    $month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);
		    
		    array_walk($month_days_arr, function(&$value) {
		        $value = date("d.m.Y", strtotime($value));
		    });
		    $months_details[$selected_month]['days'] = $month_days_arr;
		    
		    //depending on MONTH 
		    if(strlen($_REQUEST['monthdata']) == '0')
		    {
		        $selected_period = $overall[$ipid];
		        $active_days[$ipid] = $patient_details[$ipid]['active_days'];
		        
		        $invoice_data['start_active'] = $selected_period['start'];
		        $invoice_data['end_active'] = $selected_period['end'];
		    } 
		    else
		    {
		        $selected_period['start'] = $months_details[$selected_month]['start'];
		        $selected_period['end'] =  $months_details[$selected_month]['end'];
		        
		        foreach($patient_details[$ipid]['active_days'] as $kd => $aval)
		        {
		            $r1start = strtotime($aval);
		            $r1end = strtotime($aval);
		            $r2start = strtotime($selected_period['start']);
		            $r2end = strtotime($selected_period['end']);
		            if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end)){
		                $active_days[$ipid][] =  $aval;
		            }
		        }
		        
		        $invoice_data['start_active'] = $active_days[$ipid][0] ;
		        $invoice_data['end_active'] = end($active_days[$ipid]);
		    }

		    $invoice_data['days_in_period'] = $active_days[$ipid]; 
		     
            
		    //get insurance details
		    $divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
		    $hi_perms_divisions = $divisions;
		    
		    //health insurance
		    $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
		    $this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
		    $this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
		    $this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
		    
		    if($healthinsu_array[0]['privatepatient'] == "1")
		    {
		        $privat = 1; 
		    } 
		    else 
		    {
		        $privat = 0;
		    }
		    //ispc-1876
		    $privat = 1;
		    
		    $this->view->privat = $privat;
		    if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
		    {
		        $hi_addr[$ipid] = "";
		        $helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
		        $healtharray = $helathins->toArray();
		    
		        if(empty($healthinsu_array[0]['name']))
		        {
		            $healthinsu_array[0]['name'] = $healtharray['name'];
		        } 
		        
		        if(empty($healthinsu_array[0]['ins_street']))
		        {
		            $healthinsu_array[0]['ins_street'] = $healtharray['street1'];
		        }
		        
		        if(empty($healthinsu_array[0]['ins_zip']))
		        {
		            $healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
		        } 
		    
		        if(empty($healthinsu_array[0]['ins_city']))
		        {
		            $healthinsu_array[0]['ins_city'] = $healtharray['city'];
		        }
		    
		        if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
		        {
		            $this->view->health_insurance_ik = $healtharray['iknumber'];
		        }
		    
		        if(strlen($healthinsu_array[0]['kvk_no']) == 0)
		        {
		            $this->view->health_insurance_kassenr = $healtharray['kvnumber'];
		        }
		    }
		    
		    
		    $hi_address[$ipid]  = '&nbsp;' . $healthinsu_array[0]['name'] . '<br />';
		    $hi_address[$ipid] .= '&nbsp;' . $healthinsu_array[0]['ins_insurance_provider'] . '<br />';
		    $hi_address[$ipid] .= '&nbsp;' . $healthinsu_array[0]['ins_street'] . '<br />';
		    $hi_address[$ipid] .= '&nbsp;' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];
		    
		    //TODO-2821 Carmen 16.01.2020
		    if($healthinsu_array[0]['privatepatient'] == "1")
		    {
		    	$invoice_data['address'] = $patient_address[$ipid]['address'];
		    }
		    else
		    {
		    	$invoice_data['address'] = $hi_address[$ipid]; 
		    }
		    //TODO-2821 Carmen 16.01.2020

		    //get pflegestuffe Latest
// 		    $pflege_arr = $pflege->getpatientHighestMaintainanceStageInPeriod($invoice_data['ipid'], $selected_period['start'], $selected_period['end']);
		    $pflege_arr = $pflege->getLastpatientMaintainanceStage($invoice_data['ipid']);
		    
		    if($pflege_arr)
		    {
		        $last_pflege = end($pflege_arr);
		        $highest = $pflege_arr[0]['stage'];
		        $this->view->patient_pflegestufe = $pflege_arr[0]['stage'];
		    }
		    else
		    {
		        $this->view->patient_pflegestufe = ' - ';
		    }

		    // get pricelist details
		    $master_price_list[$ipid] = $p_list->get_period_price_list(date('Y-m-d', strtotime($selected_period['start'])), date('Y-m-d', strtotime($selected_period['end'])));
		    $pricelist[$ipid] = end($master_price_list[$ipid]);
// 		    print_r($pricelist); exit;

		    // Calculate days
	        $amount_of_days[$ipid] =  count($active_days[$ipid]);
	        
	        
	        $inv_pv_pat_total = 0;
	        $hospiz_pv_pat_total = 0;
	        $hospiz_pv_pat_5_percent_total = 0;
	        
	        
	        $inv_normal_pat_total = 0;
	        $hospiz_normal_pat_total = 0;
	        $hospiz_normal_pat_5_percent_total = 0;
		    if($privat == "1")
		    {
		        
		        $hospiz_pv_pat_price = $pricelist[$ipid][0]['hospiz_pv_pat']['price'];
		        
		        $invoice_data['items']["hospiz_pv_pat"]['shortcut'] = "hospiz_pv_pat";
		        $invoice_data['items']["hospiz_pv_pat"]['qty'] = $amount_of_days[$ipid];
		        $invoice_data['items']["hospiz_pv_pat"]['price'] = $hospiz_pv_pat_price;
		        $invoice_data['items']["hospiz_pv_pat"]['total'] =  number_format( round(($amount_of_days[$ipid] * $hospiz_pv_pat_price),2) , '2', '.', '');   

		        $hospiz_pv_pat_total = round(($amount_of_days[$ipid] * $hospiz_pv_pat_price),2);
		        
		        
		        $invoice_data['items']["hospiz_pv_pat_5_percent"]['shortcut'] = "hospiz_pv_pat_5_percent";
		        $invoice_data['items']["hospiz_pv_pat_5_percent"]['qty'] = $amount_of_days[$ipid];
		        
		        $hospiz_pv_pat_5_percent_price = round((5 / 100) * $hospiz_pv_pat_price,2);
		        $hospiz_pv_pat_5_percent_total =  round($amount_of_days[$ipid] * round((5 / 100) * $hospiz_pv_pat_price,2),2);
		        
		        $invoice_data['items']["hospiz_pv_pat_5_percent"]['price'] = number_format($hospiz_pv_pat_5_percent_price  * (-1) , '2', '.', ''); // negative amount
		        $invoice_data['items']["hospiz_pv_pat_5_percent"]['total'] =  number_format($hospiz_pv_pat_5_percent_total * (-1) , '2', '.', ''); // negative amount
		        
		        $inv_pv_pat_total = $hospiz_pv_pat_total - $hospiz_pv_pat_5_percent_total;
		        
		        $invoice_data['invoice_total'] = number_format($inv_pv_pat_total , '2', '.', ''); ;
		        $invoice_data['sub_invoice_total'] =  number_format($inv_pv_pat_total , '2', '.', '');  
		    } 
		    else 
		    {
		        $hospiz_normal_pat_price = $pricelist[$ipid][0]['hospiz_normal_pat']['price'];
		        
		        $invoice_data['items']["hospiz_normal_pat"]['shortcut'] = "hospiz_normal_pat";
		        $invoice_data['items']["hospiz_normal_pat"]['qty'] = count($active_days[$ipid]);
		        $invoice_data['items']["hospiz_normal_pat"]['price'] = $hospiz_normal_pat_price;
		        $invoice_data['items']["hospiz_normal_pat"]['total'] =  number_format( round(($amount_of_days[$ipid] * $hospiz_normal_pat_price),2) , '2', '.', ''); 
		        $hospiz_normal_pat_total = round(($amount_of_days[$ipid] * $hospiz_normal_pat_price),2);

		        
		        $invoice_data['items']["hospiz_normal_pat_5_percent"]['shortcut'] = "hospiz_normal_pat_5_percent";
		        $invoice_data['items']["hospiz_normal_pat_5_percent"]['qty'] = $amount_of_days[$ipid];
		        $hospiz_normal_pat_5_percent_price =  round( ((5 / 100) * $hospiz_normal_pat_price) ,2);
		        $hospiz_normal_pat_5_percent_total =  round(($amount_of_days[$ipid] * $hospiz_normal_pat_5_percent_price),2);
		        $invoice_data['items']["hospiz_normal_pat_5_percent"]['price'] = number_format($hospiz_normal_pat_5_percent_price  * (-1) , '2', '.', ''); // negative amount
		        $invoice_data['items']["hospiz_normal_pat_5_percent"]['total'] =   number_format($hospiz_normal_pat_5_percent_total * (-1) , '2', '.', ''); // negative amount
		        $inv_normal_pat_total =  $hospiz_normal_pat_total - $hospiz_normal_pat_5_percent_total;

		        
		        $invoice_data['invoice_total'] = number_format($inv_normal_pat_total , '2', '.', '');
		        $invoice_data['sub_invoice_total'] = number_format($inv_normal_pat_total , '2', '.', '');
		        $invoice_data['invoice_total_normal'] = number_format($inv_normal_pat_total , '2', '.', '');
                // pflegestufe lines
                
		        if($highest){
		            if($highest == "3+")
		            {
		                $pflegestufe = "3_5";
		            }
		            else
		            {
		                $pflegestufe = $highest;
		            }
		            
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['shortcut'] = "care_level_".$pflegestufe;
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['qty'] = $amount_of_days[$ipid];
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['price'] = $pricelist[$ipid][0]["care_level_".$pflegestufe]['price'];
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['description'] = $pricelist[$ipid][0]["care_level_".$pflegestufe]['description'];
    		        
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['total_round'] = round(($amount_of_days[$ipid] * $pricelist[$ipid][0]["care_level_".$pflegestufe]['price']),2);
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['total'] = number_format($invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['total_round'], '2', '.', '') ;
//     		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['total'] = round(($amount_of_days[$ipid] * $pricelist[$ipid][0]["care_level_".$pflegestufe]['price']),2);
    		        
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['shortcut'] = "care_level_remaining";
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['qty'] = "";
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['price'] = "";
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['description'] = "Verbleibender Restbetrag";
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['total_round'] = $invoice_data['invoice_total_normal'] - round(($amount_of_days[$ipid] * $pricelist[$ipid][0]["care_level_".$pflegestufe]['price']),2) ;
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['total'] = number_format($invoice_data['pflegestufe_items']["care_level_remaining"]['total_round'], '2', '.', '');
//     		        $invoice_data['pflegestufe_items']["care_level_remaining"]['total'] = $invoice_data['invoice_total_normal'] - round(($amount_of_days[$ipid] * $pricelist[$ipid][0]["care_level_".$pflegestufe]['price']),2) ;
		        }
		        else
		        {
		            $invoice_data['invoice_total'] = number_format($invoice_data['items']["hospiz_normal_pat"]['total'] + $invoice_data['items']["hospiz_normal_pat_5_percent"]['total'] , '2', '.', '');//$invoice_data['items']["hospiz_normal_pat"]['total'] + $invoice_data['items']["hospiz_normal_pat_5_percent"]['total'] ;
		            $invoice_data['sub_invoice_total'] = number_format($invoice_data['items']["hospiz_normal_pat"]['total'] + $invoice_data['items']["hospiz_normal_pat_5_percent"]['total'] , '2', '.', '');//$invoice_data['items']["hospiz_normal_pat"]['total'] + $invoice_data['items']["hospiz_normal_pat_5_percent"]['total'] ;
		        }
		    }
		    
		    $this->view->invoice_data = $invoice_data;
		    
		    
		    if($_REQUEST['dbg_inv']== "1"){
		        print_r($invoice_data); 
		        exit;
		    }
		    
		    
		    //post data
		    if($this->getRequest()->isPost())
		    {
		    
		        $post = $_POST;
		        $post['ipids'] = array($ipid);
		        $post['ipid'] = $ipid;
		        $post['items'] = $invoice_items;
		        
		        $post['start_invoice'] = date('Y-m-d', strtotime($invoice_data['start_active']));
		        $post['end_invoice'] = date('Y-m-d', strtotime($invoice_data['end_active']));

		        if(empty($_POST['invoice_total']))
		        {
		            $post['invoice_total'] = $invoice_data['invoice_total'];
		        }
		    
		        $post['patientdetails'] = $this->view->patient_details;
		        $post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
		        $post['insurance_no'] = $this->view->insurance_no;
		        $post['prefix'] = $this->view->prefix;
		        $post['invoice_number'] = $this->view->invoice_number;
		        $post['previous_invoices'] = $previous_inv;
		        
		        
		        if($privat == "1")
		        {
    		        $post['invoice']['type'] = "private";
		        } 
		        else 
		        {
    		        $post['invoice']['type'] = "normal";
		        }
		        
		        $post['invoice']['period']['start'] = date('Y-m-d', strtotime($invoice_data['start_active']));
		        $post['invoice']['period']['end'] = date('Y-m-d', strtotime($invoice_data['end_active']));
		        $post['client']['id'] = $clientid;
		    
		        $hospiz_invoice_form = new Application_Form_HospizInvoices();
		        if($_POST['create_invoice'])
		        {
		            $insert_invoice = $hospiz_invoice_form->insert_invoice($post);
		            $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
		            exit;
		        }
		        else if($_POST['create_pdf'])
		        {
		            $params['sapv_overall'][$ipid] = array_values($sapv_days_overall);
		            $params['ipids'] = array($ipid);
		            $params['patient_sapvs'] = $patients_sapv[$ipid];
		            $params['patient_days'] = $patient_days;
		            $params['get_pdf'] = '1';
		            $params['only_pdf'] = (int) $_REQUEST['only_invoice'];
		            $params['stornopdf'] = (int) $_REQUEST['stornopdf'];
		            $params['stornoid'] = (int) $_REQUEST['stornoid'];
		            if(!empty($_REQUEST['iid']))
		            {
		                $params['invoices'] = array((int) $_REQUEST['iid']);
		            }
		            
		            $this->hospizinvoice($params);
		        }
		    }
		    
		    
		}
		public function patienthospizinvoice160527Action() // admission fall selection
		{
		    $clientid = $this->clientid;
		    $userid = $this->userid;
		    $this->view->userid = $userid;
		    
		    $patientmaster = new PatientMaster();
		    $client_details = new Client();
		    $hospiz_invoices = new HospizInvoices();
		    $hospiz_invoices_items = new HospizInvoiceItems();
		    $hospiz_invoices_form = new Application_Form_HospizInvoices();
		    
		    $hi_perms = new HealthInsurancePermissions();
		    $pflege = new PatientMaintainanceStage();
		    $phelathinsurance = new PatientHealthInsurance();
		    $healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
		    $boxes = new LettersTextBoxes();
		    $letter_boxes_details = $boxes->client_letter_boxes($clientid);
		    $this->view->hide_patient_tab = '1';
		    $p_list = new PriceList();
		    
		    
		    
		    $decid = Pms_Uuid::decrypt($_GET['id']);
		    $ipid = Pms_CommonData::getIpId($decid);
		    $invoice_data['ipid'] = $ipid;
		    /* ================ PATIENT HEADER ======================= */
		    $patientmaster = new PatientMaster();
		    $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
		    /* ================ PATIENT TAB MENU ======================= */
		    $tm = new TabMenus();
		    $this->view->tabmenus = $tm->getMenuTabs();
  
		    // cleint details
		    $client_detail = $client_details->getClientDataByid($clientid);
		    $this->view->client_ik = $client_detail[0]['institutskennzeichen'];
		    
		    // invoice number - TEMP
		    $high_invoice_nr = $hospiz_invoices->get_next_invoice_number($clientid, true);
		    $this->view->prefix = $high_invoice_nr['prefix'];
		    $this->view->invoice_number = $high_invoice_nr['invoicenumber'];
		    $invoice_data['prefix'] = $high_invoice_nr['prefix'];
		    $invoice_data['invoice_number'] = $high_invoice_nr['invoicenumber'];

		    
		    // get patient days
		    //patient days
		    $conditions['client'] = $this->clientid;
		    $conditions['ipids'] = array($ipid);
		    $conditions['periods'][0]['start'] = '2009-01-01';
		    $conditions['periods'][0]['end'] = date('Y-m-d');
		    
		    // invoicenew/patienthospizinvoice
		    $sql = 'e.epid, p.ipid, e.ipid,';
		    $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		    $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		    $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		    $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		    $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		    $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		    
		    //be aware of date d.m.Y format here
		    $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		    
		    foreach($patient_days as $pat_ipid => $data)
		    {
		        foreach($data['active_periods'] as $period_identification => $period_details)
		        {
                    $admission_periods[$pat_ipid][$period_identification]['start'] = $period_details['start'];
                    $admission_periods[$pat_ipid][$period_identification]['end'] = $period_details['end'];
		        }
		        
		        $overall_periods[$ipid] = array_values($data['active_periods']);
		        $overall[$ipid]['start'] = $overall_periods[$ipid][0]['start'];
		        $last_period[$ipid] = end($overall_periods[$ipid]);
		        $overall[$ipid]['end'] = $last_period[$ipid]['end'];
		        
		        $patient_details[$pat_ipid]['last_name'] = $data['details']['last_name'];
		        $patient_details[$pat_ipid]['first_name'] = $data['details']['first_name'];
		        $patient_details[$pat_ipid]['street1'] = $data['details']['street1'];
		        $patient_details[$pat_ipid]['zip'] = $data['details']['zip'];
		        $patient_details[$pat_ipid]['birthd'] = date("d.m.Y",strtotime($data['details']['birthd']));
		        
		        // days of treatment in  period
		        $patient_details[$pat_ipid]['active_days'] = $data['real_active_days'];
		    }

		    $this->view->patient_details = $patient_details[$ipid];
		    $this->view->admission_periods = $admission_periods[$ipid];

		    //fall
		    
		    
		    //depending on fall 
		    if(empty($_REQUEST['admissionid']))
		    {
		        $selected_period = $overall[$ipid];
		        $active_days[$ipid] = $patient_details[$ipid]['active_days'];
		    } 
		    else
		    {
		        $selected_period['start'] = $admission_periods[$ipid][$_REQUEST['admissionid']]['start'];
		        $selected_period['end'] =  $admission_periods[$ipid][$_REQUEST['admissionid']]['end'];
		        
		        foreach($patient_details[$ipid]['active_days'] as $kd => $aval)
		        {
		            $r1start = strtotime($aval);
		            $r1end = strtotime($aval);
		            $r2start = strtotime($selected_period['start']);
		            $r2end = strtotime($selected_period['end']);
		            if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end)){
		                $active_days[$ipid][] =  $aval;
		            }
		        }
		    }
		    
		    $invoice_data['days_in_period'] = $active_days[$ipid]; 
		    $invoice_data['start_active'] = $selected_period['start']; 
		    $invoice_data['end_active'] = $selected_period['end']; 

		    //get insurance details
		    $divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
		    $hi_perms_divisions = $divisions;
		    
		    //health insurance
		    $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
		    $this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
		    $this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
		    $this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
		    
		    if($healthinsu_array[0]['privatepatient'] == "1")
		    {
		        $privat = 1; 
		    } 
		    else 
		    {
		        $privat = 0;
		    }
		    
		    //ispc-1876 
		    $privat = 1;
		    
		    $this->view->privat = $privat;
		    if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
		    {
		        $hi_addr[$ipid] = "";
		        $helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
		        $healtharray = $helathins->toArray();
		    
		        if(empty($healthinsu_array[0]['name']))
		        {
		            $healthinsu_array[0]['name'] = $healtharray['name'];
		        } 
		        
		        if(empty($healthinsu_array[0]['ins_street']))
		        {
		            $healthinsu_array[0]['ins_street'] = $healtharray['street1'];
		        }
		        
		        if(empty($healthinsu_array[0]['ins_zip']))
		        {
		            $healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
		        } 
		    
		        if(empty($healthinsu_array[0]['ins_city']))
		        {
		            $healthinsu_array[0]['ins_city'] = $healtharray['city'];
		        }
		    
		        if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
		        {
		            $this->view->health_insurance_ik = $healtharray['iknumber'];
		        }
		    
		        if(strlen($healthinsu_array[0]['kvk_no']) == 0)
		        {
		            $this->view->health_insurance_kassenr = $healtharray['kvnumber'];
		        }
		    }
		    
		    
		    $hi_address[$ipid]  = '&nbsp;' . $healthinsu_array[0]['name'] . '<br />';
		    $hi_address[$ipid] .= '&nbsp;' . $healthinsu_array[0]['ins_insurance_provider'] . '<br />';
		    $hi_address[$ipid] .= '&nbsp;' . $healthinsu_array[0]['ins_street'] . '<br />';
		    $hi_address[$ipid] .= '&nbsp;' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];
		    
		    $invoice_data['address'] = $hi_address[$ipid]; 
		    

		    //get pflegestuffe Latest
// 		    $pflege_arr = $pflege->getpatientHighestMaintainanceStageInPeriod($invoice_data['ipid'], $selected_period['start'], $selected_period['end']);
		    $pflege_arr = $pflege->getLastpatientMaintainanceStage($invoice_data['ipid']);
		    
		    if($pflege_arr)
		    {
		        $last_pflege = end($pflege_arr);
		        $highest = $pflege_arr[0]['stage'];
		        $this->view->patient_pflegestufe = $pflege_arr[0]['stage'];
		    }
		    else
		    {
		        $this->view->patient_pflegestufe = ' - ';
		    }

		    // get pricelist details
		    $master_price_list[$ipid] = $p_list->get_period_price_list(date('Y-m-d', strtotime($selected_period['start'])), date('Y-m-d', strtotime($selected_period['end'])));
		    $pricelist[$ipid] = end($master_price_list[$ipid]);
// 		    print_r($pricelist); exit;

		    // Calculate days
	        $amount_of_days[$ipid] =  count($active_days[$ipid]);
	        
	        
	        $inv_pv_pat_total = 0;
	        $hospiz_pv_pat_total = 0;
	        $hospiz_pv_pat_5_percent_total = 0;
	        
	        
	        $inv_normal_pat_total = 0;
	        $hospiz_normal_pat_total = 0;
	        $hospiz_normal_pat_5_percent_total = 0;
		    if($privat == "1")
		    {
		        
		        $hospiz_pv_pat_price = $pricelist[$ipid][0]['hospiz_pv_pat']['price'];
		        
		        $invoice_data['items']["hospiz_pv_pat"]['shortcut'] = "hospiz_pv_pat";
		        $invoice_data['items']["hospiz_pv_pat"]['qty'] = $amount_of_days[$ipid];
		        $invoice_data['items']["hospiz_pv_pat"]['price'] = $hospiz_pv_pat_price;
		        $invoice_data['items']["hospiz_pv_pat"]['total'] =  number_format( round(($amount_of_days[$ipid] * $hospiz_pv_pat_price),2) , '2', '.', '');   

		        $hospiz_pv_pat_total = round(($amount_of_days[$ipid] * $hospiz_pv_pat_price),2);
		        
		        
		        $invoice_data['items']["hospiz_pv_pat_5_percent"]['shortcut'] = "hospiz_pv_pat_5_percent";
		        $invoice_data['items']["hospiz_pv_pat_5_percent"]['qty'] = $amount_of_days[$ipid];
		        
		        $hospiz_pv_pat_5_percent_price = round((5 / 100) * $hospiz_pv_pat_price,2);
		        $hospiz_pv_pat_5_percent_total =  round($amount_of_days[$ipid] * round((5 / 100) * $hospiz_pv_pat_price,2),2);
		        
		        $invoice_data['items']["hospiz_pv_pat_5_percent"]['price'] = number_format($hospiz_pv_pat_5_percent_price  * (-1) , '2', '.', ''); // negative amount
		        $invoice_data['items']["hospiz_pv_pat_5_percent"]['total'] =  number_format($hospiz_pv_pat_5_percent_total * (-1) , '2', '.', ''); // negative amount
		        
		        $inv_pv_pat_total = $hospiz_pv_pat_total - $hospiz_pv_pat_5_percent_total;
		        
		        $invoice_data['invoice_total'] = number_format($inv_pv_pat_total , '2', '.', ''); ;
		        $invoice_data['sub_invoice_total'] =  number_format($inv_pv_pat_total , '2', '.', '');  
		    } 
		    else 
		    {
		        $hospiz_normal_pat_price = $pricelist[$ipid][0]['hospiz_normal_pat']['price'];
		        
		        $invoice_data['items']["hospiz_normal_pat"]['shortcut'] = "hospiz_normal_pat";
		        $invoice_data['items']["hospiz_normal_pat"]['qty'] = count($active_days[$ipid]);
		        $invoice_data['items']["hospiz_normal_pat"]['price'] = $hospiz_normal_pat_price;
		        $invoice_data['items']["hospiz_normal_pat"]['total'] =  number_format( round(($amount_of_days[$ipid] * $hospiz_normal_pat_price),2) , '2', '.', ''); 
		        $hospiz_normal_pat_total = round(($amount_of_days[$ipid] * $hospiz_normal_pat_price),2);

		        
		        $invoice_data['items']["hospiz_normal_pat_5_percent"]['shortcut'] = "hospiz_normal_pat_5_percent";
		        $invoice_data['items']["hospiz_normal_pat_5_percent"]['qty'] = $amount_of_days[$ipid];
		        $hospiz_normal_pat_5_percent_price =  round( ((5 / 100) * $hospiz_normal_pat_price) ,2);
		        $hospiz_normal_pat_5_percent_total =  round(($amount_of_days[$ipid] * $hospiz_normal_pat_5_percent_price),2);
		        $invoice_data['items']["hospiz_normal_pat_5_percent"]['price'] = number_format($hospiz_normal_pat_5_percent_price  * (-1) , '2', '.', ''); // negative amount
		        $invoice_data['items']["hospiz_normal_pat_5_percent"]['total'] =   number_format($hospiz_normal_pat_5_percent_total * (-1) , '2', '.', ''); // negative amount
		        $inv_normal_pat_total =  $hospiz_normal_pat_total - $hospiz_normal_pat_5_percent_total;

		        
		        $invoice_data['invoice_total'] = number_format($inv_normal_pat_total , '2', '.', '');
		        $invoice_data['sub_invoice_total'] = number_format($inv_normal_pat_total , '2', '.', '');
		        $invoice_data['invoice_total_normal'] = number_format($inv_normal_pat_total , '2', '.', '');
                // pflegestufe lines
                
		        if($highest){
		            if($highest == "3+")
		            {
		                $pflegestufe = "3_5";
		            }
		            else
		            {
		                $pflegestufe = $highest;
		            }
		            
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['shortcut'] = "care_level_".$pflegestufe;
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['qty'] = $amount_of_days[$ipid];
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['price'] = $pricelist[$ipid][0]["care_level_".$pflegestufe]['price'];
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['description'] = $pricelist[$ipid][0]["care_level_".$pflegestufe]['description'];
//    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['total'] = round(($amount_of_days[$ipid] * $pricelist[$ipid][0]["care_level_".$pflegestufe]['price']),2);
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['total_round'] = round(($amount_of_days[$ipid] * $pricelist[$ipid][0]["care_level_".$pflegestufe]['price']),2);
    		        $invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['total'] = number_format($invoice_data['pflegestufe_items']["care_level_".$pflegestufe]['total_round'] , '2', '.', '');;    		        
    		        
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['shortcut'] = "care_level_remaining";
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['qty'] = "";
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['price'] = "";
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['description'] = "Verbleibender Restbetrag";
//    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['total'] = $invoice_data['invoice_total_normal'] - round(($amount_of_days[$ipid] * $pricelist[$ipid][0]["care_level_".$pflegestufe]['price']),2) ;
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['total_round'] = $invoice_data['invoice_total_normal'] - round(($amount_of_days[$ipid] * $pricelist[$ipid][0]["care_level_".$pflegestufe]['price']),2) ;
    		        $invoice_data['pflegestufe_items']["care_level_remaining"]['total'] = number_format($invoice_data['pflegestufe_items']["care_level_remaining"]['total_round'] , '2', '.', '');  		        
    		        
		        }
		        else
		        {
		            $invoice_data['invoice_total'] = number_format($invoice_data['items']["hospiz_normal_pat"]['total'] + $invoice_data['items']["hospiz_normal_pat_5_percent"]['total'] , '2', '.', '');//$invoice_data['items']["hospiz_normal_pat"]['total'] + $invoice_data['items']["hospiz_normal_pat_5_percent"]['total'] ;
		            $invoice_data['sub_invoice_total'] = number_format($invoice_data['items']["hospiz_normal_pat"]['total'] + $invoice_data['items']["hospiz_normal_pat_5_percent"]['total'] , '2', '.', '');//$invoice_data['items']["hospiz_normal_pat"]['total'] + $invoice_data['items']["hospiz_normal_pat_5_percent"]['total'] ;
		        }
		    }
		    
		    $this->view->invoice_data = $invoice_data;
		    
		    
		    if($_REQUEST['dbg_inv']== "1"){
		        print_r($invoice_data); 
		        exit;
		    }
		    
		    
		    //post data
		    if($this->getRequest()->isPost())
		    {
		    
		        $post = $_POST;
		        $post['ipids'] = array($ipid);
		        $post['ipid'] = $ipid;
		        $post['items'] = $invoice_items;
		        
		        $post['start_invoice'] = date('Y-m-d', strtotime($invoice_data['start_active']));
		        $post['end_invoice'] = date('Y-m-d', strtotime($invoice_data['end_active']));

		        if(empty($_POST['invoice_total']))
		        {
		            $post['invoice_total'] = $invoice_data['invoice_total'];
		        }
		    
		        $post['patientdetails'] = $this->view->patient_details;
		        $post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
		        $post['insurance_no'] = $this->view->insurance_no;
		        $post['prefix'] = $this->view->prefix;
		        $post['invoice_number'] = $this->view->invoice_number;
		        $post['previous_invoices'] = $previous_inv;
		        
		        
		        if($privat == "1")
		        {
    		        $post['invoice']['type'] = "private";
		        } 
		        else 
		        {
    		        $post['invoice']['type'] = "normal";
		        }
		        
		        $post['invoice']['period']['start'] = date('Y-m-d', strtotime($invoice_data['start_active']));
		        $post['invoice']['period']['end'] = date('Y-m-d', strtotime($invoice_data['end_active']));
		        $post['client']['id'] = $clientid;
		    
		        $hospiz_invoice_form = new Application_Form_HospizInvoices();
		        if($_POST['create_invoice'])
		        {
		            $insert_invoice = $hospiz_invoice_form->insert_invoice($post);
		            $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
		            exit;
		        }
		        else if($_POST['create_pdf'])
		        {
		            $params['sapv_overall'][$ipid] = array_values($sapv_days_overall);
		            $params['ipids'] = array($ipid);
		            $params['patient_sapvs'] = $patients_sapv[$ipid];
		            $params['patient_days'] = $patient_days;
		            $params['get_pdf'] = '1';
		            $params['only_pdf'] = (int) $_REQUEST['only_invoice'];
		            $params['stornopdf'] = (int) $_REQUEST['stornopdf'];
		            $params['stornoid'] = (int) $_REQUEST['stornoid'];
		            if(!empty($_REQUEST['iid']))
		            {
		                $params['invoices'] = array((int) $_REQUEST['iid']);
		            }
		            
		            $this->hospizinvoice($params);
		        }
		    }
		    
		    
		}
		
		
		public function edithospizinvoiceAction()
		{
		    $clientid = $this->clientid;
		    $patientmaster = new PatientMaster();
		    $client_details = new Client();
		    $hospiz_invoices = new HospizInvoices();
		    $hospiz_invoices_items = new HospizInvoiceItems();
		    $hospiz_invoices_form = new Application_Form_HospizInvoices();
		    $hi_perms = new HealthInsurancePermissions();
		    $pflege = new PatientMaintainanceStage();
		    $phelathinsurance = new PatientHealthInsurance();
		    $healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
		    $boxes = new LettersTextBoxes();
		    $letter_boxes_details = $boxes->client_letter_boxes($clientid);
		    $this->view->hide_patient_tab = '1';
		
		    if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
		    {
		        //here get the invoice details
		        $invoice_id = $_REQUEST['invoiceid'];
		        $invoice_data = $hospiz_invoices->getHospizInvoice($invoice_id);
		    }
		
		    if(in_array($invoice_data['id'], HospizInvoices::get_storned_invoices($clientid)))
		    {
		        $this->view->has_storno = '1';
		    }
		    else
		    {
		        $this->view->has_storno = '0';
		    }
		
		    if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
		    {
		        $status = '0';
		        if(!empty($_POST['completed']))
		        {
		            $status = '2'; //unpaid
		        }
		        else if(!empty($_REQUEST['edit_invoice']))
		        {
		            $status = '1'; //draft
		        }
		        else if($_POST['deletemore'] == "1")
		        {
		            $status = '4'; //deleted
		        }
		        else if(!empty($_REQUEST['pdf']))
		        {
		            $status = '0'; //no change
		        }
		        else if(!empty($_REQUEST['users_invoice']))
		        {
		            $status = '0'; //no change
		        }
		
		        if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
		        {
		            $high_invoice_nr = $hospiz_invoices->get_next_invoice_number($clientid);
		            $_POST['prefix'] = $high_invoice_nr['prefix'];
		            $_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
		        }
		        else
		        {
		            $_POST['prefix'] = $invoice_data['prefix'];
		            $_POST['invoice_number'] = $invoice_data['invoice_number'];
		        }
		        //save here
		
		        if(strlen($_POST['invoice']['address']) > 0 ){
		            if(strpos($_POST['invoice']['address'],"style"))
		            {
		                $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
		            }
		            $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
		            $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
		            $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
		        }
		
		        $_POST['current_status'] = $invoice_data['status'];
		        $edit_invoice = $hospiz_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);
		
		
		        if(empty($_REQUEST['pdf']))
		        {
		            if($edit_invoice)
		            {
		
		                //ISPC-2312 Ancuta 07.12.2020
		                if($_REQUEST['redirect2new'] == '1'){
		                    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=hospiz_invoice');
		                    exit();
		                }
		                //-- 
		                $this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edtsuc');
		            }
		            else
		            {
		                //ISPC-2312 Ancuta 07.12.2020
		                if($_REQUEST['redirect2new'] == '1'){
		                    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=hospiz_invoice');
		                    exit();
		                }
		                //-- 
		                $this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edterr');
		            }
		        }
		        else if(!empty($_REQUEST['pdf']) && $edit_invoice)
		        {
		
		            if($invoice_data['status'] == '1')
		            {
		                $_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
		            }
		
		            if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && empty($pdf_data['completed_date']))
		            {
		                $pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
		            }
		            else if(empty($pdf_data['completed_date']))
		            {
		                $pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
		            }
		            //					$this->_redirect(APP_BASE . 'invoice/performancerecord?iid=' . $_REQUEST['invoiceid'] . '&mode=pdfs&pdfquick=1&completed_date=' . strtotime($pdf_data['completed_date']));
		
		            $params['ipids'] = array($invoice_data['ipid']);
		
		            //patient days
		            $conditions['client'] = $this->clientid;
		            $conditions['ipids'] = array($invoice_data['ipid']);
		            $conditions['periods'][0]['start'] = '2009-01-01';
		            $conditions['periods'][0]['end'] = date('Y-m-d');
		
		            $sql = 'e.epid, p.ipid, e.ipid,';
		            $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		            $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		            $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		            $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		            $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		            $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
		            //be aware of date d.m.Y format here
		            $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		
		            $params['invoices'] = array($invoice_data['id']);
		            $params['patient_days'] = $patient_days;
		            $params['get_pdf'] = '1';
		            $params['only_pdf'] = 1;
		            $_REQUEST['type'] = 'pdf';
		
		            if($invoice_data['status'] == '1')
		            {
		                $_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
		            }
		
		            $params['custom_data']['address'] = $_POST['invoice']['address'];
		            $params['custom_data']['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
		
		            $this->hospizinvoice($params);
		        }
		    }
		
		    if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
		    {
		        if(!$invoice_data || empty($invoice_data))
		        {
		            //ISPC-2312 Ancuta 07.12.2020
		            if($_REQUEST['redirect2new'] == '1'){
		                $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=hospiz_invoice');
		                exit();
		            }
		            //-- 
		            $this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
		        }
		
		        $patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
		        $client_detail = $client_details->getClientDataByid($invoice_data['client']);
		        $this->view->client_ik = $client_detail[0]['institutskennzeichen'];
		
		        //health insurance
		        $divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
		        $hi_perms_divisions = $divisions;
		
		        //health insurance
		        $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
		        $this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
		        $this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
		        $this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
		
		        if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
		        {
		            $helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
		            $healtharray = $helathins->toArray();
		
		            if(empty($healthinsu_array[0]['name']))
		            {
		                $healthinsu_array[0]['name'] = $healtharray['name'];
		            }
		            if(empty($healthinsu_array[0]['ins_street']))
		            {
		                $healthinsu_array[0]['ins_street'] = $healtharray['street1'];
		            }
		            if(empty($healthinsu_array[0]['ins_zip']))
		            {
		                $healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
		            }
		
		            if(empty($healthinsu_array[0]['ins_city']))
		            {
		                $healthinsu_array[0]['ins_city'] = $healtharray['city'];
		            }
		
		            if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
		            {
		                $this->view->health_insurance_ik = $healtharray['iknumber'];
		            }
		
		            if(strlen($healthinsu_array[0]['kvk_no']) == 0)
		            {
		                $this->view->health_insurance_kassenr = $healtharray['kvnumber'];
		            }
		        }
		
		
		        if($hi_perms_divisions)
		        {
		
		            $healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
		        }
		
		        $pathealthinsurancenr = "";
		        if(count($healthinsu_array[0]))
		        {
		            $phi_details = $healthinsu_array[0]['name'];
		        }
		        else
		        {
		            $phi_details = "--";
		        }
		
		        $phi_details_sub = $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];
		
		        $this->view->health_insurance = $phi_details;
		        $this->view->hi_subdiv_address = $phi_details_sub;
		
		
		        //pflege
		        //get pflegestuffe in current invoice period
		        $pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);
		
		        if($pflege_arr)
		        {
		            $last_pflege = end($pflege_arr);
		            $this->view->patient_pflegestufe = $last_pflege['stage'];
		        }
		        else
		        {
		            $this->view->patient_pflegestufe = ' - ';
		        }
		
		        if(strlen($invoice_data['address']) == 0)
		        {
		            $invoice_data['address'] = $phi_details_sub;
		        }
		
		        if(strlen($invoice_data['footer']) == 0)
		        {
		            $invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
		        }
		
		        $this->view->invoice_data = $invoice_data;
		        $this->view->patient_details = $patient_details;
		        $this->view->client_details = $client_detail[0];
		    }
		    else
		    {
		        //redirect if no invoiceid is preset
		        $this->_redirect(APP_BASE . "error/previlege");
		    }
		}
		
		
		
		public function fetchhospizinvoicelistAction()
		{
		    $clientid = $this->clientid;
		    $this->_helper->layout->setLayout('layout_ajax');
		    $hidemagic = Zend_Registry::get('hidemagic');
		    
		    $hospiz_invoices_payments = new HospizInvoicePayments();
		    $users = new User();
		    $warnings = new RemindersInvoice();
		    $modules = new Modules();
		    
		    if($modules->checkModulePrivileges("170", $clientid))
		    {
		    	$this->view->create_bulk_warnings = "1";
		    }
		    else
		    {
		    	$this->view->create_bulk_warnings = "0";
		    }		    
		    
		    $limit = 50;
		    $this->view->limit = $limit;
		    $filters = array();
		
		
		    $storno_invoices_q = Doctrine_Query::create()
		    ->select("*")
		    ->from('HospizInvoices')
		    ->where('client = "' . $clientid . '"  ')
		    ->andWhere('storno = 1')
		    ->andWhere('isdelete = 0');
		    $storno_invoices_array = $storno_invoices_q->fetchArray();
		
		    $storno_ids_str = '"XXXXXX",';
		    foreach($storno_invoices_array as $k => $st)
		    {
		        $storno_ids[] = $st['record_id'];
		        $storno_ids_str .= '"' . $st['record_id'] . '",';
		    }
		
		    if(empty($storno_ids))
		    {
		        $storno_ids[] = "XXXXXXX";
		    }
		
		    $storno_ids_str = substr($storno_ids_str, 0, -1);
		
		    // get client data
		    $client_details_m = new Client();
		    $client_details = $client_details_m->getClientDataByid($clientid);
		
		    $invoice_due_days = $client_details[0]['invoice_due_days'];
		    $plus_due_days = '+' . $invoice_due_days . ' days';
		    $this->view->plus_due_days = $plus_due_days;
		
		    //process tabs
		    $filters['hiinvoice_search'] = '';
		    switch($_REQUEST['f_status'])
		    {
		
		        case 'draft':
		            $filters['hiinvoice'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
		            break;
		
		        case 'unpaid':
		            $filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0" ';
		
		            break;
		
		        case 'paid':
		            $filters['hiinvoice'] = ' AND status="3"  AND storno = 0  AND id NOT IN (' . $storno_ids_str . ') AND isdelete=0 AND isarchived ="0"';
		            break;
		
		        case 'deleted':
		            $filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
		            break;
		
		        case 'overdue':
		            $filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0 AND id NOT IN (' . $storno_ids_str . ')  AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
		            break;
		
		        case 'all':
		            $filters['hiinvoice'] = ' AND isarchived ="0"';
		            break;
		
		        case 'archived':
		            $filters['hiinvoice'] = ' AND isarchived ="1" AND status !="4" AND isdelete != "1"';
		            break;
		
		        default: // unpaid- open
		            $filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0 AND id NOT IN (' . $storno_ids_str . ') AND isdelete = 0 AND isarchived ="0"';
		            break;
		    }
		
		    if(!empty($_REQUEST['last_name']))
		    {
		        $filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
		    }
		
		    if(!empty($_REQUEST['first_name']))
		    {
		        $filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
		    }
		
		    if(!empty($_REQUEST['epid']))
		    {
		        $filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
		    }
		
		    if(!empty($_REQUEST['rnummer']))
		    {
		        $filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
		        $filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
		    }
		    if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
		    {
		        $filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
		        $filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
		    }
		
		    //get invoice patients
		    $sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
		    $sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
		    $sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
		    $sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
		    $sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
		
		    // if super admin check if patient is visible or not
		    if($this->usertype == 'SA')
		    {
		        $sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
		    }
		
		    //filter patients name/surname/epid
		    $f_patient = Doctrine_Query::create()
		    ->select($sql)
		    ->from('PatientMaster p')
		    ->where("p.isdelete =0")
		    ->leftJoin("p.EpidIpidMapping e")
		    ->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);
		
		    $f_patients_res = $f_patient->fetchArray();
		
		    $f_patients_ipids[] = '9999999999999';
		    foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
		    {
		        $f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
		    }
		
		    //all invoices for counting
		    $invoices_counting = Doctrine_Query::create()
		    ->select("*")
		    ->from('HospizInvoices')
		    ->whereIn('ipid', $f_patients_ipids);
		    $invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
		
		    $inv2count = $invoices_counting->fetchArray();
		
		    $count_invoices = array();
		    foreach($inv2count as $k_inv2count => $v_inv2count)
		    {
		        $count_invoices[$v_inv2count['status']][] = '1';
		
		        if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["draft"][] = '1';
		        }
		
		        if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["unpaid"][] = '1';
		        }
		
		        if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["paid"][] = '1';
		        }
		
		        if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["deleted"][] = '1';
		        }
		
		        if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
		        //				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
		        {
		            $status_count_invoices["overdue"][] = '1';
		        }
		
		        if($v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["all"][] = '1';
		        }
		
		        if($v_inv2count['isarchived'] == "1" && $v_inv2count['status'] != "4" && $v_inv2count['isdelete'] != "1")
		        {
		            $status_count_invoices["archived"][] = '1';
		        }
		    }
		    //deleted_invoices
		    $del_invoices_counting = Doctrine_Query::create()
		    ->select("*")
		    ->from('HospizInvoices')
		    ->whereIn('ipid', $f_patients_ipids);
		    $del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
		    $del_invoices_counting->andWhere("isdelete=1 or status=4");
		    $del_inv2count = $del_invoices_counting->fetchArray();
		    foreach($del_inv2count as $k_del_inv => $v_del_inv)
		    {
		        $counted_del_inv[$v_del_inv['status']][] = '1';
		    }
		
		    //filter invoices status/invoice_number/amount
		    $invoices_nl = Doctrine_Query::create()
		    ->select("*")
		    ->from('HospizInvoices')
		    ->whereIn('ipid', $f_patients_ipids)
		    ->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
		    $invoices_no_limit = $invoices_nl->fetchArray();
		    $invoices_no_limit[] = "XXXXXX";
		
		
		    $invoice_ipids[] = '99999999999999';
		    foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
		    {
		        $invoice_ipids[] = $v_nl_inv['ipid'];
		    }
		
		    $patient = Doctrine_Query::create()
		    ->select($sql)
		    ->from('PatientMaster p')
		    ->whereIn("p.ipid", $f_patients_ipids)
		    ->leftJoin("p.EpidIpidMapping e")
		    ->andWhere('e.clientid = ' . $clientid);
		    $patients_res = $patient->fetchArray();
		
		    if($patients_res)
		    {
		        foreach($patients_res as $k_pat => $v_pat)
		        {
		            $patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
		        }
		    }
		
		    if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
		    {
		        $current_page = $_REQUEST['page'];
		    }
		    else
		    {
		        $current_page = 1;
		    }
		
		    if($_REQUEST['sort'] == 'asc')
		    {
		        $sort = 'asc';
		    }
		    else
		    {
		        $sort = 'desc';
		    }
		
		    switch($_REQUEST['ord'])
		    {
		
		        case 'id':
		            $orderby = 'id ' . $sort;
		            break;
		
		        case 'ln':
		            $orderby = 'epid ' . $sort;
		            break;
		
		        case 'nr':
		            //$orderby = 'invoice_number ' . $sort;
		            $orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
		            break;
		
		        case 'date':
		            $orderby = 'change_date, create_date ' . $sort;
		            break;
		
		        case 'amnt':
		            $orderby = 'invoice_total ' . $sort;
		            break;
		        case 'invoice_date':
		            $orderby = 'completed_date_sort ' . $sort;
		            break;
		
		        default:
		            //$orderby = 'id ' . $sort;
		            $orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
		            break;
		    }
		
		
		
		    $invoices = Doctrine_Query::create()
		    ->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
		    ->from('HospizInvoices')
		    ->where("client='" . $clientid . "'" . $filters['hiinvoice'])
		    ->andwhereIn('ipid', $invoice_ipids);
		    $invoices->orderby($orderby);
		    $invoices->offset(($current_page - 1) * $limit);
		    $invoices->limit($limit);
		    $invoicelimit = $invoices->fetchArray();
		
		
		    $invoice_uids[] = '9999999999';
		    foreach($invoicelimit as $k_il => $v_il)
		    {
		        $invoice_ids[] = $v_il['id'];
		        $invoice_uids[] = $v_il['create_user'];
		        $invoice_uids[] = $v_il['change_user'];
		    }
		
		
		    //count tabs contents
		    //			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');
		    $invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');
		
		    $counted = array();
		    foreach($invoice_tabs as $tab)
		    {
		        $counted[$tab] += count($status_count_invoices[$tab]);
		    }
		
		    $invoice_uids = array_values(array_unique($invoice_uids));
		    $users_details = $users->getMultipleUserDetails($invoice_uids);
		
		
		    $invoice_payments = $hospiz_invoices_payments ->getInvoicesPaymentsSum($invoice_ids);
		
		    $no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
		    $no_pages = ceil($no_invoices / $limit);
		
    
		    $all_warnings = $warnings->get_reminders($invoice_ids, 'hospiz_invoice', $clientid);
		    	
		    foreach ($invoicelimit as &$row) {
		    	if (isset($all_warnings[$row['id']])) {
		    		$row['InvoiceWarnings'] = $all_warnings[$row['id']];
		    	}
		    }
			//var_dump($invoicelimit); exit;
		    $this->view->storned_invoces = HospizInvoices::get_storned_invoices($clientid);
		
		    $this->view->invoicelist = $invoicelimit;
		    $this->view->user_details = $users_details;
		    $this->view->patient_details = $patient_details;
		    $this->view->invoice_payments = $invoice_payments;
		    $this->view->current_page = $current_page;
		    $this->view->no_pages = $no_pages;
		    $this->view->no_invoices = $no_invoices;
		    $this->view->orderby = $_REQUEST['ord'];
		    $this->view->sort = $_REQUEST['sort'];
		    $this->view->counted = $counted;
		}
		
		public function hospizlistpaymentsAction()
		{
		    $clientid = $this->clientid;
		    $this->_helper->viewRenderer->setNoRender();
		    $hospiz_invoices = new HospizInvoices();
		    $hospiz_payments = new HospizInvoicePayments();
		    $bwinvoice_form = new Application_Form_HospizInvoices();
		
		    $user = new User();
		
		    if($_REQUEST['invoiceid'])
		    {
		
		        $payments = $hospiz_payments->getInvoicePayments($_REQUEST['invoiceid']);
		
		        $users[] = '999999999999';
		        foreach($payments as $k_payment => $v_payment)
		        {
		            $users[] = $v_payment['create_user'];
		        }
		
		        $users_list = $user->getMultipleUserDetails($users);
		
		        foreach($users_list as $k_user => $v_user)
		        {
		            $users_list_details[$v_user['id']] = $v_user;
		        }
		
		        if($_REQUEST['op'] == 'del')
		        {
		            if(count($payments) == 1)
		            {
		                $next = '0';
		            }
		            else
		            {
		                $next = '1';
		            }
		
		
		            $del_payment = $hospiz_payments->delete_invoice_payment($_REQUEST['paymentid']);
		
		            //update invoice status when deleting an payment
		            if($del_payment)
		            {
		                $invoice_payments_sum = $hospiz_payments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
		                $invoice_details = $hospiz_invoices->get_invoice($_REQUEST['invoiceid']);
		
		                if($invoice_payments_sum)
		                {
		                    if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
		                    {
		                        $status = '3'; //paid
		                    }
		                    else
		                    {
		                        $status = '5'; //not paid/partial paid
		                    }
		                }
		                else
		                {
		                    //no payments => draft
		                    $status = '2';
		                }
		                $update_status = $bwinvoice_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
		            }
		
		            //reload the payments
		            unset($payments);
		            $payments = $hospiz_payments->getInvoicePayments($_REQUEST['invoiceid']);
		        }
		
		        $this->view->payments = $payments;
		        $this->view->users_list = $users_list_details;
		        $payments_list = $this->view->render('invoicenew/bwlistpayments.html');
		        echo $payments_list;
		
		        exit;
		    }
		    else
		    {
		        exit;
		    }
		}
		
		
	/**
	 * 
	 * @param string $ipids
	 * @param string $grouped_by_day
	 * @return boolean|Ambigous <unknown, multitype:, Doctrine_Collection>
	 */
		private function get_overall_contact_forms($ipids,$grouped_by_day = false)
		{
			if(empty($ipids)){
				return false;
			}
		    if(is_array($ipids))
		    {
		        $ipids_arr = $ipids;
		    }
		    else
		    {
		        $ipids_arr[] = $ipids;
		    } 
		    
		    $contact_from_course = Doctrine_Query::create()
		    ->select("id,ipid,recordid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
		    ->from('PatientCourse')
		    ->whereIn('ipid', $ipids_arr)
		    ->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
		    ->andWhere("wrong = 1")
		    ->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
			->andWhere('source_ipid = ""')
		    ->orderBy('course_date ASC');
		    $contact_v = $contact_from_course->fetchArray();
		    
		    foreach($contact_v as $k_contact_v => $v_contact_v)
		    {
		        $deleted_contact_forms[] = $v_contact_v['recordid'];
		    }
		
		    $contact_form_visits = Doctrine_Query::create()
		    ->select("*")
		    ->from("ContactForms")
		    ->whereIn('ipid', $ipids_arr);
		    if(!empty($deleted_contact_forms)){
			    $contact_form_visits->andWhereNotIn('id', $deleted_contact_forms);
		    }
		    $contact_form_visits->andWhere('isdelete ="0"')
		    ->andWhere('parent ="0"');
		    $contact_form_visits->orderBy('begin_date_h, begin_date_m ASC');
		    $contact_form_visits_res = $contact_form_visits->fetchArray();
		
		    foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
		    {
                if($grouped_by_day){
                    
    		        $contact_form_visit_date = date('Y-m-d', strtotime($v_contact_visit['billable_date']));
    		
    		        $cf_visit_days[$contact_form_visit_date][] = $v_contact_visit;
                } else{
    		        $cf_visit_days[] = $v_contact_visit;
                }
		
		    }
		
		    return $cf_visit_days;
		}
		
		private function get_patients_contact_forms($ipids, $current_period =  false, $duration = false)
		{
			if(empty($ipids)){
				return false;
			}
		    if(is_array($ipids))
		    {
		        $ipids_arr = $ipids;
		    }
		    else
		    {
		        $ipids_arr[] = $ipids;
		    }
		    $contact_from_course = Doctrine_Query::create()
		    ->select("id, ipid, recordid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
		    ->from('PatientCourse')
		    ->whereIn('ipid', $ipids_arr)
		    ->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
		    ->andWhere("wrong = 1")
		    ->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
			->andWhere('source_ipid = ""')
		    ->orderBy('course_date ASC');
		
		    $contact_v = $contact_from_course->fetchArray();
		
		    foreach($contact_v as $k_contact_v => $v_contact_v)
		    {
		        $deleted_contact_forms[] = $v_contact_v['recordid'];
		    }
		
		    $contact_form_visits = Doctrine_Query::create()
		    ->select("*")
		    ->from("ContactForms")
		    ->whereIn('ipid', $ipids_arr);
		    if(!empty($deleted_contact_forms)){
		    	$contact_form_visits->andWhereNotIn('id', $deleted_contact_forms);
		    }
		    
		    if($current_period){
			    $contact_form_visits->andWhere('DATE(billable_date) BETWEEN ? and ?',array(date("Y-m-d",strtotime($current_period['start'])),date("Y-m-d",strtotime($current_period['end'])) ));
		    }
		    $contact_form_visits->andWhere('isdelete ="0"')
		    ->andWhere('parent ="0"');
		    $contact_form_visits->orderBy('begin_date_h, begin_date_m ASC');
		    $contact_form_visits_res = $contact_form_visits->fetchArray();
		
		    foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
		    {
		        if($duration)
		        {
// 		            $v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_duration(str_pad($v_contact_visit['begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_m'], 2, "0", STR_PAD_LEFT), $v_contact_visit['date']);
		            $v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_durationbydates($v_contact_visit['start_date'],$v_contact_visit['end_date']);
		        }
		
		        $cf_visit_days[$v_contact_visit['ipid']][$v_contact_visit['id']] = $v_contact_visit;
		    }
		
		    return $cf_visit_days;
		}
		
		
		///members_payments_markaspaidordelete -> same functionality as memberslistpaymentsAction, was created for the tab-invoice-payments
		public function memberspaymentsmarkaspaidordeleteAction()
		{
			$this->_helper->viewRenderer->setNoRender(true);
			$this->_helper->layout->disableLayout();
			
			
			if($this->getRequest()->isPost())
			{
				$payment_ids = array();
				foreach ($_POST['document'] as $val) {
					if ((int)$val > 0) {
						$payment_ids[] = $val;
					}
				}
				
				if( ! empty($payment_ids))
				{
					$af_mi =  new Application_Form_MembersInvoices();
					$af_mi->update_payments($_POST['action'], $payment_ids , $this->clientid, $_POST);
				}
			}
			
			$this->redirect(APP_BASE . "invoicenew/membersinvoices?opentab=invoice-payments" , array("exit" => true));//not your invoice ?
					
		}
		
		//generate_sepa_xml_batchAction
		public function generatesepaxmlbatchAction()
		{
		//public function generate_sepa_xml_batchAction(){
			$this->_helper->viewRenderer->setNoRender(true);
			$this->_helper->layout->disableLayout();

			//?action=invoice
			//?action=invoice-payments
			if (empty($_REQUEST['invoices'])){
				
				return false;
			}
			
			$invoices_ids =  explode(",", $_REQUEST['invoices']);
			array_walk($invoices_ids, function(&$value) {
				$value = trim((int)$value);
			});
			if (count($invoices_ids) == 0){
				return false;
			}	
			
			$result =  false;
			switch($_REQUEST['action'] ) {
				
				case 'invoice' : {
					$invoices_details = MembersInvoices :: get_invoices_of_client($this->clientid, $invoices_ids);
					$member_ids = array_column($invoices_details, 'member');
					$member_details = Member::get_client_members($this->clientid, 0, 0, 0, $member_ids);
					
					foreach($invoices_details as $k=>$inv ){
						$invoices_details[$k]['member_details'] =  $member_details [ $inv['member'] ];	
					}
					
					if (!empty($_REQUEST['memeberid']) && $_REQUEST['memeberid'] ==  $inv['member']){
						$batch_mode = false;
						//only one member
					}else{
						$batch_mode = true;
					}
					$result = self::generate_sepa_xml( $invoices_details, true , $batch_mode );
				
				} break;
				
				case 'invoice-payments' : {
					
					//$invoices_ids =  id from members_invoice_payments
					$payment_ids = $invoices_ids;
					$mip_obj = new MembersInvoicePayments();
					$mi_obj = new MembersInvoices();
					$m_obj = new Member();
					
					$filters = array(
							'id' => array(
									"whereIn"	=> "id",
									"params"	=> $payment_ids
							),
					);
					$payments = $mip_obj->get_client_payments($this->clientid, $filters);
					
					
					$member_arr = array_column(array_column($payments['order_by_status'], "MembersInvoices") , "member");					
					$members_details = $m_obj->getMembersDetails($member_arr);
					$m_obj->beautifyName($members_details);
										
					$invoice_arr = array_column(array_column($payments['order_by_status'], "MembersInvoices") , "id");
					$invoice_arr = array_unique($invoice_arr);
					$filters = array(
							'id' => array(
									"whereIn"	=> "id",
									"params"	=> $invoice_arr
							),
					);
					$invoices_details = $mi_obj->get_client_invoices($this->clientid, $filters);
					
					$result = self::generate_sepa_xml_v2( $payments, $invoices_details , $members_details , $download_xml=true);
										
					
					
				} break;
			}
			
			
			if ($result !== true){
				
				$this->_helper->layout->setLayout('layout_ajax');
				$TR =  new Zend_View_Helper_Translate();
				
				$SEPA_Batch_Errors_title = $TR->translate("SEPA Batch Errors");
				
				$all_errors = "";
				
				$func_trim = function($string) {
					return trim(str_replace(array("\r\n", "\r", "\n"), "", $string));
				};
				
				foreach($result as $mid => $errors){
					
					$members_details_nice_name = "";
					if (isset($members_details[$mid])) {
						$members_details_nice_name = $members_details[$mid]['nice_name'] . "\\n";
					}
					$errors =  array_unique($errors);
					
					$errors = array_map($func_trim, $errors);
										
					$all_errors .= $members_details_nice_name . htmlspecialchars(implode("\\n", $errors));
					$all_errors .= "\\n\\n";
					
				}
$str =  "
<script>
		var errors = '".$all_errors."';
		setTimeout(function () {alert(\"".$SEPA_Batch_Errors_title."\\n\\n\"+errors);}, 150);
				
</script>			
";

// $str .= "<!--".print_r($result, true)."-->";

				echo $str;
				
				//echo "<div>".implode("\n<br>\n", $result)."</div>";
				//echo "<div>";
				//print_r($result);
				//echo "</div>";
				
// 				die();
				
// 				$this->forward('membersinvoices', null, null, array('sepa_errors'=>$result));
			}

			return;
			
		}
		
		//ISPC 1842
		public function filedownloadsepaxmlAction(){
			$this->_helper->viewRenderer->setNoRender(true);
			$this->_helper->layout->disableLayout();
				
	
			if (isset($_REQUEST['invoiceid'])){
				$sepa_xml_files_array = MembersSepaXml :: get_sepa_files_by_invoiceid( (int)$_REQUEST['invoiceid'], $this->clientid );
			}elseif	(isset($_REQUEST['id'])){
				$sepa_xml_files_array = MembersSepaXml :: get_sepa_files_by_id( (int)$_REQUEST['id'], $this->clientid );
			}else{
				$this->_redirect(APP_BASE . "overview/overview");
			}	
			
			if ( $sepa_xml_files_array == false ){
				echo ("Invalid File");
				$this->_redirect(APP_BASE . "overview/overview");
				
			}
			elseif(empty($sepa_xml_files_array['ftp_file'])){
				echo ("ftp path error");
				$this->_redirect(APP_BASE . "overview/overview");
			}
// 			echo "<pre>";
// 			print_R($sepa_xml_files_array);
			$file_password = $this->filepass;
			$ftp_path = $sepa_xml_files_array['ftp_file'];
			$file_nice_name = $sepa_xml_files_array['filename_nice'];
			$file_nice_name = Pms_CommonData::filter_filename($file_nice_name, true);
			if (trim($file_nice_name) == "" ){
				$file_nice_name = "sepa.xml";
			}
			
			$file_nice_extension = $sepa_xml_files_array['file_type'];
			
			$ftp_path_info = pathinfo($ftp_path);
			
			$local_unzip_folder = PDF_PATH;//trim(PUBLIC_PATH . "/uploads") ;
			
			$local_unziped_file = $local_unzip_folder . "/" . $ftp_path_info['filename'] ;
			
			$local_zip = trim($local_unziped_file . '.zip');

// 			$local_unziped_file = Pms_CommonData::ftp_download( $ftp_path, $file_password, false, null, $ftp_path, "MembersSepaXml", $sepa_xml_files_array['id'] );
			$local_unziped_file = Pms_CommonData::ftp_download( $ftp_path, $file_password, false, null, $ftp_path);
			
			
			if ($local_unziped_file  !==false){
				//we[claudiu] messed up the ftp-upload function... on upload only the file is archived... not the extra path
				//so now we fix our 'error' on download
				$local_unziped_file = str_replace('/uploads/', '/', $local_unziped_file);
				
			}
			//die($local_unziped_file);
			/*
			if($con_id = Pms_FtpFileupload::ftpconnect())
			{
				$download = Pms_FtpFileupload::filedownload($con_id, trim($local_zip) , trim($ftp_path));
				Pms_FtpFileupload::ftpconclose($con_id);
			} else {
				die("ftp error");
			}

			$cmd = "unzip -P " . $file_password ." ". trim($local_zip) . " -d ".$local_unzip_folder.";\n";
			@exec($cmd);
			*/

			if(file_exists($local_unziped_file)){
				$fsize = @filesize($local_unziped_file);
				$ext = explode(".", $file_nice_name);
				$ext = @end($ext);
				
				if (strtolower($file_nice_extension) != strtolower($ext) ){
					$file_nice_name .= "." . $file_nice_extension;
				}
				
				header('Pragma: public');
				header('Expires: 0');
				header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
				header('Content-Type: application/octet-stream');
				header('Content-Transfer-Encoding: Binary');
				header("Content-length: $fsize");
				header("Cache-Control: private",true);
				
				if($_COOKIE['mobile_ver'] != 'yes' || ($_COOKIE['mobile_ver'] == 'yes' && stripos($_SERVER['HTTP_USER_AGENT'], 'Android') !== false))
				{ 
					//if on mobile version don't send content-disposition to play nice with iPad
					header("Content-Disposition: attachment; filename=\"" . $file_nice_name . "\"");
				}

				
// 				ob_flush();ob_clean();flush();
				ob_end_clean();	ob_start();
				
				readfile($local_unziped_file);
				unlink($local_unziped_file);
				
			}
			
			//$cmd = "rm -f ".$local_unziped_file."; rm -f ".$local_zip .";";
			//@exec($cmd);
	
			exit;
			
		}
		private function generate_sepa_xml_v2( $payments = array(), $invoices_details = array(), $members_details = array() , $download_xml = false)
		{
			$TR =  new Zend_View_Helper_Translate();
			
			$new_mandate_reference_arr = array();// hold the newly generated numbers for each member
			
			$errors = array();
			
			$ok_xml_payments =  array();
			
			$client_data = Client::getClientDataByid($this->clientid);
			$client_data = $client_data[0];
			
			$SEPA_IBAN	= $client_data['sepa_iban'];// "DE02100500000024290661";
			$SEPA_BIC	= $client_data['sepa_bic'];//"AARBDE5W700";
			$SEPA_NAME	= trim($client_data['team_name']) ;
			$SEPA_CID	= trim($client_data['sepa_ci']);//'DE98ZZZ09999999999'; // Creditor-Identifier
			
			$iban_Validator = new Pms_SepaIbanValidator(array(
					'allow_non_sepa'=>false ,
					'iban'=>$SEPA_IBAN));
				
			if ( ! $ibanIsValid = $iban_Validator->isValid() ){
				return array(array("0" => $TR->translate('Invalid creditor IBAN.')));
			}
				
			if ( ! $bicIsValid = $iban_Validator->bic_isValid($SEPA_BIC) ){
				return array(array("0" => $TR->translate('Invalid creditor BIC.')));
			}
				
			$SEPA_IBAN = $iban_Validator->iban_to_machine_format();
			$SEPA_BIC = $iban_Validator->bic_to_machine_format($SEPA_BIC);
				
			$create_time = time();
			
			$sepa_obj = new Pms_SepaXmlCreatorV2('urn:iso:std:iso:20022:tech:xsd:pain.008.002.02');
			$groupHeader = $sepa_obj->get_SEPAGroupHeader(); // (1..1)
			$groupHeader->setMessageIdentification('SEPA-'.$SEPA_BIC. '00'. $create_time ); // Unique ID for this job
			$groupHeader->setInitiatingPartyName($SEPA_NAME); // Name of the party sending the job.
			$sepa_obj->setGroupHeader($groupHeader);
			

			$count_payments_in_xml = 0;
			foreach ($payments['order_by_status'] as $single_payment) 
			{
				

				$single_payment;
				$invoice = $invoices_details[$single_payment['invoice']];
				$member = $members_details[$single_payment['MembersInvoices']['member']];
				
				//member bank info validate iban, bic
				//fast enough so can be performed multiple times on same datas :) - add extra if() if performance issue
				$iban_Validator = new Pms_SepaIbanValidator(array(
						'allow_non_sepa'=>false ,
						'iban'=>$member['iban']));
				if ( ! $ibanIsValid = $iban_Validator->isValid() ){
					$errors [$member['id']] [] = $TR->translate("IBAN validation failed");// . " : " . $member['nice_name']; //'IBAN validation failed :'.$member_name ;
				}
				if ( ! $bicIsValid = $iban_Validator->bic_isValid($member['bic']) ){
					$errors [$member['id']] [] = $TR->translate("BIC validation failed");// . " : " . $member['nice_name'];//'BIC validation failed :'.$member_name ;
				}
				$member_iban_to_machine_format = $iban_Validator->iban_to_machine_format();
				$member_bic_to_machine_format = $iban_Validator->bic_to_machine_format($member['bic']);
				$member_name = $member['nice_name'] ;
				
				
				
				if ( (float) $single_payment['amount'] < .01) {
					$errors [$member['id']] [] = $TR->translate("Amount validation failed") . " : " . $single_payment['amount'];//'Amount validation failed :'.$member_name ;
				}
				
				
				$mandatID = trim($member['mandate_reference']);
				if ( empty($mandatID) && isset($new_mandate_reference_arr[$member['id']])){
					$mandatID = $new_mandate_reference_arr[$member['id']];//autogenerated in member settings?
				}
				
				if ( ! is_null($member['mandate_reference_date']) && strtotime($member['mandate_reference_date']) > strtotime("1970-01-02")) {
					//from member settings
					$mandatDate = date("Y-m-d", strtotime($member['mandate_reference_date']));
				} else {
					//today will be used
					$mandatDate = date("Y-m-d");
				}
				if ( empty($mandatID) ){
					//generate now a new one
					$mandatID = $this->generate_new_mandate_reference_number($member['id']);
					$mandatDate = date("Y-m-d");
					$new_mandate_reference_arr [$member['id']] = $mandatID;
					
				}
				
				$RemittanceInformation =  "Mandatsreferenz:" . $mandatID
				. " vom " . $mandatDate
				." Rechnung Nr. " . $invoice['prefix'] . $invoice['invoice_number']
				. " vom "  .  date("d.m.Y", strtotime($invoice['completed_date']))
				. " Mitgliedsbeitrag:" . trim($member['member_number'])
				. " Glaeubiger-ID:" . $SEPA_CID;
				
				if ( strlen($RemittanceInformation) > 140){
					$RemittanceInformation = substr($RemittanceInformation, 0, 140);
				}
								
				if ( ! empty ($errors [$member['id']])) {
					continue;
				}
				
				$paymentInfo = $sepa_obj->get_SEPAPaymentInfo(); // (1..n)
				
				$PmtInfId = "PMT-ID". $single_payment['id'] . "-".date('YmdHis',$create_time);
				$paymentInfo->setPaymentInformationIdentification($PmtInfId); // Your own unique identifier for this batch
				$paymentInfo->setBatchBooking('false');
				$paymentInfo->setLocalInstrumentCode('CORE'); // Other options: COR1, B2B
				

				// You can use an execution offset to define when the posting is performed
				// Type of the job and execution date
				$paymentInfo->setSequenceType('FRST');
				// CORE: FRST: +6 days, RCUR: +3 days, FNAL: +3 days, OOFF: +6 days
				// B2B: All +2 days
				
				$payment_fixed_date = date('Y-m-d', strtotime($single_payment['scheduled_due_date']));
				
				if (strtotime($payment_fixed_date) < strtotime("Today")) {
					$payment_fixed_date = date('Y-m-d');//strtotime("Today");
				}
				//set the fixed date for payment processing
// 				$paymentInfo->setRequestedCollectionDate(date('Y-m-d', strtotime($payment_fixed_date)));
				$paymentInfo->setRequestedCollectionDate($payment_fixed_date);
				
				// Account on which payment should be recieved
				$paymentInfo->setCreditorName($SEPA_NAME);
				$paymentInfo->setCreditorAccountIBAN($SEPA_IBAN);
				$paymentInfo->setCreditorAgentBIC($SEPA_BIC);
				$paymentInfo->setCreditorSchemeIdentification($SEPA_CID);
	
				$paymentInfo_Errors = $paymentInfo->getErrors();
				if ( ! empty($paymentInfo_Errors)) {
					foreach ( $paymentInfo_Errors as $err ) {
						$errors [$member['id']] [] = $TR->translate( $err );
// 						$errors [$member['id']] [] = $err;
					}
						
					continue;
				}
				
				
				
				$transaction = $sepa_obj->get_SEPADirectDebitTransaction(); // (1..n)
				
				$transaction->setEndToEndIdentification("member-invoiceid-".$single_payment['invoice'] . "-" . $single_payment['id']); // Unique transaction identifier (shown to the debtor)
				$transaction->setInstructedAmount($single_payment['amount']);
				$transaction->setMandateIdentification($mandatID); // Shown to the debtor
				$transaction->setDateOfSignature($mandatDate);
				
				$transaction->setAmendmentIndicator('false');
				
				$transaction->setDebtorName( $member_name );
				$transaction->setDebtorIban( $member_iban_to_machine_format );
				$transaction->setDebtorAgentBIC( $member_bic_to_machine_format );
				$transaction->setRemittanceInformation($RemittanceInformation); // Shown to the debtor
				
				$transaction_Errors = $transaction->getErrors();
				if ( ! empty($transaction_Errors)) {
					foreach ( $transaction_Errors as $err ) {
						$errors [$member['id']] [] = $TR->translate( $err );
// 						$errors [$member['id']] [] =  $err;
						
					}
					continue;
				} 
				
				$paymentInfo->addTransaction($transaction);
				$sepa_obj->addPaymentInfo($paymentInfo);
				
				$file_nice_name = $member_name; 
				$count_payments_in_xml++;
				
				
				$ok_xml_payments[] = $single_payment;
			}
			
			
			if ( ! empty ($errors)){
				return $errors; // display the error that user can fix himself, do not generate any xml
			}
			
			
			if ($sepa_obj->validateXML('xsd/SEPA_pain.008.002.02.xsd')) 
			{
				//temp folder to save the file
				$temp_path =  Pms_CommonData::uniqfolder(PDF_PATH, $prefix_path);
				$local_path = PDF_PATH . "/" .$temp_path;
				$local_path_filename = $local_path . "/". $temp_path;
				
				if ($sepa_obj->saveXML($local_path_filename)) {
					
					if ($count_payments_in_xml > 1){
						$file_nice_name = "Batch_Mode_". $count_payments_in_xml ."_";
					}
					$file_nice_name ='SEPA_'.$file_nice_name. "_" . date("d.m.Y") .".xml";
					$file_nice_name = Pms_CommonData::filter_filename($file_nice_name, true);
						
					
					
					//save to ftp and into member table
					$cmd = "zip -9 -r -j -P " . $this->filepass . " ". $local_path . ".zip " . $local_path_filename . ";" ;
					@exec($cmd);
					
					$ftp_filename = "uploads/" . $temp_path . ".zip";
					$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( $local_path . ".zip" , "uploads" ,
							array(
									"is_zipped" => true,
									"file_name" => $ftp_filename,
									"insert_id" => NULL,
									"db_table"	=> "MembersSepaXml",
							));
					
					$msx_obj = new MembersSepaXml();
					foreach ($ok_xml_payments as $row){
						//record info about ftp zip file .. ! this is done as a one-liner not as a collection
						$msx_obj->set_save_sepa_file(array(
								"clientid" => $this->clientid ,
								"memberid" => $row['MembersInvoices']['member'] ,
								"invoiceid" => $row['invoice'] ,
								"invoiceid_extra" => '' ,
								"paymentid" => $row['id'] ,
								"filename_nice" => $file_nice_name ,
								"ftp_file" => $ftp_filename,
						));
					}
					
					
					//update payment status
					$pay_ids = array_column($ok_xml_payments, 'id');
					$mip_obj = new MembersInvoicePayments();
					$mip_obj->set_status_payment_requested($pay_ids);
					
					
					if ($download_xml) {
						$this->download_file($local_path_filename, $file_nice_name);
						//remove the file now?
					}
					
				} else {
					$errors[] = "cannot save xml ?";
					return $errors;
				}

				
			} else {
				
				$temp_path =  Pms_CommonData::uniqfolder(PDF_PATH, $prefix_path);
				$local_path = PDF_PATH . "/" .$temp_path;
				$local_path_filename = $local_path . "/". $temp_path;
				$sepa_obj->saveXML($local_path_filename) ;
				
				$errors[][] = $TR->translate("unknown error, support was informed") . " #" . $temp_path;
				
				$msg = $sepa_obj->getXmlErrors();
				
				Pms_CommonData::send_errormail($errors, $local_path_filename,  $msg);//send admin a message with this new error
				
				return  $errors;
			}
				
			return true;
					
		}
		
		private function download_file( $filepath , $file_nice_name = null)
		{
			if (file_exists($filepath)) 
			{
				$fsize = @filesize($filepath);
					
				header('Pragma: public');
				header('Expires: 0');
				header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
				header('Content-Type: application/octet-stream');
				header('Content-Transfer-Encoding: Binary');
				header("Content-length: $fsize");
				header("Cache-Control: private",true);
					
				if($_COOKIE['mobile_ver'] != 'yes' || ($_COOKIE['mobile_ver'] == 'yes' && stripos($_SERVER['HTTP_USER_AGENT'], 'Android') !== false))
				{
					if (is_null($file_nice_name)) {
						$file_nice_name = basename($filepath);
					}
					//if on mobile version don't send content-disposition to play nice with iPad
					header("Content-Disposition: attachment; filename=\"" . $file_nice_name . "\"");
				}
					
				//ob_flush();ob_clean();flush();
				ob_end_clean();	ob_start();
					
				readfile($filepath);
			}
		}
		
		private function generate_new_mandate_reference_number( $member_id = 0 )
		{			
			//generate now a new one
			$member_object = new Member();
			$highest_mr = $member_object->get_highest_mandate_reference_number();
			
			//save this new number
			$member_object = Doctrine::getTable('Member')->find($member_id);
			if($member_object && ! empty($highest_mr))
			{
				$member_object->mandate_reference = $highest_mr;
				$member_object->mandate_reference_date = date("Y-m-d");
				$member_object->save();
			}
			
			return $highest_mr;
			
		}
		private function generate_sepa_xml($multi_invoice_data, $download_xml = false, $batch_mode = false)
		{
			//@todo: a history check must be performed , because some of the sepa nodes need a third bool param if they have changed
			//MndtId if changed needs  AmdmntInd=true
			//get last sepa of a member and compare values with current ones ?
			
			$TR =  new Zend_View_Helper_Translate();

			/*
			 * google this: Standard-XML-SDD-Initiation-v20b-EN.pdf
			 * or
			 * check pdf version saved on public/xsd/Standard-XML-SDD-Initiation-v20b-EN.pdf
			 * in order to accept CORRECT custom Direct Debit Collection date,
			 * SepaXmlCreator class MUST be extended to allow fro multiple PmtInf=> 
			 * see: $paymentInfo = $dom->createElement('PmtInf');
			 *			
			 * set $test_path = false for production
			 * or set it to the path from the ftp_server where you want the sepa.xml files to be saved
			 * full ftp_path of file is saved to db, for later download
			 */

			//$test_path = "/home/www/ispc/public/uploadfile";
			$test_path = false;
			
			//a string to use in testmode, to faster identify created files on localhost
			$prefix_path = "";
						
			//print_r($member_details);die();
			$client_data = Client::getClientDataByid($this->clientid);
			$client_data = $client_data[0];
						
			$errors = array();
				
			$new_mandate_reference_arr = array();// hold the newly generated numbers for each member
			
			$SEPA_IBAN = $client_data['sepa_iban'];// "DE02100500000024290661";
			$SEPA_BIC  = $client_data['sepa_bic'];//"AARBDE5W700";
// 			$SEPA_NAME = trim($client_data['lastname']) .", ". trim($client_data['firstname']) ;
			$SEPA_NAME = trim($client_data['team_name']) ;
			$Creditor_ID = trim($client_data['sepa_ci']);//'DE98ZZZ09999999999'; // Creditor-Identifier
			//"[a-zA-Z]{2,2}[0-9]{2,2}([A-Za-z0-9]|[\+|\?|/|\-|:|\(|\)|\.|,|']){3,3}([A-Za-z0-9]|[\+|\?|/|\-|:|\(|\)|\.|,|']){1,28}"
			
			
			$iban_Validator = new Pms_SepaIbanValidator(array(
					'allow_non_sepa'=>false ,
					'iban'=>$SEPA_IBAN));
			
			if ( ! $ibanIsValid = $iban_Validator->isValid() ){
				return array(array("0"=>'Client IBAN validation failed'));
			}
			
			if ( ! $bicIsValid = $iban_Validator->bic_isValid($SEPA_BIC) ){
				return array(array("0"=>'Client BIC validation failed'));
			}
			
			$SEPA_IBAN = $iban_Validator->iban_to_machine_format();
			$SEPA_BIC = $iban_Validator->bic_to_machine_format($SEPA_BIC);
			
			$creator = new Pms_SepaXmlCreator();
			$creator->mode = 2;
			$creator->setAccountValues($SEPA_NAME, $SEPA_IBAN, $SEPA_BIC);
			$creator->setGlaeubigerId($Creditor_ID);
			

			foreach ($multi_invoice_data as $invoice_data) {
				
				if ($batch_mode){
					//in batch mode, member_details is attached to each invoice
					$member = $invoice_data['member_details'];
					
				}else{
					//for single invoice we must get the member details
					$member_details = Member::getMemberDetails($invoice_data['member']);
					$member = $member_details[key($member_details)];
					//for single invoice we can use a debit-date from the WHEN setting on member
					$MembersSepaSettings = MembersSepaSettings :: get_member_settings($invoice_data['member'] , $this->clientid );
					$MembersSepaSettings_howoften = $MembersSepaSettings[key($MembersSepaSettings)];
						
					switch($MembersSepaSettings_howoften['howoften']){
					
						case "monthly":
							foreach($MembersSepaSettings as $val){
									
								if ($val['member2membershipsid'] == $invoice_data['membership_data']
										&&
										$val['when_month']== date('n'))
								{
					
									$sepa_date =  date('Y-m-d',  strtotime(date("Y")."-". sprintf('%02d', $val['when_month']) ."-" . sprintf('%02d', $val['when_day'])));
									break;
								}
							}
					
							break;
								
						case "quarterly":
							$CurrentQuarter = $this->CurrentQuarter();
							foreach($MembersSepaSettings as $val){
									
								if ($val['member2membershipsid'] == $invoice_data['membership_data']
										&&
										$CurrentQuarter == $val['when_month'])
								{
										
									$current_q = Pms_CommonData::get_dates_of_quarter ( $val['when_month'], null, "d.m.Y" );
									$sepa_date =  date('Y-m-d', strtotime( $val['when_day']." days", strtotime( $current_q['start']) ) );
									break;
								}
							}
							break;
					
						case "annually":
							$MembersSepaSettings = $MembersSepaSettings[key($MembersSepaSettings)];
							$sepa_date =  date('Y-m-d',  strtotime( date("Y") . "-" . sprintf('%02d', $MembersSepaSettings['when_month']) . "-" . sprintf('%02d', $MembersSepaSettings['when_day']) ) ) ;
							break;
					}
					
					//set the fixed date for payment processing
					if (strtotime($sepa_date) >= strtotime("Today")) {
						$creator->setAusfuehrungDatum($sepa_date);
					}
					/*
					 * You can use an execution offset to define when the posting is performed. The number
					 * Of the days passed will be added to the current calendar day
					 */
					//$creator->setAusfuehrungOffset(7);	 
				}
				
				//TODO-2966 Ancuta 02.03.2020
				//$member_name = trim($member['first_name']) ." " .trim($member['last_name']) ;
				if($member['type'] == 'company'){
				    
				    $person_of_company="";
				    if ( trim($member['last_name']) != "" || trim($member['first_name'])) {
				        $person = trim($member['title'] . " " . $member['last_name']);
				        $person .= trim( $member['first_name']) != '' ? (", " . $member['first_name']) : "";
				        
				        $person_of_company =  ' ('.$person.')';
				    }
				    
				    $person_of_company = "";// do not add as it is too long
				    $member_name = trim($member['member_company']).$person_of_company;
				} else{
    				$member_name = trim($member['first_name']) ." " .trim($member['last_name']) ;
				}
				
				if( ! empty($member_name)){
				    if(strlen($member_name) > 70){
				        $errors [$member['id']] [] = $TR->translate("Der Mitgliedsname ist zu lang (max. 70 Zeichen)") . " : " . $member_name;//'Mandate Reference failed:'.$member_name ;
				    }
				}
				// --
				
				$mandatID = trim($member['mandate_reference']);
				if ( empty($mandatID) && isset($new_mandate_reference_arr[$member['id']])){
					$mandatID = $new_mandate_reference_arr[$member['id']];//autogenerated in member settings?
				}
						
				if ( ! is_null($member['mandate_reference_date'])) {
					//from member settings
					$mandatDate = date("Y-m-d", strtotime($member['mandate_reference_date']));
				} else {
					//today will be used
					$mandatDate = null; 
				}
				if ( empty($mandatID) ){
					
					//generate now a new one
					$member_object = new Member();
					$highest_mr = $member_object->get_highest_mandate_reference_number();
					
					//save this new number		
					$member_object = Doctrine::getTable('Member')->find($member['id']);
					if($member_object && ! empty($highest_mr))
					{
						$member_object->mandate_reference = $highest_mr;
						$member_object->save();	

						$mandatID = 
						$new_mandate_reference_arr [$member['id']] = $highest_mr;
						
					} else {					
						$errors [$member['id']] [] = $TR->translate("Mandate Reference failed") . " : " . $member_name;//'Mandate Reference failed:'.$member_name ;
					}
				}
				
				//member bank info validate iban, bic 
				//fast enough so can be performed multiple times on same datas :) - add extra if() if performance issue
				$iban_Validator = new Pms_SepaIbanValidator(array(
						'allow_non_sepa'=>false ,
						'iban'=>$member['iban']));
				
				if ( ! $ibanIsValid = $iban_Validator->isValid() ){
					$errors [$member['id']] [] = $TR->translate("IBAN validation failed") . " : " . $member_name; //'IBAN validation failed :'.$member_name ;	
				}
				
				if ( ! $bicIsValid = $iban_Validator->bic_isValid($member['bic']) ){
					$errors [$member['id']] [] = $TR->translate("BIC validation failed") . " : " . $member_name;//'BIC validation failed :'.$member_name ;					
				}
				$iban_to_human_format = $iban_Validator->iban_to_human_format();
				$iban_to_machine_format = $iban_Validator->iban_to_machine_format();
				$bic_to_machine_format = $iban_Validator->bic_to_machine_format($member['bic']);
				
				if ( (float) $invoice_data['invoice_total'] < .01) {
					$errors [$member['id']] [] = $TR->translate("Amount validation failed") . " : " . $member_name;//'Amount validation failed :'.$member_name ;
				}
			
				// This step with add directdebit can be repeated for multiple
				$buchung = new Pms_SepaBuchung(); // Create a new transfer
					
				$buchung->setBetrag( $invoice_data['invoice_total']); // desired transfer amount
				$buchung->setEnd2End("member-invoiceid-".$invoice_data['id']); // desired End2End reference (OPTIONAL)
				$buchung->setName( $member_name );// Name of debitor
				$buchung->setIban( $iban_to_machine_format );// IBAN of the debitor
				$buchung->setBic( $bic_to_machine_format );// BIC
				$buchung->setMandat($mandatID , $mandatDate , false);

				$mandate_reference_date = '';
				if (!is_null($member['mandate_reference_date'])) {
					$mandate_reference_date = date("d.m.Y", strtotime($member['mandate_reference_date']));
				}
				$Verwendungszweck =  "Mandatsreferenz:" . $mandatID 
				. " vom " . $mandate_reference_date 
				." Rechnung Nr. " . $invoice_data['prefix'] . $invoice_data['invoice_number'] 
				. " vom "  .  date("d.m.Y", strtotime($invoice_data['completed_date'])) 
				. " Mitgliedsbeitrag:" . trim($member['member_number'])
				. " Glaeubiger-ID:" . $Creditor_ID;
				
				if ( strlen($Verwendungszweck) > 140){
					$Verwendungszweck = substr($Verwendungszweck, 0, 140);	
				}
// 				Glaeubiger-ID: DE48ZZZ00000432210 Mandatsreferenz: 25097 vom 12.04.2016 Rechnung Nr. 201613508 vom 01.06.2016 Kunde Nr. 25097
				$buchung->setVerwendungszweck($Verwendungszweck); // desired application (OPTIONAL)
				
				// Add a this member debit to the list
				$creator->addBuchung($buchung);
				
				if(strpos($filename_nice, $member_name) === false){
					$filename_nice .= $member_name . " _ ";
				}
				
				
				$member_id_4_dbf_xml[ $member['id'] ] [] = $invoice_data['id'];

			}
			
			if ($batch_mode){
				$member['id'] = 0;
				$filename_nice = "Batch_Mode";
			}
			$filename_nice ='SEPA_'.$filename_nice. date("d.m.Y") .".xml";
			$filename_nice = utf8_decode($filename_nice);
				
			if (! empty ($errors)) {
				return $errors;
			}


				
					
			// Now the XML file can be generated by calling the corresponding method
			// mode = 1 = credit => generateSammelueberweisungXml  
			// mode = 2 = debit => generateBasislastschriftXml  
			$sepaxml = $creator->generateBasislastschriftXml();
				
			if (($temp_path =  Pms_CommonData::uniqfolder(PDF_PATH, $prefix_path)) !==false ){
				$local_path_filename = PDF_PATH . "/" .$temp_path;
				file_put_contents($local_path_filename . "/". $temp_path, $sepaxml);
			}else{
				$errors [$member['id']] [] = 'failed allocate tempnam write permision';
				return $errors;
			}
				
			//validator for pain.008.002.02.xsd = Direct Debits
			//validation id done using file located in the same path as the php
			//extend funtion to accept validate xds_source_path = APP_BASE . 'xsd/pain.008.002.02.xsd';
			
// 			XML Schema Definition (XSD).
			$xsd_source_path = PUBLIC_PATH . '/xsd/SEPA_pain.008.002.02.xsd';
			if ($creator->validateXMLmyXSD($local_path_filename . "/". $temp_path , $xsd_source_path))
			{	
// 				$tmpstmp = basename($local_path_filename . ".zip ");
				$tmpstmp = $temp_path;
					
				if($test_path == false){
					$ftp_filename = "uploads/" . $tmpstmp . ".zip";
				}else{
					$ftp_filename = $test_path . "/" . $tmpstmp . ".zip" ;
				}
							
				$cmd = "zip -9 -r -j -P " . $this->filepass . " ". $local_path_filename . ".zip " . $local_path_filename . "/". $temp_path . ";" ;
				@exec($cmd);
				
				
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( $local_path_filename . ".zip" , "uploads" ,
						array(
								"is_zipped" => true,
								"file_name" => $ftp_filename,
								"insert_id" => NULL,
								"db_table"	=> "MembersSepaXml",
						));
// 				die($local_path_filename);
				//upload file to ftp
				//connect
				/*
				if($con_id = Pms_FtpFileupload::ftpconnect())
				{
					//do upload
					$upload = Pms_FtpFileupload::fileupload($con_id, trim($local_path_filename . ".zip"), trim($ftp_filename));
					//close connection
					Pms_FtpFileupload::ftpconclose($con_id);				
				}else{
					$errors [$member['id']] ['ftp'] = "upload 2 ftp failed";
				}
				*/
								
				$msx_model = new MembersSepaXml();
					
				foreach ($member_id_4_dbf_xml as $member_id => $invoices){
					//record info about file
					if (count($invoices)>1){
						$invoices_extra = serialize($invoices);
						$invoices = 0;
					}
					else {
						$invoices = $invoices[0];
						$invoices_extra = '';
					}
					
					//record info about ftp zip file
					$msx_model->set_save_sepa_file(array(							
							"clientid" => $this->clientid ,
							"memberid" => $member_id ,
							"invoiceid" => $invoices ,
							"filename_nice" => $filename_nice ,
							"ftp_file" => $ftp_filename,
							"invoiceid_extra" => $invoices_extra,
							"batch_mode" => $batch_mode 
				
					));
				}
				
				if ($download_xml){
					$fsize = @filesize($local_path_filename . "/" .$temp_path);
						
					header('Pragma: public');
					header('Expires: 0');
					header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
					header('Content-Type: application/octet-stream');
					header('Content-Transfer-Encoding: Binary');
					header("Content-length: $fsize");
					header("Cache-Control: private",true);
						
					if($_COOKIE['mobile_ver'] != 'yes' || ($_COOKIE['mobile_ver'] == 'yes' && stripos($_SERVER['HTTP_USER_AGENT'], 'Android') !== false))
					{
						//if on mobile version don't send content-disposition to play nice with iPad
						header("Content-Disposition: attachment; filename=\"" . $filename_nice . "\"");
					}
						
					//ob_flush();ob_clean();flush();
					ob_end_clean();	ob_start();
					
					readfile($local_path_filename . "/" .$temp_path);
				}
				
				//remove
				$cmd = "rm -r '".$local_path_filename ."'; rm -f '".$local_path_filename .".zip'; ";
				@exec($cmd);
				
			}else{
				unlink($local_path_filename . "/". $temp_path); // remove invalid sepa files.. without the directory
				$errors [$member['id']] ['validatexml'] = $creator->getXmlErrors();
				return $errors;
			}
				
				
			if(!empty($errors)){
				return $errors;
			}else {
				return true;
			}
				
		}
		
		
		
		
		//get view list invoices templates
		public function listclientinvoicetemplatesAction(){
			//$logininfo = new Zend_Session_Namespace('Login_Info');
			//$clientid = $logininfo->clientid;
				
			$userid = $this->userid;
			$clientid = $this->clientid;
			$user_type = $this->usertype;
				
			if($user_type == "CA" || $user_type == "SA")
			{
				$reveal_actions_col = '1';
				$this->view->reveal_actions_col = '1';
			}
			else
			{
				$reveal_actions_col = '0';
				$this->view->reveal_actions_col = '0';
			}
			//TODO-3706 Ancuta 06.01.2021  - Overwrite and allow for all
			$reveal_actions_col = '1';
			$this->view->reveal_actions_col = '1';
			//--
			
			//populate the datatables
			if ($this->getRequest()->isXmlHttpRequest() && $this->getRequest()->isPost()) {
		
				$all_clients = Client::get_all_clients();
					
				$clientids[] = $clientid;
				$client_users_res = User::get_clients_users($clientids);
					
				foreach($client_users_res as $k_user => $v_user)
				{
					$client_users[$v_user['id']] = trim($v_user['first_name'] . ' ' . $v_user['last_name']);
				}
				//var_dump($client_users); exit;
		
				$this->_helper->layout()->disableLayout();
				$this->_helper->viewRenderer->setNoRender(true);
				if(!$_REQUEST['length']){
					$_REQUEST['length'] = "25";
				}
				$limit = (int)$_REQUEST['length'];
				$offset = (int)$_REQUEST['start'];
				$search_value = addslashes($_REQUEST['search']['value']);
		
				$columns_array = array(
						"0" => "title",
						"1" => "invoice_type_tr",
						"2" => "client_name",
						"3" => "file_type",
						"4" => "create_user_name"
		
				);
				$columns_search_array = $columns_array;
				
				if(isset($_REQUEST['order'][0]['column']))
				{
					$order_column = $_REQUEST['order'][0]['column'];
					$order_dir = $_REQUEST['order'][0]['dir'];
				}
				else
				{
					array_push($columns_array, "id");
					$nrcol = array_search ('id', $columns_array);
					$order_column = $nrcol;
					$order_dir = "ASC";
				}
			
				$order_by_str ='CONVERT(CONVERT('.addslashes(htmlspecialchars($columns_array[$order_column])).' USING BINARY) USING utf8) '.$order_dir;
				// ########################################
				// #####  Query for count ###############
				$fdoc1 = Doctrine_Query::create();
				$fdoc1->select('count(*)');
				$fdoc1->from('InvoiceTemplates');
				$fdoc1->where("clientid = ?", $clientid);
				$fdoc1->andWhere("isdeleted = 0  ");
				$fdoc1->andWhere("(title != '' or file_type != '')");
		
				$fdocarray = $fdoc1->fetchArray();
				$full_count  = $fdocarray[0]['count'];
		
				// ########################################
				// #####  Query for details ###############
				$fdoc1->select('*');
		
				if($order_column != "2" && $order_column != "4" && $order_column != "1")
				{
					$fdoc1->orderBy($order_by_str);
				}
		
				$fdoclimit = $fdoc1->fetchArray();
		
				foreach ($fdoclimit as $key=> $row) {
					$row['client_name'] = $all_clients[$row['clientid']]['client_name'];
					$row['create_user_name'] = $client_users[$row['create_user']];
					if(strlen($row['invoice_type']) > 0)
					{
						$row['invoice_type_tr'] = $this->view->translate($row['invoice_type'].'_label');
					}
					else 
					{
						$row['invoice_type_tr'] = $this->view->translate('template_no_invoice_type');
					}
					$fdoclimit[$key] = $row;
				}
		
				if(trim($search_value) != "")
				{
					$regexp = trim($search_value);
					Pms_CommonData::value_patternation($regexp);
					
					foreach($columns_search_array as $ks=>$vs)
					{
						$pairs[$vs] = trim(str_replace('\\', '',$regexp));
						
					}
					//var_dump($pairs);
					$fdocsearch = array();
					foreach ($fdoclimit as $skey => $sval) {
						foreach ($pairs as $pkey => $pval) {
							$pval_arr = explode('|', $pval);
						
							foreach($pval_arr as $kpval=>$vpval)
							{
								if (array_key_exists($pkey, $sval) && strpos(mb_strtolower($sval[$pkey], 'UTF-8'), $vpval) !== false) { 
									$fdocsearch[$skey] = $sval;
									break;
								}
							}
							
						}					
					}
					
					 
					$fdoclimit = $fdocsearch;
				}
				$filter_count  = count($fdoclimit);
				//var_dump($full_count);
					
				if($order_column == "2" || $order_column == "4" || $order_column == "1")
				{					 
					$sort_col = array();
					foreach ($fdoclimit as $key=> $row)
					{
						$row[$columns_array[$order_column].'_tr'] = mb_strtolower($row[$columns_array[$order_column]], 'UTF-8');
						$fdoclimit[$key] = $row;
						$sort_col[$key] = $row[$columns_array[$order_column].'_tr'];
					}
					 
					if($order_dir == 'desc')
					{
						$dir = SORT_DESC;
					}
					else
					{
						$dir = SORT_ASC;
					}
					array_multisort($sort_col, $dir, $fdoclimit);
					 
					$keyw = $columns_array[$order_column].'_tr';
					array_walk($fdoclimit, function (&$v) use ($keyw) {
						unset($v[$keyw]);
					});
				}
		
				if($limit != "")
				{
					$fdoclimit = array_slice($fdoclimit, $offset, $limit, true);
				}
				$fdoclimit = Pms_CommonData::array_stripslashes($fdoclimit);
		
				$report_ids = array();
				$fdoclimit_arr = array();
				foreach ($fdoclimit as $key => $report)
				{
					$fdoclimit_arr[$report['id']] = $report;
					$report_ids[] = $report['id'];
				}
					
				$row_id = 0;
				$link = "";
				
				$resulted_data = array();
				foreach($fdoclimit_arr as $report_id =>$mdata)
				{
					$link = '%s';
					$resulted_data[$row_id]['title'] = '<a href="'.APP_BASE.'invoicenew/gettemplate?tid='.$mdata['id'].'">'.$mdata['title'].'</a>';
					$resulted_data[$row_id]['invoice_type'] = '<a href="'.APP_BASE.'invoicenew/gettemplate?tid='.$mdata['id'].'">'.$mdata['invoice_type_tr'].'</a>';
					$resulted_data[$row_id]['client_name'] = '<a href="'.APP_BASE.'invoicenew/gettemplate?tid='.$mdata['id'].'">'.$mdata['client_name'].'</a>';
					$resulted_data[$row_id]['file_type'] = '<a href="'.APP_BASE.'invoicenew/gettemplate?tid='.$mdata['id'].'">'.$mdata['file_type'].'</a>';
					$resulted_data[$row_id]['create_user_name'] = '<a href="'.APP_BASE.'invoicenew/gettemplate?tid='.$mdata['id'].'">'.$mdata['create_user_name'].'</a>';
		
					if($reveal_actions_col != '0')
					{
						$resulted_data[$row_id]['actions'] = '<a href="'.APP_BASE .'invoicenew/editclientinvoicetemplate?tid='.$mdata['id'].'"><img border="0" src="'.RES_FILE_PATH.'/images/edit.png" /> </a><a href="javascript:void(0);"  class="delete" rel="'.$mdata['id'].'" id="delete_'.$mdata['id'].'"><img border="0" src="'.RES_FILE_PATH.'/images/action_delete.png"></a>';
					}
					else
					{
						$resulted_data[$row_id]['actions'] = '';
					}
						
					$row_id++;
				}
		
				$response['draw'] = $_REQUEST['draw']; //? get the sent draw from data table
				$response['recordsTotal'] = $full_count;
				$response['recordsFiltered'] = $filter_count; // ??
				$response['data'] = $resulted_data;
		
				$this->_helper->json->sendJson($response);
			}
		
		}		
		
		
		
		
		
		
		
		

		/* ##################################################### */
		/* ########## NEW RLP BILLING = ISPC-2143 ############## */
		/* ##################################################### */

		

		//used when generating invoices by link (one at a time normal || storno)
		public function rlpinvoiceAction()
		{
			if(!empty($_REQUEST['patient']))
			{
				$ipid = Pms_CommonData::get_ipid_from_epid($_REQUEST['patient'], $this->clientid);
		
		
				//patient days
				$conditions['client'] = $this->clientid;
				$conditions['ipids'] = array($ipid);
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');
		
				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
				//beware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);
		
				if($_REQUEST['sapvid'])
				{
					$selected_sapv_falls = array($ipid => $_REQUEST['sapvid']);
		
					//get patients sapvs last fall
					$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid), true);
		
					foreach($selected_sapv_falls as $k_ipid => $fall_id)
					{
						$patients_sapv[$k_ipid] = $fall_id;
						$patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
					}
		
					$params['nosapvperiod'][$ipid] = '0';
					$params['period'] = $patients_selected_periods;
				}
				else if(!empty($_REQUEST['list']))
				{
					//construct curent month period days
					$selected_month = $_REQUEST['list'];
					if(!function_exists('cal_days_in_month'))
					{
						$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
					}
					else
					{
						$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
					}
		
					$months_details[$selected_month]['start'] = $selected_month . "-01";
					$months_details[$selected_month]['days_in_month'] = $month_days;
					$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
					$month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);
		
					array_walk($month_days_arr, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$months_details[$selected_month]['days'] = $month_days_arr;
		
					//get sapv periods in curent month period and make days
					if($months_details)
					{
						//						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
						$sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
		
						$patients_selected_periods = array();
						foreach($sapv_array as $k_sapv => $v_sapv)
						{
							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}
		
							if(empty($patients_selected_periods))
							{
								$patients_selected_periods = array();
							}
		
							$patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
							array_walk($patients_selected_periods, function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$patients_selected_periods = array_values(array_unique($patients_selected_periods));
							$existing_sapv_days = $patients_selected_periods;
						}
		
						$patients_selected_periods = array_values(array_unique($patients_selected_periods));
						$sapv_days_in_period = array_intersect($month_days_arr, $patients_selected_periods);
					}
		
					$params['nosapvperiod'][$ipid] = '1';
					$params['selected_period'][$ipid] = $months_details[$selected_month];
					$params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
					$params['existing_sapv_days'] = array_values($patients_selected_periods);
					$params['period'][$ipid] = $months_details[$selected_month];
				}
				else if(!empty($_REQUEST['admission']))
				{
					$selected_period = $_REQUEST['admission'];
					$admission_start = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['start'];
					$admission_end = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['end'];
		
					$period_days_arr = PatientMaster::getDaysInBetween($admission_start, $admission_end);
		
					array_walk($period_days_arr, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$period_details[$selected_period]['start'] = $admission_start;
					$period_details[$selected_period]['end'] = $admission_end;
					$period_details[$selected_period]['days'] = $period_days_arr;
		
					//get sapv periods in curent month period and make days
					if($period_details[$selected_period])
					{
						//						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_period]['start'], $months_details[$selected_period]['end']);
						$sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $period_details[$selected_period]['start'], $period_details[$selected_period]['end']);
		
						$patients_selected_periods = array();
						foreach($sapv_array as $k_sapv => $v_sapv)
						{
							$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
							if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
							{
								$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
							}
							else
							{
								$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
							}
		
							if(empty($patients_selected_periods))
							{
								$patients_selected_periods = array();
							}
		
							$patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
							array_walk($patients_selected_periods, function(&$value) {
								$value = date("d.m.Y", strtotime($value));
							});
							$patients_selected_periods = array_values(array_unique($patients_selected_periods));
							$existing_sapv_days = $patients_selected_periods;
						}
		
						$patients_selected_periods = array_values(array_unique($patients_selected_periods));
						$sapv_days_in_period = array_intersect($period_days_arr, $patients_selected_periods);
					}
		
					$params['nosapvperiod'][$ipid] = '1';
					$params['admissionid'][$ipid] = $selected_period;
					$params['selected_period'][$ipid] = $period_details[$selected_period];
					$params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
					$params['existing_sapv_days'] = array_values($patients_selected_periods);
					$params['period'][$ipid] = $period_details[$selected_period];
				}
		
				$all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipid);
		
				foreach($all_patients_sapvs as $k_sapv => $v_sapv)
				{
					if(empty($sapv_days_overall))
					{
						$sapv_days_overall = array();
					}
		
		
					$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
		
					if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
					{
						$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
					}
					else
					{
						$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
					}
		
		
					$sapv_days_overall = array_merge($sapv_days_overall, PatientMaster::getDaysInBetween($start, $end));
					array_walk($sapv_days_overall, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					$sapv_days_overall = array_values(array_unique($sapv_days_overall));
				}
				$params['sapv_overall'][$ipid] = array_values($sapv_days_overall);
				$params['ipids'] = array($ipid);
				$params['patient_sapvs'] = $patients_sapv[$ipid];
				$params['patient_days'] = $patient_days;
				$params['get_pdf'] = '1';
				$params['only_pdf'] = (int) $_REQUEST['only_invoice'];
				$params['stornopdf'] = (int) $_REQUEST['stornopdf'];
				$params['stornoid'] = (int) $_REQUEST['stornoid'];
				if(!empty($_REQUEST['iid']))
				{
					$params['invoices'] = array((int) $_REQUEST['iid']);
				}
		
				$this->generate_rlpinvoice($params);
			}
		}
		
		// changed  from private to public ISPC-2609 Ancuta 31.08.2020
		public function generate_rlpinvoice($params)
		{
		    if(isset($params['print_job']) && $params['print_job'] == '1'){
		        $this->_helper->layout->setLayout('layout_ajax');
		        $this->_helper->viewRenderer->setNoRender();
		    }
		    
			//spl_autoload_register(array('AutoLoader', 'autoloadPdf')); // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
			$client = new Client();
			$p_list = new PriceList();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$pflege = new PatientMaintainanceStage();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$rlp_invoices = new RlpInvoices();
			$rlp_invoices_form = new Application_Form_RlpInvoices();
			$pat_diagnosis = new PatientDiagnosis();
			//this is the timestamp join folder name!
			$this->view->folder_stamp = time();
		
			$clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] : $this->clientid;
			$userid = $this->userid;
			
		
			//get allowed client invoices
			$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
			$client_invoice_type = $client_allowed_invoice[0];
			
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
 
			$usergroups = new Usergroup();
			$client_usergroups_array = $usergroups->getClientGroups($clientid);
				
			$ug_details = array();
			foreach($client_usergroups_array as $k=>$group_data){
				$ug_details[$group_data['id']] = $group_data;
			}
			
			//client_details
			$users = new User();
			$client_user_array = $users->getUserByClientid($clientid,0,true,false);
				
			foreach($client_user_array as $k=>$cu)
			{
				$user_array[$cu['id']] = $cu;
				$user_array[$cu['id']]['groupname'] = $ug_details[$cu['groupid']]['groupname'];
				if(strlen($cu['shortname']) >  0){
					$user_array[$cu['id']]['initials'] = $cu['shortname'];
				}
				else
				{
					$user_array[$cu['id']]['initials'] = mb_substr($cu['first_name'], 0, 1, "UTF-8") . "" . mb_substr($cu['last_name'], 0, 1, "UTF-8");
		
				}
			}
		
			/*
			 * TODO-1544
			 * ancuta
			 * 08.05.2018
			 */
			$modules = new Modules();
			if($modules->checkModulePrivileges("90", $clientid))
			{
			    $debtor_number_module = "1";
			}
			else
			{
			    $debtor_number_module = "0";
			}
				
			$ppun = new PpunIpid();
			if($modules->checkModulePrivileges("88", $clientid))
			{
			    $ppun_module = "1";
			}
			else
			{
			    $ppun_module = "0";
			}
				
			
			//client_details
			$client_details = $client->getClientDataByid($clientid);
			$invoices_ids = $params['invoices'];
			//new invoice required data START
			
			// TODO-2058 p2 Ancuta 31.01.2019
			$client_products = array();
			$client_products = RlpProductsTable::find_client_products($this->logininfo->clientid);
			// --
			
			$patients_invoice_days = array();
			if(!empty($params['invoices']))
			{
				//load invoices data
				$invoices_data = $rlp_invoices->get_invoices($params['invoices'],true);
				
				$inv_names = array();
				foreach($invoices_data['invoices_data'] as $v_invoice)
				{
					$ipids[] = $v_invoice['ipid'];
		
				    $inv_names[] = $v_invoice['prefix'].$v_invoice['invoice_number'];
					
					$current_period[$v_invoice['ipid']]['start'] = date('Y-m-d', strtotime($v_invoice['invoice_start']));
					$current_period[$v_invoice['ipid']]['end'] = date('Y-m-d', strtotime($v_invoice['invoice_end']));
		
					if(empty($current_period[$v_invoice['ipid']]['days']))
					{
						$current_period[$v_invoice['ipid']]['days'] = array();
					}
					
					if(empty($patients_invoice_days[$v_invoice['ipid']]))
					{
						$patients_invoice_days[$v_invoice['ipid']] = array();
					}
		
					$days_arr = $patientmaster->getDaysInBetween($v_invoice['invoice_start'], $v_invoice['invoice_end']);
					$current_period[$v_invoice['ipid']]['days'] = array_merge($current_period[$v_invoice['ipid']]['days'], $days_arr);
					$patients_invoice_days[$v_invoice['ipid']] = array_merge($patients_invoice_days[$v_invoice['ipid']], $days_arr);
		
					array_walk_recursive($current_period[$v_invoice['ipid']]['days'], function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
					array_walk_recursive($patients_invoice_days[$v_invoice['ipid']], function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
		
					
					
					
					$days_arr = array();
				}
		
				//patient days
				$conditions['client'] = $clientid;
				$conditions['ipids'] = $ipids;
				$conditions['periods'][0]['start'] = '2009-01-01';
				$conditions['periods'][0]['end'] = date('Y-m-d');
		
				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
				//be aware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);
				$params['patient_days'] = $patient_days;
				$params['period'] = $current_period;
			}
			else
			{
				$ipids = $params['ipids'];
				$current_period = $params['period'];
				$patient_days = $params['patient_days'];
				
				foreach($current_period as $cipid=>$cdata){
					$patients_invoice_days[$cipid] = $cdata['days'];
				}
			}
			
			
			$ipids = array_values(array_unique($ipids));

			//set current period to work with
		
			//patient HEALTH INSURANCE START
			$healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);
		
			//multiple hi subdivisions && hi subdivisions permissions
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
		
			if($divisions)
			{
				foreach($healthinsu_multi_array as $k_hi => $v_hi)
				{
					$hi_companyids[] = $v_hi['companyid'];
				}
		
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($hi_companyids);
			}
		
			$alias['home_visit'] = "Hausbesuch";
			$alias['beratung'] = "Beratung";
			$alias['koordination'] = "Koordination";
			$alias['telefon'] = "Telefonat";
			$alias['24_h_shift'] = "24h-Rufbereitschaft";
				
			
			$master_data_all = array();
			
			//patient HEALTH INSURANCE END
			$kv_header = array();
			$patient_address = array();
			$hi_name = "";
			$hi_address = "";
			$sapv_address = "";
			foreach($ipids as $k_ipid => $v_ipid)
			{
				$pat_details = $params['patient_days'][$v_ipid]['details'];
		
				$master_data_all['client']['id'] = $clientid;
				$master_data_all['ipids'][] = $v_ipid;
				$master_data_all['patients'][$v_ipid]['details'] = $params['patient_days'][$v_ipid]['details'];
				$master_data_all['patients'][$v_ipid]['invoice_data']['period'] = $params['period'][$v_ipid];
				$master_data_all['patients'][$v_ipid]['invoice_data']['sapv'] = $params['period'][$v_ipid];
				$master_data_all['patients'][$v_ipid]['invoice_data']['admissionid'] = $params['admissionid'][$v_ipid];
		
				if($healthinsu_multi_array[$v_ipid]['privatepatient'] == "1" && strlen($_REQUEST['iid']) == '0')
				{
// 					$patient_address = '&nbsp;' . htmlspecialchars($pat_details['last_name']) . ', ' . htmlspecialchars($pat_details['first_name']) . '<br />';
					$patient_address[$v_ipid]['address'] = '&nbsp;' . htmlspecialchars($pat_details['first_name']) . ' ' . htmlspecialchars($pat_details['last_name']) . '<br />';// TODO-1544
					$patient_address[$v_ipid]['address'] .= '&nbsp;' . htmlspecialchars($pat_details['street1']) . '<br />';
					$patient_address[$v_ipid]['address'] .= '&nbsp;' . htmlspecialchars($pat_details['zip']) . ' ' . '&nbsp;' . htmlspecialchars($pat_details['city']);
				}
		
				if(!empty($healthinsu_subdiv_arr[$v_ipid]['3']['name']))
				{
					//get new SAPV hi address
					$hi_name = '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['name'];
					$hi_address = '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['name'] . '<br />';
					if($healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider'])
					{
						$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider'] . '<br />';
					}
					$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['street1'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city'];
					
					$sapv_address = '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['street1'] . '<br />';
					$sapv_address .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city'];
				}
				else
				{
					//get old hi_address
					$hi_name = '&nbsp;' . $healthinsu_multi_array[$v_ipid]['name'];
					$hi_address = '&nbsp;' . $healthinsu_multi_array[$v_ipid]['company_name'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_insurance_provider'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_street'] . '<br />';
					$hi_address .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_zip'] . ' ' . $healthinsu_multi_array[$v_ipid]['ins_city'];
					
					$sapv_address = '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_street'] . '<br />';
					$sapv_address .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_zip'] . ' ' . $healthinsu_multi_array[$v_ipid]['ins_city'];
				}
		
				// Kv header for the second page
				
				$kv_header[$v_ipid]['insurance_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
		
				if(strlen($healthinsu_multi_array[$v_ipid]['kvk_no']) > 0 )
				{
					$kv_header[$v_ipid]['kvnumber'] = $healthinsu_multi_array[$v_ipid]['kvk_no'];
				}
				else
				{
					$kv_header[$v_ipid]['kvnumber'] = $healthinsu_multi_array[$v_ipid]['company']['kvnumber'];
				}
		
				$kv_header[$v_ipid]['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
				$kv_header[$v_ipid]['insurance_status'] = $healthinsu_multi_array[$v_ipid]['insurance_status'];
				
				$master_user_details = new User();
				$users_details = $master_user_details->getUserDetails($userid); // ?????? 
				
				$kv_header[$v_ipid]['betriebsstatten_nr'] = $users_details[0]['betriebsstattennummer'];
				$kv_header[$v_ipid]['arzt_nr'] = $users_details[0]['LANR'];
				$kv_header[$v_ipid]['patient_name_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['last_name']) . ", " . htmlspecialchars($params['patient_days'][$v_ipid]['details']['first_name']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);
				$kv_header[$v_ipid]['patient_birthdate'] =date("d.m.Y",strtotime($params['patient_days'][$v_ipid]['details']['birthd']));
				$kv_header[$v_ipid]['patient_name'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['last_name']) . ", " . htmlspecialchars($params['patient_days'][$v_ipid]['details']['first_name']);
				$kv_header[$v_ipid]['patient_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);
				$kv_header[$v_ipid]['patient_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);
		
		
		
				$master_data_all['patients'][$v_ipid]['invoice_data']['hi_name'] = $hi_name;
				$master_data_all['patients'][$v_ipid]['invoice_data']['hi_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
				$master_data_all['patients'][$v_ipid]['invoice_data']['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
				$master_data_all['patients'][$v_ipid]['invoice_data']['privatepatient'] = $healthinsu_multi_array[$v_ipid]['privatepatient'];
		
				$master_data_all['patients'][$v_ipid]['invoice_data']['address'] = $hi_address;
				$master_data_all['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = $sapv_address;
		
				if($patient_address[$v_ipid]['address'])
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['patient_address'] = $patient_address[$v_ipid]['address'];
				}
		
				$master_data_all['patients'][$v_ipid]['invoice_data']['health_insurance_ik'] = $healthinsu_multi_array[$v_ipid]['institutskennzeichen'];
				$master_data_all['patients'][$v_ipid]['invoice_data']['health_insurance_kassenr'] = $healthinsu_multi_array[$v_ipid]['kvk_no'];
		
				$master_data_all['patients'][$v_ipid]['invoice_data']['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
		
				if($params['period'][$v_ipid]['approved_date'] != '0000-00-00 00:00:00' && strlen($params['period'][$v_ipid]['approved_date']) > 0 && date('Y-m-d', strtotime($params['period'][$v_ipid]['approved_date'])) != '1970-01-01')
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_date'] = date('d.m.Y', strtotime($params['period'][$v_ipid]['approved_date']));
				}
				else
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_date'] = ' - ';
				}
		
				if(strlen($params['period'][$v_ipid]['approved_number']) > 0)
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_nr'] = $params['period'][$v_ipid]['approved_number'];
				}
				else
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_nr'] = ' - ';
				}
				
				/*
				 * TODO-1544
				 * debtor number
				 */
				
				if($ppun_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient']  == "1")
				{
				    //get ppun (private patient unique number)
				    $ppun_number = $ppun->check_patient_ppun($v_ipid, $clientid);
				    if($ppun_number)
				    {
				        $master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number']  = $ppun_number['ppun'];
				    } 
				    else
				    {
				        $master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number']  = "";
				    }
				}
				
				if($debtor_number_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "0")
				{
				    //get debtor number from patient healthinsurance
				    if(strlen($healthinsu_multi_array[$v_ipid]['ins_debtor_number']) > '0')
				    {
				        $master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number'] = $healthinsu_multi_array[$v_ipid]['ins_debtor_number'];
				    }
				    else
				    {
				        $master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number'] = $healthinsu_multi_array[$v_ipid]['company']['debtor_number'];
				    }
				}
				
				/// diagnosisi data
		
				//get patient main diagnosis
				$patient_main_diag[$v_ipid] = $pat_diagnosis->get_main_diagnosis($v_ipid, $clientid);
				$patient_data_diagnos[$v_ipid]['main_diagnosis'] = implode(', ', $patient_main_diag[$v_ipid]['icd']);
			}
			
			$all_patients_periods = array();
			$patient_days2locationtypes = array();
			$hospital_days_cs_dmY = array();
			$hospiz_days_cs_dmY = array();
				
			foreach($patient_days as $k_ipid => $patient_data)
			{
				//all patients periods
				$all_patients_periods = array_merge_recursive($all_patients_periods, $patient_data['active_periods']);
		
				//used in flatrate
				if(empty($patient_periods[$k_ipid]))
				{
					$patient_periods[$k_ipid] = array();
				}
		
				array_walk_recursive($patient_data['active_periods'], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$patient_periods[$k_ipid] = array_merge($patient_periods[$k_ipid], $patient_data['active_periods']);
		
				//hospital days cs
				if(!empty($patient_data['hospital']['real_days_cs']))
				{
					$hospital_days_cs_dmY[$k_ipid] = $patient_data['hospital']['real_days_cs'];
					$hospital_days_cs[$k_ipid] = $patient_data['hospital']['real_days_cs'];
					array_walk($hospital_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
		
				//hospiz days cs
				if(!empty($patient_data['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs_dmY[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
					$hospiz_days_cs[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
					array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
		
				//real active days
				if(!empty($patient_data['real_active_days']))
				{
					$active_days_in_period_cs[$k_ipid] = $patient_data['real_active_days'];
					array_walk($active_days_in_period_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
		
				//treatment days
				if(!empty($patient_data['treatment_days']))
				{
					$treatment_days_cs[$k_ipid] = $patient_data['treatment_days'];
					array_walk($treatment_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
		
				//active days
				if(!empty($patient_data['active_days']))
				{
					$active_days[$k_ipid] = $patient_data['active_days'];
					array_walk($active_days[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
		
				if(empty($hospital_days_cs[$k_ipid]))
				{
					$hospital_days_cs[$k_ipid] = array();
				}
		
				if(empty($hospiz_days_cs[$k_ipid]))
				{
					$hospiz_days_cs[$k_ipid] = array();
				}
		
				$hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);
		
				foreach($patient_data['locations'] as $pat_location_row_id => $pat_location_data)
				{
					foreach($pat_location_data['days'] as $kl=>$lday)
					{
						if(in_array($lday,$patient_data['real_active_days']))
						{
								
							if( empty($pat_location_data['type'])){
								$pat_location_data['type'] = 0 ;
							}
		
								
								
							if($pat_location_data['type'] == "4" )
							{
								$patient_days2locationtypes[$k_ipid][$lday][] = "3";
							}
							else
							{
								$patient_days2locationtypes[$k_ipid][$lday][] = $pat_location_data['type'];
							}
						}
					}
				}
			}
				
			/* 
			 *  TODO-1589
			 * foreach( $patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$del_val = "1";
					if ( ! in_array($loc_day,$hospital_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
						unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
					}
					
					$del_val = "2";
					if ( ! in_array($loc_day,$hospiz_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
						unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
					}
				}
			} */
			foreach($patient_days2locationtypes as $pipid=>$locdata){
				foreach($locdata as $loc_day => $day_loc_types){
					$patient_days2locationtypes[$pipid][$loc_day] = end($day_loc_types);
				}
			}
		
			$all_patients_periods = array_values($all_patients_periods);
				
			foreach($all_patients_periods as $k_period => $v_period)
			{
				if(empty($months))
				{
					$months = array();
				}
		
				$period_months = Pms_CommonData::get_period_months($v_period['start'], $v_period['end'], 'Y-m');
				$months = array_merge($months, $period_months);
			}
			$months = array_values(array_unique($months));
		
			foreach($months as $k_m => $v_m)
			{
				$months_unsorted[strtotime($v_m)] = $v_m;
			}
			ksort($months_unsorted);
			$months = array_values(array_unique($months_unsorted));
		
			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}
		
				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;
		
				$month_select_array[$v_month] = $v_month;
				$month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
			}
		
			
			foreach($ipids as $k_ipid => $v_ipid)
			{
				$days_in_period[$v_ipid] = $patientmaster->getDaysInBetween($current_period[$v_ipid]['start'], $current_period[$v_ipid]['end']);
		
				$active_days_in_period[$v_ipid] = array_intersect($days_in_period[$v_ipid], $active_days[$v_ipid]);
		
				if($months_details[$months[0]]['start'] != date('Y-m-d', strtotime($current_period[$v_ipid]['start'])))
				{
					//used in overall performance record data start till the end of previous month (curent month-01 -1 day)
					$overall_performance_period[$v_ipid]['start'] = $months_details[$months[0]]['start'];
					$overall_performance_period[$v_ipid]['c_month_end'] = date('Y-m-d', strtotime('-1 day', strtotime($current_period[$v_ipid]['start'])));
					$overall_performance_period[$v_ipid]['end'] = date('Y-m-d', strtotime($current_period[$v_ipid]['end']));
				}
				else
				{
					//no overall period (no previous months) -- get curent month still
					$overall_performance_period[$v_ipid] = $current_period[$v_ipid];
				}
		
		
				foreach($patient_periods[$v_ipid] as $k_period => $v_period)
				{
					if(empty($patients_periods_days[$v_ipid]))
					{
						$patients_periods_days[$v_ipid] = array();
					}
		
					$patients_periods_days[$v_ipid] = array_merge($patients_periods_days[$v_ipid], $patientmaster->getDaysInBetween($v_period['start'], $v_period['end']));
				}
		
				$days_in_period_overall_performance_cmonth[$v_ipid] = $patientmaster->getDaysInBetween($overall_performance_period[$v_ipid]['start'], $overall_performance_period[$v_ipid]['c_month_end']);
			}//end foreach ipids
			//(ipid-day-verordnet_statuses)
			$sapv_days_cs = $this->get_period_sapvs($ipids, $current_period, $hospital_hospiz_days_cs);
				
			$sapv_details = $this->get_sapvs_approved_details($ipids, $current_period);
		
			//sapv till last day of prev month
			$sapv_days_overall = $this->get_period_sapvs($ipids, $overall_performance_period, $hospital_hospiz_days_cs);
				
		
			//get pflegestuffe in current period
			$pflege_arr = $pflege->get_multiple_patients_mt_period($ipids, $current_period);
		
			foreach($pflege_arr as $k_pflege => $v_pflege)
			{
				$patients_pflege[$v_pflege['ipid']] = $v_pflege['stage'];
			}
		
 
			//get patients discharge dates
			$pat_dis = new PatientDischarge();
			$patients_discharge = $pat_dis->get_patients_discharge($ipids);
		
			$patients_discharge_date = array();
			foreach($patients_discharge as $k_dis => $v_dis)
			{
				$patients_discharge_date[$v_dis['ipid']] = $v_dis['discharge_date'];
			}
		
			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($sapv_days_cs[$v_ipid] as $k_s_days => $v_s_days)
				{
					if($k_s_days != 'relevant_sapvs_days')
					{
						$sapv_days_inperiod_cs[$v_ipid][] = $k_s_days;
					}
					else
					{
						$relevant_sapvs_days_cs[$v_ipid] = $v_s_days;
					}
				}
				asort($sapv_days_inperiod_cs);
		
				if(count($relevant_sapvs_days_cs[$v_ipid]['start']) > 0)
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['first_sapv_day'] = date('d.m.Y', strtotime($relevant_sapvs_days_cs[$v_ipid]['start'][0]));
					$end_sapv_last = end($relevant_sapvs_days_cs[$v_ipid]['end']);
					$master_data_all['patients'][$v_ipid]['invoice_data']['last_sapv_day'] = date('d.m.Y', strtotime($end_sapv_last));
				}
				else
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['first_sapv_day'] = '0000-00-00 00:00:00';
					$master_data_all['patients'][$v_ipid]['invoice_data']['last_sapv_day'] = '0000-00-00 00:00:00';
				}
			}
		

			//get real active patient days (active, with sapv and no hospital/hospiz)
			$real_active_days_cs = $this->patients_real_active_days($ipids, $active_days, $hospital_hospiz_days_cs, $sapv_days_overall);
		
			//get no sapv days
			$days_nosapv_cs = $this->nosapv_days($active_days, $hospital_hospiz_days_cs, $sapv_days_cs);
 
			
			/* ########################################### */
			//get contact form data and shortcuts   
			/* ########################################### */
			//get patients courses
			$course_shortcuts =array("V","XT");
			$course_days = $this->get_patients_period_course_by_shortcuts($ipids, $course_shortcuts, $patients_discharge_date, $overall_performance_period,true);
			
			$extra_details  = array();
			foreach($ipids as $k_ipid => $ipid)
			{
				foreach($course_days[$ipid] as $k_course_date => $v_course_details)
				{
					foreach($v_course_details as $k_couses => $v_courses)
					{
						$course[$ipid][$k_course_date][] = $v_courses['course_type'];
					}
			
					$k_course_date_alt = date('d.m.Y', strtotime($k_course_date));
					// TODO-2451 Added condition by Ancuta 30.07.2019
					if( in_array($k_course_date_alt, $patients_invoice_days[$ipid])
					   && in_array(date('Y-m-d', strtotime($k_course_date)), $active_days_in_period_cs[$ipid])
					   )
					{
						foreach($v_course_details as $k_couse => $v_course)
						{
						    
							if($v_course['course_type'] == 'XT')
							//if($v_course['course_type'] == 'XT' && in_array($k_course_date, $sapv_days_inperiod_cs[$ipid]) && in_array('1', $sapv_days_cs[$ipid][$k_course_date]))
							{
								$clasifizierung[$ipid][$k_course_date]['telefon'] += 1;
								$extra_details[$ipid][$k_course_date]['telefon'][] = $v_course;
							}
							else if($v_course['course_type'] == 'V')
							//else if($v_course['course_type'] == 'V' && in_array($k_course_date, $sapv_days_inperiod_cs[$ipid]) && in_array('2', $sapv_days_cs[$ipid][$k_course_date]))
							{
								$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
								$extra_details[$ipid][$k_course_date]['koordination'][] = $v_course;
							}
						}
					}
				}
			}
			
			
			//get contact forms in current period and in overall period
			// in this case the $current_period - is the full period of patients
			$contact_forms_days = $this->get_patients_period_cf($ipids, $current_period);
//  dd($patients_invoice_days,$contact_forms_days);
			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($sapv_days_cs[$v_ipid] as $k_s_days => $v_s_days)
				{
					if($k_s_days != 'relevant_sapvs_days')
					{
						$sapv_days_inperiod_cs[$v_ipid][] = $k_s_days;
					}
					else
					{
						$relevant_sapvs_days_cs[$v_ipid] = $v_s_days;
					}
				}
				asort($sapv_days_inperiod_cs);
			
				if(count($relevant_sapvs_days_cs[$v_ipid]['start']) > 0)
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['first_sapv_day'] = date('d.m.Y', strtotime($relevant_sapvs_days_cs[$v_ipid]['start'][0]));
					$end_sapv_last = end($relevant_sapvs_days_cs[$v_ipid]['end']);
					$master_data_all['patients'][$v_ipid]['invoice_data']['last_sapv_day'] = date('d.m.Y', strtotime($end_sapv_last));
				}
				else
				{
					$master_data_all['patients'][$v_ipid]['invoice_data']['first_sapv_day'] = '0000-00-00 00:00:00';
					$master_data_all['patients'][$v_ipid]['invoice_data']['last_sapv_day'] = '0000-00-00 00:00:00';
				}
			
				foreach($contact_forms_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							if(strtotime(date('Y-m-d H:i:s', strtotime($v_cf['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge[] = $v_cf['id'];
								unset($contact_forms_ids_overall[$k_cf_day][$k_cf]);
							}
							$contact_forms_ids[] = $v_cf['id'];
							$all_contact_forms[$v_cf['id']] = $v_cf;
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);
			}
			
			
			if( ! empty($contact_forms_ids)){
				$block_classification = new FormBlockClassification();
				$classification_data = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids);
				$classification_data_overall = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids_overall);
			}
			
			foreach($all_contact_forms as $k_cf => $v_cf)
			{
				$k_cf_day = date('Y-m-d', strtotime($v_cf['billable_date']));
			
				if(  in_array(date('d.m.Y', strtotime($v_cf['billable_date'])), $patients_invoice_days[$v_cf['ipid']]))
				{
// 					if(in_array($v_cf['form_type'], $set_one_ids)){
						
						$contact_forms_days_ids[$v_cf['ipid']][$k_cf_day][] = $v_cf['id'];
						$contact_forms_days_ids2details[$v_cf['ipid']][$v_cf['id']] = $v_cf;
						$contact_forms2form_types[$v_cf['ipid']][$v_cf['id']][] = $v_cf['form_type'];
// 					}
				}
			
// 				if(!array_key_exists($v_cf['id'], $classification_data))
// 				{
// 					unset($contact_forms_ids[array_search($v_cf['id'], $contact_forms_ids)]);
// 				}
			}
			
			$contact_forms_ids = array_values(array_unique($contact_forms_ids));

			/* ########################################### */
			//get saved data  
			/* ########################################### */

			
			
			$rlp_control_obj = new RlpControl ();
			$rlp_control_data = $rlp_control_obj->rlp_actions ($ipids, $patients_invoice_days,"invoice");

			
			$master_data = array();
			$action_days = array();
			foreach($ipids as $k_ipid => $ipid)
			{
				
				foreach($active_days_in_period_cs[$ipid] as $k=>$v_period_day)
				{

					foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_id)
					{
						//check if contactform type for each days
// 						if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids) && (in_array('4', $sapv_days_cs[$ipid][$v_period_day]) || in_array('3', $sapv_days_cs[$ipid][$v_period_day]) ))
// 						{
							$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
							$extra_details[$ipid][$v_period_day]['home_visit'][] = $contact_forms_days_ids2details[$ipid][$v_cf_id];
// 						}
					}
				}
				
				
				
		
				/* ###################################### */
				/* ####### SYSTEm AND SAVED DATA ################### */
				/* ###################################### */
				$master_data[$ipid] = $rlp_control_data[$ipid];
	 
				/* ###################################### */
		
  
				foreach($master_data[$ipid] as $k_shortcut => $v_shortcut_dates)
				{
					foreach($v_shortcut_dates as $k_shortcut_date => $v_master_values)
					{
						
						if(  $v_master_values['price'] && $v_master_values['qty'] > 0 ){ // Commented just for testing
							$invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut'] = $k_shortcut;
							$invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['qty'] += $v_master_values['qty'];
							$invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['price'] = $v_master_values['price'];
							$invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut_total'] += ($v_master_values['qty'] * $v_master_values['price']);
							$invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['location_type'] = $v_master_values['location_type'];
							$grand_total[$ipid] += ($v_master_values['qty'] * $v_master_values['price']);
						}
						$action_days[$ipid][] = $k_shortcut_date;
					}
					ksort($invoice_master[$ipid]);
					$master_data_all['invoice_items'][$ipid] = $invoice_master[$ipid];
					$master_data_all['grand_total'][$ipid] = $grand_total[$ipid];
					$sapv_details_data[$ipid] = end($sapv_details[$ipid]);
					
				}
				if(!empty($action_days[$ipid])){
					$master_data_all['patients'][$ipid]['invoice_data']['first_active_day'] = date('d.m.Y', strtotime($action_days[$ipid][0]));
					$master_data_all['patients'][$ipid]['invoice_data']['last_active_day'] = date('d.m.Y', strtotime(end($action_days[$ipid])));
				} else{
					$master_data_all['patients'][$ipid]['invoice_data']['first_active_day'] = '0000-00-00 00:00:00'; 
					$master_data_all['patients'][$ipid]['invoice_data']['last_active_day'] = '0000-00-00 00:00:00';  
				}

				
				ksort($extra_details[$ipid]);
			}
			
			if($params['only_pdf'] == '0')
			{
				$inserted_invoices = $rlp_invoices_form->insert_invoice($master_data_all);
			}//end only_pdf=0
			else
			{
				$inserted_invoices = $params['invoices'];
			}
		
			//load template data
			$template_data = InvoiceTemplates::get_template($clientid, false, '1', $client_invoice_type);
		
				
			
			//single invoice print with 2 pages
			if($params['get_pdf'] == "1")
			{
				
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$invoice_data = $rlp_invoices->getRlpInvoices($params['stornoid'], false, true);
					
					$invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];     //ISPC-2532 Lore 10.11.2020
					
					//ISPC-2532 Carmen 18.02.2020 - get the prefix and the number of storno invoice
					$invoice_data_storno = $rlp_invoices->get_invoice($inserted_invoices[0]);
					$invoice_data['prefix'] = $invoice_data_storno[0]['prefix'];
					$invoice_data['invoice_number'] = $invoice_data_storno[0]['invoice_number'];
					//--
				}
				else
				{
					$invoice_data = $rlp_invoices->getRlpInvoices($inserted_invoices[0], false);
				}
				
				if(strlen($invoice_data['address']) > 0 ){
					if(strpos($invoice_data['address'],"style"))
					{
						$invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
					}
		
					$invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
					$invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
					$invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
				}
		
		
				//rewrite invoice_data with custom data (which comes from POST)
				if($params['custom_data'])
				{
					//rewrite custom data from POST to $invoice_data.
					foreach($params['custom_data'] as $k_custom => $v_custom)
					{
						$invoice_data[$k_custom] = $v_custom;
					}
				}
		
				$pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);
		
				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
				}
				else
				{
					$invoice_data['patient_pflegestufe'] = ' - ';
				}
		
				//setup tokens (remove pseudopost when all works)
				$tokens = array();
				//client tokens
				$tokens['client_ik'] = $client_details[0]['institutskennzeichen'];
		
				//patient details tokens
				$tokens['patienten_id'] = strtoupper(html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
				$tokens['first_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
				$tokens['last_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
				$tokens['birthd'] = date('d.m.Y', strtotime($params['patient_days'][$invoice_data['ipid']]['details']['birthd']));
				$tokens['street'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
				$tokens['zip'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
				$tokens['city'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
				$tokens['patient_pflegestufe'] = html_entity_decode($invoice_data['patient_pflegestufe'], ENT_QUOTES, 'UTF-8');

				//health insurance tokens
				$tokens['insurance_no'] = html_entity_decode($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
				$tokens['address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');//generate_rlpinvoice
				$tokens['SAPV_Rechnungsempfaenger'] = htmlentities($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['sapv_recipient']);//ISPC-1236
				$tokens['beneficiary_address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');
		
				
			    $tokens['debitoren_nummer_oder_pv'] = "";
				//if debtor number is active and patient has number saved in invoice db get debtor number
				if($debtor_number_module == "1" && strlen($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number']) > '0')
				{
				    $tokens['debtor_number'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number'];
				    $tokens['debitor_number'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number'];
				}
				else
				{
				    $tokens['debtor_number'] = '';
				    $tokens['debitor_number'] = '';
				}
				
				
				//invoice specific tokens
				$tokens['invoiced_month'] = "";
				if(!empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
				{
					$tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
				}
		
				$tokens['invoiced_period'] = "";
				
				if(!empty($invoice_data['invoice_start']) && $invoice_data['invoice_start'] != "0000-00-00 00:00:00" && !empty($invoice_data['invoice_end']) && $invoice_data['invoice_end'] != "0000-00-00 00:00:00")
				{
					$tokens['invoiced_period'] = date('d.m.Y', strtotime($invoice_data['invoice_start'])).'-'.date('d.m.Y', strtotime($invoice_data['invoice_end']));
				}
				
				$tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
				$tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
		
				//invoice date
				if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970")
				{
					$tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
				}
				else
				{
					$tokens['invoice_date'] = '';
				}
		
				//start billed action day
				if($invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_active'])) != "1970")
				{
					$tokens['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
				}
				else
				{
					$tokens['first_active_day'] = '';
				}
		
				//end billed action day
				if($invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_active'])) != "1970")
				{
					$tokens['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
				}
				else
				{
					$tokens['last_active_day'] = '';
				}
		
				//first sapv day
				if($invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_sapv'])) != "1970")
				{
					$tokens['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
				}
				else
				{
					$tokens['first_sapv_day'] = '';
				}
		
				//last sapv day
				if($invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_sapv'])) != "1970")
				{
					$tokens['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));
				}
				else
				{
					$tokens['last_sapv_day'] = '';
				}
		
				//sapv approve date
				if($invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['sapv_approve_date'])) != "1970")
				{
					$tokens['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
				}
				elseif(date('Y', strtotime($sapv_details_data[$invoice_data['ipid']]['approved_date'])) != "1970" && strlen($invoice_data['sapv_approve_date']) > '0')
				{
					$tokens['sapv_approve_date'] = $sapv_details_data[$invoice_data['ipid']]['approved_date'];
				}
				else
				{
					$tokens['sapv_approve_date'] = '';
				}
		
				if($invoice_data['sapv_approve_nr'] == "-" || strlen(trim(rtrim($invoice_data['sapv_approve_nr']))) == "0")
				{
					$tokens['sapv_approve_nr'] = html_entity_decode($invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
				}
				else
				{
					$tokens['sapv_approve_nr'] = html_entity_decode($sapv_details_data[$invoice_data['ipid']]['approved_number'], ENT_QUOTES, 'UTF-8');
				}
		
				$tokens['footer'] = html_entity_decode($invoice_data['footer'], ENT_QUOTES, 'UTF-8');
				$tokens['invoice_items'] = $invoice_data['items'];
		
				if($invoice_data['storno'] == '1')
				{
					//rewrite invoice prefix if storned
					$tokens['prefix'] = 'STORNO_' . $tokens['prefix'];
				}
		
				//ISPC-2532 Lore 10.11.2020
				if($invoice_data_storno[0]['storno'] == '1') {
				    $tokens['full_invoice_number'] = ' Storno '.$tokens['full_invoice_number']; // ISPC-2532 Ancuta 11.12.2020- comment from 10.12.2020 - overwtite - and add STORNO in front
				    $tokens['full_invoice_number'] .= ' zur Rechnung '.$invoice_data['storned_invoice_number'];
				}
				
				if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
				{
					$tokens['unique_id'] = $invoice_data['record_id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total'] * (-1)), '2', ',', '.');
				}
				else
				{
					$tokens['unique_id'] = $invoice_data['id'];
					$tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
				}
		
				
				foreach($invoice_data['items'] as $sh=>$sh_arr){
					foreach($sh_arr as $k=>$sh_data){
						$invoice_data['items_alter'][$sh.$k] = $sh_data; 
						$invoice_data['items_alter'][$sh.$k]['shortcut_total'] = $sh_data['total']; 
					}
				}
				
// 				$invoice_data['items_alter'] = $this->array_sort($invoice_data['items_alter'], 'shortcut', SORT_ASC);
								
				if(count($invoice_data['items_alter']) > '0')
				{
					$rows = count($invoice_data['items_alter']);
					$grid = new Pms_Grid($invoice_data['items_alter'], 1, $rows, "rlp_invoice_items_list_pdf.html"); //CHECK
					
					$grid->invoice_total = $tokens['invoice_total'];
					$grid->client_products = $client_products;
					$grid->max_entries = $rows;
		
					$html_items = $grid->renderGrid();
				}
		
				$tokens['invoice_items_html'] = $html_items;
		
				$current_period_tmp[$invoice_data['ipid']] = $current_period[$invoice_data['ipid']]['days'];
		
				array_walk($current_period_tmp[$invoice_data['ipid']], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$current_period_tmp[$invoice_data['ipid']] = array_values(array_unique($current_period_tmp[$invoice_data['ipid']]));
		
				foreach($current_period_tmp[$invoice_data['ipid']] as $k_period => $v_period_day)
				{
					$current_period_month_days[date('Y-m', strtotime($v_period_day))][] = $v_period_day;
				}
		
				$patient_months[$invoice_data['id']] = array_keys($current_period_month_days);
		
				foreach($patient_months[$invoice_data['id']] as $k_inv_data => $v_inv_month)
				{
					if(!function_exists('cal_days_in_month'))
					{
						$month_days_nr = date('t', mktime(0, 0, 0, date("n", strtotime($v_inv_month . "-01")), 1, date("Y", strtotime($v_inv_month . "-01"))));
					}
					else
					{
						$month_days_nr = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_inv_month . "-01")), date("Y", strtotime($v_inv_month . "-01")));
					}
		
					$start_month = $v_inv_month . "-01";
					$end_month = $v_inv_month . '-' . $month_days_nr;
		
					$month_days_arr_source[$invoice_data['id']][date('Y-m', strtotime($start_month))] = $patientmaster->getDaysInBetween($start_month, $end_month);
				}
		 
		
				$temp_files = array();
				if($template_data)
				{
					//generate invoice page
					$temp_files[] = $this->generate_file($template_data[0], $tokens, 'pdf', $this->view->folder_stamp, 'generate_pdf');

// 					dd($extra_details);
					
					
					
					
					$extra_details_array = array();
					foreach($extra_details[$invoice_data['ipid']] as $ddate=>$action_data){
					    foreach($action_data as $action_type => $actions_array){
					        foreach($actions_array as $k=>$act_data){
					            if($action_type == "home_visit"){
					                $action_date_full = $act_data['billable_date'];
					            }
					            elseif($action_type == "koordination" || $action_type == "telefon"){
					                if($act_data['done_date'] != "0000-00-00 00:00:00"){
					                    $action_date_full = $act_data['done_date'];
					                } else{
					                    $action_date_full = $act_data['course_date'];
					                }
					            }
					            $act_data['sort_date'] = $action_date_full;
					            $act_data['alias'] = $action_type;
					            $extra_details_array[$invoice_data['ipid']][] = $act_data;
					        }
					    }
					}

					
				    //active and  in invoice period
					$act_data_24h = array();
					foreach($active_days[$invoice_data['ipid']] as $k=>$active_day){
					    
					    if(Pms_CommonData::isintersected($active_day, $active_day, date("Y-m-d",strtotime($invoice_data['invoice_start'])), date("Y-m-d",strtotime($invoice_data['invoice_end'])) )){
                            $act_data_24h['sort_date'] = $active_day;
	   				        $act_data_24h['alias'] = "24_h_shift";
    					    $extra_details_array[$invoice_data['ipid']][] = $act_data_24h;
					    
					    }
					}
					
					usort($extra_details_array[$invoice_data['ipid']], array(new Pms_Sorter('sort_date'), "_date_compare"));
						
					
					
					
					
					
					$invoice_control_sheet_data['kv_header'] = $kv_header[$invoice_data['ipid']];
					$invoice_control_sheet_data['patient_data'] = $patient_data_diagnos[$invoice_data['ipid']];
					$invoice_control_sheet_data['alias'] = $alias;
					
					//organize leistung data
					$invoice_control_sheet_data['patientdetails'] = $params['patient_days'][$invoice_data['ipid']]['details'];
					
					$invoice_control_sheet_data['period_days_source'] = $month_days_arr_source[$invoice_data['id']];
					$invoice_control_sheet_data['period_days'] = $current_period_tmp[$invoice_data['ipid']];
					$invoice_control_sheet_data['shortcuts'] = $shortcuts['performance'];
					$invoice_control_sheet_data['master_data'] = $master_data[$invoice_data['ipid']];
					$invoice_control_sheet_data['classification_box'] = $clasifizierung[$invoice_data['ipid']];
					$invoice_control_sheet_data['extra_data_details'] = $extra_details_array[$invoice_data['ipid']];
// 					$invoice_control_sheet_data['extra_data_details'] = $extra_details[$invoice_data['ipid']];
					$invoice_control_sheet_data['users_array'] = $user_array ;
					$invoice_control_sheet_data['client_details'] = $client_details[0];
					$invoice_control_sheet_data['health_insurance'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['hi_name'];
					$invoice_control_sheet_data['insurance_no'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'];
					$invoice_control_sheet_data['hi_subdiv_address'] = $invoice_data['address'];
					$invoice_control_sheet_data['patient_pflegestufe'] = $patients_pflege[$v_pflege['ipid']];
					$invoice_control_sheet_data['health_insurance_ik'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['health_insurance_ik'];
					$invoice_control_sheet_data['health_insurance_kassenr'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['health_insurance_kassenr'];
					$invoice_control_sheet_data['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
					$invoice_control_sheet_data['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
					$invoice_control_sheet_data['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
					$invoice_control_sheet_data['sapv_approve_nr'] = $invoice_data['sapv_approve_nr'];
					$invoice_control_sheet_data['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
					$invoice_control_sheet_data['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));
					
					$invoice_control_sheet_data['invoice_data']['invoice_number'] =  html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');;
					$invoice_control_sheet_data['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
					$invoice_control_sheet_data['invoice_data']['invoice_end']  = date('d.m.Y', strtotime($invoice_data['invoice_end']));

					$temp_files[] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'rlp_invoice_visits', 'rlp_contacts_pdf_items.html');
						
					//join generated files
					if(count($temp_files) > '0')
					{
					    
					    // ISPC-2472  Ancuta 12.11.2019::create batch name
 
					    $Batch_name = false;
					    if(!empty($inv_names)){
					        $Batch_name = $inv_names[0];
					        if( count($inv_names) > 1){
					            $Batch_name .='_'.end($inv_names);
					        }
					    }
					    //--
					    
					    
						$final_file = $this->generate_file($template_data[0], false, 'pdf', $this->view->folder_stamp, 'merge_pdfs', $temp_files,$Batch_name);
					}
				}
				else
				{
					$this->redirect(APP_BASE . 'invoicenew/newinvoicepatientlist?flg=notemplate');
					exit;
				}
			}
		
			//batch print - multiple invoices each with 2 joined pages! // 3 pages fro the new invoice
			if($params['batch_print'] == '1' && count($params['invoices']) > '0')
			{
				//batch temp folder
				$invoices_ids = $params['invoices'];
		
				//load invoices data
				$invoices_data = $rlp_invoices->get_invoices($invoices_ids,true);

				//TODO-3407 Ancuta 08.09.2020
				if(empty($invoices_data)){
				    return;
				}
				// -- 
				
				// ISPC-2472  Ancuta 12.11.2019::create batch name
				$inv_names = array();
				foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
				    $inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
				}
				$Batch_name = false;
				if(!empty($inv_names)){
				    $Batch_name = $inv_names[0];
				    if( count($inv_names) > 1){
				        $Batch_name .='_'.end($inv_names);
				    }
				}
				//--
				
				
				$final_files = array();
		
				foreach($invoices_data['invoices_data'] as $k_invoice_id => $v_invoice_data)
				{
				    $batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $clientid);
		
					//fucking pflegestuffe i hate how this shit is saved!!! -- change this shit sometime to a better way
					$pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($v_pat_ipid, date('Y-m-d', strtotime($v_invoice_data['invoice_start'])), date('Y-m-d', strtotime($v_invoice_data['invoice_end'])));
		
					if($pflege_arr)
					{
						$v_invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
					}
					else
					{
						$v_invoice_data['patient_pflegestufe'] = ' - ';
					}
		
						
					if(strlen($invoice_data['address']) > 0 ){
						if(strpos($invoice_data['address'],"style"))
						{
							$invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
						}
							
						$invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
						$invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
						$invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
					}
						
						
					//setup tokens
					//client tokens
					$tokens_multi['client_ik'] = $client_details[0]['institutskennzeichen'];
		
					//patient details tokens
					$tokens_multi['patienten_id'] = strtoupper(html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
					$tokens_multi['first_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['last_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['birthd'] = date('d.m.Y', strtotime($patient_days[$v_invoice_data['ipid']]['details']['birthd']));
					$tokens_multi['street'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['zip'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['city'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['patient_pflegestufe'] = $v_invoice_data['patient_pflegestufe'];
		
					//health insurance tokens
					//$tokens_multi['insurance_no'] = html_entity_decode($patient_days['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['insurance_no'] = html_entity_decode($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['beneficiary_address'] = html_entity_decode($v_invoice_data['address'], ENT_QUOTES, 'UTF-8');
		
					$tokens_multi['address'] = html_entity_decode($v_invoice_data['address'], ENT_QUOTES, 'UTF-8');//generate_rlpinvoice
					$tokens_multi['SAPV_Rechnungsempfaenger'] = htmlentities($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['sapv_recipient']);//ISPC-1236

					$tokens_multi['debitoren_nummer_oder_pv'] = "";
					//if debtor number is active and patient has number saved in invoice db get debtor number< for this invoice, no debtor_number in db 
					if($debtor_number_module == "1" && strlen($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number']) > '0')
					{
					    $tokens_multi['debtor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
					    $tokens_multi['debitor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
					}
					else
					{
					    $tokens_multi['debtor_number'] = '';
					    $tokens_multi['debitor_number'] = '';
					}
					
					
					//invoice specific tokens
					$tokens_multi['invoiced_month'] = "";
					if(!empty($v_invoice_data['invoiced_month']) && $v_invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
					{
						$tokens_multi['invoiced_month'] = date('m/Y', strtotime($v_invoice_data['invoiced_month']));
					}
		
					$tokens_multi['prefix'] = html_entity_decode($v_invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['invoice_number'] = html_entity_decode($v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
					$tokens_multi['full_invoice_number'] = html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
		
					//invoice date
					if($v_invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['completed_date'])) != "1970")
					{
						$tokens_multi['invoice_date'] = date('d.m.Y', strtotime($v_invoice_data['completed_date']));
					}
					else
					{
						$tokens_multi['invoice_date'] = '';
					}
		
					//start billed action day
					if($v_invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_active'])) != "1970")
					{
						$tokens_multi['first_active_day'] = date('d.m.Y', strtotime($v_invoice_data['start_active']));
					}
					else
					{
						$tokens_multi['first_active_day'] = '';
					}
		
					//end billed action day
					if($v_invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_active'])) != "1970")
					{
						$tokens_multi['last_active_day'] = date('d.m.Y', strtotime($v_invoice_data['end_active']));
					}
					else
					{
						$tokens_multi['last_active_day'] = '';
					}
		
					//first sapv day
					if($v_invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_sapv'])) != "1970")
					{
						$tokens_multi['first_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['start_sapv']));
					}
					else
					{
						$tokens_multi['first_sapv_day'] = '';
					}
		
					//last sapv day
					if($v_invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_sapv'])) != "1970")
					{
						$tokens_multi['last_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['end_sapv']));
					}
					else
					{
						$tokens_multi['last_sapv_day'] = '';
					}
							//sapv approve date
					if($v_invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['sapv_approve_date'])) != "1970")
					{
					    $tokens_multi['sapv_approve_date'] = date('d.m.Y', strtotime($v_invoice_data['sapv_approve_date']));
					}
					elseif(date('Y', strtotime($sapv_details_data[$v_invoice_data['ipid']]['approved_date'])) != "1970" && strlen($v_invoice_data['sapv_approve_date']) > '0')
					{
					    $tokens_multi['sapv_approve_date'] = $sapv_details_data[$v_invoice_data['ipid']]['approved_date'];
					}
					else
					{
					    $tokens_multi['sapv_approve_date'] = '';
					}
					
					/* if($v_invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['sapv_approve_date'])) != "1970")
					{
						$tokens_multi['sapv_approve_date'] = date('d.m.Y', strtotime($v_invoice_data['sapv_approve_date']));
					}
					else
					{
						$tokens_multi['sapv_approve_date'] = '';
					} */
		
					//$tokens_multi['sapv_approve_nr'] = html_entity_decode($v_invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
		
					
					

					if($v_invoice_data['sapv_approve_nr'] == "-" || strlen(trim(rtrim($v_invoice_data['sapv_approve_nr']))) == "0")
					{
					    $tokens_multi['sapv_approve_nr'] = html_entity_decode($v_invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
					}
					else
					{
					    $tokens_multi['sapv_approve_nr'] = html_entity_decode($sapv_details_data[$v_invoice_data['ipid']]['approved_number'], ENT_QUOTES, 'UTF-8');
					}
					
					
					$tokens_multi['footer'] = html_entity_decode($v_invoice_data['footer'], ENT_QUOTES, 'UTF-8');
		

					$tokens_multi['invoiced_period'] = "";
					
					if(!empty($v_invoice_data['invoice_start']) && $v_invoice_data['invoice_start'] != "0000-00-00 00:00:00" && !empty($v_invoice_data['invoice_end']) && $v_invoice_data['invoice_end'] != "0000-00-00 00:00:00")
					{
					    $tokens_multi['invoiced_period'] = date('d.m.Y', strtotime($v_invoice_data['invoice_start'])).'-'.date('d.m.Y', strtotime($v_invoice_data['invoice_end']));
					}
					
					
					if($v_invoice_data['storno'] == '1')
					{
						//rewrite invoice prefix if storned
						$tokens_multi['prefix'] = 'STORNO_' . $tokens['prefix'];
						$tokens_multi['unique_id'] = $v_invoice_data['record_id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total'] * (-1)), '2', ',', '.');
					}
					else
					{
						$tokens_multi['unique_id'] = $v_invoice_data['id'];
						$tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total']), '2', ',', '.');
					}
		
					/* if(count($v_invoice_data['items']) > '0')
					{
						$rows = count($v_invoice_data['items']);
		
						$grid = new Pms_Grid($v_invoice_data['items'], 1, $rows, "rlp_invoice_items_list_pdf.html");
						$grid->invoice_total = $tokens_multi['invoice_total'];
						$grid->max_entries = $rows;
		
						$html_items = $grid->renderGrid();
					} */
					
					foreach($v_invoice_data['items'] as $sh=>$sh_arr){
						foreach($sh_arr as $k=>$sh_data){
							$v_invoice_data['items_alter'][$sh.$k] = $sh_data;
							$v_invoice_data['items_alter'][$sh.$k]['shortcut_total'] = $sh_data['total'];
						}
					}
					
					if(count($v_invoice_data['items_alter']) > '0')
					{
						$rows = count($v_invoice_data['items_alter']);
							
						$grid = new Pms_Grid($v_invoice_data['items_alter'], 1, $rows, "rlp_invoice_items_list_pdf.html");
						$grid->invoice_total = $tokens_multi['invoice_total'];
						$grid->client_products = $client_products;
						$grid->max_entries = $rows;
							
						$html_items = $grid->renderGrid();
					}
					else 
					{
						$html_items = "";
					}
					
		
					$tokens_multi['invoice_items_html'] = $html_items;
		
		
					$current_invoices_period[$v_invoice_data['id']] = $patientmaster->getDaysInBetween($v_invoice_data['invoice_start'], $v_invoice_data['invoice_end']);
		
					$current_period_tmp[$v_invoice_data['id']] = $current_invoices_period[$v_invoice_data['id']];
		
					array_walk($current_period_tmp[$v_invoice_data['id']], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
		
						$current_period_tmp[$v_invoice_data['id']] = array_values(array_unique($current_period_tmp[$v_invoice_data['id']]));
		
						foreach($current_period_tmp[$v_invoice_data['id']] as $k_period => $v_period_day)
						{
							$current_period_month_days[date('Y-m', strtotime($v_period_day))][] = $v_period_day;
						}
		
						$patient_months[$v_invoice_data['id']] = array_keys($current_period_month_days);
		
						foreach($patient_months[$v_invoice_data['id']] as $k_inv_data => $v_inv_month)
						{
							if(!function_exists('cal_days_in_month'))
							{
								$month_days_nr = date('t', mktime(0, 0, 0, date("n", strtotime($v_inv_month . "-01")), 1, date("Y", strtotime($v_inv_month . "-01"))));
							}
							else
							{
								$month_days_nr = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_inv_month . "-01")), date("Y", strtotime($v_inv_month . "-01")));
							}
		
							$start_month = $v_inv_month . "-01";
							$end_month = $v_inv_month . '-' . $month_days_nr;
		
							$month_days_arr_source[$v_invoice_data['id']][date('Y-m', strtotime($start_month))] = $patientmaster->getDaysInBetween($start_month, $end_month);
						}
		
						$temp_files = array();
						if($template_data)
						{
		
							//generate invoice page
							$temp_files[$v_invoice_data['id']][] = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'generate_pdf');

							// Changed for  ISPC-1562 BW Nachweis - added a new pdf version
							
							
							


							$extra_details_array = array();
							foreach($extra_details[$v_invoice_data['ipid']] as $ddate=>$action_data){
							    foreach($action_data as $action_type => $actions_array){
							        foreach($actions_array as $k=>$act_data){
							            if($action_type == "home_visit"){
							                $action_date_full = $act_data['billable_date'];
							            }
							            elseif($action_type == "koordination" || $action_type == "telefon"){
							                if($act_data['done_date'] != "0000-00-00 00:00:00"){
							                    $action_date_full = $act_data['done_date'];
							                } else{
							                    $action_date_full = $act_data['course_date'];
							                }
							            }
							            $act_data['sort_date'] = $action_date_full;
							            $act_data['alias'] = $action_type;
							            $extra_details_array[$v_invoice_data['ipid']][] = $act_data;
							        }
							    }
							}
							
							
							
							
							//active and  in invoice period
							$act_data_24h = array();
							foreach($active_days[$v_invoice_data['ipid']] as $k=>$active_day){
							    	
							    if(Pms_CommonData::isintersected($active_day, $active_day, date("Y-m-d",strtotime($v_invoice_data['invoice_start'])), date("Y-m-d",strtotime($v_invoice_data['invoice_end'])) )){
							        $act_data_24h['sort_date'] = $active_day;
							        $act_data_24h['alias'] = "24_h_shift";
							        $extra_details_array[$v_invoice_data['ipid']][] = $act_data_24h;
							        	
							    }
							}
								
							
							
							
							
							usort($extra_details_array[$v_invoice_data['ipid']], array(new Pms_Sorter('sort_date'), "_date_compare"));
							
							
							$invoice_control_sheet_data =  array();
							$invoice_control_sheet_data['kv_header'] = $kv_header[$v_invoice_data['ipid']];
							$invoice_control_sheet_data['patient_data'] = $patient_data_diagnos[$v_invoice_data['ipid']];
							$invoice_control_sheet_data['alias'] = $alias;
								
							//organize leistung data
							$invoice_control_sheet_data['patientdetails'] = $params['patient_days'][$v_invoice_data['ipid']]['details'];
								
							$invoice_control_sheet_data['period_days_source'] = $month_days_arr_source[$v_invoice_data['id']];
							$invoice_control_sheet_data['period_days'] = $current_period_tmp[$v_invoice_data['ipid']];
							$invoice_control_sheet_data['shortcuts'] = $shortcuts['performance'];
							$invoice_control_sheet_data['master_data'] = $master_data[$v_invoice_data['ipid']];
							$invoice_control_sheet_data['classification_box'] = $clasifizierung[$v_invoice_data['ipid']];
// 							$invoice_control_sheet_data['extra_data_details'] = $extra_details[$v_invoice_data['ipid']];
							$invoice_control_sheet_data['extra_data_details'] = $extra_details_array[$v_invoice_data['ipid']];
							$invoice_control_sheet_data['users_array'] = $user_array ;
							$invoice_control_sheet_data['client_details'] = $client_details[0];
							$invoice_control_sheet_data['health_insurance'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['hi_name'];
							$invoice_control_sheet_data['insurance_no'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'];
							$invoice_control_sheet_data['hi_subdiv_address'] = $v_invoice_data['address'];
							$invoice_control_sheet_data['patient_pflegestufe'] = $patients_pflege[$v_pflege['ipid']];
							$invoice_control_sheet_data['health_insurance_ik'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['health_insurance_ik'];
							$invoice_control_sheet_data['health_insurance_kassenr'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['health_insurance_kassenr'];
							$invoice_control_sheet_data['first_active_day'] = date('d.m.Y', strtotime($v_invoice_data['start_active']));
							$invoice_control_sheet_data['last_active_day'] = date('d.m.Y', strtotime($v_invoice_data['end_active']));
							$invoice_control_sheet_data['sapv_approve_date'] = date('d.m.Y', strtotime($v_invoice_data['sapv_approve_date']));
							$invoice_control_sheet_data['sapv_approve_nr'] = $v_invoice_data['sapv_approve_nr'];
							$invoice_control_sheet_data['first_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['start_sapv']));
							$invoice_control_sheet_data['last_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['end_sapv']));
								
							$invoice_control_sheet_data['invoice_data']['invoice_number'] =  html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');;
							$invoice_control_sheet_data['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($v_invoice_data['invoice_start']));
							$invoice_control_sheet_data['invoice_data']['invoice_end']  = date('d.m.Y', strtotime($v_invoice_data['invoice_end']));
							
							$temp_files[$v_invoice_data['id']][] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'rlp_invoice_visits', 'rlp_contacts_pdf_items.html');
							
							
							//join generated files
							if(count($temp_files[$v_invoice_data['id']]) > '0')
							{
							    
							    //ISDPC-2609 Ancuta 
							    if(isset($params['print_job']) && $params['print_job'] == '1'){
							        $print_params = array();
							        $print_params = $params;
							        $print_params['template_data'] = $template_data[0];
							        $print_params['export_file_type'] = "pdf";
							        $print_params['batch_printing_mode'] = "merge_pdfs_multiple";
							        $print_params['vars'] = $tokens_multi;
							        $print_params['batch_temp_files'] = $temp_files[$v_invoice_data['id']];
							        
							        $batch_temp_files = $this->print_job_generate_and_save_file($print_params);
							        
							        return $batch_temp_files ;
							        
							    }   else {
							        
								    $final_files[$v_invoice_data['id']] = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'merge_pdfs_multiple', $temp_files[$v_invoice_data['id']]);
							        
							    }
							    
		
							}
						}
		
						$tokens_multi = array();
						$invoice_control_sheet_data = array();
				}
		
				$final_files = array_values($final_files);
		
				if(count($final_files) > '0')
				{
					//final cleanup (check if files are on disk)
					foreach($final_files as $k_temp => $v_file)
					{
						if(!is_file($v_file))
						{
							//remove unexisting files
							//							$unsetted_files[] = $v_file; //for debugs
							unset($final_files[$v_file]);
						}
					}
		
					$remaining_temp_files = array_values(array_unique($final_files));
		
		
					if(count($remaining_temp_files) > '0')
					{
					    //ISPC-2472  Ancuta 12.11.2019::added batch name
						$final_file = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'merge_pdfs', $final_files, $Batch_name);
					}
				}
				if ( ! isset($params['print_job']) && $params['print_job'] == '1' ){
				    
				} else {
				    exit;
				}
			}
		}
		
		
		
		
		
		public function editrlpinvoiceAction()
		{
			$clientid = $this->clientid;
			$patientmaster = new PatientMaster();
			$client_details = new Client();
			$rlp_invoices = new RlpInvoices();
			$rlp_invoices_items = new RlpInvoiceItems();
			$rlp_invoices_form = new Application_Form_RlpInvoices();
			$hi_perms = new HealthInsurancePermissions();
			$pflege = new PatientMaintainanceStage();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$this->view->hide_patient_tab = '1';
		
			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				//here get the invoice details
				$invoice_id = $_REQUEST['invoiceid'];
				$invoice_data = $rlp_invoices->getRlpInvoices($invoice_id);
			}
		
			$client_storno_invoices =  RlpInvoices::get_storned_invoices($clientid);
			
			if(! empty($client_storno_invoices) && in_array($invoice_data['id'], RlpInvoices::get_storned_invoices($clientid)))
			{
				$this->view->has_storno = '1';
			}
			else
			{
				$this->view->has_storno = '0';
			}
		
			if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
			{
				$status = '0';
				if(!empty($_POST['completed']))
				{
					$status = '2'; //unpaid
				}
				else if(!empty($_REQUEST['edit_invoice']))
				{
					$status = '1'; //draft
				}
				else if($_POST['deletemore'] == "1")
				{
					$status = '4'; //deleted
				}
				else if(!empty($_REQUEST['pdf']))
				{
					$status = '0'; //no change
				}
				else if(!empty($_REQUEST['users_invoice']))
				{
					$status = '0'; //no change
				}
		
				if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
				{
					$high_invoice_nr = $rlp_invoices->get_next_invoice_number($clientid);
					$_POST['prefix'] = $high_invoice_nr['prefix'];
					$_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
				}
				else
				{
					$_POST['prefix'] = $invoice_data['prefix'];
					$_POST['invoice_number'] = $invoice_data['invoice_number'];
				}
				//save here
		
				if(strlen($_POST['invoice']['address']) > 0 ){
					if(strpos($_POST['invoice']['address'],"style"))
					{
						$_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
					}
					$_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
					$_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
					$_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
				}
		
				$edit_invoice = $rlp_invoices_form->edit_invoice($_REQUEST['invoiceid'], $clientid, $_POST, $status);
		
		
				if(empty($_REQUEST['pdf']))
				{
					if($edit_invoice)
					{
		
					    //ISPC-2312 Ancuta 07.12.2020
					    if($_REQUEST['redirect2new'] == '1'){
					        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=rlp_invoice');
					        exit();
					    }
					    //-- 
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edtsuc');
					}
					else
					{
					    //ISPC-2312 Ancuta 07.12.2020
					    if($_REQUEST['redirect2new'] == '1'){
					        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=rlp_invoice');
					        exit();
					    }
					    //-- 
						$this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edterr');
					}
				}
				else if(!empty($_REQUEST['pdf']) && $edit_invoice)
				{
		
					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}
		
					if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
					}
					else if(empty($pdf_data['completed_date']))
					{
						$pdf_data['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
					}
					//					$this->_redirect(APP_BASE . 'invoice/performancerecord?iid=' . $_REQUEST['invoiceid'] . '&mode=pdfs&pdfquick=1&completed_date=' . strtotime($pdf_data['completed_date']));
		
					$params['ipids'] = array($invoice_data['ipid']);
		
					//patient days
					$conditions['client'] = $this->clientid;
					$conditions['ipids'] = array($invoice_data['ipid']);
					$conditions['periods'][0]['start'] = '2009-01-01';
					$conditions['periods'][0]['end'] = date('Y-m-d');
		
					$sql = 'e.epid, p.ipid, e.ipid,';
					$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
					$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
					$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
					$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
					$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
					$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
					//be aware of date d.m.Y format here
					$patient_days = Pms_CommonData::patients_days($conditions, $sql);
		
					$params['invoices'] = array($invoice_data['id']);
					$params['patient_days'] = $patient_days;
					$params['get_pdf'] = '1';
					$params['only_pdf'] = 1;
					$_REQUEST['type'] = 'pdf';
		
					if($invoice_data['status'] == '1')
					{
						$_POST['completed_date'] = ''; //is set as current date- for completion of invoice -  dont't send it to pdf
					}
		
					$params['custom_data']['address'] = $_POST['invoice']['address'];
					$params['custom_data']['completed_date'] = date('d.m.Y', strtotime($invoice_data['completed_date_sort']));
		
					$this->generate_rlpinvoice($params);
				}
			}
		
			if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
			{
				if(!$invoice_data || empty($invoice_data))
				{
				    //ISPC-2312 Ancuta 07.12.2020
				    if($_REQUEST['redirect2new'] == '1'){
				        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type=rlp_invoice');
				        exit();
				    }
				    //-- 
					$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
				}
		
				$patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
				$client_detail = $client_details->getClientDataByid($invoice_data['client']);
				$this->view->client_ik = $client_detail[0]['institutskennzeichen'];
		
				//health insurance
				$divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
				$hi_perms_divisions = $divisions;
				
				//TODO-2058 p2 Ancuta 31.01.2019
				$client_products = array();
				$client_products = RlpProductsTable::find_client_products($this->clientid);
				$this->view->client_products  = $client_products; 
				// -- 
				
		
				//health insurance
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
				$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
				$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
		
				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();
		
					if(empty($healthinsu_array[0]['name']))
					{
						$healthinsu_array[0]['name'] = $healtharray['name'];
					}
					if(empty($healthinsu_array[0]['ins_street']))
					{
						$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
					}
		
					if(empty($healthinsu_array[0]['ins_city']))
					{
						$healthinsu_array[0]['ins_city'] = $healtharray['city'];
					}
		
					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$this->view->health_insurance_ik = $healtharray['iknumber'];
					}
		
					if(strlen($healthinsu_array[0]['kvk_no']) == 0)
					{
						$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
					}
				}
		
		
				if($hi_perms_divisions)
				{
		
					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
				}
		
				$pathealthinsurancenr = "";
				if(count($healthinsu_array[0]))
				{
					$phi_details = $healthinsu_array[0]['name'];
				}
				else
				{
					$phi_details = "--";
				}
		
				$phi_details_sub = $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];
		
				$this->view->health_insurance = $phi_details;
				$this->view->hi_subdiv_address = $phi_details_sub;
		
		
				//pflege
				//get pflegestuffe in current invoice period
				$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);
		
				if($pflege_arr)
				{
					$last_pflege = end($pflege_arr);
					$this->view->patient_pflegestufe = $last_pflege['stage'];
				}
				else
				{
					$this->view->patient_pflegestufe = ' - ';
				}
		
				if(strlen($invoice_data['address']) == 0)
				{
					$invoice_data['address'] = $phi_details_sub;
				}
		
				if(strlen($invoice_data['footer']) == 0)
				{
					$invoice_data['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
				}
		
				$this->view->invoice_data = $invoice_data;
				$this->view->patient_details = $patient_details;
				$this->view->client_details = $client_detail[0];
			}
			else
			{
				//redirect if no invoiceid is preset
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}
		
		public function fetchrlpinvoicelistAction()
		{
			$clientid = $this->clientid;
			$this->_helper->layout->setLayout('layout_ajax');
			$hidemagic = Zend_Registry::get('hidemagic');
			$rlp_invoices_payments = new RlpInvoicePayments();
			$users = new User();
			$warnings = new RemindersInvoice();
			$modules = new Modules();
			
			if($modules->checkModulePrivileges("170", $clientid))
			{
				$this->view->create_bulk_warnings = "1";
			}
			else
			{
				$this->view->create_bulk_warnings = "0";
			}
			
			$limit = 50;
			$this->view->limit = $limit;
			$filters = array();
		
		
			$storno_invoices_q = Doctrine_Query::create()
			->select("*")
			->from('RlpInvoices')
			->where('client = "' . $clientid . '"  ')
			->andWhere('storno = 1')
			->andWhere('isdelete = 0');
			$storno_invoices_array = $storno_invoices_q->fetchArray();
		
			$storno_ids = array();
			$storno_ids_str="";
			foreach($storno_invoices_array as $k => $st)
			{
				$storno_ids[] = $st['record_id'];
				$storno_ids_str .= '"' . $st['record_id'] . '",';
			}
		
			if( strlen($storno_ids_str) > 0 )
			{
				$storno_ids_str = substr($storno_ids_str, 0, -1);
				$storno_ids_str_sql = " AND id NOT IN (" . $storno_ids_str . ")";
			} else{
				$storno_ids_str_sql = "";
			}
			
			
			// get client data
			$client_details_m = new Client();
			$client_details = $client_details_m->getClientDataByid($clientid);
		
			$invoice_due_days = $client_details[0]['invoice_due_days'];
			$plus_due_days = '+' . $invoice_due_days . ' days';
			$this->view->plus_due_days = $plus_due_days;
		
			//process tabs
			$filters['hiinvoice_search'] = '';
			switch($_REQUEST['f_status'])
			{
		
				case 'draft':
					$filters['hiinvoice'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
					break;
		
				case 'unpaid':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0  '.$storno_ids_str_sql.' AND isdelete = 0 AND isarchived ="0" ';
		
					break;
		
				case 'paid':
					$filters['hiinvoice'] = ' AND status="3"  AND storno = 0   '.$storno_ids_str_sql.'  AND isdelete=0 AND isarchived ="0"';
					break;
		
				case 'deleted':
					$filters['hiinvoice'] = ' AND (status="4" OR isdelete="1") ';
					break;
		
				case 'overdue':
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")  AND storno = 0  '.$storno_ids_str_sql.'   AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
					break;
		
				case 'all':
					$filters['hiinvoice'] = ' AND isarchived ="0"';
					break;
		
				case 'archived':
					$filters['hiinvoice'] = ' AND isarchived ="1" AND status !="4" AND isdelete != "1"';
					break;
		
				default: // unpaid- open
					$filters['hiinvoice'] = ' AND (status = "2" OR status = "5")   AND storno = 0  '.$storno_ids_str_sql.'  AND isdelete = 0 AND isarchived ="0"';
					break;
			}
		
			if(!empty($_REQUEST['last_name']))
			{
				$filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
			}
		
			if(!empty($_REQUEST['first_name']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
			}
		
			if(!empty($_REQUEST['epid']))
			{
				$filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
			}
		
			if(!empty($_REQUEST['rnummer']))
			{
				$filters['hiinvoice'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
				$filters['hiinvoice_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
			}
			if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
			{
				$filters['hiinvoice'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
				$filters['hiinvoice_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
			}
		
			//get invoice patients
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,
			CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
		
			// if super admin check if patient is visible or not
			if($this->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
			}
		
			//filter patients name/surname/epid
			$f_patient = Doctrine_Query::create()
			->select($sql)
			->from('PatientMaster p')
			->where("p.isdelete =0")
			->leftJoin("p.EpidIpidMapping e")
			->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);
		
			$f_patients_res = $f_patient->fetchArray();
		
			$f_patients_ipids = array();
			foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
			{
				$f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
			}
		
			//all invoices for counting
			$invoices_counting = Doctrine_Query::create()
			->select("*")
			->from('RlpInvoices');
			if( ! empty($f_patients_ipids)){
				$invoices_counting ->whereIn('ipid', $f_patients_ipids);
			}
			$invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
		
			$inv2count = $invoices_counting->fetchArray();
		
			$count_invoices = array();
			foreach($inv2count as $k_inv2count => $v_inv2count)
			{
				$count_invoices[$v_inv2count['status']][] = '1';
		
				if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["draft"][] = '1';
				}
		
				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["unpaid"][] = '1';
				}
		
				if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["paid"][] = '1';
				}
		
				if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["deleted"][] = '1';
				}
		
				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
				//				if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && time() > strtotime($v_inv2count['invoice_end']))
				{
					$status_count_invoices["overdue"][] = '1';
				}
		
				if($v_inv2count['isarchived'] == "0")
				{
					$status_count_invoices["all"][] = '1';
				}
		
				if($v_inv2count['isarchived'] == "1" && $v_inv2count['status'] != "4" && $v_inv2count['isdelete'] != "1")
				{
					$status_count_invoices["archived"][] = '1';
				}
			}
			//deleted_invoices
			$del_invoices_counting = Doctrine_Query::create()
			->select("*")
			->from('RlpInvoices');
			if( ! empty($f_patients_ipids)){
				$del_invoices_counting ->whereIn('ipid', $f_patients_ipids);
			}
			$del_invoices_counting->andWhere("client='" . $clientid . "'" . $filters['hiinvoice_search']);
			$del_invoices_counting->andWhere("isdelete=1 or status=4");
			$del_inv2count = $del_invoices_counting->fetchArray();
			foreach($del_inv2count as $k_del_inv => $v_del_inv)
			{
				$counted_del_inv[$v_del_inv['status']][] = '1';
			}
		
			//filter invoices status/invoice_number/amount
			$invoices_nl = Doctrine_Query::create()
			->select("*")
			->from('RlpInvoices');
			if( ! empty($f_patients_ipids)){
				$invoices_nl->whereIn('ipid', $f_patients_ipids);
			}
			$invoices_nl->andWhere("client='" . $clientid . "'" . $filters['hiinvoice']);
			$invoices_no_limit = $invoices_nl->fetchArray();
		
		
			$invoice_ipids = array();
			foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
			{
				$invoice_ipids[] = $v_nl_inv['ipid'];
			}
		
			$patient = Doctrine_Query::create()
			->select($sql)
			->from('PatientMaster p');
			if( ! empty($f_patients_ipids)){
				$patient->whereIn("p.ipid", $f_patients_ipids);
			}
			$patient->leftJoin("p.EpidIpidMapping e")
			->andWhere('e.clientid = ' . $clientid);
			$patients_res = $patient->fetchArray();
		
			if($patients_res)
			{
				foreach($patients_res as $k_pat => $v_pat)
				{
					$patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
				}
			}
		
			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}
		
			if($_REQUEST['sort'] == 'asc')
			{
				$sort = 'asc';
			}
			else
			{
				$sort = 'desc';
			}
		
			switch($_REQUEST['ord'])
			{
		
				case 'id':
					$orderby = 'id ' . $sort;
					break;
		
				case 'ln':
					$orderby = 'epid ' . $sort;
					break;
		
				case 'nr':
					//$orderby = 'invoice_number ' . $sort;
					$orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
		
				case 'date':
					$orderby = 'change_date, create_date ' . $sort;
					break;
		
				case 'amnt':
					$orderby = 'invoice_total ' . $sort;
					break;
				case 'invoice_date':
					$orderby = 'completed_date_sort ' . $sort;
					break;
		
				default:
				    // RlpInvoices
					//$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [NEW]
					$orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
					break;
			}
		
		
		
			$invoices = Doctrine_Query::create()
			->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
			->from('RlpInvoices')
			->where("client='" . $clientid . "'" . $filters['hiinvoice']);
			if( ! empty($invoice_ipids)){
				$invoices->andwhereIn('ipid', $invoice_ipids);
			}
			$invoices->orderby($orderby);
			$invoices->offset(($current_page - 1) * $limit);
			$invoices->limit($limit);
			$invoicelimit = $invoices->fetchArray();
		
		
			foreach($invoicelimit as $k_il => $v_il)
			{
				$invoice_ids[] = $v_il['id'];
				$invoice_uids[] = $v_il['create_user'];
				$invoice_uids[] = $v_il['change_user'];
			}
		
		
			//count tabs contents
			//			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all');
			$invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');
		
			$counted = array();
			foreach($invoice_tabs as $tab)
			{
				$counted[$tab] += count($status_count_invoices[$tab]);
			}
		
			$users_details = array();
			if( ! empty($invoice_uids) ){
				$invoice_uids = array_values(array_unique($invoice_uids));
				$users_details = $users->getMultipleUserDetails($invoice_uids);
			}
		
		
			$invoice_payments = $rlp_invoices_payments->getInvoicesPaymentsSum($invoice_ids);
		
			$no_invoices = sizeof($invoices_no_limit) - 1; //substract dummy error control result
			$no_pages = ceil($no_invoices / $limit);
			
			$all_warnings = $warnings->get_reminders($invoice_ids, 'rlp_invoice', $clientid);
			 
			foreach ($invoicelimit as &$row) {
				if (isset($all_warnings[$row['id']])) {
					$row['InvoiceWarnings'] = $all_warnings[$row['id']];
				}
			}
			//var_dump($invoicelimit); exit;
		
			$this->view->storned_invoces = RlpInvoices::get_storned_invoices($clientid);
		
			$this->view->invoicelist = $invoicelimit;
			$this->view->user_details = $users_details;
			$this->view->patient_details = $patient_details;
			$this->view->invoice_payments = $invoice_payments;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_invoices = $no_invoices;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->counted = $counted;
		}
		
		public function rlplistpaymentsAction()
		{
			$clientid = $this->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$rlp_invoices = new RlpInvoices();
			$rlp_invoices_payments = new RlpInvoicePayments();
			$rlp_invoices_form = new Application_Form_RlpInvoices();
		
			$user = new User();
		
			if($_REQUEST['invoiceid'])
			{
		
				$payments = $rlp_invoices_payments->getInvoicePayments($_REQUEST['invoiceid']);
		
				$users = array();
				foreach($payments as $k_payment => $v_payment)
				{
					$users[] = $v_payment['create_user'];
				}
				
				if( ! empty($users)){
					$users_list = $user->getMultipleUserDetails($users);
				}
		
				$users_list_details = array();
				foreach($users_list as $k_user => $v_user)
				{
					$users_list_details[$v_user['id']] = $v_user;
				}
		
				if($_REQUEST['op'] == 'del')
				{
					if(count($payments) == 1)
					{
						$next = '0';
					}
					else
					{
						$next = '1';
					}
		
		
					$del_payment = $rlp_invoices_payments->delete_invoice_payment($_REQUEST['paymentid']);
		
					//update invoice status when deleting an payment
					if($del_payment)
					{
						$invoice_payments_sum = $rlp_invoices_payments->getInvoicesPaymentsSum(array($_REQUEST['invoiceid']));
						$invoice_details = $rlp_invoices->get_invoice($_REQUEST['invoiceid']);
		
						if($invoice_payments_sum)
						{
							if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
							{
								$status = '3'; //paid
							}
							else
							{
								$status = '5'; //not paid/partial paid
							}
						}
						else
						{
							//no payments => draft
							$status = '2';
						}
						$update_status = $rlp_invoices_form->ToggleStatusInvoices(array($_REQUEST['invoiceid']), $status);
					}
		
					//reload the payments
					unset($payments);
					$payments = $rlp_invoices_payments->getInvoicePayments($_REQUEST['invoiceid']);
				}
		
				$this->view->payments = $payments;
				$this->view->users_list = $users_list_details;
				$payments_list = $this->view->render('invoicenew/rlplistpayments.html');
				echo $payments_list;
		
				exit;
			}
			else
			{
				exit;
			}
		}
		
 		public function deleteclientinvoicetemplateAction()
 		{
 			$logininfo = new Zend_Session_Namespace('Login_Info');
 			
 			$has_edit_permissions = Links::checkLinkActionsPermission();
 			if(!$has_edit_permissions) // if canedit = 0 - don't allow any additions or changes
 			{
 				$this->_redirect(APP_BASE . "error/previlege");
 				exit;
 			}
 			
 			if(!empty($_GET['id']))
 			{
 				$fdoc = Doctrine::getTable('InvoiceTemplates')->find($_GET['id']);
 				$fdoc->isdeleted = 1;
 				$fdoc->save();
 			}
 			
 			$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
 			$this->_redirect(APP_BASE . 'invoicenew/listclientinvoicetemplates?flg=suc&mes='.urlencode($this->view->error_message));
 		}
		
 		//get view list reminders invoice templates
 		public function listremindersinvoicetemplatesAction(){
 			//$logininfo = new Zend_Session_Namespace('Login_Info');
 			//$clientid = $logininfo->clientid;
 		
 			$userid = $this->userid;
 			$clientid = $this->clientid;
 			$user_type = $this->usertype;
 		
 			if($user_type == "CA" || $user_type == "SA")
 			{
 				$reveal_actions_col = '1';
 				$this->view->reveal_actions_col = '1';
 			}
 			else
 			{
 				$reveal_actions_col = '0';
 				$this->view->reveal_actions_col = '0';
 			}
 		
 			//populate the datatables
 			if ($this->getRequest()->isXmlHttpRequest() && $this->getRequest()->isPost()) {
 		
 				$all_clients = Client::get_all_clients();
 					
 				$clientids[] = $clientid;
 				$client_users_res = User::get_clients_users($clientids);
 					
 				foreach($client_users_res as $k_user => $v_user)
 				{
 					$client_users[$v_user['id']] = trim($v_user['first_name'] . ' ' . $v_user['last_name']);
 				}
 				//var_dump($client_users); exit;
 		
 				$this->_helper->layout()->disableLayout();
 				$this->_helper->viewRenderer->setNoRender(true);
 				if(!$_REQUEST['length']){
 					$_REQUEST['length'] = "25";
 				}
 				$limit = (int)$_REQUEST['length'];
 				$offset = (int)$_REQUEST['start'];
 				$search_value = addslashes($_REQUEST['search']['value']);
 		
 				$columns_array = array(
 						"0" => "title",
 						"1" => "invoice_type_tr",
 						"2" => "client_name",
 						"3" => "file_type",
 						"4" => "create_user_name"
 		
 				);
 				$columns_search_array = $columns_array;
 		
 				if(isset($_REQUEST['order'][0]['column']))
 				{
 					$order_column = $_REQUEST['order'][0]['column'];
 					$order_dir = $_REQUEST['order'][0]['dir'];
 				}
 				else
 				{
 					array_push($columns_array, "id");
 					$nrcol = array_search ('id', $columns_array);
 					$order_column = $nrcol;
 					$order_dir = "ASC";
 				}
 					
 				$order_by_str ='CONVERT(CONVERT('.addslashes(htmlspecialchars($columns_array[$order_column])).' USING BINARY) USING utf8) '.$order_dir;
 				// ########################################
 				// #####  Query for count ###############
 				$fdoc1 = Doctrine_Query::create();
 				$fdoc1->select('count(*)');
 				$fdoc1->from('RemindersInvoiceTemplates');
 				$fdoc1->where("clientid = ?", $clientid);
 				$fdoc1->andWhere("isdeleted = 0  ");
 				$fdoc1->andWhere("(title != '' or file_type != '')");
 		
 				$fdocarray = $fdoc1->fetchArray();
 				$full_count  = $fdocarray[0]['count'];
 		
 				// ########################################
 				// #####  Query for details ###############
 				$fdoc1->select('*');
 		
 				if($order_column != "2" && $order_column != "4" && $order_column != "1")
 				{
 					$fdoc1->orderBy($order_by_str);
 				}
 		
 				$fdoclimit = $fdoc1->fetchArray();
 		
 				foreach ($fdoclimit as $key=> $row) {
 					$row['client_name'] = $all_clients[$row['clientid']]['client_name'];
 					$row['create_user_name'] = $client_users[$row['create_user']];
 					if(strlen($row['invoice_type']) > 0)
 					{
 						$row['invoice_type_tr'] = $this->view->translate($row['invoice_type'].'_label');
 					}
 					else
 					{
 						$row['invoice_type_tr'] = $this->view->translate('template_no_invoice_type');
 					}
 					if(strlen($row['template_type']) > 0)
 					{
 						$row['template_type_tr'] = $this->view->translate($row['template_type']);
 					}
 					else
 					{
 						$row['template_type_tr'] = $this->view->translate('template_no_reminder_invoice_type');
 					}
 					$fdoclimit[$key] = $row;
 				}
 		
 				if(trim($search_value) != "")
 				{
 					$regexp = trim($search_value);
 					Pms_CommonData::value_patternation($regexp);
 						
 					foreach($columns_search_array as $ks=>$vs)
 					{
 						$pairs[$vs] = trim(str_replace('\\', '',$regexp));
 		
 					}
 					//var_dump($pairs);
 					$fdocsearch = array();
 					foreach ($fdoclimit as $skey => $sval) {
 						foreach ($pairs as $pkey => $pval) {
 							$pval_arr = explode('|', $pval);
 		
 							foreach($pval_arr as $kpval=>$vpval)
 							{
 								if (array_key_exists($pkey, $sval) && strpos(mb_strtolower($sval[$pkey], 'UTF-8'), $vpval) !== false) {
 									$fdocsearch[$skey] = $sval;
 									break;
 								}
 							}
 								
 						}
 					}
 						
 		
 					$fdoclimit = $fdocsearch;
 				}
 				$filter_count  = count($fdoclimit);
 				//var_dump($full_count);
 					
 				if($order_column == "2" || $order_column == "4" || $order_column == "1")
 				{
 					$sort_col = array();
 					foreach ($fdoclimit as $key=> $row)
 					{
 						$row[$columns_array[$order_column].'_tr'] = mb_strtolower($row[$columns_array[$order_column]], 'UTF-8');
 						$fdoclimit[$key] = $row;
 						$sort_col[$key] = $row[$columns_array[$order_column].'_tr'];
 					}
 		
 					if($order_dir == 'desc')
 					{
 						$dir = SORT_DESC;
 					}
 					else
 					{
 						$dir = SORT_ASC;
 					}
 					array_multisort($sort_col, $dir, $fdoclimit);
 		
 					$keyw = $columns_array[$order_column].'_tr';
 					array_walk($fdoclimit, function (&$v) use ($keyw) {
 						unset($v[$keyw]);
 					});
 				}
 		
 				if($limit != "")
 				{
 					$fdoclimit = array_slice($fdoclimit, $offset, $limit, true);
 				}
 				$fdoclimit = Pms_CommonData::array_stripslashes($fdoclimit);
 		
 				$report_ids = array();
 				$fdoclimit_arr = array();
 				foreach ($fdoclimit as $key => $report)
 				{
 					$fdoclimit_arr[$report['id']] = $report;
 					$report_ids[] = $report['id'];
 				}
 					
 				$row_id = 0;
 				$link = "";
 		
 				$resulted_data = array();
 				foreach($fdoclimit_arr as $report_id =>$mdata)
 				{
 					$link = '%s';
 					$resulted_data[$row_id]['title'] = '<a href="'.APP_BASE.'invoicenew/getremindertemplate?tid='.$mdata['id'].'">'.$mdata['title'].'</a>';
 					$resulted_data[$row_id]['invoice_type'] = '<a href="'.APP_BASE.'invoicenew/getremindertemplate?tid='.$mdata['id'].'">'.$mdata['invoice_type_tr'].'</a>';
 					$resulted_data[$row_id]['template_type'] = '<a href="'.APP_BASE.'invoicenew/getremindertemplate?tid='.$mdata['id'].'">'.$mdata['template_type_tr'].'</a>';
 					$resulted_data[$row_id]['client_name'] = '<a href="'.APP_BASE.'invoicenew/getremindertemplate?tid='.$mdata['id'].'">'.$mdata['client_name'].'</a>';
 					$resulted_data[$row_id]['file_type'] = '<a href="'.APP_BASE.'invoicenew/getremindertemplate?tid='.$mdata['id'].'">'.$mdata['file_type'].'</a>';
 					$resulted_data[$row_id]['create_user_name'] = '<a href="'.APP_BASE.'invoicenew/getremindertemplate?tid='.$mdata['id'].'">'.$mdata['create_user_name'].'</a>';
 		
 					if($reveal_actions_col != '0')
 					{
 						$resulted_data[$row_id]['actions'] = '<a href="'.APP_BASE .'invoicenew/editreminderinvoicetemplate?tid='.$mdata['id'].'"><img border="0" src="'.RES_FILE_PATH.'/images/edit.png" /> </a><a href="javascript:void(0);"  class="delete" rel="'.$mdata['id'].'" id="delete_'.$mdata['id'].'"><img border="0" src="'.RES_FILE_PATH.'/images/action_delete.png"></a>';
 					}
 					else
 					{
 						$resulted_data[$row_id]['actions'] = '';
 					}
 		
 					$row_id++;
 				}
 		
 				$response['draw'] = $_REQUEST['draw']; //? get the sent draw from data table
 				$response['recordsTotal'] = $full_count;
 				$response['recordsFiltered'] = $filter_count; // ??
 				$response['data'] = $resulted_data;
 		
 				$this->_helper->json->sendJson($response);
 			}
 		
 		}
 		
 		public function editreminderinvoicetemplateAction()
 		{
 			$userid = $this->userid;
 			$clientid = $this->clientid;
 			$upload_form = new Application_Form_ReminderInvoiceTemplate();
 		
 		
 			if($_REQUEST['tid'] > '0')
 			{
 				$template_id = trim(rtrim($_REQUEST['tid']));
 		
 				if($this->getRequest()->isPost())
 				{
 					$post = $_POST;
 					$post['template_id'] = $template_id;
 		
 					//used to cleanup in edit mode(file uploaded but check was deselected)
 					$post['sh_inv_template_filepath'] = $_SESSION['sh_inv_template_filepath'];
 					$post['sh_inv_template_filetype'] = $_SESSION['sh_inv_template_filetype'];
 		
 					//reset upload vars(if any) if change template is not checked
 					if($post['change_file'] != '1')
 					{
 						$this->resetuploadvars();
 					}
 		
 					if($upload_form->validate($post))
 					{
 						$upload_form->update_reminder_template_data($post);
 						$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
 						$this->_redirect(APP_BASE . 'invoicenew/listremindersinvoicetemplates?flg=succ&mes='.urlencode($this->view->error_message));
 						exit;
 					}
 					else
 					{
 						$this->retain_values($post);
 					}
 					$this->resetuploadvars();
 				}
 		
 		
 		
 				// client setting invoices
 				$invoice_types_src = Pms_CommonData::allinvoices();
 					
 					
 				//all invoice types
 				$invoice_types = Pms_CommonData::get_invoice_types();
 					
 				//get invoices from menu permissions
 				$client_menu_perms = Doctrine_Query::create()
 				->select('*')
 				->from('MenuClient')
 				->andWhere('clientid = "' . $clientid . '"');
 				$client_menu_permssions = $client_menu_perms->fetchArray();
 					
 				$menu_perms[] = '999999999';
 				foreach($client_menu_permssions as $val)
 				{
 					$menu_perms[] = $val['menu_id'];
 				}
 					
 				$menus_cl = Doctrine_Query::create()
 				->select('id, menu_link, parent_id, isdelete')
 				->from('Menus m')
 				->where('m.isdelete = "0"')
 				->andWhereIn("m.id", $menu_perms)
 				->andWhere('m.isdelete = 0')
 				->andWhere('m.forsuperadmin = 0')
 				->andWhere('m.menu_link LIKE "%invoice/%" or m.menu_link LIKE "%invoicenew/%"')
 				->orderBy('m.sortorder ASC');
 				$menus_cl_arr = $menus_cl->fetchArray();
 					
 				foreach($menus_cl_arr as $k_menu => $v_menu)
 				{
 					if(strlen($v_menu['menu_link']) > 0)
 					{
 						$allowed_menu_links[] = $v_menu['menu_link'];
 					}
 				}
 					
 				foreach($invoice_types as $k_invoice_type => $v_invoice_type)
 				{
 					if(in_array($k_invoice_type, $allowed_menu_links) && in_array($v_invoice_type,$invoice_types_src))
 					// 			    if(in_array($k_invoice_type, $allowed_menu_links))
 					{
 						$allowed_invoice_types[$v_invoice_type] = $this->view->translate($v_invoice_type . '_label');
 					}
 				}
 					
 				//add invoice selected in the radio of client/clientinvoicepermissions?cid=clientid
 				$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
 		
 				if (is_array($client_allowed_invoice)) {
 					foreach ($client_allowed_invoice as $v) {
 							
 						if ( ! isset($allowed_invoice_types[$v])) {
 							$allowed_invoice_types[$v] = $this->view->translate($v . '_label');
 						}
 					}
 				}
 		
 				$this->view->all_invoices_select = $allowed_invoice_types;
 				$this->view->reminders_select = array("default_warning"=>$this->view->translate("default_warning"), "first_warning"=>$this->view->translate("first_warning"), "second_warning"=>$this->view->translate("second_warning"));
 		
 		
 				$all_clients = Client::get_all_clients();
 				$all_clients_select[] = $this->view->translate('select_client');
 		
 				foreach($all_clients as $k_client => $v_client)
 				{
 					if(!in_array($v_client['id'], $excluded_clients))
 					{
 						$all_clients_select[$v_client['id']] = $v_client['client_name'];
 					}
 				}
 		
 				$this->view->all_clients_select = $all_clients_select;
 		
 				//load data
 				$template_data = RemindersInvoiceTemplates::get_reminders_template(false, $template_id, '1');
 				if($template_data)
 				{
 					$this->retain_values($template_data[0]);
 				}
 				else
 				{
 					$this->redirect(APP_BASE . 'invoicenew/listremindersinvoicetemplates?flg=inv');
 					exit;
 				}
 			}
 			else
 			{
 				$this->redirect(APP_BASE . 'invoicenew/listremindersinvoicetemplates?flg=inv');
 				exit;
 			}
 		}
 		
 		public function addreminderinvoicetemplateAction()
 		{
 			$userid = $this->userid;
 			$clientid = $this->clientid;
 		
 			$all_clients = Client::get_all_clients();
 			$all_clients_select[] = $this->view->translate('select_client');
 		
 			//get existing clients templates - exclude them from selector
 			$fdoc = Doctrine_Query::create()
 			->select('*')
 			->from('RemindersInvoiceTemplates')
 			->where("isdeleted = 0");
 			$fdoc_arr = $fdoc->fetchArray();
 		
 			//removed the exclusion when added invoice type
 			//(this is no longer unique template per client but unique template per client invoice type)
 			//			foreach($fdoc_arr as $k_tpl => $v_tpl)
 				//			{
 				//				$excluded_clients[] = $v_tpl['clientid'];
 				//			}
 		
 					foreach($all_clients as $k_client => $v_client)
 					{
 						if(!in_array($v_client['id'], $excluded_clients))
 						{
 							$all_clients_select[$v_client['id']] = $v_client['client_name'];
 						}
 					}
 		
 					if($this->getRequest()->isPost())
 					{
 						$upload_form = new Application_Form_ReminderInvoiceTemplate();
 						
 						$post = $_POST;
 						$post['clients'] = $clientid;
 						$post['sh_inv_template_filename'] = $_SESSION['sh_inv_template_filename'];
 						$post['sh_inv_template_filetype'] = $_SESSION['sh_inv_template_filetype'];
 						$post['sh_inv_template_filepath'] = $_SESSION['sh_inv_template_filepath'];
 					
 						if($upload_form->validate($post))
 						{
 							
 							$upload_form->insert_reminder_template_data($post);
 							$this->view->error_message = $this->view->translate("recordinsertsucessfully");
 							//$this->_redirect(APP_BASE . 'invoicenew/listclientinvoicetemplates?flg=suc_add');
 						}
 						else
 						{
 							$upload_form->assignErrorMessages();
 							$this->retain_values($_POST);
 						}
 		
 						$this->resetuploadvars();
 					}
 		
 					$this->view->all_clients_select = $all_clients_select;
 		
 						
 					// client setting invoices
 					$invoice_types_src = Pms_CommonData::allinvoices();
 						
 						
 					//all invoice types
 					$invoice_types = Pms_CommonData::get_invoice_types();
 						
 					//get invoices from menu permissions
 					$client_menu_perms = Doctrine_Query::create()
 					->select('*')
 					->from('MenuClient')
 					->andWhere('clientid = "' . $clientid . '"');
 					$client_menu_permssions = $client_menu_perms->fetchArray();
 						
 					$menu_perms[] = '999999999';
 					foreach($client_menu_permssions as $val)
 					{
 						$menu_perms[] = $val['menu_id'];
 					}
 						
 					$menus_cl = Doctrine_Query::create()
 					->select('id, menu_link, parent_id, isdelete')
 					->from('Menus m')
 					->where('m.isdelete = "0"')
 					->andWhereIn("m.id", $menu_perms)
 					->andWhere('m.isdelete = 0')
 					->andWhere('m.forsuperadmin = 0')
 					->andWhere('m.menu_link LIKE "%invoice/%" or m.menu_link LIKE "%invoicenew/%"')
 					->orderBy('m.sortorder ASC');
 					$menus_cl_arr = $menus_cl->fetchArray();
 						
 					foreach($menus_cl_arr as $k_menu => $v_menu)
 					{
 						if(strlen($v_menu['menu_link']) > 0)
 						{
 							$allowed_menu_links[] = $v_menu['menu_link'];
 						}
 					}
 						
 					foreach($invoice_types as $k_invoice_type => $v_invoice_type)
 					{
 						if(in_array($k_invoice_type, $allowed_menu_links) && in_array($v_invoice_type,$invoice_types_src))
 						// 			    if(in_array($k_invoice_type, $allowed_menu_links))
 						{
 							$allowed_invoice_types[$v_invoice_type] = $this->view->translate($v_invoice_type . '_label');
 						}
 					}
 						
 					//add invoice selected in the radio of client/clientinvoicepermissions?cid=clientid
 					$client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
 					if (is_array($client_allowed_invoice)) {
 						foreach ($client_allowed_invoice as $v) {
 		
 							if ( ! isset($allowed_invoice_types[$v])) {
 								$allowed_invoice_types[$v] = $this->view->translate($v . '_label');
 							}
 						}
 					}
 						
 					$this->view->all_invoices_select = $allowed_invoice_types;
 					$this->view->reminders_select = array("default_warning"=>$this->view->translate("default_warning"), "first_warning"=>$this->view->translate("first_warning"), "second_warning"=>$this->view->translate("second_warning"));
 				}
 				
 				public function deletereminderinvoicetemplateAction()
 				{
 					$logininfo = new Zend_Session_Namespace('Login_Info');
 				
 					$has_edit_permissions = Links::checkLinkActionsPermission();
 					if(!$has_edit_permissions) // if canedit = 0 - don't allow any additions or changes
 					{
 						$this->_redirect(APP_BASE . "error/previlege");
 						exit;
 					}
 				
 					if(!empty($_GET['id']))
 					{
 						$fdoc = Doctrine::getTable('RemindersInvoiceTemplates')->find($_GET['id']);
 						$fdoc->isdeleted = 1;
 						$fdoc->save();
 					}
 				
 					$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
 					$this->_redirect(APP_BASE . 'invoicenew/listremindersinvoicetemplates?flg=suc&mes='.urlencode($this->view->error_message));
 				}
		
 				public function generatereminderinvoiceAction()
 				{
 					$this->_helper->viewRenderer->setNoRender();
			         
 					$clientid = $this->clientid;
 					$userid = $this->userid;
 					
 					if($this->getRequest()->isPost())
 					{
                        /* if(isset($_REQUEST['document']) && ! empty($_REQUEST['document'])){
 						     $invoiceids = array_values($_REQUEST['document']);
                        } else{
                            $invoiceids = array($_REQUEST['invoiceids']);
                        }
                        
                        
                        if(isset($_REQUEST['warningmore_table']) && ! empty($_REQUEST['warningmore_table'])){
 						     $invoicetable = $_REQUEST['warningmore_table'];
                        } else{
                            $invoicetable = $_REQUEST['invoicetable'];
                        }
 						
                        if(isset($_REQUEST['warningmore_type']) && ! empty($_REQUEST['warningmore_type'])){
 						     $invoicewarning = $_REQUEST['warningmore_type'];
                        } else{
                            $invoicewarning = $_REQUEST['invoicewarning'];
                        } */
                        $invoiceids = array_values($_REQUEST['document']);
 						$invoicetable = $_REQUEST['warningmore_table'];
 						$invoicewarning = $_REQUEST['warningmore_type'];
 					}
 					else
 					{
 					    $params = $this->getRequest()->getParams();
 						$invoiceids = $params['invoiceids'];
 						$invoicetable = $params['invoicetable'];
 						$invoicewarning = $params['invoicewarning'];
 						
 					}
 					 
 					
 					if(!$invoiceids || $invoiceids == "")
 					{
 						if($invoicetable != "bra_invoice_new")
 						{
 							$this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
 						}
 						else
 						{
 							$this->_redirect(APP_BASE . 'invoicenew/brainvoices');
 						}
 						exit;
 					}
 					
 					$client = new Client();
 					$modules = new Modules();
 					$usergroups = new Usergroup();
 					$users = new User();
 					$rtmpl = new RemindersInvoiceTemplates;	
					$patientmaster = new PatientMaster();
					$hi_perms = new HealthInsurancePermissions();
					$phelathinsurance = new PatientHealthInsurance();
					$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
					$ppun = new PpunIpid();
					
					$template_data = $rtmpl->get_reminders_template($clientid, false, '1', false, $invoicewarning);
					//var_dump($template_data); exit;
				
					$this->view->folder_stamp = time();
					
					//used modules checks
					if($modules->checkModulePrivileges("88", $this->clientid))
					{
						$ppun_module = "1";
					}
					else
					{
						$ppun_module = "0";
					}
					
					if($modules->checkModulePrivileges("90", $this->clientid))
					{
						$debtor_number_module = "1";
					}
					else
					{
						$debtor_number_module = "0";
					}
					
					if($modules->checkModulePrivileges("91", $this->clientid))
					{
						$paycenter_module = "1";
					}
					else
					{
						$paycenter_module = "0";
					}
					
 					if($invoicetable == "sh_invoice_new" ){
 						$allowed_inv = new ShInvoices();
 						$invoicetype = 'sh_invoice';
 						$invoice_type = 'sh_invoice';
 						$oldaction=$this->getRequest()->getParam('oldaction');
 						$url_redirect = APP_BASE . 'invoicenew/'.$oldaction;
 						$no_temp_redirect = APP_BASE . 'invoicenew/shinvoices';
 						
 					} else if($invoicetable == "bayern_sapv_invoice_new")  {
 						$allowed_inv = new BayernInvoicesNew();
 						$invoicetype = 'bayern_sapv_invoice';
 						$invoice_type = 'bayern_sapv_invoice';
 						$oldaction=$this->getRequest()->getParam('oldaction');
 						$url_redirect = APP_BASE . 'invoicenew/'.$oldaction;
 						$no_temp_redirect = APP_BASE . 'invoicenew/invoicesnew';
 					} else if($invoicetable == "bayern_sapv_invoice")  {
 						$allowed_inv = new BayernInvoicesNew();
 						$invoicetype = 'bayern_sapv_invoice';
 						$invoice_type = 'bayern_sapv_invoice';
 						$oldaction=$this->getRequest()->getParam('oldaction');
 						$url_redirect = APP_BASE . 'invoicenew/'.$oldaction;
 						$no_temp_redirect = APP_BASE . 'invoicenew/invoicesnew';
 						
 					} else if($invoicetable == "bw_sapv_invoice_new")  {
 						$allowed_inv = new BwInvoicesNew();
 						$invoicetype = 'bw_sapv_invoice_new';
 						$invoice_type = 'bw_sapv_invoice_new';
 						$oldaction=$this->getRequest()->getParam('oldaction');
 						$url_redirect = APP_BASE . 'invoicenew/'.$oldaction;
 						$no_temp_redirect = APP_BASE . 'invoicenew/invoicesnew';
 						
 					} else if($invoicetable == "bw_sapv_invoice_old")  {
 						$allowed_inv = new BwInvoices();
 						$invoicetype = 'bw_sapv_invoice';
 						$invoice_type = 'bw_sapv_invoice';
 						$url_redirect = APP_BASE . 'invoice/bwinvoices';
 						$no_temp_redirect = APP_BASE . 'invoice/bwinvoices';
 						
 						
 						
 					}else if($invoicetable == "hospiz_invoice_new")  {
 						$allowed_inv = new HospizInvoices();
 						$invoicetype = 'hospiz_invoice';
 						$invoice_type = 'hospiz_invoice';
 						$oldaction=$this->getRequest()->getParam('oldaction');
 						$url_redirect = APP_BASE . 'invoicenew/'.$oldaction;
 						$no_temp_redirect = APP_BASE . 'invoicenew/invoicesnew';
 						
 					}else if($invoicetable == "rlp_invoice_new")  {
 						$allowed_inv = new RlpInvoices();
 						$invoicetype = 'rlp_invoice';
 						$invoice_type = 'rlp_invoice';
 						$oldaction=$this->getRequest()->getParam('oldaction');
 						$url_redirect = APP_BASE . 'invoicenew/'.$oldaction;
 						$no_temp_redirect = APP_BASE . 'invoicenew/invoicesnew';
 						
 						
 					}else if($invoicetable == "bra_invoice_new")  {
 						$allowed_inv = new BraInvoices();
 						$invoicetype = 'bra_invoice';
 						$invoice_type = 'bra_invoice';
 						$url_redirect = APP_BASE . 'invoicenew/brainvoices';
 						$no_temp_redirect = APP_BASE . 'invoicenew/brainvoices';
 						
 					}else if($invoicetable == "bre_sapv_invoice_old")  {
 						$allowed_inv = new BreInvoices();
 						$invoicetype = 'bre_sapv_invoice';
 						$invoice_type = 'bre_sapv_invoice';
 						$url_redirect = APP_BASE . 'invoice/breinvoices';
 						$no_temp_redirect = APP_BASE . 'invoice/breinvoices';
 						
 					}else if($invoicetable == "bre_sapv_invoice")  {
 						$allowed_inv = new BreInvoices();
 						$invoicetype = 'bre_sapv_invoice';
 						$invoice_type = 'bre_sapv_invoice';
 						$url_redirect = APP_BASE . 'invoice/breinvoices';
 						$no_temp_redirect = APP_BASE . 'invoice/breinvoices';
 						
 						
 					}else if($invoicetable == "bre_hospiz_sapv_invoice_old")  {
 						$allowed_inv = new BreHospizInvoices();
 						$invoicetype = 'bre_hospiz_sapv_invoice';
 						$invoice_type = 'bre_hospiz_sapv_invoice';
 						$url_redirect = APP_BASE . 'invoice/brehospizinvoices';
 						$no_temp_redirect = APP_BASE . 'invoice/brehospizinvoices';
 						
 						
 					}else if($invoicetable == "he_invoice_old")  {
 						$allowed_inv = new HeInvoices();
 						$invoicetype = 'he_invoice';
 						$invoice_type = 'he_invoice';
 						$url_redirect = APP_BASE . 'invoice/heinvoiceslist';
 						$no_temp_redirect = APP_BASE . 'invoice/heinvoiceslist';
 						
 						
 					}else if($invoicetable == "nie_patient_invoice_old")  {
 						$allowed_inv = new HiInvoices();
 						$invoicetype = 'nie_patient_invoice';
 						$invoice_type = 'nie_patient_invoice';
 						$url_redirect = APP_BASE . 'invoice/healthinsuranceinvoices';
 						$no_temp_redirect = APP_BASE . 'invoice/healthinsuranceinvoices';
 					//ISPC-2312 Ancuta 07.12.2020	
 					}else if($invoicetable == "nie_patient_invoice")  {
 						$allowed_inv = new HiInvoices();
 						$invoicetype = 'nie_patient_invoice';
 						$invoice_type = 'nie_patient_invoice';
 						$url_redirect = APP_BASE . 'invoice/healthinsuranceinvoices';
 						$no_temp_redirect = APP_BASE . 'invoice/healthinsuranceinvoices';
                    //-- 						
 						
 					}else if($invoicetable == "rp_invoice_old")  {
 						$allowed_inv = new RpInvoices();
 						$invoicetype = 'rp_invoice';
 						$invoice_type = 'rp_invoice';
 						$url_redirect = APP_BASE . 'invoice/rpinvoiceslist';
 						$no_temp_redirect= APP_BASE . 'invoice/rpinvoiceslist';
 						
 						
 					}else if($invoicetable == "by_invoice_old")  {
 						$allowed_inv = new ClientInvoices();
 						$invoicetype = 'by_invoice';
 						$invoice_type = 'by_invoice';
 						$url_redirect = APP_BASE . 'invoice/invoice';
 						$no_temp_redirect = APP_BASE . 'invoice/invoice';
 						
 						
 					} else{
 					    
 					    $allowed_inv = new InvoiceSystem();
 					    //$invoicetype = $invoicetable; // At the momment this is used for bre_kinder_invoice and nr invoice(ISPC-2278)
                        if(in_array($invoicetable,array("bre_kinder_invoice","nr_invoice","demstepcare_invoice"))){
     					    $invoicetype = $invoicetable; // At the momment this is used for bre_kinder_invoice
     					    $invoice_type = $invoicetable; // At the momment this is used for bre_kinder_invoice
     					    $oldaction = $this->getRequest()->getParam('oldaction');
     					    $url_redirect = APP_BASE . 'invoicenew/'.$oldaction;
     					    $no_temp_redirect = APP_BASE . 'invoicenew/invoicesnew';
                        }
 					    
 					    
 					    
 					    
 					    
 					    
 					    
 					}
 					
 					$template_data = $rtmpl->get_reminders_template($clientid, false, '1', false, $invoicewarning);
 					if(!$template_data)
 					{
 					    $this->redirect($no_temp_redirect . '?flg=notemplate');
 						exit;
 					}
 					
 					$client_usergroups_array = $usergroups->getClientGroups($clientid);
 					
 					$ug_details = array();
 					foreach($client_usergroups_array as $k=>$group_data){
 						$ug_details[$group_data['id']] = $group_data;
 					}
 					
 					//user details
 					
 					$client_user_array = $users->getUserByClientid($clientid,0,true,false);
 					
 					foreach($client_user_array as $k=>$cu)
 					{
 						$user_array[$cu['id']] = $cu;
 						$user_array[$cu['id']]['groupname'] = $ug_details[$cu['groupid']]['groupname'];
 						if(strlen($cu['shortname']) >  0){
 							$user_array[$cu['id']]['initials'] = $cu['shortname'];
 						}
 						else
 						{
 							$user_array[$cu['id']]['initials'] = mb_substr($cu['first_name'], 0, 1, "UTF-8") . "" . mb_substr($cu['last_name'], 0, 1, "UTF-8");
 					
 						}
 					} 					
 					
 					//client_details
 					$client_details = $client->getClientDataByid($clientid);
 					
 					//invoices details
 					if(!is_array($invoiceids))
 					{
 						$invoiceids_arr = explode(',', $invoiceids);
 					}
 					else 
 					{
 						$invoiceids_arr = $invoiceids;
 					}
 					
 					
 					switch ($invoicetype){
 					    case 'by_invoice':
 					        $invoices_data = $allowed_inv->get_invoices($invoiceids_arr, $clientid);
                            break;
 					    case 'bre_kinder_invoice':    
 					    case 'nr_invoice': // ISPC-2286    
                            $invoices_data = $allowed_inv->get_invoices($invoice_type, $invoiceids_arr);
             				break;
 					    case "demstepcare_invoice": // ISPC-2461 					        
                            $invoices_data = $allowed_inv->get_invoices($invoice_type, $invoiceids_arr);
             				break;
 					    default:
                            $invoices_data = $allowed_inv->get_invoices($invoiceids_arr);
                            break;
 					}
 					
 					$patients_invoice_days = array();
					foreach($invoices_data['invoices_data'] as $v_invoice)
					{
						//var_dump($v_invoice['ipid']); exit;
						$ipids[] = $v_invoice['ipid'];
						
						$current_period[$v_invoice['ipid']]['start'] = date('Y-m-d', strtotime($v_invoice['invoice_start']));
						$current_period[$v_invoice['ipid']]['end'] = date('Y-m-d', strtotime($v_invoice['invoice_end']));
			
						if(empty($current_period[$v_invoice['ipid']]['days']))
						{
							$current_period[$v_invoice['ipid']]['days'] = array();
						}
						
						if(empty($patients_invoice_days[$v_invoice['ipid']]))
						{
							$patients_invoice_days[$v_invoice['ipid']] = array();
						}
						
						$days_arr = $patientmaster->getDaysInBetween($v_invoice['invoice_start'], $v_invoice['invoice_end']);				
						$current_period[$v_invoice['ipid']]['days'] = array_merge($current_period[$v_invoice['ipid']]['days'], $days_arr);
						$patients_invoice_days[$v_invoice['ipid']] = array_merge($patients_invoice_days[$v_invoice['ipid']], $days_arr);
			
						array_walk_recursive($current_period[$v_invoice['ipid']]['days'], function(&$value) {
							$value = date("d.m.Y", strtotime($value));
						});
						array_walk_recursive($patients_invoice_days[$v_invoice['ipid']], function(&$value) {
							$value = date("d.m.Y", strtotime($value));
						});					
							
						$days_arr = array();
					}
		
					$sql = 'e.epid,  e.ipid, p.ipid, p.birthd,';
					$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
					$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
					$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
					$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
					$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
					$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

					$ipids = array_values(array_unique($ipids));
					
					$patient = Doctrine_Query::create()
					->select($sql)
					->from('PatientMaster p')
					->whereIn("p.ipid", $ipids)
					->leftJoin("p.EpidIpidMapping e")					
					->andWhere('e.clientid = ?', $clientid);
					$patients_res = $patient->fetchArray();
					
					$params['patient_days'] = array();
					foreach($patients_res as $kpat=>$vpat)
					{
						$params['patient_days'][$vpat['ipid']]['details'] = $vpat;
						$params['patient_days'][$vpat['ipid']]['details']['epid'] = $vpat['EpidIpidMapping']['epid'];
					}
					//set current period to work with
					$params['period'] = $current_period;					
					$sapv_details = $this->get_sapvs_approved_details($ipids, $current_period);
					
					//print_r($params['patient_days']); exit;
					//patient HEALTH INSURANCE START
					$healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);
					
					//multiple hi subdivisions && hi subdivisions permissions
					$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
					
					if($divisions)
					{
						foreach($healthinsu_multi_array as $k_hi => $v_hi)
						{
							$hi_companyids[] = $v_hi['companyid'];
						}
					
						$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($hi_companyids);
					}
					
					foreach($ipids as $k_ipid => $v_ipid)
					{
					
						if($divisions && strlen($healthinsu_subdiv_arr[$v_ipid]['3']['name']) > '0')
						{
							$sapv_address[$v_ipid][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['street1']);
							$sapv_address[$v_ipid][] = htmlentities($healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city']);
							$params['patient_days'][$v_ipid]['sapv_recipient'] = implode('<br />', array_values(array_unique($sapv_address[$v_ipid])));
						}
						else
						{
							$params['patient_days'][$v_ipid]['sapv_recipient'] = '';
						}
					}
						
					//patient HEALTH INSURANCE END
 				
					
					$batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $this->clientid);
					$temp_files = array();
					$reminder_db_data = array();
					
				
					foreach($invoices_data['invoices_data'] as $invoice_data)
 					{
 						$sapv_details_data[$invoice_data['ipid']] = end($sapv_details[$invoice_data['ipid']]);
 						if(strlen($invoice_data['address']) > 0 ){
 							if(strpos($invoice_data['address'],"style"))
 							{
 								$invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
 							}
 						
 							$invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
 							$invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
 							if($invoicetable != "nie_patient_invoice_old"){
     							$invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
 							}
 							
 							if( empty($invoice_data['beneficiary_address'])){
     							$invoice_data['beneficiary_address'] = $invoice_data['address']; 
 							}
 						}
 						else{
 						    if($invoicetable == "by_invoice_old"){
 						        $addr = array();
                                foreach($invoice_data['items'] as $k=>$invit){
                                    if(in_array($invit['itemLabel'],array('healthinsurancename','healthinsurancecontact','healthinsurancestreet','healthinsuranceaddress')) ){
                                        $addr[]= $invit['itemString'].' ';
                                    }
                                }
                                $invoice_data['address'] = implode("<br />",$addr);
 						    }
 						}
 						
 						$pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);
 						
 						if($pflege_arr)
 						{
 							$last_pflege = end($pflege_arr);
 							$invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
 						}
 						else
 						{
 							$invoice_data['patient_pflegestufe'] = ' - ';
 						}
		 				
		 				//client tokens
	 					if(strlen($invoice_data['client_ik']) > '0')
						{
							$tokens['client_ik'] = $invoice_data['client_ik'];
						}
						else
						{
							$tokens['client_ik'] = $client_details[0]['institutskennzeichen'];
						}
		
						//patient details tokens
						$tokens['patienten_id'] = strtoupper(html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
						$tokens['first_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
						$tokens['last_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
						$tokens['birthd'] = date('d.m.Y', strtotime($params['patient_days'][$invoice_data['ipid']]['details']['birthd']));
						$tokens['street'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
						$tokens['zip'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
						$tokens['city'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
						$tokens['patient_pflegestufe'] = html_entity_decode($invoice_data['patient_pflegestufe'], ENT_QUOTES, 'UTF-8');
						
						//health insurance tokens
						$tokens['insurance_no'] = html_entity_decode($healthinsu_multi_array[$invoice_data['ipid']]['insurance_no'], ENT_QUOTES, 'UTF-8');
// 						$tokens['address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');
 					    switch ($invoicetable)
 					    {
 					        case  "by_invoice_old" : // OK
 					        case  "rlp_invoice_new" : // OK

 					        case  "bre_sapv_invoice_old" :
 					        case  "bre_sapv_invoice" ://ISPC-2312 Ancuta 07.12.2020
 					            
 					        case  "bre_hospiz_sapv_invoice_old" :
 					        case  "he_invoice_old" :
 					        case  "nie_patient_invoice_old" :
 					        case  "nie_patient_invoice" : //ISPC-2312 Ancuta 07.12.2020 
 					        case  "rp_invoice_old" :
 					        case  "bw_sapv_invoice_old" :
 					            
 					        case  "bw_sapv_invoice_new" : //14.08.2018 
 					            $tokens['address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');
 					        break;
 					            
 					            
 					        case  "sh_invoice_new" :
 					        case  "sh_invoice" :
 					        case  "bayern_sapv_invoice_new" :
 					        case  "hospiz_invoice_new" :
 					        case  "bra_invoice_new" :
 					            $tokens['address'] = htmlentities($invoice_data['address']);
 					            
 					        break;
 					        
 					        default:
 					            $tokens['address'] = htmlentities($invoice_data['address']);
 					        break;
 					        
 					    }

 					    $tokens['beneficiary_address'] = "";
 					    $tokens['SAPV_Rechnungsempfaenger'] = html_entity_decode($params['patient_days'][[$invoice_data['ipid']]]['sapv_recipient'], ENT_QUOTES, 'UTF-8');//ISPC-1236
				
						//invoice specific tokens
						$tokens['invoiced_month'] = "";
						if(!empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
						{
							$tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
						}
		
						$tokens['invoiced_period'] = "";
						
						if(!empty($invoice_data['invoice_start']) && $invoice_data['invoice_start'] != "0000-00-00 00:00:00" && !empty($invoice_data['invoice_end']) && $invoice_data['invoice_end'] != "0000-00-00 00:00:00")
						{
							$tokens['invoiced_period'] = date('d.m.Y', strtotime($invoice_data['invoice_start'])).'-'.date('d.m.Y', strtotime($invoice_data['invoice_end']));
						}
						
						$tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
						if($invoicetype != 'by_invoice')
						{
							$tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
						}
						else 
						{
							$tokens['invoice_number'] = html_entity_decode($invoice_data['rnummer'], ENT_QUOTES, 'UTF-8');
						}
						if($invoicetype != 'by_invoice')
						{
							$tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
						}
						else 
						{
							$tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['rnummer'], ENT_QUOTES, 'UTF-8');
						}
				
						//invoice date
						if($invoicetype != 'by_invoice')
						{
							if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970")
							{
								$tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
							}
							else
							{
								$tokens['invoice_date'] = '';
							}
						}
						else 
						{
							if($invoice_data['completedDate'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completedDate'])) != "1970")
							{
								$tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completedDate']));
							}
							else
							{
								$tokens['invoice_date'] = '';
							}
						}
						//start billed action day
						if($invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_active'])) != "1970")
						{
							$tokens['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
						}
						else
						{
							$tokens['first_active_day'] = '';
						}
				
						//end billed action day
						if($invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_active'])) != "1970")
						{
							$tokens['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
						}
						else
						{
							$tokens['last_active_day'] = '';
						}
				
						//first sapv day
						if($invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_sapv'])) != "1970")
						{
							$tokens['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
						}
						else
						{
							$tokens['first_sapv_day'] = '';
						}
				
						//last sapv day
						if($invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_sapv'])) != "1970")
						{
							$tokens['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));
						}
						else
						{
							$tokens['last_sapv_day'] = '';
						}
				
						//sapv approve date
						if($invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['sapv_approve_date'])) != "1970")
						{
							$tokens['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
						}
						elseif(date('Y', strtotime($sapv_details_data[$invoice_data['ipid']]['approved_date'])) != "1970" && strlen($invoice_data['sapv_approve_date']) > '0')
						{
							$tokens['sapv_approve_date'] = $sapv_details_data[$invoice_data['ipid']]['approved_date'];
						}
						else
						{
							$tokens['sapv_approve_date'] = '';
						}
				
						if($invoice_data['sapv_approve_nr'] == "-" || strlen(trim(rtrim($invoice_data['sapv_approve_nr']))) == "0")
						{
							$tokens['sapv_approve_nr'] = html_entity_decode($invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
						}
						else
						{
							$tokens['sapv_approve_nr'] = html_entity_decode($sapv_details_data[$invoice_data['ipid']]['approved_number'], ENT_QUOTES, 'UTF-8');
						}
				
						//$tokens['footer'] = html_entity_decode($invoice_data['footer'], ENT_QUOTES, 'UTF-8');
						//$tokens['invoice_items'] = $invoice_data['items'];
			
						$tokens['unique_id'] = $invoice_data['id'];
						if($invoicetype != 'by_invoice')
						{
							$tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
						}
						else 
						{
							$tokens['invoice_total'] = number_format(($invoice_data['invoiceTotal']), '2', ',', '.');
						}
						
 						$tokens['debitoren_nummer_oder_pv'] = '';
 						$tokens['debitor_number'] = "";
 						$tokens['debtor_number'] = "";
						if($ppun_module == "1")
						{	
							
							if (array_key_exists("ppun",$invoice_data))
							{
								if(strlen($invoice_data['ppun']) > '0')
								{
									$tokens['ppun'] = $invoice_data['ppun'];
									$tokens['debitoren_nummer_oder_pv'] = $invoice_data['ppun'];
								}
								else
								{
									$tokens['ppun'] = '';
								}
							}
							else
							{
								if($healthinsu_multi_array[$invoice_data['ipid']]['privatepatient']  == "1")
								{									
									$ppun_number = $ppun->check_patient_ppun($invoice_data['ipid'], $clientid);
									if($ppun_number)
									{
										$tokens['debitor_number'] = $ppun_number['ppun'];
										$tokens['debtor_number'] = $ppun_number['ppun'];
									}
									else 
									{
										$tokens['debitor_number'] = '';
										$tokens['debtor_number'] = '';
									}
								}								
							}
						}
						
						if($debtor_number_module == "1")
						{
							if (array_key_exists("debtor_number",$invoice_data))
							{
								if(strlen($invoice_data['debtor_number']) > '0')
								{
									$tokens['debtor_number'] = $invoice_data['debtor_number'];
									$tokens['debitor_number'] = $invoice_data['debtor_number'];
									$tokens['debitoren_nummer_oder_pv'] = $invoice_data['debtor_number'];
								}
								else
								{
									$tokens['debtor_number'] = '';
									$tokens['debitor_number'] = '';
								}
							}
							else
							{
								if($healthinsu_multi_array[$invoice_data['ipid']]['privatepatient'] == "0")
								{
									if(strlen($healthinsu_multi_array[$invoice_data['ipid']]['ins_debtor_number']) > '0')
									{
										$tokens['debtor_number'] = $healthinsu_multi_array[$invoice_data['ipid']]['ins_debtor_number'];
										$tokens['debitor_number'] = $healthinsu_multi_array[$invoice_data['ipid']]['ins_debtor_number'];
									}
									else
									{
										$tokens['debtor_number'] = $healthinsu_multi_array[$invoice_data['ipid']]['company']['debtor_number'];
										$tokens['debitor_number'] = $healthinsu_multi_array[$invoice_data['ipid']]['company']['debtor_number'];
									}
								}
							}
						}
						
						
						if($paycenter_module == "1" && strlen($invoice_data['paycenter']) > '0')
						{
							$tokens['paycenter'] = $invoice_data['paycenter'];
						}
						else
						{
							$tokens['paycenter'] = '';
						}
						
						/* if($userid == "338"){
						    echo "<pre>";
                            print_R($tokens); exit;
						} */
						
						$reminder_data[] = array(
						    "clientid"=> $clientid,
						    "invoiceid"=> $invoice_data['id'],
						    "invoice_type"=> $invoicetype,
						    "reminder_type"=> $invoicewarning,
						);
						
						if($template_data){
						    // generate file
   						    
						    if(count($invoiceids_arr) == 1 && isset($params['invoiceids'])){// from individual link
						        // save warning individual warning
						        $res = new RemindersInvoice();
						        $res->clientid = $clientid;
						        $res->invoiceid = $invoice_data['id'];
						        $res->invoice_type = $invoicetype;
						        $res->reminder_type = $invoicewarning;
						        if($_REQUEST['type'])
						        {
						        	$res->reminder_doc_type = $_REQUEST['type'];
						        }
						        $res->save();
						        // generate individual pdf warning 
    						    $this->generate_reminder_file($template_data[0], $tokens);
						        
						    } else{
						        
						        // generate and save docx files form multiple invoices
       						    $temp_files[] = $this->generate_reminder_file($template_data[0], $tokens, 'docx', $batch_temp_folder, 'generate');
       						    // create array to save warnings for multiple invoices
       						    $reminder_db_data[] = array(
       						        "clientid"=> $clientid,
       						        "invoiceid"=> $invoice_data['id'],
       						        "invoice_type"=> $invoicetype,
       						        "reminder_type"=> $invoicewarning,
       						    );
						    }
 
 					      }
				    }
				    
					if(count($temp_files) > '0')
					{
					    // save warning for multiple invoices
					    if(!empty($reminder_db_data)){
					    	
					    	if($_REQUEST['warningmore_doc_type'])
					    	{
					    		foreach($reminder_db_data as &$data)
					    		{
					    			$data['reminder_doc_type'] = $_REQUEST['warningmore_doc_type'];
					    		}
					    	}
					    	
    					    $collection = new Doctrine_Collection('RemindersInvoice');
    					    $collection->fromArray($reminder_db_data);
    					    $collection->save();
					    }
					    	
					    //final cleanup (check if files are on disk)
					    foreach($temp_files as $k_temp => $v_file)
					    {
					        if(!is_file($v_file))
					        {
					            //remove unexisting files
					            //							$unsetted_files[] = $v_file; //for debugs
					            unset($temp_files[$v_file]);
					        }
					    }
					
					    $remaining_temp_files = array_values(array_unique($temp_files));
					
					    if(count($remaining_temp_files) > '0')
					    {
					    	if($_REQUEST['warningmore_doc_type'])
					    	{
					    		if($_REQUEST['warningmore_doc_type'] == 'pdf')
					    		{
					    			$final_file = $this->generate_reminder_file($template_data[0], false, 'pdf', $batch_temp_folder, 'merge', $temp_files);
					    		}
					    		else if($_REQUEST['warningmore_doc_type'] == 'docx')
					    		{
					    			$final_file = $this->generate_reminder_file($template_data[0], false, 'docx', $batch_temp_folder, 'merge', $temp_files);
					    		}
					    	}
					    	else
					    	{
					       		$final_file = $this->generate_reminder_file($template_data[0], false, 'pdf', $batch_temp_folder, 'merge', $temp_files);
					    	}
					    }
					}
					
					//ISPC-2312 Ancuta 06.12.2020
					if($_REQUEST['redirect2new'] == '1'){
					    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type='.$invoicetype);
					    exit();
					} else{
    					$this->_redirect($url_redirect);
					}
					//-- 
 				}
 				
 				

 				/*==========================*/
 				/*==========================*/
 				/*==========================*/
 				/*==========================*/
 				/*==========================*/
                // ISPC-2214
 				// and ISPC-2286 (08.12.2018 Ancuta)

 				public function fetchinvoicelistAction()
 				{
 				    $this->_helper->layout->setLayout('layout_ajax');
 				    $hidemagic = Zend_Registry::get('hidemagic');
 				
 				    //general data
 				    $patientmaster = new PatientMaster();
 				    $users = new User();
 				    $client_details = new Client();
 				    $clientid = $this->clientid;

 				    $warnings = new RemindersInvoice();
 				    $modules = new Modules();
 				    
 				    $invoices_system = new InvoiceSystem();
 				    $invoices_system_payments = new InvoiceSystemPayments();
 				    $invoices_system_items = new InvoiceSystemItems();
 				    $invoices_system_form = new Application_Form_InvoiceSystem();
 				    
 				    
 				    //get allowed client invoices
 				    if(!empty($_REQUEST['invoice_type'])){// ISPC-2312 Ancuta 06.12.2020
 				        $client_allowed_invoice = array();
 				        $invoice_type = $client_allowed_invoice[0]= $_REQUEST['invoice_type'];
 				        $this->view->invoice_type = $invoice_type;
 				    } else{
                        $client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
     				    $this->view->invoice_type = $invoice_type = $client_allowed_invoice[0];
 				    }
                    // bre_kinder_invoice || nr_invoice
 				    	
 				    if($modules->checkModulePrivileges("170", $clientid))
 				    {
 				        $this->view->create_bulk_warnings = "1";
 				    }
 				    else
 				    {
 				        $this->view->create_bulk_warnings = "0";
 				    }

 				    
 				    $limit = 50;
 				    $this->view->limit = $limit;
 				    $filters = array();
 				
 				    $storno_invoices_array = Doctrine_Query::create()
 				    ->select("*")
 				    ->from('InvoiceSystem is')
 				    ->where('client = ?', $clientid)
 				    ->andWhere('storno = 1')
 				    ->andWhere('invoice_type = ?',$invoice_type)
 				    ->andWhereIn("is.isdelete",array("0","1"))
 				    ->fetchArray();

 				    $storno_ids = array();
 				    $storno_ids_str="";
 				    foreach($storno_invoices_array as $k => $st)
 				    {
 				        $storno_ids[] = $st['record_id'];
 				        $storno_ids_str .= '"' . $st['record_id'] . '",';
 				    }
 				    
 				    if( strlen($storno_ids_str) > 0 )
 				    {
 				        $storno_ids_str = substr($storno_ids_str, 0, -1);
 				        $storno_ids_str_sql = " AND id NOT IN (" . $storno_ids_str . ")";
 				    } else{
 				        $storno_ids_str_sql = "";
 				    }

 				    // get client data
 				    $client_details = $client_details->getClientDataByid($clientid);
 				
 				    $invoice_due_days = $client_details[0]['invoice_due_days'];
 				    $plus_due_days = '+' . $invoice_due_days . ' days';
 				    $this->view->plus_due_days = $plus_due_days;
 				
 				    //process tabs
 				    $filters['invoice_system_search'] = '';
 				    switch($_REQUEST['f_status'])
 				    {
 				        case 'draft':
 				            $filters['invoice_system'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
 				            break;
 				
 				        case 'unpaid':
 				            $filters['invoice_system'] = ' AND (status = "2" OR status = "5")  AND storno = 0 '.$storno_ids_str_sql.' AND isdelete = 0 AND isarchived ="0"';
 				
 				            break;
 				
 				        case 'paid':
 				            $filters['invoice_system'] = ' AND status="3"  AND storno = 0  '.$storno_ids_str_sql.'  AND isdelete=0 AND isarchived ="0"';
 				            break;
 				
 				        case 'deleted':
 				            $filters['invoice_system'] = ' AND (status="4" OR isdelete="1") AND isarchived ="0"';
 				            break;
 				
 				        case 'overdue':
 				            $filters['invoice_system'] = ' AND (status = "2" OR status = "5")  AND storno = 0 '.$storno_ids_str_sql.'   AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
 				            break;
 				
 				        case 'all':
 				            $filters['invoice_system'] = ' AND isarchived ="0"';
 				            break;
 				        case 'archived':
 				            $filters['invoice_system'] = ' AND isarchived ="1" AND isdelete=0';
 				            break;
 				
 				        default: // unpaid- open
 				            $filters['invoice_system'] = ' AND (status = "2" OR status = "5")   AND storno = 0 '.$storno_ids_str_sql.'  AND isdelete = 0 AND isarchived ="0"';
 				            break;
 				    }
 				
 				    if(!empty($_REQUEST['last_name']))
 				    {
 				        $filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
 				    }
 				
 				    if(!empty($_REQUEST['first_name']))
 				    {
 				        $filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
 				    }
 				
 				    if(!empty($_REQUEST['epid']))
 				    {
 				        $filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
 				    }
 				
 				    if(!empty($_REQUEST['rnummer']))
 				    {
 				        $filters['invoice_system'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
 				        $filters['invoice_system_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
 				    }
 				    if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
 				    {
 				        $filters['invoice_system'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
 				        $filters['invoice_system_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
 				    }
 				
 				    //get invoice patients
 				    $sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
 				    $sql .= "CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)  as firstname,";
 				    $sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
 				    $sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
 				    $sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
 				    $sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
 				
 				    // if super admin check if patient is visible or not
 				    if($this->usertype == 'SA')
 				    {
 				        $sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
 				        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
 				        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
 				        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
 				        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
 				        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
 				    }
 				
 				    
 				    $f_patients_ipids = array();
 				    if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
 				    {
 				        //filter patients name/surname/epid
 				        $f_patient = Doctrine_Query::create()
 				        ->select($sql)
 				        ->from('PatientMaster p')
 				        ->where("p.isdelete =0")
 				        ->leftJoin("p.EpidIpidMapping e")
 				        ->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);
 				        $f_patients_res = $f_patient->fetchArray();
 				
 				        foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
 				        {
 				            $f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
 				        }
 				    }
 				
 				    //all invoices for counting
 				    $invoices_counting = Doctrine_Query::create()
 				    ->select("*")
 				    ->from('InvoiceSystem is')
 				    ->where("invoice_type= ? ",$invoice_type)
 				    ->andWhere("client= ? ",$clientid)
 				    ->andWhere(" 1 " . $filters['invoice_system_search']);
 				    if( (!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name'])) && ! empty($f_patients_ipids))
 				    {
 				        $invoices_counting->andWhereIn('ipid', $f_patients_ipids);
 				    }
 				    $inv2count = $invoices_counting->fetchArray();
 				
 				    
 				    $count_invoices = array();
 				    $status_count_invoices = array();
 				    foreach($inv2count as $k_inv2count => $v_inv2count)
 				    {
 				
 				        $count_invoices[$v_inv2count['status']][] = '1';
 				
 				        if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
 				        {
 				            $status_count_invoices["draft"][] = '1';
 				        }
 				
 				        if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
 				        {
 				            $status_count_invoices["unpaid"][] = '1';
 				        }
 				
 				        if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
 				        {
 				            $status_count_invoices["paid"][] = '1';
 				        }
 				
 				        if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
 				        {
 				            $status_count_invoices["deleted"][] = '1';
 				        }
 				
 				        if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
 				        {
 				            $status_count_invoices["overdue"][] = '1';
 				        }
 				
 				        if($v_inv2count['isarchived'] == "0")
 				        {
 				            $status_count_invoices["all"][] = '1';
 				        }
 				
 				        if($v_inv2count['isarchived'] == "1")
 				        {
 				            $status_count_invoices["archived"][] = '1';
 				        }
 				    }
 				    
 				    //deleted_invoices
 				    $del_inv2count = Doctrine_Query::create()
 				    ->select("*")
 				    ->from('InvoiceSystem is')
 				    ->where("invoice_type = ? ", $invoice_type)
 				    ->andWhere("client = ? ", $clientid )
 				    ->andWhere(" 1 " . $filters['invoice_system'])
 				    ->andWhere("is.isdelete=1 or status=4");
 				    if((!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name'])) && !empty($f_patients_ipids))
 				    {
 				        $del_inv2count->andWhereIn('ipid', $f_patients_ipids);
 				    }
 				    
 				    $del_inv2count->fetchArray();
 				    
 				    
 				    foreach($del_inv2count as $k_del_inv => $v_del_inv)
 				    {
 				        $counted_del_inv[$v_del_inv['status']][] = '1';
 				    }
 				
 				    
 				    
 				    
 				    //filter invoices status/invoice_number/amount
 				    $invoices_nl = Doctrine_Query::create()
 				    ->select("*")
 				    ->from('InvoiceSystem')
 				    ->where("invoice_type = ? ", $invoice_type)
 				    ->andWhere("client = ? ", $clientid )
 				    ->andWhere(" 1 " . $filters['invoice_system'])
 				    ->andWhereIn("isdelete",array("0","1"));
 				    if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
 				    {
 				        $invoices_nl->andWhereIn('ipid', $f_patients_ipids);
 				    }
 				    $invoices_no_limit = $invoices_nl->fetchArray();
 				
 				    foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
 				    {
 				        $invoice_ipids[] = $v_nl_inv['ipid'];
 				    }
 				
 				    $patient = Doctrine_Query::create()
 				    ->select($sql)
 				    ->from('PatientMaster p')
 				    ->leftJoin("p.EpidIpidMapping e")
 				    ->where('e.clientid = ?', $clientid);
 				    if((!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name'])) && ! empty($f_patients_ipids))
 				    {
 				        $patient->andWhereIn('p.ipid', $f_patients_ipids);
 				    }
 				    $patients_res = $patient->fetchArray();
 				
 				    if($patients_res)
 				    {
 				        foreach($patients_res as $k_pat => $v_pat)
 				        {
 				            $patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
 				        }
 				    }
 				
 				    if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
 				    {
 				        $current_page = $_REQUEST['page'];
 				    }
 				    else
 				    {
 				        $current_page = 1;
 				    }
 				
 				    if($_REQUEST['sort'] == 'asc')
 				    {
 				        $sort = 'asc';
 				    }
 				    else
 				    {
 				        $sort = 'desc';
 				    }
 				
 				    switch($_REQUEST['ord'])
 				    {
 				
 				        case 'id':
 				            $orderby = 'id ' . $sort;
 				            break;
 				
 				        case 'ln':
 				            $orderby = 'epid ' . $sort;
 				            break;
 				
 				        case 'nr':
 				            //$orderby = 'invoice_number ' . $sort;
 				            $orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
 				            break;
 				
 				        case 'date':
 				            $orderby = 'change_date, create_date ' . $sort;
 				            break;
 				
 				        case 'amnt':
 				            $orderby = 'invoice_total ' . $sort;
 				            break;
 				        case 'invoice_date':
 				            $orderby = 'completed_date_sort ' . $sort;
 				            break;
 				
 				        default:
                            //InvoiceSystem
 				            //$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [NEW]
 				            $orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
 				            break;
 				    }
 				
                    if(!empty($invoice_ipids)){
     				    $invoices = Doctrine_Query::create()
     				    ->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
     				    ->from('InvoiceSystem')
     				    ->where("client= ?",$clientid)
     				    ->andWhere("1 " . $filters['invoice_system'])
     				    ->andwhere('invoice_type = ?', $invoice_type)
     				    ->andwhereIn('ipid', $invoice_ipids);
     				    $invoices->orderby($orderby);
     				    $invoices->offset(($current_page - 1) * $limit);
     				    $invoices->limit($limit);
     				    $invoicelimit = $invoices->fetchArray();
 				     }
 				
//  				     //TODO-3715 Ancuta 05.04.2021
//  				     if(empty($_REQUEST['ord'])){
//  				         $invoicelimit = $this->array_sort($invoicelimit, 'full_invoice_number_sort', SORT_DESC);
//  				     }
//  				     elseif($_REQUEST['ord'] == 'nr'){
 				         
//      				     if($_REQUEST['sort'] == 'asc')
//      				     {
//      				         $invoicelimit = $this->array_sort($invoicelimit, 'full_invoice_number_sort', SORT_ASC);
//      				     }
//      				     else
//      				     {
//      				         $invoicelimit = $this->array_sort($invoicelimit, 'full_invoice_number_sort', SORT_DESC);
//      				     }
//  				     }
//  				     //-- 
 				     
 				     
 				     
 				    $invoice_uids[] = '9999999999';
 				    foreach($invoicelimit as $k_il => $v_il)
 				    {
 				        $invoice_ids[] = $v_il['id'];
 				        $invoice_uids[] = $v_il['create_user'];
 				        $invoice_uids[] = $v_il['change_user'];
 				    }
 				
 				
 				    //count tabs contents
 				    $invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');
 				
 				    $counted = array();
 				    foreach($invoice_tabs as $tab)
 				    {
 				        $counted[$tab] += count($status_count_invoices[$tab]);
 				    }
 				
 				    $invoice_uids = array_values(array_unique($invoice_uids));
 				    $users_details = $users->getMultipleUserDetails($invoice_uids);
 				
 				
 				    $invoice_payments = $invoices_system_payments->getInvoicesPaymentsSum($invoice_type, $invoice_ids);
 				
 				    $no_invoices = sizeof($invoices_no_limit);
 				    $no_pages = ceil($no_invoices / $limit);
 				    	
 				    $all_warnings = $warnings->get_reminders($invoice_ids, $invoice_type, $clientid);
 				    	
 				    foreach ($invoicelimit as &$row) {
 				        if (isset($all_warnings[$row['id']])) {
 				            $row['InvoiceWarnings'] = $all_warnings[$row['id']];
 				        }
 				    }
 				
 				    
 				    
 				    /*
 				     * TODO:
 				     * - group ipids by start_active->end_active 
 				     * - and fetch visit_number in batches of ipids, in a fn __get_patientSSSS_visit_number
 				     */
 				    foreach ($invoicelimit as &$one_invoice) {
 				        if($one_invoice['status'] == '2') {
     				        $pv = $this->__get_patient_visit_number($one_invoice['ipid'], $one_invoice['start_active'], $one_invoice['end_active']);
     				        if ( ! empty($pv['visit_number']))				       
     				           $one_invoice['__patient_PV1_VisitNumber'] = $pv['visit_number'];
 				        }
 				    }
 				    
			        //find if hl7-ft1 was sent for any of them ... we could filter by invoice.status=2 cause we only display on those invoices`
 				    $Hl7_TransmitedInvoices = [];
			        $Hl7_transmited = Hl7MessagesSentTable::getInstance()->findTransmitedInvoices('InvoiceSystem', array_column($invoicelimit, 'id'));
			        //leave like this and not indexBy cause we may change to have multiple
                    array_walk($Hl7_transmited, function($item) use(&$Hl7_TransmitedInvoices){$Hl7_TransmitedInvoices[$item['parent_table_id']] = $item;});
			        
                    $this->view->Hl7_TransmitedInvoices = $Hl7_TransmitedInvoices;
 				    
                    
                    //ISPC-2459 Ancuta 26.11.2019
                    $this->view->allow_hl7_activation = 0 ; //Ancuta 12.05.2020
                    $activation_approved = 0;
                    
                    if($this->userid == "338" || $this->userid == "293" ){
                        $activation_approved = 1;
                    }
                    // get data foreach invoice - check movement numbers 
                    if ($activation_approved == 1 && !empty($invoicelimit)){

                        $this->view->allow_hl7_activation = 1 ; //Ancuta 12.05.2020
                        
                        $hl7_movementNrs_check= $this->__invoicesnew_hl7_check_movementNumbers($invoicelimit);
                        
                        foreach ($invoicelimit as &$one_invoice) {
                            $no_movement_days = $hl7_movementNrs_check['data'][$one_invoice['ipid']][$one_invoice['id']]['no_movementNr_days'];
                            if ( ! empty($no_movement_days)){
                                $one_invoice['__invoice_NO_movement_numbers'] = implode(", ",$no_movement_days);
                            }
                        }
                    }
                    //-- 
                    
 				    $this->view->storned_invoces = InvoiceSystem::get_storned_invoices($invoice_type,$clientid);
 				
 				    $this->view->invoicelist = $invoicelimit;
 				    $this->view->user_details = $users_details;
 				    $this->view->patient_details = $patient_details;
 				    $this->view->invoice_payments = $invoice_payments;
 				    $this->view->current_page = $current_page;
 				    $this->view->no_pages = $no_pages;
 				    $this->view->no_invoices = $no_invoices;
 				    $this->view->orderby = $_REQUEST['ord'];
 				    $this->view->sort = $_REQUEST['sort'];
 				    $this->view->counted = $counted;
 				}
 				
 				
 				public function listpaymentsAction()
 				{
 				
 				    $this->_helper->viewRenderer->setNoRender();
 				    $clientid = $this->clientid;
 				    $invoices_system = new InvoiceSystem();
 				    $invoices_system_payments = new InvoiceSystemPayments();
 				    $invoices_system_form = new Application_Form_InvoiceSystem();
 				
 				    $user = new User();
 				
 				
 				    //get allowed client invoices
 				    $client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
 				    $invoice_type = $client_allowed_invoice[0];
 				    
 				
 				    if($_REQUEST['invoiceid'])
 				    {
 				        $payments = $invoices_system_payments->getInvoicePayments($invoice_type, $_REQUEST['invoiceid']);
 				
 				        $users[] = '999999999999';
 				        foreach($payments as $k_payment => $v_payment)
 				        {
 				            $users[] = $v_payment['create_user'];
 				        }
 				
 				        $users_list = $user->getMultipleUserDetails($users);
 				
 				        foreach($users_list as $k_user => $v_user)
 				        {
 				            $users_list_details[$v_user['id']] = $v_user;
 				        }
 				
 				        if($_REQUEST['op'] == 'del')
 				        {
 				            if(count($payments) == 1)
 				            {
 				                $next = '0';
 				            }
 				            else
 				            {
 				                $next = '1';
 				            }
 				
 				
 				            $del_payment = $invoices_system_payments->delete_invoice_payment($invoice_type,$_REQUEST['paymentid']);
 				
 				            //update invoice status when deleting an payment
 				            if($del_payment)
 				            {
 				                $invoice_payments_sum = $invoices_system_payments->getInvoicesPaymentsSum($invoice_type,array($_REQUEST['invoiceid']));
 				                $invoice_details = $invoices_system->get_invoice($invoice_type,$_REQUEST['invoiceid']);
 				
 				                if($invoice_payments_sum)
 				                {
 				                    if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
 				                    {
 				                        $status = '3'; //paid
 				                    }
 				                    else
 				                    {
 				                        $status = '5'; //not paid/partial paid
 				                    }
 				                }
 				                else
 				                {
 				                    //no payments => draft
 				                    $status = '2';
 				                }
 				                $update_status = $invoices_system_form->ToggleStatusInvoices($invoice_type,array($_REQUEST['invoiceid']), $status);
 				            }
 				
 				            //reload the payments
 				            unset($payments);
 				            $payments = $invoices_system_payments->getInvoicePayments($invoice_type,$_REQUEST['invoiceid']);
 				        }
 				
 				        $this->view->payments = $payments;
 				        $this->view->users_list = $users_list_details;
 				        $payments_list = $this->view->render('invoicenew/listpayments.html');
 				        echo $payments_list;
 				
 				        exit;
 				    }
 				    else
 				    {
 				        exit;
 				    }
 				}
 				
 				public function editinvoiceAction()
 				{
 				    $clientid = $this->clientid;
 				    $patientmaster = new PatientMaster();
 				    $client_details = new Client();
 				    
 				    //get allowed client invoices
 				    $client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
 				    $invoice_type = $client_allowed_invoice[0];
 				    $this->view->invoice_type = $invoice_type;
 				    
 				    if(!empty($_REQUEST['invoice_type'])) {
 				        $invoice_type = $_REQUEST['invoice_type'];
 				    } else{
 				        $invoice_type = $client_allowed_invoice[0];
 				    }
 				    
 				    
 				    if(empty($invoice_type)){
 				        //ISPC-2312 Ancuta 07.12.2020
 				        if($_REQUEST['redirect2new'] == '1'){
 				            $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type='.$invoice_type);
 				            exit();
 				        }
 				        //--
 				        $this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
 				        exit;
 				    }
 				    
 				    $invoices_system = new InvoiceSystem();
 				    $invoices_system_items = new InvoiceSystemItems();
 				    $invoices_system_form = new Application_Form_InvoiceSystem();
 				    	
 				    
 				    $hi_perms = new HealthInsurancePermissions();
 				    $pflege = new PatientMaintainanceStage();
 				    $phelathinsurance = new PatientHealthInsurance();
 				    $healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
 				    $boxes = new LettersTextBoxes();
 				    $letter_boxes_details = $boxes->client_letter_boxes($clientid);
 				    $this->view->hide_patient_tab = '1';
 				
 				    //ISPC-2461 Ancuta
 				    $dsc_invoice_products = $invoices_system->invoice_products($invoice_type);
 				    $sp_products = DemstepcareProductsTable::findPruductsByClient($this->clientid);
 				    
 				    $client_products_arr = array();
 				    foreach($sp_products as $k=>$product_details){
 				        if(in_array($product_details['shortcut'],$dsc_invoice_products)){
 				            $products[$product_details['shortcut']] = $product_details['product_name'];
 				    
 				            $actionslist_by_id_arr [$product_details['shortcut']]['action_name'] = $product_details['product_name'];
 				            $client_products_arr[$product_details['shortcut']] = $product_details['product_name'];
 				        }
 				    }
 				    $this->view->client_products_arr = $client_products_arr;
 				    // -- 
 				    
 				    if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
 				    {
 				        //here get the invoice details
 				        $invoice_id = $_REQUEST['invoiceid'];
 				        $invoice_data = $invoices_system->getInvoices($invoice_type,$invoice_id,false,true);
 				    }
 				
 				    if(in_array($invoice_data['id'], InvoiceSystem::get_storned_invoices($invoice_type,$clientid)))
 				    {
 				        $this->view->has_storno = '1';
 				    }
 				    else
 				    {
 				        $this->view->has_storno = '0';
 				    }
 				
 				    if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
 				    {
 				        $status = '0';
 				        if(!empty($_POST['completed']))
 				        {
 				            $status = '2'; //unpaid
 				        }
 				        else if(!empty($_REQUEST['edit_invoice']))
 				        {
 				            $status = '1'; //draft
 				        }
 				        else if($_POST['deletemore'] == "1")
 				        {
 				            $status = '4'; //deleted
 				        }
 				        else if(!empty($_REQUEST['pdf']))
 				        {
 				            $status = '0'; //no change
 				        }
 				        else if(!empty($_REQUEST['users_invoice']))
 				        {
 				            $status = '0'; //no change
 				        }
 				
 				        if(!empty($_POST['paid']))
 				        {
 				            //mark as paid
 				            $invoice_pay_data['invoiceId'] = $_REQUEST['invoiceid'];
 				            $invoice_pay_data['paymentAmount'] = '0.00';
 				            $invoice_pay_data['paymentComment'] = "";
 				            $invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
 				            $invoice_pay_data['mark_as_paid'] = "1";
 				
 				            $new_payment = $invoices_system_form->submit_payment($invoice_type, $invoice_pay_data);
 				
 				            
 				            //ISPC-2312 Ancuta 07.12.2020
 				            if($_REQUEST['redirect2new'] == '1'){
 				                $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type='.$invoice_type);
 				                exit();
 				            }
 				            //--
 				            $this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
 				            exit;
 				        }
 				
 				        if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
 				        {
 				            $high_invoice_nr = $invoices_system->get_next_invoice_number($invoice_type, $clientid);

 				            $_POST['prefix'] = $high_invoice_nr['prefix'];
 				            $_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
 				        }
 				        else
 				        {
 				            $_POST['prefix'] = $invoice_data['prefix'];
 				            $_POST['invoice_number'] = $invoice_data['invoice_number'];
 				        }
 				        //save/edit invoice here
 				
 				        if(strlen($_POST['invoice']['address']) > 0 ){
 				            if(strpos($_POST['invoice']['address'],"style"))
 				            {
 				                $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
 				            }
 				            $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
 				            $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
 				            $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
 				        }
 				        	
 				
 				        $edit_invoice = $invoices_system_form->edit_invoice($invoice_type, $_REQUEST['invoiceid'], $clientid, $_POST, $status);
 				
 				
 				        //redirect to invoices list
 				        if(empty($_POST['pdf']))
 				        {
 				            if($edit_invoice)
 				            {
 				
 				                //ISPC-2312 Ancuta 07.12.2020
 				                if($_REQUEST['redirect2new'] == '1'){
 				                    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type='.$invoice_type);
 				                    exit();
 				                }
 				                //--
 				                $this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edtsuc');
 				            }
 				            else
 				            {
 				                //ISPC-2312 Ancuta 07.12.2020
 				                if($_REQUEST['redirect2new'] == '1'){
 				                    $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type='.$invoice_type);
 				                    exit();
 				                }
 				                //--
 				                $this->_redirect(APP_BASE . 'invoicenew/invoicesnew?flg=edterr');
 				            }
 				        }
 				        elseif($_POST['pdf'])
 				        {
 				            foreach($_POST['custom'] as $k_item => $v_custom)
 				            {
 				                $new_invoice_items[] = array(
 				                    'shortcut' => $_POST['shortcut'][$k_item],
 				                    'description' => $_POST['description'][$k_item],
 				                    'location_type' => $_POST['location_type'][$k_item],
 				                    'qty' => $_POST['qty'][$k_item],
 				                    'price' => Pms_CommonData::str2num($_POST['price'][$k_item]),
 				                    'total' => Pms_CommonData::str2num($_POST['total'][$k_item]),
 				                    'custom' => $v_custom,
 				                );
 				            }
 				            $params['ipids'] = array($invoice_data['ipid']);
 				
 				            //patient days
 				            $conditions['client'] = $this->clientid;
 				            $conditions['ipids'] = array($invoice_data['ipid']);
 				            $conditions['periods'][0]['start'] = '2009-01-01';
 				            $conditions['periods'][0]['end'] = date('Y-m-d');
 				
 				            $sql = 'e.epid, p.ipid, e.ipid,';
 				            $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
 				            $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
 				            $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
 				            $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
 				            $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
 				            $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
 				
 				            //be aware of date d.m.Y format here
 				            $patient_days = Pms_CommonData::patients_days($conditions, $sql);
 				
 				            $params['invoices'] = array($invoice_data['id']);
 				            $params['invoice_type'] = $invoice_type;
 				            $params['patient_days'] = $patient_days;
 				            $params['get_pdf'] = '1';
 				            $params['only_pdf'] = 1;
 				            $_REQUEST['type'] = 'pdf';
 				
 				            $params['custom_data']['address'] = $_POST['invoice']['address'];
 				            $params['custom_data']['footer'] = $_POST['footer'];
 				            $params['custom_data']['items'] = $new_invoice_items;
 				
 				            $this->generate_systeminvoice($params);
 				            exit;
 				        }
 				    }
 				
 				    if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
 				    {
 				        if(!$invoice_data || empty($invoice_data))
 				        {
 				            //ISPC-2312 Ancuta 07.12.2020
 				            if($_REQUEST['redirect2new'] == '1'){
 				                $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type='.$invoice_type);
 				                exit();
 				            }
 				            //--
 				            $this->_redirect(APP_BASE . 'invoicenew/invoicesnew');
 				        }
 				
 				        $patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
 				        $client_detail = $client_details->getClientDataByid($invoice_data['client']);
 				        $this->view->client_ik = $client_detail[0]['institutskennzeichen'];
 				
 				        //health insurance
 				        $divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
 				        $hi_perms_divisions = $divisions;
 				
 				        //health insurance
 				        $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
 				        $this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
 				        $this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
 				        $this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
 				
 				        if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
 				        {
 				            $helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
 				            $healtharray = $helathins->toArray();
 				
 				            if(empty($healthinsu_array[0]['name']))
 				            {
 				                $healthinsu_array[0]['name'] = $healtharray['name'];
 				            }
 				            if(empty($healthinsu_array[0]['ins_street']))
 				            {
 				                $healthinsu_array[0]['ins_street'] = $healtharray['street1'];
 				            }
 				            if(empty($healthinsu_array[0]['ins_zip']))
 				            {
 				                $healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
 				            }
 				
 				            if(empty($healthinsu_array[0]['ins_city']))
 				            {
 				                $healthinsu_array[0]['ins_city'] = $healtharray['city'];
 				            }
 				
 				            if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
 				            {
 				                $this->view->health_insurance_ik = $healtharray['iknumber'];
 				            }
 				
 				            if(strlen($healthinsu_array[0]['kvk_no']) == 0)
 				            {
 				                $this->view->health_insurance_kassenr = $healtharray['kvnumber'];
 				            }
 				        }
 				
 				
 				        if($hi_perms_divisions)
 				        {
 				            $healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
 				        }
 				
 				        $pathealthinsurancenr = "";
 				        if(count($healthinsu_array[0]))
 				        {
 				            $phi_details = $healthinsu_array[0]['name'];
 				        }
 				        else
 				        {
 				            $phi_details = "--";
 				        }
 				
 				        $phi_details_sub = $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];
 				
 				        $this->view->health_insurance = $phi_details;
 				        $this->view->hi_subdiv_address = $phi_details_sub;
 				
 				
 				        //pflege
 				        //get pflegestuffe in current invoice period
 				        $pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);
 				
 				        if($pflege_arr)
 				        {
 				            $last_pflege = end($pflege_arr);
 				            $this->view->patient_pflegestufe = $last_pflege['stage'];
 				        }
 				        else
 				        {
 				            $this->view->patient_pflegestufe = ' - ';
 				        }
 				
 				        if(strlen($invoice_data['address']) == 0)
 				        {
 				            $invoice_data['address'] = $phi_details_sub;
 				        }
 				
 				
 				        $this->view->invoice_data = $invoice_data;
 				        $this->view->patient_details = $patient_details;
 				        $this->view->client_details = $client_detail[0];
 				    }
 				    else
 				    {
 				        //redirect if no invoiceid is present
 				        $this->_redirect(APP_BASE . "error/previlege");
 				    }
 				}
 					
 				

 				//used when generating invoices by link (one at a time normal || storno)
 				public function systeminvoiceAction()
 				{
 				    $this->_helper->viewRenderer->setNoRender(true);
 				    
 				    if(!empty($_REQUEST['patient']))
 				    {
 				        $ipid = Pms_CommonData::get_ipid_from_epid($_REQUEST['patient'], $this->clientid);
 				
 				
 				        //patient days
 				        $conditions['client'] = $this->clientid;
 				        $conditions['ipids'] = array($ipid);
 				        $conditions['periods'][0]['start'] = '2009-01-01';
 				        $conditions['periods'][0]['end'] = date('Y-m-d');
 				
 				        $sql = 'e.epid, p.ipid, e.ipid,';
 				        $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
 				        $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
 				        $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
 				        $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
 				        $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
 				        $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
 				
 				        //beware of date d.m.Y format here
 				        $patient_days = Pms_CommonData::patients_days($conditions, $sql);
 				
 				        if($_REQUEST['sapvid'])
 				        {
 				            $selected_sapv_falls = array($ipid => $_REQUEST['sapvid']);
 				
 				            //get patients sapvs last fall
 				            $patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid), true);
 				
 				            foreach($selected_sapv_falls as $k_ipid => $fall_id)
 				            {
 				                $patients_sapv[$k_ipid] = $fall_id;
 				                $patients_selected_periods[$k_ipid] = $patients_sapv_periods[$k_ipid][$fall_id];
 				            }
 				
 				            $params['nosapvperiod'][$ipid] = '0';
 				            $params['period'] = $patients_selected_periods;
 				        }
 				        else if(!empty($_REQUEST['list']))
 				        {
 				            //construct curent month period days
 				            $selected_month = $_REQUEST['list'];
 				            if(!function_exists('cal_days_in_month'))
 				            {
 				                $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
 				            }
 				            else
 				            {
 				                $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
 				            }
 				
 				            $months_details[$selected_month]['start'] = $selected_month . "-01";
 				            $months_details[$selected_month]['days_in_month'] = $month_days;
 				            $months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
 				            $month_days_arr = PatientMaster::getDaysInBetween($selected_month . "-01", $selected_month . "-" . $month_days);
 				
 				            array_walk($month_days_arr, function(&$value) {
 				                $value = date("d.m.Y", strtotime($value));
 				            });
 				            $months_details[$selected_month]['days'] = $month_days_arr;
 				
 				            //get sapv periods in curent month period and make days
 				            if($months_details)
 				            {
 				                //						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
 				                $sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
 				
 				                $patients_selected_periods = array();
 				                foreach($sapv_array as $k_sapv => $v_sapv)
 				                {
 				                    $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
 				
 				                    if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
 				                    {
 				                        $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
 				                    }
 				                    else
 				                    {
 				                        $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
 				                    }
 				
 				                    if(empty($patients_selected_periods))
 				                    {
 				                        $patients_selected_periods = array();
 				                    }
 				
 				                    $patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
 				                    array_walk($patients_selected_periods, function(&$value) {
 				                        $value = date("d.m.Y", strtotime($value));
 				                    });
 				                    $patients_selected_periods = array_values(array_unique($patients_selected_periods));
 				                    $existing_sapv_days = $patients_selected_periods;
 				                }
 				
 				                $patients_selected_periods = array_values(array_unique($patients_selected_periods));
 				                $sapv_days_in_period = array_intersect($month_days_arr, $patients_selected_periods);
 				            }
 				
 				            $params['nosapvperiod'][$ipid] = '1';
 				            $params['selected_period'][$ipid] = $months_details[$selected_month];
 				            $params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
 				            $params['existing_sapv_days'] = array_values($patients_selected_periods);
 				            $params['period'][$ipid] = $months_details[$selected_month];
 				        }
 				        else if(!empty($_REQUEST['admission']))
 				        {
 				            $selected_period = $_REQUEST['admission'];
 				            $admission_start = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['start'];
 				            $admission_end = $patient_days[$ipid]['active_periods'][$_REQUEST['admission']]['end'];
 				
 				            $period_days_arr = PatientMaster::getDaysInBetween($admission_start, $admission_end);
 				
 				            array_walk($period_days_arr, function(&$value) {
 				                $value = date("d.m.Y", strtotime($value));
 				            });
 				            $period_details[$selected_period]['start'] = $admission_start;
 				            $period_details[$selected_period]['end'] = $admission_end;
 				            $period_details[$selected_period]['days'] = $period_days_arr;
 				
 				            //get sapv periods in curent month period and make days
 				            if($period_details[$selected_period])
 				            {
 				                //						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_period]['start'], $months_details[$selected_period]['end']);
 				                $sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $period_details[$selected_period]['start'], $period_details[$selected_period]['end']);
 				
 				                $patients_selected_periods = array();
 				                foreach($sapv_array as $k_sapv => $v_sapv)
 				                {
 				                    $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
 				
 				                    if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
 				                    {
 				                        $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
 				                    }
 				                    else
 				                    {
 				                        $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
 				                    }
 				
 				                    if(empty($patients_selected_periods))
 				                    {
 				                        $patients_selected_periods = array();
 				                    }
 				
 				                    $patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
 				                    array_walk($patients_selected_periods, function(&$value) {
 				                        $value = date("d.m.Y", strtotime($value));
 				                    });
 				                    $patients_selected_periods = array_values(array_unique($patients_selected_periods));
 				                    $existing_sapv_days = $patients_selected_periods;
 				                }
 				
 				                $patients_selected_periods = array_values(array_unique($patients_selected_periods));
 				                $sapv_days_in_period = array_intersect($period_days_arr, $patients_selected_periods);
 				            }
 				
 				            $params['nosapvperiod'][$ipid] = '1';
 				            $params['admissionid'][$ipid] = $selected_period;
 				            $params['selected_period'][$ipid] = $period_details[$selected_period];
 				            $params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
 				            $params['existing_sapv_days'] = array_values($patients_selected_periods);
 				            $params['period'][$ipid] = $period_details[$selected_period];
 				        }
 				        //ISPC-2461 Ancuta 16.11.2019
 				        else if(!empty($_REQUEST['quarter']))
 				        {
 				            $selected_period = $_REQUEST['quarter'];
 				            $post_q = $_REQUEST['quarter'];
 				            $post_q_arr = explode("/",$post_q);
 				            $q_no = (int)$post_q_arr[0];
 				            $q_year = (int)$post_q_arr[1];
 				            
 				            
 				            $q_per = Pms_CommonData::get_dates_of_quarter($q_no,$q_year,'Y-m-d');
 				            $quarter_start = $q_per['start'];
 				            $quarter_end = $q_per['end'];
 				
 				            $period_days_arr = PatientMaster::getDaysInBetween($quarter_start, $quarter_end);
 				
 				            array_walk($period_days_arr, function(&$value) {
 				                $value = date("d.m.Y", strtotime($value));
 				            });
 				            $period_details[$selected_period]['start'] = $quarter_start;
 				            $period_details[$selected_period]['end'] = $quarter_end;
 				            $period_details[$selected_period]['days'] = $period_days_arr;
 				
 				            //get sapv periods in curent month period and make days
 				            if($period_details[$selected_period])
 				            {
 				                //						$sapv_array = SapvVerordnung::getSapvInPeriod($ipid, $months_details[$selected_period]['start'], $months_details[$selected_period]['end']);
 				                $sapv_array = SapvVerordnung::get_sapvs_in_period(array($ipid), $period_details[$selected_period]['start'], $period_details[$selected_period]['end']);
 				
 				                $patients_selected_periods = array();
 				                foreach($sapv_array as $k_sapv => $v_sapv)
 				                {
 				                    $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
 				
 				                    if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
 				                    {
 				                        $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
 				                    }
 				                    else
 				                    {
 				                        $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
 				                    }
 				
 				                    if(empty($patients_selected_periods))
 				                    {
 				                        $patients_selected_periods = array();
 				                    }
 				
 				                    $patients_selected_periods = array_merge($patients_selected_periods, PatientMaster::getDaysInBetween($start, $end));
 				                    array_walk($patients_selected_periods, function(&$value) {
 				                        $value = date("d.m.Y", strtotime($value));
 				                    });
 				                    $patients_selected_periods = array_values(array_unique($patients_selected_periods));
 				                    $existing_sapv_days = $patients_selected_periods;
 				                }
 				
 				                $patients_selected_periods = array_values(array_unique($patients_selected_periods));
 				                $sapv_days_in_period = array_intersect($period_days_arr, $patients_selected_periods);
 				            }
 				
 				            $params['nosapvperiod'][$ipid] = '1';
 				            $params['quarterid'][$ipid] = $selected_period;
 				            $params['selected_period'][$ipid] = $period_details[$selected_period];
 				            $params['sapv_in_period'][$ipid] = array_values($sapv_days_in_period);
 				            $params['existing_sapv_days'] = array_values($patients_selected_periods);
 				            $params['period'][$ipid] = $period_details[$selected_period];
 				        }
 				
 				        $all_patients_sapvs = SapvVerordnung::get_all_sapvs($ipid);
 				
 				        foreach($all_patients_sapvs as $k_sapv => $v_sapv)
 				        {
 				            if(empty($sapv_days_overall))
 				            {
 				                $sapv_days_overall = array();
 				            }
 				
 				
 				            $start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
 				
 				            if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00')
 				            {
 				                $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
 				            }
 				            else
 				            {
 				                $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
 				            }
 				
 				
 				            $sapv_days_overall = array_merge($sapv_days_overall, PatientMaster::getDaysInBetween($start, $end));
 				            array_walk($sapv_days_overall, function(&$value) {
 				                $value = date("d.m.Y", strtotime($value));
 				            });
 				            $sapv_days_overall = array_values(array_unique($sapv_days_overall));
 				        }
 				        
 				        //get allowed client invoices
 				        $client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($this->clientid);
 				        $client_invoice_type = $client_allowed_invoice[0];
 				        
 				        //ISPC-2312 Ancuta 07.12.2020
 				        if(isset($_REQUEST['invoice_type'])){
 				            $client_invoice_type = $_REQUEST['invoice_type'];
 				        }
 				        // -- 
 				        
 				        $params['sapv_overall'][$ipid] = array_values($sapv_days_overall);
 				        $params['ipids'] = array($ipid);
 				        $params['patient_sapvs'] = $patients_sapv[$ipid];
 				        $params['patient_days'] = $patient_days;
 				        $params['get_pdf'] = '1';
 				        $params['only_pdf'] = (int) $_REQUEST['only_invoice'];
 				        $params['stornopdf'] = (int) $_REQUEST['stornopdf'];
 				        $params['stornoid'] = (int) $_REQUEST['stornoid'];
 				        $params['invoice_type'] = $client_invoice_type;
 				        
 				        if(!empty($_REQUEST['iid']))
 				        {
 				            $params['invoices'] = array((int) $_REQUEST['iid']);
 				        }
 				        
 				        //ISPC-2585 Ancuta 10.06.2020
 				        $params['skip_pdf'] = 0; // This is used to skip the pdf generation - and just create invoices 
 				        if(isset($_REQUEST['skip_pdf']) && $_REQUEST['skip_pdf']  == '1'){
 				            $params['skip_pdf'] = 1;
 				        }
 				        
			            $params['external_invoice'] = true; 
				        $params['internal_invoice'] = false;
				        
 				        if(!empty($_REQUEST['internal_invoice']))
 				        {
 				            $params['internal_invoice'] = true;
 				        }
 				        
 				        if(!empty($_REQUEST['internal_user_id']))
 				        {
 				            $params['internal_user_id'] = $_REQUEST['internal_user_id'];
 				        }
 				        
 				        if(!empty($_REQUEST['external_invoice_id']))
 				        {
 				            $params['external_invoice_id'] = $_REQUEST['external_invoice_id'];
 				        }
 				        if($_REQUEST['invoice_type']){
 				            $params['invoice_type'] = $_REQUEST['invoice_type'];
 				        }
 				        // --
 				        
 				        $result = $this->generate_systeminvoice($params);
 				        
 				        if($params['skip_pdf'] == '1'){
 				        
 				            return $result;
 				        }
 				    }
 				}
 				 				
 				
 				

 				private function merge_multiple_docx_files($params)
 				{
 				    //create public/joined_files/ dir
 				    while(!is_dir(PDFJOIN_PATH))
 				    {
 				        mkdir(PDFJOIN_PATH);
 				        if($i >= 50)
 				        {
 				            exit; //failsafe
 				        }
 				        $i++;
 				    }
 				    
 				    //create public/joined_files/$clientid dir
 				    $pdf_path = PDFJOIN_PATH . '/1/xxxx' ;
//  				    $pdf_path = PDFJOIN_PATH;
 				    $files = scandir($pdf_path);
 				 
 				    foreach($files as $k=>$fname)
 				    {
 				        if(strlen($fname) > 2 && file_exists(PDFJOIN_PATH . '/1/xxxx/'.$fname) )
 				        {
 				            $fls[] = PDFJOIN_PATH . '/1/xxxx/'.$fname;
 				        }
 				    }
 				    $merged_other_filename = PDFJOIN_PATH . '/1/xxxx/ionela3.docx';
 				    //merge all files existing in $batch_temp_files!
 				    $merge = new MultiMerge();
 				    $merge_options = array(
 				        'mergeType' => '0',
 				        'numbering' => 'continue',
 				    );
 				    
 				    $first_shit = $fls[0];
 				    unset($fls[0]);
 				    $merge_process = $merge->mergeDocx($first_shit, $fls, $merged_other_filename, $merge_options);
 				    
 	 
 				    if(file_exists($merged_other_filename))
 				    {
 				        
 				        dd($merged_other_filename);
 				        
 				        $this->system_file_upload($clientid, $merged_other_filename, true);
 				        //stop unlinking files
 				        //						unlink($merged_filename);
 				        ob_end_clean();
 				        header("Expires: Tue, 03 Jul 2001 06:00:00 GMT");
 				        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
 				        header("Cache-Control: no-store, no-cache, must-revalidate");
 				        header("Cache-Control: post-check=0, pre-check=0", false);
 				        header("Pragma: no-cache");
 				        
 				        switch($export_file_type)
 				        {
 				            case 'pdf':
 				                header('Content-type: application/pdf');
 				                break;
 				            case 'doc':
 				                header('Content-type: application/vnd.ms-word');
 				                break;
 				            case 'rtf':
 				                header("Content-type: application/rtf");
 				                break;
 				            case 'odt':
 				                header('Content-type: application/vnd.oasis.opendocument.text');
 				                break;
 				            default:
 				                exit;
 				                break;
 				        }
 				        //ISPC-2472  Ancuta- added $batch_temp_name	 12.11.2019
 				        if($batch_temp_name){
 				            header('Content-Disposition: attachment; Filename="' . $batch_temp_name . '.' . $export_file_type . '"');
 				        } else{
 				            header('Content-Disposition: attachment; Filename="merged_invoice' . $suffix . '.' . $export_file_type . '"');
 				        }
 				        readfile($merged_other_filename);
 				        unlink($merged_other_filename);
 				        exit;
 				    }
 				    exit;
 				    
 				}
 				
 				// changed  from private to public ISPC-2609 Ancuta 31.08.2020
 				public function generate_systeminvoice($params)
 				{
 				    if(isset($params['print_job']) && $params['print_job'] =='1'){
 				        $this->_helper->layout->setLayout('layout_ajax');
 				        $this->_helper->viewRenderer->setNoRender();
 				    }
 				    
 				    //spl_autoload_register(array('AutoLoader', 'autoloadPdf')); // Alex+Ancuta- commented on 18.11.2019- New phpdocx 9.5 added
 				    $client = new Client();
 				    $p_list = new PriceList();
 				    $form_types = new FormTypes();
 				    $sapvs = new SapvVerordnung();
 				    $patientmaster = new PatientMaster();
 				    $sapvverordnung = new SapvVerordnung();
 				    $pflege = new PatientMaintainanceStage();
 				    $hi_perms = new HealthInsurancePermissions();
 				    $phelathinsurance = new PatientHealthInsurance();
 				    $healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
 				    $boxes = new LettersTextBoxes();
 				    
 				    
 				    $invoices_system = new InvoiceSystem();
 				    $invoices_system_form = new Application_Form_InvoiceSystem();
 				    
 				    
 				    $pat_diagnosis = new PatientDiagnosis();
 				    
 				    //this is the timestamp join folder name!
 				    $this->view->folder_stamp = time();
 				
 				    $clientid = isset($params['clientid']) && ! empty($params['clientid']) ? $params['clientid'] : $this->clientid;
 				    $userid = $this->userid;
 				    	
 				
 				    //get allowed client invoices
 				    $client_allowed_invoice = ClientInvoicePermissions::get_client_allowed_invoice($clientid);
 				    $client_invoice_type = $client_allowed_invoice[0];
 				    //ISPC-2585 Ancuta 15.06.2020
 				    
 				    if(isset($params['invoice_type']) && !empty($params['invoice_type'])){
 				        $client_invoice_type = $params['invoice_type'];
 				    }
			    	//--
			    	
 				    $letter_boxes_details = $boxes->client_letter_boxes($clientid);
 				
 				    $usergroups = new Usergroup();
 				    $client_usergroups_array = $usergroups->getClientGroups($clientid);
 				
 				    $ug_details = array();
 				    foreach($client_usergroups_array as $k=>$group_data){
 				        $ug_details[$group_data['id']] = $group_data;
 				    }
 				    	
 				    //client_details
 				    $users = new User();
 				    $client_user_array = $users->getUserByClientid($clientid,0,true,false);
 				
 				    foreach($client_user_array as $k=>$cu)
 				    {
 				        $user_array[$cu['id']] = $cu;
 				        $user_array[$cu['id']]['groupname'] = $ug_details[$cu['groupid']]['groupname'];
 				        if(strlen($cu['shortname']) >  0){
 				            $user_array[$cu['id']]['initials'] = $cu['shortname'];
 				        }
 				        else
 				        {
 				            $user_array[$cu['id']]['initials'] = mb_substr($cu['first_name'], 0, 1, "UTF-8") . "" . mb_substr($cu['last_name'], 0, 1, "UTF-8");
 				
 				        }
 				    }
 				
 				    /*
 				     * TODO-1544
 				     * ancuta
 				     * 08.05.2018
 				     */
 				    $modules = new Modules();
 				    if($modules->checkModulePrivileges("90", $clientid))
 				    {
 				        $debtor_number_module = "1";
 				    }
 				    else
 				    {
 				        $debtor_number_module = "0";
 				    }
 				
 				    $ppun = new PpunIpid();
 				    if($modules->checkModulePrivileges("88", $clientid))
 				    {
 				        $ppun_module = "1";
 				    }
 				    else
 				    {
 				        $ppun_module = "0";
 				    }
 				
 				    
 				    // ISPC-2461 Bill 0,00 for Health insurances
 				    // get Health insurance property
 				    if($modules->checkModulePrivileges("199", $clientid))
 				    {
 				        $has_bill_zero_option = "1";
 				    }
 				    else
 				    {
 				        $has_bill_zero_option = "0";
 				    }
 				
 				    	
 				    //client_details
 				    $client_details = $client->getClientDataByid($clientid);
 				    $invoices_ids = $params['invoices'];
 				    //new invoice required data START
 				    	
 				    $patients_invoice_days = array();
 				    if(!empty($params['invoices']))
 				    {
 				        //load invoices data
 				        $invoices_data = $invoices_system->get_invoices($client_invoice_type,$params['invoices'],true);
 				
 				        foreach($invoices_data['invoices_data'] as $v_invoice)
 				        {
 				            $ipids[] = $v_invoice['ipid'];
 				
 				            $current_period[$v_invoice['ipid']]['start'] = date('Y-m-d', strtotime($v_invoice['invoice_start']));
 				            $current_period[$v_invoice['ipid']]['end'] = date('Y-m-d', strtotime($v_invoice['invoice_end']));
 				
 				            if(empty($current_period[$v_invoice['ipid']]['days']))
 				            {
 				                $current_period[$v_invoice['ipid']]['days'] = array();
 				            }
 				            	
 				            if(empty($patients_invoice_days[$v_invoice['ipid']]))
 				            {
 				                $patients_invoice_days[$v_invoice['ipid']] = array();
 				            }
 				
 				            $days_arr = $patientmaster->getDaysInBetween($v_invoice['invoice_start'], $v_invoice['invoice_end']);
 				            $current_period[$v_invoice['ipid']]['days'] = array_merge($current_period[$v_invoice['ipid']]['days'], $days_arr);
 				            $patients_invoice_days[$v_invoice['ipid']] = array_merge($patients_invoice_days[$v_invoice['ipid']], $days_arr);
 				
 				            array_walk_recursive($current_period[$v_invoice['ipid']]['days'], function(&$value) {
 				                $value = date("d.m.Y", strtotime($value));
 				            });
 				            array_walk_recursive($patients_invoice_days[$v_invoice['ipid']], function(&$value) {
 				                $value = date("d.m.Y", strtotime($value));
 				            });
 				
 				                	
 				                	
 				                	
 				                $days_arr = array();
 				        }
 				
 				        //patient days
 				        $conditions['client'] = $clientid;
 				        $conditions['ipids'] = $ipids;
 				        $conditions['periods'][0]['start'] = '2009-01-01';
 				        $conditions['periods'][0]['end'] = date('Y-m-d');
 				
 				        $sql = 'e.epid, p.ipid, e.ipid,';
 				        $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
 				        $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
 				        $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
 				        $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
 				        $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
 				        $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
 				
 				        //be aware of date d.m.Y format here
 				        $patient_days = Pms_CommonData::patients_days($conditions, $sql);
 				        $params['patient_days'] = $patient_days;
 				        $params['period'] = $current_period;
 				    }
 				    else
 				    {
 				        $ipids = $params['ipids'];
 				        $current_period = $params['period'];
 				        $patient_days = $params['patient_days'];
 				
 				        foreach($current_period as $cipid=>$cdata){
 				            $patients_invoice_days[$cipid] = $cdata['days'];
 				        }
 				    }
 				
 				    	
 				    $ipids = array_values(array_unique($ipids));
 				
 	
 				    //set current period to work with
 				
 				    //patient HEALTH INSURANCE START
 				    $healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);
 				
 				    //multiple hi subdivisions && hi subdivisions permissions
 				    $divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
 				
 				    if($divisions)
 				    {
 				        foreach($healthinsu_multi_array as $k_hi => $v_hi)
 				        {
 				            $hi_companyids[] = $v_hi['companyid'];
 				        }
 				
 				        $healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($hi_companyids);
 				    }
 				
 				    $alias['home_visit'] = "Hausbesuch";
 				    $alias['beratung'] = "Beratung";
 				    $alias['koordination'] = "Koordination";
 				    $alias['telefon'] = "Telefonat";
 				
 				    	
 				    $master_data_all = array();
 				    	
 				    //ISPC-2585 Ancuta 15.06.2020
 				    $internal_users_details = array();
 				    if(!empty($params['internal_user_id'])){
 				        $master_user_details = new User();
 				        $internal_users_details_arr = $master_user_details->getUserDetails($params['internal_user_id']); // ??????
 				        $internal_users_details = $internal_users_details_arr[0];
 				    }
 				    //
 				    
 				    //patient HEALTH INSURANCE END
 				    $kv_header = array();
 				    $patient_address = array();
 				    $hi_name = "";
 				    $hi_address = "";
 				    $sapv_addresse = "";
 				    foreach($ipids as $k_ipid => $v_ipid)
 				    {
 				        $pat_details = $params['patient_days'][$v_ipid]['details'];
 				
 				        $master_data_all['client']['id'] = $clientid;
 				        $master_data_all['ipids'][] = $v_ipid;
 				        $master_data_all['patients'][$v_ipid]['details'] = $params['patient_days'][$v_ipid]['details'];
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['period'] = $params['period'][$v_ipid];
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['sapv'] = $params['period'][$v_ipid];
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['admissionid'] = $params['admissionid'][$v_ipid];
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['quarterid'] = $params['quarterid'][$v_ipid];
 				
 				        if($healthinsu_multi_array[$v_ipid]['privatepatient'] == "1" && strlen($_REQUEST['iid']) == '0')
 				        {
 				            // 					$patient_address = '&nbsp;' . htmlspecialchars($pat_details['last_name']) . ', ' . htmlspecialchars($pat_details['first_name']) . '<br />';
 				            $patient_address[$v_ipid]['address'] = '&nbsp;' . htmlspecialchars($pat_details['first_name']) . ' ' . htmlspecialchars($pat_details['last_name']) . '<br />';// TODO-1544
 				            $patient_address[$v_ipid]['address'] .= '&nbsp;' . htmlspecialchars($pat_details['street1']) . '<br />';
 				            $patient_address[$v_ipid]['address'] .= '&nbsp;' . htmlspecialchars($pat_details['zip']) . ' ' . '&nbsp;' . htmlspecialchars($pat_details['city']);
 				        }
 				
 				        if(!empty($healthinsu_subdiv_arr[$v_ipid]['3']['name']))
 				        {
 				            //get new SAPV hi address
 				            $hi_name = '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['name'];
 				            $hi_address = '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['name'] . '<br />';
 				            if($healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider'])
 				            {
 				                $hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['insurance_provider'] . '<br />';
 				            }
 				            $hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['street1'] . '<br />';
 				            $hi_address .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city'];
 				            
 				            $sapv_address = '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['street1'] . '<br />';
 				            $sapv_address .= '&nbsp;' . $healthinsu_subdiv_arr[$v_ipid][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$v_ipid][3]['city'];
 				        }
 				        else
 				        {
 				            //get old hi_address
 				            $hi_name = '&nbsp;' . $healthinsu_multi_array[$v_ipid]['name'];
 				            $hi_address = '&nbsp;' . $healthinsu_multi_array[$v_ipid]['company_name'] . '<br />';
 				            $hi_address .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_insurance_provider'] . '<br />';
 				            $hi_address .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_street'] . '<br />';
 				            $hi_address .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_zip'] . ' ' . $healthinsu_multi_array[$v_ipid]['ins_city'];
 				            
 				            $sapv_address = '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_street'] . '<br />';
 				            $sapv_address .= '&nbsp;' . $healthinsu_multi_array[$v_ipid]['ins_zip'] . ' ' . $healthinsu_multi_array[$v_ipid]['ins_city'];
 				        }
 				
 				        // Kv header for the second page
 				
 				        $kv_header[$v_ipid]['insurance_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
 				
 				        if(strlen($healthinsu_multi_array[$v_ipid]['kvk_no']) > 0 )
 				        {
 				            $kv_header[$v_ipid]['kvnumber'] = $healthinsu_multi_array[$v_ipid]['kvk_no'];
 				        }
 				        else
 				        {
 				            $kv_header[$v_ipid]['kvnumber'] = $healthinsu_multi_array[$v_ipid]['company']['kvnumber'];
 				        }
 				
 				        $kv_header[$v_ipid]['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
 				        $kv_header[$v_ipid]['insurance_status'] = $healthinsu_multi_array[$v_ipid]['insurance_status'];
 				
 				        $master_user_details = new User();
 				        $users_details = $master_user_details->getUserDetails($userid); // ??????
 				
 				        $kv_header[$v_ipid]['betriebsstatten_nr'] = $users_details[0]['betriebsstattennummer'];
 				        $kv_header[$v_ipid]['arzt_nr'] = $users_details[0]['LANR'];
 				        $kv_header[$v_ipid]['patient_name_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['last_name']) . ", " . htmlspecialchars($params['patient_days'][$v_ipid]['details']['first_name']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);
 				        $kv_header[$v_ipid]['patient_birthdate'] =date("d.m.Y",strtotime($params['patient_days'][$v_ipid]['details']['birthd']));
 				        $kv_header[$v_ipid]['patient_name'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['last_name']) . ", " . htmlspecialchars($params['patient_days'][$v_ipid]['details']['first_name']);
 				        $kv_header[$v_ipid]['patient_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);
 				        $kv_header[$v_ipid]['patient_address'] = htmlspecialchars($params['patient_days'][$v_ipid]['details']['street1']) . "&nbsp;" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['zip']) . "\n" . htmlspecialchars($params['patient_days'][$v_ipid]['details']['city']);
 				
 				
 				
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['hi_name'] = $hi_name;
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['hi_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['privatepatient'] = $healthinsu_multi_array[$v_ipid]['privatepatient'];
 				
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['address'] = $hi_address;
 				        
 				        //ISPC-2585 Ancuta 15.06.2020
 				        if(!empty($params['internal_user_id'])){
 				            
 				            $assigned_user_address = '&nbsp;' . htmlspecialchars($internal_users_details['first_name']) . ' ' . htmlspecialchars($internal_users_details['last_name']) . '<br />';
 				            $assigned_user_address .= '&nbsp;' . htmlspecialchars($internal_users_details['street1']) . '<br />';
 				            $assigned_user_address .= '&nbsp;' . htmlspecialchars($internal_users_details['zip']) . ' ' . '&nbsp;' . htmlspecialchars($internal_users_details['city']);
 				            
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['address'] = $assigned_user_address;
 				        }
 				        //
 				        
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['sapv_recipient'] = $sapv_address;
 				
 				        if($patient_address[$v_ipid]['address'])
 				        {
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['patient_address'] = $patient_address[$v_ipid]['address'];
 				        }
 				
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['health_insurance_ik'] = $healthinsu_multi_array[$v_ipid]['institutskennzeichen'];
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['health_insurance_kassenr'] = $healthinsu_multi_array[$v_ipid]['kvk_no'];
 				
 				        $master_data_all['patients'][$v_ipid]['invoice_data']['footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
 				
 				        if($params['period'][$v_ipid]['approved_date'] != '0000-00-00 00:00:00' && strlen($params['period'][$v_ipid]['approved_date']) > 0 && date('Y-m-d', strtotime($params['period'][$v_ipid]['approved_date'])) != '1970-01-01')
 				        {
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_date'] = date('d.m.Y', strtotime($params['period'][$v_ipid]['approved_date']));
 				        }
 				        else
 				        {
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_date'] = ' - ';
 				        }
 				
 				        if(strlen($params['period'][$v_ipid]['approved_number']) > 0)
 				        {
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_nr'] = $params['period'][$v_ipid]['approved_number'];
 				        }
 				        else
 				        {
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['sapv_approve_nr'] = ' - ';
 				        }
 				
 				        /*
 				         * TODO-1544
 				         * debtor number
 				         */
 				
 				        if($ppun_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient']  == "1")
 				        {
 				            //get ppun (private patient unique number)
 				            $ppun_number = $ppun->check_patient_ppun($v_ipid, $clientid);
 				            if($ppun_number)
 				            {
 				                $master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number']  = $ppun_number['ppun'];
 				            }
 				            else
 				            {
 				                $master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number']  = "";
 				            }
 				        }
 				
 				        if($debtor_number_module == "1" && $healthinsu_multi_array[$v_ipid]['privatepatient'] == "0")
 				        {
 				            //get debtor number from patient healthinsurance
 				            if(strlen($healthinsu_multi_array[$v_ipid]['ins_debtor_number']) > '0')
 				            {
 				                $master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number'] = $healthinsu_multi_array[$v_ipid]['ins_debtor_number'];
 				            }
 				            else
 				            {
 				                $master_data_all['patients'][$v_ipid]['invoice_data']['debtor_number'] = $healthinsu_multi_array[$v_ipid]['company']['debtor_number'];
 				            }
 				        }
 				
 				        // ISPC-2461 Ancuta 
 				        if(!empty($healthinsu_multi_array[$v_ipid]) && !empty($healthinsu_multi_array[$v_ipid]['company']) && $healthinsu_multi_array[$v_ipid]['company']['demstepcare_billing'] == "yes" ){
     				        $master_data_all['patients'][$v_ipid]['invoice_data']['bill_as_zero'] =  '1';
 				        }else{
     				        $master_data_all['patients'][$v_ipid]['invoice_data']['bill_as_zero'] =  '0';
 				        }
 				        //--
 				        
 				        /// diagnosisi data
 				
 				        //get patient main diagnosis
 				        $patient_main_diag[$v_ipid] = $pat_diagnosis->get_main_diagnosis($v_ipid, $clientid);
 				        $patient_data_diagnos[$v_ipid]['main_diagnosis'] = implode(', ', $patient_main_diag[$v_ipid]['icd']);
 				    }
 			
 				    $all_patients_periods = array();
 				    $patient_days2locationtypes = array();
 				    $hospital_days_cs_dmY = array();
 				    $hospiz_days_cs_dmY = array();
 				
 				    foreach($patient_days as $k_ipid => $patient_data)
 				    {
 				        //all patients periods
 				        $all_patients_periods = array_merge_recursive($all_patients_periods, $patient_data['active_periods']);
 				
 				        //used in flatrate
 				        if(empty($patient_periods[$k_ipid]))
 				        {
 				            $patient_periods[$k_ipid] = array();
 				        }
 				
 				        array_walk_recursive($patient_data['active_periods'], function(&$value) {
 				            $value = date("Y-m-d", strtotime($value));
 				        });
 				        $patient_periods[$k_ipid] = array_merge($patient_periods[$k_ipid], $patient_data['active_periods']);
 				
 				        //hospital days cs
 				        if(!empty($patient_data['hospital']['real_days_cs']))
 				        {
 				            $hospital_days_cs_dmY[$k_ipid] = $patient_data['hospital']['real_days_cs'];
 				            $hospital_days_cs[$k_ipid] = $patient_data['hospital']['real_days_cs'];
 				            array_walk($hospital_days_cs[$k_ipid], function(&$value) {
 				                $value = date("Y-m-d", strtotime($value));
 				            });
 				        }
 				
 				        //hospiz days cs
 				        if(!empty($patient_data['hospiz']['real_days_cs']))
 				        {
 				            $hospiz_days_cs_dmY[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
 				            $hospiz_days_cs[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
 				            array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
 				                $value = date("Y-m-d", strtotime($value));
 				            });
 				        }
 				
 				        //real active days
 				        if(!empty($patient_data['real_active_days']))
 				        {
 				            $active_days_in_period_cs[$k_ipid] = $patient_data['real_active_days'];
 				            array_walk($active_days_in_period_cs[$k_ipid], function(&$value) {
 				                $value = date("Y-m-d", strtotime($value));
 				            });
 				        }
 				
 				        //treatment days
 				        if(!empty($patient_data['treatment_days']))
 				        {
 				            $treatment_days_cs[$k_ipid] = $patient_data['treatment_days'];
 				            array_walk($treatment_days_cs[$k_ipid], function(&$value) {
 				                $value = date("Y-m-d", strtotime($value));
 				            });
 				        }
 				
 				        //active days
 				        if(!empty($patient_data['active_days']))
 				        {
 				            $active_days[$k_ipid] = $patient_data['active_days'];
 				            array_walk($active_days[$k_ipid], function(&$value) {
 				                $value = date("Y-m-d", strtotime($value));
 				            });
 				        }
 				
 				        if(empty($hospital_days_cs[$k_ipid]))
 				        {
 				            $hospital_days_cs[$k_ipid] = array();
 				        }
 				
 				        if(empty($hospiz_days_cs[$k_ipid]))
 				        {
 				            $hospiz_days_cs[$k_ipid] = array();
 				        }
 				
 				        $hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);
 				
 				        foreach($patient_data['locations'] as $pat_location_row_id => $pat_location_data)
 				        {
 				            foreach($pat_location_data['days'] as $kl=>$lday)
 				            {
 				                if(in_array($lday,$patient_data['real_active_days']))
 				                {
 				
 				                    if( empty($pat_location_data['type'])){
 				                        $pat_location_data['type'] = 0 ;
 				                    }
 				
 				
 				
 				                    if($pat_location_data['type'] == "4" )
 				                    {
 				                        $patient_days2locationtypes[$k_ipid][$lday][] = "3";
 				                    }
 				                    else
 				                    {
 				                        $patient_days2locationtypes[$k_ipid][$lday][] = $pat_location_data['type'];
 				                    }
 				                }
 				            }
 				        }
 				    }
 				
 				    /*
 				     *  TODO-1589
 				     * foreach( $patient_days2locationtypes as $pipid=>$locdata){
 				     foreach($locdata as $loc_day => $day_loc_types){
 				     $del_val = "1";
 				     if ( ! in_array($loc_day,$hospital_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
 				     unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
 				     }
 				     	
 				     $del_val = "2";
 				     if ( ! in_array($loc_day,$hospiz_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
 				     unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
 				     }
 				     }
 				     } */
 				    foreach($patient_days2locationtypes as $pipid=>$locdata){
 				        foreach($locdata as $loc_day => $day_loc_types){
 				            $patient_days2locationtypes[$pipid][$loc_day] = end($day_loc_types);
 				        }
 				    }
 				
 				    $all_patients_periods = array_values($all_patients_periods);
 				
 				    foreach($all_patients_periods as $k_period => $v_period)
 				    {
 				        if(empty($months))
 				        {
 				            $months = array();
 				        }
 				
 				        $period_months = Pms_CommonData::get_period_months($v_period['start'], $v_period['end'], 'Y-m');
 				        $months = array_merge($months, $period_months);
 				    }
 				    $months = array_values(array_unique($months));
 				
 				    foreach($months as $k_m => $v_m)
 				    {
 				        $months_unsorted[strtotime($v_m)] = $v_m;
 				    }
 				    ksort($months_unsorted);
 				    $months = array_values(array_unique($months_unsorted));
 				
 				    foreach($months as $k_month => $v_month)
 				    {
 				        if(!function_exists('cal_days_in_month'))
 				        {
 				            $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
 				        }
 				        else
 				        {
 				            $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
 				        }
 				
 				        $months_details[$v_month]['start'] = $v_month . "-01";
 				        $months_details[$v_month]['days_in_month'] = $month_days;
 				        $months_details[$v_month]['end'] = $v_month . '-' . $month_days;
 				
 				        $month_select_array[$v_month] = $v_month;
 				        $month_days_arr[date('Ym', strtotime($months_details[$v_month]['start']))] = $patientmaster->getDaysInBetween($months_details[$v_month]['start'], $months_details[$v_month]['end']);
 				    }
 				
 				    	
 				    foreach($ipids as $k_ipid => $v_ipid)
 				    {
 				        $days_in_period[$v_ipid] = $patientmaster->getDaysInBetween($current_period[$v_ipid]['start'], $current_period[$v_ipid]['end']);
 				
 				        $active_days_in_period[$v_ipid] = array_intersect($days_in_period[$v_ipid], $active_days[$v_ipid]);
 				
 				        if($months_details[$months[0]]['start'] != date('Y-m-d', strtotime($current_period[$v_ipid]['start'])))
 				        {
 				            //used in overall performance record data start till the end of previous month (curent month-01 -1 day)
 				            $overall_performance_period[$v_ipid]['start'] = $months_details[$months[0]]['start'];
 				            $overall_performance_period[$v_ipid]['c_month_end'] = date('Y-m-d', strtotime('-1 day', strtotime($current_period[$v_ipid]['start'])));
 				            $overall_performance_period[$v_ipid]['end'] = date('Y-m-d', strtotime($current_period[$v_ipid]['end']));
 				        }
 				        else
 				        {
 				            //no overall period (no previous months) -- get curent month still
 				            $overall_performance_period[$v_ipid] = $current_period[$v_ipid];
 				        }
 				
 				
 				        foreach($patient_periods[$v_ipid] as $k_period => $v_period)
 				        {
 				            if(empty($patients_periods_days[$v_ipid]))
 				            {
 				                $patients_periods_days[$v_ipid] = array();
 				            }
 				
 				            $patients_periods_days[$v_ipid] = array_merge($patients_periods_days[$v_ipid], $patientmaster->getDaysInBetween($v_period['start'], $v_period['end']));
 				        }
 				
 				        $days_in_period_overall_performance_cmonth[$v_ipid] = $patientmaster->getDaysInBetween($overall_performance_period[$v_ipid]['start'], $overall_performance_period[$v_ipid]['c_month_end']);
 				    }//end foreach ipids
 				    //(ipid-day-verordnet_statuses)
 				    $sapv_days_cs = $this->get_period_sapvs($ipids, $current_period, $hospital_hospiz_days_cs);
 				
 				    $sapv_details = $this->get_sapvs_approved_details($ipids, $current_period);
 				
 				    //sapv till last day of prev month
 				    $sapv_days_overall = $this->get_period_sapvs($ipids, $overall_performance_period, $hospital_hospiz_days_cs);
 				
 				
 				    //get pflegestuffe in current period
 				    $pflege_arr = $pflege->get_multiple_patients_mt_period($ipids, $current_period);
 				
 				    foreach($pflege_arr as $k_pflege => $v_pflege)
 				    {
 				        $patients_pflege[$v_pflege['ipid']] = $v_pflege['stage'];
 				    }
 				
 				
 				    //get patients discharge dates
 				    $pat_dis = new PatientDischarge();
 				    $patients_discharge = $pat_dis->get_patients_discharge($ipids);
 				
 				    $patients_discharge_date = array();
 				    foreach($patients_discharge as $k_dis => $v_dis)
 				    {
 				        $patients_discharge_date[$v_dis['ipid']] = $v_dis['discharge_date'];
 				    }
 				
 				    foreach($ipids as $k_ipid => $v_ipid)
 				    {
 				        foreach($sapv_days_cs[$v_ipid] as $k_s_days => $v_s_days)
 				        {
 				            if($k_s_days != 'relevant_sapvs_days')
 				            {
 				                $sapv_days_inperiod_cs[$v_ipid][] = $k_s_days;
 				            }
 				            else
 				            {
 				                $relevant_sapvs_days_cs[$v_ipid] = $v_s_days;
 				            }
 				        }
 				        asort($sapv_days_inperiod_cs);
 				
 				        if(count($relevant_sapvs_days_cs[$v_ipid]['start']) > 0)
 				        {
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['first_sapv_day'] = date('d.m.Y', strtotime($relevant_sapvs_days_cs[$v_ipid]['start'][0]));
 				            $end_sapv_last = end($relevant_sapvs_days_cs[$v_ipid]['end']);
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['last_sapv_day'] = date('d.m.Y', strtotime($end_sapv_last));
 				        }
 				        else
 				        {
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['first_sapv_day'] = '0000-00-00 00:00:00';
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['last_sapv_day'] = '0000-00-00 00:00:00';
 				        }
 				    }
 				
 				
 				    //get real active patient days (active, with sapv and no hospital/hospiz)
 				    $real_active_days_cs = $this->patients_real_active_days($ipids, $active_days, $hospital_hospiz_days_cs, $sapv_days_overall);
 				
 				    //get no sapv days
 				    $days_nosapv_cs = $this->nosapv_days($active_days, $hospital_hospiz_days_cs, $sapv_days_cs);
 				
 				    	
 				    /* ########################################### */
 				    //get contact form data and shortcuts
 				    /* ########################################### */
 				    //get patients courses
 				    $course_shortcuts =array("V","XT");
 				    $course_days = $this->get_patients_period_course_by_shortcuts($ipids, $course_shortcuts, $patients_discharge_date, $overall_performance_period,true);
 				    	
 				    $extra_details  = array();
 				    foreach($ipids as $k_ipid => $ipid)
 				    {
 				        foreach($course_days[$ipid] as $k_course_date => $v_course_details)
 				        {
 				            foreach($v_course_details as $k_couses => $v_courses)
 				            {
 				                $course[$ipid][$k_course_date][] = $v_courses['course_type'];
 				            }
 				            	
 				            $k_course_date_alt = date('d.m.Y', strtotime($k_course_date));
 				            if(in_array($k_course_date_alt, $patients_invoice_days[$ipid]))
 				            {
 				                foreach($v_course_details as $k_couse => $v_course)
 				                {
 				                    if($v_course['course_type'] == 'XT')
 				                    //if($v_course['course_type'] == 'XT' && in_array($k_course_date, $sapv_days_inperiod_cs[$ipid]) && in_array('1', $sapv_days_cs[$ipid][$k_course_date]))
 				                    {
 				                        $clasifizierung[$ipid][$k_course_date]['telefon'] += 1;
 				                        $extra_details[$ipid][$k_course_date]['telefon'][] = $v_course;
 				                    }
 				                    else if($v_course['course_type'] == 'V')
 				                    //else if($v_course['course_type'] == 'V' && in_array($k_course_date, $sapv_days_inperiod_cs[$ipid]) && in_array('2', $sapv_days_cs[$ipid][$k_course_date]))
 				                    {
 				                        $clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
 				                        $extra_details[$ipid][$k_course_date]['koordination'][] = $v_course;
 				                    }
 				                }
 				            }
 				        }
 				    }
 				    	
 				    	
 				    //get contact forms in current period and in overall period
 				    // in this case the $current_period - is the full period of patients
 				    $contact_forms_days = $this->get_patients_period_cf($ipids, $current_period);
 				    //  dd($patients_invoice_days,$contact_forms_days);
 				    foreach($ipids as $k_ipid => $v_ipid)
 				    {
 				        foreach($sapv_days_cs[$v_ipid] as $k_s_days => $v_s_days)
 				        {
 				            if($k_s_days != 'relevant_sapvs_days')
 				            {
 				                $sapv_days_inperiod_cs[$v_ipid][] = $k_s_days;
 				            }
 				            else
 				            {
 				                $relevant_sapvs_days_cs[$v_ipid] = $v_s_days;
 				            }
 				        }
 				        asort($sapv_days_inperiod_cs);
 				        	
 				        if(count($relevant_sapvs_days_cs[$v_ipid]['start']) > 0)
 				        {
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['first_sapv_day'] = date('d.m.Y', strtotime($relevant_sapvs_days_cs[$v_ipid]['start'][0]));
 				            $end_sapv_last = end($relevant_sapvs_days_cs[$v_ipid]['end']);
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['last_sapv_day'] = date('d.m.Y', strtotime($end_sapv_last));
 				        }
 				        else
 				        {
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['first_sapv_day'] = '0000-00-00 00:00:00';
 				            $master_data_all['patients'][$v_ipid]['invoice_data']['last_sapv_day'] = '0000-00-00 00:00:00';
 				        }
 				        	
 				        foreach($contact_forms_days[$v_ipid] as $k_cf_day => $v_cf_data)
 				        {
 				            foreach($v_cf_data as $k_cf => $v_cf)
 				            {
 				                if(is_numeric($k_cf))
 				                {
 				                    if(strtotime(date('Y-m-d H:i:s', strtotime($v_cf['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
 				                    {
 				                        //excluded cf after last discharge
 				                        $exclude_after_discharge[] = $v_cf['id'];
 				                        unset($contact_forms_ids_overall[$k_cf_day][$k_cf]);
 				                    }
 				                    $contact_forms_ids[] = $v_cf['id'];
 				                    $all_contact_forms[$v_cf['id']] = $v_cf;
 				                }
 				            }
 				        }
 				        ksort($contact_forms_days[$v_ipid]);
 				    }
 				    	
 				    	
 				    if( ! empty($contact_forms_ids)){
 				        $block_classification = new FormBlockClassification();
 				        $classification_data = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids);
 				        $classification_data_overall = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids_overall);
 				    }
 				    	
 				    foreach($all_contact_forms as $k_cf => $v_cf)
 				    {
 				        $k_cf_day = date('Y-m-d', strtotime($v_cf['billable_date']));
 				        	
 				        if(  in_array(date('d.m.Y', strtotime($v_cf['billable_date'])), $patients_invoice_days[$v_cf['ipid']]))
 				        {
 				            $contact_forms_days_ids[$v_cf['ipid']][$k_cf_day][] = $v_cf['id'];
 				            $contact_forms_days_ids2details[$v_cf['ipid']][$v_cf['id']] = $v_cf;
 				            $contact_forms2form_types[$v_cf['ipid']][$v_cf['id']][] = $v_cf['form_type'];
 				        }
 				        	
                    }


               
 				            $contact_forms_ids = array_values(array_unique($contact_forms_ids));
 				
 				            /* ########################################### */
 				            //get saved data
 				            /* ########################################### */
 				            
 				            if($client_invoice_type == "bre_kinder_invoice"){
     				            $brek_obj = new BreKinderPerformance();
                                $brek_data = $brek_obj->bre_actions ($ipids, $patients_invoice_days,"invoice");
 				            } 
 				            elseif($client_invoice_type == "nr_invoice")
 				            {
 				                $nr_billing_obj = new NordrheinBilling();
 				                $billable_actions = $nr_billing_obj->nr_billable_actions($clientid,$ipids,false,$params['selected_period']);
 				
 				                $nordehein_data = array();
 				                
 				                foreach($billable_actions['invoices'] as $nr_ipid=>$nr_dates ){
 				                    foreach($nr_dates  as $date => $sh_vals){
 				                        foreach($sh_vals as $sh=>$sh_Data){
 				                            $nordehein_data[$nr_ipid][$sh][$date] = $sh_Data;
 				                        }
 				                    }
 				                }
 				                
 				            }
 				            elseif($client_invoice_type == "demstepcare_invoice")
 				            {
 				                $dsc_billing_obj = new DemstepcareControl();
 				                $dsc_billable_actions = $dsc_billing_obj->dsc_actions($ipids,$params['selected_period'],"invoice");
 				
 				                
//  				                dd($dsc_billable_actions);
 				                $demstepcare_data = array();
 				                foreach($dsc_billable_actions as $nr_ipid=>$nr_dates ){
 				                    foreach($nr_dates  as $date => $sh_vals){
 				                        foreach($sh_vals as $sh=>$sh_Data){
 				                            $demstepcare_data[$nr_ipid][$sh][$date] = $sh_Data;
 				                        }
 				                    }
 				                }
 				                
 				            }
 				            //ISPC-2585 Ancuta 15.06.2020
 				            elseif( $client_invoice_type == "demstepcare_internal_invoice")
 				            {
 				                $dsc_billing_obj = new DemstepcareControl();
 				                $dsc_billable_actions = $dsc_billing_obj->dsc_actions($ipids,$params['selected_period'],"invoice");
 				
 				                
 				                $demstepcare_data = array();
 				                foreach($dsc_billable_actions as $nr_ipid=>$nr_dates ){
 				                    foreach($nr_dates  as $date => $sh_vals){
 				                        foreach($sh_vals as $sh=>$sh_Data){
 				                            $demstepcare_data[$nr_ipid][$sh][$date] = $sh_Data;
 				                        }
 				                    }
 				                }
 				                
 				            }
 				            // --

 				            $master_data = array();
 				            $action_days = array();
 				            foreach($ipids as $k_ipid => $ipid)
 				            {
 				
 				                foreach($active_days_in_period_cs[$ipid] as $k=>$v_period_day)
 				                {
 				
 				                    foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_id)
 				                    {
			                            $clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
			                            $extra_details[$ipid][$v_period_day]['home_visit'][] = $contact_forms_days_ids2details[$ipid][$v_cf_id];
 				                    }
 				                }
 				

 				  
 				
 				
 				                /* ###################################### */
 				                /* ####### SYSTEm AND SAVED DATA ################### */
 				                /* ###################################### */
 				

 				                if($client_invoice_type == "bre_kinder_invoice"){
                                    $master_data[$ipid] = $brek_data[$ipid];
 				                }
 				                elseif($client_invoice_type == "nr_invoice")
 				                {
                                    $master_data[$ipid] = $nordehein_data[$ipid];
 				                }
 				                elseif($client_invoice_type == "demstepcare_invoice")
 				                {
                                    $master_data[$ipid] = $demstepcare_data[$ipid];
 				                }
 				                //ISPC-2585 Ancuta 15.06.2020
 				                elseif($client_invoice_type == "demstepcare_internal_invoice")
 				                {
                                    $master_data[$ipid] = $demstepcare_data[$ipid];
 				                }
 				                // --
 				                /* ###################################### */
 				
 				
 				                if($client_invoice_type == "demstepcare_invoice"){
 				                    
     				                foreach($master_data[$ipid] as $k_shortcut => $v_shortcut_dates)
     				                {
     				                    foreach($v_shortcut_dates as $k_shortcut_date => $v_master_values)
     				                    {
     				                        if(  $v_master_values['price'] && $v_master_values['qty'] > 0 ){ // Commented just for testing
     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut'] = $k_shortcut;
     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['description'] = $v_master_values['description'];
     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['qty'] += $v_master_values['qty'];
     				                            if($has_bill_zero_option == 1 && $master_data_all['patients'][$ipid]['invoice_data']['bill_as_zero'] == 1){
     				                                $v_master_values['price'] = '0.00';
     				                            }
     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['price'] = $v_master_values['price'];
     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut_total'] += ($v_master_values['qty'] * $v_master_values['price']);
     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['location_type'] = $v_master_values['location_type'];
     				                            $grand_total[$ipid] += ($v_master_values['qty'] * $v_master_values['price']);
     				                        }
     				                        $action_days[$ipid][] = $k_shortcut_date;
     				                    }
     				                    ksort($invoice_master[$ipid]);
     				                    $master_data_all['invoice_items'][$ipid] = $invoice_master[$ipid];
     				                    $master_data_all['grand_total'][$ipid] = $grand_total[$ipid];
     				                    $sapv_details_data[$ipid] = end($sapv_details[$ipid]);
 				                    }
     				                 
 				                }
 				                elseif($client_invoice_type == "demstepcare_internal_invoice"){
 				                    
     				                foreach($master_data[$ipid] as $k_shortcut => $v_shortcut_dates)
     				                {
									    if(in_array($k_shortcut,array('q_adm','q_gav','q_yav','q_rav')))
     				                    {
     					                    foreach($v_shortcut_dates as $k_shortcut_date => $v_master_values)
     					                    {
     					                        if(  $v_master_values['price'] && $v_master_values['qty'] > 0 ){ // Commented just for testing
     					                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut'] = $k_shortcut;
    	 				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['description'] = $v_master_values['description'];
	     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['qty'] += $v_master_values['qty'];
	     				                            //TODO-3233 Ancuta 24.06.2020
	     				                            //Commented - as the internal invoices should have prices!
	     				                            /*
	     				                             if($has_bill_zero_option == 1 && $master_data_all['patients'][$ipid]['invoice_data']['bill_as_zero'] == 1){
	     				                             $v_master_values['price'] = '0.00';
	     				                             }
	     				                             */
	     				                            // --
     				                	            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['price'] = $v_master_values['price'];
     				            	                $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut_total'] += ($v_master_values['qty'] * $v_master_values['price']);
     				        	                    $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['location_type'] = $v_master_values['location_type'];
     				    	                        $grand_total[$ipid] += ($v_master_values['qty'] * $v_master_values['price']);
     					                        }
     					                        $action_days[$ipid][] = $k_shortcut_date;
     					                    }
     					                    ksort($invoice_master[$ipid]);
    	 				                    $master_data_all['invoice_items'][$ipid] = $invoice_master[$ipid];
	     				                    $master_data_all['grand_total'][$ipid] = $grand_total[$ipid];
     				                    	$sapv_details_data[$ipid] = end($sapv_details[$ipid]);
     				                	}
									}
 				                }
 				                else
 				                {
     				                foreach($master_data[$ipid] as $k_shortcut => $v_shortcut_dates)
     				                {
     				                    foreach($v_shortcut_dates as $k_shortcut_date => $v_master_values)
     				                    {
     				
     				                        if(  $v_master_values['price'] && $v_master_values['qty'] > 0 ){ // Commented just for testing
     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut'] = $k_shortcut;
     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['qty'] += $v_master_values['qty'];
     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['price'] = $v_master_values['price'];
     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['shortcut_total'] += ($v_master_values['qty'] * $v_master_values['price']);
     				                            $invoice_master[$ipid][$k_shortcut.'_'.$v_master_values['price_list'].'_'.$v_master_values['location_type']] ['location_type'] = $v_master_values['location_type'];
     				                            $grand_total[$ipid] += ($v_master_values['qty'] * $v_master_values['price']);
     				                        }
     				                        $action_days[$ipid][] = $k_shortcut_date;
     				                    }
     				                    ksort($invoice_master[$ipid]);
     				                    $master_data_all['invoice_items'][$ipid] = $invoice_master[$ipid];
     				                    $master_data_all['grand_total'][$ipid] = $grand_total[$ipid];
     				                    $sapv_details_data[$ipid] = end($sapv_details[$ipid]);
     				                    	
     				                }
 				                }
 				                
 				                if(!empty($action_days[$ipid])){
 				                    $master_data_all['patients'][$ipid]['invoice_data']['first_active_day'] = date('d.m.Y', strtotime($action_days[$ipid][0]));
 				                    $master_data_all['patients'][$ipid]['invoice_data']['last_active_day'] = date('d.m.Y', strtotime(end($action_days[$ipid])));
 				                } else{
 				                    $master_data_all['patients'][$ipid]['invoice_data']['first_active_day'] = '0000-00-00 00:00:00';
 				                    $master_data_all['patients'][$ipid]['invoice_data']['last_active_day'] = '0000-00-00 00:00:00';
 				                }
 				
 				
 				                ksort($extra_details[$ipid]);
 				            }
 				         
 				            

 				            if($params['only_pdf'] == '0')
 				            {
 				                //ISPC-2585 Ancuta 15.06.2020
 				                if($client_invoice_type == "demstepcare_internal_invoice" && !empty($params['internal_user_id']) ){
                                    $master_data_all['userid'] = $params['internal_user_id'];
                                    $master_data_all['external_invoice_id'] = $params['external_invoice_id'];
 				                }
 				                //--
 				                $inserted_invoices = $invoices_system_form->insert_invoice($params['invoice_type'],$master_data_all);
 				                
 				            }//end only_pdf=0
 				            else
 				            {
 				                $inserted_invoices = $params['invoices'];
 				            }

 				            
 				            //ISPC-2585 Ancuta 15.06.2020
 				            if(isset($params['skip_pdf']) && $params['skip_pdf'] == 1 ){
 				                // Stop do not generate  pdf
 				                
 				                if($inserted_invoices){
     				                $res['success'] = true;
     				                $res['invoice_id'] = $inserted_invoices[0];
     				                $res['message'] = $this->translate($params['invoice_type']. 'Invoice created');
 				                } else{
     				                $res['success'] = false;
     				                $res['invoice_id'] = 0;
     				                $res['message'] = $this->translate('Error: Invoices NOT created');
 				                }
 				                return $res ; 
 				            }
 				            //-- 
 				            
 				            //load template data
 				            $template_data = InvoiceTemplates::get_template($clientid, false, '1', $client_invoice_type);
 				 
 				            //single invoice print with 2 pages
 				            
 				            if($params['get_pdf'] == "1")
 				            {
 				
 				                if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
 				                {
 				                    $invoice_data_array = $invoices_system->get_invoices($params['invoice_type'],$params['stornoid'], false, true);
 				                    
 				                    $invoice_data['storned_invoice_number'] = $invoice_data['prefix'].$invoice_data['invoice_number'];     //ISPC-2532 Lore 10.11.2020
 				                    
 				                    //ISPC-2532 Carmen 18.02.2020 - get the prefix and the number of storno invoice
 				                    $invoice_data_storno = $invoices_system->get_invoice($params['invoice_type'], $inserted_invoices[0]);
 				                    foreach($invoice_data_array['invoices_data'] as $kdata => $vdata)
 				                    {
	 				                    $invoice_data_array['invoices_data'][$kdata]['prefix'] = $invoice_data_storno[0]['prefix'];
	 				                    $invoice_data_array['invoices_data'][$kdata]['invoice_number'] = $invoice_data_storno[0]['invoice_number'];
 				                    }  
 				                    //--
 				                }
 				                else
 				                {
 				                   // $invoice_data = $invoices_system->get_invoices($params['invoice_type'],$inserted_invoices[0], false);
 				                    $invoice_data_array = $invoices_system->get_invoices($params['invoice_type'],$inserted_invoices[0], false);
 				                }
 				
 				                if(empty($invoice_data_array)){
 				                    return;
 				                }
 				                
 				                if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
 				                {
     				                $invoice_data = $invoice_data_array['invoices_data'][$params['stornoid']];
 				                    
 				                } else{
 				                    
     				                $invoice_data = $invoice_data_array['invoices_data'][$inserted_invoices[0]];
 				                }
 				                
 				                
 				                if(strlen($invoice_data['address']) > 0 ){
 				                    if(strpos($invoice_data['address'],"style"))
 				                    {
 				                        $invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
 				                    }
 				
 				                    $invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
 				                    $invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
 				                    $invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
 				                }
 				
 				
 				                //rewrite invoice_data with custom data (which comes from POST)
 				                if($params['custom_data'])
 				                {
 				                    //rewrite custom data from POST to $invoice_data.
 				                    foreach($params['custom_data'] as $k_custom => $v_custom)
 				                    {
 				                        $invoice_data[$k_custom] = $v_custom;
 				                    }
 				                }
 				
 				                $pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);
 				
 				                if($pflege_arr)
 				                {
 				                    $last_pflege = end($pflege_arr);
 				                    $invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
 				                }
 				                else
 				                {
 				                    $invoice_data['patient_pflegestufe'] = ' - ';
 				                }
 				
 				                //setup tokens (remove pseudopost when all works)
 				                $tokens = array();
 				                //client tokens
 				                $tokens['debitoren_nummer_oder_pv'] ='';
 				                $tokens['client_ik'] = $client_details[0]['institutskennzeichen'];
 				                //patient details tokens
 				                $tokens['patienten_id'] = strtoupper(html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
 				                $tokens['first_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
 				                $tokens['last_name'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
 				                $tokens['birthd'] = date('d.m.Y', strtotime($params['patient_days'][$invoice_data['ipid']]['details']['birthd']));
 				                $tokens['street'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
 				                $tokens['zip'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
 				                $tokens['city'] = html_entity_decode($params['patient_days'][$invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
 				                $tokens['patient_pflegestufe'] = html_entity_decode($invoice_data['patient_pflegestufe'], ENT_QUOTES, 'UTF-8');
 				
 				                //health insurance tokens
 				                $tokens['insurance_no'] = html_entity_decode($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
 				                $tokens['address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');//generate_rlpinvoice
 				                $tokens['SAPV_Rechnungsempfaenger'] = htmlentities($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['sapv_recipient']);//ISPC-1236
 				                $tokens['beneficiary_address'] = html_entity_decode($invoice_data['address'], ENT_QUOTES, 'UTF-8');
 				
 				
 				                //if debtor number is active and patient has number saved in invoice db get debtor number
 				                if($debtor_number_module == "1" && strlen($master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number']) > '0')
 				                {
 				                    $tokens['debtor_number'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number'];
 				                    $tokens['debitor_number'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['debtor_number'];
 				                }
 				                else
 				                {
 				                    $tokens['debtor_number'] = '';
 				                    $tokens['debitor_number'] = '';
 				                }
 				
 				
 				                //invoice specific tokens
 				                $tokens['invoiced_month'] = "";
 				                if(!empty($invoice_data['invoiced_month']) && $invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
 				                {
 				                    $tokens['invoiced_month'] = date('m/Y', strtotime($invoice_data['invoiced_month']));
 				                }
 				
 				                $tokens['invoiced_period'] = "";
 				
 				                if(!empty($invoice_data['invoice_start']) && $invoice_data['invoice_start'] != "0000-00-00 00:00:00" && !empty($invoice_data['invoice_end']) && $invoice_data['invoice_end'] != "0000-00-00 00:00:00")
 				                {
 				                    $tokens['invoiced_period'] = date('d.m.Y', strtotime($invoice_data['invoice_start'])).'-'.date('d.m.Y', strtotime($invoice_data['invoice_end']));
 				                }
 				
 				                $tokens['prefix'] = html_entity_decode($invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
 				                $tokens['invoice_number'] = html_entity_decode($invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
 				                $tokens['full_invoice_number'] = html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
 				
 				                //invoice date
 				                if($invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['completed_date'])) != "1970")
 				                {
 				                    $tokens['invoice_date'] = date('d.m.Y', strtotime($invoice_data['completed_date']));
 				                }
 				                else
 				                {
 				                    $tokens['invoice_date'] = '';
 				                }
 				
 				                //start billed action day
 				                if($invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_active'])) != "1970")
 				                {
 				                    $tokens['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
 				                }
 				                else
 				                {
 				                    $tokens['first_active_day'] = '';
 				                }
 				
 				                //end billed action day
 				                if($invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_active'])) != "1970")
 				                {
 				                    $tokens['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
 				                }
 				                else
 				                {
 				                    $tokens['last_active_day'] = '';
 				                }
 				
 				                //first sapv day
 				                if($invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['start_sapv'])) != "1970")
 				                {
 				                    $tokens['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
 				                }
 				                else
 				                {
 				                    $tokens['first_sapv_day'] = '';
 				                }
 				
 				                //last sapv day
 				                if($invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['end_sapv'])) != "1970")
 				                {
 				                    $tokens['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));
 				                }
 				                else
 				                {
 				                    $tokens['last_sapv_day'] = '';
 				                }
 				
 				                //sapv approve date
 				                if($invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($invoice_data['sapv_approve_date'])) != "1970")
 				                {
 				                    $tokens['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
 				                }
 				                elseif(date('Y', strtotime($sapv_details_data[$invoice_data['ipid']]['approved_date'])) != "1970" && strlen($invoice_data['sapv_approve_date']) > '0')
 				                {
 				                    $tokens['sapv_approve_date'] = $sapv_details_data[$invoice_data['ipid']]['approved_date'];
 				                }
 				                else
 				                {
 				                    $tokens['sapv_approve_date'] = '';
 				                }
 				
 				                if($invoice_data['sapv_approve_nr'] == "-" || strlen(trim(rtrim($invoice_data['sapv_approve_nr']))) == "0")
 				                {
 				                    $tokens['sapv_approve_nr'] = html_entity_decode($invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
 				                }
 				                else
 				                {
 				                    $tokens['sapv_approve_nr'] = html_entity_decode($sapv_details_data[$invoice_data['ipid']]['approved_number'], ENT_QUOTES, 'UTF-8');
 				                }
 				
 				                $tokens['footer'] = html_entity_decode($invoice_data['footer'], ENT_QUOTES, 'UTF-8');
 				                $tokens['invoice_items'] = $invoice_data['items'];

 				                if($invoice_data['storno'] == '1')
 				                {
 				                    //rewrite invoice prefix if storned
 				                    $tokens['prefix'] = 'STORNO_' . $tokens['prefix'];
 				                }
 				
 				                //ISPC-2532 Lore 10.11.2020
 				                if($invoice_data_storno[0]['storno'] == '1') {
 				                    $tokens['full_invoice_number'] = ' Storno '.$tokens['full_invoice_number']; // ISPC-2532 Ancuta 11.12.2020- comment from 10.12.2020 - overwtite - and add STORNO in front
 				                    $tokens['full_invoice_number'] .= ' zur Rechnung '.$invoice_data['storned_invoice_number'];
 				                }
 				                
 				                if($params['stornopdf'] == '1' && $params['stornoid'] > '0')
 				                {
 				                    $tokens['unique_id'] = $invoice_data['record_id'];
 				                    $tokens['invoice_total'] = number_format(($invoice_data['invoice_total'] * (-1)), '2', ',', '.');
 				                }
 				                else
 				                {
 				                    $tokens['unique_id'] = $invoice_data['id'];
 				                    $tokens['invoice_total'] = number_format(($invoice_data['invoice_total']), '2', ',', '.');
 				                }
 				
//  				dd($invoice_data['items'] );
 				
 				
 				            /*     foreach($invoice_data['items'] as $sh=>$sh_arr){
 				                    foreach($sh_arr as $k=>$sh_data){
 				                        $invoice_data['items_alter'][$sh.$k] = $sh_data;
 				                        $invoice_data['items_alter'][$sh.$k]['shortcut_total'] = $sh_data['total'];
 				                    }
 				                } */
 				
 				                // 				$invoice_data['items_alter'] = $this->array_sort($invoice_data['items_alter'], 'shortcut', SORT_ASC);
//  				dd($invoice_data['items_alter']);
 				                if(count($invoice_data['items']) > '0')
 				                {
 				                    $rows = count($invoice_data['items']);
 				                    $grid = new Pms_Grid($invoice_data['items'], 1, $rows, "invoicesystem_items_list_pdf.html"); //CHECK
 				                    $grid->invoice_type = $params['invoice_type'];
 				                    $grid->invoice_total = $tokens['invoice_total'];
 				                    $grid->max_entries = $rows;
 				
 				                    $html_items = $grid->renderGrid();
 				                }
 				
 				                $tokens['invoice_items_html'] = $html_items;
 				
 				                $current_period_tmp[$invoice_data['ipid']] = $current_period[$invoice_data['ipid']]['days'];
 				
 				                array_walk($current_period_tmp[$invoice_data['ipid']], function(&$value) {
 				                    $value = date("Y-m-d", strtotime($value));
 				                });
 				                $current_period_tmp[$invoice_data['ipid']] = array_values(array_unique($current_period_tmp[$invoice_data['ipid']]));
 				
 				                foreach($current_period_tmp[$invoice_data['ipid']] as $k_period => $v_period_day)
 				                {
 				                    $current_period_month_days[date('Y-m', strtotime($v_period_day))][] = $v_period_day;
 				                }
 				
 				                $patient_months[$invoice_data['id']] = array_keys($current_period_month_days);
 				
 				                foreach($patient_months[$invoice_data['id']] as $k_inv_data => $v_inv_month)
 				                {
 				                    if(!function_exists('cal_days_in_month'))
 				                    {
 				                        $month_days_nr = date('t', mktime(0, 0, 0, date("n", strtotime($v_inv_month . "-01")), 1, date("Y", strtotime($v_inv_month . "-01"))));
 				                    }
 				                    else
 				                    {
 				                        $month_days_nr = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_inv_month . "-01")), date("Y", strtotime($v_inv_month . "-01")));
 				                    }
 				
 				                    $start_month = $v_inv_month . "-01";
 				                    $end_month = $v_inv_month . '-' . $month_days_nr;
 				
 				                    $month_days_arr_source[$invoice_data['id']][date('Y-m', strtotime($start_month))] = $patientmaster->getDaysInBetween($start_month, $end_month);
 				                }

 				                $temp_files = array();
 				                if($template_data)
 				                {
 				                    
 				                    //generate invoice page
 				                    $temp_files[] = $this->generate_file($template_data[0], $tokens, 'pdf', $this->view->folder_stamp, 'generate_pdf');
 				                    	
 				                    	
 				                    $extra_details_array = array();
 				                    foreach($extra_details[$invoice_data['ipid']] as $ddate=>$action_data){
 				                        foreach($action_data as $action_type => $actions_array){
 				                            foreach($actions_array as $k=>$act_data){
 				                                if($action_type == "home_visit"){
 				                                    $action_date_full = $act_data['billable_date'];
 				                                }
 				                                elseif($action_type == "koordination" || $action_type == "telefon"){
 				                                    if($act_data['done_date'] != "0000-00-00 00:00:00"){
 				                                        $action_date_full = $act_data['done_date'];
 				                                    } else{
 				                                        $action_date_full = $act_data['course_date'];
 				                                    }
 				                                }
 				                                $act_data['sort_date'] = $action_date_full;
 				                                $act_data['alias'] = $action_type;
 				                                $extra_details_array[$invoice_data['ipid']][] = $act_data;
 				                            }
 				                        }
 				                    }
 				
 				                    usort($extra_details_array[$invoice_data['ipid']], array(new Pms_Sorter('sort_date'), "_date_compare"));
 				
 				                    $invoice_control_sheet_data['kv_header'] = $kv_header[$invoice_data['ipid']];
 				                    $invoice_control_sheet_data['patient_data'] = $patient_data_diagnos[$invoice_data['ipid']];
 				                    $invoice_control_sheet_data['alias'] = $alias;
 				                    	
 				                    //organize leistung data
 				                    $invoice_control_sheet_data['patientdetails'] = $params['patient_days'][$invoice_data['ipid']]['details'];
 				                    	
 				                    $invoice_control_sheet_data['period_days_source'] = $month_days_arr_source[$invoice_data['id']];
 				                    $invoice_control_sheet_data['period_days'] = $current_period_tmp[$invoice_data['ipid']];
 				                    $invoice_control_sheet_data['shortcuts'] = $shortcuts['performance'];
 				                    $invoice_control_sheet_data['master_data'] = $master_data[$invoice_data['ipid']];
 				                    $invoice_control_sheet_data['classification_box'] = $clasifizierung[$invoice_data['ipid']];
 				                    $invoice_control_sheet_data['extra_data_details'] = $extra_details_array[$invoice_data['ipid']];
 				                    // 					$invoice_control_sheet_data['extra_data_details'] = $extra_details[$invoice_data['ipid']];
 				                    $invoice_control_sheet_data['users_array'] = $user_array ;
 				                    $invoice_control_sheet_data['client_details'] = $client_details[0];
 				                    $invoice_control_sheet_data['health_insurance'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['hi_name'];
 				                    $invoice_control_sheet_data['insurance_no'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['insurance_no'];
 				                    $invoice_control_sheet_data['hi_subdiv_address'] = $invoice_data['address'];
 				                    $invoice_control_sheet_data['patient_pflegestufe'] = $patients_pflege[$v_pflege['ipid']];
 				                    $invoice_control_sheet_data['health_insurance_ik'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['health_insurance_ik'];
 				                    $invoice_control_sheet_data['health_insurance_kassenr'] = $master_data_all['patients'][$invoice_data['ipid']]['invoice_data']['health_insurance_kassenr'];
 				                    $invoice_control_sheet_data['first_active_day'] = date('d.m.Y', strtotime($invoice_data['start_active']));
 				                    $invoice_control_sheet_data['last_active_day'] = date('d.m.Y', strtotime($invoice_data['end_active']));
 				                    $invoice_control_sheet_data['sapv_approve_date'] = date('d.m.Y', strtotime($invoice_data['sapv_approve_date']));
 				                    $invoice_control_sheet_data['sapv_approve_nr'] = $invoice_data['sapv_approve_nr'];
 				                    $invoice_control_sheet_data['first_sapv_day'] = date('d.m.Y', strtotime($invoice_data['start_sapv']));
 				                    $invoice_control_sheet_data['last_sapv_day'] = date('d.m.Y', strtotime($invoice_data['end_sapv']));
 				                    	
 				                    $invoice_control_sheet_data['invoice_data']['invoice_number'] =  html_entity_decode($invoice_data['prefix'] . $invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');;
 				                    $invoice_control_sheet_data['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
 				                    $invoice_control_sheet_data['invoice_data']['invoice_end']  = date('d.m.Y', strtotime($invoice_data['invoice_end']));
 				
//  				                    $temp_files[] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'rlp_invoice_visits', 'rlp_contacts_pdf_items.html');
 				
 				                    //join generated files
 				                    if(count($temp_files) > '0')
 				                    {
 				                        // ISPC-2472  Ancuta 12.11.2019::create batch name
 				                        $inv_names = array();
 				                        foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
 				                            $inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
 				                        }
 				                        $Batch_name = false;
 				                        if(!empty($inv_names)){
 				                            $Batch_name = $inv_names[0];
 				                            if( count($inv_names) > 1){
 				                                $Batch_name .='_'.end($inv_names);
 				                            }
 				                        }
 				                        
 				                        $final_file = $this->generate_file($template_data[0], false, 'pdf', $this->view->folder_stamp, 'merge_pdfs', $temp_files,$Batch_name);
 				                    }
 				                }
 				                else
 				                {
 				                    $this->redirect(APP_BASE . 'invoicenew/newinvoicepatientlist?flg=notemplate');
 				                    exit;
 				                }
 				            }
 				            //batch print - multiple invoices each with 2 joined pages! // 3 pages fro the new invoice
 				            if($params['batch_print'] == '1' && count($params['invoices']) > '0')
 				            {
 				            
 				                //batch temp folder
 				                $invoices_ids = $params['invoices'];
 				
 				                //load invoices data
 				                $invoices_data = $invoices_system->get_invoices($params['invoice_type'],$invoices_ids);

 				                //TODO-3407 Ancuta 08.09.2020
 				                if(empty($invoices_data)){
 				                    return;
 				                }
 				                // -- 
 				                
 				                // ISPC-2472  Ancuta 12.11.2019::create batch name
 				                $inv_names = array();
 				                foreach($invoices_data['invoices_data'] as $kinvid=>$invdata){
 				                    $inv_names[] = $invdata['prefix'].$invdata['invoice_number'];
 				                }
 				                $Batch_name = false;
 				                if(!empty($inv_names)){
 				                    $Batch_name = $inv_names[0];
 				                    if( count($inv_names) > 1){
 				                        $Batch_name .='_'.end($inv_names);
 				                    }
 				                }
 				                //-- 				
 				                
 				                
 				                $final_files = array();
 				
 				                
 				               
 				                foreach($invoices_data['invoices_data'] as $k_invoice_id => $v_invoice_data)
 				                {
 				                    $batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $clientid);
 				
 				                    //fucking pflegestuffe i hate how this shit is saved!!! -- change this shit sometime to a better way
 				                    $pflege_arr = PatientMaintainanceStage::getpatientMaintainanceStageInPeriod($v_pat_ipid, date('Y-m-d', strtotime($v_invoice_data['invoice_start'])), date('Y-m-d', strtotime($v_invoice_data['invoice_end'])));
 				
 				                    if($pflege_arr)
 				                    {
 				                        $v_invoice_data['patient_pflegestufe'] = $last_pflege['stage'];
 				                    }
 				                    else
 				                    {
 				                        $v_invoice_data['patient_pflegestufe'] = ' - ';
 				                    }
 				
 				
 				                    if(strlen($invoice_data['address']) > 0 ){
 				                        if(strpos($invoice_data['address'],"style"))
 				                        {
 				                            $invoice_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $invoice_data['address']);
 				                        }
 				                        	
 				                        $invoice_data['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $invoice_data['address']);
 				                        $invoice_data['address'] = str_replace(array("</p>"," </p>","</p> "),"", $invoice_data['address']);
 				                        $invoice_data['address'] = str_replace(array("\n"),"<br />", $invoice_data['address']);
 				                    }
 				
 				
 				                    //setup tokens
 				                    $tokens_multi['debitoren_nummer_oder_pv'] = '';
 				                    //client tokens
 				                    $tokens_multi['client_ik'] = $client_details[0]['institutskennzeichen'];
 				
 				                    //patient details tokens
 				                    $tokens_multi['patienten_id'] = strtoupper(html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['epid'], ENT_QUOTES, 'UTF-8'));
 				                    $tokens_multi['first_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['first_name'], ENT_QUOTES, 'UTF-8');
 				                    $tokens_multi['last_name'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['last_name'], ENT_QUOTES, 'UTF-8');
 				                    $tokens_multi['birthd'] = date('d.m.Y', strtotime($patient_days[$v_invoice_data['ipid']]['details']['birthd']));
 				                    $tokens_multi['street'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['street1'], ENT_QUOTES, 'UTF-8');
 				                    $tokens_multi['zip'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['zip'], ENT_QUOTES, 'UTF-8');
 				                    $tokens_multi['city'] = html_entity_decode($patient_days[$v_invoice_data['ipid']]['details']['city'], ENT_QUOTES, 'UTF-8');
 				                    $tokens_multi['patient_pflegestufe'] = $v_invoice_data['patient_pflegestufe'];
 				
 				                    //health insurance tokens
 				                    //$tokens_multi['insurance_no'] = html_entity_decode($patient_days['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
 				                    $tokens_multi['insurance_no'] = html_entity_decode($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'], ENT_QUOTES, 'UTF-8');
 				                    $tokens_multi['beneficiary_address'] = html_entity_decode($v_invoice_data['address'], ENT_QUOTES, 'UTF-8');
 				
 				                    $tokens_multi['address'] = html_entity_decode($v_invoice_data['address'], ENT_QUOTES, 'UTF-8');//generate_rlpinvoice
 				                    $tokens_multi['SAPV_Rechnungsempfaenger'] = htmlentities($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['sapv_recipient']);//ISPC-1236
 				
 				                    //if debtor number is active and patient has number saved in invoice db get debtor number< for this invoice, no debtor_number in db
 				                    if($debtor_number_module == "1" && strlen($master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number']) > '0')
 				                    {
 				                        $tokens_multi['debtor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
 				                        $tokens_multi['debitor_number'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['debtor_number'];
 				                    }
 				                    else
 				                    {
 				                        $tokens_multi['debtor_number'] = '';
 				                        $tokens_multi['debitor_number'] = '';
 				                    }
 				                    	
 				                    	
 				                    //invoice specific tokens
 				                    $tokens_multi['invoiced_month'] = "";
 				                    if(!empty($v_invoice_data['invoiced_month']) && $v_invoice_data['invoiced_month'] != "0000-00-00 00:00:00")
 				                    {
 				                        $tokens_multi['invoiced_month'] = date('m/Y', strtotime($v_invoice_data['invoiced_month']));
 				                    }
 				
 				                    $tokens_multi['prefix'] = html_entity_decode($v_invoice_data['prefix'], ENT_QUOTES, 'UTF-8');
 				                    $tokens_multi['invoice_number'] = html_entity_decode($v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
 				                    $tokens_multi['full_invoice_number'] = html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');
 				
 				                    //invoice date
 				                    if($v_invoice_data['completed_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['completed_date'])) != "1970")
 				                    {
 				                        $tokens_multi['invoice_date'] = date('d.m.Y', strtotime($v_invoice_data['completed_date']));
 				                    }
 				                    else
 				                    {
 				                        $tokens_multi['invoice_date'] = '';
 				                    }
 				
 				                    //start billed action day
 				                    if($v_invoice_data['start_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_active'])) != "1970")
 				                    {
 				                        $tokens_multi['first_active_day'] = date('d.m.Y', strtotime($v_invoice_data['start_active']));
 				                    }
 				                    else
 				                    {
 				                        $tokens_multi['first_active_day'] = '';
 				                    }
 				
 				                    //end billed action day
 				                    if($v_invoice_data['end_active'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_active'])) != "1970")
 				                    {
 				                        $tokens_multi['last_active_day'] = date('d.m.Y', strtotime($v_invoice_data['end_active']));
 				                    }
 				                    else
 				                    {
 				                        $tokens_multi['last_active_day'] = '';
 				                    }
 				
 				                    //first sapv day
 				                    if($v_invoice_data['start_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['start_sapv'])) != "1970")
 				                    {
 				                        $tokens_multi['first_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['start_sapv']));
 				                    }
 				                    else
 				                    {
 				                        $tokens_multi['first_sapv_day'] = '';
 				                    }
 				
 				                    //last sapv day
 				                    if($v_invoice_data['end_sapv'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['end_sapv'])) != "1970")
 				                    {
 				                        $tokens_multi['last_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['end_sapv']));
 				                    }
 				                    else
 				                    {
 				                        $tokens_multi['last_sapv_day'] = '';
 				                    }
 				                    //sapv approve date
 				                    if($v_invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['sapv_approve_date'])) != "1970")
 				                    {
 				                        $tokens_multi['sapv_approve_date'] = date('d.m.Y', strtotime($v_invoice_data['sapv_approve_date']));
 				                    }
 				                    elseif(date('Y', strtotime($sapv_details_data[$v_invoice_data['ipid']]['approved_date'])) != "1970" && strlen($v_invoice_data['sapv_approve_date']) > '0')
 				                    {
 				                        $tokens_multi['sapv_approve_date'] = $sapv_details_data[$v_invoice_data['ipid']]['approved_date'];
 				                    }
 				                    else
 				                    {
 				                        $tokens_multi['sapv_approve_date'] = '';
 				                    }
 				                    	
 				                    /* if($v_invoice_data['sapv_approve_date'] != '0000-00-00 00:00:00' && date('Y', strtotime($v_invoice_data['sapv_approve_date'])) != "1970")
 				                     {
 				                     $tokens_multi['sapv_approve_date'] = date('d.m.Y', strtotime($v_invoice_data['sapv_approve_date']));
 				                     }
 				                     else
 				                     {
 				                     $tokens_multi['sapv_approve_date'] = '';
 				                     } */
 				
 				                    //$tokens_multi['sapv_approve_nr'] = html_entity_decode($v_invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
 				
 				                    	
 				                    	
 				
 				                    if($v_invoice_data['sapv_approve_nr'] == "-" || strlen(trim(rtrim($v_invoice_data['sapv_approve_nr']))) == "0")
 				                    {
 				                        $tokens_multi['sapv_approve_nr'] = html_entity_decode($v_invoice_data['sapv_approve_nr'], ENT_QUOTES, 'UTF-8');
 				                    }
 				                    else
 				                    {
 				                        $tokens_multi['sapv_approve_nr'] = html_entity_decode($sapv_details_data[$v_invoice_data['ipid']]['approved_number'], ENT_QUOTES, 'UTF-8');
 				                    }
 				                    	
 				                    	
 				                    $tokens_multi['footer'] = html_entity_decode($v_invoice_data['footer'], ENT_QUOTES, 'UTF-8');
 				
 				
 				                    $tokens_multi['invoiced_period'] = "";
 				                    	
 				                    if(!empty($v_invoice_data['invoice_start']) && $v_invoice_data['invoice_start'] != "0000-00-00 00:00:00" && !empty($v_invoice_data['invoice_end']) && $v_invoice_data['invoice_end'] != "0000-00-00 00:00:00")
 				                    {
 				                        $tokens_multi['invoiced_period'] = date('d.m.Y', strtotime($v_invoice_data['invoice_start'])).'-'.date('d.m.Y', strtotime($v_invoice_data['invoice_end']));
 				                    }
 				                    	
 				                    	
 				                    if($v_invoice_data['storno'] == '1')
 				                    {
 				                        //rewrite invoice prefix if storned
 				                        $tokens_multi['prefix'] = 'STORNO_' . $tokens['prefix'];
 				                        $tokens_multi['unique_id'] = $v_invoice_data['record_id'];
 				                        $tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total'] * (-1)), '2', ',', '.');
 				                    }
 				                    else
 				                    {
 				                        $tokens_multi['unique_id'] = $v_invoice_data['id'];
 				                        $tokens_multi['invoice_total'] = number_format(($v_invoice_data['invoice_total']), '2', ',', '.');
 				                    }
 				
 				                    /* if(count($v_invoice_data['items']) > '0')
 				                     {
 				                     $rows = count($v_invoice_data['items']);
 				
 				                     $grid = new Pms_Grid($v_invoice_data['items'], 1, $rows, "rlp_invoice_items_list_pdf.html");
 				                     $grid->invoice_total = $tokens_multi['invoice_total'];
 				                     $grid->max_entries = $rows;
 				
 				                     $html_items = $grid->renderGrid();
 				                     } */
 				                    	
//  				                    foreach($v_invoice_data['items'] as $sh=>$sh_arr){
//  				                        foreach($sh_arr as $k=>$sh_data){
//  				                            $v_invoice_data['items_alter'][$sh.$k] = $sh_data;
//  				                            $v_invoice_data['items_alter'][$sh.$k]['shortcut_total'] = $sh_data['total'];
//  				                        }
//  				                    }
 				                    	
 				                    if(count($v_invoice_data['items']) > '0')
 				                    {
 				                        $rows = count($v_invoice_data['items']);
 				                        	
 				                        $grid = new Pms_Grid($v_invoice_data['items'], 1, $rows, "invoicesystem_items_list_pdf.html");
 				                        $grid->invoice_total = $tokens_multi['invoice_total'];
 				                        $grid->invoice_type = $params['invoice_type'];
 				                        $grid->max_entries = $rows;
 				                        	
 				                        $html_items = $grid->renderGrid();
 				                    }
 				                    else 
 				                    {
 				                    	$html_items = '';
 				                    }
 				                    	
 				
 				                    $tokens_multi['invoice_items_html'] = $html_items;
 				
 				
 				                    $current_invoices_period[$v_invoice_data['id']] = $patientmaster->getDaysInBetween($v_invoice_data['invoice_start'], $v_invoice_data['invoice_end']);
 				
 				                    $current_period_tmp[$v_invoice_data['id']] = $current_invoices_period[$v_invoice_data['id']];
 				
 				                    array_walk($current_period_tmp[$v_invoice_data['id']], function(&$value) {
 				                        $value = date("Y-m-d", strtotime($value));
 				                    });
 				
 				                        $current_period_tmp[$v_invoice_data['id']] = array_values(array_unique($current_period_tmp[$v_invoice_data['id']]));
 				
 				                        foreach($current_period_tmp[$v_invoice_data['id']] as $k_period => $v_period_day)
 				                        {
 				                            $current_period_month_days[date('Y-m', strtotime($v_period_day))][] = $v_period_day;
 				                        }
 				
 				                        $patient_months[$v_invoice_data['id']] = array_keys($current_period_month_days);
 				
 				                        foreach($patient_months[$v_invoice_data['id']] as $k_inv_data => $v_inv_month)
 				                        {
 				                            if(!function_exists('cal_days_in_month'))
 				                            {
 				                                $month_days_nr = date('t', mktime(0, 0, 0, date("n", strtotime($v_inv_month . "-01")), 1, date("Y", strtotime($v_inv_month . "-01"))));
 				                            }
 				                            else
 				                            {
 				                                $month_days_nr = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_inv_month . "-01")), date("Y", strtotime($v_inv_month . "-01")));
 				                            }
 				
 				                            $start_month = $v_inv_month . "-01";
 				                            $end_month = $v_inv_month . '-' . $month_days_nr;
 				
 				                            $month_days_arr_source[$v_invoice_data['id']][date('Y-m', strtotime($start_month))] = $patientmaster->getDaysInBetween($start_month, $end_month);
 				                        }
 				
 				                        $temp_files = array();
 				                        if($template_data)
 				                        {
 				
 				                            //generate invoice page
 				                            if(isset($params['print_job']) && $params['print_job'] == '1'){
 				                                
 				                                $print_params = array();
 				                                $print_params = $params;
 				                                $print_params['template_data'] = $template_data[0];
 				                                $print_params['vars'] = $tokens_multi;
 				                                $print_params['export_file_type'] = "pdf";
 				                                
 				                                $batch_temp_files = $this->print_job_generate_and_save_file($print_params);
 				                                
 				                                return $batch_temp_files ;
 				                                
 				                            } else {
     				                            $temp_files[$v_invoice_data['id']][] = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'generate_pdf');
 				                            }
 				
 				                            // Changed for  ISPC-1562 BW Nachweis - added a new pdf version
 				
 				
 				                            $extra_details_array = array();
 				                            foreach($extra_details[$v_invoice_data['ipid']] as $ddate=>$action_data){
 				                                foreach($action_data as $action_type => $actions_array){
 				                                    foreach($actions_array as $k=>$act_data){
 				                                        if($action_type == "home_visit"){
 				                                            $action_date_full = $act_data['billable_date'];
 				                                        }
 				                                        elseif($action_type == "koordination" || $action_type == "telefon"){
 				                                            if($act_data['done_date'] != "0000-00-00 00:00:00"){
 				                                                $action_date_full = $act_data['done_date'];
 				                                            } else{
 				                                                $action_date_full = $act_data['course_date'];
 				                                            }
 				                                        }
 				                                        $act_data['sort_date'] = $action_date_full;
 				                                        $act_data['alias'] = $action_type;
 				                                        $extra_details_array[$v_invoice_data['ipid']][] = $act_data;
 				                                    }
 				                                }
 				                            }
 				                            	
 				                            usort($extra_details_array[$v_invoice_data['ipid']], array(new Pms_Sorter('sort_date'), "_date_compare"));
 				                            	
 				                            	
 				
 				                            $invoice_control_sheet_data['kv_header'] = $kv_header[$v_invoice_data['ipid']];
 				                            $invoice_control_sheet_data['patient_data'] = $patient_data_diagnos[$v_invoice_data['ipid']];
 				                            $invoice_control_sheet_data['alias'] = $alias;
 				
 				                            //organize leistung data
 				                            $invoice_control_sheet_data['patientdetails'] = $params['patient_days'][$v_invoice_data['ipid']]['details'];
 				
 				                            $invoice_control_sheet_data['period_days_source'] = $month_days_arr_source[$v_invoice_data['id']];
 				                            $invoice_control_sheet_data['period_days'] = $current_period_tmp[$v_invoice_data['ipid']];
 				                            $invoice_control_sheet_data['shortcuts'] = $shortcuts['performance'];
 				                            $invoice_control_sheet_data['master_data'] = $master_data[$v_invoice_data['ipid']];
 				                            $invoice_control_sheet_data['classification_box'] = $clasifizierung[$v_invoice_data['ipid']];
 				                            // 							$invoice_control_sheet_data['extra_data_details'] = $extra_details[$v_invoice_data['ipid']];
 				                            $invoice_control_sheet_data['extra_data_details'] = $extra_details_array[$v_invoice_data['ipid']];
 				                            $invoice_control_sheet_data['users_array'] = $user_array ;
 				                            $invoice_control_sheet_data['client_details'] = $client_details[0];
 				                            $invoice_control_sheet_data['health_insurance'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['hi_name'];
 				                            $invoice_control_sheet_data['insurance_no'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['insurance_no'];
 				                            $invoice_control_sheet_data['hi_subdiv_address'] = $v_invoice_data['address'];
 				                            $invoice_control_sheet_data['patient_pflegestufe'] = $patients_pflege[$v_pflege['ipid']];
 				                            $invoice_control_sheet_data['health_insurance_ik'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['health_insurance_ik'];
 				                            $invoice_control_sheet_data['health_insurance_kassenr'] = $master_data_all['patients'][$v_invoice_data['ipid']]['invoice_data']['health_insurance_kassenr'];
 				                            $invoice_control_sheet_data['first_active_day'] = date('d.m.Y', strtotime($v_invoice_data['start_active']));
 				                            $invoice_control_sheet_data['last_active_day'] = date('d.m.Y', strtotime($v_invoice_data['end_active']));
 				                            $invoice_control_sheet_data['sapv_approve_date'] = date('d.m.Y', strtotime($v_invoice_data['sapv_approve_date']));
 				                            $invoice_control_sheet_data['sapv_approve_nr'] = $v_invoice_data['sapv_approve_nr'];
 				                            $invoice_control_sheet_data['first_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['start_sapv']));
 				                            $invoice_control_sheet_data['last_sapv_day'] = date('d.m.Y', strtotime($v_invoice_data['end_sapv']));
 				
 				                            $invoice_control_sheet_data['invoice_data']['invoice_number'] =  html_entity_decode($v_invoice_data['prefix'] . $v_invoice_data['invoice_number'], ENT_QUOTES, 'UTF-8');;
 				                            $invoice_control_sheet_data['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($v_invoice_data['invoice_start']));
 				                            $invoice_control_sheet_data['invoice_data']['invoice_end']  = date('d.m.Y', strtotime($v_invoice_data['invoice_end']));
 				                            	
//  				                            $temp_files[$v_invoice_data['id']][] = $this->generate_joined_files_pdf('4', $invoice_control_sheet_data, 'rlp_invoice_visits', 'rlp_contacts_pdf_items.html');
 				                            	
 				                            	
 				                            //join generated files
 				                            if(count($temp_files[$v_invoice_data['id']]) > '0')
 				                            {
 				                                $final_files[$v_invoice_data['id']] = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'merge_pdfs_multiple', $temp_files[$v_invoice_data['id']]);
 				                            }
 				                        }
 				
 				                        $tokens_multi = array();
 				                        $invoice_control_sheet_data = array();
 				                }
 				               
 				                $final_files = array_values($final_files);
 				
 				                if(count($final_files) > '0')
 				                {
 				                    //final cleanup (check if files are on disk)
 				                    foreach($final_files as $k_temp => $v_file)
 				                    {
 				                        if(!is_file($v_file))
 				                        {
 				                            //remove unexisting files
 				                            //							$unsetted_files[] = $v_file; //for debugs
 				                            unset($final_files[$v_file]);
 				                        }
 				                    }
 				
 				                    $remaining_temp_files = array_values(array_unique($final_files));
 				
 				
 				                    if(count($remaining_temp_files) > '0')
 				                    {
 				                        //ISPC-2472  Ancuta 12.11.2019::added batch name
 				                        $final_file = $this->generate_file($template_data[0], $tokens_multi, 'pdf', $batch_temp_folder, 'merge_pdfs', $final_files,$Batch_name);
 				                    }
 				                }
 				                exit;
 				            }
 				}
 				
 				
 				
 				
 				
 				
 				
 				
 				
 				
 				
 				
 				
 				
 				
 				
 				
 				
 				
		private function _editinvoice_generate_pdf_and_download($template = '', $tokenfilter = array(), $download_nice_name = 'Invoice')
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    //dd($tokenfilter);
		    //die(print_r(func_get_args(), true));
		    $docx_helper = $this->getHelper('CreateDocxFromTemplate');
		
		    //$docx_helper->test_all_invoice_templates($template, $tokenfilter , 'pdf');
		
		    $name = time();
		
		    $docx_helper->setOutputFile(PDFDOCX_PATH . '/' . $clientid . '/' . $name);
		
		    //do not add extension !
		    $docx_helper->setBrowserFilename($download_nice_name);
		
		    $docx_helper->create_pdf ($template, $tokenfilter) ;
		
		    $docx_helper->file_save_on_ftp();
		
		    $docx_helper->download_file();
		} 				

		
        /**
        * TODO-2058 p2 Ancuta 31.01.2019  
        */
		public function rlpproductsAction(){
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;

		    
		    // save changes 
		    if($this->getRequest()->isPost())
		    {
		        // first clear all entries
	            $update_invoice = Doctrine_Query::create()
	            ->update("RlpProducts")
	            ->set('isdelete', '1')
	            ->where('client = ?', $clientid );
	            $update_invoice->execute();
		        
		        
		        if(!empty($_POST['RlpProducts'])){
		            $ident = array();
		            
		            foreach($_POST['RlpProducts'] as $shortcut=>$identification){
		                $ident[] =array(
		                    'client'=>$clientid,
		                    'shortcut'=>$shortcut,
		                    'identification'=>$identification
		                    
		                );
		            }
		            
		            if(!empty($ident)){
		                $collection = new Doctrine_Collection('RlpProducts');
		                $collection->fromArray($ident);
		                $collection->save();
		            }
		            
		            $this->redirect(APP_BASE . 'invoicenew/rlpproducts?flg=success');
		            exit;
		        }
		        
		    } else{
    		    // products
    		    $rlp_invoice = new RlpInvoices();
    		    $system_products = $rlp_invoice->rlp_products_ident();
    		    $products_list = $rlp_invoice->rlp_products();
                // get RLP products - identigfication- SAVED
    		    $client_products = array();
    		    $client_products = RlpProductsTable::find_client_products($clientid);
    
    		    $this->view->products_list = $products_list;
    		    $this->view->client_products = $client_products;
		    }	    
		    
		}
		
		
		
		/**
		 * ISPC-2286
		 * @cla on 05.02.2019
		 */
		private function __invoicesnew_hl7_ft1()
		{
		    
		    $result = [
		        'result'  => true,
		        //'message' => null, //'send a generic message',
		        'acks' => null
		    ];
		    
		    
		    $iids = ($this->getRequest()->getPost('iids', null));
		    
		    
		    if ( ! ($HL7_cfg = $this->getInvokeArg('bootstrap')->getOption('HL7_send'))
		        || ! isset($HL7_cfg[$this->logininfo->clientid])
		        || ! ($serverHL7_addr = $HL7_cfg[$this->logininfo->clientid]['ft1']['host'])
		        || ! ($serverHL7_port = $HL7_cfg[$this->logininfo->clientid]['ft1']['port'])
		        ) 
		    {
		        $result['type'] = 'warning';
		        $result['message'] = $this->translate('HL7-FT1 config is missing');
		    
		    } elseif (empty($iids) || ! is_array($iids)) {
		        //what did you post?
		        $result['type'] = 'warning';
		        $result['message'] = $this->translate('No invoice selected for which to transmit HL7');
		        
		    } else {
		    
		        /*
		         * TODO
		         * check to see if user allowed to edit this invoice number
		         *
		         * $this->assertInvoiceAllowed();
		         */
		        
		        
    		    include 'DtaController.php';
    		    
    		    $dtaController = new DtaController($this->_request, $this->_response);
    		    $dta_data = $dtaController->gather_dta_is_data($this->logininfo->clientid, $invoice_type = 'nr_invoice', $this->logininfo->userid, [
    		        'invoices' => [
    		            $invoice_type => $iids
    		        ]
    		    ]);
    		    
    		    
    		    if (empty($dta_data)) {
    		        //horror, this should never be
    		        $result['type'] = 'error';
    		        $result['message'] = $this->translate('Failed to identify invoice to transmit HL7, please contact admin');
    		    } else {
    		        // ISPC-2459 Ancuta 11.10.2019
    		        // SEND FIRST ACTIVATION
                   /*  $activation_approved = 1;
                    if( $activation_approved == 1){
    		            $result = [
    		                'zacks_activation' => null
    		            ];
    		            
        		        $hl7_acks_activation = $this->__invoicesnew_hl7_ft1_transmitActivation($dta_data, $dtaController->invoices_system_data);
        		        
        		        foreach ($hl7_acks_activation as $inv_id => $item_activation_sent) {
            		        foreach ($item_activation_sent as $activation_date => $Hl7MessageSent) {
            		            if ($Hl7MessageSent instanceof Hl7MessagesSent) {
            		                $result['zacks_activation'][$inv_id][$activation_date]= [
            		                    'iid' => $inv_id,
            		                    'message_sent'    => APPLICATION_ENV != 'production' ? $Hl7MessageSent->message : null,
            		                    'message_ack'     => $Hl7MessageSent->message_ack,
            		                    'send_ok'         => $Hl7MessageSent->send_ok,
            		        
            		        
            		                    'hl7_ft1_title'   => 'ACTIVATION '.$this->translate("invoice_number_placeholder") . ' ' . $this->__iid2invoicenumber_activation[$inv_id],
            		                    'hl7_ft1_text'    => ($Hl7MessageSent->send_ok == 'yes' ? $this->translate('HL7-FT1- ACTIVATION- was sent') : $this->translate("HL7-FT1- ACTIVATION- was sent but failed"))
            		                    . ($Hl7MessageSent->send_trys > 1 ?  $this->translate("(%s times)" , $Hl7MessageSent->send_trys) : '')
            		                    ,//this text is to replace the current link text
            		        
            		                ];
            		            } else {
            		        
            		            }
            		        }
        		        }
    		        } */
    		        
 
    		        
    		        
    		        $hl7_acks = $this->__invoicesnew_hl7_ft1_transmit($dta_data, $dtaController->invoices_system_data);
    		        
    		        foreach ($hl7_acks as $iid => $Hl7MessageSent) {
    		            if ($Hl7MessageSent instanceof Hl7MessagesSent) {
        		            $result['acks'][$iid] = [
        		                'iid' => $iid,
        		                'message_sent'    => APPLICATION_ENV != 'production' ? $Hl7MessageSent->message : null,
        		                'message_ack'     => $Hl7MessageSent->message_ack,
        		                'send_ok'         => $Hl7MessageSent->send_ok,

        		                
        		                'hl7_ft1_title'   => $this->translate("invoice_number_placeholder") . ' ' . $this->__iid2invoicenumber[$iid],
        		                'hl7_ft1_text'    => ($Hl7MessageSent->send_ok == 'yes' ? $this->translate('HL7-FT1 was sent') : $this->translate("HL7-FT1 was sent but failed"))
        		                . ($Hl7MessageSent->send_trys > 1 ?  $this->translate("(%s times)" , $Hl7MessageSent->send_trys) : '')
        		                ,//this text is to replace the current link text
        		            
        		                
        		                
        		            ];
    		            } else {
    		                
    		            }
    		        }
    		    }
		    }
		    
		    $this->_helper->json->sendJson($result);
		    
		    exit; //for read-ability
		    
		}
		
		/**
		 * Ancuta 12.05.2020
		 * 
		 */
		private function __invoicesnew_hl7_activation()
		{
		    
		    $result = [
		        'result'  => true,
		        //'message' => null, //'send a generic message',
		        'acks' => null
		    ];
		   
		    
		    $iids = ($this->getRequest()->getPost('iids', null));
		    
		    
		    if ( ! ($HL7_cfg = $this->getInvokeArg('bootstrap')->getOption('HL7_send'))
		        || ! isset($HL7_cfg[$this->logininfo->clientid])
		        || ! ($serverHL7_addr = $HL7_cfg[$this->logininfo->clientid]['ft1']['host'])
		        || ! ($serverHL7_port = $HL7_cfg[$this->logininfo->clientid]['ft1']['port'])
		        ) 
		    {
		        $result['type'] = 'warning';
		        $result['message'] = $this->translate('HL7-FT1 config is missing');
		    
		    } elseif (empty($iids) || ! is_array($iids)) {
		        //what did you post?
		        $result['type'] = 'warning';
		        $result['message'] = $this->translate('No invoice selected for which to transmit HL7');
		        
		    } else {
		    
		        /*
		         * TODO
		         * check to see if user allowed to edit this invoice number
		         *
		         * $this->assertInvoiceAllowed();
		         */
		        
		        
    		    include 'DtaController.php';
    		    
    		    $dtaController = new DtaController($this->_request, $this->_response);
    		    $dta_data = $dtaController->gather_dta_is_data($this->logininfo->clientid, $invoice_type = 'nr_invoice', $this->logininfo->userid, [
    		        'invoices' => [
    		            $invoice_type => $iids
    		        ]
    		    ]);
    		    
    		    
    		    if (empty($dta_data)) {
    		        //horror, this should never be
    		        $result['type'] = 'error';
    		        $result['message'] = $this->translate('Failed to identify invoice to transmit HL7, please contact admin');
    		    } else {
		            $result = [
		                'zacks_activation' => null
		            ];
		            
		            
		            
    		        $hl7_acks_activation = $this->__invoicesnew_hl7_ft1_transmitActivation($dta_data, $dtaController->invoices_system_data);
    		        
    		        foreach ($hl7_acks_activation as $inv_id => $item_activation_sent) {
        		        foreach ($item_activation_sent as $activation_date => $Hl7MessageSent) {
        		            if ($Hl7MessageSent instanceof Hl7MessagesSent) {
        		                $result['zacks_activation'][$inv_id][$activation_date]= [
        		                    'iid' => $inv_id,
        		                    'message_sent'    => APPLICATION_ENV != 'production' ? $Hl7MessageSent->message : null,
        		                    'message_ack'     => $Hl7MessageSent->message_ack,
        		                    'send_ok'         => $Hl7MessageSent->send_ok,
        		        
        		        
        		                    'hl7_ft1_title'   => 'ACTIVATION '.$this->translate("invoice_number_placeholder") . ' ' . $this->__iid2invoicenumber_activation[$inv_id],
        		                    'hl7_ft1_text'    => ($Hl7MessageSent->send_ok == 'yes' ? $this->translate('HL7-FT1- ACTIVATION- was sent') : $this->translate("HL7-FT1- ACTIVATION- was sent but failed"))
        		                    . ($Hl7MessageSent->send_trys > 1 ?  $this->translate("(%s times)" , $Hl7MessageSent->send_trys) : '')
        		                    ,//this text is to replace the current link text
        		        
        		                ];
        		            } else {
        		        
        		            }
        		        }
    		        }
    		        
    		    }
		    }
		    
		    $this->_helper->json->sendJson($result);
		    
		    exit; //for read-ability
		    
		}
		
		
		

		/**
		 * ISPC-2286
		 * @cla on 05.02.2019
		 * 
		 * @param array $data_array - this is in the format returned by DtaController::gather_dta_is_data()
		 * @param array $invoice2ipid
		 * @return void|multitype:NULL
		 */
		private function __invoicesnew_hl7_ft1_transmit(array $data_array = [], array $invoices_system_data = [])
		{
		    $resultsACK = []; // Collection Doctrine
		    
    	    if (empty($data_array))
        	        return;
		    	
    	    
    	    
    	    if ( ! ($HL7_cfg = $this->getInvokeArg('bootstrap')->getOption('HL7_send')) 
    	        || ! isset($HL7_cfg[$this->logininfo->clientid]) 
    	        || ! ($serverHL7_addr = $HL7_cfg[$this->logininfo->clientid]['ft1']['host'])
    	        || ! ($serverHL7_port = $HL7_cfg[$this->logininfo->clientid]['ft1']['port'])
	        ) {
	            return;
	        }
    	    
	        $hl7_proxy_sender_url = $HL7_cfg[$this->logininfo->clientid]['ft1']['proxy_sender_url'];
	        
    	   
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    	
		    
		    $invoice2ipid = array_column($invoices_system_data, 'ipid', 'id');
		    
		    if ( ! empty($invoice2ipid)) {
		        $epidNUM =  Doctrine_Core::getTable('EpidIpidMapping')->createQuery('fnd INDEXBY ipid')->select('epid_num, ipid')->whereIn('ipid', array_values($invoice2ipid))->fetchArray();
		        $invoice2epidnum = array_map(function($i) use ($epidNUM) {return $epidNUM[$i]['epid_num'];}, $invoice2ipid);		         
		    }
		    	
		    
		    
		    foreach ($data_array as $invoice_key => $invoice)
		    {
		        
		        
		        
		        $internal_invoice_ID = (int)str_replace('invoice_', '', $invoice_key);
		        $batchID = explode(":", $invoice['number']);
		        $batchID = $batchID[0];
		        //$batchID = (int)filter_var($batchID, FILTER_SANITIZE_NUMBER_INT);
		        
		        
		        
		        $message = new Net_HL7_Message();
		        
		            
		         
		        $MSH = new Net_HL7_Segments_MSH();
		        $MSH->setMessageType("DFT");//Detail financial transactions
		        $MSH->setTriggerEvent("P03");//DFT/ACK - Post detail financial transaction
		        $MSH->setCharacterSet("ISO-8859-15");
		        
		        
		        
		        if (APPLICATION_ENV != 'production') {
		            $MSH->setSendingApplication("ISPC-TEST");
		            $MSH->setSendingFacility("TESTING-ORW");
		        }
		        $message->addSegment($MSH);
		         
		         
		        $ENV = new Net_HL7_Segments_EVN();
		        $ENV->setEventTypeCode('P03');
		        //$ENV->setRecordedDate(date('YmdHis'));
		        $ENV->setEventOccurred($invoice['date']);
		         
		        $message->addSegment($ENV);
		
		         
		        $PID = new Net_HL7_Segments_PID();
		         
		        if (isset($invoice2epidnum) && isset($invoice2epidnum[$internal_invoice_ID]))
		            $PID->setPatientID($invoice2epidnum[$internal_invoice_ID]);
		         
// 		        $PID->setPatientName(iconv('UTF-8', 'ISO-8859-15', $invoice['patient']['last_name']), iconv('UTF-8', 'ISO-8859-15', $invoice['patient']['first_name']));
		        $PID->setPatientName($invoice['patient']['last_name'], $invoice['patient']['first_name']);
		        $PID->setDateOfBirth($invoice['patient']['birthday']);
// 		        $PID->setAddress(iconv('UTF-8', 'ISO-8859-15', $invoice['patient']['address']), iconv('UTF-8', 'ISO-8859-15', $invoice['patient']['city']), $invoice['patient']['zip']);
		        $PID->setAddress($invoice['patient']['address'], $invoice['patient']['city'], $invoice['patient']['zip']);
		        $message->addSegment($PID);
		         
		        
		        /*
		         * removed the DG from the message
		         */
		        /*
		        if ( ! empty($invoice['diagnosis'])) {
		            foreach ($invoice['diagnosis'] as $diag_key=>$diag_code) {
		                 
		                if (strpos($diag_key, 'icdcode_') === 0) {
		                     
		                    $diag_key = str_replace('icdcode_', '', $diag_key);
		                    $diag_text = $invoice['diagnosis']["icdname_{$diag_key}"];
		                     
		                    $dg1_code = [
		                        $diag_code,
		                        $diag_text,
		                    ];
		                     
		                    if ( ! empty($diag_code)) $dg1_code[] = 'I10';
		                     
		                    $DG1 = new Net_HL7_Segments_DG1();
		                    $DG1->setDiagnosisCode($dg1_code);
		                    $DG1->setDiagnosisType('W');
		                     
		                    $message->addSegment($DG1);
		                }
		                 
		            }
		            unset($DG1);
		        }
		        */

		        
		        /*
		         * we do not generate the PV1... we just send back what we received ...
		         * notice start_active + end_active are used, NOT invoice_start + invoice_end
		         */
		        $PV1 = $this->__invoicesnew_hl7_ft1_pv1($invoice2ipid[$internal_invoice_ID], $invoices_system_data[$internal_invoice_ID]['start_active'], $invoices_system_data[$internal_invoice_ID]['end_active']);
		        if ($PV1 instanceof Net_HL7_Segments_PV1) {
		            $message->addSegment($PV1);
		        }
		        
		        
		        
		        foreach ($invoice['items'] as $item) {
		            
		            foreach ($item['actions'] as $action) {
		
		                $FT1 = new Net_HL7_Segments_FT1();
		
		                if ($batchID) {
		                    $FT1->setTransactionBatchID($batchID);
		                }
		
		                $FT1->setTransactionDate($action['day'] . "120000");
		                $FT1->setTransactionType('CD');
		                $FT1->setTransactionCode([$action['dta_id'], $action['dta_name']]);
		                $FT1->setTransactionQuantity(str_replace(',', '.', ltrim($action['ammount'], "0")));
		                $FT1->setTransactionAmountUnit([[str_replace(',', '.', $action['price'])]]);
		
		                $message->addSegment($FT1);
		            }
		        }
		         
		        $messageRESPONSE = '';
		        $send_ok =  null; // if MSA-1 == AA => 'yes', elseif other code => 'no',  else => 'null'
		        
		        try {

		            if ( ! empty($hl7_proxy_sender_url)) {
		                
 		                $messageRESPONSE = $this->__invoicesnew_hl7_ft1_transmit_CURL($hl7_proxy_sender_url, $serverHL7_addr, $serverHL7_port, $message->toString());
		                
		            } else {
		                
    		            $hl7_connection = new Net_HL7_Connection($serverHL7_addr, $serverHL7_port);
         	            $messageRESPONSE = $hl7_connection->send($message);
		            }
		            
    	            
    	            if ( ! empty($messageRESPONSE)) {
    	                $messageMSA = new Net_HL7_Message($messageRESPONSE);
    	                $MSA = $messageMSA->getSegmentsByName('MSA')[0];
    	                if ($MSA instanceof Net_HL7_Segments_MSA && $MSA->getAcknowledgementCode() == "AA") {
    	                    //all was ok?
    	                    $send_ok =  'yes';
    	                } else {
    	                    $send_ok =  'no';// you have as AE or AC .. get messages for error it they send any
    	                }
    	            }
		        } catch (Exception $e) {
		            
		        }
		        
		        unset($FT1);
		        
		        $resultsACK[$internal_invoice_ID] = Hl7MessagesSentTable::getInstance()->findOrCreateOneBy(
		            ['parent_table', 'parent_table_id', 'message_type'],
		            ['InvoiceSystem', $internal_invoice_ID, 'DFT^P03'],
		            [
		                'client_id'       => $logininfo->clientid,
		                'port'            => $port,
		                'message'         => $message->toString(1),
		                'message_ack'     => $messageRESPONSE,
		                'send_trys'       => new Doctrine_Expression('send_trys + 1'),
		                'send_ok'         => $send_ok,
		            ]
		        );
		        
		        $this->__iid2invoicenumber[$internal_invoice_ID] = $batchID;
		        
		    }
		    
		    return $resultsACK;
		}
		
		/**
		 * ISPC-2459
		 * @Ancuta 11.10.2019
		 * Copy of Fn __invoicesnew_hl7_ft1_transmit created by @cla on 05.02.2019
		 * 
		 *
		 * @param array $data_array - this is in the format returned by DtaController::gather_dta_is_data()
		 * @param array $invoice2ipid
		 * @return void|multitype:NULL
		 */
		private function __invoicesnew_hl7_ft1_transmitActivation(array $data_array = [], array $invoices_system_data = [])
		{
            $resultsACK = []; // Collection Doctrine
		    
    	    if (empty($data_array)){
                return;
    	    }
    	    
    	    
    	    if ( ! ($HL7_cfg = $this->getInvokeArg('bootstrap')->getOption('HL7_send')) 
    	        || ! isset($HL7_cfg[$this->logininfo->clientid]) 
    	        || ! ($serverHL7_addr = $HL7_cfg[$this->logininfo->clientid]['ft1']['host'])
    	        || ! ($serverHL7_port = $HL7_cfg[$this->logininfo->clientid]['ft1']['port'])
	        ) {
	            return;
	        }
    	    
	        $hl7_proxy_sender_url = $HL7_cfg[$this->logininfo->clientid]['ft1']['proxy_sender_url'];
	        
    	   
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    	
		    
		    $invoice2ipid = array_column($invoices_system_data, 'ipid', 'id');
		    
		    if ( ! empty($invoice2ipid)) {
		        $epidNUM =  Doctrine_Core::getTable('EpidIpidMapping')->createQuery('fnd INDEXBY ipid')->select('epid_num, ipid')->whereIn('ipid', array_values($invoice2ipid))->fetchArray();
		        $invoice2epidnum = array_map(function($i) use ($epidNUM) {return $epidNUM[$i]['epid_num'];}, $invoice2ipid);		         
		    }
		    	

		    $proccesd_messages = Doctrine_Query::create()
		    ->select('*,hl7_pm.ipid as ipid, AES_DECRYPT(message,"' . Zend_Registry::get('salt') . '") as message')
		    ->from('Hl7MessagesReceived hl7_mr')
		    ->leftJoin("hl7_mr.Hl7MessagesProcessed hl7_pm")
		    ->whereIn("hl7_pm.ipid",$invoice2ipid)
		    ->andWhere("hl7_pm.messages_processed_ID IS NOT NULL")
		    ->orderBy('hl7_pm.create_date DESC')
		    ->fetchArray( )
		    ;

		    
            $am_ipid2date = array();
            foreach($proccesd_messages as $km => $row)
            {
                $message = new Net_HL7_Message(trim($row['message']));
                
                $msgType = $message->getSegmentFieldAsString(0, 9); // Example: "ADT^A08"
                $msgDate = $message->getSegmentFieldAsString(0, 7);
                $proccesd_messages[$km]['MESSAGE_Date'] = $msgDate;
                
                $zbe = $message->getSegmentsByName("ZBE");
                
                if (sizeof($zbe) > 0) 
                {
                  $zbe = $zbe[0];
                  $full_movement_number = $zbe->getField(1);
                  $zdate = $zbe->getField(2);
                  $zbe = $zbe->getField(4);
                  $zbe_Date = date('Y-m-d',strtotime($zdate)); 
                  $proccesd_messages[$km]['zbe_Date'] = date('Y-m-d',strtotime($zdate)); 
                  $proccesd_messages[$km]['full_movement_number'] =$full_movement_number ; 
                  $proccesd_messages[$km]['movement_number'] = substr($full_movement_number,-5); 
                	      
                  $am_ipid2date[$row['ipid']][$zbe_Date]['messages_received_ID'] = $row['messages_received_ID'];
                  $am_ipid2date[$row['ipid']][$zbe_Date]['msg'] = $row['message'];
                  $am_ipid2date[$row['ipid']][$zbe_Date]['movement_number'] = substr($full_movement_number,-5); 
                }
            }
		  
            $sent_days2ipid = array();
            foreach ($data_array as $invoice_key => $invoice)
		    {
		        $internal_invoice_ID = (int)str_replace('invoice_', '', $invoice_key);
		        $batchID = explode(":", $invoice['number']);
		        $batchID = $batchID[0];
		        	
		        // FIRST SEND ACTIVATION!!!!!
		        $internal_invoice_IPID = $invoice2ipid[$internal_invoice_ID];
		        $received_message='';
		        $message_2_send = '';

		        if(!empty($am_ipid2date[$internal_invoice_IPID]))
		        {
    	            foreach ($invoice['items'] as $item) 
    	            {
    	                foreach ($item['actions'] as $ak => $action) 
                        {
                            $activation_day = "";
                            $activation_day = $action['day'] . "120000";
                            $item_day = date('Y-m-d',strtotime($activation_day));
    
                            //If message was received for item date - then we have movment number so activaton can be sent
                            if(!empty($am_ipid2date[$internal_invoice_IPID][$item_day]['msg'])  && ! in_array($item_day,$sent_days2ipid[$internal_invoice_IPID]))
                            {
                                // get message received  for item date
                                $message_string ="";
                                $message_lines_arr = array();
                                $message_lines_arr = explode("\n",$am_ipid2date[$internal_invoice_IPID][$item_day]['msg']);
            
                                // MSH line
                                $message_lines_arr[0] = str_replace('ADT^A04','ADT^A08',$message_lines_arr[0]);
                                
                                /*
                                 *Comment of Daniel - from 09.12.2019  
                                 *they requested a "replace"
                                 *for message "SAP-ISH" replace "MSH-3" with "MSH-5"
                                 *for message "162-0001" replace "MSH-4" with "MSH-6"
                                 *Comment of Daniel - from 11.12.2019  
                                 *MSH|^~\&|SAP-ISH|162-0001|||20190930112548||ADT^A08|42086314|P|2.5|||AL|NE|DE|ISO8859-15|
                                 *should look like this.
                                 *MSH|^~\&|||SAP-ISH|162-0001|20190930112548||ADT^A08|42086314|P|2.5|||AL|NE|DE|ISO8859-15|
                                 *means the section SAP-ISH|162-0001 is moved two fields to the right.
                                */
                                // Changes applied on 14.12.2019
                                $msh_array = explode('|',$message_lines_arr[0]);
                                $msh_array[4]=$msh_array[2];
                                $msh_array[5]=$msh_array[3];
                                $msh_array[2] = "";
                                $msh_array[3] = "";
                                // ---

                                $message_lines_arr[0]  = implode("|",$msh_array);
                                //EVN line
                                $message_lines_arr[1] = str_replace('A04','A08',$message_lines_arr[1]);
                                $message_lines_arr[1] = str_replace('NP41P0','NP41I0',$message_lines_arr[1]);
                                $evn_line_items = array();
                                $evn_line_items = explode("|",$message_lines_arr[1]);
                                $message_lines_arr[1] = str_replace($evn_line_items[6],$activation_day,$message_lines_arr[1]);
                                	
                                $message_string =  implode("\n",$message_lines_arr);
                                
                                $message_string = str_replace("\r", '', $message_string);// Ancuta+Alex 12.05.2020
                                
                                $messageRESPONSE = '';
                                $send_ok =  null; // if MSA-1 == AA => 'yes', elseif other code => 'no',  else => 'null'
                
                                try {
                                     
                                    if ( ! empty($hl7_proxy_sender_url)) {
                                        $messageRESPONSE = $this->__invoicesnew_hl7_activation_transmit_CURL($hl7_proxy_sender_url, $serverHL7_addr, $serverHL7_port, $message_string);
                                    } else {
                                        $hl7_connection = new Net_HL7_Connection($serverHL7_addr, $serverHL7_port);
                                        $messageRESPONSE = $hl7_connection->send($message_string);
                                    }
                
                                    if ( ! empty($messageRESPONSE)) {
                                        $messageMSA = new Net_HL7_Message($messageRESPONSE);
                                        $MSA = $messageMSA->getSegmentsByName('MSA')[0];
                                        if ($MSA instanceof Net_HL7_Segments_MSA && $MSA->getAcknowledgementCode() == "AA") {
                                            //all was ok?
                                            $send_ok =  'yes';
                                        } else {
                                            $send_ok =  'no';// you have as AE or AC .. get messages for error it they send any
                                        }
                                    }
                                } catch (Exception $e) {
                                     
            
                                }
                            
    
        	                    $resultsACK[$internal_invoice_ID][$item_day] = Hl7MessagesSentTable::getInstance()->findOrCreateOneBy(
        	                        ['parent_table',  'parent_table_id',    'item_day',     'message_type'],
        	                        ['InvoiceSystem', $internal_invoice_ID, $item_day, 'ADT^A08'],
        	                        [
        	                            'client_id'       => $logininfo->clientid,
        	                            'port'            => $port,
        	                            'message'         => $message_string,
        	                            'message_ack'     => $messageRESPONSE,
        	                            'send_trys'       => new Doctrine_Expression('send_trys + 1'),
        	                            'send_ok'         => $send_ok,
        	                        ]
        	                    );
        	                    
        	                    $this->__iid2invoicenumber_activation[$internal_invoice_ID] = $batchID;
        	                    
        	                    $sent_days2ipid[$internal_invoice_IPID][] = $item_day;
                            } 
                        }
    	            }
		        }
		    }
 
		    return $resultsACK;
		}
		
		
		/**
		 * @cla on 14.02.2019
		 * @cla does not concur with this logic, but done'it anyway...
		 * 
		 * @param string $ipid
		 * @param string $start_active
		 * @param string $end_active
		 * @return string
		 */
		private function __invoicesnew_hl7_ft1_pv1($ipid = null, $start_active= null, $end_active = null)
		{
		    $PV1 = null;//return
		    
		    if (empty($ipid) || empty($start_active) || empty($end_active)) {
		        
		        return; 
		    }
		    
		    $pvn = $this->__get_patient_visit_number($ipid, $start_active, $end_active);
		    
		    if ( ! empty($pvn)) {
		        try {
    		        
    		        $message = Hl7MessagesReceivedTable::getInstance()->find($pvn['messages_received_id'], Doctrine_Core::HYDRATE_ARRAY);
    		        
    		        $hl7message = new Net_HL7_Message($message['message']);    		        
    		        $PV1 = $hl7message->getSegmentsByName("PV1") [0];
    		        
		        } catch (Exception $e) {
		            //you are fucked, where did the PV1 go? this should never happen
		        }
		        
		    } else {
		        //you are fucked, or actions done by G0D
		    }
		    
		    return $PV1;
		}
		
		//ISPC-2312 Ancuta 07.12.2020 - changed to public 
		public function __get_patient_visit_number($ipid = null, $start_active= null, $end_active = null) 
		{
		    if (empty($ipid) || empty($start_active) || empty($end_active)) {
		        return;//fail-safe
		    }
		    
		    /*
		     $pvn_all_debug = PatientVisitnumberTable::getInstance()->createQuery('pvt')
		     ->select("*")
		     ->where('ipid = :ipid')
		     ->orderBy("admit_date DESC, id DESC")
		     ->fetchArray([
		     "ipid" => $ipid,
		     ], Doctrine_Core::HYDRATE_ARRAY)
		     ;
		     */
		    
		    //get latest in period ...
		    $pvn = PatientVisitnumberTable::getInstance()->createQuery('pvt')
		    ->select("*")
		    ->where('ipid = :ipid')
		    ->andWhere('admit_date BETWEEN :start_active AND :end_active ')
		    ->andWhere('ignore_number <> 1 ') //TODO-3837 Ancuta 25.05.2021
		    ->orderBy("admit_date DESC, id DESC")
		    ->limit(1)
		    ->fetchOne([
		        "ipid"            => $ipid,
		        "start_active"    => $start_active,
		        "end_active"      => $end_active,
		    ], Doctrine_Core::HYDRATE_ARRAY)
		    ;
		    
		    
		    
		    if (empty($pvn)) {
		        //get latest previous one
		        $pvn = PatientVisitnumberTable::getInstance()->createQuery('pvt')
		        ->select("*")
		        ->where('ipid = :ipid')
		        ->andWhere('admit_date < :start_active')
		        ->andWhere('ignore_number <> 1 ') //TODO-3837 Ancuta 25.05.2021
		        ->orderBy("admit_date DESC, id DESC")
		        ->limit(1)
		        ->fetchOne([
		            "ipid"            => $ipid,
		            "start_active"    => $start_active,
		        ], Doctrine_Core::HYDRATE_ARRAY)
		        ;
		    }
		    
		    
		    return $pvn;
		    
		}
		
		
		
		
		
		
		
		
		
		
		/**
		 * @cla on 06.02.2019
		 * send via curl to a proxy php file ...
		 * 
		 * @param string $host
		 * @param string $port
		 * @param string $message
		 * @return string
		 */
		private function __invoicesnew_hl7_ft1_transmit_CURL( $hl7_proxy_sender_url = '' , $host = '', $port = '', $message = '')
		{
		    
		    if ( ! isset($this->_httpService) || ! $this->_httpService instanceof Zend_Http_Client) {
		        
    		    $adapter = new Zend_Http_Client_Adapter_Curl();
    		    $adapter->setConfig(array(
    		        'curloptions' => array(
    		            CURLOPT_FOLLOWLOCATION  => false,
    		            CURLOPT_MAXREDIRS      => 0,
    		            CURLOPT_RETURNTRANSFER  => true,
    		             
    		            CURLOPT_SSL_VERIFYHOST => false,
    		            CURLOPT_SSL_VERIFYPEER => false,
    		             
    		            CURLOPT_TIMEOUT => 15,
    		            CURLINFO_CONNECT_TIME => 16,
    		            CURLOPT_CONNECTTIMEOUT => 17,
    		            // 	            CURLOPT_COOKIE => $_req_cookie,
    		        )
    		    ));
    		     
    		    $httpConfig = array(
    		        'timeout'      => 10,// Default = 10
    		        'useragent'    => 'Zend_Http_Client-ISPC-HL7-CURL',// Default = Zend_Http_Client
    		        'keepalive'    => true,
    		    );
    		    $this->_httpService =  new Zend_Http_Client(null, $httpConfig);
    		    $this->_httpService->setAdapter($adapter);
    		    $this->_httpService->setCookieJar(false);
    		    
    		    $this->_httpService->setUri(Zend_Uri_Http::fromString($hl7_proxy_sender_url));
    		    $this->_httpService->setMethod('POST');
		    }
		    
		    
		    
		    $this->_httpService->setParameterPost([
		        'port'        => $port,
		        'host'        => $host,
		        'message'     => base64_encode($message),
		        '_hash'       => hash("crc32b", $message . $host . $port),
		    ]);
		    
		    
		    
		    try{
		        $lastReq = $this->_httpService->request();
		        
// 		        $this->_httpService->resetParameters(true);
		        
		        if ( ! $lastReq->isError()) {
		            
		            $this->_httpService->resetParameters(true);
		            
		            return $lastReq->getBody();
		            
		        } else {
		            // Changed on 12.05.2020 Ancuta 
		            //$this->_log_info("__invoicesnew_hl7_ft1_transmit_CURL: we had errors:" . PHP_EOL . "request:" . $this->_httpService->getLastRequest() .PHP_EOL. 'response:' . $this->_httpService->getLastResponse()->asString());
		            //--
		            
		            $log_text = "__invoicesnew_hl7_ft1_transmit_CURL: we had errors:" . PHP_EOL ;
		            $log_text .= "request:" . $this->_httpService->getLastRequest() .PHP_EOL;
		            if($this->_httpService->getLastResponse()){
		                $log_text .= 'response:' . $this->_httpService->getLastResponse()->asString();
		            } else{
		                $log_text .= 'NO response Y';
		            }
		            
		            $this->getHelper('Log')->error ( $log_text );
		            
		            
		        }		         

		        // Ancuta 12.05.2020 
		        unset($this->_httpService); 
		        // --
		        
		    } catch (Zend_Http_Client_Exception $e) {
		        
		        try {
		            //Changed on 08.05.2020 Ancuta 
		            // LIVE
		            //$this->_log_info("__invoicesnew_hl7_ft1_transmit_CURL: Zend_Http_Client_Exception:" . $e->getMessage() . PHP_EOL . "request:" . $this->_httpService->getLastRequest() .PHP_EOL. 'response:' . $this->_httpService->getLastResponse()->asString());

		            // NEW
		            $log_text = "__invoicesnew_hl7_ft1_transmit_CURL: Zend_Http_Client_Exception:" . $e->getMessage() . PHP_EOL; 
		            $log_text .= "request:" . $this->_httpService->getLastRequest() .PHP_EOL;
		            if($this->_httpService->getLastResponse()){
    		            $log_text .= 'response:' . $this->_httpService->getLastResponse()->asString();
		            } else{
		                $log_text .= 'NO response X';
		            }
		            
		            //$this->_log_info($log_text);
		            $this->getHelper('Log')->error ($log_text);
		            //  --- 

		        } catch (Exception $ee) {
		            
		            // Changed on 12.05.2020 Ancuta 
		            //$this->_log_info("__invoicesnew_hl7_ft1_transmit_CURL: Exception:" . $ee->getMessage() . PHP_EOL . $message);
		            //$this->_log_info($ee->getMessage() . "\n" . $message);
		            //--
		            
		            $this->getHelper('Log')->error ("__invoicesnew_hl7_ft1_transmit_CURL: Exception:" . $ee->getMessage() . PHP_EOL . $message);
		            
		            $this->getHelper('Log')->error ($ee->getMessage() . "\n" . $message);
		        }
		        
		        
		    }
		    
		}
		
		
		/**
		 * Ancuta 12.05.2020
		 * @param string $hl7_proxy_sender_url
		 * @param string $host
		 * @param string $port
		 * @param string $message
		 * @return string
		 * copy of __invoicesnew_hl7_ft1_transmit_CURL
		 */
		private function __invoicesnew_hl7_activation_transmit_CURL( $hl7_proxy_sender_url = '' , $host = '', $port = '', $message = '')
		{
		    
		        
		    $adapter = new Zend_Http_Client_Adapter_Curl();
		    $adapter->setConfig(array(
		        'curloptions' => array(
		            CURLOPT_FOLLOWLOCATION  => false,
		            CURLOPT_MAXREDIRS      => 0,
		            CURLOPT_RETURNTRANSFER  => true,
		             
		            CURLOPT_SSL_VERIFYHOST => false,
		            CURLOPT_SSL_VERIFYPEER => false,
		             
		            CURLOPT_TIMEOUT => 15,
		            CURLINFO_CONNECT_TIME => 16,
		            CURLOPT_CONNECTTIMEOUT => 17,
		            // 	            CURLOPT_COOKIE => $_req_cookie,
		        )
		    ));
		     
		    $httpConfig = array(
		        'timeout'      => 10,// Default = 10
		        'useragent'    => 'Zend_Http_Client-ISPC-HL7-CURL',// Default = Zend_Http_Client
		        'keepalive'    => true,
		    );
		    $httpService =  new Zend_Http_Client(null, $httpConfig);
		    $httpService->setAdapter($adapter);
		    $httpService->setCookieJar(false);
		    
		    $httpService->setUri(Zend_Uri_Http::fromString($hl7_proxy_sender_url));
		    $httpService->setMethod('POST');
	    
		    
		    
		    $httpService->setParameterPost([
		        'port'        => $port,
		        'host'        => $host,
		        'message'     => base64_encode($message),
		        '_hash'       => hash("crc32b", $message . $host . $port),
		    ]);
		    
		    
		    
		    try{
		        $lastReq = $httpService->request();
		        
		        sleep(1); //wait for the previous request to be completed
// 		        $httpService->resetParameters(true);
		        
		        if ( ! $lastReq->isError()) {
		            
		            $httpService->resetParameters(true);
		            
		            return $lastReq->getBody();
		            
		        } else {
		            
		            $log_text = "__invoicesnew_hl7_activation_transmit_CURL: we had errors:" . PHP_EOL ;
		            $log_text .= "request:" . $httpService->getLastRequest() .PHP_EOL;
		            if($httpService->getLastResponse()){
		                $log_text .= 'response:' . $httpService->getLastResponse()->asString();
		            } else{
		                $log_text .= 'NO response Y';
		            }
		            
		            $this->getHelper('Log')->error ( $log_text );
		            
		            
		        }		         

		        // Ancuta 12.05.2020 
		        unset($httpService); 
		        // --
		        
		    } catch (Zend_Http_Client_Exception $e) {
		        
		        try {

		            // NEW
		            $log_text = "__invoicesnew_hl7_activation_transmit_CURL: Zend_Http_Client_Exception:" . $e->getMessage() . PHP_EOL; 
		            $log_text .= "request:" . $httpService->getLastRequest() .PHP_EOL;
		            if($httpService->getLastResponse()){
    		            $log_text .= 'response:' . $httpService->getLastResponse()->asString();
		            } else{
		                $log_text .= 'NO response X';
		            }
		            
		            //$this->_log_info($log_text);
		            $this->getHelper('Log')->error ($log_text);
		            //  --- 

		        } catch (Exception $ee) {
	 
		            $this->getHelper('Log')->error ("__invoicesnew_hl7_ft1_transmit_CURL: Exception:" . $ee->getMessage() . PHP_EOL . $message);
		            
		            $this->getHelper('Log')->error ($ee->getMessage() . "\n" . $message);
		        }
		        
		        
		    }
		    
		}
		


		/**
		 * @author Ancuta
		 * 26.11.2019
		 * ISPC-2459
		 * 
		 * @param array $invoices
		 * @return multitype:boolean string |multitype:boolean string Ambigous <multitype:, unknown, string>
		 * ISPC-2312 Ancuta 07.12.2020 - changed tu public
		 */
		public function __invoicesnew_hl7_check_movementNumbers(array $invoices = [])
		{
		    $result = array();
		    if( empty ( $invoices ) ){
		        
		        $result['success'] = false; 
		        $result['msg'] = "HL7-  no invoices to check";
		         
		        return  $result;
		    }
		    
	        $invoices_ipids = array();
	        $invoices_ids   = array();
	        $invoice2ipid   = array();
	        
		    foreach($invoices as $k=>$inv){
		        $invoices_ipids[] = $inv['ipid'];
		        $invoices_ids[] = $inv['id'];
		        $invoice2ipid[$inv['id']] = $inv['ipid'];
		    }

		    
		    $proccesd_messages = Doctrine_Query::create()
		    ->select('*,hl7_pm.ipid as ipid, AES_DECRYPT(message,"' . Zend_Registry::get('salt') . '") as message')
		    ->from('Hl7MessagesReceived hl7_mr')
		    ->leftJoin("hl7_mr.Hl7MessagesProcessed hl7_pm")
		    ->whereIn("hl7_pm.ipid",$invoices_ipids)
		    ->andWhere("hl7_pm.messages_processed_ID IS NOT NULL")
		    ->orderBy('hl7_pm.create_date DESC')
		    ->fetchArray( );
		    
		    
		    if ( empty ($proccesd_messages)){
		        
		        $result['success'] = false;
		        $result['msg'] = "HL7-  no hl7 messages processed";
		         
		        return  $result;
		    }
		    $am_ipid2date = array();
		    foreach($proccesd_messages as $km => $row){
		        $message = new Net_HL7_Message(trim($row['message']));
		    
		        $msgType = $message->getSegmentFieldAsString(0, 9); // Example: "ADT^A08"
		        $msgDate = $message->getSegmentFieldAsString(0, 7);
		        $proccesd_messages[$km]['MESSAGE_Date'] = $msgDate;
		    
		        $zbe = $message->getSegmentsByName("ZBE");
		    
		        if (sizeof($zbe) > 0) {
		    
		            $zbe = $zbe[0];
		            $full_movement_number = $zbe->getField(1);
		            $zdate = $zbe->getField(2);
		            $zbe = $zbe->getField(4);
		            $zbe_Date = date('Y-m-d',strtotime($zdate));
		            $proccesd_messages[$km]['zbe_Date'] = date('Y-m-d',strtotime($zdate));
		            $proccesd_messages[$km]['full_movement_number'] =$full_movement_number ;
		            $proccesd_messages[$km]['movement_number'] = substr($full_movement_number,-5);
		    
		            $am_ipid2date[$row['ipid']][$zbe_Date]['messages_received_ID'] = $row['messages_received_ID'];
		            $am_ipid2date[$row['ipid']][$zbe_Date]['msg'] = $row['message'];
		            $am_ipid2date[$row['ipid']][$zbe_Date]['movement_number'] = substr($full_movement_number,-5);
		        }
		    }

// 		    dd($am_ipid2date);
// 		    dd($am_ipid2date['821e6a14ffaba695e2955182039898b27e2c0dbd']);
		    //821e6a14ffaba695e2955182039898b27e2c0dbd
		    if ( empty ($am_ipid2date)){
		    
		        $result['success'] = false;
		        $result['msg'] = "HL7-  no hl7 messages processed";
		         
		        return  $result;
		    }
		    
		    
            // get invoices items
		    include 'DtaController.php';
		    
		    $dtaController = new DtaController($this->_request, $this->_response);
		    $dta_data = $dtaController->gather_dta_is_data($this->logininfo->clientid, $invoice_type = 'nr_invoice', $this->logininfo->userid, [
		        'invoices' => [
		            $invoice_type => $invoices_ids
		        ]
		    ]);

		    $movementNr_info = array();
		    foreach ($dta_data as $invoice_key => $invoice)
		    {
		        $internal_invoice_ID = (int)str_replace('invoice_', '', $invoice_key);
		        $internal_invoice_IPID = $invoice2ipid[$internal_invoice_ID];
		    
		        foreach ($invoice['items'] as $item) 
		        {
		            foreach ($item['actions'] as $ak => $action) 
		            {
		                $activation_day = "";
		                $activation_day = $action['day'] . "120000";
		                $item_day = date('Y-m-d',strtotime($activation_day));
		                $item_day_dmY = date('d.m.Y',strtotime($activation_day));
		                
		                
		                if( empty($am_ipid2date[$internal_invoice_IPID][$item_day]['msg']))
		                {
		                    if(!in_array($item_day_dmY,$movementNr_info[$internal_invoice_IPID][$internal_invoice_ID]['no_movementNr_days'])){
    		                   $movementNr_info[$internal_invoice_IPID][$internal_invoice_ID]['no_movementNr_days'][] = $item_day_dmY; 
		                    }
		                } 
		                else
		                {
		                    if(!in_array($item_day_dmY,$movementNr_info[$internal_invoice_IPID][$internal_invoice_ID]['movementNr_days'])){
    		                   $movementNr_info[$internal_invoice_IPID][$internal_invoice_ID]['movementNr_days'][] = $item_day_dmY; 
		                    }
		                }
		            }
		        }
		    }
		    
		    $result['data'] = $movementNr_info; 
            $result['success'] = true;
		    $result['msg'] = "HL7-  movement numbers info retrieved";
		        
		    return  $result;
		}
	
		
		
		#########################################################################
		#########################################################################
		################## ISPC-2585 Ancuta 15-16.06.2020 [START] ###############
		#########################################################################
		public function demstepcareinternalAction()
		{
		    
		    //general data
		    $patientmaster = new PatientMaster();
		    $client_details = new Client();
		    $clientid = $this->clientid;
		    
		    //get allowed client invoices
		    $this->view->allowed_invoice = 'demstepcare_internal_invoice';
		    
		    
		    //bre_kinder_invoice data - ISPC-2214
		    //introduce - one table to rulle them all :: 19.06.2018
		    // includes ISPC-2286 nr_invoice
		    $invoices_system = new InvoiceSystem();
		    $invoices_system_items = new InvoiceSystemItems();
		    $invoices_system_form = new Application_Form_InvoiceSystem();
		    
		    
		    $invoice_type = 'demstepcare_internal_invoice';
		    
		    //mark invoice as paid from invoices list link
		    if(!empty($_REQUEST['mode']) && !empty($_REQUEST['iid']) && $_REQUEST['iid'] > '0')
		    {
		        if($_REQUEST['mode'] == "paid")
		        {
		            //mark as paid
		            $invoice_pay_data['invoiceId'] = $_REQUEST['iid'];
		            $invoice_pay_data['paymentAmount'] = '0.00';
		            $invoice_pay_data['paymentComment'] = "";
		            $invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
		            $invoice_pay_data['mark_as_paid'] = "1";
		            
		            
		            $new_payment = $invoices_system_form->submit_payment($invoice_type,$invoice_pay_data);
		            $this->_redirect(APP_BASE . 'invoicenew/demstepcareinternal');
		            exit;
		        }
		    }
		    
		    if($this->getRequest()->isPost())
		    {
		        if($_POST['draftmore'] == "1")
		        {
		            $transform = $invoices_system_form->ToggleStatusInvoices($invoice_type,$_POST['document'], "2", $clientid);
		        }
		        elseif($_POST['delmore'] == "1" || $_POST['deletemore'] == "1")
		        {
		            $del_invoice = $invoices_system_form->delete_multiple_invoices($invoice_type,$_POST['document']);
		        }
		        elseif($_POST['archive_invoices_more'] == "1")
		        {
		            $archive = $invoices_system_form->archive_multiple_invoices($invoice_type,$_POST['document'], $clientid);
		        }
		        elseif($_POST['warningmore'] == "1")
		        {
		            $invoiceids_to_warn = implode(',', $_POST['document']);
		            
		            $this->forward('generatereminderinvoice', null, null, array('oldaction' => 'invoicesnew'));
		            
		            return;
		        }
		        elseif(!empty($_POST['batch_print_more']))
		        {
		            $params['invoice_type'] = $invoice_type; //invoice_type
		            $params['invoices'] = $_POST['document']; //contains invoices ids to be printed
		            $params['batch_print'] = '1'; //enables batch print procedure
		            $params['only_pdf'] = '1'; //stops invoice calculation(from system data)
		            $params['get_pdf'] = '0'; //stops downloading single pdf
		            
		            $this->generate_systeminvoice($params);
		        }
		        else if(!empty($_POST['invoiceId']))
		        {
		            $post = $_POST;
		            $post["mark_as_paid"] = "0";
		            $new_payment = $invoices_system_form->submit_payment($invoice_type,$post);
		        }
		        $this->_redirect(APP_BASE . 'invoicenew/demstepcareinternal'); //to avoid resubmission
		        exit;
		    }
		    
		    if($_REQUEST['mode'] == 'setstorno')
		    {
		        if(is_numeric($_REQUEST['inv_id']) && strlen($_REQUEST['inv_id']) > '0')
		        {
		            $invoiceid = $_REQUEST['inv_id'];
		        }
		        else
		        {
		            $invoiceid = '0';
		        }
		        
		        if($invoiceid > '0')
		        {
		            $clone_record = $invoices_system->create_storno_invoice($invoice_type,$invoiceid);
		            $this->_redirect(APP_BASE . 'invoicenew/demstepcareinternal?flg=suc');
		            exit;
		        }
		    }
		    
		    if($_REQUEST['mode'] == 'delete' && $_REQUEST['invoiceid'])
		    {
		        $delete_invoice = $invoices_system_form->delete_invoice($invoice_type,$_REQUEST['invoiceid']);
		        
		        if($delete_invoice)
		        {
		            $this->_redirect(APP_BASE . 'invoicenew/demstepcareinternal?flg=delsuc');
		        }
		        else
		        {
		            $this->_redirect(APP_BASE . 'invoicenew/demstepcareinternal?flg=delerr');
		        }
		    }
		    
		    //construct months array
		    $start_period = '2010-01-01';
		    $end_period = date('Y-m-d', time());
		    $period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
		    $month_select_array['99999999'] = '';
		    foreach($period_months_array as $k_month => $v_month)
		    {
		        $month_select_array[$v_month] = $v_month;
		    }
		    
		    //see how many days in selected month
		    $this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
		    
		    if(!function_exists('cal_days_in_month'))
		    {
		        $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
		    }
		    else
		    {
		        $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
		    }
		    
		    //construct selected month array (start, days, end)
		    $months_details[$selected_month]['start'] = $selected_month . "-01";
		    $months_details[$selected_month]['days_in_month'] = $month_days;
		    $months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
		    
		    krsort($month_select_array);
		    
		    $this->view->months_selector = $this->view->formSelect("selected_month", '', null, $month_select_array);
		    
		}
	
		
		public function fetchdscinternalinvoicelistAction()
		{
		    $this->_helper->layout->setLayout('layout_ajax');
		    $hidemagic = Zend_Registry::get('hidemagic');
		    
		    //general data
		    $patientmaster = new PatientMaster();
		    $users = new User();
		    $client_details = new Client();
		    $clientid = $this->clientid;
		    
		    $warnings = new RemindersInvoice();
		    $modules = new Modules();
		    
		    $invoices_system = new InvoiceSystem();
		    $invoices_system_payments = new InvoiceSystemPayments();
		    $invoices_system_items = new InvoiceSystemItems();
		    $invoices_system_form = new Application_Form_InvoiceSystem();
		    
		    
		    //get allowed client invoices
		    $this->view->invoice_type = $invoice_type = 'demstepcare_internal_invoice';
		    
		    if($modules->checkModulePrivileges("170", $clientid))
		    {
		        $this->view->create_bulk_warnings = "1";
		    }
		    else
		    {
		        $this->view->create_bulk_warnings = "0";
		    }
		    
		    
		    $limit = 50;
		    $this->view->limit = $limit;
		    $filters = array();
		    
		    $storno_invoices_array = Doctrine_Query::create()
		    ->select("*")
		    ->from('InvoiceSystem is')
		    ->where('client = ?', $clientid)
		    ->andWhere('storno = 1')
		    ->andWhere('invoice_type = ?',$invoice_type)
		    ->andWhereIn("is.isdelete",array("0","1"))
		    ->fetchArray();
		    
		    $storno_ids = array();
		    $storno_ids_str="";
		    foreach($storno_invoices_array as $k => $st)
		    {
		        $storno_ids[] = $st['record_id'];
		        $storno_ids_str .= '"' . $st['record_id'] . '",';
		    }
		    
		    if( strlen($storno_ids_str) > 0 )
		    {
		        $storno_ids_str = substr($storno_ids_str, 0, -1);
		        $storno_ids_str_sql = " AND id NOT IN (" . $storno_ids_str . ")";
		    } else{
		        $storno_ids_str_sql = "";
		    }
		    
		    // get client data
		    $client_details = $client_details->getClientDataByid($clientid);
		    
		    $invoice_due_days = $client_details[0]['invoice_due_days'];
		    $plus_due_days = '+' . $invoice_due_days . ' days';
		    $this->view->plus_due_days = $plus_due_days;
		    
		    //process tabs
		    $filters['invoice_system_search'] = '';
		    switch($_REQUEST['f_status'])
		    {
		        case 'draft':
		            $filters['invoice_system'] = ' AND status ="1" AND isdelete=0 AND isarchived ="0"';
		            break;
		            
		        case 'unpaid':
		            $filters['invoice_system'] = ' AND (status = "2" OR status = "5")  AND storno = 0 '.$storno_ids_str_sql.' AND isdelete = 0 AND isarchived ="0"';
		            
		            break;
		            
		        case 'paid':
		            $filters['invoice_system'] = ' AND status="3"  AND storno = 0  '.$storno_ids_str_sql.'  AND isdelete=0 AND isarchived ="0"';
		            break;
		            
		        case 'deleted':
		            $filters['invoice_system'] = ' AND (status="4" OR isdelete="1") AND isarchived ="0"';
		            break;
		            
		        case 'overdue':
		            $filters['invoice_system'] = ' AND (status = "2" OR status = "5")  AND storno = 0 '.$storno_ids_str_sql.'   AND   DATE(NOW()) >  DATE_ADD(DATE(completed_date), INTERVAL ' . $invoice_due_days . ' DAY)   AND isdelete=0 AND isarchived ="0"';
		            break;
		            
		        case 'all':
		            $filters['invoice_system'] = ' AND isarchived ="0"';
		            break;
		        case 'archived':
		            $filters['invoice_system'] = ' AND isarchived ="1" AND isdelete=0';
		            break;
		            
		        default: // unpaid- open
		            $filters['invoice_system'] = ' AND (status = "2" OR status = "5")   AND storno = 0 '.$storno_ids_str_sql.'  AND isdelete = 0 AND isarchived ="0"';
		            break;
		    }
		    
		    if(!empty($_REQUEST['last_name']))
		    {
		        $filters['patient_master'] = ' AND (CONCAT(AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['last_name']) . '%")';
		    }
		    
		    if(!empty($_REQUEST['first_name']))
		    {
		        $filters['patient_master'] .= ' AND (CONCAT(AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ", e.epid) LIKE "%' . addslashes($_REQUEST['first_name']) . '%")';
		    }
		    
		    if(!empty($_REQUEST['epid']))
		    {
		        $filters['patient_master'] .= ' AND ( e.epid LIKE "%' . addslashes($_REQUEST['epid']) . '%")';
		    }
		    
		    if(!empty($_REQUEST['rnummer']))
		    {
		        $filters['invoice_system'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
		        $filters['invoice_system_search'] .= ' AND ( LOWER(CONCAT(`prefix`,CAST(  `invoice_number` AS CHAR ))) LIKE "%' . addslashes(strtolower($_REQUEST['rnummer'])) . '%")';
		    }
		    if(!empty($_REQUEST['selected_month']) && $_REQUEST['selected_month'] != '99999999')
		    {
		        $filters['invoice_system'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
		        $filters['invoice_system_search'] .= ' AND MONTH(DATE(invoice_start)) = MONTH("' . $_REQUEST['selected_month'] . '-01") AND YEAR(DATE(invoice_start)) = YEAR("' . $_REQUEST['selected_month'] . '-01")';
		    }
		    
		    //get invoice patients
		    $sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
		    $sql .= "CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)  as firstname,";
		    $sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
		    $sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
		    $sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
		    $sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
		    
		    // if super admin check if patient is visible or not
		    if($this->usertype == 'SA')
		    {
		        $sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
		        $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
		    }
		    
		    
		    $f_patients_ipids = array();
		    if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
		    {
		        //filter patients name/surname/epid
		        $f_patient = Doctrine_Query::create()
		        ->select($sql)
		        ->from('PatientMaster p')
		        ->where("p.isdelete =0")
		        ->leftJoin("p.EpidIpidMapping e")
		        ->andWhere('e.clientid = ' . $clientid . $filters['patient_master']);
		        $f_patients_res = $f_patient->fetchArray();
		        
		        foreach($f_patients_res as $k_f_pat_res => $v_f_pat_res)
		        {
		            $f_patients_ipids[] = $v_f_pat_res['EpidIpidMapping']['ipid'];
		        }
		    }
		    
		    //all invoices for counting
		    $invoices_counting = Doctrine_Query::create()
		    ->select("*")
		    ->from('InvoiceSystem is')
		    ->where("invoice_type= ? ",$invoice_type)
		    ->andWhere("client= ? ",$clientid)
		    ->andWhere(" 1 " . $filters['invoice_system_search']);
		    if( (!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name'])) && ! empty($f_patients_ipids))
		    {
		        $invoices_counting->andWhereIn('ipid', $f_patients_ipids);
		    }
		    $inv2count = $invoices_counting->fetchArray();
		    
		    
		    $count_invoices = array();
		    $status_count_invoices = array();
		    foreach($inv2count as $k_inv2count => $v_inv2count)
		    {
		        
		        $count_invoices[$v_inv2count['status']][] = '1';
		        
		        if($v_inv2count['status'] == "1" && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["draft"][] = '1';
		        }
		        
		        if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["unpaid"][] = '1';
		        }
		        
		        if($v_inv2count['status'] == "3" && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["paid"][] = '1';
		        }
		        
		        if($v_inv2count['status'] == "4" || $v_inv2count['isdelete'] == "1" && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["deleted"][] = '1';
		        }
		        
		        if(($v_inv2count['status'] == "2" || $v_inv2count['status'] == "5") && $v_inv2count['storno'] == "0" && !in_array($v_inv2count['id'], $storno_ids) && $v_inv2count['isdelete'] == "0" && strtotime(date('Y-m-d', time())) > strtotime(date('Y-m-d', strtotime($plus_due_days, strtotime($v_inv2count['completed_date'])))) && $v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["overdue"][] = '1';
		        }
		        
		        if($v_inv2count['isarchived'] == "0")
		        {
		            $status_count_invoices["all"][] = '1';
		        }
		        
		        if($v_inv2count['isarchived'] == "1")
		        {
		            $status_count_invoices["archived"][] = '1';
		        }
		    }
		    
		    //deleted_invoices
		    $del_inv2count = Doctrine_Query::create()
		    ->select("*")
		    ->from('InvoiceSystem is')
		    ->where("invoice_type = ? ", $invoice_type)
		    ->andWhere("client = ? ", $clientid )
		    ->andWhere(" 1 " . $filters['invoice_system'])
		    ->andWhere("is.isdelete=1 or status=4");
		    if((!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name'])) && !empty($f_patients_ipids))
		    {
		        $del_inv2count->andWhereIn('ipid', $f_patients_ipids);
		    }
		    
		    $del_inv2count->fetchArray();
		    
		    
		    foreach($del_inv2count as $k_del_inv => $v_del_inv)
		    {
		        $counted_del_inv[$v_del_inv['status']][] = '1';
		    }
		    
		    
		    
		    
		    //filter invoices status/invoice_number/amount
		    $invoices_nl = Doctrine_Query::create()
		    ->select("*")
		    ->from('InvoiceSystem')
		    ->where("invoice_type = ? ", $invoice_type)
		    ->andWhere("client = ? ", $clientid )
		    ->andWhere(" 1 " . $filters['invoice_system'])
		    ->andWhereIn("isdelete",array("0","1"));
		    if(!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name']))
		    {
		        $invoices_nl->andWhereIn('ipid', $f_patients_ipids);
		    }
		    $invoices_no_limit = $invoices_nl->fetchArray();
		    
		    foreach($invoices_no_limit as $k_nl_inv => $v_nl_inv)
		    {
		        $invoice_ipids[] = $v_nl_inv['ipid'];
		    }
		    
		    $patient = Doctrine_Query::create()
		    ->select($sql)
		    ->from('PatientMaster p')
		    ->leftJoin("p.EpidIpidMapping e")
		    ->where('e.clientid = ?', $clientid);
		    if((!empty($_REQUEST['epid']) || !empty($_REQUEST['last_name']) || !empty($_REQUEST['first_name'])) && ! empty($f_patients_ipids))
		    {
		        $patient->andWhereIn('p.ipid', $f_patients_ipids);
		    }
		    $patients_res = $patient->fetchArray();
		    
		    if($patients_res)
		    {
		        foreach($patients_res as $k_pat => $v_pat)
		        {
		            $patient_details[$v_pat['EpidIpidMapping']['ipid']] = $v_pat;
		        }
		    }
		    
		    if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
		    {
		        $current_page = $_REQUEST['page'];
		    }
		    else
		    {
		        $current_page = 1;
		    }
		    
		    if($_REQUEST['sort'] == 'asc')
		    {
		        $sort = 'asc';
		    }
		    else
		    {
		        $sort = 'desc';
		    }
		    
		    switch($_REQUEST['ord'])
		    {
		        
		        case 'id':
		            $orderby = 'id ' . $sort;
		            break;
		            
		        case 'ln':
		            $orderby = 'epid ' . $sort;
		            break;
		            
		        case 'nr':
		            //$orderby = 'invoice_number ' . $sort;
		            $orderby = 'full_invoice_number_sort ' . $sort; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
		            break;
		            
		        case 'date':
		            $orderby = 'change_date, create_date ' . $sort;
		            break;
		            
		        case 'amnt':
		            $orderby = 'invoice_total ' . $sort;
		            break;
		        case 'invoice_date':
		            $orderby = 'completed_date_sort ' . $sort;
		            break;
		            
		        default:
		            //InvoiceSystem
		            //$orderby = 'id DESC'; // ISPC-2220: change_order_invoice :: @Ancuta 30.07.2018 [NEW]
		            $orderby = 'full_invoice_number_sort DESC'; //TODO-2073 ISPC: Invoices sorting not correct :: @Ancuta 22.01.2019
		            break;
		    }
		    
		    if(!empty($invoice_ipids)){
		        $invoices = Doctrine_Query::create()
		        ->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort, concat(prefix,invoice_number) as full_invoice_number_sort")
		        ->from('InvoiceSystem')
		        ->where("client= ?",$clientid)
		        ->andWhere("1 " . $filters['invoice_system'])
		        ->andwhere('invoice_type = ?', $invoice_type)
		        ->andwhereIn('ipid', $invoice_ipids);
		        $invoices->orderby($orderby);
		        $invoices->offset(($current_page - 1) * $limit);
		        $invoices->limit($limit);
		        $invoicelimit = $invoices->fetchArray();
		    }
		    
		    
		    $invoice_uids[] = '9999999999';
		    foreach($invoicelimit as $k_il => $v_il)
		    {
		        $invoice_ids[] = $v_il['id'];
		        $invoice_uids[] = $v_il['create_user'];
		        $invoice_uids[] = $v_il['change_user'];
		        $invoice_uids[] = $v_il['userid'];
		    }
		    
		    
		    //count tabs contents
		    $invoice_tabs = array('unpaid', 'paid', 'draft', 'deleted', 'overdue', 'all', 'archived');
		    
		    $counted = array();
		    foreach($invoice_tabs as $tab)
		    {
		        $counted[$tab] += count($status_count_invoices[$tab]);
		    }
		    
		    $invoice_uids = array_values(array_unique($invoice_uids));
		    $users_details = $users->getMultipleUserDetails($invoice_uids);
		    
		    $invoice_payments = $invoices_system_payments->getInvoicesPaymentsSum($invoice_type, $invoice_ids);
		    
		    $no_invoices = sizeof($invoices_no_limit);
		    $no_pages = ceil($no_invoices / $limit);
		    
		    $all_warnings = $warnings->get_reminders($invoice_ids, $invoice_type, $clientid);
		    
		    foreach ($invoicelimit as &$row) {
		        if (isset($all_warnings[$row['id']])) {
		            $row['InvoiceWarnings'] = $all_warnings[$row['id']];
		        }
		    }
		    
		    
 
		    
		    $this->view->storned_invoces = InvoiceSystem::get_storned_invoices($invoice_type,$clientid);
		    
		    $this->view->invoicelist = $invoicelimit;
		    $this->view->user_details = $users_details;
		    $this->view->patient_details = $patient_details;
		    $this->view->invoice_payments = $invoice_payments;
		    $this->view->current_page = $current_page;
		    $this->view->no_pages = $no_pages;
		    $this->view->no_invoices = $no_invoices;
		    $this->view->orderby = $_REQUEST['ord'];
		    $this->view->sort = $_REQUEST['sort'];
		    $this->view->counted = $counted;
		}
		
		
		
		public function listpaymentsdscAction()
		{
		    
		    $this->_helper->viewRenderer->setNoRender();
		    $clientid = $this->clientid;
		    $invoices_system = new InvoiceSystem();
		    $invoices_system_payments = new InvoiceSystemPayments();
		    $invoices_system_form = new Application_Form_InvoiceSystem();
		    
		    $user = new User();
		    
		    
		    //get allowed client invoices
		    $invoice_type = 'demstepcare_internal_invoice';
		    
		    
		    if($_REQUEST['invoiceid'])
		    {
		        $payments = $invoices_system_payments->getInvoicePayments($invoice_type, $_REQUEST['invoiceid']);
		        
		        $users[] = '999999999999';
		        foreach($payments as $k_payment => $v_payment)
		        {
		            $users[] = $v_payment['create_user'];
		        }
		        
		        $users_list = $user->getMultipleUserDetails($users);
		        
		        foreach($users_list as $k_user => $v_user)
		        {
		            $users_list_details[$v_user['id']] = $v_user;
		        }
		        
		        if($_REQUEST['op'] == 'del')
		        {
		            if(count($payments) == 1)
		            {
		                $next = '0';
		            }
		            else
		            {
		                $next = '1';
		            }
		            
		            
		            $del_payment = $invoices_system_payments->delete_invoice_payment($invoice_type,$_REQUEST['paymentid']);
		            
		            //update invoice status when deleting an payment
		            if($del_payment)
		            {
		                $invoice_payments_sum = $invoices_system_payments->getInvoicesPaymentsSum($invoice_type,array($_REQUEST['invoiceid']));
		                $invoice_details = $invoices_system->get_invoice($invoice_type,$_REQUEST['invoiceid']);
		                
		                if($invoice_payments_sum)
		                {
		                    if($invoice_payments_sum[$_REQUEST['invoiceid']]['paid_sum'] >= $invoice_details[0]['invoice_total'])
		                    {
		                        $status = '3'; //paid
		                    }
		                    else
		                    {
		                        $status = '5'; //not paid/partial paid
		                    }
		                }
		                else
		                {
		                    //no payments => draft
		                    $status = '2';
		                }
		                $update_status = $invoices_system_form->ToggleStatusInvoices($invoice_type,array($_REQUEST['invoiceid']), $status);
		            }
		            
		            //reload the payments
		            unset($payments);
		            $payments = $invoices_system_payments->getInvoicePayments($invoice_type,$_REQUEST['invoiceid']);
		        }
		        
		        $this->view->payments = $payments;
		        $this->view->users_list = $users_list_details;
		        $payments_list = $this->view->render('invoicenew/listpaymentsdsc.html');
		        echo $payments_list;
		        
		        exit;
		    }
		    else
		    {
		        exit;
		    }
		}
	
	 
		public function editdscinternalinvoiceAction()
		{
		    $clientid = $this->clientid;
		    $patientmaster = new PatientMaster();
		    $client_details = new Client();
		    
		    //get allowed client invoices
		    $invoice_type = 'demstepcare_internal_invoice';
		    $this->view->invoice_type = $invoice_type;
		    
		    if(empty($invoice_type)){
		        $this->_redirect(APP_BASE . 'invoicenew/demstepcareinternal');
		        exit;
		    }
		    
		    
		    $invoices_system = new InvoiceSystem();
		    $invoices_system_items = new InvoiceSystemItems();
		    $invoices_system_form = new Application_Form_InvoiceSystem();
		    
		    
		    $hi_perms = new HealthInsurancePermissions();
		    $pflege = new PatientMaintainanceStage();
		    $phelathinsurance = new PatientHealthInsurance();
		    $healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
		    $boxes = new LettersTextBoxes();
		    $letter_boxes_details = $boxes->client_letter_boxes($clientid);
		    $this->view->hide_patient_tab = '1';
		    
		    //ISPC-2461 Ancuta
		    $dsc_invoice_products = $invoices_system->invoice_products($invoice_type);
		    $sp_products = DemstepcareProductsTable::findPruductsByClient($this->clientid);
		   
		    
		    $client_products_arr = array();
		    foreach($sp_products as $k=>$product_details){
		        if(in_array($product_details['shortcut'],$dsc_invoice_products)){
		            $products[$product_details['shortcut']] = $product_details['product_name'];
		            
		            $actionslist_by_id_arr [$product_details['shortcut']]['action_name'] = $product_details['product_name'];
		            $client_products_arr[$product_details['shortcut']] = $product_details['product_name'];
		        }
		    }
		    $this->view->client_products_arr = $client_products_arr;
		    // --
		    
		    if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
		    {
		        //here get the invoice details
		        $invoice_id = $_REQUEST['invoiceid'];
		        $invoice_data = $invoices_system->getInvoices($invoice_type,$invoice_id,false,true);
		    }
		    
		    if(in_array($invoice_data['id'], InvoiceSystem::get_storned_invoices($invoice_type,$clientid)))
		    {
		        $this->view->has_storno = '1';
		    }
		    else
		    {
		        $this->view->has_storno = '0';
		    }
		    
		    
		    if($this->getRequest()->isPost() && !empty($_REQUEST['invoiceid']))
		    {
		        $status = '0';
		        if(!empty($_POST['completed']))
		        {
		            $status = '2'; //unpaid
		        }
		        else if(!empty($_REQUEST['edit_invoice']))
		        {
		            $status = '1'; //draft
		        }
		        else if($_POST['deletemore'] == "1")
		        {
		            $status = '4'; //deleted
		        }
		        else if(!empty($_REQUEST['pdf']))
		        {
		            $status = '0'; //no change
		        }
		        else if(!empty($_REQUEST['users_invoice']))
		        {
		            $status = '0'; //no change
		        }
		        
		        if(!empty($_POST['paid']))
		        {
		            //mark as paid
		            $invoice_pay_data['invoiceId'] = $_REQUEST['invoiceid'];
		            $invoice_pay_data['paymentAmount'] = '0.00';
		            $invoice_pay_data['paymentComment'] = "";
		            $invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
		            $invoice_pay_data['mark_as_paid'] = "1";
		            
		            $new_payment = $invoices_system_form->submit_payment($invoice_type, $invoice_pay_data);
		            
		            $this->_redirect(APP_BASE . 'invoicenew/demstepcareinternal');
		            exit;
		        }
		        
		        if($status == '2' && $invoice_data['status'] == '1' && $invoice_data['prefix'] == 'TEMP_') //completed aka not paid and not draft
		        {
		            $high_invoice_nr = $invoices_system->get_next_invoice_number($invoice_type, $clientid);
		            
		            $_POST['prefix'] = $high_invoice_nr['prefix'];
		            $_POST['invoice_number'] = $high_invoice_nr['invoicenumber'];
		        }
		        else
		        {
		            $_POST['prefix'] = $invoice_data['prefix'];
		            $_POST['invoice_number'] = $invoice_data['invoice_number'];
		        }
		        //save/edit invoice here
		        
		        if(strlen($_POST['invoice']['address']) > 0 ){
		            if(strpos($_POST['invoice']['address'],"style"))
		            {
		                $_POST['invoice']['address'] = preg_replace('/style=\"(.*)\"/i', '', $_POST['invoice']['address']);
		            }
		            $_POST['invoice']['address'] = str_replace(array(" <p >"," <p>"," <p> ","<p >","<p>"),"", $_POST['invoice']['address']);
		            $_POST['invoice']['address'] = str_replace(array("</p>"," </p>","</p> "),"", $_POST['invoice']['address']);
		            $_POST['invoice']['address'] = str_replace(array("\n"),"<br />", $_POST['invoice']['address']);
		        }
		        
		        
		        $edit_invoice = $invoices_system_form->edit_invoice($invoice_type, $_REQUEST['invoiceid'], $clientid, $_POST, $status);
		        
		        
		        //redirect to invoices list
		        if(empty($_POST['pdf']))
		        {
		            if($edit_invoice)
		            {
		                
		                $this->_redirect(APP_BASE . 'invoicenew/demstepcareinternal?flg=edtsuc');
		            }
		            else
		            {
		                $this->_redirect(APP_BASE . 'invoicenew/demstepcareinternal?flg=edterr');
		            }
		        }
		        elseif($_POST['pdf'])
		        {
		            foreach($_POST['custom'] as $k_item => $v_custom)
		            {
		                $new_invoice_items[] = array(
		                    'shortcut' => $_POST['shortcut'][$k_item],
		                    'description' => $_POST['description'][$k_item],
		                    'location_type' => $_POST['location_type'][$k_item],
		                    'qty' => $_POST['qty'][$k_item],
		                    'price' => Pms_CommonData::str2num($_POST['price'][$k_item]),
		                    'total' => Pms_CommonData::str2num($_POST['total'][$k_item]),
		                    'custom' => $v_custom,
		                );
		            }
		            $params['ipids'] = array($invoice_data['ipid']);
		            
		            //patient days
		            $conditions['client'] = $this->clientid;
		            $conditions['ipids'] = array($invoice_data['ipid']);
		            $conditions['periods'][0]['start'] = '2009-01-01';
		            $conditions['periods'][0]['end'] = date('Y-m-d');
		            
		            $sql = 'e.epid, p.ipid, e.ipid,';
		            $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		            $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		            $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		            $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		            $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		            $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		            
		            //be aware of date d.m.Y format here
		            $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		            
		            $params['invoices'] = array($invoice_data['id']);
		            $params['invoice_type'] = $invoice_type;
		            $params['patient_days'] = $patient_days;
		            $params['get_pdf'] = '1';
		            $params['only_pdf'] = 1;
		            $_REQUEST['type'] = 'pdf';
		            
		            $params['custom_data']['address'] = $_POST['invoice']['address'];
		            $params['custom_data']['footer'] = $_POST['footer'];
		            $params['custom_data']['items'] = $new_invoice_items;
		            
		            $this->generate_systeminvoice($params);
		            exit;
		        }
		    }
		    
		    if($_REQUEST['invoiceid'] && empty($_REQUEST['mode']))
		    {
		        if(!$invoice_data || empty($invoice_data))
		        {
		            $this->_redirect(APP_BASE . 'invoicenew/demstepcareinternal');
		        }
		        
		        $user_details = User::getUsersDetails($invoice_data['userid']);
		        
		        $patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
		        $client_detail = $client_details->getClientDataByid($invoice_data['client']);
		        $this->view->client_ik = $client_detail[0]['institutskennzeichen'];
		        
		        //health insurance
		        $divisions = $hi_perms->getClientHealthInsurancePermissions($invoice_data['client']);
		        $hi_perms_divisions = $divisions;
		        
		        //health insurance
		        $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($invoice_data['ipid']);
		        $this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
		        $this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
		        $this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
		        
		        if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
		        {
		            $helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
		            $healtharray = $helathins->toArray();
		            
		            if(empty($healthinsu_array[0]['name']))
		            {
		                $healthinsu_array[0]['name'] = $healtharray['name'];
		            }
		            if(empty($healthinsu_array[0]['ins_street']))
		            {
		                $healthinsu_array[0]['ins_street'] = $healtharray['street1'];
		            }
		            if(empty($healthinsu_array[0]['ins_zip']))
		            {
		                $healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
		            }
		            
		            if(empty($healthinsu_array[0]['ins_city']))
		            {
		                $healthinsu_array[0]['ins_city'] = $healtharray['city'];
		            }
		            
		            if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
		            {
		                $this->view->health_insurance_ik = $healtharray['iknumber'];
		            }
		            
		            if(strlen($healthinsu_array[0]['kvk_no']) == 0)
		            {
		                $this->view->health_insurance_kassenr = $healtharray['kvnumber'];
		            }
		        }
		        
		        
		        if($hi_perms_divisions)
		        {
		            $healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($invoice_data['ipid'], $healthinsu_array[0]['companyid']);
		        }
		        
		        $pathealthinsurancenr = "";
		        if(count($healthinsu_array[0]))
		        {
		            $phi_details = $healthinsu_array[0]['name'];
		        }
		        else
		        {
		            $phi_details = "--";
		        }
		        
		        $phi_details_sub = $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];
		        
		        $this->view->health_insurance = $phi_details;
		        $this->view->hi_subdiv_address = $phi_details_sub;
		        
		        
		        //pflege
		        //get pflegestuffe in current invoice period
		        $pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($invoice_data['ipid'], $invoice_data['invoice_start'], $invoice_data['invoice_end']);
		        
		        if($pflege_arr)
		        {
		            $last_pflege = end($pflege_arr);
		            $this->view->patient_pflegestufe = $last_pflege['stage'];
		        }
		        else
		        {
		            $this->view->patient_pflegestufe = ' - ';
		        }
		        
		        if(strlen($invoice_data['address']) == 0)
		        {
		            $invoice_data['address'] = $phi_details_sub;
		        }
		        
		        
		        $this->view->invoice_data = $invoice_data;
		        $this->view->patient_details = $patient_details;
		        $this->view->client_details = $client_detail[0];
		    }
		    else
		    {
		        //redirect if no invoiceid is present
		        $this->_redirect(APP_BASE . "error/previlege");
		    }
		}
		#########################################################################
		#########################################################################
		################## ISPC-2585 Ancuta 15-16.06.2020 [END] ###############
		#########################################################################
		
	
		
		private function merge_multiple_pdf_files($params)
		{
		    //create public/joined_files/ dir
		    while(!is_dir(PDFJOIN_PATH))
		    {
		        mkdir(PDFJOIN_PATH);
		        if($i >= 50)
		        {
		            exit; //failsafe
		        }
		        $i++;
		    }
		    
		    //create public/joined_files/$clientid dir
		    $pdf_path = PDFJOIN_PATH . '/1/dddd' ;
		    //  				    $pdf_path = PDFJOIN_PATH;
		    $files = scandir($pdf_path);
		    foreach($files as $k=>$fname)
		    {
		        if(strlen($fname) > 2 && file_exists(PDFJOIN_PATH . '/1/dddd/'.$fname) )
		        {
		            $fls[] = PDFJOIN_PATH . '/1/dddd/'.$fname;
		        }
		    }
		    $merged_other_filename = PDFJOIN_PATH . '/1/dddd/vasile2.pdf';
		    //merge all files existing in $batch_temp_files!
		    $merge = new MultiMerge();
		    $merge_process = $merge->mergePdf($fls, $merged_other_filename);
		    
		    if(file_exists($merged_other_filename))
		    {
		        
		        dd($merged_other_filename);
		        
		        $this->system_file_upload($clientid, $merged_other_filename, true);
		        //stop unlinking files
		        //						unlink($merged_filename);
		        ob_end_clean();
		        header("Expires: Tue, 03 Jul 2001 06:00:00 GMT");
		        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
		        header("Cache-Control: no-store, no-cache, must-revalidate");
		        header("Cache-Control: post-check=0, pre-check=0", false);
		        header("Pragma: no-cache");
		        
		        switch($export_file_type)
		        {
		            case 'pdf':
		                header('Content-type: application/pdf');
		                break;
		            case 'doc':
		                header('Content-type: application/vnd.ms-word');
		                break;
		            case 'rtf':
		                header("Content-type: application/rtf");
		                break;
		            case 'odt':
		                header('Content-type: application/vnd.oasis.opendocument.text');
		                break;
		            default:
		                exit;
		                break;
		        }
		        //ISPC-2472  Ancuta- added $batch_temp_name	 12.11.2019
		        if($batch_temp_name){
		            header('Content-Disposition: attachment; Filename="' . $batch_temp_name . '.' . $export_file_type . '"');
		        } else{
		            header('Content-Disposition: attachment; Filename="merged_invoice' . $suffix . '.' . $export_file_type . '"');
		        }
		        readfile($merged_other_filename);
		        unlink($merged_other_filename);
		        exit;
		    }
		    exit;
		    
		}
		
		//    ISPC-2609 	print QUEUE
		/**
		 * 
		 *  ISPC-2609 	print QUEUE
		 */
		    public function downloadprintjobfileAction() {
		        $this->_helper->layout->setLayout('layout');
		        $this->_helper->viewRenderer->setNoRender();
		        
		        
		        
		        
		        $id = (int)$_GET['id'];
		        
		        $jobs_q= Doctrine_Query::create()
		        ->select('*')
		        ->from('PrintJobsBulk')
		        ->where("id = ?",$id)
		        ->fetchArray();
		        
		        dd($jobs_q);
		        
		        
		        dd($_REQUEST);
		        $clientid = $this->clientid;
		        $member_id = ! empty($_GET['id']) ? (int)$_GET['id'] : 0;
		        $revision = (int)$_GET['rev'];
		        
		        $isdeleted = 0;
		        $file_password = $this->filepass;
		        
		        if($_GET['doc_id'] > 0)
		        {
		            $file_arr = Doctrine_Query::create()
		            ->select()
		            ->from('MemberFiles m')
		            ->where('id = ?', $id)
		            ->andWhere('clientid = ?', $clientid)
		            ->andWhere('revision = ?', $revision)
		            ->andWhere('isdeleted = ?', $isdeleted)
		            ->limit(1);
		            
		            if ($member_id != 0 ) {
		                $file_arr->andWhere('member_id = ?', $member_id);
		            }
		            
		            $file_arr = $file_arr->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
		            
		            
		            // 				if($fl = Doctrine::getTable('MemberFiles')->findByIdAndClientidAndMember_idAndRevisionAndIsdeleted($id, $clientid, $member_id , $revision, $isdeleted))
		            if(is_array($file_arr) && $file_arr['ftp_path'] != '')
		            {
		                //$file_arr = $fl->toArray();
		                
		                //$file_arr = array_values($file_arr);
		                
		                //$file_arr =$file_arr[0];
		                // 					echo "<pre>";
		                // 					print_r($file_arr);
		                // 					die();
		                
		                $ftp_path_info = pathinfo($file_arr['ftp_path']);
		                if(empty($file_arr['ftp_path'])){
		                    die("ftp path error");
		                }
		                
		                $local_zip = PUBLIC_PATH . "/uploads/" . $ftp_path_info['filename'] . '.zip';
		                
		                // 					if($con_id = Pms_FtpFileupload::ftpconnect())
		                    // 					{
		                    // 						$download = Pms_FtpFileupload::filedownload($con_id, $local_zip , $file_arr['ftp_path']);
		                    // 						Pms_FtpFileupload::ftpconclose($con_id);
		                    // 					} else {
		                    // 						die("ftp error");
		                    // 					}
		                        
		                    // 					$cmd = "unzip -P " . $file_password ." ". $local_zip . ";";
		                    // 					@exec($cmd);
		                    $pathinfo22 =  pathinfo(basename($file_arr['ftp_path']));
		                    $filename = $pathinfo22['filename'] . "/" . $file_arr['file_realname'];
		                    
		                    $old = $_REQUEST['old'] ? true : false;
		                    if (($path = Pms_CommonData::ftp_download($file_arr['ftp_path'] , $file_password , $old , $file_arr['clientid'] , $filename, "MemberFiles", $file_arr['id'])) === false) {
		                        //failed to download ftp file
		                    }
		                    
		                    $path_download = $path ."/" . $file_arr['file_realname'];
		                    
		                    if (!file_exists($path_download)){
		                        $path = FTP_DOWNLOAD_PATH . "/" . $ftp_path_info['filename'] . "/"; // change the path to fit your websites document structure
		                        $path_download = $path . $file_arr['file_realname'];
		                    }
		                    if (!file_exists($path_download)){
		                        $path = FTP_DOWNLOAD_PATH . "/" ; // change the path to fit your websites document structure
		                        $path_download = $path . $file_arr['file_realname'];
		                    }
		                    
		                    // 					die($path_download);
		                    
		                    // 					$path_download = PUBLIC_PATH . "/uploads/" . $ftp_path_info['filename'] . "/" . $file_arr['file_realname'];
		                    //echo $path_download;die();
		                    if(file_exists($path_download))
		                    {
		                        $fsize = @filesize($path_download);
		                        $filename = $file_arr["file_showname"];
		                        $ext = explode(".", $file_arr["file_showname"]);
		                        $ext = @end($ext);
		                        
		                        if (strtolower($file_arr["file_type"]) != strtolower($ext) ){
		                            $filename .= "." . $file_arr["file_type"];
		                        }
		                        
		                        //$filename = $file_arr["file_showname"].'.'.$file_arr["file_type"];
		                        /*
		                         if (Pms_CommonData::normalizeString($file_arr["file_showname"]) == $file_arr["file_realname"]){
		                         $filename = $file_arr["file_showname"];
		                         }else{
		                         $filename = $file_arr["file_showname"]."_".$file_arr["file_realname"];
		                         }
		                         */
		                        
		                        header('Pragma: public');
		                        header('Expires: 0');
		                        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
		                        header('Content-Type: application/octet-stream');
		                        header('Content-Transfer-Encoding: Binary');
		                        header("Content-length: $fsize");
		                        header("Cache-Control: private",true);
		                        
		                        if($_COOKIE['mobile_ver'] != 'yes' || ($_COOKIE['mobile_ver'] == 'yes' && stripos($_SERVER['HTTP_USER_AGENT'], 'Android') !== false))
		                        { //if on mobile version don't send content-disposition to play nice with iPad
		                            header("Content-Disposition: attachment; filename=\"" . $filename . "\"");
		                        }
		                        
		                        ob_flush();	ob_clean();flush();
		                        readfile($path_download);
		                        unlink($path_download);
		                        exit;
		                    }
		            }
		            
		        }
		        exit;
		    }
		    
		    
 
		    
		    
		    /**
		     * ISPC-2609 Ancuta 07.09.2020
		     */
		    public function printjobdeleteAction(){
		        
		        $this->_helper->viewRenderer->setNoRender();
		        $this->_helper->layout->setLayout('layout_ajax');
		        
		            
	            if ( !empty($_REQUEST['delete']) && !empty($_REQUEST['id']) && $_REQUEST['delete'] == "1" )
	            {
	                $pjb_obj = Doctrine::getTable('PrintJobsBulk')->find($_REQUEST['id']);
	                if($pjb_obj){
	                    $pjb_obj->delete();
	                }
	                
	            }
		        
		    }
		    
		    
		    /**
		     * ISPC-2609 Ancuta 07.09.2020
		     */
		    public function printjobclearAction(){
		        
		        $this->_helper->viewRenderer->setNoRender();
		        $this->_helper->layout->setLayout('layout_ajax');
		        
		        
		        if ( !empty($_REQUEST['user']) && !empty($_REQUEST['client']) && !empty($_REQUEST['invoice_type']) )
	            {
	                //find all - and delete all
	                
	                
	                $fdoc1 = Doctrine_Query::create();
	                $fdoc1->select('*');
	                $fdoc1->from('PrintJobsBulk');
	                $fdoc1->where("clientid = ?", $_REQUEST['client']);
	                $fdoc1->andWhere("user = ?", $_REQUEST['user']);
	                $fdoc1->andWhere("invoice_type = ?", $_REQUEST['invoice_type']);
	                $fdocarray = $fdoc1->fetchArray();
	                
	                if(!empty($fdocarray)){
	                    foreach($fdocarray as $job_k=>$job_data){
	                        
	                        $pjb_obj = Doctrine::getTable('PrintJobsBulk')->find($job_data['id']);
        	                if($pjb_obj){
        	                    $pjb_obj->delete();
        	                }
	                    }
	                }
	                
	            }
		        
		    }
		    
		    
		    /**
		     * ISPC-2609 Ancuta 07.09.2020
		     */
		    public function printjobinfoAction(){
		        $clientid = $this->clientid;
		        $userid = $this->userid;
		        
		        $user = new User();
		        $user_details = array();
		        $user_details = $user->get_client_users($clientid,1,true);
		        
		        //populate the datatables
		        if ($this->getRequest()->isXmlHttpRequest() && $this->getRequest()->isPost() && !empty($_REQUEST['invoice_type'])) {
		            $this->_helper->layout()->disableLayout();
		            $this->_helper->viewRenderer->setNoRender(true);
		            if(!$_REQUEST['length']){
		                $_REQUEST['length'] = "25";
		            }
		            $limit = (int)$_REQUEST['length'];
		            $offset = (int)$_REQUEST['start'];
		            $search_value = addslashes($_REQUEST['search']['value']);
		            
		            $columns_array = array(
		                "0" => "user"
		            );
		            $columns_search_array = $columns_array;
		            
		            if(isset($_REQUEST['order'][0]['column']))
		            {
		                $order_column = $_REQUEST['order'][0]['column'];
		                $order_dir = $_REQUEST['order'][0]['dir'];
		            }
		            else
		            {
		                array_push($columns_array, "id");
		                $nrcol = array_search ('id', $columns_array);
		                $order_column = $nrcol;
		                $order_dir = "ASC";
		            }
		            
		            $order_by_str ='CONVERT(CONVERT('.addslashes(htmlspecialchars($columns_array[$order_column])).' USING BINARY) USING utf8) '.$order_dir;
		            
		            // ########################################
		            // #####  Query for count ###############
		            $fdoc1 = Doctrine_Query::create();
		            $fdoc1->select('count(*)');
		            $fdoc1->from('PrintJobsBulk');
		            $fdoc1->where("clientid = ?", $clientid);
		            $fdoc1->andWhere("user = ?", $userid);
		            $fdoc1->andWhere("invoice_type = ?", $_REQUEST['invoice_type']);
		            //$fdoc1->andWhere('DATE(create_date) = ? ', date('Y-m-d'));
		            $fdocarray = $fdoc1->fetchArray();
		            $full_count  = $fdocarray[0]['count'];

		            // ########################################
		            // #####  Query for details ###############
		            $fdoc1->select('*');
		            $fdoc1->orderBy('create_date DESC');
		            $fdoc1->limit($limit);
		            $fdoc1->offset($offset);
		            
		            $fdoclimit = Pms_CommonData::array_stripslashes($fdoc1->fetchArray());
		            

		            
		            
		            $qs = Doctrine_Query::create();
		            $qs->select('*');
		            $qs->from('PrintJobsBulk');
		            $qs->where('status ="active" ');
		            $qs->orderBy('create_date ASC');
		            $act_result = $qs->fetchArray();
		            
		            $pnr = 0;
		            foreach($act_result as $pk=>$pactive){
		                $pnr++;
		                $qnr[$pactive['id']] = $pnr;
		            }

		            $report_ids = array();
		            $fdoclimit_arr = array();
		            foreach ($fdoclimit as $key => $report)
		            {
		                $fdoclimit_arr[$report['id']] = $report;
		                $report_ids[] = $report['id'];
		            }
		            
		            $row_id = 0;
		            $link = "";
		            
		            $resulted_data = array();
		            
		            $row_id = 0 ;
		            foreach($fdoclimit_arr as $k=>$data){
		                if($data['status'] == 'active'  ) {
		                    $resulted_data[$row_id]['queue_nr'] = $qnr[$data['id']];
		                } else{
		                    $resulted_data[$row_id]['queue_nr'] =  '--';
		                }
		                
		                $resulted_data[$row_id]['print_user'] = $user_details[$data['user']];
		                $resulted_data[$row_id]['print_status'] = self::translate('ps_'.$data['status']);
		                $data['clientid_enc']= Pms_Uuid::encrypt($data['clientid']);
		                
		                if($data['status'] == 'completed' && $data['client_file_id'] != 0){
		                    
		                    $resulted_data[$row_id]['print_link'] = '<a href="'.APP_BASE.'misc/clientfile?doc_id='.$data['client_file_id'].'&cid='.$data['clientid_enc'].'">  <img border="0" src="'.RES_FILE_PATH.'/images/file_download.png" />  </a>';
		                    
		                } else{
		                    $resulted_data[$row_id]['print_link'] = '--';
		                }
		                $resulted_data[$row_id]['print_date'] = date('d.m.Y H:i',strtotime($data['create_date']));
		                
		                
		                $resulted_data[$row_id]['actions'] = '<a href="javascript:void(0);"  class="job_delete" rel="'.$data['id'].'" id="job_delete_'.$data['id'].'"><img border="0" src="'.RES_FILE_PATH.'/images/action_delete.png"></a>';
	                    $row_id++;
		            }
		            
		            $response['draw'] = $_REQUEST['draw']; //? get the sent draw from data table
		            $response['recordsTotal'] = $full_count;
		            $response['recordsFiltered'] = $filter_count; // ??
		            $response['data'] = $resulted_data;
		            
		            $this->_helper->json->sendJson($response);
		        }
		        
		    }
		    
		    
		    
        	/**
        	 * ISPC-2609
        	 */
		    public function __StartPrintJobs(){
		        $appInfo = Zend_Registry::get('appInfo');
		        $app_path  = 	isset($appInfo['appCronPath']) && !empty($appInfo['appCronPath']) ? $appInfo['appCronPath'] : false;
		        
		        $function_path = $app_path.'/cron/processprintjobs';
		        popen('curl -s '.$function_path.' &', 'r');
		    }
		    
		    /*
		     * ISPC-2747 Lore 23.11.2020
		     */
		    public function createcustominvoicealltypesAction()
		    {
		        	        		        
		        $this->view->invoice_type_for_create = $_REQUEST['newinvoice'];
		        if(strlen($_REQUEST['redirect2new']) > 0){
		            $this->view->redirect2new = $_REQUEST['redirect2new'];
		        } else {
		            $this->view->redirect2new = '0';
		        }
		        if(strlen($_REQUEST['invoice_type']) > 0){
		            $this->view->invoice_type = $_REQUEST['invoice_type'];
		        } else {
		            $this->view->invoice_type = $_REQUEST['newinvoice'];
		        }
		        
		        
		        $ppun = new PpunIpid();
		        $modules = new Modules();
		        $paycenters = new Paycenters();
		        
		        if($modules->checkModulePrivileges("88", $this->clientid))	{
		            $ppun_module = "1";
		        } else {
		            $ppun_module = "0";
		        }
		        
		        if($modules->checkModulePrivileges("90", $this->clientid))	{
		            $debtor_number_module = "1";
		        } else {
		            $debtor_number_module = "0";
		        }
		        
		        if($modules->checkModulePrivileges("91", $this->clientid)) 	{
		            $paycenter_module = "1";
		        } else {
		            $paycenter_module = "0";
		        }
		        
		        $this->view->ppun_module = $ppun_module;
		        $this->view->debtor_number_module = $debtor_number_module;
		        $this->view->paycenter_module = $paycenter_module;
		        
		        $hi_perms = new HealthInsurancePermissions();
		        $phelathinsurance = new PatientHealthInsurance();
		        $healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
		        
		        $ipid_sel = false;
		        if(strlen($_REQUEST['pid']) > 0)
		        {
		            //another patient selected
		            $decid_sel = Pms_Uuid::decrypt($_REQUEST['pid']);
		            $ipid_sel = Pms_CommonData::getIpid($decid_sel);
		            
		            $this->view->show_pat_modal = "0";
		        }
		        else
		        {
		            $this->view->show_pat_modal = "1";
		        }
		        
		        
		        if($ipid_sel !== false)
		        {
		            $client_details = Pms_CommonData::getClientData($this->clientid);
		            
		            //get invoice selected patient data
		            //patient days
		            $conditions['client'] = $this->clientid;
		            $conditions['ipids'] = array($ipid_sel);
		            $conditions['periods'][0]['start'] = '2009-01-01';
		            $conditions['periods'][0]['end'] = date('Y-m-d');
		            
		            $sql = 'e.epid, p.ipid, e.ipid,';
		            $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		            $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		            $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		            $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		            $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		            $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		            
		            //beware of date d.m.Y format here
		            $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		            
		            //patient HEALTH INSURANCE START
		            $healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance(array($ipid_sel), true);
		            
		            //multiple hi subdivisions && hi subdivisions permissions
		            $divisions = HealthInsurancePermissions::getClientHealthInsurancePermissions($this->clientid);
		            
		            if($divisions)
		            {
		                foreach($healthinsu_multi_array as $k_hi => $v_hi)
		                {
		                    $hi_companyids[] = $v_hi['companyid'];
		                }
		                
		                $healthinsu_subdiv_arr = PatientHealthInsurance2Subdivisions::get_hi_subdivisions_multiple($hi_companyids);
		            }
		            
		            $hi_address[$ipid_sel] = array();
		            $this->view->privatepatient = $healthinsu_multi_array[$ipid_sel]['privatepatient'];
		            
		            $invoice_data = array();
		            
		            //ppun
		            if($ppun_module == "1" && $healthinsu_multi_array[$ipid_sel]['privatepatient'] == "1")
		            {
		                //get ppun (private patient unique number)
		                $ppun_number = $ppun->check_patient_ppun($ipid_sel, $this->clientid);
		                if($ppun_number)
		                {
		                    $invoice_data['ppun'] = $ppun_number['ppun'];
		                }
		            }
		            
		            if($paycenter_module == "1" && $patient_days[$ipid_sel]['details']['zip'] > '0')
		            {
		                $found_paycenter = $paycenters->get_paycenter($patient_days[$ipid_sel]['details']['zip'], $this->clientid);
		                $invoice_data['paycenter'] = '';
		                if($found_paycenter)
		                {
		                    $invoice_data['paycenter'] = $found_paycenter;
		                }
		            }
		            
		            //debtor number
		            if($debtor_number_module == "1" && $healthinsu_multi_array[$ipid_sel]['privatepatient'] == "0")
		            {
		                //get debtor number from patient healthinsurance
		                if(strlen($healthinsu_multi_array[$ipid_sel]['ins_debtor_number']) > '0')
		                {
		                    $invoice_data['debtor_number'] = $healthinsu_multi_array[$ipid_sel]['ins_debtor_number'];
		                }
		                else
		                {
		                    $invoice_data['debtor_number'] = $healthinsu_multi_array[$ipid_sel]['company']['debtor_number'];
		                }
		            }
		            
		            if($divisions && strlen($healthinsu_subdiv_arr[$ipid_sel]['3']['name']) > '0' && $healthinsu_multi_array[$ipid_sel]['privatepatient'] == '0')
		            {
		                $master_data['patients'][$ipid_sel]['health_insurace'] = $healthinsu_subdiv_arr[$ipid_sel]['3'];
		                
		                $hi_address[$ipid_sel]['address'][] = $healthinsu_subdiv_arr[$ipid_sel][3]['name'];
		                if($healthinsu_subdiv_arr[$ipid_sel][3]['insurance_provider'])
		                {
		                    $hi_address[$ipid_sel]['address'][] = $healthinsu_subdiv_arr[$ipid_sel][3]['insurance_provider'];
		                }
		                /* else
		                 {
		                 $hi_address[$ipid_sel]['address'][] = $healthinsu_subdiv_arr[$ipid_sel][3]['contact_person'];
		                 } */
		                $hi_address[$ipid_sel]['address'][] = $healthinsu_subdiv_arr[$ipid_sel][3]['street1'];
		                $hi_address[$ipid_sel]['address'][] = $healthinsu_subdiv_arr[$ipid_sel][3]['zip'] . ' ' . $healthinsu_subdiv_arr[$ipid_sel][3]['city'];
		            }
		            else if($healthinsu_multi_array[$ipid_sel]['privatepatient'] == '0')
		            {
		                $master_data['patients'][$ipid_sel]['health_insurace'] = $healthinsu_multi_array[$ipid_sel];
		                
		                if(strlen($healthinsu_multi_array[$ipid_sel]['company_name']) > '0')
		                {
		                    $hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['company_name'];
		                }
		                else
		                {
		                    $hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['company']['name'];
		                }
		                
		                if(strlen($healthinsu_multi_array[$ipid_sel]['ins_insurance_provider']) > '0')
		                {
		                    $hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['ins_insurance_provider'];
		                }
		                else
		                {
		                    $hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['company']['insurance_provider'];
		                }
		                if(strlen($healthinsu_multi_array[$ipid_sel]['ins_street']) > '0')
		                {
		                    $hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['ins_street'];
		                }
		                else
		                {
		                    $hi_address[$ipid_sel]['address'][] = $healthinsu_multi_array[$ipid_sel]['company']['street1'];
		                }
		                
		                if(strlen($healthinsu_multi_array[$ipid_sel]['ins_zip']) > '0' || strlen($healthinsu_multi_array[$ipid_sel]['ins_city']) > '0')
		                {
		                    if(strlen($healthinsu_multi_array[$ipid_sel]['ins_zip']) > '0')
		                    {
		                        $hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']][] = $healthinsu_multi_array[$ipid_sel]['ins_zip'];
		                    }
		                    
		                    if(strlen($healthinsu_multi_array[$ipid_sel]['ins_city']) > '0')
		                    {
		                        $hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']][] = $healthinsu_multi_array[$ipid_sel]['ins_city'];
		                    }
		                    
		                    $hi_address[$ipid_sel]['address'][] = implode(' ', $hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']]);
		                }
		                else
		                {
		                    if(strlen($healthinsu_multi_array[$ipid_sel]['company']['zip']) > '0')
		                    {
		                        $hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']][] = $healthinsu_multi_array[$ipid_sel]['company']['zip'];
		                    }
		                    
		                    if(strlen($healthinsu_multi_array[$ipid_sel]['company']['city']) > '0')
		                    {
		                        $hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']][] = $healthinsu_multi_array[$ipid_sel]['company']['city'];
		                    }
		                    
		                    $hi_address[$ipid_sel]['address'][] = implode(' ', array_values(array_unique($hi_addr_zip_city[$healthinsu_multi_array[$ipid_sel]['id']])));
		                }
		            }
		            else
		            {
		                //private patient case!
		                $hi_address[$ipid_sel]['address'][] = $patient_days[$ipid_sel]['details']['first_name'] . ' ' . $patient_days[$ipid_sel]['details']['last_name'];
		                $hi_address[$ipid_sel]['address'][] = $patient_days[$ipid_sel]['details']['street1'];
		                $hi_address[$ipid_sel]['address'][] = $patient_days[$ipid_sel]['details']['zip'] . ' ' . $patient_days[$ipid_sel]['details']['city'];
		            }
		            
		            $invoice_data['client_ik'] = $client_details[0]['institutskennzeichen'];
		            
		            $patient_days[$ipid_sel]['details']['birthd'] = date('d.m.Y', strtotime($patient_days[$ipid_sel]['details']['birthd']));
		            
		            $invoice_data['epid'] = $patient_days[$ipid_sel]['details']['epid'];
		            $invoice_data['first_name'] = $patient_days[$ipid_sel]['details']['first_name'];
		            $invoice_data['last_name'] = $patient_days[$ipid_sel]['details']['last_name'];
		            $invoice_data['birthd'] = $patient_days[$ipid_sel]['details']['birthd'];
		            $invoice_data['street'] = $patient_days[$ipid_sel]['details']['street1'] . "\n" . $patient_days[$ipid_sel]['details']['zip'] . ' ' . $patient_days[$ipid_sel]['details']['city'];
		            $invoice_data['address'] = implode('<br />', array_values(array_unique($hi_address[$ipid_sel]['address'])));
		            
		            $this->view->invoice_data = $invoice_data;
		            
		            //insert invoice
		            if($this->getRequest()->isPost())
		            {
		                $post = $_POST;
		                $post['clientid'] = $this->clientid;
		                $post['user'] = $this->userid;
		                $post['ipid'] = $ipid_sel;
		                
		                
		                $system_invoice_details = Pms_CommonData::clients_invoices_details();
		                if(empty($system_invoice_details[$_REQUEST['inv_typ']])){
		                    $this->_redirect(APP_BASE . "error/previlege");
		                    exit;
		                }
		                
		                $page_to_return = $system_invoice_details[$_REQUEST['inv_typ']]['page_invoices_listed'];
		                
		                if(empty($_POST['pdf']))
		                {
		                    
		                    if($_REQUEST['inv_typ'] == "nie_patient_invoice" || $_REQUEST['invoice_type'] == 'nie_patient_invoice'){
		                        $invoice_form = new Application_Form_HiInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "bayern_invoice" || $_REQUEST['invoice_type'] == 'bayern_invoice'){
		                        $invoice_form = new Application_Form_BayernInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "bw_sapv_invoice" || $_REQUEST['invoice_type'] == 'bw_sapv_invoice'){
		                        $invoice_form = new Application_Form_BwInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "bw_sgbv_invoice" || $_REQUEST['invoice_type'] == 'bw_sgbv_invoice'){
		                        $invoice_form = new Application_Form_SgbvInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "bw_sgbxi_invoice" || $_REQUEST['invoice_type'] == 'bw_sgbxi_invoice'){
		                        $invoice_form = new Application_Form_SgbxiInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "bw_mp_invoice" || $_REQUEST['invoice_type'] == 'bw_mp_invoice'){
		                        $invoice_form = new Application_Form_MedipumpsInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "bre_sapv_invoice" || $_REQUEST['invoice_type'] == 'bre_sapv_invoice'){
		                        $invoice_form = new Application_Form_BreInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "bre_hospiz_sapv_invoice" || $_REQUEST['invoice_type'] == 'bre_hospiz_sapv_invoice'){
		                        $invoice_form = new Application_Form_BreHospizInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "he_invoice" || $_REQUEST['invoice_type'] == 'he_invoice'){
		                        $invoice_form = new Application_Form_HeInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "rpinvoice" || $_REQUEST['invoice_type'] == 'rpinvoice'){
		                        $invoice_form = new Application_Form_RpInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "sh_invoice" || $_REQUEST['invoice_type'] == 'sh_invoice'){
		                        $invoice_form = new Application_Form_ShInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "sh_internal_invoice" || $_REQUEST['invoice_type'] == 'sh_internal_invoice'){
		                        $invoice_form = new Application_Form_ShInternalInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "bra_invoice" || $_REQUEST['invoice_type'] == 'bra_invoice'){
		                        $invoice_form = new Application_Form_BraInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "sh_shifts_internal_invoice" || $_REQUEST['invoice_type'] == 'sh_shifts_internal_invoice'){
		                        $invoice_form = new Application_Form_ShShiftsInternalInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "nie_user_invoice" || $_REQUEST['invoice_type'] == 'nie_user_invoice'){
		                        $invoice_form = new Application_Form_UsersInvoices();
		                    }
		                    if($_REQUEST['inv_typ'] == "internal_invoice" || $_REQUEST['invoice_type'] == 'internal_invoice'){
		                        $invoice_form = new Application_Form_InternalInvoices();
		                    }
		                    
		                    //allowed_invoice
	                        if($_REQUEST['inv_typ'] == 'bw_sapv_invoice_new'){
	                            $invoice_form = new Application_Form_BwInvoicesNew();
	                        }
	                        if($_REQUEST['inv_typ'] == 'bw_medipumps_invoice'){
	                            $invoice_form = new Application_Form_MedipumpsInvoicesNew();
	                        }
	                        if($_REQUEST['inv_typ'] == 'sh_invoice'){
	                            $invoice_form = new Application_Form_ShInvoices();
	                        }
	                        if($_REQUEST['inv_typ'] == 'hospiz_invoice'){
	                            $invoice_form = new Application_Form_HospizInvoices();
	                        }
	                        if($_REQUEST['inv_typ'] == 'rlp_invoice'){
	                            $invoice_form = new Application_Form_RlpInvoices();
	                        }
	                        if($_REQUEST['inv_typ'] == 'bre_kinder_invoice'){
	                            $invoice_form = new Application_Form_InvoiceSystem();
	                            $post['invoice_type'] = 'bre_kinder_invoice';
	                        }
	                        if($_REQUEST['inv_typ'] == 'nr_invoice'){
	                            $invoice_form = new Application_Form_InvoiceSystem();
	                            $post['invoice_type'] = 'nr_invoice';
	                        }
	                        if($_REQUEST['inv_typ'] == 'demstepcare_invoice'){
	                            $invoice_form = new Application_Form_InvoiceSystem();
	                            $post['invoice_type'] = 'demstepcare_invoice';
	                        }

		                    
		                    if(empty($invoice_form)){
		                        $this->redirect(APP_BASE . $page_to_return);
		                    }
		                    
		                    if($invoice_form->validate_custom_invoice($post))
		                    {
		                        $invoice_form->insert_custom_invoice($post);
		                        
		                        if($_REQUEST['redirect2new'] == '1'){
		                            $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type='.$_REQUEST['invoice_type'] );
		                            exit();
		                        } else {
		                            $this->redirect(APP_BASE . $page_to_return);
		                        }
		                    }
		                    else
		                    {
		                        $invoice_form->assignErrorMessages();
		                        
		                        //keep invoice data if errors occurs
		                        $this->view->invoice_data = $post;
		                        
		                        //keep invoice items data if error occurs
		                        foreach($post['row'] as $k_post => $v_post)
		                        {
		                            $invoice_items[] = array(
		                                'shortcut' => $post['shortcut'][$k_post],
		                                'name' => $post['name'][$k_post],
		                                'qty' => $post['qty'][$k_post],
		                                'price' => $post['price'][$k_post],
		                                'custom' => $post['custom'][$k_post],
		                                'total' => $post['total'][$k_post],
		                            );
		                        }
		                        
		                        $this->view->invoice_items = $invoice_items;
		                    }
		                }
		                
		                
		                if(!empty($_POST['pdf']))
		                {
		                    
		                    $invoice_type = $_REQUEST['inv_typ'];
		                    $clientid = $this->clientid;
		                    
		                    $extra_details_invoice = array(
		                        "nie_patient_invoice" => array(
		                            "template"      => "health_insurance_invoice.html",
		                            "pdf_name"      => "HiInvoice",
		                        ),
		                        "bayern_invoice" => array(
		                            "template"      => "invoice_bayern_pdf.html",
		                            "pdf_name"      => "BayernPdf",
		                        ),
		                        "bw_sapv_invoice" => array(
		                            "template"      => "invoice_sapv_pdf.html",
		                            "pdf_name"      => "PerformancePdf_invoice_items",
		                        ),
		                        "bw_sgbv_invoice" => array(
		                            "template"      => array('invoice_sgbv_pdf.html', 'socialcodepdf.html'),
		                            "pdf_name"      => "SocialcodePdfs",
		                        ),
		                        "bw_sgbxi_invoice" => array(
		                            "template"      => "invoice_sgbxi_pdf.html",
		                            "pdf_name"      => "SGB_XI",
		                        ),
		                        "bw_mp_invoice" => array(
		                            "template"      => "invoice_medipumps_hi.html",
		                            "pdf_name"      => "MedipumpsControlPdfs",
		                        ),
		                        "bre_sapv_invoice" => array(
		                            "template"      => "invoice_bre_sapv_pdf.html",
		                            "pdf_name"      => "bresapvperformance",
		                        ),
		                        "bre_hospiz_sapv_invoice" => array(
		                            "template"      => "invoice_bre_hospiz_sapv_pdf.html",
		                            "pdf_name"      => "BreHospizSapvPerformanceInvoice",
		                        ),
		                        "he_invoice" => array(
		                            "template"      => "invoice_he_pdf.html",
		                            "pdf_name"      => "HeInvoice",
		                        ),
		                        "rpinvoice" => array(
		                            "template"      => "rpinvoice_pdf.html",
		                            "pdf_name"      => "RP_invoice_items",
		                        ),
		                        "nie_user_invoice" => array(
		                            "template"      => "health_insurance_user_invoice.html",
		                            "pdf_name"      => "",
		                        ),
		                        "internal_invoice" => array(
		                            "template"      => "internal_invoice_pdf.html",
		                            "pdf_name"      => "InternalInvoice",
		                        ),
		                        
		                    );
		                    
		                    $template = $extra_details_invoice[$_REQUEST['inv_typ']]['template'];
		                    $pdf_name = $extra_details_invoice[$_REQUEST['inv_typ']]['pdf_name'];
		                    
		                    $invoice_total = 0;
		                    foreach($_POST['row'] as $k_post => $v_post)
		                    {
		                        $invoice_items[] = array(
		                            'shortcut' => $_POST['shortcut'][$k_post],
		                            'name' => $_POST['name'][$k_post],
		                            'qty' => $_POST['qty'][$k_post],
		                            'price' => $_POST['price'][$k_post],
		                            'custom' => $_POST['custom'][$k_post],
		                            'total' => $_POST['total'][$k_post],
		                            'shortcut_total' => $_POST['total'][$k_post],
		                            
		                        );
		                        $invoice_total = $invoice_total + $_POST['total'][$k_post];
		                    }
		                    
		                    //for sgbxiinvoices
		                    if($_REQUEST['inv_typ'] == "bw_sgbxi_invoice"){
		                        $invoice_items['shortcuts'] = $invoice_items;
		                        $invoice_items['grand_total'] = $invoice_total;
		                    }
		                    
		                    //for sgbvinvoices
		                    if($_REQUEST['inv_typ'] == "bw_sgbv_invoice"){
		                        foreach($invoice_items as $key => $vals){
		                            $invoice_items['group'][$key+1]['shortcut'] = $vals['shortcut'];
		                            $invoice_items['group'][$key+1]['name']     = $vals['name'];
		                            $invoice_items['group'][$key+1]['price']    = $vals['price'];
		                            $invoice_items['group'][$key+1]['qty']      = $vals['qty'];
		                            $invoice_items['group'][$key+1]['shortcut_total'] = $vals['total'];
		                            $invoice_items['group'][$key+1]['custom']     = $vals['custom'];
		                        }
		                        $invoice_items['grand_total'] = $invoice_total;
		                    }
		                    
		                    //for medipumps
		                    if ($_REQUEST['inv_typ'] == "bw_mp_invoice") {
		                        foreach($invoice_items as $key => $vals){
		                            $invoice_items_medi[$invoice_data['id']][$key] = $vals;
		                            $invoice_items_medi[$invoice_data['id']][$key]['priceset'] = 'f';
		                        }
		                        $invoice_items_medi['grand_total'] = $invoice_total;
		                        $invoice_items_medi['percentless_amount'] = $invoice_total;
		                        
		                        $invoice_items = $invoice_items_medi;
		                    }
		                    
		                    $this->view->invoice_items = $invoice_items;
		                    
		                    $params = array();
		                    $params['ipids'] = array($ipid_sel);
		                    
		                    //patient days
		                    $conditions = array();
		                    $conditions['client'] = $this->clientid;
		                    $conditions['ipids'] = array($ipid_sel);
		                    $conditions['periods'][0]['start'] = '2009-01-01';
		                    $conditions['periods'][0]['end'] = date('Y-m-d');
		                    
		                    $sql = 'e.epid, p.ipid, e.ipid,';
		                    $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		                    $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		                    $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		                    $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		                    $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		                    $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		                    
		                    //be aware of date d.m.Y format here
		                    $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		                    
		                    $patientmaster = new PatientMaster();
		                    $patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($ipid_sel), '0');
		                    
		                    $phealthinsurance = new PatientHealthInsurance();
		                    $patient_health = $phealthinsurance->getPatientHealthInsurance($ipid_sel);
		                    
		                    $params['invoices'] = array($invoice_data['id']);
		                    $params['patient_days'] = $patient_days;
		                    $params['get_pdf'] = '1';
		                    $params['only_pdf'] = 1;
		                    
		                    $params['custom_data']['address'] = $_POST['address'];
		                    $params['custom_data']['birthd'] = $_POST['birthd'];
		                    $params['custom_data']['birthdate'] = $_POST['birthdate'];
		                    
		                    $params['custom_data']['first_name'] = $_POST['first_name'];
		                    $params['custom_data']['last_name'] = $_POST['last_name'];
		                    
		                    $params['custom_data']['invoice_start'] = $_POST['start_active'];
		                    $params['custom_data']['invoice_end'] = $_POST['end_active'];
		                    
		                    $params['custom_data']['first_active_day'] = $_POST['start_active'];
		                    $params['custom_data']['last_active_day'] = $_POST['end_active'];
		                    
		                    $params['custom_data']['start_active'] = $_POST['start_active'];
		                    $params['custom_data']['end_active'] = $_POST['end_active'];
		                    
		                    $params['custom_data']['start_sapv'] = $_POST['start_sapv'];
		                    $params['custom_data']['end_sapv'] = $_POST['end_sapv'];
		                    
		                    $params['custom_data']['first_sapv_day'] = $_POST['start_sapv'];
		                    $params['custom_data']['last_sapv_day'] = $_POST['end_sapv'];		                    
		                    
		                    $params['custom_data']['sapv_approve_date'] = $_POST['sapv_approve_date'];
		                    $params['custom_data']['sapv_approve_nr'] = $_POST['sapv_approve_nr'];
		                    
		                    $params['custom_data']['prefix'] = $_POST['prefix'];
		                    $params['custom_data']['invoice_number'] = $_POST['invoice_number'];
		                    $params['custom_data']['full_invoice_number'] = $_POST['prefix'] . $_POST['invoice_number'];
		                    
		                    $params['custom_data']['client_ik'] = $_POST['client_ik'];
		                    $params['custom_data']['beneficiary_address'] = $_POST['street1'];
		                    $params['custom_data']['street1'] = $_POST['street1'];
		                    $params['custom_data']['patient_pflegestufe'] = $_POST['patient_pflegestufe'];
		                    $params['custom_data']['insurance_no'] = $_POST['insurance_no'];
		                    
		                    
		                    $params['custom_data']['ppun'] = $_POST['ppun'];
		                    $params['custom_data']['debtor_number'] = $_POST['debtor_number'];
		                    $params['custom_data']['paycenter'] = $_POST['paycenter'];
		                    
		                    
		                    $params['custom_data']['address'] = $_POST['address'];
		                    $params['custom_data']['footer'] = $_POST['footer'];
		                    $params['custom_data']['items'] = $invoice_items;
		                    $params['custom_data']['invoice_items'] = $invoice_items;
		                    
		                    //$params['custom_data']['invoice_total'] = '-'.number_format(($invoice_total), '2', ',', '.');
		                    ///$params['custom_data']['grand_total'] = '-'.number_format(($invoice_total), '2', ',', '.');
		                    $params['custom_data']['invoice_total'] = number_format(($invoice_total), '2', ',', '.');
		                    $params['custom_data']['grand_total'] = number_format(($invoice_total), '2', ',', '.');
		                    
		                    $params['custom_data']['invoiced_month'] = "";
		                    $params['custom_data']['debitoren_nummer_oder_pv'] = "";
		                    $params['custom_data']['invoice_date'] = date('d.m.Y');
		                    
		                    
		                    $params['custom_data']['show_box_active'] = '0';
		                    $params['custom_data']['show_box_patient'] = '0';
		                    $params['custom_data']['show_box_sapv'] = '0';
		                    if(isset($_POST['show_box_active'])){
		                        $params['custom_data']['show_box_active'] = '1';
		                    }
		                    if(isset($_POST['show_box_patient'])){
		                        $params['custom_data']['show_box_patient'] = '1';
		                    }
		                    if(isset($_POST['show_box_sapv'])){
		                        $params['custom_data']['show_box_sapv'] = '1';
		                    }
		                    
		                    
		                    if(count($invoice_items) > '0')
		                    {
		                        //ISPC-1236 - new token invoice_items_html_short, without id
		                        $rows = count($invoice_items);
		                        
		                        $grid = new Pms_Grid($invoice_items, 1, $rows, "invoice_items_list_bay_pdf.html");
		                        $grid_short = new Pms_Grid($invoice_items, 1, $rows, "invoice_items_list_nocustom_pdf_short.html");
		                        
		                        $grid->invoice_total = $params['custom_data']['invoice_total'];
		                        $grid->max_entries = $rows;
		                        
		                        $grid_short->invoice_total = $params['custom_data']['invoice_total'];
		                        $grid_short->max_entries = $rows;
		                        
		                        $html_items = $grid->renderGrid();
		                        $html_items_short = $grid_short->renderGrid();
		                    }
		                    else
		                    {
		                        $html_items = "";
		                        $html_items_short = "";
		                    }
		                    
		                    $params['custom_data']['invoice_items_html'] = $html_items;
		                    $params['custom_data']['invoice_items_html_short'] = $html_items_short;
		                    $params['custom_data']['street'] = html_entity_decode($params['patient_days'][$ipid_sel]['details']['street1'], ENT_QUOTES, 'UTF-8');
		                    $params['custom_data']['zip'] = html_entity_decode($params['patient_days'][$ipid_sel]['details']['zip'], ENT_QUOTES, 'UTF-8');
		                    $params['custom_data']['city'] = html_entity_decode($params['patient_days'][$ipid_sel]['details']['city'], ENT_QUOTES, 'UTF-8');
		                    $params['custom_data']['lbg_city'] = $client_details[0]['lbg_city'];
		                    
		                    $params['custom_data']['completed_date'] = date('d.m.Y');
		                    $params['custom_data']['admission_date'] = date('d.m.Y', strtotime($params['patient_days'][$ipid_sel]['details']['admission_date']));
		                    
		                    $tokens = $params['custom_data'];
		                    
		                    $tokens['health_insurance']['insurance_no'] = $_POST['insurance_no'];
		                    $tokens['patient_details'] = $patient_details;
		                    
		                    
		                    //sgbxi template
		                    $tokens['start_sgbv_activity'] = $_POST['start_sapv'];
		                    $tokens['end_sgbv_activity'] = $_POST['end_sapv'];
		                    $tokens['patientdetails'] = $patient_details;
		                    
		                    //rp_invoice_pdf
		                    $tokens['custom_invoice'] = 'custom_invoice';
		                    $tokens['patient_name'] = $_POST['first_name'].', '.$_POST['last_name'];
		                    $tokens['versicherten_nr'] = $_POST['insurance_no'];
		                    $tokens['curent_sapv_from'] = $_POST['start_sapv'];
		                    $tokens['curent_sapv_till'] = $_POST['end_sapv'];
		                    $tokens['invoice_date_from'] = $_POST['start_active'];
		                    $tokens['invoice_date_till'] = $_POST['end_active'];
		                    
		                    $tokens['health_insurance']['insurance_no'] = $_POST['insurance_no'];
		                    $tokens['healthinsurance_versnr'] = $_POST['insurance_no'];
		                    
		                    $tokens['ik_nummer'] = $_POST['client_ik'] ;
		                    
		                    $tokens['patient_details'] = $patient_details;
		                    $tokens['patientdetails'] = $patient_details;
		                    $tokens['user_details'] = $users_details[$invoice_data['userid']];
		                    $tokens['user_address'] = $_POST['address'] ;
		                    $tokens['unique_id'] = $invoice_data['id'];
		                    
		                    $tokens['start_mp_rent'] = $_POST['start_sapv'];
		                    $tokens['end_mp_rent']   = $_POST['end_sapv'];
		                    
		                    $tokens['current_period_start'] = $_POST['start_sapv'];
		                    $tokens['current_period_end']   = $_POST['end_sapv'];
		                    
		                    // bre hospiz invoices
		                    $tokens['invoice_data'] = $_POST;
		                    $tokens['invoice_data']['first_active_day'] = $_POST['start_active'];
		                    $tokens['invoice_data']['last_active_day']   = $_POST['end_active'];
		                    $tokens['invoice_data']['current_period_start'] = $_POST['start_sapv'];
		                    $tokens['invoice_data']['current_period_end']   = $_POST['end_sapv'];
		                    $tokens['invoice_data']['items']   = $invoice_items;
		                    
		                    //sgbxi template
		                    $tokens['start_sgbv_activity'] = $_POST['start_sapv'];
		                    $tokens['end_sgbv_activity'] = $_POST['end_sapv'];
		                    
		                    //internalinvoice
		                    $tokens['invoice'] = $_POST;
		                    
		                    //rp_invoice_pdf
		                    $tokens['custom_invoice'] = 'custom_invoice';
		                    $tokens['patient_name'] = $_POST['first_name'].', '.$_POST['last_name'];
		                    $tokens['versicherten_nr'] = $_POST['insurance_no'];
		                    $tokens['invoice_date_from'] = $_POST['start_active'];
		                    $tokens['invoice_date_till'] = $_POST['end_active'];
		                    
		                    $tokens['last_name'] = $_POST['last_name'];
		                    $tokens['invoiced_period'] = $_POST['start_active'].'-'.$_POST['end_active'];
		                    $tokens['debitor_number'] = $_POST['debtor_number'];
		                    
		                    //client data
		                    $tokens['client'] = $client_details[0];
		                    $tokens['client_details'] = $client_details[0];
		                    
		                    //ISPC-2747 Lore 11.12.2020 - tokens de umplut pt template-urile de pe live
		                    //get client user details
		                    $user = new User();
		                    $client_users_arr = $user->getUserByClientid($clientid, '0', true);
		                    
		                    foreach($client_users_arr as $k_client_user => $v_client_user)
		                    {
		                        $client_users[$v_client_user['id']] = $v_client_user;
		                    }
		                    
		                    $user_details = $client_users[$invoice_data['user']];
		                    $user_details_str = '';
		                    
		                    if(strlen($user_details['user_title']) > '0'){
		                        $user_details_str .= $user_details['user_title'] . ' ';
		                    }
		                    if(strlen($user_details['first_name']) > '0'){
		                        $user_details_str .= $user_details['first_name'] . ' ';
		                    }
		                    if(strlen($user_details['last_name']) > '0'){
		                        $user_details_str .= $user_details['last_name'];
		                    }
		                    if(strlen($user_details['street1']) > '0'){
		                        $user_details_str .= "<br />".$user_details['street1'];
		                    }
		                    if(strlen($user_details['zip']) > '0'){
		                        $user_details_str .= "<br />".$user_details['zip'] . " ";
		                    }
		                    if(strlen($user_details['city']) > '0')	{
		                        $user_details_str .= "<br />".$user_details['city'];
		                    }
		                    
		                    $tokens['invoice']['benutzer_adresse'] = $user_details_str;
		                    $tokens['invoice']['user_nachname'] = $user_details['last_name'];
		                    $tokens['invoice']['user_vorname'] = $user_details['first_name'];
		                    $tokens['invoice']['invoice_date'] = date('d.m.Y');
		                    $tokens['invoice']['invoice_number'] = $_POST['invoice_number'];
		                    $tokens['invoice']['straße_mandant'] = (strlen($client_details[0]['street1']) > '0' ? html_entity_decode($client_details[0]['street1'], ENT_QUOTES, 'utf-8') : '');
		                    
		                    $tokens['invoice']['internal_invoice_items_html'] = $html_items;
		                    $tokens['invoice']['birthd'] = $_POST['birthd'];
		                    $tokens['invoice']['last_name'] = $_POST['last_name'];
		                    $tokens['invoice']['patienten_id'] = strtoupper($_POST['epid']);
		                    $tokens['invoice']['user_debitor_number'] = $user_details['debitor_number'];
		                    $tokens['benutzer_vorname'] = $user_details['first_name'];
		                    $tokens['benutzer_nachname'] = $user_details['last_name'];
		                    $tokens['steuernummer'] = $user_details['control_number'];
		                    //
		                    // ISPC-2747 Lore 16.12.2020  --- internal_invoice -- create the format for items that is used in templete
		                    if($_REQUEST['inv_typ'] == 'internal_invoice'){
		                        foreach($invoice_items as $ky=>$vl){
		                            $tokens['invoice_items']['code'][$ky] = $vl['shortcut'];
		                            $tokens['invoice_items']['name'][$ky] = $vl['name'];
		                            $tokens['invoice_items']['qty'][$ky]  = $vl['qty'];
		                            $tokens['invoice_items']['price'][$ky] = $vl['price'];
		                            $tokens['invoice_items']['total'][$ky] = $vl['total'];
		                            $tokens['invoice_items']['dates'][$ky][$ky] = date('d.m.Y', strtotime($_POST['start_active']));
		                            $tokens['invoice_items']['total_sorted'][$ky] = $tokens['invoice_items']['total'][$ky];
		                        }
		                    }
		                    
		                    
		                    
		                    //letter footer text
		                    $boxes = new LettersTextBoxes();
		                    $letter_boxes_details = $boxes->client_letter_boxes($clientid);
		                    
		                    // for healthinsuranceinvoices template
		                    $replacement_arr = array();
		                    $replacement_arr['%first_name'] = $patient_days[$ipid_sel]['details']['first_name'];
		                    $replacement_arr['%last_name'] = $patient_days[$ipid_sel]['details']['last_name'];
		                    $replacement_arr['%admission_date'] = date('d.m.Y', strtotime($patient_days[$ipid_sel]['details']['admission_date']));
		                    $replacement_arr['%client_name'] = $client_details[0]['client_name'];
		                    $replacement_arr['%invoice_start'] = date('d.m.Y', strtotime($_POST['start_active']));
		                    $replacement_arr['%invoice_end'] = date('d.m.Y', strtotime($_POST['end_active']));
		                    
		                    //no money no honey => default gofer
		                    if(strlen($_POST['header']) == 0)
		                    {
		                        $header_default = '<b><u>Liquidation</u></b>
									<br />
									<br />
									O.g. <b>%first_name %last_name</b> erhält seit dem <b>%admission_date</b> SAPV-Leistungen.
									<br />
									<p>
										Wir erlauben uns, gemäß § 132 d Abs. 1 SGB V über die spezialisierte ambulante Palliativversorgung
										(SAPV) nach § 37 b SGB V und dem entsprechenden Vertrag zwischen dem
										Landeskrankenkassenverband und der %client_name für die Zeit vom %invoice_start
										bis zum  %invoice_end folgende Kosten in Rechnung zu stellen:
									</p>';
		                        
		                        
		                        $tokens['header'] = Pms_CommonData::str_replace_assoc($replacement_arr, $header_default);
		                    }
		                    
		                    if(strlen($_POST['footer']) == 0)
		                    {
		                        //ISPC:2035:: Please change the invoce Text for NIE_Diepholz
		                        if(!empty($letter_boxes_details)){
		                            $footer_default = $letter_boxes_details[0]['nd_invoice_footer'];
		                        } else {
		                            $footer_default = 'Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
										<br />
										<br />
										Mit freundlichen Grüßen';
		                            
		                        }
		                        $tokens['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);
		                    }
		                    
		                    
		                    
		                    
		                    //load template data
		                    //$template_data = InvoiceTemplates::get_template($this->clientid, false, '1', $invoice_type );
		                    $res = Doctrine_Query::create()
		                    ->select('*')
		                    ->from('InvoiceTemplates')
		                    ->where('isdeleted = "0"')
		                    ->andWhere('clientid="' . $this->clientid . '"')
		                    ->andWhere('invoice_type LIKE "' . $invoice_type . '"')
		                    ->limit('1')
		                    ->orderBy("id DESC");
		                    $template_data = $res->fetchArray();
		                    
		                    
		                    $batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $this->clientid);
		                    $Batch_name = $params['custom_data']['prefix'].$params['custom_data']['invoice_number'];
		                    
		                    if(empty($pdf_name)){
		                        $pdf_name = "Rechnung-" . $tokens['prefix'] . $tokens['invoice_number'];
		                    }
		                    
		                    if($template_data)
		                    {
		                        if($_REQUEST['inv_typ'] == "internal_invoice"){
		                            $template_file_path = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
		                            $pdf_name = $tokens['prefix'] . $tokens['invoice_number'];
		                            
		                            $this->_editinvoice_generate_pdf_and_download_copy_internalcontroller($template_file_path, $tokens, $pdf_name);
		                            
		                        } else {
		                            
		                            $temp_files[] = $this->generate_file($template_data[0], $tokens, 'docx', $batch_temp_folder, 'generate');
		                            
		                        }
		                        
		                        
		                    } else {
		                        
		                        //return;
		                        
		                        if(empty($template) && empty($pdf_name)) {
		                            return;
		                        } else {
		                            $this->generate_pdf( $tokens, $pdf_name, $template, "P");
		                        }
		                        
		                    }
		                    
		                    if(count($temp_files) > '0')
		                    {
		                        //final cleanup (check if files are on disk)
		                        foreach($temp_files as $k_temp => $v_file)
		                        {
		                            if(!is_file($v_file))
		                            {
		                                //remove unexisting files
		                                //							$unsetted_files[] = $v_file; //for debugs
		                                unset($temp_files[$v_file]);
		                            }
		                        }
		                        
		                        $remaining_temp_files = array_values(array_unique($temp_files));
		                        
		                        if(count($remaining_temp_files) > '0')
		                        {
		                            //ISPC-2472 Ancuta 12.11.2019
		                            $final_file = $this->generate_file($template_data[0], false, "pdf", $batch_temp_folder, 'merge', $temp_files,$Batch_name);
		                        }
		                    }
		                    if ( ! isset($params['print_job']) && $params['print_job'] == '1' ){
		                        
		                    } else {
		                        exit;
		                    }
		                    
		                }
		            }
		        }
		        
		    }
		    
		    //ISPC-2747 Lore 27.11.2020
		    public function editcustominvoicealltypesAction()
		    {
		        $ppun = new PpunIpid();
		        $modules = new Modules();
		        $paycenters = new Paycenters();
		        
		        $clientid = $this->clientid;
		        $client_details = Pms_CommonData::getClientData($clientid);
		        
		        
		        $system_invoice_details = Pms_CommonData::clients_invoices_details();
		        if(empty($system_invoice_details[$_REQUEST['inv_typ']])){
		            $this->_redirect(APP_BASE . "error/previlege");
		            exit;
		        }
		        
		        $page_to_return = $system_invoice_details[$_REQUEST['inv_typ']]['page_invoices_listed'];
		              
		        
		        if($_REQUEST['invoiceid'])
		        {
		            //check modules only if invoiceid is provided
		            if($modules->checkModulePrivileges("88", $this->clientid))
		            {
		                $ppun_module = "1";
		            }
		            else
		            {
		                $ppun_module = "0";
		            }
		            
		            if($modules->checkModulePrivileges("90", $this->clientid))
		            {
		                $debtor_number_module = "1";
		            }
		            else
		            {
		                $debtor_number_module = "0";
		            }
		            
		            if($modules->checkModulePrivileges("91", $this->clientid))
		            {
		                $paycenter_module = "1";
		            }
		            else
		            {
		                $paycenter_module = "0";
		            }
		            
		            $this->view->ppun_module = $ppun_module;
		            $this->view->debtor_number_module = $debtor_number_module;
		            $this->view->paycenter_module = $paycenter_module;
		            
		            //dd($_REQUEST['inv_typ']);
		            //here get the invoice details
		            $invoice_id = $_REQUEST['invoiceid'];
		            
		            if($_REQUEST['inv_typ'] == "nie_patient_invoice" || $_REQUEST['invoice_type'] == 'nie_patient_invoice'){
		                $model_invoice = new HiInvoices();
		                $invoice_form = new Application_Form_HiInvoices();
		                $invoice_data = $model_invoice->getHiInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "bayern_invoice" || $_REQUEST['invoice_type'] == 'bayern_invoice'){
		                $model_invoice = new BayernInvoices();
		                $invoice_form = new Application_Form_BayernInvoices();
		                $invoice_data = $model_invoice->getBayernInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "bw_sapv_invoice" || $_REQUEST['invoice_type'] == 'bw_sapv_invoice'){
		                $model_invoice = new BwInvoices();
		                $invoice_form = new Application_Form_BwInvoices();
		                $invoice_data = $model_invoice->getBwInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "bw_sgbv_invoice" || $_REQUEST['invoice_type'] == 'bw_sgbv_invoice'){
		                $model_invoice = new SgbvInvoices();
		                $invoice_form = new Application_Form_SgbvInvoices();
		                $invoice_data = $model_invoice->getSgbvInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "bw_sgbxi_invoice" || $_REQUEST['invoice_type'] == 'bw_sgbxi_invoice'){
		                $model_invoice = new SgbxiInvoices();
		                $invoice_form = new Application_Form_SgbxiInvoices();
		                $invoice_data = $model_invoice->getSgbxiInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "bw_mp_invoice" || $_REQUEST['invoice_type'] == 'bw_mp_invoice'){
		                $model_invoice = new MedipumpsInvoices();
		                $invoice_form = new Application_Form_MedipumpsInvoices();
		                $invoice_data = $model_invoice->getMedipumpsInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "bre_sapv_invoice" || $_REQUEST['invoice_type'] == 'bre_sapv_invoice'){
		                $model_invoice = new BreInvoices();
		                $invoice_form = new Application_Form_BreInvoices();
		                $invoice_data = $model_invoice->getBreInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "bre_hospiz_sapv_invoice" || $_REQUEST['invoice_type'] == 'bre_hospiz_sapv_invoice'){
		                $model_invoice = new BreHospizInvoices();
		                $invoice_form = new Application_Form_BreHospizInvoices();
		                $invoice_data = $model_invoice->getBreInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "he_invoice" || $_REQUEST['invoice_type'] == 'he_invoice'){
		                $model_invoice = new HeInvoices();
		                $invoice_form = new Application_Form_HeInvoices();
		                $invoice_data = $model_invoice->getHeInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "rpinvoice" || $_REQUEST['invoice_type'] == 'rpinvoice'){
		                $model_invoice = new RpInvoices();
		                $invoice_form = new Application_Form_RpInvoices();
		                $invoice_data = $model_invoice->getRpInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "sh_invoice" || $_REQUEST['invoice_type'] == 'sh_invoice'){
		                $model_invoice = new ShInvoices();
		                $invoice_form = new Application_Form_ShInvoices();
		                $invoice_data = $model_invoice->getShInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "sh_internal_invoice" || $_REQUEST['invoice_type'] == 'sh_internal_invoice'){
		                $model_invoice = new ShInternalInvoices();
		                $invoice_form = new Application_Form_ShInternalInvoices();
		                $invoice_data = $model_invoice->getShInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "bra_invoice" || $_REQUEST['invoice_type'] == 'bra_invoice'){
		                $model_invoice = new BraInvoices();
		                $invoice_form = new Application_Form_BraInvoices();
		                $invoice_data = $model_invoice->getBraInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "sh_shifts_internal_invoice" || $_REQUEST['invoice_type'] == 'sh_shifts_internal_invoice'){
		                $model_invoice = new ShShiftsInternalInvoices();
		                $invoice_form = new Application_Form_ShShiftsInternalInvoices();
		                $invoice_data = $model_invoice->getShInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "nie_user_invoice" || $_REQUEST['invoice_type'] == 'nie_user_invoice'){
		                $model_invoice = new UserInvoices();
		                $invoice_form = new Application_Form_UsersInvoices();
		                $invoice_data = $model_invoice->getUserInvoiceandItems($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == "internal_invoice" || $_REQUEST['invoice_type'] == 'internal_invoice'){
		                $model_invoice = new InternalInvoices();
		                $invoice_form = new Application_Form_InternalInvoices();
		                $invoice_data = $model_invoice->getInternalInvoice($invoice_id);
		            }
		            //allowed_invoice
		            if($_REQUEST['inv_typ'] == 'bw_sapv_invoice_new'){
		                $model_invoice = new BwInvoicesNew();
		                $invoice_form = new Application_Form_BwInvoicesNew();
		                $invoice_data = $model_invoice->getBwInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == 'bw_medipumps_invoice'){
		                $model_invoice = new MedipumpsInvoicesNew();
		                $invoice_form = new Application_Form_MedipumpsInvoicesNew();
		                $invoice_data = $model_invoice->getMedipumpsInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == 'sh_invoice'){
		                $model_invoice = new ShInvoices();
		                $invoice_form = new Application_Form_ShInvoices();
		                $invoice_data = $model_invoice->getShInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == 'hospiz_invoice'){
		                $model_invoice = new HospizInvoices();
		                $invoice_form = new Application_Form_HospizInvoices();
		                $invoice_data = $model_invoice->getHospizInvoice($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == 'rlp_invoice'){
		                $model_invoice = new RlpInvoices();
		                $invoice_form = new Application_Form_RlpInvoices();
		                $invoice_data = $model_invoice->getRlpInvoices($invoice_id);
		            }
		            if($_REQUEST['inv_typ'] == 'bre_kinder_invoice'){
		                $model_invoice = new InvoiceSystem();
		                $invoice_form = new Application_Form_InvoiceSystem();
		                $invoice_data = $model_invoice->getInvoices('bre_kinder_invoice',$invoice_id);
		                $post['invoice_type'] = 'bre_kinder_invoice';
		            }
		            if($_REQUEST['inv_typ'] == 'nr_invoice'){
		                $model_invoice = new InvoiceSystem();
		                $invoice_form = new Application_Form_InvoiceSystem();
		                $invoice_data = $model_invoice->getInvoices('nr_invoice',$invoice_id);
		                $post['invoice_type'] = 'nr_invoice';
		            }
		            if($_REQUEST['inv_typ'] == 'demstepcare_invoice'){
		                $model_invoice = new InvoiceSystem();
		                $invoice_form = new Application_Form_InvoiceSystem();
		                $invoice_data = $model_invoice->getInvoices('demstepcare_invoice',$invoice_id);
		                $post['invoice_type'] = 'demstepcare_invoice';
		            }

		            
		            
		            //get invoice patient details
		            $conditions['client'] = $this->clientid;
		            $conditions['ipids'] = array($invoice_data['ipid']);
		            $conditions['periods'][0]['start'] = '2009-01-01';
		            $conditions['periods'][0]['end'] = date('Y-m-d');
		            
		            $sql = 'e.epid, p.ipid, e.ipid,';
		            $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		            $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		            $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		            $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		            $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		            $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		            
		            //beware of date d.m.Y format here
		            $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		            $ipid = $invoice_data['ipid'];
		            $patientmaster = new PatientMaster();
		            $patient_details = $patientmaster->getMasterData(Pms_CommonData::getIdfromIpid($invoice_data['ipid']), '0');
		            
		            $phealthinsurance = new PatientHealthInsurance();
		            $patient_health = $phealthinsurance->getPatientHealthInsurance($invoice_data['ipid']);

		            
		            $user_det = new User();
		            $users_details = $user_det->getUsersDetails($invoice_data['userid']);
		            

		            $invoice_data['epid'] = $patient_days[$ipid]['details']['epid'];
		            $invoice_data['birthd'] = date('d.m.Y', strtotime($invoice_data['birthdate']));
		            $invoice_data['start_active'] = date('d.m.Y', strtotime($invoice_data['invoice_start']));
		            $invoice_data['end_active'] = date('d.m.Y', strtotime($invoice_data['invoice_end']));
		            $invoice_data['patient_pflegestufe'] = $invoice_data['patient_care'];

		            if(isset($invoice_data['healthinsurance_ver']) ){
		                $invoice_data['insurance_no'] = $invoice_data['healthinsurance_ver'];
		            }
		            
		            $invoice_data['client_ik'] = $invoice_data['client_ik'];
		            if(isset($invoice_data['ikuser'])){
		                $invoice_data['client_ik'] = $invoice_data['ikuser'];
		            }
		            if(isset($invoice_data['client_name'])){
		                $invoice_data['client_ik'] = $invoice_data['client_name'];
		            }
		            if(isset($invoice_data['user_address'])){
		                $invoice_data['address'] = $invoice_data['user_address'];
		            }
		            if(isset($invoice_data['start_sgbv']) && isset($invoice_data['end_sgbv'])){
		                $invoice_data['start_sapv'] = date('d.m.Y', strtotime($invoice_data['start_sgbv']));
		                $invoice_data['end_sapv'] = date('d.m.Y', strtotime($invoice_data['end_sgbv']));
		            }
		            if(isset($invoice_data['start_sgbxi']) && isset($invoice_data['end_sgbxi'])){
		                $invoice_data['start_sapv'] = date('d.m.Y', strtotime($invoice_data['start_sgbxi']));
		                $invoice_data['end_sapv'] = date('d.m.Y', strtotime($invoice_data['end_sgbxi']));
		            }
		            if(isset($invoice_data['sapv_start']) && isset($invoice_data['sapv_end'])){
		                $invoice_data['start_sapv'] = date('d.m.Y', strtotime($invoice_data['sapv_start']));
		                $invoice_data['end_sapv'] = date('d.m.Y', strtotime($invoice_data['sapv_end']));
		            }
		            if(isset($invoice_data['start_mp_rent']) && isset($invoice_data['end_mp_rent'])){
		                $invoice_data['start_sapv'] = date('d.m.Y', strtotime($invoice_data['start_mp_rent']));
		                $invoice_data['end_sapv'] = date('d.m.Y', strtotime($invoice_data['end_mp_rent']));
		            }
		            if(isset($invoice_data['versicherten_nr'])){
		                $invoice_data['insurance_no'] = $invoice_data['versicherten_nr'];
		            }
		            if(isset($invoice_data['geb'])){
		                $invoice_data['birthd'] = date('d.m.Y', strtotime($invoice_data['geb']));
		            }
		            
		            //dd($invoice_data['items']);
		            if(!$this->getRequest()->isPost())
		            {
		                $invoice_items = array_values($invoice_data['items']);
		            }
		            
		            //rlp_invoice invoices
		            if($_REQUEST['inv_typ'] == 'rlp_invoice'){
		                $invoice_items_rlp = array();
		                foreach($invoice_items as $key => $vals){
		                    $invoice_items_rlp[$key] = $vals[0];
		                }
		                $invoice_items = $invoice_items_rlp;
		            }

		            
		            foreach($invoice_items as $key => $vals){
		                if(isset($vals['description']) && !isset($vals['name'])){
		                    $invoice_items[$key]['name'] = $vals['description'];
		                }
		                if(!isset($vals['description']) && !isset($vals['name'])){
		                    $invoice_items[$key]['name'] = $vals['shortcut'];
		                }
		                if(!isset($vals['total']) || $vals['total'] == '0.00'){
		                    $invoice_items[$key]['total'] = $invoice_items[$key]['qty']*$invoice_items[$key]['price'];
		                }
		                if(isset($vals['total_custom']) ){
		                    $invoice_items[$key]['total'] = $invoice_items[$key]['qty']*$invoice_items[$key]['price'];
		                }
		            }
          
		            if(strpos($invoice_data['show_boxes'], 'show_box_active') === false ){
		                $invoice_data['show_box_active'] = '0';
		            }else {
		                $invoice_data['show_box_active'] = '1';
		            }
		            if(strpos($invoice_data['show_boxes'], 'show_box_patient') === false ){
		                $invoice_data['show_box_patient'] = '0';
		            }else {
		                $invoice_data['show_box_patient'] = '1';
		            }
		            if(strpos($invoice_data['show_boxes'], 'show_box_sapv') === false ){
		                $invoice_data['show_box_sapv'] = '0';
		            }else {
		                $invoice_data['show_box_sapv'] = '1';
		            }
		            
		            $this->view->invoice_data = $invoice_data;
		            $this->view->invoice_items = $invoice_items;
		            //dd($invoice_data,$invoice_items);
		            
		            if($this->getRequest()->isPost())
		            {
		                $status = '0';
		                if(!empty($_POST['completed']))
		                {
		                    $status = '2'; //unpaid
		                }
		                else if(!empty($_REQUEST['edit_invoice']))
		                {
		                    $status = '1'; //draft
		                }
		                else if($_POST['deletemore'] == "1")
		                {
		                    $status = '4'; //deleted
		                }
		                else if(!empty($_REQUEST['pdf']))
		                {
		                    $status = '0'; //no change
		                }
		                else if(!empty($_REQUEST['users_invoice']))
		                {
		                    $status = '0'; //no change
		                }
		                
		                if(!empty($_POST['paid']))
		                {
		                    //mark as paid
		                    $invoice_pay_data['invoiceId'] = $_REQUEST['invoiceid'];
		                    $invoice_pay_data['paymentAmount'] = '0.00';
		                    $invoice_pay_data['paymentComment'] = "";
		                    $invoice_pay_data['paymentDate'] = date('Y-m-d H:i:s', time());
		                    $invoice_pay_data['mark_as_paid'] = "1";
		                    
		                    $new_payment = $bayern_invoices_form->submit_payment($invoice_pay_data);
		                    
		                    if($_REQUEST['redirect2new'] == '1'){
		                        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type='.$_REQUEST['invoice_type'] );
		                        exit();
		                    } else {
		                        $this->redirect(APP_BASE . $page_to_return);
		                    }
		                    exit;
		                }
		                
		                if(!empty($_POST['pdf']))
		                {
		                    $ipid = $invoice_data['ipid'];
		                    
		                    $invoice_type = $_REQUEST['inv_typ'];
		                    $clientid = $this->clientid;
		                    
		                    $extra_details_invoice = array(
		                        "nie_patient_invoice" => array(
		                            "template"      => "health_insurance_invoice.html",
		                            "pdf_name"      => "HiInvoice",
		                        ),
		                        "bayern_invoice" => array(
		                            "template"      => "invoice_bayern_pdf.html",
		                            "pdf_name"      => "BayernPdf",
		                        ),
		                        "bw_sapv_invoice" => array(
		                            "template"      => "invoice_sapv_pdf.html",
		                            "pdf_name"      => "PerformancePdf_invoice_items",
		                        ),
		                        "bw_sgbv_invoice" => array(
		                            "template"      => array('invoice_sgbv_pdf.html', 'socialcodepdf.html'),
		                            "pdf_name"      => "SocialcodePdfs",
		                        ),
		                        "bw_sgbxi_invoice" => array(
		                            "template"      => "invoice_sgbxi_pdf.html",
		                            "pdf_name"      => "SGB_XI",
		                        ),
		                        "bw_mp_invoice" => array(
		                            "template"      => "invoice_medipumps_hi.html",
		                            "pdf_name"      => "MedipumpsControlPdfs",
		                        ),
		                        "bre_sapv_invoice" => array(
		                            "template"      => "invoice_bre_sapv_pdf.html",
		                            "pdf_name"      => "bresapvperformance",
		                        ),
		                        "bre_hospiz_sapv_invoice" => array(
		                            "template"      => "invoice_bre_hospiz_sapv_pdf.html",
		                            "pdf_name"      => "BreHospizSapvPerformanceInvoice",
		                        ),
		                        "he_invoice" => array(
		                            "template"      => "invoice_he_pdf.html",
		                            "pdf_name"      => "HeInvoice",
		                        ),
		                        "rpinvoice" => array(
		                            "template"      => "rpinvoice_pdf.html",
		                            "pdf_name"      => "RP_invoice",
		                        ),
		                        "nie_user_invoice" => array(
		                            "template"      => "health_insurance_user_invoice.html",
		                            "pdf_name"      => "",
		                        ),
		                        "internal_invoice" => array(
		                            "template"      => "internal_invoice_pdf.html",
		                            "pdf_name"      => "InternalInvoice",
		                        ),
		                        
		                    );
		                    
		                    $template = $extra_details_invoice[$_REQUEST['inv_typ']]['template'];
		                    $pdf_name = $extra_details_invoice[$_REQUEST['inv_typ']]['pdf_name'];
		                    
		                    $invoice_total = 0;
		                    
		                    foreach($_POST['row'] as $k_post => $v_post)
		                    {
		                        $invoice_items[] = array(
		                            'shortcut' => $_POST['shortcut'][$k_post],
		                            'name' => $_POST['name'][$k_post],
		                            'qty' => $_POST['qty'][$k_post],
		                            'price' => $_POST['price'][$k_post],
		                            'custom' => $_POST['custom'][$k_post],
		                            'total' => $_POST['total'][$k_post],
		                            'shortcut_total' => $_POST['total'][$k_post],
		                        );
		                        $invoice_total = $invoice_total + $_POST['total'][$k_post];
		                    }
		                    
		                    //for sgbxiinvoices
		                    if($_REQUEST['inv_typ'] == "bw_sgbxi_invoice"){
		                        $invoice_items_sgbxi = array();
		                        $invoice_items_sgbxi['shortcuts'] = $invoice_items;
		                        $invoice_items = $invoice_items_sgbxi;
		                        $invoice_items['grand_total'] = $invoice_total;
		                    }
		                    
		                    //for sgbvinvoices
		                    if($_REQUEST['inv_typ'] == "bw_sgbv_invoice"){
		                        $invoice_items_sgbv = array();
		                        foreach($invoice_items as $key => $vals){
		                            $invoice_items_sgbv['group'][$key+1]['shortcut'] = $vals['shortcut'];
		                            $invoice_items_sgbv['group'][$key+1]['name']     = $vals['name'];
		                            $invoice_items_sgbv['group'][$key+1]['price']    = $vals['price'];
		                            $invoice_items_sgbv['group'][$key+1]['qty']      = $vals['qty'];
		                            $invoice_items_sgbv['group'][$key+1]['shortcut_total'] = $vals['total'];
		                            $invoice_items_sgbv['group'][$key+1]['custom']     = $vals['custom'];
		                        }
		                        $invoice_items = $invoice_items_sgbv;
		                        $invoice_items['grand_total'] = $invoice_total;
		                    }
		                    
		                    //for medipumps
		                    if ($_REQUEST['inv_typ'] == "bw_mp_invoice") {
		                        $invoice_items_medi = array();
		                        foreach($invoice_items as $key => $vals){
		                            $invoice_items_medi[$invoice_data['id']][$key] = $vals;
		                            $invoice_items_medi[$invoice_data['id']][$key]['priceset'] = 'f';
		                        }
		                        $invoice_items_medi['grand_total'] = $invoice_total;
		                        $invoice_items_medi['percentless_amount'] = $invoice_total;
		                        
		                        $invoice_items = $invoice_items_medi;
		                    }
                        
		                    //for rpinvoice
		                    if($_REQUEST['inv_typ'] == "rpinvoice"){
		                        $invoice_items['shortcuts']   = $invoice_items;
		                        $invoice_items['grand_total'] = $invoice_total;
		                    }
		                    
		                    
		                    $this->view->invoice_items = $invoice_items;
		                    
		                    $params = array();
		                    $params['ipids'] = array($ipid);
		                    
		                    //patient days
		                    $conditions = array();
		                    $conditions['client'] = $this->clientid;
		                    $conditions['ipids'] = array($ipid);
		                    $conditions['periods'][0]['start'] = '2009-01-01';
		                    $conditions['periods'][0]['end'] = date('Y-m-d');
		                    
		                    $sql = 'e.epid, p.ipid, e.ipid,';
		                    $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		                    $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		                    $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		                    $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		                    $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		                    $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		                    
		                    //be aware of date d.m.Y format here
		                    $patient_days = Pms_CommonData::patients_days($conditions, $sql);
		                    
		                    $params['invoices'] = array($invoice_data['id']);
		                    $params['patient_days'] = $patient_days;
		                    $params['get_pdf'] = '1';
		                    $params['only_pdf'] = 1;
		                    
		                    $params['custom_data']['address'] = $_POST['address'];
		                    $params['custom_data']['birthd'] = $_POST['birthd'];
		                    $params['custom_data']['geb'] = $_POST['birthd'];
		                    $params['custom_data']['birthdate'] = $_POST['birthdate'];
		                    
		                    $params['custom_data']['first_name'] = $_POST['first_name'];
		                    $params['custom_data']['last_name'] = $_POST['last_name'];
		                    
		                    $params['custom_data']['invoice_start'] = $_POST['start_active'];
		                    $params['custom_data']['invoice_end'] = $_POST['end_active'];
		                    
		                    $params['custom_data']['first_active_day'] = $_POST['start_active'];
		                    $params['custom_data']['last_active_day'] = $_POST['end_active'];
		                    
		                    $params['custom_data']['start_active'] = $_POST['start_active'];
		                    $params['custom_data']['end_active'] = $_POST['end_active'];
		                    
		                    $params['custom_data']['start_sapv'] = $_POST['start_sapv'];
		                    $params['custom_data']['end_sapv'] = $_POST['end_sapv'];
		                    
		                    $params['custom_data']['first_sapv_day'] = $_POST['start_sapv'];
		                    $params['custom_data']['last_sapv_day'] = $_POST['end_sapv'];
		                    
		                    $params['custom_data']['sapv_approve_date'] = $_POST['sapv_approve_date'];
		                    $params['custom_data']['sapv_approve_nr'] = $_POST['sapv_approve_nr'];
		                    
		                    $params['custom_data']['prefix'] = $_POST['prefix'];
		                    $params['custom_data']['invoice_number'] = $_POST['invoice_number'];
		                    $params['custom_data']['full_invoice_number'] = $_POST['prefix'] . $_POST['invoice_number'];
		                    
		                    $params['custom_data']['client_ik'] = $_POST['client_ik'];
		                    $params['custom_data']['beneficiary_address'] = $_POST['street1'];
		                    $params['custom_data']['street1'] = $_POST['street'];
		                    $params['custom_data']['patient_pflegestufe'] = $_POST['patient_pflegestufe'];
		                    $params['custom_data']['insurance_no'] = $_POST['insurance_no'];
		                    
		                    
		                    $params['custom_data']['ppun'] = $_POST['ppun'];
		                    $params['custom_data']['debtor_number'] = $_POST['debtor_number'];
		                    $params['custom_data']['paycenter'] = $_POST['paycenter'];
		                    
		                    
		                    $params['custom_data']['address'] = $_POST['address'];
		                    $params['custom_data']['footer'] = $_POST['footer'];
		                    $params['custom_data']['items'] = $invoice_items;
		                    $params['custom_data']['invoice_items'] = $invoice_items;
		                    
		                    
		                    //$params['custom_data']['invoice_total'] = '-'.number_format(($invoice_total), '2', ',', '.');
		                    //$params['custom_data']['grand_total'] = '-'.number_format(($invoice_total), '2', ',', '.');
		                    $params['custom_data']['invoice_total'] = number_format(($invoice_total), '2', ',', '.');
		                    $params['custom_data']['grand_total'] = number_format(($invoice_total), '2', ',', '.');
		                    
		                    $params['custom_data']['invoiced_month'] = "";
		                    $params['custom_data']['debitoren_nummer_oder_pv'] = "";
		                    $params['custom_data']['invoice_date'] = date('d.m.Y');
		                    
		                    
		                    $params['custom_data']['show_box_active'] = '0';
		                    $params['custom_data']['show_box_patient'] = '0';
		                    $params['custom_data']['show_box_sapv'] = '0';
		                    if(isset($_POST['show_box_active'])){
		                        $params['custom_data']['show_box_active'] = '1';
		                    }
		                    if(isset($_POST['show_box_patient'])){
		                        $params['custom_data']['show_box_patient'] = '1';
		                    }
		                    if(isset($_POST['show_box_sapv'])){
		                        $params['custom_data']['show_box_sapv'] = '1';
		                    }
		                    
		                    
		                    if(count($invoice_items) > '0')
		                    {
		                        //ISPC-1236 - new token invoice_items_html_short, without id
		                        $rows = count($invoice_items);
		                        
		                        $grid = new Pms_Grid($invoice_items, 1, $rows, "invoice_items_list_bay_pdf.html");
		                        $grid_short = new Pms_Grid($invoice_items, 1, $rows, "invoice_items_list_nocustom_pdf_short.html");
		                        
		                        $grid->invoice_total = $params['custom_data']['invoice_total'];
		                        $grid->max_entries = $rows;
		                        
		                        $grid_short->invoice_total = $params['custom_data']['invoice_total'];
		                        $grid_short->max_entries = $rows;
		                        
		                        $html_items = $grid->renderGrid();
		                        $html_items_short = $grid_short->renderGrid();
		                    }
		                    else
		                    {
		                        $html_items = "";
		                        $html_items_short = "";
		                    }
		                    
		                    $params['custom_data']['invoice_items_html'] = $html_items;
		                    $params['custom_data']['invoice_items_html_short'] = $html_items_short;
		                    $params['custom_data']['street'] = html_entity_decode($params['patient_days'][$ipid]['details']['street1'], ENT_QUOTES, 'UTF-8');
		                    $params['custom_data']['zip'] = html_entity_decode($params['patient_days'][$ipid]['details']['zip'], ENT_QUOTES, 'UTF-8');
		                    $params['custom_data']['city'] = html_entity_decode($params['patient_days'][$ipid]['details']['city'], ENT_QUOTES, 'UTF-8');
		                    $params['custom_data']['lbg_city'] = $client_details[0]['lbg_city'];
		                    
		                    $params['custom_data']['completed_date'] = date('d.m.Y');
		                    $params['custom_data']['admission_date'] = date('d.m.Y', strtotime($params['patient_days'][$ipid]['details']['admission_date']));
		                    
		                    $tokens = $params['custom_data'];
		                    
		                    $tokens['health_insurance']['insurance_no'] = $_POST['insurance_no'];
		                    $tokens['healthinsurance_versnr'] = $_POST['insurance_no'];
		                    
		                    $tokens['ik_nummer'] = $_POST['client_ik'] ;
		                    
		                    $tokens['patient_details'] = $patient_details;
		                    $tokens['patientdetails'] = $patient_details;
		                    $tokens['user_details'] = $users_details[$invoice_data['userid']];
		                    $tokens['user_address'] = $_POST['address'] ;
		                    $tokens['unique_id'] = $invoice_data['id'];
		                    
		                    $tokens['start_mp_rent'] = $_POST['start_sapv'];
		                    $tokens['end_mp_rent']   = $_POST['end_sapv'];
		                    
		                    $tokens['current_period_start'] = $_POST['start_sapv'];
		                    $tokens['current_period_end']   = $_POST['end_sapv'];
		                    
                            // bre hospiz invoices
		                    $tokens['invoice_data'] = $_POST;
		                    $tokens['invoice_data']['first_active_day'] = $_POST['start_active'];
		                    $tokens['invoice_data']['last_active_day']   = $_POST['end_active'];
		                    $tokens['invoice_data']['current_period_start'] = $_POST['start_sapv'];
		                    $tokens['invoice_data']['current_period_end']   = $_POST['end_sapv'];
		                    $tokens['invoice_data']['items']   = $invoice_items;
		                    
		                    //sgbxi template
		                    $tokens['start_sgbv_activity'] = $_POST['start_sapv'];
		                    $tokens['end_sgbv_activity'] = $_POST['end_sapv'];
		                    
		                    //internalinvoice
		                    $tokens['invoice'] = $_POST;
		                    
		                    //ISPC-2747 Lore 11.12.2020 - tokens de umplut pt template-urile de pe live
		                    //get client user details
		                    $user = new User();
		                    $client_users_arr = $user->getUserByClientid($clientid, '0', true);
		                    
		                    foreach($client_users_arr as $k_client_user => $v_client_user)
		                    {
		                        $client_users[$v_client_user['id']] = $v_client_user;
		                    }
		                    
		                    $user_details = $client_users[$invoice_data['user']];
		                    $user_details_str = '';
		                    
		                    if(strlen($user_details['user_title']) > '0'){
		                        $user_details_str .= $user_details['user_title'] . ' ';
		                    }
		                    if(strlen($user_details['first_name']) > '0'){
		                        $user_details_str .= $user_details['first_name'] . ' ';
		                    }
		                    if(strlen($user_details['last_name']) > '0'){
		                        $user_details_str .= $user_details['last_name'];
		                    }
		                    if(strlen($user_details['street1']) > '0'){
		                        $user_details_str .= "<br />".$user_details['street1'];
		                    }
		                    if(strlen($user_details['zip']) > '0'){
		                        $user_details_str .= "<br />".$user_details['zip'] . " ";
		                    }
		                    if(strlen($user_details['city']) > '0')	{
		                        $user_details_str .= "<br />".$user_details['city'];
		                    }
		                    
		                    $tokens['invoice']['benutzer_adresse'] = $user_details_str;
		                    $tokens['invoice']['user_nachname'] = $user_details['last_name'];
		                    $tokens['invoice']['user_vorname'] = $user_details['first_name'];
		                    $tokens['invoice']['invoice_date'] = date('d.m.Y');
		                    $tokens['invoice']['invoice_number'] = $_POST['invoice_number'];
		                    $tokens['invoice']['straße_mandant'] = (strlen($client_details[0]['street1']) > '0' ? html_entity_decode($client_details[0]['street1'], ENT_QUOTES, 'utf-8') : '');
		                    
		                    $tokens['invoice']['internal_invoice_items_html'] = $html_items;
		                    $tokens['invoice']['invoice_items_html'] = $html_items;
		                    
		                    $tokens['invoice']['birthd'] = $_POST['birthd'];
		                    $tokens['invoice']['last_name'] = $_POST['last_name'];
		                    $tokens['invoice']['patienten_id'] = strtoupper($_POST['epid']);
		                    $tokens['invoice']['user_debitor_number'] = $user_details['debitor_number'];
		                    $tokens['benutzer_vorname'] = $user_details['first_name'];
		                    $tokens['benutzer_nachname'] = $user_details['last_name'];
		                    $tokens['steuernummer'] = $user_details['control_number'];
		                    //
		                    
		                    //rp_invoice_pdf
		                    $tokens['custom_invoice'] = 'custom_invoice';
		                    $tokens['patient_name'] = $_POST['first_name'].', '.$_POST['last_name'];
		                    $tokens['versicherten_nr'] = $_POST['insurance_no'];
		                    $tokens['curent_sapv_from'] = $_POST['start_sapv'];
		                    $tokens['curent_sapv_till'] = $_POST['end_sapv'];
		                    $tokens['invoice_date_from'] = $_POST['start_active'];
		                    $tokens['invoice_date_till'] = $_POST['end_active'];
		                    
		                    $tokens['last_name'] = $_POST['last_name'];
		                    $tokens['invoiced_period'] = $_POST['start_active'].'-'.$_POST['end_active'];
		                    $tokens['debitor_number'] = $_POST['debtor_number'];
		                    
		                    // ISPC-2747 Lore 16.12.2020  --- internal_invoice -- create the format for items that is used in templete
		                    if($_REQUEST['inv_typ'] == 'internal_invoice'){
		                        foreach($invoice_items as $ky=>$vl){
		                            $tokens['invoice_items']['code'][$ky] = $vl['shortcut'];
		                            $tokens['invoice_items']['name'][$ky] = $vl['name'];
		                            $tokens['invoice_items']['qty'][$ky]  = $vl['qty'];
		                            $tokens['invoice_items']['price'][$ky] = $vl['price'];
		                            $tokens['invoice_items']['total'][$ky] = $vl['total'];
		                            $tokens['invoice_items']['dates'][$ky][$ky] = date('d.m.Y', strtotime($_POST['start_active']));
		                            $tokens['invoice_items']['total_sorted'][$ky] = $tokens['invoice_items']['total'][$ky];
		                        }
		                    }
		                    
		                    //client data
		                    $tokens['client'] = $client_details[0];
		                    $tokens['client_details'] = $client_details[0];
		                    
		                    //letter footer text
		                    $boxes = new LettersTextBoxes();
		                    $letter_boxes_details = $boxes->client_letter_boxes($clientid);
		                    
		                    // for healthinsuranceinvoices template
		                    $replacement_arr = array();
		                    $replacement_arr['%first_name'] = $patient_days[$ipid]['details']['first_name'];
		                    $replacement_arr['%last_name'] = $patient_days[$ipid]['details']['last_name'];
		                    $replacement_arr['%admission_date'] = date('d.m.Y', strtotime($patient_days[$ipid]['details']['admission_date']));
		                    $replacement_arr['%client_name'] = $_POST['client_ik'];
		                    $replacement_arr['%invoice_start'] = date('d.m.Y', strtotime($_POST['start_active']));
		                    $replacement_arr['%invoice_end'] = date('d.m.Y', strtotime($_POST['end_active']));
		                    
		                    //no money no honey => default gofer
		                    if(strlen($_POST['header']) == 0)
		                    {
		                        $header_default = '<b><u>Liquidation</u></b>
									<br />
									<br />
									O.g. <b>%first_name %last_name</b> erhält seit dem <b>%admission_date</b> SAPV-Leistungen.
									<br />
									<p>
										Wir erlauben uns, gemäß § 132 d Abs. 1 SGB V über die spezialisierte ambulante Palliativversorgung
										(SAPV) nach § 37 b SGB V und dem entsprechenden Vertrag zwischen dem
										Landeskrankenkassenverband und der %client_name für die Zeit vom %invoice_start
										bis zum  %invoice_end folgende Kosten in Rechnung zu stellen:
									</p>';
		                        
		                        
		                        $tokens['header'] = Pms_CommonData::str_replace_assoc($replacement_arr, $header_default);		                        
		                    }
		                    
		                    if(strlen($_POST['footer']) == 0)
		                    {
		                        //ISPC:2035:: Please change the invoce Text for NIE_Diepholz
		                        if(!empty($letter_boxes_details)){
		                            $footer_default = $letter_boxes_details[0]['nd_invoice_footer'];
		                        } else {
		                            $footer_default = 'Wir bitten um Erstattung der angegebenen Summe innerhalb von <b>3 Wochen</b> auf unten stehende Kontoverbindung. Für Rückfragen stehen wir gerne zur Verfügung.
										<br />
										<br />
										Mit freundlichen Grüßen';
		                            
		                        }
		                        $tokens['footer'] = Pms_CommonData::str_replace_assoc($replacement_arr, $footer_default);
		                    }
		                    
		                    		                    
		                    //load template data
		                    //$template_data = InvoiceTemplates::get_template($this->clientid, false, '1', $invoice_type );
		                    $res = Doctrine_Query::create()
		                    ->select('*')
		                    ->from('InvoiceTemplates')
		                    ->where('isdeleted = "0"')
		                    ->andWhere('clientid="' . $this->clientid . '"')
		                    ->andWhere('invoice_type LIKE "' . $invoice_type . '"')
		                    ->limit('1')
		                    ->orderBy("id DESC");
		                    $template_data = $res->fetchArray();
		                    
		                    
		                    $batch_temp_folder = Pms_CommonData::uniqfolder(PDFDOCX_PATH . '/' . $this->clientid);
		                    $Batch_name = $params['custom_data']['prefix'].$params['custom_data']['invoice_number'];
		                    
		                    if(empty($pdf_name)){
		                        $pdf_name = "Rechnung-" . $tokens['prefix'] . $tokens['invoice_number'];
		                    }
		                    
		                    if($template_data)
		                    {
		                        if($_REQUEST['inv_typ'] == "internalinvoice"){
		                            $template_file_path = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
		                            $pdf_name = $tokens['prefix'] . $tokens['invoice_number'];
		                            
		                            $this->_editinvoice_generate_pdf_and_download_copy_internalcontroller($template_file_path, $tokens, $pdf_name);
		                        
		                        } else {

		                            $temp_files[] = $this->generate_file($template_data[0], $tokens, 'docx', $batch_temp_folder, 'generate');

		                        }
		                        
		                    } else {
		                        
		                        if(empty($template) && empty($pdf_name)) {
		                            return;
		                        } else {
    
		                            $this->generate_pdf( $tokens, $pdf_name, $template, "P");
	
		                        }
		                        
		                    }
		                    
		                    if(count($temp_files) > '0')
		                    {
		                        //final cleanup (check if files are on disk)
		                        foreach($temp_files as $k_temp => $v_file)
		                        {
		                            if(!is_file($v_file))
		                            {
		                                //remove unexisting files
		                                //							$unsetted_files[] = $v_file; //for debugs
		                                unset($temp_files[$v_file]);
		                            }
		                        }
		                        
		                        $remaining_temp_files = array_values(array_unique($temp_files));
		                        
		                        if(count($remaining_temp_files) > '0')
		                        {
		                            //ISPC-2472 Ancuta 12.11.2019
		                            $final_file = $this->generate_file($template_data[0], false, "pdf", $batch_temp_folder, 'merge', $temp_files,$Batch_name);
		                        }
		                    }
		                    if ( ! isset($params['print_job']) && $params['print_job'] == '1' ){
		                        
		                    } else {
		                        exit;
		                    }
		                    
		                }
		                
		                $post = $_POST;
		                $post['clientid'] = $this->clientid;
		                $post['ipid'] = $invoice_data['ipid'];
		                
		                $post['user'] = $this->userid;
		                
		                if($invoice_form->validate_custom_invoice($post))
		                {
		                    $invoice_form->update_custom_invoice($invoice_id, $post, $status);
		                    
		                    if($_REQUEST['redirect2new'] == '1'){
		                        $this->_redirect(APP_BASE . 'invoiceclient/invoices?invoice_type='.$_REQUEST['invoice_type'] );
		                        exit();
		                    } else {
		                        $this->redirect(APP_BASE . $page_to_return);
		                    }
		                    
		                }
		                else
		                {
		                    $invoice_form->assignErrorMessages();
		                    
		                    //keep invoice data if errors occurs
		                    $this->view->invoice_data = $post;
		                    
		                    //keep invoice items data if error occurs
		                    foreach($post['row'] as $k_post => $v_post)
		                    {
		                        $invoice_items[] = array(
		                            'shortcut' => $post['shortcut'][$k_post],
		                            'name' => $post['name'][$k_post],
		                            'qty' => $post['qty'][$k_post],
		                            'price' => $post['price'][$k_post],
		                            'custom' => $post['custom'][$k_post],
		                            'total' => $post['total'][$k_post],
		                        );
		                    }
		                    
		                    $this->view->invoice_items = $invoice_items;
		                }
		            }
		        }
		        else
		        {
		            $this->redirect(APP_BASE . $page_to_return);
		        }
		    }
		    
		    //copy generate_pdf from InvoiceController - ISPC-2747 Lore 26.11.2020
		    private function generate_pdf($post_data, $pdfname, $filename, $orientation = false, $background_pages = false)
		    {
		        // 			print_r(func_get_args());
		        // 			die();
		        $pdf_names = array(
		            // "forms" - from patient menu
		            'PerformancePdf' => 'Formular SAPV Leistungsnachweis',
		            'form_performance_items_pdf' => 'Formular SAPV Leistungsnachweis',
		            'SocialcodePdf' => 'Formular SGB V Abrechnung',
		            'MedipumpsControl' => 'Formular Medikamenten Pumpen',
		            // invoices
		            'PerformancePdfs' => 'SAPV Leistungsnachweis Rechnung',
		            'PerformancePdf_invoice_items' => 'SAPV Leistungsnachweis Rechnung',
		            'SocialcodePdfs' => 'SGB V Abrechnung Rechnung',
		            'MedipumpsControlPdfs' => 'Medikamenten Pumpen Rechnung ',
		            'InvoiceJournal' => 'Rechnungsausgangsjournal',
		            //ISPC-2424
		            'InvoiceJournal_sh' => 'Rechnungsausgangsjournal SH',
		            'HeInvoice' => 'Hessen Rechnung',
		            'BayernPdf' => 'Bayern Rechnung',
		            'SGB_XI' => 'SGB XI',
		            'rpinvoice' => 'RP - Abrechnung',
		            'rpperformancerecord' => 'RP - Leistungsübersicht',
		            'BreHospizSapvPerformanceInvoice' => 'BRE Hospiz Rechnung'
		        );
		        
		        if($pdfname == 'HeInvoice' || $pdfname == 'PerformancePdfs'  || $pdfname == 'PerformancePdf_invoice_items' || $pdfname == 'BayernPdf' ||    $pdfname == 'SocialcodePdfs' || $pdfname == 'SGB_XI' || $pdfname == 'MedipumpsControlPdfs' )
		        {
		            
		            if(strlen($post_data['address']) > 0)
		            {
		                if(strpos($post_data['address'],"style"))
		                {
		                    $post_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $post_data['address']);
		                }
		                
		                $post_data['address'] = str_replace(array("<p>","<p >"), "", $post_data['address']);
		                $post_data['address'] = str_replace("</p>", "", $post_data['address']);
		                $post_data['address'] = str_replace("\n", "<br/>", $post_data['address']);
		            }
		        }
		        if( $pdfname == 'PerformancePdfs' || $pdfname == 'PerformancePdf_invoice_items' || $pdfname == 'SocialcodePdfs'  || $pdfname == 'SGB_XI'  || $pdfname == 'MedipumpsControlPdfs' )
		        {
		            
		            if(strlen($post_data['hi_subdiv_address']) > 0)
		            {
		                if(strpos($post_data['hi_subdiv_address'],"style"))
		                {
		                    $post_data['hi_subdiv_address'] = preg_replace('/style=\"(.*)\"/i', '', $post_data['hi_subdiv_address']);
		                }
		                
		                $post_data['hi_subdiv_address'] = str_replace(array("<p>","<p >"), "", $post_data['hi_subdiv_address']);
		                $post_data['hi_subdiv_address'] = str_replace("</p>", "", $post_data['hi_subdiv_address']);
		                $post_data['hi_subdiv_address'] = str_replace("\n", "<br/>", $post_data['hi_subdiv_address']);
		            }
		            
		            if(strlen($post_data['patient_address']) > 0)
		            {
		                if(strpos($post_data['patient_address'],"style"))
		                {
		                    $post_data['patient_address'] = preg_replace('/style=\"(.*)\"/i', '', $post_data['patient_address']);
		                }
		                
		                $post_data['patient_address'] = str_replace(array("<p>","<p >"), "", $post_data['patient_address']);
		                $post_data['patient_address'] = str_replace("</p>", "", $post_data['patient_address']);
		                $post_data['patient_address'] = str_replace("\n", "<br/>", $post_data['patient_address']);
		            }
		        }
		        
		        
		        if(is_array($filename))
		        {
		            foreach($filename as $k_file => $v_file)
		            {
		                $htmlform[$k_file] = Pms_Template::createTemplate($post_data, 'templates/' . $v_file);
		                $html[$k_file] = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform[$k_file]);
		            }
		        }
		        else
		        {
		            $htmlform = Pms_Template::createTemplate($post_data, 'templates/' . $filename);
		            $html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
		        }
		        
		        if($pdfname == 'PerformancePdfs')
		        {
		            $pdf_type = '19';
		        }
		        
		        elseif($pdfname == 'PerformancePdf_invoice_items')
		        {
		            $pdf_type = '19';
		        }
		        else if($pdfname == 'SocialcodePdfs')
		        {
		            $pdf_type = '22';
		        }
		        else if($pdfname == 'MedipumpsControlPdfs')
		        {
		            $pdf_type = '35';
		        }
		        else if($pdfname == 'HeInvoice')
		        {
		            $pdf_type = '36';
		        }
		        else if($pdfname == 'BayernPdf')
		        {
		            $pdf_type = '37';
		        }
		        else if($pdfname == 'SGB_XI')
		        {
		            $pdf_type = '38';
		        }
		        else if($pdfname == 'rpinvoice')
		        {
		            $pdf_type = '48';
		        }
		        else if($pdfname == 'BreHospizSapvPerformanceInvoice')
		        {
		            $pdf_type = '52';
		        }
		        
		        else if($pdfname == 'InvoiceJournal_sh')
		        {
		            $pdf_type = '73';
		        }
		        
		        
		        
		        $pdf = new Pms_PDF('L', 'mm', 'A4', true, 'UTF-8', false);
		        $pdf->setDefaults(true); //defaults with header
		        // 			$pdf->setDefaults(true,$orientation,$bottom_margin); //defaults with header
		        $pdf->setImageScale(1.6);
		        if($pdfname != 'PerformancePdf_invoice_items' && $pdfname != 'form_performance_items_pdf' && $pdfname != 'RP_invoice_items'){
		            $pdf->SetFont('dejavusans', '', 10);
		        }
		        if($pdfname == 'PerformancePdf_invoice_items'){
		            $pdf->SetFont('', '', 10);
		        }
		        if($pdfname == 'form_performance_items_pdf'){
		            $pdf->SetFont('', '', 10);
		        }
		        
		        $pdf->SetMargins(6, 5, 10); //reset margins
		        $pdf->setPrintFooter(false); // remove black line at bottom
		        $pdf->SetAutoPageBreak(TRUE, 10);
		        
		        if($pdfname == 'HeInvoice')
		        {
		            $pdf->firstpagebackground = true; // set pdf background only for the first page
		            $pdf->SetMargins(6, 20, 10); //reset margins
		            $pdf->SetAutoPageBreak(TRUE, 30);
		        }
		        else if($pdfname == 'HeInvoice')
		        {
		            $pdf->firstpagebackground = true; // set pdf background only for the first page
		        }
		        else if($pdfname == 'rpinvoice')
		        {
		            //				$pdf->firstpagebackground = true;
		            $pdf->SetMargins(28, 18, 28);
		            //				$pdf->SetAutoPageBreak(TRUE, 30);
		        }
		        else if($pdfname == 'RP_invoice_items')
		        {
		            //				$pdf->firstpagebackground = true;
		            // 				$pdf->SetMargins(28, 18, 28);
		            $pdf->SetMargins(10, 5, 10);
		            //				$pdf->SetAutoPageBreak(TRUE, 30);
		        }
		        else if($pdfname == 'PerformancePdf_invoice_items')
		        {
		            $pdf->SetMargins(10, 5, 10);
		        }
		        else if($pdfname == 'form_performance_items_pdf')
		        {
		            $pdf->SetMargins(10, 5, 10);
		        }
		        elseif( $pdfname == 'rpperformancerecord')
		        {
		            $pdf->SetAutoPageBreak(TRUE, 1);
		        }
		        
		        // set margin
		        if($pdfname == 'HiInvoice') {
		            $pdf->SetMargins(20, 49, 50);
		        }
		        if($filename == 'health_insurance_user_invoice.html') {
		            $pdf->SetMargins(20, 29, 50);
		        }
		        
		        
		        if($pdfname == 'InvoiceJournal')
		        {
		            if(strlen($post_data['start_date']) == 0)
		            {
		                //get current month default
		                $post_data['start_date'] = date('Y-m-', time()) . '01';
		                $post_data['end_date'] = date('Y-m-', time()) . date('t', time());
		            }
		            $pdf->SetMargins(10, 40, 10);
		            $pdf->SetHeaderMargin(5);
		            
		            $header_text = '<table width="890" border="0">
                        		<tr>
                        			<td style="font-size: 14;" colspan="6"><strong>Rechnungsausgangsjournal</strong></td>
                        			<td style="font-size: 9;font-weight: bold;text-align: right;" colspan="2">' . $post_data['clientinfo']['client_name'] . '</td>
                        		</tr>
                        		<tr>
                        			<td style="font-size: 9;" colspan="2">Auswertung nach:</td>
                        			<td style="font-size: 9;font-weight: bold;text-align: left;" colspan="2">Rechnungsdatum</td>
                        			<td></td>
                        			<td></td>
                        			<td style="font-size: 9;font-weight: bold;text-align: right;" colspan="2"></td>
                        		</tr>
                        		<tr>
                        			<td style="font-size: 9;" colspan="2">Sortiert nach:</td>
                        			<td style="font-size: 9;font-weight: bold;" colspan="2">' . $this->view->translate($post_data['j_sortby']) . '</td>
                        			<td></td>
                        			<td></td>
                        			<td style="font-size: 9;font-weight: bold;text-align: right;" colspan="2">' . $post_data['clientinfo']['street1'] . $post_data['clientinfo']['street2'] . '</td>
                        		</tr>
                        		<tr>
                        			<td style="font-size: 9;" colspan="2">Zeitraum:</td>
                        			<td style="font-size: 9;font-weight: bold;" colspan="2">' . date('d.m.Y', strtotime($post_data['start_date'])) . ' - ' . date('d.m.Y', strtotime($post_data['end_date'])) . '</td>
                        			<td></td>
                        			<td></td>
                        			<td style="font-size: 9;font-weight: bold;text-align: right;" colspan="2">' . $post_data['clientinfo']['city'] . '</td>
                        		</tr>
                        		<tr>
                        			<td style="font-size: 9;" colspan="2">Druckdatum:</td>
                        			<td style="font-size: 9;font-weight: bold;" colspan="2">' . date('d.m.Y H:i', time()) . '</td>
                        			<td></td>
                        			<td></td>
                        			<td style="font-size: 9;" colspan="2"></td>
                        		</tr>
                        		<tr>
                        			<td style="font-size: 9;" colspan="2">Seite:</td>
                        			<td style="font-size: 9;font-weight: bold;text-align: left;" colspan="2">' . $pdf->getAliasNumPage() . '</td>
                        			<td></td>
                        			<td></td>
                        			<td style="font-size: 9;font-weight: bold;text-align: right;" colspan="2">IK: ' . $post_data['clientinfo']['institutskennzeichen'] . '</td>
                        		</tr>
                        			    
                        </table>';
		            
		            // 				$pdf->setHeaderFont(Array('arial', '', 11));
		            $pdf->setHeaderFont(Array('dejavusans', '', 11));
		            $pdf->HeaderText = $header_text;
		        }
		        
		        //ISPC-2424
		        if($pdfname == 'InvoiceJournal_sh')
		        {
		            if(strlen($post_data['start_date']) == 0)
		            {
		                //get current month default
		                $post_data['start_date'] = date('Y-m-', time()) . '01';
		                $post_data['end_date'] = date('Y-m-', time()) . date('t', time());
		            }
		            $pdf->SetMargins(10, 45, 10);
		            $pdf->SetHeaderMargin(17);
		            
		            $header_text = '<table width="960" >
	                            <tr>
                        			<td style="font-size: 18;font-weight: bold; color: #6d6d6d; " colspan="3">FIBU Protokoll</td>
                        			<td style="font-size: 12;" colspan="4">' . date('d.m.Y', strtotime($post_data['start_date'])) . ' - ' . date('d.m.Y', strtotime($post_data['end_date'])) . '</td>
                        			<td style="width:180;color: #f2f2f2;font-weight: bold;text-align: right;"  >
                                        <font size="12">' . $pdf->getAliasNumPage() . '</font><br/>
                                        <font size="9">von ' . $pdf->getAliasNbPages() . '</font>
                                    </td>
                                    <td></td>
                        		</tr>
                                            
                                            
                        		<tr>
                                    <td   colspan="9" > </td>
                                </tr>
                        		<tr>
                        			<td style="font-size: 9;font-weight: bold;" colspan="4">Team ' . $post_data['clientinfo']['team_name'] . '</td>
                        			<td></td>
                        			<td></td>
                                    <td   colspan="3" > </td>
                                </tr>
                        			    
                        		<tr>
                        			<td style="font-size: 9;font-weight: bold;  color: #6c6c6c;" colspan="4">Fibu-Datei vom ' . date('d.m.Y H:i', time()) . '</td>
                        		</tr>
                        			    
                        </table>';
		            // 			    echo $header_text; exit;
		            // 				$pdf->setHeaderFont(Array('arial', '', 11));
		            $pdf->setHeaderFont(Array('dejavusans', '', 11));
		            $pdf->HeaderText = $header_text;
		        }
		        
		        if($pdfname == 'PerformancePdf_invoice_items')
		        {
		            $pdf->SetAutoPageBreak(TRUE, 35);
		            
		            $pdf->setFooterFont(Array('helvetica', '', 7));
		            
		            $pdf->no_first_page_invoice_footer = true; //remove footer from the first page
		            
		            $pdf->invoice_footer = true; // set special footer
		            $footer_text = '<table width="100%">
                                	<tr>
                                		<td width="45%">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                                		<td width="10%"></td>
                                		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                                	</tr>
                                	<tr>
                                        <td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td></td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Verantwortlicher Leistungserbinger PCT</td>
                                		<td></td>
                                		<td>Versicherter / Bezugsperson</td>
                                	</tr>
                                    <tr>
                                		<td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                		<td></td>
                                		<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                	</tr>
                                </table>';
		            
		            
		            $pdf->footer_text = $footer_text; // set pdf background only for the first page
		            $pdf->setPrintFooter(true); // remove black line at bottomC
		        }
		        if($pdfname == 'form_performance_items_pdf')
		        {
		            
		            $pdf->setFooterFont(Array('helvetica', '', 7));
		            // 			   $pdf->firstpagebackground = false; // set pdf background only for the first page
		            $pdf->invoice_footer = true; // set special footer
		            $footer_text = '<table width="100%">
                                	<tr>
                                		<td width="45%">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                                		<td width="10%"></td>
                                		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                                	</tr>
                                	<tr>
                                        <td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td></td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Verantwortlicher Leistungserbinger PCT</td>
                                		<td></td>
                                		<td>Versicherter / Bezugsperson</td>
                                	</tr>
                                    <tr>
                                		<td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                		<td></td>
                                		<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                	</tr>
                                </table>';
		            
		            
		            $pdf->footer_text = $footer_text; // set pdf background only for the first page
		            $pdf->setPrintFooter(true); // remove black line at bottomC
		        }
		        if($pdfname == 'PerformancePdf') //ISPC-2187
		        {
		            $pdf->setPrintFooter(true);
		            //$pdf->SetMargins(10, 5, 10); //reset margins > ace3stea sunt necesare? le-am lasat pt ca dadea exemplu rooster si am zis sa fie poz la fel
		            $pdf->footer_text = $this->view->translate("This certificate of achievement was printed on"). " " . date("d.m.Y");
		            $pdf->setFooterType('1 of n date');
		        }
		        
		        if($pdfname == 'PerformancePdfs')//ISPC-2187
		        {
		            $pdf->setPrintFooter(true);
		            //$pdf->SetMargins(10, 5, 10); //reset margins
		            $pdf->footer_text = $this->view->translate("This certificate of achievement was printed on"). " " . date("d.m.Y");
		            $pdf->setFooterType('1 of n date');
		        }
		        
		        // ISPC-1603
		        if($pdfname == 'RP_invoice_items')
		        {
		            $pdf->SetAutoPageBreak(TRUE, 35);
		            
		            $pdf->setFooterFont(Array('helvetica', '', 7));
		            
		            $pdf->no_first_page_invoice_footer = true; //remove footer from the first page
		            
		            $pdf->invoice_footer = true; // set special footer
		            $footer_text = '<table width="100%">
                                	<tr>
                                		<td width="45%">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                                		<td width="10%"></td>
                                		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                                	</tr>
                                	<tr>
                                        <td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td></td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Verantwortlicher Leistungserbinger PCT</td>
                                		<td></td>
                                		<td>Versicherter / Bezugsperson</td>
                                	</tr>
                                    <tr>
                                		<td colsapn="3">&nbsp;</td>
                                	</tr>
                                	<tr>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                		<td style="border-bottom:1px solid #000000;"></td>
                                	</tr>
                                	<tr>
                                		<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                		<td></td>
                                		<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                	</tr>
                                </table>';
		            
		            
		            $pdf->footer_text = $footer_text; // set pdf background only for the first page
		            $pdf->setPrintFooter(true); // remove black line at bottomC
		        }
		        
		        
		        //set page background for a defined page key in $background_pages array
		        $bg_image = Pms_CommonData::getPdfBackground($post_data['clientid'], $pdf_type);
		        if($bg_image !== false)
		        {
		            $bg_image_path = PDFBG_PATH . '/' . $post_data['clientid'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
		            if(is_file($bg_image_path))
		            {
		                $pdf->setBackgroundImage($bg_image_path);
		            }
		        }
		        
		        //			print_r($html);exit;
		        
		        if(is_array($html))
		        {
		            foreach($html as $k_html => $v_html)
		            {
		                if(is_array($orientation))
		                {
		                    if(is_array($background_pages))
		                    {
		                        if(!in_array($k_html, $background_pages))
		                        {
		                            //unset page background for a nondefined page key in $background_pages array
		                            $pdf->setBackgroundImage();
		                        }
		                    }
		                    //each page has it`s own orientation
		                    $pdf->setHTML($v_html, $orientation[$k_html]);
		                }
		                else
		                {
		                    //all pages one custom orientation
		                    $pdf->setHTML($v_html, $orientation);
		                }
		            }
		        }
		        else
		        {
		            if(empty($background_pages) && is_file($bg_image_path))
		            {
		                $pdf->setBackgroundImage($bg_image_path);
		            }
		            
		            $pdf->setHTML($html, $orientation);
		        }
		        
		        
		        
		        //$tmpstmp = substr(md5(time() . rand(0, 999)), 0, 12);
		        //mkdir('uploads/' . $tmpstmp);
		        $tmpstmp = $pdf->uniqfolder(PDF_PATH);
		        
		        if($post_data['bulk_print'] == 1){
		            
		            $invoice_number_full="";
		            $invoice_number_full .=  (strlen($post_data['prefix']) > 0) ? $post_data['prefix'] : '';
		            $invoice_number_full .= $post_data['invoice_number'];
		            
		            $pdfname_inv = $pdfname;
		            if(strlen($invoice_number_full) > 0 ){
		                $pdfname_inv = $pdfname.'_'.$invoice_number_full;
		            }
		            // 			    $source_path = PDF_PATH . '/' . $tmpstmp . '/' . $pdfname_inv . '.pdf';
		            
		            // 			    $pdf->toFile($source_path);
		            
		            
		            $batch_temp_folder = $post_data['batch_temp_folder'];
		            
		            if(!is_dir(PDFDOCX_PATH))
		            {
		                while(!is_dir(PDFDOCX_PATH))
		                {
		                    mkdir(PDFDOCX_PATH);
		                    if($i >= 50)
		                    {
		                        //exit; //failsafe
		                        break;
		                    }
		                    $i++;
		                }
		            }
		            
		            if(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid']))
		            {
		                while(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid']))
		                {
		                    mkdir(PDFDOCX_PATH . '/' . $post_data['clientid']);
		                    if($i >= 50)
		                    {
		                        //exit; //failsafe
		                        break;
		                    }
		                    $i++;
		                }
		            }
		            
		            
		            
		            if(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder))
		            {
		                while(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder))
		                {
		                    mkdir(PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder);
		                    if($i >= 50)
		                    {
		                        exit; //failsafe
		                    }
		                    $i++;
		                }
		            }
		            
		            
		            $destination_path = PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder . '/pdf_invoice_' . $post_data['unique_id'].'.pdf';
		            
		            $pdf->toFile($destination_path);
		            
		            // 			    $destination_path = '/home/www/ispc20172/public/pdfdocx_files/70/338_bw_sapv_invoice_3/pdf_invoice_6295.pdf';
		            // 			    copy($source_path, $destination_path);
		            return $destination_path;
		            
		        } else {
		            
		            $pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
		        }
		        
		        
		        
		        
		        
		        
		        $_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
		        // 			$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
		        // 			exec($cmd);
		        $zipname = $tmpstmp . ".zip";
		        $filename = "uploads/" . $tmpstmp . ".zip";
		        /*
		         $con_id = Pms_FtpFileupload::ftpconnect();
		         if($con_id)
		         {
		         $upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
		         Pms_FtpFileupload::ftpconclose($con_id);
		         }
		         */
		        
		        
		        if($pdfname == 'PerformancePdf' || $pdfname == 'PerformancePdfs'  || $pdfname == 'PerformancePdf_invoice_items'   || $pdfname == 'form_performance_items_pdf' )
		        {
		            $tabname = 'sapvinvoice';
		        }
		        else if($pdfname == 'SocialcodePdf' || $pdfname == 'SocialcodePdfs')
		        {
		            $tabname = 'sgbvinvoice';
		        }
		        else if($pdfname == 'InvoiceJournal')
		        {
		            $tabname = 'invoicejournal';
		        }
		        else if($pdfname == 'HeInvoice')
		        {
		            $tabname = 'heinvoice';
		        }
		        else if($pdfname == 'BayernPdf')
		        {
		            $tabname = 'bayerninvoice';
		        }
		        
		        if(
		            $pdfname == 'PerformancePdf' ||
		            // 				$pdfname == 'form_performance_items_pdf' ||
		            $pdfname == 'SocialcodePdf' ||
		            $pdfname == 'MedipumpsControl')
		        {
		            $patient_file = '1';
		        }
		        else
		        {
		            $patient_file = '0';
		        }
		        
		        if($patient_file == "1")
		        {// No invoice should go to patient files
		            $cust = new PatientFileUpload();
		            $cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
		            $cust->ipid = $post_data['ipid'];
		            $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
		            $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
		            $cust->system_generated = "1";
		            $cust->tabname = $tabname;
		            $cust->save();
		            $file_id = $cust->id;
		            
		            if(
		                $pdfname == "PerformancePdf" ||
		                $pdfname == "SocialcodePdf"
		                // 				    ||  $pdfname == "form_performance_items_pdf"
		                )
		            {
		                //insert system file tags
		                $insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id, array('6'));
		            }
		            
		            //upload to ftp
		            $ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
		            
		        }
		        
		        ob_end_clean();
		        ob_start();
		        
		        // ISPC-2472 @Ancuta 07.11.2019
		        // THIS AFFECTS ALL INVOICES THAT USE THIS FUNCTION
		        $invoice_number_full="";
		        $invoice_number_full .=  (strlen($post_data['prefix']) > 0) ? $post_data['prefix'] : '';
		        $invoice_number_full .= $post_data['invoice_number'];
		        
		        if(strlen($invoice_number_full) > 0 ){
		            $pdfname = $invoice_number_full;
		        }
		        // --
		        
		        $pdf->toBrowser($pdfname . '.pdf', 'D');
		        exit;
		    }
		    
		    //ISPC-2747 Lore 04.12.2020
		    private function _editinvoice_generate_pdf_and_download_copy_internalcontroller($template = '', $tokenfilter = array(), $download_nice_name = 'Invoice')
		    {
		        $logininfo = new Zend_Session_Namespace('Login_Info');
		        $clientid = $logininfo->clientid;
		        //dd($tokenfilter);
		        //die(print_r(func_get_args(), true));
		        $docx_helper = $this->getHelper('CreateDocxFromTemplate');
		        $docx_helper->setTokenController('invoice');
		        //$docx_helper->test_all_invoice_templates($template, $tokenfilter , 'pdf');
		        
		        $name = time();
		        
		        $docx_helper->setOutputFile(PDFDOCX_PATH . '/' . $clientid . '/' . $name);
		        
		        //do not add extension !
		        $docx_helper->setBrowserFilename($download_nice_name);
		        
		        if(APPLICATION_ENV == 'development'){
		            $docx_helper->create_docx ($template, $tokenfilter) ;
		        } else{
		            $docx_helper->create_pdf ($template, $tokenfilter) ;
		        }
		        
		        $x = $docx_helper->file_save_on_ftp();
		        
		        // save $x if needed
		        
		        $docx_helper->download_file();
		    }
		    
	}
	