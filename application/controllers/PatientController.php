<?php
	class PatientController extends Pms_Controller_Action {

		public function init()
		{
			/* Initialize action controller here */

			//    ISPC-791 secrecy tracker
			$user_access = PatientPermissions::document_user_acces();

			//Check patient permissions on controller and action
			$patient_privileges = PatientPermissions::checkPermissionOnRun();

			if(!$patient_privileges)
			{
				$this->_redirect(APP_BASE . 'error/previlege');
			}
			//ISPC-2827 Ancuta 26.03.2021
			$this->logininfo = new Zend_Session_Namespace('Login_Info');
			//-- 
			$this
			->setActionsWithPatientinfoAndTabmenus([
			    /*
			     * actions that have the patient header
			     */
			    'anlagethree2018',
			    ($this->logininfo->isEfaClient == '1' && $this->logininfo->isEfaUser == '1') ? '' : 'patientfileupload',  //ISPC-2831 Dragos 15.03.2021 + ISPC-2827 Ancuta 26.03.2021
				'fetchcalendarevents',
				'patdiagnoedit',
			])
			->setActionsWithJsFile([
			    /*
			     * actions that will include in the <head>:  /public {_ipad} /javascript/views / CONTROLLER / ACTION .js"
			     */
			    'patientfileupload',
// 			    'allpatientlist',
			    'patientoveralllist',
			])
			->setActionsWithLayoutNew([
			    /*
			     * actions that will use layout_new.phtml
			     * Actions With Patientinfo And Tabmenus also use layout_new.phtml
			     */
// 			    'allpatientlist',
			    'patientoveralllist',
				//Maria:: Migration CISPC to ISPC 20.08.2020 :: START
                'patientcasestatus',
                'patientops',
                'doctransferhl7',
			    ($this->logininfo->isEfaClient == '1' && $this->logininfo->isEfaUser == '1') ? '' : 'patientfileupload', //ISPC-2831 Dragos 15.03.2021 + ISPC-2827 Ancuta 26.03.2021
			])
			;
		}
		
		public function preDispatch() 
		{
			parent::preDispatch();		
			
			$this_controler = $this->getRequest()->getActionName();
			$controlers_with_zip_city_livesearch = array(
					'patientmasteradd',
					'patientmasteredit',
					'patientdetails' ,
					'patientedit', 
					'familydocedit',		
					'specialists',		
					'patienthealthedit',		
					'pflegedienste',
					'supplies',
					'voluntaryworkers',
					'pharmacyedit',
					'suppliers',
					'physiotherapist',
					'homecares',
					'church',
					'editcontactperson',
			);
			
			if(in_array($this_controler, $controlers_with_zip_city_livesearch)){
				$layout = new Zend_Layout();
				$layout->getView()->headScript()->appendFile( APP_BASE . '/javascript/livesearch/getzipcities.js' );
			}
		}
		
		
		public function patientmasteraddAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canadd');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			//ISPC - 1757
			$ef = new ExtraForms();
			$allowedFormBoxes = $ef->get_client_forms($this->logininfo->clientid);
			$this->view->allowedFormBoxes = $allowedFormBoxes;
			//print_r($allowedFormBoxes); exit;
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("87", $logininfo->clientid))
			{
				$this->view->show_mmi = "1";
			}
			else
			{
				$this->view->show_mmi = "0";
			}
			
			/* ISPC-1775,ISPC-1678, ISPC-1757 */
			/*$show_dgp_block= "0";
			if($modules->checkModulePrivileges("125", $logininfo->clientid))
			{
				$show_dgp_block = "1";
				
				$dgp_kern_model = new DgpKern();
				$partners_array = $dgp_kern_model->get_form_texts();
				$dgp['form']['texts'] = $partners_array;
				$this->view->dgp = $dgp;
				
			}
			$this->view->show_dgp_block= $show_dgp_block;*/
			
			if($allowedFormBoxes['59'])
			{				
				$dgp_kern_model = new DgpKern();
				$partners_array = $dgp_kern_model->get_form_texts();
				$dgp['form']['texts'] = $partners_array;
				$this->view->dgp = $dgp;
			}
			
			$this->view->act = "patient/patientmasteradd";
			$this->_helper->layout->setLayout('layout');
			$this->view->recording_date = date("d-m-Y");
			$this->view->errorclass = "ErrorDivHide";
			$this->view->verordnetarray = Pms_CommonData::getSapvCheckBox();
			$this->view->salutations = Pms_CommonData::getSalutation();
			$this->view->genders = Pms_CommonData::getGender();
			$this->view->regions = Pms_CommonData::getRegions();
			$this->view->hours = Pms_CommonData::getHours();
			$this->view->minutes = Pms_CommonData::getMinutes();

			$lc = new Locations();
			$this->view->locationarray = $lc->getLocations($clientid, 1);

			$rl = new PatientReligions();
			$this->view->religions = $rl->getReligionsNames();

			$period_start = date("Y", strtotime("-5 year", strtotime(date("d.m.Y"))));
			$period_end = date("Y", strtotime("+5 year", strtotime(date("d.m.Y"))));

			$this->view->period_start = $period_start;
			$this->view->period_end = $period_end;

			$users = new User();
			$userarray = $users->getUserByClientid($clientid);

			$userarraylast[] = $this->view->translate('selectuser');
			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['last_name']) . " " . trim($user['first_name']);
			}
			$this->view->users = $userarraylast;

			$cl = new Client();
			$clarr = Pms_CommonData::getClientData($clientid);

			$dm = new DiagnosisIcd();
			$this->view->icddiagnosisarr = $dm->getDiagnosisData(1);


			$dm = new DiagnosisMeta();
			$diagnosismeta = $dm->getDiagnosisMetaData(1);

			$this->view->diagnosismeta = $diagnosismeta;
			$this->view->jsdiagnosismeta = json_encode($diagnosismeta);

			$this->view->preselectregion = $clarr[0]['preregion'];

			$sap = new SapvVerordnung();
			$this->view->radioarr = $sap->getSapvRadios();
			

			$modules = new Modules();
			if($modules->checkModulePrivileges("70", $clientid)) // primary status : Verordnung
			{
				$sapv_primary_status = true;
			}
			else
			{
				$sapv_primary_status = false;
			}


			if($modules->checkModulePrivileges("71", $clientid)) // secondary status : Verordnung 2nd Page
			{
				$sapv_secondary_status = true;
			}
			else
			{
				$sapv_secondary_status = false;
			}

			if($sapv_primary_status || $sapv_secondary_status)
			{
				$this->view->extraradioarr = $sap->getSapvExtraStatusesRadios();
				$this->view->sapv_primary_status = $sapv_primary_status;
				$this->view->sapv_secondary_status = $sapv_secondary_status;
			}

			if($modules->checkModulePrivileges("69", $clientid))
			{
				$sapv_extra = true;
			}
			else
			{
				$sapv_extra = false;
			}

			if($sapv_extra === true)
			{
				$this->view->extraradioarr_old = $sap->getSapvExtraRadios();
			}
			$this->view->sapv_extra = $sapv_extra;

			
			
			
			$this->view->bra_options_array = Pms_CommonData::get_bra_options_checkboxes();
			
			if($modules->checkModulePrivileges("97", $clientid)) // Bra options
			{
				$sapv_bra_options = true;
			}
			else
			{
				$sapv_bra_options = false;
			}
				
			$this->view->sapv_bra_options = $sapv_bra_options;
			
			/*if($modules->checkModulePrivileges("122", $clientid))//first contact block
			{
			    $first_contact = 1 ;
			} 
			else 
			{
			    $first_contact = 0 ;
			}
			
			$this->view->first_contact = $first_contact ;*/
			
			$detailscookies = '""';
			$oc = new OverviewCookie();
			$ocarr = $oc->getCookieData($logininfo->userid, "admission");

			switch($ocarr[0]['useroption'])
			{
				case 1 :
					$detailscookies = "";
					break;
				case 3 :
					$detailscookies = $ocarr[0]['cookie'];
					break;
				default :
					break;
			}


			// insert new dgp_block; 
			//if($show_dgp_block == "1"){
			if($allowedFormBoxes['59']) //ISPC -1757
			{
			    $detailscookies .="grow37";
			}
			
			$this->view->detailscookies = "'" . $detailscookies . "'";
			/* ----------------------------------------------- */
			$Nursing_practicing_previleges = new Modules();
			$nursing_practicing = $Nursing_practicing_previleges->checkModulePrivileges("63", $logininfo->clientid);

			if($nursing_practicing)
			{
				$usergroup = new Usergroup();
				$MasterGroups = array("5"); //Pflege master group
				$usersgroups = $usergroup->getUserGroups($MasterGroups);

				if(count($usersgroups) > 0)
				{
					foreach($usersgroups as $group)
					{
						$groupsarray[] = $group['id'];
					}
				}
				$usrs = new User();
				$usersPflegeArray = $usrs->getuserbyGroupId($groupsarray, $clientid, true);
				$nurse_array['0'] = "--";

				foreach($usersPflegeArray as $puser)
				{
					$nurse_array[$puser['id']] = $puser['last_name'] . ", " . $puser['first_name'];
				}

				$this->view->nurse_practicing_array = $nurse_array;
				$this->view->nurse_practicing_visibility = 1;
			}
			else
			{
				$this->view->nurse_practicing_visibility = 0;
			}

			/*			 * ******************** Blocks ************************** */
			/*$frm = new ExtraForms();
			$this->view->displayfamilydoc = $frm->getClientPersmission($clientid, 9);
			$this->view->displaypharmacy = $frm->getClientPersmission($clientid, 26);
			$this->view->displayhealthinsurance = $frm->getClientPersmission($clientid, 10);
			$this->view->displaymobility = $frm->getClientPersmission($clientid, 5);
			$this->view->displaypatientlives = $frm->getClientPersmission($clientid, 1);
			$this->view->displaylivingwill = $frm->getClientPersmission($clientid, 6);
			$this->view->displaycarelevel = $frm->getClientPersmission($clientid, 7);
			$this->view->displayreligions = $frm->getClientPersmission($clientid, 8);
			$this->view->displaysupply = $frm->getClientPersmission($clientid, 4);
			$this->view->displaymoreinformation = $frm->getClientPersmission($clientid, 3);

			$fdoc = Doctrine_Query::create()
				->select('*')
				->from('ExtraFormsClient')
				->where('clientid =' . $clientid . '')
				->andWhere('formid =1');
			$mncd = $fdoc->execute();

			if($mncd)
			{
				$fcarr = $mncd->toArray();

				if(count($fcarr) > 0)
				{
					$allowedform = "allowed";
				}
				else
				{
					$allowedform = "";
				}
			}
			$this->view->allowedform = $allowedform;*/
			/*			 * ******************** ////// ************************** */

			if(!$this->getRequest()->isPost())
			{
				$this->view->admission_date = date("d.m.Y H:i:s", time());
				$this->view->adm_timeh = date("H");
				$this->view->adm_timem = date("i");
			}
			else
			{
				$this->view->adm_timeh = $_POST['rec_timeh'];
				$this->view->adm_timem = $_POST['rec_timem'];
			}

			$logininfo = new Zend_Session_Namespace('Login_Info');

			if($logininfo->clientid)
			{
				$clientid = $logininfo->clientid;
			}

			/* ----------------------Get master group for user------------------------------ */

			$DoctorGroups = array("4", "9"); //4 - Arzt, 9 - Hausarzt
			$NurseGroups = array("5"); //5-Pflege

			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$groupid = $userdata[0]['groupid'];

			$ug = new Usergroup();
			$user_master_groups = $ug->getMasterGroup($groupid);

			if(in_array($user_master_groups, $DoctorGroups))
			{
				$user_type = 'doc';
			}
			elseif(in_array($user_master_groups, $NurseGroups))
			{
				$user_type = 'nurse';
			}
			else
			{
				$user_type = 'other';
			}
			/* ---------------------------------------------------- */
			$Kontaktaufnahmecprevileges = new Modules();
			$Kontaktaufnahme = $Kontaktaufnahmecprevileges->checkModulePrivileges("62", $logininfo->clientid);

			if($Kontaktaufnahme)
			{
				$order = new OrderAdmission();
				$client_orderadmissions = $order->getOrderAdmissionbyClient($logininfo->clientid);

				$orderer_array = array("" => "");

				foreach($client_orderadmissions as $key => $val)
				{
					$orderer_array[$val['id']] = $val['orderer'];
				}

				if(!empty($client_orderadmissions))
				{
					$this->view->Kontaktaufnahme_select = 1;
					$this->view->Kontaktaufnahme = $orderer_array;
				}
			}
			else
			{
				$this->view->Kontaktaufnahme_select = 0;
			}

			/* ---------------------------------------------------- */
			//	special_assistance_option
			$special_assistance_previleges = new Modules();
			$special_medical_assistance = $special_assistance_previleges->checkModulePrivileges("68", $logininfo->clientid);

			if($special_medical_assistance)
			{
				$this->view->special_assistance_option = 1;
			}
			else
			{
				$this->view->special_assistance_option = 0;
			}

		
			/*			 * ************* Diagnosis type**************** */
			//Maria:: Migration CISPC to ISPC 22.07.2020            
			$hs_type_module = $modules->checkModulePrivileges("81", $clientid);
            $this->view->has_hs_module = $hs_type_module;
            $pbd_type_module = $modules->checkModulePrivileges("1005", $clientid);
            $this->view->has_pbd_module = $pbd_type_module;
            
			$abb = "'HD','ND'";
            if($hs_type_module){
                $abb .= ",'HS'";

            }
            if($pbd_type_module){
                $abb .= ",'PBD'";
            }
			
			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($clientid, $abb);

			$this->view->dtypearray = $darr;
			$this->view->jdarr = json_encode($darr);
			/*			 * ********************************** */

			$a_diagno = array();
			if(is_array($_POST['hidd_diagnosis']))
			{
				foreach($_POST['hidd_diagnosis'] as $key => $val)
				{
					$a_diagno[$key]['diagnosis'] = $_POST['diagnosis'][$key];
					$a_diagno[$key]['icdnumber'] = $_POST['icdnumber'][$key];
					$a_diagno[$key]['hidd_diagnosis'] = $_POST['hidd_diagnosis'][$key];
					$a_diagno[$key]['icd'] = $_POST['icd'][$key];
					$a_diagno[$key]['hidd_tab'] = $_POST['hidd_tab'][$key];
					$a_diagno[$key]['meta_title'] = $_POST['meta_title'][$key];
				}
			}
			else
			{
				if($logininfo->clientid == 36)//client siwol
				{
					$fdoc = Doctrine_Query::create()
						->select('*')
						->from('Diagnosis')
						->where('id = 61197');
					$mncd = $fdoc->execute();

					if($mncd)
					{
						$diag = $mncd->toArray();
					}

					$a_diagno[0]['diagnosis'] = $diag[0]['description'];
					$a_diagno[0]['icdnumber'] = $diag[0]['icd_primary'];
					$a_diagno[0]['hidd_diagnosis'] = $diag[0]['id'];
					$a_diagno[0]['icd'] = $_POST['icd'][$key];
					$a_diagno[0]['hidd_tab'] = "dig";
					$a_diagno[0]['diagnosis_type_id'] = $darr[1]['id'];
					$ival = 1;
				}
				else
				{
					$ival = 0;
				}

				for($i = $ival; $i < 3; $i++)
				{
					$a_diagno[$i]['diagnosis'] = "";
					$a_diagno[$i]['icdnumber'] = "";
					$a_diagno[$i]['hidd_diagnosis'] = "";
					$a_diagno[$i]['icd'] = "";
					$a_diagno[$i]['hidd_tab'] = "";
					$a_diagno[$i]['meta_title'] = "";
					$a_diagno[$i]['diagnosis_type_id'] = "";
				}
			}

			$this->view->jscount = count($a_diagno);
			$grid = new Pms_Grid($a_diagno, 1, count($a_diagno), "listadmissiondiagnosis.html");
			$grid->gridview->dtypearray = $darr;
			$this->view->diagno = $grid->renderGrid();
			$this->view->rowcount = count($a_diagno);

			if(is_array($_POST['hidd_cid']))
			{
				$ipid = Doctrine_Query::create()
					->select('*')
					->from('ContactPersonTempMaster')
					->where('id in(' . join(",", $_POST['hidd_cid']) . ')');

				$track = $ipid->execute();
				$a_cnts = $track->toArray();

				$grid = new Pms_Grid($a_cnts, 1, count($a_cnts), "contacttemp.html");
				$this->view->contactgrid = $grid->renderGrid();
				$this->view->rowcount = count($a_cnts);
			}

			//medication start
			$a_medic = array();
			if(is_array($_POST['hidd_medication']))
			{
				foreach($_POST['hidd_medication'] as $key => $val)
				{
					$a_medic[$key]['medication'] = $_POST['medication'][$key];
					$a_medic[$key]['hidd_medication'] = $_POST['hidd_medication'][$key];
					$a_medic[$key]['dosage'] = $_POST['dosage'][$key];
					$a_medic[$key]['comments'] = $_POST['comments'][$key];
				}
			}
			else
			{
				for($i = 0; $i < 6; $i++)
				{
					$a_medic[$i] = array('cnt' => $i);
				}
			}

			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic), "medicationgrid.html");
			$this->view->medicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//medication end
			//bedarf medication start
			$imax = (count($b_medic) + (9999) + (6));
			if(is_array($_POST['add']['hidd_medication']))
			{
				foreach($_POST['add']['hidd_medication'] as $key => $val)
				{
					$key_incr = (count($b_medic) + (9999));

					$b_medic[$key]['medication'] = $_POST['add']['medication'][$key];
					$b_medic[$key]['hidd_medication'] = $_POST['add']['hidd_medication'][$key];
					$b_medic[$key]['dosage'] = $_POST['add']['dosage'][$key];
					$b_medic[$key]['comments'] = $_POST['add']['comments'][$key];
					$b_medic[$key]['cnt'] = $key_incr;
				}
			}
			else
			{
				for($ix = (count($b_medic) + (9999)); $ix < $imax; $ix++)
				{
					$b_medic[$ix] = array('cnt' => $ix);
				}
			}
			$this->view->jsbmedcount = (count($b_medic) + (9999));
			$grid = new Pms_Grid($b_medic, 1, (count($b_medic) + (9999)), "medicationbedarfgrid.html");
			$this->view->b_medicgrid = $grid->renderGrid();
			//bedarf medication end

			/*			 * ********************************************************************************* */

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$clientname = "<span class = 'err'>Please Select Client Before Filling Form</span>";

			if($clientid > 0)
			{
				$clientarr = Pms_CommonData::getClientData($clientid);
				$clientname = $clientarr[0]['client_name'];
			}
			$this->view->clientname = $clientname;

			if($this->getRequest()->isPost())
			{
				$patient_form = new Application_Form_PatientMaster();
				$contact_form = new Application_Form_ContactPersonMaster();
				$patient_caseform = new Application_Form_PatientCase();
				$patient_locationform = new Application_Form_PatientLocation();
				$patient_diagnosis = new Application_Form_PatientDiagnosis();
				$symptomaster_form = new Application_Form_SymptomatologyMaster();
				$symptomatology_form = new Application_Form_Symptomatology();
				$patient_insurance_form = new Application_Form_PatientHealthInsurance();
				$patient_epidipid_form = new Application_Form_EpidIpidMapping();
				$patient_medication_form = new Application_Form_Medication();
				$patient_medic_form = new Application_Form_PatientDrugPlan();
				$diagno_text = new Application_Form_DiagnosisText();
				$patientcourse = new Application_Form_PatientCourse();
				$patdiagnometa = new Application_Form_PatientDiagnosisMeta();
				$sapvver = new Application_Form_SapvVerordnung();
				/* extra forms */
				$pat_lives = new Application_Form_PatientLives();
				$pat_supply = new Application_Form_PatientSupply();
				$pat_mobility = new Application_Form_PatientMobility();
				$pat_moreinfo = new Application_Form_PatientMoreInfo();
				$pat_maintainance = new Application_Form_PatientMaintainanceStage();
				$pat_religion = new Application_Form_PatientReligions();
				$pat_crysis = new Application_Form_PatientCrisisHistory();
				
				
				$docform = new Application_Form_Familydoctor();
				
				$modules = new Modules();
				if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge ISPC - 1483
				{
				    $acknowledge = "1";
			        $_POST['skip_trigger'] = 1;
				}
				else
				{
				    $_POST['skip_trigger'] = 0;
				    $_POST['add_sets'] = "1";
				}
				//print_r($_POST); exit;
				$a_post = $_POST;
				$a_post['clientid'] = $clientid;
				$this->ptnval = $patient_form->validate($a_post);
				$this->caselocation = $patient_locationform->validate($a_post);
				$this->insurance = $patient_insurance_form->validate($a_post);
				$this->diagnosis = $patient_diagnosis->validate($a_post);
				$this->medic = $patient_medic_form->validate($a_post);
				$this->casef = $patient_caseform->validate($a_post);
				

				if( strlen($_POST['familydoc_id']) > 0)
				{				
				    $this->fam_doc_validate = $docform->validateAdm($a_post);
				} else {
				    $this->fam_doc_validate = true;
				}
				

				if(strlen($_POST['verordnet_von']) > 0)
				{
					$this->casesapv = $sapvver->validate($a_post);
				}
				else
				{
					$this->casesapv = true;
				}
				/*				 * *********************************************************************** */

				if($this->ptnval
				    && $this->caselocation 
				    && $this->casef 
				    && $this->insurance 
				    && $this->casesapv 
				    && $this->fam_doc_validate)
				{
/* 					if($_POST['hidd_docid'] < 1)
					{

						if(strlen($_POST['familydoc_id']) > 0)
						{
							$a_post['doclast_name'] = $_POST['familydoc_id'];
							
							$a_post['fd_title'] = $_POST['fd_title'];
							$a_post['fd_last_name'] = $_POST['fd_last_name'];
							$a_post['fd_first_name'] = $_POST['fd_first_name'];
							$a_post['fd_salutation'] = $_POST['fd_salutation'];
							
							$a_post['indrop'] = 1;
							$docinfo = $docform->InsertDataFromAdmission($a_post);
							$a_post['hidd_docid'] = $docinfo->id;
						}
					}
 */
					if($_REQUEST['cnt'] == '1')
					{
						print_r($a_cnts);
					}

					
					// TODO-1303
					/* foreach($a_cnts as $cnt_nr => $cnts_values)
					{
						if($cnts_values['cnt_kontactnumber'] == '1')
						{
							$kontact_number[$cnts_values['id']] = $cnts_values['cnt_phone'];
						}
					} 

					if($_REQUEST['cnt'] == '1')
					{
						print_r($kontact_number);
						print_r("\n");
						print_r(end($kontact_number));
						exit;
					}

					if(!empty($kontact_number))
					{
						$a_post['kontactnumber'] = Pms_CommonData::aesEncrypt(end($kontact_number));
						$a_post['kontactnumbertype'] = "2";
					}
					else
					{
						$a_post['kontactnumber'] = Pms_CommonData::aesEncrypt($_POST['phone']);
					}
					*/
					
					$patient = $patient_form->InsertData($a_post);
					$a_post['ipid'] = $patient->ipid;
					$a_post['cnts'] = $a_cnts;


					// Patient admission course - admission date START
					$admission_date_course = "Aufnahmezeitpunkt : " . date('d.m.Y', strtotime($a_post['admission_date'])) . " " . $a_post['adm_timeh'] . "." . $a_post['adm_timem'] . " Uhr";
					$cust = new PatientCourse();
					$cust->ipid = $a_post['ipid'];
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($admission_date_course);
					//ISPC-2691 Carmen 04.11.2020
					$cust->tabname = Pms_CommonData::aesEncrypt("aufnahme_date");
					//--
					$cust->user_id = $userid;
					$cust->save();
					// Patient admission course - admission date END


					$a_post['sapv_order'] = "1";
					$ver = $sapvver->InsertData($a_post);
					$contact_form->InsertData($a_post);

					//get health insurance subdivizions
					$symperm = new HealthInsurancePermissions();
					$divisions = $symperm->getClientHealthInsurancePermissions($clientid);
					
					if($divisions)
					{
						$subdivizions_permissions = 1;
					}
					else
					{
						$subdivizions_permissions = 0;
					}
					
					$a_post['subdivizions_permissions'] = $subdivizions_permissions;
	
						//selected healthinsurance details
					$hi_details = HealthInsurance::get_multiple_healthinsurances(array($a_post['hdn_companyid']));

					$a_post['ins_insurance_provider'] = $hi_details[$a_post['hdn_companyid']]['insurance_provider'];
					$a_post['ins_phone'] = $hi_details[$a_post['hdn_companyid']]['phone'];
					$a_post['ins_phone2'] = $hi_details[$a_post['hdn_companyid']]['phone2'];
					$a_post['ins_phonefax'] = $hi_details[$a_post['hdn_companyid']]['phonefax'];
					$a_post['ins_zip_mailbox'] = $hi_details[$a_post['hdn_companyid']]['zip_mailbox'];
					$a_post['ins_post_office_box'] = $hi_details[$a_post['hdn_companyid']]['post_office_box'];
					$a_post['ins_post_office_box_location'] = $hi_details[$a_post['hdn_companyid']]['post_office_box_location'];
					$a_post['ins_email'] = $hi_details[$a_post['hdn_companyid']]['email'];
					$a_post['ins_comment'] = $hi_details[$a_post['hdn_companyid']]['comments'];

					if(!empty($a_post['hdn_companyid']))
					{
						$hisub = new HealthInsuranceSubdivisions();
						$health_insurance_subdivision = $hisub->getClientHealthInsuranceSubdivisions($a_post['hdn_companyid']);
						$a_post['subdivizion'] = $health_insurance_subdivision;
					}
					
					$patient_insurance_form->InsertData($a_post);
					$pcase = $patient_caseform->InsertData($a_post);
					$a_post['epid'] = $pcase->epid;
					$a_post['case_id'] = $pcase->id;
					

					$epid_result = $patient_epidipid_form->InsertData($a_post);

					if($epid_result  === false){
// 						$patient_form->assignErrorMessages();
						$this->view->errorclass = "err";
						$this->retainValues($_POST);
						
					}
					// FAMILY DOCTOR 
					if($_POST['hidd_docid'] < 1 && strlen($_POST['familydoc_id']) > 0)
					{
				        $family_doctor = null;
				        $a_post['doclast_name'] = $_POST['familydoc_id'];
				
				        $a_post['fd_title'] = $_POST['fd_title'];
				        $a_post['fd_last_name'] = $_POST['fd_last_name'];
				        $a_post['fd_first_name'] = $_POST['fd_first_name'];
				        $a_post['fd_salutation'] = $_POST['fd_salutation'];
				
				        $a_post['indrop'] = 1;
				        $docinfo = $docform->InsertDataFromAdmission($a_post,$a_post['ipid']);
				        $a_post['hidd_docid'] = $docinfo->id;
				        $family_doctor = $docinfo->id;
				
				        if ($family_doctor){
				            //Update PM Insert familydoctor
				            $p_master = Doctrine::getTable('PatientMaster')->findOneByIpid($a_post['ipid']);
				            $p_master->familydoc_id = $family_doctor;
				            $p_master->save();
				             
				        }
					}
					
					
					
					
						//die_ancuta("skdnfljkdsfsd",$epid_result);
					if($_POST['keyuser'] != 0)
					{
						$allow = new PatientUsers();
						$allow->clientid = $logininfo->clientid;
						$allow->ipid = $patient->ipid;
						$allow->userid = $_POST['keyuser'];
						$allow->iskeyuser = 1;
						$allow->create_date = date("Y-m-d H:i:s", time());
						$allow->save();
					}

//				Auftrag bei Kontaktaufnahme:
					if($Kontaktaufnahme && $_POST['orderadmission'] > 0)
					{
						$cust = new PatientCourse();
						$cust->ipid = $patient->ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt('Auftrag bei Kontaktaufnahme: ' . $orderer_array[$_POST['orderadmission']]);
						$cust->user_id = $logininfo->userid;
						$cust->save();
					}

					if($_POST['location_id'] > 0)
					{
						$location = new Application_Form_PatientLocation();
						$a_post['ipid'] = $_POST['location_id'];
						$a_post['ipid'] = $patient->ipid;
						$a_post['valid_from'] = $_POST['admission_date'];
						$newpatloc = $location->InsertDataFromAdmission($a_post);
                //ISPC-1547 Lore 13.08.2019
						$ltyp = new Locations();
						$loctype = $ltyp->getLocationbyId($_POST['location_id']);
						$locationtype = $loctype[0]['location_type'];
						if($locationtype == '1'){
						    $inout = '';
						    $messages = new Messages();
						    $notification_change_location = $messages->change_location_notification($patient->ipid, $userid, $inout, "patientmasteradd");
						} 
				//--
					}

//radu formone active time patient (readmission new table) start
					$admis_date = explode(".", $a_post['admission_date']);
					if(strlen($a_post['admission_date']) > 0)
					{
						$admission_date = $admis_date[2] . "-" . $admis_date[1] . "-" . $admis_date[0] . " " . $a_post['adm_timeh'] . ":" . $a_post['adm_timem'];
					}

					$patientreadmission = new PatientReadmission();
					$patientreadmission->user_id = $logininfo->userid;
					$patientreadmission->ipid = $patient->ipid;
					$patientreadmission->date = $admission_date;
					$patientreadmission->date_type = "1"; //1 =admission-readmission 2- discharge
					$patientreadmission->special_medical_assistance = $_POST['special_medical_assistance'];
					//Erstkontakt durch
					//TODO-3825 Ancuta 08.02.2021
// 					if($first_contact == "1" && $_POST['first_contact'] > 0)
					if($_POST['first_contact'] > 0)
					{
    					$patientreadmission->first_contact = $_POST['first_contact'];
					}
					$patientreadmission->save();
					
					$Claudiu_PatientReadmission = array(
        		        'admission_date' => $patientreadmission,
        		        'discharge_date' => new stdClass()
        		    ); 
		    
//radu formone active time patient (readmission new table) end

					/* ############################### */
					/* Save user - for Admission Action E/EH */
					$ltyp = new Locations();
					$loctype = $ltyp->getLocationbyId($_POST['location_id']);
					$locationtype = $loctype[0]['location_type'];

					if($locationtype == '2' && $_POST['isstandby'] == 0)
					{
						$s_post['admission_status'] = 'h'; // h =  hospiz admission
					}
					else
					{
						$s_post['admission_status'] = 'n'; // n =  normal admission
					}

					$s_post['ipid'] = $patient->ipid;
					$s_post['date'] = $admission_date;
					$s_post['admission_type'] = 'a'; // a = admission / r =  readmission
					$s_post['user_id'] = $userid;
					$s_post['user_type'] = $user_type;

					$user2adm = new Application_Form_User2admission();

					if($user_type != 'other')
					{
						$user2admission = $user2adm->InsertData($s_post);
					}

					if($_POST['nurse_practicing'] && $_POST['nurse_practicing'] != '0' && $_POST['nurse_practicing'] != $userid)
					{
						$s_post['user_type'] = 'nurse';
						$s_post['user_id'] = $_POST['nurse_practicing'];
						$user2admm = $user2adm->InsertData($s_post);
					}

					/* ############################### */
					/* Save user - for Admission Action E/EH */
					foreach($_POST['diagnosis'] as $key => $val)
					{
						if(strlen($_POST['diagnosis'][$key]) > 0 && strlen($_POST['hidd_diagnosis'][$key]) < 1)
						{
							$a_post['newdiagnosis'][$key] = $_POST['diagnosis'][$key];
							$a_post['newdiagnosistype'][$key] = $_POST['dtype'][$key];
							$a_post['newdiagnosisicd'][$key] = $_POST['icdnumber'][$key];
						}
					}

					if(is_array($a_post['newdiagnosis']))
					{
						$dt = $diagno_text->InsertData($a_post);
						foreach($dt as $key => $val)
						{
							$a_post['newhidd_diagnosis'][$key] = $val->id;
						}
					}

					/*					 * **************************************** */
					foreach($_POST['medication'] as $key => $val)
					{
						if(strlen($_POST['medication'][$key]) > 0 && strlen($_POST['hidd_medication'][$key]) < 1)
						{
							$a_post['newmedication'][$key] = $_POST['medication'][$key];
						}
					}

					if(is_array($a_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($a_post);
						foreach($dts as $key => $dt)
						{
							$a_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					/*					 * ***************Bedarf Medication************************* */
					foreach($_POST['add']['medication'] as $key => $val)
					{
						if(strlen($_POST['add']['medication'][$key]) > 0 && strlen($_POST['add']['hidd_medication'][$key]) < 1)
						{
							$a_post['add']['newmedication'][$key] = $_POST['add']['medication'][$key];
						}
					}

					if(is_array($a_post['add']['newmedication']))
					{

						$dts = $patient_medication_form->InsertNewData($a_post['add']);

						foreach($dts as $key => $dt)
						{
							$a_post['add']['newhidd_medication'][$key] = $dt->id;
						}
					}
					/*					 * **************************************** */
					$a_post['diagno_abb'] = "'AD'";
					$patient_medic_form->InsertData($a_post);

					$a_post['add']['isbedarfs'] = 1;
					$a_post['add']['ipid'] = $a_post['ipid'];

					$patient_medic_form->InsertData($a_post['add']);

					$patient_diagnosis->insertMetaData($a_post);
					$diagnoarr = $patient_diagnosis->InsertData($a_post);
					$patdiagnometa->InsertData($a_post);
					$pat_lives->InsertData($a_post);
					$pat_supply->InsertData($a_post);
					$pat_mobility->InsertData($a_post);
					$pat_moreinfo->InsertData($a_post);
					$pat_maintainance->InsertData($a_post);
					$pat_religion->InsertData($a_post);
					$pat_crysis->InsertData($a_post);

					//if ($show_dgp_block == "1") {
					if($allowedFormBoxes['59']) //ISPC -1757
					{
    					
					    $kern_form = new Application_Form_DgpKern(array(
    					    '_PatientReadmission_OBJ' => $Claudiu_PatientReadmission
    					));
    					
    					$dgp_post = $a_post['dgp']['kern']['admission'];
    					
    					$dgp_post['course'] = 1;
    					
    					if( strlen($dgp_post['ecog']) > 0 
    							|| !empty($dgp_post['begleitung']) 
    							|| strlen($dgp_post['kontaktes']) > 0 
    							|| strlen($dgp_post['aufwand_mit']) > 0
    							|| strlen($dgp_post['pverfuegung']) > 0
    							|| strlen($dgp_post['vollmacht']) > 0
    							|| strlen($dgp_post['betreuungsurkunde']) > 0
    							|| strlen($dgp_post['acp']) > 0
    						)
    					{
        					$kern_form->insert_from_admission($dgp_post, $a_post['ipid']);
    					}
					}
					
					//send admission notification
					if($patient->ipid)
					{
						$messages = new Messages();
						$notification_admission = $messages->admission_notification($patient->ipid, $userid);
					}
					
					//ISPC-2396 Carmen 09.10.2019
					if($a_post['clienticonsaddtoadmission'] && $patient->ipid)
					{
						foreach($a_post['clienticonsaddtoadmission']['client_icon'] as $icon_id)
						{
							$data[] = [
								'ipid' => $patient->ipid,
								'icon_id' => $icon_id
							];
						}
						
						//insert the icons for the patient at admission time
						$collection = new Doctrine_Collection('IconsPatient');
						$collection->fromArray($data);
						$collection->save();
					}

					$client_data = Pms_CommonData::getClientData($clientid);
					$automatically_assign_users = $client_data['0']['automatically_assign_users']; // ISPC-871 client setting auto assign user

					
					// ISPC-2491 Ancuta 29.11.2019
					$previleges = new Modules();
					$module207_allow_todos= $previleges->checkModulePrivileges("207", $clientid);
					if($module207_allow_todos)
					{
					    $client_todos_obj= new ClientTodos();
					    $send_todos = $client_todos_obj->send_client_todos($clientid,array($patient->ipid),"patient_admission", $_POST['isstandby']);//TODO-3332 Carmen  Added $_POST['isstandby'] as param
					}
					//--
					
					
					$group_id = $logininfo->groupid;
					
					//bypass if master group has permission to skip the patient message redirect
					$master_group_id = Usergroup::getMasterGroup($group_id);
					//$groupbypass = GroupDefaultVisibility::getClientVisibilityByGroup($master_group_id, $clientid);
					//ISPC-2482 Lore 22.11.2019
					$groupbypass = GroupDefaultVisibility::getClientVisibilityByGroup($master_group_id, $clientid, $group_id); 
					
						
					if(!$groupbypass && $automatically_assign_users == "0")
					{
						$this->_redirect(APP_BASE . "patient/patientmessage");
					}

					$userdata = Pms_CommonData::getUserData($logininfo->userid);
					$groupid = $userdata[0]['groupid'];
					$ug = new Usergroup();
					$ugdata = $ug->getUserGroupData($groupid);
					$groupname = $ugdata[0]['groupname'];

					$doctor_master_groups = array("4","9"); // 4 - Arzt, 9 - Hausarzt
					
// 					if(trim($groupname == "Doctor") || trim($groupname == "Hausarzt") || trim($groupname == "Doktor") || trim($groupname == "Arzt") || trim(strtolower($groupname) == "qpa") || $logininfo->usertype == "SA")
					if( in_array($master_group_id,$doctor_master_groups) || $logininfo->usertype == "SA")
					{
						if($_POST['srd'] == '1')
						{
							$this->_redirect(APP_BASE . "patientnew/patientdetails?id=" . Pms_Uuid::encrypt($patient->id));
						}
						else
						{
							$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . Pms_Uuid::encrypt($patient->id));
						}
					}
					else
					{
						$this->_redirect(APP_BASE . "patient/patienttodoctor?epid=" . Pms_Uuid::encrypt($a_post['epid']));
					}
				}
				else
				{
					$patient_form->assignErrorMessages();
					$patient_caseform->assignErrorMessages();
					$patient_locationform->assignErrorMessages();
					$patient_diagnosis->assignErrorMessages();
					$sapvver->assignErrorMessages();
					$patient_insurance_form->assignErrorMessages($_POST);
					$docform->assignErrorMessages();
					
					$this->view->errorclass = "err";
					$this->retainValues($_POST);
					$this->view->verordnet = $_POST['verordnet'];
					$this->view->isstandby = $_POST['isstandby'];
					$this->view->error_present = '1';
				}
			} //end post

			//ISPC-2612 Ancuta 27.06.2020
			$client_is_follower_ref = ConnectionMasterTable::_check_client_connection_follower('PatientReferredBy',$logininfo->clientid);
			
			$drop = Doctrine_Query::create()
				->select('*')
				->from('PatientReferredBy')
				->where("clientid =" . $logininfo->clientid)
				->andWhere('isdelete=0');
				if($client_is_follower_ref){ //ISPC-2612 Ancuta 27.06.2020
			        $drop->andWhere('connection_id is NOT null');
			        $drop->andWhere('master_id is NOT null');
                }
			$drop->orderBy('referred_name ASC');
			$droparray = $drop->fetchArray();

			$referedby = array("" => "");
			foreach($droparray as $key => $val)
			{
				$referedby[$val['id']] = $val['referred_name'];
			}

			$this->view->referredbyarray = $referedby;

			$insurancedrop = Doctrine_Query::create()
				->select('*')
				->from('KbvKeytabs')
				->where("valid=0 and sn='S_KBV_VERSICHERTENSTATUS'")
				->orderBy('dn ASC');
			$statusdropexecarray = $insurancedrop->fetchArray();

			$dropoid = array("" => $this->view->translate("pleaseselect"));
			foreach($statusdropexecarray as $key => $val)
			{
				$dropoid[$val['v']] = $val['dn'];
			}
			$this->view->status_array = $dropoid;
			
			//ISPC-2396 Carmen 08.10.2019
			$clicons = new IconsClient();
			$cliconsarr = $clicons->get_client_icons($clientid, false, 'patient');
			$cliccheckbut = count($cliconsarr);
			//$label_text = array_column($cliconsarr, 'name');
			foreach($cliconsarr as $icon)
			{
				if($icon['image'] != '')
				{
					$label_text[] = '<img src="'.APP_BASE.'/icons_system/'.$icon['image'].'" />' . '<div>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;' . $icon['name'] . '</div>';
				}
				else
				{
					$label_text[] = '<div class="custom_icon_assigned icondiv" style="background: #' .$icon['color'] . '"></div>' . '<div>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;' . $icon['name'] . '</div>';
				}
			}
			$icons_ids = array_column($cliconsarr, 'id');
			
			//client icon group button
			$groupbuticon = array(
				'name' => 'client_icon',
				'type' => 'checkbox',
				//'alignment' => 'vertical',
				'butnr' => $cliccheckbut,
				'first_but_pos_left' => '19',
				'first_but_pos_top' => '76',
				'first_but_pos_right' => '0',
				'first_but_pos_bottom' => '0',
				'x_offset' => array('0', '0', '0'),
				'y_offset' => array('0', '46', '92'),
				'width_dummy' => '26',
				'height_dummy' => '26',
				//'label_text' => array('Unfall, Unfallfolge', 'Arbeitsunfall, Berufskrankheit', 'Versorgungsleiden(z.B. BVG)'),
				'label_text' => $label_text,
				'label_wrap' => array(false, false, false),
				'x_offset_label' => array('10', '10','10'),
				'label_width' => array('250', '250', '250'),
				'label_height' => array('25', '25', '25'),
				'has_external_obj' => false,
				'label' => true,
				'has_dummy' => false,
				'values' => $icons_ids,
				//'class' => 'rcbyrightv'
		);
			
		$elementsBelongTo = 'clienticonsaddtoadmission';
		
		$groupbut_details_form = $this->_init_group($groupbuticon, $elementsBelongTo, $values);
		$groupbut_details_form->clearDecorators()->setDecorators( array(
				'FormElements',
				array(array('ttag' => 'HtmlTag'), array('tag'=>'table', 'style' => 'width: 100%;')),
				array('Fieldset', array('class' => 'delicon')),
				
		));
		$this->view->grupbutclicons = $groupbut_details_form;
			
		//ISPC-2396 Carmen 08.10.2019
			
			setcookie("openmenu", "m18_menu", "", "/", "www.ispc-login.de");
		}

		public function patientcourseAction()
		{

			$start = microtime(true);
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ######################################################### */

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patientcourse', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->view->style = 'none;';
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('Patientcourse', $logininfo->userid, 'canadd');
				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}
			}
			else
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('Patientcourse', $logininfo->userid, 'canadd');
				if(!$return)
				{
					$this->view->coursestyle = 'none;';
				}
			}


			$this->view->patcrclass = "active";
			$this->view->act = "patientcourse/patientcourse?id=" . $_GET['id'];
			$this->view->callcourse = "";
			$this->view->curr_date = date("d.m.Y", time());
			$this->view->pid = $_GET['id'];

			if($this->getRequest()->isPost())
			{
				$course_form = new Application_Form_PatientCourse();

				if($course_form->validate($_POST))
				{
					$course_form->InsertData($_POST);
					$datainserted = 1;
					$courseSession = new Zend_Session_Namespace('courseSession');
					$courseSession->coursetype = array();
				}
				else
				{
					$datainserted = 0;
					$course_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
				$courseSession = new Zend_Session_Namespace('courseSession');
				$courseSession->coursetype = array();
			}

			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);

			$cs = new Courseshortcuts();
			$ltrarray = $cs->getFilterCourseData();
			$letterarray = array();
			$lettersforjs = array();

			foreach($ltrarray as $key => $value)
			{
				$letterarray[$value['shortcut']] = $value['course_fullname'];
			}

			$js = new Courseshortcuts();
			$jsarr = $js->getFilterCourseData();

			foreach($jsarr as $key => $value)
			{
				$lettersforjs[] = $value['shortcut'];
			}

			$this->view->ltrjs = json_encode($lettersforjs);

			$patient = Doctrine_Query::create()
				->select("distinct(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "'))")
				->from('PatientCourse')
				->where('ipid ="' . $ipid . '"')
				->orderBy('course_date ASC');
			$patientexec = $patient->execute();
			$patientarray = $patientexec->toArray();

			$finalarr = array();
			$hotkeys = array();
			$postdisplay = array();
			$postcnt = 0;
			foreach($patientarray as $key => $value)
			{
				$distval = $value['distinct'];

				$shorts = new Courseshortcuts();
				$coursearr = $shorts->getCourseDataByShortcut($distval);

				if($_POST[$distval] == 1)
				{
					$postcnt++;
					$chk = 1;
					$chkval.= $comma . "'" . $distval . "'";
					$comma = ",";
					$postdisplay[$distval] = 1;
				}
				else
				{
					$chk = 0;
					$postdisplay[$distval] = 0;
				}

				if($coursearr[0]['isfilter'] == 1)
				{
					array_push($finalarr, array(
						'cletter' => $distval,
						'ctype' => $letterarray[$distval],
						'font_color' => $coursearr[0]['font_color'],
						'isbold' => $coursearr[0]['isbold'],
						'isitalic' => $coursearr[0]['isitalic'],
						'isunderline' => $coursearr[0]['isunderline'],
						'chk' => $chk
					));
				}
				$hotkeys[] = $distval;
			}

			$this->view->hotkeysjs = json_encode($hotkeys);
			$this->view->checkcounter = count($finalarr);
			$grid = new Pms_Grid($finalarr, 1, count($finalarr), "listcoursechecks.html");
			$this->view->gridchecks = $grid->renderGrid();

			$pcourse = new PatientCourse();
			$allblocks = $pcourse->getCourseData($decid, 0);

			$grid = new Pms_Grid($allblocks, 1, count($allblocks), "listpatientcourse.html");
			$this->view->gridcourse = $grid->renderGrid();

			if($postcnt > 0)
			{
				$this->view->callcheck2 = "check2()";
			}
			else
			{
				$this->view->callcheck2 = '""';
			}
			$courseSession = new Zend_Session_Namespace('courseSession');

			if($courseSession->patientId != $decid)
			{
				$courseSession->patientId = $decid;
				$courseSession->coursetype = array();
			}

			if(is_array($_POST['course_type']) && $datainserted == 0)
			{
				foreach($_POST['course_type'] as $key => $val)
				{
					$courses[$key]['course_type'] = $_POST['course_type'][$key];
					$courses[$key]['course_title'] = $_POST['course_title'][$key];
				}
			}
			else
			{
				if(!empty($courseSession->coursetype))
				{
					$courses = $courseSession->coursetype;
				}
				else
				{
					for($i = 0; $i < 1; $i++)
					{
						$courses[$i]['course_type'] = "";
						$courses[$i]['course_title'] = "";
					}
				}
			}

			$this->view->coursecnt = count($courses);
			$grid1 = new Pms_Grid($courses, 1, count($courses), "listcourseSession.html");
			$this->view->gridcoursetaks = $grid1->renderGrid();

			$cs = new Courseshortcuts();
			$shortcutarray = $cs->getCourseData();
			$shortgrid = new Pms_Grid($shortcutarray, 1, count($shortcutarray), "CourseShortcuts.html");
			$this->view->cshortcuts = $shortgrid->renderGrid();

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ***************************************** */
			$end = microtime(true);
		}

		public function patienthospizcourseAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$this->view->patcrclass = "active";
			$this->view->act = "patient/patienthospizcourse?id=" . $_GET['id'];
			$this->view->callcourse = "";
			$this->view->curr_date = date("d.m.Y", time());
			$this->view->pid = $_GET['id'];

			if($this->getRequest()->isPost())
			{
				$hospizcourse_form = new Application_Form_PatientHospizCourse();

				if($hospizcourse_form->validate($_POST))
				{
					$hospizcourse_form->InsertData($_POST);
					$datainserted = 1;
				}
				else
				{
					$datainserted = 0;
					$hospizcourse_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			$hospizcourse = new PatientHospizCourse();
			$hospizdata = $hospizcourse->getHospizCourseData($decid);

			$grid = new Pms_Grid($hospizdata, 1, count($hospizdata), "listpatienthospizcourse.html");
			$this->view->gridcourse = $grid->renderGrid();

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ***************************************** */
		}

		public function coursesessionAction()
		{
			$courseSession = new Zend_Session_Namespace('courseSession');
			$courseSession->patientId = Pms_Uuid::decrypt($_GET['pid']);
			$courseSession->coursetype = array();

			foreach($_GET['ctp'] as $key => $value)
			{
				array_push($courseSession->coursetype, array('course_type' => $value, 'course_title' => $_GET['ctt'][$key]));
			}
			array_push($courseSession->coursetype, array('course_type' => "", 'course_title' => ""));
			exit;
		}

		public function patienthospizAction()
		{
			if($_GET['id'] && isset($_GET['chkval']))
			{
				$logininfo = new Zend_Session_Namespace('Login_Info');
				$userid = $logininfo->userid;
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$this->view->patid = $decid;
				$ipid = Pms_CommonData::getIpid($decid);
				$epid = Pms_CommonData::getEpid($ipid);
				$this->view->epid = $epid;
				$pid = $this->view->$_GET['id'];

				$cust = Doctrine::getTable('PatientMaster')->find($decid);
				$cust->ishospiz = $_GET['chkval'];
				$cust->save();

				if($_GET['chkval'] == 1)
				{
					$comment = 'K Patient wurde für das Hospiz freigeschaltet.';
				}
				else
				{
					$comment = 'K Patient wurde aus der Hospizliste entfernt.';
				}

				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->user_id = $userid;
				$cust->save();
			}

			exit;
		}

		public function patientdetailsoldAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->patid = $decid;
			$this->view->patid2 = $_GET['id'];
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			$this->view->epid = $epid;
			$pid = $this->view->$_GET['id'];
		
			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);
			$verordnetarray = Pms_CommonData::getSapvCheckBox();
			$this->view->verordnetarray = $verordnetarray;
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$this->view->clientid = $clientid;
		
			$modules = new Modules();
		
			if($modules->checkModulePrivileges("102", $clientid)) // primary status : Verordnung
			{
				$this->view->modul_custody = "1";
			}
			else
			{
				$this->view->modul_custody = "0";
			}
				
			if($modules->checkModulePrivileges("132", $clientid))
			{
				$this->view->show_height_detail = "1";
			}
			else
			{
				$this->view->show_height_detail = "0";
			}
			
			// ispc 1920
			$this->view->show_height_detail = "0";
			
		
				
			if($modules->checkModulePrivileges("147", $clientid))
			{
				$allow_history_changes = "1";
			}
			else
			{
				$allow_history_changes = "0";
			}
				
			$this->view->allow_history_changes = $allow_history_changes;
				
				
				
				
			$cntstr = "";
		
			$default_pavt = Pms_CommonData::default_approved_visit_type(); // if nothing saved -> get default
		
		
			if($this->getRequest()->isPost() && $_REQUEST['mode'] == 'vv_edit')
			{
				$new_date = date('Y-m-d', strtotime($_POST['vv_edit_date']));
				$new_date_full = date('Y-m-d', strtotime($_POST['vv_edit_date'])) . ' ' . date('H:i:s', time());
		
				$previous_date = date('Y-m-d H:i:s', strtotime($_POST['vv_previous_date']));
				$next_date = date('Y-m-d H:i:s', strtotime($_POST['vv_next_date']));
		
				$previous_date_full = date('Y-m-d H:i:s', strtotime($_POST['vv_previous_date_full']));
				$next_date_full = date('Y-m-d H:i:s', strtotime($_POST['vv_next_date_full']));
		
				$current_date_full = date('Y-m-d H:i:s', strtotime($_POST['vv_current_date_full']));
		
				if(strtotime($new_date) < strtotime($previous_date))
				{
					$error = "date must be bigger then previous date";
				}
				elseif(strtotime($new_date) > strtotime($next_date))
				{
					$error = "date must be lower then next date";
				}
				elseif(strtotime($new_date) >= strtotime($previous_date) && strtotime($new_date) <= strtotime($next_date))
				{
					//update patient master if current_date_full == p.vollversorgung_date
					if($_POST['vv_date_type'] == '1')
					{
						$q_upd = Doctrine_Query::create()
						->update('PatientMaster')
						->set('vollversorgung_date', "'" . $new_date_full . "'")
						->where('ipid LIKE "' . $ipid . '"')
						->andWhere('vollversorgung_date	= "' . $current_date_full . '"')
						->andWhere('vollversorgung = "1"');
						$q_exec = $q_upd->execute();
					}
		
					$q = Doctrine_Query::create()
					->update('VollversorgungHistory')
					->set('date', "'" . $new_date_full . "'")
					->set('change_date', "'" . date('Y-m-d H:i:s') . "'")
					->set('change_user', "'" . $userid . "'")
					->where("ipid = '" . $ipid . "'")
					->andWhere("date_type = '" . $_POST['vv_date_type'] . "'")
					->andWhere("date = '" . $current_date_full . "'")
					->andWhere('id = "' . $_POST['vv_fallid'] . '"');
					$q->execute();
					$error = "date was edited";
		
					//add to Verlauf
					if($_POST['vv_date_type'] == 1)
					{
						$comment_log = 'Das Beginn Vollversorgung wurde editiert: ' . date('d.m.Y', strtotime($current_date_full)) . ' -> ' . date('d.m.Y', strtotime($new_date));
					}
					elseif($_POST['vv_date_type'] == 2)
					{
						$comment_log = 'Das Ende Vollversorgung wurde editiert: ' . date('d.m.Y', strtotime($current_date_full)) . ' -> ' . date('d.m.Y', strtotime($new_date));
					}
		
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes($comment_log));
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
		
				$this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				exit;
			}
		
			$approve_visit_type_form = new Application_Form_PatientApprovedVisitTypes();
			if($this->getRequest()->isPost() && strlen($_POST['visit_type']) > 0)
			{
				$post_data = $_POST;
				$post_data['ipid'] = $ipid;
				$approve_visit_type = $approve_visit_type_form->InsertData($post_data);
		
				$this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				exit;
			}
		
			if($this->getRequest()->isPost() && count($_POST['pavt_edit']) > 0)
			{
				$post_data = $_POST;
				$approve_visit_type = $approve_visit_type_form->UpdateData($post_data);
		
				$this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				exit;
			}
		
			if($this->getRequest()->isPost() && strlen($_POST['del_pavt_id']) > 0)
			{
				$approve_visit_type = $approve_visit_type_form->DeleteData($_POST['del_pavt_id']);
		
				$this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				exit;
			}
		
			$patient_medipumps_form = new Application_Form_PatientMedipumps();
			if($this->getRequest()->isPost() && strlen($_POST['add_medipump']) == '1')
			{
				$post_data = $_POST;
				$post_data['ipid'] = $ipid;
				$add_patient_medipump = $patient_medipumps_form->insert_patient_medipumps($post_data);
				//todo add todo entry for client koordinators with "Rezept Medikamentenpumpe bestätigen"
				//get koord groups
				$user_group = new Usergroup();
				$master_groups = array("6"); //Koordination master group
				$users_groups = $user_group->getUserGroups($master_groups);
		
				$text = 'Rezept Medikamentenpumpe bestätigen';
				if(count($users_groups) > 0)
				{
					foreach($users_groups as $group)
					{
						$records_todo[] = array(
							"client_id" => $clientid,
							"user_id" => $userid,
							"group_id" => $group['id'],
							"ipid" => $ipid,
							"todo" => $text,
							"triggered_by" => 'system_medipumps',
							"create_date" => date('Y-m-d H:i:s', time()),
							"until_date" => date('Y-m-d H:i:s', time())
						);
					}
				}
		
				if(count($records_todo) > 0)
				{
					$collection = new Doctrine_Collection('ToDos');
					$collection->fromArray($records_todo);
					$collection->save();
				}
		
				$this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				exit;
			}
		
			if($this->getRequest()->isPost() && strlen($_POST['edit_medipump']) == '1' && strlen($_POST['edit_medipump_id']) > 0)
			{
				$post_data = $_POST;
				$post_data['ipid'] = $ipid;
		
				$edit_patient_medipump = $patient_medipumps_form->update_patient_medipump($post_data, $_POST['edit_medipump_id']);
		
				$this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				exit;
			}
		
			if($this->getRequest()->isPost() && strlen($_POST['del_medipump']) == '1' && strlen($_POST['del_medipump_id']) > 0)
			{
				$delete_patient_medipump = $patient_medipumps_form->delete_patient_medipump($ipid, $_POST['del_medipump_id']);
		
				$this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				exit;
			}
		
			//update admission/discharge dates
			if($this->getRequest()->isPost() && strlen($_POST['sgbv_id_edit']) > 0)
			{
				$sgbv_status = new SgbvForms();
				$quick_change = $sgbv_status->quick_change_status($_POST['sgbv_id_edit'], $_POST['status_sgbv'], $_POST['approve_date']);
		
				$data['old_status'] = $_POST['sgbv_initial_status'];
				$data['status'] = $_POST['status_sgbv'];
		
				if($data['old_status'] != $data[status])
				{
					$sgbv_history = new Application_Form_SgbvFormsHistory();
					$save_history = $sgbv_history->InsertHistorySgbvData($data, $_POST['sgbv_id_edit']);
				}
			}
		
			// delete sgbv
			if($this->getRequest()->isPost() && strlen($_POST['del_sgbv_id']) > 0)
			{
				$sgbv_status = new SgbvForms();
				$quick_change = $sgbv_status->delete_sgbv($_POST['del_sgbv_id']);
			}
		
			if($this->getRequest()->isPost() && isset($_POST['fald']) && !empty($_POST['edit_date']) && !empty($_POST['date_type']) && !isset($_POST['del_sgbv_id']))
			{
		
				$new_date = date('Y-m-d', strtotime($_POST['edit_date'])) . ' ' . date('H:i:s', strtotime($_POST['edit_time']));
				$previous_date = $_POST['previous_date'];
				$next_date = $_POST['next_date'];
		
				// Update only if the date was changed
				if( strtotime(date("Y-m-d H:i",strtotime($new_date))) !=  strtotime(date("Y-m-d H:i",strtotime($_POST['current_date'])))){
		
					if(strtotime($new_date) <= strtotime($previous_date))
					{
						$error = "date must be bigger then previous date";
					}
					elseif(strtotime($new_date) >= strtotime($next_date))
					{
						$error = "date must be lower then next date";
					}
					elseif(date("Y",strtotime($new_date)) < "2008")
					{
						$error = "admission_date_error_before_2008";
					}
					elseif(strtotime($new_date) > strtotime($previous_date) && strtotime($new_date) < strtotime($next_date))
					{
						$q = Doctrine_Query::create()
						->update('PatientReadmission')
						->set('date', "'" . $new_date . "'")
						->set('change_date', "'" . date('Y-m-d H:i:s') . "'")
						->set('change_user', "'" . $userid . "'")
						->where("ipid = '" . $ipid . "'")
						->andWhere("date_type = '" . $_POST['date_type'] . "'")
						->andWhere("date = '" . $_POST['current_date'] . "'");
						$q->execute();
		
						if($_POST['fald'] == 1)
						{
							//edited date is latest admission
							if($_POST['date_type'] == 1)
							{
								//update patient master
								$qa = Doctrine_Query::create()
								->update('PatientMaster')
								->set('admission_date', "'" . $new_date . "'")
								->set('change_date', "'" . date('Y-m-d H:i:s') . "'")
								->set('change_user', "'" . $userid . "'")
								->where("ipid = '" . $ipid . "'");
								$qa->execute();
							}
						}
		
						if($_POST['date_type'] == 2)
						{
							//update patient discharge
							$qd = Doctrine_Query::create()
							->update('PatientDischarge')
							->set('discharge_date', "'" . $new_date . "'")
							->set('change_date', "'" . date('Y-m-d H:i:s') . "'")
							->set('change_user', "'" . $userid . "'")
							->where("ipid = '" . $ipid . "'")
							->andWhere("discharge_date = '" . $_POST['current_date'] . "'");
							$qd->getSqlQuery();
							$qd->execute();
						}
		
		
						$error = "date was edited";
		
						//add to Verlauf
						if($_POST['date_type'] == 1)
						{
							$comment_log = 'Das Aufnahmedatum wurde editiert: ' . date('d.m.Y H:i', strtotime($_POST['current_date'])) . ' -> ' . date('d.m.Y H:i', strtotime($new_date));
						}
						elseif($_POST['date_type'] == 2)
						{
							$comment_log = 'Das Entlassungsdatum wurde editiert: ' . date('d.m.Y H:i', strtotime($_POST['current_date'])) . ' -> ' . date('d.m.Y H:i', strtotime($new_date));
						}
		
						$cust = new PatientCourse();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt(addslashes($comment_log));
						$cust->user_id = $logininfo->userid;
						$cust->save();
					}
				}
			}
		
		
				
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
		
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
		
			$iscl = Pms_Plugin_Acl::getClientTabmenuAccess($logininfo->clientid);
			if(!$iscl)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
		
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ######################################################### */
		
			$rl = new PatientReligions();
			$this->view->religions = $rl->getReligionsNames();
		
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'canview');
			$this->view->patmclass = "active";
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
		
			if(isset($_REQUEST['flg']) && $_REQUEST['flg'] == 'suc')
			{
				$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
			}
		
			$this->view->act = "patient/patientdetails?id=" . $_REQUEST['id'];
		
			$this->view->pid = $_GET['id'];
			/*			 * ******* Stamdaten Information ************ */
			//Stamdaten start
			$stam = new Stammdatenerweitert();
			$this->view->familienstands = $stam->getFamilienstandfun();
			$this->view->stastszugehorigkeits = $stam->getStastszugehorigkeitfun();
			$this->view->vigilanzs = $stam->getVigilanzfun();
			$this->view->living_will_r = $stam->getLivingWill();
			$this->view->orientierungs = $stam->getOrientierungfun();
			$this->view->ernahrungs = $stam->getErnahrungfun();
			$this->view->ausscheidungs = $stam->getAusscheidungfun();
			$this->view->kunstliches = $stam->getKunstlichefun();
			$this->view->radiobuttonoptions = $stam->getRadioOptionsfun();
		
			$stamarr = $stam->getStammdatenerweitert($ipid);
		
			/* stamdaten new box */
			$hilfsmittel = array('1' => "O2", '2' => "Toilettensitz", '3' => "Pflegebett", '4' => "Rollstuhl", "5" => "Rollator", "6" => "Nachtstuhl", "7" => "Wechseldruckmatratze");
			$this->view->hilfsmittels = $hilfsmittel;
		
			$wunsch = array("1" => "Zu Hause bleiben können", "2" => "kein Krankenhaus", "3" => "Autonomie", "4" => "Leidenslinderung", "5" => "Symptomlinderung",
					"6" => "mehr Kraft", "7" => "wieder aufstehen können", "8" => "noch eine Reise machen",
					"9" => "In Ruhe gelassen werden", "10" => "Keine Angabe", "11" => "Frage nach aktiver Sterbehilfe",
					"12" => "Lebensbeendigung", "13" => "Expliziter Wunsch");
			$this->view->wunschs = $wunsch;
		
			$hospitz = array("1" => "Hospiz");
			$this->view->hospitzs = $hospitz;
		
			if(isset($stamarr[0]))
			{
				if($stamarr[0]['familienstand'] > 0)
				{
					$detailsstr.=",grow16";
				}
		
				if($stamarr[0]['hilfsmittel'] > 0)
				{
					$detailsstr.=",grow30";
				}
		
				if($stamarr[0]['wunsch'] > 0)
				{
					$detailsstr.=",grow31";
				}
		
				if($stamarr[0]['vigilanz'] > 0)
				{
					$detailsstr.=",grow18";
				}
		
				if($stamarr[0]['stastszugehorigkeit'] > 0)
				{
					$detailsstr.=",grow17";
				}
		
				if(strlen($stamarr[0]['ernahrung']) > 0)
				{
					$detailsstr.=",grow20";
				}
		
				if(strlen($stamarr[0]['kunstliche']) > 0)
				{
					$detailsstr.=",grow22";
				}
		
				if(strlen($stamarr[0]['orientierung']) > 0 || $stamarr[0]['sprachlich'] > 0 || $stamarr[0]['kognitiv'] > 0 || $stamarr[0]['horprobleme'] > 0)
				{
					$detailsstr.=",grow19";
				}
		
				if(strlen($stamarr[0]['ausscheidung']) > 0)
				{
					$detailsstr.=",grow21";
				}
				$this->retainValues($stamarr[0]);
		
		
				$this->view->ernahrung = explode(',', $stamarr[0]['ernahrung']);
				$this->view->hilfsmittel = explode(',', $stamarr[0]['hilfsmittel']);
				$this->view->wunsch = explode(',', $stamarr[0]['wunsch']);
				$this->view->wunschmore = $stamarr[0]['wunschmore'];
				$this->view->orientierung = explode(',', $stamarr[0]['orientierung']);
				$this->view->kunstliche = explode(',', $stamarr[0]['kunstliche']);
				$this->view->kunstlichemore = $stamarr[0]['kunstlichemore'];
				$this->view->ausscheidung = explode(',', $stamarr[0]['ausscheidung']);
			}
			$this->view->id_record = $ipid;
			//Stamdaten end
		
			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$patientdetails = $patientmaster->getMasterData($decid, 0);
		
			//end vollversorgung from fallhistory
			if($this->getRequest()->isPost() && $_REQUEST['mode'] == 'vv')
			{
		
				if($patientdetails['vollversorgung'] == 1)
				{
		
					if(strlen($_POST['end_vv_date']) > '0')
					{
						//if anlage is started then insert an end
						$voll_date = date('Y-m-d', strtotime($_POST['end_vv_date'])) . ' ' . date('H:i:s', time());
						$vollhistory = new VollversorgungHistory();
						$vollhistory->ipid = $ipid;
						$vollhistory->user_id = $logininfo->userid;
						$vollhistory->date = $voll_date;
						$vollhistory->date_type = "2"; //1 =add voll 2- dismiss voll
						$vollhistory->save();
		
						// reset date in patient master
						$custpm = Doctrine::getTable('PatientMaster')->find($decid);
						$custpm->vollversorgung = 0;
						$custpm->vollversorgung_date = "0000-00-00 00:00:00";
						$custpm->save();
		
						$cust = new PatientCourse();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt($this->view->translate('end_vollversorgung_verlauf'));
						$cust->user_id = $userid;
						$cust->done_date = $voll_date;
						$cust->save();
					}
				}
				else
				{
					if(strlen($_POST['start_vv_date']) > '0')
					{
						//if anlage is NOT started then insert a start
						$voll_date = date('Y-m-d', strtotime($_POST['start_vv_date'])) . ' ' . date('H:i:s', time());
						$vollhistory = new VollversorgungHistory();
						$vollhistory->ipid = $ipid;
						$vollhistory->user_id = $logininfo->userid;
						$vollhistory->date = $voll_date;
						$vollhistory->date_type = "1"; //1 =add voll 2- dismiss voll
						$vollhistory->save();
		
						// reset date in patient master
						$custpm = Doctrine::getTable('PatientMaster')->find($decid);
						$custpm->vollversorgung = 1;
						$custpm->vollversorgung_date = $voll_date;
						$custpm->save();
		
						$cust = new PatientCourse();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt($this->view->translate('start_vollversorgung_verlauf'));
						$cust->user_id = $userid;
						$cust->done_date = $voll_date;
						$cust->save();
					}
				}
			}
		
			$this->view->kontactnumber_dec = $patientdetails['kontactnumber_dec'];
			$this->view->kontactnumbertype = $patientdetails['kontactnubertype'];
			$this->view->patient_phone = $patientdetails['phone'];
			$this->view->hospitzz = $patientdetails['ishospiz'];
			$this->view->isstandby = $patientdetails['isstandby'];
			$this->view->isstandbydelete = $patientdetails['isstandbydelete'];
		
			if($patientdetails)
			{
				$this->retainValues($patientdetails);
			}
			if($patientdetails['living_will_from'] != "0000-00-00" && $patientdetails['living_will_from'] != "0000-00-00 00:00" && !empty($patientdetails['living_will_from']) && $patientdetails['living_will_from'] != 0)
			{
				$this->view->living_will_from = date("d.m.Y", strtotime($patientdetails['living_will_from']));
			}
			else
			{
				$this->view->living_will_from = "";
			}
			$this->view->sex = Pms_CommonData::getGenderById($patientdetails['sex']);
		
			/*			 * ******* Patient History ************ */
			$first_admission = date('Y-m-d H:i:s', strtotime($patientdetails['admission_date']));
			$lastdischarge = PatientDischarge::getPatientLastDischarge($ipid);
		
			$readmission_dates = new PatientReadmission();
			$admisiondatesarray_bydate = $readmission_dates->getPatientReadmissionAll($ipid);
			$admisiondatesarray = $readmission_dates->get_patient_readmission_all($ipid);
				
				
				
			$adm_continuu = "0";
			$dis_continuu = "0";
			if(!empty($admisiondatesarray_bydate))
			{
				 
				foreach($admisiondatesarray_bydate as $ak=>$adates){
					if($adates['date_type'] == "1" && $adates['date_type'] == $admisiondatesarray_bydate[$ak+1]['date_type']){
						$adm_continuu = "1";
					}
		
					if($adates['date_type'] == "2" && $adates['date_type'] == $admisiondatesarray_bydate[$ak+1]['date_type']){
						$dis_continuu = "1";
					}
				}
			}
				
				
			if(!empty($admisiondatesarray))
			{
				$fall = 1;
				foreach($admisiondatesarray as $adm_item)
				{
					if($adm_item['date_type'] == "1"){
						$admissions[] = $adm_item['date'];
					} else{
						$discharges[] = $adm_item['date'];
					}
		
					$patient_falls[$fall][$adm_item['date_type']] = $adm_item['date'];
					if(count($patient_falls[$fall]) == "2"){
						$fall++;
					}
						
					$patient_history[$adm_item['date']] = $adm_item['date_type'];
					$date_array[] = $adm_item['date'];
				}
				 
				$first_admission_ever = $admissions[0];
				 
			}
			else
			{
				 
				$patient_falls[1][1] = $first_admission;
				$first_admission_ever = $first_admission;
				if($lastdischarge){
					$patient_falls[1][2] = $lastdischarge[0]['discharge_date'];
				}
				$date_array[] = $first_admission;
				$date_array[] = $first_admission;
			}
		
				
				
				
			$this->view->first_admission_ever = $first_admission_ever;
			$this->view->patient_falls = $patient_falls;
		
			//current status of patient
			if($patientdetails['isdischarged'] == "1"){
				$current_status = "discharged";
			} else{
				$current_status = "active";
			}
		
		
			$even = (count($date_array) % 2 == 0);
			$odd = (count($date_array) % 2 != 0);
		
		
			// do not allow changes - dates are wrong
		
			//    			var_dump($current_status == "discharged" && $even);
			//    			exit;
			if($adm_continuu == "1" || $dis_continuu == "1")
			{
				$allow_change = 0;
			} else{
				$allow_change = 1;
			}
				
			$this->view->allow_change = $allow_change;
		
		
		
			$patient_history[$first_admission] = '1';
			if($lastdischarge)
			{
				$patient_history[$lastdischarge[0]['discharge_date']] = '2';
			}
		
			ksort($patient_history, SORT_STRING);
			$this->view->patient_adm_history = $patient_history;
		
			/*			 * ******* Vollversorgung History ************ */
			$vvhistory = new VollversorgungHistory();
			$historyvv = $vvhistory->getVollversorgungHistoryAll($ipid);
		
			//check if we have any data in history table
			if(count($historyvv) == "0" && $patientdetails['vollversorgung'] == "0")
			{
				$this->view->hideEditButton = "1";
			}
		
			if(count($historyvv) == "0" && $patientdetails['vollversorgung'] == "1")
			{
				$ins = new VollversorgungHistory();
				$ins->user_id = $logininfo->userid;
				$ins->ipid = $ipid;
				$ins->date = date("Y-m-d H:i:s", strtotime($patientdetails['vollversorgung_date']));
				$ins->date_type = "1";
				$ins->save();
		
				$historyvv[0]['date'] = $patientdetails['vollversorgung_date'];
				$historyvv[0]['date_type'] = $patientdetails['vollversorgung_date'];
				$this->view->hideEditButton = "0";
			}
		
		
			if($_REQUEST['vvdbg'])
			{
				print_r("historyvv\n");
				print_r($historyvv);
			}
		
			foreach($historyvv as $keyh => $valh)
			{
				if($valh['date_type'] == 1)
				{
					$startDatesHistory[] = $valh['date'];
					$start_dates_ids[] = $valh['id'];
					$has_prev_start[$keyh] = '1';
				}
				else if($valh['date_type'] == 2 && end($has_prev_start) == '1')
				{
					$endDatesHistory[] = $valh['date'];
					$end_dates_ids[] = $valh['id'];
					$has_prev_start[$keyh] = '0';
				}
			}
		
			if($_REQUEST['vvdbg'])
			{
				print_r("startDatesHistory\n");
				print_r($startDatesHistory);
				print_r("endDatesHistory\n");
				print_r($endDatesHistory);
				exit;
			}
			$this->view->start_dates_ids = $start_dates_ids;
			$this->view->end_dates_ids = $end_dates_ids;
		
			$this->view->startDatesHistory = $startDatesHistory;
			$this->view->endDatesHistory = $endDatesHistory;
		
		
			/*			 * ******* Theraphieplanung ************ */
			$therapy = new PatientTherapieplanung();
			$patienttherapy = $therapy->getTherapieplanungData($ipid);
		
			$this->retainValues($patienttherapy[0]);
		
			/*			 * *********Family Doctor************** */
			if($patientdetails['living_will'] > 0)
			{
				$detailsstr.=",grow6";
			}
		
			if($patientdetails['familydoc_id'] > 0)
			{
				$fdoc = new FamilyDoctor();
				$docarray = $fdoc->getFamilyDoc($patientdetails['familydoc_id']);
		
				$this->view->doc_salutation = $docarray[0]['salutation'];
				$this->view->doc_firstname = $docarray[0]['first_name'];
				$this->view->doc_lastname = $docarray[0]['last_name'];
				$this->view->title = $docarray[0]['title'];
				$this->view->doc_phone_practice = $docarray[0]['phone_practice'];
				$this->view->doc_phone_cell = $docarray[0]['phone_cell'];
				$this->view->doc_phone_private = $docarray[0]['phone_private'];
				$this->view->doc_street1 = $docarray[0]['street1'];
				$this->view->doc_zip = $docarray[0]['zip'];
				$this->view->doc_city = $docarray[0]['city'];
				$this->view->doc_fax = $docarray[0]['fax'];
				$this->view->doc_number = $docarray[0]['doctornumber'];
				$this->view->doc_bsnr = $docarray[0]['doctor_bsnr'];
				$this->view->isdoc = 1;
		
				$detailsstr.=",grow9";
			}
			else
			{
				$this->view->isdoc = 0;
				$this->view->fdocmsg = $this->view->translate("nofamilydoctor");
			}
			$ps = new PatientSupply();
			$pat_supply = $ps->getpatientSupplyData($ipid);
			$supcnt = $pat_supply[0]['even'] + $pat_supply[0]['spouse'] + $pat_supply[0]['member'] + $pat_supply[0]['private_support'] + $pat_supply[0]['nursing'];
		
			if($supcnt > 0)
			{
				$detailsstr.=",grow4";
			}
			$this->retainValues($pat_supply[0]);
		
			/* ---------------------Pflegedienste---------------------- */
			$pfleg = new PatientPflegedienste();
			// 		$docarray = $fdoc->getPatientPflegedienste($ipid);
			$pfleg_array = $pfleg->getPatientPflegedienste($ipid);
		
			if(count($pfleg_array) > 0)
			{
				$this->view->ispflege = 1;
		
				$palliativpflegedienst = "No";
		
				if($pfleg_array[0]['palliativpflegedienst'] == 1)
				{
					$palliativpflegedienst = "Yes";
					$this->view->palliativpflegedienst = 1;
				}
				else
				{
					$this->view->nursing = 1;
				}
		
				$this->view->palliativpf = $palliativpflegedienst;
				if($pfleg_array[0]['heimpersonal'] == 1)
				{
					$this->view->heimpersonal = 1;
				}
				$detailsstr.=",grow15";
		
				$pflegedienstegrid = new Pms_Grid($pfleg_array, 1, count($pfleg_array), "PatientPflegedienstes.html");
				$this->view->patient_pflegedienstes = $pflegedienstegrid->renderGrid();
			}
			else
			{
				$this->view->ispflege = 0;
				$this->view->pflegemsg = $this->view->translate("nopflege");
			}
			/* ---------------------Voluntary workers---------------------- */
		
			// get associated clients of current clientid START
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
			if($connected_client){
				$clientid = $connected_client;
			} else{
				$clientid = $logininfo->clientid;
			}
				
			if($isdicharged){
				 
				$pdarr = PatientDischarge::getPatientDischarge($ipid);
				if($pdarr[0]['discharge_date'])
				{
					$dischargedate = date('d.m.Y', strtotime($pdarr[0]['discharge_date']));
				}
			}
		
				
			$pvw = new PatientVoluntaryworkers();
			$pvwarray = $pvw->getPatientVoluntaryworkers($ipid);
		
			$date_of_today  = date('Y-m-d');
			foreach($pvwarray  as $keyvw =>$vvw_data){
		
				if($vvw_data['start_date'] != "0000-00-00 00:00:00"){
					$start_date[$keyvw] = date('Y-m-d',strtotime($vvw_data['start_date']));
					$show_start_date[$keyvw] = date('d.m.Y',strtotime($vvw_data['start_date']));
				} else{
					$start_date[$keyvw] = date('Y-m-d',strtotime($vvw_data['create_date']));
					$show_start_date[$keyvw] = date('d.m.Y',strtotime($vvw_data['create_date']));
				}
				 
				 
				if( $vvw_data['end_date'] != "0000-00-00 00:00:00"){
					$end_date[$keyvw] = date('Y-m-d',strtotime($vvw_data['end_date']));
					$show_end_date[$keyvw] = date('d.m.Y',strtotime($vvw_data['end_date']));
				} else {
					if($isdicharged) {
		
						$end_date[$keyvw] = date('Y-m-d',strtotime($dischargedate));
						$show_end_date[$keyvw] = date('d.m.Y',strtotime($dischargedate));
					} else{
						$end_date[$keyvw] = date('Y-m-d');
						$show_end_date[$keyvw] = "--";
					}
				}
				 
				$voluntary_worker_data[$keyvw]['start'] =   $start_date[$keyvw];
				$voluntary_worker_data[$keyvw]['end'] =   $end_date[$keyvw];
				$pvwarray[$keyvw]['start_date'] =   $show_start_date[$keyvw];
				$pvwarray[$keyvw]['end_date'] =   $show_end_date[$keyvw];
					
				// Do not remove incative - ISPC 1485
				if(!Pms_CommonData::isintersected(
						strtotime($start_date[$keyvw]), strtotime($end_date[$keyvw]), strtotime($date_of_today), strtotime($date_of_today)))
				{
					// unset($pvwarray[$keyvw]);
				}
				 
			}
				
			$primary_status_arr = Pms_CommonData::get_primary_voluntary_statuses();
			//ISPC-2054(voluntaryworkers statuses updated by clients)
			//$voluntary_status = Pms_CommonData::getVoluntaryWorkersStatuses();
			$voluntary_status = VoluntaryWorkersSecondaryStatuses::get_secondarystatuses($clientid);
		
			$h_association = Doctrine_Query::create()
			->select('*')
			->from('Hospiceassociation')
			->where('indrop= 0 and isdelete = 0 and clientid=' . $voluntary_clientid);
			$h_association_array = $h_association->fetchArray();
		
			foreach($h_association_array as $khas => $h_assoc_item)
			{
				$h_assoc_data[$h_assoc_item['id']] = $h_assoc_item['hospice_association'];
			}
			$this->view->hospiceassoc = $h_assoc_data;
		
			//new statuses
			foreach($pvwarray as $k_pvw => $v_pvw)
			{
				$pvw_ids[] = $v_pvw['id'];
			}
		
			foreach($voluntary_status as $k_status => $v_status)
			{
				$statuses[$v_status['id']] = $v_status['status'];
			}
		
			foreach($primary_status_arr as $k_pri_status => $v_pri_status)
			{
				$statuses[$v_pri_status['id']] = $v_pri_status['status'];
			}
		
			$voluntary_workers_statuses = new VoluntaryworkersStatuses();
			$worker_statuses = $voluntary_workers_statuses->get_voluntaryworker_statuses($pvw_ids, $voluntary_clientid);
		
			foreach($worker_statuses as $k_data => $v_data)
			{
				foreach($v_data as $k_vdata => $v_vdata)
				{
					$worker_statuses_arr[$k_data][] = $statuses[$v_vdata];
				}
			}
		
			$this->view->voluntary_status = $worker_statuses_arr;
		
			if(count($pvwarray) > 0)
			{
		
				$this->view->ispvw = 1;
		
				//print_r($pvwarray);exit;
				$detailsstr.=",grow15";
				$patientvoluntarywgrid = new Pms_Grid($pvwarray, 1, count($pvwarray), "Patientvoluntaryworkers.html");
				$this->view->patient_voluntaryworkers = $patientvoluntarywgrid->renderGrid();
			}
			else
			{
				$this->view->ispvw = 0;
				$this->view->pvwmsg = $this->view->translate("novoluntary");
			}
			/* ---------------------Voluntary workers---------------------- */
		
			/* --------------------- ambulanter Hospizdienst ---------------------- */
			$hp_assoc = new PatientHospiceassociation ();
			$hp_assoc_array = $hp_assoc->getPatientHospiceassociation($ipid);
		
			if(count($hp_assoc_array) > 0)
			{
				$this->view->has_hp_assoc = 1;
				$this->view->patient_hospiceassociations = $hp_assoc_array;
			}
			else
			{
				$this->view->has_hp_assoc = 0;
				$this->view->hospiceassociationmsg = $this->view->translate("no_hp_assoc");
			}
			/* ---------------------ambulanter Hospizdienst END---------------------- */
		
			/* ------------ Pharmacy -------------------- */
			$pha = new PatientPharmacy ();
			$docarray = $pha->getPatientPharmacy($ipid);
		
			if(count($docarray) > 0)
			{
				$this->view->ispharmacy = 1;
				$detailsstr.=",grow26";
				$pharmacygrid = new Pms_Grid($docarray, 1, count($docarray), "PatientPharmacy.html");
				$this->view->patient_pharmacy = $pharmacygrid->renderGrid();
			}
			else
			{
				$this->view->ispharmacy = 0;
				$this->view->pharmacymsg = $this->view->translate("nopharmacy");
			}
			/* ------------ End Pharmacy -------------------- */
		
		 	
			/* ------------ Patient Remedies-tool -------------------- */
			$pr = Doctrine_Query::create()
			->select('*')
			->from('PatientRemedies')
			->where('ipid="'.$ipid.'"')
			->andWhere("isdelete=0");
			$prarray=$pr->fetchArray();
		
				
				
			$supp = new PatientSupplies();
			$supp_date[]='';
			foreach ($prarray as $key => $value)
			{
				$supp_date = $supp->getPatientSupplies($ipid,$value['supplier']);
				$s[$value['id']]['supplier']= $supp_date[0]['supplier'];
		
				$s[$value['id']]['remedis']= $value['remedies'];
			}
		
				
			$this->view->remds =$s;
			/* ------------ End Patient Remedies-tool ---------------- */
		
		 	
			/* ------------ Supplies  -------------------- */
			$supp = new PatientSupplies();
			$supp_array = $supp->getPatientSupplies($ipid);
		
			if(count($supp_array) > 0)
			{
				$this->view->issupplies = 1;
				$this->view->patient_supplies_array = $supp_array;
			}
			else
			{
				$this->view->issuppliesy = 0;
				$this->view->suppliesmsg = $this->view->translate("no_suppliers");
			}
			/* ------------ End Supplies -------------------- */
		
		 	
		
			/* ------------ Suppliers (Sonst. Versorger in Aphotheke box)  -------------------- */
			$supplier = new PatientSuppliers();
			$supplier_array = $supplier->getPatientSuppliers($ipid);
		
			if(count($supplier_array) > 0)
			{
				$this->view->issupplier = 1;
				$this->view->patient_suppliers_array = $supplier_array;
			}
			else
			{
				$this->view->issupplier = 0;
				$this->view->suppliersmsg = $this->view->translate("no_suppliers_versorger");
			}
			/* ------------ End Suppliers (Sonst. Versorger in Aphotheke box) -------------------- */
		
			/* ------------ Specialists Start -------------------- */
			$spec = new PatientSpecialists();
			$spec_array = $spec->get_patient_specialists($ipid);
		
			$specialists_types = new SpecialistsTypes();
			$sp_types = $specialists_types->get_specialists_types($clientid);
			if($sp_types)
			{
				foreach($sp_types as $k_specialities => $v_specialities)
				{
					$sp_types_arr[$v_specialities['id']] = $v_specialities['name'];
				}
			}
		
			$this->view->specialists_types = $sp_types_arr;
		
			$spec_ids[] = '999999999';
			foreach($spec_array as $k_spec => $v_spec)
			{
				$spec_ids[] = $v_spec['sp_id'];
				$spec_details[$v_spec['sp_id']]['comment'] = $v_spec['comment'];
				$spec_details[$v_spec['sp_id']]['pat_sp_id'] = $v_spec['id'];
			}
		
			$master_spec = new Specialists();
			$master_spec_array = $master_spec->get_specialist($spec_ids);
		
			foreach($master_spec_array as $k_m_sp => $v_m_sp)
			{
				$m_sp_array[$v_m_sp['id']] = $v_m_sp;
				$m_sp_array[$v_m_sp['id']]['comment'] = $spec_details[$v_m_sp['id']]['comment'];
				$m_sp_array[$v_m_sp['id']]['pat_sp_id'] = $spec_details[$v_m_sp['id']]['pat_sp_id'];
			}
		
			if($m_sp_array)
			{
				$this->view->isspecialist = '1';
				$this->view->patient_specialists_array = $m_sp_array;
				$this->view->specialistsmsg = '';
			}
			else
			{
				$this->view->isspecialist = '0';
				$this->view->specialistsmsg = $this->view->translate("no_specialists");
			}
			/* ------------ Specialists End -------------------- */
		
			/* ------------ Sapvverordnung -------------------- */
			$this->view->newsapv = 1; // 0- Don't show the new version of the box
		
			$sav = new SapvVerordnung();
				
			$modules = new Modules();
			if($modules->checkModulePrivileges("69", $clientid))
			{
				$sapv_extra = true;
			}
			else
			{
				$sapv_extra = false;
			}
				
			if($modules->checkModulePrivileges("70", $clientid)) // primary status : Verordnung
			{
				$sapv_primary_status = true;
			}
			else
			{
				$sapv_primary_status = false;
			}
				
			if($modules->checkModulePrivileges("71", $clientid)) // secondary status : Verordnung 2nd Page
			{
				$sapv_secondary_status = true;
			}
			else
			{
				$sapv_secondary_status = false;
			}
				
			if($modules->checkModulePrivileges("97", $clientid)) // secondary status : Verordnung 2nd Page
			{
				$sapv_bra_options = true;
			}
			else
			{
				$sapv_bra_options = false;
			}
		
			$this->view->sapv_extra = $sapv_extra;
			$this->view->sapv_primary_status = $sapv_primary_status;
			$this->view->sapv_secondary_status = $sapv_secondary_status;
			$this->view->sapv_bra_options = $sapv_bra_options;
				
			$sapv_perm = new SapvverordnungPermissions();
			$clientsapv_subdivision = $sapv_perm->getClientSapvverordnungpermissions($clientid);
		
			if($clientsapv_subdivision)
			{
				foreach($clientsapv_subdivision as $kh => $sub)
				{
					$sapv_subdivizions[] = $sub['subdiv_id'];
				}
			}
			else
			{
				$sapv_subdivizions[] = '1'; // set DEFAULT sapv box
			}
		
			$this->view->sapv_subdivizions = $sapv_subdivizions;
			$this->view->clientsapv_subdivision = $clientsapv_subdivision;
		
			$sgbv_details = new SgbvForms();
			$patient_sgbv_array = $sgbv_details->getallPatientSgbvForm($ipid);
			$sgbv_status = Pms_CommonData::getSgbvStatusRadio();
			$this->view->sgbv_status = $sgbv_status;
		
			$patient_sgbv_ids[] = '999999999';
			foreach($patient_sgbv_array as $sk => $sgbvvalues)
			{
				$patient_sgbv[$sgbvvalues['id']] = $sgbvvalues;
				$patient_sgbv_ids[] = $sgbvvalues['id'];
			}
		
			$sgbv_items = new SgbvFormsItems();
			$sgbv_actions = $sgbv_items->getPatientSgbvFormItems($ipid, $patient_sgbv_ids);
		
			$social_code_actions = new SocialCodeActions();
			$sc_actions = $social_code_actions->getAllCientSgbvActions($clientid);
			foreach($sc_actions as $k_action => $v_action)
			{
				$client_sc_actions[$v_action['id']] = $v_action;
			}
		
			foreach($sgbv_actions as $k_sgbv_act => $v_sgbv_act)
			{
				if($client_sc_actions[$v_sgbv_act['action_id']]['custom'] == '1' && $client_sc_actions[$v_sgbv_act['action_id']]['parent'] != '0')
				{
					$sgbv_act_details[$v_sgbv_act['sgbv_form_id']][$v_sgbv_act['action_id']] = $client_sc_actions[$client_sc_actions[$v_sgbv_act['action_id']]['parent']]['action_name'];
				}
				else
				{
					$sgbv_act_details[$v_sgbv_act['sgbv_form_id']][$v_sgbv_act['action_id']] = $client_sc_actions[$v_sgbv_act['action_id']]['action_name'];
				}
				$sgbv_act_details_free[$v_sgbv_act['sgbv_form_id']][$v_sgbv_act['action_id']] = $v_sgbv_act['free_of_charge'];
			}
		
			$this->view->patient_sgbv = $patient_sgbv;
			$this->view->patient_sgbv_actions = $sgbv_act_details;
			$this->view->patient_sgbv_actions_foc = $sgbv_act_details_free;
		
		
			$savarr = $sav->getLastSapvVerordnungData($ipid);
			$radioarr = $sav->getSapvRadios();
		
			if($savarr[0]['verordnet_von'])
			{
				$this->view->verordnet_von = $sav->get_verordnet_von($savarr[0]['verordnet_von'], $savarr[0]['verordnet_von_type']);
				$this->view->vercount = 1;
				if($savarr[0]['verordnungam'] != '0000-00-00 00:00:00')
				{
					$this->view->verordnungam = date('d.m.Y', strtotime($savarr[0]['verordnungam']));
				}
				if($savarr[0]['verordnungbis'] != '0000-00-00 00:00:00')
				{
					$this->view->verordnungbis = date('d.m.Y', strtotime($savarr[0]['verordnungbis']));
				}
		
				$comma = "";
				$verordnet = explode(",", $savarr[0]['verordnet']);
				for($i = 0; $i < count($verordnet); $i++)
				{
				$ver .= $comma . $verordnetarray[$verordnet[$i]];
				$comma = ", ";
				}
		
						$this->view->verordnet = $ver;
						$this->view->status = $radioarr[$savarr[0]['status']];
				$this->view->vid = $savarr[0]['id'];
		
						$this->view->bra_options = implode(", ", explode(",",$savarr[0]['bra_options']));
		
		
			}
			else
						{
						$this->view->vercountmsg = $this->view->translate("sapv_error");
						}
		
			/*			 * ******** new Verordnung TaB - Pflegebesuche ***************** */
						if(in_array("5", $sapv_subdivizions))
						{
						$pavt = new PatientApprovedVisitTypes();
						$pavt_active = $pavt->get_active_patient_approved_visit_type($ipid, true); // ipid, true- check for current day
						$all_pavt = $pavt->get_all_patient_approved_visit_type($ipid);
		
						foreach($patient_history as $date => $type)
						{
						if($type == 1)
							{
							$admissions_dates[] = $date;
							}
							}
		
							$this->view->only_default = 0;
		
							if(empty($all_pavt))
							{
							$pavt_active['visit_type'] = $default_pavt;
							$all_pavt[0]['visit_type'] = $default_pavt;
							$all_pavt[0]['start_date'] = date('d.m.Y', strtotime($admissions_dates[0])); // first admission ever
							$default_visit_from = date('d.m.Y', strtotime($admissions_dates[0])); // first admission ever
							$pavt_default = $all_pavt[0];
							$this->view->only_default = 1;
							}
							$this->view->pavt_default = $pavt_default;
							$this->view->approved_visit_type = $pavt_active['visit_type'];
				$this->view->approved_visit_type_history = $all_pavt;
		}
		
		
							$savarry = $sav->getSapvVerordnungData($ipid);
		
							$this->view->extraradioarr = $sav->getSapvExtraStatusesRadios();
							$this->view->extra_set_array = $sav->getSapvExtraRadios();
								
							if(count($savarry) > 0)
							{
							$detailsstr.=",grow11";
			}
							$this->view->savpcount = count($savarry);
		
							$grid = new Pms_Grid($savarry, 1, count($savarry), "sapvverordnunglist.html");
							$this->view->sapvverordnunglist = $grid->renderGrid();
		
							/*			 * ********Sapv Verordnung END***************** */
		
		 	
		 	 	
							/*			 * *********Health Insurance ************** */
		
		
							$modules = new Modules();
							if($modules->checkModulePrivileges("90", $logininfo->clientid))
							{
								$this->view->show_debtor_number = "1";
							}
							else
							{
								$this->view->show_debtor_number = "0";
							}
		
							//get health insurance subdivizions
							$symperm = new HealthInsurancePermissions();
							$divisions = $symperm->getClientHealthInsurancePermissions($logininfo->clientid);
							$this->view->divisions = $divisions;
		
							$ph = new PatientHealthInsurance();
							$phi = $ph->getPatientHealthInsurance($ipid);
		
							if(!empty($phi))
							{
								if(!empty($divisions))
								{
									$hi2s = Doctrine_Query::create()
									->select("*,AES_DECRYPT(ins2s_name,'" . Zend_Registry::get('salt') . "') as name,
							AES_DECRYPT(ins2s_insurance_provider,'" . Zend_Registry::get('salt') . "') as insurance_provider,
							AES_DECRYPT(ins2s_contact_person,'" . Zend_Registry::get('salt') . "') as contact_person,
							AES_DECRYPT(ins2s_street1,'" . Zend_Registry::get('salt') . "') as street1,
							AES_DECRYPT(ins2s_street2,'" . Zend_Registry::get('salt') . "') as street2,
							AES_DECRYPT(ins2s_zip,'" . Zend_Registry::get('salt') . "') as zip,
							AES_DECRYPT(ins2s_city,'" . Zend_Registry::get('salt') . "') as city,
							AES_DECRYPT(ins2s_phone,'" . Zend_Registry::get('salt') . "') as phone,
							AES_DECRYPT(ins2s_phone2,'" . Zend_Registry::get('salt') . "') as phone2,
							AES_DECRYPT(ins2s_post_office_box,'" . Zend_Registry::get('salt') . "') as post_office_box,
							AES_DECRYPT(ins2s_post_office_box_location,'" . Zend_Registry::get('salt') . "') as post_office_box_location,
							AES_DECRYPT(ins2s_zip_mailbox,'" . Zend_Registry::get('salt') . "') as zip_mailbox,
							AES_DECRYPT(ins2s_email,'" . Zend_Registry::get('salt') . "') as email,
							AES_DECRYPT(comments,'" . Zend_Registry::get('salt') . "') as comments,
							AES_DECRYPT(ins2s_fax,'" . Zend_Registry::get('salt') . "') as fax,
							AES_DECRYPT(ins2s_iknumber,'" . Zend_Registry::get('salt') . "') as iknumber,
							AES_DECRYPT(ins2s_ikbilling,'" . Zend_Registry::get('salt') . "') as ikbilling,
							AES_DECRYPT(ins2s_debtor_number,'" . Zend_Registry::get('salt') . "') as debtor_number,
							AES_DECRYPT(ins2s_kvnumber,'" . Zend_Registry::get('salt') . "') as kvnumber ")
									->from("PatientHealthInsurance2Subdivisions")
									->where("company_id = " . $phi[0]['companyid'] . " ")
									->andWhere("ipid = '" . $ipid . "' ");
									$hi2s_arr = $hi2s->fetchArray();
										
									foreach($hi2s_arr as $skey => $subdiv_details)
									{
										$subdivizion_details[$subdiv_details['subdiv_id']] = $subdiv_details;
		
									}
									$this->view->subdivizion_details = $subdivizion_details;
									//print_r($hi2s_arr);exit;
								}
							}
		
							if(count($phi) > 0)
							{
								$detailsstr.=",grow10";
							}
								
							if(count($phi) > 0)
							{
								$this->view->insurance_no = $phi[0]['insurance_no'];
								$this->view->kvk_no = $phi[0]['kvk_no'];
		
								if(empty($phi[0]['institutskennzeichen']) || $phi[0]['institutskennzeichen'] == 0)
								{
									if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
									{
										$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
										$healtharray = $helathins->toArray();
										$institutskennzeichen = $healtharray['iknumber'];
										$this->view->institutskennzeichen = $institutskennzeichen;
									}
								}
								else
								{
									$this->view->institutskennzeichen = $phi[0]['institutskennzeichen'];
								}
		
								if(empty($phi[0]['ins_debtor_number']) || strlen($phi[0]['ins_debtor_number']) == 0)
								{
									if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
									{
										$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
										$healtharray = $helathins->toArray();
										$ins_debtor_number = $healtharray['debtor_number'];
										$this->view->ins_debtor_number = $ins_debtor_number;
									}
								}
								else
								{
									$this->view->ins_debtor_number = $phi[0]['ins_debtor_number'];
								}
		
		
								if(empty($phi[0]['comment']) || strlen($phi[0]['comment']) == 0)
								{
									if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
									{
										$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
										$healtharray = $helathins->toArray();
		
										$comment = $healtharray['comments'];
										$this->view->comment = $comment;
									}
								}
								else
								{
									$this->view->comment = $phi[0]['comment'];
								}
		
								$this->view->ins_insurance_provider = $phi[0]['ins_insurance_provider'];
								$this->view->company_name = $phi[0]['company_name'];
								//				$this->view->comment = $phi[0]['comment'];
								$reze = "";
								if($phi[0]['rezeptgebuhrenbefreiung'] == 1)
								{
									$reze = $this->view->translate('gebuhrenbefreit');
								}
		
								if($phi[0]['rezeptgebuhrenbefreiung'] == 2)
								{
									$reze = $this->view->translate('gebuhrenpflichtig');
								}
								$this->view->reze = $reze;
		
								$private = "";
								if($phi[0]['privatepatient'] == 1 || (($phi[0]['direct_billing'] == 1 && $phi[0]['privatepatient'] == 1)))
								{
									$private = $this->view->translate('privatepatient');
								}
								$this->view->private = $private;
		
								$direct_billing = "";
								if($phi[0]['direct_billing'] == 1 && $phi[0]['privatepatient'] == 0)
								{
									$direct_billing = $this->view->translate('direct_billing');
								}
								$this->view->direct_billing = $direct_billing;
		
								$bg_patient = "";
								if($phi[0]['bg_patient'] == 1)
								{
									$bg_patient = $this->view->translate('bg_patient');
								}
								$this->view->bg_patient = $bg_patient;
		
								$st = new KbvKeytabs();
								$status_array = $st->getKbvKeytabs(1);
		
								if($phi[0]['insurance_status'] != "")
								{
									$this->view->insurance_status = $status_array[$phi[0]['insurance_status']];
								}
							}
		
							/*			 * ********* Patient Location************* */
							$loca = Doctrine::getTable('PatientLocation')->findBy('ipid', $ipid);
		
							$loca = new PatientLocation();
							$locaarray = $loca->getPatientLocations($ipid);
							if(count($locaarray) > 0)
							{
								$detailsstr.=",grow13";
							}
		
							$this->view->locationcount = count($locaarray);
		
							$lpc = new ContactPersonMaster();
							$lpcs = $lpc->getPatientContact($ipid, false);
		
							if($lpcs)
							{
								$z = 1;
								$cnt_number = 1; // contact number for display
		
								foreach($lpcs as $value)
								{
									if($value['isdelete'] == '0')
									{
										$location_cnt[$z] = 'bei Kontaktperson ' . $cnt_number . '(' . $value['cnt_last_name'] . ', ' . $value['cnt_first_name'] . ')';
										$location_cnt_phone[$z] = $value['cnt_phone'];
										$location_cnt_mobile[$z] = $value['cnt_mobile'];
										$cnt_number++;
									}
									else
									{
										$location_cnt[$z] = 'bei Kontaktperson';
									}
									$z++;
								}
								$this->view->location_cnt = $location_cnt;
								$this->view->location_cnt_phone = $location_cnt_phone;
								$this->view->location_cnt_mobile = $location_cnt_mobile;
							}
		
							//get stations and don`t use queryes in grids
							$last_location = end($locaarray);
		
							if(!empty($last_location['station']))
							{
								$loc_stations = new LocationsStations();
								$last_location_station[$last_location['location_id']] = $loc_stations->getLocationsStationsById($clientid, false, $last_location['station']);
							}
		
							$grid = new Pms_Grid($locaarray, 1, count($locaarray), "listvalidlocation.html");
							$this->view->last_location = $last_location_station;
		
							$this->view->locations = $grid->renderGrid();
							/*			 * *********get Patient Hospizverein ************** */
		
							// special for client id = 48
							if($clientid == 48)
							{
								$displayhospizverein_special = 1;
								$this->view->displayhospizverein_special = $displayhospizverein_special;
							}
		
							$phospiz = new PatientHospizverein();
							$pat_phospiz = $phospiz->getHospizvereinData($ipid);
							$pat_hospizverein = $pat_phospiz[0]['hospizverein'];
							$pat_hospizverein_txt = $pat_phospiz[0]['hospizverein_txt'];
		
							$this->view->hospizverein = $pat_hospizverein;
							$this->view->hospizverein_txt = $pat_hospizverein_txt;
		
							/*			 * ********* Hospiz / Hospizvereins BOX ************** */
		
							/* get already assigned users */
							$ass_usr = Doctrine_Query::create()
							->select('*')
							->from('PatientQpaMapping')
							->where('epid="' . $epid . '"');
							$usignuserarr = $ass_usr->fetchArray();
							foreach($usignuserarr as $value)
							{
								$assignedusers[] = $value['userid'];
							}
							$this->view->assignedusers = $assignedusers;
		
							/* get group permisions */
							$patgroup = Doctrine_Query::create()
							->select('*')
							->from('PatientGroups')
							->where('ipid ="' . $ipid . '"  and isdelete="0"')
							->orderBy('id ASC');
							$patgrouparray = $patgroup->fetchArray();
		
							foreach($patgrouparray as $value)
							{
								$assignedgroups[] = $value['groupid'];
							}
							$this->view->assignedgroups = $assignedgroups;
		
							/* get patient ishospiz/ ishospizverein details */
		
							$ishospiz = $patientdetails['ishospiz'];
							$this->view->ishospiz = $patientdetails['ishospiz'];
							$this->view->ishospizverein = $patientdetails['ishospizverein'];
		
							$usergroup = new Usergroup();
		
							// HOSPIZ USERS
							$hospizgroup = array("7");
							$hospizusers = $usergroup->getUserGroups($hospizgroup);
		
							$this->view->hospizgroup_id = $hospizgroup[0];
		
							if(count($hospizusers) > 0)
							{
								foreach($hospizusers as $hsgroup)
								{
									$hsgroupsarray[] = $hsgroup['id'];
								}
							}
		
							$hsusr = new User();
							$usersHospizArray = $hsusr->getuserbyGroupId($hsgroupsarray, $clientid);
		
							$allhsusers = 0;
							$asshsusers = 0;
							$allhospizusers = '"9999999999999999",';
							$hospiz_users = array();
							foreach($usersHospizArray as $huser)
							{
								$hospiz_users[$huser['id']]['uid'] = $huser['id'];
								$hospiz_users[$huser['id']]['name'] = $huser['last_name'] . ", " . $huser['first_name'];
								$allhospizusers .= '"' . $huser['id'] . '",';
								if(in_array($huser['id'], $assignedusers))
								{
									$allhsusers++;
									$asshsusers++;
								}
								else
								{
									$allhsusers--;
								}
							}
		
							$nrofhs_users = count($hospiz_users);
							if($allhsusers == $nrofhs_users)
							{
								$hallgroup = 1;
							}
							else
							{
								$hallgroup = 0;
							}
		
							$this->view->hospiz_group = $hallgroup;
							$this->view->hospiz_assusers = $asshsusers;
							$this->view->hospiz_users = $hospiz_users;
							$this->view->hospiz_users_nr = count($hospiz_users);
		
							// HOSPIZVEREIN USERS
							$hospizvereingroup = array("10");
							$hospizvereinusers = $usergroup->getUserGroups($hospizvereingroup);
		
							$this->view->hospizvereingroup_id = $hospizvereingroup[0];
		
							if(count($hospizvereinusers) > 0)
							{
								foreach($hospizvereinusers as $hvgroup)
								{
									$hvgroupsarray[] = $hvgroup['id'];
								}
							}
							$hvusr = new User();
							$usersHospizvereinArray = $hvusr->getuserbyGroupId($hvgroupsarray, $clientid);
		
							$allhvusers = 0;
							$asshvusers = 0;
							$allhospizvereinusers = '"9999999999999999",';
							$hospizverein_users = array();
							foreach($usersHospizvereinArray as $hvuser)
							{
								$hospizverein_users[$hvuser['id']]['uid'] = $hvuser['id'];
								$hospizverein_users[$hvuser['id']]['name'] = $hvuser['last_name'] . ", " . $hvuser['first_name'];
								$allhospizvereinusers .= '"' . $hvuser['id'] . '",';
								if(in_array($hvuser['id'], $assignedusers))
								{
									$allhvusers++;
									$asshvusers++;
								}
								else
								{
									$allhvusers--;
								}
							}
		
							$nrofhv_users = count($hospizverein_users);
							if($allhvusers == $nrofhv_users)
							{
								$hvallgroup = 1;
							}
							else
							{
								$hvallgroup = 0;
							}
		
							$this->view->hospizverein_group = $hvallgroup;
							$this->view->hospizverein_assusers = $asshvusers;
							$this->view->hospizverein_users = $hospizverein_users;
							$this->view->hospizverein_users_nr = count($hospizverein_users);
		
							//koordinators users
							$coordgroup = array("6");
							$coordusers = $usergroup->getUserGroups($coordgroup);
							$coord_groupid = $coordusers[0];
		
							if(count($coordusers) > 0)
							{
								foreach($coordusers as $cogroup)
								{
									$coordarr[] = $cogroup['id'];
								}
							}
							$coordusr = new User();
							$usersCoordArray = $coordusr->getuserbyGroupId($coordarr, $clientid, true);
		
							$coordinators_users = array();
		
							if(!empty($usersCoordArray))
							{
								foreach($usersCoordArray as $couser)
								{
									$coordinators_users[] = $couser['id'];
								}
							}
		
							/*			 * ********* END Hospiz / Hospizvereins ************** */
							/*			 * *********Patient Contact ************** */
							if($this->getRequest()->isPost() && !isset($_POST['edit_date']) && $_REQUEST['mode'] != 'vv' && !isset($_POST['sgbv_id_edit']) && !isset($_POST['del_sgbv_id']) && !isset($_POST['vv_fallid']))
							{
									
								$previleges = new Pms_Acl_Assertion();
								$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
								if(!$return)
								{
									$this->_redirect(APP_BASE . "error/previlege");
									exit;
								}
								/*				 * *********save or update Patient Hospizverein ************** */
								if($_POST['hospizval'] == 1)
								{
									if($clientid == 48)
									{
										if($_POST['hospizverein'] == '1')
										{
											//SEND MESSAGE
											$allpatientinfo = $patientmaster->getMasterData($decid, 0);
											$patname = $allpatientinfo['last_name'] . ', ' . $allpatientinfo['first_name'];
											$message_entry .= "Der Patient " . $patname . " möchte eine Begleitung durch den Hospizdienst.";
											// for user id = 339
											$usertosend = 339; // andrealisske on clientid = 48
											//$usertosend = 370; // ancuta  on pms
											//modified ISPC 1189
											foreach($coordinators_users as $kusr => $usrid)
											{
												$mail = new Messages();
												$mail->sender = $logininfo->userid;
												$mail->clientid = $logininfo->clientid;
												$mail->recipient = $usrid;
												$mail->msg_date = date("Y-m-d H:i:s", time());
												$mail->title = Pms_CommonData::aesEncrypt('Hospizverein');
												$mail->content = Pms_CommonData::aesEncrypt($message_entry);
												$mail->recipients = implode(',', $coordinators_users);
												$mail->create_date = date("Y-m-d", time());
												$mail->create_user = $logininfo->userid;
												$mail->read_msg = '0';
												$mail->save();
											}
										}
									}
		
									if(empty($pat_phospiz))
									{
										$hosp = new Application_Form_PatientHospizverein();
										$ppost = $_POST;
										$ppost['ipid'] = $ipid;
										$hosp->InsertData($ppost);
										$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
									}
									else
									{
										$hosp = new Application_Form_PatientHospizverein();
										$ppost = $_POST;
										$ppost['ipid'] = $ipid;
										$hosp->UpdateData($ppost);
										$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
									}
								}
								elseif($_POST['ishospizset'] == 1)
								{
									$q = Doctrine_Query::create()
									->delete('PatientQpaMapping')
									->where('epid ="' . $epid . '" and userid in (' . substr($allhospizusers, 0, -1) . ') ');
									$q->execute();
		
									$u = Doctrine_Query::create()
									->delete('PatientUsers')
									->where('ipid ="' . $ipid . '" and userid in (' . substr($allhospizusers, 0, -1) . ') ');
									$u->execute();
		
									foreach($_POST[user_id] as $assignvalue)
									{
										$assign = new PatientQpaMapping();
										$assign->epid = $epid;
										$assign->userid = $assignvalue;
										$assign->clientid = $logininfo->clientid;
										$assign->assign_date = date("Y-m-d H:i:s", time());
										$assign->save();
		
										$vizibility = new PatientUsers();
										$vizibility->clientid = $logininfo->clientid;
										$vizibility->ipid = $ipid;
										$vizibility->userid = $assignvalue;
										$vizibility->create_date = date("Y-m-d H:i:s", time());
										$vizibility->save();
									}
		
									$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
								}
								elseif($_POST['removehsusers'] == 1)
								{
									$q = Doctrine_Query::create()
									->delete('PatientQpaMapping')
									->where('epid ="' . $epid . '" and userid in (' . substr($allhospizusers, 0, -1) . ') ');
									$q->execute();
		
									$u = Doctrine_Query::create()
									->delete('PatientUsers')
									->where('ipid ="' . $ipid . '" and userid in (' . substr($allhospizusers, 0, -1) . ') ');
									$u->execute();
		
									$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
								}
								elseif($_POST['ishospizvereinset'] == 1)
								{
									$q = Doctrine_Query::create()
									->delete('PatientQpaMapping')
									->where('epid ="' . $epid . '" and userid in (' . substr($allhospizvereinusers, 0, -1) . ') ');
									$q->execute();
		
		
									$u = Doctrine_Query::create()
									->delete('PatientUsers')
									->where('ipid ="' . $ipid . '" and userid in (' . substr($allhospizvereinusers, 0, -1) . ') ');
									$u->execute();
		
									foreach($_POST[user_id] as $assignvaluehv)
									{
										$assign = new PatientQpaMapping();
										$assign->epid = $epid;
										$assign->userid = $assignvaluehv;
										$assign->clientid = $logininfo->clientid;
										$assign->assign_date = date("Y-m-d H:i:s", time());
										$assign->save();
		
										$vizibility = new PatientUsers();
										$vizibility->clientid = $logininfo->clientid;
										$vizibility->ipid = $ipid;
										$vizibility->userid = $assignvaluehv;
										$vizibility->create_date = date("Y-m-d H:i:s", time());
										$vizibility->save();
									}
		
									$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
								}
								elseif($_POST['removehvusers'] == 1)
								{
									$q = Doctrine_Query::create()
									->delete('PatientQpaMapping')
									->where('epid ="' . $epid . '" and userid in (' . substr($allhospizvereinusers, 0, -1) . ') ');
									$q->execute();
		
		
									$u = Doctrine_Query::create()
									->delete('PatientUsers')
									->where('ipid ="' . $ipid . '" and userid in (' . substr($allhospizvereinusers, 0, -1) . ') ');
									$u->execute();
		
									$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
								}
								else
								{
									$contact_form = new Application_Form_ContactPersonMaster();
									//stamdaten
									// ISPC-1308
									/* $stam = new Application_Form_Stammdatenerweitert(); */
									$a_post = $_POST;
									$a_post['ipid'] = $ipid;
									//stamdaten insert
									/* $stam->InsertData($a_post); */
		
									$pm_form = new Application_Form_PatientMaster();
									if(strlen($a_post['real_contact_number']) > 0)
									{
										if(!empty($a_post['cnt_phone'])){
											$pm_form->UpdateContactNumber($a_post['cnt_phone'], '2');
										} else{
											$pm_form->UpdateContactNumber($a_post['cnt_mobile'], '2');
										}
									}
		
									if($contact_form->validate($_POST))
									{
										$contact_form->InsertDataSingle($a_post);
										$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
									}
									else
									{
										$contact_form->assignErrorMessages();
										$stam->assignErrorMessages();
										$cntstr.="grow12,";
										$this->view->error_message = $this->view->translate('missedsthtofill');
										$this->retainValues($_POST);
										$this->view->openhidediv = 1;
									}
								}
							}
		
							$pc = new ContactPersonMaster();
							$pcs = $pc->getPatientContact($ipid);
		
							if(count($pcs) > 0)
							{
								$detailsstr.=",grow12";
							}
		
							$contactgrid = new Pms_Grid($pcs, 1, count($pcs), "PatientContacts.html");
							$this->view->patient_contacts = $contactgrid->renderGrid();
		
							/* ---------------------Physiotherapists---------------------- */
							$phy = new PatientPhysiotherapist();
		
							$phy_array = $phy->getPatientPhysiotherapist($ipid);
							//print_r($phy_array);exit;
							if(count($phy_array) > 0)
							{
								$this->view->isphysio = 1;
		
								$detailsstr.=",grow15";
		
								$physiogrid = new Pms_Grid($phy_array, 1, count($phy_array), "PatientPhysiotherapist.html");
								$this->view->patient_physiotherapist = $physiogrid->renderGrid();
							}
							else
							{
								$this->view->isphysio = 0;
								$this->view->physiomsg = $this->view->translate("nophysio");
							}
														    
							/* -----------------------Homecares---------------------- */
							$home = new PatientHomecare();
		
							$home_array = $home->getPatientHomecare($ipid);
		
							if(count($home_array) > 0)
							{
								$this->view->ishome = 1;
		
								$detailsstr.=",grow15";
		
								$homegrid = new Pms_Grid($home_array, 1, count($home_array), "PatientHomecare.html");
								$this->view->patient_homecare = $homegrid->renderGrid();
							}
							else
							{
								$this->view->ishome = 0;
								$this->view->homemsg = $this->view->translate("nohome");
							}
								
							//Patient churches
							$chsp = new PatientChurches();
							$chsparray = $chsp->getPatientChurch($ipid);
		
							if(count($chsparray) > 0)
							{
								$this->view->ischurch = 1;
									
								$detailsstr.=",grow47";
									
								$churchgrid = new Pms_Grid($chsparray, 1, count($chsparray), "PatientChurches.html");
								$this->view->patient_churches = $churchgrid->renderGrid();
							}
							else
							{
								$this->view->ischurch = 0;
								$this->view->churchmsg = $this->view->translate("nochurch");
							}
		
		
							/*			 * ********************************************** */
		
							$frm = new ExtraForms();
							$displayfamilydoc = $frm->getClientPersmission($clientid, 9);
							$this->view->displayfamilydoc = $displayfamilydoc;
							$displaypharmacy = $frm->getClientPersmission($clientid, 26);
							$this->view->displaypharmacy = $displaypharmacy;
							$displayhealthinsurance = $frm->getClientPersmission($clientid, 10);
							$this->view->displayhealthinsurance = $displayhealthinsurance;
							$displaymobility = $frm->getClientPersmission($clientid, 5);
							$this->view->displaymobility = $displaymobility;
							$displaypatientlives = $frm->getClientPersmission($clientid, 1);
							$this->view->displaypatientlives = $displaypatientlives;
							$displaylivingwill = $frm->getClientPersmission($clientid, 6);
							$this->view->displaylivingwill = $displaylivingwill;
							$displaycarelevel = $frm->getClientPersmission($clientid, 7);
							$this->view->displaycarelevel = $displaycarelevel;
							$displayreligions = $frm->getClientPersmission($clientid, 8);
							$this->view->displayreligions = $displayreligions;
							$displaysupply = $frm->getClientPersmission($clientid, 4);
							$this->view->displaysupply = $displaysupply;
							$displaymoreinformation = $frm->getClientPersmission($clientid, 3);
							$this->view->displaymoreinformation = $displaymoreinformation;
							//for stamdaten page not working
							$displaypatientdet = $frm->getClientPersmission($clientid, 23);
							$this->view->displaypatientdet = $displaypatientdet;
							$displaycontactp = $frm->getClientPersmission($clientid, 12);
							$this->view->displaycontactp = $displaycontactp;
							$displaysapv = $frm->getClientPersmission($clientid, 11);
							$this->view->displaysapv = $displaysapv;
							$displayaufenthaltsort = $frm->getClientPersmission($clientid, 13);
							$this->view->displayaufenthaltsort = $displayaufenthaltsort;
							$displaypflegedienst = $frm->getClientPersmission($clientid, 15);
							$this->view->displaypflegedienst = $displaypflegedienst;
							$displayphysiotherapist = $frm->getClientPersmission($clientid, 47);
							$this->view->displayphysiotherapist = $displayphysiotherapist;
							$displayhomecare = $frm->getClientPersmission($clientid, 48);
							$this->view->displayhomecare = $displayhomecare;
							//from stamdaten e...
							$displayfamilienstand = $frm->getClientPersmission($clientid, 16);
							$this->view->displayfamilienstand = $displayfamilienstand;
							$displayvigilanz = $frm->getClientPersmission($clientid, 18);
							$this->view->displayvigilanz = $displayvigilanz;
							$displayernahrung = $frm->getClientPersmission($clientid, 20);
							$this->view->displayernahrung = $displayernahrung;
							$displaykunstliche = $frm->getClientPersmission($clientid, 22);
							$this->view->displaykunstliche = $displaykunstliche;
							$displaystaatszugehorigkeit = $frm->getClientPersmission($clientid, 17);
							$this->view->displaystaatszugehorigkeit = $displaystaatszugehorigkeit;
							$displayorientierung = $frm->getClientPersmission($clientid, 19);
							$this->view->displayorientierung = $displayorientierung;
							$displayausscheidung = $frm->getClientPersmission($clientid, 21);
							$this->view->displayausscheidung = $displayausscheidung;
							//new box
							$displayhilfsmittel = $frm->getClientPersmission($clientid, 24);
							$this->view->displayhilfsmittel = $displayhilfsmittel;
							$displayhilfsmittelII = $frm->getClientPersmission($clientid, 49);
							$this->view->displayhilfsmittelII = $displayhilfsmittelII;
							$displaywunsch = $frm->getClientPersmission($clientid, 25);
							$this->view->displaywunsch = $displaywunsch;
							$displaypatienthistory = $frm->getClientPersmission($clientid, 35);
							$this->view->displaypatienthistory = $displaypatienthistory;
							$displayvvhistory = $frm->getClientPersmission($clientid, 36);
							$this->view->displayvvhistory = $displayvvhistory;
							$displayplanning = $frm->getClientPersmission($clientid, 37);
							$this->view->displayplanning = $displayplanning;
							$displayvoluntary = $frm->getClientPersmission($clientid, 38);
							$this->view->displayvoluntary = $displayvoluntary;
							$displayhospizverein = $frm->getClientPersmission($clientid, 39);
							$this->view->displayhospizverein = $displayhospizverein;
							$displayhosizhospizverein = $frm->getClientPersmission($clientid, 40);
							$this->view->displayhospizhospizverein = $displayhosizhospizverein;
							$displaysupplies = $frm->getClientPersmission($clientid, 41);
							$this->view->displaysupplies = $displaysupplies;
							$displayhospiceservice = $frm->getClientPersmission($clientid, 42);
							$this->view->displayhospiceservice = $displayhospiceservice;
							$displaymedipumpe = $frm->getClientPersmission($clientid, 43);
							$this->view->displaymedipumpe = $displaymedipumpe;
							$displayspecialists = $frm->getClientPersmission($clientid, 44);
							$this->view->displayspecialists = $displayspecialists;
							$displayvisitssettings = $frm->getClientPersmission($clientid, 45);
							$this->view->displayvisitssettings = $displayvisitssettings;
							//Versorger(Aphotheke box)
							$displayversorger = $frm->getClientPersmission($clientid, 46);
							$this->view->displayversorger = $displayversorger;
							$displaychurch = $frm->getClientPersmission($clientid, 53);
							$this->view->displaychurch = $displaychurch;
							
							if(Modules::checkModulePrivileges("115", $clientid)) {
								$displaysystemsync = $frm->getClientPersmission($clientid, 50);
							} else {
								$displaysystemsync = 0;
							}
							$this->view->displaysystemsync = $displaysystemsync;
		
							if($allow_history_changes == "1"){
								$display_edit_history = $frm->getClientPersmission($clientid, 51);
							} else{
								$display_edit_history = "0";
							}
								
								
							$this->view->display_edit_history = $display_edit_history;
		
								
								
							/*			 * *************MEDI PUMPS********************** */
							$medipumps_client = new Medipumps();
							$client_mp = $medipumps_client->getMedipumps($clientid);
		
							foreach($client_mp as $k_mp => $v_mp)
							{
								$client_medipumps[$v_mp['id']] = $v_mp;
							}
							$this->view->client_medipumps = $client_medipumps;
		
							$medi_pump = new PatientMedipumps();
							$patientmedipumps = $medi_pump->get_patient_medipumps($ipid);
							$this->view->patientmedipumpe = $patientmedipumps;
		
							/*			 * *************MEDI PUMPS********************** */
							$totals = $displaymobility + $displaypatientlives + $displaylivingwill + $displaycarelevel + $displayreligions + $displaysupply + $displaymoreinformation;
							/*			 * *************Patient Information********************** */
		
							$fdoc = Doctrine_Query::create()
							->select('*')
							->from('ExtraFormsClient')
							->where('clientid =' . $logininfo->clientid . '')
							->andWhere('formid =1');
							$mncd = $fdoc->execute();
		
							if($mncd)
							{
								$fcarr = $mncd->toArray();
		
								if($totals > 0)
								{
									$allowedform = "allowed";
		
									/*					 * ***********Patient Lives*********** */
									$pl = new PatientLives();
									$pat_lives = $pl->getpatientLivesData($ipid);
		
									$patcnt = $pat_lives[0]['alone'] + $pat_lives[0]['house_of_relatives'] + $pat_lives[0]['apartment'] + $pat_lives[0]['home'] + $pat_lives[0]['hospiz'] + $pat_lives[0]['with_partner'] + $pat_lives[0]['with_child'] + $pat_lives[0]['sonstiges'];
									if($patcnt > 0)
									{
										$detailsstr.=",grow1";
									}
		
									$this->retainValues($pat_lives[0]);
		
										
									/*					 * ***********Patient Visits settings*********** */
									/*
									 $pl = new PatientVisitsSettings();
									 $pat_visits_settings = $pl->getPatientVisitsSettings($ipid);
		
									 if(!empty($pat_visits_settings))
									 {
									 $detailsstr.=",grow43";
									 $this->retainValues($pat_visits_settings[0]);
									 }
									 else
									 {
									 $this->view->visits_per_day = '1';
									 $this->view->visit_duration = '60';
									 }
									*/
										
									/* *********** IPSC-1533 Patient Visits settings *********** */
									$pl = new PatientVisitsSettings();
									$pat_visits_settings = $pl->getPatientVisitsSettingsV2($ipid);
									$disabled_users = array();
									if ( count( $pat_visits_settings ) > 0 ){
		
		
										if ($pat_visits_settings['visit_duration'] == "" || $pat_visits_settings['visit_duration'] == "0"){
											$getClientDataByid = Client :: getClientDataByid($logininfo->clientid);
											$pat_visits_settings['visit_duration'] = (int)$getClientDataByid[0] ['tagesplanung_default_visit_time'] ;
										}
		
										$this->view->visit_duration = $pat_visits_settings['visit_duration'];
		
										//get also the user that can visit
										$visiting_users = User::get_all_visiting_users_and_groups( $logininfo->clientid, false, false );
										$visiting_users_array = $visiting_users['user_details'];
		
										foreach($visiting_users_array as $user){
											if (	($user['makes_visits'] == "0")
													||
													(	( $user['isactive'] == "1" )
															&&
															( strtotime($user['isactive_date']) <= strtotime(date("Y-m-d") ))
													)
											)
											{
												//this doctor was marked as cannot make visit, but he allready has assigned ones
												$disabled_users[] = $user['id'];
											}
										}
		
										$normal_group= array();
										foreach($visiting_users['grups'] as $k=>$v){
											$normal_group = ($normal_group+$v + array($k=>$k));
										}
		
										foreach($pat_visits_settings as $user => $type){
											reset($type);
											$type = key($type);
												
											if (	($visiting_users_array[ $user ] ['makes_visits'] == "0")
													||
													(	( $visiting_users_array[ $user ] ['isactive'] == "1" )
															&&
															( strtotime($visiting_users_array[ $user ] ['isactive_date']) <= strtotime(date("Y-m-d") ))
													)
											)
											{
												//this doctor was marked as cannot make visit, but he allready has assigned ones
												$pat_visits_settings[$user]['is_disabled'] = true;
											}
												
											if ($type == "pseudogrups"){
												if (empty($visiting_users['pseudogrups'][$user])){
													unset( $pat_visits_settings[$user] );
												}
											}else{
												if (empty($normal_group[$user])){
													unset( $pat_visits_settings[$user] );
												}
											}
												
										}
										if (empty($disabled_users)) $disabled_users = array( 0 => "9999999");
										//print_r($pat_visits_settings);
										//print_r($visiting_users);	die();
										$this->view->pat_visits_settings = $pat_visits_settings;
										$this->view->pat_visits_settings_visiting_users = $visiting_users;
										$this->view->pat_visits_settings_disabled_users = json_encode($disabled_users);
		
									}else{
										//get default visit time of this client
										$getClientDataByid = Client :: getClientDataByid($logininfo->clientid);
										$this->view->visit_duration = (int)$getClientDataByid[0] ['tagesplanung_default_visit_time'] ;
										$this->view->pat_visits_settings_disabled_users = json_encode( array( 0 => "9999999") );
									}
		
									/*					 * ***********Patient Lives*********** */
		
									$pm = new PatientMobility();
									$pat_mob = $pm->getpatientMobilityData($ipid);
		
									$mobcnt = $pat_mob[0]['bed'] + $pat_mob[0]['walker'] + $pat_mob[0]['wheelchair'] + $pat_mob[0]['goable'] + $pat_mob[0]['nachtstuhl'] + $pat_mob[0]['wechseldruckmatraze'];
									if($mobcnt > 0)
									{
										$detailsstr.=",grow5";
									}
									$this->retainValues($pat_mob[0]);
		
									$pmf = new PatientMoreInfo();
									$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
		
									$morecnt = $pat_moreinfo[0]['dk'] + $pat_moreinfo[0]['peg'] + $pat_moreinfo[0]['port'] + $pat_moreinfo[0]['pumps'] + $pat_moreinfo[0]['zvk'];
									if($morecnt > 0)
									{
										$detailsstr.=",grow3";
									}
		
									$this->retainValues($pat_moreinfo[0]);
		
									$pms = new PatientMaintainanceStage();
									$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);
		
									$patcnt = $pat_pms[0]['erstantrag'] + $pat_pms[0]['horherstufung'];
		
									if(count($patcnt) > 0 || $pat_pms['stage'] != "")
									{
										$detailsstr.=",grow7";
									}
									$this->retainValues($pat_pms[0]);
		
									$rel = new PatientReligions();
									$pat_rel = $rel->getReligionsData($ipid);
									$relcnt = $pat_rel[0]['religion'];
									if($relcnt > 0)
									{
										$detailsstr.=",grow8";
									}
									$this->retainValues($pat_rel[0]);
								}
								else
								{
									$allowedform = "";
								}
							}
							$this->view->allowedform = $allowedform;
		
		
							$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
							$this->view->patientMasterData_array = $patientmaster->get_patientMasterData();
		
								
		
							$pms = new PatientMaintainanceStage();
							$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
							$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
							$this->view->carelevellist = $grid->renderGrid();
		
		
							$detailscookies = '""';
							$oc = new OverviewCookie();
							$ocarr = $oc->getCookieData($userid, "patientdetails");
		
							switch($ocarr[0]['useroption'])
							{
								case 1 : $detailscookies = $cntstr;
								break;
								case 2 : $detailscookies = "grow14," . $detailsstr;
								break;
								case 3 : $detailscookies = $ocarr[0]['cookie'];
								break;
								default : break;
							}
		
							$this->view->detailscookies = "'" . $cntstr . $detailscookies . "'";
		
							$tm = new TabMenus();
							$this->view->tabmenus = $tm->getMenuTabs();
		}
		
		
		public function patientdetailsAction()
		{

			$decid = Pms_Uuid::decrypt($_GET['id']);
			$pdata['patid'] = $decid;
			$pdata['patid2'] = $_GET['id'];
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			$pdata['epid'] = $epid;
			$pid = $this->view->$_GET['id'];
			$pdata['pid'] = $pid;
			$this->view->pid = $_GET['id'];
			
			$fd = new FamilyDegree();
			$pdata['familydegree'] = $fd->getFamilyDegrees(1);
			$this->view->familydegree = $fd->getFamilyDegrees(1);
			$verordnetarray = Pms_CommonData::getSapvCheckBox();
			$pdata['verordnetarray'] = $verordnetarray;
			$this->view->verordnetarray = $verordnetarray;

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid; 
			$userid = $logininfo->userid;
			$pdata['clientid'] = $clientid;
			if($_GET['msg'])
			{
				$this->view->error_message = $_GET['msg'];
			}
			//checkSpecificPermission
			
			$patient_details_edit = PatientPermissions::checkSpecificPermission(false,true);
			if(!$patient_details_edit){
				$pdata['disable_update'] = "1";
			} else{
				$pdata['disable_update'] = "0";
			}
			
			$modules = new Modules();
				
			if($modules->checkModulePrivileges("102", $clientid)) // primary status : Verordnung
			{
				$pdata['modul_custody'] = "1";
			}
			else
			{
				$pdata['modul_custody'] = "0";
			}
			
			if($modules->checkModulePrivileges("132", $clientid))
			{
				$pdata['show_height_detail'] = "1";
			}
			else
			{
				$pdata['show_height_detail'] = "0";
			}
			// ispc 1920
			$pdata['show_height_detail'] = "0";

			
			if($modules->checkModulePrivileges("147", $clientid))
			{
				$allow_history_changes = "1";
			}
			else
			{
				$allow_history_changes = "0";
			}
			
			$pdata['allow_history_changes'] = $allow_history_changes;
			
			
		
			/*			 * ******* Patient History ************ */
			$patientmaster = new PatientMaster();
			$patient_falls_master = $patientmaster->patient_falls($ipid);
			
			$cntstr = "";

			$default_pavt = Pms_CommonData::default_approved_visit_type(); // if nothing saved -> get default


			if($this->getRequest()->isPost() && $_REQUEST['mode'] == 'vv_edit')
			{
				$new_date = date('Y-m-d', strtotime($_POST['vv_edit_date']));
				$new_date_full = date('Y-m-d', strtotime($_POST['vv_edit_date'])) . ' ' . date('H:i:s', time());

				$previous_date = date('Y-m-d H:i:s', strtotime($_POST['vv_previous_date']));
				$next_date = date('Y-m-d H:i:s', strtotime($_POST['vv_next_date']));

				$previous_date_full = date('Y-m-d H:i:s', strtotime($_POST['vv_previous_date_full']));
				$next_date_full = date('Y-m-d H:i:s', strtotime($_POST['vv_next_date_full']));

				$current_date_full = date('Y-m-d H:i:s', strtotime($_POST['vv_current_date_full']));

				if(strtotime($new_date) < strtotime($previous_date))
				{
					$error = "date must be bigger then previous date";
				}
				elseif(strtotime($new_date) > strtotime($next_date))
				{
					$error = "date must be lower then next date";
				}
				elseif(strtotime($new_date) >= strtotime($previous_date) && strtotime($new_date) <= strtotime($next_date))
				{
					//update patient master if current_date_full == p.vollversorgung_date
					if($_POST['vv_date_type'] == '1')
					{
						$q_upd = Doctrine_Query::create()
							->update('PatientMaster')
							->set('vollversorgung_date','?', $new_date_full)
							->where('ipid LIKE ?', $ipid)
							->andWhere('vollversorgung_date	= ?', $current_date_full)
							->andWhere('vollversorgung = ?',"1");
						$q_exec = $q_upd->execute();
					}

					$q = Doctrine_Query::create()
						->update('VollversorgungHistory')
						->set('date','?', $new_date_full)
						->set('change_date','?', date('Y-m-d H:i:s'))
						->set('change_user','?', $userid)
						->where("ipid = ?", $ipid)
						->andWhere("date_type = ?", $_POST['vv_date_type'])
						->andWhere("date = ?", $current_date_full)
						->andWhere('id = ?', $_POST['vv_fallid']);
					$q->execute();
					$error = "date was edited";

					//add to Verlauf
					if($_POST['vv_date_type'] == 1)
					{
						$comment_log = 'Das Beginn Vollversorgung wurde editiert: ' . date('d.m.Y', strtotime($current_date_full)) . ' -> ' . date('d.m.Y', strtotime($new_date));
					}
					elseif($_POST['vv_date_type'] == 2)
					{
						$comment_log = 'Das Ende Vollversorgung wurde editiert: ' . date('d.m.Y', strtotime($current_date_full)) . ' -> ' . date('d.m.Y', strtotime($new_date));
					}

					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes($comment_log));
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}

				if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "patientnew/patientdetails") !== false) {
				    //ISPC-2173
				    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_REQUEST['id'] , array("exit"=>true));
				    exit; //for readability
				} else {
    				$this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				}
				
				exit;
			}

			$approve_visit_type_form = new Application_Form_PatientApprovedVisitTypes();
			if($this->getRequest()->isPost() && strlen($_POST['visit_type']) > 0)
			{
				$post_data = $_POST;
				$post_data['ipid'] = $ipid;
				$approve_visit_type = $approve_visit_type_form->InsertData($post_data);

				if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "patientnew/patientdetails") !== false) {
				    //ISPC-2173
				    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_REQUEST['id'] , array("exit"=>true));
				    exit; //for readability
				} else {
				    $this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				}
				exit;
			}

			if($this->getRequest()->isPost() && count($_POST['pavt_edit']) > 0)
			{
				$post_data = $_POST;
				$approve_visit_type = $approve_visit_type_form->UpdateData($post_data);

				if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "patientnew/patientdetails") !== false) {
				    //ISPC-2173
				    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_REQUEST['id'] , array("exit"=>true));
				    exit; //for readability
				} else {
				    $this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				}
				exit;
			}

			if($this->getRequest()->isPost() && strlen($_POST['del_pavt_id']) > 0)
			{
				$approve_visit_type = $approve_visit_type_form->DeleteData($_POST['del_pavt_id']);
				if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "patientnew/patientdetails") !== false) {
				    //ISPC-2173
				    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_REQUEST['id'] , array("exit"=>true));
				    exit; //for readability
				} else {
				    $this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				}
				exit;
			}

			$patient_medipumps_form = new Application_Form_PatientMedipumps();
			if($this->getRequest()->isPost() && strlen($_POST['add_medipump']) == '1')
			{
				$post_data = $_POST;
				$post_data['ipid'] = $ipid;
				$add_patient_medipump = $patient_medipumps_form->insert_patient_medipumps($post_data);
				//todo add todo entry for client koordinators with "Rezept Medikamentenpumpe bestätigen"
				//get koord groups
				$user_group = new Usergroup();
				$master_groups = array("6"); //Koordination master group
				$users_groups = $user_group->getUserGroups($master_groups);

				$text = 'Rezept Medikamentenpumpe bestätigen';
				if(count($users_groups) > 0)
				{
					foreach($users_groups as $group)
					{
						$records_todo[] = array(
							"client_id" => $clientid,
							"user_id" => $userid,
							"group_id" => $group['id'],
							"ipid" => $ipid,
							"todo" => $text,
							"triggered_by" => 'system_medipumps',
							"create_date" => date('Y-m-d H:i:s', time()),
							"until_date" => date('Y-m-d H:i:s', time())
						);
					}
				}

				if(count($records_todo) > 0)
				{
					$collection = new Doctrine_Collection('ToDos');
					$collection->fromArray($records_todo);
					$collection->save();
				}

				$this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				exit;
			}

			if($this->getRequest()->isPost() && strlen($_POST['edit_medipump']) == '1' && strlen($_POST['edit_medipump_id']) > 0)
			{
				$post_data = $_POST;
				$post_data['ipid'] = $ipid;

				$edit_patient_medipump = $patient_medipumps_form->update_patient_medipump($post_data, $_POST['edit_medipump_id']);

				$this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				exit;
			}

			if($this->getRequest()->isPost() && strlen($_POST['del_medipump']) == '1' && strlen($_POST['del_medipump_id']) > 0)
			{
				$delete_patient_medipump = $patient_medipumps_form->delete_patient_medipump($ipid, $_POST['del_medipump_id']);

				$this->_redirect(APP_BASE . 'patient/patientdetails?id=' . $_REQUEST['id'] . '&flg=suc');
				exit;
			}

			//update admission/discharge dates
			if($this->getRequest()->isPost() && strlen($_POST['sgbv_id_edit']) > 0)
			{
				$sgbv_status = new SgbvForms();
				$quick_change = $sgbv_status->quick_change_status($_POST['sgbv_id_edit'], $_POST['status_sgbv'], $_POST['approve_date']);

				$data['old_status'] = $_POST['sgbv_initial_status'];
				$data['status'] = $_POST['status_sgbv'];

				if($data['old_status'] != $data[status])
				{
					$sgbv_history = new Application_Form_SgbvFormsHistory();
					$save_history = $sgbv_history->InsertHistorySgbvData($data, $_POST['sgbv_id_edit']);
				}
			}

			// delete sgbv
			if($this->getRequest()->isPost() && strlen($_POST['del_sgbv_id']) > 0)
			{
				$sgbv_status = new SgbvForms();
				$quick_change = $sgbv_status->delete_sgbv($_POST['del_sgbv_id']);
				
				if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "patientnew/patientdetails") !== false) {
				    //ISPC-2173
				    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
				    exit; //for readability					
				}
			}

			if($this->getRequest()->isPost() && isset($_POST['fald']) && !empty($_POST['edit_date']) && !empty($_POST['date_type']) && !isset($_POST['del_sgbv_id']))
			{
			    //save from Fallhistorie ?
			    
				$new_date = date('Y-m-d', strtotime($_POST['edit_date'])) . ' ' . date('H:i:s', strtotime($_POST['edit_time']));
				$previous_date = $_POST['previous_date'];
				$next_date = $_POST['next_date'];
				$fall_type = $_POST['fall_type']; 

				
				$previous_fall_type = $patient_falls_master['falls'][$_POST['fall_nr']-1][0];
				$next_fall_type = $patient_falls_master['falls'][$_POST['fall_nr']+1][0];
				
				
				// Update only if the date was changed
				if( strtotime(date("Y-m-d H:i",strtotime($new_date))) !=  strtotime(date("Y-m-d H:i",strtotime($_POST['current_date'])))){
				    
    				if(strtotime($new_date) <= strtotime($previous_date))
    				{
    					$error = "date must be bigger then previous date";
    				}
    				elseif(strtotime($new_date) >= strtotime($next_date))
    				{
    					$error = "date must be lower then next date";
    				}
    				elseif(date("Y",strtotime($new_date)) < "2008")
    				{
    					$error = "admission_date_error_before_2008";
    				}
    				elseif(strtotime($new_date) > strtotime($previous_date) && strtotime($new_date) < strtotime($next_date))
    				{
    					if($fall_type == "standbydelete"){
    						
							// edit standby delete start /  end
							if($_POST['date_type'] == "1"){
								// change stanby end and standbydelete start
								$q = Doctrine_Query::create()
								->update('PatientStandbyDeleteDetails')
								->set('date','?', $new_date)
								->set('change_date','?', date('Y-m-d H:i:s'))
								->set('change_user','?', $userid)
								->where("ipid = ?", $ipid)
								->andWhere("date_type = ?",  $_POST['date_type'])
								->andWhere("date = ?", $_POST['current_date']);
								$q->execute();
								
								PatientMaster::get_patient_standbydelete_admissions($ipid);
								
								$q = Doctrine_Query::create()
								->update('PatientStandbyDetails')
								->set('date','?', $new_date)
								->set('change_date','?', date('Y-m-d H:i:s'))
								->set('change_user','?', $userid)
								->where("ipid = ?", $ipid)
								->andWhere("date_type = ?", 2)
								->andWhere("date = ?", $_POST['current_date']);
								$q->execute();
								
								PatientMaster::get_patient_standby_admissions($ipid);
							}	
							elseif($_POST['date_type'] == "2"){
								
								// change stanby start and standbydelete end
								$q = Doctrine_Query::create()
								->update('PatientStandbyDeleteDetails')
								->set('date','?', $new_date)
								->set('change_date','?', date('Y-m-d H:i:s'))
								->set('change_user','?', $userid)
								->where("ipid = ?", $ipid)
								->andWhere("date_type = ?",  $_POST['date_type'])
								->andWhere("date = ?", $_POST['current_date']);
								$q->execute();
								
								PatientMaster::get_patient_standbydelete_admissions($ipid);
								
								$q = Doctrine_Query::create()
								->update('PatientStandbyDetails')
								->set('date','?', $new_date)
								->set('change_date','?', date('Y-m-d H:i:s'))
								->set('change_user','?', $userid)
								->where("ipid = ?", $ipid)
								->andWhere("date_type = ?", 1)
								->andWhere("date = ?", $_POST['current_date']);
								$q->execute();
								
								PatientMaster::get_patient_standby_admissions($ipid);
							}

							
							//add to Verlauf
							if($_POST['date_type'] == 1)
							{
								$comment_log = 'Das Gelöschte Anfragen aufnahmedatum wurde editiert: ' . date('d.m.Y H:i', strtotime($_POST['current_date'])) . ' -> ' . date('d.m.Y H:i', strtotime($new_date));
							}
							elseif($_POST['date_type'] == 2)
							{
								$comment_log = 'Das Gelöschte Anfragen entlassungsdatum wurde editiert: ' . date('d.m.Y H:i', strtotime($_POST['current_date'])) . ' -> ' . date('d.m.Y H:i', strtotime($new_date));
							}
							
							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes($comment_log));
							$cust->user_id = $logininfo->userid;
							$cust->save();
							
							
							if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "patientnew/patientdetails") !== false) {
							    //ISPC-2173							
							    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
							    exit; //for readability
							    
							} else {
    							$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
							}
											
							
 
					}
					else
					{

						
						if($fall_type == "standby"){
							
							if( $_POST['date_type']== "2" && $next_fall_type == "standbydelete"){
								
								// change standby delete start 
								$q = Doctrine_Query::create()
								->update('PatientStandbyDeleteDetails')
								->set('date','?', $new_date)
								->set('change_date','?', date('Y-m-d H:i:s'))
								->set('change_user','?', $userid)
								->where("ipid = ?", $ipid)
								->andWhere("date_type = ?",  1)
								->andWhere("date = ?", $_POST['current_date']);
								$q->execute();
								
								PatientMaster::get_patient_standbydelete_admissions($ipid);
							} 
							elseif( $_POST['date_type']== "1" && $previous_fall_type == "standbydelete")
							{
								// change stanby end and standbydelete start
								$q = Doctrine_Query::create()
								->update('PatientStandbyDeleteDetails')
								->set('date','?', $new_date)
								->set('change_date','?', date('Y-m-d H:i:s'))
								->set('change_user','?', $userid)
								->where("ipid = ?", $ipid)
								->andWhere("date_type = ?",  2)
								->andWhere("date = ?", $_POST['current_date']);
								$q->execute();
								
								PatientMaster::get_patient_standbydelete_admissions($ipid);
								
							}
						}
    					
    					$q = Doctrine_Query::create()
    						->update('PatientReadmission')
    						->set('date','?', $new_date)
    						->set('change_date','?', date('Y-m-d H:i:s'))
    						->set('change_user','?', $userid)
    						->where("ipid = ?", $ipid)
    						->andWhere("date_type = ?",  $_POST['date_type'])
    						->andWhere("date = ?", $_POST['current_date']);
    					$q->execute();

    					
    					$st_type = $_POST['date_type'];
						if($fall_type == 'active' && $_POST['date_type'] == 1){
							// update dischaerge_standby
							$st_type = "2";
						}
						
    					// UPDATE STANDBY
    					$q = Doctrine_Query::create()
    					->update('PatientStandbyDetails')
    					->set('date','?', $new_date)
    					->set('change_date','?', date('Y-m-d H:i:s'))
    					->set('change_user','?', $userid)
    					->where("ipid = ?", $ipid)
    					->andWhere("date_type = ?",  $st_type)
    					->andWhere("date = ?", $_POST['current_date']);
    					$q->execute();
    						
    					PatientMaster::get_patient_standby_admissions($ipid);
    						

    					$details_p = Doctrine_Query::create()
    					->select('*')
    					->from('PatientMaster')
    					->where("ipid = ?", $ipid)
    					->andWhere("admission_date = ?", $_POST['current_date']);
    					$details_pq = $details_p->fetchArray();
    					
    					if(!empty($details_pq)){
    						$adm_date_edit = $details_pq[0]['admission_date'];
    						//update patient master
    						$qa = Doctrine_Query::create()
    						->update('PatientMaster')
    						->set('admission_date','?',$new_date)
    						->set('change_date', '?',date('Y-m-d H:i:s'))
    						->set('change_user', '?',$userid)
    						->where("ipid = ?", $ipid);
    						$qa->execute();
    						
    						
    						$details_pr = Doctrine_Query::create()
    						->select('*')
    						->from('PatientReadmission')
    						->where("ipid = ?", $ipid)
    						->andWhere("date = ?", $adm_date_edit)
    						->andWhere("date_type = ?",  1);
    						$details_pqr = $details_pr->fetchArray();
    						
    						
    						if(!empty($details_pqr)){
	    						$q = Doctrine_Query::create()
	    						->update('PatientReadmission')
	    						->set('date','?', $new_date)
	    						->set('change_date','?', date('Y-m-d H:i:s'))
	    						->set('change_user','?', $userid)
	    						->where("ipid = ?", $ipid)
	    						->andWhere("date_type = ?", 1)
	    						->andWhere("date = ?", $_POST['current_date']);
	    						$q->execute();
    						}
    						
    					}
    					
    					
    					
    					
    					if($_POST['fald'] == 1)
    					{
    						//edited date is latest admission
    						if($_POST['date_type'] == 1)
    						{
    							//update patient master
    							$qa = Doctrine_Query::create()
    								->update('PatientMaster')
    								->set('admission_date','?',$new_date)
    								->set('change_date', '?',date('Y-m-d H:i:s'))
    								->set('change_user', '?',$userid)
    								->where("ipid = ?", $ipid);
    							$qa->execute();
    							
    							$q = Doctrine_Query::create()
    							->update('PatientStandbyDetails')
    							->set('date','?', $new_date)
    							->set('change_date','?', date('Y-m-d H:i:s'))
    							->set('change_user','?', $userid)
    							->where("ipid = ?", $ipid)
    							->andWhere("date_type = ?",  2)
    							->andWhere("date = ?", $_POST['current_date']);
    							$q->execute();
    							
    							PatientMaster::get_patient_standby_admissions($ipid);
    							
    						}
    					}
    						
    					if($_POST['date_type'] == 2)
    					{
    						//update patient discharge
    						$qd = Doctrine_Query::create()
    							->update('PatientDischarge')
    							->set('discharge_date','?', $new_date)
    							->set('change_date','?', date('Y-m-d H:i:s'))
    							->set('change_user','?', $userid)
    							->where("ipid = ?", $ipid)
    							->andWhere("discharge_date = ?", $_POST['current_date']);
    						$qd->getSqlQuery();
    						$qd->execute();
    						
    						
    						$q = Doctrine_Query::create()
    						->update('PatientStandbyDetails')
    						->set('date','?', $new_date)
    						->set('change_date','?', date('Y-m-d H:i:s'))
    						->set('change_user','?', $userid)
    						->where("ipid = ?", $ipid)
    						->andWhere("date_type = ?",  1)
    						->andWhere("date = ?", $_POST['current_date']);
    						$q->execute();
    							
    						PatientMaster::get_patient_standby_admissions($ipid);
    						
    					}
    
    
    					$error = "date was edited";
    
    					//add to Verlauf
    					if($_POST['date_type'] == 1)
    					{
    						$comment_log = 'Das Aufnahmedatum wurde editiert: ' . date('d.m.Y H:i', strtotime($_POST['current_date'])) . ' -> ' . date('d.m.Y H:i', strtotime($new_date));
    					}
    					elseif($_POST['date_type'] == 2)
    					{
    						$comment_log = 'Das Entlassungsdatum wurde editiert: ' . date('d.m.Y H:i', strtotime($_POST['current_date'])) . ' -> ' . date('d.m.Y H:i', strtotime($new_date));
    					}
    
    					$cust = new PatientCourse();
    					$cust->ipid = $ipid;
    					$cust->course_date = date("Y-m-d H:i:s", time());
    					$cust->course_type = Pms_CommonData::aesEncrypt("K");
    					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes($comment_log));
    					$cust->user_id = $logininfo->userid;
    					$cust->save();
    					
    					
    					if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "patientnew/patientdetails") !== false) {
    					    //ISPC-2173    					 
    					    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
    					    exit; //for readability
    					} else {
    					   $this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
    					}
    					
    					
    				}
    				}
			     }
			}


			
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$iscl = Pms_Plugin_Acl::getClientTabmenuAccess($logininfo->clientid);
			if(!$iscl)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$pdata['isdischarged'] = 0;
			if($isdicharged)
			{
				$pdata['isdischarged'] = 1;
			}
			/* ######################################################### */

			$rl = new PatientReligions();
			$pdata['religions'] = $rl->getReligionsNames();

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'canview');
			$pdata['patmclass'] = "active";
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if(isset($_REQUEST['flg']) && $_REQUEST['flg'] == 'suc')
			{
				$pdata['error_message'] = $this->view->translate("recordupdatedsucessfully");
			}

			$pdata['act'] = "patient/patientdetails?id=" . $_REQUEST['id'];

			$pdata['pid'] = $_GET['id'];
			/*			 * ******* Stamdaten Information ************ */
//Stamdaten start
			$stam = new Stammdatenerweitert();
			$pdata['familienstands'] = $stam->getFamilienstandfun();
			$pdata['stastszugehorigkeits'] = $stam->getStastszugehorigkeitfun();
			$pdata['vigilanzs'] = $stam->getVigilanzfun();
			$pdata['living_will_r'] = $stam->getLivingWill();
			$pdata['orientierungs'] = $stam->getOrientierungfun();
			$pdata['ernahrungs'] = $stam->getErnahrungfun();
			$pdata['ausscheidungs'] = $stam->getAusscheidungfun();
			$pdata['kunstliches'] = $stam->getKunstlichefun();
			$pdata['radiobuttonoptions'] = $stam->getRadioOptionsfun();

			$stamarr = $stam->getStammdatenerweitert($ipid);

			/* stamdaten new box */
			$hilfsmittel = array('1' => "O2", '2' => "Toilettensitz", '3' => "Pflegebett", '4' => "Rollstuhl", "5" => "Rollator", "6" => "Nachtstuhl", "7" => "Wechseldruckmatratze");
			$pdata['hilfsmittels'] = $hilfsmittel;

			$wunsch = array("1" => "Zu Hause bleiben können", "2" => "kein Krankenhaus", "3" => "Autonomie", "4" => "Leidenslinderung", "5" => "Symptomlinderung",
				"6" => "mehr Kraft", "7" => "wieder aufstehen können", "8" => "noch eine Reise machen",
				"9" => "In Ruhe gelassen werden", "10" => "Keine Angabe", "11" => "Frage nach aktiver Sterbehilfe",
				"12" => "Lebensbeendigung", "13" => "Expliziter Wunsch");
			$pdata['wunschs'] = $wunsch;

			$hospitz = array("1" => "Hospiz");
			$pdata['hospitzs'] = $hospitz;

			if(isset($stamarr[0]))
			{
				if($stamarr[0]['familienstand'] > 0)
				{
					$detailsstr.=",grow16";
				}

				if($stamarr[0]['hilfsmittel'] > 0)
				{
					$detailsstr.=",grow30";
				}

				if($stamarr[0]['wunsch'] > 0)
				{
					$detailsstr.=",grow31";
				}

				if($stamarr[0]['vigilanz'] > 0)
				{
					$detailsstr.=",grow18";
				}

				if($stamarr[0]['stastszugehorigkeit'] > 0)
				{
					$detailsstr.=",grow17";
				}

				if(strlen($stamarr[0]['ernahrung']) > 0)
				{
					$detailsstr.=",grow20";
				}

				if(strlen($stamarr[0]['kunstliche']) > 0)
				{
					$detailsstr.=",grow22";
				}

				if(strlen($stamarr[0]['orientierung']) > 0 || $stamarr[0]['sprachlich'] > 0 || $stamarr[0]['kognitiv'] > 0 || $stamarr[0]['horprobleme'] > 0)
				{
					$detailsstr.=",grow19";
				}

				if(strlen($stamarr[0]['ausscheidung']) > 0)
				{
					$detailsstr.=",grow21";
				}
				$this->retainValues($stamarr[0]);


				$pdata['ernahrung'] = explode(',', $stamarr[0]['ernahrung']);
				$pdata['hilfsmittel'] = explode(',', $stamarr[0]['hilfsmittel']);
				$pdata['wunsch'] = explode(',', $stamarr[0]['wunsch']);
				$pdata['wunschmore'] = $stamarr[0]['wunschmore'];
				$pdata['orientierung'] = explode(',', $stamarr[0]['orientierung']);
				$pdata['kunstliche'] = explode(',', $stamarr[0]['kunstliche']);
				$pdata['kunstlichemore'] = $stamarr[0]['kunstlichemore'];
				$pdata['ausscheidung'] = explode(',', $stamarr[0]['ausscheidung']);
				$pdata['familienstand'] = $stamarr[0]['familienstand'];
				$pdata['stastszugehorigkeit'] = $stamarr[0]['stastszugehorigkeit'];
				$pdata['vigilanz'] = $stamarr[0]['vigilanz'];
				$pdata['sprachlich'] = $stamarr[0]['sprachlich'];
				$pdata['kognitiv'] = $stamarr[0]['kognitiv'];
				$pdata['horprobleme'] = $stamarr[0]['horprobleme'];
				$pdata['anderefree'] = $stamarr[0]['anderefree'];
		
			}
			$pdata['id_record'] = $ipid;
			$pdata['pat_enc_id'] = $_GET['id'];
//Stamdaten end

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$patientdetails = $patientmaster->getMasterData($decid, 0);

			$this->view->kontactnumber_dec = $patientdetails['kontactnumber_dec'];
			$this->view->kontactnumbertype = $patientdetails['kontactnubertype'];
			$this->view->patient_phone = $patientdetails['phone'];
			$this->view->patient_mobile = $patientdetails['mobile'];
			$this->view->hospitzz = $patientdetails['ishospiz'];
			$this->view->isstandby = $patientdetails['isstandby'];
			$this->view->isstandbydelete = $patientdetails['isstandbydelete'];
			
			
			//end vollversorgung from fallhistory
			if($this->getRequest()->isPost() && $_REQUEST['mode'] == 'vv')
			{

				if($patientdetails['vollversorgung'] == 1)
				{

					if(strlen($_POST['end_vv_date']) > '0')
					{
						//if anlage is started then insert an end
						$voll_date = date('Y-m-d', strtotime($_POST['end_vv_date'])) . ' ' . date('H:i:s', time());
						$vollhistory = new VollversorgungHistory();
						$vollhistory->ipid = $ipid;
						$vollhistory->user_id = $logininfo->userid;
						$vollhistory->date = $voll_date;
						$vollhistory->date_type = "2"; //1 =add voll 2- dismiss voll
						$vollhistory->save();

						// reset date in patient master
						$custpm = Doctrine::getTable('PatientMaster')->find($decid);
						$custpm->vollversorgung = 0;
						$custpm->vollversorgung_date = "0000-00-00 00:00:00";
						$custpm->save();

						$cust = new PatientCourse();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt($this->view->translate('end_vollversorgung_verlauf'));
						$cust->user_id = $userid;
						$cust->done_date = $voll_date;
						$cust->save();
					}
				}
				else
				{
					if(strlen($_POST['start_vv_date']) > '0')
					{
						//if anlage is NOT started then insert a start
						$voll_date = date('Y-m-d', strtotime($_POST['start_vv_date'])) . ' ' . date('H:i:s', time());
						$vollhistory = new VollversorgungHistory();
						$vollhistory->ipid = $ipid;
						$vollhistory->user_id = $logininfo->userid;
						$vollhistory->date = $voll_date;
						$vollhistory->date_type = "1"; //1 =add voll 2- dismiss voll
						$vollhistory->save();

						// reset date in patient master
						$custpm = Doctrine::getTable('PatientMaster')->find($decid);
						$custpm->vollversorgung = 1;
						$custpm->vollversorgung_date = $voll_date;
						$custpm->save();

						$cust = new PatientCourse();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt($this->view->translate('start_vollversorgung_verlauf'));
						$cust->user_id = $userid;
						$cust->done_date = $voll_date;
						$cust->save();
					}
				}
				
				if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "patientnew/patientdetails") !== false) {
				    //ISPC-2173
				    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_REQUEST['id'] , array("exit"=>true));
				    exit; //for readability
				}
			}

			$pdata['kontactnumber_dec'] = $patientdetails['kontactnumber_dec'];
			$pdata['kontactnumbertype'] = $patientdetails['kontactnubertype'];
			$pdata['patient_phone'] = $patientdetails['phone'];
			$pdata['patient_mobile'] = $patientdetails['mobile'];
			$pdata['hospitzz'] = $patientdetails['ishospiz'];
			$pdata['isstandby'] = $patientdetails['isstandby'];
			$pdata['isstandbydelete'] = $patientdetails['isstandbydelete'];
			$pdata['living_will'] = $patientdetails['living_will'];
			$pdata['living_will_deposited'] = $patientdetails['living_will_deposited'];

			if($patientdetails)
			{
				$this->retainValues($patientdetails);
			}
			if($patientdetails['living_will_from'] != "0000-00-00" && $patientdetails['living_will_from'] != "0000-00-00 00:00" && !empty($patientdetails['living_will_from']) && $patientdetails['living_will_from'] != 0)
			{
				$pdata['living_will_from'] = date("d.m.Y", strtotime($patientdetails['living_will_from']));
			}
			else
			{
				$pdata['living_will_from'] = "";
			}
			$pdata['sex'] = Pms_CommonData::getGenderById($patientdetails['sex']);

			/*			 * ******* Patient History ************ */
			//$patient_falls_master = $patientmaster->patient_falls($ipid);
// 			print_r($patient_falls_master); exit;
			
			/*
			
			$first_admission = date('Y-m-d H:i:s', strtotime($patientdetails['admission_date']));
			$lastdischarge = PatientDischarge::getPatientLastDischarge($ipid);

			
			//------------------------- STANDBY DETAILS ------------------------------------      
			$standby_details_m = new PatientStandbyDetails();
			$standbyarray_bydate = $standby_details_m->get_all_standby_details($ipid);
			$standbyarray = $standby_details_m->get_patient_standby_details_all_sorted($ipid);
			
			$st_adm_continuu = "0";
			$st_dis_continuu = "0";
			if(!empty($standbyarray_bydate))
			{
				 
				foreach($standbyarray_bydate as $ak=>$adates){
					if($adates['date_type'] == "1" && $adates['date_type'] == $standbyarray_bydate[$ak+1]['date_type']){
						$st_adm_continuu = "1";
					}
			
					if($adates['date_type'] == "2" && $adates['date_type'] == $standbyarray_bydate[$ak+1]['date_type']){
						$st_dis_continuu = "1";
					}
				}
			}

			
			if(!empty($standbyarray))
			{
				$fall_st = 1;
				
				if(!$fall_ov){
					$fall_ov = 1;
				} else{
					$fall_ov = $fall_ov;
				}
				 
				foreach($standbyarray as $adm_item)
				{
					if($adm_item['date_type'] == "1"){
						$st_admissions[] = $adm_item['date'];
					} else{
						$st_discharges[] = $adm_item['date'];
					}
			
					$patient_falls_st[$fall_st][$adm_item['date_type']] = $adm_item['date'];
					if(count($patient_falls_st[$fall_st]) == "2"){
						$fall_st++;
					}
					
					$patient_falls_overall[$fall_ov][$adm_item['date_type']] = $adm_item['date'];
					$patient_falls_overall[$fall_ov][0] = 'standby';
					if(count($patient_falls_overall[$fall_ov]) == "3"){
						$fall_ov++;
					}
						
					$patient_history_st[$adm_item['date']] = $adm_item['date_type'];
					$standby_date_array[] = date("d.m.Y",strtotime($adm_item['date']));
				}
				 
				$first_admission_ever = $st_admissions[0];
				 
			}
			else
			{
				if($patientdetails['isstandby'] == "1"){
					
					if(!$fall_ov){
						$fall_ov = 1;
					} else{
						$fall_ov = $fall_ov;
					}
					
					$patient_falls_overall[$fall_ov][1] = $first_admission;
					$patient_falls_overall[$fall_ov][0] = 'standby';
					
					$standby_date_array[] = date("d.m.Y",strtotime($first_admission));
				}
			}
			print_R("\n");
			print_R('standby');
			print_R($patient_falls_overall);
			print_R("\n");
			//------------------------- STANDBYDELETE DETAILS ------------------------------------      
			$standbydelete_details = new PatientStandbyDeleteDetails();
			$standbyarray_del_bydate = $standbydelete_details->get_all_standby_details($ipid);
			$standbyarray_del = $standbydelete_details->get_patient_standby_details_all_sorted($ipid);

			if(!empty($standbyarray_del))
			{
				$fall_std = 1;
			
				if(!$fall_ov){
					$fall_ov = 1;
				} else{
					$fall_ov = $fall_ov+100;
				
				}
				foreach($standbyarray_del as $adm_item)
				{
					if($adm_item['date_type'] == "1"){
						$std_admissions[] = $adm_item['date'];
					} else{
						$std_discharges[] = $adm_item['date'];
					}
			
					$patient_falls_st[$fall_std][$adm_item['date_type']] = $adm_item['date'];
					if(count($patient_falls_st[$fall_std]) == "2"){
						$fall_std++;
					}
			
					$patient_falls_overall[$fall_ov][$adm_item['date_type']] = $adm_item['date'];
					$patient_falls_overall[$fall_ov][0] = 'standbydelete';
					if(count($patient_falls_overall[$fall_ov]) == "3"){
						$fall_ov++;
					}
						
					$patient_history_st[$adm_item['date']] = $adm_item['date_type'];
					$standbydelete_date_array[] = date("d.m.Y",strtotime($adm_item['date']));
				}
					
				$first_admission_ever = $std_admissions[0];
					
			}
			else
			{
					
				if($patientdetails['isstandbydelete'] == "1"){
					if(!$fall_ov){
						$fall_ov = 1;
					} else{
						$fall_ov = $fall_ov+100;
					}
					$patient_falls_overall[$fall_ov][1] = $first_admission;
					$patient_falls_overall[$fall_ov][0] = 'standbydelete';
				}
				$standbydelete_date_array[] = date("d.m.Y",strtotime($first_admission));
			}
			
			
			if($_REQUEST['pfalls'] == "1")
			{
				print_R("\n");
				print_R('standbydelete');
				print_r($patient_falls_overall);// exit;
				print_r('before readmission');// exit;
			}
			
			//------------------------- READMISSION DETAILS -----------------------------------      
			$readmission_dates = new PatientReadmission();
			$admisiondatesarray_bydate = $readmission_dates->getPatientReadmissionAll($ipid);
			$admisiondatesarray = $readmission_dates->get_patient_readmission_all($ipid);
			
			
            $adm_continuu = "0";
            $dis_continuu = "0";
			if(!empty($admisiondatesarray_bydate))
			{
			    
			     foreach($admisiondatesarray_bydate as $ak=>$adates){
			         if($adates['date_type'] == "1" && $adates['date_type'] == $admisiondatesarray_bydate[$ak+1]['date_type']){
			             $adm_continuu = "1";
			         }
			         
			         if($adates['date_type'] == "2" && $adates['date_type'] == $admisiondatesarray_bydate[$ak+1]['date_type']){
			             $dis_continuu = "1";
			         }
			     }
			}			
			
			if(!empty($admisiondatesarray))
			{
    			$fall = 1;
    			
    			if(!$fall_ov){
    				$fall_ov = 1;			
    			} else{
    				$fall_ov = $fall_ov+1000;			
    				
    			}
    			
    			foreach($admisiondatesarray as $adm_item)
    			{
    			    if($adm_item['date_type'] == "1"){
    			        $admissions[] = $adm_item['date'];
    			    } else{
    			        $discharges[] = $adm_item['date'];
    			    }
    
    				$patient_falls[$fall][$adm_item['date_type']] = $adm_item['date'];
    			    if(count($patient_falls[$fall]) == "2"){
    			        $fall++;
    			    }
    			    
    			    if($_REQUEST['pfalls'] == "1")
    			    {
	    			    print_R("\n");
	    			    print_R($adm_item['date']);
	    			    print_R("\n");
	    			    var_dump(in_array(date('d.m.Y',strtotime($adm_item['date'])), $standby_date_array)); 
	    			    var_dump($adm_item['date'] != $admissions[0]); 
	    			    var_dump($patientdetails['isstandbydelete'] == '1');
	    			    var_dump( in_array(date('d.m.Y',strtotime($adm_item['date'])), $standby_date_array) && ( $patientdetails['isstandbydelete'] == '1') );   
    			    }
    			    if(in_array(date('d.m.Y',strtotime($adm_item['date'])), $standby_date_array) && ( $patientdetails['isstandbydelete'] == '1')){
    			    	
    			    } else{
	    			    
	    				$patient_falls_overall[$fall_ov][$adm_item['date_type']] = $adm_item['date'];
	    				if(in_array(date('d.m.Y',strtotime($adm_item['date'])), $standby_date_array) && ($adm_item['date'] != $first_admission && $patientdetails['isstandby']!= '0')){
		    				$patient_falls_overall[$fall_ov][0] = 'standby';
	    				} else{
	    					
	    					if($adm_item['date'] == $first_admission && $patientdetails['isstandby'] == '1'){
		    					$patient_falls_overall[$fall_ov][0] = 'standby';
	    					}
	    					elseif($adm_item['date'] == $first_admission && $patientdetails['isstandbydelete'] == '1'){
		    					$patient_falls_overall[$fall_ov][0] = 'standbydelete';
	    					} else{
		    				$patient_falls_overall[$fall_ov][0] = 'active';
	    						
	    					}
	    				}
	    			    if(count($patient_falls_overall[$fall_ov]) == "3"){
	    			        $fall_ov++;
	    			    }
	    			    
	    				$patient_history[$adm_item['date']] = $adm_item['date_type'];
	    				$date_array[] = $adm_item['date'];
    				}
    			}
    			
    			$first_admission_ever = $admissions[0];
    			
			} 
			else
			{

				if(!$fall_ov){
					$fall_ov = 1;
				} else{
					$fall_ov = $fall_ov+1000;
				
				}
				
			    $patient_falls[1][1] = $first_admission;
			    $patient_falls_overall[$fall_ov][1] = $first_admission;
			    
			    
			    if($patientdetails['isstandby'] == '1'){
			    	$patient_falls_overall[$fall_ov][0] = 'standby';
			    }
			    elseif($patientdetails['isstandbydelete'] == '1'){
			    	$patient_falls_overall[$fall_ov][0] = 'standbydelete';
			    } else{
			    	$patient_falls_overall[$fall_ov][0] = 'active';
			    
			    }
			    
			    
			    $first_admission_ever = $first_admission;
			    if($lastdischarge){
    			    $patient_falls[1][2] = $lastdischarge[0]['discharge_date'];
    			    $patient_falls_overall[$fall_ov][2] = $lastdischarge[0]['discharge_date'];
			    }   
			    $date_array[] = $first_admission;
			    $date_array[] = $first_admission;
			}

			if($_REQUEST['pfalls'] == "1")
			{
				print_r($patient_falls_overall);
			} 
				
			
			foreach($patient_falls_overall as $per_id=>$per_arr){
				ksort($per_arr);
				$patient_falls_overall_final[$per_arr[1]] =  $per_arr;
			}
			ksort($patient_falls_overall_final);

			foreach($patient_falls_overall_final as $sort_date => $period_fall_data){
				$patient_falls_final[] = $period_fall_data;
			}
				print_r("before discharge ");
				print_r($patient_falls_final);
			
			$d = 0 ;
			foreach($patient_falls_final as $fal_nr=>$fall_dates)
			{
				
				if($patient_falls_final[$fal_nr+1][1] &&  strtotime(date('d.m.Y',strtotime($patient_falls_final[$fal_nr][2]))) < strtotime(date('d.m.Y',strtotime($patient_falls_final[$fal_nr+1][1]))))
				{
					
					$discharge_arr[$d][0] = "discharge";
					$discharge_arr[$d][1] = $patient_falls_final[$fal_nr][2];
					$discharge_arr[$d][2] = $patient_falls_final[$fal_nr+1][1];
					
				}
				
				if(count($discharge_arr[$d]) == "3"){
					$d++;
				}
				
			}
			
			
			foreach($discharge_arr as $per_id=>$per_arr){
				ksort($per_arr);
				$patientd_falls_overall_final[$per_arr[1]] =  $per_arr;
			}
			
			
			
			if(!empty($patientd_falls_overall_final)){ 
				$patient_falls_overall_final = array_merge($patient_falls_overall_final, $patientd_falls_overall_final);
			}
	
 
			ksort($patient_falls_overall_final);
			$k=1; 	
			foreach($patient_falls_overall_final as $sort_date => $period_fall_data){
				$patient_falls_overall_final_sorted[$k] = $period_fall_data;
				$k++;
			}

			if($_REQUEST['pfalls'] == "1")
			{
				print_r('including discharge');
				print_r($patient_falls_overall_final_sorted); 
				exit; 
			}
			
			
			$patient_falls_final = $patient_falls_overall_final_sorted;
 
   			$pdata['first_admission_ever'] = $first_admission_ever;
   			$pdata['patient_falls'] = $patient_falls_final;
			
			*/

			
			
   			$pdata['first_admission_ever'] = $patient_falls_master['first_admission_ever'];
   			$pdata['patient_falls'] = $patient_falls_master['falls'];

   			
   			//current status of patient 
   			if($patientdetails['isdischarged'] == "1"){
                $current_status = "discharged";  
   			} else{
                $current_status = "active";  
   			}
   			
   			
   			$even = (count($date_array) % 2 == 0);
   			$odd = (count($date_array) % 2 != 0);

   			
   			$not_continuu =  $patient_falls_master['not_continuu'];
   			
   			if($not_continuu != 0) 
   			{
   			    $allow_change = 0;
   			} else{
       			$allow_change = 1;
   			}   			    
   			 
			$pdata['allow_change'] = $allow_change;
   			
   			
   			
			$patient_history[$first_admission] = '1';
			if($lastdischarge)
			{
				$patient_history[$lastdischarge[0]['discharge_date']] = '2';
			}

			ksort($patient_history, SORT_STRING);
// 			$pdata['patient_adm_history'] = $patient_history;
			$pdata['patient_adm_history'] = $patient_falls_master['falls'];
			
			
			/*			 * ******* Vollversorgung History ************ */
			$vvhistory = new VollversorgungHistory();
			$historyvv = $vvhistory->getVollversorgungHistoryAll($ipid);

			//check if we have any data in history table
			if(count($historyvv) == "0" && $patientdetails['vollversorgung'] == "0")
			{
				$pdata['hideEditButton'] = "1";
			}

			if(count($historyvv) == "0" && $patientdetails['vollversorgung'] == "1")
			{
				$ins = new VollversorgungHistory();
				$ins->user_id = $logininfo->userid;
				$ins->ipid = $ipid;
				$ins->date = date("Y-m-d H:i:s", strtotime($patientdetails['vollversorgung_date']));
				$ins->date_type = "1";
				$ins->save();

				$historyvv[0]['date'] = $patientdetails['vollversorgung_date'];
				$historyvv[0]['date_type'] = $patientdetails['vollversorgung_date'];
				$pdata['hideEditButton'] = "0";
			}


			if($_REQUEST['vvdbg'])
			{
				print_r("historyvv\n");
				print_r($historyvv);
			}

			foreach($historyvv as $keyh => $valh)
			{
				if($valh['date_type'] == 1)
				{
					$startDatesHistory[] = $valh['date'];
					$start_dates_ids[] = $valh['id'];
					$has_prev_start[$keyh] = '1';
				}
				else if($valh['date_type'] == 2 && end($has_prev_start) == '1')
				{
					$endDatesHistory[] = $valh['date'];
					$end_dates_ids[] = $valh['id'];
					$has_prev_start[$keyh] = '0';
				}
			}

			if($_REQUEST['vvdbg'])
			{
				print_r("startDatesHistory\n");
				print_r($startDatesHistory);
				print_r("endDatesHistory\n");
				print_r($endDatesHistory);
				exit;
			}
			$pdata['start_dates_ids'] = $start_dates_ids;
			$pdata['end_dates_ids'] = $end_dates_ids;

			if($startDatesHistory)
			{
			$pdata['startDatesHistory'] = $startDatesHistory;
			}
			else
			{
				$pdata['startDatesHistory'] = array();
			}
			if($endDatesHistory)
			{
			$pdata['endDatesHistory'] = $endDatesHistory;
			}
			else
			{
				$pdata['endDatesHistory'] = array();
			}


			/*			 * ******* Theraphieplanung ************ */
			$therapy = new PatientTherapieplanung();
			$patienttherapy = $therapy->getTherapieplanungData($ipid);

			$this->retainValues($patienttherapy[0]);
			$pdata['patienttherapy'] = $patienttherapy[0];

			/*			 * *********Family Doctor************** */
			if($patientdetails['living_will'] > 0)
			{
				$detailsstr.=",grow6";
			}

			if($patientdetails['familydoc_id'] > 0)
			{
				$fdoc = new FamilyDoctor();
				$docarray = $fdoc->getFamilyDoc($patientdetails['familydoc_id']);

				$pdata['doc_salutation'] = $docarray[0]['salutation'];
				$pdata['doc_firstname'] = $docarray[0]['first_name'];
				$pdata['doc_lastname'] = $docarray[0]['last_name'];
				$pdata['title'] = $docarray[0]['title'];
				$pdata['doc_phone_practice'] = $docarray[0]['phone_practice'];
				$pdata['doc_phone_cell'] = $docarray[0]['phone_cell'];
				$pdata['doc_phone_private'] = $docarray[0]['phone_private'];
				$pdata['doc_street1'] = $docarray[0]['street1'];
				$pdata['doc_zip'] = $docarray[0]['zip'];
				$pdata['doc_city'] = $docarray[0]['city'];
				$pdata['doc_fax'] = $docarray[0]['fax'];
				$pdata['doc_number'] = $docarray[0]['doctornumber'];
				$pdata['doc_bsnr'] = $docarray[0]['doctor_bsnr'];
				$pdata['isdoc'] = 1;

				$detailsstr.=",grow9";
			}
			else
			{
				$pdata['isdoc'] = 0;
				$pdata['fdocmsg'] = $this->view->translate("nofamilydoctor");
			}
			$ps = new PatientSupply();
			$pat_supply = $ps->getpatientSupplyData($ipid);
			$supcnt = $pat_supply[0]['even'] + $pat_supply[0]['spouse'] + $pat_supply[0]['member'] + $pat_supply[0]['private_support'] + $pat_supply[0]['nursing'];

			if($supcnt > 0)
			{
				$detailsstr.=",grow4";
			}
			$this->retainValues($pat_supply[0]);
			$pdata['pat_supply'] = $pat_supply[0];
			/* ---------------------Pflegedienste---------------------- */
			$pfleg = new PatientPflegedienste();
// 		$docarray = $fdoc->getPatientPflegedienste($ipid);
			$pfleg_array = $pfleg->getPatientPflegedienste($ipid);

			if(count($pfleg_array) > 0)
			{
				$pdata['ispflege'] = 1;

				$palliativpflegedienst = "No";

				if($pfleg_array[0]['palliativpflegedienst'] == 1)
				{
					$palliativpflegedienst = "Yes";
					$pdata['palliativpflegedienst'] = 1;
				}
				else
				{
					$pdata['nursing'] = 1;
				}

				$pdata['palliativpf'] = $palliativpflegedienst;
				if($pfleg_array[0]['heimpersonal'] == 1)
				{
					$pdata['heimpersonal'] = 1;
				}
				$detailsstr.=",grow15";

				$pflegedienstegrid = new Pms_Grid($pfleg_array, 1, count($pfleg_array), "PatientPflegedienstes.html");
				$pdata['patient_pflegedienstes'] = $pflegedienstegrid->renderGrid();
				$pdata['patient_pflegedienstes_pdf'] = $pfleg_array;
		
			}
			else
			{
				$pdata['ispflege'] = 0;
				$pdata['pflegemsg'] = $this->view->translate("nopflege");
			}
			/* ---------------------Voluntary workers---------------------- */

    		// get associated clients of current clientid START 
    		$logininfo = new Zend_Session_Namespace('Login_Info');
    		$connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
    		if($connected_client){
    		    $clientid_vws = $connected_client;
    		} else{
    		    $clientid_vws = $logininfo->clientid;
    		}
			
			if($isdicharged){
			    
			$pdarr = PatientDischarge::getPatientDischarge($ipid);
    			if($pdarr[0]['discharge_date'])
    			{
    			    $dischargedate = date('d.m.Y', strtotime($pdarr[0]['discharge_date']));
    			}
			}

			
			$pvw = new PatientVoluntaryworkers();
			$pvwarray = $pvw->getPatientVoluntaryworkers($ipid);

			$date_of_today  = date('Y-m-d');
			foreach($pvwarray  as $keyvw =>$vvw_data){

			    if($vvw_data['start_date'] != "0000-00-00 00:00:00"){
			        $start_date[$keyvw] = date('Y-m-d',strtotime($vvw_data['start_date']));
			        $show_start_date[$keyvw] = date('d.m.Y',strtotime($vvw_data['start_date']));
			    } else{
			        $start_date[$keyvw] = date('Y-m-d',strtotime($vvw_data['create_date']));
			        $show_start_date[$keyvw] = date('d.m.Y',strtotime($vvw_data['create_date']));
			    }
			    
			    
			    if( $vvw_data['end_date'] != "0000-00-00 00:00:00"){
			        $end_date[$keyvw] = date('Y-m-d',strtotime($vvw_data['end_date']));
			        $show_end_date[$keyvw] = date('d.m.Y',strtotime($vvw_data['end_date']));
			    } else {
			        if($isdicharged) {
			        	
			            $end_date[$keyvw] = date('Y-m-d',strtotime($dischargedate));
			            $show_end_date[$keyvw] = date('d.m.Y',strtotime($dischargedate));
			        } else{
			            $end_date[$keyvw] = date('Y-m-d');
			            $show_end_date[$keyvw] = "--";
			        }
			    }
			    
			    $voluntary_worker_data[$keyvw]['start'] =   $start_date[$keyvw];
			    $voluntary_worker_data[$keyvw]['end'] =   $end_date[$keyvw];
			    $pvwarray[$keyvw]['start_date'] =   $show_start_date[$keyvw];
			    $pvwarray[$keyvw]['end_date'] =   $show_end_date[$keyvw];
			  
			    // Do not remove incative - ISPC 1485
			    if(!Pms_CommonData::isintersected(
			        strtotime($start_date[$keyvw]), strtotime($end_date[$keyvw]), strtotime($date_of_today), strtotime($date_of_today)))
			    {
			       // unset($pvwarray[$keyvw]);
			    }
			    
			}
			
			$primary_status_arr = Pms_CommonData::get_primary_voluntary_statuses();
			//ISPC-2054(voluntaryworkers statuses updated by clients)
			//$voluntary_status = Pms_CommonData::getVoluntaryWorkersStatuses();
			$voluntary_status = VoluntaryWorkersSecondaryStatuses::get_secondarystatuses($clientid_vws);

			$h_association = Doctrine_Query::create()
				->select('*')
				->from('Hospiceassociation')
				->where('indrop= 0 and isdelete = 0 and clientid=' . $voluntary_clientid);
			$h_association_array = $h_association->fetchArray();

			foreach($h_association_array as $khas => $h_assoc_item)
			{
				$h_assoc_data[$h_assoc_item['id']] = $h_assoc_item['hospice_association'];
			}
			$pdata['hospiceassoc'] = $h_assoc_data;

//new statuses
			foreach($pvwarray as $k_pvw => $v_pvw)
			{
				$pvw_ids[] = $v_pvw['id'];
			}

			foreach($voluntary_status as $k_status => $v_status)
			{
				$statuses[$v_status['id']] = $v_status['status'];
			}

			foreach($primary_status_arr as $k_pri_status => $v_pri_status)
			{
				$statuses[$v_pri_status['id']] = $v_pri_status['status'];
			}
			
			$voluntary_workers_statuses = new VoluntaryworkersStatuses();
			//$worker_statuses = $voluntary_workers_statuses->get_voluntaryworker_statuses($pvw_ids, $voluntary_clientid);
			$worker_statuses = $voluntary_workers_statuses->get_voluntaryworker_statuses($pvw_ids, $clientid_vws);

			foreach($worker_statuses as $k_data => $v_data)
			{
				foreach($v_data as $k_vdata => $v_vdata)
				{
					$worker_statuses_arr[$k_data][] = $statuses[$v_vdata];
				}
			}

			$pdata['voluntary_status'] = $worker_statuses_arr;

			if(count($pvwarray) > 0)
			{

				$pdata['ispvw'] = 1;

//print_r($pvwarray);exit;
				$detailsstr.=",grow15";
				$patientvoluntarywgrid = new Pms_Grid($pvwarray, 1, count($pvwarray), "Patientvoluntaryworkers.html");
				$this->view->voluntary_status = $pdata['voluntary_status'] ;
				$this->view->hospiceassoc = $pdata['hospiceassoc'] ;
				$pdata['patient_voluntaryworkers'] = $patientvoluntarywgrid->renderGrid();
				$pdata['patient_voluntaryworkers_pdf'] = $pvwarray;
			}
			else
			{
				$pdata['ispvw'] = 0;
				$pdata['pvwmsg'] = $this->view->translate("novoluntary");
			}
			/* ---------------------Voluntary workers---------------------- */

			/* --------------------- ambulanter Hospizdienst ---------------------- */
			$hp_assoc = new PatientHospiceassociation ();
			$hp_assoc_array = $hp_assoc->getPatientHospiceassociation($ipid);

			if(count($hp_assoc_array) > 0)
			{
				$pdata['has_hp_assoc'] = 1;
				$pdata['patient_hospiceassociations'] = $hp_assoc_array;
			}
			else
			{
				$pdata['has_hp_assoc'] = 0;
				$pdata['hospiceassociationmsg'] = $this->view->translate("no_hp_assoc");
			}
			/* ---------------------ambulanter Hospizdienst END---------------------- */

			/* ------------ Pharmacy -------------------- */
			$pha = new PatientPharmacy ();
			$docarray = $pha->getPatientPharmacy($ipid);

			if(count($docarray) > 0)
			{
				$pdata['ispharmacy'] = 1;
				$detailsstr.=",grow26";
				$pharmacygrid = new Pms_Grid($docarray, 1, count($docarray), "PatientPharmacy.html");
				$pdata['patient_pharmacy'] = $pharmacygrid->renderGrid();
				$pdata['patient_pharmacy_pdf'] = $docarray;
			}
			else
			{
				$pdata['ispharmacy'] = 0;
				$pdata['pharmacymsg'] = $this->view->translate("nopharmacy");
			}
			/* ------------ End Pharmacy -------------------- */

			
			/* ------------ Patient Remedies-tool -------------------- */
			$pr = Doctrine_Query::create()
			    ->select('*')
			    ->from('PatientRemedies')
			    ->where('ipid="'.$ipid.'"')
			    ->andWhere("isdelete=0");
			$prarray=$pr->fetchArray();

			
			$supp = new PatientSupplies();
		    $supp_date[]='';
			foreach ($prarray as $key => $value)
			{
			 $supp_date = $supp->getPatientSupplies($ipid,$value['supplier']);			
			 $s[$value['id']]['supplier']= $supp_date[0]['supplier'];
			 $s[$value['id']]['remedis']= $value['remedies'];
			}

			$pdata['remds'] =$s;
			/* ------------ End Patient Remedies-tool ---------------- */
		
			
			/* ------------ Supplies  -------------------- */
			$supp = new PatientSupplies();
			$supp_array = $supp->getPatientSupplies($ipid);

			if(count($supp_array) > 0)
			{
				$pdata['issupplies'] = 1;
				$pdata['patient_supplies_array'] = $supp_array;
			}
			else
			{
				$pdata['issuppliesy'] = 0;
				$pdata['suppliesmsg'] = $this->view->translate("no_suppliers");
			}
			/* ------------ End Supplies -------------------- */

			

			/* ------------ Suppliers (Sonst. Versorger in Aphotheke box)  -------------------- */
			$supplier = new PatientSuppliers();
			$supplier_array = $supplier->getPatientSuppliers($ipid);

			if(count($supplier_array) > 0)
			{
				$pdata['issupplier'] = 1;
				$pdata['patient_suppliers_array'] = $supplier_array;
			}
			else
			{
				$pdata['issupplier'] = 0;
				$pdata['suppliersmsg'] = $this->view->translate("no_suppliers_versorger");
			}
			/* ------------ End Suppliers (Sonst. Versorger in Aphotheke box) -------------------- */

			/* ------------ Specialists Start -------------------- */
			$spec = new PatientSpecialists();
			$spec_array = $spec->get_patient_specialists($ipid);

			$specialists_types = new SpecialistsTypes();
			$sp_types = $specialists_types->get_specialists_types($clientid);
			if($sp_types)
			{
				foreach($sp_types as $k_specialities => $v_specialities)
				{
					$sp_types_arr[$v_specialities['id']] = $v_specialities['name'];
				}
			}

			$pdata['specialists_types'] = $sp_types_arr;

			$spec_ids[] = '999999999';
			foreach($spec_array as $k_spec => $v_spec)
			{
				$spec_ids[] = $v_spec['sp_id'];
				$spec_details[$v_spec['sp_id']]['comment'] = $v_spec['comment'];
				$spec_details[$v_spec['sp_id']]['pat_sp_id'] = $v_spec['id'];
			}

			$master_spec = new Specialists();
			$master_spec_array = $master_spec->get_specialist($spec_ids);

			foreach($master_spec_array as $k_m_sp => $v_m_sp)
			{
				$m_sp_array[$v_m_sp['id']] = $v_m_sp;
				$m_sp_array[$v_m_sp['id']]['comment'] = $spec_details[$v_m_sp['id']]['comment'];
				$m_sp_array[$v_m_sp['id']]['pat_sp_id'] = $spec_details[$v_m_sp['id']]['pat_sp_id'];
			}

			if($m_sp_array)
			{
				$pdata['isspecialist'] = '1';
				$pdata['patient_specialists_array'] = $m_sp_array;
				$pdata['specialistsmsg'] = '';
			}
			else
			{
				$pdata['isspecialist'] = '0';
				$pdata['specialistsmsg'] = $this->view->translate("no_specialists");
			}
			/* ------------ Specialists End -------------------- */

			/* ------------ Sapvverordnung -------------------- */
			$pdata['newsapv'] = 1; // 0- Don't show the new version of the box

			$sav = new SapvVerordnung();
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("69", $clientid))
			{
				$sapv_extra = true;
			}
			else
			{
				$sapv_extra = false;
			}
			
			if($modules->checkModulePrivileges("70", $clientid)) // primary status : Verordnung
			{
				$sapv_primary_status = true;
			}
			else
			{
				$sapv_primary_status = false;
			}
			
			if($modules->checkModulePrivileges("71", $clientid)) // secondary status : Verordnung 2nd Page
			{
				$sapv_secondary_status = true;
			}
			else
			{
				$sapv_secondary_status = false;
			}
			
			if($modules->checkModulePrivileges("97", $clientid)) // secondary status : Verordnung 2nd Page
			{
				$sapv_bra_options = true;
			}
			else
			{
				$sapv_bra_options = false;
			}

			$pdata['sapv_extra'] = $sapv_extra;
			$pdata['sapv_primary_status'] = $sapv_primary_status;
			$pdata['sapv_secondary_status'] = $sapv_secondary_status;
			$pdata['sapv_bra_options'] = $sapv_bra_options;
			
			$this->view->sapv_extra = $sapv_extra;
			$this->view->sapv_primary_status = $sapv_primary_status;
			$this->view->sapv_secondary_status = $sapv_secondary_status;
			$this->view->sapv_bra_options = $sapv_bra_options;
						

			$sapv_perm = new SapvverordnungPermissions();
			$clientsapv_subdivision = $sapv_perm->getClientSapvverordnungpermissions($clientid);

			if($clientsapv_subdivision)
			{
				foreach($clientsapv_subdivision as $kh => $sub)
				{
					$sapv_subdivizions[] = $sub['subdiv_id'];
				}
			}
			else
			{
				$sapv_subdivizions[] = '1'; // set DEFAULT sapv box
			}

			$pdata['sapv_subdivizions'] = $sapv_subdivizions;
			$pdata['clientsapv_subdivision'] = $clientsapv_subdivision;

			$sgbv_details = new SgbvForms();
			$patient_sgbv_array = $sgbv_details->getallPatientSgbvForm($ipid);
			$sgbv_status = Pms_CommonData::getSgbvStatusRadio();
			$pdata['sgbv_status'] = $sgbv_status;
			$this->view->sgbv_status = $sgbv_status;

			$patient_sgbv_ids[] = '999999999';
			foreach($patient_sgbv_array as $sk => $sgbvvalues)
			{
				$patient_sgbv[$sgbvvalues['id']] = $sgbvvalues;
				$patient_sgbv_ids[] = $sgbvvalues['id'];
			}

			$sgbv_items = new SgbvFormsItems();
			$sgbv_actions = $sgbv_items->getPatientSgbvFormItems($ipid, $patient_sgbv_ids);

			$social_code_actions = new SocialCodeActions();
			$sc_actions = $social_code_actions->getAllCientSgbvActions($clientid);
			foreach($sc_actions as $k_action => $v_action)
			{
				$client_sc_actions[$v_action['id']] = $v_action;
			}

			foreach($sgbv_actions as $k_sgbv_act => $v_sgbv_act)
			{
				if($client_sc_actions[$v_sgbv_act['action_id']]['custom'] == '1' && $client_sc_actions[$v_sgbv_act['action_id']]['parent'] != '0')
				{
					$sgbv_act_details[$v_sgbv_act['sgbv_form_id']][$v_sgbv_act['action_id']] = $client_sc_actions[$client_sc_actions[$v_sgbv_act['action_id']]['parent']]['action_name'];
				}
				else
				{
					$sgbv_act_details[$v_sgbv_act['sgbv_form_id']][$v_sgbv_act['action_id']] = $client_sc_actions[$v_sgbv_act['action_id']]['action_name'];
				}
				$sgbv_act_details_free[$v_sgbv_act['sgbv_form_id']][$v_sgbv_act['action_id']] = $v_sgbv_act['free_of_charge'];
			}

			$pdata['patient_sgbv'] = $patient_sgbv;
			$pdata['patient_sgbv_actions'] = $sgbv_act_details;
			$pdata['patient_sgbv_actions_foc'] = $sgbv_act_details_free;


			/*$savarr = $sav->getLastSapvVerordnungData($ipid); //ISPC -2084
			$radioarr = $sav->getSapvRadios();

			if($savarr[0]['verordnet_von'])
			{
				$pdata['verordnet_von'] = $sav->get_verordnet_von($savarr[0]['verordnet_von'], $savarr[0]['verordnet_von_type']);
				$pdata['vercount'] = 1;
				if($savarr[0]['verordnungam'] != '0000-00-00 00:00:00')
				{
					$pdata['verordnungam'] = date('d.m.Y', strtotime($savarr[0]['verordnungam']));
				}
				if($savarr[0]['verordnungbis'] != '0000-00-00 00:00:00')
				{
					$pdata['verordnungbis'] = date('d.m.Y', strtotime($savarr[0]['verordnungbis']));
				}

				$comma = "";
				$verordnet = explode(",", $savarr[0]['verordnet']);
				for($i = 0; $i < count($verordnet); $i++)
				{
					$ver .= $comma . $verordnetarray[$verordnet[$i]];
					$comma = ", ";
				}

				$pdata['verordnet'] = $ver;
				$pdata['status'] = $radioarr[$savarr[0]['status']];
				$this->view->status = $radioarr[$savarr[0]['status']];
				$pdata['vid'] = $savarr[0]['id'];
				$this->view->vid = $savarr[0]['id'];

				$pdata['bra_options'] = implode(", ", explode(",",$savarr[0]['bra_options']));
				$this->view->bra_options = implode(", ", explode(",",$savarr[0]['bra_options']));
				
				
			}
			else
			{
				$pdata['vercountmsg'] = $this->view->translate("sapv_error");
			}*/

			/*			 * ******** new Verordnung TaB - Pflegebesuche ***************** */
			if(in_array("5", $sapv_subdivizions))
			{
				$pavt = new PatientApprovedVisitTypes();
				$pavt_active = $pavt->get_active_patient_approved_visit_type($ipid, true); // ipid, true- check for current day
				$all_pavt = $pavt->get_all_patient_approved_visit_type($ipid);

				foreach($patient_history as $date => $type)
				{
					if($type == 1)
					{
						$admissions_dates[] = $date;
					}
				}

				$pdata['only_default'] = 0;

				if(empty($all_pavt))
				{
					$pavt_active['visit_type'] = $default_pavt;
					$all_pavt[0]['visit_type'] = $default_pavt;
					$all_pavt[0]['start_date'] = date('d.m.Y', strtotime($admissions_dates[0])); // first admission ever
					$default_visit_from = date('d.m.Y', strtotime($admissions_dates[0])); // first admission ever
					$pavt_default = $all_pavt[0];
					$pdata['only_default'] = 1;
				}
				$pdata['pavt_default'] = $pavt_default;
				$pdata['approved_visit_type'] = $pavt_active['visit_type'];
				$pdata['approved_visit_type_history'] = $all_pavt;
			}

			$savarry = $sav->getSapvVerordnungData($ipid);
			/* ISPC - 2084 */
			foreach($savarry as $keys=>$vals)
			{
				$sapvarray[$keys] = $vals;
				if($keys == '0')
				{
					if($vals['sapv_order'] == '1')
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Erstverordnung';
					}
					elseif($vals['sapv_order'] == '2')
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Folgeverordnung';
					}
					else
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Erstverordnung';
					}
				}
				else
				{
					if($vals['sapv_order'] == '1')
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Erstverordnung';
					}
					elseif($vals['sapv_order'] == '2')
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Folgeverordnung';
					}
					else
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Folgeverordnung';
					}
				}
			}
			
			$sort_col = array();
			foreach ($sapvarray as $keya=> $rowa) {
				//$sort_col[$keya] = $rowa['sapv_order_name'];// Change sorting  - for TODO-1567 comented on 18.05.2018 
				$sort_col[$keya] = $rowa['verordnungam']; //TODO-1567
			}
			
			array_multisort($sort_col, SORT_ASC, $sapvarray);
			/* ISPC - 2084 */
			//print_r($sapvarray); exit;
			
			$pdata['extraradioarr'] = $sav->getSapvExtraStatusesRadios();
			$pdata['extra_set_array'] = $sav->getSapvExtraRadios();
			$this->view->extraradioarr = $sav->getSapvExtraStatusesRadios();
			$this->view->extra_set_array = $sav->getSapvExtraRadios();
			
			if(count($sapvarray) > 0)
			{
				$detailsstr.=",grow11";
			}
			else 
			{
				$pdata['vercountmsg'] = $this->view->translate("sapv_error");
			}
			$pdata['savpcount'] = count($sapvarray);

			$grid = new Pms_Grid($sapvarray, 1, count($sapvarray), "sapvverordnunglist.html");
			$pdata['sapvverordnunglist'] = $grid->renderGrid();
			$pdata['sapvverordnunglist_pdf'] = $sapvarray;
			

			/*			 * ********Sapv Verordnung END***************** */

			
			
			/*			 * *********Health Insurance ************** */


			$modules = new Modules();
			if($modules->checkModulePrivileges("90", $logininfo->clientid))
			{
				$pdata['show_debtor_number'] = "1";
			}
			else
			{
				$pdata['show_debtor_number'] = "0";
			}

			//get health insurance subdivizions
			$symperm = new HealthInsurancePermissions();
			$divisions = $symperm->getClientHealthInsurancePermissions($logininfo->clientid);
			$pdata['divisions'] = $divisions;

			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if(!empty($phi))
			{
				if(!empty($divisions))
				{
					$hi2s = Doctrine_Query::create()
						->select("*,AES_DECRYPT(ins2s_name,'" . Zend_Registry::get('salt') . "') as name,
							AES_DECRYPT(ins2s_insurance_provider,'" . Zend_Registry::get('salt') . "') as insurance_provider,
							AES_DECRYPT(ins2s_contact_person,'" . Zend_Registry::get('salt') . "') as contact_person,
							AES_DECRYPT(ins2s_street1,'" . Zend_Registry::get('salt') . "') as street1,
							AES_DECRYPT(ins2s_street2,'" . Zend_Registry::get('salt') . "') as street2,
							AES_DECRYPT(ins2s_zip,'" . Zend_Registry::get('salt') . "') as zip,
							AES_DECRYPT(ins2s_city,'" . Zend_Registry::get('salt') . "') as city,
							AES_DECRYPT(ins2s_phone,'" . Zend_Registry::get('salt') . "') as phone,
							AES_DECRYPT(ins2s_phone2,'" . Zend_Registry::get('salt') . "') as phone2,
							AES_DECRYPT(ins2s_post_office_box,'" . Zend_Registry::get('salt') . "') as post_office_box,
							AES_DECRYPT(ins2s_post_office_box_location,'" . Zend_Registry::get('salt') . "') as post_office_box_location,
							AES_DECRYPT(ins2s_zip_mailbox,'" . Zend_Registry::get('salt') . "') as zip_mailbox,
							AES_DECRYPT(ins2s_email,'" . Zend_Registry::get('salt') . "') as email,
							AES_DECRYPT(comments,'" . Zend_Registry::get('salt') . "') as comments,
							AES_DECRYPT(ins2s_fax,'" . Zend_Registry::get('salt') . "') as fax,
							AES_DECRYPT(ins2s_iknumber,'" . Zend_Registry::get('salt') . "') as iknumber,
							AES_DECRYPT(ins2s_ikbilling,'" . Zend_Registry::get('salt') . "') as ikbilling,
							AES_DECRYPT(ins2s_debtor_number,'" . Zend_Registry::get('salt') . "') as debtor_number,
							AES_DECRYPT(ins2s_kvnumber,'" . Zend_Registry::get('salt') . "') as kvnumber ")
						->from("PatientHealthInsurance2Subdivisions")
						->where("company_id = " . $phi[0]['companyid'] . " ")
						->andWhere("ipid = '" . $ipid . "' ");
					$hi2s_arr = $hi2s->fetchArray();
					
					foreach($hi2s_arr as $skey => $subdiv_details)
					{
						$subdivizion_details[$subdiv_details['subdiv_id']] = $subdiv_details;
						
					}
					$pdata['subdivizion_details'] = $subdivizion_details;
					//print_r($hi2s_arr);exit;
				}
			}

			if(count($phi) > 0)
			{
				$detailsstr.=",grow10";
			}
			
			if(count($phi) > 0)
			{
				$pdata['insurance_no'] = $phi[0]['insurance_no'];
				$pdata['kvk_no'] = $phi[0]['kvk_no'];

				if(empty($phi[0]['institutskennzeichen']) || $phi[0]['institutskennzeichen'] == 0)
				{
					if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
					{
						$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
						$healtharray = $helathins->toArray();
						$institutskennzeichen = $healtharray['iknumber'];
						$pdata['institutskennzeichen'] = $institutskennzeichen;
					}
				}
				else
				{
					$pdata['institutskennzeichen'] = $phi[0]['institutskennzeichen'];
				}

				if(empty($phi[0]['ins_debtor_number']) || strlen($phi[0]['ins_debtor_number']) == 0)
				{
					if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
					{
						$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
						$healtharray = $helathins->toArray();
						$ins_debtor_number = $healtharray['debtor_number'];
						$pdata['ins_debtor_number'] = $ins_debtor_number;
					}
				}
				else
				{
					$pdata['ins_debtor_number'] = $phi[0]['ins_debtor_number'];
				}


				if(empty($phi[0]['comment']) || strlen($phi[0]['comment']) == 0)
				{
					if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
					{
						$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
						$healtharray = $helathins->toArray();

						$comment = $healtharray['comments'];
						$pdata['comment'] = $comment;
					}
				}
				else
				{
					$pdata['comment'] = $phi[0]['comment'];
				}

				$pdata['ins_insurance_provider'] = $phi[0]['ins_insurance_provider'];
				$pdata['company_name'] = $phi[0]['company_name'];
//				$pdata['comment'] = $phi[0]['comment'];
				$reze = "";
				$exemption_till_date = "";
				if($phi[0]['rezeptgebuhrenbefreiung'] == 1)
				{
					$reze = $this->view->translate('gebuhrenbefreit');
					if($phi[0]['exemption_till_date'] != '') //ISPC - 2079
					{
						$exemption_till_date = date('d.m.Y', strtotime($phi[0]['exemption_till_date']));
					}
				}

				if($phi[0]['rezeptgebuhrenbefreiung'] == 2)
				{
					$reze = $this->view->translate('gebuhrenpflichtig');
				}
				$pdata['reze'] = $reze;
				$pdata['exemption_till_date'] = $exemption_till_date;	//ISPC -2079

				$private = "";
				if($phi[0]['privatepatient'] == 1 || (($phi[0]['direct_billing'] == 1 && $phi[0]['privatepatient'] == 1)))
				{
					$private = $this->view->translate('privatepatient');
				}
				$pdata['private'] = $private;

				$direct_billing = "";
				if($phi[0]['direct_billing'] == 1 && $phi[0]['privatepatient'] == 0)
				{
					$direct_billing = $this->view->translate('direct_billing');
				}
				$pdata['direct_billing'] = $direct_billing;

				$bg_patient = "";
				if($phi[0]['bg_patient'] == 1)
				{
					$bg_patient = $this->view->translate('bg_patient');
				}
				$pdata['bg_patient'] = $bg_patient;

				$st = new KbvKeytabs();
				$status_array = $st->getKbvKeytabs(1);

				if($phi[0]['insurance_status'] != "")
				{
					$pdata['insurance_status'] = $status_array[$phi[0]['insurance_status']];
				}
			}

			//ISPC-2045 moved here  the getMasterData($decid, 1); , is needed in contact-phone for location is_checked 
			$pdata['patientinfo'] = $patientmaster->getMasterData($decid, 1);
			$pdata['patientMasterData_array'] = $patientmaster->get_patientMasterData();			
			$this->view->patientMasterData_array = $pdata['patientMasterData_array'];
			
			
			
			/*			 * ********* Patient Location************* */
// 			$loca = Doctrine::getTable('PatientLocation')->findBy('ipid', $ipid);

			$loca = new PatientLocation();
			$locaarray = $loca->getPatientLocations($ipid);
			if(count($locaarray) > 0)
			{
				$detailsstr.=",grow13";
			}

			$pdata['locationcount'] = count($locaarray);
			$this->view->locationcount = count($locaarray);

			//ISPC-2045
// 			$last_location_is_contact = false;
			if ( ! empty($locaarray)) {
				$last_location = end($locaarray);
				$last_location_is_contact = (int)$last_location['is_contact'];
			}
			$this->view->last_location_is_contact =  $last_location_is_contact;
			// ISPC-2024 - removed locations as contact number, so view->last_location_is_contact ignored
			
			
			$lpc = new ContactPersonMaster();
			$lpcs = $lpc->getPatientContact($ipid, false);

			$acp_ContactPersonMaster = $lpcs; //duplicate variable to use in ISPC-2056 later down the road
			 
			if($lpcs)
			{
				$z = 1;
				$cnt_number = 1; // contact number for display

				foreach($lpcs as $value)
				{
					if($value['isdelete'] == '0')
					{
						$location_cnt[$z] = 'bei Kontaktperson ' . $cnt_number . '(' . $value['cnt_last_name'] . ', ' . $value['cnt_first_name'] . ')';
						$location_cnt_phone[$z] = $value['cnt_phone'];
						$location_cnt_mobile[$z] = $value['cnt_mobile'];
						$cnt_number++;
					}
					else
					{
						$location_cnt[$z] = 'bei Kontaktperson';
					}
					$z++;
				}
				$pdata['location_cnt'] = $location_cnt;
				$pdata['location_cnt_phone'] = $location_cnt_phone;
				$pdata['location_cnt_mobile'] = $location_cnt_mobile;
				
				$this->view->location_cnt = $location_cnt;
				$this->view->location_cnt_phone = $location_cnt_phone;
				$this->view->location_cnt_mobile = $location_cnt_mobile;
			}

			//get stations and don`t use queryes in grids
			$last_location = end($locaarray);

			if(!empty($last_location['station']))
			{
				$loc_stations = new LocationsStations();
				$last_location_station[$last_location['location_id']] = $loc_stations->getLocationsStationsById($clientid, false, $last_location['station']);
			}
			$grid = new Pms_Grid($locaarray, 1, count($locaarray), "listvalidlocation.html");
			$pdata['last_location'] = $last_location_station;

			$pdata['locations'] = $grid->renderGrid();
			$pdata['pdflocations'] = $locaarray;
			/*			 * *********get Patient Hospizverein ************** */

			// special for client id = 48
			if($clientid == 48)
			{
				$displayhospizverein_special = 1;
				$pdata['displayhospizverein_special'] = $displayhospizverein_special;
			}

			$phospiz = new PatientHospizverein();
			$pat_phospiz = $phospiz->getHospizvereinData($ipid);
			$pat_hospizverein = $pat_phospiz[0]['hospizverein'];
			$pat_hospizverein_txt = $pat_phospiz[0]['hospizverein_txt'];

			$pdata['hospizverein'] = $pat_hospizverein;
			$pdata['hospizverein_txt'] = $pat_hospizverein_txt;

			/*			 * ********* Hospiz / Hospizvereins BOX ************** */

			/* get already assigned users */
			$ass_usr = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('epid="' . $epid . '"');
			$usignuserarr = $ass_usr->fetchArray();
			foreach($usignuserarr as $value)
			{
				$assignedusers[] = $value['userid'];
			}
			$pdata['assignedusers'] = $assignedusers;

			/* get group permisions */
			$patgroup = Doctrine_Query::create()
				->select('*')
				->from('PatientGroups')
				->where('ipid ="' . $ipid . '"  and isdelete="0"')
				->orderBy('id ASC');
			$patgrouparray = $patgroup->fetchArray();

			foreach($patgrouparray as $value)
			{
				$assignedgroups[] = $value['groupid'];
			}
			$pdata['assignedgroups'] = $assignedgroups;

			/* get patient ishospiz/ ishospizverein details */

			$ishospiz = $patientdetails['ishospiz'];
			$pdata['ishospiz'] = $patientdetails['ishospiz'];
			$pdata['ishospizverein'] = $patientdetails['ishospizverein'];

			$usergroup = new Usergroup();

			// HOSPIZ USERS
			$hospizgroup = array("7");
			$hospizusers = $usergroup->getUserGroups($hospizgroup);

			$pdata['hospizgroup_id'] = $hospizgroup[0];

			if(count($hospizusers) > 0)
			{
				foreach($hospizusers as $hsgroup)
				{
					$hsgroupsarray[] = $hsgroup['id'];
				}
			}

			$hsusr = new User();
			$usersHospizArray = $hsusr->getuserbyGroupId($hsgroupsarray, $clientid);

			$allhsusers = 0;
			$asshsusers = 0;
			$allhospizusers = '"9999999999999999",';
			$hospiz_users = array();
			foreach($usersHospizArray as $huser)
			{
				$hospiz_users[$huser['id']]['uid'] = $huser['id'];
				$hospiz_users[$huser['id']]['name'] = $huser['last_name'] . ", " . $huser['first_name'];
				$allhospizusers .= '"' . $huser['id'] . '",';
				if(in_array($huser['id'], $assignedusers))
				{
					$allhsusers++;
					$asshsusers++;
				}
				else
				{
					$allhsusers--;
				}
			}

			$nrofhs_users = count($hospiz_users);
			if($allhsusers == $nrofhs_users)
			{
				$hallgroup = 1;
			}
			else
			{
				$hallgroup = 0;
			}

			$pdata['hospiz_group'] = $hallgroup;
			$pdata['hospiz_assusers'] = $asshsusers;
			$pdata['hospiz_users'] = $hospiz_users;
			$pdata['hospiz_users_nr'] = count($hospiz_users);

			// HOSPIZVEREIN USERS
			$hospizvereingroup = array("10");
			$hospizvereinusers = $usergroup->getUserGroups($hospizvereingroup);

			$pdata['hospizvereingroup_id'] = $hospizvereingroup[0];

			if(count($hospizvereinusers) > 0)
			{
				foreach($hospizvereinusers as $hvgroup)
				{
					$hvgroupsarray[] = $hvgroup['id'];
				}
			}
			$hvusr = new User();
			$usersHospizvereinArray = $hvusr->getuserbyGroupId($hvgroupsarray, $clientid);

			$allhvusers = 0;
			$asshvusers = 0;
			$allhospizvereinusers = '"9999999999999999",';
			$hospizverein_users = array();
			foreach($usersHospizvereinArray as $hvuser)
			{
				$hospizverein_users[$hvuser['id']]['uid'] = $hvuser['id'];
				$hospizverein_users[$hvuser['id']]['name'] = $hvuser['last_name'] . ", " . $hvuser['first_name'];
				$allhospizvereinusers .= '"' . $hvuser['id'] . '",';
				if(in_array($hvuser['id'], $assignedusers))
				{
					$allhvusers++;
					$asshvusers++;
				}
				else
				{
					$allhvusers--;
				}
			}

			$nrofhv_users = count($hospizverein_users);
			if($allhvusers == $nrofhv_users)
			{
				$hvallgroup = 1;
			}
			else
			{
				$hvallgroup = 0;
			}

			$pdata['hospizverein_group'] = $hvallgroup;
			$pdata['hospizverein_assusers'] = $asshvusers;
			$pdata['hospizverein_users'] = $hospizverein_users;
			$pdata['hospizverein_users_nr'] = count($hospizverein_users);

			//koordinators users
			$coordgroup = array("6");
			$coordusers = $usergroup->getUserGroups($coordgroup);
			$coord_groupid = $coordusers[0];

			if(count($coordusers) > 0)
			{
				foreach($coordusers as $cogroup)
				{
					$coordarr[] = $cogroup['id'];
				}
			}
			$coordusr = new User();
			$usersCoordArray = $coordusr->getuserbyGroupId($coordarr, $clientid, true);

			$coordinators_users = array();

			if(!empty($usersCoordArray))
			{
				foreach($usersCoordArray as $couser)
				{
					$coordinators_users[] = $couser['id'];
				}
			}

			/*			 * ********* END Hospiz / Hospizvereins ************** */
			/*			 * *********Patient Contact ************** */
			if($this->getRequest()->isPost() && !isset($_POST['edit_date']) && $_REQUEST['mode'] != 'vv' && !isset($_POST['sgbv_id_edit']) && !isset($_POST['del_sgbv_id']) && !isset($_POST['vv_fallid']))
			{
			
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
					exit;
				}
				/*				 * *********save or update Patient Hospizverein ************** */
				if($_POST['hospizval'] == 1)
				{
					if($clientid == 48)
					{
						if($_POST['hospizverein'] == '1')
						{
							//SEND MESSAGE
// 							$allpatientinfo = $patientmaster->getMasterData($decid, 0);
							$allpatientinfo = $patientmaster->get_patientMasterData();
							$patname = $allpatientinfo['last_name'] . ', ' . $allpatientinfo['first_name'];
							$message_entry .= "Der Patient " . $patname . " möchte eine Begleitung durch den Hospizdienst.";
							// for user id = 339
							$usertosend = 339; // andrealisske on clientid = 48
							//$usertosend = 370; // ancuta  on pms
							//modified ISPC 1189
							foreach($coordinators_users as $kusr => $usrid)
							{
								$mail = new Messages();
								$mail->sender = $logininfo->userid;
								$mail->clientid = $logininfo->clientid;
								$mail->recipient = $usrid;
								$mail->msg_date = date("Y-m-d H:i:s", time());
								$mail->title = Pms_CommonData::aesEncrypt('Hospizverein');
								$mail->content = Pms_CommonData::aesEncrypt($message_entry);
								$mail->recipients = implode(',', $coordinators_users);
								$mail->create_date = date("Y-m-d", time());
								$mail->create_user = $logininfo->userid;
								$mail->read_msg = '0';
								$mail->save();
							}
						}
					}

					if(empty($pat_phospiz))
					{
						$hosp = new Application_Form_PatientHospizverein();
						$ppost = $_POST;
						$ppost['ipid'] = $ipid;
						$hosp->InsertData($ppost);
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						$hosp = new Application_Form_PatientHospizverein();
						$ppost = $_POST;
						$ppost['ipid'] = $ipid;
						$hosp->UpdateData($ppost);
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					}
				}
				elseif($_POST['ishospizset'] == 1)
				{
					$q = Doctrine_Query::create()
						->delete('PatientQpaMapping')
						->where('epid ="' . $epid . '" and userid in (' . substr($allhospizusers, 0, -1) . ') ');
					$q->execute();

					$u = Doctrine_Query::create()
						->delete('PatientUsers')
						->where('ipid ="' . $ipid . '" and userid in (' . substr($allhospizusers, 0, -1) . ') ');
					$u->execute();

					foreach($_POST[user_id] as $assignvalue)
					{
						$assign = new PatientQpaMapping();
						$assign->epid = $epid;
						$assign->userid = $assignvalue;
						$assign->clientid = $logininfo->clientid;
						$assign->assign_date = date("Y-m-d H:i:s", time());
						$assign->save();

						$vizibility = new PatientUsers();
						$vizibility->clientid = $logininfo->clientid;
						$vizibility->ipid = $ipid;
						$vizibility->userid = $assignvalue;
						$vizibility->create_date = date("Y-m-d H:i:s", time());
						$vizibility->save();
					}

					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				}
				elseif($_POST['removehsusers'] == 1)
				{
					$q = Doctrine_Query::create()
						->delete('PatientQpaMapping')
						->where('epid ="' . $epid . '" and userid in (' . substr($allhospizusers, 0, -1) . ') ');
					$q->execute();

					$u = Doctrine_Query::create()
						->delete('PatientUsers')
						->where('ipid ="' . $ipid . '" and userid in (' . substr($allhospizusers, 0, -1) . ') ');
					$u->execute();

					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				}
				elseif($_POST['ishospizvereinset'] == 1)
				{
					$q = Doctrine_Query::create()
						->delete('PatientQpaMapping')
						->where('epid ="' . $epid . '" and userid in (' . substr($allhospizvereinusers, 0, -1) . ') ');
					$q->execute();


					$u = Doctrine_Query::create()
						->delete('PatientUsers')
						->where('ipid ="' . $ipid . '" and userid in (' . substr($allhospizvereinusers, 0, -1) . ') ');
					$u->execute();

					foreach($_POST[user_id] as $assignvaluehv)
					{
						$assign = new PatientQpaMapping();
						$assign->epid = $epid;
						$assign->userid = $assignvaluehv;
						$assign->clientid = $logininfo->clientid;
						$assign->assign_date = date("Y-m-d H:i:s", time());
						$assign->save();

						$vizibility = new PatientUsers();
						$vizibility->clientid = $logininfo->clientid;
						$vizibility->ipid = $ipid;
						$vizibility->userid = $assignvaluehv;
						$vizibility->create_date = date("Y-m-d H:i:s", time());
						$vizibility->save();
					}

					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				}
				elseif($_POST['removehvusers'] == 1)
				{
					$q = Doctrine_Query::create()
						->delete('PatientQpaMapping')
						->where('epid ="' . $epid . '" and userid in (' . substr($allhospizvereinusers, 0, -1) . ') ');
					$q->execute();


					$u = Doctrine_Query::create()
						->delete('PatientUsers')
						->where('ipid ="' . $ipid . '" and userid in (' . substr($allhospizvereinusers, 0, -1) . ') ');
					$u->execute();

					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				}
				else
				{
					$contact_form = new Application_Form_ContactPersonMaster();
					//stamdaten
					// ISPC-1308 
					/* $stam = new Application_Form_Stammdatenerweitert(); */
					$a_post = $_POST;
					$a_post['ipid'] = $ipid;
					//stamdaten insert
					/* $stam->InsertData($a_post); */

					//ISPC-2045 - disabled the next lines
					/*
					$pm_form = new Application_Form_PatientMaster();
					if(strlen($a_post['real_contact_number']) > 0)
					{
						
					    if(!empty($a_post['cnt_phone'])){
	   					   $pm_form->UpdateContactNumber($a_post['cnt_phone'], '2');
					    } else{
    						$pm_form->UpdateContactNumber($a_post['cnt_mobile'], '2');
					    }
					}
 					*/

					$a_post['is_contact'] = (int)$_POST['real_contact_number'];
					
					if($contact_form->validate($a_post))
					{
						$contact_form->InsertDataSingle($a_post);
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						$contact_form->assignErrorMessages();
						$stam->assignErrorMessages();
						$cntstr.="grow12,";
						$pdata['error_message'] = $this->view->translate('missedsthtofill');
						$this->retainValues($_POST);
						$pdata['openhidediv'] = 1;
					}
				}
			}

			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);

			if(count($pcs) > 0)
			{
				$detailsstr.=",grow12";
			}

			$contactgrid = new Pms_Grid($pcs, 1, count($pcs), "PatientContacts.html");
			$pdata['patient_contacts'] = $contactgrid->renderGrid();
			$pdata['patient_contacts_pdf'] = $pcs;

			/* ---------------------Physiotherapists---------------------- */
			$phy = new PatientPhysiotherapist();

			$phy_array = $phy->getPatientPhysiotherapist($ipid);
			//print_r($phy_array);exit;
			if(count($phy_array) > 0)
			{
				$pdata['isphysio'] = 1;

				$detailsstr.=",grow15";

				$physiogrid = new Pms_Grid($phy_array, 1, count($phy_array), "PatientPhysiotherapist.html");
				$pdata['patient_physiotherapist'] = $physiogrid->renderGrid();
				$pdata['patient_physiotherapist_pdf'] = $phy_array;
			}
			else
			{
				$pdata['isphysio'] = 0;
				$pdata['physiomsg'] = $this->view->translate("nophysio");
			}
			
			/* -----------------------Homecares---------------------- */
			$home = new PatientHomecare();

			$home_array = $home->getPatientHomecare($ipid);

			if(count($home_array) > 0)
			{
				$pdata['ishome'] = 1;

				$detailsstr.=",grow15";

				$homegrid = new Pms_Grid($home_array, 1, count($home_array), "PatientHomecare.html");
				$pdata['patient_homecare'] = $homegrid->renderGrid();
				$pdata['patient_homecare_pdf'] = $home_array;
			}
			else
			{
				$pdata['ishome'] = 0;
				$pdata['homemsg'] = $this->view->translate("nohome");
			}
			
			//Patient churches
			$chsp = new PatientChurches();
			$chsparray = $chsp->getPatientChurch($ipid);			
				
			if(count($chsparray) > 0)
			{
				$pdata['ischurch'] = 1;
					
				$detailsstr.=",grow47";
					
				$churchgrid = new Pms_Grid($chsparray, 1, count($chsparray), "PatientChurches.html");
				$pdata['patient_churches'] = $churchgrid->renderGrid();
				$pdata['patient_churches_pdf'] = $chsparray;
			}
			else
			{
				$pdata['ischurch'] = 0;
				$pdata['churchmsg'] = $this->view->translate("nochurch");
			}


			/*			 * ********************************************** */

			$frm = new ExtraForms();
			$displayfamilydoc = $frm->getClientPersmission($clientid, 9);
			$pdata['displayfamilydoc'] = $displayfamilydoc;
			$displaypharmacy = $frm->getClientPersmission($clientid, 26);
			$pdata['displaypharmacy'] = $displaypharmacy;
			$displayhealthinsurance = $frm->getClientPersmission($clientid, 10);
			$pdata['displayhealthinsurance'] = $displayhealthinsurance;
			$displaymobility = $frm->getClientPersmission($clientid, 5);
			$pdata['displaymobility'] = $displaymobility;
			$displaypatientlives = $frm->getClientPersmission($clientid, 1);
			$pdata['displaypatientlives'] = $displaypatientlives;
			$displaylivingwill = $frm->getClientPersmission($clientid, 6);
			$pdata['displaylivingwill'] = $displaylivingwill;
			$displaycarelevel = $frm->getClientPersmission($clientid, 7);
			$pdata['displaycarelevel'] = $displaycarelevel;
			$displayreligions = $frm->getClientPersmission($clientid, 8);
			$pdata['displayreligions'] = $displayreligions;
			$displaysupply = $frm->getClientPersmission($clientid, 4);
			$pdata['displaysupply'] = $displaysupply;
			$displaymoreinformation = $frm->getClientPersmission($clientid, 3);
			$pdata['displaymoreinformation'] = $displaymoreinformation;
			//for stamdaten page not working
			$displaypatientdet = $frm->getClientPersmission($clientid, 23);
			$pdata['displaypatientdet'] = $displaypatientdet;
			$displaycontactp = $frm->getClientPersmission($clientid, 12);
			$pdata['displaycontactp'] = $displaycontactp;
			$displaysapv = $frm->getClientPersmission($clientid, 11);
			$pdata['displaysapv'] = $displaysapv;
			$displayaufenthaltsort = $frm->getClientPersmission($clientid, 13);
			$pdata['displayaufenthaltsort'] = $displayaufenthaltsort;
			$displaypflegedienst = $frm->getClientPersmission($clientid, 15);
			$pdata['displaypflegedienst'] = $displaypflegedienst;
			$displayphysiotherapist = $frm->getClientPersmission($clientid, 47);
			$pdata['displayphysiotherapist'] = $displayphysiotherapist;
			$displayhomecare = $frm->getClientPersmission($clientid, 48);
			$pdata['displayhomecare'] = $displayhomecare;
			//from stamdaten e...
			$displayfamilienstand = $frm->getClientPersmission($clientid, 16);
			$pdata['displayfamilienstand'] = $displayfamilienstand;
			$displayvigilanz = $frm->getClientPersmission($clientid, 18);
			$pdata['displayvigilanz'] = $displayvigilanz;
			$displayernahrung = $frm->getClientPersmission($clientid, 20);
			$pdata['displayernahrung'] = $displayernahrung;
			$displaykunstliche = $frm->getClientPersmission($clientid, 22);
			$pdata['displaykunstliche'] = $displaykunstliche;
			$displaystaatszugehorigkeit = $frm->getClientPersmission($clientid, 17);
			$pdata['displaystaatszugehorigkeit'] = $displaystaatszugehorigkeit;
			$displayorientierung = $frm->getClientPersmission($clientid, 19);
			$pdata['displayorientierung'] = $displayorientierung;
			$displayausscheidung = $frm->getClientPersmission($clientid, 21);
			$pdata['displayausscheidung'] = $displayausscheidung;
			//new box
			$displayhilfsmittel = $frm->getClientPersmission($clientid, 24);
			
			$pdata['displayhilfsmittel'] = $displayhilfsmittel;
			$displayhilfsmittelII = $frm->getClientPersmission($clientid, 49);
			
			$pdata['displayhilfsmittelII'] = $displayhilfsmittelII;
			$displaywunsch = $frm->getClientPersmission($clientid, 25);
			$pdata['displaywunsch'] = $displaywunsch;
			$displaypatienthistory = $frm->getClientPersmission($clientid, 35);
			$pdata['displaypatienthistory'] = $displaypatienthistory;
			$displayvvhistory = $frm->getClientPersmission($clientid, 36);
			$pdata['displayvvhistory'] = $displayvvhistory;
			$displayplanning = $frm->getClientPersmission($clientid, 37);
			$pdata['displayplanning'] = $displayplanning;
			$displayvoluntary = $frm->getClientPersmission($clientid, 38);
			$pdata['displayvoluntary'] = $displayvoluntary;
			$displayhospizverein = $frm->getClientPersmission($clientid, 39);
			$pdata['displayhospizverein'] = $displayhospizverein;
			$displayhosizhospizverein = $frm->getClientPersmission($clientid, 40);
			$pdata['displayhospizhospizverein'] = $displayhosizhospizverein;
			$displaysupplies = $frm->getClientPersmission($clientid, 41);
			$pdata['displaysupplies'] = $displaysupplies;
			$displayhospiceservice = $frm->getClientPersmission($clientid, 42);
			$pdata['displayhospiceservice'] = $displayhospiceservice;
			$displaymedipumpe = $frm->getClientPersmission($clientid, 43);
			$pdata['displaymedipumpe'] = $displaymedipumpe;
			$displayspecialists = $frm->getClientPersmission($clientid, 44);
			$pdata['displayspecialists'] = $displayspecialists;
			$displayvisitssettings = $frm->getClientPersmission($clientid, 45);
			$pdata['displayvisitssettings'] = $displayvisitssettings;
			//Versorger(Aphotheke box)
			$displayversorger = $frm->getClientPersmission($clientid, 46);
			$pdata['displayversorger'] = $displayversorger;
			$displaychurch = $frm->getClientPersmission($clientid, 53);
			$pdata['displaychurch'] = $displaychurch;		


			//ISPC-1897 bacteria = germination 
			$pdata['displaygermination'] = $frm->getClientPersmission($clientid, 52);
			if($pdata['displaygermination']) {
				
				$pdata['germination'] = array();
				$pdata['germination']['id'] = 52;				
				$pat_germs = new PatientGermination();
				$pat_germination = $pat_germs->getPatientGermination(array($ipid) , array('colums2fetch'=>'id, ipid, germination_cbox, germination_text'));
				
				if(!empty($pat_germination) && !empty($pat_germination[$ipid])) {					
					$pdata['germination']['germination_cbox'] = $pat_germination[$ipid]['germination_cbox'];
					$pdata['germination']['germination_text'] = $pat_germination[$ipid]['germination_text'];
				}
			}
			
			//ISPC-2056 - ACP
			//acp text settings and acp files on separate db.. so no join
			if ( $pdata['displaylivingwill'] ) {
				
				$box_name	= 'acp_box';
				$pdata[$box_name] = array();
				
				$pdata[$box_name]['defaults']['radio_values'] = array(
						"no"	=> "Ist nicht vorhanden",
						"yes"	=> "Ist vorhanden",
				);
				
				$pacp_obj = new PatientAcp();
				$pacp_array = $pacp_obj->getByIpid( array($ipid) );

				if ( ! empty($acp_ContactPersonMaster)) {
					ContactPersonMaster::beautifyName($acp_ContactPersonMaster);
					$pdata[$box_name]['defaults']['ContactPersonMaster'][0] = '';//please select option at the top
					foreach($acp_ContactPersonMaster as $row) {
						$pdata[$box_name]['defaults']['ContactPersonMaster'][$row['id']] = $row['nice_name']; 
					}
				}
				
				if( ! empty($pacp_array) && ! empty($pacp_array[$ipid])) {
					
// 					$acp_files = PatientFileUpload::get_acp_files( array($ipid) );
// 					$acp_files = $acp_files[$ipid];
					
					foreach ($pacp_array[$ipid] as $row) {
// 						$row['files'] = $acp_files[ 'acp_file_' . $row['division_tab'] ];
						$pdata[$box_name][ $row['division_tab'] ] = $row;
						
					}
				}
			}
			
			//ispc-2070 Orientation II box
			$pdata['displayOrientationII'] = $frm->getClientPersmission($clientid, 54);
			if ($pdata['displayOrientationII']) {
			    
			    $box_name	= 'orientationII_box';
			    $pdata[$box_name] = array();
			    
			    $po_ent = new PatientOrientation();
			    //saved values
			    $saved_pos = $po_ent->findByIpid($ipid);
			    $pdata[$box_name]['active'] = $saved_pos ? array_column($saved_pos, 'orientation') : null;
			    
			    $pdata[$box_name]['defaults']= array(
			        "radio_values"	=> $po_ent->getDefaultOrientation(),
			        "cb_values"	=> $po_ent->getDefaultCommunicationRestricted(),
			    );
			}
			
			//ispc-2070 Mobility II box
			$pdata['displayMobilityII'] = $frm->getClientPersmission($clientid, 55);
			if ($pdata['displayMobilityII']) {
			     
			    $box_name	= 'mobilityII_box';
			    $pdata[$box_name] = array();
			     
			    $pm2_ent = new PatientMobility2();
			    //saved values
			    $saved_pm2s = $pm2_ent->findByIpid($ipid);
			    $pdata[$box_name]['active'] = $saved_pm2s ? array_column($saved_pm2s, 'selected_value') : null;
			     
			    $pdata[$box_name]['defaults']= array(
			        "cb_values"	=> $pm2_ent->getEnumValuesDefaults(),
			    );
			}
			
			
// 			if(Modules::checkModulePrivileges("115", $clientid)) {
			if($modules->checkModulePrivileges("115", $clientid)) {
				$displaysystemsync = $frm->getClientPersmission($clientid, 50);
			} else {
				$displaysystemsync = 0;
			}
			$pdata['displaysystemsync'] = $displaysystemsync;

			if($allow_history_changes == "1"){
    			$display_edit_history = $frm->getClientPersmission($clientid, 51); // For Both Goe and LMU -- CHANGED to be the same every
			} else{
    			$display_edit_history = "0";
			}
			
			
			$pdata['display_edit_history'] = $display_edit_history;
				
			
			
			/*			 * *************MEDI PUMPS********************** */
			$medipumps_client = new Medipumps();
			$client_mp = $medipumps_client->getMedipumps($clientid);

			foreach($client_mp as $k_mp => $v_mp)
			{
				$client_medipumps[$v_mp['id']] = $v_mp;
			}
			$pdata['client_medipumps'] = $client_medipumps;

			$medi_pump = new PatientMedipumps();
			$patientmedipumps = $medi_pump->get_patient_medipumps($ipid);
			$pdata['patientmedipumpe'] = $patientmedipumps;

			/*			 * *************MEDI PUMPS********************** */
			$totals = $displaymobility + $displaypatientlives + $displaylivingwill + $displaycarelevel + $displayreligions + $displaysupply + $displaymoreinformation;
			/*			 * *************Patient Information********************** */

			$fdoc = Doctrine_Query::create()
				->select('*')
				->from('ExtraFormsClient')
				->where('clientid =' . $logininfo->clientid . '')
				->andWhere('formid =1');
			$mncd = $fdoc->execute();
			
// 			$mncd = $frm->getClientPersmission($clientid, 1);
			
			if($mncd)
			{
				$fcarr = $mncd->toArray();

				if($totals > 0)
				{
					$allowedform = "allowed";

					/*					 * ***********Patient Lives*********** */
					$pl = new PatientLives();
					$pat_lives = $pl->getpatientLivesData($ipid);

					$patcnt = $pat_lives[0]['alone'] + $pat_lives[0]['house_of_relatives'] + $pat_lives[0]['apartment'] + $pat_lives[0]['home'] + $pat_lives[0]['hospiz'] + $pat_lives[0]['with_partner'] + $pat_lives[0]['with_child'] + $pat_lives[0]['sonstiges'];
					if($patcnt > 0)
					{
						$detailsstr.=",grow1";
					}

					$this->retainValues($pat_lives[0]);
					$pdata['patlives'] = $pat_lives[0];

					
					/*					 * ***********Patient Visits settings*********** */
					/*
					$pl = new PatientVisitsSettings();
					$pat_visits_settings = $pl->getPatientVisitsSettings($ipid);

					if(!empty($pat_visits_settings))
					{
						$detailsstr.=",grow43";
						$this->retainValues($pat_visits_settings[0]);
					}
					else
					{
						$pdata['visits_per_day'] = '1';
						$pdata['visit_duration'] = '60';
					}
					*/
					
					/* *********** IPSC-1533 Patient Visits settings *********** */
					$pl = new PatientVisitsSettings();
					$pat_visits_settings = $pl->getPatientVisitsSettingsV2($ipid);
					$disabled_users = array();
					if ( count( $pat_visits_settings ) > 0 ){
						
						
						if ($pat_visits_settings['visit_duration'] == "" || $pat_visits_settings['visit_duration'] == "0"){
							$getClientDataByid = Client :: getClientDataByid($logininfo->clientid);	
							$pat_visits_settings['visit_duration'] = (int)$getClientDataByid[0] ['tagesplanung_default_visit_time'] ;
						}

						$pdata['visit_duration'] = $pat_visits_settings['visit_duration'];
						
						//get also the user that can visit
						$visiting_users = User::get_all_visiting_users_and_groups( $logininfo->clientid, false, false );
						$visiting_users_array = $visiting_users['user_details']; 

						foreach($visiting_users_array as $user){
							if (	($user['makes_visits'] == "0")
									||
									(	( $user['isactive'] == "1" )
											&&
											( strtotime($user['isactive_date']) <= strtotime(date("Y-m-d") ))
											)
									)
							{
								//this doctor was marked as cannot make visit, but he allready has assigned ones
								$disabled_users[] = $user['id'];
							}
						}
						
						$normal_group= array();
						foreach($visiting_users['grups'] as $k=>$v){
							$normal_group = ($normal_group+$v + array($k=>$k));
						}

						foreach($pat_visits_settings as $user => $type){
							reset($type);
							$type = key($type);
							
							if (	($visiting_users_array[ $user ] ['makes_visits'] == "0")
									||
									(	( $visiting_users_array[ $user ] ['isactive'] == "1" )
											&&
											( strtotime($visiting_users_array[ $user ] ['isactive_date']) <= strtotime(date("Y-m-d") ))
											)
									)
							{
								//this doctor was marked as cannot make visit, but he allready has assigned ones
								$pat_visits_settings[$user]['is_disabled'] = true;
							}
							
							if ($type == "pseudogrups"){
								if (empty($visiting_users['pseudogrups'][$user])){
									unset( $pat_visits_settings[$user] );
								}
							}else{
								if (empty($normal_group[$user])){
									unset( $pat_visits_settings[$user] );
								}
							}
							
						}
						if (empty($disabled_users)) $disabled_users = array( 0 => "9999999");
						//print_r($pat_visits_settings);
						//print_r($visiting_users);	die();
						$pdata['pat_visits_settings'] = $pat_visits_settings;
						$pdata['pat_visits_settings_visiting_users'] = $visiting_users;		
						$pdata['pat_visits_settings_disabled_users'] = json_encode($disabled_users);		
						
					}else{
						//get default visit time of this client
						$getClientDataByid = Client :: getClientDataByid($logininfo->clientid);			
						$pdata['visit_duration'] = (int)$getClientDataByid[0] ['tagesplanung_default_visit_time'] ;	
						$pdata['pat_visits_settings_disabled_users'] = json_encode( array( 0 => "9999999") );
					}

					/*					 * ***********Patient Lives*********** */

					$pm = new PatientMobility();
					$pat_mob = $pm->getpatientMobilityData($ipid);

					$mobcnt = $pat_mob[0]['bed'] + $pat_mob[0]['walker'] + $pat_mob[0]['wheelchair'] + $pat_mob[0]['goable'] + $pat_mob[0]['nachtstuhl'] + $pat_mob[0]['wechseldruckmatraze'];
					if($mobcnt > 0)
					{
						$detailsstr.=",grow5";
					}
					$this->retainValues($pat_mob[0]);
					$pdata['pat_mob_pdf'] = $pat_mob[0];

					$pmf = new PatientMoreInfo();
					$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

					$morecnt = $pat_moreinfo[0]['dk'] + $pat_moreinfo[0]['peg'] + $pat_moreinfo[0]['port'] + $pat_moreinfo[0]['pumps'] + $pat_moreinfo[0]['zvk'];
					if($morecnt > 0)
					{
						$detailsstr.=",grow3";
					}

					$this->retainValues($pat_moreinfo[0]);
					$pdata['patient_moreinfo_pdf'] = $pat_moreinfo[0];

					$pms = new PatientMaintainanceStage();
					$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);

					$patcnt = $pat_pms[0]['erstantrag'] + $pat_pms[0]['horherstufung'];

					if(count($patcnt) > 0 || $pat_pms['stage'] != "")
					{
						$detailsstr.=",grow7";
					}
					$this->retainValues($pat_pms[0]);
					$pdata['pat_pms_pdf'] = $pat_pms[0];

					$rel = new PatientReligions();
					$pat_rel = $rel->getReligionsData($ipid);
					$relcnt = $pat_rel[0]['religion'];
					if($relcnt > 0)
					{
						$detailsstr.=",grow8";
					}
					$this->retainValues($pat_rel[0]);
					$pdata['religion'] = $pat_rel[0]['religion'];
				}
				else
				{
					$allowedform = "";
				}
			}
			$pdata['allowedform'] = $allowedform;


			

			$pms = new PatientMaintainanceStage();
			$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
			$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
			$pdata['carelevellist'] = $grid->renderGrid();


			$detailscookies = '""';
			$oc = new OverviewCookie();
			$ocarr = $oc->getCookieData($userid, "patientdetails");

			switch($ocarr[0]['useroption'])
			{
				case 1 : $detailscookies = $cntstr;
					break;
				case 2 : $detailscookies = "grow14," . $detailsstr;
					break;
				case 3 : $detailscookies = $ocarr[0]['cookie'];
					break;
				default : break;
			}

			$pdata['detailscookies'] = "'" . $cntstr . $detailscookies . "'";

			$tm = new TabMenus();
			$pdata['tabmenus'] = $tm->getMenuTabs();
			
			foreach($pdata as $k=>$v){
			    $this->view->$k = $v;
			}
			
			if($_REQUEST['pdf'] == "1")
			{
			    $this->generatePdfNew(3, $pdata, 'patientdetails', "patientdetails.html");
			}
			
		}

		public function printpatientdetailsAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->view->pid = $_GET['id'];
			$this->_helper->layout->setLayout('layout_totalblank');

			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);

			$pt = new PatientMaster();
			$patarr = $pt->getMasterData(0, 0, 0, $ipid);

			$pfirstname = $patarr['first_name'];
			$plastname = $patarr['last_name'];
			$birthdate = $patarr['birthd'];
			$this->view->patientname = $plastname . ", " . $pfirstname . "" . "(" . $birthdate . ")";
			$this->view->currdate = date("d.m.Y", time());

			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->patid = $decid;
			$this->view->patid2 = $_GET['id'];
// 			$ipid = Pms_CommonData::getIpid($decid);
// 			$epid = Pms_CommonData::getEpid($ipid);
			$this->view->epid = $epid;
			$pid = $this->view->$_GET['id'];

			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);
			$verordnetarray = Pms_CommonData::getSapvCheckBox();
			$this->view->verordnetarray = $verordnetarray;

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$this->view->clientid = $clientid;
			$cntstr = "";
			$this->view->pid = $_GET['id'];

			$rl = new PatientReligions();
			$this->view->religions = $rl->getReligionsNames();
			/*			 * ******* Stamdaten Information ************ */
			//Stamdaten start
			$stam = new Stammdatenerweitert();
			$this->view->familienstands = $stam->getFamilienstandfun();
			$this->view->stastszugehorigkeits = $stam->getStastszugehorigkeitfun();
			$this->view->vigilanzs = $stam->getVigilanzfun();
			$this->view->orientierungs = $stam->getOrientierungfun();
			$this->view->ernahrungs = $stam->getErnahrungfun();
			$this->view->ausscheidungs = $stam->getAusscheidungfun();
			$this->view->kunstliches = $stam->getKunstlichefun();
			$this->view->radiobuttonoptions = $stam->getRadioOptionsfun();

			$stamarr = $stam->getStammdatenerweitert($ipid);

			/* stamdaten new box */
			$hilfsmittel = array('1' => "O2", '2' => "Toilettensitz", '3' => "Pflegebett", '4' => "Rollstuhl", "5" => "Rollator", "6" => "Nachtstuhl", "7" => "Wechseldruckmatratze");
			$this->view->hilfsmittels = $hilfsmittel;

			$wunsch = array("1" => "Zu Hause bleiben können", "2" => "kein Krankenhaus", "3" => "Autonomie", "4" => "Leidenslinderung", "5" => "Symptomlinderung",
				"6" => "mehr Kraft", "7" => "wieder aufstehen können", "8" => "noch eine Reise machen",
				"9" => "In Ruhe gelassen werden", "10" => "Keine Angabe", "11" => "Frage nach aktiver Sterbehilfe",
				"12" => "Lebensbeendigung", "13" => "Expliziter Wunsch");
			$this->view->wunschs = $wunsch;

			$hospitz = array("1" => "Hospiz");
			$this->view->hospitzs = $hospitz;

			if($stamarr[0]['familienstand'] > 0)
			{
				$detailsstr.=",grow16";
			}

			if($stamarr[0]['hilfsmittel'] > 0)
			{
				$detailsstr.=",grow30";
			}

			if($stamarr[0]['wunsch'] > 0)
			{
				$detailsstr.=",grow31";
			}

			if($stamarr[0]['vigilanz'] > 0)
			{
				$detailsstr.=",grow18";
			}

			if($stamarr[0]['stastszugehorigkeit'] > 0)
			{
				$detailsstr.=",grow17";
			}

			if(strlen($stamarr[0]['ernahrung']) > 0)
			{
				$detailsstr.=",grow20";
			}

			if(strlen($stamarr[0]['kunstliche']) > 0)
			{
				$detailsstr.=",grow22";
			}

			if(strlen($stamarr[0]['orientierung']) > 0 || $stamarr[0]['sprachlich'] > 0 || $stamarr[0]['kognitiv'] > 0 || $stamarr[0]['horprobleme'] > 0)
			{
				$detailsstr.=",grow19";
			}

			if(strlen($stamarr[0]['ausscheidung']) > 0)
			{
				$detailsstr.=",grow21";
			}

			$this->retainValues($stamarr[0]);
			$this->view->id_record = $ipid;
			$this->view->ernahrung = explode(',', $stamarr[0]['ernahrung']);
			$this->view->hilfsmittel = explode(',', $stamarr[0]['hilfsmittel']);
			$this->view->wunsch = explode(',', $stamarr[0]['wunsch']);
			$this->view->wunschmore = $stamarr[0]['wunschmore'];
			$this->view->orientierung = explode(',', $stamarr[0]['orientierung']);
			$this->view->kunstliche = explode(',', $stamarr[0]['kunstliche']);
			$this->view->ausscheidung = explode(',', $stamarr[0]['ausscheidung']);
			$this->view->kunstlichemore = $stamarr[0]['kunstlichemore'];
			
			//Stamdaten end

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$patientdetails = $patientmaster->getMasterData($decid, 0);
			$this->view->kontactnumber_dec = $patientdetails['kontactnumber_dec'];
			$this->view->kontactnumbertype = $patientdetails['kontactnubertype'];
			$this->view->hospitzz = $patientdetails['ishospiz'];

			if($patientdetails)
			{
				$this->retainValues($patientdetails);
			}
			if($patientdetails['living_will_from'] != "0000-00-00" && $patientdetails['living_will_from'] != "0000-00-00 00:00" && !empty($patientdetails['living_will_from']) && $patientdetails['living_will_from'] != 0)
			{
				$this->view->living_will_from = date("d.m.Y", strtotime($patientdetails['living_will_from']));
			}
			else
			{
				$this->view->living_will_from = "";
			}
			$this->view->sex = Pms_CommonData::getGenderById($patientdetails['sex']);

			/*			 * ******* Patient History ************ */
			$readmission_dates = new PatientReadmission();
			$admisiondatesarray = $readmission_dates->getPatientReadmissionAll($ipid);

			foreach($admisiondatesarray as $adm_item)
			{
				$first_admission = date('Y-m-d H:i:s', strtotime($patientdetails['admission_date']));
				$lastdischarge = PatientDischarge::getPatientLastDischarge($ipid);
				$patient_history[$adm_item['date']] = $adm_item['date_type'];
				$patient_history_full[$adm_item['date']] = $adm_item;
			}

			$patient_history[$first_admission] = '1';
			if($lastdischarge)
			{
				$patient_history[$lastdischarge[0]['discharge_date']] = '2';
			}

			ksort($patient_history, SORT_STRING);
			$this->view->patient_adm_history = $patient_history;

			/*			 * ******* Vollversorgung History ************ */
			$vvhistory = new VollversorgungHistory();
			$historyvv = $vvhistory->getVollversorgungHistoryAll($ipid);
			//check if we have any data in history table
			if(count($historyvv) == "0" && $patientdetails['vollversorgung'] == "0")
			{
				$this->view->hideEditButton = "1";
			}
			if(count($historyvv) == "0" && $patientdetails['vollversorgung'] == "1")
			{
				$ins = new VollversorgungHistory();
				$ins->user_id = $logininfo->userid;
				$ins->ipid = $ipid;
				$ins->date = date("Y-m-d H:i:s", strtotime($patientdetails['vollversorgung_date']));
				$ins->date_type = "1";
				$ins->save();

				$historyvv[0]['date'] = $patientdetails['vollversorgung_date'];
				$historyvv[0]['date_type'] = $patientdetails['vollversorgung_date'];
				$this->view->hideEditButton = "0";
			}

			foreach($historyvv as $keyh => $valh)
			{
				if($valh['date_type'] == 1)
				{
					$startDatesHistory[] = $valh['date'];
				}
				else if($valh['date_type'] == 2)
				{
					$endDatesHistory[] = $valh['date'];
				}
			}

			$this->view->startDatesHistory = $startDatesHistory;
			$this->view->endDatesHistory = $endDatesHistory;
			
			/*			 * *************MEDI PUMPS********************** */
			$medipumps_client = new Medipumps();
			$client_mp = $medipumps_client->getMedipumps($clientid);
			
			foreach($client_mp as $k_mp => $v_mp)
			{
				$client_medipumps[$v_mp['id']] = $v_mp;
			}
			$this->view->client_medipumps = $client_medipumps;
			
			$medi_pump = new PatientMedipumps();
			$patientmedipumps = $medi_pump->get_patient_medipumps($ipid);
			$this->view->patientmedipumpe = $patientmedipumps;
			/*			 * *************MEDI PUMPS********************** */
					

			/* Hilfsmittel II new box==Patient Remedies-tool */
			$pr = Doctrine_Query::create()
			->select('*')
			->from('PatientRemedies')
			->where('ipid="'.$ipid.'"')
			->andWhere("isdelete=0");
			$prarray=$pr->fetchArray();
			
				
			$supp = new PatientSupplies();
			foreach ($prarray as $key => $value)
			{
				$s[$value['remedies']]= $supp->getPatientSupplies($ipid,$value['supplier']);
			
			}
				
			
				
			foreach($s as $key => $value)
			{
				$supplier[$key]=$value[0]['supplier'];
			}
				
			$this->view->remds =$supplier;
					
			/* END Hilfsmittel II new box */
			
			/* ------------ Suppliers (Sonst. Versorger in Aphotheke box)  -------------------- */
			$supplier = new PatientSuppliers();
			$supplier_array = $supplier->getPatientSuppliers($ipid);
			
			if(count($supplier_array) > 0)
			{
				$this->view->issupplier = 1;
				$this->view->patient_suppliers_array = $supplier_array;
			}
			else
			{
				$this->view->issupplier = 0;
				$this->view->suppliersmsg = $this->view->translate("no_suppliers_versorger");
			}
			/* ------------ End Suppliers (Sonst. Versorger in Aphotheke box) -------------------- */
					
			
			/*			 * ******* Theraphieplanung ************ */
			$therapy = new PatientTherapieplanung();
			$patienttherapy = $therapy->getTherapieplanungData($ipid);

			$this->retainValues($patienttherapy[0]);
			/*			 * *********Family Doctor************** */

			if($patientdetails['living_will'] > 0)
			{
				$detailsstr.=",grow6";
			}
			if($patientdetails['familydoc_id'] > 0)
			{
				$fdoc = new FamilyDoctor();
				$docarray = $fdoc->getFamilyDoc($patientdetails['familydoc_id']);

				$this->view->doc_firstname = $docarray[0]['first_name'];
				$this->view->doc_lastname = $docarray[0]['last_name'];
				$this->view->doc_salutation = $docarray[0]['salutation'];
				$this->view->doc_phone_practice = $docarray[0]['phone_practice'];
				$this->view->doc_phone_cell = $docarray[0]['phone_cell'];
				$this->view->doc_phone_private = $docarray[0]['phone_private'];
				$this->view->doc_street1 = $docarray[0]['street1'];
				$this->view->doc_zip = $docarray[0]['zip'];
				$this->view->doc_city = $docarray[0]['city'];
				$this->view->doc_fax = $docarray[0]['fax'];
				$this->view->doc_number = $docarray[0]['number'];
				$this->view->doc_bsnr = $docarray[0]['bsnr'];
				$this->view->isdoc = 1;

				$detailsstr.=",grow9";
			}
			else
			{
				$this->view->isdoc = 0;
				$this->view->fdocmsg = $this->view->translate("nofamilydoctor");
			}

			$ps = new PatientSupply();
			$pat_supply = $ps->getpatientSupplyData($ipid);
			$supcnt = $pat_supply[0]['even'] + $pat_supply[0]['spouse'] + $pat_supply[0]['member'] + $pat_supply[0]['private_support'] + $pat_supply[0]['nursing'];

			if($supcnt > 0)
			{
				$detailsstr.=",grow4";
			}
			$this->retainValues($pat_supply[0]);

			$fdoc = new PatientPflegedienste();
			$docarray = $fdoc->getPatientPflegedienste($ipid);

			if(count($docarray) > 0)
			{
				$this->view->ispflege = 1;

				$palliativpflegedienst = "No";
				if($docarray[0]['palliativpflegedienst'] == 1)
				{
					$palliativpflegedienst = "Yes";
					$this->view->palliativpflegedienst = 1;
				}
				else
				{
					$this->view->nursing = 1;
				}

				$this->view->palliativpf = $palliativpflegedienst;
				if($docarray[0]['heimpersonal'] == 1)
				{
					$this->view->heimpersonal = 1;
				}
				$detailsstr.=",grow15";

				$pflegedienstegrid = new Pms_Grid($docarray, 1, count($docarray), "PrintPatientPflegedienstes.html");
				$this->view->patient_pflegedienstes = $pflegedienstegrid->renderGrid();
			}
			else
			{
				$this->view->ispflege = 0;
				$this->view->pflegemsg = $this->view->translate("nopflege");
			}

			/* --------------------- ambulanter Hospizdienst ---------------------- */
			$hp_assoc = new PatientHospiceassociation ();
			$hp_assoc_array = $hp_assoc->getPatientHospiceassociation($ipid);


			if(count($hp_assoc_array) > 0)
			{
				$this->view->has_hp_assoc = 1;
				$this->view->patient_hospiceassociations = $hp_assoc_array;
			}
			else
			{
				$this->view->has_hp_assoc = 0;
				$this->view->hospiceassociationmsg = $this->view->translate("no_hp_assoc");
			}
			/* ---------------------ambulanter Hospizdienst END---------------------- */

			/* ------------ Pharmacy -------------------- */
			$pha = new PatientPharmacy ();
			$docarray = $pha->getPatientPharmacy($ipid);

			if(count($docarray) > 0)
			{
				$this->view->ispharmacy = 1;
				$detailsstr.=",grow26";

				$pharmacygrid = new Pms_Grid($docarray, 1, count($docarray), "PrintPatientPharmacy.html");
				$this->view->patient_pharmacy = $pharmacygrid->renderGrid();
			}
			else
			{
				$this->view->ispharmacy = 0;
				$this->view->pharmacymsg = $this->view->translate(" ");
			}
			/* ------------ End Pharmacy -------------------- */

			/* ------------ Supplies  -------------------- */
			$supp = new PatientSupplies ();
			$supp_array = $supp->getPatientSupplies($ipid);

			if(count($supp_array) > 0)
			{
				$this->view->issupplies = 1;
				$this->view->patient_supplies_array = $supp_array;
			}
			else
			{
				$this->view->issuppliesy = 0;
				$this->view->suppliesmsg = $this->view->translate("no_suppliers");
			}
			/* ------------ End Supplies -------------------- */

			/* ------------ Specialists Start -------------------- */

			$spec = new PatientSpecialists();
			$spec_array = $spec->get_patient_specialists($ipid);

			$specialists_types = new SpecialistsTypes();
			$sp_types = $specialists_types->get_specialists_types($clientid);
			if($sp_types)
			{
				foreach($sp_types as $k_specialities => $v_specialities)
				{
					$sp_types_arr[$v_specialities['id']] = $v_specialities['name'];
				}
			}

			$this->view->specialists_types = $sp_types_arr;

			$spec_ids[] = '999999999';
			foreach($spec_array as $k_spec => $v_spec)
			{
				$spec_ids[] = $v_spec['sp_id'];
				$spec_details[$v_spec['sp_id']]['comment'] = $v_spec['comment'];
				$spec_details[$v_spec['sp_id']]['pat_sp_id'] = $v_spec['id'];
			}

			$master_spec = new Specialists();
			$master_spec_array = $master_spec->get_specialist($spec_ids);

			foreach($master_spec_array as $k_m_sp => $v_m_sp)
			{
				$m_sp_array[$v_m_sp['id']] = $v_m_sp;
				$m_sp_array[$v_m_sp['id']]['comment'] = $spec_details[$v_m_sp['id']]['comment'];
				$m_sp_array[$v_m_sp['id']]['pat_sp_id'] = $spec_details[$v_m_sp['id']]['pat_sp_id'];
			}

			if($m_sp_array)
			{
				$this->view->isspecialist = '1';
				$this->view->patient_specialists_array = $m_sp_array;
				$this->view->specialistsmsg = '';
			}
			else
			{
				$this->view->isspecialist = '0';
				$this->view->specialistsmsg = $this->view->translate("no_specialists");
			}
			/* ------------ Specialists End -------------------- */

			/* -----------Voluntary Workers ----------------------------------- */
			$pvw = new PatientVoluntaryworkers();
			$pvwarray = $pvw->getPatientVoluntaryworkers($ipid);

			if(count($pvwarray) > 0)
			{
				$this->view->ispvw = 1;
				$detailsstr.=",grow15";

				$patientvoluntarywgrid = new Pms_Grid($pvwarray, 1, count($pvwarray), "Printpatientvoluntaryworkers.html");
				$this->view->patient_voluntaryworkers = $patientvoluntarywgrid->renderGrid();
			}
			else
			{
				$this->view->ispvw = 0;
				$this->view->pvwmsg = $this->view->translate("novoluntary");
			}

			/* ----------------------------------End Voluntary Workers---------------------------- */
			$this->view->newsapv = 1; // 0- Don't show the new version of the box
			
			$sav = new SapvVerordnung();
			$modules = new Modules();
			if($modules->checkModulePrivileges("69", $clientid))
			{
				$sapv_extra = true;
			}
			else
			{
				$sapv_extra = false;
			}
				
			if($modules->checkModulePrivileges("70", $clientid)) // primary status : Verordnung
			{
				$sapv_primary_status = true;
			}
			else
			{
				$sapv_primary_status = false;
			}
				
			if($modules->checkModulePrivileges("71", $clientid)) // secondary status : Verordnung 2nd Page
			{
				$sapv_secondary_status = true;
			}
			else
			{
				$sapv_secondary_status = false;
			}
				
			if($modules->checkModulePrivileges("97", $clientid)) // secondary status : Verordnung 2nd Page
			{
				$sapv_bra_options = true;
			}
			else
			{
				$sapv_bra_options = false;
			}
			
			$this->view->sapv_extra = $sapv_extra;
			$this->view->sapv_primary_status = $sapv_primary_status;
			$this->view->sapv_secondary_status = $sapv_secondary_status;
			$this->view->sapv_bra_options = $sapv_bra_options;
			
			$sapv_perm = new SapvverordnungPermissions();
			$clientsapv_subdivision = $sapv_perm->getClientSapvverordnungpermissions($clientid);
			
			if($clientsapv_subdivision)
			{
				foreach($clientsapv_subdivision as $kh => $sub)
				{
					$sapv_subdivizions[] = $sub['subdiv_id'];
				}
			}
			else
			{
				$sapv_subdivizions[] = '1'; // set DEFAULT sapv box
			}
			
			$this->view->sapv_subdivizions = $sapv_subdivizions;
			$this->view->clientsapv_subdivision = $clientsapv_subdivision;
			
			$sgbv_details = new SgbvForms();
			$patient_sgbv_array = $sgbv_details->getallPatientSgbvForm($ipid);
			$sgbv_status = Pms_CommonData::getSgbvStatusRadio();
			$pdata['sgbv_status'] = $sgbv_status;
			$this->view->sgbv_status = $sgbv_status;
			
			$patient_sgbv_ids[] = '999999999';
			foreach($patient_sgbv_array as $sk => $sgbvvalues)
			{
				$patient_sgbv[$sgbvvalues['id']] = $sgbvvalues;
				$patient_sgbv_ids[] = $sgbvvalues['id'];
			}
			
			$sgbv_items = new SgbvFormsItems();
			$sgbv_actions = $sgbv_items->getPatientSgbvFormItems($ipid, $patient_sgbv_ids);
			
			$social_code_actions = new SocialCodeActions();
			$sc_actions = $social_code_actions->getAllCientSgbvActions($clientid);
			foreach($sc_actions as $k_action => $v_action)
			{
				$client_sc_actions[$v_action['id']] = $v_action;
			}
			
			foreach($sgbv_actions as $k_sgbv_act => $v_sgbv_act)
			{
				if($client_sc_actions[$v_sgbv_act['action_id']]['custom'] == '1' && $client_sc_actions[$v_sgbv_act['action_id']]['parent'] != '0')
				{
					$sgbv_act_details[$v_sgbv_act['sgbv_form_id']][$v_sgbv_act['action_id']] = $client_sc_actions[$client_sc_actions[$v_sgbv_act['action_id']]['parent']]['action_name'];
				}
				else
				{
					$sgbv_act_details[$v_sgbv_act['sgbv_form_id']][$v_sgbv_act['action_id']] = $client_sc_actions[$v_sgbv_act['action_id']]['action_name'];
				}
				$sgbv_act_details_free[$v_sgbv_act['sgbv_form_id']][$v_sgbv_act['action_id']] = $v_sgbv_act['free_of_charge'];
			}
			
			$this->view->patient_sgbv = $patient_sgbv;
			$this->view->patient_sgbv_actions = $sgbv_act_details;
			$this->view->patient_sgbv_actions_foc = $sgbv_act_details_free;
			
			$default_pavt = Pms_CommonData::default_approved_visit_type(); // if nothing saved -> get default
			
			if(in_array("5", $sapv_subdivizions))
			{
				$pavt = new PatientApprovedVisitTypes();
				$pavt_active = $pavt->get_active_patient_approved_visit_type($ipid, true); // ipid, true- check for current day
				$all_pavt = $pavt->get_all_patient_approved_visit_type($ipid);
			
				foreach($patient_history as $date => $type)
				{
					if($type == 1)
					{
						$admissions_dates[] = $date;
					}
				}
			
				$this->view->only_default = 0;
			
				if(empty($all_pavt))
				{
					$pavt_active['visit_type'] = $default_pavt;
					$all_pavt[0]['visit_type'] = $default_pavt;
					$all_pavt[0]['start_date'] = date('d.m.Y', strtotime($admissions_dates[0])); // first admission ever
					$default_visit_from = date('d.m.Y', strtotime($admissions_dates[0])); // first admission ever
					$pavt_default = $all_pavt[0];
					$this->view->only_default = 1;
				}
				$this->view->pavt_default = $pavt_default;
				$this->view->approved_visit_type = $pavt_active['visit_type'];
				$this->view->approved_visit_type_history = $all_pavt;
			}	
			/*$savarr = $sav->getLastSapvVerordnungData($ipid); //ISPC - 2084

			$radioarr = $sav->getSapvRadios();

			if($savarr[0]['verordnet_von'])
			{
				$this->view->verordnet_von = $sav->get_verordnet_von($savarr[0]['verordnet_von'], $savarr[0]['verordnet_von_type']);
				$this->view->vercount = 1;

				if($savarr[0]['verordnungam'] != '0000-00-00 00:00:00')
				{
					$this->view->verordnungam = date('d.m.Y', strtotime($savarr[0]['verordnungam']));
				}

				if($savarr[0]['verordnungbis'] != '0000-00-00 00:00:00')
				{
					$this->view->verordnungbis = date('d.m.Y', strtotime($savarr[0]['verordnungbis']));
				}

				$comma = "";
				$verordnet = explode(",", $savarr[0]['verordnet']);
				for($i = 0; $i < count($verordnet); $i++)
				{
					$ver .= $comma . $verordnetarray[$verordnet[$i]];
					$comma = ", ";
				}


				$this->view->verordnet = $ver;
				$this->view->status = $radioarr[$savarr[0]['status']];
				$this->view->vid = $savarr[0]['id'];
			}
			else
			{
				$this->view->vercountmsg = $this->view->translate("sapv_error");
			}*/

			/*			 * ********Sapv Verordnung***************** */
			$savarry = $sav->getSapvVerordnungData($ipid);
			/* ISPC - 2084 */
			foreach($savarry as $keys=>$vals)
			{
				$sapvarray[$keys] = $vals;
				if($keys == '0')
				{
					if($vals['sapv_order'] == '1')
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Erstverordnung';
					}
					elseif($vals['sapv_order'] == '2')
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Folgeverordnung';
					}
					else
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Erstverordnung';
					}
				}
				else
				{
					if($vals['sapv_order'] == '1')
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Erstverordnung';
					}
					elseif($vals['sapv_order'] == '2')
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Folgeverordnung';
					}
					else
					{
						$sapvarray[$keys]['sapv_order_name'] = 'Folgeverordnung';
					}
				}
			}
				
			$sort_col = array();
			foreach ($sapvarray as $keya=> $rowa) {
				$sort_col[$keya] = $rowa['sapv_order_name'];
			}
				
			array_multisort($sort_col, SORT_ASC, $sapvarray);
			/* ISPC - 2084 */
			$this->view->extraradioarr = $sav->getSapvExtraStatusesRadios();
			$this->view->extra_set_array = $sav->getSapvExtraRadios();

			if(count($sapvarray) > 0)
			{
				$detailsstr.=",grow11";
			}
			else 
			{
				$this->view->vercountmsg = $this->view->translate("sapv_error");
			}

			$this->view->savpcount = count($sapvarray);
			$grid = new Pms_Grid($sapvarray, 1, count($sapvarray), "sapvverordnunglist.html");
			$this->view->sapvverordnunglist = $grid->renderGrid();

			/*			 * *********Health Insurance ************** */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if(count($phi) > 0)
			{
				$detailsstr.=",grow10";
			}

			if(count($phi) > 0)
			{
				$this->view->insurance_no = $phi[0]['insurance_no'];
				$this->view->kvk_no = $phi[0]['kvk_no'];
				$this->view->company_name = $phi[0]['company_name'];
				$this->view->comment = $phi[0]['comment'];
				$reze = "";
				$exemption_till_date = "";
				if($phi[0]['rezeptgebuhrenbefreiung'] == 1)
				{
					$reze = $this->view->translate('gebuhrenbefreit');
					if($phi[0]['exemption_till_date'] != '') //ISPC - 2079
					{
						$exemption_till_date = date('d.m.Y', strtotime($phi[0]['exemption_till_date']));
					}
				}
				
				if($phi[0]['rezeptgebuhrenbefreiung'] == 2)
				{
					$reze = $this->view->translate('gebuhrenpflichtig');
				}

				$this->view->reze = $reze;
				$this->view->exemption_till_date = $exemption_till_date;	//ISPC - 2079		
				
				$private = "";
				if($phi[0]['privatepatient'] == 1 || (($phi[0]['direct_billing'] == 1 && $phi[0]['privatepatient'] == 1)))
				{
					$private = $this->view->translate('privatepatient');
				}
				$this->view->private = $private;
				
				$direct_billing = "";
				if($phi[0]['direct_billing'] == 1 && $phi[0]['privatepatient'] == 0)
				{
					$direct_billing = $this->view->translate('direct_billing');
				}
				$this->view->direct_billing = $direct_billing;
				
				$bg_patient = "";
				if($phi[0]['bg_patient'] == 1)
				{
					$bg_patient = $this->view->translate('bg_patient');
				}
				$this->view->bg_patient = $bg_patient;

				$st = new KbvKeytabs();
				$status_array = $st->getKbvKeytabs(1);

				if($phi[0]['insurance_status'] != "")
				{
					$this->view->insurance_status = $status_array[$phi[0]['insurance_status']];
				}
			}
			/*			 * ********* Patient Location************* */

			$loca = Doctrine::getTable('PatientLocation')->findBy('ipid', $ipid);

			$loca = new PatientLocation();
			$locaarray = $loca->getPatientLocations($ipid);

			if(count($locaarray) > 0)
			{
				$detailsstr.=",grow13";
			}

			$this->view->locationcount = count($locaarray);
			$lpc = new ContactPersonMaster();
			$lpcs = $lpc->getPatientContact($ipid);

			$acp_ContactPersonMaster = $lpcs;
			
			if($lpcs)
			{
				$z = 1;
				foreach($lpcs as $value)
				{
					$location_cnt[$z] = 'bei Kontaktperson ' . $z . '(' . $value['cnt_last_name'] . ' ' . $value['cnt_first_name'] . ')';
					$location_cnt_phone[$z] = $value['cnt_phone'];
					$z++;
				}
				$this->view->location_cnt = $location_cnt;
				$this->view->location_cnt_phone = $location_cnt_phone;
			}

			$grid = new Pms_Grid($locaarray, 1, count($locaarray), "listvalidlocation.html");
			$this->view->locations = $grid->renderGrid();

			//special for client id = 48
			if($clientid == 48)
			{
				$displayhospizverein = 1;
				$this->view->displayhospizverein = $displayhospizverein;
			}

			$phospiz = new PatientHospizverein();
			$pat_phospiz = $phospiz->getHospizvereinData($ipid);
			$pat_hospizverein = $pat_phospiz[0]['hospizverein'];
			$pat_hospizverein_txt = $pat_phospiz[0]['hospizverein_txt'];

			$this->view->hospizverein = $pat_hospizverein;
			$this->view->hospizverein_txt = $pat_hospizverein_txt;

			/*			 * ********* Hospiz / Hospizvereins ************** */
			/* get patient ishospiz/ ishospizverein details */
			$ishospiz = $patientdetails['ishospiz'];
			$this->view->ishospiz = $patientdetails['ishospiz'];
			$this->view->ishospizverein = $patientdetails['ishospizverein'];
			/*			 * ********* END Hospiz / Hospizvereins ************** */

			/*			 * *********Patient Contact ************** */
			$this->view->openhidediv = '0';

			if($this->getRequest()->isPost() && $_REQUEST['mode'] != 'vv')
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
					exit;
				}
				$contact_form = new Application_Form_ContactPersonMaster();
				//stamdaten
				$stam = new Application_Form_Stammdatenerweitert();
				$a_post = $_POST;
				$a_post['ipid'] = $ipid;
				//stamdaten insert
				$stam->InsertData($a_post);

				$pm_form = new Application_Form_PatientMaster();
				if(strlen($a_post['real_contact_number']) > 0)
				{
					$pm_form->UpdateContactNumber($a_post['cnt_phone'], '1');
				}

				if($contact_form->validate($_POST))
				{
					$contact_form->InsertDataSingle($a_post);
					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					$this->view->openhidediv = 0;
				}
				else
				{
					$contact_form->assignErrorMessages();
					$stam->assignErrorMessages();
					$cntstr.="grow12,";
					$this->view->error_message = $this->view->translate('missedsthtofill');
					$this->retainValues($_POST);
					$this->view->openhidediv = 1;
				}
			}

			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);

			if(count($pcs) > 0)
			{
				$detailsstr.=",grow12";
			}

			$contactgrid = new Pms_Grid($pcs, 1, count($pcs), "PrintPatientContacts.html");
			$contactgrid->gigl = "ggg";
			
			$this->view->patient_contacts = $contactgrid->renderGrid();
			
			/* ---------------------Physiotherapists---------------------- */
			$phy = new PatientPhysiotherapist();
			
			$phy_array = $phy->getPatientPhysiotherapist($ipid);
			//print_r($phy_array);exit;
			if(count($phy_array) > 0)
			{
				$this->view->isphysio = 1;
			
				$detailsstr.=",grow15";
			
				$physiogrid = new Pms_Grid($phy_array, 1, count($phy_array), "PatientPhysiotherapist.html");
				$this->view->patient_physiotherapist = $physiogrid->renderGrid();
			}
			else
			{
				$this->view->isphysio = 0;
				$this->view->physiomsg = $this->view->translate("nophysio");
			}
			
			    
			/* -----------------------Homecares---------------------- */
			$home = new PatientHomecare();
			
			$home_array = $home->getPatientHomecare($ipid);
			
			if(count($home_array) > 0)
			{
				$this->view->ishome = 1;
			
				$detailsstr.=",grow15";
			
				$homegrid = new Pms_Grid($home_array, 1, count($home_array), "PatientHomecare.html");
				$this->view->patient_homecare = $homegrid->renderGrid();
			}
			else
			{
				$this->view->ishome = 0;
				$this->view->homemsg = $this->view->translate("nohome");
			}
				
			
			//Patient churches
			$chsp = new PatientChurches();
			$chsparray = $chsp->getPatientChurch($ipid);
						
			if(count($chsparray) > 0)
			{
				$this->view->ischurch = 1;
					
				$detailsstr.=",grow47";
					
				$churchgrid = new Pms_Grid($chsparray, 1, count($chsparray), "PrintPatientChurches.html");
				$this->view->patient_churches = $churchgrid->renderGrid();
			}
			else
			{
				$this->view->ischurch = 0;
				$this->view->churchmsg = $this->view->translate("nochurch");
			}
				
			/*			 * ********************************************** */

			$frm = new ExtraForms();
			$displayfamilydoc = $frm->getClientPersmission($clientid, 9);
			$this->view->displayfamilydoc = $displayfamilydoc;
			$displaypharmacy = $frm->getClientPersmission($clientid, 26);
			$this->view->displaypharmacy = $displaypharmacy;
			$displayhealthinsurance = $frm->getClientPersmission($clientid, 10);
			$this->view->displayhealthinsurance = $displayhealthinsurance;
			$displaymobility = $frm->getClientPersmission($clientid, 5);
			$this->view->displaymobility = $displaymobility;
			$displaypatientlives = $frm->getClientPersmission($clientid, 1);
			$this->view->displaypatientlives = $displaypatientlives;
			$displaylivingwill = $frm->getClientPersmission($clientid, 6);
			$this->view->displaylivingwill = $displaylivingwill;
			$displaycarelevel = $frm->getClientPersmission($clientid, 7);
			$this->view->displaycarelevel = $displaycarelevel;
			$displayreligions = $frm->getClientPersmission($clientid, 8);
			$this->view->displayreligions = $displayreligions;
			$displaysupply = $frm->getClientPersmission($clientid, 4);
			$this->view->displaysupply = $displaysupply;
			$displaymoreinformation = $frm->getClientPersmission($clientid, 3);
			$this->view->displaymoreinformation = $displaymoreinformation;
			//for stamdaten page not working
			$displaypatientdet = $frm->getClientPersmission($clientid, 23);
			$this->view->displaypatientdet = $displaypatientdet;
			$displaycontactp = $frm->getClientPersmission($clientid, 12);
			$this->view->displaycontactp = $displaycontactp;
			$displaysapv = $frm->getClientPersmission($clientid, 11);
			$this->view->displaysapv = $displaysapv;
			$displayaufenthaltsort = $frm->getClientPersmission($clientid, 13);
			$this->view->displayaufenthaltsort = $displayaufenthaltsort;
			$displaypflegedienst = $frm->getClientPersmission($clientid, 15);
			$this->view->displaypflegedienst = $displaypflegedienst;
			//from stamdaten e...
			$displayfamilienstand = $frm->getClientPersmission($clientid, 16);
			$this->view->displayfamilienstand = $displayfamilienstand;
			$displayvigilanz = $frm->getClientPersmission($clientid, 18);
			$this->view->displayvigilanz = $displayvigilanz;
			$displayernahrung = $frm->getClientPersmission($clientid, 20);
			$this->view->displayernahrung = $displayernahrung;
			$displaykunstliche = $frm->getClientPersmission($clientid, 22);
			$this->view->displaykunstliche = $displaykunstliche;
			$displaystaatszugehorigkeit = $frm->getClientPersmission($clientid, 17);
			$this->view->displaystaatszugehorigkeit = $displaystaatszugehorigkeit;
			$displayorientierung = $frm->getClientPersmission($clientid, 19);
			$this->view->displayorientierung = $displayorientierung;
			$displayausscheidung = $frm->getClientPersmission($clientid, 21);
			$this->view->displayausscheidung = $displayausscheidung;
			//new box
			$displayphysiotherapist = $frm->getClientPersmission($clientid, 47);
			$this->view->displayphysiotherapist = $displayphysiotherapist;
			$displayhomecare = $frm->getClientPersmission($clientid, 48);
			$this->view->displayhomecare = $displayhomecare;
			$displayhilfsmittel = $frm->getClientPersmission($clientid, 24);
			$this->view->displayhilfsmittel = $displayhilfsmittel;
			$displaymedipumpe = $frm->getClientPersmission($clientid, 43);
			$this->view->displaymedipumpe = $displaymedipumpe;
			$displayhilfsmittelII = $frm->getClientPersmission($clientid, 49);
			$this->view->displayhilfsmittelII = $displayhilfsmittelII;
			$displaywunsch = $frm->getClientPersmission($clientid, 25);
			$this->view->displaywunsch = $displaywunsch;
			$displaypatienthistory = $frm->getClientPersmission($clientid, 35);
			$this->view->displaypatienthistory = $displaypatienthistory;
			$displayvvhistory = $frm->getClientPersmission($clientid, 36);
			$this->view->displayvvhistory = $displayvvhistory;
			$displayplanning = $frm->getClientPersmission($clientid, 37);
			$this->view->displayplanning = $displayplanning;
			$displayvoluntary = $frm->getClientPersmission($clientid, 38);
			$this->view->displayvoluntary = $displayvoluntary;
			$displayhosizhospizverein = $frm->getClientPersmission($clientid, 40);
			$this->view->displayhospizhospizverein = $displayhosizhospizverein;
			$displaysupplies = $frm->getClientPersmission($clientid, 41);
			$this->view->displaysupplies = $displaysupplies;
			$displayspecialists = $frm->getClientPersmission($clientid, 44);
			$this->view->displayspecialists = $displayspecialists;
			$displayhospiceservice = $frm->getClientPersmission($clientid, 42);
			$this->view->displayhospiceservice = $displayhospiceservice;
			$displayvisitssettings = $frm->getClientPersmission($clientid, 45);
			$this->view->displayvisitssettings = $displayvisitssettings;
			//45 is mising?
			//Versorger(Aphotheke box)
			$displayversorger = $frm->getClientPersmission($clientid, 46);
			$this->view->displayversorger = $displayversorger;
			$displaychurch = $frm->getClientPersmission($clientid, 53);
			$this->view->displaychurch = $displaychurch;

			
			//ISPC-1897 bacteria = germination
			$this->view->displaygermination = $frm->getClientPersmission($clientid, 52);
			$germination = array();
			if($this->view->displaygermination) {
				$germination['id'] = 52;
				$pat_germs = new PatientGermination();
				$pat_germination = $pat_germs->getPatientGermination(array($ipid) , array('colums2fetch'=>'id, ipid, germination_cbox, germination_text'));
				if(!empty($pat_germination) && !empty($pat_germination[$ipid])) {
					$germination['germination_cbox'] = $pat_germination[$ipid]['germination_cbox'];
					$germination['germination_text'] = $pat_germination[$ipid]['germination_text'];
				}
			}
			$this->view->germination = $germination;
			
			
			//ISPC-2056 - ACP
			//acp text settings and acp files on separate db.. so no join
			if ( $this->view->displaylivingwill ) {
			
				$box_name	= 'acp_box';
				${$box_name} = array();
			
				${$box_name}['defaults']['radio_values'] = array(
						"no"	=> "Ist nicht vorhanden",
						"yes"	=> "Ist vorhanden",
				);
			
				$pacp_obj = new PatientAcp();
				$pacp_array = $pacp_obj->getByIpid( array($ipid) );
			
				if ( ! empty($acp_ContactPersonMaster)) {
					ContactPersonMaster::beautifyName($acp_ContactPersonMaster);
					${$box_name}['defaults']['ContactPersonMaster'][0] = '';//please select option at the top
					foreach($acp_ContactPersonMaster as $row) {
						${$box_name}['defaults']['ContactPersonMaster'][$row['id']] = $row['nice_name'];
					}
				}
			
				if( ! empty($pacp_array) && ! empty($pacp_array[$ipid])) {
						
// 					$acp_files = PatientFileUpload::get_acp_files( array($ipid) );
// 					$acp_files = $acp_files[$ipid];
						
					foreach ($pacp_array[$ipid] as $row) {
// 						$row['files'] = $acp_files[ 'acp_file_' . $row['division_tab'] ];
						${$box_name}[ $row['division_tab'] ] = $row;
			
					}
				}
				
				
				$this->view->{$box_name} =  ${$box_name};
			}
			
			
			//ispc-2070 Orientation II box
			$this->view->displayOrientationII = $frm->getClientPersmission($clientid, 54);
			if ($this->view->displayOrientationII) {
			     
			    $box_name	= 'orientationII_box';
			    ${$box_name} = array();
			     
			    $po_ent = new PatientOrientation();
			    //saved values
			    $saved_pos = $po_ent->findByIpid($ipid);
			    ${$box_name}['active'] = $saved_pos ? array_column($saved_pos, 'orientation') : null;
			     
			    ${$box_name}['defaults']= array(
			        "radio_values"	=> $po_ent->getDefaultOrientation(),
			        "cb_values"	=> $po_ent->getDefaultCommunicationRestricted(),
			    );
			    
			    $this->view->{$box_name} =  ${$box_name};
			}
						
			
			$totals = $displaymobility + $displaypatientlives + $displaylivingwill + $displaycarelevel + $displayreligions + $displaysupply + $displaymoreinformation;

			/*			 * *************Patient Information********************** */
			$fdoc = Doctrine_Query::create()
				->select('*')
				->from('ExtraFormsClient')
				->where('clientid =' . $logininfo->clientid . '')
				->andWhere('formid =1');
			$mncd = $fdoc->execute();

// 			$mncd =  $frm->getClientPersmission($clientid, 1);
			
			if($mncd)
			{
				$fcarr = $mncd->toArray();
				if($totals > 0)
				{
					$allowedform = "allowed";
					
					/* *********** IPSC-1533 Patient Visits settings *********** */
					$pl = new PatientVisitsSettings();
					$pat_visits_settings = $pl->getPatientVisitsSettingsV2($ipid);
					$disabled_users = array();
					if ( count( $pat_visits_settings ) > 0 ){
					
					
						if ($pat_visits_settings['visit_duration'] == "" || $pat_visits_settings['visit_duration'] == "0"){
							$getClientDataByid = Client :: getClientDataByid($logininfo->clientid);
							$pat_visits_settings['visit_duration'] = (int)$getClientDataByid[0] ['tagesplanung_default_visit_time'] ;
						}
					
						$this->view->visit_duration = $pat_visits_settings['visit_duration'];
					
						//get also the user that can visit
						$visiting_users = User::get_all_visiting_users_and_groups( $logininfo->clientid, false, false );
						$visiting_users_array = $visiting_users['user_details'];
					
						foreach($visiting_users_array as $user){
							if (	($user['makes_visits'] == "0")
									||
									(	( $user['isactive'] == "1" )
											&&
											( strtotime($user['isactive_date']) <= strtotime(date("Y-m-d") ))
											)
									)
							{
								//this doctor was marked as cannot make visit, but he allready has assigned ones
								$disabled_users[] = $user['id'];
							}
						}
					
						$normal_group= array();
						foreach($visiting_users['grups'] as $k=>$v){
							$normal_group = ($normal_group+$v + array($k=>$k));
						}
					
						foreach($pat_visits_settings as $user => $type){
							reset($type);
							$type = key($type);
								
							if (	($visiting_users_array[ $user ] ['makes_visits'] == "0")
									||
									(	( $visiting_users_array[ $user ] ['isactive'] == "1" )
											&&
											( strtotime($visiting_users_array[ $user ] ['isactive_date']) <= strtotime(date("Y-m-d") ))
											)
									)
							{
								//this doctor was marked as cannot make visit, but he allready has assigned ones
								$pat_visits_settings[$user]['is_disabled'] = true;
							}
								
							if ($type == "pseudogrups"){
								if (empty($visiting_users['pseudogrups'][$user])){
									unset( $pat_visits_settings[$user] );
								}
							}else{
								if (empty($normal_group[$user])){
									unset( $pat_visits_settings[$user] );
								}
							}
								
						}
						if (empty($disabled_users)) $disabled_users = array( 0 => "9999999");
						//print_r($pat_visits_settings);
						//print_r($visiting_users);	die();
						$this->view->pat_visits_settings = $pat_visits_settings;
						$this->view->pat_visits_settings_visiting_users = $visiting_users;
						$this->view->pat_visits_settings_disabled_users = json_encode($disabled_users);
					
					}else{
						//get default visit time of this client
						$getClientDataByid = Client :: getClientDataByid($logininfo->clientid);
						$this->view->visit_duration = (int)$getClientDataByid[0] ['tagesplanung_default_visit_time'] ;
						$this->view->pat_visits_settings_disabled_users = json_encode( array( 0 => "9999999") );
					}
					

					/*					 * ***********Patient Lives*********** */
					$pl = new PatientLives();
					$pat_lives = $pl->getpatientLivesData($ipid);

					$patcnt = $pat_lives[0]['alone'] + $pat_lives[0]['house_of_relatives'] + $pat_lives[0]['apartment'] + $pat_lives[0]['home'] + $pat_lives[0]['hospiz'] + $pat_lives[0]['sonstiges'];
					if($patcnt > 0)
					{
						$detailsstr.=",grow1";
					}

					$this->retainValues($pat_lives[0]);

					$pm = new PatientMobility();
					$pat_mob = $pm->getpatientMobilityData($ipid);

					$mobcnt = $pat_mob[0]['bed'] + $pat_mob[0]['walker'] + $pat_mob[0]['wheelchair'] + $pat_mob[0]['goable'] + $pat_mob[0]['nachtstuhl'] + $pat_mob[0]['wechseldruckmatraze'];
					if($mobcnt > 0)
					{
						$detailsstr.=",grow5";
					}
					$this->retainValues($pat_mob[0]);

					$pmf = new PatientMoreInfo();
					$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

					$morecnt = $pat_moreinfo[0]['dk'] + $pat_moreinfo[0]['peg'] + $pat_moreinfo[0]['port'] + $pat_moreinfo[0]['pumps'] + $pat_moreinfo[0]['zvk'];
					if($morecnt > 0)
					{
						$detailsstr.=",grow3";
					}

					$this->retainValues($pat_moreinfo[0]);

					$pms = new PatientMaintainanceStage();
					$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);

					$patcnt = $pat_pms[0]['erstantrag'] + $pat_pms[0]['horherstufung'];

					if(count($patcnt) > 0 || $pat_pms['stage'] != "")
					{
						$detailsstr.=",grow7";
					}
					$this->retainValues($pat_pms[0]);
 
					$rel = new PatientReligions();
					$pat_rel = $rel->getReligionsData($ipid);
					$relcnt = $pat_rel[0]['religion'];
					if($relcnt > 0)
					{
						$detailsstr.=",grow8";
					}
					$this->retainValues($pat_rel[0]);
				}
				else
				{
					$allowedform = "";
				}
			}
			$this->view->allowedform = $allowedform;
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$pms = new PatientMaintainanceStage();
			$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
			$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
			$this->view->carelevellist = $grid->renderGrid();

			$detailscookies = '""';
			$oc = new OverviewCookie();
			$ocarr = $oc->getCookieData($userid, "patientdetails");

			switch($ocarr[0]['useroption'])
			{
				case 1 : $detailscookies = $cntstr;
					break;
				case 2 : $detailscookies = "grow14," . $detailsstr;
					break;
				case 3 : $detailscookies = $ocarr[0]['cookie'];
					break;
				default : break;
			}

			$this->view->detailscookies = "'" . $cntstr . $detailscookies . "'";

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
		}

		public function patientgetboxorderAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->patid = $decid;
			$ipid = Pms_CommonData::getIpid($decid);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			$ord = new BoxOrder();
			$column = $ord->getBoxOrder($userid, $_GET['col']);
			foreach($column as $keycol => $valcol)
			{
				if(is_numeric($valcol["boxid"]))
				{
					$col_array[] = $valcol["boxid"];
				}
			}

			echo(json_encode($col_array));
			exit;
		}

		public function patientboxorderAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->patid = $decid;
			$ipid = Pms_CommonData::getIpid($decid);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$delete = new BoxOrder();
			$del = $delete->deleteOrder($userid, $_GET['col']);

			foreach($_GET['item'] as $position => $item)
			{
				$col = $_GET['col'];
				$ord = new BoxOrder();
				$ord->userid = $userid;
				$ord->boxcol = $col;
				$ord->boxid = $item;
				$ord->boxorder = $position;
				$ord->save();
			}
			exit;
		}

		public function todoshistoryAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$clientid = $_GET['idd'];

			/* ############################################################## */
			$todo = new ToDos();
			$todohistory_completed = $todo->getCompletedTodosByClientId($clientid);

			$ipids[] = '99999999';
			$users[] = '99999999';
			$groups[] = '99999999';
			foreach($todohistory_completed as $k_todo => $v_todo)
			{
				$ipids[] = $v_todo['ipid'];
				$users[] = $v_todo['user_id'];
				$groups[] = $v_todo['group_id'];
			}
			$ipids = array_values(array_unique($ipids));
			$users = array_values(array_unique($users));
			$groups = array_values(array_unique($groups));


			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as firstname,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middlename,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as lastname,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
			}

			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $ipids)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ' . $logininfo->clientid);
			$patient_details = $patient->fetchArray();

			foreach($patient_details as $k_pat_det => $v_pat_det)
			{
				$patient_fullname[$v_pat_det['EpidIpidMapping']['ipid']] = $v_pat_det['lastname'] . ", " . $v_pat_det['firstname'];
			}

			$users_data = Pms_CommonData::getUsersData($users);

			$usersgroups = new Usergroup();
			$users_groups = $usersgroups->getUserGroupMultiple($groups);

			$out_c = new Pms_Grid($todohistory_completed, 1, count($todohistory_completed), "todoscompleted.html");
			$out_c->patient_fullname = $patient_fullname;
			$out_c->users_data = $users_data;
			$out_c->users_groups = $users_groups;
			$out_c->usertype = $logininfo->usertype;
			$out_c->userid = $logininfo->userid;
			$out_c->groupid = $logininfo->groupid;
			$out_c = $out_c->renderGrid();

			print_r($out_c);

			exit;
		}

		public function patientboxhistoryAction()
		{

			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->patid = $decid;
			$ipid = Pms_CommonData::getIpid($decid);
			$hist = new BoxHistory();
			$boxid = "grow" . $_GET['boxid'];
			$history = $hist->getHistoryByPatient($ipid);

			$ContactPersonMaster_array = array(); // this should/will be populated only on demand, check grow6new
			
			if(count($history) > 0)
			{
				$out = $history;
			}
			else
			{
				$out = "No log data";
			}
			$ds = new ExtraForms();
			$dsarr = $ds->getExtraFormsDetails();
			$this->grid->extraforms = $dsarr;

			$stam = new Stammdatenerweitert();
			$familienstands = $stam->getFamilienstandfun();
			$stastszugehorigkeits = $stam->getStastszugehorigkeitfun();
			$vigilanzs = $stam->getVigilanzfun();
			$orientierungs = $stam->getOrientierungfun();
			$ernahrungs = $stam->getErnahrungfun();
			$ausscheidungs = $stam->getAusscheidungfun();
			$kunstliches = $stam->getKunstlichefun();
			$radiobuttonoptions = $stam->getRadioOptionsfun();
			$grow_map = array("grow1" => "Patient lebt", "grow4" => "Versorgung", "grow5" => "Mobilität",
					"grow6" => "Patientenverfügung",
					"grow6new" => "ACP",// this was introduced with ISPC-2056
					
					"grow171120" => "Orientierung II",// this was introduced with ISPC-2070
					"grow54" => "Orientierung II",// this was introduced with ISPC-2070
					
					"grow171121" => "Mobilität II",// this was introduced with ISPC-2070
					"grow55" => "Mobilität II",// this was introduced with ISPC-2070
					
			    
					
				"grow7" => "Pflegestufe", "grow8" => "Religionszugehörigkeit", "grow16" => "Familienstand", "grow17" => "Staatszugehörigkeit",
				"grow18" => "Vigilanz", "grow19" => "Orientierung", "grow20" => "Ernährung", "grow21" => "Ausscheidung", "grow22" => "Künstliche Ausgänge"
				, "grow24" => "Hilfsmittel", "grow25" => "Wunsch des Patienten", "grow26" => "Apotheke",
				"grow35" => "Patient History", "grow36" => "Vollversorgung History", "grow37" => "Vorausschauende Therapieplanung", "grow38" => "", "grow39" => "", "grow40" => "", "grow41" => ""
				, "grow42" => "", "grow43" => "Tourenplanung", "grow44" => "", "grow45" => "", "grow46" => "", "grow47" => "",
				"grow48" => "", "grow49" => "", "grow50" => "", "grow51" => "", "grow52" => "Keimbesiedelung", "grow53" => "");

			foreach($history as $k => $v)
			{
				$userdata = Pms_CommonData::getUserData("" . $v['create_user'] . "");
				$history[$k]['fname'] = $userdata[0]['first_name'];
				$history[$k]['lname'] = $userdata[0]['last_name'];
				$history[$k]['fieldname'] = ucfirst($v['fieldname']);
				$history[$k]['create_date'] = date("d.m.Y H:i", strtotime($v['create_date']));
				$history[$k]['fieldname'] = $grow_map[$v['formid']];

				foreach($dsarr as $val)
				{
					$formid = explode("grow", $v['formid']);
					if($formid[1] == $val['id'])
					{
						$history[$k]['boxname'] = $val['formname'];
					}

					if($v['formid'] == "grow8")
					{
						$rl = new PatientReligions();
						$religions = $rl->getReligionsNames();

						$history[$k]['fieldvalue'] = $religions[$v['fieldvalue']];
						$history[$k]['fieldname'] = $grow_map[$v['formid']];
					}

					$wunsch = array("1" => "Zu Hause bleiben können", "2" => "kein Krankenhaus", "3" => "Autonomie", "4" => "Leidenslinderung", "5" => "Symptomlinderung",
						"6" => "mehr Kraft", "7" => "wieder aufstehen können", "8" => "noch eine Reise machen",
						"9" => "In Ruhe gelassen werden", "10" => "Keine Angabe", "11" => "Frage nach aktiver Sterbehilfe",
						"12" => "Lebensbeendigung", "13" => "Expliziter Wunsch");
				}

				if($v['formid'] == "grow24")
				{
					$hilfsmittel = array('1' => "O2", '2' => "Toilettensitz", '3' => "Pflegebett", '4' => "Rollstuhl", "5" => "Rollator", "6" => "Nachtstuhl", "7" => "Wechseldruckmatratze");
					$values = explode(",", $v['fieldvalue']);

					if($v['fieldname'] == "pumps")
					{
						if($v['fieldvalue'] == 0)
						{
							$history[$k]['fieldvalue'] = "Pumpe entfernt";
						}
						else
						{
							$history[$k]['fieldvalue'] = "Pumpe hinzugefügt";
						}
					}
					else
					{
						$x = explode("-", $v['fieldvalue']);
						if($x[1] == 0)
						{
							$history[$k]['fieldvalue'] = $hilfsmittel[$x[0]] . " entfernt";
						}
						else
						{
							$history[$k]['fieldvalue'] = $hilfsmittel[$x[0]] . " hinzugefügt";
						}
					}

					$f_array = '';
				}

				if($v['formid'] == "grow25")
				{
					$wunsch = array("1" => "Zu Hause bleiben können", "2" => "kein Krankenhaus", "3" => "Autonomie", "4" => "Leidenslinderung", "5" => "Symptomlinderung",
						"6" => "mehr Kraft", "7" => "wieder aufstehen können", "8" => "noch eine Reise machen",
						"9" => "In Ruhe gelassen werden", "10" => "Keine Angabe", "11" => "Frage nach aktiver Sterbehilfe",
						"12" => "Lebensbeendigung", "13" => "Expliziter Wunsch");

					$x = explode("-", $v['fieldvalue']);
					if($x[1] == 0)
					{
						$history[$k]['fieldvalue'] = $wunsch[$x[0]] . " entfernt";
					}
					else
					{
						$history[$k]['fieldvalue'] = $wunsch[$x[0]] . " hinzugefügt";
					}

					$f_array = '';
				}

				if($v['formid'] == "grow18")
				{
					$history[$k]['fieldvalue'] = $vigilanzs[$v['fieldvalue']];
				}

				if($v['formid'] == "grow19")
				{

					if($v['fieldname'] != "orientierung")
					{
						$array_flds = array("horprobleme" => "Hörprobleme", "kognitiv" => "kognitiv", "sprachlich" => "sprachlich");
						if($v['fieldvalue'] == 0)
						{
							$history[$k]['fieldvalue'] = $array_flds[$v['fieldname']] . " entfernt";
						}
						else
						{
							$history[$k]['fieldvalue'] = $array_flds[$v['fieldname']] . " hinzugefügt";
						}
					}
					else
					{
						$x = explode("-", $v['fieldvalue']);
						if($x[1] == 0)
						{
							$history[$k]['fieldvalue'] = $orientierungs[$x[0]] . " entfernt";
						}
						else
						{
							$history[$k]['fieldvalue'] = $orientierungs[$x[0]] . " hinzugefügt";
						}
					}

					$f_array = '';
				}

				if($v['formid'] == "grow22")
				{

					$x = explode("-", $v['fieldvalue']);
					if($x[1] == 0)
					{
						$history[$k]['fieldvalue'] = $kunstliches[$x[0]] . " entfernt";
					}
					else
					{
						$history[$k]['fieldvalue'] = $kunstliches[$x[0]] . " hinzugefügt";
					}
				}

				if($v['formid'] == "grow7")
				{
					if($v['fieldname'] != "stage")
					{
						if($v['fieldvalue'] == 0)
						{
							$history[$k]['fieldvalue'] = " entfernt";
						}
						else
						{
							$history[$k]['fieldvalue'] = " hinzugefügt";
						}
					}
					else
					{
						$history[$k]['fieldvalue'] = "Stage: " . $v['fieldvalue'];
					}
					
					if (date("Y", strtotime($v['create_date'])) > 2016 ){
						$history[$k]['fieldname'] = "Pflegegrade";
					}
					
				}
/*
				if($v['formid'] == "grow6" )
				{
					$fld_array_grow6 = array("living_will" => "Vorhanden", "living_will_deposited" => "wo hinterlegt", "living_will_from" => "von wann");

					if($v['fieldname'] == "living_will_from")
					{
						$history[$k]['fieldvalue'] = $fld_array_grow6[$v['fieldname']] . ": " . date("d.m.Y", strtotime($v['fieldvalue']));
					}
					else
					{

						if($v['fieldvalue'] == 0)
						{
							$history[$k]['fieldvalue'] = $fld_array_grow6[$v['fieldname']] . " entfernt";
						}
						else
						{
							$history[$k]['fieldvalue'] = $fld_array_grow6[$v['fieldname']] . " hinzugefügt";
						}
					}
				}
				
				// this new was introduced with ISPC-2056
				//@todo
				if( $v['formid'] == "grow6new")
				{
					
					$_acp_box_lang	= $this->translate('acp_box_lang');
					$_field_json	= json_decode($v['fieldname'], true);					
					$_division_tab	= $_field_json['division_tab'];
					$_fieldname		= $_field_json['fieldname'];

					
					$history[$k]['fieldname'] = 'ACP '. $_acp_box_lang[$_division_tab];
					
					switch ($_fieldname) {
						
						case "active" : 
							$history[$k]['fieldvalue'] = $_acp_box_lang[$_fieldname] .": " ;
							$history[$k]['fieldvalue'] .= ($v['fieldvalue'] == 'no') ? " entfernt" :" hinzugefügt"; 
							break;
							
						case "contactperson_master_id":
							
							if ( empty ($ContactPersonMaster_array)) {
								$cpm_obj = new ContactPersonMaster();
								$cpm_data = $cpm_obj->getPatientContact($ipid, false);
								foreach ($cpm_data as $row){
									$ContactPersonMaster_array[$row['id']] = $row;
								} 
								ContactPersonMaster::beautifyName($ContactPersonMaster_array);
							}
							
							$history[$k]['fieldvalue'] = $_acp_box_lang[$_fieldname] . ": ";
							$history[$k]['fieldvalue'] .= $ContactPersonMaster_array[$v['fieldvalue']] ['nice_name'];
							break;
							
						case "comments" :
							$history[$k]['fieldvalue'] = $_acp_box_lang[$_fieldname] . ": ";
							$history[$k]['fieldvalue'] .= $v['fieldvalue'];
							break;
							
					}
					
				}
				*/
				
				if($v['formid'] == "grow6" || $v['formid'] == "grow6new") 
				{
				    $_field_json	= json_decode($v['fieldname'], true);
				
				    if ($_field_json === null
				        && json_last_error() !== JSON_ERROR_NONE)
				    {
				        //old box
				        $fld_array_grow6 = array("living_will" => "Vorhanden", "living_will_deposited" => "wo hinterlegt", "living_will_from" => "von wann");
				         
				        if($v['fieldname'] == "living_will_from")
				        {
				            $history[$k]['fieldvalue'] = $fld_array_grow6[$v['fieldname']] . ": " . date("d.m.Y", strtotime($v['fieldvalue']));
				        }
				        else
				        {
				             
				            if($v['fieldvalue'] == 0)
				            {
				                $history[$k]['fieldvalue'] = $fld_array_grow6[$v['fieldname']] . " entfernt";
				            }
				            else
				            {
				                $history[$k]['fieldvalue'] = $fld_array_grow6[$v['fieldname']] . " hinzugefügt";
				            }
				        }
				
				    } else {
				        //new box
				        // this new was introduced with ISPC-2056
				        $_acp_box_lang	= $this->translate('acp_box_lang');
				        $_field_json	= json_decode($v['fieldname'], true);
				        $_division_tab	= $_field_json['division_tab'];
				        $_fieldname		= $_field_json['fieldname'];
				
				         
				        $history[$k]['fieldname'] = 'ACP '. $_acp_box_lang[$_division_tab];
				         
				        switch ($_fieldname) {
				
				            case "active" :
				                $history[$k]['fieldvalue'] = $_acp_box_lang[$_fieldname] .": " ;
				                $history[$k]['fieldvalue'] .= ($v['fieldvalue'] == 'no') ? " entfernt" :" hinzugefügt";
				                break;
				                 
				            case "contactperson_master_id":
				                 
				                if ( empty ($ContactPersonMaster_array)) {
				                    $cpm_obj = new ContactPersonMaster();
				                    $cpm_data = $cpm_obj->getPatientContact($ipid, false);
				                    foreach ($cpm_data as $row){
				                        $ContactPersonMaster_array[$row['id']] = $row;
				                    }
				                    ContactPersonMaster::beautifyName($ContactPersonMaster_array);
				                }
				                 
				                $history[$k]['fieldvalue'] = $_acp_box_lang[$_fieldname] . ": ";
				                $history[$k]['fieldvalue'] .= $ContactPersonMaster_array[$v['fieldvalue']] ['nice_name'];
				                break;
				                 
				            case "comments" :
				                $history[$k]['fieldvalue'] = $_acp_box_lang[$_fieldname] . ": ";
				                $history[$k]['fieldvalue'] .= $v['fieldvalue'];
				                break;
				                 
				        }
				    }
				}
				
				
			
				
				
				if ($v['formid'] == "grow171120" || $v['formid'] == "grow54") {
				    
				    $PatientOrientation_lang = array_merge(PatientOrientation::getDefaultOrientation(), PatientOrientation::getDefaultCommunicationRestricted() );
				    $history[$k]['fieldvalue'] = isset($PatientOrientation_lang[$v['fieldname']]) ? $PatientOrientation_lang[$v['fieldname']] : $v['fieldname'];
				    $history[$k]['fieldvalue'] .= ($v['fieldvalue'] == '0') ? " entfernt" :" hinzugefügt";
				}
				
				if ($v['formid'] == "grow171121" || $v['formid'] == "grow55") {
				
				    if ( ! isset($PatientMobility_lang)) {
    				    $pobj = new PatientMobility2();
    				    $PatientMobility_lang = $pobj->getEnumValuesDefaults();
				    }
				    
				    $history[$k]['fieldvalue'] = isset($PatientMobility_lang[$v['fieldname']]) ? $PatientMobility_lang[$v['fieldname']] : $v['fieldname'];
				    $history[$k]['fieldvalue'] .= ($v['fieldvalue'] == '0') ? " entfernt" :" hinzugefügt";
				}

				if($v['formid'] == "grow5")
				{
					$fld_array = array("wechseldruckmatraze" => "Wechseldruckmatratze",
						"nachtstuhl" => "Nachtstuhl",
						"goable" => "gehfähig",
						"wheelchair" => "Rollstuhl",
						"walker" => "Rollator",
						"bed" => "Bett");

					if($v['fieldname'] != "wheelchairmore" && $v['fieldname'] != "walkermore" && $v['fieldname'] != "bedmore" && $v['fieldname'] != "wechseldruckmatrazemore" && $v['fieldname'] != "goablemore" && $v['fieldname'] != "nachtstuhlmore")
					{
						if($v['fieldvalue'] == 0)
						{
							$history[$k]['fieldvalue'] = $fld_array[$v['fieldname']] . " entfernt";
						}
						else
						{
							$history[$k]['fieldvalue'] = $fld_array[$v['fieldname']] . " hinzugefügt";
						}
					}
					else
					{
						$history[$k]['fieldvalue'] = ucfirst($v['fieldname']) . ": " . $v['fieldvalue'];
					}
				}


				if($v['formid'] == "grow43")
				{
					$history[$k]['fieldvalue'] = ucfirst($this->view->translate($v['fieldname'])) . ": " . $v['fieldvalue'];
				}

				if($v['formid'] == "grow4")
				{
					if($v['fieldvalue'] == 0)
					{
						$history[$k]['fieldvalue'] = " entfernt";
					}
					else
					{
						$history[$k]['fieldvalue'] = " hinzugefügt";
					}
				}

				if($v['formid'] == "grow21")
				{
					if($v['fieldname'] != "dk")
					{
						$x = explode("-", $v['fieldvalue']);
						if($x[1] == 0)
						{
							$history[$k]['fieldvalue'] = $ausscheidungs[$x[0]] . " entfernt";
						}
						else
						{
							$history[$k]['fieldvalue'] = $ausscheidungs[$x[0]] . " hinzugefügt";
						}
					}
					else
					{
						if($v['fieldvalue'] == 0)
						{
							$history[$k]['fieldvalue'] = "DK entfernt";
						}
						else
						{
							$history[$k]['fieldvalue'] = "DK hinzugefügt";
						}
					}
				}

				if($v['formid'] == "grow17")
				{
					if($v['fieldname'] == "stastszugehorigkeit")
					{
						$history[$k]['fieldvalue'] = $stastszugehorigkeits[$v['fieldvalue']];
					}
					else
					{
						$history[$k]['fieldvalue'] = $v['fieldvalue'];
					}
				}

				if($v['formid'] == "grow20")
				{
					if($v['fieldname'] == "ernahrung")
					{
						$x = explode("-", $v['fieldvalue']);
						if($x[1] == 0)
						{
							$history[$k]['fieldvalue'] = $ernahrungs[$x[0]] . " entfernt";
						}
						else
						{
							$history[$k]['fieldvalue'] = $ernahrungs[$x[0]] . " hinzugefügt";
						}
						$f_array = '';
					}
					else
					{
						if($v['fieldname'] != "pegmore" && $v['fieldname'] != "portmore")
						{
							if($v['fieldvalue'] == 0)
							{
								$arr_flds = array("peg" => "PEG", "port" => "Port", "zvk" => "ZVK", "magensonde" => "Magensonde");
								$history[$k]['fieldvalue'] = $arr_flds[$v['fieldname']] . " entfernt";
							}
							else
							{
								$history[$k]['fieldvalue'] = $arr_flds[$v['fieldname']] . " hinzugefügt";
							}
						}
						else
						{
							if($v['fieldname'] == "pegmore")
							{
								$history[$k]['fieldvalue'] = "PEG Ablauf: " . $v['fieldvalue'];
							}
							elseif($v['fieldname'] == "portmore")
							{
								$history[$k]['fieldvalue'] = "PORT Ablauf: " . $v['fieldvalue'];
							}
						}
					}
				}

				if($v['formid'] == "grow16")
				{
					$history[$k]['fieldvalue'] = $familienstands[$v['fieldvalue']];
					$history[$k]['fieldname'] = $grow_map[$v['formid']];
				}

				if($v['formid'] == "grow1")
				{
					$arr_flds = array("house_of_relatives" => "im Haus der Angehörigen", "alone" => "alleine", "apartment" => "Wohnung", "home" => "Heim", "hospiz" => "Hospiz", "sonstiges" => "Sonstiges");
					if($v['fieldvalue'] == 0)
					{
						$history[$k]['fieldvalue'] = $arr_flds[$v['fieldname']] . " entfernt";
					}
					else
					{
						$history[$k]['fieldvalue'] = $arr_flds[$v['fieldname']] . " hinzugefügt";
					}
				}
				if($v['formid'] == "grow52") 
				{
					if($v['fieldname'] == "germination_cbox" && $v['fieldvalue'] == 0)
					{
						$history[$k]['fieldvalue'] = "Isolationspflichtig entfernt";
					}
					elseif($v['fieldname'] == "germination_cbox")
					{
						$history[$k]['fieldvalue'] = "Isolationspflichtig hinzugefügt";
					}
				}
				
			}

			$out = new Pms_Grid($history, 1, count($history), "patientboxhistory.html");
			$out = $out->renderGrid();
//	    print_r($history);
			echo $out;
			exit;
		}

		/*		 * *************************************************************************************************** */

		public function patienteditAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$hidemagic = Zend_Registry::get('hidemagic');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);

			$this->view->patid = $_GET['id'];

			$isadmin = 0;
			if($logininfo->usertype == 'SA' && $logininfo->showinfo != 'show')
			{
				$isadmin = 1;
			}

			$this->view->isadmin = $isadmin;
			$clientid = $logininfo->clientid;

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$discharge_sql = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->where("ipid='" . $ipid . "'")
				->andWhere("isdelete = 0 ")
				->orderBy("discharge_date DESC")
				->limit(1);
			$discharge_arr = $discharge_sql->fetchArray();

			if(sizeof($discharge_arr) > 0)
			{
				$readmision_dischargedate = $discharge_arr[0]['discharge_date'];
				$maxim_date = date('d.m.Y', strtotime($discharge_arr[0]['discharge_date'])); // if patient it is discharge- admission should not go beyond discharge date
			}
			else
			{
				$readmision_dischargedate = date('Y-m-d H:i:s');
				$maxim_date = date('d.m.Y'); // if patient it is NOT discharge - admission should not go beyond today
			}

			$this->view->disdate = $maxim_date;


			$loc = Doctrine_Query::create()
				->select("*")
				->from('PatientReadmission')
				->where("ipid='" . $ipid . "' and date_type = '2' ")
				->andwhere('date < "' . $readmision_dischargedate . '"')
				->orderBy("date DESC")
				->limit(1);
			$disarr = $loc->fetchArray();

			if($disarr)
			{
				$min_date = date('d.m.Y', strtotime("+1 day",strtotime($disarr[0]['date'])));
// 				$previous_discharge_date = date('Y-m-d H:i:s',strtotime("+1 day",strtotime($disarr[0]['date'])));
				$previous_discharge_date = $disarr[0]['date'];
			}

			$this->view->mindate = $min_date;
			$this->view->previous_discharge_date = $previous_discharge_date;
			
			$isdicharged = PatientDischarge::isDischarged($decid);

			$this->view->isdischarged = 0;
			if($isdicharged)
			{

				$this->view->isdischarged = 1;
			}
			/* ######################################################### */

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patientmaster', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			/*			 * ******************************************************************** */
			$prv = new Pms_Acl_Assertion();
			$prvreturn = $prv->checkPrevilege('AdmissionDate', $logininfo->userid, 'canedit');

			if($prvreturn)
			{
				$this->view->admins = 1;
			}

			/*			 * ******************************************************************** */

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patmclass = "active";
			$this->_helper->layout->setLayout('layout');
			$this->view->salutations = Pms_CommonData::getSalutation();
			$this->view->genders = Pms_CommonData::hideInfo(Pms_CommonData::getGender(), $parr['isadminvisible']);
			$this->view->regions = Pms_CommonData::getRegions();


			$this->view->hours = Pms_CommonData::getHours();
			$this->view->minutes = Pms_CommonData::getMinutes();

			$lc = new Locations();
			$this->view->locationarray = Pms_CommonData::hideInfo($lc->getLocations($clientid, 1), $parr['isadminvisible']);

			$pt = new PatientLocation();
			$this->view->reasons = $pt->getReasons();
			$this->view->hospdocs = $pt->getHospDocs();
			$this->view->transports = $pt->getTransports();
			$locpatid = $pt->getLastLocationDataFromAdmissionUpdate($ipid);
// 			$this->view->real_contact_number = $parr['kontactnumber_dec'];
			$this->view->real_contact_number = $parr['is_contact'];
			$this->view->kontactnumbertype = $parr['kontactnumbertype'];
			
			$locarr = $lc->getLocationbyId($locpatid[0]['location_id']);
			
			if($this->getRequest()->isPost() && $_REQUEST['mode'] != 'vv')
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('Patientmaster', $logininfo->userid, 'canedit');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$patient_form = new Application_Form_PatientMaster();
				$patloc_form = new Application_Form_PatientLocation();
				$patcas_form = new Application_Form_PatientCase();

				$_POST['ipid'] = $ipid;
				if($patient_form->validate($_POST))
				{

					//update admission date
					$adm_date = Doctrine_Query::create()
						->select('*')
						->from('PatientReadmission')
						->where('ipid LIKE "' . $ipid . '"')
						->andWhere('date_type="1"')
						->andWhere('date = \'' . date("Y-m-d H:i:s", strtotime($parr['admission_date'])) . '\'')
						->orderBy('date DESC')
						->limit(1);

					$admdatearr = $adm_date->fetchArray();


					$admin_date = explode(".", $_POST['admission_date']);
					if(strlen($_POST['admission_date']) > 0)
					{
						$admission_date = $admin_date[2] . "-" . $admin_date[1] . "-" . $admin_date[0] . " " . $_POST['adm_timeh'] . ":" . $_POST['adm_timem'];
					}
					if(count($admdatearr) != 0)
					{ //not found then add
						$q = Doctrine_Query::create()
							->update('PatientReadmission')
							->set('date', '"' . date("Y-m-d H:i:s", strtotime($admission_date)) . '"')
							->where("id='" . $admdatearr[0]['id'] . "'");

						$q->execute();
					}
					else
					{
						$patientreadmission = new PatientReadmission();
						$patientreadmission->user_id = $logininfo->userid;
						$patientreadmission->ipid = $ipid;

						$patientreadmission->date = date("Y-m-d H:i:s", strtotime($admission_date));
						$patientreadmission->date_type = 1; //1 =admission-readmission 2- discharge
						$patientreadmission->save();
					}

					$patient_form->UpdateData($_POST);
					
					$a_post = $_POST;
				/*
					if(strlen($a_post['real_contact_number']) > 0)
					{
						if($a_post['phone'] != '')
						{
							$patient_form->UpdateContactNumber($a_post['phone'], '0');
						}
						elseif($a_post['mobile'] != '') {
							$patient_form->UpdateContactNumber($a_post['mobile'], '0');
						}
						else {
							$patient_form->DisableContactNumber();
						}
					}
					elseif($parr['kontactnumbertype'] == '0' && $parr['kontactnumber_dec'] != '')
					{
						$patient_form->DisableContactNumber();
					}
					elseif($parr['kontactnumbertype'] == '1' && $locarr[0]['location_type'] == '5') {
							if($a_post['phone'] != '')
							{
								if($parr['kontactnumber_dec'] != $a_post['phone'])
								{
									$patient_form->UpdateContactNumber($a_post['phone']);
								}
							}
							elseif($a_post['mobile'] != '')
							{
								if($parr['kontactnumber_dec'] != $a_post['mobile'] && $parr['kontactnumber_dec'] != $a_post['phone'])
								{
									$patient_form->UpdateContactNumber($a_post['mobile']);
								}
							}
							else {
								$patient_form->DisableContactNumber();
							}
					}
					*/

					$a_post['ipid'] = $ipid;
					$patloc_form->UpdateData($a_post);

					if($logininfo->usertype == "SA")
					{
						$patcas_form->UpdateData($a_post);
					}
					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				}
				else
				{
					$patient_form->assignErrorMessages();
					$this->retainValues($_POST);
					$this->view->errorclass = "err";
					$this->view->locstat = "";

					if($_POST['locs'] == trim("Krankenhaus"))
					{
						$this->view->locstat = "checkLocationStatus();";
					}
				}
			}

			$pm = new PatientMaster();
			$patientarray = $pm->getMasterData($decid);
			$patientarray[0] = $patientarray;
			if($patientarray)
			{
				$patientarray[0]['admission_date'] = date('d-m-Y H:i:s', strtotime($patientarray[0]['admission_date']));
				$patientarray[0]['birthd'] = Pms_CommonData::hideInfo(date('d-m-Y', strtotime($patientarray[0]['birthd'])), $patientarray[0]['isadminvisible']);

				$this->view->sex = $patientarray[0]['sex'];
				$this->view->nation = $patientarray[0]['nation'];
				if($patientarray[0])
				{
					$this->retainValues($patientarray[0]);
				}
				$this->view->hidd_referred_by = $patientarray[0]['referred_by'];
				$this->view->hidd_docid = $patientarray[0]['familydoc_id'];
				$this->view->kontactnumber = $patientarray[0]['kontactnumber'];

				/*				 * ******************************************************* */
				if(strlen($_POST['adm_timeh']) < 1 || strlen($_POST['adm_timem']) < 1)
				{
					$hrtms = explode(" ", $patientarray[0]['admission_date']);

					$hrtm1 = explode(":", $hrtms[1]);
					$this->view->adm_timeh = $hrtm1[0];
					$this->view->adm_timem = $hrtm1[1];
				}
				else
				{
					$this->view->rec_timeh = $_POST['adm_timeh'];
					$this->view->rec_timem = $_POST['adm_timem'];
				}

				/*				 * ********************************************************** */
				$referred = Doctrine::getTable('PatientReferredBy')->find($patientarray[0]['referred_by']);

				if($referred)
				{
					$refarray = $referred->toArray();

					$this->view->referred_by = $referred['id'];
				}
				/*				 * ********************************************************** */

				/*				 * ******************************************************** */
				$pl = new PatientLocation();
				$patlocarray = $pl->getLastLocation($decid);

				if(count($patlocarray) > 0)
				{
					$drop = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->where("id='" . $patlocarray[0]['location_id'] . "'")
						->orderBy('location ASC');

					$loc = $drop->execute();
					if($loc)
					{
						$loca = $loc->toArray();

						$this->view->location_id = $loca[0]['id'];
						$this->view->hidd_location_id = $patlocarray[0]['location_id'];
						$this->view->reason = $patlocarray[0]['reason'];
						$this->view->hospdoc = $patlocarray[0]['hospdoc'];
						$this->view->transport = $patlocarray[0]['transport'];
						$this->view->locstat = "checkLocationStatus();";
					}
				}
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$pinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->patientinfo = $pinfo;

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ***************************************** */

			//ISPC-2612 Ancuta 27.06.2020
			$client_is_follower_ref = ConnectionMasterTable::_check_client_connection_follower('PatientReferredBy',$logininfo->clientid);
			
			
			$drop = Doctrine_Query::create()
				->select('*')
				->from('PatientReferredBy')
				->where("clientid =" . $logininfo->clientid)
				->andWhere("isdelete=0");
				if($client_is_follower_ref){ //ISPC-2612 Ancuta 27.06.2020
				    $drop->andWhere('connection_id is NOT null');
				    $drop->andWhere('master_id is NOT null');
				}
				$drop->orderBy('referred_name ASC');

			$dropexec = $drop->execute();
			$referedby = array("" => "");
			foreach($dropexec->toArray() as $key => $val)
			{
				$referedby[$val['id']] = $val['referred_name'];
			}
			/*			 * *******  check if module BMI and height details module 132 ************ */
			$modules = new Modules();
			if($modules->checkModulePrivileges("132", $logininfo->clientid))
			{
				$this->view->show_height_detail = "1";
			}
			else
			{
				$this->view->show_height_detail = "0";
			}
			// ispc-1920
			$this->view->show_height_detail = "0";
			 
			
			$this->view->referredbyarray = Pms_CommonData::hideInfo($referedby, $patientarray[0]['isadminvisible']);
			
			//ISPC-2045
// 			$this->view->real_contact_number = 0;
// 			$patientMasterData = $patientmaster->get_patientMasterData();
// 			foreach ($patientMasterData['PatientContactphone'] as $PatientContactphone) {
// 				if ($PatientContactphone['parent_table'] == 'PatientMaster' && $PatientContactphone['table_id'] ==  $patientMasterData['id']) {
// 					$this->view->real_contact_number = 1;
// 					break;
// 				}
// 			}
		}

		public function contacteditAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Contact', $logininfo->userid, 'canedit');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($_GET['id'], 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ***************************************** */

			$this->view->act = "patient/contactedit?id=" . $_GET['id'];
			$this->_helper->layout->setLayout('layout');

			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);

			$this->view->salutations = Pms_CommonData::getSalutation();
			$this->view->genders = Pms_CommonData::getGender();
			$this->view->regions = Pms_CommonData::getRegions();

			if($this->getRequest()->isPost())
			{
				$contact_form = new Application_Form_ContactPersonMaster();
				$this->cntval = $contact_form->validate($_POST);

				if($this->cntval)
				{
					if($_GET['cid'] > 0)
					{
						$contact_form->UpdateData($_POST);
					}
					else
					{
						$contact_form->InsertData($_POST);
					}
				}
				else
				{
					$contact_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			$contact = Doctrine::getTable('ContactPersonMaster')->find($_GET['cid']);

			if($contact)
			{
				$contactarray = $contact->toArray();
				$contactarray['cnt_birthd'] = date('d-m-Y', strtotime($contactarray['cnt_birthd']));
				$this->retainValues($contactarray);
			}
		}

		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function patienthealtheditAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ######################################################### */

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('HealthInsurance', $logininfo->userid, 'canedit');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$this->view->healthclass = "active";

			$this->view->act = "patient/patienthealthedit?id=" . $_GET['id'];
			$this->_helper->layout->setLayout('layout');
			$this->view->regions = Pms_CommonData::getRegions();


			$modules = new Modules();
			if($modules->checkModulePrivileges("90", $logininfo->clientid))
			{
				$this->view->show_debtor_number = "1";
			}
			else
			{
				$this->view->show_debtor_number = "0";
			}


			$ppun = new PpunIpid();
			$client_modules = $modules->get_client_modules();
			$this->view->client_modules = $client_modules;
 
			
			/* ---------------------------------------------------------------------------------------------- */
			/* ------------------------------------- Get health insurance TABS ------------------------------ */
			/* ---------------------------------------------------------------------------------------------- */
			$symperm = new HealthInsurancePermissions();
			$divisions = $symperm->getClientHealthInsurancePermissions($logininfo->clientid);
			$this->view->divisions = $divisions;

			/* -------------------------------- CHECK health insurance PERMISSIONS--------------------------- */
			if($divisions)
			{
				$subdivizions_permissions = 1;
			}
			else
			{
				$subdivizions_permissions = 0;
			}

			$st = new KbvKeytabs();
			$this->view->status_array = $st->getKbvKeytabs(1);

			/* -------------------------------- CHECK If patient has PPUN --------------------------- */
			if( (isset($client_modules['88']) && $client_modules['88'] =="1") )
			{
			    //get ppun (private patient unique number)
			    $ppun_number = $ppun->check_patient_ppun_db($ipid, $logininfo->clientid); // Just fill
			}
			
			/* ------------------------------- -SAVE / EDIT OPTIONS ------------------------------------------- */
			if($this->getRequest()->isPost())
			{
				$_POST['subdivizions_permissions'] = $subdivizions_permissions;
                

				$patient_insurance_form = new Application_Form_PatientHealthInsurance();
				$this->insurance = $patient_insurance_form->validate($_POST);

				if($this->insurance)
				{
					/* ------------------------------- ADD NEW HEATH INSURANCE (NOT FROM LIST) --------------------------- */
					if(empty($_POST['hdn_companyid']))
					{
						$post = $_POST;
						$hinsu = new HealthInsurance();
						$hinsu->clientid = $logininfo->clientid; //logininfo
						$hinsu->name = $post['company_name'];
						$hinsu->kvnumber = $post['kvk_no'];
						$hinsu->iknumber = $post['institutskennzeichen'];
						$hinsu->street1 = $post['ins_street'];
						$hinsu->city = $post['ins_city'];
						$hinsu->phone = $post['ins_phone'];
						$hinsu->phone2 = $post['ins_phone2'];
						$hinsu->phonefax = $post['ins_phonefax'];
						$hinsu->post_office_box = $post['ins_post_office_box'];
						$hinsu->zip_mailbox = $post['ins_zip_mailbox'];
						$hinsu->post_office_box_location = $post['ins_post_office_box_location'];
						$hinsu->email = $post['ins_email'];
						$hinsu->zip = $post['ins_zip'];
						$hinsu->debtor_number = $post['debtor_number'];
						$hinsu->comments = $post['comment'];
						$hinsu->valid_from = date("Y-m-d", time());
						$hinsu->extra = 1;
						$hinsu->save();
						$lastId = $hinsu->id;

						$_POST['hdn_companyid'] = $lastId;
					}
					
					
					if($_POST['insurance_options'] != 'privatepatient')
					{
						$_POST['valid'] = "0";
						$_POST['privatecontribution'] = "";
					}
					
					$patient_insurance_form->UpdateData($_POST);
					
					// *******************************//
					// insert ppun OR update 
					$ppun_post['ipid'] = $ipid;
					$ppun_post['clientid'] = $logininfo->clientid; //logininfo;
					$ppun_post['ppun'] = $_POST['ppun'];
					
					$ppun_form = new Application_Form_PpunIpid();
    				$insert_ppun = $ppun_form->update_or_insert_ppun($ppun_post);
					// *******************************//
					
					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				}
				else
				{
					$patient_insurance_form->assignErrorMessages();
					if($_POST['insurance_options'] == 'privatepatient') {
					    $_POST['privatepatient'] = "1";
					} elseif($_POST['insurance_options'] == 'direct_billing') {
					    $_POST['direct_billing'] = "1";
					} elseif($_POST['insurance_options'] == 'bg_patient') {
					    $_POST['bg_patient'] = "1";
					}
					
					$this->retainValues($_POST);
					
				}
			}



			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);
			

			if($phi)
			{
				/* -------------------------GET HEALTH INSURANCE DETAILS------------------------------- */
				if(empty($phi[0]['institutskennzeichen']) || $phi[0]['institutskennzeichen'] == 0)
				{
					if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
					{
						$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
						$healtharray = $helathins->toArray();
						$institutskennzeichen = $healtharray['iknumber'];
						$phi[0]['institutskennzeichen'] = $institutskennzeichen;
					}
				}


				if(empty($phi[0]['ins_debtor_number']) || strlen($phi[0]['ins_debtor_number']) == 0)
				{
					if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
					{
						$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
						$healtharray = $helathins->toArray();
						$debtor_number = $healtharray['debtor_number'];
						$phi[0]['ins_debtor_number'] = $debtor_number;
					}
				}


				if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($phi[0]['ins_street']))
					{
						$phi[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($phi[0]['ins_city']))
					{
						$phi[0]['ins_city'] = $healtharray['city'];
					}
					if(empty($phi[0]['ins_zip']))
					{
						$phi[0]['ins_zip'] = $healtharray['zip'];
					}
				}

				/* --------------------------GET SUBDIVIZIONS DETAILS------------------------------- */
				if($subdivizions_permissions == '1')
				{

					$hi2s = Doctrine_Query::create()
						->select("*,
				AES_DECRYPT(ins2s_name,'" . Zend_Registry::get('salt') . "') as name,
				AES_DECRYPT(ins2s_insurance_provider,'" . Zend_Registry::get('salt') . "') as insurance_provider,
				AES_DECRYPT(ins2s_contact_person,'" . Zend_Registry::get('salt') . "') as contact_person,
				AES_DECRYPT(ins2s_street1,'" . Zend_Registry::get('salt') . "') as street1,
				AES_DECRYPT(ins2s_street2,'" . Zend_Registry::get('salt') . "') as street2,
				AES_DECRYPT(ins2s_zip,'" . Zend_Registry::get('salt') . "') as zip,
				AES_DECRYPT(ins2s_city,'" . Zend_Registry::get('salt') . "') as city,
				AES_DECRYPT(ins2s_phone,'" . Zend_Registry::get('salt') . "') as phone,
				AES_DECRYPT(ins2s_phone2,'" . Zend_Registry::get('salt') . "') as phone2,
				AES_DECRYPT(ins2s_post_office_box,'" . Zend_Registry::get('salt') . "') as post_office_box,
				AES_DECRYPT(ins2s_post_office_box_location,'" . Zend_Registry::get('salt') . "') as post_office_box_location,
				AES_DECRYPT(ins2s_zip_mailbox,'" . Zend_Registry::get('salt') . "') as zip_mailbox,
				AES_DECRYPT(ins2s_email,'" . Zend_Registry::get('salt') . "') as email,
				AES_DECRYPT(comments,'" . Zend_Registry::get('salt') . "') as comments,
				AES_DECRYPT(ins2s_fax,'" . Zend_Registry::get('salt') . "') as fax,
				AES_DECRYPT(ins2s_iknumber,'" . Zend_Registry::get('salt') . "') as iknumber,
				AES_DECRYPT(ins2s_ikbilling,'" . Zend_Registry::get('salt') . "') as ikbilling,
				AES_DECRYPT(ins2s_debtor_number,'" . Zend_Registry::get('salt') . "') as debtor_number,
				AES_DECRYPT(ins2s_kvnumber,'" . Zend_Registry::get('salt') . "') as kvnumber ")
						->from("PatientHealthInsurance2Subdivisions")
						->where("ipid = '" .$ipid . "' ")
						->andWhere("company_id = " . $phi[0]['companyid'] . " ");
					$hi2s_arr = $hi2s->fetchArray();

					foreach($hi2s_arr as $skey => $subdiv_details)
					{
						$subdivizion_details[$subdiv_details['subdiv_id']] = $subdiv_details;
					}

					$this->view->subdivizion_details = $subdivizion_details;
				}
				else
				{

					$this->view->subdivizion_details = "";
					
				}

				if($phi[0]['privatepatient'] == '1' && $phi[0]['direct_billing'] == '1')
				{
					$phi[0]['direct_billing'] = '0';
				}
				
				if( (isset($client_modules['88']) && $client_modules['88'] =="1")   && $phi[0]['privatepatient'] == '1' && $ppun_number)
				{
                    $phi[0]['ppun'] =  $ppun_number['ppun'];
				}
				
				
				$this->retainValues($phi[0]);
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/*			 * ****************************************** */
		}

		public function locationeditAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientlocation', $logininfo->userid, 'canedit');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$this->view->locclass = "active";

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($_GET['id'], 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/*			 * ****************************************** */
			$this->view->act = "patient/locationedit?id=" . $_GET['id'];
			$this->_helper->layout->setLayout('layout');

			if($this->getRequest()->isPost())
			{
				$patient_form = new Application_Form_PatientLocation();
				$this->cntval = $patient_form->validate($_POST);

				if($this->cntval)
				{
					$patient_form->InsertData($_POST);
				}
				else
				{
					$patient_form->assignErrorMessages();

					$this->retainValues($_POST);
				}
			}

			$epid = Pms_CommonData::getEpidFromId($_GET['id']);
			$patient = Doctrine::getTable('PatientLocation')->findBy('epid', $epid);

			if($patient)
			{
				$locationarray = $patient->toArray();
				$locationarray['valid_from'] = date('d-m-Y', strtotime($locationarray['valid_from']));
				$locationarray['valid_till'] = date('d-m-Y', strtotime($locationarray['valid_till']));
				if(count($locationarray[0]) > 0)
				{
					$this->retainValues($locationarray[0]);
				}
			}
		}

		public function patientlocationaddAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userid = $logininfo->userid;
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			/* ######################################################### */
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientlocation ', $logininfo->userid, 'canedit');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */
			$clientid = $logininfo->clientid;

			$module_previleges = new Modules();
			$this->view->client_modules = $module_previleges->get_client_modules();
			
			$lc = new Locations();
			//ISPC-2612 Ancuta 27.06.2020 Locx
			$client_is_follower = ConnectionMasterTable::_check_client_connection_follower('Locations',$clientid);
			if($client_is_follower){
    			$locationsarray = $lc->getLocations($clientid, 1, true);
			} else{
    			$locationsarray = $lc->getLocations($clientid, 1);
			}
			//--
			//check if client has location with type contactperson : type= 6
			$locType = $lc->checkLocationsClientByType($clientid, 6);
			if($locType)
			{
				$pc = new ContactPersonMaster();
				$pcs = $pc->getPatientContact($ipid, false);
				if($pcs)
				{
					$z = 1;
					$cnt_number = 1; // display contact number
					foreach($pcs as $value)
					{
						if($value['isdelete'] == '0')
						{
							$locationsarray['8888' . $z] = 'bei Kontaktperson ' . $cnt_number . '(' . $value['cnt_last_name'] . ' ' . $value['cnt_first_name'] . ')';
							$cnt_number++;
						}
						$z++;
					}
				}
			}
			
			
			//-------------------------------------------------

			$lbprevileges = new Modules();
			if($lbprevileges->checkModulePrivileges("65", $clientid))
			{
				$this->view->lb_visits_deactivate = 1;
			}
			else
			{
				$this->view->lb_visits_deactivate = 0;
			}

			/*			 * ********* Hospiz / Hospizvereins BOX ************** */
			/* get already assigned users */
			$ass_usr = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('epid="' . $epid . '"');
			$usignuserarr = $ass_usr->fetchArray();
			foreach($usignuserarr as $value)
			{
				$assignedusers[] = $value['userid'];
			}
			$this->view->assignedusers = $assignedusers;

			/* get group permisions */
			$patgroup = Doctrine_Query::create()
				->select('*')
				->from('PatientGroups')
				->where('ipid ="' . $ipid . '"  and isdelete="0"')
				->orderBy('id ASC');
			$patgrouparray = $patgroup->fetchArray();


			foreach($patgrouparray as $value)
			{
				$assignedgroups[] = $value['groupid'];
			}
			$this->view->assignedgroups = $assignedgroups;

			/* get patient ishospiz/ ishospizverein details */
			$patientmasterdet = new PatientMaster();
			$patientdetails = $patientmasterdet->getMasterData($decid, 0);

			$this->view->ishospiz = $patientdetails['ishospiz'];
			$this->view->ishospizverein = $patientdetails['ishospizverein'];


			$usergroup = new Usergroup();

			// HOSPIZ USERS
			$hospizgroup = array("7");
			$hospizusers = $usergroup->getUserGroups($hospizgroup);

			$this->view->hospizgroup_id = $hospizgroup[0];

			if(count($hospizusers) > 0)
			{
				foreach($hospizusers as $hsgroup)
				{
					$hsgroupsarray[] = $hsgroup['id'];
				}
			}

			$hsusr = new User();
			$usersHospizArray = $hsusr->getuserbyGroupId($hsgroupsarray, $clientid);

			$allhsusers = 0;
			$asshsusers = 0;
			$allhospizusers = '';
			$hospiz_users = array();
			$allhospizusersArray[] = "99999999";
			foreach($usersHospizArray as $huser)
			{
				$hospiz_users[$huser['id']]['uid'] = $huser['id'];
				$hospiz_users[$huser['id']]['name'] = $huser['last_name'] . ", " . $huser['first_name'];
				$allhospizusers .= '"' . $huser['id'] . '",';
				$allhospizusersArray[] = $huser['id'];
				if(in_array($huser['id'], $assignedusers))
				{
					$allhsusers++;
					$asshsusers++;
				}
				else
				{
					$allhsusers--;
				}
			}

			$nrofhs_users = count($hospsiz_users);
			if($allhsusers == $nrofhs_users)
			{
				$hallgroup = 1;
			}
			else
			{
				$hallgroup = 0;
			}

			$this->view->hospiz_group = $hallgroup;
			$this->view->hospiz_assusers = $asshsusers;
			$this->view->hospiz_users = $hospiz_users;
			$this->view->hospiz_users_nr = count($hospiz_users);

			// HOSPIZVEREIN USERS
			$hospizvereingroup = array("10");
			$hospizvereinusers = $usergroup->getUserGroups($hospizvereingroup);

			$this->view->hospizvereingroup_id = $hospizvereingroup[0];

			if(count($hospizvereinusers) > 0)
			{
				foreach($hospizvereinusers as $hvgroup)
				{
					$hvgroupsarray[] = $hvgroup['id'];
				}
			}
			$hvusr = new User();
			$usersHospizvereinArray = $hvusr->getuserbyGroupId($hvgroupsarray, $clientid);

			$allhvusers = 0;
			$asshvusers = 0;
			$allhospizvereinusers = '';
			$hospizverein_users = array();
			$allhospizvereinusersArray[] = "99999999";
			foreach($usersHospizvereinArray as $hvuser)
			{
				$hospizverein_users[$hvuser['id']]['uid'] = $hvuser['id'];
				$hospizverein_users[$hvuser['id']]['name'] = $hvuser['last_name'] . ", " . $hvuser['first_name'];
				$allhospizvereinusers .= '"' . $hvuser['id'] . '",';
				$allhospizvereinusersArray[] = $hvuser['id'];
				if(in_array($hvuser['id'], $assignedusers))
				{
					$allhvusers++;
					$asshvusers++;
				}
				else
				{
					$allhvusers--;
				}
			}

			$nrofhv_users = count($hospizverein_users);
			if($allhvusers == $nrofhv_users)
			{
				$hvallgroup = 1;
			}
			else
			{
				$hvallgroup = 0;
			}

			$this->view->hospizverein_group = $hvallgroup;
			$this->view->hospizverein_assusers = $asshvusers;
			$this->view->hospizverein_users = $hospizverein_users;
			$this->view->hospizverein_users_nr = count($hospizverein_users);

			/*			 * ********* END Hospiz / Hospizvereins ************** */
			$this->view->locationarray = $locationsarray;
			$this->view->after = $_GET['after'];

// 			$patientmaster = new PatientMaster();
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmasterdet->get_patientMasterData();
			$this->view->real_contact_number = $parr['kontactnumber'];

			if($this->getRequest()->isPost())
			{
				$a_post = $_POST;
				$a_post['ipid'] = $ipid;
				
				//ISPC-1547 Lore 13.08.2019
				$ltyp = new Locations();
				$loctype = $ltyp->getLocationbyId($_POST['location_id']);
				$locationtype = $loctype[0]['location_type'];
				if($locationtype == '1'){	    
				    $inout = '';
				    $messages = new Messages();
				    $notification_change_location = $messages->change_location_notification($ipid, $userid, $inout, "patientlocationadd");
				}
				//--
				
				$locations_form = new Application_Form_PatientLocation();
				if($locations_form->newvalidate($a_post))
				{
					$pm_form = new Application_Form_PatientMaster();

					if(strlen($a_post['real_contact_number']) > 0)
					{

						$locatie = new Locations();
						if($parr['kontactnumbertype_dec'] == "1")
						{
							$pm_form->UpdateContactNumber(end($a_post['phone1']), "1");
						}
						else if(empty($parr['kontactnumber_dec']))
						{
							$pm_form->UpdateContactNumber(end($a_post['phone1']), "1");
						}
					}

					$locations_form->InsertData($a_post);
					$this->view->error_message = $this->view->translate("recordinsertsucessfully");
					$this->_redirect(APP_BASE . "patient/patientlocationlistedit?id=" . $_GET['id']);
				}
				else
				{
					$this->view->errors = $locations_form->getErrorMessages();
					$this->retainValues($_POST);
				}
				
			}

			$pl = new PatientLocation();
			$patlocarray = $pl->getLocationById($_GET['after']);

			if(count($patlocarray) > 0)
			{

				$locs = new Locations();
				$loca = $locs->getLocationbyId($patlocarray[0]['location_id']);
				if($loca)
				{
					$this->view->reason = $patlocarray[0]['reason'];
					$this->view->hospdoc = $patlocarray[0]['hospdoc'];
					$this->view->transport = $patlocarray[0]['transport'];
					$this->view->locstat = "checkLocationStatus();";
				}

				if($patlocarray[0]['valid_from'] != '0000-00-00')
				{
					$this->view->prevvalid_from = date('d.m.Y', strtotime($patlocarray[0]['valid_from']));
				}
				if($patlocarray[0]['valid_till'] != '0000-00-00')
				{
					$this->view->prevvalid_till = date('d.m.Y', strtotime($patlocarray[0]['valid_till']));
				}
			}

			$pt = new PatientLocation();
			$ptrr = $pt->getNextLocation($patlocarray[0]['valid_from'], $ipid);
			$this->view->reasonsarray = $pt->getReasons();
			$this->view->hospdocsarray = $pt->getHospDocs();
			$this->view->transportsarray = $pt->getTransports();

			if(count($ptrr) > 0)
			{
				if($ptrr[0]['valid_till'] != '0000-00-00')
				{
					$this->view->nextvalid_from = date('d.m.Y', strtotime($ptrr[0]['valid_from']));
				}
				if($ptrr[0]['valid_till'] != '0000-00-00')
				{
					$this->view->nextvalid_till = date('d.m.Y', strtotime($ptrr[0]['valid_till']));
				}
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function patientlocationeditAction()
		{
			$this->_helper->viewRenderer('patientlocationadd');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->view->pid = $_GET['id'];

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */
			$clientid = $logininfo->clientid;


			$module_previleges = new Modules();
			$this->view->client_modules = $module_previleges->get_client_modules();
				
			
			$lc = new Locations();
			$locationsarray = $lc->getLocations($clientid, 1);
			$this->view->locationarray = $locationsarray;


			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->real_contact_number = $parr['kontactnumber'];

			if($this->getRequest()->isPost())
			{
				$locations_form = new Application_Form_PatientLocation();
				if($locations_form->newvalidate($_POST))
				{
					$a_post = $_POST;
					$a_post['lid'] = $_GET['edid'];


					$pm_form = new Application_Form_PatientMaster();
					if(strlen($a_post['real_contact_number']) > 0)
					{
						$pm_form->UpdateContactNumber($a_post['phone1'], '1');
					}
					elseif($parr['kontactnumber'] == $a_post['phone1'] && $parr['kontactnumbertype'] == '1')
					{
						$pm_form->DisableContactNumber();
					}
					$locations_form->EditLocation($a_post);

					$this->view->error_message = $this->view->translate("recordinsertsucessfully");
					$this->_redirect(APP_BASE . "patient/patientlocation?id=" . $_GET['id']);
				}
				else
				{
					$locations_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			$pl = new PatientLocation();
			$patlocarray = $pl->getLocationById($_GET['edid']);

			if(count($patlocarray) > 0)
			{

				$locs = new Locations();
				$loca = $locs->getLocationbyId($patlocarray[0]['location_id']);
				if($loca)
				{

					$this->view->location_id = $loca[0]['id'];
					$this->view->hidd_location_id = $patlocarray[0]['location_id'];
					$this->view->reason = $patlocarray[0]['reason'];
					$this->view->hospdoc = $patlocarray[0]['hospdoc'];
					$this->view->transport = $patlocarray[0]['transport'];
					$this->view->locstat = "checkLocationStatus();";
				}

				if($patlocarray[0]['valid_from'] != '0000-00-00')
				{
					$this->view->valid_from = date('d.m.Y', strtotime($patlocarray[0]['valid_from']));
				}

				if($patlocarray[0]['valid_till'] != '0000-00-00')
				{
					$this->view->valid_till = date('d.m.Y', strtotime($patlocarray[0]['valid_till']));
				}
			}
		}

		public function patientlocationlisteditAction()
		{
		    if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "patientnew/patientdetails") !== false) {
		        //ISPC-2173
		        $_SESSION['__referrer' . __FUNCTION__] = 'patientnew/patientdetails';
		    }
		    
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
// 			$ipid = Pms_CommonData::getIpId($decid);


			$module_previleges = new Modules();
			$this->view->client_modules = $module_previleges->get_client_modules();
				
			
			/* ******** Patient header Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			
			$patarray = $patientmaster->get_patientMasterData();
			$ipid = $patarray['ipid'];
			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			
			if($this->getRequest()->isPost())
			{
				$a_post = $_POST;
				$a_post['ipid'] = $ipid;
				$a_post['kontactnumbertype'] = $patarray['kontactnumbertype'];
			
				$locations_form = new Application_Form_PatientLocation();
				if($locations_form->newvalidate($a_post))
				{
					//very slow .. rewriten optimizend and replaced
					//				$loc = $locations_form->InserLocationBetween($a_post);
					//added remove locations on submit START
					$removed_locations = explode(',', $_POST['removed_locations']);
			
					if(count($removed_locations) > '0')
					{
						$locations_form->remove_locations($removed_locations);
					}
					//added remove locations on submit END
					$loc = $locations_form->insert_location_between($a_post);
			
/* 					//ISPC-1547 Lore 13.08.2019
					$curent_loca = end($a_post['location_type']);
					$prev_loca = prev($a_post['location_type']);
					$curent_loca = end($a_post['location_type']);
					if($curent_loca == '1'){
					    $inout = '';
					    $messages = new Messages();
					    $notification_change_location = $messages->change_location_notification($ipid, $userid, $inout, 'patientlocationlistedit');
					} elseif ($prev_loca =='1') {
					    $inout = 'hospital_discharge';
					    $messages = new Messages();
					    $notification_change_location = $messages->change_location_notification($ipid, $userid, $inout, 'patientlocationlistedit');
					}
					//-- */
					//TODO-3695 Lore 19.01.2021
					$prev_loca = 0;
					$curent_loca = end($a_post['location_type']);
					if(count($a_post['location_type'])>0){
					    $prev_loca = prev($a_post['location_type']);
					    $curent_loca = end($a_post['location_type']);
					}
					//current location = hospital + newadded + last location not hospital
					if($curent_loca == '1' && end($a_post['newr']) == '1' && $prev_loca != '1'){ 
					    $inout = '';
					    $messages = new Messages();
					    $notification_change_location = $messages->change_location_notification($ipid, $userid, $inout, 'patientlocationlistedit');
					}
					//current location != hospital + newadded + last location = hospital
					if($curent_loca != '1' && end($a_post['newr']) == '1' && $prev_loca == '1'){
					    $inout = 'hospital_discharge';
					    $messages = new Messages();
					    $notification_change_location = $messages->change_location_notification($ipid, $userid, $inout, 'patientlocationlistedit');
					}
					//.
					
					$errors = array($this->view->translate("recordinsertsucessfully"));
						
					$this->retainValues($_POST);
						
					if($_POST['fromDelete'] == 1)
					{
						  $this->_redirect(APP_BASE . "patient/patientlocationlistedit?id=" . $_REQUEST['id']);
					}
					else
					{

					    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_REQUEST['id'] , array("exit"=>true));
					    exit; //for readability
					    
					   /*  if (isset($_SESSION['__referrer' . __FUNCTION__]) && $_SESSION['__referrer' . __FUNCTION__] == 'patientnew/patientdetails' ) {
					        //ISPC-2173
					        unset($_SESSION['__referrer' . __FUNCTION__]);
					        $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_REQUEST['id'] , array("exit"=>true));
					        exit; //for readability
					    } else {
					        $this->_redirect(APP_BASE . "patient/patientdetails?id=" . $_REQUEST['id']);
					    } */
					}
				}
				else
				{
					$this->view->errors = $locations_form->getErrorMessages();
					$this->retainValues($_POST);
				}
			}
			
			
			
			
			
			/* ######################################################### */
// 			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

// 			if(!$isclient)
// 			{
// 				// $this->_redirect(APP_BASE."overview/overview");
// 			}

// 			$previleges = new Pms_Acl_Assertion();
// 			$return = $previleges->checkPrevilege('patientlocation ', $logininfo->userid, 'canedit');

// 			if(!$return)
// 			{
// 				$this->_redirect(APP_BASE . "error/previlege");
// 			}
			/* ######################################################### */

			$lbprevileges = new Modules();
			if($lbprevileges->checkModulePrivileges("65", $clientid))
			{
				$this->view->lb_visits_deactivate = 1;
			}
			else
			{
				$this->view->lb_visits_deactivate = 0;
			}

// 			$previleges = new Pms_Acl_Assertion();
// 			$return = $previleges->checkPrevilege('patientlocation', $logininfo->userid, 'canview');

// 			if(!$return)
// 			{
// 				$this->_redirect(APP_BASE . "error/previlege");
// 			}

// 			$decid = Pms_Uuid::decrypt($_GET['id']);
// 			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->pid = $_GET['id'];

			$pt = new PatientLocation();
			$this->view->reasons = $pt->getReasons();
			$this->view->hospdocs = $pt->getHospDocs();
			$this->view->transports = $pt->getTransports();

			$locationactive = $pt->getActiveLocationPatInfo($ipid);
			// get the type of the activ location // needed for hospiz status
			$this->view->currenttype = $locationactive[0]['location_type'];
			$this->view->real_contact_number = $patarray['kontactnumber'];
			$this->view->ishospiz = $patarray['ishospiz'];
			$this->view->ishospizverein = $patarray['ishospizverein'];

			$ass_usr = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('epid="' . $epid . '"');
			$usignuserarr = $ass_usr->fetchArray();

			foreach($usignuserarr as $value)
			{
				$assignedusers[] = $value['userid'];
			}
			$this->view->assignedusers = $assignedusers;

			/* get group permisions */
			$patgroup = Doctrine_Query::create()
				->select('*')
				->from('PatientGroups')
				->where('ipid ="' . $ipid . '"  and isdelete="0"')
				->orderBy('id ASC');
			$patgrouparray = $patgroup->fetchArray();

			foreach($patgrouparray as $value)
			{
				$assignedgroups[] = $value['groupid'];
			}
			$this->view->assignedgroups = $assignedgroups;

			/* get patient ishospiz/ ishospizverein details */
			$this->view->ishospiz = $patarray['ishospiz'];
			$this->view->ishospizverein = $patarray['ishospizverein'];


			$usergroup = new Usergroup();

			// HOSPIZ USERS
			$hospizgroup = array("7");
			$hospizusers = $usergroup->getUserGroups($hospizgroup);

			$this->view->hospizgroup_id = $hospizgroup[0];


			if(count($hospizusers) > 0)
			{
				foreach($hospizusers as $hsgroup)
				{
					$hsgroupsarray[] = $hsgroup['id'];
				}
			}

			$hsusr = new User();
			$usersHospizArray = $hsusr->getuserbyGroupId($hsgroupsarray, $clientid);

			$allhsusers = 0;
			$asshsusers = 0;
			$allhospizusers = '';
			$allhospizusersArray[] = "99999999";
			$hospiz_users = array();
			foreach($usersHospizArray as $huser)
			{
				$hospiz_users[$huser['id']]['uid'] = $huser['id'];
				$hospiz_users[$huser['id']]['name'] = $huser['last_name'] . ", " . $huser['first_name'];
				$allhospizusers .= '"' . $huser['id'] . '",';
				$allhospizusersArray[] = $huser['id'];
				if(in_array($huser['id'], $assignedusers))
				{
					$allhsusers++;
					$asshsusers++;
				}
				else
				{
					$allhsusers--;
				}
			}

			$nrofhs_users = count($hospiz_users);
			if($allhsusers == $nrofhs_users)
			{
				$hallgroup = 1;
			}
			else
			{
				$hallgroup = 0;
			}

			$this->view->hospiz_group = $hallgroup;
			$this->view->hospiz_assusers = $asshsusers;
			$this->view->hospiz_users = $hospiz_users;
			$this->view->hospiz_users_nr = count($hospiz_users);

			// HOSPIZVEREIN USERS
			$hospizvereingroup = array("10");
			$hospizvereinusers = $usergroup->getUserGroups($hospizvereingroup);

			$this->view->hospizvereingroup_id = $hospizvereingroup[0];

			if(count($hospizvereinusers) > 0)
			{
				foreach($hospizvereinusers as $hvgroup)
				{
					$hvgroupsarray[] = $hvgroup['id'];
				}
			}
			$hvusr = new User();
			$usersHospizvereinArray = $hvusr->getuserbyGroupId($hvgroupsarray, $clientid);

			$allhvusers = 0;
			$asshvusers = 0;
			$allhospizvereinusers = '';
			$allhospizvereinusersArray[] = "999999999";
			$hospizverein_users = array();
			foreach($usersHospizvereinArray as $hvuser)
			{
				$hospizverein_users[$hvuser['id']]['uid'] = $hvuser['id'];
				$hospizverein_users[$hvuser['id']]['name'] = $hvuser['last_name'] . ", " . $hvuser['first_name'];
				$allhospizvereinusers .= '"' . $hvuser['id'] . '",';
				$allhospizvereinusersArray[] = $hvuser['id'];
				if(in_array($hvuser['id'], $assignedusers))
				{
					$allhvusers++;
					$asshvusers++;
				}
				else
				{
					$allhvusers--;
				}
			}

			$nrofhv_users = count($hospizverein_users);
			if($allhvusers == $nrofhv_users)
			{
				$hvallgroup = 1;
			}
			else
			{
				$hvallgroup = 0;
			}

			$this->view->hospizverein_group = $hvallgroup;
			$this->view->hospizverein_assusers = $asshvusers;
			$this->view->hospizverein_users = $hospizverein_users;
			$this->view->hospizverein_users_nr = count($hospizverein_users);


			/*			 * ********* END Hospiz / Hospizvereins ************** */
			

			if(is_array($_POST['valid_from']))
			{
				foreach($_POST['valid_from'] as $key => $val)
				{
					$locrray[$key]['valid_from'] = $_POST['valid_from'][$key];
					$locrray[$key]['valid_till'] = $_POST['valid_till'][$key];
					$locrray[$key]['id'] = $_POST['lid'][$key];
					$locrray[$key]['previd'] = $_POST['previd'][$key];
					$locrray[$key]['location_id'] = $_POST['location_id'][$key];
					$locrray[$key]['newr'] = $_POST['newr'][$key];
				}
			}
			else
			{
				$loca = new PatientLocation();
				$locrray = $loca->getPatientLocations($ipid, true);
				$this->view->prevarr = $locrray;
			}

			$patient_locations_ids[] = '99999999';
			foreach($locrray as $hk => $location)
			{
				$patient_locations_ids[] = $location['location_id'];
			}

			$lc = new Locations();

			//ISPC-2612 Ancuta 27.06.2020 Locx
            $client_is_follower = ConnectionMasterTable::_check_client_connection_follower('Locations', $clientid);
    
            if ($client_is_follower) {
                $locationsarray = $lc->getLocations($clientid, 1, true);
            } else {
                $locationsarray = $lc->getLocations($clientid, 1);
            }
            
            
            $parrent_locations_ids = array_keys($locationsarray);
            $follower2patient_locid = array();
            
            foreach ($locrray as $pk => $pat_loc_Data) {
                if (! in_array($pat_loc_Data['location_id'], $parrent_locations_ids)) {
                    $follower2patient_locid[$pat_loc_Data['id']][$pat_loc_Data['location_id']] = $pat_loc_Data['master_location']['location'];
                }
            }
            $this->view->follower2patient = $follower2patient_locid;
			// --
			$locType = $lc->checkLocationsClientByType($clientid, 6);
			$locTypeHospiz = $lc->checkLocationsClientByType($clientid, 2);
			
			if($locType)
			{

				$pc = new ContactPersonMaster();
				$pcs = $pc->getPatientContact($ipid, false);

				if($pcs)
				{
					$z = 1;
					$cnt_number = 1; // display contact number
					$excluded = array();
					foreach($pcs as $value)
					{
						if($value['isdelete'] == '0')
						{
							$locationsarray['8888' . $z] = 'bei Kontaktperson ' . $cnt_number . '(' . $value['cnt_last_name'] . ', ' . $value['cnt_first_name'] . ')';
							$cnt_number++;
						}
						else
						{
							$cnt_id = '8888' . $z;
							if(in_array($cnt_id, $patient_locations_ids))
							{
								$locationsarray_excluded['8888' . $z] = 'bei Kontaktperson';
								$excluded[] = '8888' . $z;
							}
						}
						$z++;
					}
				}
			}
			$this->view->locaarray = $locationsarray;
			$this->view->locaarray_ex = $locationsarray_excluded;
			$this->view->excluded_arr = $excluded;
		
			$input = 0;
			foreach($locTypeHospiz as $kHospType => $vHospType)
			{
				foreach($locrray as $kPatLocation => $vPatLocation)
				{
					if($vHospType['id'] == $vPatLocation['location_id'])
					{
						$input++;
					}
				}
				$hospizArr[] = $vHospType['id'];
			}

			$hospizArr[] = "999999999";

			$this->view->input = $input;
			$this->view->hospizIds = json_encode($hospizArr);
				

			/* -------------------Get location stations------------------- */
			$location_ids_arr = array_keys($locationsarray);
			$loc_stations = new LocationsStations();
			$loc_stations = $loc_stations->getAllLocationsStationsByLocations($clientid, $location_ids_arr);
			$this->view->locations_stations = $loc_stations;

//		print_r($locrray);exit;
			$lastLocation = end($locrray);
			$this->view->lastlocationid = $lastLocation['location_id'];
			$this->view->lastlocationentryid = $lastLocation['id'];
			$grid = new Pms_Grid($locrray, 1, count($locrray), "listpatientlocationedit.html");
			$this->view->location = $grid->renderGrid();

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function patientsymptomatologyAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$iscl = Pms_Plugin_Acl::getClientTabmenuAccess($logininfo->clientid);
			if(!$iscl)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ######################################################### */

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientsymptomatology', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}


			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->view->satclass = "active";
			$ipid = Pms_CommonData::getIpid($decid);

			if($this->getRequest()->isPost())
			{

				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientsymptomatology', $logininfo->userid, 'canadd');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$a_post = $_POST;
				$a_post['ipid'] = $ipid;
				$patient_form = new Application_Form_PatientSymptomatology();
				if(strlen(max($a_post['input_value'])) > 0)
				{
					$patient_form->InsertData($a_post);
				}

				if(sizeof($a_post['edit_value']) > 0)
				{
					$patient_form->EditData($a_post);
				}
			}

			$symperm = new SymptomatologyPermissions();
			$clientsymsets = $symperm->getClientSymptomatology($clientid);

			/* get Client symptomatology view options */
			$cl = new Client();
			$clarr = Pms_CommonData::getClientData($logininfo->clientid);
			$sympt_view_select = $clarr[0]['symptomatology_scale'];  // n-> NUmbers Scale(0-10);  a -> Attributes scale (none/weak/averge/strong)
			$this->view->sympt_view_select = $sympt_view_select;
			/* -------------------------------- */

			if(is_array($clientsymsets))
			{
				$this->view->symsets = $clientsymsets;
				$ss = new SymptomatologyValues();
				$i = 1;
				foreach($clientsymsets as $symset => $symdet)
				{
					$set_details = $ss->getSymptpomatologyValues($symset);


					$patsym = new Symptomatology();
					$patsymarr = $patsym->getPatientSymptpomatologyBySet($ipid, $symset);

					$set_description = '';
					foreach($patsymarr as $patsym_cust)
					{
						if(!empty($patsym_cust['custom_description']))
						{
							$set_details[$patsym_cust['symptomid']]['custom_description'] = $patsym_cust['custom_description'];
						}
						$graph_data['data'][] = "'" . $patsym_cust['input_value'] . "'";
						if($symptid != $patsym_cust['symptomid'])
						{
							foreach($set_details as $set_det)
							{
								if($set_det['symptomid'] == $patsym_cust['symptomid'])
								{
									
								}
							}
						}
					}
					unset($graph_data);

					$t = 0;
					foreach($set_details as $key => $value)
					{


						$graph_data[$t]['name'] = $value['sym_description'];
						$graph_data[$t]['data'] = array();

						foreach($patsymarr as $keys => $vals)
						{
							if($vals['symptomid'] == $value['id'])
							{

								if($vals['input_value'] == null)
								{
									$graph_data[$t]['data'][] = null;
								}
								else
								{
									$graph_data[$t]['data'][] = intval($vals['input_value']);
								}
							}
						}

						$t++;
					}

					$symgrid = new Pms_Grid($set_details, 1, count($set_details), "patsymptomatology.html");
					/* -------------aici NU trebuie modificat---------- */
					$tabbed_content[$i]['patientsyms'] = $symgrid->renderGrid();
					$tabbed_content[$i]['curr_date'] = date('d.m', time());

					/* ------------------Get user details - shotrcut ---------------------- */
					$user = Doctrine_Query::create()
						->select('*')
						->from('User')
						->where('isdelete=0')
						->orderBy('last_name ASC');

					if($logininfo->usertype != 'SA')
					{
						$user->andwhere('clientid = ' . $logininfo->clientid);
					}
					else
					{
						
					}
					$user->andWhere('isactive=0');
					$uarrae = $user->fetchArray();

					unset($user_details);
					foreach($uarrae as $value)
					{
						if(strlen($value['shortname']) > 0)
						{
							$user_details[$value['id']] = $value['shortname'];
						}
						else
						{
							$last_name = mb_substr($value['last_name'], 0, 1, "UTF-8");
							$first_name = mb_substr($value['first_name'], 0, 1, "UTF-8");
							$user_details[$value['id']] = strtoupper($first_name . $last_name);
						}
					}

					$cntr = 0;
					$newdatearr = array();

					unset($graphdate);
					foreach($patsymarr as $key => $val)
					{
						if($val['symptomid'] == $patsymarr[$key + 1]['symptomid'])
						{
							$newdatearr[$cntr]['date'] = $val['entry_date'];
							$newdatearr[$cntr]['create_date'] = $val['create_date'];
							$newdatearr[$cntr]['user'] = $user_details[$val['create_user']];
							$date_parsed = date_parse($val['entry_date']);
							$graphdate[] = "'" . $date_parsed['day'] . '.' . $date_parsed['month'] . "'";
							$cntr++;
						}
						else
						{
							$newdatearr[$cntr]['date'] = $val['entry_date'];
							$newdatearr[$cntr]['create_date'] = $val['create_date'];
							$newdatearr[$cntr]['user'] = $user_details[$val['create_user']];
							$date_parsed = date_parse($val['entry_date']);
							$graphdate[] = "'" . $date_parsed['day'] . '.' . $date_parsed['month'] . "'";
							$cntr++;
							break;
						}
					}

					$patdtgrid = new Pms_Grid($newdatearr, 1, count($newdatearr), "patsymptomatologydates.html");

					/* -------------aici NU trebuie modificat---------- */
					$tabbed_content[$i]['patdates'] = $patdtgrid->renderGrid();

					if(count($patsymarr) == 0)
					{
						foreach($set_details as $details)
						{
							$patsymarr[] = "&nbsp;";
						}
					}

					$patsymgrid = new Pms_Grid($patsymarr, $cntr, count($patsymarr), "patsymptomatologycols.html");
					/* -------------aici TREBUIE modificat---------- */
					$tabbed_content[$i]['patsym'] = $patsymgrid->renderGrid();
					$lastgrids = new Pms_Grid($set_details, 1, count($set_details), "patsymptomatologylast.html");
					/* -------------aici TREBUIE modificat---------- */
					$tabbed_content[$i]['lastgrid'] = $lastgrids->renderGrid();
					$tabbed_content[$i]['totalcount'] = count($patsymarr);
					$tabbed_content[$i]['tc'] = $i;
					$tabbed_content[$i]['setid'] = $symset;
					$tabbed_content[$i]['submit'] = $this->view->translate('submit');
					$tabbed_content[$i]['graph_dates'] = implode(",", $graphdate);
					$tabbed_content[$i]['cols'] = sizeof($graphdate);
					$tabbed_content[$i]['graph_series'] = json_encode($graph_data);

					$i++;
				}
			}
			else
			{

				$sm = new SymptomatologyMaster();
				$symarr = $sm->getSymptpomatology($clientid);

				$i = 0;
				$patsym = new Symptomatology();
				$patsymarr = $patsym->getPatientSymptpomatology($ipid);

				unset($graph_data);

				$t = 0;
				foreach($symarr as $key => $value)
				{
					$graph_data[$t]['name'] = $value['sym_description'];
					$graph_data[$t]['data'] = array();

					foreach($patsymarr as $keys => $vals)
					{
						if($vals['symptomid'] == $value['id'])
						{

							if($vals['input_value'] == null)
							{
								$graph_data[$t]['data'][] = null;
							}
							else
							{
								$graph_data[$t]['data'][] = intval($vals['input_value']);
							}
						}
					}
					$t++;
				}


				$symgrid = new Pms_Grid($symarr, 1, count($symarr), "patsymptomatology.html");
				$tabbed_content[$i]['patientsyms'] = $symgrid->renderGrid();
				$tabbed_content[$i]['curr_date'] = date('d.m', time());

				$cntr = 0;
				$newdatearr = array();
				unset($graphdate);

				foreach($patsymarr as $key => $val)
				{
					if($val['symptomid'] == $patsymarr[$key + 1]['symptomid'])
					{
						$newdatearr[$cntr]['date'] = $val['entry_date'];
						$newdatearr[$cntr]['create_date'] = $val['create_date'];
						$date_parsed = date_parse($val['entry_date']);
						$graphdate[] = "'" . $date_parsed['day'] . '.' . $date_parsed['month'] . "'";
						$cntr++;
					}
					else
					{
						$newdatearr[$cntr]['date'] = $val['entry_date'];
						$newdatearr[$cntr]['create_date'] = $val['create_date'];
						$date_parsed = date_parse($val['entry_date']);
						$graphdate[] = "'" . $date_parsed['day'] . '.' . $date_parsed['month'] . "'";
						$cntr++;
						break;
					}
				}

				$patdtgrid = new Pms_Grid($newdatearr, 1, count($newdatearr), "patsymptomatologydates.html");
				$tabbed_content[$i]['patdates'] = $patdtgrid->renderGrid();


				if(count($patsymarr) == 0)
				{
					foreach($symarr as $details)
					{
						$patsymarr[] = "&nbsp;";
					}
				}

				$patsymgrid = new Pms_Grid($patsymarr, $cntr, count($patsymarr), "patsymptomatologycols.html");
				$tabbed_content[$i]['patsym'] = $patsymgrid->renderGrid();

				$lastgrids = new Pms_Grid($symarr, 1, count($symarr), "patsymptomatologylast.html");
				$tabbed_content[$i]['lastgrid'] = $lastgrids->renderGrid();
				$tabbed_content[$i]['totalcount'] = count($symarr);
				$tabbed_content[$i]['tc'] = $i;
				$tabbed_content[$i]['setid'] = 0;
				$tabbed_content[$i]['submit'] = $this->view->translate('submit');
				$tabbed_content[$i]['cols'] = sizeof($graphdate);
				$tabbed_content[$i]['graph_dates'] = implode(",", $graphdate);
				$tabbed_content[$i]['graph_series'] = json_encode($graph_data);
			}

			$symtabbed = new Pms_Grid($tabbed_content, 1, count($tabbed_content), "patsymptomatologytabbed.html");
			$this->view->symtabbed = $symtabbed->renderGrid();

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/*			 * ****************************************** */
		}

		
		//===action patienttoollistedit  for  Hilfsmittel II================
		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function patienttoollisteditAction()
		{
			
			
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$ipid = Pms_CommonData::getIpId($decid);
			
			
			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
			
			/*			 * ******* URL form ************************* */
			//ISPC-2381 Carmen 27.01.2021
			if($_GET['newform']) 
			{
				$defaultaids = Aid::get_default_aids($clientid);				
				$this->view->act = "patient/patienttoollistedit?id=" . $_GET['id']."&newform=1";
			}
			else 
			{
				$this->view->act = "patient/patienttoollistedit?id=" . $_GET['id'];
			}
			/*			 * ****************************************** */
			
			if($this->getRequest()->isPost())
			{
				
			$post=$_POST;
			
			$remedy = new Application_Form_PatientRemedy();
			$remedy_valid=$remedy->validate($post);

		       if($remedy_valid)
		       {
			    	foreach($post['row'] as $i => $value)
			     	{	
			     		if(strlen($value['id_update'])>0)
					  	{				   	
					   		if($inserted_new_master)
				   			{				   		
				   				$inserted_new_master = $remedy->update_data($value,$inserted_new_master);
				   			}
				   			else
				   			{
				   				$inserted_new_master = $remedy->update_data($value);
				   			}					
				   		}
				  	 	else
				   		{
				   			if($inserted_new_master)
				   			{
				   				$inserted_new_master = $remedy->insert_Data($value,$inserted_new_master);
				   			}
				   			else
				   			{				   		
				   				$inserted_new_master = $remedy->insert_Data($value);
				   			}				   	
						}					
				  	}
				  //	exit;
			    }
			    else
			    {
			    	$remedy->assignErrorMessages();
			    }
		   	
			    //ISPC-2381 Carmen 27.01.2021
			    if($_GET['newform'])
			    {
			    	$this->_redirect(APP_BASE . 'patientnew/versorger?flg=suc&id=' . $_GET['id']);
			    }
			    else 
			    {
			    	$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			    }
			
			}
			
			/* ------------ Supplies  -------------------- */
			$supp = new PatientSupplies();
			$supp_date = $supp->getPatientSupplies($ipid);
			if($supp_date)
			{
				foreach($supp_date as $ksup=>$vsup)
				{
					$psup_det[$vsup['id']] = $vsup;
				}
			}
			
			//ISPC-2381 Carmen 27.01.2021
			$pr = Doctrine_Query::create()
			->select('*')
			->from('PatientRemedies')
			->where('ipid= ?', $ipid);
			if($_GET['newform'])
			{
				$pr->andWhereNotIn('remedies', $defaultaids);
			}
			$pr->andWhere("isdelete=0");
			//--
			$prarray=$pr->fetchArray();
			
			foreach ($prarray as $key => $value)
			{				
				$s[$value['id']]['supplier_id']= $value['supplier'];					
				$s[$value['id']]['supplier']= $psup_det[$value['supplier']]['supplier'];
				$s[$value['id']]['remedies']= $value['remedies'];
			}
			
			$this->view->remds =$s;		
			
			//var_dump($s);exit;
			
		}
		
		
		
		public function patientcaseeditAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientcase ', $logininfo->userid, 'canedit');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$this->view->caseclass = "active";


			$this->view->act = "patient/patientcaseedit?id=" . $_GET['id'];
			$this->_helper->layout->setLayout('layout');

			/* Hours Dropdown */
			for($i = 0; $i < 24; $i++)
			{
				if($i < 10)
				{
					$app = "0";
				}
				else
				{
					$app = "";
				}
				$hrs[] = $app . $i;
			}
			$this->view->hours = $hrs;

			/* Minutes Dropdown */
			for($i = 0; $i < 60; $i++)
			{
				if($i < 10)
				{
					$app = "0";
				}
				else
				{
					$app = "";
				}
				$minutes[] = $app . $i;
			}
			$this->view->minutes = $minutes;

			if($this->getRequest()->isPost())
			{
				$patient_form = new Application_Form_PatientCase();
				$this->cntval = $patient_form->validate($_POST);

				if($this->cntval)
				{
					$patient_form->UpdateData($_POST);
				}
				else
				{
					$patient_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(comments,'" . Zend_Registry::get('salt') . "') as comments")
				->from('PatientCase')
				->where('id= ?', $_GET['id']);
			$pat = $patient->execute();

			if($patient)
			{
				$locationarray = $pat->toArray();

				$hrtm = explode(" ", $locationarray[0]['admission_date']);

				$hrtm1 = explode(":", $hrtm[1]);
				$this->view->adm_timeh = $hrtm1[0];
				$this->view->adm_timem = $hrtm1[1];

				$locationarray['admission_date'] = date('d-m-Y', strtotime($locationarray[0]['admission_date']));
				$this->retainValues($locationarray[0]);
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($_GET['id'], 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function diagnosiseditAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$this->view->act = "patient/diagnosisedit?id=" . $_GET['id'];
			$this->_helper->layout->setLayout('layout');
			$this->view->genders = array("" => "Select Gender", "0" => "Divers", "1" => "Male", "2" => "Female");
			$this->view->terminals = array("" => "Select Terminal", "0" => "Terminal Key Number", "1" => "NonTerminal Key Number");

			if($this->getRequest()->isPost())
			{
				$patient_form = new Application_Form_Diagnosis();
				$this->cntval = $patient_form->validate($_POST);

				if($this->cntval)
				{
					$patient_form->UpdateData($_POST);
				}
				else
				{
					$patient_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			$patient = Doctrine::getTable('Diagnosis')->find($_GET['id']);

			if($patient)
			{
				$locationarray = $patient->toArray();
				$this->retainValues($locationarray);
			}
		}

		
		public function patdiagnoremoveAction()
		{
		
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;

			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			$this->_helper->viewRenderer->setNoRender();
			
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			
			if($_GET['delid'] > 0)
			{
				$cust = Doctrine::getTable('PatientDiagnosis')->find($_GET['delid']);
				//ISPC-2614 Ancuta 12.08.2020 :: Trigger listner for delete
				$pc_listener = $cust->getListener()->get('IntenseDiagnosisConnectionListener');
				$pc_listener->setOption('disabled', false);
				//--
				$cust->delete();
				$cust->save();
			}
			
		}
		
		public function patdiagnometaremoveAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$this->_helper->layout->setLayout('layout_ajax');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			
			
			if(!empty($_POST['patient']) && !empty($_POST['pdiagno_id']) && !empty($_POST['diagno_meta_ids'])){
				
				$decid = Pms_Uuid::decrypt($_POST['patient']);
				$ipid = Pms_CommonData::getIpid($decid);
				
				$isclient = Pms_CommonData::getPatientClient($decid, $clientid);
	
				
				if(!$isclient)
				{
					$this->_redirect(APP_BASE . "overview/overview");
				}
				
				$diagno_meta_ids = explode(',',$_POST['diagno_meta_ids']);
				$pdm_q = Doctrine_Query::create()
				->select("*")
				->from('PatientDiagnosisMeta')
				->where("diagnoid= ?",$_POST['pdiagno_id'])
				->andWhere("ipid = ?",$ipid);
				if(!empty($diagno_meta_ids)){
					$pdm_q->andWhereIn("metaid",$diagno_meta_ids);
				}
				$patient_data_res = $pdm_q->fetchArray();
				
				
				if(!empty($patient_data_res)){
					foreach($patient_data_res as $k=>$pmdata){
						$cust = Doctrine::getTable('PatientDiagnosisMeta')->find($pmdata['id']);
						$cust->delete();
						$cust->save();
					}
				}
			} 
		}
		
		public function patdiagnoeditAction()
		{

			//$decid = Pms_Uuid::decrypt($_GET['id']);
			//$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = $this->dec_id;
			$clientid = $this->logininfo->clientid;
			$userid = $this->logininfo->userid;
			$this->view->clientid = $clientid;
			$ipid = $this->ipid;

			if($_GET['delid'] > 0)
			{
				$cust = Doctrine::getTable('PatientDiagnosis')->find($_GET['delid']);
				$cust->delete();
				$cust->save();
			}

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ######################################################### */

			$modules = new Modules();
			$hs_type_module = $modules->checkModulePrivileges("81", $clientid);
			$this->view->has_hs_module = $hs_type_module;
			//Maria:: Migration CISPC to ISPC 22.07.2020
			$pbd_type_module = $modules->checkModulePrivileges("1005", $clientid);
			$this->view->has_pbd_module = $pbd_type_module;

			
			$act_module = $modules->checkModulePrivileges("127", $clientid);
			$this->view->act_module = $act_module;
	
			
			/*			 * ******* Patient Information ************ */

			$this->view->patclass = "active";
			//$patientmaster = new PatientMaster();
			//$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			//$tm = new TabMenus();
			//$this->view->tabmenus = $tm->getMenuTabs();

			$dm = new DiagnosisIcd();
			$this->view->icddiagnosisarr = $dm->getDiagnosisData(1);

			$dm = new DiagnosisMeta();
			$diagnosismeta = $dm->getDiagnosisMetaData(1);

			$this->view->diagnosismeta = $diagnosismeta;
			$this->view->jsdiagnosismeta = json_encode($diagnosismeta);

			/*$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patientdiagnosis', $userid, 'canview');


			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
			if($logininfo->clientid)
			{
				$clientid = $logininfo->clientid;
			}*/

			//$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;


			if($act_module){
			    $act_m_info = PatientDiagnosisAct::get_active_act($ipid);
			    if(!empty($act_m_info)){
                    $this->view->act_value = $act_m_info[0]['act'];
                    $current_act = $act_m_info[0]['act']; 			        
			    }
			}
				
			$a_diagno = array();
			/*			 * ****************************************** */

			if($this->getRequest()->isPost())
			{
				/*$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('Patientdiagnosis', $userid, 'canadd');
				
				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}*/

				$pat_diagnosis = new Application_Form_PatientDiagnosis();
				$diagno_text = new Application_Form_DiagnosisText();


				$a_post = $_POST;
				$a_post['clientid'] = $clientid;
				$a_post['ipid'] = $ipid;
				$a_post['diagnosis_page'] = true;// TODO-2604 Ancuta 17.10.2019 

				
				
				if($act_module)
				{
				    if(strlen($a_post['act_value']) > 0 && $a_post['act_value'] != $current_act)
				    {
				        // update existing if exist
    				    $loc = Doctrine_Query::create()
    				    ->update("PatientDiagnosisAct")
    				    ->set('isdelete',"1")
    				    ->set('change_date',"'".date('Y-m-d H:i:s',time())."'")
    				    ->set('change_user',"'".$userid."'")
    				    ->where("ipid = '".$ipid."'");
    				    $loc->execute();
    				    
				        // insert new 
    				    $res = new PatientDiagnosisAct();
    				    $res->ipid = $a_post['ipid'];
    				    $res->act = $a_post['act_value'];
    				    $res->save();
				    }
				    
				}
				
				
				
				
//			for($i = 1; $i <= sizeof($_POST['diagnosis']); $i++)
				foreach($_POST['diagnosis'] as $k_i => $v_i)
				{
					if(strlen($_POST['diagnosis'][$k_i]) > 0 && strlen($_POST['hidd_diagnosis'][$k_i]) < 1)
					{
						$a_post['newdiagnosis'][$k_i] = $v_i;
						$a_post['newdiagnosistype'][$k_i] = $_POST['dtype'][$k_i];
						$a_post['newdiagnosisicd'][$k_i] = $_POST['icdnumber'][$k_i];
					}
				}

				if(is_array($a_post['newdiagnosis']))
				{
					$dt = $diagno_text->InsertEditData($a_post);

					foreach($dt as $key => $val)
					{
						$a_post['newhidd_diagnosis'][$key] = $val['id'];
					}
				}

				for($i = 1; $i <= sizeof($_POST['diagnosis_ed']); $i++)
				{
					if(strlen($_POST['diagnosis_ed'][$i]) > 0 && strlen($_POST['hidd_diagnosis_ed'][$i]) < 1)
					{
						$a_post['newdiagnosis_ed'][$i] = $_POST['diagnosis_ed'][$i];
						$a_post['newdiagnosistype_ed'][$i] = $_POST['dtype_ed'][$i];
					}
				}

				if(is_array($a_post['newdiagnosis_ed']))
				{
					$dt = $diagno_text->Insert_EdData($a_post);

					foreach($dt as $key => $val)
					{
						$a_post['newhidd_diagnosis_ed'][$key] = $val['id'];
					}
				}

				$reorder = $pat_diagnosis->UpdateData($a_post);
				//$pat_diagnosis->UpdateData($a_post);
				//var_dump($reorder);exit;
				$dm_form = new Application_Form_PatientDiagnosisMeta();
				$dm_form->UpdateData($a_post);
				
				//ISPC - 2364
				$data['diagno_order'] = $reorder;
				$entity = PatientDiagnoOrderTable::getInstance()->findOrCreateOneBy('ipid', $ipid, $data);
				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
			}

			/*			 * ****************************************** */
			$abb = "'HD','ND'";
			if($hs_type_module)
			{
				$abb .= ",'HS'";
			}
			if($pbd_type_module) //Maria:: Migration CISPC to ISPC 22.07.2020
			{
				$abb .= ",'PBD'";
			}

			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($clientid, $abb);

			$hs_type_id = '0';
			foreach($darr as $k_diag_type => $v_diag_type)
			{
				if($v_diag_type['abbrevation'] == 'HS')
				{
					$hs_type_id = $v_diag_type['id'];
				}
			}
			//used to identify hs_radios
			$this->view->hs_type_value = $hs_type_id;

			$this->view->dtypearray = $darr;
			$this->view->jdarr = json_encode($darr);
			/*			 * ****************************************** */

			/*			 * ******************UPDATE PANEL**************************** */
// 			$ipid = Pms_CommonData::getIpid($decid);

			$abb = "'ND'";
			$dg = new DiagnosisType();
			$dsad = $dg->getDiagnosisTypes($clientid, $abb);
			$uptype = $dsad[0]['id'];

			$abb = "'AD'";
			$dg = new DiagnosisType();
			$dad = $dg->getDiagnosisTypes($clientid, $abb);
			$dtype = $dad[0]['id'];

			if($dtype == "")
			{
				$dtype = "0";
			}

			$diagns = new PatientDiagnosis();
			$b_diagno = $diagns->getFinalData($ipid, $dtype);

			foreach($b_diagno as $key => $val)
			{
				if(strlen($val['diagnosis']) > 0)
				{
					$loc = Doctrine_Query::create()
						->update("PatientDiagnosis")
						->set('diagnosis_type_id', "'" . $uptype . "'")
						->where("id='" . $val['pdid'] . "'");
					$loc->execute();
				}
			}

			$diagns = new PatientDiagnosis();
			$main = $diagns->getPatientMainDiagnosis($ipid, "diagnosis_icd");

			/*
			if(1 == 2)
			{
				$dm = new PatientDiagnosisMeta();
				$dmarr = $dm->getPatientDiagnosismeta($ipid);

				$dms = new DiagnosisMeta();
				$diagnosismeta = $dms->getDiagnosisMetaData(1);

				foreach($dmarr as $key => $val)
				{
					$mid = $dmarr[0]['metaid'];
					$apost = array();
					$apost['ipid'] = $ipid;
					$apost['dtype'] = $uptype;
					$apost['icd'] = $val['metaid'];
					$apost['clientid'] = $clientid;
					$apost['diagnosis'] = $diagnosismeta[$val['metaid']];

					$fdoc = Doctrine_Query::create()
						->select('*')
						->from('PatientDiagnosis')
						->where('icd_id ="' . $val['metaid'] . '"')
						->andWhere("ipid='" . $ipid . "'");
					$res = $fdoc->execute();

					if(res)
					{
						$resarr = $res->toArray();
					}

					if(count($resarr) < 1)
					{
						$patdigno = new Application_Form_PatientDiagnosis();
						$patdigno->UpdateMetatoDiagnosis($apost);
					}
				}
			}
			*/

			/*			 * ******************************************************************************************** */

			$a_diagno = array();
			if(is_array($_POST['hidd_diagnosis']))
			{
				foreach($_POST['hidd_diagnosis'] as $key => $val)
				{
					$a_diagno[$key]['hidd_icdnumber'] = $_POST['hidd_icdnumber'][$key];
					$a_diagno[$key]['icdnumber'] = $_POST['icdnumber'][$key];
					$a_diagno[$key]['diagnosis'] = $_POST['diagnosis'][$key];
					$a_diagno[$key]['diagnosis_from'] = $_POST['diagnosis_from'][$key]; //ISPC - 2364
					$a_diagno[$key]['comments'] = $_POST['comments'][$key]; //ISPC - 2364
					$a_diagno[$key]['hidd_tab'] = $_POST['hidd_tab'][$key];
					$a_diagno[$key]['hidd_diagnosis'] = $_POST['hidd_diagnosis'][$key];
					$a_diagno[$key]['meta_title1'] = $_POST['meta_title1'][$key];
					$a_diagno[$key]['meta_title2'] = $_POST['meta_title2'][$key];
					$a_diagno[$key]['meta_title3'] = $_POST['meta_title3'][$key];
				}
			}
			else
			{
				$comma = ",";
				$ipidval = "'0'";

				if(is_array($darr))
				{
					foreach($darr as $key => $val)
					{
						$ipidval .= $comma . "'" . $val['id'] . "'";
						$comma = ",";
					}
				}

// 				$ipid = Pms_CommonData::getIpid($decid);
				$diagns = new PatientDiagnosis();
				$a_diagno = $diagns->getFinalData($ipid, $ipidval);
				$diagno_cnt = count($a_diagno);

				/*ISPC - 2364 - sorted by user */
				$pdiaord = PatientDiagnoOrderTable::getInstance()->findDiagnoOrder($ipid);
				//RWH - ISPC-950
				//sort by icd
				if(empty($pdiaord))
				{
					$a_diagno = $this->array_sort($a_diagno, 'icdnumber', SORT_ASC);
					$a_diagno = array_values($a_diagno);
	
					//sort by type
					foreach($darr as $k_diag_type => $v_diag_type)
					{
						foreach($a_diagno as $k_diag => $v_diag)
						{
							if($v_diag_type['id'] == $v_diag['diagnosis_type_id'])
							{
								$a_diagno_sorted[] = $v_diag;
							}
						}
					}
				//RWH end
				}
				else
				{
					$a_diagno = array_column($a_diagno, null, 'pdid');
					$pdorder = $pdiaord[0]['diagno_order'];
					
					$diagnaddother = array_diff(array_keys($a_diagno), $pdorder);
					$diagnremoveother = array_diff($pdorder, array_keys($a_diagno));
					
					if($diagnaddother)
					{
						$pdorder = array_merge($pdorder, $diagnaddother);					
					}
					
					if($diagnremoveother)
					{
						$pdorder = array_diff($pdorder, $diagnremoveother);	
					}
					
					$a_diagno_sorted = [];
					foreach ($pdorder as $pdid) {
						$a_diagno_sorted[] = $a_diagno[$pdid];
					}
				}
				//$a_diagno = $a_diagno_sorted;
				//TODO-3049 Lore 03.04.2020
				if(!empty($a_diagno_sorted)){
				    $a_diagno = $a_diagno_sorted;
				}
				//.
				
				if($diagno_cnt < 6)
				{

					for($i = ($diagno_cnt + 1); $i <= 6; $i++)
					{
						$a_diagno[$i]['tabname'] = "";
						$a_diagno[$i]['icdnumber'] = "";
						$a_diagno[$i]['hidd_icdnumber'] = "";
						$a_diagno[$i]['diagnosis'] = "";
						$a_diagno[$i]['diagnosis_from'] = ""; //ISPC - 2364
						$a_diagno[$i]['comments'] = ""; //ISPC - 2364
						$a_diagno[$i]['pdid'] = "";
						$a_diagno[$i]['hidd_diagnosis'] = "";
						$a_diagno[$i]['diagnosis_type_id'] = "";
						$a_diagno[$i]['meta_title1'] = "";
						$a_diagno[$i]['meta_title2'] = "";
						$a_diagno[$i]['meta_title3'] = "";
					}
				}
			}

			$this->view->jscount = count($a_diagno);

			$meta_data = PatientDiagnosisMeta::getPatientDiagnosismeta($ipid);

			foreach($meta_data as $kx => $mvas_data)
			{
				$meta_diagnosis[$mvas_data['diagnoid']][] = $mvas_data['metaid'];
			}

			$grid = new Pms_Grid($a_diagno, 1, count($a_diagno), "listdiagnosisord.html");
			$grid->meta_diagnosis = $meta_diagnosis;
			$grid->gridview->dtypearray = $darr;
			$this->view->diagno = $grid->renderGrid();
			$this->view->rowcount = count($a_diagno);

			$aabb = "'AD'";
			$dg = new DiagnosisType();
			$adarr = $dg->getDiagnosisTypes($clientid, $aabb);

			if(!$adarr[0]['id'])
			{
				$adarr[0]['id'] = 0;
			}

			$b_diagno = array();
			$diagns = new PatientDiagnosis();
			$b_diagno = $diagns->getFinalData($ipid, $adarr[0]['id']);
			$newb_diagno = array();

			if(is_array($b_diagno))
			{
				for($i = 0; $i < count($b_diagno); $i++)
				{
					$newb_diagno[$i]['icdnumber_ed'] = $b_diagno[$i]['icdnumber'];
					$newb_diagno[$i]['diagnosis_ed'] = $b_diagno[$i]['diagnosis'];
					$newb_diagno[$i]['hidd_diagnosis_ed'] = $b_diagno[$i]['hidd_diagnosis'];
					$newb_diagno[$i]['hidd_icdnumber_ed'] = $b_diagno[$i]['hidd_icdnumber'];
					$newb_diagno[$i]['diagnosis_type_id_ed'] = $b_diagno[$i]['diagnosis_type_id'];
					$newb_diagno[$i]['pdid_ed'] = $b_diagno[$i]['pdid'];
					$newb_diagno[$i]['hidd_tab_ed'] = $b_diagno[$i]['tabname'];
					$newb_diagno[$i]['diagno_comment_ed'] = $b_diagno[$i]['diagno_comment'];
				}
			}

			$grid = new Pms_Grid($newb_diagno, 1, count($newb_diagno), "listadmissiondiagnosis_edit.html");
			$this->view->admdiagno = $grid->renderGrid();

			$aabb = "'DD'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($clientid, $aabb);
			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}
			$d_diagno = array();
			$diagns = new PatientDiagnosis();
			$d_diagno = $diagns->getFinalData($ipid, $ddarr[0]['id']);
			$grid = new Pms_Grid($d_diagno, 1, count($d_diagno), "list_dischargediagnosis.html");
			$this->view->dischargediagnogrid = $grid->renderGrid();


			$pc = new PatientDiagnosis();
			$maindiagnoarr = $pc->getPatientMainDiagnosis($ipid, "diagnosis_icd");

			if($maindiagnoarr)
			{
				$dt = new DiagnosisIcd();
				$dtarr = $dt->getDiagnosisDataById($maindiagnoarr[0]['diagnosis_id']);

				$this->view->meta_icdnumber = $dtarr[0]['icd_primary'];
				$this->view->meta_diagnosis = $dtarr[0]['id'];
				$this->view->hidd_meta_diagnosis = $maindiagnoarr[0]['id'];
			}

			$dm = new PatientDiagnosisMeta();
			$dmarray = $dm->getPatientDiagnosismeta($ipid);
			if($dmarray)
			{
				$metatitle[0] = $dmarray[0]['metaid'];
				$metatitle[1] = $dmarray[1]['metaid'];
				$metatitle[2] = $dmarray[2]['metaid'];

				$meta_title_hidd[0] = $dmarray[0]['id'];
				$meta_title_hidd[1] = $dmarray[1]['id'];
				$meta_title_hidd[2] = $dmarray[2]['id'];
			}

			$this->view->metatitle = $metatitle;
			$this->view->meta_title_hidd = $meta_title_hidd;
		}

		public function changepatdiagnoeditAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$getdid = $_GET['did'];
			$ipid = Pms_CommonData::getIpid($decid);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patientdiagnosis', $logininfo->userid, 'canview');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;

			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			if($this->getRequest()->isPost())
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('Patientdiagnosis', $logininfo->userid, 'canedit');
				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$diagno_text = new Application_Form_DiagnosisText();
				$a_post = $_POST;

				for($i = 0; $i <= count($_POST['diagnosis']); $i++)
				{
					if(strlen($_POST['diagnosis'][$i]) > 0 && strlen($_POST['hidd_diagnosis'][$i]) < 1)
					{
						$a_post['newdiagnosis'][] = $_POST['diagnosis'][$i];
						$a_post['newdiagnosistype'][] = $_POST['dtype'][$i];
						$a_post['newdiagnosisicd'][$i] = $_POST['icdnumber'][$i];
					}
				}

				if(is_array($a_post['newdiagnosis']))
				{
					$dt = $diagno_text->InsertData($a_post);

					for($i = 0; $i < sizeof($dt); $i++)
					{
						$a_post['newhidd_diagnosis'][] = $dt[$i]['id'];
					}
				}

				$dform = new Application_Form_PatientDiagnosis();
				$dform->updatePatDiagnosis($a_post);
				$this->_redirect(APP_BASE . "patient/patdiagnoedit?id=" . $_GET['id']);
			}

			$patdiago = Doctrine_Query::create()
				->select("*,AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as a_tabname")
				->from('PatientDiagnosis')
				->where('id = "' . $getdid . '"');
			$pt = $patdiago->execute();

			if($pt)
			{
				$ptarr = $pt->toArray();

				$diag = new PatientDiagnosis();
				$diagarr = $diag->getFinalData($ipid, $ptarr[0]['diagnosis_type_id']);

				foreach($diagarr as $key => $val)
				{

					if($val['pdid'] == $getdid)
					{
						$this->view->icdnumber = $val['icdnumber'];
						$this->view->diagnosis = $val['diagnosis'];
						$this->view->hidd_diagnosis = $val['hidd_diagnosis'];
						$this->view->hidd_tab = $val['tabname'];
						$this->view->hidd_icdnumber1 = $val['hidd_icdnumber'];
					}
				}
			}
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
		}

		public function patientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		//todo: 23.10.2014 - add permission verification for system filter icons and proceed to add filters in results
		public function patientoveralllistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			if(!$logininfo->clientid)
			{
				//redir to select client error
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$groupid = $logininfo->groupid;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patient', $logininfo->userid, 'canview');
			
			$this->view->today_date = date('d.m.Y');
			$this->view->hours = Pms_CommonData::getHours();
			$this->view->minutes = Pms_CommonData::getMinutes();
			
			$master_group = Usergroup::getMasterGroup($groupid);

			$modules = new Modules();
			if($modules->checkModulePrivileges("51", $clientid) || $modules->checkModulePrivileges("57", $clientid))
			{
				$this->view->wlpermission = true;
			}
			else
			{
				$this->view->wlpermission = false;
			}

			if($modules->checkModulePrivileges("67", $clientid))
			{
				$sgbvperms = true;
			}
			else
			{
				$sgbvperms = false;
			}

			if($modules->checkModulePrivileges("94", $clientid))
			{
				$this->view->user2location = 1;
			} else{
				$this->view->user2location = 0;
			}
			
			
			if($modules->checkModulePrivileges("127", $clientid))
			{
			    $diagno_act_permission = true;
			}
			else
			{
			    $diagno_act_permission= false;
			}
			
			$this->view->diagno_act_permission = $diagno_act_permission;
			
			//Maria:: Migration CISPC to ISPC 22.07.2020
            $four_status_icons = false;
			if($modules->checkModulePrivileges("1003", $clientid))
            {
                $four_status_icons = true;
            }

            $this->view->four_status_icons = $four_status_icons;
			
			// ISPC-2420
			if($modules->checkModulePrivileges("196", $clientid))
			{
			    $demstepcare_status_permission = true;
			}
			else
			{
			    $demstepcare_status_permission= false;
			}
				
			$this->view->demstepcare_status_permission = $demstepcare_status_permission;


			//ISPC-2823
            if($modules->checkModulePrivileges("1015", $clientid))
            {
                $this->view->multilists = Client::getClientconfig($clientid, 'activepatients_lists');
                if(!$this->view->multilists ||count($this->view->multilists)<1){
                    $this->view->multilists=false;
                }
            }
            else
            {
                $this->view->multilists= false;
            }


			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			//L.E: 22.10.2014 - added permissions check for icons
			if($logininfo->usertype != 'SA')
			{
				//use mastergroupid not groupid
				$allowed_icons = GroupIconsDefaultPermissions::getGroupAllowedIcons($master_group, $clientid);
			}
			else
			{
				//$allowed_icons = false;
				$allowed_icons = array(
				    'system' => false,
				    'custom' => false
				);				
			}

			//Nico::New Approach to select lists ISPC-2823
			$aPreselected_tab=['pmd' => 'konsil', 'station' => 'station', 'ambulant' => 'ambulant', 'sapv' => 'sapv','konsil' => 'konsil', ];
			//IM-139 call patientlist with preset tab of multilists
            if(isset($_GET['f']) && isset($aPreselected_tab[$_GET['f']])){

                $this->view->preselected_tab = $aPreselected_tab[$_GET['f']];
            }

			//save to session so we have the isadminvisible
			$last_page2tab = new Zend_Session_Namespace('last_page2tab');
			$page = $this->getRequest()->getControllerName() .'_'. $this->getRequest()->getActionName();
			
			if ( ! empty($last_page2tab->$page)) {
				$this->view->last_page2tab = $last_page2tab->$page;
			}
            //ISPC-2823
			if($this->view->multilists){
			    if(isset($_REQUEST['f'])){
                    $this->view->last_page2tab=$_REQUEST['f'];
                    if($this->view->last_page2tab=="pmd"){
                        $this->view->last_page2tab="konsil";
                    }
                }
            }
			
			//load icons
			//get system icons
			$sys_icons = new IconsMaster();
			$sys_icons_all = $sys_icons->get_system_icons($clientid, $allowed_icons['system']);

			foreach($sys_icons_all as $sid=>$sdata){
			    if($sid == "42"){
			        unset($sys_icons_all['42']);
			    }
			    
 			    if($sid == "43"){ // diagno_act_icon
 			        unset($sys_icons_all['43']); 
 			    }
 			    
 			    if($sid == "56"){ //Pflegegrad Icon
 			        unset($sys_icons_all['56']);
 			    }
			}
				
			foreach($sys_icons_all as $k_sys_icon_all => $v_sys_icon_all)
			{
				if($k_sys_icon_all == '26' && $sgbvperms)
				{
					$sys_icons_perms[$k_sys_icon_all] = $v_sys_icon_all;
				}
				else if($k_sys_icon_all != '26')
				{
					$sys_icons_perms[$k_sys_icon_all] = $v_sys_icon_all;
				}
			}

			$this->view->system_icons_list = $sys_icons_perms;
			$system_sub_icons = $sys_icons->get_system_icons($clientid, $allowed_icons['system'], false, true);

			foreach($system_sub_icons as $k_sub_icon => $v_sub_icon)
			{
				if(($k_sub_icon >= 6 && $k_sub_icon <= 10) || $k_sub_icon == '30') // 30 = standbydelete
				{
					$system_icon_sub['6'][] = $v_sub_icon;
				}
				else if($k_sub_icon >= '11' && $k_sub_icon <= '23')
				{
					$system_icon_sub['3'][] = $v_sub_icon;
				}
				else if( in_array($k_sub_icon,array('44','45','46','47')))
				{
					$system_icon_sub['43'][] = $v_sub_icon;
				}
				else if( in_array($k_sub_icon,array('57','58','59','60','61','62')))
				{
					$system_icon_sub['56'][] = $v_sub_icon;
				}
                else if( in_array($k_sub_icon,array('10003','10004','10005')))
                {//Maria:: Migration CISPC to ISPC 22.07.2020
                    $system_icon_sub['10002'][] = $v_sub_icon;
                }
			}


			$this->view->system_sub_icons_list = $system_icon_sub;
			//get custom icons
			$icons = new IconsClient();
			$this->view->custom_icons_list = $icons->get_client_icons($clientid, $allowed_icons['custom']);

			$lc = new Locations();
			$locationsarray = $lc->getLocations($clientid, 1);
			$locationsarray[""] = 'nach Aufenthaltsort filtern';
			$this->view->locationarray = $locationsarray;
            
			//get User
            $users = new User();
            $us_ar = $users->getUserByClientid($clientid, 2);
           // $us_ar[0] = 'nach Aufenthaltsort filtern';
            $this->view->userarray = $us_ar;
            //print_r($this->view->userarray); exit;
            
			// get pflegedienst
			$pfle = new Pflegedienstes();
			$pflegedienstsarray = $pfle->getPflegedienstes();
			$pflegedienstsarr[] = 'nach Pflegedienst filtern';
			foreach($pflegedienstsarray as $pfle_item)
			{
				$pflegedienstsarr[$pfle_item['nursing']] = $pfle_item['nursing'];
			}
			$this->view->pflegedienstsarray = $pflegedienstsarr;
           //print_r($pflegedienstsarray); exit;
			
			
			/* ****======***** */
			//get familydoctor
			$fd = new FamilyDoctor();
			$fdoc =$fd->getFamilyDoctors(false, false,false,false);
			foreach($fdoc as $key_d =>$val_d)
			{
				$fdocc['0'] =  'Auswahl';
				$fdocc[$val_d['last_name'].'|**|'.$val_d['first_name']] =$val_d['title'].' '. $val_d['last_name'].' '.$val_d['first_name'];
			}
			$this->view->fdoctor = $fdocc;
		    //print_r($fdocc);
		    //exit;
			
			
			
			/* ****======***** */
			
			//debug radu
			$allCols = new Columnslist();
			$this->view->allColumns = $allCols->getAllColumns();

			
			$day = "";
			$month = "";
			$year = "";
			
			if($_REQUEST['activated'] == 1 && strlen($_REQUEST['adm_date']) > 0  && Pms_Validation::isdate($_REQUEST['adm_date']))
			{
			    
			    $date = date('Y-m-d', strtotime($_REQUEST['adm_date']));
			    $time = $_REQUEST['adm_time_h'] . ':' . $_REQUEST['adm_time_m'] . ':00';
			    $admission_date_time = $date . ' ' . $time;
			    
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$ipid = Pms_CommonData::getIpId($decid);
				
				$patient_data_q = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('isdelete = "0"');
				$patient_data_res = $patient_data_q->fetchArray();
				
				if($patient_data_res[0] && $patient_data_res[0]['isdischarged'] == "0" && $patient_data_res[0]['isstandby'] == "1")
				{
				    //readmit standby patient
//     				$admission_date = $_REQUEST['adm_date'];
//     				$admission_date_time = $_REQUEST['adm_date'];
    				$comment = "Move to active - activate patient from patientoverallist";
				    $readmit = Application_Form_PatientMaster::readmit_standby_patient($ipid, $admission_date_time,$comment);
				}
			}



			// send from standby to deleted standby
			if($_REQUEST['send2standbydeleted'] == 1)
			{
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$ipid = Pms_CommonData::getIpId($decid);

				$pt = Doctrine_Core::getTable('PatientMaster')->find($decid);
				$pt->isstandby = 0;
				$pt->isstandbydelete = 1;
				$pt->save();
				$patient_details = $pt->toArray();
				
				$comment = "Move from standby to standby delete from pateintoveralllist";
				$send2standbydeleted = Application_Form_PatientMaster::send2standbydeleted($ipid, $patient_details, $comment);
				
				
			}


			// send from deleted standby to standby
			if($_REQUEST['send2standby'] == 1)
			{
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$ipid = Pms_CommonData::getIpId($decid);

				$pt = Doctrine_Core::getTable('PatientMaster')->find($decid);
				$pt->isstandby = 1;
				$pt->isstandbydelete = 0;
				$pt->save();
				
				$patient_details = $pt->toArray();
				$comment = "Move from standbydelete to standby from pateintoveralllist";
				$send2standby = Application_Form_PatientMaster::send2standby($ipid, $patient_details, $comment);
			}


			// send from discharge to archiv
			if($_REQUEST['send2archive'] == 1 && !empty($_REQUEST['archiv_ids']))
			{
				$ids = explode(',', $_REQUEST['archiv_ids']);
				foreach($ids as $id)
				{
					$decid = Pms_Uuid::decrypt($id);
					$ipidsarr[] = Pms_CommonData::getIpId($decid);
				}

				$q_archive = Doctrine_Query::create()
					->update('PatientMaster')
					->set('isarchived', '1')
					->whereIn('ipid', $ipidsarr);

				$archive = $q_archive->execute();
				exit;
			}



			// send from archiv to discharge
			if($_REQUEST['send2discharge'] == 1 && !empty($_REQUEST['ids']))
			{
				$ids = explode(',', $_REQUEST['ids']);
				foreach($ids as $id)
				{
					$ipidsarr[] = Pms_CommonData::getIpId(Pms_Uuid::decrypt($id));
				}
				$q_archive = Doctrine_Query::create()
					->update('PatientMaster')
					->set('isarchived', '0')
					->whereIn('ipid', $ipidsarr);
				$archive = $q_archive->execute();
				exit;
				
			}



			if($_GET['remove'] == 1)
			{
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$ipid = Pms_CommonData::getIpId($decid);

				$pt = Doctrine_Core::getTable('PatientMaster')->find($decid);
				$pt->isstandby = 0;
				$pt->isstandbydelete = 1;
				$pt->save();
			}
			
			// delete patient icons ISPC-2396 Carmen 08.10.2019
			if($_REQUEST['deletepatienticons'] == 1 && !empty($_REQUEST['pat_ids']) && !empty($_REQUEST['icons_ids']))
			{
				$ids = explode(',', $_REQUEST['pat_ids']);
				$icons_ids = explode(',', $_REQUEST['icons_ids']);
			
				foreach($ids as $id)
				{
					$ipidsarr[] = Pms_CommonData::getIpId(Pms_Uuid::decrypt($id));
				}
					
				/* $q_deleteiconspatient = Doctrine_Query::create()
				->update('IconsPatient')
				->set('isdelete', '1')
				->set('change_date', "'" . date("Y-m-d H:i:s", time()) . "'")
				->set('change_user', "'" . (int)$userid . "'")
				->whereIn('ipid', $ipidsarr)
				->andWhereIn('icon_id', $icons_ids)
				->andWhere('isdelete = "0"');
				
				$deleteiconspatient = $q_deleteiconspatient->execute(); */
				
				$delentity = IconsPatientTable::deleteAllIconsPatientsByIpidandIconId($ipidsarr, $icons_ids);
				
				exit;
			}

			if($this->getRequest()->isPost())
			{
				$a_post = $_POST;
			     
			    // generate only if patients are selected
			    if(!empty($a_post['patients_ids']) && count($a_post['patients_ids']) > 0){
			
			        if(strlen($a_post['sortby'])){
			            $data['sortby'] = $a_post['sortby'];
			        } else{
			            $data['sortby'] = "ln";
			        }
			        if(strlen($a_post['sortdir'])){
			            $data['sortdir'] = $a_post['sortdir'];
			        } else{
			            $data['sortdir'] = "ASC";
			        }
	               
			        
			        
	               // get ipids for the selected patients
	               foreach($a_post['patients_ids'] as $$k => $enryptped_id){
	                   $decripted_ids[] = Pms_Uuid::decrypt($enryptped_id);
	               }	

	               $patient_ipids_q = Doctrine_Query::create()
	               ->select('ipid')
	               ->from('PatientMaster')
	               ->where('isdelete = 0')
	               ->andWhereIn('id',$decripted_ids);
	               $patient_ipids_arr = $patient_ipids_q->fetchArray();
	               foreach($patient_ipids_arr as $kip=>$p_ipid){
	                   $patient_ipids[] = $p_ipid['ipid'];
	               }
	               
	               $data['ipids'] = $patient_ipids;
 
			         
	               
			        // get columns details
			        $viewable_cols = explode(',',$a_post['cols']);
			        $all_cols = explode(',',$a_post['tabcols']);
 
			        $allCols = new Columnslist();
			        $system_columns  = $allCols->getAllColumns();
			        
			        foreach( $system_columns as $col_id => $col_data){
			            if(in_array($col_id,$viewable_cols)){
			                $columns['viewable'][$col_id] = $col_data;
			            }
			            if(in_array($col_id,$all_cols)){
			              $columns['all'][$col_id] = $col_data;
			            }
			        }
			      
			        
			        if($a_post['generate'] != "0" ){
			            switch($a_post['generate'])
			            {
			                // export
			                case 'export_xlsx_all':
			                    //ISPC-2409
			                    $data['export_type'] = "excel";
			                    $data['columns'] = $columns['all'];
			                    $this->get_patients_details($data);
			                    break;
			                     
			                case 'export_xlsx_viewable':
			                    //ISPC-2409			                    
			                    $data['export_type'] = "excel";
			                    $data['columns'] = $columns['viewable'];
			                    $this->get_patients_details($data);
			                    break;
			                     
// 			                    // print
			                case 'print_list_all_columns':
			                    $data['export_type'] = "print";
			                    $data['columns'] = $columns['all'];
			                    $this->get_patients_details($data);
			                    break;
			
			                case 'print_list_viewable_columns':
			                    $data['export_type'] = "print";
			                    $data['columns'] = $columns['viewable'];
			                    $this->get_patients_details($data);
			                    break;
			                     
// 			                case 'print_letters':
// 			                    $this->export_letters($a_post);
// 			                    break;
			                     
// 			                case 'print_labels_3424':
// 			                    $this->export_pdf($member_array, 'Avery105x48', "member_stickers105x48.html");
// 			                    break;
			                     
// 			                case 'print_labels_3422':
// 			                    $this->export_pdf($member_array, 'Avery70x35', "member_stickers70x35.html");
// 			                    break;
			
			                     
			                default:
			                     
			                    break;
			            }
			            $this->_redirect(APP_BASE . "patient/patientoveralllist");
			        } else{
			             
			            $this->_redirect(APP_BASE . "patient/patientoveralllist?flg=no_export_method");
			             
			        }
			    } else {
			        $this->_redirect(APP_BASE . "patient/patientoveralllist?flg=no_members_error");
			    }
			     
			}
				
		}

		public function fetchoveralllistAction()
		{
		    set_time_limit(0);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			
			//save to session so we have the isadminvisible
			$last_page2tab = new Zend_Session_Namespace('last_page2tab');
			$page = $this->getRequest()->getControllerName() .'_patientoveralllist';
			
			if(empty($_REQUEST['f_status']) && !empty($last_page2tab->$page)){
				$_REQUEST['f_status'] = $last_page2tab->$page;
			}
			$last_page2tab->$page =  $_REQUEST['f_status'];


			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$groupid = $logininfo->groupid;
			$this->view->usertype = $logininfo->usertype;
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');
			$this->_helper->layout->setLayout('layout_ajax');
			$master_group = Usergroup::getMasterGroup($groupid);
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$logininfo = new Zend_Session_Namespace('Login_Info');

			$showinfo = new Modules();
			//ISPC-2396 - Carmen 09.10.2019
			$clientModules = $showinfo->get_client_modules($clientid);
			if($clientModules['200'])
			{
				$this->view->bulkdeleteiconbutton = true;
			}
			else
			{
				$this->view->bulkdeleteiconbutton = false;
			}
				
			$user2location_m = $showinfo->checkModulePrivileges("94", $logininfo->clientid);
			if($user2location_m)
			{
				$this->view->user2location = 1;
			} else{
				$this->view->user2location = 0;
			}
			
			
			//get patient discharge & dot
			$dis_ord = ($_REQUEST['ord'] == 'dot') ? 'dot' : 'discharge_date'; 
			
			
			// ISPC-1699 ACT I-IV
			if($showinfo->checkModulePrivileges("127", $clientid))
			{
			    $diagno_act_permission = true;
			}
			else
			{
			    $diagno_act_permission= false;
			}
			
			$this->view->diagno_act_permission = $diagno_act_permission;
			
			
			// ISPC-2420
			if($showinfo->checkModulePrivileges("196", $clientid))
			{
			    $demstepcare_status_permission = true;
			}
			else
			{
			    $demstepcare_status_permission= false;
			}
				
			$this->view->demstepcare_status_permission = $demstepcare_status_permission;
							
			
			
			// ISPC-1612 Leistungsnachweis Stapeldruck
			$modules = new Modules();
			if($modules->checkModulePrivileges("109", $clientid))
			{
			    $allow_sh_printing = true;
			}
			else
			{
			    $allow_sh_printing = false;
			}
			$this->view->allow_sh_printing = $allow_sh_printing ;
			//ISPC-2365
			if($modules->checkModulePrivileges("202", $clientid))
			{
			    $allow_rp_printing = true;
			}
			else
			{
			    $allow_rp_printing = false;
			}
			$this->view->allow_rp_printing = $allow_rp_printing ;



            //ISPC-2823 Nico :: 15.02.2021
            if($modules->checkModulePrivileges("1015", $clientid))
            {
                $multilists = Client::getClientconfig($clientid, 'activepatients_lists');
                if(!$multilists ||count($multilists)<1){
                    $act_as_tab=$_REQUEST['f_status'];
                }else{
                    if(in_array($_REQUEST['f_status'], array_keys($multilists))){
                        $act_as_tab="active";
                        if($_REQUEST['f_status'] == "station"){
                            $_REQUEST['icon_sys_value']['10002']='clinic_case_station';
                            $_REQUEST['icon_sys']['10002']='10002';
                        }
                        if($_REQUEST['f_status'] == "konsil"){
                            $_REQUEST['icon_sys_value']['10003']='clinic_case_konsil';
                            $_REQUEST['icon_sys']['10003']='10002';//yes this is strange
                        }
                        if($_REQUEST['f_status'] == "ambulant"){
                            $_REQUEST['icon_sys_value']['10004']='clinic_case_ambulant';
                            $_REQUEST['icon_sys']['10004']='10002';//yes this is strange
                        }
                    }elseif(strlen($_REQUEST['f_status'])){
                        $act_as_tab=$_REQUEST['f_status'];
                    }
                }
            }else{
                if(strlen($_REQUEST['f_status'])){
                    $act_as_tab=$_REQUEST['f_status'];
                }
            }


				
			//construct months selector array START
			$start_period = date('Y-m-d', strtotime('-2 month')); //TODO-2013
			$end_period = date('Y-m-d', strtotime('+4 months'));
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
				
			foreach($period_months_array as $k_month => $v_month)
			{
			    $month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
				
			$selected_month = date('Y-m', strtotime('+1 months'));
			$this->view->month_select_array = $month_select_array;
				
			//construct month_selector START
			$attrs['class'] = 'sh_month_selector';
			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			
			
			//construct rp forms months selector array START - ISPC - 2365
			//$rp_start_period = date('Y-m-d', strtotime('2008-01-01'));
			$rp_start_period = date('Y-m-d', strtotime('-6 month'));
			$rp_end_period = date('Y-m-d');
			$rp_period_months_array = Pms_CommonData::get_period_months($rp_start_period, $rp_end_period, 'Y-m');
			
			foreach($rp_period_months_array as $k_month => $v_month)
			{
				$rp_month_select_array[$v_month] = $v_month;
			}
			//construct rp forms months selector array END
			
			$rp_selected_month = date('Y-m', strtotime('+1 months'));
			$this->view->rp_month_select_array = $rp_month_select_array;
			
			//ISPC-2426 Carmen 05.11.2019
			//construct months selector array for shanlage14 filled forms START
			$start_period_filled = date('Y-m-d', strtotime('-2 month'));
			//$start_period_filled = date('Y-m-d', strtotime('-60 month'));
			$end_period_filled = date('Y-m-d');
			$period_months_array_filled = Pms_CommonData::get_period_months($start_period_filled, $end_period_filled, 'Y-m');
			
			foreach($period_months_array_filled as $k_month_filled => $v_month_filled)
			{
				$month_select_array_filled[$v_month_filled] = $v_month_filled;
			}
			//construct months selector array for shanlage14 filled forms END

			$this->view->month_select_array_filled = $month_select_array_filled;
			//var_dump($month_select_array_filled); exit;
			//ISPC-2426
			
			//get doctor and nurse users
			//get all related users details
			$master_groups_first = array('4', '5');
			
			$client_user_groups_first = Usergroup::getUserGroups($master_groups_first);
			
			foreach($client_user_groups_first as $k_group_f => $v_group_f)
			{
			    $master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
			}
			
// 			$client_users = User::getClientsUsers($clientid,true); // COmmented on 08.08.2019  for TODO-2489 By Ancuta
			$client_users = User::get_all_client_users($clientid,0,true,false); //Todo-2489 - ANcuta - changed function to include inactive users
			
			
			
			$nurse_users = array();
			$doctor_users = array();
			foreach($client_users as $k_cuser_det => $v_cuser_det)
			{
			    $master_user_details[$v_cuser_det['id']] = $v_cuser_det;
			    if(in_array($v_cuser_det['groupid'], $master2client['5']))
			    {
			        $nurse_users[] = $v_cuser_det['id'];
			    }
			    else if(in_array($v_cuser_det['groupid'], $master2client['4']))
			    {
			        $doctor_users[] = $v_cuser_det['id'];
			    }
			    
			   // shortname user=============================== 
			    if(strlen($v_cuser_det['shortname']) > 0)
			    {
     		    	$user_detailss[$v_cuser_det['id']] = $v_cuser_det['shortname'];
			    }
			    else
			    {
			    	$last_name = mb_substr($v_cuser_det['last_name'], 0, 1, "UTF-8");
			    	$first_name = mb_substr($v_cuser_det['first_name'], 0, 1, "UTF-8");
			    	$user_detailss[$v_cuser_det['id']] = strtoupper($first_name . $last_name);
			    }
			    
			}
				
			if(empty($doctor_users)){
			    $doctor_users[] = "999999999";
			}
			
			/* ----------------- set limits, pages, order, sort ----------------------- */
			$standby_page = false;
			//ISPC - 2287
			$this->view->table_length_options = array('25', '50', '100');
			
			if($_REQUEST['tbl'])
			{
				$limit = $_REQUEST['tbl'];
				
				$this->view->limit = $limit;
			}
			else 
			{
				$limit = $this->getRequest()->getParam('limit', 50);
				
				$this->view->limit = $limit;
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'desc')
			{
				$sort = 'desc';
			}
			else
			{
				$sort = 'asc';
			}

			/*
			 ISPC-2823
            if(strlen($_REQUEST['f_status']) > 0)
            {
                $reqestedTab = $_REQUEST['f_status'];
            }
            else
            {
                $_REQUEST['f_status'] = "active";
                $reqestedTab = "active";
            }
			*/

			/* --------------------  get user settings --------------------------------- */
			$user_c_details = User::getUserDetails($userid);
			if($user_c_details[0]['allow_own_list_discharged'] == '1')
			{
				$show_discharged_not_dead = true;
			}
			else
			{
				$show_discharged_not_dead = false;
			}

			if($user_c_details[0]['assigned_standby'] == '1')
			{
				$show_assigned_standby = true;
			}
			else
			{
				$show_assigned_standby = false;
			}

			/* ##################################################################################### */
			// COLUMNS DETAILS -  Start
			/* ##################################################################################### */

			/* #### Check if client has permission to see the organisation column ################## */
			$this->view->org_column = 0;
			$organisationprevileges = new Modules();
			$display_org = $organisationprevileges->checkModulePrivileges("72", $logininfo->clientid);
			if($display_org)
			{
				$org_column = 1;
			}
			/* ##################################################################################### */
			//columns
			$userCols = new Columns2users();

			if(strlen($act_as_tab) > 0)//ISPC-2823
			{
				$reqestedTab = $act_as_tab;//ISPC-2823
			}
			else
			{
				$reqestedTab = "active";
			}

			$tabs = array("active" => "1", "discharged" => "2", "standby" => "3", "archive" => "4", "all" => "5", "standbydel" => "6", "assignedpats" => "7");

			$tabColumns = new Columnslist();
			$tabCols = $tabColumns->getColumns($tabs[$reqestedTab]);
			$tabsColumnsSource = new Columns2tabs();
			$allTabsColumns = $tabsColumnsSource->getTabsColumns();
//print_r($tabCols);exit;
			foreach($tabCols as $kcol => $valcol)
			{
			    //TODO-3644 Ancuta 02.12.2020
			    if(in_array($valcol['columnName'], array('movetoarchive','movefromarchivtodischarge'))){
			        continue;
			    }
			    //--
			        
				if($org_column == "1")
				{
					$finalCol[] = $valcol['id'];
				}
				else
				{
					if($valcol['id'] != '20')
					{
						$finalCol[] = $valcol['id'];
					}
				}
			}

			$this->view->tabColumns = implode(",", $finalCol);
//print_r($this->view->tabColumns);exit;
			if(count($_REQUEST['columns']) != "0" && $_REQUEST['savecols'] == "1")
			{
				foreach($_REQUEST['columns'] as $column_id=>$value){
				    if($value != 'off'){
				        $user_columns2tab[] = $column_id;
				    }
				    if($value == 'primary' && count($user_primary_columns2tab)<6){
				        $user_primary_columns2tab[] = $column_id;
				    } 
				}
				$selectedColumns = implode(",", $user_columns2tab);

			}
			else
			{
				//get selected cols from db!!!
// 				$userSavedCols = $userCols->getUserColumns($logininfo->userid, $tabs[$reqestedTab]);
				$userSavedCols_arr = $userCols->getUserColumns($logininfo->userid, $tabs[$reqestedTab],true);
				if(count($userSavedCols_arr) == "0")
				{ //get defaults if user has no saved data
					$defaultCols = $userCols->getDefaultColumns(false, $tabs[$reqestedTab]);
					
					$defCols = array(); //$defCols = "9999999";
					$defPCols = array(); // Primary
					$defPCols_Data = array(); // Primary
					foreach($defaultCols as $col)
					{
						$defCols[] = $col['colid'];
						
    					// set primary
						if(count($defPCols) < 6){
						    $defPCols[] = $col['colid'];
						}
						//--
					}
					$selectedColumns = implode(",", $defCols);
					$user_columns2tab = $defCols;
					$user_primary_columns2tab = $defPCols;
					$user_primary_columns2tab_data = $defPCols_Data;
				}
				else
				{
				    $userSavedCols = array(); //$userSavedCols[] = "9999999X";
				    $user_primary_columns2tab = array(); //$userSavedCols[] = "9999999X";
				  
				    foreach($userSavedCols_arr as $k=>$saved_col){
				        $userSavedCols[] = $saved_col['colid'];
				        
				        if($saved_col['is_primary'] == '1')
				        {
				            if(count($user_primary_columns2tab) < 6){ //o more than six  columns
                                $user_primary_columns2tab[] = $saved_col['colid'];
				            }
				        } 
				    }
				    
	 
				    if( count($user_primary_columns2tab) < 6 ){
				        foreach( $userSavedCols as $kf => $colid){
				            if( count($user_primary_columns2tab) < 6 && !in_array($colid,$user_primary_columns2tab)){
				                $user_primary_columns2tab[] = $colid;
				            }
				        }
				    }
				    if( count($user_primary_columns2tab) < 6 ){
				        $defaultCols = $userCols->getDefaultColumns(false, $tabs[$reqestedTab]);
				        
				        foreach($defaultCols as $col)
				        {
				            if( count($user_primary_columns2tab) < 6 && !in_array($col['colid'],$user_primary_columns2tab)){
				                $user_primary_columns2tab[] = $col['colid'];
				                $userSavedCols[] = $col['colid'];
				            }
				        }
				        
				    }

				    $selectedColumns = implode(",", $userSavedCols);
					$user_columns2tab = $userSavedCols;
				}
			}

			
			// !!! THIS ARRAY IS NOT USED IT IS ONLY FOR INFORMATION !!!
			$overall_columns = array(
				'1' => 'epid',
				'2' => 'lastname',
				'3' => 'firstname',
				'4' => 'dateofbirth',
				'5' => 'admissiondate',
				'6' => 'dischargedate',
				'7' => 'location',
				'8' => 'Verordnung',
				'9' => 'daystreated',
				'10' => 'treatedby',
				'11' => 'lastupdate',
				'12' => 'movetoarchive',
				'13' => 'movefromarchivtodischarge',
				'14' => 'edit',
				'15' => 'reactivatepatient',
				'16' => 'restandby',
				'17' => 'removefromstandby',
				'18' => 'admitformstandby',
				'19' => 'icons',
				'20' => 'organisation',
				'21' => 'diagnosis',
				'22' => 'sapv_period',
				'23' => 'family_doctor',
				'24' => 'contact_number',
				'25' => 'location_team_leader',
				'26' => 'lastdate_contactform',
				'27' => 'nursing_service',
				'28' => 'voluntary',
				'29' => 'health_insurance',
			    '30' => 'patient_address_details'// TODO-3901 Ancuta 28.05.2021
			);

			$this->view->selectedColumns = $selectedColumns;
			$this->view->primaryColumns = implode(',',$user_primary_columns2tab);//ISPC-2479
			
			
			$allCols = new Columnslist();
			$system_columns  = $allCols->getAllColumns();

			foreach($user_primary_columns2tab as $upc){
			    $user_primary_columns2tab_data[$upc]['id'] = $upc;
			    $user_primary_columns2tab_data[$upc]['name'] = $system_columns[$upc]['columnName'];
			    
			    if($system_columns[$upc]['columnName'] == 'lastname'){
    			    $user_primary_columns2tab_data[$upc]['sort'] = 'ln';
			    }
			    elseif($system_columns[$upc]['columnName'] == 'firstname'){
    			    $user_primary_columns2tab_data[$upc]['sort'] = 'fn';
			    }
			    elseif($system_columns[$upc]['columnName'] == 'dateofbirth'){
    			    $user_primary_columns2tab_data[$upc]['sort'] = 'dob';
			    }
			    elseif($system_columns[$upc]['columnName'] == 'admissiondate'){
    			    $user_primary_columns2tab_data[$upc]['sort'] = 'adm';
			    }
			    elseif($system_columns[$upc]['columnName'] == 'lastupdate'){
    			    $user_primary_columns2tab_data[$upc]['sort'] = 'lastup';
			    }
			    elseif($system_columns[$upc]['columnName'] == 'dischargedate'){
    			    $user_primary_columns2tab_data[$upc]['sort'] = 'dis';
			    }
			    elseif($system_columns[$upc]['columnName'] == 'daystreated'){
    			    $user_primary_columns2tab_data[$upc]['sort'] = 'dot';
			    }
			    elseif($system_columns[$upc]['columnName'] == 'location'){
    			    $user_primary_columns2tab_data[$upc]['sort'] = 'loc';
			    }
			    elseif($system_columns[$upc]['columnName'] == 'epid'){
    			    $user_primary_columns2tab_data[$upc]['sort'] = 'id';
			    }
			    else {
    			    $user_primary_columns2tab_data[$upc]['sort'] = '';
			    }
			}
			
			$user_sec_columns2tab_data = array();
			$has_icon_line = '0';
			foreach($user_columns2tab as $uc){
			    if( ! in_array($uc,$user_primary_columns2tab)){// exclude icons 
	       		    $user_sec_columns2tab_data[$uc]['id'] = $uc;
    			    $user_sec_columns2tab_data[$uc]['name'] = $system_columns[$uc]['columnName'];
			    } 
			    
			    if($uc == "19" &&  ! in_array($uc,$user_primary_columns2tab)){
			        $has_icon_line = '1';
			    }
			    
			}
						
			$this->view->primary_columns = $user_primary_columns2tab_data;//ISPC-2479
			$this->view->child_columns = $user_sec_columns2tab_data;//ISPC-2479
			$this->view->has_icon_line = $has_icon_line;//ISPC-2479
 
			/* ##################################################################################### */
			// COLUMNS DETAILS -  END
			/* ##################################################################################### */

			/* --------------------  build filters array based on form input ------------------ */
			
			//add pflegedienst filter
			//print_r($_REQUEST['f_doctor']); exit;
			
			if($_REQUEST['f_doctor'] && $_REQUEST['f_doctor'] !="0" && strlen($_REQUEST['f_doctor'])>0)
			{
				$doc = explode("|**|",$_REQUEST['f_doctor']);
				
				
				$fdoc = Doctrine_Query::create()
				->select('id')
				->from('FamilyDoctor')
				->where('clientid = "' . $logininfo->clientid . '" ')
				->andWhere("last_name like  '%" . $doc[0] . "%'  OR last_name like  '%" . $doc[0].' '.$doc[1] . "%'  ")
				->andWhere("first_name like  '%" . $doc[1] . "%' OR first_name like  '%" . $doc[0].' '.$doc[1] . "%' ");
				$fdocarr = $fdoc->fetchArray();
				$fdocarray = $fdocarr;
				
				$fdoc_str = '"99999999999",';
				foreach($fdocarray as $key_d =>  $val_d)
				{
					$fdoc_str .='"'.$val_d['id'].'",';
				}
				$fdoc_str =  substr($fdoc_str, 0,-1);
			}
				
			
			
			
			$filters = array();

			switch($reqestedTab)//ISPC-2823
			{

				case 'active':
					$filters['patient_master'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 0 AND p.isstandby = 0 AND p.isarchived = 0';
					$source_data['active'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 0 AND p.isstandby = 0 AND p.isarchived = 0';
					break;

				case 'assignedpats':
					if($show_assigned_standby)
					{
						$standby_q = '';
					}
					else
					{
						$standby_q = 'and p.isstandby = 0';
					}

					if($show_discharged_not_dead)
					{
						$filters['patient_master'] = 'p.isdelete = 0 ' . $standby_q . ' and p.isstandbydelete = 0';
						$source_data['assignedpats'] = 'p.isdelete = 0 ' . $standby_q . ' and p.isstandbydelete = 0';
					}
					else
					{
						$filters['patient_master'] = 'p.isdischarged = 0 and p.isdelete = 0 ' . $standby_q . ' and p.isstandbydelete = 0';
						$source_data['assignedpats'] = 'p.isdischarged = 0 and p.isdelete = 0 ' . $standby_q . ' and p.isstandbydelete = 0';
					}

					break;

				case 'discharged':
					$filters['patient_master'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 1 AND p.isarchived = 0';
					$source_data['discharged'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 1 AND p.isarchived = 0';
					break;

				case 'standby':
					$filters['patient_master'] = 'p.isdelete = 0 AND p.isstandbydelete = 0 AND p.isdischarged = 0 AND p.isstandby = 1 AND p.isarchived = 0';
					$source_data['standby'] = 'p.isdelete = 0 AND p.isstandbydelete = 0 AND p.isdischarged = 0 AND p.isstandby = 1 AND p.isarchived = 0';
					$standby_page = true;
					break;

				case 'standbydel':
					$filters['patient_master'] = 'p.isdelete = 0 AND p.isstandbydelete = 1 AND p.isarchived = 0';
					$source_data['standbydel'] = 'p.isdelete = 0 AND p.isstandbydelete = 1 AND p.isarchived = 0';
					break;

				case 'archive':
					$filters['patient_master'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 1 AND p.isarchived = 1';
					$source_data['archive'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 1 AND p.isarchived = 1';
					break;

				default:
					$filters['patient_master'] = '1';
					$source_data['default'] = '1';
					break;
			}

			
			if($_REQUEST['f_hospiz'] == '1')
			{
				$filters['patient_master'] .= ' AND (p.ishospiz = 1 OR p.ishospizverein = 1)';
			}
			else
			{
				$filters['patient_master'] .= ' ';
			}

			if($_REQUEST['f_dob_start'] && $_REQUEST['f_dob_end'])
			{
				$filters['patient_master'] .= ' AND (year(p.birthd) BETWEEN "' . $_REQUEST['f_dob_start'] . '" AND "' . $_REQUEST['f_dob_end'] . '")';
			}
			
// 			print_r($_REQUEST['f_doctor']); exit;
			if($_REQUEST['f_doctor'] && $_REQUEST['f_doctor'] !="0" && strlen($_REQUEST['f_doctor'])>0)
			{
				$filters['patient_master'] .= ' AND p.familydoc_id IN ('.$fdoc_str.') ';
				
			}

			if(!empty($_REQUEST['f_keyword']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(
										AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ",
										AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ",
										e.epid
										) LIKE :keyword )';
			}


			/* ---------  get user's patients by permission   ---------------------------- */
			$user_patients = PatientUsers::getUserPatients($logininfo->userid);

			/* --------- get initial ipids and apply patient master filters ---------------------------- */
			$patient = Doctrine_Query::create()
				->select('p.ipid,e.epid,p.familydoc_id,p.isstandby,p.isdischarged,p.isstandbydelete, p.traffic_status')
				->from('PatientMaster p')
				->where('p.isdelete = 0')
				->andWhere('p.ipid IN (' . $user_patients['patients_str'] . ')');
				if(!empty($_REQUEST['f_keyword']))
				{
					$patient->andWhere($filters['patient_master'],array("keyword"=>"%".$_REQUEST['f_keyword']."%"));
				} else{
					$patient->andWhere($filters['patient_master']);
					
				}
			$patient->leftJoin("p.EpidIpidMapping e");

			if($reqestedTab == "assignedpats")//ISPC-2823
			{
				$patient->leftJoin("e.PatientQpaMapping q");

				if($logininfo->usertype != 'SA')
				{
					$patient->andWhere('q.clientid =e.clientid and q.clientid = ' . $logininfo->clientid . ' and q.userid = ' . $logininfo->userid);
				}
				else
				{
					$patient->andWhere('q.clientid =e.clientid and q.clientid = ' . $logininfo->clientid);
				}
			}
			else
			{
				$patient->andWhere('e.clientid = ' . $logininfo->clientid);
			}


       			
			$patienidt_array = $patient->fetchArray();

			
			//no result for this search... stop script here
			if (count($patienidt_array) == 0) {		
				$this->view->standby_page = $standby_page;
				$this->view->patientlist = array();
				$this->view->current_page = 0;
				$this->view->no_pages = 0;
				$this->view->no_patients = 0;
				$this->view->orderby = $_REQUEST['ord'];
				$this->view->sort = $_REQUEST['sort'];
				$this->view->verdonet_array = array('0' => 'keine', '1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');
				$this->view->srcolor_array = array('0' => 'stsl_keine', '1' => 'stsl_red', '2' => 'stsl_green', '3' => 'stsl_keine');
				
				if ($this->getParam('__action') == 'fetchMobileList') {
				    $this->returnDatatablesEmptyAndExit();
				}
				return false;
			}


			
			

			$cla_array = array();
			$cla_array ['ipid'] =  array_column($patienidt_array, 'ipid');
			if (count($cla_array ['ipid']) == 0) {
				$cla_array ['ipid'] = array();
			}

			//add pflegedienst filter
			if(!empty($_REQUEST['f_pflegedienste']))
			{
			    //TODO-4097 Ancuta 11.05.2021
			    $f_pflegedienste = addslashes(urldecode(trim($_REQUEST['f_pflegedienste'])));
			    //-- 
				$patientipidsarr = $cla_array ['ipid'];
				$patientbypfle = Doctrine_Query::create()
				->select('ipid')
				->from('PatientPflegedienste pp')
				->where('pp.isdelete="0"')
				->leftJoin("Pflegedienstes pf")
				->andwhere('pf.clientid = ?', $logininfo->clientid)
				->andwhere('pp.pflid = pf.id')
				//TODO-4097 Ancuta 11.05.2021
				//->andWhere("pf.nursing like  ? ","%".$_REQUEST['f_pflegedienste']."%")
				->andWhere("trim(lower(pf.nursing)) like ?", "%".trim(mb_strtolower($f_pflegedienste, 'UTF-8'))."%" )
				//--
				->andWhere('pf.isdelete = 0')
				->andWhereIn("pp.ipid", $patientipidsarr);
				$patientbypflearr = $patientbypfle->fetchArray();
				
				$cla_array ['ipid']  = array_column($patientbypflearr, 'ipid');
					
// 				$patienidtarray = $patientbypflearr;
// 				$patienidtarray[9999999] = "xx";
				
			}
			
			//add user filter
			if(!empty($_REQUEST['f_user']) && $_REQUEST['f_user'] != 0 )
			{
				$patientipidsarr = $cla_array ['ipid'];
				$patientuser = Doctrine_Query::create()
				->select('ei.ipid')
				->from('EpidIpidMapping ei')
				->leftJoin("PatientQpaMapping pm")
				->where('ei.epid = pm.epid')
				->andWhere("pm.userid = ?", $_REQUEST['f_user'])
				->andWhereIn("ei.ipid", $patientipidsarr);
				$patientuserarr = $patientuser->fetchArray();
				
				$cla_array ['ipid']  = array_column($patientuserarr, 'ipid');
				
// 				$patienidtarray = $patientuserarr;
// 				$patienidtarray[9999999] = "xx";
			}
			
			//add location filter
			if(!empty($_REQUEST['f_location']))
			{
				$patientipidsarr = $cla_array ['ipid'];
				$patientbyloc = Doctrine_Query::create()
				->select('ipid')
				->from('PatientLocation')
				->where('isdelete="0"')
				->andWhere('location_id = ?', $_REQUEST['f_location'])
				->andWhere("valid_till='0000-00-00 00:00:00'")
				->andWhereIn("ipid", $patientipidsarr)
				->orderBy('id DESC');
				$patientbylocarr = $patientbyloc->fetchArray();
				
				$cla_array ['ipid']  = array_column($patientbylocarr, 'ipid');
				
// 				$patienidtarray = $patientbylocarr;
// 				$patienidtarray[9999999] = "xx";
			}
			
			/* --------------- get discharge methods  ------------------------------------ */
			$dis = new DischargeMethod();
			$discharge_methods = $dis->getDischargeMethod($clientid, 0);
				
			foreach($discharge_methods as $dischargeM)
			{
					
				if($dischargeM['abbr'] == "TOD" || $dischargeM['abbr'] == "TODNA" || $dischargeM['abbr'] == "verstorben"  || $dischargeM['abbr'] == "VERSTORBEN")
				{
					$death_methods[] = $dischargeM['id'];
					$death_description = $dischargeM['description'];
				}
			}
			$death_methods = array_values(array_unique($death_methods));
			
			if(isset($_REQUEST['f_deadafterdischarge']) && $_REQUEST['f_deadafterdischarge'] == '1' || ($show_discharged_not_dead && $reqestedTab == "assignedpats"))//ISPC-2823
			{
				$patientipidsarr = $cla_array ['ipid'];
				$patient_discharge = PatientDischarge::get_patients_discharge($patientipidsarr);
				$death_button_data = PatientDeath::get_patients_death($patientipidsarr);
			}
			
			/* ---------------Entlassene Patienten: show only dead after discharge patients - ISPC-1945   ------------------------------------ */
			if(isset($_REQUEST['f_deadafterdischarge']) && $_REQUEST['f_deadafterdischarge'] == '1')
			{
				//$patientipidsarr = $cla_array ['ipid'];
				//get patients discharge details
				//$patient_discharge = PatientDischarge::get_patients_discharge($patientipidsarr);
				
				//check if method is not in discharge dead
				$dead_patients_ipids[] = '9999999999';
				
				foreach($patient_discharge as $k_pat_dis => $v_pat_dis)
				{
					//get dead patient ipids to be excluded
					if(in_array($v_pat_dis['discharge_method'], $death_methods))
					{
						$dead_patients_ipids[] = $v_pat_dis['ipid'];
					}
				}
				
				//get patients death by death button
				//$death_button_data = PatientDeath::get_patients_death($patientipidsarr);
				
				$death_ipids = array();
				foreach($death_button_data as $k_pat_dead => $v_pat_dead)
				{
					if(!in_array($v_pat_dead['ipid'], $dead_patients_ipids))
					{
						$death_ipids[]['ipid'] = $v_pat_dead['ipid'];
					}
				}
				
				$cla_array ['ipid']  = array_column($death_ipids, 'ipid');
				//var_dump($cla_array); exit;
			}
			
			foreach($patienidt_array as $k=>$v) {
				if ( ! in_array($v['ipid'], $cla_array ['ipid'] )){
					unset($patienidt_array[$k]);
				}
			}
			
			
			
// 			$patient_filter_ipids[] = '999999999';
			$patient_filter_ipids = array();
			foreach($patienidt_array as $k_pat_idtarray => $v_pat_idtarray)
			{
				$patient_filter_ipids[] = $v_pat_idtarray['ipid'];
				$patient2family_docs[$v_pat_idtarray['ipid']] = $v_pat_idtarray['familydoc_id'];
				$family_docs_ids[] = $v_pat_idtarray['familydoc_id'];

				$patient_filter_details[$v_pat_idtarray['ipid']] = $v_pat_idtarray;
			}
			if (count($patient_filter_ipids) == 0) {
				$patient_filter_ipids[] = '999999999';
			}


			/* ---------------Eigene Patienten: show dead patients or not   ------------------------------------ */
			if($show_discharged_not_dead && $reqestedTab == "assignedpats")//ISPC-2823
			{
				//get patients discharge details
				//$patient_discharge = PatientDischarge::get_patients_discharge($patient_filter_ipids);

				//check if method is not in discharge dead
				$dead_patients_ipids[] = '9999999999';
				foreach($patient_discharge as $k_pat_dis => $v_pat_dis)
				{
					//get dead patient ipids to be excluded
					if(in_array($v_pat_dis['discharge_method'], $death_methods))
					{
						$dead_patients_ipids[] = $v_pat_dis['ipid'];
					}
				}

				//get patients death by death button
				//$death_button_data = PatientDeath::get_patients_death($patient_filter_ipids);

				$death_ipids[] = '999999999';
				foreach($death_button_data as $k_pat_dead => $v_pat_dead)
				{
					$death_ipids[] = $v_pat_dead['ipid'];
				}

				$dead_patients_ipids = array_values(array_unique($dead_patients_ipids));
				$dead_patients = array_values(array_unique($dead_patients));
			}			
			
			/* ------------------------ ICONS ------------------------------------ */
			$sys_icons = new IconsMaster();
			$client_icons = new IconsClient();
			$patient_icons = new IconsPatient();

			
			$source_tab_ipid_q = $source_data[$reqestedTab];//ISPC-2823

			if($_REQUEST['icon_sys'])
			{
				$system_icons = $sys_icons->get_system_icons($clientid, $_REQUEST['icon_sys']);
 
				$patientipidsarr[] = '999999999';
				foreach($_REQUEST['icon_sys'] as $k_sys_icon => $v_sys_icon)
				{
					/* ISPC-1775,ISPC-1678 */
					if($v_sys_icon == '42' ){ // register icon - not added to list
						continue;
					}
					if(!empty($v_sys_icon) && !empty($patient_filter_ipids))
					{
					    
    					if($v_sys_icon != '6' && $v_sys_icon != '3' && $v_sys_icon != '43' && $v_sys_icon != '56' && $v_sys_icon != '10002') // 6 patient status, 3 sapv, 43 diagnosis act - module based,56 -pflegegrade, 10002 -Clinic Case
    					{
    						if($v_sys_icon == '25') // family doctor
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, $patient2family_docs);
    						}
    						elseif($v_sys_icon == '31') // diagnosis
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, true);
    						}
    						elseif($v_sys_icon == '32') // medication
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, true);
    						}
    						elseif($v_sys_icon == '37') // assigned_users_icon
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}(false,$source_tab_ipid_q);
    						}
                            elseif($v_sys_icon == '10000') // assigned_bed_icon
                            {
                                $data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, true);
                            }
    						else
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids);
    						}
    					}
    					else
    					{
    					    if(!empty($_REQUEST['icon_sys_status'][$k_sys_icon]))
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, $_REQUEST['icon_sys_value'][$k_sys_icon], $_REQUEST['icon_sys_status'][$k_sys_icon]);
    						}
    						else
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, $_REQUEST['icon_sys_value'][$k_sys_icon]);
    						}
    					}
    
    					$patients_icons_details = $data[$k_sys_icon];
    					$patient_filter_ipids = array(); //reset ipids
    					$patient_filter_ipids = array_merge($patient_filter_ipids, $data[$system_icons[$v_sys_icon]['function']]['ipids']);
					}
				}

				$pat_ipidsarr = $patient_filter_ipids;
			
			} else {
				
				$pat_ipidsarr = $patient_filter_ipids;
				
			}
			$pat_ipidsarr = array_values(array_unique($pat_ipidsarr));

			if($_REQUEST['icon_cust'])
			{
				$pat_ipidsarr = $patient_icons->filter_patient_icons($pat_ipidsarr, $_REQUEST['icon_cust']);
			}

			//finish filtering by icons
				
			
			
			
// 			$patienidtarray[9999999] = "xx";
			$patienidtarray = array();
			foreach($patienidt_array as $k_pat_details => $v_pat_details)
			{
				if(in_array($v_pat_details['ipid'], $pat_ipidsarr))
				{
					$patienidtarray[] = $v_pat_details;
				}
			}
			if (count($patienidtarray) == 0) {
				$patienidtarray[9999999] = "xx";
			}

			
			foreach($patienidtarray as $patientid)
			{
				$patientipidsarr[] = $patientid['ipid'];
			}

// 			$epidsarfinal[] = "xx";
			$epidsarfinal = array();
			foreach($patienidtarray as $epidgg)
			{
				$epidsar = $epidgg['EpidIpidMapping'];
				$epidsarfinal[] = $epidsar['epid'];
			}
			if (count($epidsarfinal) == 0) {
				$epidsarfinal[] = "xx";
			}
				
					
			
			//get patients locations and location order
			if(in_array('7', $user_columns2tab) || in_array('25', $user_columns2tab)) // 25 location_team_leader
			{ // Display only if column location it is needed
				$orderbyloc = new PatientLocation();
				$patlocdet = $orderbyloc->getOrderbyLocation($patienidtarray, $logininfo->clientid);
				
				$orderbylocation = $patlocdet['orderbylocation'];
				$patient2location = $patlocdet['patient2location'];
				$patient2home = $patlocdet['patient2home'];
				$patient2commlocation = $patlocdet['patient2commlocation'];
				$patient2station = $patlocdet['patient2station'];
				
				if(in_array('25', $user_columns2tab)) { // 25 location_team_leader
					$patient2location_id = $patlocdet['patient2location_id'];
					foreach($patient2location_id as $lipid => $plocation_id){
						$used_locations[] = $plocation_id;
					}
				}
				
				if(is_array($orderbylocation))
				{
					foreach($orderbylocation as $obl)
					{
						$orderbylocation_str .= '"' . $obl . '",';
					}
				} else {
				    $orderbylocation_str = '"99999999",';
				}
			}

			
			if(in_array('25', $user_columns2tab)) { // 25 location_team_leader
			
				if(!empty($used_locations)){
					// get alredy assigend users to location
					$users2location_array = Users2Location::get_location_users($used_locations);
					
					$team_leader = "";
					foreach($users2location_array as $k=>$vul){
						$users2location[] = $vul['user'];
						if($vul['leader'] == "1"){
							$location_team_leaders[$vul['location']] = $vul['user'];
						}
					}
					
					if(!empty($users2location)){
						$user_details = User::getUserByClientid($logininfo->clientid);
						foreach($user_details as $k=>$user_data){
							$usr_details[$user_data['id']]['name'] = $user_data['user_title'].' '.$user_data['last_name'].', '.$user_data['first_name']; 
						}
// 						print_r($user_details ); exit;	
						foreach($users2location as $u_id){
							$team_leader_data[$u_id] = $usr_details[$u_id]['name']; 
						}
// 						print_r($team_leader_data); exit;	
					}
					
				}
			}
			
			



			
			//added if to get discharge order+details before or after the pagination takes place
			if (isset($_REQUEST['ord']) && ($_REQUEST['ord'] == 'dis' || $_REQUEST['ord'] == 'dot' )) {
	
				//get patient discharge & dot
				if(($reqestedTab != 'active' && $reqestedTab != 'all' ) || $reqestedTab != 'active')//ISPC-2823
				{
					
					$disdata = new PatientDischarge();
					$dischargedata = $disdata->getPatientsDischargeDetails($patienidtarray, $dis_ord, $sort);

					$client_methode = array();
					foreach($dischargedata as $nr_value)
					{
						foreach($discharge_methods as $name_value)
						{
							if($nr_value['discharge_method'] == $name_value['id'])
							{
								$client_methode[$nr_value['discharge_method']]['name'] = $name_value['description'];
								$client_methode[$nr_value['discharge_method']]['abbr'] = $name_value['abbr'];
							}
						}
					}
	
					// get dead patient -> dead buton
					$disddata = new PatientDeath();
					$patientdeatharray = $disddata->getPatientsDeathDetails($patienidtarray);
	
					foreach($dischargedata as $discharge_key => $discharge_item)
					{
						$orderbydischarge_str .= '"' . $discharge_key . '",';
					} 
										
					if(empty($dischargedata))
					{
					    $orderbydischarge_str = '"99999999",';
					}
				}
	
				
			}
			
			if($reqestedTab == 'standby')
			{
				$disdata = new PatientDischarge();
				$inactive_dischargedata = $disdata->getPatientsInactiveDischargeDetails($patienidtarray, $dis_ord, $sort);
			}
			
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.last_update_user,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,TRIM(CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)) as firstname,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1))  as middlename,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))  as lastname,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1))  as title,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1))  as salutation,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1))  as street1,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1))  as street2,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1))  as zip,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1))  as city,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1)) as phone,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1))  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1)) as kontactnumber";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.last_update_user,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as kontactnumber";
			}

			foreach($patienidtarray as $patientid)
			{
				$patientipidsfinal[] = $patientid['ipid'];
			}


			if($show_discharged_not_dead && $reqestedTab == "assignedpats")//ISPC-2823
			{
				$patientipidsfinal = array_diff($patientipidsfinal, $dead_patients_ipids);
				$patientipidsfinal = array_diff($patientipidsfinal, $death_ipids);
			}
			$patients_count = 0 ;
			foreach($patientipidsfinal as $k=>$pipid){
			    if($pipid != "x"){
			        $patients_count++;
			    }
			}
//			$no_patients = sizeof($patientipidsfinal) - 1; //substract dummy error control result
 			$no_patients = $patients_count;
			$no_pages = ceil($no_patients / $limit);

			switch($_REQUEST['ord'])
			{

				case 'fn':
//					$orderby = 'CONVERT(AES_DECRYPT(p.first_name, "'.Zend_Registry::get('salt').'") using utf8) COLLATE utf8_general_ci ' . $sort;
					$orderby = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci ' . $sort;
					break;

				case 'ln':
//					$orderby = 'CONVERT(AES_DECRYPT(p.last_name, "'.Zend_Registry::get('salt').'") using latin1) COLLATE latin1_german2_ci ' . $sort;
					$orderby = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci ' . $sort;
					break;

				case 'dob':
					$orderby = 'p.birthd ' . $sort;
					break;

				case 'adm':
					$orderby = 'p.admission_date ' . $sort;
					break;

				case 'lastup':
					$orderby = 'p.last_update ' . $sort;
					break;

				case 'dis':
				case 'dot':
					$orderby = 'FIELD(e.ipid, ' . substr($orderbydischarge_str, 0, -1) . '), e.ipid';
					break;

				case 'loc':
					$orderby = 'FIELD(e.ipid, ' . substr($orderbylocation_str, 0, -1) . ') ' . $sort . ', e.ipid';
					break;

				case 'id':
					$orderby = 'e.epid_num ' . $sort;
					break;
					
				case 'traffic_status':
					$orderby = 'p.traffic_status ' . $sort;
					break;

				default:
//					$orderby = 'CONVERT(AES_DECRYPT(p.last_name, "'.Zend_Registry::get('salt').'") using latin1) COLLATE latin1_german2_ci ' . $sort;
					$orderby = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci ' . $sort;
					break;
			}

			//fetch only the ipids needed on this page
			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $patientipidsfinal)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ?', $logininfo->clientid);
			//ISPC-2045 - get kontact-phone, TODO-1280
			$patient->leftJoin("p.PatientContactphone pcp ON p.ipid = pcp.ipid AND pcp.isdelete IN ('0')");
			$patient->addSelect("pcp.phone, pcp.mobile");
				
			$patient->orderby($orderby);
			$patient->offset(($current_page - 1) * $limit);
			$patient->limit($limit);
			$patientlimit = $patient->fetchArray();

			
			//no result for this search... stop script here
			if (count($patientlimit) == 0) {
				$this->view->standby_page = $standby_page;
				$this->view->patientlist = array();
				$this->view->current_page = 0;
				$this->view->no_pages = 0;
				$this->view->no_patients = 0;
				$this->view->orderby = $_REQUEST['ord'];
				$this->view->sort = $_REQUEST['sort'];
				$this->view->verdonet_array = array('0' => 'keine', '1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');
				$this->view->srcolor_array = array('0' => 'stsl_keine', '1' => 'stsl_red', '2' => 'stsl_green', '3' => 'stsl_keine');
			
				
				if ($this->getParam('__action') == 'fetchMobileList') {
				    $this->returnDatatablesEmptyAndExit();
				}
				
				return false;
			}
			
			
			$pat_ipidsarr = array();
			foreach ($patientlimit as $k=>$v) {
				$pat_ipidsarr[] = $v['EpidIpidMapping']['ipid'];
			}
			if (count($pat_ipidsarr) == 0) {
				$pat_ipidsarr[999999999] = '999999999';
			}
			
	
			foreach ($patienidtarray as $k=>$v) {
				if (!in_array($v['ipid'], $pat_ipidsarr)) {
					unset($patienidtarray[$k]);
				}
			}
			if (count($patienidtarray) == 0) {
				$patienidtarray[99999999] = 99999999; 
			}
			
			
			
			
				
			
			// get private patient
			$ppC = Doctrine_Query::create()
			->select('ipid')
			->from('PatientHealthInsurance')
			->whereIn('ipid', $pat_ipidsarr)
			->andWhere('privatepatient = "1"');
			$pPatientsC = $ppC->fetchArray();
			
			$privPatient = array();
			foreach($pPatientsC as $PrivatePatient)
			{
				$privPatient[] = $PrivatePatient['ipid'];
			}
			if (count($privPatient)==0) {
				$privPatient[] = 'xx';
			}	
			
			
			
			
			
			//added if to get discharge order+details before or after the pagination takes place
			if (!isset($_REQUEST['ord']) || ($_REQUEST['ord'] != 'dis' && $_REQUEST['ord'] != 'dot' )) {	
			
				//get patient discharge & dot
				if(($reqestedTab != 'active' && $reqestedTab != 'all' ) || $reqestedTab != 'active')//ISPC-2823
				{
					$disdata = new PatientDischarge();
					$dischargedata = $disdata->getPatientsDischargeDetails($patienidtarray, $dis_ord, $sort);

					$client_methode = array();
					foreach($dischargedata as $nr_value)
					{
						foreach($discharge_methods as $name_value)
						{
							if($nr_value['discharge_method'] == $name_value['id'])
							{
								$client_methode[$nr_value['discharge_method']]['name'] = $name_value['description'];
								$client_methode[$nr_value['discharge_method']]['abbr'] = $name_value['abbr'];
							}
						}
					}
			
					// get dead patient -> dead buton
					$disddata = new PatientDeath();
					$patientdeatharray = $disddata->getPatientsDeathDetails($patienidtarray);

				}
			}
					
			
			
			
			
			$pat_ipids_details = array();
			$patient_ipids_simple = array();
			foreach($pat_ipidsarr as $kp => $vpat_ipid)
			{
				$pat_ipids_details[$vpat_ipid] = $patient_filter_details[$vpat_ipid];
				$patient_ipids_simple[] = $patient_filter_details[$vpat_ipid]['ipid'];
			}
			if(count($pat_ipids_details) == 0)
			{
				$pat_ipids_details[] = "XXX";
			}
			if(count($patient_ipids_simple) == 0)
			{
				$patient_ipids_simple[] = "XXX";
			}
			foreach ($patient_ipids_simple as $k=>$v){
				if ( $v == ""){
					unset($patient_ipids_simple[$k]);
				}
			}
			foreach ($pat_ipids_details as $k=>$v){
				if ( $v == ""){
					unset($pat_ipids_details[$k]);
				}
			}
				
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("67", $clientid))
			{
				$sgbvperms = true;
			}
			else
			{
				$sgbvperms = false;
			}
			
			if($logininfo->usertype != 'SA')
			{
				//use mastergroupid not groupid
				$allowed_icons = GroupIconsDefaultPermissions::getGroupAllowedIcons($master_group, $clientid);
			}
			else
			{
				//$allowed_icons = false;
				$allowed_icons = array(
				    'system' => false,
				    'custom' => false
				);
			}
			
			$this->view->allowed_icons = $allowed_icons;
			
			
			$all_system_icons = $sys_icons->get_system_icons($clientid);
				
			// 			print_r($all_system_icons) ; exit;
			/* ISPC-1775,ISPC-1678 */
			foreach($all_system_icons as $sid=>$sdata){
				if($sid == "42"){
					unset($all_system_icons['42']);// register icon - not added to list
				}
			}
				
			foreach($all_system_icons as $k_all_sys_icons => $v_all_sys_icons)
			{
				if($k_all_sys_icons == '26' && $sgbvperms)
				{
					$system_icons_perms[$k_all_sys_icons] = $v_all_sys_icons;
				}
				else if($k_all_sys_icons != '26')
				{
					$system_icons_perms[$k_all_sys_icons] = $v_all_sys_icons;
				}
			}
			
			$this->view->sys_icons = $system_icons_perms;
			$this->view->client_icons = $client_icons->get_client_icons($clientid);
			
			/**
			 * the next foreach was/is the problem of slower query ... fix functions inside
			 */
			//get system icon column data!
			$icons_data = array();
			foreach($all_system_icons as $ks_sys_icon => $vs_sys_icon)
			{
				if($vs_sys_icon['function'] == 'go_to_visitform') //exclude visitform icon from filtering
				{
					continue;
				}
				
				$icon_result = array();
				
				if($vs_sys_icon['function'] == "get_patients_status")
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipids_details, false, false, $details_included = true);
				}
				elseif($vs_sys_icon['function'] == "get_patient_medication")
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($patient_ipids_simple, true);
				}
				elseif($vs_sys_icon['function'] == "get_patient_diagnosis")
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($patient_ipids_simple, true);
				}
				elseif($vs_sys_icon['function'] == "get_patients_assigned_users")
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipidsarr, $source_tab_ipid_q);
				}
				elseif($vs_sys_icon['function'] == "get_patient_healthinsurance")
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipidsarr, $source_tab_ipid_q);
				}
				else
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipidsarr);
				}
		
				if($icon_result)
				{
					$icons_data = array_merge_recursive($icons_data, $icon_result);
		
					$patients_icons_details[$ks_sys_icon] = $icons_data['ipids'];
					$patients_icons_details[$ks_sys_icon] = array_values(array_unique($icon_result['ipids']));
				}
			}

			
			//reverse previous arr $patients_icons_details and construct mapped array
			foreach($patients_icons_details as $id_sys_icon => $icon_ipids)
			{
				if(is_numeric($id_sys_icon)) //make sure this key is always numeric... no need for others
				{
					foreach($icon_ipids as $k_icon_ipid => $v_icon_ipid)
					{
						if($v_icon_ipid != '999999999')
						{
							$patient_icons_data[$v_icon_ipid]['icons_system'][] = $id_sys_icon;
						}
					}
				}
			}
			
			//get custom icons for all patients
			$c_custom_icons = $patient_icons->get_patient_icons($pat_ipidsarr);
			
			foreach($c_custom_icons as $k_col_cust_icons => $v_col_cust_icons)
			{
				$patient_icons_data[$v_col_cust_icons['ipid']]['icons_custom'][] = $v_col_cust_icons['icon_id'];
			}
			
				
			
			
			$pat_limit_ipids = array();
			foreach($patientlimit as $k_pat_limit => $v_pat_limit)
			{
				$pat_limit_ipids[] = $v_pat_limit['EpidIpidMapping']['ipid'];
				$pat_limit_epids[] = $v_pat_limit['EpidIpidMapping']['epid'];

				if(strlen($v_pat_limit['street1']) > 0)
				{
					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['street1'] . '<br />';
				}
				if(strlen($v_pat_limit['zip']) > 0)
				{
					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['zip'] . ' ';
				}
				if(strlen($v_pat_limit['city']) > 0)
				{
					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['city'];
				}

				$parient_address[$v_pat_limit['EpidIpidMapping']['ipid']] = $address[$v_pat_limit['EpidIpidMapping']['ipid']];
			}

			if(count($pat_limit_ipids) == '0')
			{
				$pat_limit_ipids[] = '999999999';
			}

			if(in_array('21', $user_columns2tab))
			{ // if the diagnosis column is checked - then get data
				/* ----------------- Diagnosis --------------------------- */
				//Get Main diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$type_id_array[] = $valdia['id'];
				}
				if(empty($type_id_array))
				{
					$type_id_array[] = "0";
				}
				// Get patients - main diagnosis
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->get_multiple_patients_diagnosis($pat_limit_ipids, $type_id_array);


				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
			}

			if(in_array('23', $user_columns2tab))
			{ // if the family_doctor column is checked - then get data
				/* ----------------- Diagnosis --------------------------- */
				// Get patients - main diagnosis
				$fd = new FamilyDoctor();
				$family_doctors_details = $fd->get_family_doctors_multiple($family_docs_ids,false, true); // true -> get family doctor details (street,zip,city, phone, fax)
				
			}

			/* ---------------- get Treated by -------------------------- */
			if(in_array('10', $user_columns2tab))
			{ // Get data- only if the column is needed
				$qpas = new PatientQpaMapping();
// 				$patientqpa = $qpas->get_patient_assigned_doctors($pat_limit_epids, $logininfo->clientid, "names"); // Get assigned for patients shown on page
				$patientqpa = $qpas->get_patient_assigned_doctors_ps($pat_limit_epids, $logininfo->clientid); // Get assigned for patients shown on page
			}
			
			/* ---------------- get last contact form date -------------------------- */
			if(in_array('26', $user_columns2tab))
			{ // Get data- only if the column is needed				
				$deleted_visits = Doctrine_Query::create()
				->select("id, recordid, tabname")
				->from('PatientCourse')
				->wherein('ipid',$pat_limit_ipids)
				->andWhere('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'" . '')
				->andWhere('source_ipid = ""');
				$deleted_visits_array = $deleted_visits->fetchArray();
				 
				$del_visits['contact_form'][] = '9999999999';
				 
				foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
				{
					$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
				}
				
				
				$select = Doctrine_Query::create()
// 				->select('*')
				->select('id, ipid, date,billable_date')
				->from('ContactForms')
				->wherein('ipid',$pat_limit_ipids)
				->andWhereNotIn('id',$del_visits['contact_form'])
				->andWhere('parent = "0"')
				->wherein('create_user',$doctor_users)
				->orderby('ipid, date ASC');
				$select_res = $select->fetchArray();
				
				if($select_res)
				{
				  foreach($select_res as $k_cf => $v_cf)
				  {
				  	$select_res_ipid[$v_cf['ipid']][] = $v_cf;
				  }
				  
				  foreach($select_res_ipid as $k_date_item => $v_date_items)
				  {
				  	$last_date_item = end($v_date_items);
				  	$patient_last_date[$last_date_item['ipid']] =date('d.m.Y', strtotime($last_date_item['billable_date']));
				  }
				  
				}

			}	
			

			/* ---------------- get Nursing service -------------------------- */
			if(in_array('27', $user_columns2tab))
			{ // Get data- only if the column is needed
				$pfle = new PatientPflegedienste();
				$pfledata = $pfle->get_multiple_patient_pflegedienste($pat_limit_ipids);
				
				$pat_nursing_service = array();
				foreach($pfledata['results'] as $pfl_k=>$val_pfles)
			
				{
					foreach($val_pfles as $val_pfle) 
					
					{
						$pat_nursing_service[$pfl_k][] = $val_pfle['nursing']; // Formezi arrayul avand ca cheie ipid-ul pacientului
					}
					
				}
				
			}
			
			/* ---------------- get VW -------------------------- */ 
			if(in_array('28', $user_columns2tab))
			{ // Get data- only if the column is needed
				$vws = new PatientVoluntaryworkers();			
				$vwsdata = $vws->get_patient_voluntaryworkers($pat_limit_ipids, true);			
				
				$pat_vws = array();
				foreach($vwsdata as $vwdata)
					
				{
					if($vwdata['master']['phone'] == '') {
						$pat_vws[$vwdata['ipid']][] = $vwdata['master']['first_name']." ".$vwdata['master']['last_name'];
					}
					else
					{
						$pat_vws[$vwdata['ipid']][] = $vwdata['master']['first_name']." ".$vwdata['master']['last_name'].", ".$vwdata['master']['phone']; // array avand ca cheie ipid-ul pacientului
					}
						
				}
			}
			
			/* ---------------- get Health Insurance -------------------------- */
			if(in_array('29', $user_columns2tab))
			{ 
				// Get data- only if the column is needed
					$pat_health_insurance = array();
    			
    				$healthinsurance = new PatientHealthInsurance();
    				$healthinsurancedata = $healthinsurance->get_multiple_patient_healthinsurance($pat_limit_ipids);
    				
    				foreach($healthinsurancedata as $hli_k=>$val_hli)
    				{
    						$pat_health_insurance[$hli_k][] = $val_hli['company_name'];
    						// array key = patient ipid
    				}
			}
			
			/* ---------------- get patient sapv statuses START ---------------------------------------- */
			$paths = new OrgPaths();
			$client_paths = $paths->get_paths($logininfo->clientid);
			if($client_paths)
			{
				//		multiple ipids
				$data = array();
				$executed_functions = array();
				foreach($client_paths as $k_c_path => $v_c_path)
				{
					if(!in_array($v_c_path['function'], $executed_functions))
					{

						if(empty($data))
						{
							$data = array();
						}

						$executed_functions[] = $v_c_path['function'];
						$retrived_data = $paths->{$v_c_path['function']}($pat_limit_ipids);
						if($retrived_data)
						{
							$data = array_merge_recursive($data, $retrived_data);
						}
					}
				}

				foreach($data as $k_ipid => $v_function_data)
				{
					if($k_ipid != '999999999')
					{
						foreach($v_function_data as $k_function => $v_function_arr)
						{
							foreach($v_function_arr as $k_short => $v_short_status)
							{
								if($v_short_status['status'] != "gray" && $v_short_status['status'] != "green")
								{
									if($advance[$k_ipid][$k_function] == "1" || count($advance[$k_ipid][$k_function]) == '0')
									{
										if($k_function != 'admission_todo')
										{
											$last_status[$k_ipid][$k_function]['shortcut'] = $k_short;
											$last_status[$k_ipid][$k_function]['status'] = $v_short_status['status'];

											if($v_short_status['status'] == "red")
											{
												$advance[$k_ipid][$k_function] = 0;
											}
											else
											{
												$advance[$k_ipid][$k_function] = 1;
											}
										}
										else
										{
											$adm_data['shortcut'] = $k_short;
											$adm_data['status'] = $v_short_status['status'];

											$last_status[$k_ipid][$k_function][] = $adm_data;
										}
									}
								}
							}
						}
					}
				}
			}

			/* ---------------------------------------- get patient sapv statuses END ---------------------------------------- */
			$sapv = new SapvVerordnung();
			$patient_sapv_data = $sapv->get_today_active_highest_sapv($pat_limit_ipids);
// print_r($patientlimit);exit;
			foreach($patientlimit as $key => $patient_item)
			{
				$patientlimit[$key]['enc_id'] = Pms_Uuid::encrypt($patient_item['id']);

				//add VV
				if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $patient_sapv_data['last']))
				{
					$verd_replacer = array("1", "2", "3", "4");
					$verd_values = array("B", "K", "TV", "VV");

					$patientlimit[$key]['verordnet'] = str_replace($verd_replacer, $verd_values, $patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['verordnet']);
					$patientlimit[$key]['status'] = $patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['status'];
				}
				else
				{
					$patientlimit[$key]['verordnet'] = 'keine';
					$patientlimit[$key]['status'] = '';
				}

				//add VV - period
				if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $patient_sapv_data['last']))
				{

					$patientlimit[$key]['sapv_period'] = date('d.m.Y', strtotime($patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['verordnungbis']));
				}
				else
				{
					$patientlimit[$key]['sapv_period'] = ' - ';
				}

				//add trafic status
				if(!empty($patient_item['traffic_status']) && $patient_item['traffic_status'] != '0')
				{

					if($patient_item['traffic_status'] == 1)
					{
						$traffic_status_img = '/images/traffic_g_light.png';
					}
					if($patient_item['traffic_status'] == 2)
					{
						$traffic_status_img = '/images/traffic_y_light.png';
					}
					if($patient_item['traffic_status'] == 3)
					{
						$traffic_status_img = '/images/traffic_r_light.png';
					}
					$patientlimit[$key]['traffic_status'] = $traffic_status_img;
				}
				else
				{
					$patientlimit[$key]['traffic_status'] = '-';
				}

				//add private patient
				if(in_array($patient_item['EpidIpidMapping']['ipid'], $privPatient))
				{

					$patientlimit[$key]['privatepatient'] = '1';
				}
				else
				{
					$patientlimit[$key]['privatepatient'] = '-';
				}
				$patientlimit[$key]['epid'] = $patient_item['EpidIpidMapping']['epid'];

				//add location
				if(in_array('7', $user_columns2tab))
				{// Show only if column needed
				    $patientlimit[$key]['location_name'] = "";
					if(!empty($patient2location[$patient_item['EpidIpidMapping']['ipid']]))
					{
						if(in_array($patient_item['EpidIpidMapping']['ipid'], $patient2home))
						{
							$patientlimit[$key]['location_name'] = $patient2location[$patient_item['EpidIpidMapping']['ipid']] . '<br/>' . $parient_address[$patient_item['EpidIpidMapping']['ipid']];
						}
						else
						{
							$patientlimit[$key]['location_name'] = $patient2location[$patient_item['EpidIpidMapping']['ipid']];
						}

						if(!empty($patient2station[$patient_item['EpidIpidMapping']['ipid']])){
							$patientlimit[$key]['location_name'] .= '<div class="list_location_station" > - '.$patient2station[$patient_item['EpidIpidMapping']['ipid']].'</div>';
						}
						
						if(!empty($patient2commlocation[$patient_item['EpidIpidMapping']['ipid']])){
							$patientlimit[$key]['location_name'] .= '<div class="list_location_comment" >'.$patient2commlocation[$patient_item['EpidIpidMapping']['ipid']].'</div>';
						}

					}
					else
					{
						$patientlimit[$key]['location_name'] = '-';
					}
					$patientlimit[$key]['location'] = $patientlimit[$key]['location_name'];
				}

				//add location team lider
				if(in_array('25', $user_columns2tab))
				{// Show only if column needed
					if(!empty($patient2location_id[$patient_item['EpidIpidMapping']['ipid']]))
					{
						
						$patientlimit[$key]['location_team_leader'] = $team_leader_data[$location_team_leaders[$patient2location_id[$patient_item['EpidIpidMapping']['ipid']]]];
					}
					else
					{
						$patientlimit[$key]['location_team_leader'] = '-';
					}
					
					//$location_team_leaders
					
				}

				//add dot
				if($dischargedata[$patient_item['EpidIpidMapping']['ipid']]['dot'] > 0)
				{
					$patientlimit[$key]['dot'] = $dischargedata[$patient_item['EpidIpidMapping']['ipid']]['dot'];
				}
				else
				{
					$patientlimit[$key]['dot'] = '-';
				}

				//add discharge date
				$patient_discharge = '';
				$patient_discharge = $dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_date'];

				if(!empty($patient_discharge) && $patient_discharge != '00.00.0000')
				{
					$patientlimit[$key]['discharge_date'] = date('d.m.Y', strtotime($patient_discharge));
				}
				else
				{
					$patientlimit[$key]['discharge_date'] = "-";
				}

				//add treated by
				if(in_array('10', $user_columns2tab))
				{ // Get data- only if the column is needed
					$treatedby_str = "";
					if(!empty($patientqpa[$patient_item['EpidIpidMapping']['epid']]))
					{
						foreach($patientqpa[$patient_item['EpidIpidMapping']['epid']] as $val)
						{
							$treatedby_str .= $val . '<br/>';
						}
						$patientlimit[$key]['treatedby'] = $treatedby_str;
					}
					else
					{
						$patientlimit[$key]['treatedby'] = '-';
					}
				}

				//last update
				if(!empty($patient_item['last_update']) && $patient_item['last_update'] != '00-00-0000 00:00:00')
				{
					
				   $patientlimit[$key]['last_update'] = date('d.m.Y H:i', strtotime($patient_item['last_update'])).' '.$user_detailss[$patient_item['last_update_user']] ;
				   
				}
				else
				{
					$patientlimit[$key]['last_update'] = '-';
				}

				//send to archiv (only for discharge patients)
				if($patient_item['isdischarged'] == '1' && $patient_item['isarchived'] != '1')
				{
					$patientlimit[$key]['sendtoarchiv'] = '1';
				}
				else
				{
					$patientlimit[$key]['sendtoarchiv'] = '-';
				}

				//send to discharge (only for discharge patients in archiv)
				if($patient_item['isdischarged'] == '1' && $patient_item['isarchived'] == '1')
				{
					$patientlimit[$key]['sendtodischarge'] = '1';
				}
				else
				{
					$patientlimit[$key]['sendtodischarge'] = '-';
				}

				//reactivate patient or show dead method
				if($patient_item['isdischarged'] == '1' && $dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method'] > 0)
				{
					if(strtolower($client_methode[$dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method']]['abbr']) != 'tod' && strtolower($client_methode[$dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method']]['abbr']) != 'verstorben')
					{
						$patientlimit[$key]['notdead'] = '1';
					}
					else
					{
						$patientlimit[$key]['notdead'] = '0';
						$patientlimit[$key]['dead_reactivate'] = $client_methode[$dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method']]['name'];
						$patientlimit[$key]['traffic_status'] = '-';
					}
				}
				else
				{
					$patientlimit[$key]['dead_reactivate'] = '-';
				}

				// check if patient is dead in Patientdeath
				if($patientdeatharray[$patient_item['EpidIpidMapping']['ipid']]['death_date'] != null)
				{
					$patientlimit[$key]['death_date'] = $patientdeatharray[$patient_item['EpidIpidMapping']['ipid']]['death_date'];
					$patientlimit[$key]['dead_reactivate'] = $death_description; ////overwrite the previous setting in patient is dead (btn)
					$patientlimit[$key]['notdead'] = '0'; //overwrite the previous setting in patient is dead (btn)
					$patientlimit[$key]['traffic_status'] = '-';
				}

				//admit patient from standby
				if($patient_item['isstandby'] == '1')
				{
					$patientlimit[$key]['admitfromstandby'] = '1';
				}
				else
				{
					$patientlimit[$key]['admitfromstandby'] = '-';
				}

				// send deleted stanby back to standbylist
				if($patient_item['isstandbydelete'] == '1' && $patient_item['isdelete'] != '1')
				{
					$patientlimit[$key]['deletestandby'] = '1';
				}
				else
				{
					$patientlimit[$key]['deletestandby'] = '-';
				}

				if(!empty($patient_icons_data[$patient_item['EpidIpidMapping']['ipid']]['icons_system']))
				{
					$patientlimit[$key]['icons'] = $patient_icons_data[$patient_item['EpidIpidMapping']['ipid']];
					$patientlimit[$key]['icons']['icons_system'] = array_unique($patientlimit[$key]['icons']['icons_system']);
				}

				$patientlimit[$key]['icon_data'] = $icons_data[$patient_item['EpidIpidMapping']['ipid']];
				$patientlimit[$key]['icon_data']['last'] = $icons_data['last'][$patient_item['EpidIpidMapping']['ipid']];
				$patientlimit[$key]['icon_data']['last_diagno_act'] = $icons_data['last_diagno_act'][$patient_item['EpidIpidMapping']['ipid']];
				$patientlimit[$key]['icon_data']['current_maintenancestage'] = $icons_data['current_maintenancestage'][$patient_item['EpidIpidMapping']['ipid']];
				$patientlimit[$key]['icon_data']['memo'] = $icons_data['memo_data'][$patient_item['EpidIpidMapping']['ipid']]['memo'];
				$patientlimit[$key]['icon_data']['allergies'] = $icons_data['allergies_data'][$patient_item['EpidIpidMapping']['ipid']]['allergies'];
				//ispc-1533
				if (!empty ($icons_data['tourplan_settings'][$patient_item['EpidIpidMapping']['ipid']])){
					$patientlimit[$key]['icon_data']['tourplan_settings'] = $icons_data['tourplan_settings'][$patient_item['EpidIpidMapping']['ipid']] ;
					$patientlimit[$key]['icon_data']['tourplan_settings_users'] = $icons_data['tourplan_settings_users'];
				}
				//ISPC-1897 germination = bacteria icon
				if (!empty ($icons_data['germination_status'][$patient_item['EpidIpidMapping']['ipid']])){
					$patientlimit[$key]['icon_data']['germination_status'] = $icons_data['germination_status'][$patient_item['EpidIpidMapping']['ipid']];
				}
                //Transfer ISPC clinic to ISPC //Maria:: Migration CISPC to ISPC 22.07.2020
                if (!empty ($icons_data['calculate_image'][$patient_item['EpidIpidMapping']['ipid']])){
                    $patientlimit[$key]['icon_data']['calculate_image'] = $icons_data['calculate_image'][$patient_item['EpidIpidMapping']['ipid']];
                }
				
                //IM-12
                if (!empty ($icons_data['clinic_case_icon'][$patient_item['EpidIpidMapping']['ipid']])){
                    $patientlimit[$key]['icon_data']['clinic_case_icon'] = $icons_data['clinic_case_icon'][$patient_item['EpidIpidMapping']['ipid']];
                }
				
				if($client_paths)
				{
					// display organisation statuses
					if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $last_status))
					{
						foreach($last_status[$patient_item['EpidIpidMapping']['ipid']] as $k_path => $v_data)
						{
							if($k_path != 'admission_todo')
							{
								$patientlimit[$key]['org_shortcuts'][] = $v_data['shortcut'];
								$patientlimit[$key]['org_color'][] = $v_data['status'];
							}
							else
							{
								foreach($v_data as $k_arr_adm => $v_arr_adm)
								{
									$patientlimit[$key]['org_shortcuts'][] = $v_arr_adm['shortcut'];
									$patientlimit[$key]['org_color'][] = $v_arr_adm['status'];
								}
							}
						}
					}
					else
					{
						$patientlimit[$key]['org_shortcuts'][] = '';
						$patientlimit[$key]['org_color'][] = '';
					}
				}
				else
				{
					$patientlimit[$key]['org_shortcuts'][] = '';
					$patientlimit[$key]['org_color'][] = '';
				}

				// display or not the diagnosis column
				if(in_array('21', $user_columns2tab))
				{
					//add main diagnosis
					if(!empty($diagnosisarr[$patient_item['EpidIpidMapping']['ipid']]))
					{

						$patientlimit[$key]['diagnosis'] = $diagnosisarr[$patient_item['EpidIpidMapping']['ipid']];
					}
					else
					{
						$patientlimit[$key]['diagnosis'] = '-';
					}
				}

				// display or not the family_doctor column
				if(in_array('23', $user_columns2tab))
				{
					//add family_doctor
					if(strlen($family_doctors_details[$patient2family_docs[$patient_item['EpidIpidMapping']['ipid']]]) > 0)
					{

						$patientlimit[$key]['family_doctor'] = $family_doctors_details[$patient2family_docs[$patient_item['EpidIpidMapping']['ipid']]];
					}
					else
					{
						$patientlimit[$key]['family_doctor'] = '-';
					}
				}
				// display or not the kontactnumber column
				if(in_array('24', $user_columns2tab))
				{
					//ISPC-2045 -TODO-1280
					if ( ! empty($patient_item['PatientContactphone']) ) {
						$PatientContactphone = array_column($patient_item['PatientContactphone'], 'phone_number');
						$patientlimit[$key]['contact_number'] = implode("; ", $PatientContactphone);
					} else {
						$patientlimit[$key]['contact_number'] = $patient_item['kontactnumber'];
					}
				}
				
				
				// display or not the column
				if(in_array('26', $user_columns2tab))
				{
					$patientlimit[$key]['lastdate_contactform'] = $patient_last_date[$patient_item['EpidIpidMapping']['ipid']];
				}
				
				// display or not the column
				if(in_array('27', $user_columns2tab))
				{
					
				//$nursing_service = "";
					/* if(!empty($pfledata['results'][$patient_item['EpidIpidMapping']['ipid']]))
					{
						foreach($pfledata['results'][$patient_item['EpidIpidMapping']['ipid']] as $val_pfle)
						{
							$nursing_service .= $val_pfle['nursing'] . ', ';
						}
						$patientlimit[$key]['nursing_service'] = $nursing_service;
					}
					else
					{
						$patientlimit[$key]['nursing_service'] = '-';
					} */
					
					if(!empty($pat_nursing_service[$patient_item['EpidIpidMapping']['ipid']])){
						$patientlimit[$key]['nursing_service'] = implode(", ",$pat_nursing_service[$patient_item['EpidIpidMapping']['ipid']]);
					}
					else
					{
						$patientlimit[$key]['nursing_service'] = '-';
					}
					
					
					
				}
				
				// display or not the column
				if(in_array('28', $user_columns2tab))
				{
						
					if(!empty($pat_vws[$patient_item['EpidIpidMapping']['ipid']])){
						$patientlimit[$key]['voluntary'] = implode(";<br/ >",$pat_vws[$patient_item['EpidIpidMapping']['ipid']]);
					}
					else
					{
						$patientlimit[$key]['voluntary'] = '-';
					}	
						
				}
				
				if($reqestedTab == 'standby')
				{
					if($inactive_dischargedata[$patient_item['EpidIpidMapping']['ipid']]){
// 						$patientlimit[$key]['last_discharge'] = strtotime($inactive_dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_date_full']);

// 						$patientlimit[$key]['last_discharge'] = date('d.m.Y',strtotime($inactive_dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_date_full']));
						$patientlimit[$key]['last_discharge'] = date("d.m.Y", strtotime('+1 day', strtotime($inactive_dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_date_full'])));
					}
				}
				
				if(in_array('29', $user_columns2tab))
				{
				
					if(!empty($pat_health_insurance[$patient_item['EpidIpidMapping']['ipid']])){
						$patientlimit[$key]['health_insurance'] = implode(";<br/ >",$pat_health_insurance[$patient_item['EpidIpidMapping']['ipid']]);
					}
					else
					{
						$patientlimit[$key]['health_insurance'] = '-';
					}
				
				}				
				//TODO-3901 Ancuta 28.05.2021
				if(in_array('30', $user_columns2tab))
				{
				    $patient_address="";
				    $patient_address .= $patient_item['street1'] ;
				    $patient_address .= '<br/>'. $patient_item['zip'].' '.$patient_item['city'] ;
				    $patientlimit[$key]['patient_address_details'] = $patient_address;
				}	
				//--
			}

// 			dd($system_columns);
			
			// recreate - array for new design
			$data = array();
			$row = 1;
			$i = 1;
			foreach($patientlimit as $k_row =>$pdata){
			    
			    $patient_item = $pdata;
			    $patient_link = APP_BASE.'patientcourse/patientcourse?id='.$patient_item['enc_id'];
			    $reactivate_patient_link = APP_BASE.'patient/patientmasteredit?id='.$patient_item['enc_id'];
			    $activate_patient_link = "'".APP_BASE.'patient/patientstandbylist?id='.$patient_item['enc_id'].'&activate=1&last_discharge='.$patient_item['last_discharge']."'";
			    
			    
			    $patient_enc_id_str = "'".$patient_item['enc_id']."'";
			    
			    foreach ($system_columns as $k =>$colinfo){
			        
			        if($colinfo['columnName'] == 'epid'){
			            $pdata[$colinfo['columnName']] = $pdata['EpidIpidMapping']['epid'];
			        } elseif($colinfo['columnName'] == 'dateofbirth'){
			            $pdata[$colinfo['columnName']] = date('d.m.Y',strtotime($pdata['birthd']));
			        } elseif($colinfo['columnName'] == 'admissiondate'){
			            $pdata[$colinfo['columnName']] = date('d.m.Y H:i',strtotime($pdata['admission_date']));
			        } elseif($colinfo['columnName'] == 'lastupdate'){
			            $pdata[$colinfo['columnName']] =  $pdata['last_update'];
			        } elseif($colinfo['columnName'] == 'dischargedate'){
			            $pdata[$colinfo['columnName']] = $pdata['discharge_date'];
			        } elseif($colinfo['columnName'] == 'location'){
			            $pdata[$colinfo['columnName']] = $pdata['location_name'];
			            
			        } elseif($colinfo['columnName'] == 'Verordnung'){
    			        //   col 8
			            $pdata[$colinfo['columnName']] = $pdata['verordnet'];
			        } elseif($colinfo['columnName'] == 'daystreated'){
			            $pdata[$colinfo['columnName']] = $pdata['dot'];
			        } elseif($colinfo['columnName'] == 'lastupdate'){
    			        // col 11
			            $pdata[$colinfo['columnName']] = date('d.m.Y H:i',strtotime($pdata['last_update']));
			        } else if($colinfo['columnName'] == 'movetoarchive'){
			        //col-12 
			            if($pdata['sendtoarchiv'] == '1'){
    			            $pdata[$colinfo['columnName']] = '<input type="checkbox" value="'.$pdata['enc_id'].'" class="archiv" rel="'.$i.'" />';
			            } else{
    			            $pdata[$colinfo['columnName']] = '-';
			            }
			        } elseif($colinfo['columnName'] == 'movefromarchivtodischarge'){
			            //col-13
			            if($pdata['sendtodischarge'] == '1'){
			                $pdata[$colinfo['columnName']] = '<input type="checkbox" value="'.$pdata['enc_id'].'" class="activate" rel="'.$i.'" />';
			            } else{
			                $pdata[$colinfo['columnName']] = '-';
			            }
			        } else if($colinfo['columnName'] == 'reactivatepatient'){
                        //col-15
			            if($pdata['notdead'] == '1'){
			                $pdata[$colinfo['columnName']] = '<a href="'.$reactivate_patient_link.'">'.$this->translate('reactivate').'</a>';
			            } else{
			                $pdata[$colinfo['columnName']] = $pdata['dead_reactivate'];
			            }
			        } 
			        else if($colinfo['columnName'] == 'restandby'){
                        //col-16
			            if($pdata['deletestandby'] == '1'){
			                $pdata[$colinfo['columnName']] = '<a href="javascript:void(0);" onclick="deletereconfirm('.$patient_enc_id_str.', '.$i.')">'.$this->translate('restandby').'</a>';
			            } else{
			                $pdata[$colinfo['columnName']] = '-';
			            }
			        } 
			        else if($colinfo['columnName'] == 'removefromstandby'){
                        //col-17
			            if($pdata['admitfromstandby'] == '1'){
			                $pdata[$colinfo['columnName']] = '<a href="javascript:void(0);" onclick="deleteconfirm('.$patient_enc_id_str.', '.$i.')">'.$this->translate('remove').'</a>';
			            } else{
			                $pdata[$colinfo['columnName']] = '-';
			            }
			        } 
			        else if($colinfo['columnName'] == 'admitformstandby'){
                        //col-18
			            if($pdata['admitfromstandby'] == '1'){
			                $pdata[$colinfo['columnName']] = '<a href="javascript:void(0);" onclick="DoNav('.$activate_patient_link.');" class="modal">'.$this->translate('reactivate').'</a>';
			            } else{
			                $pdata[$colinfo['columnName']] = '-';
			            }
			        }
			        
			        else if($colinfo['columnName'] == 'lastname'){
			            if (isset($_COOKIE['mobile_ver']) && $_COOKIE['mobile_ver'] == 'yes')
			            {
			            
			            }
			            else
			            {
                            //col-2
            				 $pdata[$colinfo['columnName']]= '<div class="icons">';
                			 foreach($patient_item['icons']['icons_system'] as $k_icons_item=>$v_item){
                			     if($v_item == '6' && (in_array($v_item, $allowed_icons['system']) || $this->usertype == "SA")){//TODO-3573 Ancuta 06.11.2020
                					 if(!empty($patient_item['icon_data']['show']['image'])){
                					     $pdata[$colinfo['columnName']] .='<img src="'.APP_BASE.'icons_system/'.$patient_item['icon_data']['show']['image'].'" title="'.$this->translate($patient_item['icon_data']['show']['name']).'"  />';
                					 }else{
                					     $pdata[$colinfo['columnName']] .='<p> &nbsp; </p>';
                					}
                				}
                			 }

                			if($patient_item['privatepatient']=='1'){
                			    $pdata[$colinfo['columnName']] .='&nbsp; <img src="'.RES_FILE_PATH.'/images/pv1.png" width="19px" border="0" alt="" />';
                			}
                            $pdata[$colinfo['columnName']] .='</div>';
			            }

            			$pdata[$colinfo['columnName']] .= '<div class="value">'.$patient_item['lastname'].'</div>';
    			            
			        }

			        //$patientlimit[$k_row][$colinfo['columnName']] = $pdata[$colinfo['columnName']];
			        
			        //TODO-3577 Ancuta 06.11.2020
			        if($colinfo['columnName'] !="restandby"
			            && $colinfo['columnName'] !="movefromarchivtodischarge"
			            && $colinfo['columnName'] !="movetoarchive"
			            && $colinfo['columnName'] !="admitformstandby"
			            && $colinfo['columnName'] !="removefromstandby"
			            && $colinfo['columnName'] !="reactivatepatient"	
			            && $colinfo['columnName'] !="icons"	
			            )
			        {
    			        $patientlimit[$k_row][$colinfo['columnName']] = '<a href="'.$patient_link.'">'.$pdata[$colinfo['columnName']].'</a>';;
			        } else{
			            $patientlimit[$k_row][$colinfo['columnName']] = $pdata[$colinfo['columnName']];
			        }
			        //-- 
			    }
			    $i++;
 			}
 			
 			
			$this->view->standby_page = $standby_page;
// print_r($patientlimit); exit;
			$this->view->patientlist_data = $data;
			$this->view->patientlist = $patientlimit;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_patients = $no_patients;
			$this->view->current_tab_count = $no_patients;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->verdonet_array = array('0' => 'keine', '1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');
			$this->view->srcolor_array = array('0' => 'stsl_keine', '1' => 'stsl_red', '2' => 'stsl_green', '3' => 'stsl_keine');

			
			
			//ISPC-2479
			if(count($_REQUEST['columns']) != "0" && $_REQUEST['savecols'] == "1")
			{ //save

// 			print_R($allTabsColumns[$tabs[$reqestedTab]]); exit;
				foreach($allTabsColumns[$tabs[$reqestedTab]] as $k => $cid)
				{
					$column_array[] = $cid;
				}
				if(!empty($column_array))
				{
					$drop = Doctrine_Query::create()
						->delete("*")
						->from('Columns2users')
						->where('user_id ="' . $logininfo->userid . '"')
						->andWhereIn("c2t_id", $column_array);
					$delete = $drop->execute();
				}

				foreach($_REQUEST['columns'] as $columnid=>$selected_val)
				{
					if($allTabsColumns[$tabs[$reqestedTab]][$columnid] != "0")
					{
					    $is_primary = 0 ;
					    if($selected_val == 'primary'){
					       $is_primary = 1 ;
					    }
					    if($selected_val != 'off'){
    						$records[] = array(
    							"c2t_id" => $allTabsColumns[$tabs[$reqestedTab]][$columnid],
    							"user_id" => $logininfo->userid,
    						    "is_primary" => $is_primary
    						);
					    }
					}
				}
				if(!empty($records))
				{
					$collection = new Doctrine_Collection('Columns2users');
					$collection->fromArray($records);
					$collection->save();
				}
			}
			
			
			if ($this->getParam('__action') == 'fetchMobileList') {
			    //return for the mobile version... just a plain json i can work with .. not hardcoded html
			    $patientsMobile = array_map(function($i){
			        
			        $traffic_status = null;
			        if (in_array(6, $i['icons']['icons_system']) 
			            && ! empty($i['icon_data']['show']['image']) 
			            //&& ($this->logininfo->usertype == "SA" || in_array('6', $allowed_icons['system'])) //removed this because $allowed_icons is empty
		            ) 
			        {
			            $traffic_status = [
			                'background' => $i['icon_data']['show']['color'],
			                'src'        => ! empty($i['icon_data']['show']['image']) ? 'icons_system/' . $i['icon_data']['show']['image'] : '',
			                'title'      => ! empty($i['icon_data']['show']['name']) ? $this->translate($i['icon_data']['show']['name']) : '',
			            
			            ];
			        }
			        
			        $debug = [
			            $i['icons']['icons_system'],
			            $allowed_icons
			            
			        ];
			        
			        
			        return [
			        'traffic_status' => $traffic_status,
			        'last_name' => $i['lastname'],
			        'first_name' => $i['firstname'],
			        'epid' => $i['EpidIpidMapping']['epid'],
			        'enc_id' => $i['enc_id'],
			            
		            '_debug' => APPLICATION_ENV != 'production' ? $debug :  null,
			            
			            
			    ];}, $patientlimit);
			     
			    $this->_helper->viewRenderer->setNoRender(true);
			    
			    $response = array();
			    $response['draw'] = (int)$this->getRequest()->getParam('draw'); //? get the sent draw from data table
			    $response['recordsTotal'] = $no_patients;
			    $response['recordsFiltered'] = $no_patients;//count($patientsMobile);
			    $response['data'] = $patientsMobile;
			     
			    ob_end_clean();
			    ob_start();
			     
			    $json = Zend_Controller_Action_HelperBroker::getStaticHelper('json');
			    $json->sendJson($response); 
			    
			    exit; //for readability
			}
			
		}



		/**
		* ISPC-2479 Ancuta back-up of fetchoveralllistAction
		*/
		public function fetchoveralllistOldAction()
		{
		    set_time_limit(0);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			
			//save to session so we have the isadminvisible
			$last_page2tab = new Zend_Session_Namespace('last_page2tab');
			$page = $this->getRequest()->getControllerName() .'_patientoveralllist';
			
			if(empty($_REQUEST['f_status']) && !empty($last_page2tab->$page)){
				$_REQUEST['f_status'] = $last_page2tab->$page;
			}
			$last_page2tab->$page =  $_REQUEST['f_status'];
				
			
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$groupid = $logininfo->groupid;
			$this->view->usertype = $logininfo->usertype;
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');
			$this->_helper->layout->setLayout('layout_ajax');
			$master_group = Usergroup::getMasterGroup($groupid);
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$logininfo = new Zend_Session_Namespace('Login_Info');

			$showinfo = new Modules();
			//ISPC-2396 - Carmen 09.10.2019
			$clientModules = $showinfo->get_client_modules($clientid);
			if($clientModules['200'])
			{
				$this->view->bulkdeleteiconbutton = true;
			}
			else
			{
				$this->view->bulkdeleteiconbutton = false;
			}
				
			$user2location_m = $showinfo->checkModulePrivileges("94", $logininfo->clientid);
			if($user2location_m)
			{
				$this->view->user2location = 1;
			} else{
				$this->view->user2location = 0;
			}
			
			
			//get patient discharge & dot
			$dis_ord = ($_REQUEST['ord'] == 'dot') ? 'dot' : 'discharge_date'; 
			
			
			// ISPC-1699 ACT I-IV
			if($showinfo->checkModulePrivileges("127", $clientid))
			{
			    $diagno_act_permission = true;
			}
			else
			{
			    $diagno_act_permission= false;
			}
			
			$this->view->diagno_act_permission = $diagno_act_permission;
			
			
			// ISPC-2420
			if($showinfo->checkModulePrivileges("196", $clientid))
			{
			    $demstepcare_status_permission = true;
			}
			else
			{
			    $demstepcare_status_permission= false;
			}
				
			$this->view->demstepcare_status_permission = $demstepcare_status_permission;
							
			
			
			// ISPC-1612 Leistungsnachweis Stapeldruck
			$modules = new Modules();
			if($modules->checkModulePrivileges("109", $clientid))
			{
			    $allow_sh_printing = true;
			}
			else
			{
			    $allow_sh_printing = false;
			}
			$this->view->allow_sh_printing = $allow_sh_printing ;
			//ISPC-2365
			if($modules->checkModulePrivileges("202", $clientid))
			{
			    $allow_rp_printing = true;
			}
			else
			{
			    $allow_rp_printing = false;
			}
			$this->view->allow_rp_printing = $allow_rp_printing ;
				
			//construct months selector array START
			$start_period = date('Y-m-d', strtotime('-2 month')); //TODO-2013
			$end_period = date('Y-m-d', strtotime('+4 months'));
			$period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
				
			foreach($period_months_array as $k_month => $v_month)
			{
			    $month_select_array[$v_month] = $v_month;
			}
			//construct months selector array END
				
			$selected_month = date('Y-m', strtotime('+1 months'));
			$this->view->month_select_array = $month_select_array;
				
			//construct month_selector START
			$attrs['class'] = 'sh_month_selector';
			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			
			
			//construct rp forms months selector array START - ISPC - 2365
			//$rp_start_period = date('Y-m-d', strtotime('2008-01-01'));
			$rp_start_period = date('Y-m-d', strtotime('-6 month'));
			$rp_end_period = date('Y-m-d');
			$rp_period_months_array = Pms_CommonData::get_period_months($rp_start_period, $rp_end_period, 'Y-m');
			
			foreach($rp_period_months_array as $k_month => $v_month)
			{
				$rp_month_select_array[$v_month] = $v_month;
			}
			//construct rp forms months selector array END
			
			$rp_selected_month = date('Y-m', strtotime('+1 months'));
			$this->view->rp_month_select_array = $rp_month_select_array;
			
			//ISPC-2426 Carmen 05.11.2019
			//construct months selector array for shanlage14 filled forms START
			$start_period_filled = date('Y-m-d', strtotime('-2 month'));
			//$start_period_filled = date('Y-m-d', strtotime('-60 month'));
			$end_period_filled = date('Y-m-d');
			$period_months_array_filled = Pms_CommonData::get_period_months($start_period_filled, $end_period_filled, 'Y-m');
			
			foreach($period_months_array_filled as $k_month_filled => $v_month_filled)
			{
				$month_select_array_filled[$v_month_filled] = $v_month_filled;
			}
			//construct months selector array for shanlage14 filled forms END

			$this->view->month_select_array_filled = $month_select_array_filled;
			//var_dump($month_select_array_filled); exit;
			//ISPC-2426
			
			//get doctor and nurse users
			//get all related users details
			$master_groups_first = array('4', '5');
			
			$client_user_groups_first = Usergroup::getUserGroups($master_groups_first);
			
			foreach($client_user_groups_first as $k_group_f => $v_group_f)
			{
			    $master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
			}
			
// 			$client_users = User::getClientsUsers($clientid,true); // COmmented on 08.08.2019  for TODO-2489 By Ancuta
			$client_users = User::get_all_client_users($clientid,0,true,false); //Todo-2489 - ANcuta - changed function to include inactive users
			
			
			
			$nurse_users = array();
			$doctor_users = array();
			foreach($client_users as $k_cuser_det => $v_cuser_det)
			{
			    $master_user_details[$v_cuser_det['id']] = $v_cuser_det;
			    if(in_array($v_cuser_det['groupid'], $master2client['5']))
			    {
			        $nurse_users[] = $v_cuser_det['id'];
			    }
			    else if(in_array($v_cuser_det['groupid'], $master2client['4']))
			    {
			        $doctor_users[] = $v_cuser_det['id'];
			    }
			    
			   // shortname user=============================== 
			    if(strlen($v_cuser_det['shortname']) > 0)
			    {
     		    	$user_detailss[$v_cuser_det['id']] = $v_cuser_det['shortname'];
			    }
			    else
			    {
			    	$last_name = mb_substr($v_cuser_det['last_name'], 0, 1, "UTF-8");
			    	$first_name = mb_substr($v_cuser_det['first_name'], 0, 1, "UTF-8");
			    	$user_detailss[$v_cuser_det['id']] = strtoupper($first_name . $last_name);
			    }
			    
			}
				
			if(empty($doctor_users)){
			    $doctor_users[] = "999999999";
			}
			
			/* ----------------- set limits, pages, order, sort ----------------------- */
			$standby_page = false;
			//ISPC - 2287
			$this->view->table_length_options = array('25', '50', '100');
			
			if($_REQUEST['tbl'])
			{
				$limit = $_REQUEST['tbl'];
				
				$this->view->limit = $limit;
			}
			else 
			{
				$limit = $this->getRequest()->getParam('limit', 50);
				
				$this->view->limit = $limit;
			}

			if(!empty($_REQUEST['page']) && is_numeric($_REQUEST['page']))
			{
				$current_page = $_REQUEST['page'];
			}
			else
			{
				$current_page = 1;
			}

			if($_REQUEST['sort'] == 'desc')
			{
				$sort = 'desc';
			}
			else
			{
				$sort = 'asc';
			}

			/* --------------------  set default status -------------------------------- */
			if(strlen($_REQUEST['f_status']) > 0)
			{
				$reqestedTab = $_REQUEST['f_status'];
			}
			else
			{
				$_REQUEST['f_status'] = "active";
				$reqestedTab = "active";
			}

			/* --------------------  get user settings --------------------------------- */
			$user_c_details = User::getUserDetails($userid);
			if($user_c_details[0]['allow_own_list_discharged'] == '1')
			{
				$show_discharged_not_dead = true;
			}
			else
			{
				$show_discharged_not_dead = false;
			}

			if($user_c_details[0]['assigned_standby'] == '1')
			{
				$show_assigned_standby = true;
			}
			else
			{
				$show_assigned_standby = false;
			}

			/* ##################################################################################### */
			// COLUMNS DETAILS -  Start
			/* ##################################################################################### */

			/* #### Check if client has permission to see the organisation column ################## */
			$this->view->org_column = 0;
			$organisationprevileges = new Modules();
			$display_org = $organisationprevileges->checkModulePrivileges("72", $logininfo->clientid);
			if($display_org)
			{
				$org_column = 1;
			}
			/* ##################################################################################### */
			//columns
			$userCols = new Columns2users();

			if(strlen($_REQUEST['f_status']) > 0)
			{
				$reqestedTab = $_REQUEST['f_status'];
			}
			else
			{
				$reqestedTab = "active";
			}

			$tabs = array("active" => "1", "discharged" => "2", "standby" => "3", "archive" => "4", "all" => "5", "standbydel" => "6", "assignedpats" => "7");

			$tabColumns = new Columnslist();
			$tabCols = $tabColumns->getColumns($tabs[$reqestedTab]);
			$tabsColumnsSource = new Columns2tabs();
			$allTabsColumns = $tabsColumnsSource->getTabsColumns();
//print_r($tabCols);exit;
			foreach($tabCols as $kcol => $valcol)
			{
				if($org_column == "1")
				{
					$finalCol[] = $valcol['id'];
				}
				else
				{
					if($valcol['id'] != '20')
					{
						$finalCol[] = $valcol['id'];
					}
				}
			}

			$this->view->tabColumns = implode(",", $finalCol);
//print_r($this->view->tabColumns);exit;
			if(count($_REQUEST['columns']) != "0" && $_REQUEST['savecols'] == "1")
			{
				$_REQUEST['columns'][] = "9999999";
				$selectedColumns = implode(",", $_REQUEST['columns']);
				$user_columns2tab = $_REQUEST['columns'];
			}
			else
			{
				//get selected cols from db!!!
				$userSavedCols = $userCols->getUserColumns($logininfo->userid, $tabs[$reqestedTab]);
				if(count($userSavedCols) == "0")
				{ //get defaults if user has no saved data
					$defaultCols = $userCols->getDefaultColumns(false, $tabs[$reqestedTab]);
					
					$defCols[] = "9999999";
					foreach($defaultCols as $col)
					{
						$defCols[] = $col['colid'];
					}

					$selectedColumns = implode(",", $defCols);
					$user_columns2tab = $defCols;
				}
				else
				{
					$userSavedCols[] = "9999999";
					$selectedColumns = implode(",", $userSavedCols);
					$user_columns2tab = $userSavedCols;
				}
				
			}
			
			// !!! THIS ARRAY IS NOT USED IT IS ONLY FOR INFORMATION !!!
			$overall_columns = array(
				'1' => 'epid',
				'2' => 'lastname',
				'3' => 'firstname',
				'4' => 'dateofbirth',
				'5' => 'admissiondate',
				'6' => 'dischargedate',
				'7' => 'location',
				'8' => 'Verordnung',
				'9' => 'daystreated',
				'10' => 'treatedby',
				'11' => 'lastupdate',
				'12' => 'movetoarchive',
				'13' => 'movefromarchivtodischarge',
				'14' => 'edit',
				'15' => 'reactivatepatient',
				'16' => 'restandby',
				'17' => 'removefromstandby',
				'18' => 'admitformstandby',
				'19' => 'icons',
				'20' => 'organisation',
				'21' => 'diagnosis',
				'22' => 'sapv_period',
				'23' => 'family_doctor',
				'24' => 'contact_number',
				'25' => 'location_team_leader',
				'26' => 'lastdate_contactform',
				'27' => 'nursing_service',
				'28' => 'voluntary',
				'29' => 'health_insurance'
			);

			$this->view->selectedColumns = $selectedColumns;
			/* ##################################################################################### */
			// COLUMNS DETAILS -  END
			/* ##################################################################################### */

			/* --------------------  build filters array based on form input ------------------ */
			
			//add pflegedienst filter
			//print_r($_REQUEST['f_doctor']); exit;
			
			if($_REQUEST['f_doctor'] && $_REQUEST['f_doctor'] !="0" && strlen($_REQUEST['f_doctor'])>0)
			{
				$doc = explode("|**|",$_REQUEST['f_doctor']);
				
				
				$fdoc = Doctrine_Query::create()
				->select('id')
				->from('FamilyDoctor')
				->where('clientid = "' . $logininfo->clientid . '" ')
				->andWhere("last_name like  '%" . $doc[0] . "%'  OR last_name like  '%" . $doc[0].' '.$doc[1] . "%'  ")
				->andWhere("first_name like  '%" . $doc[1] . "%' OR first_name like  '%" . $doc[0].' '.$doc[1] . "%' ");
				$fdocarr = $fdoc->fetchArray();
				$fdocarray = $fdocarr;
				
				$fdoc_str = '"99999999999",';
				foreach($fdocarray as $key_d =>  $val_d)
				{
					$fdoc_str .='"'.$val_d['id'].'",';
				}
				$fdoc_str =  substr($fdoc_str, 0,-1);
			}
				
			
			
			
			$filters = array();

			switch($_REQUEST['f_status'])
			{

				case 'active':
					$filters['patient_master'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 0 AND p.isstandby = 0 AND p.isarchived = 0';
					$source_data['active'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 0 AND p.isstandby = 0 AND p.isarchived = 0';
					break;

				case 'assignedpats':
					if($show_assigned_standby)
					{
						$standby_q = '';
					}
					else
					{
						$standby_q = 'and p.isstandby = 0';
					}

					if($show_discharged_not_dead)
					{
						$filters['patient_master'] = 'p.isdelete = 0 ' . $standby_q . ' and p.isstandbydelete = 0';
						$source_data['assignedpats'] = 'p.isdelete = 0 ' . $standby_q . ' and p.isstandbydelete = 0';
					}
					else
					{
						$filters['patient_master'] = 'p.isdischarged = 0 and p.isdelete = 0 ' . $standby_q . ' and p.isstandbydelete = 0';
						$source_data['assignedpats'] = 'p.isdischarged = 0 and p.isdelete = 0 ' . $standby_q . ' and p.isstandbydelete = 0';
					}

					break;

				case 'discharged':
					$filters['patient_master'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 1 AND p.isarchived = 0';
					$source_data['discharged'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 1 AND p.isarchived = 0';
					break;

				case 'standby':
					$filters['patient_master'] = 'p.isdelete = 0 AND p.isstandbydelete = 0 AND p.isdischarged = 0 AND p.isstandby = 1 AND p.isarchived = 0';
					$source_data['standby'] = 'p.isdelete = 0 AND p.isstandbydelete = 0 AND p.isdischarged = 0 AND p.isstandby = 1 AND p.isarchived = 0';
					$standby_page = true;
					break;

				case 'standbydel':
					$filters['patient_master'] = 'p.isdelete = 0 AND p.isstandbydelete = 1 AND p.isarchived = 0';
					$source_data['standbydel'] = 'p.isdelete = 0 AND p.isstandbydelete = 1 AND p.isarchived = 0';
					break;

				case 'archive':
					$filters['patient_master'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 1 AND p.isarchived = 1';
					$source_data['archive'] = 'p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 1 AND p.isarchived = 1';
					break;

				default:
					$filters['patient_master'] = '1';
					$source_data['default'] = '1';
					break;
			}

			
			if($_REQUEST['f_hospiz'] == '1')
			{
				$filters['patient_master'] .= ' AND (p.ishospiz = 1 OR p.ishospizverein = 1)';
			}
			else
			{
				$filters['patient_master'] .= ' ';
			}

			if($_REQUEST['f_dob_start'] && $_REQUEST['f_dob_end'])
			{
				$filters['patient_master'] .= ' AND (year(p.birthd) BETWEEN "' . $_REQUEST['f_dob_start'] . '" AND "' . $_REQUEST['f_dob_end'] . '")';
			}
			
// 			print_r($_REQUEST['f_doctor']); exit;
			if($_REQUEST['f_doctor'] && $_REQUEST['f_doctor'] !="0" && strlen($_REQUEST['f_doctor'])>0)
			{
				$filters['patient_master'] .= ' AND p.familydoc_id IN ('.$fdoc_str.') ';
				
			}

			if(!empty($_REQUEST['f_keyword']))
			{
				$filters['patient_master'] .= ' AND (CONCAT(
										AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '"), " ",
										AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '"), " ",
										e.epid
										) LIKE :keyword )';
			}


			/* ---------  get user's patients by permission   ---------------------------- */
			$user_patients = PatientUsers::getUserPatients($logininfo->userid);

			/* --------- get initial ipids and apply patient master filters ---------------------------- */
			$patient = Doctrine_Query::create()
				->select('p.ipid,e.epid,p.familydoc_id,p.isstandby,p.isdischarged,p.isstandbydelete, p.traffic_status')
				->from('PatientMaster p')
				->where('p.isdelete = 0')
				->andWhere('p.ipid IN (' . $user_patients['patients_str'] . ')');
				if(!empty($_REQUEST['f_keyword']))
				{
					$patient->andWhere($filters['patient_master'],array("keyword"=>"%".$_REQUEST['f_keyword']."%"));
				} else{
					$patient->andWhere($filters['patient_master']);
					
				}
			$patient->leftJoin("p.EpidIpidMapping e");

			if($_REQUEST['f_status'] == "assignedpats")
			{
				$patient->leftJoin("e.PatientQpaMapping q");

				if($logininfo->usertype != 'SA')
				{
					$patient->andWhere('q.clientid =e.clientid and q.clientid = ' . $logininfo->clientid . ' and q.userid = ' . $logininfo->userid);
				}
				else
				{
					$patient->andWhere('q.clientid =e.clientid and q.clientid = ' . $logininfo->clientid);
				}
			}
			else
			{
				$patient->andWhere('e.clientid = ' . $logininfo->clientid);
			}


       			
			$patienidt_array = $patient->fetchArray();

			
			//no result for this search... stop script here
			if (count($patienidt_array) == 0) {		
				$this->view->standby_page = $standby_page;
				$this->view->patientlist = array();
				$this->view->current_page = 0;
				$this->view->no_pages = 0;
				$this->view->no_patients = 0;
				$this->view->orderby = $_REQUEST['ord'];
				$this->view->sort = $_REQUEST['sort'];
				$this->view->verdonet_array = array('0' => 'keine', '1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');
				$this->view->srcolor_array = array('0' => 'stsl_keine', '1' => 'stsl_red', '2' => 'stsl_green', '3' => 'stsl_keine');
				
				if ($this->getParam('__action') == 'fetchMobileList') {
				    $this->returnDatatablesEmptyAndExit();
				}
				return false;
			}


			
			

			$cla_array = array();
			$cla_array ['ipid'] =  array_column($patienidt_array, 'ipid');
			if (count($cla_array ['ipid']) == 0) {
				$cla_array ['ipid'] = array();
			}

			//add pflegedienst filter
			if(!empty($_REQUEST['f_pflegedienste']))
			{
				$patientipidsarr = $cla_array ['ipid'];
				$patientbypfle = Doctrine_Query::create()
				->select('ipid')
				->from('PatientPflegedienste pp')
				->where('pp.isdelete="0"')
				->leftJoin("Pflegedienstes pf")
				->andwhere('pf.clientid = ?', $logininfo->clientid)
				->andwhere('pp.pflid = pf.id')
				->andWhere("pf.nursing like  ? ","%".$_REQUEST['f_pflegedienste']."%")
				->andWhere('pf.isdelete = 0')
				->andWhereIn("pp.ipid", $patientipidsarr);
				$patientbypflearr = $patientbypfle->fetchArray();
			
				$cla_array ['ipid']  = array_column($patientbypflearr, 'ipid');
					
// 				$patienidtarray = $patientbypflearr;
// 				$patienidtarray[9999999] = "xx";
				
			}
			
			//add user filter
			if(!empty($_REQUEST['f_user']) && $_REQUEST['f_user'] != 0 )
			{
				$patientipidsarr = $cla_array ['ipid'];
				$patientuser = Doctrine_Query::create()
				->select('ei.ipid')
				->from('EpidIpidMapping ei')
				->leftJoin("PatientQpaMapping pm")
				->where('ei.epid = pm.epid')
				->andWhere("pm.userid = ?", $_REQUEST['f_user'])
				->andWhereIn("ei.ipid", $patientipidsarr);
				$patientuserarr = $patientuser->fetchArray();
				
				$cla_array ['ipid']  = array_column($patientuserarr, 'ipid');
				
// 				$patienidtarray = $patientuserarr;
// 				$patienidtarray[9999999] = "xx";
			}
			
			//add location filter
			if(!empty($_REQUEST['f_location']))
			{
				$patientipidsarr = $cla_array ['ipid'];
				$patientbyloc = Doctrine_Query::create()
				->select('ipid')
				->from('PatientLocation')
				->where('isdelete="0"')
				->andWhere('location_id = ?', $_REQUEST['f_location'])
				->andWhere("valid_till='0000-00-00 00:00:00'")
				->andWhereIn("ipid", $patientipidsarr)
				->orderBy('id DESC');
				$patientbylocarr = $patientbyloc->fetchArray();
				
				$cla_array ['ipid']  = array_column($patientbylocarr, 'ipid');
				
// 				$patienidtarray = $patientbylocarr;
// 				$patienidtarray[9999999] = "xx";
			}
			
			/* --------------- get discharge methods  ------------------------------------ */
			$dis = new DischargeMethod();
			$discharge_methods = $dis->getDischargeMethod($clientid, 0);
				
			foreach($discharge_methods as $dischargeM)
			{
					
				if($dischargeM['abbr'] == "TOD" || $dischargeM['abbr'] == "TODNA" || $dischargeM['abbr'] == "verstorben"  || $dischargeM['abbr'] == "VERSTORBEN")
				{
					$death_methods[] = $dischargeM['id'];
					$death_description = $dischargeM['description'];
				}
			}
			$death_methods = array_values(array_unique($death_methods));
			
			if(isset($_REQUEST['f_deadafterdischarge']) && $_REQUEST['f_deadafterdischarge'] == '1' || ($show_discharged_not_dead && $_REQUEST['f_status'] == "assignedpats"))
			{
				$patientipidsarr = $cla_array ['ipid'];
				$patient_discharge = PatientDischarge::get_patients_discharge($patientipidsarr);
				$death_button_data = PatientDeath::get_patients_death($patientipidsarr);
			}
			
			/* ---------------Entlassene Patienten: show only dead after discharge patients - ISPC-1945   ------------------------------------ */
			if(isset($_REQUEST['f_deadafterdischarge']) && $_REQUEST['f_deadafterdischarge'] == '1')
			{
				//$patientipidsarr = $cla_array ['ipid'];
				//get patients discharge details
				//$patient_discharge = PatientDischarge::get_patients_discharge($patientipidsarr);
				
				//check if method is not in discharge dead
				$dead_patients_ipids[] = '9999999999';
				
				foreach($patient_discharge as $k_pat_dis => $v_pat_dis)
				{
					//get dead patient ipids to be excluded
					if(in_array($v_pat_dis['discharge_method'], $death_methods))
					{
						$dead_patients_ipids[] = $v_pat_dis['ipid'];
					}
				}
				
				//get patients death by death button
				//$death_button_data = PatientDeath::get_patients_death($patientipidsarr);
				
				$death_ipids = array();
				foreach($death_button_data as $k_pat_dead => $v_pat_dead)
				{
					if(!in_array($v_pat_dead['ipid'], $dead_patients_ipids))
					{
						$death_ipids[]['ipid'] = $v_pat_dead['ipid'];
					}
				}
				
				$cla_array ['ipid']  = array_column($death_ipids, 'ipid');
				//var_dump($cla_array); exit;
			}
			
			foreach($patienidt_array as $k=>$v) {
				if ( ! in_array($v['ipid'], $cla_array ['ipid'] )){
					unset($patienidt_array[$k]);
				}
			}
			
			
			
// 			$patient_filter_ipids[] = '999999999';
			$patient_filter_ipids = array();
			foreach($patienidt_array as $k_pat_idtarray => $v_pat_idtarray)
			{
				$patient_filter_ipids[] = $v_pat_idtarray['ipid'];
				$patient2family_docs[$v_pat_idtarray['ipid']] = $v_pat_idtarray['familydoc_id'];
				$family_docs_ids[] = $v_pat_idtarray['familydoc_id'];

				$patient_filter_details[$v_pat_idtarray['ipid']] = $v_pat_idtarray;
			}
			if (count($patient_filter_ipids) == 0) {
				$patient_filter_ipids[] = '999999999';
			}


			/* ---------------Eigene Patienten: show dead patients or not   ------------------------------------ */
			if($show_discharged_not_dead && $_REQUEST['f_status'] == "assignedpats")
			{
				//get patients discharge details
				//$patient_discharge = PatientDischarge::get_patients_discharge($patient_filter_ipids);

				//check if method is not in discharge dead
				$dead_patients_ipids[] = '9999999999';
				foreach($patient_discharge as $k_pat_dis => $v_pat_dis)
				{
					//get dead patient ipids to be excluded
					if(in_array($v_pat_dis['discharge_method'], $death_methods))
					{
						$dead_patients_ipids[] = $v_pat_dis['ipid'];
					}
				}

				//get patients death by death button
				//$death_button_data = PatientDeath::get_patients_death($patient_filter_ipids);

				$death_ipids[] = '999999999';
				foreach($death_button_data as $k_pat_dead => $v_pat_dead)
				{
					$death_ipids[] = $v_pat_dead['ipid'];
				}

				$dead_patients_ipids = array_values(array_unique($dead_patients_ipids));
				$dead_patients = array_values(array_unique($dead_patients));
			}			
			
			/* ------------------------ ICONS ------------------------------------ */
			$sys_icons = new IconsMaster();
			$client_icons = new IconsClient();
			$patient_icons = new IconsPatient();

			
			$source_tab_ipid_q = $source_data[$_REQUEST['f_status']];

			if($_REQUEST['icon_sys'])
			{
				$system_icons = $sys_icons->get_system_icons($clientid, $_REQUEST['icon_sys']);
 
				$patientipidsarr[] = '999999999';
				foreach($_REQUEST['icon_sys'] as $k_sys_icon => $v_sys_icon)
				{
					/* ISPC-1775,ISPC-1678 */
					if($v_sys_icon == '42' ){ // register icon - not added to list
						continue;
					}
					if(!empty($v_sys_icon) && !empty($patient_filter_ipids))
					{
					    
    					if($v_sys_icon != '6' && $v_sys_icon != '3' && $v_sys_icon != '43' && $v_sys_icon != '56' && $v_sys_icon != '10002') // 6 patient status, 3 sapv, 43 diagnosis act - module based,56 -pflegegrade, 10002 -Clinic Case
    					{
    						if($v_sys_icon == '25') // family doctor
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, $patient2family_docs);
    						}
    						elseif($v_sys_icon == '31') // diagnosis
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, true);
    						}
    						elseif($v_sys_icon == '32') // medication
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, true);
    						}
    						elseif($v_sys_icon == '37') // assigned_users_icon
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}(false,$source_tab_ipid_q);
    						}
                            elseif($v_sys_icon == '10000') // assigned_bed_icon
                            {
                                $data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, true);
                            }
    						else
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids);
    						}
    					}
    					else
    					{
    					    if(!empty($_REQUEST['icon_sys_status'][$k_sys_icon]))
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, $_REQUEST['icon_sys_value'][$k_sys_icon], $_REQUEST['icon_sys_status'][$k_sys_icon]);
    						}
    						else
    						{
    							$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, $_REQUEST['icon_sys_value'][$k_sys_icon]);
    						}
    					}
    
    					$patients_icons_details = $data[$k_sys_icon];
    					$patient_filter_ipids = array(); //reset ipids
    					$patient_filter_ipids = array_merge($patient_filter_ipids, $data[$system_icons[$v_sys_icon]['function']]['ipids']);
					}
				}

				$pat_ipidsarr = $patient_filter_ipids;
			
			} else {
				
				$pat_ipidsarr = $patient_filter_ipids;
				
			}
			$pat_ipidsarr = array_values(array_unique($pat_ipidsarr));

			if($_REQUEST['icon_cust'])
			{
				$pat_ipidsarr = $patient_icons->filter_patient_icons($pat_ipidsarr, $_REQUEST['icon_cust']);
			}

			//finish filtering by icons
				
			
			
			
// 			$patienidtarray[9999999] = "xx";
			$patienidtarray = array();
			foreach($patienidt_array as $k_pat_details => $v_pat_details)
			{
				if(in_array($v_pat_details['ipid'], $pat_ipidsarr))
				{
					$patienidtarray[] = $v_pat_details;
				}
			}
			if (count($patienidtarray) == 0) {
				$patienidtarray[9999999] = "xx";
			}

			
			foreach($patienidtarray as $patientid)
			{
				$patientipidsarr[] = $patientid['ipid'];
			}

// 			$epidsarfinal[] = "xx";
			$epidsarfinal = array();
			foreach($patienidtarray as $epidgg)
			{
				$epidsar = $epidgg['EpidIpidMapping'];
				$epidsarfinal[] = $epidsar['epid'];
			}
			if (count($epidsarfinal) == 0) {
				$epidsarfinal[] = "xx";
			}
				
					
			
			//get patients locations and location order
			if(in_array('7', $user_columns2tab) || in_array('25', $user_columns2tab)) // 25 location_team_leader
			{ // Display only if column location it is needed
				$orderbyloc = new PatientLocation();
				$patlocdet = $orderbyloc->getOrderbyLocation($patienidtarray, $logininfo->clientid);
				
				$orderbylocation = $patlocdet['orderbylocation'];
				$patient2location = $patlocdet['patient2location'];
				$patient2home = $patlocdet['patient2home'];
				$patient2commlocation = $patlocdet['patient2commlocation'];
				$patient2station = $patlocdet['patient2station'];
				
				if(in_array('25', $user_columns2tab)) { // 25 location_team_leader
					$patient2location_id = $patlocdet['patient2location_id'];
					foreach($patient2location_id as $lipid => $plocation_id){
						$used_locations[] = $plocation_id;
					}
				}
				
				if(is_array($orderbylocation))
				{
					foreach($orderbylocation as $obl)
					{
						$orderbylocation_str .= '"' . $obl . '",';
					}
				} else {
				    $orderbylocation_str = '"99999999",';
				}
			}

			
			if(in_array('25', $user_columns2tab)) { // 25 location_team_leader
			
				if(!empty($used_locations)){
					// get alredy assigend users to location
					$users2location_array = Users2Location::get_location_users($used_locations);
					
					$team_leader = "";
					foreach($users2location_array as $k=>$vul){
						$users2location[] = $vul['user'];
						if($vul['leader'] == "1"){
							$location_team_leaders[$vul['location']] = $vul['user'];
						}
					}
					
					if(!empty($users2location)){
						$user_details = User::getUserByClientid($logininfo->clientid);
						foreach($user_details as $k=>$user_data){
							$usr_details[$user_data['id']]['name'] = $user_data['user_title'].' '.$user_data['last_name'].', '.$user_data['first_name']; 
						}
// 						print_r($user_details ); exit;	
						foreach($users2location as $u_id){
							$team_leader_data[$u_id] = $usr_details[$u_id]['name']; 
						}
// 						print_r($team_leader_data); exit;	
					}
					
				}
			}
			
			



			
			//added if to get discharge order+details before or after the pagination takes place
			if (isset($_REQUEST['ord']) && ($_REQUEST['ord'] == 'dis' || $_REQUEST['ord'] == 'dot' )) {
	
				//get patient discharge & dot
				if(($_REQUEST['f_status'] != 'active' && $_REQUEST['f_status'] != 'all' ) || $reqestedTab != 'active')
				{
					
					$disdata = new PatientDischarge();
					$dischargedata = $disdata->getPatientsDischargeDetails($patienidtarray, $dis_ord, $sort);

					$client_methode = array();
					foreach($dischargedata as $nr_value)
					{
						foreach($discharge_methods as $name_value)
						{
							if($nr_value['discharge_method'] == $name_value['id'])
							{
								$client_methode[$nr_value['discharge_method']]['name'] = $name_value['description'];
								$client_methode[$nr_value['discharge_method']]['abbr'] = $name_value['abbr'];
							}
						}
					}
	
					// get dead patient -> dead buton
					$disddata = new PatientDeath();
					$patientdeatharray = $disddata->getPatientsDeathDetails($patienidtarray);
	
					foreach($dischargedata as $discharge_key => $discharge_item)
					{
						$orderbydischarge_str .= '"' . $discharge_key . '",';
					} 
										
					if(empty($dischargedata))
					{
					    $orderbydischarge_str = '"99999999",';
					}
				}
	
				
			}
			
			if($reqestedTab == 'standby')
			{
				$disdata = new PatientDischarge();
				$inactive_dischargedata = $disdata->getPatientsInactiveDischargeDetails($patienidtarray, $dis_ord, $sort);
			}
			
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.last_update_user,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,TRIM(CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)) as firstname,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1))  as middlename,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))  as lastname,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1))  as title,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1))  as salutation,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1))  as street1,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1))  as street2,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1))  as zip,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1))  as city,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1)) as phone,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1))  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex,";
			$sql .= "TRIM(CONVERT(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1)) as kontactnumber";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.last_update_user,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as firstname, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as middlename, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as lastname, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as kontactnumber";
			}

			foreach($patienidtarray as $patientid)
			{
				$patientipidsfinal[] = $patientid['ipid'];
			}


			if($show_discharged_not_dead && $_REQUEST['f_status'] == "assignedpats")
			{
				$patientipidsfinal = array_diff($patientipidsfinal, $dead_patients_ipids);
				$patientipidsfinal = array_diff($patientipidsfinal, $death_ipids);
			}
			$patients_count = 0 ;
			foreach($patientipidsfinal as $k=>$pipid){
			    if($pipid != "x"){
			        $patients_count++;
			    }
			}
//			$no_patients = sizeof($patientipidsfinal) - 1; //substract dummy error control result
 			$no_patients = $patients_count;
			$no_pages = ceil($no_patients / $limit);

			switch($_REQUEST['ord'])
			{

				case 'fn':
//					$orderby = 'CONVERT(AES_DECRYPT(p.first_name, "'.Zend_Registry::get('salt').'") using utf8) COLLATE utf8_general_ci ' . $sort;
					$orderby = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci ' . $sort;
					break;

				case 'ln':
//					$orderby = 'CONVERT(AES_DECRYPT(p.last_name, "'.Zend_Registry::get('salt').'") using latin1) COLLATE latin1_german2_ci ' . $sort;
					$orderby = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci ' . $sort;
					break;

				case 'dob':
					$orderby = 'p.birthd ' . $sort;
					break;

				case 'adm':
					$orderby = 'p.admission_date ' . $sort;
					break;

				case 'lastup':
					$orderby = 'p.last_update ' . $sort;
					break;

				case 'dis':
				case 'dot':
					$orderby = 'FIELD(e.ipid, ' . substr($orderbydischarge_str, 0, -1) . '), e.ipid';
					break;

				case 'loc':
					$orderby = 'FIELD(e.ipid, ' . substr($orderbylocation_str, 0, -1) . ') ' . $sort . ', e.ipid';
					break;

				case 'id':
					$orderby = 'e.epid_num ' . $sort;
					break;
					
				case 'traffic_status':
					$orderby = 'p.traffic_status ' . $sort;
					break;

				default:
//					$orderby = 'CONVERT(AES_DECRYPT(p.last_name, "'.Zend_Registry::get('salt').'") using latin1) COLLATE latin1_german2_ci ' . $sort;
					$orderby = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci ' . $sort;
					break;
			}

			//fetch only the ipids needed on this page
			$patient = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->whereIn("p.ipid", $patientipidsfinal)
				->leftJoin("p.EpidIpidMapping e")
				->andWhere('e.clientid = ?', $logininfo->clientid);
			//ISPC-2045 - get kontact-phone, TODO-1280
			$patient->leftJoin("p.PatientContactphone pcp ON p.ipid = pcp.ipid AND pcp.isdelete IN ('0')");
			$patient->addSelect("pcp.phone, pcp.mobile");
				
			$patient->orderby($orderby);
			$patient->offset(($current_page - 1) * $limit);
			$patient->limit($limit);
			$patientlimit = $patient->fetchArray();

			
			//no result for this search... stop script here
			if (count($patientlimit) == 0) {
				$this->view->standby_page = $standby_page;
				$this->view->patientlist = array();
				$this->view->current_page = 0;
				$this->view->no_pages = 0;
				$this->view->no_patients = 0;
				$this->view->orderby = $_REQUEST['ord'];
				$this->view->sort = $_REQUEST['sort'];
				$this->view->verdonet_array = array('0' => 'keine', '1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');
				$this->view->srcolor_array = array('0' => 'stsl_keine', '1' => 'stsl_red', '2' => 'stsl_green', '3' => 'stsl_keine');
			
				
				if ($this->getParam('__action') == 'fetchMobileList') {
				    $this->returnDatatablesEmptyAndExit();
				}
				
				return false;
			}
			
			
			$pat_ipidsarr = array();
			foreach ($patientlimit as $k=>$v) {
				$pat_ipidsarr[] = $v['EpidIpidMapping']['ipid'];
			}
			if (count($pat_ipidsarr) == 0) {
				$pat_ipidsarr[999999999] = '999999999';
			}
			
	
			foreach ($patienidtarray as $k=>$v) {
				if (!in_array($v['ipid'], $pat_ipidsarr)) {
					unset($patienidtarray[$k]);
				}
			}
			if (count($patienidtarray) == 0) {
				$patienidtarray[99999999] = 99999999; 
			}
			
			
			
			
				
			
			// get private patient
			$ppC = Doctrine_Query::create()
			->select('ipid')
			->from('PatientHealthInsurance')
			->whereIn('ipid', $pat_ipidsarr)
			->andWhere('privatepatient = "1"');
			$pPatientsC = $ppC->fetchArray();
			
			$privPatient = array();
			foreach($pPatientsC as $PrivatePatient)
			{
				$privPatient[] = $PrivatePatient['ipid'];
			}
			if (count($privPatient)==0) {
				$privPatient[] = 'xx';
			}	
			
			
			
			
			
			//added if to get discharge order+details before or after the pagination takes place
			if (!isset($_REQUEST['ord']) || ($_REQUEST['ord'] != 'dis' && $_REQUEST['ord'] != 'dot' )) {	
			
				//get patient discharge & dot
				if(($_REQUEST['f_status'] != 'active' && $_REQUEST['f_status'] != 'all' ) || $reqestedTab != 'active')
				{
					$disdata = new PatientDischarge();
					$dischargedata = $disdata->getPatientsDischargeDetails($patienidtarray, $dis_ord, $sort);

					$client_methode = array();
					foreach($dischargedata as $nr_value)
					{
						foreach($discharge_methods as $name_value)
						{
							if($nr_value['discharge_method'] == $name_value['id'])
							{
								$client_methode[$nr_value['discharge_method']]['name'] = $name_value['description'];
								$client_methode[$nr_value['discharge_method']]['abbr'] = $name_value['abbr'];
							}
						}
					}
			
					// get dead patient -> dead buton
					$disddata = new PatientDeath();
					$patientdeatharray = $disddata->getPatientsDeathDetails($patienidtarray);

				}
			}
					
			
			
			
			
			$pat_ipids_details = array();
			$patient_ipids_simple = array();
			foreach($pat_ipidsarr as $kp => $vpat_ipid)
			{
				$pat_ipids_details[$vpat_ipid] = $patient_filter_details[$vpat_ipid];
				$patient_ipids_simple[] = $patient_filter_details[$vpat_ipid]['ipid'];
			}
			if(count($pat_ipids_details) == 0)
			{
				$pat_ipids_details[] = "XXX";
			}
			if(count($patient_ipids_simple) == 0)
			{
				$patient_ipids_simple[] = "XXX";
			}
			foreach ($patient_ipids_simple as $k=>$v){
				if ( $v == ""){
					unset($patient_ipids_simple[$k]);
				}
			}
			foreach ($pat_ipids_details as $k=>$v){
				if ( $v == ""){
					unset($pat_ipids_details[$k]);
				}
			}
				
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("67", $clientid))
			{
				$sgbvperms = true;
			}
			else
			{
				$sgbvperms = false;
			}
			
			if($logininfo->usertype != 'SA')
			{
				//use mastergroupid not groupid
				$allowed_icons = GroupIconsDefaultPermissions::getGroupAllowedIcons($master_group, $clientid);
			}
			else
			{
				//$allowed_icons = false;
				$allowed_icons = array(
				    'system' => false,
				    'custom' => false
				);
			}
			
			$this->view->allowed_icons = $allowed_icons;
			
			
			$all_system_icons = $sys_icons->get_system_icons($clientid);
				
			// 			print_r($all_system_icons) ; exit;
			/* ISPC-1775,ISPC-1678 */
			foreach($all_system_icons as $sid=>$sdata){
				if($sid == "42"){
					unset($all_system_icons['42']);// register icon - not added to list
				}
			}
				
			foreach($all_system_icons as $k_all_sys_icons => $v_all_sys_icons)
			{
				if($k_all_sys_icons == '26' && $sgbvperms)
				{
					$system_icons_perms[$k_all_sys_icons] = $v_all_sys_icons;
				}
				else if($k_all_sys_icons != '26')
				{
					$system_icons_perms[$k_all_sys_icons] = $v_all_sys_icons;
				}
			}
			
			$this->view->sys_icons = $system_icons_perms;
			$this->view->client_icons = $client_icons->get_client_icons($clientid);
			
			/**
			 * the next foreach was/is the problem of slower query ... fix functions inside
			 */
			//get system icon column data!
			$icons_data = array();
			foreach($all_system_icons as $ks_sys_icon => $vs_sys_icon)
			{
				if($vs_sys_icon['function'] == 'go_to_visitform') //exclude visitform icon from filtering
				{
					continue;
				}
				
				$icon_result = array();
				
				if($vs_sys_icon['function'] == "get_patients_status")
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipids_details, false, false, $details_included = true);
				}
				elseif($vs_sys_icon['function'] == "get_patient_medication")
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($patient_ipids_simple, true);
				}
				elseif($vs_sys_icon['function'] == "get_patient_diagnosis")
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($patient_ipids_simple, true);
				}
				elseif($vs_sys_icon['function'] == "get_patients_assigned_users")
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipidsarr, $source_tab_ipid_q);
				}
				elseif($vs_sys_icon['function'] == "get_patient_healthinsurance")
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipidsarr, $source_tab_ipid_q);
				}
				else
				{
					$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipidsarr);
				}
		
				if($icon_result)
				{
					$icons_data = array_merge_recursive($icons_data, $icon_result);
		
					$patients_icons_details[$ks_sys_icon] = $icons_data['ipids'];
					$patients_icons_details[$ks_sys_icon] = array_values(array_unique($icon_result['ipids']));
				}
			}

			
			//reverse previous arr $patients_icons_details and construct mapped array
			foreach($patients_icons_details as $id_sys_icon => $icon_ipids)
			{
				if(is_numeric($id_sys_icon)) //make sure this key is always numeric... no need for others
				{
					foreach($icon_ipids as $k_icon_ipid => $v_icon_ipid)
					{
						if($v_icon_ipid != '999999999')
						{
							$patient_icons_data[$v_icon_ipid]['icons_system'][] = $id_sys_icon;
						}
					}
				}
			}
			
			//get custom icons for all patients
			$c_custom_icons = $patient_icons->get_patient_icons($pat_ipidsarr);
			
			foreach($c_custom_icons as $k_col_cust_icons => $v_col_cust_icons)
			{
				$patient_icons_data[$v_col_cust_icons['ipid']]['icons_custom'][] = $v_col_cust_icons['icon_id'];
			}
			
				
			
			
			$pat_limit_ipids = array();
			foreach($patientlimit as $k_pat_limit => $v_pat_limit)
			{
				$pat_limit_ipids[] = $v_pat_limit['EpidIpidMapping']['ipid'];
				$pat_limit_epids[] = $v_pat_limit['EpidIpidMapping']['epid'];

				if(strlen($v_pat_limit['street1']) > 0)
				{
					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['street1'] . '<br />';
				}
				if(strlen($v_pat_limit['zip']) > 0)
				{
					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['zip'] . ' ';
				}
				if(strlen($v_pat_limit['city']) > 0)
				{
					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['city'];
				}

				$parient_address[$v_pat_limit['EpidIpidMapping']['ipid']] = $address[$v_pat_limit['EpidIpidMapping']['ipid']];
			}

			if(count($pat_limit_ipids) == '0')
			{
				$pat_limit_ipids[] = '999999999';
			}

			if(in_array('21', $user_columns2tab))
			{ // if the diagnosis column is checked - then get data
				/* ----------------- Diagnosis --------------------------- */
				//Get Main diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$type_id_array[] = $valdia['id'];
				}
				if(empty($type_id_array))
				{
					$type_id_array[] = "0";
				}
				// Get patients - main diagnosis
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->get_multiple_patients_diagnosis($pat_limit_ipids, $type_id_array);


				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
			}

			if(in_array('23', $user_columns2tab))
			{ // if the family_doctor column is checked - then get data
				/* ----------------- Diagnosis --------------------------- */
				// Get patients - main diagnosis
				$fd = new FamilyDoctor();
				$family_doctors_details = $fd->get_family_doctors_multiple($family_docs_ids,false, true); // true -> get family doctor details (street,zip,city, phone, fax)
				
			}

			/* ---------------- get Treated by -------------------------- */
			if(in_array('10', $user_columns2tab))
			{ // Get data- only if the column is needed
				$qpas = new PatientQpaMapping();
// 				$patientqpa = $qpas->get_patient_assigned_doctors($pat_limit_epids, $logininfo->clientid, "names"); // Get assigned for patients shown on page
				$patientqpa = $qpas->get_patient_assigned_doctors_ps($pat_limit_epids, $logininfo->clientid); // Get assigned for patients shown on page
			}
			
			/* ---------------- get last contact form date -------------------------- */
			if(in_array('26', $user_columns2tab))
			{ // Get data- only if the column is needed				
				$deleted_visits = Doctrine_Query::create()
				->select("id, recordid, tabname")
				->from('PatientCourse')
				->wherein('ipid',$pat_limit_ipids)
				->andWhere('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'" . '')
				->andWhere('source_ipid = ""');
				$deleted_visits_array = $deleted_visits->fetchArray();
				 
				$del_visits['contact_form'][] = '9999999999';
				 
				foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
				{
					$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
				}
				
				
				$select = Doctrine_Query::create()
// 				->select('*')
				->select('id, ipid, date,billable_date')
				->from('ContactForms')
				->wherein('ipid',$pat_limit_ipids)
				->andWhereNotIn('id',$del_visits['contact_form'])
				->andWhere('parent = "0"')
				->wherein('create_user',$doctor_users)
				->orderby('ipid, date ASC');
				$select_res = $select->fetchArray();
				
				if($select_res)
				{
				  foreach($select_res as $k_cf => $v_cf)
				  {
				  	$select_res_ipid[$v_cf['ipid']][] = $v_cf;
				  }
				  
				  foreach($select_res_ipid as $k_date_item => $v_date_items)
				  {
				  	$last_date_item = end($v_date_items);
				  	$patient_last_date[$last_date_item['ipid']] =date('d.m.Y', strtotime($last_date_item['billable_date']));
				  }
				  
				}

			}	
			

			/* ---------------- get Nursing service -------------------------- */
			if(in_array('27', $user_columns2tab))
			{ // Get data- only if the column is needed
				$pfle = new PatientPflegedienste();
				$pfledata = $pfle->get_multiple_patient_pflegedienste($pat_limit_ipids);
				
				$pat_nursing_service = array();
				foreach($pfledata['results'] as $pfl_k=>$val_pfles)
			
				{
					foreach($val_pfles as $val_pfle) 
					
					{
						$pat_nursing_service[$pfl_k][] = $val_pfle['nursing']; // Formezi arrayul avand ca cheie ipid-ul pacientului
					}
					
				}
				
			}
			
			/* ---------------- get VW -------------------------- */ 
			if(in_array('28', $user_columns2tab))
			{ // Get data- only if the column is needed
				$vws = new PatientVoluntaryworkers();			
				$vwsdata = $vws->get_patient_voluntaryworkers($pat_limit_ipids, true);			
				
				$pat_vws = array();
				foreach($vwsdata as $vwdata)
					
				{
					if($vwdata['master']['phone'] == '') {
						$pat_vws[$vwdata['ipid']][] = $vwdata['master']['first_name']." ".$vwdata['master']['last_name'];
					}
					else
					{
						$pat_vws[$vwdata['ipid']][] = $vwdata['master']['first_name']." ".$vwdata['master']['last_name'].", ".$vwdata['master']['phone']; // array avand ca cheie ipid-ul pacientului
					}
						
				}
			}
			
			/* ---------------- get Health Insurance -------------------------- */
			if(in_array('29', $user_columns2tab))
			{ 
				// Get data- only if the column is needed
					$pat_health_insurance = array();
    			
    				$healthinsurance = new PatientHealthInsurance();
    				$healthinsurancedata = $healthinsurance->get_multiple_patient_healthinsurance($pat_limit_ipids);
    				
    				foreach($healthinsurancedata as $hli_k=>$val_hli)
    				{
    						$pat_health_insurance[$hli_k][] = $val_hli['company_name'];
    						// array key = patient ipid
    				}
			}
			
			/* ---------------- get patient sapv statuses START ---------------------------------------- */
			$paths = new OrgPaths();
			$client_paths = $paths->get_paths($logininfo->clientid);
			if($client_paths)
			{
				//		multiple ipids
				$data = array();
				$executed_functions = array();
				foreach($client_paths as $k_c_path => $v_c_path)
				{
					if(!in_array($v_c_path['function'], $executed_functions))
					{

						if(empty($data))
						{
							$data = array();
						}

						$executed_functions[] = $v_c_path['function'];
						$retrived_data = $paths->{$v_c_path['function']}($pat_limit_ipids);
						if($retrived_data)
						{
							$data = array_merge_recursive($data, $retrived_data);
						}
					}
				}

				foreach($data as $k_ipid => $v_function_data)
				{
					if($k_ipid != '999999999')
					{
						foreach($v_function_data as $k_function => $v_function_arr)
						{
							foreach($v_function_arr as $k_short => $v_short_status)
							{
								if($v_short_status['status'] != "gray" && $v_short_status['status'] != "green")
								{
									if($advance[$k_ipid][$k_function] == "1" || count($advance[$k_ipid][$k_function]) == '0')
									{
										if($k_function != 'admission_todo')
										{
											$last_status[$k_ipid][$k_function]['shortcut'] = $k_short;
											$last_status[$k_ipid][$k_function]['status'] = $v_short_status['status'];

											if($v_short_status['status'] == "red")
											{
												$advance[$k_ipid][$k_function] = 0;
											}
											else
											{
												$advance[$k_ipid][$k_function] = 1;
											}
										}
										else
										{
											$adm_data['shortcut'] = $k_short;
											$adm_data['status'] = $v_short_status['status'];

											$last_status[$k_ipid][$k_function][] = $adm_data;
										}
									}
								}
							}
						}
					}
				}
			}

			/* ---------------------------------------- get patient sapv statuses END ---------------------------------------- */
			$sapv = new SapvVerordnung();
			$patient_sapv_data = $sapv->get_today_active_highest_sapv($pat_limit_ipids);
// print_r($patientlimit);exit;
			foreach($patientlimit as $key => $patient_item)
			{
				$patientlimit[$key]['enc_id'] = Pms_Uuid::encrypt($patient_item['id']);

				//add VV
				if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $patient_sapv_data['last']))
				{
					$verd_replacer = array("1", "2", "3", "4");
					$verd_values = array("B", "K", "TV", "VV");

					$patientlimit[$key]['verordnet'] = str_replace($verd_replacer, $verd_values, $patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['verordnet']);
					$patientlimit[$key]['status'] = $patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['status'];
				}
				else
				{
					$patientlimit[$key]['verordnet'] = 'keine';
					$patientlimit[$key]['status'] = '';
				}

				//add VV - period
				if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $patient_sapv_data['last']))
				{

					$patientlimit[$key]['sapv_period'] = date('d.m.Y', strtotime($patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['verordnungbis']));
				}
				else
				{
					$patientlimit[$key]['sapv_period'] = ' - ';
				}

				//add trafic status
				if(!empty($patient_item['traffic_status']) && $patient_item['traffic_status'] != '0')
				{

					if($patient_item['traffic_status'] == 1)
					{
						$traffic_status_img = '/images/traffic_g_light.png';
					}
					if($patient_item['traffic_status'] == 2)
					{
						$traffic_status_img = '/images/traffic_y_light.png';
					}
					if($patient_item['traffic_status'] == 3)
					{
						$traffic_status_img = '/images/traffic_r_light.png';
					}
					$patientlimit[$key]['traffic_status'] = $traffic_status_img;
				}
				else
				{
					$patientlimit[$key]['traffic_status'] = '-';
				}

				//add private patient
				if(in_array($patient_item['EpidIpidMapping']['ipid'], $privPatient))
				{

					$patientlimit[$key]['privatepatient'] = '1';
				}
				else
				{
					$patientlimit[$key]['privatepatient'] = '-';
				}

				//add location
				if(in_array('7', $user_columns2tab))
				{// Show only if column needed
				    $patientlimit[$key]['location_name'] = "";
					if(!empty($patient2location[$patient_item['EpidIpidMapping']['ipid']]))
					{
						if(in_array($patient_item['EpidIpidMapping']['ipid'], $patient2home))
						{
							$patientlimit[$key]['location_name'] = $patient2location[$patient_item['EpidIpidMapping']['ipid']] . '<br/>' . $parient_address[$patient_item['EpidIpidMapping']['ipid']];
						}
						else
						{
							$patientlimit[$key]['location_name'] = $patient2location[$patient_item['EpidIpidMapping']['ipid']];
						}

						if(!empty($patient2station[$patient_item['EpidIpidMapping']['ipid']])){
							$patientlimit[$key]['location_name'] .= '<div class="list_location_station" > - '.$patient2station[$patient_item['EpidIpidMapping']['ipid']].'</div>';
						}
						
						if(!empty($patient2commlocation[$patient_item['EpidIpidMapping']['ipid']])){
							$patientlimit[$key]['location_name'] .= '<div class="list_location_comment" >'.$patient2commlocation[$patient_item['EpidIpidMapping']['ipid']].'</div>';
						}

					}
					else
					{
						$patientlimit[$key]['location_name'] = '-';
					}
				}

				//add location team lider
				if(in_array('25', $user_columns2tab))
				{// Show only if column needed
					if(!empty($patient2location_id[$patient_item['EpidIpidMapping']['ipid']]))
					{
						
						$patientlimit[$key]['location_team_leader'] = $team_leader_data[$location_team_leaders[$patient2location_id[$patient_item['EpidIpidMapping']['ipid']]]];
					}
					else
					{
						$patientlimit[$key]['location_team_leader'] = '-';
					}
					
					//$location_team_leaders
					
				}

				//add dot
				if($dischargedata[$patient_item['EpidIpidMapping']['ipid']]['dot'] > 0)
				{
					$patientlimit[$key]['dot'] = $dischargedata[$patient_item['EpidIpidMapping']['ipid']]['dot'];
				}
				else
				{
					$patientlimit[$key]['dot'] = '-';
				}

				//add discharge date
				$patient_discharge = '';
				$patient_discharge = $dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_date'];

				if(!empty($patient_discharge) && $patient_discharge != '00.00.0000')
				{
					$patientlimit[$key]['discharge_date'] = date('d.m.Y', strtotime($patient_discharge));
				}
				else
				{
					$patientlimit[$key]['discharge_date'] = "-";
				}

				//add treated by
				if(in_array('10', $user_columns2tab))
				{ // Get data- only if the column is needed
					$treatedby_str = "";
					if(!empty($patientqpa[$patient_item['EpidIpidMapping']['epid']]))
					{
						foreach($patientqpa[$patient_item['EpidIpidMapping']['epid']] as $val)
						{
							$treatedby_str .= $val . '<br/>';
						}
						$patientlimit[$key]['treatedby'] = $treatedby_str;
					}
					else
					{
						$patientlimit[$key]['treatedby'] = '-';
					}
				}

				//last update
				if(!empty($patient_item['last_update']) && $patient_item['last_update'] != '00-00-0000 00:00:00')
				{
					
				   $patientlimit[$key]['last_update'] = date('d.m.Y H:i', strtotime($patient_item['last_update'])).' '.$user_detailss[$patient_item['last_update_user']] ;
				   
				}
				else
				{
					$patientlimit[$key]['last_update'] = '-';
				}

				//send to archiv (only for discharge patients)
				if($patient_item['isdischarged'] == '1' && $patient_item['isarchived'] != '1')
				{
					$patientlimit[$key]['sendtoarchiv'] = '1';
				}
				else
				{
					$patientlimit[$key]['sendtoarchiv'] = '-';
				}

				//send to discharge (only for discharge patients in archiv)
				if($patient_item['isdischarged'] == '1' && $patient_item['isarchived'] == '1')
				{
					$patientlimit[$key]['sendtodischarge'] = '1';
				}
				else
				{
					$patientlimit[$key]['sendtodischarge'] = '-';
				}

				//reactivate patient or show dead method
				if($patient_item['isdischarged'] == '1' && $dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method'] > 0)
				{
					if(strtolower($client_methode[$dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method']]['abbr']) != 'tod' && strtolower($client_methode[$dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method']]['abbr']) != 'verstorben')
					{
						$patientlimit[$key]['notdead'] = '1';
					}
					else
					{
						$patientlimit[$key]['notdead'] = '0';
						$patientlimit[$key]['dead_reactivate'] = $client_methode[$dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method']]['name'];
						$patientlimit[$key]['traffic_status'] = '-';
					}
				}
				else
				{
					$patientlimit[$key]['dead_reactivate'] = '-';
				}

				// check if patient is dead in Patientdeath
				if($patientdeatharray[$patient_item['EpidIpidMapping']['ipid']]['death_date'] != null)
				{
					$patientlimit[$key]['death_date'] = $patientdeatharray[$patient_item['EpidIpidMapping']['ipid']]['death_date'];
					$patientlimit[$key]['dead_reactivate'] = $death_description; ////overwrite the previous setting in patient is dead (btn)
					$patientlimit[$key]['notdead'] = '0'; //overwrite the previous setting in patient is dead (btn)
					$patientlimit[$key]['traffic_status'] = '-';
				}

				//admit patient from standby
				if($patient_item['isstandby'] == '1')
				{
					$patientlimit[$key]['admitfromstandby'] = '1';
				}
				else
				{
					$patientlimit[$key]['admitfromstandby'] = '-';
				}

				// send deleted stanby back to standbylist
				if($patient_item['isstandbydelete'] == '1' && $patient_item['isdelete'] != '1')
				{
					$patientlimit[$key]['deletestandby'] = '1';
				}
				else
				{
					$patientlimit[$key]['deletestandby'] = '-';
				}

				if(!empty($patient_icons_data[$patient_item['EpidIpidMapping']['ipid']]['icons_system']))
				{
					$patientlimit[$key]['icons'] = $patient_icons_data[$patient_item['EpidIpidMapping']['ipid']];
					$patientlimit[$key]['icons']['icons_system'] = array_unique($patientlimit[$key]['icons']['icons_system']);
				}

				$patientlimit[$key]['icon_data'] = $icons_data[$patient_item['EpidIpidMapping']['ipid']];
				$patientlimit[$key]['icon_data']['last'] = $icons_data['last'][$patient_item['EpidIpidMapping']['ipid']];
				$patientlimit[$key]['icon_data']['last_diagno_act'] = $icons_data['last_diagno_act'][$patient_item['EpidIpidMapping']['ipid']];
				$patientlimit[$key]['icon_data']['current_maintenancestage'] = $icons_data['current_maintenancestage'][$patient_item['EpidIpidMapping']['ipid']];
				$patientlimit[$key]['icon_data']['memo'] = $icons_data['memo_data'][$patient_item['EpidIpidMapping']['ipid']]['memo'];
				$patientlimit[$key]['icon_data']['allergies'] = $icons_data['allergies_data'][$patient_item['EpidIpidMapping']['ipid']]['allergies'];
				//ispc-1533
				if (!empty ($icons_data['tourplan_settings'][$patient_item['EpidIpidMapping']['ipid']])){
					$patientlimit[$key]['icon_data']['tourplan_settings'] = $icons_data['tourplan_settings'][$patient_item['EpidIpidMapping']['ipid']] ;
					$patientlimit[$key]['icon_data']['tourplan_settings_users'] = $icons_data['tourplan_settings_users'];
				}
				//ISPC-1897 germination = bacteria icon
				if (!empty ($icons_data['germination_status'][$patient_item['EpidIpidMapping']['ipid']])){
					$patientlimit[$key]['icon_data']['germination_status'] = $icons_data['germination_status'][$patient_item['EpidIpidMapping']['ipid']];
				}
                //Transfer ISPC clinic to ISPC //Maria:: Migration CISPC to ISPC 22.07.2020
                if (!empty ($icons_data['calculate_image'][$patient_item['EpidIpidMapping']['ipid']])){
                    $patientlimit[$key]['icon_data']['calculate_image'] = $icons_data['calculate_image'][$patient_item['EpidIpidMapping']['ipid']];
                }
				
                //IM-12
                if (!empty ($icons_data['clinic_case_icon'][$patient_item['EpidIpidMapping']['ipid']])){
                    $patientlimit[$key]['icon_data']['clinic_case_icon'] = $icons_data['clinic_case_icon'][$patient_item['EpidIpidMapping']['ipid']];
                }
				
				if($client_paths)
				{
					// display organisation statuses
					if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $last_status))
					{
						foreach($last_status[$patient_item['EpidIpidMapping']['ipid']] as $k_path => $v_data)
						{
							if($k_path != 'admission_todo')
							{
								$patientlimit[$key]['org_shortcuts'][] = $v_data['shortcut'];
								$patientlimit[$key]['org_color'][] = $v_data['status'];
							}
							else
							{
								foreach($v_data as $k_arr_adm => $v_arr_adm)
								{
									$patientlimit[$key]['org_shortcuts'][] = $v_arr_adm['shortcut'];
									$patientlimit[$key]['org_color'][] = $v_arr_adm['status'];
								}
							}
						}
					}
					else
					{
						$patientlimit[$key]['org_shortcuts'][] = '';
						$patientlimit[$key]['org_color'][] = '';
					}
				}
				else
				{
					$patientlimit[$key]['org_shortcuts'][] = '';
					$patientlimit[$key]['org_color'][] = '';
				}

				// display or not the diagnosis column
				if(in_array('21', $user_columns2tab))
				{
					//add main diagnosis
					if(!empty($diagnosisarr[$patient_item['EpidIpidMapping']['ipid']]))
					{

						$patientlimit[$key]['diagnosis'] = $diagnosisarr[$patient_item['EpidIpidMapping']['ipid']];
					}
					else
					{
						$patientlimit[$key]['diagnosis'] = '-';
					}
				}

				// display or not the family_doctor column
				if(in_array('23', $user_columns2tab))
				{
					//add family_doctor
					if(strlen($family_doctors_details[$patient2family_docs[$patient_item['EpidIpidMapping']['ipid']]]) > 0)
					{

						$patientlimit[$key]['family_doctor'] = $family_doctors_details[$patient2family_docs[$patient_item['EpidIpidMapping']['ipid']]];
					}
					else
					{
						$patientlimit[$key]['family_doctor'] = '-';
					}
				}
				// display or not the kontactnumber column
				if(in_array('24', $user_columns2tab))
				{
					//ISPC-2045 -TODO-1280
					if ( ! empty($patient_item['PatientContactphone']) ) {
						$PatientContactphone = array_column($patient_item['PatientContactphone'], 'phone_number');
						$patientlimit[$key]['contact_number'] = implode("; ", $PatientContactphone);
					} else {
						$patientlimit[$key]['contact_number'] = $patient_item['kontactnumber'];
					}
				}
				
				
				// display or not the column
				if(in_array('26', $user_columns2tab))
				{
					$patientlimit[$key]['lastdate_contactform'] = $patient_last_date[$patient_item['EpidIpidMapping']['ipid']];
				}
				
				// display or not the column
				if(in_array('27', $user_columns2tab))
				{
					
				//$nursing_service = "";
					/* if(!empty($pfledata['results'][$patient_item['EpidIpidMapping']['ipid']]))
					{
						foreach($pfledata['results'][$patient_item['EpidIpidMapping']['ipid']] as $val_pfle)
						{
							$nursing_service .= $val_pfle['nursing'] . ', ';
						}
						$patientlimit[$key]['nursing_service'] = $nursing_service;
					}
					else
					{
						$patientlimit[$key]['nursing_service'] = '-';
					} */
					
					if(!empty($pat_nursing_service[$patient_item['EpidIpidMapping']['ipid']])){
						$patientlimit[$key]['nursing_service'] = implode(", ",$pat_nursing_service[$patient_item['EpidIpidMapping']['ipid']]);
					}
					else
					{
						$patientlimit[$key]['nursing_service'] = '-';
					}
					
					
					
				}
				
				// display or not the column
				if(in_array('28', $user_columns2tab))
				{
						
					if(!empty($pat_vws[$patient_item['EpidIpidMapping']['ipid']])){
						$patientlimit[$key]['voluntary'] = implode(";<br/ >",$pat_vws[$patient_item['EpidIpidMapping']['ipid']]);
					}
					else
					{
						$patientlimit[$key]['voluntary'] = '-';
					}	
						
				}
				
				if($reqestedTab == 'standby')
				{
					if($inactive_dischargedata[$patient_item['EpidIpidMapping']['ipid']]){
// 						$patientlimit[$key]['last_discharge'] = strtotime($inactive_dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_date_full']);

// 						$patientlimit[$key]['last_discharge'] = date('d.m.Y',strtotime($inactive_dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_date_full']));
						$patientlimit[$key]['last_discharge'] = date("d.m.Y", strtotime('+1 day', strtotime($inactive_dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_date_full'])));
					}
				}
				
				if(in_array('29', $user_columns2tab))
				{
				
					if(!empty($pat_health_insurance[$patient_item['EpidIpidMapping']['ipid']])){
						$patientlimit[$key]['health_insurance'] = implode(";<br/ >",$pat_health_insurance[$patient_item['EpidIpidMapping']['ipid']]);
					}
					else
					{
						$patientlimit[$key]['health_insurance'] = '-';
					}
				
				}				
				
				
			}

			$this->view->standby_page = $standby_page;
// print_r($patientlimit); exit;
			$this->view->patientlist = $patientlimit;
			$this->view->current_page = $current_page;
			$this->view->no_pages = $no_pages;
			$this->view->no_patients = $no_patients;
			$this->view->orderby = $_REQUEST['ord'];
			$this->view->sort = $_REQUEST['sort'];
			$this->view->verdonet_array = array('0' => 'keine', '1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');
			$this->view->srcolor_array = array('0' => 'stsl_keine', '1' => 'stsl_red', '2' => 'stsl_green', '3' => 'stsl_keine');

			if(count($_REQUEST['columns']) != "0" && $_REQUEST['savecols'] == "1")
			{ //save
// 			print_R($allTabsColumns[$tabs[$reqestedTab]]); exit;
				foreach($allTabsColumns[$tabs[$reqestedTab]] as $k => $cid)
				{
					$column_array[] = $cid;
				}
				if(!empty($column_array))
				{
					$drop = Doctrine_Query::create()
						->delete("*")
						->from('Columns2users')
						->where('user_id ="' . $logininfo->userid . '"')
						->andWhereIn("c2t_id", $column_array);
					$delete = $drop->execute();
				}

				foreach($_REQUEST['columns'] as $columnid)
				{
					if($allTabsColumns[$tabs[$reqestedTab]][$columnid] != "0")
					{
						$records[] = array(
							"c2t_id" => $allTabsColumns[$tabs[$reqestedTab]][$columnid],
							"user_id" => $logininfo->userid
						);
					}
				}

				if(!empty($records))
				{
					$collection = new Doctrine_Collection('Columns2users');
					$collection->fromArray($records);
					$collection->save();
				}
			}
			
			
			if ($this->getParam('__action') == 'fetchMobileList') {
			    //return for the mobile version... just a plain json i can work with .. not hardcoded html
			    $patientsMobile = array_map(function($i){
			        
			        $traffic_status = null;
			        if (in_array(6, $i['icons']['icons_system']) 
			            && ! empty($i['icon_data']['show']['image']) 
			            //&& ($this->logininfo->usertype == "SA" || in_array('6', $allowed_icons['system'])) //removed this because $allowed_icons is empty
		            ) 
			        {
			            $traffic_status = [
			                'background' => $i['icon_data']['show']['color'],
			                'src'        => ! empty($i['icon_data']['show']['image']) ? 'icons_system/' . $i['icon_data']['show']['image'] : '',
			                'title'      => ! empty($i['icon_data']['show']['name']) ? $this->translate($i['icon_data']['show']['name']) : '',
			            
			            ];
			        }
			        
			        $debug = [
			            $i['icons']['icons_system'],
			            $allowed_icons
			            
			        ];
			        
			        
			        return [
			        'traffic_status' => $traffic_status,
			        'last_name' => $i['lastname'],
			        'first_name' => $i['firstname'],
			        'epid' => $i['EpidIpidMapping']['epid'],
			        'enc_id' => $i['enc_id'],
			            
		            '_debug' => APPLICATION_ENV != 'production' ? $debug :  null,
			            
			            
			    ];}, $patientlimit);
			     
			    $this->_helper->viewRenderer->setNoRender(true);
			    
			    $response = array();
			    $response['draw'] = (int)$this->getRequest()->getParam('draw'); //? get the sent draw from data table
			    $response['recordsTotal'] = $no_patients;
			    $response['recordsFiltered'] = $no_patients;//count($patientsMobile);
			    $response['data'] = $patientsMobile;
			     
			    ob_end_clean();
			    ob_start();
			     
			    $json = Zend_Controller_Action_HelperBroker::getStaticHelper('json');
			    $json->sendJson($response); 
			    
			    exit; //for readability
			}
			
		}


        // On 19.11.2019 Ancuta added excel export to this function  for ISPC-2409			
		public function get_patients_details($params)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$groupid = $logininfo->groupid;
			$this->view->usertype = $logininfo->usertype;
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');
			$this->_helper->layout->setLayout('layout_ajax');
			$master_group = Usergroup::getMasterGroup($groupid);
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
			
			$sort  = $params['sortdir'];
			
			// permissions
			/* #### Check if client has permission to see the organisation column ################## */
			$this->view->org_column = 0;
			$organisationprevileges = new Modules();
			$display_org = $organisationprevileges->checkModulePrivileges("72", $logininfo->clientid);
			if($display_org)
			{
			    $org_column = 1;
			} else{
			    $org_column = 0;
			}
			
			$user2location_m = $organisationprevileges->checkModulePrivileges("94", $logininfo->clientid);
			if($user2location_m)
			{
			    $user2location = 1;
			} else{
			    $user2location = 0;
			}
			
			
			$removed_columns_array = array("12","13","16","17","18","19");
			
            foreach($params['columns'] as $column_id => $column_data){
                if(!in_array($column_data['id'],$removed_columns_array)){
                    $column_array[$column_data['id']] = $column_data['id'];
                }
                if(in_array($column_data['id'],$removed_columns_array)){
                    unset($params['columns'][$column_data['id']]);
                }
			}
			
			
			if($org_column != 1){
			    unset($column_array['20']); // remove org column - ic client has no permissions for it
			    unset($params['columns']['20']); // remove org column - ic client has no permissions for it
			}
			
			if($user2location != 1){
			    unset($column_array['25']); // remove column - ic client has no permissions for Heimarzt
			    unset($params['columns']['25']);
			}
			
    		if(!empty($params['ipids'])){
    		    
    			/* --------- get initial ipids and apply patient master filters ---------------------------- */
    			$patient = Doctrine_Query::create()
    				->select('p.ipid,e.epid,p.familydoc_id,p.isstandby,p.isdischarged,p.isstandbydelete, p.traffic_status')
    				->from('PatientMaster p')
    				->where('p.isdelete = 0')
    				->andWhereIn('p.ipid',$params['ipids']);
    			
    			//ISPC-2045 - get kontact-phone, TODO-1280
    			$patient->leftJoin("p.PatientContactphone pcp ON p.ipid = pcp.ipid AND pcp.isdelete IN ('0')");
    			$patient->addSelect("pcp.phone, pcp.mobile");
    			
    			$patient->leftJoin("p.EpidIpidMapping e");
   				$patient->andWhere('e.clientid = ' . $logininfo->clientid);
    
   				
    			$patienidt_array = $patient->fetchArray();
    			$patienidt_array[9999999] = "xx";
    
    			$patient_filter_ipids[] = '999999999';
    			foreach($patienidt_array as $k_pat_idtarray => $v_pat_idtarray)
    			{
    				$patient_filter_ipids[] = $v_pat_idtarray['ipid'];
    				$patient2family_docs[$v_pat_idtarray['ipid']] = $v_pat_idtarray['familydoc_id'];
    				$family_docs_ids[] = $v_pat_idtarray['familydoc_id'];
    
    				$patient_filter_details[$v_pat_idtarray['ipid']] = $v_pat_idtarray;
    			}
    
    			/* --------------- get discharge methods  ------------------------------------ */
    			$dis = new DischargeMethod();
    			$discharge_methods = $dis->getDischargeMethod($clientid, 0);
    
    			foreach($discharge_methods as $dischargeM)
    			{
    
    				if($dischargeM['abbr'] == "TOD" || $dischargeM['abbr'] == "TODNA")
    				{
    					$death_methods[] = $dischargeM['id'];
    					$death_description = $dischargeM['description'];
    				}
    			}
    			$death_methods = array_values(array_unique($death_methods));
    
    			/* ---------------Eigene Patienten: show dead patients or not   ------------------------------------ */
    			 
				//get patients discharge details
				$patient_discharge = PatientDischarge::get_patients_discharge($patient_filter_ipids);

				//check if method is not in discharge dead
				$dead_patients_ipids[] = '9999999999';
				foreach($patient_discharge as $k_pat_dis => $v_pat_dis)
				{
					//get dead patient ipids to be excluded
					if(in_array($v_pat_dis['discharge_method'], $death_methods))
					{
						$dead_patients_ipids[] = $v_pat_dis['ipid'];
					}
				}

				//get patients death by death button
				$death_button_data = PatientDeath::get_patients_death($patient_filter_ipids);

				$death_ipids[] = '999999999';
				foreach($death_button_data as $k_pat_dead => $v_pat_dead)
				{
					$death_ipids[] = $v_pat_dead['ipid'];
				}

				$dead_patients_ipids = array_values(array_unique($dead_patients_ipids));
				$dead_patients = array_values(array_unique($dead_patients));
    
    			/* ------------------------ ICONS ------------------------------------ */
    			$sys_icons = new IconsMaster();
    			$client_icons = new IconsClient();
    			$patient_icons = new IconsPatient();
    
    			if($_REQUEST['icon_sys'])
    			{
    				$system_icons = $sys_icons->get_system_icons($clientid, $_REQUEST['icon_sys']);
    
    				$patientipidsarr[] = '999999999';
    				foreach($_REQUEST['icon_sys'] as $k_sys_icon => $v_sys_icon)
    				{
    					if(!empty($v_sys_icon) && !empty($patient_filter_ipids))
    					{
    						if($v_sys_icon != '6' && $v_sys_icon != '3')
    						{
    							if($v_sys_icon == '25') // family doctor
    							{
    								$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, $patient2family_docs);
    							}
    							elseif($v_sys_icon == '31') // diagnosis
    							{
    								$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, true);
    							}
    							elseif($v_sys_icon == '32') // medication
    							{
    								$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, true);
    							}
    							else
    							{
    								$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids);
    							}
    						}
    						else
    						{
    							if(!empty($_REQUEST['icon_sys_status'][$k_sys_icon]))
    							{
    								$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, $_REQUEST['icon_sys_value'][$k_sys_icon], $_REQUEST['icon_sys_status'][$k_sys_icon]);
    							}
    							else
    							{
    								$data[$system_icons[$v_sys_icon]['function']] = $patient_icons->{$system_icons[$v_sys_icon]['function']}($patient_filter_ipids, $_REQUEST['icon_sys_value'][$k_sys_icon]);
    							}
    						}
    
    						$patients_icons_details = $data[$k_sys_icon];
    						$patient_filter_ipids = array(); //reset ipids
    						$patient_filter_ipids = array_merge($patient_filter_ipids, $data[$system_icons[$v_sys_icon]['function']]['ipids']);
    					}
    				}
    
    				$pat_ipidsarr = $patient_filter_ipids;
    			}
    			else
    			{
    				$pat_ipidsarr = $patient_filter_ipids;
    			}
    			$pat_ipidsarr = array_values(array_unique($pat_ipidsarr));
  
    			foreach($pat_ipidsarr as $kp => $vpat_ipid)
    			{
    				$pat_ipids_details[$vpat_ipid] = $patient_filter_details[$vpat_ipid];
    				$patient_ipids_simple[] = $patient_filter_details[$vpat_ipid]['ipid'];
    			}
    
    			if(empty($pat_ipids_details))
    			{
    				$pat_ipids_details[] = "XXX";
    			}
    
    			if(empty($patient_ipids_simple))
    			{
    				$patient_ipids_simple[] = "XXX";
    			}
    
    			$modules = new Modules();
    			if($modules->checkModulePrivileges("67", $clientid))
    			{
    				$sgbvperms = true;
    			}
    			else
    			{
    				$sgbvperms = false;
    			}
    
    			if($logininfo->usertype != 'SA')
    			{
    				//use mastergroupid not groupid
    				$allowed_icons = GroupIconsDefaultPermissions::getGroupAllowedIcons($master_group, $clientid);
    			}
    			else
    			{
    				//$allowed_icons = false;
    				$allowed_icons = array(
    				    'system' => false,
    				    'custom' => false
    				);
    			}
    
    			$this->view->allowed_icons = $allowed_icons;
    
    
    			$all_system_icons = $sys_icons->get_system_icons($clientid);
    			foreach($all_system_icons as $k_all_sys_icons => $v_all_sys_icons)
    			{
    				if($k_all_sys_icons == '26' && $sgbvperms)
    				{
    					$system_icons_perms[$k_all_sys_icons] = $v_all_sys_icons;
    				}
    				else if($k_all_sys_icons != '26')
    				{
    					$system_icons_perms[$k_all_sys_icons] = $v_all_sys_icons;
    				}
    			}
    
    			$this->view->sys_icons = $system_icons_perms;
    			$this->view->client_icons = $client_icons->get_client_icons($clientid);
    
    			//get system icon column data!
    			$icons_data = array();
    			foreach($all_system_icons as $ks_sys_icon => $vs_sys_icon)
    			{
    				if($vs_sys_icon['function'] != 'go_to_visitform') //exclude visitform icon from filtering
    				{
    					if($vs_sys_icon['function'] == "get_patients_status")
    					{
    						$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipids_details, false, false, $details_included = true);
    					}
    					elseif($vs_sys_icon['function'] == "get_patient_medication")
    					{
    						$icon_result = $patient_icons->{$vs_sys_icon['function']}($patient_ipids_simple, true);
    					}
    					elseif($vs_sys_icon['function'] == "get_patient_diagnosis")
    					{
    						$icon_result = $patient_icons->{$vs_sys_icon['function']}($patient_ipids_simple, true);
    					}
    					else
    					{
    						$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipidsarr);
    					}
    
    					if($icon_result)
    					{
    						$icons_data = array_merge_recursive($icons_data, $icon_result);
    
    						$patients_icons_details[$ks_sys_icon] = $icons_data['ipids'];
    						$patients_icons_details[$ks_sys_icon] = array_values(array_unique($icon_result['ipids']));
    					}
    				}
    			}
    
    
    			//reverse previous arr $patients_icons_details and construct mapped array
    			foreach($patients_icons_details as $id_sys_icon => $icon_ipids)
    			{
    				if(is_numeric($id_sys_icon)) //make sure this key is always numeric... no need for others
    				{
    					foreach($icon_ipids as $k_icon_ipid => $v_icon_ipid)
    					{
    						if($v_icon_ipid != '999999999')
    						{
    							$patient_icons_data[$v_icon_ipid]['icons_system'][] = $id_sys_icon;
    						}
    					}
    				}
    			}
    
    			//get custom icons for all patients
    			$c_custom_icons = $patient_icons->get_patient_icons($pat_ipidsarr);
    
    			foreach($c_custom_icons as $k_col_cust_icons => $v_col_cust_icons)
    			{
    				$patient_icons_data[$v_col_cust_icons['ipid']]['icons_custom'][] = $v_col_cust_icons['icon_id'];
    			}
    
    			$patienidtarray[9999999] = "xx";
    			foreach($patienidt_array as $k_pat_details => $v_pat_details)
    			{
    				if(in_array($v_pat_details['ipid'], $pat_ipidsarr))
    				{
    					$patienidtarray[] = $v_pat_details;
    				}
    			}
    
    			foreach($patienidtarray as $patientid)
    			{
    				$patientipidsarr[] = $patientid['ipid'];
    			}
    
    			$epidsarfinal[] = "xx";
    			foreach($patienidtarray as $epidgg)
    			{
    				$epidsar = $epidgg['EpidIpidMapping'];
    				$epidsarfinal[] = $epidsar['epid'];
    			}
  
    
    			//get patients locations and location order
    			if(in_array('7', $column_array) || in_array('25', $column_array)) // 25 location_team_leader
    			{ // Display only if column location it is needed
    				$orderbyloc = new PatientLocation();
    				$patlocdet = $orderbyloc->getOrderbyLocation($patienidtarray, $logininfo->clientid);
    				
    				$orderbylocation = $patlocdet['orderbylocation'];
    				$patient2location = $patlocdet['patient2location'];
    				$patient2commlocation = $patlocdet['patient2commlocation'];
    				$patient2station = $patlocdet['patient2station'];
    				$patient2home = $patlocdet['patient2home'];
    				
    				if(in_array('25', $column_array)) { // 25 location_team_leader
    					$patient2location_id = $patlocdet['patient2location_id'];
    					foreach($patient2location_id as $lipid => $plocation_id){
    						$used_locations[] = $plocation_id;
    					}
    				}
    				
    				if(is_array($orderbylocation))
    				{
    					foreach($orderbylocation as $obl)
    					{
    						$orderbylocation_str .= '"' . $obl . '",';
    					}
    				}
    			}
    
    			
    			if(in_array('25', $column_array)) { // 25 location_team_leader
    			
    				if(!empty($used_locations)){
    					// get alredy assigend users to location
    					$users2location_array = Users2Location::get_location_users($used_locations);
    					
    					$team_leader = "";
    					foreach($users2location_array as $k=>$vul){
    						$users2location[] = $vul['user'];
    						if($vul['leader'] == "1"){
    							$location_team_leaders[$vul['location']] = $vul['user'];
    						}
    					}
    					
    					if(!empty($users2location)){
    						$user_details = User::getUserByClientid($logininfo->clientid);
    						foreach($user_details as $k=>$user_data){
    							$usr_details[$user_data['id']]['name'] = $user_data['user_title'].' '.$user_data['last_name'].', '.$user_data['first_name']; 
    						}
    						foreach($users2location as $u_id){
    							$team_leader_data[$u_id] = $usr_details[$u_id]['name']; 
    						}
    					}
    					
    				}
    			}
    			
    			// get private patient
    			$ppC = Doctrine_Query::create()
    				->select('*')
    				->from('PatientHealthInsurance')
    				->whereIn('ipid', $patientipidsarr)
    				->andWhere('privatepatient = "1"');
    			$pPatientsC = $ppC->fetchArray();
    
    			$privPatient = array('xx');
    			foreach($pPatientsC as $PrivatePatient)
    			{
    				$privPatient[] = $PrivatePatient['ipid'];
    			}
    
    			//get patient discharge & dot
    			if($params['sortby'] == 'dot')
    			{
    				$dis_ord = 'dot';
    			}
    			else
    			{
    				$dis_ord = 'discharge_date';
    			}
    
    			
				$disdata = new PatientDischarge();
				$dischargedata = $disdata->getPatientsDischargeDetails($patienidtarray, $dis_ord, $sort);

				$client_methode = array();
				foreach($dischargedata as $nr_value)
				{
					foreach($discharge_methods as $name_value)
					{
						if($nr_value['discharge_method'] == $name_value['id'])
						{
							$client_methode[$nr_value['discharge_method']]['name'] = $name_value['description'];
							$client_methode[$nr_value['discharge_method']]['abbr'] = $name_value['abbr'];
						}
					}
				}

				// get dead patient -> dead buton
				$disddata = new PatientDeath();
				$patientdeatharray = $disddata->getPatientsDeathDetails($patienidtarray);

				foreach($dischargedata as $discharge_key => $discharge_item)
				{
					$orderbydischarge_str .= '"' . $discharge_key . '",';
				}
    
    			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,TRIM(CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)) as firstname,";
    			$sql .= "TRIM(CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1))  as middlename,";
    			$sql .= "TRIM(CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))  as lastname,";
    			$sql .= "TRIM(CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1))  as title,";
    			$sql .= "TRIM(CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1))  as salutation,";
    			$sql .= "TRIM(CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1))  as street1,";
    			$sql .= "TRIM(CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1))  as street2,";
    			$sql .= "TRIM(CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1))  as zip,";
    			$sql .= "TRIM(CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1))  as city,";
    			$sql .= "TRIM(CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1)) as phone,";
    			$sql .= "TRIM(CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1))  as mobile,";
    			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex,";
    			$sql .= "TRIM(CONVERT(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1)) as kontactnumber";
    
    			// if super admin check if patient is visible or not
    			if($logininfo->usertype == 'SA')
    			{
    				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as firstname, ";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as middlename, ";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as lastname, ";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as title, ";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as salutation, ";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as street1, ";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as street2, ";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as zip, ";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as city, ";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as phone, ";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as mobile, ";
    				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
    				$sql .= "IF(p.isadminvisible = 1,TRIM(CONVERT(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1)),'" . $hidemagic . "') as kontactnumber";
    			}
    
    			foreach($patienidtarray as $patientid)
    			{
    				$patientipidsfinal[] = $patientid['ipid'];
    			}
 

    			switch($params['sortby'])
    			{
    
    				case 'fn':
    					$orderby = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.first_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci ' . $sort;
    					break;
    
    				case 'ln':
    					$orderby = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci ' . $sort;
    					break;
    
    				case 'dob':
    					$orderby = 'p.birthd ' . $sort;
    					break;
    
    				case 'adm':
    					$orderby = 'p.admission_date ' . $sort;
    					break;
    
    				case 'lastup':
    					$orderby = 'p.last_update ' . $sort;
    					break;
    
    				case 'dis':
    				case 'dot':
    					$orderby = 'FIELD(e__ipid, ' . substr($orderbydischarge_str, 0, -1) . '), e__ipid';
    					break;
    
    				case 'dot':
    					$orderby = 'FIELD(e__ipid, ' . substr($orderbydischarge_str, 0, -1) . '), e__ipid';
    					break;
    
    				case 'loc':
    					$orderby = 'FIELD(e__ipid, ' . substr($orderbylocation_str, 0, -1) . ') ' . $sort . ', e__ipid';
    					break;
    
    				case 'id':
    					$orderby = 'e.epid_num ' . $sort;
    					break;
    
    				default:
    					$orderby = 'TRIM(CONVERT(CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) using latin1)) COLLATE latin1_german2_ci ' . $sort;
    					break;
    			}
    
    			$patient = Doctrine_Query::create()
    				->select($sql)
    				->from('PatientMaster p')
    				->whereIn("p.ipid", $patientipidsfinal)
    				->leftJoin("p.EpidIpidMapping e")
    				->andWhere('e.clientid = ' . $logininfo->clientid);
    			// ISPC-2045 - get kontact-phone, TODO-1280
    			$patient->leftJoin("p.PatientContactphone pcp ON p.ipid = pcp.ipid AND pcp.isdelete IN ('0')");
    			$patient->addSelect("pcp.phone, pcp.mobile");
    			$patient->orderby($orderby);
    			$patientlimit = $patient->fetchArray();
 
    			foreach($patientlimit as $k_pat_limit => $v_pat_limit)
    			{
    				$pat_limit_ipids[] = $v_pat_limit['EpidIpidMapping']['ipid'];
    				$pat_limit_epids[] = $v_pat_limit['EpidIpidMapping']['epid'];
    
    				if(strlen($v_pat_limit['street1']) > 0)
    				{
    					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['street1'] . '<br />';
    				}
    				if(strlen($v_pat_limit['zip']) > 0)
    				{
    					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['zip'] . ' ';
    				}
    				if(strlen($v_pat_limit['city']) > 0)
    				{
    					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['city'];
    				}
    
    				$parient_address[$v_pat_limit['EpidIpidMapping']['ipid']] = $address[$v_pat_limit['EpidIpidMapping']['ipid']];
    			}
    
    			if(count($pat_limit_ipids) == '0')
    			{
    				$pat_limit_ipids[] = '999999999';
    			}
    
    			
    			if(in_array('26', $column_array))
    			{ // Get data- only if the column is needed
    			
    			    //get doctor and nurse users
    			    //get all related users details
    			    $master_groups_first = array('4', '5');
    			    	
    			    $client_user_groups_first = Usergroup::getUserGroups($master_groups_first);
    			    	
    			    foreach($client_user_groups_first as $k_group_f => $v_group_f)
    			    {
    			        $master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
    			    }
    			    	
    			    $client_users = User::getClientsUsers($logininfo->clientid);
    			    	
    			    $nurse_users = array();
    			    $doctor_users = array();
    			    foreach($client_users as $k_cuser_det => $v_cuser_det)
    			    {
    			        $master_user_details[$v_cuser_det['id']] = $v_cuser_det;
    			        if(in_array($v_cuser_det['groupid'], $master2client['5']))
    			        {
    			            $nurse_users[] = $v_cuser_det['id'];
    			        }
    			        else if(in_array($v_cuser_det['groupid'], $master2client['4']))
    			        {
    			            $doctor_users[] = $v_cuser_det['id'];
    			        }
    			    }
    			    
    			    if(empty($doctor_users)){
    			        $doctor_users[] = "999999999";
    			    }
    			    
        			$deleted_visits = Doctrine_Query::create()
        			->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
        			->from('PatientCourse')
        			->wherein('ipid',$pat_limit_ipids)
        			->andWhere('wrong=1')
        			->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
        			->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'" . '')
					->andWhere('source_ipid = ""');
        			$deleted_visits_array = $deleted_visits->fetchArray();
        				
        			$del_visits['contact_form'][] = '9999999999';
        				
        			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
        			{
        			    $del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
        			}
    			
        			$select = Doctrine_Query::create()
        			->select('*')
        			->from('ContactForms')
        			->wherein('ipid',$pat_limit_ipids)
        			->andWhereNotIn('id',$del_visits['contact_form'])
        			->andWhere('parent = "0"')
        			->wherein('create_user',$doctor_users)
        			->orderby('ipid, date ASC');
        			$select_res = $select->fetchArray();

        			if($select_res)
        			{
        			    foreach($select_res as $k_cf => $v_cf)
        			    {
        			        $select_res_ipid[$v_cf['ipid']][] = $v_cf;
        			    }
        			
        			    foreach($select_res_ipid as $k_date_item => $v_date_items)
        			    {
        			        $last_date_item = end($v_date_items);
        			        $patient_last_date[$last_date_item['ipid']] =date('d.m.Y', strtotime($last_date_item['billable_date']));
        			    }
        			}
    			}
	
    			//ISPC-1816
    			/* ---------------- get Nursing service -------------------------- */
    			$pat_nursing_service = array();
    			if(in_array('27', $column_array))
    			{ 	
    				// Get data- only if the column is needed
	    			$pfle = new PatientPflegedienste();
	    			$pfledata = $pfle->get_multiple_patient_pflegedienste($pat_limit_ipids);
	    			
	    			foreach($pfledata['results'] as $pfl_k=>$val_pfles)	
	    			{
	    				foreach($val_pfles as $val_pfle)	
	    				{
	    					//ISPC-1829 add phone number
	    					$pat_nursing_service[$pfl_k][] = $val_pfle['nursing'] ."<br/>".$val_pfle['phone_practice'] ; 
	    					// Formezi arrayul avand ca cheie ipid-ul pacientului
	    					// array key = patient ipid
	    				}
	    			}	
    			}
    			//ISPC-1816
    			/* ---------------- get VW -------------------------- */
    			if(in_array('28', $column_array))
    			{ // Get data- only if the column is needed
	    			$vws = new PatientVoluntaryworkers();
	    			$vwsdata = $vws->get_patient_voluntaryworkers($pat_limit_ipids, true);
	    			
	    			$pat_vws = array();
	    			foreach($vwsdata as $vwdata)
	    			{
	    				if($vwdata['master']['phone'] == '') {
	    					$pat_vws[$vwdata['ipid']][] = $vwdata['master']['first_name']." ".$vwdata['master']['last_name'];
	    				}
	    				else
	    				{
	    					$pat_vws[$vwdata['ipid']][] = $vwdata['master']['first_name']." ".$vwdata['master']['last_name'].", ".$vwdata['master']['phone']; 
	    					// array avand ca cheie ipid-ul pacientului
	    				}
	    			
	    			}
    			}
    			
    			//ISPC-2003
    			/* ---------------- get Health Insurance -------------------------- */
    			if(in_array('29', $column_array))
    			{
    				$pat_health_insurance = array();
    				// Get data- only if the column is needed
    				$healthinsurance = new PatientHealthInsurance();
    				$healthinsurancedata = $healthinsurance->get_multiple_patient_healthinsurance($pat_limit_ipids);
    			
    				foreach($healthinsurancedata as $hli_k=>$val_hli)
    				{
    						$pat_health_insurance[$hli_k][] = $val_hli['company_name'];
    						// array key = patient ipid
    				}
    				
    			}
    			
    			
    			if(in_array('21', $column_array))
    			{ // if the diagnosis column is checked - then get data
    				/* ----------------- Diagnosis --------------------------- */
    				//Get Main diagnosis type
    				$dg = new DiagnosisType();
    				$abb2 = "'HD'";
    				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
    				$comma = ",";
    				$typeid = "'0'";
    				foreach($ddarr2 as $key => $valdia)
    				{
    					$type_id_array[] = $valdia['id'];
    				}
    				if(empty($type_id_array))
    				{
    					$type_id_array[] = "0";
    				}
    				// Get patients - main diagnosis
    				$patdia = new PatientDiagnosis();
    				$dianoarray = $patdia->get_multiple_patients_diagnosis($pat_limit_ipids, $type_id_array);
    
    
    				foreach($dianoarray as $diangosis)
    				{
    					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
    				}
    				foreach($diagnosisarr as $d_key => $d_val)
    				{
    					$diagnosisarr[$d_key] = implode(", ", $d_val);
    				}
    			}
    
    			if(in_array('23', $column_array))
    			{ // if the family_doctor column is checked - then get data
    				/* ----------------- Diagnosis --------------------------- */
    				// Get patients - main diagnosis
    				$fd = new FamilyDoctor();
    				$family_doctors_details = $fd->get_family_doctors_multiple($family_docs_ids,false, true); // true -> get family doctor details (street,zip,city, phone, fax)
    			}
    
    			/* ---------------- get Treated by -------------------------- */
    			if(in_array('10', $column_array))
    			{ // Get data- only if the column is needed
    				$qpas = new PatientQpaMapping();
    				$patientqpa = $qpas->get_patient_assigned_doctors($pat_limit_epids, $logininfo->clientid, "names"); // Get assigned for patients shown on page
    				$patientqpa = $qpas->get_patient_assigned_doctors_ps($pat_limit_epids, $logininfo->clientid,"plane"); // Get assigned for patients shown on page
    			}
     
    			/* ---------------- get patient sapv statuses START ---------------------------------------- */
    			$paths = new OrgPaths();
    			$client_paths = $paths->get_paths($logininfo->clientid);
    			if($client_paths)
    			{
    				//		multiple ipids
    				$data = array();
    				$executed_functions = array();
    				foreach($client_paths as $k_c_path => $v_c_path)
    				{
    					if(!in_array($v_c_path['function'], $executed_functions))
    					{
    
    						if(empty($data))
    						{
    							$data = array();
    						}
    
    						$executed_functions[] = $v_c_path['function'];
    						$retrived_data = $paths->{$v_c_path['function']}($pat_limit_ipids);
    						if($retrived_data)
    						{
    							$data = array_merge_recursive($data, $retrived_data);
    						}
    					}
    				}
    
    				foreach($data as $k_ipid => $v_function_data)
    				{
    					if($k_ipid != '999999999')
    					{
    						foreach($v_function_data as $k_function => $v_function_arr)
    						{
    							foreach($v_function_arr as $k_short => $v_short_status)
    							{
    								if($v_short_status['status'] != "gray" && $v_short_status['status'] != "green")
    								{
    									if($advance[$k_ipid][$k_function] == "1" || count($advance[$k_ipid][$k_function]) == '0')
    									{
    										if($k_function != 'admission_todo')
    										{
    											$last_status[$k_ipid][$k_function]['shortcut'] = $k_short;
    											$last_status[$k_ipid][$k_function]['status'] = $v_short_status['status'];
    
    											if($v_short_status['status'] == "red")
    											{
    												$advance[$k_ipid][$k_function] = 0;
    											}
    											else
    											{
    												$advance[$k_ipid][$k_function] = 1;
    											}
    										}
    										else
    										{
    											$adm_data['shortcut'] = $k_short;
    											$adm_data['status'] = $v_short_status['status'];
    
    											$last_status[$k_ipid][$k_function][] = $adm_data;
    										}
    									}
    								}
    							}
    						}
    					}
    				}
    			}
    
    			/* ---------------------------------------- get patient sapv statuses END ---------------------------------------- */
    			$sapv = new SapvVerordnung();
    			$patient_sapv_data = $sapv->get_today_active_highest_sapv($patientipidsfinal);

    			foreach($patientlimit as $key => $patient_item)
    			{
    				$export_data[$key]['enc_id'] = Pms_Uuid::encrypt($patient_item['id']);
    
    				
    				if(in_array('1', $column_array)) // Epid
    				{
    				    $export_data[$key]['epid'] = $patient_item['EpidIpidMapping']['epid'];
    				}
    				
    				if(in_array('2', $column_array)) // Surname - traffic status - and privat patient
    				{
    				    
    				    if(!empty($patient_item['traffic_status']) && $patient_item['traffic_status'] != '0')
    				    {
    				    
    				        if($patient_item['traffic_status'] == 1)
    				        {
    				            $traffic_status_img = '<img src="'.RES_FILE_PATH .'/images/traffic_g_light.png"  alt="" />';
    				        }
    				        if($patient_item['traffic_status'] == 2)
    				        {
    				            $traffic_status_img = '<img src="'.RES_FILE_PATH .'/images/traffic_y_light.png"  alt="" />';
    				        }
    				        if($patient_item['traffic_status'] == 3)
    				        {
    				            $traffic_status_img = '<img src="'.RES_FILE_PATH .'/images/traffic_r_light.png"  alt="" />';
    				        }
    				        $export_data[$key]['traffic_status'] = $traffic_status_img;
    				    }
    				    else
    				    {
    				        $export_data[$key]['traffic_status'] = '-';
    				    }
    				    
    				    //add private patient
    				    if(in_array($patient_item['EpidIpidMapping']['ipid'], $privPatient))
    				    {
    				        $export_data[$key]['privatepatient'] = '<img src="'.RES_FILE_PATH .'/images/pv1.png"  alt="" />';
    				    }
    				    else
    				    {
    				        $export_data[$key]['privatepatient'] = '';
    				    }
    				    
//     				    $export_data[$key]['lastname'] = $export_data[$key]['traffic_status'].' '.$export_data[$key]['privatepatient'].' '. $patient_item['lastname'];    				    
    				    $export_data[$key]['lastname'] = $patient_item['lastname'];    				    
    				    
    				}
    				
    				if(in_array('3', $column_array)) // First name 
    				{
    				    $export_data[$key]['firstname'] =$patient_item['firstname'];    				    
    				}
    				
    				if(in_array('4', $column_array)) // Date of birth 
    				{
    				    $export_data[$key]['dateofbirth'] = date("d.m.Y",strtotime($patient_item['birthd']));    				    
    				}
    				
    				if(in_array('5', $column_array)) // Admission date 
    				{
    				    $export_data[$key]['admissiondate'] = date("d.m.Y",strtotime($patient_item['admission_date']));    				    
    				}
    			
   				    if(in_array('6', $column_array)){    //Entlassungsdatum - discharge_date
        				$patient_discharge = '';
        				$patient_discharge = $dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_date'];
        
        				if(!empty($patient_discharge) && $patient_discharge != '00.00.0000')
        				{
        					$export_data[$key]['dischargedate'] = date('d.m.Y', strtotime($patient_discharge));
        				}
        				else
        				{
        					$export_data[$key]['dischargedate'] = "-";
        				}
    				}
    				
    				if(in_array('7', $column_array)) // Aufenthaltsort - location details
    				{
    				    $export_data[$key]['location']="";
    				    if(!empty($patient2location[$patient_item['EpidIpidMapping']['ipid']]))
    				    {
    				        if(in_array($patient_item['EpidIpidMapping']['ipid'], $patient2home))
    				        {
    				            $export_data[$key]['location'] = $patient2location[$patient_item['EpidIpidMapping']['ipid']] . '<br/>' . $parient_address[$patient_item['EpidIpidMapping']['ipid']];
    				        }
    				        else
    				        {
    				            $export_data[$key]['location'] = $patient2location[$patient_item['EpidIpidMapping']['ipid']];
    				        }
    				        
    				        if(!empty($patient2station[$patient_item['EpidIpidMapping']['ipid']])){
    				            $export_data[$key]['location'] .= '<br/> -'.$patient2station[$patient_item['EpidIpidMapping']['ipid']].'';
    				        }
    				        
    				        

    				        if(!empty($patient2commlocation[$patient_item['EpidIpidMapping']['ipid']])){
    				            $export_data[$key]['location'] .= '<br/>'.$patient2commlocation[$patient_item['EpidIpidMapping']['ipid']].'';
    				        }
    				        
    				        
    				    }
    				    else
    				    {
    				        $export_data[$key]['location'] = '-';
    				    }
    				}
    				
    				
    				if(in_array('8', $column_array)) // Verordnung
    				{
        				//add VV
        				if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $patient_sapv_data['last']))
        				{
        					$verd_replacer = array("1", "2", "3", "4");
        					$verd_values = array("B", "K", "TV", "VV");
        
        					$export_data[$key]['Verordnung'] = str_replace($verd_replacer, $verd_values, $patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['verordnet']);
//         					$patientlimit[$key]['status'] = $patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['status'];
        				}
        				else
        				{
        					$export_data[$key]['Verordnung'] = 'keine';
//         					$patientlimit[$key]['status'] = '';
        				}
    				}

    				if(in_array('9', $column_array)) // Behandlungsdauer - days of treatment
    				{
    				    if($dischargedata[$patient_item['EpidIpidMapping']['ipid']]['dot'] > 0)
    				    {
    				        $export_data[$key]['daystreated'] = $dischargedata[$patient_item['EpidIpidMapping']['ipid']]['dot'];
    				    }
    				    else
    				    {
    				        $export_data[$key]['daystreated'] = '-';
    				    }
    				}    				
    				

    				if(in_array('10', $column_array)) // Behandelt von -  treated by
    				{ 
        				$treatedby_str = "";
        				if(!empty($patientqpa[$patient_item['EpidIpidMapping']['epid']]))
        				{
        				    foreach($patientqpa[$patient_item['EpidIpidMapping']['epid']] as $val)
        				    {
        				        $treatedby_str .= $val . '<br/>';
        				    }
        				    $export_data[$key]['treatedby'] = $treatedby_str;
        				}
        				else
        				{
        				    $export_data[$key]['treatedby'] = '-';
        				}
    				}

    				if(in_array('11', $column_array)) // Letzte Anderung - lastupdate
    				{
        				if(!empty($patient_item['last_update']) && $patient_item['last_update'] != '00-00-0000 00:00:00')
        				{
        				    $export_data[$key]['lastupdate'] = date('d.m.Y', strtotime($patient_item['last_update']));
        				}
        				else
        				{
        				    $export_data[$key]['lastupdate'] = '-';
        				}
    				}
    				
    				
    				if(in_array('15', $column_array)) // Dead status
    				{
    				    // check if patient is dead in Patientdeath
    				    if($patientdeatharray[$patient_item['EpidIpidMapping']['ipid']]['death_date'] != null)
    				    {
    				        $export_data[$key]['death_date'] = $patientdeatharray[$patient_item['EpidIpidMapping']['ipid']]['death_date'];
    				        $export_data[$key]['reactivatepatient'] = $death_description; ////overwrite the previous setting in patient is dead (btn)
    				    }
    				    
    				    
    				    //reactivate patient or show dead method
    				    if($patient_item['isdischarged'] == '1' && $dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method'] > 0)
    				    {
    				        if($client_methode[$dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method']]['abbr'] != 'TOD' && $client_methode[$dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method']]['abbr'] != 'VERSTORBEN')
    				        {
    				            $export_data[$key]['reactivatepatient'] = $this->view->translate('reactivate');
    				        }
    				        else
    				        {
    				            $export_data[$key]['reactivatepatient'] = $client_methode[$dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_method']]['name'];
    				        }
    				    }
    				    else
    				    {
    				        $export_data[$key]['reactivatepatient'] = '-';
    				    }
    				}    			

    				
    				
    				
    				if(in_array('19', $column_array)) // icons
    				{
    				    if(!empty($patient_icons_data[$patient_item['EpidIpidMapping']['ipid']]['icons_system']))
    				    {
    				        $export_data[$key]['icons'] = $patient_icons_data[$patient_item['EpidIpidMapping']['ipid']];
    				        $export_data[$key]['icons']['icons_system'] = array_unique($export_data[$key]['icons']['icons_system']);
    				    }
    				    
    				    $export_data[$key]['icon_data'] = $icons_data[$patient_item['EpidIpidMapping']['ipid']];
    				    $export_data[$key]['icon_data']['last'] = $icons_data['last'][$patient_item['EpidIpidMapping']['ipid']];
    				    $export_data[$key]['icon_data']['memo'] = $icons_data['memo_data'][$patient_item['EpidIpidMapping']['ipid']]['memo'];
    				    $export_data[$key]['icon_data']['allergies'] = $icons_data['allergies_data'][$patient_item['EpidIpidMapping']['ipid']]['allergies'];
    				}   

    				
    				
    				if(in_array('20', $column_array) && $org_column == 1) // Organisation
    				{
    				    if($client_paths)
    				    {
    				        // display organisation statuses
    				        if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $last_status))
    				        {
    				            foreach($last_status[$patient_item['EpidIpidMapping']['ipid']] as $k_path => $v_data)
    				            {
    				                if($k_path != 'admission_todo')
    				                {
    				                    $export_data_org[$key]['org_shortcuts'][] = $v_data['shortcut'];
    				                    $export_data_org[$key]['org_color'][] = $v_data['status'];
    				                }
    				                else
    				                {
    				                    foreach($v_data as $k_arr_adm => $v_arr_adm)
    				                    {
    				                        $export_data_org[$key]['org_shortcuts'][] = $v_arr_adm['shortcut'];
    				                        $export_data_org[$key]['org_color'][] = $v_arr_adm['status'];
    				                    }
    				                }
    				            }
    				        }
    				        else
    				        {
    				            $export_data_org[$key]['org_shortcuts'][] = '';
    				            $export_data_org[$key]['org_color'][] = '';
    				        }
    				    }
    				    else
    				    {
    				        $export_data_org[$key]['org_shortcuts'][] = '';
    				        $export_data_org[$key]['org_color'][] = '';
    				    }
    				    
    				    
    				    
    				    
    				    
    				    $organisation_shortcuts="";
    				    foreach($export_data_org[$key]['org_shortcuts'] as $ks_short => $v_short)
    				    {
    				        if($params['export_type'] == 'excel'){
        				        $organisation_shortcuts .= $v_short." ";
    				        } else{
        				        $organisation_shortcuts .= "<span style='color:".$export_data_org[$key]['org_color'][$ks_short].";' class='organisation_shortcuts'>".$v_short."</span> &nbsp;";
    				        }
    				    }
    				    
    				    $export_data[$key]['organisation'] = $organisation_shortcuts;
    				    
    				}

    				
    				if(in_array('21', $column_array))//  Diagnosen
    				{
    				    //add main diagnosis
    				    if(!empty($diagnosisarr[$patient_item['EpidIpidMapping']['ipid']]))
    				    {
    				
    				        $export_data[$key]['diagnosis'] = $diagnosisarr[$patient_item['EpidIpidMapping']['ipid']];
    				    }
    				    else
    				    {
    				        $export_data[$key]['diagnosis'] = '-';
    				    }
    				}
    				
    				
    				if(in_array('22', $column_array)) // Verordnungszeitraum
    				{
        				//add VV - period
        				if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $patient_sapv_data['last']))
        				{
        
        					$export_data[$key]['sapv_period'] = date('d.m.Y', strtotime($patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['verordnungbis']));
        				}
        				else
        				{
        					$export_data[$key]['sapv_period'] = ' - ';
        				}
    				}
    				

    				// display or not the family_doctor column
    				if(in_array('23', $column_array))
    				{
    				    //add family_doctor
    				    if(strlen($family_doctors_details[$patient2family_docs[$patient_item['EpidIpidMapping']['ipid']]]) > 0)
    				    {
    				
    				        $export_data[$key]['family_doctor'] = $family_doctors_details[$patient2family_docs[$patient_item['EpidIpidMapping']['ipid']]];
    				    }
    				    else
    				    {
    				        $export_data[$key]['family_doctor'] = '-';
    				    }
    				}
    				

    				// display or not the kontactnumber column
    				if(in_array('24', $column_array))
    				{
   				    	//ISPC-2045 -TODO-1280
   				    	if ( ! empty($patient_item['PatientContactphone']) ) {
   				    		$PatientContactphone = array_column($patient_item['PatientContactphone'], 'phone_number');
   				    		$export_data[$key]['contact_number'] = implode("; ", $PatientContactphone);
   				    	} else {
   				    		$export_data[$key]['contact_number'] = $patient_item['kontactnumber'];
   				    	}
    				}
    				
    
    				if(in_array('25', $column_array)) // Heimarzte - location team lider
    				{
    					if(!empty($patient2location_id[$patient_item['EpidIpidMapping']['ipid']]))
    					{
    						
    						$export_data[$key]['location_team_leader'] = $team_leader_data[$location_team_leaders[$patient2location_id[$patient_item['EpidIpidMapping']['ipid']]]];
    					}
    					else
    					{
    						$export_data[$key]['location_team_leader'] = '-';
    					}
    				}
    				
    				
    				if(in_array('26', $column_array)) // Letzter ärztl. HB
    				{
    				    
    				    if(!empty($patient_last_date[$patient_item['EpidIpidMapping']['ipid']]))
    				    {
        				    $export_data[$key]['lastdate_contactform'] = $patient_last_date[$patient_item['EpidIpidMapping']['ipid']];
    				    }
    				    else 
    				    {
        				    $export_data[$key]['lastdate_contactform'] = '';
    				    }
    				    
    				}
    				//ISPC-1816
    				// NURSE SERVICE = Pflegedienst
    				if(in_array('27', $column_array))
    				{
    				    if(!empty($pat_nursing_service[$patient_item['EpidIpidMapping']['ipid']]))
    				    {
        				    $export_data[$key]['nursing_service'] = implode(",<br>",$pat_nursing_service[$patient_item['EpidIpidMapping']['ipid']]);
    				    }
    				    else 
    				    {
        				    $export_data[$key]['nursing_service'] = '-';
    				    }
    					
    				}
    				//ISPC-1816
    				// voluntary workers = Ehrenamtliche/r
    				if(in_array('28', $column_array))
    				{	
    					if(!empty($pat_vws[$patient_item['EpidIpidMapping']['ipid']]))
    					{
    						$export_data[$key]['voluntary'] = implode(",<br>",$pat_vws[$patient_item['EpidIpidMapping']['ipid']]);
    					}
    					else
    					{
    						$export_data[$key]['voluntary'] = '-';
    					}
    				}
    				
    				//ISPC-2003
    				// Health Insurance
    				if(in_array('29', $column_array))
    				{
    					if(!empty($pat_health_insurance[$patient_item['EpidIpidMapping']['ipid']]))
    					{
    						$export_data[$key]['health_insurance'] = implode(",<br>",$pat_health_insurance[$patient_item['EpidIpidMapping']['ipid']]);
    					}
    					else
    					{
    						$export_data[$key]['health_insurance'] = '-';
    					}
    						
    				}
    				
    				//send to archiv (only for discharge patients)
    				if($patient_item['isdischarged'] == '1' && $patient_item['isarchived'] != '1')
    				{
    					$patientlimit[$key]['sendtoarchiv'] = '1';
    				}
    				else
    				{
    					$patientlimit[$key]['sendtoarchiv'] = '-';
    				}
    				
    				
    
    				//send to discharge (only for discharge patients in archiv)
    				if($patient_item['isdischarged'] == '1' && $patient_item['isarchived'] == '1')
    				{
    					$patientlimit[$key]['sendtodischarge'] = '1';
    				}
    				else
    				{
    					$patientlimit[$key]['sendtodischarge'] = '-';
    				}
    				

    				//admit patient from standby
    				if($patient_item['isstandby'] == '1')
    				{
    					$patientlimit[$key]['admitfromstandby'] = '1';
    				}
    				else
    				{
    					$patientlimit[$key]['admitfromstandby'] = '-';
    				}
    
    				// send deleted stanby back to standbylist
    				if($patient_item['isstandbydelete'] == '1' && $patient_item['isdelete'] != '1')
    				{
    					$patientlimit[$key]['deletestandby'] = '1';
    				}
    				else
    				{
    					$patientlimit[$key]['deletestandby'] = '-';
    				}
    			}
    			if($params['export_type'] == 'excel'){
        			$this->export_xlsx($params['columns'],$export_data);
    			    
    			}else{
        			$this->export_html($params['columns'],$export_data);
    			}
    			
//     			$this->view->patientlist = $patientlimit;
    		}
		}


		private function export_html($columns, $data)
		{
		    $html = "";
		    $html .='<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
		    $html .= '<th width="1%">' . $this->view->translate('no') . '</th>';
		    foreach($columns as $column)
		    {
		        if($column['columnName'] != "image"){
		            $html .= '<th width="10%">' . $this->view->translate($column['columnName']) . '</th>';
		            $columns_ids[] = $column['columnName'];
		        }
		    }
		    $html .= '</tr>';
		
		    $rowcount = 1;
		    foreach($data as $member_id => $row)
		    {
		        $html .='<tr class="row"><td valign="top">' . $rowcount . '</td>';
		        foreach($row as $field => $value)
		        {
		            if(in_array($field,$columns_ids)){
		                $html.= '<td valign="top">' . $value . '</td>';
		            }
		        }
		        $html .='</tr>';
		        $rowcount++;
		    }
		    $html.="</table>";
		
		    $output = "printing";
		
		    if($output == "screen")
		    {
		        $html = '<link href="' . APP_BASE . 'css/members.css?'.date('Ymd', time()).'" rel="stylesheet" type="text/css" />' . $html;
		        echo $html;
		        exit;
		    }
		    elseif($output == "printing")
		    {
		        $html = '<link href="' . APP_BASE . 'css/members.css?'.date('Ymd', time()).'" rel="stylesheet" type="text/css" />' . $html;
		
		        echo $html;
		        echo "<SCRIPT type='text/javascript'>";
		        echo "window.print();";
		        echo "</SCRIPT>";
		        exit;
		    }
		
		}
		
		private function xlsBOF()
		{
		    echo pack("ssssss", 0x809, 0x8, 0x0, 0x10, 0x0, 0x0);
		    return;
		}
		
		private function xlsEOF()
		{
		    echo pack("ss", 0x0A, 0x00);
		    return;
		}
		
		private function xlsWriteNumber($Row, $Col, $Value)
		{
		    echo pack("sssss", 0x203, 14, $Row, $Col, 0x0);
		    echo pack("d", $Value);
		    return;
		}
		
		private function xlsWriteLabel($Row, $Col, $Value)
		{
		    $L = strlen($Value);
		    echo pack("ssssss", 0x204, 8 + $L, $Row, $Col, 0x0, $L);
		    echo $Value;
		    return;
		}
		/**
		 * @author Ancuta
		 * copy fn from MemberCotroller
		 * 19.11.2019
		 * ISPC-2409 
		 * @param unknown $columns
		 * @param unknown $data
		 * @param string $upcoming_birthdays
		 */
		
		private function export_xlsx($columns, $data,$upcoming_birthdays = false)
		{
		    $this->xlsBOF();
		
		    $c = 1;
		    $this->xlsWriteLabel($line, 0, $this->view->translate('no'));
		    foreach($columns as $column)
		    {
		        if($column['columnName'] != "image" && $column['columnName'] != "traffic_status" ){
		            $this->xlsWriteLabel($line, $c, utf8_decode($this->view->translate($column['columnName'])));
		            $c++;
		            $column_names[] = $column['columnName'];
		        }
		    }
		
		    $line++;
		
		    $xlsRow = $line;
		    foreach($data as $member_id => $row)
		    {
		        $i++;
		        $this->xlsWriteNumber($xlsRow, 0, "$i");
		        $t = 1;
		
		
		        //TODO-1056 >> associative arrays should NOT be treated as sequential
		        foreach ($column_names as $column) {
		
		            $value = isset($row[$column]) ? $row[$column] : "";
		
		            /*
		             foreach($row as $field => $value)
		             {
		
		             if(in_array($field,$column_names)){
		             */
		            $value = str_replace("<br />", "\n", $value);
		            $value = str_replace("<br/>", "\n", $value);
		            $value = str_replace("<br>", "\n", $value);
		            $value = str_replace("<hr/>", "\n", $value);
		            $value = str_replace("&euro;", '', $value);
		            if(is_numeric($value))
		            { //if numeric format as number
		                if($field == "firstname" || $field == "lastname")
		                {
		                    //weird stuff going if first name/last name or memo is numeric = true(ISPC-1243)
		                    $this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
		                }
		                else
		                {
		                    $this->xlsWriteNumber($xlsRow, $t, $value);
		                }
		            }
		            else
		            {
		                $this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
		            }
		            $t++;
		            //}
		        }
		        $xlsRow++;
		    }
		
		    $this->xlsEOF();
		
		    $file = str_replace(" ", "_", $this->view->translate('Patientenliste'));
		    $fileName = $file . ".xls";
		
		    header("Pragma: public");
		    header("Expires: 0");
		    header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
		    header("Content-Type: application/force-download");
		    header("Content-Type: application/octet-stream");
		    header("Content-type: application/vnd.ms-excel; charset=utf-8");
		    header("Content-Disposition: attachment; filename=" . $fileName);
		    exit;
		}		
		
		public function patientstandbylistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patient', $logininfo->userid, 'canview');
			$this->view->today_date = date('d.m.Y H:i');
			$this->view->hours = Pms_CommonData::getHours();
			$this->view->minutes = Pms_CommonData::getMinutes();
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if($_REQUEST['activate'] == 1 && !empty($_REQUEST['adm_date']))
			{
				$date = date('Y-m-d', strtotime($_REQUEST['adm_date']));
				$time = $_REQUEST['adm_time_h'] . ':' . $_REQUEST['adm_time_m'] . ':00';
				$admission_date_time = $date . ' ' . $time;
				 
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$ipid = Pms_CommonData::getIpId($decid);
			
				$patient_data_q = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('isdelete = "0"');
				$patient_data_res = $patient_data_q->fetchArray();
			
				if($patient_data_res[0] && $patient_data_res[0]['isdischarged'] == "0" && $patient_data_res[0]['isstandby'] == "1")
				{
					$comment = "Move to active - activate patient from patient standby list";
					$readmit = Application_Form_PatientMaster::readmit_standby_patient($ipid, $admission_date_time, $comment);
				}
			}

			if($_GET['remove'] == 1)
			{
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$ipid = Pms_CommonData::getIpId($decid);

				$pt = Doctrine_Core::getTable('PatientMaster')->find($decid);
				$pt->isstandby = 0;
				$pt->isstandbydelete = 1;
				$pt->save();
				
				$patient_details = $pt->toArray();
				$comment = "Move from standby to standby delete from patient standby list";
				$send2standbydeleted = Application_Form_PatientMaster::send2standbydeleted($ipid, $patient_details, $comment);
				
			}
		}

		public function patienthospizlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		public function patientstandbydischargelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if($_GET['activate'] == 1)
			{
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$ipid = Pms_CommonData::getIpId($decid);

				$pt = Doctrine_Core::getTable('PatientMaster')->find($decid);
				$pt->isstandby = 1;
				$pt->isstandbydelete = 0;
				$pt->save();
				$this->_redirect(APP_BASE . "patient/patientstandbydischargelist");
				
				$patient_details = $pt->toArray();

				$comment = "Move from standby to standby delete from patient standby delete list";
				$send2standby = Application_Form_PatientMaster::send2standby($ipid, $patient_details, $comment);
			}
		}

		public function dischargepatientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdischarge', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if(strlen($_REQUEST['acid']) > 0)
			{

				$decid = Pms_Uuid::decrypt($_REQUEST['acid']);
				$ipid = Pms_CommonData::getIpId($decid);
				$this->_redirect(APP_BASE . "patient/patientmasteredit?id=" . $_REQUEST['acid']);
			}

			if($_REQUEST['flg'] == 'sdel')
			{
				$this->view->error_message = $this->view->translate("recorddeletedsuccessfully");
			}
			else if($_REQUEST['flg'] == 'edel')
			{
				$this->view->error_message = $this->view->translate('selectatleastone');
			}
			else if($_REQUEST['flg'] == 'archiv')
			{
				$ids = explode(',', $_REQUEST['ids']);
				foreach($ids as $id)
				{
					$ipidsarr[] = Pms_CommonData::getIpId(Pms_Uuid::decrypt($id));
				}
				$q_archive = Doctrine_Query::create()
					->update('PatientMaster')
					->set('isarchived', '1')
					->whereIn('ipid', $ipidsarr);
				$archive = $q_archive->execute();
				exit;
			}
		}

		public function archivepatientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdischarge', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if(strlen($_REQUEST['acid']) > 0)
			{
				$this->_redirect(APP_BASE . "patient/patientmasteredit?id=" . $_REQUEST['acid']);
			}

			if($_REQUEST['flg'] == 'sdel')
			{
				$this->view->error_message = $this->view->translate("recorddeletedsuccessfully");
			}
			else if($_REQUEST['flg'] == 'edel')
			{
				$this->view->error_message = $this->view->translate('selectatleastone');
			}
			else if($_REQUEST['flg'] == 'archiv')
			{

				$ids = explode(',', $_REQUEST['ids']);
				foreach($ids as $id)
				{
					$decid = Pms_Uuid::decrypt($id);
					$ipidsarr[] = Pms_CommonData::getIpId($decid);
				}

				$q_archive = Doctrine_Query::create()
					->update('PatientMaster')
					->set('isarchived', '0')
					->whereIn('ipid', $ipidsarr);

				$archive = $q_archive->execute();
				exit;
			}
		}

		public function dischargesttipatientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdischarge', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if(strlen($_GET['acid']) > 0)
			{
				$decid = Pms_Uuid::decrypt($_GET['acid']);
				$ipid = Pms_CommonData::getIpId($decid);
				$this->_redirect(APP_BASE . "patient/patientmasteredit?id=" . $_GET['acid']);
			}

			if($_GET['flg'] == 'sdel')
			{
				$this->view->error_message = $this->view->translate("recorddeletedsuccessfully");
			}
			else if($_GET['flg'] == 'edel')
			{
				$this->view->error_message = $this->view->translate('selectatleastone');
			}
		}

		public function getjsondataAction()
		{
			$cust = Doctrine_Query::create()
				->select('c.*')
				->from('Client c')
				->where('c.isdelete = ?', 0);
			$track = $cust->execute();

			echo json_encode($track->toArray());
			exit;
		}

		public function fetchlistAction()
		{
			$x = time();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			/* #### Check if client has permission to see the organisation column ################## */
			$this->view->org_column = 0;
			$organisationprevileges = new Modules();
			$display_org = $organisationprevileges->checkModulePrivileges("72", $logininfo->clientid);
			if($display_org)
			{
				$this->view->org_column = 1;
			}
			/* ##################################################################################### */

// 		$columnarray = array("pk" => "id", "fn" => "p__0", "ln" => "p__3", "ad" => "p__admission_date", "ledt" => "p__last_update", "bd" => "p__birthd", 'ed' => 'epid_num');
			$columnarray = array("pk" => "id", "fn" => "first_name", "ln" => "last_name", "ad" => "admission_date", "ledt" => "last_update", "bd" => "birthd", 'ed' => 'epid_num');
			$sorting_array = array('ln' => 'last_name', 'fn' => 'first_name');
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");

			$this->view->order = $orderarray[$_GET['ord']];

			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];
//TO DO HERE List with assigned users!!!!
			$user_patients = PatientUsers::getUserPatients($userid); //get user's patients by permission

			$user_c_details = User::getUserDetails($userid);

			if($user_c_details[0]['allow_own_list_discharged'] == '1')
			{
				$show_discharged_not_dead = true;
			}
			else
			{
				$show_discharged_not_dead = false;
			}

			if($user_c_details[0]['assigned_standby'] == '0')
			{
				$standby_q = 'and p.isstandby = 0';
			}
			else
			{
				$standby_q = '';
			}

			$patient = Doctrine_Query::create()
				->select('p.ipid')
				->from('PatientMaster p')
				->leftJoin("p.EpidIpidMapping e")
				->leftJoin("e.PatientQpaMapping q")
				->where("p.isdelete = 0 " . $standby_q . " and isstandbydelete = 0")
				->andWhere('p.ipid IN (' . $user_patients['patients_str'] . ')');

			if($logininfo->usertype != 'SA')
			{
				$patient->andWhere('q.clientid =e.clientid and q.clientid = ' . $clientid . ' and q.userid = ' . $userid);
			}
			else
			{
				$patient->andWhere('q.clientid =e.clientid and q.clientid = ' . $clientid);
			}

			if(!$show_discharged_not_dead)
			{
				$patient->andWhere('p.isdischarged = "0"');
			}
			$patientidarray = $patient->fetchArray(); //proper way

			$patient_ipids[] = '999999999';
			foreach($patientidarray as $k_pat_det => $v_pat_det)
			{
				$patient_ipids[] = $v_pat_det['ipid'];
			}

			if($show_discharged_not_dead)
			{
				//get patients discharge details
				$patient_discharge = PatientDischarge::get_patients_discharge($patient_ipids);

				//get discharge methods
				$dis = new DischargeMethod();
				$discharge_methods = $dis->getDischargeMethod($clientid, 0);

				foreach($discharge_methods as $dischargeM)
				{
					if($dischargeM['abbr'] == "TOD" || $dischargeM['abbr'] == "TODNA")
					{
						$death_methods[] = $dischargeM['id'];
					}
				}

				//check if method is not in discharge dead
				$dead_patients_ipids[] = '9999999999';
				foreach($patient_discharge as $k_pat_dis => $v_pat_dis)
				{
					//get dead patient ipids to be excluded
					if(in_array($v_pat_dis['discharge_method'], $death_methods))
					{
						$dead_patients_ipids[] = $v_pat_dis['ipid'];
					}
				}

				//get patients death by death button
				$death_button_data = PatientDeath::get_patients_death($patient_ipids);

				$death_ipids[] = '999999999';
				foreach($death_button_data as $k_pat_dead => $v_pat_dead)
				{
					$death_ipids[] = $v_pat_dead['ipid'];
				}

				$patient->andWhereNotIn('ipid', $dead_patients_ipids);
				$patient->andWhereNotIn('ipid', $death_ipids);

				//reset old master patient array
				$patientidarray = array();
				$patientidarray = $patient->fetchArray();
			}

			//get newest results
			$patientarray[0]['count'] = sizeof($patientidarray);
			$patientidarray[9999999] = "xx";

			$orderbyloc = new PatientLocation();
			$patlocdet = $orderbyloc->getOrderbyLocation($patientidarray, $logininfo->clientid);

			$orderbylocation = $patlocdet['orderbylocation'];
			$patient2location = $patlocdet['patient2location'];
			$patient2home = $patlocdet['patient2home'];

			if(is_array($orderbylocation))
			{
				foreach($orderbylocation as $obl)
				{
					$orderbylocation_str .= '"' . $obl . '",';
				}
			}

			$limit = 50;


			$sql = "ipid,e.epid as epid,birthd,admission_date,change_date,last_update,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as gensex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "*,ipid,e.epid as epid,p.isadminvisible,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as gensex, ";
			}

			$patient->select($sql);
			$patient->limit($limit);

			$orderQnow =  strtoupper(trim($_GET['ord'])) == "ASC" ? "ASC" : "DESC";//sanitize query
			
			if($_GET['clm'] == 'cl')
			{			    
			    $secondFieldParams = substr($orderbylocation_str, 0, -1); //this is a ipid sting
			    
			    if ( ! empty($secondFieldParams)) {
			        
				    $patient->orderBy("FIELD(ipid, {$secondFieldParams}) {$orderQnow}, ipid");
				    
			    } else {
			        
				    $patient->orderBy("ipid {$orderQnow}");			        
			    }
			}
			else if($_REQUEST['clm'] == 'fn' || $_REQUEST['clm'] == 'ln')
			{
//				$patient->orderBy('CONVERT(AES_DECRYPT(' . $sorting_array[$_REQUEST['clm']] . ', "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ' . $_REQUEST['ord'] . '');
				$patient->orderBy('CONVERT(CONVERT(AES_DECRYPT(' . $sorting_array[$_REQUEST['clm']] . ', "' . Zend_Registry::get('salt') . '") using utf8) using latin1) COLLATE latin1_german2_ci ' . $orderQnow . '');
			}
			else if ( ! empty($columnarray[$_GET['clm']])) {
			    
				$patient->orderBy($columnarray[$_GET['clm']] . " " . $orderQnow);
			}

			$this->view->{"style" . $_GET['pgno']} = "active";
			$patient->offset($_GET['pgno'] * $limit);
			$patient->groupBy('p.ipid'); //group by ipid
			$this->view->offset = ($_GET['pgno'] * $limit);
			$patientlimit = $patient->fetchArray(); //proper way

			$sapv = new SapvVerordnung();
			$patient_sapv_data = $sapv->get_today_active_highest_sapv($patient_ipids);

			if($_REQUEST['dbg'])
			{
				print_r("Ipids \n");
				print_r($patient_ipids);
				print_r("Sapv Data X \n");
				print_r($patient_sapv_data);
			}

			foreach($patientlimit as $k_pat_limit => $v_pat_limit)
			{
				$pat_limit_ipids[] = $v_pat_limit['ipid'];

				if(strlen($v_pat_limit['street1']) > 0)
				{
					$address[$v_pat_limit['ipid']] .= $v_pat_limit['street1'] . '<br />';
				}

				if(strlen($v_pat_limit['zip']) > 0)
				{
					$address[$v_pat_limit['ipid']] .= $v_pat_limit['zip'] . '  ';
				}

				if(strlen($v_pat_limit['city']) > 0)
				{
					$address[$v_pat_limit['ipid']] .= $v_pat_limit['city'];
				}

				$parient_address[$v_pat_limit['ipid']] = $address[$v_pat_limit['ipid']];
			}
			if(count($pat_limit_ipids) == '0')
			{
				$pat_limit_ipids[] = '999999999';
			}


			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($pat_limit_ipids);

			foreach($healthinsu_array as $h => $hvalues)
			{
				$pat2health[$hvalues['ipid']] = $hvalues;
			}


//get patient sapv statuses START
			$paths = new OrgPaths();
			$client_paths = $paths->get_paths($clientid);

//		multiple ipids
			$data = array();
			$executed_functions = array();
			foreach($client_paths as $k_c_path => $v_c_path)
			{
				if(!in_array($v_c_path['function'], $executed_functions))
				{

					if(empty($data))
					{
						$data = array();
					}

					$executed_functions[] = $v_c_path['function'];
					$retrived_data = $paths->{$v_c_path['function']}($pat_limit_ipids);
					if($retrived_data)
					{
						$data = array_merge_recursive($data, $retrived_data);
					}
				}
			}

			foreach($data as $k_ipid => $v_function_data)
			{
				if($k_ipid != '999999999')
				{
					foreach($v_function_data as $k_function => $v_function_arr)
					{
						foreach($v_function_arr as $k_short => $v_short_status)
						{
							if($v_short_status['status'] != "gray" && $v_short_status['status'] != "green")
							{
								if($advance[$k_ipid][$k_function] == "1" || count($advance[$k_ipid][$k_function]) == '0')
								{
									if($k_function != 'admission_todo')
									{
										$last_status[$k_ipid][$k_function]['shortcut'] = $k_short;
										$last_status[$k_ipid][$k_function]['status'] = $v_short_status['status'];

										if($v_short_status['status'] == "red")
										{
											$advance[$k_ipid][$k_function] = 0;
										}
										else
										{
											$advance[$k_ipid][$k_function] = 1;
										}
									}
									else
									{
										$adm_data['shortcut'] = $k_short;
										$adm_data['status'] = $v_short_status['status'];

										$last_status[$k_ipid][$k_function][] = $adm_data;
									}
								}
							}
						}
					}
				}
			}

			//get patient sapv statuses END

			foreach($patientlimit as $key => $patient_item)
			{
				$n_patientlimit[$patient_item['ipid']] = $patient_item;



				if(in_array($patient_item['ipid'], $patient2home))
				{
					$n_patientlimit[$patient_item['ipid']]['location'] = $patient2location[$patient_item['ipid']] . '<br/>' . $parient_address[$patient_item['ipid']];
				}
				else
				{
					$n_patientlimit[$patient_item['ipid']]['location'] = $patient2location[$patient_item['ipid']];
				}

// 			$n_patientlimit[$patient_item['ipid']]['epid'] = $patient_item["EpidIpidMapping"]['epid'];
				$n_patientlimit[$patient_item['ipid']]['verordnet'] = '';
				$n_patientlimit[$patient_item['ipid']]['status'] = '';

				if(array_key_exists($patient_item['ipid'], $last_status))
				{
					foreach($last_status[$patient_item['ipid']] as $k_path => $v_data)
					{
						if($k_path != 'admission_todo')
						{
							$n_patientlimit[$patient_item['ipid']]['org_shortcuts'][] = $v_data['shortcut'];
							$n_patientlimit[$patient_item['ipid']]['org_color'][] = $v_data['status'];
						}
						else
						{
							foreach($v_data as $k_arr_adm => $v_arr_adm)
							{
								$n_patientlimit[$patient_item['ipid']]['org_shortcuts'][] = $v_arr_adm['shortcut'];
								$n_patientlimit[$patient_item['ipid']]['org_color'][] = $v_arr_adm['status'];
							}
						}
					}
				}
				else
				{
					$n_patientlimit[$patient_item['ipid']]['org_shortcuts'][] = '';
					$n_patientlimit[$patient_item['ipid']]['org_color'][] = '';
				}

				$n_patientlimit[$patient_item ['ipid']]['privatepatient_info'] = $pat2health[$patient_item ['ipid']]['privatepatient'];
				$n_patientlimit[$patient_item ['ipid']]['patient_epid'] = $patient_item['epid'];
			}


			foreach($patient_sapv_data['last'] as $k_sapv_data => $v_sapv_data)
			{
				if(array_key_exists($v_sapv_data['ipid'], $n_patientlimit))
				{
					$n_patientlimit[$v_sapv_data['ipid']]['verordnet'] = $v_sapv_data['verordnet'];
					$n_patientlimit[$v_sapv_data['ipid']]['status'] = $v_sapv_data['status'];
				}
			}

			if($_REQUEST['dbg'])
			{
				print_r("Patient limit \n");
				print_r($n_patientlimit);
				exit;
			}

			$grid = new Pms_Grid($n_patientlimit, 1, $patientarray[0]['count'], "listpatient.html");
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("patientnavigation.html", 5, $_GET['pgno'], $limit);


			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patient/fetchlist.html');

			echo json_encode($response);
			exit;
		}

		public function fetchhospizlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$limit = 50;
			$columnarray = array("pk" => "id", "fn" => "p__0", "ln" => "p__2", "rd" => "p__admission_date", "ledt" => "p__change_date", "bd" => "p__birthd", 'ed' => 'epid_num');
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$sorting_array = array('ln' => 'last_name', 'fn' => 'first_name');
			$this->view->order = $orderarray[$_GET['ord']];
			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];

			$logininfo = new Zend_Session_Namespace('Login_Info');

			$user_patients = PatientUsers::getUserPatients($logininfo->userid); //get user's patients by permission

			$patient = Doctrine_Query::create()
				->select('p.ipid')
				->from('PatientMaster p')
				->where('isdelete = 0')
				->andWhere('ipid IN (' . $user_patients['patients_str'] . ')')
				->andWhere('isstandby = 0 and ishospiz=1 and isstandbydelete=0');
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere('e.clientid = ' . $logininfo->clientid);


			$patientarray = $patient->fetchArray();

			$patientarrays[0]['count'] = sizeof($patientarray);
			$patientarray[9999999] = "xx";

			$orderbyloc = new PatientLocation();
			$patlocdet = $orderbyloc->getOrderbyLocation($patientarray, $logininfo->clientid);


			$patient2location = $patlocdet['patient2location'];
			$patient2home = $patlocdet['patient2home'];

			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.isadminvisible,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
			}

			$patient->select($sql);
			$patient->limit($limit);

			if($_REQUEST['clm'] == 'fn' || $_REQUEST['clm'] == 'ln')
			{
				$patient->orderBy('CONVERT(AES_DECRYPT(' . $sorting_array[$_REQUEST['clm']] . ', "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ' . $_REQUEST['ord'] . '');
			}
			else
			{
				$patient->orderBy($columnarray[$_GET['clm']] . " " . $_GET['ord']);
			}

			$this->view->{"style" . $_GET['pgno']} = "active";
			$patient->offset($_GET['pgno'] * $limit);
			$this->view->offset = ($_GET['pgno'] * $limit);
			$patientlimit = $patient->fetchArray(); //proper way
			$newpatientlimit = array();

			foreach($patientlimit as $k_pat_limit => $v_pat_limit)
			{
				$pat_limit_ipids[] = $v_pat_limit['ipid'];
			}
			if(count($pat_limit_ipids) == '0')
			{
				$pat_limit_ipids[] = '999999999';
			}

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($pat_limit_ipids);

			foreach($healthinsu_array as $h => $hvalues)
			{
				$pat2health[$hvalues['ipid']] = $hvalues;
			}

			foreach($patientlimit as $key => $patient_item)
			{

				if(strlen($patient_item['street1']) > 0)
				{
					$address[$patient_item['ipid']] .= $patient_item['street1'] . '<br />';
				}
				if(strlen($patient_item['zip']) > 0)
				{
					$address[$patient_item['ipid']] .= $patient_item['zip'] . ' ';
				}
				if(strlen($patient_item['city']) > 0)
				{
					$address[$patient_item['ipid']] .= $patient_item['city'];
				}

				$parient_address[$patient_item['ipid']] = $address[$patient_item['ipid']];


				if(!empty($patient2location[$patient_item['ipid']]))
				{
					if(in_array($patient_item['ipid'], $patient2home))
					{
						$patientlimit[$key]['location'] = $patient2location[$patient_item['ipid']] . '<br/>' . $parient_address[$patient_item['ipid']];
					}
					else
					{
						$patientlimit[$key]['location'] = $patient2location[$patient_item['ipid']];
					}
				}
				else
				{
					$patientlimit[$key]['location'] = '-';
				}

				$patientlimit[$key]['epid'] = $patient_item["EpidIpidMapping"]['epid'];
				if(!empty($pat2health[$patient_item['ipid']]))
				{
					$patientlimit[$key]['privatepatient_info'] = $pat2health[$patient_item['ipid']]['privatepatient'];
				}
			}

			$grid = new Pms_Grid($patientlimit, 1, $patientarrays[0]['count'], "listhospizpatient.html");
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("hospizpatientnavigation.html", 5, $_GET['pgno'], $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patient/fetchhospizlist.html');

			echo json_encode($response);
			exit;
		}

		public function fetchstandbylistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');
			$this->view->hours = Pms_CommonData::getHours();
			$this->view->minutes = Pms_CommonData::getMinutes();
				
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$limit = 50;
			$columnarray = array("pk" => "id", "fn" => "p__0", "ln" => "p__2", "rd" => "p__admission_date", "ledt" => "p__change_date", "bd" => "p__birthd", 'ed' => 'epid_num');
			$sorting_array = array('ln' => 'p.last_name', 'fn' => 'p.first_name');
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$this->view->order = $orderarray[$_GET['ord']];
			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$user_patients = PatientUsers::getUserPatients($logininfo->userid); //get user's patients by permission

			$patient = Doctrine_Query::create()
				->select('p.ipid')
				->from('PatientMaster p')
				->where('isdelete = 0')
				->andWhere('isdischarged = 0 and isstandby = 1')
				->andWhere('ipid IN (' . $user_patients['patients_str'] . ')');
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere('e.clientid = ' . $logininfo->clientid);

			$patientexec = $patient->execute();
			$patientarray = $patientexec->toArray();

			$patientarrays[0]['count'] = sizeof($patientarray);
			$patientarray[9999999] = "xx";
			$orderbyloc = new PatientLocation();
			$patlocdet = $orderbyloc->getOrderbyLocation($patientarray, $logininfo->clientid);

			$patient2location = $patlocdet['patient2location'];
			$patient2home = $patlocdet['patient2home'];

 
			$disdata = new PatientDischarge();
			$inactive_dischargedata = $disdata->getPatientsInactiveDischargeDetails($patientarray);
			
			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.isadminvisible,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
			}

			$patient->select($sql);
			$patient->limit($limit);

			if($_REQUEST['clm'] == 'fn' || $_REQUEST['clm'] == 'ln')
			{
				$patient->orderBy('CONVERT(AES_DECRYPT(' . $sorting_array[$_REQUEST['clm']] . ', "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ' . $_REQUEST['ord'] . '');
			}
			else
			{
				$patient->orderBy($columnarray[$_GET['clm']] . " " . $_GET['ord']);
			}

			$this->view->{"style" . $_GET['pgno']} = "active";
			$patient->offset($_GET['pgno'] * $limit);
			$this->view->offset = ($_GET['pgno'] * $limit);

			$patientlimitexec = $patient->execute();
			$patientlimit = $patientlimitexec->toArray();
			$newpatientlimit = array();

			foreach($patientlimit as $key => $patient_item)
			{


				if(strlen($patient_item['street1']) > 0)
				{
					$address[$patient_item['ipid']] .= $patient_item['street1'] . '<br />';
				}
				if(strlen($patient_item['zip']) > 0)
				{
					$address[$patient_item['ipid']] .= $patient_item['zip'] . ' ';
				}
				if(strlen($patient_item['city']) > 0)
				{
					$address[$patient_item['ipid']] .= $patient_item['city'];
				}

				$parient_address[$patient_item['ipid']] = $address[$patient_item['ipid']];

				if(!empty($patient2location[$patient_item['ipid']]))
				{
					if(in_array($patient_item['ipid'], $patient2home))
					{
						$patientlimit[$key]['location'] = $patient2location[$patient_item['ipid']] . '<br/>' . $parient_address[$patient_item['ipid']];
					}
					else
					{
						$patientlimit[$key]['location'] = $patient2location[$patient_item['ipid']];
					}
				}
				else
				{
					$patientlimit[$key]['location'] = '-';
				}

				$patientlimit[$key]['epid'] = $patient_item["EpidIpidMapping"]['epid'];
			
				if($inactive_dischargedata[$patient_item['EpidIpidMapping']['ipid']]){
					$patientlimit[$key]['last_discharge'] = date("d.m.Y", strtotime('+1 day', strtotime($inactive_dischargedata[$patient_item['EpidIpidMapping']['ipid']]['discharge_date_full'])));
				} else{
					$patientlimit[$key]['last_discharge'] = '';
				}
			}
 
			$grid = new Pms_Grid($patientlimit, 1, $patientarrays[0]['count'], "liststandbypatient.html");
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("standbypatientnavigation.html", 5, $_GET['pgno'], $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patient/fetchstandbylist.html');

			echo json_encode($response);
			exit;
		}

		public function fetchstandbydischargelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$limit = 50;
// 		$columnarray = array("pk" => "id", "fn" => "first_name", "ln" => "last_name", "ad" => "admission_date", "ledt" => "last_update", "bd" => "birthd", 'ed' => 'epid_num');
			$columnarray = array("pk" => "id", "fn" => "first_name", "ln" => "last_name", "rd" => "admission_date", "ledt" => "last_update", "bd" => "birthd", 'ed' => 'epid_num');
			$sorting_array = array('ln' => 'last_name', 'fn' => 'first_name');

			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$this->view->order = $orderarray[$_GET['ord']];
			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$user_patients = PatientUsers::getUserPatients($logininfo->userid); //get user's patients by permission

			$patient = Doctrine_Query::create()
				->select('p.ipid')
				->from('PatientMaster p')
				->where('isdelete = 0')
				->andWhere('isstandby = 0 and isstandbydelete = 1')
				->andWhere('ipid IN (' . $user_patients['patients_str'] . ')');
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere('e.clientid = ' . $logininfo->clientid);
			$patientidarray = $patient->fetchArray(); //proper way

			if(count($patientidarray) == 0)
			{
				$patientidarray[0] = "x";
			}
			$patientarray[0]['count'] = sizeof($patientidarray);

			$orderbyloc = new PatientLocation();
			$patlocdet = $orderbyloc->getOrderbyLocation($patientidarray, $logininfo->clientid);

			$orderbylocation = $patlocdet['orderbylocation'];
			$patient2location = $patlocdet['patient2location'];
			$patient2home = $patlocdet['patient2home'];

			if(is_array($orderbylocation))
			{
				foreach($orderbylocation as $obl)
				{
					$orderbylocation_str .= '"' . $obl . '",';
				}
			}

			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.isadminvisible,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
			}

			$patient->select($sql);
			$patient->limit($limit);

			if($_GET['clm'] == 'cl')
			{
				if(!empty($orderbylocation))
				{
					$patient->orderBy('FIELD(ipid, ' . substr($orderbylocation_str, 0, -1) . ') ' . $_GET['ord'] . ', ipid');
				}
			}
			else if($_REQUEST['clm'] == 'fn' || $_REQUEST['clm'] == 'ln')
			{
				$patient->orderBy('CONVERT(AES_DECRYPT(' . $sorting_array[$_REQUEST['clm']] . ', "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ' . $_REQUEST['ord'] . '');
			}
			else
			{
				$patient->orderBy($columnarray[$_GET['clm']] . " " . $_GET['ord']);
			}

			$this->view->{"style" . $_GET['pgno']} = "active";
			$patient->offset($_GET['pgno'] * $limit);
			$this->view->offset = ($_GET['pgno'] * $limit);

			$patientlimit = $patient->fetchArray();

			foreach($patientlimit as $key => $patient_item)
			{
				if(strlen($patient_item['street1']) > 0)
				{
					$address[$patient_item["EpidIpidMapping"]['ipid']] .= $patient_item['street1'] . '<br />';
				}

				if(strlen($patient_item['zip']) > 0)
				{
					$address[$patient_item["EpidIpidMapping"]['ipid']] .= $patient_item['zip'] . ' ';
				}

				if(strlen($patient_item['city']) > 0)
				{
					$address[$patient_item["EpidIpidMapping"]['ipid']] .= $patient_item['city'];
				}

				$parient_address[$patient_item["EpidIpidMapping"]['ipid']] = $address[$patient_item["EpidIpidMapping"]['ipid']];

				if(!empty($patient2location[$patient_item["EpidIpidMapping"]['ipid']]))
				{
					if(in_array($patient_item["EpidIpidMapping"]['ipid'], $patient2home))
					{
						$patientlimit[$key]['location'] = $patient2location[$patient_item["EpidIpidMapping"]['ipid']] . '<br/>' . $parient_address[$patient_item["EpidIpidMapping"]['ipid']];
					}
					else
					{
						$patientlimit[$key]['location'] = $patient2location[$patient_item["EpidIpidMapping"]['ipid']];
					}
				}
				else
				{
					$patientlimit[$key]['location'] = '-';
				}
				$patientlimit[$key]['epid'] = $patient_item["EpidIpidMapping"]['epid'];
			}

			$newpatientlimit = array();

			$grid = new Pms_Grid($patientlimit, 1, $patientarray[0]['count'], "liststandbydischargepatient.html");
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("standbydischargepatientnavigation.html", 5, $_GET['pgno'], $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patient/fetchstandbydischargelist.html');

			echo json_encode($response);
			exit;
		}

		public function dischargelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdischarge', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if($logininfo->usertype != 'SA')
			{
				$where = 'clientid=' . $logininfo->clientid;
			}
			else
			{
				$where = 'clientid=' . $logininfo->clientid;
			}

			/* #### Check if client has permission to see the organisation column ################## */
			$this->view->org_column = 0;
			$organisationprevileges = new Modules();
			$display_org = $organisationprevileges->checkModulePrivileges("72", $logininfo->clientid);
			if($display_org)
			{
				$this->view->org_column = 1;
			}
			/* ##################################################################################### */

			$columnarray = array("pk" => "id", "fn" => "p__0", "ln" => "p__3", "rd" => "p__admission_date", "ledt" => "p__change_date", "bd" => "p__birthd", 'ed' => 'epid_num');
			$sorting_array = array('ln' => 'last_name', 'fn' => 'first_name');
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");

			$this->view->order = $orderarray[$_GET['ord']];
			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];

			$user_patients = PatientUsers::getUserPatients($logininfo->userid); //get user's patients by permission

			$patient = Doctrine_Query::create()
				->select('p.ipid, p.admission_date')
				->from('PatientMaster p')
				->leftJoin("p.EpidIpidMapping e")
				->where("p.isdischarged = 1 and p.isarchived=0 and p.isdelete = 0 and p.isstandbydelete=0")
				->andWhere('p.ipid IN (' . $user_patients['patients_str'] . ')');
			$patient->andWhere('e.clientid = ' . $logininfo->clientid);
			$patienidtarray = $patient->fetchArray();
			if(count($patienidtarray) == 0)
			{
				$patienidtarray[0] = "1";
			}
			$patientarray[0]['count'] = sizeof($patienidtarray);


			foreach($patienidtarray as $k_pat => $v_pat)
			{
				$patient_ipids[] = $v_pat['ipid'];
			}

			$sapv = new SapvVerordnung();
			$patient_sapv_data = $sapv->get_today_active_highest_sapv($patient_ipids);

			$disdata = new PatientDischarge();
			$dischargedata = $disdata->getPatientsDischargeDetails($patienidtarray, $_GET['clm'], $_GET['ord']);

			$disddata = new PatientDeath();
			$patientdeatharray = $disddata->getPatientsDeathDetails($patienidtarray);

			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid);
			$distod->getSqlQuery();
			$discharge_method_array = $distod->fetchArray();

			foreach($discharge_method_array as $mdk => $mdv)
			{
				if($mdv['abbr'] == 'TOD' || $mdv['abbr'] == 'tod' || $mdv['abbr'] == 'Verstorben' || $mdv['abbr'] == 'VERSTORBEN' || $mdv['abbr'] == 'verstorben')
				{
					$death_description = $mdv['description'];
				}
				$dm_details[$mdv['id']]['abbr'] = $mdv['abbr'];
				$dm_details[$mdv['id']]['description'] = $mdv['description'];
			}


			foreach($dischargedata as $discharge_key => $discharge_item)
			{
				$orderbydischarge_str .= '"' . $discharge_key . '",';
			}

			$limit = 50;

			$sql = "ipid,e.epid as epid,birthd,admission_date,change_date,last_update,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "*,ipid, e.epid as epid,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
			}

			$patient->select($sql);
			$patient->limit($limit);
			if($_GET['clm'] == 'dd' || $_GET['clm'] == 'dot')
			{
				$patient->orderBy('FIELD(p__ipid, ' . substr($orderbydischarge_str, 0, -1) . '), p__ipid');
			}
			else if($_REQUEST['clm'] == 'fn' || $_REQUEST['clm'] == 'ln')
			{
				$patient->orderBy('CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ' . $_REQUEST['ord'] . '');
			}
			else
			{
				$patient->orderBy($columnarray[$_GET['clm']] . " " . $_GET['ord']);
			}

			$this->view->{"style" . $_GET['pgno']} = "active";
			$patient->offset($_GET['pgno'] * $limit);
			$this->view->offset = ($_GET['pgno'] * $limit);
			$patientlimit = $patient->fetchArray();

			foreach($patientlimit as $k_pat_limit => $v_pat_limit)
			{
				$pat_limit_ipids[] = $v_pat_limit['ipid'];
			}
			if(count($pat_limit_ipids) == '0')
			{
				$pat_limit_ipids[] = '999999999';
			}


			$assignuser = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('clientid=' . $logininfo->clientid)
				->andWhere('isdelete=0 and isactive=0')
				->orderBy('last_name ASC');
			$assignuserarray = $assignuser->fetchArray();

			foreach($assignuserarray as $k => $uvalues)
			{
				$user_details[$uvalues['id']]['name'] = $uvalues['last_name'] . ', ' . $uvalues['first_name'];
			}


			if(count($pat_limit_epids) == '0')
			{
				$pat_limit_epids[] = '999999999';
			}

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($pat_limit_ipids);

			foreach($healthinsu_array as $h => $hvalues)
			{
				$pat2health[$hvalues['ipid']] = $hvalues;
			}









			//get patient sapv statuses START
			$paths = new OrgPaths();
			$client_paths = $paths->get_paths($logininfo->clientid);

			//		multiple ipids
			$data = array();
			$executed_functions = array();
			foreach($client_paths as $k_c_path => $v_c_path)
			{
				if(!in_array($v_c_path['function'], $executed_functions))
				{

					if(empty($data))
					{
						$data = array();
					}

					$executed_functions[] = $v_c_path['function'];
					$retrived_data = $paths->{$v_c_path['function']}($pat_limit_ipids);
					if($retrived_data)
					{
						$data = array_merge_recursive($data, $retrived_data);
					}
				}
			}

			foreach($data as $k_ipid => $v_function_data)
			{
				if($k_ipid != '999999999')
				{
					foreach($v_function_data as $k_function => $v_function_arr)
					{
						foreach($v_function_arr as $k_short => $v_short_status)
						{
							if($v_short_status['status'] != "gray" && $v_short_status['status'] != "green")
							{
								if($advance[$k_ipid][$k_function] == "1" || count($advance[$k_ipid][$k_function]) == '0')
								{
									if($k_function != 'admission_todo')
									{
										$last_status[$k_ipid][$k_function]['shortcut'] = $k_short;
										$last_status[$k_ipid][$k_function]['status'] = $v_short_status['status'];

										if($v_short_status['status'] == "red")
										{
											$advance[$k_ipid][$k_function] = 0;
										}
										else
										{
											$advance[$k_ipid][$k_function] = 1;
										}
									}
									else
									{
										$adm_data['shortcut'] = $k_short;
										$adm_data['status'] = $v_short_status['status'];

										$last_status[$k_ipid][$k_function][] = $adm_data;
									}
								}
							}
						}
					}
				}
			}
			//get patient sapv statuses END
// 		print_R($patientlimit); exit;
			foreach($patientlimit as $key => $patient_item)
			{
				$patientlimit[$key]['epid'] = $patient_item['epid'];

				if($dischargedata[$patient_item['ipid']]['dot'] > 0)
				{
					$patientlimit[$key]['dot'] = $dischargedata[$patient_item['ipid']]['dot'];
				}
				else
				{
					$patientlimit[$key]['dot'] = '-';
				}

				if($dischargedata[$patient_item['ipid']]['discharge_date'] != '00.00.0000')
				{
					$patientlimit[$key]['discharge_date'] = $dischargedata[$patient_item['ipid']]['discharge_date'];
				}
				else
				{
					$patientlimit[$key]['discharge_date'] = '-';
				}

				// check if patient is dead in Patientdeath
				if($patientdeatharray[$patient_item['ipid']]['death_date'] != '00.00.0000')
				{
					$patientlimit[$key]['death_date'] = $patientdeatharray[$patient_item['ipid']]['death_date'];
					$patientlimit[$key]['death_description'] = $death_description;
				}
				else
				{
					$patientlimit[$key]['death_date'] = '-';
				}

				if($patient_sapv_data['last'][$patient_item['ipid']]['verordnet'] > 0)
				{
					$patientlimit[$key]['verordnet'] = $patient_sapv_data['last'][$patient_item['ipid']]['verordnet'];
					$patientlimit[$key]['status'] = $patient_sapv_data['last'][$patient_item['ipid']]['status'];
				}
				else
				{
					$patientlimit[$key]['verordnet'] = '';
				}

				if(array_key_exists($patient_item['ipid'], $last_status))
				{
					foreach($last_status[$patient_item['ipid']] as $k_path => $v_data)
					{
						if($k_path != 'admission_todo')
						{
							$patientlimit[$key]['org_shortcuts'][] = $v_data['shortcut'];
							$patientlimit[$key]['org_color'][] = $v_data['status'];
						}
						else
						{
							foreach($v_data as $k_arr_adm => $v_arr_adm)
							{
								$patientlimit[$key]['org_shortcuts'][] = $v_arr_adm['shortcut'];
								$patientlimit[$key]['org_color'][] = $v_arr_adm['status'];
							}
						}
					}
				}
				else
				{
					$patientlimit[$key]['org_shortcuts'][] = '';
					$patientlimit[$key]['org_color'][] = '';
				}

				if(!empty($pat2health[$patient_item['ipid']]))
				{
					$patientlimit[$key]['privatepatient_info'] = $pat2health[$patient_item['ipid']]['privatepatient'];
				}

				$patientlimit[$key]['discharge_methode_abbr'] = $dm_details[$dischargedata[$patient_item['ipid']]['discharge_method']]['abbr'];
				$patientlimit[$key]['discharge_methode_description'] = $dm_details[$dischargedata[$patient_item['ipid']]['discharge_method']]['description'];
			}
			$grid = new Pms_Grid($patientlimit, 1, $patientarray[0]['count'], "listdischargepatient.html");
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("dischargenavigation.html", 5, $_GET['pgno'], $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patient/dischargelist.html');

			echo json_encode($response);
			exit;
		}

		public function archivelistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdischarge', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if($logininfo->usertype != 'SA')
			{
				$where = 'clientid=' . $logininfo->clientid;
			}
			else
			{
				$where = 'clientid=' . $logininfo->clientid;
			}

			$columnarray = array("pk" => "id", "fn" => "p__0", "ln" => "p__3", "rd" => "p__admission_date", "ledt" => "p__change_date", "bd" => "p__birthd", 'ed' => 'epid_num');
			$sorting_array = array('ln' => 'last_name', 'fn' => 'first_name');
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");

			$this->view->order = $orderarray[$_GET['ord']];
			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];


			$user_patients = PatientUsers::getUserPatients($logininfo->userid); //get user's patients by permission

			$patient = Doctrine_Query::create()
				->select('p.ipid, p.admission_date')
				->from('PatientMaster p')
				->leftJoin("p.EpidIpidMapping e")
				->where("p.isarchived = 1 and p.isdelete = 0 and isstandbydelete=0")
				->andWhere('p.ipid IN (' . $user_patients['patients_str'] . ')');
			$patient->andWhere('e.clientid = ' . $logininfo->clientid);
			$patienidtarray = $patient->fetchArray();

			foreach($patienidtarray as $k => $pval)
			{
				$patient_ipids[] = $pval['ipid'];
			}

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($patient_ipids);

			foreach($healthinsu_array as $h => $hvalues)
			{
				$pat2health[$hvalues['ipid']] = $hvalues;
			}


			if(count($patienidtarray) == 0)
			{
				$patienidtarray[0] = "1";
			}

			$patientarray[0]['count'] = sizeof($patienidtarray);

			$disdata = new PatientDischarge();
			$dischargedata = $disdata->getPatientsDischargeDetails($patienidtarray, $_GET['clm'], $_GET['ord']);


			$disddata = new PatientDeath();
			$patientdeatharray = $disddata->getPatientsDeathDetails($patienidtarray);

			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid);
			$distod->getSqlQuery();
			$discharge_method_array = $distod->fetchArray();




			foreach($discharge_method_array as $mdk => $mdv)
			{
				if($mdv['abbr'] == 'TOD' || $mdv['abbr'] == 'tod' || $mdv['abbr'] == 'Verstorben' || $mdv['abbr'] == 'VERSTORBEN' || $mdv['abbr'] == 'verstorben')
				{
					$death_description = $mdv['description'];
				}
				$dm_details[$mdv['id']]['abbr'] = $mdv['abbr'];
				$dm_details[$mdv['id']]['description'] = $mdv['description'];
			}

			foreach($dischargedata as $discharge_key => $discharge_item)
			{
				$orderbydischarge_str .= '"' . $discharge_key . '",';
			}

			$limit = 50;
			$sql = "ipid,e.epid as epid,birthd,admission_date,change_date,last_update,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "*,ipid, e.epid as epid,p.isadminvisible,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
			}

			$patient->select($sql);
			$patient->limit($limit);

			if($_GET['clm'] == 'dd' || $_GET['clm'] == 'dot')
			{
				$patient->orderBy('FIELD(p__ipid, ' . substr($orderbydischarge_str, 0, -1) . '), p__ipid');
			}
			else if($_REQUEST['clm'] == 'fn' || $_REQUEST['clm'] == 'ln')
			{
				$patient->orderBy('CONVERT(AES_DECRYPT(' . $sorting_array[$_REQUEST['clm']] . ', "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ' . $_REQUEST['ord'] . '');
			}
			else
			{
				$patient->orderBy($columnarray[$_GET['clm']] . " " . $_GET['ord']);
			}

			$this->view->{"style" . $_GET['pgno']} = "active";
			$patient->offset($_GET['pgno'] * $limit);
			$patient->view->offset = ($_GET['pgno'] * $limit);
			$patientlimit = $patient->fetchArray();

			foreach($patientlimit as $key => $patient_item)
			{
				if($dischargedata[$patient_item['ipid']]['dot'] > 0)
				{
					$patientlimit[$key]['dot'] = $dischargedata[$patient_item['ipid']]['dot'];
				}
				else
				{
					$patientlimit[$key]['dot'] = '-';
				}
				if($dischargedata[$patient_item['ipid']]['discharge_date'] != '00.00.0000')
				{
					$patientlimit[$key]['discharge_date'] = $dischargedata[$patient_item['ipid']]['discharge_date'];
				}
				else
				{
					$patientlimit[$key]['discharge_date'] = '-';
				}

				$patientlimit[$key]['discharge_method'] = $dischargedata[$patient_item['ipid']]['discharge_method'];
				// check if patient is dead in Patientdeath
				if($patientdeatharray[$patient_item['ipid']]['death_date'] != '00.00.0000')
				{
					$patientlimit[$key]['death_date'] = $patientdeatharray[$patient_item['ipid']]['death_date'];
					$patientlimit[$key]['death_description'] = $death_description;
				}
				else
				{
					$patientlimit[$key]['death_date'] = '-';
				}


				if(!empty($pat2health[$patient_item['ipid']]))
				{
					$patientlimit[$key]['privatepatient_info'] = $pat2health[$patient_item['ipid']]['privatepatient'];
				}
				$patientlimit[$key]['discharge_methode_abbr'] = $dm_details[$dischargedata[$patient_item['ipid']]['discharge_method']]['abbr'];
				$patientlimit[$key]['discharge_methode_description'] = $dm_details[$dischargedata[$patient_item['ipid']]['discharge_method']]['description'];
			}

			$grid = new Pms_Grid($patientlimit, 1, $patientarray[0]['count'], "listarchivepatient.html");
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("archivenavigation.html", 5, $_GET['pgno'], $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patient/archivelist.html');

			echo json_encode($response);
			exit;
		}

		public function dischargesttilistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdischarge', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if($logininfo->usertype != 'SA')
			{
				$where = 'clientid=' . $logininfo->clientid;
			}
			else
			{
				$where = 'clientid=' . $logininfo->clientid;
			}

			$columnarray = array("pk" => "id", "fn" => "p__0", "ln" => "p__3", "rd" => "p__admission_date", "ledt" => "p__change_date", "bd" => "p__birthd", 'ed' => 'epid_num');
			$sorting_array = array('ln' => 'last_name', 'fn' => 'first_name');
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");

			$this->view->order = $orderarray[$_GET['ord']];
			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];


			$user_patients = PatientUsers::getUserPatients($logininfo->userid); //get user's patients by permission

			$dis = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('isdelete = 0  and clientid="' . $logininfo->clientid . '" and (abbr = "STTI" or abbr = "stti") ');
			$dis->getSqlQuery();

			$disexec = $dis->execute();
			$disarray = $disexec->toArray();

			if(count($disarray) > 0)
			{
				$sttiid = $disarray[0]['id'];
			}

			$discharge = Doctrine_Query::create()
				->select("d.ipid,d.discharge_method")
				->from('PatientDischarge d')
				->where('d.discharge_method="' . $sttiid . '" AND d.isdelete="0"')
				->orderBy('d.discharge_date ' . $sort);
			$discharge_data = $discharge->fetchArray();

			$ipid_str = '"999999",';

			foreach($discharge_data as $ipid)
			{
				$ipid_str .= '"' . $ipid['ipid'] . '",';
			}

			$patient = Doctrine_Query::create()
				->select('p.ipid, p.admission_date')
				->from('PatientMaster p')
				->leftJoin("p.EpidIpidMapping e")
				->where('p.ipid IN (' . substr($ipid_str, 0, -1) . ') and p.isdischarged = 1 and p.isdelete = 0');
			$patient->andWhere('e.ipid IN (' . $user_patients['patients_str'] . ') AND e.clientid = ' . $logininfo->clientid);
			$patienidtarray = $patient->fetchArray();

			$patientarray[0]['count'] = sizeof($patienidtarray);
			if(count($patienidtarray) == 0)
			{
				$patienidtarray[99999] = '9999999999';
			}

			$disdata = new PatientDischarge();
			$dischargedata = $disdata->getPatientsDischargeDetails($patienidtarray, $_GET['clm'], $_GET['ord']);

			$disddata = new PatientDeath();
			$patientdeatharray = $disddata->getPatientsDeathDetails($patienidtarray);

			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid);
			$distod->getSqlQuery();
			$discharge_method_array = $distod->fetchArray();

			foreach($discharge_method_array as $mdk => $mdv)
			{
				if($mdv['abbr'] == 'TOD' || $mdv['abbr'] == 'tod' || $mdv['abbr'] == 'Verstorben' || $mdv['abbr'] == 'VERSTORBEN' || $mdv['abbr'] == 'verstorben')
				{
					$death_description = $mdv['description'];
				}
				$dm_details[$mdv['id']]['abbr'] = $mdv['abbr'];
				$dm_details[$mdv['id']]['description'] = $mdv['description'];
			}

			foreach($dischargedata as $discharge_key => $discharge_item)
			{
				$orderbydischarge_str .= '"' . $discharge_key . '",';
			}

			$limit = 50;
			$sql = "ipid,e.epid as epid,birthd,admission_date,change_date,last_update,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "*,ipid, e.epid as epid,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
			}

			$patient->select($sql);
			$patient->limit($limit);
			if($_GET['clm'] == 'dd' || $_GET['clm'] == 'dot')
			{
				$patient->orderBy('FIELD(p__ipid, ' . substr($orderbydischarge_str, 0, -1) . '), p__ipid');
			}
			else if($_REQUEST['clm'] == 'fn' || $_REQUEST['clm'] == 'ln')
			{
				$patient->orderBy('CONVERT(AES_DECRYPT(' . $sorting_array[$_REQUEST['clm']] . ', "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ' . $_REQUEST['ord'] . '');
			}
			else
			{
				$patient->orderBy($columnarray[$_GET['clm']] . " " . $_GET['ord']);
			}
			$this->view->{"style" . $_GET['pgno']} = "active";
			$patient->offset($_GET['pgno'] * $limit);
			$this->view->offset = ($_GET['pgno'] * $limit);
			
			//ISPC-1865 eliminate dead ipids that have NOT died in the hospital
			if ( !empty($patientdeatharray) > 0 ){
				$patient->andWhereNotIn('p.ipid' , array_keys($patientdeatharray));
			}
			
			$patientlimit = $patient->fetchArray();

			foreach($patientlimit as $k_pat_limit => $v_pat_limit)
			{
				$pat_limit_ipids[] = $v_pat_limit['ipid'];
			}
			if(count($pat_limit_ipids) == '0')
			{
				$pat_limit_ipids[] = '999999999';
			}

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($pat_limit_ipids);

			foreach($healthinsu_array as $h => $hvalues)
			{
				$pat2health[$hvalues['ipid']] = $hvalues;
			}




			foreach($patientlimit as $key => $patient_item)
			{

				$patientlimit[$key]['epid'] = $patient_item['epid'];

				if($dischargedata[$patient_item['ipid']]['dot'] > 0)
				{
					$patientlimit[$key]['dot'] = $dischargedata[$patient_item['ipid']]['dot'];
				}
				else
				{
					$patientlimit[$key]['dot'] = '-';
				}

				if($dischargedata[$patient_item['ipid']]['discharge_date'] != '00.00.0000')
				{
					$patientlimit[$key]['discharge_date'] = $dischargedata[$patient_item['ipid']]['discharge_date'];
				}
				else
				{
					$patientlimit[$key]['discharge_date'] = '-';
				}

				// check if patient is dead in Patientdeath
				if($patientdeatharray[$patient_item['ipid']]['death_date'] != '00.00.0000')
				{
					$patientlimit[$key]['death_date'] = $patientdeatharray[$patient_item['ipid']]['death_date'];
					$patientlimit[$key]['death_description'] = $death_description;
				}
				else
				{
					$patientlimit[$key]['death_date'] = '-';
				}


				if(!empty($pat2health[$patient_item['ipid']]))
				{
					$patientlimit[$key]['privatepatient_info'] = $pat2health[$patient_item['ipid']]['privatepatient'];
				}

				$patientlimit[$key]['discharge_methode_abbr'] = $dm_details[$dischargedata[$patient_item['ipid']]['discharge_method']]['abbr'];
				$patientlimit[$key]['discharge_methode_description'] = $dm_details[$dischargedata[$patient_item['ipid']]['discharge_method']]['description'];
			}


			$grid = new Pms_Grid($patientlimit, 1, $patientarray[0]['count'], "listdischargesttipatient.html");
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("dischargesttinavigation.html", 5, $_GET['pgno'], $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patient/dischargesttilist.html');

			echo json_encode($response);
			exit;
		}

		public function fetchdropdownAction()
		{
			$this->_helper->viewRenderer('patientmasteradd');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if(strlen($_REQUEST['ltr']) > 0)
			{
				$drop = Doctrine_Query::create()
					->select('*')
					->from('FamilyDoctor')
					->where("isdelete=0 ")
					->andWhere("(trim(lower(last_name)) like ? ) or (trim(lower(first_name)) like ? )", array(trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%",trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%"))
					->andWhere('clientid = ?', $clientid)
					->andWhere("valid_till='0000-00-00'")
					->andWhere("indrop = 0")
					->orderBy('last_name ASC');
				$dropexec = $drop->execute();
				$droparray = $dropexec->toArray();

				$drop_array = $droparray;
				foreach($dropexec->toArray() as $key => $val)
				{
					$drop_array[$key]['first_name'] = html_entity_decode($val['first_name'], ENT_QUOTES, "utf-8");
					$drop_array[$key]['last_name'] = html_entity_decode($val['last_name'], ENT_QUOTES, "utf-8");
					$drop_array[$key]['city'] = html_entity_decode($val['city'], ENT_QUOTES, "utf-8");
				}
				$droparray = $drop_array;
			}
			else
			{
				$droparray = array();
			}

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "docdropdiv";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['doctors'] = $droparray;

			echo json_encode($response);
			exit;
		}

		public function fetchdropdownpharmacyAction()
		{
			$this->_helper->viewRenderer('patientmasteradd');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if(strlen($_REQUEST['ltr']) > 0)
			{
				$drop = Doctrine_Query::create()
					->select('*, pharmacy as apotheke')
					->from('Pharmacy')
					->where("isdelete=0 ")
					->andWhere("(trim(lower(pharmacy)) like ? ) or (trim(lower(last_name)) like ? ) or (trim(lower(first_name)) like ? )", array(trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%",trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%",trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%"))
					->andWhere('clientid = ?', $clientid)
					->andWhere("valid_till='0000-00-00'")
					->andWhere("indrop = 0")
					->orderBy('last_name ASC');
				$response['msg'] = $drop->getSqlQuery();
				$dropexec = $drop->execute();

				$droparray = $dropexec->toArray();
				$drop_array = $droparray;
				foreach($dropexec->toArray() as $key => $val)
				{
					$drop_array[$key]['pharmacy'] = html_entity_decode($val['apotheke'], ENT_QUOTES, "utf-8");
					$drop_array[$key]['first_name'] = html_entity_decode($val['first_name'], ENT_QUOTES, "utf-8");
					$drop_array[$key]['last_name'] = html_entity_decode($val['last_name'], ENT_QUOTES, "utf-8");
					$drop_array[$key]['street1'] = html_entity_decode($val['street1'], ENT_QUOTES, "utf-8");
					$drop_array[$key]['zip'] = html_entity_decode($val['zip'], ENT_QUOTES, "utf-8");
					$drop_array[$key]['city'] = html_entity_decode($val['city'], ENT_QUOTES, "utf-8");
					$drop_array[$key]['phone'] = html_entity_decode($val['phone'], ENT_QUOTES, "utf-8");
					$drop_array[$key]['fax'] = html_entity_decode($val['fax'], ENT_QUOTES, "utf-8");
				}
				$droparray = $drop_array;
			}
			else
			{
				$droparray = array();
			}

			$response['error'] = "";
			$response['callBack'] = "docdropdiv";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['doctors'] = $droparray;

			echo json_encode($response);
			exit;
		}

		public function fetchvoluntarydropdownAction()
		{
			$this->_helper->viewRenderer('patientmasteradd');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if(strlen($_REQUEST['ltr']) > 0)
			{

				$drop = Doctrine_Query::create()
					->select('*')
					->from('Voluntaryworkers')
					->where("(trim(lower(last_name)) like ? ) or (trim(lower(first_name)) like ? )", array(trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%",trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%"))
					->andWhere('clientid = "' . $clientid . '"')
					->andWhere("indrop = 0")
					->andWhere("isdelete = 0")
					->orderBy('last_name ASC');
				$dropexec = $drop->execute();
				$droparray = $dropexec->toArray();
				$drop_array = $droparray;

				foreach($dropexec->toArray() as $key => $val)
				{
					$drop_array[$key]['first_name'] = html_entity_decode($val['first_name'], ENT_QUOTES, "utf-8");
					$drop_array[$key]['last_name'] = html_entity_decode($val['last_name'], ENT_QUOTES, "utf-8");
					$drop_array[$key]['city'] = html_entity_decode($val['city'], ENT_QUOTES, "utf-8");
				}
				$droparray = $drop_array;
			}
			else
			{
				$droparray = array();
			}

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "docdropdiv";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['doctors'] = $droparray;

			echo json_encode($response);
			exit;
		}

		public function locationdropdownAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if(strlen($_REQUEST['ltr']) > 0)
			{
// 				$where = "trim(lower(convert(AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('" . $_REQUEST['ltr'] . "%'))";
				$drop = Doctrine_Query::create()
					->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
					->from('Locations')
					->where("trim(lower(convert(AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE ?", trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%" )
					->andWhere("client_id= ?", $clientid )
					->andWhere("isdelete = ?", 0)
					->orderBy('location ASC');
				$dropexec = $drop->execute();
				$droparray = $dropexec->toArray();
			}
			else
			{
				$droparray = array();
			}

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "locdropdiv";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['locations'] = $droparray;

			echo json_encode($response);
			exit;
		}

		public function healthinsdropdownAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if(strlen($_REQUEST['ltr']) > 0)
			{
				$drop = Doctrine_Query::create()
					->select('*')
					->from('HealthInsurance')
					->where("trim(lower(name)) like ? ",trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%")
					->andWhere("((isdelete='0' and extra = '0' and onlyclients='0') or (isdelete='0' and extra='0' and onlyclients='1' and clientid='" . $clientid . "'))")
					->orderBy('name ASC');
				$dropexec = $drop->execute();
				$droparray1 = $dropexec->toArray();

				$drop_array = $droparray1;

				foreach($droparray1 as $key => $val)
				{
					$drop_array[$key]['name'] = $val['name'];
				}

				$droparray = $drop_array;
			}
			else
			{
				$droparray = array();
			}

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "healthdropdiv";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['healthinsurance'] = $droparray;

			echo json_encode($response);
			exit;
		}

		public function fetchreferreddropdownAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$this->_helper->viewRenderer('patientmasteradd');

			if(strlen($_GET['ltr']) > 0)
			{
				$drop = Doctrine_Query::create()
					->select('*')
					->from('PatientReferredBy')
					->where("trim(lower(referred_name)) like ? ",trim(mb_strtolower($_GET['ltr'], 'UTF-8'))."%")
					->andWhere("clientid= ?", $clientid)
					->orderBy('referred_name ASC');
				$dropexec = $drop->execute();
				$droparray = $dropexec->toArray();
			}
			else
			{
				$droparray = array();
			}

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "refdropdiv";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['refs'] = $droparray;

			echo json_encode($response);
			exit;
		}

		private function retainValues($values, $prefix = '')
		{
			
			foreach($values as $key => $val)
			{
				//var_dump($val);
				if(!is_array($val))
				{
					$this->view->$key = $val;
					
				}
				else
				{
					//retain 1 level array used in multiple hospizvbulk form
					foreach($val as $k_val => $v_val)
					{
						if(!is_array($v_val))
						{
							$this->view->{$prefix . $key . $k_val} = $v_val; 
						}
					}
				}
			}
			//exit;
		}

		public function searchpatientAction()
		{
			$this->view->style = "none";


			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->clientid = $clientid;

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Searchpatient', $logininfo->userid, 'canview');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if($this->getRequest()->isPost())
			{
				$this->view->epid = $_POST['epid'];
				$this->view->last_name = $_POST['last_name'];
				$this->view->first_name = $_POST['first_name'];
				$this->view->birthdate = $_POST['birthdate'];
				$this->view->admission_date = $_POST['admissiondate'];
				$where = "";

				if($logininfo->usertype != 'SA')
				{
					$where = "clientid=" . $logininfo->clientid;
				}
				else
				{

					if($logininfo->clientid > 0)
					{
						$where = "clientid=" . $logininfo->clientid;
					}
					else
					{
						$where = '1';
					}
				}

				if(strlen($_POST['epid']) < 1 && strlen($_POST['last_name']) < 1 && strlen($_POST['first_name']) < 1 && strlen($_POST['admissiondate']) < 1 && strlen($_POST['birthdate']) < 1)
				{
					$this->view->error_message = '<p class="err">' . $this->view->translate('eneratleatonevaluetosearch') . '</p>';
					$error = 1;
				}

				if(strlen($_POST['last_name']) < 3 && strlen($_POST['last_name']) > 0)
				{
					$this->view->error_message = '<p class="err">' . $this->view->translate('eneratleat3charsinlastname') . '</p>';
					$error = 1;
				}

				if(strlen($_POST['first_name']) < 3 && strlen($_POST['first_name']) > 0)
				{
					$this->view->error_message = '<p class="err">' . $this->view->translate('eneratleat3charsinfirstname') . '</p>';
					$error = 1;
				}

				if(strlen($_POST['birthdate']) > 1)
				{
					if(!is_numeric($_POST['birthdate']) && strlen($_POST['birthdate']) < 4 && strlen($_POST['birthdate']) > 10)
					{
						$this->view->error_message = '<p class="err">' . $this->view->translate('enernumericvalueminimum4andmaximum10digits') . '</p>';
						$error = 1;
					}
				}

				if(strlen($_POST['admissiondate']) > 1)
				{
					if(!is_numeric($_POST['admissiondate']) && strlen($_POST['admissiondate']) < 4 && strlen($_POST['admissiondate']) > 10)
					{
						$this->view->error_message = '<p class="err">' . $this->view->translate('enernumericvalueminimum4andmaximum10digits') . '</p>';
						$error = 1;
					}
				}

				if($error == 0)
				{
					if(strlen($_POST['epid']) > 0)
					{

						$drop = Doctrine_Query::create()
							->select('*')
							->from('EpidIpidMapping')
							->where($where)
							->andWhere("trim(lower(epid))= ?",trim(mb_strtolower($_POST['epid'], 'UTF-8')) );
						$dropexec = $drop->execute();
						$ipidval = "'0'";

						if($dropexec)
						{
							$droparray = $dropexec->toArray();

							foreach($droparray as $key => $val)
							{
								$comma = ",";
								$ipidval .= $comma . "'" . $val['ipid'] . "'";
							}
						}
					}

					if($_POST['died'] == 1)
					{

						if(strlen($_POST['epid']) > 0)
						{
							$where.= " and trim(lower(epid))= trim(lower('" . $_POST['epid'] . "'))";
						}
						
						$ipid = Doctrine_Query::create()
							->select('*')
							->from('EpidIpidMapping')
							->where($where);
						if(strlen($_POST['epid']) > 0)
						{
							$ipid->andWhere("trim(lower(epid)) = ?",trim(mb_strtolower($_POST['epid'], 'UTF-8')));
						}
						$ipidexec = $ipid->execute();
						$ipidarray = $ipidexec->toArray();

						$comma = ",";
						$disipidval = "'0'";
						foreach($ipidarray as $key => $val)
						{
							$disipidval .= $comma . "'" . $val['ipid'] . "'";
							$comma = ",";
						}

						$dis = Doctrine_Query::create()
							->select("*")
							->from('DischargeMethod')
							->where("clientid='" . $logininfo->clientid . "' and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod')");

						$disexec = $dis->execute();
						$disarray = $disexec->toArray();

						if(count($disarray) > 0)
						{
							$todid = $disarray[0]['id'];
						}

						$dispat = Doctrine_Query::create()
							->select("*")
							->from("PatientDischarge")
							->where("ipid in (" . $disipidval . ") and discharge_method=" . $todid);
						$dispatexec = $dispat->execute();
						$disipidarray = $dispatexec->toArray();

						$comma = ",";
						$ipidval = "'0'";
						foreach($disipidarray as $key => $val)
						{
							$ipidval .= $comma . "'" . $val['ipid'] . "'";
							$comma = ",";
						}
					}

					if(strlen($ipidval) < 1)
					{
						$ipid = Doctrine_Query::create()
							->select('*')
							->from('EpidIpidMapping')
							->where($where);
							if(strlen($_POST['epid']) > 0)
							{
								$ipid->andWhere("trim(lower(epid)) = ?",trim(mb_strtolower($_POST['epid'], 'UTF-8')));
							}
						$ipidexec = $ipid->execute();
						$ipidarray = $ipidexec->toArray();

						$comma = ",";
						$ipidval = "'0'";
						foreach($ipidarray as $key => $val)
						{
							$ipidval .= $comma . "'" . $val['ipid'] . "'";
							$comma = ",";
						}
					}

					if($todid > 0)
					{
						$where = " and isdischarged = 1 and isdelete=0";
					}
					else
					{
						$where = " and isdelete=0";
					}
					if(strlen($_POST['first_name']) > 0)
					{
						$where .=" and (trim(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_POST['first_name'] . "%')) or concat(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_POST['first_name'] . "%')) or
							concat(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_POST['first_name'] . "%')) or
							concat(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_POST['first_name'] . "%')) or
							concat(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_POST['first_name'] . "%')))";
					}

					if(strlen($_POST['last_name']) > 0)
					{
						$where .=" and (trim(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_POST['last_name'] . "%')) or concat(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_POST['last_name'] . "%')) or
							concat(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_POST['last_name'] . "%')) or
							concat(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_POST['last_name'] . "%')) or
							concat(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('%" . $_POST['last_name'] . "%')))";
					}



					if(strlen($_POST['birthdate']) > 0)
					{
						$post_birthdate = $_POST['birthdate'];
						$post_birthdate = str_replace("-", ".", $post_birthdate);
						$post_birthdate = str_replace("/", ".", $post_birthdate);

						$expl = explode(".", $post_birthdate);

						if(strlen($expl[0]) == 2 && strlen($expl[1]) == 2 && strlen($expl[2]) == 4)
						{
							$where .=" and Date_Format(birthd,'%d.%m.%Y')= '" . $post_birthdate . "'";
						}
						elseif(strlen($expl[0]) == 2 && strlen($expl[1]) == 4)
						{
							$where .=" and Date_Format(birthd,'%m.%Y')= '" . $post_birthdate . "'";
						}
						elseif(strlen($expl[0]) == 2 && strlen($expl[1]) == 2)
						{
							$where .=" and Date_Format(birthd,'%d.%m')= '" . $post_birthdate . "'";
						}
						elseif(strlen($expl[0]) == 4)
						{
							$where .=" and Date_Format(birthd,'%Y')= '" . $post_birthdate . "'";
						}
					}

					if(strlen($_POST['admissiondate']) > 0)
					{

						$post_admissiondate = $_POST['admissiondate'];
						$post_admissiondate = str_replace("-", ".", $post_admissiondate);
						$post_admissiondate = str_replace("/", ".", $post_admissiondate);

						$expl = explode(".", $post_admissiondate);
						if(strlen($expl[0]) == 2 && strlen($expl[1]) == 2 && strlen($expl[2]) == 4)
						{
							$where .=" and Date_Format(admission_date,'%d.%m.%Y')= '" . $post_admissiondate . "'";
						}
						elseif(strlen($expl[0]) == 2 && strlen($expl[1]) == 4)
						{
							$where .=" and Date_Format(admission_date,'%m.%Y')= '" . $post_admissiondate . "'";
						}
						elseif(strlen($expl[0]) == 2 && strlen($expl[1]) == 2)
						{
							$where .=" and Date_Format(admission_date,'%d.%m')= '" . $post_admissiondate . "'";
						}
						elseif(strlen($expl[0]) == 4)
						{
							$where .=" and Date_Format(admission_date,'%Y')= '" . $post_admissiondate . "'";
						}
					}

					$sql = "*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name";
					$sql .=",AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name";
					$sql .= ",AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name";
					$sql .= ",AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title";
					$sql .= ",AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation";
					$sql .= ",AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1";
					$sql .= ",AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2";
					$sql .= ",AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip";
					$sql .= ",AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city";
					$sql .= ",AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone";
					$sql .= ",AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') as mobile";
					$sql .= ",AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex";

					// if super admin check if patient is visible or not
					if($logininfo->usertype == 'SA')
					{
						$sql = "*,";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
					}

					$user_patients = PatientUsers::getUserPatients($logininfo->userid);

					$patient = Doctrine_Query::create()
						->select($sql)
						->from('PatientMaster')
						->where("ipid in (" . $ipidval . ") AND ipid IN (" . $user_patients['patients_str'] . ") " . $where);
					$patientexec = $patient->execute();
					$patientarray = $patientexec->toArray();

					$grid = new Pms_Grid($patientarray, 1, count($patientarray), "listpatientsearch.html");
					$this->view->patientgrid = $grid->renderGrid();
					$this->view->style = "";
				}
			}
		}

		/**
		 * @deprecated
		 */
		public function deletepatientAction()
		{
			exit;
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patient', $logininfo->userid, 'candelete');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if($this->getRequest()->isPost())
			{
				if(count($_POST['patient_id']) < 1)
				{
					if($_GET['flg'] == 'dis')
					{
						$this->_redirect(APP_BASE . 'patient/dischargepatientlist?flg=edel');
					}
					$this->view->error_message = $this->view->translate("selectatlestone");
					$error = 1;
				}
				if($error == 0)
				{
					if($logininfo->usertype == 'SA')
					{
						foreach($_POST['patient_id'] as $key => $val)
						{
							$mod = Doctrine::getTable('PatientMaster')->find($val);
							$mod->isdelete = 1;
							$mod->save();
						}

						$this->view->error_message = $this->view->translate("recorddeletedsuccessfully");
						if($_GET['flg'] == 'dis')
						{
							$this->_redirect(APP_BASE . 'patient/dischargelist?clm=fn&ord=ASC&pgno=0&flg=sdel');
						}
					}
					else
					{
						foreach($_POST['patient_id'] as $key => $val)
						{
							$query = Doctrine_Query::create()
								->select("*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
									AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
									AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
									AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
									AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,
									AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,
									AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,
									AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip,
									AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,
									AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone,
									AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') as mobile,
									AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex")
								->from('PatientMaster')
								->where('id=' . $val);
							$previlege = $query->execute();

							if($previlege->toArray())
							{
								$mod = Doctrine::getTable('PatientMaster')->find($val);
								$mod->isdelete = 1;
								$mod->save();

								$this->view->error_message = $this->view->translate("recorddeletedsuccessfully");
								if($_GET['flg'] == 'dis')
								{
									$this->_redirect(APP_BASE . 'patient/dischargepatientlist?clm=fn&ord=ASC&pgno=0&flg=sdel');
								}
							}
							else
							{
								$this->_redirect(APP_BASE . "error/previlege");
							}
						}
					}
				}
			}

			if($_GET['flg'] == 'dis')
			{
				$this->_redirect('patient/dischargelist?clm=fn&ord=ASC&pgno=0');
			}
			else
			{
				$this->_helper->viewRenderer('patientlist');
			}
		}

		public function allpatientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
			
			if( $this->getRequest()->isXmlHttpRequest() && $this->getRequest()->getPost('__action') == 'fetchalllist') {
			    
			    $this->setParam('__dataType', 'array');

			    $dataArray = $this->fetchalllistAction();
			    
			    $this->_helper->viewRenderer->setNoRender(true);
			    	
			    $response = array();
			    $response['draw'] = (int)$this->getRequest()->getParam('draw'); //? get the sent draw from data table
			    $response['recordsTotal'] = count($dataArray);
			    $response['recordsFiltered'] = count($dataArray);
			    $response['data'] = $dataArray;
			    
			    ob_end_clean();
			    ob_start();
			    
			    $json = Zend_Controller_Action_HelperBroker::getStaticHelper('json');
			    $json->sendJson($response);
			    
			    exit;
			    
    		}
			    
		    return;
		}

		public function nhospizpatientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		public function hospizvereinpatientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		public function updatecontactnumberAction()
		{
			if(!empty($_REQUEST['rcn']))
			{
				$pm = new Application_Form_PatientMaster();
				$pm->UpdateContactNumber($_REQUEST['rcn']);
			}
			exit;
		}

		public function fetchalllistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$clientid = $logininfo->clientid;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			/* #### Check if client has permission to see the organisation column ################## */
			$this->view->org_column = 0;
			$organisationprevileges = new Modules();
			$display_org = $organisationprevileges->checkModulePrivileges("72", $logininfo->clientid);
			if($display_org)
			{
				$this->view->org_column = 1;
			}
			/* ##################################################################################### */
			$limit = 50;
			$columnarray = array("pk" => "id", "fn" => "p__0", "ln" => "p__2", "rd" => "p__admission_date", "ledt" => "p__change_date", "bd" => "p__birthd", 'ed' => 'epid_num');
			$sorting_array = array('ln' => 'p.last_name', 'fn' => 'p.first_name');
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");

			$this->view->order = $orderarray[$_GET['ord']];
			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];

			$logininfo = new Zend_Session_Namespace('Login_Info');

			$user_patients = PatientUsers::getUserPatients($logininfo->userid); //get user's patients by permission

			$patient = Doctrine_Query::create()
				->select('p.ipid')
				->from('PatientMaster p')
				->where('p.isdelete = 0')
				->andWhere('p.ipid IN (' . $user_patients['patients_str'] . ')')
				->andWhere('p.isdischarged = 0')
				->andWhere('p.isstandby = 0')
				->andWhere('p.isstandbydelete = 0');
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere('e.clientid = ' . $logininfo->clientid);
			$patienidtarray = $patient->fetchArray();

			$patientarray[0]['count'] = sizeof($patienidtarray);

			$patienidtarray[9999999] = "xx";

			$orderbyloc = new PatientLocation();
			$patlocdet = $orderbyloc->getOrderbyLocation($patienidtarray, $logininfo->clientid);

			$orderbylocation = $patlocdet['orderbylocation'];
			$patient2location = $patlocdet['patient2location'];
			$patient2home = $patlocdet['patient2home'];

			if(is_array($orderbylocation))
			{
				foreach($orderbylocation as $obl)
				{
					$orderbylocation_str .= '"' . $obl . '",';
				}
			}

			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.traffic_status,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.isadminvisible,p.traffic_status,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
			}
			$patient->select($sql);
			$patient->limit($limit);

			if($_GET['clm'] == 'cl')
			{
				$patient->orderBy('FIELD(e__ipid, ' . substr($orderbylocation_str, 0, -1) . ') ' . $_GET['ord'] . ', e__ipid');
			}
			elseif($_REQUEST['clm'] == 'fn' || $_REQUEST['clm'] == 'ln')
			{
				$patient->orderBy('CONVERT(AES_DECRYPT(' . $sorting_array[$_REQUEST['clm']] . ', "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ' . $_REQUEST['ord'] . '');
			}
			else
			{
				$patient->orderBy($columnarray[$_GET['clm']] . " " . $_GET['ord']);
			}
			$this->view->{"style" . $_GET['pgno']} = "active";
			$patient->offset($_GET['pgno'] * $limit);
			$this->view->offset = ($_GET['pgno'] * $limit);
			$patientlimit = $patient->fetchArray();

			foreach($patientlimit as $k_pat_limit => $v_pat_limit)
			{
				$pat_limit_ipids[] = $v_pat_limit['EpidIpidMapping']['ipid'];

				$pat_limit_epids[] = $v_pat_limit['EpidIpidMapping']['epid'];

				if(strlen($v_pat_limit['street1']) > 0)
				{
					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['street1'] . '<br />';
				}
				if(strlen($v_pat_limit['zip']) > 0)
				{
					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['zip'] . ' ';
				}
				if(strlen($v_pat_limit['city']) > 0)
				{
					$address[$v_pat_limit['EpidIpidMapping']['ipid']] .= $v_pat_limit['city'];
				}

				$parient_address[$v_pat_limit['EpidIpidMapping']['ipid']] = $address[$v_pat_limit['EpidIpidMapping']['ipid']];
			}
			if(count($pat_limit_ipids) == '0')
			{
				$pat_limit_ipids[] = '999999999';
			}

			$assignuser = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('clientid=' . $logininfo->clientid)
				->andWhere('isdelete=0 and isactive=0')
				->orderBy('last_name ASC');
			$assignuserarray = $assignuser->fetchArray();

			foreach($assignuserarray as $k => $uvalues)
			{
				$user_details[$uvalues['id']]['name'] = $uvalues['last_name'] . ', ' . $uvalues['first_name'];
			}


			if(count($pat_limit_epids) == '0')
			{
				$pat_limit_epids[] = '999999999';
			}

			$qpa = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->whereIn('epid', $pat_limit_epids)
				->andWhere('clientid = "' . $clientid . '"');
			$qpaarray = $qpa->fetchArray();

			foreach($qpaarray as $k => $qpa_value)
			{
				if(!empty($user_details[$qpa_value['userid']]['name']))
				{
					$epid2qpa[$qpa_value['epid']][] = $user_details[$qpa_value['userid']]['name'];
				}
			}


			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($pat_limit_ipids);

			foreach($healthinsu_array as $h => $hvalues)
			{
				$pat2health[$hvalues['ipid']] = $hvalues;
			}


			//get patient sapv statuses START
			$paths = new OrgPaths();
			$client_paths = $paths->get_paths($clientid);

			//multiple ipids
			$data = array();
			$executed_functions = array();
			foreach($client_paths as $k_c_path => $v_c_path)
			{
				if(!in_array($v_c_path['function'], $executed_functions))
				{
					if(empty($data))
					{
						$data = array();
					}

					$executed_functions[] = $v_c_path['function'];
					$retrived_data = $paths->{$v_c_path['function']}($pat_limit_ipids);
					if($retrived_data)
					{
						$data = array_merge_recursive($data, $retrived_data);
					}
				}
			}

			foreach($data as $k_ipid => $v_function_data)
			{
				if($k_ipid != '999999999')
				{
					foreach($v_function_data as $k_function => $v_function_arr)
					{
						foreach($v_function_arr as $k_short => $v_short_status)
						{
							if($v_short_status['status'] != "gray" && $v_short_status['status'] != "green")
							{
								if($advance[$k_ipid][$k_function] == "1" || count($advance[$k_ipid][$k_function]) == '0')
								{
									if($k_function != 'admission_todo')
									{
										$last_status[$k_ipid][$k_function]['shortcut'] = $k_short;
										$last_status[$k_ipid][$k_function]['status'] = $v_short_status['status'];

										if($v_short_status['status'] == "red")
										{
											$advance[$k_ipid][$k_function] = 0;
										}
										else
										{
											$advance[$k_ipid][$k_function] = 1;
										}
									}
									else
									{
										$adm_data['shortcut'] = $k_short;
										$adm_data['status'] = $v_short_status['status'];

										$last_status[$k_ipid][$k_function][] = $adm_data;
									}
								}
							}
						}
					}
				}
			}

			$patient_ipids[] = '999999999';
			foreach($patientlimit as $key => $patient_item)
			{
				$patient_ipids[] = $patient_item['EpidIpidMapping']['ipid'];
				$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']] = $patient_item;

				//location
				if(!empty($patient2location[$patient_item['EpidIpidMapping']['ipid']]))
				{
					if(in_array($patient_item['EpidIpidMapping']['ipid'], $patient2home))
					{
						$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['location'] = $patient2location[$patient_item['EpidIpidMapping']['ipid']] . '<br/>' . $parient_address[$patient_item['EpidIpidMapping']['ipid']];
					}
					else
					{
						$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['location'] = $patient2location[$patient_item['EpidIpidMapping']['ipid']];
					}
				}
				else
				{
					$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['location'] = '-';
				}

				$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['verordnet'] = '';
				$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['status'] = '';

				if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $last_status))
				{
					foreach($last_status[$patient_item['EpidIpidMapping']['ipid']] as $k_path => $v_data)
					{
						if($k_path != 'admission_todo')
						{
							$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['org_shortcuts'][] = $v_data['shortcut'];
							$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['org_color'][] = $v_data['status'];
						}
						else
						{
							foreach($v_data as $k_arr_adm => $v_arr_adm)
							{
								$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['org_shortcuts'][] = $v_arr_adm['shortcut'];
								$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['org_color'][] = $v_arr_adm['status'];
							}
						}
					}
				}
				else
				{
					$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['org_shortcuts'][] = '';
					$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['org_color'][] = '';
				}

				$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['treated_by'] = implode('<br/>', $epid2qpa[$patient_item['EpidIpidMapping']['epid']]);

				if(!empty($pat2health[$patient_item['EpidIpidMapping']['ipid']]))
				{
					$n_patientlimit[$patient_item['EpidIpidMapping']['ipid']]['privatepatient_info'] = $pat2health[$patient_item['EpidIpidMapping']['ipid']]['privatepatient'];
				}
			}

			$sapv = new SapvVerordnung();
			$patient_sapv_data = $sapv->get_today_active_highest_sapv($patient_ipids);

			foreach($patient_sapv_data['last'] as $k_sapv_data => $v_sapv_data)
			{
				$n_patientlimit[$v_sapv_data['ipid']]['verordnet'] = $v_sapv_data['verordnet'];
				$n_patientlimit[$v_sapv_data['ipid']]['status'] = $v_sapv_data['status'];
			}

			if ($this->getParam('__dataType') == 'array') {
			    //return for the mobile version... just a plain json i can work with .. not hardcoded html
			    $patientsMobile = array_map(function($i){return [
			        'traffic_status' => $i['traffic_status'],
			        'last_name' => $i['last_name'],
			        'first_name' => $i['first_name'],
			        'epid' => $i['EpidIpidMapping']['epid'],
			        'enc_id' => Pms_Uuid::encrypt($i['id']),
			    ];}, $n_patientlimit);
			    dd($n_patientlimit);
			    
			    
			    $patientsMobile = array_values($patientsMobile);//so not to send ipid
			    
			    return $patientsMobile;			    
			}
			
			
			$grid = new Pms_Grid($n_patientlimit, 1, $patientarray[0]['count'], "listallpatient.html");
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("allpatientnavigation.html", 5, $_GET['pgno'], $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patient/fetchalllist.html');

			echo json_encode($response);
			exit;
		}

		public function assignpatientAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$clientid = $logininfo->clientid;

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('assignpatient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
			$this->_helper->layout->setLayout('layout');

			$qpa = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('clientid = "' . $clientid . '"');
			$qpaarray = $qpa->fetchArray();

			$comma = ",";
			$mapqpa = "'9999999999'";
			foreach($qpaarray as $key => $val)
			{
				$mapqpa .= $comma . "'" . $val['epid'] . "'";
				$comma = ",";
			}
			$where = "e.epid not in (" . $mapqpa . ") and e.clientid=" . $logininfo->clientid;

			$ipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping e')
				->where($where);
			$ipidarray = $ipid->fetchArray();

			$comma = ",";
			$ipidval = "'0'";
			foreach($ipidarray as $key => $val)
			{
				$ipidval .= $comma . "'" . $val['ipid'] . "'";
				$comma = ",";
			}

			$user_patients = PatientUsers::getUserPatients($logininfo->userid); //get user's patients by permission
			$columnarray = array("pk" => "id", "fn" => "first_name", "ln" => "last_name", "rd" => "recording_date", "bd" => "birthd");

			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$this->view->order = $orderarray[$_GET['ord']];
			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];

			$patient = Doctrine_Query::create()
				->select("count(*)")
				->from('PatientMaster')
				->where('ipid in (' . $ipidval . ') and isdelete=0 and isdischarged=0')
				->andWhere('ipid IN (' . $user_patients['patients_str'] . ')');
			$patientarray = $patient->fetchArray();
			$limit = 50;

			$sql = "*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,";
			$sql .="AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,";
			$sql .="AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,";
			$sql .="AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,";
			$sql .="AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,";
			$sql .="AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,";
			$sql .="AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,";
			$sql .="AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip,";
			$sql .="AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,";
			$sql .="AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone,";
			$sql .="AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') as mobile,";
			$sql .="AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "*,";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
			}

			$patient->select($sql);
			$patient->limit($limit);
			$patient->offset($_GET['pgno'] * $limit);
			$patientlimit = $patient->fetchArray();

			$grid = new Pms_Grid($patientlimit, 1, $patientarray[0]['count'], "listunassignpatient.html");
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("patientnavigation.html", 5, $_GET['pgno'], $limit);

			if($this->getRequest()->isPost())
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('assignpatient', $logininfo->userid, 'canadd');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				if(strlen($_POST['epid']) < 1)
				{
					$this->view->error_epid = $this->view->translate("pleaseentervalidepid");
					$error = 1;
				}
				$dbepid = Doctrine::getTable('EpidIpidMapping')->findBy('epid', $_POST['epid']);
				$eparray = $dbepid->toArray();
				if(count($eparray) < 1)
				{
					$this->view->error_epid = $this->view->translate("pleaseentervalidepid");
					$error = 2;
				}
				else
				{
					$patient = Doctrine_Query::create()
						->select("*")
						->from('PatientMaster')
						->where("ipid ='" . $eparray[0]['ipid'] . "' and isdelete=0 and isdischarged=0");

					$patientarray = $patient->fetchArray();

					if(count($patientarray) < 1)
					{
						$this->view->error_epid = $this->view->translate("pleaseentervalidpatient");
						$error = 2;
					}
				}

				if($error == 0)
				{
					$this->_redirect(APP_BASE . "patient/patienttodoctor?epid=" . Pms_Uuid::encrypt($_POST['epid']));
				}
			}
		}

		public function fetchpatientdropdownAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$this->_helper->viewRenderer('assignpatient');

			if(strlen($_REQUEST['ltr']) > 0)
			{
				$fndrop = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where("clientid = '" . $clientid . "'");
				$fndropexec = $fndrop->execute();
				if($fndropexec)
				{
					$fndroparray = $fndropexec->toArray();
					$comma = ",";
					$fnipidval = "'0'";

					foreach($fndroparray as $key => $val)
					{
						$fnipidval .= $comma . "'" . $val['ipid'] . "'";
						$comma = ",";
					}
				}


				$drop = Doctrine_Query::create()
					->select("*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
					AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
					AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,
					AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,
					AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,
					AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip,
					AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,
					AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone,
					AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') as mobile,
					AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex")
					->from('PatientMaster p')
					->where("ipid in (" . $fnipidval . ") and isdischarged = 0 and isdelete=0")
					->andWhere("trim(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('" . $_REQUEST['ltr'] . "%')) or trim(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE trim(lower('" . $_REQUEST['ltr'] . "%'))")
					->orderBy('last_name ASC');
				$dropexec = $drop->execute();
				$droparray = $dropexec->toArray();
			}
			else
			{
				$droparray = array();
			}

			$comma = ",";
			$ipidval = "'0'";
			foreach($droparray as $key => $val)
			{
				$ipidval .= $comma . "'" . $val['ipid'] . "'";
				$comma = ",";
			}

			$epid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->where('ipid in (' . $ipidval . ')');
			$epidexec = $epid->execute();
			$epidarray = $epidexec->toArray();

			$dropepidarray = array("droparray" => $droparray, "epidarray" => $epidarray);

			foreach($droparray as $dropkey => $val)
			{
				$key = Pms_DataTable::search($epidarray, $val['ipid'], 'ipid');
				$droparray[$dropkey]['epid'] = $epidarray[$key]['epid'];
			}

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "patientdropdiv";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patient'] = $droparray;

			echo json_encode($response);
			exit;
		}

		////Maria:: Migration CISPC to ISPC 22.07.2020
        public function patientswitcherclinicheaderAction()
        {
            if(isset($_GET['fallart']))
                $fallart = $_GET['fallart'];

            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpid($decid);

            $patcase = new PatientCaseStatus();
            $pats = $patcase->patientswitcherclinicheaderAction($ipid, $fallart);

            $out=json_encode($pats);
            echo $out;
            exit;
        }

		public function patientdischargeAction()
		{
		    // ISPC-2198
		    // array of PatientReadmission 's .. i will pass this array to Application_Form_DgpKern
		    $PatientReadmission_FALLWEISE = array(
		        'admission_date' => new stdClass(),
		        'discharge_date' => new stdClass()
		    ); 
		    
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$iscl = Pms_Plugin_Acl::getClientTabmenuAccess($logininfo->clientid);
			if(!$iscl)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
			/* ######################################################### */

			$ipid = Pms_CommonData::getIpid($decid);

			$this->view->discharge_date = date("d-m-Y");
			$this->view->rec_timeh = date("H");
			$this->view->rec_timem = date("i");

			$this->view->disclass = "active";
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdischarge', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$pmaster = $patientmaster->getMasterData($decid, 0);
			$pmaster = $patientmaster->get_patientMasterData();
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			if($pmaster['isstandby'] == '1')
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}
			/*			 * ***************************************** */
			
			
			/* ISPC-1775,ISPC-1678, ISPC-1757 */
			/*$show_dgp_block= "0";
			if(Modules::checkModulePrivileges("125", $logininfo->clientid))
			{
			    $show_dgp_block = "1";
			}
			$this->view->show_dgp_block= $show_dgp_block;*/
			
			$ef = new ExtraForms();
			$allowedFormBoxes = $ef->get_client_forms($this->logininfo->clientid);
			$this->view->allowedFormBoxes = $allowedFormBoxes;
				
			$this->view->act = "patient/patientdischarge?id=" . $_GET['id'];
			$this->_helper->layout->setLayout('layout');
			$this->view->hours = Pms_CommonData::getHours();
			$this->view->minutes = Pms_CommonData::getMinutes();

			$logininfo = new Zend_Session_Namespace('Login_Info');
			if($logininfo->clientid)
			{
				$clientid = $logininfo->clientid;
			}

			/* ---------------------------Get STTI Methode -------------------------- */
			$dis = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('isdelete = 0  and clientid="' . $logininfo->clientid . '" and (abbr = "STTI" or abbr = "stti") ');
			$dis->getSqlQuery();
			$disarray = $dis->fetchArray();
			if(count($disarray) > 0)
			{
				$sttiid = $disarray[0]['id'];
			}

			/* ---------------------------Get STTI Methode Permissions ----------------- */
			$wlcprevileges = new Modules();
			$wlc = $wlcprevileges->checkModulePrivileges("51", $logininfo->clientid);

			if($wlc)
			{
				$this->view->dischargemetod = $sttiid;
			}
			else
			{
				$this->view->dischargemetod = "xx";
			}
			
			/* you now have in the view all the modules info from this client .. no need to put one $var for each*/
			$this->view->client_modules = $wlcprevileges->get_client_modules();
			
			/* ---------------------------Get STTI Methode END -------------------------- */

			/* ---------------------------Get TOD Methode -------------------------- */
			$dis_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('isdelete = 0  and clientid="' . $logininfo->clientid . '" and (abbr = "TOD" or abbr = "TODNA" or abbr = "tod") ');
			$dis_dead_array = $dis_dead->fetchArray();

			if(count($dis_dead_array) > 0)
			{
				foreach($dis_dead_array as $key => $dead_meth)
				{
					$dead_meth_array[] = $dead_meth['id'];
				}
			}
			$this->view->dead_methods_js = json_encode($dead_meth_array);
			/* ---------------------------Get TOD Methode END -------------------------- */

			/* ----------------------  Get Vollversorgung History--------------------------- */
			$vvhistory = new VollversorgungHistory();
			$historyvv = $vvhistory->getVollversorgungHistoryAll($ipid);
			$last_history = end($historyvv);
			//check if we have any data in history table
			if($pmaster['vollversorgung'] == "0")
			{
				if($last_history['date_type'] == 2)
				{
					$this->view->anlageCloseDate = date("d.m.Y", strtotime($last_history['date']));
				}
			}
			/* ----------------------  Get Vollversorgung History END --------------------------- */
			
			
			/* ----------------------  Get Dgp kern START--------------------------- */
			//if($show_dgp_block == "1")
			if($allowedFormBoxes['59'])
			{			  
				$dgp_kern_model = new DgpKern();
				$partners_array = $dgp_kern_model->get_form_texts();

				foreach($partners_array['medication_references_a'] as $k=>$mr_data){
					$partners_array['medication_references_a_final'][$mr_data['code']] = $mr_data['label'];
				}
				foreach($partners_array['medication_references_b'] as $k=>$mr_data){
					$partners_array['medication_references_b_final'][$mr_data['code']] = $mr_data['label'];
				}
				
				$dgp['form']['texts'] = $partners_array;
				
			
				// Symptomatology
				$sym_relevant_values = array('0' =>'1','1'=>'2','2'=>'2','3'=>'2','4'=>'2','5'=>'3','6'=>'3','7'=>'3','8'=>'4','9'=>'4','10'=>'4');
				$symp = new Symptomatology();
				$first_symptomarr = $symp->getPatientSymptpomatologyFirst($ipid);
				
				$first_symptoms_ids = array();
				foreach($first_symptomarr as $k=>$value) {
					$first_symptoms_ids[] = $value['id'];
					$symp_first_values[$value['symptomid']] = $value['input_value'];
				}

				foreach($partners_array['symptoms'] as $sym_id=>$sym_details){
					$dgp['kern']['admission'][$sym_details['code']] = $sym_relevant_values[$symp_first_values[$sym_id]];
				}
				
				
				$symptomarr = $symp->getPatientSymptpomatologyLast($ipid);
				foreach($symptomarr as $k=>$value) {
					if(!in_array($value['id'],$first_symptoms_ids))
					{
						$symp_last_values[$value['symptomid']] = $value['input_value'];
					}
				}
 
				
				// ACP
				$acp = new PatientAcp();
				$acp_data = $acp->getByIpid(array($ipid));
				$current_acp_data = $acp_data[$ipid];
				
				if(!empty($current_acp_data)){
					foreach($current_acp_data as $k=>$block){
						
						if($block['division_tab'] == "living_will"){
						
							if($block['active'] == "yes"){
								$dgp['kern']['discharge']['pverfuegung']  = '1';
							} else{
								$dgp['kern']['discharge']['pverfuegung']  = '-1';
							}
						
						}
						elseif($block['division_tab'] == "healthcare_proxy")
						{
							if($block['active'] == "yes"){
								$dgp['kern']['discharge']['vollmacht'] = '1';
							} else{
								$dgp['kern']['discharge']['vollmacht'] = '-1';
							}
						
						}
						elseif($block['division_tab'] == "care_orders")
						{
							if($block['active'] == "yes"){
								$dgp['kern']['discharge']['betreuungsurkunde'] = '1';
							} else{
								$dgp['kern']['discharge']['betreuungsurkunde'] = '-1';
							}
						}
						
						
						
						/* if($block['division_tab'] == "living_will" && $block['active'] == "yes"){
							$dgp['kern']['discharge']['pverfuegung'] = '1';
						}else{
							$dgp['kern']['discharge']['pverfuegung'] = '1';
						}
				
						if($block['division_tab'] == "healthcare_proxy" && $block['active'] == "yes"){
							$dgp['kern']['discharge']['vollmacht'] = "1";
						} else {
							$dgp['kern']['discharge']['vollmacht'] = "0";
						}
				
						if($block['division_tab'] == "care_orders" && $block['active'] == "yes"){
							$dgp['kern']['discharge']['betreuungsurkunde'] = '1';
						} else{
							$dgp['kern']['discharge']['betreuungsurkunde'] = '0';
						} */
					}
				}
				
				
				
				//get last=current fall
				
				$PatientReadmission_admision_id = null;
				$PatientReadmission_discharge_id = null;
				
				$PatientReadmission_current_admission_date = null;
				$PatientReadmission_current_discharge_date = null;
				
				$falls = PatientReadmission::findFallsOfIpid($ipid);
				$currentFall = end($falls);
				
				if ( ! empty($currentFall['admission']['id'])) {
				    $PatientReadmission_admision_id = $currentFall['admission']['id'];
				    $PatientReadmission_current_admission_date = date("Y-m-d",strtotime($currentFall['admission']['date']));
				}
				if ( ! empty($currentFall['discharge']['id'])) {
				    $PatientReadmission_discharge_id = $currentFall['discharge']['id'];
				    $PatientReadmission_current_discharge_date = date("Y-m-d",strtotime($currentFall['discharge']['date']));
				}
				
				
				
				
				//add ->andWhere(patient_readmission_ID)
				// Get Saved data 
				$kern_froms_array = array();
				if ($PatientReadmission_discharge_id)  {
    			    $kern_forms_q = Doctrine_Query::create()
    			    ->select('dk.*')
    			    ->from('DgpKern dk')
    			    //->addSelect('tdk.*')
    			    //->leftJoin('dk.TwinDgpKern tdk ON (tdk.id = dk.twin_ID AND tdk.twin_ID = dk.id)') //to be sure we double check
    			    ->where('dk.ipid = ?', $ipid)
    			    ->andWhere('dk.form_type = "dis"')
    			    ->andWhere('dk.patient_readmission_ID = ?', $PatientReadmission_discharge_id)
    			    ->orderBy('dk.create_date DESC')
    			    ->limit(1);
    			    $kern_forms_arr = $kern_forms_q->fetchArray();
    			    
    			    //'moa' starts here his 'logic' ...
    			    foreach($kern_forms_arr as $k=>$kern){
    			        $kern_froms_array[] = $kern['id'];
    			        $kern_froms_data[$kern['id']] = $kern;
    			    }
    			    
//     			    $this->_helper->log->debug($kern_forms_arr);  
    			  
    			    
				} elseif ($PatientReadmission_admision_id) {
				    
				    $kern_forms_q = Doctrine_Query::create()
				    ->select('dk.*')
				    ->from('DgpKern dk')
				    ->addSelect('tdk.*')
				    ->leftJoin('dk.TwinDgpKern tdk ON (tdk.id = dk.twin_ID AND tdk.twin_ID = dk.id)') //to be sure we double check
				    ->where('dk.ipid = ?', $ipid)
				    ->andWhere('dk.form_type = "adm"')
				    ->andWhere('dk.patient_readmission_ID = ?', $PatientReadmission_admision_id)
				    ->orderBy('dk.create_date DESC')
				    ->limit(1);
				    
				    $kern_forms_arr = $kern_forms_q->fetchArray();
				    
				    $kern_forms_arr = array($kern_forms_arr[0]['TwinDgpKern']);
				    	
				    foreach($kern_forms_arr as $k=>$kern){
				        $kern_froms_array[] = $kern['id'];
				        $kern_froms_data[$kern['id']] = $kern;
				    }
				    
				    //$this->_helper->log->debug($kern_froms_array);
				}	

				
				
				
				
			    if ( ! empty($kern_froms_array)) {
			        
    			    $last_form_id = end($kern_froms_array); //'moa logic'...
    			    if($last_form_id)//'moa logic'...
    			    {
        			    $kern_data = $kern_froms_data[$last_form_id]; //'moa logic'...
        			    $dgp['kern']['discharge'] = $kern_data;
        			    $dgp['kern']['discharge']['dgp_kern_id'] = $kern_data['id'];
        			    // partners
        			    $begleitung_discharge = explode(",", $kern_data['begleitung']);
        			    $dgp['kern']['discharge']['begleitung'] = $kern_data['begleitung'];
        			    $dgp['kern']['discharge']['begleitung_arr'] = $begleitung_discharge;

        			    if($kern_data['who'] == "2"){
        			    	$kern_data['who'] = '0';
        			    }
        			    foreach($partners_array['medication_references_a'] as $k=>$mr_data){
        			    	$dgp['kern']['discharge'][$mr_data['code']] = $kern_data[$mr_data['code']];
        			    }
        			     
        			     
        			    if($kern_data['steroide'] == "2"){
        			    	$kern_data['steroide'] = '0';
        			    }
        			     
        			    foreach($partners_array['medication_references_b'] as $k=>$mr_data){
        			    	$dgp['kern']['discharge'][$mr_data['code']] = $kern_data[$mr_data['code']];
        			    }
    			    }
			    }
			   
			    // ecog values for discharge ISPC-2217 Ancuta 25.07.2018 
			    if(empty($PatientReadmission_current_discharge_date)) {
			        $PatientReadmission_current_discharge_date = date("Y-m-d");
			    }
			    
		        $ecog_values_discharge = $patientmaster->findEcogValuesInPeriod($ipid, $PatientReadmission_current_admission_date, $PatientReadmission_current_discharge_date);
		        $dgp['kern']['discharge']['ecog'] = end($ecog_values_discharge);
			    
			    $ploc = new PatientLocation();
			     
			    $patient_locations = new PatientLocation();
			    $patient_period_locations = $patient_locations->getPatientLocations($ipid,true);
			     
			    foreach($patient_period_locations as $k=>$location_details){
			        $location_start = date("d.m.Y",strtotime($location_details['valid_from']));
			        if(in_array($location_start,$around_admission_days_start) )
			        {
			            $admission_location[] = $location_details;
			        }
			    
			        $all_location[] = $location_details;
			    }
	        
	            if($all_location)
	            {
	            	$last_location = end($all_location);
	            
	            	switch ($last_location['master_location']['location_type']){
	            
	            		case "6":// bei Kontaktperson
	            			$dgp['kern']['discharge']['wohnsituation'] = "2";
	            			$discharge_wohnsituation = "2";
	            			break;
	            
	            		case "5":// Zu Hause
	            			if($last_location['master_location']['location_sub_type'] == "alone")
	            			{
	            				$dgp['kern']['discharge']['wohnsituation'] = "1";
	            				$discharge_wohnsituation = "1";
	            			}
	            			else
	            			{
	            				$dgp['kern']['discharge']['wohnsituation'] = "6";
	            				$discharge_wohnsituation = "6";
	            			}
	            			break;
	            
	            			 
	            		case "3":// Pflegeheim
	            		case "4":// Altenheim
	            			$dgp['kern']['discharge']['wohnsituation'] = "4";
	            			$discharge_wohnsituation = "4";
	            			break;
	            			 
	            		case "2":// Hospiz // NEW
	            			$dgp['kern']['discharge']['wohnsituation'] = "5";
	            			$discharge_wohnsituation = "5";
	            			break;
	            
	            		case "0":// Sonstige
	            			$dgp['kern']['discharge']['wohnsituation'] = "4";
	            			$discharge_wohnsituation = "4";
	            			break;
	            			 
	            		default:
	            			$dgp['kern']['discharge']['wohnsituation'] = "0";//not applicable
	            			$discharge_wohnsituation = "0";
	            			break;
	            	}
	            }
	            
	            $this->view->dgp = $dgp;
			}			
			/* ----------------------  Get Dgp kern END--------------------------- */

			$mess = new Messages();
			if($this->getRequest()->isPost())
			{	
			    //ISPC-1547 Lore 13.08.2019
			    $userid = $logininfo->userid;
			    $pt = new PatientLocation();  
			    $locationactive = $pt->getActiveLocationPatInfo($ipid);
			    if($locationactive[0]['location_type'] == '1'){
			        $inout = 'hospital_discharge';
			        $messages = new Messages();
			        $notification_change_location = $messages->change_location_notification($ipid, $userid, $inout, 'patientdischarge');
			    }
			    // --
				if($_POST['deathoption'] != 1)
				{
					$previleges = new Pms_Acl_Assertion();
					$return = $previleges->checkPrevilege('patientdischarge', $logininfo->userid, 'canadd');

					if(!$return)
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}
					$patient_form = new Application_Form_PatientDischarge();
					$patdigno = new Application_Form_PatientDiagnosis();
					$diagno_text = new Application_Form_DiagnosisText();


					$this->cntval = $patient_form->validate($_POST);

					if($this->cntval)
					{

						// Patient discharge course - discharge date START
						$discharge_date_course = "Entlassungszeitpunkt : " . date('d.m.Y', strtotime($_POST['discharge_date'])) . " " . $_POST['rec_timeh'] . "." . $_POST['rec_timem'] . " Uhr";
						$discharge_date_course_Ymd = date('Y-m-d', strtotime($_POST['discharge_date'])) . " " . $_POST['rec_timeh'] . ":" . $_POST['rec_timem'] . ":00";
						
						$cust_pc_discharge = new PatientCourse();
						$cust_pc_discharge->ipid = $ipid;
						$cust_pc_discharge->course_date = date("Y-m-d H:i:s", time());
						$cust_pc_discharge->course_type = Pms_CommonData::aesEncrypt("K");
						$cust_pc_discharge->course_title = Pms_CommonData::aesEncrypt($discharge_date_course);
						$cust_pc_discharge->user_id = $logininfo->userid;
						$cust_pc_discharge->tabname = Pms_CommonData::aesEncrypt('discharge_date');
						$cust_pc_discharge->save();

						
						$pc_discharge_id = $cust_pc_discharge->id;
						// Patient discharge course - discharge date END

						if($pmaster['vollversorgung'] == 1)
						{
							//if anlage is started then insert an end
							$bd_date = explode(".", $_POST['discharge_date']);
							$voll_date = $bd_date[2] . "-" . $bd_date[1] . "-" . $bd_date[0] . " " . $_POST['rec_timeh'] . ":" . $_POST['rec_timem'] . ":00";

							$vollhistory = new VollversorgungHistory();
							$vollhistory->ipid = $ipid;
							$vollhistory->user_id = $logininfo->userid;
							$vollhistory->date = $voll_date;
							$vollhistory->date_type = "2"; //1 =add voll 2- dismiss voll
							$vollhistory->save();

							// reset date in patient master
							$custpm = Doctrine::getTable('PatientMaster')->find($decid);
							$custpm->vollversorgung = 0;
							$custpm->vollversorgung_date = "0000-00-00 00:00:00";
							$custpm->save();
						}
						else
						{
							//if anlage is ended then search for last end and edit it
							if($_POST['changeVollversorgungEndDate'] == 1)
							{
								$vvh = new VollversorgungHistory();
								$vvHistoryEnd = $vvh->getVollversorgungHistory($ipid, "2"); //get vollversorgung ends
								$lastVVEnd = end($vvHistoryEnd);

								$cust = Doctrine::getTable('VollversorgungHistory')->find($lastVVEnd[0]['id']);
								$cust->date = date('Y-m-d H:i:s', strtotime($_POST['discharge_date']));
								$cust->save();
							}
						}

						//close lent medipumps time period
						$medipumpe_form = new Application_Form_PatientMedipumps();
						$medi_pumps = $medipumpe_form->close_medipump_lent_period($ipid, $_POST['discharge_date']);

						//ISPC-2654 Ancuta 13.10.2020
						// Move to archive  all ended diagnostics
                        $diagnosis_clinic = new Application_Form_PatientDiagnosis();
                        $diagnosis_clinic->archiv_ended_diagnosis($ipid);
                        // --
						
						
						//radu formone active time patient (readmission new table) start
						//
						
						
						//check admision date from patient master in patient readmission
						$adm_date = Doctrine_Query::create()
							->select('*')
							->from('PatientMaster')
							->where('ipid = ?', $ipid)
							->limit(1);
						$admission_exec = $adm_date->execute();
						$admissionarr = $admission_exec->toArray();

						$first_admision = Doctrine_Query::create()
							->select('*')
							->from('PatientReadmission')
							->where('ipid = ?', $ipid)
							->andWhere('date =  ?', $admissionarr[0]['admission_date'])
							->andWhere('date_type = 1')
							//@cla
							->limit(1) 
							->fetchOne(null, Doctrine_Core::HYDRATE_RECORD)
						;
						
						//$fadmission = $first_admision->execute();
						//$fadmarr = $fadmission->toArray();

						
						
						if ($first_admision == false) {
							//patient has no admission date in patient readmission
							//insert first admission date
							$patientreadmission = new PatientReadmission();
							$patientreadmission->user_id = $logininfo->userid;
							$patientreadmission->ipid = $ipid;
							$patientreadmission->date = $admissionarr[0]['admission_date'];
							$patientreadmission->date_type = 1; //1 =admission-readmission 2- discharge
							$patientreadmission->save();
							
							$PatientReadmission_FALLWEISE['admission_date'] = $patientreadmission;
							
						} else {
						    
						    $PatientReadmission_FALLWEISE['admission_date'] = $first_admision;
						}
						
						//usleep(1000000); //removed by @cla... if you add back pretty please @dev EXPLAIN why you need this, and send me a message too
						
						//check admision date from patient master in patient readmission END
						//$discharge_date = Doctrine_Query::create()
						$PatientReadmission_discharge_date = Doctrine_Query::create()
							->select('*')
							->from('PatientReadmission')
							->where('ipid = ?', $ipid)
							->andWhere('date_type = 2 ')
							->orderBy('date DESC')
							->limit(1)
							->fetchOne(null, Doctrine_Core::HYDRATE_RECORD)
							;
						//$discharge_datexec = $discharge_date->execute();
						//$dischargedatearr = $discharge_datexec->toArray();
						
						$discharge_date = explode(".", $_POST['discharge_date']);
						if(strlen($_POST['discharge_date']) > 0)
						{
							$discharge_date = $discharge_date[2] . "-" . $discharge_date[1] . "-" . $discharge_date[0] . " " . $_POST['rec_timeh'] . ":" . $_POST['rec_timem'];
						}

						//ISPC-2682, elena, 05.10.2020
                        // free patient's bed to discharge date
                        $clinic_bed = new PatientClinicBed;
						$clinic_bed->finish_patient_occupancy_to_discharge_date($ipid, $clientid, $discharge_date);

// 						if(strtotime(date('Y-m-d', strtotime($dischargedatearr[0]['date']))) >= strtotime(date('Y-m-d', strtotime($pmaster['admission_date']))) || $pmaster['isdischarged'] == '1')
						if($pmaster['isdischarged'] == '1')
						{
							//patient is discharged we do an edit
							/*
							$readm = Doctrine::getTable('PatientReadmission')->findOneByIpidAndId($ipid, $dischargedatearr[0]['id']);

							if($readm)
							{
							    $readm->date = $discharge_date;
							    $readm->save();
							}
							*///@cla - i'm getting pissed-off by all this 'moa logic' shit 
							if ($PatientReadmission_discharge_date) {
							    $PatientReadmission_discharge_date->date = $discharge_date;
							    $PatientReadmission_discharge_date->save();
							    
							    $PatientReadmission_FALLWEISE['discharge_date'] = $PatientReadmission_discharge_date;
							}
							
							else{
								
								//insert readmission if data is old- and no readmission was added at discharge
								$patientreadmission = new PatientReadmission();
								$patientreadmission->user_id = $logininfo->userid;
								$patientreadmission->ipid = $ipid;
								$patientreadmission->date = $discharge_date;
								$patientreadmission->date_type = 2; //1 =admission-readmission 2- discharge
								$patientreadmission->save();
								
								$PatientReadmission_FALLWEISE['discharge_date'] = $patientreadmission;
							}
						}
						else
						{
							//patient is not discharged
							$patientreadmission = new PatientReadmission();
							$patientreadmission->user_id = $logininfo->userid;
							$patientreadmission->ipid = $ipid;
							$patientreadmission->date = $discharge_date;
							$patientreadmission->date_type = 2; //1 =admission-readmission 2- discharge
							$patientreadmission->save();
							
							$PatientReadmission_FALLWEISE['discharge_date'] = $patientreadmission;
						}
						//radu formone active time patient (readmission new table) end
						$discharge_entry_id = $patient_form->InsertData($_POST);

						if($discharge_entry_id){
							if ($course_entry = Doctrine_Core::getTable('PatientCourse')->find($pc_discharge_id)) {
    							$course_entry->recordid = $discharge_entry_id;
    							$course_entry->save();
							}
						
						}
						//add mail if STTI method
						$a_post = $_POST;
						$a_post['diagno_abb'] = "'DD'";
						$a_post['ipid'] = $ipid;

						for($i = 1; $i <= sizeof($_POST['diagnosis']); $i++)
						{
							if(strlen($_POST['diagnosis'][$i]) > 0 && strlen($_POST['hidd_diagnosis'][$i]) < 1)
							{
								$a_post['newdiagnosis'][$i] = $_POST['diagnosis'][$i];
							}
						}

						if(is_array($a_post['newdiagnosis']))
						{
							$dt = $diagno_text->InsertEditData($a_post);

							foreach($dt as $key => $val)
							{
								$a_post['newhidd_diagnosis'][$key] = $val['id'];
							}
						}

						$patdigno->UpdatedischargeData($a_post);

						// check if patient has data in Patient Death  -  if it has and the discharge method, was changed to tod - then remove data from Pateintdeath
						if(in_array($_POST['discharge_method'],$dead_meth_array)){
							// mark as delete the PatientDeath entry.
							$pdeath = new PatientDeath();
							$patientdeatharray = $pdeath->getPatientDeath($ipid);
							if(count($patientdeatharray) > 0)
							{
								$fdocm = Doctrine::getTable('PatientDeath')->find($patientdeatharray[0]['id']);
								$fdocm->isdelete = 1;
								$fdocm->save();
							}
						}
						
						
                        // update the clinic_cases (IM-13)//Maria:: Migration CISPC to ISPC 22.07.2020
                        if(isset($_POST['clinic_cases'])){
                            $tpcs = Doctrine::getTable('PatientCaseStatus')->findOneByIdAndIpid($_POST['clinic_cases'], $ipid);
                            if ($tpcs) {
                                $tpcs->disdate = $discharge_date;
                                $tpcs->case_finished = 1;
                                // IM-108 new fields
                                $tpcs->discharge_method = $_POST['discharge_method'];
                                $tpcs->discharge_comment =  Pms_CommonData::aesEncrypt($_POST['discharge_comment']);
                                $tpcs->discharge_location = $_POST['discharge_location'];
                                // end new fields
                                $tpcs->patient_discharge_id = $discharge_entry_id;
                                $tpcs->save();
                            }
                            $model = new PatientCaseStatus();
                            $model->update_patient_master_for_clinic_case_status($ipid, $clientid);
                        }
						
						
						//if($show_dgp_block == "1")
						if($allowedFormBoxes['59'])
						{
						    //unnecessary if ... but will addit as info
						    if ( ! $PatientReadmission_FALLWEISE['admission_date'] instanceof PatientReadmission 
						        || ! $PatientReadmission_FALLWEISE['discharge_date'] instanceof  PatientReadmission
					        ) {
					            
					            //something went very wrong...
					            //throw new Zend_Exception(__METHOD__ . __LINE__ . ' - fatal error in the  Nat.Hospiz-Register by Falls',  0);	
						    }
						    
						    
    						// check if patient has kern form, if patient has one form - this means it is the admission form, so new form must be created, if patient has multiple, forms, then in discharge page the last form must be updated.
						    $kern_form = new Application_Form_DgpKern(array(
						        '_PatientReadmission_OBJ' => $PatientReadmission_FALLWEISE
						    ));
						    
						    
						    $pat_discharge_date = explode(".", $_POST['discharge_date']);
						    if(strlen($_POST['discharge_date']) > 0)
						    {
						        $discharge_date_str = $pat_discharge_date[2] . "-" . $pat_discharge_date[1] . "-" . $pat_discharge_date[0] . " " . $_POST['rec_timeh'] . ":" . $_POST['rec_timem'];
						    }
						    $a_post['dgp']['kern']['discharge']['entlasung_date'] = $discharge_date_str;
						    $a_post['dgp']['kern']['discharge']['sterbeort_dgp'] = $_POST['discharge_location'];
						    $a_post['dgp']['kern']['discharge']['wohnsituation'] = $discharge_wohnsituation;
						    $a_post['dgp']['kern']['discharge']['course'] = "1";
						    
						    
						    $a_post['dgp']['kern']['discharge']['pverfuegung'] = $dgp['kern']['discharge']['pverfuegung'] ;
						    $a_post['dgp']['kern']['discharge']['vollmacht'] = $dgp['kern']['discharge']['vollmacht'] ;
						    $a_post['dgp']['kern']['discharge']['betreuungsurkunde'] = $dgp['kern']['discharge']['betreuungsurkunde'];
						    $a_post['dgp']['kern']['discharge']['acp'] = $dgp['kern']['discharge']['betreuungsurkunde'] ;
						    
						    
						    
						    // Get Saved data
						    $kern_forms_q = Doctrine_Query::create()
						    ->select('dk.*')
						    ->from('DgpKern dk')
						    ->where('dk.ipid = ? ', $ipid)
						    ->andWhere('dk.form_type = "dis"')
						    ->andWhere('dk.patient_readmission_ID = ?', $PatientReadmission_FALLWEISE['discharge_date']->id)
						    ->orderBy('dk.create_date DESC')
						    ->limit(1)
						    
						    ->addSelect('tdk.*')
						    ->leftJoin('dk.TwinDgpKern tdk ON (tdk.id = dk.twin_ID AND tdk.twin_ID = dk.id)') //to be sure we double check
						    
						    ->fetchOne();
						    
						    if ( ! empty($kern_forms_q)) {
						        
						        //this block was arready saved, so you just need to update
						        $kern_data = $kern_forms_q->toArray();
						    	// get last form and update it
						    	// update invention... YOU @dev must learn how to update a doctrine entity from array
						    	
						    		// symptomatics
						    		$use_saved_discharge = 0 ;
						    		foreach($partners_array['symptoms'] as $sym_id=>$sym_details){
						    			if($kern_data[$sym_details['code']] != "0"){
						    				$use_saved_discharge++;
						    			}
						    		}
						    		if($use_saved_discharge > 0 ){
						    			foreach($partners_array['symptoms'] as $sym_id=>$sym_details){
						    				$a_post['dgp']['kern']['discharge'][$sym_details['code']] = $kern_data[$sym_details['code']];
						    			}
						    		}
						    		else
						    		{// If not saved - use the system retrived
						    		foreach($partners_array['symptoms'] as $sym_id=>$sym_details){
						    			$a_post['dgp']['kern']['discharge'][$sym_details['code']] = $sym_relevant_values[$symp_last_values[$sym_id]];
						    		}
						    		}
						    		
						    		$a_post['dgp']['kern']['discharge']['dgp_kern_id'] = $kern_data['id'];
						    		
						    		$kern_form->update_from_discharge($a_post['dgp']['kern']['discharge'], $ipid);
						    				    	
						    }
						    else
						    {
						        
						        //add andWhere patient_readmission_ID
						    	// check if admission form exists
						    	// Get Saved data
						    	$kern_forms_adm_q = Doctrine_Query::create()
						    	->select('*')
						    	->from('DgpKern')
						    	->where('ipid = ? ', $ipid)
						    	->andWhere('form_type = "adm"')
						    	->andWhere('patient_readmission_ID = ?', $PatientReadmission_FALLWEISE['admission_date']->id)
						    	->orderBy('create_date ASC')
						    	->limit(1)
						    	->fetchOne()
						    	;
// 						    	$kern_adm_forms_arr = $kern_forms_adm_q->fetchArray();
						    	
						    	if ( ! empty($kern_forms_adm_q)) {
						    	    // link this 2 records via twin_ID
						    	    $a_post['dgp']['kern']['discharge']['twin_ID'] = $kern_forms_adm_q->id;
						    	    
						    		// just insert discharge block
						    		// create new
						    		$result = $kern_form->insert_from_discharge($a_post['dgp']['kern']['discharge'], $ipid);
						    		
						    		if ($result instanceof DgpKern) {
						    		    // continue link this 2 records via twin_ID
						    		    $kern_forms_adm_q->twin_ID = $result->id;
						    		    $kern_forms_adm_q->save();
						    		}
						    		
						    								    		
						    	} else {
						    		// insert BOTH admission and discharge block 
	    						    //INSERT NEW - FOR ADMISSION AND DISCHARGE
	    						    
	    						    // get data for admission 
	    						    $dgp['kern']['admission']['datum_der_erfassung1'] = date('d.m.Y');
	    						    $sql = 'e.epid, p.ipid, e.ipid,';
	    						    $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
	    						    $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
	    						    $sql .= "AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') as gender,";
	    						    $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
	    						    $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
	    						    $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
	    						    $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
	    						    $sql .= "IF(p.admission_date != '0000-00-00',DATE_FORMAT(p.admission_date,'%d\.%m\.%Y'),'') as day_of_admission,";
	    						    $sql .= "IF(p.birthd != '0000-00-00',DATE_FORMAT(p.birthd,'%d\.%m\.%Y'),'') as birthd,";
	    						    
	    						    $conditions['periods'][0]['start'] = '2009-01-01';
	    						    $conditions['periods'][0]['end'] = date('Y-m-d');
	    						    $conditions['client'] = $clientid;
	    						    $conditions['include_standby'] = true;
	    						    $conditions['ipids'] = array($ipid);
	    						    
	    						    $patient_days = Pms_CommonData::patients_days($conditions,$sql);
	    						    
	    						    
	    						    $around_admission_days="";
	    						    $around_admission_date['start']  = date("d.m.Y",strtotime("-3 days",strtotime( $patient_days[$ipid]['details']['admission_date'])));
	    						    $around_admission_date['end']  = date("d.m.Y",strtotime("+3 days",strtotime( $patient_days[$ipid]['details']['admission_date'])));
	    						    $around_admission_days = $patientmaster->getDaysInBetween($around_admission_date['start'],$around_admission_date['end'],false,"d.m.Y");
	    						    
	    						    $around_admission_days_start = $patientmaster->getDaysInBetween($patient_days[$ipid]['details']['day_of_admission'],$around_admission_date['end'],false,"d.m.Y");
	    						    
	    						    /* ----------------- Patient Details -Admission location----------------------------------------- */
	    						    $ploc = new PatientLocation();
	    						     
	    						    $patient_locations = new PatientLocation();
	    						    $patient_period_locations = $patient_locations->getPatientLocations($ipid,true);
	    						     
	    						    foreach($patient_period_locations as $k=>$location_details){
	    						        //TODO-3413 Ancuta 25.11.2020 Change wohnsituation take "location at day of admission"
	    						        /* 
	    						        $location_start = date("d.m.Y",strtotime($location_details['valid_from']));
	    						        if(in_array($location_start,$around_admission_days_start) )
	    						        {
	    						            $admission_location[] = $location_details;
	    						        }
	    						        */
	    						        if(in_array(date("d.m.Y",strtotime( $patient_days[$ipid]['details']['admission_date'])),$location_details['days']) )
	    						        {
	    						            $admission_location[] = $location_details;
	    						        }
	    						        //--
	    						        $all_location[] = $location_details;
	    						    }
	    						    
	    						   
	    						    if($admission_location)
	    						    {
	    						    	$first_location = $admission_location[0];
	    						    
	    						    	switch ($first_location['master_location']['location_type']){
	    						    
	    						    		case "6":// bei Kontaktperson
	    						    			$dgp['kern']['admission']['wohnsituation'] = "2";
	    						    			break;
	    						    
	    						    		case "5":// Zu Hause
	    						    			if($first_location['master_location']['location_sub_type'] == "alone")
	    						    			{
	    						    				$dgp['kern']['admission']['wohnsituation'] = "1";
	    						    			}
	    						    			else
	    						    			{
	    						    				$dgp['kern']['admission']['wohnsituation'] = "6";
	    						    			}
	    						    			break;
	    						    
	    						    			 
	    						    		case "3":// Pflegeheim
	    						    		case "4":// Altenheim
	    						    			$dgp['kern']['admission']['wohnsituation'] = "4";
	    						    			break;
	    						    			 
	    						    		case "2":// Hospiz // NEW
	    						    			$dgp['kern']['admission']['wohnsituation'] = "5";
	    						    			break;
	    						    
	    						    		case "0":// Sonstige
	    						    			$dgp['kern']['admission']['wohnsituation'] = "4";
	    						    			break;
	    						    			 
	    						    		default:
	    						    			$dgp['kern']['admission']['wohnsituation'] = "0";//not applicable
	    						    			break;
	    						    	}
	    						    }
	    	 
	    						    //KvnoAssessment and ecog_values changed to respect this interval
	    						    
	    						    // get ecog details
	    						    //$ecog_value['first'] = $patientmaster->ecog_values($ipid,true);
	    						    //$dgp['kern']['admission']['ecog'] = $ecog_value['first'];
	    						    $ecog_values = $patientmaster->findEcogValuesInPeriod($ipid, $PatientReadmission_FALLWEISE['admission_date']->date, $PatientReadmission_FALLWEISE['discharge_date']->date);
	    						    $dgp['kern']['admission']['ecog'] = reset($ecog_values);
	    						    
	    						    
	    						    $assesmentarr = array();
	    						    
	    						    $ka_entity = new KvnoAssessment();
	    						    $ka_collection = $ka_entity->findCompletedInPeriod($ipid , $PatientReadmission_FALLWEISE['admission_date']->date, $PatientReadmission_FALLWEISE['discharge_date']->date);
	    			 
	    						    if ($ka_collection instanceof Doctrine_Collection && $ka_collection->count()) {
	    						        $assesmentarr[0] = $ka_collection->getLast()->toArray(); 
	    						    }
	    						    

	    						    //$assesment = Doctrine_Core::getTable('KvnoAssessment')->findBy('ipid', $ipid);
	    						    //$assesmentarr = $assesment->toArray();
	    						    
	    						    
	    						    if($assesmentarr[0]){
	    						        
	        						    $dgp['kern']['admission']['begleitung']['sapvteam_as'] = $assesmentarr[0]['sapvteam'];
	        						    $dgp['kern']['admission']['begleitung']['hausarzt'] = $assesmentarr[0]['hausarzt'];
	        						    $dgp['kern']['admission']['begleitung']['pflege'] = $assesmentarr[0]['pflege'];
	        						    $dgp['kern']['admission']['begleitung']['palliativ'] = $assesmentarr[0]['palliativ'];
	        						    $dgp['kern']['admission']['begleitung']['palliativpf'] = $assesmentarr[0]['palliativpf'];
	        						    $dgp['kern']['admission']['begleitung']['palliativber'] = $assesmentarr[0]['palliativber'];
	        						    $dgp['kern']['admission']['begleitung']['dienst'] = $assesmentarr[0]['dienst'];
	    						    }
	    						    $dgp['kern']['admission']['course'] = "1"; // this is a doctrine behaviour at his best 
	    						    
	    						    // create new 
	    						    $adm =  $kern_form->insert_from_admission($dgp['kern']['admission'],$ipid);
	    						    
	    						    // create new
	    						    $a_post['dgp']['kern']['discharge']['twin_ID'] = $adm->id;
	    						    
	    						    $a_post['dgp']['kern']['discharge']['course'] = "0";
	    						    
	    						    $discharge = $kern_form->insert_from_discharge($a_post['dgp']['kern']['discharge'], $ipid);
						    		
	    						    if ($adm instanceof DgpKern) {
	    						        // continue link this 2 records via twin_ID
	    						        $adm->twin_ID = $discharge->id;
	    						        $adm->save();
	    						    }
						    	}
						    	
						    }
						    
						    
						    
    						/* if(count($kern_forms_arr) == "1"){
    						    // create new 
    						    $kern_form->insert_from_discharge($a_post['dgp']['kern']['discharge'], $ipid);
    						    
    						} elseif(count($kern_forms_arr) > "1") {
    						    // get last form and update it
    						    if($last_form_id)
    						    {
    	
        						    $a_post['dgp']['kern']['discharge']['dgp_kern_id'] =$last_form_id; 
        						    $kern_form->update_from_discharge($a_post['dgp']['kern']['discharge'], $ipid);
    						        
    						    } 
    						    
    						} elseif(count($kern_forms_arr) == "0"){

    						    
    						} else{
    						    // do nothing
    						} */
						
						

						}
						//remove remaining autoassigned visits from this week
						//ispc-1533
						$from_day = date("Y-m-d", strtotime($_POST['discharge_date']));
						DailyPlanningVisits::set_autoasign_visits_delete( $logininfo->clientid , false , false , $ipid , false, $from_day, false, false, false);
						
						
						//don't know if this is correct to auto-set the voluntary-worker end_date since we never asked
						//ISPC-1958
						$discharge_date_4_vw = date_format(date_create_from_format('d.m.Y H:i', $_POST['discharge_date']." ".$_POST['rec_timeh']. ":".$_POST['rec_timem']), 'Y-m-d H:i:s');
						$vw_obj = new PatientVoluntaryworkers();
						$vw = $vw_obj->getPatientVworkers($ipid);//get patients voluntary worker
						if ( ! empty($vw)) {
							foreach ($vw as $row) {
						
								if ($row['end_date'] == "0000-00-00 00:00:00") {
									$vw_obj->set_end_date_by_id( $row['id'], $discharge_date_4_vw);
								}
							}
						}
						
						//ISPC-2614 Ancuta 17.07.2020
						$int_connection = new IntenseConnections();
						$share_direction = $int_connection->get_intense_connection_by_ipid($ipid);
						
						$patient_master = new PatientMaster();
						foreach ($share_direction as $direction_k => $share_info) {
						    if (! empty($share_info['intense_connection'])) {
						        foreach ($share_info['intense_connection'] as $con => $con_ionfo) {
						            $IntenseConnectionsOptions = array_column($con_ionfo['IntenseConnectionsOptions'], 'option_name');
						            if (in_array('patient_falls', $IntenseConnectionsOptions) ) {
						                $patient_master->intense_connection_patient_admissions($share_info['source'], $share_info['target']);
						            }
						        }
						    }
						}
						// --
						
						
						
						
						$wlprevileges = new Modules();
						$wl = $wlprevileges->checkModulePrivileges("51", $logininfo->clientid);

						if($a_post['redirecttoanlage'] == 1 && $wl)
						{
							$this->_redirect(APP_BASE . "patient/anlage4awl?id=" . $_GET['id']);
						}
						else
						{
							$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
						}
					}
					else
					{
						$patient_form->assignErrorMessages();
						$this->retainValues($_POST);
					}
				}
				else
				{
				    
				    //this is a POST from patient/patientdischarge bottom blue box Verstorben -> Verstorben am
				    
					$previleges = new Pms_Acl_Assertion();
					$return = $previleges->checkPrevilege('patientdischarge', $logininfo->userid, 'canadd');
					if(!$return)
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}

					// check if discharged
					$pdis = new PatientDischarge();
					$patientdisarray = $pdis->getPatientDischarge($ipid);
					if(count($patientdisarray) > 0)
					{
						$patient_death = new Application_Form_PatientDeath();
						$this->checkval = $patient_death->validate($_POST);
						if($this->checkval)
						{
							$patient_death->InsertData($_POST);

							//remove remaining autoassigned visits from this week
							//ispc-1533
							$from_day = date("Y-m-d", strtotime($_POST['discharge_date']));
							DailyPlanningVisits::set_autoasign_visits_delete( $logininfo->clientid , false , false , $ipid , false, $from_day, false, false, false);
							
							
							//don't know if this is correct to auto-set the voluntary-worker end_date since we never asked
							//ISPC-1958
							$discharge_date_4_vw = date_format(date_create_from_format('d.m.Y H:i', $_POST['discharge_date']." ".$_POST['rec_timeh']. ":".$_POST['rec_timem']), 'Y-m-d H:i:s');
							$vw_obj = new PatientVoluntaryworkers();
							$vw = $vw_obj->getPatientVworkers($ipid);//get patients voluntary worker
							if ( ! empty($vw)) {
								foreach ($vw as $row) {
							
									if ($row['end_date'] == "0000-00-00 00:00:00") {
										$vw_obj->set_end_date_by_id( $row['id'], $discharge_date_4_vw);
									}
								}
							}
							
							$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
						}
						else
						{
							$patient_death->assignErrorMessages();
							$this->retainValues($_POST);
						}
					}
				}
			}
			$dateadm = date('d.m.Y', strtotime($pmaster['admission_date']));
			$this->view->last_adm = $dateadm;
			$this->view->maxDate = date('d.m.Y');
			$this->view->last_adm_datetime = date('d.m.Y H:i', strtotime($pmaster['admission_date']));
			$this->view->pat_standby = $pmaster['isstandby'];

			$dis = new DischargeMethod();
			$discharge_methods_arr = $dis->getDischargeMethod($clientid, 1);
			
			//ISPC-2612 Ancuta 25.06.2020-28.06.2020
			$client_is_follower = ConnectionMasterTable::_check_client_connection_follower('DischargeMethod',$clientid);
			if($client_is_follower){
			    $list_discharge_methods_arr = $dis->getDischargeMethod($clientid, 1,false,true);
			} else{
			    $list_discharge_methods_arr = $discharge_methods_arr;
			}
			//--
			
			$this->view->discharge_methods = $list_discharge_methods_arr;

			$dl = new DischargeLocation();
			$discharge_locations_arr = $dl->getDischargeLocation($clientid, 1, true);// ISPC 1558 - sort alphabetically
			
			//ISPC-2612 Ancuta 25.06.2020-28.06.2020
			$client_is_follower_dl = ConnectionMasterTable::_check_client_connection_follower('DischargeLocation',$clientid);
			if($client_is_follower_dl){
			    $list_discharge_locations_arr = $dl->getDischargeLocation($clientid, 1,true,true);
			} else{
			    $list_discharge_locations_arr = $discharge_locations_arr;
			}
			//--
			
			$this->view->discharge_locations = $list_discharge_locations_arr ;

			$user = new User();
			$user_detail = $user ->get_client_users($clientid);
			foreach($user_detail as $u=>$udet){
				$user_details[$udet['id']]['name'] = $udet['last_name'].', '.$udet['first_name'];
			}
			//Maria:: Migration CISPC to ISPC 22.07.2020
            /* ----------------------  Get Clinic-Case START (IM-13)  --------------------------- */
            //get the PatienCases
            $model = new PatientCaseStatus();
            $clinic_patientcases = $model->get_list_patient_status($ipid, $clientid, true);
            $this->view->is_clinic_discharge=false;
            if (!empty($clinic_patientcases)) {
                $this->view->is_clinic_discharge=true;
                $formular_cases = array();
                foreach ($clinic_patientcases as $key=>$case) {
                    $formular_cases[$case['id']] = $model->format_patientcase_for_select_option($case);
                }

                //add the option = 'please select' to the array
                $formular_cases = array('0' => $this->translate('selectdischarge')) + $formular_cases;
                $this->view->clinic_cases = $formular_cases;
            }

            /* ----------------------  Get Clinic-Case END (IM-13)  --------------------------- */
					
			$pd = new PatientDischarge();
			/* ------------------ preevious discharge -------------------------- */
			$inactive_patientdischargearray = $pd->getPatientInactiveDischarge($ipid);
			
				foreach($inactive_patientdischargearray as $k=> $dd_detail)
				{
					$old_discharge[$k] = $dd_detail;
					$old_discharge[$k]['discharge_method_name'] = $discharge_methods_arr[$dd_detail['discharge_method']];
					$old_discharge[$k]['discharge_location_name'] = $discharge_locations_arr[$dd_detail['discharge_location']];
					$old_discharge[$k]['create_user_name'] = $user_details[$dd_detail['create_user']]['name'];
				}
			
// 			print_r($old_discharge); exit;
			$this->view->old_discharge_array = $old_discharge;
			/* ------------------ Current discharge -------------------------- */
			$patientdischargearray = $pd->getPatientDischarge($ipid);
			if(count($patientdischargearray) > 0)
			{
				$this->retainValues($patientdischargearray[0]);
				$this->view->discharge_date = date("d.m.Y", strtotime($patientdischargearray[0]['discharge_date']));
				$this->view->rec_timeh = date("H", strtotime($patientdischargearray[0]['discharge_date']));
				$this->view->rec_timem = date("i", strtotime($patientdischargearray[0]['discharge_date']));

				//show death section
				$dismet = new DischargeMethod();
				$disemetdet = $dismet->getDischargeMethodById($patientdischargearray[0]['discharge_method']);
				
				//ISPC-2612 Ancuta 25.06.2020-28.06.2020
				if(!in_array($disemetdet[0]['id'],$list_discharge_methods_arr)){
    				$list_discharge_methods_arr[$disemetdet[0]['id']] = $disemetdet[0]['description'];
	       			$this->view->discharge_methods = $list_discharge_methods_arr;
				}
				if(!in_array($patientdischargearray[0]['discharge_location'],$list_discharge_locations_arr)){
				    
				    $current_d_location = $dl->get_Discharge_Location_by_Id($patientdischargearray[0]['discharge_location']);
				    if(!empty($current_d_location)){
				        $list_discharge_locations_arr[$current_d_location[0]['id']] = $current_d_location[0]['location'];
				        $this->view->discharge_locations = $list_discharge_locations_arr ;
				    }
				}
				//
				
				//if discharge method is "tod" the traffic status is none
				$dead_abbr = array("tod","verstorben","todna");
				if(in_array(strtolower($disemetdet[0]['abbr']),$dead_abbr ))
				{
					$deathsection = 0;
				}
				else
				{
					$deathsection = 1;
				}

				$this->view->deathsection = $deathsection;
				$this->view->isDischarged = 1;
				$datedis = date('d.m.Y', strtotime($patientdischargearray[0]['discharge_date']));
			}
			/* ------------------ Death section-------------------------- */

			$this->view->last_dis = $datedis;
			$this->view->death_date = date("d.m.Y");
			$this->view->death_rec_timeh = date("H");
			$this->view->death_rec_timem = date("i");


			$pdeath = new PatientDeath();
			$patientdeatharray = $pdeath->getPatientDeath($ipid);
			if(count($patientdeatharray) > 0)
			{
				$this->retainValues($patientdeatharray[0]);
				$this->view->death_date = date("d.m.Y", strtotime($patientdeatharray[0]['death_date']));
				$this->view->death_rec_timeh = date("H", strtotime($patientdeatharray[0]['death_date']));
				$this->view->death_rec_timem = date("i", strtotime($patientdeatharray[0]['death_date']));
			}
			/* ------------------ Death section END-------------------------- */

			$a_diagno = array();
			if(is_array($_POST['hidd_diagnosis']))
			{
				foreach($_POST['hidd_diagnosis'] as $key => $val)
				{
					$a_diagno[$key]['hidd_icdnumber'] = $_POST['hidd_icdnumber'][$key];
					$a_diagno[$key]['icdnumber'] = $_POST['icdnumber'][$key];
					$a_diagno[$key]['diagnosis'] = $_POST['diagnosis'][$key];
					$a_diagno[$key]['hidd_tab'] = $_POST['hidd_tab'][$key];
					$a_diagno[$key]['hidd_diagnosis'] = $_POST['hidd_diagnosis'][$key];
				}
			}
			else
			{
				$aabb = "'DD'";
				$dg = new DiagnosisType();
				$ddarr = $dg->getDiagnosisTypes($clientid, $aabb);

				if(!$ddarr[0]['id'])
				{
					$ddarr[0]['id'] = 0;
				}

				$ipid = Pms_CommonData::getIpid($decid);
				$diagns = new PatientDiagnosis();
				$a_diagno = $diagns->getFinalData($ipid, $ddarr[0]['id']);
				$diagno_cnt = count($a_diagno);

				if($diagno_cnt < 6)
				{
					for($i = ($diagno_cnt + 1); $i <= 6; $i++)
					{
						$a_diagno[$i]['tabname'] = "";
						$a_diagno[$i]['icdnumber'] = "";
						$a_diagno[$i]['hidd_icdnumber'] = "";
						$a_diagno[$i]['diagnosis'] = "";
						$a_diagno[$i]['pdid'] = "";
						$a_diagno[$i]['hidd_diagnosis'] = "";
						$a_diagno[$i]['diagnosis_type_id'] = "";
					}
				}
			}

			$this->view->jscount = count($a_diagno);
			$grid = new Pms_Grid($a_diagno, 1, count($a_diagno), "listdischargediagnosis.html");
			$this->view->diagno = $grid->renderGrid();
			$this->view->rowcount = count($a_diagno);
		}

		public function patienttodoctorAction()
		{
			//ISPC - 2243 -verlauf entry for assigned user
			//$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $this->logininfo->clientid;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('assignpatient', $this->logininfo->userid, 'canview');

			
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if(strlen($_GET['epid']) > 0)
			{
				$getepid = Pms_Uuid::decrypt($_GET['epid']);
				$syspid = Doctrine::getTable('EpidIpidMapping')->findByEpidAndClientid($getepid,$clientid);// TODO-1307 - add client condition - because - epids are doubled  set in cleint with same name 
				$syspidarray = $syspid->toArray();

				$getipid = $syspidarray[0]['ipid'];
			}

			if(isset($_POST['btnsubmit']))
			{
				$getepid = $_POST['epid'];
				$syspid = Doctrine::getTable('EpidIpidMapping')->findByEpidAndClientid($getepid,$clientid); // TODO-1307 - add client condition - because - epids are doubled  set in cleint with same name 
				$syspidarray = $syspid->toArray();

				$getipid = $syspidarray[0]['ipid'];
			}

			
			$assignid = Doctrine_Query::create()
			->select('*')
			->from('PatientQpaMapping')
			->where("epid = ?",  $getepid);
			$assignidexec = $assignid->execute();
			$assignidarray = $assignidexec->toArray();
			
			$comma = ",";
			$userid = "'0'";
			foreach($assignidarray as $key => $val)
			{
			    $userid.= $comma . "'" . $val['userid'] . "'";
			    $comma = ",";
			
			    $user2epid[]=$val['userid'];
			}
			
			
			// get leading users
			$leading_users_array = PatientQpaLeading::get_current_leading_users($getipid);
			
			$leadding_users = array();
			foreach($leading_users_array as $k => $ld){
// 			    $leadding_users[$ld['ipid']][] = $ld['userid'];
			    $leadding_users[] = $ld['userid'];
			}

			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
				AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
				AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
				AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
				AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,
				AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,
				AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,
				AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip,
				AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,
				AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone,
				AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') as mobile,
				AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex")
				->from('PatientMaster')
				->where("ipid = ?", $getipid);
			$patient->getSqlQuery();
			$patientexec = $patient->execute();
			$patientarray = $patientexec->toArray();

			$this->view->name = $patientarray[0]['last_name'];
			$this->view->firstname = $patientarray[0]['first_name'];
			$this->view->pid = Pms_Uuid::encrypt($patientarray[0]['id']);
			$this->view->birthd = "-";
			$this->view->recoding_date = "-";

			if($patientarray[0]['birthd'] != '0000-00-00')
			{
				$this->view->birthd = date('d.m.Y', strtotime($patientarray[0]['birthd']));
			}

			if($patientarray[0]['recording_date'] != '0000-00-00 00:00:00')
			{
				$this->view->recoding_date = date('d.m.Y', strtotime($patientarray[0]['recording_date']));
			}

			$this->view->getepid = $getepid;
			$this->view->getipid = $getipid;

			$epid = Doctrine::getTable('EpidIpidMapping')->findBy('epid', "'" . $getepid . "'");
			$epidarray = $epid->toArray();

			$modules = new Modules();
			//$leading_users_module = $modules->checkModulePrivileges("119", $logininfo->clientid);
			$clientModules = $modules->get_client_modules($clientid);
			$leading_users_module = $clientModules['119'];
			
			if($leading_users_module)
			{
			    $show_star = "1";
			} 
			else
			{
			    $show_star = "0";
			}
			$this->view->show_star = $show_star;
			
			
			
			$assignuser = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('id in (' . $userid . ') and clientid=' . $clientid)
				->andWhere('isdelete=0 and isactive=0')
				->orderBy('last_name ASC');
			$assignuserexec = $assignuser->execute();
			$assignuserarray = $assignuserexec->toArray();

			foreach($assignuserarray as $ku=>$udata){
			    if(in_array($udata['id'],$leadding_users)){
			        $assignuserarray[$ku]['leading'] = "1";
			    } else{
			        $assignuserarray[$ku]['leading'] = "0";
			    }
			}
			
			

			$grid = new Pms_Grid($assignuserarray, 1, count($assignuserarray), "listassigndoctor.html");
			$this->view->assigndoctorgrid = $grid->renderGrid();

			$comma = ",";
			$userid = "'0'";
			foreach($assignidarray as $key => $val)
			{
				$userid.= $comma . "'" . $val['userid'] . "'";
				$comma = ",";
				
				
				
			}
			
			//get client groups
			$grps = new UserGroup();
			$groups = $grps->getClientGroups($clientid);
			
			foreach($groups as $group_key => $group_val)
			{
				//get client users by groupid
				$user = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id not in (' . $userid . ') and clientid=' . $clientid)
					->andWhere('isdelete=0 and isactive=0')
					->andWhere('groupid = ?', $group_val['id'])
					->orderBy('last_name ASC');
				$userexec = $user->execute();
				$userarray = $userexec->toArray();
				
				if(count($userarray) > 0)
				{
					$grid = new Pms_Grid($userarray, 1, count($userarray), "listunassigndoctor.html");
					$doctors[$group_val['id']] = $grid->renderGrid();
				}
				else
				{
					$doctors[$group_val['id']] = "0";
				}

				$this->view->doctorgrid = $doctors;
			}
			$grid = new Pms_Grid($groups, 1, count($groups), "listunasigngroups.html");
			$this->view->groupsgrid = $grid->renderGrid();
			
			
			// ###########################################
			
			$user_pseudo =  new UserPseudoGroup();
			$user_ps =  $user_pseudo->get_userpseudo();
				
			$user = new User();
			$user_detail = $user ->get_client_users($clientid);
			//ISPC - 2243 -verlauf entry for assigned user
			foreach($user_detail as $ku=>$vu)
			{
				$user_detail_course[$vu['id']] = $vu['last_name'] . " " . $vu['first_name'];
			}
			//ISPC - 2243 -verlauf entry for assigned user
			$user_grouppseudo =  new PseudoGroupUsers();
			$user_gr_ps =  $user_grouppseudo->get_usersgroup();
			$user_pseudo_all= array();
			
			foreach($user_gr_ps as $key_grps => $val_grps)
			{
			
			
				$tests[]=$val_grps['pseudo_id'];
				$user_gr_pseudo[$val_grps['pseudo_id']][] = $val_grps['user_id'];
				foreach($user_detail as $k_usd => $val_usd)
				{
						
						
					if(in_array( $val_usd['id'], $user_gr_pseudo[$val_grps['pseudo_id']]) && !in_array($val_usd['id'],$user2epid))
					{
						$ps_epid = Pms_Uuid::encrypt($getepid);
						$ps_id = Pms_Uuid::encrypt( $val_usd['id']);
			
						$user_pseudo_detail[$val_grps['pseudo_id']]['users'][ $val_usd['id']]['title']= $val_usd['title'];
						$user_pseudo_detail[$val_grps['pseudo_id']]['users'][ $val_usd['id']]['user_title']= $val_usd['user_title'];
						$user_pseudo_detail[$val_grps['pseudo_id']]['users'][ $val_usd['id']]['last_name']= $val_usd['last_name'];
						$user_pseudo_detail[$val_grps['pseudo_id']]['users'][ $val_usd['id']]['first_name']= $val_usd['first_name'];
						$user_pseudo_detail[$val_grps['pseudo_id']]['users'][ $val_usd['id']]['epid']= $ps_epid;
						$user_pseudo_detail[$val_grps['pseudo_id']]['users'][ $val_usd['id']]['id']= $ps_id;
			
						$user_pseudo_all[] = $val_usd['id'];
					}
				}
			}
			
			foreach($user_ps as $k_ps => $val_ps)
			{
				//ispc-1855
				if ($val_ps['makes_visits'] == 'tours') {
					continue;
				}
				
			    $pseudo_user_details[$val_ps['id']] = $val_ps;
				if(in_array($val_ps['id'],$tests))
				{
					$psd_epid = Pms_Uuid::encrypt($getepid);
					$user_pseudo_detail[$val_ps['id']]['name']= $val_ps['servicesname'];
					$user_pseudo_detail[$val_ps['id']]['epid']= $psd_epid;
				}
			}
			foreach($user_detail as $k_usd => $val_usd)
			{
				if(in_array( $val_usd['id'], $user_gr_pseudo))
				{
					$user_pseudo_detail[ $val_usd['id']]['title']= $val_usd['title'];
					$user_pseudo_detail[ $val_usd['id']]['user_title']= $val_usd['user_title'];
					$user_pseudo_detail[ $val_usd['id']]['last_name']= $val_usd['last_name'];
					$user_pseudo_detail[ $val_usd['id']]['first_name']= $val_usd['first_name'];
				}
			
			
			}
			
			//ISPC-1637 assign user - pseudo groups :: sort by alphabet.
			$user_pseudo_detail = $this->array_sort($user_pseudo_detail,"name",SORT_ASC);
			
			$this->view->user_pseudo_details = $user_pseudo_detail;
			$this->view->user_check = $user_pseudo_all;
			//print_r($user_pseudo_detail); exit;
			//print_r($user_pseudo_all); exit;
 
			
			foreach($user_ps as $k=> $pso)
			{
			    if( !empty($user_gr_pseudo[$pso['id']]) && (count(array_intersect($user_gr_pseudo[$pso['id']] ,$user2epid) ) == count($user_gr_pseudo[$pso['id']] )))
			    {
			        $assigned_pseudo[$pso['id']]['ps_id'] = $pso['id'];
			        $assigned_pseudo[$pso['id']]['id'] = Pms_Uuid::encrypt( $pso['id']);
			        $assigned_pseudo[$pso['id']]['name'] = $pseudo_user_details[$pso['id']]['servicesname'];
			        $assigned_pseudo[$pso['id']]['epid'] = Pms_Uuid::encrypt($getepid);
			    }
			}
			$this->view->assigned_pseudo = $assigned_pseudo;
			
			//ISPC - 2243 -verlauf entry for assigned user
			$assigned_user = null;
			$assigned_ps_users = array();
			//ISPC - 2243 -verlauf entry for assigned user
			
			if($_GET['flg'] == 'ass')
			{
			
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('assignpatient', $this->logininfo->userid, 'canadd');
			
				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}
			
				if($_GET['type']=='ps')
				{
					$ps_users = PseudoGroupUsers::get_users($_GET['userid']);
					foreach($ps_users as $k_psu => $val_psu)
					{
						$user_id[]=$val_psu['user_id'];
					}
					//print_r($user_id); exit;
						
					foreach($user_id as $k_us => $val_us)
					{
						if(!in_array($val_us,$user2epid))
						{
							/* $assign = new PatientQpaMapping();
							 $assign->epid = $getepid;
							 $assign->userid = $val_us;
							 $assign->clientid = $logininfo->clientid;
							 $assign->assign_date = date("Y-m-d H:i:s", time());
							 $assign->save(); */
								
							$assign_arr[] = array(
									"epid" => $getepid,
									"userid" => $val_us,
									"clientid" => $clientid,
									"assign_date" => date("Y-m-d H:i:s", time())
							);
								
							/* $vizibility = new PatientUsers();
							 $vizibility->clientid = $logininfo->clientid;
							 $vizibility->ipid = $getipid;
							 $vizibility->userid = $val_us;
							 $vizibility->create_date = date("Y-m-d H:i:s", time());
							 $vizibility->save(); */
								
							$visibility_arr[] = array(
									"clientid" => $clientid,
									"ipid" => $getipid,
									"userid" => $val_us,
									"create_date" => date("Y-m-d H:i:s", time())
							);
			
							$assigned_ps_users[] = $val_us; //ISPC - 2243 -verlauf entry for assigned user
						}
					}
						
					if(!empty($assign_arr))
					{
						$collection = new Doctrine_Collection('PatientQpaMapping');
						$collection->fromArray($assign_arr);
						$collection->save();
					}
					if(!empty($visibility_arr))
					{
						$collection = new Doctrine_Collection('PatientUsers');
						$collection->fromArray($visibility_arr);
						$collection->save();
					}
						
				}
				else
				{
						
					$assign = new PatientQpaMapping();
					$assign->epid = $getepid;
					$assign->userid = Pms_Uuid::decrypt($_GET['userid']);
					$assign->clientid = $clientid;
					$assign->assign_date = date("Y-m-d H:i:s", time());
					$assign->save();
						
					$vizibility = new PatientUsers();
					$vizibility->clientid = $clientid;
					$vizibility->ipid = $getipid;
					$vizibility->userid = Pms_Uuid::decrypt($_GET['userid']);
					$vizibility->create_date = date("Y-m-d H:i:s", time());
					$vizibility->save();
			
					$assigned_user = Pms_Uuid::decrypt($_GET['userid']); //ISPC - 2243 -verlauf entry for assigned user
				}
			
				$verlauf_entry .= $this->translator->translate("To the patient has been");
			
				if(!empty($assigned_ps_users))
				{	
					$comma = ' ';
					foreach($assigned_ps_users as $ku=>$vu)
					{
						$verlauf_entry .=  $comma . $user_detail_course[$vu];
						$comma = ', ';
					}
					$verlauf_entry .= " " . $this->translator->translate("assigned");
						
					$cust = new PatientCourse();
					$cust->ipid = $getipid;
					$cust->course_date = date("Y-m-d H:i");
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($verlauf_entry);
					$cust->user_id = $this->logininfo->userid;
					$cust->save();
				}
				elseif($assigned_user)
				{
					$verlauf_entry .= " " . $user_detail_course[$assigned_user] . " " .$this->translator->translate("assigned");
					$cust = new PatientCourse();
					$cust->ipid = $getipid;
					$cust->course_date = date("Y-m-d H:i");
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($verlauf_entry);
					$cust->user_id = $this->logininfo->userid;
					$cust->save();
				}
			
				$this->_redirect('patient/patienttodoctor?epid=' . $_GET['epid']);
			}
			
			if($_GET['flg'] == 'del')
			{
			
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('assignpatient', $this->logininfo->userid, 'candelete');
			
				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}
			
			
				if($_GET['type'] == "ps" )
				{
					if(isset($_GET['userid']))
					{
			
						$as_ps_users = PseudoGroupUsers::get_users(Pms_Uuid::decrypt($_GET['userid']));
						foreach($as_ps_users as $k_psu => $val_psu)
						{
							$psa_user_id[]= $val_psu['user_id'];
						}
			
						if(!empty($psa_user_id))
						{
							$q = Doctrine_Query::create()
							->delete('PatientQpaMapping')
							->where("epid= ?", $getepid)
							->andWhereIn("userid",$psa_user_id);
							$q->execute();
			
			
							$u = Doctrine_Query::create()
							->delete('PatientUsers')
							->where("ipid= ?", $getipid)
							->andWhereIn("userid",$psa_user_id);
							$u->execute();
						}
					}
			
				}
				else
				{
			
					$q = Doctrine_Query::create()
					->delete('PatientQpaMapping')
					->where("userid = ? and epid = ? ",array(Pms_Uuid::decrypt($_GET['userid']) ,$getepid));
					$q->execute();
			
			
					$u = Doctrine_Query::create()
					->delete('PatientUsers')
					->where("userid = ? and ipid = ? ",array(Pms_Uuid::decrypt($_GET['userid']) ,$getipid));
					$u->execute();

                    //ISPC-2675, elena, 20.10.2020
					$q = Doctrine_Query::create()
                        ->update('PatientQpaLeading a')
                        ->set('end_date','?',date("Y-m-d H:i:s",time()))
                        ->set('change_user','?', $userid)
                        ->set('change_date','?',date("Y-m-d H:i:s",time()))
                        ->where("a.userid = ? AND a.ipid = ? ",array(Pms_Uuid::decrypt($_GET['userid']) ,$getipid));
                    $q->execute();

					
					$assigned_user = Pms_Uuid::decrypt($_GET['userid']); //ISPC - 2243 -verlauf entry for unassigned user
				}
				
				//ISPC - 2243 -verlauf entry for unassigned user/pseudo-users
				$verlauf_entry .= $this->translator->translate("The user");
					
				if(!empty($psa_user_id))
				{
					$comma = ' ';
					foreach($psa_user_id as $ku=>$vu)
					{
						$verlauf_entry .=  $comma . $user_detail_course[$vu];
						$comma = ', ';
					}
					$verlauf_entry .= " " . $this->translator->translate("has been unassigned");
				
					$cust = new PatientCourse();
					$cust->ipid = $getipid;
					$cust->course_date = date("Y-m-d H:i");
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($verlauf_entry);
					$cust->user_id = $this->logininfo->userid;
					$cust->save();
				}
				elseif($assigned_user)
				{
					$verlauf_entry .= " " . $user_detail_course[$assigned_user] . " " .$this->translator->translate("has been unassigned");
					$cust = new PatientCourse();
					$cust->ipid = $getipid;
					$cust->course_date = date("Y-m-d H:i");
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($verlauf_entry);
					$cust->user_id = $this->logininfo->userid;
					$cust->save();
				}
			
				$this->_redirect('patient/patienttodoctor?epid=' . $_GET['epid']);
			}
			
		}

		public function notifyAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->_helper->viewRenderer('patienttodoctor');

			if($this->getRequest()->isPost())
			{
				$usr = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where("epid = ?", $_GET['epid'])
					->andWhere("assign_date BETWEEN '" . date("Y-m-d H:00:00") . "' AND '" . date("Y-m-d H:59:59") . "'");
				$usrexec = $usr->execute();

				$usrarray = $usrexec->toArray();
				foreach($usrarray as $key => $val)
				{
					$mail = new Messages();
					$mail->sender = $logininfo->userid;
					$mail->clientid = $logininfo->clientid;
					$mail->recipient = $val['userid'];
					$mail->msg_date = date("Y-m-d H:i:s", time());
					$mail->title = Pms_CommonData::aesEncrypt('Neue(r) Patient(in) in der Patientenliste');
					$mail->content = Pms_CommonData::aesEncrypt(utf8_encode('Ihnen wurde eine neuer Patient zugewiesen. Bitte nehmen Sie zeitnah mit den Angehörigen kontakt auf.'));
					$mail->create_date = date("Y-m-d", time());
					$mail->create_user = $logininfo->userid;
					$mail->read_msg = '1';
					$mail->save();

					if($mail->id > 0)
					{
						$user = Doctrine::getTable('User')->find($val['userid']);
						$userarray = $user->toArray();
						$this->view->msgnotify = '$.jGrowl("Neue(r) Patient(in) in der Patientenliste Ihnen wurde eine neuer Patient zugewiesen. Bitte nehmen Sie zeitnah mit den Angehörigen kontakt auf.", { sticky: true });';
					}
				}
			}

			$logininfo = new Zend_Session_Namespace('Login_Info');

			if(isset($_GET))
			{
				$getepid = $_GET['epid'];
				$syspid = Doctrine::getTable('EpidIpidMapping')->findBy('epid', $getepid);
				$syspidarray = $syspid->toArray();
				$getipid = $syspidarray[0]['ipid'];
			}

			if($_GET['flg'] == 'ass')
			{
				$assign = new PatientQpaMapping();
				$assign->epid = $getepid;
				$assign->userid = $_GET['id'];
				$assign->clientid = $logininfo->clientid;
				$assign->assign_date = date("Y-m-d H:i:s", time());
				$assign->save();
			}

			if($_GET['flg'] == 'del')
			{
				$q = Doctrine_Query::create()
					->delete('PatientQpaMapping')
					->where("userid= ?", $_GET['id'])
					->andWhere("epid= ?", $getepid);
				$q->execute();
			}

			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
					AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
					AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,
					AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,
					AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,
					AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip,
					AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,
					AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone,
					AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') as mobile,
					AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex")
				->from('PatientMaster')
				->where('ipid', $getipid);
			$patientexec = $patient->execute();
			$patientarray = $patientexec->toArray();

			$this->view->name = $patientarray[0]['last_name'];
			$this->view->firstname = $patientarray[0]['first_name'];
			$this->view->birthd = "-";
			$this->view->recoding_date = "-";

			if($patientarray[0]['birthd'] != '0000-00-00')
			{
				$this->view->birthd = date('d.m.Y', strtotime($patientarray[0]['birthd']));
			}

			if($patientarray[0]['recording_date'] != '0000-00-00 00:00:00')
			{
				$this->view->recoding_date = date('d.m.Y', strtotime($patientarray[0]['recording_date']));
			}
			$this->view->getepid = $getepid;
			$this->view->getipid = $getipid;

			$epid = Doctrine::getTable('EpidIpidMapping')->findBy('epid', "'" . $getepid . "'");
			$epidarray = $epid->toArray();

			$assignid = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where("epid = ?", $getepid);

			$assignidexec = $assignid->execute();
			$assignidarray = $assignidexec->toArray();

			$comma = ",";
			$userid = "'0'";
			foreach($assignidarray as $key => $val)
			{
				$userid.= $comma . "'" . $val['userid'] . "'";
				$comma = ",";
			}

			$assignuser = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('id in (' . $userid . ') and clientid=' . $logininfo->clientid)
				->orderBy('last_name ASC');
			$assignuserexec = $assignuser->execute();
			$assignuserarray = $assignuserexec->toArray();

			$grid = new Pms_Grid($assignuserarray, 1, count($assignuserarray), "listassigndoctor.html");
			$this->view->assigndoctorgrid = $grid->renderGrid();

			$comma = ",";
			$userid = "'0'";
			foreach($assignidarray as $key => $val)
			{
				$userid.= $comma . "'" . $val['userid'] . "'";
				$comma = ",";
			}

			$user = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('id not in (' . $userid . ') and clientid=' . $logininfo->clientid)
				->orderBy('last_name ASC');
			$userexec = $user->execute();
			$userarray = $userexec->toArray();

			$grid = new Pms_Grid($userarray, 1, count($userarray), "listunassigndoctor.html");
			$this->view->doctorgrid = $grid->renderGrid();
		}

		
		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function familydoceditAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* ######################################################### */
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('familydoctor', $logininfo->userid, 'canedit');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$this->view->act = "patient/familydocedit?id=" . $_GET['id'];
			$a_post = $_POST;

			$patm = new PatientMaster();
			$patmastarr = $patm->getMasterData($decid, 0);
			
			if($this->getRequest()->isPost() && empty($_REQUEST['mod']))
			{
				$fdoctor_form = new Application_Form_PatientMaster();

				if($fdoctor_form->validateFamilyDoc($a_post))
				{
					$docform = new Application_Form_Familydoctor(
					    array("_patientMasterData" => $patm->get_patientMasterData())
				    );
					
					$docinfo = $docform->InsertFromTabData($a_post);
					$a_post['hidd_docid'] = $docinfo->id;

					$fdoctor_form = new Application_Form_PatientMaster();

					if(!empty($_REQUEST['q']))
					{  //qpa or simple familydoc
						$fdoctor_form->UpdateFamilydocQPA($a_post);
					}
					else
					{
						$fdoctor_form->UpdateFamilydoc($a_post);
					}
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");

					if($_REQUEST['noredir'] != "1")
					{
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						echo json_encode(array("success" => "1"));
						exit;
					}
				}
				else
				{
					$fdoctor_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			
			$this->view->indrop = 0;

			if(!empty($_GET['q']))
			{
				$doc_id = $patmastarr['familydoc_id_qpa'];
			}
			else
			{
				$doc_id = $patmastarr['familydoc_id'];
			}

			if($doc_id > 0)
			{
				$fdoc = Doctrine::getTable('FamilyDoctor')->find($doc_id);

				if($fdoc)
				{
					if($_GET['mod'] == "modal")
					{
						$fdocarray = $fdoc->toArray();
						$docarray = $fdocarray;
						$docarray['familydoc_id'] = trim($fdocarray['title']) . " " . trim($fdocarray['last_name']) . ", " . trim($fdocarray['first_name']);
						$docarray['old_doctor_title'] = trim($fdocarray['title']);
						$docarray['old_doctor_firstname'] = trim($fdocarray['first_name']);
						$docarray['old_doctor_lastname'] = trim($fdocarray['last_name']);
						$docarray['fdoc_caresalone'] = $patmastarr['fdoc_caresalone'];
						$docarray['hidd_docid'] = $fdocarray['id'];
						$docarray['indrop'] = $fdocarray['indrop'];
					}
					else
					{
						$fdocarray = $fdoc->toArray();
						$this->retainValues($fdocarray);
						$this->view->familydoc_id = trim($fdocarray['title']) . " " . trim($fdocarray['last_name']) . ", " . trim($fdocarray['first_name']);
						$this->view->old_doctor_title = trim($fdocarray['title']);
						$this->view->old_doctor_firstname = trim($fdocarray['first_name']);
						$this->view->old_doctor_lastname = trim($fdocarray['last_name']);
						$this->view->fdoc_caresalone = $patmastarr['fdoc_caresalone'];
						$this->grid->fdoc_caresalone = $patmastarr['fdoc_caresalone'];
						$this->view->hidd_docid = $fdocarray['id'];
						$this->view->indrop = $fdocarray['indrop'];
					}
				}
			}

			/*			 * ******* Patient Information ************ */
			if($_GET['mod'] == "modal")
			{
				//send json data...
				if(!empty($_GET['q']))
				{
					$this->view->act = "patient/familydocedit?id=" . $_GET['id'] . "&q=qpa&mod=modal";
				}

				$doc[0] = $docarray;
				$grid = new Pms_Grid($doc, 1, count($doc), "familydocedit.html");
				echo $grid->renderGrid();
				exit;
			}

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function pharmacyeditAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ------------------- delete apotheke --------------------------------- */
			$this->view->pid = $_GET['id'];
			if($_GET['decid'] > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');

				if(!$returnadd)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$q = Doctrine_Query::create()
					->update('PatientPharmacy')
					->set('isdelete', '1')
					->where('ipid = ?',  $ipid )
					->andwhere("pharmacy_id= ?", $_GET['decid']);
				$q->execute();

				$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			}

			/* ------------------- delete apotheke --------------------------------- */

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}
			$this->view->act = "patient/pharmacyedit?id=" . $_GET['id'] . "&pharmacy_id=" . $_GET['pharmacy_id'];
			$a_post = $_POST;

			if($this->getRequest()->isPost())
			{
				$fdoctor_form = new Application_Form_PatientMaster();

				if($fdoctor_form->validatePharmacy($a_post))
				{
				    
				    $patientmaster = new PatientMaster();
				    $patientmaster->getMasterData($decid, 0);
				    
					$docform = new Application_Form_Pharmacy(array(
						"_patientMasterData" => $patientmaster->get_patientMasterData()
				    ));
					$docinfo = $docform->InsertFromTabData($a_post);
					$a_post['hidd_pharmacyid'] = $docinfo->id;

					if($_GET['pharmacy_id'] > 0)
					{
						if($_GET['pharmacy_id'] == $a_post['hidd_pharmacyid'])
						{
							$q = Doctrine_Query::create()
								->update('PatientPharmacy')
								->set('pharmacy_comment','?', $a_post['pharmacy_comment'])
								->where('pharmacy_id= ?', $_GET['pharmacy_id'] )
								->andWhere('ipid= ?',  $ipid);
							$q->execute();
						}
						else
						{
							$q = Doctrine_Query::create()
								->update('PatientPharmacy')
								->set('pharmacy_id', '"' . $a_post['hidd_pharmacyid'] . '"')
								->set('pharmacy_comment','?', $a_post['pharmacy_comment'])
								->where('pharmacy_id= ?', $_GET['pharmacy_id'] )
								->andWhere('ipid= ?',  $ipid);
							$q->execute();
						}
					}
					else
					{
						$pfl_cl = new PatientPharmacy();
						$pfl_cl->ipid = $ipid;
						$pfl_cl->pharmacy_id = $a_post['hidd_pharmacyid'];
						$pfl_cl->pharmacy_comment = $a_post['pharmacy_comment'];
						$pfl_cl->save();
					}


					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				}
				else
				{
					$fdoctor_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			$drop = Doctrine_Query::create()
				->select('*, pharmacy as apotheke')
				->from('Pharmacy')
				->where("id= ?", $_REQUEST['pharmacy_id']);
			$fdoc = $drop->execute();
			$docarray = $fdoc->toArray();

			$this->view->indrop = 0;

			if($docarray)
			{
				$pat_pfl = new PatientPharmacy();
				$comm = $pat_pfl->getPatientPharmacy($ipid, $_GET['pharmacy_id']);
				$this->view->pharmacy_comment = $comm[0]['ph_com'];
				$this->retainValues($docarray[0]);
				$this->view->pharmacy = $docarray[0]['apotheke'];
				$this->view->old_pharmacy_firstname = trim($docarray[0]['first_name']);
				$this->view->old_pharmacy_lastname = trim($docarray[0]['last_name']);
				$this->view->last_name = trim($docarray[0]['last_name']);
				$this->view->hidd_pharmacyid = $docarray[0]['id'];
				$this->view->indrop = $docarray[0]['indrop'];
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function pflegediensteAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->patid = $_GET['id'];

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* ######################################################### */
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			$this->view->pid = $_GET['id'];
			if($_GET['decid'] > 0)
			{
// 				$previleges = new Pms_Acl_Assertion();
// 				$returnadd = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');

// 				if(!$returnadd)
// 				{
// 					$this->_redirect(APP_BASE . "error/previlege");
// 				}

				$q = Doctrine_Query::create()
					->update('PatientPflegedienste')
					->set('isdelete', '1')
					->where('ipid = ?', $ipid)
					->andwhere("pflid= ?", $_GET['decid'] );
				$res = $q->execute();
				
				if ($res) {
				
					/* 
					$obj = new Pflegedienstes();
					$obj_res = $obj->getTable()->findOneBy('id', $_GET['decid'] );
					if ($obj_res) {
						$obj_res->ipid = $ipid;
						$obj_res->set('isdelete', '1');
						$obj_res->save();
						//$obj->delete();
					} 
					*/				
					
					
					if($pfl_m = Doctrine::getTable('Pflegedienstes')->findByIdAndIndrop($_GET['decid'],1)){
						$pfl_m = $pfl_m{0};
						$pfl_m->isdelete = 1;
						$pfl_m->ipid = $ipid;
						$pfl_m->save();
					}
					
					
				}

				$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			}

			$this->view->act = "patient/pflegedienste?id=" . $_GET['id'] . "&pflid=" . $_GET['pflid'];
			$a_post = $_POST;
			
			//ISPC-2045 v0.1
			$a_post['ipid'] = empty($a_post['ipid']) ? $ipid : $a_post['ipid'];
			$a_post['is_contact'] = (int)$a_post['real_contact_number'];

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->real_contact_number = $parr['kontactnumber_dec'];
			$this->view->kontactnumbertype = $parr['kontactnumbertype'];

			if($this->getRequest()->isPost())
			{
				$fdoctor_form = new Application_Form_PatientMaster();

				if($fdoctor_form->validatePflegedienste($a_post))
				{
					$docform = new Application_Form_Pflegedienstes(array(
					    "_patientMasterData"=>$patientmaster->get_patientMasterData()
					));
					$docinfo = $docform->InsertFromTabData($a_post);
					$a_post['hidd_pflegeid'] = $docinfo->id;

					//ISPC-2045 - disabled the next lines
					/* 
					if(strlen($a_post['real_contact_number']) > 0)
					{
						$fdoctor_form->UpdateContactNumber($a_post['phone_practice'], '3');
					}
					elseif($parr['kontactnumber_dec'] == $a_post['phone_practice'] && $parr['kontactnumbertype'] == '3')
					{
						$fdoctor_form->DisableContactNumber();
					} */
								
					if($_GET['pflid'] > 0)
					{
						if($_GET['pflid'] == $a_post['hidd_pflegeid'])
						{
							//ISPC-2045 v2.0
							/* $obj = Doctrine::getTable('PatientPflegedienste')->findOneByIpidAndPflid($ipid , $_GET['pflid']);
							if ($obj) {
								$obj->pflege_comment = $a_post['pflege_comment'];
								if($a_post['pflege_emergency'] == 2)
								{
									$obj->pflege_emergency = 2;
									$obj->pflege_emergency_comment = $a_post['pflege_emergency_comment'];
								}
								elseif($a_post['pflege_emergency'] == 1)
								{
									$obj->pflege_emergency = 1;
									$obj->pflege_emergency_comment = $a_post['pflege_emergency_comment'];
								}
								else
								{
									$obj->pflege_emergency = 0;
									$obj->pflege_emergency_comment = "";
								}
									
								$obj->is_contact = (int)$a_post['real_contact_number'];
								$obj->save();
							} */
							
							$q = Doctrine_Query::create();
							$q->update('PatientPflegedienste');
							$q->set('pflege_comment','?', $a_post['pflege_comment']);
							if($a_post['pflege_emergency'] == 2)
							{
								$q->set('pflege_emergency', "2");
								$q->set('pflege_emergency_comment','?', $a_post['pflege_emergency_comment']);
							}
							elseif($a_post['pflege_emergency'] == 1)
							{
								$q->set('pflege_emergency', "1");
								$q->set('pflege_emergency_comment','?', $a_post['pflege_emergency_comment']);
							}
							else
							{
								$q->set('pflege_emergency', "0");
								$q->set('pflege_emergency_comment','?', "");
							}
							$q->where(' pflid= ?', $_GET['pflid']);
							$q->andWhere('ipid= ?', $ipid);
							$q->execute();
						}
						else
						{
							$q = Doctrine_Query::create();
							$q->update('PatientPflegedienste');
							$q->set('pflid', '?',  $a_post['hidd_pflegeid']);
							$q->set('pflege_comment','?', $a_post['pflege_comment']);
							if($a_post['pflege_emergency'] == 2)
							{
								$q->set('pflege_emergency', "2");
								$q->set('pflege_emergency_comment','?', $a_post['pflege_emergency_comment']);
							}
							elseif($a_post['pflege_emergency'] == 1)
							{
								$q->set('pflege_emergency', "1");
								$q->set('pflege_emergency_comment','?', $a_post['pflege_emergency_comment']);
							}
							else
							{
								$q->set('pflege_emergency', "0");
								$q->set('pflege_emergency_comment','?', "");
								
							}
							$q->where('pflid= ?', $_GET['pflid']);
							$q->andWhere('ipid= ?', $ipid);
							$q->execute();
							
							if($pfl_m = Doctrine::getTable('Pflegedienstes')->findByIdAndIndrop($_GET['pflid'],1)){
								$pfl_m = $pfl_m{0};
								$pfl_m->isdelete = 1;
								$pfl_m->ipid = $ipid;
								$pfl_m->save();
							}
							
						}
					}
					else
					{
						$pfl_cl = new PatientPflegedienste();
						$pfl_cl->ipid = $ipid;
						$pfl_cl->pflid = $a_post['hidd_pflegeid'];
						$pfl_cl->pflege_comment = $a_post['pflege_comment'];
						$pfl_cl->pflege_emergency = $a_post['pflege_emergency'];
						$pfl_cl->pflege_emergency_comment = $a_post['pflege_emergency_comment'];
						$pfl_cl->save();
					}
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
					if($_REQUEST['noredir'] != 1)
					{
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						echo json_encode(array("success" => "1", "pflidInserted" => $a_post['hidd_pflegeid']));
						exit;
					}
				}
				else
				{
					$fdoctor_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			$docarray = array();
			if( ! empty($_REQUEST['pflid'])) {
				$fdoc = new Pflegedienstes();
				$docarray = $fdoc->getPflegedienste($_REQUEST['pflid']);
				
			}

			$this->view->indrop = 0;

			if($docarray)
			{
				$pat_pfl = new PatientPflegedienste();
				$comm = $pat_pfl->getPatientPflegedienste($ipid, $_GET['pflid']);

				$this->view->pflege_comment = $comm[0]['pf_com'];
				$this->view->pflege_emergency = $comm[0]['pflege_emergency'];
				$this->view->pflege_emergency_comment = $comm[0]['pflege_emergency_comment'];
				$this->retainValues($docarray[0]);
				$this->view->pflegedienste = $docarray[0]['nursing'];
				$this->view->old_pflegedienste_firstname = trim($docarray[0]['first_name']);
				$this->view->old_pflegedienste_lastname = trim($docarray[0]['last_name']);
				$this->view->hidd_pflegeid = $docarray[0]['id'];
				$this->view->indrop = $docarray[0]['indrop'];
			}

			if($_GET['mod'] == "modal")
			{
				$this->view->act = "pflegedienste?id=" . $_GET['id'] . "&pflid=" . $_GET['pflid'];
				$doc[0] = $docarray[0];
				$grid = new Pms_Grid($doc, 1, count($doc), "pflegedienstedit.html");
				echo $grid->renderGrid();
				exit;
			}
			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function suppliesAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->patid = $_GET['id'];

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* ######################################################### */
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */

			/* --------------------Set isdelete= 1 for  Patient supplier---------------------------- */
			$this->view->pid = $_GET['id'];
			if($_GET['decid'] > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');

				if(!$returnadd)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$q = Doctrine_Query::create()
					->update('PatientSupplies')
					->set('isdelete', '1')
					->where('ipid = ?', $ipid)
					->andwhere("supplier_id= ?", $_GET['decid']);
				$q->execute();
				$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			}

			$this->view->act = "patient/supplies?id=" . $_GET['id'] . "&supplier_id=" . $_GET['supplier_id'];

			$a_post = $_POST;
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->real_contact_number = $parr['kontactnumber'];

			if($this->getRequest()->isPost())
			{
				$fdoctor_form = new Application_Form_PatientMaster();

				if($fdoctor_form->validateSupplier($a_post))
				{
					$docform = new Application_Form_Supplies(array(
					    "_patientMasterData"=>$patientmaster->get_patientMasterData()
					));
					$docinfo = $docform->InsertFromTabData($a_post);
					$a_post['hidd_supplier_id'] = $docinfo->id;

					if($_GET['supplier_id'] > 0)
					{
						if($_GET['supplier_id'] == $a_post['hidd_supplier_id'])
						{
							$q = Doctrine_Query::create()
								->update('PatientSupplies')
								->set('supplier_comment','?',$a_post['supplier_comment'] )
								->where('supplier_id= ?', $_GET['supplier_id'])
								->andWhere('ipid= ?', $ipid);
							$q->execute();
						}
						else
						{
							$q = Doctrine_Query::create()
								->update('PatientSupplies')
								->set('supplier_id','?', $a_post['hidd_supplier_id'])
								->set('supplier_comment','?',$a_post['supplier_comment'] )
								->where('supplier_id= ?', $_GET['supplier_id'])
								->andWhere('ipid= ?', $ipid);
							$q->execute();
						}
					}
					else
					{
						$pfl_cl = new PatientSupplies();
						$pfl_cl->ipid = $ipid;
						$pfl_cl->supplier_id = $a_post['hidd_supplier_id'];
						$pfl_cl->supplier_comment = $a_post['supplier_comment'];
						$pfl_cl->save();
					}
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");

					if($_REQUEST['noredir'] != 1)
					{
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						echo json_encode(array("success" => "1", "supplieridInserted" => $a_post['hidd_supplier_id']));
						exit;
					}
				}
				else
				{
					$fdoctor_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			/* -------------------------Get supplier details-------------------------------- */
			$fdoc = new Supplies();
			$docarray = $fdoc->getSupplies($_REQUEST['supplier_id']);
			$this->view->indrop = 0;
			if($docarray)
			{
				$pat_pfl = new PatientSupplies();
				$comm = $pat_pfl->getPatientSupplies($ipid, $_GET['supplier_id']);
				$this->view->supplier_comment = $comm[0]['supplier_comment'];
				$this->retainValues($docarray[0]);
				$this->view->supplier = $docarray[0]['supplier'];
				$this->view->old_supplier_first_name = trim($docarray[0]['first_name']);
				$this->view->old_supplier_last_name = trim($docarray[0]['last_name']);
				$this->view->hidd_supplier_id = $docarray[0]['id'];
				$this->view->indrop = $docarray[0]['indrop'];
			}
			
			$sr = Doctrine_Query::create()
			->select('*')
			->from('PatientRemedies')
			->where('ipid="'.$ipid.'"')
			->andWhere("isdelete=0")
			->andWhere('supplier= ?', $_GET['supplier_id']);
			$srarray=$sr->fetchArray();
			
			if(count($srarray)>0)
			{
				$this->view->msg = 'ok';
			}
			
			
		
		}

		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function suppliersAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->patid = $_GET['id'];

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* ######################################################### */
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */

			/* --------------------Set isdelete= 1 for  Patient supplier---------------------------- */
			$this->view->pid = $_GET['id'];
			if($_GET['decid'] > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');

				if(!$returnadd)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$q = Doctrine_Query::create()
					->update('PatientSuppliers')
					->set('isdelete', '1')
					->where('ipid = ?', $ipid)
					->andwhere("supplier_id = ?", $_GET['decid']);
				$q->execute();
				$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			}

			$this->view->act = "patient/suppliers?id=" . $_GET['id'] . "&supplier_id=" . $_GET['supplier_id'];

			$a_post = $_POST;
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->real_contact_number = $parr['kontactnumber'];

			if($this->getRequest()->isPost())
			{
				$fdoctor_form = new Application_Form_PatientMaster();

				if($fdoctor_form->validateSupplier($a_post))
				{
					$docform = new Application_Form_Suppliers();
					$docinfo = $docform->InsertFromTabData($a_post);
					$a_post['hidd_supplier_id'] = $docinfo->id;

					if($_GET['supplier_id'] > 0)
					{
						if($_GET['supplier_id'] == $a_post['hidd_supplier_id'])
						{
							$q = Doctrine_Query::create()
								->update('PatientSuppliers')
								->set('supplier_comment', '?',  $a_post['supplier_comment'])
								->where('supplier_id= ?', $_GET['supplier_id'])
								->andWhere('ipid= ?', $ipid);
							$q->execute();
						}
						else
						{
							$q = Doctrine_Query::create()
								->update('PatientSuppliers')
								->set('supplier_id', '?', $a_post['hidd_supplier_id'])
								->set('supplier_comment', '?',  $a_post['supplier_comment'])
								->where('supplier_id= ?', $_GET['supplier_id'])
								->andWhere('ipid= ?', $ipid);
							$q->execute();
						}
					}
					else
					{
						$pfl_cl = new PatientSuppliers();
						$pfl_cl->ipid = $ipid;
						$pfl_cl->supplier_id = $a_post['hidd_supplier_id'];
						$pfl_cl->supplier_comment = $a_post['supplier_comment'];
						$pfl_cl->save();
					}
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");

					if($_REQUEST['noredir'] != 1)
					{
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						echo json_encode(array("success" => "1", "supplieridInserted" => $a_post['hidd_supplier_id']));
						exit;
					}
				}
				else
				{
					$fdoctor_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			/* -------------------------Get supplier details-------------------------------- */
			$fdoc = new Suppliers();
			$docarray = $fdoc->getSuppliers($_REQUEST['supplier_id']);
			$this->view->indrop = 0;
			if($docarray)
			{
				$pat_pfl = new PatientSuppliers();
				$comm = $pat_pfl->getPatientSuppliers($ipid, $_GET['supplier_id']);
				$this->view->supplier_comment = $comm[0]['supplier_comment'];
				$this->retainValues($docarray[0]);
				$this->view->supplier = $docarray[0]['supplier'];
				$this->view->old_supplier_first_name = trim($docarray[0]['first_name']);
				$this->view->old_supplier_last_name = trim($docarray[0]['last_name']);
				$this->view->hidd_supplier_id = $docarray[0]['id'];
				$this->view->indrop = $docarray[0]['indrop'];
			}
		}


		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function hospiceassociationAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->patid = $_GET['id'];

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* ######################################################### */
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/*			 * ****************************************** */

			/* --------------------Set isdelete= 1 for  Patient hospice association---------------------------- */
			$this->view->pid = $_GET['id'];
			if($_GET['decid'] > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');

				if(!$returnadd)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$q = Doctrine_Query::create()
					->update('PatientHospiceassociation')
					->set('isdelete', '1')
					->where('ipid = ?', $ipid)
					->andwhere("h_association_id  = ?", $_GET['decid']);
				$q->execute();

				$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			}

			$this->view->act = "patient/hospiceassociation?id=" . $_GET['id'] . "&h_association_id=" . $_GET['h_association_id'];
			$a_post = $_POST;

			if($this->getRequest()->isPost())
			{
				$fdoctor_form = new Application_Form_PatientMaster();

				if($fdoctor_form->validateHospiceassociation($a_post))
				{
					if($_GET['h_association_id'] > 0)
					{
						if($_GET['h_association_id'] == $a_post['hidd_h_association_id'])
						{
							$q = Doctrine_Query::create()
								->update('PatientHospiceassociation')
								->set('h_association_comment','?',$a_post['h_association_comment'])
								->where('h_association_id = ?', $_GET['h_association_id'])
								->andWhere('ipid= ?', $ipid);
							$q->execute();
						}
						else
						{
							$q = Doctrine_Query::create()
								->update('PatientHospiceassociation')
								->set('h_association_id', '?' ,$a_post['hidd_h_association_id'])
								->set('h_association_comment', '?' ,$a_post['h_association_comment'])
								->where('h_association_id = ?', $_GET['h_association_id'])
								->andWhere('ipid= ?', $ipid);
							$q->execute();
						}
					}
					else
					{
						$pfl_cl = new PatientHospiceassociation();
						$pfl_cl->ipid = $ipid;
						$pfl_cl->h_association_id = $a_post['hidd_h_association_id'];
						$pfl_cl->h_association_comment = $a_post['h_association_comment'];
						$pfl_cl->save();
					}

					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
					if($_REQUEST['noredir'] != 1)
					{
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						echo json_encode(array("success" => "1", "hassociationidInserted" => $a_post['hidd_h_association_id']));
						exit;
					}
				}
				else
				{
					$this->view->error_message = $this->view->translate("Please fill the hospice association input");
					$fdoctor_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			/* -------------------------Get Hopsice association service details-------------------------------- */
			$fdoc = new Hospiceassociation();
			$docarray = $fdoc->getHospiceassociation($_REQUEST['h_association_id']);
			$this->view->indrop = 0;
			if($docarray)
			{
				$pat_pfl = new PatientHospiceassociation();
				$comm = $pat_pfl->getPatientHospiceassociation($ipid, $_GET['h_association_id']);
				$this->view->h_association_comment = $comm[0]['h_association_comment'];
				$this->retainValues($docarray[0]);
				$this->view->h_association = $docarray[0]['hospice_association'];
				$this->view->old_h_association_firstname = trim($docarray[0]['first_name']);
				$this->view->old_h_association_lastname = trim($docarray[0]['last_name']);

				$this->view->hidd_h_association_id = $docarray[0]['id'];
				$this->view->indrop = $docarray[0]['indrop'];
			}

			if($_GET['mod'] == "modal")
			{
				$this->view->act = "hospiceassociation?id=" . $_GET['id'] . "";
				$doc[0] = $docarray[0];
				$grid = new Pms_Grid($doc, 1, count($doc), "hospiceassociationedit.html");
				echo $grid->renderGrid();
				exit;
			}
		}

		public function hospizvAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			
			// get associated clients of current clientid START
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
			if($connected_client){
			    $clientid = $connected_client;
			} else{
			    $clientid = $logininfo->clientid;
			}
			
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$this->view->pid = $_GET['id'];

			$a_post = $_POST['simple'];
			$b_post = $_POST['bulk'];
			if($this->getRequest()->isPost())
			{
				if(!empty($a_post))
				{
					$docform = new Application_Form_PatientHospizvizits();
					if($docform->validate_multiple_simple($a_post))
					{
						$docinfo = $docform->InsertDataMultiple($a_post);
						$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
						$this->_redirect(APP_BASE . 'patient/hospizv?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						$docform->assignErrorMessages();
						$this->retainValues($_POST['simple'], 's_');
					}
				}

				if(!empty($b_post))
				{
					$docform = new Application_Form_PatientHospizvizits();
					if($docform->validate_multiple_cumulative($b_post))
					{
						$docinfo = $docform->InsertDataMultiple($b_post);
						$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
						$this->_redirect(APP_BASE . 'patient/hospizv?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						$docform->assignErrorMessages();
						$this->retainValues($_POST['bulk'], 'b_');
					}
				}
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$hospv = new PatientHospizvizits();
			$hospizvizits = $hospv->getPatienthospizvizits($ipid);

			foreach($hospizvizits as $hv){
			    $vw_ids[] =  $hv['vw_id'];
			}
			if(empty($vw_ids)){
			    $vw_ids = false;
			}
			
			
			
			$fdoc = new Voluntaryworkers();
			$docarray = $fdoc->getClientsVoluntaryworkers($clientid, $vw_ids);
			$grundarray = $hospv->gethospizvreason();

			$patienthospizv = array();

			//get all volunteer users
			$user_selector[] = $this->view->translate('selectvoluntary');
			foreach($docarray as $name_user)
			{
				$user_full_name[$name_user['id']] = trim($name_user['last_name']) . ", " . trim($name_user['first_name']);

				//if($name_user['clientid'] ==$clientid ){  // add in select only available voluntary workers
				if($name_user['clientid'] ==$clientid && $name_user['isarchived'] == '0' ){     //TODO-4000 Lore 24.03.2021
    				$user_selector[$name_user['id']] = trim($name_user['last_name']) . ", " . trim($name_user['first_name']);
				}
			}
			$this->view->users = $user_selector;

			$phv = new PatientHospizvizits();
			$this->view->grundarray = $phv->gethospizvreason();

			foreach($hospizvizits as $vizit)
			{
				if($vizit['type'] == 'n')
				{
					$patienthospizv[$vizit['id']]['pid'] = $_GET['id'];
					$patienthospizv[$vizit['id']]['vizitid'] = $vizit['id'];
					$patienthospizv[$vizit['id']]['date'] = date('d.m.Y', strtotime($vizit['hospizvizit_date']));
					$patienthospizv[$vizit['id']]['duration'] = $vizit['besuchsdauer'];
					$patienthospizv[$vizit['id']]['km'] = $vizit['fahrtkilometer'];
					$patienthospizv[$vizit['id']]['timetravel'] = $vizit['fahrtzeit'];
					$patienthospizv[$vizit['id']]['grund'] = $grundarray[$vizit['grund']];
					$patienthospizv[$vizit['id']]['name'] = $user_full_name[$vizit['vw_id']];
					if($vizit['nightshift'] == 1)
					{
						$patienthospizv[$vizit['id']]['nightshift'] = 'ja';
					}
					else
					{
						$patienthospizv[$vizit['id']]['nightshift'] = 'nein';
					}
				}
				else if($vizit['type'] == 'b')
				{
					$patienthospizvbulk[$vizit['id']]['pid'] = $_GET['id'];
					$patienthospizvbulk[$vizit['id']]['vizitid'] = $vizit['id'];
					$patienthospizvbulk[$vizit['id']]['amount'] = $vizit['amount'];
					if($vizit['hospizvizit_date'] != "0000-00-00 00:00:00")
					{
						$patienthospizvbulk[$vizit['id']]['date'] = date('Y', strtotime($vizit['hospizvizit_date']));
					}
					else
					{
						$patienthospizvbulk[$vizit['id']]['date'] = date('Y', strtotime($vizit['create_date']));
					}
					$patienthospizvbulk[$vizit['id']]['duration'] = $vizit['besuchsdauer'];
					$patienthospizvbulk[$vizit['id']]['km'] = $vizit['fahrtkilometer'];
					$patienthospizvbulk[$vizit['id']]['timetravel'] = $vizit['fahrtzeit'];
					$patienthospizvbulk[$vizit['id']]['grund'] = $grundarray[$vizit['grund']];
					if($vizit['nightshift'] == 1)
					{
						$patienthospizvbulk[$vizit['id']]['nightshift'] = 'ja';
					}
					else
					{
						$patienthospizvbulk[$vizit['id']]['nightshift'] = 'nein';
					}

					$patienthospizvbulk[$vizit['id']]['name'] = $user_full_name[$vizit['vw_id']];
				}
			}

			if(count($patienthospizv) > 0)
			{
				$grid = new Pms_Grid($patienthospizv, 1, count($patienthospizv), "listpatienthospizv.html");
				$this->view->hospizvgrid = $grid->renderGrid();
			}
			else
			{
				$this->view->hospizvgrid = false;
			}

			if(count($patienthospizvbulk) > 0)
			{
				$grid = new Pms_Grid($patienthospizvbulk, 1, count($patienthospizvbulk), "hospizvbulklist.html");
				$this->view->hospizvbulkgrid = $grid->renderGrid();
			}
			else
			{
				$this->view->hospizvbulkgrid = false;
			}
			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function hospizvbulkAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			
			// get associated clients of current clientid START
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
			if($connected_client){
			    $clientid = $connected_client;
			} else{
			    $clientid = $logininfo->clientid;
			}

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$this->view->pid = $_GET['id'];

			$hospv = new PatientHospizvizits();
			$hospizvizits = $hospv->getPatienthospizvizits($ipid, 'b');

			$fdoc = new Voluntaryworkers();
			$docarray = $fdoc->getClientsVoluntaryworkers($clientid);
			$grundarray = $hospv->gethospizvreason();

			$patienthospizv = array();
			foreach($hospizvizits as $vizit)
			{
				$patienthospizv[$vizit['id']]['pid'] = $_GET['id'];
				$patienthospizv[$vizit['id']]['vizitid'] = $vizit['id'];
				$patienthospizv[$vizit['id']]['date'] = date('d.m.Y', strtotime($vizit['hospizvizit_date']));
				$patienthospizv[$vizit['id']]['amount'] = $vizit['amount'];
				$patienthospizv[$vizit['id']]['duration'] = $vizit['besuchsdauer'];
				$patienthospizv[$vizit['id']]['km'] = $vizit['fahrtkilometer'];
				$patienthospizv[$vizit['id']]['timetravel'] = $vizit['fahrtzeit'];
				$patienthospizv[$vizit['id']]['grund'] = $grundarray[$vizit['grund']];
				if($vizit['nightshift'] == 1)
				{
					$patienthospizv[$vizit['id']]['nightshift'] = 'ja';
				}
				else
				{
					$patienthospizv[$vizit['id']]['nightshift'] = 'nein';
				}
				foreach($docarray as $name_user)
				{
					if($vizit['vw_id'] == $name_user['id'])
					{
						$patienthospizv[$vizit['id']]['name'] = trim($name_user['last_name']) . " " . trim($name_user['first_name']);
					}
				}
			}

			if(count($patienthospizv) > 0)
			{

				$grid = new Pms_Grid($patienthospizv, 1, count($patienthospizv), "hospizvbulklist.html");
				$this->view->hospizvgrid = $grid->renderGrid();
			}
			else
			{
				$this->view->hospizvgrid = "";
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function addhospizvAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			$clientid = $logininfo->clientid;

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$this->view->pid = $_GET['id'];

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$fdoc = new Voluntaryworkers();
			$docarray = $fdoc->getClientsVoluntaryworkers($clientid);

			$vw[] = $this->view->translate('selectvoluntary');
			foreach($docarray as $user)
			{
				$vw[$user['id']] = trim($user['last_name']) . " " . trim($user['first_name']);
				$vw_id = $user['id'];
			}
			$this->view->users = $vw;
			$this->view->users_id = $vw_id;


			$phv = new PatientHospizvizits();
			$this->view->grundarray = $phv->gethospizvreason();

			$a_post = $_POST;
			if($this->getRequest()->isPost())
			{
				$docform = new Application_Form_PatientHospizvizits();
				if($docform->validate($_POST))
				{
					$docinfo = $docform->InsertData($a_post);
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
					$this->_redirect(APP_BASE . 'patient/hospizv?flg=suc&id=' . $_GET['id']);
				}
				else
				{
					$docform->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function addbulkhospizvAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			$clientid = $logininfo->clientid;

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$this->view->pid = $_GET['id'];

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			$fdoc = new Voluntaryworkers();
			$docarray = $fdoc->getClientsVoluntaryworkers($clientid);

			$vw[] = $this->view->translate('selectvoluntary');
			foreach($docarray as $user)
			{
				$vw[$user['id']] = trim($user['last_name']) . " " . trim($user['first_name']);
				$vw_id = $user['id'];
			}
			$this->view->users = $vw;
			$this->view->users_id = $vw_id;


			$phv = new PatientHospizvizits();
			$this->view->grundarray = $phv->gethospizvreason();

			$a_post = $_POST;
			if($this->getRequest()->isPost())
			{
				$docform = new Application_Form_PatientHospizvizits();
				if($docform->validate_multiple($_POST))
				{
					$docinfo = $docform->InsertDataMultiple($a_post);
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
					$this->_redirect(APP_BASE . 'patient/hospizvbulk?flg=suc&id=' . $_GET['id']);
				}
				else
				{
					$docform->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function edithospizvAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			
			// get associated clients of current clientid START
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
			if($connected_client){
			    $clientid = $connected_client;
			} else{
			    $clientid = $logininfo->clientid;
			}

			/* ######################################################### */
			$this->view->pid = $_GET['id'];
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			if($this->getRequest()->isPost())
			{
				$contact_form = new Application_Form_PatientHospizvizits();
				$a_post = $_POST;

				if($contact_form->validate($_POST))
				{
					$contact_form->UpdateData($_POST);
					$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
					$this->_redirect(APP_BASE . 'patient/hospizv?flg=suc&id=' . $_GET['id']);
				}
				else
				{
					$contact_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			
			

			$sav = new PatientHospizvizits();
			$savarr = $sav->getPatienthospizvizitsById($_GET['vizitid']);
			$this->view->grundarray = $sav->gethospizvreason();
			
			if($savarr[0]['id']){
			    $vw_ids[] = $savarr[0]['vw_id'];
			} else {
			    $vw_ids = false;
			}
			
			
			
			$fdoc = new Voluntaryworkers();
			$docarray = $fdoc->getClientsVoluntaryworkers($clientid,$vw_ids);

			$vw[] = $this->view->translate('selectvoluntary');
			foreach($docarray as $user)
			{
				$vw[$user['id']] = trim($user['last_name']) . ", " . trim($user['first_name']);
			}
			$this->view->users = $vw;



			if($savarr[0]['id'])
			{
				$this->view->vw_id = $savarr[0]['vw_id'];
				$this->view->type = $savarr[0]['type'];
				$this->view->besuchsdauer = $savarr[0]['besuchsdauer'];
				$this->view->fahrtkilometer = $savarr[0]['fahrtkilometer'];
				$this->view->hospizvizit_date = date('d.m.Y', strtotime($savarr[0]['hospizvizit_date']));
				$this->view->fahrtzeit = $savarr[0]['fahrtzeit'];
				$this->view->grund = $savarr[0]['grund'];
				$this->view->amount = $savarr[0]['amount'];
				$this->view->nightshift = $savarr[0]['nightshift'];
			}

			if($savarr[0]['type'] == 'b')
			{
				$this->_helper->viewRenderer("edithospizvbulk");
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function deletehospizvAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			
			$this->_helper->viewRenderer->setNoRender();
			
			if(strlen($_GET['vizitid'])>0 ){
				
				$fdoc = Doctrine::getTable('PatientHospizvizits')->find($_GET['vizitid']);
				$fdoc->isdelete = 1;
				$fdoc->save();
				
			}
			
			$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
			$this->_redirect(APP_BASE . 'patient/hospizv?flg=suc&id=' . $_GET['id']);
			exit;
			
		}

		public function deletehospizvbulkAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$this->_helper->viewRenderer('hospizvbulk');

			$fdoc = Doctrine::getTable('PatientHospizvizits')->find($_GET['vizitid']);
			$fdoc->isdelete = 1;
			$fdoc->save();
			$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
			$this->_redirect(APP_BASE . 'patient/hospizvbulk?flg=suc&id=' . $_GET['pid']);
		}

		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function voluntaryworkersAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->patid = $_GET['id'];

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$pdarr = PatientDischarge::getPatientDischarge($ipid);
			if($pdarr[0]['discharge_date'])
			{
			    $dischargedate = date('d.m.Y', strtotime($pdarr[0]['discharge_date']));
			}
			/* ######################################################### */
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			$this->view->pid = $_GET['id'];
			if($_GET['decid'] > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');

				if(!$returnadd)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$q = Doctrine_Query::create()
					->update('PatientVoluntaryworkers')
					->set('isdelete', '1')
					->where("vwid= ?", $_GET['decid']);
				$q->execute();

				$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			}

			$this->view->act = "patient/voluntaryworkers?id=" . $_GET['id'] . "&vwid=" . $_GET['vwid'];

			if($this->getRequest()->isPost())
			{
				$a_post = $_POST;

				if(strlen($a_post['vw_parent_id']) > 0)
				{
					$a_post['vw_parent_id'] = $a_post['vw_parent_id'];
				}
				else
				{
					$a_post['vw_parent_id'] = "0";
				}

				$docform = new Application_Form_Voluntaryworkers();
				$docinfo = $docform->InsertFromTabData($a_post);
				$a_post['hidd_vwid'] = $docinfo->id;

				if(strlen($a_post['start_date']) > 0  ){
				    $vw_start_date = date('Y-m-d H:i:s',strtotime($a_post['start_date']));
				    
				}  
				
				if(strlen($a_post['end_date']) > 0  ){
				    $vw_end_date = date('Y-m-d H:i:s',strtotime($a_post['end_date']));
				}
				
				
				if($_GET['vwid'] > 0)
				{
					if($_GET['vwid'] == $a_post['hidd_vwid'])
					{

						$q = Doctrine_Query::create()
							->update('PatientVoluntaryworkers')
							->set('vw_comment', '?', $a_post['vw_comment'])
							->set('start_date', '"' . $vw_start_date . '"')
							->set('end_date', '"' . $vw_end_date . '"')
							->where('vwid= ?', $_GET['vwid'])
							->andWhere('ipid= ?',  $ipid);
						$q->execute();
					}
					else
					{
						$q = Doctrine_Query::create()
							->update('PatientVoluntaryworkers')
							->set('vwid','?', $a_post['hidd_vwid'])
							->set('vw_comment','?', $a_post['vw_comment'])
							->set('start_date', '"' . $vw_start_date . '"')
							->set('end_date', '"' . $vw_end_date . '"')
							->where('vwid= ?', $_GET['vwid'])
							->andWhere('ipid= ?',  $ipid);
						$q->execute();
					}
				}
				else
				{
				    
					$pfl_cl = new PatientVoluntaryworkers();
					$pfl_cl->ipid = $ipid;
					$pfl_cl->vwid = $a_post['hidd_vwid'];
					$pfl_cl->start_date = $vw_start_date;
					$pfl_cl->end_date = $vw_end_date ;
					$pfl_cl->vw_comment = $a_post['vw_comment'];
					$pfl_cl->save();
				}
				$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			}

			$fdoc = new Voluntaryworkers();
			$docarray = $fdoc->getVoluntaryworkers($_REQUEST['vwid']);
			$this->view->indrop = 0;

			if($docarray)
			{
				$pat_pvw = new PatientVoluntaryworkers();
				$comm = $pat_pvw->getPatientVoluntaryworkers($ipid, $_GET['vwid']);
				$this->view->vw_comment = html_entity_decode($comm[0]['vw_com']);

				
				if($comm[0]['start_date'] != "0000-00-00 00:00:00"){
    				$this->view->start_date = date('d.m.Y',strtotime($comm[0]['start_date']));
				} else{
    				$this->view->start_date = date('d.m.Y',strtotime($comm[0]['create_date']));
				}


				if( $comm[0]['end_date'] != "0000-00-00 00:00:00"){
    				$this->view->end_date = date('d.m.Y',strtotime($comm[0]['end_date']));
				} else{
                    if($isdicharged && strtotime($dischargedate) > strtotime($this->view->start_date)  ) {
    				    $this->view->end_date = $dischargedate;
                    } else{
    				    $this->view->end_date = "";
                    }
				    
				}
				
				$this->retainValues($docarray[0]);
				$this->view->old_voluntary_firstname = trim($docarray[0]['first_name']);
				$this->view->old_voluntary_lastname = trim($docarray[0]['last_name']);

				$this->view->hidd_vwid = $docarray[0]['id'];
				$this->view->vw_parent_id = $docarray[0]['parent_id'];
				$this->view->indrop = $docarray[0]['indrop'];
				$this->view->status = $docarray[0]['status'];
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function sapvverordnungeditAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$this->view->verordnetarray = Pms_CommonData::getSapvCheckBox();
			$this->view->bra_options_array = Pms_CommonData::get_bra_options_checkboxes();

			$sap = new SapvVerordnung();
			$this->view->radioarr = $sap->getSapvRadios();

			$modules = new Modules();
			if($modules->checkModulePrivileges("70", $clientid)) // primary status : Verordnung
			{
				$sapv_primary_status = true;
			}
			else
			{
				$sapv_primary_status = false;
			}


			if($modules->checkModulePrivileges("71", $clientid)) // secondary status : Verordnung 2nd Page
			{
				$sapv_secondary_status = true;
			}
			else
			{
				$sapv_secondary_status = false;
			}

			if($modules->checkModulePrivileges("97", $clientid)) // Bra options
			{
				$sapv_bra_options = true;
			}
			else
			{
				$sapv_bra_options = false;
			}
			
			$this->view->sapv_bra_options = $sapv_bra_options;
			

			
			if($sapv_primary_status || $sapv_secondary_status)
			{

				$this->view->extraradioarr = $sap->getSapvExtraStatusesRadios();
				$this->view->sapv_primary_status = $sapv_primary_status;
				$this->view->sapv_secondary_status = $sapv_secondary_status;
			}

			if($modules->checkModulePrivileges("69", $clientid))
			{
				$sapv_extra = true;
			}
			else
			{
				$sapv_extra = false;
			}

			if($sapv_extra === true)
			{
				$this->view->extraradioarr_old = $sap->getSapvExtraRadios();
			}
			$this->view->sapv_extra = $sapv_extra;

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ######################################################### */

			$period_start = date("Y", strtotime("-5 year", strtotime(date("d.m.Y"))));
			$period_end = date("Y", strtotime("+5 year", strtotime(date("d.m.Y"))));

			$this->view->period_start = $period_start;
			$this->view->period_end = $period_end;

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('familydoctor', $logininfo->userid, 'canedit');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$this->view->pid = $_GET['id'];
			if($_GET['decid'] > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('familydoctor', $logininfo->userid, 'candelete');

				if(!$returnadd)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$sav_form = new Application_Form_SapvVerordnung();
				$sav_form->deleteSapvVerordnung($_GET['decid']);
				/* ISPC - 2084 confirm delete */
				//$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				//$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				/* ISPC - 2084 confirm delete*/
				exit;
			}

			if($this->getRequest()->isPost())
			{
				$sav_form = new Application_Form_SapvVerordnung();

				if($sav_form->validate($_POST))
				{
					$a_post = $_POST;
					if($_POST['hidd_verordnet_von'] < 1)
					{
						$docform = new Application_Form_Familydoctor();
						$a_post['last_name'] = $_POST['verordnet_von'];
						$a_post['indrop'] = 1;
						$docinfo = $docform->InsertData($a_post);
						$a_post['hidd_verordnet_von'] = $docinfo->id;
						$a_post['hidd_verordnet_von_type'] = 'family_doctor'; 
						
					}

					$a_post['ipid'] = $ipid;
					$sav_form->UpdateData($a_post);
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				}
				else
				{
					$sav_form->assignErrorMessages();
					$this->retainValues($_POST);
					$this->view->verordnet = $_POST['verordnet'][0];
				}
			}

			$sav = new SapvVerordnung();
			$savarr = $sav->getSapvVerordnungById($_GET['vid']);

			if($savarr[0]['verordnet_von'])
			{
				$this->view->verordnet_von = $sav->get_verordnet_von($savarr[0]['verordnet_von'], $savarr[0]['verordnet_von_type']);
				
				$this->view->vercount = 1;
				if($savarr[0]['verordnungam'] != '0000-00-00 00:00:00')
				{
					$this->view->verordnungam = date('d.m.Y', strtotime($savarr[0]['verordnungam']));
				}

				if($savarr[0]['verordnungbis'] != '0000-00-00 00:00:00')
				{
					$this->view->verordnungbis = date('d.m.Y', strtotime($savarr[0]['verordnungbis']));
				}
				
				if($savarr[0]['regulation_start'] != '0000-00-00 00:00:00')
				{
					$this->view->regulation_start = date('d.m.Y', strtotime($savarr[0]['regulation_start']));
				}
				
				if($savarr[0]['regulation_end'] != '0000-00-00 00:00:00')
				{
					$this->view->regulation_end = date('d.m.Y', strtotime($savarr[0]['regulation_end']));
				}

				if($savarr[0]['verorddisabledate'] != '0000-00-00 00:00:00' && $savarr[0]['verorddisabledate'] != '1970-01-01 00:00:00')
				{
					$this->view->verorddisabledate = date('d.m.Y', strtotime($savarr[0]['verorddisabledate']));
				}
				else
				{
					$this->view->verorddisabledate = "";
				}

				if($savarr[0]['approved_date'] != '0000-00-00 00:00:00' && $savarr[0]['approved_date'] != '1970-01-01 00:00:00')
				{
					$this->view->approved_date = date('d.m.Y', strtotime($savarr[0]['approved_date']));
				}
				else
				{
					$this->view->approved_date = "";
				}

				// get all sapv data 
				
				$sapv = new SapvVerordnung();
			    $first_sapv_arr = $sapv->getFirstSapvVerordnungData($ipid);
			    
			    if(!empty($first_sapv_arr))
			    {
			        $first_sapv_id = $first_sapv_arr[0]['id'];
			    }
			    
			    if($savarr[0]['sapv_order'] == "0")
			    {
			         if($_GET['vid'] == $first_sapv_id )
			         {
    			        $this->view->sapv_order = '1';
			         } 
			         else
			         {
    			        $this->view->sapv_order = '2';
			         }     
			    } 
			    else
			    {
			        $this->view->sapv_order = $savarr[0]['sapv_order'];
			    }
			    
				$this->view->approved_number = $savarr[0]['approved_number'];
// 				$this->view->sapv_order = $savarr[0]['sapv_order'];
				$this->view->hidd_verordnet_von = $savarr[0]['verordnet_von'];
				$this->view->hidd_verordnet_von_type = $savarr[0]['verordnet_von_type'];
				$verordnet = explode(",", $savarr[0]['verordnet']);
				$this->view->verordnet = $verordnet;
				$this->view->status = $savarr[0]['status'];
				$this->view->after_opposition = $savarr[0]['after_opposition'];
				$this->view->extra_set = $savarr[0]['extra_set'];

				if($savarr[0]['primary_set'] != 0)
				{
					$this->view->primary_set = $savarr[0]['primary_set'];
				}
				/* else
				{
					$this->view->primary_set = 1;
				} */

				if($savarr[0]['secondary_set'] != 0)
				{
					$this->view->secondary_set = $savarr[0]['secondary_set'];
				}
				/* else
				{
					$this->view->secondary_set = 1;
				} */
				
				if(strlen($savarr[0]['bra_options'])>0){
					$bra_options= explode(",", $savarr[0]['bra_options']);
					$this->view->bra_options = $bra_options;
				}
				
				//ISPC-1916
				if($modules->checkModulePrivileges("149", $clientid))
				{
					$this->view->case_number = $savarr[0]['case_number'];
				} else {
					$this->view->case_number = false;
				}
				
				
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function editcontactpersonAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			/* ######################################################### */

			$modules = new Modules();
			
			if($modules->checkModulePrivileges("102", $clientid)) // primary status : Verordnung
			{
				$this->view->modul_custody = "1";
			}
			else
			{
				$this->view->modul_custody = "0";
			}
			
			
			
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patientMasterData_array = $patientmaster->get_patientMasterData();
			
			$this->view->real_contact_number = $parr['kontactnumber_dec'];
			$this->view->kontactnumbertype = $parr['kontactnumbertype'];
			if($this->getRequest()->isPost())
			{
				$contact_form = new Application_Form_ContactPersonMaster(array(
						"_patientMasterData"=>$patientmaster->get_patientMasterData(),
						'_block_name' => $this->getRequest()->getActionName(),
				));

				$a_post = $_POST;
				
				$pm_form = new Application_Form_PatientMaster();
				
				//ispc-2045 removed lines
// 				if(strlen($a_post['real_contact_number']) > 0)
// 				{
// 				    if(!empty($a_post['cnt_phone'])){
//     					$pm_form->UpdateContactNumber($a_post['cnt_phone'], '2');
// 				    } else{
//     					$pm_form->UpdateContactNumber($a_post['cnt_mobile'], '2');
// 				    }
				     
					
// 				}
// 				elseif($parr['kontactnumber_dec'] == $a_post['cnt_mobile'] && $parr['kontactnumbertype'] == '2')
// 				{
// 					$pm_form->DisableContactNumber();
// 				}
// 				elseif($parr['kontactnumber_dec'] == $a_post['cnt_phone'] && $parr['kontactnumbertype'] == '2')
// 				{
// 					$pm_form->DisableContactNumber();
// 				}

				$_POST['is_contact'] = (int)$a_post['real_contact_number'];
				
				if($contact_form->validate($_POST))
				{
					$contact_form->UpdateData($_POST);
					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				}
				else
				{
					$contact_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContactById($_GET['cid']);

			$this->retainValues($pcs[0]);
			$this->view->cnt_hatversorgungsvollmacht = $pcs[0]['cnt_hatversorgungsvollmacht'];
			$this->view->notify_funeral = $pcs[0]['notify_funeral'];
			$this->view->quality_control = $pcs[0]['quality_control'];

			$this->view->pid = $_GET['id'];
			if($_GET['decid'] > 0)
			{
// 				$previleges = new Pms_Acl_Assertion();
// 				$returnadd = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');

// 				if(!$returnadd)
// 				{
// 					$this->_redirect(APP_BASE . "error/previlege");
// 				}

// 				$patientmaster = new PatientMaster();
// 				$parr = $patientmaster->getMasterData($decid, 0);

// 				$pc = new ContactPersonMaster();
// 				$pcs = $pc->getPatientContactById($_GET['decid']);
				
				
				$obj = new ContactPersonMaster();
				$obj_res = $obj->getTable()->findOneByIdAndIpid( $_GET['decid'], $ipid );
				if ($obj_res) {
					$obj_res->set('isdelete', '1');
					$obj_res->save();
					//$obj->delete();
				}
				
				
// 				$pm_formc = new Application_Form_PatientMaster();

//				$q = Doctrine_Query::create()
//					->update('ContactPersonMaster')
//					->set('isdelete', '1')
//					->where('ipid = ?', $ipid)
//					->andwhere("id = ?", $_GET['decid']);
//				$q->execute();

				$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			}

			$this->view->act = "patient/editcontactperson?id=" . $_GET['id'] . "&cid=" . $_GET['cid'];

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			
			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function savecontactpersonAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$logininfo = new Zend_Session_Namespace('Login_Info');

			/* ######################################################### */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			if($this->getRequest()->isPost())
			{
				$contact_form = new Application_Form_ContactPersonMaster();

				$a_post = $_POST;
				$a_post['ipid'] = $ipid;

				if($contact_form->validate($_POST))
				{
					$cf_response = $contact_form->InsertDataSingle($a_post, true);
					if($_REQUEST['response'] != '1')
					{
						echo json_encode(array("success" => "1"));
						exit;
					}
					else if($_REQUEST['response'] == '1')
					{
						echo json_encode(array(
							"name" => $cf_response['cnt_first_name'],
							"last_name" => $cf_response['cnt_last_name'],
							"id" => $cf_response['id'],
							"success" => "1"
						));
						exit;
					}
				}
				else
				{
					echo json_encode("Error: No Previlege");
					exit;
				}
			}

			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContactById($_GET['cid']);

			$this->retainValues($pcs[0]);
			$this->view->cnt_hatversorgungsvollmacht = $pcs[0]['cnt_hatversorgungsvollmacht'];

			$this->view->pid = $_GET['id'];

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function sapvverordnungaddAction()
		{
			$this->_helper->viewRenderer('sapvverordnungedit');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$this->view->verordnetarray = Pms_CommonData::getSapvCheckBox();

			$this->view->bra_options_array = Pms_CommonData::get_bra_options_checkboxes();
			
			$sap = new SapvVerordnung();
			$this->view->radioarr = $sap->getSapvRadios();

			$modules = new Modules();

			if($modules->checkModulePrivileges("70", $clientid)) // primary status : Verordnung
			{
				$sapv_primary_status = true;
			}
			else
			{
				$sapv_primary_status = false;
			}

			if($modules->checkModulePrivileges("71", $clientid)) // secondary status : Verordnung 2nd Page
			{
				$sapv_secondary_status = true;
			}
			else
			{
				$sapv_secondary_status = false;
			}

			

			if($modules->checkModulePrivileges("97", $clientid)) // Bra options
			{
				$sapv_bra_options = true;
			}
			else
			{
				$sapv_bra_options = false;
			}
				
			$this->view->sapv_bra_options = $sapv_bra_options;
				
				
			
			if($sapv_primary_status || $sapv_secondary_status)
			{
				$this->view->extraradioarr = $sap->getSapvExtraStatusesRadios();
				$this->view->sapv_primary_status = $sapv_primary_status;
				$this->view->sapv_secondary_status = $sapv_secondary_status;
				/* $this->view->secondary_set = "1";
				$this->view->primary_set = "1"; */
			}

			if($modules->checkModulePrivileges("69", $clientid))
			{
				$sapv_extra = true;
			}
			else
			{
				$sapv_extra = false;
			}

			if($sapv_extra === true)
			{
				$this->view->extraradioarr_old = $sap->getSapvExtraRadios();
			}

			$this->view->sapv_extra = $sapv_extra;

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ######################################################### */

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('familydoctor', $logininfo->userid, 'canedit');

			$period_start = date("Y", strtotime("-5 year", strtotime(date("d.m.Y"))));
			$period_end = date("Y", strtotime("+5 year", strtotime(date("d.m.Y"))));

			$this->view->period_start = $period_start;
			$this->view->period_end = $period_end;

			/* ----------------------Prefill approve date----------------------------------- */
			$this->view->approved_date = date('d.m.Y');
			/* ----------------------------------------------------------------------------- */

			/* ----------------------Prefill sapv_order----------------------------------- */
			$sapvver = new SapvVerordnung();
			$sapvverdata = $sapvver->getSapvVerordnungData($ipid);
			if(!empty($sapvverdata)) {
				$sapv_order = 2;
			}
			else {
				$sapv_order = 1;
			}
			$this->view->sapv_order = $sapv_order;
			/* ----------------------------------------------------------------------------- */
			
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if($this->getRequest()->isPost())
			{

				$sav_form = new Application_Form_SapvVerordnung();

				if($sav_form->validate($_POST))
				{
					$a_post = $_POST;
					if($_POST['hidd_verordnet_von'] < 1)
					{
						$docform = new Application_Form_Familydoctor();
						$a_post['doclast_name'] = $_POST['verordnet_von'];
						$a_post['indrop'] = 1;
						$docinfo = $docform->InsertData($a_post);
						$a_post['hidd_verordnet_von'] = $docinfo->id;
						$a_post['hidd_verordnet_von_type'] = 'family_doctor';
					}

					$a_post['ipid'] = $ipid;
					$sav_form->InsertData($a_post);
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				}
				else
				{
					$sav_form->assignErrorMessages();
					$this->retainValues($_POST);
					$this->view->verordnet = $_POST['verordnet'][0];
				}
			}

			//ISPC-1916
			if( ! $modules->checkModulePrivileges("149", $clientid))
			{
				$this->view->case_number = false;
			}
			
			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function patientfileuploadAction()
		{
            //ISPC-2831 Dragos 15.03.2021
			ini_set("upload_max_filesize", "10M");
			$decid = Pms_Uuid::decrypt($_GET['id']);
			//$logininfo = new Zend_Session_Namespace('Login_Info');

			$clientid = $this->logininfo->clientid;
			$userid = $this->logininfo->userid;
			//$decid = $this->dec_id;
			$this->view->enc_id = $_GET['id'];
			// -- //
			
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$iscl = Pms_Plugin_Acl::getClientTabmenuAccess($clientid);
			if(!$iscl)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			//ISPC-2831 Dragos 15.03.2021
/*   			if ($_REQUEST['efa'] != 1 && $this->logininfo->isEfaClient != '1') {
                $patientmaster = new PatientMaster();
                $tm = new TabMenus();
                $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
                $this->view->tabmenus = $tm->getMenuTabs();
            }  */
            // -- //
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ######################################################### */

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientfileupload', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->view->style = 'none;';
				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('patientfileupload', $logininfo->userid, 'canadd');

				if(!$returnadd)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}
			}
			else
			{

				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('patientfileupload', $logininfo->userid, 'canadd');

				if(!$returnadd)
				{
					$this->view->styleadd = 'none;';
				}
			}


			$this->view->pid = $_GET['id'];
			$this->view->act = "patient/patientfileupload?id=" . $_GET['id'] . ($_REQUEST['efa'] == 1 ? '&efa=1' : ''); //ISPC-2831 Dragos 15.03.2021
			$this->view->fupclass = "active";
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;

            /* ISPC-2831 Dragos 15.02.2021
              * Get patient falls
             */
            $patient_falls = PatientReadmission::findFallsOfIpid($ipid);

            $selected_fall = 0; // this is fetched from post or get

            $last_fall_start_id = 0;

            $patient_falls_array = array();
            $this->view->patient_falls_array = array();
            $this->view->patient_falls_selectbox = array();//only to populate a formSelect


            foreach ($patient_falls as $fall) {

                $start = ! empty($fall['admission']['date']) && $fall['admission']['date'] != '0000-00-00' ? date('d.m.Y', strtotime($fall['admission']['date'])) : '' ;
                $end = ! empty($fall['discharge']['date']) && $fall['discharge']['date'] != '0000-00-00' ? date('d.m.Y', strtotime($fall['discharge']['date'])) : '' ;

                $patient_falls_array[$fall['admission']['id']] = array(
                    'start' => ! empty($fall['admission']['date']) && $fall['admission']['date'] != '0000-00-00' ? $fall['admission']['date'] : null,
                    'end' => ! empty($fall['discharge']['date']) && $fall['discharge']['date'] != '0000-00-00' ? $fall['discharge']['date'] : null,

                    'start_ID' => ! empty($fall['admission']['id']) ? $fall['admission']['id'] : null,
                    'end_ID' => ! empty($fall['discharge']['id']) ? $fall['discharge']['id'] : null,
                );

                $this->view->patient_falls_selectbox[$fall['admission']['id']] = $start . " - " . $end;

                $last_fall_start_id = $fall['admission']['id'];
            }
            $this->view->patient_falls_array = $patient_falls_array;
            // -- //

			//ISPC-2642 Ancuta 10-11.08.2020
			//Get all tags 
			$client_tags = PatientFileTags::get_client_tags($clientid);
			$system_tags = PatientFileTags::get_allclients_tags();
			
			$all_tags = array_merge($client_tags, $system_tags);
			
			$all_tagsids2names = array(); 
			$all_tagsname2ids = array(); 
			$all_tags_val = array(); 
			foreach($all_tags as $k_tg => $v_tg)
			{
			    $all_tagsids2names[$v_tg['id']] = $v_tg['tag'];
			    $all_tagsname2ids[$v_tg['tag']] = $v_tg['id'];
			    $all_tags_val[] = $v_tg['tag'];
			}

			$this->view->all_tagsname2ids = $all_tagsname2ids;
			
			$modules = new Modules();
			$allow_tagbuttons = false;
			if($modules->checkModulePrivileges("234", $clientid))//Medication acknowledge ISPC - 1483
			{
			    $allow_tagbuttons = true;
			}
			$this->view->allow_tagbuttons = $allow_tagbuttons;
			// --
			
			
			/*			 * ********Deletefile*********** */
			if($_GET['did'] > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('patientfileupload', $logininfo->userid, 'candelete');

				if(!$returnadd)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}
				$upload_form = new Application_Form_PatientFileUpload();
				$upload_form->deleteFile($_GET['did']);
			}

			if($_GET['doc_id'] > 0)
			{
				$patient = Doctrine_Query::create()
					->select("*,AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
						AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') as file_name,
						AES_DECRYPT(file_type,'" . Zend_Registry::get('salt') . "') as file_type")
					->from('PatientFileUpload')
					->where('id= ?', $_GET['doc_id']);
				
				$fl = $patient->execute();

				if($fl)
				{
					$flarr = $fl->toArray();
					$explo = explode("/", $flarr[0]['file_name']);
					$fdname = $explo[0];
					$flname = utf8_decode($explo[1]);
				}

				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::filedownload($con_id, 'uploads/' . $fdname . '.zip', 'uploads/' . $fdname . '.zip');
					Pms_FtpFileupload::ftpconclose($con_id);
				}

				$cmd = "unzip -P " . $logininfo->filepass . " uploads/" . $fdname . ".zip;";
				exec($cmd);

				$file = file_get_contents("uploads/" . $fdname . "/" . $flname);
				ob_end_clean();
				ob_start();
				$expl = explode(".", $flname);


				if($expl[count($expl) - 1] == 'doc' || $expl[count($expl) - 1] == 'docx' || $expl[count($expl) - 1] == 'xls' || $expl[count($expl) - 1] == 'xlsx')
				{
					header("location: " . APP_BASE . "uploads/" . $fdname . "/" . $flname);
				}
				else
				{
					header('Content-Description: File Transfer');
					header('Content-Type: application/octet-stream');
					header('Content-Disposition: attachment; filename="' . $flname . '"');
					header('Content-Transfer-Encoding: binary');
					header('Expires: 0');
					header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
					header('Pragma: public');
					header('Content-Length: ' . filesize("uploads/" . $fdname . "/" . $flname));
					ob_clean();
					flush();

					echo readfile("uploads/" . $fdname . "/" . $flname);
				}
				exit;
			}
			//ISPC-2642 Ancuta 10-11.08.2020
			elseif($_REQUEST['file_id'] > 0 & $_REQUEST['act'] == 'edit'){
			    //get file info
			    $file_id = $_REQUEST['file_id'];
			    $file_info = PatientFileUpload::_get_patient_file($ipid,$file_id);

			    $file_data = array(); 
			    if(!empty($file_info)){
			        foreach($file_info as $k=>$fdata){
			            if($fdata['id'] == $file_id ){
    			            $file_data['title'] = $fdata['title'];
    			            $file_data['id'] = $fdata['id'];
    			            foreach($fdata['PatientFile2tags'] as $tk=>$v_tag){
    			                if($v_tag['tag'] != 1){
           			                $file_info[$k]['initialTags_arr'][] = $all_tagsids2names[$v_tag['tag']];
    			                }
    			            }
    			            if(!empty($file_info[$k]['initialTags_arr'])){
        			            $file_data['initialTags_arr'] =  $file_info[$k]['initialTags_arr'];
        			            $file_data['initialTags'] =  implode(',',$file_info[$k]['initialTags_arr']);
        			            $file_data['initialTags_js'] =  json_encode($file_info[$k]['initialTags_arr']);;
    			            }
			            }
			        }
			    }
			    $this->view->current_file_data = $file_data;
			}
			//-- 
            //ISPC-2831 Dragos
            elseif($_REQUEST['file_id'] > 0 & $_REQUEST['act'] == 'edit_modal'){
                //get file info
                $file_id = $_REQUEST['file_id'];
                $file_info = PatientFileUpload::_get_patient_file($ipid,$file_id);

                $file_data = array();
                if(!empty($file_info)){
                    foreach($file_info as $k=>$fdata){
                        if($fdata['id'] == $file_id ){
                            $file_data['title'] = $fdata['title'];
                            $file_data['id'] = $fdata['id'];
                            $file_data['meta_name'] = $fdata['meta_name'];
                            $file_data['comment'] = $fdata['comment'];
                            $file_data['admission_id'] = $fdata['admission_id'];
                            foreach($fdata['PatientFile2tags'] as $tk=>$v_tag){
                                if($v_tag['tag'] != 1){
                                    $file_info[$k]['initialTags_arr'][] = $all_tagsids2names[$v_tag['tag']];
                                }
                            }
                            if(!empty($file_info[$k]['initialTags_arr'])){
                                $file_data['initialTags_arr'] =  $file_info[$k]['initialTags_arr'];
                                $file_data['initialTags'] =  implode(',',$file_info[$k]['initialTags_arr']);
                                $file_data['initialTags_js'] =  json_encode($file_info[$k]['initialTags_arr']);;
                            }
                        }
                    }
                }
                echo json_encode($file_data);
                exit;
            }
			// -- //

			// patient files tags rights
			$user = new User();
			$userarray = $user->getUserDetails($userid);
				
			//var_dump($userarray); exit;
			$this->view->patient_file_tag_rights = $userarray[0]['patient_file_tag_rights'];
			
			
			
			/*			 * ************************************ */

			if($this->getRequest()->isPost())
			{
 
			    if ( $_POST['post_action'] == 'update_file_data'  && ! empty($_POST['file_id'])  ){
			        $update_form = new Application_Form_PatientFileUpload();
			        // first, validate - or do not  save if filename is empty
			        $post = $_POST;
			        $post['ipid'] =$ipid;
			        $post['clientid'] = $clientid;
			        $post['userid'] = $userid;
			        $update_form->update_file_info($post);
			        
			    }
			    
			    $action_name = "upload_patient_files{$decid}";

			    $qquuid = $this->getRequest()->getPost('qquuid');
			    $qquuid_title = $this->getRequest()->getPost('qquuid_title');
			    $qquuid_tags= $this->getRequest()->getPost('qquuid_file2tag'); //ISPC-2642 Ancuta 10-11.08.2020
                $qquuid_meta_name = $this->getRequest()->getPost('qquuid_file_meta_name');//ISPC-2831 Dragos 15.03.2021
                $qquuid_admission_id = $this->getRequest()->getPost('qquuid_file_admission_id');//ISPC-2831 Dragos 15.03.2021
                $qquuid_comment = $this->getRequest()->getPost('qquuid_file_comment');//ISPC-2831 Dragos 15.03.2021
			    
			    if (is_array($qquuid) && ! empty($qquuid) && ($last_uploaded_files = $this->get_last_uploaded_file($action_name, $qquuid, $clientid))) {

			        
			        
			        $upload_form = new Application_Form_PatientFileUpload();
			        foreach ($qquuid as $k=>$qquuidID) {
			            
			            if (($last_uploaded_file = $last_uploaded_files[$qquuidID]) && $last_uploaded_file['isZipped'] == 1) {
			    
			                $file_name = pathinfo($last_uploaded_file['filepath'], PATHINFO_FILENAME) . "/" . $last_uploaded_file['fileInfo']['name'];
			                $file_type = strtoupper(pathinfo($last_uploaded_file['filename'], PATHINFO_EXTENSION));
			                if($this->getRequest()->getPost('active_version') != 0) //ISPC - 2129
			                {
				                $post = [
				                    'ipid'      => $ipid,
				                    'clientid'  => $clientid,
				                    'title'     => ! empty($qquuid_title[$k]) ? $qquuid_title[$k] : $last_uploaded_file['filename'] ,
				                    'filetype'  => $file_type,
				                    'file_name' => $file_name,
				                    'zipname'   => $last_uploaded_file['filepath'], //filepath
				                    'pat_files_tags_rights' => $userarray[0]['patient_file_tag_rights'],
				                    'tag_name'   => !empty($qquuid_tags[$k]) ? $qquuid_tags[$k] :  $this->getRequest()->getPost('tag_name'), //ISPC-2642 Ancuta 10-11.08.2020
				                	'active_version' => $this->getRequest()->getPost('active_version'),
                                    'meta_name' => ! empty($qquuid_meta_name[$k]) ? $qquuid_meta_name[$k] : null , //ISPC-2831 Dragos 15.03.2021
                                    'admission_id' => ! empty($qquuid_admission_id[$k]) ? $qquuid_admission_id[$k] : null , //ISPC-2831 Dragos 15.03.2021
                                    'comment' => ! empty($qquuid_comment[$k]) ? $qquuid_comment[$k] : null , //ISPC-2831 Dragos 15.03.2021

				                ];
				                
			                }
			                else 
			                {
			                	$post = [
		                			'ipid'      => $ipid,
		                			'clientid'  => $clientid,
		                			'title'     => ! empty($qquuid_title[$k]) ? $qquuid_title[$k] : $last_uploaded_file['filename'] ,
		                			'filetype'  => $file_type,
		                			'file_name' => $file_name,
		                			'zipname'   => $last_uploaded_file['filepath'], //filepath
		                			'pat_files_tags_rights' => $userarray[0]['patient_file_tag_rights'],
			                	    'tag_name'   => !empty($qquuid_tags[$k]) ? $qquuid_tags[$k] :  $this->getRequest()->getPost('tag_name'), //ISPC-2642 Ancuta 10-11.08.2020
			                		'active_version' => '0',
                                    //ISPC-2831 Dragos 15.03.2021
                                    'meta_name' => ! empty($qquuid_meta_name[$k]) ? $qquuid_meta_name[$k] : null ,
                                    'admission_id' => ! empty($qquuid_admission_id[$k]) ? $qquuid_admission_id[$k] : null ,
                                    'comment' => ! empty($qquuid_comment[$k]) ? $qquuid_comment[$k] : null ,
                                    // -- //

			                	];
			                	
			                }
			                $rec = $upload_form->insertData($post);
			                
    			            $this->delete_last_uploaded_file($action_name, $qquuidID, $clientid);
			            }
			            
			        }
			    }
			    
			    
// 				$ftype = $_SESSION['filetype'];
// 				if($ftype)
// 				{
// 					$filetypearr = explode("/", $ftype);
// 					if($filetypearr[1] == "vnd.openxmlformats-officedocument.spreadsheetml.sheet")
// 					{
// 						$filetype = "XLSX";
// 					}
// 					elseif($filetypearr[1] == "vnd.openxmlformats-officedocument.wordprocessingml.document")
// 					{
// 						$filetype = "docx";
// 					}
// 					elseif($filetypearr[1] == "X-OCTET-STREAM")
// 					{
// 						$filetype = "PDF";
// 					}
// 					else
// 					{
// 						$filetype = $filetypearr[1];
// 					}
// 				}

// 				$a_post = $_POST;
// 				$a_post['ipid'] = $ipid;
// 				$a_post['clientid'] = $clientid;
// 				$a_post['filetype'] = $_SESSION['filetype'];
				
// 				if($upload_form->validate($a_post))
// 				{
// 					$upload_form->insertData($a_post);
// 				}
// 				else
// 				{
// 					$upload_form->assignErrorMessages();
// 					$this->retainValues($_POST);
// 				}

				//remove session stuff
				$_SESSION['filename'] = '';
				$_SESSION['filetype'] = '';
				$_SESSION['filetitle'] = '';
				unset($_SESSION['filename']);
				unset($_SESSION['filetype']);
				unset($_SESSION['filetitle']);
			}
			
			//$client_tags = PatientFileTags::get_client_tags($clientid); //ISPC-2642 Ancuta 10.08.2020:: moved at the begining
			
			//TODO-2979 Ancuta 05.03.2020 
			if($client_tags === false){
			    $client_tags = array();
			}
			// -- 
			
			$this->view->client_tags = $client_tags;
			$restricted_tags = array();
			foreach($client_tags as $k_ctg => $v_ctg)
			{
				if($v_ctg['restricted'] == '1')
				{
					$restricted_tags[] = $v_ctg['tag'];
				}
			}

			
			//$system_tags = PatientFileTags::get_allclients_tags();//ISPC-2642 Ancuta 10-11.08.2020:: moved at the begining
			$this->view->system_tags = $system_tags;			
	
			foreach($system_tags as $k_tg => $v_tg)
			{
				if($v_tg['restricted'] == '1')
				{
					$restricted_tags[] = $v_tg['tag'];
				}
			}

			$this->view->restricted_tags = $restricted_tags;
			$this->view->restricted_tags_js = json_encode($restricted_tags);
			
			//ISPC - 2018
			//ISPC-2642 Ancuta 10-11.08.2020:: moved at the begining
			/* 
			$all_tags = array_merge($client_tags, $system_tags);
			foreach($all_tags as $k_tg => $v_tg)
			{				
					$all_tags_val[] = $v_tg['tag'];				
			}
			 */
			$this->view->all_tags = $all_tags_val;
			$this->view->all_tags_js = json_encode($all_tags_val);
			
			$files = new PatientFileUpload();
			$filearray = $files->getFileData($ipid);

			$file_array_ids[] = '999999999';
			foreach($filearray as $k_file => $v_file)
			{
				$file_array_ids[] = $v_file['id'];
			}

			//get all files tags
			$all_files_tags = PatientFile2tags::get_files_tags($file_array_ids);
			
			$all_files_tags_filter = [];//@cla
			
			foreach($all_files_tags as $k_file_id => $v_tags)
			{
				foreach($v_tags as $k_tag => $v_tag)
				{
					$all_files_tags_named[$k_file_id][$v_tag] = $client_tags[$v_tag]['tag'];
					
					$all_files_tags_filter[$v_tag] = [
					    'tag' => $v_tag,
					    'name' => (isset($client_tags[$v_tag]['tag']) ?  $system_tags[$v_tag]['tag'] : $system_tags[$v_tag]['tag']),
					    'count' => (isset($all_files_tags_filter[$v_tag]['count']) ? ++$all_files_tags_filter[$v_tag]['count'] : 1),
					];
				}
			}
			usort($all_files_tags_filter, array(new Pms_Sorter('count'), "_number_desc"));
			$_tmpArr = [];
			array_walk($all_files_tags_filter, function($item, $key) use(&$_tmpArr) { $_tmpArr[$item['tag']] = "{$item['name']} ({$item['count']})";});
// 			$all_files_tags_filter = $_tmpArr;
			
			
			$this->view->files_tags = $all_files_tags_named;
			$this->view->all_files_tags_filter = $all_files_tags_filter;
			

//			$grid = new Pms_Grid($filearray, 1, count($filearray), "listpatientfiles.html");
//			$this->view->patientfiles = $grid->renderGrid();

			/*			 * ******* Patient Information ************ */
// 			$patientmaster = new PatientMaster();
// 			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$tm = new TabMenus();
// 			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */

			if($_REQUEST['gen'])
			{
				$this->generatefilestags();
			}
            //ISPC-2831 Dragos 15.03.2021
			if ($_REQUEST['efa'] == 1) {
			    $this->view->efa = 1;
            }
            // -- //
		}
 
		
		public function patientfileremoveAction()
		{
			
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$isclient = Pms_CommonData::getPatientClient($decid, $clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			
			$this->_helper->viewRenderer->setNoRender();
			
			if($_GET['did'] > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('patientfileupload', $logininfo->userid, 'candelete');

				if(!$returnadd)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}
				
				$upload_form = new Application_Form_PatientFileUpload();
				$upload_form->deleteFile($_GET['did']);
				
				$factv = new PatientFileVersion();
				$fv = $factv->getTable()->findOneBy('file', $_GET['did'], Doctrine_Core::HYDRATE_RECORD);
				if(!empty($fv) ){
    				$fv->isdelete = '1';
    				$fv->save();
				}
				
				$this->_redirect("patient/patientfileupload?id=" . $_GET['id'].($_REQUEST['efa']==1?'&efa=1':'')); //ISPC-2831 Dragos 15.03.2021
			}
  
		}

		public function fetchpatientfileAction()
		{
			//$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $this->logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$this->view->pid = $_REQUEST['id'];
            //ISPC-2831 Dragos 15.03.2021
			$pat_adm = $_REQUEST['pat_adm'];
            $this->view->pat_adm = $pat_adm;
            //is this request from efa controller ?
            $this->view->efa = ($_REQUEST['efa'] == 1 ? 1 : 0);
            $modules = new Modules();
            $allow_tagbuttons = false;
            if($modules->checkModulePrivileges("234", $clientid))//Medication acknowledge ISPC - 1483
            {
                //ELSA FILES MODULE
                $allow_tagbuttons = true;
            }

            $this->view->allow_tagbuttons = $allow_tagbuttons? 1 : 0;
            // -- //

			$client_tags = PatientFileTags::get_client_tags($clientid, true);
			$this->view->client_tags = $client_tags;


			foreach($client_tags as $k_cltag => $v_cltag)
			{
				if($v_cltag['client'] == '0')
				{
					$sys_tags_limited[$k_cltag] = $v_cltag;
				}
				else
				{
					$cl_tags_limited[$k_cltag] = $v_cltag;
				}
			}


			$this->view->c_tags = $cl_tags_limited;
			$this->view->system_tags = $sys_tags_limited;

			$files = new PatientFileUpload();
			$patient_all_files = $files->getFileData($ipid);

			$patient_file_ids[] = '99999999';
			foreach($patient_all_files as $k_pat_file => $v_pat_file)
			{
				$patient_file_ids[] = $v_pat_file['id'];
			}

			$files_tags_arr = PatientFile2tags::get_files_tags($patient_file_ids);

			$files_tags[] = '99999999999999';
			foreach($files_tags_arr as $k_file => $v_tags)
			{
				$files_tags = array_merge($files_tags, $v_tags);
			}
			$existing_files_tags = array_values(array_unique($files_tags));

			$columnarray = array(
				"date" => "create_date",
				"title" => "title_sort",
				"name" => "meta_name", //ISPC-2831 Dragos 15.03.2021
				"comment" => "comment", //ISPC-2831 Dragos 15.03.2021
			);

			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");

			$this->view->order = $orderarray[$_REQUEST['ord']];
			$this->view->{$_REQUEST['clm'] . "order"} = $orderarray[$_REQUEST['ord']];

			$force_include_tabnames = [
			    'wounddocumentation_incr',
			    'wounddocumentation_uploaded_img',
			    'fallprotocolform_save',
			    WlAssessment::PATIENT_FILE_TABNAME,
			    PatientNutritionalStatus::PATIENT_FILE_TABNAME,
			    PatientBesd::PATIENT_FILE_TABNAME,
			    'acp_file_living_will',
			    'acp_file_care_orders',
			    'acp_file_healthcare_proxy',
			    MamboAssessment::PATIENT_FILE_TABNAME,
				PatientTreatmentPlan::PATIENT_FILE_TABNAME,
			];
			
			//all counter
			$cnt_filearray = Doctrine_Query::create()
			->select("count(*)")
			->from('PatientFileUpload')
			->where('ipid = ? ', $ipid)
			->andWhere('recordid = "0" OR  (recordid != "0" AND tabname IN ('. implode(', ', array_fill(0, count($force_include_tabnames), '?')) .') ) ', $force_include_tabnames);
			//ISPC-2831 Dragos 15.02.2021
			if(!empty($pat_adm)) {
                $cnt_filearray->andWhere('admission_id = ?', $pat_adm);
            }
            $cnt_filearray = $cnt_filearray->fetchArray();
            // -- //

			//results
			$patient_fl = Doctrine_Query::create()
				->from('PatientFileUpload pfu')
				->where('ipid = ?', $ipid)
				->andWhere('recordid = "0" OR  (recordid != "0" AND tabname in ('. implode(', ', array_fill(0, count($force_include_tabnames), '?')) .') ) ', $force_include_tabnames)
			;
            //ISPC-2831 Dragos 15.02.2021
            if(!empty($pat_adm)) {
                $patient_fl->andWhere('admission_id = ?', $pat_adm);
            }
			// -- //

			/*@cla*/
			$fileFilterTags = $this->getRequest()->getParam('fileFilterTags');
			if ( ! empty($fileFilterTags)) {
			    
			    $patient_fl->leftJoin('pfu.PatientFile2tags pf2t')
			    ->andWhereIn('pf2t.tag', $fileFilterTags);
			    
			    $cntFiltered = $patient_fl->select("count(*) as cnt")
			    ->fetchOne(null, Doctrine_Core::HYDRATE_ARRAY);
			    
			    $cntFiltered = $cntFiltered['cnt'];
			}
            //ISPC-2831 Dragos 15.03.2021 added meta_name and comment
			$patient_fl->select("*, AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
				AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') as file_name,
				AES_DECRYPT(file_type,'" . Zend_Registry::get('salt') . "') as file_type,
				AES_DECRYPT(meta_name,'" . Zend_Registry::get('salt') . "') as meta_name,
				AES_DECRYPT(comment,'" . Zend_Registry::get('salt') . "') as comment,
				IF(`system_generated` = '1', CONCAT('ISPC ',AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "')), AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "')) as title_sort");
				
				
			if ( ! empty($columnarray[$_REQUEST['clm']]) && $_REQUEST['clm'] != 'admission') { //ISPC-2831 Dragos 15.03.2021
			    $patient_fl->orderBy($columnarray[$_REQUEST['clm']] . " " . (! empty($_REQUEST['ord']) ? $_REQUEST['ord'] : 'DESC'));// Changed by Ancuta TODO-1980:: 14.12.2018
			    //$patient_fl->orderBy($columnarray[$_REQUEST['clm']] . " " . (! empty($orderarray[strtoupper($_REQUEST['ord'])]) ? $orderarray[strtoupper($_REQUEST['ord'])] : 'ASC'));
			}
			
			
			$limit =  $this->getRequest()->getParam('limit');
			$offsetPage =  $this->getRequest()->getParam('page');
			if ( ! empty($limit) && ! empty($offsetPage)) {
    			
    			$patient_fl->offset(($offsetPage - 1) * $limit);
    			$patient_fl->limit($limit);   
			}
			
			$filearray = Pms_CommonData::array_stripslashes($patient_fl->fetchArray());


			$this->view->existing_tags = $existing_files_tags;

			$file_array_ids[] = '999999999';
			foreach($filearray as $k_file => $v_file)
			{
				$file_array_ids[] = $v_file['id'];
			}

			//get all files tags
			$all_files_tags = PatientFile2tags::get_files_tags($file_array_ids);

			foreach($all_files_tags as $k_file_id => $v_tags)
			{
				foreach($v_tags as $k_tag => $v_tag)
				{
					$all_files_tags_named[$k_file_id][$v_tag] = $client_tags[$v_tag]['tag'];
				}
			}

            /* ISPC-2831 Dragos 15.02.2021
            * Get patient falls
           */
            $patient_falls = PatientReadmission::findFallsOfIpid($ipid);

            $selected_fall = 0; // this is fetched from post or get

            $last_fall_start_id = 0;

            $patient_falls_array = array();
            $this->view->patient_falls_array = array();
            $this->view->patient_falls_selectbox = array();//only to populate a formSelect


            foreach ($patient_falls as $fall) {

                $start = ! empty($fall['admission']['date']) && $fall['admission']['date'] != '0000-00-00' ? date('d.m.Y', strtotime($fall['admission']['date'])) : '' ;
                $end = ! empty($fall['discharge']['date']) && $fall['discharge']['date'] != '0000-00-00' ? date('d.m.Y', strtotime($fall['discharge']['date'])) : '' ;

                $patient_falls_array[$fall['admission']['id']] = array(
                    'start' => ! empty($fall['admission']['date']) && $fall['admission']['date'] != '0000-00-00' ? $fall['admission']['date'] : null,
                    'end' => ! empty($fall['discharge']['date']) && $fall['discharge']['date'] != '0000-00-00' ? $fall['discharge']['date'] : null,

                    'start_ID' => ! empty($fall['admission']['id']) ? $fall['admission']['id'] : null,
                    'end_ID' => ! empty($fall['discharge']['id']) ? $fall['discharge']['id'] : null,
                );

                $this->view->patient_falls_selectbox[$fall['admission']['id']] = $start . " - " . $end;

                $last_fall_start_id = $fall['admission']['id'];
            }
            $this->view->patient_falls_array = $patient_falls_array;

            if ( $_REQUEST['clm'] == 'admission') {
                usort ($filearray, function ($a,$b) use ($patient_falls_array) {
                    if ($patient_falls_array[$a['admission_id']]['admission']['date'] == $patient_falls_array[$b['admission_id']]['admission']['date']) {
                        return 0;
                    }
                    return $patient_falls_array[$a['admission_id']]['admission']['date'] < $patient_falls_array[$b['admission_id']]['admission']['date'] ? -1 : 1;
                });
                if ($_REQUEST['ord'] == 'DESC') {
                    $filearray = array_reverse($filearray);
                }
            }

            //  -- //

			$this->view->files_tags = $all_files_tags_named;

			$this->view->{"style" . $_GET['pgno']} = "active";
			if(count($filearray) > '0')
			{
				$grid = new Pms_Grid($filearray, 1, $cnt_filearray[0]['count'], "listpatientfiles.html");
				$this->view->patientfileslist = $grid->renderGrid();
				$this->view->navigation = $grid->dotnavigation("patientfilesnavigation.html", 15, $_REQUEST['pgno'], $limit);
			}
			else
			{
				//no items found
				$this->view->patientfileslist = '<tr><td colspan="6" style="text-align:center;">' . $this->view->translate('noresultfound') . '</td></tr>';
				$this->view->navigation = '';
			}

			
			
			
			if ($this->getParam('__action') == 'fetchMobileList') {
			    
			    if (empty($filearray)) {
			        
			        $this->returnDatatablesEmptyAndExit();
			        
			    } else {
    			    
    			    //return for the mobile version... just a plain json i can work with .. not hardcoded html
    			    $filearrayMobile = array_map(function($i) use ($all_files_tags_named){
    			         
//     			        $traffic_status = null;
//     			        if (in_array(6, $i['icons']['icons_system']) && ($this->logininfo->usertype == "SA" || in_array('6', $allowed_icons['system'])))
//     			        {
//     			            $traffic_status = [
//     			                'background' => $i['icon_data']['show']['color'],
//     			                'src'        => ! empty($i['icon_data']['show']['image']) ? 'icons_system/' . $i['icon_data']['show']['image'] : '',
//     			                'title'      => ! empty($i['icon_data']['show']['name']) ? $this->translate($i['icon_data']['show']['name']) : '',
    			                 
//     			            ];
//     			        }
    			        
    			        return [
    			            'id' => $i['id'],
    			            'title' => $i['title'],
    			            'title' => $i['title_sort'],
    			            'file_type' => $i['file_type'],
    			            'create_date' => $i['create_date'],
    			            'create_date_de' => date("d.m.Y H:i", strtotime($i['create_date'])),
    			            'tags' => isset($all_files_tags_named[$i['id']]) ? $all_files_tags_named[$i['id']] : null,
    			        ];}, $filearray);
    			
    			        $this->_helper->viewRenderer->setNoRender(true);
    			         
    			        $response = array();
    			        $response['draw'] = (int)$this->getRequest()->getParam('draw'); //? get the sent draw from data table
    			        $response['recordsTotal'] = $cnt_filearray[0]['count'];
    			        $response['recordsFiltered'] = isset($cntFiltered) ? $cntFiltered : $cnt_filearray[0]['count'];//count($patientsMobile);
    			        $response['data'] = $filearrayMobile;
    			
    			        ob_end_clean();
    			        ob_start();
    			
    			        $json = Zend_Controller_Action_HelperBroker::getStaticHelper('json');
    			        $json->sendJson($response);
    			         
    			        exit; //for readability
			    }
			}
			
			
			
			
			
			
			
			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['fileslist'] = $this->view->render('patient/fetchpatientfile.html');

			if($_REQUEST['dbgf'])
			{
				print_r("filearray\n");
				print_r($filearray);
				exit;
			}

			echo json_encode($response);
			exit;
		}

		private function generatefilestags()
		{
			set_time_limit(0);

//			if($_REQUEST['sys_tags'])
//			{
//				$clients = Client::get_all_clients_ids();
//				$sys_tab_names = Pms_CommonData::system_tags_tabname();
//
//				foreach($sys_tab_names as $v_tabname)
//				{
//					foreach($clients as $v_client)
//					{
//						$master_data[] = array(
//							'client' => $v_client,
//							'tabname' => $v_tabname,
//							'tag' => $this->view->translate($v_tabname),
//						);
//					}
//				}
//
//				$collection = new Doctrine_Collection('PatientFileTags');
//				$collection->fromArray($master_data);
//				$collection->save();
//			}

			if($_REQUEST['usr_gen'] == '1')
			{
				//tag all user uploaded files
				$patient_fl = Doctrine_Query::create()
					->select("id")
					->from('PatientFileUpload')
					->where('tabname = ""')
					->andWhere('recordid = "0"')
					->andWhere('system_generated = "0"')
					->andWhere('ipid != ""')
					->andWhere("convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) != ''")
					->andWhere("convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) NOT LIKE '%/brief_final_%'");
				$filearray = $patient_fl->fetchArray();

				foreach($filearray as $value)
				{
					$coll = new PatientFile2tags();
					$coll->file = $value['id'];
					$coll->tag = '1'; //user uploaded file tag
					$coll->save();
				}
			}
			else if($_REQUEST['usr_gen'] == '2')
			{
				$btm_patient_fl = Doctrine_Query::create()
					->select("id")
					->from('PatientFileUpload')
					->where('tabname = ""')
					->andWhere('recordid = "0"')
					->andWhere('system_generated = "1"')
					->andWhere('ipid != ""')
					->andWhere("convert(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%BTM Rezept%' OR convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/BTM_Receipt%'");
				$btm_filearray = $btm_patient_fl->fetchArray();

				foreach($btm_filearray as $btmvalue)
				{
					$coll = new PatientFile2tags();
					$coll->file = $btmvalue['id'];
					$coll->tag = '4'; //btm rezept file tag
					$coll->save();
				}

				$kv_patient_fl = Doctrine_Query::create()
					->select("id")
					->from('PatientFileUpload')
					->where('tabname = ""')
					->andWhere('recordid = "0"')
					->andWhere('system_generated = "1"')
					->andWhere('ipid != ""')
					->andWhere("convert(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%KV Rezept%' OR convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/Receipt%'");
				$kv_filearray = $kv_patient_fl->fetchArray();

				foreach($kv_filearray as $kvvalue)
				{
					$coll = new PatientFile2tags();
					$coll->file = $kvvalue['id'];
					$coll->tag = '3'; //kvrezept file tag
					$coll->save();
				}

				$mu_patient_fl = Doctrine_Query::create()
					->select("id")
					->from('PatientFileUpload')
					->where('tabname = ""')
					->andWhere('recordid = "0"')
					->andWhere('system_generated = "1"')
					->andWhere('ipid != ""')
					->andWhere("convert(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1) LIKE 'Muster 63' OR convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/verordnungtp.pdf%'");
				$mu_filearray = $mu_patient_fl->fetchArray();

				foreach($mu_filearray as $muvalue)
				{
					$coll = new PatientFile2tags();
					$coll->file = $muvalue['id'];
					$coll->tag = '5'; //muster63 file tag
					$coll->save();
				}

				$ctrl_patient_fl = Doctrine_Query::create()
					->select("id")
					->from('PatientFileUpload')
					->where('tabname = "" OR tabname = "sapvinvoice" || tabname = "sgbvinvoice"')
					->andWhere('recordid = "0"')
					->andWhere('system_generated = "1"')
					->andWhere('ipid != ""')
					->andWhere("convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/bresapvperformance.pdf'
						OR convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/SocialcodePdf.pdf'
						OR convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/PerformancePdf.pdf'
						OR convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/SAPVF_B8.pdf'");
				$ctrl_filearray = $ctrl_patient_fl->fetchArray();

				foreach($ctrl_filearray as $ctrlvalue)
				{
					$coll = new PatientFile2tags();
					$coll->file = $ctrlvalue['id'];
					$coll->tag = '6'; //leistung file tag
					$coll->save();
				}

				$nb_patient_fl = Doctrine_Query::create()
					->select("id")
					->from('PatientFileUpload')
					->where('tabname = ""')
					->andWhere('recordid = "0"')
					->andWhere('system_generated = "0"')
					->andWhere('ipid != ""')
					->andWhere("convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/brief_final_%'");
				$nb_filearray = $nb_patient_fl->fetchArray();

				foreach($nb_filearray as $nb_value)
				{
					$coll = new PatientFile2tags();
					$coll->file = $nb_value['id'];
					$coll->tag = '7'; //new brief uploaded file tag
					$coll->save();
				}

				$st_patient_fl = Doctrine_Query::create()
					->select("id")
					->from('PatientFileUpload')
					->where('tabname = ""')
					->andWhere('recordid = "0"')
					->andWhere('system_generated = "1"')
					->andWhere('ipid != ""')
					->andWhere("convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/Stammblatt.pdf'
						OR convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/PatientStammblattsapv.pdf'
						OR convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/Stammblatt3.pdf'
						OR convert(AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') using latin1) LIKE '%/Stammblat4.pdf'");
				$st_filearray = $st_patient_fl->fetchArray();

				foreach($st_filearray as $stvalue)
				{
					$coll = new PatientFile2tags();
					$coll->file = $stvalue['id'];
					$coll->tag = '8'; //stamblatt file tag
					$coll->save();
				}
			}
			elseif($_REQUEST['usr_gen'] == '3')
			{
				$sys_patient_fl = Doctrine_Query::create()
					->select("id")
					->from('PatientFileUpload')
					->andWhere('system_generated = "1"')
					->andWhere('ipid != ""');
				$sys_filearray = $sys_patient_fl->fetchArray();

				foreach($sys_filearray as $sysvalue)
				{
					$coll = new PatientFile2tags();
					$coll->file = $sysvalue['id'];
					$coll->tag = '2'; //system generated file tag
					$coll->save();
				}
			}
		}
		
		public function patientmedicationchangeAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$this->view->clientid = $clientid;
			$groupid = $logininfo->groupid;
			/* ######################################################### */

			$this->_helper->viewRenderer->setNoRender();

			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			
			

			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge ISPC - 1483
			{
			    $acknowledge = "1";
			    $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			    $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			    
			    if(in_array($userid,$approval_users)){
			        $this->view->approval_rights = "1";
			    }
			    else
			    {
			        $this->view->approval_rights = "0";
			    }
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			
			//ISPC-2829 Ancuta 18.03.2021
			if(!empty($_REQUEST['efaoption']) && $_REQUEST['efaoption'] == 1){
			    $acknowledge = 1;
			    $change_users = array($userid);
			}
			//--
			
			
			// get user details
			$master_user_details = new User();
			$users_details_arr = $master_user_details->getUserDetails($userid);
			$users_details = $users_details_arr[0];
			$user_name = $users_details['first_name'].' '.$users_details['last_name'];
				
			// get patient details
			$patient_details = PatientMaster::get_multiple_patients_details(array($ipid));
			$patient_name = $patient_details[$ipid]['first_name'] . ', ' . $patient_details[ $ipid]['last_name'];
			
			if(strlen($_GET['mid']) > 0)
			{
				if($acknowledge == "1"){
					if(in_array($userid,$change_users) || in_array($userid,$approval_users) || $logininfo->usertype == 'SA'){
						// do nothing
					} 
					else
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}
				}
				
				

				
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'candelete');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				if($acknowledge == "1" && !in_array($userid,$approval_users))
				{ 
				    if($_GET['act'] == "del")
				    {
				    
				        //delete medication
				        $mid = $_GET['mid'];
				        $mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
				         
				        // update PatientDrugPlanAlt
				        $remove = Doctrine_Query::create()
				        ->update('PatientDrugPlanAlt')
				        ->set('inactive', 1)
				        ->where("ipid = ?", $ipid)
				        ->andWhere("drugplan_id = ?", $mid);
				        $remove->execute();
				         
				        $insert_at = new PatientDrugPlanAlt();
				        $insert_at->ipid = $ipid;
				        $insert_at->drugplan_id = $mid;
				        $insert_at->dosage = $mod->dosage;
				        $insert_at->medication_master_id = $mod->medication_master_id;
				        $insert_at->isbedarfs =$mod->isbedarfs;
				        $insert_at->iscrisis =$mod->iscrisis;
				        $insert_at->isivmed = $mod->isivmed;
				        $insert_at->isschmerzpumpe = $mod->isschmerzpumpe;
				        $insert_at->cocktailid = $mod->cocktailid;
				        //ISPC-2833 Ancuta 26.02.2021
				        $insert_at->ispumpe = $mod->ispumpe;
				        $insert_at->pumpe_id = $mod->pumpe_id;
				        //--
				        $insert_at->treatment_care = $mod->treatment_care;
				        $insert_at->isnutrition = $mod->isnutrition;
				        $insert_at->isintubated = $mod->isintubated;// ISPC-2176
				        $insert_at->verordnetvon = $mod->verordnetvon;
				        $insert_at->comments = $mod->comments;
				        $insert_at->medication_change =  $mod->medication_change;
				        $insert_at->delete_date =  date("Y-m-d H:i:s");
				        $insert_at->status =  "delete";
				        $insert_at->save();
				        $recordid = $insert_at->id;
				        $recordid_alt = $insert_at->id;
				    
				       // OLD ENTRY
        				    // old medication name
        					//TODO-2785 Lore 18.02.2020			   
 							//$old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id );
				            if( $mod->treatment_care == 1 )
        				    {
        				        $old_med = Doctrine::getTable('MedicationTreatmentCare')->find($mod->medication_master_id);
        				    }
        				    elseif( $mod->isnutrition == 1 )
        				    {
        				        $old_med = Doctrine::getTable('Nutrition')->find($mod->medication_master_id);
        				    }
        				    else
        				    {
        				        $old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id);
        				    }
        				    $old_med_name = $old_med->name;
        				     
        				    // old dosage
        				    if($mod->dosage) {
        				        $old_med_dosage = $mod->dosage;
        				    }
        				     
        				    // old comment
        				    if($mod->comments ){
        				        $old_med_comments = $mod->comments." | ";
        				    }
        				    
        				    //  old medication date
        				    if($mod->medication_change != "0000-00-00 00:00:00")
        				    {
        				        $old_med_medication_change =  date('d.m.Y',strtotime($mod->medication_change));
        				    }
        				    else
        				    {
        				        if($mod->change_date != "0000-00-00 00:00:00")
        				        {
        				            $old_med_medication_change =  date('d.m.Y',strtotime($mod->change_date));
        				        }
        				        else
        				        {
        				            $old_med_medication_change =  date('d.m.Y',strtotime($mod->create_date));
        				        }
        				    }
        				     
        				    if(strlen($old_med_dosage)>0){
        				        $old_entry = $prefix.$old_med_name.' | '.$old_med_dosage." | ".$old_med_comments.$old_med_medication_change;
        				    } else	{
        				        $old_entry = $prefix.$old_med_name.' | '.$old_med_comments.$old_med_medication_change;
        				    }
        				    
        				    // SEND MESSAGE
        				    $text  = "";
        				    $text .= "Patient ".$patient_name." \n ";
        				    $text .= "Benutzer ".$user_name." änderte eine Medikation. Bitte bestätigen Sie dies. \n ";
        				    $text .= "Löschung: ".$old_entry . "   \n ";
        				    $mess = Messages::medication_acknowledge_messages($ipid,$text);
				         
        				    // CREATE TODO
        				    
        				    $text_todo  = "";
        				    $text_todo .= "Patient ".$patient_name." <br/>";
        				    $text_todo .= "Benutzer ".$user_name." änderte eine Medikation. Bitte bestätigen Sie dies. <br/>";
        				    $text_todo .= "Löschung: ".$old_entry . "   <br/>";
        				    
        				    $todos = Messages::medication_acknowledge_todo($ipid, $text_todo, $mid, $recordid);
        				    
        				    
				         
				        //delete cocktail if last medication from list is being deleted
				        if($mod)
				        {
				            $mDetails = $mod->toArray();
				        }
				    
				        if($mDetails['cocktailid'] > 0)
				        {
				            $cocktailsC = new PatientDrugPlanCocktails();
				            $cocktailsDrugs = $cocktailsC->countDrugsPerCocktail(array($mDetails['cocktailid']));
				    
				            if(count($cocktailsDrugs[$mDetails['cocktailid']]) == 0 && $_POST['btnsubmut'])
				            {
				                //if this is the last medication with isdelete 0 then we have to delete the cocktail
				                //changed, now we delete if we have 0 medis and submit button clicked
				                //set $mDetails->cocktailid to isdelete 1
				    
				                $cocktail = Doctrine::getTable('PatientDrugPlanCocktails')->find($cust->cocktailid);
				                $inser_calt =  new PatientDrugPlanAltCocktails();
				                $inser_calt->ipid = $ipid;
				                $inser_calt->userid = $userid;
				                $inser_calt->clientid = $clientid;
				                $inser_calt->drugplan_cocktailid = $cust->cocktailid;
				                $inser_calt->description = $cocktail->description;
				                $inser_calt->bolus = $cocktail->bolus;
				                $inser_calt->flussrate =$cocktail->flussrate;
				                $inser_calt->sperrzeit = $cocktail->sperrzeit;
				                $inser_calt->status = "delete";
				                $inser_calt->save();
				    
				                /* $cocktailQ = Doctrine::getTable('PatientDrugPlanCocktails')->findOneById($mDetails['cocktailid']);
				                 $cocktailQ->isdelete = 1;
				                $cocktailQ->save(); */
				            }
				        }
				         
				        //ISPC-2829 Ancuta 06.04.2021
				        if($_REQUEST['efaoption']== '1' && !empty($mod->source_drugplan_id) && !empty($mod->source_ipid)){
    				        // update PatientDrugPlanAlt
    				        $remove = Doctrine_Query::create()
    				        ->update('PatientDrugPlanAlt')
    				        ->set('inactive', 1)
    				        ->where("ipid = ?", $mod->source_ipid)
    				        ->andWhere("drugplan_id = ?", $mod->source_drugplan_id);
    				        $remove->execute();
    				         
    				        $insert_at = new PatientDrugPlanAlt();
    				        $insert_at->ipid = $mod->source_ipid;
    				        $insert_at->drugplan_id = $mod->source_drugplan_id;
    				        $insert_at->dosage = $mod->dosage;
    				        $insert_at->medication_master_id = $mod->medication_master_id;
    				        $insert_at->isbedarfs =$mod->isbedarfs;
    				        $insert_at->iscrisis =$mod->iscrisis;
    				        $insert_at->isivmed = $mod->isivmed;
    				        $insert_at->isschmerzpumpe = $mod->isschmerzpumpe;
    				        $insert_at->cocktailid = $mod->cocktailid;
    				        //ISPC-2833 Ancuta 26.02.2021
    				        $insert_at->ispumpe = $mod->ispumpe;
    				        $insert_at->pumpe_id = $mod->pumpe_id;
    				        //--
    				        $insert_at->treatment_care = $mod->treatment_care;
    				        $insert_at->isnutrition = $mod->isnutrition;
    				        $insert_at->isintubated = $mod->isintubated;// ISPC-2176
    				        $insert_at->verordnetvon = $mod->verordnetvon;
    				        $insert_at->comments = $mod->comments;
    				        $insert_at->medication_change =  $mod->medication_change;
    				        $insert_at->delete_date =  date("Y-m-d H:i:s");
    				        $insert_at->status =  "delete";
    				        
    				        $insert_at->related_drugplan_id =  "delete";
    				        $insert_at->related_alt_id =  "delete";
    				        
    				        
    				        $insert_at->related_drugplan_id = $mid;
    				        $insert_at->related_alt_id = $recordid_alt;
    				        
    				        $insert_at->save();
    				        $recordid = $insert_at->id;
    				    
    				       // OLD ENTRY
            				    // old medication name
            					//TODO-2785 Lore 18.02.2020			   
     							//$old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id );
    				            if( $mod->treatment_care == 1 )
            				    {
            				        $old_med = Doctrine::getTable('MedicationTreatmentCare')->find($mod->medication_master_id);
            				    }
            				    elseif( $mod->isnutrition == 1 )
            				    {
            				        $old_med = Doctrine::getTable('Nutrition')->find($mod->medication_master_id);
            				    }
            				    else
            				    {
            				        $old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id);
            				    }
            				    $old_med_name = $old_med->name;
            				     
            				    // old dosage
            				    if($mod->dosage) {
            				        $old_med_dosage = $mod->dosage;
            				    }
            				     
            				    // old comment
            				    if($mod->comments ){
            				        $old_med_comments = $mod->comments." | ";
            				    }
            				    
            				    //  old medication date
            				    if($mod->medication_change != "0000-00-00 00:00:00")
            				    {
            				        $old_med_medication_change =  date('d.m.Y',strtotime($mod->medication_change));
            				    }
            				    else
            				    {
            				        if($mod->change_date != "0000-00-00 00:00:00")
            				        {
            				            $old_med_medication_change =  date('d.m.Y',strtotime($mod->change_date));
            				        }
            				        else
            				        {
            				            $old_med_medication_change =  date('d.m.Y',strtotime($mod->create_date));
            				        }
            				    }
            				     
            				    if(strlen($old_med_dosage)>0){
            				        $old_entry = $prefix.$old_med_name.' | '.$old_med_dosage." | ".$old_med_comments.$old_med_medication_change;
            				    } else	{
            				        $old_entry = $prefix.$old_med_name.' | '.$old_med_comments.$old_med_medication_change;
            				    }
            				    
            				    // SEND MESSAGE
            				    $text  = "";
            				    $text .= "Patient ".$patient_name." \n ";
            				    $text .= "Benutzer ".$user_name." änderte eine Medikation. Bitte bestätigen Sie dies. \n ";
            				    $text .= "Löschung: ".$old_entry . "   \n ";
            				    $mess = Messages::medication_acknowledge_messages($ipid,$text);
    				         
            				    // CREATE TODO
            				    
            				    $text_todo  = "";
            				    $text_todo .= "Patient ".$patient_name." <br/>";
            				    $text_todo .= "Benutzer ".$user_name." änderte eine Medikation. Bitte bestätigen Sie dies. <br/>";
            				    $text_todo .= "Löschung: ".$old_entry . "   <br/>";
            				    
            				    $todos = Messages::medication_acknowledge_todo($ipid, $text_todo, $mid, $recordid);
            				    
            				    
    				         
    				        //delete cocktail if last medication from list is being deleted
    				        if($mod)
    				        {
    				            $mDetails = $mod->toArray();
    				        }
    				    
    				        if($mDetails['cocktailid'] > 0)
    				        {
    				            $cocktailsC = new PatientDrugPlanCocktails();
    				            $cocktailsDrugs = $cocktailsC->countDrugsPerCocktail(array($mDetails['cocktailid']));
    				    
    				            if(count($cocktailsDrugs[$mDetails['cocktailid']]) == 0 && $_POST['btnsubmut'])
    				            {
    				                //if this is the last medication with isdelete 0 then we have to delete the cocktail
    				                //changed, now we delete if we have 0 medis and submit button clicked
    				                //set $mDetails->cocktailid to isdelete 1
    				    
    				                $cocktail = Doctrine::getTable('PatientDrugPlanCocktails')->find($cust->cocktailid);
    				                $inser_calt =  new PatientDrugPlanAltCocktails();
    				                $inser_calt->ipid = $ipid;
    				                $inser_calt->userid = $userid;
    				                $inser_calt->clientid = $clientid;
    				                $inser_calt->drugplan_cocktailid = $cust->cocktailid;
    				                $inser_calt->description = $cocktail->description;
    				                $inser_calt->bolus = $cocktail->bolus;
    				                $inser_calt->flussrate =$cocktail->flussrate;
    				                $inser_calt->sperrzeit = $cocktail->sperrzeit;
    				                $inser_calt->status = "delete";
    				                $inser_calt->save();
    				    
    				                /* $cocktailQ = Doctrine::getTable('PatientDrugPlanCocktails')->findOneById($mDetails['cocktailid']);
    				                 $cocktailQ->isdelete = 1;
    				                $cocktailQ->save(); */
    				            }
    				        }
				            
				        }
				        
				    
				        $this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
				    
				        if($_REQUEST['noredir'])
				        {
				            exit;
				        }
				        $this->_redirect("patient/patientmedication?id=" . $_GET['id']);
				    }
				    elseif($_GET['act'] == "rnw")
				    {
				        
				        $mid = $_GET['mid'];
				        $mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
				         
				        // update PatientDrugPlanAlt
				        $remove = Doctrine_Query::create()
				        ->update('PatientDrugPlanAlt')
				        ->set('inactive', 1)
				        ->where("ipid = ?", $ipid)
				        ->andWhere("drugplan_id = ?", $mid);
				        $remove->execute();
				        	
				        $insert_at = new PatientDrugPlanAlt();
				        $insert_at->ipid = $ipid;
				        $insert_at->drugplan_id = $mid;
				        $insert_at->dosage = $mod->dosage;
				        $insert_at->medication_master_id = $mod->medication_master_id;
				        $insert_at->isbedarfs =$mod->isbedarfs;
				        $insert_at->isivmed = $mod->isivmed;
				        $insert_at->isschmerzpumpe = $mod->isschmerzpumpe;
				        $insert_at->cocktailid = $mod->cocktailid;
				        //ISPC-2833 Ancuta 26.02.2021
				        $insert_at->ispumpe = $mod->ispumpe;
				        $insert_at->pumpe_id = $mod->pumpe_id;
				        //-- 
				        $insert_at->treatment_care = $mod->treatment_care;
				        $insert_at->isnutrition = $mod->isnutrition;
				        $insert_at->isintubated = $mod->isintubated;//ISPC-2176
				        $insert_at->verordnetvon = $mod->verordnetvon;
				        $insert_at->comments = $mod->comments;
				        $insert_at->medication_change =  $mod->medication_change;
				        $insert_at->status = "renew";
				        $insert_at->save();
				        $recordid = $insert_at->id;
				    
				        // OLD ENTRY
				        // old medication name
						//TODO-2785 Lore 18.02.2020
				        //$old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id );
				        if( $mod->treatment_care == 1 )
				        {
				            $old_med = Doctrine::getTable('MedicationTreatmentCare')->find($mod->medication_master_id);
				        }
				        elseif( $mod->isnutrition == 1 )
				        {
				            $old_med = Doctrine::getTable('Nutrition')->find($mod->medication_master_id);
				        }
				        else
				        {
				            $old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id);
				        }
				        $old_med_name = $old_med->name;
				        	
				        // old dosage
				        if($mod->dosage) {
				            $old_med_dosage = $mod->dosage;
				        }
				        	
				        // old comment
				        if($mod->comments ){
				            $old_med_comments = $mod->comments." | ";
				        }
				        
				        //  old medication date
				        if($mod->medication_change != "0000-00-00 00:00:00")
				        {
				            $old_med_medication_change =  date('d.m.Y',strtotime($mod->medication_change));
				        }
				        else
				        {
				            if($mod->change_date != "0000-00-00 00:00:00")
				            {
				                $old_med_medication_change =  date('d.m.Y',strtotime($mod->change_date));
				            }
				            else
				            {
				                $old_med_medication_change =  date('d.m.Y',strtotime($mod->create_date));
				            }
				        }
				        	
				        if(strlen($old_med_dosage)>0){
				            $old_entry = $prefix.$old_med_name.' | '.$old_med_dosage." | ".$old_med_comments.$old_med_medication_change;
				        } else	{
				            $old_entry = $prefix.$old_med_name.' | '.$old_med_comments.$old_med_medication_change;
				        }
				        
				        // SEND MESSAGE
				        $text  = "";
				        $text .= "Patient ".$patient_name." \n ";
				        $text .= "Benutzer ".$user_name." änderte eine Medikation. Bitte bestätigen Sie dies. \n ";
				        $text .= "Wieder Ansetzen: ".$old_entry . "   \n ";
				        $mess = Messages::medication_acknowledge_messages($ipid,$text);
				        

				        // CREATE TODO
				        $text_todo  = "";
				        $text_todo .= "Patient ".$patient_name." <br/>";
				        $text_todo .= "Benutzer ".$user_name." änderte eine Medikation. Bitte bestätigen Sie dies. <br/>";
				        $text_todo .= "Wieder Ansetzen: ".$old_entry . "   <br/>";
				        
				        $todos = Messages::medication_acknowledge_todo($ipid, $text_todo, $mid, $recordid);
				        
				        
				        //renew medication
				        /*$mid = $_GET['mid'];
				        $mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
				        $mod->isdelete = 0;
				        $mod->medication_change = date("Y-m-d H:i:s", time());
				        $mod->change_date = date("Y-m-d H:i:s", time());
				        $mod->change_user = $logininfo->userid;
				        $mod->save();*/
				    
				        $this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
				        if($_REQUEST['noredir'])
				        {
				        exit;
				    }
        					$this->_redirect("patient/patientmedication?id=" . $_GET['id']);
				    }				    
				    
				    
				}
				else
				{
				    
    				if($_GET['act'] == "del")
    				{
    					//delete medication
    					$mid = $_GET['mid'];
    					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
    
    					//delete cocktail if last medication from list is being deleted
    					if($mod)
    					{
    						$mDetails = $mod->toArray();
    					}
    
    					if($mDetails['cocktailid'] > 0)
    					{
    						$cocktailsC = new PatientDrugPlanCocktails();
    						$cocktailsDrugs = $cocktailsC->countDrugsPerCocktail(array($mDetails['cocktailid']));
    
    						if(count($cocktailsDrugs[$mDetails['cocktailid']]) == 0 && $_POST['btnsubmut'])
    						{
    							//if this is the last medication with isdelete 0 then we have to delete the cocktail
    							//changed, now we delete if we have 0 medis and submit button clicked
    							//set $mDetails->cocktailid to isdelete 1
    							$cocktailQ = Doctrine::getTable('PatientDrugPlanCocktails')->findOneById($mDetails['cocktailid']);
    							$cocktailQ->isdelete = 1;
    							$cocktailQ->save();
    						}
    					}
    
    					/* ============= Save in Patient drug plan history========================= */
						//TODO-2785 Lore 18.02.2020
    					//$old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id);
    					if( $mod->treatment_care == 1 )
    					{
    					    $old_med = Doctrine::getTable('MedicationTreatmentCare')->find($mod->medication_master_id);
    					}
    					elseif( $mod->isnutrition == 1 )
    					{
    					    $old_med = Doctrine::getTable('Nutrition')->find($mod->medication_master_id);
    					}
    					else
    					{
    					    $old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id);
    					}
    					$medication_old_medication_name = $old_med->name;
    
    					$history = new PatientDrugPlanHistory();
    					$history->ipid = $ipid;
    					$history->pd_id = $mod->id;
    					$history->pd_medication_master_id = $mod->medication_master_id;
    					$history->pd_medication_name = $medication_old_medication_name;
    					$history->pd_medication = $mod->medication;
    					$history->pd_dosage = $mod->dosage;
    					$history->pd_comments = $mod->comments;
    					$history->pd_isbedarfs = $mod->isbedarfs;
    					$history->pd_treatment_care = $mod->treatment_care;
    					$history->pd_isnutrition = $mod->isnutrition;
    					$history->pd_isintubated = $mod->isintubated; // ISPC-2176
    					$history->pd_isivmed = $mod->isivmed;
    					$history->pd_isschmerzpumpe = $mod->isschmerzpumpe;
    					$history->pd_cocktailid = $mod->cocktailid;
    					//ISPC-2833 Ancuta 26.02.2021
    					$history->pd_ispumpe = $mod->ispumpe;
    					$history->pd_pumpe_id = $mod->pumpe_id;
    					//--
    					$history->pd_edit_type = $mod->edit_type;
    					$history->pd_verordnetvon = $mod->verordnetvon;
    					$history->pd_medication_change = $mod->medication_change;
    					$history->pd_create_date = $mod->create_date;
    					$history->pd_create_user = $mod->create_user;
    					$history->pd_change_date = $mod->change_date;
    					$history->pd_change_user = $mod->change_user;
    					$history->pd_isdelete = $mod->isdelete;
    					$history->pd_delete_date = $mod->delete_date;
    					$history->save();
    
    					
    					$history_id = $history->id;
    					 
    					$dosage_history_array[$mid] = PatientDrugPlanDosage::get_all_patient_drugplan_dosage($ipid,$mid);

    					if(!empty($dosage_history_array[$mid]))
    					{
    					    // add dosage to - dosage history
    					    foreach($dosage_history_array[$mid] as $k=>$dv)
    					    {
    					        $history_pd = new PatientDrugPlanDosageHistory();
    					        $history_pd->ipid = $ipid;
    					        $history_pd->pdd_id = $dv['id'];
    					        $history_pd->history_id = $history_id;
    					        $history_pd->pdd_drugplan_id = $dv['drugplan_id'];
    					        $history_pd->pdd_dosage = $dv['dosage'];
    					        $history_pd->pdd_dosage_concentration = $dv['dosage_concentration'];//TODO-3624 Ancuta 23.11.2020
    					        $history_pd->pdd_dosage_time_interval =  $dv['dosage_time_interval'];
    					        $history_pd->pdd_isdelete	= $dv['isdelete'];
    					        $history_pd->pdd_create_user = $dv['create_user'];
    					        $history_pd->pdd_create_date = $dv['create_date'];
    					        $history_pd->pdd_change_user = $dv['change_user'];
    					        $history_pd->pdd_change_date = $dv['change_date'];
    					        $history_pd->save();
    					    }
    					}
    						
    						
    					$extra_history_array = PatientDrugPlanExtra::get_patient_all_drugplan_extra($ipid,$mid);
    						
    					if(!empty($extra_history_array[$mid]))
    					{
    					    $extra_data = $extra_history_array[$mid];
    					    
					        $history_pde = new PatientDrugPlanExtraHistory();
					        $history_pde->ipid = $ipid;
					        $history_pde->pde_id = $extra_data['id'];
					        $history_pde->history_id = $history_id;
					        	
// 					        $history_pde->pde_drugplan_id = $dv['drugplan_id'];;
					        $history_pde->pde_drugplan_id = $mid;
					        $history_pde->pde_drug = $extra_data['drug'];
					        $history_pde->pde_unit = $extra_data['unit'];
					        $history_pde->pde_type = $extra_data['type'];
					        $history_pde->pde_indication = $extra_data['indication'];
					        $history_pde->pde_importance = $extra_data['importance'];
					        $history_pde->pde_isdelete	= $extra_data['isdelete'];
					        	
					        $history_pde->pde_create_user = $extra_data['create_user'];
					        $history_pde->pde_create_date = $extra_data['create_date'];
					        $history_pde->pde_change_user = $extra_data['change_user'];
					        $history_pde->pde_change_date = $extra_data['change_date'];
					        $history_pde->save();
    					}
    					
    					//continue and delete the medication
    					$mod->medication_change = date("Y-m-d H:i:s", time());
    					$mod->isdelete = 1;
    					$mod->delete_date =  date("Y-m-d H:i:s");
    					$mod->save();
    					
 
    					//TODO-3462 Ancuta 19.10.2020
    					//delete pharma requests
    					$exists_in_pharma = Doctrine_Query::create()
    					->select('*')
    					->from('PharmaPatientRequests')
    					->where('ipid = ?',$ipid)
    					->andWhere('drugplan_id = ?',$mid)
    					->fetchArray();
 
    					if(!empty($exists_in_pharma)){
    					    foreach( $exists_in_pharma as $k=>$ph_line){
    					        $mpd = Doctrine::getTable('PharmaPatientRequests')->find($ph_line['id']);
    					        $mpd->isdelete = 1;
    					        $mpd->save();
    					    }
    					}
    					// -- 
    					
    					
    					
    
    					//TODO-2850 ISPC: Todo is not marked as ready
    					if(in_array($userid,$approval_users)){
    					    $text_todo ="";
    					    $todos = Messages::remove_medication_acknowledge_todo($ipid, $text_todo,$mid);
    					    
    					}
    					//--
    					
    					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
    
    					if($_REQUEST['noredir'])
    					{
    					    if (isset($_GET['_deleted_medis_contactform_cid']) && empty((int)$_GET['_deleted_medis_contactform_cid'])) {
    					        //save to session ... because this is a new contactform.. so we can post back after you save this new cf
    					        $session_prop = isset($_GET['_cfhiddennounce']) && ! empty($_GET['_cfhiddennounce']) ? $_GET['_cfhiddennounce'] : null;
    					        	
    					        if ($session_prop) {
    					            $deleted_medis_contactform_cid_patientcourse_id = new Zend_Session_Namespace('deleted_medis_contactform_cid_patientcourse_id');
    					    
    					            $response['msg'] = "Success";
    					            $response['error'] = "";
    					            $response['callBack'] = "deleted_medis_contactform_cid_patientcourse_id";
    					            $response['callBackParameters'] = $deleted_medis_contactform_cid_patientcourse_id->$session_prop;
    					    
    					            $deleted_medis_contactform_cid_patientcourse_id->$session_prop = null;
    					    
    					            echo json_encode($response);
    					        }
    					    }
    					    
    						exit;
    					}
    					$this->_redirect("patient/patientmedication?id=" . $_GET['id']);
    				}
    				elseif($_GET['act'] == "rnw")
    				{
    
    					//renew medication
    					$mid = $_GET['mid'];
    					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
    					/* ============= Save in Patient drug plan history========================= */
    					$old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id);
    					$medication_old_medication_name = $old_med->name;
    					$history = new PatientDrugPlanHistory();
    					$history->ipid = $ipid;
    					$history->pd_id = $mod->id;
    					$history->pd_medication_master_id = $mod->medication_master_id;
    					$history->pd_medication_name = $medication_old_medication_name;
    					$history->pd_medication = $mod->medication;
    					$history->pd_dosage = $mod->dosage;
    					$history->pd_comments = $mod->comments;
    					$history->pd_isbedarfs = $mod->isbedarfs;
    					$history->pd_isivmed = $mod->isivmed;
    					$history->pd_isschmerzpumpe = $mod->isschmerzpumpe;
    					$history->pd_cocktailid = $mod->cocktailid;
    					//ISPC-2833 Ancuta 26.02.2021
    					$history->pd_ispumpe = $mod->ispumpe;
    					$history->pd_pumpe_id = $mod->pumpe_id;
    					//--
    					$history->pd_treatment_care = $mod->treatment_care;
    					$history->pd_isnutrition = $mod->isnutrition;
    					$history->pd_isintubated = $mod->isintubated;// ISPC-2176
    					$history->pd_edit_type = $mod->edit_type;
    					$history->pd_verordnetvon = $mod->verordnetvon;
    					$history->pd_medication_change = $mod->medication_change;
    					$history->pd_create_date = $mod->create_date;
    					$history->pd_create_user = $mod->create_user;
    					$history->pd_change_date = $mod->change_date;
    					$history->pd_change_user = $mod->change_user;
    					$history->pd_isdelete = $mod->isdelete;
    					$history->save();
    					$history_id  = $history->id;
    					
    					$dosage_history_array[$mid] = PatientDrugPlanDosage::get_all_patient_drugplan_dosage($ipid,$mid);
    					
					    if(!empty($dosage_history_array[$mid]))
					    {
					        // add dosage to - dosage history
					        foreach($dosage_history_array[$mid] as $k=>$dv)
					        {
					            $history_pd = new PatientDrugPlanDosageHistory();
					            $history_pd->ipid = $ipid;
					            $history_pd->pdd_id = $dv['id'];
					            $history_pd->history_id = $history_id;
					            $history_pd->pdd_drugplan_id = $dv['drugplan_id'];
					            $history_pd->pdd_dosage = $dv['dosage'];
					            $history_pd->pdd_dosage_concentration = $dv['dosage_concentration'];//TODO-3624 Ancuta 23.11.2020
					            $history_pd->pdd_dosage_time_interval =  $dv['dosage_time_interval'];
					            $history_pd->pdd_isdelete	= $dv['isdelete'];
					            $history_pd->pdd_create_user = $dv['create_user'];
					            $history_pd->pdd_create_date = $dv['create_date'];
					            $history_pd->pdd_change_user = $dv['change_user'];
					            $history_pd->pdd_change_date = $dv['change_date'];
					            $history_pd->save();
					        }
					    }
    					
    					$extra_history_array = PatientDrugPlanExtra::get_patient_all_drugplan_extra($ipid,$mid);
    					
    					if(!empty($extra_history_array[$mid]))
    					{
    					    $extra_data = $extra_history_array[$mid];
    					
					        $history_pde = new PatientDrugPlanExtraHistory();
					        $history_pde->ipid = $ipid;
					        $history_pde->pde_id = $extra_data['id'];
					        $history_pde->history_id = $history_id;
					
// 					        $history_pde->pde_drugplan_id = $dv['drugplan_id'];
					        $history_pde->pde_drugplan_id = $mid;
					        $history_pde->pde_drug = $extra_data['drug'];
					        $history_pde->pde_unit = $extra_data['unit'];
					        $history_pde->pde_type = $extra_data['type'];
					        $history_pde->pde_indication = $extra_data['indication'];
					        $history_pde->pde_importance = $extra_data['importance'];
					        $history_pde->pde_isdelete	= $extra_data['isdelete'];
					
					        $history_pde->pde_create_user = $extra_data['create_user'];
					        $history_pde->pde_create_date = $extra_data['create_date'];
					        $history_pde->pde_change_user = $extra_data['change_user'];
					        $history_pde->pde_change_date = $extra_data['change_date'];
					        $history_pde->save();
    					}
    					
    					
    					
    					$mod->isdelete = 0;
    					$mod->medication_change = date("Y-m-d H:i:s", time());
    					$mod->change_date = date("Y-m-d H:i:s", time());
    					$mod->change_user = $logininfo->userid;
    					$mod->save();
    
    					//TODO-2850 ISPC: Todo is not marked as ready
    					if(in_array($userid,$approval_users)){
    					    $text_todo ="";
    					    $todos = Messages::remove_medication_acknowledge_todo($ipid, $text_todo,$mid);
    					    
    					}
    					//--
    					
    
    					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
    					if($_REQUEST['noredir'])
    					{
    					    
    					    if (isset($_GET['_deleted_medis_contactform_cid']) && empty((int)$_GET['_deleted_medis_contactform_cid'])) {
    					        //save to session ... because this is a new contactform.. so we can post back after you save this new cf
    					        $session_prop = isset($_GET['_cfhiddennounce']) && ! empty($_GET['_cfhiddennounce']) ? $_GET['_cfhiddennounce'] : null;
    					        	
    					        if ($session_prop) {
    					            $deleted_medis_contactform_cid_patientcourse_id = new Zend_Session_Namespace('deleted_medis_contactform_cid_patientcourse_id');
    					    
    					            $response['msg'] = "Success";
    					            $response['error'] = "";
    					            $response['callBack'] = "deleted_medis_contactform_cid_patientcourse_id";
    					            $response['callBackParameters'] = $deleted_medis_contactform_cid_patientcourse_id->$session_prop;
    					    
    					            $deleted_medis_contactform_cid_patientcourse_id->$session_prop = null;
    					    
    					            echo json_encode($response);
    					        }
    					    }
    					    
    						exit;
    					}
    					elseif($_REQUEST['newredir'])
    					{
        					$this->_redirect("patientnew/medication?id=" . $_GET['id']);
        					exit;
        					
    					}
    					$this->_redirect("patient/patientmedication?id=" . $_GET['id']);
    				}
    			}
			}
		}
		
		
		public function patientmedicationAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$userid = $logininfo->userid;
			$this->view->userid= $userid;
			$groupid = $logininfo->groupid;
			/* ######################################################### */


			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge ISPC - 1483
			{
			    $acknowledge = "1";
                $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
                $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
                
                if(in_array($userid,$approval_users)){
                    $this->view->approval_rights = "1";
                }
                else
                {
                    $this->view->approval_rights = "0";
                }
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
				
			
			// get user details
			$master_user_details = new User();
			$users_details_arr = $master_user_details->getUserDetails($userid);
			$users_details = $users_details_arr[0];
			$user_name = $users_details['first_name'].' '.$users_details['last_name'];
			
			// get patient details
			$patient_details = PatientMaster::get_multiple_patients_details(array($ipid));
			$patient_name = $patient_details[$ipid]['first_name'] . ', ' . $patient_details[ $ipid]['last_name'];
			
			
			$btm_perms = new BtmGroupPermissions();
			if($logininfo->usertype != 'SA')
			{
				$btm_permisions = $btm_perms->get_group_permissions($clientid, Usergroup::getMasterGroup($groupid));
				if($btm_permisions['use'] == '1')
				{
					$this->view->has_btm_permission = '1';
				}
				else
				{
					$this->view->has_btm_permission = '0';
				}
			}
			else
			{
				$this->view->has_btm_permission = '1';
			}

			
			
			if(strlen($_GET['mid']) > 0)
			{
				$logininfo = new Zend_Session_Namespace('Login_Info');

				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'candelete');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}
				
				if($acknowledge == "1"){
					if(in_array($userid,$change_users) || in_array($userid,$approval_users) || $logininfo->usertype == 'SA'){
						// do nothing
					} 
					else
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}
				}
				
    				if($acknowledge == "1" && !in_array($userid,$approval_users))
    				{
        				if($_GET['act'] == "del")
        				{
        				    
        					//delete medication
        					$mid = $_GET['mid'];
        					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
        					
        					
        					// update PatientDrugPlanAlt
        					$remove = Doctrine_Query::create()
        					->update('PatientDrugPlanAlt')
        					->set('inactive', 1)
        					->where("ipid = ?", $ipid)
        					->andWhere("drugplan_id = ?", $mid);
        					$remove->execute();
        					
        					
        					$insert_at = new PatientDrugPlanAlt();
        					$insert_at->ipid = $ipid;
        					$insert_at->drugplan_id = $mid;
        					$insert_at->dosage = $mod->dosage;
        					$insert_at->medication_master_id = $mod->medication_master_id;
        					$insert_at->isbedarfs =$mod->isbedarfs;
        					$insert_at->isivmed = $mod->isivmed;
        					$insert_at->isschmerzpumpe = $mod->isschmerzpumpe;
        					$insert_at->cocktailid = $mod->cocktailid;
        					//ISPC-2833 Ancuta 26.02.2021
        					$insert_at->ispumpe = $mod->ispumpe;
        					$insert_at->pumpe_id = $mod->pumpe_id;
        					//-- 
        					$insert_at->treatment_care = $mod->treatment_care;
        					$insert_at->isnutrition = $mod->isnutrition;
        					$insert_at->verordnetvon = $mod->verordnetvon;
        					$insert_at->comments = $mod->comments;
        					$insert_at->medication_change =  $mod->medication_change;
        					$insert_at->status =  "delete";
        					$insert_at->save();
        					$recordid = $insert_at->id;
       					
        					// OLD ENTRY
        					// old medication name
        					$old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id );
        					$old_med_name = $old_med->name;
        					
        					// old dosage
        					if($mod->dosage) {
        					    $old_med_dosage = $mod->dosage;
        					}
        					
        					// old comment
        					if($mod->comments ){
        					    $old_med_comments = $mod->comments." | ";
        					}
        					 
        					//  old medication date
        					if($mod->medication_change != "0000-00-00 00:00:00")
        					{
        					    $old_med_medication_change =  date('d.m.Y',strtotime($mod->medication_change));
        					}
        					else
        					{
        					    if($mod->change_date != "0000-00-00 00:00:00")
        					    {
        					        $old_med_medication_change =  date('d.m.Y',strtotime($mod->change_date));
        					    }
        					    else
        					    {
        					        $old_med_medication_change =  date('d.m.Y',strtotime($mod->create_date));
        					    }
        					}
        					
        					if(strlen($old_med_dosage)>0){
        					    $old_entry = $prefix.$old_med_name.' | '.$old_med_dosage." | ".$old_med_comments.$old_med_medication_change;
        					} else	{
        					    $old_entry = $prefix.$old_med_name.' | '.$old_med_comments.$old_med_medication_change;
        					}

        					// SEND MESSAGE
        					$text  = "";
        					$text .= "Patient ".$patient_name." \n ";
        					$text .= "Benutzer ".$user_name." änderte eine Medikation. Bitte bestätigen Sie dies. \n ";
        					$text .= "Löschung: ".$old_entry . "   \n ";
        					$mess = Messages::medication_acknowledge_messages($ipid,$text);

        					// CREATE TODO
        					$text_todo  = "";
        					$text_todo .= "Patient ".$patient_name." <br/>";
        					$text_todo .= "Benutzer ".$user_name." änderte eine Medikation. Bitte bestätigen Sie dies. <br/>";
        					$text_todo .= "Löschung: ".$old_entry . "   <br/>";
        					
        					$todos = Messages::medication_acknowledge_todo($ipid, $text_todo, $mid, $recordid);
        					
        					
        					
        					//delete cocktail if last medication from list is being deleted
        					if($mod)
        					{
        						$mDetails = $mod->toArray();
        					}
        
        					if($mDetails['cocktailid'] > 0)
        					{
        						$cocktailsC = new PatientDrugPlanCocktails();
        						$cocktailsDrugs = $cocktailsC->countDrugsPerCocktail(array($mDetails['cocktailid']));
        
        						if(count($cocktailsDrugs[$mDetails['cocktailid']]) == 0 && $_POST['btnsubmut'])
        						{
        							//if this is the last medication with isdelete 0 then we have to delete the cocktail
        							//changed, now we delete if we have 0 medis and submit button clicked
        							//set $mDetails->cocktailid to isdelete 1
        						    
        						    $cocktail = Doctrine::getTable('PatientDrugPlanCocktails')->find($cust->cocktailid);
        						    $inser_calt =  new PatientDrugPlanAltCocktails();
        						    $inser_calt->ipid = $ipid;
        						    $inser_calt->userid = $userid;
        						    $inser_calt->clientid = $clientid;
        						    $inser_calt->drugplan_cocktailid = $cust->cocktailid;
        						    $inser_calt->description = $cocktail->description;
        						    $inser_calt->bolus = $cocktail->bolus;
        						    $inser_calt->flussrate =$cocktail->flussrate; 
        						    $inser_calt->sperrzeit = $cocktail->sperrzeit;
        						    $inser_calt->status = "delete";
        						    $inser_calt->save();
        						    
        							/* $cocktailQ = Doctrine::getTable('PatientDrugPlanCocktails')->findOneById($mDetails['cocktailid']);
        							$cocktailQ->isdelete = 1;
        							$cocktailQ->save(); */
        						}
        					}
        					
        
        					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
        
        					if($_REQUEST['noredir'])
        					{
        					    if (isset($_GET['_deleted_medis_contactform_cid']) && empty((int)$_GET['_deleted_medis_contactform_cid'])) {
        					        //save to session ... because this is a new contactform.. so we can post back after you save this new cf
        					        $session_prop = isset($_GET['_cfhiddennounce']) && ! empty($_GET['_cfhiddennounce']) ? $_GET['_cfhiddennounce'] : null;
        					    
        					        if ($session_prop) {
        					            $deleted_medis_contactform_cid_patientcourse_id = new Zend_Session_Namespace('deleted_medis_contactform_cid_patientcourse_id');
        					            	
        					            $response['msg'] = "Success";
        					            $response['error'] = "";
        					            $response['callBack'] = "deleted_medis_contactform_cid_patientcourse_id";
        					            $response['callBackParameters'] = $deleted_medis_contactform_cid_patientcourse_id->$session_prop;
        					            	
        					            $deleted_medis_contactform_cid_patientcourse_id->$session_prop = null;
        					            	
        					            echo json_encode($response);
        					        }
        					    }
        					    
        						exit;
        					}
        					$this->_redirect("patient/patientmedication?id=" . $_GET['id']);
        				}
        				elseif($_GET['act'] == "rnw")
        				{
        				    $mid = $_GET['mid'];
        				    $mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
        				    
        				    // update PatientDrugPlanAlt
        				    $remove = Doctrine_Query::create()
        				    ->update('PatientDrugPlanAlt')
        				    ->set('inactive', 1)
        				    ->where("ipid = ?", $ipid)
        				    ->andWhere("drugplan_id = ?", $mid);
        				    $remove->execute();
        				     
        				    $insert_at = new PatientDrugPlanAlt();
        				    $insert_at->ipid = $ipid;
        				    $insert_at->drugplan_id = $mid;
        				    $insert_at->dosage = $mod->dosage;
        				    $insert_at->medication_master_id = $mod->medication_master_id;
        				    $insert_at->isbedarfs =$mod->isbedarfs;
        				    $insert_at->isivmed = $mod->isivmed;
        				    $insert_at->isschmerzpumpe = $mod->isschmerzpumpe;
        				    $insert_at->cocktailid = $mod->cocktailId;
        				    //ISPC-2833 Ancuta 26.02.2021
        				    $insert_at->ispumpe = $mod->ispumpe;
        				    $insert_at->pumpe_id = $mod->pumpe_id;
        				    //-- 
        				    $insert_at->treatment_care = $mod->treatment_care;
        				    $insert_at->isnutrition = $mod->isnutrition;
        				    $insert_at->verordnetvon = $mod->verordnetvon;
        				    $insert_at->comments = $mod->comments;
        				    $insert_at->medication_change =  $mod->medication_change;
        				    $insert_at->status = "renew";
        				    $insert_at->save();
        				    $recordid = $insert_at->id;
        				    
        				    
        				    // OLD ENTRY
        				    // old medication name
        				    $old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id );
        				    $old_med_name = $old_med->name;
        				     
        				    // old dosage
        				    if($mod->dosage) {
        				        $old_med_dosage = $mod->dosage;
        				    }
        				     
        				    // old comment
        				    if($mod->comments ){
        				        $old_med_comments = $mod->comments." | ";
        				    }
        				    
        				    //  old medication date
        				    if($mod->medication_change != "0000-00-00 00:00:00")
        				    {
        				        $old_med_medication_change =  date('d.m.Y',strtotime($mod->medication_change));
        				    }
        				    else
        				    {
        				        if($mod->change_date != "0000-00-00 00:00:00")
        				        {
        				            $old_med_medication_change =  date('d.m.Y',strtotime($mod->change_date));
        				        }
        				        else
        				        {
        				            $old_med_medication_change =  date('d.m.Y',strtotime($mod->create_date));
        				        }
        				    }
        				     
        				    if(strlen($old_med_dosage)>0){
        				        $old_entry = $prefix.$old_med_name.' | '.$old_med_dosage." | ".$old_med_comments.$old_med_medication_change;
        				    } else	{
        				        $old_entry = $prefix.$old_med_name.' | '.$old_med_comments.$old_med_medication_change;
        				    }
        				    
        				    // SEND MESSAGE
        				    $text  = "";
        				    $text .= "Patient ".$patient_name." \n ";
        				    $text .= "Benutzer ".$user_name." änderte eine Medikation. Bitte bestätigen Sie dies. \n ";
        				    $text .= "Wieder Ansetzen: ".$old_entry . "   \n ";
        				    $mess = Messages::medication_acknowledge_messages($ipid,$text);
        				    

        				    // CREATE TODO
        				    $text_todo  = "";
        				    $text_todo .= "Patient ".$patient_name." <br/>";
        				    $text_todo .= "Benutzer ".$user_name." änderte eine Medikation. Bitte bestätigen Sie dies. <br/>";
        				    $text_todo .= "Wieder Ansetzen: ".$old_entry . "   <br/>";
        				    
        				    $todos = Messages::medication_acknowledge_todo($ipid, $text_todo, $mid, $recordid);
        				    
        				    
        					//renew medication
        					/*$mid = $_GET['mid'];
        					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
        					$mod->isdelete = 0;
        					$mod->medication_change = date("Y-m-d H:i:s", time());
        					$mod->change_date = date("Y-m-d H:i:s", time());
        					$mod->change_user = $logininfo->userid;
        					$mod->save();*/
        				    
        					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
        					if($_REQUEST['noredir'])
        					{
        					    if (isset($_GET['_deleted_medis_contactform_cid']) && empty((int)$_GET['_deleted_medis_contactform_cid'])) {
        					        //save to session ... because this is a new contactform.. so we can post back after you save this new cf
        					        $session_prop = isset($_GET['_cfhiddennounce']) && ! empty($_GET['_cfhiddennounce']) ? $_GET['_cfhiddennounce'] : null;
        					        	
        					        if ($session_prop) {
        					            $deleted_medis_contactform_cid_patientcourse_id = new Zend_Session_Namespace('deleted_medis_contactform_cid_patientcourse_id');
        					    
        					            $response['msg'] = "Success";
        					            $response['error'] = "";
        					            $response['callBack'] = "deleted_medis_contactform_cid_patientcourse_id";
        					            $response['callBackParameters'] = $deleted_medis_contactform_cid_patientcourse_id->$session_prop;
        					    
        					            $deleted_medis_contactform_cid_patientcourse_id->$session_prop = null;
        					    
        					            echo json_encode($response);
        					        }
        					    }
        					    
        						exit;
        					}
        					$this->_redirect("patient/patientmedication?id=" . $_GET['id']);
        				}
    				} 
    				else // NORMAL FUNCTIONALITY
        			{
        				
        				if($_GET['act'] == "del")
        				{
        					//delete medication
        					$mid = $_GET['mid'];
        					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
        
        					//delete cocktail if last medication from list is being deleted
        					if($mod)
        					{
        						$mDetails = $mod->toArray();
        					}
        
        					if($mDetails['cocktailid'] > 0)
        					{
        						$cocktailsC = new PatientDrugPlanCocktails();
        						$cocktailsDrugs = $cocktailsC->countDrugsPerCocktail(array($mDetails['cocktailid']));
        
        						if(count($cocktailsDrugs[$mDetails['cocktailid']]) == 0 && $_POST['btnsubmut'])
        						{
        							//if this is the last medication with isdelete 0 then we have to delete the cocktail
        							//changed, now we delete if we have 0 medis and submit button clicked
        							//set $mDetails->cocktailid to isdelete 1
        							$cocktailQ = Doctrine::getTable('PatientDrugPlanCocktails')->findOneById($mDetails['cocktailid']);
        							$cocktailQ->isdelete = 1;
        							$cocktailQ->save();
        						}
        					}
        
        					/* ============= Save in Patient drug plan history========================= */
        					$old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id);
        					$medication_old_medication_name = $old_med->name;
        
        					$history = new PatientDrugPlanHistory();
        					$history->ipid = $ipid;
        					$history->pd_id = $mod->id;
        					$history->pd_medication_master_id = $mod->medication_master_id;
        					$history->pd_medication_name = $medication_old_medication_name;
        					$history->pd_medication = $mod->medication;
        					$history->pd_dosage = $mod->dosage;
        					$history->pd_comments = $mod->comments;
        					$history->pd_isbedarfs = $mod->isbedarfs;
        					$history->pd_isivmed = $mod->isivmed;
        					$history->pd_isschmerzpumpe = $mod->isschmerzpumpe;
        					$history->pd_cocktailid = $mod->cocktailid;
        					//ISPC-2833 Ancuta 26.02.2021
        					$history->pd_ispumpe = $mod->ispumpe;
        					$history->pd_pumpe_id = $mod->pumpe_id;
        					//--
        					$history->pd_edit_type = $mod->edit_type;
        					$history->pd_verordnetvon = $mod->verordnetvon;
        					$history->pd_medication_change = $mod->medication_change;
        					$history->pd_create_date = $mod->create_date;
        					$history->pd_create_user = $mod->create_user;
        					$history->pd_change_date = $mod->change_date;
        					$history->pd_change_user = $mod->change_user;
        					$history->pd_isdelete = $mod->isdelete;
        					$history->save();
        
        					//continue and delete the medication
        					$mod->isdelete = 1;
        					$mod->save();
        
        					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
        
        					if($_REQUEST['noredir'])
        					{
        					    if (isset($_GET['_deleted_medis_contactform_cid']) && empty((int)$_GET['_deleted_medis_contactform_cid'])) {
        					        //save to session ... because this is a new contactform.. so we can post back after you save this new cf
        					        $session_prop = isset($_GET['_cfhiddennounce']) && ! empty($_GET['_cfhiddennounce']) ? $_GET['_cfhiddennounce'] : null;
        					        
        					        if ($session_prop) {
        					           $deleted_medis_contactform_cid_patientcourse_id = new Zend_Session_Namespace('deleted_medis_contactform_cid_patientcourse_id');
        					           
        					           $response['msg'] = "Success";
        					           $response['error'] = "";
        					           $response['callBack'] = "deleted_medis_contactform_cid_patientcourse_id";
        					           $response['callBackParameters'] = $deleted_medis_contactform_cid_patientcourse_id->$session_prop;
        					             
        					           $deleted_medis_contactform_cid_patientcourse_id->$session_prop = null;
        					           
        					           echo json_encode($response);
        					        }   
        					    }
        						exit;
        					}
        					$this->_redirect("patient/patientmedication?id=" . $_GET['id']);
        				}
        				elseif($_GET['act'] == "rnw")
        				{
        
        					//renew medication
        					$mid = $_GET['mid'];
        					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
        					/* ============= Save in Patient drug plan history========================= */
        					$old_med = Doctrine::getTable('Medication')->find($mod->medication_master_id);
        					$medication_old_medication_name = $old_med->name;
        					$history = new PatientDrugPlanHistory();
        					$history->ipid = $ipid;
        					$history->pd_id = $mod->id;
        					$history->pd_medication_master_id = $mod->medication_master_id;
        					$history->pd_medication_name = $medication_old_medication_name;
        					$history->pd_medication = $mod->medication;
        					$history->pd_dosage = $mod->dosage;
        					$history->pd_comments = $mod->comments;
        					$history->pd_isbedarfs = $mod->isbedarfs;
        					$history->pd_isivmed = $mod->isivmed;
        					$history->pd_isschmerzpumpe = $mod->isschmerzpumpe;
        					$history->pd_cocktailid = $mod->cocktailid;
        					//ISPC-2833 Ancuta 26.02.2021
        					$history->pd_ispumpe = $mod->ispumpe;
        					$history->pd_pumpe_id = $mod->pumpe_id;
        					//--
        					$history->pd_edit_type = $mod->edit_type;
        					$history->pd_verordnetvon = $mod->verordnetvon;
        					$history->pd_medication_change = $mod->medication_change;
        					$history->pd_create_date = $mod->create_date;
        					$history->pd_create_user = $mod->create_user;
        					$history->pd_change_date = $mod->change_date;
        					$history->pd_change_user = $mod->change_user;
        					$history->pd_isdelete = $mod->isdelete;
        					$history->save();
        
        					$mod->isdelete = 0;
        					$mod->medication_change = date("Y-m-d H:i:s", time());
        					$mod->change_date = date("Y-m-d H:i:s", time());
        					$mod->change_user = $logininfo->userid;
        					$mod->save();
        
        
        					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
        					if($_REQUEST['noredir'])
        					{
        					    
        					    if (isset($_GET['_deleted_medis_contactform_cid']) && empty((int)$_GET['_deleted_medis_contactform_cid'])) {
        					        //save to session ... because this is a new contactform.. so we can post back after you save this new cf
        					        $session_prop = isset($_GET['_cfhiddennounce']) && ! empty($_GET['_cfhiddennounce']) ? $_GET['_cfhiddennounce'] : null;
        					        	
        					        if ($session_prop) {
        					            $deleted_medis_contactform_cid_patientcourse_id = new Zend_Session_Namespace('deleted_medis_contactform_cid_patientcourse_id');
        					    
        					            $response['msg'] = "Success";
        					            $response['error'] = "";
        					            $response['callBack'] = "deleted_medis_contactform_cid_patientcourse_id";
        					            $response['callBackParameters'] = $deleted_medis_contactform_cid_patientcourse_id->$session_prop;
        					    
        					            $deleted_medis_contactform_cid_patientcourse_id->$session_prop = null;
        					    
        					            echo json_encode($response);
        					        }
        					    }
        					    
        						exit;
        					}
        					$this->_redirect("patient/patientmedication?id=" . $_GET['id']);
        				}
        		}
				
			}


			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			$previleges = new Modules();
			$pharmacyorder = $previleges->checkModulePrivileges("50", $logininfo->clientid);

			if($pharmacyorder)
			{
				$this->view->pharmacyorder = '1';
			}

			$this->view->checkModulePrivileges = $previleges->get_client_modules($logininfo->clientid);
			
			$this->view->tr = $previleges->checkModulePrivileges("85", $logininfo->clientid);///
			
			$tr = $previleges->checkModulePrivileges("85", $logininfo->clientid);
			$this->view->iv = $previleges->checkModulePrivileges("53", $logininfo->clientid);
			$this->view->isnutrition = $previleges->checkModulePrivileges("103", $logininfo->clientid);
// 			$this->view->iscrisis = $previleges->checkModulePrivileges("144", $logininfo->clientid);
			$this->view->iscrisis = false;
			
			$schmerzepumpe = $previleges->checkModulePrivileges("54", $logininfo->clientid);///
			$this->view->schmerzepumpe = $schmerzepumpe;

			//===========medi plans print ISPC 1607============
			$plans = Pms_CommonData::get_medi_plans();
			$client_plans_medi = PlansMediPrint::get_plans_medi_print($clientid);
			
			$buttonarray_pls['0']="";
			if(!empty($client_plans_medi))
			{
			    foreach($plans as $k_pls => $v_pls)
			   {
				   if(in_array($k_pls, $client_plans_medi))
				   {
					  $buttonarray_pls[$k_pls]= $v_pls;
				   }
			     }
// 			     array_unshift($buttonarray_pls,"");
			}else{
				$buttonarray_pls =array(
						"0" => "",
						"3" => "Medikation / Dosierung Plan",
						"7" => "Medikamentenplan"
				);
				
			}
			
			$this->view->buttonarray = $buttonarray_pls;
			
			//=================================
			
			
			if($logininfo->clientid == 1 || $logininfo->clientid == 43 || $logininfo->clientid == 32)
			{
				$this->view->butnmedicationpdf = '<input name="btnsubmut" type="button" class="button" value="Medikamente Wochenplan" onclick="location.href=\'' . APP_BASE . 'patientform/medicationformpdf?id=' . $_GET['id'] . '&pst=post\'" />';
			}

			$pharmacyprivileges = new Modules();
			$pharmacy = $pharmacyprivileges->checkModulePrivileges("50", $logininfo->clientid);

			if($pharmacy)
			{
				//show button
			}

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$iscl = Pms_Plugin_Acl::getClientTabmenuAccess($logininfo->clientid);
			if(!$iscl)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
			/* ######################################################### */

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";

			if($_GET['flg'] == 'suc')
			{
				$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
				;
			}

			$usr = new User();
			$this->view->all_users = $usr->getUserByClientid($clientid, '1', true);
			
			//ISPC - 2284
			$pqarr = $usr->getUserByClientid($clientid);
			
			$comma = ",";
			$userval = "'0'";
			
			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}
			$users = $usr->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;

			/*			 * ******* Patient Allergies ************ */
			$aller = new PatientDrugPlanAllergies();
			$allergies = $aller->getPatientDrugPlanAllergies($decid);
		

			if(!empty($allergies))
			{
				$patient_allergies = $allergies[0];
				$this->view->allergies_comment = $allergies[0]['allergies_comment'];
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */

			if($this->getRequest()->isPost())
			{
				$a_post = $_POST;
				$a_post['ipid'] = $ipid;
				$a_post['add_sets'] = "1";
				$bm = new Application_Form_Bedarfsmedication();
				$bm->InsertData($a_post);
			}


			$bdf = new BedarfsmedicationMaster();
			$this->view->bedarfsdrop = $bdf->getbedarfsmedicationDrop($logininfo->clientid);

			$medic = new PatientDrugPlan();
			$medicarr = $medic->getMedicationPlan($decid,false,false);
			if(count($medicarr) > 0)
			{
				$this->view->mededit = 1;
			}
			else
			{
				$this->view->mededit = 0;
			}
			$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedication.html");
			$this->view->medications = $grid->renderGrid();


			$medicarr2 = $medic->getDeletedMedication($decid, true);
			if(count($medicarr2) > 0)
			{
				$this->view->deledit = 1;
			}
			else
			{
				$this->view->deledit = 0;
			}
			foreach($medicarr2 as $medication)
			{
				if($medication['cocktailid'] > 0)
				{
					$cIds[] = $medication['cocktailid'];
				}
			}
			$cIds = array_unique($cIds);

			if(count($cIds) == 0)
			{
				$cIds[] = '999999';
			}

			$cocktailsC = new PatientDrugPlanCocktails();
			$cocktailsDrugs = $cocktailsC->countDrugsPerCocktail($cIds);
			
			$this->view->cocktailNo = $cocktailsDrugs;


			// get deleted medication

			$medication_master_ids['deleted'][] = "XXXXXX";
			foreach($medicarr2 as $k_medicarr2 => $v_medicarr2)
			{
				if($v_medicarr2['treatment_care'] == "1")
				{
					$treatment_care_ids['deleted'][] = $v_medicarr2['medication_master_id'];
				}
				else
				{
					$medication_master_ids['deleted'][] = $v_medicarr2['medication_master_id'];
				}
			}

			// get master medication data

			$med = new Medication();
			$medarr1 = $med->getMedicationById($medication_master_ids['deleted']);

			foreach($medarr1 as $k_medarr1 => $v_medarr1)
			{
				$medication_master_array[$v_medarr1['id']] = $v_medarr1;
			}

			$medtr = new MedicationTreatmentCare();
			$medarr_tr = $medtr->getMedicationTreatmentCareById($treatment_care_ids['deleted']);

			foreach($medarr_tr as $k_medarr_tr => $v_medarr_tr)
			{
				$medication_tr_array[$v_medarr_tr['id']] = $v_medarr_tr;
			}
			$medicarr2 = Pms_CommonData::clear_pdf_data($medicarr2);
			$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "listdelpatientmedication.html");
			$grid->medication_master_array = $medication_master_array;
			$grid->medication_tr_array = $medication_tr_array;
			$this->view->delmedications = $grid->renderGrid();

			$bdarr = $medic->getbedarfMedication($decid);
			if(count($bdarr) > 0)
			{
				$this->view->bdedit = 1;
			}
			else
			{
				$this->view->bdedit = 0;
			}
			$bdarr = Pms_CommonData::clear_pdf_data($bdarr);
			$grid = new Pms_Grid($bdarr, 1, count($bdarr), "listpatientbedarfsmedication.html");
			$this->view->bedarfsmedications = $grid->renderGrid();
			$this->view->isrecords = count($medicarr) + count($bdarr);

			
			//ispc 1823
			//crisis medication
			if ($this->view->iscrisis){

				$crisisarr = $medic->getCrisisMedication($decid);
				if(count($crisisarr) > 0)
				{
					$this->view->crisisedit = 1;
				}
				else
				{
					$this->view->crisisedit = 0;
				}
				$crisisarr = Pms_CommonData::clear_pdf_data($crisisarr);
				$grid = new Pms_Grid($crisisarr, 1, count($crisisarr), "listpatientcrisismedication.html");
				$this->view->crisismedications = $grid->renderGrid();
				$this->view->isrecords += count($crisisarr);
			}
				
			
			//patient iv medication
			$ivarr = $medic->getivMedication($decid);

			if(count($ivarr) > 0)
			{
				$this->view->ivedit = 1;
			}
			else
			{
				$this->view->ivedit = 0;
			}
			$ivarr = Pms_CommonData::clear_pdf_data($ivarr);
			$grid = new Pms_Grid($ivarr, 1, count($ivarr), "listpatientivmedication.html");
			$this->view->ivmedications = $grid->renderGrid();
			//$this->view->isrecords = count($medicarr) + count($bdarr) + count($ivarr);
			$this->view->isrecords += count($ivarr);

			//patient nutrition medication
			$isnutritionarr = $medic->get_isnutrition($decid);
			
			if(count($isnutritionarr) > 0)
			{
				$this->view->nutritionedit = 1;
			}
			else
			{
				$this->view->nutritionedit = 0;
			}
			$isnutritionarr = Pms_CommonData::clear_pdf_data($isnutritionarr);
			$grid = new Pms_Grid($isnutritionarr, 1, count($isnutritionarr), "listpatientmedicationnutrition.html");
			$this->view->nutrition = $grid->renderGrid();
			//$this->view->isrecords = count($isnutritionarr);
			$this->view->isrecords += count($isnutritionarr);
				
			
			//patient schmerzepumpe medication
			$smparr = $medic->getSchmerzpumpeMedication($decid);
			if(count($smparr) > 0)
			{
				$this->view->smpedit = 1;
			}
			else
			{
				$this->view->smpedit = 0;
			}
			//reset the default value [type]=another
			if(empty($smparr[0]['id']))
			{
				unset($smparr[0]);
			}

			if(count($smparr) != 0)
			{
				foreach($smparr as $smpMedication)
				{
					$smpMedicationArr[] = $smpMedication['cocktailid'];
				}
			}
			$smpMedicationArray = array_values(array_unique($smpMedicationArr));
			if(count($smpMedicationArray) == 0)
			{
				$smpMedicationArray[] = "999999999";
			}

			$cocktailsC = new PatientDrugPlanCocktails();
			$cocktails = $cocktailsC->getDrugCocktails($smpMedicationArray);

			$alt_cocktail_details = PatientDrugPlanAltCocktails:: get_drug_cocktails_alt($ipid,$smpMedicationArray);
			$alt_cocktail_declined = PatientDrugPlanAltCocktails:: get_declined_drug_cocktails_alt($ipid,$smpMedicationArray,false);
			
			if(count($cocktails) > 0)
			{
				foreach($cocktails as $cocktailData)
				{
					$cIds[] = $cocktailData['id'];
				}
			}
			else
			{
				$cIds[] = '999999999';
			}

			foreach($smparr as $smpkey => $medicationsmp)
			{
				$smpFinalArr[] = $medicationsmp;
				
				if(!in_array($medicationsmp['cocktailid'],$alt_cocktail_declined)){
				    
    				if($smparr[($smpkey + 1)]['cocktailid'] != $medicationsmp['cocktailid'])
    				{
    					$smpFinalArr[$smpkey]['smpdescription'] = $cocktails[$medicationsmp['cocktailid']];
    					
    					if(!empty($alt_cocktail_details[$medicationsmp['cocktailid']]))
    					{
    					    $smpFinalArr[$smpkey]['smpdescription_alt'] = $alt_cocktail_details[$medicationsmp['cocktailid']];
    					}
    					else
    					{
    					    $smpFinalArr[$smpkey]['smpdescription_alt'] = "";
    					}
    				}
    				else
    				{
    					$smpFinalArr[$smpkey]['smpdescription'] = "0";
    					$smpFinalArr[$smpkey]['smpdescription_alt'] = "0";
    				}
				}
				
			}
			if(count($cocktails) > 0)
			{
				$addnew = 0;
			}
			else
			{
				$addnew = 1;
			}
			$this->view->addnewlink = $addnew;
			$smpFinalArr = Pms_CommonData::clear_pdf_data($smpFinalArr);
			$grid = new Pms_Grid($smpFinalArr, 1, count($smpFinalArr), "schmerzepumpemedication.html");

			$this->view->schmerzepumpemedications = $grid->renderGrid();
			//$this->view->isrecords = count($medicarr) + count($bdarr) + count($ivarr) + count($smparr);
			$this->view->isrecords += count($smparr);






			//patient Behandlungspflege 

			$trarr = $medic->get_treatment_care($decid);

			if(count($trarr) > 0)
			{
				$this->view->tredit = 1;
			}
			else
			{
				$this->view->tredit = 0;
			}
			$trarr = Pms_CommonData::clear_pdf_data($trarr);
			$grid = new Pms_Grid($trarr, 1, count($trarr), "listpatienttreatmentcare.html");
			$this->view->treatmentcare = $grid->renderGrid();
			//$this->view->isrecords = count($medicarr) + count($bdarr) + count($ivarr) + count($smparr);
			$this->view->isrecords += count($trarr);
		}

		public function pharmacyorderAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			$Tr = new Zend_View_Helper_Translate();

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			$pharmacyprivileges = new Modules();
			$pharmacy = $pharmacyprivileges->checkModulePrivileges("50", $logininfo->clientid);

			if(!$pharmacy)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
			/*			 * ************************************************************************************************ */

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$allpatientinfo = $patientmaster->getMasterData($decid, 0);

			$patname = $allpatientinfo['first_name'] . ', ' . $allpatientinfo['last_name'];
			$pataddress = $allpatientinfo['street1'] . ', ' . $allpatientinfo['zip'] . ' ' . $allpatientinfo['city'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */

			$medic = new PatientDrugPlan();
			$medicarr = $medic->getPatientDrugPlan($decid);
			/*			 * ************************************************************************************************ */
			$sender = Doctrine::getTable('User')->find($logininfo->userid);
			$senderarray = $sender->toArray();

			if(count($senderarray) > 0 && !empty($senderarray['last_name']))
			{
				$the_sender = $senderarray['first_name'] . ' ' . $senderarray['last_name'];
			}

			//		get assigned users start
			$assignid = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where("epid = '" . $epid . "'");
			$assignidarray = $assignid->fetchArray();

			$comma = ",";
			$userid = "'0'";
			foreach($assignidarray as $key => $val)
			{
				$userid.= $comma . "'" . $val['userid'] . "'";
				$comma = ",";
			}

			$assignuser = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('id in (' . $userid . ') and clientid=' . $logininfo->clientid)
				->andWhere('isdelete=0 and isactive=0')
				->orderBy('last_name ASC');
			$assignuserarray = $assignuser->fetchArray();

			$assigned_users[] = '999999999';
			foreach($assignuserarray as $u_key => $u_values)
			{
				$assigned_users[] = $u_values['id'];
			}
			$this->view->assigned_users = json_encode($assigned_users);
			//get assigned users end

			if($this->getRequest()->isPost())
			{
				$usertosend = $_POST['phuser'];
				$assign_user = $_POST['assign_user'];

				if($assign_user == '1')
				{
					$assign = new PatientQpaMapping();
					$assign->epid = $epid;
					$assign->userid = $usertosend;
					$assign->clientid = $logininfo->clientid;
					$assign->assign_date = date("Y-m-d H:i:s", time());
					$assign->save();

					$vizibility = new PatientUsers();
					$vizibility->clientid = $logininfo->clientid;
					$vizibility->ipid = $ipid;
					$vizibility->userid = $usertosend;
					$vizibility->create_date = date("Y-m-d H:i:s", time());
					$vizibility->save();
				}

				$user = Doctrine::getTable('User')->find($usertosend);
				$userarray = $user->toArray();
				$username = $userarray['last_name'] . ' ' . $userarray['first_name'];
				
				$med = new Medication();
				$meds = "";
				
				if(!empty($_POST['medication']))
				{
					$master_medarr = $med->master_medications_get($_POST['medication']);
    				if(!empty($master_medarr))
    				{
    				    $meds = implode("\n",$master_medarr);
    				}
				}
				
				$verlauf_entry = "Apotheken Bestellung: \n " . $meds . "\n " . $_POST['komment'] . "\n " . $username . "";

				$message_entry .= "Apotheken Bestellung: \n " . $meds . "\n " . $_POST['komment'] . "\n";
				$message_entry .= "\n" . $patname . "\n" . $pataddress;

				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i");
				$cust->course_type = Pms_CommonData::aesEncrypt("Q");
				$cust->course_title = Pms_CommonData::aesEncrypt($verlauf_entry);
				$cust->user_id = $logininfo->userid;
				$cust->save();

				//SEND MESSAGE
				$mail = new Messages();
				$mail->sender = $logininfo->userid;
				$mail->clientid = $logininfo->clientid;
				$mail->recipient = $usertosend;
				$mail->msg_date = date("Y-m-d H:i:s", time());
				$mail->title = Pms_CommonData::aesEncrypt('Medication Order');
// 				$mail->content = Pms_CommonData::aesEncrypt(utf8_encode($message_entry));
				$mail->content = Pms_CommonData::aesEncrypt($message_entry);
				$mail->source = "medication_order";
				$mail->create_date = date("Y-m-d", time());
				$mail->create_user = $logininfo->userid;
				$mail->read_msg = '0';
				$mail->save();

				
				
				
				
				// ###################################
				// ISPC-1600
				// ###################################
				$email_subject = $Tr->translate('mail_subject_action_pharmacy_order') . ' - ' . $the_sender . ', ' . date('d.m.Y H:i');
				$email_text = "";
				$email_text .= $Tr->translate('youhavenewmailinyourispcinbox');
				// ISPC-2475 @Lore 31.10.2019
				$email_text .= $Tr->translate('system_wide_email_text_login');
				// client details
				$client_details_array = Client::getClientDataByid($logininfo->clientid);
				if(!empty($client_details_array)){
				    $client_details = $client_details_array[0];
				}
				$client_details_string = "<br/>";
				$client_details_string  .= "<br/> ".$client_details['team_name'];
				$client_details_string  .= "<br/> ".$client_details['street1'];
				$client_details_string  .= "<br/> ".$client_details['postcode']." ".$client_details['city'];
				$client_details_string  .= "<br/> ".$client_details['emailid'];
				$email_text .= $client_details_string;
					
				//TODO-3164 Ancuta 08.09.2020
				$email_data = array();
				$email_data['client_info'] = $client_details_string;
				$email_text = "";//overwrite
				$email_text = Pms_Template::createTemplate($email_data, 'templates/email_template_v1.html');
				//--
				
				if($mail->id > 0)
				{
					$user = Doctrine::getTable('User')->find($usertosend);
					$userarray = $user->toArray();

					if(count($userarray) > 0 && !empty($userarray['emailid']))
					{
						$mail_transport = new Zend_Mail_Transport_Smtp(ISPC_SMTP_SERVER, Zend_Registry::get('mail_transport_cfg'));
						$mail = new Zend_Mail('UTF-8');
						$mail->setBodyHtml($email_text)
							->setFrom(ISPC_SENDER, ISPC_SENDERNAME)
							->addTo($userarray['emailid'], $userarray['last_name'] . ' ' . $userarray['first_name'])
							->setSubject($email_subject)
							->setIpids($ipid)
							->send($mail_transport);
					}
				}
				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
			}

			$usrgrps = Doctrine_Query::create()
				->select('*')
				->from('Usergroup')
				->where("groupmaster = '8' and clientid = '" . $logininfo->clientid . "'");
			$usrgrpsexec = $usrgrps->execute();
			$usrgrpsarray = $usrgrpsexec->toArray();

			if(count($usrgrpsarray) > 0)
			{
				foreach($usrgrpsarray as $k => $v)
				{
					$grpids[] = $v['id'];
				}
				$grpidsstring = implode($grpids, ",");

				$usrs = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where("groupid IN (" . $grpidsstring . ")")
					->andWhere('isdelete=0 and isactive=0')
					->orderBy('last_name ASC');
				$usrsexec = $usrs->execute();
				$usrsarray = $usrsexec->toArray();

				if(count($usrsarray) > 0)
				{
					foreach($usrsarray as $ku => $vu)
					{
						$pharmacyusersarr[$vu['id']] = $vu['last_name'] . ' ' . $vu['first_name'];
					}
				}
				else
				{
					$pharmacyusersarr = "0";
				}
			}

			$this->view->pharmacyusers = $pharmacyusersarr;

			foreach($medicarr as $keym => $valm)
			{
				$med = new Medication();
				$medarr = $med->getMedicationById($valm['medication_master_id']);
				$medicnarr[$valm['medication_master_id']] = $medarr[0]['name'];
			}

			asort($medicnarr, SORT_STRING);
			$this->view->medis = $medicnarr;
			$this->view->jsmedis = json_encode($medicnarr);
		}

		public function openpdfAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->generatepdf($decid);
		}

		public function patientmedicationaddAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->view->clientid =$clientid ;
			$userid = $logininfo->userid;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'canadd');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$modules = new Modules();
			if($modules->checkModulePrivileges("87", $logininfo->clientid))
			{
				$this->view->show_mmi = "1";
			}
			else
			{
				$this->view->show_mmi = "0";
			}

			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge ISPC - 1483
			{
			    $acknowledge = "1";
			    
			    $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			    $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			$medication_type = "normal";
			if($_GET['isbedarfs'] == 1)
			{
			    $medication_type="isbedarfs";
			}
			
			if($_GET['isivmed'] == 1)
			{
			    $medication_type="isivmed";
 
			}
			
			if($_GET['isnutrition'] == 1)
			{
				$medication_type="isnutrition";
			
			}
			
			if($_GET['treatment_care'] == 1)
			{
			    $medication_type="treatment_care";
			}
			
			if($_GET['isschmerzpumpe'] == 1)
			{
			    $medication_type="isschmerzpumpe";
			}

			//ispc 1823
			switch ($_GET['medication_type'] ){
				case "crisis":
					$medication_type = "crisis";
					break;
			}

			$this->view->medication_type = $medication_type;
			
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->kassen_no = $healthinsu_array[0]['kvk_no'];

			$pq = new User();
			$pqarr = $pq->getUserByClientid($logininfo->clientid);

			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));

			$this->view->verordnetvon = $logininfo->userid;
			$usr = new User();
			$users = $usr->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->all_users = $usr->getUserByClientid($clientid, '1', true);

			$this->view->users = $users;
			$a_medic = array();

			if(is_array($_POST['add']['hidd_medication']))
			{
				foreach($_POST['add']['hidd_medication'] as $key => $val)
				{
					$a_medic[$key]['medication'] = $_POST['add']['medication'][$key];
					$a_medic[$key]['hidd_medication'] = $_POST['add']['hidd_medication'][$key];
				}
			}
			else
			{
				for($i = 0; $i < 6; $i++)
				{
					$a_medic[$i] = array('cnt' => $i);
				}
			}


			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic), "listpatientmedicationadd.html");
			$this->view->medicgrid = $grid->renderGrid();

			if($_GET['isschmerzpumpe'] == 1)
			{
				$this->_helper->viewRenderer('patientschmerzpumpeadd');
				$grid = new Pms_Grid($a_medic, 1, count($a_medic), "schmerzpumpemedicationadd.html");
				$this->view->medicgrid = $grid->renderGrid();
			}

			if($_GET['treatment_care'] == 1)
			{
				$this->_helper->viewRenderer('patienttreatmentcareadd');
				$grid = new Pms_Grid($a_medic, 1, count($a_medic), "patienttreatmentcareadd.html");
				$this->view->medicgrid = $grid->renderGrid();
			}
			
			
			if($_GET['isnutrition'] == 1)
			{
				$this->_helper->viewRenderer('patientmedicationnutritionadd');
				$grid = new Pms_Grid($a_medic, 1, count($a_medic), "patientmedicationnutritionadd.html");
				$this->view->medicgrid = $grid->renderGrid();
			}
			
			
			
			$this->view->rowcount = count($a_medic);

			if($this->getRequest()->isPost())
			{
				if($acknowledge == "1"){
					if(in_array($userid,$change_users) || in_array($userid,$approval_users) || $logininfo->usertype == 'SA'){
						// do nothing
					} 
					else
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}
				}
				
				$med_form = new Application_Form_PatientDrugPlan();
				$patient_medication_form = new Application_Form_Medication();
				$patient_medication_treatment_care_form = new Application_Form_MedicationTreatmentCare();
				$patient_medication_isnutrition_form = new Application_Form_Nutrition();

				$_POST['acknowledge'] = $acknowledge;
				
			    $_POST['skip_trigger'] = 0;
			    $_POST['add_sets'] = "1";
				if($acknowledge == "1")
				{
					
				    $_POST['skip_trigger'] = 1;
				    
				} 
				
				$aller_port = $_POST;
				$aller_port['ipid'] = $ipid;

				$a_post = $_POST['add'];
				$a_post['ipid'] = $ipid;
				$a_post['isbedarfs'] = 0;
				$a_post['iscrisis'] = 0;
				$a_post['isschmerzpumpe'] = 0;
				$a_post['isivmed'] = 0;

				switch ($_GET['medication_type'] ){
					case "crisis":
						$a_post['iscrisis'] = 1;
						break;
				}
				if($_GET['isbedarfs'] == 1)
				{
					$a_post['isivmed'] = 0;
					$a_post['isbedarfs'] = 1;
					$a_post['isschmerzpumpe'] = 0;
				}

				if($_GET['isivmed'] == 1)
				{
					$a_post['isivmed'] = 1;
					$a_post['isbedarfs'] = 0;
					$a_post['isschmerzpumpe'] = 0;
				}

				if($_GET['treatment_care'] == 1)
				{
					$a_post['treatment_care'] = 1;
					$a_post['isivmed'] = 0;
					$a_post['isbedarfs'] = 0;
					$a_post['isschmerzpumpe'] = 0;
					$a_post['isnutrition'] = 0;
				}
				
				if($_GET['isnutrition'] == 1)
				{
					$a_post['isnutrition'] = 1;
					$a_post['isivmed'] = 0;
					$a_post['isbedarfs'] = 0;
					$a_post['isschmerzpumpe'] = 0;
					$a_post['treatment_care'] = 0;
				}

				if($_GET['isschmerzpumpe'] == 1)
				{
					$a_post['isivmed'] = 0;
					$a_post['isbedarfs'] = 0;
					$a_post['isschmerzpumpe'] = 1;
					$a_post['cocktailDescription'] = $_POST['cocktailDescription'];
					$a_post['bolus'] = $_POST['bolus'];
					$a_post['flussrate'] = $_POST['flussrate'];
					$a_post['sperrzeit'] = $_POST['sperrzeit'];
				}

				foreach($_POST['add']['medication'] as $key => $val)
				{
					if(strlen($_POST['add']['medication'][$key]) > 0 && strlen($_POST['add']['hidd_medication'][$key]) < 1)
					{
						$a_post['newmedication'][$key] = $_POST['add']['medication'][$key];
					}
				}

				if(is_array($a_post['newmedication']))
				{
					if($a_post['treatment_care'] == 1)
					{
						$dts = $patient_medication_treatment_care_form->InsertNewData($a_post);
					}
					elseif ($a_post['isnutrition'] == "1")
					{
						
						$dts = $patient_medication_isnutrition_form->InsertNewData($a_post);
					}
					else
					{
						$dts = $patient_medication_form->InsertNewData($a_post);
					}
					foreach($dts as $key => $dt)
					{
						$a_post['newhidd_medication'][$key] = $dt->id;
					}
				}
				/*				 * **************************************** */

				/*				 * **************************************** */
				$med_form->InsertMultiData($a_post);

				if($acknowledge == "1"){
				    if($a_post['isschmerzpumpe'] == 1 && in_array($userid,$approval_users))
				    {
    					$cust = new PatientCourse();
    					$cust->ipid = $ipid;
    					$cust->course_date = date("Y-m-d H:i:s", time());
    					$cust->course_type = Pms_CommonData::aesEncrypt("Q");
    					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Kommentar: " . $a_post['cocktailDescription'] . "\n  Bolus: " . $a_post['bolus'] . "\nFlussrate: " . $a_post['flussrate'] . "\nSperrzeit: " . $a_post['sperrzeit'] . ""));
    					$cust->user_id = $logininfo->userid;
    					$cust->save();
				    }
				} else {
    				if($a_post['isschmerzpumpe'] == 1)
    				{
    					$cust = new PatientCourse();
    					$cust->ipid = $ipid;
    					$cust->course_date = date("Y-m-d H:i:s", time());
    					$cust->course_type = Pms_CommonData::aesEncrypt("Q");
    					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Kommentar: " . $a_post['cocktailDescription'] . "\n  Bolus: " . $a_post['bolus'] . "\nFlussrate: " . $a_post['flussrate'] . "\nSperrzeit: " . $a_post['sperrzeit'] . ""));
    					$cust->user_id = $logininfo->userid;
    					$cust->save();
    				}
				}
				$this->_redirect(APP_BASE . 'patient/patientmedication?flg=suc&id=' . $_GET['id']);
			}
			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function patientmedicationeditAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->view->clientid =$clientid ;
			$userid = $logininfo->userid;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'canview');
			
			$approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			$change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}


			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge ISPC - 1483
			{
			    $acknowledge = "1";
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->act = "patient/patientmedicationedit?id=" . $_GET['id'];

			$pq = new User();
			$pqarr = $pq->getUserByClientid($logininfo->clientid);

			$modules = new Modules();
			if($modules->checkModulePrivileges("87", $logininfo->clientid))
			{
				$this->view->show_mmi = "1";
			}
			else
			{
				$this->view->show_mmi = "0";
			}
			
			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			// added new groupid method based on groupmaster
			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));


			$usr = new User();
			$users = $usr->getuserbyidsandGroupId($userval, $groupid, 1);

			$this->view->users = $users;
			$this->view->jsusers = json_encode($users);

			$ipid = Pms_CommonData::getIpid($decid);


			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->kassen_no = $healthinsu_array[0]['kvk_no'];
			

			if($this->getRequest()->isPost())
			{
				if($acknowledge == "1"){
					if(in_array($userid,$change_users) || in_array($userid,$approval_users) || $logininfo->usertype == 'SA'){
						// do nothing
					}
					else
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}
				}
				
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'canedit');
				$patient_medication_form = new Application_Form_Medication();
				$patient_medication_isnutrition_form = new Application_Form_Nutrition();
				$patient_medication_tr_form = new Application_Form_MedicationTreatmentCare();

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				
				$_POST['skip_trigger'] = 0;
				$_POST['add_sets'] = "1";
				if($acknowledge == "1")
				{
    				$_POST['skip_trigger'] = 1;
				}
				
				$a_post = $_POST;

			
				$a_post['ipid'] = $ipid;
				foreach($a_post['medication'] as $amedikey => $amedi)
				{
					if(strlen($amedi) > 0 && empty($a_post['hidd_medication'][$amedikey]) && !empty($a_post['drid'][$amedikey]) && !empty($a_post['medication'][$amedikey]))
					{

						$a_post['newmids'][$amedikey] = $a_post['drid'][$amedikey];
						$a_post['newmedication'][$amedikey] = $amedi;
					}

					if(strlen($amedi) > 0 && (!empty($a_post['hidd_medication'][$amedikey]) && empty($a_post['drid'][$amedikey]) && !empty($a_post['medication'][$amedikey])))
					{
						$a_post['newmids'][$amedikey] = $a_post['hidd_medication'][$amedikey];
						$a_post['newmedication'][$amedikey] = $amedi;
					}

					if(strlen($amedi) > 0 && (empty($a_post['hidd_medication'][$amedikey]) && empty($a_post['drid'][$amedikey]) && !empty($a_post['medication'][$amedikey])))
					{
						$a_post['newmedication'][$amedikey] = $amedi;
					}
				}

				if(is_array($a_post['newmedication']))
				{
					if($a_post['treatment_care'] == "1")
					{
						$dts = $patient_medication_tr_form->InsertNewData($a_post);
					}
					elseif ($a_post['isnutrition'] == "1")
					{
						$dts =$patient_medication_isnutrition_form->InsertNewData($a_post);
					}
					else
					{
						$dts = $patient_medication_form->InsertNewData($a_post);
					}

					foreach($dts as $key => $dt)
					{
						$a_post['newhidd_medication'][$key] = $dt->id;
					}
				}
				$med_form = new Application_Form_PatientDrugPlan();
				if($_POST['cocktailhid'] > "0")
				{
					$med_form->UpdateSchmerzepumpeMultiData($a_post);

					//find out edited/added medis
					foreach($a_post['medication'] as $k_meds => $v_meds)
					{
						$cust = Doctrine::getTable('PatientDrugPlan')->find($a_post['drid'][$k_meds]);
						$list = true; //list curent medi
						if($cust)
						{

							if($cust->dosage != $a_post['dosage'][$k_meds] ||
								$cust->medication_master_id != $a_post['hidd_medication'][$k_meds] ||
								$cust->verordnetvon != $a_post['verordnetvon'][$k_meds])
							{
								$list = false; //don`t list curent medi
							}
						}

						if(!array_key_exists($k_meds, $a_post['newmedication']) && $list) //new medis
						{
							$meds[] = $v_meds . " | " . $a_post['dosage'][$k_meds] . "\n";
						}
					}

					if($acknowledge == "1" )
					{
					       if(in_array($userid,$approval_users))
					       {
            					$cust = new PatientCourse();
            					$cust->ipid = $ipid;
            					$cust->course_date = date("Y-m-d H:i:s", time());
            					$cust->course_type = Pms_CommonData::aesEncrypt("Q");
            					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes(implode('', $meds) . "Kommentar: " . $a_post['cocktailDescription'] . "\n  Bolus: " . $a_post['bolus'] . "\nFlussrate: " . $a_post['flussrate'] . "\nSperrzeit: " . $a_post['sperrzeit'] . " "));
            					$cust->user_id = $logininfo->userid;
            					$cust->save();
					       }
					} 
					else
					{
    					$cust = new PatientCourse();
    					$cust->ipid = $ipid;
    					$cust->course_date = date("Y-m-d H:i:s", time());
    					$cust->course_type = Pms_CommonData::aesEncrypt("Q");
    // 					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes(implode('', $meds) . "Kommentar: " . $a_post['cocktailDescription'] . "\n  Bolus: " . $a_post['bolus'] . "\nFlussrate: " . $a_post['flussrate'] . ""));
    					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes(implode('', $meds) . "Kommentar: " . $a_post['cocktailDescription'] . "\n  Bolus: " . $a_post['bolus'] . "\nFlussrate: " . $a_post['flussrate'] . "\nSperrzeit: " . $a_post['sperrzeit'] . " "));
    					$cust->user_id = $logininfo->userid;
    					$cust->save();
					}
					
					
				}
				else
				{
					$med_form->UpdateMultiData($a_post);
				}
				/*				 * **************************************** */
				$this->_redirect(APP_BASE . 'patient/patientmedication?flg=suc&id=' . $_GET['id']);
			}

			$pts = Doctrine::getTable('PatientDrugPlan')->find($_GET['mid']);
			if($pts)
			{
				$med = $pts->toArray();
				$this->retainValues($med);

				$medication_master_id = $med['medication_master_id'];

				$meds = Doctrine::getTable('Medication')->find($medication_master_id);
				if($meds)
				{
					$medarr = $meds->toarray();

					$this->view->medication = $medarr['name'];
					$this->view->hidd_medication = $medarr['id'];
				}
			}

			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";
			
			//normal medications
			$medic = new PatientDrugPlan();

			$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);

			if($_REQUEST['case'] == 'medication')
			{
				$medicarr = $medic->getMedicationPlan($decid);
				$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
				$grid = new Pms_Grid($medicarr, 1, count($medicarr), "newpatientmedicationedit.html");

				$this->view->jsmedcount = count($medicarr);
				$this->view->counter = '1';
			}
			else if($_REQUEST['case'] == 'bedarfsmedication')
			{   
			
				//bedarfs patient medication
				$medicarr = $medic->getbedarfMedication($decid);
// 			    print_R($medicarr); exit;
				$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
				$grid = new Pms_Grid($medicarr, 1, count($medicarr), "newpatientbedarfmedicationedit.html");
				$this->view->jsmedcount = count($medicarr);
				$this->view->counter = '0';
			}
			else if($_REQUEST['case'] == 'crisismedication')
			{		
				//crisis patient medication
				$medicarr = $medic->getCrisisMedication($decid);
				$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
				$grid = new Pms_Grid($medicarr, 1, count($medicarr), "newpatientcrisismedicationedit.html");
				$this->view->jsmedcount = count($medicarr);
				$this->view->counter = '0';
			}
			else if($_REQUEST['case'] == 'ivmedication')
			{
				//iv patient medication
				$ivarr = $medic->getivMedication($decid);
				$ivarr = Pms_CommonData::clear_pdf_data($ivarr);
				$grid = new Pms_Grid($ivarr, 1, count($ivarr), "newpatientivmedicationedit.html"); //dont forget to create the grid

				$this->view->jsmedcount = count($ivarr);
				$this->view->counter = '0';
			}
			else if($_REQUEST['case'] == 'isnutrition')
			{
				//$this->_helper->viewRenderer('patienttreatmentcareedit');
				//iv patient medication
				$isnutrition = $medic->get_isnutrition($decid);
				$isnutrition = Pms_CommonData::clear_pdf_data($isnutrition);
				$grid = new Pms_Grid($isnutrition, 1, count($isnutrition), "newpatientmedicationnutritionedit.html"); //dont forget to create the grid
				$this->view->jsmedcount = count($isnutrition);
				$this->view->counter = '0';
			}
			else if($_REQUEST['case'] == 'treatment_care')
			{
				$this->_helper->viewRenderer('patienttreatmentcareedit');
				//patient medication - treatment care
				$trarr = $medic->get_treatment_care($decid);
				$trarr = Pms_CommonData::clear_pdf_data($trarr);
				$grid = new Pms_Grid($trarr, 1, count($trarr), "newpatienttreatmentcareedit.html"); //dont forget to create the grid
				$this->view->medicationtreatmentcare = $grid->renderGrid();
				$this->view->jsmedcount = count($trarr);
				$this->view->counter = '0';
			}
			else if($_REQUEST['case'] == 'dismedication')
			{
				//deleted patient medication
				$medicarr = $medic->getDeletedMedication($decid);
				$medication_master_ids['deleted'][] = "XXXXXX";
				foreach($medicarr as $k_medicarr2 => $v_medicarr2)
				{
					$medication_master_ids['deleted'][] = $v_medicarr2['medication_master_id'];
				}

				// get master medication data

				$med = new Medication();
				$medarr1 = $med->getMedicationById($medication_master_ids['deleted']);

				foreach($medarr1 as $k_medarr1 => $v_medarr1)
				{
					$medication_master_array[$v_medarr1['id']] = $v_medarr1;
				}
				$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
				$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listdelpatientmedicationedit.html");
				$grid->medication_master_array = $medication_master_array;
			}

			if($_REQUEST['case'] != 'isschmerzpumpe' && $_REQUEST['case'] != 'treatment_care' && !empty($_REQUEST['case']))
			{
				$this->view->medications = $grid->renderGrid();
			}


			if($_GET['isschmerzpumpe'] == 1)
			{
				$this->_helper->viewRenderer('patientschmerzpumpemedicationedit');

				//patient schmerzepumpe medication
				$cid = $_REQUEST['cid'];
				$smparr = $medic->getSchmerzpumpeMedication($decid, $cid);

				foreach($smparr as $smpMedication)
				{
					$smpMedicationArr[] = $smpMedication['cocktailid'];
				}
				$smpMedicationArray = array_values(array_unique($smpMedicationArr));

				$cocktails = new PatientDrugPlanCocktails();
				$cocktails = $cocktails->getDrugCocktails($smpMedicationArray);

				foreach($smparr as $smpkey => $medicationsmp)
				{
					$smpFinalArr[] = $medicationsmp;
					if($smparr[($smpkey + 1)]['cocktailid'] != $medicationsmp['cocktailid'])
					{
						$smpFinalArr[$smpkey]['smpdescription'] = $cocktails[$medicationsmp['cocktailid']];
					}
					else
					{
						$smpFinalArr[$smpkey]['smpdescription'] = "0";
					}
				}
				$smpFinalArr = Pms_CommonData::clear_pdf_data($smpFinalArr);
				$grid = new Pms_Grid($smpFinalArr, 1, count($smpFinalArr), "schmerzepumpemedicationedit.html");
				if(count($smpFinalArr) < 1)
				{
					$this->view->mcntr = 0;
				}
				else
				{
					$this->view->mcntr = (count($smpFinalArr) + 1);
				}
				$this->view->schmerzepumpemedications = $grid->renderGrid();

				$this->view->counter = count($smpFinalArr);
				$this->view->jsmedcount = count($smpFinalArr);
			}

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function patientmedicationbedarfseditAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$decid = Pms_Uuid::decrypt($_GET['id']);

			$pq = new User();
			$pqarr = $pq->getUserByClientid($logininfo->clientid);



			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));


			$usr = new User();
			$users = $usr->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;

			$ipid = Pms_CommonData::getIpid($decid);

			if($this->getRequest()->isPost())
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'canedit');
				$patient_medication_form = new Application_Form_Medication();
				$patient_medicationnutrition_form = new Application_Form_Nutrition();

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$a_post = $_POST;
				for($i = 1; $i <= count($_POST['medication']); $i++)
				{
					if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
					{

						$a_post['newmids'][$i] = $_POST['drid'][$i];
						$a_post['newmedication'][$i] = $_POST['medication'][$i];
					}
				}

				if(is_array($a_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($a_post);

					foreach($dts as $key => $dt)
					{
						$a_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form = new Application_Form_PatientDrugPlan();
				$med_form->UpdateBedarfsMultiData($a_post);
				$this->_redirect(APP_BASE . 'patient/patientmedication?flg=suc&id=' . $_GET['id']);
			}

			$pts = Doctrine::getTable('PatientDrugPlan')->find($_GET['mid']);
			if($pts)
			{
				$med = $pts->toArray();
				$this->retainValues($med);

				$medication_master_id = $med['medication_master_id'];

				$meds = Doctrine::getTable('Medication')->find($medication_master_id);
				if($meds)
				{
					$medarr = $meds->toarray();

					$this->view->medication = $medarr['name'];
					$this->view->hidd_medication = $medarr['id'];
				}
			}

			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";
			$medic = new PatientDrugPlan();
			$medicarr = $medic->getbedarfMedication($decid);

			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationbedarfsedit.html");
			$this->view->medications = $grid->renderGrid();

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function patientmedicationbedarfsaddAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			if($this->getRequest()->isPost())
			{
				$a_post = $_POST;
				$a_post['ipid'] = $ipid;
				$bm = new Application_Form_Bedarfsmedication();
				$bm->InsertData($a_post);
				$this->_redirect(APP_BASE . "patient/patientmedication?id=" . $_GET['id']);
			}

			$bd = new BedarfsmedicationMaster();
			$bdarr = $bd->getbedarfsmedication($clientid);
			$grid = new Pms_Grid($bdarr, 1, count($bdarr), "listpatientbedarfsmedicationmaster.html");
			$this->view->bedarfsmedications = $grid->renderGrid();

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function removepatientAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->view->usertype = $logininfo->usertype;
			$this->view->errorclass = "ErrorDivHide";
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('removepatient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if($this->getRequest()->isPost())
			{
				if($logininfo->usertype == 'SA')
				{
					if(strlen($_POST['clientid']) < 1)
					{
						$this->view->error_clientid = "Select Client ";
						$error = 1;
					}

					if(strlen($_POST['epid']) < 1)
					{
						$this->view->error_epid = "Enter Epid ";
						$error = 1;
					}

					if(strlen($_POST['comment']) < 1)
					{
						$this->view->error_comment = "Enter comment ";
						$error = 1;
					}
				}
				else
				{
					if(strlen($_POST['epid']) < 1)
					{
						$this->view->error_epid = "Enter Epid ";
						$error = 1;
					}

					if(strlen($_POST['comment']) < 1)
					{
						$this->view->error_comment = "Enter comment ";
						$error = 1;
					}
				}

				if($error == 0)
				{
					$previleges = new Pms_Acl_Assertion();
					$return = $previleges->checkPrevilege('removepatient', $logininfo->userid, 'candelete');

					if(!$return)
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}

					if($logininfo->usertype == 'SA')
					{
						$client = $_POST['clientid'];
					}
					else
					{
						$client = $logininfo->clientid;
					}

					$ipid = Doctrine_Query::create()
						->select('*')
						->from('EpidIpidMapping')
						->where("epid = ?", $_POST['epid'])
						->andWhere('clientid=' . $client);
					$clistexec = $ipid->execute();
					$ipid->getSqlQuery();
					$ipidarray = $clistexec->toArray();

					if(count($ipidarray) > 0)
					{
						$remove = Doctrine_Query::create()
							->update('PatientMaster')
							->set('isdelete', 1)
							->set('comment', '?',$_POST['comment'])
							->set('last_update_user', '?',$logininfo->userid)
							->set('last_update', '?', date("Y-m-d H:i:s"))
							->where("ipid = ?", $ipidarray[0]['ipid']);
						if($remove->execute())
						{
							$this->view->error_message = $this->view->translate("recorddeletedsuccessfully");
							$this->view->errorclass = "err";
						}
						else
						{
							$this->view->error_message = $this->view->translate('errorwhiledeletingpatient');
							$this->view->errorclass = "err";
						}
					}
					else
					{
						$this->view->error_message = $this->view->translate('invalidepiderrorwhiledeletingpatient');
						$this->view->errorclass = "err";
					}
				}
			}
		}

		public function directpatientsearchAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');

			$clientid = $logininfo->clientid;
			if(strlen($_REQUEST['ltr']) > 2)
			{
				$drop = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where("clientid = ?", $clientid)
					->orderBy('epid asc');
				$droparray = $drop->fetchArray();

				if($droparray)
				{
					foreach($droparray as $key => $val)
					{
						$ipidval .= $comma . "'" . $val['ipid'] . "'";
						$comma = ",";
					}
				}

				$user_patients = PatientUsers::getUserPatients($logininfo->userid);

				if(count($droparray) > 0)
				{
					$sql = "*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,";
					$sql .="AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,";
					$sql .="AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,";
					$sql .="AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,";
					$sql .="AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,";
					$sql .="AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,";
					$sql .="AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,";
					$sql .="AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip,";
					$sql .="AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,";
					$sql .="AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone,";
					$sql .="AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') as mobile,";
					$sql .= "IF(isdischarged != 1 AND isstandby != 1 AND isstandbydelete != 1, 0,( IF(isstandbydelete = 1, 3, ( IF(isstandby = 1,2, (IF(isdischarged = 1,1,0)))) )) ) as status,";
					$sql .="AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex";

					// if super admin check if patient is visible or not
					if($logininfo->usertype == 'SA')
					{
						$sql = "*,";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
						$sql .= "IF(isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
						$sql .= "IF(isdischarged != 1 AND isstandby != 1 AND isstandbydelete != 1, 0,( IF(isstandbydelete = 1, 3, ( IF(isstandby = 1,2, (IF(isdischarged = 1,1,0)))) )) ) as status,";
					}

					$patient = Doctrine_Query::create()
						->select($sql)
						->from('PatientMaster p')
						->where("p.ipid in(" . $ipidval . ")  and p.ipid IN (" . $user_patients['patients_str'] . ") and p.isdelete = 0");
					$patient->leftJoin("p.EpidIpidMapping e");
					
					$patient->andwhere("e.clientid = " . $logininfo->clientid . " and 
			trim(lower(e.epid)) like ? or 
			(trim(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1))) like ? or 
			trim(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1))) like ?  or 
			concat(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE ? or
			concat(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE ? or
			concat(lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE ? or
			concat(lower(convert(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE ?)"
					,array(
							trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8')).'%',
							trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8')).'%',
							trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8')).'%',
							'%'.trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8')).'%',
							'%'.trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8')).'%',
							'%'.trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8')).'%',
							'%'.trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8')).'%')
					
							);
					
					if($logininfo->hospiz == 1)
					{
						$patient->andwhere('ishospiz = 1');
					}
					$patient->orderby('status,ipid');
					$droparray1 = $patient->fetchArray();
				}
				elseif($logininfo->showinfo == 'show')
				{

					$fndrop = Doctrine_Query::create()
						->select('*')
						->from('EpidIpidMapping')
						->where("clientid = ?", $clientid);
					$fndroparray = $fndrop->fetchArray();
					if($fndroparray)
					{
						$comma = ",";
						$fnipidval = "'0'";
						foreach($fndroparray as $key => $val)
						{
							$fnipidval .= $comma . "'" . $val['ipid'] . "'";
							$comma = ",";
						}
					}

					$patient1 = Doctrine_Query::create()
						->select("*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
						AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
						AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
						AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as oll,
						AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
						AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,
						AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,
						AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,
						AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip
						,AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city
						,AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone
						,AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') as mobile,

						IF(isdischarged != 1 AND isstandby != 1 AND isstandbydelete != 1, 0,( IF(isstandbydelete = 1, 3, ( IF(isstandby = 1,2, (IF(isdischarged = 1,1,0)))) )) ) as status,
						,AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex")
						->from('PatientMaster')
						->where("isdelete = 0 and ipid in(" . $fnipidval . ") ") 
						->andWhere("(trim(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) like ? or 
						trim(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) like ?  or 
				concat(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE ? or
				concat(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)),', ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE ? or
				concat(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE ? or
				concat(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)),' ',lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) LIKE ?)",
				array(trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%",
						trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%",
						"%".trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%",
						"%".trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%",
						"%".trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%",
						"%".trim(mb_strtolower($_REQUEST['ltr'], 'UTF-8'))."%"))
						->orderby('status');
					$dropexec2 = $patient1->execute();
					$droparray2 = $dropexec2->toArray();
				}
			}

			if(is_array($droparray2) || is_array($droparray1))
			{
				$res = array_merge((array) $droparray2, (array) $droparray1);

				for($i = 0; $i < count($res); $i++)
				{
					$res[$i]['status'] = $res[$i]['status'];

					if(strlen($res[$i]['middle_name']) > 0)
					{
						$res[$i]['middle_name'] = $res[$i]['middle_name'];
					}
					else
					{
						$res[$i]['middle_name'] = " ";
					}

					if($res[$i]['admission_date'] != '0000-00-00 00:00:00')
					{
						$res[$i]['admission_date'] = date('d.m.Y', strtotime($res[$i]['admission_date']));
					}
					else
					{
						$res[$i]['recording_date'] = "-";
					}

					if($res[$i]['recording_date'] != '0000-00-00 00:00:00')
					{
						$res[$i]['recording_date'] = date('d.m.Y', strtotime($res[$i]['recording_date']));
					}
					else
					{
						$res[$i]['recording_date'] = "-";
					}

					if($res[$i]['birthd'] != '0000-00-00 00:00:00')
					{
						$res[$i]['birthd'] = date('d.m.Y', strtotime($res[$i]['birthd']));
					}
					else
					{
						$res[$i]['birthd'] = "-";
					}

					$res[$i]['birthd'] = Pms_CommonData::hideInfo($res[$i]['birthd'], $res[$i]['isadminvisible']);

					$res[$i]['id'] = Pms_Uuid::encrypt($res[$i]['id']);
				}
			}
			else
			{
				$res = array();
			}

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "searchdropdiv";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['refs'] = $res;

			echo json_encode($response);
			exit;
		}

		public function patientlocationAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpId($decid);
			$this->view->pid = $_GET['id'];
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			if($_GET['delid'] > 0)
			{
				$loca = Doctrine::getTable('PatientLocation')->find($_GET['delid']);
				$loca->delete();

				$this->_redirect(APP_BASE . "patient/patientlocation?id=" . $_GET['id']);
			}

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientlocation', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$decid = Pms_Uuid::decrypt($_GET['id']);
			$epid = Pms_CommonData::getEpidFromId($decid);

			$loca = new PatientLocation();
			$locaarray = $loca->getPatientLocations($ipid);

			$grid = new Pms_Grid($locaarray, 1, count($locaarray), "listpatientlocation.html");
			$this->view->location = $grid->renderGrid();

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function doctorletterAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$iscl = Pms_Plugin_Acl::getClientTabmenuAccess($logininfo->clientid);

			$cl = new Client();
			$clarr = Pms_CommonData::getClientData($logininfo->clientid);

			$team_addr = $clarr[0]['client_name'];

			if(!empty($clarr[0]['street1']))
			{
				$team_addr .= ', ' . $clarr[0]['street1'];
			}

			if(!empty($clarr[0]['postcode']))
			{
				$team_addr .= ', ' . $clarr[0]['postcode'];
			}

			if(!empty($clarr[0]['city']))
			{
				$team_addr .= ' ' . $clarr[0]['city'];
			}
			$this->view->client_city = $clarr[0]['city'];
			$this->view->team_address = $team_addr;
			/* ######################################################### */
			if($this->getRequest()->isPost())
			{
				$this->_redirect(APP_BASE . "patient/doctorletteradd?type=" . $_POST['lettertype'] . "&id=" . $_GET['id']);
			}

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('doctorletter', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if($_GET['pdf'] == 1)
			{
				if(!$_REQUEST['type'])
				{
					$dl = Doctrine_Query::create()
						->select("*")
						->from('DoctorLetter')
						->where("id= ?", $_GET['lid']);
					$dl_det = $dl->fetchArray();
					$dl_type = $dl_det[0]['lettertype'];
				}
				else
				{
					$dl_type = $_REQUEST['type'];
				}

				switch($dl_type)
				{
					case 1 : $pdfname = "doctorletterpdf1";
						break;
					case 2 : $pdfname = "doctorletterpdf2";
						break;
					case 3 : $pdfname = "doctorletterpdf3";
						break;
					case 4 : $pdfname = "doctorletterpdf4";
						break;
					case 5 : $pdfname = "doctorletterpdf5";
						break;
					case 6 : $pdfname = "doctorletterpdf6";
						break;
					case 7 : $pdfname = "doctorletterpdf7";
						break;
					case 12 : $pdfname = "doctorletterpdf12";
						break;
					case 14 : $pdfname = "doctorletterpdf14";
						break;
					case 15 : $pdfname = "doctorletterpdf15";
						break;
					case 17 : $pdfname = "doctorletterpdf17";
						break;
					case 18 : $pdfname = "doctorletterpdf18";
						break;
					case 19 : $pdfname = "doctorletterpdf19";
						break;
					case 20 : $pdfname = "doctorletterpdf20";
						break;
					case 21 : $pdfname = "doctorletterpdf21";
						break;
					case 22 : $pdfname = "doctorletterpdf22";
						break;
					case 23 : $pdfname = "doctorletterpdf23";
						break;
					case 24 : $pdfname = "doctorletterpdf24";
						break;
					case 25 : $pdfname = "doctorletterpdf25";
						break;
					case 26 : $pdfname = "doctorletterpdf26";
						break;
					default : break;
				}

				$filename = $this->generateLetterPdf(2, $_GET['lid'], $pdfname);
				$this->_redirect(APP_BASE . "patient/doctorletter?id=" . $_GET['id'] . "");
			}

			$user_q = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0 and isactive=0');
			$user_array = $user_q->fetchArray();

			foreach($user_array as $k => $user_d)
			{
				$user_details[$user_d['id']]['name'] = $user_d['user_title']." ".$user_d['last_name'] . ', ' . $user_d['first_name'];
			}

			$ipid = Pms_CommonData::getIpid($decid);

			$loca_faxvor = Doctrine_Query::create()
				->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
				AES_DECRYPT(content1,'" . Zend_Registry::get('salt') . "') as content1,
				AES_DECRYPT(content2,'" . Zend_Registry::get('salt') . "') as content2,
				AES_DECRYPT(content3,'" . Zend_Registry::get('salt') . "') as content3,
				AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address")
				->from('DoctorLetterFaxvor')
				->where("ipid= ?", $ipid);
			$loca_faxvorexec = $loca_faxvor->execute();
			$loca_faxvorarray = $loca_faxvorexec->toArray();

			$loca_todes = Doctrine_Query::create()
				->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
				AES_DECRYPT(content1,'" . Zend_Registry::get('salt') . "') as content1,
				AES_DECRYPT(content2,'" . Zend_Registry::get('salt') . "') as content2,
				AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address")
				->from('DoctorLetterTodes')
				->where("ipid= ?", $ipid);
			$loca_todesexec = $loca_todes->execute();
			$loca_todesarray = $loca_todesexec->toArray();

			$loca = Doctrine_Query::create()
				->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
		AES_DECRYPT(content,'" . Zend_Registry::get('salt') . "') as content,
		AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address")
				->from('DoctorLetter')
				->where("ipid= ?", $ipid);
			$locaexec = $loca->execute();
			$loca_allarray = $locaexec->toArray();

			$letters = Doctrine_Query::create()
				->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
		AES_DECRYPT(content1,'" . Zend_Registry::get('salt') . "') as content,
		AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address")
				->from('DoctorLetterZapv')
				->where("ipid= ?", $ipid);
			$zapv_letters = $letters->fetchArray();

			$locaarray = array_merge($loca_allarray, $loca_faxvorarray, $loca_todesarray, $zapv_letters);
			$locaarray = $this->array_sort($locaarray, 'letter_date', SORT_ASC);

			foreach($locaarray as $key => $dvalue)
			{
				$locaarray[$key]['username'] = $user_details[$dvalue['create_user']]['name'];
			}

			$grid = new Pms_Grid($locaarray, 1, count($locaarray), "listdoctorletter.html");
			$this->view->location = $grid->renderGrid();
			$this->view->docletterclass = "active";

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$letters = new DoctorLettersPermissions();
			$this->view->lettersarray = $letters->getClientLetters($logininfo->clientid);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function doctorletteraddAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);

			if(empty($_GET['type']))
			{
				$_GET['type'] = "1";
			}

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$cl = new Client();
			$clarr = Pms_CommonData::getClientData($clientid);

			$team_addr = $clarr[0]['client_name'];

			if(!empty($clarr[0]['street1']))
			{
				$team_addr .= ', ' . $clarr[0]['street1'];
			}

			if(!empty($clarr[0]['postcode']))
			{
				$team_addr .= ', ' . $clarr[0]['postcode'];
			}

			if(!empty($clarr[0]['city']))
			{
				$team_addr .= ' ' . $clarr[0]['city'];
			}
			$this->view->client_city = $clarr[0]['city'];
			$this->view->team_address = $team_addr;
			/* ######################################################### */

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('doctorletter', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			//addressbook requirements START
			$adminvisible = PatientMaster::getAdminVisibility($ipid);
			if(!$adminvisible && $logininfo->usertype == 'SA')
			{
				$hide_patient_tab = true;
			}
			else
			{
				$hide_patient_tab = false;
			}
			$this->view->hide_patient_tab = $hide_patient_tab;

// 			$famdoc = FamilyDoctor::getFamilyDoctors($ipid);
// 			$this->view->fam_doctor = sizeof($famdoc);
// 			$this->view->fam_doctor_id = $famdoc[0]['id'];
// 			$this->view->practice = $famdoc[0]['practice'];
// 			$this->view->first_name = $famdoc[0]['first_name'];
// 			$this->view->last_name = $famdoc[0]['last_name'];
// 			$this->view->title = $famdoc[0]['title'];
// 			$this->view->street1 = $famdoc[0]['street1'];
// 			$this->view->zip = $famdoc[0]['zip'];
// 			$this->view->city = $famdoc[0]['city'];
// 			$this->view->phone_practice = $famdoc[0]['phone_practice'];
// 			$this->view->phone_cell = $famdoc[0]['phone_cell'];
// 			$this->view->fax = $famdoc[0]['fax'];

			
			// Hausarzt
			$famdoc = FamilyDoctor::getFamilyDoctors($ipid);
			$this->view->fam_doctor = sizeof($famdoc);
			$fam_doctor['practice'] = $famdoc[0]['practice'];
			$fam_doctor['first_name'] = $famdoc[0]['first_name'];
			$fam_doctor['last_name'] = $famdoc[0]['last_name'];
			$fam_doctor['salutation'] = $famdoc[0]['salutation'];
			$fam_doctor['title'] = $famdoc[0]['title'];
			$fam_doctor['street1'] = $famdoc[0]['street1'];
			$fam_doctor['zip'] = $famdoc[0]['zip'];
			$fam_doctor['city'] = $famdoc[0]['city'];
			$fam_doctor['phone_practice'] = $famdoc[0]['phone_practice'];
			$fam_doctor['phone_cell'] = $famdoc[0]['phone_cell'];
			$fam_doctor['fax'] = $famdoc[0]['fax'];
			$fam_doctor['email'] = $famdoc[0]['email'];
			$fam_doctor['doctornumber'] = $famdoc[0]['doctornumber'];
			$fam_doctor['medical_speciality'] = $famdoc[0]['medical_speciality'];
			$fam_doctor['comments'] = $famdoc[0]['comments'];
			$this->view->family_doctor = $fam_doctor;
			$this->view->fam_doctor_id = $famdoc[0]['id'];
			
			//Ansprechpartner
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);

			$familydegree = new FamilyDegree();
			$cnt_degree_array = $familydegree->getFamilyDegrees(1);

			$this->view->degree = $cnt_degree_array;

			$this->view->patient_contacts = $pcs;

			//Pflegedienst
			$pfleg = Pflegedienstes::getPflegedienstes($ipid);
			if($pfleg > 0)
			{
				$this->view->pat_pfleg = $pfleg;
			}
				
			// Pharmacy
			$pharmacy = new PatientPharmacy();
			$pharm_pat = $pharmacy->getPatientPharmacy($ipid);
			if(sizeof($pharm_pat) > 0){
				$this->view->pat_pharmacy = $pharm_pat;
			}
				
			
				
			//Krankenkassen
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);
			$this->view->patient_healthinsurance = $phi;
			
				
			//Facharzt
			$m_specialists_types = new SpecialistsTypes();
			$specialists_types  =$m_specialists_types->get_specialists_types($logininfo->clientid);
				
			if(!empty($specialists_types)){
				foreach($specialists_types as $k=>$tp){
					$s_type[$tp['id']] = $tp['name'];
				}
			}
			$this->view->s_type =$s_type;
			$specialists = new PatientSpecialists();
			$specialists_arr = $specialists->get_patient_specialists($ipid, true);
				
			if(count($specialists_arr))
			{
				$this->view->patient_specialists = $specialists_arr;
			}
			
			
			//Sanitatshauser
			$m_supplies =  new PatientSupplies();
			$p_spupplies =$m_supplies->getPatientSupplies($ipid);
			if(count($p_spupplies))
			{
				$this->view->patient_spupplies = $p_spupplies;
			}
				
			//sonst. Versorger
			$suppliers = new PatientSuppliers();
			$pat_suppliers = $suppliers->getPatientSuppliers($ipid);
			if(sizeof($pat_suppliers) > 0)
			{
				$this->view->patient_suppliers = $pat_suppliers;
			}
				
			//Physiotherapist
			$physiotherapists = new PatientPhysiotherapist();
			$pat_physio = $physiotherapists->getPatientPhysiotherapist($ipid);
			if(sizeof($pat_physio) > 0)
			{
				$this->view->patient_physioterapeuten = $pat_physio;
			}
			
			//Homecare
			$m_homecare = new PatientHomecare();
			$pat_homecare = $m_homecare->getPatientHomecare($ipid);
			if(sizeof($pat_homecare) > 0)
			{
				$this->view->patient_homecare = $pat_homecare;
			}
			
			
			
			
			
			
			
			//addressbook requirements END
// 			$ipid = Pms_CommonData::getIpid($decid);

			if($_GET['type'] > 0)
			{
				switch($_GET['type'])
				{
					case 1 : $this->_helper->viewRenderer('doctorletteradd1');
						$pdfname = "doctorletterpdf1";
						break;
					case 2 : $this->_helper->viewRenderer('doctorletteradd2');
						$pdfname = "doctorletterpdf2";
						break;
					case 3 : $this->_helper->viewRenderer('doctorletteradd3');
						$pdfname = "doctorletterpdf3";
						break;
					case 4 : $this->_helper->viewRenderer('doctorletteradd4');
						$pdfname = "doctorletterpdf4";
						break;
					case 5 : $this->_helper->viewRenderer('doctorletteradd5');
						$pdfname = "doctorletterpdf5";
						break;
					case 6 : $this->_helper->viewRenderer('doctorletteradd6');
						$pdfname = "doctorletterpdf6";
						break;
					case 7 : $this->_helper->viewRenderer('doctorletteradd7');
						$pdfname = "doctorletterpdf7";
						break;
					case 12 : $this->_helper->viewRenderer('doctorletteradd12');
						$pdfname = "doctorletterpdf12";
						break;
					case 14 : $this->_helper->viewRenderer('doctorletteradd14');
						$pdfname = "doctorletterpdf14";
						break;
					case 15 : $this->_helper->viewRenderer('doctorletteradd15');
						$pdfname = "doctorletterpdf15";
						break;
					case 17 : $this->_helper->viewRenderer('doctorletteradd17');
						$pdfname = "doctorletterpdf17";
						break;
					case 18 : $this->_helper->viewRenderer('doctorletteradd18');
						$pdfname = "doctorletterpdf18";
						break;
					case 19 : $this->_helper->viewRenderer('doctorletteradd19');
						$pdfname = "doctorletterpdf19";
						break;
					case 20 : $this->_helper->viewRenderer('doctorletteradd20');
						$pdfname = "doctorletterpdf20";
						break;
					case 21 : $this->_helper->viewRenderer('doctorletteradd21');
						$pdfname = "doctorletterpdf21";
						break;
					case 22 : $this->_helper->viewRenderer('doctorletteradd22');
						$pdfname = "doctorletterpdf22";
						break;
					case 23 : $this->_helper->viewRenderer('doctorletteradd23');
						$pdfname = "doctorletterpdf23";
						break; //ZAPV Erstverordung
					case 24 : $this->_helper->viewRenderer('doctorletteradd24');
						$pdfname = "doctorletterpdf24";
						break; //ZAPV Folgeverordung
					case 25 : $this->_helper->viewRenderer('doctorletteradd25');
						$pdfname = "doctorletterpdf25";
						break; //Schreiben bremen
					case 26 : $this->_helper->viewRenderer('doctorletteradd26');
						$pdfname = "doctorletterpdf26";
						break; //Doctor letter - visit
					default : break;
				}
			}

			$pm = new PatientMaster();
			$ptarr = $pm->getMasterData($decid, 0);

			$this->view->errorclass = "ErrorDivHide";
			$patientid = Pms_CommonData::getEpid($ptarr['ipid']);
			$this->view->subject = $this->view->translate('lettersubject') . $ptarr['first_name'] . " " . $ptarr['last_name'] . " (" . $ptarr['birthd'] . ")";
			if($_GET['type'] == 15)
			{
				$this->view->subject = $this->view->translate('lettersubject15');
			}

			if($_GET['type'] == 2)
			{
				$this->view->subject = $this->view->translate('lettersubject_gender') . $ptarr['first_name'] . " " . $ptarr['last_name'] . " (" . $ptarr['birthd'] . ")";
			}

			if($_GET['type'] == 3)
			{

				$this->view->subject = $this->view->translate('lettersubject_gender') . $ptarr['first_name'] . " " . $ptarr['last_name'] . " (" . $ptarr['birthd'] . ")";
			}

			if($_GET['type'] == 4)
			{

				$this->view->subject = $this->view->translate('lettersubject_gender') . $ptarr['first_name'] . " " . $ptarr['last_name'] . " (" . $ptarr['birthd'] . ")";
			}

			if($_GET['type'] == 5)
			{
//			$this->view->subject = $this->view->translate('lettersubject5') . $patientid . "  ";
				$this->view->subject = $this->view->translate('lettersubject5') . $ptarr['first_name'] . " " . $ptarr['last_name'] . "";
			}

			if($_GET['type'] == 6)
			{
				$this->view->subject = $this->view->translate('lettersubject6') . $ptarr['first_name'] . " " . $ptarr['last_name'] . "";
			}

			if($_GET['type'] == 7)
			{
				$this->view->subject = $this->view->translate('lettersubject7') . $patientid . "  ";
			}

			if($_GET['type'] == 21)
			{
				$this->view->letter_title = '%titleswitchbygender ' . $ptarr['first_name'] . ' ' . $ptarr['last_name'] . ', ';
			}

			if($_GET['type'] == 23)
			{
				$this->view->subject = 'Erstverordnung ' . $ptarr['last_name'] . ' ' . $ptarr['first_name'] . ', ';
			}

			if($_GET['type'] == 24)
			{
				$this->view->subject = 'Folgeverordnung ' . $ptarr['last_name'] . ' ' . $ptarr['first_name'] . ', ';
			}

			$this->view->docletterclass = "active";
			$this->view->patientfirstname = $ptarr['first_name'];
			$this->view->patientlastname = $ptarr['last_name'];
			$this->view->patientaddress = $ptarr['street1'];
			$this->view->patientcity = $ptarr['city'];
			$this->view->patientbirth = $ptarr['birthd'];

			$cl = Pms_CommonData::getClientData($logininfo->clientid);
			$clientcity = $cl[0]['city'];
			$clientzip = $cl[0]['postcode'];
			$clientstreet = $cl[0]['street1'];
			$clientfax = $cl[0]['fax'];
			$clientphone = $cl[0]['phone'];
			$clienttemname = $cl[0]['team_name'];
			$clientname = $cl[0]['lastname'] . " , " . $cl[0]['firstname'];
			$this->view->clientaddress = $cl[0]['firstname'] . " " . $cl[0]['lastname'] . " | " . $cl[0]['street1'] . " | " . $cl[0]['city'];

			$recorduser = Doctrine::getTable('User')->find($ptarr['create_user']);
			if($recorduser)
			{
				$recorduserarray = $recorduser->toArray();
				$this->view->letter_username = $recorduserarray['last_name'] . ", " . $recorduserarray['first_name'];
			}

			/* ------------------------------------------------------------- */
			/* --------------------Letters addresses ---------------------- */
			/* ------------------------------------------------------------- */
			if($ptarr['familydoc_id'] > 0 && !$this->getRequest()->isPost())
			{
				$fdoc = Doctrine_Core::getTable('FamilyDoctor')->find($ptarr['familydoc_id']);
				if($fdoc)
				{
					$docarr = $fdoc->toArray();
					$doc_title = "";
					$doc_salutation = "";
					if($docarr['title'] == "")
					{
						$doc_title = $docarr['title'];
					}
					else
					{
						$doc_title = $docarr['title'] . " ";
					}
					$doc_salutation = $docarr['salutation'];
					$doccity = $docarr['city'] . ", ";
				}
			}

			if(empty($docarr['last_name']) && empty($docarr['first_name']) && empty($docarr['street1']) && empty($docarr['zip']) && empty($docarr['city']))
			{

				$address = "";
			}
			else
			{
				$address = $doc_title . "" . $docarr['first_name'] . " " . $docarr['last_name'] . " \r\n" . $docarr['street1'] . "\r\n" . $docarr['zip'] . " " . $docarr['city'];
			}
			$this->view->address = trim($address);

			$familydoctor_name = $doc_title . $docarr['first_name'] . " " . $docarr['last_name'];
			$familydoctor_name = trim($familydoctor_name);

			$this->view->letter_date = date('d.m.Y', time());
			$this->view->letter_docfax = $docarr['fax'];
			$this->view->pid = $_GET['id'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$pathealthinsurancenr = "";
			if(strlen($healthinsu_array[0]['insurance_no']) > 0 && $healthinsu_array[0]['insurance_no'] != '0')
			{
				$pathealthinsurancenr = $healthinsu_array[0]['insurance_no'];
			}
			else
			{
				$pathealthinsurancenr = "--";
			}

			if(!empty($healthinsu_array[0]['ins_contactperson']) && $healthinsu_array[0]['ins_contactperson'] != '0')
			{
				$pat_insurance_contactperson = $healthinsu_array[0]['ins_contactperson'];
			}
			else
			{
				$pat_insurance_contactperson = "";
			}

			if(!empty($healthinsu_array[0]['companyid']) || $healthinsu_array[0]['companyid'] != '0')
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				if($helathins)
				{
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['ins_street']))
					{
						$pat_insurance_street = $healtharray['street1'];
					}
					else
					{
						$pat_insurance_street = $healthinsu_array[0]['ins_street'];
					}
					if(empty($healthinsu_array[0]['ins_city']))
					{
						$pat_insurance_city = $healtharray['city'];
					}
					else
					{
						$pat_insurance_city = $healthinsu_array[0]['ins_city'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$pat_insurance_zip = $healtharray['zip'];
					}
					else
					{
						$pat_insurance_zip = $healthinsu_array[0]['ins_zip'];
					}

					if(empty($healthinsu_array[0]['ins_phonefax']))
					{
						$pat_insurance_phonefax = $healtharray['phonefax'];
					}
					else
					{
						$pat_insurance_phonefax = $healthinsu_array[0]['ins_phonefax'];
					}
				}
			}
			else
			{
				$pat_insurance_street = "";
				$pat_insurance_zip = "";
				$pat_insurance_city = "";
				$pat_insurance_phonefax = "";
			}

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{

				$insucom = new HealthInsurance();
				$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);

				$insurance_company_name = $insucomarray[0]['name'];
				$insurance_company_street = $insucomarray[0]['street1'];
				if($insucomarray[0]['zip'] != 0)
				{
					$insurance_company_zip = $insucomarray[0]['zip'];
				}
				else
				{
					$insurance_company_zip = '';
				}
				$insurance_company_city = $insucomarray[0]['city'];
			}
			else if($healthinsu_array[0]['companyid'] == '0')
			{
				$insurance_company_name = $healthinsu_array[0]['company_name'];
			}

			/* Case letter 14: Briefvorlage Tod des Patienten */
			if($_GET['type'] == '14')
			{
				if(empty($insurance_company_name) && empty($insurance_company_street) && empty($insurance_company_zip) && empty($insurance_company_city))
				{
					$this->view->address = "";
					$this->view->letter_docfax = "";
				}
				else
				{
					$this->view->address = $insurance_company_name . " \r\n" . $insurance_company_street . "\r\n" . $insurance_company_zip . " " . $insurance_company_city;
					$this->view->letter_docfax = $pat_insurance_phonefax;
				}
			}

			/* Case letter 15: Kostenübernahme */
			if($_GET['type'] == '15')
			{
				if(empty($insurance_company_name) && empty($pat_insurance_contactperson) && empty($pat_insurance_street) && empty($pat_insurance_zip) && empty($pat_insurance_city))
				{
					$this->view->address = "";
					$this->view->letter_docfax = "";
				}
				else
				{
					$this->view->address = $insurance_company_name . " \r\n" . $pat_insurance_contactperson . " \r\n" . $pat_insurance_street . "\r\n" . $pat_insurance_zip . " " . $pat_insurance_city;
					$this->view->letter_docfax = $pat_insurance_phonefax;
				}
			}
			/* Case letter 12: Klinikum Fürth */
			if($_GET['type'] == '12')
			{
				$this->view->letter_docfax = "";
			}

			/* Case letter 18 || 25: FAX-Mitteilung || Schreiben-Mitteilung */
			if($_GET['type'] == '18' || $_GET['type'] == '25')
			{
				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$hi2sub = new PatientHealthInsurance2Subdivisions();
					$sub_details = $hi2sub->health_insurance_subdivision($ipid, $healthinsu_array[0]['companyid'], "sapv");

					$health_insurance_sapv = "";

					if(!empty($sub_details['name']))
					{
						$health_insurance_sapv .= $sub_details['name'] . "\r\n";
					}

					if(!empty($sub_details['contact_person']))
					{
						$health_insurance_sapv .= $sub_details['contact_person'] . "\r\n";
					}

					if(!empty($sub_details['street1']))
					{
						$health_insurance_sapv .= $sub_details['street1'] . "\r\n";
					}

					if(!empty($sub_details['zip']))
					{
						$health_insurance_sapv .= $sub_details['zip'] . ", ";
					}

					if(!empty($sub_details['city']))
					{
						$health_insurance_sapv .= $sub_details['city'] . " ";
					}

					if(!empty($sub_details['fax']))
					{
						$letter_docfax = $sub_details['fax'] . " ";
					}
				}

				$this->view->address = $health_insurance_sapv;
				$this->view->letter_docfax = $letter_docfax;
			}

			/* Case letter 21: Unterschrift Leistungsnachweis */
			if($_GET['type'] == '21')
			{
				$parient_address .= $ptarr['first_name'] . " " . $ptarr['last_name'] . "\r\n";

				if(!empty($ptarr['street1']))
				{
					$parient_address .= $ptarr['street1'] . "\r\n";
				}

				if(!empty($ptarr['zip']))
				{
					$parient_address .= $ptarr['zip'] . " ";
				}

				if(!empty($ptarr['city']))
				{
					$parient_address .= $ptarr['city'] . " ";
				}

				$this->view->address = $parient_address;
			}

			/* Case letter 22: Briefvorlage Tod des Patienten - copy after 14 */
			if($_GET['type'] == '22')
			{
				if(empty($insurance_company_name) && empty($insurance_company_street) && empty($insurance_company_zip) && empty($insurance_company_city))
				{
					$this->view->address = "";
					$this->view->letter_docfax = "";
				}
				else
				{
					$this->view->address = $insurance_company_name . " \r\n" . $insurance_company_street . "\r\n" . $insurance_company_zip . " " . $insurance_company_city;
					$this->view->letter_docfax = $pat_insurance_phonefax;
				}
			}

			/* Case letter 23: Erstverordnung - copy after 14 */
			if($_GET['type'] == '23')
			{
				$this->view->letter_docfax = $docarr['fax'];
			}

			/* Case letter 24: Folgeverordnung - copy after 14 */
			if($_GET['type'] == '24')
			{
				$this->view->letter_docfax = $docarr['fax'];
			}

			/* ---------------------------------------------------------- */
			/* --------------------Patient Assigned users---------------- */
			/* ---------------------------------------------------------- */
			$epid = Pms_CommonData::getEpidFromId($decid);
			/* --------------- get all asigned users qpa mapping ----------- */
			$assigned_users_q = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('clientid = ?', $clientid)
				->andWhere('epid = ?', $epid);
			$assigned_users_res = $assigned_users_q->fetchArray();

			$a_users[] = '999999999';
			foreach($assigned_users_res as $k_au => $v_au)
			{
				$a_users[] = $v_au['userid'];
			}

			/* --------------- get all  users details ----------- */
			$users_det_q = Doctrine_Query::create()
				->select('*')
				->from('User INDEXBY id')
				->andWhere('isdelete="0"');
			$users_det_res = $users_det_q->fetchArray();

			/* --------------- get client groups ----------- */
			$usergroup = new Usergroup();
			$c_groups = $usergroup->getClientGroups($clientid);
			foreach($c_groups as $k_gr => $v_gr)
			{
				$client_groups[$v_gr['id']] = $v_gr['groupname'];
			}

			$assigned_users = "";
			$assigned_users .='<table width="100%" border="0" style="border:none; font-size: 10pt; line-height: 20px;">';
			foreach($users_det_res as $k_as_user => $v_as_user)
			{
				$users_det_res[$k_as_user]['groupname'] = $client_groups[$v_as_user['groupid']];
				$cl_user_details[$k_as_user]['name'] = $v_as_user['first_name'] . "&nbsp;" . $v_as_user['last_name'];
				$cl_user_details[$k_as_user]['groupname'] = $client_groups[$v_as_user['groupid']];
				$cl_user_details[$k_as_user]['phone'] = $v_as_user['phone'];
				$cl_user_details[$k_as_user]['mobile'] = $v_as_user['mobile'];

				if(in_array($k_as_user, $a_users))
				{
					$assigned_users .="<tr>";
					$assigned_users .= '<td style="border:none; width:150px;">' . $cl_user_details[$k_as_user]['groupname'] . '</td>';
					$assigned_users .= '<td style="border:none; width:360px;">' . $cl_user_details[$k_as_user]['name'] . '</td>';
					$assigned_users .= '<td style="border:none; width:310px;">';
					if(!empty($cl_user_details[$k_as_user]['phone']))
					{
						$assigned_users .= '' . $cl_user_details[$k_as_user]['phone'];
					}
					if(!empty($cl_user_details[$k_as_user]['mobile']))
					{
						$assigned_users .= ' / ' . $cl_user_details[$k_as_user]['mobile'];
					}
					$assigned_users .="</td>";
					$assigned_users .="</tr>";
				}
			}
			$assigned_users .="</table>";

			/* ---------------------------------------------------------- */
			/* ---------- Visit information ------------------- */
			/* ---------------------------------------------------------- */
			if(!empty($_REQUEST['visit_id']) && !empty($_REQUEST['visit_type']))
			{
				$vid = $_REQUEST['visit_id'];
				$vtype = $_REQUEST['visit_type'];
				if($vtype == "wl_doctor_visit" || $vtype == "kvno_doctor_visit" || $vtype == "sa_doctor_visit")
				{
					$visit_table = "KvnoDoctor";
					$visit_details = KvnoDoctor::get_visit_by_id($vid);

					$letter_visit['date'] = date('d.m.Y', strtotime($visit_details[$vid]['start_date']));
					$letter_visit['date_time'] = date('H:i', strtotime($visit_details[$vid]['start_date'])) . ' - ' . date('H:i', strtotime($visit_details[$vid]['end_date'])) . ' ' . date('d.m.Y', strtotime($visit_details[$vid]['start_date']));
					$letter_visit['user_name'] = $cl_user_details[$visit_details[$vid]['create_user']]['name'];
					$letter_visit['comment'] = $visit_details[$vid]['kvno_sonstiges'];
					$letter_visit['user_phone'] = $cl_user_details[$visit_details[$vid]['create_user']]['phone'];
				}
				else if($vtype == "bayern_doctor_visit")
				{
					$visit_table = "BayernDoctorVisit";

					$visit_details = BayernDoctorVisit::get_visit_by_id($vid);

					$letter_visit['date'] = date('d.m.Y', strtotime($visit_details[$vid]['start_date']));
					$letter_visit['date_time'] = date('H:i', strtotime($visit_details[$vid]['start_date'])) . ' - ' . date('H:i', strtotime($visit_details[$vid]['end_date'])) . ' ' . date('d.m.Y', strtotime($visit_details[$vid]['start_date']));
					$letter_visit['user_name'] = $cl_user_details[$visit_details[$vid]['create_user']]['name'];
					$letter_visit['comment'] = $visit_details[$vid]['sonstiges'];
					$letter_visit['user_phone'] = $cl_user_details[$visit_details[$vid]['create_user']]['phone'];
				}
			}


			if($_GET['type'] == 26)
			{
// 			$this->view->subject = 'Arztbrief: Besuchsformular '.$letter_visit['date_time'].':  ' . $ptarr['last_name'] . ' ' . $ptarr['first_name'] . ', ';
				$this->view->subject = 'Besuchsformular ' . $letter_visit['date_time'] . ' ';
			}



			/* ---------------------------------------------------------- */
			/* --------------------Patient Medication ------------------- */
			/* ---------------------------------------------------------- */
			$pdrug = new PatientDrugPlan();
			$drugarray = $pdrug->getPatientDrugPlan($decid);

			$comma = "";
			foreach($drugarray as $key => $val)
			{
				$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
				if($medca)
				{

					$medcaarray = $medca->toArray();
					$medication_list.= $comma . $medcaarray['name'] . " | " . $val['dosage'];

					if($val['isbedarfs'] == '1' && $val['isivmed'] == '0' && $val['isschmerzpumpe'] == '0')
					{
						if(!empty($val['comments']))
						{
							$bedarf_medication_list .= $comma . $medcaarray['name'] . " | " . $val['dosage'] . " | " . $val['comments'];
						}
						else
						{
							$bedarf_medication_list .= $comma . $medcaarray['name'] . " | " . $val['dosage'];
						}
					}


					if($val['isivmed'] == '1' && $val['isbedarfs'] == '0' && $val['isschmerzpumpe'] == '0')
					{
						if(!empty($val['comments']))
						{
							$ivmed_medication_list .= $comma . $medcaarray['name'] . " | " . $val['dosage'];
						}
						else
						{
							$ivmed_medication_list .= $comma . $medcaarray['name'];
						}
					}

					if($val['isivmed'] == '0' && $val['isbedarfs'] == '0' && $val['isschmerzpumpe'] == '0')
					{
						if(!empty($val['comments']))
						{
							$regular_medication_list .= $comma . $medcaarray['name'] . " | " . $val['dosage'] . " | " . $val['comments'];
						}
						else
						{
							$regular_medication_list .= $comma . $medcaarray['name'] . " | " . $val['dosage'];
						}
					}

					if($val['isivmed'] == '0' && $val['isbedarfs'] == '0' && $val['isschmerzpumpe'] == '1')
					{
						if(!empty($val['comments']))
						{
							$isschmerzpumpe_medication_list .= $comma . $medcaarray['name'] . " | " . $val['dosage'];
						}
						else
						{
							$isschmerzpumpe_medication_list .= $comma . $medcaarray['name'];
						}
					}

					$comma = "<br/>";
				}
			}

			/* ------------------------------------------------------------- */
			/* --------------------Patient Main Diagnosis ------------------ */
			/* ------------------------------------------------------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						if(!empty($valdia['icdnumber']))
						{
							$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						}
						else
						{
							$diagnosis .= $comma . $valdia['diagnosis'];
						}
						$comma = ", ";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$main_diagnosis = $diagnosis;
			}

			/* ------------------------------------------------------------- */
			/* --------------------Patient Side Diagnosis ------------------ */
			/* ------------------------------------------------------------- */
			$dg = new DiagnosisType();
			$abb1 = "'ND'";
			$ddarr1 = $dg->getDiagnosisTypes($logininfo->clientid, $abb1);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr1 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray1 = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray1) > 0)
			{
				$comma = "";
				$side_diagnosis_str = "";
				foreach($dianoarray1 as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						if(!empty($valdia['icdnumber']))
						{
							$side_diagnosis_str .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						}
						else
						{
							$side_diagnosis_str .= $comma . $valdia['diagnosis'];
						}
						$comma = ", ";
					}
				}
			}

			if(strlen($side_diagnosis_str) > 0)
			{
				$side_diagnosis = $side_diagnosis_str;
			}

			/* ------------------------------------------------------------- */
			/* --------------------Patient Last Symptomatology ------------- */
			/* ------------------------------------------------------------- */
			$symp = new Symptomatology();
			$symptomarr = $symp->getPatientSymptpomatologyLast($ipid);

			if(empty($symptomarr))
			{
				$sympval = new SymptomatologyValues();
				$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set
				foreach($set_details as $key => $sym)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
				}
			}
			else
			{
				foreach($symptomarr as $key => $sym)
				{
					$symptomarr[$key]['sym_desc_array'] = $sym['sym_description'];
					$symptomarr[$key]['sym_description'] = utf8_encode($sym['sym_description']['value']);
				}
			}

			$comma = "";
			foreach($symptomarr as $key => $val)
			{
				if(!empty($val['input_value']))
				{
					$latest_symptomatistics.= $comma . $val['sym_description'] . ": " . $val['input_value'];
					$comma = ", ";
				}
			}

			/* ------------------------------------------------------------- */
			/* --------------------Patient Befunde entries ----------------- */
			/* ------------------------------------------------------------- */
			$course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('ipid = ?', $ipid)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'B'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$findings_array = $course->fetchArray();

			$comma = "";
			foreach($findings_array as $key => $val)
			{
				$findings_list.= $comma . $val['course_title'];
				$comma = ", ";
			}

			/* ----------------------------------------------------------- */
			/* ---------------------- Patient All Sapvs  ----------------- */
			/* ----------------------- Used in (23, 24) ------------------ */
			$sapv = new SapvVerordnung();

			$all_sapv_data = $sapv->get_all_sapvs($ipid);

			if(count($all_sapv_data) > '0')
			{
				foreach($all_sapv_data as $k_sapv => $v_sapv)
				{
					$sapv_falls[] = date('d.m.Y', strtotime($v_sapv['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($v_sapv['verordnungbis']));
				}

				$start_first_sapv = date('d.m.Y', strtotime($all_sapv_data[0]['verordnungam']));
			}

			$sapvarr_inactive = $sapv->getLastSapvVerordnungData($ipid);

			if($sapvarr_inactive[0]['verordnungbis'])
			{
				if($sapvarr_inactive[0]['verordnungbis'] != '0000-00-00 00:00:00')
				{
					$verordnung_bis = date('d.m.Y', strtotime($sapvarr_inactive[0]['verordnungbis']));
				}
			}
			else
			{
				$verordnung_bis = "-";
			}

			if($verordnungbis == "01.01.1970")
			{
				$verordnung_bis = "-";
			}

			/* ------------------------------------------------------------- */
			/* --------------------Patient Last Sapv  ------------------ */
			/* ------------------------------------------------------------- */
			$sapvarr = $sapv->getLastSapvVerordnungData($ipid, true);

			if($sapvarr[0]['verordnungbis'])
			{
				if($sapvarr[0]['verordnungbis'] != '0000-00-00 00:00:00')
				{
					$verordnungbis = date('d.m.Y', strtotime($sapvarr[0]['verordnungbis']));
				}
			}
			else
			{
				$verordnungbis = "-";
			}

			if($verordnungbis == "01.01.1970")
			{
				$verordnungbis = "-";
			}

			$ptarray[0]['verordnungbis'] = $verordnungbis;

			if($sapvarr[0]['status'] != 3)
			{
				$sapva = $sapv->getSapvRadios();
				$sapvstatus = $sapva[$sapvarr[0]['status']];
				$ptarray[0]['sapvstatus'] = $sapvstatus;
			}

			/* ------------------------------------------------------------- */
			/* --------------------Patient Discharge details --------------- */
			/* ------------------------------------------------------------- */
			$dis = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$dis->getSqlQuery();

			$disarray = $dis->fetchArray($params);

			$pdeath = new PatientDeath();
			$patientdeatharray = $pdeath->getPatientDeath($ipid);

			$pd = new PatientDischarge();
			$pdarr = $pd->getPatientDischarge($ipid);

			if($pdarr[0]['discharge_date'])
			{
				$dischargedate = date('d.m.Y', strtotime($pdarr[0]['discharge_date']));
			}
			else
			{
				$dischargedate = "--";
			}

			$dl = new DischargeLocation();
			$dlarr = $dl->getDischargeLocation($cl[0]['id'], 1);

			if($pdarr[0]['discharge_method'] == $disarray[0]['id']) //death
			{
				$datum_entlassung = date('d.m.Y H:i', strtotime($pdarr[0]['discharge_date']));
				$location_entlassung = $dlarr[$pdarr[0]['discharge_location']];
			}
			elseif($pdarr[0]['discharge_method'] != $disarray[0]['id'] && count($patientdeatharray) > 0) //death button
			{
				$datum_entlassung = date("d.m.Y H:i", strtotime($patientdeatharray[0]['death_date']));
				$location_entlassung = $dlarr[$pdarr[0]['discharge_location']];
			}
			else
			{
				$datum_entlassung = "--";
				$location_entlassung = "-- ";
			}


			if($_GET['type'] == 23 || $_GET['type'] == 24)
			{
				/* ----------------------------------------------------------- */
				/* --------------------- Get footer settings ----------------- */
				/* ----------------------- Used in (23, 24) ------------------ */

				$boxes = new LettersTextBoxes();
				$letter_boxes_details = $boxes->client_letter_boxes($clientid);

				$this->view->erstverordnung_footer = $letter_boxes_details[0]['erstverordnung_footer'];
				$this->view->folgeverordnung_footer = $letter_boxes_details[0]['folgeverordnung_footer'];

				/* ----------------------------------------------------------- */
				/* ---- Get last (Erstbesuch/Wiederaufnahme) contact forms ---- */
				/* ------------------- symptoms and measurement  ------------- */
				/* ----------------------- Used in (23, 24) ------------------ */
				$contact_forms = new ContactForms();
				$deleted_contact_forms = $contact_forms->get_deleted_contactforms($ipid);

				//get last erstbesuch(first visit) form type filled for this patient
				$first_visit = $contact_forms->get_action_contact_forms($ipid, $clientid, '5', $deleted_contact_forms);

				//get last wiederaufnahme form type filled for this patient
				$upcoming_visit = $contact_forms->get_action_contact_forms($ipid, $clientid, '6', $deleted_contact_forms);


				//if there are no wiederaufnahme results use last erstbesuch instead
				$fallback = false;
				if($_GET['type'] == '24')
				{
					if((empty($upcoming_visit) || count($upcoming_visit) == '0') && !empty($first_visit) && count($first_visit) > '0')
					{
						$fallback = true;
						$upcoming_visit = $first_visit;
					}
				}

				if($_REQUEST['dbg_folge'])
				{
					print_r($upcoming_visit);
				}

				//(Symptoms) process contact forms data using cf ids
				$contact_form_symptomatology = new ContactFormsSymp();
				$contac_form_symp_details = new ContactFormsSympDetails();

				$symp_zapv_details = new SymptomatologyZapvDetails();
				$zapv_details_items = $symp_zapv_details->getSymptpomatologyZapvItems();

				if($_REQUEST['dbg_folge'])
				{
					print_r($zapv_details_items);
				}


				// first visit symptomatologi data
				$first_visit_symp_data = $contact_form_symptomatology->getContactFormsSymp($first_visit['id'], $ipid);
				foreach($first_visit_symp_data as $sympid => $details)
				{
					if($details['details'] != 0)
					{
						$details_array_first[$sympid][] = $zapv_details_items[$details['details']];
					}
				}
				if(empty($details_array_first))
				{
					$details_array_first = $contac_form_symp_details->get_contact_form_symptomatology_details($first_visit['id'], true);
				}


				// upcoming visit symptomatologi data
				$upcoming_visit_symp_data = $contact_form_symptomatology->getContactFormsSymp($upcoming_visit['id'], $ipid);
				foreach($upcoming_visit_symp_data as $sympid => $details)
				{
					if($details['details'] != 0)
					{
						$details_array_upcoming[$sympid][] = $zapv_details_items[$details['details']];
					}
				}
				if(empty($details_array_upcoming))
				{
					$details_array_upcoming = $contac_form_symp_details->get_contact_form_symptomatology_details($upcoming_visit['id'], true);
				}


				if($_REQUEST['dbg_folge'])
				{
					print_r($upcoming_visit_symp_data);
					exit;
				}

				$symperm = new SymptomatologyPermissions();
				$clientsymsets = $symperm->getClientSymptomatology($clientid);

				$symp_ids[] = '99999999999';
				foreach($clientsymsets as $k_set => $v_set)
				{
					$symp_ids[] = $v_set['setid'];
				}
				$sympt_values = new SymptomatologyValues();
				$sympt_set_details = $sympt_values->getSymptpomatologyValues('4');

				foreach($first_visit_symp_data as $k_sympt => $v_sympt)
				{

					if(!empty($details_array_first[$v_sympt['symp_id']]))
					{
						$first_visit_symp_data[$v_sympt['symp_id']]['sym_details_description'] = implode(", ", $details_array_first[$v_sympt['symp_id']]);
					}
					else
					{
						$first_visit_symp_data[$v_sympt['symp_id']]['sym_details_description'] = $sympt_set_details[$v_sympt['symp_id']]['sym_description'];
					}
				}

				foreach($upcoming_visit_symp_data as $k_up_sympt => $v_up_sympt)
				{

					if(!empty($details_array_upcoming[$v_up_sympt['symp_id']]))
					{
						$upcoming_visit_symp_data[$v_up_sympt['symp_id']]['sym_details_description'] = implode(", ", $details_array_upcoming[$v_up_sympt['symp_id']]);
					}
					else
					{
						$upcoming_visit_symp_data[$v_up_sympt['symp_id']]['sym_details_description'] = $sympt_set_details[$v_up_sympt['symp_id']]['sym_description'];
					}
				}

				if(count($first_visit_symp_data) > '0')
				{
					$comma = "";
					foreach($first_visit_symp_data as $key => $val)
					{
						if(!empty($val['current_value']))
						{
							$first_visit_symptomatics_str.= $comma . $val['sym_details_description'];
							$comma = ", ";
						}
					}
				}

				if(count($upcoming_visit_symp_data) > '0')
				{
					$comma = "";
					foreach($upcoming_visit_symp_data as $key => $val)
					{
						if(!empty($val['current_value']))
						{
							$upcoming_visit_symptomatics_str.= $comma . $val['sym_details_description'];
							$comma = ", ";
						}
					}
				}

				//(Measurements) process contact forms data using cf ids
				$form_block_measures = new FormBlockMeasures();
				$measures_data = $form_block_measures->get_patients_form_block_ebmii($ipid, $first_visit['id'], true, false);

				$upcomming_visit_measures_data = $form_block_measures->get_patients_form_block_ebmii($ipid, $upcoming_visit['id'], true, false);

				$blocks_settings = new FormBlocksSettings();
				$blocks_settings_array = $blocks_settings->get_blocks_settings($clientid);

				foreach($blocks_settings_array as $k_item => $v_item)
				{
					if($v_item['block'] == 'measures')
					{
						if(in_array($v_item['id'], end($measures_data[$ipid])))
						{
							$first_visit_measures_items[] = $v_item['option_name'];
						}

						if(in_array($v_item['id'], end($upcomming_visit_measures_data[$ipid])))
						{
							$upcoming_visit_measures_items[] = $v_item['option_name'];
						}
					}
				}

				if($_GET['type'] == '23')
				{
					$this->view->measures_str = implode(', ', $first_visit_measures_items);
					$this->view->symptomatics_str = $first_visit_symptomatics_str;
				}

				if($_GET['type'] == '24')
				{
					$this->view->measures_str = implode(', ', $upcoming_visit_measures_items);
					$this->view->symptomatics_str = $upcoming_visit_symptomatics_str;
				}
			}

			$pc = new PatientCase();
			$casedata = $pc->getPatientCaseData($ipid);
			$admdate = date('d.m.Y', strtotime($casedata[0]['admission_date']));

			if($_GET['type'] == 1)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter1'));
			}

			if($_GET['type'] == 2)
			{
				$subject = $this->view->subject;
				$content = $this->view->translate('editorcontent_letter2');

				$content = str_replace("%s", $admdate, $content);
				if($ptarr['sex'] == "1")
				{
					$content = str_replace("%patientifgender", "Ihres Patienten", $content);
					$subject = str_replace("%patientifgender", "Ihres Patienten", $subject);
				}
				else
				{
					$content = str_replace("%patientifgender", "Ihrer Patientin", $content);
					$subject = str_replace("%patientifgender", "Ihrer Patientin", $subject);
				}

				$this->view->content = $content;
				$this->view->subject = $subject;
			}

			if($_GET['type'] == 3)
			{
				$subject = $this->view->subject;
				$content = $this->view->translate('editorcontent_letter3');

				if($ptarr['sex'] == "1")
				{
					$content = str_replace("%patientifgendertitle", "bei Herrn", $content);
					$subject = str_replace("%patientifgender", "Ihres Patienten", $subject);
				}
				else
				{
					$content = str_replace("%patientifgendertitle", "bei Frau", $content);
					$subject = str_replace("%patientifgender", "Ihrer Patientin", $subject);
				}

				$content = str_replace("%patientlastname", $ptarr['last_name'], $content);
				$content = str_replace("%patientfirstname", $ptarr['first_name'], $content);
				$content = str_replace("%clientfax", $clientfax, $content);
				$content = str_replace("%clientname", $clientname, $content);
				$content = str_replace("%nameofteam", $clienttemname, $content);
				$this->view->content = $content;
				$this->view->subject = $subject;
			}

			if($_GET['type'] == 4)
			{
				$content = $this->view->translate('editorcontent_letter4');
				$content = str_replace("%patientlastname", $ptarr['last_name'], $content);
				$content = str_replace("%patientfirstname", $ptarr['first_name'], $content);
				$content = str_replace("%getam", $ptarr['birthd'], $content);
				$subject = $this->view->subject;
				if($ptarr['sex'] == "1")
				{
					$subject = str_replace("%patientifgender", "Ihres Patienten", $subject);
				}
				else
				{
					$subject = str_replace("%patientifgender", "Ihrer Patientin", $subject);
				}
				$this->view->subject = $subject;
				$this->view->content1 = $this->view->translate('editorcontent_letter4_merged');
			}

			if($_GET['type'] == 5)
			{
				$this->view->subject = Pms_CommonData::br2nl($this->view->subject);
				$content = str_replace("%patientfirstname", $ptarr['first_name'], $this->view->translate('editorcontent_letter5'));
				$content = str_replace("%patientlastname", $ptarr['last_name'], $content);

				if($ptarr['sex'] == "1")
				{
					$content = str_replace("%patientifgenderswith", "bei unserem gemeinsamen <br/><br/><b> Pat.:", $content);
				}
				else
				{
					$content = str_replace("%patientifgenderswith", "bei <b>unserer gemeinsamen Patientin", $content);
				}

				$content = str_replace("%datelastsapvver", $verordnungbis, $content);
				$content = str_replace("%clientphone", $clientphone, $content);
				$content = str_replace("%nameofteam", $clienttemname, $content);
				$this->view->content = $content;
			}

			if($_GET['type'] == 6)
			{
				$content = str_replace("%patientid", $patientid, $this->view->translate('editorcontent_letter6'));
				if($ptarr['sex'] == "1")
				{
					$content = str_replace("%patientifgender", "Ihrem Patienten ", $content);
					$content = str_replace("%seiner", "seiner", $content);
					$content = str_replace("%dem", "dem Patienten ", $content);
				}
				else
				{
					$content = str_replace("%patientifgender", " Ihrer Patientin  ", $content);
					$content = str_replace("%seiner", "ihrer", $content);
					$content = str_replace("%dem", "der Patientin", $content);
				}
				$content = str_replace("%clientphone", $clientphone, $content);
				$content = str_replace("%nameofteam", $clienttemname, $content);
				$this->view->content = $content;
			}

			if($_GET['type'] == 7)
			{
				$content1 = str_replace("%patientid", $patientid, $this->view->translate('editorcontent_letter7_1'));
				if($ptarr['sex'] == "1")
				{
					$content1 = str_replace("%patientifgender", "unseres gemeinsamen Patienten, der", $content1);
				}
				else
				{
					$content1 = str_replace("%patientifgender", " unserer gemeinsamen Patientin, die ", $content1);
				}
				$content1 = str_replace("%dateofdeath", $datum_entlassung, $content1);
				$content1 = str_replace("%locationofdeath", $location_entlassung, $content1);
				$content2 = str_replace("%clientphone", $clientphone, $this->view->translate('editorcontent_letter7_2'));
				$this->view->content1 = $content1;
				$this->view->content2 = $content2;
			}

			if($_GET['type'] == 12)
			{
				$content = str_replace("%patientlastname", $ptarr['last_name'], $this->view->translate('editorcontent_letter8'));
				$content = str_replace("%patientfirstname", $ptarr['first_name'], $content);
				if($ptarr['sex'] == "1")
				{
					$content = str_replace("%appelative", "herrn", $content);
				}
				else
				{
					$content = str_replace("%appelative", "frau", $content);
				}

				$content = str_replace("%medication", $medication_list, $content);
				$content = str_replace("%dateofbirth", $ptarr['birthd'], $content);
				$content = str_replace("%adddress", $ptarr['street1'] . ', ' . $ptarr['zip'] . ' ' . $ptarr['city'], $content);

				$this->view->content = $content;
			}

			if($_GET['type'] == 14)
			{
				$patientname = $ptarr['last_name'] . ', ' . $ptarr['first_name'];
				$content = str_replace("%patientname", $patientname, $this->view->translate('editorcontent_letter14'));
				$content = str_replace("%pathealthinsurancenr", $pathealthinsurancenr, $content);
				$content = str_replace("%dateofbirth", $ptarr['birthd'], $content);
				$content = str_replace("%dateofdeath", $datum_entlassung, $content);
				$content = str_replace("%dischargedate", $dischargedate, $content);

				$this->view->content = $content;
			}

			if($_GET['type'] == 15)
			{
				$content = str_replace("%patient_last_name", $ptarr['last_name'], $this->view->translate('editorcontent_letter15'));
				$content = str_replace("%patient_first_name", $ptarr['first_name'], $content);
				$content = str_replace("%patient_kasse_nr", $pathealthinsurancenr, $content);
				$content = str_replace("%client_team_name", $clienttemname, $content);
				$content = str_replace("%client_phone_number ", $clientphone, $content);

				$this->view->content = $content;
			}

			if($_GET['type'] == 17)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter17'));
			}

			if($_GET['type'] == 18)//FAX-Mitteilung
			{
				$content = $this->view->translate('editorcontent_letter18');
				$content = str_replace("%firstname", $ptarr['first_name'], $content);
				$content = str_replace("%surname", $ptarr['last_name'], $content);
				$content = str_replace("%dob", $ptarr['birthd'], $content);
				$this->view->content = $content;
			}

			if($_GET['type'] == 19)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter19'));
			}

			if($_GET['type'] == 20)
			{
				$patientname = $ptarr['last_name'] . ', ' . $ptarr['first_name'];

				$this->view->subject = "Unna Tagesklinik " . $patientname;
				if(!empty($latest_symptomatistics))
				{
					$latest_symptomatistics = '<br/><b>Symptomatik:</b> ' . $latest_symptomatistics;
				}

				if(!empty($findings_list))
				{
					$findings_list = '<br/><b>Befunde:</b> ' . $findings_list;
				}

				$content = str_replace("%famillydocname", $familydoctor_name, $this->view->translate('editorcontent_letter20'));
				$content = str_replace("%patientname", $patientname, $content);
				$content = str_replace("%dateofbirth", $ptarr['birthd'], $content);
				$content = str_replace("%maindiagnosis", $main_diagnosis, $content);
				$content = str_replace("%latestsymptomatics", $latest_symptomatistics, $content);
				$content = str_replace("%findings", $findings_list, $content); //befunde
				$content = str_replace("%regularmedication", $regular_medication_list, $content);
				$content = str_replace("%bedarfmedication", $bedarf_medication_list, $content);
				$this->view->content = $content;
			}

			if($_GET['type'] == 21)
			{

				$patientname = $ptarr['first_name'] . ' ' . $ptarr['last_name'];

				$subject = "%switchbygender: " . $patientname . " \nUnterschrift auf Leistungsnachweisen";
				$letter_title = $this->view->letter_title;
				if($ptarr['sex'] == "1")
				{
					$subject = str_replace("%switchbygender", "Betreuung Herr", $subject);
					$letter_title = str_replace("%titleswitchbygender", "Sehr geehrter Herr", $letter_title);
				}
				else
				{
					$subject = str_replace("%switchbygender", "Betreuung Frau", $subject);
					$letter_title = str_replace("%titleswitchbygender", "Sehr geehrte Frau", $letter_title);
				}


				$content = str_replace("%teamname", $clienttemname, $this->view->translate('editorcontent_letter21'));
				$content = str_replace("%clientstreet", $clientstreet, $content);
				$content = str_replace("%clientzip", $clientzip, $content);
				$content = str_replace("%clientcity", $clientcity, $content);
				$content = str_replace("%clientphone", $clientphone, $content);
				$this->view->content = $content;
				$this->view->subject = $subject;
				$this->view->letter_title = $letter_title;
			}

			if($_GET['type'] == 22)
			{
				$patientname = $ptarr['first_name'] . ' ' . $ptarr['last_name'];
				$content = str_replace("%patientname", $patientname, $this->view->translate('editorcontent_letter22'));

				if($ptarr['sex'] == "1")
				{
					$content = str_replace("%switchbygender", 'dass Ihr Versicherter', $content);
				}
				else
				{
					$content = str_replace("%switchbygender", 'dass Ihre Versicherte', $content);
				}

				$content = str_replace("%pathealthinsurancenr", $pathealthinsurancenr, $content);
				$content = str_replace("%dateofbirth", $ptarr['birthd'], $content);
				$content = str_replace("%dateofdeath", $datum_entlassung, $content);
				$content = str_replace("%dischargedate", $dischargedate, $content);
				$content = str_replace("%clientphone", $clientphone, $content);
				$this->view->content = $content;
			}

			if($_GET['type'] == 23)
			{
				$fax_nr = $this->view->letter_docfax;
				$patientname = $ptarr['last_name'] . ', ' . $ptarr['first_name'];
				$patientaddress = $ptarr['street1'] . ', ' . $ptarr['zip'] . ' ' . $ptarr['city'];
				$content = str_replace("%patient_name", $patientname, $this->view->translate('editorcontent_letter23'));
				$content = str_replace("%patient_address", $patientaddress, $content);
				if($all_sapv_data)
				{
					$content = str_replace("%date_first_sapv", $start_first_sapv, $content);
				}
				else
				{
					$content = str_replace("%date_first_sapv", ' - ', $content);
				}
				$content = str_replace("%fax_number", $fax_nr, $content);
				$this->view->content = $content;

				$patient_diagnosis = $main_diagnosis;
				$comms = '';
				if(strlen($side_diagnosis) > 0)
				{

					if(strlen($main_diagnosis) > 0)
					{
						$comms = ', ';
					}
					$patient_diagnosis .= $comms . $side_diagnosis;
				}
				$this->view->main_diagnosis = $patient_diagnosis;


				$this->view->medication_list = Pms_CommonData::br2nl($medication_list);
				$this->view->sapv_periods = $sapv_falls;
			}

			if($_GET['type'] == 24)
			{
				$fax_nr = $this->view->letter_docfax;
				$patientname = $ptarr['last_name'] . ', ' . $ptarr['first_name'];
				$patient_last_name = $ptarr['last_name'];
				$patientaddress = $ptarr['street1'] . ', ' . $ptarr['zip'] . ' ' . $ptarr['city'];

				$content = str_replace("%patient_name", $patientname, $this->view->translate('editorcontent_letter24'));
				$content = str_replace("%patient_last_name", $patient_last_name, $content);
				$content = str_replace("%patient_address", $patientaddress, $content);
				if($all_sapv_data)
				{
					$content = str_replace("%date_first_sapv", $start_first_sapv, $content);
					$content = str_replace("%date_sapv_ends", $verordnung_bis, $content);
				}
				else
				{
					$content = str_replace("%date_first_sapv", ' - ', $content);
					$content = str_replace("%date_sapv_ends", ' - ', $content);
				}

				$content = str_replace("%fax_number", $fax_nr, $content);

				$this->view->content = $content;

				$patient_diagnosis = $main_diagnosis;
				$comms = '';
				if(strlen($side_diagnosis) > 0)
				{

					if(strlen($main_diagnosis) > 0)
					{
						$comms = ', ';
					}
					$patient_diagnosis .= $comms . $side_diagnosis;
				}
				$this->view->main_diagnosis = $patient_diagnosis;
// 			$this->view->main_diagnosis = $main_diagnosis;

				$this->view->medication_list = Pms_CommonData::br2nl($medication_list);
				$this->view->sapv_periods = $sapv_falls;
			}

			if($_GET['type'] == 25)//Schreiben-Mitteilung
			{
				$content = $this->view->translate('editorcontent_letter25');
				$content = str_replace("%firstname", $ptarr['first_name'], $content);
				$content = str_replace("%surname", $ptarr['last_name'], $content);
				$content = str_replace("%dob", $ptarr['birthd'], $content);
				$this->view->content = $content;
			}

			if($_GET['type'] == 26)//Visit letter
			{
				$content = $this->view->translate('editorcontent_letter26');
				$content = str_replace("%assigned_users", $assigned_users, $content);
				$content = str_replace("%patientfirstname", $ptarr['first_name'], $content);
				$content = str_replace("%patientlastname", $ptarr['last_name'], $content);
				$content = str_replace("%dateofbirth", $ptarr['birthd'], $content);
				$content = str_replace("%visitdate", $letter_visit['date'], $content);
				$content = str_replace("%visitusername", $letter_visit['user_name'], $content);
				$content = str_replace("%visitcomment", $letter_visit['comment'], $content);
				$content = str_replace("%visituserphone", $letter_visit['user_phone'], $content);
				$this->view->content = $content;
			}

			if($_REQUEST['dbg'] == 'show')
			{
				print_r("clientdata:\n");
				print_r($cl);
				print_r("clientphone:\n");
				print_r($clientphone);
				print_r("content:\n");
				print_r($content);
				exit;
			}

			if($this->getRequest()->isPost())
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('doctorletter', $logininfo->userid, 'canadd');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				if(isset($_POST['previewbutton']))
				{

					if($_GET['type'] == "26")
					{
						$_POST['visit_types'] = $vtype;
					}

					$this->generateLetterPdf(2, $_POST, $pdfname);
				}
				else
				{
					if($_GET['type'] > 0)
					{
						switch($_GET['type'])
						{
							case 4 :
								$ltrform = new Application_Form_DoctorLetterFaxvor();
								break;
							case 7 :
								$ltrform = new Application_Form_DoctorLetterTodes();
								break;
							case '23' :
								$ltrform = new Application_Form_DoctorLetterZapv();
								break;
							case '24' :
								$ltrform = new Application_Form_DoctorLetterZapv();
								break;
							default :
								$ltrform = new Application_Form_DoctorLetter();
								break;
						}
					}

					if($ltrform->validate($_POST))
					{

						$a_post = $_POST;
						$a_post['lettertype'] = $_GET['type'];
						$chk = $ltrform->insertData($a_post);

						if($chk->status == 1)
						{
							$this->generateLetterPdf(1, $chk->id, $pdfname);
						}

						$this->_redirect(APP_BASE . "patient/doctorletter?id=" . $_GET['id'] . "");
					}
					else
					{

						$ltrform->assignErrorMessages();
						$this->retainValues($_POST);
						$this->view->errorclass = "ErrorDiv";

						if($_GET['type'] == '23')
						{
							$this->view->erstverordnung_footer = $_POST['footer'];
							$this->view->complex_symptom = $_POST['complex_symptom'];
							$this->view->action = $_POST['action'];
							$this->view->signature = $_POST['signature'];
						}

						if($_GET['type'] == '24')
						{
							$this->view->folgeverordnung_footer = $_POST['footer'];
							$this->view->complex_symptom = $_POST['complex_symptom'];
							$this->view->action = $_POST['action'];
							$this->view->signature = $_POST['signature'];
						}
					}
				}
			}

			$cs = new Courseshortcuts();
			$shrtarr = $cs->getCourseData();
			$grid = new Pms_Grid($shrtarr, 1, count($shrtarr), "doclettershortcutchecks.html");
			$this->view->gridchecks = $grid->renderGrid();

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function doctorlettereditAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$cl = new Client();
			$clarr = Pms_CommonData::getClientData($logininfo->clientid);

			$team_addr = $clarr[0]['client_name'];

			if(!empty($clarr[0]['street1']))
			{
				$team_addr .= ', ' . $clarr[0]['street1'];
			}

			if(!empty($clarr[0]['postcode']))
			{
				$team_addr .= ', ' . $clarr[0]['postcode'];
			}

			if(!empty($clarr[0]['city']))
			{
				$team_addr .= ' ' . $clarr[0]['city'];
			}
			$this->view->client_city = $clarr[0]['city'];
			$this->view->team_address = $team_addr;
			/* ######################################################### */

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('doctorletter', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			//		addressbook requirements
			$adminvisible = PatientMaster::getAdminVisibility($ipid);
			if(!$adminvisible && $logininfo->usertype == 'SA')
			{
				$hide_patient_tab = true;
			}
			else
			{
				$hide_patient_tab = false;
			}

			$this->view->hide_patient_tab = $hide_patient_tab;

			$famdoc = FamilyDoctor::getFamilyDoctors($ipid);
			$this->view->fam_doctor = sizeof($famdoc);
			$this->view->fam_doctor_id = $famdoc[0]['id'];
			$this->view->practice = $famdoc[0]['practice'];
			$this->view->first_name = $famdoc[0]['first_name'];
			$this->view->last_name = $famdoc[0]['last_name'];
			$this->view->title = $famdoc[0]['title'];
			$this->view->street1 = $famdoc[0]['street1'];
			$this->view->zip = $famdoc[0]['zip'];
			$this->view->city = $famdoc[0]['city'];
			$this->view->phone_practice = $famdoc[0]['phone_practice'];
			$this->view->phone_cell = $famdoc[0]['phone_cell'];
			$this->view->fax = $famdoc[0]['fax'];

			$pfleg = Pflegedienstes::getPflegedienstes($ipid);
			if($pfleg > 0)
			{
				$this->view->pat_pfleg = $pfleg;
			}
			$pharmacy = Pharmacy::getPharmacys($ipid);
			if(sizeof($pharmacy) > 0)
			{
				$this->view->pat_pharmacy = $pharmacy;
			}

			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);

			$familydegree = new FamilyDegree();
			$cnt_degree_array = $familydegree->getFamilyDegrees(1);

			$this->view->degree = $cnt_degree_array;

			$this->view->patient_contacts = $pcs;

			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			$this->view->patient_healthinsurance = $phi;

			//addressbook requirements
			if($_GET['type'] > 0)
			{
				switch($_GET['type'])
				{
					case 1 : $this->_helper->viewRenderer('doctorletteradd1');
						$pdfname = "doctorletterpdf1";
						break;
					case 2 : $this->_helper->viewRenderer('doctorletteradd2');
						$pdfname = "doctorletterpdf2";
						break;
					case 3 : $this->_helper->viewRenderer('doctorletteradd3');
						$pdfname = "doctorletterpdf3";
						break;
					case 4 : $this->_helper->viewRenderer('doctorletteradd4');
						$pdfname = "doctorletterpdf4";
						break;
					case 5 : $this->_helper->viewRenderer('doctorletteradd5');
						$pdfname = "doctorletterpdf5";
						break;
					case 6 : $this->_helper->viewRenderer('doctorletteradd6');
						$pdfname = "doctorletterpdf6";
						break;
					case 7 : $this->_helper->viewRenderer('doctorletteradd7');
						$pdfname = "doctorletterpdf7";
						break;
					case 12 : $this->_helper->viewRenderer('doctorletteradd12');
						$pdfname = "doctorletterpdf12";
						break;
					case 14 : $this->_helper->viewRenderer('doctorletteradd14');
						$pdfname = "doctorletterpdf14";
						break;
					case 15 : $this->_helper->viewRenderer('doctorletteradd15');
						$pdfname = "doctorletterpdf15";
						break;
					case 17 : $this->_helper->viewRenderer('doctorletteradd17');
						$pdfname = "doctorletterpdf17";
						break;
					case 18 : $this->_helper->viewRenderer('doctorletteradd18');
						$pdfname = "doctorletterpdf18";
						break;
					case 19 : $this->_helper->viewRenderer('doctorletteradd19');
						$pdfname = "doctorletterpdf19";
						break;
					case 20 : $this->_helper->viewRenderer('doctorletteradd20');
						$pdfname = "doctorletterpdf20";
						break;
					case 21 : $this->_helper->viewRenderer('doctorletteradd21');
						$pdfname = "doctorletterpdf21";
						break;
					case 22 : $this->_helper->viewRenderer('doctorletteradd22');
						$pdfname = "doctorletterpdf22";
						break;
					case 23 : $this->_helper->viewRenderer('doctorletteradd23');
						$pdfname = "doctorletterpdf23";
						break;
					case 24 : $this->_helper->viewRenderer('doctorletteradd24');
						$pdfname = "doctorletterpdf24";
						break;
					case 25 : $this->_helper->viewRenderer('doctorletteradd25');
						$pdfname = "doctorletterpdf25";
						break;
					case 26 : $this->_helper->viewRenderer('doctorletteradd26');
						$pdfname = "doctorletterpdf26";
						break;
					default : break;
				}
			}

			$this->view->errorclass = "ErrorDivHide";
			$this->view->docletterclass = "active";
			$this->view->act = "patient/doctorletteredit?id=" . $_GET['id'] . "&lid=" . $_GET['lid'] . "&type=" . $_GET['type'];

			$cl = Pms_CommonData::getClientData($logininfo->clientid);
			$clientfax = $cl[0]['fax'];
			$clientname = $cl[0]['lastname'] . " , " . $cl[0]['firstname'];
			$this->view->clientaddress = $cl[0]['firstname'] . " " . $cl[0]['lastname'] . " | " . $cl[0]['street1'] . " | " . $cl[0]['city'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$pathealthinsurancenr = "";
			if(strlen($healthinsu_array[0]['insurance_no']) > 0 && $healthinsu_array[0]['insurance_no'] != '0')
			{
				$pathealthinsurancenr = $healthinsu_array[0]['insurance_no'];
			}
			else
			{
				$pathealthinsurancenr = "--";
			}

			if(!empty($healthinsu_array[0]['ins_contactperson']) && $healthinsu_array[0]['ins_contactperson'] != '0')
			{
				$pat_insurance_contactperson = $healthinsu_array[0]['ins_contactperson'];
			}
			else
			{
				$pat_insurance_contactperson = "";
			}

			if(!empty($healthinsu_array[0]['companyid']) || $healthinsu_array[0]['companyid'] != '0')
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				if($helathins)
				{
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['ins_street']))
					{
						$pat_insurance_street = $healtharray['street1'];
					}
					else
					{
						$pat_insurance_street = $healthinsu_array[0]['ins_street'];
					}
					if(empty($healthinsu_array[0]['ins_city']))
					{
						$pat_insurance_city = $healtharray['city'];
					}
					else
					{
						$pat_insurance_city = $healthinsu_array[0]['ins_city'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$pat_insurance_zip = $healtharray['zip'];
					}
					else
					{
						$pat_insurance_zip = $healthinsu_array[0]['ins_zip'];
					}
				}
			}
			else
			{
				$pat_insurance_street = "";
				$pat_insurance_zip = "";
				$pat_insurance_city = "";
			}

			if($ptarr['familydoc_id'] > 0 && !$this->getRequest()->isPost())
			{
				$fdoc = Doctrine_Core::getTable('FamilyDoctor')->find($ptarr['familydoc_id']);
				if($fdoc)
				{
					$docarr = $fdoc->toArray();
					$doc_title = "";
					$doc_salutation = "";
					if($docarr['title'] == "")
					{
						$doc_title = $docarr['title'];
					}
					else
					{
						$doc_title = $docarr['title'] . " ";
					}
					$doc_salutation = $docarr['salutation'];
					$doccity = $docarr['city'] . ", ";
				}
			}
			$this->view->letter_docfax = $docarr['fax'];

			$pm = new PatientMaster();
			$ptarr = $pm->getMasterData($decid, 0);
			$this->view->patientfirstname = $ptarr['first_name'];
			$this->view->patientlastname = $ptarr['last_name'];
			$this->view->patientaddress = $ptarr['street1'];
			$this->view->patientcity = $ptarr['city'];
			$this->view->patientbirth = $ptarr['birthd'];

			if($_GET['type'] == 1)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter1'));
			}

			if($_GET['type'] == 2)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter2'));
			}

			if($_GET['type'] == 3)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter3'));
			}

			if($_GET['type'] == 4)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter4'));
			}

			if($_GET['type'] == 5)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter5'));
			}

			if($_GET['type'] == 6)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter6'));
			}

			if($_GET['type'] == 7)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter7'));
			}

			if($_GET['type'] == 12)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter8'));
			}

			if($_GET['type'] == 14)
			{
				$this->view->content = $this->view->translate('editorcontent_letter14');
			}

			if($_GET['type'] == 15)
			{
				$this->view->patientlastname = $ptarr['last_name'];
				$this->view->patientfirstname = $ptarr['first_name'];
				$this->view->patient_health_insurance = $pathealthinsurancenr;
				$content = $this->view->translate('editorcontent_letter15');
				$this->view->content = $content;
			}

			if($_GET['type'] == 18)
			{
				$content = $this->view->translate('editorcontent_letter18');
				$this->view->content = $content;
			}



			if($_GET['type'] == 19)
			{
				$this->view->content = str_replace("%s", $admdate, $this->view->translate('editorcontent_letter19'));
			}

			if($_GET['type'] == 22)
			{
				$this->view->content = $this->view->translate('editorcontent_letter22');
			}

			if($_GET['type'] == 25)
			{
				$content = $this->view->translate('editorcontent_letter25');
				$this->view->content = $content;
			}

			if($this->getRequest()->isPost())
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('doctorletter', $logininfo->userid, 'canedit');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}
				if(isset($_POST['previewbutton']))
				{
					$this->generateLetterPdf(2, $_POST, $pdfname);
				}
				else
				{
					if($_GET['type'] > 0)
					{
						switch($_GET['type'])
						{
							case 4 :
								$ltrform = new Application_Form_DoctorLetterFaxvor();
								break;
							case 7 :
								$ltrform = new Application_Form_DoctorLetterTodes();
								break;
							case '23' :
								$ltrform = new Application_Form_DoctorLetterZapv();
								break;
							case '24' :
								$ltrform = new Application_Form_DoctorLetterZapv();
								break;
							default :
								$ltrform = new Application_Form_DoctorLetter();
								break;
						}
					}

					if($ltrform->validate($_POST))
					{
						$_POST['lettertype'] = $_GET['type'];
						$chk = $ltrform->updateData($_POST);
						if($chk->status == 1)
						{
							$this->generateLetterPdf(1, $chk->id, $pdfname);
						}
						$this->_redirect(APP_BASE . "patient/doctorletter?id=" . $_GET['id'] . "");
					}
					else
					{
						$ltrform->assignErrorMessages();
						$this->view->errorclass = "ErrorDiv";
						$this->retainValues($_POST);
					}
				}
			}

			if($_GET['type'] > 0)
			{
				switch($_GET['type'])
				{
					case 4 :
						$referred = Doctrine_Query::create()
							->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
						AES_DECRYPT(content1,'" . Zend_Registry::get('salt') . "') as content1,
						AES_DECRYPT(content2,'" . Zend_Registry::get('salt') . "') as content2,
						AES_DECRYPT(content3,'" . Zend_Registry::get('salt') . "') as content3,
						AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address")
							->from('DoctorLetterFaxvor')
							->where("id= ?", $_GET['lid']);
						$refexec = $referred->execute();
						break;
					case 7 :
						$referred = Doctrine_Query::create()
							->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
						AES_DECRYPT(content1,'" . Zend_Registry::get('salt') . "') as content1,
						AES_DECRYPT(content2,'" . Zend_Registry::get('salt') . "') as content2,
						AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address")
							->from('DoctorLetterTodes')
							->where("id= ?", $_GET['lid']);
						$refexec = $referred->execute();
						break;
					case '23' :
						$referred = Doctrine_Query::create()
							->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
						AES_DECRYPT(letter_docfax,'" . Zend_Registry::get('salt') . "') as letter_docfax,
						AES_DECRYPT(letter_username,'" . Zend_Registry::get('salt') . "') as letter_username,
						AES_DECRYPT(content1,'" . Zend_Registry::get('salt') . "') as content,
						AES_DECRYPT(footer,'" . Zend_Registry::get('salt') . "') as footer,
						AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address,
						AES_DECRYPT(sapv_periods,'" . Zend_Registry::get('salt') . "') as sapv_periods,
						AES_DECRYPT(main_diagnosis,'" . Zend_Registry::get('salt') . "') as main_diagnosis,
						AES_DECRYPT(symptomatics_str,'" . Zend_Registry::get('salt') . "') as symptomatics_str,
						AES_DECRYPT(medication,'" . Zend_Registry::get('salt') . "') as medication,
						AES_DECRYPT(measures_str,'" . Zend_Registry::get('salt') . "') as measures_str")
							->from('DoctorLetterZapv')
							->where("id= ?", $_GET['lid']);
						$refexec = $referred->execute();
						break;
					case '24' :
						$referred = Doctrine_Query::create()
							->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
						AES_DECRYPT(letter_docfax,'" . Zend_Registry::get('salt') . "') as letter_docfax,
						AES_DECRYPT(letter_username,'" . Zend_Registry::get('salt') . "') as letter_username,
						AES_DECRYPT(content1,'" . Zend_Registry::get('salt') . "') as content,
						AES_DECRYPT(footer,'" . Zend_Registry::get('salt') . "') as footer,
						AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address,
						AES_DECRYPT(sapv_periods,'" . Zend_Registry::get('salt') . "') as sapv_periods,
						AES_DECRYPT(main_diagnosis,'" . Zend_Registry::get('salt') . "') as main_diagnosis,
						AES_DECRYPT(symptomatics_str,'" . Zend_Registry::get('salt') . "') as symptomatics_str,
						AES_DECRYPT(medication,'" . Zend_Registry::get('salt') . "') as medication,
						AES_DECRYPT(measures_str,'" . Zend_Registry::get('salt') . "') as measures_str")
							->from('DoctorLetterZapv')
							->where("id= ?", $_GET['lid']);
						$refexec = $referred->execute();
						break;
					default :

						$referred = Doctrine_Query::create()
							->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
			AES_DECRYPT(content,'" . Zend_Registry::get('salt') . "') as content,
			AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address")
							->from('DoctorLetter')
							->where("id= ?", $_GET['lid']);
						$refexec = $referred->execute();
						break;
				}
			}

			if($refexec)
			{
				$refarr = $refexec->toArray();

				$this->view->selectedchecks = $refarr['selectedchecks'];
				if($refarr['status'] == 0)
				{
					$this->view->ischeckedr = "checked='checked'";
				}

				if($refarr['status'] == 1)
				{
					$this->view->ischeckedc = "checked='checked'";
				}

				$this->retainValues($refarr[0]);

				if($_GET['type'] == '4')
				{
					$content = '';
					if(strlen($refarr[0]['content2']) > 0 || strlen($refarr[0]['content3']) > 0)
					{
						$content .= "<b>Anlass:</b><br />" . $refarr[0]['content1'];
					}
					else
					{
						$content .= $refarr[0]['content1'];
					}


					if(strlen($refarr[0]['content2']) > 0)
					{
						$content .= "<br /><b>Maßnahmen/individueller Behandlungsplan:</b> <br />" . $refarr[0]['content2'];
					}

					if(strlen($refarr[0]['content3']) > 0)
					{
						$content .= "<br /><b>Bitte um:</b><br />" . $refarr[0]['content3'];
					}

					$this->view->content1 = $content;
				}
				if($_GET['type'] == '23')
				{
					$this->view->letter_date = date('d.m.Y', strtotime($refarr[0]['letter_date']));
					$this->view->erstverordnung_footer = $refarr[0]['footer'];
					$this->view->complex_symptom = explode(',', $refarr[0]['complex_symptom']);
					$this->view->medi_list = $refarr[0]['medication'];
					$this->view->action = explode(',', $refarr[0]['medi_action']);
					$this->view->symptomatics_str = $refarr[0]['symptomatics_str'];
					$this->view->measures_str = $refarr[0]['measures_str'];
					$this->view->signature = $refarr[0]['signature'];
				}

				if($_GET['type'] == '24')
				{
					$this->view->letter_date = date('d.m.Y', strtotime($refarr[0]['letter_date']));
					$this->view->folgeverordnung_footer = $refarr[0]['footer'];
					$this->view->complex_symptom = explode(',', $refarr[0]['complex_symptom']);
					$this->view->medi_list = $refarr[0]['medication'];
					$this->view->action = explode(',', $refarr[0]['medi_action']);
					$this->view->symptomatics_str = $refarr[0]['symptomatics_str'];
					$this->view->measures_str = $refarr[0]['measures_str'];
					$this->view->signature = $refarr[0]['signature'];
				}

				if($_GET['type'] == '15')
				{
					$this->retainValues($refarr[0]);

					$new_format_date = "15.05.2014";

					if(strtotime(date('d.m.Y', strtotime($refarr[0]['create_date']))) < strtotime($new_format_date))
					{
						$contenta = str_replace("%patient_last_name", $ptarr['last_name'], $this->view->translate('editorcontent_letter15a'));
						$contenta = str_replace("%patient_first_name", $ptarr['first_name'], $contenta);
						$contenta = str_replace("%patient_kasse_nr", $pathealthinsurancenr, $contenta);
						$contenta = str_replace("%client_team_name", $clientinfo[0]['team_name'], $contenta);

						$content = $refarr[0]['content'];

						$contentb = str_replace("%client_phone_number", $clientinfo[0]['phone'], $this->view->translate('editorcontent_letter15b'));

						$this->view->content = $contenta . $content . $contentb;
					}
				}
			}

			$cs = new Courseshortcuts();
			$shrtarr = $cs->getCourseData();
			$grid = new Pms_Grid($shrtarr, 1, count($shrtarr), "doclettershortcutchecks.html");
			$this->view->gridchecks = $grid->renderGrid();

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/*			 * ****************************************** */
		}

		private function generatePdf($decid)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userinfo = Pms_CommonData::getUserData($logininfo->userid);
			$clientinfo = Pms_CommonData::getClientData($logininfo->clientid);
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			
			$previleges = new Modules();
			$showiv = $previleges->checkModulePrivileges("53", $logininfo->clientid);
			$this->view->showsh = $showsh;

			if($previleges->checkModulePrivileges("131", $logininfo->clientid)){
			    $med_module = "1";
			} else{
			    $med_module = "0";
			}
			
			
			$modules = new Modules();
	 
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge ISPC - 1483
			{
				$acknowledge = "1";
			}
			else
			{
				$acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			
			$medic = new PatientDrugPlan();
			$medicarr = $medic->getPatientDrugPlanNoIV($decid,true);

			if($_REQUEST['teste']){
				print_r($medicarr); exit;
			}
			
			$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationpdf.html");
			$this->view->pdfmedications .= $grid->renderGrid();

			if($showiv)
			{
				$ivmedicarr = $medic->getivMedication($decid,true);
// 				print_r($ivmedicarr); exit;
				
				foreach($ivmedicarr as $k=>$ivm){
				    $master_ids[] = $ivm['medication_master_id']; 
				}
				
				$med = new Medication();
				$medarr1_details = $med->getMedicationById($master_ids);
				
				foreach($medarr1_details as $k_medarr1 => $v_medarr1)
				{
				    $medication_master_array[$v_medarr1['id']] = $v_medarr1;
				}
// 				print_r($medication_master_array); exit;
				$this->view->medication_master_array = $medication_master_array;
				
				$ivmedicarr = Pms_CommonData::clear_pdf_data($ivmedicarr);
				$gridiv = new Pms_Grid($ivmedicarr, 1, count($ivmedicarr), "listpatientmedicationIVpdf.html");
				
				$this->view->pdfmedications .= $gridiv->renderGrid();
			}

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$qpa = Doctrine_Query::create()
			->select('*')
			->from('PatientQpaMapping')
			->where('epid="' . $parr['epid'] . '"');
			$qparr = $qpa ->fetchArray();

			$assignuser = Doctrine_Query::create()
			->select('*')
			->from('User')
			->where('clientid=' . $logininfo->clientid)
// 			->andWhere('isdelete=0 and isactive=0')
			->andWhere('isdelete=0')
			->orderBy('last_name ASC');
			$assignuserarray = $assignuser->fetchArray();
			
			foreach($assignuserarray as $k => $uvalues)
			{
				$user_details[$uvalues['id']]['name'] = $uvalues['last_name'] . ', ' . $uvalues['first_name'];
			}
			
			foreach($qparr as $k => $ud)
			{
				$assigned_users[$ud['userid']]['username'] = $user_details[$ud['userid']]['name'];
			}
			
			$grid = new Pms_Grid($assigned_users, 1, count($assigned_users), "listassigneduserspdf.html");
			$grid->user_details = $user_details;
			$usergrid = $grid->renderGrid();
			$parr['usergrid'] = $usergrid;
			
			
			
			
			$this->view->tablepatientinfo = Pms_Template::createTemplate($parr, 'templates/tablepatientinfo.html');
			$tablepatientinfo = Pms_Template::createTemplate($parr, 'templates/tablepatientinfo.html');

			$htmlform = $this->view->render('patient/patientmedicationpdf.html');


			$pdf = new Pms_TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

			// set document information
			$pdf->SetCreator('IPSC');
			$pdf->SetAuthor('ISPC');
			$pdf->SetTitle('ISPC');
			$pdf->SetSubject('ISPC');
			$pdf->SetKeywords('ISPC');

			// set default header data
			$pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);

			// set header and footer fonts
			$pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
			$pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

			// set default monospaced font
			$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

			//set margins
			$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
			$pdf->setPrintHeader(false);
			$pdf->setPrintFooter(false);
			$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
			$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

			//set auto page breaks
			$pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

			//set image scale factor
			$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

			//set some language-dependent strings
			$pdf->setLanguageArray($l);

			// ---------------------------------------------------------
			// set font
			$pdf->SetFont('times', '', 10);

			// add a page
			$pdf->AddPage('P', 'A4');


			//	echo $htmlform;

			$pdf->writeHTML($htmlform, true, 0, true, 0);

			$header_text .='<table width="170mm" border="0" cellspacing="0" cellpadding="0">
						<tr><td colspan="5" valign="top">' . $tablepatientinfo . '</td></tr>
						<tr><td colspan="5"   align="left" valign="top" height="2"></td></tr>
						<tr><td align="left" colspan="5"   valign="top"><h3><font face="Arial, Helvetica, sans-serif" size="11">' . $this->view->translate('medication') . '</font></h3></td></tr>
						<tr>
							<td height="20" width="20mm" align="left" valign="top" bgcolor="#CCCCCC"><strong><font face="Arial, Helvetica, sans-serif" size="9">' . $this->view->translate('date') . '</font></strong></td>
							<td height="20" width="25mm"  align="left" valign="top" bgcolor="#CCCCCC"><strong><font face="Arial, Helvetica, sans-serif" size="9">' . $this->view->translate('User') . '</font></strong></td>
							<td align="left" width="65mm"  valign="top" bgcolor="#CCCCCC"><strong><font face="Arial, Helvetica, sans-serif" size="9">' . $this->view->translate('medication') . '</font></strong></td>
							<td align="left" width="20mm"  valign="top" bgcolor="#CCCCCC"><strong><font face="Arial, Helvetica, sans-serif" size="9">' . $this->view->translate('dosage') . '</font></strong></td>
							<td align="left" width="40mm" valign="top" bgcolor="#CCCCCC"><strong><font face="Arial, Helvetica, sans-serif" size="9">' . $this->view->translate('information') . '</font></strong></td>
						 </tr></table>';

			$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
			$pdf->setDefaults(true, 'P', 20); //defaults with header
			$pdf->SetMargins(20, 45, 50); //reset top margin
			$pdf->setImageScale(1.5);
			$pdf->SetHeaderMargin(10);


			$pdf->HeaderText = $header_text;
			$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], 9);
			if($bg_image !== false)
			{
				$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
				if(is_file($bg_image_path))
				{
					$pdf->setBackgroundImage($bg_image_path);
				}
			}

			// add a page
			$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
			$html = preg_replace('/<img(.*)\/>/i', '', $html);
			$pdf->setHTML($html);

			$pname = 'medication';

			$tmpstmp = $pdf->uniqfolder(PDF_PATH);
			$file_name_real = basename($tmpstmp);
			$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf');

// 			$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
// 			exec($cmd);
			$zipname = $file_name_real . ".zip";
			$filename = "uploads/" . $file_name_real . ".zip";
			$_SESSION['filename'] = $tmpstmp . '/' . $pname . '.pdf';
			/*
			$con_id = Pms_FtpFileupload::ftpconnect();
			//			var_dump($con_id);
			//	echo PDF_PATH . "/" . $zipname;
			if($con_id)
			{
				$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
				Pms_FtpFileupload::ftpconclose($con_id);
			}
			*/

			$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf', "uploads" );
			
			if(strlen($filename) > 0)
			{
			
					if($med_module == "1"){
					
					    $cust = new PatientFileUpload();
					    $cust->title = Pms_CommonData::aesEncrypt("Medikamenten Liste");
					    $cust->ipid = $ipid;
					    $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
					    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					    $cust->system_generated = "1";
					    $cust->tabname = "medikamenten_liste";
					    $cust->save();
					    $recordid = $cust->id;
					
					    $custcourse = new PatientCourse();
					    $custcourse->ipid = $ipid;
					    $custcourse->course_date = date("Y-m-d H:i:s", time());
					    $custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					    $comment = 'Medikamenten Liste wurde erstellt';
					    $custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					    $custcourse->user_id = $logininfo->userid;
					    $custcourse->recordid = $recordid;
					    $custcourse->tabname = Pms_CommonData::aesEncrypt('medikamenten_liste');
					    $custcourse->save();
					} else { // QUESTION - SHOUDL THIS STILL HAPPEN? 
					   /*  $cust = new PatientFileUpload();
					    $cust->title = Pms_CommonData::aesEncrypt($this->view->translate("medicationplan"));
					    $cust->ipid = $ipid;
					    $cust->file_name = Pms_CommonData::aesEncrypt($filename);
					    $cust->file_type = Pms_CommonData::aesEncrypt('pdf');
					    $cust->system_generated = "1";
					    $cust->save();	 */				    
					}
				
				
				$this->view->error_message = $this->view->translate("pdfsavesuccessfully");
			}
			ob_end_clean();
			ob_start();

			$pdf->toBrowser($pname . '.pdf', 'D');
			exit;
		}

		

		//this should allways be a POST request
		public function uploadify2018Action()
		{
		
		    $response = array(); // return as json
		
		    // 		    if ( ! $this->getRequest()->isPost()) {
		    // 		        $this->_helper->json->sendJson(array('success' => false,  'message' => 'wrong method'));
		    // 		        exit; //for readbility
		    // 		    }
		
		    $this->_helper->layout->setLayout('layout_ajax');
		    $this->_helper->viewRenderer->setNoRender();
		
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $file_password = $logininfo->filepass;
		    	
		    	
		    if ($this->getRequest()->isPost()) {
		         
		        if ( ! ($action = $this->getRequest()->getPost('action'))) {
		            $action = 'upload_patient_files'; //default if empty
		        }
		         
		        $_method = $this->getRequest()->getPost('_method');
		         
		        $cid = $this->getRequest()->getPost('cid');

		        $enc_id = $this->getRequest()->getPost('id');//patient encoded id
		        
		         
		    } else {
		         
		        if ( ! ($action = $this->getRequest()->getQuery('action'))) {
		            $action = 'upload_patient_files'; //default if empty
		        }
		         
		        $_method = $this->getRequest()->getQuery('_method');
		         
		        $cid = $this->getRequest()->getQuery('cid');

		        $enc_id = $this->getRequest()->getQuery('id');//patient encoded id
		    }
		    	
		    //verify if requested client is associated with the loghed-in
		    if ($cid) {
		        $post_clientid = Pms_Uuid::decrypt($cid);
		        	
		        $acf_obj = new AssociatedClientFiles();
		        	
		        if($acf_obj->assert_associated($post_clientid)) {
		            //all ok, change the $clientid for witch we request the files
		            $clientid = $post_clientid;
		
		            $post_clientid_data = Client::getClientDataByid($clientid);
		            $file_password = $post_clientid_data[0]['fileupoadpass'];
		            	
		        } else {
		             
		            if ($this->getRequest()->isXmlHttpRequest()) {
		                throw new Zend_Exception('ClientFiles not associated ! admin must verify this error. ' . __METHOD__, 1);
		            } else {
		                $this->redirect( "overview/overview", array(
		                    "exit" => true,
		                    "prependBase" => true,
		                ));
		            }
		             
		            exit; //for readability
		            /*
		            * you can reach this if delete file then change client( get params remain here)
		            * or the posted cid is not associated ... then you have a xhr and user dosen't see the redirect
		            */
		        }
		    }

		    $dec_id = Pms_Uuid::decrypt($enc_id);
		    
		    if (empty ($dec_id)) {
		        $this->getHelper('Log')->error("Cannot decode dec_id for enc_id:{$enc_id}, @dev must check");
		        
		        return false;
		        
		        exit; //for readability
		    }
		    
		    $action .= $dec_id; //add to the actyion the id of the pacient
		    
		    
		    if ($_method == 'SESSION') {
		         
		        $all_uploaded_files_of_client = $this->get_last_uploaded_file($action, null, $clientid);
		         
		        foreach ($all_uploaded_files_of_client as $qquid => $file) {
		             
		            if (empty($file)
		                || empty($file['filename'])
		                || empty($file['fileInfo']['size'])
		                || ! is_file($file['filepath']))
		            {
		                continue; // this because fineUploader will stall if any of this is wrong
		            }
		             
		            $file = array(
		                'name' => $file['filename'],
		                'uuid' => $qquid,
		                'size' => $file['fileInfo']['size'],
		
		                //https://docs.fineuploader.com/features/session.html
		                /*
		            'thumbnailUrl' => '',
		
		            'deleteFileEndpoint' => '',
		            'deleteFileParams' => '',
		
		            's3Key' => '',
		            's3Bucket' => '',
		            'blobName' => '',
		            */
		              );
		     
		            array_push($response, $file);
		          }
		
		        } elseif ($_method == 'DELETE') {
		         
    		        $this->delete_last_uploaded_file($action, $this->getRequest()->getPost('qquuid', 0) , $clientid);
    		         
    		        $response = array('success' => true);
		         
		        } else {
		            
		            
		            if ($this->getRequest()->getPost('multiple') === 'false') {
    		            $this->delete_last_uploaded_file($action, null, $clientid);		                
		            }
		         
    		        $response = $this->upload_qq_file( array(
    		        "allowed_file_extensions" => null, // this means any extension is allowed
    			        "max-filesize" => null,//this means ini_get
    					        "action" => $action,
    					            "public_file_path" => PDF_PATH,
    					            "clientid" => $clientid,
    					            "filepass" => $file_password,
    					            "zip_file" => true,
    		        ));
		         
		        }
		
		             //ob_end_clean();
		        //ob_start();
		        	
		        $this->_helper->json->sendJson($response);
		        	
		        exit; // for readbility
		        	
		        	
		}
		
		
		/**
		 * @cla on 04.09.2018
		 * @see uploadify2018Action
		 * @deprecated 
		 */
		public function uploadifyAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$this->_helper->layout->setLayout('layout_ajax');
			
			$logininfo = new Zend_Session_Namespace('Login_Info');
			if(!$logininfo->clientid)
			{
				//redir to select client error
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
		

			$dir = Pms_CommonData::uniqfolder(PDF_PATH); 
			
			if ($dir === false || trim($dir)=="." || trim($dir) == "/" || trim($dir)=="") {
				
				$result = array("success" => false , "uniqfolder"=>false); //cannot create folder
				echo json_encode($result);
				exit;
			}
			
			$extension = explode(".", $_FILES['qqfile']['name']);

			$_SESSION['filetype'] = $extension[count($extension) - 1];
			$_SESSION['filetitle'] = $extension[0];
			
			$timestamp_filename = time() . "_file." . $extension[count($extension) - 1];	
			
			$folderpath = trim($dir);		

			if (move_uploaded_file($_FILES['qqfile']['tmp_name'], PDF_PATH . "/" . $folderpath . "/" . trim($timestamp_filename))) {
					
				
				$cmd = "sh -c \"cd '".PDF_PATH."/../' && zip -9 -r -P " . $logininfo->filepass . " uploads/" . $folderpath . ".zip  uploads/" . $folderpath . " && rm -r uploads/" . $folderpath . ";\"";
				@exec($cmd);
	
				
				
				if (file_exists(PDF_PATH . "/" . $folderpath . ".zip")) {
					
					
					$_SESSION['filename'] = $folderpath . "/" . trim($timestamp_filename);
					$_SESSION['zipname'] = PDF_PATH . "/" . $folderpath . ".zip";
					
					$result = array("success" => true);
				} else {
					
					$result = array("success" => true ,"zip"=>false);
					$_SESSION['filename'] = '';
					$_SESSION['zipname'] = '';
					unset($_SESSION['zipname'], $_SESSION['filename'], $_SESSION['filetype'], $_SESSION['filetitle']);
				}
				
			
			} else {
				
				$result = array("success" => false, "move_uploaded_file"=>false);
				$_SESSION['filename'] = '';
				$_SESSION['zipname'] = '';
				unset($_SESSION['zipname'], $_SESSION['filename'], $_SESSION['filetype'], $_SESSION['filetitle']);
				
			}

			
			echo json_encode($result);
			exit;
		}

		public function importpatientAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if($this->getRequest()->isPost())
			{
				echo $_SESSION['filename'];

				if(strlen($_SESSION['filename']) < 1)
				{
					echo $this->view->error_message = "Upload CSV file ";
					$error = 1;
				}
				exit;
				$filename = "uploads/patientdata.xml";
				$error = 0;
				if($error == 0)
				{
					$xml = simplexml_load_file($filename, 'SimpleXMLElement', LIBXML_NOCDATA);

					foreach($xml->patient as $key => $val)
					{

						$cust = new PatientMaster();
						$cust->ipid = Pms_Uuid::GenerateIpid();
						$cust->recording_date = $val->case->admission->date;
						$cust->last_name = Pms_CommonData::aesEncrypt($val->patientmasterdata->name);
						$cust->first_name = Pms_CommonData::aesEncrypt($val->patientmasterdata->chrname);
						$cust->birthd = $val->patientmasterdata->birthd;
						$cust->street1 = Pms_CommonData::aesEncrypt($val->patientmasterdata->street);
						$cust->zip = Pms_CommonData::aesEncrypt($val->patientmasterdata->zip);
						$cust->city = Pms_CommonData::aesEncrypt($val->patientmasterdata->city);
						$cust->phone = Pms_CommonData::aesEncrypt($val->patientmasterdata->phone);
						switch($val->patientmasterdata->sex)
						{
							case 'w' : $sex = 0;
								break;
							case 'm' : $sex = 1;
								break;
							case 'f' : $sex = 2;
								break;
							default : break;
						}
						$cust->sex = Pms_CommonData::aesEncrypt($sex);
						$cust->save();
						$ipid = $cust->ipid;

						/* Patient Case */
						$case = new PatientCase();
						$case->admission_date = $val->case->admission->date;
						$case->clientid = $clientid;
						$case->save();

						$epid = Pms_Uuid::GenerateEpid($clientid, $case->id);
						$case = Doctrine::getTable('PatientCase')->find($case->id);
						$case->epid = $epid;
						$case->save();


						/* Patient Ipid-Epid Mapping */
						$res = new EpidIpidMapping();
						$res->clientid = $clientid;
						$res->ipid = $cust->ipid;
						$res->epid = $case->epid;
						$res->save();

						/* Patient QPA Mapping */
						foreach($xml->patient->case->assigneduser->user as $aval)
						{
							$variable = $aval->attributes();
							$userid = $variable->user_id;
							$cust = Doctrine::getTable('User')->find($variable->user_id);
							if(!$cust)
							{
								$usname = explode(" ", $aval[0]);
								$user = new User();
								$user->username = $variable->user_name;
								$user->first_name = $usname[0];
								$user->last_name = $usname[1];
								$user->clientid = $clientid;
								$user->save();
								$userid = $user->id;
							}

							$res = new PatientQpaMapping();
							$res->clientid = $clientid;
							$res->epid = $case->epid;
							$res->userid = $userid;
							$res->save();
						}

						/* Patient Discharge */
						$disc = new PatientDischarge();
						$disc->discharge_date = $val->case->discharge->date;
						$disc->ipid = $ipid;
						$disc->discharge_method = 1;
						$disc->discharge_location = 3;
						$disc->discharge_comment = Pms_CommonData::aesEncrypt($val->case->discharge->comment);
						$disc->save();

						/* Patient Course */
						foreach($xml->patient->coursedocumentation->entry as $cval)
						{
							$disvar = $cval->attributes();

							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = $disvar->entry_date;
							$cust->course_type = addslashes(Pms_CommonData::aesEncrypt(trim($disvar->key)));
							$cust->course_title = addslashes(Pms_CommonData::aesEncrypt(trim($cval->content)));
							$cust->user_id = $userid;
							$cust->save();
						}
					}
				}
			}
		}

		private function generateLetterPdf($chk, $ids, $pdfname = NULL)
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);


			$pm = new PatientMaster();
			$ptarr = $pm->getMasterData($decid, 0);
			$this->view->patientfirstname = $ptarr['first_name'];
			$this->view->patientlastname = $ptarr['last_name'];
			$this->view->patientaddress = $ptarr['street1'];
			$this->view->patientcity = $ptarr['city'];
			$this->view->patientbirth = $ptarr['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$pathealthinsurancenr = "";
			if(strlen($healthinsu_array[0]['insurance_no']) > 0 && $healthinsu_array[0]['insurance_no'] != '0')
			{
				$pathealthinsurancenr = $healthinsu_array[0]['insurance_no'];
			}
			else
			{
				$pathealthinsurancenr = "--";
			}

			if(!empty($healthinsu_array[0]['ins_contactperson']) && $healthinsu_array[0]['ins_contactperson'] != '0')
			{
				$pat_insurance_contactperson = $healthinsu_array[0]['ins_contactperson'];
			}
			else
			{
				$pat_insurance_contactperson = "";
			}

			if(!empty($healthinsu_array[0]['companyid']) || $healthinsu_array[0]['companyid'] != '0')
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				if($helathins)
				{
					$healtharray = $helathins->toArray();

					if(empty($healthinsu_array[0]['ins_street']))
					{
						$pat_insurance_street = $healtharray['street1'];
					}
					else
					{
						$pat_insurance_street = $healthinsu_array[0]['ins_street'];
					}
					if(empty($healthinsu_array[0]['ins_city']))
					{
						$pat_insurance_city = $healtharray['city'];
					}
					else
					{
						$pat_insurance_city = $healthinsu_array[0]['ins_city'];
					}
					if(empty($healthinsu_array[0]['ins_zip']))
					{
						$pat_insurance_zip = $healtharray['zip'];
					}
					else
					{
						$pat_insurance_zip = $healthinsu_array[0]['ins_zip'];
					}
				}
			}
			else
			{
				$pat_insurance_street = "";
				$pat_insurance_zip = "";
				$pat_insurance_city = "";
			}


			$this->view->patient_health_insurance = $pathealthinsurancenr;

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userinfo = Pms_CommonData::getUserData($logininfo->userid);
			$clientinfo = Pms_CommonData::getClientData($logininfo->clientid);

			$this->view->user_fname = $userinfo[0]['first_name'];
			$this->view->user_lname = $userinfo[0]['last_name'];
			$this->view->phone = $userinfo[0]['phone'];
			$this->view->emailid = $userinfo[0]['emailid'];


			if(is_array($ids))
			{
				$this->retainValues($ids);
				//letter1, letter2, letter3
				if(!empty($_POST['letter_docfax']))
				{
					$fax_nr = 'Fax-Nr.: ' . $_POST['letter_docfax'];
				}
				else
				{
					$fax_nr = '';
				}


//			$this->view->address = nl2br($_POST['address']) . $fax_nr;
				$this->view->address = nl2br($_POST['address']);


				if($pdfname == "doctorletterpdf18")
				{
					$fax_nr = '';
					$this->view->letter_docfax = $_POST['letter_docfax'];
					$this->view->address = nl2br($_POST['address']);
				}

				if($pdfname == "doctorletterpdf21")
				{
					$this->view->subject = nl2br($_POST['subject']);
					$this->view->content = $_POST['letter_title'] . '' . $_POST['content'];
				}
				if($pdfname == "doctorletterpdf23" || $pdfname == "doctorletterpdf24")
				{
					$fax_nr = '';
					$this->view->letter_docfax = $_POST['letter_docfax'];
					$this->view->address = nl2br($_POST['address']);
					$this->view->complex_symptom = $_POST['complex_symptom'];
					$this->view->action = $_POST['action'];
					$this->view->medication_list = $_POST['medication_list'];
					$this->view->signature = $_POST['signature'];
				}

				if($pdfname == "doctorletterpdf25")
				{
					$fax_nr = '';
					$this->view->letter_docfax = $_POST['letter_docfax'];
					$this->view->address = nl2br($_POST['address']);
				}
			}
			else
			{
				$loca = Doctrine_Query::create()
					->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
				AES_DECRYPT(content,'" . Zend_Registry::get('salt') . "') as content,
				AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address")
					->from('DoctorLetter')
					->where("id='" . $ids . "'");
				$locaarray = $loca->fetchArray();

				if($pdfname == "doctorletterpdf4")
				{
					$loca = Doctrine_Query::create()
						->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
						AES_DECRYPT(content1,'" . Zend_Registry::get('salt') . "') as content1,
						AES_DECRYPT(content2,'" . Zend_Registry::get('salt') . "') as content2,
						AES_DECRYPT(content3,'" . Zend_Registry::get('salt') . "') as content3,
						AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address")
						->from('DoctorLetterFaxvor')
						->where("id='" . $ids . "'");
					$locaarray = $loca->fetchArray();
				}

				if($pdfname == "doctorletterpdf7")
				{
					$loca = Doctrine_Query::create()
						->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
						AES_DECRYPT(content1,'" . Zend_Registry::get('salt') . "') as content1,
						AES_DECRYPT(content2,'" . Zend_Registry::get('salt') . "') as content2,
						AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address")
						->from('DoctorLetterTodes')
						->where("id='" . $ids . "'");
					$locaarray = $loca->fetchArray();
				}

				if($pdfname == 'doctorletterpdf23' || $pdfname == 'doctorletterpdf24')
				{
					$loca = Doctrine_Query::create()
						->select("*,AES_DECRYPT(subject,'" . Zend_Registry::get('salt') . "') as subject,
						AES_DECRYPT(letter_docfax,'" . Zend_Registry::get('salt') . "') as letter_docfax,
						AES_DECRYPT(letter_username,'" . Zend_Registry::get('salt') . "') as letter_username,
						AES_DECRYPT(content1,'" . Zend_Registry::get('salt') . "') as content,
						AES_DECRYPT(footer,'" . Zend_Registry::get('salt') . "') as footer,
						AES_DECRYPT(address,'" . Zend_Registry::get('salt') . "') as address,
						AES_DECRYPT(sapv_periods,'" . Zend_Registry::get('salt') . "') as sapv_periods,
						AES_DECRYPT(main_diagnosis,'" . Zend_Registry::get('salt') . "') as main_diagnosis,
						AES_DECRYPT(symptomatics_str,'" . Zend_Registry::get('salt') . "') as symptomatics_str,
						AES_DECRYPT(medication,'" . Zend_Registry::get('salt') . "') as medication,
						AES_DECRYPT(measures_str,'" . Zend_Registry::get('salt') . "') as measures_str")
						->from('DoctorLetterZapv')
						->where("id='" . $ids . "'");
					$locaarray = $loca->fetchArray();
				}

				if($locaarray)
				{
					$this->retainValues($locaarray[0]);
					if(!empty($locaarray[0]['letter_docfax']))
					{
						$fax_nr = 'Fax-Nr.: ' . $locaarray[0]['letter_docfax'];
					}
					else
					{
						$fax_nr = '';
					}
//				$this->view->address = nl2br($locaarray[0]['address']) . $fax_nr;
					$this->view->address = nl2br($locaarray[0]['address']);

					if($pdfname == "doctorletterpdf4")
					{
//					print_r($locaarray);

						$content = '';
						if(strlen($locaarray[0]['content2']) > 0 || strlen($locaarray[0]['content3']) > 0)
						{
							$content .= "<b>Anlass:</b><br />" . $locaarray[0]['content1'];
						}
						else
						{
							$content .= $locaarray[0]['content1'];
						}


						if(strlen($locaarray[0]['content2']) > 0)
						{
							$content .= "<br /><b>Maßnahmen/individueller Behandlungsplan:</b> <br />" . $locaarray[0]['content2'];
						}

						if(strlen($locaarray[0]['content3']) > 0)
						{
							$content .= "<br /><b>Bitte um:</b><br />" . $locaarray[0]['content3'];
						}
//					print_r($content);
//					exit;
						$this->view->content1 = $content;
					}

					if($pdfname == "doctorletterpdf18")
					{
						$this->view->letter_docfax = $locaarray[0]['letter_docfax'];
						$this->view->address = nl2br($locaarray[0]['address']);
					}


					$recorduser = Doctrine::getTable('User')->find($locaarray[0]['create_user']);
					if($recorduser)
					{
						$recorduserarray = $recorduser->toArray();
						$this->view->fullname = $recorduserarray['last_name'] . ", " . $recorduserarray['first_name'];
					}


					if($pdfname == "doctorletterpdf21")
					{
						$this->view->subject = nl2br($locaarray[0]['subject']);
						$this->view->content = $locaarray[0]['letter_title'] . '' . $locaarray[0]['content'];
					}

					if($pdfname == "doctorletterpdf23")
					{
						$this->view->content = $locaarray[0]['content'];

						$this->view->address = nl2br($locaarray[0]['address']);
						$this->view->letter_date = date('d.m.Y', strtotime($locaarray[0]['letter_date']));
						$this->view->erstverordnung_footer = $locaarray[0]['footer'];
						$this->view->complex_symptom = explode(',', $locaarray[0]['complex_symptom']);
						$this->view->medi_list = $locaarray[0]['medication'];
						$this->view->medication_list = $locaarray[0]['medication'];
						$this->view->action = explode(',', $locaarray[0]['medi_action']);
						$this->view->symptomatics_str = $locaarray[0]['symptomatics_str'];
						$this->view->measures_str = $locaarray[0]['measures_str'];
					}

					if($pdfname == "doctorletterpdf24")
					{
						$this->view->content = $locaarray[0]['content'];

						$this->view->address = nl2br($locaarray[0]['address']);
						$this->view->letter_date = date('d.m.Y', strtotime($locaarray[0]['letter_date']));
						$this->view->folgeverordnung_footer = $locaarray[0]['footer'];
						$this->view->complex_symptom = explode(',', $locaarray[0]['complex_symptom']);
						$this->view->medi_list = $locaarray[0]['medication'];
						$this->view->medication_list = $locaarray[0]['medication'];
						$this->view->action = explode(',', $locaarray[0]['medi_action']);
						$this->view->symptomatics_str = $locaarray[0]['symptomatics_str'];
						$this->view->measures_str = $locaarray[0]['measures_str'];
					}

					if($pdfname == "doctorletterpdf25")
					{
						$this->view->letter_docfax = $locaarray[0]['letter_docfax'];
						$this->view->address = nl2br($locaarray[0]['address']);
					}

					if($pdfname == "doctorletterpdf15")
					{
						$new_format_date = "15.05.2014";

						if(strtotime(date('d.m.Y', strtotime($locaarray[0]['create_date']))) < strtotime($new_format_date))
						{
							$contenta = str_replace("%patient_last_name", $ptarr['last_name'], $this->view->translate('editorcontent_letter15a'));
							$contenta = str_replace("%patient_first_name", $ptarr['first_name'], $contenta);
							$contenta = str_replace("%patient_kasse_nr", $pathealthinsurancenr, $contenta);
							$contenta = str_replace("%client_team_name", $clientinfo[0]['team_name'], $contenta);

							$content = $locaarray[0]['content'];

							$contentb = str_replace("%client_phone_number", $clientinfo[0]['phone'], $this->view->translate('editorcontent_letter15b'));

							$this->view->content = $contenta . $content . $contentb;
						}
					}
				}
			}

			$htmlform = $this->view->render("patient/" . $pdfname . ".html");
// 		print_r($htmlform);
// 		exit;

			$dlSession = new Zend_Session_Namespace('doctorLetterSession');
			$pname = 'doctorletter' . $dlSession->idsss;

			if($pdfname != "doctorletterpdf17" && $pdfname != "doctorletterpdf18" && $pdfname != "doctorletterpdf25" && $pdfname != "doctorletterpdf12" && $pdfname != "doctorletterpdf14" && $pdfname != "doctorletterpdf15" && $pdfname != "doctorletterpdf22" && $pdfname != "doctorletterpdf23"
			)
			{
				$header_text = $this->view->address;
				$fax_nr .= '<br />Datum: ' . $this->view->letter_date . '<br />';
			}

			if($pdfname == 'doctorletterpdf19')
			{
				$header_text = $this->view->address . ' <br />';
				$fax_nr = '';
			}

			if($pdfname == "doctorletterpdf12")
			{
				$header_text = $this->view->address;
			}

			if($pdfname == "doctorletterpdf1" || $pdfname == "doctorletterpdf19")
			{
				$bottom_margin = '30';
			}
			else
			{
				$bottom_margin = '20';
			}

			if($pdfname == "doctorletterpdf14")
			{
				$header_text = $this->view->address;
				$bottom_margin = '15';
			}

			if($pdfname == "doctorletterpdf17")
			{
				$bottom_margin = '25';
			}

			if($pdfname == "doctorletterpdf15")
			{
				$header_text = $this->view->address;
				$bottom_margin = '15';
			}

			if($pdfname == "doctorletterpdf18" || $pdfname == "doctorletterpdf25")
			{
				$header_text = '';
				$fax_nr = '';
			}

			if($pdfname == "doctorletterpdf21")
			{
				$header_text = $this->view->address;
				$fax_nr = '';
			}

			if($pdfname == "doctorletterpdf22")
			{
				$header_text = $this->view->address;
				$bottom_margin = '15';
			}

			if($pdfname == "doctorletterpdf23")
			{
				$header_text = $this->view->address;
				$fax_nr = '';
				$bottom_margin = '15';
			}

			if($pdfname == "doctorletterpdf24")
			{
				$header_text = $this->view->address;
				$fax_nr = '';
				$bottom_margin = '15';
			}

			if($pdfname == "doctorletterpdf26")
			{
				$header_text = $this->view->address;
				$fax_nr = '';
			}

			$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
			$pdf->SubHeaderText = strip_tags($fax_nr, '<br>');
			$pdf->setDefaults(true, 'P', $bottom_margin); //defaults with header
			$pdf->setPrintFooter(false);
			$pdf->setImageScale(1.5);
			$pdf->firstpagebackground = true; // set pdf background only for the first page

			if($pdfname == "doctorletterpdf1" || $pdfname == "doctorletterpdf2" || $pdfname == "doctorletterpdf19")
			{
				$pdf->SetMargins(20, 115, 30);
			}

			if($pdfname == "doctorletterpdf3" || $pdfname == "doctorletterpdf5" || $pdfname == "doctorletterpdf6" || $pdfname == "doctorletterpdf7" || $pdfname == "doctorletterpdf12" || $pdfname == "doctorletterpdf14")
			{
				$pdf->SetMargins(20, 115, 15);
			}
			if($pdfname == "doctorletterpdf4")
			{
				$pdf->SetMargins(20, 115, 15);
			}

			if($pdfname == "doctorletterpdf15")
			{
// 			$pdf->SetMargins(32, 40, 30);
				$pdf->SetMargins(25, 115, 30);
			}

			if($pdfname == "doctorletterpdf17")
			{
				$pdf->SetMargins(20, 20, 30);
			}

			if($pdfname == "doctorletterpdf18" || $pdfname == "doctorletterpdf25")
			{
				$pdf->SetMargins(20, 30, 30);
			}

			if($pdfname == "doctorletterpdf19")
			{
				$pdf->SetMargins(20, 110, 30);
			}

			if($pdfname == "doctorletterpdf20")
			{
				$pdf->SetMargins(20, 110, 20);
			}

			if($pdfname == "doctorletterpdf21")
			{
				$pdf->SetMargins(20, 95, 20);
			}

			if($pdfname == "doctorletterpdf23")
			{
				$pdf->first_page_header = true;
				$pdf->SetMargins(20, 95, 20);
			}

			if($pdfname == "doctorletterpdf24")
			{
				$pdf->first_page_header = true;
				$pdf->SetMargins(20, 95, 20);
			}

			if($pdfname == "doctorletterpdf26")
			{
				$pdf->first_page_header = true;
				$pdf->SetMargins(20, 95, 20);
			}


			$pdf->SetFont('helvetica', '', 10);
			$pdf->HeaderText = $header_text;
			$pdf->setHeaderFont(Array('helvetica', 'B', 10));

			if($pdfname == "doctorletterpdf26")
			{
				$pdf->setHeaderFont(Array('helvetica', '', 11));
				$pdf->SetFont('helvetica', '', 11);
			}


			/* ############################################### */
			/* ############### LINE HEIGHT ################### */
			/* ############################################### */
			$pdf->setCellHeightRatio(1.2); // default for all letters

			if($pdfname == "doctorletterpdf3" || $pdfname == "doctorletterpdf12" || $pdfname == "doctorletterpdf14" || $pdfname == "doctorletterpdf22")
			{
				$pdf->setCellHeightRatio(1.5);
			}
			/* ############################################### */
			if($pdfname == "doctorletterpdf18")
			{
				$background_id = "27";
			}
			else if($pdfname == "doctorletterpdf19")
			{
				$background_id = "29";
			}
			else if($pdfname == "doctorletterpdf20")
			{
				$background_id = "30"; //??
				$pdf->SetFont('helvetica', '', 10);
			}
			else if($pdfname == "doctorletterpdf21")
			{
				$background_id = "39";
				$pdf->SetFont('dejavusans', '', 10);
			}
			else if($pdfname == "doctorletterpdf22")
			{
				$background_id = "40";
			}
			else if($pdfname == "doctorletterpdf23")
			{
				$background_id = "41";
			}
			else if($pdfname == "doctorletterpdf24")
			{
				$background_id = "42";
			}
			else if($pdfname == "doctorletterpdf25")
			{
				$background_id = "46";
			}
			else if($pdfname == "doctorletterpdf26" && $_POST['visit_types'] == "bayern_doctor_visit")
			{
				$background_id = "31";
			}
			else if($pdfname == "doctorletterpdf26" && $_POST['visit_types'] == "kvno_doctor_visit")
			{
				$background_id = "32";
			}
			else if($pdfname == "doctorletterpdf26" && $_POST['visit_types'] == "sa_doctor_visit")
			{
				$background_id = "33";
			}
			else if($pdfname == "doctorletterpdf26" && $_POST['visit_types'] == "wl_doctor_visit")
			{
				$background_id = "34";
			}
			else
			{
				$background_id = str_replace('doctorletterpdf', '', $pdfname);
			}

			$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], $background_id);

			if($bg_image !== false)
			{
				$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
				if(is_file($bg_image_path))
				{
					$pdf->setBackgroundImage($bg_image_path);
				}
			}
			// add a page

			$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
			$pdf->setHTML($html);
//		print_r($html);
//		exit;

			if($chk == 1)
			{
				$tmpstmp = $dlSession->tmpstmp;
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf');
				$file_name_real = basename($tmpstmp);

				$_SESSION ['filename'] = $tmpstmp . '/' . $pname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;

// 				exec($cmd);
				$zipname = $file_name_real . ".zip";
				$filename = "uploads/" . $file_name_real . ".zip";

				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf', "uploads" );
				
			}

			if($chk == 2)
			{
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}
		}

		public function formoneAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$this->view->frmoneclass = "active";
			$this->view->verordnetarray = array('1' => "Beratung", '2' => "Korrdination", '3' => "Teilversorgung", "4" => "Vollversorgung");

			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];

			$admission_date = $parr['admission_date'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$brenmber = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where("epid= ?", $epid);
			$bexec = $brenmber->execute();
			$barray = $bexec->toArray();

			$clients = Pms_CommonData::getClientData($logininfo->clientid);

			$user = Doctrine::getTable('User')->find($logininfo->userid);

			if($user)
			{
				$uarray = $user->toArray();
				if(strlen($uarray['betriebsstattennummer']) > 0)
				{
					$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				}
				else
				{
					$this->view->betriebsstatten_nr = $clients[0]['betriebsstattennummer'];
				}
			}

			$this->view->institutskennzeichen = $clients[0]['institutskennzeichen'];

			$verd = new SapvVerordnung();
			$verdarray = $verd->getFormoneAllSapv($ipid);
			$beratung = "";
			$korrdination = "";
			$teilversorgung = "";
			$vollversorgung = "";

			foreach($verdarray as $vkey => $vval)
			{
				if(stripos($vval['verordnet'], '1') !== false)
				{
					$beratung++;
				}
				if(stripos($vval['verordnet'], '2') !== false)
				{
					$korrdination++;
				}
				if(stripos($vval['verordnet'], '3') !== false)
				{
					$teilversorgung++;
				}
				if(stripos($vval['verordnet'], '4') !== false)
				{
					$vollversorgung++;
				}
			}

			$verdfirstarray = $verd->getFormoneFirstSapv($ipid);
			$verordnet = explode(",", $verdfirstarray[0]['verordnet']);
			if($_POST['verordnet'])
			{
				foreach($_POST['verordnet'] as $vek => $verval)
				{
					$verordnet[] = $verval;
				}
				$this->view->verordnetdata = $verordnet;
			}
			else
			{
				$this->view->verordnetdata = $verordnet;
			}

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$pt = new PatientDiagnosis();
			$patarr = $pt->getPatientDiagnosisData($patientinfo['ipid']);
			$comma = ",";
			$icdarray = "0";

			foreach($patarr as $key => $val)
			{
				if($val['a_tabname'] == 'diagnosis')
				{
					$icdarray .= $comma . $val['diagnosis_id'];
					$comma = ",";
				}
			}

			$pms = new PatientMaintainanceStage();
			$pat_pmsinfo = $pms->getpatientMaintainanceStage($patientinfo['ipid']);
			if($pat_pmsinfo[0]['stage'] > 0)
			{
				$this->view->{"stage" . $pat_pmsinfo[0]['stage']} = 'checked="checked"';
			}

			$dt = new PatientDiagnosis();
			$textarr = $dt->getPatientMainDiagnosis($ipid, "diagnosis_icd");
			$did = $textarr[0]['diagnosis_id'];

			$pd = new DiagnosisIcd();
			$pdarr = $pd->getDiagnosisDataById($did);

			//***********************************//
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
			//			var_dump($typeid);
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);

			if(count($metaids) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = ",";
				$metadiagnosis = "";
				foreach($metaids as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle)
					{
						$metadiagnosis .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['icdnumber'];
						$comma = ",";
					}
				}
			}

			$this->view->icddiagnosis = $diagnosis; //.$metadiagnosis;
			//************************************************************8

			$dgND = new DiagnosisType();
			$abb2ND = "'ND'";
			$ddarr2ND = $dgND->getDiagnosisTypes($logininfo->clientid, $abb2ND);
			$comma = ",";
			$typeidND = "'0'";
			foreach($ddarr2ND as $key => $valdia)
			{
				$typeidND .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
			//		var_dump($typeidND);
			$patdiaND = new PatientDiagnosis();
			$dianoNDarray = $patdiaND->getFinalData($ipid, $typeidND);

			$patientmetaND = new PatientDiagnosisMeta();
			$metaidsND = $patientmetaND->getPatientDiagnosismeta($ipid);

			if(count($metaidsND) > 0)
			{
				$diagnosismetaND = new DiagnosisMeta();
				$comma = ",";
				$metadiagnosisND = "";
				foreach($metaidsND as $keymeta => $valmeta)
				{
					$metaNDarray = $diagnosismetaND->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaNDarray as $keytit => $metatitle)
					{
						$metadiagnosisND .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosisND = "";
				foreach($dianoNDarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosisND .= $comma . $valdia['icdnumber'];
						$comma = ",";
					}
				}
			}

			$this->view->icdarray = $dianoNDarray;
			$this->view->icdNDdiagnosis = $diagnosisND; //.ND diagnosis;
			//
	//************************************************************
			$doc = Doctrine::getTable('PatientDischarge')->findBy('ipid', $patientinfo['ipid']);
			$patientarray = $doc->toArray();

			$readmission_dates = new PatientReadmission();
			$admisiondatesarray = $readmission_dates->getPatientReadmission($patientinfo['ipid'], "1");
			$dischargedatesarray = $readmission_dates->getPatientReadmission($patientinfo['ipid'], "2");

			$last_admision = end($admisiondatesarray);
			$last_discharge = end($dischargedatesarray);


			if(count($admisiondatesarray) == count($dischargedatesarray) && count($dischargedatesarray) > 0)
			{
				$admision_date = strtotime($admisiondatesarray[0]['date']);
				$discharge_date = strtotime($last_discharge['date']);
			}
			else if((count($admisiondatesarray) - 1) == count($dischargedatesarray) && count($dischargedatesarray) > 0)
			{

				$admision_date = strtotime($admisiondatesarray[0]['date']);
				$discharge_date = strtotime(date("d.m.y"));
			}
			else if(count($patientarray) > 0 && $parr['admission_date'] != "0000-00-00 00:00:00")
			{

				$admision_date = strtotime($parr['admission_date']);
				$discharge_date = strtotime($patientarray[0]['discharge_date']);
			}
			else
			{
				$admision_date = strtotime($parr['admission_date']);
				$discharge_date = strtotime(date("d.m.Y"));
			}

//		GET Dates interval for location :start
//		get patient locations
			$pl = new PatientLocation();
			$patlocarray = $pl->getPatientLocations($ipid);

//		get client available locations
			$lc = new Locations();
			$locTypesArray = $lc->getLocations($clientid, 3);

			$readmdates = new PatientMaster();

			foreach($patlocarray as $key_locc => $val_locc)
			{
				$location_open[$key_locc] = false; //check if location is still open
				if($val_locc['valid_till'] == "0000-00-00 00:00:00")
				{
					$location_open[$key_locc] = true;
				}
			}

			//get SAPVs
			$sav = new SapvVerordnung();
			$verordungdata = $sav->getSapvVerordnungData($ipid);

			//NEW SYSTEM
			foreach($verordungdata as $verordd)
			{
				if($verordd['status'] != 1)
				{ //we have a disable date so new bis date is the disable date day-1
					$verordDays[] = $patientmaster->getDaysInBetween($verordd['verordnungam'], $verordd['verordnungbis']);
				}
			}
			if(count($verordDays) > 1)
			{
				foreach($verordDays as $kver => $vver)
				{
					foreach($vver as $sapvk => $sapvval)
					{
						$sapvdays[0][] = $sapvval;
					}
				}
			}
			else
			{
				$sapvdays[0] = $verordDays[0];
			}

			//make days array for real active period
			if(count($admisiondatesarray) == 0 && count($dischargedatesarray) == 0)
			{
				$admisiondatesarray[0]['date'] = date("Y-m-d", $admision_date);
				$dischargedatesarray[0]['date'] = date("Y-m-d", $discharge_date);
			}

			foreach($admisiondatesarray as $keyA => $valA)
			{
				if(empty($dischargedatesarray[$keyA]['date']))
				{
					$dischargeDate = date("Y-m-d");
				}
				else
				{
					$dischargeDate = $dischargedatesarray[$keyA]['date'];
				}

				$actDays[] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($valA['date'])), $dischargeDate);
			}

//death discharged method
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$todarray = $distod->fetchArray();

			$todIds[] = "999999999999";
			foreach($todarray as $kTod => $vTod)
			{
				$todIds[] = $vTod['id'];
			}
			$dispat = Doctrine_Query::create()
					->select("*")
					->from("PatientDischarge")
					->where("ipid = '" . $ipid . "'")->andWhereIn("discharge_method", $todIds)->andWhere('isdelete = 0');
			$disarray = $dispat->fetchArray();

//death button patient day
			if(count($disarray) > 0)
			{ //no discharge with tod so we get simple discharge
				foreach($disarray as $kDis => $vDis)
				{
					if(in_array($vDis['discharge_method'], $todIds))
					{
						$death_date = date("Y-m-d", strtotime($vDis['discharge_date']));
					}
				}
			}
			else
			{
				$death_date = date("Y-m-d", strtotime($dischargeDate));
			}

//death button patient day END
			if(count($actDays) > 0)
			{
				foreach($actDays as $kact => $vactP)
				{
					foreach($vactP as $keyActiveP => $valActiveP)
					{
						if(strtotime($valActiveP) <= strtotime($death_date))
						{
							$activeDays[0][] = $valActiveP;
						}
					}
				}
			}

			//make days from hospital locations only
			$locdays = array();
			foreach($patlocarray as $loc_key => $location)
			{
				if($locTypesArray[$location['location_id']] == 1)
				{
					if($location ['valid_till'] == "0000-00-00 00:00:00")
					{
						if($discharge_date <= strtotime('now'))
						{
							$till = date('Y-m-d', $discharge_date);
							$from = date('Y-m-d', strtotime($location ['valid_from']));
						}
						else
						{
							$till = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
							$from = date('Y-m-d', strtotime($location ['valid_from']));
						}
					}
					else if(strtotime(date('Y-m-d', strtotime($location['valid_till']))) == strtotime(date('Y-m-d', strtotime($location ['valid_from']))))
					{
						$till = date('Y-m-d', strtotime('+1 day', strtotime($location ['valid_till'])));
						$from = date('Y-m-d', strtotime('-1 day', strtotime($location ['valid_till'])));
					}
					else
					{

						$till = date('Y-m-d', strtotime($location ['valid_till']));
						$from = date('Y-m-d', strtotime($location ['valid_from']));
					}

					$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('+1 day', strtotime($from)));
					$patientData [$location ['ipid']] ['hospitalStartDays'][] = date("Y-m-d", strtotime($location ['valid_from']));
					$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('-1 day', strtotime($till)));

					if($location ['valid_till'] == "0000-00-00 00:00:00")
					{
						if(strtotime($discharge_date) <= strtotime('now'))
						{
							$patientData [$location ['ipid']] ['hospitalEndDays'][] = date('Y-m-d', strtotime($discharge_date));
						}
						else
						{
							$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
						}
					}
					else
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime($location ['valid_till']));
					}


					$current_hosp_days = array(); //imbecile!
					//mort la iesire cu verificare metoda de discharge + data de discharge
					if(
						in_array(date('Y-m-d', strtotime($location['valid_till'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
						in_array($disarray[0]['discharge_method'], $todIds) &&
						!in_array(date('Y-m-d', strtotime($location['valid_from'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
						date("Y-m-d", strtotime($disarray[0]['discharge_date'])) == date('Y-m-d', strtotime($location['valid_till']))
					)
					{
						$current_hosp_days = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
					}
					else if(in_array(date('Y-m-d', strtotime($location['valid_from'])), $patientData [$location ['ipid']] ['hospitalEndDays']))
					{
						//scos la intrare
						$current_hosp_days = array();
					}
					else if($location ['valid_till'] == "0000-00-00 00:00:00")
					{
						//daca nu e discharged ii dau zile (de spital) de la mineeeeeeeeeee
						$current_hosp_days = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
					}
					else
					{
						$current_hosp_days = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime('-1 day', strtotime($till))), false);
					}

					$locdays [] = $current_hosp_days;
				}
			}

			if(count($locdays) > 0)
			{
				foreach($locdays as $kloc => $vloc)
				{
					$maxArrCnt = count($vloc);
					foreach($vloc as $dklocation => $daylocation)
					{

						$locationdays[0][] = $daylocation;
					}
				}
			}

			array_unique($sapvdays[0]);
			array_unique($locationdays[0]);
			array_unique($activeDays[0]);

			if($_REQUEST['dbg'] == 1)
			{
				print_r("SAPV D\n");
				print_r($sapvdays);
				print_r("LOC D\n");
				print_r($locationdays);

				print_r("ACTIVE D\n");
				print_r($activeDays);
				print_r("ACTIVE D1\n");
				print_r($actDays);
				var_dump($death_date);
			}

			foreach($activeDays[0] as $activeKey => $activeValue)
			{
				if(in_array($activeValue, $sapvdays[0]))
				{
					$sapvFinalActiveDays[] = $activeValue;
				}
			}

			foreach($sapvFinalActiveDays as $activeSKey => $activeSValue)
			{
				if(!in_array($activeSValue, $locationdays[0]))
				{
					$finalDays[] = $activeSValue;
				}
			}

			$finalDays = array_unique($finalDays);
			if($_REQUEST['dbg'] == 1)
			{
				print_r("\n Active Days: \n");
				print_r($activeDays[0]);
				print_r("\n SAPV Days: \n");
				print_r($sapvdays[0]);
				print_r("\n Location[Hospital] Days: \n");
				print_r($locationdays[0]);
				print_r("\n SAPV Final Days: \n");
				print_r($sapvFinalActiveDays);
				print_r("\n Final Days: \n");
				print_r($finalDays);
				exit;
			}

			//NEW SYSTEM END
			$this->view->sapvdays = count($finalDays);
			$daystreated = $patientmaster->getTreatedDaysReal($ipid);

			$this->view->daystreated = $daystreated['realActiveDays'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['kvk_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];

			$hquery = Doctrine_Query::create()
				->select("*")
				->from('HealthInsurance')
				->where("(id='" . $healthinsu_array[0]['companyid'] . "' or name='" . $healthinsu_array[0]['company_name'] . "') and clientid=" . $logininfo->clientid);
			$hexec = $hquery->execute();
			$harray = $hexec->toArray();

			list($this->view->bday, $this->view->bmonth, $this->view->byear) = explode(".", $patientinfo['birthd']);

			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $patientinfo['ipid'] . '"  and isdelete="0"')
				->orderBy('id ASC');
			$patexe = $patloc->execute();
			$patloc = $patexe->toArray();
			if(count($patloc) > 0)
			{
				foreach($patloc as $key => $val)
				{
					$fdoc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->where("id='" . $val['location_id'] . "' and client_id='" . $logininfo->clientid . "'")
						->andWhere('isdelete=0')
						->andWhere("location_type=1")
						->orderBy('location ASC');
					$loc = $fdoc->execute();
					$locationarray = $loc->toArray();

					if(count($locationarray) > 0)
					{
						$num_loc++;
					}
				}

				if($num_loc == 0)
				{
					$this->view->einweisungen_keine = 1;
				}

				if($num_loc == 1)
				{
					$this->view->einweisungen_one = 1;
				}

				if($num_loc == 2)
				{
					$this->view->einweisungen_two = 1;
				}

				if($num_loc == 3)
				{
					$this->view->einweisungen_three = 1;
				}

				if($num_loc == 4)
				{
					$this->view->einweisungen_four = 1;
				}

				if($num_loc == 5)
				{
					$this->view->einweisungen_five = 1;
				}

				if($num_loc > 5)
				{
					$this->view->einweisungen_grtfive = 1;
				}
			}

			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);

			$this->view->alone = $pat_lives[0]['alone'];
			$this->view->house_of_relatives = $pat_lives[0]['house_of_relatives'];
			$this->view->home = $pat_lives[0]['home'];

			$patl = new PatientLocation();
			$locid = $patl->getFirstLocation($decid);

			$ltyp = new Locations();
			$loctype = $ltyp->getLocationbyId($locid[0]['location_id']);

			$typearay = $ltyp->getLocationTypes();

			$this->view->ltypev = $loctype[0]['location_type'];



			$locations = $patl->getPatientLocationsNotarz($ipid);
			$stamq = Doctrine_Query::create()
				->select('*')
				->from('Formone')
				->where("ipid='" . $ipid . "'");
			$stamqarr = $stamq->fetchArray();

			if(count($stamqarr) == 0)
			{
				$notarzcount = count($locations);

				if($notarzcount >= 6)
				{
					$this->view->notarzcount = 7;
				}
				elseif($notarzcount >= 0 && $notarzcount < 6)
				{
					$this->view->notarzcount = ($notarzcount + 1);
				}
				elseif(empty($notarzcount))
				{
					$this->view->notarzcount = 1;
				}
			}

			if(strlen($_POST['btnsave']) > 0)
			{
				if(empty($stamqarr[0]['id']))
				{
					$_POST['savedate'] = date("d-m-Y");
				}
				else
				{
					$_POST['savedate'] = $_POST['cur_date'];
				}
				$stamb = new Application_Form_Formone();
				$stamb->insertFormone($_POST);

				$this->retainValues($_POST);
				$this->view->folgende_mabnahme_wurden_durch = $_POST['folgende_mabnahme_wurden_durch'];
				$this->view->verordnet = $_POST['verordnet'];
				$this->view->erstkontakt = $_POST['erstkontakt'];
				$this->view->wohnsituationstart = $_POST['wohnsituation'];
				$this->view->pflegestufe = $_POST['pflegestufe'];
				$this->view->betreuungsrelevante_nebendiagnosen = $_POST['betreuungsrelevante_nebendiagnosen'];
				$this->view->betreuungsrelevante_nebendiagnosen_txtone = $_POST['betreuungsrelevante_nebendiagnosen_txtone'];
				$this->view->komplexes_symptomgeschehen = $_POST['komplexes_symptomgeschehen'];
				$this->view->sonstiges_txt = $_POST['sonstiges_txt'];
				$this->view->weiteres_komplexes_geschehen = $_POST['weiteres_komplexes_geschehen'];
				$this->view->betreuungsnetz = $_POST['betreuungsnetz'];
				$this->view->beendigung_der_sapv_wegen = $_POST['beendigung_der_sapv_wegen'];
				$this->view->sonstigestwotxt = $_POST['sonstigestwotxt'];
				$this->view->pfl_egestufe_b_abschluss = $_POST['pfl_egestufe_b_abschluss'];
				$this->view->zusatzliche_angaben_bei_verstorbenen = $_POST['zusatzliche_angaben_bei_verstorbenen'];
				$this->view->notarzteinsatze = $_POST['notarzteinsatze'];
				$this->view->einweisungen = $_POST['einweisungen'];
				$this->view->anfahrtsweg_in_km = $_POST['anfahrtsweg_in_km'];
				$this->view->wunsch_des_pat_zu_beginn = $_POST['wunsch_des_pat_zu_beginn'];
				$this->view->othertext = $_POST['othertext'];
				$this->view->beratung_en_one = $_POST['beratung_en_one'];
				$this->view->koordination_one = $_POST['koordination_one'];
				$this->view->teilversorgung_one = $_POST['teilversorgung_one'];
				$this->view->vollversorgung_one = $_POST['vollversorgung_one'];
				$this->view->sapv_behandlungszie_ja = $_POST['sapv_behandlungszie_ja'];
				$this->view->am_patient = $_POST['am_patient'];
				$this->view->fur_angehorige = $_POST['fur_angehorige'];
				$this->view->systemische_tatigkeiten = $_POST['systemische_tatigkeiten'];
			}
			else if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->retainValues($_POST);
				$this->view->folgende_mabnahme_wurden_durch = $_POST['folgende_mabnahme_wurden_durch'];
				$this->view->verordnet = $_POST['verordnet'];
				$this->view->erstkontakt = $_POST['erstkontakt'];
				$this->view->wohnsituationstart = $_POST['wohnsituation'];
				$this->view->pflegestufe = $_POST['pflegestufe'];
				$this->view->betreuungsrelevante_nebendiagnosen = $_POST['betreuungsrelevante_nebendiagnosen'];
				$this->view->betreuungsrelevante_nebendiagnosen_txtone = $_POST['betreuungsrelevante_nebendiagnosen_txtone'];
				$this->view->komplexes_symptomgeschehen = $_POST['komplexes_symptomgeschehen'];
				$this->view->sonstiges_txt = $_POST['sonstiges_txt'];
				$this->view->weiteres_komplexes_geschehen = $_POST['weiteres_komplexes_geschehen'];
				$this->view->betreuungsnetz = $_POST['betreuungsnetz'];
				$this->view->beendigung_der_sapv_wegen = $_POST['beendigung_der_sapv_wegen'];
				$this->view->sonstigestwotxt = $_POST['sonstigestwotxt'];
				$this->view->pfl_egestufe_b_abschluss = $_POST['pfl_egestufe_b_abschluss'];
				$this->view->zusatzliche_angaben_bei_verstorbenen = $_POST['zusatzliche_angaben_bei_verstorbenen'];
				$this->view->notarzteinsatze = $_POST['notarzteinsatze'];
				$this->view->einweisungen = $_POST['einweisungen'];
				$this->view->anfahrtsweg_in_km = $_POST['anfahrtsweg_in_km'];
				$this->view->wunsch_des_pat_zu_beginn = $_POST['wunsch_des_pat_zu_beginn'];
				$this->view->othertext = $_POST['othertext'];
				$this->view->beratung_en_one = $_POST['beratung_en_one'];
				$this->view->koordination_one = $_POST['koordination_one'];
				$this->view->teilversorgung_one = $_POST['teilversorgung_one'];
				$this->view->vollversorgung_one = $_POST['vollversorgung_one'];
				$this->view->sapv_behandlungszie_ja = $_POST['sapv_behandlungszie_ja'];
				$this->view->am_patient = $_POST['am_patient'];
				$this->view->fur_angehorige = $_POST['fur_angehorige'];
				$this->view->systemische_tatigkeiten = $_POST['systemische_tatigkeiten'];

				if($error == 0)
				{
					$this->retainValues($_POST);
					$this->view->folgende_mabnahme_wurden_durch = $_POST['folgende_mabnahme_wurden_durch'];
					$this->view->verordnet = $_POST['verordnet'];
					$this->view->erstkontakt = $_POST['erstkontakt'];
					$this->view->wohnsituationstart = $_POST['wohnsituation'];
					$this->view->pflegestufe = $_POST['pflegestufe'];
					$this->view->betreuungsrelevante_nebendiagnosen = $_POST['betreuungsrelevante_nebendiagnosen'];
					$this->view->betreuungsrelevante_nebendiagnosen_txtone = $_POST['betreuungsrelevante_nebendiagnosen_txtone'];
					$this->view->komplexes_symptomgeschehen = $_POST['komplexes_symptomgeschehen'];
					$this->view->sonstiges_txt = $_POST['sonstiges_txt'];
					$this->view->weiteres_komplexes_geschehen = $_POST['weiteres_komplexes_geschehen'];
					$this->view->betreuungsnetz = $_POST['betreuungsnetz'];
					$this->view->beendigung_der_sapv_wegen = $_POST['beendigung_der_sapv_wegen'];
					$this->view->sonstigestwotxt = $_POST['sonstigestwotxt'];
					$this->view->pfl_egestufe_b_abschluss = $_POST['pfl_egestufe_b_abschluss'];
					$this->view->zusatzliche_angaben_bei_verstorbenen = $_POST['zusatzliche_angaben_bei_verstorbenen'];
					$this->view->notarzteinsatze = $_POST['notarzteinsatze'];
					$this->view->einweisungen = $_POST['einweisungen'];
					$this->view->anfahrtsweg_in_km = $_POST['anfahrtsweg_in_km'];
					$this->view->wunsch_des_pat_zu_beginn = $_POST['wunsch_des_pat_zu_beginn'];
					$this->view->othertext = $_POST['othertext'];
					$this->view->beratung_en_one = $_POST['beratung_en_one'];
					$this->view->koordination_one = $_POST['koordination_one'];
					$this->view->teilversorgung_one = $_POST['teilversorgung_one'];
					$this->view->vollversorgung_one = $_POST['vollversorgung_one'];
					$this->view->sapv_behandlungszie_ja = $_POST['sapv_behandlungszie_ja'];
					$this->view->am_patient = $_POST['am_patient'];
					$this->view->fur_angehorige = $_POST['fur_angehorige'];
					$this->view->systemische_tatigkeiten = $_POST['systemische_tatigkeiten'];
					$this->generateformPdf(3, $_POST, 'Form_one', "formone_pdf.html");
				}
			}

			if(strlen($ipid) > 0)
			{
				$stamq = Doctrine_Query::create()
					->select('*')
					->from('Formone')
					->where("ipid='" . $ipid . "' and valid_till='0000-00-00 00:00:00'");
				$stexec = $stamq->execute();
				$stamqarr = $stexec->toArray();

				if(count($stamqarr) > 0)
				{
					$this->view->insurance_company_name = $stamqarr[0]['company_name'];
					$this->view->insurance_no = $stamqarr[0]['kvk_no'];
					$this->view->betriebsstatten_nr = $stamqarr[0]['betriebsstatten_nr'];
					$this->view->institutskennzeichen = $stamqarr[0]['$this->view->institutskennzeichen'];

					if($stamqarr[0]['gender'] == 1)
					{
						$this->view->male = 'checked="checked"';
					}
					else if($stamqarr[0]['gender'] == 2)
					{
						$this->view->female = 'checked="checked"';
					}
				}

				$this->retainValues($stamqarr[0]);
				$this->view->folgende_mabnahme_wurden_durch = explode(",", $stamqarr[0]['folgende_mabnahme_wurden_durch']);

				if(strlen($stamqarr[0]['grundkrankheit']) > 0)
				{
					$this->view->icddiagnosis = $stamqarr[0]['grundkrankheit'];
				}

				$this->view->verordnet = explode(",", $stamqarr[0]['verordnet']);
				$this->view->erstkontakt = explode(",", $stamqarr[0]['erstkontakt']);

				if(count($stamqarr) == 0)
				{
					if($loctype[0]['location_type'] == 5)
					{
						if($pat_lives[0]['alone'] == 1)
						{
							$wohnsituation[1] = 1;
						}
						elseif($pat_lives[0]['alone'] == 0)
						{
							$wohnsituation[2] = 2;
						}
					}
					elseif($loctype[0]['location_type'] == 2)
					{
						$wohnsituation[3] = 3;
					}
					elseif($loctype[0]['location_type'] == 3 || $loctype[0]['location_type'] == 4)
					{
						$wohnsituation[4] = 4;
					}

					$this->view->wohnsituation = $wohnsituation;
					$pmsfirst = new PatientMaintainanceStage();
					$pat_pmsfirst = $pmsfirst->getFirstpflegestufeMaintainanceStage($ipid);

					if($pat_pmsfirst[0]['stage'] != "Bitte wählen...")
					{
						$this->view->pflegestufe_first = $pat_pmsfirst[0]['stage'];
					}
					else
					{
						$this->view->pflegestufe_first = 0;
					}
				}
				else
				{
					$this->view->wohnsituation = explode(",", $stamqarr[0]['wohnsituation']);
					$this->view->pflegestufe_first = explode(",", $stamqarr[0]['pflegestufe']);
				}

				if(count($stamqarr) > 0)
				{
					$this->view->verordnetdata = "";
					$this->view->verordnetdata = explode(',', $stamqarr[0]['verordnet']);
				}

				$this->view->betreuungsrelevante_nebendiagnosen = explode(",", $stamqarr[0]['betreuungsrelevante_nebendiagnosen']);
				if(count($stamqarr) > 0)
				{
					$this->view->betreuungsrelevante_nebendiagnosen_txtone = $stamqarr[0]['betreuungsrelevante_nebendiagnosen_textone'];
				}

				$this->view->komplexes_symptomgeschehen = explode(",", $stamqarr[0]['komplexes_symptomgeschehen']);
				$this->view->sonstiges_txt = $stamqarr[0]['komplexes_symptomgeschehen_other'];
				$this->view->weiteres_komplexes_geschehen = explode(",", $stamqarr[0]['weiteres_komplexes_geschehen']);
				$this->view->betreuungsnetz = explode(",", $stamqarr[0]['betreuungsnetz']);
				if(count($stamqarr) > 0)
				{
					$this->view->beendigung_der_sapv_wegen = explode(",", $stamqarr[0]['beendigung_der_sapv_wegen']);
				}
				$this->view->sonstigestwotxt = $stamqarr[0]['beendigung_der_sapv_wegen_other'];

				$pmslast = new PatientMaintainanceStage();
				$pat_pmslast = $pmslast->getLastpflegestufeMaintainanceStage($ipid);
				if(count($stamqarr) == 0)
				{
					if($pat_pmslast[0]['stage'] == 1 || $pat_pmslast[0]['stage'] == 2 || $pat_pmslast[0]['stage'] == 3)
					{
						$this->view->pflegestufe_last = $pat_pmslast[0]['stage'];
					}
				}
				else
				{
					$this->view->pflegestufe_last = explode(",", $stamqarr[0]['pflegestufe_b_abschluss']);
				}

				$this->view->zusatzliche_angaben_bei_verstorbenen = explode(",", $stamqarr[0]['zusatzliche_angaben_bei_verstorbene']);
				if(count($stamqarr) > 0)
				{
					$this->view->notarzcount = explode(",", $stamqarr[0]['notarzteinsatze']);
				}
				$this->view->einweisungen = explode(",", $stamqarr[0]['kh_einweisungen']);
				if(count($stamqarr) != 0)
				{
					$this->view->kmaverage = explode(",", $stamqarr[0]['anfahrtsweg_in_km']);
				}
				if(count($stamqarr) == 0)
				{
					$this->view->sapvandtreatmentdays = $this->view->daystreated . ' ( ' . $this->view->sapvdays . ' SAPV)';
					$this->view->showreal_btn = 0;
				}
				else
				{
					$this->view->sapvandtreatmentdays = $stamqarr[0]['behandlungsdauer_in_tagen'];
					$this->view->showreal_btn = 1;
				}
				$this->view->real_sapvandtreatmentdays = $this->view->daystreated . ' ( ' . $this->view->sapvdays . ' SAPV)';

				$this->view->othertext = $stamqarr[0]['wohnsituation_other'];

				if(count($stamqarr) == 0)
				{
					$this->view->beratung_count = $beratung;
					$this->view->korrdination_count = $korrdination;
					$this->view->teilversorgung_count = $teilversorgung;
					$this->view->vollversorgung_count = $vollversorgung;
				}
				else
				{
					$this->view->beratung_count = $stamqarr[0]['av_beratung'];
					$this->view->korrdination_count = $stamqarr[0]['av_koordination'];
					$this->view->teilversorgung_count = $stamqarr[0]['av_teilversorgung'];
					$this->view->vollversorgung_count = $stamqarr[0]['av_vollversorgung'];
				}
				$this->view->sapv_behandlungszie_ja = $stamqarr[0]['wunsch_identisch_mit_sapv_behandlungsziel'];
				$this->view->am_patient = $stamqarr[0]['am_patient'];
				$this->view->fur_angehorige = $stamqarr[0]['fur_angehorige'];
				$this->view->systemische_tatigkeiten = $stamqarr[0]['systemische_tatigkeiten'];


				$stamqsv = Doctrine_Query::create()
					->select('*')
					->from('PatientDischarge')
					->where("ipid='" . $ipid . "'");
				$disarray = $stamqsv->fetchArray();

				$dm = new DischargeMethod();
				$dmarr = $dm->getDischargeMethodById($disarray[0]['discharge_method']);

				if($dmarr[0]['abbr'] == trim("TOD"))
				{
					if($disarray[0] !== NULL)
					{

						$qur = Doctrine_Query::create()
							->select('*')
							->from('SapvVerordnung')
							->where("ipid='" . $ipid . "' and verordnungbis >='" . $disarray[0]['discharge_date'] . "' and status <> 1 and isdelete= 0")
							->orderBy('verordnungbis DESC');
						$svarray = $qur->fetchArray();
						if($svarray && count($stamqarr) == 0)
						{
							$this->retainValues($svarray[0]);
							if($svarray[0] > 0)
							{
								$this->view->discharge_date = "checked=checked";
							}
						}
						$locd = Doctrine_Query::create()
							->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
							->from('DischargeLocation')
							->where('clientid=' . $logininfo->clientid . ' and isdelete=0 and id="' . $disarray[0]['discharge_location'] . '"');
						$discharray = $locd->fetchArray();

						$this->retainValues($discharray[0]);
						if(count($stamqarr) == 0)
						{
							$this->view->discharge_location_type = $discharray[0]['type'];
						}
					}
				}

				//dead
				$this->view->beendigung_der_sapv_wegen = "";
				if($disarray)
				{
					if(($dmarr[0]['id'] == $disarray[0]['discharge_method'] && $dmarr[0]['abbr'] == trim("TOD")))
					{
						$this->view->beendigung_der_sapv_wegen = array("5"); //is dead check verstorben
					}
				}

				$sapsy = Doctrine_Query::create()
					->select('*')
					->from('Sapsymptom')
					->where("ipid='" . $ipid . "'")
				    ->andWhere('isdelete = 0');
				$sapsyexec = $sapsy->execute();
				$sapsyarray = $sapsyexec->toArray();

				if(count($stamqarr) == 0)
				{
					$i = 1;
					foreach($sapsyarray as $sym)
					{
						$kmtotal += $sym['gesamt_fahrstrecke_in_km'];
						$i++;
					}

					$kmaverage = round(($kmtotal / $i));

					if($kmaverage <= 10)
					{
						$kmaverage[1] = 1;
					}
					if($kmaverage <= 20)
					{
						$kmaverage[2] = 2;
					}
					if($kmaverage <= 30)
					{
						$kmaverage[3] = 3;
					}
					if($kmaverage <= 50)
					{
						$kmaverage[4] = 4;
					}
					if($kmaverage > 50)
					{
						$kmaverage[5] = 5;
					}
					$this->view->kmaverage = $kmaverage;
				}

				$row_count = 0;
				foreach($sapsyarray as $vkey => $vval)
				{
					$check = explode(",", $vval['sapvalues']);
					if((in_array('1', $check)) || (in_array('2', $check)) || (in_array('3', $check)) || (in_array('4', $check)))
					{
						$row_count++;
					}
				}
				if(count($stamqarr) == 0)
				{
					$this->view->disply_row_count = $row_count;
				}
				else
				{
					$this->view->disply_row_count = $stamqarr[0]['besuche_pc_team_gesamt'];
				}

				if(count($stamqarr) == 0)
				{
					$stm = new Stammdatenerweitert();
					$stamdats = $stm->getStammdatenerweitert($ipid);

					if($stamdats[0]['wunsch'] != "0" && !empty($stamdats[0]['wunsch']))
					{
						$stamdatemwunsch = explode(",", $stamdats[0]['wunsch']);

						$wunsch_name = array("1" => "Zu Hause bleiben können", "2" => "kein Krankenhaus", "3" => "Autonomie",
							"4" => "Leidenslinderung", "5" => "Symptomlinderung", "6" => "mehr Kraft",
							"7" => "wieder aufstehen können", "8" => "noch eine Reise machen", "9" => "In Ruhe gelassen werden",
							"10" => "Keine Angabe", "11" => "Frage nach aktiver Sterbehilfe", "12" => "Lebensbeendigung", "13" => "Expliziter Wunsch");
						foreach($stamdatemwunsch as $value)
						{
							if(array_key_exists($value, $wunsch_name))
							{
								$wunsch_str .= '' . $wunsch_name[$value] . ',';
							}
						}
						$wunsch = substr($wunsch_str, 0, -1);
					}
					else
					{
						$wunsch = "";
					}
					$this->view->wunsch_des_pat_zu_beginn = $wunsch;
				}
				else
				{
					$this->view->wunsch_des_pat_zu_beginn = $stamqarr[0]['wunsch_des_pat_zu_beginn'];
				}

				if(count($stamqarr) == 0)
				{
					$patlocKH = Doctrine_Query::create()
						->select('location_id')
						->from('PatientLocation')
						->where('ipid ="' . $ipid . '"  and isdelete="0"');
					$patKHexe = $patlocKH->execute();
					if($patKHexe)
					{
						$locKHarr = $patKHexe->toArray();
						$comma = "";
						$locKHid = "";
						$khhh = 0;
						foreach($locKHarr as $key => $val)
						{
							$fdocKH = Doctrine_Query::create()
								->select("id")
								->from('Locations')
								->where("client_id='" . $logininfo->clientid . "'")
								->andWhere('id = "' . $val['location_id'] . '"')
								->andWhere('isdelete=0')
								->andWhere("location_type='1'");
							$locKH = $fdocKH->execute();
							$locKHarray = $locKH->toArray();

							if(count($locKHarray) == 1)
							{
								$khhh++;
							}
						}
					}

					if(empty($khhh))
					{
						$khhh = 0;
					}

					$this->view->KHcount = $khhh;
				}
				else
				{
					$this->view->KHcount = explode(",", $stamqarr[0]['kh_einweisungen']);
				}
			}
		}

		public function formtwoAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->frmtwoclass = "active";

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$brenmber = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where("epid='" . $epid . "'");
			$bexec = $brenmber->execute();
			$barray = $bexec->toArray();

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
			}

			$cust = Doctrine_Query::create()
				->select("*,AES_DECRYPT(client_name,'" . Zend_Registry::get('salt') . "') as client_name,AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,
AES_DECRYPT(postcode,'" . Zend_Registry::get('salt') . "') as postcode,AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,AES_DECRYPT(firstname,'" . Zend_Registry::get('salt') . "') as firstname,AES_DECRYPT(lastname,'" . Zend_Registry::get('salt') . "') as lastname
,AES_DECRYPT(emailid,'" . Zend_Registry::get('salt') . "') as emailid,AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone,AES_DECRYPT(comment,'" . Zend_Registry::get('salt') . "') as comment")
				->from('Client')
				->where('id = ' . $logininfo->clientid);
			//->where("l.loc like '%na%'");
			$cust->getSqlQuery();
			$custexec = $cust->execute();
			if($custexec)
			{
				$disarray = $custexec->toArray();
				$this->view->client_name = $disarray[0]['client_name'];
			}
            //ISPC-2391, elena, 11.09.2020
			//$this->getFormtwoData($logininfo);
			$this->getFormtwoData();

			if($this->getRequest()->isPost())
			{
				//print_r($_POST);
				$this->generateformPdf(3, $_POST, 'Form_two', "formtwo_pdf.html");
			}
		}

		public function vertragAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->contclass = "active";
		}

		public function anlagethreeAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->_helper->viewRenderer('vertrag');

			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();
			$this->view->tablepatientinfo = $patientmaster->getMasterData($decid, 1);
			$parr = $patientmaster->getMasterData($decid, 0);
			/* --------------------------------------- */

			/* Patient - Details */
			$data['kv_header']['patientname'] = $parr['last_name'] . ", " . $parr['first_name'] . "\r\n" . $parr['street1'] . "\r\n" . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['patientaddress'] = $parr['street1'] . "\r\n" . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['pataddress'] = $parr['street1'] . ", " . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['patname'] = $parr['last_name'] . ", " . $parr['first_name'];
			$data['kv_header']['patbirth'] = $parr['birthd'];
			$data['kv_header']['epid'] = $epid;

			/* Patient - Health insurance */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$data['kv_header']['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$data['kv_header']['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$data['kv_header']['insurance_status'] = $healthinsu_array[0]['insurance_status'];
			$data['kv_header']['kvnumber'] = $healthinsu_array[0]['kvk_no'];

			/* User - Info */
			$userst = Doctrine::getTable('User')->find($logininfo->userid);
			if($userst)
			{
				$uarray = $userst->toArray();
				$data['kv_header']['arzt_nr'] = $uarray['LANR'];
				$data['kv_header']['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
			}

			/* Client - Info */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$data['content']['client_team_name'] = $clientdata[0]['team_name'];
			$data['content']['client_city'] = $clientdata[0]['city'];
			$data['content']['betriebsstattennummer'] = $clientdata[0]['betriebsstattennummer'];

			/* Patient - Details */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['icdnumber'] . '';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$maindiagnosis = $diagnosis;
			}

			$data['content']['main_diagnosis'] = $maindiagnosis;

			$this->generatePdfNew(3, $data, 'Anlage_3', "anlagethreepdf.html");
		}
		
		/*
		 * ISPC-2204
		 */
		public function anlagethree2018Action()
		{
		    $data = array();
		    $logininfo =  $this->logininfo;
			//$logininfo = new Zend_Session_Namespace('Login_Info');
			//$this->_helper->viewRenderer('vertrag');

			$decid = $this->dec_id; //Pms_Uuid::decrypt($_GET['id']);
			$ipid = $this->ipid; //Pms_CommonData::getIpId($decid);
			
			//dd($this->getPatientMasterData());
			
			//dd($this->ipid, $this->dec_id);
			
// 			return;
			$patientmaster = new PatientMaster();
// 			$this->view->tablepatientinfo = $patientmaster->getMasterData($decid, 1);
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $this->getPatientMasterData();
			
			/* --------------------------------------- */

			/* Patient - Details */
			$data['kv_header']['patientname'] = $parr['last_name'] . ", " . $parr['first_name'] . "\r\n" . $parr['street1'] . "\r\n" . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['patientaddress'] = $parr['street1'] . "\r\n" . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['pataddress'] = $parr['street1'] . ", " . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['patname'] = $parr['last_name'] . ", " . $parr['first_name'];
			$data['kv_header']['patbirth'] = $parr['birthd'];
			$data['kv_header']['epid'] = $epid;

			/* Patient - Health insurance */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$data['kv_header']['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$data['kv_header']['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$data['kv_header']['insurance_status'] = $healthinsu_array[0]['insurance_status'];
			$data['kv_header']['kvnumber'] = $healthinsu_array[0]['kvk_no'];

			/* User - Info */
			$userst = Doctrine::getTable('User')->find($logininfo->userid);
			if($userst)
			{
				$uarray = $userst->toArray();
				$data['kv_header']['arzt_nr'] = $uarray['LANR'];
				$data['kv_header']['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
			}

			/* Client - Info */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$data['content']['client_team_name'] = $clientdata[0]['team_name'];
			$data['content']['client_city'] = $clientdata[0]['city'];
			$data['content']['betriebsstattennummer'] = $clientdata[0]['betriebsstattennummer'];

			/* Patient - Details */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

		    $diagnosis = array();
		    
			if(count($dianoarray) > 0) {
				
				foreach ($dianoarray as $key => $valdia) {
				    
					if (strlen($valdia['diagnosis']) > 0) {
					    
						$diagnosis[] = $valdia['icdnumber'];
					}
				}
			}

			$maindiagnosis = empty($diagnosis) ? "" : implode(', ', $diagnosis);
			
			$data['content']['main_diagnosis'] = $maindiagnosis;

			
			$data['date'] = array(
			    'tag' =>  date("d"),
			    'month' =>  date("m"),
			    'jahr' =>  date("Y"),
			);
			
			$this->view->tag = date("d");
			$this->view->month = date("m");
			$this->view->jahr = date("Y");
			
			$this->view->data = $data;
			
			
			if ($this->getRequest()->isPost() && $this->getRequest()->getPost('print_pdf')) {
			    
			    //this is the post to generate/download the pdf
			    
			    $this->view->isView = false;
			    
			    $date = $this->getRequest()->getPost('date_1');
			    $date = explode(".", $date);
			    $date_1 = array(
			        'tag' =>  $date[0],
			        'month' =>  $date[1],
			        'jahr' =>  $date[2],
			    );
			    
			    $date = $this->getRequest()->getPost('date_2');
			    $date = explode(".", $date);
			    $date_2 = array(
			        'tag' =>  $date[0],
			        'month' =>  $date[1],
			        'jahr' =>  $date[2],
			    );
			    
			    
			    $data['editables'] = array(
			        'textarea' => $this->getRequest()->getPost('textarea', ''),
			        'radio_1' => $this->getRequest()->getPost('radio_1'),
			        'radio_2' => $this->getRequest()->getPost('radio_2'),
			        'cb_3' => $this->getRequest()->getPost('cb_3'),
			        'date_1' => $date_1,
			        'date_2' => $date_2,
			    );
			    
			    $this->_anlagethree2018_generatePdf($data);
			    
			} else {
			    $this->view->isView = true;
			}
			
			return;
			
		}
		
		
		private function _anlagethree2018_generatePdf($data)
		{
		    $this->_helper->viewRenderer->setNoRender();
		    
		    $pdfname_translated = $this->translate('[Anlage 3 2018]');		    
		    $tabname = "Anlage_3";
		        
		    $htmlform = Pms_Template::createTemplate($data, 'patient/anlagethree2018.html');
		    
	        $orientation = 'P';
	        $bottom_margin = '20';
	        $format = "A4";
	        
		    $pdf = new Pms_PDF($orientation, 'mm', $format, true, 'UTF-8', false);
		    $pdf->setDefaults(true, $orientation, $bottom_margin); //defaults with header
		    $pdf->setImageScale(1.6);
		    $pdf->format = $format;
		    $pdf->SetMargins(10, 5, 10); //reset margins
		    
		    $pdf->HeaderText = false;
		    		    
		    //$pdf->setPrintFooter(false); //remove footer black line
		    $pdf->setPrintFooter(true);
		    $pdf->setFooterType('1 of n date');
		    $pdf->footer_border = "0";
		    $pdf->footer_text = $this->view->translate('[Page %s from %s (%s) - Anlage 3 2018]');
		    
		    
		    $htmlform = Pms_CommonData::html_prepare_dompdf($htmlform, '18px');
		    
		    $html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
		    
		    $pdf->setHTML($html);
		    
		    $ftp_filename = $pdf->toFTP($pdfname_translated);
		    	
		    if($ftp_filename !== false)
		    {
		        $cust = new PatientFileUpload ();
		        
		        //skip Trigger() listener
		        $cust->triggerformid = null;
		        $cust->triggerformname = null;
		        
		        $recordid = $cust->set_new_record(
		            array(
		                "title" => $pdfname_translated,
		                "ipid" => $this->ipid,
		                "file_name" => $ftp_filename,
		                "file_type" => 'PDF',
		                //"recordid" => $record_id,
		                "tabname" => $tabname,
		                "system_generated" => "0",
		            ));
		    }
		    
		    ob_end_clean();
		    ob_start();
		    
		    $pdf->toBrowser( Pms_CommonData::filter_filename($pdfname_translated, true) . '.pdf', "d");
		    exit;
		}
		
		
		
		
		

		public function einverstAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->_helper->viewRenderer('vertrag');

			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();
			$this->view->tablepatientinfo = $patientmaster->getMasterData($decid, 1);

			$parr = $patientmaster->getMasterData($decid, 0);

			$cust = new PatientCourse();
			$cust->ipid = $ipid;
			$cust->course_date = date("Y-m-d H:i:s", time());
			$cust->course_type = Pms_CommonData::aesEncrypt("K");
			$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Formular Einverständniserklärung wurde erstellt"));
			$cust->user_id = $logininfo->userid;
			$cust->save();

			$this->generateanalagethreePdf(3, $_POST, 'Einverständniserklarung', "einverstpdf.html");
		}

		public function anlage4wlAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);

			/* =================================================================================== */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->tablepatientinfo = $patientmaster->getMasterData($decid, 1);
			/* =================================================================================== */

			/* ==================== Patient - Details ============================================ */
			$parr = $patientmaster->getMasterData($decid, 0);

			$data['kv_header']['patientname'] = $parr['last_name'] . ", " . $parr['first_name'] . "\r\n" . $parr['street1'] . "\r\n" . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['patientaddress'] = $parr['street1'] . "\r\n" . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['pataddress'] = $parr['street1'] . ", " . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['patname'] = $parr['last_name'] . ", " . $parr['first_name'];
			$data['kv_header']['patbirth'] = $parr['birthd'];
			$data['kv_header']['epid'] = $epid;

			/* $this->view->addmissiondate = date('d.m.Y', strtotime($parr['admission_date'])); */
			$this->view->isdischarged = $parr['isdischarged'];

			//get first admission date
			$patactive = Doctrine_Query::create()
				->select('*')
				->from('PatientActive')
				->where('ipid="' . $ipid . '"')
				->orderBy('start ASC');
			$admisionarray = $patactive->fetchArray();
			$this->view->addmissiondate = date('d.m.Y', strtotime($admisionarray[0]['start']));

			/* ===================== Patient - Location =========================================== */
			$pt = new PatientLocation();
			$locationactive = $pt->getActiveLocationPatInfo($ipid);
			$this->view->active_location_type = $locationactive[0]['location_type'];

			/* ==================== Patient - Health insurance ==================================== */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$data['kv_header']['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$data['kv_header']['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$data['kv_header']['insurance_status'] = $healthinsu_array[0]['insurance_status'];
			$data['kv_header']['kvnumber'] = $healthinsu_array[0]['kvk_no'];

			/* ===================== Patient - Diagnosis =========================================== */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['icdnumber'] . '';
						$comma = ", ";
					}
				}
			}
			if(strlen($diagnosis) > 0)
			{
				$maindiagnosis = $diagnosis;
			}

			$data['content']['main_diagnosis'] = $maindiagnosis;

			/* ===================== User - Details =========================================== */
			$userst = Doctrine::getTable('User')->find($logininfo->userid);
			if($userst)
			{
				$uarray = $userst->toArray();
				$data['kv_header']['arzt_nr'] = $uarray['LANR'];
				$data['kv_header']['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
			}

			/* ===================== Client - Details =========================================== */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$data['content']['client_team_name'] = $clientdata[0]['team_name'];
			$data['content']['client_city'] = $clientdata[0]['city'];
			$data['content']['betriebsstattennummer'] = $clientdata[0]['betriebsstattennummer'];

			$this->view->data = $data;

			$patient_discharge = PatientDischarge::getPatientDischarge($ipid);
			if(!empty($patient_discharge[0]['discharge_date']))
			{
				$this->view->sminDate = date('d.m.Y', strtotime('+1 day', strtotime($patient_discharge[0]['discharge_date'])));
			}
			else
			{
				$this->view->sminDate = $minDate;
			}
			$this->view->smaxDate = date('d.m.Y');

			//Get discharge method for WL client discharge
			$dis = new DischargeMethod();
			$discharge_methods = $dis->getDischargeMethod($clientid, 0);

			foreach($discharge_methods as $dischargeM)
			{
				if($dischargeM['abbr'] == "STTI")
				{
					$discharge_method = $dischargeM['id'];
				}
				if($dischargeM['abbr'] == "TOD" || $dischargeM['abbr'] == "TODNA")
				{
					$death_methods[] = $dischargeM['id'];
				}
			}
			$this->view->dischargeMethod = $discharge_method;

			$disddata = new PatientDeath();
			$patientdeath = $disddata->getPatientDeath($ipid); //check out if is dead by death button

			$this->view->modal_readmission = '0';
			if($parr['isdischarged']) //if patient is discharged
			{
				if(!in_array($patient_discharge[0]['discharge_method'], $death_methods)) //discharged but not dead
				{
					if(!$patientdeath) //discharged but not dead in any methods
					{
						$this->view->modal_readmission = '1';
					}
				}
				else
				{
					$this->view->modal_readmission = '0';
				}
			}

			if($this->getRequest()->isPost())
			{

				if($_POST['save'] == 1)
				{

					if($_POST['resumed'] == "1" &&
						$_POST['readmit_patient'] == '1' &&
						!empty($_POST['begin_date']) &&
						$parr['isdischarged'] == '1' &&
						!in_array($patient_discharge[0]['discharge_method'], $death_methods) &&
						!$patientdeath &&
					    Pms_Validation::isdate($_POST['begin_date']) // validate date
					)
					{
					    // validate date
					    // verify that the post date is bigger than the previous discharge date 

					    
					    $readmision_dischargedate = date('Y-m-d H:i:s');
					    
					    $loc = Doctrine_Query::create()
					    ->select("*")
					    ->from('PatientReadmission')
					    ->where("ipid='" . $ipid . "' and date_type = '2' ")
					    ->andwhere('date < "' . date('Y-m-d H:i:s') . '"')
					    ->orderBy("date DESC")
					    ->limit(1);
					    $disarr = $loc->fetchArray();
					    
					    if($disarr)
					    {
					        $min_date = date('d.m.Y', strtotime("+1 day",strtotime($disarr[0]['date'])));
					        $previous_discharge_date = $disarr[0]['date'];
					    }
					    
                        // update only if the date is higher than the previous discharge date					    
				        if(strtotime(date("Y-m-d", strtotime($_POST['begin_date']))) > strtotime($previous_discharge_date)){
				            
    						//1. update admission in PM
    						$readm_date = date('Y-m-d', strtotime($_POST['begin_date'])) . ' ' . date('H:i:s');
    						$cust = Doctrine::getTable('PatientMaster')->findOneByIpid($ipid);
    						$cust->isdischarged = '0';
    						$cust->admission_date = $readm_date;
    						$cust->traffic_status = '1';
    						$cust->save();
    
    						//2. update discharge in PD
    						/* --------------------------------------------------------------------------------------------------------------------------------- */
    						/* ------------------------------- DISCHARGE set isdelete = 1 DON'T DELETE --------------------------------------------------------- */
    						$q = Doctrine_Query::create()
    							->update('PatientDischarge')
    							->set('isdelete', '1')
    							->where("ipid='" . $ipid . "'");
    						$q->execute();
    
    						/* --------------------------------------------------------------------------------------------------------------------------------- */
    						/* --------------------------------------------------------------------------------------------------------------------------------- */
    						//3. update readmission in PR
    						//3.1 Check if patient has entryes in readmission table and copy first admission, last discharge will be this one from form
    						$readms = new PatientReadmission();
    						$readmsdata = $readms->getPatientReadmissionAll($ipid);
    
    						//copy first admission and first discharge then add new admission date
    						if(!$readmsdata)
    						{
    							//insert admission first from PM
    							$patientreadmission = new PatientReadmission();
    							$patientreadmission->user_id = $logininfo->userid;
    							$patientreadmission->ipid = $ipid;
    							$patientreadmission->date = date('Y-m-d H:i:s', strtotime($parr['admission_date']));
    							$patientreadmission->date_type = 1; //1 =admission-readmission 2- discharge
    							$patientreadmission->save();
    
    							//insert discharge first from PD
    							$patientreadmission = new PatientReadmission();
    							$patientreadmission->user_id = $logininfo->userid;
    							$patientreadmission->ipid = $ipid;
    							$patientreadmission->date = date('Y-m-d H:i:s', strtotime($patient_discharge[0]['discharge_date']));
    							$patientreadmission->date_type = 2; //1 =admission-readmission 2- discharge
    							$patientreadmission->save();
    						}
    
    						$patientreadmission = new PatientReadmission();
    						$patientreadmission->user_id = $logininfo->userid;
    						$patientreadmission->ipid = $ipid;
    						$patientreadmission->date = $readm_date;
    						$patientreadmission->date_type = 1; //1 =admission-readmission 2- discharge
    						$patientreadmission->save();
    
    						$comment = "Patient wurde wieder aufgenommen";
    						$cust = new PatientCourse();
    						$cust->ipid = $ipid;
    						$cust->course_date = date("Y-m-d H:i:s", time());
    						$cust->course_type = Pms_CommonData::aesEncrypt("K");
    						$cust->course_title = Pms_CommonData::aesEncrypt($comment);
    						//ISPC-2691 Carmen 04.11.2020
    						$cust->tabname = Pms_CommonData::aesEncrypt("aufnahme");
    						//--
    						$cust->user_id = $logininfo->userid;
    						$cust->save();
    						
    						// Patient activation  course - admission date START
    						$activation_date_course = "Aufnahmezeitpunkt : " . date('d.m.Y', strtotime($parr['admission_date'])) . " Uhr";
    						$cust = new PatientCourse();
    						$cust->ipid = $ipid;
    						$cust->course_date = date("Y-m-d H:i:s", time());
    						$cust->course_type = Pms_CommonData::aesEncrypt("K");
    						$cust->course_title = Pms_CommonData::aesEncrypt($activation_date_course);
    						//ISPC-2691 Carmen 04.11.2020
    						$cust->tabname = Pms_CommonData::aesEncrypt("aufnahme_date");
    						//--
    						$cust->user_id = $logininfo->userid;
    						$cust->save();
    						// Patient activation  course - admission date END						
    						
    						$psteps = new PatientSteps();
    						$patient_steps_array = $psteps->get_patient_steps($ipid);
    
    						if($patient_steps_array || !empty($patient_steps_array))
    						{
    							$query = Doctrine_Query::create()
    								->update('PatientSteps')
    								->set("isdelete", "1")
    								->where("ipid LIKE '" . $ipid . "'");
    							$query->execute();
    						}
    
    						if(!empty($_POST['resumed']))
    						{
    							$cust = new PatientCourse();
    							$cust->ipid = $ipid;
    							$cust->course_date = date("Y-m-d H:i:s", time());
    							$cust->course_type = Pms_CommonData::aesEncrypt("K");
    							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes(' 	Die akutpalliativmedizinische Betreuung des o. g. Patienten wird zum ' . $_POST['begin_date'] . ' wieder aufgenommen'));
    							$cust->user_id = $logininfo->userid;
    							$cust->save();
    						}
    					}
				    }
				}

				if(!empty($_POST['required']))
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Die akutpalliativmedizinische Betreuung des o. g. Patienten ist weiterhin erforderlich'));
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}

				$_POST['kv_header']['patientname'] = $_POST['kv_header']['patientname'];
				$_POST['content'] = $data['content'];

				$this->generatePdfNew(3, $_POST, 'Anlage4wl', "anlage4wlpdf.html");
			}
		}

		public function getTimePeriod($quarterarr, $yeararr, $montharr = array())
		{
			if($quarterarr == 'only_now' && $yeararr == 'only_now' && $montharr == 'only_now')
			{
				$active_sql = '(date(%date%) >= "' . date('Y') . '-' . date('m') . '-' . date('d') . '") OR ';
				$admission_sql = '(date(%date%) < "' . date('Y') . '-' . (date('m') + 1) . '-01") OR ';
				$date_sql = ' year(%date%) > "1900" AND ';
				$interval_location_sql = '(year(%date_start%) >= "1900" AND year(%date_end%) <= "2100") OR ';
				$interval_sql = '(year(%date_start%) >= "1900" AND year(%date_end%) <= "2100") OR ';
				$negated_interval_sql = '(year(%date_start%) < "1900" AND year(%date_end%) > "2100") OR ';
				$onlynowactive = 1;
			}
			else
			{
				$onlynowactive = 0;
				if(!empty($quarterarr))
				{
					$montharr = array();
					foreach($quarterarr as $quart)
					{
						switch($quart)
						{
							case '2':
								$montharr[] = 4;
								$montharr[] = 5;
								$montharr[] = 6;
								break;

							case '3':
								$montharr[] = 7;
								$montharr[] = 8;
								$montharr[] = 9;
								break;

							case '4':
								$montharr[] = 10;
								$montharr[] = 11;
								$montharr[] = 12;
								break;

							default:
								$montharr[] = 1;
								$montharr[] = 2;
								$montharr[] = 3;
								break;
						}
					}
				}

				foreach($yeararr as $year)
				{
					if(is_numeric($year))
					{
						$year_sql .= '"' . $year . '",';

						if(is_array($montharr) && sizeof($montharr))
						{
							foreach($montharr as $month)
							{
								if(is_numeric($month))
								{
									$this_month = $year . '-' . $month . '-01';
									$this_month_end = date('Y-m-d', strtotime('-1 day', strtotime('+1 month', strtotime($this_month))));
									$next_month = date('Y-m-', strtotime('+1 month', strtotime($this_month))) . '01';

									$active_sql .= '(date(%date%) >= "' . $year . '-' . $month . '-01") OR ';
									$admission_sql .= '(date(%date%) < "' . $next_month . '") OR ';
									$interval_location_sql .= '(((date(%date_start%) >= "' . $year . '-' . $month . '-01") AND date(%date_start%) < "' . $next_month . '" AND (date(%date_end%) >= "' . $year . '-' . $month . '-01"  OR date(%date_end%) = "0000-00-00") ) OR ((date(%date_start%) >= "' . $year . '-' . $month . '-01" AND date(%date_start%) < "' . $next_month . '") AND (date(%date_end%) < "' . $next_month . '" AND (date(%date_end%) >= "' . $year . '-' . $month . '-01" OR date(%date_end%) = "0000-00-00")))) OR ';
									$interval_sql .= '(((date(%date_start%) <= "' . $year . '-' . $month . '-01") AND (date(%date_end%) >= "' . $year . '-' . $month . '-01")) OR ((date(%date_start%) >= "' . $year . '-' . $month . '-01") AND (date(%date_start%) < "' . $next_month . '"))) OR ';
									$negated_interval_sql .= '((date(%date_start%) < "' . $year . '-' . $month . '-01") AND date(%date_end%) < "' . $year . '-' . $month . '-01" AND %date_end% IS NOT NULL) OR  date(%date_start%) >= "' . $next_month . '") OR ';
									$readmission_delete_sql .= '(%date_start% IS NOT NULL AND (date(%date_start%) < "' . $year . '-' . $month . '-01") AND date(%date_end%) > "' . $this_month_end . '") AND ';
								}
								else
								{
									$active_sql .= '(year(%date%) >= "' . $year . '") OR ';
									$admission_sql .= '(year(%date%) <= "' . $year . '") OR ';
									$interval_location_sql .= '(((year(%date_start%) <= "' . $year . '") AND (year(%date_end%) >= "' . $year . '")) OR ((year(%date_start%) >= "' . $year . '") AND (year(%date_start%) < "' . ($year + 1) . '"))) OR ';
									$interval_sql .= '(((year(%date_start%) <= "' . $year . '") AND (year(%date_end%) >= "' . $year . '")) OR ((year(%date_start%) >= "' . $year . '") AND (year(%date_start%) < "' . ($year + 1) . '"))) OR ';
									$negated_interval_sql .= '((year(%date_start%) > "' . $year . '") OR (year(%date_end%) < "' . $year . '")) OR ';
									$readmission_delete_sql .= '(%date_start% IS NOT NULL AND (year(%date_start%) < "' . $year . '") AND (year(%date_end%) > "' . $year . '")) AND ';
								}
							}
						}
						else
						{
							$active_sql .= '(year(%date%) >= "' . $year . '") OR ';
							$admission_sql .= '(year(%date%) <= "' . $year . '") OR ';
							$interval_location_sql .= '(((year(%date_start%) <= "' . $year . '") AND (year(%date_end%) >= "' . $year . '")) OR ((year(%date_start%) >= "' . $year . '") AND (year(%date_start%) < "' . ($year + 1) . '"))) OR ';
							$interval_sql .= '(((year(%date_start%) <= "' . $year . '") AND (year(%date_end%) >= "' . $year . '")) OR ((year(%date_start%) >= "' . $year . '") AND (year(%date_start%) < "' . ($year + 1) . '"))) OR ';
							$negated_interval_sql .= '((year(%date_start%) > "' . $year . '") OR (year(%date_end%) < "' . $year . '" AND %date_end% IS NOT NULL)) OR ';
							$readmission_delete_sql .= '(%date_start% IS NOT NULL AND (year(%date_start%) < "' . $year . '") AND (year(%date_end%) > "' . $year . '")) AND ';
						}
					}
				}

				foreach($montharr as $month)
				{
					if(is_numeric($month))
					{
						$month_sql .= '"' . $month . '",';
					}
				}

				if(!empty($month_sql))
				{
					$date_sql .= ' month(%date%) IN (' . substr($month_sql, 0, -1) . ') AND ';
				}

				if(!empty($year_sql))
				{
					$date_sql .= ' year(%date%) IN (' . substr($year_sql, 0, -1) . ') AND ';
				}
			}

			if(!empty($date_sql))
			{
				$return['date_sql'] = substr($date_sql, 0, -5);
				$return['active_sql'] = substr($active_sql, 0, -4);
				$return['admission_sql'] = substr($admission_sql, 0, -4);
				$return['interval_location_sql'] = substr($interval_location_sql, 0, -4);
				$return['interval_sql'] = substr($interval_sql, 0, -4);
				$return['negated_interval_sql'] = substr($negated_interval_sql, 0, -4);
				$return['readmission_delete_sql'] = substr($readmission_delete_sql, 0, -5);
				$return['onlynowactive'] = $onlynowactive;

				return $return;
			}
			else
			{
				return false;
			}
		}

		function allactivepatiens($quarterarr, $yeararr, $montharr)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$finalipidval = array();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$actpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 0')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('(' . str_replace('%date%', 'admission_date', $active_cond['admission_sql']) . ')')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			//->andWhere('ipid in ('.$ipidval.')');
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere('e.clientid = ' . $logininfo->clientid);
			$actpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$actipidarray = $actpatient->fetchArray();

			foreach($actipidarray as $key => $val)
			{
				$finalipidval[] = $val['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('(' . str_replace('%date%', 'admission_date', $active_cond['admission_sql']) . ')')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere(' e.clientid = ' . $logininfo->clientid);
			$patient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$ipidarray = $patient->fetchArray();

			if(is_array($ipidarray) && sizeof($ipidarray) > 0)
			{

				foreach($ipidarray as $key => $val)
				{
					$disipidval .= '"' . $val['ipid'] . '",';
				}
				$disquery = Doctrine_Query::create()
					->select("*")
					->from('PatientDischarge')
					->where('ipid in (' . substr($disipidval, 0, -1) . ') AND (' . str_replace('%date%', 'discharge_date', $active_cond['active_sql']) . ')');
				$disarray = $disquery->fetchArray();

				foreach($disarray as $key => $val)
				{
					$finalipidval[] = $val['ipid'];
				}
			}

			$activeipid = "'0'";
			$comma = ",";
			foreach($finalipidval as $keyip => $valipid)
			{
				$activeipid.=$comma . "'" . $valipid . "'";
				$comma = ",";
			}

			return $activeipid;
		}

		public function anlage4a2Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();

			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$quarter[1] = array("1", "2", "3");
			$quarter[2] = array("4", "5", "6");
			$quarter[3] = array("7", "8", "9");
			$quarter[4] = array("10", "11", "12");

			//generate years from 2010
			for($a = 2010; $a <= date("Y"); $a++)
			{
				$years[] = $a;
			}

			//construct quarter arrays for all years for select (limit q3 in 2010 and current year-quarter)
			foreach($years as $year)
			{
				if($year == "2010")
				{
					$minQu = 3;
				}
				else
				{
					$minQu = 1;
				}

				if($year == date("Y"))
				{
					for($i = 1; $i <= 4; $i++)
					{
						if(in_array(date("n"), $quarter[$i]))
						{
							$maxQu = $i;
						}
					}
				}
				else
				{
					$maxQu = 4;
				}
				for($qu = $minQu; $qu <= $maxQu; $qu++)
				{
					$period[$qu . "." . $year] = str_pad($qu, 2, "0", STR_PAD_LEFT) . "/" . $year;
				}
			}
			$this->view->periods = $period;

			//		check if we have a period in request else get curent quarter
			if(strlen($_REQUEST['period']) == 0)
			{//get curent quarter
				for($i = 1; $i <= 4; $i++)
				{
					if(in_array(date("n"), $quarter[$i]))
					{
						$quarterFinal = $i;
						$yearFinal = date("Y"); //current year
					}
				}
			}
			else
			{ //get selected period
				$selectedPeriod = trim($_REQUEST['period']);

				$selPeriod = explode(".", $selectedPeriod);

				$quarterFinal = $selPeriod[0];
				$yearFinal = $selPeriod[1];
			}

			$selectedPeriodarray = array("0" => "" . $quarterFinal . "." . $yearFinal . "");
			$this->view->selectedPeriodArray = $selectedPeriodarray;

			$q[0] = $quarterFinal;
			$y[0] = $yearFinal;

			$this->view->currentQ = $quarterFinal;
			$this->view->currentY = $yearFinal;
			$viewdata['currentQ'] = $quarterFinal;
			$viewdata['currentY'] = $yearFinal;

			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');


			//query gel all client patients that are not standby
			$clientpatsnonstandby = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping e')
				->leftJoin('e.PatientMaster p')
				->where('e.ipid = p.ipid')
				->andWhere('e.clientid = ' . $clientid . '')
				->andWhere('p.isstandby=0')
				->andWhere('p.isdelete = 0')
				->andWhere('p.isstandbydelete = 0');
			$clientpatsnonstandbyarr = $clientpatsnonstandby->fetchArray();

			foreach($clientpatsnonstandbyarr as $patientnonstandby)
			{
				$clientIpidsNonStbyArr[] = $patientnonstandby['ipid'];
			}

			//query get all clients patients
			$clientpats = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping')
				->where('clientid = ' . $clientid . '');
			$clientpatientsipidarr = $clientpats->fetchArray();

			foreach($clientpatientsipidarr as $patient)
			{
				$clientipidsArr[] = $patient['ipid'];
			}
			if(empty($clientipidsArr))
			{
				$clientipidsArr[] = '999999999';
			}

			//query get all client private patients
			$ppC = Doctrine_Query::create()
				->select('*')
				->from('PatientHealthInsurance')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('privatepatient = "1"');
			$pPatientsC = $ppC->fetchArray();

			foreach($pPatientsC as $PrivatePatient)
			{
				$privPatient[] = $PrivatePatient['ipid'];
			}
			if(empty($privPatient))
			{
				$privPatient[] = '99999999';
			}

			//query get all client  patients with L92011
			$cl_patients_lentry = Doctrine_Query::create()
				->select("ipid")
				->from('PatientCourse')
				->whereIn('ipid', $clientipidsArr)
				->andwhere("wrong !=1 and course_type='" . addslashes(Pms_CommonData::aesEncrypt('L')) . "' ")//Ancuta 08.04.2020 MYSQL GONE Bug fix [use wrong instead of wrongcomment]
				->andwhere('AES_DECRYPT(course_title,"' . Zend_Registry::get('salt') . '")   LIKE "%92011%" ')
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$cl_patients_lentry_array = $cl_patients_lentry->fetchArray();

			foreach($cl_patients_lentry_array as $clpatientl)
			{
				$LentryPatients[] = $clpatientl['ipid'];
			}
			if(count($LentryPatients) == 0)
			{
				$LentryPatients[0] = "999999";
			}

			$clientipidsArr = array_diff($clientipidsArr, $LentryPatients);

			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $patientmaster->getDaysInBetween($period['start'][0], $period['end'][0]);


			//query get all active patients in selected period
			if($_REQUEST['old'])
			{

				$active_qipids = $this->getActivePatients($q, $y);
				print_r("\n");
				print_r("active_patients : \n");
				print_r($active_qipids);
				print_r("\n");
			}
			##########################################################
			// get active patients - new version
			$period_start_active = date('Y-m-d', strtotime($period['start'][0]));
			$period_end_active = date('Y-m-d', strtotime($period['end'][0]));
			$active_qipids_array = Pms_CommonData::patients_active("*", $clientid, array("0" => array('start' => $period_start_active, 'end' => $period_end_active)));

			foreach($active_qipids_array as $pipid => $pdetails)
			{
				$active_qipids[] = $pdetails['ipid'];
			}
			##########################################################
			if($_REQUEST['old'])
			{

				print_r("\n");
				print_r("active_patients : \n");
				print_r($active_qipids);
				print_r("\n");
			}
			$active_qipids = array_diff($active_qipids, $LentryPatients);

			// all client patients that are not PV
			$npClientsIpidsArr = array_values(array_diff($clientipidsArr, $privPatient));

			if(empty($npClientsIpidsArr))
			{
				$npClientsIpidsArr[] = '99999999';
			}

			// all active, non private patients of client
			$npClientsIpidsActive = array_values(array_intersect($active_qipids, $npClientsIpidsArr));
			$npClientsIpidsActive = array_unique($npClientsIpidsActive);

			// all avtive patients No PV and No L92011
			$clientPatActiveArr = array_values(array_diff($npClientsIpidsActive, $LentryPatients)); // remove patients with L92011 activ in report period
			$clientpatarr = array_unique($clientPatActiveArr);

			if(count($clientpatarr) == 0)
			{
				$clientpatarr[] = '99999999999999';
			}

			//query get all standby patients or delete or standbydelete
			$clientpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('isdelete="1" OR isstandby=1 OR isstandbydelete="1"');
			$standbypatients = $clientpatients->fetchArray();

			$standbypatientsstr = "'99999999'";
			$comma = ",";
			foreach($standbypatients as $kst => $patientst)
			{
				$st_del_patients[] = $patientst['ipid'];
				$standbypatientsstr .= $comma . "'" . $patientst['ipid'] . "'";
				$comma = ",";
			}
			if(count($st_del_patients) == 0)
			{
				$st_del_patients[] = '99999999999999';
			}

			$ALL_patients = array_values(array_diff($clientpatarr, $st_del_patients)); // all active patients, no PV, no L90211, no standby
			$ALL_patients = array_values(array_diff($ALL_patients, $LentryPatients)); // all active patients, no PV, no L90211, no standby
			$ALL_patients = array_unique($ALL_patients);

			$this->view->patientsamountvv = count($ALL_patients); // Palliativ-Falle Gesamt
			$viewdata['patientsamountvv'] = count($ALL_patients);


			$clientpatarr = array_unique($ALL_patients); // active patients in period with no pv and no L92011
			//query get all patients admited in period from active patients
			$clientAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('isdelete="0"')
				->andWhere('isstandby="0"')
				->andWhere('isstandbydelete="0"')
				->andWhere('admission_date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmission = $clientAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmission as $patient)
			{
				$admisionPatients[] = $patient['ipid'];
			}
			if(count($admisionPatients) == 0)
			{
				$admisionPatients[0] = "999999";
			}

			//query get all patients re-admited in period from active patientsl
			$clientReAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientReadmission')
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('date_type = "1"')
				->andWhere('date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmissions = $clientReAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmissions as $patientR)
			{
				$reAdmisionPatients[] = $patientR['ipid'];
			}
			if(count($reAdmisionPatients) == 0)
			{
				$reAdmisionPatients[0] = "999999";
			}

//		3. preluare admisii pacienti cu metoda lu pestea
			$b_patient_admisions = $patientmaster->getTreatedDaysRealMultiple($clientIpidsNonStbyArr);

			$ipids_readmision_outisde[] = '9999999';

			foreach($b_patient_admisions as $k_admision => $v_admision)
			{
				//$v_admision['admission_date'] is the first admission date always
				if(!Pms_CommonData::isintersected(
						strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime($period['start'][0]), strtotime($period['end'][0])))
				{
					$ipids_readmision_outisde[] = $k_admision;
				}
			}

			$AdmReadmPatients = array_merge($admisionPatients, $clientIpidsNonStbyArr);
			$AdmReadmPatients = array_merge($AdmReadmPatients, $reAdmisionPatients);
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $privPatient));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $LentryPatients));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $ipids_readmision_outisde));
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));

			if($_REQUEST['dbgx'])
			{
				print_r($b_patient_admisions);
				print_r($ipids_readmision_outisde);
				print_r($AdmReadmPatients);
				print_r($period['start'][0] . ' - ' . $period['end'][0]);

				exit;
			}
			if(count($AdmReadmPatients) == 0)
			{
				$AdmReadmPatients[] = '999999';
			}

			if(count($AdmReadmPatients) == 1 && in_array('999999', $AdmReadmPatients))
			{
				$this->view->noprivatepatientadmission = "0";
				$viewdata['noprivatepatientadmission'] = "0";
			}
			else
			{
				$this->view->noprivatepatientadmission = count($AdmReadmPatients); // Neu-Aufnahme Kassenpatient
				$viewdata['noprivatepatientadmission'] = count($AdmReadmPatients);
			}

			if($_REQUEST['dbg'] == 1)
			{
				print_r("ALL active ipids in period\n");
				print_r($active_qipids);
				print_r("Pacienti admisi din PM\n");
				print_r($admisionPatients);
				print_r("\nPacienti admisi din PRA\n");
				print_r($reAdmisionPatients);
				print_r("\nPacientii admisi si readmisi in perioada selectata (unique and merge)\n");
				print_r($AdmReadmPatients);
				print_r("\nAll Private patients of client\n");
				print_r($privPatient);
				print_r("\nAll l92011 patients of client\n");
				print_r($LentryPatients);
				print_r("\nAll STANDBY patients of client\n");
				print_r($st_del_patients);
				print_r("\nAll non privat patients of client\n");
				print_r($npClientsIpidsArr);
				print_r("\nAll non privat patients of client, active in period\n");
				print_r($npClientsIpidsActive);
				print_r("\nPalliativ-Falle Gesamt\n");
				print_r($clientpatarr);
			}

			//query get all discharge method DEAD of client // PRIMUL QUERY
			$dm = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->Where('isdelete = 0')
				->andWhere('clientid = ' . $logininfo->clientid)
				->andWhere('abbr IN ("TOD", "TODNA")');
			$dischargemethods = $dm->fetchArray();

			if(count($dischargemethods) > 0)
			{
				foreach($dischargemethods as $dmkey => $dmvalue)
				{
					$dischargeids[] = $dmvalue['id'];
				}
			}

			if(count($dischargeids) == 1)
			{
				$dischargemethodids = $dischargeids[0];
			}
			else if(count($dischargeids) > 0 && count($dischargeids) != 1)
			{
				$dischargemethodids = implode(",", $dischargeids);
			}

			$quarter_start_m = $quarter[$quarterFinal][0];
			$quarter_end_m = end($quarter[$quarterFinal]);

			$quarter_start_first_day = strtotime("{$y[0]}-{$quarter_start_m}-01");
			$quarter_end_first_day = strtotime("{$y[0]}-{$quarter_end_m}-01");
			$quarter_end_last_day = strtotime('-1 second', strtotime('+1 month', $quarter_end_first_day));

			$quarter_start_first_dayy = date("Y-m-d H:i:s", $quarter_start_first_day);
			$quarter_end_last_dayy = date("Y-m-d H:i:s", $quarter_end_last_day);

			//query get all DEAD patients with discharge day < = quarter_start_first_day
			$discharged_pat_inquarter = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->where('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date <= "' . $quarter_start_first_dayy . '"');
			$quarter_dead_pat = $discharged_pat_inquarter->fetchArray();

			$dq_ipids[] = '999999';
			foreach($quarter_dead_pat as $dq_key => $dq_val)
			{
				$dq_ipids[] = $dq_val['ipid'];
			}

			$vvhistory = new VollversorgungHistory();
			$vvStartDates = $vvhistory->getVollversorgungHistory($clientpatarr, "1", $dq_ipids);
			$vvEndDates = $vvhistory->getVollversorgungHistory($clientpatarr, "2", $dq_ipids);

			foreach($vvStartDates as $ipid => $startDates)
			{
				foreach($startDates as $keys => $start)
				{
					$vvPeriods[$ipid]['start'][] = $start['date'];
					$vvStart = $start['date'];

					if(empty($vvEndDates[$ipid][$keys]['date']))
					{
						$vvPeriods[$ipid]['end'][] = date("Y-m-d H:i:s");
						$vvEnd = date("Y-m-d H:i:s");
					}
					else
					{
						$vvPeriods[$ipid]['end'][] = $vvEndDates[$ipid][$keys]['date'];
						$vvEnd = $vvEndDates[$ipid][$keys]['date'];
					}

					if(Pms_CommonData::isintersected(strtotime($period['start'][0]), strtotime($period['end'][0]), strtotime($vvStart), strtotime($vvEnd)))
					{
						$finalArray[] = $ipid;
					}
				}
			}
			$finalArray = array_diff($finalArray, $LentryPatients);
			$allVvArray = array_values(array_unique($finalArray));

			$this->view->versorgungstatus = count($allVvArray); // Vollversorgung ohne Pallicare-Versorgung
			$viewdata['versorgungstatus'] = count($allVvArray);

			if($_REQUEST['dbg'] == 1)
			{
				print_r("\nVollversorgung ohne Pallicare-Versorgung\n");
				print_r($allVvArray);
			}

			$active_cond = $this->getTimePeriod($q, $y);
			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $patientmaster->getDaysInBetween($period['start'][0], $period['end'][0]);


			//Get client locations START
			$locationTypesArray = Pms_CommonData::getDischargeLocationTypes();

			//query 	Wohnung=Zu house location ids => type=1
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->whereIn('type',array('1','8'))
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$loc = $dl->fetchArray();

			if(count($loc) > 0)
			{
				$comma = ",";
				$idsHouse = "'999999999'";
				foreach($loc as $location)
				{
					$idsHouse .= $comma . "'" . $location['id'] . "'";
					$comma = ",";
				}
				$dlocation['wohnung'] = $idsHouse;
			}
			else
			{
				$dlocation['wohnung'] = "'999999999'";
			}



			//query		Altenheim/Pflegeheim location ids
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type = 4')
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$loc = $dl->fetchArray();

			if(count($loc) > 0)
			{
				$comma = ",";
				$idsAltenheim = "'999999999'";
				foreach($loc as $location)
				{
					$idsAltenheim .= $comma . "'" . $location['id'] . "'";
					$comma = ",";
				}
				$dlocation['altenheim'] = $idsAltenheim;
			}
			else
			{
				$dlocation['altenheim'] = "'999999999'";
			}

			//query		Hospiz location ids
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type = 3')
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$loc = $dl->fetchArray();
			if(count($loc) > 0)
			{
				$comma = ",";
				$idsHospiz = "'999999999'";

				foreach($loc as $location)
				{
					$idsHospiz .= $comma . "'" . $location['id'] . "'";
					$comma = ",";
				}
				$dlocation['hospiz'] = $idsHospiz;
			}
			else
			{
				$dlocation['hospiz'] = "'999999999'";
			}

			//query		palliativstation location ids
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type = 5')
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$loc = $dl->fetchArray();
			if(count($loc) > 0)
			{
				$comma = ",";
				$idsPalliativstation = "'999999999'";

				foreach($loc as $location)
				{
					$idsPalliativstation .= $comma . "'" . $location['id'] . "'";
					$comma = ",";
				}
				$dlocation['palliativstation'] = $idsPalliativstation;
			}
			else
			{
				$dlocation['palliativstation'] = "'999999999'";
			}

			//query		Krankenhaus location ids
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type = 2')
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$loc = $dl->fetchArray();
			if(count($loc) > 0)
			{
				$comma = ",";
				$idsKrankenhaus = "'999999999'";
				foreach($loc as $location)
				{
					$idsKrankenhaus .= $comma . "'" . $location['id'] . "'";
					$comma = ",";
				}
				$dlocation['krankenhaus'] = $idsKrankenhaus;
			}
			else
			{
				$dlocation['krankenhaus'] = "'999999999'";
			}
			//	Get client locations END
			//query get all patients dead in quarter
			$discharged = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN (' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"');
			$dischargedpatarr = $discharged->fetchArray();

			//Betreuungszeitraum in Tagen (Median) <--- the COMPLETE DoT of all DIED patients in that quartal. MEDIAN.
			$deadipids = array();
			foreach($dischargedpatarr as $d_key => $deadpat)
			{
				if(is_array($deadpat))
				{
					$deadipids[] = $deadpat['ipid'];
				}
				else
				{
					$deadipids[] = $deadpat;
				}
			}

			//		START Radu Added new dead (death button) method patients to median
			$pt = new PatientDeath();
			$deadPatients = array();
			$deadPatients = $pt->getDeadPatientsDot($clientipidsArr, $quarter_start_first_dayy, $quarter_end_last_dayy);

			if(count($deadPatients) == 1 && in_array('999999999', $deadPatients))
			{
				$deadPatients = array();
			}

			$deadipids = array_merge($deadipids, $deadPatients);

			$deadipids = array_values(array_diff($deadipids, $privPatient));
			$deadipids = array_values(array_diff($deadipids, $LentryPatients));
			$deadipids = array_unique($deadipids);

			if(count($deadipids) == 1 && in_array('999999', $deadipids))
			{
				$this->view->alldeadpatients = "0";
				$viewdata['alldeadpatients'] = "0";
			}
			else
			{
				$this->view->alldeadpatients = count($deadipids); //  Sterbeort Verstorbene Gesamt
				$viewdata['alldeadpatients'] = count($deadipids);
			}

			//		END Radu Added new dead (death button) method patients to median
			if($_REQUEST['dbg'] == 1)
			{
				print_r("\n Death by button\n");
				print_r($deadPatients);
				print_r("\nPacienti dead in quarter\n");
				print_r($deadipids);
				exit;
			}

// 		$treatmentdaysdatadead = $patientmaster->getTreatedDaysRealMultiple($deadipids, false);
// 		foreach($treatmentdaysdatadead as $patientTreatmentIpid => $patientTreatmentData)
// 		{
// 			$median_arr[] = $patientTreatmentData['realActiveDays'];
// 		}
			#############################################
			$period_start_sec = "2009-01-01";
			$period_end_sec = date("Y-m-d");
			$conditions_sec['periods'] = array("0" => array('start' => $period_start_sec, 'end' => $period_end_sec));
			$conditions_sec['client'] = $clientid;
			$conditions_sec['ipids'] = $mdeadipids;

			$dead_patients_details = Pms_CommonData::patients_days($conditions_sec);
			foreach($dead_patients_details as $patient_ipid => $patient_data)
			{
				$median_arr[] = $patient_data['treatment_days_no'];
			}
			#############################################


			$median = Pms_CommonData::calculate_median($median_arr);

			if($_REQUEST['dbg'] == 2)
			{
				print_r("\n Discharged \n");
				print_r($dischargedpatarr);
				print_r("\n Private \n");
				print_r($privPatient);
				print_r("\n Dead #1\n");
				print_r($deadPatients);
				print_r("\n Dead #2 \n");
				print_r($deadipids);
				print_r("\n Median #1 \n");
				print_r($median_arr);
				print_r("\n Discharge \n");
				print_r($dischargemethodids);
				exit;
			}

			$this->view->averagetreatmentdays = number_format($median, 2); // Betreuungszeitraum in Tagen (Median)
			$viewdata['averagetreatmentdays'] = number_format($median, 2);

			//query get all dead patients in quarter in zu house location
			$discharged_h = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"')
				->andWhere('discharge_location IN (' . $dlocation['wohnung'] . ')');
			$wohnungdeadpat = $discharged_h->fetchArray();

			$this->view->wohnungdeadpatients = count($wohnungdeadpat);
			$viewdata['wohnungdeadpatients'] = count($wohnungdeadpat);

			//query	all dead patients in quarter in Altenheim/Pflegeheim location
			$discharged_a = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"')
				->andWhere('discharge_location IN (' . $dlocation['altenheim'] . ')');
			$altenheimdeadpat = $discharged_a->fetchArray();

			$this->view->altenheimdeadpatients = count($altenheimdeadpat);
			$viewdata['altenheimdeadpatients'] = count($altenheimdeadpat);

			//query	all dead patients in quarter in Hospiz location
			$discharged_hospiz = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"')
				->andWhere('discharge_location IN (' . $dlocation['hospiz'] . ')');
			$hospizdeadpat = $discharged_hospiz->fetchArray();

			$this->view->hospizdeadpatients = count($hospizdeadpat);
			$viewdata['hospizdeadpatients'] = count($hospizdeadpat);

			//query	all dead patients in quarter in hospital location
			$discharged_k = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"')
				->andWhere('discharge_location IN (' . $dlocation['krankenhaus'] . ')');
			$krankenhausdeadpat = $discharged_k->fetchArray();

			$this->view->krankenhausdeadpatients = count($krankenhausdeadpat);
			$viewdata['krankenhausdeadpatients'] = count($krankenhausdeadpat);

			//query	all dead patients in quarter in hospital location
			$discharged_palliativ = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"')
				->andWhere('discharge_location IN (' . $dlocation['palliativstation'] . ')');
			$palliativdeadpat = $discharged_palliativ->fetchArray();

			$this->view->palliativdeadpatients = count($palliativdeadpat);
			$viewdata['palliativdeadpatients'] = count($palliativdeadpat);

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);

			$this->view->clientcity = $clientdata[0]['city'];
			$this->view->client_name = $clientdata[0]['team_name'];
			$viewdata['clientcity'] = $clientdata[0]['city'];

			$this->view->todaydate = date("d.m.Y");
			$viewdata['todaydate'] = date("d.m.Y");



			if(strlen($_POST['btnsave']) > 0)
			{
				$this->generateanalagethreePdf(3, $viewdata, 'Anlage4a2wl', "anlage4a2wl.html");
			}
		}

		public function reportanlage4a2Action()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->layout->setLayout('layout');
			set_time_limit(0);
			
			$quarter[1] = array("1", "2", "3");
			$quarter[2] = array("4", "5", "6");
			$quarter[3] = array("7", "8", "9");
			$quarter[4] = array("10", "11", "12");

			//generate years from 2010
			for($a = 2010; $a <= date("Y"); $a++)
			{
				$years[] = $a;
			}

			//construct quarter arrays for all years for select (limit q3 in 2010 and current year-quarter)
			foreach($years as $year)
			{
				if($year == "2010")
				{
					$minQu = 3;
				}
				else
				{
					$minQu = 1;
				}

				if($year == date("Y"))
				{
					for($i = 1; $i <= 4; $i++)
					{
						if(in_array(date("n"), $quarter[$i]))
						{
							$maxQu = $i;
						}
					}
				}
				else
				{
					$maxQu = 4;
				}
				for($qu = $minQu; $qu <= $maxQu; $qu++)
				{
					$period[$qu . "." . $year] = str_pad($qu, 2, "0", STR_PAD_LEFT) . "/" . $year;
				}
			}
			$this->view->periods = $period;

			//		check if we have a period in request else get curent quarter
			if(strlen($_REQUEST['period']) == 0)
			{//get curent quarter
				//		curent month in which quarter?
				for($i = 1; $i <= 4; $i++)
				{
					if(in_array(date("n"), $quarter[$i]))
					{
						$quarterFinal = $i;
						$yearFinal = date("Y"); //current year
					}
				}
			}
			else
			{ //get selected period
				$selectedPeriod = trim($_REQUEST['period']);

				$selPeriod = explode(".", $selectedPeriod);

				$quarterFinal = $selPeriod[0];
				$yearFinal = $selPeriod[1];
			}

			$selectedPeriodarray = array("0" => "" . $quarterFinal . "." . $yearFinal . "");
			$this->view->selectedPeriodArray = $selectedPeriodarray;

			$q[0] = $quarterFinal;
			$y[0] = $yearFinal;

			$this->view->currentQ = $quarterFinal;
			$this->view->currentY = $yearFinal;
			$viewdata['currentQ'] = $quarterFinal;
			$viewdata['currentY'] = $yearFinal;

			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			//query gel all client patients that are not standby
			$clientpatsnonstandby = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping e')
				->leftJoin('e.PatientMaster p')
				->where('e.ipid = p.ipid')
				->andWhere('e.clientid = ' . $clientid . '')
				->andWhere('p.isstandby=0')
				->andWhere('p.isdelete = 0')
				->andWhere('p.isstandbydelete = 0');
			$clientpatsnonstandbyarr = $clientpatsnonstandby->fetchArray();

			foreach($clientpatsnonstandbyarr as $patientnonstandby)
			{
				$clientIpidsNonStbyArr[] = $patientnonstandby['ipid'];
			}

			//query get all clients patients
			$clientpats = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping')
				->where('clientid = ' . $clientid . '');
			$clientpatientsipidarr = $clientpats->fetchArray();

			foreach($clientpatientsipidarr as $patient)
			{
				$clientipidsArr[] = $patient['ipid'];
			}
			if(empty($clientipidsArr))
			{
				$clientipidsArr[] = '999999999';
			}

			//query get all client private patients
			$ppC = Doctrine_Query::create()
				->select('*')
				->from('PatientHealthInsurance')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('privatepatient = "1"');
			$pPatientsC = $ppC->fetchArray();

			foreach($pPatientsC as $PrivatePatient)
			{
				$privPatient[] = $PrivatePatient['ipid'];
			}
			if(empty($privPatient))
			{
				$privPatient[] = '99999999';
			}

			//query get all client  patients with L92011
			$cl_patients_lentry = Doctrine_Query::create()
				->select("ipid")
				->from('PatientCourse')
				->whereIn('ipid', $clientipidsArr)
				->andwhere("wrong !=1 and course_type='" . addslashes(Pms_CommonData::aesEncrypt('L')) . "' ")//Ancuta 08.04.2020 MYSQL GONE Bug fix [use wrong instead of wrongcomment]
				->andwhere('AES_DECRYPT(course_title,"' . Zend_Registry::get('salt') . '")   LIKE "%92011%" ')
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$cl_patients_lentry_array = $cl_patients_lentry->fetchArray();

			foreach($cl_patients_lentry_array as $clpatientl)
			{
				$LentryPatients[] = $clpatientl['ipid'];
			}
			if(count($LentryPatients) == 0)
			{
				$LentryPatients[0] = "999999";
			}

			$clientipidsArr = array_diff($clientipidsArr, $LentryPatients);

			$pms = new PatientMaster();
			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $pms->getDaysInBetween($period['start'][0], $period['end'][0]);

			//query get all active patients in selected period
// 		$active_qipids = $this->getActivePatients($q, $y);
			##########################################################
			// get active patients - new version
			$period_start_active = date('Y-m-d', strtotime($period['start'][0]));
			$period_end_active = date('Y-m-d', strtotime($period['end'][0]));
			$active_qipids_array = Pms_CommonData::patients_active("*", $clientid, array("0" => array('start' => $period_start_active, 'end' => $period_end_active)));

			foreach($active_qipids_array as $pipid => $pdetails)
			{
				$active_qipids[] = $pdetails['ipid'];
			}
			##########################################################
			$active_qipids = array_diff($active_qipids, $LentryPatients);

			// all client patients that are not PV
			$npClientsIpidsArr = array_values(array_diff($clientipidsArr, $privPatient));

			if(empty($npClientsIpidsArr))
			{
				$npClientsIpidsArr[] = '99999999';
			}

			// all active, non private patients of client
			$npClientsIpidsActive = array_values(array_intersect($active_qipids, $npClientsIpidsArr));
			$npClientsIpidsActive = array_unique($npClientsIpidsActive);

			// all avtive patients No PV and No L92011
			$clientPatActiveArr = array_values(array_diff($npClientsIpidsActive, $LentryPatients)); // remove patients with L92011 activ in report period
			$clientpatarr = array_unique($clientPatActiveArr);

			if(count($clientpatarr) == 0)
			{
				$clientpatarr[] = '99999999999999';
			}

			//query get all standby patients or delete or standbydelete
			$clientpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('isdelete="1" OR isstandby=1 OR isstandbydelete="1"');
			$standbypatients = $clientpatients->fetchArray();

			$standbypatientsstr = "'99999999'";
			$comma = ",";
			foreach($standbypatients as $kst => $patientst)
			{
				$st_del_patients[] = $patientst['ipid'];
				$standbypatientsstr .= $comma . "'" . $patientst['ipid'] . "'";
				$comma = ",";
			}
			if(count($st_del_patients) == 0)
			{
				$st_del_patients[] = '99999999999999';
			}

			$ALL_patients = array_values(array_diff($clientpatarr, $st_del_patients)); // all active patients, no PV, no L90211, no standby
			$ALL_patients = array_values(array_diff($ALL_patients, $LentryPatients)); // all active patients, no PV, no L90211, no standby
			$ALL_patients = array_unique($ALL_patients);

			$this->view->patientsamountvv = count($ALL_patients); // Palliativ-Falle Gesamt
			$viewdata['patientsamountvv'] = count($ALL_patients);

			$clientpatarr = array_unique($ALL_patients); // active patients in period with no pv and no L92011
			//query get all patients admited in period from active patients
			$clientAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('isdelete="0"')
				->andWhere('isstandby="0"')
				->andWhere('isstandbydelete="0"')
				->andWhere('admission_date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmission = $clientAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmission as $patient)
			{
				$admisionPatients[] = $patient['ipid'];
			}
			if(count($admisionPatients) == 0)
			{
				$admisionPatients[0] = "999999";
			}

			//query get all patients re-admited in period from active patients
			$clientReAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientReadmission')
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('date_type = "1"')
				->andWhere('date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmissions = $clientReAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmissions as $patientR)
			{
				$reAdmisionPatients[] = $patientR['ipid'];
			}
			if(count($reAdmisionPatients) == 0)
			{
				$reAdmisionPatients[0] = "999999";
			}

			$b_patient_admisions = $pms->getTreatedDaysRealMultiple($clientIpidsNonStbyArr);
			$ipids_readmision_outisde[] = '9999999';

			foreach($b_patient_admisions as $k_admision => $v_admision)
			{
				if(!Pms_CommonData::isintersected(
						strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime($period['start'][0]), strtotime($period['end'][0])))
				{
					$ipids_readmision_outisde[] = $k_admision;
				}
			}

			$AdmReadmPatients = array_merge($admisionPatients, $clientIpidsNonStbyArr);
			$AdmReadmPatients = array_merge($AdmReadmPatients, $reAdmisionPatients);
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $privPatient));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $LentryPatients));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $ipids_readmision_outisde));
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));

			if($_REQUEST['dbgx'])
			{
				print_r($b_patient_admisions);
				print_r($ipids_readmision_outisde);
				print_r($AdmReadmPatients);
				print_r($period['start'][0] . ' - ' . $period['end'][0]);
				exit;
			}

			if(count($AdmReadmPatients) == 0)
			{
				$AdmReadmPatients[] = '999999';
			}

			if(count($AdmReadmPatients) == 1 && in_array('999999', $AdmReadmPatients))
			{
				$this->view->noprivatepatientadmission = "0";
				$viewdata['noprivatepatientadmission'] = "0";
			}
			else
			{
				$this->view->noprivatepatientadmission = count($AdmReadmPatients); // Neu-Aufnahme Kassenpatient
				$viewdata['noprivatepatientadmission'] = count($AdmReadmPatients);
			}

			if($_REQUEST['dbg'] == 1)
			{
				print_r("ALL active ipids in period\n");
				print_r($active_qipids);
				print_r("Pacienti admisi din PM\n");
				print_r($admisionPatients);
				print_r("\nPacienti admisi din PRA\n");
				print_r($reAdmisionPatients);
				print_r("\nPacientii admisi si readmisi in perioada selectata (unique and merge) am scos valoarea 99999999 \n");
				print_r($AdmReadmPatients);
				print_r("\nAll Private patients of client\n");
				print_r($privPatient);
				print_r("\nAll l92011 patients of client\n");
				print_r($LentryPatients);
				print_r("\nAll STANDBY patients of client\n");
				print_r($st_del_patients);
				print_r("\nAll non privat patients of client\n");
				print_r($npClientsIpidsArr);
				print_r("\nAll non privat patients of client, active in period\n");
				print_r($npClientsIpidsActive);
				print_r("\nPalliativ-Falle Gesamt\n");
				print_r($clientpatarr);
//			exit;
			}

			//query get all discharge method DEAD of client // PRIMUL QUERY
			$dm = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->Where('isdelete = 0')
				->andWhere('clientid = ' . $logininfo->clientid)
				->andWhere('abbr IN ("TOD", "TODNA")');
			$dischargemethods = $dm->fetchArray();

			if(count($dischargemethods) > 0)
			{
				foreach($dischargemethods as $dmkey => $dmvalue)
				{
					$dischargeids[] = $dmvalue['id'];
				}
			}

			if(count($dischargeids) == 1)
			{
				$dischargemethodids = $dischargeids[0];
			}
			else if(count($dischargeids) > 0 && count($dischargeids) != 1)
			{
				$dischargemethodids = implode(",", $dischargeids);
			}

			$quarter_start_m = $quarter[$quarterFinal][0];
			$quarter_end_m = end($quarter[$quarterFinal]);

			$quarter_start_first_day = strtotime("{$y[0]}-{$quarter_start_m}-01");
			$quarter_end_first_day = strtotime("{$y[0]}-{$quarter_end_m}-01");
			$quarter_end_last_day = strtotime('-1 second', strtotime('+1 month', $quarter_end_first_day));

			$quarter_start_first_dayy = date("Y-m-d H:i:s", $quarter_start_first_day);
			$quarter_end_last_dayy = date("Y-m-d H:i:s", $quarter_end_last_day);

			//query get all DEAD patients with discharge day < = quarter_start_first_day
			$discharged_pat_inquarter = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->where('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date <= "' . $quarter_start_first_dayy . '"');
			$quarter_dead_pat = $discharged_pat_inquarter->fetchArray();

			$dq_ipids[] = '999999';
			foreach($quarter_dead_pat as $dq_key => $dq_val)
			{
				$dq_ipids[] = $dq_val['ipid'];
			}

			$vvhistory = new VollversorgungHistory();
			$vvStartDates = $vvhistory->getVollversorgungHistory($clientpatarr, "1", $dq_ipids);
			$vvEndDates = $vvhistory->getVollversorgungHistory($clientpatarr, "2", $dq_ipids);

			foreach($vvStartDates as $ipid => $startDates)
			{
				foreach($startDates as $keys => $start)
				{
					$vvPeriods[$ipid]['start'][] = $start['date'];
					$vvStart = $start['date'];

					if(empty($vvEndDates[$ipid][$keys]['date']))
					{
						$vvPeriods[$ipid]['end'][] = date("Y-m-d H:i:s");
						$vvEnd = date("Y-m-d H:i:s");
					}
					else
					{
						$vvPeriods[$ipid]['end'][] = $vvEndDates[$ipid][$keys]['date'];
						$vvEnd = $vvEndDates[$ipid][$keys]['date'];
					}

					if(Pms_CommonData::isintersected(strtotime($period['start'][0]), strtotime($period['end'][0]), strtotime($vvStart), strtotime($vvEnd)))
					{
						$finalArray[] = $ipid;
					}
				}
			}
			$finalArray = array_diff($finalArray, $LentryPatients);
			$allVvArray = array_values(array_unique($finalArray));

			$this->view->versorgungstatus = count($allVvArray); // Vollversorgung ohne Pallicare-Versorgung
			$viewdata['versorgungstatus'] = count($allVvArray);

			if($_REQUEST['dbg'] == 1)
			{
				print_r("\nVollversorgung ohne Pallicare-Versorgung\n");
				print_r($allVvArray);
			}

			$active_cond = $this->getTimePeriod($q, $y);
			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $pms->getDaysInBetween($period['start'][0], $period['end'][0]);

			//Get client locations START
			$locationTypesArray = Pms_CommonData::getDischargeLocationTypes();

			//query 	Wohnung=Zu house location ids => type=1
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->whereIn('type',array('1','8'))
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$loc = $dl->fetchArray();

			if(count($loc) > 0)
			{
				$comma = ",";
				$idsHouse = "'999999999'";
				foreach($loc as $location)
				{
					$idsHouse .= $comma . "'" . $location['id'] . "'";
					$comma = ",";
				}
				$dlocation['wohnung'] = $idsHouse;
			}
			else
			{
				$dlocation['wohnung'] = "'999999999'";
			}

			//query Altenheim/Pflegeheim location ids
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type = 4')
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$loc = $dl->fetchArray();

			if(count($loc) > 0)
			{
				$comma = ",";
				$idsAltenheim = "'999999999'";
				foreach($loc as $location)
				{
					$idsAltenheim .= $comma . "'" . $location['id'] . "'";
					$comma = ",";
				}
				$dlocation['altenheim'] = $idsAltenheim;
			}
			else
			{
				$dlocation['altenheim'] = "'999999999'";
			}

			//query Hospiz location ids
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type = 3')
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$loc = $dl->fetchArray();
			if(count($loc) > 0)
			{
				$comma = ",";
				$idsHospiz = "'999999999'";

				foreach($loc as $location)
				{
					$idsHospiz .= $comma . "'" . $location['id'] . "'";
					$comma = ",";
				}
				$dlocation['hospiz'] = $idsHospiz;
			}
			else
			{
				$dlocation['hospiz'] = "'999999999'";
			}

			//query palliativstation location ids
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type = 5')
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$loc = $dl->fetchArray();
			if(count($loc) > 0)
			{
				$comma = ",";
				$idsPalliativstation = "'999999999'";

				foreach($loc as $location)
				{
					$idsPalliativstation .= $comma . "'" . $location['id'] . "'";
					$comma = ",";
				}
				$dlocation['palliativstation'] = $idsPalliativstation;
			}
			else
			{
				$dlocation['palliativstation'] = "'999999999'";
			}

			//query	Krankenhaus location ids
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type = 2')
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$loc = $dl->fetchArray();
			if(count($loc) > 0)
			{
				$comma = ",";
				$idsKrankenhaus = "'999999999'";
				foreach($loc as $location)
				{
					$idsKrankenhaus .= $comma . "'" . $location['id'] . "'";
					$comma = ",";
				}
				$dlocation['krankenhaus'] = $idsKrankenhaus;
			}
			else
			{
				$dlocation['krankenhaus'] = "'999999999'";
			}
			//	Get client locations END
			//query get all patients dead in quarter
			$discharged = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN (' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"');
			$dischargedpatarr = $discharged->fetchArray();

			//Betreuungszeitraum in Tagen (Median) <--- the COMPLETE DoT of all DIED patients in that quartal. MEDIAN.
			$deadipids = array();
			foreach($dischargedpatarr as $d_key => $deadpat)
			{
				if(is_array($deadpat))
				{
					$deadipids[] = $deadpat['ipid'];
				}
				else
				{
					$deadipids[] = $deadpat;
				}
			}

			//START Radu Added new dead (death button) method patients to median

			$pt = new PatientDeath();
			$deadPatients = array();
			$deadPatients = $pt->getDeadPatientsDot($clientipidsArr, $quarter_start_first_dayy, $quarter_end_last_dayy);

			if(count($deadPatients) == 1 && in_array('999999999', $deadPatients))
			{
				$deadPatients = array();
			}

			$deadipids = array_merge($deadipids, $deadPatients);

			$deadipids = array_values(array_diff($deadipids, $privPatient));
			$deadipids = array_values(array_diff($deadipids, $LentryPatients));
			$deadipids = array_unique($deadipids);

			if(count($deadipids) == 1 && in_array('999999', $deadipids))
			{
				$this->view->alldeadpatients = "0";
				$viewdata['alldeadpatients'] = "0";
			}
			else
			{
				$this->view->alldeadpatients = count($deadipids); //  Sterbeort Verstorbene Gesamt
				$viewdata['alldeadpatients'] = count($deadipids);
			}
			//END Radu Added new dead (death button) method patients to median

			if($_REQUEST['dbg'] == 1)
			{
				print_r("\n Death by button\n");
				print_r($deadPatients);

				print_r("\nPacienti dead in quarter\n");
				print_r($deadipids);

				exit;
			}

// 		$treatmentdaysdatadead = $pms->getTreatedDaysRealMultiple($deadipids, false);
// 		foreach($treatmentdaysdatadead as $patientTreatmentIpid => $patientTreatmentData)
// 		{
// 			$median_arr[] = $patientTreatmentData['realActiveDays'];
// 		}
			#############################################
			$period_start_sec = "2009-01-01";
			$period_end_sec = date("Y-m-d");
			$conditions_sec['periods'] = array("0" => array('start' => $period_start_sec, 'end' => $period_end_sec));
			$conditions_sec['client'] = $clientid;
			$conditions_sec['ipids'] = $mdeadipids;

			$dead_patients_details = Pms_CommonData::patients_days($conditions_sec);
			foreach($dead_patients_details as $patient_ipid => $patient_data)
			{
				$median_arr[] = $patient_data['treatment_days_no'];
			}
			#############################################
			$median = Pms_CommonData::calculate_median($median_arr);

			if($_REQUEST['dbg'] == 2)
			{
				print_r($privPatient);
				print_r($deadPatients);
				print_r($deadipids);
				print_r($median_arr);
				print_r($dischargemethodids);
				exit;
			}

			$this->view->averagetreatmentdays = number_format($median, 2); // Betreuungszeitraum in Tagen (Median)
			$viewdata['averagetreatmentdays'] = number_format($median, 2);

			//query get all dead patients in quarter in zu house location
			$discharged_h = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"')
				->andWhere('discharge_location IN (' . $dlocation['wohnung'] . ')');
			$wohnungdeadpat = $discharged_h->fetchArray();

			$this->view->wohnungdeadpatients = count($wohnungdeadpat);
			$viewdata['wohnungdeadpatients'] = count($wohnungdeadpat);

			//query	all dead patients in quarter in Altenheim/Pflegeheim location
			$discharged_a = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"')
				->andWhere('discharge_location IN (' . $dlocation['altenheim'] . ')');
			$altenheimdeadpat = $discharged_a->fetchArray();

			$this->view->altenheimdeadpatients = count($altenheimdeadpat);
			$viewdata['altenheimdeadpatients'] = count($altenheimdeadpat);

			//query	all dead patients in quarter in Hospiz location
			$discharged_hospiz = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"')
				->andWhere('discharge_location IN (' . $dlocation['hospiz'] . ')');
			$hospizdeadpat = $discharged_hospiz->fetchArray();

			$this->view->hospizdeadpatients = count($hospizdeadpat);
			$viewdata['hospizdeadpatients'] = count($hospizdeadpat);

			//query	all dead patients in quarter in hospital location
			$discharged_k = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"')
				->andWhere('discharge_location IN (' . $dlocation['krankenhaus'] . ')');
			$krankenhausdeadpat = $discharged_k->fetchArray();

			$this->view->krankenhausdeadpatients = count($krankenhausdeadpat);
			$viewdata['krankenhausdeadpatients'] = count($krankenhausdeadpat);

			//query	all dead patients in quarter in hospital location
			$discharged_palliativ = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"')
				->andWhere('discharge_location IN (' . $dlocation['palliativstation'] . ')');
			$palliativdeadpat = $discharged_palliativ->fetchArray();

			$this->view->palliativdeadpatients = count($palliativdeadpat);
			$viewdata['palliativdeadpatients'] = count($palliativdeadpat);

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);

			$this->view->clientcity = $clientdata[0]['city'];
			$this->view->client_name = $clientdata[0]['client_name'];
			$viewdata['clientcity'] = $clientdata[0]['city'];

			$this->view->todaydate = date("d.m.Y");
			$viewdata['todaydate'] = date("d.m.Y");

			if(strlen($_POST['btnsave']) > 0)
			{
				$this->generatereportanalage4awl2Pdf(3, $viewdata, 'Anlage4a2wl', "anlage4a2wl.html");
			}
		}

		public function anlagethreeaAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$patientmaster = new PatientMaster();
			$this->view->tablepatientinfo = $patientmaster->getMasterData($decid, 1);

			$diagns = new PatientDiagnosis();
			/* ------------------------Patient get main diagnosis----------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$maindiagnosis = $diagnosis;
			}

			$this->view->diagnosis = $maindiagnosis;

			/* ------------------------Patient get side diagnosis----------------- */
			$dg = new DiagnosisType();
			$abb2 = "'ND'";
			$ddarr2 = $dg->getDiagnosisTypes($clientid, $abb2);

			if(!$ddarr2[0]['id'])
			{
				$ddarr2[0]['id'] = 0;
			}

			$stam_diagno2 = array();
			$stam_diagno2 = $diagns->getFinalData($ipid, $ddarr2[0]['id']);

			foreach($stam_diagno2 as $key1 => $val1)
			{
				if(strlen($val1['diagnosis']) > 0)
				{
					$this->view->diagnosis2.= $val1['diagnosis'] . " (" . $val1['icdnumber'] . ")\n";
				}
			}

			/* ------------------------Patient get META diagnosis----------------- */
			$pdm = new PatientDiagnosisMeta();
			$metaarr = $pdm->getPatientDiagnosismeta($ipid);

			$comma = ",";
			$metaval = "'0'";

			if(is_array($metaarr))
			{
				foreach($metaarr as $key => $val)
				{
					$metaval .= $comma . "'" . $val['metaid'] . "'";
					$comma = ",";
				}
			}

			$drugs = Doctrine_Query::create()
				->select('*')
				->from('DiagnosisMeta')
				->where("id in (" . $metaval . ")");
			$dr = $drugs->execute();

			if($dr)
			{
				$diagnoarray = $dr->toArray();

				for($i = 0; $i < count($diagnoarray); $i++)
				{

					$metadiga .= $diagnoarray[$i]['meta_title'] . "\n";
				}
				$this->view->metadiga = $metadiga;
			}

			$parr = $patientmaster->getMasterData($decid, 0);

			/* Patient - Details */
			$data['kv_header']['patientname'] = $parr['last_name'] . ", " . $parr['first_name'] . "\r\n" . $parr['street1'] . "\r\n" . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['patientaddress'] = $parr['street1'] . "\r\n" . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['pataddress'] = $parr['street1'] . ", " . $parr['zip'] . " " . $parr['city'];
			$data['kv_header']['patname'] = $parr['last_name'] . ", " . $parr['first_name'];
			$data['kv_header']['patbirth'] = $parr['birthd'];
			$data['kv_header']['epid'] = $epid;

			/* Patient - Location */
			$pt = new PatientLocation();
			$locationactive = $pt->getActiveLocationPatInfo($ipid);
			// get the type of the activ location // needed for hospiz status
			$this->view->active_location_type = $locationactive[0]['location_type'];

			/* Patient - Health insurance */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$data['kv_header']['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$data['kv_header']['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$data['kv_header']['insurance_status'] = $healthinsu_array[0]['insurance_status'];
			$data['kv_header']['kvnumber'] = $healthinsu_array[0]['kvk_no'];

			/* User - Info */
			$userst = Doctrine::getTable('User')->find($logininfo->userid);
			if($userst)
			{
				$uarray = $userst->toArray();
				$data['kv_header']['arzt_nr'] = $uarray['LANR'];
				$data['kv_header']['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
			}


			/* Client - Info */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$data['content']['client_team_name'] = $clientdata[0]['team_name'];
			$data['content']['client_city'] = $clientdata[0]['city'];
			$data['content']['betriebsstattennummer'] = $clientdata[0]['betriebsstattennummer'];
			$this->view->data = $data;

			/* ------------------------Generate pdf----------------- */
			if($this->getRequest()->isPost())
			{
				$_POST['kv_header']['patientname'] = $_POST['kv_header']['patientname'];
				$_POST['content'] = $data['content'];
				$this->generatePdfNew(3, $_POST, 'Anlage_3a', "anlagethreeapdf.html");
			}
		}

		public function anlagefourAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patient_name = $parr['last_name'] . ", " . $parr['first_name'] . " - " . $parr['birthd'];

			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			if($pat_moreinfo[0]['dk'] > 0)
			{
				$this->view->dk = 'checked="checked"';
			}

			if($pat_moreinfo[0]['peg'] > 0)
			{
				$this->view->peg = 'checked="checked"';
			}

			if($pat_moreinfo[0]['port'] > 0)
			{
				$this->view->port = 'checked="checked"';
			}

			if($pat_moreinfo[0]['pumps'] > 0)
			{
				$this->view->pumps = 'checked="checked"';
			}

			if($pat_moreinfo[0]['zvk'] > 0)
			{
				$this->view->zvk = 'checked="checked"';
			}

			if($this->getRequest()->isPost())
			{
				$this->generateformPdf(3, $_POST, 'Anlage_4(Teil 1)', "anlagefourpdf.html");
			}


			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);
			$this->view->alone = $pat_lives[0]['alone'];
			$this->view->house_of_relatives = $pat_lives[0]['house_of_relatives'];

			$ps = new PatientSupply();
			$pat_supply = $ps->getpatientSupplyData($ipid);
			$this->view->nursing = $pat_supply[0]['nursing'];

			$this->view->nooptionselected = 0;

			if($pat_lives[0]['alone'] == 0 && $pat_lives[0]['house_of_relatives'] == 0 && $pat_supply[0]['nursing'] == 0)
			{
				$this->view->nooptionselected = 1;
			}

			$pm = new PatientMaster();
			$pmarr = $pm->getMasterData($decid, 0);

			if($pmarr['living_will'] == 1)
			{
				$this->view->living_will = "checked='checked'";
			}
		}

		public function formthreeAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$this->view->frmthreeclass = "active";

			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patient_name = $parr['last_name'] . ", " . $parr['first_name'];
			if($this->getRequest()->isPost())
			{
				$this->generateformPdf(3, $_POST, 'formthree', "formthreepdf.html");
			}
		}

		public function stammblattAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->stmblclass = "active";

			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'];
			$this->view->city = $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];

			$geschlecht = $parr['sex'];
			$this->view->geschlecht = $geschlecht;

			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);
			$this->view->familienstands = $st->getFamilienstandfun();
			$this->view->familienstand_notfrom_Stammblatt = $weit[0]['familienstand'];

			/*
			if(!empty($weit[0]['familienstand']))
			{
				if($weit[0]['familienstand'] == 1)
				{
					$this->view->ledig = "checked='checked'";
				}
				if($weit[0]['familienstand'] == 2)
				{
					$this->view->verwitwet = "checked='checked'";
				}
				if($weit[0]['familienstand'] == 3)
				{
					$this->view->geschieden = "checked='checked'";
				}
				if($weit[0]['familienstand'] == 4)
				{
					$this->view->ehe = "checked='checked'";
				}
			}
			*/

			if(!empty($weit[0]['vigilanz']))
			{
				if($weit[0]['vigilanz'] == 1)
				{
					$this->view->wach = "checked='checked'";
				}
				if($weit[0]['vigilanz'] == 2)
				{
					$this->view->somnolent = "checked='checked'";
				}
				if($weit[0]['vigilanz'] == 3)
				{
					$this->view->komatos = "checked='checked'";
				}
			}

			$ausscheidung = explode(",", $weit[0]['ausscheidung']);
			if(in_array(1, $ausscheidung))
			{
				$this->view->auss_selbstandig = "checked='checked'";
			}
			if(in_array(2, $ausscheidung))
			{
				$this->view->auss_teilweisehilfe = "checked='checked'";
			}
			if(in_array(3, $ausscheidung))
			{
				$this->view->auss_vollsthilfe = "checked='checked'";
			}

			$familienstand = $weit[0]['familienstand'];
			$stastszugehorigkeit = $weit[0]['stastszugehorigkeit'];
			$stastszugehorigkeit_txt = $weit[0]['anderefree'];

			$ernahrung = explode(",", $weit[0]['ernahrung']);
			if(in_array(1, $ernahrung))
			{
				$this->view->selbstandig = 'checked="checked"';
			}
			if(in_array(2, $ernahrung))
			{
				$this->view->teilweisehilfe = 'checked="checked"';
			}
			if(in_array(3, $ernahrung))
			{
				$this->view->vollsthilfe = 'checked="checked"';
			}

			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			if($pat_moreinfo[0]['peg'] == 1 || $pat_moreinfo[0]['magensonde'] == 1)
			{
				$this->view->sonde = 'checked="checked"';
			}
			if($pat_moreinfo[0]['zvk'] == 1 || $pat_moreinfo[0]['port'] == 1)
			{
				$this->view->zvk_port = 'checked="checked"';
			}

			$this->view->dbfamilienstand = $familienstand;
			$this->view->dbstaatszugehorigkeit = $stastszugehorigkeit;
			$this->view->staatszugehorigkeit_text = $stastszugehorigkeit_txt;

			$wunsch = array("1" => "Zu Hause bleiben können", "2" => "kein Krankenhaus", "3" => "Autonomie", "4" => "Leidenslinderung", "5" => "Symptomlinderung",
				"6" => "mehr Kraft", "7" => "wieder aufstehen können", "8" => "noch eine Reise machen",
				"9" => "In Ruhe gelassen werden", "10" => "Keine Angabe", "11" => "Frage nach aktiver Sterbehilfe",
				"12" => "Lebensbeendigung", "13" => "Expliziter Wunsch");

			if(!empty($weit[0]['wunsch']))
			{
				$patwunsch = explode(",", $weit[0]['wunsch']);
				$patientenwunsch = "";
				foreach($patwunsch as $value)
				{
					$patientenwunsch .= $wunsch[$value] . ', ';
				}
				$this->view->patientenwunsch = $patientenwunsch;
			}

			$rel = new PatientReligions();
			$pat_rel = $rel->getReligionsData($ipid);
			$relcnt = $pat_rel[0]['religion'];
			if(!empty($pat_rel[0]['religion']))
			{
				if($pat_rel[0]['religion'] == 1)
				{
					$this->view->evange = "checked='checked'";
				}
				if($pat_rel[0]['religion'] == 2)
				{
					$this->view->katolic = "checked='checked'";
				}
				if($pat_rel[0]['religion'] == 3)
				{
					$this->view->ortodox = "checked='checked'";
				}
				if($pat_rel[0]['religion'] == 4)
				{
					$this->view->judisch = "checked='checked'";
				}
				if($pat_rel[0]['religion'] == 5)
				{
					$this->view->muslim = "checked='checked'";
				}
				if($pat_rel[0]['religion'] == 6)
				{
					$this->view->keine = "checked='checked'";
				}
				if($pat_rel[0]['religion'] == 7)
				{
					$this->view->sonstige = "checked='checked'";
				}
			}

			$this->view->religionsz = $religionszugehorigkeit;

			$pm = new PatientMobility();
			$pat_mob = $pm->getpatientMobilityData($ipid);

			$bed = $pat_mob[0]['bed'];
			$walker = $pat_mob[0]['walker'];
			$wheelchair = $pat_mob[0]['wheelchair'];
			$goable = $pat_mob[0]['goable'];
			$nachtstuhl = $pat_mob[0]['nachtstuhl'];
			$wechseldruckmatraze = $pat_mob[0]['wechseldruckmatraze'];

			$sav = new SapvVerordnung();
			$savarr = $sav->getFirstSapvVerordnungData($ipid);

			$verordnet = explode(",", $savarr[0]['verordnet']);
			$this->view->dbals = max($verordnet);
			if($savarr[0]['verordnungam'] != '0000-00-00 00:00:00')
			{
				$this->view->dbvom = date('d.m.Y', strtotime($savarr[0]['verordnungam']));
			}
			if($savarr[0]['verordnungbis'] != '0000-00-00 00:00:00')
			{
				$this->view->dbbis = date('d.m.Y', strtotime($savarr[0]['verordnungbis']));
			}

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$stam = new Stammblatt();
			$this->view->gender = $stam->genderVal();
			$this->view->familienstand = $stam->familienstandVal();
			$this->view->staatszugehorigkeit = $stam->staatszugehorigkeitVal();
			$this->view->diagnosegruppe = $stam->diagnosegruppeVal();
			$this->view->religionszugehorigkeit = $stam->religionszugehorigkeitVal();
			$this->view->primartumor = $stam->primartumorVal();
			$this->view->metastasen = $stam->metastasenVal();
			$this->view->sapvverordnungdurch = $stam->sapvverordnungdurchVal();
			$this->view->als = $stam->alsVal();
			$this->view->commonarray = $stam->schmerzenVal();
			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$brenmber = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where("epid='" . $epid . "'");
			$bexec = $brenmber->execute();
			$barray = $bexec->toArray();

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
			}

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->user_title = $loguserarray['user_title'];
				$this->view->last_name = $loguserarray['last_name'];
				$this->view->first_name = $loguserarray['first_name'];
			}

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);

			$this->view->alone = $pat_lives[0]['alone'];
			$this->view->house_of_relatives = $pat_lives[0]['house_of_relatives'];
			$this->view->home = $pat_lives[0]['home'];

			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";

			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);

			if(count($metaids) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = ",";
				$metadiagnosis = "";
				foreach($metaids as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);
					foreach($metaarray as $keytit => $metatitle)
					{
						$metadiagnosis .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0 || strlen($metadiagnosis) > 0)
			{
				$this->view->relevante_Input = $diagnosis . $metadiagnosis;
			}

			$abb = "'ND','AD','DD'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($clientid, $abb);

			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}
			$comma = "";

			foreach($ddarr as $key1 => $val1)
			{
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);

				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						if(strlen($val['icdnumber']) > 0)
						{
							$other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
						}
						else
						{
							$other_diagnosis .= $comma . $val['diagnosis'];
						}
						$dia++;
						$comma = ",";
					}
				}
			}
			$this->view->relevanteNebendia_Input = $other_diagnosis;

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->bdate = $patientinfo['birthd'];

			$pdm = new PatientDiagnosisMeta();
			$metaarr = $pdm->getPatientDiagnosismeta($ipid);

			$comma = ",";
			$ipidval = "'0'";

			if(is_array($metaarr))
			{
				foreach($metaarr as $key => $val)
				{
					$ipidval .= $comma . "'" . $val['metaid'] . "'";
					$comma = ",";
				}
			}

			$drugs = Doctrine_Query::create()
				->select('*')
				->from('DiagnosisMeta')
				->where("id in (" . $ipidval . ")");
			$dr = $drugs->execute();

			if($dr)
			{
				$diagnoarray = $dr->toArray();

				for($i = 0; $i < count($diagnoarray); $i++)
				{

					if($diagnoarray[$i]['meta_title'] == trim("Cerebrale Metastasierung"))
					{
						$this->view->cerel = 1;
						$this->view->Gehirn = 'checked="checked"';
					}
					if($diagnoarray[$i]['meta_title'] == trim("Pulmonale Metastasierung"))
					{
						$this->view->pulm = 1;
						$this->view->Lunge = 'checked="checked"';
					}
					if($diagnoarray[$i]['meta_title'] == trim("Hepatische Metastasierung") || $diagnoarray[$i]['meta_title'] == trim("Lebermetastasierung"))
					{
						$this->view->hepa = 1;
						$this->view->Leber = 'checked="checked"';
					}

					if($diagnoarray[$i]['meta_title'] == trim("lymphogene Metastasierung"))
					{
						$this->view->pulm = 1;
						$this->view->Lymphe = 'checked="checked"';
					}

					if($diagnoarray[$i]['meta_title'] == trim(utf8_encode("Ossäre Metastasierung")))
					{
						$this->view->ossa = 1;
					}
				}
			}

			if(strlen($_POST['btnsave']) > 0)
			{
				$stamb = new Application_Form_Stammblatt();
				$stamb->insertStamblat($_POST);
				
				//ISPC-1891
				//update the patient >> Stammdaten >> Pflegegrade
				$post_familienstand = array(
						"modname" => "Familienstand",
						"fldname" => "familienstand",
						"chkval" => $_POST['familienstand'],
						"patid" => $_GET['id'],
						"formid" => "grow16",
						"ipid" => $ipid,
				);
				$af_s = new Application_Form_Stammdatenerweitert();
				$af_s->InsertStamdatenData($post_familienstand);
				$this->view->familienstand_notfrom_Stammblatt = $_POST['familienstand'];
					
				
			}

			if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->generateformPdf(3, $_POST, 'Stammblatt', "stammblatt_pdf.html");
			}

			/* ==================================================================================== */
			if(strlen($ipid) > 0)
			{
				$stamq = Doctrine_Core::getTable('Stammblatt')->findBy('ipid', $ipid);
				$stamqarr = $stamq->toArray();

				//ispc 1872 - this ignores the form and uses from stammdaten
				$pms = new PatientMaintainanceStage();
				$pat_pmsinfo = $pms->getLastpatientMaintainanceStage($ipid);
				if (isset($pat_pmsinfo[0]['stage'])) {
					$this->view->pflegeversicherung  = $pat_pmsinfo[0]['stage'];
				} else {
					$this->view->pflegeversicherung = null;
				}
				$this->view->erstantrag = $pat_pmsinfo[0]['erstantrag'];
				$this->view->horherstufung = $pat_pmsinfo[0]['horherstufung'];
				
				
				if(count($stamqarr) > 0)
				{
					$this->view->geschlecht = $stamqarr[0]['geschlecht'];
					if(!empty($stamqarr[0]['familienstand']))
					{
						$this->view->ledig = "";
						$this->view->verwitwet = "";
						$this->view->geschieden = "";
						$this->view->ehe = "";
						$this->view->dbfamilienstand = $stamqarr[0]['familienstand'];
					}

					$this->view->dbstaatszugehorigkeit = $stamqarr[0]['staatszugehorigkeit'];

					if(!empty($stamqarr[0]['staatszugehorigkeit_text']))
					{
						$this->view->staatszugehorigkeit_text = $stamqarr[0]['staatszugehorigkeit_text'];
					}
					else
					{
						$this->view->staatszugehorigkeit_text = $stastszugehorigkeit_txt;
					}

					if(!empty($stamqarr[0]['religionszugehorigkeit']))
					{
						$this->view->evange = "";
						$this->view->katolic = "";
						$this->view->ortodox = "";
						$this->view->judisch = "";
						$this->view->muslim = "";
						$this->view->keine = "";
						$this->view->sonstige = "";
						$this->view->religionsz = $stamqarr[0]['religionszugehorigkeit'];
					}



					if(strlen($stamqarr[0]['relevante_diagnose']) > 0)
					{
						$this->view->relevante_Input = $stamqarr[0]['relevante_diagnose'];
					}

					if(strlen($stamqarr[0]['relevante_nebendiagnosen']) > 0)
					{
						$this->view->relevanteNebendia_Input = $stamqarr[0]['relevante_nebendiagnosen'];
					}

					$this->view->dbdiagnosegruppe = $stamqarr[0]['diagnosegruppe'];
					$this->view->dbprimartumor = $stamqarr[0]['primartumor'];
					$this->view->primartumor_text = $stamqarr[0]['primartumor_text'];

					if(!empty($stamqarr[0]['metastasen']))
					{
						$this->view->Lunge = "";
						$this->view->Leber = "";
						$this->view->Gehirn = "";
						$this->view->Lymphe = "";
						$this->view->dbmetastasen = explode(",", $stamqarr[0]['metastasen']);
					}

					$this->view->metastasen_text = $stamqarr[0]['metastasen_text'];
					$this->view->nicht_tumor_erkrankungen = $stamqarr[0]['nicht_tumor_erkrankungen'];

					$split_symtome = explode(",", $stamqarr[0]['sapv_relevante_symptome']);

					$this->view->sapvrelevantesymptomejs = $split_symtome;
					$this->view->dbsapvverordnungdurch = $stamqarr[0]['sapv_verordnung_durch'];
					$this->view->dbals = $stamqarr[0]['als'];
					$this->view->dbsapvverordnungdurch = $stamqarr[0]['sapv_verordnung_durch'];
					$this->view->dbvom = $stamqarr[0]['vom'];
					$this->view->dbbis = $stamqarr[0]['bis'];
					$this->view->schmerzenjs = $stamqarr[0]['schmerzen'];
					$this->view->neuropat_schmerzenjs = $stamqarr[0]['neuropat_schmerzen'];
					$this->view->viszerale_schmerzenjs = $stamqarr[0]['viszerale_schmerzen'];
					$this->view->atemnotjs = $stamqarr[0]['atemnot'];
					$this->view->reizhustenjs = $stamqarr[0]['reizhusten'];
					$this->view->verschleimungjs = $stamqarr[0]['verschleimung'];
					$this->view->aszitesjs = $stamqarr[0]['aszites'];
					$this->view->ubelkeit_erbrechenjs = $stamqarr[0]['ubelkeit_erbrechen'];
					$this->view->bluterbrechenjs = $stamqarr[0]['bluterbrechen'];
					$this->view->durchfalljs = $stamqarr[0]['durchfall'];
					$this->view->obstipationjs = $stamqarr[0]['obstipation'];
					$this->view->soorjs = $stamqarr[0]['soor'];
					$this->view->schluckstorungenjs = $stamqarr[0]['schluckstorungen'];
					$this->view->angstjs = $stamqarr[0]['angst'];
					$this->view->depressionjs = $stamqarr[0]['depression'];
					$this->view->unruhejs = $stamqarr[0]['unruhe'];
					$this->view->desorientierungjs = $stamqarr[0]['desorientierung'];
					$this->view->krampfanfallejs = $stamqarr[0]['krampfanfalle'];
					$this->view->lahmungenjs = $stamqarr[0]['lahmungen'];
					$this->view->gangunsicherheitjs = $stamqarr[0]['gangunsicherheit'];
					$this->view->schwindeljs = $stamqarr[0]['schwindel'];
					$this->view->sensibilitatsstoggjs = $stamqarr[0]['sensibilitatsstogg'];
					$this->view->decubitusjs = $stamqarr[0]['decubitus'];
					$this->view->exulcerationenjs = $stamqarr[0]['exulcerationen'];
					$this->view->lymph_odemejs = $stamqarr[0]['lymph_odeme'];
					$this->view->harnverhaltjs = $stamqarr[0]['harnverhalt'];
					$this->view->lebensqualitatjs = $stamqarr[0]['lebensqualitat'];
					$this->view->sprachstorungjs = $stamqarr[0]['sprachstorung'];
					$this->view->organisationsprobjs = $stamqarr[0]['organisationsprob'];
					$this->view->finanz_problemejs = $stamqarr[0]['finanz_probleme'];
					$this->view->fatiquejs = $stamqarr[0]['fatique'];
					$this->view->juckreizjs = $stamqarr[0]['juckreiz'];
					$this->view->kachexiejs = $stamqarr[0]['kachexie'];
					$this->view->wohnsituationjs = $stamqarr[0]['wohnsituation'];
					$this->view->pflegeversicherungjs = $stamqarr[0]['pflegeversicherung'];
					$this->view->dbaktuelle_pflegerische_situation = $stamqarr[0]['aktuelle_pflegerische_situation'];
					$this->view->hauptprobleme = $stamqarr[0]['hauptprobleme'];
					$this->view->patientenwunsch = $stamqarr[0]['patientenwunsch'];
					$this->view->wunschort_desjs = $stamqarr[0]['wunschort_des_sterbens'];
					$this->view->wunschort_desjs = $stamqarr[0]['wunschort_des_sterbens'];
					$this->view->sapv_zieljs = $stamqarr[0]['sapv_ziel'];
					$this->view->sapv_ziel_text = $stamqarr[0]['sapv_ziel_text'];

					if(!empty($stamqarr[0]['vigilanz']))
					{
						$this->view->wach = "";
						$this->view->somnolent = "";
						$this->view->komatos = "";
						$this->view->vigilanz = $stamqarr[0]['vigilanz'];
					}

					if(!empty($stamqarr[0]['ernahrung_one']))
					{

						$this->view->selbstandig = '';
						$this->view->teilweisehilfe = '';
						$this->view->vollsthilfe = '';
						$this->view->ernahrung_onejs = $stamqarr[0]['ernahrung_one'];
					}

					$this->view->orientierungjs = $stamqarr[0]['orientierung'];

					if(!empty($stamqarr[0]['ernahrung_two']))
					{
						$this->view->sonde = '';
						$this->view->zvk_port = '';
						$this->view->ernahrung_twojs = $stamqarr[0]['ernahrung_two'];
					}

					if(!empty($stamqarr[0]['ausscheidung']))
					{
						$this->view->auss_selbstandig = '';
						$this->view->auss_teilweisehilfe = '';
						$this->view->auss_vollsthilfe = '';
						$this->view->ausscheidungjs = $stamqarr[0]['ausscheidung'];
					}
					$this->view->mobilitatjs = $stamqarr[0]['mobilitat'];
					$this->view->kunstliche_ausgangejs = $stamqarr[0]['kunstliche_ausgange'];

					$this->view->apparative_palliativmedizinischejs = $stamqarr[0]['apparative_palliativmedizinische'];
					$this->view->apparative_palliativmedizinische_text = $stamqarr[0]['apparative_palliativmedizinische_text'];

					$this->view->patientenverfugungjs = $stamqarr[0]['patientenverfugung'];

					$this->view->patientenverfugung_vom = $stamqarr[0]['patientenverfugung_vom'];

					$this->view->gesetzliche_vertretungjs = $stamqarr[0]['gesetzliche_vertretung'];
					$this->view->gesetzliche_vertretung_text = $stamqarr[0]['gesetzliche_vertretung_text'];
				}

				if($parr['living_will_from'] != "0000-00-00" && $parr['living_will_from'] != "0000-00-00 00:00" && !empty($parr['living_will_from']) && $parr['living_will_from'] != 0)
				{
					if(count($stamqarr) == '0')
					{
						$this->view->patientenverfugung_vom = date("d.m.Y", strtotime($parr['living_will_from']));
					}
					else if(strlen($stamqarr[0]['patientenverfugung_vom']) == 0)
					{
						$this->view->patientenverfugung_vom = date("d.m.Y", strtotime($parr['living_will_from']));
					}
				}
			}
		}

		public function homecareAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->hmcareclass = "active";

			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patient_name = $parr['last_name'] . " " . $parr['first_name'];
			if($this->getRequest()->isPost())
			{
				$this->generateformPdf(3, $_POST, 'homecare', "homecarepdf.html");
			}
		}

		public function hopeformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$this->view->hopefrmclass = "active";

			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];
			$this->view->admissiondate = $parr['admission_date'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$abb = "'HD'";
			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($logininfo->clientid, $abb);
			$hid = $darr[0]['id'];
			if($hid == "")
			{
				$hid = 0;
			}

			$pd = new PatientDiagnosis();
			$pdarr = $pd->getFinalData($ipid, $hid);

			if(count($pdarr) > 0)
			{
				if($pdarr[0]['create_date'] != '0000-00-00 00:00:00')
				{
					$this->view->maindiagnosisdate = date('d.m.Y', strtotime($pdarr[0]['create_date']));
				}
			}

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->bdate = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			/*			 * ****************************************************************** */
			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);
			$this->view->alone = $pat_lives[0]['alone'];
			$this->view->home = $pat_lives[0]['home'];
			$this->view->house_of_relatives = $pat_lives[0]['house_of_relatives'];
			$this->view->apartment = $pat_lives[0]['apartment'];

			$pm = new PatientMaster();
			$pmarr = $pm->getMasterData($decid, 0);
			$this->view->living_will = $pmarr['living_will'];

			$pms = new PatientMaintainanceStage();
			$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);

			if($pat_pmsinfo[0]['stage'] == 1)
			{
				$this->view->stage1 = 1;
			}

			if($pat_pmsinfo[0]['stage'] == 2)
			{
				$this->view->stage2 = 1;
			}

			if($pat_pmsinfo[0]['stage'] == 3)
			{
				$this->view->stage3 = 1;
			}
			$this->view->datum_der_erfassung = date('d.m.Y  H:i', time());

			$userdata = Pms_CommonData::getUserData($logininfo->userid);

			$groupid = $userdata[0]['groupid'];
			$grp = new Usergroup();
			$groupdata = $grp->getUserGroupData($groupid);

			if(count($groupdata) > 0)
			{
				$groupname = $groupdata[0]['groupname'];

				if(trim($groupname) == "Doctor" || trim($groupname) == "Doktor" || trim($groupname) == "Arzt" || trim($groupname) == "Ärztin" || trim($groupname) == "QPA")
				{
					$this->view->wer_hat = 1;
				}
			}

			$pd = new PatientDischarge();
			$pdarr = $pd->getPatientDischarge($ipid);
			$this->view->datum_entlassung = date('d.m.Y H:i', strtotime($pdarr[0]['discharge_date']));

			$dm = new DischargeMethod();
			$dmarr = $dm->getDischargeMethodById($pdarr[0]['discharge_method']);


			if($dmarr[0]['abbr'] == trim("TOD"))
			{
				$this->view->todmethod = 1;
			}

			if($dmarr[0]['abbr'] == trim("DIS"))
			{
				$this->view->dismethod = 1;
			}

			if($dmarr[0]['abbr'] == trim("CAN"))
			{
				$this->view->canmethod = 1;
			}

			$pdm = new PatientDiagnosisMeta();
			$metaarr = $pdm->getPatientDiagnosismeta($ipid);

			$comma = ",";
			$ipidval = "'0'";

			if(is_array($metaarr))
			{
				foreach($metaarr as $key => $val)
				{
					$ipidval .= $comma . "'" . $val['metaid'] . "'";
					$comma = ",";
				}
			}

			$drugs = Doctrine_Query::create()
				->select('*')
				->from('DiagnosisMeta')
				->where("id in (" . $ipidval . ")");
			$dr = $drugs->execute();

			if($dr)
			{
				$diagnoarray = $dr->toArray();

				for($i = 0; $i < count($diagnoarray); $i++)
				{

					if($diagnoarray[$i]['meta_title'] == trim("Cerebrale Metastasierung"))
					{
						$this->view->cerel = 1;
					}
					if($diagnoarray[$i]['meta_title'] == trim("Pulmonale Metastasierung"))
					{
						$this->view->pulm = 1;
					}
					if($diagnoarray[$i]['meta_title'] == trim("Hepatische Metastasierung"))
					{
						$this->view->hepa = 1;
					}
					if($diagnoarray[$i]['meta_title'] == trim("Ossäre Metastasierung"))
					{
						$this->view->ossa = 1;
					}
				}
			}

			if($this->getRequest()->isPost())
			{
				$this->generateformPdf(3, $_POST, 'hopeform', "hopeformpdf.html");
				$this->_redirect(APP_BASE . "patient/patientfileupload?id=" . $_GET['id']);
			}
		}

		public function formfourAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$this->view->frmfourclass = "active";

			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patient_name = $parr['last_name'] . " " . $parr['first_name'];
			if($this->getRequest()->isPost())
			{
				$this->generateformPdf(3, $_POST, 'formfour', "formfourpdf.html");
			}
		}

		//FinalDocumentation
		public function formfiveAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$frm = new FinalDocumentation();
			$form_details = $frm->getLastFinalDocumentation($ipid);

			if($form_details)
			{
				$new_instance = $form_details[0]['new_instance'];
				$form_id = $form_details[0]['id'];
			}
			else
			{
				$new_instance = '0';
				$form_id = '';
			}

			if($new_instance == '0')
			{
				$form_id = '';
			}

			$this->view->new_instance = $new_instance;
			$this->view->form_id = $form_id;

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$this->view->frmfiveclass = "active";

			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}
			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->bdate = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			$pd = new PatientDischarge();
			$dischargearr = $pd->getPatientDischarge($ipid);
			$dismethod = $dischargearr[0]['discharge_method'];

			$this->view->abschlussgrund = "";
			if(count($dismethod) > 0)
			{
				$ds = new DischargeMethod();
				$dischargearr = $ds->getDischargeMethodById($dismethod);
				$abbr = $dischargearr[0]['abbr'];

				if(trim($abbr) == "TOD" || trim($abbr) == "tod")
				{
					$this->view->abschlussgrund = "checked='checked'";
				}
			}

			if(strlen($ipid) > 0)
			{
				$stamq = Doctrine_Query::create()
					->select('*')
					->from('Formone')
					->where("ipid='" . $ipid . "' and valid_till='0000-00-00 00:00:00'");
				$stexec = $stamq->execute();
				$stamqarr = $stexec->toArray();

				$this->retainValues($stamqarr[0]);
				$this->view->pflegestufe = explode(",", $stamqarr[0]['pflegestufe']);
				$this->view->stabilisierung_des_gesundheitszustandes = explode(",", $stamqarr[0]['beendigung_der_sapv_wegen']);
				// DONE
				$this->view->abschlussgrund = explode(",", $stamqarr[0]['beendigung_der_sapv_wegen']);
				// DONE
				$this->view->quantitative_patient = $stamqarr[0]['am_patient'];
				$this->view->angehorige = $stamqarr[0]['fur_angehorige'];
				$this->view->systemische_tatigkeiten = $stamqarr[0]['systemische_tatigkeiten'];
				// DONE
				$betreuungsnetz = explode(",", $stamqarr[0]['betreuungsnetz']);

				if(in_array(1, $betreuungsnetz) || in_array(2, $betreuungsnetz))
				{
					$this->view->pcf = '1';
				}

				if(in_array(11, $betreuungsnetz) || in_array(12, $betreuungsnetz))
				{
					$this->view->palliativmediziner = '1';
				}

				if(in_array(21, $betreuungsnetz) || in_array(22, $betreuungsnetz))
				{
					$this->view->hausarzt = '1';
				}

				if(in_array(29, $betreuungsnetz) || in_array(30, $betreuungsnetz))
				{
					$this->view->facharzt = '1';
				}

				if(in_array(3, $betreuungsnetz) || in_array(4, $betreuungsnetz))
				{
					$this->view->amb_hospizdienst = "1";
				}

				if(in_array(13, $betreuungsnetz) || in_array(14, $betreuungsnetz))
				{
					$this->view->pflegedienst = '1';
				}

				if(in_array(23, $betreuungsnetz) || in_array(24, $betreuungsnetz))
				{
					$this->view->sozialstation = '1';
				}

				if(in_array(31, $betreuungsnetz) || in_array(32, $betreuungsnetz))
				{
					$this->view->sozialarbeit = '1';
				}

				if(in_array(5, $betreuungsnetz) || in_array(6, $betreuungsnetz))
				{
					$this->view->stationares_hospiz = '1';
				}

				if(in_array(15, $betreuungsnetz) || in_array(16, $betreuungsnetz))
				{
					$this->view->krankenhaus = '1';
				}

				if(in_array(25, $betreuungsnetz) || in_array(26, $betreuungsnetz))
				{
					$this->view->palliativstation = '1';
				}

				if(in_array(33, $betreuungsnetz) || in_array(34, $betreuungsnetz))
				{
					$this->view->stationare_pflege = '1';
				}

				if(in_array(7, $betreuungsnetz) || in_array(8, $betreuungsnetz))
				{
					$this->view->physiotherapie = '1';
				}

				if(in_array(17, $betreuungsnetz) || in_array(18, $betreuungsnetz))
				{
					$this->view->psychologe = '1';
				}

				if(in_array(27, $betreuungsnetz) || in_array(28, $betreuungsnetz))
				{
					$this->view->apotheke_sanitatshaus = '1';
				}

				if(in_array(35, $betreuungsnetz) || in_array(36, $betreuungsnetz))
				{
					$this->view->weitere_berufe = '1';
				}

				if(in_array(9, $betreuungsnetz) || in_array(10, $betreuungsnetz))
				{
					$this->view->angehorige_grundpflege = '1';
				}

				if(in_array(19, $betreuungsnetz) || in_array(20, $betreuungsnetz))
				{
					$this->view->angehorige_behandlungspflege = '1';
				}

				if(in_array(37, $betreuungsnetz) || in_array(38, $betreuungsnetz))
				{
					$this->view->seelsorge = '1';
				}
			}
			/* --------------------Todesdatum - Get DEATH DATE --------------------------------- */
			//query get all discharge method DEAD of client //
			$dm = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->Where('isdelete = 0')
				->andWhere('clientid = ' . $logininfo->clientid)
				->andWhere('abbr IN ("TOD", "TODNA","tod","Tod","Verstorben","verstorben","VERSTORBEN")');
			$dischargemethods = $dm->fetchArray();


			if(count($dischargemethods) > 0)
			{
				foreach($dischargemethods as $dmkey => $dmvalue)
				{
					$dischargeids[] = $dmvalue['id'];
				}
			}

			if(count($dischargeids) == 1)
			{
				$dischargemethodids = $dischargeids[0];
			}
			else if(count($dischargeids) > 0 && count($dischargeids) != 1)
			{
				$dischargemethodids = implode(",", $dischargeids);
			}



			// Get Death_date from Verstorben

			$pdeath = new PatientDeath();
			$patientdeatharray = $pdeath->getPatientDeath($ipid);


			$discharged = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->where('ipid ="' . $ipid . '"  and isdelete="0"')
				->andwhere('discharge_method IN (' . $dischargemethodids . ')');

			$deathpatarr = $discharged->fetchArray();

			if(count($deathpatarr) > 0)
			{
				foreach($deathpatarr as $kd => $vald)
				{
					$this->view->death_date = date("d.m.Y", strtotime($vald['discharge_date']));
				}
			}
			else if(count($patientdeatharray) > 0)
			{
				$this->view->death_date = date("d.m.Y", strtotime($patientdeatharray[0]['death_date']));
			}

			/* --------------------LOCATION -Get client hospital locations --------------------- */
			$fdoc = Doctrine_Query::create()
				->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where("client_id='" . $logininfo->clientid . "'")
				->andWhere('isdelete=0')
				->andWhere("location_type='1'")
				->orderBy('location ASC');
			$locarr = $fdoc->fetchArray();
			$comma = ",";
			$locid = "'0'";

			foreach($locarr as $key => $val)
			{
				$locid.= $comma . "'" . $val['id'] . "'";
				$comma = ",";

				$master_location[$val['id']]['name'] = $val['location'];
			}

			/* --------------------LOCATION -Get PATIENT hospitals locations--------------------- */
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"  and isdelete="0"')
				->andWhere('location_id in (' . $locid . ')')
				->orderBy('id ASC');
			$patlocation = $patloc->fetchArray();

			foreach($patlocation as $kloc => $vloc)
			{
				if($vloc['valid_from'] == '0000-00-00 00:00:00')
				{
					$patient_hospital[$vloc['id']]['von'] = '-';
				}
				else
				{
					$patient_hospital[$vloc['id']]['von'] = $vloc['valid_from'];
				}

				if($vloc['valid_till'] == '0000-00-00 00:00:00')
				{
					$patient_hospital[$vloc['id']]['bis'] = '-';
				}
				else
				{
					$patient_hospital[$vloc['id']]['bis'] = $vloc['valid_till'];
				}
				$patient_hospital[$vloc['id']]['krankenhaus'] = $master_location[$vloc['location_id']]['name'];

				$patient_hospital[$vloc['id']]['decomp_pat'] = '';
				$patient_hospital[$vloc['id']]['decomp_um'] = '';
				$patient_hospital[$vloc['id']]['pat_wun'] = '';
			}

			$this->view->patient_hospital = $patient_hospital;

			if($_REQUEST['location'])
			{
				print_R("\n patient \n");
				print_R($patient_hospital);
				print_R("\n");
			}

			/* --------------------PFLEGESTUFE -PatientMaintainanceStage--------------------- */
			$pms = new PatientMaintainanceStage();
			$pat_pms = $pms->getLastpflegestufeMaintainanceStage($ipid);

			if($pat_pms[0]['ipid'] !== NULL && $pat_pms[0]['stage'] != 0 && $pat_pms[0]['stage'] !== "Bitte wählen...")
			{
				$this->view->pflegestufe_create = date("d.m.Y", strtotime($pat_pms[0]['create_date']));
				$this->view->pflegestufe_stage = $pat_pms[0]['stage'];
			}
			else
			{
				$this->view->pflegestufe_create = "";
			}
			
			//Pflegegrade ISPC-2500 Lore 13.01.2020
			/* --------------------PFLEGESTUFE -PatientMaintainanceStage[ISPC-2500]--------------------- */
			$pms = new PatientMaintainanceStage();
			$pflegegrade_arr = $pms->getpatientMaintainanceStage($ipid);
			
			if( ! empty($pflegegrade_arr)){
			    $pflegegrade_begin = $pflegegrade_arr[0];
			    $pflegegrade_abschluss = end($pflegegrade_arr);
			    
			    $this->view->pflegestufe_beginn = $pflegegrade_begin['stage']; //1 radio
			    $this->view->abschluss = $pflegegrade_abschluss['stage']; //3 radio
			}
			//--
			
			
			
			/* --------------------Abschlussdokumentation - get data if form exists--------------------- */
			if($form_details && $form_details[0]['new_instance'] == '1')
			{
				$final_f_location = new FinalDocumentationLocation();
				$locations_array = $final_f_location->getFormFinalDocumentationLocation($ipid, $form_id);

				if($_REQUEST['location'])
				{
					print_R("\n saved: \n");
					print_r($locations_array);
					exit;
				}

				$this->view->patient_hospital = $locations_array;
				// block Einsatzart
				$this->view->im_hausliche_begleitung = $form_details[0]['im_hausliche_begleitung']; //1
				$this->view->hospizappartement = $form_details[0]['hospizappartement']; //2
				$this->view->einsatz_ausschlieblich = $form_details[0]['einsatz_ausschlieblich']; //3
				$this->view->ausschlieblich_klinik = $form_details[0]['ausschlieblich_klinik']; //4
				$this->view->ausschlieblich_telefonische = $form_details[0]['ausschlieblich_telefonische']; //5
				//Quantitative Aufwandsverteilung
				$this->view->quantitative_patient = $form_details[0]['quantitative_patient'];
				$this->view->angehorige = $form_details[0]['angehorige'];
				$this->view->systemische_tatigkeiten = $form_details[0]['systemische_tatigkeiten'];
				// block Erschwerte Bedingungen: für die häusliche Betreuung
				$this->view->symptome_bzw = $form_details[0]['symptome_bzw']; //1
				$this->view->patient_lasst = $form_details[0]['patient_lasst']; //2
				$this->view->angehorige_lassen = $form_details[0]['angehorige_lassen']; //3
				$this->view->belastbarkeit_der = $form_details[0]['belastbarkeit_der']; //4
				$this->view->angst_vor_sozialen = $form_details[0]['angst_vor_sozialen']; //5
				$this->view->zusammenarbeit_mit_niedergelassenen = $form_details[0]['zusammenarbeit_mit_niedergelassenen']; //6
				$this->view->zusammenarbeit_mit = $form_details[0]['zusammenarbeit_mit']; //7
				$this->view->medizin = $form_details[0]['medizin']; //8
				$this->view->wohnsituation = $form_details[0]['wohnsituation']; //9
				$this->view->finanzielle_notlage = $form_details[0]['finanzielle_notlage']; //10
				$this->view->kulturelle_unterschiede = $form_details[0]['kulturelle_unterschiede']; //11
				$this->view->sprachbarrieren = $form_details[0]['sprachbarrieren']; //12
				//Abschlussgrund right
				$this->view->abschlussgrund = $form_details[0]['abschlussgrund']; //1  radio
				$this->view->beendigung_der_begleitung = $form_details[0]['beendigung_der_begleitung']; //1  radio
				$this->view->beendigung_der_begleitung_chk = $form_details[0]['beendigung_der_begleitung_chk']; //1  radio
				$this->view->stabilisierung_des_gesundheitszustandes = $form_details[0]['stabilisierung_des_gesundheitszustandes']; //1  radio
				//Todesdatum
				$this->view->todesdatum = $form_details[0]['todesdatum']; //1 radio
				$this->view->death_date = $form_details[0]['death_date'];
				//Ort des Sterbens
				$this->view->Wunsch = $form_details[0]['Wunsch']; //1 radio
				$this->view->tatsachlich = $form_details[0]['tatsachlich']; //1 radio
				//Pflegestufe
				$this->view->pflegestufe_beginn = $form_details[0]['pflegestufe_beginn']; //1 radio
				$this->view->beantragt = $form_details[0]['beantragt']; //2 radio
				$this->view->beantragt_am_txt = $form_details[0]['beantragt_am_txt']; //2 radio
				$this->view->abschluss = $form_details[0]['abschluss']; //3 radio
				$this->view->abschluss_seit = $form_details[0]['abschluss_seit']; //4 check
				$this->view->abschluss_seit_txt = $form_details[0]['abschluss_seit_txt']; //4 check
				//Symptomentwicklung rückblickend
				$this->view->beginn_ausgepragte_schmerzsymptomatik = $form_details[0]['beginn_ausgepragte_schmerzsymptomatik']; //1 check
				$this->view->abschluss_ausgepragte_schmerzsymptomatik = $form_details[0]['abschluss_ausgepragte_schmerzsymptomatik']; //2 check
				$this->view->beginn_kardiale_symptomatik = $form_details[0]['beginn_kardiale_symptomatik']; //3 check
				$this->view->abschluss_kardiale_symptomatik = $form_details[0]['abschluss_kardiale_symptomatik']; //4 check
				$this->view->beginn_gastrointestinale_symptomatik = $form_details[0]['beginn_gastrointestinale_symptomatik']; //5 check
				$this->view->abschluss_gastrointestinale_symptomatik = $form_details[0]['abschluss_gastrointestinale_symptomatik']; //6 check
				$this->view->beginn_neurologische = $form_details[0]['beginn_neurologische']; //7 check
				$this->view->abschluss_neurologische = $form_details[0]['abschluss_neurologische']; //8 check
				$this->view->beginn_ulzerierende = $form_details[0]['beginn_ulzerierende']; //9 check
				$this->view->abschluss_ulzerierende = $form_details[0]['abschluss_ulzerierende']; //10 check
				$this->view->beginn_urogenitale_symptomatik = $form_details[0]['beginn_urogenitale_symptomatik']; //11 check
				$this->view->abschluss_urogenitale_symptomatik = $form_details[0]['abschluss_urogenitale_symptomatik']; //12 check
				$this->view->beginn_soziale_situation = $form_details[0]['beginn_soziale_situation']; //13 check
				$this->view->abschluss_soziale_situation = $form_details[0]['abschluss_soziale_situation']; //14 check
				$this->view->beginn_sonstiges = $form_details[0]['beginn_sonstiges']; //15 check
				$this->view->abschluss_sonstiges = $form_details[0]['abschluss_sonstiges']; //16 check
				$this->view->beginn_ethische_konflikte = $form_details[0]['beginn_ethische_konflikte']; //17 check
				$this->view->abschluss_ethische_konflikte = $form_details[0]['abschluss_ethische_konflikte']; //18 check
				$this->view->beginn_rechtliche_problematik = $form_details[0]['beginn_rechtliche_problematik']; //19 check
				$this->view->abschluss_rechtliche_problematik = $form_details[0]['abschluss_rechtliche_problematik']; //20 check
				$this->view->beginn_unterstutzung_bezugssystem = $form_details[0]['beginn_unterstutzung_bezugssystem']; //21 check
				$this->view->abschluss_unterstutzung_bezugssystem = $form_details[0]['abschluss_unterstutzung_bezugssystem']; //22 check
				$this->view->beginn_existentielle_krisen = $form_details[0]['beginn_existentielle_krisen']; //23 check
				$this->view->abschluss_existentielle_krisen = $form_details[0]['abschluss_existentielle_krisen']; //24 check
				//Betreuungsnetz / Kooperationspartner während der Begleitung
				$this->view->pcf = $form_details[0]['pcf']; //1 check
				$this->view->palliativmediziner = $form_details[0]['palliativmediziner']; //2 check
				$this->view->hausarzt = $form_details[0]['hausarzt']; //3 check
				$this->view->facharzt = $form_details[0]['facharzt']; //4 check
				$this->view->amb_hospizdienst = $form_details[0]['amb_hospizdienst']; //5 check
				$this->view->pflegedienst = $form_details[0]['pflegedienst']; //6 check
				$this->view->sozialstation = $form_details[0]['sozialstation']; //7 check
				$this->view->sozialarbeit = $form_details[0]['sozialarbeit']; //8 check
				$this->view->stationares_hospiz = $form_details[0]['stationares_hospiz']; //9 check
				$this->view->krankenhaus = $form_details[0]['krankenhaus']; //10 check
				$this->view->palliativstation = $form_details[0]['palliativstation']; //11 check
				$this->view->stationare_pflege = $form_details[0]['stationare_pflege']; //12 check
				$this->view->physiotherapie = $form_details[0]['physiotherapie']; //13 check
				$this->view->psychologe = $form_details[0]['psychologe']; //14 check
				$this->view->apotheke_sanitatshaus = $form_details[0]['apotheke_sanitatshaus']; //15 check
				$this->view->weitere_berufe = $form_details[0]['weitere_berufe']; //16 check
				$this->view->angehorige_grundpflege = $form_details[0]['angehorige_grundpflege']; //17 check
				$this->view->angehorige_behandlungspflege = $form_details[0]['angehorige_behandlungspflege']; //18 check
				$this->view->seelsorge = $form_details[0]['seelsorge']; //19 check
				// Begleitungsprobleme
				$this->view->begleitungs_arzt = $form_details[0]['begleitungs_arzt']; //1 check
				$this->view->begleitungs_pflegedienst = $form_details[0]['begleitungs_pflegedienst']; //2 check
				$this->view->begleitungs_krankenkasse = $form_details[0]['begleitungs_krankenkasse']; //3 check
				$this->view->begleitungs_pflegekasse = $form_details[0]['begleitungs_pflegekasse']; //4 check
				$this->view->begleitungs_mdk = $form_details[0]['begleitungs_mdk']; //5 check
				$this->view->begleitungs_homecare = $form_details[0]['begleitungs_homecare']; //6 check
				$this->view->begleitungs_apotheke = $form_details[0]['begleitungs_apotheke']; //7 check
				$this->view->begleitungs_klinikum = $form_details[0]['begleitungs_klinikum']; //8 check
				$this->view->begleitungs_altenheim = $form_details[0]['begleitungs_altenheim']; //9 check
				$this->view->begleitungs_hospiz = $form_details[0]['begleitungs_hospiz']; //10 check
				$this->view->begleitungs_seelsorge = $form_details[0]['begleitungs_seelsorge']; //11 check
				$this->view->begleitungs_seelsorge1 = $form_details[0]['begleitungs_seelsorge1']; //12 check
			} 

			if($this->getRequest()->isPost())
			{
				$final_locations = new Application_Form_FinalDocumentationLocation();
				$final_documentation = new Application_Form_FinalDocumentation();

				/* -------------------SAVE Actions-------------------------------- */
				if(strlen($_POST['btnsave']) > 0 && empty($_POST['form_id']))
				{
					$result = $final_documentation->insertFinalDocumentation($_POST);
					if($result)
					{
						$_POST['form_id'] = $result;
						$result_location = $final_locations->insertFinalDocumentationLocation($_POST, $ipid, $_POST['form_id']);
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
						exit;
					}
				}

				/* -------------------EDIT Actions-------------------------------- */
				else if(strlen($_POST['btnsave']) > 0 && !empty($_POST['form_id']))
				{
					$result = $final_documentation->UpdateFinalDocumentation($_POST);
					$update_result_location = $final_locations->insertFinalDocumentationLocation($_POST, $ipid, $_POST['form_id']);
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}
				else if(strlen($_POST['btnnew']) > 0 && !empty($_POST['form_id']))
				{
					$result = $final_documentation->NewInstanceFinalDocumentation();
					$this->retainValues($_POST);
					$post = $_POST;
					$this->generatePdfNew(4, $post, 'FormFiveInstance', "formfivepdf.html");
					$this->_redirect(APP_BASE . "patient/formfive?id=" . $_GET['id']);
					exit;
				}
				else if(strlen($_POST['btnsubmit']) > 0)
				{
					$this->retainValues($_POST);
					$post = $_POST;
					$this->generateformPdf(3, $_POST, 'formfive', "formfivepdf.html");
				}
			}
		}

		public function sapvfb3Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$this->view->loguserid = $logininfo->userid;

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$this->view->frmb3class = "active";

			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$unamecd = $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}
			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->bdate = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			if(strlen($_POST['btnsave']) > 0)
			{
				if(is_array($_POST['checkbox']))
				{

					foreach($_POST['checkbox'] as $key => $val)
					{


						$sp = Doctrine::getTable('Sapsymptom')->find($key);

						if(is_array($val))
						{
							$sp->sapvalues = join(",", $val);
						}
						else
						{
							$sp->sapvalues = "";
						}

						$sp->gesamt_zeit_in_minuten = $_POST['gesamt_zeit_in_minutenpre'][$key][0];
						$sp->gesamt_fahrstrecke_in_km = $_POST['gesamt_fahrstrecke_in_kmpre'][$key][0];
						$sp->davon_fahrtzeit = $_POST['davon_fahrtzeitpre'][$key][0];
						$sp->save();

						if(is_array($_POST['upcomments'][$key]))
						{
							foreach($_POST['upcomments'][$key] as $keyid => $valk)
							{
								$cust = new PatientCourse();
								$cust->ipid = $ipid;
								$cust->course_date = date("Y-m-d H:i:s", time());
								$cust->course_type = Pms_CommonData::aesEncrypt("LN");
								$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Ein bestehender LE Eintrag vom " . date("Y-m-d H:i:s", time()) . " wurde von " . $unamecd . " editiert " . $valk));
								$cust->user_id = $userid;
								$cust->save();
							}
						}
					}
				}

				if(is_array($_POST['symptom']))
				{
					if(count($_POST['symptom']) > 0)
					{
						$sp = new Sapsymptom();
						$sp->ipid = Pms_CommonData::getIpid($decid);
						$sp->sapvalues = join(",", $_POST['symptom']);
						$sp->gesamt_zeit_in_minuten = $_POST['gesamt_zeit_in_minuten'];
						$sp->gesamt_fahrstrecke_in_km = $_POST['gesamt_fahrstrecke_in_km'];
						$sp->davon_fahrtzeit = $_POST['davon_fahrtzeit'];
						$sp->save();

						for($i = 0; $i < count($_POST['comments']); $i++)
						{
							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("E");
							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes($_POST['comments'][$i]));
							$cust->user_id = $userid;
							$cust->save();
						}
					}
				}
			}

			if(strlen($_POST['btnpdf']) > 0)
			{
				$this->generateformPdf(3, $_POST, 'SAPVF_B3', "sapvf_b3pdf.html");
			}

			$spc = Doctrine_Query::create()
				->select('*')
				->from('Sapsymptom')
				->where("ipid='" . Pms_CommonData::getIpid($decid) . "'")
				->andWhere('isdelete = 0')
				->orderBy('id DESC');
			$spcexe = $spc->execute();
			$sparrc = $spcexe->toArray();
			$this->view->lastsapid = $sparrc[0]['id'];

			$sparr = Sapsymptom::get_patient_sapvsymptom(Pms_CommonData::getIpid($decid));
			$this->view->sparr = $sparr;
		}

		public function sapvfb4Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$this->view->frmb4class = "active";

			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];
			$familydoc_id = $parr['familydoc_id'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			if($ref)
			{
				$refarray = $ref->toArray();
				if($refarray['referred_name'] == trim("Hausarzt"))
				{
					$fd = new FamilyDoctor();
					$fdarr = $fd->getFamilyDoc($familydoc_id);
					if(count($fdarr) > 0)
					{

						$this->view->refarray = $fdarr[0]['first_name'] . " " . $fdarr[0]['last_name'] . ", " . $fdarr[0]['street1'] . ", " . $fdarr[0]['zip'] . " " . $fdarr[0]['city'] . ", " . $fdarr[0]['phone_practice'];
					}
				}
				else
				{
					$this->view->refarray = $refarray['referred_name'];
				}
			}

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();

				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->bdate = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			$pms = new PatientMaintainanceStage();
			$pat_pmsinfo = $pms->getpatientMaintainanceStage($patientinfo['ipid']);

			if($pat_pmsinfo[0]['stage'] > 0)
			{
				$this->view->{"stage" . $pat_pmsinfo[0]['stage']} = 'checked="checked"';
			}
			if($this->getRequest()->isPost())
			{
				$this->generateformPdf(3, $_POST, 'SAPVF_B4', "sapvf_b4pdf.html");
			}
		}

		public function sapvfb5Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$this->view->frmb5class = "active";

			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];
			$ipid = $parr['ipid'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$this->view->bdate = $patientinfo['birthd'];

			if($this->getRequest()->isPost())
			{
				$this->generateformPdf(3, $_POST, 'SAPVF_B5', "sapvf_b5pdf.html");
			}
		}

		public function sapvfb12Action()
		{
			ob_start();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->frmb12class = "active";

			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];
			$ipid = $parr['ipid'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}
			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->bdate = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			if($this->getRequest()->isPost())
			{
				$this->generateformPdf(3, $_POST, 'SAPVF_B12', "sapvf_b12pdf.html");
			}
		}

		public function sapvfb8Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = Pms_CommonData::getIpid($decid);
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->notostrdays = array('1' => "one", '2' => "two", '3' => "three", '4' => "four", '5' => "five", '6' => "six", '7' => "seven", '8' => "eight", '9' => "nine", '10' => "ten");

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->frmb8class = "active";

			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];
			$this->view->admission_date = $parr['admission_date'];

			$doc = Doctrine::getTable('PatientDischarge')->findBy('ipid', $ipid);
			$patientarray = $doc->toArray();

			if($_REQUEST['dbg'] == "1")
			{
				var_dump($patientarray);
			}

			if(count($patientarray) > 0)
			{
				$this->view->discharge_date = date("d.m.Y", strtotime($patientarray[0]['discharge_date']));
				$pms = new PatientMaster();

				$days = $pms->getTreatedDaysReal($parr['ipid']);
				$daystreated = $days['realActiveDays'];

				if($daystreated > 0)
				{
					$this->view->days_treated = $daystreated;
				}
				else
				{
					$this->view->days_treated = "-";
				}
			}

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->bdate = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			if($this->getRequest()->isPost())
			{
				$this->generateformPdf(3, $_POST, 'SAPVF_B8', "sapvf_b8pdf.html");
			}
		}

        /**
         * ISPC-2391, elena, 11.09.2020
         * @param Zend_Session_Namespace $logininfo
         * @throws Zend_Exception
         * changed by Ancuta 09.12.2020  
         */
        //public function getFormtwoData(Zend_Session_Namespace $logininfo): void
        public function getFormtwoData()
        {
            $logininfo = new Zend_Session_Namespace('Login_Info');
            //discharge methods that means death
            $dischargeMethod = new DischargeMethod();
            $deathDischargeMethods = $dischargeMethod->getDeathMethod($logininfo->clientid);
            //print_r($deathDischargeMethods);
            //discharged ipids
            $patientMaster = new PatientMaster();
            //ISPC-2391,Elena,11.02.2021
            $currentYear =  date("Y");
            $report_year = $currentYear - 1;
            if(!empty($_REQUEST['report_year'])){
                $report_year = $_REQUEST['report_year'];
            }
            $this->view->report_year = $report_year;
            //TODO-3994,Elena,26.03.2021
            $dischargedIpidsRaw = $patientMaster->get_discharged_ipids($logininfo->clientid, ['for year' => $report_year]);//ISPC-2391,Elena,11.02.2021
            $dischargedIpids = [];
            foreach( $dischargedIpidsRaw as $di){
                $dischargedIpids[] = $di['ipid'];
                
            }

            $patientDischarge = new PatientDischarge();
            $countDeadPatients = $patientDischarge->get_count_patients_discharged_by_methods($dischargedIpids, $deathDischargeMethods);
            //print_r($countDeadPatients);
            $this->view->countDeadPatients = $countDeadPatients;
            // location types
            //1 = zu Hause
            //2 = KH
            //3 = Hospiz
            //4 = Altenheim, Pflegeheim
            //5 = Palliativ

            //TODO-3994,Elena,26.03.2021
            $dl = new DischargeLocation();
            $locations_kh_full = $dl->getDischargeLocationbyType(2, $logininfo->clientid);
            $locations_kh = [];
            foreach($locations_kh_full as $loc){
                $locations_kh[] = $loc['id'];
            }
            $locations_house_full = $dl->getDischargeLocationbyType(1, $logininfo->clientid);
            $locations_house = [];
            foreach($locations_house_full as $loc){
                $locations_house[] = $loc['id'];
            }
            $locations_hospiz_full = $dl->getDischargeLocationbyType(3, $logininfo->clientid);
            $locations_hospiz = [];
            foreach($locations_hospiz_full as $loc){
                $locations_hospiz[] = $loc['id'];
            }

            $locations_ph_full = $dl->getDischargeLocationbyType(4, $logininfo->clientid);
            $locations_ph = [];
            foreach($locations_ph_full as $loc){
                $locations_ph[] = $loc['id'];
            }

            $locations_palli_full = $dl->getDischargeLocationbyType(5, $logininfo->clientid);
            $locations_palli = [];
            foreach($locations_palli_full as $loc){
                $locations_palli[] = $loc['id'];
            }

            $countDeadPatientsAtHome = $patientDischarge->get_count_patients_discharged_by_methods_and_locations($dischargedIpids, $deathDischargeMethods, $locations_house);
            $this->view->countDeadPatientsAtHome = $countDeadPatientsAtHome;

            //TODO-3994,Elena,26.03.2021
            $countDeadPatientsKH = $patientDischarge->get_count_patients_discharged_by_methods_and_locations($dischargedIpids, $deathDischargeMethods, $locations_kh);
            $this->view->countDeadPatientsKH = $countDeadPatientsKH;
            //TODO-3994,Elena,26.03.2021
            $countDeadPatientsHospiz = $patientDischarge->get_count_patients_discharged_by_methods_and_locations($dischargedIpids, $deathDischargeMethods, $locations_hospiz);
            $this->view->countDeadPatientsHospiz = $countDeadPatientsHospiz;
            //TODO-3994,Elena,26.03.2021
            $countDeadPatientsPH = $patientDischarge->get_count_patients_discharged_by_methods_and_locations($dischargedIpids, $deathDischargeMethods, $locations_ph);
            $this->view->countDeadPatientsPH = $countDeadPatientsPH;
            //TODO-3994,Elena,26.03.2021
            $countDeadPatientsPalli = $patientDischarge->get_count_patients_discharged_by_methods_and_locations($dischargedIpids, $deathDischargeMethods, $locations_palli);
            $this->view->countDeadPatientsPalli = $countDeadPatientsPalli;

            //SAPV

            //  get  patients
            //TODO-3994,Elena,26.03.2021
            $ipids = $this->getClientPatients($logininfo->clientid);

            $sapv = new SapvVerordnung();
            //TODO-3994,Elena,26.03.2021
            //$sapvarr = $sapv->get_all_sapvs_new($ipids, $logininfo->clientid, "", false, false, false, false, $report_year);//ISPC-2391,Elena,11.02.2021
            //logics from
            $next_year = $report_year + 1;
            $int_cond = '(year(verordnungam) = "'. $report_year .'")';
            $sapvarr = $sapv->get_all_sapvs_new($ipids, $logininfo->clientid, "", $int_cond);

            $sapv_part_and_full_count = 0;
            $sapvCount = count($sapvarr);
            $this->view->sapvCount = $sapvCount;
            $verordnetStati = Pms_CommonData::get_sapv_verordnets();
            $verordnetSapv = [];
            $permittedSapv = [];
            $permittedSapvPatient = [];
            $sapvPermitted = 0;
            $sapvNotPermitted = 0;
            $sapvTimesPartPermitted = 0;
            $fahrtstreckeKm = 0;

            foreach ($verordnetStati as $key => $vSt) {
                $verordnetSapv[$vSt] = 0;
                $permittedSapv[$vSt] = 0;
            }
            $all_part_and_full_sapv = [];
            foreach ($sapvarr as $sapvVal) {
                $verordnet = max(explode(",", $sapvVal['verordnet']));
                foreach ($verordnetStati as $key => $vSt) {
                    if (intval($verordnet) == $key) {
                        $verordnetSapv[$vSt]++;
                        if ($sapvVal['status'] == 2){
                            $permittedSapv[$vSt]++;
                        }
                    }

                }

                if ($sapvVal['status'] == 2) {
                    $sapvPermitted++;
                    if(!isset($permittedSapvPatient[$sapvVal['ipid']])){
                        $permittedSapvPatient[$sapvVal['ipid']] = [];
                    }
                    $permittedSapvPatient[$sapvVal['ipid']][] = $sapvVal;
                    $regulation_start = DateTime::createFromFormat('Y-m-d H:i:s', $sapvVal['regulation_start']);
                    $regulation_end = DateTime::createFromFormat('Y-m-d H:i:s', $sapvVal['regulation_end']);
                    $regulation_interval = $regulation_end->diff($regulation_start);
                    $verordnung_start = DateTime::createFromFormat('Y-m-d H:i:s', $sapvVal['verordnungam']);
                    $verordnung_end = DateTime::createFromFormat('Y-m-d H:i:s', $sapvVal['verordnungbis']);
                    $verordnung_interval = $verordnung_end->diff($verordnung_start);


                    if ($regulation_interval->d < $verordnung_interval->d) {
                        $sapvTimesPartPermitted++;
                    }

                } elseif ($sapvVal['status'] == 1) {
                    $sapvNotPermitted++;

                }

                $verordnet_arr = explode(",", $sapvVal['verordnet']);
                // Teil oder Vollversorgung
                if (in_array('3', $verordnet_arr) || in_array('4', $verordnet_arr)) {
                    $sapv_part_and_full_count++;
                    $contactQuery = Doctrine_Query::create()
                        ->select("sum(fahrtstreke_km)")
                        ->from('ContactForms')
                        ->whereIn('ipid', $sapvVal['ipid'])
                        ->andWhere('date >= ?', $sapvVal['regulation_start'])
                        ->andWhere('date <= ?', $sapvVal['regulation_end']);
                    $contactformarr = $contactQuery->fetchArray();
                    //print_r($contactformarr);
                    $fahrtstreckeKm += intval($contactformarr[0]['sum']);

                }

            }
            $countSapvPermittedPatients = count($permittedSapvPatient);


            $average_km_raw = ($sapv_part_and_full_count > 0) ? $fahrtstreckeKm / $sapv_part_and_full_count : 0;
            $this->view->average_km = number_format($average_km_raw, 2, ',', '.');

            //ISPC-2391,elena,09.12.2020, 2 print_r removed
            $this->view->verordnetSapv = $verordnetSapv;
            $this->view->permittedSapv = $permittedSapv;
            $this->view->sapvTimesPartPermitted = $sapvTimesPartPermitted;
            $this->view->sapvPermitted = $sapvPermitted;
            $this->view->sapvNotPermitted = $sapvNotPermitted;

            //N = average contacts (contact form, XT, V & U) of an active patient in report period
            $aShortcuts = ['XT', 'V', 'U'];
            $patientQuery = Doctrine_Query::create()
                ->select("count(*)")
                ->from('PatientCourse')
                ->where('YEAR(course_date)=?', $report_year)//ISPC-2391,Elena,11.02.2021
                ->andWhereIn('ipid', $ipids)
                ->andWhereIn("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "')", $aShortcuts);

            $contactrarray = $patientQuery->fetchArray();
            $contacts_from_shortcuts = $contactrarray[0]['count'];

            $contactformsQuery = Doctrine_Query::create()
                ->select("count(*)")
                ->from('ContactForms')
                ->whereIn('ipid', $ipids) //ISPC-2391,Elena,11.02.2021
                ->andWhere('YEAR(start_date)=?', $report_year);

            $contactformsrarray = $contactformsQuery->fetchArray();
            $contacts_from_contactforms = $contactformsrarray[0]['count'];
            $patients = count($ipids);
            $average_contacts_raw = ($contacts_from_shortcuts + $contacts_from_contactforms) / $patients;
            $this->view->average_contacts = number_format($average_contacts_raw, 2, ',', '.');

            //teilversorgung, vollversorgung, koordination

            $average_koordi_days_raw = SapvVerordnung::get_average_active_time_by_status($ipids, '2', true, $report_year);//ISPC-2391,Elena,11.02.2021
            $this->view->average_koordi_days = number_format($average_koordi_days_raw, 2, ',', '.');
            $average_part_days_raw = SapvVerordnung::get_average_active_time_by_status($ipids, '3', true, $report_year);//ISPC-2391,Elena,11.02.2021
            $this->view->average_part_days = number_format($average_part_days_raw, 2, ',', '.');

            $average_full_days_raw = SapvVerordnung::get_average_active_time_by_status($ipids, '4', true, $report_year);//ISPC-2391,Elena,11.02.2021
            $this->view->average_full_days = number_format($average_full_days_raw, 2, ',', '.');
            $ipids_hospital_notarzt = [];
            $ipids_hospital = [];
            $pat_hospital_data = [];
            $pat_hospital_notarzt_data = [];
            $patients_hospital = PatientLocation::getPatientsLocationsHospital($logininfo->clientid);
            $patients_hospital_notarzt = PatientLocation::getPatientsLocationsNotarztHospital($logininfo->clientid);
            foreach ($patients_hospital as $pat) {
                $ipids_hospital[] = $pat['ipid'];
                $pat_hospital_data[$pat['ipid']][] = $pat;
            }
            foreach ($patients_hospital_notarzt as $pat) {
                $ipids_hospital[] = $pat['ipid'];
                $pat_hospital_notarzt_data[$pat['ipid']][] = $pat;
            }
            $hospital_part_count = 0;
            $hospital_full_count = 0;
            //ISPC-2391,Elena,11.02.2021
            $sapvarr_part_all = SapvVerordnung::get_data_by_status($ipids_hospital, '3', true, $report_year);
            $sapvarr_full_all = SapvVerordnung::get_data_by_status($ipids_hospital, '4', true, $report_year);
            //print_r($sapvarr_full_all);
            $all_part_count = 0;//count(SapvVerordnung::get_data_by_status($ipids, '3'));
            $all_full_count = 0;// count(SapvVerordnung::get_data_by_status($ipids, '4'));
            $all_full_ipids = [];
            $all_part_ipids = [];
            $hospital_notarzt_full_count = 0;
            $hospital_notarzt_part_count = 0;

            foreach ($sapvarr_part_all as $pat_ipid => $sapv_hospital) {
                //echo $pat_ipid;
                if(!in_array($pat_ipid, $all_part_ipids)){
                    $all_part_ipids[] = $pat_ipid;
                    $all_part_count++;
                }
                foreach ($pat_hospital_data[$sapv_hospital['ipid']] as $hospital_data_for_ipid) {
                    if (strtotime($hospital_data_for_ipid['valid_from']) >= strtotime($sapv_hospital['regulation_start']) && strtotime($hospital_data_for_ipid['valid_from']) >= strtotime($sapv_hospital['regulation_end'])) {
                        $hospital_part_count++;
                    }
                }
            }

            //average ammount of locationtype "hospital" in Teilversorgung
            $average_sapv_part_hospital_raw = ($all_part_count == 0) ? 0 : $hospital_part_count / $all_part_count;
            $this->view->average_sapv_part_hospital = number_format($average_sapv_part_hospital_raw, 2, ',', '.');

            foreach ($sapvarr_full_all as $pat_ipid =>  $sapv_hospital) {
                //echo $pat_ipid;
                if(!in_array($pat_ipid, $all_full_ipids)){
                    $all_full_ipids[] = $pat_ipid;
                    $all_full_count++;
                }
                foreach ($pat_hospital_data[$sapv_hospital['ipid']] as $hospital_data_for_ipid) {
                    if (strtotime($hospital_data_for_ipid['valid_from']) >= strtotime($sapv_hospital['regulation_start']) && strtotime($hospital_data_for_ipid['valid_from']) >= strtotime($sapv_hospital['regulation_end'])) {
                        $hospital_full_count++;
                    }
                }
            }
            //average ammount of locationtype "hospital" in Vollversorgung
            $average_sapv_full_hospital_raw = ($all_full_count == 0) ? 0 : $hospital_full_count / $all_full_count;
            $this->view->average_sapv_full_hospital = number_format($average_sapv_full_hospital_raw, 2, ',', '.');


            foreach ($sapvarr_part_all as $sapv_hospital) {
                foreach ($pat_hospital_notarzt_data[$sapv_hospital['ipid']] as $hospital_data_for_ipid) {
                    if (strtotime($hospital_data_for_ipid['valid_from']) >= strtotime($sapv_hospital['regulation_start']) && strtotime($hospital_data_for_ipid['valid_from']) >= strtotime($sapv_hospital['regulation_end'])) {
                        $hospital_notarzt_part_count++;
                    }
                }
            }

            // average ammount of locationtype "hospital" with "Notarzt" in coloumn for "einweisender Arzt" in Teilversorgung
            $average_sapv_part_hospital_notarzt_raw = ($all_part_count == 0) ? 0 : $hospital_notarzt_part_count / $all_part_count;
            $this->view->average_sapv_part_hospital_notarzt = number_format($average_sapv_part_hospital_notarzt_raw, 2, ',', '.');

            foreach ($sapvarr_full_all as $sapv_hospital) {
                foreach ($pat_hospital_notarzt_data[$sapv_hospital['ipid']] as $hospital_data_for_ipid) {
                    if (strtotime($hospital_data_for_ipid['valid_from']) >= strtotime($sapv_hospital['regulation_start']) && strtotime($hospital_data_for_ipid['valid_from']) >= strtotime($sapv_hospital['regulation_end'])) {
                        $hospital_notarzt_full_count++;
                    }
                }
            }
            // average ammount of locationtype "hospital" with "Notarzt" in coloumn for "einweisender Arzt" in  Vollversorgung
            $average_sapv_full_hospital_notarzt_raw = ($all_full_count == 0) ? 0 : $hospital_notarzt_full_count / $all_full_count;
            $this->view->average_sapv_full_hospital_notarzt = number_format($average_sapv_full_hospital_notarzt_raw, 2, ',', '.');
        }

        /**
         * client's patients for statistics
         * not standby
         * not deleted
         * NOT discharged and discharged
         * TODO-3994,Elena,26.03.2021
         *
         *
         * @param $clientid
         * @return array
         */
        function getClientPatients($clientid)
        {
            $actpatient = Doctrine_Query::create()
                ->select("p.ipid")
                ->from('PatientMaster p')
                ->Where('isdelete = 0')
                ->andWhere('isstandby = 0')
                ->andWhere('isstandbydelete = 0');
            $actpatient->leftJoin("p.EpidIpidMapping e");
            $actpatient->andWhere('e.clientid = ' . (int)$clientid);
            $actpatient->andWhere('p.isdelete = 0');
            $actipidarray = $actpatient->fetchArray();
            $finalpatient = [];
            if($actipidarray)
            {
                foreach($actipidarray as $patient)
                {
                    $finalpatient[] = $patient['ipid'];
                }

                return $finalpatient;
            }
        }



		private function generateformsapvfb3Pdf($chk, $pdfname, $filename)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$post['ipid'] = Pms_CommonData::getIpid($decid);
			$post = array();
			$devtotal = 0;
			$sp = Doctrine_Query::create()
				->select('count(*)')
				->from('Sapsymptom')
				->where("ipid='" . Pms_CommonData::getIpid($decid) . "'")
			     ->andWhere('isdelete = 0');
			$spexec = $sp->execute();
			$sparr = $spexec->toArray();

			$devtotal = ($saprr[0]['count'] / 13);

			if($saprr[0]['count'] % 13 == 0)
			{
				$devtotal++;
			}
			$post['devtotal'] = $devtotal;

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$post['patientname'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']) . "<br />" . htmlspecialchars($parr['street1']) . "<br />" . htmlspecialchars($parr['zip']) . "&nbsp;" . htmlspecialchars($parr['city']);

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['clientname'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];

			$post['sapsymp'] = Sapsymptom::get_patient_sapvsymptom(Pms_CommonData::getIpid($decid));
			
			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$post['bdate'] = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$post['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$post['insurance_status'] = $healthinsu_array[0]['insurance_status'];

			$hquery = Doctrine_Query::create()
				->select('*')
				->from('HealthInsurance')
				->where("id='" . $healthinsu_array[0]['companyid'] . "' or name='" . htmlentities($healthinsu_array[0]['company_name'], ENT_QUOTES) . "'");
			$hexec = $hquery->execute();
			$harray = $hexec->toArray();
			$post['kvnumber'] = $harray[0]['kvnumber'];

			/* analage3 */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();


			$post['tablepatientinfo'] = Pms_Template::createTemplate($parr, 'templates/pdfprofile.html');

			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");

			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);

			ob_end_clean();
			ob_start();
			$pdf = new Pms_TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

			// set document information
			$pdf->SetCreator('IPSC');
			$pdf->SetAuthor('ISPC');
			$pdf->SetTitle('ISPC');
			$pdf->SetSubject('ISPC');
			$pdf->SetKeywords('ISPC');

			// set default header data
			$pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);

			// set header and footer fonts
			$pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
			$pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

			// set default monospaced font
			$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

			//set margins
			$pdf->SetMargins(30, 10, 30);
			$pdf->setPrintHeader(false);
			$pdf->setPrintFooter(false);
			$pdf->SetHeaderMargin(10);
			$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
			//set auto page breaks
			$pdf->SetAutoPageBreak(TRUE, 10);
			//set image scale factor
			$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
			//set some language-dependent strings
			$pdf->setLanguageArray('de');
			// ---------------------------------------------------------
			// set font
			$pdf->SetFont('times', '', 10);
			// add a page
			$pdf->AddPage('P', 'A4');
			$pdf->writeHTML($htmlform, true, 0, true, 0);

			if($chk == 1)
			{
				$tmpstmp = uniqid(time());
// 				mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH. "/" . $tmpstmp);
// 				$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$pdf->Output(PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', "uploads" );
				
			}
			if($chk == 2)
			{
				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				exit;
			}

			if($chk == 3)
			{
				$tmpstmp = uniqid(time());
// 				mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH. "/" . $tmpstmp);
// 				$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$pdf->Output(PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();

				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/				
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', "uploads" );
				
				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt($pdfname);
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();

				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				exit;
			}
		}

		private function generateformPdf($chk, $post, $pdfname, $filename)
		{	
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$post = Pms_CommonData::clear_pdf_data($post, array('patient_name'));
			$post['ipid'] = Pms_CommonData::getIpid($decid);

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$post['patientname'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']) . "<br>" . htmlspecialchars($parr['street1']) . "<br>" . htmlspecialchars($parr['zip']) . "&nbsp;" . htmlspecialchars($parr['city']);

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);

			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['clientname'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];

			$post['sapsymp'] = Sapsymptom::get_patient_sapvsymptom(Pms_CommonData::getIpid($decid));

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$post['bdate'] = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$post['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$post['insurance_status'] = $healthinsu_array[0]['insurance_status'];

			$hquery = Doctrine_Query::create()
				->select('*')
				->from('HealthInsurance')
				->where("id='" . $healthinsu_array[0]['companyid'] . "' or name='" . htmlentities($healthinsu_array[0]['company_name'], ENT_QUOTES) . "'");
			$hexec = $hquery->execute();
			$harray = $hexec->toArray();
			$post['kvnumber'] = $harray[0]['kvnumber'];

			/* analage3 */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$post['tablepatientinfo'] = Pms_Template::createTemplate($parr, 'templates/pdfprofile.html');
			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");

			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);
			 
			$pdf = new Pms_TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
			// set document information
			$pdf->SetCreator('IPSC');
			$pdf->SetAuthor('ISPC');
			$pdf->SetTitle('ISPC');
			$pdf->SetSubject('ISPC');
			$pdf->SetKeywords('ISPC');
			// set default header data
			$pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);
			// set header and footer fonts
			$pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
			$pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
			// set default monospaced font
			$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
			//set margins
				
			$pdf->SetMargins(30, 10, 30);
			$pdf->setPrintHeader(false);
			$pdf->setPrintFooter(false);
			$pdf->SetHeaderMargin(10);
			$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
			//set auto page breaks
			$pdf->SetAutoPageBreak(TRUE, 10);
			//set image scale factor
			$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
			//set some language-dependent strings
			$pdf->setLanguageArray('de');
			// set font
			$pdf->SetFont('times', '', 10);
			// add a page
			$pdf->AddPage('P', 'A4');
			//print_r($htmlform); exit;
			$pdf->writeHTML($htmlform, true, 0, true, 0);
			

			if($chk == 1)
			{
				$tmpstmp = uniqid(time());
				//mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH . '/' . $tmpstmp);
				//$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$pdf->Output(PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
				
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', "uploads" );
			}

			if($chk == 2)
			{
				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'I');
				$_SESSION['filename'] = "";
				unset($_SESSION['filename']);
				exit;
			}

			if($chk == 3)
			{

				$navnames = array("SAPV_fanfrage" => $this->view->translate('sapv_fanfrage'),
					"Uberleitungsbogen" => $this->view->translate('uberleitungsbogen'),
					"Verordnung" => $this->view->translate('verordnung'),
					"verordnungtp" => $this->view->translate('verordnungtp'),
					"verordnungtpside" => $this->view->translate('verordnungtpside'),
					"munster4" => $this->view->translate('munster4'),
					"Palliativ_versorgung_a7" => $this->view->translate('palliativ_versorgung_a7'),
					"folgeverordnung" => $this->view->translate('folgeverordnung'),
					"Form_one" => $this->view->translate('form_one'),
					"Form_two" => $this->view->translate('form_two'),
					"Anlage_4(Teil 1)" => $this->view->translate('anlage_4teil'),
					"Anlage4wl" => $this->view->translate('Anlage 4 WL'),
					"formthree" => $this->view->translate('formthree'),
					"Stammblatt" => $this->view->translate('stammblatt'),
					"hopeform" => $this->view->translate('hopeform'),
					"formfour" => $this->view->translate('formfour'),
					"formfive" => $this->view->translate('formfive'),
					"SAPVF_B3" => $this->view->translate('sapvf_b3'),
					"SAPVF_B4" => $this->view->translate('sapvf_b4'),
					"SAPVF_B5" => $this->view->translate('sapvf_b5'),
					"SAPVF_B12" => $this->view->translate('sapvf_b12'),
					"SAPVF_B8" => $this->view->translate('sapvf_b8'));

				
				if($pdfname == "verordnungtp")
				{
					$pdf->SetAutoPageBreak(true, 0);
					
// 					$pdf->SetFont('', '', 10);
					
				}
				//$tmpstmp = uniqid(time());
				$tmpstmp = substr(md5(time() . rand(0, 999)), 0, 12);
				
				//mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH . '/' . $tmpstmp);
				//$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$pdf->Output(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');

				//die(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);

				//moved from sapvfb8_paging.html
				unset($_SESSION['final1'], $_SESSION['final2'], $_SESSION['final3'], $_SESSION['final4'], $_SESSION['final5'], $_SESSION['final6'], $_SESSION['final7'], $_SESSION['final8'], $_SESSION['final9'], $_SESSION['final10'], $_SESSION['final11']);
				
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();

				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				
				
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads");

				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($navnames[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();
				$recordid = $cust->id;

				if($pdfname == "verordnungtp")
				{
					//insert system file tags
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('5'));
				}
				else if($pdfname == "Stammblatt")
				{
					//insert system file tags
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('8'));
				}

				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
				$cust->user_id = $logininfo->userid;
				$cust->save();

				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				$_SESSION['filename'] = "";
				unset($_SESSION['filename']);
				exit;
			}
		}

		
		
		private function generateformPdfOld($chk, $post, $pdfname, $filename)
		{	
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$post = Pms_CommonData::clear_pdf_data($post, array('patient_name'));
			$post['ipid'] = Pms_CommonData::getIpid($decid);

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$post['patientname'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']) . "<br>" . htmlspecialchars($parr['street1']) . "<br>" . htmlspecialchars($parr['zip']) . "&nbsp;" . htmlspecialchars($parr['city']);

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);

			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['clientname'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];

			$post['sapsymp'] = Sapsymptom::get_patient_sapvsymptom(Pms_CommonData::getIpid($decid));

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$post['bdate'] = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$post['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$post['insurance_status'] = $healthinsu_array[0]['insurance_status'];

			$hquery = Doctrine_Query::create()
				->select('*')
				->from('HealthInsurance')
				->where("id='" . $healthinsu_array[0]['companyid'] . "' or name='" . htmlentities($healthinsu_array[0]['company_name'], ENT_QUOTES) . "'");
			$hexec = $hquery->execute();
			$harray = $hexec->toArray();
			$post['kvnumber'] = $harray[0]['kvnumber'];

			/* analage3 */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$post['tablepatientinfo'] = Pms_Template::createTemplate($parr, 'templates/pdfprofile.html');
			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");

			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);

			$pdf = new Pms_TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
			// set document information
			$pdf->SetCreator('IPSC');
			$pdf->SetAuthor('ISPC');
			$pdf->SetTitle('ISPC');
			$pdf->SetSubject('ISPC');
			$pdf->SetKeywords('ISPC');
			// set default header data
			$pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);
			// set header and footer fonts
			$pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
			$pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
			// set default monospaced font
			$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
			//set margins
			
			$pdf->SetMargins(30, 10, 30);
			$pdf->setPrintHeader(false);
			$pdf->setPrintFooter(false);
			$pdf->SetHeaderMargin(10);
			$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
			//set auto page breaks
			$pdf->SetAutoPageBreak(TRUE, 10);
			//set image scale factor
			$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
			//set some language-dependent strings
			$pdf->setLanguageArray('de');
			// set font
			$pdf->SetFont('times', '', 10);
			// add a page
			$pdf->AddPage('P', 'A4');
			//print_r($htmlform); exit;
			$pdf->writeHTML($htmlform, true, 0, true, 0);

			if($chk == 1)
			{
				$tmpstmp = uniqid(time());
				//mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH . '/' . $tmpstmp);
				//$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$pdf->Output(PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
				
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', "uploads" );
			}
 
			if($chk == 2)
			{
				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'I');
				exit;
			}

			if($chk == 3)
			{

				$navnames = array("SAPV_fanfrage" => $this->view->translate('sapv_fanfrage'),
					"Uberleitungsbogen" => $this->view->translate('uberleitungsbogen'),
					"Verordnung" => $this->view->translate('verordnung'),
					"verordnungtp" => $this->view->translate('verordnungtp'),
					"verordnungtpside" => $this->view->translate('verordnungtpside'),
					"munster4" => $this->view->translate('munster4'),
					"Palliativ_versorgung_a7" => $this->view->translate('palliativ_versorgung_a7'),
					"folgeverordnung" => $this->view->translate('folgeverordnung'),
					"Form_one" => $this->view->translate('form_one'),
					"Form_two" => $this->view->translate('form_two'),
					"Anlage_4(Teil 1)" => $this->view->translate('anlage_4teil'),
					"Anlage4wl" => $this->view->translate('Anlage 4 WL'),
					"formthree" => $this->view->translate('formthree'),
					"Stammblatt" => $this->view->translate('stammblatt'),
					"hopeform" => $this->view->translate('hopeform'),
					"formfour" => $this->view->translate('formfour'),
					"formfive" => $this->view->translate('formfive'),
					"SAPVF_B3" => $this->view->translate('sapvf_b3'),
					"SAPVF_B4" => $this->view->translate('sapvf_b4'),
					"SAPVF_B5" => $this->view->translate('sapvf_b5'),
					"SAPVF_B12" => $this->view->translate('sapvf_b12'),
					"SAPVF_B8" => $this->view->translate('sapvf_b8'));

				
				if($pdfname == "verordnungtp")
				{
					$pdf->SetAutoPageBreak(true, 0);
					
// 					$pdf->SetFont('', '', 10);
					
				}
				//$tmpstmp = uniqid(time());
				$tmpstmp = substr(md5(time() . rand(0, 999)), 0, 12);
				
				//mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH . '/' . $tmpstmp);
				//$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$pdf->Output(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');

				//die(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);

				//moved from sapvfb8_paging.html
				unset($_SESSION['final1'], $_SESSION['final2'], $_SESSION['final3'], $_SESSION['final4'], $_SESSION['final5'], $_SESSION['final6'], $_SESSION['final7'], $_SESSION['final8'], $_SESSION['final9'], $_SESSION['final10'], $_SESSION['final11']);
				
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();

				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				
				
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads");

				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($navnames[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();
				$recordid = $cust->id;

				if($pdfname == "verordnungtp")
				{
					//insert system file tags
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('5'));
				}
				else if($pdfname == "Stammblatt")
				{
					//insert system file tags
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('8'));
				}

				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
				$cust->user_id = $logininfo->userid;
				$cust->save();

				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				exit;
			}
		}

		private function generateanalagethreePdf($chk, $post, $pdfname, $filename)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
			$post = Pms_CommonData::clear_pdf_data($post);
			$post['patientname'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']) . "<br />" . htmlspecialchars($parr['street1']) . "<br />" . htmlspecialchars($parr['zip']) . "&nbsp;" . htmlspecialchars($parr['city']);

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
				$post['lastname'] = $loguserarray['last_name'];
				$post['firstname'] = $loguserarray['first_name'];
			}

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$post['bdate'] = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);
			$post['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$post['insurance_status'] = $healthinsu_array[0]['insurance_status'];
			$post['kvnumber'] = $healthinsu_array[0]['kvk_no'];
			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['clientname'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];
			$post['cityofclient'] = $clientdata[0]['city'];
			$post['client_name'] = $clientdata[0]['client_name'];
			$post['client_team_name'] = $clientdata[0]['team_name'];

			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);
			
			$pdf = new Pms_TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
			// set document information
			$pdf->SetCreator('IPSC');
			$pdf->SetAuthor('ISPC');
			$pdf->SetTitle('ISPC');
			$pdf->SetSubject('ISPC');
			$pdf->SetKeywords('ISPC');
			// set default header data
			$pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);
			// set header and footer fonts
			$pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
			$pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
			// set default monospaced font
			$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
			//set margins
			$pdf->SetMargins(30, 10, 30);
			$pdf->setPrintHeader(false);
			$pdf->setPrintFooter(false);
			$pdf->SetHeaderMargin(10);
			$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
			//set auto page breaks
			$pdf->SetAutoPageBreak(TRUE, 10);
			//set image scale factor
			$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
			//set some language-dependent strings
			$pdf->setLanguageArray('de');
			// set font
			$pdf->SetFont('times', '', 10);
			// add a page
			$pdf->AddPage('P', 'A4');
//		echo $htmlform;
//		exit;
			$pdf->writeHTML($htmlform, true, 0, true, 0);

			if($chk == 3)
			{
				$nav_ary = array('Anlage_3' => 'Teilnahmeerklärung (Anlage 3)', 'Anlage_3a' => 'Stammdatenblatt für den PKD (Anlage 3a)', 'Anlage4wl' => 'Anlage 4WL', 'Anlage4awl' => 'Anlage 4aWL', 'Einverständniserklarung' => 'Einverständniserklärung', 'Anlage4a2wl' => 'Anlage 4 a II' , 'Anlage4b' => 'Anlage 4b');
				$tmpstmp = uniqid(time());;
				mkdir(PDF_PATH. "/" . $tmpstmp);
				$pdf->Output(PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
				
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData::ftp_put_queue (PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				
				

				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($nav_ary[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();
				$recordid = $cust->id;

				if($pdfname == "Anlage4wl")
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("anlage4wl");
					$cust->user_id = $userid;
					$cust->save();
				}
				else if($pdfname == "Anlage4awl")
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("anlage4awl");
					$cust->user_id = $userid;
					$cust->save();
				}

				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');

				exit;
			}
			else
			{

				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				exit;
			}
		}

		private function generatereportanalage4awl2Pdf($chk, $post, $pdfname, $filename)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['clientname'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];
			$post['cityofclient'] = $clientdata[0]['city'];
			$post['client_name'] = $clientdata[0]['client_name'];
			$post['client_team_name'] = $clientdata[0]['team_name'];

			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);

			$pdf = new Pms_TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
			// set document information
			$pdf->SetCreator('IPSC');
			$pdf->SetAuthor('ISPC');
			$pdf->SetTitle('ISPC');
			$pdf->SetSubject('ISPC');
			$pdf->SetKeywords('ISPC');
			// set default header data
			$pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);
			// set header and footer fonts
			$pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
			$pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
			// set default monospaced font
			$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
			//set margins
			$pdf->SetMargins(30, 10, 30);
			$pdf->setPrintHeader(false);
			$pdf->setPrintFooter(false);
			$pdf->SetHeaderMargin(10);
			$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
			//set auto page breaks
			$pdf->SetAutoPageBreak(TRUE, 10);
			//set image scale factor
			$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
			//set some language-dependent strings
			$pdf->setLanguageArray('de');
			// set font
			$pdf->SetFont('times', '', 10);
			// add a page
			$pdf->AddPage('P', 'A4');
//		echo $htmlform;
//		exit;
			$pdf->writeHTML($htmlform, true, 0, true, 0);

			if($chk == 3)
			{
				$nav_ary = array('Anlage_3' => 'Teilnahmeerklärung (Anlage 3)', 'Anlage_3a' => 'Stammdatenblatt für den PKD (Anlage 3a)', 'Anlage4wl' => 'Anlage 4WL', 'Anlage4awl' => 'Anlage 4aWL', 'Einverständniserklarung' => 'Einverständniserklärung');
				$tmpstmp = uniqid(time());
// 				mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH. "/" . $tmpstmp);
// 				$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$pdf->Output(PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', "uploads" );
				
				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($nav_ary[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();

				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				exit;
			}
			else
			{
				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				exit;
			}
		}

		public function updatepatientinfo170120Action()
		{
			if($_GET['fldname'] == "living_will_from" && $_GET['modname'] == "Master")
			{
				$_GET['chkval'] = date("Y-m-d", strtotime($_GET['chkval']));
			}

			$this->_helper->viewRenderer('patientdetails');
			/* 
			@TODO ? modify this and all the viewers to get only encrypted id ?
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			 */
			$ipid = Pms_CommonData::getIpid($_GET['patid']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			//stamdaten erweitert live update
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			$allowed_modnames = array("Familienstand", "Vigilanz", "Ernahrung", "Kunstliche", "Orientierung", "Sprachlich", "Ausscheidung", "Stastszugehorigkeit", "Hilfsmittel", "Wunsch");

			if(in_array($_GET['modname'], $allowed_modnames, true))
			{
				$stam = new Application_Form_Stammdatenerweitert();

				$a_post = $_GET;
				$a_post['ipid'] = $ipid;
				$stam->InsertStamdatenData($a_post);

				$response['msg'] = "Success";
				echo json_encode($response);
				exit;
			}
			elseif($_POST['modname'] != "VisitsSettings" )
			{
				//@TODO sanitize/verify all empty doctorsid we receive  50% is done allready in html, should re-verify here
				$pat = Doctrine::getTable('Patient' . $_GET['modname'] . '')->findBy('ipid', $ipid);
				$patarr = array();
				
				if($pat)
				{
					$patarr = $pat->toArray();
				}
			}
			
			if($_GET['modname'] == "MaintainanceStage" && $_GET['fldname'] != "erstantrag" && $_GET['fldname'] != "horherstufung")
			{
				$post = $_GET;
				$post['ipid'] = $ipid;
				$mainform = new Application_Form_PatientMaintainanceStage();
				$mainform->InsertData($post);

				$pms = new PatientMaintainanceStage();
				$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
				$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
				$carelevellist = $grid->renderGrid();

				$response['msg'] = "Success";
				$response['error'] = "";
				$response['callBack'] = "carediv";
				$response['callBackParameters'] = array();
				$response['callBackParameters']['carelist'] = $carelevellist;

				$history = new BoxHistory();
				$history->ipid = $ipid;
				$history->clientid = $clientid;
				$history->fieldname = $post['fldname'];
				$history->fieldvalue = $post['chkval'];
				$history->formid = $post['formid'];
				$history->save();
				echo json_encode($response);
				exit;
			}
			elseif($_GET['modname'] == "MaintainanceStage" && $_GET['fldname'] == "erstantrag")
			{
				$q = Doctrine_Query::create()
					->update('PatientMaintainanceStage')
					->set('erstantrag', '"' . $_GET['chkval'] . '"')
					->where("ipid='" . $ipid . "'")
					->andwhere('tilldate="0000-00-00"')
					->limit(1)
					->orderBy('id desc');
				$q->execute();
			}
			elseif($_GET['modname'] == "MaintainanceStage" && $_GET['fldname'] == "horherstufung")
			{
				$q = Doctrine_Query::create()
					->update('PatientMaintainanceStage')
					->set('horherstufung', '"' . $_GET['chkval'] . '"')
					->where("ipid='" . $ipid . "'")
					->andwhere('tilldate="0000-00-00"');
				$q->execute();
			}
			elseif($_POST['modname'] == "VisitsSettings" ){
				
				$result = PatientVisitsSettings :: setPatientVisitsSettings($ipid, $_POST);
	
				//@TODO box history done - just to verify it 
				if ($_POST['visitor_id'] != 0){
					$visit = "";
					if ($_POST['isdeleted'] == 1) {
						$fieldname="deleted";
					}
					else{
						$fieldname="update";
						foreach($_POST['visit'] as $day=>$val){
							if ($val=="") $val=0;
							$visit .= " ". date('l', strtotime("Sunday + $day Days")) .">". $val;
						}
					}
					$fieldvalue = $_POST['nice_user'] .$visit;					
				
					$history = new BoxHistory();
					$history->ipid = $ipid;
					$history->clientid = $clientid;
					$history->fieldname = $fieldname;//$_POST['isdeleted'];
					$history->fieldvalue = $fieldvalue;
					$history->formid = $_POST['formid'];
					$history->save();
				}
				
				echo json_encode($result);
				
				
				/* update autoassigned visits 
				 * 
				 * @TODO : this request is made via ajax, hence, triggering this next autoassign function here is prone to error
				 * we should solve this race-condition
				 */

				$dates = array();
				$time = strtotime('monday this week');

				$k=0;
				for ($i = 1; $i <= 7; $i++) {
					
					if ($_POST['isdeleted']==1 
							|| (($_POST['visitor_type'] == "user" || $_POST['visitor_type'] == "pseudogrups") 
									&& ( isset($_POST['visit'][$i]) || isset($_POST['visit'][($i-7)]) || isset($_POST['visit'][($i-14)]) ) ) ) 
					{
										
						$dates[$i] = date('Y-m-d', $time + (($i-1) * 86400));
						$dates[$i+7] = date('Y-m-d', $time + (($i+6) * 86400));
					
					}
				}
				$dates = array_unique($dates);
				asort($dates);
				
				foreach($dates as $date){
					DailyPlanningVisits::set_autoasign_visits_cronjob($clientid ,$date, $ipid);
				}
				
				
				
			}
			elseif(!in_array($_GET['modname'], $allowed_modnames, true))
			{
				if($_GET['fldname'] == "kontactnumber")
				{
					$pm_form = new Application_Form_PatientMaster();

					if(empty($_GET['chkval']))
					{
						$pm_form->DisableContactNumber(trim($_GET['formid']));
					}
					else
					{
						$pm_form->UpdateContactNumber(trim($_GET['chkval']), '1', trim($_GET['formid']));
					}
				}

				if($_GET['fldname'] == "living_will" && $_GET['stage'] != "")
				{
					$q = Doctrine_Query::create()
						->update('Patient' . $_GET['modname'] . '')
						->set('living_will_deposited', '""')
						->set('living_will_from', '""')
						->where("ipid='" . $ipid . "'");
					$q->execute();
				}

				if(count($patarr) > 0)
				{
					$q = Doctrine_Query::create()
						->update('Patient' . $_GET['modname'] . '')
						->set($_GET['fldname'], '"' . $_GET['chkval'] . '"')
						->where("ipid='" . $ipid . "'");
					$q->execute();

					if($_GET['fldname'] != "kontactnumber")
					{
						$history = new BoxHistory();
						$history->ipid = $ipid;
						$history->clientid = $clientid;
						$history->fieldname = $_GET['fldname'];
						$history->fieldvalue = $_GET['chkval'];
						$history->formid = $_GET['formid'];
						$history->save();
					}

					if($_GET['fldname'] == "peg" || $_GET['fldname'] == "port" || $_GET['fldname'] == "bed" || $_GET['fldname'] == "walker" || $_GET['fldname'] == "wheelchair" || $_GET['fldname'] == "goable" || $_GET['fldname'] == "nachtstuhl" || $_GET['fldname'] == "wechseldruckmatraze")
					{
						if($_GET['chkval'] == 0)
						{
							$q = Doctrine_Query::create()
								->update('Patient' . $_GET['modname'] . '')
								->set($_GET['fldname'] . 'more', "''")
								->where("ipid='" . $ipid . "'");
							$q->execute();

							$history = new BoxHistory();
							$history->ipid = $ipid;
							$history->clientid = $clientid;
							$history->fieldname = $_GET['fldname'] . 'more';
							$history->fieldvalue = $_GET['chkval'];
							$history->formid = $_GET['formid'];
							$history->save();
						}
					}

					if($_GET['modname'] == "Therapieplanung")
					{
						if($_GET['chkval'] != '0' && !empty($_GET['chkval']))
						{
							if($_GET['fldname'] == 'freetext' && !empty($_GET['chkval']))
							{
								$value = $_GET['chkval'];
							}
							else
							{
								$value = $this->view->translate($_GET['fldname']);
							}

							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Vorausschauende Therapieplanung: " . $value . ""));
							$cust->user_id = $logininfo->userid;
							$cust->save();
						}
					}
				}
				else
				{
					if($_GET['modname'] != "VisitsSettings")
					{
						$tblname = 'Patient' . $_GET['modname'];
						$nm = new $tblname();
						$nm->$_GET['fldname'] = $_GET['chkval'];
						$nm->ipid = $ipid;
						$nm->save();
					}
					elseif($_GET['modname'] == "VisitsSettings" && $_GET['fldname'] == "visits_per_day")
					{
						$nm = new PatientVisitsSettings;
						$nm->visits_per_day = $_GET['chkval'];
						$nm->visit_duration = "60";
						$nm->ipid = $ipid;
						$nm->save();
					}
					elseif($_GET['modname'] == "VisitsSettings" && $_GET['fldname'] == "visit_duration")
					{
						$nm = new PatientVisitsSettings;
						$nm->visit_duration = $_GET['chkval'];
						$nm->visits_per_day = "1";
						$nm->ipid = $ipid;
						$nm->save();
					}elseif($_GET['modname'] == "VisitsSettings" )
					{
						//die("ssssssssssssssssssss");
					}

					$history = new BoxHistory();
					$history->ipid = $ipid;
					$history->clientid = $clientid;
					$history->fieldname = $_GET['fldname'];
					$history->fieldvalue = $_GET['chkval'];
					$history->formid = $_GET['formid'];
					$history->save();

					if($_GET['modname'] == "Therapieplanung")
					{
						if($_GET['chkval'] != '0' && !empty($_GET['chkval']))
						{
							if($_GET['fldname'] == 'freetext' && !empty($_GET['chkval']))
							{
								$value = $_GET['chkval'];
							}
							else
							{
								$value = $this->view->translate($_GET['fldname']);
							}

							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Vorausschauende Therapieplanung: " . $value . ""));
							$cust->user_id = $logininfo->userid;
							$cust->save();
						}
					}
				}
			}
			exit;
		}

		
		
		public function updatepatientinfoAction()
		{
			$pat = array();
			$pat_obj = null; // this will be a reference to saved data
			
			if($_GET['fldname'] == "living_will_from" && $_GET['modname'] == "Master")
			{
				$_GET['chkval'] = date("Y-m-d", strtotime($_GET['chkval']));
			}

			$this->_helper->viewRenderer('patientdetails');

			$decid = Pms_Uuid::decrypt($_REQUEST['patid']);
			$ipid = Pms_CommonData::getIpid($decid);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			//stamdaten erweitert live update
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			$allowed_modnames = array("Familienstand", 
			    "Vigilanz", 
			    "Ernahrung", 
			    "Kunstliche", 
			    "Orientierung", 
			    "Sprachlich", 
			    "Ausscheidung", 
			    "Stastszugehorigkeit", 
			    "Hilfsmittel", 
			    "Wunsch",
			);
            
			//for this modules no need to pre-fetch old data, all logic will be done in the elseif()
			$modnames_manual_ops = array(
			    'Location',
			    'VisitsSettings',
			    'Orientation2',  // this is Orientation II
			    'Mobility2', // this is Mobility II
			);
			
			if(in_array($_GET['modname'], $allowed_modnames, true))
			{
				if($_GET['modname'] == 'Ausscheidung' && $_GET['formid'] == 'grow100')
				{
					/* $ausscheidungarr = array(
							'4' => 'DK',
							'5' => 'SPF'
					); */
						
						$client_artificial_settings = ArtificialEntriesExitsListTable::getInstance()->findByClientid($clientid, Doctrine_Core::HYDRATE_ARRAY);
						//$patartset = PatientArtificialEntriesExitsTable::getInstance()->findByIpid($ipid, Doctrine_Core::HYDRATE_ARRAY);
						//$client_set_attached = array_unique(array_column($patartset, 'option_id'));
					
						if($_GET['chkval'])
						{
							
							foreach($client_artificial_settings as $kr => $vr)
							{
								if(!empty($vr['old_name']))
								{
									$old_array = array_values($vr['old_name']);
										
									if(array_key_exists('Ausscheidung', $vr['old_name']) && substr($_GET['fldname'], -1) == $old_array[0])
									{
										$data_art = array(
												'option_id' => $vr['id'],
												'option_date' => date('Y-m-d H:i:s', time()),
												'option_localization' => '',
										);
											
										$entity = PatientArtificialEntriesExitsTable::getInstance()->createIfNotExistsOneBy(array('id', 'ipid'), array(null, $ipid), $data_art);
											
										break;
					
									}
								}
							}
								
						}
						else
						{
							foreach($client_artificial_settings as $kr => $vr)
							{
								if(!empty($vr['old_name']))
								{
									$old_array = array_values($vr['old_name']);
									if(array_key_exists('Ausscheidung', $vr['old_name']) && substr($_GET['fldname'], -1) == $old_array[0])
									{
					
										$entity = PatientArtificialEntriesExitsTable::getInstance()->findOneByIpidAndOptionIdAndIsremove($ipid, $vr['id'], '0', Doctrine_Core::HYDRATE_RECORD);
										if($entity)
										{
											$entity->isremove = 1;
											$entity->option_localization = '';
											$entity->remove_date = date('Y-m-d H:i:s', time());
											$entity->save();
										}
										break;
									}
								}
							}
						}
					
				}
				else 
				{
					$stam = new Application_Form_Stammdatenerweitert();
	
					$a_post = $_GET;
					$a_post['ipid'] = $ipid;
					$stam->InsertStamdatenData($a_post);
				}

				$response['msg'] = "Success";
				echo json_encode($response);
				exit;
			}
			elseif( ! in_array($_REQUEST['modname'], $modnames_manual_ops))
			{
				//@TODO sanitize/verify all empty doctorsid we receive  50% is done allready in html, should re-verify here
				$pat = Doctrine::getTable('Patient' . $_GET['modname'] . '')->findBy('ipid', $ipid);
				
				$pat_obj = &$pat; //att by reference
				
				$patarr = array();
				
				if($pat)
				{
					$patarr = $pat->toArray();
				}
			}
// 			print_r($patarr); exit;
			if($_GET['modname'] == "MaintainanceStage" && $_GET['fldname'] != "erstantrag" && $_GET['fldname'] != "horherstufung")
			{
				$post = $_GET;
				$post['ipid'] = $ipid;
				$mainform = new Application_Form_PatientMaintainanceStage();
				$mainform->InsertData($post);

				$pms = new PatientMaintainanceStage();
				$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
				$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
				$carelevellist = $grid->renderGrid();

				$response['msg'] = "Success";
				$response['error'] = "";
				$response['callBack'] = "carediv";
				$response['callBackParameters'] = array();
				$response['callBackParameters']['carelist'] = $carelevellist;

				$history = new BoxHistory();
				$history->ipid = $ipid;
				$history->clientid = $clientid;
				$history->fieldname = $post['fldname'];
				$history->fieldvalue = $post['chkval'];
				$history->formid = $post['formid']; //grow7
				$history->save();
				echo json_encode($response);
				exit;
			}
			elseif($_GET['modname'] == "MaintainanceStage" && $_GET['fldname'] == "erstantrag")
			{
				/* $q = Doctrine_Query::create()
					->update('PatientMaintainanceStage')
					->set('erstantrag', '?', $_GET['chkval'])
					->where("ipid= ?", $ipid)
					->andwhere('tilldate="0000-00-00"')
					->limit(1)
					->orderBy('id desc');
				$q->execute(); */
				
				$pms =  new PatientMaintainanceStage();
				$current_pms = $pms->getLastpatientMaintainanceStage($ipid);
				
				if( ! empty($current_pms)){
					$dg = Doctrine::getTable('PatientMaintainanceStage')->find($current_pms[0]['id']);
					$dg->erstantrag = $_GET['chkval'];
					if($_GET['chkval'] == "1"){
						$dg->e_fromdate = date('Y-m-d');
					} else{
						$dg->e_fromdate = "0000-00-00";
					}
					$dg->save();
				}
				
			}
			elseif($_GET['modname'] == "MaintainanceStage" && $_GET['fldname'] == "horherstufung")
			{
				/* $q = Doctrine_Query::create()
					->update('PatientMaintainanceStage')
					->set('horherstufung','?', $_GET['chkval'])
					->where("ipid= ?", $ipid)
					->andwhere('tilldate="0000-00-00"');
				$q->execute(); */
				

				$pms =  new PatientMaintainanceStage();
				$current_pms = $pms->getLastpatientMaintainanceStage($ipid);
				
				if( ! empty($current_pms)){
					$dg = Doctrine::getTable('PatientMaintainanceStage')->find($current_pms[0]['id']);
					$dg->horherstufung = $_GET['chkval'];
					if($_GET['chkval'] == "1"){
						$dg->h_fromdate = date('Y-m-d');
					} else{
						$dg->h_fromdate = "0000-00-00";
					}
					$dg->save();
				}
			}
			elseif($_POST['modname'] == "VisitsSettings" ){
				
				$result = PatientVisitsSettings :: setPatientVisitsSettings($ipid, $_POST);
	
				//@TODO box history done - just to verify it 
				if ($_POST['visitor_id'] != 0){
					$visit = "";
					if ($_POST['isdeleted'] == 1) {
						$fieldname="deleted";
					}
					else{
						$fieldname="update";
						foreach($_POST['visit'] as $day=>$val){
							if ($val=="") $val=0;
							$visit .= " ". date('l', strtotime("Sunday + $day Days")) .">". $val;
						}
					}
					$fieldvalue = $_POST['nice_user'] .$visit;					
				
					$history = new BoxHistory();
					$history->ipid = $ipid;
					$history->clientid = $clientid;
					$history->fieldname = $fieldname;//$_POST['isdeleted'];
					$history->fieldvalue = $fieldvalue;
					$history->formid = $_POST['formid'];
					$history->save();
				}
				
				echo json_encode($result);
				
				
				/* update autoassigned visits 
				 * 
				 * @TODO : this request is made via ajax, hence, triggering this next autoassign function here is prone to error
				 * we should solve this race-condition
				 */

				$dates = array();
				$time = strtotime('monday this week');

				$k=0;
				for ($i = 1; $i <= 7; $i++) {
					
					if ($_POST['isdeleted']==1 
							|| (($_POST['visitor_type'] == "user" || $_POST['visitor_type'] == "pseudogrups") 
									&& ( isset($_POST['visit'][$i]) || isset($_POST['visit'][($i-7)]) || isset($_POST['visit'][($i-14)]) ) ) ) 
					{
										
						$dates[$i] = date('Y-m-d', $time + (($i-1) * 86400));
						$dates[$i+7] = date('Y-m-d', $time + (($i+6) * 86400));
					
					}
				}
				$dates = array_unique($dates);
				asort($dates);
				
				foreach($dates as $date){
					DailyPlanningVisits::set_autoasign_visits_cronjob($clientid ,$date, $ipid);
				}
				
				
				
			}
			//ISPC-2056 ACP #grow6
			elseif ($_GET['modname'] == "Acp"){
							
				$division_tab = $_GET['division_tab'];
				
				$row_found = false;
				
				//$pat_obj is on top
				if ($pat_obj instanceof Doctrine_Collection ) 
				foreach ( $pat_obj->getIterator() as $i => $item) {
					if ( $item->division_tab == $division_tab) {
						//update this row, no need for a new one
						$existing_contact_person = $item->contactperson_master_id;
						$row_found = true;
						if (isset($item->{$_GET['fldname']} )) {
							$item->{$_GET['fldname']} = $_GET['chkval'];
							$item->save();
						}
					} 	
				}
				
				
				if ( ! $row_found ) {
					//nothing saved yet for this ipid+division_tab
					//insert new
					$tableClass= "Patient" . $_GET['modname'];// = PatientAcp
					$new_obj = new $tableClass;
					$last_id = $new_obj->set_new_record(array(
							'ipid' => $ipid,
							'division_tab' => $division_tab,
							$_GET['fldname'] => $_GET['chkval']
					));
				}
				
				// update contact master
				if($_GET['fldname'] == "contactperson_master_id" && $division_tab == "healthcare_proxy"){
					$q = Doctrine_Query::create()
					->update('ContactPersonMaster')
					->set('cnt_hatversorgungsvollmacht', 0)
					->where("ipid= ?", $ipid)
					->execute();
						
					if($_GET['chkval'] > 0 ){
						$q = Doctrine_Query::create()
						->update('ContactPersonMaster')
						->set('cnt_hatversorgungsvollmacht', 1)
						->where("id= ?", $_GET['chkval'])
						->andWhere("ipid= ?", $ipid)
						->execute();
					}
					
				}

				//save box history
				$history = new BoxHistory();
				$history->ipid = $ipid;
				$history->clientid = $clientid;
				$history->fieldname = json_encode(array( "division_tab"=>$division_tab, 'fieldname'=>$_GET['fldname']));
				$history->fieldvalue = $_GET['chkval'];
				$history->formid = "grow6"; // - fixing the $_GET['formid'] . "new"; //appended "new" at the end to differentiate from the old box
				$history->save();
				
				$this->_helper->json->sendJson(array(
						'msg'		=> "Success", 
						'formid'	=> $_GET['formid'],
						
				));
				exit;// for readability
				
			}
			elseif ($_GET['modname'] == "Orientation2") {
			   
			    $pat_o  = new PatientOrientation();
			    
			    //this was initially 6 radios with 3 checkboxes
// 			    if ($_GET['chkval'] && array_key_exists($_GET['fldname'],  $pat_o->getDefaultOrientation())) { 
// 			        //radio
			         
// 			        //hardDelete all old ones
// 			        Doctrine_Query::create()->delete('PatientOrientation')
// 			        ->where('ipid = ?', $ipid)
// 			        //->andWhereIn('orientation', array_keys($pat_o->getDefaultOrientation()))//do not delete subgroups?
// 			        ->execute();
			        
// 			        //set this new value
// 			        $pat_o->getTable()->create(array('ipid' => $ipid, 'orientation' => $_GET['fldname']))->save();
			        
// 			    } elseif (array_key_exists($_GET['fldname'],  $pat_o->getDefaultCommunicationRestricted())) { 
// 			        //checkbox
			        
// 			        if ($_GET['chkval']) { // add new value
// 			            $pat_o->getTable()->create(array('ipid' => $ipid, 'orientation' => $_GET['fldname']))->save();
// 			        } else { //delete old value
// 			            Doctrine_Query::create()->delete('PatientOrientation')
// 			            ->where('ipid = ?', $ipid)->andWhere('orientation = ?', $_GET['fldname'])
// 			            ->execute();
// 			        }
// 			    }
			    
			    //modified from radios to all checkboxes logic
			    if ($_GET['chkval'] ) {
			        //insert
			        $pat_o->findOrCreateOneByIpidAndOrientation($ipid, $_GET['fldname'], array());			        
			    } else {
			        //delete
			        $orientation2del =  array($_GET['fldname']);
			        
			        //if you deleted 'communication restricted', then also delete the sub-checboxes
			        if ($_GET['fldname'] == 'communication restricted') {
			            $com_res_arr = $pat_o->getDefaultCommunicationRestricted();
			            $orientation2del = array_merge($orientation2del, array_keys($com_res_arr));
			        }
			        
			        $pat_o->getTable()->createQuery()
			        ->delete()
			        ->where('ipid = ?', $ipid)
			        ->andWhereIn('orientation', $orientation2del)
			        ->execute();
			    }
			    
			    
			    
			    //save box history
			    $history = new BoxHistory();
			    $history->ipid = $ipid;
			    $history->clientid = $clientid;
			    $history->fieldname = $_GET['fldname'];
			    $history->fieldvalue = $_GET['chkval'];
			    $history->formid = "grow54";//$_GET['formid'] ;- fixing the Orientation2 = grow171120
			    $history->save();
			    
			    $this->_helper->json->sendJson(array(
			        'msg'		=> "Success",
			        'formid'	=> $_GET['formid'],
			    
			    ));
			    exit;// for readability
			    
			}
			elseif ( $_GET['modname'] == "Mobility2") {
			    
			    
			    if ($_GET['chkval']) { // add new value
			        $pat_m  = new PatientMobility2();
			        $pat_m->getTable()->create(array('ipid' => $ipid, 'selected_value' => $_GET['fldname']))->save();
			    } else { //hardDelete old value
			        Doctrine_Query::create()->delete('PatientMobility2')
			        ->where('ipid = ?', $ipid)->andWhere('selected_value = ?', $_GET['fldname'])
			        ->execute();
			    }
			    
			    //save box history
			    $history = new BoxHistory();
			    $history->ipid = $ipid;
			    $history->clientid = $clientid;
			    $history->fieldname = $_GET['fldname'];
			    $history->fieldvalue = $_GET['chkval'];
			    $history->formid = 'grow55'; //$_GET['formid'] ; - fixing the Mobility2 = grow171121
			    $history->save();
			     
			    $this->_helper->json->sendJson(array(
			        'msg'		=> "Success",
			        'formid'	=> $_GET['formid'],
			         
			    ));
			    exit;// for readability
			}
			elseif ($_GET['modname'] == "Location") {			    
			    //ispc-2045 update PatientLocation ->is_contact => contact_phone
			    //$pat_obj is on top
			    
			    $last_location = PatientLocation::getIpidLastLocationDetails($ipid, true);
			    
		        if ($last_location && $last_location->count() // hmm.. count on null will be fun 
		            && ($last_location->valid_till == '0000-00-00 00:00:00' 
		                || Pms_CommonData::isToday($last_location->valid_till) 
		                || Pms_CommonData::isFuture($last_location->valid_till))) 
		        {
		            //current_location is valid
		            $last_location->is_contact = (int)$_GET['chkval'];
		            $last_location->save(); 
		        } else {
		            /**
		             * TODO : a cronjob that should remove the contact-phone when location auto-expires
		             * we have a valid contact_phone for a location if the location's valid_till > CURRENT_TIMESTAMP 
		             * other old-invalid locations can only be disabled
		             * 
		             * TODO: this logic was NOT implemented in the listener
		             */
		            //we can only disable the contact_phone and set this as is_contact for future location updates/insert to work
		            if ((int)$_GET['chkval'] == 1) { //bypass listener
		                $pl_obj = new PatientLocation();
		                $listenerChain = $pl_obj->getListener();
		                $i = 0;
		                //i should have given the listeners a name... 
		                while ($listener = $listenerChain->get($i))
		                {
		                    if ($listener instanceof PatientContactPhoneListener)
		                    {
		                        $listener->setOption('disabled', true);
		                        break;
		                    }
		                    $i++;
		                }
		            }
		            $last_location->is_contact = (int)$_GET['chkval'];
		            $last_location->save();
		        }
			        
			}
			elseif(!in_array($_GET['modname'], $allowed_modnames, true))
			{
				/*
				//disabled by adding the ispc-2045
			    if($_GET['fldname'] == "kontactnumber")
				{
					$pm_form = new Application_Form_PatientMaster();

					if(empty($_GET['chkval']))
					{
						$pm_form->DisableContactNumber(trim($_GET['patid']) , 'location');
					}
					else
					{
						$pm_form->UpdateContactNumber(trim($_GET['chkval']), '1', trim($_GET['patid']) , 'location');
					}
				}
				*/

				if($_GET['fldname'] == "living_will" && $_GET['stage'] != "")
				{
					$q = Doctrine_Query::create()
						->update('Patient' . $_GET['modname'] . '')
						->set('living_will_deposited', '""')
						->set('living_will_from', '""')
						->where("ipid= ?", $ipid);
					$q->execute();
				}

				if(count($patarr) > 0)
				{
					if($_GET['modname'] == "Germination")
					{
						$pat_0 = $pat{0};
						$pat_0->{$_GET['fldname']} = $_GET['chkval'];
						$pat_0->save();
					}
					else {
						
						//ISPC-2508 Carmen 04.02.2020
					    //Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
						if($_GET['formid'] == 'grow100')
						{
							$moreinfoarr = array('peg', 'port', 'zvk', 'magensonde');
						
							if(in_array($_GET['fldname'], $moreinfoarr))
							{
								$client_artificial_settings = ArtificialEntriesExitsListTable::getInstance()->findByClientid($clientid, Doctrine_Core::HYDRATE_ARRAY);
								//$patartset = PatientArtificialEntriesExitsTable::getInstance()->findByIpid($ipid, Doctrine_Core::HYDRATE_ARRAY);
								//$client_set_attached = array_unique(array_column($patartset, 'option_id'));
								
								if($_GET['chkval'] == '1')
								{
									foreach($client_artificial_settings as $kr => $vr)
									{
										if(!empty($vr['old_name']))
										{
											$old_array = array_values($vr['old_name']);
											
											if($_GET['fldname'] == $old_array[0])
											{
										
													$data_art = array(
														'option_id' => $vr['id'],
														'option_date' => date('Y-m-d H:i:s', time()),
														'option_localization' => '',
													);
													
													$entity = PatientArtificialEntriesExitsTable::getInstance()->createIfNotExistsOneBy(array('id', 'ipid'), array(null, $ipid), $data_art);
													
												break;
												
											}
										}
									}
									
								}
								else 
								{
									foreach($client_artificial_settings as $kr => $vr)
									{
										if(!empty($vr['old_name']))
										{
											$old_array = array_values($vr['old_name']);
											if($_GET['fldname'] == $old_array[0])
											{	
												
												$entity = PatientArtificialEntriesExitsTable::getInstance()->findOneByIpidAndOptionIdAndIsremove($ipid, $vr['id'], '0', Doctrine_Core::HYDRATE_RECORD);
												if($entity)
												{
													$entity->isremove = 1;
													$entity->option_localization = '';
													$entity->remove_date = date('Y-m-d H:i:s', time());
													$entity->save();
												}
												break;
											}
										}
									}
								}
							}
							elseif($_GET['fldname'] == 'pegmore' || $_GET['fldname'] == 'portmore')
							{
								foreach($client_artificial_settings as $kr => $vr)
								{
									if(!empty($vr['old_name']))
									{
										$old_array = array_values($vr['old_name']);
										if(str_replace('more', '', $_GET['fldname']) == $old_array[0])
										{
								
											$entity = PatientArtificialEntriesExitsTable::getInstance()->findOneByIpidAndOptionId($ipid, $vr['id'], Doctrine_Core::HYDRATE_RECORD);
								
											if($entity)
											{
												$entity->option_localization = htmlspecialchars($_GET['chkval']);
												$entity->save();
											}
											break;
										}
									}
								}
							}
						}
						else 
						{						
							$q = Doctrine_Query::create()
								->update('Patient' . $_GET['modname'] . '')
								->set($_GET['fldname'], '?', $_GET['chkval'])
								->where("ipid= ?", $ipid);
							$q->execute();
						}
					}
					if($_GET['fldname'] != "kontactnumber")
					{
						$history = new BoxHistory();
						$history->ipid = $ipid;
						$history->clientid = $clientid;
						$history->fieldname = $_GET['fldname'];
						$history->fieldvalue = $_GET['chkval'];
						$history->formid = $_GET['formid'];
						$history->save();
					}

					if($_GET['fldname'] == "peg" || $_GET['fldname'] == "port" || $_GET['fldname'] == "bed" || $_GET['fldname'] == "walker" || $_GET['fldname'] == "wheelchair" || $_GET['fldname'] == "goable" || $_GET['fldname'] == "nachtstuhl" || $_GET['fldname'] == "wechseldruckmatraze")
					{
						//ISPC-2508 Carmen 04.02.2020
					    // Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
						if($_GET['formid'] != 'grow100')
						{
							if($_GET['chkval'] == 0)
							{
								$q = Doctrine_Query::create()
								->update('Patient' . $_GET['modname'] . '')
								->set($_GET['fldname'] . 'more', "''")
								->where("ipid= ?", $ipid);
								$q->execute();
							
								$history = new BoxHistory();
								$history->ipid = $ipid;
								$history->clientid = $clientid;
								$history->fieldname = $_GET['fldname'] . 'more';
								$history->fieldvalue = $_GET['chkval'];
								$history->formid = $_GET['formid'];
								$history->save();
							}
						}
					}

					if($_GET['modname'] == "Therapieplanung")
					{
						if($_GET['chkval'] != '0' && !empty($_GET['chkval']))
						{
							if($_GET['fldname'] == 'freetext' && !empty($_GET['chkval']))
							{
								$value = $_GET['chkval'];
							}
							else
							{
								$value = $this->view->translate($_GET['fldname']);
							}

							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Vorausschauende Therapieplanung: " . $value . ""));
							$cust->user_id = $logininfo->userid;
							$cust->save();
						}
					}
				}
				else
				{
					if($_GET['modname'] != "VisitsSettings" )
					{
						$tblname = 'Patient' . $_GET['modname'];
						$nm = new $tblname();
						$nm->{$_GET['fldname']} = $_GET['chkval'];
						$nm->ipid = $ipid;
						$nm->save();
					}
					elseif($_GET['modname'] == "VisitsSettings" && $_GET['fldname'] == "visits_per_day")
					{
						$nm = new PatientVisitsSettings;
						$nm->visits_per_day = $_GET['chkval'];
						$nm->visit_duration = "60";
						$nm->ipid = $ipid;
						$nm->save();
					}
					elseif($_GET['modname'] == "VisitsSettings" && $_GET['fldname'] == "visit_duration")
					{
						$nm = new PatientVisitsSettings;
						$nm->visit_duration = $_GET['chkval'];
						$nm->visits_per_day = "1";
						$nm->ipid = $ipid;
						$nm->save();
					}elseif($_GET['modname'] == "VisitsSettings" )
					{
						//die("ssssssssssssssssssss");
					}

					$history = new BoxHistory();
					$history->ipid = $ipid;
					$history->clientid = $clientid;
					$history->fieldname = $_GET['fldname'];
					$history->fieldvalue = $_GET['chkval'];
					$history->formid = $_GET['formid'];
					$history->save();

					if($_GET['modname'] == "Therapieplanung")
					{
						if($_GET['chkval'] != '0' && !empty($_GET['chkval']))
						{
							if($_GET['fldname'] == 'freetext' && !empty($_GET['chkval']))
							{
								$value = $_GET['chkval'];
							}
							else
							{
								$value = $this->view->translate($_GET['fldname']);
							}

							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Vorausschauende Therapieplanung: " . $value . ""));
							$cust->user_id = $logininfo->userid;
							$cust->save();
						}
					}
					echo json_encode(array('msg'=>"Success"));
				}
			}
			exit;
		}

		public function sapvfanfrageAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->bdate = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_com_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->insurance_status = $healthinsu_array[0]['insurance_status'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			/* ------------------------------------ Maindiagnosis---------------------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$this->view->relevante_diagnosen = $diagnosis;
			}
			else
			{
				$this->view->relevante_diagnosen = "";
			}

			/* --------------------------- Side and metasstasen ------------------------------- */
			$abb = "'ND'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($logininfo->clientid, $abb);

			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}

			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);

				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						if(strlen($val['icdnumber']) > 0)
						{
							$other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
						}
						else
						{
							$other_diagnosis .= $comma . $val['diagnosis'];
						}
						$dia++;
						$comma = ",";
					}
				}
			}

			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);

			if(count($metaids) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = ",";
				$metadiagnosis = "";
				foreach($metaids as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle)
					{
						$metadiagnosis .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			$this->view->relevante_nebendiagnosen = $other_diagnosis . $metadiagnosis;

			/* ---------------------------------------------------------------------- */
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);

			if($loguser)
			{
				$loguserarray = $loguser->toArray();

				$this->view->loginusername = $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
			}

			if($this->getRequest()->isPost())
			{

				$this->generateformPdf(3, $_POST, 'SAPVf_anfrage', "sapvf_anfragepdf.html");
			}
		}

		public function uberleitungsbogenAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'] . "\n" . $parr['street1'] . "\n" . $parr['zip'] . "&nbsp;" . $parr['city'];

			$familydoc = new FamilyDoctor();
			$fdocarray = $familydoc->getFamilyDoc($parr['familydoc_id']);
			$this->view->fdocfirstname = $fdocarray[0]['last_name'] . ", " . $fdocarray[0]['first_name'];
			$this->view->phonepractice = $fdocarray[0]['phone_practice'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$assignid = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where("epid = '" . $epid . "'");
			$assignidexec = $assignid->execute();
			$assignidarray = $assignidexec->toArray();

			$comma = ",";
			$userid = "'0'";
			foreach($assignidarray as $key => $val)
			{
				$userid.= $comma . "'" . $val['userid'] . "'";
				$comma = ",";
			}

			$assignuser = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('id in (' . $userid . ') and clientid=' . $logininfo->clientid)
				->andWhere('isdelete=0 and isactive=0');
			$assignuserexec = $assignuser->execute();
			$assignuserarray = $assignuserexec->toArray();

			$grid = new Pms_Grid($assignuserarray, 1, count($assignuserarray), "assignuseruberleitungsbogen.html");
			$this->view->assignedusersube = $grid->renderGrid();

			$grid_pdf = new Pms_Grid($assignuserarray, 1, count($assignuserarray), "assignuseruberleitungsbogen_pdf.html");
			$this->view->assignedusersube_pdf = $grid_pdf->renderGrid();

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->loginusername = $loguserarray['user_title'] . " " . $loguserarray['last_name'] . ", " . $loguserarray['first_name'] . "\n" . date('d.m.Y H:i:s');
			}

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->bdate = $patientinfo['birthd'];

			$recorduser = Doctrine::getTable('User')->find($patientinfo['create_user']);
			if($recorduser)
			{
				$recorduserarray = $recorduser->toArray();
				$this->view->fullname = $recorduserarray['user_title'] . " " . $recorduserarray['last_name'] . ", " . $recorduserarray['first_name'] . " | " . $patientinfo['admission_date'];
			}

			$patcont = new ContactPersonMaster();
			$patcontarray = $patcont->getPatientContact($patientinfo['ipid']);
			$this->view->contname = "";
			$this->view->familydegree = "";
			$this->view->mobile = "";
			$counter = 1;

			foreach($patcontarray as $key => $conval)
			{
				$this->view->contname .= '<tr><td><input name="cnt_name[' . $counter . ']" type="hidden" value="' . $conval['cnt_last_name'] . ', ' . $conval['cnt_first_name'] . '" />' . trim(htmlentities($conval['cnt_last_name'])) . ', ' . trim(htmlentities($conval['cnt_first_name'])) . '</td>';
				$familydegree = new FamilyDegree();
				$degreearray = $familydegree->getfamilydegreebyId($conval['cnt_familydegree_id']);

				$this->view->contname .= '<td>
	<input name="cnt_familydegree[' . $counter . ']" type="hidden" value="' . $patcontarray['cnt_familydegree_id'] . $degreearray[0]['family_degree'] . '" />
	' . trim(htmlentities($patcontarray['cnt_familydegree_id'] . $degreearray[0]['family_degree'])) . '&nbsp;</td>';
				$this->view->contname .= '<td>
	<input name="cnt_mobile[' . $counter . ']" type="hidden" value="' . $conval['cnt_phone'] . ', ' . $conval['cnt_mobile'] . '" />
	' . $conval['cnt_phone'] . ', ' . $conval['cnt_mobile'] . '</td></tr>';

				$counter++;
			}

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];

			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);

			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");

			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);

			$this->view->alone = $pat_lives[0]['alone'];
			$this->view->house_of_relatives = $pat_lives[0]['house_of_relatives'];
			$this->view->home = $pat_lives[0]['home'];

			$pm = new PatientMobility();
			$pat_mob = $pm->getpatientMobilityData($ipid);

			$ps = new PatientSupply();
			$pat_supply = $ps->getpatientSupplyData($ipid);

			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->pumpe = $pat_moreinfo[0]['pumps'];

			$pms = new PatientMaintainanceStage();
			$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
			if($pat_pmsinfo[0]['stage'] > 0)
			{

				$this->view->{"stage" . $pat_pmsinfo[0]['stage']} = $pat_pmsinfo[0]['stage'];
			}
			else
			{
				$this->view->keine = 1;
			}

			$qpa1 = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where("ipid='" . $ipid . "' and course_type='" . addslashes(Pms_CommonData::aesEncrypt('C')) . "'")
				->andWhere('source_ipid = ""');

			$qp1 = $qpa1->execute();
			if($qp1)
			{
				$newarr1 = $qp1->toArray();
			}

			$ctitle = "";
			$quama = "";
			for($i = 0; $i < count($newarr1); $i++)
			{
				$userarr = Pms_CommonData::getUserData($newarr1[$i]['create_user']);
				$username = $userarr[0]['user_title'] . " " . $userarr[0]['last_name'] . "," . $userarr[0]['first_name'];

				$createdate = date('d.m.Y', strtotime($newarr1[$i]['create_date']));
				$title = str_replace("<", "&lt;", $newarr1[$i]['course_title']);
				$title = str_replace(">", "&gt;", $title);
				$ctitle .= $quama . $username . " (" . $createdate . ") : " . $title;
				$quama = " <br> ";
				$this->view->ctexttitle .='<input name="course_data[' . $i . ']" type="hidden" value="' . $username . ' (' . $createdate . ') : ' . $title . '" />';
			}
			$this->view->coursedata = $ctitle;

			$abb = "'ND','AD','DD'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($clientid, $abb);

			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}

			foreach($ddarr as $key1 => $val1)
			{
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);

				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						$other_diagnosis .= '<input name="other_diagnosis[' . $dia . ']" type="hidden" value="' . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')" />
			 <div id="Pallnet_weiteDiasse_1" class="PalnetzShortTitle border_top">' . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')</div>';
						$dia++;
					}
				}
			}

			$this->view->other_diagnosis = $other_diagnosis;
			$pdm = new PatientDiagnosisMeta();
			$metaarr = $pdm->getPatientDiagnosismeta($ipid);

			$comma = ",";
			$ipidval = "'0'";
			if(is_array($metaarr))
			{
				foreach($metaarr as $key => $val)
				{
					$ipidval .= $comma . "'" . $val['metaid'] . "'";
					$comma = ",";
				}
			}

			$stam_diagno = array();
			$diagns = new PatientDiagnosis();
			$stam_diagno = $diagns->getPatientMainDiagnosis($ipid, "diagnosis_icd");

			$dd = new DiagnosisIcd();
			$ddarr = $dd->getDiagnosisDataById($stam_diagno[0]['diagnosis_id']);

			if($ddarr)
			{
				$this->view->maindiagnosis .= '<input name="maindiagnosis[' . ($i + 1) . ']" type="hidden" value="' . $ddarr[0]['description'] . '(' . $ddarr[0]['icd_primary'] . ')" />
		<div id="Pallnet_DieLeim_1" class="PalnetzShortTitle border_top"> ' . $ddarr[0]['description'] . '(' . $ddarr[0]['icd_primary'] . ')</div>';
			}

			$drugs = Doctrine_Query::create()
				->select('*')
				->from('DiagnosisMeta')
				->where("id in (" . $ipidval . ")");
			$dr = $drugs->execute();

			if($dr)
			{
				$diagnoarray = $dr->toArray();
				for($i = 0; $i < count($diagnoarray); $i++)
				{
					if($diagnoarray[$i]['meta_title'] == trim("Cerebrale Metastasierung"))
					{
						$this->view->cerel = 1;
					}

					if($diagnoarray[$i]['meta_title'] == trim("Pulmonale Metastasierung"))
					{
						$this->view->lunge = 1;
					}

					if($diagnoarray[$i]['meta_title'] == trim("Hepatische Metastasierung"))
					{
						$this->view->hepa = 1;
					}

					if($diagnoarray[$i]['meta_title'] == trim("Ossäre Metastasierung"))
					{
						$this->view->ossa = 1;
					}

					if($diagnoarray[$i]['meta_title'] == trim("Lokoregionäre  Metastasierung"))
					{
						$this->view->nerven = 1;
					}
				}
			}

			if($this->getRequest()->isPost())
			{
				$_POST['familydoc_name'] = $this->view->fdocfirstname;
				$_POST['familydoc_phone'] =  $this->view->phonepractice;
				$_POST['assignedusersube'] =  $this->view->assignedusersube_pdf;
				
				$this->generateformPdf(3, $_POST, 'Uberleitungsbogen', "uberleitungsbogenpdf.html");
			}
		}

		public function verordnungAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'] . "\n" . $parr['street1'] . "\n" . $parr['zip'] . "&nbsp;" . $parr['city'];
			$this->view->birthdate = $parr['birthd'];
			$this->view->patientname1 = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->patietnaddress = $parr['street1'] . "\n" . $parr['zip'] . "&nbsp;" . $parr['city'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];

			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);

			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$brenmber = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where("epid= ?", $epid);
			$bexec = $brenmber->execute();
			$barray = $bexec->toArray();

			$user = Doctrine::getTable('User')->find($logininfo->userid);

			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->arzt_nr = $uarray['LANR'];
			}

			/* ------------------------------------ Maindiagnosis---------------------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";

			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$this->view->relevante_Input = $diagnosis;
			}
			else
			{
				$this->view->relevante_Input = "";
			}

			/* --------------------------- Side and metasstasen ------------------------------- */
			$abb = "'ND'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($logininfo->clientid, $abb);

			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}

			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);

				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						if(strlen($val['icdnumber']) > 0)
						{
							$other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
						}
						else
						{
							$other_diagnosis .= $comma . $val['diagnosis'];
						}
						$dia++;
						$comma = ",";
					}
				}
			}

			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);

			if(count($metaids) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = ",";
				$metadiagnosis = "";
				foreach($metaids as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle)
					{
						$metadiagnosis .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			$this->view->relevanteNebendia_Input = $other_diagnosis . $metadiagnosis;

			/* ---------------------------------------------------------------------- */
			$pdrug = new PatientDrugPlan();
			$drugarray = $pdrug->getPatientDrugPlan($decid);

			$extra =  new PatientDrugPlanExtra();
			$extraarray = $extra->get_patient_drugplan_extra($ipid, $clientid);
			
			$previleges = new Modules();
			$modulepriv_med = $previleges->checkModulePrivileges("148", $logininfo->clientid);
			
			$comma = "";
			if($modulepriv_med)
			{
				foreach($drugarray as $key => $val)
				{
					$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
					
					if(!empty($medca))
					{
						$medcaarray = $medca->toArray();
					}
					if(strlen($extraarray[$val['id']]['drug']) > 0){
						$this->view->medication .= $comma . $medcaarray['name'] . " (" . $extraarray[$val['id']]['drug']. ")";
					} else{
						$this->view->medication .= $comma . $medcaarray['name'] . "";
					}
					$comma = ", ";
				}
			}
			else 
			{
				foreach($drugarray as $key => $val)
				{
					$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
					if(!empty($medca))
					{
						$medcaarray = $medca->toArray();
					}
					$this->view->medication .= $comma . $medcaarray['name'] . " | " . $val['dosage'];
					$comma = "\n";
				}
			}

			if($this->getRequest()->isPost())
			{
				$_POST['patient_name'] = nl2br($_POST['patient_name']);
				$this->generateformPdf(3, $_POST, 'Verordnung', "verordnungpdf.html");
			}
		}

		public function verordnungtpAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			
			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;

            //ISPC-2766,Elena,23.02.2021
            $sym_set_2 = [
                'Anwendung einer speziellen medikamentösen Kombinationstherapie',
                'kontrollierte Dosisanpassung unter engmaschiger Überwachung und Überprüfung der Medikamentenwirkung',
                'Aszitespunktion',
                'Pleurapunktion',
                'Durchführung von Verbandswechsel unter Verwendung spezieller Materialien',
                'Durchfühhrung von Verbandswechsel unter Anwendung einer Analgosedierung',
                'speziell geschulte Gesprächsführung bei ausgeprägter Angst und Panik',
                'vorausschauende Planung für Notfälle und kurzfristiger Intervention bei Krisen',
                'Etablierung der häuslichen Palliativversorgung',
                "Anleitung der Angehörigen",
                '24-h Rufbereitschaft',
                'Vermeidung von Klinikeinweisungen'
            ];
            $this->view->sym_set_2 = $sym_set_2;


            /* ------------------------------------------------------------------------------ */
			if($this->getRequest()->isPost())
			{
				$munster_form = new Application_Form_Munster();
				
				
				if($_POST['post_status'] == "reset"){
					
					// mark as completed the old entry
					$munster_form->mark_as_completed($_POST);
					
					if($_POST['stampusers'] > 0)
					{
						if($multiplestamps_option === true)
						{
					
							$stamp_info = explode('-', $_POST['stampusers']);
							$stamp_user = $stamp_info[0];
							$stamp_id = $stamp_info[1];
					
							$ustamp = new UserStamp();
							$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
					
							$_POST['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
							$_POST['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
						}
						else
						{
					
							$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
							if($userst)
							{
								$uarray = $userst->toArray();
								$_POST['arzt_nr'] = $uarray['LANR'];
								$_POST['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
							}
						}
					}
					
					
					$_POST['stamp_block'] = strip_tags(str_replace('<br/>', "\n", $_POST['stamp_block']));
					$_POST['patient_name'] = $_POST['patient_name'];
					
					// save pdf
					$this->generatePdfNew(4, $_POST, 'verordnungtp_save', "verordnungtppdf.html");
					
					// redirect to blank form
					$this->_redirect(APP_BASE . "patient/verordnungtp?id=" . $_GET['id']);
					exit;
				}
				else{
					if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) == '0')
					{
						$munster_save_data = $munster_form->insert_data($ipid, $_POST);
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
					else if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) > '0')
					{
						$munster_update_data = $munster_form->update_data($ipid,$_POST);
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}
			}

			/* ------------------------------------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'] . "\n" . $parr['street1'] . "\n" . $parr['zip'] . "&nbsp;" . $parr['city'];
			$this->view->birthdate = $parr['birthd'];
			$this->view->patientname1 = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->patietnaddress = $parr['street1'] . "&nbsp;" . $parr['zip'] . "\n" . $parr['city'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];

			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$brenmber = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where("epid='" . $epid . "'");
			$bexec = $brenmber->execute();
			$barray = $bexec->toArray();

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->arzt_nr = $uarray['LANR'];
			}

			/* ------------------- 	Maindiagnosis		------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$this->view->relevante_Input = $diagnosis;
			}
			else
			{
				$this->view->relevante_Input = '';
			}

			/* ---------------------------------------------------- */
			
			$previleges = new Modules();
			$modulepriv_med = $previleges->checkModulePrivileges("148", $logininfo->clientid);
				
			
			// Get medication + bedarfs medication
			$pdrug = new PatientDrugPlan();
			$drugarray = $pdrug->getPatientDrugPlan($decid);
			
			$comma = "";
			$comma2 = "";
			$medicationbedarfs="";
			$medication_iv="";
			$medication_smtz="";
			$medication= "";
			
			if($modulepriv_med){
				foreach($drugarray as $key => $val)
				{
					$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
					if(!empty($medca))
					{
						$medcaarray = $medca->toArray();
							
					}
				
					if($val['isbedarfs'] == '1')
					{
				
						$med_array['b_bedarf'] .= $comma2 . $medcaarray['name'];
						$comma2 = " | ";
					}
					else if($val['isivmed'] == '1')
					{
				
						$med_array['c_iv'] .= $comma2 . $medcaarray['name'] ;
						$comma2 = " | ";
					}
					else if($val['isschmerzpumpe'] == '1')
					{
				
						$med_array['d_sc'] .= $comma2 . $medcaarray['name'] ;
						$comma2 = " | ";
					}
					else
					{
						$med_array['a_med'] .= $comma . $medcaarray['name'];
						$comma = " | ";
					}
					ksort($med_array);
				}			
			}
			else
			{
				
			
				foreach($drugarray as $key => $val)
				{
					$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
					if(!empty($medca))
					{
						$medcaarray = $medca->toArray();
						
					}
					
					if($val['isbedarfs'] == '1')
					{	
					
						$med_array['b_bedarf'] .= $comma2 . $medcaarray['name'] . ", " . $val['dosage'];
						$comma2 = " | ";
					}
					else if($val['isivmed'] == '1')
					{	
					
						$med_array['c_iv'] .= $comma2 . $medcaarray['name'] . ", " . $val['dosage'];
						$comma2 = " | ";
					}
					else if($val['isschmerzpumpe'] == '1')
					{	
					
						$med_array['d_sc'] .= $comma2 . $medcaarray['name'] . ", " . $val['dosage'];
						$comma2 = " | ";
					}
					else
					{
						$med_array['a_med'] .= $comma . $medcaarray['name'] . ", " . $val['dosage'];
						$comma = " | ";
					}
					 ksort($med_array);
				}
			}
			
			
			foreach($med_array as $med_type){
				if(!empty($med_type)){
					$medicationverord_arr[]= $med_type;
				}
			}
			
			$medicationverord = implode("\n",$medicationverord_arr);
			
			$this->view->medication = $medicationverord;

			
			
			
			/* --------------------------------User select------------------------------------- */
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}

			$users = new User();
			$userarray = $users->getUserByClientid($logininfo->clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();

			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['user_title']) . " " .trim($user['last_name']) . ", " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;

			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				$showselect = 1; // show select to all
			}

			$this->view->showselect = $showselect;

			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);

			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;

			//get saved form data
			$munster = new Munster();
			$munster_data = $munster->get_munster_patient_data($ipid);
			$this->retainValues($munster_data);
			$this->view->bra_options = explode(',',$munster_data['bra_options']);

			
			/* -------------- Pain questionnaire file history	---------------------------- */
			$fileupload = new PatientFileUpload();
			$form_files = $fileupload->get_muster63_file_data($ipid);
			
			$users_ids[] = '9999999999';
			foreach($form_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}
			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			$this->view->muster_files_history = $form_files;
			
			/* -------------- Bra options	---------------------------- */
			$modules = new Modules();
			$bra_options_array = Pms_CommonData::get_bra_options_checkboxes();

// 			print_r($bra_options_array); exit;
			$bra_options_substitute = array(
			    "PCT03a" => "Arzt Teilvers. (PCT03a)",
			    "PCT04a" => "Arzt Vollvers. (PCT04a)",
			    "PCT03b" => "Pflege Teilvers. (PCT03b)",
			    "PCT04b" => "Pflege Vollvers. (PCT04b)",
			);
			
			foreach($bra_options_array as $bra_key =>$bra_value){
			    if(isset($bra_options_substitute[$bra_value])){
    			    $new_bra_options_array[$bra_key] = $bra_options_substitute[$bra_value];
			    } else{
    			    $new_bra_options_array[$bra_key] = $bra_value;
			    }
			}
			
			$this->view->bra_options_array = $new_bra_options_array;
			if($modules->checkModulePrivileges("97", $logininfo->clientid)) // Bra options
			{
				$sapv_bra_options = 1;
			}
			else
			{
				$sapv_bra_options = 0;
			}
			
			$this->view->sapv_bra_options = $sapv_bra_options;
			
			if($this->getRequest()->isPost())
			{
				if($_POST['stampusers'] > 0)
				{

					if($multiplestamps_option === true)
					{

						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);

						$_POST['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
						$_POST['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
					}
					else
					{

						$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
						if($userst)
						{
							$uarray = $userst->toArray();
							$_POST['arzt_nr'] = $uarray['LANR'];
							$_POST['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
						}
					}
				}

				$_POST['stamp_block'] = strip_tags(str_replace('<br/>', "\n", $_POST['stamp_block']));


				$_POST['patient_name'] = $_POST['patient_name'];
				$_POST['bra_options_array'] = $this->view->bra_options_array;

				$bra_options_substitute = array(
				    "PCT03a" => "Arzt Teilvers. (PCT03a)",
				    "PCT04a" => "Arzt Vollvers. (PCT04a)",
				    "PCT03b" => "Pflege Teilvers. (PCT03b)",
				    "PCT04b" => "Pflege Vollvers. (PCT04b)",
				);
				foreach($_POST['bra_options'] as $k =>$bra_value){
				    
				    if(isset($bra_options_substitute[$bra_value])){
    				    $post_bra_options[] = $bra_options_substitute[$bra_value]; 
				    } else{
    				    $post_bra_options[] = $bra_value; 
				    }
				}
				
				$_POST['bra_options'] = $post_bra_options;
				
				if($_POST['post_status'] == "pdf_pre_print")
				{
					$_POST['bra_options_array'] = $this->view->bra_options_array;
					$_POST['sapv_bra_options'] = $this->view->sapv_bra_options; 
					
					$this->generatePdfNew(3, $_POST, 'verordnungtp_pre', "verordnungtp_pre_pdf.html");
				}
				else if($_POST['post_status'] == "pdf_print")
				{
					$_POST['bra_options_array'] = $this->view->bra_options_array;
					$_POST['sapv_bra_options'] = $this->view->sapv_bra_options; 
// 					print_r($_POST); exit;
					
					$this->generateformPdf(3, $_POST, 'verordnungtp', "verordnungtppdf.html");
				}
			}
		}

		public function saverordnungAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'] . "\n" . $parr['street1'] . "&nbsp;" . $parr['zip'] . "\n" . $parr['city'];
			$this->view->birthdate = $parr['birthd'];
			$this->view->patientname1 = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->patietnaddress = $parr['street1'] . "&nbsp;" . $parr['zip'] . "\n" . $parr['city'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];

			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$brenmber = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where("epid= ?", $epid);
			$bexec = $brenmber->execute();
			$barray = $bexec->toArray();

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->arzt_nr = $uarray['LANR'];
			}

			/* ------------------- Maindiagnosis------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$this->view->relevante_Input = $diagnosis;
			}
			else
			{
				$this->view->relevante_Input = "";
			}

			/* ---------------------------------------------------------------------- */
			$pdrug = new PatientDrugPlan();
			$drugarray = $pdrug->getPatientDrugPlan($decid);
			
			$extra =  new PatientDrugPlanExtra();
			$extraarray = $extra->get_patient_drugplan_extra($ipid, $clientid);
			
			$previleges = new Modules();
			$modulepriv_med = $previleges->checkModulePrivileges("148", $logininfo->clientid);
				
			$comma = "";
			if($modulepriv_med)
			{
				foreach($drugarray as $key => $val)
				{
					$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
					
					if(!empty($medca))
					{
						$medcaarray = $medca->toArray();
					}
					$this->view->medication .= $comma . $medcaarray['name'] . " (" . $extraarray[$val['id']]['drug']. ")";
					$comma = ", ";
				}
			}
			else 
			{			
				foreach($drugarray as $key => $val)
				{
					$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
				
					if(!empty($medca))
					{
						$medcaarray = $medca->toArray();
					}
					$this->view->medication .= $comma . $medcaarray['name'] . " | " . $val['dosage'];
					$comma = "\n";
				}
			}

			/* ------------------- Client Data--------------------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$this->view->clientname = $clientdata[0]['client_name'];
			$this->view->client_address = $clientdata[0]['street1'] . ", " . $clientdata[0]['postcode'] . " " . $clientdata[0]['city'];
			$this->view->client_iknr = $clientdata[0]['institutskennzeichen'];
			$this->view->client_pr = $clientdata[0]['lastname'] . ", " . $clientdata[0]['firstname'];
			$this->view->client_phone = $clientdata[0]['phone'];
			$this->view->client_fax = $clientdata[0]['fax'];
			$this->view->client_email = $clientdata[0]['emailid'];

			if($this->getRequest()->isPost())
			{
				$_POST['patient_name'] = nl2br($_POST['patient_name']);
				$this->generateformPdf(3, $_POST, 'Verordnung', "saverordnungpdf.html");
			}
		}

		public function palliativversorgunga7Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;

			/* ------------------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------------------ */

			/* ---------------Get Patient MASTER information------------ */
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$form['kv_header']['patient_name_address'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']) . "\n" . htmlspecialchars($parr['street1']) . "\n" . htmlspecialchars($parr['zip']) . "&nbsp;" . htmlspecialchars($parr['city']);
			$form['kv_header']['patient_birthdate'] = $parr['birthd'];
			$form['kv_header']['patient_name'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']);
			$form['kv_header']['patient_address'] = htmlspecialchars($parr['street1']) . "&nbsp;" . htmlspecialchars($parr['zip']) . "\n" . htmlspecialchars($parr['city']);

			$cl = new Client();
			$clarr = Pms_CommonData::getClientData($clientid);
			$form['data']['client_fax'] = $clarr[0]['fax'];

			if($parr['isdischarged'] == 1)
			{
				$patdischarge = new PatientDischarge();
				$discharged = $patdischarge->getPatientDischarge($parr['ipid']);

				$dismethod = new DischargeMethod();
				$methodarray = $dismethod->getDischargeMethodById($discharged[0]['discharge_method']);

				if($methodarray[0]['abbr'] == 'TOD')
				{
					$form['data']['death_date'] = date("d.m.Y", strtotime($discharged[0]['discharge_date']));
				}
			}

			if($parr['sex'] == 1)
			{
				$form['data']['patient_gender']['male'] = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$form['data']['patient_gender']['female'] = "checked='checked'";
			}

			/* ---------------Get Patient health insurance information------------ */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$form['kv_header']['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$form['kv_header']['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$form['kv_header']['insurance_status'] = $healthinsu_array[0]['insurance_status'];

			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
			$form['kv_header']['kvnumber'] = $healthinsu_array[0]['kvk_no'];

			/* ---------------Get User information------------ */
			$master_user_details = new User();
			$users_details = $master_user_details->getUserDetails($logininfo->userid);
			$form['kv_header']['betriebsstatten_nr'] = $users_details[0]['betriebsstattennummer'];
			$form['kv_header']['arzt_nr'] = $users_details[0]['LANR'];

			/* ---------------Get Family doctor information------------ */
			$patm = new PatientMaster();
			$patmastarr = $patm->getMasterData($decid, 0);
			$doc_id = $patmastarr['familydoc_id'];
			
			if($doc_id > 0)
			{
				$fdoc = Doctrine::getTable('FamilyDoctor')->find($doc_id);
				if($fdoc)
				{ 
					$fdocarray = $fdoc->toArray();
					$form['kv_header']['doctornumber'] = trim($fdocarray['doctornumber']);
					if($fdocarray['city'])
					{
						$form['kv_footer']['city_doc']= $fdocarray['city'].', ';
					}
					
				}
				
			}
			/* ---------------Get Patient discharge information------------ */
			$pdis = new PatientDischarge();
			$disarray = $pdis->getPatientDischarge($ipid);
			if(count($disarray) > 0)
			{
				$dism = new DischargeMethod();
				$dismarray = $dism->getDischargeMethodById($disarray[0]['discharge_method']);

				$form['data']['death_method'] = "";
				if($dismarray[0]['abbr'] == 'TOD')
				{
					$form['data']['death_method'] = 1;
					$discharge_date = $disarray[0]['discharge_date'];
					$discharge_location = $disarray[0]['discharge_location'];
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r('discharge_date ' . $discharge_date . '<br/>');
				print_r('discharge_location ' . $discharge_location . '<br/>');
			}

			/* ---------------Get client discharge location type = Hospitale------------ */
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type = 2') // hospital type
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$hosp_loc = $dl->fetchArray();

			foreach($hosp_loc as $hospital_value)
			{
				$discharge_location_hospital_arr[] = $hospital_value['id'];
			}

			if(empty($discharge_location_hospital_arr))
			{
				$discharge_location_hospital_arr[] = 'XXXXXX';
			}

			/* ---------------Check if the discharge location is HOSPITAL------------ */
			if(in_array($discharge_location, $discharge_location_hospital_arr))
			{
				$discharge_location_hospital = 1;
			}
			else
			{
				$discharge_location_hospital = 0;
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r('discharge_location_hospital ' . $discharge_location_hospital . '<br/>');
			}

			/* -----------------Get all hospital related details------------------------------------- */
			$ploc = new PatientLocation();
			$plocarray = $ploc->getpatientLocation($ipid);
			$cont = 0;

			foreach($plocarray as $key => $val)
			{
				$loc = new Locations();
				$locarray = $loc->getLocationbyId($val['location_id']);
				$frmdate = "";
				$tilldate = "";
				foreach($locarray as $keyv => $kval)
				{

					if($kval['location_type'] == 1)
					{
						$krankenhuse = 1;

						$frmdate = date("d.m.Y", strtotime($val['valid_from'])) . " - ";
						if($val['valid_till'] != '0000-00-00 00:00:00')
						{
							$tilldate = date("d.m.Y", strtotime($val['valid_till']));
						}
						else
						{
							$tilldate = "--";
						}


						$fromdate[$cont]['period'] = $frmdate . $tilldate;


						$resonarray = $ploc->getReasons();
						$fromdate[$cont]['reason'] = $resonarray[$val['reason']];
						$cont++;
					}
				}
			}

			$form['data']['hospital_dates'] = $fromdate;

			/* ---------------Check if the patient has died in LOCATION (stamdaten) type hospital--------------------- */
			$plast_location_array = $ploc->getLastLocation($decid);
			if($_REQUEST['dbg'] == '1')
			{
				print_r($plast_location_array);
			}

			foreach($plast_location_array as $locm => $locm_value)
			{
				$location_master = new Locations();
				$location_master_array = $location_master->getLocationbyId($locm_value['location_id']);

				foreach($location_master_array as $key_mloc => $val_mloc)
				{
					if($val_mloc['location_type'] == '1')
					{

						if($val['valid_till'] == '0000-00-00 00:00:00' && !empty($discharge_date))
						{
							$val['valid_till'] = $discharge_date;
						}

						if($_REQUEST['dbg'] == '1')
						{
							print_r('<br/>hospital_valid_til: ' . $val['valid_till'] . '<br/>');
						}

						if($val['valid_till'] != '0000-00-00 00:00:00' && !empty($discharge_date))
						{

							$h_date_array = date('d.m.Y', strtotime($val['valid_till']));
							$hdate_arr = explode(".", $h_date_array);
							$hospital_till_date = mktime(0, 0, 0, $hdate_arr[1], $hdate_arr[0], $hdate_arr[2]);

							$discharge_date_array = date('d.m.Y', strtotime($discharge_date));
							$ddate_arr = explode(".", $discharge_date_array);
							$dead_date = mktime(0, 0, 0, $ddate_arr[1], $ddate_arr[0], $ddate_arr[2]);

							if($hospital_till_date > $dead_date)
							{
								$hospital_till_date = $dead_date;
							}

							if($hospital_till_date == $dead_date)
							{
								$dead_during_hospital = 1;
							}
							else
							{
								$dead_during_hospital = 0;
							}
						}
						else
						{
							$dead_during_hospital = 0;
						}
					}
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r('dead_during_hospital' . $dead_during_hospital . '<br/>');
			}

			/* -------------Verify if the patient died in discharge location hospital OR  during being in Hospital location---------------- */
			if($discharge_location_hospital == 1 || $dead_during_hospital == 1)
			{
				$form['data']['dead_in_hospital'] = 1;
			}
			else
			{
				$form['data']['dead_in_hospital'] = 0;
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r('dead_in_hospital' . $this->view->dead_in_hospital . '<br/>');
				exit;
			}


			/* ---------------------------- get saved data ------------------- */
			$anlage7_data = new WlAnlage7();
			$saved_data = $anlage7_data->get_anlage7_data($ipid);


			if(!empty($saved_data))
			{
				$form['data'] = $saved_data;

				$anlage7_form_id = $saved_data['id'];
				$form['data']['anlage7_form_id'] = $anlage7_form_id;


				if(!empty($anlage7_form_id))
				{
					$anlage7_hospital_stays = new WlAnlage7HospitalStays();
					$saved_hospital_stays = $anlage7_hospital_stays->get_anlage7_hospital_stays($ipid, $anlage7_form_id);
				}

				if(!empty($saved_hospital_stays))
				{
					$form['data']['hospital_dates'] = $saved_hospital_stays;
				}
			}

			$form['data']['wlanlage7completed'] = $parr['wlanlage7completed'];
			$this->view->form_data = $form;



			if($this->getRequest()->isPost())
			{
				$post = $_POST;

				if(strlen($_POST['btnsubmit-save']) > 0 && empty($_POST['btnsubmit-pdf']))
				{
					$anlage7form = new Application_Form_WlAnlage7();
					$anlage7form_hospital_stays = new Application_Form_WlAnlage7HospitalStays();

					if(empty($anlage7_form_id))
					{
						$anlage7_result = $anlage7form->insert_data($post['data']);

						if($anlage7_result && !empty($_POST['data']['hospital_stays']))
						{
							$result = $anlage7form_hospital_stays->insert_data($_POST['data']['hospital_stays'], $anlage7_result);
						}
					}
					else
					{
						$anlage7_up = $anlage7form->update_data($post['data']);

						$anlage7form_hospital_stays_up = $anlage7form_hospital_stays->update_data($_POST['data']['hospital_stays'], $anlage7_form_id);
					}


					if($post['data']['wlanlage7completed'] == 1)
					{
						$cust = Doctrine::getTable('PatientMaster')->find($decid);
						$cust->wlanlage7completed = 1;
						$cust->save();
					}
					else
					{
						$cust = Doctrine::getTable('PatientMaster')->find($decid);
						$cust->wlanlage7completed = 0;
						$cust->save();
					}


					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				elseif(empty($_POST['btnsubmit-save']) && strlen($_POST['btnsubmit-pdf']) > 0)
				{
					$this->generateformPdf(3, $post, 'Palliativ_versorgung_a7', "anlage7_pdf.html");
				}
			}
		}

		public function palliativversorgunga7140424Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;

			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			/* ---------------Get Patient MASTER information------------ */
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$cl = new Client();
			$clarr = Pms_CommonData::getClientData($clientid);

			$this->view->patientname = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']) . "\n" . htmlspecialchars($parr['street1']) . "\n" . htmlspecialchars($parr['zip']) . "&nbsp;" . htmlspecialchars($parr['city']);
			$this->view->birthdate = $parr['birthd'];
			$this->view->patientname1 = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']);
			$this->view->patietnaddress = htmlspecialchars($parr['street1']) . "&nbsp;" . htmlspecialchars($parr['zip']) . "\n" . htmlspecialchars($parr['city']);
			$this->view->wlanlage7completed = $parr['wlanlage7completed'];
			$this->view->palliativmedizinischen_konsiliardienst = $clarr[0]['fax'];

			if($parr['isdischarged'] == 1)
			{
				$patdischarge = new PatientDischarge();
				$discharged = $patdischarge->getPatientDischarge($parr['ipid']);

				$dismethod = new DischargeMethod();
				$methodarray = $dismethod->getDischargeMethodById($discharged[0]['discharge_method']);

				if($methodarray[0]['abbr'] == 'TOD')
				{
					$this->view->toddisdate = date("d.m.Y", strtotime($discharged[0]['discharge_date']));
				}
			}

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			/* ---------------Get Patient health insurance information------------ */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];

			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

			/* ---------------Get Patient discharge information------------ */
			$pdis = new PatientDischarge();
			$disarray = $pdis->getPatientDischarge($ipid);
			if(count($disarray) > 0)
			{
				$dism = new DischargeMethod();
				$dismarray = $dism->getDischargeMethodById($disarray[0]['discharge_method']);
				$this->view->todmethod = "";
				if($dismarray[0]['abbr'] == 'TOD')
				{
					$this->view->todmethod = 1;
					$discharge_date = $disarray[0]['discharge_date'];
					$discharge_location = $disarray[0]['discharge_location'];
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r('discharge_date ' . $discharge_date . '<br/>');
				print_r('discharge_location ' . $discharge_location . '<br/>');
			}

			/* ---------------Get client discharge location type = Hospitale------------ */
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type = 2') // hospital type
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$hosp_loc = $dl->fetchArray();

			foreach($hosp_loc as $hospital_value)
			{
				$discharge_location_hospital_arr[] = $hospital_value['id'];
			}

			if(empty($discharge_location_hospital_arr))
			{
				$discharge_location_hospital_arr[] = 'XXXXXX';
			}

			/* ---------------Check if the discharge location is HOSPITAL------------ */
			if(in_array($discharge_location, $discharge_location_hospital_arr))
			{
				$discharge_location_hospital = 1;
			}
			else
			{
				$discharge_location_hospital = 0;
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r('discharge_location_hospital ' . $discharge_location_hospital . '<br/>');
			}

			/* -----------------Get all hospital related details------------------------------------- */
			$ploc = new PatientLocation();
			$plocarray = $ploc->getpatientLocation($ipid);
			$cont = 0;

			foreach($plocarray as $key => $val)
			{
				$loc = new Locations();
				$locarray = $loc->getLocationbyId($val['location_id']);
				$frmdate = "";
				$tilldate = "";
				foreach($locarray as $keyv => $kval)
				{

					if($kval['location_type'] == 1)
					{
						$krankenhuse = 1;

						$frmdate = date("d.m.Y", strtotime($val['valid_from'])) . " - ";
						if($val['valid_till'] != '0000-00-00 00:00:00')
						{
							$tilldate = date("d.m.Y", strtotime($val['valid_till']));
						}
						else
						{
							$tilldate = "--";
						}


						$fromdate[$cont]['fromdate'] = $frmdate . $tilldate;


						$resonarray = $ploc->getReasons();
						$fromdate[$cont]['reason'] = $resonarray[$val['reason']];
						$cont++;
					}
				}
			}

			$this->view->fromdate = $fromdate;

			/* ---------------Check if the patient has died in LOCATION (stamdaten) type hospital--------------------- */
			$plast_location_array = $ploc->getLastLocation($decid);
			if($_REQUEST['dbg'] == '1')
			{
				print_r($plast_location_array);
			}

			foreach($plast_location_array as $locm => $locm_value)
			{
				$location_master = new Locations();
				$location_master_array = $location_master->getLocationbyId($locm_value['location_id']);

				foreach($location_master_array as $key_mloc => $val_mloc)
				{
					if($val_mloc['location_type'] == '1')
					{

						if($val['valid_till'] == '0000-00-00 00:00:00' && !empty($discharge_date))
						{
							$val['valid_till'] = $discharge_date;
						}

						if($_REQUEST['dbg'] == '1')
						{
							print_r('<br/>hospital_valid_til: ' . $val['valid_till'] . '<br/>');
						}

						if($val['valid_till'] != '0000-00-00 00:00:00' && !empty($discharge_date))
						{

							$h_date_array = date('d.m.Y', strtotime($val['valid_till']));
							$hdate_arr = explode(".", $h_date_array);
							$hospital_till_date = mktime(0, 0, 0, $hdate_arr[1], $hdate_arr[0], $hdate_arr[2]);

							$discharge_date_array = date('d.m.Y', strtotime($discharge_date));
							$ddate_arr = explode(".", $discharge_date_array);
							$dead_date = mktime(0, 0, 0, $ddate_arr[1], $ddate_arr[0], $ddate_arr[2]);

							if($hospital_till_date > $dead_date)
							{
								$hospital_till_date = $dead_date;
							}

							if($hospital_till_date == $dead_date)
							{
								$dead_during_hospital = 1;
							}
							else
							{
								$dead_during_hospital = 0;
							}
						}
						else
						{
							$dead_during_hospital = 0;
						}
					}
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r('dead_during_hospital' . $dead_during_hospital . '<br/>');
			}

			/* -------------Verify if the patient died in discharge location hospital OR  during being in Hospital location---------------- */
			if($discharge_location_hospital == 1 || $dead_during_hospital == 1)
			{
				$this->view->dead_in_hospital = 1;
			}
			else
			{
				$this->view->dead_in_hospital = 0;
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r('dead_in_hospital' . $this->view->dead_in_hospital . '<br/>');
				exit;
			}

			if($this->getRequest()->isPost())
			{
				if($_POST['wlanlage7completed'] == 1)
				{
					$cust = Doctrine::getTable('PatientMaster')->find($decid);
					$cust->wlanlage7completed = 1;
					$cust->save();
				}
				else
				{
					$cust = Doctrine::getTable('PatientMaster')->find($decid);
					$cust->wlanlage7completed = 0;
					$cust->save();
				}

				$this->generateformPdf(3, $_POST, 'Palliativ_versorgung_a7', "analage7_pdf.html");
			}
		}

		public function sapvfb3commentAction()
		{
			$this->_helper->layout->setLayout('layout_popup');
		}

		private function recursiveArraySearch($haystack, $needle, $index = null)
		{
			$aIt = new RecursiveArrayIterator($haystack);
			$it = new RecursiveIteratorIterator($aIt);

			while($it->valid())
			{
				if(((isset($index) AND ( $it->key() == $index)) OR ( !isset($index))) AND ( $it->current() == $needle))
				{
					return $aIt->key();
				}

				$it->next();
			}
			return false;
		}

		public function patientmastereditAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canadd');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpidFromId($decid);
			$userid = $logininfo->userid;

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
			
			//ISPC - 1757
			$ef = new ExtraForms();
			$allowedFormBoxes = $ef->get_client_forms($this->logininfo->clientid);
			$this->view->allowedFormBoxes = $allowedFormBoxes;
			//print_r($allowedFormBoxes); exit;

			$modules = new Modules();
			if($modules->checkModulePrivileges("87", $logininfo->clientid))
			{
				$this->view->show_mmi = "1";
			}
			else
			{
				$this->view->show_mmi = "0";
			}

			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge ISPC - 1483
			{
			    $acknowledge = "1";
			}
			else
			{
			    $acknowledge = "0";
			}
			
			
			$this->view->act = "patient/patientmasteredit";
			$this->_helper->layout->setLayout('layout');
			$this->view->recording_date = date("d-m-Y");
			$this->view->errorclass = "ErrorDivHide";
			$this->view->verordnetarray = Pms_CommonData::getSapvCheckBox();
			$this->view->salutations = Pms_CommonData::getSalutation();
			$this->view->genders = Pms_CommonData::getGender();
			$this->view->regions = Pms_CommonData::getRegions();
			$this->view->hours = Pms_CommonData::getHours();
			$this->view->minutes = Pms_CommonData::getMinutes();

			$lc = new Locations();
			$this->view->locationarray = $lc->getLocations($clientid, 1);

			$cl = new Client();
			$clarr = Pms_CommonData::getClientData($clientid);

			$dm = new DiagnosisIcd();
			$this->view->icddiagnosisarr = $dm->getDiagnosisData(1);

			$dm = new DiagnosisMeta();
			$this->view->diagnosismeta = $dm->getDiagnosisMetaData(1);

			/*$ef = new ExtraFormsClient();  // for extra form verordun
			$isextra = $ef->getExtraFormsClient($clientid);
			if($ef)
			{
				$allowedform = "allowed";
			}
			else
			{
				$allowedform = "";
			}

			$this->view->allowedform = $allowedform;*/

			$rf = new PatientReferredBy();
			$this->view->referredbyarray = $rf->getPatientReferredBy($clientid, 1);

			$sap = new SapvVerordnung();
			$this->view->radioarr = $sap->getSapvRadios();

			$modules = new Modules();
			if($modules->checkModulePrivileges("70", $clientid)) // primary status : Verordnung
			{
				$sapv_primary_status = true;
			}
			else
			{
				$sapv_primary_status = false;
			}

			if($modules->checkModulePrivileges("71", $clientid)) // secondary status : Verordnung 2nd Page
			{
				$sapv_secondary_status = true;
			}
			else
			{
				$sapv_secondary_status = false;
			}

			if($sapv_primary_status || $sapv_secondary_status)
			{
				$this->view->extraradioarr = $sap->getSapvExtraStatusesRadios();
				$this->view->sapv_primary_status = $sapv_primary_status;
				$this->view->sapv_secondary_status = $sapv_secondary_status;
			}

			if($modules->checkModulePrivileges("69", $clientid))
			{
				$sapv_extra = true;
			}
			else
			{
				$sapv_extra = false;
			}

			if($sapv_extra === true)
			{
				$this->view->extraradioarr_old = $sap->getSapvExtraRadios();
			}
			$this->view->sapv_extra = $sapv_extra;


			$this->view->bra_options_array = Pms_CommonData::get_bra_options_checkboxes();
				
			if($modules->checkModulePrivileges("97", $clientid)) // Bra options
			{
				$sapv_bra_options = true;
			}
			else
			{
				$sapv_bra_options = false;
			}
			
			$this->view->sapv_bra_options = $sapv_bra_options;
				
			
			
			$st = new KbvKeytabs();
			$this->view->status_array = $st->getKbvKeytabs(1);

			$detailscookies = '""';
			$oc = new OverviewCookie();
			$ocarr = $oc->getCookieData($logininfo->userid, "admission");

			/* ----------------------Get master group for user------------------------------ */
			$DoctorGroups = array("4", "9"); //4 - Arzt, 9 - Hausarzt
			$NurseGroups = array("5"); //5-Pflege

			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$groupid = $userdata[0]['groupid'];

			$ug = new Usergroup();
			$user_master_groups = $ug->getMasterGroup($groupid);

			if(in_array($user_master_groups, $DoctorGroups))
			{
				$user_type = 'doc';
			}
			elseif(in_array($user_master_groups, $NurseGroups))
			{
				$user_type = 'nurse';
			}
			else
			{
				$user_type = 'other';
			}

			/* ---------------------------------------------------- */
			$Kontaktaufnahmecprevileges = new Modules();
			$Kontaktaufnahme = $Kontaktaufnahmecprevileges->checkModulePrivileges("62", $logininfo->clientid);

			if($Kontaktaufnahme)
			{
				$order = new OrderAdmission();
				$client_orderadmissions = $order->getOrderAdmissionbyClient($logininfo->clientid);
				$orderer_array = array("" => "");

				foreach($client_orderadmissions as $key => $val)
				{
					$orderer_array[$val['id']] = $val['orderer'];
				}

				if(!empty($client_orderadmissions))
				{
					$this->view->Kontaktaufnahme_select = 1;
					$this->view->Kontaktaufnahme = $orderer_array;
				}
			}
			else
			{
				$this->view->Kontaktaufnahme_select = 0;
			}

			/* ---------------------------------------------------- */
			$Nursing_practicing_previleges = new Modules();
			$nursing_practicing = $Nursing_practicing_previleges->checkModulePrivileges("63", $logininfo->clientid);

			if($nursing_practicing)
			{
				$usergroup = new Usergroup();
				$MasterGroups = array("5"); //Pflege master group
				$usersgroups = $usergroup->getUserGroups($MasterGroups);

				if(count($usersgroups) > 0)
				{
					foreach($usersgroups as $group)
					{
						$groupsarray[] = $group['id'];
					}
				}

				$usrs = new User();
				$usersPflegeArray = $usrs->getuserbyGroupId($groupsarray, $clientid, true);
				$nurse_array['0'] = "--";

				foreach($usersPflegeArray as $puser)
				{
					$nurse_array[$puser['id']] = $puser['last_name'] . ", " . $puser['first_name'];
				}

				$this->view->nurse_practicing_array = $nurse_array;
				$this->view->nurse_practicing_visibility = 1;
			}
			else
			{
				$this->view->nurse_practicing_visibility = 0;
			}
			/* ---------------------------------------------------- */

			//special_assistance_option
			$special_assistance_previleges = new Modules();
			$special_medical_assistance = $special_assistance_previleges->checkModulePrivileges("68", $logininfo->clientid);

			if($special_medical_assistance)
			{
				$this->view->special_assistance_option = 1;
			}
			else
			{
				$this->view->special_assistance_option = 0;
			}

			/* ---------------------------------------------------- */
			switch($ocarr[0]['useroption'])
			{
				case 1 : $detailscookies = "";
					break;
				case 3 : $detailscookies = $ocarr[0]['cookie'];
					break;
				default : break;
			}

			$this->view->detailscookies = "'" . $detailscookies . "'";
			if(count($_POST['hidd_cid']) > 0)
			{
				$cnt = Doctrine_Query::create()
					->select('*')
					->from('ContactPersonTempMaster')
					->where('id in(' . join(",", $_POST['hidd_cid']) . ')');
				$track = $cnt->execute();
				if($track)
				{
					$a_cnts = $track->toArray();
				}
			}

			if($this->getRequest()->isPost())
			{
			    

			    $_POST['skip_trigger'] = 0;
			    $_POST['add_sets'] = "1";
			    if($acknowledge == "1")
			    {
			        $_POST['skip_trigger'] = 1;
			    }
			    
			    
				$a_post = $_POST;
				$a_post['ipid'] = $ipid;
				$a_post['pid'] = $decid;
				$a_post['clientid'] = $clientid;
				$a_post['cnts'] = $a_cnts;

				$patient_form = new Application_Form_PatientMaster();
				$patient_caseform = new Application_Form_PatientCase();
				$sapvver = new Application_Form_SapvVerordnung();
				$contact_form = new Application_Form_ContactPersonMaster();
				$patient_insurance_form = new Application_Form_PatientHealthInsurance();
				$pat_lives = new Application_Form_PatientLives();
				$pat_supply = new Application_Form_PatientSupply();
				$pat_mobility = new Application_Form_PatientMobility();
				$pat_moreinfo = new Application_Form_PatientMoreInfo();
				$pat_maintainance = new Application_Form_PatientMaintainanceStage();
				$patient_locationform = new Application_Form_PatientLocation();
				$patient_diagnosis = new Application_Form_PatientDiagnosis();
				$patdiagnometa = new Application_Form_PatientDiagnosisMeta();
				$diagno_text = new Application_Form_DiagnosisText();
				$patient_medication_form = new Application_Form_Medication();
				$patient_medic_form = new Application_Form_PatientDrugPlan();
				$pat_crysis = new Application_Form_PatientCrisisHistory();
				
				$docform = new Application_Form_Familydoctor();
				
				if(  strlen($a_post['familydoc_id']) > 0)
				{
				    $this->fam_doc_validate = $docform->validateAdm($a_post);
				} else {
				    $this->fam_doc_validate = true;
				}
				
				//var_dump($this->fam_doc_validate);
// 			Auftrag bei Kontaktaufnahme:
				if($Kontaktaufnahme && $_POST['orderadmission'] > 0 && $_POST['orderadmission'] != $_POST['old_orderadmission'])
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt('Auftrag bei Kontaktaufnahme: ' . $orderer_array[$_POST['orderadmission']]);
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				$this->ptnval = $patient_form->validate($a_post);

				if(strlen($_POST['verordnet_von']) > 0)
				{
					$this->casesapv = $sapvver->validate($a_post);
				}
				else
				{
					$this->casesapv = true;
				}
				
				if($this->ptnval && $this->casesapv && $this->fam_doc_validate)
				{

					// Patient readmission course - admission date START
					$readmission_date_course = "Aufnahmezeitpunkt : " . date('d.m.Y', strtotime($_POST['admission_date'])) . " " . $_POST['adm_timeh'] . "." . $_POST['adm_timem'] . " Uhr";
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($readmission_date_course);
					//ISPC-2691 Carmen 04.11.2020
					$cust->tabname = Pms_CommonData::aesEncrypt("aufnahme_date");
					//--
					$cust->user_id = $userid;
					$cust->save();
					// Patient readmission course - admission date END
					//@Radu: moved this from dischargelistaction (neaufnahme bug, Ancuta, 14.07.2011) [START]
					$ptm = Doctrine_Core::getTable('PatientMaster')->find($decid);
					$ptm->isdischarged = 0;
					$ptm->isarchived = 0;
					$ptm->traffic_status = 1 ;
					
					if($_POST['patient_status'] == "1") //  set as standby
					{
						$ptm->isstandby = 1;
					}
					$ptm->save();
					$ipid = Pms_CommonData::getIpId($decid);
					
					$dismiss = Doctrine::getTable('PatientDischarge')->findBy('ipid', $ipid);

					if($dismiss)
					{
						$dismarr = $dismiss->toArray();
					}

					if(count($dismarr) > 0)
					{
						$pr = Doctrine::getTable('PatientReadmission')->findByIpidAndDateAndDateType($ipid, $dismarr[0]['discharge_date'], '2');
						$prr = $pr->toArray();

						if(count($prr) == 0)
						{//not found then add
							$patientreadmission = new PatientReadmission();
							$patientreadmission->user_id = $logininfo->userid;
							$patientreadmission->ipid = $ipid;
							$patientreadmission->date = $dismarr[0]['discharge_date'];
							$patientreadmission->date_type = 2; //1 =admission-readmission 2- discharge
							$patientreadmission->save();
						}

						/* ------------------------------- DISCHARGE set isdelete = 1 DON'T DELETE --------------------------------------------------------- */
						$q = Doctrine_Query::create()
							->update('PatientDischarge')
							->set('isdelete', '1')
							->where("ipid='" . $ipid . "'");
						$q->execute();
					}

					
					/* ----- INSET STANDBY DETAILS -----------------------------------*/
					if($_POST['patient_status'] == "1") //  set as standby
					{
						$st_admin_date = explode(".", $a_post['admission_date']);
						if(strlen($a_post['admission_date']) > 0)
						{
							$standby_admission_date = $st_admin_date[2] . "-" . $st_admin_date[1] . "-" . $st_admin_date[0] . " " . $a_post['adm_timeh'] . ":" . $a_post['adm_timem'];
						}
						$standby_comment = "Move from discharge to standby: patientmasteredit";
						$set_as_standby = $patient_form->discharged2standby($ipid,$standby_admission_date,$standby_comment);
					}
					
					
					$patreadm = Doctrine_Query::create()
						->select('*')
						->from('PatientReadmission')
						->where('ipid ="' . $ipid . '"')
						->orderBy('id ASC');
					$patientreadmissionarr = $patreadm->fetchArray();
					$patientlastrecord = end($patientreadmissionarr);

					if($patientlastrecord['date_type'] == "2" || count($patientreadmissionarr) == 0)
					{
						//@Radu: moved this from dischargelistaction (neaufnahme bug, Ancuta, 14.07.2011) [END]
						//radu save firstadmision date start
						//get first admision date from patient master
						$pm = Doctrine::getTable('PatientMaster')->find($decid);
						$patientmasterarray = $pm->toArray();

						//search admision date in patient readmision
						$pr = Doctrine::getTable('PatientReadmission')->findOneByIpidAndDateAndDateType($ipid, $patientmasterarray['admission_date'], "1");
						if(!$pr)
						{
							//not found then add
							$patientreadmission = new PatientReadmission();
							$patientreadmission->user_id = $logininfo->userid;
							$patientreadmission->ipid = $ipid;
							$patientreadmission->date = $patientmasterarray['admission_date'];
							$patientreadmission->date_type = 1; //1 =admission-readmission 2- discharge
							$patientreadmission->save();
						}

						//radu save firstadmision date end
						//radu formone active time patient (readmission new table) start
						$admin_date = explode(".", $a_post['admission_date']);
						if(strlen($a_post['admission_date']) > 0)
						{
							$readmission_date = $admin_date[2] . "-" . $admin_date[1] . "-" . $admin_date[0] . " " . $a_post['adm_timeh'] . ":" . $a_post['adm_timem'];
						}

						$patientreadmission = new PatientReadmission();
						$patientreadmission->user_id = $logininfo->userid;
						$patientreadmission->ipid = $ipid;
						$patientreadmission->date = $readmission_date;
						$patientreadmission->date_type = 1; //1 =admission-readmission 2- discharge
						$patientreadmission->special_medical_assistance = $_POST['special_medical_assistance'];
						$patientreadmission->save();

						$patient = $patient_form->UpdateData($a_post);  //patient master

						/* ############################### */
						/* Save user - for Admission Action E/EH */
						$ltyp = new Locations();
						$loctype = $ltyp->getLocationbyId($_POST['location_id']);
						$locationtype = $loctype[0]['location_type'];
						
						if($locationtype == '2')
						{
							//h =  hospiz admission
							$s_post['admission_status'] = 'h';
						}
						else
						{
							//n =  normal admission
							$s_post['admission_status'] = 'n';
						}

						//ISPC-1547 Lore 13.08.2019
						if($locationtype == '1'){
						    $inout = '';
						    $messages = new Messages();
						    $notification_change_location = $messages->change_location_notification($ipid, $userid, $inout, 'patientmasteredit');
						} 
						//-- 
						
						$s_post['ipid'] = $ipid;
						$s_post['date'] = $readmission_date;
						// a = admission, r =  readmission
						$s_post['admission_type'] = 'r';
						$s_post['user_id'] = $userid;
						$s_post['user_type'] = $user_type;

						$user2adm = new Application_Form_User2admission();

						if($user_type != 'other')
						{
							$user2admission = $user2adm->InsertData($s_post);
						}

						if($_POST['nurse_practicing'] && $_POST['nurse_practicing'] != '0' && $_POST['nurse_practicing'] != $userid)
						{
							$s_post['user_type'] = 'nurse';
							$s_post['user_id'] = $_POST['nurse_practicing'];

							$user2admm = $user2adm->InsertData($s_post);

							// assign user to readmitted patient
							$nurse_id = $_POST['nurse_practicing'];
							$assign = new PatientQpaMapping();
							$assign->epid = $epid;
							$assign->userid = $nurse_id;
							$assign->clientid = $logininfo->clientid;
							$assign->save();

							//add visibility for this
							$vizibility = new PatientUsers();
							$vizibility->clientid = $logininfo->clientid;
							$vizibility->ipid = $ipid;
							$vizibility->userid = $nurse_id;
							$vizibility->create_date = date("Y-m-d H:i:s", time());
							$vizibility->save();
						}
						/* ############################### */
						/* Save user - for Admission Action E/EH */
					}
					/* ------------------------------- Patients steps set isdelete = 1 DON'T DELETE --------------------------------------------------------- */
					$psteps = new PatientSteps();
					$patient_steps_array = $psteps->get_patient_steps($ipid);

					if($patient_steps_array || !empty($patient_steps_array))
					{
						$query = Doctrine_Query::create()
							->update('PatientSteps')
							->set("isdelete", "1")
							->where("ipid LIKE '" . $ipid . "'");
						$query->execute();
					}
					/* --------------------------------------------------------------------------------------------------------------------------------- */
					$pl = new PatientLocation();
					$larr = $pl->getLastLocationDataFromAdmissionUpdate($ipid);

					if(!empty($a_post['admission_date']) && !empty($a_post['adm_timeh']) && !empty($a_post['adm_timem']))
					{
						$current_time = strtotime($a_post['admission_date'] . ' ' . $a_post['adm_timeh'] . ':' . $a_post['adm_timem'] . ':00');
					}
					else
					{
						$current_time = time();
					}

					if($larr[0]['valid_till'] != "0000-00-00 00:00:00" && !empty($larr[0]['valid_till']))
					{
						$pl->clientid = $logininfo->clientid;
						$pl->ipid = $ipid;
						$pl->location_id = 0;
						$pl->discharge_location = 1;
						$pl->valid_from = $larr[0]['valid_till'];
						$pl->valid_till = date("Y-m-d H:i:s", $current_time);
						$pl->save();
					}

					if(!empty($a_post['familydoc_id']))
					{
						
						
						$a_post['title'] = $_POST['fd_title'];
						$a_post['first_name'] = $_POST['fd_first_name'];
						$a_post['last_name'] = $_POST['fd_last_name'];
						$a_post['salutation'] = $_POST['fd_salutation'];
						
						$docinfo = $docform->InsertFromTabData($a_post, true);
						$a_post['hidd_docid'] = $docinfo->id;
						$patient_form->UpdateFamilydoc($a_post);  //family doc
					}

					$pcase = $patient_caseform->UpdateData($a_post); // admission date
					$a_post['sapv_order'] = "2"; // force the sapv to add order
					$ver = $sapvver->InsertData($a_post);
					$contact_form->InsertData($a_post); // contact person
										
					//get health insurance subdivizions
					$symperm = new HealthInsurancePermissions();
					$divisions = $symperm->getClientHealthInsurancePermissions($clientid);
				
					if($divisions)
					{
						$subdivizions_permissions = 1;
					}
					else
					{
						$subdivizions_permissions = 0;
					}
						
					$a_post['subdivizions_permissions'] = $subdivizions_permissions;
					
					//selected healthinsurance details
					$hi_details = HealthInsurance::get_multiple_healthinsurances(array($a_post['hdn_companyid']));

					$a_post['ins_insurance_provider'] = $hi_details[$a_post['hdn_companyid']]['insurance_provider'];
					$a_post['ins_phone'] = $hi_details[$a_post['hdn_companyid']]['phone'];
					$a_post['ins_phone2'] = $hi_details[$a_post['hdn_companyid']]['phone2'];
					$a_post['ins_phonefax'] = $hi_details[$a_post['hdn_companyid']]['phonefax'];
					$a_post['ins_zip_mailbox'] = $hi_details[$a_post['hdn_companyid']]['zip_mailbox'];
					$a_post['ins_post_office_box'] = $hi_details[$a_post['hdn_companyid']]['post_office_box'];
					$a_post['ins_post_office_box_location'] = $hi_details[$a_post['hdn_companyid']]['post_office_box_location'];
					$a_post['ins_email'] = $hi_details[$a_post['hdn_companyid']]['email'];
					$a_post['ins_comment'] = $hi_details[$a_post['hdn_companyid']]['comments'];
					
					if(!empty($a_post['hdn_companyid']))
					{
						$hisub = new HealthInsuranceSubdivisions();
						$health_insurance_subdivision = $hisub->getClientHealthInsuranceSubdivisions($a_post['hdn_companyid']);
						$a_post['subdivizion'] = $health_insurance_subdivision;
					}
					
					$patient_insurance_form->UpdateData($a_post);  // health insurance

					$pat_lives->UpdateData($a_post); //patient lives
					$pat_supply->UpdateData($a_post); // patient supply
					$pat_mobility->UpdateData($a_post); // patient mobility
					$pat_moreinfo->UpdateData($a_post); // patient moreinfo
					$a_post['chkval'] = $a_post['stage'];
					$pat_maintainance->InsertData($a_post); // patient maintainnace
					$patient_locationform->UpdateData($a_post); // patient location
					$patient_diagnosis->updateMetaData($a_post); // Patient Diagnosis
					$patdiagnometa->UpdateData($a_post); // Patient Meta
                    $pat_crysis->InsertData($a_post);  //patient crisis history

					/* --------------------------------------------- DIAGNOSIS ----------------------------------------------- */
//				for($i = 1; $i <= sizeof($_POST['diagnosis']); $i++)
					foreach($_POST['diagnosis'] as $k_i => $diagnosis_value)
					{
						if(strlen($diagnosis_value) > 0 && strlen($_POST['hidd_diagnosis'][$k_i]) < 1)
						{
							$a_post['newdiagnosis'][$k_i] = $diagnosis_value;
							$a_post['newdiagnosistype'][$k_i] = $_POST['dtype'][$k_i];
							$a_post['newdiagnosisicd'][$k_i] = $_POST['icdnumber'][$k_i];
						}
					}

					if(is_array($a_post['newdiagnosis']))
					{
						$dt = $diagno_text->InsertEditData($a_post);

						foreach($dt as $key => $val)
						{
							$a_post['newhidd_diagnosis'][$key] = $val['id'];
						}
					}


					/* --------------------------------------------- MEDICATION ----------------------------------------------- */
					foreach($_POST['medication'] as $i => $medi_looped)
					{
						if(strlen($medi_looped) > 0 && strlen($_POST['hidd_medication'][$i]) == 0)
						{
							$a_post['newmedication'][$i] = $medi_looped;
						}
					}

					if(is_array($a_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($a_post);

						foreach($dts as $key => $dt)
						{
							$a_post['newhidd_medication'][$key] = $dt->id;
						}
					}


					/* --------------------------------------------- BEDARF MEDICATION ----------------------------------------------- */
					foreach($_POST['add']['medication'] as $key => $val)
					{
						if(strlen($_POST['add']['medication'][$key]) > 0 && strlen($_POST['add']['hidd_medication'][$key]) < 1)
						{
							$a_post['add']['newmedication'][$key] = $_POST['add']['medication'][$key];
						}
					}

					if(is_array($a_post['add']['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($a_post['add']);

						foreach($dts as $key => $dt)
						{
							$a_post['add']['newhidd_medication'][$key] = $dt->id;
						}
					}

					$a_post['add']['ipid'] = $a_post['ipid'];
					$a_post['add']['isbedarfs'] = 1;
					$a_post['isbedarfs'] = 0;

					$patient_diagnosis->UpdateData($a_post);
					$dm_form = new Application_Form_PatientDiagnosisMeta();
					$dm_form->UpdateData($a_post);

					$normalmedis = $patient_medic_form->UpdateFromAdmissionData($a_post);
					$bedarfmedis = $patient_medic_form->UpdateFromAdmissionData($a_post['add']);

					if($_POST['patient_status'] == "1") //  set as standby
					{
    					$comment = $this->translator->translate('Patient MOVED FROM DISCHARGED TO STSANBY');
					} else{
    					$comment = "Patient wurde wieder aufgenommen";
					}
					
					

					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					//ISPC-2691 Carmen 04.11.2020
					$cust->tabname = Pms_CommonData::aesEncrypt("aufnahme");
					//--
					$cust->user_id = $userid;
					$cust->save();



					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				else
				{
					$sapvver->assignErrorMessages();
					$patient_form->assignErrorMessages();
					$docform->assignErrorMessages();
					$this->view->errorclass = "err";
					$this->retainValues($_POST);
				}
			}

			/*			 * ************************************** Retain Section ****************************************************** */
			$lastdate = new PatientReadmission();
			$last_dischargedate = $lastdate->getPatientLastDischargedate($ipid);
			$datedis = date('d.m.Y', strtotime('+1 day', strtotime($last_dischargedate[0]['date'])));
			$this->view->last_discharge = $datedis;
			$this->view->last_discharge_time = date('Y-m-d H:i', strtotime($last_dischargedate[0]['date']));
			$this->view->maxdate = date('d.m.Y');
			$dataadm = date('d.m.Y', strtotime('+1 day', strtotime($last_dischargedate[0]['date'])));

			/*			 * ************************************** Patient Master ****************************************************** */

			$pm = new PatientMaster();
			$pmarray = $pm->getMasterData($decid, 0);
			$this->retainValues($pmarray);
			$this->view->hidd_docid = $pmarray['familydoc_id'];
			$this->view->orderer = $pmarray['orderadmission'];

			/* ^^^^^^^^^^ Patient Case^^^^^^^^^^^^^ */
			$pc = new PatientCase();
			$pcarr = $pc->getPatientCaseData($ipid);
			if($pcarr[0]['admission_date'] != '0000-00-00 00:00:00')
			{
				$this->view->admission_date = date('d.m.Y');
				$dt = explode(" ", $pcarr[0]['admission_date']);
				$dm = explode(":", $dt[1]);

				$this->view->adm_timeh = $dm[0];
				$this->view->adm_timem = $dm[1];
			}

			/* ^^^^^^^^^^ Family Doctor^^^^^^^^^^^^^ */
			$fd = new FamilyDoctor();
			if($pmarray['familydoc_id'])
			{
				$fdarr = $fd->getFamilyDoc($pmarray['familydoc_id']);
				$this->view->familydoc_id = $fdarr[0]['title'] . " " .$fdarr[0]['last_name'] . ", " . $fdarr[0]['first_name'];
				$this->view->fd_title = $fdarr[0]['title'];
				$this->view->fd_last_name = $fdarr[0]['last_name'];
				$this->view->fd_first_name = $fdarr[0]['first_name'];
				$this->view->fd_salutation = $fdarr[0]['salutation'];
				$this->view->phone_practice = $fdarr[0]['phone_practice'];
				$this->view->phone_private = $fdarr[0]['phone_private'];
				$this->view->doc_street1 = $fdarr[0]['street1'];
				$this->view->doc_zip = $fdarr[0]['zip'];
				$this->view->doc_city = $fdarr[0]['city'];
				$this->view->doc_fax = $fdarr[0]['fax'];
			}

			$dm = new DiagnosisMeta();
			$diagnosismeta = $dm->getDiagnosisMetaData(1);

			$this->view->diagnosismeta = $diagnosismeta;
			$this->view->jsdiagnosismeta = json_encode($diagnosismeta);

			/* ^^^^^^^^^^ Contact Person ^^^^^^^^^^^^^ */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);
			$contactgrid = new Pms_Grid($pcs, 1, count($pcs), "contacttemp.html");
			$this->view->contactgrid = $contactgrid->renderGrid();

			/* ^^^^^^^^^^ Health Insurance ^^^^^^^^^^^^^ */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if($phi)
			{
				$this->retainValues($phi[0]);
			}

			/* ^^^^^^^^^^ Patient Information ^^^^^^^^^^^^^ */
			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);
			$this->retainValues($pat_lives[0]);

			$pm = new PatientMobility();
			$pat_mob = $pm->getpatientMobilityData($ipid);
			$this->retainValues($pat_mob[0]);

			$ps = new PatientSupply();
			$pat_supply = $ps->getpatientSupplyData($ipid);
			$this->retainValues($pat_supply[0]);

			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$this->retainValues($pat_moreinfo[0]);

			$pms = new PatientMaintainanceStage();
			$this->view->stagearray = $pms->getMaintainanceDrop();
			$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);
			$this->retainValues($pat_pms[0]);

			/* ^^^^^^^^^^ Patient Location ^^^^^^^^^^^^^ */
			$pl = new PatientLocation();
			$plarr = $pl->getLastLocation($decid);
			$this->retainValues($plarr[0]);

			/* ^^^^^^^^^^ Main Diagnosis ^^^^^^^^^^^^^ */
			$pd = new PatientDiagnosis();
			$pdarr = $pd->getPatientMainDiagnosis($ipid, "diagnosis_icd");
			$this->view->meta_diagnosis = $pdarr[0]['diagnosis_id'];
			$this->view->hidd_meta_diagnosis = $pdarr[0]['id'];

			$dm = new DiagnosisIcd();
			$dmarr = $dm->getDiagnosisDataById($pdarr[0]['diagnosis_id']);
			$this->view->meta_icdnumber = $dmarr[0]['icd_primary'];

			/* ^^^^^^^^^^ Meta Dropdown ^^^^^^^^^^^^^ */
			$mt = new PatientDiagnosisMeta();
			$mtarr = $mt->getPatientDiagnosismeta($ipid);
			$meta_title[0] = $mtarr[0]['metaid'];
			$meta_title[1] = $mtarr[1]['metaid'];
			$meta_title[2] = $mtarr[2]['metaid'];

			$meta_title_hidd[0] = $mtarr[0]['id'];
			$meta_title_hidd[1] = $mtarr[1]['id'];
			$meta_title_hidd[2] = $mtarr[2]['id'];
			$this->view->meta_title = $meta_title;
			$this->view->meta_title_hidd = $meta_title_hidd;

			/* ^^^^^^^^^^ Diagnosis ^^^^^^^^^^^^^ */
			$abb = "'HD','ND'";
			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($clientid, $abb);
			$this->view->dtypearray = $darr;
			$this->view->jdarr = json_encode($darr);

			$a_diagno = array();

			if(is_array($_POST['hidd_diagnosis']))
			{
				foreach($_POST['hidd_diagnosis'] as $key => $val)
				{
					$a_diagno[$key]['hidd_icdnumber'] = $_POST['hidd_icdnumber'][$key];
					$a_diagno[$key]['icdnumber'] = $_POST['icdnumber'][$key];
					$a_diagno[$key]['diagnosis'] = $_POST['diagnosis'][$key];
					$a_diagno[$key]['tabname'] = $_POST['hidd_tab'][$key];
					$a_diagno[$key]['pdid'] = $_POST['hidd_ids'][$key];
					$a_diagno[$key]['hidd_diagnosis'] = $_POST['hidd_diagnosis'][$key];
					$a_diagno[$key]['meta_title1'] = $_POST['meta_title1'][$key];
					$a_diagno[$key]['meta_title2'] = $_POST['meta_title2'][$key];
					$a_diagno[$key]['meta_title3'] = $_POST['meta_title3'][$key];
				}
			}
			else
			{
				$comma = ",";
				$ipidval = "'0'";

				if(is_array($darr))
				{
					foreach($darr as $key => $val)
					{
						$ipidval .= $comma . "'" . $val['id'] . "'";
						$comma = ",";
					}
				}

				$ipid = Pms_CommonData::getIpid($decid);
				$diagns = new PatientDiagnosis();
				$a_diagno = $diagns->getFinalData($ipid, $ipidval);

				$diagno_cnt = count($a_diagno);
				
				/*ISPC - 2364 - sorted by user */
				$pdiaord = PatientDiagnoOrderTable::getInstance()->findDiagnoOrder($ipid);
				//RWH - ISPC-950
				//sort by icd
				if(empty($pdiaord))
				{
					$a_diagno = $this->array_sort($a_diagno, 'icdnumber', SORT_ASC);
					$a_diagno = array_values($a_diagno);
				
					//sort by type
					foreach($darr as $k_diag_type => $v_diag_type)
					{
						foreach($a_diagno as $k_diag => $v_diag)
						{
							if($v_diag_type['id'] == $v_diag['diagnosis_type_id'])
							{
								$a_diagno_sorted[] = $v_diag;
							}
						}
					}
					//RWH end
				}
				else
				{
					$a_diagno = array_column($a_diagno, null, 'pdid');
					$pdorder = $pdiaord[0]['diagno_order'];
						
					$diagnaddother = array_diff(array_keys($a_diagno), $pdorder);
					$diagnremoveother = array_diff($pdorder, array_keys($a_diagno));
						
					if($diagnaddother)
					{
						$pdorder = array_merge($pdorder, $diagnaddother);
					}
						
					if($diagnremoveother)
					{
						$pdorder = array_diff($pdorder, $diagnremoveother);
					}
						
					$a_diagno_sorted = [];
					foreach ($pdorder as $pdid) {
						$a_diagno_sorted[] = $a_diagno[$pdid];
					}
				}
				$a_diagno = $a_diagno_sorted;

				if($diagno_cnt < 3)
				{
					for($i = ($diagno_cnt + 1); $i <= 6; $i++)
					{
						$a_diagno[$i]['tabname'] = "";
						$a_diagno[$i]['icdnumber'] = "";
						$a_diagno[$i]['hidd_icdnumber'] = "";
						$a_diagno[$i]['diagnosis'] = "";
						$a_diagno[$i]['pdid'] = "";
						$a_diagno[$i]['hidd_diagnosis'] = "";
						$a_diagno[$i]['diagnosis_type_id'] = "";
						$a_diagno[$i]['meta_title1'] = "";
						$a_diagno[$i]['meta_title2'] = "";
						$a_diagno[$i]['meta_title3'] = "";
					}
				}
			}

			$this->view->jscount = count($a_diagno);

			$meta_data = PatientDiagnosisMeta::getPatientDiagnosismeta($ipid);

			foreach($meta_data as $kx => $mvas_data)
			{
				$meta_diagnosis[$mvas_data['diagnoid']][] = $mvas_data['metaid'];
			}

			$grid = new Pms_Grid($a_diagno, 1, count($a_diagno), "listdiagnosis.html");

			$grid->meta_diagnosis = $meta_diagnosis;
			$grid->gridview->dtypearray = $darr;
			$this->view->diagno = $grid->renderGrid();
			$this->view->rowcount = count($a_diagno);

			/* ^^^^^^^^^^ Medication ^^^^^^^^^^^^^ */
			$medic = new PatientDrugPlan();
			$medicarr = $medic->getMedicationPlan($decid);

			if(count($medicarr < 1))
			{
				$this->view->mcntr = 0;
			}

			$this->view->jsmedcount = count($medicarr);
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "medicationgrid.html");
			$this->view->medicgrid = $grid->renderGrid();
			$this->view->isrecords = count($medicarr);

			/*			 * *********************Bedarfs Medication ******************** */
			$medicb = new PatientDrugPlan();
			$bmedicarr = $medicb->getbedarfMedication($decid);

			if(count($bmedicarr < 1))
			{
				$this->view->mcntr = 0;
			}

			$this->view->jsbmedcount = (count($bmedicarr) + 9999);
			foreach($bmedicarr as $key => $valmb)
			{

				$bedarfsarr[($key + 9999)] = $valmb;
				$bedarfsarr[($key + 9999)]['cnt'] = ($key + 9999);
			}

			$grid = new Pms_Grid($bedarfsarr, 1, (count($bedarfsarr) + 9999), "medicationbedarfgrid.html");
			$this->view->bmedicgrid = $grid->renderGrid();
			$this->view->bisrecords = count($bmedicarr);
		}

		public function removeanonimityAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->_helper->layout->setLayout('layout');
			$this->_helper->viewRenderer->setNoRender();

			if($logininfo->showinfo == "hide")
			{
				$logininfo->showinfo = "show";
			}
			elseif($logininfo->showinfo == "show")
			{
				$logininfo->showinfo = "hide";
			}
			else
			{
				$logininfo->showinfo = "show";
			}

			$this->_redirect(APP_BASE . "overview/overview");
		}

		public function folgeverordnungAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$clientid = $logininfo->clientid;
			$ipid = Pms_CommonData::getIpid($decid);

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			/* ######################################################### */

			$a_post = array();
			if($handle = opendir("folgeverordnungupload/" . $clientid))
			{
				$count = 0;
				$filearr = array();
				while(false !== ($file = readdir($handle)))
				{
					if($file != "." && $file != "..")
					{
						$filearr[] = $file;
						$count++;
					}
				}
				closedir($handle);
			}

			if(strlen($filearr[0]) > 0)
			{
				$imagepath = "folgeverordnungupload/" . $clientid . "/" . $filearr[0];
			}
			else
			{
				$imagepath = "images/pdf-header.jpg";
			}
			$this->view->imagepath = $imagepath;


			$clientarr = Pms_CommonData::getClientData($clientid);
			$this->view->clientname = $clientarr[0]['client_name'];
			$this->view->clientstreet = $clientarr[0]['street1'];
			$this->view->clientphone = $clientarr[0]['phone'];
			$this->view->clientfax = $clientarr[0]['fax'];
			$this->view->client_team_name = $clientarr[0]['team_name'];

			$patientmaster = new PatientMaster();
			$patientdetails = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $patientdetails['last_name'] . ", " . $patientdetails['first_name'];
			$this->view->patientaddress = $patientdetails['street1'];
			$this->view->patientphone = $patientdetails['phone'];
			$this->view->patientfax = $patientdetails['fax'];
			$this->view->currrentdate = date('d.m.Y', time());
			$this->view->patientbirthd = date('d.m.Y', strtotime($patientdetails['birthd']));

			$ver = new SapvVerordnung();
			$verdata = $ver->getLastSapvVerordnungData($ipid, true);

			if($verdata[0]['verordnungbis'] != '0000-00-00 00:00:00' && $verdata[0]['verordnungbis'] != "")
			{
				$verordnungbis = date('d.m.Y', strtotime($verdata[0]['verordnungbis']));
			}

			if($verdata[0]['verordnet_von'])
			{
				$verordnerarray = $ver->get_verordnet_von($verdata[0]['verordnet_von'], $verdata[0]['verordnet_von_type'], true);
				$this->view->verordnet_von = $verordnerarray['name'];
				$this->view->von_address = $verordnerarray['extra'];

			}
			$this->view->verordnungbis = $verordnungbis;

			/* -----------------------User specific  LanNr----------------------------------- */
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->user_lanr = $uarray['LANR'];
			}

			// client ik
			$this->view->health_insurance_iknumber = $clientarr[0]['institutskennzeichen'];
			// client  betriebsstattennummer
			$this->view->user_betriebsstatten_nr = $clientarr[0]['betriebsstattennummer'];

			if($this->getRequest()->isPost())
			{
				$a_post = $_POST;
				$a_post['imagepath'] = $imagepath;
				$a_post['clientstreet'] = $clientarr[0]['street1'];
				$a_post['clientphone'] = $clientarr[0]['phone'];
				$a_post['clientfax'] = $clientarr[0]['fax'];
				$a_post['client_team_name'] = $clientarr[0]['team_name'];

				$a_post['health_insurance_iknumber'] = $this->view->health_insurance_iknumber;
				$a_post['user_betriebsstatten_nr'] = $this->view->user_betriebsstatten_nr;
				$a_post['user_lanr'] = $this->view->user_lanr;

				$a_post['patient_name'] = $patientdetails['first_name'] . " " . $patientdetails['last_name'];
				$a_post['patientaddress'] = $patientdetails['street1'];
				$a_post['patientphone'] = $patientdetails['phone'];
				$a_post['patientfax'] = $patientdetails[0]['fax'];
				$a_post['von_name'] = $von_name;

				$this->generateformPdf(3, $a_post, 'folgeverordnung', "folgeverordnungpdf.html");
			}
		}

		public function imagetagAction()
		{
			
		}

		public function addtagAction()
		{
			echo '({
		"result":true,
		"tag": {
			"id":' . rand(100, 1000) . ',
			"text": "' . $_REQUEST['name'] . '",
			"left": ' . $_REQUEST['left'] . ',
			"top": ' . $_REQUEST['top'] . ',
			"width": ' . $_REQUEST['width'] . ',
			"height": ' . $_REQUEST['height'] . ',
			"url": "person.php?id=800",
			"isDeleteEnable": true
		}
	})';
			exit;
		}

		public function phototagsAction()
		{

			echo '({
	"Image" : [
		{
		"id":150,
		"Tags":[
			{
			"id":200,
			"text":"Cancer",
			"left":250,
			"top":50,
			"url": "person.php?id=200",
			"isDeleteEnable": true
			},
			{
			"id":400,
			"text":"LungInfection",
			"left":95,
			"top":100,
			"url": "person.php?id=200",
			"isDeleteEnable": true
			},
			{
			"id":500,
			"text":"LiverDamage",
			"left":65,
			"top":140,
			"url": "person.php?id=500",
			"isDeleteEnable": true
			}
		]
		}
	],
	"options":{
		"literals": {
			"removeTag": "Remove tag"
		},
		"tag":{
			"flashAfterCreation": true
		}
	}

	})';
			exit;
		}

		public function deleteTagAction()
		{
			echo '({"result":true,"message":"ooops"})';
			exit;
		}

		public function stammdatenerweitertAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->patid = $decid;
			$ipid = Pms_CommonData::getIpid($decid);
			$pid = $this->view->$_GET['id'];
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->view->clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$stam = new Stammdatenerweitert();
			$this->view->familienstands = $stam->getFamilienstandfun();
			$this->view->stastszugehorigkeits = $stam->getStastszugehorigkeitfun();
			$this->view->vigilanzs = $stam->getVigilanzfun();
			$this->view->orientierungs = $stam->getOrientierungfun();
			$this->view->ernahrungs = $stam->getErnahrungfun();
			$this->view->ausscheidungs = $stam->getAusscheidungfun();
			$this->view->kunstliches = $stam->getKunstlichefun();
			$this->view->radiobuttonoptions = $stam->getRadioOptionsfun();

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$stam = new Application_Form_Stammdatenerweitert();
			if($this->getRequest()->isPost())
			{
				$a_post = $_POST;
				$a_post['ipid'] = $ipid;
				$stam->InsertData($a_post);
			}
			else
			{
				$stam->assignErrorMessages();
				$this->retainValues($_POST);
			}

			$st = new Stammdatenerweitert();
			$stamarr = $st->getStammdatenerweitert($ipid);

			$stamstr = "";

			if($stamarr[0]['familienstand'] > 0)
			{
				$stamstr.="grow16,";
			}

			if($stamarr[0]['vigilanz'] > 0)
			{
				$stamstr.="grow18,";
			}

			if($stamarr[0]['stastszugehorigkeit'] > 0)
			{
				$stamstr.="grow17,";
			}

			if(strlen($stamarr[0]['ernahrung']) > 0)
			{
				$stamstr.="grow20,";
			}

			if(strlen($stamarr[0]['kunstliche']) > 0)
			{
				$stamstr.="grow22,";
			}

			if(strlen($stamarr[0]['orientierung']) > 0 || $stamarr[0]['sprachlich'] > 0 || $stamarr[0]['kognitiv'] > 0 || $stamarr[0]['horprobleme'] > 0)
			{
				$stamstr.="grow19,";
			}

			if(strlen($stamarr[0]['ausscheidung']) > 0)
			{
				$stamstr.="grow21,";
			}

			$this->retainValues($stamarr[0]);
			$this->view->ernahrung = explode(',', $stamarr[0]['ernahrung']);
			$this->view->orientierung = explode(',', $stamarr[0]['orientierung']);
			$this->view->kunstliche = explode(',', $stamarr[0]['kunstliche']);
			$this->view->ausscheidung = explode(',', $stamarr[0]['ausscheidung']);

			$detailscookies = '""';
			$oc = new OverviewCookie();
			$ocarr = $oc->getCookieData($userid, "stammdatenerweitert");

			switch($ocarr[0]['useroption'])
			{
				case 1 : $detailscookies = "";
					break;
				case 2 : $detailscookies = $stamstr;
					break;
				case 3 : $detailscookies = $ocarr[0]['cookie'] . ",";
					break;
				default : break;
			}

			$this->view->detailscookies = "'" . $detailscookies . "'";

			/* ######################################################### */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ######################################################### */
		}

		public function setoverviewcookieAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$this->_helper->layout->disableLayout();
			$cookie = $_GET['ck'];
			$oc = new Application_Form_OverviewCookie();
			$a_post['cookie'] = $cookie;
			$a_post['page_name'] = "patientdetails";
			$oc->InsertData($a_post);
		}

		public function checkpatientexistAction()
		{
			$this->_helper->layout->setLayout('layout_basic');

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$bd = date("Y-m-d", strtotime($_GET['bdval']));
			if($_GET['isframe'] == 1)
			{
				$this->_helper->viewRenderer('patientexistframe');
			}
			else
			{
				$this->_helper->viewRenderer->setNoRender();


				$ipid = Doctrine_Query::create()
					->select('ipid')
					->from('EpidIpidMapping')
					->where("clientid='" . $clientid . "'");
				$ipids_res = $ipid->fetchArray();

				$ipids_ids[] = '9999999999';
				foreach($ipids_res as $k_ipid_res => $v_ipid_res)
				{
					$ipids_ids[] = $v_ipid_res['ipid'];
				}



				$drop = Doctrine_Query::create()
					->select("*,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
				AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
				AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
				AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
				AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,
				AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,
				AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,
				AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip
				,AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city
				,AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone
				,AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') as mobile
				,AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex
				,AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex")
					->from('PatientMaster p')
//					->where('ipid in (' . $ipid->getDql() . ')')
					->whereIn('ipid', $ipids_ids)
					->andWhere("trim(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) =  ?  and 
							trim(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) = ? or 
							(trim(lower(convert(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1))) = ? and birthd = ?) or 
							(trim(lower(convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1))) = ? and birthd = ?) "
							,array(
									trim(mb_strtolower($_GET['fnval'], 'UTF-8')),
									trim(mb_strtolower($_GET['lnval'], 'UTF-8')),
									trim(mb_strtolower($_GET['fnval'], 'UTF-8')),$bd,
									trim(mb_strtolower($_GET['lnval'], 'UTF-8')),$bd
							))
					->andWhere('isdelete = 0')
					->orderBy('last_name ASC');
				$patarr = $drop->fetchArray();

				if($patarr)
				{
					$grid = new Pms_Grid($patarr, 1, count($patarr), "listpatientexists.html");
					$this->view->patgrid = $grid->renderGrid();
					$response['msg'] = "Success";
					$response['error'] = "";
					$response['callBack'] = "PatientExist";
					$response['callBackParameters'] = array();
					$response['callBackParameters']['arraycount'] = count($patarr);
					$response['callBackParameters']['patientlist'] = $grid->renderGrid();

					echo json_encode($response);
					exit;
				}//if
			}//norframe
		}

		public function addressbookAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$adminvisible = PatientMaster::getAdminVisibility($ipid);

			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->real_contact_number = $parr['kontactnumber_dec'];
			$this->view->kontactnumbertype = $parr['kontactnumbertype'];
			
			
			if(!$adminvisible && $logininfo->usertype == 'SA')
			{
				$hide_patient_tab = true;
			}
			else
			{
				$hide_patient_tab = false;
			}

			$this->view->hide_patient_tab = $hide_patient_tab;

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$familydegree = new FamilyDegree();
			$cnt_degree_array = $familydegree->getFamilyDegrees(1);
			$this->view->degree = $cnt_degree_array;

			if($this->getRequest()->isPost())
			{
				if(empty($_POST['hiddedtid']))
				{
					//insert new
					$post = $_POST;
					$post['userid'] = $logininfo->userid;
					$post['clientid'] = $logininfo->clientid;
					$loc = new Application_Form_UsersLocations();
					$locationInsert = $loc->InsertData($post);
				}
				else
				{
					//update existing hidden id
					$post = $_POST;
					$post['userid'] = $logininfo->userid;
					$post['clientid'] = $logininfo->clientid;

					$loc = new Application_Form_UsersLocations();
					$locationUpdate = $loc->UpdateData($post);
				}
			}

			if($_REQUEST['step'] == "del")
			{
				//TO DO: delete action
				$mod = Doctrine::getTable('UsersLocations')->find($_REQUEST['delid']);
				$mod->isdelete = 1;
				$mod->save();
				echo "Done";
				exit;
			}
			
			
			// Hausarzt
			$famdoc = FamilyDoctor::getFamilyDoctors($ipid);
			$this->view->fam_doctor = sizeof($famdoc);
			$fam_doctor['practice'] = $famdoc[0]['practice'];
			$fam_doctor['first_name'] = $famdoc[0]['first_name'];
			$fam_doctor['last_name'] = $famdoc[0]['last_name'];
			$fam_doctor['salutation'] = $famdoc[0]['salutation'];
			$fam_doctor['title'] = $famdoc[0]['title'];
			$fam_doctor['street1'] = $famdoc[0]['street1'];
			$fam_doctor['zip'] = $famdoc[0]['zip'];
			$fam_doctor['city'] = $famdoc[0]['city'];
			$fam_doctor['phone_practice'] = $famdoc[0]['phone_practice'];
			$fam_doctor['phone_cell'] = $famdoc[0]['phone_cell'];
			$fam_doctor['fax'] = $famdoc[0]['fax'];
			$fam_doctor['email'] = $famdoc[0]['email'];
			$fam_doctor['doctornumber'] = $famdoc[0]['doctornumber'];
			$fam_doctor['medical_speciality'] = $famdoc[0]['medical_speciality'];
			$fam_doctor['comments'] = $famdoc[0]['comments'];
			$this->view->family_doctor = $fam_doctor;
			$this->view->fam_doctor_id = $famdoc[0]['id'];
			
			//Pflegedienst
			$pfleg = Pflegedienstes::getPflegedienstes($ipid);
			if($pfleg > 0)
			{
				$this->view->pat_pfleg = $pfleg;
			}
			
			// Pharmacy
			$pharmacy = new PatientPharmacy(); 
			$pharm_pat = $pharmacy->getPatientPharmacy($ipid);
			if(sizeof($pharm_pat) > 0){
				$this->view->pat_pharmacy = $pharm_pat;
			}
			
			//Ansprechpartner
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);
			$this->view->patient_contacts = $pcs;

			
			//Krankenkassen
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);
			$this->view->patient_healthinsurance = $phi;

			
			//Facharzt
			$m_specialists_types = new SpecialistsTypes();
			$specialists_types  =$m_specialists_types->get_specialists_types($logininfo->clientid);
		 
		 	if(!empty($specialists_types)){
		 		foreach($specialists_types as $k=>$tp){
		 			$s_type[$tp['id']] = $tp['name'];
		 		}
		 	}
			$this->view->s_type =$s_type;		 
			$specialists = new PatientSpecialists();
			$specialists_arr = $specialists->get_patient_specialists($ipid, true);
			
			if(count($specialists_arr))
			{
				$this->view->patient_specialists = $specialists_arr;
			}
			
			//Sanitatshauser
			$m_supplies =  new PatientSupplies();
			$p_spupplies =$m_supplies->getPatientSupplies($ipid);
			if(count($p_spupplies))
			{
				$this->view->patient_spupplies = $p_spupplies;
			}
			
			//sonst. Versorger
			$suppliers = new PatientSuppliers();
			$pat_suppliers = $suppliers->getPatientSuppliers($ipid);
			if(sizeof($pat_suppliers) > 0)
			{
				$this->view->patient_suppliers = $pat_suppliers;
			}
			
			//Physiotherapist
			$physiotherapists = new PatientPhysiotherapist();
			$pat_physio = $physiotherapists->getPatientPhysiotherapist($ipid);
			if(sizeof($pat_physio) > 0)
			{
				$this->view->patient_physioterapeuten = $pat_physio;
			}

			//Homecare
			$m_homecare = new PatientHomecare();
			$pat_homecare = $m_homecare->getPatientHomecare($ipid);
			if(sizeof($pat_homecare) > 0)
			{
				$this->view->patient_homecare = $pat_homecare;
			}
			
			if($_REQUEST['case'] == 'import')
			{
				$this->_helper->layout->setLayout('layout_basic');
				$this->_helper->viewRenderer('addressbookimport');
			}
		}

		public function changetrafficAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userid = $logininfo->userid;
			//ISPC - 2310 - team meeting - change status directly in team meeting
			if((!empty($_REQUEST['status_id']) && !empty($_REQUEST['patienttrid'])) || (!empty($_REQUEST['status_id']) && !empty($_REQUEST['pid'])))
			{
				$status_id = $_REQUEST['status_id'];
				if(!empty($_REQUEST['patienttrid']))
				{
					$patid = $_REQUEST['patienttrid'];					
					$decid = Pms_Uuid::decrypt($_REQUEST['patienttrid']);
					//$ipid = Pms_CommonData::getIpId($decid);
					//$cust = Doctrine::getTable('PatientMaster')->find($decid);
				}
				elseif(!empty($_REQUEST['pid']))
				{
					$decid = $_REQUEST['pid'];
					$patid = Pms_Uuid::encrypt($decid);
				}
				

				$existing_patient_data = array();
				$ipid = Pms_CommonData::getIpId($decid);
				$cust = Doctrine::getTable('PatientMaster')->find($decid);
				$existing_patient_data = $cust->toArray();
				$cust->traffic_status = $status_id;
				$cust->save();

				$status_array = array("1" => "normal, keine Krise", "2" => "Achtung, instabil", "3" => "Krise ", "4" => "Sterbend ");
				$comment = 'Der Status des Patienten wurde auf ' . $status_array[$status_id] . ' gesetzt';
				
				//@TODO	Add email for krise. // new Krise patient . send / dont send (assigned / all)
				if($_REQUEST['status_id'] == "3")
				{
					//SEND MESSAGE$decid
					$messages = new Messages();
					//$krise_notification = $messages->krise_notification($_REQUEST['patienttrid'], $ipid);
					$krise_notification = $messages->krise_notification($patid, $ipid);
				}

				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->user_id = $userid;
				$cust->save();
				/*
				// Check if patient already has 
				$pch = Doctrine::getTable('PatientCrisisHistory')->find($ipid);

				if(empty($pch)){
				    // get current and save 
				    $cust_psh = new PatientCrisisHistory();
				    $cust_psh->ipid = $ipid;
				    $cust_psh->status_date = $existing_patient_data['admission_date'];
				    $cust_psh->crisis_status = $existing_patient_data['traffic_status'];
				    $cust_psh->status_create_user = $userid;
				    $cust_psh->save();				    
				} 
				*/
				// ISPC-2400
				$cust_psh = new PatientCrisisHistory();
				$cust_psh->ipid = $ipid;
				$cust_psh->status_date = date("Y-m-d H:i:s", time());
				$cust_psh->crisis_status = $status_id;
				$cust_psh->status_create_user = $userid;
				$cust_psh->save();
				
				
				// ISPC-2491 Ancuta 29.11.2019
				$clientid = $logininfo->clientid;
				$previleges = new Modules();
				$module208_allow_todos= $previleges->checkModulePrivileges("208", $clientid);
				
				if($module208_allow_todos)
				{
				    $client_todos_obj= new ClientTodos();
				    $send_todos = $client_todos_obj->send_statusChange_todos($clientid,$userid,$ipid,"patient_status_change");
				}
				//--
							
				
			}
			exit;
		}

		public function vollversorgungeditAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$ipid = Pms_CommonData::getIpId($decid);
			/* ######################################################### */

			$decid = Pms_Uuid::decrypt($_GET['id']);
			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->pid = $_REQUEST['id'];

			$vvhistory = new VollversorgungHistory();
			$historyvv = $vvhistory->getVollversorgungHistoryAll($ipid);

			$error = 0;
			if($this->getRequest()->isPost())
			{
				foreach($_POST['valid_from'] as $keyDate => $valDate)
				{
					if(!empty($_POST['valid_till'][$keyDate]))
					{
						if(strtotime($_POST['valid_till'][$keyDate]) < strtotime($valDate))
						{
							$error++;
						}
					}
				}

				if($error == 0)
				{
					//delete all entries by ipid
					$Q = Doctrine_Query::create()
						->delete('VollversorgungHistory')
						->Where("ipid='" . $ipid . "'");
					$Q->execute();

					$reper = count($_POST['valid_from']);
					$c = 1;
					//insert values from post
					foreach($_POST['valid_from'] as $keyDate => $valDate)
					{
						if(strlen(trim($valDate)) > '0')
						{
							$ins = new VollversorgungHistory();
							$ins->user_id = $logininfo->userid;
							$ins->ipid = $ipid;
							$ins->date = date("Y-m-d H:i:s", strtotime($valDate));
							$ins->date_type = "1";
							$ins->save();

							//insert valid till only if we have a value
							if(!empty($_POST['valid_till'][$keyDate]))
							{
								$ins = new VollversorgungHistory();
								$ins->user_id = $logininfo->userid;
								$ins->ipid = $ipid;
								$ins->date = date("Y-m-d H:i:s", strtotime($_POST['valid_till'][$keyDate]));
								$ins->date_type = "2";
								$ins->save();
							}

							//edit last valid from into patient master
							if($reper == $c)
							{
								$custpm = Doctrine::getTable('PatientMaster')->find($decid);
								$custpm->vollversorgung_date = date("Y-m-d H:i:s", strtotime($_POST['valid_from'][$keyDate]));
								$custpm->save();
							}
							$c++;
						}
					}
					$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_REQUEST['id']);
				}
				else
				{
					$this->view->error = '<div style="color:red;">bis heute sind mehr als ab-Datum</div>';
				}
			}


			if($error == 0)
			{ //in case of no errors show db contents
				$i = 0;
				foreach($historyvv as $keyh => $valh)
				{

					if($valh['date_type'] == 1)
					{
						$DatesHistory[$i]['valid_from'] = $valh['date'];
					}
					else if($valh['date_type'] == 2)
					{
						$DatesHistory[$i]['valid_till'] = $valh['date'];
						$i++;
					}
					else
					{
						$DatesHistory[$i]['valid_till'] = "-";
						$i++;
					}
				}
			}
			else
			{
				//in case of error show inserted values
				$i = 0;
				foreach($_POST['valid_from'] as $keyDate => $valDate)
				{
					$DatesHistory[$i]['valid_from'] = $valDate;
					$DatesHistory[$i]['valid_till'] = $_POST['valid_till'][$keyDate];
					$i++;
				}
			}

			if((count(end($DatesHistory)) % 2) == 1)
			{
				$DatesHistory[(count($DatesHistory) - 1)]['valid_till'] = "";
			}

			$grid = new Pms_Grid($DatesHistory, 1, count($DatesHistory), "listvollversorgungedit.html");
			$this->view->vollversorgungtable = $grid->renderGrid();

			/*			 * ******* Patient Information ************ listvollversorgungedit */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function btmbuchAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$this->view->userid = $userid;
			$groupid = $logininfo->groupid;
			$btm_perms = new BtmGroupPermissions();
			$ipid = Pms_CommonData::getIpid($decid);
			$Tr = new Zend_View_Helper_Translate();

//		$methodsarr = array("1"=>"Übergabe von","2"=>"Lieferung","3"=>"Sonstiges","4"=>"Übergabe an","5"=>"Abgabe an Patienten","6"=>"Sonstiges","7"=>"Abgabe an Patienten","8"=>"Verbrauch","9"=>"Rücknahme von Patienten", '10'=>'', '11'=>'');
// 			$methodsarr = array("1" => "Übergabe von", "2" => "Lieferung", "3" => "Sonstiges", "4" => "Übergabe an", "5" => "Abgabe an Patienten", "6" => "Sonstiges", "7" => "Abgabe an Patienten", "8" => "Verbrauch", "9" => "Rücknahme von Patienten", '10' => '', '11' => '', '12' => '');
			$methodsarr = Medication::get_methodsarr();
			
			//new method names for verlauf grid
			foreach($methodsarr as $k_method => $v_method)
			{
				if($this->view->translate('btm_tresor_' . $k_method) != 'btm_tresor_' . $k_method)
				{
					$grid_methods_arr['tresor'][$k_method] = $this->view->translate('btm_tresor_' . $k_method);
				}

				if($this->view->translate('btm_user_' . $k_method) != 'btm_user_' . $k_method)
				{
					$grid_methods_arr['user'][$k_method] = $this->view->translate('btm_user_' . $k_method);
				}

				if($this->view->translate('btm_patient_' . $k_method) != 'btm_patient_' . $k_method)
				{
					$grid_methods_arr['patient'][$k_method] = $this->view->translate('btm_patient_' . $k_method);
				}

				asort($grid_methods_arr['tresor']);
				asort($grid_methods_arr['user']);
				asort($grid_methods_arr['patient']);
			}

			/* ######################################################### */
			$btm_perms = new BtmGroupPermissions();
			$btm_permisions = $btm_perms->get_group_permissions($clientid, Usergroup::getMasterGroup($groupid));
			$this->view->lieferung_method = $btm_permisions['method_lieferung'];
			$this->view->btm_permisions = $btm_permisions;
			
			if($btm_permisions['use'] != '1')
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			/*			 * ****************************************** */
			/*			 * ********* Patient Information ************ */
			/*			 * ****************************************** */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$allpatientinfo = $patientmaster->getMasterData($decid, 0);
			$allpatientinfo = $patientmaster->get_patientMasterData();

			$patname = $allpatientinfo['first_name'] . ', ' . $allpatientinfo['last_name'];
			$pataddress = $allpatientinfo['street1'] . ', ' . $allpatientinfo['zip'] . ' ' . $allpatientinfo['city'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/*			 * ***************************************** */
			if($this->getRequest()->isPost())
			{
				$post = $_POST;

				//estabilish the post source (btm icon or btm patient)
				if($_POST['source'] == 'icon')
				{
					if(strlen($_POST['method']) > '0')
					{
						if($_POST['method'] == '7' || $_POST['method'] == '10')
						{
							$post['operation'] = '1';
						}
						else if($_POST['method'] == '8' || $_POST['method'] == '9' || $_POST['method'] == '11')
						{
							$post['operation'] = '2';
						}
					}
				}

				if(empty($_POST['add']['hidd_medication'][1]))
				{
					$medi = Doctrine::getTable('Medication')->find($post['medicationid']);
					$mediarray = $medi->toArray();
					$post['medication'] = $mediarray;

					$medclihist = new Application_Form_MedicationPatientHistory();
					$medclihist->insertData($post);
				}
				else
				{
					if(!MedicationPatientHistory::check_new_entries($clientid, $ipid, $post['add']['hidd_medication'][1]))
					{
						$medi = Doctrine::getTable('Medication')->find($_POST['add']['hidd_medication'][1]);
						$mediarray = $medi->toArray();
						$post['medication'] = $mediarray;

						$medclihist = new Application_Form_MedicationPatientHistory();
						$medclihist->insertNewMedication($post);
					}
				}

				if($_POST['source'] == 'icon')
				{
					exit;
					
				} else {
				    $this->_redirect(APP_BASE . 'patient/btmbuch?id=' . $_GET['id']);
					exit;
				}
				
			}

			$medipat = new MedicationPatientHistory();
			$patientHistoryArray = $medipat->getAllMedicationPatientHistory($clientid, $ipid);

			$medisstr = "'99999999999999'";
			$comma = ",";
			foreach($patientHistoryArray as $medication)
			{
				$medicationsarr[$medication['medicationid']] = $medication;
				$medisstr .= $comma . "'" . $medication['medicationid'] . "'";
				$comma = ",";
				$medissarr[] = $medication['medicationid'];
			}
			$medissarr[] = "9999999999999999";

//		$btmcmedis = Doctrine_Query::create()
//		->select("distinct(medicationid)")
//		->from('MedicationClientStock')
//		->Where("clientid = '".$clientid."'")
//		->orderBy('id ASC');
//		$btmcmedisarray = $btmcmedis->fetchArray();
//
//		foreach($btmcmedisarray as $key=>$btmclientmedis){
//			$btmClientMeds[] = $btmclientmedis['distinct'];
//		}
//		$btmClientMeds[] = '999999999';
//		$med_client_history = new MedicationClientHistory();
//		$med_client = $med_client_history->getDataForUsers($clientid, $userid);
			$stocks = new MedicationClientStock();
			$med_client = $stocks->getAllMedicationClientStock($clientid);

			$btmClientMeds[] = '99999999';
			foreach($med_client as $k_usr_meds => $v_usr_meds)
			{
				$btm_user_med_stock[$v_usr_meds['medicationid']][$v_usr_meds['userid']] = $v_usr_meds['total'];
				$btmClientMeds[] = $v_usr_meds['medicationid'];
			}

			$med = Doctrine_Query::create()
				->select('*')
				->from('Medication')
				->where('isdelete = 0 ')
				->andWhere('name!=""')
				->andWhereIn('id', $btmClientMeds)
				->andWhere('clientid = ' . $clientid . '');
			$medarray = $med->fetchArray();

			foreach($medarray as $medication)
			{
				if($medication['id'] == $medicationsarr[$medication['id']]['medicationid'])
				{
					$medicationsarray[$medication['id']] = $medication;
					$medicationsarray[$medication['id']]['total'] = $medicationsarr[$medication['id']]['total_amount'];
				}

				$medicationSelector[$medication['id']] = $medication['name'];
			}

			$this->view->medicationSelector = $medicationSelector;
			$users = Doctrine_Query::create()
				->select("*")
				->from("User")
				->where('id ="' . $userid . '"')
				->andWhere('isactive = 0')
				->andWhere('isdelete=0');
			$usersArray = $users->fetchArray();

			foreach($usersArray as $user)
			{
				$users_final_arr[$user['id']] = $user['last_name'] . ", " . $user['first_name'];
			}
			$this->view->usersSelect = $users_final_arr;

			$aUsers = Doctrine_Query::create()
				->select("*")
				->from("User")
				->where('clientid = "' . $clientid . '"')
				->orWhere('usertype="SA"')
				->orWhere('usertype="CA"')
				->andWhere('isactive = 0')
				->andWhere('isdelete=0');
			$allUsersArray = $aUsers->fetchArray();

			$allUsers[0] = "Gruppe / Tresor";
			foreach($allUsersArray as $user)
			{
				$allUsers[$user['id']] = $user['last_name'] . ", " . $user['first_name'];
			}
			$this->view->allUsers = $allUsers;

			//get btm data for all users
			$btmbuch = new MedicationClientHistory();
			$btm = $btmbuch->getDataForUsers($clientid);

			foreach($btm as $record)
			{
				$btmuserdata[$record['medicationid']][$record['userid']]['total'] = $record['total'];
			}

			//get stocks  and append to final btmdata array
			$stocks = new MedicationClientStock();
			$stksarray = $stocks->getAllMedicationClientStock($clientid);

			foreach($users_final_arr as $kUserid => $vUser)
			{
				foreach($stksarray as $stock)
				{
					if($stock['userid'] == $kUserid)
					{
						$btmuserdata[$stock['medicationid']][$stock['userid']]['total'] = $stock['total'];
					}
					else if(empty($btmuserdata[$stock['medicationid']][$kUserid]['total']))
					{
						$btmuserdata[$stock['medicationid']][$kUserid]['total'] = "0";
					}
				}
			}

			$this->view->userData = $btmuserdata;

			$grid = new Pms_Grid($medicationsarray, 1, count($medicationsarray), "listbtmpatient.html");
			$this->view->btmpatientgrid = $grid->renderGrid();

			$pVerlaufArr = $medipat->getVerlaufMedicationPatientHistory($clientid, $ipid);
			
			//ispc 1864 - remove methodid 13 and add correction with red
			foreach($pVerlaufArr as $k => &$row) {
				if ( $row['methodid'] == 13) {
					unset($pVerlaufArr[$k]);
				} else {
					$row['table_name'] = 'MedicationPatientHistory';
				}
			}
			
			if ( ! empty($pVerlaufArr) ) {
				 
				$corrections_array = array();
				$row_id = array_column($pVerlaufArr, 'id') ;
				$mcbtmc = new MedicationClientBTMCorrection();
				
				$btmbuchhistory_lang =  $this->view->translate('btmbuchhistory_lang');
				$correction_event_text = "<br>" . $btmbuchhistory_lang['correction_event_text'];
				
				$corrections = $mcbtmc->get_by_correction_table_correction_id ('MedicationPatientHistory', $row_id , $logininfo->clientid);
				foreach($corrections as $rowa) {
					
					
					
					$rowa['correction_event_text_row'] = sprintf($correction_event_text, abs($rowa['amount_original']), abs($rowa['amount']), $allUsers[$rowa['create_user']], date("d.m.Y H:i", strtotime($rowa['create_date'])));
					if (trim($rowa['comment']) !='' ){
						$rowa['correction_event_text_row'] .= "<br>[".$rowa['comment'] ."]";
					}
					$corrections_array[$rowa['correction_table']][$rowa['correction_id']] = $rowa;
					
				}
				 
				$cnt = 0;
					
			}
			
			
			$x = 1;
			foreach($pVerlaufArr as $dataPatientHistory)
			{
				$patientFinalHistoryArray[date("dmYHi", strtotime($dataPatientHistory['create_date']))]['sumary'][$dataPatientHistory['id']] = $dataPatientHistory;
				
				//ispc 1864 - remove methodid 13 and add correction with red
				if ( ! empty($corrections_array[$dataPatientHistory['table_name']][$dataPatientHistory['id']])) {
					$patientFinalHistoryArray[date("dmYHi", strtotime($dataPatientHistory['create_date']))]['sumary'][$dataPatientHistory['id']] ['correction_event'] = $corrections_array[$dataPatientHistory['table_name']][$dataPatientHistory['id']];
				}
				
				if($dataPatientHistory['methodid'] == 0)
				{
					$patientFinalHistoryArray[date("dmYHi", strtotime($dataPatientHistory['create_date']))]['sumary'][$x] = $dataPatientHistory;
					$patientFinalHistoryArray[date("dmYHi", strtotime($dataPatientHistory['create_date']))]['sumary'][$x]['type'] = "N"; //new
					$patientFinalHistoryArray[date("dmYHi", strtotime($dataPatientHistory['create_date']))]['date'] = date("d.m.Y H:i", strtotime($dataPatientHistory['create_date']));
				}
				if($dataPatientHistory['methodid'] < 4 && $dataPatientHistory['methodid'] > 0)
				{
					if($dataPatientHistory['amount'] < 0)
					{
						$patientFinalHistoryArray[date("dmYHi", strtotime($dataPatientHistory['create_date']))]['sumary'][$dataPatientHistory['id']]['type'] = "P"; //patient
					}
					else if($dataPatientHistory['amount'] > 0 && $dataPatientHistory['stid'] > 0)
					{
						$patientFinalHistoryArray[date("dmYHi", strtotime($dataPatientHistory['create_date']))]['sumary'][$dataPatientHistory['id']]['type'] = "PS"; //for patient from stock
					}
				}
				else
				{
					if($dataPatientHistory['amount'] > 0)
					{
						$patientFinalHistoryArray[date("dmYHi", strtotime($dataPatientHistory['create_date']))]['sumary'][$dataPatientHistory['id']]['type'] = "P"; //patient
					}
					else if($dataPatientHistory['amount'] < 0 && $dataPatientHistory['stid'] > 0)
					{
						$patientFinalHistoryArray[date("dmYHi", strtotime($dataPatientHistory['create_date']))]['sumary'][$dataPatientHistory['id']]['type'] = "PS"; //for patient from stock
					}
				}
				$patientFinalHistoryArray[date("dmYHi", strtotime($dataPatientHistory['create_date']))]['date'] = date("d.m.Y H:i", strtotime($dataPatientHistory['create_date']));
				$x++;
			}
			ksort($patientFinalHistoryArray);
			
			$patientFinalHistoryArray = $this->array_sort($patientFinalHistoryArray,"date",SORT_ASC);
			

			$gridv = new Pms_Grid($patientFinalHistoryArray, 1, count($patientFinalHistoryArray), "listbtmverlaufpatient.html");
			$this->view->medicationarray = $medicationsarray;
			$this->view->methodsarray = $grid_methods_arr;
			$this->view->btmverlaufgrid = $gridv->renderGrid();
		}

		public function calendarAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$Tr = new Zend_View_Helper_Translate();

			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$allpatientinfo = $patientmaster->getMasterData($decid, 0);

			$patname = $allpatientinfo['first_name'] . ', ' . $allpatientinfo['last_name'];
			$pataddress = $allpatientinfo['street1'] . ', ' . $allpatientinfo['zip'] . ' ' . $allpatientinfo['city'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ************************************************************************************************ */
			$docquery = Doctrine_Query::create()
				->select('*')
				->from('Usergroup')
				->where('clientid=' . $logininfo->clientid . ' and isdelete=0 and isactive=1');
			$groups = $docquery->fetchArray();

			$groupsStr = "'99999999999999999'";
			$comma = ",";
			foreach($groups as $group)
			{
				$groupsStr .= $comma . "'" . $group['id'] . "'";
				$comma = ",";

				$groupsFinal[$group['id']] = $group;
			}
			$this->view->groups = $groupsFinal;

			$users = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isactive=0 and isdelete=0 and groupid IN (' . $groupsStr . ')')
				->orderBy('last_name ASC');
			$groupsUsers = $users->fetchArray();

			foreach($groupsUsers as $user)
			{
				$groupsUsersFinal[$user['groupid']][0] = "";
				$groupsUsersFinal[$user['groupid']][$user['id'] . "-" . $user['groupid']] = $user['last_name'] . ',' . $user['first_name'];
			}
			$this->view->groupUsers = $groupsUsersFinal;
		}

		public function fetchcalendareventsAction()
		{
			//$decid = Pms_Uuid::decrypt($_GET['id']);
			//$ipid = Pms_CommonData::getIpid($decid);
			$decid = $this->dec_id;
			$ipid = $this->ipid;
			//$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $this->logininfo->clientid;
			$userid = $this->logininfo->userid;

			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);
			
			$usersm = new User();
			$users_data_ini = $usersm->get_all_users_shortname();
			
			$ust = new UserSettings();
			$ustarr = $ust->getallUsersSettings();
			
			foreach($ustarr as $ustval)
			{
				if(strlen($ustval['calendar_visit_color']) > 0 && strlen($ustval['calendar_visit_text_color'])){
					$usettings[$ustval['userid']] = $ustval;
				}
			}
			
			//ISPC-2311 - custom color/client for patient course entries
			$clt = new Client();
			$cl_data = $clt->getClientDataByid($clientid);
			
			if($cl_data[0]['patient_course_settings'])
			{
				$patient_course_settings = $cl_data[0]['patient_course_settings'];
			}
			else
			{
				$patient_course_settings = [
						"v_color" 		=> 	"#33CC66",
						"v_text_color"	=>	"#000000",
						"xt_color" 		=> 	"#33CC66",
						"xt_text_color"	=>	"#000000",
						"u_color" 		=> 	"#33CC66",
						"u_text_color"	=>	"#000000",
				];
			}
			//print_r($patient_course_settings);
			//get doctor/nurse visits
			//get form from verlauf, created to see what`s deleted
			$visits_form_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid = ?', $ipid)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 0")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form' OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form' OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form' OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'visit_koordination_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$visits_course = $visits_form_course->fetchArray();

			$allowed_visits['kvno_doctor_form'][] = '999999999';
			$allowed_visits['kvno_nurse_form'][] = '999999999';
			$allowed_visits['visit_koordination_form'][] = '999999999';

			foreach($visits_course as $visit)
			{
				$allowed_visits[$visit['tabname']][] = $visit['recordid'];
			}

			$del_cf_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid = ?', $ipid)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$del_visits_course = $del_cf_course->fetchArray();

			$del_cf_ids['contact_form'][] = '999999999';
			foreach($del_visits_course as $k_del_cf => $v_del_cf)
			{
				$del_cf_ids[$v_del_cf['tabname']][] = $v_del_cf['recordid'];
			}

			$kvnodoc = new KvnoDoctor();
			$kvnodoctorarray = $kvnodoc->getDoctorVisits($allowed_visits['kvno_doctor_form']);

			$kvnonurse = new KvnoNurse();
			$kvnonursearray = $kvnonurse->getNurseVisits($allowed_visits['kvno_nurse_form']);

			//8 may 2013 added contactforms to calendar as normal visit
			$contactforms = new ContactForms();
			$contactforms_array = $contactforms->get_pat_calendar_contact_form($ipid, false, $_REQUEST['start'], $_REQUEST['end'], $del_cf_ids['contact_form']);

			//30.05.2013 added koordination visits
			$koord_visits = new VisitKoordination();
			$koord_visits_array = $koord_visits->get_koordination_visits($allowed_visits['visit_koordination_form']);
			
			//sapv events
			$verordnetarray = Pms_CommonData::getSapvCheckBox(true);
			$sapvevents = new SapvVerordnung();
			$sapvevents_array = $sapvevents->get_patient_following_sapvs($ipid);
			
			
			//DOCTOR VISITS
			foreach($kvnodoctorarray as $k_doc => $v_doc)
			{
				$visits[$k_doc]['id'] = $v_doc['id'];
				$visits[$k_doc]['start'] = $v_doc['start_date'];
				$visits[$k_doc]['end'] = $v_doc['end_date'];
				$visits[$k_doc]['create_user'] = $v_doc['create_user'];
			}

			foreach($kvnodoctorarray as $docvisit)
			{
				$r1start = strtotime($docvisit['start_date']);
				$r1end = strtotime($docvisit['end_date']);
				$u1 = $docvisit['create_user'];
				
				if(array_key_exists($u1, $usettings))
				{
					$calendar_visit_color = '#'.$usettings[$u1]['calendar_visit_color'];
					$calendar_visit_text_color = '#'.$usettings[$u1]['calendar_visit_text_color'];
				}
				else
				{
					$calendar_visit_color = '#36c';
					$calendar_visit_text_color = '#fff';
				}

				foreach($visits as $key_vizit => $value_vizit)
				{
					if($value_vizit['id'] != $docvisit['id'])
					{
						$r2start = strtotime($value_vizit['start']);
						$r2end = strtotime($value_vizit['end']);
						$u2 = $value_vizit['create_user'];

						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end) && $u1 == $u2)
						{
							//overlapped!
							$intersected[] = $value_vizit['id'];
							$intersected[] = $docvisit['id'];
						}
					}
				}

				$intersected_doc_viz = array_unique($intersected);

				if(in_array($docvisit['id'], $intersected_doc_viz))
				{
					$is_inters = 'intersected_event';
				}
				else
				{
					$is_inters = '';
				}

				$user_sh_doc_v[$docvisit['id']] = $users_data_ini[$docvisit['create_user']]['initials'];
				
				$extra_event = array(
					'id' => $docvisit['id'],
// 					'title' => "Besuch Arzt",
					'title' => $user_sh_doc_v[$docvisit['id']]." - Besuch Arzt",  // added user shortcut - 11-05-2015 :: ISPC 1343
					'start' => $docvisit['start_date'],
					'end' => $docvisit['end_date'],
					'allDay' => false,
					'createDate' => $docvisit['create_date'],
					'eventType' => '1',
					'className' => $is_inters,
					'color' => $calendar_visit_color,
					'textColor' => $calendar_visit_text_color
				);
				//ISPC-1835
				/*
				$user_event_color = $users_data_ini [$docvisit['create_user']] ['details'] ['usercolor'];
				$user_event_colortext = $users_data_ini [$docvisit['create_user']] ['details'] ['usercolor_text'];
				if ($user_event_color != "") {
					
					if (strpos($user_event_color, "#") === false){
						$user_event_color = "#".$user_event_color;
					}
					
					if ( empty($user_event_colortext)) {
						$user_event_colortext = 
						$users_data_ini [$docvisit['create_user']] ['details'] ['usercolor_text'] =  $this->calculateTextColor($user_event_color);
					}
					$extra_event['color'] = $user_event_color;
					$extra_event['textColor'] = $user_event_colortext;
					//$extra_event['borderColor'] = 'black';	
				}
				*/
				
				$eventsArray[] = $extra_event;
			}
			
			//SAPVS
			foreach($sapvevents_array as $sapvevent)
			{
			    $denied = "0";
			    if($sapvevent['status'] == '1'){
			    
			        if($sapvevent['verorddisabledate'] != '0000-00-00 00:00:00')
			        {
			            $sapvevent['verordnungbis'] = $sapvevent['verorddisabledate'] ;
	                    $denied = "0";  
			        } 
			        else
			        {
			             $denied = "1";  
			        }
			    } 
			    else 
			    {
	                $denied = "0";  
			        $sapvevent['verordnungbis'] = $sapvevent['verordnungbis'] ;
			    }
			    
			    if($denied == "0"){
			        
    				$r1start = strtotime($sapvevent['verordnungam']);
    				$r1end = strtotime($sapvevent['verordnungbis']);
    				$u1 = $sapvevent['create_user'];
    				
    				$comma = "";
    				$ver = "";
    				$verordnet = explode(",", $sapvevent['verordnet']);
    				for($i = 0; $i < count($verordnet); $i++)
    				{
    						$ver .= $comma . strtoupper(substr($verordnetarray[$verordnet[$i]], 0, 2));
    						$comma = ", ";
    				}
    			
    				/*
    				foreach($sapvevs as $key_sapv => $value_sapv)
    				{
    					if($value_sapv['id'] != $sapvevent['id'])
    					{
    						$r2start = strtotime($value_sapv['start']);
    						$r2end = strtotime($value_sapv['end']);
    						$u2 = $value_sapv['create_user'];
    			
    						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end) && $u1 == $u2)
    						{
    							//overlapped!
    							$intersected[] = $value_sapv['id'];
    							$intersected[] = $sapvevent['id'];
    						}
    					}
    				}
    			
    				$intersected_doc_sapv = array_unique($intersected);
    			
    				if(in_array($sapvevent['id'], $intersected_doc_sapv))
    				{
    					$is_inters = 'intersected_event';
    					
    				}
    				else
    				{
    					$is_inters = '';
    				}*/
    			
    				$user_sh_doc_sapv[$sapvevent['id']] = $users_data_ini[$sapvevent['create_user']]['initials'];
    			
    				$eventsArray[] = array(
    						'id' => $sapvevent['id'],
    						'title' => $user_sh_doc_sapv[$sapvevent['id']]." - Verordnung: ".date("d.m.Y", strtotime($sapvevent['verordnungam']))." - ".date("d.m.Y", strtotime($sapvevent['verordnungbis']))." (".$ver.")",  // added user shortcut - 11-05-2015 :: ISPC 1343
    						'start' => $sapvevent['verordnungam'],
    						'end' => $sapvevent['verordnungbis'],
    						'allDay' => true,
    						'createDate' => $sapvevent['create_date'],
    						'eventType' => '18'
    						//'className' => $is_inters
    				);
			     }
			}
				

			//NURSE VISITS
			foreach($kvnonursearray as $k_nurse => $v_nurse)
			{
				$visits_n[$k_nurse]['id'] = $v_nurse['id'];
				$visits_n[$k_nurse]['start'] = $v_nurse['start_date'];
				$visits_n[$k_nurse]['end'] = $v_nurse['end_date'];
				$visits_n[$k_nurse]['create_user'] = $v_nurse['create_user'];
			}

			foreach($kvnonursearray as $nursevisit)
			{
				$r1start = strtotime($nursevisit['start_date']);
				$r1end = strtotime($nursevisit['end_date']);

				$u1 = $nursevisit['create_user'];
				
				if(array_key_exists($u1, $usettings))
				{
					$calendar_visit_color = '#'.$usettings[$u1]['calendar_visit_color'];
					$calendar_visit_text_color = '#'.$usettings[$u1]['calendar_visit_text_color'];
				}
				else
				{
					$calendar_visit_color = '#36c';
					$calendar_visit_text_color = '#fff';
				}

				foreach($visits_n as $key_vizit_n => $value_vizit_n)
				{
					if($value_vizit_n['id'] != $nursevisit['id'])
					{
						$r2start = strtotime($value_vizit_n['start']);
						$r2end = strtotime($value_vizit_n['end']);

						$u2 = $value_vizit_n['create_user'];

						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end) && $u1 == $u2)
						{
							//overlapped!
							$intersected_n[] = $value_vizit_n['id'];
							$intersected_n[] = $nursevisit['id'];
						}
					}
				}

				$intersected_n_viz = array_unique($intersected_n);

				if(in_array($nursevisit['id'], $intersected_n_viz))
				{
					$is_inters_n = 'intersected_event';
				}
				else
				{
					$is_inters_n = '';
				}

				$user_sh_nurse_v[$nursevisit['id']] = $users_data_ini[$nursevisit['create_user']]['initials'];
					
				$extra_event = array(
					'id' => $nursevisit['id'],
// 					'title' => "Besuch Pflege ",
					'title' => $user_sh_nurse_v[$nursevisit['id']]." - Besuch Pflege ",  // added user shortcut - 11-05-2015 :: ISPC 1343
					'start' => $nursevisit['start_date'],
					'end' => $nursevisit['end_date'],
					'allDay' => false,
					'createDate' => $nursevisit['create_date'],
					'eventType' => '2',
					'className' => $is_inters_n,
					'color' => $calendar_visit_color,
					'textColor' => $calendar_visit_text_color
				);
				//ISPC-1835
				/*
				$user_event_color = $users_data_ini [$nursevisit['create_user']] ['details'] ['usercolor'];
				$user_event_colortext = $users_data_ini [$nursevisit['create_user']] ['details'] ['usercolor_text'];
				if ($user_event_color != "") {
						
					if (strpos($user_event_color, "#") === false){
						$user_event_color = "#".$user_event_color;
					}
						
					if ( empty($user_event_colortext)) {
						$user_event_colortext =
						$users_data_ini [$nursevisit['create_user']] ['details'] ['usercolor_text'] =  $this->calculateTextColor($user_event_color);
					}
					$extra_event['color'] = $user_event_color;
					$extra_event['textColor'] = $user_event_colortext;
					//$extra_event['borderColor'] = 'black';
				}
				*/
				$eventsArray[] = $extra_event;
				
				
			}

			//CONTACT FORMS
			foreach($contactforms_array as $k_cf => $v_cf)
			{
				$visits_cf[$k_cf]['id'] = $v_cf['id'];
				$visits_cf[$k_cf]['start'] = $v_cf['start_date'];
				$visits_cf[$k_cf]['end'] = $v_cf['end_date'];
				$visits_cf[$k_cf]['create_user'] = $v_cf['create_user'];
			}

			foreach($contactforms_array as $k_contactforms => $v_contactforms)
			{
				$r1start = strtotime($v_contactforms['start_date']);
				$r1end = strtotime($v_contactforms['end_date']);
				$u1 = $v_contactforms['create_user'];

				foreach($visits_cf as $key_cf_vizit => $value_cf_vizit)
				{
					if($value_cf_vizit['id'] != $v_contactforms['id'])
					{
						$r2start = strtotime($value_cf_vizit['start']);
						$r2end = strtotime($value_cf_vizit['end']);
						$u2 = $value_cf_vizit['create_user'];

						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end) && $u1 == $u2)
						{
							//overlapped!
							$intersected[] = $v_contactforms['id'];
							$intersected[] = $value_cf_vizit['id'];
						}
					}
				}

				$intersected_cf_viz = array_unique($intersected);

				if(in_array($v_contactforms['id'], $intersected_cf_viz))
				{
					$is_inters = 'intersected_event';
				}
				else
				{
					$is_inters = '';
				}
				
				if(strlen($v_contactforms['form_type_name']) == 0)
				{
					$contact_form_name = 'Kontaktformular';
				}
				else
				{
					$contact_form_name = $v_contactforms['form_type_name'];
				}
				
				if(array_key_exists($u1, $usettings))
				{
					$contact_form_color = '#'.$usettings[$u1]['calendar_visit_color'];
					$contact_form_text_color = '#'.$usettings[$u1]['calendar_visit_text_color'];
				}
				else
				{
					if(strlen($v_contactforms['form_type_color']) == 0)
					{
						$contact_form_color = 'gold';
					}
					else
					{
						$contact_form_color = '#'.$v_contactforms['form_type_color'];
					}
					if(strlen($v_contactforms['form_type_text_color']) == 0)
					{
// 						$contact_form_text_color = $this->calculateTextColor($contact_form_color);
						$contact_form_text_color = "#000000";
					}
					else
					{
						$contact_form_text_color = '#'.$v_contactforms['form_type_text_color'];
					}
				}
				
				
				$user_sh_cnt[$v_contactforms['id']] = $users_data_ini[$v_contactforms['create_user']]['initials'];
				
				$eventsArray[] = array(
					'id' => $v_contactforms['id'],
// 					'title' => $contact_form_name,
					'title' => $user_sh_cnt[$v_contactforms['id']]." - ".$contact_form_name,  // added user shortcut - 11-05-2015 :: ISPC 1343
					'start' => $v_contactforms['start_date'],
					'end' => $v_contactforms['end_date'],
					'allDay' => false,
					'resizable' => false,
					'color' => $contact_form_color,
					'textColor' => $contact_form_text_color,
					'ipid' => $v_contactforms['ipid'],
					'createDate' => $v_contactforms['create_date'],
					'eventType' => '13', //doctor vizit
					'className' => $is_inters
				);
			}

			//KOORD VISITS
			foreach($koord_visits_array as $k_koord_visit => $v_koord_visit)
			{
				$visits_k[$k_koord_visit]['id'] = $v_koord_visit['id'];
				$visits_k[$k_koord_visit]['start'] = $v_koord_visit['start_date'];
				$visits_k[$k_koord_visit]['end'] = $v_koord_visit['end_date'];
				$visits_k[$k_koord_visit]['create_user'] = $v_koord_visit['create_user'];
			}

			foreach($koord_visits_array as $k_koordvisit => $v_koordvisit)
			{
				$r1start = strtotime($v_koordvisit['start_date']);
				$r1end = strtotime($v_koordvisit['end_date']);

				$u1 = $v_koordvisit['create_user'];
				
				if(array_key_exists($u1, $usettings))
				{
					$calendar_visit_color = '#'.$usettings[$u1]['calendar_visit_color'];
					$calendar_visit_text_color = '#'.$usettings[$u1]['calendar_visit_text_color'];
				}
				else
				{
					$calendar_visit_color = '#36c';
					$calendar_visit_text_color = '#fff';
				}

				foreach($visits_k as $key_vizit_k => $value_vizit_k)
				{
					if($value_vizit_k['id'] != $v_koordvisit['id'])
					{
						$r2start = strtotime($value_vizit_k['start']);
						$r2end = strtotime($value_vizit_k['end']);
						$u2 = $value_vizit_k['create_user'];

						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end) && $u1 == $u2)
						{
							//overlapped!
							$intersected[] = $value_vizit_k['id'];
							$intersected[] = $v_koordvisit['id'];
						}
					}
				}

				$intersected_doc_viz = array_unique($intersected);

				if(in_array($v_koordvisit['id'], $intersected_doc_viz))
				{
					$is_inters = 'intersected_event';
				}
				else
				{
					$is_inters = '';
				}

				$user_sh_koord_v[$v_koordvisit['id']] = $users_data_ini[$v_koordvisit['create_user']]['initials'];
				
				
				$extra_event = array(
					'id' => $v_koordvisit['id'],
// 					'title' => "Besuch Koordination",
					'title' => $user_sh_koord_v[$v_koordvisit['id']]." - Besuch Koordination", // added user shortcut - 11-05-2015 :: ISPC 1343
					'start' => $v_koordvisit['start_date'],
					'end' => $v_koordvisit['end_date'],
					'allDay' => false,
					'createDate' => $v_koordvisit['create_date'],
					'eventType' => '17',
					'className' => $is_inters,
					'color' => $calendar_visit_color,
					'textColor' => $calendar_visit_text_color
				);
				//ISPC-1835
				/*
				$user_event_color = $users_data_ini [$v_koordvisit['create_user']] ['details'] ['usercolor'];
				$user_event_colortext = $users_data_ini [$v_koordvisit['create_user']] ['details'] ['usercolor_text'];
				if ($user_event_color != "") {
				
					if (strpos($user_event_color, "#") === false){
						$user_event_color = "#".$user_event_color;
					}
				
					if ( empty($user_event_colortext)) {
						$user_event_colortext =
						$users_data_ini [$v_koordvisit['create_user']] ['details'] ['usercolor_text'] =  $this->calculateTextColor($user_event_color);
					}
					$extra_event['color'] = $user_event_color;
					$extra_event['textColor'] = $user_event_colortext;
					//$extra_event['borderColor'] = 'black';
				}
				*/
				$eventsArray[] = $extra_event;
			}

			$wlprevileges = new Modules();
			$wl = $wlprevileges->checkModulePrivileges("51", $clientid);

			// get patient active location
			
			$patloc = Doctrine_Query::create()
			->select('location_id,ipid')
			->from('PatientLocation')
			->where('isdelete= ?',0)
			->andWhere('ipid = ?', $ipid)
			->andWhere("valid_till='0000-00-00 00:00:00'")
			->orderBy('id DESC');
			$patlocid = $patloc->fetchArray();
			$plid = $patlocid[0]['location_id'];
			
			//get hospiz location
			$fdoc = Doctrine_Query::create()
			->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
			->from('Locations')
			->where('id = ?', $plid )
			->andWhere('isdelete= ?',0)
			->orderBy('location ASC');
			$locarr = $fdoc->fetchArray();
				
			
			//+6week simple
			//+6week continuous
			//only for non privat patients
			if($wl && $phi[0]['privatepatient'] != 1 && $locarr[0]['location_type'] != 2) // Alsso exclude from active hopsiz location ISPC-2062 02.10.2017 Ancuta 
			{
				//WL patient 6week continuously anlage recheck
				//09-07-2013 - change in 8 weeks check
				$pm = new PatientMaster();
				$patientInfo = $pm->getTreatedDaysRealMultiple(array("0" => "" . $ipid . ""), false);
				$patientn = $pm->getMasterData($decid, 0);

				if(empty($patientInfo[$ipid]['admissionDates']))
				{
					if($patientInfo[$ipid]['discharge_date'] == date("d.m.Y"))
					{
						$admissionDate = strtotime($patientInfo[$ipid]['admission_date']);
						$dischargeDate = strtotime('+ 8 weeks'); //today + 8weeks
					}
					else
					{
						$admissionDate = strtotime($patientInfo[$ipid]['admission_date']);
						$dischargeDate = strtotime($patientInfo[$ipid]['discharge_date']);
					}
				}
				else
				{
					$dischargeDates = end($patientInfo[$ipid]['dischargeDates']);
					$admissionDates = end($patientInfo[$ipid]['admissionDates']);

					if(count($patientInfo[$ipid]['admissionDates']) > count($patientInfo[$ipid]['dischargeDates']))
					{
						$admissionDate = strtotime($admissionDates['date']);
						$dischargeDate = strtotime('+ 8 weeks', strtotime($admissionDates['date']));
					}
					else
					{
						$admissionDate = strtotime($admissionDates['date']);
						if(strtotime($dischargeDates['date']) < date('d.m.Y'))
						{
							$dischargeDate = strtotime('+ 8 weeks', strtotime($dischargeDates['date']));
						}
						else
						{
							$dischargeDate = strtotime($dischargeDates['date']);
						}
					}

					if((sizeof($patientInfo[$ipid]['admissionDates']) - 1) == sizeof($patientInfo[$ipid]['dischargeDates']))
					{

						$dischargeDate = strtotime(' + 1 year'); //set discharge far in the future
					}
					else
					{
//					$dischargeDate = strtotime('+ 6 weeks', strtotime($dischargeDates['date']));
					}
				}

				if(strtotime(date('d.m.Y', $admissionDate)) <= strtotime(date("d.m.Y")))
				{
					while($admissionDate <= $dischargeDate)
					{

						$admissionDate = strtotime('+ 8 weeks', $admissionDate);
						if($admissionDate <= $dischargeDate)
						{
							$eventsArray[] = array(
								'id' => $patientDetails['id'],
								'title' => "Prüfung Anlage 4",
								'start' => date("Y-m-d", $admissionDate),
								'editable' => false,
								'color' => "red",
								'textColor' => 'black',
								'eventType' => "6" //anlage4wl recheck
							);
						}
					}
				}
			}

			//4week

			// exclude private patient or patient with hospiz location

			if($wl && $phi[0]['privatepatient'] != 1 && $locarr[0]['location_type'] != 2)
			{
				$pm = new PatientMaster();
				$patientn = $pm->getMasterData($decid, 0);
				$patientInfo = $pm->getTreatedDaysRealMultiple(array("0" => "" . $ipid . ""), false);

				if($patientn['vollversorgung'] == '1')
				{
					$vv_date = strtotime($patientn['vollversorgung_date']);

					if((sizeof($patientInfo[$ipid]['admissionDates']) - 1) == sizeof($patientInfo[$ipid]['dischargeDates']))
					{

						$discharge_date = strtotime(' + 1 year'); //set discharge far in the future
					}
					else
					{
						$discharge_date = strtotime('+5 weeks', strtotime($patientInfo[$ipid]['discharge_date']));
					}
				}

				while($vv_date <= $discharge_date)
				{
					$vv_date = strtotime('+ 4 weeks', $vv_date);

					if($vv_date <= $discharge_date)
					{
						$eventsArray[] = array(
							'id' => $patientDetails['id'],
							'title' => "Prüfung Anlage 4a",
							'start' => date("Y-m-d", $vv_date),
							'editable' => false,
							'color' => "#999999",
							'textColor' => 'black',
							'eventType' => "6" //anlage4wl recheck
						);
					}
				}
			}

//		end get WL patients

			$reassesmentprv = new Modules();
			$reass_mod = $reassesmentprv->checkModulePrivileges("56", $clientid);
			if($reass_mod)
			{
				#################Ancuta Reassesment start
				//		get KVNO Assessment reevaluation
				$kvno = new KvnoAssessment();
				$reevaluation = $kvno->getPatientAssessment($ipid);

				foreach($reevaluation as $rekvnoreeval)
				{
					if($rekvnoreeval['iscompleted'] == 1)
					{
						$eventsArray[] = array(
							'id' => $rekvnoreeval['id'],
							'title' => 'Re-Assessment',
							'start' => date("Y-m-d", strtotime($rekvnoreeval['reeval'])),
							'editable' => false,
							'color' => "#008080", //Teal
							'textColor' => '#fff',
							'eventType' => "13", //re-assesment
							'url' => 'patientform/reassessment?id=' . $_GET['id'] . ''
						);
					}
				}
				#################Ancuta Reassesment end
			}
//ISPC-2311 - custom color/client for patient course entries
//		get verlauf koordination
			$course = new PatientCourse();
			$patientCourse = $course->getCourseDataByShortcut($ipid, "V", false, true);

			foreach($patientCourse as $koordination)
			{
				$coordTitle = explode("|", $koordination['course_title']);
				$user_sh_k[$koordination['id']] = $users_data_ini[$koordination['create_user']]['initials'];

				$eventsArray[] = array(
					'id' => $koordination['id'],
//					    'title' => "Koordination: \n".$coordTitle[0]."minuten - ".$coordTitle[1],
// 					'title' => "Koordination: \n" . $coordTitle[0] . "minuten",
					'title' => $user_sh_k[$koordination['id']]." - Koordination: \n" . $coordTitle[0] . "minuten",// added user shortcut - 11-05-2015 :: ISPC 1343
					'start' => date("Y-m-d H:i:s", strtotime($coordTitle[2])),
					//'color' => "#33CC66",					
					//'textColor' => 'black',
					'color' => $patient_course_settings['v_color'],
					'textColor' => $patient_course_settings['v_text_color'],
					'allDay' => false,
					'eventType' => "9" //koord verlauf entry
				);
			}
//		end get verlauf koordination
//		get verlauf xt
			$patient_course = $course->getCourseDataByShortcut($ipid, "XT", false, true);

			foreach($patient_course as $k_xt => $v_xt)
			{
				$coord_title = explode("|", $v_xt['course_title']);

				$user_sh_xt[$v_xt['id']] = $users_data_ini[$v_xt['create_user']]['initials'];
				
				
				$eventsArray[] = array(
					'id' => $v_xt['id'],
// 					'title' => "Telefonat: \n" . $coord_title[0] . "minuten",
					'title' => $user_sh_xt[$v_xt['id']]." - Telefonat: \n" . $coord_title[0] . "minuten", // added user shortcut - 11-05-2015 :: ISPC 1343
					'start' => date("Y-m-d H:i:s", strtotime($coord_title[2])),
					//'color' => "#33CC66",
					//'textColor' => 'black',
					'color' => $patient_course_settings['xt_color'],
					'textColor' => $patient_course_settings['xt_text_color'],
					'allDay' => false,
					'eventType' => "16" //Telefon verlauf entry
				);
			}
//		end get verlauf xt
//		get verlauf U
			$patient_course = $course->getCourseDataByShortcut($ipid, "U", false, true);

			foreach($patient_course as $k_u => $v_u)
			{
				
				

				$user_sh_v_u[$v_u['id']] = $users_data_ini[$v_u['create_user']]['initials'];
				
				
				$coord_title = explode("|", $v_u['course_title']);

				$eventsArray[] = array(
					'id' => $v_u['id'],
// 					'title' => "Beratung: \n" . $coord_title[1] . "minuten", 
					'title' => $user_sh_v_u[$v_u['id']]." - Beratung: \n" . $coord_title[1] . "minuten", // added user shortcut - 11-05-2015 :: ISPC 1343
					'start' => date("Y-m-d H:i:s", strtotime($coord_title[3])),
					//'color' => "#33CC66",
					//'textColor' => 'black',
					'color' => $patient_course_settings['u_color'],
					'textColor' => $patient_course_settings['u_text_color'],
					'allDay' => false,
					'eventType' => "15" //Beratung verlauf entry
				);
			}
//		end get verlauf U
//		get custom events
			$docCustomEv = new DoctorCustomEvents();
			$customEvents = $docCustomEv->getDoctorCustomEvents($userid, $clientid, $ipid);

//		print_r($customEvents); exit;
			foreach($customEvents as $cEvent)
			{

				if($cEvent['allDay'] == 1)
				{
					$allDay = true;
				}
				else
				{
					$allDay = false;
				}

				$eventsArray[] = array(
					'id' => $cEvent['id'],
					'title' => $cEvent['eventTitle'],
					'start' => date("Y-m-d H:i:s", strtotime($cEvent['startDate'])),
					'end' => date("Y-m-d H:i:s", strtotime($cEvent['endDate'])),
					'color' => '#33CCFF',
					'textColor' => 'black',
					'allDay' => $allDay,
					'eventType' => $cEvent['eventType'], //custom event
					
				    'comments' => $cEvent['comments'], // this are the original so user can edit
    	            'comments_qtip' => nl2br($this->view->escape($cEvent['comments'])), // this are displayed as qtip
				);
			}
//		end get custom events
			//Patient birthday
			$pt = Doctrine_Query::create()
				->select("*")
				->from('PatientMaster')
				->whereIn('ipid', $ipid);
			$patient_res = $pt->fetchArray();

			if($patient_res)
			{
				foreach($patient_res as $k_pat => $v_pat)
				{
					$patient_birthd = date('d.m.Y', strtotime($v_pat['birthd']));
				}
			}
			$start_calendar = date('Y-m-d', $_REQUEST['start']);
			$end_calendar = date('Y-m-d', $_REQUEST['end']);

			$pm = new PatientMaster();
			$calendardays_array = $pm->getDaysInBetween($start_calendar, $end_calendar);


			$start_calendar = date('d.m.Y', $_REQUEST['start']);
			$year_calendar = date('Y', strtotime($start_calendar));
			$patbirthd_arr = explode(".", $patient_birthd);


			if($patient_birthd)
			{
				foreach($calendardays_array as $k => $day)
				{
					$patient_date = date("Y-m-d", mktime(0, 0, 0, $patbirthd_arr[1], $patbirthd_arr[0], date('Y', strtotime($day))));
					if($patient_date == $day)
					{
						$start_date = date('Y-m-d', strtotime($day));
					}
				}
				$eventsArray[] = array(
					//'id' => $v_u['id'],
					'title' => "Geburtstag des Patienten",
					'editable' => false,
					'start' => $start_date,
					'color' => "#E0B0FF",
					'textColor' => 'black',
					'allDay' => true,
					'eventType' => "19", //Birthday
				);
			}

			//End patient Birthday
			
			//ISPC-1921 - falls bars from admission to discharge
			
		/*	$pm = new PatientMaster();  alta varianta
			$patientInfo = $pm->getTreatedDaysRealMultiple(array("0" => "" . $ipid . ""), false);			
			//$patientn = $pm->getMasterData($decid, 0);
			
			if(empty($patientInfo[$ipid]['admissionDates']))
			{
				if($patientInfo[$ipid]['discharge_date'] == "")
				{
					$admissionDate = strtotime($patientInfo[$ipid]['admission_date']);
					$dischargeDate = strtotime(date("d.m.Y")); //today
				}
				else
				{
					$admissionDate = strtotime($patientInfo[$ipid]['admission_date']);
					$dischargeDate = strtotime($patientInfo[$ipid]['discharge_date']);
				}
				
				$extra_event = array(
						'id' => $admissionDate['id'],
						'title' => "Patient track from addmision to discharge",
						'start' => date('Y-m-d', $admissionDate),
						'end' => date('Y-m-d', $dischargeDate),
						'allDay' => true,
						'createDate' => date('Y-m-d', $admissionDate),
						'eventType' => '20',
						'color' => "#E0B0FF",
						'textColor' => 'black',
						//'className' => $is_inters_n
				);
				
				$eventsArray[] = $extra_event;
			}
			else
			{
				$dischargeDates = $patientInfo[$ipid]['dischargeDates'];
				$admissionDates = $patientInfo[$ipid]['admissionDates'];
				
				foreach($admissionDates as $key=>$admissionDate) {
					$admissionDate = strtotime($admissionDate['date']);
					if($dischargeDates[$key]['date'] == "")
						{
							$dischargeDate = strtotime(date("d.m.Y")); //today
						}
						else 
						{
							$dischargeDate = strtotime($dischargeDates[$key]['date']);
						}
						
						$extra_event = array(
								'id' => $admissionDate['id'],
								'title' => "Fall ".date('d.m.Y', $admissionDate).' - '.date('d.m.Y', $dischargeDate),
								'start' => date('Y-m-d', $admissionDate),
								'end' => date('Y-m-d', $dischargeDate),
								'allDay' => true,
								'createDate' => $admissionDate['create_date'],
								'eventType' => '20',
								'color' => "#E0B0FF",
								'textColor' => 'black',
								//'className' => $is_inters_n
						);
						
						$eventsArray[] = $extra_event;
				}
				
			}*/
			
			//ISPC-1970:: Fall bar in calendar
			
			
			
			
			$sql = 'e.epid, p.ipid, e.ipid,';
// 			$conditions['periods'][0]['start'] = date('Y-m-d', strtotime($_REQUEST['start']));//'2009-01-01';
			// TODO-1508
			$conditions['periods'][0]['start'] = date('Y-m-d', $_REQUEST['start']);//'2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['include_standby'] = true;
			$conditions['ipids'] = array($ipid);
			
			$patient_days = Pms_CommonData::patients_days($conditions,$sql);

			
			
			$treatment_days = $patient_days[$ipid]['treatment_days'];
			$treatment_days_dmy = array_values($treatment_days);
			
			foreach($treatment_days_dmy as $k=>$trday){
				$treatment_days[] = date("Y-m-d",strtotime($trday));
			}
			
			//  What label should we use  for this events - if they are disconected . multiple times ? 
			
// 			$active_periods
			
// 			print_r($patient_days); exit;
			
			
			
			
			//find if there is a sapv for current period START!
			$dropSapv = Doctrine_Query::create()
			->select('*')
			->from('SapvVerordnung')
			->whereIn('ipid', array($ipid))
			->andWhere('verordnungam != "0000-00-00 00:00:00"')
			->andWhere('verordnungbis != "0000-00-00 00:00:00"')
			->andWhere('isdelete=0')
			->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();
			
			
			$all_sapv_days = array();
			$temp_sapv_days = array();
			//4920e7f7c56bcb600b00948f709f46252fd3ff6f
			$s=0;
			foreach($droparray as $k_sapv => $v_sapv)
			{
				$r1['start'][$v_sapv['ipid']][$s] = "";
				$r1['end'][$v_sapv['ipid']][$s] = "";
					
				$r2['start'][$v_sapv['ipid']][$s] = "";
				$r2['end'][$v_sapv['ipid']][$s] = "";
			
			
			
				if($v_sapv['status'] == 1 && ($v_sapv['verorddisabledate'] == '0000-00-00 00:00:00' || $v_sapv['verorddisabledate'] == '1970-01-01 00:00:00') ){
					// no sapv taken here - becouse it is considered to be fully denied
				}
				else
				{
					$r1['start'][$v_sapv['ipid']][$s] = strtotime(date('Y-m-d', strtotime($v_sapv['verordnungam'])));
					$r1['end'][$v_sapv['ipid']][$s] = strtotime(date('Y-m-d', strtotime($v_sapv['verordnungbis'])));
			
					$r2['start'][$v_sapv['ipid']][$s] = strtotime($patients_invoices_periods[ $v_sapv['ipid'] ]['start']);
					$r2['end'][$v_sapv['ipid']][$s] = strtotime($patients_invoices_periods[$v_sapv['ipid']]['end']);
			
			
					//aditional data from sapv which was added on 16.10.2014
					if($v_sapv['approved_date'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($v_sapv['approved_date'])) != '1970-01-01' && $v_sapv['status'] == '2')
					{
						$sapv_data[$v_sapv['ipid']][$s]['approved_date'] = date('d.m.Y', strtotime($v_sapv['approved_date']));
					}
		
					if(strlen($v_sapv['approved_number']) > 0  && $v_sapv['status'] != 1){
						$sapv_data[$v_sapv['ipid']][$s]['approved_number'] = $v_sapv['approved_number'];
					} else{
						$sapv_data[$v_sapv['ipid']][$s]['approved_number'] = "99999"; // for all sapv-s where the number was not filled
					}
					//ISPC - 2371
					$verordnungend = date("Y-m-d H:i", strtotime($v_sapv['verordnungbis']));
					$sapv_period_days[$s]['verordnungend'] = $verordnungend;
					
					$verordnungstart = date("Y-m-d H:i", strtotime($v_sapv['verordnungam']));
					$sapv_period_days[$s]['verordnungstart'] = $verordnungstart;
					//ISPC - 2371
					if($v_sapv['status'] == 1 && ($v_sapv['verorddisabledate'] != '0000-00-00 00:00:00'  || $v_sapv['verorddisabledate'] != '1970-01-01 00:00:00') )
					{
						$v_sapv['verordnungbis'] = date("Y-m-d H:i", strtotime($v_sapv['verorddisabledate']));
						//ISPC - 2371
						//$sapv_period_days[$s]['status'] = '1';
						//$sapv_period_days[$s]['verorddisabledate'] = date("Y-m-d H:i", strtotime($v_sapv['verorddisabledate']));
						//ISPC - 2371
					}
		
		
					$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
					$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
		
					$sapv_period_days[$s]['days'][] = $pm->getDaysInBetween($s_start, $s_end);
					$s++;
			
			
					//aditional data from sapv which was added on 31.10.2014
					/* $sapv_data[$v_sapv['ipid']][$s]['status'] = $v_sapv['status'];
					$sapv_data[$v_sapv['ipid']][$s]['sapv_start'] = date('d.m.Y', strtotime($v_sapv['verordnungam']));
					$sapv_data[$v_sapv['ipid']][$s]['sapv_end'] = date('d.m.Y', strtotime($v_sapv['verordnungbis']));
					$sapv_data[$v_sapv['ipid']][$s]['create_date'] = date('d.m.Y', strtotime($v_sapv['create_date']));
		
					foreach($temp_sapv_days as $k_tmp_sapv => $v_tmp_sapv)
					{
						if(!$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv])
						{
							$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array();
						}
		
						$current_verordnet = explode(',', $v_sapv['verordnet']);
						$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array_merge($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv], $current_verordnet);
		
						asort($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv]);
						$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array_values(array_unique($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv]));
					}
		
					$s++ */;
				}
			}
// 			print_r($sapv_period_days); exit;
		//ISPC - 2371
		$sapv_treatment_day = array();
		
		/* foreach($sapv_period_days as $pid => $s_periods ){
			foreach($s_periods as $k=>$sday){
				if(in_array($sday,$treatment_days)){
					$sapv_treatment_day[] = $sday;
				}
			}
		} */
		
		foreach($sapv_period_days as $sid => $s_dates ){
			foreach($s_dates['days'] as $pid => $s_periods ){
				foreach($s_periods as $k=>$sday){
					if(in_array($sday,$treatment_days)){
						$sapv_treatment_day[$sid]['days'][] = $sday; 
					}
				}
			}
			
			$sapv_treatment_day[$sid]['verordnungstart'] = $s_dates['verordnungstart'];
			$sapv_treatment_day[$sid]['verordnungend'] = $s_dates['verordnungend'];
			
			/*if($s_dates['status'] == '1')
			{
				$sapv_treatment_day[$sid]['status'] = '1';
				$sapv_treatment_day[$sid]['verorddisabledate'] = $s_dates['verorddisabledate'];
			}*/
		}
			
			
 			//print_r($sapv_treatment_day); exit;
		foreach($sapv_treatment_day as $sid=>$s_dates)
		{
			$sapv_treatment_intervals[$sid]['interval'] = Pms_CommonData::days_to_intervals($s_dates['days']);
			
			$sapv_treatment_intervals[$sid]['verordnungstart'] = $s_dates['verordnungstart'];
			$sapv_treatment_intervals[$sid]['verordnungend'] = $s_dates['verordnungend'];
			
			/*if($s_dates['status'] == '1')
			{
				$sapv_treatment_intervals[$sid]['status'] = '1';
				$sapv_treatment_intervals[$sid]['verorddisabledate'] = $s_dates['verorddisabledate'];
			}*/
		}
		
		//$sapv_treatment_intervals = Pms_CommonData::days_to_intervals($sapv_treatment_day);
		foreach ($sapv_treatment_intervals as $sid => $s_dates) {
		//foreach ($sapv_treatment_intervals as $day) {
			foreach ($s_dates['interval'] as $day) {
				$extra_event = array(
	// 					'id' => $patient_fall_data['id'],
						//'title' => "SAPV ".date('d.m.Y', strtotime($day['start'])).' - '.date('d.m.Y', strtotime($day['end'])),
						//'title' => $s_dates['status'] == '1' ? "abgelehnt am : " . date('d.m.Y', strtotime($s_dates['verorddisabledate'])) . "\n" . "SAPV ".date('d.m.Y', strtotime($s_dates['verordnungstart'])).' - '.date('d.m.Y', strtotime($s_dates['verordnungend'])) : "SAPV ".date('d.m.Y', strtotime($s_dates['verordnungstart'])).' - '.date('d.m.Y', strtotime($s_dates['verordnungend'])),
						'title' => "SAPV ".date('d.m.Y', strtotime($s_dates['verordnungstart'])).' - '.date('d.m.Y', strtotime($s_dates['verordnungend'])),
						'start' => date('Y-m-d', strtotime($day['start'])),
						'end' => date('Y-m-d', strtotime($day['end'])),
						'allDay' => true,
	// 					'createDate' => $admissionDate['create_date'],
						'eventType' => '20',
						'color' => "#E0B0FF",
						'textColor' => 'black',
						//'className' => $is_inters_n
				);
				$eventsArray[] = $extra_event;
			}
		}
		//ISPC - 2371
			
			
// 			treatment_days
			
		/* 	$pa = new PatientActive();
			$patient_falls_data = $pa->get_patient_fall($ipid);
				
			foreach($patient_falls_data as $patient_fall_data)
			{
				$admissionDate = strtotime($patient_fall_data['start']);
								
				if($patient_fall_data['end'] == "0000-00-00")
				{
					$dischargeDate = strtotime(date("d.m.Y")); //today
				}
				else
				{
					$dischargeDate = strtotime($patient_fall_data['end']);
				}
				
				$extra_event = array(
						'id' => $patient_fall_data['id'],
						'title' => "Fall ".date('d.m.Y', $admissionDate).' - '.date('d.m.Y', $dischargeDate),
								'start' => date('Y-m-d', $admissionDate),
								'end' => date('Y-m-d', $dischargeDate),
								'allDay' => true,
								'createDate' => $admissionDate['create_date'],
								'eventType' => '20',
								'color' => "#E0B0FF",
								'textColor' => 'black',
						//'className' => $is_inters_n
				);
			
				$eventsArray[] = $extra_event;
			} */

			echo json_encode($eventsArray);
			exit;
		}

		public function savepatienteventsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
//		all events
//		0.custom doctor event(edit)
//		1.docvizit
//		2.nursevizit
//		3.todo
//		4.dutyrooster
//		5.assessment
//		6.anlage4wl
//		7.sapvfb3
//		8.treatment??
//		9.verlauf koordination
//		10, 11, 12(custom events add)
//		13. contactform
//		15. verlauf U
//		16. verlauf XT
//		17. Visit Koordination

			$eventid = $_POST['eventId']; //existing = edit event  / empty = new event
			$eventTitle = $_POST['eventTitle']; //existing = edit event  / empty = new event
			$startDate = $_POST['startDate'];
			$endDate = $_POST['endDate'];

			$eventType = $_POST['eventType'];
			$allDayEvent = $_POST['allDay']; //1-true, 0-false
			$cDate = $_POST['cDate'];
			$comments = $_POST['comments'];

			switch($eventType):
				case "1": //docvizit
					if($eventid > 0)
					{
//					2011-09-19 22:16:00 - 2011-09-19 22:31:00
						$startDateArray = explode(" ", $startDate);
						$endDateArray = explode(" ", $endDate);

						$startTimeArray = explode(":", $startDateArray[1]);
						$endTimeArray = explode(":", $endDateArray[1]);

						$stamq = Doctrine_Core::getTable('KvnoDoctor')->findOneById($eventid);
						// get old values from db
						$old_start_date = $stamq->start_date;
						$old_end_date = $stamq->end_date;
						$old_vizit_date = $stamq->vizit_date;
						$old_kvno_begindate_h = date('H', strtotime($stamq->start_date));
						$old_kvno_begindate_m = date('i', strtotime($stamq->start_date));
						$old_kvno_enddate_h = date('H', strtotime($stamq->end_date));
						$old_kvno_enddate_m = date('i', strtotime($stamq->end_date));

						$stamq->kvno_begin_date_h = $startTimeArray[0];
						$stamq->kvno_begin_date_m = $startTimeArray[1];
						$stamq->kvno_end_date_h = $endTimeArray[0];
						$stamq->kvno_end_date_m = $endTimeArray[1];
						$stamq->vizit_date = $startDate;
						/* Visit START DATE and END DATE */
						$stamq->start_date = $startDate;
						$stamq->end_date = $endDate;
						/* ---------------------------- */
						$stamq->save();
						$done_date = date('Y-m-d H:i:s', strtotime($startDate));
						$cust = new PatientCourse();
						$cust->ipid = $ipid; //TO DO: after moving the calendars to navi left get this via post *DONE
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt("Besuch vom " . date('d.m.Y H:i', strtotime($done_date)) . " wurde editiert");
						$cust->recordid = $eventid;
						$cust->user_id = $userid;
						$cust->save();

						if($startDate != $old_start_date || $endDate != $old_end_date)
						{
							$old_startdate = $old_kvno_begindate_h . ':' . $old_kvno_begindate_m . ' - ' . $old_kvno_enddate_h . ':' . $old_kvno_enddate_m . ' ' . date('d.m.Y', strtotime($old_start_date));
							$new_startDate = $startTimeArray[0] . ':' . $startTimeArray[1] . ' - ' . $endTimeArray[0] . ':' . $endTimeArray[1] . ' ' . date('d.m.Y', strtotime($startDate));

							//edited contact form date verlauf entry
							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt("Besuchszeit: " . $old_startdate . ' -> ' . $new_startDate);
							$cust->user_id = $userid;

							$cust->done_name = Pms_CommonData::aesEncrypt("kvno_doctor_visit");
							$cust->done_id = $eventid;
							$cust->save();
						}
					}
//				print_r($eventType);
					break;
				case "2"://nursevizit
					if($eventid > 0)
					{
						$startDateArray = explode(" ", $startDate);
						$endDateArray = explode(" ", $endDate);

						$startTimeArray = explode(":", $startDateArray[1]);
						$endTimeArray = explode(":", $endDateArray[1]);

						$stamq = Doctrine_Core::getTable('KvnoNurse')->findOneById($eventid);
						// get old values from db
						$old_start_date = $stamq->start_date;
						$old_end_date = $stamq->end_date;
						$old_vizit_date = $stamq->vizit_date;
						$old_kvno_begindate_h = date('H', strtotime($stamq->start_date));
						$old_kvno_begindate_m = date('i', strtotime($stamq->start_date));
						$old_kvno_enddate_h = date('H', strtotime($stamq->end_date));
						$old_kvno_enddate_m = date('i', strtotime($stamq->end_date));

						$stamq->kvno_begin_date_h = $startTimeArray[0];
						$stamq->kvno_begin_date_m = $startTimeArray[1];
						$stamq->kvno_end_date_h = $endTimeArray[0];
						$stamq->kvno_end_date_m = $endTimeArray[1];
						$stamq->vizit_date = $startDate;
						/* Visit START DATE and END DATE */
						$stamq->start_date = $startDate;
						$stamq->end_date = $endDate;
						/* ---------------------------- */
						$stamq->save();
						$done_date = date('Y-m-d H:i:s', strtotime($startDate));
						$cust = new PatientCourse();
						$cust->ipid = $ipid; //TO DO: after moving the calendars to navi left get this via post
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt("Besuch vom " . date('d.m.Y H:i', strtotime($done_date)) . " wurde editiert");

						$cust->recordid = $eventid;
						$cust->user_id = $userid;
						$cust->save();

						if($startDate != $old_start_date || $endDate != $old_end_date)
						{
							$old_startdate = $old_kvno_begindate_h . ':' . $old_kvno_begindate_m . ' - ' . $old_kvno_enddate_h . ':' . $old_kvno_enddate_m . ' ' . date('d.m.Y', strtotime($old_start_date));
							$new_startDate = $startTimeArray[0] . ':' . $startTimeArray[1] . ' - ' . $endTimeArray[0] . ':' . $endTimeArray[1] . ' ' . date('d.m.Y', strtotime($startDate));

							//edited contact form date verlauf entry
							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt("Besuchszeit: " . $old_startdate . ' -> ' . $new_startDate);
							$cust->user_id = $userid;

							$cust->done_name = Pms_CommonData::aesEncrypt("kvno_nurse_visit");
							$cust->done_id = $eventid;
							$cust->save();
						}
					}
					break;
				case "5": //KVNO Reevaluation
					if($eventid > 6)
					{
//					2011-09-19 22:16:00 - 2011-09-19 22:31:00
						$stamq = Doctrine_Core::getTable('KvnoAssessment')->findOneById($eventid);
						$stamq->reeval = $startDate;
						$stamq->save();

						//verlauf
					}
					break;
				case "9": // Koord Verlauf
					if($eventid > 0)
					{
					    if(strlen($startDate) == "19") {
					        $startDate = $startDate;
					    } else {
					        $startDate = $endDate;
					    }
					    
						$qpa1 = Doctrine_Query::create()
							->select("*,
						AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,
						AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
							->from('PatientCourse')
							->where("id= ?", $eventid);
						$qp1 = $qpa1->fetchArray();

						if($qp1)
						{
							$rem = explode("|", $qp1[0]['course_title']);
							if(count($rem == 3))
							{
								$newCourseTitle = $rem[0] . " | " . $rem[1] . " | " . date("d.m.Y H:i", strtotime($startDate));
							}
						}

						$stamq = Doctrine_Core::getTable('PatientCourse')->findOneById($eventid);
						$stamq->course_title = Pms_CommonData::aesEncrypt($newCourseTitle);
						$stamq->done_date = date("Y-m-d H:i:s", strtotime($startDate));
						$stamq->save();
					}
					break;
				case "10":
					if($eventid > 0)
					{
						if ($stamq = Doctrine_Core::getTable('DoctorCustomEvents')->findOneById($eventid)) {						    
    						$stamq->eventTitle = $eventTitle;
    						$stamq->startDate = $startDate;
    						$stamq->endDate = $endDate;
    						$stamq->allDay = $allDayEvent;
    						$stamq->comments = $comments;
    						
    						$stamq->save();
						}
					}
					break;
				case "14":
					if(empty($eventid) || $eventid == 0)
					{ //add as new
						$docEvent = new DoctorCustomEvents();
						$docEvent->userid = 0;
						$docEvent->clientid = $clientid;
						$docEvent->ipid = $ipid;
						$docEvent->eventTitle = $eventTitle;
						$docEvent->startDate = $startDate;
						$docEvent->endDate = $endDate;
						$docEvent->eventType = $eventType;
						$docEvent->allDay = $allDayEvent;
						$docEvent->comments = $comments;
						$docEvent->save();
					}
					else
					{
						if ($stamq = Doctrine_Core::getTable('DoctorCustomEvents')->findOneById($eventid)) {					    
    						$stamq->eventTitle = $eventTitle;
    						$stamq->startDate = $startDate;
    						$stamq->endDate = $endDate;
    						$stamq->allDay = $allDayEvent;
    						$stamq->comments = $comments;
    						$stamq->save();
						}
					}
					break;
				case "13": //contactforms
					if($eventid > 0)
					{
//						2011-09-19 22:16:00 - 2011-09-19 22:31:00
						$startDateArray = explode(" ", $startDate);
						$endDateArray = explode(" ", $endDate);

						$startTimeArray = explode(":", $startDateArray[1]);
						$endTimeArray = explode(":", $endDateArray[1]);

						$stamq = Doctrine_Core::getTable('ContactForms')->findOneById($eventid);
						//get old values from contact form
						$old_start_date = $stamq->start_date;
						$old_end_date = $stamq->end_date;
						$old_billable_date = $stamq->billable_date;
						$old_begindate_h = $stamq->begin_date_h;
						$old_begindate_m = $stamq->begin_date_m;
						$old_enddate_h = $stamq->end_date_h;
						$old_enddate_m = $stamq->end_date_m;

						$stamq->begin_date_h = $startTimeArray[0];
						$stamq->begin_date_m = $startTimeArray[1];
						$stamq->end_date_h = $endTimeArray[0];
						$stamq->end_date_m = $endTimeArray[1];
						$stamq->date = $startDate;
						/* Visit START DATE and END DATE */
						$stamq->start_date = $startDate;
						$stamq->end_date = $endDate;
						// ISPC 2019
						if($old_billable_date == $old_start_date ){
							$stamq->billable_date = $startDate;
						}elseif($old_billable_date == $old_end_date ){
							$stamq->billable_date = $endDate;
						}
						
						/* ---------------------------- */
						$stamq->save();

						$update_old_link = Doctrine_Query::create()
							->update('PatientCourse')
							->set('tabname','?',Pms_CommonData::aesEncrypt("contact_form_no_link") )
							->where('ipid LIKE ?',$ipid )
							->andWhere('tabname= ?',Pms_CommonData::aesEncrypt("contact_form"))
							->andWhere('recordid  = ?', $eventid)
							->andWhere('source_ipid = ""');
						$update_old_link->execute();

						$done_date = $startDate;
						$cust = new PatientCourse();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt("Besuch vom " . date('d.m.Y H:i', strtotime($old_start_date)) . " wurde editiert");
						$cust->tabname = Pms_CommonData::aesEncrypt("contact_form");
						$cust->recordid = $eventid;
						$cust->done_date = $done_date;
						$cust->user_id = $userid;
						$cust->save();

						if($startDate != $old_start_date)
						{
							//$done_date = date('Y-m-d H:i:s', strtotime($startDate . ' ' . $startTimeArray[0] . ':' . $startTimeArray[1] . ':00'));
							$done_date = $startDate;
							$old_startdate = date('d.m.Y', strtotime($old_start_date));
							$new_startDate = date('d.m.Y', strtotime($startDate));
							//edited contact form date verlauf entry
							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt('Datum: ' . $old_startdate . ' --> ' . $new_startDate);
							$cust->user_id = $userid;
							$cust->done_date = $done_date;
							$cust->done_name = Pms_CommonData::aesEncrypt("contact_form");
							$cust->done_id = $eventid;
							$cust->save();
						}
						if($startTimeArray[0] != $old_begindate_h || $startTimeArray[1] != $old_begindate_m)
						{
							$old_start_hm = $old_begindate_h . ':' . $old_begindate_m;
							$start_hm = $startTimeArray[0] . ':' . $startTimeArray[1];

							//$done_date = date('Y-m-d H:i:s', strtotime($startDate . ' ' . $startTimeArray[0] . ':' . $startTimeArray[1] . ':00'));
							$done_date = $startDate;
							//edited contact form date verlauf entry
							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt('Beginn: ' . $old_start_hm . ' --> ' . $start_hm);
							$cust->user_id = $userid;
							$cust->done_date = $done_date;
							$cust->done_name = Pms_CommonData::aesEncrypt("contact_form");
							$cust->done_id = $eventid;
							$cust->save();
						}
						if($endTimeArray[0] != $old_enddate_h || $endTimeArray[1] != $old_enddate_m)
						{
							$old_end_hm = $old_enddate_h . ':' . $old_enddate_m;
							$end_hm = $endTimeArray[0] . ':' . $endTimeArray[1];

							//$done_date = date('Y-m-d H:i:s', strtotime($startDate . ' ' . $startTimeArray[0] . ':' . $startTimeArray[1] . ':00'));
							$done_date = $startDate;
							//edited contact form date verlauf entry
							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt('Ende: ' . $old_end_hm . ' --> ' . $end_hm);
							$cust->user_id = $userid;
							$cust->done_date = $done_date;
							$cust->done_name = Pms_CommonData::aesEncrypt("contact_form");
							$cust->done_id = $eventid;
							$cust->save();
						}
					}
//				print_r($eventType);
					break;
				case "15": // U Verlauf
					if($eventid > 0)
					{
						$qpa1 = Doctrine_Query::create()
							->select("*,
							AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,
							AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
							->from('PatientCourse')
							->where("id= ?", $eventid)
							->andWhere('source_ipid = ""');
						$qp1 = $qpa1->fetchArray();

						if($qp1)
						{
							$rem = explode("|", $qp1[0]['course_title']);

							if(count($rem == 4))
							{
								$newCourseTitle = $rem[0] . "|" . $rem[1] . "|" . $rem[2] . "|" . date("d.m.Y H:i", strtotime($startDate));
							}
						}

						$stamq = Doctrine_Core::getTable('PatientCourse')->findOneById($eventid);
						$stamq->course_title = Pms_CommonData::aesEncrypt($newCourseTitle);
						$stamq->done_date = date("Y-m-d H:i:s", strtotime($startDate));
						$stamq->save();
					}
					break;
				case "16": // XT Verlauf
					if($eventid > 0)
					{
						$qpa1 = Doctrine_Query::create()
							->select("*,
							AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,
							AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
							->from('PatientCourse')
							->where("id= ?", $eventid)
							->andWhere('source_ipid = ""');
						$qp1 = $qpa1->fetchArray();

						if($qp1)
						{
							$rem = explode("|", $qp1[0]['course_title']);

							if(count($rem == 3))
							{
								$newCourseTitle = $rem[0] . "|" . $rem[1] . "|" . date("d.m.Y H:i", strtotime($startDate));
							}
						}

						$stamq = Doctrine_Core::getTable('PatientCourse')->findOneById($eventid);
						$stamq->course_title = Pms_CommonData::aesEncrypt($newCourseTitle);
						$stamq->done_date = date("Y-m-d H:i:s", strtotime($startDate));
						$stamq->save();
					}
					break;
				case "17": //koordination visit
					if($eventid > 0)
					{
//					2011-09-19 22:16:00 - 2011-09-19 22:31:00
						$startDateArray = explode(" ", $startDate);
						$endDateArray = explode(" ", $endDate);

						$startTimeArray = explode(":", $startDateArray[1]);
						$endTimeArray = explode(":", $endDateArray[1]);

						$stamq = Doctrine_Core::getTable('VisitKoordination')->findOneById($eventid);

						$stamq->visit_begin_date_h = $startTimeArray[0];
						$stamq->visit_begin_date_m = $startTimeArray[1];
						$stamq->visit_end_date_h = $endTimeArray[0];
						$stamq->visit_end_date_m = $endTimeArray[1];
						$stamq->visit_date = $startDate;
						/* Visit START DATE and END DATE */
						$stamq->start_date = $startDate;
						$stamq->end_date = $endDate;
						/* ---------------------------- */
						$stamq->save();

						$cust = new PatientCourse();
						$cust->ipid = $ipid; //TO DO: after moving the calendars to navi left get this via post *DONE
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt("Besuch vom " . date('d.m.Y H:i', strtotime($cDate)) . " wurde editiert");
						$cust->recordid = $eventid;
						$cust->user_id = $userid;
						$cust->save();
					}
					break;
				default:
					break;
			endswitch;
			exit;
		}

		public function deleventsAction()
		{
			$eventid = $_POST['eventId'];
			$eventType = $_POST['eventType'];
			$calendar = $_REQUEST['calendar'];
			switch($eventType)
			{
				case "10":
				case "11":
				case "12":
				case "13":
				case "14":
				case "15":
				case "16":
				case "17":
				case "20":
				case "21":
				case "22":
					if($eventid > 0 && is_numeric($eventid))
					{
						if($calendar == "doc")
						{
							$del = Doctrine_Query::create()
								->delete('DoctorCustomEvents dce')
								->where('dce.id = ?', $eventid);
							$rows = $del->execute();
						}
						else if($calendar == "team")
						{
							$del = Doctrine_Query::create()
								->delete('TeamCustomEvents tce')
								->where('tce.id = ?', $eventid);
							$rows = $del->execute();
						}
					}
					break;
			}

//			echo $del->getSqlQuery();
			exit;
		}

		function getAllClientPatients($clientid, $whereepid = '')
		{
			$actpatient = Doctrine_Query::create()
				->select("p.ipid")
				->from('PatientMaster p');
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->where($whereepid . 'e.clientid = ' . $clientid);


			$actipidarray = $actpatient->fetchArray();

			return $actipidarray;
		}

		private function getActivePatients($quarterarr, $yeararr, $montharr, $median = false)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$finalipidval = array();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$allpatients = $this->getAllClientPatients($logininfo->clientid, $whereepid);
			foreach($allpatients as $allpatient_item)
			{
				$allpatients_str .= '"' . $allpatient_item['ipid'] . '",';
				$allpatients_arr[] = $allpatient_item['ipid'];
			}

			if($median)
			{
				$condition = str_replace('<', '', str_replace('%date%', 'admission_date', $active_cond['admission_sql']));
			}
			else
			{
				$condition = str_replace('%date%', 'admission_date', $active_cond['admission_sql']);
			}

			$allpatients_arr[] = '999999';
			$actpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 0')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('(' . $condition . ')')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC")
				->leftJoin("p.EpidIpidMapping e")
				->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid)
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
//		print_r($actpatient->getSqlQuery()."\n\n<br />");
			$actipidarray = $actpatient->fetchArray();

			foreach($actipidarray as $key => $val)
			{
				$finalipidval[] = $val['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('(' . str_replace('%date%', 'admission_date', $active_cond['admission_sql']) . ')')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$patient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$ipidarray = $patient->fetchArray();

			if(is_array($ipidarray) && sizeof($ipidarray) > 0)
			{

				foreach($ipidarray as $key => $val)
				{
					$disipidval .= '"' . $val['ipid'] . '",';
					$disipidarr[] = $val['ipid'];
				}
				$disipidarr[] = '999999';

				$disquery = Doctrine_Query::create()
					->select("*")
					->from('PatientDischarge')
					->where('(' . str_replace('%date%', 'discharge_date', $active_cond['active_sql']) . ')')
					->andWhereIn('ipid', $disipidarr);

				$disarray = $disquery->fetchArray();
//			print_r($disquery->getDql());exit;
				foreach($disarray as $key => $val)
				{
					$finalipidval[] = $val['ipid'];
				}
			}


			if($active_cond['onlynowactive'] != 1)
			{
				$readmission_add = Doctrine_Query::create()
					->select("p.ipid as theipid, p.date AS date_start, id")
					->addSelect("(SELECT r.date FROM PatientReadmission r WHERE r.date_type = 2 and r.date > p.date and p.ipid=r.ipid order by r.date ASC limit 1) AS date_end")
					->from("PatientReadmission p")
					->where('p.date_type = 1')
					->andWhereIn('p.ipid', $allpatients_arr)
					->having(str_replace('%', '', $active_cond['interval_sql']))
					->orderBy("theipid asc, date_start, date_end");
				$add_array = $readmission_add->fetchArray(); //get patients that WERE active during time frame and add to final array

				if(sizeof($add_array) > 0)
				{
					foreach($add_array as $add_pat)
					{
						$finalipidval[] = $add_pat['theipid'];
					}
				}

				$finalipidval = array_unique($finalipidval);
//			print_r($finalipidval); exit;
				$readmission_del = Doctrine_Query::create()
					->select("p.ipid as theipid, p.date AS date_start, id")
					->addSelect("(SELECT r.date FROM PatientReadmission r WHERE r.date_type = 1 and r.date > p.date and p.ipid=r.ipid order by r.date ASC limit 1) AS date_end")
					->from("PatientReadmission p")
					->where('p.date_type = 2')
					->andWhereIn('p.ipid', $allpatients_arr)
					->having(str_replace('%', '', $active_cond['readmission_delete_sql']))
					->orderBy("theipid asc, date_start, date_end");
				$del_array = $readmission_del->fetchArray(); //get patients that WERE NOT active during time frame and DELETE from final array

				if(sizeof($del_array) > 0)
				{
					foreach($del_array as $del_pat)
					{
						$thekey = array_search($del_pat['theipid'], $finalipidval);
						if($thekey !== false)
						{
							unset($finalipidval[$thekey]);
						}
					}
				}
			}

			return $finalipidval;
		}

		private function getDeadPatients($quarterarr, $yeararr, $montharr)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$finalipidval = array();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$allpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('(' . str_replace('%date%', 'admission_date', $active_cond['date_sql']) . ')')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$allarray = $allpatient->fetchArray();
//		echo $allpatient->getSqlQuery();

			$allarray[999999]['ipid'] = 'X'; //force empty query
			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}

			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid='" . $logininfo->clientid . "' AND (abbr='TOD' OR abbr='TODNA')");
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}

			$deadpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ") AND discharge_method IN (" . implode($dm_deadfinal, ',') . ") AND isdelete=0");
//		echo $deadpatients->getSqlQuery();
			$deadpatientarray = $deadpatients->fetchArray();

			if($deadpatientarray)
			{
				foreach($deadpatientarray as $deadpatient)
				{
					$finaldeadpatient[] = $deadpatient['ipid'];
				}

				return $finaldeadpatient;
			}
		}

		public function fetchnhospizlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			/* #### Check if client has permission to see the organisation column ################## */
			$this->view->org_column = 0;
			$organisationprevileges = new Modules();
			$display_org = $organisationprevileges->checkModulePrivileges("72", $logininfo->clientid);

			if($display_org)
			{
				$this->view->org_column = 1;
			}
			/* ##################################################################################### */

//		var_dump($_GET['ord']);exit;
			$limit = 50;
			$columnarray = array("pk" => "id", "fn" => "p__0", "ln" => "p__2", "rd" => "p__admission_date", "ledt" => "p__change_date", "bd" => "p__birthd", 'ed' => 'epid_num');
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$this->view->order = $orderarray[$_GET['ord']];
			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];

			$logininfo = new Zend_Session_Namespace('Login_Info');

			if($logininfo->usertype == 'SA')
			{
				
			}
			else
			{
				
			}

			$user_patients = PatientUsers::getUserPatients($logininfo->userid); //get user's patients by permission

			$patient = Doctrine_Query::create()
				->select('p.ipid')
				->from('PatientMaster p')
				->where('p.isdelete = 0')
				->andWhere('p.ipid IN (' . $user_patients['patients_str'] . ')')
				->andWhere('p.isdischarged = 0')
				->andWhere('p.isstandby = 0')
				->andWhere('p.ishospiz = 1')
				->andWhere('p.isstandbydelete = 0');
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere('e.clientid = ' . $logininfo->clientid);
			$patienidtarray = $patient->fetchArray();

			$patientarray[0]['count'] = sizeof($patienidtarray);
			$patienidtarray[9999999] = "xx";

			$orderbyloc = new PatientLocation();
			$patlocdet = $orderbyloc->getOrderbyLocation($patienidtarray, $logininfo->clientid);

			$orderbylocation = $patlocdet['orderbylocation'];
			$patient2location = $patlocdet['patient2location'];
			$patient2home = $patlocdet['patient2home'];

			if(is_array($orderbylocation))
			{
				foreach($orderbylocation as $obl)
				{
					$orderbylocation_str .= '"' . $obl . '",';
				}
			}
			$verdoung = new SapvVerordnung();
			$verd = $verdoung->getPatientsSapvVerordnungDetails($patienidtarray, false, true);

			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.traffic_status,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.isadminvisible,p.traffic_status,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
			}

			$patient->select($sql);
			$patient->limit($limit);

			if($_GET['clm'] == 'cl')
			{
				$patient->orderBy('FIELD(e__ipid, ' . substr($orderbylocation_str, 0, -1) . ') ' . $_GET['ord'] . ', e__ipid');
			}
			else
			{
				$patient->orderBy($columnarray[$_GET['clm']] . " " . $_GET['ord']);
			}
			$this->view->{"style" . $_GET['pgno']} = "active";
			$patient->offset($_GET['pgno'] * $limit);
			$this->view->offset = ($_GET['pgno'] * $limit);
			$patientlimit = $patient->fetchArray();

			$patient_ipids[] = '999999999';
			foreach($patientlimit as $k_pat_limit => $v_pat_limit)
			{
				$patient_ipids[] = $v_pat_limit['EpidIpidMapping']['ipid'];

				$pat_limit_epids[] = $v_pat_limit['EpidIpidMapping']['epid'];
			}

			$sapv = new SapvVerordnung();
			$patient_sapv_data = $sapv->get_today_active_highest_sapv($patient_ipids);

			//get patient sapv statuses START
			$paths = new OrgPaths();
			$client_paths = $paths->get_paths($logininfo->clientid);

			//multiple ipids
			$data = array();
			$executed_functions = array();
			foreach($client_paths as $k_c_path => $v_c_path)
			{
				if(!in_array($v_c_path['function'], $executed_functions))
				{

					if(empty($data))
					{
						$data = array();
					}

					$executed_functions[] = $v_c_path['function'];
					$retrived_data = $paths->{$v_c_path['function']}($patient_ipids);
					if($retrived_data)
					{
						$data = array_merge_recursive($data, $retrived_data);
					}
				}
			}

			foreach($data as $k_ipid => $v_function_data)
			{
				if($k_ipid != '999999999')
				{
					foreach($v_function_data as $k_function => $v_function_arr)
					{
						foreach($v_function_arr as $k_short => $v_short_status)
						{
							if($v_short_status['status'] != "gray" && $v_short_status['status'] != "green")
							{
								if($advance[$k_ipid][$k_function] == "1" || count($advance[$k_ipid][$k_function]) == '0')
								{
									if($k_function != 'admission_todo')
									{
										$last_status[$k_ipid][$k_function]['shortcut'] = $k_short;
										$last_status[$k_ipid][$k_function]['status'] = $v_short_status['status'];

										if($v_short_status['status'] == "red")
										{
											$advance[$k_ipid][$k_function] = 0;
										}
										else
										{
											$advance[$k_ipid][$k_function] = 1;
										}
									}
									else
									{
										$adm_data['shortcut'] = $k_short;
										$adm_data['status'] = $v_short_status['status'];

										$last_status[$k_ipid][$k_function][] = $adm_data;
									}
								}
							}
						}
					}
				}
			}
			//get patient sapv statuses END


			$assignuser = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('clientid=' . $logininfo->clientid)
				->andWhere('isdelete=0 and isactive=0')
				->orderBy('last_name ASC');
			$assignuserarray = $assignuser->fetchArray();

			foreach($assignuserarray as $k => $uvalues)
			{
				$user_details[$uvalues['id']]['name'] = $uvalues['user_title'] . ' ' . $uvalues['last_name'] . ', ' . $uvalues['first_name'];
			}

			if(count($pat_limit_epids) == '0')
			{
				$pat_limit_epids[] = '999999999';
			}

			$qpa = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->whereIn('epid', $pat_limit_epids)
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$qpaarray = $qpa->fetchArray();


			foreach($qpaarray as $k => $qpa_value)
			{
				if(!empty($user_details[$qpa_value['userid']]['name']))
				{
					$epid2qpa[$qpa_value['epid']][] = $user_details[$qpa_value['userid']]['name'];
				}
			}

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($patient_ipids);

			foreach($healthinsu_array as $h => $hvalues)
			{
				$pat2health[$hvalues['ipid']] = $hvalues;
			}





			foreach($patientlimit as $key => $patient_item)
			{
				if(strlen($patient_item['street1']) > 0)
				{
					$address[$patient_item["EpidIpidMapping"]['ipid']] .= $patient_item['street1'] . '<br />';
				}

				if(strlen($patient_item['zip']) > 0)
				{
					$address[$patient_item["EpidIpidMapping"]['ipid']] .= $patient_item['zip'] . ' ';
				}

				if(strlen($patient_item['city']) > 0)
				{
					$address[$patient_item["EpidIpidMapping"]['ipid']] .= $patient_item['city'];
				}

				$parient_address[$patient_item["EpidIpidMapping"]['ipid']] = $address[$patient_item["EpidIpidMapping"]['ipid']];

				if(!empty($patient2location[$patient_item["EpidIpidMapping"]['ipid']]))
				{
					if(in_array($patient_item["EpidIpidMapping"]['ipid'], $patient2home))
					{
						$patientlimit[$key]['location'] = $patient2location[$patient_item["EpidIpidMapping"]['ipid']] . '<br/>' . $parient_address[$patient_item["EpidIpidMapping"]['ipid']];
					}
					else
					{
						$patientlimit[$key]['location'] = $patient2location[$patient_item["EpidIpidMapping"]['ipid']];
					}
				}
				else
				{
					$patientlimit[$key]['location'] = '-';
				}

				if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $patient_sapv_data['last']))
				{
					$patientlimit[$key]['verordnet'] = $patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['verordnet'];
					$patientlimit[$key]['status'] = $patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['status'];
				}
				else
				{
					$patientlimit[$key]['verordnet'] = '';
					$patientlimit[$key]['status'] = '';
				}

				if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $last_status))
				{
					foreach($last_status[$patient_item['EpidIpidMapping']['ipid']] as $k_path => $v_data)
					{
						if($k_path != 'admission_todo')
						{
							$patientlimit[$key]['org_shortcuts'][] = $v_data['shortcut'];
							$patientlimit[$key]['org_color'][] = $v_data['status'];
						}
						else
						{
							foreach($v_data as $k_arr_adm => $v_arr_adm)
							{
								$patientlimit[$key]['org_shortcuts'][] = $v_arr_adm['shortcut'];
								$patientlimit[$key]['org_color'][] = $v_arr_adm['status'];
							}
						}
					}
				}
				else
				{
					$patientlimit[$key]['org_shortcuts'][] = '';
					$patientlimit[$key]['org_color'][] = '';
				}


				if(!empty($pat2health[$patient_item['EpidIpidMapping']['ipid']]))
				{
					$patientlimit[$key]['privatepatient_info'] = $pat2health[$patient_item['EpidIpidMapping']['ipid']]['privatepatient'];
				}

				$patientlimit[$key]['treated_by'] = implode('<br/>', $epid2qpa[$patient_item["EpidIpidMapping"]['epid']]);
			}

			$grid = new Pms_Grid($patientlimit, 1, $patientarray[0]['count'], "listnhospizpatient.html");
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("nhospizpatientnavigation.html", 5, $_GET['pgno'], $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patient/fetchnhospizlist.html');

			echo json_encode($response);
			exit;
		}

		public function fetchhospizvereinlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('Patient', $logininfo->userid, 'canview');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			/* #### Check if client has permission to see the organisation column ################## */
			$this->view->org_column = 0;
			$organisationprevileges = new Modules();
			$display_org = $organisationprevileges->checkModulePrivileges("72", $logininfo->clientid);
			if($display_org)
			{
				$this->view->org_column = 1;
			}
			/* ##################################################################################### */

			$limit = 50;
			$columnarray = array("pk" => "id", "fn" => "p__0", "ln" => "p__2", "rd" => "p__admission_date", "ledt" => "p__change_date", "bd" => "p__birthd", 'ed' => 'epid_num');
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$sorting_array = array('ln' => 'last_name', 'fn' => 'first_name');

			$this->view->order = $orderarray[$_GET['ord']];
			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];

			$logininfo = new Zend_Session_Namespace('Login_Info');

			if($logininfo->usertype == 'SA')
			{
				
			}
			else
			{
				
			}

			$user_patients = PatientUsers::getUserPatients($logininfo->userid); //get user's patients by permission

			$patient = Doctrine_Query::create()
				->select('p.ipid')
				->from('PatientMaster p')
				->where('p.isdelete = 0')
				->andWhere('p.ipid IN (' . $user_patients['patients_str'] . ')')
				->andWhere('p.isdischarged = 0')
				->andWhere('p.isstandby = 0')
				->andWhere('p.ishospizverein = 1')
				->andWhere('p.isstandbydelete = 0');
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere('e.clientid = ' . $logininfo->clientid);
			$patienidtarray = $patient->fetchArray();

			$patientarray[0]['count'] = sizeof($patienidtarray);
			$patienidtarray[9999999] = "xx";

			$orderbyloc = new PatientLocation();
			$patlocdet = $orderbyloc->getOrderbyLocation($patienidtarray, $logininfo->clientid);

			$orderbylocation = $patlocdet['orderbylocation'];
			$patient2location = $patlocdet['patient2location'];
			$patient2home = $patlocdet['patient2home'];

			if(is_array($orderbylocation))
			{
				foreach($orderbylocation as $obl)
				{
					$orderbylocation_str .= '"' . $obl . '",';
				}
			}
			$verdoung = new SapvVerordnung();
			$verd = $verdoung->getPatientsSapvVerordnungDetails($patienidtarray, false, true);

			$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.traffic_status,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";

			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.isadminvisible,p.traffic_status,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
			}

			$patient->select($sql);
			$patient->limit($limit);

			if($_GET['clm'] == 'cl')
			{
				$patient->orderBy('FIELD(e__ipid, ' . substr($orderbylocation_str, 0, -1) . ') ' . $_GET['ord'] . ', e__ipid');
			}
			else if($_REQUEST['clm'] == 'fn' || $_REQUEST['clm'] == 'ln')
			{
				$patient->orderBy('CONVERT(AES_DECRYPT(' . $sorting_array[$_REQUEST['clm']] . ', "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ' . $_REQUEST['ord'] . '');
			}
			else
			{
				$patient->orderBy($columnarray[$_GET['clm']] . " " . $_GET['ord']);
			}

			$this->view->{"style" . $_GET['pgno']} = "active";
			$patient->offset($_GET['pgno'] * $limit);
			$patient->view->offset = ($_GET['pgno'] * $limit);
			$patientlimit = $patient->fetchArray();

			$patient_ipids[] = '999999999';
			foreach($patientlimit as $k_pat_limit => $v_pat_limit)
			{
				$patient_ipids[] = $v_pat_limit['EpidIpidMapping']['ipid'];
				$pat_limit_epids[] = $v_pat_limit['EpidIpidMapping']['epid'];
			}

			$sapv = new SapvVerordnung();
			$patient_sapv_data = $sapv->get_today_active_highest_sapv($patient_ipids);

			//get patient sapv statuses START
			$paths = new OrgPaths();
			$client_paths = $paths->get_paths($logininfo->clientid);

			//	multiple ipids
			$data = array();
			$executed_functions = array();
			foreach($client_paths as $k_c_path => $v_c_path)
			{
				if(!in_array($v_c_path['function'], $executed_functions))
				{

					if(empty($data))
					{
						$data = array();
					}

					$executed_functions[] = $v_c_path['function'];
					$retrived_data = $paths->{$v_c_path['function']}($patient_ipids);
					if($retrived_data)
					{
						$data = array_merge_recursive($data, $retrived_data);
					}
				}
			}

			foreach($data as $k_ipid => $v_function_data)
			{
				if($k_ipid != '999999999')
				{
					foreach($v_function_data as $k_function => $v_function_arr)
					{
						foreach($v_function_arr as $k_short => $v_short_status)
						{
							if($v_short_status['status'] != "gray" && $v_short_status['status'] != "green")
							{
								if($advance[$k_ipid][$k_function] == "1" || count($advance[$k_ipid][$k_function]) == '0')
								{
									if($k_function != 'admission_todo')
									{
										$last_status[$k_ipid][$k_function]['shortcut'] = $k_short;
										$last_status[$k_ipid][$k_function]['status'] = $v_short_status['status'];

										if($v_short_status['status'] == "red")
										{
											$advance[$k_ipid][$k_function] = 0;
										}
										else
										{
											$advance[$k_ipid][$k_function] = 1;
										}
									}
									else
									{
										$adm_data['shortcut'] = $k_short;
										$adm_data['status'] = $v_short_status['status'];

										$last_status[$k_ipid][$k_function][] = $adm_data;
									}
								}
							}
						}
					}
				}
			}
			//get patient sapv statuses END



			$assignuser = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('clientid= ?', $logininfo->clientid)
				->andWhere('isdelete=0 and isactive=0')
				->orderBy('last_name ASC');
			$assignuserarray = $assignuser->fetchArray();

			foreach($assignuserarray as $k => $uvalues)
			{
				$user_details[$uvalues['id']]['name'] = $uvalues['user_title'] . ' ' . $uvalues['last_name'] . ', ' . $uvalues['first_name'];
			}

			if(count($pat_limit_epids) == '0')
			{
				$pat_limit_epids[] = '999999999';
			}

			$qpa = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->whereIn('epid', $pat_limit_epids)
				->andWhere('clientid = ?', $logininfo->clientid );
			$qpaarray = $qpa->fetchArray();

			foreach($qpaarray as $k => $qpa_value)
			{
				if(!empty($user_details[$qpa_value['userid']]['name']))
				{
					$epid2qpa[$qpa_value['epid']][] = $user_details[$qpa_value['userid']]['name'];
				}
			}

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($patient_ipids);

			foreach($healthinsu_array as $h => $hvalues)
			{
				$pat2health[$hvalues['ipid']] = $hvalues;
			}


			foreach($patientlimit as $key => $patient_item)
			{
				if(strlen($patient_item['street1']) > 0)
				{
					$address[$patient_item["EpidIpidMapping"]['ipid']] .= $patient_item['street1'] . '<br />';
				}
				if(strlen($patient_item['zip']) > 0)
				{
					$address[$patient_item["EpidIpidMapping"]['ipid']] .= $patient_item['zip'] . ' ';
				}
				if(strlen($patient_item['city']) > 0)
				{
					$address[$patient_item["EpidIpidMapping"]['ipid']] .= $patient_item['city'];
				}

				$parient_address[$patient_item["EpidIpidMapping"]['ipid']] = $address[$patient_item["EpidIpidMapping"]['ipid']];


				if(!empty($patient2location[$patient_item["EpidIpidMapping"]['ipid']]))
				{
					if(in_array($patient_item["EpidIpidMapping"]['ipid'], $patient2home))
					{
						$patientlimit[$key]['location'] = $patient2location[$patient_item["EpidIpidMapping"]['ipid']] . '<br/>' . $parient_address[$patient_item["EpidIpidMapping"]['ipid']];
					}
					else
					{
						$patientlimit[$key]['location'] = $patient2location[$patient_item["EpidIpidMapping"]['ipid']];
					}
				}
				else
				{
					$patientlimit[$key]['location'] = '-';
				}


				if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $patient_sapv_data['last']))
				{
					$patientlimit[$key]['verordnet'] = $patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['verordnet'];
					$patientlimit[$key]['status'] = $patient_sapv_data['last'][$patient_item['EpidIpidMapping']['ipid']]['status'];
				}
				else
				{
					$patientlimit[$key]['verordnet'] = '';
					$patientlimit[$key]['status'] = '';
				}

				if(array_key_exists($patient_item['EpidIpidMapping']['ipid'], $last_status))
				{
					foreach($last_status[$patient_item['EpidIpidMapping']['ipid']] as $k_path => $v_data)
					{
						if($k_path != 'admission_todo')
						{
							$patientlimit[$key]['org_shortcuts'][] = $v_data['shortcut'];
							$patientlimit[$key]['org_color'][] = $v_data['status'];
						}
						else
						{
							foreach($v_data as $k_arr_adm => $v_arr_adm)
							{
								$patientlimit[$key]['org_shortcuts'][] = $v_arr_adm['shortcut'];
								$patientlimit[$key]['org_color'][] = $v_arr_adm['status'];
							}
						}
					}
				}
				else
				{
					$patientlimit[$key]['org_shortcuts'][] = '';
					$patientlimit[$key]['org_color'][] = '';
				}

				$patientlimit[$key]['epid'] = $patient_item["EpidIpidMapping"]['epid'];

				if(!empty($pat2health[$patient_item['EpidIpidMapping']['ipid']]))
				{
					$patientlimit[$key]['privatepatient_info'] = $pat2health[$patient_item['EpidIpidMapping']['ipid']]['privatepatient'];
				}

				$patientlimit[$key]['treated_by'] = implode('<br/>', $epid2qpa[$patient_item["EpidIpidMapping"]['epid']]);
			}

			$grid = new Pms_Grid($patientlimit, 1, $patientarray[0]['count'], "listhospizvereinpatient.html");
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("hospizvereinpatientnavigation.html", 5, $_GET['pgno'], $limit);

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patient/fetchhospizvereinlist.html');

			echo json_encode($response);
			exit;
		}

		private function array_sort($array, $on = NULL, $order = SORT_ASC)
		{
			$new_array = array();
			$sortable_array = array();

			if(count($array) > 0)
			{
				foreach($array as $k => $v)
				{
					if(is_array($v))
					{
						foreach($v as $k2 => $v2)
						{
							if($k2 == $on)
							{
								if($on == 'birthd' || $on == 'admissiondate' || $on == 'admission_date' || $on == 'discharge_date' || $on == 'diedon' || $on == 'birthdyears' || $on == 'dischargedate' || $on == 'beginvisit' || $on == 'endvisit' || $on == 'dateofbirth' || $on == 'date' || $on == 'letter_date')
								{

									if($on == 'birthdyears')
									{
										$v2 = substr($v2, 0, 10);
									}
									$sortable_array[$k] = strtotime($v2);
								}
								elseif($on == 'epid')
								{
									$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v2);
								}
								elseif($on == 'percentage')
								{
									$sortable_array[$k] = preg_replace('/[^\d\.]/', '', $v2);
								}
								else
								{
									$sortable_array[$k] = ucfirst($v2);
								}
							}
						}
					}
					else
					{
						if($on == 'birthd' || $on == 'admission_date' || $on == 'admissiondate' || $on == 'discharge_date' || $on == 'diedon' || $on == 'birthdyears' || $on == 'dischargedate' || $on == 'beginvisit' || $on == 'endvisit' || $on == 'dateofbirth' || $on == 'date' || $on == 'letter_date')
						{
							if($on == 'birthdyears')
							{
								$v = substr($v, 0, 10);
							}
							$sortable_array[$k] = strtotime($v);
						}
						elseif($on == 'epid' || $on == 'percentage')
						{
							$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v);
						}
						elseif($on == 'percentage')
						{
							$sortable_array[$k] = preg_replace('/[^\d\.]/', '', $v2);
						}
						else
						{
							$sortable_array[$k] = ucfirst($v);
						}
					}
				}

				switch($order)
				{
					case SORT_ASC:
//						asort($sortable_array);
						$sortable_array = Pms_CommonData::a_sort($sortable_array);
						break;
					case SORT_DESC:
//						arsort($sortable_array);
						$sortable_array = Pms_CommonData::ar_sort($sortable_array);
						break;
				}

				foreach($sortable_array as $k => $v)
				{
					$new_array[$k] = $array[$k];
				}
			}

			return $new_array;
		}

		public function abimportfetchajaxAction()
		{
			$this->_helper->viewRenderer('doctorletter');

			if($this->getRequest()->isPost() && !empty($_POST['type']) && !empty($_POST['eid']))
			{
				$type = $_POST['type'];
				$entity_id = $_POST['eid'];

				switch($type)
				{

					case'H': //hausarzt
						$family_doctor = FamilyDoctor::getFamilyDoc($entity_id);
//					print_r($family_doctor);exit;
						$fax_recipient = $family_doctor[0]['fax'];

						$receipient_data = '';
						$name_from_address = '';
						
						$last_name_from_address = '';
						$first_name_from_address = '';
						$salutation_from_address = '';
						
						if(!empty($family_doctor[0]['practice']))
						{
							$receipient_data .= trim($family_doctor[0]['practice']) . "\n";
						}

						if(!empty($family_doctor[0]['first_name']) || !empty($family_doctor[0]['last_name']))
						{
							if(!empty($family_doctor[0]['title']))
							{
								$receipient_data .= $family_doctor[0]['title'] . ' ';
								$name_from_address .= $family_doctor[0]['title'] . ' ';
							}

							if(!empty($family_doctor[0]['first_name']))
							{
								$receipient_data .= $family_doctor[0]['first_name'] . ' ';
								$name_from_address .= $family_doctor[0]['first_name'] . ' ';
								$first_name_from_address = $family_doctor[0]['first_name'] . ' ';
							}

							if(!empty($family_doctor[0]['last_name']))
							{
								$receipient_data .= $family_doctor[0]['last_name'] . ' ';
								$name_from_address .= $family_doctor[0]['last_name'] . ' ';
								$last_name_from_address = $family_doctor[0]['last_name'] . ' ';
							}
							
							if(!empty($family_doctor[0]['salutation']))
							{
								$salutation_from_address = $family_doctor[0]['salutation'] . ' ';
							}
							
							$receipient_data .= "\n";
						}

						if(!empty($family_doctor[0]['street1']))
						{
							$receipient_data .= $family_doctor[0]['street1'] . "\n";
						}

						if(!empty($family_doctor[0]['street2']))
						{
							$receipient_data .= $family_doctor[0]['street2'] . "\n";
						}
						$receipient_data .= $family_doctor[0]['zip'] . ' ' . $family_doctor[0]['city'] . "\n";
						break;

					case'F': //facharzt
						$specialist = Specialists::get_specialist($entity_id);
						$fax_recipient = $specialist[0]['fax'];

						$receipient_data = '';
						$name_from_address = '';

						
						$last_name_from_address = '';
						$first_name_from_address = '';
						$salutation_from_address = '';
						
						if(!empty($specialist[0]['nursing']))
						{
							$receipient_data .= trim($specialist[0]['practice']) . "\n";
							$name_from_address .= trim($specialist[0]['practice']) . ', ';
						}

						if(!empty($specialist[0]['first_name']) || !empty($specialist[0]['last_name']))
						{
							if(!empty($specialist[0]['title']))
							{
								$receipient_data .= $specialist[0]['title'] . ' ';
								$name_from_address .= $specialist[0]['title'] . ' ';
							}

							if(!empty($specialist[0]['first_name']))
							{
								$receipient_data .= $specialist[0]['first_name'] . ' ';
								$name_from_address .= $specialist[0]['first_name'] . ' ';
								$first_name_from_address = $specialist[0]['first_name'] . ' ';
							}
							if(!empty($specialist[0]['last_name']))
							{
								$receipient_data .= $specialist[0]['last_name'] . ' ';
								$name_from_address .= $specialist[0]['last_name'] . ' ';
								$first_name_from_address = $specialist[0]['last_name'] . ' ';
							}
							
							if(!empty($specialist[0]['salutation']))
							{
								$salutation_name_from_address = $specialist[0]['salutation'] . ' ';
							}
							$receipient_data .= "\n";
						}

						if(!empty($specialist[0]['street1']))
						{
							$receipient_data .= $specialist[0]['street1'] . "\n";
						}
						if(!empty($specialist[0]['street2']))
						{
							$receipient_data .= $specialist[0]['street2'] . "\n";
						}

						$receipient_data .= $specialist[0]['zip'] . ' ' . $specialist[0]['city'] . "\n";

						break;

					case'P': //pflegedienste
						$pflege = Pflegedienstes::getPflegedienste($entity_id);

						$fax_recipient = $pflege[0]['fax'];

						$receipient_data = '';
						$name_from_address = '';
						

						$last_name_from_address = '';
						$first_name_from_address = '';
						$salutation_from_address = '';
						

						if(!empty($pflege[0]['nursing']))
						{
							$receipient_data .= trim($pflege[0]['nursing']) . "\n";
							$name_from_address .= trim($pflege[0]['nursing']) . ', ';
						}

						if(!empty($pflege[0]['first_name']) || !empty($pflege[0]['last_name']))
						{
							if(!empty($pflege[0]['title']))
							{
								$receipient_data .= $pflege[0]['title'] . ' ';
								$name_from_address .= $pflege[0]['title'] . ' ';
							}

							if(!empty($pflege[0]['first_name']))
							{
								$receipient_data .= $pflege[0]['first_name'] . ' ';
								$name_from_address .= $pflege[0]['first_name'] . ' ';
								$first_name_from_address = $pflege[0]['first_name'] . ' ';
							}
							if(!empty($pflege[0]['last_name']))
							{
								$receipient_data .= $pflege[0]['last_name'] . ' ';
								$name_from_address .= $pflege[0]['last_name'] . ' ';
								$last_name_from_address = $pflege[0]['last_name'] . ' ';
							}
							
							if(!empty($pflege[0]['salutation']))
							{
								$salutation_from_address = $pflege[0]['salutation'] . ' ';
							}
							$receipient_data .= "\n";
						}

						if(!empty($pflege[0]['street1']))
						{
							$receipient_data .= $pflege[0]['street1'] . "\n";
						}
						if(!empty($pflege[0]['street2']))
						{
							$receipient_data .= $pflege[0]['street2'] . "\n";
						}

						$receipient_data .= $pflege[0]['zip'] . ' ' . $pflege[0]['city'] . "\n";

						break;

					case'A': //aphoteke
						//$pharmacy = Pharmacy::getPharmacy($entity_id);
						$pharmacy = Pharmacy::findPharmacyById($entity_id);
						$fax_recipient = $pharmacy[0]['fax'];

						$receipient_data = '';
						$name_from_address = '';
						

						$last_name_from_address = '';
						$first_name_from_address = '';
						$salutation_from_address = '';
						
						
						if(!empty($pharmacy[0]['pharmacy']))
						{
							$receipient_data .= trim($pharmacy[0]['pharmacy']) . "\n";
							$name_from_address .= trim($pharmacy[0]['pharmacy']) . ", ";
						}

						if(!empty($pharmacy[0]['first_name']) || !empty($pharmacy[0]['last_name']))
						{
							if(!empty($pharmacy[0]['first_name']))
							{
								$receipient_data .= $pharmacy[0]['first_name'] . ' ';
								$name_from_address .= $pharmacy[0]['first_name'] . ' ';
								$first_name_from_address = $pharmacy[0]['first_name'] . ' ';
							}
							
							if(!empty($pharmacy[0]['last_name']))
							{
								$receipient_data .= $pharmacy[0]['last_name'] . ' ';
								$name_from_address .= $pharmacy[0]['last_name'] . ' ';
								$last_name_from_address = $pharmacy[0]['last_name'] . ' ';
							}
							
							if(!empty($pharmacy[0]['salutation']))
							{
								$salutation_from_address = $pharmacy[0]['salutation'] . ' ';
							}
							
							$receipient_data .= "\n";
						}

						if(!empty($pharmacy[0]['street1']))
						{
							$receipient_data .= $pharmacy[0]['street1'] . "\n";
						}
						if(!empty($pharmacy[0]['street2']))
						{
							$receipient_data .= $pharmacy[0]['street2'] . "\n";
						}

						$receipient_data .= $pharmacy[0]['zip'] . ' ' . $pharmacy[0]['city'] . "\n";
						break;

					case'L': //Locations(aufenthalsorte)
						$location = Locations::getLocationbyId($entity_id);
						$location_type = Locations::getLocationTypes();
						$fax_recipient = $location[0]['fax'];

						$receipient_data = '';
						$name_from_address = '';

						if(!empty($location[0]['location']))
						{
							$receipient_data .= $location[0]['location'] . "\n";
							$name_from_address .= $location[0]['location'];
						}

						if(!empty($location[0]['street']))
						{
							$receipient_data .= $location[0]['street'] . "\n";
						}

						$receipient_data .= $location[0]['zip'] . ' ' . $location[0]['city'] . "\n";
						break;

					case'S': //Sonstiges

						$uloc = UsersLocations::getUserLocation($entity_id);
						$fax_recipient = $uloc[0]['fax'];

						$receipient_data = '';
						$name_from_address = "";
						

						$last_name_from_address = '';
						$first_name_from_address = '';
						$salutation_from_address = '';
						
						
						if(!empty($uloc[0]['company_name']))
						{
							$receipient_data .= trim($uloc[0]['company_name']) . "\n";
							$name_from_address .= trim($uloc[0]['company_name']) . ", ";
						}

						if(!empty($uloc[0]['first_name']) || !empty($uloc[0]['last_name']))
						{
							if(!empty($uloc[0]['first_name']))
							{
								$receipient_data .= $uloc[0]['first_name'] . ' ';
								$name_from_address .= $uloc[0]['first_name'] . ' ';
								$first_name_from_address = $uloc[0]['first_name'] . ' ';
							}

							if(!empty($uloc[0]['last_name']))
							{
								$receipient_data .= $uloc[0]['last_name'] . ' ';
								$name_from_address .= $uloc[0]['last_name'] . ' ';
								$last_name_from_address = $uloc[0]['last_name'] . ' ';
							}

							if(!empty($uloc[0]['salutation']))
							{
								$salutation_from_address = $uloc[0]['salutation'] . ' ';
							}

							$receipient_data .= "\n";
						}

						if(!empty($uloc[0]['street']))
						{
							$receipient_data .= $uloc[0]['street'] . "\n";
						}

						$receipient_data .= $uloc[0]['zip'] . ' ' . $uloc[0]['city'] . "\n";
						break;

					case'I': //Health Insurance
						$healthins = HealthInsurance::getCompanyinfofromId($entity_id);
						$fax_recipient = $healthins[0]['phonefax'];
						$receipient_data = '';
						$name_from_address = '';
						if(!empty($healthins[0]['name']) || !empty($healthins[0]['name2']))
						{
							if(!empty($healthins[0]['name']))
							{
								$receipient_data .= $healthins[0]['name'] . ' ';
								$name_from_address.= $healthins[0]['name'];
							}
							else if(!empty($uloc[0]['name2']))
							{
								$receipient_data .= $healthins[0]['name2'] . ' ';
							}

							$receipient_data .= "\n";
						}
						if(!empty($healthins[0]['insurance_provider']))
						{
							$receipient_data .= $healthins[0]['insurance_provider'] . "\n";
						}
						if(!empty($healthins[0]['street1']))
						{
							$receipient_data .= $healthins[0]['street1'] . "\n";
						}
						else if(!empty($healthins[0]['street2']))
						{
							$receipient_data .= $healthins[0]['street2'] . "\n";
						}

						$receipient_data .= $healthins[0]['zip'] . ' ' . $healthins[0]['city'] . "\n";
						break;

					case'PI': //Patient Health Insurance
						$healthins = PatientHealthInsurance::getPatientHISdata($entity_id);

						$receipient_data = '';
						$name_from_address = '';
						if(!empty($healthins[0]['company_name']))
						{
							$receipient_data .= $healthins[0]['company_name'] . "\n";
							$name_from_address .= $healthins[0]['company_name'] . ', ';
						}


						if(!empty($healthins[0]['ins_insurance_provider']))
						{
							$receipient_data .= $healthins[0]['ins_insurance_provider'] . "\n";
							$name_from_address .= $healthins[0]['ins_insurance_provider'] . "";
						}

						if(!empty($healthins[0]['ins_street']))
						{
							$receipient_data .= $healthins[0]['ins_street'] . "\n";
						}

						if(!empty($healthins[0]['ins_zip']))
						{
							$receipient_data .= $healthins[0]['ins_zip'] . " ";
						}

						if(!empty($healthins[0]['ins_city']))
						{
							$receipient_data .= $healthins[0]['ins_city'] . "\n";
						}

						break;

					case 'C': //contact person
						$cperson = ContactPersonMaster::getPatientContactById($entity_id, true);
						$receipient_data = '';
						$name_from_address = '';
						

						$last_name_from_address = '';
						$first_name_from_address = '';
						$salutation_from_address = '';
						

						if(!empty($cperson[0]['cnt_first_name']) || !empty($cperson[0]['cnt_first_name']))
						{
							if(!empty($cperson[0]['cnt_title']))
							{
								$receipient_data .= $cperson[0]['cnt_title'] . ' ';
								$name_from_address .= $cperson[0]['cnt_title'] . ' ';
							}

							if(!empty($cperson[0]['cnt_first_name']))
							{
								$receipient_data .= $cperson[0]['cnt_first_name'] . ' ';
								$name_from_address .= $cperson[0]['cnt_first_name'] . ' ';
								$first_name_from_address = $cperson[0]['cnt_first_name'] . ' ';
							}

							if(!empty($cperson[0]['cnt_last_name']))
							{
								$receipient_data .= $cperson[0]['cnt_last_name'] . ' ';
								$name_from_address .= $cperson[0]['cnt_last_name'] . ' ';
								$last_name_from_address = $cperson[0]['cnt_last_name'] . ' ';
							}

							if(!empty($cperson[0]['cnt_salutation']))
							{
								$salutation_from_address = $cperson[0]['cnt_salutation'] . ' ';
							}

							$receipient_data .= "\n";
						}

						if(!empty($cperson[0]['cnt_street1']))
						{
							$receipient_data .= $cperson[0]['cnt_street1'] . "\n";
						}

						if(!empty($cperson[0]['cnt_street2']))
						{
							$receipient_data .= $cperson[0]['cnt_street2'] . "\n";
						}

						$receipient_data .= $cperson[0]['cnt_zip'] . ' ' . $cperson[0]['cnt_city'] . "\n";
						break;

					case 'SH':
						$supplies = Supplies::getSupplies($entity_id);
						$receipient_data = '';
						$name_from_address = '';

						$fax_recipient = $supplies[0]['fax'];
						$receipient_data = $supplies[0]['supplier'] . "\n";
						$name_from_address = $supplies[0]['supplier'];

						if(!empty($supplies[0]['street1']))
						{
							$receipient_data .= $supplies[0]['street1'] . "\n";
						}
						else if(!empty($healthins[0]['street2']))
						{
							$receipient_data .= $supplies[0]['street2'] . "\n";
						}

						$receipient_data .= $supplies[0]['zip'] . ' ' . $supplies[0]['city'] . "\n";

						break;

						
						$supplier = new PatientSuppliers();
						$supplier_array = $supplier->getPatientSuppliers($ipid);
						
						
						
					case 'SR':
						$supplier = Suppliers::getSuppliers($entity_id);
						$receipient_data = '';
						$name_from_address = '';

						$fax_recipient = $supplier[0]['fax'];
						$receipient_data = $supplier[0]['supplier'] . "\n";
						$name_from_address = $supplier[0]['supplier'];

						if(!empty($supplier[0]['street1']))
						{
							$receipient_data .= $supplier[0]['street1'] . "\n";
						}
						else if(!empty($healthins[0]['street2']))
						{
							$receipient_data .= $supplier[0]['street2'] . "\n";
						}

						$receipient_data .= $supplier[0]['zip'] . ' ' . $supplier[0]['city'] . "\n";

						break;
						
						
					case 'PH':
						$physiotherapist = Physiotherapists::get_physiotherapist($entity_id);
						$receipient_data = '';
						$name_from_address = '';

						$fax_recipient = $physiotherapist[0]['fax'];
						$receipient_data = $physiotherapist[0]['physiotherapist'] . "\n";
						$name_from_address = $physiotherapist[0]['physiotherapist'];

						if(!empty($physiotherapist[0]['street1']))
						{
							$receipient_data .= $physiotherapist[0]['street1'] . "\n";
						}
						else if(!empty($healthins[0]['street2']))
						{
							$receipient_data .= $physiotherapist[0]['street2'] . "\n";
						}

						$receipient_data .= $physiotherapist[0]['zip'] . ' ' . $physiotherapist[0]['city'] . "\n";

						break;
						
						
					case 'HC':
						$homecare = Homecare::get_homecare($entity_id);
						$receipient_data = '';
						$name_from_address = '';

						$fax_recipient = $homecare[0]['fax'];
						$receipient_data = $homecare[0]['homecare'] . "\n";
						$name_from_address = $homecare[0]['homecare'];

						if(!empty($homecare[0]['street1']))
						{
							$receipient_data .= $homecare[0]['street1'] . "\n";
						}
						else if(!empty($healthins[0]['street2']))
						{
							$receipient_data .= $homecare[0]['street2'] . "\n";
						}

						$receipient_data .= $homecare[0]['zip'] . ' ' . $homecare[0]['city'] . "\n";

						break;
						
					case 'B':
						$servicesf = Servicesfuneral::get_service($entity_id);
							$receipient_data = '';
							$name_from_address = '';
							$fax_recipient = $servicesf[0]['fax'];
							
							$receipient_data = '';
							$name_from_address = '';
							
							if(!empty($servicesf[0]['services_funeral_name']))
							{
								$receipient_data .= trim($servicesf[0]['services_funeral_name']) . "\n";
								$name_from_address .= trim($servicesf[0]['services_funeral_name']) . ', ';
							}
							
							if(!empty($servicesf[0]['cp_fname']) || !empty($servicesf[0]['cp_lname']))
							{
								
							
								if(!empty($servicesf[0]['cp_fname']))
								{
									$receipient_data .= $servicesf[0]['cp_fname'] . ' ';
									$name_from_address .= $servicesf[0]['cp_fname'] . ' ';
								}
								if(!empty($servicesf[0]['cp_lname']))
								{
									$receipient_data .= $servicesf[0]['cp_lname'] . ' ';
									$name_from_address .= $servicesf[0]['cp_lname'] . ' ';
								}
								$receipient_data .= "\n";
							}
							
							if(!empty($servicesf[0]['street']))
							{
								$receipient_data .= $servicesf[0]['street'] . "\n";
							}
							
							$receipient_data .= $servicesf[0]['zip'] . ' ' . $servicesf[0]['city'] . "\n";
							
							break;
								
				

					default:
						exit;
						break;
				}
				
				$response = array(
				    'address' => $receipient_data, 
				    'fax' => $fax_recipient, 
				    'name_from_address' => $name_from_address,
				    'last_name_from_address' => $last_name_from_address,
				    'first_name_from_address' => $first_name_from_address,
				    'salutation_from_address' => $salutation_from_address
				    
				);

				echo json_encode($response);
			}
			exit;
		}

		public function anlage4a2newAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();

			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$quarter[1] = array("1", "2", "3");
			$quarter[2] = array("4", "5", "6");
			$quarter[3] = array("7", "8", "9");
			$quarter[4] = array("10", "11", "12");

			//generate years from 2010
			for($a = 2010; $a <= date("Y"); $a++)
			{
				$years[] = $a;
			}

			//construct quarter arrays for all years for select (limit q3 in 2010 and current year-quarter)
			foreach($years as $year)
			{
				if($year == "2010")
				{
					$minQu = 3;
				}
				else
				{
					$minQu = 1;
				}

				if($year == date("Y"))
				{
					for($i = 1; $i <= 4; $i++)
					{
						if(in_array(date("n"), $quarter[$i]))
						{
							$maxQu = $i;
						}
					}
				}
				else
				{
					$maxQu = 4;
				}
				for($qu = $minQu; $qu <= $maxQu; $qu++)
				{
					$period[$qu . "." . $year] = str_pad($qu, 2, "0", STR_PAD_LEFT) . "/" . $year;
				}
			}
			$this->view->periods = $period;

			//check if we have a period in request else get curent quarter
			if(strlen($_REQUEST['period']) == 0)
			{
				//get curent quarter
				for($i = 1; $i <= 4; $i++)
				{
					if(in_array(date("n"), $quarter[$i]))
					{
						$quarterFinal = $i;
						$yearFinal = date("Y"); //current year
					}
				}
			}
			else
			{
				//get selected period
				$selectedPeriod = trim($_REQUEST['period']);
				$selPeriod = explode(".", $selectedPeriod);
				$quarterFinal = $selPeriod[0];
				$yearFinal = $selPeriod[1];
			}

			$selectedPeriodarray = array("0" => "" . $quarterFinal . "." . $yearFinal . "");
			$this->view->selectedPeriodArray = $selectedPeriodarray;

			$q[0] = $quarterFinal;
			$y[0] = $yearFinal;

			$this->view->currentQ = $quarterFinal;
			$this->view->currentY = $yearFinal;
			$viewdata['currentQ'] = $quarterFinal;
			$viewdata['currentY'] = $yearFinal;

			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			//query gel all client patients that are not standby
			$clientpatsnonstandby = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping e')
				->leftJoin('e.PatientMaster p')
				->where('e.ipid = p.ipid')
				->andWhere('e.clientid = ' . $clientid . '')
				->andWhere('p.isstandby=0')
				->andWhere('p.isdelete = 0')
				->andWhere('p.isstandbydelete = 0');
			$clientpatsnonstandbyarr = $clientpatsnonstandby->fetchArray();

			foreach($clientpatsnonstandbyarr as $patientnonstandby)
			{
				$clientIpidsNonStbyArr[] = $patientnonstandby['ipid'];
			}

			//query get all clients patients
			$clientpats = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping')
				->where('clientid = ' . $clientid . '');
			$clientpatientsipidarr = $clientpats->fetchArray();

			foreach($clientpatientsipidarr as $patient)
			{
				$clientipidsArr[] = $patient['ipid'];
			}

			if(empty($clientipidsArr))
			{
				$clientipidsArr[] = '999999999';
			}

			//query get all client private patients
			$ppC = Doctrine_Query::create()
				->select('*')
				->from('PatientHealthInsurance')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('privatepatient = "1"');
			$pPatientsC = $ppC->fetchArray();

			foreach($pPatientsC as $PrivatePatient)
			{
				$privPatient[] = $PrivatePatient['ipid'];
			}

			if(empty($privPatient))
			{
				$privPatient[] = '99999999';
			}

			//query get all client  patients with L92011
			$cl_patients_lentry = Doctrine_Query::create()
				->select("ipid")
				->from('PatientCourse')
				->whereIn('ipid', $clientipidsArr)
				->andwhere("wrong !=1 and course_type='" . addslashes(Pms_CommonData::aesEncrypt('L')) . "' ")//Ancuta 08.04.2020 MYSQL GONE Bug fix [use wrong instead of wrongcomment]
				->andwhere('AES_DECRYPT(course_title,"' . Zend_Registry::get('salt') . '")   LIKE "%92011%" ')
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$cl_patients_lentry_array = $cl_patients_lentry->fetchArray();

			foreach($cl_patients_lentry_array as $clpatientl)
			{
				$LentryPatients[] = $clpatientl['ipid'];
			}

			if(count($LentryPatients) == 0)
			{
				$LentryPatients[0] = "999999";
			}

			$clientipidsArr = array_diff($clientipidsArr, $LentryPatients);

			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $patientmaster->getDaysInBetween($period['start'][0], $period['end'][0]);

			//query get all active patients in selected period

			if($_REQUEST['old'])
			{

				$active_qipids = $this->getActivePatients($q, $y);
				print_r("\n");
				print_r("active_patients : \n");
				print_r($active_qipids);
				print_r("\n");
			}

			##########################################################
			// get active patients - new version
			$period_start_active = date('Y-m-d', strtotime($period['start'][0]));
			$period_end_active = date('Y-m-d', strtotime($period['end'][0]));
			$active_qipids_array = Pms_CommonData::patients_active("*", $clientid, array("0" => array('start' => $period_start_active, 'end' => $period_end_active)));

			foreach($active_qipids_array as $pipid => $pdetails)
			{
				$active_qipids[] = $pdetails['ipid'];
			}
			##########################################################

			$active_qipids = array_diff($active_qipids, $LentryPatients);

			// all client patients that are not PV
			$npClientsIpidsArr = array_values(array_diff($clientipidsArr, $privPatient));

			if(empty($npClientsIpidsArr))
			{
				$npClientsIpidsArr[] = '99999999';
			}

			// all active, non private patients of client
			$npClientsIpidsActive = array_values(array_intersect($active_qipids, $npClientsIpidsArr));
			$npClientsIpidsActive = array_unique($npClientsIpidsActive);

			// all avtive patients No PV and No L92011
			$clientPatActiveArr = array_values(array_diff($npClientsIpidsActive, $LentryPatients)); // remove patients with L92011 activ in report period
			$clientpatarr = array_unique($clientPatActiveArr);

			if(count($clientpatarr) == 0)
			{
				$clientpatarr[] = '99999999999999';
			}

			//query get all standby patients or delete or standbydelete
			$clientpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('isdelete="1" OR isstandby=1 OR isstandbydelete="1"');
			$standbypatients = $clientpatients->fetchArray();

			$standbypatientsstr = "'99999999'";
			$comma = ",";
			foreach($standbypatients as $kst => $patientst)
			{
				$st_del_patients[] = $patientst['ipid'];
				$standbypatientsstr .= $comma . "'" . $patientst['ipid'] . "'";
				$comma = ",";
			}

			if(count($st_del_patients) == 0)
			{
				$st_del_patients[] = '99999999999999';
			}

			$ALL_patients = array_values(array_diff($clientpatarr, $st_del_patients)); // all active patients, no PV, no L90211, no standby
			$ALL_patients = array_values(array_diff($ALL_patients, $LentryPatients)); // all active patients, no PV, no L90211, no standby
			$ALL_patients = array_unique($ALL_patients);

			$this->view->patientsamountvv = count($ALL_patients); // Palliativ-Falle Gesamt
			$viewdata['patientsamountvv'] = count($ALL_patients);

			// active patients in period with no pv and no L92011
			$clientpatarr = array_unique($ALL_patients);

			//query get all patients admited in period from active patients
			$clientAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('isdelete="0"')
				->andWhere('isstandby="0"')
				->andWhere('isstandbydelete="0"')
				->andWhere('admission_date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmission = $clientAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmission as $patient)
			{
				$admisionPatients[] = $patient['ipid'];
			}

			if(count($admisionPatients) == 0)
			{
				$admisionPatients[0] = "999999";
			}

			//query get all patients re-admited in period from active patients
			$clientReAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientReadmission')
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('date_type = "1"')
				->andWhere('date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmissions = $clientReAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmissions as $patientR)
			{
				$reAdmisionPatients[] = $patientR['ipid'];
			}
			if(count($reAdmisionPatients) == 0)
			{
				$reAdmisionPatients[0] = "999999";
			}

			//3. preluare admisii pacienti cu metoda lu pestea
			$b_patient_admisions = $patientmaster->getTreatedDaysRealMultiple($clientIpidsNonStbyArr);

			$ipids_readmision_outisde[] = '9999999';

			foreach($b_patient_admisions as $k_admision => $v_admision)
			{
				if(!Pms_CommonData::isintersected(strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime($period['start'][0]), strtotime($period['end'][0])))
				{
					$ipids_readmision_outisde[] = $k_admision;
				}
			}

			$AdmReadmPatients = array_merge($admisionPatients, $clientIpidsNonStbyArr);
			$AdmReadmPatients = array_merge($AdmReadmPatients, $reAdmisionPatients);
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $privPatient));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $ipids_readmision_outisde));
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));

			$ploc = new PatientLocation();
			$loc = new Locations();

			foreach($AdmReadmPatients as $k_adm_pat => $v_adm_pat)
			{
				$p_first_location = $ploc->getFirstLocation(false, $v_adm_pat);

				if($p_first_location && in_array($v_adm_pat, $LentryPatients))
				{
					$location_details = $loc->getLocationbyId($p_first_location[0]['location_id']);

					if($location_details[0]['location_type'] != '2')
					{
						$non_hospiz_patients[] = $v_adm_pat;
					}
					else
					{
						$hospiz_patients[] = $v_adm_pat;
					}
				}
				else //no admision location so is no hospiz
				{
					$non_hospiz_patients[] = $v_adm_pat;
				}
			}

			if(count($non_hospiz_patients) == 0)
			{
				$non_hospiz_patients[] = '999999';
			}

			if(count($hospiz_patients) == 0)
			{
				$hospiz_patients[] = '999999';
			}

			//ho hospiz
			if(count($non_hospiz_patients) == 1 && in_array('999999', $non_hospiz_patients))
			{
				$this->view->noprivatepatientadmission = "0";
				$viewdata['noprivatepatientadmission'] = "0";
			}
			else
			{
				$this->view->noprivatepatientadmission = count($non_hospiz_patients); // Neu-Aufnahme Kassenpatient ambulante
				$viewdata['noprivatepatientadmission'] = count($non_hospiz_patients);
			}

			//hospiz
			if(count($hospiz_patients) == 1 && in_array('999999', $hospiz_patients))
			{
				$this->view->hospiz_patients = "0";
				$viewdata['hospiz_patients'] = "0";
			}
			else
			{
				$this->view->hospiz_patients = count($hospiz_patients); // Neu-Aufnahme Kassenpatient ambulante
				$viewdata['hospiz_patients'] = count($hospiz_patients);
			}

			if($_REQUEST['dbg'] == 1)
			{

				print_r("AdmReadmPatients\n");
				print_r($AdmReadmPatients);
				print_r("Pacientii admisi in perioada- in hospiz\n");
				print_r($hospiz_patients);
				print_r("\nALL active ipids in period\n");
				print_r($active_qipids);
				print_r("Pacienti admisi din PM\n");
				print_r($admisionPatients);
				print_r("\nPacienti admisi din PRA\n");
				print_r($reAdmisionPatients);
				print_r("\nPacientii admisi si readmisi in perioada selectata (unique and merge)\n");
				print_r($non_hospiz_patients);
				print_r("\nAll Private patients of client\n");
				print_r($privPatient);
				print_r("\nAll l92011 patients of client\n");
				print_r($LentryPatients);
				print_r("\nAll STANDBY patients of client\n");
				print_r($st_del_patients);
				print_r("\nAll non privat patients of client\n");
				print_r($npClientsIpidsArr);
				print_r("\nAll non privat patients of client, active in period\n");
				print_r($npClientsIpidsActive);
				print_r("\nPalliativ-Falle Gesamt\n");
				print_r($clientpatarr);
			}

			//query get all discharge method DEAD of client // PRIMUL QUERY
			$dm = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->Where('isdelete = 0')
				->andWhere('clientid = ' . $logininfo->clientid)
				->andWhere('abbr IN ("TOD", "TODNA")');
			$dischargemethods = $dm->fetchArray();

			if(count($dischargemethods) > 0)
			{
				foreach($dischargemethods as $dmkey => $dmvalue)
				{
					$dischargeids[] = $dmvalue['id'];
				}
			}

			if(count($dischargeids) == 1)
			{
				$dischargemethodids = $dischargeids[0];
			}
			else if(count($dischargeids) > 0 && count($dischargeids) != 1)
			{
				$dischargemethodids = implode(",", $dischargeids);
			}

			$quarter_start_m = $quarter[$quarterFinal][0];
			$quarter_end_m = end($quarter[$quarterFinal]);

			$quarter_start_day = strtotime("{$y[0]}-{$quarter_start_m}-01");
			$quarter_end_day = strtotime("{$y[0]}-{$quarter_end_m}-01");
			$quarter_end_day = strtotime('-1 second', strtotime('+1 month', $quarter_end_day));

			$quarter_start_first_dayy = date("Y-m-d H:i:s", $quarter_start_day);
			$quarter_end_last_dayy = date("Y-m-d H:i:s", $quarter_end_day);

			if($quarterFinal != '4')
			{
				$prev_year = ($y[0] - 1);
				$this->view->median_year = $prev_year;
				$viewdata['median_year'] = $prev_year;
				$year_start_first_day = strtotime("{$prev_year }-01-01");
				$year_end_first_day = strtotime("{$prev_year}-12-01");
				$year_end_last_day = strtotime('-1 second', strtotime('+1 month', $year_end_first_day));
				$year_start_day = date("Y-m-d H:i:s", $year_start_first_day);
				$year_end_day = date("Y-m-d H:i:s", $year_end_last_day);
			}
			else
			{
				$this->view->median_year = $y[0];
				$viewdata['median_year'] = $y[0];
				$year_start_first_day = strtotime("{$y[0]}-01-01");
				$year_end_first_day = strtotime("{$y[0]}-12-01");
				$year_end_last_day = strtotime('-1 second', strtotime('+1 month', $year_end_first_day));
				$year_start_day = date("Y-m-d H:i:s", $year_start_first_day);
				$year_end_day = date("Y-m-d H:i:s", $year_end_last_day);
			}
			//query get all DEAD patients with discharge day < = quarter_start_first_day
			$discharged_pat_inquarter = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->where('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date <= "' . $quarter_start_first_dayy . '"');
			$quarter_dead_pat = $discharged_pat_inquarter->fetchArray();

			$dq_ipids[] = '999999';
			foreach($quarter_dead_pat as $dq_key => $dq_val)
			{
				$dq_ipids[] = $dq_val['ipid'];
			}

			$vvhistory = new VollversorgungHistory();
			$vvStartDates = $vvhistory->getVollversorgungHistory($clientpatarr, "1", $dq_ipids);
			$vvEndDates = $vvhistory->getVollversorgungHistory($clientpatarr, "2", $dq_ipids);

			foreach($vvStartDates as $ipid => $startDates)
			{
				foreach($startDates as $keys => $start)
				{
					$vvPeriods[$ipid]['start'][] = $start['date'];
					$vvStart = $start['date'];

					if(empty($vvEndDates[$ipid][$keys]['date']))
					{
						$vvPeriods[$ipid]['end'][] = date("Y-m-d H:i:s");
						$vvEnd = date("Y-m-d H:i:s");
					}
					else
					{
						$vvPeriods[$ipid]['end'][] = $vvEndDates[$ipid][$keys]['date'];
						$vvEnd = $vvEndDates[$ipid][$keys]['date'];
					}

					if(Pms_CommonData::isintersected(strtotime($period['start'][0]), strtotime($period['end'][0]), strtotime($vvStart), strtotime($vvEnd)))
					{
						$finalArray[] = $ipid;
					}
				}
			}

			$finalArray = array_diff($finalArray, $LentryPatients);
			$allVvArray = array_values(array_unique($finalArray));

			$this->view->versorgungstatus = count($allVvArray); // Vollversorgung ohne Pallicare-Versorgung
			$viewdata['versorgungstatus'] = count($allVvArray);

			if($_REQUEST['dbg'] == 1)
			{
				print_r("\nVollversorgung ohne Pallicare-Versorgung\n");
				print_r($allVvArray);
			}

			$active_cond = $this->getTimePeriod($q, $y);
			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $patientmaster->getDaysInBetween($period['start'][0], $period['end'][0]);


			//query get all patients dead in quarter
			$allpatients = $this->getAllClientPatients($logininfo->clientid);
			foreach($allpatients as $allpatient_item)
			{
				$allpatients_str .= '"' . $allpatient_item['ipid'] . '",';
				$allpatients_arr[] = $allpatient_item['ipid'];
			}

			$mdischarged = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $allpatients_arr)
				->andwhere('discharge_method IN (' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $year_start_day . '" and "' . $year_end_day . '"');
			$median_dischargedpatarr = $mdischarged->fetchArray();

			$discharged = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN (' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"');
			$dischargedpatarr = $discharged->fetchArray();
			//Betreuungszeitraum in Tagen (Median) <--- the COMPLETE DoT of all DIED patients in that quartal. MEDIAN.
			$deadipids = array();
			foreach($dischargedpatarr as $d_key => $deadpat)
			{
				if(is_array($deadpat))
				{
					$deadipids[] = $deadpat['ipid'];
				}
				else
				{
					$deadipids[] = $deadpat;
				}
			}

			foreach($median_dischargedpatarr as $md_key => $mdeadpat)
			{
				if(is_array($mdeadpat))
				{
					$mdeadipids[] = $mdeadpat['ipid'];
				}
				else
				{
					$mdeadipids[] = $mdeadpat;
				}
			}

			//START Radu Added new dead (death button) method patients to median
			$pt = new PatientDeath();

			$deadipids = array_values(array_diff($deadipids, $privPatient));
			$deadipids = array_values(array_diff($deadipids, $LentryPatients));
			$deadipids = array_unique($deadipids);

			$mdeadipids = array_values(array_diff($mdeadipids, $privPatient));
			$mdeadipids = array_values(array_diff($mdeadipids, $LentryPatients));
			$mdeadipids = array_unique($mdeadipids);

			if(count($deadipids) == 1 && in_array('999999', $deadipids))
			{
				$this->view->alldeadpatients = "0";
				$viewdata['alldeadpatients'] = "0";
			}
			else
			{
				$this->view->alldeadpatients = count($deadipids); //  Sterbeort Verstorbene Gesamt
				$viewdata['alldeadpatients'] = count($deadipids);
			}
			//END Radu Added new dead (death button) method patients to median

			if($_REQUEST['dbg'] == 1)
			{
				print_r("\n Death by button\n");
				print_r($deadPatients);
				print_r("\nPacienti dead in quarter\n");
				print_r($deadipids);
				exit;
			}
// 		$treatmentdaysdatadead = $patientmaster->getTreatedDaysRealMultiple($mdeadipids, false);
// 		foreach($treatmentdaysdatadead as $patientTreatmentIpid => $patientTreatmentData)
// 		{
// 			$median_arr[] = $patientTreatmentData['realActiveDays'];
// 			$median_arr_dbg[$patientTreatmentIpid] = $patientTreatmentData['realActiveDays'];
// 		}
			#############################################
			$period_start_sec = "2009-01-01";
			$period_end_sec = date("Y-m-d");
			$conditions_sec['periods'] = array("0" => array('start' => $period_start_sec, 'end' => $period_end_sec));
			$conditions_sec['client'] = $clientid;
			$conditions_sec['ipids'] = $mdeadipids;

			$dead_patients_details = Pms_CommonData::patients_days($conditions_sec);
			foreach($dead_patients_details as $patient_ipid => $patient_data)
			{
				$median_arr[] = $patient_data['treatment_days_no'];
			}
			#############################################


			$median = Pms_CommonData::calculate_median($median_arr);

			if($_REQUEST['dbg'] == 2)
			{
				print_r("\n Discharged \n");
				print_r($dischargedpatarr);
				print_r("\n Private \n");
				print_r($privPatient);
				print_r("\n Dead #1\n");
				print_r($deadPatients);
				print_r("\n Dead #2 \n");
				print_r($deadipids);
				print_r("\n Dead Patients Death Buttton\n\n");
				print_r($m_deadPatients);
				print_r("\n Median Dead #3 \n");
				print_r($mdeadipids);
				print_r("\n Median #1 \n");
				print_r($median_arr);
				print_r("\n Discharge \n");
				print_r($dischargemethodids);
				exit;
			}

			$this->view->averagetreatmentdays = number_format($median, 2); // Betreuungszeitraum in Tagen (Median)
			$viewdata['averagetreatmentdays'] = number_format($median, 2);

			//Get client locations START
			$locationTypesArray = Pms_CommonData::getDischargeLocationTypes();

			#############################
			/* get all discharge location types  */
			$discharge_locations_q = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('clientid = "' . $logininfo->clientid . '"');
			$discharge_locations_res = $discharge_locations_q->fetchArray();

			foreach($discharge_locations_res as $k => $dl_details)
			{
				$type2id[$dl_details['type']][] = $dl_details['id'];
			}

			$discharged_pat_q = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"');
			$discharged_pat_res = $discharged_pat_q->fetchArray();

			foreach($discharged_pat_res as $k => $pat_dis_details)
			{
				if(in_array($pat_dis_details['discharge_location'], $type2id['1']) || in_array($pat_dis_details['discharge_location'], $type2id['8']))
				{
					$wohnungdeadpat[] = $pat_dis_details['ipid'];
				}

				if(in_array($pat_dis_details['discharge_location'], $type2id['4']))
				{
					$altenheimdeadpat[] = $pat_dis_details['ipid'];
				}

				if(in_array($pat_dis_details['discharge_location'], $type2id['3']))
				{
					$hospizdeadpat[] = $pat_dis_details['ipid'];
				}

				if(in_array($pat_dis_details['discharge_location'], $type2id['5']))
				{
					$krankenhausdeadpat[] = $pat_dis_details['ipid'];
				}

				if(in_array($pat_dis_details['discharge_location'], $type2id['2']))
				{
					$palliativdeadpat[] = $pat_dis_details['ipid'];
				}
			}

			$this->view->wohnungdeadpatients = count($wohnungdeadpat);
			$viewdata['wohnungdeadpatients'] = count($wohnungdeadpat);

			$this->view->altenheimdeadpatients = count($altenheimdeadpat);
			$viewdata['altenheimdeadpatients'] = count($altenheimdeadpat);

			$this->view->hospizdeadpatients = count($hospizdeadpat);
			$viewdata['hospizdeadpatients'] = count($hospizdeadpat);

			$this->view->krankenhausdeadpatients = count($krankenhausdeadpat);
			$viewdata['krankenhausdeadpatients'] = count($krankenhausdeadpat);

			$this->view->palliativdeadpatients = count($palliativdeadpat);
			$viewdata['palliativdeadpatients'] = count($palliativdeadpat);

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);

			$this->view->clientcity = $clientdata[0]['city'];
			$this->view->client_name = $clientdata[0]['team_name'];
			$viewdata['clientcity'] = $clientdata[0]['city'];

			$this->view->todaydate = date("d.m.Y");
			$viewdata['todaydate'] = date("d.m.Y");

			if(strlen($_POST['btnsave']) > 0)
			{
				$this->generateanalagethreePdf(3, $viewdata, 'Anlage4a2wl', "anlage4a2wlnew.html");
			}
		}

		public function reportanlage4a2newAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$quarter[1] = array("1", "2", "3");
			$quarter[2] = array("4", "5", "6");
			$quarter[3] = array("7", "8", "9");
			$quarter[4] = array("10", "11", "12");

			//generate years from 2010
			for($a = 2010; $a <= date("Y"); $a++)
			{
				$years[] = $a;
			}

			//construct quarter arrays for all years for select (limit q3 in 2010 and current year-quarter)
			foreach($years as $year)
			{
				if($year == "2010")
				{
					$minQu = 3;
				}
				else
				{
					$minQu = 1;
				}

				if($year == date("Y"))
				{
					for($i = 1; $i <= 4; $i++)
					{
						if(in_array(date("n"), $quarter[$i]))
						{
							$maxQu = $i;
						}
					}
				}
				else
				{
					$maxQu = 4;
				}
				for($qu = $minQu; $qu <= $maxQu; $qu++)
				{
					$period[$qu . "." . $year] = str_pad($qu, 2, "0", STR_PAD_LEFT) . "/" . $year;
				}
			}
			$this->view->periods = $period;

			//check if we have a period in request else get curent quarter
			if(strlen($_REQUEST['period']) == 0)
			{
				//get curent quarter
				for($i = 1; $i <= 4; $i++)
				{
					if(in_array(date("n"), $quarter[$i]))
					{
						$quarterFinal = $i;
						$yearFinal = date("Y"); //current year
					}
				}
			}
			else
			{
				//get selected period
				$selectedPeriod = trim($_REQUEST['period']);
				$selPeriod = explode(".", $selectedPeriod);
				$quarterFinal = $selPeriod[0];
				$yearFinal = $selPeriod[1];
			}

			$selectedPeriodarray = array("0" => "" . $quarterFinal . "." . $yearFinal . "");
			$this->view->selectedPeriodArray = $selectedPeriodarray;

			$q[0] = $quarterFinal;
			$y[0] = $yearFinal;

			$this->view->currentQ = $quarterFinal;
			$this->view->currentY = $yearFinal;
			$viewdata['currentQ'] = $quarterFinal;
			$viewdata['currentY'] = $yearFinal;

			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			//query gel all client patients that are not standby
			$clientpatsnonstandby = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping e')
				->leftJoin('e.PatientMaster p')
				->where('e.ipid = p.ipid')
				->andWhere('e.clientid = ' . $clientid . '')
				->andWhere('p.isstandby=0')
				->andWhere('p.isdelete = 0')
				->andWhere('p.isstandbydelete = 0');
			$clientpatsnonstandbyarr = $clientpatsnonstandby->fetchArray();

			foreach($clientpatsnonstandbyarr as $patientnonstandby)
			{
				$clientIpidsNonStbyArr[] = $patientnonstandby['ipid'];
			}

			//query get all clients patients
			$clientpats = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping')
				->where('clientid = ' . $clientid . '');
			$clientpatientsipidarr = $clientpats->fetchArray();

			foreach($clientpatientsipidarr as $patient)
			{
				$clientipidsArr[] = $patient['ipid'];
			}

			if(empty($clientipidsArr))
			{
				$clientipidsArr[] = '999999999';
			}

			//query get all client private patients
			$ppC = Doctrine_Query::create()
				->select('*')
				->from('PatientHealthInsurance')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('privatepatient = "1"');
			$pPatientsC = $ppC->fetchArray();

			foreach($pPatientsC as $PrivatePatient)
			{
				$privPatient[] = $PrivatePatient['ipid'];
			}

			if(empty($privPatient))
			{
				$privPatient[] = '99999999';
			}

			//query get all client  patients with L92011
			$cl_patients_lentry = Doctrine_Query::create()
				->select("ipid")
				->from('PatientCourse')
				->whereIn('ipid', $clientipidsArr)
				->andwhere("wrong !=1 and course_type='" . addslashes(Pms_CommonData::aesEncrypt('L')) . "' ")//Ancuta 08.04.2020 MYSQL GONE Bug fix [use wrong instead of wrongcomment]
				->andwhere('AES_DECRYPT(course_title,"' . Zend_Registry::get('salt') . '")   LIKE "%92011%" ')
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$cl_patients_lentry_array = $cl_patients_lentry->fetchArray();

			foreach($cl_patients_lentry_array as $clpatientl)
			{
				$LentryPatients[] = $clpatientl['ipid'];
			}

			if(count($LentryPatients) == 0)
			{
				$LentryPatients[0] = "999999";
			}

			if($_REQUEST['dbg_all'] == 1)
			{
				print_r("\n   LentryPatients  \n");
				print_r($LentryPatients);
			}

			$clientipidsArr = array_diff($clientipidsArr, $LentryPatients);

			$pms = new PatientMaster();
			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $pms->getDaysInBetween($period['start'][0], $period['end'][0]);

			//query get all active patients in selected period

			if($_REQUEST['old'])
			{
				$active_qipids = $this->getActivePatients($q, $y);

				print_r("\n");
				print_r("active patients : \n");
				print_r($active_qipids);
				print_r("\n");
			}
			##########################################################
			// get active patients - new version
			$period_start_active = date('Y-m-d', strtotime($period['start'][0]));
			$period_end_active = date('Y-m-d', strtotime($period['end'][0]));
			$active_qipids_array = Pms_CommonData::patients_active("*", $clientid, array("0" => array('start' => $period_start_active, 'end' => $period_end_active)));

			foreach($active_qipids_array as $pipid => $pdetails)
			{
				$active_qipids[] = $pdetails['ipid'];
			}
			##########################################################

			$active_qipids = array_diff($active_qipids, $LentryPatients);

			// all client patients that are not PV
			$npClientsIpidsArr = array_values(array_diff($clientipidsArr, $privPatient));

			if(empty($npClientsIpidsArr))
			{
				$npClientsIpidsArr[] = '99999999';
			}

			// all active, non private patients of client
			$npClientsIpidsActive = array_values(array_intersect($active_qipids, $npClientsIpidsArr));
			$npClientsIpidsActive = array_unique($npClientsIpidsActive);

			// all avtive patients No PV and No L92011
			$clientPatActiveArr = array_values(array_diff($npClientsIpidsActive, $LentryPatients)); // remove patients with L92011 activ in report period
			$clientpatarr = array_unique($clientPatActiveArr);

			if(count($clientpatarr) == 0)
			{
				$clientpatarr[] = '99999999999999';
			}

			//query get all standby patients or delete or standbydelete
			$clientpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('isdelete="1" OR isstandby=1 OR isstandbydelete="1"');
			$standbypatients = $clientpatients->fetchArray();

			$standbypatientsstr = "'99999999'";
			$comma = ",";
			foreach($standbypatients as $kst => $patientst)
			{
				$st_del_patients[] = $patientst['ipid'];
				$standbypatientsstr .= $comma . "'" . $patientst['ipid'] . "'";
				$comma = ",";
			}

			if(count($st_del_patients) == 0)
			{
				$st_del_patients[] = '99999999999999';
			}

			// all active patients, no PV, no L90211, no standby
			$ALL_patients = array_values(array_diff($clientpatarr, $st_del_patients));
			// all active patients, no PV, no L90211, no standby
			$ALL_patients = array_values(array_diff($ALL_patients, $LentryPatients));
			$ALL_patients = array_unique($ALL_patients);

			// Palliativ-Falle Gesamt
			$this->view->patientsamountvv = count($ALL_patients);
			$viewdata['patientsamountvv'] = count($ALL_patients);

			// active patients in period with no pv and no L92011
			$clientpatarr = array_unique($ALL_patients);
			//query get all patients admited in period from active patients
			$clientAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('isdelete="0"')
				->andWhere('isstandby="0"')
				->andWhere('isstandbydelete="0"')
				->andWhere('admission_date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmission = $clientAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmission as $patient)
			{
				$admisionPatients[] = $patient['ipid'];
			}

			if(count($admisionPatients) == 0)
			{
				$admisionPatients[0] = "999999";
			}

			//query get all patients re-admited in period from active patients
			$clientReAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientReadmission')
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('date_type = "1"')
				->andWhere('date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmissions = $clientReAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmissions as $patientR)
			{
				$reAdmisionPatients[] = $patientR['ipid'];
			}
			if(count($reAdmisionPatients) == 0)
			{
				$reAdmisionPatients[0] = "999999";
			}

			$b_patient_admisions = $pms->getTreatedDaysRealMultiple($clientIpidsNonStbyArr);

			$ipids_readmision_outisde[] = '9999999';

			foreach($b_patient_admisions as $k_admision => $v_admision)
			{
				if($_REQUEST['dbg_all'] == '1')
				{
					print_R("\n" . $k_admision . '-->' . $v_admision['admission_date']);
				}

				if(!Pms_CommonData::isintersected(strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime($period['start'][0]), strtotime($period['end'][0])))
				{
					$ipids_readmision_outisde[] = $k_admision;
				}
			}

			/*
			  $period_start_f = "2009-01-01";
			  $period_end_f = date("Y-m-d", strtotime("+1 day"));
			  $conditions_f['periods'] = array("0"=>array('start'=>$period_start_f,'end'=>$period_end_f));
			  $conditions_f['client'] = $clientid;
			  $conditions_f['ipids'] = $clientIpidsNonStbyArr;

			  $active_patient_details_f = Pms_CommonData::patients_days($conditions_f);

			  foreach($active_patient_details_f as $p_ipid=>$p_details){
			  $p_details['active_periods'] = array_values($p_details['active_periods']);
			  $admission_date[$p_ipid] = date('d-m-Y',strtotime($p_details['active_periods'][0]['start']));

			  if(!Pms_CommonData::isintersected(strtotime( $admission_date[$p_ipid] ), strtotime($admission_date[$p_ipid]), strtotime($period['start'][0]), strtotime($period['end'][0])))
			  {
			  $ipids_readmision_outisde[] = $p_ipid;
			  }
			  }
			 */

			$AdmReadmPatients = array_merge($admisionPatients, $clientIpidsNonStbyArr);
			$AdmReadmPatients = array_merge($AdmReadmPatients, $reAdmisionPatients);
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $privPatient));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $ipids_readmision_outisde));
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));

			if($_REQUEST['dbg_all'] == 1)
			{
				print_r("\n   admisionPatients  \n");
				print_r($admisionPatients);
				print_r("\n   reAdmisionPatients  \n");
				print_r($reAdmisionPatients);
				print_r("\n   clientIpidsNonStbyArr  \n");
				print_r($clientIpidsNonStbyArr);
				print_r("\n   privPatient  \n");
				print_r($privPatient);
				print_r("\n   ipids_readmision_outisde  \n");
				print_r($ipids_readmision_outisde);
			}

			$ploc = new PatientLocation();
			$loc = new Locations();

			foreach($AdmReadmPatients as $k_adm_pat => $v_adm_pat)
			{
				$p_first_location = $ploc->getFirstLocation(false, $v_adm_pat);

				if($p_first_location && in_array($v_adm_pat, $LentryPatients))
				{
					$location_details = $loc->getLocationbyId($p_first_location[0]['location_id']);

					if($location_details[0]['location_type'] != '2')
					{
						$non_hospiz_patients[] = $v_adm_pat;
					}
					else
					{
						$hospiz_patients[] = $v_adm_pat;
					}
				}
				else //no admision location so is no hospiz
				{
					$non_hospiz_patients[] = $v_adm_pat;
				}
			}

			if($_REQUEST['dbg_all'] == 1)
			{
				print_r("\n   hospiz_patients  \n");
				print_r($hospiz_patients);

				print_r("\n   non_hospiz_patients  \n");
				print_r($non_hospiz_patients);
			}

			if(count($non_hospiz_patients) == 0)
			{
				$non_hospiz_patients[] = '999999';
			}

			if(count($hospiz_patients) == 0)
			{
				$hospiz_patients[] = '999999';
			}

			//ho hospiz
			if(count($non_hospiz_patients) == 1 && in_array('999999', $non_hospiz_patients))
			{
				$this->view->noprivatepatientadmission = "0";
				$viewdata['noprivatepatientadmission'] = "0";
			}
			else
			{
				$this->view->noprivatepatientadmission = count($non_hospiz_patients); // Neu-Aufnahme Kassenpatient ambulante
				$viewdata['noprivatepatientadmission'] = count($non_hospiz_patients);
			}

			//hospiz
			if(count($hospiz_patients) == 1 && in_array('999999', $hospiz_patients))
			{
				$this->view->hospiz_patients = "0";
				$viewdata['hospiz_patients'] = "0";
			}
			else
			{
				$this->view->hospiz_patients = count($hospiz_patients); // Neu-Aufnahme Kassenpatient ambulante
				$viewdata['hospiz_patients'] = count($hospiz_patients);
			}

			if($_REQUEST['dbg'] == 1)
			{
				print_r("ALL active ipids in period\n");
				print_r($active_qipids);
				print_r("Pacienti admisi din PM\n");
				print_r($admisionPatients);
				print_r("\nPacienti admisi din PRA\n");
				print_r($reAdmisionPatients);
				print_r("\nPacientii admisi si readmisi in perioada selectata (unique and merge)\n");
				print_r($non_hospiz_patients);
				print_r("\nAll Private patients of client\n");
				print_r($privPatient);
				print_r("\nAll l92011 patients of client\n");
				print_r($LentryPatients);
				print_r("\nAll STANDBY patients of client\n");
				print_r($st_del_patients);
				print_r("\nAll non privat patients of client\n");
				print_r($npClientsIpidsArr);
				print_r("\nAll non privat patients of client, active in period\n");
				print_r($npClientsIpidsActive);
				print_r("\nPalliativ-Falle Gesamt\n");
				print_r($clientpatarr);
			}

			//query get all discharge method DEAD of client // PRIMUL QUERY
			$dm = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->Where('isdelete = 0')
				->andWhere('clientid = ' . $logininfo->clientid)
				->andWhere('abbr IN ("TOD", "TODNA")');
			$dischargemethods = $dm->fetchArray();

			if(count($dischargemethods) > 0)
			{
				foreach($dischargemethods as $dmkey => $dmvalue)
				{
					$dischargeids[] = $dmvalue['id'];
				}
			}

			if(count($dischargeids) == 1)
			{
				$dischargemethodids = $dischargeids[0];
			}
			else if(count($dischargeids) > 0 && count($dischargeids) != 1)
			{
				$dischargemethodids = implode(",", $dischargeids);
			}

			$quarter_start_m = $quarter[$quarterFinal][0];
			$quarter_end_m = end($quarter[$quarterFinal]);

			$quarter_start_day = strtotime("{$y[0]}-{$quarter_start_m}-01");
			$quarter_end = strtotime("{$y[0]}-{$quarter_end_m}-01");
			$quarter_end_day = strtotime('-1 second', strtotime('+1 month', $quarter_end));

			$quarter_start_first_dayy = date("Y-m-d H:i:s", $quarter_start_day);
			$quarter_end_last_dayy = date("Y-m-d H:i:s", $quarter_end_day);

			if($quarterFinal != '4')
			{
				$prev_year = ($y[0] - 1);
				$this->view->median_year = $prev_year;
				$viewdata['median_year'] = $prev_year;
				$year_start_first_day = strtotime("{$prev_year }-01-01");
				$year_end_first_day = strtotime("{$prev_year}-12-01");
				$year_end_last_day = strtotime('-1 second', strtotime('+1 month', $year_end_first_day));
				$year_start_day = date("Y-m-d H:i:s", $year_start_first_day);
				$year_end_day = date("Y-m-d H:i:s", $year_end_last_day);
			}
			else
			{
				$this->view->median_year = $y[0];
				$viewdata['median_year'] = $y[0];
				$year_start_first_day = strtotime("{$y[0]}-01-01");
				$year_end_first_day = strtotime("{$y[0]}-12-01");
				$year_end_last_day = strtotime('-1 second', strtotime('+1 month', $year_end_first_day));
				$year_start_day = date("Y-m-d H:i:s", $year_start_first_day);
				$year_end_day = date("Y-m-d H:i:s", $year_end_last_day);
			}

			//query get all DEAD patients with discharge day < = quarter_start_first_day
			$discharged_pat_inquarter = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->where('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date <= "' . $quarter_start_first_dayy . '"');
			$quarter_dead_pat = $discharged_pat_inquarter->fetchArray();

			$dq_ipids[] = '999999';
			foreach($quarter_dead_pat as $dq_key => $dq_val)
			{
				$dq_ipids[] = $dq_val['ipid'];
			}

			$vvhistory = new VollversorgungHistory();
			$vvStartDates = $vvhistory->getVollversorgungHistory($clientpatarr, "1", $dq_ipids);
			$vvEndDates = $vvhistory->getVollversorgungHistory($clientpatarr, "2", $dq_ipids);

			foreach($vvStartDates as $ipid => $startDates)
			{
				foreach($startDates as $keys => $start)
				{
					$vvPeriods[$ipid]['start'][] = $start['date'];
					$vvStart = $start['date'];

					if(empty($vvEndDates[$ipid][$keys]['date']))
					{
						$vvPeriods[$ipid]['end'][] = date("Y-m-d H:i:s");
						$vvEnd = date("Y-m-d H:i:s");
					}
					else
					{
						$vvPeriods[$ipid]['end'][] = $vvEndDates[$ipid][$keys]['date'];
						$vvEnd = $vvEndDates[$ipid][$keys]['date'];
					}

					if(Pms_CommonData::isintersected(strtotime($period['start'][0]), strtotime($period['end'][0]), strtotime($vvStart), strtotime($vvEnd)))
					{
						$finalArray[] = $ipid;
					}
				}
			}

			$finalArray = array_diff($finalArray, $LentryPatients);
			$allVvArray = array_values(array_unique($finalArray));

			$this->view->versorgungstatus = count($allVvArray); // Vollversorgung ohne Pallicare-Versorgung
			$viewdata['versorgungstatus'] = count($allVvArray);

			if($_REQUEST['dbg'] == 1)
			{
				print_r("\nVollversorgung ohne Pallicare-Versorgung\n");
				print_r($allVvArray);
			}

			$active_cond = $this->getTimePeriod($q, $y);
			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $pms->getDaysInBetween($period['start'][0], $period['end'][0]);

			//query get all patients dead in quarter
			$allpatients = $this->getAllClientPatients($logininfo->clientid);
			foreach($allpatients as $allpatient_item)
			{
				$allpatients_str .= '"' . $allpatient_item['ipid'] . '",';
				$allpatients_arr[] = $allpatient_item['ipid'];
			}

			$mdischarged = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $allpatients_arr)
				->andwhere('discharge_method IN (' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $year_start_day . '" and "' . $year_end_day . '"');
			$median_dischargedpatarr = $mdischarged->fetchArray();

			$discharged = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN (' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"');
			$dischargedpatarr = $discharged->fetchArray();

			//Betreuungszeitraum in Tagen (Median) <--- the COMPLETE DoT of all DIED patients in that quartal. MEDIAN.
			$deadipids = array();
			foreach($dischargedpatarr as $d_key => $deadpat)
			{
				if(is_array($deadpat))
				{
					$deadipids[] = $deadpat['ipid'];
				}
				else
				{
					$deadipids[] = $deadpat;
				}
			}

			foreach($median_dischargedpatarr as $md_key => $mdeadpat)
			{
				if(is_array($mdeadpat))
				{
					$mdeadipids[] = $mdeadpat['ipid'];
				}
				else
				{
					$mdeadipids[] = $mdeadpat;
				}
			}

			//START Radu Added new dead (death button) method patients to median
			$pt = new PatientDeath();
			$deadipids = array_values(array_diff($deadipids, $privPatient));
			$deadipids = array_values(array_diff($deadipids, $LentryPatients));
			$deadipids = array_unique($deadipids);

			$mdeadipids = array_values(array_diff($mdeadipids, $privPatient));
			$mdeadipids = array_values(array_diff($mdeadipids, $LentryPatients));
			$mdeadipids = array_unique($mdeadipids);

			if(count($deadipids) == 1 && in_array('999999', $deadipids))
			{
				$this->view->alldeadpatients = "0";
				$viewdata['alldeadpatients'] = "0";
			}
			else
			{
				$this->view->alldeadpatients = count($deadipids); //  Sterbeort Verstorbene Gesamt
				$viewdata['alldeadpatients'] = count($deadipids);
			}
			//END Radu Added new dead (death button) method patients to median

			if($_REQUEST['dbg'] == 1)
			{
				print_r("\n Death by button\n");
				print_r($deadPatients);
				print_r("\nPacienti dead in quarter\n");
				print_r($deadipids);
				exit;
			}

			if($_REQUEST['old'])
			{
				$treatmentdaysdatadead = $pms->getTreatedDaysRealMultiple($mdeadipids, false);
				foreach($treatmentdaysdatadead as $patientTreatmentIpid => $patientTreatmentData)
				{
					$median_arr[] = $patientTreatmentData['realActiveDays'];
				}

				print_r("\n");
				print_r("active patients : \n");
				print_r($median_arr);
				print_r("\n");
			}
			#############################################
			$period_start_sec = "2009-01-01";
			$period_end_sec = date("Y-m-d");
			$conditions_sec['periods'] = array("0" => array('start' => $period_start_sec, 'end' => $period_end_sec));
			$conditions_sec['client'] = $clientid;
			$conditions_sec['ipids'] = $mdeadipids;

			$dead_patients_details = Pms_CommonData::patients_days($conditions_sec);
			foreach($dead_patients_details as $patient_ipid => $patient_data)
			{
				$median_arr[] = $patient_data['treatment_days_no'];
				if($_REQUEST['new'])
				{
					$median_arr_dbg[$patient_ipid] = $patient_data['treatment_days_no'];
				}
			}
			#############################################
			if($_REQUEST['new'])
			{

				print_r("\n");
				print_r("median array : \n");
				print_r($median_arr_dbg);
				print_r("\n");
				exit;
			}

			$median = Pms_CommonData::calculate_median($median_arr);

			if($_REQUEST['dbg'] == 2)
			{
				print_r("\n Discharged \n");
				print_r($dischargedpatarr);
				print_r("\n Private \n");
				print_r($privPatient);
				print_r("\n Dead #1\n");
				print_r($deadPatients);
				print_r("\n Dead #2 \n");
				print_r($deadipids);
				print_r("\n Median Dead #3 \n");
				print_r($mdeadipids);
				print_r("\n Median #1 \n");
				print_r($median_arr);
				print_r("\n Discharge \n");
				print_r($dischargemethodids);
				exit;
			}

			$this->view->averagetreatmentdays = number_format($median, 2); // Betreuungszeitraum in Tagen (Median)
			$viewdata['averagetreatmentdays'] = number_format($median, 2);

			//Get client locations START
			$locationTypesArray = Pms_CommonData::getDischargeLocationTypes();

			#############################
			/* get all discharge location types  */
			$discharge_locations_q = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('clientid = "' . $logininfo->clientid . '"');
			$discharge_locations_res = $discharge_locations_q->fetchArray();

			foreach($discharge_locations_res as $k => $dl_details)
			{
				$type2id[$dl_details['type']][] = $dl_details['id'];
			}



			$discharged_pat_q = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andwhere('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"');
			$discharged_pat_res = $discharged_pat_q->fetchArray();

			foreach($discharged_pat_res as $k => $pat_dis_details)
			{
				if(in_array($pat_dis_details['discharge_location'], $type2id['1']) || in_array($pat_dis_details['discharge_location'], $type2id['8'])  )
				{
					$wohnungdeadpat[] = $pat_dis_details['ipid'];
				}

				if(in_array($pat_dis_details['discharge_location'], $type2id['4']))
				{
					$altenheimdeadpat[] = $pat_dis_details['ipid'];
				}

				if(in_array($pat_dis_details['discharge_location'], $type2id['3']))
				{
					$hospizdeadpat[] = $pat_dis_details['ipid'];
				}

				if(in_array($pat_dis_details['discharge_location'], $type2id['5']))
				{
					$krankenhausdeadpat[] = $pat_dis_details['ipid'];
				}

				if(in_array($pat_dis_details['discharge_location'], $type2id['2']))
				{
					$palliativdeadpat[] = $pat_dis_details['ipid'];
				}
			}

			$this->view->wohnungdeadpatients = count($wohnungdeadpat);
			$viewdata['wohnungdeadpatients'] = count($wohnungdeadpat);

			$this->view->altenheimdeadpatients = count($altenheimdeadpat);
			$viewdata['altenheimdeadpatients'] = count($altenheimdeadpat);

			$this->view->hospizdeadpatients = count($hospizdeadpat);
			$viewdata['hospizdeadpatients'] = count($hospizdeadpat);

			$this->view->krankenhausdeadpatients = count($krankenhausdeadpat);
			$viewdata['krankenhausdeadpatients'] = count($krankenhausdeadpat);

			$this->view->palliativdeadpatients = count($palliativdeadpat);
			$viewdata['palliativdeadpatients'] = count($palliativdeadpat);

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);

			$this->view->clientcity = $clientdata[0]['city'];
			$this->view->client_name = $clientdata[0]['team_name'];
			$viewdata['clientcity'] = $clientdata[0]['city'];

			$this->view->todaydate = date("d.m.Y");
			$viewdata['todaydate'] = date("d.m.Y");

			if(strlen($_POST['btnsave']) > 0)
			{
				$this->generatereportanalage4awl2Pdf(3, $viewdata, 'Anlage4a2wl', "anlage4a2wlnew.html");
			}

			if($_REQUEST['output'] == 1)
			{
				print_r("Neu-Aufnahme Kassenpatient ambulant\n");
				print_r($non_hospiz_patients);
				print_r("Neu-Aufnahme Kassenpatient Hospiz\n");
				print_r($hospiz_patients);
				print_r("Betreuungszeitraum in Tagen (Median) 2012\n");
				print_r($mdeadipids);
				print_r("Vollversorgung ohne Pallicare-Versorgung\n");
				print_r($allVvArray);
				print_r("Verstorbene Gesamt\n");
				print_r($deadipids);
				print_r("Wohnung\n");
				print_r($wohnungdeadpat);
				print_r("Pflegeheim (einschl. Kurzzeitpflege)\n");
				print_r($altenheimdeadpat);
				print_r("Stationäres Hospiz\n");
				print_r($hospizdeadpat);
				print_r("Krankenhaus\n");
				print_r($krankenhausdeadpat);
				print_r("Palliativstation\n");
				print_r($palliativdeadpat);
				exit;
			}
		}

		public function sgbvverordnungAction()
		{
		    
		    if (strpos($this->getRequest()->getServer('HTTP_REFERER'), "patientnew/patientdetails") !== false) {
		        //ISPC-2173
		        $_SESSION['__referrer' . __FUNCTION__] = 'patientnew/patientdetails';
		    }
		    
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			$sgbv_status = Pms_CommonData::getSgbvStatusRadio();
			$this->view->sgbv_status = $sgbv_status;

			$sgbv_actions = new SocialCodeActions();
			$client_sgbv_actions = $sgbv_actions->getCientSocialCodeActions($clientid);
			$this->view->sgbv_client_actions = $client_sgbv_actions;
			foreach($client_sgbv_actions as $kh => $csgbva)
			{
				$sgbv_action_details[$csgbva['id']]['action_name'] = $csgbva['action_name'];
			}

			$all_sgbv_actions = $sgbv_actions->getAllCientSgbvActions($clientid);
			foreach($all_sgbv_actions as $skh => $sgbvall)
			{
				$master_actions[$sgbvall['id']] = $sgbvall;
			}
			$this->view->master_actions = $master_actions;

			$this->view->sgbv_action_details = $sgbv_action_details;

			/* ------------------------------------------------------------------------------ */
			$phelathinsurance = new PatientHealthInsurance();
			$patient_healthinsurance = $phelathinsurance->getPatientHealthInsurance($ipid);
			$private_patient = $patient_healthinsurance[0]['privatepatient'];

			if($patient_healthinsurance)
			{
				$health_insurance_id = $patient_healthinsurance[0]['companyid'];

				$hi_query = Doctrine_Query::create()
					->select('price_sheet_group')
					->from('HealthInsurance')
					->where("id= ?", $health_insurance_id);
				$hi_array = $hi_query->fetchArray();

				if($_REQUEST['dbgq'])
				{
					print_r("Health insurance price sheet group");
					print_r($hi_array);
				}

				if(!empty($hi_array))
				{
					$price_sheet_group = $hi_array[0]['price_sheet_group'];
				}
			}

			if(!empty($_REQUEST['sgbv_form_id']))
			{
				$sgbv_form_id = $_REQUEST['sgbv_form_id'];
				$modal = 1;
			}

			if($this->getRequest()->isPost())
			{
				$save_sgbv_form = new Application_Form_SgbvForms();
				$save_items = new Application_Form_SgbvFormsItems();
				$save_history = new Application_Form_SgbvFormsHistory();

				/* ---------------------  SAVE => MODAL: NEW FORM --------------------------------------------------------------------------- */
				if($_POST['save_modal'] == '1' && empty($_REQUEST['sgbv_form_id']))
				{
					/* ---------------------  SAVE => MODAL: SGBV DETAILS-------------------------------------------------------------------- */
					$sgbv_form_id = $save_sgbv_form->InsertData($_POST['sgbv']);

					if($sgbv_form_id)
					{
						/* ---------------------  SAVE => MODAL: SGBV ACTIONS (ITEMS)  ----------------------------------------------------- */
						$result_items = $save_items->InsertData($_POST, $sgbv_form_id);
					}

					// 0 -don't show wizard  1 -> show wizard
					$modal = 0;
				}
				elseif($_POST['save_modal'] == '1' && empty($_REQUEST['sgbv_form_id']) && !empty($_POST['sgbv_form_id']))
				{
					/* ---------------------  EDIT => MODAL: EDIT SGBV DETAILS ----------------------------------------------------------------- */
					$update_sgbv_modal = $save_sgbv_form->UpdateSgbvModal($_POST['sgbv'], $_POST['sgbv_form_id']);

					/* ---------------------  EDIT => MODAL: SAVE SGBV DETAILS HISTORY ---------------------------------------------------------- */
					if($_POST['sgbv']['old_status'] != $_POST['sgbv']['status'])
					{
// 					$sgbv_history= $save_history->InsertHistorySgbvData($_POST['sgbv'],$_POST['sgbv_form_id']);
					}

					/* ---------------------  EDIT => MODAL: SGBV ACIONS (ITEMS) ---------------------------------------------------------------- */
					$edit_items = $save_items->InsertData($_POST, $_POST['sgbv_form_id']);

					// 0 -don't show wizard  1 -> show wizard
					$modal = 0;
				}
				elseif($_POST['save_modal'] == '1' && !empty($_REQUEST['sgbv_form_id']))
				{
					/* ---------------------  EDIT => MODAL: EDIT SGBV DETAILS ----------------------------------------------------------------- */
					$update_sgbv_modal = $save_sgbv_form->UpdateSgbvModal($_POST['sgbv'], $_REQUEST['sgbv_form_id']);

					/* ---------------------  EDIT => MODAL: SAVE SGBV DETAILS HISTORY ---------------------------------------------------------- */
					if($_POST['sgbv']['old_status'] != $_POST['sgbv']['status'])
					{
// 					$sgbv_history= $save_history->InsertHistorySgbvData($_POST['sgbv'],$_REQUEST['sgbv_form_id']);
					}

					/* ---------------------  EDIT => MODAL: SGBV ACIONS (ITEMS) ---------------------------------------------------------------- */
					$edit_items = $save_items->InsertData($_POST, $_REQUEST['sgbv_form_id']);

					// 0 -don't show wizard  1 -> show wizard
					$modal = 0;
				}
				elseif(strlen($_POST['save']) > 0 && !empty($_POST['sgbv_form_id']))
				{
					$this->generatePdfNew(4, $_POST, 'sgbvverordungen', "sgbv_verordnung_pdf.html");

					$update_sgbv_form = $save_sgbv_form->UpdateSimpleData($_POST['sgbvform'], $_POST['sgbv_form_id']);

					/* ---------------------  SAVE => MODAL: SGBV HISTORY --------------------------------------------------------------- */
					if($_POST['sgbvform']['status'] != $_POST['sgbvform']['old_status'])
					{
						$result_master_history = $save_history->InsertHistorySgbvData($_POST['sgbvform'], $sgbv_form_id);
					}

					
				    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_REQUEST['id'] , array("exit"=>true));
				    exit; //for readability
				}
				/* ---------------------  EDIT => FORM: EDIT FORM AFTER MODAL-------------------------------------------------------------------- */
				elseif(strlen($_POST['cancel']) > 0)
				{
					$cancel_sgbv_form = $save_sgbv_form->CancelSgbvFrom($ipid, $_POST['sgbv_form_id']);
					$cancel_sgbv_form_items = $save_items->CancelSgbvFromItems($ipid, $_POST['sgbv_form_id']);
					$cancel_sgbv_form_history = $save_history->CancelSgbvFromHistory($ipid, $_POST['sgbv_form_id']);
					
					$this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_REQUEST['id'] , array("exit"=>true));
					exit; //for readability
				}
				else
				{
					
				}
			}
			else
			{
				
			}
			/* -------------------------- RWH - get healthinsurance pricelists - START --------------------------------- */

			//default period without sgbv form id(current month
			if(strlen($_REQUEST['sgbv_form_id']) == '0')
			{
				$period_pricelist['start'] = date('Y-m-01', time());
				$period_pricelist['end'] = date('Y-m-' . date('t', time()), time());
			}
			else
			{
				$sgbv_form_master = new SgbvForms();
				$sgbv_form_details = $sgbv_form_master->getPatientSgbvForm($ipid, $_REQUEST['sgbv_form_id']);

				$period_pricelist['start'] = date('Y-m-d', strtotime($sgbv_form_details['valid_from']));
				$period_pricelist['end'] = date('Y-m-d', strtotime($sgbv_form_details['valid_till']));
			}

			$socialcode_price = new SocialCodePriceList();
			$price_sheet = $socialcode_price->get_group_period_pricelist($price_sheet_group, $clientid, $period_pricelist, true);

			if($_REQUEST['dbgq'])
			{
				print_r("Patient Health insurance\n");
				print_r($patient_healthinsurance);
				print_r("Health Insurance pricesheet group\n");
				print_r($price_sheet_group);
				print_r("PRicelists\n");
				print_r($price_sheet);
			}
			/* -------------------------- RWH - get healthinsurance pricelists - END --------------------------------- */

			$patient_sgbv_actions = new PatientCustomActions();

			$used_actions = array(); // not used
			$pat_sgbv_actions = $patient_sgbv_actions->getAllSgbvActionsPatient($clientid, $ipid, $price_sheet, $used_actions);

			foreach($pat_sgbv_actions as $pkh => $psgbva)
			{
				$patient_sgbv_action_details[$psgbva['id']]['action_name'] = $psgbva['action_name'];
				$patient_actions_details[$psgbva['id']] = $psgbva;
			}

			$this->view->sgbv_patient_actions = $pat_sgbv_actions;

			/* ----------------------------------------------------------------------------------------- */
			if($sgbv_form_id)
			{
				$this->view->sgbv_form_id = $sgbv_form_id;

				//get sgbv details
				$sgbv_form_master = new SgbvForms();
				$sgbv_details = $sgbv_form_master->getPatientSgbvForm($ipid, $sgbv_form_id);

				$patient_sgbv_array = $sgbv_form_master->getallPatientSgbvForm($ipid);
				if(!empty($patient_sgbv_array) && count($patient_sgbv_array) > 1)
				{
					$sgbv_details['form_type'] = "follow";
				}
				else
				{
					$sgbv_details['form_type'] = "first";
				}

				$sgbv_form_items_master = new SgbvFormsItems();
				$sgbv_items_details = $sgbv_form_items_master->getPatientSgbvFormItems($ipid, $sgbv_form_id);

				if($_REQUEST['used'])
				{
					print_r("\n sgbv_items_details\n");
					print_r($sgbv_items_details);
					exit;
				}

				$sgbv_actions_conditions = $sgbv_actions->getActionsFormConditions($clientid);

				$sgbv_details['size_degree'] = '';

				foreach($sgbv_items_details as $key => $action_values)
				{
					$actions_values_array[$action_values['action_id']] = $action_values;

					if($action_values['free_of_charge'] == '0')
					{
						if($sgbv_actions_conditions[$action_values['action_id']] == 'glucose')
						{
							$sgbv_details['glucose'] = 1;
							$sgbv_details['glucose_from'] = date('d.m.Y', strtotime($action_values['valid_from']));
							$sgbv_details['glucose_till'] = date('d.m.Y', strtotime($action_values['valid_till']));
							$sgbv_details['glucose_day'] = $action_values['per_day'];
							$sgbv_details['glucose_week'] = $action_values['per_week'];
						}
						elseif($sgbv_actions_conditions[$action_values['action_id']] == 'ulcer_treatment_degree2')
						{
							$sgbv_details['ulcer_treatment_degree'] = 1;
							$sgbv_details['ulcer_treatment_degree2'] = 1;
							$sgbv_details['ulcer_treatment_degree2_from'] = date('d.m.Y', strtotime($action_values['valid_from']));
							$sgbv_details['ulcer_treatment_degree2_till'] = date('d.m.Y', strtotime($action_values['valid_till']));
							$sgbv_details['ulcer_treatment_degree2_day'] = $action_values['per_day'];
							$sgbv_details['ulcer_treatment_degree2_week'] = $action_values['per_week'];
							$sgbv_details['size_degree'] .= 'Grad 2';
						}
						elseif($sgbv_actions_conditions[$action_values['action_id']] == 'ulcer_treatment_degree34')
						{
							$sgbv_details['ulcer_treatment_degree'] = 1;
							$sgbv_details['ulcer_treatment_degree34'] = 1;
							$sgbv_details['ulcer_treatment_degree34_from'] = date('d.m.Y', strtotime($action_values['valid_from']));
							$sgbv_details['ulcer_treatment_degree34_till'] = date('d.m.Y', strtotime($action_values['valid_till']));
							$sgbv_details['ulcer_treatment_degree34_day'] = $action_values['per_day'];
							$sgbv_details['ulcer_treatment_degree34_week'] = $action_values['per_week'];
							$sgbv_details['size_degree'] .= 'Grad 3 und 4';
						}
						elseif($sgbv_actions_conditions[$action_values['action_id']] == 'injection_ready_preparation')
						{
							$sgbv_details['injection'] .= 1;
							$sgbv_details['injection_ready_preparation'] = 1;
							$sgbv_details['injection_ready_preparation_from'] = date('d.m.Y', strtotime($action_values['valid_from']));
							$sgbv_details['injection_ready_preparation_till'] = date('d.m.Y', strtotime($action_values['valid_till']));
							$sgbv_details['injection_ready_preparation_day'] = $action_values['per_day'];
							$sgbv_details['injection_ready_preparation_week'] = $action_values['per_week'];
						}
						elseif($sgbv_actions_conditions[$action_values['action_id']] == 'injection_im_preparation')
						{
							$sgbv_details['injection'] .= 1;
							$sgbv_details['injection_im_preparation'] = 1;
							$sgbv_details['injection_im_preparation_from'] = date('d.m.Y', strtotime($action_values['valid_from']));
							$sgbv_details['injection_im_preparation_till'] = date('d.m.Y', strtotime($action_values['valid_till']));
							$sgbv_details['injection_im_preparation_day'] = $action_values['per_day'];
							$sgbv_details['injection_im_preparation_week'] = $action_values['per_week'];
						}
						elseif($sgbv_actions_conditions[$action_values['action_id']] == 'injection_sc_preparation')
						{
							$sgbv_details['injection'] .= 1;
							$sgbv_details['injection_sc_preparation'] = 1;
							$sgbv_details['injection_sc_preparation_from'] = date('d.m.Y', strtotime($action_values['valid_from']));
							$sgbv_details['injection_sc_preparation_till'] = date('d.m.Y', strtotime($action_values['valid_till']));
							$sgbv_details['injection_sc_preparation_day'] = $action_values['per_day'];
							$sgbv_details['injection_sc_preparation_week'] = $action_values['per_week'];
						}
						elseif($sgbv_actions_conditions[$action_values['action_id']] == 'medication_ready_preparation')
						{
							$sgbv_details['medication'] .= 1;
							$sgbv_details['medication_ready_preparation'] = 1;
							$sgbv_details['medication_ready_preparation_from'] = date('d.m.Y', strtotime($action_values['valid_from']));
							$sgbv_details['medication_ready_preparation_till'] = date('d.m.Y', strtotime($action_values['valid_till']));
							$sgbv_details['medication_ready_preparation_day'] = $action_values['per_day'];
							$sgbv_details['medication_ready_preparation_week'] = $action_values['per_week'];
						}
						elseif($sgbv_actions_conditions[$action_values['action_id']] == 'medication_administer_preparation')
						{
							$sgbv_details['medication'] .= 1;
							$sgbv_details['medication_administer_preparation'] = 1;
							$sgbv_details['medication_administer_preparation_from'] = date('d.m.Y', strtotime($action_values['valid_from']));
							$sgbv_details['medication_administer_preparation_till'] = date('d.m.Y', strtotime($action_values['valid_till']));
							$sgbv_details['medication_administer_preparation_day'] = $action_values['per_day'];
							$sgbv_details['medication_administer_preparation_week'] = $action_values['per_week'];
						}
						elseif($sgbv_actions_conditions[$action_values['action_id']] == 'supportive_association')
						{
							$sgbv_details['supportive_association'] = 1;
							$sgbv_details['supportive_association_from'] = date('d.m.Y', strtotime($action_values['valid_from']));
							$sgbv_details['supportive_association_till'] = date('d.m.Y', strtotime($action_values['valid_till']));
							$sgbv_details['supportive_association_day'] = $action_values['per_day'];
							$sgbv_details['supportive_association_week'] = $action_values['per_week'];
						}
						elseif($sgbv_actions_conditions[$action_values['action_id']] == 'wund_bandages_location')
						{
							$sgbv_details['wund_bandages_location'] = 1;
							$sgbv_details['wund_bandages_location_from'] = date('d.m.Y', strtotime($action_values['valid_from']));
							$sgbv_details['wund_bandages_location_till'] = date('d.m.Y', strtotime($action_values['valid_till']));
							$sgbv_details['wund_bandages_location_day'] = $action_values['per_day'];
							$sgbv_details['wund_bandages_location_week'] = $action_values['per_week'];
						}
						elseif($sgbv_actions_conditions[$action_values['action_id']] == 'other')
						{
							$sgbv_details['other'] = 1;
							if($patient_actions_details[$action_values['action_id']]['custom'] == '1' && $patient_actions_details[$action_values['action_id']]['parent'] != "0")
							{
								$sgbv_details['other_text'] .= $master_actions[$patient_actions_details[$action_values['action_id']]['parent']]['action_name'] . ' (' . $action_values['per_day'] . 'x tgl. / ' . $action_values['per_week'] . 'x wtl. ); ';
							}
							else
							{
								$sgbv_details['other_text'] .= $master_actions[$action_values['action_id']]['action_name'] . ' (' . $action_values['per_day'] . 'x tgl. / ' . $action_values['per_week'] . 'x wtl. ); ';
							}
						}
						else
						{
							$sgbv_details['other'] = 1;
							if($patient_actions_details[$action_values['action_id']]['custom'] == '1' && $patient_actions_details[$action_values['action_id']]['parent'] != "0")
							{
								$sgbv_details['other_text'] .= $master_actions[$patient_actions_details[$action_values['action_id']]['parent']]['action_name'] . ' (' . $action_values['per_day'] . 'x tgl. / ' . $action_values['per_week'] . 'x wtl. ); ';
							}
							else
							{
								$sgbv_details['other_text'] .= $master_actions[$action_values['action_id']]['action_name'] . ' (' . $action_values['per_day'] . 'x tgl. / ' . $action_values['per_week'] . 'x wtl. ); ';
							}
						}
					}
				}

				/* ------------------------------DISPLAY FORM HISTORY------------------------------------------- */
				$master_form_history = new SgbvFormsHistory();
				$form_history = $master_form_history->getPatientSgbvFormHistory($ipid, $sgbv_form_id);
				$this->view->form_history = $form_history;
				$this->view->modal_action_details = $actions_values_array;
				$this->view->sgbvform_details = $sgbv_details;

				$fileupload = new PatientFileUpload();
				$sgbv_form_files = $fileupload->getSgbvFormFileData($ipid, $sgbv_form_id);

				foreach($sgbv_form_files as $k_file => $v_file)
				{
					$users_ids[] = $v_file['create_user'];
				}

				$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
				$this->view->sgbv_form_files = $sgbv_form_files;
			}
			else
			{
				// 0 - don't show wizard  1 -> show wizard
				$modal = 1;
			}

			// 0 - don't show wizard  1 -> show wizard
			$this->view->sgbv_mod = $modal;
			$sgbv_form_id = $result_sgbv_from_id;

			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;
			/* ------------------------------------------------------------------------------ */

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'] . "\n" . $parr['street1'] . "\n" . $parr['zip'] . " " . $parr['city'];
			$this->view->birthdate = $parr['birthd'];
			$this->view->patientname1 = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->patietnaddress = $parr['street1'] . "&nbsp;" . $parr['zip'] . "\n" . $parr['city'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];

			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$brenmber = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where("epid= ?", $epid);
			$bexec = $brenmber->execute();
			$barray = $bexec->toArray();

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->arzt_nr = $uarray['LANR'];
			}

			/* ------------------- 	Maindiagnosis		------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$this->view->diagnosen = $diagnosis;
			}
			else
			{
				$this->view->diagnosen = '';
			}

			/* ---------------------------------------------------- */
			$pdrug = new PatientDrugPlan();
			$drugarray = $pdrug->getPatientDrugPlan($decid);
// 
			$comma = "";
			foreach($drugarray as $key => $val)
			{
				$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
				if(!empty($medca))
				{
					$medcaarray = $medca->toArray();
				}
				$this->view->medication .= $comma . $medcaarray['name'] . " | " . $val['dosage'];
				$comma = "\n";
			}

			/* --------------------------------User select------------------------------------- */
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}

			$users = new User();
			$userarray = $users->getUserByClientid($logininfo->clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();
			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['last_name']) . " " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;
			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				// show select to all
				$showselect = 1;
			}
			$this->view->showselect = $showselect;

			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);

			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}

			$this->view->users_mstamps = $users_mstamps;

			if($this->getRequest()->isPost())
			{
				if($_POST['save_modal'] != '1' && !$_POST['cancel'])
				{
					if($_POST['stampusers'] > 0)
					{
						if($multiplestamps_option === true)
						{
							$stamp_info = explode('-', $_POST['stampusers']);
							$stamp_user = $stamp_info[0];
							$stamp_id = $stamp_info[1];

							$ustamp = new UserStamp();
							$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);

							$_POST['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
							$_POST['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
						}
						else
						{
							$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
							if($userst)
							{
								$uarray = $userst->toArray();
								$_POST['arzt_nr'] = $uarray['LANR'];
								$_POST['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
							}
						}
					}

					$_POST['stamp_block'] = strip_tags(str_replace('<br/>', "\n", $_POST['stamp_block']));

					if(strlen($_POST['pre_print']) > 0)
					{
						$this->generatePdfNew(3, $_POST, 'sgbvverordungen_pre', "sgbv_verordnung_pre_pdf.html");
					}
					else
					{
						$this->generatePdfNew(3, $_POST, 'sgbvverordungen', "sgbv_verordnung_pdf.html");
					}
				}
			}
		}

		private function generatePdfNew($chk, $post, $pdfname, $filename)
		{ 
// 			if ($chk<>3)die(	__CLASS__ . " " . __FUNCTION__);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$clientinfo = Pms_CommonData::getClientData($clientid);
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$excluded_keys = array(
				'stamp_block',
				'patientdetails',

			    'locations',
				'patient_contacts',
				'patient_pflegedienstes',
				'patient_physiotherapist',
				'patient_churches',
				'patient_homecare',
				'patientmedipumpe',
			    'patient_voluntaryworkers',
			    'patient_pharmacy',
			    'sapvverordnunglist',
			    'carelevellist',
			    
			);
			$post = Pms_CommonData::clear_pdf_data($post, $excluded_keys);
			$post['currdate'] = date("d.m.Y", time());
			$post['ipid'] = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$post['patientname'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']) . " \n" . htmlspecialchars($parr['street1']) . "\n" . htmlspecialchars($parr['zip']) . "&nbsp;" . htmlspecialchars($parr['city']);
			$post['patientaddress'] = htmlspecialchars($parr['street1']) . " \n " . htmlspecialchars($parr['zip']) . " " . htmlspecialchars($parr['city']);
			$post['pataddress'] = htmlspecialchars($parr['street1']) . ", " . htmlspecialchars($parr['zip']) . " " . htmlspecialchars($parr['city']);
			$post['patname'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']);
			$post['patbirth'] = $parr['birthd'];
			$post['epid'] = $epid;

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			if($parr['sex'] == 1)
			{
			    $this->view->gender = $this->view->translate("male");
			}
			elseif($parr['sex'] == 2)
			{
			    $this->view->gender = $this->view->translate("female");
			}
			elseif($parr['sex'] != null && $parr['sex'] == 0 )  
			{
			    $this->view->gender = $this->view->translate("divers");  //ISPC-2442 @Lore   30.09.2019
			}
			else  //if($parr['sex'] == null)  &&  == ""
			{
			    $this->view->gender = $this->view->translate("gender_not_documented");
			}

			$dian = new Application_Form_Diagnosis();
			$sortarr = $dian->getHDdiagnosis($parr['ipid']);
			foreach($sortarr as $key => $diagnosis)
			{
				$maind .= ' ' . $diagnosis['description'] . ',';
			}

			$post['maindiagnosis'] = substr($maind, 0, -1);

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);

			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

			$symp = new Symptomatology();
			$symptomarr = $symp->getPatientSymptpomatologyLast($ipid);

			if(empty($symptomarr))
			{
				$sympval = new SymptomatologyValues();
				$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set
				foreach($set_details as $key => $sym)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
				}
			}
			else
			{
				foreach($symptomarr as $key => $sym)
				{
					$symptomarr[$key]['sym_desc_array'] = $sym['sym_description'];
					$symptomarr[$key]['sym_description'] = utf8_encode($sym['sym_description']['value']);
				}
			}

			$post['symptomarr'] = $symptomarr;

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['clientname'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];
			$post['city'] = $clientdata[0]['city'];

			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			$post['dk'] = $pat_moreinfo[0]['dk'];
			$post['peg'] = $pat_moreinfo[0]['peg'];
			$post['port'] = $pat_moreinfo[0]['port'];
			$post['pumps'] = $pat_moreinfo[0]['pumps'];

			$post['sapsymp'] = Sapsymptom::get_patient_sapvsymptom(Pms_CommonData::getIpid($decid));

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$post['bdate'] = $patientinfo['birthd'];

			if($patientinfo['isdischarged'] != 1)
			{
				$sav = new SapvVerordnung();
				$post['savarry'] = $sav->getSapvVerordnungData($patientinfo['ipid']);
			}

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$post['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$post['insurance_status'] = $healthinsu_array[0]['insurance_status'];

			$hquery = Doctrine_Query::create()
				->select('*')
				->from('HealthInsurance')
				->where("id='" . $healthinsu_array[0]['companyid'] . "' or name='" . htmlentities($healthinsu_array[0]['company_name'], ENT_QUOTES) . "'");
			$harray = $hquery->fetchArray();
			$post['kvnumber'] = $harray[0]['kvnumber'];

			/* analage3 */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

// 			$tm = new TabMenus();
// 			$this->view->tabmenus = $tm->getMenuTabs();

			$imgtag = Doctrine::getTable('SapfiveImagetags')->findBy('ipid', $ipid);
			$post['tagarray'] = $imgtag->toArray();

			$post['tablepatientinfo'] = Pms_Template::createTemplate($parr, 'templates/pdfprofile.html');

			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");

			//get main diagnosis types
			$abb = "'HD','ND'";
			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($clientid, $abb);

			foreach($darr as $k_dt => $v_dt)
			{
				$dtypearray[$v_dt['abbrevation']] = $v_dt['id'];
			}

			foreach($post['dtype'] as $k_dtype => $v_dtype)
			{
				if(in_array($v_dtype, $dtypearray))
				{
					if(!empty($post['diagnosis'][$k_dtype]))
					{
						$current_diagnosis_type = array_search($v_dtype, $dtypearray);
						$diagnosis_arr[$current_diagnosis_type][] = trim(rtrim($post['icdnumber'][$k_dtype] . ' ' . $post['diagnosis'][$k_dtype]));
					}
				}
			}

			$metas = array('');
			foreach($post['meta_title'] as $k_meta => $v_meta)
			{
				$metas = array_merge($metas, $v_meta);
			}

			//get all metastases
			$dm = new DiagnosisMeta();
			$diagnosismeta = $dm->getDiagnosisMetaData(1);

			foreach($metas as $k_metas => $v_metas)
			{
				if(!empty($v_metas))
				{
					$metastases[] = trim(rtrim($diagnosismeta[$v_metas]));
				}
			}

			$post['main_diagnosis'] = implode(', ', $diagnosis_arr['HD']);
			$post['metastases'] = implode(', ', $metastases);
			$post['side_diagnosis'] = implode(', ', $diagnosis_arr['ND']);

			// sapv questionnaire
			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);

			if($chk == 1)
			{
				// $dlSession = new Zend_Session_Namespace('doctorLetterSession');
				$tmpstmp = uniqid(time());
// 				mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH. "/" . $tmpstmp);
// 				$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$pdf->Output(PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH. '/' . $tmpstmp . '/' . $pdfname . '.pdf', "uploads" );
				
			}
			if($chk == 2)
			{
				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				$_SESSION['filename'] = "";
				unset($_SESSION['filename']);
				exit;
			}

			if($chk == 3)
			{

				$navnames = array(
					"sgbvverordungen" => 'SGB V Verordungen',
					"careregulation" => 'Pflegeverordnung',
					"sgbvverordungen_pre" => 'SGB V Verordungen',
					"careregulation_pre" => 'Pflegeverordnung',
					"verordnungtp_pre" => 'Muster 63',
					"verordnungtpside" => "Muster 63 Seite 2",
					"verordnungtpside_pre" => "Muster 63 Seite 2 Pre",
					"munster4_pre" => 'Krankenbeförderung Preprint',
					"munster4" => 'Krankenbeförderung',
					"munster4pdf" => 'Krankenbeförderung',
					"Anlage_3" => 'Teilnahmeerklärung (Anlage 3)',
					"Anlage_3a" => 'Stammdatenblatt für den PKD (Anlage 3a)',
					"Anlage4wl" => 'Anlage 4',
					"Anlage4awlx" => 'Anlage 4a WL',
					"KvnoAnlage3a" => 'Anlage 3a',
					"KvnoAnlage3b" => 'Anlage 3b',
					"anlage15" => 'Anlage 15',
					"shwrapper" => 'Deckblatt',
					"messagecoordinator" => "Mitteilung Koord.",
					"muster2b" => "Muster 2b",
					"muster2b_pre" => "Muster 2b",
					"patientdetails" => "patientdetails"
				);

				//$pdf = new Pms_PDF($orientation, 'mm', 'A4', true, 'UTF-8', false);
				if($pdfname == 'munster4' || $pdfname == 'munster4_pre'  || $pdfname == 'munster4pdf')
				{
					$orientation = 'L';
					$bottom_margin = '0';
					$format = "A5";
				}
				else if($pdfname == 'shwrapper')
				{
					$orientation = 'L';
					$bottom_margin = '20';
					$format = "A4";
				}
				else if($pdfname == 'muster2b' || $pdfname == 'muster2b_pre')
				{
					$orientation = 'P';
					$bottom_margin = '2';
					$format = "A5";
				}
				else
				{
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
				}

				$pdf = new Pms_PDF($orientation, 'mm', $format, true, 'UTF-8', false);
				$pdf->setDefaults(true, $orientation, $bottom_margin); //defaults with header
				$pdf->setImageScale(1.6);
				$pdf->format = $format;
				$pdf->SetMargins(10, 5, 10); //reset margins

				switch($pdfname)
				{
					case 'sgbvverordungen_pre':
						$pdf->SetAutoPageBreak(false);
						$background_type = '20';
						break;
				   case 'careregulation_pre':
						$pdf->SetAutoPageBreak(false);
						$background_type = '62';
						break;
					case 'verordnungtp_pre':
						$pdf->SetAutoPageBreak(false);
						//ISPC-2444 Lore
						$pdf->setPrintFooter(false);					
						$background_type = '21';
						break;

					case 'verordnungtpside_pre':
						$pdf->SetAutoPageBreak(false);
						$pdf->setPrintFooter(false);
						$background_type = '52';
						break;

					case 'verordnungtpside':
						$pdf->SetAutoPageBreak(false);
						$pdf->setPrintFooter(false);
						break;

					case 'munster4_pre':
						$pdf->SetAutoPageBreak(false);
						$pdf->HeaderText = false;
						$pdf->SetMargins(2, 2, 1, true); //reset margins
						$pdf->setCellHeightRatio(1);
						$pdf->setPrintFooter(false);
						$background_type = '49';
						break;

					case 'munster4':
					case 'munster4pdf':
						$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(2, 2, 2); //reset margins
						$pdf->setPrintFooter(false);
						$pdf->setCellHeightRatio(1);
						break;

					case 'Anlage4awlx':
						$background_type = false;
						$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(10, 5, 10); //reset margins
						$pdf->setPrintFooter(false); //remove footer black line
						break;

					case 'anlage15':
						$background_type = false;
						$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(20, 10, 20); //reset margins
						$pdf->setPrintFooter(false); //remove footer black line
						break;
					case 'shwrapper':
						$background_type = '54';
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(20, 10, 20); //reset margins
						$pdf->setPrintFooter(false); //remove footer black line
						break;
					case 'messagecoordinator':
						$pdf->setPrintFooter(false);
						//$pdf->setfooter_text(true);
						break;
					case 'muster2b':
						$background_type = false;
					//	$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(2, 2, 2); //reset margins
						$pdf->setPrintFooter(false);
// 							$pdf->setCellHeightRatio(1);
						$background_type = '66';
						break;
					case 'muster2b_pre':
						$background_type = false;
						//	$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(2, 2, 2); //reset margins
						$pdf->setPrintFooter(false);
						$pdf->setCellHeightRatio(1);
						$background_type = '66';
						break;
					default:
						$background_type = false;
						$pdf->SetMargins(10, 5, 10); //reset margins
						break;
				}
				
				if($pdfname == 'Anlage4awlx' || $pdfname == 'Anlage4wl')
				{
			 		$pdf->SetFont('', '', 10);
				}
	 
				
				$pdf->HeaderText = false;
				if($background_type != false)
				{
					$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], $background_type);
					if($bg_image !== false)
					{
						$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
						if(is_file($bg_image_path))
						{
							$pdf->setBackgroundImage($bg_image_path);
						}
					}
				}

				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

				$excluded_css_cleanup_pdfs = array(
					'munster4_pre',
					'Anlage_3',
					'Anlage_3a',
					'Anlage4awlx',
					'Anlage4wl',
					'KvnoAnlage3a',
					'KvnoAnlage3b',
					'anlage15',
					'shwrapper',
					'muster2b',
					'muster2b_pre',
					'patientdetails'
				);

				if(!in_array($pdfname, $excluded_css_cleanup_pdfs))
				{
					$html = preg_replace('/style=\"(.*)\"/i', '', $html);
				}
				
				if($_REQUEST['show_html'] == "1"){
                    echo $html; exit;
				}
				
				$pdf->setHTML($html);
				$tmpstmp = $pdf->uniqfolder(PDF_PATH);

				$file_name_real = basename($tmpstmp);

				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');				
				
				$_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
				

// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;

// 				exec($cmd);
				$zipname = $file_name_real . ".zip";

				$filename = "uploads/" . $file_name_real . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();

				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				

				if($pdfname == 'sgbvverordungen' || $pdfname == 'sgbvverordungen_pre')
				{
					$record_id = $post['sgbv_form_id'];
					$form_tabname = 'sgbv_form';
				}
				elseif($pdfname == 'careregulation'||$pdfname == 'careregulation_pre' )
				{
					$record_id = "";
					$form_tabname = 'careregulation_form';
				}
				elseif($pdfname == 'Anlage4wl')
				{
					$record_id = "";
					$form_tabname = 'anlage4wl';
				}
				elseif($pdfname == 'KvnoAnlage3a')
				{
					$form_tabname = 'kvnoanlage3a';
				}
				elseif($pdfname == 'KvnoAnlage3b')
				{
					$form_tabname = 'kvnoanlage3b';
				}
				elseif($pdfname == 'munster4_pre')
				{
					$form_tabname = 'muster4_pre';
				}
				elseif($pdfname == 'munster4')
				{
					$form_tabname = 'muster4';
				}
				elseif($pdfname == 'muster2b_pre')
				{
					$form_tabname = 'muster2b_pre';
				}
				elseif($pdfname == 'muster2b')
				{
					$form_tabname = 'muster2b';
				}
				else
				{
					$record_id = '';
					$form_tabname = '';
				}
				
				
				if( $pdfname != "munster4pdf" && $pdfname != "patientdetails") {
					
					$cust = new PatientFileUpload ();
					$cust->title = Pms_CommonData::aesEncrypt(addslashes($navnames[$pdfname]));
					$cust->ipid = $ipid;
					$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
					$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					$cust->recordid = $record_id;
					$cust->tabname = $form_tabname;
					$cust->system_generated = "1";
					$cust->save();
					$recordid = $cust->id;
				}
				
				
				if($pdfname == "verordnungtp_pre" || $pdfname == "verordnungtpside_pre" || $pdfname == "verordnungtpside" || $pdfname == "muster2b_pre" || $pdfname == "muster2b")
				{
					//insert system file tags (muster63 and muster2b) Tag
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('5'));
				}
				
				if($pdfname == "munster4_pre" || $pdfname == "munster4")
				{
					//insert system file tags (muster4) Tag
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid,false, 'muster4_tag');
				}
				if($pdfname == "Anlage4wl")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $navnames [$pdfname] . ' wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				elseif($pdfname == "KvnoAnlage3a")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $navnames[$pdfname] . ' wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				elseif($pdfname == "KvnoAnlage3b")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $navnames[$pdfname] . ' wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				elseif($pdfname == "munster4" || $pdfname == "munster4_pre")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				else
				{
					if( $pdfname != "munster4pdf" ) {
					    
						$cust = new PatientCourse ();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
						$cust->user_id = $logininfo->userid;
						$cust->save();
					}
				}

				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', "d");
				
				$_SESSION['filename'] = "";
				unset($_SESSION['filename']);
// 			echo $htmlform;
				exit;
			}

			//dont return the pdf file to user
			if($chk == 4)
			{
				if($pdfname == "sgbvverordungen")
				{
					$record_id = $post['sgbv_form_id'];
					$form_tabname = 'sgbv_form';
				}
				else if($pdfname == "FormFiveInstance")
				{
					$record_id = $post['form_id'];
					$form_tabname = 'final_documentation_form'; // fromfive
				}
				else if($pdfname == "verordnungtp_save")
				{
					$record_id = $post['saved_id'];
					$form_tabname = 'verordnungtp_save'; // muster 63 save
				}
				else if($pdfname == "muster2b_save")
				{
					$record_id = $post['saved_id'];
					$form_tabname = 'muster2b_save'; // muster 2b save
				}
				else if($pdfname == "careregulation_save")
				{
					$record_id = $post['saved_id'];
					$form_tabname = 'careregulation_save'; // 
				}
				
				$navnames = array(
					"sgbvverordungen" => 'SGB V Verordungen',
					"verordnungtp_save" => "Muster 63 " . date('d.m.Y')."",
				    "careregulation_save" => "Pflegeverordnung " . date('d.m.Y')."",
					"FormFiveInstance" => 'Abschlussdokumentation_' . date('d.m.Y'),
					"muster2b_save" => "Muster 2b " . date('d.m.Y')."",
				);

				
				if($pdfname == 'muster2b_save')
				{
					$orientation = 'P';
					$bottom_margin = '2';
					$format = "A5";
				}
				else
				{
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
				}

				$pdf = new Pms_PDF($orientation, 'mm', $format, true, 'UTF-8', false);
				$pdf->setDefaults(true, $orientation, $bottom_margin); //defaults with header
				
// 				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
// 				$pdf->setDefaults(true);
				$pdf->setImageScale(1.6);
				switch($pdfname)
				{
					case 'muster2b_save':
						$background_type = false;
						$pdf->SetMargins(2, 2, 2); //reset margins
						$pdf->setPrintFooter(false);
						$pdf->setCellHeightRatio(1);
						break;
					default:
						$background_type = false;
						$pdf->SetMargins(10, 5, 10); //reset margins
						break;
				}
				
				
				$background_type = false;
				$pdf->HeaderText = false;

				$excluded_css_cleanup_pdfs = array(
						'muster2b_save'
				);
				
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
				if(!in_array($pdfname, $excluded_css_cleanup_pdfs))
				{
					$html = preg_replace('/style=\"(.*)\"/i', '', $html);
				}

				$pdf->setHTML($html);

				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				$file_name_real = basename($tmpstmp);
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
				$_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $file_name_real . ".zip";
				$filename = "uploads/" . $file_name_real . ".zip";

				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf', "uploads" );
				
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($navnames[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_id;
				$cust->tabname = $form_tabname;
				$cust->system_generated = "1";
				$cust->save();
				$recordid = $cust->id;

				if($pdfname == "verordnungtp_save")
				{
					//insert system file tags
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('5'));
				}
				
				if($pdfname == "muster2b_save")
				{
					//insert system file tags
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('5'));
				}
				
				if($pdfname == "FormFiveInstance")
				{
					$comment = 'Abschlussdokumentation hinzugefügt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("FinalDocumentation_form");
					$cust->user_id = $userid;
					$cust->save();

					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("FinalDocumentation_instance");
					$cust->user_id = $userid;
					$cust->save();
				}
				elseif($pdfname == "verordnungtp_save")
				{
					$comment = 'Neue Version wurde erstellt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("muster_63_form");
					$cust->user_id = $userid;
					$cust->save();

					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("muster_63_instance");
					$cust->user_id = $userid;
					$cust->save();
				}
				elseif($pdfname == "muster2b_save")
				{
						$comment = 'Neue Version wurde erstellt';
						$cust = new PatientCourse();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt($comment);
						$cust->recordid = $recordid;
						$cust->tabname = Pms_CommonData::aesEncrypt("muster_2b_form");
						$cust->user_id = $userid;
						$cust->save();
					
						$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
						$cust = new PatientCourse();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt($comment);
						$cust->recordid = $recordid;
						$cust->tabname = Pms_CommonData::aesEncrypt("muster_2b_instance");
						$cust->user_id = $userid;
						$cust->save();
							
				}
				elseif($pdfname == "careregulation_save")
				{
					$comment = 'Pflegeverordnung hinzugefügt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("careregulation");
					$cust->user_id = $userid;
					$cust->save();

					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("careregulation_save");
					$cust->user_id = $userid;
					$cust->save();
				}
				
				$_SESSION['filename'] = "";
				unset($_SESSION['filename']);
			}
		}

		public function anlage4awlAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);


			$this->view->patientname = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] . " \r\n " . $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "&nbsp;" . $patientinfo['city'];
			$this->view->birthdate = $patientinfo['birthd'];
			/* $this->view->addmissiondate = date('d.m.Y', strtotime($patientinfo['admission_date'])); */
			$this->view->maxdate = date('d.m.Y');
			$this->view->isDischarged = $patientinfo['isdischarged'];
			$this->view->isstandby = $patientinfo['isstandby'];
			$this->view->isstandbydelete = $patientinfo['isstandbydelete'];

			$patactive = Doctrine_Query::create()
				->select('*')
				->from('PatientActive')
				->where('ipid= ?', $ipid)
				->orderBy('start ASC');
			$admisionarray = $patactive->fetchArray();

			$this->view->addmissiondate = date('d.m.Y', strtotime($admisionarray[0]['start']));


			if($patientinfo['vollversorgung_date'] != '0000-00-00 00:00:00' && $patientinfo['vollversorgung'] == '1')
			{
				/* $statusvolldate = $patientmaster->getDaysDiff($patientinfo['vollversorgung_date'], date('Y-m-d h:i:s'));
				  $this->view->nr = $statusvolldate; */

				// get all days of Vollversorgung
				$vv_history = new VollversorgungHistory();
				$statusvolldate = $vv_history->getVollversorgungDays($ipid);
				$this->view->nr = $statusvolldate;

				if($statusvolldate >= '28')
				{
					$this->view->renew_checked = '1';
				}
				else
				{
					$this->view->renew_checked = '0';
				}
			}
			else
			{
				$this->view->nr = '--';
			}

			//red box data #1
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

//		cityofclient
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();

				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];

				$this->view->betriebsstatten_nr = $loguserarray['betriebsstattennummer'];
				$this->view->arzt_nr = $loguserarray['LANR'];
			}

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['client_name'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];

			$this->view->cityofclient = $clientdata[0]['city'];
			$this->view->clientname = $clientdata[0]['client_name'];
			$this->view->team_name = $clientdata[0]['team_name'];
			$this->view->has_vollversorgung = $patientinfo['vollversorgung'];
			$this->view->client_bsnr = $clientdata[0]['betriebsstattennummer'];

			//min,max dates
			$vvh = new VollversorgungHistory();
			$vvHistoryStart = $vvh->getVollversorgungHistory($ipid, "1"); //get starts
			$vvHistoryEnd = $vvh->getVollversorgungHistory($ipid, "2"); //get ends

			if(count($vvHistoryStart) != 0 && $patientinfo['vollversorgung'] == 1)
			{
				$start_history = end(end($vvHistoryStart));
				$minDate = date("d.m.Y", strtotime($start_history['date']));
			}

			if(count($vvHistoryEnd) != 0 && $patientinfo['vollversorgung'] == 1 && count($vvHistoryStart) != count($vvHistoryEnd))
			{
				$end_history = end(end($vvHistoryEnd));
				$maxDate = date('d.m.Y', strtotime($end_history['date']));
			}

			$this->view->sminDate = $minDate;
			$this->view->smaxDate = $maxDate;

			//@todo add maxdate and smaxdate!
			//Get discharge method for WL client discharge
			$dis = new DischargeMethod();
			$discharge_methods = $dis->getDischargeMethod($clientid, 0);

			foreach($discharge_methods as $dischargeM)
			{
				if($dischargeM['abbr'] == "STTI")
				{
					$discharge_method = $dischargeM['id'];
				}
				if($dischargeM['abbr'] == "TOD" || $dischargeM['abbr'] == "TODNA")
				{
					$death_methods[] = $dischargeM['id'];
				}
			}
			$this->view->dischargeMethod = $discharge_method;

			$disddata = new PatientDeath();
			$patientdeath = $disddata->getPatientDeath($ipid); //check out if is dead by death button
// 		if($patientinfo['isdischarged'] == 0)  // Ancuta 02.05.2014 -   the user is allowed to add vwl vorversorgung - when patient is discharged.
// 		{
			if(strlen($_POST['start_date']) > 0)
			{
				$begin_date = date('Y-m-d H:i:s', strtotime($_POST['start_date']));

				$cust = Doctrine::getTable('PatientMaster')->find($decid);
				$cust->vollversorgung = 1;
				$cust->vollversorgung_date = $begin_date;
				$cust->save();

				//Vollversorgung History start
				$vvhis = new VollversorgungHistory();
				$historyvv = $vvhis->getVollversorgungHistoryAll($ipid);
				$lastHistoryDate = end($historyvv);

				if($lastHistoryDate['date'] == $patientinfo['vollversorgung_date'] && $lastHistoryDate['date_type'] == 1)
				{
					//update  count%2=1
					$cust = Doctrine::getTable('VollversorgungHistory')->findOneByIpidAndDateAndDateType($ipid, $patientinfo['vollversorgung_date'], '1');
					$cust->date = $begin_date;
					$cust->save();
					$vollhistoryid = $cust->id;
				}
				else
				{
					//insertnew count%2=0
					$vollhistory = new VollversorgungHistory();
					$vollhistory->ipid = $ipid;
					$vollhistory->user_id = $logininfo->userid;
					$vollhistory->date = $begin_date;
					$vollhistory->date_type = "1"; //1 =add voll 2- dismiss voll
					$vollhistory->save();
					$vollhistoryid = $vollhistory->id;

					//SEND MESSAGE
					$Tr = new Zend_View_Helper_Translate();
					$patientmaster = new PatientMaster();
					$allpatientinfo = $patientmaster->getMasterData($decid, 0);
					$patname = $allpatientinfo['first_name'] . ' ' . $allpatientinfo['last_name'];

					$message_entry = "Vollversorgung\n";
					$message_entry .= 'Für  den/die Patient/in ' . $patname . ' wurde die Vollversorgung begonnen.';

					$messages = new Messages();
					$wlvollversorgung_notification = $messages->wlvollversorgung_notification($_REQUEST['id'], $ipid);
				}
			}


			if(strlen($_POST['end_date']) > 0)
			{
				// close vollversorgung status and date in	PatientMaster
				$custpm = Doctrine::getTable('PatientMaster')->find($decid);
				$custpm->vollversorgung = 0;
				$custpm->vollversorgung_date = "0000-00-00 00:00:00";
				$custpm->save();

				// close vollversorgung period in VollversorgungHistory
				$vollhistory = new VollversorgungHistory();
				$vollhistory->ipid = $ipid;
				$vollhistory->user_id = $logininfo->userid;
				$vollhistory->date = date("Y-m-d H:i:s", strtotime($_POST['end_date']));
				$vollhistory->date_type = "2"; //1 =add voll 2- dismiss voll
				$vollhistory->save();
			}
// 		}

			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['cityofclient'] = $this->view->cityofclient;

				if(strlen($post['start_date']) > 0)
				{
					$start = date('Y-m-d H:i:s', strtotime($post['start_date']));

					if(strlen($post['end_date']) > 0)
					{
						$end = date('Y-m-d H:i:s', strtotime($post['end_date']));
					}
					else
					{
						$end = date('Y-m-d H:i:s');
					}
				}

				if($start && $end)
				{
					$statusvolldate_pdf = $patientmaster->getDaysDiff($start, $end);
				}

				$post['nr'] = $statusvolldate_pdf;
				$post['kv_header']['patientname'] = $_POST['kv_header']['patientname'];

				$this->generatePdfNew(3, $post, 'Anlage4awlx', "anlage4awlxpdf.html");
			}
		}

		
		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function specialistsAction()
		{
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->patid = $_REQUEST['id'];

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $userid, 'canedit');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			if($_REQUEST['decid'] > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');

				if(!$returnadd)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}
				
				$q = Doctrine_Query::create()
					->update('PatientSpecialists')
					->set('isdelete','?', 1)
					->where('ipid = ?', $ipid)
					->andwhere("sp_id= ?", $_REQUEST['decid']);
				$q->execute();

				$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
				exit;
			}

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ######################################################### */

			//get client specialists types
			$specialists_types = new SpecialistsTypes();
			$sp_types = $specialists_types->get_specialists_types($clientid);

			foreach($sp_types as $k_sp => $v_sp)
			{
				$specialists_types_arr[$v_sp['id']] = $v_sp['name'];
			}

			$this->view->specialists_types = $specialists_types_arr;

			if($this->getRequest()->isPost())
			{
				$a_post = $_POST;
				$pmaster_form = new Application_Form_PatientMaster();

				if($pmaster_form->validateSpecialist($a_post))
				{
//				print_r($a_post);exit;
					$specialists_form = new Application_Form_Specialists(
					    array("_patientMasterData" => $patientmaster->get_patientMasterData())
				    );
					
					
					$specialist_info = $specialists_form->InsertFromTabData($a_post);
					$a_post['hidd_specialist_id'] = $specialist_info->id;


					if($_REQUEST['sp_id'] > 0)
					{
						if($_REQUEST['sp_id'] == $a_post['hidd_specialist_id'])
						{
							$q = Doctrine_Query::create()
								->update('PatientSpecialists')
								->set('comment', '?', $a_post['specialist_comment'])
								->where('sp_id= ?', $_REQUEST['sp_id'])
								->andWhere('ipid= ?', $ipid);
							$q->execute();
						}
						else
						{
							$q = Doctrine_Query::create()
								->update('PatientSpecialists')
								->set('sp_id','?', $a_post['hidd_specialist_id'])
								->set('comment', '?',$a_post['specialist_comment'])
								->where('sp_id= ?', $_REQUEST['sp_id'])
								->andWhere('ipid= ?', $ipid);
							$q->execute();
						}
					}
					else
					{
						$sp_new = new PatientSpecialists();
						$sp_new->ipid = $ipid;
						$sp_new->sp_id = $a_post['hidd_specialist_id'];
						$sp_new->comment = $a_post['specialist_comment'];
						$sp_new->isdelete = "0";
						$sp_new->save();
					}
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");

					if($_REQUEST['noredir'] != 1)
					{
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_REQUEST['id']);
					}
					else
					{
						echo json_encode(array("success" => "1", "specialistidInserted" => $a_post['hidd_specialist_id']));
						exit;
					}
				}
				else
				{
					$pmaster_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			if($_REQUEST['sp_id'])
			{
				$pat_sp_id = $_REQUEST['sp_id'];
				$spec = new PatientSpecialists();
				$spec_array = $spec->get_patient_specialist($ipid, $pat_sp_id);
				$this->retainValues($spec_array);
			}
		}

		public function anlage4bAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();

			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$quarter[1] = array("1", "2", "3");
			$quarter[2] = array("4", "5", "6");
			$quarter[3] = array("7", "8", "9");
			$quarter[4] = array("10", "11", "12");

			//generate years from 2010
			for($a = 2010; $a <= date("Y"); $a++)
			{
				$years[] = $a;
			}

			//construct quarter arrays for all years for select (limit q3 in 2010 and current year-quarter)
			foreach($years as $year)
			{
				if($year == "2010")
				{
					$minQu = 3;
				}
				else
				{
					$minQu = 1;
				}

				if($year == date("Y"))
				{
					for($i = 1; $i <= 4; $i++)
					{
						if(in_array(date("n"), $quarter[$i]))
						{
							$maxQu = $i;
						}
					}
				}
				else
				{
					$maxQu = 4;
				}
				for($qu = $minQu; $qu <= $maxQu; $qu++)
				{
					$period[$qu . "." . $year] = str_pad($qu, 2, "0", STR_PAD_LEFT) . "/" . $year;
				}
			}
			$this->view->periods = $period;

			//check if we have a period in request else get curent quarter
			if(strlen($_REQUEST['period']) == 0)
			{
				//get curent quarter
				for($i = 1; $i <= 4; $i++)
				{
					if(in_array(date("n"), $quarter[$i]))
					{
						$quarterFinal = $i;
						$yearFinal = date("Y"); //current year
					}
				}
			}
			else
			{
				//get selected period
				$selectedPeriod = trim($_REQUEST['period']);
				$selPeriod = explode(".", $selectedPeriod);
				$quarterFinal = $selPeriod[0];
				$yearFinal = $selPeriod[1];
			}

			$selectedPeriodarray = array("0" => "" . $quarterFinal . "." . $yearFinal . "");
			$this->view->selectedPeriodArray = $selectedPeriodarray;

			$q[0] = $quarterFinal;
			$y[0] = $yearFinal;

			$this->view->currentQ = $quarterFinal;
			$this->view->currentY = $yearFinal;
			$viewdata['currentQ'] = $quarterFinal;
			$viewdata['currentY'] = $yearFinal;

			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			//query gel all client patients that are not standby
			$clientpatsnonstandby = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping e')
				->leftJoin('e.PatientMaster p')
				->where('e.ipid = p.ipid')
				->andWhere('e.clientid = ?', $clientid )
				->andWhere('p.isstandby=0')
				->andWhere('p.isdelete = 0')
				->andWhere('p.isstandbydelete = 0');
			$clientpatsnonstandbyarr = $clientpatsnonstandby->fetchArray();

			foreach($clientpatsnonstandbyarr as $patientnonstandby)
			{
				$clientIpidsNonStbyArr[] = $patientnonstandby['ipid'];
			}

			//query get all clients patients
			$clientpats = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping')
				->where('clientid = ?', $clientid);
			$clientpatientsipidarr = $clientpats->fetchArray();

			foreach($clientpatientsipidarr as $patient)
			{
				$clientipidsArr[] = $patient['ipid'];
			}
			if(empty($clientipidsArr))
			{
				$clientipidsArr[] = '999999999';
			}

			//query get all client private patients
			$ppC = Doctrine_Query::create()
				->select('*')
				->from('PatientHealthInsurance')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('privatepatient = "1"');
			$pPatientsC = $ppC->fetchArray();

			foreach($pPatientsC as $PrivatePatient)
			{
				$privPatient[] = $PrivatePatient['ipid'];
			}
			if(empty($privPatient))
			{
				$privPatient[] = '99999999';
			}

			//query get all client  patients with L92011
			$cl_patients_lentry = Doctrine_Query::create()
				->select("ipid")
				->from('PatientCourse')
				->whereIn('ipid', $clientipidsArr)
				->andwhere("wrong !=1 and course_type='" . addslashes(Pms_CommonData::aesEncrypt('L')) . "' ")//Ancuta 08.04.2020 MYSQL GONE Bug fix [use wrong instead of wrongcomment]
				->andwhere('AES_DECRYPT(course_title,"' . Zend_Registry::get('salt') . '")   LIKE "%92011%" ')
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$cl_patients_lentry_array = $cl_patients_lentry->fetchArray();

			foreach($cl_patients_lentry_array as $clpatientl)
			{
				$LentryPatients[] = $clpatientl['ipid'];
			}
			if(count($LentryPatients) == 0)
			{
				$LentryPatients[0] = "999999";
			}
			$clientipidsArr = array_diff($clientipidsArr, $LentryPatients);

			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $patientmaster->getDaysInBetween($period['start'][0], $period['end'][0]);

			//query get all active patients in selected period
// 		$active_qipids = $this->getActivePatients($q, $y);
			##########################################################
			// get active patients - new version
			$period_start_active = date('Y-m-d', strtotime($period['start'][0]));
			$period_end_active = date('Y-m-d', strtotime($period['end'][0]));
			$active_qipids_array = Pms_CommonData::patients_active("*", $clientid, array("0" => array('start' => $period_start_active, 'end' => $period_end_active)));

			foreach($active_qipids_array as $pipid => $pdetails)
			{
				$active_qipids[] = $pdetails['ipid'];
			}
			##########################################################

			$active_qipids = array_diff($active_qipids, $LentryPatients);

			// all client patients that are not PV
			$npClientsIpidsArr = array_values(array_diff($clientipidsArr, $privPatient));

			if(empty($npClientsIpidsArr))
			{
				$npClientsIpidsArr[] = '99999999';
			}

			// all active, non private patients of client
			$npClientsIpidsActive = array_values(array_intersect($active_qipids, $npClientsIpidsArr));
			$npClientsIpidsActive = array_unique($npClientsIpidsActive);

			// all avtive patients No PV and No L92011
			$clientPatActiveArr = array_values(array_diff($npClientsIpidsActive, $LentryPatients)); // remove patients with L92011 activ in report period
			$clientpatarr = array_unique($clientPatActiveArr);

			if(count($clientpatarr) == 0)
			{
				$clientpatarr[] = '99999999999999';
			}

			//query get all standby patients or delete or standbydelete
			$clientpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('isdelete="1" OR isstandby=1 OR isstandbydelete="1"');
			$standbypatients = $clientpatients->fetchArray();

			$standbypatientsstr = "'99999999'";
			$comma = ",";
			foreach($standbypatients as $kst => $patientst)
			{
				$st_del_patients[] = $patientst['ipid'];
				$standbypatientsstr .= $comma . "'" . $patientst['ipid'] . "'";
				$comma = ",";
			}
			if(count($st_del_patients) == 0)
			{
				$st_del_patients[] = '99999999999999';
			}

			//all active patients, no PV, no L90211, no standby
			$ALL_patients = array_values(array_diff($clientpatarr, $st_del_patients));
			//all active patients, no PV, no L90211, no standby
			$ALL_patients = array_values(array_diff($ALL_patients, $LentryPatients));
			$ALL_patients = array_unique($ALL_patients);

			// Palliativ-Falle Gesamt // NOT USED
			$this->view->patientsamountvv = count($ALL_patients);
			$viewdata['patientsamountvv'] = count($ALL_patients);

			//active patients in period with no pv and no L92011
			$clientpatarr = array_unique($ALL_patients);

			//query get all patients admited in period from active patients
			$clientAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				//		->whereIn('ipid', $clientpatarr)
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('isdelete="0"')
				->andWhere('isstandby="0"')
				->andWhere('isstandbydelete="0"')
				->andWhere('admission_date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmission = $clientAdmissionPatients->fetchArray();

			$clientPatientsAdmissionipids[] = '999999999999';
			foreach($clientPatientsAdmission as $patient_admission)
			{
				$clientPatientsAdmissionipids[] = $patient_admission['ipid'];
			}

			// get discharge method for patients dead
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid = " . $clientid)
				->andwhere("abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA'")
				->andwhere('isdelete = 0');
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}

			$todpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge ')
				->whereIn('ipid', $clientPatientsAdmissionipids)
				->andWhereIn('discharge_method', $dm_deadfinal)
				->andWhere('isdelete = 0');
			$todpatientarray = $todpatients->fetchArray();

			$patient_age_date = array();
			if($todpatientarray)
			{
				foreach($todpatientarray as $key => $todpatient)
				{
					$patient_age_date[$todpatient['ipid']] = date("Y-m-d", strtotime($todpatient['discharge_date']));
				}
			}


			foreach($clientPatientsAdmission as $patient)
			{
				$end_date_patient = '';
				if(array_key_exists($patient['ipid'], $patient_age_date))
				{
					$end_date_patient = $patient_age_date[$patient['ipid']];
				}
				else
				{
					$end_date_patient = date("Y-m-d", time());
				}
				$patient_age[$patient['ipid']] = $patientmaster->GetAge($patient['birthd'], $end_date_patient, true);


				$admisionPatients[] = $patient['ipid'];
			}
			if(count($admisionPatients) == 0)
			{
				$admisionPatients[0] = "999999";
			}

			//query get all patients re-admited in period from active patients
			$clientReAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientReadmission')
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('date_type = "1"')
				->andWhere('date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmissions = $clientReAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmissions as $patientR)
			{
				$reAdmisionPatients[] = $patientR['ipid'];
			}
			if(count($reAdmisionPatients) == 0)
			{
				$reAdmisionPatients[0] = "999999";
			}

			//3. preluare admisii pacienti cu metoda lu pestea
			$b_patient_admisions = $patientmaster->getTreatedDaysRealMultiple($clientIpidsNonStbyArr);

			$ipids_readmision_outisde[] = '9999999';

			foreach($b_patient_admisions as $k_admision => $v_admision)
			{
				if(!Pms_CommonData::isintersected(
						strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime($period['start'][0]), strtotime($period['end'][0])))
				{
					$ipids_readmision_outisde[] = $k_admision;
				}
			}

			$AdmReadmPatients = array_merge($admisionPatients, $clientIpidsNonStbyArr);
			$AdmReadmPatients = array_merge($AdmReadmPatients, $reAdmisionPatients);
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $privPatient));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $ipids_readmision_outisde));
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));

			// get patients hospiz days
			$hospiz_days = $this->get_patients_hospiz_days($AdmReadmPatients, $clientid, true);

			foreach($AdmReadmPatients as $k_adm_pat => $pat_ipid)
			{
				if(!empty($patient_age[$pat_ipid]) && $patient_age[$pat_ipid] < 18)
				{
					$bellow_18years[] = $pat_ipid;
				}

				if(in_array(date('Y-m-d', strtotime($b_patient_admisions[$pat_ipid]['admission_date'])), $hospiz_days[$pat_ipid]))
				{
					$hospiz_patients[] = $pat_ipid;
				}
				else
				{
					$non_hospiz_patients[] = $pat_ipid;
				}
			}

			// L entry does not count for anlage 4b
			if(count($non_hospiz_patients) == 0)
			{
				$non_hospiz_patients[] = '999999';
			}
			if(count($hospiz_patients) == 0)
			{
				$hospiz_patients[] = '999999';
			}

			if(count($bellow_18years) == 0)
			{
				$bellow_18years[] = '999999';
			}

			/* ###################################################################################################### */
			/* #################### Neu teilnehmende GKV-Patienten ambulant  ######################################## */
			/* ###################################################################################################### */
			// First time admissioned patient who are NOT admissioned in HOSPIZ & who are NOT privatpatient
			if(count($non_hospiz_patients) == 1 && in_array('999999', $non_hospiz_patients))
			{
				$this->view->noprivatepatientadmission = "0";
				$viewdata['noprivatepatientadmission'] = "0";
			}
			else
			{
				$this->view->noprivatepatientadmission = count($non_hospiz_patients); // Neu teilnehmende GKV-Patienten ambulant   // THIS IS NEEDE FOR THE NEW
				$viewdata['noprivatepatientadmission'] = count($non_hospiz_patients);
			}

			/* ###################################################################################################### */
			/* ####################   Neu teilnehmende GKV-Patienten Hospiz  ######################################## */
			/* ###################################################################################################### */
			//First time admissioned patient who ARE admissioned in HOSPIZ & who are NOT privatpatient
			if(count($hospiz_patients) == 1 && in_array('999999', $hospiz_patients))
			{
				$this->view->hospiz_patients = "0";
				$viewdata['hospiz_patients'] = "0";
			}
			else
			{
				$this->view->hospiz_patients = count($hospiz_patients);
				$viewdata['hospiz_patients'] = count($hospiz_patients);
			}

			/* ###################################################################################################### */
			/* ###############   Davon Anzahl Kinder- und Jugendliche (< 18 Jahre)   ################################ */
			/* ###################################################################################################### */
			//ammount of row 1 & 2 which are age below 18
			if(count($bellow_18years) == 1 && in_array('999999', $bellow_18years))
			{
				$this->view->bellow_18years = "0";
				$viewdata['bellow_18years'] = "0";
			}
			else
			{
				$this->view->bellow_18years = count($bellow_18years);
				$viewdata['bellow_18years'] = count($bellow_18years);
			}

			if($_REQUEST['dbgx'] == 1)
			{
				print_r("Hospiz days of patients\n");
				print_r($hospiz_days);
				print_r("\nALL active ipids in period\n");
				print_r($active_qipids);
				print_r("\n Neu teilnehmende GKV-Patienten ambulant <-- First time admissioned patient who are NOT admissioned in HOSPIZ & who are NOT privatpatient \n");
				print_r($non_new_hospiz_patients);
				print_r("\n Neu teilnehmende GKV-Patienten Hospiz <-- First time admissioned patient who ARE admissioned in HOSPIZ & who are NOT privatpatient \n");
				print_r($new_hospiz_patients);
				print_r("\nAll Private patients of client\n");
				print_r($privPatient);
				print_r("\nAll l92011 patients of client\n");
				print_r($LentryPatients);
				print_r("\nBelow18\n");
				print_r($bellow_18years);
				print_r("\nPatient Age\n");
				print_r($patient_age);
				print_r("\nAdmission Patient in Period\n");
				print_r($clientPatientsAdmission);
				exit;
			}


			if($_REQUEST['dbg'] == 1)
			{
				print_r("ALL active ipids in period\n");
				print_r($active_qipids);
				print_r("Pacienti admisi din PM\n");
				print_r($admisionPatients);
				print_r("\nPacienti admisi din PRA\n");
				print_r($reAdmisionPatients);
				print_r("\n Neu teilnehmende GKV-Patienten ambulant <-- First time admissioned patient who are NOT admissioned in HOSPIZ & who are NOT privatpatient \n");
				print_r($non_new_hospiz_patients);
				print_r("\n Neu teilnehmende GKV-Patienten Hospiz <-- First time admissioned patient who ARE admissioned in HOSPIZ & who are NOT privatpatient \n");
				print_r($new_hospiz_patients);
				print_r("\nAll Private patients of client\n");
				print_r($privPatient);
				print_r("\nAll l92011 patients of client\n");
				print_r($LentryPatients);
				print_r("\nAll STANDBY patients of client\n");
				print_r($st_del_patients);
				print_r("\nAll non privat patients of client\n");
				print_r($npClientsIpidsArr);
				print_r("\nAll non privat patients of client, active in period\n");
				print_r($npClientsIpidsActive);
				print_r("\nPalliativ-Falle Gesamt\n");
				print_r($clientpatarr);
			}

			//query get all discharge method DEAD of client // PRIMUL QUERY
			$dm = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->Where('isdelete = 0')
				->andWhere('clientid = ' . $logininfo->clientid)
				->andWhere('abbr IN ("TOD", "TODNA")');
			$dischargemethods = $dm->fetchArray();

			if(count($dischargemethods) > 0)
			{
				foreach($dischargemethods as $dmkey => $dmvalue)
				{
					$dischargeids[] = $dmvalue['id'];
				}
			}

			if(count($dischargeids) == 1)
			{
				$dischargemethodids = $dischargeids[0];
			}
			else if(count($dischargeids) > 0 && count($dischargeids) != 1)
			{
				$dischargemethodids = implode(",", $dischargeids);
			}

			$quarter_start_m = $quarter[$quarterFinal][0];
			$quarter_end_m = end($quarter[$quarterFinal]);

			$quarter_start_day = strtotime("{$y[0]}-{$quarter_start_m}-01");
			$quarter_end_day = strtotime("{$y[0]}-{$quarter_end_m}-01");
			$quarter_end_day = strtotime('-1 second', strtotime('+1 month', $quarter_end_day));

			$quarter_start_first_dayy = date("Y-m-d H:i:s", $quarter_start_day);
			$quarter_end_last_dayy = date("Y-m-d H:i:s", $quarter_end_day);

			if($quarterFinal != '4')
			{
				$prev_year = ($y[0] - 1);
				$this->view->median_year = $prev_year;
				$viewdata['median_year'] = $prev_year;
				$year_start_first_day = strtotime("{$prev_year }-01-01");
				$year_end_first_day = strtotime("{$prev_year}-12-01");
				$year_end_last_day = strtotime('-1 second', strtotime('+1 month', $year_end_first_day));

				$year_start_day = date("Y-m-d H:i:s", $year_start_first_day);
				$year_end_day = date("Y-m-d H:i:s", $year_end_last_day);
			}
			else
			{
				$this->view->median_year = $y[0];
				$viewdata['median_year'] = $y[0];
				$year_start_first_day = strtotime("{$y[0]}-01-01");
				$year_end_first_day = strtotime("{$y[0]}-12-01");
				$year_end_last_day = strtotime('-1 second', strtotime('+1 month', $year_end_first_day));

				$year_start_day = date("Y-m-d H:i:s", $year_start_first_day);
				$year_end_day = date("Y-m-d H:i:s", $year_end_last_day);
			}
			//     ISPC-2188 WL Ancuta - 25.07.2018  overwrite
			$this->view->median_year = str_pad($quarterFinal, 2, "0", STR_PAD_LEFT).'/'.$yearFinal;
			$viewdata['median_year'] = str_pad($quarterFinal, 2, "0", STR_PAD_LEFT).'/'.$yearFinal;
				
				

			//query get all DEAD patients with discharge day < = quarter_start_first_day
			$discharged_pat_inquarter = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->where('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date <= "' . $quarter_start_first_dayy . '"');
			$quarter_dead_pat = $discharged_pat_inquarter->fetchArray();

			$dq_ipids[] = '999999';
			foreach($quarter_dead_pat as $dq_key => $dq_val)
			{
				$dq_ipids[] = $dq_val['ipid'];
			}

			$vvhistory = new VollversorgungHistory();
			$vvStartDates = $vvhistory->getVollversorgungHistory($clientpatarr, "1", $dq_ipids);
			$vvEndDates = $vvhistory->getVollversorgungHistory($clientpatarr, "2", $dq_ipids);

			foreach($vvStartDates as $ipid => $startDates)
			{
				foreach($startDates as $keys => $start)
				{
					$vvPeriods[$ipid]['start'][] = $start['date'];
					$vvStart = $start['date'];

					if(empty($vvEndDates[$ipid][$keys]['date']))
					{
						$vvPeriods[$ipid]['end'][] = date("Y-m-d H:i:s");
						$vvEnd = date("Y-m-d H:i:s");
					}
					else
					{
						$vvPeriods[$ipid]['end'][] = $vvEndDates[$ipid][$keys]['date'];
						$vvEnd = $vvEndDates[$ipid][$keys]['date'];
					}

					if(Pms_CommonData::isintersected(strtotime($period['start'][0]), strtotime($period['end'][0]), strtotime($vvStart), strtotime($vvEnd)))
					{
						$finalArray[] = $ipid;
					}
				}
			}

			$finalArray = array_diff($finalArray, $LentryPatients);
			$allVvArray = array_values(array_unique($finalArray));

			$this->view->versorgungstatus = count($allVvArray); // Vollversorgung ohne Pallicare-Versorgung
			$viewdata['versorgungstatus'] = count($allVvArray);

			if($_REQUEST['dbg'] == 1)
			{
				print_r("\nVollversorgung ohne Pallicare-Versorgung\n");
				print_r($allVvArray);
			}

			$active_cond = $this->getTimePeriod($q, $y);
			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $patientmaster->getDaysInBetween($period['start'][0], $period['end'][0]);

			//Get client locations START
			$locationTypesArray = Pms_CommonData::getDischargeLocationTypes();

			//query get client discharge locations
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type != 0 ')
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$discharge_loc_array = $dl->fetchArray();

			foreach($discharge_loc_array as $kl => $dl_values)
			{
				$dischargelocations[$dl_values['id']] = $dl_values;
				$location2type[$dl_values['id']] = $dl_values['type'];
			}

			$allpatients = $this->getAllClientPatients($logininfo->clientid);
			foreach($allpatients as $allpatient_item)
			{
				$allpatients_str .= '"' . $allpatient_item['ipid'] . '",';
				$allpatients_arr[] = $allpatient_item['ipid'];
			}

			$mdischarged = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $allpatients_arr)
				->andwhere('discharge_method IN (' . $dischargemethodids . ')')
// 				->andWhere('discharge_date BETWEEN "' . $year_start_day . '" and "' . $year_end_day . '"');
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"');
			$median_dischargedpatarr = $mdischarged->fetchArray();

			$discharged = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andWhereIn('isdelete = 0')
				->andwhere('discharge_method IN (' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"');
			$dischargedpatarr = $discharged->fetchArray();

			//Betreuungszeitraum in Tagen (Median) <--- the COMPLETE DoT of all DIED patients in that quartal. MEDIAN.
			$deadipids = array();
			foreach($dischargedpatarr as $d_key => $deadpat)
			{
				$patients2locations[$location2type[$deadpat['discharge_location']]][] = $deadpat['ipid'];

				if(is_array($deadpat))
				{
					$deadipids[] = $deadpat['ipid'];
				}
				else
				{
					$deadipids[] = $deadpat;
				}
			}
			
			$mdeadipids = array();
			foreach($median_dischargedpatarr as $md_key => $mdeadpat)
			{
				if(is_array($mdeadpat))
				{
					$mdeadipids[] = $mdeadpat['ipid'];
				}
				else
				{
					$mdeadipids[] = $mdeadpat;
				}
			}

			$deadipids = array_values(array_diff($deadipids, $privPatient));
			$deadipids = array_values(array_diff($deadipids, $LentryPatients));
			$deadipids = array_unique($deadipids);

			$mdeadipids = array_values(array_diff($mdeadipids, $privPatient));
			$mdeadipids = array_values(array_diff($mdeadipids, $LentryPatients));
			$mdeadipids = array_unique($mdeadipids);

			if(count($deadipids) == 1 && in_array('999999', $deadipids))
			{
				$this->view->alldeadpatients = "0";
				$viewdata['alldeadpatients'] = "0";
			}
			else
			{
				$this->view->alldeadpatients = count($deadipids); //  Sterbeort Verstorbene Gesamt
				$viewdata['alldeadpatients'] = count($deadipids);
			}

			if($_REQUEST['dbg'] == 1)
			{
				print_r("\nPacienti dead in quarter\n");
				print_r($deadipids);
				exit;
			}

// 		$treatmentdaysdatadead = $patientmaster->getTreatedDaysRealMultiple($mdeadipids, false);
// 		foreach($treatmentdaysdatadead as $patientTreatmentIpid => $patientTreatmentData)
// 		{
// 			$median_arr[] = $patientTreatmentData['realActiveDays'];
// 		}
			#############################################
            $median = 0;
            if(!empty($mdeadipids))
            {
    			$period_start_sec = date('Y-m-d',strtotime($quarter_start_first_dayy));
    			$period_end_sec = date('Y-m-d',strtotime($quarter_end_last_dayy));
//     			$period_start_sec = "2009-01-01";
//     			$period_end_sec = date("Y-m-d");
    			$conditions_sec['periods'] = array("0" => array('start' => $period_start_sec, 'end' => $period_end_sec));
    			$conditions_sec['client'] = $clientid;
    			$conditions_sec['ipids'] = $mdeadipids;
    
    			$dead_patients_details = Pms_CommonData::patients_days($conditions_sec);
    			foreach($dead_patients_details as $patient_ipid => $patient_data)
    			{
    				$median_arr[] = $patient_data['treatment_days_no'];
    				if($_REQUEST['new'])
    				{
    					$median_arr_dbg[$patient_ipid] = $patient_data['treatment_days_no'];
    				}
    			}
    			#############################################
    			$median = Pms_CommonData::calculate_median($median_arr);
            }
			if($_REQUEST['dbg'] == 2)
			{
				print_r("\n Discharged \n");
				print_r($dischargedpatarr);
				print_r("\n Private \n");
				print_r($privPatient);
				print_r("\n Dead #1\n");
				print_r($deadPatients);
				print_r("\n Dead #2 \n");
				print_r($deadipids);
				print_r("\n Median Dead #3 \n");
				print_r($mdeadipids);
				print_r("\n Median #1 \n");
				print_r($median_arr);
				print_r("\n Discharge \n");
				print_r($dischargemethodids);
				exit;
			}

			$this->view->averagetreatmentdays = number_format($median, 2); // Betreuungszeitraum in Tagen (Median)
			$viewdata['averagetreatmentdays'] = number_format($median, 2);
			//get all dead patients in zu house location
			$this->view->wohnungdeadpatients = count($patients2locations['1']) +  count($patients2locations['8']); // location type = 1 && location type 8
			$viewdata['wohnungdeadpatients'] = count($patients2locations['1']) +  count($patients2locations['8']);
			//get all dead patients in Altenheim/Pflegeheim location
			$this->view->altenheimdeadpatients = count($patients2locations['4']); // location type = 4
			$viewdata['altenheimdeadpatients'] = count($patients2locations['4']);
			//get all dead patients in Hospiz location
			$this->view->hospizdeadpatients = count($patients2locations['3']); // location type = 3
			$viewdata['hospizdeadpatients'] = count($patients2locations['3']);
			//get all dead patients in hospital location
			$this->view->krankenhausdeadpatients = count($patients2locations['2']); // location type = 2
			$viewdata['krankenhausdeadpatients'] = count($patients2locations['2']);
			//get all dead patients in palliativstation location
			$this->view->palliativdeadpatients = count($patients2locations['5']); // location type = 5
			$viewdata['palliativdeadpatients'] = count($patients2locations['5']);

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$this->view->clientcity = $clientdata[0]['city'];
			$this->view->client_name = $clientdata[0]['team_name'];
			$this->view->client_bsnr = $clientdata[0]['betriebsstattennummer'];
			$viewdata['client_name'] = $clientdata[0]['team_name'];
			$viewdata['clientcity'] = $clientdata[0]['city'];
			$viewdata['client_bsnr'] = $clientdata[0]['betriebsstattennummer'];

			$this->view->todaydate = date("d.m.Y");
			$viewdata['todaydate'] = date("d.m.Y");

			if(strlen($_POST['btnsave']) > 0)
			{
				$this->generateanalagethreePdf(3, $viewdata, 'Anlage4b', "anlage4b.html");
			}
		}

		public function reportanlage4bAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();

			$quarter[1] = array("1", "2", "3");
			$quarter[2] = array("4", "5", "6");
			$quarter[3] = array("7", "8", "9");
			$quarter[4] = array("10", "11", "12");

			//generate years from 2010
			for($a = 2010; $a <= date("Y"); $a++)
			{
				$years[] = $a;
			}

			//construct quarter arrays for all years for select (limit q3 in 2010 and current year-quarter)
			foreach($years as $year)
			{
				if($year == "2010")
				{
					$minQu = 3;
				}
				else
				{
					$minQu = 1;
				}

				if($year == date("Y"))
				{
					for($i = 1; $i <= 4; $i++)
					{
						if(in_array(date("n"), $quarter[$i]))
						{
							$maxQu = $i;
						}
					}
				}
				else
				{
					$maxQu = 4;
				}
				for($qu = $minQu; $qu <= $maxQu; $qu++)
				{
					$period[$qu . "." . $year] = str_pad($qu, 2, "0", STR_PAD_LEFT) . "/" . $year;
				}
			}
			$this->view->periods = $period;

			//check if we have a period in request else get curent quarter
			if(strlen($_REQUEST['period']) == 0)
			{
				//get curent quarter
				for($i = 1; $i <= 4; $i++)
				{
					if(in_array(date("n"), $quarter[$i]))
					{
						$quarterFinal = $i;
						//current year
						$yearFinal = date("Y");
					}
				}
			}
			else
			{
				//get selected period
				$selectedPeriod = trim($_REQUEST['period']);
				$selPeriod = explode(".", $selectedPeriod);
				$quarterFinal = $selPeriod[0];
				$yearFinal = $selPeriod[1];
			}

			$selectedPeriodarray = array("0" => "" . $quarterFinal . "." . $yearFinal . "");
			$this->view->selectedPeriodArray = $selectedPeriodarray;

			$q[0] = $quarterFinal;
			$y[0] = $yearFinal;

			$this->view->currentQ = $quarterFinal;
			$this->view->currentY = $yearFinal;
			$viewdata['currentQ'] = $quarterFinal;
			$viewdata['currentY'] = $yearFinal;

			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			//query gel all client patients that are not standby
			$clientpatsnonstandby = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping e')
				->leftJoin('e.PatientMaster p')
				->where('e.ipid = p.ipid')
				->andWhere('e.clientid = ' . $clientid . '')
				->andWhere('p.isstandby=0')
				->andWhere('p.isdelete = 0')
				->andWhere('p.isstandbydelete = 0');
			$clientpatsnonstandbyarr = $clientpatsnonstandby->fetchArray();

			foreach($clientpatsnonstandbyarr as $patientnonstandby)
			{
				$clientIpidsNonStbyArr[] = $patientnonstandby['ipid'];
			}

			//query get all clients patients
			$clientpats = Doctrine_Query::create()
				->select('ipid')
				->from('EpidIpidMapping')
				->where('clientid = ' . $clientid . '');
			$clientpatientsipidarr = $clientpats->fetchArray();

			foreach($clientpatientsipidarr as $patient)
			{
				$clientipidsArr[] = $patient['ipid'];
			}
			if(empty($clientipidsArr))
			{
				$clientipidsArr[] = '999999999';
			}

			//query get all client private patients
			$ppC = Doctrine_Query::create()
				->select('*')
				->from('PatientHealthInsurance')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('privatepatient = "1"');
			$pPatientsC = $ppC->fetchArray();

			foreach($pPatientsC as $PrivatePatient)
			{
				$privPatient[] = $PrivatePatient['ipid'];
			}
			if(empty($privPatient))
			{
				$privPatient[] = '99999999';
			}

			//query get all client  patients with L92011
			$cl_patients_lentry = Doctrine_Query::create()
				->select("ipid")
				->from('PatientCourse')
				->whereIn('ipid', $clientipidsArr)
				->andwhere("wrong !=1 and course_type='" . addslashes(Pms_CommonData::aesEncrypt('L')) . "' ")//Ancuta 08.04.2020 MYSQL GONE Bug fix [use wrong instead of wrongcomment]
				->andwhere('AES_DECRYPT(course_title,"' . Zend_Registry::get('salt') . '")   LIKE "%92011%" ')
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$cl_patients_lentry_array = $cl_patients_lentry->fetchArray();

			foreach($cl_patients_lentry_array as $clpatientl)
			{
				$LentryPatients[] = $clpatientl['ipid'];
			}
			if(count($LentryPatients) == 0)
			{
				$LentryPatients[0] = "999999";
			}

			$clientipidsArr = array_diff($clientipidsArr, $LentryPatients);

			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $patientmaster->getDaysInBetween($period['start'][0], $period['end'][0]);


			//query get all active patients in selected period
// 		$active_qipids = $this->getActivePatients($q, $y);
			##########################################################
			// get active patients - new version
			$period_start_active = date('Y-m-d', strtotime($period['start'][0]));
			$period_end_active = date('Y-m-d', strtotime($period['end'][0]));
			$active_qipids_array = Pms_CommonData::patients_active("*", $clientid, array("0" => array('start' => $period_start_active, 'end' => $period_end_active)));

			foreach($active_qipids_array as $pipid => $pdetails)
			{
				$active_qipids[] = $pdetails['ipid'];
			}
			##########################################################

			$active_qipids = array_diff($active_qipids, $LentryPatients);

			//all client patients that are not PV
			$npClientsIpidsArr = array_values(array_diff($clientipidsArr, $privPatient));

			if(empty($npClientsIpidsArr))
			{
				$npClientsIpidsArr[] = '99999999';
			}

			//all active, non private patients of client
			$npClientsIpidsActive = array_values(array_intersect($active_qipids, $npClientsIpidsArr));
			$npClientsIpidsActive = array_unique($npClientsIpidsActive);


			//all avtive patients No PV and No L92011
			$clientPatActiveArr = array_values(array_diff($npClientsIpidsActive, $LentryPatients)); // remove patients with L92011 activ in report period
			$clientpatarr = array_unique($clientPatActiveArr);

			if(count($clientpatarr) == 0)
			{
				$clientpatarr[] = '99999999999999';
			}

			//query get all standby patients or delete or standbydelete
			$clientpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $clientipidsArr)
				->andWhere('isdelete="1" OR isstandby=1 OR isstandbydelete="1"');
			$standbypatients = $clientpatients->fetchArray();

			$standbypatientsstr = "'99999999'";
			$comma = ",";
			foreach($standbypatients as $kst => $patientst)
			{
				$st_del_patients[] = $patientst['ipid'];
				$standbypatientsstr .= $comma . "'" . $patientst['ipid'] . "'";
				$comma = ",";
			}

			if(count($st_del_patients) == 0)
			{
				$st_del_patients[] = '99999999999999';
			}

			//all active patients, no PV, no L90211, no standby
			$ALL_patients = array_values(array_diff($clientpatarr, $st_del_patients));
			//all active patients, no PV, no L90211, no standby
			$ALL_patients = array_values(array_diff($ALL_patients, $LentryPatients));
			$ALL_patients = array_unique($ALL_patients);
			//Palliativ-Falle Gesamt // NOT USED
			$this->view->patientsamountvv = count($ALL_patients);
			$viewdata['patientsamountvv'] = count($ALL_patients);
			//active patients in period with no pv and no L92011
			$clientpatarr = array_unique($ALL_patients);
			//query get all patients admited in period from active patients
			$clientAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('isdelete="0"')
				->andWhere('isstandby="0"')
				->andWhere('isstandbydelete="0"')
				->andWhere('admission_date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmission = $clientAdmissionPatients->fetchArray();

			$clientPatientsAdmissionipids[] = '999999999';
			foreach($clientPatientsAdmission as $patient_ipid)
			{
				$clientPatientsAdmissionipids[] = $patient_ipid['ipid'];
			}
			// get discharge method for patients dead
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid = " . $clientid)
				->andwhere("abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA'")
				->andwhere('isdelete = 0');
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}
			//get tod patients 
			$todpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge ')
				->whereIn('ipid', $clientPatientsAdmissionipids)
				->andWhereIn('discharge_method', $dm_deadfinal)
				->andWhere('isdelete = 0');
			$todpatientarray = $todpatients->fetchArray();

			$patient_age_date = array();
			if($todpatientarray)
			{
				foreach($todpatientarray as $key => $todpatient)
				{
					$patient_age_date[$todpatient['ipid']] = date("Y-m-d", strtotime($todpatient['discharge_date']));
				}
			}
			foreach($clientPatientsAdmission as $patient)
			{
				$end_date_patient = '';
				if(array_key_exists($patient['ipid'], $patient_age_date))
				{
					$end_date_patient = $patient_age_date[$patient['ipid']];
				}
				else
				{
					$end_date_patient = date("Y-m-d", time());
				}
				$patient_age[$patient['ipid']] = $patientmaster->GetAge($patient['birthd'], $end_date_patient, true);
				$admisionPatients[] = $patient['ipid'];
			}

			if(count($admisionPatients) == 0)
			{
				$admisionPatients[0] = "999999";
			}

			//query get all patients re-admited in period from active patients
			$clientReAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientReadmission')
				->whereIn('ipid', $clientIpidsNonStbyArr)
				->andWhere('date_type = "1"')
				->andWhere('date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmissions = $clientReAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmissions as $patientR)
			{
				$reAdmisionPatients[] = $patientR['ipid'];
			}

			if(count($reAdmisionPatients) == 0)
			{
				$reAdmisionPatients[0] = "999999";
			}

			//3. preluare admisii pacienti cu metoda lu pestea
			$b_patient_admisions = $patientmaster->getTreatedDaysRealMultiple($clientIpidsNonStbyArr);

			$ipids_readmision_outisde[] = '9999999';

			foreach($b_patient_admisions as $k_admision => $v_admision)
			{
				if(!Pms_CommonData::isintersected(
						strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime($period['start'][0]), strtotime($period['end'][0])))
				{
					$ipids_readmision_outisde[] = $k_admision;
				}
			}

			$AdmReadmPatients = array_merge($admisionPatients, $clientIpidsNonStbyArr);
			$AdmReadmPatients = array_merge($AdmReadmPatients, $reAdmisionPatients);
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $privPatient));
			$AdmReadmPatients = array_values(array_diff($AdmReadmPatients, $ipids_readmision_outisde));
			$AdmReadmPatients = array_values(array_unique($AdmReadmPatients));

			// get patients hospiz days
			$hospiz_days = $this->get_patients_hospiz_days($AdmReadmPatients, $clientid, true);

			foreach($AdmReadmPatients as $k_adm_pat => $pat_ipid)
			{
				if(!empty($patient_age[$pat_ipid]) && $patient_age[$pat_ipid] < 18)
				{
					$bellow_18years[] = $pat_ipid;
				}

				if(in_array(date('Y-m-d', strtotime($b_patient_admisions[$pat_ipid]['admission_date'])), $hospiz_days[$pat_ipid]))
				{
					$hospiz_patients[] = $pat_ipid;
				}
				else
				{
					$non_hospiz_patients[] = $pat_ipid;
				}
			}
			// L entry does not count for anlage 4b

			if(count($non_hospiz_patients) == 0)
			{
				$non_hospiz_patients[] = '999999';
			}
			if(count($hospiz_patients) == 0)
			{
				$hospiz_patients[] = '999999';
			}

			if(count($bellow_18years) == 0)
			{
				$bellow_18years[] = '999999';
			}

			/* ###################################################################################################### */
			/* #################### Neu teilnehmende GKV-Patienten ambulant  ######################################## */
			/* ###################################################################################################### */
			// First time admissioned patient who are NOT admissioned in HOSPIZ & who are NOT privatpatient
			if(count($non_hospiz_patients) == 1 && in_array('999999', $non_hospiz_patients))
			{
				$this->view->noprivatepatientadmission = "0";
				$viewdata['noprivatepatientadmission'] = "0";
			}
			else
			{
				$this->view->noprivatepatientadmission = count($non_hospiz_patients); // Neu teilnehmende GKV-Patienten ambulant   // THIS IS NEEDE FOR THE NEW
				$viewdata['noprivatepatientadmission'] = count($non_hospiz_patients);
			}

			/* ###################################################################################################### */
			/* ####################   Neu teilnehmende GKV-Patienten Hospiz  ######################################## */
			/* ###################################################################################################### */
			//First time admissioned patient who ARE admissioned in HOSPIZ & who are NOT privatpatient
			if(count($hospiz_patients) == 1 && in_array('999999', $hospiz_patients))
			{
				$this->view->hospiz_patients = "0";
				$viewdata['hospiz_patients'] = "0";
			}
			else
			{
				$this->view->hospiz_patients = count($hospiz_patients);
				$viewdata['hospiz_patients'] = count($hospiz_patients);
			}

			/* ###################################################################################################### */
			/* ###############   Davon Anzahl Kinder- und Jugendliche (< 18 Jahre)   ################################ */
			/* ###################################################################################################### */
			//ammount of row 1 & 2 which are age below 18
			if(count($bellow_18years) == 1 && in_array('999999', $bellow_18years))
			{
				$this->view->bellow_18years = "0";
				$viewdata['bellow_18years'] = "0";
			}
			else
			{
				$this->view->bellow_18years = count($bellow_18years);
				$viewdata['bellow_18years'] = count($bellow_18years);
			}

			if($_REQUEST['dbgx'] == 1)
			{
				print_r("Hospiz days of patients\n");
				print_r($hospiz_days);
				print_r("\nALL active ipids in period\n");
				print_r($active_qipids);
				print_r("\n Neu teilnehmende GKV-Patienten ambulant <-- First time admissioned patient who are NOT admissioned in HOSPIZ & who are NOT privatpatient \n");
				print_r($non_new_hospiz_patients);
				print_r("\n Neu teilnehmende GKV-Patienten Hospiz <-- First time admissioned patient who ARE admissioned in HOSPIZ & who are NOT privatpatient \n");
				print_r($new_hospiz_patients);
				print_r("\nAll Private patients of client\n");
				print_r($privPatient);
				print_r("\nAll l92011 patients of client\n");
				print_r($LentryPatients);
				print_r("\nPatient Age\n");
				print_r($patient_age);
				print_r("\nAdmission Patient in Period\n");
				print_r($clientPatientsAdmission);
				exit;
			}

			if($_REQUEST['dbg'] == 1)
			{
				print_r("ALL active ipids in period\n");
				print_r($active_qipids);
				print_r("Pacienti admisi din PM\n");
				print_r($admisionPatients);
				print_r("\nPacienti admisi din PRA\n");
				print_r($reAdmisionPatients);
				print_r("\n Neu teilnehmende GKV-Patienten ambulant <-- First time admissioned patient who are NOT admissioned in HOSPIZ & who are NOT privatpatient \n");
				print_r($non_new_hospiz_patients);
				print_r("\n Neu teilnehmende GKV-Patienten Hospiz <-- First time admissioned patient who ARE admissioned in HOSPIZ & who are NOT privatpatient \n");
				print_r($new_hospiz_patients);
				print_r("\nAll Private patients of client\n");
				print_r($privPatient);
				print_r("\nAll l92011 patients of client\n");
				print_r($LentryPatients);
				print_r("\nAll STANDBY patients of client\n");
				print_r($st_del_patients);
				print_r("\nAll non privat patients of client\n");
				print_r($npClientsIpidsArr);
				print_r("\nAll non privat patients of client, active in period\n");
				print_r($npClientsIpidsActive);
				print_r("\nPalliativ-Falle Gesamt\n");
				print_r($clientpatarr);
			}

			//query get all discharge method DEAD of client // PRIMUL QUERY
			$dm = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->Where('isdelete = 0')
				->andWhere('clientid = ' . $logininfo->clientid)
				->andWhere('abbr IN ("TOD", "TODNA")');
			$dischargemethods = $dm->fetchArray();

			if(count($dischargemethods) > 0)
			{
				foreach($dischargemethods as $dmkey => $dmvalue)
				{
					$dischargeids[] = $dmvalue['id'];
				}
			}

			if(count($dischargeids) == 1)
			{
				$dischargemethodids = $dischargeids[0];
			}
			else if(count($dischargeids) > 0 && count($dischargeids) != 1)
			{
				$dischargemethodids = implode(",", $dischargeids);
			}

			$quarter_start_m = $quarter[$quarterFinal][0];
			$quarter_end_m = end($quarter[$quarterFinal]);

			$quarter_start_day = strtotime("{$y[0]}-{$quarter_start_m}-01");
			$quarter_end_day = strtotime("{$y[0]}-{$quarter_end_m}-01");
			$quarter_end_day = strtotime('-1 second', strtotime('+1 month', $quarter_end_day));

			$quarter_start_first_dayy = date("Y-m-d H:i:s", $quarter_start_day);
			$quarter_end_last_dayy = date("Y-m-d H:i:s", $quarter_end_day);

			if($quarterFinal != '4')
			{
				$prev_year = ($y[0] - 1);
				$this->view->median_year = $prev_year;
				$viewdata['median_year'] = $prev_year;
				$year_start_first_day = strtotime("{$prev_year }-01-01");
				$year_end_first_day = strtotime("{$prev_year}-12-01");
				$year_end_last_day = strtotime('-1 second', strtotime('+1 month', $year_end_first_day));

				$year_start_day = date("Y-m-d H:i:s", $year_start_first_day);
				$year_end_day = date("Y-m-d H:i:s", $year_end_last_day);
			}
			else
			{
				$this->view->median_year = $y[0];
				$viewdata['median_year'] = $y[0];
				$year_start_first_day = strtotime("{$y[0]}-01-01");
				$year_end_first_day = strtotime("{$y[0]}-12-01");
				$year_end_last_day = strtotime('-1 second', strtotime('+1 month', $year_end_first_day));

				$year_start_day = date("Y-m-d H:i:s", $year_start_first_day);
				$year_end_day = date("Y-m-d H:i:s", $year_end_last_day);
			}
			
			//     ISPC-2188 WL Ancuta - 25.07.2018  overwrite  
			$this->view->median_year = str_pad($quarterFinal, 2, "0", STR_PAD_LEFT).'/'.$yearFinal;
			$viewdata['median_year'] = str_pad($quarterFinal, 2, "0", STR_PAD_LEFT).'/'.$yearFinal;
			
			
			//query get all DEAD patients with discharge day < = quarter_start_first_day
			$discharged_pat_inquarter = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->where('discharge_method IN(' . $dischargemethodids . ')')
				->andWhere('discharge_date <= "' . $quarter_start_first_dayy . '"');
			$quarter_dead_pat = $discharged_pat_inquarter->fetchArray();

			$dq_ipids[] = '999999';
			foreach($quarter_dead_pat as $dq_key => $dq_val)
			{
				$dq_ipids[] = $dq_val['ipid'];
			}

			$vvhistory = new VollversorgungHistory();
			$vvStartDates = $vvhistory->getVollversorgungHistory($clientpatarr, "1", $dq_ipids);
			$vvEndDates = $vvhistory->getVollversorgungHistory($clientpatarr, "2", $dq_ipids);

			foreach($vvStartDates as $ipid => $startDates)
			{
				foreach($startDates as $keys => $start)
				{
					$vvPeriods[$ipid]['start'][] = $start['date'];
					$vvStart = $start['date'];

					if(empty($vvEndDates[$ipid][$keys]['date']))
					{
						$vvPeriods[$ipid]['end'][] = date("Y-m-d H:i:s");
						$vvEnd = date("Y-m-d H:i:s");
					}
					else
					{
						$vvPeriods[$ipid]['end'][] = $vvEndDates[$ipid][$keys]['date'];
						$vvEnd = $vvEndDates[$ipid][$keys]['date'];
					}

					if(Pms_CommonData::isintersected(strtotime($period['start'][0]), strtotime($period['end'][0]), strtotime($vvStart), strtotime($vvEnd)))
					{
						$finalArray[] = $ipid;
					}
				}
			}

			$finalArray = array_diff($finalArray, $LentryPatients);
			$allVvArray = array_values(array_unique($finalArray));

			//Vollversorgung ohne Pallicare-Versorgung
			$this->view->versorgungstatus = count($allVvArray);
			$viewdata['versorgungstatus'] = count($allVvArray);

			if($_REQUEST['dbg'] == 1)
			{
				print_r("\nVollversorgung ohne Pallicare-Versorgung\n");
				print_r($allVvArray);
			}

			$active_cond = $this->getTimePeriod($q, $y);
			$period = Pms_CommonData::getPeriodDates($q, $y);
			$reportPeriod = $patientmaster->getDaysInBetween($period['start'][0], $period['end'][0]);

			//Get client locations START
			$locationTypesArray = Pms_CommonData::getDischargeLocationTypes();

			//query get client discharge locations
			$dl = Doctrine_Query::create()
				->select('*, AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location_dec')
				->from('DischargeLocation')
				->where('type != 0 ')
				->andWhere('clientid = "' . $logininfo->clientid . '"');
			$discharge_loc_array = $dl->fetchArray();

			foreach($discharge_loc_array as $kl => $dl_values)
			{
				$dischargelocations[$dl_values['id']] = $dl_values;
				$location2type[$dl_values['id']] = $dl_values['type'];
			}

			$allpatients = $this->getAllClientPatients($logininfo->clientid);
			foreach($allpatients as $allpatient_item)
			{
				$allpatients_str .= '"' . $allpatient_item['ipid'] . '",';
				$allpatients_arr[] = $allpatient_item['ipid'];
			}

			$mdischarged = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $allpatients_arr)
				->andwhere('discharge_method IN (' . $dischargemethodids . ')')
// 				->andWhere('discharge_date BETWEEN "' . $year_start_day . '" and "' . $year_end_day . '"');
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"');
			$median_dischargedpatarr = $mdischarged->fetchArray();

			$discharged = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ALL_patients)
				->andWhereIn('isdelete = 0')
				->andwhere('discharge_method IN (' . $dischargemethodids . ')')
				->andWhere('discharge_date BETWEEN "' . $quarter_start_first_dayy . '" and "' . $quarter_end_last_dayy . '"');
			$dischargedpatarr = $discharged->fetchArray();

			//Betreuungszeitraum in Tagen (Median) <--- the COMPLETE DoT of all DIED patients in that quartal. MEDIAN.
			$deadipids = array();
			foreach($dischargedpatarr as $d_key => $deadpat)
			{
				$patients2locations[$location2type[$deadpat['discharge_location']]][] = $deadpat['ipid'];

				if(is_array($deadpat))
				{
					$deadipids[] = $deadpat['ipid'];
				}
				else
				{
					$deadipids[] = $deadpat;
				}
			}

			
			$mdeadipids = array();
			foreach($median_dischargedpatarr as $md_key => $mdeadpat)
			{
				if(is_array($mdeadpat))
				{
					$mdeadipids[] = $mdeadpat['ipid'];
				}
				else
				{
					$mdeadipids[] = $mdeadpat;
				}
			}

			$deadipids = array_values(array_diff($deadipids, $privPatient));
			$deadipids = array_values(array_diff($deadipids, $LentryPatients));
			$deadipids = array_unique($deadipids);

			$mdeadipids = array_values(array_diff($mdeadipids, $privPatient));
			$mdeadipids = array_values(array_diff($mdeadipids, $LentryPatients));
			$mdeadipids = array_unique($mdeadipids);

			if(count($deadipids) == 1 && in_array('999999', $deadipids))
			{
				$this->view->alldeadpatients = "0";
				$viewdata['alldeadpatients'] = "0";
			}
			else
			{
				$this->view->alldeadpatients = count($deadipids); //  Sterbeort Verstorbene Gesamt
				$viewdata['alldeadpatients'] = count($deadipids);
			}

			if($_REQUEST['dbg'] == 1)
			{
				print_r("\nPacienti dead in quarter\n");
				print_r($deadipids);
				exit;
			}

// 		$treatmentdaysdatadead = $patientmaster->getTreatedDaysRealMultiple($mdeadipids, false);
// 		foreach($treatmentdaysdatadead as $patientTreatmentIpid => $patientTreatmentData)
// 		{
// 			$median_arr[] = $patientTreatmentData['realActiveDays'];
// 		}
			#############################################
            $median = 0;   
			if(!empty($mdeadipids))
			{
    			$period_start_sec = date('Y-m-d',strtotime($quarter_start_first_dayy));
    			$period_end_sec = date('Y-m-d',strtotime($quarter_end_last_dayy));
//     			$period_start_sec = "2009-01-01";
//     			$period_end_sec = date("Y-m-d");
    			$conditions_sec['periods'] = array("0" => array('start' => $period_start_sec, 'end' => $period_end_sec));
    			$conditions_sec['client'] = $clientid;
    			$conditions_sec['ipids'] = $mdeadipids;
    
    			$dead_patients_details = Pms_CommonData::patients_days($conditions_sec);
    			foreach($dead_patients_details as $patient_ipid => $patient_data)
    			{
    				$median_arr[] = $patient_data['treatment_days_no'];
    				if($_REQUEST['new']=="1")
    				{
    					$median_arr_dbg[$patient_ipid] = $patient_data['treatment_days_no'];
    				}
    			}
    			#############################################
    			$median = Pms_CommonData::calculate_median($median_arr);
			}

			if($_REQUEST['dbg'] == 2)
			{
				print_r("\n Discharged \n");
				print_r($dischargedpatarr);
				print_r("\n Private \n");
				print_r($privPatient);
				print_r("\n Dead #1\n");
				print_r($deadPatients);
				print_r("\n Dead #2 \n");
				print_r($deadipids);
				print_r("\n Median Dead #3 \n");
				print_r($mdeadipids);
				print_r("\n Median #1 \n");
				print_r($median_arr);
				print_r("\n Discharge \n");
				print_r($dischargemethodids);
				exit;
			}

			$this->view->averagetreatmentdays = number_format($median, 2); // Betreuungszeitraum in Tagen (Median)
			$viewdata['averagetreatmentdays'] = number_format($median, 2);
			//get all dead patients in zu house location
			$this->view->wohnungdeadpatients = count($patients2locations['1']) +  count($patients2locations['8']); // location type = 1
			$viewdata['wohnungdeadpatients'] = count($patients2locations['1']) +  count($patients2locations['8']);
			//get all dead patients in Altenheim/Pflegeheim location
			$this->view->altenheimdeadpatients = count($patients2locations['4']); // location type = 4
			$viewdata['altenheimdeadpatients'] = count($patients2locations['4']);
			//get all dead patients in Hospiz location
			$this->view->hospizdeadpatients = count($patients2locations['3']); // location type = 3
			$viewdata['hospizdeadpatients'] = count($patients2locations['3']);
			//get all dead patients in hospital location
			$this->view->krankenhausdeadpatients = count($patients2locations['2']); // location type = 2
			$viewdata['krankenhausdeadpatients'] = count($patients2locations['2']);
			//get all dead patients in palliativstation location
			$this->view->palliativdeadpatients = count($patients2locations['5']); // location type = 5
			$viewdata['palliativdeadpatients'] = count($patients2locations['5']);

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);

			$this->view->clientcity = $clientdata[0]['city'];
			$this->view->client_name = $clientdata[0]['team_name'];
			$this->view->client_bsnr = $clientdata[0]['betriebsstattennummer'];
			$viewdata['client_name'] = $clientdata[0]['team_name'];
			$viewdata['clientcity'] = $clientdata[0]['city'];
			$viewdata['client_bsnr'] = $clientdata[0]['betriebsstattennummer'];

			$this->view->todaydate = date("d.m.Y");
			$viewdata['todaydate'] = date("d.m.Y");

			if(strlen($_POST['btnsave']) > 0)
			{
				$this->generatereportanalage4awl2Pdf(3, $viewdata, 'Anlage4b', "anlage4b.html");
			}
		}

		// Ancuta
		private function get_patients_hospital_days($ipids, $clientid)
		{
			$patientmaster = new PatientMaster();
			if(empty($ipids))
			{
				$ipids[] = "XXXXX";
			}

			//get master locations
			$hospitalids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"');
			$hosparray = $hospitalids->fetchArray();

			$hospital_ids[] = '999999999';
			foreach($hosparray as $key => $hospital)
			{
				$hospital_ids[] = $hospital['id'];
				$locations[$hospital['id']]['type'] = $hospital['location_type'];
			}

			//get patient locations
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('ipid', $ipids)
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$pat_locations = $patloc->fetchArray();

			//get discharge methods
			$dis = new DischargeMethod();
			$discharge_methods = $dis->getDischargeMethod($clientid, 0);

			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			$patients_discharge = PatientDischarge::get_patients_discharge($ipids); // get discharge details for all ipids


			foreach($patients_discharge as $key => $discharge_details)
			{
				if(in_array($discharge_details['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$discharge_details['ipid']] = date('Y-m-d', strtotime($discharge_details['discharge_date']));
				}
			}

			$hospital_days = array();
			$hosp_days = array();
			$full_hospital_days = array();

			foreach($pat_locations as $k_loc => $location_values)
			{
				$patients_locations[$location_values['ipid']][] = $location_values;
			}

			foreach($patients_locations as $pat_ipid => $pat_locations_values)
			{
				foreach($pat_locations_values as $k_pat_loc => $v_pat_loc)
				{
					if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
					{
						$till = date('Y-m-d');
						$till = date("Y-m-d", strtotime("-1 day"));
					}
					else
					{
						$till = date("Y-m-d", strtotime("-1 day", strtotime($v_pat_loc['valid_till'])));
					}
					if((date('Y-m-d', strtotime($v_pat_loc['valid_till'])) == $discharge_dead_date[$v_pat_loc['ipid']]) && empty($pat_locations_values[($k_pat_loc + 1)]['valid_till']) && $locations[$v_pat_loc['location_id']]['type'] == '1')
					{
						$till = $discharge_dead_date[$v_pat_loc['ipid']];
					}
					$v_pat_loc['valid_from'] = date("Y-m-d", strtotime("+1 day", strtotime($v_pat_loc['valid_from'])));

					$s_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
					$s_end = date('Y-m-d', strtotime($till));

					if($locations[$v_pat_loc['location_id']]['type'] == '1')
					{
						if(empty($full_hospital_days[$v_pat_loc['ipid']]))
						{
							$full_hospital_days[$v_pat_loc['ipid']] = array();
						}

						if(empty($hospital_days[$v_pat_loc['ipid']]))
						{
							$hospital_days[$v_pat_loc['ipid']] = array();
						}

						$hospital_days[$v_pat_loc['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

						$full_hospital_days[$v_pat_loc['ipid']] = array_merge($full_hospital_days[$v_pat_loc['ipid']], $hospital_days[$v_pat_loc['ipid']]);

						$current_location = date('Y-m-d', strtotime($pat_locations_values[$k_pat_loc]['valid_till']));
						$nextlocation = date('Y-m-d', strtotime($pat_locations_values[$k_pat_loc + 1]['valid_from']));

						if($locations[$pat_locations_values[$k_pat_loc + 1]['location_id']]['type'] == '1')
						{
							if($current_location == $nextlocation)
							{
								$full_hospital_days[$v_pat_loc['ipid']] = array_merge($full_hospital_days[$v_pat_loc['ipid']], array($nextlocation));
							}
						}
					}
				}
			}

			foreach($full_hospital_days as $pipid => $h_days_array)
			{
				foreach($h_days_array as $k => $h_days)
				{
					$overall_hospital_days[$pipid][] = $h_days;
				}
			}

			return $overall_hospital_days;
		}

		//Ancuta
		private function get_patients_hospiz_days($ipids, $clientid, $first_day = false)
		{
			$patientmaster = new PatientMaster();
			if(empty($ipids))
			{
				$ipids[] = "XXXXX";
			}

			//get master locations
			$hospizids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"');
			$hosparray = $hospizids->fetchArray();

			$hospiz_ids[] = '999999999';
			foreach($hosparray as $key => $hospiz)
			{
				$hospiz_ids[] = $hospiz['id'];
				$locations[$hospiz['id']]['type'] = $hospiz['location_type'];
			}

			//get patient locations
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('ipid', $ipids)
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$pat_locations = $patloc->fetchArray();

			//get discharge methods
			$dis = new DischargeMethod();
			$discharge_methods = $dis->getDischargeMethod($clientid, 0);

			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			$patients_discharge = PatientDischarge::get_patients_discharge($ipids); // get discharge details for all ipids


			foreach($patients_discharge as $key => $discharge_details)
			{
				if(in_array($discharge_details['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$discharge_details['ipid']] = date('Y-m-d', strtotime($discharge_details['discharge_date']));
				}
			}

			$hospiz_days = array();
			$hosp_days = array();
			$full_hospiz_days = array();

			foreach($pat_locations as $k_loc => $location_values)
			{
				$patients_locations[$location_values['ipid']][] = $location_values;
			}

			foreach($patients_locations as $pat_ipid => $pat_locations_values)
			{
				foreach($pat_locations_values as $k_pat_loc => $v_pat_loc)
				{
					if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
					{
						$till = date('Y-m-d');
						$till = date("Y-m-d", strtotime("-1 day"));
					}
					else
					{
						$till = date("Y-m-d", strtotime("-1 day", strtotime($v_pat_loc['valid_till'])));
					}

					if((date('Y-m-d', strtotime($v_pat_loc['valid_till'])) == $discharge_dead_date[$v_pat_loc['ipid']]) && empty($pat_locations_values[($k_pat_loc + 1)]['valid_till']) && $locations[$v_pat_loc['location_id']]['type'] == '2')
					{
						$till = $discharge_dead_date[$v_pat_loc['ipid']];
					}

					if($first_day)
					{
						$v_pat_loc['valid_from'] = date("Y-m-d", strtotime($v_pat_loc['valid_from']));
					}
					else
					{
						$v_pat_loc['valid_from'] = date("Y-m-d", strtotime("+1 day", strtotime($v_pat_loc['valid_from'])));
					}

					$s_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
					$s_end = date('Y-m-d', strtotime($till));

					if($locations[$v_pat_loc['location_id']]['type'] == '2')
					{
						if(empty($full_hospiz_days[$v_pat_loc['ipid']]))
						{
							$full_hospiz_days[$v_pat_loc['ipid']] = array();
						}

						if(empty($hospiz_days[$v_pat_loc['ipid']]))
						{
							$hospiz_days[$v_pat_loc['ipid']] = array();
						}

						$hospiz_days[$v_pat_loc['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);
						$full_hospiz_days[$v_pat_loc['ipid']] = array_merge($full_hospiz_days[$v_pat_loc['ipid']], $hospiz_days[$v_pat_loc['ipid']]);

						$current_location = date('Y-m-d', strtotime($pat_locations_values[$k_pat_loc]['valid_till']));
						$nextlocation = date('Y-m-d', strtotime($pat_locations_values[$k_pat_loc + 1]['valid_from']));

						if($locations[$pat_locations_values[$k_pat_loc + 1]['location_id']]['type'] == '2')
						{
							if($current_location == $nextlocation)
							{
								$full_hospiz_days[$v_pat_loc['ipid']] = array_merge($full_hospiz_days[$v_pat_loc['ipid']], array($nextlocation));
							}
						}
					}
				}
			}

			foreach($full_hospiz_days as $pipid => $h_days_array)
			{
				foreach($h_days_array as $k => $h_days)
				{
					$overall_hospiz_days[$pipid][] = $h_days;
				}
			}

			return $overall_hospiz_days;
		}

		public function kvnoanlage3aAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;


			/* --------------------------------User select------------------------------------- */
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}

			$users = new User();
			$userarray = $users->getUserByClientid($logininfo->clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();

			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;

			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				$showselect = 1; // show select to all
			}

			$this->view->showselect = $showselect;



			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);

			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;


			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] . " \r\n " . $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "&nbsp;" . $patientinfo['city'];
			$this->view->birthdate = $patientinfo['birthd'];
			$this->view->addmissiondate = date('d.m.Y', strtotime($patientinfo['admission_date']));
			$this->view->maxdate = date('d.m.Y');
			$this->view->isDischarged = $patientinfo['isdischarged'];
			$this->view->isstandby = $patientinfo['isstandby'];
			$this->view->isstandbydelete = $patientinfo['isstandbydelete'];

			$patient_readmission = new PatientReadmission();
			$patient_admissions = $patient_readmission->getPatientReadmission($ipid, '1');

			if(!empty($patient_admissions) && count($patient_admissions) > 1)
			{
				$this->view->admission = "readmission";
			}
			else
			{
				$this->view->admission = "first";
			}

			$location_array = array();
			$ploc = new PatientLocation();
			$plocarray = $ploc->getActiveLocationPatInfoold($ipid);

			if(!empty($plocarray))
			{
				if($plocarray[0]['location_type'] == '3' || $plocarray[0]['location_type'] == '4')
				{
					$location_array[] = 'pflegeheim';
				}
				elseif($plocarray[0]['location_type'] == '2')
				{
					$location_array[] = 'hospiz';
				}
				elseif($plocarray[0]['location_type'] == '5')
				{
					$location_array[] = 'home';
				}
				else
				{
					
				}
			}
			$this->view->location = $location_array;

			/* ------------------- Maindiagnosis------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . "" . $valdia['icdnumber'] . ' - ' . date('m.Y', strtotime($valdia['create_date']));
						$comma = ", ";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$patient_diagnosis = $diagnosis;
			}
			else
			{
				$patient_diagnosis = "";
			}

			$this->view->diagnosen = $patient_diagnosis;

			//red box data #1
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

			//cityofclient
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();

				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];

				$this->view->betriebsstatten_nr = $loguserarray['betriebsstattennummer'];
				$this->view->arzt_nr = $loguserarray['LANR'];
			}

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['client_name'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];

			$this->view->cityofclient = $clientdata[0]['city'];
			$this->view->clientname = $clientdata[0]['client_name'];
			$this->view->team_name = $clientdata[0]['team_name'];
			$this->view->has_vollversorgung = $patientinfo['vollversorgung'];
			$this->view->client_bsnr = $clientdata[0]['betriebsstattennummer'];

			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['kv_header']['patientname'] = $_POST['kv_header']['patientname'];

				if($_POST['stampusers'] > 0)
				{

					if($multiplestamps_option === true)
					{

						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);

						$post['kv_header']['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
						$post['kv_header']['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
					}
					else
					{

						$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
						if($userst)
						{
							$uarray = $userst->toArray();
							$post['kv_header']['arzt_nr'] = $uarray['LANR'];
							$post['kv_header']['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
						}
					}
				}

				$post['stamp_block'] = nl2br(htmlspecialchars($_POST['stamp_block']));
				$post['stamp_block'] = strip_tags(str_replace('<br />', " --\\-- ", $post['stamp_block']));

				$this->generatePdfNew(3, $post, 'KvnoAnlage3a', "kvno_anlage_3a_pdf.html");
			}
		}

		public function kvnoanlage3bAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;


			/* --------------------------------User select------------------------------------- */
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}

			$users = new User();
			$userarray = $users->getUserByClientid($logininfo->clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();

			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['last_name']) . ", " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;

			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				$showselect = 1; // show select to all
			}

			$this->view->showselect = $showselect;



			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);

			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;




			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] . " \r\n " . $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "&nbsp;" . $patientinfo['city'];
			$this->view->birthdate = $patientinfo['birthd'];
			$this->view->addmissiondate = date('d.m.Y', strtotime($patientinfo['admission_date']));
			$this->view->maxdate = date('d.m.Y');
			$this->view->isDischarged = $patientinfo['isdischarged'];
			$this->view->isstandby = $patientinfo['isstandby'];
			$this->view->isstandbydelete = $patientinfo['isstandbydelete'];

			if($patientinfo['isdischarged'] == '1')
			{
				// discharge_methods
				$dis = new DischargeMethod();
				$discharge_methods = $dis->getDischargeMethod($clientid, 0);

				foreach($discharge_methods as $dischargeM)
				{
					if($dischargeM['abbr'] == "TOD" || $dischargeM['abbr'] == "TODNA")
					{
						$death_methods[] = $dischargeM['id'];
						$death_description = $dischargeM['description'];
					}
				}

				// discharge_locations
				$dl = new DischargeLocation();
				$discharge_locations = $dl->getDischargeLocation($clientid);

				foreach($discharge_locations as $k => $dl_value)
				{
					$discharge_location[$dl_value['id']] = $dl_value['type'];
				}

				$patient_discharge_q = Doctrine_Query::create()
					->select("*,AES_DECRYPT(discharge_comment,'" . Zend_Registry::get('salt') . "') as discharge_comment")
					->from('PatientDischarge')
					->where("ipid='" . $ipid . "' and isdelete='0'");
				$patient_discharge = $patient_discharge_q->fetchArray();

				$discharge_date = date('d.m.Y', strtotime($patient_discharge[0]['discharge_date']));

				if(in_array($patient_discharge[0]['discharge_method'], $death_methods))
				{
					$death_date = date('d.m.Y', strtotime($patient_discharge[0]['discharge_date']));
					if($discharge_location[$patient_discharge[0]['discharge_location']] == "1")
					{
						$discharge_location[] = "home";
					}
					else if($discharge_location[$patient_discharge[0]['discharge_location']] == "2")
					{
						$discharge_location[] = "hospital";
					}
					else if($discharge_location[$patient_discharge[0]['discharge_location']] == "3")
					{
						$discharge_location[] = "hospiz";
					}
					else if($discharge_location[$patient_discharge[0]['discharge_location']] == "4")
					{
						$discharge_location[] = "pflegeheim";
					}
					else if($discharge_location[$patient_discharge[0]['discharge_location']] == "5")
					{
						$discharge_location[] = "palliativstation";
					}
					else if($discharge_location[$patient_discharge[0]['discharge_location']] == "7")
					{
						$discharge_location[] = "kurzzeitpflege";
					}
					else
					{
						$discharge_location[] = "not_known";
					}
				}

				$this->view->discharge_date = $discharge_date;
				$this->view->death_date = $death_date;
				$this->view->discharge_location = $discharge_location;
			}

			//red box data #1
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

			//	cityofclient
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();

				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];

				$this->view->betriebsstatten_nr = $loguserarray['betriebsstattennummer'];
				$this->view->arzt_nr = $loguserarray['LANR'];
			}

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['client_name'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];

			$this->view->cityofclient = $clientdata[0]['city'];
			$this->view->clientname = $clientdata[0]['client_name'];
			$this->view->team_name = $clientdata[0]['team_name'];
			$this->view->has_vollversorgung = $patientinfo['vollversorgung'];
			$this->view->client_bsnr = $clientdata[0]['betriebsstattennummer'];

			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['nr'] = $statusvolldate_pdf;
				$post['kv_header']['patientname'] = $_POST['kv_header']['patientname'];

				if($_POST['stampusers'] > 0)
				{

					if($multiplestamps_option === true)
					{

						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);

						$post['kv_header']['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
						$post['kv_header']['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
					}
					else
					{

						$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
						if($userst)
						{
							$uarray = $userst->toArray();
							$post['kv_header']['arzt_nr'] = $uarray['LANR'];
							$post['kv_header']['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
						}
					}
				}

				$post['stamp_block'] = nl2br(htmlspecialchars($_POST['stamp_block']));
				$post['stamp_block'] = strip_tags(str_replace('<br />', " --\\-- ", $post['stamp_block']));


				$this->generatePdfNew(3, $post, 'KvnoAnlage3b', "kvno_anlage_3b_pdf.html");
				exit;
			}
		}

		public function doctorlettercourseAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$epid = Pms_CommonData::getEpidFromId($decid);

			$pcourse = new PatientCourse();
			$allblocks = $pcourse->getCourseData($decid, $_GET['shrt']);

			$cs = new Courseshortcuts();
			$shrtarr = $cs->getCourseDataByShortcut($_GET['shrt']);
			//$this->view->course_fullname = $shrtarr[0]['course_fullname'];
			//  print_r($allblocks);
			$grid = new Pms_Grid($allblocks, 1, count($allblocks), "doctorlettercourselist.html");
			$grid->gridview->course_fullname = $shrtarr[0]['course_fullname'];
			$this->view->patientgrid = $grid->renderGrid();

			//echo utf8_decode($grid->renderGrid());


			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "doctletter";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['refs'] = $grid->renderGrid();
			$response['callBackParameters']['selectedchecks'] = $_GET['shrt'];
			$response['callBackParameters']['countblocks'] = count($allblocks);

			echo json_encode($response);
			exit;
		}

		public function patientmessageAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;


			$client_data = Pms_CommonData::getClientData($clientid);
			$automatically_assign_users = $client_data['0']['automatically_assign_users']; // ISPC-871 client setting auto assign user

			if($automatically_assign_users == "0")
			{
				$this->view->patient_message = $this->view->translate('Patient was added successfully!');
			}
		}

		public function munster4Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;

			$users = new User();
			$userarray = $users->getUserByClientid($clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();

			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;

			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);

			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;

			/* ------------------------------------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'] . "\n" . $parr['street1'] . "\n" . $parr['zip'] . "&nbsp;" . $parr['city'];
			$this->view->birthdate = $parr['birthd'];
			$this->view->patientname1 = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->patietnaddress = $parr['street1'] . "&nbsp;" . $parr['zip'] . "\n" . $parr['city'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];

			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

			$user = Doctrine::getTable('User')->find($userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->arzt_nr = $uarray['LANR'];
			}

			/* ------------------------------------------------------------------------------ */
			//get saved form data
			$munster4_data['hauptleistung_datum'] = date('d.m.Y', time());

			$this->retainValues($munster4_data);
// 			$this->view->hinfahrt = explode(',', $munster4_data['hinfahrt']);

			if($this->getRequest()->isPost())
			{
				if($_POST['post_status'] == "prepdf_generation2patient_files")
				{
					$this->generatePdfNew(3, $_POST, 'munster4_pre', "munster4_pre_pdf.html");
				}
				else if($_POST['post_status'] == "pdf_generation2patient_files")
				{
					$this->generatePdfNew(3, $_POST, 'munster4', "munster4pdf.html");
				}
				else if($_POST['post_status'] == "pdf_generation")
				{
					$this->generatePdfNew(3, $_POST, 'munster4pdf', "munster4pdf.html");
				}
			}
		}
 
		public function verordnungtpsideAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;

			/* --------------------------------User select------------------------------------- */
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}

			$users = new User();
			$userarray = $users->getUserByClientid($logininfo->clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();

			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;

			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				$showselect = 1; // show select to all
			}

			$this->view->showselect = $showselect;
			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);

			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;

			//get active SAPV
			$sav = new SapvVerordnung();
			$verordungdata = $sav->get_today_active_sapvs($ipid);
			if($verordungdata)
			{
				foreach($verordungdata as $kveror => $value)
				{
					$verordate['vom'] = $value['verordnungam'];
					$verordate['bis'] = $value['verordnungbis'];
				}
				$this->view->vom = date('d.m.Y', strtotime($verordate['vom']));
				$this->view->bis = date('d.m.Y', strtotime($verordate['bis']));
			}


			/* ------------------- Client Data--------------------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			//$this->view->clientname = $clientdata[0]['client_name'];
			$this->view->clientname = $clientdata[0]['team_name'];
			$this->view->client_address = $clientdata[0]['street1'] . ", " . $clientdata[0]['postcode'] . " " . $clientdata[0]['city'];
			$this->view->client_iknr = $clientdata[0]['institutskennzeichen'];
			$this->view->client_pr = $clientdata[0]['lastname'] . ", " . $clientdata[0]['firstname'];
			$this->view->client_phone = $clientdata[0]['phone'];
			$this->view->client_fax = $clientdata[0]['fax'];
			$this->view->client_email = $clientdata[0]['emailid'];

			if($this->getRequest()->isPost())
			{
				if($_POST['post_status'] == "pdf_pre_print")
				{
					$this->generatePdfNew(3, $_POST, 'verordnungtpside_pre', "verordnungtpside_pre_pdf.html");
				}
				else if($_POST['post_status'] == "pdf_print")
				{
					$this->generatePdfNew(3, $_POST, 'verordnungtpside', "verordnungtpsidepdf.html");
				}
			}
		}

		public function anlage15Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$userid = $logininfo->userid;

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] . " \r\n " . $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "&nbsp;" . $patientinfo['city'];
			$this->view->birthdate = $patientinfo['birthd'];

			//red box data #1
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];

			//cityofclient
			$loguser = Doctrine::getTable('User')->find($userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();

				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];

				$this->view->betriebsstatten_nr = $loguserarray['betriebsstattennummer'];
				$this->view->arzt_nr = $loguserarray['LANR'];
			}

			if($this->getRequest()->isPost())
			{
				if($_POST['generatepdf'])
				{
					$post = $_POST;
					$this->generatePdfNew(3, $post, 'anlage15', "anlage15_pdf.html");
					exit;
				}
			}
		}

		public function shwrapperAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$userid = $logininfo->userid;

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->patient_only_name = $patientinfo['last_name'] . ", " . $patientinfo['first_name'];

			//get client phones
			$client_data = new Client();
			$client_details = $client_data->getClientDataByid($clientid);

			$emergency_nr = array('0' => '', '1' => '');
			if(!empty($client_details[0]['emergencynr_a']) && strlen(trim(rtrim($client_details[0]['emergencynr_a']))) != '0')
			{
				$emergency_nr[0] = $client_details[0]['emergencynr_a'];
			}

			if(!empty($client_details[0]['emergencynr_b']) && strlen(trim(rtrim($client_details[0]['emergencynr_b']))) != '0')
			{
				$emergency_nr[1] = $client_details[0]['emergencynr_b'];
			}

			$this->view->emergency_nr = $emergency_nr;


			$post['patient_only_name'] = $this->view->patient_only_name;
			$post['emergency_nr'] = $emergency_nr;
			$this->generatePdfNew(3, $post, 'shwrapper', "shwrapper_pdf.html");
			exit;
		}

		public function messagecoordinatorAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------------------ */

			//get client fax number
			$client_data = new Client();
			$client_details = $client_data->getClientDataByid($clientid);

			$form['client_fax'] = $client_details[0]['fax'];

			/* ---------------Get Patient MASTER information------------ */
			$patientmaster = new PatientMaster();
			$patientarr = $patientmaster->getMasterData($decid, 0);

			$form['patient_name'] = htmlspecialchars($patientarr['last_name']) . ", " . htmlspecialchars($patientarr['first_name']);
			$form['patient_phone'] = $patientarr['phone'];

			/* ---------------Get Patient first Contact person------------ */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);

			if(!empty($pcs[0]))
			{
				$form['cntperson_phone'] = $pcs[0]['cnt_phone'];
				$form['cntperson_mobile'] = $pcs[0]['cnt_mobile'];
			}
			else
			{
				$form['cntperson_phone'] = "";
				$form['cntperson_mobile'] = "";
			}

			/* ---------------Get QPA--------------------------------------------- */

			$spec = new PatientSpecialists();
			$spec_array = $spec->get_patient_specialists($ipid);

			$specialists_types = new SpecialistsTypes();
			$sp_types = $specialists_types->get_specialists_types($clientid);
			if($sp_types)
			{
				foreach($sp_types as $k_specialities => $v_specialities)
				{
					$sp_types_arr[$v_specialities['id']] = $v_specialities['name'];
				}
			}


			$spec_ids[] = '999999999';
			foreach($spec_array as $k_spec => $v_spec)
			{
				$spec_ids[] = $v_spec['sp_id'];
			}

			$master_spec = new Specialists();
			$master_spec_array = $master_spec->get_specialist($spec_ids);

			foreach($master_spec_array as $k_m_sp => $v_m_sp)
			{
				$m_sp_array[$v_m_sp['id']] = $v_m_sp;
				$form['qpa_name'] = $v_m_sp['last_name'] . ", " . $v_m_sp['first_name'];
				$form['qpa_phone'] = $v_m_sp['phone_practice'];
				$form['qpa_fax'] = $v_m_sp['fax'];
			}


			/* ------------ Specialists End -------------------- */

			/* ---------------Get Patient Family doctor---------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($patientarr['familydoc_id']);
			if($docarray)
			{
				$form['familydoc_name'] = trim($docarray[0]['last_name']) . ", " . $docarray[0]['first_name'];
				$form['familydoc_phone'] = $docarray[0]['phone_practice'];
				$form['familydoc_fax'] = $docarray[0]['fax'];
			}
			else
			{
				$form['familydoc_name'] = "";
				$form['familydoc_phone'] = "";
				$form['familydoc_fax'] = "";
			}
			/* ---------------Get Patient Pflegedienst---------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientFirstPflegediensteDetails($ipid);
			if($ppflearray)
			{
				$form['pflege_name'] = $ppflearray['pf_nursing'];
				$form['pflege_phone'] = $ppflearray['pf_phone_practice'];
				$form['pflege_fax'] = $ppflearray['pf_fax'];
			}
			else
			{
				$form['pflege_name'] = "";
				$form['pflege_phone'] = "";
				$form['pflege_fax'] = "";
			}

			/* ------------ QPA doctors -------------------- */

			/* ----------------------- Get Epids -------------------------------- */
			$epidipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->whereIn('ipid', $ipid);
			$patientepidarr = $epidipid->fetchArray();


			/* ----------------------- Get QPA Group -------------------------------- */

			$medic = Doctrine_Query::create()
				->select('*')
				->from('Usergroup')
				->where("clientid=" . $clientid . " and  groupname='QPA'");
			$medicarr = $medic->fetchArray();

			if($medicarr)
			{
				$groupid = $medicarr[0]['id'];
			}


			$users = new User;
			$users_qpa = $users->getuserbyGroupId($groupid, $clientid, true);

			foreach($users_qpa as $k_user => $v_user)
			{
				$qpa_details[$v_user['id']]['name'] = $v_user['last_name'] . ", " . $v_user['first_name'];
				$qpa_details[$v_user['id']]['phone'] = $v_user['phone'];
				$qpa_details[$v_user['id']]['fax'] = $v_user['fax'];
				$qpa_userid[] = $v_user['id'];
			}

			/* ----------------------- Get Treated By -------------------------------- */
			$treatedbyQ = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->whereIn('epid', $patientepidarr[0]['epid'])
				->orderby('assign_date');
			$treatedbyarr = $treatedbyQ->fetchArray();

			if($treatedbyarr)
			{
				foreach($treatedbyarr as $key => $treatedby)
				{
					$treatedby_userid[] = $treatedby['userid'];
					$treatedbyarray[$treatedby['userid']]['userid'] = $treatedby['userid'];
					$treatedbyarray[$treatedby['userid']]['name'] = $qpa_details[$treatedby['userid']]['name'];
					$treatedbyarray[$treatedby['userid']]['phone'] = $qpa_details[$treatedby['userid']]['phone'];
					$treatedbyarray[$treatedby['userid']]['fax'] = $qpa_details[$treatedby['userid']]['fax'];
					$treatedbyarray[$treatedby['userid']]['create_date'] = $treatedby['create_date'];
				}
			}
			$treated_qpa = array_values(array_intersect($qpa_userid, $treatedby_userid));


			foreach($treated_qpa as $ku => $vusers)
			{
				$treatedby_arr[$vusers] = $treatedbyarray[$vusers]['create_date'];
			}

			asort($treatedby_arr);
			//print_r($treatedby_arr);exit;
			foreach($treatedby_arr as $key => $val)
			{
				$qpa_first[] = $key;
			}
			$form['qpa_name'] = $treatedbyarray[$qpa_first[0]]['name'];
			$form['qpa_phone'] = $treatedbyarray[$qpa_first[0]]['phone'];
			$form['qpa_fax'] = $treatedbyarray[$qpa_first[0]]['fax'];

			if($_REQUEST['dbg'])
			{
				print_r($form);
				print_r("\n");
				exit;
			}
			/* ------------------------------------------- */

			$this->view->form = $form;
			/* ======================================================================== */
			$mescoord = new MessageCoordinator();
			$form_details = $mescoord->get_message_coordinator_data($ipid);

			if($form_details)
			{
				$saved_id = $form_details['id'];
				$form_message = $form_details;
				$this->view->form['patient_phone'] = $form_message['patient_phone'];
				$this->view->form['cntperson_phone'] = $form_message['cntperson_phone'];
				$this->view->form['qpa_name'] = $form_message['qpa_name'];
				$this->view->form['qpa_phone'] = $form_message['qpa_phone'];
				$this->view->form['qpa_fax'] = $form_message['qpa_fax'];
				$this->view->form['familydoc_name'] = $form_message['familydoc_name'];
				$this->view->form['familydoc_phone'] = $form_message['familydoc_phone'];
				$this->view->form['familydoc_fax'] = $form_message['familydoc_fax'];
				$this->view->form['pflege_name'] = $form_message['pflege_name'];
				$this->view->form['pflege_phone'] = $form_message['pflege_phone'];
				$this->view->form['pflege_fax'] = $form_message['pflege_fax'];
				$this->view->form['observation'] = $form_message['observation'];
			}
			else
			{
				$saved_id = "";
			}
			$form_message['saved_id'] = $saved_id;
			$this->view->id = $saved_id;

			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['patient_name'] = $this->view->form['patient_name'];
				$post['client_fax'] = $this->view->form['client_fax'];
				$message_form = new Application_Form_MessageCoordinator();

				if($_POST['post_status'] == "save")
				{
					//print_r($post);exit;
					if(empty($_POST['saved_id']))
					{
						$message_save_data = $message_form->insert_data($ipid, $post);
					}
					else
					{
						$message_update_data = $message_form->update_data($post);
					}
					// generate pdf after save
					//$this->generateformPdf(4, $post, "messagecoordinator_save", "message_coordinator_pdf.html");
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				else if($_POST['post_status'] == "pdf_print")
				{
					$post = $_POST;
					$post['patient_name'] = $this->view->form['patient_name'];
					$post['client_fax'] = $this->view->form['client_fax'];

					$this->generatePdfNew(3, $post, 'messagecoordinator', "message_coordinator_pdf.html");
				}
			}
		}

		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function physiotherapistAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->patid = $_GET['id'];

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* ######################################################### */
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}

			$this->view->pid = $_GET['id'];
			if($_GET['decid'] > 0)
			{
// 				$previleges = new Pms_Acl_Assertion();
// 				$returnadd = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');

// 				if(!$returnadd)
// 				{
// 					$this->_redirect(APP_BASE . "error/previlege");
// 				}

				$q = Doctrine_Query::create()
					->update('PatientPhysiotherapist')
					->set('isdelete', '1')
					->where('ipid = ?', $ipid )
					->andwhere("physioid = ?", $_GET['decid']);
				$res = $q->execute();
				
				if ($res) {
				
					/* $obj = new Physiotherapists();
					$obj_res = $obj->getTable()->findOneBy('id', $_GET['decid'] );
					if ($obj_res) {
						$obj_res->ipid = $ipid;
						$obj_res->set('isdelete', '1');
						$obj_res->save();
						//$obj->delete();
					} */
					if($phys_m = Doctrine::getTable('Physiotherapists')->findByIdAndIndrop($_GET['decid'],1)){
						$phys_m = $phys_m{0};
						$phys_m->isdelete = 1;
						$phys_m->ipid = $ipid;
						$phys_m->save();
					}
				}

				$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			}

			$this->view->act = "patient/physiotherapist?id=" . $_GET['id'] . "&physioid=" . $_GET['physioid'];
			$a_post = $_POST;

			//ISPC-2045 v0.1
			$a_post['ipid'] = empty($a_post['ipid']) ? $ipid : $a_post['ipid'];
			$a_post['is_contact'] = (int)$a_post['real_contact_number'];
			
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->real_contact_number = $parr['kontactnumber_dec'];
			$this->view->kontactnumbertype = $parr['kontactnumbertype'];

			if($this->getRequest()->isPost())
			{ //print_r($a_post);
				$fdoctor_form = new Application_Form_PatientMaster();

				if($fdoctor_form->validatePhysiotherapist($a_post))
				{
					$docform = new Application_Form_Physiotherapists();
					$docinfo = $docform->InsertFromTabData($a_post);
					$a_post['hidd_physioid'] = $docinfo->id;

					//ISPC-2045 - disabled the next lines
					/*
					if(strlen($a_post['real_contact_number']) > 0)
					{
						$fdoctor_form->UpdateContactNumber($a_post['phone_practice'], '3');
					}
					elseif($parr['kontactnumber_dec'] == $a_post['phone_practice'] && $parr['kontactnumbertype'] == '3')
					{
						$fdoctor_form->DisableContactNumber();
					}
					*/
					//print_r($_GET['physioid']);exit;
					if($_GET['physioid'] > 0)
					{
						if($_GET['physioid'] == $a_post['hidd_physioid'])
						{

							$q = Doctrine_Query::create();
							$q->update('PatientPhysiotherapist');
							$q->set('physio_comment', '?', addslashes($a_post['physio_comment']));
							$q->where('physioid= ?', $_GET['physioid']);
							$q->andWhere('ipid= ?', $ipid);
							$q->execute();
						}
						else
						{
							$q = Doctrine_Query::create();
							$q->update('PatientPhysiotherapist');
							$q->set('physioid', '?', $a_post['hidd_physioid']);
							$q->set('physio_comment', '?', addslashes($a_post['physio_comment']));
							$q->where('physioid= ?', $_GET['physioid']);
							$q->andWhere('ipid= ?', $ipid);
							$q->execute();
							
							
							if($pfl_m = Doctrine::getTable('Physiotherapists')->findByIdAndIndrop($_GET['physioid'],1)){
								$pfl_m = $pfl_m{0};
								$pfl_m->isdelete = 1;
								$pfl_m->ipid = $ipid;
								$pfl_m->save();
							}
							
						}
					}
					else
					{
						$ph_cl = new PatientPhysiotherapist();
						$ph_cl->ipid = $ipid;
						$ph_cl->physioid = $a_post['hidd_physioid'];
						$ph_cl->physio_comment = $a_post['physio_comment'];
						$ph_cl->save();
					}
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
					if($_REQUEST['noredir'] != 1)
					{
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						echo json_encode(array("success" => "1", "phyInserted" => $a_post['hidd_physioid']));
						exit;
					}
				}
				else
				{
					$fdoctor_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			$docarray = array();
			if ( ! empty($_REQUEST['physioid'])) {
				$fdoc = new Physiotherapists();
				$docarray = $fdoc->get_physiotherapist($_REQUEST['physioid']);
				//print_r($_REQUEST['physioid']);exit;
			}
			$this->view->indrop = 0;

			if($docarray)
			{
				$pat_phy = new PatientPhysiotherapist();
				$comm = $pat_phy->getPatientPhysiotherapist($ipid, $_GET['physioid']);

				$this->view->physio_comment = $comm[0]['ph_com'];

				$this->retainValues($docarray[0]);
				$this->view->physiotherapist = $docarray[0]['physiotherapist'];
				$this->view->old_physiotherapist_firstname = trim($docarray[0]['first_name']);
				$this->view->old_physiotherapist_lastname = trim($docarray[0]['last_name']);
				$this->view->hidd_physioid = $docarray[0]['id'];
				$this->view->indrop = $docarray[0]['indrop'];
			}


			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function homecaresAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->patid = $_GET['id'];

			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* ######################################################### */
// 			$previleges = new Pms_Acl_Assertion();
// 			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
// 			if(!$return)
// 			{
// 				$this->_redirect(APP_BASE . "error/previlege");
// 				exit;
// 			}

			$this->view->pid = $_GET['id'];
			if($_GET['decid'] > 0)
			{
// 				$previleges = new Pms_Acl_Assertion();
// 				$returnadd = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');

// 				if(!$returnadd)
// 				{
// 					$this->_redirect(APP_BASE . "error/previlege");
// 				}

				$q = Doctrine_Query::create()
					->update('PatientHomecare')
					->set('isdelete', '1')
					->where('ipid = ?', $ipid)
					->andwhere("homeid = ?", $_GET['decid']);
				$res = $q->execute();
				
				
				if ($res) {
				
					/* 
					$obj = new Homecare();
					$obj_res = $obj->getTable()->findOneBy('id', $_GET['decid'] );
					if ($obj_res) {
						$obj_res->ipid = $ipid;
						$obj_res->set('isdelete', '1');
						$obj_res->save();
						//$obj->delete();
					} 
					*/
					
					
					if($home_m = Doctrine::getTable('Homecare')->findByIdAndIndrop($_GET['decid'],1)){
						$home_m = $home_m{0};
						$home_m->isdelete = 1;
						$home_m->ipid = $ipid;
						$home_m->save();
					}
					
					
				}
				

				$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			}

			$this->view->act = "patient/homecares?id=" . $_GET['id'] . "&homeid=" . $_GET['homeid'];
			$a_post = $_POST;
			
			//ISPC-2045 v0.1
			$a_post['ipid'] = empty($a_post['ipid']) ? $ipid : $a_post['ipid'];
			$a_post['is_contact'] = (int)$a_post['real_contact_number'];

			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->real_contact_number = $parr['kontactnumber_dec'];
			$this->view->kontactnumbertype = $parr['kontactnumbertype'];

			if($this->getRequest()->isPost())
			{
				$fdoctor_form = new Application_Form_PatientMaster();

				if($fdoctor_form->validateHomecare($a_post))
				{
					$docform = new Application_Form_Homecare();
					$docinfo = $docform->InsertFromTabData($a_post);
					$a_post['hidd_homeid'] = $docinfo->id;

					// ISPC-2045, TODO-1210:: 02.11.2017 
					/* if(strlen($a_post['real_contact_number']) > 0)
					{
						$fdoctor_form->UpdateContactNumber($a_post['phone_practice'], '3');
					}
					elseif($parr['kontactnumber_dec'] == $a_post['phone_practice'] && $parr['kontactnumbertype'] == '3')
					{
						$fdoctor_form->DisableContactNumber();
					} */
					
					
					if($_GET['homeid'] > 0)
					{
						if($_GET['homeid'] == $a_post['hidd_homeid'])
						{

							$q = Doctrine_Query::create();
							$q->update('PatientHomecare');
							$q->set('home_comment','?',addslashes($a_post['home_comment']));
							$q->where('homeid= ?', $_GET['homeid']);
							$q->andWhere('ipid= ?', $ipid);
							$q->execute();
						}
						else
						{
							$q = Doctrine_Query::create();
							$q->update('PatientHomecare');
							$q->set('homeid', '?',$a_post['hidd_homeid']);
							$q->set('home_comment','?',addslashes($a_post['home_comment']));
							$q->where('homeid= ?', $_GET['homeid']);
							$q->andWhere('ipid= ?', $ipid);
							$q->execute();
							
							if($home_m = Doctrine::getTable('Homecare')->findByIdAndIndrop($_GET['homeid'],1)){
								$home_m = $home_m{0};
								$home_m->isdelete = 1;
								$home_m->ipid = $ipid;
								$home_m->save();
							}
							
						}
					}
					else
					{
						$ph_cl = new PatientHomecare();
						$ph_cl->ipid = $ipid;
						$ph_cl->homeid = $a_post['hidd_homeid'];
						$ph_cl->home_comment = $a_post['home_comment'];
						$ph_cl->save();
					}
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
					if($_REQUEST['noredir'] != 1)
					{
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						echo json_encode(array("success" => "1", "homeInserted" => $a_post['hidd_homeid']));
						exit;
					}
				}
				else
				{
					$fdoctor_form->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}

			$fdoc = new Homecare();
			$docarray = $fdoc->get_homecare($_REQUEST['homeid']);

			$this->view->indrop = 0;

			if($docarray)
			{
				$pat_home = new PatientHomecare();
				$comm = $pat_home->getPatientHomecare($ipid, $_GET['homeid']);

				$this->view->home_comment = $comm[0]['ho_com'];

				$this->retainValues($docarray[0]);
				$this->view->homecare = $docarray[0]['homecare'];
				$this->view->old_homecare_firstname = trim($docarray[0]['first_name']);
				$this->view->old_homecare_lastname = trim($docarray[0]['last_name']);
				$this->view->hidd_homeid = $docarray[0]['id'];
				$this->view->indrop = $docarray[0]['indrop'];
			}


			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}

		public function deletedpatientslistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->view->usertype = $logininfo->usertype;
			$this->view->errorclass = "ErrorDivHide";
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('removepatient', $logininfo->userid, 'canview');

			if(!$return || ($logininfo->usertype != 'SA' && $logininfo->usertype != 'CA'))
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			if($this->getRequest()->isPost())
			{
				if($logininfo->usertype == 'SA')
				{
					if(strlen($_POST['clientid']) < 1)
					{
						$this->view->error_clientid = $this->view->translate("Select Client");
						$error = 1;
					}

					if(strlen($_POST['epid']) < 1)
					{
						$this->view->error_epid = $this->view->translate("Enter Epid");
						$error = 1;
					}

					if(strlen($_POST['comment']) < 1)
					{
						$this->view->error_comment = $this->view->translate("Enter comment");
						$error = 1;
					}
				}
				elseif($logininfo->usertype == 'CA')
				{
					if(strlen($_POST['epid']) < 1)
					{
						$this->view->error_epid = $this->view->translate("Enter Epid");
						$error = 1;
					}

					if(strlen($_POST['comment']) < 1)
					{
						$this->view->error_comment = $this->view->translate("Enter comment");
						$error = 1;
					}
				}

				if($error == 0)
				{
					$previleges = new Pms_Acl_Assertion();
					$return = $previleges->checkPrevilege('removepatient', $logininfo->userid, 'candelete');

					if(!$return || ($logininfo->usertype != 'SA' && $logininfo->usertype != 'CA'))
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}

					if($logininfo->usertype == 'SA')
					{
						$client = $_POST['clientid'];
					}
					else
					{
						$client = $logininfo->clientid;
					}

					$ipid = Doctrine_Query::create()
						->select('*')
						->from('EpidIpidMapping')
						->where("epid = ?", $_POST['epid'])
						->andWhere('clientid=' . $client)
						->limit(1);
					$ipidarray = $ipid->fetchArray();

					if(count($ipidarray) > 0)
					{
						$remove = Doctrine_Query::create()
							->update('PatientMaster')
							->set('isdelete', 1)
							->set('comment','?', $_POST['comment'])
							->set('last_update_user', $logininfo->userid)
							->set('last_update','?', date("Y-m-d H:i:s"))
							->where("ipid = ?", $ipidarray[0]['ipid']);
						if($remove->execute())
						{
							$this->view->error_message = $this->view->translate("recorddeletedsuccessfully");
							$this->view->errorclass = "err";
						}
						else
						{
							$this->view->error_message = $this->view->translate('errorwhiledeletingpatient');
							$this->view->errorclass = "err";
						}
					}
					else
					{
						$this->view->error_message = $this->view->translate('invalidepiderrorwhiledeletingpatient');
						$this->view->errorclass = "err";
					}
				}
			}
		}

		public function fetchdeletedpatientslistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('deletedpatient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$columnarray = array("pk" => "p.id", "fn" => "p.first_name", "ln" => "p.last_name", "ad" => "p.admission_date", "ledt" => "p.change_date", "bd" => "p.birthd", 'ed' => 'epid_num');
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");

			$this->view->{"style" . $_GET['pgno']} = "active";
			$this->view->order = $orderarray[$_GET['ord']];

			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];
			$patient = Doctrine_Query::create()
				->select('count(*)')
				->from('PatientMaster p')
				->leftJoin("p.EpidIpidMapping e")
				->where("p.isdelete = 1");
			$patient->andWhere(' e.clientid = ' . $logininfo->clientid);

			$patientexec = $patient->execute();
			$patientarray = $patientexec->toArray();

			$limit = 50;
			$sql = "p.*, e.*, p.ipid, e.epid, p.birthd, p.admission_date, p.change_date, p.last_update,";
			$sql .= "CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(p.title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(p.salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(p.mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1)  as gensex";

			if($logininfo->usertype == 'SA' && $logininfo->showinfo != 'show')
			{
				$sql = "p.*,e.*,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex, ";
				
				
				
				
				
				
			}

			$patient->select($sql);
			$patient->limit($limit);
			$patient->orderBy($columnarray[$_GET['clm']] . " " . $_GET['ord']);
			$patient->offset($_GET['pgno'] * $limit);
			// 		echo $patient->getSqlQuery();exit;
			$patientlimitexec = $patient->execute();
			$patientlimit = $patientlimitexec->toArray();

			$client_users_q = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete = 0')
// 			->andWhere('clientid = "' . $logininfo->clientid . '"')
			;
			$client_users_arr = $client_users_q->fetchArray();

			foreach($client_users_arr as $k_qpa => $v_qpa)
			{
				$users_details[$v_qpa['id']]['first_name'] = $v_qpa['first_name'];
				$users_details[$v_qpa['id']]['last_name'] = $v_qpa['last_name'];
			}

			$grid = new Pms_Grid($patientlimit, 1, $patientarray[0]['count'], "deletedpatients.html");
			$grid->users_details = $users_details;
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("deletedpatientsnav.html", 5, $_GET['pgno'], $limit);


			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patient/fetchdeletedpatientslist.html');

			echo json_encode($response);
			exit;
		}
		
		public function careregulationAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
		
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */
		
			 
			/* ------------------------------------------------------------------------------ */
			$phelathinsurance = new PatientHealthInsurance();
			$patient_healthinsurance = $phelathinsurance->getPatientHealthInsurance($ipid);
			$private_patient = $patient_healthinsurance[0]['privatepatient'];
		
 
	  
			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();
		
			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}
		
			$this->view->multiplestamps_option = $multiplestamps_option;
			/* ------------------------------------------------------------------------------ */
		
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
		
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'] . "\n" . $parr['street1'] . "\n" . $parr['zip'] . " " . $parr['city'];
			$this->view->birthdate = $parr['birthd'];
			$this->view->patientname1 = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->patietnaddress = $parr['street1'] . "&nbsp;" . $parr['zip'] . "\n" . $parr['city'];
		
			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}
		
			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];
		
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
		
			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
		
			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];
		
			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
		
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}
		
			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;
		
			$brenmber = Doctrine_Query::create()
			->select('*')
			->from('PatientQpaMapping')
			->where("epid= ?", $epid);
			$bexec = $brenmber->execute();
			$barray = $bexec->toArray();
		
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->arzt_nr = $uarray['LANR'];
			}
		
			/* ------------------- 	Maindiagnosis		------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
		
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
		
			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}
		
			if(strlen($diagnosis) > 0)
			{
				$this->view->diagnosen = $diagnosis;
			}
			else
			{
				$this->view->diagnosen = '';
			}
		
			/* ---------------------------------------------------- */
			$pdrug = new PatientDrugPlan();
			$drugarray = $pdrug->getPatientDrugPlan($decid);
		
			$comma = "";
			foreach($drugarray as $key => $val)
			{
				$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
				if(!empty($medca))
				{
					$medcaarray = $medca->toArray();
				}
				$this->view->medication .= $comma . $medcaarray['name'] . " | " . $val['dosage'];
				$comma = "\n";
			}
		
			/* --------------------------------User select------------------------------------- */
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
		
			$users = new User();
			$userarray = $users->getUserByClientid($logininfo->clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();
			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['last_name']) . " " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;
			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				// show select to all
				$showselect = 1;
			}
			$this->view->showselect = $showselect;
		
			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
		
			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
		
			$this->view->users_mstamps = $users_mstamps;
		
			if($this->getRequest()->isPost())
			{
				if(strlen($_POST['save']) > 0)
				{
					if($_POST['stampusers'] > 0)
					{
						if($multiplestamps_option === true)
						{
							$stamp_info = explode('-', $_POST['stampusers']);
							$stamp_user = $stamp_info[0];
							$stamp_id = $stamp_info[1];
		
							$ustamp = new UserStamp();
							$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
		
							$_POST['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
							$_POST['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
						}
						else
						{
							$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
							if($userst)
							{
								$uarray = $userst->toArray();
								$_POST['arzt_nr'] = $uarray['LANR'];
								$_POST['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
							}
						}
					}
		
					$_POST['stamp_block'] = strip_tags(str_replace('<br/>', "\n", $_POST['stamp_block']));
					// save pdf
					$this->generatePdfNew(4, $_POST, 'careregulation_save', "careregulation_pdf.html");
					//$this->generatePdfNew(3, $_POST, 'careregulation_save', "careregulation_pdf.html");
					
					// redirect to blank form
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
					
				}
				else if(strlen($_POST['pre_print']) > 0)
					{
						$this->generatePdfNew(3, $_POST, 'careregulation_pre', "careregulation_pre_pdf.html");
					}
					else
					{
						$this->generatePdfNew(3, $_POST, 'careregulation', "careregulation_pdf.html");
					}
			}
		}
		
		/**
		 * @cla on 05.06.2018
		 * @deprecated - use patientnew/versorger
		 */
		public function churchAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);
		
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
		
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
		
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
		
			/* ######################################################### */
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('patientdetails ', $logininfo->userid, 'canedit');
			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
				exit;
			}
		
			$this->view->pid = $_GET['id'];
			if($_GET['decid'] > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$returnadd = $previleges->checkPrevilege('patientdetails', $logininfo->userid, 'candelete');
		
				if(!$returnadd)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}
				
				$q = Doctrine_Query::create();
				$q->select('*');
				$q->from('PatientChurches');
				$q->where('chid= ?',  $_GET['decid']);
				$q->andWhere('ipid= ?', $ipid );
				$chspdata = $q->fetchArray();
				
				$chspid = $chspdata[0]['id'];
				$chspform = new Application_Form_PatientChurches();
				$chspform->deletedata($chspid);
		
				$this->view->error_message = $this->view->translate("recorddeletedsucessfully");
				$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
			}
		
			$this->view->act = "patient/church?id=" . $_GET['id'] . "&chsid=" . $_GET['chsid'];

		
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
					
			if($this->getRequest()->isPost())
			{
				$a_post = $_POST;

				$chsform = new Application_Form_Churches();
		
				if($chsform->validate($a_post))
				{										
					$chsinfo = $chsform->InsertFromTabData($a_post);
					$a_post['hidd_chsid'] = $chsinfo->id;					
					
					if($_GET['chsid'] > 0)
					{
						if($_GET['chsid'] == $a_post['hidd_chsid'])
						{
							$q = Doctrine_Query::create();
							$q->select('*');
							$q->from('PatientChurches');
							$q->where('chid= ?', $_GET['chsid']);
							$q->andWhere('ipid= ?', $ipid);
							$chspdata = $q->fetchArray();												
							
							$a_post['id'] = $chspdata[0]['id'];
							$chspform = new Application_Form_PatientChurches();
							$chspform->updatedata($a_post);
						}
						else
						{
							$q = Doctrine_Query::create();
							$q->select('*');
							$q->from('PatientChurches');
							$q->where('chid= ?', $_GET['chsid']);
							$q->andWhere('ipid= ?', $ipid);
							$chspdata = $q->fetchArray();
								
							$a_post['id'] = $chspdata[0]['id'];
							$chspform = new Application_Form_PatientChurches();
							$chspform->changedata($a_post);
						}
					}
					else
					{
						$a_post['ipid'] = $ipid;
						$chspform = new Application_Form_PatientChurches();
						$chspform->insertdata($a_post);
					}
					$this->view->error_message = $this->view->translate("recordupdatedsucessfully");
					if($_REQUEST['noredir'] != 1)
					{
						$this->_redirect(APP_BASE . 'patient/patientdetails?flg=suc&id=' . $_GET['id']);
					}
					else
					{
						echo json_encode(array("success" => "1", "chsidInserted" => $a_post['hidd_chsid']));
						exit;
					}
			}
				else
				{
					$chsform->assignErrorMessages();
					$this->retainValues($_POST);
				}
			}
		
			$churches = new Churches();
			$churchesarray = $churches->getChurch($_REQUEST['chsid']);
			
			$this->view->indrop = 0;
		
			if(!empty($churchesarray))
			{
				
				$pat_chs = new PatientChurches();			
				$comm = $pat_chs->getPatientChurch($ipid, $_GET['chsid']);
				
				$this->view->church_comment = $comm[0]['chs_com'];				
				$this->retainValues($churchesarray[0]);
				$this->view->church = $churchesarray[0]['name'];
				$this->view->old_contact_firstname = trim($churchesarray[0]['first_name']);
				$this->view->old_contact_lastname = trim($churchesarray[0]['last_name']);
				$this->view->first_name = trim($churchesarray[0]['contact_firstname']);
				$this->view->last_name = trim($churchesarray[0]['contact_lastname']);
				$this->view->hidd_chsid = $churchesarray[0]['id'];
				$this->view->indrop = $churchesarray[0]['indrop'];
			}
			
			/*			 * ******* Patient Information ************ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ****************************************** */
		}
		
		public function muster2bAction()
		{
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
		
			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
		
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */
			
			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();
			
			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}
			
			$this->view->multiplestamps_option = $multiplestamps_option;
				
		
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
		
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'] . "\n" . $parr['street1'] . "&nbsp;" . $parr['zip'] . "\n" . $parr['city'];
			$this->view->birthdate = $parr['birthd'];
					
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
		
			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];
		
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->arzt_nr = $uarray['LANR'];
			}
			
			/* ------------------- 	Maindiagnosis		------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
			
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
			
			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ", ";
					}
				}
			}
			
			if(strlen($diagnosis) > 0)
			{
				$this->view->relevante_Input = $diagnosis;
			}
			else
			{
				$this->view->relevante_Input = '';
			}
			
			/* --------------------------------User select------------------------------------- */
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
			
			$users = new User();
			$userarray = $users->getUserByClientid($logininfo->clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();
			
			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['user_title']) . " " .trim($user['last_name']) . ", " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;
			
			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				$showselect = 1; // show select to all
			}
			
			$this->view->showselect = $showselect;
			
			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
			
			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;
			
			//get saved form data
			$muster2b = new Muster2b();
			$muster2b_data = $muster2b->get_muster2b_patient_data($ipid);
			if(!empty($muster2b_data))
			{
			$this->retainValues($muster2b_data);
			}
			//var_dump($muster2b_data); exit;
			
			/* -------------- Pain questionnaire file history	---------------------------- */
			$fileupload = new PatientFileUpload();
			$form_files = $fileupload->get_muster2b_file_data($ipid);
				
			$users_ids[] = '9999999999';
			foreach($form_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}
			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			$this->view->muster_files_history = $form_files;
			
			if($this->getRequest()->isPost())
			{
				//var_dump($_POST); exit;
				$muster2b_form = new Application_Form_Muster2b();
				
				if($_POST['stampusers'] > 0)
				{
					if($multiplestamps_option === true)
					{
				
						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];
				
						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
				
						$_POST['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
						$_POST['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
					}
					else
					{
				
						$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
						if($userst)
						{
							$uarray = $userst->toArray();
							$_POST['arzt_nr'] = $uarray['LANR'];
							$_POST['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
						}
					}
				}
				
				if($_POST['post_status'] == "reset"){
						
					// mark as completed the old entry
					$muster2b_form->mark_as_completed($_POST);						
						
					$_POST['stamp_block'] = strip_tags(str_replace('<br/>', "\n", $_POST['stamp_block']));
					$_POST['patient_name'] = $_POST['patient_name'];
						
					// save pdf
					$this->generatePdfNew(4, $_POST, 'muster2b_save', "muster2bpdf.html");
						
					// redirect to blank form
					$this->_redirect(APP_BASE . "patient/muster2b?id=" . $_GET['id']);
					exit;
				}
				else{
					
					if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) == '0')
					{
						
						$muster2b_save_data = $muster2b_form->insert_data($ipid, $_POST);
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
					else if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) > '0')
					{
						$muster2b_update_data = $muster2b_form->update_data($ipid,$_POST);
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
					else if($_POST['post_status'] == "pdf_pre_print")
					{	
						
						$this->generatePdfNew(3, $_POST, 'muster2b_pre', "muster2b_pre_pdf.html");
					}
					else if($_POST['post_status'] == "pdf_print")
					{
						
						$this->generatePdfNew(3, $_POST, 'muster2b', "muster2bpdf.html");
					}
				}
			}
					
			/*if($this->getRequest()->isPost())
			{
				//var_dump($_POST); exit;
				//$_POST['patient_name'] = nl2br($_POST['patient_name']);
				$this->generatePdfNew(3, $_POST, 'muster2b', "muster2b2pdf.html");
			}*/
		}
		
		private function calculateTextColor($color)
		{
			$c = str_replace('#','',$color);
			$rgb[0] = hexdec(substr($c,0,2));
			$rgb[1] = hexdec(substr($c,2,2));
			$rgb[2] = hexdec(substr($c,4,2));
			if ($rgb[0]+$rgb[1]+$rgb[2]<382) {
				return '#fff';
			} else {
				return '#000';
			}
		}
		

		public function fileuploadAction()
		{
			//upload_file_attachment from qq js ajax and exit
			if ($this->getRequest()->isXmlHttpRequest())
			{
				if ( ! empty($this->dec_id)) {
					$decid = $this->dec_id;
				} else {
					$decid = Pms_Uuid::decrypt($_REQUEST['id']);
					if ( is_null($this->dec_id) && ! empty($decid) ) {
						$this->dec_id = $decid; // later used on file upload
					}
				}
				
				if ( ! empty($this->ipid)) {
					$ipid = $this->ipid;
				} else {
					$ipid = Pms_CommonData::getIpid($decid);
					if ( is_null($this->ipid) && ! empty($ipid) ) {
						$this->ipid = $ipid; //later used on file upload
					}
				}
				
				$max_filesize	= 10 * 1000 * 1024; // this should be done via a ini_get('upload_max_filesize') && a hardcoded max size for the specific action
				$action_name	= ! empty($_POST['action_name']) ? $_POST['action_name'] : $this->getRequest()->getControllerName() ;
				$file_extension	= array('doc', 'docx', 'pdf', 'csv','jpeg', 'jpg', 'gif', 'png'); //$allowed_file_extensions
				
				$tabname = isset( $_POST['tabname']) ?  $_POST['tabname'] : ''; //used to identify the file later
				
				$file_date = isset( $_POST['file_date']) ?  $_POST['file_date'] : null; //this is user-input "the idea is that the user can add the date FROM WHEN THIS FORMAL DOCUMENT IS"
				
				// a title prefix if formed from translating the tabname
				$title_prefix = '';
				if ( ! empty($tabname) ) {
					$tabname_tr = $this->translate($tabname);
					$title_prefix = (! empty($tabname_tr) && is_string($tabname_tr)) ? $tabname_tr : '';
					
				}
				
				$recordid = ''; // record id @todo
				
				
				$response = array();
				
				switch( $_POST['action']) // there are only 2 main actions = upload_file_attachment or delete
				{
					case "upload_file_attachment"://this can have child-actions
							
						
						$response = $this->upload_qq_file( array(
						"allowed_file_extensions" => $file_extension,
						"max-filesize" => $max_filesize,
						"action" => $action_name,
						));
							
						//child-action
						//this will also save the file now to patient_file tab and to ftp
						if (isset($_POST['upload_and_save'])
						    && filter_var ($_POST['upload_and_save'], FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)
					        && $response["success"] == true 
						) 
						{
							$filesave_options = array(
									'ipid'		=> $ipid,
									'qquuid'	=> array(),
									'remove_after_save'	=> true, //remove files from local hdd after success save on ftp
									'options'	=> array(
											'file_details' => array(),
											'extra options go here' => array(), // this is for demo
											'extra options2 go here' => "",// this is for demo 
									));
							
							$filesave_options['qquuid'] = array($response['qquuid']);
							$filesave_options['options']['file_details'] = array(
													'tabname'		=> $tabname,
													'recordid'		=> $recordid,
													'title_prefix'	=> $title_prefix,
													'file_date'		=> $file_date,
							);
							
							$result_filesave = $this->_filesave( $action_name,  $filesave_options);
							if ( ! empty($result_filesave)) {
								$response['redirect'] = $result_filesave['redirect'];
							}
							
							
						}	
						break;
							
					case "delete":
							
						if( ! empty($_POST['qquuid'])) {
		
							$this->set_last_uploaded_file( $action_name , $_POST['qquuid']);
		
							$response = array(
									"success"	=> true,
							);
							
						} else {
		
							$response = array(
									"success"	=> false,
									"error"		=> "fatal error, contact admin"
							);
						}
		
						break;
							
				}
		
				$this->_helper->json->sendJson($response);
				exit;// for readability
			}
		
		}
		
		
		private function _filesave( $action_name = '',  $options = array() ) {
			
			$result = array();
			
			$ipid = $options['ipid'];
			
			$qquuid = $options['qquuid'];
			
			$remove_after_save =  $options['remove_after_save'];
			
			$save_options = $options['options'];
			
			$last_files = $this->get_last_uploaded_file( $action_name );
			
			if ( ! empty($last_files)) {
			
				$af_pfu_obj = new Application_Form_PatientFileUpload();
				$result = $af_pfu_obj->saveFiles( $ipid, $last_files, $qquuid, $save_options);
				
				//result should containn an array with ids from saved files
				if ( ! empty($result)) {
					
					$result['redirect'] = true;
					//$response['redirect_location'] = true;
					
					if ( $remove_after_save == true ) {
						//$this->set_last_uploaded_file( $action_name, $qquuid); //unlink last saved files from this action
						$this->set_last_uploaded_file( $action_name); //unlink all files from this action
					}
					
					
				}
				
				
			
			} //else we have no files to upload
			
			return $result;
		}
		
		
		
		
		
		


        /**
         *  @auth Ancuta    
         *  Save datta from NEW patient details
         *  TODO-1750
         *  16.08.2018
         * 
         */

		public function savepatientneactionsAction(){
		   
		    $this->_helper->layout->setLayout('layout_ajax');
		    $this->_helper->viewRenderer->setNoRender();
		    
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $userid = $logininfo->userid;
		    $clientid = $logininfo->clientid;
		    
		    $decid = Pms_Uuid::decrypt($_GET['id']);
		    $ipid = Pms_CommonData::getIpId($decid);
		
		    /*			 * ******* Patient History ************ */
		    $patientmaster = new PatientMaster();
		    $patient_falls_master = $patientmaster->patient_falls($ipid);
		    $patientdetails = $patientmaster->get_patientMasterData();
		
		     
		    if($this->getRequest()->isPost() && $_REQUEST['mode'] == 'vv_edit')
		    {
		        $new_date = date('Y-m-d', strtotime($_POST['vv_edit_date']));
		        $new_date_full = date('Y-m-d', strtotime($_POST['vv_edit_date'])) . ' ' . date('H:i:s', time());
		         
		        $previous_date = date('Y-m-d H:i:s', strtotime($_POST['vv_previous_date']));
		        $next_date = date('Y-m-d H:i:s', strtotime($_POST['vv_next_date']));
		         
		        $previous_date_full = date('Y-m-d H:i:s', strtotime($_POST['vv_previous_date_full']));
		        $next_date_full = date('Y-m-d H:i:s', strtotime($_POST['vv_next_date_full']));
		         
		        $current_date_full = date('Y-m-d H:i:s', strtotime($_POST['vv_current_date_full']));
		         
		        if(strtotime($new_date) < strtotime($previous_date))
		        {
		            $error = "date must be bigger then previous date";
		        }
		        elseif(strtotime($new_date) > strtotime($next_date))
		        {
		            $error = "date must be lower then next date";
		        }
		        elseif(strtotime($new_date) >= strtotime($previous_date) && strtotime($new_date) <= strtotime($next_date))
		        {
		            //update patient master if current_date_full == p.vollversorgung_date
		            if($_POST['vv_date_type'] == '1')
		            {
		                $q_upd = Doctrine_Query::create()
		                ->update('PatientMaster')
		                ->set('vollversorgung_date','?', $new_date_full)
		                ->where('ipid LIKE ?', $ipid)
		                ->andWhere('vollversorgung_date	= ?', $current_date_full)
		                ->andWhere('vollversorgung = ?',"1");
		                $q_exec = $q_upd->execute();
		            }
		             
		            $q = Doctrine_Query::create()
		            ->update('VollversorgungHistory')
		            ->set('date','?', $new_date_full)
		            ->set('change_date','?', date('Y-m-d H:i:s'))
		            ->set('change_user','?', $userid)
		            ->where("ipid = ?", $ipid)
		            ->andWhere("date_type = ?", $_POST['vv_date_type'])
		            ->andWhere("date = ?", $current_date_full)
		            ->andWhere('id = ?', $_POST['vv_fallid']);
		            $q->execute();
		            $error = "date was edited";
		             
		            //add to Verlauf
		            if($_POST['vv_date_type'] == 1)
		            {
		                $comment_log = 'Das Beginn Vollversorgung wurde editiert: ' . date('d.m.Y', strtotime($current_date_full)) . ' -> ' . date('d.m.Y', strtotime($new_date));
		            }
		            elseif($_POST['vv_date_type'] == 2)
		            {
		                $comment_log = 'Das Ende Vollversorgung wurde editiert: ' . date('d.m.Y', strtotime($current_date_full)) . ' -> ' . date('d.m.Y', strtotime($new_date));
		            }
		             
		            $cust = new PatientCourse();
		            $cust->ipid = $ipid;
		            $cust->course_date = date("Y-m-d H:i:s", time());
		            $cust->course_type = Pms_CommonData::aesEncrypt("K");
		            $cust->course_title = Pms_CommonData::aesEncrypt(addslashes($comment_log));
		            $cust->user_id = $userid;
		            $cust->save();
		        }
		         
		
		        $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
		        exit; //for readability
		    }
		
		    //end vollversorgung from fallhistory
		    if($this->getRequest()->isPost() && $_REQUEST['mode'] == 'vv')
		    {
		         
		        if($patientdetails['vollversorgung'] == 1)
		        {
		             
		            if(strlen($_POST['end_vv_date']) > '0')
		            {
		                //if anlage is started then insert an end
		                $voll_date = date('Y-m-d', strtotime($_POST['end_vv_date'])) . ' ' . date('H:i:s', time());
		                $vollhistory = new VollversorgungHistory();
		                $vollhistory->ipid = $ipid;
		                $vollhistory->user_id = $userid;
		                $vollhistory->date = $voll_date;
		                $vollhistory->date_type = "2"; //1 =add voll 2- dismiss voll
		                $vollhistory->save();
		                 
		                // reset date in patient master
		                $custpm = Doctrine::getTable('PatientMaster')->find($decid);
		                $custpm->vollversorgung = 0;
		                $custpm->vollversorgung_date = "0000-00-00 00:00:00";
		                $custpm->save();
		                 
		                $cust = new PatientCourse();
		                $cust->ipid = $ipid;
		                $cust->course_date = date("Y-m-d H:i:s", time());
		                $cust->course_type = Pms_CommonData::aesEncrypt("K");
		                $cust->course_title = Pms_CommonData::aesEncrypt($this->view->translate('end_vollversorgung_verlauf'));
		                $cust->user_id = $userid;
		                $cust->done_date = $voll_date;
		                $cust->save();
		            }
		        }
		        else
		        {
		            if(strlen($_POST['start_vv_date']) > '0')
		            {
		                //if anlage is NOT started then insert a start
		                $voll_date = date('Y-m-d', strtotime($_POST['start_vv_date'])) . ' ' . date('H:i:s', time());
		                $vollhistory = new VollversorgungHistory();
		                $vollhistory->ipid = $ipid;
		                $vollhistory->user_id = $userid;
		                $vollhistory->date = $voll_date;
		                $vollhistory->date_type = "1"; //1 =add voll 2- dismiss voll
		                $vollhistory->save();
		                 
		                // reset date in patient master
		                $custpm = Doctrine::getTable('PatientMaster')->find($decid);
		                $custpm->vollversorgung = 1;
		                $custpm->vollversorgung_date = $voll_date;
		                $custpm->save();
		                 
		                $cust = new PatientCourse();
		                $cust->ipid = $ipid;
		                $cust->course_date = date("Y-m-d H:i:s", time());
		                $cust->course_type = Pms_CommonData::aesEncrypt("K");
		                $cust->course_title = Pms_CommonData::aesEncrypt($this->view->translate('start_vollversorgung_verlauf'));
		                $cust->user_id = $userid;
		                $cust->done_date = $voll_date;
		                $cust->save();
		            }
		        }
		         
		        $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_REQUEST['id'] , array("exit"=>true));
		        exit; //for readability
		    }
		     
		     
		     
		    $approve_visit_type_form = new Application_Form_PatientApprovedVisitTypes();
		    if($this->getRequest()->isPost() && strlen($_POST['visit_type']) > 0)
		    {
		        $post_data = $_POST;
		        $post_data['ipid'] = $ipid;
		        $approve_visit_type = $approve_visit_type_form->InsertData($post_data);
		         
		
		        $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
		        exit; //for readability
		    }
		     
		     
		     
		     
		    if($this->getRequest()->isPost() && count($_POST['pavt_edit']) > 0)
		    {
		        $post_data = $_POST;
		        $approve_visit_type = $approve_visit_type_form->UpdateData($post_data);
		         
		
		        $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
		        exit; //for readability
		    }
		     
		     
		     
		     
		    if($this->getRequest()->isPost() && strlen($_POST['del_pavt_id']) > 0)
		    {
		        $approve_visit_type = $approve_visit_type_form->DeleteData($_POST['del_pavt_id']);
		
		        $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
		        exit; //for readability
		    }
		     
		     
		 /*     
		     
		    $patient_medipumps_form = new Application_Form_PatientMedipumps();
		    if($this->getRequest()->isPost() && strlen($_POST['add_medipump']) == '1')
		    {
		        $post_data = $_POST;
		        $post_data['ipid'] = $ipid;
		        $add_patient_medipump = $patient_medipumps_form->insert_patient_medipumps($post_data);
		        //todo add todo entry for client koordinators with "Rezept Medikamentenpumpe bestätigen"
		        //get koord groups
		        $user_group = new Usergroup();
		        $master_groups = array("6"); //Koordination master group
		        $users_groups = $user_group->getUserGroups($master_groups);
		         
		        $text = 'Rezept Medikamentenpumpe bestätigen';
		        if(count($users_groups) > 0)
		        {
		            foreach($users_groups as $group)
		            {
		                $records_todo[] = array(
		                    "client_id" => $clientid,
		                    "user_id" => $userid,
		                    "group_id" => $group['id'],
		                    "ipid" => $ipid,
		                    "todo" => $text,
		                    "triggered_by" => 'system_medipumps',
		                    "create_date" => date('Y-m-d H:i:s', time()),
		                    "until_date" => date('Y-m-d H:i:s', time())
		                );
		            }
		        }
		         
		        if(count($records_todo) > 0)
		        {
		            $collection = new Doctrine_Collection('ToDos');
		            $collection->fromArray($records_todo);
		            $collection->save();
		        }
		         
		
		        $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
		        exit; //for readability
		    }
		     
		     
		     
		     
		     
		    if($this->getRequest()->isPost() && strlen($_POST['edit_medipump']) == '1' && strlen($_POST['edit_medipump_id']) > 0)
		    {
		        $post_data = $_POST;
		        $post_data['ipid'] = $ipid;
		         
		        $edit_patient_medipump = $patient_medipumps_form->update_patient_medipump($post_data, $_POST['edit_medipump_id']);
		         
		
		        $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
		        exit; //for readability
		    }
		     
		     
		     
		     
		    if($this->getRequest()->isPost() && strlen($_POST['del_medipump']) == '1' && strlen($_POST['del_medipump_id']) > 0)
		    {
		        $delete_patient_medipump = $patient_medipumps_form->delete_patient_medipump($ipid, $_POST['del_medipump_id']);
		         
		
		        $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
		        exit; //for readability
		    }
		     
		      */
		     
		     
		    //update admission/discharge dates
		    if($this->getRequest()->isPost() && strlen($_POST['sgbv_id_edit']) > 0)
		    {
		        $sgbv_status = new SgbvForms();
		        $quick_change = $sgbv_status->quick_change_status($_POST['sgbv_id_edit'], $_POST['status_sgbv'], $_POST['approve_date']);
		         
		        $data['old_status'] = $_POST['sgbv_initial_status'];
		        $data['status'] = $_POST['status_sgbv'];
		         
		        if($data['old_status'] != $data[status])
		        {
		            $sgbv_history = new Application_Form_SgbvFormsHistory();
		            $save_history = $sgbv_history->InsertHistorySgbvData($data, $_POST['sgbv_id_edit']);
		        }
		         
		        $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
		        exit; //for readability
		    }
		     
		     
		     
		     
		     
		     
		     
		    // delete sgbv
		    if($this->getRequest()->isPost() && strlen($_POST['del_sgbv_id']) > 0)
		    {
		        $sgbv_status = new SgbvForms();
		        $quick_change = $sgbv_status->delete_sgbv($_POST['del_sgbv_id']);
		         
		
		        $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'] , array("exit"=>true));
		        exit; //for readability
		    }
		     
		     
		     
		    //save from Fallhistorie ?
		    if($this->getRequest()->isPost() && isset($_POST['fald']) && !empty($_POST['edit_date']) && !empty($_POST['date_type']) && !isset($_POST['del_sgbv_id']))
		    {
	
		        $new_date = date('Y-m-d', strtotime($_POST['edit_date'])) . ' ' . date('H:i:s', strtotime($_POST['edit_time']));
		        $previous_date = $_POST['previous_date'];
		        $next_date = $_POST['next_date'];
		        $fall_type = $_POST['fall_type'];
		         
		         
		        $previous_fall_type = $patient_falls_master['falls'][$_POST['fall_nr']-1][0];
		        $next_fall_type = $patient_falls_master['falls'][$_POST['fall_nr']+1][0];
		         
		         
		        // Update only if the date was changed
		        if( strtotime(date("Y-m-d H:i",strtotime($new_date))) !=  strtotime(date("Y-m-d H:i",strtotime($_POST['current_date'])))) {
		            
		            if (strtotime($new_date) <= strtotime($previous_date)) {
		                $error = "date must be bigger then previous date";
		            } elseif (strtotime($new_date) >= strtotime($next_date)) {
		                $error = "date must be lower then next date";
		            } elseif (date("Y", strtotime($new_date)) < "2008") {
		                $error = "admission_date_error_before_2008";
		            } elseif (strtotime($new_date) > strtotime($previous_date) && strtotime($new_date) < strtotime($next_date)) {
		                if ($fall_type == "standbydelete") {
		
		                    // edit standby delete start / end
		                    if ($_POST['date_type'] == "1") {
		                        // change stanby end and standbydelete start
		                        $q = Doctrine_Query::create()->update('PatientStandbyDeleteDetails')
		                        ->set('date', '?', $new_date)
		                        ->set('change_date', '?', date('Y-m-d H:i:s'))
		                        ->set('change_user', '?', $userid)
		                        ->where("ipid = ?", $ipid)
		                        ->andWhere("date_type = ?", $_POST['date_type'])
		                        ->andWhere("date = ?", $_POST['current_date']);
		                        $q->execute();
		
		                        PatientMaster::get_patient_standbydelete_admissions($ipid);
		
		                        $q = Doctrine_Query::create()->update('PatientStandbyDetails')
		                        ->set('date', '?', $new_date)
		                        ->set('change_date', '?', date('Y-m-d H:i:s'))
		                        ->set('change_user', '?', $userid)
		                        ->where("ipid = ?", $ipid)
		                        ->andWhere("date_type = ?", 2)
		                        ->andWhere("date = ?", $_POST['current_date']);
		                        $q->execute();
		
		                        PatientMaster::get_patient_standby_admissions($ipid);
		                    } elseif ($_POST['date_type'] == "2") {
		
		                        // change stanby start and standbydelete end
		                        $q = Doctrine_Query::create()->update('PatientStandbyDeleteDetails')
		                        ->set('date', '?', $new_date)
		                        ->set('change_date', '?', date('Y-m-d H:i:s'))
		                        ->set('change_user', '?', $userid)
		                        ->where("ipid = ?", $ipid)
		                        ->andWhere("date_type = ?", $_POST['date_type'])
		                        ->andWhere("date = ?", $_POST['current_date']);
		                        $q->execute();
		
		                        PatientMaster::get_patient_standbydelete_admissions($ipid);
		
		                        $q = Doctrine_Query::create()->update('PatientStandbyDetails')
		                        ->set('date', '?', $new_date)
		                        ->set('change_date', '?', date('Y-m-d H:i:s'))
		                        ->set('change_user', '?', $userid)
		                        ->where("ipid = ?", $ipid)
		                        ->andWhere("date_type = ?", 1)
		                        ->andWhere("date = ?", $_POST['current_date']);
		                        $q->execute();
		
		                        PatientMaster::get_patient_standby_admissions($ipid);
		                    }
		
		                    // add to Verlauf
		                    if ($_POST['date_type'] == 1) {
		                        $comment_log = 'Das Gelöschte Anfragen aufnahmedatum wurde editiert: ' . date('d.m.Y H:i', strtotime($_POST['current_date'])) . ' -> ' . date('d.m.Y H:i', strtotime($new_date));
		                    } elseif ($_POST['date_type'] == 2) {
		                        $comment_log = 'Das Gelöschte Anfragen entlassungsdatum wurde editiert: ' . date('d.m.Y H:i', strtotime($_POST['current_date'])) . ' -> ' . date('d.m.Y H:i', strtotime($new_date));
		                    }
		
		                    $cust = new PatientCourse();
		                    $cust->ipid = $ipid;
		                    $cust->course_date = date("Y-m-d H:i:s", time());
		                    $cust->course_type = Pms_CommonData::aesEncrypt("K");
		                    $cust->course_title = Pms_CommonData::aesEncrypt(addslashes($comment_log));
		                    $cust->user_id = $userid;
		                    $cust->save();
		
		                    
		                    //ISPC-2614 Ancuta 17.07.2020
		                    $int_connection = new IntenseConnections();
		                    $share_direction = $int_connection->get_intense_connection_by_ipid($ipid);
		                    
		                    $patient_master = new PatientMaster();
		                    foreach ($share_direction as $direction_k => $share_info) {
		                        if (! empty($share_info['intense_connection'])) {
		                            foreach ($share_info['intense_connection'] as $con => $con_ionfo) {
		                                $IntenseConnectionsOptions = array_column($con_ionfo['IntenseConnectionsOptions'], 'option_name');
		                                if (in_array('patient_falls', $IntenseConnectionsOptions) ) {
		                                    $patient_master->intense_connection_patient_admissions($share_info['source'], $share_info['target']);
		                                }
		                            }
		                        }
		                    }
		                    // --
		                    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'], array(
		                        "exit" => true
		                    ));
		                    
		                    exit(); // for readability
		                } else {
		
		                    if ($fall_type == "standby") {
		
		                        if ($_POST['date_type'] == "2" && $next_fall_type == "standbydelete") {
		
		                            // change standby delete start
		                            $q = Doctrine_Query::create()->update('PatientStandbyDeleteDetails')
		                            ->set('date', '?', $new_date)
		                            ->set('change_date', '?', date('Y-m-d H:i:s'))
		                            ->set('change_user', '?', $userid)
		                            ->where("ipid = ?", $ipid)
		                            ->andWhere("date_type = ?", 1)
		                            ->andWhere("date = ?", $_POST['current_date']);
		                            $q->execute();
		
		                            PatientMaster::get_patient_standbydelete_admissions($ipid);
		                        } elseif ($_POST['date_type'] == "1" && $previous_fall_type == "standbydelete") {
		                            // change stanby end and standbydelete start
		                            $q = Doctrine_Query::create()->update('PatientStandbyDeleteDetails')
		                            ->set('date', '?', $new_date)
		                            ->set('change_date', '?', date('Y-m-d H:i:s'))
		                            ->set('change_user', '?', $userid)
		                            ->where("ipid = ?", $ipid)
		                            ->andWhere("date_type = ?", 2)
		                            ->andWhere("date = ?", $_POST['current_date']);
		                            $q->execute();
		
		                            PatientMaster::get_patient_standbydelete_admissions($ipid);
		                        }
		                    }
		                   
		                    $q = Doctrine_Query::create()->update('PatientReadmission')
		                    ->set('date', '?', $new_date)
		                    ->set('change_date', '?', date('Y-m-d H:i:s'))
		                    ->set('change_user', '?', $userid)
		                    ->where("ipid = ?", $ipid)
		                    ->andWhere("date_type = ?", $_POST['date_type'])
		                    ->andWhere("date = ?", $_POST['current_date']);
		                    $q->execute();
		
		                    $st_type = $_POST['date_type'];
		                    if ($fall_type == 'active' && $_POST['date_type'] == 1) {
		                        // update dischaerge_standby
		                        $st_type = "2";
		                    }
		
		                    // UPDATE STANDBY
		                    $q = Doctrine_Query::create()->update('PatientStandbyDetails')
		                    ->set('date', '?', $new_date)
		                    ->set('change_date', '?', date('Y-m-d H:i:s'))
		                    ->set('change_user', '?', $userid)
		                    ->where("ipid = ?", $ipid)
		                    ->andWhere("date_type = ?", $st_type)
		                    ->andWhere("date = ?", $_POST['current_date']);
		                    $q->execute();
		
		                    PatientMaster::get_patient_standby_admissions($ipid);
		
		                    $details_p = Doctrine_Query::create()->select('*')
		                    ->from('PatientMaster')
		                    ->where("ipid = ?", $ipid)
		                    ->andWhere("admission_date = ?", $_POST['current_date']);
		                    $details_pq = $details_p->fetchArray();
		
		                    if (! empty($details_pq)) {
		                        $adm_date_edit = $details_pq[0]['admission_date'];
		                        // update patient master
		                        $qa = Doctrine_Query::create()->update('PatientMaster')
		                        ->set('admission_date', '?', $new_date)
		                        ->set('change_date', '?', date('Y-m-d H:i:s'))
		                        ->set('change_user', '?', $userid)
		                        ->where("ipid = ?", $ipid);
		                        $qa->execute();
		
		                        $details_pr = Doctrine_Query::create()->select('*')
		                        ->from('PatientReadmission')
		                        ->where("ipid = ?", $ipid)
		                        ->andWhere("date = ?", $adm_date_edit)
		                        ->andWhere("date_type = ?", 1);
		                        $details_pqr = $details_pr->fetchArray();
		
		                        if (! empty($details_pqr)) {
		                            $q = Doctrine_Query::create()->update('PatientReadmission')
		                            ->set('date', '?', $new_date)
		                            ->set('change_date', '?', date('Y-m-d H:i:s'))
		                            ->set('change_user', '?', $userid)
		                            ->where("ipid = ?", $ipid)
		                            ->andWhere("date_type = ?", 1)
		                            ->andWhere("date = ?", $_POST['current_date']);
		                            $q->execute();
		                        }
		                    }
		
		                    if ($_POST['fald'] == 1) {
		                        // edited date is latest admission
		                        if ($_POST['date_type'] == 1) {
		                            // update patient master
		                            $qa = Doctrine_Query::create()->update('PatientMaster')
		                            ->set('admission_date', '?', $new_date)
		                            ->set('change_date', '?', date('Y-m-d H:i:s'))
		                            ->set('change_user', '?', $userid)
		                            ->where("ipid = ?", $ipid);
		                            $qa->execute();
		
		                            $q = Doctrine_Query::create()->update('PatientStandbyDetails')
		                            ->set('date', '?', $new_date)
		                            ->set('change_date', '?', date('Y-m-d H:i:s'))
		                            ->set('change_user', '?', $userid)
		                            ->where("ipid = ?", $ipid)
		                            ->andWhere("date_type = ?", 2)
		                            ->andWhere("date = ?", $_POST['current_date']);
		                            $q->execute();
		
		                            PatientMaster::get_patient_standby_admissions($ipid);
		                        }
		                    }
		
		                    if ($_POST['date_type'] == 2) {
		                        // update patient discharge
		                        $qd = Doctrine_Query::create()->update('PatientDischarge')
		                        ->set('discharge_date', '?', $new_date)
		                        ->set('change_date', '?', date('Y-m-d H:i:s'))
		                        ->set('change_user', '?', $userid)
		                        ->where("ipid = ?", $ipid)
		                        ->andWhere("discharge_date = ?", $_POST['current_date']);
		                        $qd->getSqlQuery();
		                        $qd->execute();
		
		                        $q = Doctrine_Query::create()->update('PatientStandbyDetails')
		                        ->set('date', '?', $new_date)
		                        ->set('change_date', '?', date('Y-m-d H:i:s'))
		                        ->set('change_user', '?', $userid)
		                        ->where("ipid = ?", $ipid)
		                        ->andWhere("date_type = ?", 1)
		                        ->andWhere("date = ?", $_POST['current_date']);
		                        $q->execute();
		
		                        PatientMaster::get_patient_standby_admissions($ipid);
		                    }
		
		                    $error = "date was edited";
		
		                    // add to Verlauf
		                    if ($_POST['date_type'] == 1) {
		                        $comment_log = 'Das Aufnahmedatum wurde editiert: ' . date('d.m.Y H:i', strtotime($_POST['current_date'])) . ' -> ' . date('d.m.Y H:i', strtotime($new_date));
		                    } elseif ($_POST['date_type'] == 2) {
		                        $comment_log = 'Das Entlassungsdatum wurde editiert: ' . date('d.m.Y H:i', strtotime($_POST['current_date'])) . ' -> ' . date('d.m.Y H:i', strtotime($new_date));
		                    }
		
		                    $cust = new PatientCourse();
		                    $cust->ipid = $ipid;
		                    $cust->course_date = date("Y-m-d H:i:s", time());
		                    $cust->course_type = Pms_CommonData::aesEncrypt("K");
		                    $cust->course_title = Pms_CommonData::aesEncrypt(addslashes($comment_log));
		                    $cust->user_id = $userid;
		                    $cust->save();
		
		                    //ISPC-2614 Ancuta 17.07.2020
    		                $int_connection = new IntenseConnections();
    		                $share_direction = $int_connection->get_intense_connection_by_ipid($ipid);
    		                
    		                $patient_master = new PatientMaster();
    		                foreach ($share_direction as $direction_k => $share_info) {
    		                    if (! empty($share_info['intense_connection'])) {
    		                        foreach ($share_info['intense_connection'] as $con => $con_ionfo) {
    		                            $IntenseConnectionsOptions = array_column($con_ionfo['IntenseConnectionsOptions'], option_name);
    		                            if (in_array('patient_falls', $IntenseConnectionsOptions) ) {
    	                                    $patient_master->intense_connection_patient_admissions($share_info['source'], $share_info['target']);
    		                            }
    		                        }
    		                    }
    		                }
                            // --
    		            
		                    $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'], array(
		                        "exit" => true
		                    ));
		                    exit(); // for readability
		                }
		            
		            
		            
		            }
		        } else {
		            $this->redirect(APP_BASE . "patientnew/patientdetails?id=" . $_GET['id'], array(
		                "exit" => true
		            ));
		            exit(); // for readability
		        }
		    }
		     
		}		
//Maria:: Migration CISPC to ISPC 22.07.2020		
  /**
         * Functionality for the Occupation plan in hospitals (IM-2)</p>
         * Transfer from ispc clinic.
         *
         * The functionality in detail:
         *  ../patient/patienttoroom?print=1
         *  -- show and edit the station list
         *  -- show death patientsof the last 7 days
         *  -- show and edit the waiting list
         *  ../patient/patienttoroom?print=1&pdf=1&rooms=1
         *  -- print the station list
         *  ../patient/patienttoroom?print=1&pdf=1
         *  -- print the station list
         *  -- print death patientsof the last 7 days
         *  -- print waiting list
         * Assign
         * ../patient/patienttoroom
         *  -- assign a patient to a bed - start from patienttoroom
         *  ../public/patient/patienttoroom?id=xyz
         *  -- assign a patient to a bed - start from patientcourse
         *
         */
        public function patienttoroomAction()
        {
            //define the status of the view
            $occupationplan = 'OCCUPATIONPLAN'; //patient/patienttoroom?print=1
            $assignment = 'ASSIGNMENT';         //patient/patienttoroom
            $ajax = 'AJAX';                     //patient/patienttoroom after AJAX-Request
            $printrooms = 'PRINTROOMS';         //patient/patienttoroom?print=1&pdf=1&rooms=1
            $printall =  'PRINTALL';            //patient/patienttoroom?print=1&pdf=1
            $editresidence = 'EDITRESIDENCE';   //patient/patienttoroom?id=xyz

            if ($_GET['id']) {
                $decid = Pms_Uuid::decrypt($_GET['id']);
                $ipid = Pms_CommonData::getIpid($decid);
                $this->view->ipid = $ipid;
                $this->view->encid = Pms_Uuid::encrypt($decid);
            }

            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $this->view->clientid = $clientid;
            $clinicBed = new ClinicBed();
            $patientClinicBed=new PatientClinicBed();

            //save the changes
            if ($this->getRequest()->isPost()) {
                //save the waiting list
                if ($_POST['stdbylist']) {
                    $content = $_POST['stdbylist'];
                    ClientConfig::saveConfig($clientid, 'stdbylist', $content);
                }

                if ($_POST['ajax']) {
                    //save the Assignment of the bed
                    if(isset($_POST['roomid']) && $_POST['roomid']>0) {


                        $ipid="#999";
                        if($_POST['eid']) {
                            $decid = Pms_Uuid::decrypt($_POST['eid']);
                            $ipid = Pms_CommonData::getIpid($decid);
                        }
                        $roomid=intval($_POST['roomid']);

                        //finish the occupancy for the given bed
                        $patientClinicBed->finish_bed_occupancy($roomid, $ipid, $clientid);

                        //the assignment to the room was NOT "free"
                        if ($ipid != "#999") {

                            //finish the occupancy for the given patient
                            $patientClinicBed->finish_patient_occupancy($roomid, $ipid, $clientid);

                            //create a new occupancy for the fiven bed and the given patient
                            $patientClinicBed->create_patient_occupancy($roomid, $ipid, $clientid);
                        }

                    }

                    //save the memos
                    if (isset($_POST['memos'])) {

                        $memos = array();
                        foreach ($_POST['memos'] as $memo) {
                            $iipid = Pms_CommonData::getIpid(Pms_Uuid::decrypt($memo[0]));;
                            $memos[$iipid] = $memo[1];
                        }
                        ClientConfig::saveConfig($clientid, 'stdbylistmemos', $memos);
                    }
                    //save the themes
                    if (isset($_POST['themen'])) {
                        $themen = array();
                        foreach ($_POST['themen'] as $thema) {
                            $iipid = Pms_CommonData::getIpid(Pms_Uuid::decrypt($thema[0]));;
                            $themen[$iipid] = $thema[1];
                        }
                        ClientConfig::saveConfig($clientid, 'stdbylistthemen', $themen);
                    }
                    //save the actions
                    if (isset($_POST['massnahmen'])) {
                        $massnahmen = array();
                        foreach ($_POST['massnahmen'] as $massnahme) {
                            $iipid = Pms_CommonData::getIpid(Pms_Uuid::decrypt($massnahme[0]));;
                            $massnahmen[$iipid] = $massnahme[1];
                        }
                        ClientConfig::saveConfig($clientid, 'stdbylistmassnahmen', $massnahmen);
                    }
                }
            }


            //**************** STATION List ************************************


            $this->view->patient_startpage_link="patientcourse/patientcourse";
            $user_c_details = User::getUserDetails($logininfo->userid);
            if($user_c_details[0]['patientstartpage'] && strlen($user_c_details[0]['patientstartpage'])>0){
                $this->view->patient_startpage_link = $user_c_details[0]['patientstartpage'];
            }

            //get all ClinicBeds for the Client
            $locAll = $clinicBed->getAllBeds($clientid);
            $this->view->rooms=$locAll;

            //get all active Patient-Ipids
            $patients = array();
            $ipids=PatientReadmission::getActiveIpids();
            $ipids=array_unique($ipids);

            //get further Informations for the patients (firstname, lastname)
            $patientnames = PatientMaster::getPatientNames($ipids,2);
            array_multisort(array_values($patientnames), SORT_ASC, SORT_STRING | SORT_FLAG_CASE, $patientnames);
            $patientnames['NOTASSIGNED'] = 'NOTASSIGNED'; //add an 'empty' patients for the view

            //initialize the patientlist()
            foreach($patientnames as $key => $value){
                $patients[$key]['name'] = $value;
                $patients[$key]['epid'] = '';
                $patients[$key]['doctors'] = '';
                $patients[$key]['birth'] = '';
                $patients[$key]['status'] = '';
                $patients[$key]['diaghd'] = '';
                $patients[$key]['diagnd'] = '';
                $patients[$key]['theme'] = '';
                $patients[$key]['action'] = '';
                $patients[$key]['memo'] = '';
            }



            //get the Rooms assigned to the patient
            $patlocs=$patientClinicBed->get_patients_beds_assignment($ipids, $clientid);

            //get a Map with key = ipid, value = location_id
            $ipid_to_location_id=array();
            $location_to_ipid=array();
            $ipids_with_details=array();
            foreach($patlocs as $patloc){
                $ipid_to_location_id[$patloc['ipid']]=$patloc['bed_id'];
                $location_to_ipid[$patloc['bed_id']] = $patloc['ipid'];
                $ipids_with_details[]=$patloc['ipid'];
            }

            $this->view->ipid_to_loc=$ipid_to_location_id;
            $this->view->loc_to_ipid=$location_to_ipid;


            //get a get epid for creating a link to the PateintCourse
            foreach ($ipids as $ipid){
                $patients[$ipid]['epid']=Pms_Uuid::encrypt(Pms_CommonData::getIdfromIpid($ipid));
            }

            if ($_GET['print']){

                $this->view->status = $occupationplan;

                //get the docotrs assigned to the pTIENT
                $qpa = new PatientQpaMapping();
                $assusers = $qpa->getAssignedUsernames($ipids_with_details, $clientid);

                foreach ($assusers as $key => $value){
                    $doctors = array();
                    foreach($value as $doctor){
                        $doctors[] = $doctor['name'];
                    }
                    $patients[$key]['doctors'] = implode(', ',$doctors);
                }


                //get the Diagnosis assigned to the patients
                $pd=new PatientDiagnosis();

                foreach ($ipids_with_details as $ipid){
                    $diag = $pd->get_main_diagnosis($ipid, $clientid);
                    $diag_neben = $pd->get_side_diagnosis($ipid, $clientid);
                    if($diag_neben){
                        $diag_neben['icd'] = array_slice($diag_neben['icd'], 0, 5);
                        $patients[$ipid]['diagnd'] = implode(', ', $diag_neben['all_str']);
                    }
                    //$ipid_to_diag[$ipid] = $diag['diagnosis']; //Diagnose without icd
                    //$ipid_to_diag_hd[$ipid] = $diag['icd']; //onlyicd
                    $patients[$ipid]['diaghd'] = implode(', ', $diag['all_str']); //Diagnose with icd


                }
                $this->view->freetextmode = Client::getClientconfig($clientid, 'belegungsplanfreetext');
                // THEME, ACTIONS and TODOS
                //get the memos
                $memos = ClientConfig::getConfig($clientid, 'stdbylistmemos');
                foreach($memos as $key=> $memo){
                    $patients[$key]['memo'] = $memo;
                }

                if ($this->view->freetextmode) {
                    //get the themes and the actions
                    $themen = ClientConfig::getConfig($clientid, 'stdbylistthemen');
                    foreach($themen as $key=> $theme){
                        $patients[$key]['theme'] = $theme;
                    }

                    $actions = ClientConfig::getConfig($clientid, 'stdbylistmassnahmen');
                    foreach($actions as $key=> $action){
                        $patients[$key]['action'] = $action;
                    }
                }

                if (!$this->view->freetextmode) {
                    //get the Team-Meeting-Details assigned for the patients
                    $action_memos = TeamMeetingDetails::get_patient_last_entries($ipids_with_details);
                    foreach($action_memos as $ipid => $memo){
                        $patients[$ipid]['theme'] = $memo[0][0];
                        $patients[$ipid]['action'] = $memo[0][1];
                    }
                }


                //getbirthdays of the patients
                foreach($ipids_with_details as $ipid) {
                    $mdata=PatientMaster::get_Masterdata_quick($ipid);
                    if(strlen($mdata['dob'])==10) {
                        $patients[$ipid]['birth'] =  $mdata['age']['years']  . " Jahre (" . $mdata['dob'] .")";
                    }
                }

                //get status of the patient
                foreach ($ipids_with_details as $ipid) {
                    $status = PatientMaster::getPatientStatus($ipid);
                    $status = $status[$ipid]['status_name'];
                    $patients[$ipid]['status'] = $status;
                    $patients[$ipid]['status_colour'] = 'status';
                    if ($status == 'stabil'){
                        $patients[$ipid]['status_colour'] = 'status green';
                    }
                    elseif ($status == 'instabil'){
                        $patients[$ipid]['status_colour'] = 'status yellow';
                    }
                    elseif ($status == 'Krise'){
                        $patients[$ipid]['status_colour'] = 'status red';
                    }
                }



                //discharge-planning
                foreach ($ipids_with_details as $ipid) {
                      $formgeneric = new FormGenericSimpleForm();
                      $discharge = $formgeneric->get_list_patient_dischargeplanning($ipid, true);
                      if($discharge){
                          $patients[$ipid]['discharge_date'] = $discharge[0]['entlassplanung']['date'];
                          $patients[$ipid]['discharge_target'] = $discharge[0]['entlassplanung']['entlassziel'];
                      }
                }

              $this->view->patients = $patients;


                //**************** DEATH PATIENTS List ************************************
                
                //TODO Filter for Stations-patients. In ISPC clinic the table 'PatientReadmission' is used for this,
                // but in CISPC this is no longer possible
              $dis_ids=DischargeMethod::getDeathMethod($clientid);

                $daysback=date('Y-m-d 00:00:00', strtotime('-7 days'));

                //get The death Patients from Dischange-Table
                $discharged_q = Doctrine_Query::create()
                    ->select('ipid, discharge_date as death_date')
                    ->from('PatientDischarge')
                    ->wherein('discharge_method',$dis_ids)
                    ->andWhere("discharge_date > ?",$daysback)
                    ->andWhere('isdelete = 0');
                $discharged_arr = $discharged_q->fetchArray();

                //get The death Patients from Death-Table
                $death_q = Doctrine_Query::create()
                    ->select('ipid, death_date as death_date')
                    ->from('PatientDeath')
                    ->Where("death_date > ?",$daysback)
                    ->andWhere('isdelete = 0');
                $death_arr = $death_q->fetchArray();

                //merge the result with key = ipid
                foreach($death_arr as $dis){
                    if(array_search($dis['ipid'], array_column($discharged_arr, 'ipid')) === false)
                       $discharged_arr[]=array(
                        'ipid'=>$dis['ipid'],
                        'death_date'=>$dis['death_date']
                    );
                }

                //get the ipids
                $ipids_death=array_column($discharged_arr, 'ipid');


                //Hotfix 17.11.2020 Nico
                //Filter by client
                if(count($ipids_death)){
                    $death_q2 = Doctrine_Query::create()
                        ->select('ipid')
                        ->from('EpidIpidMapping e')
                        ->Where("e.clientid=?",$clientid)
                        ->andWhereIn('e.ipid ',$ipids_death);
                    $death_arr_client = $death_q2->fetchArray();
                    $ipids_death = array_column($death_arr_client, 'ipid');

                    $discharged_arr_filtered=[];
                    foreach($discharged_arr as $dis){
                        if(in_array($dis['ipid'], $ipids_death)){
                            $discharged_arr_filtered[]=$dis;
                        }
                    }
                    $discharged_arr=$discharged_arr_filtered;
                }
                //Hotfix END

                $patients=PatientMaster::getPatientNames($ipids_death,2);
                $ages=PatientMaster::getPatientAges($ipids_death, $discharged_arr);

                $death_list=array();

                foreach($discharged_arr as $dis){
                    
                        $encid = Pms_Uuid::encrypt(Pms_CommonData::getIdfromIpid($dis['ipid']));
                         $death_list[] = array(
                            'ipid' => $dis['ipid'],
                            'date' => $dis['death_date'],
                            'name' => $patients[$dis['ipid']],
                            'age' => $ages[$dis['ipid']],
                            'encid'=>$encid
                        );
                    }

                array_multisort(array_column($death_list, 'date'), SORT_DESC,$death_list);
                $this->view->deathlist=$death_list;
                //**************** DEATH PATIENTS LIST END ************************************

                //**************** WAITING-LIST **********************************************
                $stdbylist = ClientConfig::getConfig($clientid,'stdbylist');

               //add an 'empty' element for the view
                if(empty($stdbylist)) {
                    $entry = array();
                    $entry['name'] = '';
                    $entry['age'] = '';
                    $entry['date'] = '';
                    $entry['datep'] = '';
                    $entry['diag'] = '';
                    $entry['prob'] = '';
                    $entry['orig'] = '';
                    $entry['prio'] = '';
                    $stdbylist[] = $entry;
                }
                $this->view->stdbylist = $stdbylist;

                //**************** WAITING-LIST END ******************************************

            }


            if ($_GET['assign']){
                $this->view->status = $assignment;
                $this->view->patients = $patients;
            }

            if ($_GET['id']){
                $this->view->status = $editresidence;
                $this->view->patients = $patients;
            }

            if($_POST['ajax']){
                $this->view->status = $ajax;
                $this->_helper->layout->setLayout('layout_ajax');
                $this->view->patients = $patients;
            }


            if ($_GET['pdf']) {
                 if (isset($_GET['rooms'])) {
                    $this->view->status = $printrooms;
                }
                else{
                    $this->view->status = $printall;
                }

                //set the print-layout
                $this->_helper->layout->setLayout('layout_ajax');
                $this->_helper->viewRenderer->setNoRender();
                $this->view->pdf=true;

                $rend=$this->view->render('patient/patienttoroom.html');

                $footer_text = $this->view->translate('[Page %s from %s]');
                $options = array(
                    "orientation" => "L",
                    "customheader" => "Belegungsplan",
                    "footer_type" => "1 of n",
                    "footer_text" => $footer_text
                );
                Pms_PDFUtil::generate_pdf_to_browser($rend, 'Belegungsplan', $options);

            }


        }


		//Maria:: Migration CISPC to ISPC 22.07.2020
        public function patientcasestatusAction(){

            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $this->view->pid = Pms_Uuid::encrypt($decid);
            $ipid = Pms_CommonData::getIpid($decid);
            $model = new PatientCaseStatus();
            $userid = $logininfo->userid;

             if ($this->getRequest()->isPost()) {
                 //save the waiting list
                 if (isset($_POST['case'])) {
                     $content = $_POST['case'];
                     //ISPC-2807 Lore 25.02.2021
                     $model->save_patient_case_status_toVerlauf($ipid, $content);
                     //.
                     $model->update_list_patient_status($ipid, $clientid, $content);
                     $model->update_patient_master_for_clinic_case_status($ipid, $clientid);
                 }
                 if (isset($_POST['delete_discharge'])){
                     $id_to_delete = $_POST['delete_discharge'];
                     $discharge_data = $model->get_patient_status($id_to_delete);
                     
                     $discharge_datetime = $discharge_data->disdate;
                     $discharge_case = $discharge_data->case_number;
                     $dischargeMethod = new DischargeMethod();
                     $arr_dismethodid_to_method = $dischargeMethod->getDischargeMethod($clientid, 1);
                     //$this->dismethodid_to_method[$discharge['discharge_method']]
                     $discharge_method_as_text  = $arr_dismethodid_to_method[$discharge_data->discharge_method];
                     $dischargeLocation = new DischargeLocation();
                     $arr_discharge_locations = $dischargeLocation->getDischargeLocation($clientid, 1, true);// ISPC 1558 - sort alphabetically

                     $discharge_location_as_text  = $arr_discharge_locations[$discharge_data->discharge_location];

                     
                     $model->rollback_discharge($ipid, $clientid, $id_to_delete);
                     $pdischarge = Doctrine::getTable('PatientDischarge')->findOneByIdAndIpid($_POST['discharge_id_in_discharge_table'],$ipid);
                     if(is_object($pdischarge)){
                         $pdischarge->isdelete=1;
                         $pdischarge->save();
                     }

                     $cust = array();
                     $cust['ipid'] = $ipid;
                     $cust['course_date'] = date("Y-m-d H:i");
                     $cust['course_type'] = "K";
                     $cust['course_title'] = $this->translate('dischargeremove') . ','
                         . $this->translate('sapv_case_number') . ': '  . $discharge_data->case_number
                         . ','  .$this->translate('dischargedate') . ': '  . date("d.m.Y H:i", strtotime(strval($discharge_datetime) )) .
                         ',' . $this->translate('dischargelocation') . ': '  . $discharge_location_as_text .
                     ',' . $this->translate('dischargemethod')  . ': ' . $discharge_method_as_text;
                     $cust['tabname'] = 'patient_case_status';
                     $cust['user_id'] = $userid;
                     $cust['recordid'] = $id_to_delete;

                     $pc = new PatientCourse();
                     $pc_id = $pc->set_new_record($cust);
                     //$patStatus =
                 }
             }



            $this->view->patientcases = $model->get_list_patient_status($ipid,$clientid);
            $this->view->casetypes = $model->case_types;
            $this->view->casestatus = $model->case_status;


            $patientmaster = new PatientMaster();
            $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

            $pd= new PatientDischarge();
            //$this->view->discharges=$pd->getPatientDischarge($ipid);
            //print_r($this->view->discharges);
            $this->view->discharges = $model->get_list_patient_status_discharge($ipid, $clientid);
            //print_r($this->view->discharges);

            $pdl= new DischargeMethod();
            $this->view->dismethodid_to_method=$pdl->getDischargeMethod($clientid, 1);


            $tm = new TabMenus();
            $this->view->tabmenus = $tm->getMenuTabs();

        }

        public function patientopsAction(){
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $logininfo= new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $userid = $logininfo->userid;
            $ipid=Pms_CommonData::getIpid($decid);

            /*#########################################################*/
            $isclient = Pms_CommonData::getPatientClient($decid,$logininfo->clientid);

            if(!$isclient)
            {
                $this->_redirect(APP_BASE."overview/overview");
            }

            $isdicharged = PatientDischarge::isDischarged($decid);
            $this->view->isdischarged = 0;
            if($isdicharged)
            {
                $this->view->isdischarged = 1;
            }
            /*#########################################################*/

            if($_GET['ajax']){
                $this->_helper->layout->setLayout('layout_ajax');
                $this->view->quicklook=1;
            }else{
                $this->view->quicklook=0;
            }

            if(!$this->view->quicklook) {
                $this->view->patclass = "active";
                $patientmaster = new PatientMaster();
                $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
                $tm = new TabMenus();
                $this->view->tabmenus = $tm->getMenuTabs();
            }

            $htmlcontent=PatientCaseStatus::get_opsoverview_k_html($ipid,$_GET['caseid'], $this->view->quicklook, $_GET['pdf']);

            $this->view->htmlcontent=$htmlcontent;

            if($_GET['pdf']){
                $footer_text = $this->view->translate('[Page %s from %s]');
                $header_text=Pms_PDFUtil::generate_patient_header($ipid);
                $options = array(
                    "orientation" => "P",
                    "customheader" => "Zeiterfassung für " . $header_text,
                    "footer_type" => "1 of n",
                    "footer_text" => $footer_text
                );
                Pms_PDFUtil::generate_pdf_to_browser($htmlcontent, 'Zeiterfassung', $options);

                //PatientFileUpload::generate_pdf($ipid, $htmlcontent, 'Zeiterfassung', 'patientops', 0, 1,0, 'P',1,array('margins'=>array(10,20,10)));
                exit();
            }
        }
        public function doctransferhl7Action(){
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $this->view->encid=Pms_Uuid::encrypt($decid);
            $logininfo= new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $userid = $logininfo->userid;
            $ipid=Pms_CommonData::getIpid($decid);

            /*#########################################################*/
            $isclient = Pms_CommonData::getPatientClient($decid,$logininfo->clientid);

            if(!$isclient)
            {
                $this->_redirect(APP_BASE."overview/overview");
            }

            $isdicharged = PatientDischarge::isDischarged($decid);
            $this->view->isdischarged = 0;
            if($isdicharged)
            {
                $this->view->isdischarged = 1;
            }
            /*#########################################################*/

            if($_POST){
                $post=$_POST;
                $post['ipid']=$ipid;
                $post['userid']=$userid;
                $post['type']='doctransferhl7';
                $conf = array (
                    //the clientid for this server
                    'clientid'		=>	$clientid,
                    //the userid this server has
                    'userid'		=>	1,
                    //everything is logged to db is encrypted if true
                    'encryptlog'	=>  false,
                    //0=print all, 2 print only errors
                    'verbosity' 	=>	9,
                    //we dont have real productivity data: mark patient as testpatient
                    'testdata'      =>  1
                );
                $return=Net_ProcessHL7::send_message($post, $conf);
            }

            $pc=new PatientCaseStatus();
            $cases=$pc->get_list_patient_status($ipid, $clientid);
            $this->view->cases=$pc->format_patientcases_for_select_option($cases, 'Fall auswählen');
            if($_POST){
                $this->_helper->layout->setLayout('layout_ajax');
                echo $return;
                exit();
            }else{
                $this->view->patclass = "active";
                $patientmaster = new PatientMaster();
                $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
                $tm = new TabMenus();
                $this->view->tabmenus = $tm->getMenuTabs();
            }


            $this->view->files=Hl7DocSend::get_files_for_hl7transmit($ipid, $clientid);

        }

        public function docsendtodoAction(){
            $logininfo= new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $userid = $logininfo->userid;

            $this->view->docsdata=Hl7DocSend::get_client_todos($clientid);


        }

        /**
         * externe Leistungen eintragen und bearbeiten (IM-136)
         */
        public function extraopsleistungenAction(){
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $logininfo= new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $this->view->clientid = $clientid;
            $ipid = Pms_CommonData::getIpid($decid);
            if($ipid==="")die();

            $this->view->encid=Pms_Uuid::encrypt($decid);

            $navid = TabMenus::getMenubyLink('patient/extraopsleistungen');
            $haspermission = PatientPermissions::verifyPermission($logininfo->userid, $ipid, $navid[0]['id'], 'canedit');


            if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA' ){
                $haspermission = true;
            }

            $this->view->sendbutt=$haspermission;
            $caseid=0;
            if(isset($_GET['caseid'])){
                $caseid = intval($_GET['caseid']);
            }

            if(isset($_POST['extraops']) && $haspermission){

                foreach($_POST['extraops'] as $row){
                    if ($row['caseid']=="" || $row['caseid']<1){
                        break;
                    }
                    if ($row['checked']==="1"){
                        $row['ipid']=$ipid;
                        if($row['mode']==="add"){
                            Extraopsleistung::createEntry($row);
                        }
                        if($row['mode']==="old" && intval($row['dbid'])>=1){
                            Extraopsleistung::updateEntry(intval($row['dbid']),$row);
                        }
                    }

                    if($row['mode']==="del" && intval($row['dbid'])>1){
                        Extraopsleistung::deleteEntry(intval($row['dbid']));
                    }

                }
            }


            $this->view->leistungen=array();
            if($caseid>0) {
                $this->view->leistungen = Extraopsleistung::getEntries($ipid, $caseid);
            }
            $patcase = new PatientCaseStatus();

            $this->view->cases =  $patcase->get_list_patient_status($ipid, $clientid);
            $this->view->caseid=$caseid;

            $this->view->opsconfig=ClientConfig::getConfig($clientid, 'opsconfig');

            $patientmaster = new PatientMaster();
            $this->view->patientinfo =$patientmaster->getMasterData($decid,1);
            $tm = new TabMenus();
            $this->view->tabmenus = $tm->getMenuTabs();
        }









		// Maria:: Migration ISPC to CISPC 08.08.2020
		private function _init_group($groupbutt, $elementsBelongTo = null, $saved_values = array(), $type = 'button', $external_obj = null)
		{
			if($type == 'button')
			{
				if(!$groupbutt['has_dummy'])
				{
					$sf_groupbut = (new Application_Form_FormGroupButton(array(
							'elementsBelongTo' => $elementsBelongTo,
							'_setgroup_but'    => $groupbutt,
							'_external_obj' => $external_obj,
							'_forme_mode' => "without_dummy",
					)));
				}
				else
				{
					$sf_groupbut = (new Application_Form_FormGroupButton(array(
							'elementsBelongTo' => $elementsBelongTo,
							'_setgroup_but'    => $groupbutt,
							'_external_obj' => $external_obj,
					)));
				}
				$creategroup_fn = '_create_form_groupbutton';
			}
			else
			{
				$sf_groupbut = (new Application_Form_FormGroupOther(array(
						'elementsBelongTo' => $elementsBelongTo,
						'_setgroup_oth'    => $groupbutt,
						'_external_obj' => $external_obj,
				)));
				$creategroup_fn = '_create_form_groupother';
			}
		
			$groupbut_details_form = $sf_groupbut->{$creategroup_fn}();
		
			return $groupbut_details_form;
		}
		
		/**
		 * @carmen 08.10.2019
		 * ISPC-2396
		 */
		
		public function getclientpatienticonsAction()
		{
			set_time_limit(0);
			$this->_helper->layout->setLayout('layout_ajax');
			$this->_helper->viewRenderer->setNoRender();
			
			$pids = explode(',', $_POST['pids']);
			foreach($pids as $pid)
			{
		
				$ipids[] = Pms_CommonData::getIpId(Pms_Uuid::decrypt($pid));
			}
			
			$saved_patient_icons_arr = IconsPatientTable::findAllIconsPatients($ipids);			
			$icons_pids = array_unique(array_column($saved_patient_icons_arr, 'icon_id'));
			
			$saved_patient_icons_details_arr = array();
			$clienticons = IconsClientTable::findIconsClientById($icons_pids);
			foreach($clienticons as $icon)
			{
				if($icon['image'] != '')
				{
					$saved_patient_icons_details_arr[] = '<img src="'.APP_BASE.'/icons_system/'.$icon['image'].'" />' . '<div>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;' . $icon['name'] . '</div>';
				}
				else 
				{
					$saved_patient_icons_details_arr[] = '<div class="custom_icon_assigned icondiv" style="background: #' .$icon['color'] . '"></div>' . '<div>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;' . $icon['name'] . '</div>';
				}
			}
			
			//$saved_patient_icons_name_arr = array_column(IconsClientTable::findIconsClientById($icons_pids), 'name');
			$icons_ids = array_column(IconsClientTable::findIconsClientById($icons_pids), 'id');
			$todelete_icons = count($icons_ids);
			
			if(!empty($saved_patient_icons_arr))
			{
				$groupbuticon = array(
						'name' => 'todelete_icon',
						'type' => 'checkbox',
						//'alignment' => 'vertical',
						'butnr' => $todelete_icons,
						'first_but_pos_left' => '19',
						'first_but_pos_top' => '76',
						'first_but_pos_right' => '0',
						'first_but_pos_bottom' => '0',
						'x_offset' => array('0', '0', '0'),
						'y_offset' => array('0', '46', '92'),
						'width_dummy' => '26',
						'height_dummy' => '26',
						'label_text' => $saved_patient_icons_details_arr,
						'label_wrap' => array(false, false, false),
						'x_offset_label' => array('10', '10','10'),
						'label_width' => array('250', '250', '250'),
						'label_height' => array('25', '25', '25'),
						'has_external_obj' => false,
						'label' => true,
						'has_dummy' => false,
						'values' => $icons_ids,
						//'class' => 'rcbyrightv'
				);
	
				$elementsBelongTo = 'icon_delete';
					
				$groupbut_details_form = $this->_init_group($groupbuticon, $elementsBelongTo);
				$groupbut_details_form->clearDecorators()->setDecorators( array(
					'FormElements',
					 array(array('ttag' => 'HtmlTag'), array('tag'=>'table', 'style' => 'width: 100%;')),
					 array('Fieldset', array('legend' => $this->translator->translate('Info text - For all selected patients can choose the icons to be removed'), 'class' => 'delicon')),
				 ));
				echo $groupbut_details_form;
				
			}
			else
			{				
				exit;
			}
		}
		

	}

?>
