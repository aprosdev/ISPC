<?php

	class PatientformController extends Pms_Controller_Action {

		protected $logininfo = null;
		protected $_patientMasterData = null;
		protected $driving_time_limit = null;
		
		public function init()
		{
			/* Initialize action controller here */

//			ISPC-791 secrecy tracker
			$user_access = PatientPermissions::document_user_acces();


			//Check patient permissions on controller and action
			$patient_privileges = PatientPermissions::checkPermissionOnRun();
			if(!$patient_privileges)
			{
				$this->_redirect(APP_BASE . 'error/previlege');
			}
			
			$this->logininfo = new Zend_Session_Namespace('Login_Info');
			$this->driving_time_limit = Pms_CommonData::driving_time_limit();
			$this->view->driving_time_limit = $this->driving_time_limit;

			array_push($this->actions_with_js_file, "wounddocumentation");

			$this
			->setActionsWithPatientinfoAndTabmenus([
			    /*
			     * actions that have the patient header
			*/
			    ($this->logininfo->isEfaClient == '1' && $this->logininfo->isEfaUser == '1') ? '' : 'contactform',  // ISPC-2880  Ancuta 12.04.2021
			])
			->setActionsWithJsFile([
			    /*
			     * actions that will include in the <head>:  /public {_ipad} /javascript/views / CONTROLLER / ACTION .js"
			*/
			    'contactform',
			    'wounddocumentation',
			    'rpassessment', /*ISPC-2406*/
			])
			->setActionsWithLayoutNew([
			    /*
			     * actions that will use layout_new.phtml
			* Actions With Patientinfo And Tabmenus also use layout_new.phtml
			*/
			     
			    ($this->logininfo->isEfaClient == '1' && $this->logininfo->isEfaUser == '1') ? '' : 'contactform',  // ISPC-2880  Ancuta 12.04.2021
				//Maria:: Migration CISPC to ISPC 20.08.2020 :: START
                'weeklymeeting',
                'dischargeplanningclinic'
			 
			])
			;			
			
		}

		public function fb8evaluationoldAction()
		{
			/* ######################## Various data ################################ */
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$epid = Pms_CommonData::getEpidFromId($decid);
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$patientmaster = new PatientMaster();
			$this->view->notostrdays = array('1' => "one", '2' => "two", '3' => "three", '4' => "four", '5' => "five", '6' => "six", '7' => "seven", '8' => "eight", '9' => "nine", '10' => "ten");
			/* ######################## Various data ################################ */

			if($this->getRequest()->isPost())
			{
				if(strlen($_POST['btnsubmit']) > 0)
				{
					$this->generateformPdf(3, $_POST, 'Form_oneRedo', "fb8evaluation_pdf.html");
				}
				else if(strlen($_POST['btnsave']) > 0 || $_POST['btnexport'])
				{
					//Do save with form sapvreevaluation
					$formoneredo = new Application_Form_SapvReevaluation();
					$saveformoneredo = $formoneredo->insertSapvData($_POST, $ipid);
				}
			}

			$formdata = new SapvReevaluation();
			if($this->getRequest()->isPost() && $_POST['btnexport'])
			{
				ob_flush();
				ob_clean();
				$sapv_xml_data = $formdata->export_sapv_xml();

				//send xml to be downloaded
				header("Pragma: public");
				header("Expires: 0");
				header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
				header("Content-type: text/xml; charset=utf-8");
				header("Content-Disposition: attachment; filename=sapv_export-" . date('d-m-Y_H-i-s') . ".xml");
//				echo html_entity_decode($sapv_xml_data, ENT_QUOTES, "utf-8");
				echo $sapv_xml_data;
				exit;
			}

			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$this->view->frmb8class = "active";
			$xml_export_data = array();

			/* ######################## Get curent patient form saved data START ################################ */
			$formdataarray = $formdata->getSapvReevaluationData($ipid);
			/* ######################## Get curent patient form saved data END ################################ */
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			if(count($formdataarray) == "0" || (count($formdataarray) != "0" && strlen($_POST['btnreset']) > 0))
			{
				$this->view->epid = $epid;
				/* ######################## Footer patient data ################################ */

				$this->view->gender = $patientinfo['sex'];

				if($patientinfo['birthd'] != "0000-00-00")
				{
					$this->view->age = str_replace(" Jahre", "", $patientmaster->GetAge(date("Y-m-d", strtotime($patientinfo['birthd']))));
				}

				$clients = Pms_CommonData::getClientData($logininfo->clientid);
				$user = Doctrine::getTable('User')->find($logininfo->userid);

				if($user)
				{
					$uarray = $user->toArray();
					if(strlen($uarray['betriebsstattennummer']) > 0)
					{
						$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
					}
					else
					{
						$this->view->betriebsstatten_nr = $clients[0]['betriebsstattennummer'];
					}
				}

				$this->view->institutskennzeichen = $clients[0]['institutskennzeichen'];

				$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

				$this->view->hi_company_name = $healthinsu_array[0]['company_name'];
				$this->view->kassen_nr = $healthinsu_array[0]['kvk_no'];
				$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
				/* ######################## Footer patient data ################################ */

				/* ######################## Admission cycles ################################ */
				$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);
				$admCycle[-1] = "gesamt";
				if(count($admissions[$ipid]['admissionDates']) != "0")
				{
					//gesamt limitation
					$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admissionDates'][0]['date']));

					foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
					{
						if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
						{
							$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
						}
						else
						{
							$dischargeDate = date("d.m.Y");
						}

						$admCycle[$keyAdm] = date("d.m.Y", strtotime($admitedDate['date'])) . " - " . date("d.m.Y", strtotime($dischargeDate));
						$admissionsCycles[$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
						$admissionsCycles[$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));

						if($keyAdm == (count($admissions[$ipid]['admissionDates']) - 1))
						{
							$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($dischargeDate));
						}
					}
				}
				else
				{
					$admCycle[0] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date'])) . " - " . date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
					//gesamt if no admision-readmission cycle
					$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
					$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
					$admissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
					$admissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
				}

				$this->view->admissionCycles = $admCycle;
				$this->view->cycleAdmissionsDetails = $admissionsCycles;

				if(strlen($_REQUEST['cycle']) == 0)
				{
					$cycleSelected = "-1";
				}
				else
				{
					$cycleSelected = $_REQUEST['cycle'];
				}
				$this->view->cycleSelected = $cycleSelected;
				/* ######################## Admission cycles ################################ */

				/* ######################## Get ICD ################################ */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ",";
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipid, $typeid);

				if(count($dianoarray) > 0)
				{
					$comma = "";
					$diagnosis = "";
					foreach($dianoarray as $key => $valdia)
					{
						if(strlen($valdia['diagnosis']) > 0)
						{
							$diagnosis .= $comma . $valdia['icdnumber'];
							$comma = ",";
						}
					}
				}

				$this->view->icddiagnosis = $diagnosis;

				$dgND = new DiagnosisType();
				$abb2ND = "'ND'";
				$ddarr2ND = $dgND->getDiagnosisTypes($logininfo->clientid, $abb2ND);
				$comma = ",";
				$typeidND = "'0'";
				foreach($ddarr2ND as $key => $valdia)
				{
					$typeidND .=$comma . "'" . $valdia['id'] . "'";
					$comma = ",";
				}

				$patdiaND = new PatientDiagnosis();
				$dianoNDarray = $patdiaND->getFinalData($ipid, $typeidND);

				if(count($dianoarray) > 0)
				{
					$comma = "";
					$diagnosisND = "";
					foreach($dianoNDarray as $key => $valdia)
					{
						if(strlen($valdia['diagnosis']) > 0)
						{
							$diagnosisND .= $comma . $valdia['icdnumber'];
							$comma = ",";
						}
					}
				}

				$this->view->icdarray = $dianoNDarray;
				$this->view->icdNDdiagnosis = $diagnosisND; //.ND diagnosis;
				/* ######################## Get ICD ################################ */

				/* ######################## First SAPV not denied in period START################################ */
				$dropSapv = Doctrine_Query::create()
					->select('*')
					->from('SapvVerordnung')
					->where('ipid LIKE "' . $ipid . '"')
					->andWhere('"' . date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['start'])) . '" <= verordnungbis')
					->andWhere('"' . date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['end'])) . '" >= verordnungam')
					->andWhere('isdelete=0')
					->andWhere('status != 1 ')
					->orderBy('verordnungam ASC');
				$droparray = $dropSapv->fetchArray();

				//limit start sapv start date to admission cycle start date if start sapv < admission start
				if(strtotime($droparray[0]['verordnungam']) < strtotime($admissionsCycles[$cycleSelected]['start']))
				{
					$beginSapvFall = date("d.m.Y ", strtotime($admissionsCycles[$cycleSelected]['start']));
				}
				else
				{
					$beginSapvFall = date("d.m.Y ", strtotime($droparray[0]['verordnungam']));
				}

				$this->view->beginSapvFall = $beginSapvFall;
				/* ######################## First SAPV not denied in period END ################################ */

				/* ######################## Last SAPV not denied in period START ################################ */
				$dropSapvL = Doctrine_Query::create()
					->select('*')
					->from('SapvVerordnung')
					->where('ipid LIKE "' . $ipid . '"')
					->andWhere('"' . date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['start'])) . '" <= verordnungbis')
					->andWhere('"' . date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['end'])) . '" >= verordnungam')
					->andWhere('isdelete=0')
					->andWhere('status != 1 ')
					->orderBy('verordnungbis DESC');
				$droparrayl = $dropSapvL->fetchArray();

				//limit end sapv end date to admission cycle end date if end sapv > admission end
				if(strtotime($droparrayl[0]['verordnungbis']) > strtotime($admissionsCycles[$cycleSelected]['end']))
				{
					$endSapvFall = date("d.m.Y ", strtotime($admissionsCycles[$cycleSelected]['end']));
				}
				else
				{
					$endSapvFall = date("d.m.Y ", strtotime($droparrayl[0]['verordnungbis']));
				}
				$this->view->endSapvFall = $endSapvFall;
				/* ######################## Last SAPV not denied in period END ################################ */

				/* ######################## Highest SAPV Value not denied in period START ################################ */
				$sapv = explode(',', $droparray[0]['verordnet']);

				$sapv_max_value = max($sapv);

				switch($sapv_max_value)
				{
					case "1":
						$this->view->firstSapvMaxbe = $sapv_max_value;
						break;

					case "2":
						$this->view->firstSapvMaxko = $sapv_max_value;
						break;

					case "3":
						$this->view->firstSapvMaxtv = $sapv_max_value;
						break;

					case "4":
						$this->view->firstSapvMaxvv = $sapv_max_value;
						break;
				}
				/* ######################## Highest SAPV Value not denied in period END ################################ */

				/* ######################## FIrst contact in this fall [12] START################################ */
				if(count($admissions[$ipid]['admissionDates']) == "0" || count($admissions[$ipid]['admissionDates']) == "1")
				{
					$this->view->erstsapv = 1;
				}
				else if(count($admissions[$ipid]['admissionDates']) > "1")
				{
					$this->view->weideraufnahme = 1;
				}
				/* ######################## FIrst contact in this fall [12] END ################################ */

				/* ######################## Patient Lives [13] Start ################################ */
				$pl = new PatientLives();
				$pat_lives = $pl->getpatientLivesData($ipid);

				$this->view->alone = $pat_lives[0]['alone'];
				$this->view->house_of_relatives = $pat_lives[0]['house_of_relatives'];
				$this->view->hospiz = $pat_lives[0]['hospiz'];
				/* ######################## Patient Lives [13] END ################################ */

				/* ######################## Pflegestufe at start period [14] START ################################ */
				$pms = new PatientMaintainanceStage();
				$pat_pms = $pms->getpatientMaintainanceStageInPeriod($ipid, $admissionsCycles[$cycleSelected]['start'], $admissionsCycles[$cycleSelected]['end']);

				if($pat_pms[0]['stage'] == "1")
				{
					$this->view->stageone = $pat_pms[0]['stage'];
				}
				else if($pat_pms[0]['stage'] == "2")
				{
					$this->view->stagetwo = $pat_pms[0]['stage'];
				}
				else if($pat_pms[0]['stage'] == "3")
				{
					$this->view->stagethree = $pat_pms[0]['stage'];
				}
				else if($pat_pms[0]['stage'] == "keine")
				{
					$this->view->stagekeine = $pat_pms[0]['stage'];
				}
				/* ######################## Pflegestufe at start period [14]  END ################################ */

				/* ######################## Pflegestufe at end period [23]  START ################################ */
				$lastPflegestufeInPeriod = end($pat_pms);

				if($lastPflegestufeInPeriod['stage'] == "1")
				{
					$this->view->stagelastone = $lastPflegestufeInPeriod['stage'];
				}
				else if($lastPflegestufeInPeriod['stage'] == "2")
				{
					$this->view->stagelasttwo = $lastPflegestufeInPeriod['stage'];
				}
				else if($lastPflegestufeInPeriod['stage'] == "3")
				{
					$this->view->stagelastthree = $lastPflegestufeInPeriod['stage'];
				}
				else if($lastPflegestufeInPeriod['stage'] == "keine")
				{
					$this->view->stagelastkeine = $lastPflegestufeInPeriod['stage'];
				}
				/* ######################## Pflegestufe at end period [23]    END ################################ */

				/* ######################## Died Discharge Location [24]    START ################################ */
				$distod = Doctrine_Query::create()
					->select("*")
					->from('DischargeMethod')
					->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
				$todarray = $distod->fetchArray();

				$todIds[] = "9999999999999";
				foreach($todarray as $todmethod)
				{
					$todIds[] = $todmethod['id'];
				}

				$dispat = Doctrine_Query::create()
					->select("*")
					->from("PatientDischarge")
					->where("ipid LIKE '" . $ipid . "'")
					->andWhereIn("discharge_method", $todIds);
				$dischargedArr = $dispat->fetchArray();

				$disablauf = Doctrine_Query::create()
					->select("*")
					->from('DischargeMethod')
					->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'DIS1' or abbr = 'dis1' or abbr='Dis1' or abbr='END' or abbr='end' or abbr='End')");
				$ablaufarray = $disablauf->fetchArray();

				$ablaufIds[] = "9999999999999";
				foreach($ablaufarray as $ablaufmethod)
				{
					$ablaufIds[] = $ablaufmethod['id'];
				}

				$dispatablauf = Doctrine_Query::create()
					->select("*")
					->from("PatientDischarge")
					->where("ipid LIKE '" . $ipid . "'")
					->andWhereIn("discharge_method", $ablaufIds);
				$dischargedAblaufArr = $dispatablauf->fetchArray();

				if(count($dischargedArr) > 0)
				{
					$dl = new DischargeLocation();
					$dlarr = $dl->getDischargeLocationbyId($dischargedArr[0]['discharge_location'], $clientid);
					$deathDischargeLocation = $dlarr[0]['type'];
					$this->view->deceased = 1;
				}

				if(count($dischargedAblaufArr) > 0)
				{
					$this->view->regulationexpiration = 1;
				}

				if($deathDischargeLocation == "1")
				{
					$this->view->homedead = $deathDischargeLocation;
				}
				else if($deathDischargeLocation == "2")
				{
					$this->view->krankendead = $deathDischargeLocation;
				}
				else if($deathDischargeLocation == "3")
				{
					$this->view->hospizdead = $deathDischargeLocation;
				}
				else if($deathDischargeLocation == "4")
				{
					$this->view->heimdead = $deathDischargeLocation;
				}
				else if($deathDischargeLocation == "5")
				{
					$this->view->palliativdead = $deathDischargeLocation;
				}
				//	"im häuslichen umfeld verstorben" -> died at home  == 1
				//	"im Heim verstorben" -> died in location "Pflegeheim / Altenheim"  == 4
				//	"im Hospiz verstorben" -> died in Hospiz  == 3
				//	"Auf Palliativstation verstorben" -> died in "Palliativstation  == 5
				//	"im Krankenhaus verstorben" -> died in hospital == 2
				/* ######################## Died Discharge Location [24]      END ################################ */

				/* ######################## 24h Bereitschft [26] START ################################ */
				// get sapvs in period (up) and filter by sapv vv, tv start
				foreach($droparray as $keysapvp => $sapvinperiod)
				{
					$explodedVerordnet = explode(',', $sapvinperiod['verordnet']);
					if(in_array('3', $explodedVerordnet) || in_array('4', $explodedVerordnet))
					{
						$start = date("Y-m-d", strtotime($sapvinperiod['verordnungam']));
						$end = date("Y-m-d", strtotime($sapvinperiod['verordnungbis']));
						$sapvListDays[] = $patientmaster->getDaysInBetween($start, $end);
					}
				}
				$sapvFinalDays = array();
				if(count($sapvListDays) > '1')
				{
					foreach($sapvListDays as $sapvKey => $sapvDays)
					{
						$sapvFinalDays = array_merge($sapvFinalDays, $sapvDays);
					}
				}
				else if(count($sapvListDays) == "1")
				{
					$sapvFinalDays = $sapvListDays[0];
				}
				array_unique($sapvFinalDays);
				// get sapvs in period (up) and filter by sapv vv, tv end
				// get hospital locations START
				$hospitalids = Doctrine_Query::create()
					->select("*")
					->from('Locations')
					->where('isdelete = 0')
					->andWhere('client_id ="' . $clientid . '"')
					->andWhere('location_type = 1');
				$hosparray = $hospitalids->fetchArray();

				$hosparr[] = "9999999999";
				foreach($hosparray as $hospital)
				{
					$hosparr[] = $hospital['id'];
				}

				//	get patient hospital locations if it has
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid ="' . $ipid . '"')
					->andWhere('isdelete="0"')
					->andWhereIn('location_id', $hosparr)
					->orderBy('valid_from,id ASC');
				$patlocationsArr = $patloc->fetchArray();

				//remove "today" if hospital is still open
				$hospitalopen = false;

				foreach($patlocationsArr as $location)
				{
					if($location ['valid_till'] == "0000-00-00 00:00:00")
					{
						if(strtotime($admissionsCycles[$cycleSelected]['end']) <= strtotime('now'))
						{
							$till = $admissionsCycles[$cycleSelected]['end'];
							$from = date('Y-m-d', strtotime($location ['valid_from']));
						}
						else
						{
							$till = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
							$from = date('Y-m-d', strtotime($location ['valid_from']));
						}
					}
					else if(strtotime(date('Y-m-d', strtotime($location['valid_till']))) == strtotime(date('Y-m-d', strtotime($location ['valid_from']))))
					{
						$till = date('Y-m-d', strtotime('+1 day', strtotime($location ['valid_till'])));
						$from = date('Y-m-d', strtotime('-1 day', strtotime($location ['valid_till'])));
					}
					else
					{
						$till = date('Y-m-d', strtotime($location ['valid_till']));
						$from = date('Y-m-d', strtotime($location ['valid_from']));
					}

					$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('+1 day', strtotime($from)));
					$patientData [$location ['ipid']] ['hospitalStartDays'][] = date("Y-m-d", strtotime($location ['valid_from']));
					$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('-1 day', strtotime($till)));

					if($location ['valid_till'] == "0000-00-00 00:00:00")
					{
						if(strtotime($admissionsCycles[$cycleSelected]['end']) <= strtotime('now'))
						{
							$patientData [$location ['ipid']] ['hospitalEndDays'][] = date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['end']));
						}
						else
						{
							$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
						}
					}
					else
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime($location ['valid_till']));
					}

					$current_hosp_days = array(); //imbecile!
					//mort la iesire cu verificare metoda de discharge + data de discharge
					if(in_array(date('Y-m-d', strtotime($location['valid_till'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
						in_array($dischargedArr[0]['discharge_method'], $todIds) &&
						!in_array(date('Y-m-d', strtotime($location['valid_from'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
						date("Y-m-d", strtotime($dischargedArr[0]['discharge_date'])) == date('Y-m-d', strtotime($location['valid_till']))
					)
					{
						$current_hosp_days = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
					}
					else if(in_array(date('Y-m-d', strtotime($location['valid_from'])), $patientData [$location ['ipid']] ['hospitalEndDays']) && date('Y-m-d', strtotime($location['valid_from'])) == date('Y-m-d', strtotime($dischargedArr[0]['discharge_date'])))
					{
						//scos la intrare
						$current_hosp_days = array();
					}
					else if($location ['valid_till'] == "0000-00-00 00:00:00")
					{
						//daca nu e discharged ii dau zile (de spital) de la mineeeeeeeeeee
						$current_hosp_days = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
					}
					else
					{
						$current_hosp_days = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime('-1 day', strtotime($till))), false);
					}

					$dayshospital [] = $current_hosp_days;
					$dayshospitalSecondArr [] = $current_hosp_days;
				}

				$continuousHospitalDays[] = '999999999999';
				foreach($patientData[$ipid]['hospitalStartDays'] as $v_start_details)
				{
					if(in_array($v_start_details, $patientData[$ipid]['hospitalEndDays']))
					{
						$continuousHospitalDays[] = $v_start_details;
					}
				}

				$hospFinalDays = array();
				if(count($dayshospital) > 1)
				{
					foreach($dayshospital as $hospKey => $hospDays)
					{
						$hospFinalDays = array_merge($hospFinalDays, $hospDays);
					}
				}
				else if(count($dayshospital) == "1")
				{
					$hospFinalDays = $dayshospital[0];
				}
				array_unique($hospFinalDays);

				$hospFinalDaysSecond = array("999999999999");
				if(count($dayshospitalSecondArr) > 1)
				{
					foreach($dayshospitalSecondArr as $hospKeyS => $hospDaysS)
					{
						$hospFinalDaysSecond = array_merge($hospFinalDaysSecond, $hospDaysS);
					}
				}
				else if(count($dayshospitalSecondArr) == "1")
				{
					$hospFinalDaysSecond = $dayshospitalSecondArr[0];
				}
				array_unique($hospFinalDaysSecond);

				if(in_array($dischargedArr[0]['discharge_method'], $todIds))
				{
					$death_date = date("Y-m-d", strtotime($dischargedArr[0]['discharge_date']));
				}
				else
				{
					if(count($dischargedArr) > 0)
					{
						$death_date = date("Y-m-d", strtotime("+1 day", strtotime($dischargedArr[0]['discharge_date'])));
					}
					else
					{
						$death_date = date("Y-m-d", strtotime("+1 day"));
					}
				}

				// manipulate the arrays from above and set counter for each day of sapv where
				//is in active period
				//is not in hospital
				//is not dead with discharged method tod and discharge location hospital
				//sapv in selected cycle active period
				foreach($sapvFinalDays as $skey => $sapvDay)
				{
					$thisSapvDay = strtotime($sapvDay);
					if($thisSapvDay >= strtotime($admissionsCycles[$cycleSelected]['start']) && $thisSapvDay <= strtotime($admissionsCycles[$cycleSelected]['end']))
					{
						$activeSapvDays[] = $sapvDay;
					}
				}

				if(count($admissionsCycles) > 1)
				{
					foreach($admissionsCycles as $kcycle => $cycleData)
					{
						$nextKey = ($kcycle + 1);
						if($kcycle != "-1" && array_key_exists($nextKey, $admissionsCycles))
						{
							$periodOfInactivity[] = date("Y-m-d", strtotime("+1 day", strtotime($cycleData['end']))) . " - " . date("Y-m-d", strtotime("-1 day", strtotime($admissionsCycles[($kcycle + 1)]['start'])));
							$inactiveDaysBetweenCycles[] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime("+1 day", strtotime($cycleData['end']))), date("Y-m-d", strtotime("-1 day", strtotime($admissionsCycles[($kcycle + 1)]['start']))));
						}
					}
				}


				$inactiveDaysBetweenCyclesFinal = array();
				if(count($inactiveDaysBetweenCycles) > 1)
				{
					foreach($inactiveDaysBetweenCycles as $inactiveKey => $inactiveDays)
					{
						$inactiveDaysBetweenCyclesFinal = array_merge($inactiveDaysBetweenCyclesFinal, $inactiveDays);
					}
				}
				else if(count($inactiveDaysBetweenCycles) == "1")
				{
					$inactiveDaysBetweenCyclesFinal = $inactiveDaysBetweenCycles[0];
				}
				array_unique($inactiveDaysBetweenCyclesFinal);

				$finalActiveSapvDays = array();
				foreach($activeSapvDays as $asapvkey => $asapvvalue)
				{
					if(!in_array($asapvvalue, $inactiveDaysBetweenCyclesFinal))
					{
						if(!in_array($asapvvalue, $finalActiveSapvDays))
						{
							$finalActiveSapvDays[] = $asapvvalue;
						}
					}
				}
				array_unique($finalActiveSapvDays);

				$hospital_days_array = array_merge($hospFinalDaysSecond, $continuousHospitalDays);

				foreach($finalActiveSapvDays as $saKey => $saDay)
				{
					//if hospital isn't close remove "today" from SAPV
					if(!in_array($saDay, $hospital_days_array))
					{
						$nonHospitalActiveSapvDays[] = $saDay;
					}
					else
					{
						$removedDays[] = $saDay;
					}
				}

				if($_REQUEST['dbg'])
				{
					print_r("Final Active Sapv Days");
					print_r($finalActiveSapvDays);
					print_r("Removed");
					print_r($removedDays);
					print_r('ccccccc');
					print_r($hospFinalDaysSecond);
					print_r('XXX');
					print_r($nonHospitalActiveSapvDays);
				}
				array_unique($nonHospitalActiveSapvDays);
				$this->view->bereitschft = count($nonHospitalActiveSapvDays);
				/* ######################## 24h Bereitschft [26]  END ################################ */

				/* ######################## All Hospital days [27] START ################################ */
				foreach($hospital_days_array as $k_hospital_days => $v_hospital_days)
				{
					if($v_hospital_days != '999999999999')
					{
						$all_hospital_days[] = $v_hospital_days;
					}
				}

				$this->view->allhospitaldays = count($all_hospital_days);
				$dot = $admissions[$ipid]['realActiveDays'];
				/* ######################## All Hospital days [27]  END ################################ */

				/* ######################## Count Besuche in sapvfb8 [28]  END ################################ */
				// manipulate the arrays from above and set counter for each needed day of sapv
				$spval = new Sapsymptom();

				$symarray = $spval->getEntryInRangeCount("1990-01-01", "2020-12-01", $ipid);
				$z = "0";
				foreach($symarray as $symKey => $symvalues)
				{
					$values = array();
					$values = explode(',', $symvalues['sapvalues']);


					$foundValues = array();
					for($i = 1; $i <= 3; $i++)
					{

						if(in_array($i, $values))
						{
							$foundValues[] = $i;
						}
					}
					if($_REQUEST['dbg'] == "1")
					{
						print_r("\n\n");
						print_r($foundValues);
						print_r("\n\n");
					}

					if(count($foundValues) > 0)
					{
						$z++;
					}
				}

				$this->view->besuche = $z;
				/* ######################## Count Besuche in sapvfb8 [28]  END ################################ */

				/* ######################## Count hospital in with notarz and TV or VV [29]  END ################################ */
				foreach($patlocationsArr as $kPatLocation => $vPatLocation)
				{
					$locationStart = date("Y-m-d", strtotime($vPatLocation['valid_from']));

					if($vPatLocation['hospdoc'] == 3 && !in_array($locationStart, $patientData[$vPatLocation['ipid']]['hospitalEndDays']))
					{ //with notarz
						$hospitalEntries['withNotarz'][$vPatLocation['id']] = 1;
					}
					else if($vPatLocation['hospdoc'] != 3 && !in_array($locationStart, $patientData[$vPatLocation['ipid']]['hospitalEndDays']))
					{//without notarz
						$hospitalEntries['withoutNotarz'][$vPatLocation['id']] = 1;
					}
				}

				$this->view->hospitalwithNotarz = count($hospitalEntries['withNotarz']);
				/* ######################## Count hospital in with notarz and TV or VV [29]  END ################################ */

				/* ######################## Count hospital in with TV or VV [30]  END ################################ */
				$this->view->hospitalwithoutNotarz = count($hospitalEntries['withoutNotarz']);
				/* ######################## Count hospital in with TV or VV [30]  END ################################ */
			}
			else
			{
				$this->retainValues($formdataarray[0]);
			}

			if($_REQUEST['dbg'])
			{
				print_r("Admissions Data\n");
				print_r($admissions[$ipid]);
				print_r("\n");
				print_r("Admissions Cycle\n");
				print_r($admissionsCycles);
				print_r("\n");
				print_r("SAPVS in Cycle\n");
				print_r($droparray);
				print_r("\n");
				print_r("MAX SAPV in this fall\n");
				print_r($sapv_max_value);
				print_r("\n");
				print_r("Patientlives\n");
				print_r($pat_lives);
				print_r("\n");
				print_r("FIRST in period : Pflegestufe\n");
				print_r($pat_pms);
				print_r("\n");
				print_r("LAST in period : Pflegestufe\n");
				print_r($lastPflegestufeInPeriod);
				print_r("\n");
				print_r("TOD Methods\n");
				print_r($todarray);
				print_r("\n");
				print_r("TOD Methods Array\n");
				print_r($todIds);
				print_r("\n");
				print_r("TOD Discharge Array\n");
				print_r($dischargedArr);
				print_r("\n");
				print_r("TOD Discharge Location\n");
				print_r($dlarr);
				print_r("\n");
				print_r("SAPV List Days Multi Level\n");
				print_r($sapvListDays);
				print_r("\n");
				print_r("SAPV Final Days\n");
				array_unique($sapvFinalDays);
				print_r($sapvFinalDays);
				print_r("\n");
				print_r("Hospital Days Multi Level\n");
				print_r($dayshospital);
				print_r("\n");
				print_r("Second Hospital Days Multi Level\n");
				print_r($dayshospitalSecondArr);
				print_r("\n");
				print_r("Hospital Final Days \n");
				array_unique($hospFinalDays);
				print_r($hospFinalDays);
				print_r("\n");
				print_r("Hospital Final Days Second \n");
				print_r($hospFinalDaysSecond);
				print_r("\n");
				print_r("Death Date \n");
				print_r($death_date);
				print_r("\n");
				print_r("Active SAPV Days \n");
				print_r($activeSapvDays);
				print_r("\n");
				print_r("Inactive SAPV Periods Between cycles \n");
				print_r($periodOfInactivity);
				print_r("\n");
				print_r("Inactive SAPV Days Between cycles \n");
				print_r($inactiveDaysBetweenCycles);
				print_r("\n");
				print_r("Inactive SAPV Days Between cycles Final\n");
				print_r($inactiveDaysBetweenCyclesFinal);
				print_r("\n");
				print_r("Final Active in Period Sapv Days \n");
				print_r($finalActiveSapvDays);
				print_r("\n");
				print_r("Non Hospital Active in Period Sapv Days \n");
				print_r($nonHospitalActiveSapvDays);
				print_r("\n");
				print_r("Removed Days From Previous array \n");
				print_r($removedDays);
				print_r("\n");
				print_r("SAPV Symptoms Array \n");
				print_r($symarray);
				print_r("\n");
				print_r("SAPV Symptoms besuch Count \n");
				print_r($z);
				print_r("\n");
				print_r("Patient Locations Arr\n");
				print_r($patlocationsArr);
				print_r("\n");
				print_r("Hospital Entries\n");
				print_r($hospitalEntries);
				print_r("\n");
				print_r("Doctor Visits from fb3\n");
				print_r($symarray);
				print_r("\n");
				exit;
			}

			if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->generateformPdf(3, '', 'Form_oneRedo', "fb8evaluation_pdf.html");
			}
		}

		public function fb8evaluationAction()
		{
			/* ######################## Various data ################################ */
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$epid = Pms_CommonData::getEpidFromId($decid);
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$patientmaster = new PatientMaster();
			$this->view->notostrdays = array('1' => "one", '2' => "two", '3' => "three", '4' => "four", '5' => "five", '6' => "six", '7' => "seven", '8' => "eight", '9' => "nine", '10' => "ten");
			/* ######################## Various data ################################ */

			if($this->getRequest()->isPost())
			{
				if(strlen($_POST['btnsubmit']) > 0)
				{
					$this->generateformPdf(3, $_POST, 'Form_oneRedo', "fb8evaluation_pdf.html");
				}
				else if(strlen($_POST['btnsave']) > 0 || $_POST['btnexport'])
				{
					//Do save with form sapvreevaluation
					$formoneredo = new Application_Form_SapvReevaluation();
					$saveformoneredo = $formoneredo->insertSapvData($_POST, $ipid);
				}
			}

			$formdata = new SapvReevaluation();
			if($this->getRequest()->isPost() && $_POST['btnexport'])
			{
				ob_flush();
				ob_clean();
				$sapv_xml_data = $formdata->export_sapv_xml();

				//send xml to be downloaded
				header("Pragma: public");
				header("Expires: 0");
				header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
				header("Content-type: text/xml; charset=utf-8");
				header("Content-Disposition: attachment; filename=sapv_export-" . date('d-m-Y_H-i-s') . ".xml");
//			echo html_entity_decode($sapv_xml_data, ENT_QUOTES, "utf-8");
				echo $sapv_xml_data;
				exit;
			}

			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$this->view->frmb8class = "active";
			$xml_export_data = array();

			/* ######################## Get curent patient form saved data START ################################ */
			$formdataarray = $formdata->getSapvReevaluationData($ipid);
			/* ######################## Get curent patient form saved data END ################################ */
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();

			if(count($formdataarray) == "0" || (count($formdataarray) != "0" && strlen($_POST['btnreset']) > 0))
			{
				$this->view->epid = $epid;
				/* ######################## Footer patient data ################################ */
				
				//get birthdate of patient
				$pt = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->where("ipid LIKE  '" . $ipid . "' ");
				$patexec = $pt->execute();
				
				if($patexec)
				{
					$ptarray = $patexec->toArray();
				}
				//get discharge method for patients dead
				$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid = " . $clientid)
				->andwhere("abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA'")
				->andwhere('isdelete = 0');
				$dm_deadarray = $dm_dead->fetchArray();
				
				$dm_deadfinal[] = '999999999';
				foreach($dm_deadarray as $key => $val)
				{
					$dm_deadfinal[] = $val['id'];
				}
				
				$todpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge ')
				->where("ipid LIKE  '" . $ipid . "' ")
				->andWhereIn('discharge_method', $dm_deadfinal )
				->andWhere('isdelete = 0');
				$todpatientarray = $todpatients->fetchArray();
				
				if($todpatientarray)
				{
					$patient_end_date = $todpatientarray[0]['discharge_date'];
				}
				else 
				{
					$patient_end_date = date("Y-m-d",time());
				}
				$this->view->gender = $patientinfo['sex'];

				if($ptarray[0]['birthd'] != "0000-00-00")
				{
					$this->view->age = str_replace(" Jahre", "", $patientmaster->GetAge(date("Y-m-d", strtotime($ptarray[0]['birthd'])),$patient_end_date));
				}

				$clients = Pms_CommonData::getClientData($logininfo->clientid);
				$user = Doctrine::getTable('User')->find($logininfo->userid);

				if($user)
				{
					$uarray = $user->toArray();
					if(strlen($uarray['betriebsstattennummer']) > 0)
					{
						$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
					}
					else
					{
						$this->view->betriebsstatten_nr = $clients[0]['betriebsstattennummer'];
					}
				}

				$this->view->institutskennzeichen = $clients[0]['institutskennzeichen'];

				$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

				$this->view->hi_company_name = $healthinsu_array[0]['company_name'];
				$this->view->kassen_nr = $healthinsu_array[0]['kvk_no'];
				$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
				/* ######################## Footer patient data ################################ */

				/* ######################## Admission cycles ################################ */
				$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);
				$admCycle[-1] = "gesamt";
				if(count($admissions[$ipid]['admissionDates']) != "0")
				{
					//gesamt limitation
					$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admissionDates'][0]['date']));

					foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
					{
						if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
						{
							$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
						}
						else
						{
							$dischargeDate = date("d.m.Y");
						}

						$admCycle[$keyAdm] = date("d.m.Y", strtotime($admitedDate['date'])) . " - " . date("d.m.Y", strtotime($dischargeDate));
						$admissionsCycles[$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
						$admissionsCycles[$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));

						if($keyAdm == (count($admissions[$ipid]['admissionDates']) - 1))
						{
							$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($dischargeDate));
						}
					}
				}
				else
				{
					$admCycle[0] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date'])) . " - " . date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
					//gesamt if no admision-readmission cycle
					$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
					$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
					$admissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
					$admissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
				}

				$this->view->admissionCycles = $admCycle;
				$this->view->cycleAdmissionsDetails = $admissionsCycles;

				if(strlen($_REQUEST['cycle']) == 0)
				{
					$cycleSelected = "-1";
				}
				else
				{
					$cycleSelected = $_REQUEST['cycle'];
				}
				$this->view->cycleSelected = $cycleSelected;
				/* ######################## Admission cycles ################################ */

				/* ######################## Get ICD ################################ */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ",";
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipid, $typeid);

				if(count($dianoarray) > 0)
				{
					$comma = "";
					$diagnosis = "";
					foreach($dianoarray as $key => $valdia)
					{
						if(strlen($valdia['diagnosis']) > 0)
						{
							$diagnosis .= $comma . $valdia['icdnumber'];
							$comma = ",";
						}
					}
				}

				$this->view->icddiagnosis = $diagnosis;

				$dgND = new DiagnosisType();
				$abb2ND = "'ND'";
				$ddarr2ND = $dgND->getDiagnosisTypes($logininfo->clientid, $abb2ND);
				$comma = ",";
				$typeidND = "'0'";
				foreach($ddarr2ND as $key => $valdia)
				{
					$typeidND .=$comma . "'" . $valdia['id'] . "'";
					$comma = ",";
				}

				$patdiaND = new PatientDiagnosis();
				$dianoNDarray = $patdiaND->getFinalData($ipid, $typeidND);

				if(count($dianoarray) > 0)
				{
					$comma = "";
					$diagnosisND = "";
					foreach($dianoNDarray as $key => $valdia)
					{
						if(strlen($valdia['diagnosis']) > 0)
						{
							$diagnosisND .= $comma . $valdia['icdnumber'];
							$comma = ",";
						}
					}
				}

				$this->view->icdarray = $dianoNDarray;
				$this->view->icdNDdiagnosis = $diagnosisND; //.ND diagnosis;
				/* ######################## Get ICD ################################ */

				/* ######################## First SAPV not denied in period START################################ */
				$dropSapv = Doctrine_Query::create()
					->select('*')
					->from('SapvVerordnung')
					->where('ipid LIKE "' . $ipid . '"')
					->andWhere('"' . date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['start'])) . '" <= verordnungbis')
					->andWhere('"' . date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['end'])) . '" >= verordnungam')
					->andWhere('isdelete=0')
					->andWhere('status != 1 ')
					->orderBy('verordnungam ASC');
				$droparray = $dropSapv->fetchArray();

				//limit start sapv start date to admission cycle start date if start sapv < admission start
				if(strtotime($droparray[0]['verordnungam']) < strtotime($admissionsCycles[$cycleSelected]['start']))
				{
					$beginSapvFall = date("d.m.Y ", strtotime($admissionsCycles[$cycleSelected]['start']));
				}
				else
				{
					$beginSapvFall = date("d.m.Y ", strtotime($droparray[0]['verordnungam']));
				}

				$this->view->beginSapvFall = $beginSapvFall;
				/* ######################## First SAPV not denied in period END ################################ */

				/* ######################## Last SAPV not denied in period START ################################ */
				$dropSapvL = Doctrine_Query::create()
					->select('*')
					->from('SapvVerordnung')
					->where('ipid LIKE "' . $ipid . '"')
					->andWhere('"' . date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['start'])) . '" <= verordnungbis')
					->andWhere('"' . date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['end'])) . '" >= verordnungam')
					->andWhere('isdelete=0')
					->andWhere('status != 1 ')
					->orderBy('verordnungbis DESC');
				$droparrayl = $dropSapvL->fetchArray();

				//limit end sapv end date to admission cycle end date if end sapv > admission end
				if(strtotime($droparrayl[0]['verordnungbis']) > strtotime($admissionsCycles[$cycleSelected]['end']))
				{
					$endSapvFall = date("d.m.Y ", strtotime($admissionsCycles[$cycleSelected]['end']));
				}
				else
				{
					$endSapvFall = date("d.m.Y ", strtotime($droparrayl[0]['verordnungbis']));
				}
				$this->view->endSapvFall = $endSapvFall;
				/* ######################## Last SAPV not denied in period END ################################ */

				/* ######################## Highest SAPV Value not denied in period START ################################ */
				$sapv = explode(',', $droparray[0]['verordnet']);

				$sapv_max_value = max($sapv);

				switch($sapv_max_value)
				{
					case "1":
						$this->view->firstSapvMaxbe = $sapv_max_value;
						break;

					case "2":
						$this->view->firstSapvMaxko = $sapv_max_value;
						break;

					case "3":
						$this->view->firstSapvMaxtv = $sapv_max_value;
						break;

					case "4":
						$this->view->firstSapvMaxvv = $sapv_max_value;
						break;
				}
				/* ######################## Highest SAPV Value not denied in period END ################################ */

				/* ######################## FIrst contact in this fall [12] START################################ */
				if(count($admissions[$ipid]['admissionDates']) == "0" || count($admissions[$ipid]['admissionDates']) == "1")
				{
					$this->view->erstsapv = 1;
				}
				else if(count($admissions[$ipid]['admissionDates']) > "1")
				{
					$this->view->weideraufnahme = 1;
				}
				/* ######################## FIrst contact in this fall [12] END ################################ */

				/* ######################## Patient Lives [13] Start ################################ */
				$pl = new PatientLives();
				$pat_lives = $pl->getpatientLivesData($ipid);

				$this->view->alone = $pat_lives[0]['alone'];
				$this->view->house_of_relatives = $pat_lives[0]['house_of_relatives'];
				$this->view->hospiz = $pat_lives[0]['hospiz'];
				/* ######################## Patient Lives [13] END ################################ */

				/* ######################## Pflegestufe at start period [14] START ################################ */
				$pms = new PatientMaintainanceStage();
				$pat_pms = $pms->getpatientMaintainanceStageInPeriod($ipid, $admissionsCycles[$cycleSelected]['start'], $admissionsCycles[$cycleSelected]['end']);

				if($pat_pms[0]['stage'] == "1")
				{
					$this->view->stageone = $pat_pms[0]['stage'];
				}
				else if($pat_pms[0]['stage'] == "2")
				{
					$this->view->stagetwo = $pat_pms[0]['stage'];
				}
				else if($pat_pms[0]['stage'] == "3")
				{
					$this->view->stagethree = $pat_pms[0]['stage'];
				}
				else if($pat_pms[0]['stage'] == "keine")
				{
					$this->view->stagekeine = $pat_pms[0]['stage'];
				}
				/* ######################## Pflegestufe at start period [14]  END ################################ */

				/* ######################## Pflegestufe at end period [23]  START ################################ */
				$lastPflegestufeInPeriod = end($pat_pms);

				if($lastPflegestufeInPeriod['stage'] == "1")
				{
					$this->view->stagelastone = $lastPflegestufeInPeriod['stage'];
				}
				else if($lastPflegestufeInPeriod['stage'] == "2")
				{
					$this->view->stagelasttwo = $lastPflegestufeInPeriod['stage'];
				}
				else if($lastPflegestufeInPeriod['stage'] == "3")
				{
					$this->view->stagelastthree = $lastPflegestufeInPeriod['stage'];
				}
				else if($lastPflegestufeInPeriod['stage'] == "keine")
				{
					$this->view->stagelastkeine = $lastPflegestufeInPeriod['stage'];
				}
				/* ######################## Pflegestufe at end period [23]    END ################################ */

				/* ######################## Died Discharge Location [24]    START ################################ */
				$distod = Doctrine_Query::create()
					->select("*")
					->from('DischargeMethod')
					->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
				$todarray = $distod->fetchArray();

				$todIds[] = "9999999999999";
				foreach($todarray as $todmethod)
				{
					$todIds[] = $todmethod['id'];
				}

				$dispat = Doctrine_Query::create()
					->select("*")
					->from("PatientDischarge")
					->where("ipid LIKE '" . $ipid . "'")
					->andWhereIn("discharge_method", $todIds);
				$dischargedArr = $dispat->fetchArray();

				$disablauf = Doctrine_Query::create()
					->select("*")
					->from('DischargeMethod')
					->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'DIS1' or abbr = 'dis1' or abbr='Dis1' or abbr='END' or abbr='end' or abbr='End')");
				$ablaufarray = $disablauf->fetchArray();

				$ablaufIds[] = "9999999999999";
				foreach($ablaufarray as $ablaufmethod)
				{
					$ablaufIds[] = $ablaufmethod['id'];
				}

				$dispatablauf = Doctrine_Query::create()
					->select("*")
					->from("PatientDischarge")
					->where("ipid LIKE '" . $ipid . "'")
					->andWhereIn("discharge_method", $ablaufIds);
				$dischargedAblaufArr = $dispatablauf->fetchArray();

				if(count($dischargedArr) > 0)
				{
					$dl = new DischargeLocation();
					$dlarr = $dl->getDischargeLocationbyId($dischargedArr[0]['discharge_location'], $clientid);
					$deathDischargeLocation = $dlarr[0]['type'];
					$this->view->deceased = 1;
				}

				if(count($dischargedAblaufArr) > 0)
				{
					$this->view->regulationexpiration = 1;
				}

				if($deathDischargeLocation == "1")
				{
					$this->view->homedead = $deathDischargeLocation;
				}
				else if($deathDischargeLocation == "2")
				{
					$this->view->krankendead = $deathDischargeLocation;
				}
				else if($deathDischargeLocation == "3")
				{
					$this->view->hospizdead = $deathDischargeLocation;
				}
				else if($deathDischargeLocation == "4")
				{
					$this->view->heimdead = $deathDischargeLocation;
				}
				else if($deathDischargeLocation == "5")
				{
					$this->view->palliativdead = $deathDischargeLocation;
				}
				//	"im häuslichen umfeld verstorben" -> died at home  == 1
				//	"im Heim verstorben" -> died in location "Pflegeheim / Altenheim"  == 4
				//	"im Hospiz verstorben" -> died in Hospiz  == 3
				//	"Auf Palliativstation verstorben" -> died in "Palliativstation  == 5
				//	"im Krankenhaus verstorben" -> died in hospital == 2
				/* ######################## Died Discharge Location [24]      END ################################ */

				/* ######################## 24h Bereitschft [26] START ################################ */
				// get sapvs in period (up) and filter by sapv vv, tv start
				foreach($droparray as $keysapvp => $sapvinperiod)
				{
					$explodedVerordnet = explode(',', $sapvinperiod['verordnet']);
					if(in_array('3', $explodedVerordnet) || in_array('4', $explodedVerordnet))
					{
						$start = date("Y-m-d", strtotime($sapvinperiod['verordnungam']));
						$end = date("Y-m-d", strtotime($sapvinperiod['verordnungbis']));
						$sapvListDays[] = $patientmaster->getDaysInBetween($start, $end);
					}
				}
				$sapvFinalDays = array();
				if(count($sapvListDays) > '1')
				{
					foreach($sapvListDays as $sapvKey => $sapvDays)
					{
						$sapvFinalDays = array_merge($sapvFinalDays, $sapvDays);
					}
				}
				else if(count($sapvListDays) == "1")
				{
					$sapvFinalDays = $sapvListDays[0];
				}
				array_unique($sapvFinalDays);
				// get sapvs in period (up) and filter by sapv vv, tv end
				//Client Hospital Settings START
				$conditions['periods'][0]['start'] = date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['start']));
				$conditions['periods'][0]['end'] = date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['end']));
				$conditions['client'] = $clientid;
				$conditions['ipids'] = array($ipid);
				$patient_days = Pms_CommonData::patients_days($conditions);

				//final resulted data
				$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
				$hospital_days_cs_no = $patient_days[$ipid]['hospital']['real_days_cs_no'];

				foreach($hospital_days_cs as $k_hospital_cs => $v_hospital_cs)
				{
					$hospital_days_cs[$k_hospital_cs] = date('Y-m-d', strtotime($v_hospital_cs));
				}

				//Client Hospital Settings END


				if(in_array($dischargedArr[0]['discharge_method'], $todIds))
				{
					$death_date = date("Y-m-d", strtotime($dischargedArr[0]['discharge_date']));
				}
				else
				{
					if(count($dischargedArr) > 0)
					{
						$death_date = date("Y-m-d", strtotime("+1 day", strtotime($dischargedArr[0]['discharge_date'])));
					}
					else
					{
						$death_date = date("Y-m-d", strtotime("+1 day"));
					}
				}

				// manipulate the arrays from above and set counter for each day of sapv where
				//is in active period
				//is not in hospital
				//is not dead with discharged method tod and discharge location hospital
				//sapv in selected cycle active period
				foreach($sapvFinalDays as $skey => $sapvDay)
				{
					$thisSapvDay = strtotime($sapvDay);
					if($thisSapvDay >= strtotime($admissionsCycles[$cycleSelected]['start']) && $thisSapvDay <= strtotime($admissionsCycles[$cycleSelected]['end']))
					{
						$activeSapvDays[] = $sapvDay;
					}
				}

				if(count($admissionsCycles) > 1)
				{
					foreach($admissionsCycles as $kcycle => $cycleData)
					{
						$nextKey = ($kcycle + 1);
						if($kcycle != "-1" && array_key_exists($nextKey, $admissionsCycles))
						{
							$periodOfInactivity[] = date("Y-m-d", strtotime("+1 day", strtotime($cycleData['end']))) . " - " . date("Y-m-d", strtotime("-1 day", strtotime($admissionsCycles[($kcycle + 1)]['start'])));
							$inactiveDaysBetweenCycles[] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime("+1 day", strtotime($cycleData['end']))), date("Y-m-d", strtotime("-1 day", strtotime($admissionsCycles[($kcycle + 1)]['start']))));
						}
					}
				}


				$inactiveDaysBetweenCyclesFinal = array();
				if(count($inactiveDaysBetweenCycles) > 1)
				{
					foreach($inactiveDaysBetweenCycles as $inactiveKey => $inactiveDays)
					{
						$inactiveDaysBetweenCyclesFinal = array_merge($inactiveDaysBetweenCyclesFinal, $inactiveDays);
					}
				}
				else if(count($inactiveDaysBetweenCycles) == "1")
				{
					$inactiveDaysBetweenCyclesFinal = $inactiveDaysBetweenCycles[0];
				}
				array_unique($inactiveDaysBetweenCyclesFinal);

				$finalActiveSapvDays = array();
				foreach($activeSapvDays as $asapvkey => $asapvvalue)
				{
					if(!in_array($asapvvalue, $inactiveDaysBetweenCyclesFinal))
					{
						if(!in_array($asapvvalue, $finalActiveSapvDays))
						{
							$finalActiveSapvDays[] = $asapvvalue;
						}
					}
				}
				array_unique($finalActiveSapvDays);

//			$hospital_days_array = array_merge($hospFinalDaysSecond, $continuousHospitalDays);

				foreach($finalActiveSapvDays as $saKey => $saDay)
				{
					//if hospital isn't close remove "today" from SAPV
					if(!in_array($saDay, $hospital_days_cs))
					{
						$nonHospitalActiveSapvDays[] = $saDay;
					}
					else
					{
						$removedDays[] = $saDay;
					}
				}

				if($_REQUEST['dbg'])
				{
					print_r("Final Active Sapv Days");
					print_r($finalActiveSapvDays);
					print_r("Removed");
					print_r($removedDays);
					print_r('ccccccc');
					print_r($hospFinalDaysSecond);
					print_r('XXX');
					print_r($nonHospitalActiveSapvDays);
				}
				array_unique($nonHospitalActiveSapvDays);
				$this->view->bereitschft = count($nonHospitalActiveSapvDays);


				/* ######################## 24h Bereitschft [26]  END ################################ */

				/* ######################## All Hospital days [27] START ################################ */

				$this->view->allhospitaldays = $hospital_days_cs_no;
				$dot = $admissions[$ipid]['realActiveDays'];
				/* ######################## All Hospital days [27]  END ################################ */

				/* ######################## Count Besuche in sapvfb8 [28]  END ################################ */
				// manipulate the arrays from above and set counter for each needed day of sapv
				$spval = new Sapsymptom();

				$symarray = $spval->getEntryInRangeCount("1990-01-01", "2020-12-01", $ipid);
				$z = "0";
				foreach($symarray as $symKey => $symvalues)
				{
					$values = array();
					$values = explode(',', $symvalues['sapvalues']);


					$foundValues = array();
					for($i = 1; $i <= 3; $i++)
					{

						if(in_array($i, $values))
						{
							$foundValues[] = $i;
						}
					}
					if($_REQUEST['dbg'] == "1")
					{
						print_r("\n\n");
						print_r($foundValues);
						print_r("\n\n");
					}

					if(count($foundValues) > 0)
					{
						$z++;
					}
				}

				$this->view->besuche = $z;
				/* ######################## Count Besuche in sapvfb8 [28]  END ################################ */

				/* ######################## Count hospital in with notarz and TV or VV [29]  END ################################ */
//				print_r($patient_days);
//				exit;
				foreach($patient_days[$ipid]['locations'] as $k_loc => $v_loc)
				{
					//old way counting hospital admission without checking for continuuous readmission in hospital *ISPC-1047*
					if(array_key_exists($k_loc, $patient_days[$ipid]['hospital']['admission']))
					{
						if($v_loc['hospdoc'] == 3)
						{
							$hospitalEntries['withNotarz'][$k_loc] = 1;
						}
//						else
//						{
//							$hospitalEntries['withoutNotarz'][$k_loc] = 1;
//						}
					}


					if(strlen($patient_days[$ipid]['hospital']['admission'][$k_loc]) > '0' || strlen($patient_days[$ipid]['hospital']['discharge'][$k_loc]))
					{
						$patient_wn_hosp_adm[$k_loc] = $patient_days[$ipid]['hospital']['admission'][$k_loc];
						$patient_wn_hosp_dis[$k_loc] = $patient_days[$ipid]['hospital']['discharge'][$k_loc];
					}

				}

				$patient_wn_hosp_adm = array_values($patient_wn_hosp_adm);
				$patient_wn_hosp_dis = array_values($patient_wn_hosp_dis);

				foreach($patient_wn_hosp_adm as $k_wnlocation => $date_wnlocation)
				{
					if($date_wnlocation != $patient_wn_hosp_dis[($k_wnlocation - 1)])
					{
						$hospitalEntries['withoutNotarz'][] = 1;
					}
				}

//				print_r($patient_n_hosp_adm);
//				print_r($patient_n_hosp_dis);
//				print_r($patient_wn_hosp_adm);
//				print_r($patient_wn_hosp_dis);

				$this->view->hospitalwithNotarz = count($hospitalEntries['withNotarz']);
				/* ######################## Count hospital in with notarz and TV or VV [29]  END ################################ */

				/* ######################## Count hospital in with TV or VV [30]  END ################################ */
				$this->view->hospitalwithoutNotarz = count($hospitalEntries['withoutNotarz']);
				/* ######################## Count hospital in with TV or VV [30]  END ################################ */
			}
			else
			{
				$this->retainValues($formdataarray[0]);
			}

			if($_REQUEST['dbg'])
			{
				print_r("Admissions Data\n");
				print_r($admissions[$ipid]);
				print_r("\n");
				print_r("Admissions Cycle\n");
				print_r($admissionsCycles);
				print_r("\n");
				print_r("SAPVS in Cycle\n");
				print_r($droparray);
				print_r("\n");
				print_r("MAX SAPV in this fall\n");
				print_r($sapv_max_value);
				print_r("\n");
				print_r("Patientlives\n");
				print_r($pat_lives);
				print_r("\n");
				print_r("FIRST in period : Pflegestufe\n");
				print_r($pat_pms);
				print_r("\n");
				print_r("LAST in period : Pflegestufe\n");
				print_r($lastPflegestufeInPeriod);
				print_r("\n");
				print_r("TOD Methods\n");
				print_r($todarray);
				print_r("\n");
				print_r("TOD Methods Array\n");
				print_r($todIds);
				print_r("\n");
				print_r("TOD Discharge Array\n");
				print_r($dischargedArr);
				print_r("\n");
				print_r("TOD Discharge Location\n");
				print_r($dlarr);
				print_r("\n");
				print_r("SAPV List Days Multi Level\n");
				print_r($sapvListDays);
				print_r("\n");
				print_r("SAPV Final Days\n");
				array_unique($sapvFinalDays);
				print_r($sapvFinalDays);
				print_r("\n");
				print_r("Hospital Days Multi Level\n");
				print_r($dayshospital);
				print_r("\n");
				print_r("Second Hospital Days Multi Level\n");
				print_r($dayshospitalSecondArr);
				print_r("\n");
				print_r("Hospital Final Days \n");
				array_unique($hospFinalDays);
				print_r($hospFinalDays);
				print_r("\n");
				print_r("Hospital Final Days Second \n");
				print_r($hospFinalDaysSecond);
				print_r("\n");
				print_r("Death Date \n");
				print_r($death_date);
				print_r("\n");
				print_r("Active SAPV Days \n");
				print_r($activeSapvDays);
				print_r("\n");
				print_r("Inactive SAPV Periods Between cycles \n");
				print_r($periodOfInactivity);
				print_r("\n");
				print_r("Inactive SAPV Days Between cycles \n");
				print_r($inactiveDaysBetweenCycles);
				print_r("\n");
				print_r("Inactive SAPV Days Between cycles Final\n");
				print_r($inactiveDaysBetweenCyclesFinal);
				print_r("\n");
				print_r("Final Active in Period Sapv Days \n");
				print_r($finalActiveSapvDays);
				print_r("\n");
				print_r("Non Hospital Active in Period Sapv Days \n");
				print_r($nonHospitalActiveSapvDays);
				print_r("\n");
				print_r("Removed Days From Previous array \n");
				print_r($removedDays);
				print_r("\n");
				print_r("SAPV Symptoms Array \n");
				print_r($symarray);
				print_r("\n");
				print_r("SAPV Symptoms besuch Count \n");
				print_r($z);
				print_r("\n");
				print_r("Patient Locations Arr\n");
				print_r($patlocationsArr);
				print_r("\n");
				print_r("Hospital Entries\n");
				print_r($hospitalEntries);
				print_r("\n");
				print_r("Doctor Visits from fb3\n");
				print_r($symarray);
				print_r("\n");
				exit;
			}

			if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->generateformPdf(3, '', 'Form_oneRedo', "fb8evaluation_pdf.html");
			}
		}

		public function sapvfb8oldAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
// 			$this->view->ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$this->view->clientid = $logininfo->clientid;
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$verordnetarray = array('1' => "Beratung", '2' => "Korrdination", '3' => "Teilversorgung", "4" => "Vollversorgung");
			/* ######################################################### */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->notostrdays = array('1' => "one", '2' => "two", '3' => "three", '4' => "four", '5' => "five", '6' => "six", '7' => "seven", '8' => "eight", '9' => "nine", '10' => "ten");
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->frmb8class = "active";
			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];
			$this->view->admission_date = $parr['admission_date'];

			$doc = Doctrine::getTable('PatientDischarge')->findBy('ipid', $ipid);
			$patientarray = $doc->toArray();

			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);
			$admCycle[-1] = "gesamt";
			if(count($admissions[$ipid]['admissionDates']) != "0")
			{
				//gesamt limitation
				$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admissionDates'][0]['date']));

				foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
				{
					if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
					}
					else if(!empty($admissions[$ipid]['discharge_date']))
					{
						$dischargeDate = date('d.m.Y', strtotime($admissions[$ipid]['discharge_date']));
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}

					$admCycle[$keyAdm] = date("d.m.Y", strtotime($admitedDate['date'])) . " - " . date("d.m.Y", strtotime($dischargeDate));
					$admissionsCycles[$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
					$admissionsCycles[$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));

					if($keyAdm == (count($admissions[$ipid]['admissionDates']) - 1))
					{
						$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($dischargeDate));
					}

					if(strlen($admissions[$ipid]['admissionDates'][($keyAdm + 1)]['date']) > 0)
					{
						if(date("d.m.Y", strtotime("+1 day", strtotime($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))) != date("d.m.Y", strtotime($admissions[$ipid]['admissionDates'][($keyAdm + 1)]['date'])))
						{
							$dischargedPeriod[$keyAdm]['start'] = date("d.m.Y", strtotime("+1 day", strtotime($admissions[$ipid]['dischargeDates'][$keyAdm]['date'])));
						}
						else
						{
							$dischargedPeriod[$keyAdm]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['dischargeDates'][$keyAdm]['date']));
						}

						$dischargedPeriod[$keyAdm]['end'] = date("d.m.Y", strtotime("-1 day", strtotime($admissions[$ipid]['admissionDates'][($keyAdm + 1)]['date'])));
					}
					else
					{
						if(strlen($admissions[$ipid]['dischargeDates'][$keyAdm]['date']) > 0)
						{
							$dischargedPeriod[$keyAdm]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['dischargeDates'][$keyAdm]['date']));
							$dischargedPeriod[$keyAdm]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['dischargeDates'][$keyAdm]['date']));
						}
					}
				}
			}
			else
			{
				$admCycle[0] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date'])) . " - " . date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));

				//gesamt if no admision-readmission cycle
				$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
				$admissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$admissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));

				$dischargedPeriod[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
				$dischargedPeriod[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
			}

			$this->view->dischargedPeriods = $dischargedPeriod;
			$this->view->firstAdmission = $admissionsCycles[-1]['start'];
			$this->view->admissionCycles = $admCycle;
			$this->view->cycleAdmissionsDetails = $admissionsCycles;
			$this->view->patientdisdata = $patientarray;

			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$todarray = $distod->fetchArray();

			$todIds[] = "99999999999999";
			foreach($todarray as $kTod => $vTod)
			{
				$todIds[] = $vTod['id'];
			}
			$this->view->todids = $todIds;

			if(count($patientarray) > 0)
			{

				$discharge_date_gesamt = date("d.m.Y", strtotime($patientarray[0]['discharge_date']));
				$pms = new PatientMaster();

				$days = $pms->getTreatedDaysRealMultiple(array($parr['ipid']), true);
				$daystreated = $days[$parr['ipid']]['realActiveDays'];
			}
			else
			{
				$discharge_date_gesamt = date("d.m.Y H:i:s", strtotime("+1 day"));
				$pms = new PatientMaster();

				$days = $pms->getTreatedDaysRealMultiple(array($parr['ipid']), true);
				$daystreated = $days[$parr['ipid']]['realActiveDays'];
			}

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();

				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}
			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$this->view->bdate = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			if($patientinfo['isdischarged'] == 1)
			{
				$doc = Doctrine::getTable('PatientDischarge')->findBy('ipid', $ipid);
				$patientarray = $doc->toArray();
				$this->view->discharge_date = date("d.m.Y H:i:s", strtotime($patientarray[0]['discharge_date']));
			}

			$verdung = "";
			$sav = new SapvVerordnung();
			$this->view->savarry = $sav->getSapvVerordnungData($ipid);
			$savarry = $sav->getSapvVerordnungData($ipid);
			$montharray = array(date('m', mktime(0, 0, 0, date("m") - 1, date("d"), date("Y"))), date('m'));
			$verdoungmonths = array();
			$comma = "";
			$cnt = 0;
			foreach($savarry as $moth => $keyd)
			{
				if($keyd['verordnungam'] != '0000-00-00 00:00:00' && $keyd['verordnungbis'] != '0000-00-00 00:00:00')
				{
					$verdounmonths[$cnt++] = $this->get_months($keyd['verordnungam'], $keyd['verordnungbis']);
				}
			}

			if(count($verdounmonths) > 0)
			{
				foreach($verdounmonths as $keym => $valm)
				{
					foreach($valm as $keylm)
					{
						if(!in_array($keylm, $montharray))
						{
							$verdung .=$comma . $keylm;
							$comma = ",";
							$arrayMonthsVerdung[$keylm] = $keylm;
						}
					}
				}
			}

			if($this->getRequest()->isPost())
			{
				$this->generatesapvfb8formPdf(3, $_POST, 'SAPVF_B8', "sapvf_b8pdf.html");
			}


			if($patientarray[0]['discharge_date'] != 0)
			{
				$until = date("d.m.Y H:i:s", strtotime($patientarray[0]['discharge_date']));
			}
			else
			{
				$until = date('Y-m-d');
			}

			$spc = Doctrine_Query::create()
				->select('distinct(DATE_FORMAT(create_date,"%Y%m")) as sapmonth')
				->from('Sapsymptom')
				->where("ipid='" . Pms_CommonData::getIpid($decid) . "' and date(create_date)<='" . date('Y-m-d') . "'")
				->andwhere('isdelete = 0')
				->orderBy('create_date ASC');
			$spcexe = $spc->execute();
			$mothary = array();
			$dbmontary = "";
			$comma = "";

			if($spcexe)
			{
				$mothary = $spcexe->toArray();
				if(count($mothary) > 0)
				{
					foreach($mothary as $key => $val)
					{
						if(!in_array($val['sapmonth'], $montharray))
						{
							$dbmontary .= $comma . $val['sapmonth'];
							$comma = ",";
							$arrayMonthsSAP[$val['sapmonth']] = $val['sapmonth'];
						}
					}
				}
			}

			foreach($admissionsCycles as $keyCycle => $cycle)
			{
				$admissionCyclesMonths[$keyCycle] = $this->get_months(date("Y-m-d", strtotime($cycle['start'])), date("Y-m-d", strtotime($cycle['end'])));
			}

			if(strlen($_REQUEST['cycle']) == 0)
			{
				$cycleSelected = "-1";
			}
			else
			{
				$cycleSelected = $_REQUEST['cycle'];
			}
			$this->view->cycleSelected = $cycleSelected;


			$this->view->admission_date = $admissionsCycles[$cycleSelected]['start'];
			$this->view->discharge_date = $admissionsCycles[$cycleSelected]['end'];

			if($cycleSelected != "-1")
			{
				$finalCycleVerdungArray = array_intersect($admissionCyclesMonths[$cycleSelected], explode(",", $verdung));
				$finalCycleSAPArray = array_intersect($admissionCyclesMonths[$cycleSelected], explode(",", $dbmontary));
			}
			else
			{
				$finalCycleVerdungArray = explode(",", $verdung);
				$finalCycleSAPArray = explode(",", $dbmontary);
			}

			if($_REQUEST['x'])
			{
				print_r($finalCycleVerdungArray);
				print_r($finalCycleSAPArray);
			}
			$this->view->sapmonth = implode(",", $finalCycleSAPArray);
			$this->view->verdung = implode(",", $finalCycleVerdungArray);


			$AllActiveDays[] = "";
			$patientmaster = new PatientMaster();
			foreach($admissionsCycles as $keyAdm => $admissionCycle)
			{
				if($keyAdm == $cycleSelected && $keyAdm != "-1")
				{
					$AllActiveDays[] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($admissionCycle['start'])), date("Y-m-d", strtotime($admissionCycle['end'])));
				}

				if($keyAdm == "-1")
				{
					$treated_days_cicles['-1'] = $daystreated;
				}
				else
				{
					$treated_days_cicles[$keyAdm] = $patientmaster->getDaysDiff($admissionCycle['start'], $admissionCycle['end']);
				}
			}

			$this->view->days_treated = $treated_days_cicles[$cycleSelected];
			foreach($AllActiveDays as $activePeriod)
			{
				foreach($activePeriod as $activeDay)
				{
					$activeDays[] = $activeDay;
				}
			}
			$this->view->activeDays = $activeDays;
		}

		public function sapvfb8Action()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;//Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			//ISPC - 2163
			$clt = new Client();
			$cl_data = $clt->getClientDataByid($clientid);
			
			//ISPC -2163
			if($cl_data[0]['activate_shortcut_v_settings'])
			{
				if($cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_settings'] == 'yes')
				{
					if($cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'][0] == '0')
					{
						$module_enabled = true;
						$this->view->module_enabled = $module_enabled;
					}
				}
			}
			
			
			
			$verordnetarray = array('1' => "Beratung", '2' => "Korrdination", '3' => "Teilversorgung", "4" => "Vollversorgung");
			/* ######################################################### */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->notostrdays = array('1' => "one", '2' => "two", '3' => "three", '4' => "four", '5' => "five", '6' => "six", '7' => "seven", '8' => "eight", '9' => "nine", '10' => "ten");
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->frmb8class = "active";
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];
			$this->view->admission_date = $parr['admission_date'];

			$doc = Doctrine::getTable('PatientDischarge')->findBy('ipid', $ipid);
			$patientarray = $doc->toArray();

			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);
			$admCycle[-1] = "gesamt";
			if(count($admissions[$ipid]['admissionDates']) != "0")
			{
				//gesamt limitation
				$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admissionDates'][0]['date']));

				foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
				{
					if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
					}
					else if(!empty($admissions[$ipid]['discharge_date']))
					{
						$dischargeDate = date('d.m.Y', strtotime($admissions[$ipid]['discharge_date']));
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}

					$admCycle[$keyAdm] = date("d.m.Y", strtotime($admitedDate['date'])) . " - " . date("d.m.Y", strtotime($dischargeDate));
					$admissionsCycles[$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
					$admissionsCycles[$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));

					if($keyAdm == (count($admissions[$ipid]['admissionDates']) - 1))
					{
						$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($dischargeDate));
					}

					if(strlen($admissions[$ipid]['admissionDates'][($keyAdm + 1)]['date']) > 0)
					{
						if(date("d.m.Y", strtotime("+1 day", strtotime($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))) != date("d.m.Y", strtotime($admissions[$ipid]['admissionDates'][($keyAdm + 1)]['date'])))
						{
							$dischargedPeriod[$keyAdm]['start'] = date("d.m.Y", strtotime("+1 day", strtotime($admissions[$ipid]['dischargeDates'][$keyAdm]['date'])));
						}
						else
						{
							$dischargedPeriod[$keyAdm]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['dischargeDates'][$keyAdm]['date']));
						}

						$dischargedPeriod[$keyAdm]['end'] = date("d.m.Y", strtotime("-1 day", strtotime($admissions[$ipid]['admissionDates'][($keyAdm + 1)]['date'])));
					}
					else
					{
						if(strlen($admissions[$ipid]['dischargeDates'][$keyAdm]['date']) > 0)
						{
							$dischargedPeriod[$keyAdm]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['dischargeDates'][$keyAdm]['date']));
							$dischargedPeriod[$keyAdm]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['dischargeDates'][$keyAdm]['date']));
						}
					}
				}
			}
			else
			{
				$admCycle[0] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date'])) . " - " . date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));

				//gesamt if no admision-readmission cycle
				$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
				$admissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$admissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));

				$dischargedPeriod[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
				$dischargedPeriod[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
			}

			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['include_standby'] = true;
			$conditions['ipids'] = array($ipid);
				
			
			// TODO-1469 - Leistungsnachweis Memmingen is not correct (06.04.2018)
			$real_active_days = array();
			$patient_days = Pms_CommonData::patients_days($conditions,$sql);
			$real_active_days = $patient_days[$ipid]['real_active_days']; // or days of treatment if needed 

			$this->view->real_active_days= $real_active_days; 
			
			
			
			$this->view->dischargedPeriods = $dischargedPeriod;
			$this->view->firstAdmission = $admissionsCycles[-1]['start'];
			$this->view->admissionCycles = $admCycle;
			$this->view->cycleAdmissionsDetails = $admissionsCycles;
			$this->view->patientdisdata = $patientarray;

			// TODO-1182,ISPC-2065 11.10.2017 Ancuta
			$get_shared_from_patient_course = PatientCourse::getCourseDataReceived(array($ipid));
			if(!empty($get_shared_from_patient_course)){
				$received_course = array();
				foreach($get_shared_from_patient_course as $k=>$rc){
					$received_course_ids_array[] = $rc['id'];
				}
			} else{
				$received_course_ids_array = false;
			}
			$this->view->received_course_ids = $received_course_ids_array;
			
			
			$sp = Doctrine_Query::create()
			->select('*')
			->from('Sapsymptom')
			->where("ipid = ?", $ipid)
			->andWhere('isdelete = 0');
			if(!empty($received_course_ids_array)){
				$sp->andWhereNotIn('patient_course_id',$received_course_ids_array);
			}
			$all_symp_array = $sp->fetchArray();

			foreach($all_symp_array as $k=>$sdata){
				$sym_arr_new[date("Y-m-d",strtotime($sdata['create_date']))][] = $sdata; 
			}
			
			foreach($sym_arr_new as $kr=>&$vr)
			{
				foreach($vr as $kc=>&$vc)
				{
					if($vc['sapvalues'] == '8,999')
					{
						$vc['sapvalues'] = '999';
					}
				}
			}
			
			$this->view->sapsymptom_array  = $sym_arr_new;
			
			
			
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$todarray = $distod->fetchArray();

			$todIds[] = "99999999999999";
			foreach($todarray as $kTod => $vTod)
			{
				$todIds[] = $vTod['id'];
			}
			$this->view->todids = $todIds;

			if(count($patientarray) > 0)
			{

				$discharge_date_gesamt = date("d.m.Y", strtotime($patientarray[0]['discharge_date']));
				$pms = new PatientMaster();

				$days = $pms->getTreatedDaysRealMultiple(array($parr['ipid']), true);
				$daystreated = $days[$parr['ipid']]['realActiveDays'];
			}
			else
			{
				$discharge_date_gesamt = date("d.m.Y H:i:s", strtotime("+1 day"));
				$pms = new PatientMaster();

				$days = $pms->getTreatedDaysRealMultiple(array($parr['ipid']), true);
				$daystreated = $days[$parr['ipid']]['realActiveDays'];
			}

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();

				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}
// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $parr;

			$this->view->bdate = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			if($patientinfo['isdischarged'] == 1)
			{
				$doc = Doctrine::getTable('PatientDischarge')->findBy('ipid', $ipid);
				$patientarray = $doc->toArray();
				$this->view->discharge_date = date("d.m.Y H:i:s", strtotime($patientarray[0]['discharge_date']));
			}

			$verdung = "";
			$sav = new SapvVerordnung();
			$this->view->savarry = $sav->getSapvVerordnungData($ipid);
			$savarry = $sav->getSapvVerordnungData($ipid);
			$montharray = array(date('m', mktime(0, 0, 0, date("m") - 1, date("d"), date("Y"))), date('m'));
			$verdoungmonths = array();
			$comma = "";
			$cnt = 0;
			foreach($savarry as $moth => $keyd)
			{
				if($keyd['verordnungam'] != '0000-00-00 00:00:00' && $keyd['verordnungbis'] != '0000-00-00 00:00:00')
				{
					$verdounmonths[$cnt++] = $this->get_months($keyd['verordnungam'], $keyd['verordnungbis']);
				}
			}

			if(count($verdounmonths) > 0)
			{
				foreach($verdounmonths as $keym => $valm)
				{
					foreach($valm as $keylm)
					{
						if(!in_array($keylm, $montharray))
						{
							$verdung .=$comma . $keylm;
							$comma = ",";
							$arrayMonthsVerdung[$keylm] = $keylm;
						}
					}
				}
			}

			if($this->getRequest()->isPost())
			{
				$_POST['sapsymptom_array'] = $sym_arr_new ;
				$this->generatesapvfb8formPdf(3, $_POST, 'SAPVF_B8', "sapvf_b8pdf.html");
			}


			if($patientarray[0]['discharge_date'] != 0)
			{
				$until = date("d.m.Y H:i:s", strtotime($patientarray[0]['discharge_date']));
			}
			else
			{
				$until = date('Y-m-d');
			}

			$spc = Doctrine_Query::create()
				->select('distinct(DATE_FORMAT(create_date,"%Y%m")) as sapmonth')
				->from('Sapsymptom')
				->where("ipid='" . $ipid . "' and date(create_date)<='" . date('Y-m-d') . "'")
				->andwhere('isdelete = 0')
				->orderBy('create_date ASC');
			$spcexe = $spc->execute();
			$mothary = array();
			$dbmontary = "";
			$comma = "";

			if($spcexe)
			{
				$mothary = $spcexe->toArray();
				if(count($mothary) > 0)
				{
					foreach($mothary as $key => $val)
					{
						if(!in_array($val['sapmonth'], $montharray))
						{
							$dbmontary .= $comma . $val['sapmonth'];
							$comma = ",";
							$arrayMonthsSAP[$val['sapmonth']] = $val['sapmonth'];
						}
					}
				}
			}

			foreach($admissionsCycles as $keyCycle => $cycle)
			{
				$admissionCyclesMonths[$keyCycle] = $this->get_months(date("Y-m-d", strtotime($cycle['start'])), date("Y-m-d", strtotime($cycle['end'])));
			}

			if(strlen($_REQUEST['cycle']) == 0)
			{
				$cycleSelected = "-1";
			}
			else
			{
				$cycleSelected = $_REQUEST['cycle'];
			}
			$this->view->cycleSelected = $cycleSelected;


			$this->view->admission_date = $admissionsCycles[$cycleSelected]['start'];
			$this->view->discharge_date = $admissionsCycles[$cycleSelected]['end'];



//Client Hospital Settings START
			//curent period
			$conditions['periods'][0]['start'] = date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['start']));
			$conditions['periods'][0]['end'] = date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['end']));
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];

			$in_hosp_cs = $patient_days[$ipid]['hospital']['admission'];
			$out_hosp_cs = $patient_days[$ipid]['hospital']['discharge'];
//			$patient_cycle_days_cs = $patient_days[$ipid]['active_days'];

			foreach($hospital_days_cs as $k_hospital_cs => $v_hospital_cs)
			{
				$hospital_days_cs[$k_hospital_cs] = date('Y-m-d', strtotime($v_hospital_cs));
			}

			foreach($in_hosp_cs as $k_in_hosp_cs => $v_in_hosp_cs)
			{
				$in_hosp_days_cs[] = date('Y-m-d', strtotime($v_in_hosp_cs));
			}

			foreach($out_hosp_cs as $k_out_hosp_cs => $v_out_hosp_cs)
			{
				$out_hosp_days_cs[] = date('Y-m-d', strtotime($v_out_hosp_cs));
			}

			$this->view->hospital_days_cs = $hospital_days_cs;
			$this->view->in_hosp_days_cs = $in_hosp_days_cs;
			$this->view->out_hosp_days_cs = $out_hosp_days_cs;

			if($_REQUEST['csdbg'])
			{
				print_r("CS hospital_days\n");
				print_r($hospital_days_cs);

//				print_r($patient_days);
//				print_r("Old active_days\n");
//				print_r($active_days);
//
//				print_r("CS active_days\n");
//				print_r($active_days_cs);
//				print_r("Conditions\n");
//				print_r($conditions);
//
//				print_r($patient_days);
//				exit;
			}
//Client Hospital Settings END

			if($cycleSelected != "-1")
			{
				$finalCycleVerdungArray = array_intersect($admissionCyclesMonths[$cycleSelected], explode(",", $verdung));
				$finalCycleSAPArray = array_intersect($admissionCyclesMonths[$cycleSelected], explode(",", $dbmontary));
			}
			else
			{
				$finalCycleVerdungArray = explode(",", $verdung);
				$finalCycleSAPArray = explode(",", $dbmontary);
			}

			if($_REQUEST['x'])
			{
				print_r($finalCycleVerdungArray);
				print_r($finalCycleSAPArray);
			}
			$this->view->sapmonth = implode(",", $finalCycleSAPArray);
			$this->view->verdung = implode(",", $finalCycleVerdungArray);


			$AllActiveDays[] = "";
			$patientmaster = new PatientMaster();
			foreach($admissionsCycles as $keyAdm => $admissionCycle)
			{
				if($keyAdm == $cycleSelected && $keyAdm != "-1")
				{
					$AllActiveDays[] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($admissionCycle['start'])), date("Y-m-d", strtotime($admissionCycle['end'])));
				}

				if($keyAdm == "-1")
				{
					$treated_days_cicles['-1'] = $daystreated;
				}
				else
				{
					$treated_days_cicles[$keyAdm] = $patientmaster->getDaysDiff($admissionCycle['start'], $admissionCycle['end']);
				}
			}

			$this->view->days_treated = $treated_days_cicles[$cycleSelected];
			foreach($AllActiveDays as $activePeriod)
			{
				foreach($activePeriod as $activeDay)
				{
					$activeDays[] = $activeDay;
				}
			}
			$this->view->activeDays = $activeDays;

			//get wrong bayern doctor visits
			$patient_course = Doctrine_Query::create()
				->select('*')
				->from('PatientCourse')
				->where('wrong = "1"')
				->andWhere('tabname = AES_ENCRYPT("bayern_doctorvisit","' . Zend_Registry::get('salt') . '")')
				->andWhere('ipid = ?', $ipid)
				->andWhere('source_ipid =  ""');
			$patient_course_res = $patient_course->fetchArray();

			$wrong_course_ids[] = '9999999999';
			if($patient_course_res)
			{
				foreach($patient_course_res as $k_course => $v_course)
				{
					$wrong_course_ids[] = $v_course['recordid'];
				}
			}

			$this->view->excluded_visit_ids = $wrong_course_ids;
		}

		public function sapvfb3Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->loguserid = $logininfo->userid;
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			
			//ISPC - 2163
			$clt = new Client();
			$cl_data = $clt->getClientDataByid($clientid);
			
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->frmb3class = "active";

// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$unamecd = $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $parr;

			$this->view->bdate = $patientinfo['birthd'];

			/* -----------------Client Categories ------------------------- */
			$clientcat = new ClientFb3categories();
			$categ = $clientcat->getClientFb3categories($clientid);
			$category_defaultarray = $clientcat->defaultClientFb3categories();


			foreach($category_defaultarray as $def)
			{
				$cats[$def['cid']]['cid'] = $def['cid'];
				$cats[$def['cid']]['default'] = $def['title'];
				foreach($categ as $val)
				{
					if($def['cid'] == $val['categoryid'])
					{
						$cats[$def['cid']]['title'] = $val['category_title'];
					}
				}
			}

			if(!empty($cats[1]['title']))
			{
				$this->view->cat1 = $cats[1]['title'];
			}
			else
			{
				$this->view->cat1 = $cats[1]['default'];
			}

			if(!empty($cats[2]['title']))
			{
				$this->view->cat2 = $cats[2]['title'];
			}
			else
			{
				$this->view->cat2 = $cats[2]['default'];
			}

			if(!empty($cats[3]['title']))
			{
				$this->view->cat3 = $cats[3]['title'];
			}
			else
			{
				$this->view->cat3 = $cats[3]['default'];
			}

			if(!empty($cats[4]['title']))
			{
				$this->view->cat4 = $cats[4]['title'];
			}
			else
			{
				$this->view->cat4 = $cats[4]['default'];
			}

			if(!empty($cats[5]['title']))
			{
				$this->view->cat5 = $cats[5]['title'];
			}
			else
			{
				$this->view->cat5 = $cats[5]['default'];
			}

			if(!empty($cats[6]['title']))
			{
				$this->view->cat6 = $cats[6]['title'];
			}
			else
			{
				$this->view->cat6 = $cats[6]['default'];
			}

			if(!empty($cats[7]['title']))
			{
				$this->view->cat7 = $cats[7]['title'];
			}
			else
			{
				$this->view->cat7 = $cats[7]['default'];
			}

			if(!empty($cats[8]['title']))
			{
				$this->view->cat8 = $cats[8]['title'];
			}
			else
			{
				$this->view->cat8 = $cats[8]['default'];
			}

			if(!empty($cats[9]['title']))
			{
				$this->view->cat9 = $cats[9]['title'];
			}
			else
			{
				$this->view->cat9 = $cats[9]['default'];
			}

			/* -----------------Client Categories ------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];

			if(strlen($_POST['btnsave']) > 0)
			{
				if(is_array($_POST['hdnsapid']))
				{
					$spex = Doctrine_Query::create()
						->update('Sapsymptom')
						->set('sapvalues', "''")
						->where("id in(" . join(",", $_POST['hdnsapid']) . ")");
					$spex->execute();
				}
				if(is_array($_POST['checkbox']))
				{
//				print_r($_POST);exit;
					foreach($_POST['checkbox'] as $key => $val)
					{

						$sp = Doctrine::getTable('Sapsymptom')->find($key);

						if(is_array($val))
						{
							$sp->sapvalues = join(",", $val);
						}
						else
						{
							$sp->sapvalues = "";
						}

						$sp->gesamt_zeit_in_minuten = trim($_POST['gesamt_zeit_in_minutenpre'][$key][0]);
						$sp->gesamt_fahrstrecke_in_km = trim($_POST['gesamt_fahrstrecke_in_kmpre'][$key][0]);
						$sp->davon_fahrtzeit = trim($_POST['davon_fahrtzeitpre'][$key][0]);
						$sp->save();

						if(is_array($_POST['upcomments'][$key]))
						{
							foreach($_POST['upcomments'][$key] as $keyid => $valk)
							{
								$cust = new PatientCourse();
								$cust->ipid = $ipid;
								$cust->course_date = date("Y-m-d H:i:s", time());
								$cust->course_type = Pms_CommonData::aesEncrypt("E");
								$cust->course_title = Pms_CommonData::aesEncrypt("Ein bestehender LE Eintrag vom " . date("d.m.Y H:i:s", time()) . " wurde von " . $unamecd . " editiert " . $valk);
								$cust->user_id = $userid;
								$cust->save();
							}
						}
					}
				}

				if(is_array($_POST['gesamt_zeit_in_minutenpre']))
				{
					foreach($_POST['gesamt_zeit_in_minutenpre'] as $key => $val)
					{
						$sp = Doctrine::getTable('Sapsymptom')->find($key);
						$sp->gesamt_zeit_in_minuten = trim($_POST['gesamt_zeit_in_minutenpre'][$key][0]);
						$sp->gesamt_fahrstrecke_in_km = trim($_POST['gesamt_fahrstrecke_in_kmpre'][$key][0]);
						$sp->davon_fahrtzeit = trim($_POST['davon_fahrtzeitpre'][$key][0]);
						$sp->save();
					}
				}

				if(is_array($_POST['symptom']))
				{
					if(count($_POST['symptom']) > 0)
					{
						$sp = new Sapsymptom();
//					$sp->ipid = Pms_CommonData::getIpid($decid);
						$sp->ipid = $ipid;
						$sp->sapvalues = join(",", $_POST['symptom']);
						$sp->gesamt_zeit_in_minuten = trim($_POST['gesamt_zeit_in_minuten']);
						$sp->gesamt_fahrstrecke_in_km = trim($_POST['gesamt_fahrstrecke_in_km']);
						$sp->davon_fahrtzeit = trim($_POST['davon_fahrtzeit']);
						$sp->save();

						$create_date = $sp->create_date;

						for($i = 0; $i < count($_POST['comments']); $i++)
						{
							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("E");
							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes($_POST['comments'][$i]) . '');
							$cust->done_date = $create_date;
							$cust->done_name = Pms_CommonData::aesEncrypt("sapvfb3");
							$cust->done_id = $sp->id;
							$cust->user_id = $userid;
							$cust->save();
						}
					}
				}
				elseif(strlen($_POST['gesamt_zeit_in_minuten']) > 0 || strlen($_POST['gesamt_fahrstrecke_in_km']) > 0 || strlen($_POST['davon_fahrtzeit']) > 0)
				{
					$sp = new Sapsymptom();
//				$sp->ipid = Pms_CommonData::getIpid($decid);
					$sp->ipid = $ipid;
					$sp->gesamt_zeit_in_minuten = trim($_POST['gesamt_zeit_in_minuten']);
					$sp->gesamt_fahrstrecke_in_km = trim($_POST['gesamt_fahrstrecke_in_km']);
					$sp->davon_fahrtzeit = trim($_POST['davon_fahrtzeit']);
					$sp->save();
				}
				unset($_POST['btnsave']);
			}

			//get deleted/wrong verlauf bayern doctor visit entries
			$patient_course = Doctrine_Query::create()
				->select('*')
				->from('PatientCourse')
				->where('wrong = "1"')
// 				->andWhere('tabname = AES_ENCRYPT("bayern_doctorvisit","' . Zend_Registry::get('salt') . '")')
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'bayern_doctorvisit' or AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->andWhere('ipid = ?', $ipid)
				->andWhere('source_ipid =  ""');
			$patient_course_res = $patient_course->fetchArray();

			$wrong_course_ids[] = '9999999999';
			if($patient_course_res)
			{
				foreach($patient_course_res as $k_course => $v_course)
				{
					$wrong_course_ids[] = $v_course['recordid'];
				}
			}

			if(strlen($_POST['btnpdf']) > 0)
			{
				$this->generatesapvfb3formPdf(3, $_POST, 'SAPVF_B3', "sapvf_b3pdform.html");
			}

			//ISPC -2163
			//$modules = new Modules();
			//$module_enabled = $modules->checkModulePrivileges("79", $clientid);				
			if($cl_data[0]['activate_shortcut_v_settings'])
			{
				if($cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_settings'] == 'yes')
				{
					if($cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'])
					{						
							$module_enabled = true;
					}
				}
			}

			$get_shared_from_patient_course = PatientCourse::getCourseDataReceived(array($ipid));
			if(!empty($get_shared_from_patient_course)){
				$received_course = array();
				foreach($get_shared_from_patient_course as $k=>$rc){
					$received_course[$rc['ipid']][] = $rc['id'];
				}
			}
			
			
			
			$spc = Doctrine_Query::create()
				->select('*')
				->from('Sapsymptom')
				->where("ipid='" . $ipid . "'")
				->andWhere('isdelete = 0')
				->andWhereNotIn('visit_id', $wrong_course_ids);
				if(!empty($received_course[$ipid])){
					$spc->andWhereNotIn('patient_course_id',$received_course[$ipid]);
				}
				$spc->orderBy('id DESC');

			if(!$module_enabled)
			{
				//exclude V shortcut if module/(ISPC -2163) client setting is not activated
				//$sp->andWhere('sapvalues != "999"');
				$spc->andWhere('sapvalues != "999" and sapvalues != "8,999"');
			}
			$sparrc = $spc->fetchArray();

			$this->view->lastsapid = $sparrc[0]['id'];

			$sp = Doctrine_Query::create()
				->select('*')
				->from('Sapsymptom')
				->where("ipid='" . $ipid . "'")
				->andWhere('isdelete = 0')
				->andWhereNotIn('visit_id', $wrong_course_ids);
				if(!empty($received_course[$ipid])){
					$sp->andWhereNotIn('patient_course_id',$received_course[$ipid]);
				}
				$sp->orderBy('create_date ASC');

			/*if(!$module_enabled)
			{
				//exclude V shortcut if module is not activated
				$sp->andWhere('sapvalues != "999"');
			}*/

			$sparr = $sp->fetchArray();
			//var_dump($sparr); exit;
			foreach($sparr as $kr=>&$vr)
			{
				if(!$module_enabled)
				{
					if($vr['sapvalues'] == '999' || $vr['sapvalues'] == '8,999')
					{
						unset($sparr[$kr]);
					}
				}
				else 
				{
					/* if($vr['sapvalues'] == '998,999' && count($cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings']) > 1)
					{
							$vr['sapvalues'] = '8';
					} */
					if(($vr['sapvalues'] == '8,999' || $vr['sapvalues'] == '999') && $cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'][0] == '0' && !$cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'][1])
					{
						$vr['sapvalues'] = '999';
					}
					elseif($vr['sapvalues'] == '8,999' && $cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'][0] == '1' && !$cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'][1])
					{
						$vr['gesamt_zeit_in_minuten'] = '';
					}
				}
			}
//var_dump($sparr); exit;
			$this->view->sparr = $sparr;
		}

		private function generatesapvfb8formPdf($chk, $post, $pdfname, $filename)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$clientid = $logininfo->clientid;
			$ipid = Pms_CommonData::getIpid($decid);
// 			$post['ipid'] = Pms_CommonData::getIpid($decid);
			$post['ipid'] = $ipid;			

			//ISPC - 2163
			$clt = new Client();
			$cl_data = $clt->getClientDataByid($clientid);
				
			//ISPC -2163
			if($cl_data[0]['activate_shortcut_v_settings'])
			{
				if($cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_settings'] == 'yes')
				{
					if($cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'][0] == '0')
					{
						$module_enabled = true;
					}
				}
			}
			
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$post['patientname'] = $parr['last_name'] . ", " . $parr['first_name'] . "<br>" . $parr['street1'] . "<br>" . $parr['zip'] . "<br>" . $parr['city'];
			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);

			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['clientname'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];

// 			$sapsymp = Sapsymptom::get_patient_sapvsymptom(Pms_CommonData::getIpid($decid));
			$sapsymp = Sapsymptom::get_patient_sapvsymptom($ipid);
			
		foreach($sapsymp as $kr=>&$vr)
			{
				foreach($vr as $kc=>&$vc)
				{
					if($vc['sapvalues'] == '8,999')
					{
						$vc['sapvalues'] = '999';
					}
				}
			}
//var_dump($sapsymp); exit;
			$totalpage = (int) (count($sapsymp) / 13);

			if(count($sapsymp) % 13 != 0)
			{
				$totalpage++;
			}

// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $parr;
			
			$post['bdate'] = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$post['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$post['insurance_status'] = $healthinsu_array[0]['insurance_status'];

			$hquery = Doctrine_Query::create()
				->select('*')
				->from('HealthInsurance')
				->where("id='" . $healthinsu_array[0]['companyid'] . "' or name='" . $healthinsu_array[0]['company_name'] . "'");
			$hexec = $hquery->execute();
			$harray = $hexec->toArray();
			$post['kvnumber'] = $harray[0]['kvnumber'];

			/* analage3 */
// 			$patientmaster = new PatientMaster();
// 			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

// 			$tm = new TabMenus();
// 			$this->view->tabmenus = $tm->getMenuTabs();

			$post['tablepatientinfo'] = Pms_Template::createTemplate($parr, 'templates/pdfprofile.html');

			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");

			$verdung = "";
			if($patientinfo['isdischarged'] == 1)
			{
				$doc = Doctrine::getTable('PatientDischarge')->findBy('ipid', $ipid);
				$patientarray = $doc->toArray();
				$post['discharge_date'] = date("d.m.Y H:i:s", strtotime($patientarray[0]['discharge_date']));
			}
			$sav = new SapvVerordnung();
			$post['savarry'] = $sav->getSapvVerordnungData($ipid);

			$savarry = $sav->getSapvVerordnungData($ipid);
			$montharray = array(date('m', mktime(0, 0, 0, date("m") - 1, date("d"), date("Y"))), date('m'));
			$verdoungmonths = array();
			$comma = "";
			$cnt = 0;

			foreach($savarry as $moth => $keyd)
			{
				if($keyd['verordnungam'] != '0000-00-00 00:00:00' && $keyd['verordnungbis'] != '0000-00-00 00:00:00')
				{
					$verdounmonths[$cnt++] = $this->get_months($keyd['verordnungam'], $keyd['verordnungbis']);
				}
			}

			if(count($verdounmonths) > 0)
			{
				foreach($verdounmonths as $keym => $valm)
				{
					foreach($valm as $keylm)
					{
						if(!in_array($keylm, $montharray))
						{
							$verdung .=$comma . $keylm;
							$comma = ",";
							$arrayMonthsVerdung[$keylm] = $keylm;
						}
					}
				}
			}

			$spc = Doctrine_Query::create()
				->select('distinct(DATE_FORMAT(create_date,"%Y%m")) as sapmonth')
				->from('Sapsymptom')
// 				->where("ipid='" . Pms_CommonData::getIpid($decid) . "' and date(create_date)<='" . date('Y-m-d') . "'")
				->where("ipid='" . $ipid . "' and date(create_date)<='" . date('Y-m-d') . "'")
				->andWhere('isdelete = 0')
				->orderBy('create_date ASC');
			$spcexe = $spc->execute();
			$mothary = array();
			$dbmontary = "";
			$comma = "";

			if($spcexe)
			{
				$mothary = $spcexe->toArray();
				if(count($mothary) > 0)
				{
					foreach($mothary as $key => $val)
					{
						if(!in_array($val['sapmonth'], $montharray))
						{
							$dbmontary .= $comma . $val['sapmonth'];
							$comma = ",";
						}
					}
				}
			}

			$post['sapmonth'] = $dbmontary;

			$pmaster = new PatientMaster();
			//get admission cycles start
			$admissions = $pmaster->getTreatedDaysRealMultiple(array($ipid), true);

			$admCycle[-1] = "gesamt";
			if(count($admissions[$post['ipid']]['admissionDates']) != "0")
			{
				//gesamt limitation
				$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$post['ipid']]['admissionDates'][0]['date']));

				foreach($admissions[$post['ipid']]['admissionDates'] as $keyAdm => $admitedDate)
				{
					if(!empty($admissions[$post['ipid']]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$post['ipid']]['dischargeDates'][$keyAdm]['date'];
					}
					else if(!empty($admissions[$ipid]['discharge_date']))
					{
						$dischargeDate = date('d.m.Y', strtotime($admissions[$post['ipid']]['discharge_date']));
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}

					$admCycle[$keyAdm] = date("d.m.Y", strtotime($admitedDate['date'])) . " - " . date("d.m.Y", strtotime($dischargeDate));
					$admissionsCycles[$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
					$admissionsCycles[$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));

					if($keyAdm == (count($admissions[$post['ipid']]['admissionDates']) - 1))
					{
						$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($dischargeDate));
					}

					if(strlen($admissions[$post['ipid']]['admissionDates'][($keyAdm + 1)]['date']) > 0)
					{
						if(date("d.m.Y", strtotime("+1 day", strtotime($admissions[$post['ipid']]['dischargeDates'][$keyAdm]['date']))) != date("d.m.Y", strtotime($admissions[$post['ipid']]['admissionDates'][($keyAdm + 1)]['date'])))
						{
							$dischargedPeriod[$keyAdm]['start'] = date("d.m.Y", strtotime("+1 day", strtotime($admissions[$post['ipid']]['dischargeDates'][$keyAdm]['date'])));
						}
						else
						{
							$dischargedPeriod[$keyAdm]['start'] = date("d.m.Y", strtotime($admissions[$post['ipid']]['dischargeDates'][$keyAdm]['date']));
						}

						$dischargedPeriod[$keyAdm]['end'] = date("d.m.Y", strtotime("-1 day", strtotime($admissions[$post['ipid']]['admissionDates'][($keyAdm + 1)]['date'])));
					}
					else
					{
						if(strlen($admissions[$post['ipid']]['dischargeDates'][$keyAdm]['date']) > 0)
						{
							$dischargedPeriod[$keyAdm]['start'] = date("d.m.Y", strtotime($admissions[$post['ipid']]['dischargeDates'][$keyAdm]['date']));
							$dischargedPeriod[$keyAdm]['end'] = date("d.m.Y", strtotime($admissions[$post['ipid']]['dischargeDates'][$keyAdm]['date']));
						}
					}
				}
			}
			else
			{
				$admCycle[0] = date("d.m.Y", strtotime($admissions[$post['ipid']]['admission_date'])) . " - " . date("d.m.Y", strtotime($admissions[$post['ipid']]['discharge_date']));
				//gesamt if no admision-readmission cycle
				$admissionsCycles[-1]['start'] = date("d.m.Y", strtotime($admissions[$post['ipid']]['admission_date']));
				$admissionsCycles[-1]['end'] = date("d.m.Y", strtotime($admissions[$post['ipid']]['discharge_date']));
				$admissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$post['ipid']]['admission_date']));
				$admissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$post['ipid']]['discharge_date']));

				$dischargedPeriod[0]['start'] = date("d.m.Y", strtotime($admissions[$post['ipid']]['discharge_date']));
				$dischargedPeriod[0]['end'] = date("d.m.Y", strtotime($admissions[$post['ipid']]['discharge_date']));
			}

			$post['firstAdmission'] = $admissionsCycles[-1]['start'];

			foreach($admissionsCycles as $keyCycle => $cycle)
			{
				$admissionCyclesMonths[$keyCycle] = $this->get_months(date("Y-m-d", strtotime($cycle['start'])), date("Y-m-d", strtotime($cycle['end'])));
			}

			//get selected cycle start
			if(strlen($_REQUEST['cycle']) == 0)
			{
				$cycleSelected = "-1";
			}
			else
			{
				$cycleSelected = $_REQUEST['cycle'];
			}
			$post['cycleSelected'] = $cycleSelected;

			//get selected cycle end
			$post['admission_date'] = $admissionsCycles[$cycleSelected]['start'];
			$post['discharge_date'] = $admissionsCycles[$cycleSelected]['end'];

			$this->view->admissionCycles = $admCycle;
			$post['cycleAdmissionsDetails'] = $admissionsCycles;

			$AllActiveDays[] = "";
			$patientmaster = new PatientMaster();

			foreach($admissionsCycles as $keyAdm => $admissionCycle)
			{
				if($keyAdm == $cycleSelected && $keyAdm != "-1")
				{
					$AllActiveDays[] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($admissionCycle['start'])), date("Y-m-d", strtotime($admissionCycle['end'])));
				}
			}

			foreach($AllActiveDays as $activePeriod)
			{
				foreach($activePeriod as $activeDay)
				{
					$activeDays[] = $activeDay;
				}
			}

			//death discharged method
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$todarray = $distod->fetchArray();

			$todIds[] = "99999999999999";
			foreach($todarray as $kTod => $vTod)
			{
				$todIds[] = $vTod['id'];
			}

			$post['todids'] = $todIds;

			$dispat = Doctrine_Query::create()
					->select("*")
					->from("PatientDischarge")
					->where("ipid = '" . $ipid . "'")->andWhereIn("discharge_method", $todIds)->andWhere('isdelete = 0');
			$disarray = $dispat->fetchArray();
			$post['patientdisdata'] = $disarray;
			if(count($disarray) > 0)
			{
				foreach($disarray as $kDis => $vDis)
				{
					if(in_array($vDis['discharge_method'], $todIds))
					{
						$post['death_date'] = date("d.m.Y", strtotime($vDis['discharge_date']));
					}
				}
			}
			else
			{
				$post['death_date'] = date("Y-m-d", strtotime("+1 day"));
			}
			//death button patient day END

			$post['activeDays'] = $activeDays;
			$post['selValue'] = $cycleSelected;

			//TO DO HERE (PDF NOT SHOWING IN GESAMT ALL MONTHS)
			if($cycleSelected != "-1")
			{
				$verdungarr = array_intersect($admissionCyclesMonths[$cycleSelected], explode(",", $verdung));
				$finalCycleSAPArray = array_merge($verdungarr, array_intersect($admissionCyclesMonths[$cycleSelected], explode(",", $post['sapmonth'])));
			}
			else
			{

				$verdungarr = explode(",", $verdung);
				if(!empty($verdungarr[0]))
				{
					$finalCycleSAPArray = array_merge($verdungarr, explode(",", $post['sapmonth']));
				}
				else
				{
					$finalCycleSAPArray = explode(",", $post['sapmonth']);
				}
			}

			unset($post['sapmonth']);
			$post['sapmonth'] = implode(",", $finalCycleSAPArray);

			//get admission cycles end
			$montexpl = explode(",", $post['sapmonth']);
			$montexpl = array_unique($montexpl);
			asort($montexpl);

			$firstyear = substr($montexpl[0], 0, 4);
			$firstmonth = str_replace($firstyear, "", $montexpl[0]);

			$date = $firstyear . "-" . $firstmonth . "-01";
			$starttime = strtotime($date);

			$diffdates = $pmaster->GetTreatedDays($date, date("Y-m-d", mktime(0, 0, 0, date("m") + 1, 01, date("Y"))), true);
			$verdungarr = array_unique($verdungarr);
			asort($verdungarr);

			if(count($verdungarr) > 0 && !empty($verdungarr[0]))
			{
				foreach($verdungarr as $key => $val)
				{
					$month = substr($val, -2, 2);
					$year = substr($val, 0, 4);

					$months[] = $year . "-" . $month;
				}
			}

			if(count($montexpl) > 0 && !empty($montexpl[0]))
			{
				foreach($montexpl as $key => $monte)
				{
					$month = substr($monte, -2, 2);
					$year = substr($monte, 0, 4);

					$months[] = $year . "-" . $month;
				}
			}

			$months = array_unique($months);
			asort($months);

			//	get hospitals for 4th column START
//Client Hospital Settings START
			//curent period
			$conditions['periods'][0]['start'] = date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['start']));
			$conditions['periods'][0]['end'] = date('Y-m-d', strtotime($admissionsCycles[$cycleSelected]['end']));
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];

			$in_hosp_cs = $patient_days[$ipid]['hospital']['admission'];
			$out_hosp_cs = $patient_days[$ipid]['hospital']['discharge'];

			foreach($hospital_days_cs as $k_hospital_cs => $v_hospital_cs)
			{
				$hospital_days_cs[$k_hospital_cs] = date('Y-m-d', strtotime($v_hospital_cs));
			}

			foreach($in_hosp_cs as $k_in_hosp_cs => $v_in_hosp_cs)
			{
				$in_hosp_days_cs[] = date('Y-m-d', strtotime($v_in_hosp_cs));
			}

			foreach($out_hosp_cs as $k_out_hosp_cs => $v_out_hosp_cs)
			{
				$out_hosp_days_cs[] = date('Y-m-d', strtotime($v_out_hosp_cs));
			}

			$post['hospitalizedDays'] = $hospital_days_cs;
			$post['continuous_hosp_days'] = $hospital_days_cs;
			$post['inHospitalDays'] = $in_hosp_days_cs;
			$post['outHospitalDays'] = $out_hosp_days_cs;

//Client Hospital Settings END


			$pm = new PatientMaster();
			//	get hospitals for 4th column END
			$dischargedDays[] = "9999999999999";
			foreach($dischargedPeriod as $keyDp => $valDp)
			{
				if(strlen($valDp['start']) > 0 && strlen($valDp['end']) > 0 && ($valDp['start'] != $valDp['end']))
				{
					$dischargedDays[] = $pm->getDaysInBetween(date("Y-m-d", strtotime($valDp['start'])), date("Y-m-d", strtotime($valDp['end'])));
				}
				else if($valDp['start'] == $valDp['end'])
				{
					//$dischargedDays['disdate'][] = date("Y-m-d", strtotime($valDp['start']));
				}
			}

			$dischDays[] = "99999999999999";
			foreach($dischargedDays as $ddayarr)
			{
				foreach($ddayarr as $dday)
				{
					$dischDays[] = date("d.m.Y", strtotime($dday));
				}
			}
			$post['dischDays'] = $dischDays;

			$i = 0;

			//get wrong bayern doctor visits
			$patient_course = Doctrine_Query::create()
				->select('*')
				->from('PatientCourse')
				->where('wrong = "1"')
// 				->andWhere('tabname = AES_ENCRYPT("bayern_doctorvisit","' . Zend_Registry::get('salt') . '")')
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'bayern_doctorvisit' or AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->andWhere('ipid =?', $ipid)
				->andWhere('source_ipid =  ""');
			$patient_course_res = $patient_course->fetchArray();

			$wrong_course_ids[] = '9999999999';
			if($patient_course_res)
			{
				foreach($patient_course_res as $k_course => $v_course)
				{
					$wrong_course_ids[] = $v_course['recordid'];
				}
			}

			$post['excluded_visit_ids'] = $wrong_course_ids;

			/*$modules = new Modules();
			$module_enabled = $modules->checkModulePrivileges("79", $clientid);*/
			
			if($module_enabled)
			{
				$post['module_enabled'] = '1';
			}
			else
			{
				$post['module_enabled'] = '0';
			}
			
			$post['old_version'] = 0;
			if($_REQUEST['old_version'] == "1"){
				$post['old_version'] = 1;
			}
			$i = 0;
			$_SESSION['count'] = 0;
			
			$_SESSION['final1'] = 0;
			$_SESSION['final2'] = 0;
			$_SESSION['final3'] = 0;
			$_SESSION['final4'] = 0;
			$_SESSION['final5'] = 0;
			$_SESSION['final6'] = 0;
			$_SESSION['final7'] = 0;
			$_SESSION['final8'] = 0;
			$_SESSION['final9'] = 0;
			$_SESSION['final10'] = 0;
			$_SESSION['final11'] = 0;
			
			$a_monthgrid = array();
			foreach($months as $keym => $valmon)
			{
			    if($valmon != "-"){
			        
    				list($year, $mth) = explode("-", $valmon);
    				$post['mth'] = $mth;
    				$post['year'] = $year;
    				$_SESSION['count'] = 0;
    				$post['cnter'] = $i + 1;
    
    				$a_monthgrid[$i]['month'] = Pms_Template::createTemplate($post, 'templates/sapvfb8_paging.html');
    				$i++;
			    } 
			}

			$i = 0;
			foreach($a_monthgrid as $month_data)
			{
				if(!empty($month_data['month']))
				{
					$data[$i]['month'] = $month_data['month'];
					$i++;
				}
			}

			$cnt = count($data);

			$x = 0;
			foreach($data as $d)
			{
				$data[$x]['nofrecords'] = $cnt + 1;
				$x++;
			}

			$grid = new Pms_Grid($data, 2, $cnt, "sapvfb8_months.html");
//			$grid->gridview->patient_name = $parr['last_name'] . ", " . $parr['first_name']; //."<br>".$parr['street1']."<br>".$parr['zip']."<br>".$parr['city'];
			$grid->gridview->patient_name = $post['patient_name'];
			$grid->gridview->street = $post['street'];
			$grid->gridview->street2 = $post['street2'];
			$grid->gridview->zip = $post['zip'];
			$grid->gridview->birthd = $post['birthd'];
			$grid->gridview->telephon = $post['telephon'];
			$grid->gridview->mobile = $post['mobile'];
			$grid->gridview->kvnumber = $harray[0]['kvnumber'];
//			$grid->gridview->insurance_com_name = $healthinsu_array[0]['company_name'];
			$grid->gridview->insurance_com_name = $post['insurance_com_name'];
			$grid->gridview->insurance_no = $post['insurance_no'];
			$grid->gridview->insurance_status = $healthinsu_array[0]['insurance_status'];
			$grid->gridview->epid = $epid;
			$sapvfb8ggrid = $grid->renderGrid();

			$post['sap8pagecontent'] = $sapvfb8ggrid;

			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);

			if($chk == 1)
			{
				$tmpstmp = uniqid(time());
// 				mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH . "/" . $tmpstmp);
// 				$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$pdf->Output(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				//is this if ever reached?
			}
			if($chk == 2)
			{
				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				exit;
			}

			if($chk == 3)
			{
				$navnames = array("SAPV_fanfrage" => 'SAPVF Anfrage', "Uberleitungsbogen" => 'berleitungsbogen', "Verordnung" => ' Verordnung (Anlage 63)',
					"Palliativ_versorgung_a7" => 'Palliativ Versorgung a7',
					"folgeverordnung" => 'folgeverordnung',
					"Form_one" => 'SAPV-Einzelfallevaluation',
					"Form_two" => 'Statistische Angaben',
					"Anlage_4(Teil 1)" => 'Basisdokumentation (Anlage 4)',
					"formthree" => 'Bescheinigung Arzt-Palliativversorgung',
					"Stammblatt" => 'Stammblatt',
					"hopeform" => 'Basisbogen',
					"formfour" => 'SAPV-Einzelfallevaluation',
					"formfive" => 'Abschlussdokumentation',
					"SAPVF_B3" => 'Leistungserfassung',
					"SAPVF_B4" => 'berleitung',
					"SAPVF_B5" => 'Wunddokumentation',
					"SAPVF_B12" => 'Mngeldokumentation',
					"SAPVF_B8" => 'Leistungsnachweis'
				);

				$tmpstmp = uniqid(time());
// 				mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH . "/" . $tmpstmp);
				
				$filehandle = fopen(PDF_PATH .'/' . $tmpstmp . '/' . $pdfname . '.html', "a+");

				$headertext = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
						<html xmlns="http://www.w3.org/1999/xhtml">
						<head>
						<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><style type="text/css">
						<!--
						body {
						margin-left: 0px;
						margin-top: 0px;
						margin-right: 0px;
						margin-bottom: 0px;
						}
						-->
						</style></head><body>';

				$footertext = '</body></html>';
// 				echo $headertext.$htmlform.$footertext;
// 				exit;
				fwrite($filehandle, $headertext);
				fwrite($filehandle, $htmlform);
				fwrite($filehandle, $footertext);
				fclose($filehandle);

				$cmdf = './wkhtmltopdf '.PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.html  '.PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.pdf';
				//next line is only for ipcs.claudiu, remove on live version
				//$cmdf = 'xvfb-run --server-args="-screen 0, 1024x768x24"'. " ". 'wkhtmltopdf '.PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.html  '.PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.pdf';
				exec($cmdf);

				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
// 				$con_id = Pms_FtpFileupload::ftpconnect();
// 				if($con_id)
// 				{
// 					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
// 					Pms_FtpFileupload::ftpconclose($con_id);
// 				}
				$filesize = filesize(PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.pdf');
				$file = file_get_contents(PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.pdf');
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				

				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($navnames[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();
				$recordid = $cust->id;

				if($pdfname == 'SAPVF_B8')
				{
					//insert system file tags
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('6'));
				}

				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
				$cust->user_id = $logininfo->userid;
				$cust->save();

				$explo = explode("/", $_SESSION['filename']);
				$fdname = $explo[0];
				$flname = $explo[1];

// 				$con_id = Pms_FtpFileupload::ftpconnect();
// 				if($con_id)
// 				{
// 					$upload = Pms_FtpFileupload::filedownload($con_id, 'uploads/' . $zipname, 'uploads/' . $zipname);
// 					Pms_FtpFileupload::ftpconclose($con_id);
// 				}

// 				$cmd = "unzip -P " . $logininfo->filepass . " uploads/" . $zipname;
// 				exec($cmd);

// 				$file = file_get_contents("uploads/" . $fdname . "/" . $flname);

				ob_end_clean();
				ob_start();
				$expl = explode(".", $flname);

				header('Content-Description: File Transfer');
				header('Content-Type: application/octet-stream');
				header('Content-Disposition: attachment; filename="' . $flname . '"');
				header('Content-Transfer-Encoding: binary');
				header('Expires: 0');
				header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
				header('Pragma: public');
// 				header('Content-Length: ' . filesize("uploads/" . $fdname . "/" . $flname));
				header('Content-Length: ' . $filesize);
				ob_clean();
				flush();

				echo $file;
// 				$delcmd = "rm -r  uploads/" . $fdname . "; rm -r uploads/" . $zipname;
				$delcmd = "rm -r  " . PDF_PATH. "/" . $fdname . ";";
				exec($delcmd);
				exit;
			}
		}

		private function generatesapvfb3formPdf($chk, $post, $pdfname, $filename)
		{
// 			die(print_r(func_get_args()));
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
// 			$post['ipid'] = Pms_CommonData::getIpid($decid);
			$post['ipid'] = $ipid;
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
			$post['patientname'] = $parr['last_name'] . ", " . $parr['first_name'] . "<br>" . $parr['street1'] . "<br>" . $parr['zip'] . "<br>" . $parr['city'];

			/*$modules = new Modules();
			$module_enabled = $modules->checkModulePrivileges("79", $clientid);*/
			
			//ISPC - 2163
			$clt = new Client();
			$cl_data = $clt->getClientDataByid($clientid);
			
			if($cl_data[0]['activate_shortcut_v_settings'])
			{
				if($cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_settings'] == 'yes')
				{
					if($cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'])
					{
						$module_enabled = true;
					}
				}
			}

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);

			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['clientname'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];

			//get wrong bayern doctor visits
			$patient_course = Doctrine_Query::create()
				->select('*')
				->from('PatientCourse')
				->where('wrong = "1"')
// 				->andWhere('tabname = AES_ENCRYPT("bayern_doctorvisit","' . Zend_Registry::get('salt') . '")')
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'bayern_doctorvisit' or AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->andWhere('ipid LIKE "' . $ipid . '"')
				->andWhere('source_ipid = ""');
			$patient_course_res = $patient_course->fetchArray();

			$wrong_course_ids[] = '9999999999';
			if($patient_course_res)
			{
				foreach($patient_course_res as $k_course => $v_course)
				{
					$wrong_course_ids[] = $v_course['recordid'];
				}
			}

			$sp = Doctrine_Query::create()
				->select('*')
				->from('Sapsymptom')
// 				->where("ipid='" . Pms_CommonData::getIpid($decid) . "'")
				->where("ipid='" . $ipid . "'")
				->andWhereNotIn('visit_id', $wrong_course_ids)
				->andWhere('isdelete = 0')
				->orderBy('create_date ASC');
			/*if(!$module_enabled)
			{
				//exclude V shortcut if module is not activated
				$sp->andWhere('sapvalues != "999"');
			}*/
			$sapsymp = $sp->fetchArray();

			//var_dump($sapsymp); exit;
			foreach($sapsymp as $kr=>&$vr)
			{
				if(!$module_enabled)
				{
					if($vr['sapvalues'] == '999' || $vr['sapvalues'] == '8,999')
					{
						unset($sapsymp[$kr]);
					}
				}
				else
				{
					if(($vr['sapvalues'] == '8,999' || $vr['sapvalues'] == '999') && $cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'][0] == '0' && !$cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'][1])
					{
						$vr['sapvalues'] = '999';
					}
					elseif($vr['sapvalues'] == '8,999' && $cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'][0] == '1' && !$cl_data[0]['activate_shortcut_v_settings']['activate_shortcut_v_yes_settings'][1])
					{
						$vr['gesamt_zeit_in_minuten'] = '';
					}
				}
			}
			//var_dump($sapsymp); exit;
			$totalpage = (int) (count($sapsymp) / 13);

			if(count($sapsymp) % 13 != 0)
			{
				$totalpage++;
			}

// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $parr;
			
			$post['bdate'] = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$post['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$post['insurance_status'] = $healthinsu_array[0]['insurance_status'];

			$hquery = Doctrine_Query::create()
				->select('*')
				->from('HealthInsurance')
				->where("id='" . $healthinsu_array[0]['companyid'] . "' or name='" . $healthinsu_array[0]['company_name'] . "'");
			$harray = $hquery->fetchArray();

			$post['kvnumber'] = $harray[0]['kvnumber'];

			/* analage3 */
// 			$patientmaster = new PatientMaster();
// 			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$post['tablepatientinfo'] = Pms_Template::createTemplate($parr, 'templates/pdfprofile.html');

			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");

			for($i = 0; $i < $totalpage; $i++)
			{
				$post['sapsymp'] = array();
				for($j = $i * 13; $j < ($i * 13) + 13; $j++)
				{
					if(is_array($sapsymp[$j]))
					{
						$post['sapsymp'][] = $sapsymp[$j];
					}
				}
				$htmlform .= Pms_Template::createTemplate($post, 'templates/sapvfb3_paging.html');
			}
			// die($htmlform);
			$post['sappagecontent'] = $htmlform;
			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);

// die($htmlform);

			if($chk == 1)
			{
				$tmpstmp = uniqid(time());
// 				mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH. "/" . $tmpstmp);
// 				$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$pdf->Output(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				//is this if ever reached?
			}

			if($chk == 2)
			{
				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				exit;
			}

			if($chk == 3)
			{
				$navnames = array("SAPV_fanfrage" => 'SAPVF Anfrage', "Uberleitungsbogen" => 'berleitungsbogen', "Verordnung" => ' Verordnung (Anlage 63)',
					"Palliativ_versorgung_a7" => 'Palliativ Versorgung a7',
					"folgeverordnung" => 'folgeverordnung',
					"Form_one" => 'SAPV-Einzelfallevaluation',
					"Form_two" => 'Statistische Angaben',
					"Anlage_4(Teil 1)" => 'Basisdokumentation (Anlage 4)',
					"formthree" => 'Bescheinigung Arzt-Palliativversorgung',
					"Stammblatt" => 'Stammblatt',
					"hopeform" => 'Basisbogen',
					"formfour" => 'SAPV-Einzelfallevaluation',
					"formfive" => 'Abschlussdokumentation',
					"SAPVF_B3" => 'Leistungserfassung',
					"SAPVF_B4" => 'berleitung',
					"SAPVF_B5" => 'Wunddokumentation',
					"SAPVF_B12" => 'Mngeldokumentation',
					"SAPVF_B8" => 'Leistungsnachweis'
				);

				$tmpstmp = uniqid(time());
// 				mkdir("uploads/" . $tmpstmp);
				mkdir(PDF_PATH . "/" . $tmpstmp);
// die($htmlform);
// 				$filehandle = fopen('uploads/' . $tmpstmp . '/' . $pdfname . '.html', "a+");
				$filehandle = fopen(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.html', "a+");
				$headertext = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
			<html xmlns="http://www.w3.org/1999/xhtml">
			<head>
			<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><style type="text/css">
			<!--
			body {
				margin-left: 0px;
				margin-top: 0px;
				margin-right: 0px;
				margin-bottom: 0px;
			}
			-->
			</style></head><body>';

				$footertext = '</body></html>';

				fwrite($filehandle, $headertext);
				fwrite($filehandle, $htmlform);
				fwrite($filehandle, $footertext);
				fclose($filehandle);
// die(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.html');
// 				$cmdf = './wkhtmltopdf uploads/' . $tmpstmp . '/' . $pdfname . '.html  uploads/' . $tmpstmp . '/' . $pdfname . '.pdf';
				$cmdf = './wkhtmltopdf '.PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.html  '.PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.pdf';
				//next line is only for ipcs.claudiu, remove on live version
				//$cmdf = 'xvfb-run --server-args="-screen 0, 1024x768x24"'. " ". 'wkhtmltopdf '.PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.html  '.PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.pdf';
// 				die($cmdf);
				exec($cmdf , $output , $retval);


				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
// 				$con_id = Pms_FtpFileupload::ftpconnect();
// 				if($con_id)
// 				{
// 					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
// 					Pms_FtpFileupload::ftpconclose($con_id);
// 				}
				
				$filesize = filesize(PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.pdf');
				$file = file_get_contents(PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.pdf');
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH.'/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				
				

				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($navnames[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();

				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
				$cust->user_id = $logininfo->userid;
				$cust->save();

				$explo = explode("/", $_SESSION['filename']);
				$fdname = $explo[0];
				$flname = $explo[1];

// 				$con_id = Pms_FtpFileupload::ftpconnect();
// 				if($con_id)
// 				{
// 					$upload = Pms_FtpFileupload::filedownload($con_id, 'uploads/' . $zipname, 'uploads/' . $zipname);
// 					Pms_FtpFileupload::ftpconclose($con_id);
// 				}

// 				$cmd = "unzip -P " . $logininfo->filepass . " uploads/" . $zipname;
// 				exec($cmd);

// 				$file = file_get_contents("uploads/" . $fdname . "/" . $flname);

				ob_end_clean();
				ob_start();
				$expl = explode(".", $flname);

				header('Content-Description: File Transfer');
				header('Content-Type: application/octet-stream');
				header('Content-Disposition: attachment; filename="' . $flname . '"');
				header('Content-Transfer-Encoding: binary');
				header('Expires: 0');
				header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
				header('Pragma: public');
// 				header('Content-Length: ' . filesize("uploads/" . $fdname . "/" . $flname));
				header('Content-Length: ' . $filesize);
				ob_clean();
				flush();

				echo $file;
// 				$delcmd = "rm -r  uploads/" . $fdname . "; rm -r uploads/" . $zipname;
				$delcmd = "rm -r  ".PDF_PATH."/" . $fdname . "; ";
				exec($delcmd);
				exit;
			}
		}

		public function anlage10formoldAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->patid = $decid;
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$userid = $logininfo->userid;

			/* ######################################################### */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->patientdetails = $patientmaster->getMasterData($decid, 0);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$dischargedArr = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$this->view->dischargedarr = $dischargedArr;

			/* ######################################################### */
			//use true to get short version of verordnet fields
			$verordnetarray = Pms_CommonData::getSapvCheckBox(true);

			$sap = new SapvVerordnung();
			$verordungdata = $sap->getSapvVerordnungData($ipid);
			$this->view->verordungdata = $verordungdata;

			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);
			$this->view->company_name = $phi[0]['company_name'];
			$this->view->insurance_no = $phi[0]['insurance_no'];

			/* #################### Get Client Data ##################### */
			$hidemagic = Zend_Registry::get('hidemagic');
			$sql = "*,AES_DECRYPT(client_name,'" . Zend_Registry::get('salt') . "') as client_name,";
			$sql .= "AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,";
			$sql .= "AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,";
			$sql .= "AES_DECRYPT(postcode,'" . Zend_Registry::get('salt') . "') as postcode,";
			$sql .= "AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,";
			$sql .= "AES_DECRYPT(firstname,'" . Zend_Registry::get('salt') . "') as firstname,";
			$sql .= "AES_DECRYPT(lastname,'" . Zend_Registry::get('salt') . "') as lastname,";
			$sql .= "AES_DECRYPT(emailid,'" . Zend_Registry::get('salt') . "') as emailid,";
			$sql .= "AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone,";
			$sql .= "AES_DECRYPT(fax,'" . Zend_Registry::get('salt') . "') as fax,";
			$sql .= "AES_DECRYPT(institutskennzeichen,'" . Zend_Registry::get('salt') . "') as institutskennzeichen,";
			$sql .= "AES_DECRYPT(betriebsstattennummer,'" . Zend_Registry::get('salt') . "') as betriebsstattennummer,";
			$sql .= "AES_DECRYPT(comment,'" . Zend_Registry::get('salt') . "') as comment";

			$cust = Doctrine_Query::create()
				->select($sql)
				->from('Client')
				->where('id = ' . $clientid);
			$cust->getSqlQuery();
			$custexec = $cust->execute();

			if($custexec)
			{
				$clientarray = $custexec->toArray();
			}
			$this->view->iknumber = $clientarray[0]['institutskennzeichen'];
			$this->view->teamname = $clientarray[0]['team_name'];
			$this->view->address = $clientarray[0]['street1'] . "<br/>" . $clientarray[0]['postcode'] . " " . $clientarray[0]['city'];
			$this->view->phone = $clientarray[0]['phone'];

			//get pflegestufe
			$pms = new PatientMaintainanceStage();
			$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);

			if($pat_pms[0]['stage'] > 0 && !empty($pat_pms[0]['stage']) && $pat_pms[0]['stage'] > 0)
			{
				$this->view->pfl_stgage = $pat_pms[0]['stage'];
			}
			else
			{
				$this->view->pfl_stgage = "--";
			}

			$Q = Doctrine_Query::create()
				->select('*')
				->from('KvnoAssessment')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('iscompleted = 1')
				->andWhere('status ="0"'); //select only non dummy assessment
			$resarr = $Q->fetchArray();

			/* ####################################################### */
			if(count($verordungdata) != 0)
			{
				if(!empty($_REQUEST['list']))
				{
					$selectedPeriod = explode(".", $_REQUEST['list']);
				}
				else
				{
					$selectedPeriod[0] = date("Y");
					$selectedPeriod[1] = date("m");
				}
				$selectedPeriod[2] = "01";

				$formdays[] = $patientmaster->getDaysInBetween(date("Y-m-d H:i:s", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])), date("Y-m-d H:i:s", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])))));
				foreach($verordungdata as $verordd)
				{
					if($verordd['status'] == 1 && $verordd['verorddisabledate'] != '0000-00-00 00:00:00')
					{
						//we have a disable date so new bis date is the disable date day-1
						$verordd['verordnungbis'] = date("Y-m-d H:i", strtotime("-1 day", strtotime($verordd['verorddisabledate'])));
					}

					$formdays[] = $patientmaster->getDaysInBetween(date("Y-m-d H:i:s", strtotime(date("Y-m", strtotime($verordd['verordnungam'])) . "-01")), date("Y-m-d H:i:s", strtotime("-1 day", strtotime("+1 month", strtotime(date("Y-m", strtotime($verordd['verordnungbis'])) . "-01")))));
				}
			}
			else
			{
				if(!empty($_REQUEST['list']))
				{
					$selectedPeriod = explode(".", $_REQUEST['list']);
				}
				else
				{
					$selectedPeriod[0] = date("Y");
					$selectedPeriod[1] = date("m");
					$selectedPeriod[2] = "01";
				}

				$formdays[] = $patientmaster->getDaysInBetween(date("Y-m-d H:i:s", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])), date("Y-m-d H:i:s", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])))));
			}

			if($_REQUEST['dbg'] == 1)
			{
				print_r($formdays);
			}

			//sort days array
			foreach($formdays as $key => $valuesAry)
			{
				foreach($valuesAry as $kvary => $vvary)
				{
					$month = date('m', strtotime($vvary));
					$day = date("j", strtotime($vvary));
					$year = date("Y", strtotime($vvary));
					$groupedArray[$year . "." . $month][$day] = $vvary;
					$montharray[$year . "." . $month] = $month . "/" . $year;
					$firstDatePeriod[$year . "." . $month] = date("Y-m-d", strtotime($year . "-" . $month . "-01"));
				}
			}

			$present = date("Y") . "." . date("m");
			$presentl = date("m") . "/" . date("Y");

			if(!in_array($present, $montharay))
			{
				$montharray[$present] = $presentl;
			}

			if(count($resarr) > 0)
			{
				$kvnoMonthYear = date('Y.m', strtotime($resarr[0]['completed_date']));
				$kvnoMonthYearValue = date('m/Y', strtotime($resarr[0]['completed_date']));

				if(!array_key_exists($kvnoMonthYear, $montharray))
				{
					$montharray[$kvnoMonthYear] = $kvnoMonthYearValue;
				}
			}

			ksort($montharray);
			$this->view->montharray = array_unique($montharray);

			if(empty($_REQUEST['list']))
			{
				$listmonth = date('Y') . "." . date("m");
			}
			else
			{
				$listmonth = $_REQUEST['list'];
			}
			$this->view->listmonth = $listmonth;


			if(!function_exists('cal_days_in_month'))
			{
				$monthDays = date('t', mktime(0, 0, 0, date("n", strtotime($firstDatePeriod[$listmonth])), 1, date("Y", strtotime($firstDatePeriod[$listmonth]))));
			}
			else
			{
				$monthDays = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($firstDatePeriod[$listmonth])), date("Y", strtotime($firstDatePeriod[$listmonth])));
			}
			$this->view->listDaysMax = $monthDays;

			// get hospital locations START
			$hospitalids = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type = 1');

			$hosparray = $hospitalids->fetchArray();

			$hosparr[] = "9999999999";
			foreach($hosparray as $hospital)
			{
				$hosparr[] = $hospital['id'];
			}

			//	get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
				->andWhereIn('location_id', $hosparr)
				->orderBy('valid_from,id ASC');
			if($_REQUEST['dbg'] == "1")
			{
				print_r($patloc->getDql());
			}
			$patlocationsArr = $patloc->fetchArray();

			foreach($patlocationsArr as $hospitalPeriod)
			{
				if($_REQUEST['dbg'])
				{
					print_r('Locations Data:');
					print_r($hospitalPeriod);
				}

				if($hospitalPeriod['valid_till'] == "0000-00-00 00:00:00")
				{
					$hospitalPeriod['valid_till'] = date("Y-m-d", strtotime('+1 day'));
				}

				$dayshospital[] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($hospitalPeriod['valid_from'])), $hospitalPeriod['valid_till']);

				//here add sapv tage dead in or out
				if(strtotime(date("Y-m-d", strtotime("+1 day", strtotime($hospitalPeriod['valid_from'])))) <= strtotime(date("Y-m-d", strtotime("-1 day", strtotime($hospitalPeriod['valid_till'])))))
				{
					$valid_from = date("Y-m-d", strtotime("+1 day", strtotime($hospitalPeriod['valid_from'])));
					$valid_till = date("Y-m-d", strtotime("-1 day", strtotime($hospitalPeriod['valid_till'])));

					$dayshospitalSecondArr[] = $patientmaster->getDaysInBetween($valid_from, $valid_till); //used in 24h =>[26]
				}
				else if(strtotime(date("Y-m-d", strtotime("+1 day", strtotime($hospitalPeriod['valid_from'])))) < strtotime(date("Y-m-d", strtotime($hospitalPeriod['valid_till']))))
				{

					$valid_from = date("Y-m-d", strtotime("+1 day", strtotime($hospitalPeriod['valid_from'])));
					$valid_till = date("Y-m-d", strtotime($hospitalPeriod['valid_till']));

					$dayshospitalSecondArr[] = $patientmaster->getDaysInBetween($valid_from, $valid_till); //used in 24h =>[26]
				}
				else if(strtotime(date("Y-m-d", strtotime("+1 day", strtotime($hospitalPeriod['valid_from'])))) == strtotime(date("Y-m-d", strtotime($hospitalPeriod['valid_till']))))
				{

					$valid_till = date("Y-m-d", strtotime("-1 day", strtotime($hospitalPeriod['valid_till'])));
					$valid_from = date("Y-m-d", strtotime($hospitalPeriod['valid_from']));

					$dayshospitalSecondArr[] = $patientmaster->getDaysInBetween($valid_from, $valid_till); //used in 24h =>[26]
				}
				else
				{
					$valid_from = date("Y-m-d", strtotime($hospitalPeriod['valid_from']));
					$valid_till = date("Y-m-d", strtotime($hospitalPeriod['valid_till']));

					$dayshospitalSecondArr[] = $patientmaster->getDaysInBetween($valid_from, $valid_till); //used in 24h =>[26]
				}
				$hospitalStartDays[] = date("Y-m-d", strtotime($hospitalPeriod['valid_from']));
				$hospitalEndDays[] = date("Y-m-d", strtotime($hospitalPeriod['valid_till']));
			}

			$hospital_continuous_days[] = '99999999';
			foreach($hospitalStartDays as $k_hosp_start => $v_hosp_start)
			{
				if(in_array($v_hosp_start, $hospitalEndDays))
				{
					$hospital_continuous_days[] = $v_hosp_start;
				}
			}


			$hospFinalDays = array();
			if(count($dayshospital) > 1)
			{
				foreach($dayshospital as $hospKey => $hospDays)
				{
					$hospFinalDays = array_merge($hospFinalDays, $hospDays);
				}
			}
			else if(count($dayshospital) == "1")
			{
				$hospFinalDays = $dayshospital[0];
			}

			$hospFinalDays = array_merge($hospFinalDays, $hospital_continuous_days);
			array_unique($hospFinalDays);


			$hospFinalDaysSecond = array("999999999999");
			if(count($dayshospitalSecondArr) > 1)
			{
				foreach($dayshospitalSecondArr as $hospKeyS => $hospDaysS)
				{
					$hospFinalDaysSecond = array_merge($hospFinalDaysSecond, $hospDaysS);
				}
			}
			else if(count($dayshospitalSecondArr) == "1")
			{
				$hospFinalDaysSecond = $dayshospitalSecondArr[0];
			}

			$hospFinalDaysSecond = array_merge($hospFinalDaysSecond, $hospital_continuous_days);
			array_unique($hospFinalDaysSecond);

			$this->view->hospitalFinalDays = $hospFinalDaysSecond;
			$this->view->hospitalStartDays = $hospitalStartDays;
			$this->view->hospitalEndDays = $hospitalEndDays;
			$this->view->hospital_cont_days = $hospital_continuous_days;

			if($_REQUEST['dbg'])
			{
				print_r($hospitalStartDays);
				print_r($hospitalEndDays);
				print_r("\nHosp Final Days\n");
				print_r($hospFinalDaysSecond);
				print_r("\nHosp Continuous Days\n");
				print_r($hospital_continuous_days);
			}

			// get hospital locations END
			// check if death date is in hospital START
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");

			$todarray = $distod->fetchArray();

			$todIds[] = "9999999999999";
			foreach($todarray as $todmethod)
			{
				$todIds[] = $todmethod['id'];
			}
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $todIds);
			$dischargedArr = $dispat->fetchArray();

			if(in_array(date("Y-m-d", strtotime($dischargedArr[0]['discharge_date'])), $hospFinalDays) && in_array($dischargedArr[0]['discharge_method'], $todIds))
			{
				$death_date = date("Y-m-d", strtotime($dischargedArr[0]['discharge_date']));
			}
			else
			{
				if(count($dischargedArr) > 0)
				{
					$death_date = date("Y-m-d", strtotime("+1 day", strtotime($dischargedArr[0]['discharge_date'])));
				}
				else
				{
					$death_date = date("Y-m-d", strtotime("+1 day"));
				}
			}

			$this->view->deathDateHospital = $death_date;
			if($_REQUEST['dbg'] == "1")
			{
				print_r("\n\n\n AAA");
				print_r($death_date);
				var_dump($death_date);
				print_r($hospFinalDays);
			}

			// check if death date is in hospital END
			for($i = 1; $i <= $monthDays; $i++)
			{
				$days_data[$i]['day'] = $i;

				if(count($resarr) > 0)
				{
					$kvnoactivity = $resarr[0];
				}

				//processing verordung data start
				foreach($verordungdata as $verordata)
				{
					$days_data[$i]['disabled'] = 0;
					//check if activity has status 1=disabled
					if($verordata['status'] == 1 && $verordata['verorddisabledate'] != '0000-00-00 00:00:00')
					{ //we have a disable date so new bis date is the disable date day-1
						$verordata['verordnungbis'] = date("Y-m-d H:i", strtotime("-1 day", strtotime($verordata['verorddisabledate'])));
						$days_data[$i]['disabled'] = 1;
					}
					elseif($verordata['status'] == 1 && $verordata['verorddisabledate'] == '0000-00-00 00:00:00')
					{
						$verordata['verordnungbis'] = date("Y-m-d H:i", strtotime(strtotime($verordata['verordnungam'])));
						$days_data[$i]['disabled'] = 1;
					}

					if((strtotime($groupedArray[$listmonth][$i]) >= strtotime($verordata['verordnungam']) && strtotime($groupedArray[$listmonth][$i]) <= strtotime($verordata['verordnungbis'])))
					{
						foreach($verordungdata as $vkey => $vvalue)
						{
							if(strlen($verordata['verordnet']) == 1)
							{

								if($verordata['verordnet'] == 1)
								{
									$keyv = 2;
								}
								elseif($verordata['verordnet'] == 2)
								{
									$keyv = 1;
								}
								else
								{
									$keyv = $verordata['verordnet'];
								}
								$days_data[$i]['verordnungstr'][$keyv] = $verordnetarray[$verordata['verordnet']];
							}
							else
							{
								$vdata = explode(",", $verordata['verordnet']);


								$days_data[$i]['disabled'] = 0;


								foreach($vdata as $vvalue)
								{
									if($vvalue == 1)
									{
										$days_data[$i]['verordnungstr'][2] = $verordnetarray[$vvalue];
									}

									if($vvalue == 2)
									{
										$days_data[$i]['verordnungstr'][1] = $verordnetarray[$vvalue];
									}

									if($vvalue == 3)
									{
										$days_data[$i]['verordnungstr'][3] = $verordnetarray[$vvalue];
									}

									if($vvalue == 4)
									{
										$days_data[$i]['verordnungstr'][4] = $verordnetarray[$vvalue];
									}
								}
							}//end if/else
						} // end foreach verordung


						ksort($days_data[$i]['verordnungstr']);
						$days_data[$i]['verordnungstr'] = array_unique($days_data[$i]['verordnungstr']);
						$days_data[$i]['verordnungstring'][$i] = implode(",", $days_data[$i]['verordnungstr']);
						$versorgungs = explode(",", $days_data[$i]['verordnungstring'][$i]);

						//set high verordung
						$days_data[$i]['verordnung'][$i] = "";
						if(in_array("VV", $versorgungs))
						{
							$days_data[$i]['verordnung'][$i] = "VV";
						}
						else if(in_array("TV", $versorgungs) && !in_array("VV", $versorgungs))
						{
							$days_data[$i]['verordnung'][$i] = "TV";
						}
						else if(in_array("BE", $versorgungs) && !in_array("TV", $versorgungs) && !in_array("VV", $versorgungs))
						{
							$days_data[$i]['verordnung'][$i] = "BE";
						}
						else if(in_array("KO", $versorgungs) && !in_array("TV", $versorgungs) && !in_array("VV", $versorgungs) && !in_array("BE", $versorgungs))
						{
							$days_data[$i]['verordnung'][$i] = "KO";
						}
						else
						{
							$days_data[$i]['verordnung'][$i] = "";
						}
					}//end if date in range
				}//end foreach verorodung
				//processing verordung data end
				//vars
				$mediziniarr = array("1" => "E", "2" => "S", "3" => "P", "4" => "K");

				//get form from verlauf, created to see what`s deleted
				$docFormCourse = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->where('ipid ="' . $ipid . '"')
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
					->andWhere("wrong = 0")
					->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$doc = $docFormCourse->fetchArray();

				$docstr = "99999999999";
				$comma = ",";
				foreach($doc as $doctorCourse)
				{
					$docstr .= $comma . $doctorCourse['recordid'];
					$comma = ",";
				}

				//get activ > doctorform start
				$q_doctor = Doctrine_Query::create()
					->select("*")
					->from("KvnoDoctor")
					->where("id IN (" . $docstr . ")");
				$doctorvisit = $q_doctor->fetchArray();

				foreach($doctorvisit as $doc_key => $doc_value)
				{
					$vizit_date = explode(" ", $doc_value['vizit_date']);
					if(count($vizit_date) == 2)
					{
						$date = $vizit_date[0];
					}

					if(strtotime($groupedArray[$listmonth][$i]) == strtotime($date))
					{
						//get doctor data
						$doctordata = Pms_CommonData::getUserData($doc_value['create_user']);

						//extract initials
						if(empty($doctordata[0]['shortname']))
						{
							$doctorvisit[$doc_key]['initials'] = mb_substr($doctordata[0]['first_name'], 0, 1, "UTF-8") . "" . mb_substr($doctordata[0]['last_name'], 0, 1, "UTF-8");
						}
						else
						{
							$doctorvisit[$doc_key]['initials'] = $doctordata[0]['shortname'];
						}

						$doctorvisit[$doc_key]['time_interval'] = str_pad($doc_value['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT) . ":" . str_pad($doc_value['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT) . "-" . str_pad($doc_value['kvno_end_date_h'], 2, "0", STR_PAD_LEFT) . ":" . str_pad($doc_value['kvno_end_date_m'], 2, "0", STR_PAD_LEFT);

						$doc_chk = "";
						if(strlen($doc_value['kvno_medizini_b']) == 1)
						{
							$doc_chk = $mediziniarr[$doc_value['kvno_medizini_b']];
						}
						else
						{
							$chks = explode(",", $doc_value['kvno_medizini_b']);

							$z = 1;
							foreach($chks as $c_key => $c_val)
							{
								if($z != count($chks))
								{
									$end = ", ";
								}
								else
								{
									$end = "";
								}
								$doc_chk .= $mediziniarr[$c_val] . $end;
								$z++;
							}
						}
						$doctorvisit[$doc_key]['checkboxes'] = $doc_chk;
						$doctorvisit[$doc_key]['activity_str'] = "Besuch " . $doctorvisit[$doc_key]['initials'] . " " . $doctorvisit[$doc_key]['time_interval'] . " " . $doc_chk;
						$doctorvisit[$doc_key]['type'] = "D";

						$days_data[$i]['activ'][] = $doctorvisit[$doc_key];
					}
				}

				//get form from verlauf, created to see what`s deleted
				$nurseFormCourse = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->where('ipid ="' . $ipid . '"')
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
					->andWhere("wrong = 0")
					->andWhere('source_ipid = ""')
					->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form' or AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'lvn_nurse_form'")
					->orderBy('course_date ASC');
				$nurse = $nurseFormCourse->fetchArray();

				$nursestr = "99999999999";
				$comma = ",";
				foreach($nurse as $nurseCourse)
				{
					$nursestr .= $comma . $nurseCourse['recordid'];
					$comma = ",";
				}

				//get activ > nurse start
				$q_nurse = Doctrine_Query::create()
					->select("*")
					->from("KvnoNurse")
					->where("id IN (" . $nursestr . ")");
				$nursevisit = $q_nurse->fetchArray();

				foreach($nursevisit as $nurse_key => $nurse_value)
				{
					$vizit_date = explode(" ", $nurse_value['vizit_date']);
					if(count($vizit_date) == 2)
					{
						$date = $vizit_date[0];
					}

					if(strtotime($groupedArray[$listmonth][$i]) == strtotime($date))
					{
						if($nurse_value['sub_user'] != '0')
						{
							/* -------------------User / Sub-users Data - LEVERKUSEN --------------------------------------- */
							$sub_users_array = Pms_CommonData::getSubUsers($clientid, $nurse_value['create_user']);

							$nursevisit[$nurse_key]['initials'] = $sub_users_array[$nurse_value['sub_user']]['shortname'];
						}
						else
						{
							$nursedata = Pms_CommonData::getUserData($nurse_value['create_user']);

							if(empty($nursedata[0]['shortname']))
							{
// 							$nursevisit[$nurse_key]['initials'] =  substr($nursedata[0]['first_name'], 0, 1)."".substr($nursedata[0]['last_name'], 0, 1);
								$nursevisit[$nurse_key]['initials'] = mb_substr($nursedata[0]['first_name'], 0, 1, "UTF-8") . "" . mb_substr($nursedata[0]['last_name'], 0, 1, "UTF-8");
							}
							else
							{
								$nursevisit[$nurse_key]['initials'] = $nursedata[0]['shortname'];
							}
						}

						$nursevisit[$nurse_key]['time_interval'] = str_pad($nurse_value['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT) . ":" . str_pad($nurse_value['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT) . "-" . str_pad($nurse_value['kvno_end_date_h'], 2, "0", STR_PAD_LEFT) . ":" . str_pad($nurse_value['kvno_end_date_m'], 2, "0", STR_PAD_LEFT);
						$nursevisit[$nurse_key]['activity_str'] = "Besuch " . $nursevisit[$nurse_key]['initials'] . " " . $nursevisit[$nurse_key]['time_interval'] . " ";

						$nurse_chk = "";
						if(strlen($nurse_value['kvno_medizini2']) == 1)
						{
							$nurse_chk = $mediziniarr[$nurse_value['kvno_medizini2']];
						}
						else
						{
							$chks = explode(",", $nurse_value['kvno_medizini2']);

							$z = 1;
							foreach($chks as $c_key => $c_val)
							{
								if($z != count($chks))
								{
									$end = ", ";
								}
								else
								{
									$end = "";
								}
								$nurse_chk .= $mediziniarr[$c_val] . $end;
								$z++;
							}
						}

						$nursevisit[$nurse_key]['checkboxes'] = $nurse_chk;
						$nursevisit[$nurse_key]['activity_str'] = "Besuch " . $nursevisit[$nurse_key]['initials'] . " " . $nursevisit[$nurse_key]['time_interval'] . " " . $nurse_chk;
						$nursevisit[$nurse_key]['type'] = "N";
						$days_data[$i]['activ'][] = $nursevisit[$nurse_key];
					}
				}
				//get activ > nurseform end
				//get koordination visits start
				$koordFormCourse = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->where('ipid ="' . $ipid . '"')
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
					->andWhere("wrong = 0")
					->andWhere('source_ipid = ""')
					->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'visit_koordination_form'")
					->orderBy('course_date ASC');
				$koord = $koordFormCourse->fetchArray();

				$koord_nondeleted_ids[] = '99999999999999999999';
				foreach($koord as $koordCourse)
				{
					$koord_nondeleted_ids[] = $koordCourse['recordid'];
				}

				$q_koordination = Doctrine_Query::create()
					->select("*")
					->from("VisitKoordination")
					->whereIn("id", $koord_nondeleted_ids);
				$koordination_visit = $q_koordination->fetchArray();

				foreach($koordination_visit as $k_koord => $v_koord)
				{
					$visit_date = explode(" ", $v_koord['visit_date']);
					if(count($visit_date) == 2)
					{
						$date = $visit_date[0];
					}

					if(strtotime($groupedArray[$listmonth][$i]) == strtotime($date))
					{
						$koorddata = Pms_CommonData::getUserData($v_koord['create_user']);
						if(empty($koorddata[0]['shortname']))
						{
							$koordination_visit[$k_koord]['initials'] = mb_substr($koorddata[0]['first_name'], 0, 1, "UTF-8") . "" . mb_substr($koorddata[0]['last_name'], 0, 1, "UTF-8");
						}
						else
						{
							$koordination_visit[$k_koord]['initials'] = $koorddata[0]['shortname'];
						}

						$time = Pms_CommonData::calculate_visit_duration($v_koord['visit_begin_date_h'], $v_koord['visit_end_date_h'], $v_koord['visit_begin_date_m'], $v_koord['visit_end_date_m'], $v_koord['visit_date']);
						$koordination_visit[$k_koord]['course_date'] = $v_koord['visit_date'];
						$koordination_visit[$k_koord]['activity_str'] = "Koordination " . $koordination_visit[$k_koord]['initials'] . " " . $time . " Minuten";
						$koordination_visit[$k_koord]['verlauf'] = "1";
						$koordination_visit[$k_koord]['course_type'] = "V";

						$days_data[$i]['activ'][] = $koordination_visit[$k_koord];
					}
				}
				//get koordination visits end

				$listmontharr = explode(".", $listmonth);
				$kvno = "";
				$kvnoa = "";
				if($listmontharr[0] . "-" . str_pad($listmontharr[1], 2, '0', STR_PAD_LEFT) . "-" . str_pad($i, 2, '0', STR_PAD_LEFT) == date('Y-m-d', strtotime($kvnoactivity['completed_date'])))
				{
					$usr = new User();

					$doctor = $usr->getUserDetails($kvnoactivity['doc_id'], false);
					$pflege = $usr->getUserDetails($kvnoactivity['pfl_id'], false);

					if(!empty($pflege[0]['first_name']) || !empty($pflege[0]['last_name']))
					{
						$comma = ", ";
					}
					else
					{
						$comma = "";
					}

					if(empty($doctor[0]['shortname']))
					{
						$docinitials = strtoupper(mb_substr($doctor[0]['first_name'], 0, 1, "UTF-8") . "" . mb_substr($doctor[0]['last_name'], 0, 1, "UTF-8"));
					}
					else
					{
						$docinitials = $doctor[0]['shortname'];
					}

					if(empty($pflege[0]['shortname']))
					{
						$pflegenitials = $comma . mb_substr($pflege[0]['first_name'], 0, 1, "UTF-8") . "" . mb_substr($pflege[0]['last_name'], 0, 1, "UTF-8");
					}
					else
					{
						$pflegenitials = $comma . $pflege[0]['shortname'];
					}

					//get pflege and doc signed names>initials
					$kvno['activity_str'] = "Erst-Koordination \n" . $docinitials . $pflegenitials;
					$kvno['course_date'] = $kvnoactivity['completed_date'];
					$kvno['type'] = "A";

					$kvnoa['activity_str'] = "Assessment \n" . $docinitials . $pflegenitials;
					$kvnoa['course_date'] = $kvnoactivity['completed_date'];
					$kvnoa['type'] = "A";

					$days_data[$i]['kvno'][$i] = 1;
					$days_data[$i]['activ'][] = $kvno;
					$days_data[$i]['activ'][] = $kvnoa;
				}


				//get activ from verlauf using shortcuts U=tel and V=koord ###  start
				//Added Z=>XT Telefonat for client id 39(test office) LNR(49)==> changed to module
				$previleges = new Modules();
				$modulepriv = $previleges->checkModulePrivileges("55", $logininfo->clientid);

				if($modulepriv)
				{
					$lnrquery = " OR AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT'";
				}
				else
				{
					$lnrquery = "";
				}

				$course = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
					->from('PatientCourse')
					->where('ipid ="' . $ipid . '"')
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U' " . $lnrquery . "")
					->andWhere("wrong = 0")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$course_res = $course->execute();
				$coursearray = $course_res->toArray();

				foreach($coursearray as $course_key => $course_val)
				{
					$coursearr = explode("|", $course_val['course_title']);
					if(count($coursearr) == 3)
					{
						//method implemented with 3 inputs
						$time = $coursearr[0];
						$komment = $coursearr[1];
						$date = date('d.m.Y', strtotime($coursearr[2]));
						$coursearray[$course_key]['course_date'] = $date;
					}
					else if(count($coursearr) != 3 && count($coursearr) < 3)
					{
						//old method before anlage 10
						$time = $coursearr[0];
						$komment = $coursearr[1];
						$date = $course_val['course_date'];
						$coursearray[$course_key]['course_date'] = $date;
					}
					else if(count($coursearr) != 3 && count($coursearr) > 3)
					{
						//new method (U) 3 inputs and 1 select newly added in verlauf
						$time = $coursearr[1];
						$komment = $coursearr[2];
						$date = date('d.m.Y', strtotime($coursearr[3]));
						$coursearray[$course_key]['course_date'] = $date;
					}

					if(strtotime($groupedArray[$listmonth][$i]) == strtotime($date))
					{
						$user_course = Pms_CommonData::getUserData($course_val['user_id']);

						if(empty($user_course[0]['shortname']))
						{
							$coursearray[$course_key]['initials'] = mb_substr($user_course[0]['first_name'], 0, 1, "UTF-8") . "" . mb_substr($user_course[0]['last_name'], 0, 1, "UTF-8");
						}
						else
						{
							$coursearray[$course_key]['initials'] = $user_course[0]['shortname'];
						}

						if(!empty($course_val['course_title']))
						{
							if($course_val['course_type'] == "U")
							{
								if($modulepriv)
								{
									$title = "Beratung";
								}
								else
								{
									$title = "Telefonat";
								}
							}
							else if($course_val['course_type'] == "XT" && $modulepriv)
							{
								$title = "Telefonat";
							}
							$coursearray[$course_key]['activity_str'] = $title . " " . $coursearray[$course_key]['initials'] . " " . $time . " Minuten";
							$coursearray[$course_key]['verlauf'] = "1";

							$days_data[$i]['activ'][] = $coursearray[$course_key];
						}
					}
				}

				$courseV = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
					->from('PatientCourse')
					->where('ipid ="' . $ipid . '"')
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
					->andWhere("wrong = 0")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$course_resV = $courseV->execute();
				$coursearrayV = $course_resV->toArray();

				foreach($coursearrayV as $courseV_key => $courseV_val)
				{
					$coursearrV = explode("|", $courseV_val['course_title']);
					if(count($coursearrV) == 3)
					{
						$time = trim($coursearrV[0]);
						$komment = $coursearrV[1];
						$date = date('d.m.Y', strtotime(trim($coursearrV[2])));
						$coursearrayV[$courseV_key]['course_date'] = $date;
					}
					else if(count($coursearrV) != 3)
					{
						$time = trim($coursearrV[0]);
						$komment = $coursearrV[1];
						$date = date('d.m.Y', strtotime($courseV_val['course_date']));
						$coursearrayV[$courseV_key]['course_date'] = $date;
					}

					if(strtotime($groupedArray[$listmonth][$i]) == strtotime($date))
					{
						$user_courseV = Pms_CommonData::getUserData($courseV_val['user_id']);
						if(empty($user_courseV[0]['shortname']))
						{
							$coursearrayV[$courseV_key]['initials'] = mb_substr($user_courseV[0]['first_name'], 0, 1, "UTF-8") . "" . mb_substr($user_courseV[0]['last_name'], 0, 1, "UTF-8");
						}
						else
						{
							$coursearrayV[$courseV_key]['initials'] = $user_courseV[0]['shortname'];
						}

						if(!empty($courseV_val['course_title']))
						{
							if(empty($coursearrV[0]))
							{
								$time = "4";
							}
							else
							{
								$time = $coursearrV[0];
							}

							$coursearrayV[$courseV_key]['activity_str'] = "Koordination " . $coursearrayV[$courseV_key]['initials'] . " " . $time . " Minuten";
							$coursearrayV[$courseV_key]['verlauf'] = "1";

							$days_data[$i]['activ'][] = $coursearrayV[$courseV_key];
						}
						else
						{
							$coursearrayV[$courseV_key]['activity_str'] = "Koordinationsleistung " . $coursearrayV[$courseV_key]['initials'] . " 4 Minuten";
							$coursearrayV[$courseV_key]['verlauf'] = "1";

							$days_data[$i]['activ'][] = $coursearrayV[$courseV_key];
						}
					}
				}
				$daysactivity[$i] = $days_data[$i]['activ'];

				unset($days_data[$i]['activ']);
				$ix = 1;
				foreach($daysactivity[$i] as $activity)
				{
					// din verlauf dupa data apelului || koord
					if($activity['course_date'] != "0000-00-00 00:00:00" && !empty($activity['course_date']) && $activity['activity_str'] != "Assessment" && $activity['activity_str'] != "Erst-Koordination")
					{
						$days_activity[$i][(strtotime($activity['course_date']) + $ix)] = $activity;
					}

					//visits dupa data vizitei selectata in formular
					if($activity['vizit_date'] != "0000-00-00 00:00:00" && !empty($activity['vizit_date']))
					{

						$vdate = explode(" ", $activity['vizit_date']);
						$vdate[1] = $activity['kvno_begin_date_h'] . ":" . $activity['kvno_begin_date_m'] . ":00";
						$vizitdate = implode(" ", $vdate);

						$days_activity[$i][strtotime($vizitdate) + $ix] = $activity;
					}

					//assessment and est koord (+5 seconds)
					if($activity['activity_str'] == "Assessment")
					{
						$days_activity[$i][strtotime($activity['create_date'])] = $activity;
					}
					if($activity['activity_str'] == "Erst-Koordination")
					{

						$days_activity[$i][(strtotime($activity['create_date']) + $ix)] = $activity;
					}
					$ix++;
				}

				ksort($days_activity[$i]);
				$ix = 0;
				foreach($days_activity[$i] as $activity)
				{
					$days_data[$i]['activ'][$ix] = $activity;
					$ix++;
				}
				//get activities from verlauf using shortcuts U=tel and V=koord ###  end
				$days_data[$i]['total_activity'] = count($days_data[$i]['activ']);
			}//end for days

			if($_REQUEST['dbg'] == 'X')
			{
				print_r($days_data);
				exit;
			}

			$grid = new Pms_Grid($days_data, 1, count($days_data), "anlage10listdaysold.html");
			$this->view->daylist = $grid->renderGrid();

			//pdf procedure
			if(strlen($_POST['btnsubmit']) > 0)
			{

				//show selected month
				$monthsel = explode('.', $_REQUEST['month']);

				$monthselected = str_pad($monthsel[1], 2, '0', STR_PAD_LEFT) . '.' . $monthsel[0];
				$this->view->monthselected = $monthselected;

				$htmlform = Pms_Template::createTemplate($this->view, 'templates/pdf_anlage10.html');
				$pdfname = "Anlage10";
				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
				$pdf->setDefaults(true); //defaults with header
				$pdf->setImageScale(1.6);
				$pdf->SetMargins(10, 5, 10); //reset margins
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

				$pdf->setHTML($html);

				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				$file_name_real = basename($tmpstmp);

				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
				$_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';

				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;

				exec($cmd);
				$zipname = $file_name_real . ".zip";
				$filename = "uploads/" . $file_name_real . ".zip";

				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );

				$cust = new PatientFileUpload();
				$file_title = $pdfname . " (" . $monthselected . ")";
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($file_title));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();
				$recordid = $cust->id;

				$cust = new PatientCourse ();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $pdfname . ' wurde erstellt'));
				$cust->user_id = $logininfo->userid;
				$cust->save();

				ob_end_clean();
				ob_start();

				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}
		}

		public function anlage10formAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->patid = $decid;
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$userid = $logininfo->userid;
			
			/* ######################################################### */
			$patientmaster = new PatientMaster();
			$plist = new PriceList();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$this->view->patientdetails = $patientmaster->getMasterData($decid, 0);
			$this->view->patientdetails = $patientmaster->get_patientMasterData();
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			
			$module = new Modules();
			if($module->checkModulePrivileges("86", $clientid))
			{
				$mod_perms = "1";
			}
			else
			{
				$mod_perms = "0";
			}
			$this->view->module_change_billing = $mod_perms;
			

			if($module->checkModulePrivileges("108", $clientid))
			{
				$vv_visit_day = "1";
			}
			else
			{
				$vv_visit_day = "0";
			}

			$this->view->vv_visit_day = $vv_visit_day;

			if($module->checkModulePrivileges("114", $clientid))
			{
				$do_not_bill_after_death = "1";
			}
			else
			{
				$do_not_bill_after_death = "0";
			}
			$this->view->do_not_bill_after_discharge_time = $do_not_bill_after_death;
			
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$dischargedArr = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			
			
			
			foreach($dischargedArr as $ipid => $data)
			{
			    if(count($data['admissionDates']) > 0)
			    {
			        foreach($data['admissionDates'] as $aKey => $aData)
			        {
			
			            $admDate = date("Y-m-d", strtotime($aData['date']));
			            if(!empty($data['dischargeDates'][$aKey]))
			            {
			                $disDate = date("Y-m-d", strtotime($data['dischargeDates'][$aKey]['date']));
			                $discharge_date_dmyHi[] = date("d.m.Y H:i", strtotime($data['dischargeDates'][$aKey]['date']));
			            }
			            else
			            {
			                $disDate = date("Y-m-d");
			                $discharge_date_dmyHi[] = date("d.m.Y H:i");
			            }
			        }
			    }
			    else
			    {
			        $admDate = date("Y-m-d", strtotime($data['admission_date']));
			        if(empty($data['discharge_date']))
			        {
			            $disDate = date("Y-m-d");
			            $discharge_date_dmyHi[] = date("Y-m-d H:i");
			        }
			        else
			        {
			            $disDate = date("Y-m-d", strtotime($data['discharge_date']));
			            $discharge_date_dmyHi[] = date("d.m.Y H:i", strtotime($data['discharge_date']));
			        }
			    }
			}

			$this->view->dischargedarr = $dischargedArr;

			/* ######################################################### */
			//use true to get short version of verordnet fields
			$verordnetarray = Pms_CommonData::getSapvCheckBox(true);

			$sap = new SapvVerordnung();
			$verordungdata = $sap->getSapvVerordnungData($ipid);
			$this->view->verordungdata = $verordungdata;

			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);
			$this->view->company_name = $phi[0]['company_name'];
			$this->view->insurance_no = $phi[0]['insurance_no'];

			/* #################### Get Client Data ##################### */
			$hidemagic = Zend_Registry::get('hidemagic');
			$sql = "*,AES_DECRYPT(client_name,'" . Zend_Registry::get('salt') . "') as client_name,";
			$sql .= "AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') as street1,";
			$sql .= "AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') as street2,";
			$sql .= "AES_DECRYPT(postcode,'" . Zend_Registry::get('salt') . "') as postcode,";
			$sql .= "AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,";
			$sql .= "AES_DECRYPT(firstname,'" . Zend_Registry::get('salt') . "') as firstname,";
			$sql .= "AES_DECRYPT(lastname,'" . Zend_Registry::get('salt') . "') as lastname,";
			$sql .= "AES_DECRYPT(emailid,'" . Zend_Registry::get('salt') . "') as emailid,";
			$sql .= "AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') as phone,";
			$sql .= "AES_DECRYPT(fax,'" . Zend_Registry::get('salt') . "') as fax,";
			$sql .= "AES_DECRYPT(institutskennzeichen,'" . Zend_Registry::get('salt') . "') as institutskennzeichen,";
			$sql .= "AES_DECRYPT(betriebsstattennummer,'" . Zend_Registry::get('salt') . "') as betriebsstattennummer,";
			$sql .= "AES_DECRYPT(comment,'" . Zend_Registry::get('salt') . "') as comment";

			$cust = Doctrine_Query::create()
				->select($sql)
				->from('Client')
				->where('id = ' . $clientid);
			$cust->getSqlQuery();
			$custexec = $cust->execute();

			if($custexec)
			{
				$clientarray = $custexec->toArray();
			}
			$this->view->iknumber = $clientarray[0]['institutskennzeichen'];
			$this->view->teamname = $clientarray[0]['team_name'];
			$this->view->address = $clientarray[0]['street1'] . "<br/>" . $clientarray[0]['postcode'] . " " . $clientarray[0]['city'];
			$this->view->phone = $clientarray[0]['phone'];

			//get pflegestufe
			$pms = new PatientMaintainanceStage();
			$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);

			if($pat_pms[0]['stage'] > 0 && !empty($pat_pms[0]['stage']) && $pat_pms[0]['stage'] > 0)
			{
				$this->view->pfl_stgage = $pat_pms[0]['stage'];
			}
			else
			{
				$this->view->pfl_stgage = "--";
			}

			$Q = Doctrine_Query::create()
				->select('*')
				->from('KvnoAssessment')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('iscompleted = 1')
				->andWhere('status ="0"'); //select only non dummy assessment
			$resarr = $Q->fetchArray();

			/* ####################################################### */
			if(count($verordungdata) != 0)
			{
				if(!empty($_REQUEST['list']))
				{
					$selectedPeriod = explode(".", $_REQUEST['list']);
				}
				else
				{
					$selectedPeriod[0] = date("Y");
					$selectedPeriod[1] = date("m");
				}
				$selectedPeriod[2] = "01";

				$formdays[] = $patientmaster->getDaysInBetween(date("Y-m-d H:i:s", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])), date("Y-m-d H:i:s", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])))));
				foreach($verordungdata as $verordd)
				{
					if($verordd['status'] == 1 && $verordd['verorddisabledate'] != '0000-00-00 00:00:00')
					{
						//we have a disable date so new bis date is the disable date day-1
						$verordd['verordnungbis'] = date("Y-m-d H:i", strtotime("-1 day", strtotime($verordd['verorddisabledate'])));
					}

					$formdays[] = $patientmaster->getDaysInBetween(date("Y-m-d H:i:s", strtotime(date("Y-m", strtotime($verordd['verordnungam'])) . "-01")), date("Y-m-d H:i:s", strtotime("-1 day", strtotime("+1 month", strtotime(date("Y-m", strtotime($verordd['verordnungbis'])) . "-01")))));
				}
			}
			else
			{
				if(!empty($_REQUEST['list']))
				{
					$selectedPeriod = explode(".", $_REQUEST['list']);
				}
				else
				{
					$selectedPeriod[0] = date("Y");
					$selectedPeriod[1] = date("m");
				}
				
				$selectedPeriod[2] = "01";

				$formdays[] = $patientmaster->getDaysInBetween(date("Y-m-d H:i:s", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])), date("Y-m-d H:i:s", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])))));
			}

			//ISPC-2495 Carmen 10.12.2019
			//get default price list
			$default_price_list = Pms_CommonData::get_default_price_shortcuts();
			//get the period client price list			
			$start = $selectedPeriod[0] . '-' . $selectedPeriod[1] . '-' . $selectedPeriod[2];
			$start_ts = strtotime($start);
			$end = $selectedPeriod[0] . '-' . $selectedPeriod[1] . '-' . date('t', $start_ts);
			
			$listp = $plist->get_client_list_period($start, $end);

			$list = array();
			foreach($listp as $vl)
			{
				$list[$vl['id']] = $vl;
			}
			
			$price_nr_anlage10 = array();
			if($list)
			{
				$price_nr_anlage10 = PriceNordrheinAnlage10Table::findListsPrices($list, $clientid, $default_price_list['nr_anlage10']);
			}
			else 
			{
				$price_nr_anlage10 = PriceNordrheinAnlage10Table::findListsPrices($list, $clientid, $default_price_list['nr_anlage10']);
				$price_nr_anlage10['default']['start'] = $start;
				$price_nr_anlage10['default']['end'] = $end;
			}
			
			$price_nr_anlage10_days = array();
			$fday = $start;
			$day = (int)$selectedPeriod[2];
			//    TODO-2775 ISPC:: Kvno Anlage 10 last day of the month is not calculated 06.01.2020- Carmen, changed from   while($fday < $end) to while($fday <= $end)
			while($fday <= $end)
			{
				$findtheday = false;
				foreach($price_nr_anlage10 as $pl)
				{
					if(strtotime($fday) >= strtotime($pl['start']) && strtotime($fday) <= strtotime($pl['end']))
					{
						$price_nr_anlage10_days[$fday] = array_column($pl, 'price', 'shortcut');
						$findtheday = true;
						break;
					}
				}
				if(!$findtheday)
				{
					$list = null;
					$pricenolist = PriceNordrheinAnlage10Table::findListsPrices($list, $clientid, $default_price_list['nr_anlage10']);
					$price_nr_anlage10_days[$fday] = array_column($pricenolist['default'], 'price', 'shortcut');
				}
				//    TODO-2775 ISPC:: Kvno Anlage 10 last day of the month is not calculated 06.01.2020- Carmen
				if($fday == $end)
				{
					break;
				}
				// --
				$day++;
				$fday = date("Y-m-d", strtotime($selectedPeriod[0] . "-" . str_pad($selectedPeriod[1], 2, "0", STR_PAD_LEFT) . "-" . str_pad($day, 2, "0", STR_PAD_LEFT)));
				
			}
		
			$this->view->price_list = $price_nr_anlage10_days;
			//var_dump($price_nr_anlage10_days); exit;
			if($_REQUEST['dbg'] == 1)
			{
				print_r($formdays);
			}

			//sort days array
			foreach($formdays as $key => $valuesAry)
			{
				foreach($valuesAry as $kvary => $vvary)
				{
					$month = date('m', strtotime($vvary));
					$day = date("j", strtotime($vvary));
					$year = date("Y", strtotime($vvary));
					$groupedArray[$year . "." . $month][$day] = $vvary;
					$montharray[$year . "." . $month] = $month . "/" . $year;
					$firstDatePeriod[$year . "." . $month] = date("Y-m-d", strtotime($year . "-" . $month . "-01"));
				}
			}

			


			$present = date("Y") . "." . date("m");
			$presentl = date("m") . "/" . date("Y");

			if(!in_array($present, $montharay))
			{
				$montharray[$present] = $presentl;
			}

			if(count($resarr) > 0)
			{
				$kvnoMonthYear = date('Y.m', strtotime($resarr[0]['completed_date']));
				$kvnoMonthYearValue = date('m/Y', strtotime($resarr[0]['completed_date']));

				if(!array_key_exists($kvnoMonthYear, $montharray))
				{
					$montharray[$kvnoMonthYear] = $kvnoMonthYearValue;
				}
				
				if(strlen($resarr[0]['start_date'])>0 && $resarr[0]['start_date'] != "0000-00-00 00:00:00")
				{
    				$skvnoMonthYear = date('Y.m', strtotime($resarr[0]['start_date']));
    				$skvnoMonthYearValue = date('m/Y', strtotime($resarr[0]['start_date']));
    
    				if(!array_key_exists($skvnoMonthYear, $montharray))
    				{
    					$montharray[$skvnoMonthYear] = $skvnoMonthYearValue;
    				}
				}
			}

			ksort($formdays);
			$this->view->montharray = array_unique($montharray);

			
			
			if(empty($_REQUEST['list']))
			{
				$listmonth = date('Y') . "." . date("m");
			}
			else
			{
				$listmonth = $_REQUEST['list'];
			}
			
			//ISPC-1714
			if(empty($_REQUEST['list'])){
				return;
			}


			$this->view->listmonth = $listmonth;


			if(!function_exists('cal_days_in_month'))
			{
				$monthDays = date('t', mktime(0, 0, 0, date("n", strtotime($firstDatePeriod[$listmonth])), 1, date("Y", strtotime($firstDatePeriod[$listmonth]))));
			}
			else
			{
				$monthDays = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($firstDatePeriod[$listmonth])), date("Y", strtotime($firstDatePeriod[$listmonth])));
			}
			$this->view->listDaysMax = $monthDays;

			$current_period['start'] = $firstDatePeriod[$listmonth];
			$current_period['end'] = date('Y-m-' . $monthDays, strtotime($firstDatePeriod[$listmonth]));

//		// get hospital locations START
//		$hospitalids = Doctrine_Query::create()
//			->select("*")
//			->from('Locations')
//			->where('isdelete = 0')
//			->andWhere('client_id ="' . $clientid . '"')
//			->andWhere('location_type = 1');
//
//		$hosparray = $hospitalids->fetchArray();
//
//		$hosparr[] = "9999999999";
//		foreach($hosparray as $hospital)
//		{
//			$hosparr[] = $hospital['id'];
//		}
//
//		//	get patient hospital locations if it has
//		$patloc = Doctrine_Query::create()
//			->select('*')
//			->from('PatientLocation')
//			->where('ipid ="' . $ipid . '"')
//			->andWhere('isdelete="0"')
//			->andWhereIn('location_id', $hosparr)
//			->orderBy('valid_from,id ASC');
//		if($_REQUEST['dbg'] == "1")
//		{
//			print_r($patloc->getDql());
//		}
//		$patlocationsArr = $patloc->fetchArray();
//
//		foreach($patlocationsArr as $hospitalPeriod)
//		{
//			if($_REQUEST['dbg'])
//			{
//				print_r('Locations Data:');
//				print_r($hospitalPeriod);
//			}
//
//			if($hospitalPeriod['valid_till'] == "0000-00-00 00:00:00")
//			{
//				$hospitalPeriod['valid_till'] = date("Y-m-d", strtotime('+1 day'));
//			}
//
//			$dayshospital[] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($hospitalPeriod['valid_from'])), $hospitalPeriod['valid_till']);
//
//			//here add sapv tage dead in or out
//			if(strtotime(date("Y-m-d", strtotime("+1 day", strtotime($hospitalPeriod['valid_from'])))) <= strtotime(date("Y-m-d", strtotime("-1 day", strtotime($hospitalPeriod['valid_till'])))))
//			{
//				$valid_from = date("Y-m-d", strtotime("+1 day", strtotime($hospitalPeriod['valid_from'])));
//				$valid_till = date("Y-m-d", strtotime("-1 day", strtotime($hospitalPeriod['valid_till'])));
//
//				$dayshospitalSecondArr[] = $patientmaster->getDaysInBetween($valid_from, $valid_till); //used in 24h =>[26]
//			}
//			else if(strtotime(date("Y-m-d", strtotime("+1 day", strtotime($hospitalPeriod['valid_from'])))) < strtotime(date("Y-m-d", strtotime($hospitalPeriod['valid_till']))))
//			{
//
//				$valid_from = date("Y-m-d", strtotime("+1 day", strtotime($hospitalPeriod['valid_from'])));
//				$valid_till = date("Y-m-d", strtotime($hospitalPeriod['valid_till']));
//
//				$dayshospitalSecondArr[] = $patientmaster->getDaysInBetween($valid_from, $valid_till); //used in 24h =>[26]
//			}
//			else if(strtotime(date("Y-m-d", strtotime("+1 day", strtotime($hospitalPeriod['valid_from'])))) == strtotime(date("Y-m-d", strtotime($hospitalPeriod['valid_till']))))
//			{
//
//				$valid_till = date("Y-m-d", strtotime("-1 day", strtotime($hospitalPeriod['valid_till'])));
//				$valid_from = date("Y-m-d", strtotime($hospitalPeriod['valid_from']));
//
//				$dayshospitalSecondArr[] = $patientmaster->getDaysInBetween($valid_from, $valid_till); //used in 24h =>[26]
//			}
//			else
//			{
//				$valid_from = date("Y-m-d", strtotime($hospitalPeriod['valid_from']));
//				$valid_till = date("Y-m-d", strtotime($hospitalPeriod['valid_till']));
//
//				$dayshospitalSecondArr[] = $patientmaster->getDaysInBetween($valid_from, $valid_till); //used in 24h =>[26]
//			}
//			$hospitalStartDays[] = date("Y-m-d", strtotime($hospitalPeriod['valid_from']));
//			$hospitalEndDays[] = date("Y-m-d", strtotime($hospitalPeriod['valid_till']));
//		}
//
//		$hospital_continuous_days[] = '99999999';
//		foreach($hospitalStartDays as $k_hosp_start => $v_hosp_start)
//		{
//			if(in_array($v_hosp_start, $hospitalEndDays))
//			{
//				$hospital_continuous_days[] = $v_hosp_start;
//			}
//		}
//
//
//		$hospFinalDays = array();
//		if(count($dayshospital) > 1)
//		{
//			foreach($dayshospital as $hospKey => $hospDays)
//			{
//				$hospFinalDays = array_merge($hospFinalDays, $hospDays);
//			}
//		}
//		else if(count($dayshospital) == "1")
//		{
//			$hospFinalDays = $dayshospital[0];
//		}
//
//		$hospFinalDays = array_merge($hospFinalDays, $hospital_continuous_days);
//		array_unique($hospFinalDays);
//
//
//		$hospFinalDaysSecond = array("999999999999");
//		if(count($dayshospitalSecondArr) > 1)
//		{
//			foreach($dayshospitalSecondArr as $hospKeyS => $hospDaysS)
//			{
//				$hospFinalDaysSecond = array_merge($hospFinalDaysSecond, $hospDaysS);
//			}
//		}
//		else if(count($dayshospitalSecondArr) == "1")
//		{
//			$hospFinalDaysSecond = $dayshospitalSecondArr[0];
//		}
//
//		$hospFinalDaysSecond = array_merge($hospFinalDaysSecond, $hospital_continuous_days);
//		array_unique($hospFinalDaysSecond);
//
////		$this->view->hospitalFinalDays = $hospFinalDaysSecond;
////		$this->view->hospitalStartDays = $hospitalStartDays;
////		$this->view->hospitalEndDays = $hospitalEndDays;
////		$this->view->hospital_cont_days = $hospital_continuous_days;

			if($_REQUEST['dbg'])
			{
				print_r($hospitalStartDays);
				print_r($hospitalEndDays);
				print_r("\nHosp Final Days\n");
				print_r($hospFinalDaysSecond);
				print_r("\nHosp Continuous Days\n");
				print_r($hospital_continuous_days);
			}


			//Client Hospital Settings START
			$conditions['periods'][0]['start'] = $current_period['start'];
			$conditions['periods'][0]['end'] = $current_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];

			foreach($hospital_days_cs as $k_hospital_cs => $v_hospital_cs)
			{
				$hospital_days_cs[$k_hospital_cs] = date('Y-m-d', strtotime($v_hospital_cs));
			}

			$this->view->hospitalFinalDays = $hospital_days_cs;

//		$this->view->hospitalStartDays = $hospitalStartDays;
//		$this->view->hospitalEndDays = $hospitalEndDays;
//		$this->view->hospital_cont_days = $hospital_continuous_days;

			if($_REQUEST['csdbg'])
			{
				print_r("Old hospitalStartDays");
				print_r($hospitalStartDays);

				print_r("Old hospitalEndDays");
				print_r($hospitalEndDays);

				print_r("\nHosp Final Days\n");
				print_r($hospFinalDaysSecond);

				print_r("\nHosp Continuous Days\n");
				print_r($hospital_continuous_days);

				print_r("CS hospital_days_cs");
				print_r($hospital_days_cs);

				print_r($patient_days);

				exit;
			}
			//Client Hospital Settings END
			// get hospital locations END
			// check if death date is in hospital START
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");

			$todarray = $distod->fetchArray();

			$todIds[] = "9999999999999";
			foreach($todarray as $todmethod)
			{
				$todIds[] = $todmethod['id'];
			}
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $todIds);
			$dischargedArr = $dispat->fetchArray();

			if(in_array(date("Y-m-d", strtotime($dischargedArr[0]['discharge_date'])), $hospFinalDays) && in_array($dischargedArr[0]['discharge_method'], $todIds))
			{
				$death_date = date("Y-m-d", strtotime($dischargedArr[0]['discharge_date']));
			}
			else
			{
				if(count($dischargedArr) > 0)
				{
					$death_date = date("Y-m-d", strtotime("+1 day", strtotime($dischargedArr[0]['discharge_date'])));
				}
				else
				{
					$death_date = date("Y-m-d", strtotime("+1 day"));
				}
			}

			$this->view->deathDateHospital = $death_date;
			if($_REQUEST['dbg'] == "1")
			{
				print_r("\n\n\n AAA");
				print_r($death_date);
				var_dump($death_date);
				print_r($hospFinalDays);
			}

			/*---------------------------------*/
			$user = new User();
// 			$c_users = $user->getUserByClientid($clientid, 0, true);
			$client_users = $user->get_all_client_users($clientid, 0, true); // function to get active periods of users
			
			
			// ADDED HERE - NOT IN FOR - WHERE DAYS ARE CREATED
			
			/*------------------------------------------- */
			/*---------- CONTACT FORM DETAILS ----------- */
			/*------------------------------------------- */
			
			//get used form types
			$form_types = new FormTypes();
			$all_forms = $form_types->get_form_types($clientid);
			foreach($all_forms as $kft =>$vft){
			    //$form_type_name[$vft['id']] = $vft['name'];
			    //    ISPC-1707 Anlage 10 - Besuch - 27.04.2016 QTZ -   a HAUSBESUCH shall be displayed in ANLAGE 10 as "Besuch"
			    $form_type_name[$vft['id']] = "Besuch";
			}
			
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
			    $set_one_ids[] = $v_set_one['id'];
			}
			
			//get deleted cf from patient course
			$deleted_cf = Doctrine_Query::create()
			->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
			->from('PatientCourse')
			->where('wrong=1')
			->andWhere("ipid='" . $ipid . "'")
			->andWhere('source_ipid = ""')
			->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
			->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'");
			$deleted_cf_array = $deleted_cf->fetchArray();
			
			foreach($deleted_cf_array as $k_dcf => $v_dcf)
			{
			    $excluded_cf_ids[] = $v_dcf['recordid'];
			}
			
			//get cf in period - deleted cf
			$cf = new ContactForms();
			$contact_forms_in_period = $cf->get_contact_form_period($ipid, $current_period, $excluded_cf_ids);
			
			
			$contact_forms_ids[] = '9999999999999';
			foreach($contact_forms_in_period as $kk_cf => $vv_cf)
			{
			    $contact_forms_ids[] = $vv_cf['id'];
			    $contact_form_data [$vv_cf['id']] = $vv_cf;
			
			}
			
			$block_aditional_users = new FormBlockAdditionalUsers();
			$block_au_data = $block_aditional_users->getPatientFormBlockAdditionalUsers($ipid, $contact_forms_ids, false, true);
			
			$block_visit_types = new FormBlockVisitType();
			$block_vt_data = $block_visit_types ->getPatientFormBlockVisitType_multiple($ipid, $contact_forms_ids, false, true);
			
			/*------------------------------------------- */
			/*---------- KVNO DOCTOR DETAILS ----------- */
			/*------------------------------------------- */
			
			//get form from verlauf, created to see what`s deleted
			$docFormCourse = Doctrine_Query::create()
			->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
			->from('PatientCourse')
			->where('ipid ="' . $ipid . '"')
			->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
			->andWhere("wrong = 0")
			->andWhere('source_ipid = ""')
			->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'")
			->orderBy('course_date ASC');
			$doc = $docFormCourse->fetchArray();
			
			$docstr = "99999999999";
			$comma = ",";
			foreach($doc as $doctorCourse)
			{
			    $docstr .= $comma . $doctorCourse['recordid'];
			    $comma = ",";
			}
			
			//get activ > doctorform start
			$q_doctor = Doctrine_Query::create()
			->select("*")
			->from("KvnoDoctor")
			->where("id IN (" . $docstr . ")");
			$doctorvisit = $q_doctor->fetchArray();

			/*------------------------------------------- */
			/*---------- KVNO NURSE DETAILS ----------- */
			/*------------------------------------------- */
			//get form from verlauf, created to see what`s deleted
			$nurseFormCourse = Doctrine_Query::create()
			->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
			->from('PatientCourse')
			->where('ipid ="' . $ipid . '"')
			->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
			->andWhere("wrong = 0")
			->andWhere('source_ipid = ""')
			->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form' or AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'lvn_nurse_form'")
			->orderBy('course_date ASC');
			$nurse = $nurseFormCourse->fetchArray();
			
			$nursestr = "99999999999";
			$comma = ",";
			foreach($nurse as $nurseCourse)
			{
			    $nursestr .= $comma . $nurseCourse['recordid'];
			    $comma = ",";
			}
			
			//get activ > nurse start
			$q_nurse = Doctrine_Query::create()
			->select("*")
			->from("KvnoNurse")
			->where("id IN (" . $nursestr . ")");
			$nursevisit = $q_nurse->fetchArray();
			
			
			/*------------------------------------------- */
			/*---------- KOORDINATION VISITS  DETAILS -- */
			/*------------------------------------------- */
			//get koordination visits start
			$koordFormCourse = Doctrine_Query::create()
			->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
			->from('PatientCourse')
			->where('ipid ="' . $ipid . '"')
			->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
			->andWhere("wrong = 0")
					->andWhere('source_ipid = ""')
			->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'visit_koordination_form'")
			->orderBy('course_date ASC');
			$koord = $koordFormCourse->fetchArray();
			
			$koord_nondeleted_ids[] = '99999999999999999999';
			foreach($koord as $koordCourse)
			{
			    $koord_nondeleted_ids[] = $koordCourse['recordid'];
			}
			$koordination_visit = array();
			$q_koordination = Doctrine_Query::create()
			->select("*")
			->from("VisitKoordination")
			->whereIn("id", $koord_nondeleted_ids);
			$koordination_visit = $q_koordination->fetchArray();

			/*------------------------------------------- */
			/*---------- BERATRUNG COURSE  DETAILS -- */
			/*------------------------------------------- */
			
			//Added Z=>XT Telefonat for client id 39(test office) LNR(49)==> changed to module
			$previleges = new Modules();
			$modulepriv = $previleges->checkModulePrivileges("55", $logininfo->clientid);
			
			if($modulepriv)
			{
			    $lnrquery = " OR AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT'";
			}
			else
			{
			    $lnrquery = "";
			}
			
			$coursearray = array();
			$course = Doctrine_Query::create()
			->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
			->from('PatientCourse')
			->where('ipid ="' . $ipid . '"')
			->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U' " . $lnrquery . "")
			->andWhere("wrong = 0")
			->andWhere('source_ipid = ""')
			->orderBy('course_date ASC');
			$course_res = $course->execute();
			$coursearray = $course_res->toArray();
				
			/*------------------------------------------- */
			/*---------- KOORDINATION COURSE  DETAILS -- */
			/*------------------------------------------- */
			
			$coursearrayV = array();
			$courseV = Doctrine_Query::create()
			->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
			->from('PatientCourse')
			->where('ipid ="' . $ipid . '"')
			->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
			->andWhere("wrong = 0")
			->andWhere('source_ipid = ""')
			->orderBy('course_date ASC');
			$course_resV = $courseV->execute();
			$coursearrayV = $course_resV->toArray();
			
			
			
			
			
			
			$days_data = array();
			
			
			
			// check if death date is in hospital END
			for($i = 1; $i <= $monthDays; $i++)
			{
				$days_data[$i] = array();
				$days_data[$i]['day'] = $i;
				
				$active_users_on_this_day =array(); 
				$inactive_users_on_this_day =array();
				
				foreach($client_users as $uid=>$udata){
                    // Check if user is active in this day				    
				    if(!Pms_CommonData::isintersected(strtotime($groupedArray[$listmonth][$i]) , strtotime($groupedArray[$listmonth][$i]) , strtotime($udata['active_period']['start']),strtotime($udata['active_period']['end']))){
				        if($_REQUEST['dbg'] == "users"){
    				        print_r("\n");
    				        print_r($uid);
    				        print_r("------");
    				        print_r("INACTIVE: ");
    				        print_r($groupedArray[$listmonth][$i]);
    				        print_r("\n");
    				        print_r("------>>>");
    				        print_r($udata['active_period']['start']);
				        }
				        $inactive_users_on_this_day[] = $uid; 
// 				        $client_users[$uid] = array(); // do not list in day grid 
				    } else {
    				    if($_REQUEST['dbg'] == "users"){
    				        print_r("\n");
    				        print_r($uid);
    				        print_r("------");
    				        print_r("active: ");
    				        print_r($groupedArray[$listmonth][$i]);
    				        print_r("\n");
    				    }
    				    
    				    $active_users_on_this_day[] = $uid;
				    } 
				}
				

				if(count($resarr) > 0)
				{
					$kvnoactivity = $resarr[0];
				}

				//processing verordung data start
				foreach($verordungdata as $verordata)
				{
					$days_data[$i]['disabled'] = 0;
					//check if activity has status 1=disabled
					if($verordata['status'] == 1 && $verordata['verorddisabledate'] != '0000-00-00 00:00:00')
					{ //we have a disable date so new bis date is the disable date day-1
						$verordata['verordnungbis'] = date("Y-m-d H:i", strtotime("-1 day", strtotime($verordata['verorddisabledate'])));
						$days_data[$i]['disabled'] = 1;
					}
					elseif($verordata['status'] == 1 && $verordata['verorddisabledate'] == '0000-00-00 00:00:00')
					{
						$verordata['verordnungbis'] = date("Y-m-d H:i", strtotime(strtotime($verordata['verordnungam'])));
						$days_data[$i]['disabled'] = 1;
					}

					if((strtotime($groupedArray[$listmonth][$i]) >= strtotime($verordata['verordnungam']) && strtotime($groupedArray[$listmonth][$i]) <= strtotime($verordata['verordnungbis'])))
					{
						foreach($verordungdata as $vkey => $vvalue)
						{
							if(strlen($verordata['verordnet']) == 1)
							{

								if($verordata['verordnet'] == 1)
								{
									$keyv = 2;
								}
								elseif($verordata['verordnet'] == 2)
								{
									$keyv = 1;
								}
								else
								{
									$keyv = $verordata['verordnet'];
								}
								$days_data[$i]['verordnungstr'][$keyv] = $verordnetarray[$verordata['verordnet']];
							}
							else
							{
								$vdata = explode(",", $verordata['verordnet']);


								$days_data[$i]['disabled'] = 0;


								foreach($vdata as $vvalue)
								{
									if($vvalue == 1)
									{
										$days_data[$i]['verordnungstr'][2] = $verordnetarray[$vvalue];
									}

									if($vvalue == 2)
									{
										$days_data[$i]['verordnungstr'][1] = $verordnetarray[$vvalue];
									}

									if($vvalue == 3)
									{
										$days_data[$i]['verordnungstr'][3] = $verordnetarray[$vvalue];
									}

									if($vvalue == 4)
									{
										$days_data[$i]['verordnungstr'][4] = $verordnetarray[$vvalue];
									}
								}
							}//end if/else
						} // end foreach verordung


						ksort($days_data[$i]['verordnungstr']);
						$days_data[$i]['verordnungstr'] = array_unique($days_data[$i]['verordnungstr']);
						$days_data[$i]['verordnungstring'][$i] = implode(",", $days_data[$i]['verordnungstr']);
						$versorgungs = explode(",", $days_data[$i]['verordnungstring'][$i]);

						//set high verordung
						$days_data[$i]['verordnung'][$i] = "";
						if(in_array("VV", $versorgungs))
						{
							$days_data[$i]['verordnung'][$i] = "VV";
						}
						else if(in_array("TV", $versorgungs) && !in_array("VV", $versorgungs))
						{
							$days_data[$i]['verordnung'][$i] = "TV";
						}
						else if(in_array("BE", $versorgungs) && !in_array("TV", $versorgungs) && !in_array("VV", $versorgungs))
						{
							$days_data[$i]['verordnung'][$i] = "BE";
						}
						else if(in_array("KO", $versorgungs) && !in_array("TV", $versorgungs) && !in_array("VV", $versorgungs) && !in_array("BE", $versorgungs))
						{
							$days_data[$i]['verordnung'][$i] = "KO";
						}
						else
						{
							$days_data[$i]['verordnung'][$i] = "";
						}
					}//end if date in range
				}//end foreach verorodung
				//processing verordung data end
				
				
				
				/* ================================================================================= */
				//  ISPC-1504 Anlage10 add contact forms 
				//  CONTACT FORM DETAILS
				/* ================================================================================= */
				//get contact forms START
 
				$cnt = array();
				foreach($contact_form_data as $k_cf => $v_cf)
				{
				    if(in_array($v_cf['form_type'], $set_one_ids))
    				{
    				    $date = date('Y-m-d', strtotime($v_cf['billable_date']));
    				    $visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));
//     				    $date = date('Y-m-d', strtotime($v_cf['start_date']));
//     				    $visit_date = date('Y-m-d', strtotime($v_cf['start_date']));

    				    if(strtotime($groupedArray[$listmonth][$i]) == strtotime($date))
    				    {
    				        $has_creator = false;
    				        
    				        if(count($block_au_data[$v_cf['id']]) != 0)
    				        {
    				            foreach($block_au_data[$v_cf['id']] as $k_block_au_data => $v_block_au)
    				            {
    				                $visit_user = $client_users[$v_block_au['additional_user']];
    				                if($v_block_au['creator'] == '1')
    				                {
    				                    $has_creator = true;
    				                }
    				        
    				                if(count($client_users[$v_block_au['additional_user']]) != 0 && in_array($v_block_au['additional_user'],$active_users_on_this_day))
    				                {
    				                    if(strlen($visit_user['shortname']) > '0')
    				                    {
    				                        $contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = $visit_user['shortname'];
    				                    }
    				                    else
    				                    {
    				                        $contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(mb_substr($visit_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_user['last_name'], 0, 1, "UTF-8"));
    				                    }
    				                }
    				            }
    				        }
    				        
    				        if(count($block_au_data[$v_cf['id']]) == '0' || $has_creator === false)
    				        {
    				            $visit_create_user = $client_users[$v_cf['create_user']];
    				            if(count($client_users[$v_cf['create_user']]) != 0 && in_array($v_cf['create_user'],$active_users_on_this_day))
    				            {
    				                if(strlen($visit_create_user['shortname']) > '0')
    				                {
    				                    $contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = $visit_create_user['shortname'];
    				                }
    				                else
    				                {
    				                    $contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(mb_substr($visit_create_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_create_user['last_name'], 0, 1, "UTF-8"));
    				                }
    				            }
    				        }
        				    
    				        
    				        if(count($block_vt_data[$v_cf['id']]) != 0)
    				        {
    				            foreach($block_vt_data[$v_cf['id']] as $k_block_vt_data => $v_block_vt)
    				            {
    				                if($v_block_vt['ethically'] == "1"){
    				                    $visti_type_arr[$k_cf][] = "E";
    				                }
    				                
    				                if($v_block_vt['somatic'] == "1"){
    				                    $visti_type_arr[$k_cf][] = "S";
    				                }
    				                if($v_block_vt['psychosocial'] == "1"){
    				                    $visti_type_arr[$k_cf][] = "P";
    				                }
    				                if($v_block_vt['coordination'] == "1"){
    				                    $visti_type_arr[$k_cf][] = "K";
    				                }
    				            }
    				            
    				            if(!empty($visti_type_arr[$k_cf])){
    				                $cf_doc_chk = implode(',', $visti_type_arr[$k_cf]);
    				            } else {
    				                $cf_doc_chk ="";
    				            }
    				        }
    				        if($module->checkModulePrivileges("137", $clientid))
    				        { 	
    				        	foreach($contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'] as $k){
    				        		$contact_form_data[$k_cf]['initials'] =  $k;
        				   			$contact_form_data[$k_cf]['time_interval'] = date('H:i', strtotime($v_cf['start_date'])).' - '.date('H:i', strtotime($v_cf['end_date']));
        				    		$contact_form_data[$k_cf]['activity_str'] = $form_type_name[$v_cf['form_type']]." ". $contact_form_data[$k_cf]['initials'] . " " . $contact_form_data[$k_cf]['time_interval'] . " " . $cf_doc_chk;;
        				    		$contact_form_data[$k_cf]['type'] = "C";
        				    		$contact_form_data[$k_cf]['full_vizit_date_time'] = $v_cf['billable_date'];
        				    		$contact_form_data[$k_cf]['vizit_date_time'] = date('d.m.Y H:i',strtotime($v_cf['billable_date']));
        				    		$contact_form_data[$k_cf]['start_date'] = $v_cf['billable_date'];
        				    		$days_data[$i]['activ'][] = $contact_form_data[$k_cf];
    				        	}
    				        }else{
        				    	$contact_form_data[$k_cf]['initials'] =  implode(', ',array_values($contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts']));
        				   		$contact_form_data[$k_cf]['time_interval'] = date('H:i', strtotime($v_cf['start_date'])).' - '.date('H:i', strtotime($v_cf['end_date']));
//         				    	$contact_form_data[$k_cf]['activity_str'] = "Kontactform " . $contact_form_data[$k_cf]['initials'] . " " . $contact_form_data[$k_cf]['time_interval'];
        				    	$contact_form_data[$k_cf]['activity_str'] = $form_type_name[$v_cf['form_type']]." ". $contact_form_data[$k_cf]['initials'] . " " . $contact_form_data[$k_cf]['time_interval'] . " " . $cf_doc_chk;;
        				    	$contact_form_data[$k_cf]['type'] = "C";
        				    	$contact_form_data[$k_cf]['full_vizit_date_time'] = $v_cf['billable_date'];
        				    	$contact_form_data[$k_cf]['vizit_date_time'] = date('d.m.Y H:i',strtotime($v_cf['billable_date']));
        				    	$contact_form_data[$k_cf]['start_date'] = $v_cf['billable_date'];
        				    	$days_data[$i]['activ'][] = $contact_form_data[$k_cf];
    				        }
    				    }
   				    }
				}
				/* ================================================================================= */

				//vars
				$mediziniarr = array("1" => "E", "2" => "S", "3" => "P", "4" => "K");
				/* ================================================================================= */
				//  KVNO DOCTOR VISITS
				/* ================================================================================= */
				foreach($doctorvisit as $doc_key => $doc_value)
				{
					$vizit_date = explode(" ", $doc_value['vizit_date']);
					if(count($vizit_date) == 2)
					{
						$date = $vizit_date[0];
					}

					if(strtotime($groupedArray[$listmonth][$i]) == strtotime($date)  && in_array($doc_value['create_user'],$active_users_on_this_day))
					{
						//get doctor data
// 						$doctordata = Pms_CommonData::getUserData($doc_value['create_user']);
						$doctordata = $client_users[$doc_value['create_user']];

						//extract initials
						if(empty($doctordata['shortname']))
						{
							$doctorvisit[$doc_key]['initials'] = mb_substr($doctordata['first_name'], 0, 1, "UTF-8") . "" . mb_substr($doctordata['last_name'], 0, 1, "UTF-8");
						}
						else
						{
							$doctorvisit[$doc_key]['initials'] = $doctordata['shortname'];
						}

						$doctorvisit[$doc_key]['time_interval'] = str_pad($doc_value['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT) . ":" . str_pad($doc_value['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT) . "-" . str_pad($doc_value['kvno_end_date_h'], 2, "0", STR_PAD_LEFT) . ":" . str_pad($doc_value['kvno_end_date_m'], 2, "0", STR_PAD_LEFT);

						$doc_chk = "";
						if(strlen($doc_value['kvno_medizini_b']) == 1)
						{
							$doc_chk = $mediziniarr[$doc_value['kvno_medizini_b']];
						}
						else
						{
							$chks = explode(",", $doc_value['kvno_medizini_b']);

							$z = 1;
							foreach($chks as $c_key => $c_val)
							{
								if($z != count($chks))
								{
									$end = ", ";
								}
								else
								{
									$end = "";
								}
								$doc_chk .= $mediziniarr[$c_val] . $end;
								$z++;
							}
						}
						$doctorvisit[$doc_key]['checkboxes'] = $doc_chk;
						$doctorvisit[$doc_key]['activity_str'] = "Besuch " . $doctorvisit[$doc_key]['initials'] . " " . $doctorvisit[$doc_key]['time_interval'] . " " . $doc_chk;
						$doctorvisit[$doc_key]['type'] = "D";

						$doctorvisit[$doc_key]['full_vizit_date_time'] = date('Y-m-d', strtotime($doc_value['vizit_date'])).' '.str_pad($doc_value['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT).':'.str_pad($doc_value['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT).':00';
						
						$days_data[$i]['activ'][] = $doctorvisit[$doc_key];
					}
				}

				
				/* ================================================================================= */
				//  KVNO NURSE VISITS
				/* ================================================================================= */

				foreach($nursevisit as $nurse_key => $nurse_value)
				{
					$vizit_date = explode(" ", $nurse_value['vizit_date']);
					if(count($vizit_date) == 2)
					{
						$date = $vizit_date[0];
					}

					if(strtotime($groupedArray[$listmonth][$i]) == strtotime($date) && in_array($nurse_value['create_user'],$active_users_on_this_day))
					{
						if($nurse_value['sub_user'] != '0')
						{
							/* -------------------User / Sub-users Data - LEVERKUSEN --------------------------------------- */
							$sub_users_array = Pms_CommonData::getSubUsers($clientid, $nurse_value['create_user']);

							$nursevisit[$nurse_key]['initials'] = $sub_users_array[$nurse_value['sub_user']]['shortname'];
						}
						else
						{
// 							$nursedata = Pms_CommonData::getUserData($nurse_value['create_user']);
							$nursedata = $client_users[$nurse_value['create_user']];
							
							
							if(empty($nursedata['shortname']))
							{
								$nursevisit[$nurse_key]['initials'] = mb_substr($nursedata['first_name'], 0, 1, "UTF-8") . "" . mb_substr($nursedata['last_name'], 0, 1, "UTF-8");
							}
							else
							{
								$nursevisit[$nurse_key]['initials'] = $nursedata['shortname'];
							}
						}

						$nursevisit[$nurse_key]['time_interval'] = str_pad($nurse_value['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT) . ":" . str_pad($nurse_value['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT) . "-" . str_pad($nurse_value['kvno_end_date_h'], 2, "0", STR_PAD_LEFT) . ":" . str_pad($nurse_value['kvno_end_date_m'], 2, "0", STR_PAD_LEFT);
						$nursevisit[$nurse_key]['activity_str'] = "Besuch " . $nursevisit[$nurse_key]['initials'] . " " . $nursevisit[$nurse_key]['time_interval'] . " ";

						$nurse_chk = "";
						if(strlen($nurse_value['kvno_medizini2']) == 1)
						{
							$nurse_chk = $mediziniarr[$nurse_value['kvno_medizini2']];
						}
						else
						{
							$chks = explode(",", $nurse_value['kvno_medizini2']);

							$z = 1;
							foreach($chks as $c_key => $c_val)
							{
								if($z != count($chks))
								{
									$end = ", ";
								}
								else
								{
									$end = "";
								}
								$nurse_chk .= $mediziniarr[$c_val] . $end;
								$z++;
							}
						}

						$nursevisit[$nurse_key]['checkboxes'] = $nurse_chk;
						$nursevisit[$nurse_key]['activity_str'] = "Besuch " . $nursevisit[$nurse_key]['initials'] . " " . $nursevisit[$nurse_key]['time_interval'] . " " . $nurse_chk;
						$nursevisit[$nurse_key]['type'] = "N";
						
						$nursevisit[$nurse_key]['full_vizit_date_time'] = date('Y-m-d', strtotime($nurse_value['vizit_date'])).' '.str_pad($nurse_value['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT).':'.str_pad($nurse_value['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT).':00';
						
						$days_data[$i]['activ'][] = $nursevisit[$nurse_key];
					}
				}
				//get activ > nurseform end
				
				

				/* ================================================================================= */
				//  KVNO KOORDINATION VISITS
				/* ================================================================================= */
				foreach($koordination_visit as $k_koord => $v_koord)
				{
					$visit_date = explode(" ", $v_koord['visit_date']);
					if(count($visit_date) == 2)
					{
						$date = $visit_date[0];
					}

					if(strtotime($groupedArray[$listmonth][$i]) == strtotime($date))
					{
// 						$koorddata = Pms_CommonData::getUserData($v_koord['create_user']);
						$koorddata = $client_users[$v_koord['create_user']];
						
						if(empty($koorddata['shortname']))
						{
							$koordination_visit[$k_koord]['initials'] = mb_substr($koorddata['first_name'], 0, 1, "UTF-8") . "" . mb_substr($koorddata['last_name'], 0, 1, "UTF-8");
						}
						else
						{
							$koordination_visit[$k_koord]['initials'] = $koorddata['shortname'];
						}

						$time = Pms_CommonData::calculate_visit_duration($v_koord['visit_begin_date_h'], $v_koord['visit_end_date_h'], $v_koord['visit_begin_date_m'], $v_koord['visit_end_date_m'], $v_koord['visit_date']);
						$koordination_visit[$k_koord]['course_date'] = $v_koord['visit_date'];
						$koordination_visit[$k_koord]['activity_str'] = "Koordination " . $koordination_visit[$k_koord]['initials'] . " " . $time . " Minuten";
						$koordination_visit[$k_koord]['verlauf'] = "1";
						$koordination_visit[$k_koord]['course_type'] = "V";

						$days_data[$i]['activ'][] = $koordination_visit[$k_koord];
					}
				}
				//get koordination visits end

				$listmontharr = explode(".", $listmonth);
				
				// ###################################################
				// ############ ISPC 1751 ############################
				// ###################################################
				//get assesment start date START
				$kvno_start = array();//"";
				$kvno_starta = array();//"";

				if($listmontharr[0] . "-" . str_pad($listmontharr[1], 2, '0', STR_PAD_LEFT) . "-" . str_pad($i, 2, '0', STR_PAD_LEFT) == date('Y-m-d', strtotime($kvnoactivity['start_date'])))
				{
// 					$usr = new User();

					//$doctor = $usr->getUserDetails($kvnoactivity['doc_id'], false);
					//$pflege = $usr->getUserDetails($kvnoactivity['pfl_id'], false);
					
					$doctor = $client_users[$kvnoactivity['doc_id']];
					$pflege = $client_users[$kvnoactivity['pfl_id']];

					if(!empty($pflege['first_name']) || !empty($pflege['last_name']))
					{
						$comma = ", ";
					}
					else
					{
						$comma = "";
					}

					//get pflege and doc signed names>initials
					if(empty($doctor['shortname']))
					{
						$docinitials = strtoupper(mb_substr($doctor['first_name'], 0, 1, "UTF-8") . "" . mb_substr($doctor['last_name'], 0, 1, "UTF-8"));
					}
					else
					{
						$docinitials = $doctor['shortname'];
					}

					if(empty($pflege['shortname']))
					{
						$pflegenitials = $comma . mb_substr($pflege['first_name'], 0, 1, "UTF-8") . "" . mb_substr($pflege['last_name'], 0, 1, "UTF-8");
					}
					else
					{
						$pflegenitials = $comma . $pflege['shortname'];
					}
					
				    $assesment_start_time = "";
					$assesment_start_time = date("H:i",strtotime($kvnoactivity['start_date']))." <br/> ";
         
					//case  "change billing method" module disabled or enabled but method 3(Koord and assessment) is used
					if($mod_perms == '0' || ($mod_perms == '1' && ($kvnoactivity['billing_mode'] == "3" || $kvnoactivity['billing_mode'] == "0")))
					{
						//if module is deactivate this should work as initial (adding both assessment and koord in anlage10)
						//$kvno['activity_str'] = "Erst-Koordination Ende<br/>" . $docinitials . $pflegenitials.$assesment_complete_time;
						$kvno_start['activity_str'] = "Erst-Koordination Anfang<br/>" .$assesment_start_time. $docinitials . $pflegenitials;
						$kvno_start['course_date'] = $kvnoactivity['start_date'];
						$kvno_start['type'] = "SA";

						//$kvnoa['activity_str'] = "Assessment Ende<br/>" . $docinitials . $pflegenitials.$assesment_complete_time;
						$kvno_starta['activity_str'] = "Assessment Anfang<br/>" .$assesment_start_time. $docinitials . $pflegenitials;
						$kvno_starta['course_date'] = $kvnoactivity['start_date'];
						$kvno_starta['type'] = "SA";

						$days_data[$i]['start_kvno'][$i] = 1;
						$days_data[$i]['start_kvno_k'][$i] = 0;
						$days_data[$i]['start_kvno_a'][$i] = 0;
						
						$days_data[$i]['activ'][] = $kvno_start;
						$days_data[$i]['activ'][] = $kvno_starta;
					}
					else if($mod_perms == "1" && $kvnoactivity['billing_mode'] == "1")
					{
						//module enabled and method 1 selected
						//$kvno_start['activity_str'] = "Erst-Koordination Ende \n" . $docinitials . $pflegenitials.$assesment_complete_time;
						$kvno_start['activity_str'] = "Erst-Koordination Anfang \n" .$assesment_start_time. $docinitials . $pflegenitials;
						$kvno_start['course_date'] = $kvnoactivity['start_date'];
						$kvno_start['type'] = "SAK";

						$days_data[$i]['start_kvno'][$i] = 1;
						$days_data[$i]['start_kvno_k'][$i] = 1;
						$days_data[$i]['activ'][] = $kvno_start;
					}
					else if($mod_perms == "1" && $kvnoactivity['billing_mode'] == "2")
					{
						//$kvnoa['activity_str'] = "Assessment Ende \n" . $docinitials . $pflegenitials.$assesment_complete_time;
						$kvno_starta['activity_str'] = "Assessment Anfang \n" .$assesment_start_time.$docinitials . $pflegenitials;
						$kvno_starta['course_date'] = $kvnoactivity['start_date'];
						$kvno_starta['type'] = "SAA";

						$days_data[$i]['start_kvno'][$i] = 1;
						$days_data[$i]['start_kvno_a'][$i] = 1;
						$days_data[$i]['activ'][] = $kvno_starta;
					}
				}
				// ##########################
				// ##########################
				//get assesment start date END

				
				
				$kvno = array();//"";
				$kvnoa = array();//"";

				if($listmontharr[0] . "-" . str_pad($listmontharr[1], 2, '0', STR_PAD_LEFT) . "-" . str_pad($i, 2, '0', STR_PAD_LEFT) == date('Y-m-d', strtotime($kvnoactivity['completed_date'])))
				{
// 					$usr = new User();

// 					$doctor = $usr->getUserDetails($kvnoactivity['doc_id'], false);
// 					$pflege = $usr->getUserDetails($kvnoactivity['pfl_id'], false);

					$doctor = $client_users[$kvnoactivity['doc_id']];
					$pflege = $client_users[$kvnoactivity['pfl_id']];
					
					
					if(!empty($pflege['first_name']) || !empty($pflege['last_name']))
					{
						$comma = ", ";
					}
					else
					{
						$comma = "";
					}

					//get pflege and doc signed names>initials
					if(empty($doctor['shortname']))
					{
						$docinitials = strtoupper(mb_substr($doctor['first_name'], 0, 1, "UTF-8") . "" . mb_substr($doctor['last_name'], 0, 1, "UTF-8"));
					}
					else
					{
						$docinitials = $doctor['shortname'];
					}

					if(empty($pflege['shortname']))
					{
						$pflegenitials = $comma . mb_substr($pflege['first_name'], 0, 1, "UTF-8") . "" . mb_substr($pflege['last_name'], 0, 1, "UTF-8");
					}
					else
					{
						$pflegenitials = $comma . $pflege['shortname'];
					}
					
					$assesment_complete_dmY = date("d.m.Y",strtotime($kvnoactivity['completed_date']));
					
					$course_assesment_q = Doctrine_Query::create()
					->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
					->from('PatientCourse')
					->where('ipid ="' . $ipid . '"')
					->andWhere("AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') = 'Assesment von ".$assesment_complete_dmY."'")
					->andWhere("wrong = 0")
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
					$course_assesment_arr = $course_assesment_q->fetchArray();

					if(!empty($course_assesment_arr)){
					    $complete_from_course['full'] = $course_assesment_arr[0]['course_date']; 
					    $complete_from_course['dmY'] = date("d.m.Y", strtotime($course_assesment_arr[0]['course_date']));
					    $complete_from_course['dmYHi'] = date("d.m.Y H:i", strtotime($course_assesment_arr[0]['course_date']));
					}
					
					
// 					print_r($complete_from_course);
					
					    $complete_from_assess['full'] = date("d.m.Y H:i", strtotime($kvnoactivity['completed_date']));
					    $complete_from_assess['dmY'] = date("d.m.Y", strtotime($kvnoactivity['completed_date']));
					    $complete_from_assess['dmYHi'] = date("d.m.Y H:i", strtotime($kvnoactivity['completed_date']));
					
// 					print_r($complete_from_assess);
// 					exit; 
					
					
					
					
					
				    $assesment_complete_time = "";
                      
                     if(date("H:i",strtotime($kvnoactivity['completed_date'])) != "00:00"){
					   $assesment_complete_time = date("H:i",strtotime($kvnoactivity['completed_date']))." <br/> ";
                    } 
                    else 
                    {
                        if(strtotime( $complete_from_course['dmY']) == strtotime($complete_from_assess['dmY'])){
    					   $assesment_complete_time = date("H:i",strtotime($complete_from_course['full']))." <br/> ";
                        }                         
                    }
                    
					//case  "change billing method" module disabled or enabled but method 3(Koord and assessment) is used
					if($mod_perms == '0' || ($mod_perms == '1' && ($kvnoactivity['billing_mode'] == "3" || $kvnoactivity['billing_mode'] == "0")))
					{
						//if module is deactivate this should work as initial (adding both assessment and koord in anlage10)
						//$kvno['activity_str'] = "Erst-Koordination Ende<br/>" . $docinitials . $pflegenitials.$assesment_complete_time;
						$kvno['activity_str'] = "Erst-Koordination Ende<br/>" .$assesment_complete_time. $docinitials . $pflegenitials;
						$kvno['course_date'] = $kvnoactivity['completed_date'];
						$kvno['type'] = "A";

						//$kvnoa['activity_str'] = "Assessment Ende<br/>" . $docinitials . $pflegenitials.$assesment_complete_time;
						$kvnoa['activity_str'] = "Assessment Ende<br/>" .$assesment_complete_time. $docinitials . $pflegenitials;
						$kvnoa['course_date'] = $kvnoactivity['completed_date'];
						$kvnoa['type'] = "A";

						$days_data[$i]['kvno'][$i] = 1;
						$days_data[$i]['kvno_k'][$i] = 0;
						$days_data[$i]['kvno_a'][$i] = 0;
						
						$days_data[$i]['activ'][] = $kvno;
						$days_data[$i]['activ'][] = $kvnoa;
					}
					else if($mod_perms == "1" && $kvnoactivity['billing_mode'] == "1")
					{
						//module enabled and method 1 selected
						//$kvno['activity_str'] = "Erst-Koordination Ende \n" . $docinitials . $pflegenitials.$assesment_complete_time;
						$kvno['activity_str'] = "Erst-Koordination Ende \n" .$assesment_complete_time. $docinitials . $pflegenitials;
						$kvno['course_date'] = $kvnoactivity['completed_date'];
						$kvno['type'] = "AK";

						$days_data[$i]['kvno'][$i] = 1;
						$days_data[$i]['kvno_k'][$i] = 1;
						$days_data[$i]['activ'][] = $kvno;
					}
					else if($mod_perms == "1" && $kvnoactivity['billing_mode'] == "2")
					{
						//$kvnoa['activity_str'] = "Assessment Ende \n" . $docinitials . $pflegenitials.$assesment_complete_time;
						$kvnoa['activity_str'] = "Assessment Ende \n" .$assesment_complete_time.$docinitials . $pflegenitials;
						$kvnoa['course_date'] = $kvnoactivity['completed_date'];
						$kvnoa['type'] = "AA";

						$days_data[$i]['kvno'][$i] = 1;
						$days_data[$i]['kvno_a'][$i] = 1;
						$days_data[$i]['activ'][] = $kvnoa;
					}
				}


				/* ================================================================================= */
				//  VERLAUF SHORTCUTS "U" or "XT"
				/* ================================================================================= */
				foreach($coursearray as $course_key => $course_val)
				{
					$coursearr = explode("|", $course_val['course_title']);
// 					print_r($coursearr);  
					if(count($coursearr) == 3)
					{
						//method implemented with 3 inputs
						$time = $coursearr[0];
						$komment = $coursearr[1];
						$date = date('d.m.Y', strtotime($coursearr[2]));
						$date_time = date('d.m.Y H:i', strtotime($coursearr[2]));
// 						print_r($date_time);
						$coursearray[$course_key]['course_date'] = $date;
						$coursearray[$course_key]['course_date_time'] = $date_time;
						
						if(strlen(trim($coursearr[2])) > 10){
    						$duration = $coursearr[0];
    						$starts_at = date('H:i', strtotime($coursearr[2]));
    						$minutes = "";
    						$minutes = "+".$duration." minutes";
    						$ends_at = date("H:i",strtotime($minutes, strtotime($coursearr[2])));
    						$from_till = $starts_at ."-".$ends_at; 
						} else{
    						$duration = $coursearr[0];
    						$starts_at = date('H:i', strtotime($course_val['course_date']));
    						$minutes = "";
    						$minutes = "+".$duration." minutes";
    						$ends_at = date("H:i",strtotime($minutes, strtotime($course_val['course_date'])));
    						$from_till = $starts_at ."-".$ends_at; 
						}
					}
					else if(count($coursearr) != 3 && count($coursearr) < 3)
					{
						//old method before anlage 10
						$time = $coursearr[0];
						$komment = $coursearr[1];
						$date = date('d.m.Y',strtotime($course_val['course_date']));
						$date_time = date('d.m.Y H:i',strtotime($course_val['course_date']));
						$coursearray[$course_key]['course_date'] = $date;
						$coursearray[$course_key]['course_date_time'] = $date_time;
						
						
						$duration = $coursearr[0];
						$starts_at = date('H:i', strtotime($course_val['course_date']));
						$minutes = "";
						$minutes = "+".$duration." minutes";
						$ends_at = date("H:i",strtotime($minutes, strtotime($course_val['course_date'])));
						$from_till = $starts_at ."-".$ends_at;
					}
					else if(count($coursearr) != 3 && count($coursearr) > 3)
					{
						//new method (U) 3 inputs and 1 select newly added in verlauf
						$time = $coursearr[1];
						$komment = $coursearr[2];
						$date = date('d.m.Y', strtotime($coursearr[3]));
						$date_time = date('d.m.Y H:i', strtotime($coursearr[3]));
						$coursearray[$course_key]['course_date'] = $date;
						$coursearray[$course_key]['course_date_time'] = $date_time;
						
						
						$duration = $coursearr[1];
						$starts_at = date('H:i', strtotime($coursearr[3]));
						$minutes = "";
						$minutes = "+".$duration." minutes";
						$ends_at = date("H:i",strtotime($minutes, strtotime($coursearr[3])));
						$from_till = $starts_at ."-".$ends_at;
						
					}
					
					
					

					if(strtotime($groupedArray[$listmonth][$i]) == strtotime($date))
					{

// 						$user_course = Pms_CommonData::getUserData($course_val['user_id']);
						$user_course = $client_users[$course_val['user_id']];

						if(empty($user_course['shortname']))
						{
							$coursearray[$course_key]['initials'] = mb_substr($user_course['first_name'], 0, 1, "UTF-8") . "" . mb_substr($user_course['last_name'], 0, 1, "UTF-8");
						}
						else
						{
							$coursearray[$course_key]['initials'] = $user_course['shortname'];
						}

						if(!empty($course_val['course_title']))
						{
							if($course_val['course_type'] == "U")
							{
								if($modulepriv)
								{
									$title = "Beratung";
								}
								else
								{
									$title = "Telefonat";
								}
							}
							else if($course_val['course_type'] == "XT" && $modulepriv)
							{
								$title = "Telefonat";
							}
							if($course_val['course_type'] == "U")
							{
    							$coursearray[$course_key]['activity_str'] = $title . " " . $coursearray[$course_key]['initials'] . " " . $from_till  . "";
							} 
							else
							{
                                $coursearray[$course_key]['activity_str'] = $title . " " . $coursearray[$course_key]['initials'] . " " . $time . " Minuten";
							}
							$coursearray[$course_key]['verlauf'] = "1";

							$days_data[$i]['activ'][] = $coursearray[$course_key];
						}
					}
				}
				
				/* ================================================================================= */
				//  VERLAUF SHORTCUTS "V" - coordination
				/* ================================================================================= */
				foreach($coursearrayV as $courseV_key => $courseV_val)
				{
					$coursearrV = explode("|", $courseV_val['course_title']);
					if(count($coursearrV) == 3)
					{
						$time = trim($coursearrV[0]);
						$komment = $coursearrV[1];
						$date = date('d.m.Y', strtotime(trim($coursearrV[2])));
						$date_time = date('d.m.Y H:i', strtotime(trim($coursearrV[2])));
						$coursearrayV[$courseV_key]['course_date'] = $date;
						$coursearrayV[$courseV_key]['course_date_time'] = $date_time;
					}
					else if(count($coursearrV) != 3)
					{
						$time = trim($coursearrV[0]);
						$komment = $coursearrV[1];
						$date = date('d.m.Y', strtotime($courseV_val['course_date']));
						$date_time = date('d.m.Y H:i', strtotime($courseV_val['course_date']));
						$coursearrayV[$courseV_key]['course_date'] = $date;
						$coursearrayV[$courseV_key]['course_date_time'] = $date_time;
					}

					if(strtotime($groupedArray[$listmonth][$i]) == strtotime($date))
					{
// 						$user_courseV = Pms_CommonData::getUserData($courseV_val['user_id']);
						$user_courseV = $client_users[$courseV_val['user_id']];
						
						if(empty($user_courseV['shortname']))
						{
							$coursearrayV[$courseV_key]['initials'] = mb_substr($user_courseV['first_name'], 0, 1, "UTF-8") . "" . mb_substr($user_courseV['last_name'], 0, 1, "UTF-8");
						}
						else
						{
							$coursearrayV[$courseV_key]['initials'] = $user_courseV['shortname'];
						}

						if(!empty($courseV_val['course_title']))
						{
							if(empty($coursearrV[0]))
							{
								$time = "4";
							}
							else
							{
								$time = $coursearrV[0];
							}

							$coursearrayV[$courseV_key]['activity_str'] = "Koordination " . $coursearrayV[$courseV_key]['initials'] . " " . $time . " Minuten";
							$coursearrayV[$courseV_key]['verlauf'] = "1";

							$days_data[$i]['activ'][] = $coursearrayV[$courseV_key];
						}
						else
						{
							$coursearrayV[$courseV_key]['activity_str'] = "Koordinationsleistung " . $coursearrayV[$courseV_key]['initials'] . " 4 Minuten";
							$coursearrayV[$courseV_key]['verlauf'] = "1";

							$days_data[$i]['activ'][] = $coursearrayV[$courseV_key];
						}
					}
				}
				
				
				$daysactivity[$i] = $days_data[$i]['activ'];

				unset($days_data[$i]['activ']);
				$ix = 1;

				foreach($daysactivity[$i] as $activity)
				{
					// din verlauf dupa data apelului || koord
					if($activity['course_date'] != "0000-00-00 00:00:00" && !empty($activity['course_date']) && $activity['activity_str'] != "Assessment" && $activity['activity_str'] != "Erst-Koordination")
					{
						$days_activity[$i][(strtotime($activity['course_date']) + $ix)] = $activity;
					}

					//visits dupa data vizitei selectata in formular
					if($activity['vizit_date'] != "0000-00-00 00:00:00" && !empty($activity['vizit_date']))
					{

						$vdate = explode(" ", $activity['vizit_date']);
						$vdate[1] = $activity['kvno_begin_date_h'] . ":" . $activity['kvno_begin_date_m'] . ":00";
						$vizitdate = implode(" ", $vdate);

						$days_activity[$i][strtotime($vizitdate) + $ix] = $activity;
						$days_activity[$i][strtotime($vizitdate) + $ix]['vizit_date_time'] = date("d.m.Y H:i",strtotime($activity['vizit_date']));
					}
					
					//Contact form
					if($activity['billable_date'] != "0000-00-00 00:00:00" && !empty($activity['billable_date']))
					{
						$days_activity[$i][strtotime($activity['billable_date']) + $ix] = $activity;
						$days_activity[$i][strtotime($activity['billable_date']) + $ix]['vizit_date_time'] = date("d.m.Y H:i",strtotime($activity['billable_date']));
					}

					if($activity['full_vizit_date_time'] != "0000-00-00 00:00:00" && !empty($activity['full_vizit_date_time']))
					{
					    if($do_not_bill_after_death == '1'){
                            foreach($discharge_date_dmyHi as $k=>$disch_day_dmyHi) {
        						if(strtotime(date("d.m.Y H:i",strtotime($activity['full_vizit_date_time'])))<= strtotime($disch_day_dmyHi)){
            						$visit_days[] = date('j',strtotime($activity['full_vizit_date_time']));
        						}
                            }
					    } 
					    else
					    {
                            $visit_days[] = date('j',strtotime($activity['full_vizit_date_time']));
					    }
						
					}
										
					//assessment and est koord (+5 seconds)
					if($activity['activity_str'] == "Assessment")
					{
						$days_activity[$i][strtotime($activity['create_date'])] = $activity;
					}
					if($activity['activity_str'] == "Erst-Koordination")
					{

						$days_activity[$i][(strtotime($activity['create_date']) + $ix)] = $activity;
					}
					$ix++;
				}

				ksort($days_activity[$i]);
				$ix = 0;
				foreach($days_activity[$i] as $activity)
				{
					$days_data[$i]['activ'][$ix] = $activity;
					$ix++;
				}
				//get activities from verlauf using shortcuts U=tel and V=koord ###  end
				$days_data[$i]['total_activity'] = count($days_data[$i]['activ']);
			}//end for days
			
			
			if($_REQUEST['dbg'] == 'X')
			{
				print_r($contact_form_data);
				print_r("\n");
				print_r($days_data);
				exit;
			}
			
			if($_REQUEST['dbg'] == 'users')
			{
				exit;
			}

		    $this->view->visit_days =$visit_days;
			$grid = new Pms_Grid($days_data, 1, count($days_data), "anlage10listdays.html");
			$this->view->daylist = $grid->renderGrid();

			//pdf procedure
			if(strlen($_POST['btnsubmit']) > 0)
			{

				$previleges = new Modules();
				$deactivate_anlage10 = $previleges->checkModulePrivileges("77", $logininfo->clientid); // Do not add Anlage 10 in verlauf or show in patient file tab
				//show selected month
				$monthsel = explode('.', $_REQUEST['month']);

				$monthselected = str_pad($monthsel[1], 2, '0', STR_PAD_LEFT) . '.' . $monthsel[0];
				$this->view->monthselected = $monthselected;

				$htmlform = Pms_Template::createTemplate($this->view, 'templates/pdf_anlage10.html');
				$pdfname = "Anlage10";
				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
				$pdf->setDefaults(true); //defaults with header
				$pdf->setImageScale(1.6);
				$pdf->SetMargins(10, 5, 10); //reset margins
//				$pdf->SetFont('', '', '11');
				$pdf->setPrintFooter(false);
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

				$pdf->setHTML($html);

				if(!$deactivate_anlage10)
				{ // if client does not have the deactivate condition selected, then save file and write in verlauf
					$tmpstmp = $pdf->uniqfolder(PDF_PATH);
					$file_name_real = basename($tmpstmp);

					$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
					$_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';

					/*
					$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;

					exec($cmd);
					$zipname = $file_name_real . ".zip";
					$filename = "uploads/" . $file_name_real . ".zip";

					$con_id = Pms_FtpFileupload::ftpconnect();
					if($con_id)
					{
						$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
						Pms_FtpFileupload::ftpconclose($con_id);
					}
					*/
					$ftp_put_queue_result = Pms_CommonData::ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
						

					$cust = new PatientFileUpload();
					$file_title = $pdfname . " (" . $monthselected . ")";
					$cust->title = Pms_CommonData::aesEncrypt(addslashes($file_title));
					$cust->ipid = $ipid;
					$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']);
					$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					$cust->system_generated = "1";
					$cust->save();
					$recordid = $cust->id;


					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $pdfname . ' wurde erstellt'));
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}



				ob_end_clean();
				ob_start();

				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}
		}

		public function kvnoassessmentAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
// 			$this->view->patid = $decid;
			$this->view->patid = $_GET['id'];
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$userid = $logininfo->userid;
			/* ######################################################### */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			
			$module = new Modules();
			if($module->checkModulePrivileges("86", $logininfo->clientid))
			{
				$this->view->module_change_billing = "1";
			}
			else
			{
				$this->view->module_change_billing = "0";
			}

			if($module->checkModulePrivileges("111", $clientid))//Medication acknowledge
			{
				$acknowledge = "1";
				$approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
				$change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			}
			else
			{
				$acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ######################################################### */

			// ISPC-2193
			$partners_array = DgpKern::get_form_texts();
			$dgp_texts = $partners_array;
			//$dgp_texts['partners'][24] = "SAPV-Team"; // HARDCODED
			$this->view->dgp_partners = $dgp_texts['partners_groupped'];
			//--
			
			/* $pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid); */
			
			//diagnosys procedure start
			$dm = new DiagnosisIcd();
			$this->view->icddiagnosisarr = $dm->getDiagnosisData(1);

			$dm = new DiagnosisMeta();
			$diagnosismeta = $dm->getDiagnosisMetaData(1);

			$this->view->diagnosismeta = $diagnosismeta;
			$this->view->jsdiagnosismeta = json_encode($diagnosismeta);

			$dm = new PatientDiagnosisMeta();
			$dmarray = $dm->getPatientDiagnosismeta($ipid);

			//get client user list start
			$users = new User();
			$userarray = $users->getUserByClientid($clientid);

			$userarraylast[] = $this->view->translate('selectuser');
			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['user_title']) . " " .trim($user['last_name']) . ", " . trim($user['first_name']);
			}
			$this->view->users = $userarraylast;

			//get client user list end
			//save data post procedure start
			//check for assessment in db
			$Q = Doctrine_Query::create()
				->select('*')
				->from('KvnoAssessment')
				->where("ipid='" . $ipid . "'")
				->orderBy('id DESC')
				->limit('1');
			$firstsave = $Q->fetcharray();
			$this->view->last_is_completed = $firstsave[0]['iscompleted'];

			if($this->getRequest()->isPost())
			{
				if($_REQUEST['dbgg'])
				{
					print_r($_POST);
					exit;
				}
				$course_ids = array();
				
				if($acknowledge == "1" )
				{
					$_POST['skip_trigger'] = 1;
				}
				$init = new Application_Form_KvnoAssessment();
				$mode = trim($_REQUEST['mode']);
				$last_chk_completed = end($_POST['completed']);
				$last_completed_date = end($_POST['completeddate']);
				$last_completed_date_time = end($_POST['completedtime']);

				if(!empty($_POST['btnnewassessment']))
				{

					$result = $init->insertKvnoAssessment($_POST, $ipid, $mode, '1');
				}

				$field_names = array("fammore" => "Familien- und Versorgungssituation:", "angstemore" => "Ängste / Sorgen:", "wuschemore" => "Wünsche / Hoffnungen:", "behandlungmore" => "Was ist Grund der Behandlung:", "ressourcenmore" => "Ressourcen:",
					"hilfsmore" => "Hilfsbedürftigkeit:", "vigilanzmore" => "Vigilanz:", "mobilitatmore" => "Mobilität:", "whomore" => "Schmerzen:", "anderemore" => "Andere schwerwiegende Symptome / Besonderer Aufwand mit:", "biographiemore" => "Biographie:", "fotodokmore" => "Fotodokumentation:", "sonstigesmore" => "Sonstiges:");
				$befund_f_names = array("kopf" => "Kopf:", "thorax" => "Thorax:", "abdomen" => "Abdomen:", "extremitaten" => "Extremitäten:", "haut" => "Haut/Wunden:");

				if($_POST['btnsave'])
				{
					if($last_chk_completed == "1" ) // ISPC-1456 - Eliminate condition: $firstsave[0]['iscompleted']="0"
					{

						if($init->validate($_POST))
						{
							//write in verlauf "Assesment von DATE OF COMPLETION"
							$custcourse = new PatientCourse();
							$custcourse->ipid = $ipid;
							$custcourse->course_date = date("Y-m-d H:i:s", time());
							$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
							$comment = "Assesment von " . $last_completed_date.' '.$last_completed_date_time;
							$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
							$custcourse->user_id = $userid;
							$custcourse->ishidden = 1;
							$custcourse->save();
                            $course_ids[] =$custcourse->id; 
							
							//completed!
							$custcourse = new PatientCourse();
							$custcourse->ipid = $ipid;
							$custcourse->course_date = date("Y-m-d H:i:s", time());
							$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
							$comment = "Assessment wurde abgeschlossen";
							$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
							$custcourse->user_id = $userid;
							$custcourse->ishidden = 1;
							$custcourse->save();
							$course_ids[] =$custcourse->id;
							
							//reevaluation
							$custcourse = new PatientCourse();
							$custcourse->ipid = $ipid;
							$custcourse->course_date = date("Y-m-d H:i:s", time());
							$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
							$comment = "Re-Evaluation am " . $_POST['reeval'];
							$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
							$custcourse->user_id = $userid;
							$custcourse->ishidden = 1;
							$custcourse->save();
							$course_ids[] =$custcourse->id;

							//DASHBOARD mark previous assessment as done
							$data['client'] = $clientid;
							$data['user'] = $userid;
							$data['event'] = $_POST['last_completed_id'];
							$data['tabname'] = 'asses';
							$data['done'] = '1';
							$data['done_date'] = $_POST['last_completed_date'];
							$data['source'] = 's';

							$dashboard_d = new Application_Form_DashboardActions();
							$save_dashboard_done = $dashboard_d->add_done_entry($data);

							foreach($_POST as $key_p => $val_p)
							{
								//all fields and their values
								if(array_key_exists($key_p, $field_names) && strlen($val_p) > 0)
								{
									//write in verlauf all *more textareas if has >0 string lenght
									$custcourse = new PatientCourse();
									$custcourse->ipid = $ipid;
									$custcourse->course_date = date("Y-m-d H:i:s", time());
									$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
									$comment = $field_names[$key_p] . " " . $val_p;
									$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
									$custcourse->user_id = $userid;
									$custcourse->ishidden = 1;
									$custcourse->save();
									$course_ids[] =$custcourse->id;
								}
								//Befund fields and their values
								if(array_key_exists($key_p, $befund_f_names) && $val_p == 2)
								{
									//write in verlauf all *more textareas if has >0 string lenght
									$custcourse = new PatientCourse();
									$custcourse->ipid = $ipid;
									$custcourse->course_date = date("Y-m-d H:i:s", time());
									$custcourse->course_type = Pms_CommonData::aesEncrypt("B");
									$key_more = trim($key_p . "more");
									$comment = $befund_f_names[$key_p] . " " . $_POST[$key_more];
									$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
									$custcourse->user_id = $userid;
									$custcourse->ishidden = 1;
									$custcourse->save();
									$course_ids[] =$custcourse->id;
								}

								//psycho verlauf
								if($key_p == "psycho" && $val_p == 1)
								{
									//write in verlauf all *more textareas if has >0 string lenght
									$custcourse = new PatientCourse();
									$custcourse->ipid = $ipid;
									$custcourse->course_date = date("Y-m-d H:i:s", time());
									$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
									$comment = "Psychosoziale Betreuung durch Hospiz-Bewegung erwünsch";
									$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
									$custcourse->user_id = $userid;
									$custcourse->ishidden = 1;
									$custcourse->save();
									$course_ids[] =$custcourse->id;
								}
							}
						}
						else
						{
							$this->view->date_err = $this->view->translate('completed_date_err');
						}
					}
				}

				//diagnosis add prtocedure start
				if($_REQUEST['mode'] != "live")
				{
					$previleges = new Pms_Acl_Assertion();
					$return = $previleges->checkPrevilege('Patientdiagnosis', $logininfo->userid, 'canadd');

					if(!$return)
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}

					$pat_diagnosis = new Application_Form_PatientDiagnosis();
					$diagno_text = new Application_Form_DiagnosisText();

					$a_post = $_POST;
					$a_post['clientid'] = $clientid;
					$a_post['ipid'] = $ipid;

//				for($i = 1; $i <= sizeof($_POST['diagnosis']); $i++)
					foreach($_POST['diagnosis'] as $k_i => $diagnosis_value)
					{
						if(strlen($diagnosis_value) > 0 && strlen($_POST['hidd_diagnosis'][$k_i]) < 1)
						{
							$a_post['newdiagnosis'][$k_i] = $diagnosis_value;
							$a_post['newdiagnosistype'][$k_i] = $_POST['dtype'][$k_i];
							$a_post['newdiagnosisicd'][$k_i] = $_POST['icdnumber'][$k_i];
						}
					}

					if(is_array($a_post['newdiagnosis']))
					{
						$dt = $diagno_text->InsertEditData($a_post);

						foreach($dt as $key => $val)
						{
							$a_post['newhidd_diagnosis'][$key] = $val['id'];
						}
					}

					for($i = 1; $i <= sizeof($_POST['diagnosis_ed']); $i++)
					{
						if(strlen($_POST['diagnosis_ed'][$i]) > 0 && strlen($_POST['hidd_diagnosis_ed'][$i]) < 1)
						{
							$a_post['newdiagnosis_ed'][$i] = $_POST['diagnosis_ed'][$i];
							$a_post['newdiagnosistype_ed'][$i] = $_POST['dtype_ed'][$i];
						}
					}

					if(is_array($a_post['newdiagnosis_ed']))
					{
						$dt = $diagno_text->Insert_EdData($a_post);

						foreach($dt as $key => $val)
						{
							$a_post['newhidd_diagnosis_ed'][$key] = $val['id'];
						}
					}


					$pat_diagnosis->UpdateData($a_post);
					$dm_form = new Application_Form_PatientDiagnosisMeta();
					$dm_form->UpdateData($a_post);
				}

				//diagnosis add procedure ends
				//medication edit procedure start
				if($_REQUEST['mode'] != "live")
				{
					$previleges = new Pms_Acl_Assertion();
					$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'canedit');
					$patient_medication_form = new Application_Form_Medication();

					if(!$return)
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}


					$a_post = $_POST;
					for($i = 1; $i <= count($_POST['medication']); $i++)
					{
						if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
						{

							$a_post['newmids'][$i] = $_POST['drid'][$i];
							$a_post['newmedication'][$i] = $_POST['medication'][$i];
						}
					}


					if(is_array($a_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($a_post);
						foreach($dts as $key => $dt)
						{
							$a_post['newhidd_medication'][$key] = $dt->id;
						}
					}
					$med_form = new Application_Form_PatientDrugPlan();
					$med_form->UpdateMultiData($a_post);
					//medication edit procedure end
					// medication add procedure start
					$med_form = new Application_Form_PatientDrugPlan();
					$patient_medication_form = new Application_Form_Medication();

					$add_post = $_POST['add'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 0;

					//	    if($_GET['isbedarfs']==1){
					//		    $add_post['isbedarfs'] = 1;
					//	    }

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}


					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);

						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					/*					 * **************************************** */


					$med_form->InsertMultiData($add_post);

					if(count($_POST['addbedarf']) > 0)
					{
						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();

						$add_post = $_POST['addbedarf'];
						$add_post['ipid'] = $ipid;
						$add_post['isbedarfs'] = 1;

						foreach($add_post['medication'] as $key => $val)
						{
							if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
							{
								$add_post['newmedication'][$key] = $add_post['medication'][$key];
							}
						}


						if(is_array($add_post['newmedication']))
						{
							$dts = $patient_medication_form->InsertNewData($add_post);

							foreach($dts as $key => $dt)
							{
								$add_post['newhidd_medication'][$key] = $dt->id;
							}
						}

						$med_form->InsertMultiData($add_post);
					}
				}
				// medication add procedure start
				//todo`s add procedure start
				if($_REQUEST['mode'] != "live" && ($_POST['btnsave'] || $_POST['btnsubmit']))
				{

					if($_POST['btnsave'] || $_POST['btnsubmit'])
					{
						$todo_array = $_POST['todo'];
						foreach($todo_array['user'] as $cheie => $user)
						{
							
							if($user > 0)
							{
								if(strlen($todo_array['until_date'][$cheie])>0){
									$until_data[$cheie] = $todo_array['until_date'][$cheie];
								} else {
									$until_data[$cheie] = date("Y-m-d H:i:s");
								}
						
								$ins = new ToDos();
								$ins->client_id = $clientid;
								$ins->user_id = $todo_array['user'][$cheie];
								$ins->ipid = $ipid;
								$ins->todo = $todo_array['text'][$cheie];
								$ins->create_date = date("Y-m-d H:i:s");
								$ins->until_date = date("Y-m-d H:i:s", strtotime($until_data[$cheie]));
								$ins->additional_info = 'u'.$todo_array['user'][$cheie];
								$ins->save();

								$todo_id = $ins->id;
								if($last_chk_completed == "1" && $firstsave[0]['iscompleted'] == 0)
								{
									//add TO DO`s to verlauf
									$custcourse = new PatientCourse();
									$custcourse->ipid = $ipid;
									$custcourse->course_date = date("Y-m-d H:i:s", time());
									$custcourse->course_type = Pms_CommonData::aesEncrypt("W");
									$comment = $todo_array['text'][$cheie] . "|" . $todo_array['user'][$cheie] . "|" . date('d.m.Y',strtotime($until_data[$cheie]));
									$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
									$custcourse->user_id = $userid;
									$custcourse->recordid = $todo_id;
									$custcourse->ishidden = 1;
									$custcourse->save();
									$course_ids[] =$custcourse->id;
									
									$course_id = $custcourse->id;
									$todo_individual = Doctrine::getTable('ToDos')->find($todo_id);
									if($todo_individual)
									{
										$todo_individual->course_id = $course_id;
										$todo_individual->save();
									}
									
								}
							}
						}
					}
				}
				//todo`s add procedure end
				//post insert procedure btnsave submit or live ajax
				if(strlen($_POST['btnsave']) > 0 || $_REQUEST['mode'] == "live")
				{
					$post = $_POST;
					$post['issaved'] = $firstsave[0]['issaved'];
					$post['wascompleted'] = $firstsave[0]['iscompleted'];

					//ISPC-2508 Carmen 05.02.2020
					//Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
					$kunstlichearr =  array(
							'1' => 'Darm',
							'2' => 'Blase',
							'3' => 'Luftröhre',
							'4' => 'Ablaufsonde',
							'5' => 'besonderer Aus-/ Eingang',);
						
					$client_artificial_settings = ArtificialEntriesExitsListTable::getInstance()->findByClientid($clientid, Doctrine_Core::HYDRATE_ARRAY);
					$patartset = PatientArtificialEntriesExitsTable::getInstance()->findByIpidAndIsremove($ipid, '0', Doctrine_Core::HYDRATE_ARRAY);
					
					$client_set_attached = array_unique(array_column($patartset, 'option_id'));
					
					if($post['kunstliche'] == '5')
					{
						if($post['kunstlichevalues'] == '0' || strlen($post['kunstlichevalues']) == 0)
						{
							$kunstlichevls = $post['kunstliche'];
						}
						else
						{
							$kunstlichevls = $post['kunstlichevalues'] . "," . $post['kunstliche'];
						}
						$kunstlichemore = $post['kunstlichemore'];
						
						//ISPC-2508 Carmen 05.02.2020
						//Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
						/*$kunstlichearr =  array(
								'1' => 'Darm',
								'2' => 'Blase',
								'3' => 'Luftröhre',
								'4' => 'Ablaufsonde',
								'5' => 'besonderer Aus-/ Eingang',);*/
							
						//$client_artificial_settings = ArtificialEntriesExitsListTable::getInstance()->findByClientid($clientid, Doctrine_Core::HYDRATE_ARRAY);
						//$patartset = PatientArtificialEntriesExitsTable::getInstance()->findByIpid($ipid, Doctrine_Core::HYDRATE_ARRAY);
						//$client_set_attached = array_unique(array_column($patartset, 'option_id'));
						
						foreach($client_artificial_settings as $kr => $vr)
						{
								
							if(!empty($vr['old_name']))
							{
								$old_array = array_values($vr['old_name']);
						
								if(array_key_exists($old_array[0], $kunstlichearr))
								{
									if($old_array[0] == '5')
									{											
										$data_art = array(
												'option_id' => 	$vr['id'],
												'option_date' => date('Y-m-d H:i:s', time()),
												'option_localization' => htmlspecialchars($kunstlichemore),
										);
										$entity = PatientArtificialEntriesExitsTable::getInstance()->findOneByIpidAndOptionId($ipid, $vr['id'], Doctrine_Core::HYDRATE_RECORD);
											
										if($entity)
										{
											$entity->option_localization = htmlspecialchars($kunstlichemore);											$entity->save();
										}
										else
										{
											$entity = PatientArtificialEntriesExitsTable::getInstance()->createIfNotExistsOneBy(array('id', 'ipid'), array(null, $ipid), $data_art);
										}
									}
								}
							}
						}
					}
					else
					{
						$kunstlichevls = $post['kunstlichevalues'];
						$kunstlichemore = "";
						//ISPC-2508 Carmen 05.02.2020
						//Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
						foreach($client_artificial_settings as $kr => $vr)
						{
						
							if(!empty($vr['old_name']) && in_array($vr['id'], $client_set_attached))
							{
								$old_array = array_values($vr['old_name']);
						
								if(array_key_exists($old_array[0], $kunstlichearr))
								{
									if($old_array[0] == '5')
									{
										$entity = PatientArtificialEntriesExitsTable::getInstance()->findOneByIpidAndOptionIdAndIsremove($ipid, $vr['id'], '0', Doctrine_Core::HYDRATE_RECORD);
											
										if($entity)
										{
											$entity->isremove = 1;
											$entity->remove_date = date('Y-m-d H:i:s', time());
											$entity->save();
										}
									}
								}
							}
						}
						
					}

					$kunstlichemore = htmlspecialchars($kunstlichemore);

					//ISPC-2508 Carmen 05.02.2020 Commented
					//Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
					/*$kuns = Doctrine_Core::getTable('Stammdatenerweitert')->findBy('ipid', $ipid);
					$kunsarr = $kuns->toArray();

					if(count($kunsarr) > 0)
					{
						$kuns_up = Doctrine::getTable('Stammdatenerweitert')->findOneByIpid($ipid);
						$kuns_up->kunstliche = $kunstlichevls;
						$kuns_up->kunstlichemore = $kunstlichemore;
						$kuns_up->save();
					}
					else
					{
						$ins = new Stammdatenerweitert();
						$ins->ipid = $ipid;
						$ins->kunstliche = $kunstlichevls;
						$ins->kunstlichemore = $kunstlichemore;
						$ins->save();
					} */
					
					if($post['rezeptgebuhrenbefreiung'])
					{
						$ph = Doctrine_Query::create()
							->update('PatientHealthInsurance')
							->set('rezeptgebuhrenbefreiung','?', $post['rezeptgebuhrenbefreiung'])
							->where("ipid='" . $ipid . "'");
						$ph->execute();
					}

					
					$show_course = 0;
					 
					if(empty($_POST['btnnewassessment'])) //only if new assessment is not pressed
					{
						$assessment_form = new Application_Form_KvnoAssessment();
						//daca avem cel putin un form salvat
						if(!empty($firstsave))
						{
							//update on (submit or live)
							//update when submited via post and live
							if(!empty($post['kvno_assessment_id']))
							{
								if($last_chk_completed == "1")
								{
									if($assessment_form->validate($_POST))
									{
										$result = $init->updateKvnoAssessment($post, $ipid, $mode);
										$show_course = 1;
									}
									else
									{
										$this->view->date_err = $this->view->translate('completed_date_err');
										$show_course = 0;
									}
								}
								else
								{
									$result = $init->updateKvnoAssessment($post, $ipid, $mode);
									$show_course = 1;
								}
							}
							//insert as new only on submit
							else if($mode != 'live')
							{
								if($last_chk_completed == "1")
								{
									if($assessment_form->validate($_POST))
									{
										$result = $init->insertKvnoAssessment($post, $ipid, $mode);
										$show_course = 1;
									}
									else
									{
										$this->view->date_err = $this->view->translate('completed_date_err');
										$show_course = 0;
									}
								}
								else
								{
									$result = $init->insertKvnoAssessment($post, $ipid, $mode);
									$show_course = 1;
								}
								//send verlauf ca formular creat fara pdf
							}
						}
						else
						{
							if($mode != 'live') //insert as new only on submit
							{
								if($last_chk_completed == "1")
								{
									if($assessment_form->validate($_POST))
									{
										$result = $init->insertKvnoAssessment($post, $ipid, $mode);
										$show_course = 1;
									}
									else
									{
										$this->view->date_err = $this->view->translate('completed_date_err');
										$show_course = 0;
									}
								}
								else
								{
									$result = $init->insertKvnoAssessment($post, $ipid, $mode);
									$show_course = 1;
								}
							}
						}
					}

					 
					
					if($result)
					{
					    
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						
    					// TODO-2115 NR ESSEN Ancuta 06.02.2019
    					//update patient course
    					if($show_course == '1' && !empty($course_ids) &&  !empty($result)){
    					
    					    //update in patient course
    					    $tbname = Pms_CommonData::aesEncrypt(addslashes('kvno_assessment'));
    					    $qa = Doctrine_Query::create()
    					    ->update('PatientCourse')
    					    ->set('ishidden', '?', 0)
    					    ->set('tabname', '?', $tbname)
    					    ->set('done_id', '?', $result)
    					    ->where('ipid = ?', $ipid)
    					    ->andWhereIn('id', $course_ids);
    					    $qa->execute();
    					}
					}  

					if($_REQUEST['mode'] == "live")
					{
						exit;
					}
				}
			}

			//get all assessments in insert order
			$Q = Doctrine_Query::create()
				->select('*')
				->from('KvnoAssessment')
				->where("ipid='" . $ipid . "'")
				->orderBy('id ASC');
			$last_assessment = $Q->fetcharray();

			

			// Get course data - for complete dates with no times
			$course_assesment_q = Doctrine_Query::create()
			->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
			->from('PatientCourse')
			->where('ipid ="' . $ipid . '"')
// 			->andWhere("AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') = 'Assesment von ".$assesment_complete_dmY."'")
			->andWhere("AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "')  LIKE '%Assesment von%'")
			->andWhere("wrong = 0")
			->andWhere('source_ipid = ""')
			->orderBy('course_date ASC');
			$course_assesment_arr = $course_assesment_q->fetchArray();

			
			foreach($course_assesment_arr as $k=>$cass){
			    $course_create_date[$cass['course_title']] = $cass['create_date']; 
			}
			
            foreach($last_assessment as $k=>$ass_dates){
                $complete_date_dmY[$k] = date("d.m.Y",strtotime($ass_dates['completed_date'])); 
                $course_date[$k] =  $course_create_date['Assesment von '.$complete_date_dmY[$k]];
                // mabey add a hack  so this is used before changes in  ISPC-1631 Nordrhein - 23.02.2016
                
                if(date("H:i",strtotime($ass_dates['completed_date'])) == "00:00" && strtotime(date("Y-m-d",strtotime($ass_dates['completed_date']))) == strtotime(date("Y-m-d",strtotime($course_date[$k]))) ){
                    $last_assessment[$k]['completed_date'] = date("Y-m-d", strtotime($ass_dates['completed_date'])).' '.date("H:i:00",strtotime($course_date[$k]));
                }
                
                
                if(strlen($ass_dates['start_date']) > 0 && $ass_dates['start_date'] != "0000-00-00 00:00:00"){
                    $last_assessment[$k]['start_date'] = date("Y-m-d", strtotime($ass_dates['start_date'])).' '.date("H:i:00",strtotime($ass_dates['start_date']));
                }   
                else
                {
                    $last_assessment[$k]['start_date'] = "";
                }
                
            }
            
			$this->view->assessments = $last_assessment;
			//save data post procedure end

			if($dmarray)
			{
				$metatitle[0] = $dmarray[0]['metaid'];
				$metatitle[1] = $dmarray[1]['metaid'];
				$metatitle[2] = $dmarray[2]['metaid'];

				$meta_title_hidd[0] = $dmarray[0]['id'];
				$meta_title_hidd[1] = $dmarray[1]['id'];
				$meta_title_hidd[2] = $dmarray[2]['id'];
			}

			$this->view->metatitle = $metatitle;
			$this->view->meta_title_hidd = $meta_title_hidd;

			$abb = "'HD','ND'";
			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($clientid, $abb);
			$this->view->dtypearray = $darr;
			$this->view->jdarr = json_encode($darr);

			$comma = ",";
			$ipidval = "'0'";

			if(is_array($darr))
			{
				foreach($darr as $key => $val)
				{
					$ipidval .= $comma . "'" . $val['id'] . "'";
					$comma = ",";
				}
			}

// 			$ipid = Pms_CommonData::getIpid($decid);
			$ipid = (is_null($ipid) || $ipid == "") ? Pms_CommonData::getIpid($decid) : $ipid;
			$diagns = new PatientDiagnosis();
			$a_diagno = $diagns->getFinalData($ipid, $ipidval);

			$diagno_cnt = count($a_diagno);
			
			/*ISPC - 2364 - sorted by user */
			$pdiaord = PatientDiagnoOrderTable::getInstance()->findDiagnoOrder($ipid);
			//RWH - ISPC-950
			//sort by icd
			if(empty($pdiaord))
			{
				$a_diagno = $this->array_sort($a_diagno, 'icdnumber', SORT_ASC);
				$a_diagno = array_values($a_diagno);
			
				//sort by type
				foreach($darr as $k_diag_type => $v_diag_type)
				{
					foreach($a_diagno as $k_diag => $v_diag)
					{
						if($v_diag_type['id'] == $v_diag['diagnosis_type_id'])
						{
							$a_diagno_sorted[] = $v_diag;
						}
					}
				}
				//RWH end
			}
			else
			{
				$a_diagno = array_column($a_diagno, null, 'pdid');
				$pdorder = $pdiaord[0]['diagno_order'];
					
				$diagnaddother = array_diff(array_keys($a_diagno), $pdorder);
				$diagnremoveother = array_diff($pdorder, array_keys($a_diagno));
					
				if($diagnaddother)
				{
					$pdorder = array_merge($pdorder, $diagnaddother);
				}
					
				if($diagnremoveother)
				{
					$pdorder = array_diff($pdorder, $diagnremoveother);
				}
					
				$a_diagno_sorted = [];
				foreach ($pdorder as $pdid) {
					$a_diagno_sorted[] = $a_diagno[$pdid];
				}
			}
			$a_diagno = $a_diagno_sorted;
			
			if(strlen($_POST['btnsubmit']) == 0 && strlen($_POST['btnsave']) == 0)
			{
				if($diagno_cnt < 6)
				{
					for($i = ($diagno_cnt + 1); $i <= 6; $i++)
					{
						$a_diagno[$i]['tabname'] = "";
						$a_diagno[$i]['icdnumber'] = "";
						$a_diagno[$i]['hidd_icdnumber'] = "";
						$a_diagno[$i]['diagnosis'] = "";
						$a_diagno[$i]['pdid'] = "";
						$a_diagno[$i]['hidd_diagnosis'] = "";
						$a_diagno[$i]['diagnosis_type_id'] = "";
						$a_diagno[$i]['meta_title1'] = "";
						$a_diagno[$i]['meta_title2'] = "";
						$a_diagno[$i]['meta_title3'] = "";
					}
				}
			}

			$this->view->jscount = count($a_diagno);


			$meta_data = PatientDiagnosisMeta::getPatientDiagnosismeta($ipid);

			foreach($meta_data as $kx => $mvas_data)
			{
				$meta_diagnosis[$mvas_data['diagnoid']][] = $mvas_data['metaid'];
			}

			$grid = new Pms_Grid($a_diagno, 1, count($a_diagno), "listdiagnosis.html");
			$grid->meta_diagnosis = $meta_diagnosis;
			$grid->gridview->dtypearray = $darr;

			$this->view->diagno = $grid->renderGrid();
			$this->view->rowcount = count($a_diagno);

			if($this->getRequest()->isPost())
			{

				//pdf grid
				$grid_pdf = new Pms_Grid($a_diagno, 1, count($a_diagno), "listdiagnosis_pdf.html");
				$grid->meta_diagnosis = $meta_diagnosis;
				$grid_pdf->gridview->dtypearray = $darr;
				$this->view->diagno_pdf = $grid_pdf->renderGrid();
			}

			$this->view->rowcount = count($a_diagno);

			//diagnosys procedure end
			#######################################################
			##################   MEDICATION EDIT ##################
			#######################################################

			if(strlen($_GET['mid']) > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'candelete');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				if($_GET['act'] == "del")
				{

					//delete medication
					$mid = $_GET['mid'];
					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
					$mod->isdelete = 1;
					$mod->save();
					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
				}
			}


			$pq = new User();
			$pqarr = $pq->getUserByClientid($logininfo->clientid);
			$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);
			$this->view->kvnodelicon = "1";

			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));

			$usr = new User();
			$users = $usr->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;

			//get all client users -> For todos
			$allUsers = new User();
			$allUserArray = $allUsers->getUserByClientid($clientid);
			$userarraylastall[] = $this->view->translate('selectuser');
			foreach($allUserArray as $user)
			{
				$userarraylastall[$user['id']] = trim(rtrim(trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name'])));
			}
			$this->view->allUsers = $userarraylastall;

			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";

			#######################################
			$medic = new PatientDrugPlan();

			// get bedarf medication
			$medicarr = $medic->getbedarfMedication($decid);

			$medication_master_ids['bedarf'][] = "XXXXXX";
			foreach($medicarr as $k_medicarr => $v_medicarr)
			{
				$medication_master_ids['bedarf'][] = $v_medicarr['medication_master_id'];
			}

			// get active medication
			$medicarr1 = $medic->getMedicationPlan($decid);

			$medication_master_ids['active'][] = "XXXXXX";
			foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
			{
				$medication_master_ids['active'][] = $v_medicarr1['medication_master_id'];
			}


			// get deleted medication
			$medicarr2 = $medic->getDeletedMedication($decid);

			$medication_master_ids['deleted'][] = "XXXXXX";
			foreach($medicarr2 as $k_medicarr2 => $v_medicarr2)
			{
				$medication_master_ids['deleted'][] = $v_medicarr2['medication_master_id'];
			}

			// get master medication data
			$medication_master_ids = array_merge($medication_master_ids['bedarf'], $medication_master_ids['active'], $medication_master_ids['deleted']);

			$med = new Medication();
			$medarr1 = $med->getMedicationById($medication_master_ids);

			foreach($medarr1 as $k_medarr1 => $v_medarr1)
			{
				$medication_master_array[$v_medarr1['id']] = $v_medarr1;
			}

			// display active medication
			if(count($medicarr1 < 1))
			{
				$this->view->mcntr = 0;
			}

			if($this->getRequest()->isPost())
			{
				$medicarr1 = Pms_CommonData::clear_pdf_data($medicarr1);
				$grid_pdf = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->medications_pdf = $grid_pdf->renderGrid();
			}

			
			$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->medications = $grid->renderGrid();

			// count medication
			$this->view->ajx = 1;
			$this->view->cntr = count($medicarr1);

			// discplay deleted medication
			$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "listdelpatientmedication_ajax.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->delmedications = $grid->renderGrid();


			// count medication
			$this->view->counter = count($medicarr1) + count($medicarr2);

			// display bedarf medication
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationbedarfsedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->bedarfsmedications = $grid->renderGrid();

				
			if($this->getRequest()->isPost())
			{
				$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
				$grid_pdf = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->bedarfsmedications_pdf = $grid_pdf->renderGrid();
			}
			#######################################################
			#######################################################
			##################   MEDICATION ADD ##################
			#######################################################
			$pq = new User();
			$pqarr = $pq->getUserByClientid($logininfo->clientid);

			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$MasterGroups = array("4", "5", "6");
			$usersgroups = $usergroup->getUserGroups($MasterGroups);

			if(count($usersgroups) > 0)
			{
				foreach($usersgroups as $group)
				{
					if($group['groupmaster'] == 4)
					{
						$groupsDocArray[] = $group['id'];
					}
					else
					{
						$groupsarray[] = $group['id'];
					}
				}
			}
			$usrs = new User();
			$usersPflegeKoordArray = $usrs->getuserbyGroupId($groupsarray, $clientid, true);
			$pflegeKoords['0'] = "Auswahl";

			foreach($usersPflegeKoordArray as $user)
			{
				$pflegeKoords[$user['id']] = $user['user_title'] . " " . $user['last_name'] . ", " . $user['first_name'];
			}

			$this->view->pfleges = $pflegeKoords;

			$Dusrs = new User();
			$usersDoctorsArray = $Dusrs->getuserbyGroupId($groupsDocArray, $clientid, true);
			$doctors['0'] = "Auswahl";
			foreach($usersDoctorsArray as $doctor)
			{
				$doctors[$doctor['id']] = $doctor['user_title'] . " " . $doctor['last_name'] . ", " . $doctor['first_name'];
			}
			$this->view->doctors = $doctors;

			$a_medic = array();

			for($i = 0; $i < 6; $i++)
			{
				$a_medic[$i] = array('cnt' => $i);
			}

			//medis add grid procedure start
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 9999, "listpatientmedicationadd.html");
			$this->view->medicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);


			//bedarf medis add start
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 99999, "listpatientbedarfmedicationadd.html");
			$this->view->bedarfmedicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			#######################################################
			##################   MEDICATION END ##################
			#######################################################
			//pflegedienstes procedure start
			//get last pfledge to be edited!
			$pat_pfl = new PatientPflegedienste();

			$res_pfledge = $pat_pfl->getPatientLastPflegediensteNew($ipid, false);
			$res_pfledge_palliativ = $pat_pfl->getPatientLastPflegediensteNew($ipid, true);
			//print_r($res_pfledge_palliativ);exit;
			$this->view->ppd_id = $res_pfledge_palliativ[0]['pflege_id'];
			$this->view->pfledge_id = $res_pfledge[0]['pflege_id'];
			//pflegedienstes procedure end
			//Get locations start
			$lc = new Locations();
			// ISPC-2612 Ancuta 27.06.2020
			$client_is_follower = ConnectionMasterTable::_check_client_connection_follower('Locations', $clientid);
			if ($client_is_follower) {
    			$locationsarray = $lc->getLocations($clientid, 1,true); 
			} else { 
    			$locationsarray = $lc->getLocations($clientid, 1); 
			}
            // -- 
            
			
			//check if client has location with type contactperson : type= 6
			$locType = $lc->checkLocationsClientByType($clientid, 6);
			if($locType)
			{
				$pc = new ContactPersonMaster();
				$pcs = $pc->getPatientContact($ipid, false);
				if($pcs)
				{
					$z = 1;
					$cnt_number = 1;
					foreach($pcs as $value)
					{

						if($value['isdelete'] == 0)
						{
							$locationsarray['8888' . $z] = 'bei Kontaktperson ' . $cnt_number . '(' . $value['cnt_last_name'] . ', ' . $value['cnt_first_name'] . ')';
							$cnt_number++;
						}
						else
						{
							$locationsarray['8888' . $z] = 'bei Kontaktperson ';
						}

						$z++;
					}
				}
			}
			$this->view->locaarray = $locationsarray;

			//Get locations end
			//0-10 array start
			for($i = 0; $i <= 10; $i++)
			{
				$sel[$i] = $i;
			}

			$this->view->numbers = $sel;
			//0-10 array end
			//IK Client Number start
			$clientq = new Client();
			$clientdata = $clientq->getClientDataByid($clientid);

			$this->view->iknumber = $clientdata[0]['institutskennzeichen'];

			$todosarray = array("1" => "");
			$grid = new Pms_Grid($todosarray, 1, 6, "listkvnotodos.html");

			$this->view->todos = $grid->renderGrid();
			//Get to do`s procedure end
			//Get assessment data start (L.E changed to get last assessment data becouse the form becomes multiple times not one time only)
			$Q = Doctrine_Query::create()
				->select('*')
				->from('KvnoAssessment')
				->where("ipid='" . $ipid . "'")
				->orderBy('id DESC')
				->limit('1');
			$resarr = $Q->fetchArray();

			if(count($resarr) > 0)
			{
				$this->view->assessment_id = $resarr[0]['id'];
				$this->retainValues($resarr[0]);
			}
			//Get assessment data end
			//patient data
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->birthd = $parr['birthd'];
			//stammdaten  get boxes values start
			
			//ISPC-2508 Carmen 05.02.2020
			//Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
			$client_artificial_settings = ArtificialEntriesExitsListTable::getInstance()->findByClientid($clientid, Doctrine_Core::HYDRATE_ARRAY);
			$patartset = PatientArtificialEntriesExitsTable::getInstance()->findByIpidAndIsremove($ipid, '0', Doctrine_Core::HYDRATE_ARRAY);
			$client_set_attached = array_unique(array_column($patartset, 'option_id'));
		
			if(empty($client_set_attached))
			{
 				$pmf = new PatientMoreInfo();
 				$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

 				//ISPC-2508 Carmen 06.02.2020
 				//Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
 				//$this->view->dk = $pat_moreinfo[0]['dk']; dk values moved from moreinfo to stammdatenerwietert
 				$this->view->peg = $pat_moreinfo[0]['peg'];
 				$this->view->port = $pat_moreinfo[0]['port'];
 				$this->view->zvk = $pat_moreinfo[0]['zvk'];
 				$this->view->pumps = $pat_moreinfo[0]['pumps'];
 				$this->view->magensonde = $pat_moreinfo[0]['magensonde']; 

 				$kunstlichestr = '';
 				$st = new Stammdatenerweitert();
 				$weit = $st->getStammdatenerweitert($ipid);
 				if($weit[0]['kunstliche'])
 				{
 					$kunstliche = explode(",", $weit[0]['kunstliche']);
 					if(in_array('1', $kunstliche))
 					{
 						$kunstlichestr .= '1,';
 					}
 					if(in_array('2', $kunstliche))
 					{
 						$kunstlichestr .= '2,';
 					}
 					if(in_array('3', $kunstliche))
 					{
 						$kunstlichestr .= '3,';
 					}
 					if(in_array('4', $kunstliche))
 					{
 						$kunstlichestr .= '4,';
 					}
 					if(in_array('5', $kunstliche))
 					{
 						$this->view->kunstliche = '5';
 						$this->view->kunstlichemore = $weit[0]['kunstlichemore'];
 					}
 				}
 				else
 				{
 					$kunstlichestr = '0,';
 				}
 				
 				//ISPC-2508 Carmen 06.02.2020
 				//Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
 				//get dk from table stammdatenerweitert
 				if($weit[0]['ausscheidung'])
 				{
 					$ausscheidung = explode(",", $weit[0]['ausscheidung']);
 					
 					if(in_array('4', $ausscheidung))
 					{
 						$this->view->ausscheidung = json_encode(array('4'));
 					}
 					//var_dump($this->view->ausscheidung);exit;
 				}
			}
			else 
			{
				foreach($patartset as $kp => $vp)
				{
					$patids[$vp['option_id']][] = $vp;
				}			
				
				$kunstlichestr = '';
				$moreinfoarr = array('peg', 'port', 'zvk', 'magensonde');
	
				$kunstlichearr =  array(
						'1' => 'Darm',
						'2' => 'Blase',
						'3' => 'Luftröhre',
						'4' => 'Ablaufsonde',
						'5' => 'besonderer Aus-/ Eingang',);
				
				$ausscheidungarr = array(
						'4' => 'DK',
						'5' => 'SPF');
				
				foreach($client_artificial_settings as $kr => $vr)
				{
					if(!empty($vr['old_name']) && in_array($vr['id'], $client_set_attached))
					{
						
						$old_array = array_values($vr['old_name']);
						
						if(in_array($old_array[0], $moreinfoarr))
						{
							$this->view->{$old_array[0]} = '1';
							
						}
						
						if(array_key_exists('Ausscheidung', $vr['old_name']) && array_key_exists($old_array[0], $ausscheidungarr))
						{
							$this->view->ausscheidung = json_encode(array($old_array[0]));
							
						}
						
						if(array_key_exists('Kunstliche', $vr['old_name']) && array_key_exists($old_array[0], $kunstlichearr))
						{						
							if($old_array[0] != '5')
							{
								$kunstlichestr .= $old_array[0].',';
							}
							else 
							{
								$this->view->kunstliche = '5';
								$patartdet = $patids[$vr['id']];
								if(count($patartdet) > 1)
								{
									$patartcurrent = end($patartdet);
								}
								else 
								{
									$patartcurrent = $patartdet[0];
								}
								
								$this->view->kunstlichemore = $patartcurrent['option_localization'];
							}
						}
					}
				}

			}

			$this->view->kunstlichevalues = substr($kunstlichestr, 0, -1);
			$kunstlichevalues = substr($kunstlichestr, 0, -1);


			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if($phi[0])
			{
				$nohealthinsurance = 1;
				$rezeptgebuhrenbefreiung = $phi[0]['rezeptgebuhrenbefreiung'];
				$this->view->rezeptgebuhrenbefreiung = $rezeptgebuhrenbefreiung;
				
				$this->view->insurance_no = $phi[0]['insurance_no'];
				
				$health_insurance = $phi[0]['company_name'];
				$this->view->patient_health_insurance = $health_insurance;
			}
			else
			{
				$this->view->insurance_no = "";
				$nohealthinsurance = 0;
			}
			$this->view->pathealthinsurance = $nohealthinsurance;

			$pms = new PatientMaintainanceStage();
			$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);
			$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
			$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
			$this->view->carelevellist = $grid->renderGrid();
			$this->view->stage = $pat_pms[0]['stage'];
			$this->view->erstantrag = $pat_pms[0]['erstantrag'];
			$this->view->horherstufung = $pat_pms[0]['horherstufung'];

			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);
			$this->view->alone = $pat_lives[0]['alone'];
			$this->view->house_of_relatives = $pat_lives[0]['house_of_relatives'];
			$this->view->apartment = $pat_lives[0]['apartment'];
			$this->view->home = $pat_lives[0]['home'];
			$this->view->hospiz = $pat_lives[0]['hospiz'];
			$this->view->sonstiges = $pat_lives[0]['sonstiges'];
			
			//ISPC-2553 Lore 03.06.2020
			$reeval_days_nr = 14;
			if($module->checkModulePrivileges("229", $clientid)) {
			    $reeval_days_nr = 28;
			}
			$this->view->reeval_days = $reeval_days_nr;
			//.
			
			if(strtotime($resarr[0]['completed_date']) !== false && strtotime($resarr[0]['completed_date']) > 0)
			{
				$this->view->completeddate = date("d.m.Y", strtotime($resarr[0]['completed_date']));
			}
			else
			{
				$this->view->completeddate = date("d.m.Y");
			}
			if(strtotime($resarr[0]['reeval']) !== false && strtotime($resarr[0]['reeval']) > 0)
			{
				//timestamp 1970
				$this->view->reeval = date("d.m.Y", strtotime($resarr[0]['reeval']));
			}
			else
			{
			    //ISPC-2553 Lore 03.06.2020
				//$this->view->reeval = date("d.m.Y", strtotime("+14 days")); // This was changed, if module 229 activated, the reeval should be 28 days in the future
			    $reeval_days_increment = '+'.$reeval_days_nr.' days';
			    $this->view->reeval = date("d.m.Y", strtotime($reeval_days_increment));
			    //.
			}

			if($this->getRequest()->isPost())
			{
    			if( (!$result || empty($result)) && strlen($_POST['btnsubmit']) == 0 )
    			{
    			    $this->retainValues($post);
    			    $this->view->error_form_not_saved = $this->view->translate('Data was NOT saved! Please check form and try again!');
    			    $this->view->error_message = "";
    			    return;
    			}
    			
			}
			//pdf procedure
			if(strlen($_POST['btnsubmit']) > 0 || (strlen($_POST['btnsave']) > 0 && !empty($_POST['completed'])))
			{
				$this->view->iscompleted = $_POST['completed'][0];
				$this->view->completeddate = $_POST['completeddate'][0];
				$this->view->reeval = $_POST['reeval'];

				//get all assessments in insert order
				$Q = Doctrine_Query::create()
					->select('*')
					->from('KvnoAssessment')
					->where("ipid='" . $ipid . "'")
					->orderBy('id ASC');
				$last_assessment = $Q->fetcharray();



				// Get course data - for complete dates with no times
				$course_assesment_q = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('ipid ="' . $ipid . '"')
				// 			->andWhere("AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') = 'Assesment von ".$assesment_complete_dmY."'")
				->andWhere("AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "')  LIKE '%Assesment von%'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
				$course_assesment_arr = $course_assesment_q->fetchArray();
				
					
				foreach($course_assesment_arr as $k=>$cass){
				    $course_create_date[$cass['course_title']] = $cass['create_date'];
				}
					
				foreach($last_assessment as $k=>$ass_dates){
				    $complete_date_dmY[$k] = date("d.m.Y",strtotime($ass_dates['completed_date']));
				    $course_date[$k] =  $course_create_date['Assesment von '.$complete_date_dmY[$k]];
				    // mabey add a hack  so this is used before changes in  ISPC-1631 Nordrhein - 23.02.2016
				
				    if(date("H:i",strtotime($ass_dates['completed_date'])) == "00:00" && strtotime(date("Y-m-d",strtotime($ass_dates['completed_date']))) == strtotime(date("Y-m-d",strtotime($course_date[$k]))) ){
				        $last_assessment[$k]['completed_date'] = date("Y-m-d", strtotime($ass_dates['completed_date'])).' '.date("H:i:00",strtotime($course_date[$k]));
				    }
				}
				
				
				$this->view->assessments = $last_assessment;

				$assessment_no = count($last_assessment);
				if($assessment_no <= '1')
				{
					$pdfname = "Assessment";
				}
				else if($assessment_no > '1')
				{
					$pdfname = $assessment_no . '.' . "Assessment";
				}

				$htmlform = Pms_Template::createTemplate($this->view, 'templates/kvno_assessmentformpdf.html');

				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
				$pdf->setDefaults(true); //defaults with header
				$pdf->setImageScale(1.6);
				$pdf->SetMargins(10, 5, 10); //reset margins
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
				$pdf->setHTML($html);

				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				
				//$tmpstmp = substr(md5(time() . rand(0, 999)), 0, 12);
				//mkdir('uploads/' . $tmpstmp);

				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');

				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
				/*
				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData::ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				
				
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdfname));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;

				if(strlen($_POST['btnsave']) > 0 && $last_chk_completed == '1' && $init->validate($_POST))
				{
					//iscompleted =>verlauf cu link catre pdf
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('PDF des Assessment Formulars in Dateien und Dokumente wurde hinterlegt'));
					$cust->user_id = $logininfo->userid;
					$cust->recordid = $file_id;
					$cust->tabname = Pms_CommonData::aesEncrypt('kvno_assesment_new');
					$cust->save();
				}
				else if(strlen($_POST['btnsubmit']) > 0)
				{
					//doar pdf => verlauf cu link catre form
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('PDF des Assessment Formulars in Dateien und Dokumente wurde hinterlegt.'));
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}

				ob_end_clean();
				ob_start();
				if(strlen($_POST['btnsubmit']) > 0)
				{
					$pdf->toBrowser($pdfname . '.pdf', 'D');
					exit;
				}
				else if($init->validate($_POST))
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
				}
			}
			//stammdaten get boxes values end
		}

		public function aufnahmeassessmentAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			$this->view->patid = $decid;
			$this->view->patid2 = $_GET['id'];
			$this->view->enc_patid = $_GET['id'];
			$this->view->epid = $epid;
			$pid = $this->view->$_GET['id'];
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$this->view->clientid = $clientid;
			$this->view->id_record = $ipid;
			$this->view->ipid = $ipid;

			/* --------------Get patient info and menus--------------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* --------------Patient Information ---------------------------------------- */
// 			$patientmaster = new PatientMaster();
// 			$patientdetails = $patientmaster->getMasterData($decid, 0);
			$patientdetails = $patientmaster->get_patientMasterData();
			
			$patient['details']['last_name'] = $patientdetails['last_name'];
			$patient['details']['first_name'] = $patientdetails['first_name'];
			$patient['details']['birthd'] = $patientdetails['birthd'];
			$patient['details']['street'] = $patientdetails['street1'];
			$patient['details']['city'] = $patientdetails['city'];
			$patient['details']['phone'] = $patientdetails['phone'];
			$patient['details']['gender'] = $patientdetails['sex'];
			$this->view->patient = $patient;
			/* --------------Check permissions	---------------------------------------- */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			/* --------------Check if patient is discharge	---------------------------- */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			//ISPC-2508 Carmen 06.02.2020
			//Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
			$client_artificial_settings = ArtificialEntriesExitsListTable::getInstance()->findByClientid($clientid, Doctrine_Core::HYDRATE_ARRAY);
			$patartset = PatientArtificialEntriesExitsTable::getInstance()->findByIpidAndIsremove($ipid, '0', Doctrine_Core::HYDRATE_ARRAY);
			$client_set_attached = array_unique(array_column($patartset, 'option_id'));
			
			foreach($patartset as $kp => $vp)
			{
				$patids[$vp['option_id']][] = $vp;
			}
			
			if(empty($client_set_attached))
			{
				/* --------------Stammdaten -  Patient details	---------------------------- */
				$pmf = new PatientMoreInfo();
				$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
				//ISPC-2508 Carmen 06.02.2020
				//Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
				//
				//$this->view->dk = $pat_moreinfo[0]['dk']; dk values moved from moreinfo to stammdatenerwietert
				$this->view->peg = $pat_moreinfo[0]['peg'];
				$this->view->port = $pat_moreinfo[0]['port'];
				$this->view->zvk = $pat_moreinfo[0]['zvk'];
				$this->view->pumps = $pat_moreinfo[0]['pumps'];
				$this->view->magensonde = $pat_moreinfo[0]['magensonde'];
				$this->view->pegmore = $pat_moreinfo[0]['pegmore'];
				$this->view->portmore = $pat_moreinfo[0]['portmore'];
			}
			else 
			{
				$moreinfoarr = array('peg', 'port', 'zvk', 'magensonde');
			
				foreach($client_artificial_settings as $kr => $vr)
				{
					if(!empty($vr['old_name']) && in_array($vr['id'], $client_set_attached))
					{
			
						$old_array = array_values($vr['old_name']);
			
						if(in_array($old_array[0], $moreinfoarr))
						{
							$this->view->{$old_array[0]} = '1';
							
							if($old_array[0] == 'peg' || $old_array[0] == 'port')
							{
								$patartdet = $patids[$vr['id']];
								if(count($patartdet) > 1)
								{
									$patartcurrent = end($patartdet);
								}
								else
								{
									$patartcurrent = $patartdet[0];
								}
								if($patartcurrent['option_localization'] != "")
								{
									
									$this->view->{$old_array[0].'more'} = $patartcurrent['option_localization'];
								}
							}
								
						}
					}
				}
				
			}


			/* --------------Stammdaten -  Patient details	---------------------------- */
			$this->view->living_will = $patientdetails['living_will'];
			if($patientdetails['living_will_from'] != "0000-00-00" && $patientdetails['living_will_from'] != "0000-00-00 00:00" && !empty($patientdetails['living_will_from']) && $patientdetails['living_will_from'] != 0)
			{
				$this->view->living_will_from = date("d.m.Y", strtotime($patientdetails['living_will_from']));
			}
			else
			{
				$this->view->living_will_from = "";
			}
			$this->view->living_will_deposited = $patientdetails['living_will_deposited'];

			/* ------------------- Stammdaten - Patient lebt----------------------------- */
			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);
			$this->view->alone = $pat_lives[0]['alone'];
			$this->view->house_of_relatives = $pat_lives[0]['house_of_relatives'];
			$this->view->apartment = $pat_lives[0]['apartment'];
			$this->view->home = $pat_lives[0]['home'];
			$this->view->hospiz = $pat_lives[0]['hospiz'];
			$this->view->sonstiges = $pat_lives[0]['sonstiges'];

			/* --------------Stammdaten -  Familienstand	---------------------------------- */
			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);
			$this->view->familienstands = $st->getFamilienstandfun();
			$this->view->familienstand = $weit[0]['familienstand'];
			/* --------------Stammdaten -  Ernährung	-------------------------------------- */
			$this->view->ernahrungs = $st->getErnahrungfun();
			$this->view->ernahrung = json_encode(explode(',', $weit[0]['ernahrung']));

			
			//Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
			if(empty($client_set_attached))
			{
				/* --------------Stammdaten -  Kunstliche Ausgange	-------------------------- */
				$this->view->kunstliche = json_encode(explode(',', $weit[0]['kunstliche']));
				$this->view->kunstlichemore = $weit[0]['kunstlichemore'];
			}
			else
			{
				$kunstlichearr =  array(
						'1' => 'Darm',
						'2' => 'Blase',
						'3' => 'Luftröhre',
						'4' => 'Ablaufsonde',
						'5' => 'besonderer Aus-/ Eingang',);
				
				foreach($client_artificial_settings as $kr => $vr)
				{
					
					if(array_key_exists('Kunstliche', $vr['old_name']) && !empty($vr['old_name']) && in_array($vr['id'], $client_set_attached))
					{
				
						$old_array = array_values($vr['old_name']);
						
						if(array_key_exists($old_array[0], $kunstlichearr))
						{
							
							$kunstlichearratt[] = $old_array[0];
							
							if($old_array[0] == '5')
							{	
								$patartdet = $patids[$vr['id']];
								if(count($patartdet) > 1)
								{
									$patartcurrent = end($patartdet);
								}
								else
								{
									$patartcurrent = $patartdet[0];
								}
				
								$this->view->kunstlichemore = $patartcurrent['option_localization'];
							}
						}
					}
				}
				$this->view->kunstliche = json_encode($kunstlichearratt);
			}

			/* --------------Stammdaten -  Vigilanz	--------------------------------------- */
			$this->view->vigilanzs = $st->getVigilanzfun();
			$this->view->vigilanz = $weit[0]['vigilanz'];

			/* --------------Stammdaten - Religion---------------------------------------- */
			$rl = new PatientReligions();
			$this->view->religions = $rl->getReligionsNames();
			$pat_rel = $rl->getReligionsData($ipid);
			$this->view->religion = $pat_rel[0]['religion'];

			/* --------------Stammdaten -  Hilfsmittel------------------------------------ */
			$this->view->hilfsmittel = json_encode(explode(',', $weit[0]['hilfsmittel']));


			/* --------------Stammdaten -  Wunsch des Patienten----------------------------- */
			$this->view->wunsch = json_encode(explode(',', $weit[0]['wunsch']));
			$this->view->wunschmore = $weit[0]['wunschmore'];

			/* --------------Stammdaten -  stastszugehorigkeit------------------------------- */
			$this->view->stastszugehorigkeit = $weit[0]['stastszugehorigkeit'];
			$this->view->anderefree = $weit[0]['anderefree'];
			
			/* --------------Stammdaten -  ausscheidung------------------------------------ */
			$this->view->ausscheidung = json_encode(explode(',', $weit[0]['ausscheidung']));

			//Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
			if(empty($client_set_attached))
			{
				$aussnew = explode(',', $weit[0]['ausscheidung']);
				foreach($aussnew as $ka => $va)
				{
					if($va == '4' || $va == '5')
					{
						$aussnewatt[] = $va;
						
					}
				}
				$this->view->ausscheidungnew = json_encode($aussnewatt);
			}
			else
			{
				$ausscheidungarr = array(
						'4' => 'DK',
						'5' => 'SPF');
				
				foreach($client_artificial_settings as $kr => $vr)
				{
					if(array_key_exists('Ausscheidung', $vr['old_name']) && !empty($vr['old_name']) && in_array($vr['id'], $client_set_attached))
					{
				
						$old_array = array_values($vr['old_name']);
				
						if(array_key_exists($old_array[0], $ausscheidungarr))
						{
							$ausscheidungatt[] = $old_array[0];
						}
					}
				}
					
				$this->view->ausscheidungnew = json_encode($ausscheidungatt);
			}

			/* --------------Stammdaten -  Mobilitat------------------------------------ */
			$pm = new PatientMobility();
			$pat_mob = $pm->getpatientMobilityData($ipid);
			$this->view->bed = $pat_mob[0]['bed'];
			$this->view->bedmore = $pat_mob[0]['bedmore'];
			$this->view->walker = $pat_mob[0]['walker'];
			$this->view->walkermore = $pat_mob[0]['walkermore'];
			$this->view->wheelchair = $pat_mob[0]['wheelchair'];
			$this->view->wheelchairmore = $pat_mob[0]['wheelchairmore'];
			$this->view->goable = $pat_mob[0]['goable'];
			$this->view->goablemore = $pat_mob[0]['goablemore'];
			$this->view->nachtstuhl = $pat_mob[0]['nachtstuhl'];
			$this->view->nachtstuhlmore = $pat_mob[0]['nachtstuhlmore'];
			$this->view->wechseldruckmatraze = $pat_mob[0]['wechseldruckmatraze'];
			$this->view->wechseldruckmatrazemore = $pat_mob[0]['wechseldruckmatrazemore'];

			/* --------------Stammdaten - Theraphieplanung ------------------------------------ */
			$therapy = new PatientTherapieplanung();
			$patienttherapy = $therapy->getTherapieplanungData($ipid);
			$this->retainValues($patienttherapy[0]);

			/* -------------- Diagnosis  - Get Main Diagnosis --------------------------------- */
			$abb = "'HD'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($clientid, $abb);
			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}
			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);

				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						if(strlen($val['icdnumber']) > 0)
						{
							$other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
						}
						else
						{
							$other_diagnosis .= $comma . $val['diagnosis'];
						}
						$dia++;
						$comma = ",";
					}
				}
			}
			$this->view->diagnosen = $other_diagnosis;

			/* -------------- Symptomatics  - Get last Symptomatics --------------------------------- */
			$symp = new Symptomatology();
			$symptomarr_ext = $symp->getPatientSymptpomatologyLastEntered($ipid);
			$sypmt = array();
			foreach($symptomarr_ext as $key => $val)
			{
				if($val['value'] == "0")
				{
					$sypmt[$key] = "1";
				}
				else if($val['value'] == "3")
				{
					$sypmt[$key] = "2";
				}
				else if($val['value'] == "6")
				{
					$sypmt[$key] = "3";
				}
				else if($val['value'] == "9")
				{
					$sypmt[$key] = "4";
				}
				else
				{
					$sypmt[$key] = "";
				}
			}

			//Angste / Sorgen:
			$this->view->depresiv = $sypmt[12];
			$this->view->angst = $sypmt[13];
			$this->view->anspannung = $sypmt[14];
			$this->view->desorientier = $sypmt[15];
			//Schmerzen:
			$this->view->schmerzen = $sypmt[1];
			//Andere schwerwiegende Symptome:
			$this->view->ubelkeit = $sypmt[2];
			$this->view->erbrechen = $sypmt[4];
			$this->view->luftnot = $sypmt[5];
			$this->view->verstopfung = $sypmt[6];
			$this->view->swache = $sypmt[7];
			$this->view->appetitmangel = $sypmt[8];
			$this->view->sonstiges = $sypmt[18];
			$this->view->sonstigesmore = $symptomarr_ext[18]['custom_description'];

			/* ------------------- Users - get client users----------------------------- */
			$users = new User();
			$userarray = $users->getUserByClientid($clientid);

			$userarraylast[] = $this->view->translate('selectuser');
			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['user_title']) . ", " . trim($user['last_name']) . ", " . trim($user['first_name']);
			}
			$this->view->users = $userarraylast;

			/* ------------------- Get Recording assessment details ----------------------------- */
			$Q = Doctrine_Query::create()
				->select('*')
				->from('RecordingAssessment')
				->where('ipid ="' . $ipid . '"');
			$resarr = $Q->fetchArray();

			if(!empty($resarr))
			{
				$this->view->recording_assessment_id = $resarr[0]['id'];
				$this->view->orientierung_voll = json_encode(explode(',', $resarr[0]['orientierung_voll']));
				$this->view->orientierung_teilweise = json_encode(explode(',', $resarr[0]['orientierung_teilweise']));
				$this->view->orientierung_schwer = json_encode(explode(',', $resarr[0]['orientierung_schwer']));
				$this->view->orientierung_desorientiert = json_encode(explode(',', $resarr[0]['orientierung_desorientiert']));
				$this->view->diagnosen = $resarr[0]['diagnosen'];
				$this->view->who = $resarr[0]['who'];
			}
			else
			{
				$this->view->recording_assessment_id = '';
			}

			/* ------------------- Save form----------------------------- */
			if($this->getRequest()->isPost())
			{

				$init = new Application_Form_RecordingAssessment();
				if(strlen($_POST['btnsave']) > 0)
				{
					/* ------------------- Medication- Check medication privilege---------------------- */
					$previleges = new Pms_Acl_Assertion();
					$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'canedit');
					$patient_medication_form = new Application_Form_Medication();

					if(!$return)
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}

					/* ------------------- Medication- Edit active medication----------------------------- */
					$a_post = $_POST;
					for($i = 1; $i <= count($_POST['medication']); $i++)
					{
						if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
						{

							$a_post['newmids'][$i] = $_POST['drid'][$i];
							$a_post['newmedication'][$i] = $_POST['medication'][$i];
						}
					}

					if(is_array($a_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($a_post);
						foreach($dts as $key => $dt)
						{
							$a_post['newhidd_medication'][$key] = $dt->id;
						}
					}
					$med_form = new Application_Form_PatientDrugPlan();
					$med_form->UpdateMultiData($a_post);

					/* ------------------- Medication - Add new medication----------------------------- */
					$med_form = new Application_Form_PatientDrugPlan();
					$patient_medication_form = new Application_Form_Medication();

					$add_post = $_POST['add'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 0;

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}

					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);

						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					$med_form->InsertMultiData($add_post);

					if(count($_POST['addbedarf']) > 0)
					{
						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();

						$add_post = $_POST['addbedarf'];
						$add_post['ipid'] = $ipid;
						$add_post['isbedarfs'] = 1;

						foreach($add_post['medication'] as $key => $val)
						{
							if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
							{
								$add_post['newmedication'][$key] = $add_post['medication'][$key];
							}
						}

						if(is_array($add_post['newmedication']))
						{
							$dts = $patient_medication_form->InsertNewData($add_post);

							foreach($dts as $key => $dt)
							{
								$add_post['newhidd_medication'][$key] = $dt->id;
							}
						}

						$med_form->InsertMultiData($add_post);
					}

					/* ------------------- Save symptomatics ----------------------------- */
					$symptoms_values = array(
						'1' => '0',
						'2' => '3',
						'3' => '6',
						'4' => '9'
					);

					$symptoms_id = array(
						'schmerzen' => '1',
						'ubelkeit' => '2',
						'erbrechen' => '4',
						'luftnot' => '5',
						'verstopfung' => '6',
						'swache' => '7',
						'appetitmangel' => '8',
						'depresiv' => '12',
						'angst' => '13',
						'anspannung' => '14',
						'desorientier' => '15',
						'sonstiges' => '18'
					);

					if($_POST['edit_symptom'] == '1')
					{
						foreach($_POST as $k_sym => $v_sym)
						{
							if(array_key_exists($k_sym, $symptoms_id))
							{
								$symptoms_data['symptom'][] = $symptoms_id[$k_sym];
								$symptoms_data['sym_value'][] = $symptoms_values[$v_sym];
							}
						}

						$course_symptoms = new Application_Form_PatientSymptomatology();
						$course_symptom_add = $course_symptoms->InsertDataFromVerlauf($ipid, $symptoms_data);
					}


					if(empty($_POST['recording_assessment_id']))
					{
						/* ------------------- Save Recording Assessment form ----------------------------- */
						$result = $init->insertRecordingAssessment($_POST, $ipid);
						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}

						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
					else
					{
						/* ------------------- Update Recording Assessment form ----------------------------- */
						$result = $init->UpdateRecordingAssessment($_POST, $ipid);
						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}

						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}
			}

			/* ------------------- Medication - Delete  medication----------------------------- */
			if(strlen($_GET['mid']) > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'candelete');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				if($_GET['act'] == "del")
				{
					//delete medication
					$mid = $_GET['mid'];
					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
					$mod->isdelete = 1;
					$mod->save();
					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
				}
				elseif($_GET['act'] == "rnw")
				{
					//renew medication
					$mid = $_GET['mid'];
					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
					$mod->isdelete = 0;
					$mod->change_date = date("Y-m-d H:i:s", time());
					$mod->change_user = $logininfo->userid;
					$mod->save();
					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
				}
			}

			$pq = new User();
			$pqarr = $pq->getUserByClientid($logininfo->clientid);
			$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);
			$this->view->kvnodelicon = "1";

			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));

			$usr = new User();
			$users = $usr->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;

			//get all client users -> For todos
			$allUsers = new User();
			$allUserArray = $allUsers->getUserByClientid($logininfo->clientid);
			$userarraylastall[] = $this->view->translate('selectuser');
			foreach($allUserArray as $user)
			{
				$userarraylastall[$user['id']] = trim($user['user_title']) . " " .trim($user['last_name']) . ", " . trim($user['first_name']);
			}
			$medic = new PatientDrugPlan();
			$medicarr = $medic->getbedarfMedication($decid);
			$medicarr1 = $medic->getMedicationPlan($decid);
			$medicarr2 = $medic->getDeletedMedication($decid);

			$this->view->allUsers = $userarraylastall;
			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";
			if(count($medicarr1 < 1))
			{
				$this->view->mcntr = 0;
			}

			$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "recording_asses_medicationedit.html");
			$this->view->medications = $grid->renderGrid();
			
			foreach($medicarr as $k_med => $v_med)
			{
				$medications_master_ids[] = $v_med['medication_master_id'];
			}
			
			foreach($medicarr1 as $k_med => $v_med)
			{
				$medications_master_ids[] = $v_med['medication_master_id'];
			}
			
			foreach($medicarr2 as $k_med => $v_med)
			{
				$medications_master_ids[] = $v_med['medication_master_id'];
			}
			
			$med = new Medication();
			$medarr_master = $med->getMedicationById($medications_master_ids);

			foreach($medarr_master as $k_medarr1 => $v_medarr1)
			{
				$medication_master_array[$v_medarr1['id']] = $v_medarr1;
			}
			
			if($this->getRequest()->isPost())
			{
				//medication grid for pdf
				$medicarr1 = Pms_CommonData::clear_pdf_data($medicarr1);
				$grid_pdf_med = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit_pdf.html");
				$grid_pdf_med->medication_master_array = $medication_master_array;
				$this->view->medications_pdf = $grid_pdf_med->renderGrid();
			}
			$this->view->ajx = 1;
			$this->view->cntr = count($medicarr1);
			$medicarr2 = $medic->getDeletedMedication($decid);
			$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "recassessmentdelmeds.html");
			$this->view->delmedications = $grid->renderGrid();

			$this->view->counter = count($medicarr1) + count($medicarr2);
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationbedarfsedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->bedarfsmedications = $grid->renderGrid();

			//bedarf medication grid for pdf
			$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
			$grid_pdf_bedarf = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationedit_pdf.html");
			$grid_pdf_bedarf->medication_master_array = $medication_master_array;
			$this->view->bedarfsmedications_pdf = $grid_pdf_bedarf->renderGrid();
			//medis edit grid procedure end
			//medis add grid procedure start
			$pq = new User();
			$pqarr = $pq->getUserByClientid($logininfo->clientid);

			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$MasterGroups = array("4", "5", "6");
			$usersgroups = $usergroup->getUserGroups($MasterGroups);

			if(count($usersgroups) > 0)
			{
				foreach($usersgroups as $group)
				{
					if($group['groupmaster'] == 4)
					{
						$groupsDocArray[] = $group['id'];
					}
					else
					{
						$groupsarray[] = $group['id'];
					}
				}
			}
			$usrs = new User();
			$usersPflegeKoordArray = $usrs->getuserbyGroupId($groupsarray, $clientid, true);
			$pflegeKoords['0'] = "Select User";


			foreach($usersPflegeKoordArray as $user)
			{
				$pflegeKoords[$user['id']] = $user['user_title'] . " " . $user['last_name'] . ", " . $user['first_name'];
			}

			$this->view->pfleges = $pflegeKoords;

			$Dusrs = new User();
			$usersDoctorsArray = $Dusrs->getuserbyGroupId($groupsDocArray, $clientid, true);
			$doctors['0'] = "Auswahl";
			foreach($usersDoctorsArray as $doctor)
			{
				$doctors[$doctor['id']] = $doctor['user_title'] . " " . $doctor['last_name'] . ", " . $doctor['first_name'];
			}
			$this->view->doctors = $doctors;

			$doctors['-1'] = "Anderer Arzt";
			$doctors['-2'] = "Hausarzt";
			$this->view->users = $doctors;

			$a_medic = array();

			if(is_array($_POST['hidd_medication']))
			{
				foreach($_POST['hidd_medication'] as $key => $val)
				{
					$a_medic[$key]['medication'] = $_POST['medication'][$key];
					$a_medic[$key]['hidd_medication'] = $_POST['hidd_medication'][$key];
				}
			}
			else
			{
				for($i = 0; $i < 6; $i++)
				{
					$a_medic[$i] = array('cnt' => $i);
				}
			}
			
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 9999, "recording_asses_medicationadd.html");
			$this->view->medicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//medis add grid procedure end
			//bedarf medis add start
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 99999, "listpatientbedarfmedicationadd.html");
			$this->view->bedarfmedicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//bedarf medis add end

			if(strlen($_POST['btnsubmit']) > 0)
			{
				$post = $_POST;
				$post['medications_pdf'] = $this->view->medications_pdf;
				$post['bedarfsmedications_pdf'] = $this->view->bedarfsmedications_pdf;
				$this->generateformPdf(3, $post, 'Aufnahmeassessment', "recording_assessmentformpdf.html");
			}
		}

		public function removetodoajaxAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			if($_GET['delid'] > 0)
			{
				$todo = new ToDos();
				$todo_action = $todo->deleteTodoById($_GET['delid']);
			}

			return json_encode("Done");
			exit;
		}

		public function removekvnomedisAction()
		{
			$this->_helper->viewRenderer->setNoRender();

			//delete medication
			$mid = $_GET['mid'];
			$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
			$mod->isdelete = 1;
			$mod->save();

			echo json_encode($this->view->translate("medicationdeletedsuccessfully"));
			exit;
		}

		public function bayerndoctorvisitAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			/* ------------------------------------------------ */
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge
			{
			    $acknowledge = "1";
			    $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			    $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->phone = $patientarr['phone'];
			$this->view->epid = strtoupper($epid);
			$pq = new User();
			$this->view->client_users = $pq->getUserByClientid($clientid);
			$this->view->wlform = "1";
			$detailscookies = '""';
			$oc = new OverviewCookie();
			$ocarr = $oc->getCookieData($logininfo->userid, "admission");

			switch($ocarr[0]['useroption'])
			{
				case 1 :
					$detailscookies = "";
					break;
				case 3 :
					$detailscookies = $ocarr[0]['cookie'];
					break;
				default : break;
			}

			$this->view->detailscookies = "'" . $detailscookies . "'";

				
			
			
			/* -----------------Client Categories ------------------------- */
			$clientcat = new ClientFb3categories();
			$categ = $clientcat->getClientFb3categories($clientid);
			$category_defaultarray = $clientcat->defaultClientFb3categories();


			foreach($category_defaultarray as $def)
			{
				$cats[$def['cid']]['cid'] = $def['cid'];
				$cats[$def['cid']]['default'] = $def['title'];
				foreach($categ as $val)
				{
					if($def['cid'] == $val['categoryid'])
					{
						$cats[$def['cid']]['title'] = $val['category_title'];
					}
				}
			}

			if(!empty($cats[1]['title']))
			{
				$this->view->cat1 = $cats[1]['title'];
			}
			else
			{
				$this->view->cat1 = $cats[1]['default'];
			}
			if(!empty($cats[2]['title']))
			{
				$this->view->cat2 = $cats[2]['title'];
			}
			else
			{
				$this->view->cat2 = $cats[2]['default'];
			}
			if(!empty($cats[3]['title']))
			{
				$this->view->cat3 = $cats[3]['title'];
			}
			else
			{
				$this->view->cat3 = $cats[3]['default'];
			}
			if(!empty($cats[4]['title']))
			{
				$this->view->cat4 = $cats[4]['title'];
			}
			else
			{
				$this->view->cat4 = $cats[4]['default'];
			}
			if(!empty($cats[5]['title']))
			{
				$this->view->cat5 = $cats[5]['title'];
			}
			else
			{
				$this->view->cat5 = $cats[5]['default'];
			}
			if(!empty($cats[6]['title']))
			{
				$this->view->cat6 = $cats[6]['title'];
			}
			else
			{
				$this->view->cat6 = $cats[6]['default'];
			}
			if(!empty($cats[7]['title']))
			{
				$this->view->cat7 = $cats[7]['title'];
			}
			else
			{
				$this->view->cat7 = $cats[7]['default'];
			}
			if(!empty($cats[8]['title']))
			{
				$this->view->cat8 = $cats[8]['title'];
			}
			else
			{
				$this->view->cat8 = $cats[8]['default'];
			}
			if(!empty($cats[9]['title']))
			{
				$this->view->cat9 = $cats[9]['title'];
			}
			else
			{
				$this->view->cat9 = $cats[9]['default'];
			}
			/* -----------------Client Categories ------------------------- */

			/* ---------------------------Set default date for visit-------------------------- */
			$this->view->begin_date_h = date('H', strtotime('-5 minutes'));
			$this->view->begin_date_m = date('i', strtotime('-5 minutes'));
			$this->view->end_date_h = date('H', strtotime('+10 minutes'));
			$this->view->end_date_m = date('i', strtotime('+10 minutes'));
			$this->view->visit_date = date('d.m.Y');

			/* ---------------------------Get patient details from Stammdaten -------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			$this->view->stam_dk = $pat_moreinfo[0]['dk'];
			$this->view->stam_peg = $pat_moreinfo[0]['peg'];
			$this->view->stam_port = $pat_moreinfo[0]['port'];
			$this->view->stam_pumps = $pat_moreinfo[0]['pumps'];

			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);
			$kunstliche = explode(",", $weit[0]['kunstliche']);

			if(in_array('1', $kunstliche))
			{
				$darm = '1';
			}
			else
			{
				$darm = '0';
			}
			if(in_array('2', $kunstliche))
			{
				$blase = '1';
			}
			else
			{
				$blase = '0';
			}
			if(in_array('3', $kunstliche))
			{
				$luftrohre = '1';
			}
			else
			{
				$luftrohre = '0';
			}
			if(in_array('4', $kunstliche))
			{
				$ablaufsonde = '1';
			}
			else
			{
				$ablaufsonde = '0';
			}
			if(in_array('5', $kunstliche))
			{
				$this->view->stam_kunstliche = '1';
			}
			else
			{
				$this->view->stam_kunstliche = '0';
			}

			$this->view->stam_kunstlichemore = $weit[0]['kunstlichemore'];
			$this->view->stam_darm = $darm;
			$this->view->stam_blase = $blase;
			$this->view->stam_luftrohre = $luftrohre;
			$this->view->stam_ablaufsonde = $ablaufsonde;

			/* ---------------------------Get patient Symptomatology-------------------------- */
			$symp = new Symptomatology();
			$symptomarr_ext = $symp->getPatientSymptpomatologyLast($ipid);
			$sympval = new SymptomatologyValues();
			//HOPE set
			$set_details = $sympval->getSymptpomatologyValues(1);

			//cycle the whole set
			foreach($set_details as $key => $sym)
			{
				$novalue = 1;
				//check for existing values
				if(!empty($symptomarr_ext))
				{
					foreach($symptomarr_ext as $extsym)
					{
						if($extsym['symptomid'] == $sym['id'])
						{ //grab values for current symptom
							$symptomarr[$key] = $extsym;
							$symptomarr[$key]['sym_desc_array'] = $extsym['sym_description'];
							$symptomarr[$key]['sym_description'] = utf8_encode($extsym['sym_description']['value']);
							$novalue = 0;
							break;
						}
					}
				}
				if($novalue == 1)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
					$symptomarr[$key]['sym_desc_array'] = null;
				}
			}
			$this->view->symptomarr = $symptomarr;

			/* ---------------------------Get Client details --  address-------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$client_address = $clientdata[0]['street1'] . ',' . $clientdata[0]['postcode'] . ',' . $clientdata[0]['city'];

			/* ---------------------------Get User details --  address-------------------------- */
			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$user_address = $userdata[0]['street1'] . ',' . $userdata[0]['zip'] . ',' . $userdata[0]['city'];

			if($userdata[0]['km_calculation_settings'] == "user")
			{
				$s = $user_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "client")
			{
				$s = $client_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "disabled")
			{
				$s = "";
			}

			$ploc = new PatientLocation();
			$plocarray = $ploc->getActiveLocationPatInfo($ipid);

			//if at home grab address from patient details
			if(empty($plocarray) || $plocarray[0]['location_type'] == '5')
			{
// 				$plocarray[0] = $patientmaster->getMasterData($decid, 0);
				$plocarray[0] = $patientmaster->get_patientMasterData();
				$plocarray[0]['street'] = $plocarray[0]['street1'];
			}
			$f = $plocarray[0]['street'] . ',' . $plocarray[0]['zip'] . ',' . $plocarray[0]['city'];


			if(strlen($f) > 2 && strlen($s) > 2)
			{
				$route = Pms_CommonData::getRouteLength($s, $f);
				$this->view->fahrtstreke_km = $route['length'];
				$this->view->fahrtzeit_min = $route['duration'];
				
				// TODO-1211
				$route_error = 0 ;
				if(empty($route['duration']) && $route['duration'] !== false ){
					$route_error = 1 ;
				}
				$this->view->route_error = $route_error;
			}
			/* ---------------------------Get Client details --  symptomatology view options-------------------------- */
			// n-> NUmbers Scale(0-10);  a -> Attributes scale (none/weak/averge/strong)
			$this->view->sympt_view_select = $clientdata[0]['symptomatology_scale'];
			/* --------------------------------------------------------------------------------------------------------- */

			//medication edit procedure start
			if($this->getRequest()->isPost() && empty($_POST['pdfexport']))
			{
			    if($acknowledge =="1")
			    {
			        $_POST['skip_trigger'] = "1";
			    }
			    
				$patient_medication_form = new Application_Form_Medication();
				$a_post = $_POST;
				for($i = 1; $i <= count($_POST['medication']); $i++)
				{
					if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
					{
						$a_post['newmids'][$i] = $_POST['drid'][$i];
						$a_post['newmedication'][$i] = $_POST['medication'][$i];
					}
				}


				if(is_array($a_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($a_post);

					foreach($dts as $key => $dt)
					{
						$a_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form = new Application_Form_PatientDrugPlan();
				$med_form->UpdateMultiData($a_post);
				//medication edit procedure end
				// medication add procedure start
				$add_post = $_POST['add'];
				$add_post['ipid'] = $ipid;
				$add_post['isbedarfs'] = 0;

				foreach($add_post['medication'] as $key => $val)
				{
					if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
					{
						$add_post['newmedication'][$key] = $add_post['medication'][$key];
					}
				}

				if(is_array($add_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($add_post);

					foreach($dts as $key => $dt)
					{
						$add_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form->InsertMultiData($add_post);

				if(count($_POST['addbedarf']) > 0)
				{
					$med_form = new Application_Form_PatientDrugPlan();
					$patient_medication_form = new Application_Form_Medication();

					$add_post = $_POST['addbedarf'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 1;

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}


					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);

						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					$med_form->InsertMultiData($add_post);
				}
			}
			//medication add procedure start
			//medis edit grid procedure start
			if(strlen($_REQUEST['mid']) > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $userid, 'candelete');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				if($_GET['act'] == "del")
				{
					//delete medication
					$mid = $_GET['mid'];
					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
					$mod->isdelete = 1;
					$mod->save();
					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
				}
			}

			$pq = new User();
			$pqarr = $pq->getUserByClientid($clientid);
			$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);

			$this->view->kvnodelicon = "1";

			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));

			$users = $pq->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;
			$this->view->jsusers = json_encode($users);

			//get all client users -> For medis dropdown
			$allUserArray = $pq->getUserByClientid($clientid);
			$userarraylastall[] = $this->view->translate('selectuser');
			foreach($allUserArray as $user)
			{
				$userarraylastall[$user['id']] = trim($user['user_title']) . " " .trim($user['last_name']) . ", " . trim($user['first_name']);
			}
			$this->view->allUsers = $userarraylastall;

			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";

			#######################################
			$medic = new PatientDrugPlan();

			// get bedarf medication
			$medicarr = $medic->getbedarfMedication($decid);

			$medication_master_ids['bedarf'][] = "XXXXXX";
			foreach($medicarr as $k_medicarr => $v_medicarr)
			{
				$medication_master_ids['bedarf'][] = $v_medicarr['medication_master_id'];
			}

			// get active medication
			$medicarr1 = $medic->getMedicationPlan($decid);

			$medication_master_ids['active'][] = "XXXXXX";
			foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
			{
				$medication_master_ids['active'][] = $v_medicarr1['medication_master_id'];
			}


			// get deleted medication
			$medicarr2 = $medic->getDeletedMedication($decid);

			$medication_master_ids['deleted'][] = "XXXXXX";
			foreach($medicarr2 as $k_medicarr2 => $v_medicarr2)
			{
				$medication_master_ids['deleted'][] = $v_medicarr2['medication_master_id'];
			}

			// get master medication data
			$medication_master_ids = array_merge($medication_master_ids['bedarf'], $medication_master_ids['active'], $medication_master_ids['deleted']);

			$med = new Medication();
			$medarr1 = $med->getMedicationById($medication_master_ids);

			foreach($medarr1 as $k_medarr1 => $v_medarr1)
			{
				$medication_master_array[$v_medarr1['id']] = $v_medarr1;
			}

			// display active medication
			if(count($medicarr1 < 1))
			{
				$this->view->mcntr = 0;
			}

			if($this->getRequest()->isPost() && strlen($_POST['pdfexport']) > 0)
			{
				$medicarr1 = Pms_CommonData::clear_pdf_data($medicarr1);
				$grid_pdf = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->medications_pdf = $grid_pdf->renderGrid();
			}


			
			$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->medications = $grid->renderGrid();

			// count medication
			$this->view->ajx = 1;
			$this->view->cntr = count($medicarr1);

			// discplay deleted medication
			$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "listdelpatientmedication_ajax.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->delmedications = $grid->renderGrid();


			// count medication
			$this->view->counter = count($medicarr1) + count($medicarr2);

			// display bedarf medication
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationbedarfsedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->bedarfsmedications = $grid->renderGrid();

			if($this->getRequest()->isPost() && strlen($_POST['pdfexport']) > 0)
			{
				$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
				$grid_pdf = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->bedarfsmedications_pdf = $grid_pdf->renderGrid();
			}
			#######################################################
			//medis edit grid procedure end
			//medis edit grid procedure end
			//medis add grid procedure start
			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$MasterGroups = array("4", "5", "6");
			$usersgroups = $usergroup->getUserGroups($MasterGroups);

			if(count($usersgroups) > 0)
			{
				foreach($usersgroups as $group)
				{
					if($group['groupmaster'] == 4)
					{
						$groupsDocArray[] = $group['id'];
					}
					else
					{
						$groupsarray[] = $group['id'];
					}
				}
			}

			$usersPflegeKoordArray = $pq->getuserbyGroupId($groupsarray, $clientid);
			$pflegeKoords['0'] = "Select User";

			foreach($usersPflegeKoordArray as $user)
			{
				$pflegeKoords[$user['id']] = $user['user_title'] . " " . $user['last_name'] . ", " . $user['first_name'];
			}

			$this->view->pfleges = $pflegeKoords;

			$usersDoctorsArray = $pq->getuserbyGroupId($groupsDocArray, $clientid, true);
			$doctors['0'] = "Auswahl";
			foreach($usersDoctorsArray as $doctor)
			{
				$doctors[$doctor['id']] = $doctor['user_title'] . " " . $doctor['last_name'] . ", " . $doctor['first_name'];
			}
			$this->view->doctors = $doctors;

			$doctors['-1'] = "Anderer Arzt";
			$doctors['-2'] = "Hausarzt";
			$this->view->users = $doctors;

			$a_medic = array();
			if(is_array($_POST['hidd_medication']))
			{
				foreach($_POST['hidd_medication'] as $key => $val)
				{
					$a_medic[$key]['medication'] = $_POST['medication'][$key];
					$a_medic[$key]['hidd_medication'] = $_POST['hidd_medication'][$key];
				}
			}
			else
			{
				for($i = 0; $i < 6; $i++)
				{
					$a_medic[$i] = array('cnt' => $i);
				}
			}

			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 9999, "listpatientmedicationadd.html");
			$this->view->medicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//medis add grid procedure end
			//bedarf medis add start
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 99999, "listpatientbedarfmedicationadd.html");
			$this->view->bedarfmedicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//bedarf medis add end

			if($this->getRequest()->isPost())
			{
				/* ---------------------------SAVE - ADD VISIT -------------------------- */
				if(empty($_POST['pdfexport']) && strlen($_REQUEST['bayern_doc_id']) == 0)
				{
					$sanfr = new Application_Form_BayernDoctorVisit();
					
					if($sanfr->validate($_POST))
					{
						$result = $sanfr->insertBayernDoctorVisit($_POST);
						
						if($_POST['go_to_letter'] == '1')
						{
							$this->_redirect(APP_BASE . "patient/doctorletteradd?type=26&id=" . $_GET['id'] . "&visit_id=" . $result . "&visit_type=bayern_doctor_visit");
							exit;
						}
						else
						{
							if($_POST['create_letter'] == '1')
							{
								$this->generate_receipt($clientid, $userid, $ipid, $epid, $patientarr, '31');
							}

							if($result)
							{
								$this->view->error_message = $this->view->translate('recordinsertsucessfully');
							}

							$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
						}
					}
					else
					{
						$sanfr->assignErrorMessages();
						$this->retainValues($_POST);
					}
				}

				/* -------------------------------  PDF EXPORT -------------------------- */
				if(strlen($_POST['pdfexport']) > 0)
				{
					$post = $_POST;
					$post['stam_dk'] = $this->view->stam_dk;
					$post['stam_peg'] = $this->view->stam_peg;
					$post['stam_port'] = $this->view->stam_port;
					$post['stam_pumps'] = $this->view->stam_pumps;
					$post['stam_kunstliche'] = $this->view->stam_kunstliche;
					$post['stam_kunstlichemore'] = $this->view->stam_kunstlichemore;
					$post['stam_darm'] = $this->view->stam_darm;
					$post['stam_blase'] = $this->view->stam_blase;
					$post['stam_luftrohre'] = $this->view->stam_luftrohre;
					$post['stam_ablaufsonde'] = $this->view->stam_ablaufsonde;
					$post['bayern_port'] = $post['port'];
					$post['bayern_peg'] = $post['peg'];
					$post['bayern_pumps'] = $post['pumps'];
					$post['bayern_dk'] = $post['dk'];
					$post['medications'] = $this->view->medications_pdf;
					$post['bedarfmedications'] = $this->view->bedarfsmedications_pdf;
                    $post['crisismedications'] = $this->view->crisismedications_pdf;

					if(strlen($_REQUEST['bayern_doc_id']) == 0)
					{
						$post['symptom'] = $post['symptom'];
					}
					else
					{
						foreach($post['checkbox'] as $key => $value)
						{
							$post['symptom'] = $value;
						}
					}

					$post['sympt_view_select'] = $this->view->sympt_view_select;
					$this->generateformPdf(3, $post, 'Bayern_visit', "bayern_doctorvisitpdf.html");
				}
			}

			/* ---------------------------GET VISIT DETAILS -------------------------- */
			if(strlen($_REQUEST['bayern_doc_id']) > 0)
			{
				$sp = Doctrine_Query::create()
					->select('*')
					->from('Sapsymptom')
// 					->where("ipid='" . Pms_CommonData::getIpid($decid) . "'")
					->where("ipid='" . $ipid . "'")
					->andwhere('visit_id = ?', $_REQUEST['bayern_doc_id'])
					->andwhere('visit_type = "bayern"')
					->andWhere('isdelete = 0')
					->orderBy('create_date ASC');
				$sparr = $sp->fetchArray();

				$this->view->sparr = $sparr;

				if(is_array($sparr) && sizeof($sparr) > 0)
				{
					foreach($sparr as $sap)
					{
						$sapvalarr = split(",", $sap['sapvalues']);
						$sapv_id = $sap['id'];
					}
				}

				$this->view->sapvalarr = $sapvalarr;
				$this->view->sapv_id = $sapv_id;

				$stamq = Doctrine_Core::getTable('BayernDoctorVisit')->findBy('id', $_REQUEST['bayern_doc_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}
				$this->view->bayern_doc_id = $_REQUEST['bayern_doc_id'];

				if(count($stamqarr) > 0)
				{
					if($stamqarr[0]['begin_date_h'] != "0" || $stamqarr[0]['begin_date_m'] != "0")
					{
						$this->view->begin_date_h = $stamqarr[0]['begin_date_h'];
						$this->view->begin_date_m = $stamqarr[0]['begin_date_m'];
					}
					else
					{
						$this->view->begin_date_h = date('H', strtotime('-5 minutes'));
						$this->view->begin_date_m = date('i', strtotime('-5 minutes'));
					}

					if($stamqarr[0]['end_date_h'] != "0" || $stamqarr[0]['end_date_m'] != "0")
					{
						$this->view->end_date_h = $stamqarr[0]['end_date_h'];
						$this->view->end_date_m = $stamqarr[0]['end_date_m'];
					}
					else
					{
						$this->view->end_date_h = date('H', strtotime('+10 minutes'));
						$this->view->end_date_m = date('i', strtotime('+10 minutes'));
					}

					$this->view->documantation_time = $stamqarr[0]['documantation_time'];
					$this->view->fahrtzeit = $stamqarr[0]['fahrtzeit'];
					$this->view->visit_date = date('d.m.Y', strtotime($stamqarr[0]['visit_date']));

					/* ---------------------- Calculate duration of visit ------------------------- */
					$the_visit_date = date('d.m.Y', strtotime($stamqarr[0]['visit_date']));
					$vizit_date_arr = explode(".", $the_visit_date);
					$start_date = mktime($stamqarr[0]['begin_date_h'], $stamqarr[0]['begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
					$end_date = mktime($stamqarr[0]['end_date_h'], ($stamqarr[0]['end_date_m']), 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);

					$target['start'] = date('Y-m-d H:i:s', $start_date);
					$target['end'] = date('Y-m-d H:i:s', $end_date);

					$to_time = strtotime($target['end']);
					$from_time = strtotime($target['start']);
					$total_visit_duration = round(abs($to_time - $from_time) / 60, 2);
					if(!empty($total_visit_duration))
					{
						$this->view->visit_duration = $total_visit_duration;
					}
					else
					{
						$this->view->visit_duration = 0;
					}
					/* ---------------------------------------------------------------------------- */

					$this->view->fahrtstreke_km = $stamqarr[0]['fahrtstreke_km'];
					$this->view->port = $stamqarr[0]['port'];
					$this->view->port_text = $stamqarr[0]['port_text'];
					$this->view->peg = $stamqarr[0]['peg'];
					$this->view->peg_text = $stamqarr[0]['peg_text'];
					$this->view->pumps = $stamqarr[0]['pumps'];
					$this->view->pumps_text = $stamqarr[0]['pumps_text'];
					$this->view->dk = $stamqarr[0]['dk'];
					$this->view->dk_text = $stamqarr[0]['dk_text'];
					$this->view->kunstliche = $stamqarr[0]['kunstliche'];
					$this->view->kunstliche_text = $stamqarr[0]['kunstliche_text'];
					$this->view->darm = $stamqarr[0]['darm'];
					$this->view->darm_text = $stamqarr[0]['darm_text'];
					$this->view->blase = $stamqarr[0]['blase'];
					$this->view->blase_text = $stamqarr[0]['blase_text'];
					$this->view->luftrohre = $stamqarr[0]['luftrohre'];
					$this->view->luftrohre_text = $stamqarr[0]['luftrohre_text'];
					$this->view->ablaufsonde = $stamqarr[0]['ablaufsonde'];
					$this->view->ablaufsonde_text = $stamqarr[0]['ablaufsonde_text'];
					$this->view->kopf = $stamqarr[0]['kopf'];
					$this->view->kopf_text = $stamqarr[0]['kopf_text'];
					$this->view->thorax = $stamqarr[0]['thorax'];
					$this->view->thorax_text = $stamqarr[0]['thorax_text'];
					$this->view->abdomen = $stamqarr[0]['abdomen'];
					$this->view->abdomen_text = $stamqarr[0]['abdomen_text'];
					$this->view->extremitaten = $stamqarr[0]['extremitaten'];
					$this->view->extremitaten_text = $stamqarr[0]['extremitaten_text'];
					$this->view->haut_wunden = $stamqarr[0]['haut_wunden'];
					$this->view->haut_wunden_text = $stamqarr[0]['haut_wunden_text'];
					$this->view->neurologisch_psychiatrisch = $stamqarr[0]['neurologisch_psychiatrisch'];
					$this->view->neurologisch_psychiatrisch_text = $stamqarr[0]['neurologisch_psychiatrisch_text'];
					$ecog = explode(",", $stamqarr[0]['ecog']);
					$this->view->ecog = $ecog;
					$this->view->sonstiges = $stamqarr[0]['sonstiges'];
					$this->view->comment_apotheke = $stamqarr[0]['comment_apotheke'];
					$this->view->case_history = $stamqarr[0]['case_history'];
					$this->view->conversation_phonecall = $stamqarr[0]['conversation_phonecall'];
					$global = explode(",", $stamqarr[0]['global']);
					$this->view->global = $global;
					$this->view->medizini_a = $stamqarr[0]['medizini_a'];
					$medizini_b = explode(",", $stamqarr[0]['medizini_b']);
					$this->view->medizini_b = $medizini_b;
					$this->view->related_users = $stamqarr[0]['related_users'];

					$sympval = new SymptomatologyValues();
					$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set

					$form_symp = new BayernDoctorSymp();
					$form_symps = $form_symp->getBayernDoctorSymp($_REQUEST['bayern_doc_id'], $ipid);

					foreach($set_details as $key => $sym)
					{
						$newsymptomarr[$key] = $sym;
						$newsymptomarr[$key]['symptomid'] = $sym['id'];
						$newsymptomarr[$key]['entered_value'] = $form_symps[$sym['id']]['current_value'];
						$newsymptomarr[$key]['input_value'] = $form_symps[$sym['id']]['last_value'];
						$newsymptomarr[$key]['comment'] = $form_symps[$sym['id']]['comment'];
					}
					$this->view->symptomarr = $newsymptomarr;
				}
				else
				{

				}
				/* ---------------------------SAVE - EDIT VISIT -------------------------- */
				if($this->getRequest()->isPost())
				{

					if(empty($_POST['pdfexport']))
					{
					   // print_r($_POST); exit;
					    
						if(is_array($_POST['checkbox']))
						{
							foreach($_POST['checkbox'] as $key => $val)
							{
								$the_visit_date = explode(".", $_POST['visit_date']);
								$begin_date_h = $_POST['begin_date_h'];
								$begin_date_m = $_POST['begin_date_m'];

								$sp = Doctrine::getTable('Sapsymptom')->find($key);

								if(is_array($val))
								{
									$sp->sapvalues = join(",", $val);
								}
								else
								{
									$sp->sapvalues = "";
								}

								$sp->gesamt_zeit_in_minuten = trim($_POST['total_visit_duration']); // the documentation it is auto added from form
								$fahrtstreke_km = trim(str_replace(" km", "", $_POST['fahrtstreke_km']));
								if(!empty($_POST['fahrtstreke_km']))
								{
									$gesamt_fahrstrecke_in_km = $fahrtstreke_km * 2;
								}
								else
								{
									$gesamt_fahrstrecke_in_km = '';
								}
								$sp->gesamt_fahrstrecke_in_km = $gesamt_fahrstrecke_in_km;
								if($_POST['fahrtzeit'] != '--')
								{
									$davon_fahrtzeit = $_POST['fahrtzeit'] * 2;
								}
								else
								{
									$davon_fahrtzeit = '';
								}
								$sp->davon_fahrtzeit = $davon_fahrtzeit;
								$sp->create_date = $the_visit_date[2] . "-" . $the_visit_date[1] . "-" . $the_visit_date[0] . ' ' . $begin_date_h . ':' . $begin_date_m . ":00";
								$sp->save();

								if(is_array($_POST['upcomments'][$key]))
								{
									foreach($_POST['upcomments'][$key] as $keyid => $valk)
									{
										$cust = new PatientCourse();
										$cust->ipid = $ipid;
										$cust->course_date = date("Y-m-d H:i:s", time());
										$cust->course_type = Pms_CommonData::aesEncrypt("E");
										$cust->course_title = Pms_CommonData::aesEncrypt("Ein bestehender LE Eintrag vom " . date("d.m.Y H:i:s", time()) . " wurde von " . $unamecd . " editiert " . $valk);
										$cust->user_id = $userid;
										$cust->save();
									}
								}
							}
						}
						else
						{
							$visit_id = $_REQUEST['bayern_doc_id'];
							if(!empty($_POST['hdnsapid']))
							{
								$the_visit_date = explode(".", $_POST['visit_date']);
								$begin_date_h = $_POST['begin_date_h'];
								$begin_date_m = $_POST['begin_date_m'];

								$stamq = Doctrine_Core::getTable('Sapsymptom')->find($_POST['hdnsapid']);
								$stamq->gesamt_zeit_in_minuten = trim($_POST['total_visit_duration']);
								$fahrtstreke_km = trim(str_replace(" km", "", $_POST['fahrtstreke_km']));

								if(!empty($_POST['fahrtstreke_km']))
								{
									$gesamt_fahrstrecke_in_km = $fahrtstreke_km * 2;
								}
								else
								{
									$gesamt_fahrstrecke_in_km = '';
								}

								$stamq->gesamt_fahrstrecke_in_km = $gesamt_fahrstrecke_in_km;

								if($_POST['fahrtzeit'] != '--')
								{
									$davon_fahrtzeit = $_POST['fahrtzeit'] * 2;
								}
								else
								{
									$davon_fahrtzeit = '';
								}

								$stamq->davon_fahrtzeit = $davon_fahrtzeit;
								$stamq->create_date = $the_visit_date[2] . "-" . $the_visit_date[1] . "-" . $the_visit_date[0] . ' ' . $begin_date_h . ':' . $begin_date_m . ":00";
								$stamq->save();
							}
						}

						$visit_form_id = $_REQUEST['bayern_doc_id'];
						$visit_form_type = 'bayern_doctor_visit';
						$new_visit_form_data = $_POST;

						$this->visitform_changes($ipid, $visit_form_id, $visit_form_type, $new_visit_form_data);
						$this->symptomatology_changes($ipid, $visit_form_id, $new_visit_form_data);

						$sanfr = new Application_Form_BayernDoctorVisit();
						$result = $sanfr->UpdateBayernDoctorVisit($_POST);

						if($_POST['go_to_letter'] == '1')
						{
							$this->_redirect(APP_BASE . "patient/doctorletteradd?type=26&id=" . $_GET['id'] . "&visit_id=" . $visit_form_id . "&visit_type=bayern_doctor_visit");
							exit;
						}
						else
						{
							if($_POST['create_letter'] == '1')
							{
								$this->generate_receipt($clientid, $userid, $ipid, $epid, $patientarr, '31');
							}

							if($result)
							{
								$this->view->error_message = $this->view->translate('recordinsertsucessfully');
							}
							$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
						}
					}
				}
			}
		}

		public function kvnodoctorformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge
			{
			    $acknowledge = "1";
			    $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			    $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */

			/* ------------------------ NO LEVERKUSEN VISIT------------------------------------- */
			$this->view->leverkusen_visit = '0';
			$this->view->wlform = '1';

			/* -------------------Patient Data--------------------------------------- */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->phone = $patientarr['phone'];
			$this->view->epid = strtoupper($epid);

			/* ---------------------------Set default date for visit-------------------------- */
			$this->view->kvno_begin_date_h = date('H', strtotime('-5 minutes'));
			$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
			$this->view->kvno_end_date_h = date('H', strtotime('+10 minutes'));
			$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
			$this->view->vizit_date = date('d.m.Y');

			/* ---------------------------Get patient details from Stammdaten -------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];

			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);
			$kunstliche = explode(",", $weit[0]['kunstliche']);

			if(in_array('1', $kunstliche))
			{
				$darm = '1';
			}
			else
			{
				$darm = '0';
			}

			if(in_array('2', $kunstliche))
			{
				$blase = '1';
			}
			else
			{
				$blase = '0';
			}

			if(in_array('3', $kunstliche))
			{
				$luftrohre = '1';
			}
			else
			{
				$luftrohre = '0';
			}

			if(in_array('4', $kunstliche))
			{
				$ablaufsonde = '1';
			}
			else
			{
				$ablaufsonde = '0';
			}

			if(in_array('5', $kunstliche))
			{
				$this->view->kunstliche = '5';
			}

			$this->view->kunstlichemore = $weit[0]['kunstlichemore'];
			$this->view->darm = $darm;
			$this->view->blase = $blase;
			$this->view->luftrohre = $luftrohre;
			$this->view->ablaufsonde = $ablaufsonde;

			/* ---------------------------Get patient Symptomatology-------------------------- */
			$symp = new Symptomatology();
			$symptomarr_ext = $symp->getPatientSymptpomatologyLast($ipid);
			$sympval = new SymptomatologyValues();
			$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set
			foreach($set_details as $key => $sym)
			{
				//cycle the whole set
				$novalue = 1;
				if(!empty($symptomarr_ext))
				{
					//check for existing values
					foreach($symptomarr_ext as $extsym)
					{
						if($extsym['symptomid'] == $sym['id'])
						{
							//grab values for current symptom
							$symptomarr[$key] = $extsym;
							$symptomarr[$key]['sym_desc_array'] = $extsym['sym_description'];
							$symptomarr[$key]['sym_description'] = utf8_encode($extsym['sym_description']['value']);
							$novalue = 0;
							break;
						}
					}
				}

				if($novalue == 1)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
					$symptomarr[$key]['sym_desc_array'] = null;
				}
			}
			$this->view->symptomarr = $symptomarr;

			/* ---------------------------Get Client details --  address-------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$client_address = $clientdata[0]['street1'] . ',' . $clientdata[0]['postcode'] . ',' . $clientdata[0]['city'];

			/* ---------------------------Get User details --  address-------------------------- */
			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$user_address = $userdata[0]['street1'] . ',' . $userdata[0]['zip'] . ',' . $userdata[0]['city'];


			if($userdata[0]['km_calculation_settings'] == "user")
			{
				$s = $user_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "client")
			{
				$s = $client_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "disabled")
			{
				$s = "";
			}

			$ploc = new PatientLocation();
			$plocarray = $ploc->getActiveLocationPatInfo($ipid);

			if(empty($plocarray) || $plocarray[0]['location_type'] == '5')
			{
				//if at home grab address from patient details
// 				$plocarray[0] = $patientmaster->getMasterData($decid, 0);
				$plocarray[0] = $patientmaster->get_patientMasterData();
				$plocarray[0]['street'] = $plocarray[0]['street1'];
			}
			$f = $plocarray[0]['street'] . ',' . $plocarray[0]['zip'] . ',' . $plocarray[0]['city'];

			if(strlen($f) > 2 && strlen($s) > 2)
			{
				$route = Pms_CommonData::getRouteLength($s, $f);
				$this->view->fahrtstreke_km = $route['length'];
				$this->view->fahrtzeit_min = $route['duration'];
				
				// TODO-1211
				$route_error = 0 ;
				if(empty($route['duration']) && $route['duration'] !== false ){
					$route_error = 1 ;
				}
				$this->view->route_error = $route_error;
			}
			/* ---------------------------Get Client details --  symptomatology view options-------------------------- */
			// n-> NUmbers Scale(0-10);  a -> Attributes scale (none/weak/averge/strong)
			$this->view->sympt_view_select = $clientdata[0]['symptomatology_scale'];
			/* --------------------------------------------------------------------------------------------------------- */

			//medication edit procedure start
			if($this->getRequest()->isPost() && empty($_POST['pdfexport']))
			{
				$patient_medication_form = new Application_Form_Medication();

				if($acknowledge == "1" )
				{
					$_POST['skip_trigger'] = 1;
				}
				
				$a_post = $_POST;
				for($i = 1; $i <= count($_POST['medication']); $i++)
				{
					if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
					{

						$a_post['newmids'][$i] = $_POST['drid'][$i];
						$a_post['newmedication'][$i] = $_POST['medication'][$i];
					}
				}

				if(is_array($a_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($a_post);

					foreach($dts as $key => $dt)
					{
						$a_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form = new Application_Form_PatientDrugPlan();
				$med_form->UpdateMultiData($a_post);
				//medication edit procedure end
				// medication add procedure start
				$add_post = $_POST['add'];
				$add_post['ipid'] = $ipid;
				$add_post['isbedarfs'] = 0;

				foreach($add_post['medication'] as $key => $val)
				{
					if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
					{
						$add_post['newmedication'][$key] = $add_post['medication'][$key];
					}
				}

				if(is_array($add_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($add_post);

					foreach($dts as $key => $dt)
					{
						$add_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form->InsertMultiData($add_post);

				if(count($_POST['addbedarf']) > 0)
				{
					$med_form = new Application_Form_PatientDrugPlan();
					$patient_medication_form = new Application_Form_Medication();

					$add_post = $_POST['addbedarf'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 1;

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}

					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);

						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					$med_form->InsertMultiData($add_post);
				}
			}
			//medication add procedure start
			//medis edit grid procedure start
			if(strlen($_REQUEST['mid']) > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $userid, 'candelete');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				if($_GET['act'] == "del")
				{
					//delete medication
					$mid = $_GET['mid'];
					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
					$mod->isdelete = 1;
					$mod->save();
					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
				}
			}

			$pq = new User();
			$pqarr = $pq->getUserByClientid($clientid);
			$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);
			$this->view->kvnodelicon = "1";

			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));

			$users = $pq->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;
			$this->view->jsusers = json_encode($users);

			//get all client users -> For medis dropdown
			$allUserArray = $pq->getUserByClientid($clientid);
			$userarraylastall[] = $this->view->translate('selectuser');
			foreach($allUserArray as $user)
			{
				$userarraylastall[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . " " . trim($user['first_name']);
			}
			$this->view->allUsers = $userarraylastall;
			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";

			#######################################
			$medic = new PatientDrugPlan();

			// get bedarf medication
			$medicarr = $medic->getbedarfMedication($decid);

			$medication_master_ids['bedarf'][] = "XXXXXX";
			foreach($medicarr as $k_medicarr => $v_medicarr)
			{
				$medication_master_ids['bedarf'][] = $v_medicarr['medication_master_id'];
			}

			// get active medication
			$medicarr1 = $medic->getMedicationPlan($decid);

			$medication_master_ids['active'][] = "XXXXXX";
			foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
			{
				$medication_master_ids['active'][] = $v_medicarr1['medication_master_id'];
			}


			// get deleted medication
			$medicarr2 = $medic->getDeletedMedication($decid);

			$medication_master_ids['deleted'][] = "XXXXXX";
			foreach($medicarr2 as $k_medicarr2 => $v_medicarr2)
			{
				$medication_master_ids['deleted'][] = $v_medicarr2['medication_master_id'];
			}

			// get master medication data
			$medication_master_ids = array_merge($medication_master_ids['bedarf'], $medication_master_ids['active'], $medication_master_ids['deleted']);

			$med = new Medication();
			$medarr1 = $med->getMedicationById($medication_master_ids);

			foreach($medarr1 as $k_medarr1 => $v_medarr1)
			{
				$medication_master_array[$v_medarr1['id']] = $v_medarr1;
			}

			// display active medication
			if(count($medicarr1 < 1))
			{
				$this->view->mcntr = 0;
			}


			
			if($this->getRequest()->isPost() && strlen($_POST['pdfexport']) > 0)
			{
				$medicarr1 = Pms_CommonData::clear_pdf_data($medicarr1);
				$grid_pdf = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->medications_pdf = $grid_pdf->renderGrid();
			}

			$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->medications = $grid->renderGrid();

			// count medication
			$this->view->ajx = 1;
			$this->view->cntr = count($medicarr1);

			// discplay deleted medication
			$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "listdelpatientmedication_ajax.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->delmedications = $grid->renderGrid();


			// count medication
			$this->view->counter = count($medicarr1) + count($medicarr2);

			// display bedarf medication
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationbedarfsedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->bedarfsmedications = $grid->renderGrid();

			if($this->getRequest()->isPost() && strlen($_POST['pdfexport']) > 0)
			{
				$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
				$grid_pdf = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->bedarfsmedications_pdf = $grid_pdf->renderGrid();
			}
			#######################################################
			//medis edit grid procedure end
			//medis add grid procedure start
			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$MasterGroups = array("4", "5", "6");
			$usersgroups = $usergroup->getUserGroups($MasterGroups);

			if(count($usersgroups) > 0)
			{
				foreach($usersgroups as $group)
				{
					if($group['groupmaster'] == 4)
					{
						$groupsDocArray[] = $group['id'];
					}
					else
					{
						$groupsarray[] = $group['id'];
					}
				}
			}

			$usersPflegeKoordArray = $pq->getuserbyGroupId($groupsarray, $clientid);
			$pflegeKoords['0'] = "Select User";

			foreach($usersPflegeKoordArray as $user)
			{
				$pflegeKoords[$user['id']] = $user['last_name'] . ", " . $user['first_name'];
			}

			$this->view->pfleges = $pflegeKoords;

			$usersDoctorsArray = $pq->getuserbyGroupId($groupsDocArray, $clientid, true);
			$doctors['0'] = "Auswahl";
			foreach($usersDoctorsArray as $doctor)
			{
				$doctors[$doctor['id']] = $doctor['user_title'] . " " .$doctor['last_name'] . ", " . $doctor['first_name'];
			}
			$this->view->doctors = $doctors;

			$doctors['-1'] = "Anderer Arzt";
			$doctors['-2'] = "Hausarzt";
			$this->view->users = $doctors;

			$a_medic = array();

			if(is_array($_POST['hidd_medication']))
			{
				foreach($_POST['hidd_medication'] as $key => $val)
				{
					$a_medic[$key]['medication'] = $_POST['medication'][$key];
					$a_medic[$key]['hidd_medication'] = $_POST['hidd_medication'][$key];
				}
			}
			else
			{
				for($i = 0; $i < 6; $i++)
				{
					$a_medic[$i] = array('cnt' => $i);
				}
			}

			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 9999, "listpatientmedicationadd.html");
			$this->view->medicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//medis add grid procedure end
			//bedarf medis add start
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 99999, "listpatientbedarfmedicationadd.html");
			$this->view->bedarfmedicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//bedarf medis add end

			if($this->getRequest()->isPost())
			{
				/* ---------------------------SAVE - ADD VISIT -------------------------- */
				if(empty($_POST['pdfexport']) && strlen($_REQUEST['kvno_doc_id']) == 0)
				{
					$sanfr = new Application_Form_KvnoDoctor();
					$result = $sanfr->insertKvnoDoctor($_POST);

					if($_POST['go_to_letter'] == '1')
					{
						$this->_redirect(APP_BASE . "patient/doctorletteradd?type=26&id=" . $_GET['id'] . "&visit_id=" . $result . "&visit_type=kvno_doctor_visit");
						exit;
					}
					else
					{

						if($_POST['create_letter'] == '1')
						{
							$this->generate_receipt($clientid, $userid, $ipid, $epid, $patientarr, '32');
						}

						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}

						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}

				/* -------------------------------  PDF EXPORT -------------------------- */
				if(strlen($_POST['pdfexport']) > 0)
				{
					$post = $_POST;
					$post['kunstliche'] = $this->view->kunstliche;
					$post['darm'] = $this->view->darm;
					$post['blase'] = $this->view->blase;
					$post['luftrohre'] = $this->view->luftrohre;
					$post['ablaufsonde'] = $this->view->ablaufsonde;
					$post['medications'] = $this->view->medications_pdf;
					$post['bedarfmedications'] = $this->view->bedarfsmedications_pdf;
					$post['sympt_view_select'] = $this->view->sympt_view_select;
					$this->generateformPdf(3, $post, 'KVNO_doctor', "kvno_doctorformpdf.html");
				}
			}

			/* ---------------------------GET VISIT DETAILS -------------------------- */
			if(strlen($_REQUEST['kvno_doc_id']) > 0)
			{
				$stamq = Doctrine_Core::getTable('KvnoDoctor')->findBy('id', $_REQUEST['kvno_doc_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}
				$this->view->kvno_doc_id = $_REQUEST['kvno_doc_id'];
				if(count($stamqarr) > 0)
				{
					if($stamqarr[0]['kvno_begin_date_h'] != "0" || $stamqarr[0]['kvno_begin_date_m'] != "0")
					{
						$this->view->kvno_begin_date_h = $stamqarr[0]['kvno_begin_date_h'];
						$this->view->kvno_begin_date_m = $stamqarr[0]['kvno_begin_date_m'];
					}
					else
					{
						$this->view->kvno_begin_date_h = date('H', strtotime('-5 minutes'));
						$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
					}

					if($stamqarr[0]['kvno_end_date_h'] != "0" || $stamqarr[0]['kvno_end_date_m'] != "0")
					{
						$this->view->kvno_end_date_h = $stamqarr[0]['kvno_end_date_h'];
						$this->view->kvno_end_date_m = $stamqarr[0]['kvno_end_date_m'];
					}
					else
					{
						$this->view->kvno_end_date_h = date('H', strtotime('+10 minutes'));
						$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
					}

					$this->view->quality = $stamqarr[0]['quality'];
					$this->view->fahrtzeit = $stamqarr[0]['fahrtzeit'];
					$this->view->vizit_date = date('d.m.Y', strtotime($stamqarr[0]['vizit_date']));
					$this->view->fahrtstreke_km = $stamqarr[0]['fahrtstreke_km'];
					$this->view->kvno_peg = $stamqarr[0]['kvno_peg'];
					$this->view->kvno_peg_text = $stamqarr[0]['kvno_peg_text'];
					$this->view->kvno_port = $stamqarr[0]['kvno_port'];
					$this->view->kvno_port_text = $stamqarr[0]['kvno_port_text'];
					$this->view->kvno_pumps = $stamqarr[0]['kvno_pumps'];
					$this->view->kvno_pumps_text = $stamqarr[0]['kvno_pumps_text'];
					$this->view->kvno_dk = $stamqarr[0]['kvno_dk'];
					$this->view->kvno_dk_text = $stamqarr[0]['kvno_dk_text'];
					$this->view->kvno_kunstliche = $stamqarr[0]['kvno_kunstliche'];
					$this->view->kvno_kunstliche_text = $stamqarr[0]['kvno_kunstliche_text'];
					$this->view->kvno_darm = $stamqarr[0]['kvno_darm'];
					$this->view->kvno_darm_text = $stamqarr[0]['kvno_darm_text'];
					$this->view->kvno_blase = $stamqarr[0]['kvno_blase'];
					$this->view->kvno_blase_text = $stamqarr[0]['kvno_blase_text'];
					$this->view->kvno_luftrohre = $stamqarr[0]['kvno_luftrohre'];
					$this->view->kvno_luftrohre_text = $stamqarr[0]['kvno_luftrohre_text'];
					$this->view->kvno_ablaufsonde = $stamqarr[0]['kvno_ablaufsonde'];
					$this->view->kvno_ablaufsonde_text = $stamqarr[0]['kvno_ablaufsonde_text'];
					$this->view->kopf = $stamqarr[0]['kopf'];
					$this->view->kopf_text = $stamqarr[0]['kopf_text'];
					$this->view->thorax = $stamqarr[0]['thorax'];
					$this->view->thorax_text = $stamqarr[0]['thorax_text'];
					$this->view->abdomen = $stamqarr[0]['abdomen'];
					$this->view->abdomen_text = $stamqarr[0]['abdomen_text'];
					$this->view->extremitaten = $stamqarr[0]['extremitaten'];
					$this->view->extremitaten_text = $stamqarr[0]['extremitaten_text'];
					$this->view->haut_wunden = $stamqarr[0]['haut_wunden'];
					$this->view->haut_wunden_text = $stamqarr[0]['haut_wunden_text'];
					$this->view->neurologisch_psychiatrisch = $stamqarr[0]['neurologisch_psychiatrisch'];
					$this->view->neurologisch_psychiatrisch_text = $stamqarr[0]['neurologisch_psychiatrisch_text'];
					$kvno_ecog = explode(",", $stamqarr[0]['kvno_ecog']);
					$this->view->kvno_ecog = $kvno_ecog;
					$this->view->kvno_fotodocumentation = $stamqarr[0]['kvno_fotodocumentation'];
					$this->view->kvno_sonstiges = $stamqarr[0]['kvno_sonstiges'];
					$this->view->comment_apotheke = $stamqarr[0]['comment_apotheke'];
					$this->view->care_instructions = $stamqarr[0]['care_instructions'];
					$kvno_global = explode(",", $stamqarr[0]['kvno_global']);
					$this->view->kvno_global = $kvno_global;
					$this->view->kvno_medizini_a = $stamqarr[0]['kvno_medizini_a'];
					$kvno_medizini_b = explode(",", $stamqarr[0]['kvno_medizini_b']);
					$this->view->kvno_medizini_b = $kvno_medizini_b;

					$sympval = new SymptomatologyValues();
					$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set

					$form_symp = new KvnoDoctorSymp();
					$form_symps = $form_symp->getKvnoDoctorSymp($_REQUEST['kvno_doc_id'], $ipid);

					foreach($set_details as $key => $sym)
					{
						$newsymptomarr[$key] = $sym;
						$newsymptomarr[$key]['symptomid'] = $sym['id'];
						$newsymptomarr[$key]['entered_value'] = $form_symps[$sym['id']]['current_value'];
						$newsymptomarr[$key]['input_value'] = $form_symps[$sym['id']]['last_value'];
						$newsymptomarr[$key]['comment'] = $form_symps[$sym['id']]['comment'];
					}
					$this->view->symptomarr = $newsymptomarr;
				}
				else
				{

				}

				/* ---------------------------SAVE - EDIT VISIT -------------------------- */
				if($this->getRequest()->isPost())
				{
					if(empty($_POST['pdfexport']))
					{
						$visit_form_id = $_REQUEST['kvno_doc_id'];
						$visit_form_type = 'kvno_doctor_visit';
						$new_visit_form_data = $_POST;

						$this->visitform_changes($ipid, $visit_form_id, $visit_form_type, $new_visit_form_data);
						$this->symptomatology_changes($ipid, $visit_form_id, $new_visit_form_data);

						$sanfr = new Application_Form_KvnoDoctor();
						$result = $sanfr->UpdateKvnoDoctor($_POST);

						if($_POST['go_to_letter'] == '1')
						{
							$this->_redirect(APP_BASE . "patient/doctorletteradd?type=26&id=" . $_GET['id'] . "&visit_id=" . $visit_form_id . "&visit_type=kvno_doctor_visit");
							exit;
						}
						else
						{
							if($_POST['create_letter'] == '1')
							{
								$this->generate_receipt($clientid, $userid, $ipid, $epid, $patientarr, '32');
							}

							if($result)
							{
								$this->view->error_message = $this->view->translate('recordinsertsucessfully');
							}
							$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
						}
					}
				}
			}
		}

		public function sakvnodoctorformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->wlform = '2';

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->phone = $patientarr['phone'];
			$this->view->epid = strtoupper($epid);

			/* -----------------------------Set default date for visit--------------------------------- */
			$this->view->kvno_begin_date_h = date('H', strtotime('-5 minutes'));
			$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
			$this->view->kvno_end_date_h = date('H', strtotime('+10 minutes'));
			$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
			$this->view->vizit_date = date('d.m.Y');

			/* ---------------------------Get patient details from Stammdaten -------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];

			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);
			$kunstliche = explode(",", $weit[0]['kunstliche']);

			if(in_array('1', $kunstliche))
			{
				$darm = '1';
			}
			else
			{
				$darm = '0';
			}

			if(in_array('2', $kunstliche))
			{
				$blase = '1';
			}
			else
			{
				$blase = '0';
			}

			if(in_array('3', $kunstliche))
			{
				$luftrohre = '1';
			}
			else
			{
				$luftrohre = '0';
			}

			if(in_array('4', $kunstliche))
			{
				$ablaufsonde = '1';
			}
			else
			{
				$ablaufsonde = '0';
			}

			if(in_array('5', $kunstliche))
			{
				$this->view->kunstliche = '5';
			}

			$this->view->kunstlichemore = $weit[0]['kunstlichemore'];
			$this->view->darm = $darm;
			$this->view->blase = $blase;
			$this->view->luftrohre = $luftrohre;
			$this->view->ablaufsonde = $ablaufsonde;

			/* ---------------------------Get patient Symptomatology -------------------------- */
			$symp = new Symptomatology();
			$symptomarr_ext = $symp->getPatientSymptpomatologyLast($ipid);
			$sympval = new SymptomatologyValues();
			$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set
			foreach($set_details as $key => $sym)
			{
//			cycle the whole set
				$novalue = 1;
				if(!empty($symptomarr_ext))
				{
//				check for existing values
					foreach($symptomarr_ext as $extsym)
					{
						if($extsym['symptomid'] == $sym['id'])
						{
//						grab values for current symptom
							$symptomarr[$key] = $extsym;
							$symptomarr[$key]['sym_desc_array'] = $extsym['sym_description'];
							$symptomarr[$key]['sym_description'] = utf8_encode($extsym['sym_description']['value']);
							$novalue = 0;
							break;
						}
					}
				}
				if($novalue == 1)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
					$symptomarr[$key]['sym_desc_array'] = null;
				}
			}
			$this->view->symptomarr = $symptomarr;

			/* ---------------------------Get Client details --  address -------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$client_address = $clientdata[0]['street1'] . ',' . $clientdata[0]['postcode'] . ',' . $clientdata[0]['city'];

			/* ---------------------------Get User details --  address-------------------------- */
			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$user_address = $userdata[0]['street1'] . ',' . $userdata[0]['zip'] . ',' . $userdata[0]['city'];

			if($userdata[0]['km_calculation_settings'] == "user")
			{
				$s = $user_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "client")
			{
				$s = $client_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "disabled")
			{
				$s = "";
			}

			$ploc = new PatientLocation();
			$plocarray = $ploc->getActiveLocationPatInfo($ipid);

			if(empty($plocarray) || $plocarray[0]['location_type'] == '5')
			{
//			if at home grab address from patient details
// 				$plocarray[0] = $patientmaster->getMasterData($decid, 0);
				$plocarray[0] = $patientmaster->get_patientMasterData();
				$plocarray[0]['street'] = $plocarray[0]['street1'];
			}
			$f = $plocarray[0]['street'] . ',' . $plocarray[0]['zip'] . ',' . $plocarray[0]['city'];

			if(strlen($f) > 2 && strlen($s) > 2)
			{
				$route = Pms_CommonData::getRouteLength($s, $f);
				$this->view->fahrtstreke_km = $route['length'];
				$this->view->fahrtzeit_min = $route['duration'];

				// TODO-1211
				$route_error = 0 ;
				if(empty($route['duration']) && $route['duration'] !== false ){
					$route_error = 1 ;
				}
				$this->view->route_error = $route_error;
			}
			/* ---------------------------Get Client details --  symptomatology view options-------------------------- */
			$this->view->sympt_view_select = $clientdata[0]['symptomatology_scale'];  // n-> NUmbers Scale(0-10);  a -> Attributes scale (none/weak/averge/strong)
			/* --------------------------------------------------------------------------------------------------------- */

			//medication edit procedure start
			if($this->getRequest()->isPost() && empty($_POST['pdfexport']))
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'canedit');
				$patient_medication_form = new Application_Form_Medication();

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$a_post = $_POST;
				for($i = 1; $i <= count($_POST['medication']); $i++)
				{
					if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
					{
						$a_post['newmids'][$i] = $_POST['drid'][$i];
						$a_post['newmedication'][$i] = $_POST['medication'][$i];
					}
				}

				if(is_array($a_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($a_post);

					foreach($dts as $key => $dt)
					{
						$a_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form = new Application_Form_PatientDrugPlan();
				$med_form->UpdateMultiData($a_post);
				//medication edit procedure end
				// medication add procedure start
				$add_post = $_POST['add'];
				$add_post['ipid'] = $ipid;
				$add_post['isbedarfs'] = 0;

				foreach($add_post['medication'] as $key => $val)
				{
					if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
					{
						$add_post['newmedication'][$key] = $add_post['medication'][$key];
					}
				}

				if(is_array($add_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($add_post);

					foreach($dts as $key => $dt)
					{
						$add_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form->InsertMultiData($add_post);

				if(count($_POST['addbedarf']) > 0)
				{
					$med_form = new Application_Form_PatientDrugPlan();
					$patient_medication_form = new Application_Form_Medication();

					$add_post = $_POST['addbedarf'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 1;

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}

					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);

						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					$med_form->InsertMultiData($add_post);
				}
			}
			//medication add procedure start
			//medis edit grid procedure start
			if(strlen($_REQUEST['mid']) > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $userid, 'candelete');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				if($_GET['act'] == "del")
				{
					//delete medication
					$mid = $_GET['mid'];
					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
					$mod->isdelete = 1;
					$mod->save();
					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
				}
			}

			$pq = new User();
			$pqarr = $pq->getUserByClientid($clientid);
			$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);
			$this->view->kvnodelicon = "1";

			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));

			$users = $pq->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;
			$this->view->jsusers = json_encode($users);

			//get all client users -> For medis dropdown
			$allUserArray = $pq->getUserByClientid($clientid);
			$userarraylastall[] = $this->view->translate('selectuser');
			foreach($allUserArray as $user)
			{
				$userarraylastall[$user['id']] = trim($user['last_name']) . " " . trim($user['first_name']);
			}

			$this->view->allUsers = $userarraylastall;

			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";

			#######################################
			$medic = new PatientDrugPlan();

			// get bedarf medication
			$medicarr = $medic->getbedarfMedication($decid);

			$medication_master_ids['bedarf'][] = "XXXXXX";
			foreach($medicarr as $k_medicarr => $v_medicarr)
			{
				$medication_master_ids['bedarf'][] = $v_medicarr['medication_master_id'];
			}

			// get active medication
			$medicarr1 = $medic->getMedicationPlan($decid);

			$medication_master_ids['active'][] = "XXXXXX";
			foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
			{
				$medication_master_ids['active'][] = $v_medicarr1['medication_master_id'];
			}


			// get deleted medication
			$medicarr2 = $medic->getDeletedMedication($decid);

			$medication_master_ids['deleted'][] = "XXXXXX";
			foreach($medicarr2 as $k_medicarr2 => $v_medicarr2)
			{
				$medication_master_ids['deleted'][] = $v_medicarr2['medication_master_id'];
			}

			// get master medication data
			$medication_master_ids = array_merge($medication_master_ids['bedarf'], $medication_master_ids['active'], $medication_master_ids['deleted']);

			$med = new Medication();
			$medarr1 = $med->getMedicationById($medication_master_ids);

			foreach($medarr1 as $k_medarr1 => $v_medarr1)
			{
				$medication_master_array[$v_medarr1['id']] = $v_medarr1;
			}

			// display active medication
			if(count($medicarr1 < 1))
			{
				$this->view->mcntr = 0;
			}

			if($this->getRequest()->isPost() && strlen($_POST['pdfexport']) > 0)
			{
				$medicarr1 = Pms_CommonData::clear_pdf_data($medicarr1);
				$grid_pdf = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->medications_pdf = $grid_pdf->renderGrid();
			}

			$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->medications = $grid->renderGrid();

			// count medication
			$this->view->ajx = 1;
			$this->view->cntr = count($medicarr1);

			// discplay deleted medication
			$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "listdelpatientmedication_ajax.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->delmedications = $grid->renderGrid();


			// count medication
			$this->view->counter = count($medicarr1) + count($medicarr2);

			// display bedarf medication
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationbedarfsedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->bedarfsmedications = $grid->renderGrid();

			if($this->getRequest()->isPost() && strlen($_POST['pdfexport']) > 0)
			{
				$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
				$grid_pdf = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->bedarfsmedications_pdf = $grid_pdf->renderGrid();
			}
			#######################################################
			//medis edit grid procedure end
			//medis edit grid procedure end
			//medis add grid procedure start
			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$MasterGroups = array("4", "5", "6");
			$usersgroups = $usergroup->getUserGroups($MasterGroups);

			if(count($usersgroups) > 0)
			{
				foreach($usersgroups as $group)
				{
					if($group['groupmaster'] == 4)
					{
						$groupsDocArray[] = $group['id'];
					}
					else
					{
						$groupsarray[] = $group['id'];
					}
				}
			}

			$usersPflegeKoordArray = $pq->getuserbyGroupId($groupsarray, $clientid);
			$pflegeKoords['0'] = "Select User";


			foreach($usersPflegeKoordArray as $user)
			{
				$pflegeKoords[$user['id']] = $user['last_name'] . ", " . $user['first_name'];
			}


			$this->view->pfleges = $pflegeKoords;

			$usersDoctorsArray = $pq->getuserbyGroupId($groupsDocArray, $clientid, true);
			$doctors['0'] = "Auswahl";
			foreach($usersDoctorsArray as $doctor)
			{
				$doctors[$doctor['id']] = $doctor['user_title'] . " " . $doctor['last_name'] . ", " . $doctor['first_name'];
			}
			$this->view->doctors = $doctors;

			$doctors['-1'] = "Anderer Arzt";
			$doctors['-2'] = "Hausarzt";
			$this->view->users = $doctors;

			$a_medic = array();
			if(is_array($_POST['hidd_medication']))
			{
				foreach($_POST['hidd_medication'] as $key => $val)
				{
					$a_medic[$key]['medication'] = $_POST['medication'][$key];
					$a_medic[$key]['hidd_medication'] = $_POST['hidd_medication'][$key];
				}
			}
			else
			{
				for($i = 0; $i < 6; $i++)
				{
					$a_medic[$i] = array('cnt' => $i);
				}
			}

			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 9999, "listpatientmedicationadd.html");
			$this->view->medicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//medis add grid procedure end
			//bedarf medis add start
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 99999, "listpatientbedarfmedicationadd.html");
			$this->view->bedarfmedicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//bedarf medis add end

			if($this->getRequest()->isPost())
			{
				/* ---------------------------SAVE - ADD VISIT -------------------------- */
				if(empty($_POST['pdfexport']) && strlen($_REQUEST['kvno_doc_id']) == 0)
				{
					$sanfr = new Application_Form_SAKvnoDoctor();
					$result = $sanfr->insertKvnoDoctor($_POST);

					if($_POST['go_to_letter'] == '1')
					{
						$this->_redirect(APP_BASE . "patient/doctorletteradd?type=26&id=" . $_GET['id'] . "&visit_id=" . $result . "&visit_type=sa_doctor_visit");
						exit;
					}
					else
					{
						if($_POST['create_letter'] == '1')
						{
							$this->generate_receipt($clientid, $userid, $ipid, $epid, $patientarr, '33');
						}

						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}

						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}

				/* --------------------------- PDF EXPORT  -------------------------- */
				if(strlen($_POST['pdfexport']) > 0)
				{
					$post = $_POST;
					$post['kunstliche'] = $this->view->kunstliche;
					$post['darm'] = $this->view->darm;
					$post['blase'] = $this->view->blase;
					$post['luftrohre'] = $this->view->luftrohre;
					$post['ablaufsonde'] = $this->view->ablaufsonde;
					$post['medications'] = $this->view->medications_pdf;
					$post['bedarfmedications'] = $this->view->bedarfsmedications_pdf;
					$post['sympt_view_select'] = $this->view->sympt_view_select;
					$this->generateformPdf(3, $post, 'SAKVNO_doctor', "sakvno_doctorformpdf.html");
				}
			}

			/* ---------------------------GET VISIT DETAILS -------------------------- */
			if(strlen($_REQUEST['kvno_doc_id']) > 0)
			{
				$stamq = Doctrine_Core::getTable('KvnoDoctor')->findBy('id', $_REQUEST['kvno_doc_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}
				$this->view->kvno_doc_id = $_REQUEST['kvno_doc_id'];

				if(count($stamqarr) > 0)
				{
					if($stamqarr[0]['kvno_begin_date_h'] != "0" || $stamqarr[0]['kvno_begin_date_m'] != "0")
					{
						$this->view->kvno_begin_date_h = $stamqarr[0]['kvno_begin_date_h'];
						$this->view->kvno_begin_date_m = $stamqarr[0]['kvno_begin_date_m'];
					}
					else
					{
						$this->view->kvno_begin_date_h = date('H', strtotime('-5 minutes'));
						$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
					}

					if($stamqarr[0]['kvno_end_date_h'] != "0" || $stamqarr[0]['kvno_end_date_m'] != "0")
					{
						$this->view->kvno_end_date_h = $stamqarr[0]['kvno_end_date_h'];
						$this->view->kvno_end_date_m = $stamqarr[0]['kvno_end_date_m'];
					}
					else
					{
						$this->view->kvno_end_date_h = date('H', strtotime('+10 minutes'));
						$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
					}
					$this->view->fahrtzeit = $stamqarr[0]['fahrtzeit'];
					$this->view->vizit_date = date('d.m.Y', strtotime($stamqarr[0]['vizit_date']));
					$this->view->fahrtstreke_km = $stamqarr[0]['fahrtstreke_km'];

					$this->view->kvno_peg = $stamqarr[0]['kvno_peg'];
					$this->view->kvno_peg_text = $stamqarr[0]['kvno_peg_text'];
					$this->view->kvno_port = $stamqarr[0]['kvno_port'];
					$this->view->kvno_port_text = $stamqarr[0]['kvno_port_text'];
					$this->view->kvno_pumps = $stamqarr[0]['kvno_pumps'];
					$this->view->kvno_pumps_text = $stamqarr[0]['kvno_pumps_text'];
					$this->view->kvno_dk = $stamqarr[0]['kvno_dk'];
					$this->view->kvno_dk_text = $stamqarr[0]['kvno_dk_text'];
					$this->view->kvno_kunstliche = $stamqarr[0]['kvno_kunstliche'];
					$this->view->kvno_kunstliche_text = $stamqarr[0]['kvno_kunstliche_text'];
					$this->view->kvno_darm = $stamqarr[0]['kvno_darm'];
					$this->view->kvno_darm_text = $stamqarr[0]['kvno_darm_text'];
					$this->view->kvno_blase = $stamqarr[0]['kvno_blase'];
					$this->view->kvno_blase_text = $stamqarr[0]['kvno_blase_text'];
					$this->view->kvno_luftrohre = $stamqarr[0]['kvno_luftrohre'];
					$this->view->kvno_luftrohre_text = $stamqarr[0]['kvno_luftrohre_text'];
					$this->view->kvno_ablaufsonde = $stamqarr[0]['kvno_ablaufsonde'];
					$this->view->kvno_ablaufsonde_text = $stamqarr[0]['kvno_ablaufsonde_text'];
					$this->view->kopf = $stamqarr[0]['kopf'];
					$this->view->kopf_text = $stamqarr[0]['kopf_text'];
					$this->view->thorax = $stamqarr[0]['thorax'];
					$this->view->thorax_text = $stamqarr[0]['thorax_text'];
					$this->view->abdomen = $stamqarr[0]['abdomen'];
					$this->view->abdomen_text = $stamqarr[0]['abdomen_text'];
					$this->view->extremitaten = $stamqarr[0]['extremitaten'];
					$this->view->extremitaten_text = $stamqarr[0]['extremitaten_text'];
					$this->view->haut_wunden = $stamqarr[0]['haut_wunden'];
					$this->view->haut_wunden_text = $stamqarr[0]['haut_wunden_text'];
					$this->view->neurologisch_psychiatrisch = $stamqarr[0]['neurologisch_psychiatrisch'];
					$this->view->neurologisch_psychiatrisch_text = $stamqarr[0]['neurologisch_psychiatrisch_text'];
					$kvno_ecog = explode(",", $stamqarr[0]['kvno_ecog']);
					$this->view->kvno_ecog = $kvno_ecog;
					$this->view->kvno_fotodocumentation = $stamqarr[0]['kvno_fotodocumentation'];
					$this->view->kvno_sonstiges = $stamqarr[0]['kvno_sonstiges'];
					$this->view->comment_apotheke = $stamqarr[0]['comment_apotheke'];
					$this->view->care_instructions = $stamqarr[0]['care_instructions'];
					$kvno_global = explode(",", $stamqarr[0]['kvno_global']);
					$this->view->kvno_global = $kvno_global;
					$this->view->kvno_medizini_a = $stamqarr[0]['kvno_medizini_a'];
					$kvno_medizini_b = explode(",", $stamqarr[0]['kvno_medizini_b']);
					$this->view->kvno_medizini_b = $kvno_medizini_b;

					$sympval = new SymptomatologyValues();
					$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set

					$form_symp = new KvnoDoctorSymp();
					$form_symps = $form_symp->getKvnoDoctorSymp($_REQUEST['kvno_doc_id'], $ipid);

					foreach($set_details as $key => $sym)
					{
						$newsymptomarr[$key] = $sym;
						$newsymptomarr[$key]['symptomid'] = $sym['id'];
						$newsymptomarr[$key]['entered_value'] = $form_symps[$sym['id']]['current_value'];
						$newsymptomarr[$key]['input_value'] = $form_symps[$sym['id']]['last_value'];
						$newsymptomarr[$key]['comment'] = $form_symps[$sym['id']]['comment'];
					}
					$this->view->symptomarr = $newsymptomarr;
				}
				else
				{

				}

				/* ---------------------------SAVE -- EDIT VISIT -------------------------- */
				if($this->getRequest()->isPost())
				{
					if(empty($_POST['pdfexport']))
					{
						$this->visitform_changes($ipid, $_REQUEST['kvno_doc_id'], 'kvno_doctor_visit', $_POST);
						$this->symptomatology_changes($ipid, $_REQUEST['kvno_doc_id'], $_POST);


						$sanfr = new Application_Form_SAKvnoDoctor();
						$result = $sanfr->UpdateKvnoDoctor($_POST);

						if($_POST['go_to_letter'] == '1')
						{
							$this->_redirect(APP_BASE . "patient/doctorletteradd?type=26&id=" . $_GET['id'] . "&visit_id=" . $_REQUEST['kvno_doc_id'] . "&visit_type=sa_doctor_visit");
							exit;
						}
						else
						{

							if($_POST['create_letter'] == '1')
							{
								$this->generate_receipt($clientid, $userid, $ipid, $epid, $patientarr, '33');
							}

							if($result)
							{
								$this->view->error_message = $this->view->translate('recordinsertsucessfully');
							}
							$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
						}
					}
				}
			}
		}

		public function wldoctorformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;

			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge
			{
			    $acknowledge = "1";
			    $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			    $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
				
			
			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->wlform = '1';
			$this->_helper->viewRenderer("sakvnodoctorform");
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->phone = $patientarr['phone'];
			$this->view->epid = strtoupper($epid);

			/* -----------------------Set default date for visit-------------------------- */
			$this->view->kvno_begin_date_h = date('H', strtotime('-5 minutes'));
			$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
			$this->view->kvno_end_date_h = date('H', strtotime('+10 minutes'));
			$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
			$this->view->vizit_date = date('d.m.Y');

			/* -----------------------Get patient details from Stammdaten ------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];

			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);
			$kunstliche = explode(",", $weit[0]['kunstliche']);
			if(in_array('1', $kunstliche))
			{
				$darm = '1';
			}
			else
			{
				$darm = '0';
			}

			if(in_array('2', $kunstliche))
			{
				$blase = '1';
			}
			else
			{
				$blase = '0';
			}

			if(in_array('3', $kunstliche))
			{
				$luftrohre = '1';
			}
			else
			{
				$luftrohre = '0';
			}

			if(in_array('4', $kunstliche))
			{
				$ablaufsonde = '1';
			}
			else
			{
				$ablaufsonde = '0';
			}

			if(in_array('5', $kunstliche))
			{
				$this->view->kunstliche = '5';
			}

			$this->view->kunstlichemore = $weit[0]['kunstlichemore'];
			$this->view->darm = $darm;
			$this->view->blase = $blase;
			$this->view->luftrohre = $luftrohre;
			$this->view->ablaufsonde = $ablaufsonde;

			/* ---------------------------Get patient Symptomatology -------------------------- */
			$symp = new Symptomatology();
			$symptomarr_ext = $symp->getPatientSymptpomatologyLast($ipid);
			$sympval = new SymptomatologyValues();
			$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set
			foreach($set_details as $key => $sym)
			{
//			cycle the whole set
				$novalue = 1;
				if(!empty($symptomarr_ext))
				{
//				check for existing values
					foreach($symptomarr_ext as $extsym)
					{
						if($extsym['symptomid'] == $sym['id'])
						{
//						grab values for current symptom
							$symptomarr[$key] = $extsym;
							$symptomarr[$key]['sym_desc_array'] = $extsym['sym_description'];
							$symptomarr[$key]['sym_description'] = utf8_encode($extsym['sym_description']['value']);
							$novalue = 0;
							break;
						}
					}
				}
				if($novalue == 1)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
					$symptomarr[$key]['sym_desc_array'] = null;
				}
			}
			$this->view->symptomarr = $symptomarr;

			/* ---------------------------Get Client details - address  -------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$client_address = $clientdata[0]['street1'] . ',' . $clientdata[0]['postcode'] . ',' . $clientdata[0]['city'];
			/* ---------------------------Get User details --  address-------------------------- */
			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$user_address = $userdata[0]['street1'] . ',' . $userdata[0]['zip'] . ',' . $userdata[0]['city'];

			if($userdata[0]['km_calculation_settings'] == "user")
			{
				$s = $user_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "client")
			{
				$s = $client_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "disabled")
			{
				$s = "";
			}

			$ploc = new PatientLocation();
			$plocarray = $ploc->getActiveLocationPatInfo($ipid);

			if(empty($plocarray) || $plocarray[0]['location_type'] == '5')
			{
//			if at home grab address from patient details
// 				$plocarray[0] = $patientmaster->getMasterData($decid, 0);
				$plocarray[0] = $patientmaster->get_patientMasterData();
				$plocarray[0]['street'] = $plocarray[0]['street1'];
			}
			$f = $plocarray[0]['street'] . ',' . $plocarray[0]['zip'] . ',' . $plocarray[0]['city'];

			if(strlen($f) > 2 && strlen($s) > 2)
			{
				$route = Pms_CommonData::getRouteLength($s, $f);
				$this->view->fahrtstreke_km = $route['length'];
				$this->view->fahrtzeit_min = $route['duration'];

				// TODO-1211
				$route_error = 0 ;
				if(empty($route['duration']) && $route['duration'] !== false ){
					$route_error = 1 ;
				}
				$this->view->route_error = $route_error;
			}
			/* ---------------------------Get Client details --  symptomatology view options-------------------------- */
//		 n-> NUmbers Scale(0-10);  a -> Attributes scale (none/weak/averge/strong)
			$this->view->sympt_view_select = $clientdata[0]['symptomatology_scale'];
			/* --------------------------------------------------------------------------------------------------------- */

			//medication edit procedure start
			if($this->getRequest()->isPost() && empty($_POST['pdfexport']))
			{
			    if($acknowledge == "1")
			    {
			        $_POST['skip_trigger'] = "1";
			    }
			    
				$patient_medication_form = new Application_Form_Medication();

				$a_post = $_POST;
				for($i = 1; $i <= count($_POST['medication']); $i++)
				{
					if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
					{
						$a_post['newmids'][$i] = $_POST['drid'][$i];
						$a_post['newmedication'][$i] = $_POST['medication'][$i];
					}
				}

				if(is_array($a_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($a_post);

					foreach($dts as $key => $dt)
					{
						$a_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form = new Application_Form_PatientDrugPlan();
				$med_form->UpdateMultiData($a_post);
				//medication edit procedure end
				//
			//
			// medication add procedure start

				$add_post = $_POST['add'];
				$add_post['ipid'] = $ipid;
				$add_post['isbedarfs'] = 0;

				foreach($add_post['medication'] as $key => $val)
				{
					if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
					{
						$add_post['newmedication'][$key] = $add_post['medication'][$key];
					}
				}

				if(is_array($add_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($add_post);

					foreach($dts as $key => $dt)
					{
						$add_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				/* --------------------------------------------------------------------------------------------------------- */
				$med_form->InsertMultiData($add_post);

				if(count($_POST['addbedarf']) > 0)
				{
					$med_form = new Application_Form_PatientDrugPlan();
					$patient_medication_form = new Application_Form_Medication();

					$add_post = $_POST['addbedarf'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 1;

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}

					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);

						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					/* --------------------------------------------------------------------------------------------------------- */
					$med_form->InsertMultiData($add_post);
				}
			}
			//medication add procedure start
			//
		//
		//medis edit grid procedure start
			if(strlen($_REQUEST['mid']) > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $userid, 'candelete');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				if($_GET['act'] == "del")
				{
					//delete medication
					$mid = $_GET['mid'];
					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
					$mod->isdelete = 1;
					$mod->save();
					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
				}
			}
			$pq = new User();
			$pqarr = $pq->getUserByClientid($clientid);

			$this->view->kvnodelicon = "1";

			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));

			$users = $pq->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;
			$this->view->jsusers = json_encode($users);

			//get all client users -> For medis dropdown
			$allUserArray = $pq->getUserByClientid($clientid);
			$userarraylastall[] = $this->view->translate('selectuser');
			foreach($allUserArray as $user)
			{
				$userarraylastall[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
			}
			$this->view->allUsers = $userarraylastall;

			$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);

			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";

			#######################################
			$medic = new PatientDrugPlan();

			// get bedarf medication
			$medicarr = $medic->getbedarfMedication($decid);

			$medication_master_ids['bedarf'][] = "XXXXXX";
			foreach($medicarr as $k_medicarr => $v_medicarr)
			{
				$medication_master_ids['bedarf'][] = $v_medicarr['medication_master_id'];
			}

			// get active medication
			$medicarr1 = $medic->getMedicationPlan($decid);

			$medication_master_ids['active'][] = "XXXXXX";
			foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
			{
				$medication_master_ids['active'][] = $v_medicarr1['medication_master_id'];
			}


			// get deleted medication
			$medicarr2 = $medic->getDeletedMedication($decid);

			$medication_master_ids['deleted'][] = "XXXXXX";
			foreach($medicarr2 as $k_medicarr2 => $v_medicarr2)
			{
				$medication_master_ids['deleted'][] = $v_medicarr2['medication_master_id'];
			}

			// get master medication data
			$medication_master_ids = array_merge($medication_master_ids['bedarf'], $medication_master_ids['active'], $medication_master_ids['deleted']);

			$med = new Medication();
			$medarr1 = $med->getMedicationById($medication_master_ids);

			foreach($medarr1 as $k_medarr1 => $v_medarr1)
			{
				$medication_master_array[$v_medarr1['id']] = $v_medarr1;
			}

			// display active medication
			if(count($medicarr1 < 1))
			{
				$this->view->mcntr = 0;
			}
			
			
			if($this->getRequest()->isPost() && strlen($_POST['pdfexport']) > 0)
			{
				$medicarr1 = Pms_CommonData::clear_pdf_data($medicarr1);
				$grid_pdf = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->medications_pdf = $grid_pdf->renderGrid();
			}

			$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->medications = $grid->renderGrid();

			// count medication
			$this->view->ajx = 1;
			$this->view->cntr = count($medicarr1);

			// discplay deleted medication
			$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "listdelpatientmedication_ajax.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->delmedications = $grid->renderGrid();


			// count medication
			$this->view->counter = count($medicarr1) + count($medicarr2);

			// display bedarf medication
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationbedarfsedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->bedarfsmedications = $grid->renderGrid();

			if($this->getRequest()->isPost() && strlen($_POST['pdfexport']) > 0)
			{
				$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
				$grid_pdf = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->bedarfsmedications_pdf = $grid_pdf->renderGrid();
			}
			#######################################################
			//medis edit grid procedure end
			//medis edit grid procedure end
			//
		//
		//medis add grid procedure start
			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$MasterGroups = array("4", "5", "6");
			$usersgroups = $usergroup->getUserGroups($MasterGroups);

			if(count($usersgroups) > 0)
			{
				foreach($usersgroups as $group)
				{
					if($group['groupmaster'] == 4)
					{
						$groupsDocArray[] = $group['id'];
					}
					else
					{
						$groupsarray[] = $group['id'];
					}
				}
			}

			$usersPflegeKoordArray = $pq->getuserbyGroupId($groupsarray, $clientid);
			$pflegeKoords['0'] = "Select User";

			foreach($usersPflegeKoordArray as $user)
			{
				$pflegeKoords[$user['id']] = $user['last_name'] . ", " . $user['first_name'];
			}

			$this->view->pfleges = $pflegeKoords;

			$usersDoctorsArray = $pq->getuserbyGroupId($groupsDocArray, $clientid, true);
			$doctors['0'] = "Auswahl";
			foreach($usersDoctorsArray as $doctor)
			{
				$doctors[$doctor['id']] = $doctor['user_title'] . " " .$doctor['last_name'] . ", " . $doctor['first_name'];
			}
			$this->view->doctors = $doctors;

			$doctors['-1'] = "Anderer Arzt";
			$doctors['-2'] = "Hausarzt";
			$this->view->users = $doctors;

			$a_medic = array();

			if(is_array($_POST['hidd_medication']))
			{
				foreach($_POST['hidd_medication'] as $key => $val)
				{
					$a_medic[$key]['medication'] = $_POST['medication'][$key];
					$a_medic[$key]['hidd_medication'] = $_POST['hidd_medication'][$key];
				}
			}
			else
			{
				for($i = 0; $i < 6; $i++)
				{
					$a_medic[$i] = array('cnt' => $i);
				}
			}

			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 9999, "listpatientmedicationadd.html");
			$this->view->medicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//medis add grid procedure end
			//
		//bedarf medis add start
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 99999, "listpatientbedarfmedicationadd.html");
			$this->view->bedarfmedicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);

			//bedarf medis add end
			if($this->getRequest()->isPost())
			{
				/* ---------------------------SAVE ADD VISIT-------------------------- */
				if(empty($_POST['pdfexport']) && strlen($_REQUEST['kvno_doc_id']) == 0)
				{
					$sanfr = new Application_Form_SAKvnoDoctor();
					$result = $sanfr->insertKvnoDoctor($_POST);

					if($_POST['go_to_letter'] == '1')
					{
						$this->_redirect(APP_BASE . "patient/doctorletteradd?type=26&id=" . $_GET['id'] . "&visit_id=" . $result . "&visit_type=wl_doctor_visit");
						exit;
					}
					else
					{

						if($_POST['create_letter'] == '1')
						{
							$this->generate_receipt($clientid, $userid, $ipid, $epid, $patientarr, '34');
						}

						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}

						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}

				/* ---------------------------PDF EXPORT-------------------------- */
				if(strlen($_POST['pdfexport']) > 0)
				{
					$post = $_POST;
					$post['kunstliche'] = $this->view->kunstliche;
					$post['darm'] = $this->view->darm;
					$post['blase'] = $this->view->blase;
					$post['luftrohre'] = $this->view->luftrohre;
					$post['ablaufsonde'] = $this->view->ablaufsonde;
					$post['medications'] = $this->view->medications_pdf;
					$post['bedarfmedications'] = $this->view->bedarfsmedications_pdf;
					$post['sympt_view_select'] = $this->view->sympt_view_select;

					if($_POST['create_letter'] != '1')
					{
						$this->generateformPdf(3, $post, 'WL_doctor_visit', "sakvno_doctorformpdf.html");
					}
				}
			}

			/* ---------------------------GET VISIT DETAILS -------------------------- */
			if(strlen($_REQUEST['kvno_doc_id']) > 0)
			{
				$stamq = Doctrine_Core::getTable('KvnoDoctor')->findBy('id', $_REQUEST['kvno_doc_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}

				$this->view->kvno_doc_id = $_REQUEST['kvno_doc_id'];

				if(count($stamqarr) > 0)
				{
					if($stamqarr[0]['kvno_begin_date_h'] != "0" || $stamqarr[0]['kvno_begin_date_m'] != "0")
					{
						$this->view->kvno_begin_date_h = $stamqarr[0]['kvno_begin_date_h'];
						$this->view->kvno_begin_date_m = $stamqarr[0]['kvno_begin_date_m'];
					}
					else
					{
						$this->view->kvno_begin_date_h = date('H', strtotime('-5 minutes'));
						$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
					}

					if($stamqarr[0]['kvno_end_date_h'] != "0" || $stamqarr[0]['kvno_end_date_m'] != "0")
					{
						$this->view->kvno_end_date_h = $stamqarr[0]['kvno_end_date_h'];
						$this->view->kvno_end_date_m = $stamqarr[0]['kvno_end_date_m'];
					}
					else
					{
						$this->view->kvno_end_date_h = date('H', strtotime('+10 minutes'));
						$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
					}
					$this->view->fahrtzeit = $stamqarr[0]['fahrtzeit'];
					$this->view->vizit_date = date('d.m.Y', strtotime($stamqarr[0]['vizit_date']));
					$this->view->fahrtstreke_km = $stamqarr[0]['fahrtstreke_km'];

					$this->view->kvno_peg = $stamqarr[0]['kvno_peg'];
					$this->view->kvno_peg_text = $stamqarr[0]['kvno_peg_text'];
					$this->view->kvno_port = $stamqarr[0]['kvno_port'];
					$this->view->kvno_port_text = $stamqarr[0]['kvno_port_text'];
					$this->view->kvno_pumps = $stamqarr[0]['kvno_pumps'];
					$this->view->kvno_pumps_text = $stamqarr[0]['kvno_pumps_text'];
					$this->view->kvno_dk = $stamqarr[0]['kvno_dk'];
					$this->view->kvno_dk_text = $stamqarr[0]['kvno_dk_text'];
					$this->view->kvno_kunstliche = $stamqarr[0]['kvno_kunstliche'];
					$this->view->kvno_kunstliche_text = $stamqarr[0]['kvno_kunstliche_text'];
					$this->view->kvno_darm = $stamqarr[0]['kvno_darm'];
					$this->view->kvno_darm_text = $stamqarr[0]['kvno_darm_text'];
					$this->view->kvno_blase = $stamqarr[0]['kvno_blase'];
					$this->view->kvno_blase_text = $stamqarr[0]['kvno_blase_text'];
					$this->view->kvno_luftrohre = $stamqarr[0]['kvno_luftrohre'];
					$this->view->kvno_luftrohre_text = $stamqarr[0]['kvno_luftrohre_text'];
					$this->view->kvno_ablaufsonde = $stamqarr[0]['kvno_ablaufsonde'];
					$this->view->kvno_ablaufsonde_text = $stamqarr[0]['kvno_ablaufsonde_text'];
					$this->view->kopf = $stamqarr[0]['kopf'];
					$this->view->kopf_text = $stamqarr[0]['kopf_text'];
					$this->view->thorax = $stamqarr[0]['thorax'];
					$this->view->thorax_text = $stamqarr[0]['thorax_text'];
					$this->view->abdomen = $stamqarr[0]['abdomen'];
					$this->view->abdomen_text = $stamqarr[0]['abdomen_text'];
					$this->view->extremitaten = $stamqarr[0]['extremitaten'];
					$this->view->extremitaten_text = $stamqarr[0]['extremitaten_text'];
					$this->view->haut_wunden = $stamqarr[0]['haut_wunden'];
					$this->view->haut_wunden_text = $stamqarr[0]['haut_wunden_text'];
					$this->view->neurologisch_psychiatrisch = $stamqarr[0]['neurologisch_psychiatrisch'];
					$this->view->neurologisch_psychiatrisch_text = $stamqarr[0]['neurologisch_psychiatrisch_text'];
					$kvno_ecog = explode(",", $stamqarr[0]['kvno_ecog']);
					$this->view->kvno_ecog = $kvno_ecog;
					$this->view->kvno_fotodocumentation = $stamqarr[0]['kvno_fotodocumentation'];
					$this->view->kvno_sonstiges = $stamqarr[0]['kvno_sonstiges'];
					$this->view->comment_apotheke = $stamqarr[0]['comment_apotheke'];
					$this->view->care_instructions = $stamqarr[0]['care_instructions'];
					$kvno_global = explode(",", $stamqarr[0]['kvno_global']);
					$this->view->kvno_global = $kvno_global;
					$this->view->kvno_medizini_a = $stamqarr[0]['kvno_medizini_a'];
					$kvno_medizini_b = explode(",", $stamqarr[0]['kvno_medizini_b']);
					$this->view->kvno_medizini_b = $kvno_medizini_b;

					$sympval = new SymptomatologyValues();
					$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set

					$form_symp = new KvnoDoctorSymp();
					$form_symps = $form_symp->getKvnoDoctorSymp($_REQUEST['kvno_doc_id'], $ipid);


					foreach($set_details as $key => $sym)
					{
						$newsymptomarr[$key] = $sym;
						$newsymptomarr[$key]['symptomid'] = $sym['id'];
						$newsymptomarr[$key]['entered_value'] = $form_symps[$sym['id']]['current_value'];
						$newsymptomarr[$key]['input_value'] = $form_symps[$sym['id']]['last_value'];
						$newsymptomarr[$key]['comment'] = $form_symps[$sym['id']]['comment'];
					}
					$this->view->symptomarr = $newsymptomarr;
				}
				else
				{

				}

				/* ---------------------------SAVE EDIT VISIT-------------------------- */
				if($this->getRequest()->isPost())
				{
					if(empty($_POST['pdfexport']))
					{
						$visit_form_id = $_REQUEST['kvno_doc_id'];
						$visit_form_type = 'wl_doctor_visit';
						$new_visit_form_data = $_POST;

						$this->visitform_changes($ipid, $visit_form_id, $visit_form_type, $new_visit_form_data);
						$this->symptomatology_changes($ipid, $visit_form_id, $new_visit_form_data);

						$sanfr = new Application_Form_SAKvnoDoctor();
						$result = $sanfr->UpdateKvnoDoctor($_POST);

						if($_POST['go_to_letter'] == '1')
						{
// 						$this->generate_receipt($clientid, $userid, $ipid, $epid, $patientarr, '34');
							$this->_redirect(APP_BASE . "patient/doctorletteradd?type=26&id=" . $_GET['id'] . "&visit_id=" . $visit_form_id . "&visit_type=wl_doctor_visit");
							exit;
						}
						else
						{

							if($_POST['create_letter'] == '1')
							{
								$this->generate_receipt($clientid, $userid, $ipid, $epid, $patientarr, '34');
							}

							if($result)
							{
								$this->view->error_message = $this->view->translate('recordinsertsucessfully');
							}

							$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
						}
					}
				}
			}
		}

		public function kvnonurseformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->phone = $patientarr['phone'];
			$this->view->epid = strtoupper($epid);

			/* ---------------------------Set default date for visit-------------------------- */
			$this->view->kvno_begin_date_h = date('H', strtotime('-5 minutes'));
			$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));

			$this->view->kvno_end_date_h = date('H', strtotime('+10 minutes'));
			$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
			$this->view->vizit_date = date('d.m.Y');

			/* ---------------------------Get patient details from Stammdaten -------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];

			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);
			$kunstliche = explode(",", $weit[0]['kunstliche']);

			if(in_array('1', $kunstliche))
			{
				$darm = '1';
			}
			else
			{
				$darm = '0';
			}

			if(in_array('2', $kunstliche))
			{
				$blase = '1';
			}
			else
			{
				$blase = '0';
			}

			if(in_array('3', $kunstliche))
			{
				$luftrohre = '1';
			}
			else
			{
				$luftrohre = '0';
			}

			if(in_array('4', $kunstliche))
			{
				$ablaufsonde = '1';
			}
			else
			{
				$ablaufsonde = '0';
			}

			if(in_array('5', $kunstliche))
			{
				$this->view->kunstliche = '5';
			}
			else
			{
				$this->view->kunstliche = "0";
			}

			$this->view->kunstlichemore = $weit[0]['kunstlichemore'];

			$this->view->darm = $darm;
			$this->view->blase = $blase;
			$this->view->luftrohre = $luftrohre;
			$this->view->ablaufsonde = $ablaufsonde;

			/* ---------------------------Get patient symptomatology  -------------------------- */
			$symp = new Symptomatology();
			$symptomarr_ext = $symp->getPatientSymptpomatologyLast($ipid);
			$sympval = new SymptomatologyValues();
			$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set
			foreach($set_details as $key => $sym)
			{
//			cycle the whole set
				$novalue = 1;
				if(!empty($symptomarr_ext))
				{
//				check for existing values
					foreach($symptomarr_ext as $extsym)
					{
						if($extsym['symptomid'] == $sym['id'])
						{
//						grab values for current symptom
							$symptomarr[$key] = $extsym;
							$symptomarr[$key]['sym_desc_array'] = $extsym['sym_description'];
							$symptomarr[$key]['sym_description'] = utf8_encode($extsym['sym_description']['value']);
							$novalue = 0;
							break;
						}
					}
				}
				if($novalue == 1)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
					$symptomarr[$key]['sym_desc_array'] = null;
				}
			}
			$this->view->symptomarr = $symptomarr;

			/* ---------------------------Get Client details -  address -------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$client_address = $clientdata[0]['street1'] . ',' . $clientdata[0]['postcode'] . ',' . $clientdata[0]['city'];

			/* ---------------------------Get User details --  address-------------------------- */
			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$user_address = $userdata[0]['street1'] . ',' . $userdata[0]['zip'] . ',' . $userdata[0]['city'];

			if($userdata[0]['km_calculation_settings'] == "user")
			{
				$s = $user_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "client")
			{
				$s = $client_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "disabled")
			{
				$s = "";
			}

			$ploc = new PatientLocation();
			$plocarray = $ploc->getActiveLocationPatInfo($ipid);

			if(empty($plocarray) || $plocarray[0]['location_type'] == '5')
			{
//			if at home grab address from patient details
// 				$plocarray[0] = $patientmaster->getMasterData($decid, 0);
				$plocarray[0] = $patientmaster->get_patientMasterData();
				$plocarray[0]['street'] = $plocarray[0]['street1'];
			}
			$f = $plocarray[0]['street'] . ',' . $plocarray[0]['zip'] . ',' . $plocarray[0]['city'];


			if(strlen($f) > 2 && strlen($s) > 2)
			{
				$route = Pms_CommonData::getRouteLength($s, $f);

				$this->view->fahrtstreke_km = $route['length'];
				$this->view->fahrtzeit_min = $route['duration'];

				// TODO-1211
				$route_error = 0 ;
				if(empty($route['duration']) && $route['duration'] !== false ){
					$route_error = 1 ;
				}
				$this->view->route_error = $route_error;
			}
			/* ---------------------------Get Client details --  symptomatology view options-------------------------- */
//		n-> NUmbers Scale(0-10);  a -> Attributes scale (none/weak/averge/strong)
			$this->view->sympt_view_select = $clientdata[0]['symptomatology_scale'];
			/* --------------------------------------------------------------------------------------------------------- */

			if($this->getRequest()->isPost())
			{
				/* ---------------------------SAVE -  ADD VISIT -------------------------- */
				if(empty($_POST['pdfexport']) && strlen($_REQUEST['kvno_nurse_id']) == 0)
				{
					if(empty($_POST['kvno_sonstiges']) && in_array("3", $_POST['kvno_medizini']))
					{
						$this->view->error_kvno_sonstiges = "formerror";
						$error = 1;
					}

					if($error > 0)
					{
						$this->view->error_alert = '1';
					}

					$sanfr = new Application_Form_KvnoNurse();
					$result = $sanfr->insertKvnoNurse($_POST);

					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}

					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}

				/* ---------------------------PDF EXPORT -------------------------- */
				if(strlen($_POST['pdfexport']) > 0)
				{
					$post = $_POST;
					$post['kunstliche'] = $this->view->kunstliche;
					$post['darm'] = $this->view->darm;
					$post['blase'] = $this->view->blase;
					$post['luftrohre'] = $this->view->luftrohre;
					$post['ablaufsonde'] = $this->view->ablaufsonde;
					$post['sympt_view_select'] = $this->view->sympt_view_select;

					$this->generateformPdf(3, $post, 'KVNO_nurse', "kvno_nurseformpdf.html");
				}
			}

			/* ---------------------------GET VISIT DETAILS -------------------------- */
			if(strlen($_REQUEST['kvno_nurse_id']) > 0)
			{
				$stamq = Doctrine_Core::getTable('KvnoNurse')->findBy('id', $_REQUEST['kvno_nurse_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}
				$this->view->kvno_nurse_id = $_REQUEST['kvno_nurse_id'];
				if(count($stamqarr) > 0)
				{
					if($stamqarr[0]['kvno_begin_date_h'] != "0" || $stamqarr[0]['kvno_begin_date_m'] != "0")
					{
						$this->view->kvno_begin_date_h = $stamqarr[0]['kvno_begin_date_h'];
						$this->view->kvno_begin_date_m = $stamqarr[0]['kvno_begin_date_m'];
					}
					else
					{
						$this->view->kvno_begin_date_h = date('H');
						$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
					}

					if($stamqarr[0]['kvno_end_date_h'] != "0" || $stamqarr[0]['kvno_end_date_m'] != "0")
					{
						$this->view->kvno_end_date_h = $stamqarr[0]['kvno_end_date_h'];
						$this->view->kvno_end_date_m = $stamqarr[0]['kvno_end_date_m'];
					}
					else
					{
						$this->view->kvno_end_date_h = date('H');
						$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
					}

					$this->view->quality = $stamqarr[0]['quality'];
					$this->view->fahrtzeit = $stamqarr[0]['fahrtzeit'];
					$this->view->vizit_date = date('d.m.Y', strtotime($stamqarr[0]['vizit_date']));
					$this->view->fahrtstreke_km = $stamqarr[0]['fahrtstreke_km'];
					$this->view->kvno_peg = $stamqarr[0]['kvno_peg'];
					$this->view->kvno_peg_text = $stamqarr[0]['kvno_peg_text'];
					$this->view->kvno_port = $stamqarr[0]['kvno_port'];
					$this->view->kvno_port_text = $stamqarr[0]['kvno_port_text'];
					$this->view->kvno_pumps = $stamqarr[0]['kvno_pumps'];
					$this->view->kvno_pumps_text = $stamqarr[0]['kvno_pumps_text'];
					$this->view->kvno_dk = $stamqarr[0]['kvno_dk'];
					$this->view->kvno_dk_text = $stamqarr[0]['kvno_dk_text'];
					$this->view->kvno_kunstliche = $stamqarr[0]['kvno_kunstliche'];
					$this->view->kvno_kunstliche_text = $stamqarr[0]['kvno_kunstliche_text'];
					$this->view->kvno_darm = $stamqarr[0]['kvno_darm'];
					$this->view->kvno_darm_text = $stamqarr[0]['kvno_darm_text'];
					$this->view->kvno_blase = $stamqarr[0]['kvno_blase'];
					$this->view->kvno_blase_text = $stamqarr[0]['kvno_blase_text'];
					$this->view->kvno_luftrohre = $stamqarr[0]['kvno_luftrohre'];
					$this->view->kvno_luftrohre_text = $stamqarr[0]['kvno_luftrohre_text'];
					$this->view->kvno_ablaufsonde = $stamqarr[0]['kvno_ablaufsonde'];
					$this->view->kvno_ablaufsonde_text = $stamqarr[0]['kvno_ablaufsonde_text'];
					$this->view->kvno_fotodocumentation = $stamqarr[0]['kvno_fotodocumentation'];
					$this->view->kvno_sonstiges = $stamqarr[0]['kvno_sonstiges'];
					$this->view->comment_apotheke = $stamqarr[0]['comment_apotheke'];
					$kvno_global = explode(",", $stamqarr[0]['kvno_global']);
					$this->view->kvno_global = $kvno_global;
					$this->view->kvno_medizini1 = $stamqarr[0]['kvno_medizini1'];
					$this->view->kvno_medizini2 = explode(",", $stamqarr[0]['kvno_medizini2']);
					$sympval = new SymptomatologyValues();
					$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set

					$form_symp = new KvnoNurseSymp();
					$form_symps = $form_symp->getKvnoNurseSymp($_REQUEST['kvno_nurse_id'], $ipid);

					foreach($set_details as $key => $sym)
					{
						$newsymptomarr[$key] = $sym;
						$newsymptomarr[$key]['symptomid'] = $sym['id'];
						$newsymptomarr[$key]['entered_value'] = $form_symps[$sym['id']]['current_value'];
						$newsymptomarr[$key]['input_value'] = $form_symps[$sym['id']]['last_value'];
						$newsymptomarr[$key]['comment'] = $form_symps[$sym['id']]['comment'];
					}
					$this->view->symptomarr = $newsymptomarr;
				}
				else
				{

				}

				/* ---------------------------SAVE - EDIT VISIT -------------------------- */
				if($this->getRequest()->isPost())
				{
					if(empty($_POST['pdfexport']))
					{
						$visit_form_id = $_REQUEST['kvno_nurse_id'];
						$visit_form_type = 'kvno_nurse_visit';
						$new_visit_form_data = $_POST;

						$this->visitform_changes($ipid, $visit_form_id, $visit_form_type, $new_visit_form_data);
						$this->symptomatology_changes($ipid, $visit_form_id, $new_visit_form_data);

						$sanfr = new Application_Form_KvnoNurse();
						$result = $sanfr->UpdateKvnoNurse($_POST);
						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}
			}
		}

		public function leverkusennurseformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */

			/* ------------------------LEVERKUSEN VISIT------------------------------------- */
			$this->view->leverkusen_visit = '1';

			/* -------------------User / Sub-users Data--------------------------------------- */
			$sub_users_array = Pms_CommonData::getSubUsers($clientid, $userid);

			if(!empty($sub_users_array))
			{
				foreach($sub_users_array as $usr_id => $usr_details)
				{
					if($usr_details['status'] != 'old')
					{
						$sub_users[$usr_id] = $usr_details;
					}
					else
					{
						$sub_users_old[$usr_id] = $usr_details;
						$sub_users_old_ids[] = $usr_id;
					}
				}
			}
			else
			{
				$sub_users = '';
			}
			
			$this->view->sub_users_old = $sub_users_old;
			$this->view->sub_users_old_ids = $sub_users_old_ids;
			$this->view->sub_users = $sub_users;

			/* -------------------Patient Data--------------------------------------- */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->phone = $patientarr['phone'];
			$this->view->epid = strtoupper($epid);

			/* ---------------------------Set default date for visit-------------------------- */
			$this->view->kvno_begin_date_h = date('H', strtotime('-5 minutes'));
			$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));

			$this->view->kvno_end_date_h = date('H', strtotime('+10 minutes'));
			$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
			$this->view->vizit_date = date('d.m.Y');

			/* ---------------------------Get patient details from Stammdaten -------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];

			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);
			$kunstliche = explode(",", $weit[0]['kunstliche']);

			if(in_array('1', $kunstliche))
			{
				$darm = '1';
			}
			else
			{
				$darm = '0';
			}

			if(in_array('2', $kunstliche))
			{
				$blase = '1';
			}
			else
			{
				$blase = '0';
			}

			if(in_array('3', $kunstliche))
			{
				$luftrohre = '1';
			}
			else
			{
				$luftrohre = '0';
			}

			if(in_array('4', $kunstliche))
			{
				$ablaufsonde = '1';
			}
			else
			{
				$ablaufsonde = '0';
			}

			if(in_array('5', $kunstliche))
			{
				$this->view->kunstliche = '5';
			}
			else
			{
				$this->view->kunstliche = "0";
			}

			$this->view->kunstlichemore = $weit[0]['kunstlichemore'];
			$this->view->darm = $darm;
			$this->view->blase = $blase;
			$this->view->luftrohre = $luftrohre;
			$this->view->ablaufsonde = $ablaufsonde;

			/* ---------------------------Get patient symptomatology  -------------------------- */
			$symp = new Symptomatology();
			$symptomarr_ext = $symp->getPatientSymptpomatologyLast($ipid);
			$sympval = new SymptomatologyValues();
			$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set
			foreach($set_details as $key => $sym)
			{
//			cycle the whole set
				$novalue = 1;
				if(!empty($symptomarr_ext))
				{
//				check for existing values
					foreach($symptomarr_ext as $extsym)
					{
						if($extsym['symptomid'] == $sym['id'])
						{
//						grab values for current symptom
							$symptomarr[$key] = $extsym;
							$symptomarr[$key]['sym_desc_array'] = $extsym['sym_description'];
							$symptomarr[$key]['sym_description'] = utf8_encode($extsym['sym_description']['value']);
							$novalue = 0;
							break;
						}
					}
				}
				if($novalue == 1)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
					$symptomarr[$key]['sym_desc_array'] = null;
				}
			}
			$this->view->symptomarr = $symptomarr;

			/* ---------------------------Get Client details -  address -------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$client_address = $clientdata[0]['street1'] . ',' . $clientdata[0]['postcode'] . ',' . $clientdata[0]['city'];

			/* ---------------------------Get User details --  address-------------------------- */
			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$user_address = $userdata[0]['street1'] . ',' . $userdata[0]['zip'] . ',' . $userdata[0]['city'];

			if($userdata[0]['km_calculation_settings'] == "user")
			{
				$s = $user_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "client")
			{
				$s = $client_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "disabled")
			{
				$s = "";
			}

			$ploc = new PatientLocation();
			$plocarray = $ploc->getActiveLocationPatInfo($ipid);

			if(empty($plocarray) || $plocarray[0]['location_type'] == '5')
			{
//			if at home grab address from patient details
// 				$plocarray[0] = $patientmaster->getMasterData($decid, 0);
				$plocarray[0] = $patientmaster->get_patientMasterData();
				$plocarray[0]['street'] = $plocarray[0]['street1'];
			}
			$f = $plocarray[0]['street'] . ',' . $plocarray[0]['zip'] . ',' . $plocarray[0]['city'];


			if(strlen($f) > 2 && strlen($s) > 2)
			{
				$route = Pms_CommonData::getRouteLength($s, $f);
				$this->view->fahrtstreke_km = $route['length'];
				$this->view->fahrtzeit_min = $route['duration'];

				// TODO-1211
				$route_error = 0 ;
				if(empty($route['duration']) && $route['duration'] !== false ){
					$route_error = 1 ;
				}
				$this->view->route_error = $route_error;
			}
			/* ---------------------------Get Client details --  symptomatology view options-------------------------- */
			$this->view->sympt_view_select = $clientdata[0]['symptomatology_scale'];  // n-> NUmbers Scale(0-10);  a -> Attributes scale (none/weak/averge/strong)
			/* --------------------------------------------------------------------------------------------------------- */

			if($this->getRequest()->isPost())
			{
				/* ---------------------------SAVE -  ADD VISIT -------------------------- */
				if(empty($_POST['pdfexport']) && strlen($_REQUEST['kvno_nurse_id']) == 0)
				{
					if(empty($_POST['kvno_sonstiges']) && in_array("3", $_POST['kvno_medizini']))
					{
						$this->view->error_kvno_sonstiges = "formerror";
						$error = 1;
					}
					if($error > 0)
					{
						$this->view->error_alert = '1';
					}
					$sanfr = new Application_Form_KvnoNurse();
					$result = $sanfr->insertKvnoNurse($_POST);
					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}

				/* ---------------------------PDF EXPORT -------------------------- */
				if(strlen($_POST['pdfexport']) > 0)
				{
					$post = $_POST;
					$post['kunstliche'] = $this->view->kunstliche;
					$post['darm'] = $this->view->darm;
					$post['blase'] = $this->view->blase;
					$post['luftrohre'] = $this->view->luftrohre;
					$post['ablaufsonde'] = $this->view->ablaufsonde;
					$post['sympt_view_select'] = $this->view->sympt_view_select;
					$this->generateformPdf(3, $post, 'leverkusen_nurse', "leverkusen_nurseformpdf.html");
				}
			}

			/* ---------------------------GET VISIT DETAILS -------------------------- */
			if(strlen($_REQUEST['kvno_nurse_id']) > 0)
			{

				$stamq = Doctrine_Core::getTable('KvnoNurse')->findBy('id', $_REQUEST['kvno_nurse_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}
				$this->view->kvno_nurse_id = $_REQUEST['kvno_nurse_id'];
				if(count($stamqarr) > 0)
				{
					//RWH START
					//rewrite $subuser array!!!
					//if curent user is not the creator, add existing form sub_user to the curent user sub_users list!
					if(!array_key_exists($stamqarr[0]['sub_user'], $sub_users) && $stamqarr[0]['sub_user'] != '0')
					{
						$pseudo_users = new PseudoUsers();
						$pseudo_user_data = $pseudo_users->get_pseudo_user_data($clientid, $stamqarr[0]['sub_user']);
						if($pseudo_user_data)
						{
							$sub_users[$pseudo_user_data['id']]['name'] = trim(rtrim($pseudo_user_data['title'].' '.$pseudo_user_data['first_name'].' '.$pseudo_user_data['last_name']));
							$sub_users[$pseudo_user_data['id']]['shortname'] = trim(rtrim($pseudo_user_data['shortname']));
						}
						
						$this->view->sub_users = $sub_users;
					}
					//RWH END	
						
					if($stamqarr[0]['kvno_begin_date_h'] != "0" || $stamqarr[0]['kvno_begin_date_m'] != "0")
					{
						$this->view->kvno_begin_date_h = $stamqarr[0]['kvno_begin_date_h'];
						$this->view->kvno_begin_date_m = $stamqarr[0]['kvno_begin_date_m'];
					}
					else
					{
						$this->view->kvno_begin_date_h = date('H');
						$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
					}
					if($stamqarr[0]['kvno_end_date_h'] != "0" || $stamqarr[0]['kvno_end_date_m'] != "0")
					{
						$this->view->kvno_end_date_h = $stamqarr[0]['kvno_end_date_h'];
						$this->view->kvno_end_date_m = $stamqarr[0]['kvno_end_date_m'];
					}
					else
					{
						$this->view->kvno_end_date_h = date('H');
						$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
						;
					}

					$this->view->quality = $stamqarr[0]['quality'];
					$this->view->fahrtzeit = $stamqarr[0]['fahrtzeit'];
					$this->view->vizit_date = date('d.m.Y', strtotime($stamqarr[0]['vizit_date']));
					$this->view->fahrtstreke_km = $stamqarr[0]['fahrtstreke_km'];
					$this->view->kvno_peg = $stamqarr[0]['kvno_peg'];
					$this->view->kvno_peg_text = $stamqarr[0]['kvno_peg_text'];
					$this->view->kvno_port = $stamqarr[0]['kvno_port'];
					$this->view->kvno_port_text = $stamqarr[0]['kvno_port_text'];
					$this->view->kvno_pumps = $stamqarr[0]['kvno_pumps'];
					$this->view->kvno_pumps_text = $stamqarr[0]['kvno_pumps_text'];
					$this->view->kvno_dk = $stamqarr[0]['kvno_dk'];
					$this->view->kvno_dk_text = $stamqarr[0]['kvno_dk_text'];
					$this->view->kvno_kunstliche = $stamqarr[0]['kvno_kunstliche'];
					$this->view->kvno_kunstliche_text = $stamqarr[0]['kvno_kunstliche_text'];
					$this->view->kvno_darm = $stamqarr[0]['kvno_darm'];
					$this->view->kvno_darm_text = $stamqarr[0]['kvno_darm_text'];
					$this->view->kvno_blase = $stamqarr[0]['kvno_blase'];
					$this->view->kvno_blase_text = $stamqarr[0]['kvno_blase_text'];
					$this->view->kvno_luftrohre = $stamqarr[0]['kvno_luftrohre'];
					$this->view->kvno_luftrohre_text = $stamqarr[0]['kvno_luftrohre_text'];
					$this->view->kvno_ablaufsonde = $stamqarr[0]['kvno_ablaufsonde'];
					$this->view->kvno_ablaufsonde_text = $stamqarr[0]['kvno_ablaufsonde_text'];
					$this->view->kvno_fotodocumentation = $stamqarr[0]['kvno_fotodocumentation'];
					$this->view->kvno_sonstiges = $stamqarr[0]['kvno_sonstiges'];
					$this->view->comment_apotheke = $stamqarr[0]['comment_apotheke'];
					$kvno_global = explode(",", $stamqarr[0]['kvno_global']);
					$this->view->kvno_global = $kvno_global;
					$this->view->kvno_medizini1 = $stamqarr[0]['kvno_medizini1'];
					$this->view->kvno_medizini2 = explode(",", $stamqarr[0]['kvno_medizini2']);
					$this->view->sub_user = $stamqarr[0]['sub_user'];

					$sympval = new SymptomatologyValues();
					$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set

					$form_symp = new KvnoNurseSymp();
					$form_symps = $form_symp->getKvnoNurseSymp($_REQUEST['kvno_nurse_id'], $ipid);

					foreach($set_details as $key => $sym)
					{
						$newsymptomarr[$key] = $sym;
						$newsymptomarr[$key]['symptomid'] = $sym['id'];
						$newsymptomarr[$key]['entered_value'] = $form_symps[$sym['id']]['current_value'];
						$newsymptomarr[$key]['input_value'] = $form_symps[$sym['id']]['last_value'];
						$newsymptomarr[$key]['comment'] = $form_symps[$sym['id']]['comment'];
					}
					$this->view->symptomarr = $newsymptomarr;
				}
				else
				{

				}

				/* ---------------------------SAVE - EDIT VISIT -------------------------- */
				if($this->getRequest()->isPost())
				{
					if(empty($_POST['pdfexport']))
					{
						$sanfr = new Application_Form_KvnoNurse();
						$result = $sanfr->UpdateKvnoNurse($_POST);
						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}
			}
		}

		public function visitkoordinationformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->phone = $patientarr['phone'];
			$this->view->epid = strtoupper($epid);

			/* ---------------------------Set default date for visit-------------------------- */
			$this->view->visit_date = date('d.m.Y');
			$this->view->visit_begin_date_h = date('H', strtotime('-5 minutes'));
			$this->view->visit_begin_date_m = date('i', strtotime('-5 minutes'));
			$this->view->visit_end_date_h = date('H', strtotime('+10 minutes'));
			$this->view->visit_end_date_m = date('i', strtotime('+10 minutes'));

			/* ---------------------------Get Client details - address-------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$client_address = $clientdata[0]['street1'] . ',' . $clientdata[0]['postcode'] . ',' . $clientdata[0]['city'];
			/* ---------------------------Get User details --  address-------------------------- */

			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$user_address = $userdata[0]['street1'] . ',' . $userdata[0]['zip'] . ',' . $userdata[0]['city'];

			if($userdata[0]['km_calculation_settings'] == "user")
			{
				$s = $user_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "client")
			{
				$s = $client_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "disabled")
			{
				$s = "";
			}

			$ploc = new PatientLocation();
			$plocarray = $ploc->getActiveLocationPatInfo($ipid);

			if(empty($plocarray) || $plocarray[0]['location_type'] == '5')
			{
//			if at home grab address from patient details
// 				$plocarray[0] = $patientmaster->getMasterData($decid, 0);
				$plocarray[0] = $patientmaster->get_patientMasterData();
				$plocarray[0]['street'] = $plocarray[0]['street1'];
			}

			$f = $plocarray[0]['street'] . ',' . $plocarray[0]['zip'] . ',' . $plocarray[0]['city'];

			if(strlen($f) > 2 && strlen($s) > 2)
			{
				$route = Pms_CommonData::getRouteLength($s, $f);
				$this->view->fahrtstreke_km = $route['length'];
				$this->view->fahrtzeit_min = $route['duration'];

				// TODO-1211
				$route_error = 0 ;
				if(empty($route['duration']) && $route['duration'] !== false ){
					$route_error = 1 ;
				}
				$this->view->route_error = $route_error;
			}

			if($this->getRequest()->isPost())
			{
				/* ---------------------------SAVE - ADD VISIT-------------------------- */
				if(empty($_POST['pdfexport']) && strlen($_REQUEST['koordination_id']) == 0)
				{
					$sanfr = new Application_Form_VisitKoordination();
					$result = $sanfr->insertVisitKoordination($_POST);
					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}

				/* ---------------------------PDF EXPORT-------------------------- */
				if(strlen($_POST['pdfexport']) > 0)
				{
					$post = $_POST;
					$this->generateformPdf(3, $post, 'VisitKoordination', "visit_koordinationformpdf.html");
				}
			}

			/* ---------------------------GET VISIT DETAILS-------------------------- */
			if(strlen($_REQUEST['koordination_id']) > 0)
			{
				$stamq = Doctrine_Core::getTable('VisitKoordination')->findBy('id', $_REQUEST['koordination_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}

				$this->view->koordination_id = $_REQUEST['koordination_id'];
				if(count($stamqarr) > 0)
				{
					if($stamqarr[0]['visit_begin_date_h'] != "0" || $stamqarr[0]['visit_begin_date_m'] != "0")
					{
						$this->view->visit_begin_date_h = $stamqarr[0]['visit_begin_date_h'];
						$this->view->visit_begin_date_m = $stamqarr[0]['visit_begin_date_m'];
					}
					else
					{
						$this->view->visit_begin_date_h = date('H');
						$this->view->visit_begin_date_m = date('i', strtotime('-5 minutes'));
					}

					if($stamqarr[0]['visit_end_date_h'] != "0" || $stamqarr[0]['visit_end_date_m'] != "0")
					{
						$this->view->visit_end_date_h = $stamqarr[0]['visit_end_date_h'];
						$this->view->visit_end_date_m = $stamqarr[0]['visit_end_date_m'];
					}
					else
					{
						$this->view->visit_end_date_h = date('H');
						$this->view->visit_end_date_m = date('i', strtotime('+10 minutes'));
					}

					$this->view->quality = $stamqarr[0]['quality'];
					$this->view->fahrtzeit = $stamqarr[0]['fahrtzeit'];
					$this->view->visit_date = date('d.m.Y', strtotime($stamqarr[0]['visit_date']));
					$this->view->fahrtstreke_km = $stamqarr[0]['fahrtstreke_km'];
					$this->view->visit_comment = $stamqarr[0]['visit_comment'];
					$this->view->visit_care_instructions = $stamqarr[0]['visit_care_instructions'];
				}
				else
				{

				}
				/* ---------------------------SAVE - EDIT VISIT-------------------------- */
				if($this->getRequest()->isPost())
				{
					if(empty($_POST['pdfexport']))
					{
						$sanfr = new Application_Form_VisitKoordination();
						$result = $sanfr->UpdateVisitKoordination($_POST);
						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}
			}
		}

		public function wlnurseformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ------------------------------------------------ */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->phone = $patientarr['phone'];
			$this->view->epid = strtoupper($epid);
			$this->view->wlform = '1';
			$this->_helper->viewRenderer("sakvnonurseform");

			/* ---------------------------Set default date for visit-------------------------- */
			$this->view->kvno_begin_date_h = date('H', strtotime('-5 minutes'));
			$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
			$this->view->kvno_end_date_h = date('H', strtotime('+10 minutes'));
			$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));

			$this->view->vizit_date = date('d.m.Y');

			/* ---------------------------Get patient details from Stammdaten-------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];

			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);
			$kunstliche = explode(",", $weit[0]['kunstliche']);
			if(in_array('1', $kunstliche))
			{
				$darm = '1';
			}
			else
			{
				$darm = '0';
			}

			if(in_array('2', $kunstliche))
			{
				$blase = '1';
			}
			else
			{
				$blase = '0';
			}

			if(in_array('3', $kunstliche))
			{
				$luftrohre = '1';
			}
			else
			{
				$luftrohre = '0';
			}

			if(in_array('4', $kunstliche))
			{
				$ablaufsonde = '1';
			}
			else
			{
				$ablaufsonde = '0';
			}

			if(in_array('5', $kunstliche))
			{
				$this->view->kunstliche = '5';
			}

			$this->view->kunstlichemore = $weit[0]['kunstlichemore'];
			$this->view->darm = $darm;
			$this->view->blase = $blase;
			$this->view->luftrohre = $luftrohre;
			$this->view->ablaufsonde = $ablaufsonde;

			/* ---------------------------Get patient Symptomatology-------------------------- */
			$symp = new Symptomatology();
			$symptomarr_ext = $symp->getPatientSymptpomatologyLast($ipid);
			$sympval = new SymptomatologyValues();
			$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set
			foreach($set_details as $key => $sym)
			{
//			cycle the whole set
				$novalue = 1;
				if(!empty($symptomarr_ext))
				{
//				check for existing values
					foreach($symptomarr_ext as $extsym)
					{
						if($extsym['symptomid'] == $sym['id'])
						{
//						grab values for current symptom
							$symptomarr[$key] = $extsym;
							$symptomarr[$key]['sym_desc_array'] = $extsym['sym_description'];
							$symptomarr[$key]['sym_description'] = utf8_encode($extsym['sym_description']['value']);
							$novalue = 0;
							break;
						}
					}
				}

				if($novalue == 1)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
					$symptomarr[$key]['sym_desc_array'] = null;
				}
			}

			$this->view->symptomarr = $symptomarr;

			/* ---------------------------Get Client details - address-------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$client_address = $clientdata[0]['street1'] . ',' . $clientdata[0]['postcode'] . ',' . $clientdata[0]['city'];

			/* ---------------------------Get User details --  address-------------------------- */
			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$user_address = $userdata[0]['street1'] . ',' . $userdata[0]['zip'] . ',' . $userdata[0]['city'];

			if($userdata[0]['km_calculation_settings'] == "user")
			{
				$s = $user_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "client")
			{
				$s = $client_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "disabled")
			{
				$s = "";
			}

			$ploc = new PatientLocation();
			$plocarray = $ploc->getActiveLocationPatInfo($ipid);

			if(empty($plocarray) || $plocarray[0]['location_type'] == '5')
			{
//			if at home grab address from patient details
// 				$plocarray[0] = $patientmaster->getMasterData($decid, 0);
				$plocarray[0] = $patientmaster->get_patientMasterData();
				$plocarray[0]['street'] = $plocarray[0]['street1'];
			}
			$f = $plocarray[0]['street'] . ',' . $plocarray[0]['zip'] . ',' . $plocarray[0]['city'];

			if(strlen($f) > 2 && strlen($s) > 2)
			{
				$route = Pms_CommonData::getRouteLength($s, $f);
				$this->view->fahrtstreke_km = $route['length'];
				$this->view->fahrtzeit_min = $route['duration'];

				// TODO-1211
				$route_error = 0 ;
				if(empty($route['duration']) && $route['duration'] !== false ){
					$route_error = 1 ;
				}
				$this->view->route_error = $route_error;
			}

			/* ---------------------------Get Client details --  symptomatology view options-------------------------- */
//		n-> NUmbers Scale(0-10);  a -> Attributes scale (none/weak/averge/strong)
			$this->view->sympt_view_select = $clientdata[0]['symptomatology_scale'];
			/* --------------------------------------------------------------------------------------------------------- */

			if($this->getRequest()->isPost())
			{
				/* ---------------------------SAVE --  ADD VISIT -------------------------- */
				if(empty($_POST['pdfexport']) && strlen($_REQUEST['kvno_nurse_id']) == 0)
				{
					if(empty($_POST['kvno_sonstiges']) && in_array("3", $_POST['kvno_medizini']))
					{
						$this->view->error_kvno_sonstiges = "formerror";
						$error = 1;
					}

					if($error > 0)
					{
						$this->view->error_alert = '1';
					}
					$sanfr = new Application_Form_SAKvnoNurse();
					$result = $sanfr->insertKvnoNurse($_POST);

					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}

					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}

				/* ---------------------------PDF EXPORT -------------------------- */
				if(strlen($_POST['pdfexport']) > 0)
				{
					$post = $_POST;
					$post['kunstliche'] = $this->view->kunstliche;
					$post['darm'] = $this->view->darm;
					$post['blase'] = $this->view->blase;
					$post['luftrohre'] = $this->view->luftrohre;
					$post['ablaufsonde'] = $this->view->ablaufsonde;
					$post['sympt_view_select'] = $this->view->sympt_view_select;

					$this->generateformPdf(3, $post, 'WL_nurse_visit', "sakvno_nurseformpdf.html");
				}
			}

			/* ---------------------------GET VISIT DETAILS-------------------------- */
			if(strlen($_REQUEST['kvno_nurse_id']) > 0)
			{
				$stamq = Doctrine_Core::getTable('KvnoNurse')->findBy('id', $_REQUEST['kvno_nurse_id']);
				$stamqarr = $stamq->toArray();

				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}

				$this->view->kvno_nurse_id = $_REQUEST['kvno_nurse_id'];
				if(count($stamqarr) > 0)
				{
					if($stamqarr[0]['kvno_begin_date_h'] != "0" || $stamqarr[0]['kvno_begin_date_m'] != "0")
					{
						$this->view->kvno_begin_date_h = $stamqarr[0]['kvno_begin_date_h'];
						$this->view->kvno_begin_date_m = $stamqarr[0]['kvno_begin_date_m'];
					}
					else
					{
						$this->view->kvno_begin_date_h = date('H');
						$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
					}

					if($stamqarr[0]['kvno_end_date_h'] != "0" || $stamqarr[0]['kvno_end_date_m'] != "0")
					{
						$this->view->kvno_end_date_h = $stamqarr[0]['kvno_end_date_h'];
						$this->view->kvno_end_date_m = $stamqarr[0]['kvno_end_date_m'];
					}
					else
					{
						$this->view->kvno_end_date_h = date('H');
						$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
					}

					$this->view->fahrtzeit = $stamqarr[0]['fahrtzeit'];
					$this->view->vizit_date = date('d.m.Y', strtotime($stamqarr[0]['vizit_date']));
					$this->view->fahrtstreke_km = $stamqarr[0]['fahrtstreke_km'];
					$this->view->kvno_peg = $stamqarr[0]['kvno_peg'];
					$this->view->kvno_peg_text = $stamqarr[0]['kvno_peg_text'];
					$this->view->kvno_port = $stamqarr[0]['kvno_port'];
					$this->view->kvno_port_text = $stamqarr[0]['kvno_port_text'];
					$this->view->kvno_pumps = $stamqarr[0]['kvno_pumps'];
					$this->view->kvno_pumps_text = $stamqarr[0]['kvno_pumps_text'];
					$this->view->kvno_dk = $stamqarr[0]['kvno_dk'];
					$this->view->kvno_dk_text = $stamqarr[0]['kvno_dk_text'];
					$this->view->kvno_kunstliche = $stamqarr[0]['kvno_kunstliche'];
					$this->view->kvno_kunstliche_text = $stamqarr[0]['kvno_kunstliche_text'];
					$this->view->kvno_darm = $stamqarr[0]['kvno_darm'];
					$this->view->kvno_darm_text = $stamqarr[0]['kvno_darm_text'];
					$this->view->kvno_blase = $stamqarr[0]['kvno_blase'];
					$this->view->kvno_blase_text = $stamqarr[0]['kvno_blase_text'];
					$this->view->kvno_luftrohre = $stamqarr[0]['kvno_luftrohre'];
					$this->view->kvno_luftrohre_text = $stamqarr[0]['kvno_luftrohre_text'];
					$this->view->kvno_ablaufsonde = $stamqarr[0]['kvno_ablaufsonde'];
					$this->view->kvno_ablaufsonde_text = $stamqarr[0]['kvno_ablaufsonde_text'];
					$this->view->kvno_fotodocumentation = $stamqarr[0]['kvno_fotodocumentation'];
					$this->view->kvno_sonstiges = $stamqarr[0]['kvno_sonstiges'];
					$this->view->comment_apotheke = $stamqarr[0]['comment_apotheke'];
					$kvno_global = explode(",", $stamqarr[0]['kvno_global']);
					$this->view->kvno_global = $kvno_global;
					$this->view->kvno_medizini1 = $stamqarr[0]['kvno_medizini1'];
					$this->view->kvno_medizini2 = explode(",", $stamqarr[0]['kvno_medizini2']);

					$sympval = new SymptomatologyValues();
					$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set

					$form_symp = new KvnoNurseSymp();
					$form_symps = $form_symp->getKvnoNurseSymp($_REQUEST['kvno_nurse_id'], $ipid);

					foreach($set_details as $key => $sym)
					{
						$newsymptomarr[$key] = $sym;
						$newsymptomarr[$key]['symptomid'] = $sym['id'];
						$newsymptomarr[$key]['entered_value'] = $form_symps[$sym['id']]['current_value'];
						$newsymptomarr[$key]['input_value'] = $form_symps[$sym['id']]['last_value'];
						$newsymptomarr[$key]['comment'] = $form_symps[$sym['id']]['comment'];
					}

					$this->view->symptomarr = $newsymptomarr;
				}
				else
				{

				}

				/* ---------------------------SAVE -- EDIT VISIT-------------------------- */
				if($this->getRequest()->isPost())
				{
					if(empty($_POST['pdfexport']))
					{
						$this->visitform_changes($ipid, $_REQUEST['kvno_nurse_id'], 'wl_nurse_visit', $_POST);
						$this->symptomatology_changes($ipid, $_REQUEST['kvno_nurse_id'], $_POST);

						$sanfr = new Application_Form_SAKvnoNurse();
						$result = $sanfr->UpdateKvnoNurse($_POST);

						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}

						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}
			}
		}

		public function sakvnonurseformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->phone = $patientarr['phone'];
			$this->view->epid = strtoupper($epid);
			$this->view->wlform = '2';

			/* ---------------------------Set default date for visit-------------------------- */
			$this->view->kvno_begin_date_h = date('H', strtotime('-5 minutes'));
			$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
			$this->view->kvno_end_date_h = date('H', strtotime('+10 minutes'));
			$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
			$this->view->vizit_date = date('d.m.Y');

			/* ---------------------------Get patient details fro Stammdaten-------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];

			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);
			$kunstliche = explode(",", $weit[0]['kunstliche']);
			if(in_array('1', $kunstliche))
			{
				$darm = '1';
			}
			else
			{
				$darm = '0';
			}

			if(in_array('2', $kunstliche))
			{
				$blase = '1';
			}
			else
			{
				$blase = '0';
			}

			if(in_array('3', $kunstliche))
			{
				$luftrohre = '1';
			}
			else
			{
				$luftrohre = '0';
			}

			if(in_array('4', $kunstliche))
			{
				$ablaufsonde = '1';
			}
			else
			{
				$ablaufsonde = '0';
			}

			if(in_array('5', $kunstliche))
			{
				$this->view->kunstliche = '5';
			}

			$this->view->kunstlichemore = $weit[0]['kunstlichemore'];

			$this->view->darm = $darm;
			$this->view->blase = $blase;
			$this->view->luftrohre = $luftrohre;
			$this->view->ablaufsonde = $ablaufsonde;

			/* ---------------------------Get patient Symptomatology-------------------------- */
			$symp = new Symptomatology();
			$symptomarr_ext = $symp->getPatientSymptpomatologyLast($ipid);
			$sympval = new SymptomatologyValues();
			$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set
			foreach($set_details as $key => $sym)
			{
				//cycle the whole set
				$novalue = 1;
				if(!empty($symptomarr_ext))
				{
					//check for existing values
					foreach($symptomarr_ext as $extsym)
					{
						if($extsym['symptomid'] == $sym['id'])
						{
							//grab values for current symptom
							$symptomarr[$key] = $extsym;
							$symptomarr[$key]['sym_desc_array'] = $extsym['sym_description'];
							$symptomarr[$key]['sym_description'] = utf8_encode($extsym['sym_description']['value']);
							$novalue = 0;
							break;
						}
					}
				}

				if($novalue == 1)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
					$symptomarr[$key]['sym_desc_array'] = null;
				}
			}
			$this->view->symptomarr = $symptomarr;

			/* ---------------------------Get Client details - address ------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$client_address = $clientdata[0]['street1'] . ',' . $clientdata[0]['postcode'] . ',' . $clientdata[0]['city'];

			/* ---------------------------Get User details --  address-------------------------- */
			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$user_address = $userdata[0]['street1'] . ',' . $userdata[0]['zip'] . ',' . $userdata[0]['city'];

			if($userdata[0]['km_calculation_settings'] == "user")
			{
				$s = $user_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "client")
			{
				$s = $client_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "disabled")
			{
				$s = "";
			}

			$ploc = new PatientLocation();
			$plocarray = $ploc->getActiveLocationPatInfo($ipid);

			if(empty($plocarray) || $plocarray[0]['location_type'] == '5')
			{
//			if at home grab address from patient details
// 				$plocarray[0] = $patientmaster->getMasterData($decid, 0);
				$plocarray[0] = $patientmaster->get_patientMasterData();
				$plocarray[0]['street'] = $plocarray[0]['street1'];
			}

			$f = $plocarray[0]['street'] . ',' . $plocarray[0]['zip'] . ',' . $plocarray[0]['city'];

			if(strlen($f) > 2 && strlen($s) > 2)
			{
				$route = Pms_CommonData::getRouteLength($s, $f);
				$this->view->fahrtstreke_km = $route['length'];
				$this->view->fahrtzeit_min = $route['duration'];

				// TODO-1211
				$route_error = 0 ;
				if(empty($route['duration']) && $route['duration'] !== false ){
					$route_error = 1 ;
				}
				$this->view->route_error = $route_error;
			}

			/* ---------------------------Get Client details --  symptomatology view options-------------------------- */
			$this->view->sympt_view_select = $clientdata[0]['symptomatology_scale'];  // n-> NUmbers Scale(0-10);  a -> Attributes scale (none/weak/averge/strong)
			/* --------------------------------------------------------------------------------------------------------- */

			if($this->getRequest()->isPost())
			{
				/* ---------------------------SAVE ADD VISIT-------------------------- */
				if(empty($_POST['pdfexport']) && strlen($_REQUEST['kvno_nurse_id']) == 0)
				{
					if(empty($_POST['kvno_sonstiges']) && in_array("3", $_POST['kvno_medizini']))
					{
						$this->view->error_kvno_sonstiges = "formerror";
						$error = 1;
					}

					if($error > 0)
					{
						$this->view->error_alert = '1';
					}

					$sanfr = new Application_Form_SAKvnoNurse();
					$result = $sanfr->insertKvnoNurse($_POST);
					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}

				/* ---------------------------PDF EXPORT-------------------------- */
				if(strlen($_POST['pdfexport']) > 0)
				{
					$post = $_POST;
					$post['kunstliche'] = $this->view->kunstliche;
					$post['darm'] = $this->view->darm;
					$post['blase'] = $this->view->blase;
					$post['luftrohre'] = $this->view->luftrohre;
					$post['ablaufsonde'] = $this->view->ablaufsonde;
					$post['sympt_view_select'] = $this->view->sympt_view_select;
					$this->generateformPdf(3, $post, 'SAKVNO_nurse', "sakvno_nurseformpdf.html");
				}
			}

			/* ---------------------------GET VISIT DETAILS-------------------------- */
			if(strlen($_REQUEST['kvno_nurse_id']) > 0)
			{
				$stamq = Doctrine_Core::getTable('KvnoNurse')->findBy('id', $_REQUEST['kvno_nurse_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}

				$this->view->kvno_nurse_id = $_REQUEST['kvno_nurse_id'];
				if(count($stamqarr) > 0)
				{
					if($stamqarr[0]['kvno_begin_date_h'] != "0" || $stamqarr[0]['kvno_begin_date_m'] != "0")
					{
						$this->view->kvno_begin_date_h = $stamqarr[0]['kvno_begin_date_h'];
						$this->view->kvno_begin_date_m = $stamqarr[0]['kvno_begin_date_m'];
					}
					else
					{
						$this->view->kvno_begin_date_h = date('H');
						$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
					}

					if($stamqarr[0]['kvno_end_date_h'] != "0" || $stamqarr[0]['kvno_end_date_m'] != "0")
					{
						$this->view->kvno_end_date_h = $stamqarr[0]['kvno_end_date_h'];
						$this->view->kvno_end_date_m = $stamqarr[0]['kvno_end_date_m'];
					}
					else
					{
						$this->view->kvno_end_date_h = date('H');
						$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
					}

					$this->view->fahrtzeit = $stamqarr[0]['fahrtzeit'];
					$this->view->vizit_date = date('d.m.Y', strtotime($stamqarr[0]['vizit_date']));
					$this->view->fahrtstreke_km = $stamqarr[0]['fahrtstreke_km'];
					$this->view->kvno_peg = $stamqarr[0]['kvno_peg'];
					$this->view->kvno_peg_text = $stamqarr[0]['kvno_peg_text'];
					$this->view->kvno_port = $stamqarr[0]['kvno_port'];
					$this->view->kvno_port_text = $stamqarr[0]['kvno_port_text'];
					$this->view->kvno_pumps = $stamqarr[0]['kvno_pumps'];
					$this->view->kvno_pumps_text = $stamqarr[0]['kvno_pumps_text'];
					$this->view->kvno_dk = $stamqarr[0]['kvno_dk'];
					$this->view->kvno_dk_text = $stamqarr[0]['kvno_dk_text'];
					$this->view->kvno_kunstliche = $stamqarr[0]['kvno_kunstliche'];
					$this->view->kvno_kunstliche_text = $stamqarr[0]['kvno_kunstliche_text'];
					$this->view->kvno_darm = $stamqarr[0]['kvno_darm'];
					$this->view->kvno_darm_text = $stamqarr[0]['kvno_darm_text'];
					$this->view->kvno_blase = $stamqarr[0]['kvno_blase'];
					$this->view->kvno_blase_text = $stamqarr[0]['kvno_blase_text'];
					$this->view->kvno_luftrohre = $stamqarr[0]['kvno_luftrohre'];
					$this->view->kvno_luftrohre_text = $stamqarr[0]['kvno_luftrohre_text'];
					$this->view->kvno_ablaufsonde = $stamqarr[0]['kvno_ablaufsonde'];
					$this->view->kvno_ablaufsonde_text = $stamqarr[0]['kvno_ablaufsonde_text'];
					$this->view->kvno_fotodocumentation = $stamqarr[0]['kvno_fotodocumentation'];
					$this->view->kvno_sonstiges = $stamqarr[0]['kvno_sonstiges'];
					$this->view->comment_apotheke = $stamqarr[0]['comment_apotheke'];
					$kvno_global = explode(",", $stamqarr[0]['kvno_global']);
					$this->view->kvno_global = $kvno_global;
					$this->view->kvno_medizini1 = $stamqarr[0]['kvno_medizini1'];
					$this->view->kvno_medizini2 = explode(",", $stamqarr[0]['kvno_medizini2']);

					$sympval = new SymptomatologyValues();
					$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set

					$form_symp = new KvnoNurseSymp();
					$form_symps = $form_symp->getKvnoNurseSymp($_REQUEST['kvno_nurse_id'], $ipid);

					foreach($set_details as $key => $sym)
					{
						$newsymptomarr[$key] = $sym;
						$newsymptomarr[$key]['symptomid'] = $sym['id'];
						$newsymptomarr[$key]['entered_value'] = $form_symps[$sym['id']]['current_value'];
						$newsymptomarr[$key]['input_value'] = $form_symps[$sym['id']]['last_value'];
						$newsymptomarr[$key]['comment'] = $form_symps[$sym['id']]['comment'];
					}
					$this->view->symptomarr = $newsymptomarr;
				}
				else
				{

				}

				/* ---------------------------SAVE -- EDIT VISIT-------------------------- */
				if($this->getRequest()->isPost())
				{
					if(empty($_POST['pdfexport']))
					{
						$this->visitform_changes($ipid, $_REQUEST['kvno_nurse_id'], 'wl_nurse_visit', $_POST);
						$this->symptomatology_changes($ipid, $_REQUEST['kvno_nurse_id'], $_POST);

						$sanfr = new Application_Form_SAKvnoNurse();
						$result = $sanfr->UpdateKvnoNurse($_POST);
						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}
			}
		}

		public function kvnoanlage7formAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();

			$this->view->birth = $patientarr['birthd'];
			$split = explode(" ", $patientarr['admission_date']);
			$bsplit = explode("-", $split[0]);
			$this->view->admisiondate = $bsplit[2] . $bsplit[1] . $bsplit[0];
			
			if($patientarr['sex'] == 1)
			{
			    $this->view->gender = $this->view->translate("male");
			}
			elseif($patientarr['sex'] == 2)
			{
			    $this->view->gender = $this->view->translate("female");
			}
			elseif($patientarr['sex'] != null && $patientarr['sex'] == 0)
			{
			    $this->view->gender = $this->view->translate("divers");  //ISPC-2442 @Lore   30.09.2019
			}
			else         //if($patientarr['sex'] == null) &&  == ""
			{    
			    $this->view->gender = $this->view->translate("gender_not_documented");
			}
			
			if($patientarr['living_will'] == 1)
			{
				$living_will = " Patientenverfügung,";
			}

			$cntpers = Doctrine_Core::getTable('ContactPersonMaster')->findBy('ipid', $ipid);
			$cntpersarr = $cntpers->toArray();
			$vollsmatch_sum = 0;

			foreach($cntpersarr as $value)
			{
				$vollsmatch_sum = +$value['cnt_hatversorgungsvollmacht'];
			}

			if($vollsmatch_sum > 0)
			{
				$vollsmatch = " Vorsorgevollmacht,";
			}

			$vorlage = $living_will . $vollsmatch;
			$this->view->vorlage = substr($vorlage, 0, -1);
			$this->view->datum_der_erfassung1 = date('d.m.Y');

			$patlives = Doctrine_Core::getTable('PatientLives')->findBy('ipid', $ipid);
			$patlivesarr = $patlives->toArray();

			if($patlivesarr[0]['alone'] > 0)
			{
				$this->view->wohnsituation = "alleine";
			}
			else if($patlivesarr[0]['house_of_relatives'])
			{
				$this->view->wohnsituation = "im Haus der Angehörigen";
			}
			else if($patlivesarr[0]['apartment'])
			{
				$this->view->wohnsituation = "Wohnung";
			}
			else if($patlivesarr[0]['home'])
			{
				$this->view->wohnsituation = "Heim";
			}
			else if($patlivesarr[0]['hospiz'])
			{
				$this->view->wohnsituation = "Hospiz";
			}
			else if($patlivesarr[0]['sonstiges'])
			{
				$this->view->wohnsituation = "Sonstiges";
			}

			//***********************************//
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);

			if(count($metaids) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = ",";
				$metadiagnosis = "";
				foreach($metaids as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle)
					{
						$metadiagnosis .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['icdnumber'];
						$comma = ",";
					}
				}
			}

			$this->view->icddiagnosis = $diagnosis; //.$metadiagnosis;

			$assesment = Doctrine_Core::getTable('KvnoAssessment')->findBy('ipid', $ipid);
			$assesmentarr = $assesment->toArray();

			$begleitung = "";
			if($assesmentarr[0]['sapvteam'] == 1)
			{
				$begleitung .= " SAPV-Team,";
			}

			if($assesmentarr[0]['hauzart'] == 1)
			{
				$begleitung .= " Hausarzt, ";
			}

			if($assesmentarr[0]['pflege'] == 1)
			{
				$begleitung .= " ambulante Pflege,";
			}

			if($assesmentarr[0]['palliativ'] == 1)
			{
				$begleitung .= " Palliativarzt (QPA),";
			}

			if($assesmentarr[0]['palliativpf'] == 1)
			{
				$begleitung .= " Palliativpflege (AHPP, APD),";
			}

			if($assesmentarr[0]['palliativber'] == 1)
			{
				$begleitung .= " Palliativberatung (AHPB),";
			}

			if($assesmentarr[0]['dienst'] == 1)
			{
				$begleitung .= " Ehrenamtlicher Dienst,";
			}

			$this->view->begleitung = substr($begleitung, 0, -1);
			$this->view->ecog = $assesmentarr[0]['nromaleaktiv'];
			// Symptomatics
			$this->view->schmerzen = $assesmentarr[0]['schmerzen'];
			$this->view->ubelkeit = $assesmentarr[0]['ubelkeit'];
			$this->view->erbrechen = $assesmentarr[0]['erbrechen'];
			$this->view->luftnot = $assesmentarr[0]['luftnot'];
			$this->view->verstopfung = $assesmentarr[0]['verstopfung'];
			$this->view->swache = $assesmentarr[0]['swache'];
			$this->view->appetitmangel = $assesmentarr[0]['appetitmangel'];
			$this->view->dekubitus = $assesmentarr[0]['dekubitus'];
			$this->view->hilfebedarf = $assesmentarr[0]['hilfebedarf'];
			$this->view->depresiv = $assesmentarr[0]['depresiv'];
			$this->view->angst = $assesmentarr[0]['angst'];
			$this->view->anspannung = $assesmentarr[0]['anspannung'];
			$this->view->desorientier = $assesmentarr[0]['desorientier'];
			$this->view->versorgung = $assesmentarr[0]['versorgung'];
			$this->view->umfelds = $assesmentarr[0]['umfelds'];
			// end symptomatics

			$this->view->kontaktes = $assesmentarr[0]['behandlungmore'];
			$this->view->who = $assesmentarr[0]['who'];
			$this->view->aufwand_mit = $assesmentarr[0]['anderemore'];

			if($patientarr['isdischarged'] == 1)
			{
				$patdis = Doctrine_Core::getTable('PatientDischarge')->findBy('ipid', $ipid);
				$patdisarr = $patdis->toArray();
				if(!empty($patdisarr))
				{
					$this->view->entlasung_date = date("d.m.Y", strtotime($patdisarr[0]['discharge_date']));
					$dis = Doctrine_Core::getTable('DischargeMethod')->findBy('id', $patdisarr[0]['discharge_method']);
					$disarr = $dis->toArray();
					$abbrev = strtolower($disarr[0]['abbr']);
					if($abbrev == "tod")
					{
						$disloc = new DischargeLocation();
						$dislocarr = $disloc->getDischargeLocationbyId($patdisarr[0]['discharge_location'], $logininfo->clientid);

						$this->view->sterbeort = $dislocarr[0]['location'];
					}
					else
					{
						$this->view->sterbeort = "";
					}
				}
				else
				{
					$this->view->entlasung_date = date("d.m.Y");
					$this->view->sterbeort = "";
				}
			}

			$sapv = new SapvVerordnung();
			$sapvarray = $sapv->getSapvVerordnungData($patientarr['ipid']);

			$sapv_type = array(1 => "Beratung", 2 => "Koordination", 3 => "Teilversorgung", 4 => "Vollversorgung");
			$sapv_status = array(0 => "", 1 => "abgelehnt", 2 => "genehmigt", 3 => "keine Angabe");
			$sapv_select = array();
			$x = 0;
			foreach($sapvarray as $value)
			{
				//order is KO,BE,TV,VV => 2,1,3,4
				$verordnet = max(explode(",", $value['verordnet']));

				if($verordnet == 2 && in_array("1", explode(",", $value['verordnet']), true))
				{
					$verordnet = 1;
				}
				$verordnungam = date("d.m.Y", strtotime($value['verordnungam']));
				$verordnungbis = date("d.m.Y", strtotime($value['verordnungbis']));
				$sapv_select[$value['id']] = array(
					'value' => $sapv_type[$verordnet],
					'name' => $sapv_type[$verordnet] . ' ' . $verordnungam . '-' . $verordnungbis . ' ' . $sapv_status[$value['status']]
				);
			}
			$this->view->sapv_select = $sapv_select;

			$dockm = Doctrine_Query::create()
				->select("*,count(fahrtstreke_km) as km")
				->from('KvnoDoctor')
				->where("ipid='" . $ipid . "'")
				->groupBy('fahrtstreke_km')
				->orderBy('fahrtstreke_km ASC');
			$dockmarray = $dockm->fetchArray();

			$dockm_nr = array();
			foreach($dockmarray as $value)
			{
				$dockm_nr[$value['fahrtstreke_km']] = $value['km'];
			}

			$nursekm = Doctrine_Query::create()
				->select("*,count(fahrtstreke_km) as km")
				->from('KvnoNurse')
				->where("ipid='" . $ipid . "'")
				->groupBy('fahrtstreke_km')
				->orderBy('fahrtstreke_km ASC');
			$nursekmarray = $nursekm->fetchArray();

			$nursekm_nr = array();
			foreach($nursekmarray as $value)
			{
				$nursekm_nr[$value['fahrtstreke_km']] = $value['km'];
			}
			$vizit_km = Pms_CommonData::array_add($dockm_nr, $nursekm_nr);
			$regel_km = Pms_CommonData::array_max_key($vizit_km);
			$this->view->regel_km = $regel_km;

			if(strlen($_POST['btnsave']) > 0 && strlen($_REQUEST['kvno_anlage_id']) == 0)
			{
				$kvno = new Application_Form_KvnoAnlage7();
				$result = $kvno->insertKvnoAnlage7($_POST);
				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}

				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
			}

			if(strlen($_POST['btnsubmit']) > 0)
			{
				$post = $_POST;
				$post['birth'] = $this->view->birth;
				$post['admisiondate'] = $this->view->admisiondate;
				$post['gender'] = $this->view->gender;
				$post['vorlage'] = $this->view->vorlage;
				$post['begleitung'] = $this->view->begleitung;
				$post['icddiagnosis'] = $this->view->icddiagnosis;
				$post['wohnsituation'] = $this->view->wohnsituation;
				$post['regel_km'] = $this->view->regel_km;

				$this->generateformPdf(3, $post, 'KVNO_anlage7', "kvno_anlage7formpdf.html");
			}

			if(strlen($_REQUEST['kvno_anlage_id']) > 0)
			{
				$stamq = Doctrine_Core::getTable('KvnoAnlage7')->findBy('id', $_REQUEST['kvno_anlage_id']);
				$stamqarr = $stamq->toArray();
				//print_r($stamqarr);
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}

				$this->view->kvno_anlage_id = $_REQUEST['kvno_anlage_id'];

				if(count($stamqarr) > 0)
				{
					$this->view->kvno_end_date_h = $stamqarr[0]['kvno_end_date_h'];
					$this->view->wohnsituation = $stamqarr[0]['wohnsituation'];
					$this->view->ecog = $stamqarr[0]['ecog'];
					$this->view->datum_der_erfassung1 = date('d.m.Y', strtotime($stamqarr[0]['datum_der_erfassung1']));
					$this->view->schmerzen = $stamqarr[0]['schmerzen'];
					$this->view->ubelkeit = $stamqarr[0]['ubelkeit'];
					$this->view->erbrechen = $stamqarr[0]['erbrechen'];
					$this->view->luftnot = $stamqarr[0]['luftnot'];
					$this->view->verstopfung = $stamqarr[0]['verstopfung'];
					$this->view->swache = $stamqarr[0]['swache'];
					$this->view->appetitmangel = $stamqarr[0]['appetitmangel'];
					$this->view->mudigkeit = $stamqarr[0]['mudigkeit'];
					$this->view->dekubitus = $stamqarr[0]['dekubitus'];
					$this->view->hilfebedarf = $stamqarr[0]['hilfebedarf'];
					$this->view->depresiv = $stamqarr[0]['depresiv'];
					$this->view->angst = $stamqarr[0]['angst'];
					$this->view->anspannung = $stamqarr[0]['anspannung'];
					$this->view->desorientier = $stamqarr[0]['desorientier'];
					$this->view->versorgung = $stamqarr[0]['versorgung'];
					$this->view->umfelds = $stamqarr[0]['umfelds'];
					$this->view->kontaktes = $stamqarr[0]['kontaktes'];
					$this->view->who = $stamqarr[0]['who'];
					$this->view->steroide = $stamqarr[0]['steroide'];
					$this->view->chemotherapie = $stamqarr[0]['chemotherapie'];
					$this->view->strahlentherapie = $stamqarr[0]['strahlentherapie'];
					$this->view->aufwand_mit = $stamqarr[0]['aufwand_mit'];
					$this->view->problem_besonders = $stamqarr[0]['problem_besonders'];
					$this->view->problem_ausreichend = $stamqarr[0]['problem_ausreichend'];

					if($stamqarr[0]['entlasung_date'] != '0000-00-00 00:00:00' && $stamqarr[0]['entlasung_date'] != '--')
					{
						$this->view->entlasung_date = date('d.m.Y', strtotime($stamqarr[0]['entlasung_date']));
					}
					else
					{
						$this->view->entlasung_date = "";
					}
					$this->view->therapieende = $stamqarr[0]['therapieende'];
					$this->view->sterbeort = $stamqarr[0]['sterbeort'];
					$this->view->zufriedenheit_mit = $stamqarr[0]['zufriedenheit_mit'];
					$this->view->identifiknr = $stamqarr[0]['identifiknr'];
					$this->view->sapv = $stamqarr[0]['sapv'];
					$this->view->verordnung_datum = $stamqarr[0]['verordnung_datum'];
					$this->view->art_der_erordnung = $stamqarr[0]['art_der_erordnung'];
					$this->view->verordnung_durch = $stamqarr[0]['verordnung_durch'];
					$this->view->ubernahme_aus = $stamqarr[0]['ubernahme_aus'];
					$arztlich = explode(",", $stamqarr[0]['arztlich']);
					$this->view->arztlich = $arztlich;
					$this->view->arztlich_more = $stamqarr[0]['arztlich_more'];
					$pflegerisch = explode(",", $stamqarr[0]['pflegerisch']);
					$this->view->pflegerisch = $pflegerisch;

					$ambulanter_hospizdienst = explode(",", $stamqarr[0]['ambulanter_hospizdienst']);
					$this->view->ambulanter_hospizdienst = $ambulanter_hospizdienst;
					$weitere_professionen = explode(",", $stamqarr[0]['weitere_professionen']);
					$this->view->weitere_professionen = $weitere_professionen;
					$this->view->weitere_professionen_more = $stamqarr[0]['weitere_professionen_more'];
					$this->view->regel_km = $stamqarr[0]['regel_km'];
					$this->view->anzahl_der_teambes = $stamqarr[0]['anzahl_der_teambes'];
					$this->view->krankenhause = $stamqarr[0]['krankenhause'];
					$this->view->end_date_sapv = $stamqarr[0]['end_date_sapv'];
					$this->view->sapvteam = $stamqarr[0]['sapvteam'];
					$this->view->versorgungsstufe = $stamqarr[0]['versorgungsstufe'];
					$this->view->grund_einweisung = $stamqarr[0]['grund_einweisung'];

					if($stamqarr[0]['datum_der_erfassung2'] != '0000-00-00 00:00:00')
					{
						$this->view->datum_der_erfassung2 = date('d.m.Y', strtotime($stamqarr[0]['datum_der_erfassung2']));
					}
					else
					{
						$this->view->datum_der_erfassung2 = "";
					}
				}
				else
				{

				}

				if(strlen($_POST['btnsave']) > 0)
				{
					$sanfr = new Application_Form_KvnoAnlage7();
					$result = $sanfr->UnsertKvnoAnlage7($_POST);
					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
			}
		}

		public function dgpanlage7formAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();

			/* ------------------Patient  details ------------------ */
			$this->view->birth = $patientarr['birthd'];
			$split = explode(" ", $patientarr['admission_date']);
			$bsplit = explode("-", $split[0]);
			$this->view->admisiondate = $bsplit[2] . $bsplit[1] . $bsplit[0];

			if($patientarr['sex'] == 1)
			{
			    $this->view->gender = $this->view->translate("male");
			}
			elseif($patientarr['sex'] == 2)
			{
			    $this->view->gender = $this->view->translate("female");
			}
			elseif($patientarr['sex'] != null && $patientarr['sex'] == 0)
			{
			    $this->view->gender = $this->view->translate("divers");  //ISPC-2442 @Lore   30.09.2019
			}
			else         // if($patientarr['sex'] == null)  && == ""
			{
			    $this->view->gender = $this->view->translate("gender_not_documented");
			}

			/* ------------------Patient-> living will ------------------ */
			if($patientarr['living_will'] == 1)
			{
				$living_will = " Patientenverfügung,";
			}

			/* ------------------Patient-> contact person ------------------ */
			$cntpers = Doctrine_Core::getTable('ContactPersonMaster')->findBy('ipid', $ipid);
			$cntpersarr = $cntpers->toArray();
			$vollsmatch_sum = 0;

			foreach($cntpersarr as $value)
			{
				$vollsmatch_sum = +$value['cnt_hatversorgungsvollmacht'];
			}

			if($vollsmatch_sum > 0)
			{
				$vollsmatch = " Vorsorgevollmacht,";
			}

			$vorlage = $living_will . $vollsmatch;
			$this->view->vorlage = substr($vorlage, 0, -1);
			$this->view->datum_der_erfassung1 = date('d.m.Y');

			/* ------------------Patient->  housing situation------------------(Wohnsituation) */
			if(empty($_REQUEST['kvno_anlage_id']))
			{
				$patlives = Doctrine_Core::getTable('PatientLives')->findBy('ipid', $ipid);
				$patlivesarr = $patlives->toArray();

				if($patlivesarr)
				{
					$this->view->alone = $patlivesarr[0]['alone'];
					$this->view->house_of_relatives = $patlivesarr[0]['house_of_relatives'];
					$this->view->apartment = $patlivesarr[0]['apartment'];
					$this->view->home = $patlivesarr[0]['home'];
					$this->view->hospiz = $patlivesarr[0]['hospiz'];
					$this->view->sonstiges = $patlivesarr[0]['sonstiges'];
				}
			}

			/* ------------------Patient->  main diagnosis------------------ */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);

			if(count($metaids) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = ",";
				$metadiagnosis = "";
				foreach($metaids as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle)
					{
						$metadiagnosis .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['icdnumber'];
						$comma = ",";
					}
				}
			}

			$this->view->icddiagnosis = $diagnosis; //.$metadiagnosis;

			/* ------------------Patient->  assesment details------------------ */
			//assessment modals missing id
			$this->view->pid = $_GET['id'];

			//pflegedienstes procedure start
			//get last pfledge to be edited!
			$pat_pfl = new PatientPflegedienste();
			$res_pfledge = $pat_pfl->getPatientLastPflegediensteNew($ipid, false);
			$res_pfledge_palliativ = $pat_pfl->getPatientLastPflegediensteNew($ipid, true);
			$this->view->ppd_id = $res_pfledge_palliativ[0]['pflege_id'];
			$this->view->pfledge_id = $res_pfledge[0]['pflege_id'];

			$assesment = Doctrine_Core::getTable('KvnoAssessment')->findBy('ipid', $ipid);
			$assesmentarr = $assesment->toArray();

			$this->view->sapvteam_as = $assesmentarr[0]['sapvteam'];
			$this->view->hausarzt = $assesmentarr[0]['hausarzt'];
			$this->view->pflege = $assesmentarr[0]['pflege'];
			$this->view->palliativ = $assesmentarr[0]['palliativ'];
			$this->view->palliativpf = $assesmentarr[0]['palliativpf'];
			$this->view->palliativber = $assesmentarr[0]['palliativber'];
			$this->view->dienst = $assesmentarr[0]['dienst'];
			$this->view->ecog = $assesmentarr[0]['nromaleaktiv'];

			/* ------------------Patient->  assesment Symptomatics------------------ */
			$this->view->schmerzen = $assesmentarr[0]['schmerzen'];
			$this->view->ubelkeit = $assesmentarr[0]['ubelkeit'];
			$this->view->erbrechen = $assesmentarr[0]['erbrechen'];
			$this->view->luftnot = $assesmentarr[0]['luftnot'];
			$this->view->verstopfung = $assesmentarr[0]['verstopfung'];
			$this->view->swache = $assesmentarr[0]['swache'];
			$this->view->appetitmangel = $assesmentarr[0]['appetitmangel'];
			$this->view->dekubitus = $assesmentarr[0]['dekubitus'];
			$this->view->hilfebedarf = $assesmentarr[0]['hilfebedarf'];
			$this->view->depresiv = $assesmentarr[0]['depresiv'];
			$this->view->angst = $assesmentarr[0]['angst'];
			$this->view->anspannung = $assesmentarr[0]['anspannung'];
			$this->view->desorientier = $assesmentarr[0]['desorientier'];
			$this->view->versorgung = $assesmentarr[0]['versorgung'];
			$this->view->umfelds = $assesmentarr[0]['umfelds'];
			// end symptomatics
			$this->view->kontaktes = $assesmentarr[0]['behandlungmore'];
			$this->view->who = $assesmentarr[0]['who'];
			$this->view->aufwand_mit = $assesmentarr[0]['anderemore'];

			/* ------------------Patient->  discharge details------------------ */
			$dl = new DischargeLocation();
			$discharge_locations = $dl->getDischargeLocation($logininfo->clientid, 1);
			$this->view->discharge_locations = $discharge_locations;

			if($patientarr['isdischarged'] == 1)
			{
				$patdis = Doctrine_Core::getTable('PatientDischarge')->findBy('ipid', $ipid);
				$patdisarr = $patdis->toArray();
				if(!empty($patdisarr))
				{
					$this->view->entlasung_date = date("d.m.Y", strtotime($patdisarr[0]['discharge_date']));
					$dis = Doctrine_Core::getTable('DischargeMethod')->findBy('id', $patdisarr[0]['discharge_method']);
					$disarr = $dis->toArray();
					$abbrev = strtolower($disarr[0]['abbr']);
					if($abbrev == "tod")
					{
						$disloc = new DischargeLocation();
						$dislocarr = $disloc->getDischargeLocationbyId($patdisarr[0]['discharge_location'], $logininfo->clientid);
						$this->view->sterbeort = $dislocarr[0]['location'];
						$this->view->sterbeort_dgp = $dislocarr[0]['id'];
					}
					else
					{
						$this->view->sterbeort = "";
						$this->view->sterbeort_dgp = "";
					}
				}
				else
				{
					$this->view->entlasung_date = date("d.m.Y");
					$this->view->sterbeort = "";
					$this->view->sterbeort_dgp = "";
				}
			}
			if($_REQUEST['dbg'])
			{
				$dislocarr[0]['id'];
				print_r($dislocarr);
				print_r($abbrev);
				exit;
			}
			/* ------------------Patient->  Sapv Verordnung data------------------ */
			$sapv = new SapvVerordnung();
			$sapvarray = $sapv->getSapvVerordnungData($patientarr['ipid']);

			$sapv_type = array(1 => "Beratung", 2 => "Koordination", 3 => "Teilversorgung", 4 => "Vollversorgung");
			$sapv_status = array(0 => "", 1 => "abgelehnt", 2 => "genehmigt", 3 => "keine Angabe");
			$sapv_select = array();
			$x = 0;
			foreach($sapvarray as $value)
			{
				//order is KO,BE,TV,VV => 2,1,3,4
				$verordnet = max(explode(",", $value['verordnet']));

				if($verordnet == 2 && in_array("1", explode(",", $value['verordnet']), true))
				{
					$verordnet = 1;
				}
				$verordnungam = date("d.m.Y", strtotime($value['verordnungam']));
				$verordnungbis = date("d.m.Y", strtotime($value['verordnungbis']));
				$sapv_select[$value['id']] = array(
					'value' => $sapv_type[$verordnet],
					'name' => $sapv_type[$verordnet] . ' ' . $verordnungam . '-' . $verordnungbis . ' ' . $sapv_status[$value['status']]
				);
			}
			$this->view->sapv_select = $sapv_select;

			/* ------------------Patient->  visit Doctor form details------------------ */
			$dockm = Doctrine_Query::create()
				->select("*,count(fahrtstreke_km) as km")
				->from('KvnoDoctor')
				->where("ipid='" . $ipid . "'")
				->groupBy('fahrtstreke_km')
				->orderBy('fahrtstreke_km ASC');
			$dockmarray = $dockm->fetchArray();

			$dockm_nr = array();
			foreach($dockmarray as $value)
			{
				$dockm_nr[$value['fahrtstreke_km']] = $value['km'];
			}

			/* ------------------Patient-> visit Nurse form details------------------ */
			$nursekm = Doctrine_Query::create()
				->select("*,count(fahrtstreke_km) as km")
				->from('KvnoNurse')
				->where("ipid='" . $ipid . "'")
				->groupBy('fahrtstreke_km')
				->orderBy('fahrtstreke_km ASC');
			$nursekmarray = $nursekm->fetchArray();

			$nursekm_nr = array();
			foreach($nursekmarray as $value)
			{
				$nursekm_nr[$value['fahrtstreke_km']] = $value['km'];
			}
			$vizit_km = Pms_CommonData::array_add($dockm_nr, $nursekm_nr);
			$regel_km = Pms_CommonData::array_max_key($vizit_km);
			$this->view->regel_km = $regel_km;


			/* ------------------If save button ------------------ */
			if(strlen($_POST['btnsave']) > 0 && strlen($_REQUEST['kvno_anlage_id']) == 0)
			{
				if($error > 0)
				{

				}
				$kvno = new Application_Form_DgpAnlage7();
				$result = $kvno->insertDgpAnlage7($_POST);

				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}
				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
			}

			/* ------------------If submit pdf  button ------------------ */
			if(strlen($_POST['btnsubmit']) > 0)
			{
				$post = $_POST;
				$post['birth'] = $this->view->birth;
				$post['admisiondate'] = $this->view->admisiondate;
				$post['gender'] = $this->view->gender;
				$post['vorlage'] = $this->view->vorlage;
				$post['icddiagnosis'] = $this->view->icddiagnosis;
				$post['regel_km'] = $this->view->regel_km;

				if($_POST['wohnsituation'] == '1')
				{
					$post['alone'] = '1';
				}
				if($_POST['wohnsituation'] == '2')
				{
					$post['house_of_relatives'] = '1';
				}
				if($_POST['wohnsituation'] == '4')
				{
					$post['home'] = '1';
				}
				if($_POST['wohnsituation'] == '6')
				{
					$post['sonstiges'] = '1';
				}

				$post['regel_km'] = $_POST['regel_km'];
				$post['sapvteam_as'] = $_POST['begleitung']['sapvteam_as'];
				$post['hausarzt'] = $_POST['begleitung']['hausarzt'];
				$post['pflege'] = $_POST['begleitung']['pflege'];
				$post['palliativ'] = $_POST['begleitung']['palliativ'];
				$post['palliativpf'] = $_POST['begleitung']['palliativpf'];
				$post['palliativber'] = $_POST['begleitung']['palliativber'];
				$post['dienst'] = $_POST['begleitung']['dienst'];
				$post['palliativstation'] = $_POST['begleitung']['palliativstation'];
				$post['pcteam'] = $_POST['pcteam'];
				$post['sterbeort_dgp'] = $discharge_locations[$_POST['sterbeort_dgp']];
				$post['hospiz_stationaer'] = $_POST['begleitung']['hospiz_stationaer'];
				$post['kh_andere_station'] = $_POST['begleitung']['kh_andere_station'];
				$post['heim'] = $_POST['begleitung']['heim'];
				$post['palliative_care_team'] = $_POST['begleitung']['palliative_care_team'];
				$post['sonstige_behandlung'] = $_POST['begleitung']['sonstige_behandlung'];
				//var_dump($_POST);exit;
				$this->generateformPdf(3, $post, 'DGP_anlage7', "dgp_anlage7formpdf.html");
			}

			/* ------------------Get details if form has already been filed------------------ */
			if(!empty($_REQUEST['kvno_anlage_id']))
			{
				$stamq = Doctrine_Core::getTable('KvnoAnlage7')->findBy('id', $_REQUEST['kvno_anlage_id']);
				$stamqarr = $stamq->toArray();
				//print_r($stamqarr);
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}

				$this->view->kvno_anlage_id = $_REQUEST['kvno_anlage_id'];

				if(count($stamqarr) > 0)
				{
					$begleitung = explode(",", $stamqarr[0]['begleitung']);

					if(in_array('1', $begleitung))
					{
						$this->view->sapvteam_as = '1';
					}

					if(in_array('2', $begleitung))
					{
						$this->view->hausarzt = '1';
					}

					if(in_array('3', $begleitung))
					{
						$this->view->pflege = '1';
					}

					if(in_array('4', $begleitung))
					{
						$this->view->palliativ = '1';
					}

					if(in_array('5', $begleitung))
					{
						$this->view->palliativpf = '1';
					}

					if(in_array('6', $begleitung))
					{
						$this->view->palliativber = '1';
					}

					if(in_array('7', $begleitung))
					{
						$this->view->dienst = '1';
					}

					if(in_array('8', $begleitung))
					{
						$this->view->palliativstation = '1';
					}

					if(in_array('9', $begleitung))
					{
						$this->view->hospiz_stationaer = '1';
					}

					if(in_array('10', $begleitung))
					{
						$this->view->kh_andere_station = '1';
					}

					if(in_array('11', $begleitung))
					{
						$this->view->heim = '1';
					}

					if(in_array('12', $begleitung))
					{
						$this->view->palliative_care_team = '1';
					}

					if(in_array('13', $begleitung))
					{
						$this->view->sonstige_behandlung = '1';
					}
					$this->view->kvno_end_date_h = $stamqarr[0]['kvno_end_date_h'];

					$wohnsituation = $stamqarr[0]['wohnsituations'];
					if($wohnsituation == '1')
					{
						$this->view->alone = '1';
					}

					if($wohnsituation == '2')
					{
						$this->view->house_of_relatives = '1';
					}

					if($wohnsituation == '3')
					{
						$this->view->apartment = '1';
					}

					if($wohnsituation == '4')
					{
						$this->view->home = '1';
					}

					if($wohnsituation == '5')
					{
						$this->view->hospiz = '1';
					}

					if($wohnsituation == '6')
					{
						$this->view->sonstiges = '1';
					}

					$this->view->ecog = $stamqarr[0]['ecog'];
					$this->view->datum_der_erfassung1 = date('d.m.Y', strtotime($stamqarr[0]['datum_der_erfassung1']));
					$this->view->schmerzen = $stamqarr[0]['schmerzen'];
					$this->view->ubelkeit = $stamqarr[0]['ubelkeit'];
					$this->view->erbrechen = $stamqarr[0]['erbrechen'];
					$this->view->luftnot = $stamqarr[0]['luftnot'];
					$this->view->verstopfung = $stamqarr[0]['verstopfung'];
					$this->view->swache = $stamqarr[0]['swache'];
					$this->view->appetitmangel = $stamqarr[0]['appetitmangel'];
					$this->view->mudigkeit = $stamqarr[0]['mudigkeit'];
					$this->view->dekubitus = $stamqarr[0]['dekubitus'];
					$this->view->hilfebedarf = $stamqarr[0]['hilfebedarf'];
					$this->view->depresiv = $stamqarr[0]['depresiv'];
					$this->view->angst = $stamqarr[0]['angst'];
					$this->view->anspannung = $stamqarr[0]['anspannung'];
					$this->view->desorientier = $stamqarr[0]['desorientier'];
					$this->view->versorgung = $stamqarr[0]['versorgung'];
					$this->view->umfelds = $stamqarr[0]['umfelds'];
					$this->view->kontaktes = $stamqarr[0]['kontaktes'];
					$this->view->who = $stamqarr[0]['who'];
					$this->view->steroide = $stamqarr[0]['steroide'];
					$this->view->chemotherapie = $stamqarr[0]['chemotherapie'];
					$this->view->strahlentherapie = $stamqarr[0]['strahlentherapie'];
					$this->view->aufwand_mit = $stamqarr[0]['aufwand_mit'];
					$this->view->problem_besonders = $stamqarr[0]['problem_besonders'];
					$this->view->problem_ausreichend = $stamqarr[0]['problem_ausreichend'];
					if($stamqarr[0]['entlasung_date'] != '0000-00-00 00:00:00' && $stamqarr[0]['entlasung_date'] != '--')
					{
						$this->view->entlasung_date = date('d.m.Y', strtotime($stamqarr[0]['entlasung_date']));
					}
					else
					{
						$this->view->entlasung_date = "";
					}
					$this->view->therapieende = $stamqarr[0]['therapieende'];
					$this->view->sterbeort = $stamqarr[0]['sterbeort'];
					$this->view->sterbeort_dgp = $stamqarr[0]['sterbeort_dgp'];
					$this->view->zufriedenheit_mit = $stamqarr[0]['zufriedenheit_mit'];
					$this->view->identifiknr = $stamqarr[0]['identifiknr'];
					$this->view->sapv = $stamqarr[0]['sapv'];
					$this->view->verordnung_datum = $stamqarr[0]['verordnung_datum'];
					$this->view->art_der_erordnung = $stamqarr[0]['art_der_erordnung'];
					$this->view->verordnung_durch = $stamqarr[0]['verordnung_durch'];
					$this->view->ubernahme_aus = $stamqarr[0]['ubernahme_aus'];
					$arztlich = explode(",", $stamqarr[0]['arztlich']);
					$this->view->arztlich = $arztlich;
					$this->view->arztlich_more = $stamqarr[0]['arztlich_more'];
					$pflegerisch = explode(",", $stamqarr[0]['pflegerisch']);
					$this->view->pflegerisch = $pflegerisch;
					$ambulanter_hospizdienst = explode(",", $stamqarr[0]['ambulanter_hospizdienst']);
					$this->view->ambulanter_hospizdienst = $ambulanter_hospizdienst;
					$weitere_professionen = explode(",", $stamqarr[0]['weitere_professionen']);
					$this->view->weitere_professionen = $weitere_professionen;
					$this->view->weitere_professionen_more = $stamqarr[0]['weitere_professionen_more'];
					$this->view->regel_km = $stamqarr[0]['regel_km'];
					$this->view->anzahl_der_teambes = $stamqarr[0]['anzahl_der_teambes'];
					$this->view->krankenhause = $stamqarr[0]['krankenhause'];
					$this->view->end_date_sapv = $stamqarr[0]['end_date_sapv'];
					$this->view->sapvteam = $stamqarr[0]['sapvteam'];
					$this->view->versorgungsstufe = $stamqarr[0]['versorgungsstufe'];
					$this->view->grund_einweisung = $stamqarr[0]['grund_einweisung'];
					$this->view->pcteam = $stamqarr[0]['pcteam'];
					//var_dump($stamqarr);exit;

					if($stamqarr[0]['datum_der_erfassung2'] != '0000-00-00 00:00:00')
					{
						$this->view->datum_der_erfassung2 = date('d.m.Y', strtotime($stamqarr[0]['datum_der_erfassung2']));
					}
					else
					{
						$this->view->datum_der_erfassung2 = "";
					}
				}
				else
				{

				}

				/* ------------------If save button (Update old form)------------------ */
				if(strlen($_POST['btnsave']) > 0)
				{
					//print_r($_POST); exit;
					$sanfr = new Application_Form_DgpAnlage7();
					$result = $sanfr->UnsertDgpAnlage7($_POST);
					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
			}
		}

		public function dgpkernformAction()
		{
			/* ######################## Various data ################################ */
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$symp = new Symptomatology();
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			/* ##################################################################### */

			/* ------------------Patient  details ------------------ */
			$this->view->birth = $patientarr['birthd'];
			$split = explode(" ", $patientarr['admission_date']);
			$bsplit = explode("-", $split[0]);
			$this->view->admisiondate = $bsplit[2] . $bsplit[1] . $bsplit[0];

			if($patientarr['sex'] == 1)
			{
			    $this->view->gender = $this->view->translate("male");
			}
			elseif($patientarr['sex'] == 2)
			{
			    $this->view->gender = $this->view->translate("female");
			}
			elseif($patientarr['sex'] != null && $patientarr['sex'] == 0)
			{
			    $this->view->gender = $this->view->translate("divers");  //ISPC-2442 @Lore   30.09.2019
			}
			else     
			{
			    $this->view->gender = $this->view->translate("gender_not_documented");
			}

			/* ------------------Patient-> living will ------------------ */
			if($patientarr['living_will'] == 1)
			{
				$living_will = " Patientenverfügung,";
			}

			/* ------------------Patient-> contact person ------------------ */
			$cntpers = Doctrine_Core::getTable('ContactPersonMaster')->findBy('ipid', $ipid);
			$cntpersarr = $cntpers->toArray();
			$vollsmatch_sum = 0;
			foreach($cntpersarr as $value)
			{
				$vollsmatch_sum = +$value['cnt_hatversorgungsvollmacht'];
			}

			if($vollsmatch_sum > 0)
			{
				$vollsmatch = " Vorsorgevollmacht,";
			}
			$vorlage = $living_will . $vollsmatch;
			$this->view->vorlage = substr($vorlage, 0, -1);
			$this->view->datum_der_erfassung1 = date('d.m.Y');
			

			/* ------------------Patient->  main diagnosis------------------ */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			
			foreach($ddarr2 as $key => $valdia)
			{
			    $typeid .=$comma . "'" . $valdia['id'] . "'";
			    $comma = ",";
			}
			
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
			
			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);
			
			if(count($metaids) > 0)
			{
			    $diagnosismeta = new DiagnosisMeta();
			    $comma = ",";
			    $metadiagnosis = "";
			    foreach($metaids as $keymeta => $valmeta)
			    {
			        $metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);
			
			        foreach($metaarray as $keytit => $metatitle)
			        {
			            $metadiagnosis .= $comma . $metatitle['meta_title'];
			            $comma = ",";
			        }
			    }
			}
			
			if(count($dianoarray) > 0)
			{
			    $comma = "";
			    $diagnosis = "";
			    foreach($dianoarray as $key => $valdia)
			    {
			        if(strlen($valdia['diagnosis']) > 0)
			        {
			            $diagnosis .= $comma . $valdia['icdnumber'];
			            $comma = ",";
			        }
			    }
			}
			
			$this->view->icddiagnosis = $diagnosis; //.$metadiagnosis;			
			
			/* ------------------Patient->  assesment details------------------ */
			
			//assessment modals missing id
			$this->view->pid = $_GET['id'];
			
			//pflegedienstes procedure start
			//get last pfledge to be edited!
			$pat_pfl = new PatientPflegedienste();
			
			$res_pfledge = $pat_pfl->getPatientLastPflegediensteNew($ipid, false);
			$res_pfledge_palliativ = $pat_pfl->getPatientLastPflegediensteNew($ipid, true);
			$this->view->ppd_id = $res_pfledge_palliativ[0]['pflege_id'];
			$this->view->pfledge_id = $res_pfledge[0]['pflege_id'];
			
			$assesment = Doctrine_Core::getTable('KvnoAssessment')->findBy('ipid', $ipid);
			$assesmentarr = $assesment->toArray();
			
			$this->view->sapvteam_as = $assesmentarr[0]['sapvteam'];
			$this->view->hausarzt = $assesmentarr[0]['hausarzt'];
			$this->view->pflege = $assesmentarr[0]['pflege'];
			$this->view->palliativ = $assesmentarr[0]['palliativ'];
			$this->view->palliativpf = $assesmentarr[0]['palliativpf'];
			$this->view->palliativber = $assesmentarr[0]['palliativber'];
			$this->view->dienst = $assesmentarr[0]['dienst'];
			$this->view->ecog = $assesmentarr[0]['nromaleaktiv'];
			
			/* -------------------------------------------------------------------------------- */
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= "AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') as gender,";
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			$sql .= "IF(p.admission_date != '0000-00-00',DATE_FORMAT(p.admission_date,'%d\.%m\.%Y'),'') as day_of_admission,";
			$sql .= "IF(p.birthd != '0000-00-00',DATE_FORMAT(p.birthd,'%d\.%m\.%Y'),'') as birthd,";
			
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['include_standby'] = true;
			$conditions['ipids'] = array($ipid);
			
			$patient_days = Pms_CommonData::patients_days($conditions,$sql);
			
			
			$around_admission_days="";
			$around_admission_date['start']  = date("d.m.Y",strtotime("-3 days",strtotime( $patient_days[$ipid]['details']['admission_date'])));
			$around_admission_date['end']  = date("d.m.Y",strtotime("+3 days",strtotime( $patient_days[$ipid]['details']['admission_date'])));
			$around_admission_days = $patientmaster->getDaysInBetween($around_admission_date['start'],$around_admission_date['end'],false,"d.m.Y");
			
			$around_admission_days_start = $patientmaster->getDaysInBetween($patient_days[$ipid]['details']['day_of_admission'],$around_admission_date['end'],false,"d.m.Y");
			
			
			
			/* -----------------------Patient->locations ----------------------------------------- */
			$ploc = new PatientLocation();
			
			$patient_locations = new PatientLocation();
			$patient_period_locations = $patient_locations->getPatientLocations($ipid,true);
			
			foreach($patient_period_locations as $k=>$location_details){
			    $location_start = date("d.m.Y",strtotime($location_details['valid_from']));
			    if(in_array($location_start,$around_admission_days_start) )
			    {
			        $admission_location[] = $location_details;
			    }
		        $all_location[] = $location_details;
			}

			/* ------------------Patient->  discharge details------------------ */
			$dl = new DischargeLocation();
			$discharge_locations = $dl->getDischargeLocation($logininfo->clientid, 1);
			$this->view->discharge_locations = $discharge_locations;
			
			if($patientarr['isdischarged'] == 1)
			{
			    /* $patdis = Doctrine_Core::getTable('PatientDischarge')->findBy('ipid', $ipid);
			     $patdisarr = $patdis->toArray(); */
			    	
			    $patdis = Doctrine_Query::create()
			    ->select("*")
			    ->from('PatientDischarge')
			    ->where("ipid='" . $ipid . "'")
			    ->andWhere('isdelete=0');
			    $patdisarr = $patdis->fetchArray();
			
			    if(!empty($patdisarr))
			    {
			        $this->view->entlasung_date = date("d.m.Y", strtotime($patdisarr[0]['discharge_date']));
			        $dis = Doctrine_Core::getTable('DischargeMethod')->findBy('id', $patdisarr[0]['discharge_method']);
			        $disarr = $dis->toArray();
			        $abbrev = strtolower($disarr[0]['abbr']);
			        if($abbrev == "tod")
			        {
			            $disloc = new DischargeLocation();
			            $dislocarr = $disloc->getDischargeLocationbyId($patdisarr[0]['discharge_location'], $logininfo->clientid);
			
			            $this->view->sterbeort = $dislocarr[0]['location'];
			            $this->view->sterbeort_dgp = $dislocarr[0]['id'];
			        }
			        else
			        {
			            $this->view->sterbeort = "";
			            $this->view->sterbeort_dgp = "";
			        }
			    }
			    else
			    {
			        $this->view->entlasung_date = date("d.m.Y");
			        $this->view->sterbeort = "";
			        $this->view->sterbeort_dgp = "";
			    }
			}
			
			/* -------------------------------------------------------------------------------- */
			/* -------------------------------------------------------------------------------- */
			/* ------------------Patient->  form type :: Admission or discharge ----------------- */
			/* -------------------------------------------------------------------------------- */
			// check if form is for admission or for discharge
			//get first and last kvno data
			$patient_saved_kern_q = Doctrine_Query::create()
			->select('*')
			->from('DgpKern ka')
			->where('ka.ipid = "'.$ipid.'"  ')
			->orderby('create_date asc');
			$patient_saved_kern_arr = $patient_saved_kern_q->fetchArray();
			
			if(empty($_REQUEST['dgp_kern_id']))
			{
			    if(empty($patient_saved_kern_arr)){ // if no form saved means that this is the admission form
			        $form_status = "admission";
			    }
			    else
			    {// if form is saved but no id - this means that id is the discharge form
			        $form_status = "discharge";
			    }
			}
			
			if($form_status == "admission")
			{
			    /* ------------------Patient->  housing situation Admission location ------------------(Wohnsituation) */
			       if($admission_location)
        			{
        			    $first_location = $admission_location[0];
        			
        			    if($first_location['master_location']['location_type'] == "6")
        			    {
        			        $this->view->house_of_relatives = "1"; // house_of_relatives -  im Haus der Angehörigen
        			    }
        			    else if($first_location['master_location']['location_type'] == "5")
        			    {
        			        if($first_location['master_location']['location_sub_type'] == "alone")
        			        {
        			            $this->view->alone = "1";//alone
        			        } else {
        			            $this->view->sonstiges="1"; // sonstiges
        			        }
        			        
        			    }
        			    else if($first_location['master_location']['location_type'] == "3" || $first_location['master_location']['location_type'] == "4" )
        			    {
        			        $this->view->home = "1";// home
        			    } else {
        			        $this->view->sonstiges="1"; // sonstiges
        			    }
        			}
			    
			    /* ------------------Patient- ecog ------------------(ECOG) */
			    $ecog_value['first'] = $patientmaster->ecog_values($ipid,true);
			    $this->view->ecog = $ecog_value['first'];
			    
			    /* ------------------Patient - First symptomatology values----------------- */
			    $first_symptomarr = $symp->getPatientSymptpomatologyFirst($ipid);
			    
			    foreach($first_symptomarr as $k=>$value) {
			        $symp_first_values[$value['symptomid']] = $value['input_value'];
			    }
			    //$atributes_values = array(0=>'kein',1=>'leicht',2=>'leicht',3=>'leicht',4=>'leicht',5=>'mittel',6=>'mittel',7=>'mittel',8=>'schwer',9=>'schwer',10=>'schwer');
			    $sym_relevant_values = array('0' =>'1','1'=>'2','2'=>'2','3'=>'2','4'=>'2','5'=>'3','6'=>'3','7'=>'3','8'=>'4','9'=>'4','10'=>'4');
			    
			    $this->view->schmerzen = $sym_relevant_values[$symp_first_values["1"]];
			    $this->view->ubelkeit = $sym_relevant_values[$symp_first_values["2"]];
			    $this->view->erbrechen = $sym_relevant_values[$symp_first_values["4"]];
			    $this->view->luftnot = $sym_relevant_values[$symp_first_values["5"]];
			    $this->view->verstopfung = $sym_relevant_values[$symp_first_values["6"]];
			    $this->view->swache = $sym_relevant_values[$symp_first_values["7"]];;
			    $this->view->appetitmangel = $sym_relevant_values[$symp_first_values["8"]];
			    $this->view->dekubitus = $sym_relevant_values[$symp_first_values["10"]];
			    $this->view->hilfebedarf = $sym_relevant_values[$symp_first_values["11"]];
			    $this->view->depresiv = $sym_relevant_values[$symp_first_values["12"]];
			    $this->view->angst = $sym_relevant_values[$symp_first_values["13"]];
			    $this->view->anspannung = $sym_relevant_values[$symp_first_values["14"]];
			    $this->view->desorientier = $sym_relevant_values[$symp_first_values["15"]];
			    $this->view->versorgung = $sym_relevant_values[$symp_first_values["16"]];
			    $this->view->umfelds = $sym_relevant_values[$symp_first_values["17"]];
			    $this->view->sonstige_probleme = $sym_relevant_values[$symp_first_values["18"]];
			    
			} 
			elseif($form_status == "discharge")
			{
			    
			    /* ------------------Patient->  housing situation------------------(Wohnsituation) */
			    if($all_location)
			    {
			        $last_location = end($all_location);
			        
			        if($last_location['master_location']['location_type'] == "6")
			        {
			            $this->view->house_of_relatives = "1"; // house_of_relatives -  im Haus der Angehörigen
			        }
			        else if($last_location['master_location']['location_type'] == "5")
			        {
			            if($last_location['master_location']['location_sub_type'] == "alone")
			            {
			                $this->view->alone = "1";//alone
			            } else {
			                $this->view->sonstiges="1"; // sonstiges
			            }
			            	
			        }else if($last_location['master_location']['location_type'] == "3" || $last_location['master_location']['location_type'] == "4" )
			        {
			            $this->view->home = "1";// home
			        } else {
			            $this->view->sonstiges="1"; // sonstiges
			        }
			    }


			    /* ------------------Patient- ecog ------------------(ECOG) */
			    $ecog_value['last']= $patientmaster->ecog_values($ipid,false,true);
			    $this->view->ecog = $ecog_value['last'];
			    

			    /* ------------------Patient - Last symptomatology values----------------- */
			    $symptomarr = $symp->getPatientSymptpomatologyLast($ipid);
			    foreach($symptomarr as $k=>$value) {
			        $symp_last_values[$value['symptomid']] = $value['input_value'];
			    }
			    
			    $sym_relevant_values = array('0' =>'1','1'=>'2','2'=>'2','3'=>'2','4'=>'2','5'=>'3','6'=>'3','7'=>'3','8'=>'4','9'=>'4','10'=>'4');
			    
			    $this->view->schmerzen = $sym_relevant_values[$symp_last_values["1"]];
			    $this->view->ubelkeit = $sym_relevant_values[$symp_last_values["2"]];
			    $this->view->erbrechen = $sym_relevant_values[$symp_last_values["4"]];
			    $this->view->luftnot = $sym_relevant_values[$symp_last_values["5"]];
			    $this->view->verstopfung = $sym_relevant_values[$symp_last_values["6"]];
			    $this->view->swache = $sym_relevant_values[$symp_last_values["7"]];;
			    $this->view->appetitmangel = $sym_relevant_values[$symp_last_values["8"]];
			    $this->view->dekubitus = $sym_relevant_values[$symp_last_values["10"]];
			    $this->view->hilfebedarf = $sym_relevant_values[$symp_last_values["11"]];
			    $this->view->depresiv = $sym_relevant_values[$symp_last_values["12"]];
			    $this->view->angst = $sym_relevant_values[$symp_last_values["13"]];
			    $this->view->anspannung = $sym_relevant_values[$symp_last_values["14"]];
			    $this->view->desorientier = $sym_relevant_values[$symp_last_values["15"]];
			    $this->view->versorgung = $sym_relevant_values[$symp_last_values["16"]];
			    $this->view->umfelds = $sym_relevant_values[$symp_last_values["17"]];
			    $this->view->sonstige_probleme = $sym_relevant_values[$symp_last_values["18"]];
			    
			    
			    //  Wohnsituation: "im haus der Angehörigen" = admission in location at contact person / discharge in location at contact person
			    if($patientarr['isdischarged'] == 1 && !empty($patdisarr))
			    {
			        if($patdisarr[0]['discharge_location']!= "0")
			        {
			            $disl = Doctrine_Core::getTable('DischargeLocation')->findBy('id', $patdisarr[0]['discharge_location']);
			            $dislarr = $disl->toArray();
			    
			            if(!empty($dislarr)){
			                if($dislarr[0]['type'] == "6"){
			                    $this->view->house_of_relatives = "1";
			                }
			            }
			        }
			    }
			} 
			else
			{
                // SAVED DATA

		    }
		    
			if($_REQUEST['dbg'])
			{
				$dislocarr[0]['id'];
				print_r($dislocarr);
				print_r($abbrev);
				exit;
			}
			/* ------------------If save button ------------------ */

			if(strlen($_POST['btnsave']) > 0 && strlen($_REQUEST['dgp_kern_id']) == 0)
			{
				$kvno = new Application_Form_DgpKern();
				$result = $kvno->insertDgpKern($_POST);
				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}
				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
			}

			/* ------------------If submit pdf  button ------------------ */
			if(strlen($_POST['btnsubmit']) > 0)
			{
				$post = $_POST;
				$post['birth'] = $this->view->birth;
				$post['admisiondate'] = $this->view->admisiondate;
				$post['gender'] = $this->view->gender;
				$post['vorlage'] = $this->view->vorlage;
				$post['icddiagnosis'] = $this->view->icddiagnosis;

				if($_POST['wohnsituation'] == '1')
				{
					$post['alone'] = '1';
				}

				if($_POST['wohnsituation'] == '2')
				{
					$post['house_of_relatives'] = '1';
				}

				if($_POST['wohnsituation'] == '4')
				{
					$post['home'] = '1';
				}

				if($_POST['wohnsituation'] == '6')
				{
					$post['sonstiges'] = '1';
				}

				$post['regel_km'] = $_POST['regel_km'];
				$post['sapvteam_as'] = $_POST['begleitung']['sapvteam_as'];
				$post['hausarzt'] = $_POST['begleitung']['hausarzt'];
				$post['pflege'] = $_POST['begleitung']['pflege'];
				$post['palliativ'] = $_POST['begleitung']['palliativ'];
				$post['palliativpf'] = $_POST['begleitung']['palliativpf'];
				$post['palliativber'] = $_POST['begleitung']['palliativber'];
				$post['dienst'] = $_POST['begleitung']['dienst'];
				$post['palliativstation'] = $_POST['begleitung']['palliativstation'];
				$post['sterbeort_dgp'] = $discharge_locations[$_POST['sterbeort_dgp']];
				$post['hospiz_stationaer'] = $_POST['begleitung']['hospiz_stationaer'];
				$post['kh_andere_station'] = $_POST['begleitung']['kh_andere_station'];
				$post['heim'] = $_POST['begleitung']['heim'];
				$post['palliative_care_team'] = $_POST['begleitung']['palliative_care_team'];
				$post['sonstige_behandlung'] = $_POST['begleitung']['sonstige_behandlung'];
				$this->generateformPdf(3, $post, 'DGP_kern', "dgp_kernformpdf.html");
			}

			/* ------------------Get details if form has already been filed------------------ */
			if(!empty($_REQUEST['dgp_kern_id']))
			{
				$stamq = Doctrine_Core::getTable('DgpKern')->findBy('id', $_REQUEST['dgp_kern_id']);
				$stamqarr = $stamq->toArray();
				//print_r($stamqarr);
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}

				$this->view->dgp_kern_id = $_REQUEST['dgp_kern_id'];

				if(count($stamqarr) > 0)
				{
					$begleitung = explode(",", $stamqarr[0]['begleitung']);

					if(in_array('1', $begleitung))
					{
						$this->view->sapvteam_as = '1';
					}

					if(in_array('2', $begleitung))
					{
						$this->view->hausarzt = '1';
					}

					if(in_array('3', $begleitung))
					{
						$this->view->pflege = '1';
					}

					if(in_array('4', $begleitung))
					{
						$this->view->palliativ = '1';
					}

					if(in_array('5', $begleitung))
					{
						$this->view->palliativpf = '1';
					}

					if(in_array('6', $begleitung))
					{
						$this->view->palliativber = '1';
					}

					if(in_array('7', $begleitung))
					{
						$this->view->dienst = '1';
					}

					if(in_array('8', $begleitung))
					{
						$this->view->palliativstation = '1';
					}

					if(in_array('9', $begleitung))
					{
						$this->view->hospiz_stationaer = '1';
					}

					if(in_array('10', $begleitung))
					{
						$this->view->kh_andere_station = '1';
					}

					if(in_array('11', $begleitung))
					{
						$this->view->heim = '1';
					}

					if(in_array('12', $begleitung))
					{
						$this->view->palliative_care_team = '1';
					}

					if(in_array('13', $begleitung))
					{
						$this->view->sonstige_behandlung = '1';
					}
					$this->view->kvno_end_date_h = $stamqarr[0]['kvno_end_date_h'];

					$wohnsituation = $stamqarr[0]['wohnsituations'];
					if($wohnsituation == '1')
					{
						$this->view->alone = '1';
					}

					if($wohnsituation == '2')
					{
						$this->view->house_of_relatives = '1';
					}

					if($wohnsituation == '3')
					{
						$this->view->apartment = '1';
					}

					if($wohnsituation == '4')
					{
						$this->view->home = '1';
					}

					if($wohnsituation == '5')
					{
						$this->view->hospiz = '1';
					}

					if($wohnsituation == '6')
					{
						$this->view->sonstiges = '1';
					}

					$this->view->ecog = $stamqarr[0]['ecog'];
					$this->view->datum_der_erfassung1 = date('d.m.Y', strtotime($stamqarr[0]['datum_der_erfassung1']));
					$this->view->schmerzen = $stamqarr[0]['schmerzen'];
					$this->view->ubelkeit = $stamqarr[0]['ubelkeit'];
					$this->view->erbrechen = $stamqarr[0]['erbrechen'];
					$this->view->luftnot = $stamqarr[0]['luftnot'];
					$this->view->verstopfung = $stamqarr[0]['verstopfung'];
					$this->view->swache = $stamqarr[0]['swache'];
					$this->view->appetitmangel = $stamqarr[0]['appetitmangel'];
					$this->view->mudigkeit = $stamqarr[0]['mudigkeit'];
					$this->view->dekubitus = $stamqarr[0]['dekubitus'];
					$this->view->hilfebedarf = $stamqarr[0]['hilfebedarf'];
					$this->view->depresiv = $stamqarr[0]['depresiv'];
					$this->view->angst = $stamqarr[0]['angst'];
					$this->view->anspannung = $stamqarr[0]['anspannung'];
					$this->view->desorientier = $stamqarr[0]['desorientier'];
					$this->view->versorgung = $stamqarr[0]['versorgung'];
					$this->view->umfelds = $stamqarr[0]['umfelds'];
					$this->view->sonstige_probleme = $stamqarr[0]['sonstige_probleme'];
					$this->view->kontaktes = $stamqarr[0]['kontaktes'];
					$this->view->who = $stamqarr[0]['who'];
					$this->view->steroide = $stamqarr[0]['steroide'];
					$this->view->chemotherapie = $stamqarr[0]['chemotherapie'];
					$this->view->strahlentherapie = $stamqarr[0]['strahlentherapie'];
					$this->view->aufwand_mit = $stamqarr[0]['aufwand_mit'];
					$this->view->problem_besonders = $stamqarr[0]['problem_besonders'];
					$this->view->problem_ausreichend = $stamqarr[0]['problem_ausreichend'];
					if($stamqarr[0]['entlasung_date'] != '0000-00-00 00:00:00' && $stamqarr[0]['entlasung_date'] != '--')
					{
						$this->view->entlasung_date = date('d.m.Y', strtotime($stamqarr[0]['entlasung_date']));
					}
					else
					{
						$this->view->entlasung_date = "";
					}
					$this->view->therapieende = $stamqarr[0]['therapieende'];
					$this->view->sterbeort = $stamqarr[0]['sterbeort'];
					$this->view->sterbeort_dgp = $stamqarr[0]['sterbeort_dgp'];
					$this->view->zufriedenheit_mit = $stamqarr[0]['zufriedenheit_mit'];
				}
				else
				{

				}
				/* ------------------If save button (Update old form)------------------ */
				if(strlen($_POST['btnsave']) > 0)
				{
					$sanfr = new Application_Form_DgpKern();
					$result = $sanfr->UnsertDgpKern($_POST);
					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
			}
		}

		public function dgpsapvformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();

			/* ------------------Patient->  Sapv Verordnung data------------------ */
			$sapv_id = $_REQUEST['sapv_id'];

			$sapv = new SapvVerordnung();
			if($_REQUEST['dgp_sapv_id'] == 0)
			{
				$patient_sapvs = $sapv->getSapvVerordnungData($patientarr['ipid']);
				$sapvarray = $sapv->getSapvVerordnungDataId($patientarr['ipid'], $sapv_id);
			}
			else
			{
				$sapvarray = $sapv->getSapvVerordnungData($patientarr['ipid']);
			}

			$sapv_type = array(1 => "Beratung", 2 => "Koordination", 3 => "Teilversorgung", 4 => "Vollversorgung");
			$sapv_status = array(0 => "", 1 => "abgelehnt", 2 => "genehmigt", 3 => "keine Angabe");
			$sapv_select = array();
			$x = 0;
			foreach($sapvarray as $value)
			{
				//order is KO,BE,TV,VV => 2,1,3,4
				$verordnet = max(explode(",", $value['verordnet']));

				if($verordnet == 2 && in_array("1", explode(",", $value['verordnet']), true))
				{
					$verordnet = 1;
				}
				$verordnungam = date("d.m.Y", strtotime($value['verordnungam']));
				$verordnungbis = date("d.m.Y", strtotime($value['verordnungbis']));
				$sapv_select[$value['id']] = array(
					'value' => $sapv_type[$verordnet],
					'name' => $sapv_type[$verordnet] . ' ' . $verordnungam . '-' . $verordnungbis . ' ' . $sapv_status[$value['status']],
					'date' => $verordnungam . '-' . $verordnungbis,
					'sapv_order' => $value['sapv_order']
				);
			}

			if($_REQUEST['dgp_sapv_id'] == 0 && !empty($sapv_id))
			{
				$this->view->sapv = $sapv_id;
				$this->view->verordnung_datum = $sapv_select[$sapv_id]['date'];
				
				if($sapv_select[$sapv_id]['sapv_order'] == "1")
				{
				    $this->view->art_der_erordnung = 'Erstverordnung';
				}
				elseif($sapv_select[$sapv_id]['sapv_order'] == "2")
				{
				    $this->view->art_der_erordnung = 'Folgeverordnung';
				} 
				else
				{
				    $first_sapv_arr = $sapv->getFirstSapvVerordnungData($patientarr['ipid']);
				    
				    if(!empty($first_sapv_arr))
				    {
    				    $first_sapv_id = $first_sapv_arr[0]['id']; 
    				    
    				    if($sapv_id == $first_sapv_id)
    				    {
        					$this->view->art_der_erordnung = 'Erstverordnung';
    				    } 
    				    else
    				    {
    				        $this->view->art_der_erordnung = 'Folgeverordnung';
    				    }
				    } 
				    else
				    {
        				if(count($patient_sapvs) == '1')
        				{
        					$this->view->art_der_erordnung = 'Erstverordnung';
        				}
        				else
        				{
        					$this->view->art_der_erordnung = 'Folgeverordnung';
        				}
				    }
				}
			}
			else
			{

			}

			$this->view->sapv_select = $sapv_select;

			/* ------------------Patient->  visit Doctor form details------------------ */
			$dockm = Doctrine_Query::create()
				->select("*,count(fahrtstreke_km) as km")
				->from('KvnoDoctor')
				->where("ipid='" . $ipid . "'")
				->groupBy('fahrtstreke_km')
				->orderBy('fahrtstreke_km ASC');
			$dockmarray = $dockm->fetchArray();

			$dockm_nr = array();
			foreach($dockmarray as $value)
			{
				$dockm_nr[$value['fahrtstreke_km']] = $value['km'];
			}
			/* ------------------Patient-> visit Nurse form details------------------ */
			$nursekm = Doctrine_Query::create()
				->select("*,count(fahrtstreke_km) as km")
				->from('KvnoNurse')
				->where("ipid='" . $ipid . "'")
				->groupBy('fahrtstreke_km')
				->orderBy('fahrtstreke_km ASC');
			$nursekmarray = $nursekm->fetchArray();

			$nursekm_nr = array();
			foreach($nursekmarray as $value)
			{
				$nursekm_nr[$value['fahrtstreke_km']] = $value['km'];
			}
			$vizit_km = Pms_CommonData::array_add($dockm_nr, $nursekm_nr);
			$regel_km = Pms_CommonData::array_max_key($vizit_km);
			$this->view->regel_km = $regel_km;

			/* ------------------If save button ------------------ */
			if(strlen($_POST['btnsave']) > 0 && strlen($_REQUEST['dgp_sapv_id']) == 0)
			{
				$kvno = new Application_Form_DgpSapv();
				$result = $kvno->insertDgpSapv($_POST);
				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}
				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
			}

			/* ------------------If submit pdf  button ------------------ */
			if(strlen($_POST['btnsubmit']) > 0)
			{
				$post = $_POST;
				$post['regel_km'] = $this->view->regel_km;
				$post['regel_km'] = $_POST['regel_km'];
				$post['sapvteam_as'] = $_POST['begleitung']['sapvteam_as'];
				$post['pcteam'] = $_POST['pcteam'];

				$this->generateformPdf(3, $post, 'DGP_sapv', "dgp_sapvformpdf.html");
			}

			/* ------------------Get details if form has already been filed------------------ */
			if(!empty($_REQUEST['dgp_sapv_id']))
			{
				$stamq = Doctrine_Core::getTable('DgpSapv')->findBy('id', $_REQUEST['dgp_sapv_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}

				$this->view->dgp_sapv_id = $_REQUEST['dgp_sapv_id'];

				if(count($stamqarr) > 0)
				{
					$this->view->identifiknr = $stamqarr[0]['identifiknr'];
					$this->view->sapv = $stamqarr[0]['sapv'];
					$this->view->verordnung_datum = $stamqarr[0]['verordnung_datum'];
					$this->view->art_der_erordnung = $stamqarr[0]['art_der_erordnung'];
					$this->view->verordnung_durch = $stamqarr[0]['verordnung_durch'];
					$this->view->ubernahme_aus = $stamqarr[0]['ubernahme_aus'];
					$arztlich = explode(",", $stamqarr[0]['arztlich']);
					$this->view->arztlich = $arztlich;
					$this->view->arztlich_more = $stamqarr[0]['arztlich_more'];
					$pflegerisch = explode(",", $stamqarr[0]['pflegerisch']);
					$this->view->pflegerisch = $pflegerisch;
					$ambulanter_hospizdienst = explode(",", $stamqarr[0]['ambulanter_hospizdienst']);
					$this->view->ambulanter_hospizdienst = $ambulanter_hospizdienst;
					$weitere_professionen = explode(",", $stamqarr[0]['weitere_professionen']);
					$this->view->weitere_professionen = $weitere_professionen;
					$this->view->weitere_professionen_more = $stamqarr[0]['weitere_professionen_more'];
					$this->view->regel_km = $stamqarr[0]['regel_km'];
					$this->view->anzahl_der_teambes = $stamqarr[0]['anzahl_der_teambes'];
					$this->view->krankenhause = $stamqarr[0]['krankenhause'];
					$this->view->end_date_sapv = $stamqarr[0]['end_date_sapv'];
					$this->view->sapvteam = $stamqarr[0]['sapvteam'];
					$this->view->versorgungsstufe = $stamqarr[0]['versorgungsstufe'];
					$this->view->grund_einweisung = $stamqarr[0]['grund_einweisung'];
					$this->view->pcteam = $stamqarr[0]['pcteam'];
					$this->view->therapieende = $stamqarr[0]['therapieende'];
					if($stamqarr[0]['datum_der_erfassung2'] != '0000-00-00 00:00:00')
					{
						$this->view->datum_der_erfassung2 = date('d.m.Y', strtotime($stamqarr[0]['datum_der_erfassung2']));
					}
					else
					{
						$this->view->datum_der_erfassung2 = "";
					}
				}
				else
				{

				}
				/* ------------------If save button (Update old form)------------------ */
				if(strlen($_POST['btnsave']) > 0)
				{
					$sanfr = new Application_Form_DgpSapv();
					$result = $sanfr->UnsertDgpSapv($_POST);
					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
			}
		}

		public function sagenehmigAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* -------------------Patient Data--------------------------------------- */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->pattbirthday = $patientarr['birthd'];
			$this->view->pattname = $patientarr['last_name'] . ', ' . $patientarr['first_name'];
			$this->view->pattadmission_date = date('d.m.Y', strtotime($patientarr['admission_date']));

			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
			$this->view->patthelthinsurance = $healthinsu_array[0]['insurance_no'];

			/* ------------------- Metastasis----------------------------- */
			$pdm = new PatientDiagnosisMeta();
			$metaarr = $pdm->getPatientDiagnosismeta($ipid);

			$comma = ",";
			$ipidval = "'0'";

			if(is_array($metaarr))
			{
				foreach($metaarr as $key => $val)
				{
					$ipidval .= $comma . "'" . $val['metaid'] . "'";
					$comma = ",";
				}
			}

			$drugs = Doctrine_Query::create()
				->select('*')
				->from('DiagnosisMeta')
				->where("id in (" . $ipidval . ")");
			$dr = $drugs->execute();

			if($dr)
			{
				$diagnoarray = $dr->toArray();

				for($i = 0; $i < count($diagnoarray); $i++)
				{
					if($diagnoarray[$i]['meta_title'] == trim("Cerebrale Metastasierung"))
					{
						$this->view->hirn = 'checked="checked"';
					}

					if($diagnoarray[$i]['meta_title'] == trim("sonstige Metastasierung"))
					{
						$this->view->sonstige = 'checked="checked"';
					}
				}
			}
			/* ------------------- Maindiagnosis & Sidediagnosis------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);

			if(count($metaids) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = ",";
				$metadiagnosis = "";
				foreach($metaids as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle)
					{
						$metadiagnosis .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0 || strlen($metadiagnosis) > 0)
			{
				$this->view->mndiagnosis = $diagnosis;
			}
			else
			{
				$this->view->mndiagnosis = "";
			}

			$abb = "'ND','AD','DD'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($clientid, $abb);
			//print_r($ddarr);
			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}
			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);

				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						if(strlen($val['icdnumber']) > 0)
						{
							$other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
						}
						else
						{
							$other_diagnosis .= $comma . $val['diagnosis'];
						}
						$dia++;
						$comma = ",";
					}
				}
			}
			$this->view->sidediagnosis = $other_diagnosis;

			/* ------------------- Pflegestufe------------- */
			$pms = new PatientMaintainanceStage();
			$pat_pms = $pms->getpatientMaintainanceStage($ipid);
			if($pat_pms[0]['ipid'] !== NULL && $pat_pms[0]['stage'] != 0 && $pat_pms[0]['stage'] !== "Bitte wählen...")
			{
				$this->view->pflegestufe = $pat_pms[0]['stage'];
			}

			$this->view->actuellmed = "siehe Verordnungsschein";

			if(strlen($_POST['btnsave']) > 0 && strlen($_REQUEST['genehmig_id']) == 0)
			{
				$kvno = new Application_Form_Genehmigungs();
				$result = $kvno->insertGenehmigungs($_POST);
				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}

				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
			}

			if(strlen($_POST['btnsubmit']) > 0)
			{
				$post = $_POST;
				$post['birth'] = $this->view->birthday;
				$post['patname'] = $this->view->patname;
				$post['admission_date'] = $this->view->admission_date;
				$post['pathelthinsurance'] = $this->view->pathelthinsurance;

				$this->generateformPdf(3, $post, 'Genehmigungs', "sagenehmigpdf.html");
			}

			if(strlen($_REQUEST['genehmig_id']) > 0)
			{
				$stamq = Doctrine_Core::getTable('Genehmigungs')->findBy('id', $_REQUEST['genehmig_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}
				$this->view->genehmig_id = $_REQUEST['genehmig_id'];

				if(count($stamqarr) > 0)
				{
					$this->view->mndiagnosis = $stamqarr[0]['mndiagnosis'];
					$this->view->diagnosemit = $stamqarr[0]['diagnosemit'];
					$this->view->metastasis = explode(",", $stamqarr[0]['metastasis']);
					$this->view->sidediagnosis = $stamqarr[0]['sidediagnosis'];
					$this->view->bishtherapie = explode(",", $stamqarr[0]['bishtherapie']);
					$this->view->actuellmed = $stamqarr[0]['actuellmed'];
					$this->view->art_der_verabreichung = explode(",", $stamqarr[0]['art_der_verabreichung']);
					$this->view->andere = explode(",", $stamqarr[0]['andere']);
					$this->view->andere_txt = $stamqarr[0]['andere_txt'];
					$this->view->besondere = explode(",", $stamqarr[0]['besondere']);
					$this->view->besondere_txt = $stamqarr[0]['besondere_txt'];
					$this->view->k_index = $stamqarr[0]['k_index'];
					$this->view->pflegestufe = $stamqarr[0]['pflegestufe'];
					$this->view->st_pflegestufe = $stamqarr[0]['st_pflegestufe'];
					$this->view->schsymptomatik = $stamqarr[0]['schsymptomatik'];
					$this->view->lokalisation = $stamqarr[0]['lokalisation'];
					$this->view->dyspnoe = $stamqarr[0]['dyspnoe'];
					$this->view->hamoptoe = $stamqarr[0]['hamoptoe'];
					$this->view->nyha = $stamqarr[0]['nyha'];
					$this->view->respiratorische_txt = $stamqarr[0]['respiratorische_txt'];
					$this->view->respiratorische_txt_chk = $stamqarr[0]['respiratorische_txt_chk'];
					$this->view->quantitative = $stamqarr[0]['quantitative'];
					$this->view->hirndrucksymptome = $stamqarr[0]['hirndrucksymptome'];
					$this->view->spastik = $stamqarr[0]['spastik'];
					$this->view->myoklonus = $stamqarr[0]['myoklonus'];
					$this->view->muskelkampfe = $stamqarr[0]['muskelkampfe'];
					$this->view->depression = $stamqarr[0]['depression'];
					$this->view->psychotische_syndrome = $stamqarr[0]['psychotische_syndrome'];
					$this->view->neurologische_txt = $stamqarr[0]['neurologische_txt'];
					$this->view->neurologische_txt_chk = $stamqarr[0]['neurologische_txt_chk'];
					$this->view->lokalisation_a_txt = $stamqarr[0]['lokalisation_a_txt'];
					$this->view->lokalisation_a_chk = $stamqarr[0]['lokalisation_a_chk'];
					$this->view->lokalisation_b_txt = $stamqarr[0]['lokalisation_b_txt'];
					$this->view->lokalisation_b_chk = $stamqarr[0]['lokalisation_b_chk'];
					$this->view->lokalisation_c_txt = $stamqarr[0]['lokalisation_c_txt'];
					$this->view->lokalisation_c_chk = $stamqarr[0]['lokalisation_c_chk'];
					$this->view->anorexie_kachexie = $stamqarr[0]['anorexie_kachexie'];
					$this->view->mukositis = $stamqarr[0]['mukositis'];
					$this->view->dysphagie = $stamqarr[0]['dysphagie'];
					$this->view->erbrechen = $stamqarr[0]['erbrechen'];
					$this->view->hamatemesis = $stamqarr[0]['hamatemesis'];
					$this->view->ikterus = $stamqarr[0]['ikterus'];
					$this->view->ileus = $stamqarr[0]['ileus'];
					$this->view->aszites = $stamqarr[0]['aszites'];
					$this->view->diarrhoe = $stamqarr[0]['diarrhoe'];
					$this->view->fisteln = $stamqarr[0]['fisteln'];
					$this->view->gastrointestinale_txt = $stamqarr[0]['gastrointestinale_txt'];
					$this->view->gastrointestinale_txt_chk = $stamqarr[0]['gastrointestinale_txt_chk'];
					$this->view->harnwegsinfekt = $stamqarr[0]['harnwegsinfekt'];
					$this->view->dysurie = $stamqarr[0]['dysurie'];
					$this->view->blasentenesmen = $stamqarr[0]['blasentenesmen'];
					$this->view->hamaturie = $stamqarr[0]['hamaturie'];
					$this->view->vaginale_blutung = $stamqarr[0]['vaginale_blutung'];
					$this->view->urogenitale_txt = $stamqarr[0]['urogenitale_txt'];
					$this->view->urogenitale_txt_chk = $stamqarr[0]['urogenitale_txt_chk'];
					$this->view->besondere_erfordernisse = $stamqarr[0]['besondere_erfordernisse'];
					$this->view->aktueller_versorgungsbedarf = $stamqarr[0]['aktueller_versorgungsbedarf'];
				}

				if(strlen($_POST['btnsave']) > 0)
				{
					$sanfr = new Application_Form_Genehmigungs();
					$result = $sanfr->UpdateGenehmigungs($_POST);
					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
			}
		}

		public function saruhenformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* -------------------Patient Data--------------------------------------- */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->pattbirthday = $patientarr['birthd'];
			$this->view->pattname = $patientarr['last_name'] . ', ' . $patientarr['first_name'];
			$this->view->pattadmission_date = date('d.m.Y', strtotime($patientarr['admission_date']));

			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
			$this->view->patthelthinsurance = $healthinsu_array[0]['insurance_no'];

			$this->view->einweisung = 1;
			$this->view->palliativzentrum = 4;

			$hospitalids = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type =1');
			$hosparray = $hospitalids->fetchArray();

			$hospstr = "'X'";
			foreach($hosparray as $hospital)
			{
				$hospstr .= ", '" . $hospital['id'] . "'";
			}

			$comma = ",";
			$hospstr = "'X'";
			foreach($hosparray as $hospital)
			{

				$hospstr .= $comma . "'" . $hospital['id'] . "'";
				$comma = ",";
			}

			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('location_id IN (' . $hospstr . ')')
				->andWhere('ipid ="' . $ipid . '" and isdelete="0"')
				->limit(1)
				->orderBy('id DESC');
			$locationsarr = $locations->fetchArray();

			if(!empty($locationsarr))
			{
				$this->view->begindate = date('d.m.Y', strtotime($locationsarr[0]['valid_from']));
				if($locationsarr[0]['valid_till'] != '0000-00-00 00:00:00')
				{
					$this->view->enddate = date('d.m.Y', strtotime($locationsarr[0]['valid_till']));
				}
				else
				{
					$this->view->enddate = '';
				}
			}

			if(strlen($_POST['btnsave']) > 0 && strlen($_REQUEST['ruhen_id']) == 0)
			{
				$kvno = new Application_Form_Ruhen();
				$result = $kvno->insertRuhen($_POST);
				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}

				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
			}

			if(strlen($_POST['btnsubmit']) > 0)
			{
				$post = $_POST;
				$post['birth'] = $this->view->birthday;
				$post['patname'] = $this->view->patname;
				$post['admission_date'] = $this->view->admission_date;
				$post['pathelthinsurance'] = $this->view->pathelthinsurance;
				$this->generateformPdf(3, $post, 'Ruhen', "saruhenformpdf.html");
			}

			if(strlen($_REQUEST['ruhen_id']) > 0)
			{
				$stamq = Doctrine_Core::getTable('Ruhen')->findBy('id', $_REQUEST['ruhen_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}
				$this->view->ruhen_id = $_REQUEST['ruhen_id'];

				if(count($stamqarr) > 0)
				{
					$this->view->palliativzentrum = $stamqarr[0]['palliativzentrum'];
					$this->view->einweisung = $stamqarr[0]['einweisung'];
					$this->view->r_name = $stamqarr[0]['r_name'];
					$this->view->r_address = $stamqarr[0]['r_address'];
					if($stamqarr[0]['begindate'] != '0000-00-00 00:00:00')
					{
						$this->view->begindate = date('d.m.Y', strtotime($stamqarr[0]['begindate']));
					}
					else
					{
						$this->view->begindate = "";
					}

					if($stamqarr[0]['enddate'] != '0000-00-00 00:00:00')
					{
						$this->view->enddate = date('d.m.Y', strtotime($stamqarr[0]['enddate']));
					}
					else
					{
						$this->view->enddate = "";
					}
				}

				if(strlen($_POST['btnsave']) > 0)
				{
					$sanfr = new Application_Form_Ruhen();
					$result = $sanfr->UpdateRuhen($_POST);
					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
			}
		}

		public function safeststellungAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* -------------------Patient Data--------------------------------------- */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->pattbirthday = $patientarr['birthd'];
			$this->view->pattname = $patientarr['last_name'] . ', ' . $patientarr['first_name'];
			$this->view->pattadmission_date = date('d.m.Y', strtotime($patientarr['admission_date']));

			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
			$this->view->patthelthinsurance = $healthinsu_array[0]['insurance_no'];

			/* ------------------- Client Data--------------------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$this->view->institution = $clientdata[0]['client_name'] . ",\n" . $clientdata[0]['street1'] . ",\n" . $clientdata[0]['postcode'] . " " . $clientdata[0]['city'];

			$this->view->palliativzentrum = 4;

			if(strlen($_POST['btnsave']) > 0 && strlen($_REQUEST['feststellung_id']) == 0)
			{
				$kvno = new Application_Form_Feststellung();
				$result = $kvno->insertFeststellung($_POST);
				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}
				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
			}

			if(strlen($_POST['btnsubmit']) > 0)
			{
				$post = $_POST;
				$post['birth'] = $this->view->birthday;
				$post['patname'] = $this->view->patname;
				$post['admission_date'] = $this->view->admission_date;
				$post['pathelthinsurance'] = $this->view->pathelthinsurance;

				$this->generateformPdf(3, $post, 'Feststellung', "safeststellungpdf.html");
			}

			if(strlen($_REQUEST['feststellung_id']) > 0)
			{

				$stamq = Doctrine_Core::getTable('Feststellung')->findBy('id', $_REQUEST['feststellung_id']);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}
				$this->view->feststellung_id = $_REQUEST['feststellung_id'];

				if(count($stamqarr) > 0)
				{
					$this->view->grund = $stamqarr[0]['grund'];
					$this->view->grund_txt = $stamqarr[0]['grund_txt'];
					$this->view->palliativzentrum = $stamqarr[0]['palliativzentrum'];
					$this->view->institution = $stamqarr[0]['institution'];
					$this->view->verordnung_durch = $stamqarr[0]['verordnung_durch'];
					$this->view->f_krankenhaus = $stamqarr[0]['f_krankenhaus'];
					$this->view->f_address = $stamqarr[0]['f_address'];
					$this->view->einmalige = $stamqarr[0]['einmalige'];
				}

				if(strlen($_POST['btnsave']) > 0)
				{
					$sanfr = new Application_Form_Feststellung();
					$result = $sanfr->UpdateFeststellung($_POST);
					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
			}
		}

		public function mdkschneformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ------------------- MDK Information ------------------------------- */
			$fd = new MdkSchne();
			$form_details = $fd->getLastMDKdetails($ipid);

			if($form_details)
			{
				$new_instance = $form_details[0]['new_instance'];
				$mdk_id = $form_details[0]['id'];
			}
			else
			{
				$new_instance = '0';
				$mdk_id = '';
			}

			if($new_instance == '0')
			{
				$mdk_id = '';
			}

			$this->view->new_instance = $new_instance;
			$this->view->mdk_id = $mdk_id;

			/* ------------------- User Data--------------------------------------- */
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->loginusername = $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
			}

			/* ------------------- Client Data--------------------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$this->view->client_name = $clientdata[0]['team_name'];
			$this->view->client_city = $clientdata[0]['city'];
			$this->view->client_street = $clientdata[0]['street1'];
			$this->view->client_zip = $clientdata[0]['postcode'];
			$this->view->client_phone = $clientdata[0]['phone'];
			$this->view->client_fax = $clientdata[0]['fax'];
			$this->view->client_email = $clientdata[0]['emailid'];
			$this->view->client_ik = $clientdata[0]['institutskennzeichen'];
			$this->view->client_bsnr = $clientdata[0]['betriebsstattennummer'];

			/* -------------------Patient Data--------------------------------------- */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->phone = $patientarr['phone'];

			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];

			/* --------------Patient Contact persons Data ---------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->get2PatientContact($ipid);

			$familydegree = new FamilyDegree();
			$status = $familydegree->getFamilyDegrees(1);

			if(!empty($pcs[0]))
			{
				$cntpers1 = $pcs[0]['cnt_last_name'] . ', ' . $pcs[0]['cnt_first_name'] . '; ' . $pcs[0]['cnt_street1'] . ', ' . $pcs[0]['cnt_zip'] . ' ' . $pcs[0]['cnt_city'] . ', ' . $pcs[0]['cnt_phone'] . ', ' . $status[$pcs[0]['cnt_familydegree_id']];
			}
			else
			{
				$cntpers1 = "";
			}

			if(!empty($pcs[1]))
			{
				$cntpers2 = $pcs[1]['cnt_last_name'] . ', ' . $pcs[1]['cnt_first_name'] . '; ' . $pcs[1]['cnt_street1'] . ', ' . $pcs[1]['cnt_zip'] . ' ' . $pcs[1]['cnt_city'] . ', ' . $pcs[1]['cnt_phone'] . ', ' . $status[$pcs[1]['cnt_familydegree_id']];
			}
			else
			{
				$cntpers2 = "";
			}

			$this->view->contactperson1 = $cntpers1;
			$this->view->contactperson2 = $cntpers2;

			/* ------------------- Maindiagnosis Data  ------------------------------- */
			$dian = new Application_Form_Diagnosis();
			$sortarr = $dian->getHDdiagnosis($patientarr['ipid']);
			foreach($sortarr as $key => $diagnosis)
			{
				$maind .= ' ' . $diagnosis['description'] . ',';
			}
			$this->view->maindiagnosis = substr($maind, 0, -1);

			/* ------------------- Patient stage Data--------------------------------- */
			$pms = new PatientMaintainanceStage();
			$pat_pmsinfo = $pms->getLastpatientMaintainanceStage($patientarr['ipid']);
			$stage = array();
			if($pat_pmsinfo)
			{
				$stage[] = $pat_pmsinfo[0]['stage'];
				$this->view->stage = $pat_pmsinfo[0]['stage'];
				$this->view->erstantrag = $pat_pmsinfo[0]['erstantrag'];
				$this->view->horherstufung = $pat_pmsinfo[0]['horherstufung'];
			}
			$this->view->pflegeversicherung = $stage;

			/* --------------------MKD SCHNE - get data if form exists--------------------- */
			if($form_details && $form_details[0]['new_instance'] == '1')
			{
				$stamqarr[0] = $form_details[0];
				$this->view->pflegeperson = $stamqarr[0]['pflegeperson'];
				$this->view->pflegeversicherung = $stamqarr[0]['pflegeversicherung'];

				//ISPC-1872 -commented this lines
				if(!empty($stamqarr[0]['pflegeversicherung']))
				{
					$stage = explode(",", $stamqarr[0]['pflegeversicherung']);
					
// 					if(in_array(6, $stage))
// 					{
// 						$this->view->horherstufung = 1;
// 					}
// 					else
// 					{
// 						$this->view->horherstufung = 0;
// 					}
				}
// 				else
// 				{
// 					$pms = new PatientMaintainanceStage();
// 					$pat_pmsinfo = $pms->getLastpatientMaintainanceStage($patientarr['ipid']);
// 					if($pat_pmsinfo)
// 					{
// 						$stage[] = $pat_pmsinfo[0]['stage'];
// 						$this->view->erstantrag = $pat_pmsinfo[0]['erstantrag'];
// 						$this->view->horherstufung = $pat_pmsinfo[0]['horherstufung'];
// 					}
// 				}
				$this->view->pflegeversicherung = $stage;

				if(!empty($stamqarr[0]['cntpers1']))
				{
					$this->view->contactperson1 = $stamqarr[0]['cntpers1'];
				}
				else
				{
					$this->view->contactperson1 = $cntpers1;
				}

				if(!empty($stamqarr[0]['cntpers2']))
				{
					$this->view->contactperson2 = $stamqarr[0]['cntpers2'];
				}
				else
				{
					$this->view->contactperson2 = $cntpers2;
				}
				$this->view->pflege_benefits = $stamqarr[0]['pflege_benefits'];
				$this->view->maindiagnosis = $stamqarr[0]['maindiagnosis'];
				$ambulante = explode(",", $stamqarr[0]['ambulante']);
				$this->view->ambulante = $ambulante;
				$this->view->kurative = $stamqarr[0]['kurative'];
				$this->view->behandlungsansatz = $stamqarr[0]['behandlungsansatz'];
				$this->view->aufklarung = $stamqarr[0]['aufklarung'];
				$this->view->livingwill = $stamqarr[0]['livingwill'];
				$this->view->livingwill_wird = $stamqarr[0]['livingwill_wird'];
				$this->view->livingwill_txt = $stamqarr[0]['livingwill_txt'];
				$this->view->palliativer = $stamqarr[0]['palliativer'];
				$this->view->palliativer_wird = $stamqarr[0]['palliativer_wird'];
				$this->view->palliativer_txt = $stamqarr[0]['palliativer_txt'];
				$this->view->erfolgen = $stamqarr[0]['erfolgen'];
				$this->view->erfolgen_txt = $stamqarr[0]['erfolgen_txt'];
				$this->view->schem_symptomatik = $stamqarr[0]['schem_symptomatik']; //array
				$extreme_symptome = explode(",", $stamqarr[0]['extreme_symptome']);
				$this->view->extreme_symptome = $extreme_symptome;
				$this->view->extreme_symptome_txt = $stamqarr[0]['extreme_symptome_txt'];
				$this->view->psychosoziale_a = $stamqarr[0]['psychosoziale_a'];
				$this->view->psychosoziale_a_txt = $stamqarr[0]['psychosoziale_a_txt'];
				$this->view->psychosoziale_b = $stamqarr[0]['psychosoziale_b'];
				$this->view->psychosoziale_b_txt = $stamqarr[0]['psychosoziale_b_txt'];
				$this->view->psychosoziale_c = $stamqarr[0]['psychosoziale_c'];
				$this->view->psychosoziale_c_txt = $stamqarr[0]['psychosoziale_c_txt'];
				$this->view->angehorige = $stamqarr[0]['angehorige'];
				$this->view->angehorige_txt = $stamqarr[0]['angehorige_txt'];
				$this->view->krakenpflege = $stamqarr[0]['krakenpflege'];
				$this->view->krakenpflege_txt = $stamqarr[0]['krakenpflege_txt'];
				$this->view->liegen_sapv = $stamqarr[0]['liegen_sapv'];
				$this->view->liegen_sapv_txt = $stamqarr[0]['liegen_sapv_txt'];
				$this->view->medizinische_txt = $stamqarr[0]['medizinische_txt'];
				$this->view->weitere = $stamqarr[0]['weitere'];
				$this->view->weitere_txt = $stamqarr[0]['weitere_txt'];
				$this->view->sonstiges = $stamqarr[0]['sonstiges'];
			}

			if($this->getRequest()->isPost())
			{
				/* -------------------SAVE Actions-------------------------------- */
				if(strlen($_POST['btnsave']) > 0 && empty($_POST['mdk_id']) && $_POST['create_new'] == '0')
				{
					$kvno = new Application_Form_MdkSchne();
					$result = $kvno->insertMdkSchne($_POST);
					if($result)
					{
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
						exit;
					}
				}
				/* -------------------EDIT Actions-------------------------------- */
				else if(strlen($_POST['btnsave']) > 0 && !empty($_POST['mdk_id']) && $_POST['create_new'] == '0')
				{

					$kvno = new Application_Form_MdkSchne();
					$result = $kvno->UpdateMdkSchne($_POST);

					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}
				else if(!empty($_POST['mdk_id']) && $_POST['create_new'] == '1')
				{
					$kvno = new Application_Form_MdkSchne();
					$result = $kvno->NewInstanceMdkSchne();

					$this->retainValues($_POST);
					$post = $_POST;
					$post['birth'] = $this->view->birth;
					$post['lastname'] = $this->view->lastname;
					$post['firstname'] = $this->view->firstname;
					$post['street'] = $this->view->street;
					$post['zip'] = $this->view->zip;
					$post['patcity'] = $this->view->patcity;
					$post['phone'] = $this->view->phone;
					$post['client_name'] = $this->view->client_name;
					$post['client_city'] = $this->view->client_city;
					$post['client_street'] = $this->view->client_street;
					$post['client_zip'] = $this->view->client_zip;
					$post['client_fax'] = $this->view->client_fax;
					$post['client_phone'] = $this->view->client_phone;
					$post['client_email'] = $this->view->client_email;
					$post['client_ik'] = $this->view->client_ik;
					$post['client_bsnr'] = $this->view->client_bsnr;
					$post['insurance_company_name'] = $this->view->insurance_company_name;
					$this->view->pflegeperson = $_POST['pflegeperson'];
					$this->view->pflege_benefits = $_POST['pflege_benefits'];
					$this->view->maindiagnosis = $_POST['maindiagnosis'];
					$post['contactperson1'] = $_POST['cntpers1'];
					$post['contactperson2'] = $_POST['cntpers2'];
					$this->view->kurative = $_POST['kurative'];
					$this->view->behandlungsansatz = $_POST['behandlungsansatz'];
					$this->view->aufklarung = $_POST['aufklarung'];
					$this->view->livingwill = $_POST['livingwill'];
					$this->view->livingwill_wird = $_POST['livingwill_wird'];
					$this->view->livingwill_txt = $_POST['livingwill_txt'];
					$this->view->palliativer = $_POST['palliativer'];
					$this->view->palliativer_wird = $_POST['palliativer_wird'];
					$this->view->palliativer_txt = $_POST['palliativer_txt'];
					$this->view->erfolgen = $_POST['erfolgen'];
					$this->view->erfolgen_txt = $_POST['erfolgen_txt'];
					$this->view->schem_symptomatik = $_POST['schem_symptomatik']; //array
					$this->view->extreme_symptome_txt = $_POST['extreme_symptome_txt'];
					$this->view->psychosoziale_a = $_POST['psychosoziale_a'];
					$this->view->psychosoziale_a_txt = $_POST['psychosoziale_a_txt'];
					$this->view->psychosoziale_b = $_POST['psychosoziale_b'];
					$this->view->psychosoziale_b_txt = $_POST['psychosoziale_b_txt'];
					$this->view->psychosoziale_c = $_POST['psychosoziale_c'];
					$this->view->psychosoziale_c_txt = $_POST['psychosoziale_c_txt'];
					$this->view->angehorige = $_POST['angehorige'];
					$this->view->angehorige_txt = $_POST['angehorige_txt'];
					$this->view->krakenpflege = $_POST['krakenpflege'];
					$this->view->krakenpflege_txt = $_POST['krakenpflege_txt'];
					$this->view->liegen_sapv = $_POST['liegen_sapv'];
					$this->view->liegen_sapv_txt = $_POST['liegen_sapv_txt'];
					$this->view->medizinische_txt = $_POST['medizinische_txt'];
					$this->view->weitere = $_POST['weitere'];
					$this->view->weitere_txt = $_POST['weitere_txt'];
					$this->view->sonstiges = $_POST['sonstiges'];
					$this->generateformPdf(4, $post, 'MdkSchneInstance', "mdkschneform_pdf.html");

					$this->_redirect(APP_BASE . "patientform/mdkschneform?id=" . $_GET['id']);
					exit;
				}
				else if(strlen($_POST['btnsubmit']) > 0 && $_POST['create_new'] == '0')
				{
					$this->retainValues($_POST);
					$post = $_POST;
					$post['birth'] = $this->view->birth;
					$post['lastname'] = $this->view->lastname;
					$post['firstname'] = $this->view->firstname;
					$post['street'] = $this->view->street;
					$post['zip'] = $this->view->zip;
					$post['patcity'] = $this->view->patcity;
					$post['phone'] = $this->view->phone;
					$post['client_name'] = $this->view->client_name;
					$post['client_city'] = $this->view->client_city;
					$post['client_street'] = $this->view->client_street;
					$post['client_zip'] = $this->view->client_zip;
					$post['client_fax'] = $this->view->client_fax;
					$post['client_phone'] = $this->view->client_phone;
					$post['client_email'] = $this->view->client_email;
					$post['client_ik'] = $this->view->client_ik;
					$post['client_bsnr'] = $this->view->client_bsnr;
					$post['insurance_company_name'] = $this->view->insurance_company_name;
					$this->view->pflegeperson = $_POST['pflegeperson'];
					$this->view->pflege_benefits = $_POST['pflege_benefits'];
					$this->view->maindiagnosis = $_POST['maindiagnosis'];
					$post['contactperson1'] = $_POST['cntpers1'];
					$post['contactperson2'] = $_POST['cntpers2'];
					$this->view->kurative = $_POST['kurative'];
					$this->view->behandlungsansatz = $_POST['behandlungsansatz'];
					$this->view->aufklarung = $_POST['aufklarung'];
					$this->view->livingwill = $_POST['livingwill'];
					$this->view->livingwill_wird = $_POST['livingwill_wird'];
					$this->view->livingwill_txt = $_POST['livingwill_txt'];
					$this->view->palliativer = $_POST['palliativer'];
					$this->view->palliativer_wird = $_POST['palliativer_wird'];
					$this->view->palliativer_txt = $_POST['palliativer_txt'];
					$this->view->erfolgen = $_POST['erfolgen'];
					$this->view->erfolgen_txt = $_POST['erfolgen_txt'];
					$this->view->schem_symptomatik = $_POST['schem_symptomatik']; //array
					$this->view->extreme_symptome_txt = $_POST['extreme_symptome_txt'];
					$this->view->psychosoziale_a = $_POST['psychosoziale_a'];
					$this->view->psychosoziale_a_txt = $_POST['psychosoziale_a_txt'];
					$this->view->psychosoziale_b = $_POST['psychosoziale_b'];
					$this->view->psychosoziale_b_txt = $_POST['psychosoziale_b_txt'];
					$this->view->psychosoziale_c = $_POST['psychosoziale_c'];
					$this->view->psychosoziale_c_txt = $_POST['psychosoziale_c_txt'];
					$this->view->angehorige = $_POST['angehorige'];
					$this->view->angehorige_txt = $_POST['angehorige_txt'];
					$this->view->krakenpflege = $_POST['krakenpflege'];
					$this->view->krakenpflege_txt = $_POST['krakenpflege_txt'];
					$this->view->liegen_sapv = $_POST['liegen_sapv'];
					$this->view->liegen_sapv_txt = $_POST['liegen_sapv_txt'];
					$this->view->medizinische_txt = $_POST['medizinische_txt'];
					$this->view->weitere = $_POST['weitere'];
					$this->view->weitere_txt = $_POST['weitere_txt'];
					$this->view->sonstiges = $_POST['sonstiges'];

					$this->generateformPdf(3, $post, 'MdkSchne', "mdkschneform_pdf.html");
				}
			}
			/* -------------------END UPDATE Action-------------------------------- */
		}

		public function stammblattsapvAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ------------------- User Data--------------------------------------- */
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->loginusername = $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
			}

			/* ------------------- Client Data--------------------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$this->view->client_name = $clientdata[0]['client_name'];
			$this->view->client_team_name = $clientdata[0]['team_name'];
			$this->view->client_city = $clientdata[0]['city'];
			$this->view->client_street = $clientdata[0]['street1'];
			$this->view->client_zip = $clientdata[0]['postcode'];
			$this->view->client_phone = $clientdata[0]['phone'];
			$this->view->client_fax = $clientdata[0]['fax'];
			$this->view->client_email = $clientdata[0]['emailid'];

			/* -------------------Patient Data--------------------------------------- */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->pattel = $patientarr['phone'];
			$this->view->pathandy = $patientarr['mobile'];
			$this->view->patientenverfugung = $patientarr['living_will'];

			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
			$this->view->healthinsurance_company = $healthinsu_array[0]['company_name'];
			$this->view->healthinsurance_kknr = $healthinsu_array[0]['kvk_no'];
			$this->view->healthinsurance_versnr = $healthinsu_array[0]['insurance_no'];
			$this->view->healthinsurance_companytel = $healthinsu_array[0]['ins_phone'];
			$this->view->healthinsurance_companyfax = $healthinsu_array[0]['ins_phonefax'];
			
			//according to ISPC-834
			if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '1')
			{
				$this->view->zuzahlung = '0';
			}
			else if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '2')
			{
				$this->view->zuzahlung = '1';
			}
			else
			{
				$this->view->zuzahlung = '1';
			}
			//according to ISPC-1403
			/* if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();
				$this->view->healthinsurance_companytel = $healtharray['phone'];
				$this->view->healthinsurance_companyfax = $healtharray['phonefax'];
			} */

			/* --------------Patient family doctor---------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($patientarr['familydoc_id']);
			$this->view->hausarzt_details = $docarray[0]['last_name'] . ", " . $docarray[0]['first_name'] . "<br/> " . $docarray[0]['street1'] . ", " . $docarray[0]['zip'] . " " . $docarray[0]['city'];
			$this->view->hausarzt_tel = $docarray[0]['phone_practice'];
			$this->view->hausarzt_fax = $docarray[0]['fax'];

			/* --------------Patient First Pfllegedienst---------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($patientarr['ipid']);
			$this->view->pflegedienst_details = htmlspecialchars($ppflearray[0]['nursing']) . "<br/>" . htmlspecialchars($ppflearray[0]['street1']) . ", " . htmlspecialchars($ppflearray[0]['zip']) . " " . htmlspecialchars($ppflearray[0]['city']);
			$this->view->pflegedienst_tel = $ppflearray[0]['pf_phone_practice'];
			$this->view->pflegedienst_fax = $ppflearray[0]['pf_fax'];

			/* --------------	Patient Familienstand	---------------------------- */
			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);
			$this->view->familienstands = $st->getFamilienstandfun();
			$this->view->familienstand_notfrom_Stammblatt = $weit[0]['familienstand'];
			/*			
			if(!empty($weit[0]['familienstand']))
			{
				if($weit[0]['familienstand'] == 1)
				{
					$this->view->ledig = "checked='checked'";
				}

				if($weit[0]['familienstand'] == 2)
				{
					$this->view->verwitwet = "checked='checked'";
				}

				if($weit[0]['familienstand'] == 3)
				{
					$this->view->geschieden = "checked='checked'";
				}
			}
			*/

			/* --------------Patient Wohnsituation---------------------------- */
			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);
			if($pat_lives[0]['alone'] == 1)
			{
				$this->view->allein = "checked='checked'";
			}

			if($pat_lives[0]['house_of_relatives'] == 1)
			{
				$this->view->mit_angeh = "checked='checked'";
			}

			if($pat_lives[0]['home'] == 1)
			{
				$this->view->heim = "checked='checked'";
			}

			if($pat_lives[0]['hospiz'] == 1)
			{
				$this->view->hospiz = "checked='checked'";
			}

			if($pat_lives[0]['sonstiges'] == 1)
			{
				$this->view->sonstiges = "checked='checked'";
			}

			/* --------------Patient Contact persons Data ---------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);

			$familydegree = new FamilyDegree();
			$status = $familydegree->getFamilyDegrees(1);

			if(!empty($pcs[0]))
			{
				$cntpers1name = $pcs[0]['cnt_last_name'] . ', ' . $pcs[0]['cnt_first_name'];
				$cntpers1tel = $pcs[0]['cnt_phone'];
				$cntpers1handy = $pcs[0]['cnt_mobile'];
			}
			else
			{
				$cntpers1name = "";
				$cntpers1tel = "";
				$cntpers1handy = "";
			}

			if(!empty($pcs[1]))
			{
				$cntpers2name = $pcs[1]['cnt_last_name'] . ', ' . $pcs[1]['cnt_first_name'];
				$cntpers2tel = $pcs[1]['cnt_phone'];
				$cntpers2handy = $pcs[1]['cnt_mobile'];
			}
			else
			{
				$cntpers2name = "";
				$cntpers2tel = "";
				$cntpers2handy = "";
			}
			$this->view->cntpers1name = $cntpers1name;
			$this->view->cntpers1tel = $cntpers1tel;
			$this->view->cntpers1handy = $cntpers1handy;
			$this->view->cntpers2name = $cntpers2name;
			$this->view->cntpers2tel = $cntpers2tel;
			$this->view->cntpers2handy = $cntpers2handy;

			foreach($pcs as $k => $cnt_details)
			{

				if($cnt_details['cnt_hatversorgungsvollmacht'] == "1")
				{
					$voll_cnt_name = $cnt_details['cnt_last_name'] . ', ' . $cnt_details['cnt_first_name'];
					$voll_cnt_phone = $cnt_details['cnt_phone'];
					$this->view->vorsorgevollmacht = '1';
				}
			}
			$this->view->bevollmachtigter = $voll_cnt_name;
			$this->view->bevollmachtigter_tel = $voll_cnt_phone;

			/* -------------------Patient Religions  ------------------------------- */
			$rel = new PatientReligions();
			$pat_rel = $rel->getReligionsData($ipid);
			$relcnt = $pat_rel[0]['religion'];
			if(!empty($pat_rel[0]['religion']))
			{
				if($pat_rel[0]['religion'] == 1)
				{
					$this->view->evange = "checked='checked'";
				}

				if($pat_rel[0]['religion'] == 2)
				{
					$this->view->katolic = "checked='checked'";
				}

				if($pat_rel[0]['religion'] == 6)
				{
					$this->view->keine = "checked='checked'";
				}
				if($pat_rel[0]['religion'] == 7)
				{
					$this->view->andere = "checked='checked'";
				}
			}

			/* ------------------- Patient Pharmacy--------------------------------- */
			$pha = new PatientPharmacy();
			$phaarray = $pha->getPatientPharmacy($ipid);
			$this->view->apotheke_details = $phaarray[0]['apotheke'] . "<br/>" . $phaarray[0]['street1'] . ", " . $phaarray[0]['zip'] . " " . $phaarray[0]['city'];
			$this->view->apotheke_tel = $phaarray[0]['phone'];
			$this->view->apotheke_fax = $phaarray[0]['fax'];


			/* --------------------Patient Main Diagnosis ------------------ */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						if(!empty($valdia['icdnumber']))
						{
							$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						}
						else
						{
							$diagnosis .= $comma . $valdia['diagnosis'];
						}
						$comma = ", ";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$this->view->main_diagnosis = $diagnosis;
			}
			/* ------------------- Patient stage Data--------------------------------- */
			$pms = new PatientMaintainanceStage();
			$pat_pmsinfo = $pms->getLastpatientMaintainanceStage($patientarr['ipid']);
			
			$stage = array();
			if($pat_pmsinfo)
			{
				$stage[] = $pat_pmsinfo[0]['stage'];
				if($pat_pmsinfo[0]['horherstufung'] == 1)
				{
					$this->view->beatragt = 'checked="checked"';
				}
			}
			$this->view->pflegestufe = $stage;
			
			//ispc 1872 - this ignores the form and uses from stammdaten
			if (isset($pat_pmsinfo[0]['stage'])) {
				$this->view->pflegeversicherung  = $pat_pmsinfo[0]['stage'];
				$this->view->horherstufung  = $pat_pmsinfo[0]['horherstufung'];
				$this->view->erstantrag  = $pat_pmsinfo[0]['erstantrag'];		
				
			} else {
				$this->view->pflegeversicherung = null;
				$this->view->horherstufung  = null;
				$this->view->erstantrag  = null;
			}
			
			
			
			
			/* ------------------- Patient Allergies--------------------------------- */
				
			$aller = new PatientDrugPlanAllergies();
			$allergies = $aller->getPatientDrugPlanAllergies($decid);
				
				
			if(!empty($allergies))
			{
				$patient_allergies = $allergies[0];
				$this->view->allergien = htmlspecialchars(strip_tags($patient_allergies['allergies_comment'], '<br />'));
			}
			
			/* -------------------Prefill ECOG-------------------------------- */
			$this->view->ecog = array("1");
			/* -------------------SAVE Actions-------------------------------- */
			if(strlen($_POST['btnsave']) > 0)
			{
				$kvno = new Application_Form_Stammblattsapv();
				$result = $kvno->insertStammblattsapv($_POST);
				if($result)
				{
					//ISPC-1891
					//update the patient >> Stammdaten >> Familienstand
					//@todo
					
					//update the patient >> Stammdaten >> Pflegegrade
					$post_familienstand = array(
						"modname" => "Familienstand",
						"fldname" => "familienstand",
						"chkval" => $_POST['familienstand'],
						"patid" => $_GET['id'],
						"formid" => "grow16",
						"ipid" => $ipid,
					);
					$af_s = new Application_Form_Stammdatenerweitert();
					$af_s->InsertStamdatenData($post_familienstand);
					$this->view->familienstand_notfrom_Stammblatt = $_POST['familienstand'];
										
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}
			}
			else if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->retainValues($_POST);
				$post = $_POST;
				$post['birth'] = $this->view->birth;
				$post['lastname'] = $this->view->lastname;
				$post['firstname'] = $this->view->firstname;
				$post['street'] = $this->view->street;
				$post['zip'] = $this->view->zip;
				$post['patcity'] = $this->view->patcity;
				$post['pattel'] = $this->view->pattel;
				$post['pathandy'] = $this->view->pathandy;
				$post['cntpers1name'] = $cntpers1name;
				$post['cntpers2name'] = $cntpers2name;
				$post['hausarzt_details'] = $this->view->hausarzt_details;
				$post['pflegedienst_details'] = $this->view->pflegedienst_details;
				$post['apotheke_details'] = $this->view->apotheke_details;
				$post['healthinsurance_company'] = $this->view->healthinsurance_company;
				$post['healthinsurance_kknr'] = $this->view->healthinsurance_kknr;
				$post['healthinsurance_versnr'] = $this->view->healthinsurance_versnr;
				$post['healthinsurance_companytel'] = $this->view->healthinsurance_companytel;
				$post['healthinsurance_companyfax'] = $this->view->healthinsurance_companyfax;
				$post['ambulant'] = $_POST['ambulant'];
				$post['stationar'] = $_POST['stationar'];
				$post['patient_main_diagnosis'] = $_POST['main_diagnosis'];
// print_R($post); exit;
				$this->generateformPdf(3, $post, 'Stammblattsapv', "stammblattsapv_pdf.html");
			}

			$stamq = Doctrine_Core::getTable('Stammblattsapv')->findBy('ipid', $ipid);
			$stamqarr = $stamq->toArray();
			if($stamqarr[0]['ipid'] != $ipid)
			{

			}

			if(count($stamqarr) > 0)
			{
				$this->view->familienstand = $stamqarr[0]['familienstand'];
				$wohnsituation = explode(",", $stamqarr[0]['wohnsituation']);
				if($wohnsituation)
				{
					$this->view->allein = "";
					$this->view->mit_angeh = "";
					$this->view->heim = "";
					$this->view->hospiz = "";
					$this->view->sonstiges = "";
					$this->view->wohnsituation = $wohnsituation;
				}
				$this->view->allergien = $stamqarr[0]['allergien'];
				$this->view->zuzahlung = $stamqarr[0]['zuzahlung'];
				$pflegestufe = explode(",", $stamqarr[0]['pflegestufe']);
				if($pflegestufe)
				{
					$this->view->beatragt = '';
					$this->view->pflegestufe = $pflegestufe;
				}
				
				$this->view->patientenverfugung = $stamqarr[0]['patientenverfugung'];
				$this->view->vorsorgevollmacht = $stamqarr[0]['vorsorgevollmacht'];
				$this->view->bevollmachtigter = $stamqarr[0]['bevollmachtigter'];
				$this->view->bevollmachtigter_tel = $stamqarr[0]['bevollmachtigter_tel'];
				$this->view->betreuung = $stamqarr[0]['betreuung'];
				$this->view->betreuer = $stamqarr[0]['betreuer'];
				$this->view->betreuer_handy = $stamqarr[0]['betreuer_handy'];
				$this->view->betreuer_tel = $stamqarr[0]['betreuer_tel'];
				$this->view->betreuer_fax = $stamqarr[0]['betreuer_fax'];
				$this->view->erstkontakt_am = $stamqarr[0]['erstkontakt_am'];
				$this->view->erstkontakt_durch = $stamqarr[0]['erstkontakt_durch'];
				$this->view->ambulant = $stamqarr[0]['ambulant'];
				$this->view->stationar = $stamqarr[0]['stationar'];
				$ecog = explode(",", $stamqarr[0]['ecog']);
				$this->view->ecog = $ecog;
				$this->view->religion = $stamqarr[0]['religion'];
				$this->view->genogramm = $stamqarr[0]['genogramm'];
				$this->view->main_diagnosis = $stamqarr[0]['main_diagnosis'];
			}
			/* -------------------END UPDATE Action-------------------------------- */
		}

		public function stammblatt4Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ------------------- User Data--------------------------------------- */
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->loginusername = $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
			}

			/* ------------------- Client Data--------------------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$this->view->client_name = $clientdata[0]['client_name'];
			$this->view->client_team_name = $clientdata[0]['team_name'];
			$this->view->client_city = $clientdata[0]['city'];
			$this->view->client_street = $clientdata[0]['street1'];
			$this->view->client_zip = $clientdata[0]['postcode'];
			$this->view->client_phone = $clientdata[0]['phone'];
			$this->view->client_fax = $clientdata[0]['fax'];
			$this->view->client_email = $clientdata[0]['emailid'];

			/* -------------------Patient Data--------------------------------------- */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->pattel = $patientarr['phone'];
			$this->view->pathandy = $patientarr['mobile'];
			$this->view->patientenverfugung = $patientarr['living_will'];

			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
			$this->view->healthinsurance_company = $healthinsu_array[0]['company_name'];
			$this->view->healthinsurance_kknr = $healthinsu_array[0]['kvk_no'];
			$this->view->healthinsurance_versnr = $healthinsu_array[0]['insurance_no'];
			$this->view->healthinsurance_companytel = $healthinsu_array[0]['ins_phone'];
			$this->view->healthinsurance_companyfax = $healthinsu_array[0]['ins_phonefax'];
			//according to ISPC-834
			if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '1')
			{
				$this->view->zuzahlung = '0';
			}
			else if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '2')
			{
				$this->view->zuzahlung = '1';
			}
			else
			{
				$this->view->zuzahlung = '1';
			}
			//according to ISPC-1403
			/* if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();
				$this->view->healthinsurance_companytel = $healtharray['phone'];
				$this->view->healthinsurance_companyfax = $healtharray['phonefax'];
			} */

			/* --------------Patient family doctor---------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($patientarr['familydoc_id']);
			if($docarray)
			{
				$this->view->hausarzt_details = trim($docarray[0]['last_name']) . ", " . $docarray[0]['first_name'] . "<br/> " . $docarray[0]['street1'] . ", " . $docarray[0]['zip'] . " " . $docarray[0]['city'];
				$this->view->hausarzt_tel = $docarray[0]['phone_practice'];
				$this->view->hausarzt_fax = $docarray[0]['fax'];
				$this->view->hausarzt_details_pdf = trim($docarray[0]['last_name']) . ", " . $docarray[0]['first_name'] . "<br/>&nbsp;<br/> " . $docarray[0]['street1'] . ", " . $docarray[0]['zip'] . " " . $docarray[0]['city'];
			}
			else
			{
				$this->view->hausarzt_details = "";
				$this->view->hausarzt_tel = "";
				$this->view->hausarzt_fax = "";
				$this->view->hausarzt_details_pdf = "";
			}
			/* --------------Patient First Pfllegedienst---------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($patientarr['ipid']);
			if($ppflearray)
			{
				$this->view->pflegedienst_details = htmlspecialchars($ppflearray[0]['nursing']) . "<br/>" . htmlspecialchars($ppflearray[0]['street1']) . ", " . htmlspecialchars($ppflearray[0]['zip']) . " " . htmlspecialchars($ppflearray[0]['city']);
				$this->view->pflegedienst_tel = $ppflearray[0]['pf_phone_practice'];
				$this->view->pflegedienst_fax = $ppflearray[0]['pf_fax'];
				$this->view->pflegedienst_details_pdf = htmlspecialchars($ppflearray[0]['nursing']) . "<br/>&nbsp;<br/>" . htmlspecialchars($ppflearray[0]['street1']) . ", " . htmlspecialchars($ppflearray[0]['zip']) . " " . htmlspecialchars($ppflearray[0]['city']);
			}
			else
			{
				$this->view->pflegedienst_details = "";
				$this->view->pflegedienst_tel = "";
				$this->view->pflegedienst_fax = "";
				$this->view->pflegedienst_details_pdf = "";
			}

			/* --------------	Patient Familienstand	---------------------------- */
			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);

			if(!empty($weit[0]['familienstand']))
			{
				if($weit[0]['familienstand'] == 1)
				{
					$this->view->ledig = "checked='checked'";
				}

				if($weit[0]['familienstand'] == 2)
				{
					$this->view->verwitwet = "checked='checked'";
				}

				if($weit[0]['familienstand'] == 3)
				{
					$this->view->geschieden = "checked='checked'";
				}
			}

			/* --------------Patient Wohnsituation---------------------------- */
			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);
			if($pat_lives[0]['alone'] == 1)
			{
				$this->view->allein = "checked='checked'";
			}

			if($pat_lives[0]['house_of_relatives'] == 1)
			{
				$this->view->mit_angeh = "checked='checked'";
			}

			if($pat_lives[0]['home'] == 1)
			{
				$this->view->heim = "checked='checked'";
			}

			if($pat_lives[0]['hospiz'] == 1)
			{
				$this->view->hospiz = "checked='checked'";
			}

			if($pat_lives[0]['sonstiges'] == 1)
			{
				$this->view->sonstiges = "checked='checked'";
			}

			/* --------------Patient Contact persons Data ---------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);

			$familydegree = new FamilyDegree();
			$status = $familydegree->getFamilyDegrees(1);

			if(!empty($pcs[0]))
			{
				$cntpers1name = $pcs[0]['cnt_last_name'] . ', ' . $pcs[0]['cnt_first_name'];
				$cntpers1tel = $pcs[0]['cnt_phone'];
				$cntpers1handy = $pcs[0]['cnt_mobile'];
				//<!-- ISPC-2794,Elena,05.02.2021 -->
                $cntpers1address = $pcs[0]['cnt_street1'] ;
                $cntpers1address .= (strlen(trim($pcs[0]['cnt_street2'])) > 0) ?  ' ' .  $pcs[0]['cnt_street2'] : '';
                $cntpers1address .= ' ' . $pcs[0]['cnt_zip'];
                $cntpers1address .= ' ' . $pcs[0]['cnt_city'];
			}
			else
			{
				$cntpers1name = "";
				$cntpers1tel = "";
				$cntpers1handy = "";
				//<!-- ISPC-2794,Elena,05.02.2021 -->
                $cntpers1address = "";
			}

			if(!empty($pcs[1]))
			{
				$cntpers2name = $pcs[1]['cnt_last_name'] . ', ' . $pcs[1]['cnt_first_name'];
				$cntpers2tel = $pcs[1]['cnt_phone'];
				$cntpers2handy = $pcs[1]['cnt_mobile'];
				//<!-- ISPC-2794,Elena,05.02.2021 -->
                $cntpers2address = $pcs[1]['cnt_street1'] ;
                $cntpers2address .= (strlen(trim($pcs[1]['cnt_street2'])) > 0) ?  ' ' .  $pcs[1]['cnt_street2'] : '';
                $cntpers2address .= ' ' . $pcs[1]['cnt_zip'];
                $cntpers2address .= ' ' . $pcs[1]['cnt_city'];
			}
			else
			{
				$cntpers2name = "";
				$cntpers2tel = "";
				$cntpers2handy = "";
				//<!-- ISPC-2794,Elena,05.02.2021 -->
                $cntpers2address = "";
			}
			$this->view->cntpers1name = $cntpers1name;
			//<!-- ISPC-2794,Elena,05.02.2021 -->
            $this->view->cntpers1address = $cntpers1address;
			$this->view->cntpers1tel = $cntpers1tel;
			$this->view->cntpers1handy = $cntpers1handy;
			$this->view->cntpers2name = $cntpers2name;
			//<!-- ISPC-2794,Elena,05.02.2021 -->
			$this->view->cntpers2address = $cntpers2address;
			$this->view->cntpers2tel = $cntpers2tel;
			$this->view->cntpers2handy = $cntpers2handy;

			/* -------------------Patient Religions  ------------------------------- */
			$rel = new PatientReligions();
			$pat_rel = $rel->getReligionsData($ipid);
			$relcnt = $pat_rel[0]['religion'];
			if(!empty($pat_rel[0]['religion']))
			{
				if($pat_rel[0]['religion'] == 1)
				{
					$this->view->evange = "checked='checked'";
				}

				if($pat_rel[0]['religion'] == 2)
				{
					$this->view->katolic = "checked='checked'";
				}

				if($pat_rel[0]['religion'] == 6)
				{
					$this->view->keine = "checked='checked'";
				}
			}

			/* ------------------- Patient Pharmacy--------------------------------- */
			$pha = new PatientPharmacy();
			$phaarray = $pha->getPatientPharmacy($ipid);
			$this->view->apotheke_details = $phaarray[0]['apotheke'] . "<br/>" . $phaarray[0]['street1'] . ", " . $phaarray[0]['zip'] . " " . $phaarray[0]['city'];
			$this->view->apotheke_tel = $phaarray[0]['phone'];
			$this->view->apotheke_fax = $phaarray[0]['fax'];

			/* ------------------- Patient stage Data--------------------------------- */
			$pms = new PatientMaintainanceStage();
			$pat_pmsinfo = $pms->getLastpatientMaintainanceStage($patientarr['ipid']);
			$stage = array();
			if($pat_pmsinfo)
			{
				$stage[] = $pat_pmsinfo[0]['stage'];
				if($pat_pmsinfo[0]['horherstufung'] == 1)
				{
					$this->view->beatragt = 'checked="checked"';
				}
			}
			$this->view->pflegestufe = $stage;

			/* ------------------- Patient Allergies--------------------------------- */
			
			$aller = new PatientDrugPlanAllergies();
			$allergies = $aller->getPatientDrugPlanAllergies($decid);
			
			
			if(!empty($allergies))
			{
				$patient_allergies = $allergies[0];
				$this->view->allergien = htmlspecialchars(strip_tags($patient_allergies['allergies_comment'], '<br />'));
			}
			/* -------------------SAVE Actions-------------------------------- */
			if(strlen($_POST['btnsave']) > 0)
			{

				$kvno = new Application_Form_Stammblatt4();
				$result = $kvno->insertStammblatt4($_POST);

				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}
			}
			else if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->retainValues($_POST);
				$post = $_POST;
				$post['birth'] = $this->view->birth;
				$post['lastname'] = $this->view->lastname;
				$post['firstname'] = $this->view->firstname;
				$post['street'] = $this->view->street;
				$post['zip'] = $this->view->zip;
				$post['patcity'] = $this->view->patcity;
				$post['pattel'] = $this->view->pattel;
				$post['pathandy'] = $this->view->pathandy;
				$post['cntpers1name'] = $cntpers1name;
				$post['cntpers2name'] = $cntpers2name;
				//ISPC-2794,Elena,05.02.2021
				$post['cntpers2address'] = $cntpers2address ;
                $post['cntpers1address'] = $cntpers1address ;
// 			$post['hausarzt_details'] = $this->view->hausarzt_details;
// 			$post['pflegedienst_details'] = $this->view->pflegedienst_details;
				$post['hausarzt_details'] = $this->view->hausarzt_details_pdf;
				$post['pflegedienst_details'] = $this->view->pflegedienst_details_pdf;
				$post['apotheke_details'] = $this->view->apotheke_details;
				$post['healthinsurance_company'] = $this->view->healthinsurance_company;
				$post['healthinsurance_kknr'] = $this->view->healthinsurance_kknr;
				$post['healthinsurance_versnr'] = $this->view->healthinsurance_versnr;
				$post['healthinsurance_companytel'] = $this->view->healthinsurance_companytel;
				$post['healthinsurance_companyfax'] = $this->view->healthinsurance_companyfax;
				$post['ambulant'] = $_POST['ambulant'];
				$post['stationar'] = $_POST['stationar'];

				$this->generateformPdf(3, $post, 'Stammblat4', "stammblatt4_pdf.html");
			}

			$st4 = new Stammblatt4();
			$stamqarr = $st4->get_stammblatt4_details($ipid);

			if($stamqarr[0]['ipid'] != $ipid)
			{

			}

			if(count($stamqarr) > 0)
			{
				$this->view->familienstand = $stamqarr[0]['familienstand'];
				$wohnsituation = explode(",", $stamqarr[0]['wohnsituation']);
				if($wohnsituation)
				{
					$this->view->allein = "";
					$this->view->mit_angeh = "";
					$this->view->heim = "";
					$this->view->hospiz = "";
					$this->view->sonstiges = "";
					$this->view->wohnsituation = $wohnsituation;
				}
				$this->view->allergien = $stamqarr[0]['allergien'];
				$this->view->zuzahlung = $stamqarr[0]['zuzahlung'];
				$pflegestufe = explode(",", $stamqarr[0]['pflegestufe']);
				if($pflegestufe)
				{
					$this->view->beatragt = '';
					$this->view->pflegestufe = $pflegestufe;
				}
				$this->view->patientenverfugung = $stamqarr[0]['patientenverfugung'];
				$this->view->vorsorgevollmacht = $stamqarr[0]['vorsorgevollmacht'];
				$this->view->bevollmachtigter = $stamqarr[0]['bevollmachtigter'];
				$this->view->bevollmachtigter_tel = $stamqarr[0]['bevollmachtigter_tel'];
				$this->view->betreuung = $stamqarr[0]['betreuung'];
				$this->view->betreuer = $stamqarr[0]['betreuer'];
				$this->view->betreuer_handy = $stamqarr[0]['betreuer_handy'];
				$this->view->betreuer_tel = $stamqarr[0]['betreuer_tel'];
				$this->view->betreuer_fax = $stamqarr[0]['betreuer_fax'];
				$this->view->erstkontakt_am = $stamqarr[0]['erstkontakt_am'];
				$this->view->erstkontakt_durch = $stamqarr[0]['erstkontakt_durch'];
				$this->view->ambulant = $stamqarr[0]['ambulant'];
				$this->view->stationar = $stamqarr[0]['stationar'];
				//$ecog = explode(",", $stamqarr[0]['ecog']);
				//$this->view->ecog = $ecog;
				$this->view->religion = $stamqarr[0]['religion'];
				//$this->view->genogramm = $stamqarr[0]['genogramm'];
				$this->view->comments = $stamqarr[0]['comments'];
			}
			/* -------------------END UPDATE Action-------------------------------- */
		}

		public function patientstammblattsapvAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* -------------------Patient Data--------------------------------------- */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->pattel = $patientarr['phone'];
			$this->view->pathandy = $patientarr['mobile'];
			$this->view->patientenverfugung = $patientarr['living_will'];

			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
			$this->view->healthinsurance_company = $healthinsu_array[0]['company_name'];
			$this->view->healthinsurance_kknr = $healthinsu_array[0]['kvk_no'];
			$this->view->healthinsurance_versnr = $healthinsu_array[0]['insurance_no'];
			$this->view->healthinsurance_companytel = $healthinsu_array[0]['ins_phone'];
			$this->view->healthinsurance_companyfax = $healthinsu_array[0]['ins_phonefax'];
				
			//according to ISPC-834
			if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '1')
			{
			    $this->view->zuzahlung = '0';
			}
			else if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '2')
			{
			    $this->view->zuzahlung = '1';
			}
			else
			{
			    $this->view->zuzahlung = '1';
			}			

			/* --------------Patient family doctor---------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($patientarr['familydoc_id']);
			$this->view->hausarzt_details = $docarray[0]['last_name'] . ", " . $docarray[0]['first_name'] . "<br/> " . $docarray[0]['street1'] . ", " . $docarray[0]['zip'] . " " . $docarray[0]['city'];
			$this->view->hausarzt_tel = $docarray[0]['phone_practice'];
			$this->view->hausarzt_fax = $docarray[0]['fax'];

			/* --------------Patient First Pfllegedienst---------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($patientarr['ipid']);
			$this->view->pflegedienst_details = htmlspecialchars($ppflearray[0]['nursing']) . "<br/>" . htmlspecialchars($ppflearray[0]['street1']) . ", " . htmlspecialchars($ppflearray[0]['zip']) . " " . htmlspecialchars($ppflearray[0]['city']);
			$this->view->pflegedienst_tel = $ppflearray[0]['pf_phone_practice'];
			$this->view->pflegedienst_fax = $ppflearray[0]['pf_fax'];

			/* --------------	Patient Main and side diagnisis	---------------------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);

			if(count($metaids) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = ",";
				$metadiagnosis = "";
				foreach($metaids as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle)
					{
						$metadiagnosis .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$maindiagnosis = $diagnosis;
			}
			$this->view->allmaindiagnosis = $maindiagnosis;

			$abb = "'ND','AD','DD'";
			$dgs = new DiagnosisType();
			$ddarr = $dgs->getDiagnosisTypes($logininfo->clientid, $abb);

			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}

			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
				//echo $val1['id'];
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);

				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						if(strlen($val['icdnumber']) > 0)
						{
							$other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
						}
						else
						{
							$other_diagnosis .= $comma . $val['diagnosis'];
						}
						$dia++;
						$comma = ",";
					}
				}
			}
			$this->view->allsidediagnosis = $other_diagnosis;

			/* -------------- Wunsch des Patiente---------------------------- */
			$stm = new Stammdatenerweitert();
			$stamdats = $stm->getStammdatenerweitert($ipid);

			if($stamdats[0]['wunsch'] != "0" && !empty($stamdats[0]['wunsch']))
			{
				$stamdatemwunsch = explode(",", $stamdats[0]['wunsch']);

				$wunsch_name = array("1" => "Zu Hause bleiben können", "2" => "kein Krankenhaus", "3" => "Autonomie",
					"4" => "Leidenslinderung", "5" => "Symptomlinderung", "6" => "mehr Kraft",
					"7" => "wieder aufstehen können", "8" => "noch eine Reise machen", "9" => "In Ruhe gelassen werden",
					"10" => "Keine Angabe", "11" => "Frage nach aktiver Sterbehilfe", "12" => "Lebensbeendigung", "13" => "Expliziter Wunsch");
				foreach($stamdatemwunsch as $value)
				{
					if(array_key_exists($value, $wunsch_name))
					{
						$wunsch_str .= ' ' . $wunsch_name[$value] . ',';
					}
				}
				$behandlungswunsch = substr($wunsch_str, 0, -1);
			}
			else
			{
				$behandlungswunsch = "";
			}
			$this->view->behandlungswunsch = $behandlungswunsch;

			/* --------------Patient Contact persons Data ---------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);

			$versorg = $pc->getVerPatientContact($ipid);
			if($versorg)
			{
				foreach($versorg as $kver => $vver)
				{
					$vorsorgevollmacht = $vver['cnt_hatversorgungsvollmacht'];
				}
			}
			else 
			{
				$vorsorgevollmacht = '2';
			}
		
			$familydegree = new FamilyDegree();
			$status = $familydegree->getFamilyDegrees(1);

			if(!empty($pcs[0]))
			{
				$cntpers1name = $pcs[0]['cnt_last_name'] . ', ' . $pcs[0]['cnt_first_name'];
				$cntpers1tel = $pcs[0]['cnt_phone'];
				$cntpers1handy = $pcs[0]['cnt_mobile'];
				
			}
			else
			{
				$cntpers1name = "";
				$cntpers1tel = "";
				$cntpers1handy = "";
			}

			if(!empty($pcs[1]))
			{
				$cntpers2name = $pcs[1]['cnt_last_name'] . ', ' . $pcs[1]['cnt_first_name'];
				$cntpers2tel = $pcs[1]['cnt_phone'];
				$cntpers2handy = $pcs[1]['cnt_mobile'];
				
			}
			else
			{
				$cntpers2name = "";
				$cntpers2tel = "";
				$cntpers2handy = "";
			}

			$this->view->cntpers1name = $cntpers1name;
			$this->view->cntpers1tel = $cntpers1tel;
			$this->view->cntpers1handy = $cntpers1handy;
			$this->view->cntpers2name = $cntpers2name;
			$this->view->cntpers2tel = $cntpers2tel;
			$this->view->cntpers2handy = $cntpers2handy;
			$this->view->vorsorgevollmacht = $vorsorgevollmacht;
			
			foreach($pcs as $k => $cnt_details)
			{
					
				if($cnt_details['cnt_hatversorgungsvollmacht'] == "1")
				{
					$voll_cnt_name = $cnt_details['cnt_last_name'] . ', ' . $cnt_details['cnt_first_name'];
					$voll_cnt_phone = $cnt_details['cnt_phone'];
					$this->view->vorsorgevollmacht = '1';
				}
			}
			$this->view->bevollmachtigter = $voll_cnt_name;
			$this->view->bevollmachtigter_tel = $voll_cnt_phone;
				
			/* ------------------- Patient Pharmacy--------------------------------- */
			$pha = new PatientPharmacy();
			$phaarray = $pha->getPatientPharmacy($ipid);
			$this->view->apotheke_details = $phaarray[0]['apotheke'] . "<br/>" . $phaarray[0]['street1'] . ", " . $phaarray[0]['zip'] . " " . $phaarray[0]['city'];
			$this->view->apotheke_tel = $phaarray[0]['phone'];
			$this->view->apotheke_fax = $phaarray[0]['fax'];
			
			/* ------------------- Patient Allergies--------------------------------- */
			
			$aller = new PatientDrugPlanAllergies();
			$allergies = $aller->getPatientDrugPlanAllergies($decid);
			
			
			if(!empty($allergies))
			{
				$patient_allergies = $allergies[0];
				$this->view->allergien = htmlspecialchars(strip_tags($patient_allergies['allergies_comment'], '<br />'));
			}
			
			/* -------------------SAVE Actions-------------------------------- */
			if(strlen($_POST['btnsave']) > 0)
			{
				foreach($_POST['patientenverfugung'] as $key => $value)
				{
					$living_will[] = $value;
				}
				print_r($living_will[0]);
				$upd = new Application_Form_PatientMaster();
				$updliving =$upd->Update_livingwillFrom($living_will[0]);
				
				
				$kvno = new Application_Form_PatientStammblattsapv();
				$result = $kvno->insertPatientStammblattsapv($_POST);
				
				//exit;
				
				
				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}
			}
			else if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->retainValues($_POST);
				$post = $_POST;
				$post['birth'] = $this->view->birth;
				$post['lastname'] = $this->view->lastname;
				$post['firstname'] = $this->view->firstname;
				$post['street'] = $this->view->street;
				$post['zip'] = $this->view->zip;
				$post['patcity'] = $this->view->patcity;
				$post['pattel'] = $this->view->pattel;
				$post['pathandy'] = $this->view->pathandy;
				$post['cntpers1name'] = $cntpers1name;
				$post['cntpers2name'] = $cntpers2name;
				$post['healthinsurance_company'] = $this->view->healthinsurance_company;
				$post['healthinsurance_kknr'] = $this->view->healthinsurance_kknr;
				$post['healthinsurance_versnr'] = $this->view->healthinsurance_versnr;
				$post['healthinsurance_companytel'] = $this->view->healthinsurance_companytel;
				$post['healthinsurance_companyfax'] = $this->view->healthinsurance_companyfax;
				$post['hausarzt_details'] = $this->view->hausarzt_details;
				$post['pflegedienst_details'] = $this->view->pflegedienst_details;
				$post['apotheke_details'] = $this->view->apotheke_details;
// 				$post['allmaindiagnosis'] = $this->view->allmaindiagnosis;
// 				$post['allsidediagnosis'] = $this->view->allsidediagnosis;
				$post['behandlungswunsch'] = $_POST['behandlungswunsch'];

				$this->generateformPdf(3, $post, 'PatientStammblattsapv', "patientstammblattsapv_pdf.html");
			}
			
			$stamq = Doctrine_Core::getTable('PatientStammblattsapv')->findBy('ipid', $ipid);
			$stamqarr = $stamq->toArray();
			if($stamqarr[0]['ipid'] != $ipid)
			{

			}
//print_r($stamqarr);exit;
			if(count($stamqarr) > 0)
			{
				$patientenverfugung = explode(",", $stamqarr[0]['patientenverfugung']);
				
				if($patientenverfugung)
				{
					$this->view->patientenverfugung = $patientenverfugung[0];
				}

				$betreuung = explode(",", $stamqarr[0]['betreuung']);
				if($betreuung)
				{
					$this->view->betreuung = $betreuung;
				}

				$vorsorgevollmacht = explode(",", $stamqarr[0]['vorsorgevollmacht']);
				
				if($vorsorgevollmacht)
				{
					$this->view->vorsorgevollmacht = $vorsorgevollmacht[0];
				}

				$this->view->betreuer = $stamqarr[0]['betreuer'];
				$this->view->betreuer_tel = $stamqarr[0]['betreuer_tel'];
				$this->view->betreuer_fax = $stamqarr[0]['betreuer_fax'];
				$this->view->bevollmachtigter = $stamqarr[0]['bevollmachtigter'];
				$this->view->bevollmachtigter_tel = $stamqarr[0]['bevollmachtigter_tel'];
				$this->view->bevollmachtigter_fax = $stamqarr[0]['bevollmachtigter_fax'];
				$this->view->allergien = $stamqarr[0]['allergien'];

				if(!empty($stamqarr[0]['behandlungswunsch']))
				{
					$this->view->behandlungswunsch = $stamqarr[0]['behandlungswunsch'];
				}
				else
				{
					$this->view->behandlungswunsch = $behandlungswunsch;
				}
			}
			/* -------------------END UPDATE Action-------------------------------- */
		}

		public function stammblatt3Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* -------------------Patient Data--------------------------------------- */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->pattel = $patientarr['phone'];
			$this->view->pathandy = $patientarr['mobile'];
			$this->view->patientenverfugung = $patientarr['living_will'];

			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
			$this->view->healthinsurance_company = $healthinsu_array[0]['company_name'];
			$this->view->healthinsurance_kknr = $healthinsu_array[0]['kvk_no'];
			$this->view->healthinsurance_versnr = $healthinsu_array[0]['insurance_no'];
			$this->view->zuzahlung = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{

				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();
				$this->view->healthinsurance_companytel = $healtharray['phone'];
				$this->view->healthinsurance_companyfax = $healtharray['phonefax'];
			}

			/* --------------Patient family doctor---------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($patientarr['familydoc_id']);
			if($docarray[0])
			{
				$this->view->hausarzt_details = $docarray[0]['last_name'] . ", " . $docarray[0]['first_name'] . "<br/> " . $docarray[0]['street1'] . ", " . $docarray[0]['zip'] . " " . $docarray[0]['city'];
				$this->view->hausarzt_tel = $docarray[0]['phone_practice'];
				$this->view->hausarzt_fax = $docarray[0]['fax'];
			}

			/* --------------Patient First Pfllegedienst---------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($patientarr['ipid']);
			if($ppflearray[0])
			{
				$this->view->pflegedienst_details = $ppflearray[0]['nursing'] . "<br/>" . $ppflearray[0]['street1'] . ", " . $ppflearray[0]['zip'] . " " . $ppflearray[0]['city'];
				$this->view->pflegedienst_tel = $ppflearray[0]['pf_phone_practice'];
				$this->view->pflegedienst_fax = $ppflearray[0]['pf_fax'];
			}

			/* --------------Patient First Apotheke---------------------------- */
			$ppharmacy = new PatientPharmacy();
			$ppharmacy_array = $ppharmacy->getPatientPharmacy($patientarr['ipid']);
			if($ppharmacy_array[0])
			{
				$this->view->pharmacy_details = $ppharmacy_array[0]['apotheke'] . "<br/>" . $ppharmacy_array[0]['street1'] . ", " . $ppharmacy_array[0]['zip'] . " " . $ppharmacy_array[0]['city'];
				$this->view->pharmacy_tel = $ppharmacy_array[0]['phone'];
				$this->view->pharmacy_fax = $ppharmacy_array[0]['fax'];
			}

			/* --------------Patient Theraphieplanung---------------------------- */
			$Therapieplanung = new PatientTherapieplanung();
			$therapy = $Therapieplanung->getTherapieplanungData($ipid);
			$therapy_str = "";
			if($therapy[0]['ipid'])
			{
				$a = 0;
				$b = 0;
				$c = 0;
				$d = 0;
				$e = 0;
				$f = 0;
				$g = 0;
				$h = 0;
				$i = 0;
				$j = 0;
				$k = 0;
				if($therapy[0]['ernahrungstherapie'] == 1)
				{
					$therapy_str .='Keine Ernährungstherapie, ';
				}
				if($therapy[0]['infusionstherapie'] == 1)
				{
					$therapy_str .='Keine Infusionstherapie, ';
				}
				if($therapy[0]['antibiose_bei_pneumonie'] == 1)
				{
					$therapy_str .='Keine Antibiose bei Pneumonie, ';
				}
				if($therapy[0]['antibiose_bei_HWI'] == 1)
				{
					$therapy_str .='Keine Antibiose bei HWI, ';
				}
				if($therapy[0]['tumorreduktionstherapie_chemo'] == 1)
				{
					$therapy_str .='Keine Tumorreduktionstherapie / Chemo, ';
				}
				if($therapy[0]['krankenhausverlegung'] == 1)
				{
					$therapy_str .='Keine Krankenhausverlegung im Notfall (z.B. Harnverhalt), ';
				}
				if($therapy[0]['lagerung_durch_pflege'] == 1)
				{
					$therapy_str .='Keine Lagerung durch Pflege, ';
				}
				if($therapy[0]['orale_medikation_mehr'] == 1)
				{
					$therapy_str .='Keine orale Medikation mehr, ';
				}
				if($therapy[0]['blut_volumenersatztherapie'] == 1)
				{
					$therapy_str .='Keine Blut- / Volumenersatztherapie, ';
				}
				if($therapy[0]['palliative'] == 1)
				{
					$therapy_str .='Palliative Sedierung bei unkontrollierbaren Symptomen, ';
				}
				if(!empty($therapy[0]['freetext']))
				{
					$therapy_str .= "" . $therapy[0]['freetext'] . ", ";
				}
			}
			$this->view->therapy = substr($therapy_str, 0, -2);

			/* --------------Patient Contact persons Data ---------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);
			$familydegree = new FamilyDegree();
			$status = $familydegree->getFamilyDegrees(1);

			if(!empty($pcs[0]))
			{
				$cntpers1name = $pcs[0]['cnt_last_name'] . ', ' . $pcs[0]['cnt_first_name'];
				$cntpers1tel = $pcs[0]['cnt_phone'];
				$cntpers1handy = $pcs[0]['cnt_mobile'];
			}
			else
			{
				$cntpers1name = "";
				$cntpers1tel = "";
				$cntpers1handy = "";
			}

			if(!empty($pcs[1]))
			{
				$cntpers2name = $pcs[1]['cnt_last_name'] . ', ' . $pcs[1]['cnt_first_name'];
				$cntpers2tel = $pcs[1]['cnt_phone'];
				$cntpers2handy = $pcs[1]['cnt_mobile'];
			}
			else
			{
				$cntpers2name = "";
				$cntpers2tel = "";
				$cntpers2handy = "";
			}
			$this->view->cntpers1name = $cntpers1name;
			$this->view->cntpers1tel = $cntpers1tel;
			$this->view->cntpers1handy = $cntpers1handy;
			$this->view->cntpers2name = $cntpers2name;
			$this->view->cntpers2tel = $cntpers2tel;
			$this->view->cntpers2handy = $cntpers2handy;

			/* -------------------Patient Diagnosis  ------------------------------- */
			$abb = "'HD','ND','AD','DD'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($clientid, $abb);
			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}
			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
				//echo $val1['id'];
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);

				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						if(strlen($val['icdnumber']) > 0)
						{
							$other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
						}
						else
						{
							$other_diagnosis .= $comma . $val['diagnosis'];
						}
						$dia++;
						$comma = ",";
					}
				}
			}
			$this->view->diagnosis = $other_diagnosis;

			/* -------------------PDF Actions-------------------------------- */
			if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->retainValues($_POST);
				$post = $_POST;
				$post['birth'] = $this->view->birth;
				$post['lastname'] = $this->view->lastname;
				$post['firstname'] = $this->view->firstname;
				$post['street'] = $this->view->street;
				$post['zip'] = $this->view->zip;
				$post['patcity'] = $this->view->patcity;
				$post['pattel'] = $this->view->pattel;
				$post['pathandy'] = $this->view->pathandy;
				$post['cntpers1name'] = $cntpers1name;
				$post['cntpers2name'] = $cntpers2name;
				$post['hausarzt_details'] = $this->view->hausarzt_details;
				$post['pflegedienst_details'] = $this->view->pflegedienst_details;
				$post['pharmacy_details'] = $this->view->pharmacy_details;
				$post['healthinsurance_company'] = $this->view->healthinsurance_company;
				$post['healthinsurance_versnr'] = $this->view->healthinsurance_versnr;
				$post['diagnosis'] = $this->view->diagnosis;
				$post['therapy'] = $this->view->therapy;
				$post['angehorige'] = $_POST['angehorige'];

				$this->generateformPdf(3, $post, 'Stammblatt3', "stammblatt3_pdf.html");
			}
		}

		public function emergencyplanformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->birthd = $parr['birthd'];

			$dian = new Application_Form_Diagnosis();
			$sortarr = $dian->getHDdiagnosis($parr['ipid']);
			foreach($sortarr as $key => $diagnosis)
			{
				$maind .= ' ' . $diagnosis['description'] . ',';
			}

			$this->view->maindiagnosis = substr($maind, 0, -1);

			/* ------------------------------------------------ */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$this->view->city = $clientdata[0]['city'];

			if(strlen($_POST['btnsave']) > 0)
			{
				$sanfr = new Application_Form_EmergencyPlan();
				$result = $sanfr->insertEmergencyPlan($_POST);
				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}
			}

			if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->view->maindiagnosis = $_POST['maindiagnosis'];
				$this->generateformPdf(3, $_POST, 'Notfallplan', "emergencyplanformpdf.html");
			}

			if(strlen($ipid) > 0)
			{
				$stamq = Doctrine_Core::getTable('EmergencyPlan')->findBy('ipid', $ipid);
				$stamqarr = $stamq->toArray();
				//print_r($stamqarr);
				if(count($stamqarr) > 0)
				{
					$this->view->gesetzliche = $stamqarr[0]['gesetzliche'];
					$this->view->besonderheiten = $stamqarr[0]['besonderheiten'];
					$this->view->vollmatch = $stamqarr[0]['vollmatch'];
					$this->view->mogliche1 = $stamqarr[0]['mogliche1'];
					$this->view->mogliche2 = $stamqarr[0]['mogliche2'];
					$this->view->mogliche3 = $stamqarr[0]['mogliche3'];
					$this->view->mogliche4 = $stamqarr[0]['mogliche4'];
					$this->view->mogliche5 = $stamqarr[0]['mogliche5'];
					$this->view->mogliche6 = $stamqarr[0]['mogliche6'];
					$this->view->mogliche7 = $stamqarr[0]['mogliche7'];
					$this->view->vompatient1 = $stamqarr[0]['vompatient1'];
					$this->view->vompatient2 = $stamqarr[0]['vompatient2'];
					$this->view->vompatient3 = $stamqarr[0]['vompatient3'];
					$this->view->vompatient4 = $stamqarr[0]['vompatient4'];
					$this->view->vompatient5 = $stamqarr[0]['vompatient5'];
					$this->view->vompatient6 = $stamqarr[0]['vompatient6'];
					$this->view->vompatient7 = $stamqarr[0]['vompatient7'];
				}
				else
				{

				}
			}
		}

		public function sapvfanfrageAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ------------------------------------------------ */
// 			$patientmaster = new PatientMaster();
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $parr;
			$this->view->bdate = $patientinfo['birthd'];
			$split = explode(" ", $patientinfo['admission_date']);
			$bsplit = explode("-", $split[0]);
			$this->view->admissiondate = $bsplit[2] . $bsplit[1] . $bsplit[0];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);
			$this->view->insurance_com_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->insurance_status = $healthinsu_array[0]['insurance_status'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($parr['familydoc_id']);

			$this->view->hausarzt_name = $docarray[0]['last_name'] . ", " . $docarray[0]['first_name'];
			$this->view->hausarzt_praxis = $docarray[0]['phone_practice'];
			$this->view->hausarzt_mobil = $docarray[0]['phone_cell'];
			$this->view->isdoc = 1;

			$refan = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->anfragende_person = $refan['referred_name'];

			/* ------------------- Maindiagnosis & Sidediagnosis------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$this->view->relevante_diagnosen = $diagnosis;
			}
			else
			{
				$this->view->relevante_diagnosen = "";
			}

			$abb = "'ND'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($logininfo->clientid, $abb);

			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}
			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);

				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						if(strlen($val['icdnumber']) > 0)
						{
							$other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
						}
						else
						{
							$other_diagnosis .= $comma . $val['diagnosis'];
						}
						$dia++;
						$comma = ",";
					}
				}
			}

			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);

			if(count($metaids) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = ",";
				$metadiagnosis = "";
				foreach($metaids as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle)
					{
						$metadiagnosis .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			$this->view->relevante_nebendiagnosen = $other_diagnosis . $metadiagnosis;

			/* ---------------------------------------------------------------------- */
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);

			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->loginusername = $loguserarray['user_title'] . " " . $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
			}

			if(strlen($_POST['btnsave']) > 0)
			{
				$sanfr = new Application_Form_SapvAnfrage();
				$result = $sanfr->insertSapvAnfrage($_POST);
				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}
			}

			if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->generateformPdf(3, $_POST, 'SAPVf_anfrage', "sapvf_anfrageformpdf.html");
			}

			if(strlen($ipid) > 0)
			{
				$stamq = Doctrine_Core::getTable('SapAnfrage')->findBy('ipid', $ipid);
				$stamqarr = $stamq->toArray();
				//print_r($stamqarr);
				if(count($stamqarr) > 0)
				{
					if(strlen($stamqarr[0]['datum_der_anfrage']) > 0)
					{
						$this->view->admissiondate = $stamqarr[0]['datum_der_anfrage'];
					}
					else
					{
						$this->view->admissiondate = date('d.m.Y');
					}

					if(strlen($stamqarr[0]['ehrenamtliche']) > 0)
					{
						$this->view->ehrenamtliche = $stamqarr[0]['ehrenamtliche'];
						$this->view->distyle = "block";
					}
					else
					{
						$this->view->distyle = "none";
					}


					$this->view->beziehungjs = $stamqarr[0]['beziehung_zum_patient'];
					$this->view->grundefurdiejs = $stamqarr[0]['grunde_fur_die_anfrage'];
					$this->view->kommentar_spez = $stamqarr[0]['kommentar_spez'];
					$this->view->relevante_diagnosen = $stamqarr[0]['relevante_diagnosen'];
					$this->view->relevante_nebendiagnosen = $stamqarr[0]['relevante_nebendiagnosen'];
					$this->view->vermittelt_vonjs = $stamqarr[0]['vermittelt_von'];
					$this->view->hausarzt_praxis = $stamqarr[0]['hausarzt_praxis'];
					$this->view->hausarzt_name = $stamqarr[0]['hausarzt_name'];
					$this->view->hausarzt_mobil = $stamqarr[0]['hausarzt_mobil'];
					$this->view->palliativarzt_mobil = $stamqarr[0]['palliativarzt_mobil'];
					$this->view->palliativkraft_mobil = $stamqarr[0]['palliativkraft_mobil'];
					$this->view->pflegedienst_tel = $stamqarr[0]['pflegedienst_tel'];
					$this->view->hospizhelfer_tel = $stamqarr[0]['hospizhelfer_tel'];
					$this->view->klinikum_tel = $stamqarr[0]['klinikum_tel'];
					$this->view->krankenkasse_tel = $stamqarr[0]['krankenkasse_tel'];
					$this->view->besonderheiten = $stamqarr[0]['besonderheiten'];
					$this->view->patient_einverstanden_mit_anfragejs = $stamqarr[0]['patient_einverstanden_mit_anfrage'];
					$this->view->aktueller_aufenthalt_des_patientenjs = $stamqarr[0]['aktueller_aufenthalt_des_patienten'];
					$this->view->empfehlungjs = $stamqarr[0]['empfehlung'];
					$this->view->procederejs = $stamqarr[0]['procedere'];
					$this->view->anfragende_person = $stamqarr[0]['anfragende_person'];
				}
				else
				{
					$this->view->sapv_date = date('d.m.Y');
					$this->view->distyle = "none";
				}
			}
		}


        private function generate_cf_report($preview=0, $ipid, $data){
            $template_path=APPLICATION_PATH . '/views/scripts/templates/cfreports/';
            $cconfig=ClientConfig::getConfig($this->logininfo->clientid , 'clinicconfic');

            if(isset($cconfig['cf_bericht_folder'])){
                $cconfigdir=$cconfig['cf_bericht_folder'];
                $template_path=$template_path . $cconfigdir ."/";
            }else{
                $template_path=$template_path . "default/";
            }

            $render_template=$template_path . "bericht.html";

            if(!file_exists($render_template)) {
                die('Template "' . $render_template . '" is missing!');
            }

            $title=$data['formtype_name'];
            $data['title']=$title;
            //$data['mainaddress'] = $data['block_report_recipient'];

            $pdf_name=preg_replace( '/[\W]/', '', $title);

            $patient = array();
            $patient['nice_name'] = $data['nice_name'];
            $patient['epid'] = $data['epid'];
            $patient['nice_address'] = $data['nice_address'];
            $patient['birthd'] = $data['birthd'];
            $patient['ipid']=$ipid;

            $footer_text = $this->translate('[Page %s from %s]');
            $options = array(
                "orientation" => "P",
                "footer_type" => "1 of n",
                "footer_text" => $footer_text,
                "margins" => array(5, 5, 5),
                "font"=>array('family'=>'helvetica','size'=>'11'),
                "no_div_vspace"=>'please!',
            );


            $skip_clear_fields = array(
                'medications_pdf',
                'bedarfsmedications_pdf',
                'ivmedications_pdf',
                'medications',
                'bedarfmedications',
                'crisismedications',
                'crisismedications_pdf',
                'apotheke_details',
                'hausarzt_details',
                'addresshdn',
                'bedarfmedications',
                'ivmedications',
                'schmerzemedications',
                'blocks_order',
                'sapv_only_blocks',
                'allowed_blocks',
                'ebm_goa_blocks',
                'ebm',
                'main',
                'pflegedienst_details',
                'address',
                'patient_details',
                'diagnosis',
                'goa',
                'egblock',
                'rpassessment_header_text',
                'schmerzemedications_pdf',
                'header_string',
                'patient_ipos_values',
                'block_puncture',
                'block_infusion',
                'block_infusiontimes',
                'block_adverseevents',

                //ISPC-2673 Lore 25.09.2020
                'block_resources',
                
                //ISPC-2387
                'block_visitclasification',

                //ISPC-2508 Carmen 27.01.2020
                //Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
                'block_artificial_entries_exits',
                
                'block_careprocessclinic',//IM-4
                'block_timedocumentationclinic',//IM-16
                'block_treatmentplanclinic',//IM-26
                'block_jobbackgroundclinic',//IM-47
                'block_dischargeplanningclinic',//IM-48
                'block_screeningdepressionclinic',//IM-51
                'block_genogram',//IM-55
                'simpleblocks_html',
                //ISPC-2610, not implemented yet, elena, 23.06.2020
                'ipos'
            );

            foreach ($data['auto_add_blocks'] as $myblock){
                $skip_clear_fields[]=$myblock;
            }

            $data = Pms_CommonData::clear_pdf_data($data, $skip_clear_fields);


            $newview = new Zend_View();
            $newview->all_values=$data;
            $newview->options=$options;
            $newview->setScriptPath($template_path);
            $html = $newview->render("bericht.html");
            $course_tile = Pms_CommonData::aesEncrypt(addslashes($data['formtype_name']));

            if($data['generate_bericht_draft']) {
                $options['watermark'] = PUBLIC_PATH."/images/cfreports/draft.jpg";
                $pdf_name="Vorl. Bericht " . $pdf_name;
                $course_tile="Vorl. Bericht" . $course_tile;
            }


            if($preview){
                Pms_PDFUtil::generate_pdf_to_browser($html, $pdf_name, $options);
                exit();
            }
            //generate and store the pdf
            $pdfid = Pms_PDFUtil::generate_pdf_to_patient_file($html, $pdf_name, $title, $ipid, $options);

            $cust = new PatientCourse();
            $cust->ipid = $ipid;
            $cust->course_date = date('Y-m-d H:i:s');
            $cust->course_type = Pms_CommonData::aesEncrypt('K');
            $cust->course_title = Pms_CommonData::aesEncrypt(addslashes($data['formtype_name']));
            $cust->user_id = $this->logininfo->userid;
            //  $cust->done_date = strftime("%Y-%m-%d ", strtotime( $erg['date']));
            //$cust->done_name = "";
            $cust->tabname = Pms_CommonData::aesEncrypt("fileupload");
            $cust->recordid = $pdfid;
            $cust->save();

            if($data['report_tags']){
                Application_Form_PatientFile2tags::insert_file_tags($pdfid, $data['report_tags']);
            }



            $out=['pdfid'=>$pdfid];

            return $out;
        }



		private function generateformPdf($chk, $post, $pdfname, $filename)
		{
			
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$clientinfo = Pms_CommonData::getClientData($clientid);
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			if($_REQUEST['xxx'])
			{
				print_r($post);
			}

			$skip_clear_fields = array(
			    'medications_pdf', 
			    'bedarfsmedications_pdf', 
                'crisismedications_pdf', //IM-119
                'crisismedications',
			    'ivmedications_pdf', 
			    'medications', 
			    'bedarfmedications', 
			    'apotheke_details', 
			    'hausarzt_details', 
			    'addresshdn', 
			    'bedarfmedications', 
			    'ivmedications', 
			    'schmerzemedications', 
			    'blocks_order', 
			    'sapv_only_blocks', 
			    'allowed_blocks', 
			    'ebm_goa_blocks', 
			    'ebm', 
			    'main', 
			    'pflegedienst_details', 
			    'address', 
			    'patient_details', 
			    'diagnosis', 
			    'goa', 
			    'egblock', 
			    'rpassessment_header_text', 
			    'schmerzemedications_pdf',
			    'header_string',
			    'patient_ipos_values',
			    'block_puncture',
			    'block_infusion',
			    'block_infusiontimes',
			    'block_adverseevents',
			    
			    //ISPC-2387
			    'block_visitclasification',
			    
			    //ISPC-2488 Lore 22.11.2019
			    'block_delegation',
			    
			    //ISPC-2671 Lore 07.09.2020
			    'block_patient_acp',
			    
			    //ISPC-2668 Lore 11.09.2020
			    'block_patient_ms',
			    
			    //ISPC-2666 Lore 16.09.2020
			    'block_patient_hi',
			    
			    //ISPC-2667 Lore 21.09.2020
			    'block_patient_ci',
			    
			    //ISPC-2669 Lore 23.09.2020
			    'block_patient_hc',
			    
			    //ISPC-2670 Lore 24.09.2020
			    'block_patient_evn',
			    
			    //ISPC-2673 Lore 25.09.2020
			    'block_resources',
			    
			    //ISPC-2773 Lore 14.12.2020
			    'block_patient_familyinfo',
			    
			    //ISPC-2776 Lore 15.12.2020
			    'block_patient_childrendiseases',
			    
			    //ISPC-2788 Lore 08.01.2021
			    'block_patient_nutritioninfo',
			    
			    //ISPC-2787 Lore 11.01.2021
			    'block_patient_stimulatorsinfo',
			    
			    //ISPC-2790 Lore 12.01.2021
			    'block_patient_finalphase',

			    //ISPC-2791 Lore 13.01.2021
			    'block_patient_excretioninfo',
			    
			    //ISPC-2792 Lore 15.01.2021
			    'block_patient_personalhygiene',
			    
			    //ISPC-2793 Lore 18.01.2021
			    'block_patient_comm_employ',
			    
				//ISPC-2508 Carmen 27.01.2020
			    //Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
				'block_artificial_entries_exits',

                'block_careprocessclinic',//IM-4                
                'block_timedocumentationclinic',//IM-16
                'block_treatmentplanclinic',//IM-26
                'block_talkcontent',//IM-46
                'block_jobbackgroundclinic',//IM-47
                'block_dischargeplanningclinic',//IM-48
                'block_screeningdepressionclinic',//IM-51
                'block_medicationclinic',//IM-53
                'block_talkwith',//IM-56
                'block_psychosocialstatus',//IM-62
                'block_palliativsupport',//IM-65
                'block_palliativassessment',//IM-66
                'block_clinicsoap',//IM-87
                'block_clinicdiagnosis',//IM-91
                'block_clinicshift',//IM-92
                'block_clinicmeasure',//IM-93
                'simpleblocks_html',
                'pflegeba' ,//ISPC-2599,
                'coordinationtime', //ISPc-2626 ,
                'fileupload', //ISPC-2628
                'lmu_pmba2', //ISPC-2631
                'block_talkwithsingleselection', //ISPC-2663 Carmen 02.09.2020
				'beatmung' //ISPC-2697, elena, 06.11.2020
			);
			
			foreach($post['custom_blocks_allowed'] as $kb=>$vb)
			{
				$skip_clear_fields[] = 'block_'.$vb;
			}
			
            foreach ($post['auto_add_blocks'] as $myblock){
                $skip_clear_fields[]=$myblock;
            }
			
			$post = Pms_CommonData::clear_pdf_data($post, $skip_clear_fields);

			if($_REQUEST['xxx'])
			{
				print_r($post);
				exit;
			}

// 			$post['ipid'] = Pms_CommonData::getIpid($decid);
			$post['ipid'] = $ipid;
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;
			$post['patientname'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']) . "<br>" . htmlspecialchars($parr['street1']) . "<br>" . htmlspecialchars($parr['zip']) . "<br>" . htmlspecialchars($parr['city']);
			$post['patientaddress'] = htmlspecialchars($parr['street1']) . "<br>" . htmlspecialchars($parr['zip']) . " " . htmlspecialchars($parr['city']);
			$post['pataddress'] = htmlspecialchars($parr['street1']) . ", " . htmlspecialchars($parr['zip']) . " " . htmlspecialchars($parr['city']);
			$post['patname'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']);
			$post['patient_name'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']);
			$post['patient_fname_lname'] = htmlspecialchars($parr['first_name']) . " " . htmlspecialchars($parr['last_name']);
			$post['patbirth'] = $parr['birthd'];
			$post['epid'] = $epid;

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			if($parr['sex'] == 1)
			{
			    $this->view->gender = $this->view->translate("male");
			}
			elseif($parr['sex'] == 2)
			{
			    $this->view->gender = $this->view->translate("female");
			}
			elseif($patientarr['sex'] != null && $patientarr['sex'] == 0)
			{
			    $this->view->gender = $this->view->translate("divers");  //ISPC-2442 @Lore   30.09.2019
			}
			else     
			{
			    $this->view->gender = $this->view->translate("gender_not_documented");
			}

			$dian = new Application_Form_Diagnosis();
			$sortarr = $dian->getHDdiagnosis($parr['ipid']);
			foreach($sortarr as $key => $diagnosis)
			{
				$maind .= ' ' . $diagnosis['description'] . ',';
			}

			$post['maindiagnosis'] = substr($maind, 0, -1);

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);

			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

			$symp = new Symptomatology();
			$symptomarr = $symp->getPatientSymptpomatologyLast($ipid);

			if(empty($symptomarr))
			{
				$sympval = new SymptomatologyValues();
				$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set
				foreach($set_details as $key => $sym)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
				}
			}
			else
			{
				foreach($symptomarr as $key => $sym)
				{
					$symptomarr[$key]['sym_desc_array'] = $sym['sym_description'];
					$symptomarr[$key]['sym_description'] = utf8_encode($sym['sym_description']['value']);
				}
			}

			$post['symptomarr'] = $symptomarr;

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['clientname'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];
			$post['city'] = $clientdata[0]['city'];

			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			$post['dk'] = $pat_moreinfo[0]['dk'];
			$post['peg'] = $pat_moreinfo[0]['peg'];
			$post['port'] = $pat_moreinfo[0]['port'];
			$post['pumps'] = $pat_moreinfo[0]['pumps'];

// 			$post['sapsymp'] = Sapsymptom::get_patient_sapvsymptom(Pms_CommonData::getIpid($decid));
			$post['sapsymp'] = Sapsymptom::get_patient_sapvsymptom($ipid);
			
			
// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $parr;
			$post['bdate'] = $patientinfo['birthd'];

			if($patientinfo['isdischarged'] != 1)
			{
				$sav = new SapvVerordnung();
				$post['savarry'] = $sav->getSapvVerordnungData($patientinfo['ipid']);
			}

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$post['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$post['insurance_status'] = $healthinsu_array[0]['insurance_status'];

			$hquery = Doctrine_Query::create()
				->select('*')
				->from('HealthInsurance')
// 				->where("id='" . $healthinsu_array[0]['companyid'] . "' or name='" . $healthinsu_array[0]['company_name'] . "'");
				->where("id= ? or name=?", array($healthinsu_array[0]['companyid'],$healthinsu_array[0]['company_name']));
			$harray = $hquery->fetchArray();
			$post['kvnumber'] = $harray[0]['kvnumber'];

			/* analage3 */
// 			$patientmaster = new PatientMaster();
// 			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

// 			$tm = new TabMenus();
// 			$this->view->tabmenus = $tm->getMenuTabs();

			$imgtag = Doctrine::getTable('SapfiveImagetags')->findBy('ipid', $ipid);
			$post['tagarray'] = $imgtag->toArray();
			$post['tablepatientinfo'] = Pms_Template::createTemplate($parr, 'templates/pdfprofile.html');
			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");
//		sapv questionnaire
//
//		get main diagnosis types
			$abb = "'HD','ND'";
			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($clientid, $abb);

			foreach($darr as $k_dt => $v_dt)
			{
				$dtypearray[$v_dt['abbrevation']] = $v_dt['id'];
			}

			foreach($post['dtype'] as $k_dtype => $v_dtype)
			{
				if(in_array($v_dtype, $dtypearray))
				{
					if(!empty($post['diagnosis'][$k_dtype]))
					{
						$current_diagnosis_type = array_search($v_dtype, $dtypearray);
						$diagnosis_arr[$current_diagnosis_type][] = trim(rtrim($post['icdnumber'][$k_dtype] . ' ' . $post['diagnosis'][$k_dtype]));
					}
				}
			}

			$metas = array('');
			foreach($post['meta_title'] as $k_meta => $v_meta)
			{
				$metas = array_merge($metas, $v_meta);
			}

//		get all metastases
			$dm = new DiagnosisMeta();
			$diagnosismeta = $dm->getDiagnosisMetaData(1);

			foreach($metas as $k_metas => $v_metas)
			{
				if(!empty($v_metas))
				{
					$metastases[] = trim(rtrim($diagnosismeta[$v_metas]));
				}
			}

			$post['main_diagnosis'] = implode(', ', $diagnosis_arr['HD']);
			$post['metastases'] = implode(', ', $metastases);
			$post['side_diagnosis'] = implode(', ', $diagnosis_arr['ND']);
//		sapv questionnaire

			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);

			if($chk == 1)
			{
				$tmpstmp = uniqid(time());
				mkdir("uploads/" . $tmpstmp);
				$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
			}

			if($chk == 2)
			{
				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				exit;
			}

			if($chk == 3)
			{

				if($pdfname == "ContactForm")
				{
					$form_types = new FormTypes();
					$curent_form_type = $form_types->get_form_type($post['contact_form_type_id']);
				}

				$navnames = array("SAPVf_anfrage" => 'SAPVF Anfrage',
					"Uberleitungsbogen" => 'Überleitungsbogen',
					"Verordnung" => ' Verordnung (Anlage 63)',
					"Palliativ_versorgung_a7" => 'Palliativ Versorgung a7',
					"folgeverordnung" => 'folgeverordnung',
					"Form_one" => 'SAPV-Einzelfallevaluation',
					"Form_two" => 'Statistische Angaben',
					"Anlage_4(Teil 1)" => 'Basisdokumentation (Anlage 4)',
					"formthree" => 'Bescheinigung Arzt-Palliativversorgung',
					"Stammblatt" => 'Stammblatt',
					"hopeform" => 'Basisbogen',
					"formfour" => 'SAPV-Einzelfallevaluation',
					"formfive" => 'Abschlussdokumentation',
					"SAPVF_B3" => 'Leistungserfassung',
					"SAPVF_B4" => 'Überleitung',
					"SAPVF_B5" => 'Wunddokumentation',
					"SAPVF_B12" => 'Mängeldokumentation',
					"SAPVF_B8" => 'Leistungsnachweis',
					"form1_wurzburg" => 'Einverständniserklärung',
					"leverkusen_doctor" => 'Besuchsformular Arzt',
					"KVNO_doctor" => 'KVNO doctor form',
					"Bayern_visit" => 'Besuchsformular Bayern',
					"SAKVNO_doctor" => 'Besuchsformular Arzt',
					"Aufnahmeassessment" => 'Aufnahmeassessment',
					"WL_doctor_visit" => 'Besuchsformular Arzt',
					"VisitKoordination" => 'Besuchsformular Koordination',
					"KVNO_nurse" => 'KVNO nurse form',
					"leverkusen_nurse" => 'Besuchsformular Pflege',
					"SAKVNO_nurse" => 'Besuchsformular Pflege',
					"WL_nurse_visit" => 'Besuchsformular Pflege',
					"KVNO_anlage7" => 'KVNO anlage7 form',
					"DGP_anlage7" => 'DGP-Kerndatensatz',
					"MdkSchne" => 'MDK Schnellbegutachtungsbogen',
					"Stammblattsapv" => 'Stammblatt',
					"Stammblatt3" => 'Stammblatt III',
					"Stammblat4" => 'Stammblatt IV',
					"Stammblatt5" => 'Stammblatt V',
					"PatientStammblattsapv" => 'PATIENTENSTAMMBLATT',
					"Ruhen" => 'Feststellung des Ruhens der Teilnahme',
					"Teilnahmeerklarung" => 'Teilnahmeerklärung ',
					"Feststellung" => 'Feststellung des Nichtvorliegens der Teilnahmevorraussetzung',
					"Genehmigungs" => 'Genehmigungsformular',
					"Notfallplan" => 'Notfallplan',
					"Stickers" => 'Aufkleber Avery L4742REV',
					"Stickers70x36" => 'Aufkleber Avery 3490',
					"Behandlungsvertrag" => 'Behandlungsvertrag',
					"Form_oneRedo" => "SAPV Einzelfallevaluation",
					"sapvquestionnaire" => $this->view->translate('sapvquestionnaire'),
					"ContactForm" => "Kontaktformular - " . $curent_form_type[0]['name'],
					"ContactFormSave" => "Kontaktformular",
					"DischargePlanning" => "Entlassungsplanung",
					"hospizquestionnaire" => "Hospizbedarfsbogen",
				    "hospizquestionnairenord" => "Hospizbedarfsbogen Nord",        //ISPC-2647 Lore 05.08.2020
					"consent" => "Einverständniserklärung",
					"anlage5" => "Anlage 5 (Teil 1)",
					"Anlage7plan" => "Anlage 7",
					"ZAPV_Assessment" => "Assessment - Aufnahme",
					"ZAPV_Beratung_Assessment" => "Assessment - Beratung",
					"ZAPV_Ende_Assessment" => "Assessment - Ende",
					"entrance_assessment" => "Eingangsassessment ",
					"kinder_entrance_assessment" => "Eingangsassessment KINDER",
					"Palliativ-Notfallbogen" => "Palliativ-Notfallbogen ",
					"NotfallplanMedis" => "Notfallplan BAYERN",
					"rpassessment" => "RP-Assessment",
					"therapyplan" => "Therapieplan",
					"questionnaireb" => "Erhebungsbogen B",
					"questionnairec" => "Erhebungsbogen C",
					"shsapvquestionnaire" => $this->view->translate('shsapvquestionnaire'),
				);

				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);

				if($pdfname == 'Palliativ-Notfallbogen')
				{
					$pdf = new Pms_PDF('L', 'mm', 'A4', true, 'UTF-8', false);
				}

				//defaults with header
				$pdf->setDefaults(true);
				$pdf->setImageScale(1.6);
				//reset margins
				$pdf->SetMargins(10, 5, 10);
				$pdf->setPrintFooter(false);


				if($pdfname == 'Form_oneRedo')
				{
					$pdf->setDefaults(true, 'P', '10');
					$pdf->setImageScale(1.6);

					//reset margins
					$pdf->SetMargins(10, 5, 10);
					$pdf->setPrintFooter(false);
				}

				if($pdfname == 'Stammblattsapv' || $pdfname == 'Stammblatt5')
				{
					$pdf->setDefaults(false, 'P', '10');
					$pdf->setImageScale(1.6);
					//reset margins
					$pdf->SetMargins(10, 5, 10);
					$pdf->setPrintFooter(false);
				}

				if($pdfname == 'Stickers')
				{
					//reset margins
					$pdf->SetMargins(10, 3, 10);
					$pdf->SetAutoPageBreak(true, 0.3);
				}

				if($pdfname == 'Stickers70x36')
				{
//				reset margins (left,top,right)
// 				$pdf->SetMargins(2, 3, 2);
					$pdf->SetMargins(2, 6, 2);
// 					$pdf->SetFont('arial', '', 7);
					$pdf->SetFont('dejavusans', '', 7);
// 				$pdf->SetFontSize(7);
					$pdf->SetAutoPageBreak(false, 3);
				}

				if($pdfname == 'Palliativ-Notfallbogen')
				{
// 				$pdf->SetFont('arial', '', 12);
					$pdf->SetFontSize(12);
				}

				if($pdfname == 'entrance_assessment' || $pdfname == 'entrance_assessment_save')
				{
//				reset margins
					$pdf->SetMargins(10, 20, 10);
					$pdf->SetFont('dejavusans', '', 10); //ISPC-2313
// 				$pdf->SetFontSize(10);
				}
				
				if($pdfname == 'kinder_entrance_assessment' || $pdfname == 'kinder_entrance_assessment_save')
				{
//				reset margins
					$pdf->SetMargins(10, 20, 10);
					$pdf->SetFont('dejavusans', '', 9);
// 				$pdf->SetFontSize(10);
				}

				if($pdfname == 'therapyplan' || $pdfname == 'questionnaireb' || $pdfname == 'questionnairec')
				{
					$pdf->SetMargins(10, 20, 10);
					$pdf->SetFont('', '', 11);
				}

				if($pdfname == 'consent')
				{
//				defaults with header
					$pdf->setDefaults(true, 'P', $bottom_margin);
					$pdf->SetMargins(20, 95, 15);
					$pdf->SetFont('dejavusans', '', 10);
// 				$pdf->SetFontSize(11);
					$header_text = htmlspecialchars($post['patient_details']['lastname']) . ', ' . htmlspecialchars($post['patient_details']['firstname']) . '<br />' . nl2br(htmlspecialchars($post['patient_details']['address']));
				}

				if($pdfname == 'ZAPV_Assessment' || $pdfname == 'ZAPV_Beratung_Assessment' || $pdfname == 'ZAPV_Ende_Assessment')
				{
//				reset margins
					$pdf->SetMargins(10, 20, 10);
					$pdf->SetFont('dejavusans', '', 9);
// 				$pdf->SetFontSize(9);
				}
				if($pdfname == 'shsapvquestionnaire')
				{
					$pdf->SetFont('helvetica', '', 11);
					$pdf->SetLeftMargin(20);
				}
				if($pdfname == 'questionnaireb' || $pdfname == 'questionnairec')
				{
					$pdf->setPrintFooter(true);
				}
				switch($pdfname)
				{

					case 'form1_wurzburg':
						$background_type = '11';
						break;
					case 'Notfallplan':
						$background_type = '13';
						break;
					case 'Behandlungsvertrag':
						$background_type = '18';
						break;
					case 'consent':
						$background_type = '23';
						break;
					case 'DischargePlanning':
						$background_type = '26';
						break;
					case 'entrance_assessment':
						$background_type = '28';
						break;
						
					case 'kinder_entrance_assessment':
						$background_type = '65';
						break;
						
					case 'Stickers70x36':
// 					$background_type = '39';
						break;
					case 'ZAPV_Assessment':
						$background_type = '43';
						break;
					case 'ZAPV_Beratung_Assessment':
						$background_type = '44';
						break;
					case 'ZAPV_Ende_Assessment':
						$background_type = '45';
						break;
					case 'rpassessment':
						$background_type = '47';
						break;
					case 'questionnaireb':
						$background_type = '50';
						break;
					case 'questionnairec':
						$background_type = '51';
						break;
					default:
						$background_type = false;
						break;
				}

				$pdf->HeaderText = false;

				if($pdfname == 'consent')
				{
					$pdf->AssessmentHeaderText = $header_text;
//					$pdf->setHeaderFont(Array('dejavusans', '', 10));
				}

				if($pdfname == 'rpassessment')
				{
					$pdf->setDefaults(true, 'P', $bottom_margin);
					$pdf->setPrintFooter(true);
					$pdf->SetMargins(20, 25, 15);
					$pdf->AssessmentHeaderText = strip_tags($post['rpassessment_header_text'], '<br>');
					$patient_name = $post['patient_fname_lname'];
					$patient_birth = $post['patbirth'];
					$pdf->footer_text = '<table style="font-size:9pt;"><tr><td  style="text-align:left;">' . $patient_name . ' '.$patient_birth.'</td><td style="text-align:right;">' . $pdf->getAliasNumPage() . '</td></tr></table>';
				}
				//ISPC-2647 Carmen 28.07.2020
				elseif($pdfname == 'hospizquestionnairenord')           //ISPC-2647 Lore 05.08.2020
				{
					$pdf->SetMargins(10, 25, 10); //reset margins
					$pdf->SetHeaderMargin(5);
					$pdf->SetFont('helvetica', '', 10);
					$header_text ='<table border="0" cellspacing="0" cellpadding="0" style="padding:0px">';
					$header_text .='<tr><td width="800" align="left"><img src="'.PUBLIC_PATH.'/images/forms_images/mdk/header.jpg" height="100"/></td></tr></table><br/>';
					$pdf->HeaderText = $header_text;
				}
				//--
				
				if($background_type != false)
				{
					$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], $background_type);
					if($bg_image !== false)
					{
						$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
						if(is_file($bg_image_path))
						{
							$pdf->setBackgroundImage($bg_image_path);
						}
					}
				}

				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
				if($pdfname != 'anlage5' || $pdfname != 'Palliativ-Notfallbogen' || $pdfname != 'Stammblatt4' || $pdfname != 'therapyplan')
				{
					if($pdfname != 'entrance_assessment')
					{
						$html = preg_replace('/style=\"(.*)\"/iU', '', $html);
					}
					//$html = preg_replace('/style=\"(.*)\"/iU', '', $html);
				}

				$pdf->setHTML($html);
//			print_r($post);
// 			print_r($html);
// 			exit;

				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				$file_name_real = basename($tmpstmp);
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
				$_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
				
				/*
				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
				exec($cmd);
				$zipname = $file_name_real . ".zip";
				$filename = "uploads/" . $file_name_real . ".zip";

				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/

				$ftp_put_queue_result = Pms_CommonData::ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				
				
				if($pdfname == 'ContactForm' || $pdfname == 'ContactFormSave')
				{
					$record_id = $post['contact_form_id'];
					$form_tabname = 'contact_form';
				}
				elseif($pdfname == 'entrance_assessment')
				{
					$record_id = $post['entrance_assessment_id'];
					$form_tabname = 'entrance_assessment';
				}
				elseif($pdfname == 'kinder_entrance_assessment')
				{
					$record_id = $post['entrance_assessment_id'];
					$form_tabname = 'kinder_entrance_assessment';
				}
				elseif($pdfname == 'therapyplan')
				{
					$record_id = $post['fid'];
					$form_tabname = 'therapyplan';
				}
//				elseif($pdfname == 'questionnaireb')
//				{
//					$record_id = $post['fid'];
//					$form_tabname = 'questionnaireb';
//				}
//				elseif($pdfname == 'questionnairec')
//				{
//					$record_id = $post['fid'];
//					$form_tabname = 'questionnairec';
//				}
				elseif($pdfname == 'ZAPV_Assessment')
				{
					$record_id = $post['form_id'];
					$form_tabname = 'zapv_assessment_admission';
				}
				elseif($pdfname == 'ZAPV_Beratung_Assessment')
				{
					$record_id = $post['form_id'];
					$form_tabname = 'zapv_assessment_consulting';
				}
				elseif($pdfname == 'ZAPV_Ende_Assessment')
				{
					$record_id = $post['form_id'];
					$form_tabname = 'zapv_assessment_end';
				}
				else
				{
					$record_id = '';
					$form_tabname = '';
				}

				/*
				$cust = new PatientFileUpload ();
				$recordid = $cust -> set_new_record(array(
						"title" => $navnames [$pdfname],
						"ipid" => $ipid,
						"file_name" => $_SESSION ['filename'],
						"file_type" => 'PDF',
						"recordid" => $record_id,
						"tabname" => $form_tabname,
						"system_generated" => "1",
				));
				*/
				
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($navnames [$pdfname]));
				$cust->ipid = $ipid;
//			$post['fileinfo']['filename']['name'];
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']);
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_id;
				$cust->tabname = $form_tabname;
				$cust->system_generated = "1";
				$cust->save();
				$recordid = $cust->id;

				if($pdfname == "PatientStammblattsapv" || $pdfname == "Stammblattsapv" || $pdfname == "Stammblatt3" || $pdfname == "Stammblat4" || $pdfname == "Stammblatt5")
				{
					//insert system file tags
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('8'));
				}

				if($pdfname == "MdkSchne")
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("MdkSchne");
					$cust->user_id = $userid;
					$cust->save();
				}
				else if($pdfname == "Stammblattsapv")
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("Stammblattsapv");
					$cust->user_id = $userid;
					$cust->save();
				}
				else if($pdfname == "Stammblatt5")
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("Stammblatt5");
					$cust->user_id = $userid;
					$cust->save();
				}
				else if($pdfname == "Stammblatt4")
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("Stammblatt4");
					$cust->user_id = $userid;
					$cust->save();
				}
				else if($pdfname == "PatientStammblattsapv")
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("PatientStammblattsapv");
					$cust->user_id = $userid;
					$cust->save();
				}
				else if($pdfname == "Stickers")
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Rezept ' . $navnames [$pdfname] . ' wurde erstellt'));
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				else if($pdfname == "Stickers70x36")
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Rezept ' . $navnames [$pdfname] . ' wurde erstellt'));
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				else if($pdfname == "form1_wurzburg")
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular Einverständniserklärung wurde erstellt'));
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				else if($pdfname == "questionnaireb" || $pdfname == "questionnairec")
				{
//					$cust = new PatientCourse();
//					$cust->ipid = $ipid;
//					$cust->course_date = date("Y-m-d H:i:s", time());
//					$cust->course_type = Pms_CommonData::aesEncrypt("K");
//					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular '.$navnames [$pdfname].' wurde erstellt'));
//					$cust->user_id = $logininfo->userid;
//					$cust->tabname = $pdfname;
//					$cust->recordid = $recordid;
//					$cust->save();
				}
				else
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames [$pdfname] . ' wurde erstellt'));
					$cust->user_id = $logininfo->userid;
					
					//ispc-2071
					if ($form_tabname == 'contact_form' && $record_id > 0 ) {
					    $cust->tabname = Pms_CommonData::aesEncrypt("contact_form_nosave_pdf_print");
					    $cust->done_name = Pms_CommonData::aesEncrypt("contact_form");
					    $cust->done_id = $record_id;
					    $cust->recordid = $recordid;
					    
					}
					
					$cust->save();
				}
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', "d");
				exit;
			}

			// (&others) make pdf before save  and add it to files when saving
			//dont return the pdf file to user
			if($chk == 4)
			{

				if($pdfname == "ContactFormSave")
				{
					$form_types = new FormTypes();
					$curent_form_type = $form_types->get_form_type($post['contact_form_type_id']);
					$record_form_id = $post['contact_form_id'];
					$form_tabname = 'contact_form';
				}
				else if($pdfname == "MdkSchneInstance")
				{
					$record_form_id = $post['mkd_id'];
					$form_tabname = 'mdk_schne_form';
				}
				else if($pdfname == "entrance_assessment_save")
				{
					$record_form_id = $post['entrance_assessment_id'];
					$form_tabname = 'entrance_assesment_new';
				}
				else if($pdfname == "kinder_entrance_assessment_save")
				{
					$record_form_id = $post['entrance_assessment_id'];
					$form_tabname = 'kinder_entrance_assesment_new';
				}
				else if($pdfname == "therapyplan")
				{
					$record_form_id = $post['fid'];
					$form_tabname = 'therapyplan';
				}
				else if($pdfname == "questionnaireb")
				{
					$record_form_id = $post['fid'];
					$form_tabname = 'questionnaireb';
				}
				else if($pdfname == "questionnairec")
				{
					$record_form_id = $post['fid'];
					$form_tabname = 'questionnairec';
				}
				else if($pdfname == "notfallplan_medis_save")
				{
					$form_tabname = 'notfallplan_medis_new';
				}
				elseif($pdfname == 'ZAPV_Assessment_save')
				{
					$record_form_id = $post['form_id'];
					$form_tabname = 'save_zapv_assessment_admission';
				}
				elseif($pdfname == 'ZAPV_Beratung_Assessment_save')
				{
					$record_form_id = $post['form_id'];
					$form_tabname = 'save_zapv_assessment_consulting';
				}
				elseif($pdfname == 'ZAPV_Ende_Assessment_save')
				{
					$record_form_id = $post['form_id'];
					$form_tabname = 'save_zapv_assessment_end';
				}
				elseif($pdfname == 'rpassessment')
				{
					$record_form_id = $post['fid'];
					$form_tabname = 'rpassessment';
				}
				$navnames = array(
					"ContactFormSave" => "Kontaktformular - " . $curent_form_type[0]['name'],
					"MdkSchneInstance" => "MDK Schnellbegutachtung " . date('d-m-Y'),
					"entrance_assessment_save" => "Eingangsassessment Ver. " . $post['assessment_version'] . ": " . $post['assessment_version_complete'],
					"kinder_entrance_assessment_save" => "Eingangsassessment KINDER Ver. " . $post['assessment_version'] . ": " . $post['assessment_version_complete'],
					"therapyplan" => "Therapieplan",
					"questionnaireb" => "Erhebungsbogen B",
					"questionnairec" => "Erhebungsbogen C",
					"ZAPV_Assessment_save" => "Assessment - Aufnahme : " . $post['form_data']['done_date'],
					"ZAPV_Beratung_Assessment_save" => "Assessment - Beratung : " . $post['form_data']['done_date'],
					"ZAPV_Ende_Assessment_save" => "Assessment - Ende : " . $post['form_data']['done_date'],
					"notfallplan_medis_save" => "Notfallplan BAYERN " . date('d.m.Y'),
					"rpassessment" => "RP-Assessment",
				);

				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
				$pdf->setDefaults(true);
				$pdf->setImageScale(1.6);
				$pdf->SetMargins(10, 5, 10);
				$pdf->HeaderText = false;
				if($pdfname == 'entrance_assessment_save')
				{
					//reset margins
					$pdf->SetMargins(10, 20, 10);
					$pdf->SetFont('dejavusans', '', 10);//ISPC-2313
				}
				
				if($pdfname == 'kinder_entrance_assessment_save')
				{
					//reset margins
					$pdf->SetMargins(10, 20, 10);
					$pdf->SetFont('dejavusans', '', 9);
				}

				if($pdfname == 'therapyplan' || $pdfname == 'questionnaireb' || $pdfname == 'questionnairec')
				{
					//reset margins
					$pdf->SetMargins(10, 20, 10);
					$pdf->SetFont('', '', 10);
				}

				if($pdfname == 'rpassessment')
				{
					//reset margins
					$pdf->setDefaults(true, 'P', $bottom_margin);
					$pdf->SetMargins(20, 25, 15);
					$pdf->AssessmentHeaderText = strip_tags($post['rpassessment_header_text'], '<br>');
					$patient_name = $post['patient_fname_lname'];
					$patient_birth = $post['patbirth'];
					$pdf->footer_text = '<table style="font-size:9pt;"><tr><td  style="text-align:left;">' . $patient_name . ' '.$patient_birth.'</td><td style="text-align:right;">' . $pdf->getAliasNumPage() . '</td></tr></table>';
				}
				
				if($pdfname == 'questionnaireb' || $pdfname == 'questionnairec')
				{
					$pdf->setPrintFooter(true);
				}
				switch($pdfname)
				{

					case 'entrance_assessment_save':
						$background_type = '28';
						break;
					case 'kinder_entrance_assessment_save':
						$background_type = '65';
						break;
					case 'ZAPV_Assessment_save':
						$background_type = '43';
						break;
					case 'ZAPV_Beratung_Assessment_save':
						$background_type = '44';
						break;
					case 'ZAPV_Ende_Assessment_save':
						$background_type = '45';
						break;
					case 'rpassessment':
						$background_type = '47';
						break;
					case 'questionnaireb':
						$background_type = '50';
						break;
					case 'questionnairec':
						$background_type = '51';
						break;

					default:
						$background_type = false;
						break;
				}


				if($background_type != false)
				{
					$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], $background_type);
					if($bg_image !== false)
					{
						$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
						if(is_file($bg_image_path))
						{
							$pdf->setBackgroundImage($bg_image_path);
						}
					}
				}

				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
				if($pdfname != 'entrance_assessment_save')
				{
					$html = preg_replace('/style=\"(.*)\"/iU', '', $html);
				}

				$pdf->setHTML($html);
				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				$file_name_real = basename($tmpstmp);
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
				$_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
				
				/*
				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
				exec($cmd);
				$zipname = $file_name_real . ".zip";
				$filename = "uploads/" . $file_name_real . ".zip";

				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				
				$ftp_put_queue_result = Pms_CommonData::ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				
				
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($navnames [$pdfname]));
				$cust->ipid = $ipid;
//			$post['fileinfo']['filename']['name'];
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']);
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $form_tabname;
				$cust->system_generated = "1";
				$cust->save();
				$recordid = $cust->id;

				if($pdfname == "ContactFormSave")
				{
					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("contact_form_save");
					$cust->user_id = $userid;
					$cust->done_date = $post['done_date'];
					$cust->done_id = $record_form_id;
					$cust->save();
				}
				else if($pdfname == "entrance_assessment_save")
				{
					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("entrance_assesment_new");
					$cust->user_id = $userid;
					$cust->save();
				}
				else if($pdfname == "kinder_entrance_assessment_save")
				{
					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("kinder_entrance_assesment_new");
					$cust->user_id = $userid;
					$cust->save();
				}
				else if($pdfname == "therapyplan")
				{
					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("therapyplan");
					$cust->user_id = $userid;
					$cust->save();
				}
				else if($pdfname == "MdkSchneInstance")
				{
					$comment = 'MDK Schnellbegutachtung hinzugefügt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("MdkSchne_form");
					$cust->user_id = $userid;
					$cust->save();


					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("mdk_schne_instance");
					$cust->user_id = $userid;
					$cust->save();
				}
				elseif($pdfname == "ZAPV_Assessment_save")
				{
					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("save_zapv_assessment_admission");
					$cust->user_id = $userid;
					$cust->done_date = $post['done_date'];
					$cust->save();
				}
				elseif($pdfname == "ZAPV_Beratung_Assessment_save")
				{
					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("save_zapv_assessment_consulting");
					$cust->user_id = $userid;
					$cust->done_date = $post['done_date'];
					$cust->save();
				}
				elseif($pdfname == "ZAPV_Ende_Assessment_save")
				{
					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("save_zapv_assessment_end");
					$cust->user_id = $userid;
					$cust->done_date = $post['done_date'];
					$cust->save();
				}
				else if($pdfname == "rpassessment")
				{
					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("rp_assessment");
					$cust->user_id = $userid;
					$cust->save();
				}
				else if($pdfname == "questionnaireb" || $pdfname == "questionnairec")
				{
					$comment = 'Formular ' . $navnames [$pdfname] . ' wurde erstellt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
					$cust->user_id = $userid;
					$cust->save();
				}

				if($_REQUEST['pdf'] == '1')
				{
					ob_end_clean();
					ob_start();
					$pdf->toBrowser($pdfname . '.pdf', "d");
					exit;
				}
			}
		}

		public function stickersAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ------------------------------------------------ */
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->lanr = $uarray['LANR'];
				$lanr = $uarray['LANR'];
			}
// 			$patientmaster = new PatientMaster();
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();

			$this->view->patientfirstname = $parr['first_name'];
			$this->view->patientlastname = $parr['last_name'];
			$this->view->street = $parr['street1'];
			$this->view->street2 = $parr['street2'];
			$this->view->zip = $parr['zip'];
			$this->view->city = $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();

			$this->view->bdate = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();
				$this->view->getiuval = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
			}

			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_com_name = $healthinsu_array[0]['company_name'];
			$insurance_com_name = $healthinsu_array[0]['company_name'];

			if(empty($healthinsu_array[0]['institutskennzeichen']) || $healthinsu_array[0]['institutskennzeichen'] == 0)
			{
				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{

					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();
					$institutskennzeichen = $healtharray['iknumber'];
					$healthinsu_array[0]['institutskennzeichen'] = $institutskennzeichen;
				}
			}

			//due to some changes this kesse no is now the kasse number from patient stamdatem - 14-06-2012
			$this->view->kassen_no = $healthinsu_array[0]['kvk_no'];
			$kassen_no = $healthinsu_array[0]['kvk_no'];

			$this->view->insurance_ik_number = $healthinsu_array[0]['institutskennzeichen'];
			$insurance_ik_number = $healthinsu_array[0]['institutskennzeichen'];

			$st = new KbvKeytabs();
			$status_array = $st->getKbvKeytabs(1);

			$status_int_array = array("M" => "1", "F" => "3", "R" => "5");

			if($healthinsu_array[0]['insurance_status'] != "")
			{
				if(array_key_exists($healthinsu_array[0]['insurance_status'], $status_int_array))
				{
					$this->view->insurance_status = $status_int_array[$healthinsu_array[0]['insurance_status']];
					$insurance_status = $status_int_array[$healthinsu_array[0]['insurance_status']];
				}
				else
				{
					$this->view->insurance_status = "";
					$insurance_status = "";
				}
			}

			$datum = date('d.m.Y');
			$epid = Pms_CommonData::getEpidFromId($decid);
			$post = $_POST;
			$post['insurancecomname'] = $insurance_com_name;
			$post['geb'] = $insurance_ik_number;
			$post['patientfirstname'] = $parr['first_name'];
			$post['patientlastname'] = $parr['last_name'];
			$post['street'] = $parr['street1'];
			$post['street2'] = $parr['street2'];
			$post['zipcode'] = $parr['zip'];
			$post['patcity'] = $parr['city'];
			$post['telephone'] = $parr['phone'];
			$post['mobile'] = $parr['mobile'];
			$post['birthdate'] = $patientinfo['birthd'];
			$post['kassenno'] = $kassen_no;
			$post['insuranceno'] = $insurance_no;
			$post['status'] = $insurance_status;
			$post['betriebsstatten_nr'] = $betriebsstatten_nr;
			$post['lanr'] = $lanr;
			$post['datum'] = "";

			$this->generateformPdf(3, $post, 'Stickers', "receipt_stickers.html");
		}

//	public function receiptoldAction()
//	{
//
//		$logininfo= new Zend_Session_Namespace('Login_Info');
//		$decid = Pms_Uuid::decrypt($_GET['id']);
//		$ipid = Pms_CommonData::getIpid($decid);
//
//		/* ------------------------------------------------ */
//		$patientmaster = new PatientMaster();
//		$this->view->patientinfo = $patientmaster->getMasterData($decid,1);
//
//		$tm = new TabMenus();
//		$this->view->tabmenus = $tm->getMenuTabs();
//		/* ------------------------------------------------ */
//
//		$user = Doctrine::getTable('User')->find($logininfo->userid);
//		if($user)
//		{
//			$uarray = $user->toArray();
//			$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
//			$this->view->lanr = $uarray['LANR'];
//			//$isadmin = $uarray['isadmin'];
//		}
//
//		if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA' ){
//			$isadmin = '1';
//		}
//
//		if(strlen($_POST['btnsubmit'])>0)
//		{
//			unset($_SESSION['rcfolder'],$_SESSION['patientfirstname'],$_SESSION['insurance_ik_number'],$_SESSION['patientlastname'],$_SESSION['street'],$_SESSION['zipcode_city'],$_SESSION['insuranceno'],$_SESSION['birthdate'],$_SESSION['status'],$_SESSION['kassenno'],$_SESSION['insurancecomname'],$_SESSION['lanr'],$_SESSION['betriebsstatten_nr'],$_SESSION['med1'],$_SESSION['pckgr1'],$_SESSION['meinh1'],$_SESSION['anz1'],$_SESSION['med2'],$_SESSION['med3'],$_SESSION['med4'],$_SESSION['pckgr2'],$_SESSION['meinh2'],$_SESSION['anz2'],$_SESSION['med5'],$_SESSION['med6'],$_SESSION['med7'],$_SESSION['pckgr3'],$_SESSION['meinh3'],$_SESSION['anz3'],$_SESSION['med8'],$_SESSION['med9'],$_SESSION['userstamp1'],$_SESSION['userstamp2'],$_SESSION['userstamp3'],$_SESSION['userstamp4'],$_SESSION['userstamp5'],$_SESSION['userstamp6'],$_SESSION['userstamp7'],$_SESSION['bvg'],$_SESSION['mttel'],$_SESSION['soff'],$_SESSION['bedaf'],$_SESSION['pricht'],$_SESSION['getiuhrfrei']);
//
//			$_SESSION['filepass'] = $logininfo->filepass;
//			$_SESSION['rcfolder'] = time();
//
//			//			 $cust = new PatientFileUpload();
//			//			 $cust->title = Pms_CommonData::aesEncrypt('KV Rezept');
//			//			 $cust->ipid = $ipid;
//			//			 $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['rcfolder']."/Receipt.pdf"); //$post['fileinfo']['filename']['name'];
//			//			 $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
//			//			 $cust->save();
//
//			$_SESSION['patientfirstname'] = $_POST['patientfirstname'];
//			$_SESSION['patientlastname'] = $_POST['patientlastname'];
//			//$patient['first_name'] = "Florian";
//			$_SESSION['street'] = $_POST['street'];
//			$_SESSION['zipcode_city'] = $_POST['zipcode'].' '.$_POST['city'];
//			$_SESSION['patient_city'] = $_POST['city'];
//			$_SESSION['insuranceno'] = $_POST['insuranceno'];
//			$_SESSION['insurance_ik_number'] = $_POST['geb'];
//			$_SESSION['birthdate'] = $_POST['birthdate'];
//			$_SESSION['status'] = $_POST['status'];
//			$_SESSION['datum'] = $_POST['datum'];
//			//$_SESSION['street'] = "09/12";
//			$_SESSION['kassenno'] = $_POST['kassenno'];
//			$_SESSION['insurancecomname'] = $_POST['insurancecomname'];
//
//
//
//			$_SESSION['med1'] =	$_POST['med1'];
//			/*$_SESSION['pckgr1'] =	$_POST['pckgr1'];
//			 $_SESSION['meinh1'] =	$_POST['meinh1'];
//			 $_SESSION['anz1'] =	$_POST['anz1'];*/
//			$_SESSION['med2'] =	$_POST['med2'];
//			/*$_SESSION['med3'] =	$_POST['med3'];*/
//			$_SESSION['med4'] =	$_POST['med4'];
//			/*$_SESSION['pckgr2'] =	$_POST['pckgr2'];
//			 $_SESSION['meinh2'] =	$_POST['meinh2'];
//			 $_SESSION['anz2'] =	$_POST['anz2'];*/
//			$_SESSION['med5'] =	$_POST['med5'];
//			/*$_SESSION['med6'] =	$_POST['med6'];*/
//			$_SESSION['med7'] =	$_POST['med7'];
//			/*$_SESSION['pckgr3'] = $_POST['pckgr3'];
//			 $_SESSION['meinh3'] = $_POST['meinh3'];
//			 $_SESSION['anz3'] =	$_POST['anz3'];*/
//			$_SESSION['med8'] =	$_POST['med8'];
//			$_SESSION['med9'] =	$_POST['med9'];
//
//
//
//			if($_POST['stampusers'] > 0){
//				$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
//				if($userst)
//				{
//					$uarray = $userst->toArray();
//					$_SESSION['lanr'] =  $uarray['LANR'];
//					$_SESSION['betriebsstatten_nr'] =  $uarray['betriebsstattennummer'];
//				}
//
//				$ustamp = new UserStamp();
//				$userstatmp =  $ustamp->getLastUserStamp($_POST['stampusers']);
//
//				$_SESSION['userstamp1'] =	$userstatmp[0]['row1'];
//				$_SESSION['userstamp2'] =	$userstatmp[0]['row2'];
//				$_SESSION['userstamp3'] =	$userstatmp[0]['row3'];
//				$_SESSION['userstamp4'] =	$userstatmp[0]['row4'];
//				$_SESSION['userstamp5'] =	$userstatmp[0]['row5'];
//				$_SESSION['userstamp6'] =	$userstatmp[0]['row6'];
//				$_SESSION['userstamp7'] =	$userstatmp[0]['row7'];
//
//			} else{
//
//				$_SESSION['lanr'] = $_POST['lanr'];
//				$_SESSION['betriebsstatten_nr'] = $_POST['betriebsstatten_nr'];
//
//				$_SESSION['userstamp1'] =	$_POST['userstamp1'];
//				$_SESSION['userstamp2'] =	$_POST['userstamp2'];
//				$_SESSION['userstamp3'] =	$_POST['userstamp3'];
//				$_SESSION['userstamp4'] =	$_POST['userstamp4'];
//				$_SESSION['userstamp5'] =	$_POST['userstamp5'];
//				$_SESSION['userstamp6'] =	$_POST['userstamp6'];
//				$_SESSION['userstamp7'] =	$_POST['userstamp7'];
//
//			}
//
//
//			$_SESSION['bvg'] =	$_POST['bvg'];
//			$_SESSION['mttel'] =	$_POST['mttel'];
//			$_SESSION['soff'] =	$_POST['soff'];
//			$_SESSION['bedaf'] =	$_POST['bedaf'];
//			$_SESSION['pricht'] =	$_POST['pricht'];
//			$_SESSION['getiuhrfrei'] = $_POST['getiuhrfrei'];
//			$_SESSION['othertext'] = $_POST['othertext'];
//
//
//			$this->_redirect('pdfrezeptdruck/pdf.php');
//			//$this->generateReceiptpdf(2,$_POST,'Receipt',"receipt_form_pdf.html");
//			//			 $this->generateformPdf(3,$_POST,'Stikers',"receipt_stickers.html");
//		}
//		else if (strlen($_POST['stickers']) > 0) {
//
//			$_POST['patcity'] =  $_POST['city'];
//			$this->generateformPdf(3,$_POST,'Stickers',"receipt_stickers.html");
//
//		} else if (strlen($_POST['btnsavepdf']) > 0) {
//			unset($_SESSION['rcfolder'], $_SESSION['patientfirstname'], $_SESSION['insurance_ik_number'],$_SESSION['patientlastname'], $_SESSION['street'], $_SESSION['zipcode_city'], $_SESSION['insuranceno'], $_SESSION['birthdate'], $_SESSION['status'], $_SESSION['kassenno'], $_SESSION['insurancecomname'], $_SESSION['lanr'], $_SESSION['betriebsstatten_nr'], $_SESSION['med1'], $_SESSION['pckgr1'], $_SESSION['meinh1'], $_SESSION['anz1'], $_SESSION['med2'], $_SESSION['med3'], $_SESSION['med4'], $_SESSION['pckgr2'], $_SESSION['meinh2'], $_SESSION['anz2'], $_SESSION['med5'], $_SESSION['med6'], $_SESSION['med7'], $_SESSION['pckgr3'], $_SESSION['meinh3'], $_SESSION['anz3'], $_SESSION['med8'], $_SESSION['med9'], $_SESSION['userstamp1'], $_SESSION['userstamp2'], $_SESSION['userstamp3'], $_SESSION['userstamp4'], $_SESSION['userstamp5'], $_SESSION['userstamp6'], $_SESSION['userstamp7'], $_SESSION['bvg'], $_SESSION['mttel'], $_SESSION['soff'], $_SESSION['bedaf'], $_SESSION['pricht'], $_SESSION['getiuhrfrei']);
//
//			$_SESSION['filepass'] = $logininfo->filepass;
//			$_SESSION['rcfolder'] = time().rand(100,999);
//			$upfolder = $_SESSION['rcfolder']."/Receipt.pdf";
//
//			$cust = new PatientFileUpload();
//			$cust->title = Pms_CommonData::aesEncrypt('KV Rezept');
//			$cust->ipid = $ipid;
//			$cust->file_name = Pms_CommonData::aesEncrypt($upfolder); //$post['fileinfo']['filename']['name'];
//			$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
//			$cust->system_generated = "1";
//			$cust->save();
//			$recordid = $cust->id;
//
//			//insert comment in verlauf
//			$ctitle = "Rezept erstellt ";
//
//			$cust = new PatientCourse();
//			$cust->ipid = $ipid;
//			$cust->course_date = date("Y-m-d H:i:s", time());
//			$cust->course_type = Pms_CommonData::aesEncrypt("K");
//			$cust->user_id = $logininfo->userid;
//			$cust->recordid = $recordid;
//			$cust->tabname = Pms_CommonData::aesEncrypt("receiptupload");
//			$cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
//			$cust->save();
//
//
//
//			$_SESSION['idd'] = $_REQUEST['id'];
//			$_SESSION['patientfirstname'] = $_POST['patientfirstname'];
//			$_SESSION['patientlastname'] = $_POST['patientlastname'];
//			//$patient['first_name'] = "Florian";
//			$_SESSION['street'] = $_POST['street'];
//			$_SESSION['zipcode_city'] = $_POST['zipcode'] . ' ' . $_POST['city'];
//			$_SESSION['insuranceno'] = $_POST['insuranceno'];
//			$_SESSION['insurance_ik_number'] = $_POST['geb'];
//			$_SESSION['birthdate'] = $_POST['birthdate'];
//			$_SESSION['status'] = $_POST['status'];
//			$_SESSION['datum'] = $_POST['datum'];
//			//$_SESSION['street'] = "09/12";
//			$_SESSION['kassenno'] = $_POST['kassenno'];
//			$_SESSION['insurancecomname'] = $_POST['insurancecomname'];
//
//			$_SESSION['med1'] = $_POST['med1'];
//			/* $_SESSION['pckgr1'] =	$_POST['pckgr1'];
//			 $_SESSION['meinh1'] =	$_POST['meinh1'];
//			 $_SESSION['anz1'] =	$_POST['anz1']; */
//			$_SESSION['med2'] = $_POST['med2'];
//			/* $_SESSION['med3'] =	$_POST['med3']; */
//			$_SESSION['med4'] = $_POST['med4'];
//			/* $_SESSION['pckgr2'] =	$_POST['pckgr2'];
//			 $_SESSION['meinh2'] =	$_POST['meinh2'];
//			 $_SESSION['anz2'] =	$_POST['anz2']; */
//			$_SESSION['med5'] = $_POST['med5'];
//			/* $_SESSION['med6'] =	$_POST['med6']; */
//			$_SESSION['med7'] = $_POST['med7'];
//			/* $_SESSION['pckgr3'] = $_POST['pckgr3'];
//			 $_SESSION['meinh3'] = $_POST['meinh3'];
//			 $_SESSION['anz3'] =	$_POST['anz3']; */
//			$_SESSION['med8'] = $_POST['med8'];
//			$_SESSION['med9'] = $_POST['med9'];
//
//
//
//			if($_POST['stampusers'] > 0){
//				$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
//				if($userst)
//				{
//					$uarray = $userst->toArray();
//					$_SESSION['lanr'] =  $uarray['LANR'];
//					$_SESSION['betriebsstatten_nr'] =  $uarray['betriebsstattennummer'];
//				}
//
//				$ustamp = new UserStamp();
//				$userstatmp =  $ustamp->getLastUserStamp($_POST['stampusers']);
//
//				$_SESSION['userstamp1'] =	$userstatmp[0]['row1'];
//				$_SESSION['userstamp2'] =	$userstatmp[0]['row2'];
//				$_SESSION['userstamp3'] =	$userstatmp[0]['row3'];
//				$_SESSION['userstamp4'] =	$userstatmp[0]['row4'];
//				$_SESSION['userstamp5'] =	$userstatmp[0]['row5'];
//				$_SESSION['userstamp6'] =	$userstatmp[0]['row6'];
//				$_SESSION['userstamp7'] =	$userstatmp[0]['row7'];
//
//			} else{
//
//				$_SESSION['lanr'] = $_POST['lanr'];
//				$_SESSION['betriebsstatten_nr'] = $_POST['betriebsstatten_nr'];
//
//				$_SESSION['userstamp1'] =	$_POST['userstamp1'];
//				$_SESSION['userstamp2'] =	$_POST['userstamp2'];
//				$_SESSION['userstamp3'] =	$_POST['userstamp3'];
//				$_SESSION['userstamp4'] =	$_POST['userstamp4'];
//				$_SESSION['userstamp5'] =	$_POST['userstamp5'];
//				$_SESSION['userstamp6'] =	$_POST['userstamp6'];
//				$_SESSION['userstamp7'] =	$_POST['userstamp7'];
//
//			}
//
//			$_SESSION['bvg'] = $_POST['bvg'];
//			$_SESSION['mttel'] = $_POST['mttel'];
//			$_SESSION['soff'] = $_POST['soff'];
//			$_SESSION['bedaf'] = $_POST['bedaf'];
//			$_SESSION['pricht'] = $_POST['pricht'];
//			$_SESSION['getiuhrfrei'] = $_POST['getiuhrfrei'];
//			$_SESSION['othertext'] = $_POST['othertext'];
//			$_SESSION['redirurl'] =APP_BASE.'patientcourse/patientcourse?id='.$_REQUEST['id'];
//
//			$this->_redirect('pdfrezeptdruck/pdf.php?case=1');
//
//			//			$this->_redirect('patientcourse/patientcourse?id=' . $_GET['id']);
//		} else {
//
//		 $patientmaster = new PatientMaster();
//		 $parr = $patientmaster->getMasterData($decid,0);
//
//		 $this->view->patientfirstname = $parr['first_name'];
//		 $this->view->patientlastname = $parr['last_name'];
//		 $this->view->street = $parr['street1'];
//		 $this->view->street2 = $parr['street2'];
//		 $this->view->zip = $parr['zip'];
//		 $this->view->city = $parr['city'];
//		 $this->view->telephone = $parr['phone'];
//		 $this->view->mobile = $parr['mobile'];
//
//		 if($parr['sex']==1){$this->view->male = "checked='checked'";}
//		 if($parr['sex']==2){$this->view->female = "checked='checked'";}
//
//		 $ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
//		 $this->view->refarray = $ref['referred_name'];
//
//		 $patientmaster = new PatientMaster();
//		 $patientinfo = $patientmaster->getMasterData($decid,0);
//
//		 $this->view->bdate =$patientinfo['birthd'];
//
//		 $phelathinsurance = new PatientHealthInsurance();
//		 $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);
//
//		 if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0){
//		 	$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
//		 	$healtharray = $helathins->toArray();
//
//		 	$this->view->getiuval = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
//		 	//			$this->view->insurance_ik_number = $healtharray['iknumber'];
//		 }
//
//		 $this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
//		 $this->view->insurance_com_name = $healthinsu_array[0]['company_name'];
//		 //		 $this->view->kassen_no = $healthinsu_array[0]['kvk_no'];
//		 $this->view->insurance_ik_number = $healthinsu_array[0]['kvk_no'];
//
//
//
//		 if(empty($healthinsu_array[0]['institutskennzeichen']) || $healthinsu_array[0]['institutskennzeichen'] == 0 ){
//				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0){
//
//					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
//					$healtharray = $helathins->toArray();
//					$institutskennzeichen = $healtharray['iknumber'];
//					$healthinsu_array[0]['institutskennzeichen'] = $institutskennzeichen;
//
//				}
//
//			}
//
//		 $this->view->kassen_no = $healthinsu_array[0]['institutskennzeichen'];
//
//
//
//		 if($healthinsu_array[0]['rezeptgebuhrenbefreiung']==1)
//		 {
//		 	$this->view->bvg = 6;
//		 }
//
//
//		 $st = new KbvKeytabs();
//		 $status_array = $st->getKbvKeytabs(1);
//
//
//		 $status_int_array = array("M"=>"1","F"=>"3","R"=>"5");
//
//		 if($healthinsu_array[0]['insurance_status']!="") {
//		 	if(array_key_exists($healthinsu_array[0]['insurance_status'], $status_int_array)){
//		 		$this->view->insurance_status  = $status_int_array[$healthinsu_array[0]['insurance_status']];
//		 	} else {
//		 		//				$this->view->insurance_status  = $status_array[$healthinsu_array[0]['insurance_status']];
//		 		$this->view->insurance_status  = "";
//		 	}
//		 }
//		 $_SESSION['rcfolder'] = time();
//
//
//		 $users = new User();
//		 $userarray = $users->getUserByClientid($logininfo->clientid);
//		 $userarraylast[] = $this->view->translate('selectuser');
//		 foreach($userarray as $user){
//		 	$userarraylast[$user['id']] = trim($user['last_name'])." ".trim($user['first_name']);
//		 }
//		 $this->view->users = $userarraylast;
//		 //		var_dump($isadmin);
//		 if($isadmin == 1){
//		 	$showselect = 1;
//		 } else{
//		 	$showselect = 1; // show select to all
//		 }
//		 $this->view->showselect = $showselect;
//
//		 //		$ustamp = new UserStamp();
//		 //		$userstatmp =  $ustamp->getUserStamp($logininfo->userid);
//
//
//		 $ustamp = new UserStamp();
//		 $userstatmp =  $ustamp->getLastUserStamp($logininfo->userid);
//
//		 $this->view->userstamp1 = $userstatmp[0]['row1'];
//		 $this->view->userstamp2 = $userstatmp[0]['row2'];
//		 $this->view->userstamp3 = $userstatmp[0]['row3'];
//		 $this->view->userstamp4 = $userstatmp[0]['row4'];
//		 $this->view->userstamp5 = $userstatmp[0]['row5'];
//		 $this->view->userstamp6 = $userstatmp[0]['row6'];
//		 $this->view->userstamp7 = $userstatmp[0]['row7'];
//
//
//		 //		 $hquery = Doctrine_Query::create()
//		 //		 ->select("*")
//		 //		 ->from('HealthInsurance')
//		 //		 ->where("id='".$healthinsu_array[0]['companyid']."' or name='".$healthinsu_array[0]['company_name']."'");
//		 //		 $hquery->getSqlQuery();
//		 //		 $hexec = $hquery->execute();
//		 //		 $harray = $hexec->toArray();
//		 //		 $this->view->kassen_no = $harray[0]['kvnumber'];
//
//		 $epid = Pms_CommonData::getEpidFromId($decid);
//
//		}
//	}

		public function receiptAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->clientid = $logininfo->clientid;
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */
			$this->view->receipt_type = "kv";

			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;

			/* ------------------------------------------------------------------------------ */
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->lanr = $uarray['LANR'];
			}

			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
			
			$request = $this->getRequest();
    		if ($request->isPost()) {
    
    			if(strlen($_POST['post_status']) > 0 && $_POST['post_status'] == "print_receipt")
    			{
    				unset($_SESSION['rcfolder'], $_SESSION['patientfirstname'], $_SESSION['insurance_ik_number'], $_SESSION['patientlastname'], $_SESSION['street'], $_SESSION['zipcode_city'], $_SESSION['insuranceno'], $_SESSION['birthdate'], $_SESSION['status'], $_SESSION['kassenno'], $_SESSION['insurancecomname'], $_SESSION['lanr'], $_SESSION['betriebsstatten_nr'], $_SESSION['med1'], $_SESSION['pckgr1'], $_SESSION['meinh1'], $_SESSION['anz1'], $_SESSION['med2'], $_SESSION['med3'], $_SESSION['med4'], $_SESSION['pckgr2'], $_SESSION['meinh2'], $_SESSION['anz2'], $_SESSION['med5'], $_SESSION['med6'], $_SESSION['med7'], $_SESSION['pckgr3'], $_SESSION['meinh3'], $_SESSION['anz3'], $_SESSION['med8'], $_SESSION['med9'], $_SESSION['userstamp1'], $_SESSION['userstamp2'], $_SESSION['userstamp3'], $_SESSION['userstamp4'], $_SESSION['userstamp5'], $_SESSION['userstamp6'], $_SESSION['userstamp7'], $_SESSION['bvg'], $_SESSION['mttel'], $_SESSION['soff'], $_SESSION['bedaf'], $_SESSION['pricht'], $_SESSION['getiuhrfrei']);
    				$_SESSION['filepass'] = $logininfo->filepass;
    				$pdf = new Pms_PDF();
    				$_SESSION['rcfolder'] = $pdf->uniqfolder(PDF_PATH);
    
    				$_SESSION['receipt_type'] = $_POST['receipt_type'];
    				$_SESSION['patientfirstname'] = $_POST['patientfirstname'];
    				$_SESSION['patientlastname'] = $_POST['patientlastname'];
    				$_SESSION['street'] = $_POST['street'];
    				$_SESSION['zipcode_city'] = $_POST['zipcode'] . ' ' . $_POST['city'];
    				$_SESSION['patient_city'] = $_POST['city'];
    				$_SESSION['insuranceno'] = $_POST['insuranceno'];
    				$_SESSION['insurance_ik_number'] = "";
    				$_SESSION['birthdate'] = $_POST['birthdate'];
    				$_SESSION['status'] = $_POST['status'];
    				$_SESSION['datum'] = $_POST['datum'];
    				$_SESSION['kassenno'] = $_POST['kassenno'];
    				$_SESSION['insurancecomname'] = $_POST['insurancecomname'];
    				$_SESSION['med1'] = $_POST['med1'];
    				$_SESSION['med2'] = $_POST['med2'];
    				$_SESSION['med4'] = $_POST['med4'];
    				$_SESSION['med5'] = $_POST['med5'];
    				$_SESSION['med7'] = $_POST['med7'];
    				$_SESSION['med8'] = $_POST['med8'];
    				$_SESSION['med9'] = $_POST['med9'];
    
    				if($_POST['stampusers'] > 0)
    				{
    					if($multiplestamps_option === true)
    					{
    
    						$stamp_info = explode('-', $_POST['stampusers']);
    						$stamp_user = $stamp_info[0];
    						$stamp_id = $stamp_info[1];
    
    						$ustamp = new UserStamp();
    						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
    
    						$_SESSION['lanr'] = $userstatmp[0]['stamp_lanr'];
    						$_SESSION['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
    						$_SESSION['userstamp1'] = $userstatmp[0]['row1'];
    						$_SESSION['userstamp2'] = $userstatmp[0]['row2'];
    						$_SESSION['userstamp3'] = $userstatmp[0]['row3'];
    						$_SESSION['userstamp4'] = $userstatmp[0]['row4'];
    						$_SESSION['userstamp5'] = $userstatmp[0]['row5'];
    						$_SESSION['userstamp6'] = $userstatmp[0]['row6'];
    						$_SESSION['userstamp7'] = $userstatmp[0]['row7'];
    					}
    					else
    					{
    						$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
    						if($userst)
    						{
    							$uarray = $userst->toArray();
    							$_SESSION['lanr'] = $uarray['LANR'];
    							$_SESSION['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
    						}
    
    						$ustamp = new UserStamp();
    						$userstatmp = $ustamp->getLastUserStamp($_POST['stampusers']);
    
    						$_SESSION['userstamp1'] = $userstatmp[0]['row1'];
    						$_SESSION['userstamp2'] = $userstatmp[0]['row2'];
    						$_SESSION['userstamp3'] = $userstatmp[0]['row3'];
    						$_SESSION['userstamp4'] = $userstatmp[0]['row4'];
    						$_SESSION['userstamp5'] = $userstatmp[0]['row5'];
    						$_SESSION['userstamp6'] = $userstatmp[0]['row6'];
    						$_SESSION['userstamp7'] = $userstatmp[0]['row7'];
    					}
    				}
    				else
    				{
    
    					$_SESSION['lanr'] = $_POST['lanr'];
    					$_SESSION['betriebsstatten_nr'] = $_POST['betriebsstatten_nr'];
    
    					$_SESSION['userstamp1'] = $_POST['userstamp1'];
    					$_SESSION['userstamp2'] = $_POST['userstamp2'];
    					$_SESSION['userstamp3'] = $_POST['userstamp3'];
    					$_SESSION['userstamp4'] = $_POST['userstamp4'];
    					$_SESSION['userstamp5'] = $_POST['userstamp5'];
    					$_SESSION['userstamp6'] = $_POST['userstamp6'];
    					$_SESSION['userstamp7'] = $_POST['userstamp7'];
    				}
    
    				$_SESSION['bvg'] = $_POST['bvg'];
    				$_SESSION['mttel'] = $_POST['mttel'];
    				$_SESSION['soff'] = $_POST['soff'];
    				$_SESSION['bedaf'] = $_POST['bedaf'];
    				$_SESSION['pricht'] = $_POST['pricht'];
    				$_SESSION['getiuhrfrei'] = $_POST['getiuhrfrei'];
    				$_SESSION['othertext'] = $_POST['othertext'];
    
    				if($_REQUEST['show_post'] == "1"){
    				    echo "<pre/>";
        				print_r("post");
        				print_r($_POST);
        				print_r("session");
        				print_r($_SESSION);
        				exit;
    				}
    				
    				
    				$this->_redirect('pdfrezeptdruck/pdf.php?case=0');
    			}
    			else if(strlen($_POST['post_status']) > 0 && $_POST['post_status'] == "stickers")
    			{
    //			stickers
    				$_POST['patcity'] = $_POST['city'];
    				$this->generateformPdf(3, $_POST, 'Stickers', "receipt_stickers.html");
    			}
    			else if(strlen($_POST['post_status']) > 0 && $_POST['post_status'] == "save_receipt")
    			{
    //			print rezept and save file
    				unset($_SESSION['rcfolder'], $_SESSION['patientfirstname'], $_SESSION['insurance_ik_number'], $_SESSION['patientlastname'], $_SESSION['street'], $_SESSION['zipcode_city'], $_SESSION['insuranceno'], $_SESSION['birthdate'], $_SESSION['status'], $_SESSION['kassenno'], $_SESSION['insurancecomname'], $_SESSION['lanr'], $_SESSION['betriebsstatten_nr'], $_SESSION['med1'], $_SESSION['pckgr1'], $_SESSION['meinh1'], $_SESSION['anz1'], $_SESSION['med2'], $_SESSION['med3'], $_SESSION['med4'], $_SESSION['pckgr2'], $_SESSION['meinh2'], $_SESSION['anz2'], $_SESSION['med5'], $_SESSION['med6'], $_SESSION['med7'], $_SESSION['pckgr3'], $_SESSION['meinh3'], $_SESSION['anz3'], $_SESSION['med8'], $_SESSION['med9'], $_SESSION['userstamp1'], $_SESSION['userstamp2'], $_SESSION['userstamp3'], $_SESSION['userstamp4'], $_SESSION['userstamp5'], $_SESSION['userstamp6'], $_SESSION['userstamp7'], $_SESSION['bvg'], $_SESSION['mttel'], $_SESSION['soff'], $_SESSION['bedaf'], $_SESSION['pricht'], $_SESSION['getiuhrfrei']);
    
    				$_SESSION['filepass'] = $logininfo->filepass;
    				$pdf = new Pms_PDF();
    				$_SESSION['rcfolder'] = $pdf->uniqfolder(PDF_PATH);
    
    				$upfolder = $_SESSION['rcfolder'] . "/Receipt.pdf";
    
    				foreach($_POST as $field => $value)
    				{
    					if(($field == "med1" && strlen($value) > 0 ) || ($field == "med2" && strlen($value) > 0 ) || ($field == "med4" && strlen($value) > 0 ) || ($field == "med5" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med8" && strlen($value) > 0 ) || ($field == "med9" && strlen($value) > 0 ))
    					{
    						$medication_array[] = $value;
    					}
    				}
    
    				if(!empty($medication_array))
    				{
    					$medication = implode(", ", $medication_array);
    					$medication_str = " (" . $medication . ")";
    				}
    				else
    				{
    					$medication_str = "";
    				}
    
    				$title = "KV Rezept" . $medication_str;
    
    				$cust = new PatientFileUpload();
    				$cust->title = Pms_CommonData::aesEncrypt($title);
    				$cust->ipid = $ipid;
    				$cust->file_name = Pms_CommonData::aesEncrypt($upfolder); //$post['fileinfo']['filename']['name'];
    				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
    				$cust->system_generated = "1";
    				$cust->save();
    				$recordid = $cust->id;
    
    				//insert system file tags
    				$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('3'));
    
    				//insert comment in verlauf
    				$ctitle = "Rezept erstellt " . $medication_str;
    
    				$cust = new PatientCourse();
    				$cust->ipid = $ipid;
    				$cust->course_date = date("Y-m-d H:i:s", time());
    				$cust->course_type = Pms_CommonData::aesEncrypt("K");
    				$cust->user_id = $logininfo->userid;
    				$cust->recordid = $recordid;
    				$cust->tabname = Pms_CommonData::aesEncrypt("receiptupload");
    				$cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
    				$cust->save();
    
    				$_SESSION['idd'] = $_REQUEST['id'];
    				$_SESSION['receipt_type'] = $_POST['receipt_type'];
    				$_SESSION['patientfirstname'] = $_POST['patientfirstname'];
    				$_SESSION['patientlastname'] = $_POST['patientlastname'];
    				$_SESSION['street'] = $_POST['street'];
    				$_SESSION['zipcode_city'] = $_POST['zipcode'] . ' ' . $_POST['city'];
    				$_SESSION['insuranceno'] = $_POST['insuranceno'];
    				$_SESSION['insurance_ik_number'] = "";
    				$_SESSION['birthdate'] = $_POST['birthdate'];
    				$_SESSION['status'] = $_POST['status'];
    				$_SESSION['datum'] = $_POST['datum'];
    				$_SESSION['kassenno'] = $_POST['kassenno'];
    				$_SESSION['insurancecomname'] = $_POST['insurancecomname'];
    				$_SESSION['med1'] = $_POST['med1'];
    				$_SESSION['med2'] = $_POST['med2'];
    				$_SESSION['med4'] = $_POST['med4'];
    				$_SESSION['med5'] = $_POST['med5'];
    				$_SESSION['med7'] = $_POST['med7'];
    				$_SESSION['med8'] = $_POST['med8'];
    				$_SESSION['med9'] = $_POST['med9'];
    
    				if($_POST['stampusers'] > 0)
    				{
    					// If stamp user it is selected
    					if($multiplestamps_option === true)
    					{
    						$stamp_info = explode('-', $_POST['stampusers']);
    						$stamp_user = $stamp_info[0];
    						$stamp_id = $stamp_info[1];
    
    						$ustamp = new UserStamp();
    						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
    
    						$_SESSION['lanr'] = $userstatmp[0]['stamp_lanr'];
    						$_SESSION['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
    
    						$_SESSION['userstamp1'] = $userstatmp[0]['row1'];
    						$_SESSION['userstamp2'] = $userstatmp[0]['row2'];
    						$_SESSION['userstamp3'] = $userstatmp[0]['row3'];
    						$_SESSION['userstamp4'] = $userstatmp[0]['row4'];
    						$_SESSION['userstamp5'] = $userstatmp[0]['row5'];
    						$_SESSION['userstamp6'] = $userstatmp[0]['row6'];
    						$_SESSION['userstamp7'] = $userstatmp[0]['row7'];
    					}
    					else
    					{
    						$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
    
    						if($userst)
    						{
    							$uarray = $userst->toArray();
    							$_SESSION['lanr'] = $uarray['LANR'];
    							$_SESSION['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
    						}
    
    						$ustamp = new UserStamp();
    						$userstatmp = $ustamp->getLastUserStamp($_POST['stampusers']);
    
    						$_SESSION['userstamp1'] = $userstatmp[0]['row1'];
    						$_SESSION['userstamp2'] = $userstatmp[0]['row2'];
    						$_SESSION['userstamp3'] = $userstatmp[0]['row3'];
    						$_SESSION['userstamp4'] = $userstatmp[0]['row4'];
    						$_SESSION['userstamp5'] = $userstatmp[0]['row5'];
    						$_SESSION['userstamp6'] = $userstatmp[0]['row6'];
    						$_SESSION['userstamp7'] = $userstatmp[0]['row7'];
    					}
    				}
    				else
    				{
    					// if no stamp it is selected - prefill the logged user
    					$_SESSION['lanr'] = $_POST['lanr'];
    					$_SESSION['betriebsstatten_nr'] = $_POST['betriebsstatten_nr'];
    					$_SESSION['userstamp1'] = $_POST['userstamp1'];
    					$_SESSION['userstamp2'] = $_POST['userstamp2'];
    					$_SESSION['userstamp3'] = $_POST['userstamp3'];
    					$_SESSION['userstamp4'] = $_POST['userstamp4'];
    					$_SESSION['userstamp5'] = $_POST['userstamp5'];
    					$_SESSION['userstamp6'] = $_POST['userstamp6'];
    					$_SESSION['userstamp7'] = $_POST['userstamp7'];
    				}
    
    				$_SESSION['bvg'] = $_POST['bvg'];
    				$_SESSION['mttel'] = $_POST['mttel'];
    				$_SESSION['soff'] = $_POST['soff'];
    				$_SESSION['bedaf'] = $_POST['bedaf'];
    				$_SESSION['pricht'] = $_POST['pricht'];
    				$_SESSION['getiuhrfrei'] = $_POST['getiuhrfrei'];
    				$_SESSION['othertext'] = $_POST['othertext'];
    				$_SESSION['redirurl'] = APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id'];
    
    				$this->_redirect('pdfrezeptdruck/pdf.php?case=1');
    			}
    		}
			else
			{

// 				$patientmaster = new PatientMaster();
// 				$parr = $patientmaster->getMasterData($decid, 0);
				$parr = $patientmaster->get_patientMasterData();

				$this->view->patientfirstname = $parr['first_name'];
				$this->view->patientlastname = $parr['last_name'];
				$this->view->street = $parr['street1'];
				$this->view->street2 = $parr['street2'];
				$this->view->zip = $parr['zip'];
				$this->view->city = $parr['city'];
				$this->view->telephone = $parr['phone'];
				$this->view->mobile = $parr['mobile'];

				if($parr['sex'] == 1)
				{
					$this->view->male = "checked='checked'";
				}

				if($parr['sex'] == 2)
				{
					$this->view->female = "checked='checked'";
				}

				$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
				$this->view->refarray = $ref['referred_name'];

// 				$patientmaster = new PatientMaster();
// 				$patientinfo = $patientmaster->getMasterData($decid, 0);
				$patientinfo = $patientmaster->get_patientMasterData();

				//ISPC-2329 pct.i) Lore 26.08.2019
				if($patientinfo['birthd'] != '0000-00-00')
				{
				    $patientinfo['birthd'] = date('d.m.y', strtotime($patientinfo['birthd']));
				}
				
				$this->view->bdate = $patientinfo['birthd'];

				$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					$this->view->getiuval = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
				}

				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
				$this->view->insurance_com_name = $healthinsu_array[0]['company_name'];
				$this->view->insurance_ik_number = $healthinsu_array[0]['kvk_no'];

				if(empty($healthinsu_array[0]['institutskennzeichen']) || $healthinsu_array[0]['institutskennzeichen'] == 0)
				{
					if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
					{
						$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
						$healtharray = $helathins->toArray();
						$institutskennzeichen = $healtharray['iknumber'];
						$healthinsu_array[0]['institutskennzeichen'] = $institutskennzeichen;
					}
				}

				$this->view->kassen_no = $healthinsu_array[0]['kvk_no'];

				if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == 1)
				{
					$this->view->bvg = 6;
				}

				$st = new KbvKeytabs();
				$status_array = $st->getKbvKeytabs(1);

				$status_int_array = array("M" => "1", "F" => "3", "R" => "5");

				if($healthinsu_array[0]['insurance_status'] != "")
				{
					if(array_key_exists($healthinsu_array[0]['insurance_status'], $status_int_array))
					{
						$this->view->insurance_status = $status_int_array[$healthinsu_array[0]['insurance_status']];
					}
					else
					{
						$this->view->insurance_status = "";
					}
				}
				$pdf = new Pms_PDF();
				$_SESSION['rcfolder'] = $pdf->uniqfolder(PDF_PATH);

				$users = new User();
				$userarray = $users->getUserByClientid($logininfo->clientid);
				$userarraylast[] = $this->view->translate('selectuser');

				$userarraylast_ids = array();

				foreach($userarray as $user)
				{
					$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
					$userarraylast_ids[] = $user['id'];
				}
				$this->view->users = $userarraylast;

				$ustamp = new UserStamp();
				$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
				foreach($multipleuser_stamp as $ks => $uspamp)
				{
					$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
					$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
					$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
				}
				$this->view->users_mstamps = $users_mstamps;

				if($isadmin == 1)
				{
					$showselect = 1;
				}
				else
				{
					$showselect = 1; // show select to all
				}
				$this->view->showselect = $showselect;

				$userstatmp = $ustamp->getLastUserStamp($logininfo->userid);
				$this->view->userstamp1 = $userstatmp[0]['row1'];
				$this->view->userstamp2 = $userstatmp[0]['row2'];
				$this->view->userstamp3 = $userstatmp[0]['row3'];
				$this->view->userstamp4 = $userstatmp[0]['row4'];
				$this->view->userstamp5 = $userstatmp[0]['row5'];
				$this->view->userstamp6 = $userstatmp[0]['row6'];
				$this->view->userstamp7 = $userstatmp[0]['row7'];

				$epid = Pms_CommonData::getEpidFromId($decid);
			}
		}

		public function btmreceiptAction()
		{
			$this->view->receipt_type = "btm";
			$this->_helper->viewRenderer("receipt");
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;
			/* ------------------------------------------------ */
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->lanr = $uarray['LANR'];
			}

			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}

			if(strlen($_POST['post_status']) > 0 && $_POST['post_status'] == "print_receipt")
			{
				unset($_SESSION['rcfolder'], $_SESSION['patientfirstname'], $_SESSION['insurance_ik_number'], $_SESSION['patientlastname'], $_SESSION['street'], $_SESSION['zipcode_city'], $_SESSION['insuranceno'], $_SESSION['birthdate'], $_SESSION['status'], $_SESSION['kassenno'], $_SESSION['insurancecomname'], $_SESSION['lanr'], $_SESSION['betriebsstatten_nr'], $_SESSION['med1'], $_SESSION['pckgr1'], $_SESSION['meinh1'], $_SESSION['anz1'], $_SESSION['med2'], $_SESSION['med3'], $_SESSION['med4'], $_SESSION['pckgr2'], $_SESSION['meinh2'], $_SESSION['anz2'], $_SESSION['med5'], $_SESSION['med6'], $_SESSION['med7'], $_SESSION['pckgr3'], $_SESSION['meinh3'], $_SESSION['anz3'], $_SESSION['med8'], $_SESSION['med9'], $_SESSION['userstamp1'], $_SESSION['userstamp2'], $_SESSION['userstamp3'], $_SESSION['userstamp4'], $_SESSION['userstamp5'], $_SESSION['userstamp6'], $_SESSION['userstamp7'], $_SESSION['bvg'], $_SESSION['mttel'], $_SESSION['soff'], $_SESSION['bedaf'], $_SESSION['pricht'], $_SESSION['getiuhrfrei']);

				$_SESSION['filepass'] = $logininfo->filepass;
				$pdf = new Pms_PDF();
				$_SESSION['rcfolder'] = $pdf->uniqfolder(PDF_PATH) . '_btm';
				$_SESSION['receipt_type'] = $_POST['receipt_type'];
				$_SESSION['patientfirstname'] = $_POST['patientfirstname'];
				$_SESSION['patientlastname'] = $_POST['patientlastname'];
				$_SESSION['street'] = $_POST['street'];
				$_SESSION['zipcode_city'] = $_POST['zipcode'] . ' ' . $_POST['city'];
				$_SESSION['patient_city'] = $_POST['city'];
				$_SESSION['insuranceno'] = $_POST['insuranceno'];
				$_SESSION['insurance_ik_number'] = "";
				$_SESSION['birthdate'] = $_POST['birthdate'];
				$_SESSION['status'] = $_POST['status'];
				$_SESSION['datum'] = $_POST['datum'];
				$_SESSION['kassenno'] = $_POST['kassenno'];
				$_SESSION['insurancecomname'] = $_POST['insurancecomname'];
				$_SESSION['valid_till'] = $_POST['valid_till'];
				$_SESSION['med1'] = $_POST['med1'];
				$_SESSION['med2'] = $_POST['med2'];
				$_SESSION['med4'] = $_POST['med4'];
				$_SESSION['med5'] = $_POST['med5'];
				$_SESSION['med7'] = $_POST['med7'];
				$_SESSION['med8'] = $_POST['med8'];
				$_SESSION['med9'] = $_POST['med9'];

				if($_POST['stampusers'] > 0)
				{
					if($multiplestamps_option === true)
					{
						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);

						$_SESSION['lanr'] = $userstatmp[0]['stamp_lanr'];
						$_SESSION['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
						$_SESSION['userstamp1'] = $userstatmp[0]['row1'];
						$_SESSION['userstamp2'] = $userstatmp[0]['row2'];
						$_SESSION['userstamp3'] = $userstatmp[0]['row3'];
						$_SESSION['userstamp4'] = $userstatmp[0]['row4'];
						$_SESSION['userstamp5'] = $userstatmp[0]['row5'];
						$_SESSION['userstamp6'] = $userstatmp[0]['row6'];
						$_SESSION['userstamp7'] = $userstatmp[0]['row7'];
					}
					else
					{

						$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
						if($userst)
						{
							$uarray = $userst->toArray();
							$_SESSION['lanr'] = $uarray['LANR'];
							$_SESSION['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
						}

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getLastUserStamp($_POST['stampusers']);

						$_SESSION['userstamp1'] = $userstatmp[0]['row1'];
						$_SESSION['userstamp2'] = $userstatmp[0]['row2'];
						$_SESSION['userstamp3'] = $userstatmp[0]['row3'];
						$_SESSION['userstamp4'] = $userstatmp[0]['row4'];
						$_SESSION['userstamp5'] = $userstatmp[0]['row5'];
						$_SESSION['userstamp6'] = $userstatmp[0]['row6'];
						$_SESSION['userstamp7'] = $userstatmp[0]['row7'];
					}
				}
				else
				{

					$_SESSION['lanr'] = $_POST['lanr'];
					$_SESSION['betriebsstatten_nr'] = $_POST['betriebsstatten_nr'];
					$_SESSION['userstamp1'] = $_POST['userstamp1'];
					$_SESSION['userstamp2'] = $_POST['userstamp2'];
					$_SESSION['userstamp3'] = $_POST['userstamp3'];
					$_SESSION['userstamp4'] = $_POST['userstamp4'];
					$_SESSION['userstamp5'] = $_POST['userstamp5'];
					$_SESSION['userstamp6'] = $_POST['userstamp6'];
					$_SESSION['userstamp7'] = $_POST['userstamp7'];
				}

				$_SESSION['bvg'] = $_POST['bvg'];
				$_SESSION['mttel'] = $_POST['mttel'];
				$_SESSION['soff'] = $_POST['soff'];
				$_SESSION['bedaf'] = $_POST['bedaf'];
				$_SESSION['pricht'] = $_POST['pricht'];
				$_SESSION['getiuhrfrei'] = $_POST['getiuhrfrei'];
				$_SESSION['othertext'] = $_POST['othertext'];

				$this->_redirect('pdfrezeptdruck/pdf.php?case=0');
			}
			else if(strlen($_POST['post_status']) > 0 && $_POST['post_status'] == "save_receipt")
			{
				unset($_SESSION['rcfolder'], $_SESSION['patientfirstname'], $_SESSION['insurance_ik_number'], $_SESSION['patientlastname'], $_SESSION['street'], $_SESSION['zipcode_city'], $_SESSION['insuranceno'], $_SESSION['birthdate'], $_SESSION['status'], $_SESSION['kassenno'], $_SESSION['insurancecomname'], $_SESSION['lanr'], $_SESSION['betriebsstatten_nr'], $_SESSION['med1'], $_SESSION['pckgr1'], $_SESSION['meinh1'], $_SESSION['anz1'], $_SESSION['med2'], $_SESSION['med3'], $_SESSION['med4'], $_SESSION['pckgr2'], $_SESSION['meinh2'], $_SESSION['anz2'], $_SESSION['med5'], $_SESSION['med6'], $_SESSION['med7'], $_SESSION['pckgr3'], $_SESSION['meinh3'], $_SESSION['anz3'], $_SESSION['med8'], $_SESSION['med9'], $_SESSION['userstamp1'], $_SESSION['userstamp2'], $_SESSION['userstamp3'], $_SESSION['userstamp4'], $_SESSION['userstamp5'], $_SESSION['userstamp6'], $_SESSION['userstamp7'], $_SESSION['bvg'], $_SESSION['mttel'], $_SESSION['soff'], $_SESSION['bedaf'], $_SESSION['pricht'], $_SESSION['getiuhrfrei']);
				$_SESSION['filepass'] = $logininfo->filepass;
//				$_SESSION['rcfolder'] = time() . rand(100, 999);
				$pdf = new Pms_PDF();
				$_SESSION['rcfolder'] = $pdf->uniqfolder(PDF_PATH);
				$upfolder = $_SESSION['rcfolder'] . "/BTM_Receipt.pdf";

				foreach($_POST as $field => $value)
				{
					if(($field == "med1" && strlen($value) > 0 ) || ($field == "med2" && strlen($value) > 0 ) || ($field == "med4" && strlen($value) > 0 ) || ($field == "med5" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med8" && strlen($value) > 0 ) || ($field == "med9" && strlen($value) > 0 ))
					{
						$medication_array[] = $value;
					}
				}

				if(!empty($medication_array))
				{
					$medication = implode(", ", $medication_array);
					$medication_str = " (" . $medication . ")";
				}
				else
				{
					$medication_str = "";
				}

				$file_title = "BTM Rezept" . $medication_str;
				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt($file_title);
				$cust->ipid = $ipid;
//			$post['fileinfo']['filename']['name'];
				$cust->file_name = Pms_CommonData::aesEncrypt($upfolder);
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();
				$recordid = $cust->id;

				//insert system file tags
				$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('4'));

				//insert comment in verlauf
				$ctitle = "BTM Rezept erstellt" . $medication_str;

				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->user_id = $logininfo->userid;
				$cust->recordid = $recordid;
				$cust->tabname = Pms_CommonData::aesEncrypt("receiptupload");
				$cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
				$cust->save();

				$_SESSION['receipt_type'] = $_POST['receipt_type'];
				$_SESSION['idd'] = $_REQUEST['id'];
				$_SESSION['patientfirstname'] = $_POST['patientfirstname'];
				$_SESSION['patientlastname'] = $_POST['patientlastname'];
				$_SESSION['street'] = $_POST['street'];
				$_SESSION['zipcode_city'] = $_POST['zipcode'] . ' ' . $_POST['city'];
				$_SESSION['insuranceno'] = $_POST['insuranceno'];
				$_SESSION['insurance_ik_number'] = "";
				$_SESSION['birthdate'] = $_POST['birthdate'];
				$_SESSION['status'] = $_POST['status'];
				$_SESSION['datum'] = $_POST['datum'];
				$_SESSION['kassenno'] = $_POST['kassenno'];
				$_SESSION['insurancecomname'] = $_POST['insurancecomname'];
				$_SESSION['valid_till'] = $_POST['valid_till'];


				$_SESSION['med1'] = $_POST['med1'];
				$_SESSION['med2'] = $_POST['med2'];
				$_SESSION['med4'] = $_POST['med4'];
				$_SESSION['med5'] = $_POST['med5'];
				$_SESSION['med7'] = $_POST['med7'];
				$_SESSION['med8'] = $_POST['med8'];
				$_SESSION['med9'] = $_POST['med9'];

				if($_POST['stampusers'] > 0)
				{
					if($multiplestamps_option === true)
					{
						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);

						$_SESSION['lanr'] = $userstatmp[0]['stamp_lanr'];
						$_SESSION['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
						$_SESSION['userstamp1'] = $userstatmp[0]['row1'];
						$_SESSION['userstamp2'] = $userstatmp[0]['row2'];
						$_SESSION['userstamp3'] = $userstatmp[0]['row3'];
						$_SESSION['userstamp4'] = $userstatmp[0]['row4'];
						$_SESSION['userstamp5'] = $userstatmp[0]['row5'];
						$_SESSION['userstamp6'] = $userstatmp[0]['row6'];
						$_SESSION['userstamp7'] = $userstatmp[0]['row7'];
					}
					else
					{
						$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
						if($userst)
						{
							$uarray = $userst->toArray();
							$_SESSION['lanr'] = $uarray['LANR'];
							$_SESSION['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
						}

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getLastUserStamp($_POST['stampusers']);

						$_SESSION['userstamp1'] = $userstatmp[0]['row1'];
						$_SESSION['userstamp2'] = $userstatmp[0]['row2'];
						$_SESSION['userstamp3'] = $userstatmp[0]['row3'];
						$_SESSION['userstamp4'] = $userstatmp[0]['row4'];
						$_SESSION['userstamp5'] = $userstatmp[0]['row5'];
						$_SESSION['userstamp6'] = $userstatmp[0]['row6'];
						$_SESSION['userstamp7'] = $userstatmp[0]['row7'];
					}
				}
				else
				{

					$_SESSION['lanr'] = $_POST['lanr'];
					$_SESSION['betriebsstatten_nr'] = $_POST['betriebsstatten_nr'];
					$_SESSION['userstamp1'] = $_POST['userstamp1'];
					$_SESSION['userstamp2'] = $_POST['userstamp2'];
					$_SESSION['userstamp3'] = $_POST['userstamp3'];
					$_SESSION['userstamp4'] = $_POST['userstamp4'];
					$_SESSION['userstamp5'] = $_POST['userstamp5'];
					$_SESSION['userstamp6'] = $_POST['userstamp6'];
					$_SESSION['userstamp7'] = $_POST['userstamp7'];
				}

				$_SESSION['bvg'] = $_POST['bvg'];
				$_SESSION['mttel'] = $_POST['mttel'];
				$_SESSION['soff'] = $_POST['soff'];
				$_SESSION['bedaf'] = $_POST['bedaf'];
				$_SESSION['pricht'] = $_POST['pricht'];
				$_SESSION['getiuhrfrei'] = $_POST['getiuhrfrei'];
				$_SESSION['othertext'] = $_POST['othertext'];
				$_SESSION['redirurl'] = APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id'];

				$this->_redirect('pdfrezeptdruck/pdf.php?case=2');
			}
			else
			{

// 				$patientmaster = new PatientMaster();
// 				$parr = $patientmaster->getMasterData($decid, 0);
				$parr = $patientmaster->get_patientMasterData();

				$this->view->patientfirstname = $parr['first_name'];
				$this->view->patientlastname = $parr['last_name'];
				$this->view->street = $parr['street1'];
				$this->view->street2 = $parr['street2'];
				$this->view->zip = $parr['zip'];
				$this->view->city = $parr['city'];
				$this->view->telephone = $parr['phone'];
				$this->view->mobile = $parr['mobile'];

				if($parr['sex'] == 1)
				{
					$this->view->male = "checked='checked'";
				}

				if($parr['sex'] == 2)
				{
					$this->view->female = "checked='checked'";
				}

				$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
				$this->view->refarray = $ref['referred_name'];

// 				$patientmaster = new PatientMaster();
// 				$patientinfo = $patientmaster->getMasterData($decid, 0);
				$patientinfo = $patientmaster->get_patientMasterData();

				//ISPC-2329 pct.i) Lore 26.08.2019
				if($patientinfo['birthd'] != '0000-00-00')
				{
				    $patientinfo['birthd'] = date('d.m.y', strtotime($patientinfo['birthd']));
				}
				
				$this->view->bdate = $patientinfo['birthd'];

				$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					$this->view->getiuval = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
				}

				$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
				$this->view->insurance_com_name = $healthinsu_array[0]['company_name'];
				$this->view->insurance_ik_number = $healthinsu_array[0]['kvk_no'];

				if(empty($healthinsu_array[0]['institutskennzeichen']) || $healthinsu_array[0]['institutskennzeichen'] == 0)
				{
					if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
					{

						$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
						$healtharray = $helathins->toArray();
						$institutskennzeichen = $healtharray['iknumber'];
						$healthinsu_array[0]['institutskennzeichen'] = $institutskennzeichen;
					}
				}

				$this->view->kassen_no = $healthinsu_array[0]['kvk_no'];

				if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == 1)
				{
					$this->view->bvg = 6;
				}

				$st = new KbvKeytabs();
				$status_array = $st->getKbvKeytabs(1);

				$status_int_array = array("M" => "1", "F" => "3", "R" => "5");

				if($healthinsu_array[0]['insurance_status'] != "")
				{
					if(array_key_exists($healthinsu_array[0]['insurance_status'], $status_int_array))
					{
						$this->view->insurance_status = $status_int_array[$healthinsu_array[0]['insurance_status']];
					}
					else
					{
						$this->view->insurance_status = "";
					}
				}
				$pdf = new Pms_PDF();
				$_SESSION['rcfolder'] = $pdf->uniqfolder(PDF_PATH);

				$users = new User();
				$userarray = $users->getUserByClientid($logininfo->clientid);
				$userarraylast[] = $this->view->translate('selectuser');
				$userarraylast_ids = array();
				foreach($userarray as $user)
				{
					$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
					$userarraylast_ids[] = $user['id'];
				}
				$this->view->users = $userarraylast;

				$ustamp = new UserStamp();
				$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
				foreach($multipleuser_stamp as $ks => $uspamp)
				{
					$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
					$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
					$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
				}
				$this->view->users_mstamps = $users_mstamps;

				if($isadmin == 1)
				{
					$showselect = 1;
				}
				else
				{
					$showselect = 1; // show select to all
				}
				$this->view->showselect = $showselect;


				$ustamp = new UserStamp();
				$userstatmp = $ustamp->getLastUserStamp($logininfo->userid);

				$this->view->userstamp1 = $userstatmp[0]['row1'];
				$this->view->userstamp2 = $userstatmp[0]['row2'];
				$this->view->userstamp3 = $userstatmp[0]['row3'];
				$this->view->userstamp4 = $userstatmp[0]['row4'];
				$this->view->userstamp5 = $userstatmp[0]['row5'];
				$this->view->userstamp6 = $userstatmp[0]['row6'];
				$this->view->userstamp7 = $userstatmp[0]['row7'];

				$epid = Pms_CommonData::getEpidFromId($decid);
			}
		}

		public function sapvfb3commentAction()
		{
			$this->_helper->layout->setLayout('layout_report');
		}

		public function sapvfb3upcommentAction()
		{
			$this->_helper->layout->setLayout('layout_report');
		}

		public function form1wurzburgAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ------------------------------------------------ */
// 			$patientmaster = new PatientMaster();
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();

			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->address = $parr['street1'] . " " . $parr['street2'] . "<br /> " . $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];
			$this->view->birthdate = $parr['birthd'];

			if($handle = opendir("folgeverordnungupload/" . $clientid))
			{
				$count = 0;
				$filearr = array();
				while(false !== ($file = readdir($handle)))
				{
					if($file != "." && $file != "..")
					{
						$filearr[] = $file;
						$count++;
					}
				}
				closedir($handle);
			}

			if(in_array("bigimage.jpg", $filearr))
			{
				$imagepath = "/folgeverordnungupload/" . $clientid . "/bigimage.jpg";
			}
			else
			{
				$imagepath = "/images/pdf-header.jpg";
			}
			$this->view->imagepath = $imagepath;

			if($this->getRequest()->isPost())
			{
				//print_r($_POST);
				$this->generateformPdf(3, $_POST, 'form1_wurzburg', "pdf_form1_wurzburg.html");
			}
		}

		public function behandlungsvertragAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */

// 			$patientmaster = new PatientMaster();
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->address = $parr['street1'] . " " . $parr['street2'];
			$this->view->zipcity = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];
			$this->view->birthdate = $parr['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($parr['ipid']);

			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$st = new KbvKeytabs();
			$status_array = $st->getKbvKeytabs(1);

			if($healthinsu_array[0]['insurance_status'] != "")
			{
				$insurance_status = $status_array[$healthinsu_array[0]['insurance_status']];
			}

			$this->view->insurance_com_name = $healthinsu_array[0]['company_name'] . " " . $healthinsu_array[0]['insurance_no'] . " " . $insurance_status;

			if($this->getRequest()->isPost())
			{
				//print_r($_POST);
				$this->generateformPdf(3, $_POST, 'Behandlungsvertrag', "pdf_Behandlungsvertrag.html");
			}
		}

		public function sapvfb5Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->frmb5class = "active";

// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];
			$ipid = $parr['ipid'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();
			$this->view->bdate = $patientinfo['birthd'];

			$imgtag = Doctrine::getTable('SapfiveImagetags')->findBy('ipid', $ipid);
			$tagarray = $imgtag->toArray();

			if(is_array($tagarray) && count($tagarray) > 0)
			{
				$imgtagarray = $tagarray;
			}
			else
			{
				$imgtagarray = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
			}

			$grid = new Pms_Grid($imgtagarray, 1, count($imgtagarray), "sapfivegrid.html");
			$this->view->imgtaggrid = $grid->renderGrid();

			if($this->getRequest()->isPost())
			{
				$this->generateformPdf(3, $_POST, 'SAPVF_B5', "sapvf_b5formpdf.html");
			}
		}

		public function addtagAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			if($_REQUEST['tagid'] > 0 && strlen($_REQUEST['name']) > 0)
			{
				$tag = Doctrine::getTable('SapfiveImagetags')->find($_REQUEST['tagid']);
				$tag->tagname = $_REQUEST['name'];
				$tag->leftpos = $_REQUEST['left'];
				$tag->toppos = $_REQUEST['top'];
				$tag->boxwidth = $_REQUEST['width'];
				$tag->boxheight = $_REQUEST['height'];
				$tag->save();
				$ipd = $_REQUEST['tagid'];
			}
			elseif(strlen($_REQUEST['name']) > 0)
			{
				$sapfive = new SapfiveImagetags();
				$sapfive->ipid = $ipid;
				$sapfive->tagname = $_REQUEST['name'];
				$sapfive->leftpos = $_REQUEST['left'];
				$sapfive->toppos = $_REQUEST['top'];
				$sapfive->boxwidth = $_REQUEST['width'];
				$sapfive->boxheight = $_REQUEST['height'];
				$sapfive->save();
				$ipd = $sapfive->id;
			}

			if($ipd > 0)
			{
				$jsonid = $ipd;
			}
			else
			{
				$jsonid = rand(100, 1000);
			}

			$response = array();
			$response['result'] = true;
			if($_REQUEST['tagid'] > 0)
			{
				$response['edit'] = true;
			}

			$response['tag'] = array(
				"id" => $jsonid,
				"text" => $_REQUEST['name'],
				"left" => $_REQUEST['left'],
				"top" => $_REQUEST['top'],
				"width" => $_REQUEST['width'],
				"height" => $_REQUEST['height'],
				"url" => "person.php?id=800",
				"isDeleteEnable" => true
			);

			echo json_encode($response);
			exit;
		}

		public function phototagsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			$imgtag = Doctrine::getTable('SapfiveImagetags')->findBy('ipid', $ipid);
			$tagarray = $imgtag->toArray();
			$comma = "";

			$response = array();
			$tags = array();
			foreach($tagarray as $key => $val)
			{
				$jsonval .= $comma . '{
				"id":' . $val['id'] . ',
				"text":"' . $val['tagname'] . '",
				"left":' . $val['leftpos'] . ',
				"top":' . $val['toppos'] . ',
				"url": "person.php?id=200",
				"isDeleteEnable": true
				}';

				$comma = ",";

				$tags[] = array("id" => $val['id'],
					"text" => $val['tagname'],
					"left" => $val['leftpos'],
					"top" => $val['toppos'],
					"width" => $val['boxwidth'],
					"height" => $val['boxheight'],
					"url" => "person.php?id=200",
					"isDeleteEnable" => true);
			}

			$response['Image'][] = array("id" => 150, "Tags" => $tags);
			$response['options'] = array('literals' => array('removeTag' => 'Remove tag'), 'tag' => array('flashAfterCreation' => true));

			echo json_encode($response);
			exit;
		}

		public function deletetagAction()
		{
			$imgtag = Doctrine::getTable('SapfiveImagetags')->find($_GET['tagid']);
			$imgtag->delete();

			echo '({"result":true,"message":"ooops"})';
			exit;
		}

		private function retainValues($values)
		{
			foreach($values as $key => $val)
			{
//				if(!is_array($val))
//				{
				$this->view->$key = $val;
//				}
			}
		}

		private function generateReceiptPdf($chk, $post, $pdfname, $filename)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
// 			$post['ipid'] = Pms_CommonData::getIpid($decid);
			$post['ipid'] = $ipid;

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();

			$post['patient_name'] = $parr['last_name'] . ", " . $parr['first_name']; //."<br>".$parr['street1']."<br>".$parr['zip']."<br>".$parr['city'];
			$post['street'] = $parr['street1'];
			$post['street2'] = $parr['street2'];
			$post['zip'] = $parr['zip'];
			$post['telephone'] = $parr['phone'];
			$post['mobile'] = $parr['mobile'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);

			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$post['lastname'] = $loguserarray['last_name'];
				$post['firstname'] = $loguserarray['first_name'];
				$post['betriebsstatten_nr'] = $loguserarray['betriebsstattennummer'];
				$post['lanr'] = $loguserarray['LANR'];
			}
			$ustamp = new UserStamp();
			$stmarray = $ustamp->getLastUserStamp($logininfo->userid);

			$post['stamparray'] = $stmarray;

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['clientname'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];

// 			$post['sapsymp'] = Sapsymptom::get_patient_sapvsymptom(Pms_CommonData::getIpid($decid));
			$post['sapsymp'] = Sapsymptom::get_patient_sapvsymptom($ipid);
			//$post = $sparr;
			// print_r($post);

// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();

			$post['birthdate'] = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$post['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$post['insurance_status'] = $healthinsu_array[0]['insurance_status'];
			$post['datum'] = $post['datum'];
			$post['med1'] = $post['med1'];

			$post['med2'] = $post['med2'];
			$post['med3'] = $post['med3'];
			$post['med4'] = $post['med4'];
			$post['med5'] = $post['med5'];
			$post['med6'] = $post['med6'];
			$post['med7'] = $post['med7'];
			$post['med8'] = $post['med8'];
			$post['med9'] = $post['med9'];
			$post['pckgr1'] = $post['pckgr1'];
			$post['meinh1'] = $post['meinh1'];
			$post['anz1'] = $post['anz1'];
			$post['pckgr2'] = $post['pckgr2'];
			$post['meinh2'] = $post['meinh2'];
			$post['anz2'] = $post['anz2'];
			$post['pckgr3'] = $post['pckgr3'];
			$post['meinh3'] = $post['meinh3'];
			$post['anz3'] = $post['anz3'];
			$post['soff'] = $post['soff'];
			$post['ausstolungdetum'] = $post['ausstolungdetum'];

			/* analage3 */
// 			$patientmaster = new PatientMaster();
// 			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$post['tablepatientinfo'] = Pms_Template::createTemplate($parr, 'templates/pdfprofile.html');
			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");

			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);

			$angle = 90;
			$config = new Zend_Config_Ini("pdfrezeptdruck/sizes.ini", "kvrezept");
			//var_dump($config);

			$patient['last_name'] = "Brinkmann";
			$patient['first_name'] = "Florian";
			$patient['street'] = "Am Sattelgut 76a";
			$patient['zipcity'] = "44879 Bochum";
			$patient['versnummer'] = "2807821766";
			$patient['birthd'] = "28.07.1982";
			$patient['versstatus'] = "1     1";
			$patient['vkgueltigbis'] = "09/12";
			$patient['kassennummer'] = "3477503";
			$krankenkasse = "Techniker Krankenkasse";
			$krankenkasse = "Techniker Krankenkasse";
			$lanr = "766311401";
			$ik = "260590106";
			$datum = date("d.m.y");
			$bsnr = "188412900";


			$pdf = new Pms_FPDF('P', 'mm', array($this->position(148000), $this->position(105000)));
			$pdf->AddPage();

			$this->setText($datum, "datum", NULL, $pdf, $config);
			$this->setText($patient['last_name'], "patientnachname", NULL, $pdf, $config);
			$this->setText($patient['first_name'], "patientvorname", NULL, $pdf, $config);
			$this->setText($patient['street'], "patientstrasse", NULL, $pdf, $config);
			$this->setText($patient['zipcity'], "patientzipcity", NULL, $pdf, $config);
			$this->setText($patient['birthd'], "patientbirthd", NULL, $pdf, $config);
			$this->setText($patient['versnummer'], "patientversichertennummer", NULL, $pdf, $config);
			$this->setText($patient['versstatus'], "patientstatus", NULL, $pdf, $config);
			$this->setText($bsnr, "betriebsstaette", NULL, $pdf, $config);
			$this->setText($krankenkasse, "krankenkasse", NULL, $pdf, $config);
			$this->setText($patient['kassennummer'], "patientkassennummer", NULL, $pdf, $config);
			$this->setText($lanr, "vertragsarztnummer", NULL, $pdf, $config);
			$this->setText("Tantum Verde Gurgellösung mit Sprühkopf", "medizeile1", NULL, $pdf, $config);
			$this->setText("Lösung 60ml N1", "medizeile2", NULL, $pdf, $config);
			$this->setText("Tantum Verde Gurgellösung mit Sprühkopf", "medizeile3", NULL, $pdf, $config);
			$this->setText("Lösung 60ml N1", "medizeile4", NULL, $pdf, $config);
			$this->setText("Tantum Verde Gurgellösung mit Sprühkopf", "medizeile5", NULL, $pdf, $config);
			$this->setText("Lösung 60ml N1", "medizeile6", NULL, $pdf, $config);

			$this->setText("Klaus Blum\nFacharzt für Allgemeinmedizin\nGartenstraße 113\n44869 Bochum\nTel.: 02327 - 71278\nFax: 02327 - 790248\nBSNR: 188412900   LANR:766311401", "stempel", NULL, $pdf, $config);

			$this->setText("X", "boxGF", NULL, $pdf, $config);
			$this->setText("X", "boxGP", NULL, $pdf, $config);
			$this->setText("X", "boxNC", NULL, $pdf, $config);
			ob_end_clean();
			ob_start();
			$string = $pdf->Output('pdfrezeptdruck/temp/test.pdf', 'I');
			exit;
		}

		public function medicationpdfAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$ipid = Pms_CommonData::getIpid($decid);

			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$medic = new PatientDrugPlan();
			$this->view->medicarr = $medic->getMedicationPlan($decid);
		}

		public function medicationformpdfAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userinfo = Pms_CommonData::getUserData($logininfo->userid);
			$clientinfo = Pms_CommonData::getClientData($logininfo->clientid);
			$ipid = Pms_CommonData::getIpid($decid);
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			$clientarr = Pms_CommonData::getClientData($logininfo->clientid);

			$clientname = $clientarr[0]['client_name'];
			$this->view->clientname = $clientarr[0]['client_name'];
			$this->view->clientphone = $clientarr[0]['phone'];
			$this->view->clientfax = $clientarr[0]['fax'];
			$this->view->clientemailid = $clientarr[0]['emailid'];
			$this->view->germandaysarray = array('Mon' => 'MONTAG', 'Tue' => 'DIENSTAG', 'Wed' => 'MITTWOCH', 'Thu' => 'DONNERSTAG', 'Fri' => 'FREITAG', 'Sat' => 'SAMSTAG', 'Sun' => 'SONNTAG');

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$previleges = new Modules();
			if($previleges->checkModulePrivileges("131", $logininfo->clientid)){
			    $med_module = "1";
			} else{
			    $med_module = "0";
			}
			
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();

			$patient_name = $parr['last_name'] . ", " . $parr['first_name'] . ", " . $parr['birthd'];
			$this->view->patient_name = $parr['last_name'] . ", " . $parr['first_name'] . ", " . $parr['birthd'];
			
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->birthdate = $parr['birthd'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			if($_GET['pst'] == 'post')
			{
				//Normal medication
				$medic = new PatientDrugPlan();
				$this->view->medicarr = $medic->getMedicationPlan($decid,false,false,true);
				$gridmedi = $medic->getMedicationPlan($decid,false,false,true);
				
				if(count($gridmedi) > 0)
				{
					$totalpage = (int) (count($gridmedi) / 18);
					if(count($gridmedi) % 18 != 0)
					{
						$totalpage++;
					}
				}
				$this->view->newmedicarr = $medic->getbedarfMedication($decid,true);
				for($t = 0; $t < $totalpage; $t++)
				{
					$a_meication = array();
					for($i = $t * 18; $i < ($t + 1) * 18; $i++)
					{
						if($i < count($gridmedi))
						{
							$a_meication[] = $gridmedi[$i];
						}
					}
					$grid = new Pms_Grid($a_meication, 1, count($a_meication), "medicationpdf_paging.html");
					$medicationgrid .= $grid->renderGrid();
				}

				$this->view->medicarriv = $medic->getMedicationPlan($decid, true,false,true);
				$gridmediiv = $medic->getMedicationPlan($decid, true, false,true);

				if(count($gridmediiv) > 0)
				{
					$totalpage = (int) (count($gridmediiv) / 18);
					if(count($gridmediiv) % 18 != 0)
					{
						$totalpage++;
					}
				}

				for($t = 0; $t < $totalpage; $t++)
				{
					$a_meicationiv = array();
					for($i = $t * 18; $i < ($t + 1) * 18; $i++)
					{
						if($i < count($gridmediiv))
						{
							$a_meicationiv[] = $gridmediiv[$i];
						}
					}
					$gridiv = new Pms_Grid($a_meicationiv, 1, count($a_meicationiv), "medicationivpdf_paging.html");
					$medicationgridiv = $gridiv->renderGrid();
				}

				$previleges = new Modules();
				$this->view->showiv = $previleges->checkModulePrivileges("53", $logininfo->clientid);
				$this->view->medicationcontent = $medicationgrid;
				$this->view->medicationcontentiv = $medicationgridiv;

				$htmlform = $this->view->render('patientform/medicationformpdf.html');

				$header_text .= '<table width="100%">';
				$header_text .= '<tr><td align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:bold; text-decoration:none; font-size:12pt; color:#000000;">Name,Vorname,geb.Datum: </font> ' . $patient_name . ', ' . date('d.m.Y') . ' </td></tr>';
				$header_text .= '</table>';
				$pdf = new Pms_PDF('L', 'mm', 'A4', true, 'UTF-8', false);
//			defaults with header, landscape
				$pdf->setDefaults(true, 'L');
				$pdf->setImageScale(1.5);
//			reset margins
				$pdf->SetMargins(20, 20, 20);
				$pdf->SetFont('helvetica', 'b', 12);
				$pdf->SetHeaderMargin(10);
				$pdf->setHeaderFont(Array('helvetica', 'b', 11));
				$pdf->HeaderText = $header_text;

				$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], 8); //
				if($bg_image !== false)
				{
					$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
					if(is_file($bg_image_path))
					{
						$pdf->setBackgroundImage($bg_image_path);
					}
				}
				// add a page
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

				$html = preg_replace('/<img(.*)\/>/i', '', $html);
				$pdf->setHTML($html);

				$pname = 'medicationpdf';

				/* $tmpstmp = $pdf->uniqfolder(PDF_PATH);
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf');

				$_SESSION ['filename'] = $tmpstmp . '/' . $pname . '.pdf';
				$cmd = "zip -9 -r -P " . $logininfo->filepass . " " . PDF_PATH . "/" . $tmpstmp . ".zip " . PDF_PATH . "/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;

				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip"; */


				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				$file_name_real = basename($tmpstmp);
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf');
				$_SESSION ['filename'] = $tmpstmp . '/' . $pname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $file_name_real . ".zip";
				$filename = "uploads/" . $file_name_real . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
				    $upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
				    Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf' , "uploads" );
				
				
				if($med_module == "1"){
				    
				    $cust = new PatientFileUpload();
				    $cust->title = Pms_CommonData::aesEncrypt('Medikamente Wochenplan');
				    $cust->ipid = $ipid;
				    $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				    $cust->system_generated = "1";
				    $cust->tabname = "medikamente_wochenplan";
				    $cust->save();
				    $recordid = $cust->id;
				    
				    $custcourse = new PatientCourse();
				    $custcourse->ipid = $ipid;
				    $custcourse->course_date = date("Y-m-d H:i:s", time());
				    $custcourse->course_type = Pms_CommonData::aesEncrypt("K");
				    $comment = 'Medikamente Wochenplan wurde erstellt';
				    $custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
				    $custcourse->user_id = $logininfo->userid;
				    $custcourse->recordid = $recordid;
				    $custcourse->tabname = Pms_CommonData::aesEncrypt('medikamente_wochenplan');
				    $custcourse->save();
				}
				
				
				ob_end_clean();
				ob_start();

				$pdf->toBrowser($pname . '.pdf', 'D');

				exit;
			}
		}

		public function newmedikamentenplanpdfAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userinfo = Pms_CommonData::getUserData($logininfo->userid);
			$clientinfo = Pms_CommonData::getClientData($logininfo->clientid);
			$ipid = Pms_CommonData::getIpid($decid);

			$clientid = $logininfo->clientid;
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			$this->view->client_name = $clientarr[0]['client_name'];

			$clientarr = Pms_CommonData::getClientData($logininfo->clientid);

			$this->view->clientphone = $clientarr[0]['phone'];
			$this->view->clientfax = $clientarr[0]['fax'];
			if(strlen($clientarr[0]['team_name']) > 0)
			{
				$this->view->clientname = $clientarr[0]['team_name'];
			}
			else
			{
				$this->view->clientname = $clientarr[0]['client_name'];
			}
			$clientname = $this->view->clientname;
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$previleges = new Modules();
			if($previleges->checkModulePrivileges("131", $logininfo->clientid)){
			    $med_module = "1";
			} else{
			    $med_module = "0";
			}
			/*			 * ******* Patient Allergies ************ */
			$aller = new PatientDrugPlanAllergies();
			$allergies = $aller->getPatientDrugPlanAllergies($decid);

			if(!empty($allergies))
			{
				$allergien_comment = htmlspecialchars(strip_tags($allergies[0]['allergies_comment'], '<br />'));
			}
			$this->view->allergies_comment = nl2br($allergien_comment);
					

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();

			$this->view->patient_name = utf8_encode($parr['last_name'] . ", " . $parr['first_name']);
			$patient_name = utf8_encode($parr['last_name'] . ", " . $parr['first_name']);
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->birthdate = $parr['birthd'];
			$birthdate = $parr['birthd'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$medicarr = array();
			$medic = new PatientDrugPlan();
			$medicarr = $medic->getMedicationPlan($decid,false,false,true);
			$newmedicarr = $medic->getbedarfMedication($decid,true);
			$ivmedicarr = $medic->getivMedication($decid,true);

			$medicarr = array_merge($medicarr, $newmedicarr, $ivmedicarr);

			if($_GET['pst'] == 'post')
			{
				if(count($medicarr) > 0)
				{
					$totalpage = (int) (count($medicarr) / 18);
					if(count($medicarr) % 18 != 0)
					{
						$totalpage++;
					}
				}

				for($t = 0; $t < $totalpage; $t++)
				{
					$a_meication = array();

					for($i = $t * 18; $i < ($t + 1) * 18; $i++)
					{
						if($i < count($medicarr))
						{
							$a_meication[] = $medicarr[$i];
						}
					}
//print_r($a_meication);exit;
					$grid = new Pms_Grid($a_meication, 1, count($a_meication), "medicationplanpdf_paging.html");
					$Mmedicationgrid .= $grid->renderGrid();

					$grid = new Pms_Grid($ivmedicarr, 1, count($ivmedicarr), "medicationplanivpdf_paging.html");
					$IVmedicationgrid = $grid->renderGrid();

					$grid = new Pms_Grid($a_meication, 1, count($a_meication), "medicationNplanpdf_paging.html");
					$Nmedicationgrid .= $grid->renderGrid();
				}

				$previleges = new Modules();
				$this->view->showiv = $previleges->checkModulePrivileges("53", $logininfo->clientid);
				$this->view->comments = $shmedicarr[0]['comments'];
				$this->view->bolus = $shmedicarr[0]['bolus'];
				$this->view->flussrate = $shmedicarr[0]['flussrate'];
				$this->view->sperrzeit = $shmedicarr[0]['sperrzeit'];
				$this->view->Mmedicationgridcontent = $Mmedicationgrid;
				$this->view->IVmedicationgridcontent = $IVmedicationgrid;
				$this->view->Nmedicationgridcontent = $Nmedicationgrid;

				$htmlform = $this->view->render('patientform/newmedikamentenplanpdf.html');

				/* $header_text .='<table style="width: 180mm" border="0" align="center" cellpadding="0" cellspacing="0">';
				$header_text .='<tr><td width="100%" height="35" align="left">';
				$header_text .='<table width="100%" border="0" cellspacing="0" cellpadding="0">';
				$header_text .='<tr>';
				$header_text .='<td style="width: 75mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">Name: ' . utf8_decode($patient_name) . ' </font></td>
			       <td style="width: 40mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">geb:' . $birthdate . '</font></td>
			       <td style="width: 65mm;" align="center"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;"> ' . date("d.m.Y H:i") . '&nbsp;</font></td>';
				$header_text .='</tr></table></td></tr></table>'; */
				
				$header_text .='<table style="width: 180mm" border="0" align="center" cellpadding="0" cellspacing="0">';
				$header_text .='<tr><td width="80%" height="67" align="left"></td>';
				$header_text .='<td width="20%" height="67" align="center"><font style="font-family:Arial, Helvetica, sans-serif;  text-decoration:none; line-height="1"; font-size:11pt; color:#000000;"><b>'.$clientname.'</b></font></td></tr>';
				$header_text .='<tr><td colspan="2"><table width="100%" border="0" cellspacing="0" cellpadding="0">';
				$header_text .='<tr><td style="width: 75mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">Name: ' . utf8_decode($patient_name) . ' </font></td>
				<td style="width: 40mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">geb:' . $birthdate . '</font></td>
				<td style="width: 65mm;" align="center"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;"> ' . date("d.m.Y H:i") . '&nbsp;</font></td>';
				$header_text .='</tr></table></td></tr></table>'; 

//			print_r($htmlform); exit;

				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
				$pdf->setDefaults(true); //defaults with header, landscape
				$pdf->setImageScale(1.5);
				$pdf->SetMargins(15, 25, 15); //reset margins
				$pdf->SetFont('helvetica', '', 11);
				$pdf->SetHeaderMargin(2);
				//$pdf->setHeaderFont(Array('helvetica', 'b', 10));

				$pdf->HeaderText = $header_text;
				$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], 10);
				if($bg_image !== false)
				{
					$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
					if(is_file($bg_image_path))
					{
						$pdf->setBackgroundImage($bg_image_path);
					}
				}
				//add a page
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
				$html = preg_replace('/<img(.*)\/>/i', '', $html);
				$pdf->setHTML($html);
				
				$pname = 'medicationpdf';

				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				$file_name_real = basename($tmpstmp);
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf');
				$_SESSION ['filename'] = $tmpstmp . '/' . $pname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $file_name_real . ".zip";
				$filename = "uploads/" . $file_name_real . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
				    $upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
				    Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf' , "uploads" );
				
				

				
				if($med_module == "1"){
				    
				
				    $cust = new PatientFileUpload();
				    $cust->title = Pms_CommonData::aesEncrypt("Medikation / Dosierung Plan Liste");
				    $cust->ipid = $ipid;
				    $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				    $cust->system_generated = "1";
				    $cust->tabname = "medikation_dosierung_plan_liste";
				    $cust->save();
				    $recordid = $cust->id;
				
				    $custcourse = new PatientCourse();
				    $custcourse->ipid = $ipid;
				    $custcourse->course_date = date("Y-m-d H:i:s", time());
				    $custcourse->course_type = Pms_CommonData::aesEncrypt("K");
				    $comment = 'Medikation / Dosierung Plan Liste wurde erstellt';
				    $custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
				    $custcourse->user_id = $logininfo->userid;
				    $custcourse->recordid = $recordid;
				    $custcourse->tabname = Pms_CommonData::aesEncrypt('medikation_dosierung_plan_liste');
				    $custcourse->save();
				}
				
				
				
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pname . '.pdf', 'D');
				exit;
			}
		}
		public function treatmentcareplanpdfAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userinfo = Pms_CommonData::getUserData($logininfo->userid);
			$clientinfo = Pms_CommonData::getClientData($logininfo->clientid);
			$ipid = Pms_CommonData::getIpid($decid);

			$clientid = $logininfo->clientid;
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			$this->view->client_name = $clientarr[0]['client_name'];

			$clientarr = Pms_CommonData::getClientData($logininfo->clientid);

			
			$previleges = new Modules();
			if($previleges->checkModulePrivileges("131", $logininfo->clientid)){
			    $med_module = "1";
			} else{
			    $med_module = "0";
			}
			
			$this->view->clientphone = $clientarr[0]['phone'];
			$this->view->clientfax = $clientarr[0]['fax'];
			if(strlen($clientarr[0]['team_name']) > 0)
			{
				$this->view->clientname = $clientarr[0]['team_name'];
			}
			else
			{
				$this->view->clientname = $clientarr[0]['client_name'];
			}
			$clientname = $this->view->clientname;
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();

			$this->view->patient_name = utf8_encode($parr['last_name'] . ", " . $parr['first_name']);
			$patient_name = utf8_encode($parr['last_name'] . ", " . $parr['first_name']);
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->birthdate = $parr['birthd'];
			$birthdate = $parr['birthd'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$medicarr = array();
			$medic = new PatientDrugPlan();

			$trmedicarr = $medic->get_treatment_care($decid,true);
 
			$medicarr = $trmedicarr;

			if($_GET['pst'] == 'post')
			{
				if(count($medicarr) > 0)
				{
					$totalpage = (int) (count($medicarr) / 18);
					if(count($medicarr) % 18 != 0)
					{
						$totalpage++;
					}
				}

				for($t = 0; $t < $totalpage; $t++)
				{
					$a_meication = array();

					for($i = $t * 18; $i < ($t + 1) * 18; $i++)
					{
						if($i < count($medicarr))
						{
							$a_meication[] = $medicarr[$i];
						}
					}

					$grid = new Pms_Grid($trmedicarr, 1, count($trmedicarr), "medicationplantrpdf_paging.html");
					$TRmedicationgrid = $grid->renderGrid();
				}

				$previleges = new Modules();
				$this->view->showtr = $previleges->checkModulePrivileges("85", $logininfo->clientid);
				$this->view->TRmedicationgridcontent = $TRmedicationgrid;

				$htmlform = $this->view->render('patientform/treatmentcareplanpdf.html');
 
				 $header_text .='<table style="width: 180mm" border="0" align="center" cellpadding="0" cellspacing="0">';
				 $header_text .='<tr><td width="80%" height="67" align="left"></td>';
				 $header_text .='<td width="20%" height="67" align="center"><font style="font-family:Arial, Helvetica, sans-serif;  text-decoration:none; line-height="1"; font-size:11pt; color:#000000;"><b>'.$clientname.'</b></font></td></tr>';
				$header_text .='<tr><td colspan="2"><table width="100%" border="0" cellspacing="0" cellpadding="0">';
				$header_text .='<tr><td style="width: 75mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">Name: ' . utf8_decode($patient_name) . ' </font></td>
				<td style="width: 40mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">geb:' . $birthdate . '</font></td>
				<td style="width: 65mm;" align="center"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;"> ' . date("d.m.Y H:i") . '&nbsp;</font></td>';
				$header_text .='</tr></table></td></tr></table>'; 

//			print_r($htmlform); exit;

				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
				$pdf->setDefaults(true); //defaults with header, landscape
				$pdf->setImageScale(1.5);
				$pdf->SetMargins(15, 25, 15); //reset margins
				$pdf->SetFont('helvetica', '', 11);
				$pdf->SetHeaderMargin(2);
				//$pdf->setHeaderFont(Array('helvetica', 'b', 10));

				$pdf->HeaderText = $header_text;
				$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], 55);
				if($bg_image !== false)
				{
					$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
					if(is_file($bg_image_path))
					{
						$pdf->setBackgroundImage($bg_image_path);
					}
				}
				//add a page
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
				$html = preg_replace('/<img(.*)\/>/i', '', $html);
				$pdf->setHTML($html);
				
				$pname = 'Behandlungspflege_Plan';
				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				$file_name_real = basename($tmpstmp);
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf');
				$_SESSION ['filename'] = $tmpstmp . '/' . $pname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $file_name_real . ".zip";
				$filename = "uploads/" . $file_name_real . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
				    $upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
				    Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf' , "uploads" );
				
				
				

				

				if($med_module == "1"){
				
				    $cust = new PatientFileUpload();
				    $cust->title = Pms_CommonData::aesEncrypt('Behandlungspflege Plan');
				    $cust->ipid = $ipid;
				    $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				    $cust->system_generated = "1";
				    $cust->tabname = "behandlungspflege_plan";
				    $cust->save();
				    $recordid = $cust->id;
				
				    $custcourse = new PatientCourse();
				    $custcourse->ipid = $ipid;
				    $custcourse->course_date = date("Y-m-d H:i:s", time());
				    $custcourse->course_type = Pms_CommonData::aesEncrypt("K");
				    $comment = 'Behandlungspflege Plan wurde erstellt';
				    $custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
				    $custcourse->user_id = $logininfo->userid;
				    $custcourse->recordid = $recordid;
				    $custcourse->tabname = Pms_CommonData::aesEncrypt('behandlungspflege_plan');
				    $custcourse->save();
				}
				
				
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pname . '.pdf', 'D');
				exit;
			}
		}

		public function schmerzpumpeplanpdfAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userinfo = Pms_CommonData::getUserData($logininfo->userid);
			$clientinfo = Pms_CommonData::getClientData($logininfo->clientid);
			$ipid = Pms_CommonData::getIpid($decid);
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			$clientarr = Pms_CommonData::getClientData($logininfo->clientid);

			$this->view->clientname = $clientarr[0]['client_name'];
			$this->view->clientphone = $clientarr[0]['phone'];
			$this->view->clientfax = $clientarr[0]['fax'];

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			
			$previleges = new Modules();
			if($previleges->checkModulePrivileges("131", $logininfo->clientid)){
			    $med_module = "1";
			} else{
			    $med_module = "0";
			}
			
			
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			/* ######################################################### */

// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			$this->view->patient_name = utf8_encode($parr['last_name'] . ", " . $parr['first_name']);
			$patient_name = utf8_encode($parr['last_name'] . ", " . $parr['first_name']);
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->birthdate = $parr['birthd'];
			$birthdate = $parr['birthd'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$medicarr = array();
			$medic = new PatientDrugPlan();
			$shmedicarr = $medic->getSchmerzpumpeMedicationall($decid,true);

			if($_GET['pst'] == 'post')
			{
				$gridsh = new Pms_Grid($shmedicarr, 1, count($shmedicarr), "medicationSHplanpdf_paging.html");
				$SHmedicationgrid = $gridsh->renderGrid();

				$previleges = new Modules();
				$this->view->showiv = $previleges->checkModulePrivileges("53", $logininfo->clientid);
				$this->view->showsh = $previleges->checkModulePrivileges("54", $logininfo->clientid);
				$this->view->comments = htmlspecialchars($shmedicarr[0]['comments']);
				$this->view->bolus = htmlspecialchars($shmedicarr[0]['bolus']);
				$this->view->flussrate = htmlspecialchars($shmedicarr[0]['flussrate']);
				$this->view->sperrzeit =  htmlspecialchars($shmedicarr[0]['sperrzeit']);
				$this->view->SHmedicationgridcontent = $SHmedicationgrid;
				$htmlform = $this->view->render('patientform/schmerzpumpeplanpdf.html');

				$header_text = '<table>';
				$header_text .='<tr>';
				$header_text .='<td width="100%" height="35" align="left">';
				$header_text .='<table width="100%" border="0" cellspacing="0" cellpadding="0">';
				$header_text .='<tr>';
				$header_text .='<td style="width: 75mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">Name: ' . utf8_decode($patient_name) . ' <br />' . $this->view->translate("client") . ': ' . $clientarr[0]['client_name'] . '</font></td>';
				$header_text .='<td style="width: 40mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">	geb:' . $birthdate . '</font></td>';
				if($ipid == "XXXXXXXXX"){
					$header_text .='<td style="width: 65mm;" align="center"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;"> ' . date("d.m.Y 06:53") . '&nbsp;</font></td>';
				} else{
					$header_text .='<td style="width: 65mm;" align="center"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;"> ' . date("d.m.Y H:i") . '&nbsp;</font></td>';
				}
				$header_text .='</tr>';
				$header_text .='</table>';
				$header_text .='</td>';
				$header_text .='</tr>';
				$header_text .='</table>';

				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
				$pdf->setDefaults(true); //defaults with header, landscape
				$pdf->setImageScale(1.5);
				$pdf->SetMargins(15, 25, 15); //reset margins
				$pdf->SetFont('helvetica', '', 11);
				$pdf->SetHeaderMargin(10);
				$pdf->HeaderText = $header_text;

				$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], 10); //
				if($bg_image !== false)
				{
					$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
					if(is_file($bg_image_path))
					{
						$pdf->setBackgroundImage($bg_image_path);
					}
				}

				// add a page
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
				$html = preg_replace('/<img(.*)\/>/i', '', $html);

				$pname = 'medicationpdf';
				
				$pdf->setHTML($html);
				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				$file_name_real = basename($tmpstmp);
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf');
				$_SESSION ['filename'] = $tmpstmp . '/' . $pname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $file_name_real . ".zip";
				$filename = "uploads/" . $file_name_real . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
				    $upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
				    Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf' , "uploads" );
				
				
				

				
				if($med_module == "1"){
				
				    $cust = new PatientFileUpload();
				    $cust->title = Pms_CommonData::aesEncrypt("Schmerzpumpe Plan");
				    $cust->ipid = $ipid;
				    $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				    $cust->system_generated = "1";
				    $cust->tabname = "schmerzpumpe_plan";
				    $cust->save();
				    $recordid = $cust->id;
				
				    $custcourse = new PatientCourse();
				    $custcourse->ipid = $ipid;
				    $custcourse->course_date = date("Y-m-d H:i:s", time());
				    $custcourse->course_type = Pms_CommonData::aesEncrypt("K");
				    $comment = 'Schmerzpumpe Plan wurde erstellt';
				    $custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
				    $custcourse->user_id = $logininfo->userid;
				    $custcourse->recordid = $recordid;
				    $custcourse->tabname = Pms_CommonData::aesEncrypt('schmerzpumpe_plan');
				    $custcourse->save();
				}
				
				ob_end_clean();
				ob_start();

				$pdf->toBrowser($pname . '.pdf', 'D');
				exit;
			}
		}

		public function newmediandschmerzpumpeplanpdfAction()
		{
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userinfo = Pms_CommonData::getUserData($logininfo->userid);
			$clientinfo = Pms_CommonData::getClientData($logininfo->clientid);
			$ipid = Pms_CommonData::getIpid($decid);
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			$clientarr = Pms_CommonData::getClientData($logininfo->clientid);
			$this->view->clientphone = $clientarr[0]['phone'];
			$this->view->clientfax = $clientarr[0]['fax'];
			if(strlen($clientarr[0]['team_name']) > 0)
			{
				$this->view->clientname = $clientarr[0]['team_name'];
			}
			else
			{
				$this->view->clientname = $clientarr[0]['client_name'];
			}


			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$previleges = new Modules();
			if($previleges->checkModulePrivileges("131", $logininfo->clientid)){
			    $med_module = "1";
			} else{
			    $med_module = "0";
			}
			
			/* ########################### Patient Allergies ############################## */
			$aller = new PatientDrugPlanAllergies();
			$allergies = $aller->getPatientDrugPlanAllergies($decid);

			if(!empty($allergies))
			{
				$allergien_comment = htmlspecialchars(strip_tags($allergies[0]['allergies_comment'], '<br />'));
			}
			$this->view->allergies_comment = nl2br($allergien_comment);
					
			
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			$this->view->patient_name = utf8_encode($parr['last_name'] . ", " . $parr['first_name']);
			$patient_name = utf8_encode($parr['last_name'] . ", " . $parr['first_name']);
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->birthdate = $parr['birthd'];
			$birthdate = $parr['birthd'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$medicarr = array();
			$medic = new PatientDrugPlan();
			$medicarr = $medic->getMedicationPlan($decid,false,false,true);

			$newmedicarr = $medic->getbedarfMedication($decid,true);
			$ivmedicarr = $medic->getivMedication($decid,true);

			$medicarr = array_merge($medicarr, $newmedicarr, $ivmedicarr);

			$medic = new PatientDrugPlan();
			$shmedicarr = $medic->getSchmerzpumpeMedicationall($decid,true);

			if($_GET['pst'] == 'post')
			{
				if(count($medicarr) > 0)
				{
					$totalpage = (int) (count($medicarr) / 18);
					if(count($medicarr) % 18 != 0)
					{
						$totalpage++;
					}
				}

				for($t = 0; $t < $totalpage; $t++)
				{
					$a_meication = array();

					for($i = $t * 18; $i < ($t + 1) * 18; $i++)
					{
						if($i < count($medicarr))
						{
							$a_meication[] = $medicarr[$i];
						}
					}

					$grid = new Pms_Grid($a_meication, 1, count($a_meication), "medicationplanpdf_paging.html");
					$Mmedicationgrid .= $grid->renderGrid();

					$grid = new Pms_Grid($ivmedicarr, 1, count($ivmedicarr), "medicationplanivpdf_paging.html");
					$IVmedicationgrid = $grid->renderGrid();

					$grid = new Pms_Grid($a_meication, 1, count($a_meication), "medicationNplanpdf_paging.html");
					$Nmedicationgrid .= $grid->renderGrid();
				}

				$previleges = new Modules();
				$this->view->showiv = $previleges->checkModulePrivileges("53", $logininfo->clientid);

				$gridsh = new Pms_Grid($shmedicarr, 1, count($shmedicarr), "medicationSHplanpdf_paging.html");
				$SHmedicationgrid = $gridsh->renderGrid();

				$this->view->comments = htmlspecialchars($shmedicarr[0]['comments']);
				$this->view->bolus = htmlspecialchars($shmedicarr[0]['bolus']);
				$this->view->flussrate = htmlspecialchars($shmedicarr[0]['flussrate']);
				$this->view->sperrzeit =  htmlspecialchars($shmedicarr[0]['sperrzeit']);
				
				$this->view->Mmedicationgridcontent = $Mmedicationgrid;
				$this->view->IVmedicationgridcontent = $IVmedicationgrid;
				$this->view->Nmedicationgridcontent = $Nmedicationgrid;
				$this->view->SHmedicationgridcontent = $SHmedicationgrid;

				$htmlform = $this->view->render('patientform/newschmerzemedikamentenplanpdf.html');

				$header_text .='<table style="width: 180mm" border="0" align="center" cellpadding="0" cellspacing="0">';
				$header_text .='<tr><td width="100%" height="35" align="left">';
				$header_text .='<table width="100%" border="0" cellspacing="0" cellpadding="0">';
				$header_text .='<tr>';
				$header_text .='<td style="width: 75mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">Name: ' . utf8_decode($patient_name) . ' </font></td>
			   <td style="width: 40mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">geb:' . $birthdate . '</font></td>
			   <td style="width: 65mm;" align="center"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;"> ' . date("d.m.Y H:i") . '&nbsp;</font></td>';
				$header_text .='</tr></table></td></tr></table>';


				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
				$pdf->setDefaults(true); //defaults with header, landscape
				$pdf->setImageScale(1.5);
				$pdf->SetMargins(15, 25, 15); //reset margins
				$pdf->SetFont('helvetica', '', 11);
				$pdf->SetHeaderMargin(15);
				$pdf->setHeaderFont(Array('helvetica', 'b', 10));

				$pdf->HeaderText = $header_text;
				$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], 10); //
				if($bg_image !== false)
				{
					$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
					if(is_file($bg_image_path))
					{
						$pdf->setBackgroundImage($bg_image_path);
					}
				}

				// add a page
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
				$html = preg_replace('/<img(.*)\/>/i', '', $html);
				$pdf->setHTML($html);
//			echo $html;
//			exit;

				
				$pname = 'medicationpdf';
				
				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				$file_name_real = basename($tmpstmp);
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf');
				$_SESSION ['filename'] = $tmpstmp . '/' . $pname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
				exec($cmd);
				$zipname = $file_name_real . ".zip";
				$filename = "uploads/" . $file_name_real . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
				    $upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
				    Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf' , "uploads" );
				
				
				
				
				if($med_module == "1"){
				    
				    
				    $cust = new PatientFileUpload();
				    $cust->title = Pms_CommonData::aesEncrypt('Medikation Dosierungsplan + Schmerzpumpe');
				    $cust->ipid = $ipid;
				    $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				    $cust->system_generated = "1";
				    $cust->tabname = "medikation_dosierungsplan_schmerzpumpe";
				    $cust->save();
				    $recordid = $cust->id;
				    
				    $custcourse = new PatientCourse();
				    $custcourse->ipid = $ipid;
				    $custcourse->course_date = date("Y-m-d H:i:s", time());
				    $custcourse->course_type = Pms_CommonData::aesEncrypt("K");
				    $comment = 'Medikation Dosierungsplan + Schmerzpumpe wurde erstellt';
				    $custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
				    $custcourse->user_id = $logininfo->userid;
				    $custcourse->recordid = $recordid;
				    $custcourse->tabname = Pms_CommonData::aesEncrypt('medikation_dosierungsplan_schmerzpumpe');
				    $custcourse->save();
				}
				
				
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pname . '.pdf', 'D');
				exit;
			}
		}

		private function mm2dpi($mm)
		{
			$faktor = 25.4 / 72;
			return round($mm / $faktor);
		}

		private function top($mm)
		{
			global $config;
			return $config->page->height - $mm;
		}

		private function position($value, $faktor = 1000)
		{
			return round($value / $faktor);
		}

		private function setText($value, $key, $align = "L", $pdf, $config)
		{
			$pdf->SetFont(($config->$key->font->family != "" ? $config->$key->font->family : $config->font->family), '', ($config->$key->font->size != "" ? $config->$key->font->size : $config->font->size));
			if($align == "L")
			{
				$pdf->Text(position($config->position->left + $config->$key->left), position($config->position->top + $config->$key->top), utf8_decode($value));
			}
			else
			{
				$pdf->SetXY($this->position($config->position->left + $config->$key->left), $this->position($config->position->top + $config->$key->top));
				$pdf->MultiCell(0, 3, utf8_decode($value), 0, $align);
				$pdf->SetXY(0, 0);
			}
		}

		public function updatesap3dateAction()
		{
//		$this->_helper->layout->setLayout('layout');
			$this->_helper->layout->setLayout('layout_ajax');
			$this->_helper->viewRenderer->setNoRender();
			
			$decid = Pms_Uuid::decrypt($_GET['patid']);
			$ipid = Pms_CommonData::getIpid($decid);
			
			if(strlen($_GET['dt']) > 0 && strlen($_GET['id']) > 0 && strlen($ipid)>0)
			{
				$db = Doctrine::getTable('Sapsymptom')->find($_GET['id']);
				$olddate = $_GET['dt'] . " " . date("H:i:s", strtotime($db->create_date));

				$sp = Doctrine::getTable('Sapsymptom')->find($_GET['id']);
				$sp->create_date = $olddate;
				$sp->save();

				//update in patient course
				$qa = Doctrine_Query::create()
					->update('PatientCourse')
					->set('done_date', '?', $olddate)
					->where('ipid = ?', $ipid)
					->andWhere('done_name = AES_ENCRYPT("sapvfb3", "' . Zend_Registry::get('salt') . '")')
					->andWhere('done_id = ?', $_REQUEST['id']);
				$qa->execute();

				$response = array();
				$response['date'] = date('d.m', strtotime($_GET['dt']));
				$response['time'] = date("H:i");
				echo json_encode($response);
				exit;
			}
		}

		public function updatesap3timeAction()
		{
//		$this->_helper->layout->setLayout('layout');
			$this->_helper->layout->setLayout('layout_ajax');
			$this->_helper->viewRenderer->setNoRender();
			
			$decid = Pms_Uuid::decrypt($_GET['patid']);
			$ipid = Pms_CommonData::getIpid($decid);
			
			if(strlen($_GET['tim']) > 0 && strlen($_GET['id']) > 0 && strlen($ipid)>0)
			{
				$db = Doctrine::getTable('Sapsymptom')->find($_GET['id']);
				$olddate = date("Y-m-d", strtotime($db->create_date)) . " " . $_GET['tim'] . ":00";

				$sp = Doctrine::getTable('Sapsymptom')->find($_GET['id']);
				$sp->create_date = $olddate;
				$sp->save();

				//update in patient course
				$qa = Doctrine_Query::create()
					->update('PatientCourse')
					->set('done_date', '?', $olddate)
					->where('ipid = ?', $ipid)
					->andWhere('done_name = AES_ENCRYPT("sapvfb3", "' . Zend_Registry::get('salt') . '")')
					->andWhere('done_id = ?', $_REQUEST['id']);
				$qa->execute();

				$response = array();
				$response['time'] = date('H:i', strtotime($_GET['tim']));

				echo json_encode($response);
				exit;
			}
		}

		public function privatrezeptAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$this->view->loguserid = $logininfo->userid;
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ######################################################### */

			$this->view->frmb3class = "active";
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$unamecd = $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();

			$this->view->bdate = $patientinfo['birthd'];
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			unset($_SESSION['rcfolder'], $_SESSION['display_stamp'], $_SESSION['medicationtxt'], $_SESSION['userstamp1'], $_SESSION['userstamp2'], $_SESSION['userstamp3'], $_SESSION['userstamp4'], $_SESSION['userstamp5'], $_SESSION['userstamp6'], $_SESSION['userstamp7'], $_SESSION['btnopen'], $_SESSION['btnsave'], $_SESSION['newtab'], $_SESSION['newtab'], $_SESSION['btnsave']);

			$ustamp = new UserStamp();
			$userstatmp = $ustamp->getLastUserStamp($logininfo->userid);

			$this->view->userstamp1 = $userstatmp[0]['row1'];
			$this->view->userstamp2 = $userstatmp[0]['row2'];
			$this->view->userstamp3 = $userstatmp[0]['row3'];
			$this->view->userstamp4 = $userstatmp[0]['row4'];
			$this->view->userstamp5 = $userstatmp[0]['row5'];
			$this->view->userstamp6 = $userstatmp[0]['row6'];
			$this->view->userstamp7 = $userstatmp[0]['row7'];

			if(strlen($_POST['btnsave']) > 0)
			{
				$this->view->userstamp1 = $_POST['stamprow1'];
				$this->view->userstamp2 = $_POST['stamprow2'];
				$this->view->userstamp3 = $_POST['stamprow3'];
				$this->view->userstamp4 = $_POST['stamprow4'];
				$this->view->userstamp5 = $_POST['stamprow5'];
				$this->view->userstamp6 = $_POST['stamprow6'];
				$this->view->userstamp7 = $_POST['stamprow7'];
				$this->view->medicationtext = $_POST['medication'];

				unset($_SESSION['rcfolder'], $_SESSION['display_stamp'], $_SESSION['medicationtxt'], $_SESSION['userstamp1'], $_SESSION['userstamp2'], $_SESSION['userstamp3'], $_SESSION['userstamp4'], $_SESSION['userstamp5'], $_SESSION['userstamp6'], $_SESSION['userstamp7'], $_SESSION['btnopen'], $_SESSION['btnsave'], $_SESSION['newtab'], $_POST['btnsave'], $_SESSION['newtab']);
				$_SESSION['filepass'] = $logininfo->filepass;
				$_SESSION['clientid'] = $logininfo->clientid;

				$pdf = new Pms_PDF();
				$_SESSION['rcfolder'] = $pdf->uniqfolder(PDF_PATH);

				$_SESSION['ftp_file_name'] = $_SESSION['rcfolder'] . "/privatrezept.pdf";
				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt('Privatrezept');
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['rcfolder'] . "/privatrezept.pdf"); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();
				$_SESSION['btnsave'] = 'save';

				$_SESSION['id'] = $_GET['id'];
				$_SESSION['display_stamp'] = $_POST['printstamp'];
				$_SESSION['medicationtxt'] = $_POST['medication'];
				$_SESSION['stamp'] = $_POST['stamprow1'] . "\n" . $_POST['stamprow2'] . "\n" . $_POST['stamprow3'] . "\n" . $_POST['stamprow4'] . "\n" . $_POST['stamprow5'] . "\n" . $_POST['stamprow6'] . "\n" . $_POST['stamprow7'];

				$this->_redirect('pdfrezeptdruck/pdf-privatrezept.php');
			}

			if(strlen($_POST['hdnbtnopen']) > 0)
			{
				$this->view->userstamp1 = $_POST['stamprow1'];
				$this->view->userstamp2 = $_POST['stamprow2'];
				$this->view->userstamp3 = $_POST['stamprow3'];
				$this->view->userstamp4 = $_POST['stamprow4'];
				$this->view->userstamp5 = $_POST['stamprow5'];
				$this->view->userstamp6 = $_POST['stamprow6'];
				$this->view->userstamp7 = $_POST['stamprow7'];
				$this->view->medicationtext = $_POST['medication'];

				unset($_SESSION['rcfolder'], $_SESSION['display_stamp'], $_SESSION['medicationtxt'], $_SESSION['userstamp1'], $_SESSION['userstamp2'], $_SESSION['userstamp3'], $_SESSION['userstamp4'], $_SESSION['userstamp5'], $_SESSION['userstamp6'], $_SESSION['userstamp7'], $_SESSION['btnopen'], $_SESSION['btnsave'], $_SESSION['newtab'], $_POST['btnopen'], $_SESSION['newtab']);

				$_SESSION['filepass'] = $logininfo->filepass;
				$_SESSION['clientid'] = $logininfo->clientid;
				
				$pdf = new Pms_PDF();
				$_SESSION['rcfolder'] = $pdf->uniqfolder(PDF_PATH);
				$_SESSION['ftp_file_name'] = $_SESSION['rcfolder'] . "/privatrezept.pdf";
				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt('Privatrezept');
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['rcfolder'] . "/privatrezept.pdf"); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();

				$_SESSION['btnopen'] = 'open';
				$_SESSION['id'] = $_GET['id'];
				$_SESSION['display_stamp'] = $_POST['printstamp'];
				$_SESSION['medicationtxt'] = $_POST['medication'];
				$_SESSION['stamp'] = $_POST['stamprow1'] . "\n" . $_POST['stamprow2'] . "\n" . $_POST['stamprow3'] . "\n" . $_POST['stamprow4'] . "\n" . $_POST['stamprow5'] . "\n" . $_POST['stamprow6'] . "\n" . $_POST['stamprow7'];

				$this->_redirect('pdfrezeptdruck/pdf-privatrezept.php');
			}
		}

		public function setoverviewcookieAction()
		{
			$this->_helper->viewRenderer->setNoRender();
			$this->_helper->layout->disableLayout();

			$cookie = $_GET['ck'];
			$oc = new Application_Form_OverviewCookie();
			$a_post['cookie'] = $cookie;
			$a_post['page_name'] = "overview";
			$oc->InsertData($a_post);
		}

		public function deletedpatientlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('deletedpatient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}
		}

		public function fetchdeletedlistAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$hidemagic = Zend_Registry::get('hidemagic');
			$this->view->hidemagic = $hidemagic;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('deletedpatient', $logininfo->userid, 'canview');

			if(!$return)
			{
				$this->_redirect(APP_BASE . "error/previlege");
			}

			$columnarray = array("pk" => "p.id", "fn" => "p.first_name", "ln" => "p.last_name", "ad" => "p.admission_date", "ledt" => "p.change_date", "bd" => "p.birthd", 'ed' => 'epid_num');
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");

			$this->view->{"style" . $_GET['pgno']} = "active";
			$this->view->order = $orderarray[$_GET['ord']];

			$this->view->{$_GET['clm'] . "order"} = $orderarray[$_GET['ord']];
			$patient = Doctrine_Query::create()
				->select('count(*)')
				->from('PatientMaster p')
				->leftJoin("p.EpidIpidMapping e")
				->leftJoin("e.PatientQpaMapping q")
				->where("p.isdelete = 1");
			if($logininfo->usertype != 'SA')
			{
				$patient->andWhere('q.clientid =e.clientid and q.clientid = ' . $logininfo->clientid . ' and q.userid = ' . $logininfo->userid);
			}
			else
			{
				$patient->andWhere('q.clientid =e.clientid and q.clientid = ' . $logininfo->clientid);
			}

			$patientexec = $patient->execute();
			$patientarray = $patientexec->toArray();

			$limit = 50;
			$sql = "p.*, e.*, p.ipid, e.epid, p.birthd, p.admission_date, p.change_date, p.last_update,";
			$sql .= "CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(p.title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(p.salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(p.mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1)  as gensex";

			if($logininfo->usertype == 'SA' && $logininfo->showinfo != 'show')
			{
				$sql = "p.*,e.*";
				$sql .= ",'" . $hidemagic . "' as first_name";
				$sql .=",'" . $hidemagic . "' as middle_name";
				$sql .= ",'" . $hidemagic . "' as last_name";
				$sql .= ",'" . $hidemagic . "' as title";
				$sql .= ",'" . $hidemagic . "' as salutation";
				$sql .= ",'" . $hidemagic . "' as street1";
				$sql .= ",'" . $hidemagic . "' as street2";
				$sql .= ",'" . $hidemagic . "' as zip";
				$sql .= ",'" . $hidemagic . "' as city";
				$sql .= ",'" . $hidemagic . "' as phone";
				$sql .= ",'" . $hidemagic . "' as mobile";
				$sql .= ",'" . $hidemagic . "' as sex";
			}

			$patient->select($sql);
			$patient->limit($limit);
			$patient->orderBy($columnarray[$_GET['clm']] . " " . $_GET['ord']);
			$patient->offset($_GET['pgno'] * $limit);
// 		echo $patient->getSqlQuery();exit;
			$patientlimitexec = $patient->execute();
			$patientlimit = $patientlimitexec->toArray();

			$client_users_q = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete = 0')
				->andWhere('clientid = "' . $clientid . '"');
			$client_users_arr = $client_users_q->fetchArray();

			foreach($client_users_arr as $k_qpa => $v_qpa)
			{
				$users_details[$v_qpa['id']]['first_name'] = $v_qpa['first_name'];
				$users_details[$v_qpa['id']]['last_name'] = $v_qpa['last_name'];
			}

			$grid = new Pms_Grid($patientlimit, 1, $patientarray[0]['count'], "listdeletedpatient.html");
			$grid->users_details = $users_details;
			$this->view->patientgrid = $grid->renderGrid();
			$this->view->navigation = $grid->dotnavigation("deletedpatientnavigation.html", 5, $_GET['pgno'], $limit);


			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['patientlist'] = $this->view->render('patientform/fetchdeletedlist.html');

			echo json_encode($response);
			exit;
		}

		private function get_months($date1, $date2, $format = false)
		{
			$time1 = strtotime(date('Y-m', strtotime($date1) . "-01"));
			$time2 = strtotime($date2);
			$my = date('mY', $time2);

			while($time1 < $time2)
			{
				if(!in_array(date('Ym', $time1), $months))
				{
					if($format === true)
					{
						$months[date('Ym', $time1)] = date('m.Y', $time1);
					}
					else
					{
						$months[] = date('Ym', $time1);
					}
				}
				$time1 = strtotime(' +1 month', $time1);
			}
			if(!in_array(date('Ym', $time2), $months))
			{
				if($format === true)
				{
					$months[date('Ym', $time2)] = date('m.Y', $time2);
				}
				else
				{
					$months[] = date('Ym', $time2);
				}
			}
			return $months;
		}

		private function get_period_months($date1, $date2, $format = "Ym")
		{
			$time1 = strtotime(date('Y-m', strtotime($date1) . "-01")); //
			$time2 = strtotime($date2);
			$my = date('mY', $time2);

			while($time1 < $time2)
			{
				if(!in_array(date($format, $time1), $months))
				{
					$months[] = date($format, $time1);
				}
				$time1 = strtotime(' +1 month', $time1);
			}

			if(!in_array(date($format, $time2), $months))
			{
				$months[] = date($format, $time2);
			}
			return $months;
		}

		public function participationAction()
		{
			/* ######################################################### */
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userinfo = Pms_CommonData::getUserData($logininfo->userid);
			$clientinfo = Pms_CommonData::getClientData($logininfo->clientid);
			$ipid = Pms_CommonData::getIpid($decid);
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			$clientarr = Pms_CommonData::getClientData($logininfo->clientid);
			$this->view->clientname = $clientarr[0]['client_name'];
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ######################################################### */

// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			$this->view->pat_name = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->pat_street = $parr['street1'];
			$this->view->pat_zipcity = $parr['zip'] . " " . $parr['city'];
			$this->view->pat_birthd = $parr['birthd'];

			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($parr['ipid']);
			$pat_healthinsurance = $healthinsu_array[0]['insurance_no'] . ' / ' . $healthinsu_array[0]['company_name'];
			$this->view->pat_healthinsurance = $pat_healthinsurance;

			if(strlen($_POST['btnsubmit']) > 0)
			{
				$post = $_POST;
				$this->generateformPdf(3, $post, 'Teilnahmeerklarung', "participationpdf.html");
			}
		}

		public function reassessmentAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->patid = $decid;
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$userid = $logininfo->userid;
			$this->view->pid = $_GET['id'];

			/*			 * ******************************************* */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			$reassesmentprv = new Modules();
			$reass_mod = $reassesmentprv->checkModulePrivileges("56", $logininfo->clientid);

			if(!$reass_mod)
			{

			}

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->birthd = $parr['birthd'];

			//IK Client Number start
			$clientq = new Client();
			$clientdata = $clientq->getClientDataByid($clientid);
			$this->view->iknumber = $clientdata[0]['institutskennzeichen'];
			$this->view->fill_date = date('d.m.Y');

			// get symptomatics values( last enterd values)
			$symp = new Symptomatology();
			$symptomarr_ext = $symp->getPatientSymptpomatologyLastEntered($ipid);
			$sypmt = array();
			foreach($symptomarr_ext as $key => $val)
			{
				if($val['value'] == "0")
				{
					$sypmt[$key] = "1";
				}
				else if($val['value'] == "1" || $val['value'] == "2" || $val['value'] == "3")
				{
					$sypmt[$key] = "2";
				}
				else if($val['value'] == "4" || $val['value'] == "5" || $val['value'] == "6")
				{
					$sypmt[$key] = "3";
				}
				else if($val['value'] == "7" || $val['value'] == "8" || $val['value'] == "9" || $val['value'] == "10")
				{
					$sypmt[$key] = "4";
				}
				else
				{
					$sypmt[$key] = "";
				}
			}
			//	var_dump($sypmt); exit;
			//Angste / Sorgen:
			$this->view->depresiv = $sypmt[12];
			$this->view->angst = $sypmt[13];
			$this->view->anspannung = $sypmt[14];
			$this->view->desorientier = $sypmt[15];

			//Hilfsbedurftigkeit:
			$this->view->dekubitus = $sypmt[10];
			$this->view->hilfebedarf = $sypmt[11];
			$this->view->versorgung = $sypmt[16];
			$this->view->umfelds = $sypmt[17];

			//Vigilanz
			//Schmerzen:
			$this->view->schmerzen = $sypmt[1];

			//Andere schwerwiegende Symptome:
			$this->view->ubelkeit = $sypmt[2];
			$this->view->erbrechen = $sypmt[4];
			$this->view->luftnot = $sypmt[5];
			$this->view->verstopfung = $sypmt[6];
			$this->view->swache = $sypmt[7];
			$this->view->appetitmangel = $sypmt[8];

			//save data post procedure start
			if($this->getRequest()->isPost())
			{
				if(strlen($_POST['btnsave']) > 0)
				{
					$_POST['patientname'] = $this->view->patientname;
					$_POST['birthd'] = $this->view->birthd;

					$htmlform = Pms_Template::createTemplate($_POST, 'templates/reassessmentpdf.html');
					$pdfname = "Re-Assessment";
					$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
					$pdf->setDefaults(true); //defaults with header
					$pdf->setImageScale(1.6);
					$pdf->SetMargins(10, 5, 10); //reset margins
					$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

					$pdf->setHTML($html);

					//$tmpstmp = substr(md5(time() . rand(0, 999)), 0, 12);
					//mkdir('uploads/' . $tmpstmp);
					$tmpstmp = $pdf->uniqfolder(PDF_PATH);
					
					$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');

					$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
					
					/*
					$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
					exec($cmd);
					$zipname = $tmpstmp . ".zip";
					$filename = "uploads/" . $tmpstmp . ".zip";
					$con_id = Pms_FtpFileupload::ftpconnect();

					if($con_id)
					{
						$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
						Pms_FtpFileupload::ftpconclose($con_id);
					}
					*/
					$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
						

					$cust = new PatientFileUpload ();
					$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdfname));
					$cust->ipid = $ipid;
					$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
					$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					$cust->system_generated = "1";
					$cust->save();
					$recordid = $cust->id;

					$custcourse = new PatientCourse();
					$custcourse->ipid = $ipid;
					$custcourse->course_date = date("Y-m-d H:i:s", time());
					$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					$comment = "Re-Assessment Formular wurde angelegt ";
					$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					$custcourse->user_id = $userid;
					$custcourse->recordid = $recordid;
					$custcourse->tabname = Pms_CommonData::aesEncrypt('reassesment');
					$custcourse->save();
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
			}

			//pdf procedure -> button is hidden now
			if(strlen($_POST['btnsubmit']) > 0)
			{
				$_POST['patientname'] = $this->view->patientname;
				$_POST['birthd'] = $this->view->birthd;

				$htmlform = Pms_Template::createTemplate($_POST, 'templates/reassessmentpdf.html');
				$pdfname = "Re-Assessment";
				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
				$pdf->setDefaults(true); //defaults with header
				$pdf->setImageScale(1.6);
				$pdf->SetMargins(10, 5, 10); //reset margins
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

				$pdf->setHTML($html);
				
// 				$tmpstmp = substr(md5(time() . rand(0, 999)), 0, 12);
// 				mkdir('uploads/' . $tmpstmp);

				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');



				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();

				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				

				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdfname));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();

				$cust = new PatientCourse ();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Re-Assessment Formular wurde erstellt.'));
				$cust->user_id = $logininfo->userid;
				$cust->save();

				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}
		}

		public function uservisitsAction($params = array())
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$this->view->patid = $decid;
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$userid = $logininfo->userid;
			$this->view->pid = $_REQUEST['id'];
			$patientmaster = new PatientMaster();
			$this->view->patient_details = $patientmaster->getMasterData($decid, 0);

			if($this->getRequest()->isPost() && $_POST['print'] == '1')
			{
				$this->_helper->layout->setLayout('layout_popup');
			}
			else
			{
				$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
				$tm = new TabMenus();
				$this->view->tabmenus = $tm->getMenuTabs();
			}

//		1. set current ipid
			$ipidarr = array($ipid);

//		2. patqpamap => userids
			$assigned_users[] = '999999999999';
			$qpa_mapping = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete = 0')
				->andWhere('clientid = "' . $clientid . '"');
			$qpa_map_arr = $qpa_mapping->fetchArray();

			foreach($qpa_map_arr as $k_qpa => $v_qpa)
			{
				$assigned_users[] = $v_qpa['id'];
			}

//		3. get client users details => this becomes a query for user details only
			$userlist = Doctrine_Query::create()
				->select('*')
				->from('User')
				->whereIn('id', $assigned_users)
				->andWhere('isdelete=0');
			$client_users = $userlist->fetcharray();

			foreach($client_users as $k_client_user => $v_client_user)
			{
				$client_users_details[$v_client_user['id']] = $v_client_user;
			}

//		4. get deleted visits
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"')
				->andWhereIn('ipid', $ipidarr)
				->andWhere('source_ipid = ""');
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			if($_REQUEST['dbg'] == '1')
			{

				print_r("deleted visits");
				print_r($deleted_visits->getSqlQuery());
				print_r($del_visits);
				print_r("\n");
			}

//		4.1 get kvno doctor visits -- Nordhein doctor visits
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("id, ipid, kvno_begin_date_h, kvno_begin_date_m, vizit_date as visit_date, quality, create_date, create_user")
				->from("KvnoDoctor")
				->whereIn('ipid', $ipidarr)
				->andWhereIn('create_user', $assigned_users)
				->andWhereNotIn('id', $del_visits['kvno_doctor_form']);
			$kvno_doc_visits = $kvno_doctor_visits->fetchArray();

			if($_REQUEST['dbg'] == '1')
			{

				print_r("doctor visits");
				print_r($kvno_doc_visits);
				print_r("\n");
			}
//		4.2 get kvno nurse visits -- Nordhein user visits
			$knurse_visits = Doctrine_Query::create()
				->select("id, ipid, kvno_begin_date_h, kvno_begin_date_m, vizit_date as visit_date, quality, create_date, create_user")
				->from("KvnoNurse")
				->whereIn('ipid', $ipidarr)
				->andWhereIn('create_user', $assigned_users)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form']);
			$kvno_nurse_visits = $knurse_visits->fetchArray();

			if($_REQUEST['dbg'] == '1')
			{

				print_r("nurse visits");
				print_r($kvno_nurse_visits);
				print_r("\n");
			}

//		4.3 get kvno coordinator visits -- Nordhein user visits LE: 13.11.2012 ancuta warn
			$coord_visits = Doctrine_Query::create()
				->select("id, ipid, visit_begin_date_h as kvno_begin_date_h, visit_begin_date_m as kvno_begin_date_m, visit_date, quality, create_date, create_user")
				->from("VisitKoordination")
				->whereIn('ipid', $ipidarr)
				->andWhereIn('create_user', $assigned_users)
				->andWhereNotIn('id', $del_visits['visit_koordination_form']);
			$c_visits = $coord_visits->fetchArray();

			foreach($c_visits as $k_coord_visits => $v_coord_visits)
			{
				$coordinator_visits[$k_coord_visits] = $v_coord_visits;
				$coordinator_visits[$k_coord_visits]['tabname'] = 'koord_visits';
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("coordinator visits");
				var_dump($coordinator_visits);
				print_r("\n");
			}

			$global_visits = array();

			if(!$coordinator_visits)
			{
				$global_visits = array_merge($global_visits, $kvno_doc_visits, $kvno_nurse_visits);
			}
			else
			{
				$global_visits = array_merge($global_visits, $kvno_doc_visits, $kvno_nurse_visits, $coordinator_visits);
			}

			$patient_ipids[] = '99999999999999999';
			$visit_incr = '0';
			foreach($global_visits as $k_visit => $v_visit)
			{
				$available_visits[$v_visit['create_user']][$visit_incr] = $v_visit;
				$available_visits[$v_visit['create_user']][$visit_incr]['visit_date'] = date('d.m.Y', strtotime($v_visit['visit_date'])) . ' ' . str_pad($v_visit['kvno_begin_date_h'], 2, 0, STR_PAD_LEFT) . ':' . str_pad($v_visit['kvno_begin_date_m'], 2, 0, STR_PAD_LEFT);
				$patient_ipids[] = $v_visit['ipid'];
				$available_users[] = $v_visit['create_user'];
				$visit_incr++;
			}

//		5.1 get beratung (verlauf)
			$beratung = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong!=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("U")) . '"')
				->andWhereIn('ipid', $ipidarr)
				->andWhere('source_ipid = ""')
				->andWhereIn('create_user', $assigned_users)
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$beratung_array = $beratung->fetchArray();

			foreach($beratung_array as $k_beratung => $v_beratung)
			{
				$patient_ipids[] = $v_beratung['ipid'];
				$available_users[] = $v_beratung['create_user'];
				$global_beratung[$v_beratung['create_user']][] = $v_beratung;
			}

//		5.2 get koordination (verlauf)
			$koord = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong!=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("V")) . '"')
				->andWhereIn('ipid', $ipidarr)
				->andWhereIn('create_user', $assigned_users)
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$koord_array = $koord->fetchArray();

			foreach($koord_array as $k_koord => $v_koord)
			{
				$patient_ipids[] = $v_koord['ipid'];
				$available_users[] = $v_koord['create_user'];
				$global_koord[$v_koord['create_user']][] = $v_koord;
			}

//		5.3 get telefonat (xt verlauf)
			$tel = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong!=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("XT")) . '"')
				->andWhereIn('ipid', $ipidarr)
				->andWhereIn('create_user', $assigned_users)
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$tel_array = $tel->fetchArray();

			foreach($tel_array as $k_tel => $v_tel)
			{
				$patient_ipids[] = $v_tel['ipid'];
				$available_users[] = $v_tel['create_user'];
				$global_tel[$v_tel['create_user']][] = $v_tel;
			}

//		6. get patient details
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdelete = 0')
				->andWhereIn('ipid', $patient_ipids);
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $k_pat_details => $v_pat_details)
			{
				$pat_details[$v_pat_details['ipid']] = $v_pat_details;
			}

			$available_users = array_values(array_unique($available_users));

			$visit_inc = '0';
			foreach($available_users as $kk_user => $vv_user)
			{
				$sums[$client_users_details[$vv_user]['username']]['visit'][1] = '0';
				$sums[$client_users_details[$vv_user]['username']]['visit'][2] = '0';
				$sums[$client_users_details[$vv_user]['username']]['visit'][3] = '0';
				foreach($available_visits[$vv_user] as $k_row_visit => $v_row_visit)
				{
					$user_rows[$vv_user][$visit_inc] = $v_row_visit;

					$visit_type = '';
					if($_REQUEST['dbg'])
					{
						if(!empty($v_row_visit['tabname']))
						{
							$visit_type = ' - ' . $v_row_visit['tabname'];
						}
					}

					$user_rows[$vv_user][$visit_inc]['action'] = 'visit_action';
					$user_rows[$vv_user][$visit_inc]['patientname'] = strtoupper($pat_details[$v_row_visit['ipid']]['EpidIpidMapping']['epid']);
					$user_rows[$vv_user][$visit_inc]['epid'] = strtoupper($pat_details[$v_row_visit['ipid']]['EpidIpidMapping']['epid']);
					$user_rows[$vv_user][$visit_inc]['row_date'] = $pat_details[$v_row_visit['ipid']]['last_name'] . ' ' . $pat_details[$v_row_visit['ipid']]['first_name'] . ' (' . strtoupper($pat_details[$v_row_visit['ipid']]['EpidIpidMapping']['epid']) . ') - ' . date('d.m.Y H:i', strtotime($v_row_visit['visit_date'])) . $visit_type;

					$visit_inc++;
					if($v_row_visit['quality'] == '0')
					{
						$sums[$client_users_details[$vv_user]['username']]['visit'][2] ++;
					}
					else
					{
						$sums[$client_users_details[$vv_user]['username']]['visit'][$v_row_visit['quality']] ++;
					}
				}

				$sums[$client_users_details[$vv_user]['username']]['beratung'] = '0';
				foreach($global_beratung[$vv_user] as $k_row_beratung => $v_row_beratung)
				{
					$user_rows[$vv_user][$visit_inc] = $v_row_beratung;
					$user_rows[$vv_user][$visit_inc]['action'] = 'beratung_action';
					$user_rows[$vv_user][$visit_inc]['epid'] = strtoupper($pat_details[$v_row_beratung['ipid']]['EpidIpidMapping']['epid']);
					$user_rows[$vv_user][$visit_inc]['row_date'] = $pat_details[$v_row_visit['ipid']]['last_name'] . ' ' . $pat_details[$v_row_beratung['ipid']]['first_name'] . ' (' . strtoupper($pat_details[$v_row_beratung['ipid']]['EpidIpidMapping']['epid']) . ') - ' . date('d.m.Y H:i', strtotime($v_row_beratung['course_date']));
					$sums[$client_users_details[$vv_user]['username']]['beratung'] ++;
					$visit_inc++;
				}

				$sums[$client_users_details[$vv_user]['username']]['koord'] = '0';
				foreach($global_koord[$vv_user] as $k_row_koord => $v_row_koord)
				{
					$user_rows[$vv_user][$visit_inc] = $v_row_koord;
					$user_rows[$vv_user][$visit_inc]['action'] = 'koord_action';
					$user_rows[$vv_user][$visit_inc]['epid'] = strtoupper($pat_details[$v_row_koord['ipid']]['EpidIpidMapping']['epid']);
					$user_rows[$vv_user][$visit_inc]['row_date'] = $pat_details[$v_row_koord['ipid']]['last_name'] . ' ' . $pat_details[$v_row_koord['ipid']]['first_name'] . ' (' . strtoupper($pat_details[$v_row_koord['ipid']]['EpidIpidMapping']['epid']) . ') - ' . date('d.m.Y H:i', strtotime($v_row_koord['course_date']));
					$sums[$client_users_details[$vv_user]['username']]['koord'] ++;
					$visit_inc++;
				}

				$sums[$client_users_details[$vv_user]['username']]['tel'] = '0';
				foreach($global_tel[$vv_user] as $k_row_tel => $v_row_tel)
				{
					$course_arr = explode("|", $v_row_tel['course_title']);
					$user_rows[$vv_user][$visit_inc] = $v_row_tel;
					$user_rows[$vv_user][$visit_inc]['action'] = 'tel_action';
					$user_rows[$vv_user][$visit_inc]['epid'] = strtoupper($pat_details[$v_row_tel['ipid']]['EpidIpidMapping']['epid']);
					$user_rows[$vv_user][$visit_inc]['row_date'] = $pat_details[$v_row_tel['ipid']]['last_name'] . ' ' . $pat_details[$v_row_tel['ipid']]['first_name'] . ' (' . strtoupper($pat_details[$v_row_tel['ipid']]['EpidIpidMapping']['epid']) . ') - ' . date('d.m.Y H:i', strtotime($v_row_tel['course_date']));
					$sums[$client_users_details[$vv_user]['username']]['tel'] ++;
					$visit_inc++;
				}
				$visit_inc = '0';
			}

			foreach($available_users as $k_user => $v_user)
			{
				$master_data['data'][$v_user]['username'] = $client_users_details[$v_user]['username'];
				$master_data['data'][$v_user]['rows'] = $user_rows[$v_user];
				$master_data['extra'] = $sums;
			}

			$this->view->master_data = $master_data;
		}

		public function sapvquestionnaireAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpidFromId($decid);

			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->patid = $decid;
			$this->view->enc_patid = $_REQUEST['id'];

			
			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge
			{
			    $acknowledge = "1";
			    $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			    $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$sapvq = new SapvQuestionnaire();

			if($_REQUEST['qid'])
			{
				$sapvq_res = $sapvq->get_sapv_questionarie($_REQUEST['qid']);
			}
			else
			{
				$sapvq_res = $sapvq->getPatientSapvQuestionnaire($ipid);
				// force to edit first one - just one needed
				$_REQUEST['qid'] = $sapvq_res['0']['id'];
			}
			$this->retainValues($sapvq_res['0']);
			/* ------------------------------------------------ */

			/* ------------------------------ SAVE FORM BEFORE DISPLAY --------------------------------- */
			if($this->getRequest()->isPost() && strlen($_POST['pdf_export']) == 0)
			{
			    
			    if($acknowledge =="1")
			    {
			        $_POST['skip_trigger'] = "1";
			    }
			    
				/* ----------------Patient save diagnosis -------------------------------------- */
				$pat_diagnosis = new Application_Form_PatientDiagnosis();
				$diagno_text = new Application_Form_DiagnosisText();
//			print_r($_POST);exit;
				$a_post = $_POST;
				$a_post['clientid'] = $clientid;
				$a_post['ipid'] = $ipid;

//			for($i = 1; $i <= sizeof($_POST['diagnosis']); $i++)
				foreach($_POST['diagnosis'] as $k_i => $diagnosis_value)
				{
					if(strlen($diagnosis_value) > 0 && strlen($_POST['hidd_diagnosis'][$k_i]) < 1)
					{
						$a_post['newdiagnosis'][$k_i] = $diagnosis_value;
						$a_post['newdiagnosistype'][$k_i] = $_POST['dtype'][$k_i];
						$a_post['newdiagnosisicd'][$k_i] = $_POST['icdnumber'][$k_i];
					}
				}

				if(is_array($a_post['newdiagnosis']))
				{
					$dt = $diagno_text->InsertEditData($a_post);

					foreach($dt as $key => $val)
					{
						$a_post['newhidd_diagnosis'][$key] = $val['id'];
					}
				}

				for($i = 1; $i <= sizeof($_POST['diagnosis_ed']); $i++)
				{
					if(strlen($_POST['diagnosis_ed'][$i]) > 0 && strlen($_POST['hidd_diagnosis_ed'][$i]) < 1)
					{
						$a_post['newdiagnosis_ed'][$i] = $_POST['diagnosis_ed'][$i];
						$a_post['newdiagnosistype_ed'][$i] = $_POST['dtype_ed'][$i];
					}
				}

				if(is_array($a_post['newdiagnosis_ed']))
				{
					$dt = $diagno_text->Insert_EdData($a_post);

					foreach($dt as $key => $val)
					{
						$a_post['newhidd_diagnosis_ed'][$key] = $val['id'];
					}
				}

				/* ----------------Patient save diagnosis -------------------------------------- */
				$pat_diagnosis->UpdateData($a_post);

				$dm_form = new Application_Form_PatientDiagnosisMeta();
				$dm_form->UpdateData($a_post);

				/* ----------------Patient save medications -------------------------------------- */
				$patient_medication_form = new Application_Form_Medication();
				for($i = 1; $i <= count($_POST['medication']); $i++)
				{
					if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
					{
						$a_post['newmids'][$i] = $_POST['drid'][$i];
						$a_post['newmedication'][$i] = $_POST['medication'][$i];
					}
				}

				if(is_array($a_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($a_post);

					foreach($dts as $key => $dt)
					{
						$a_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form = new Application_Form_PatientDrugPlan();
				$med_form->UpdateMultiData($a_post);
				//medication edit procedure end
				//
			//medication add procedure start
				$med_form = new Application_Form_PatientDrugPlan();
				$patient_medication_form = new Application_Form_Medication();

				$add_post = $_POST['add'];
				$add_post['ipid'] = $ipid;
				$add_post['isbedarfs'] = 0;

				foreach($add_post['medication'] as $key => $val)
				{
					if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
					{
						$add_post['newmedication'][$key] = $add_post['medication'][$key];
					}
				}

				if(is_array($add_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($add_post);

					foreach($dts as $key => $dt)
					{
						$add_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form->InsertMultiData($add_post);

				if(count($_POST['addbedarf']) > 0)
				{
					$med_form = new Application_Form_PatientDrugPlan();
					$add_post = $_POST['addbedarf'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 1;

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}


					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);

						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					/* ------------------------------------------------ */
					$med_form->InsertMultiData($add_post);
				}

				if(count($_POST['addiv']) > 0)
				{
					$med_form = new Application_Form_PatientDrugPlan();

					$add_post = $_POST['addiv'];
					$add_post['ipid'] = $ipid;
					$add_post['isivmed'] = 1;
					$add_post['verordnetvon'] = $_POST['verordnetvon'];

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}

					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);
						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}
					/* ------------------------------------------------ */
					$med_form->InsertMultiData($add_post);
				}
				/* ----------------Patient save medications -------------------------------------- */

				/* ----------------Patient save sapv questionaire -------------------------------------- */
				$init = new Application_Form_SapvQuestionnaire();

				if($_REQUEST['qid'])
				{
					$result = $init->updateSapvQuestionnaire($_POST, $_REQUEST['qid'], $ipid, $userid);
				}
				else
				{
					$result = $init->insertSapvQuestionnaire($_POST, $ipid, $userid);
				}

				if($result)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
				}
				/* ----------------Patient save sapv questionaire -------------------------------------- */
			}

			/* ----------------Patient general details-------------------------------------- */
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();
			$this->view->patient_lname = $patientinfo['last_name'];
			$this->view->patient_fname = $patientinfo['first_name'];
			$this->view->patient_birthd = $patientinfo['birthd'];

			if(strlen($patientinfo['street1']) > 0)
			{
				$patient_address.= $patientinfo['street1'] . "\n";
			}
			if(strlen($patientinfo['zip']) > 0)
			{
				$patient_address.= $patientinfo['zip'] . ', ';
			}

			if(strlen($patientinfo['city']) > 0)
			{
				$patient_address.= $patientinfo['city'];
			}

			$this->view->patient_address = $patient_address;

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* ----------------Patient HealthInsurance details-------------------------------------- */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if($phi)
			{
				$health_insurance = $phi[0]['company_name'];
				$this->view->patient_health_insurance = $health_insurance;
			}
			else
			{
				$this->view->patient_health_insurance = '';
			}

			/* ----------------Patient - Pflegestufe -------------------------------------- */
			$pms = new PatientMaintainanceStage();
			$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);

			$this->view->stage = $pat_pms[0]['stage'];
			$this->view->erstantrag = $pat_pms[0]['erstantrag'];
			$this->view->horherstufung = $pat_pms[0]['horherstufung'];

			$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
			$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
			$this->view->carelevellist = $grid->renderGrid();

			/* ----------------Patient - Family doctor -------------------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($patientinfo['familydoc_id']);

			if($docarray)
			{
				$this->view->familydoctor = 1;
			}
			else
			{
				$this->view->familydoctor = 0;
			}

			/* ----------------Patient - Pflegedienst -------------------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($ipid);

			if($ppflearray)
			{
				$this->view->pflegedienst = 1;
			}
			else
			{
				$this->view->pflegedienst = 0;
			}

			/* ----------------Patient - Contact person -------------------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->get2PatientContact($ipid);
			if($pcs)
			{
				$this->view->contactperson = 1;
			}
			else
			{
				$this->view->contactperson = 0;
			}

			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);

			/* ----------------Patient - Ambulanter Hospizdienst -------------------------------------- */
			$hp_assoc = new PatientHospiceassociation ();
			$hp_assoc_array = $hp_assoc->getPatientHospiceassociation($ipid);

			if($hp_assoc_array)
			{
				$this->view->hospizdienst = 1;
			}
			else
			{
				$this->view->hospizdienst = 0;
			}

			/* ----------------Patient - Main diagnosis------------------ */
			$dm = new DiagnosisIcd();
			$this->view->icddiagnosisarr = $dm->getDiagnosisData(1);

			$dm = new DiagnosisMeta();
			$diagnosismeta = $dm->getDiagnosisMetaData(1);

			$this->view->diagnosismeta = $diagnosismeta;
			$this->view->jsdiagnosismeta = json_encode($diagnosismeta);

			$this->view->ipid = $ipid;

			$a_diagno = array();

			$abb = "'HD','ND'";
			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($clientid, $abb);
			$this->view->dtypearray = $darr;
			$this->view->jdarr = json_encode($darr);

			$abb = "'ND'";
			$dg = new DiagnosisType();
			$dsad = $dg->getDiagnosisTypes($clientid, $abb);
			$uptype = $dsad[0]['id'];

			$abb = "'AD'";
			$dg = new DiagnosisType();
			$dad = $dg->getDiagnosisTypes($clientid, $abb);
			$dtype = $dad[0]['id'];

			if($dtype == "")
			{
				$dtype = "0";
			}

			$diagns = new PatientDiagnosis();
			$b_diagno = $diagns->getFinalData($ipid, $dtype);

			foreach($b_diagno as $key => $val)
			{
				if(strlen($val['diagnosis']) > 0)
				{
					$loc = Doctrine_Query::create()
						->update("PatientDiagnosis")
						->set('diagnosis_type_id', "'" . $uptype . "'")
						->where("id='" . $val['pdid'] . "'");
					$loc->execute();
				}
			}

			$diagns = new PatientDiagnosis();
			$main = $diagns->getPatientMainDiagnosis($ipid, "diagnosis_icd");

			/*			 * ******************************************************************************************** */
			$a_diagno = array();
			$comma = ",";
			$ipidval = "'0'";

			if(is_array($darr))
			{
				foreach($darr as $key => $val)
				{
					$ipidval .= $comma . "'" . $val['id'] . "'";
					$comma = ",";
				}
			}

			$diagns = new PatientDiagnosis();
			$a_diagno = $diagns->getFinalData($ipid, $ipidval);
			$diagno_cnt = count($a_diagno);
			
			/*ISPC - 2364 - sorted by user */
			$pdiaord = PatientDiagnoOrderTable::getInstance()->findDiagnoOrder($ipid);
			//RWH - ISPC-950
			//sort by icd
			if(empty($pdiaord))
			{
				$a_diagno = $this->array_sort($a_diagno, 'icdnumber', SORT_ASC);
				$a_diagno = array_values($a_diagno);
			
				//sort by type
				foreach($darr as $k_diag_type => $v_diag_type)
				{
					foreach($a_diagno as $k_diag => $v_diag)
					{
						if($v_diag_type['id'] == $v_diag['diagnosis_type_id'])
						{
							$a_diagno_sorted[] = $v_diag;
						}
					}
				}
				//RWH end
			}
			else
			{
				$a_diagno = array_column($a_diagno, null, 'pdid');
				$pdorder = $pdiaord[0]['diagno_order'];
					
				$diagnaddother = array_diff(array_keys($a_diagno), $pdorder);
				$diagnremoveother = array_diff($pdorder, array_keys($a_diagno));
					
				if($diagnaddother)
				{
					$pdorder = array_merge($pdorder, $diagnaddother);
				}
					
				if($diagnremoveother)
				{
					$pdorder = array_diff($pdorder, $diagnremoveother);
				}
					
				$a_diagno_sorted = [];
				foreach ($pdorder as $pdid) {
					$a_diagno_sorted[] = $a_diagno[$pdid];
				}
			}
			$a_diagno = $a_diagno_sorted;

			if($diagno_cnt < 6)
			{
				for($i = ($diagno_cnt + 1); $i <= 6; $i++)
				{
					$a_diagno[$i]['tabname'] = "";
					$a_diagno[$i]['icdnumber'] = "";
					$a_diagno[$i]['hidd_icdnumber'] = "";
					$a_diagno[$i]['diagnosis'] = "";
					$a_diagno[$i]['pdid'] = "";
					$a_diagno[$i]['hidd_diagnosis'] = "";
					$a_diagno[$i]['diagnosis_type_id'] = "";
					$a_diagno[$i]['meta_title1'] = "";
					$a_diagno[$i]['meta_title2'] = "";
					$a_diagno[$i]['meta_title3'] = "";
				}
			}

			$this->view->jscount = count($a_diagno);
			$meta_data = PatientDiagnosisMeta::getPatientDiagnosismeta($ipid);

			foreach($meta_data as $kx => $mvas_data)
			{
				$meta_diagnosis[$mvas_data['diagnoid']][] = $mvas_data['metaid'];
			}
			$grid = new Pms_Grid($a_diagno, 1, count($a_diagno), "listdiagnosis.html");
			$grid->meta_diagnosis = $meta_diagnosis;
			$grid->gridview->dtypearray = $darr;
			$this->view->diagno = $grid->renderGrid();
			$this->view->rowcount = count($a_diagno);

			$pc = new PatientDiagnosis();
			$maindiagnoarr = $pc->getPatientMainDiagnosis($ipid, "diagnosis_icd");

			if($maindiagnoarr)
			{
				$dt = new DiagnosisIcd();
				$dtarr = $dt->getDiagnosisDataById($maindiagnoarr[0]['diagnosis_id']);
				$this->view->meta_icdnumber = $dtarr[0]['icd_primary'];
				$this->view->meta_diagnosis = $dtarr[0]['id'];
				$this->view->hidd_meta_diagnosis = $maindiagnoarr[0]['id'];
			}

			$dm = new PatientDiagnosisMeta();
			$dmarray = $dm->getPatientDiagnosismeta($ipid);
			if($dmarray)
			{
				$metatitle[0] = $dmarray[0]['metaid'];
				$metatitle[1] = $dmarray[1]['metaid'];
				$metatitle[2] = $dmarray[2]['metaid'];

				$meta_title_hidd[0] = $dmarray[0]['id'];
				$meta_title_hidd[1] = $dmarray[1]['id'];
				$meta_title_hidd[2] = $dmarray[2]['id'];
			}
			$this->view->metatitle = $metatitle;
			$this->view->meta_title_hidd = $meta_title_hidd;

			/* ----------------Patient - Main diagnosis------------------ */

			/* ----------------Patient - Location details-------------------------------------- */

			$hospitalids = Doctrine_Query::create()
				->select("*,(CONVERT(AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') using latin1)) as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type = 1');
			$hosparray = $hospitalids->fetchArray();

			$hosparr[] = "9999999999";
			foreach($hosparray as $hospital)
			{
				$hosparr[] = $hospital['id'];
				$hospital_location_array[$hospital['id']] = $hospital['location'];
			}

			//get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
				->andWhereIn('location_id', $hosparr)
				->orderBy('valid_from DESC')
				->limit('1');
			$patlocationsArr = $patloc->fetchArray();

			if($patlocationsArr)
			{
				$this->view->hospital_location = $hospital_location_array[$patlocationsArr[0]['location_id']];
				if($patlocationsArr[0]['valid_till'] != '' && $patlocationsArr[0]['valid_till'] != '0000-00-00 00:00:00')
				{
					$valid_till = date('d.m.Y', strtotime($patlocationsArr[0]['valid_till']));
				}
				else
				{
					$valid_till = date('d.m.Y');
				}
				$valid_from = date('d.m.Y', strtotime($patlocationsArr[0]['valid_from']));
				$this->view->hospital_period = $valid_from . ' - ' . $valid_till;
			}

			/* ----------------Patient - Medication -------------------------------------------- */
			//medis edit grid procedure start
			if(strlen($_REQUEST['mid']) > 0)
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $userid, 'candelete');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				if($_GET['act'] == "del")
				{

					//delete medication
					$mid = $_GET['mid'];
					$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
					$mod->isdelete = 1;
					$mod->save();
					$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
				}
			}
			$pq = new User();
			$pqarr = $pq->getUserByClientid($clientid);
			$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);

			$this->view->kvnodelicon = "1";

			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));

			$users = $pq->getuserbyidsandGroupId($userval, $groupid, 1);
			
			$this->view->users = $users;
			$this->view->jsusers = json_encode($users);

			//get all client users -> For medis dropdown
			$allUserArray = $pq->getUserByClientid($clientid);
			$userarraylastall[] = $this->view->translate('selectuser');
			foreach($allUserArray as $user)
			{
				$userarraylastall[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
			}
			$this->view->allUsers = $userarraylastall;

			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";




			#######################################
			$medic = new PatientDrugPlan();

			// get bedarf medication
			$medicarr = $medic->getbedarfMedication($decid);

			$medication_master_ids['bedarf'][] = "XXXXXX";
			foreach($medicarr as $k_medicarr => $v_medicarr)
			{
				$medication_master_ids['bedarf'][] = $v_medicarr['medication_master_id'];
			}

			// get active medication
			$medicarr1 = $medic->getMedicationPlan($decid);

			$medication_master_ids['active'][] = "XXXXXX";
			foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
			{
				$medication_master_ids['active'][] = $v_medicarr1['medication_master_id'];
			}


			// get deleted medication
			$medicarr2 = $medic->getDeletedMedication($decid);

			$medication_master_ids['deleted'][] = "XXXXXX";
			foreach($medicarr2 as $k_medicarr2 => $v_medicarr2)
			{
				$medication_master_ids['deleted'][] = $v_medicarr2['medication_master_id'];
			}

			// get iv medication
			$ivarr = $medic->getivMedication($decid);

			$medication_master_ids['ivmed'][] = "XXXXXX";
			foreach($ivarr as $k_ivarr => $v_ivarr)
			{
				$medication_master_ids['ivmed'][] = $v_ivarr['medication_master_id'];
			}

			// get master medication data
			$medication_master_ids = array_merge($medication_master_ids['bedarf'], $medication_master_ids['active'], $medication_master_ids['deleted'], $medication_master_ids['ivmed']);

			$med = new Medication();
			$medarr1 = $med->getMedicationById($medication_master_ids);

			foreach($medarr1 as $k_medarr1 => $v_medarr1)
			{
				$medication_master_array[$v_medarr1['id']] = $v_medarr1;
			}

			// display active medication
			if(count($medicarr1 < 1))
			{
				$this->view->mcntr = 0;
			}

			$medicarr1 = Pms_CommonData::clear_pdf_data($medicarr1);
			$grid_pdf = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit_pdf.html");
			$grid_pdf->medication_master_array = $medication_master_array;
			$this->view->medications_pdf = $grid_pdf->renderGrid();

			$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->medications = $grid->renderGrid();

			// count medication
			$this->view->ajx = 1;
			$this->view->cntr = count($medicarr1);

			// discplay deleted medication
			$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "listdelpatientmedication_ajax.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->delmedications = $grid->renderGrid();


			// count medication
			$this->view->counter = count($medicarr1) + count($medicarr2);

			// display bedarf medication
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationbedarfsedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->bedarfsmedications = $grid->renderGrid();

			$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
			$grid_pdf = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationedit_pdf.html");
			$grid_pdf->medication_master_array = $medication_master_array;
			$this->view->bedarfsmedications_pdf = $grid_pdf->renderGrid();



			//iv medis
			$ivarr = $medic->getivMedication($decid);
			$this->view->counter = count($medicarr1) + count($medicarr) + count($medicarr2);

			$grid_iv = new Pms_Grid($ivarr, 1, (count($medicarr) + count($ivarr) + count($medicarr2)), "listpatientmedicationivedit.html");
			$grid_iv->medication_master_array = $medication_master_array;
			$this->view->ivmedications = $grid_iv->renderGrid();

			$ivarr = Pms_CommonData::clear_pdf_data($ivarr);
			$grid_iv_pdf = new Pms_Grid($ivarr, 1, count($ivarr), "listpatientmedicationedit_pdf.html");
			$grid_iv_pdf->medication_master_array = $medication_master_array;
			$this->view->ivmedications_pdf = $grid_iv_pdf->renderGrid();
			#######################################################
			//medis edit grid procedure end
			//medis add grid procedure start
			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$MasterGroups = array("4", "5", "6");
			$usersgroups = $usergroup->getUserGroups($MasterGroups);

			if(count($usersgroups) > 0)
			{
				foreach($usersgroups as $group)
				{
					if($group['groupmaster'] == 4)
					{
						$groupsDocArray[] = $group['id'];
					}
					else
					{
						$groupsarray[] = $group['id'];
					}
				}
			}

			$usersPflegeKoordArray = $pq->getuserbyGroupId($groupsarray, $clientid);
			$pflegeKoords['0'] = "Select User";

			foreach($usersPflegeKoordArray as $user)
			{
				$pflegeKoords[$user['id']] = $user['last_name'] . ", " . $user['first_name'];
			}


			$this->view->pfleges = $pflegeKoords;

			$usersDoctorsArray = $pq->getuserbyGroupId($groupsDocArray, $clientid, true);
			$doctors['0'] = "Auswahl";
			foreach($usersDoctorsArray as $doctor)
			{
				$doctors[$doctor['id']] = $doctor['user_title'] . " " . $doctor['last_name'] . ", " . $doctor['first_name'];
			}
			$this->view->doctors = $doctors;

			$doctors['-1'] = "Anderer Arzt";
			$doctors['-2'] = "Hausarzt";
			$this->view->users = $doctors;

			$a_medic = array();

			if(is_array($_POST['hidd_medication']))
			{
				foreach($_POST['hidd_medication'] as $key => $val)
				{
					$a_medic[$key]['medication'] = $_POST['medication'][$key];
					$a_medic[$key]['hidd_medication'] = $_POST['hidd_medication'][$key];
				}
			}
			else
			{
				for($i = 0; $i < 6; $i++)
				{
					$a_medic[$i] = array('cnt' => $i);
				}
			}

			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 9999, "listpatientmedicationadd.html");
			$this->view->medicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//medis add grid procedure end
			//bedarf medis add start
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 99999, "listpatientbedarfmedicationadd.html");
			$this->view->bedarfmedicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//bedarf medis add end
			//iv medis add start
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 999999, "listpatientivmedicationadd.html");
			$this->view->ivmedicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//iv edis add end

			/* ----------------Patient - Stammdaten - More info--------------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->zvk = $pat_moreinfo[0]['zvk'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];
			$this->view->magensonde = $pat_moreinfo[0]['magensonde'];

			/* ----------------Patient - Living Will--------------------------------- */
			$this->view->living_will = $patientinfo['living_will'];


			/* ------------------------------ PDF  ------------------------------------- */

			if(strlen($_POST['pdf_export']) > 0)
			{
				$post = $_POST;
				$post['patient_health_insurance'] = $this->view->patient_health_insurance;
				$post['patient_lname'] = $this->view->patient_lname;
				$post['patient_fname'] = $this->view->patient_fname;
				$post['patient_birthd'] = $this->view->patient_birthd;
				$post['patient_address'] = $this->view->patient_address;
				$post['medications_pdf'] = $this->view->medications_pdf;
				$post['bedarfsmedications_pdf'] = $this->view->bedarfsmedications_pdf;
				$post['ivmedications_pdf'] = $this->view->ivmedications_pdf;

				$this->generateformPdf(3, $post, 'sapvquestionnaire', "sapv_questionnaire_pdf.html");
			}
		}

		public function nursebillingAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpidFromId($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->patid = $decid;
			$patient_id = $_REQUEST['id'];
			$this->view->patient_id = $patient_id;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ---------------------------Set default date for visit-------------------------- */
			$this->view->kvno_begin_date_h = date('H', strtotime('-5 minutes'));
			$this->view->kvno_begin_date_m = date('i', strtotime('-5 minutes'));
			$this->view->kvno_end_date_h = date('H', strtotime('+10 minutes'));
			$this->view->kvno_end_date_m = date('i', strtotime('+10 minutes'));
			$this->view->vizit_date = date('d.m.Y');

			if($this->getRequest()->isPost())
			{
				if(!$_POST['export_pdf'])
				{
					/* --------------------------- ADD MULTIPLE VISIT-------------------------- */
					if($_POST['visit_action'] == 'multile_visit_action' && strlen($_POST['kvno_nurse_id']) == 0)
					{
						$sanfr = new Application_Form_KvnoNurse();
						if($error > 0)
						{
							$this->view->error_alert = '1';
						}
						$_POST['added_from'] = 'bf';

						$result = $sanfr->insertMultipleKvnoNurse($_POST);

						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}
						if(!empty($_REQUEST['list']))
						{
							$this->_redirect(APP_BASE . "patientform/nursebilling?id=" . $_GET['id'] . '&list=' . $_REQUEST['list']);
						}
						else
						{
							$this->_redirect(APP_BASE . "patientform/nursebilling?id=" . $_GET['id']);
						}
						exit;
					}
					/* --------------------------- ADD VISIT-------------------------- */
					elseif($_POST['visit_action'] == 'add_visit' && strlen($_POST['kvno_nurse_id']) == 0)
					{
						$sanfr = new Application_Form_KvnoNurse();
						if($error > 0)
						{
							$this->view->error_alert = '1';
						}
						$_POST['added_from'] = 'bf';
						$result = $sanfr->insertKvnoNurse($_POST);
						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}
						if(!empty($_REQUEST['list']))
						{
							$this->_redirect(APP_BASE . "patientform/nursebilling?id=" . $_GET['id'] . '&list=' . $_REQUEST['list']);
						}
						else
						{
							$this->_redirect(APP_BASE . "patientform/nursebilling?id=" . $_GET['id']);
						}
						exit;
					}
					/* --------------------------- EDIT VISIT-------------------------- */
					elseif($_POST['visit_action'] == 'edit_visit' && strlen($_POST['kvno_nurse_id']) > 0)
					{
						$sanfr = new Application_Form_KvnoNurse();
						$result = $sanfr->UpdateKvnoNurse($_POST);

						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}

						if(!empty($_REQUEST['list']))
						{
							$this->_redirect(APP_BASE . "patientform/nursebilling?id=" . $_GET['id'] . '&list=' . $_REQUEST['list']);
						}
						else
						{
							$this->_redirect(APP_BASE . "patientform/nursebilling?id=" . $_GET['id']);
						}
						exit;
					}
					elseif(!empty($_REQUEST['delid']))
					{
						if(!empty($_REQUEST['mode']) && $_REQUEST['mode'] == 'del')
						{
							$del_id_exp = explode('d', $_REQUEST['delid']);

							if(!empty($del_id_exp[1]))
							{
								$kvno_nurse = Doctrine_Query::create()
									->select('*')
									->from('KvnoNurse')
									->where('id = ' . $del_id_exp[1] . ' ');
								$kvno_nurse_res = $kvno_nurse->fetchArray();

								if($kvno_nurse_res)
								{
									$visit_date = date('d.m.Y', strtotime($kvno_nurse_res[0]['vizit_date']));
								}

								$nurse = new KvnoNurse();
								$delete_nurse_visit = $nurse->deleteNurseVisit($del_id_exp[1]);

								if($delete_nurse_visit === true)
								{
									$cust = new PatientCourse ();
									$cust->ipid = $ipid;
									$cust->course_date = date("Y-m-d H:i:s", time());
									$cust->course_type = Pms_CommonData::aesEncrypt("K");
									$cust->course_title = Pms_CommonData::aesEncrypt(addslashes(' Besuch vom ' . $visit_date . ' wurde gelöscht'));
									$cust->user_id = $logininfo->userid;
									$cust->save();
								}

								echo '1';
								exit;
							}
						}
					}
				}
			}

			/* ----------------Patient general details-------------------------------------- */
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();
			$this->view->patient_name = $patientinfo['last_name'] . ', ' . $patientinfo['first_name'];
			$this->view->patient_birthd = $patientinfo['birthd'];

			/* -----------------Check if Discharge     ------------------------------- */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* ----------------Patient  FIRST Pflegedienst -------------------------------------- */
			$pat_pfl = new PatientPflegedienste();
			$first_pflege = $pat_pfl->getPatientFirstPflegediensteDetails($ipid);

			if(!empty($first_pflege))
			{
				$nurse['nursing_service'] = $first_pflege['nursing'];
				$nurse['nursing_service_contact'] = $first_pflege['last_name'] . " " . $first_pflege['first_name'];
				$nurse['nursing_service_iknumber'] = $first_pflege['ik_number'];
				$nurse['nursing_service_address'] = $first_pflege['street1'] . ', ';
				$nurse['nursing_service_address'] .= $first_pflege['zip'] . " " . $first_pflege['city'];
			}

			$this->view->nurse_details = $nurse;

			/* ----------------Patient HealthInsurance details-------------------------------------- */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if($phi)
			{
				$health_insurance_nr = $phi[0]['insurance_no'];
				$this->view->patient_health_insurance_nr = $health_insurance_nr;
			}
			else
			{
				$this->view->patient_health_insurance_nr = '--';
			}

			/* ----------------Patient - GET ACTIVE DAYS ------------------------------------- */
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);

			$admCycle[-1] = "gesamt";
			if(count($admissions[$ipid]['admissionDates']) != "0")
			{
				foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
				{

					if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}

					$admCycle[$keyAdm] = date("d.m.Y", strtotime($admitedDate['date'])) . " - " . date("d.m.Y", strtotime($dischargeDate));
					$admissionsCycles[$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
					$admissionsCycles[$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));

					$newadmissionsCycles[$keyAdm]['start'] = date("Y-m-d", strtotime($admitedDate['date']));
					$newadmissionsCycles[$keyAdm]['end'] = date("Y-m-d", strtotime($dischargeDate));

					if($keyAdm == (count($admissions[$ipid]['admissionDates']) - 1))
					{

					}
				}
			}
			else
			{
				$admCycle[0] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date'])) . " - " . date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
				//gesamt if no admision-readmission cycle
				$admissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$admissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));


				$newadmissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$newadmissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
			}

			$new_active_days = array();
			foreach($newadmissionsCycles as $cicle)
			{
				$new_active_days[] = $patientmaster->getDaysInBetween($cicle['start'], $cicle['end']);
			}

			$all_active_daysc = array();
			foreach($new_active_days as $acinter => $cainterval_days)
			{
				foreach($cainterval_days as $acdays)
				{
					$all_active_daysc[] = $acdays;
				}
			}

			$active_days = array_unique($all_active_daysc);
			$this->view->active_days = $active_days;

			if($_REQUEST['vizit'] == '1')
			{
				print_r("\n");
				print_r("new activ days");
				print_r($active_days);
				print_r("\n");
			}

			$this->view->active_days = $active_days;
			if($_REQUEST['vizit'] == '1')
			{
				print_r("\n");
				print_r("first activ days");
				print_r($active_days);
				print_r("\n");
			}

			$montharray = array(date('m', mktime(0, 0, 0, date("m") - 1, date("d"), date("Y"))), date('m'));
			$cnt = 1;
			foreach($admissionsCycles as $moth => $keyd)
			{
				$selectmonths[$cnt++] = $this->get_months($keyd['start'], $keyd['end'], true);
			}


			if(count($selectmonths) > 0)
			{
				foreach($selectmonths as $keym => $valm)
				{
					foreach($valm as $keylistmonth => $valuelm)
					{
						if(!in_array($valuelm, $montharray))
						{
							$verdung .=$comma . $valuelm;
							$comma = ",";
							$arrayMonthsSelect[$keylistmonth] = $valuelm;
						}
					}
				}
			}

			$present = date("Ym");
			$presentl = date("m") . "." . date("Y");

			if(!in_array($present, $arrayMonthsSelect))
			{
				$arrayMonthsSelect[$present] = $presentl;
			}

			$this->view->montharray = $arrayMonthsSelect;

			if(!empty($_REQUEST['list']))
			{
				$selectedPeriod[0] = substr($_REQUEST['list'], 0, 4);
				$selectedPeriod[1] = substr($_REQUEST['list'], 4);
			}
			else
			{
				$selectedPeriod[0] = date("Y");
				$selectedPeriod[1] = date("m");
			}
			$selectedPeriod[2] = "01";

			$formdays[] = $patientmaster->getDaysInBetween(date("Y-m-d H:i:s", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])), date("Y-m-d H:i:s", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])))));

			foreach($formdays as $keyd => $vald)
			{
				$day = 1;
				foreach($vald as $keylistday => $valueld)
				{
					$dmonth_array[str_pad($day, 2, "0", STR_PAD_LEFT)] = $valueld;
					$complete_month_days[$valueld . ' 00:00:00'] = $valueld;
					$complete_days_time[str_pad($day, 2, "0", STR_PAD_LEFT)] = $valueld . '';
					$day++;
				}
			}

			$this->view->month_days = $dmonth_array;
			$this->view->complete_month_days = $complete_days_time;

			/* ----------------Client - Get All LOCATIONS  -------------------------------------- */
			$clocation_q = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"');
			$clocation_array = $clocation_q->fetchArray();

			foreach($clocation_array as $lkey => $lvalue)
			{
				$master_locations[$lvalue['id']]['type'] = $lvalue['location_type'];
			}

			/* ----------------Patient - Get LOCATIONS -------------------------------------- */
			$patloc_q = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$patloc_array = $patloc_q->fetchArray();

			// we need to check in patient has hospital or hospiz
			$o = 1;
			$deactivate_interval = array();
			$hospital_hospiz_inactive_continue = array();
			$hospital_hospiz_open_location = '0';
			foreach($patloc_array as $plockey => $plocvalue)
			{
				$patient_locations[$plocvalue['location_id']]['type'] = $master_locations[$plocvalue['location_id']]['type'];
				$patient_locations[$plocvalue['location_id']]['from'] = $plocvalue['valid_from'];
				$patient_locations[$plocvalue['location_id']]['till'] = $plocvalue['valid_till'];

				if($patient_locations[$plocvalue['location_id']]['type'] == '1' || $patient_locations[$plocvalue['location_id']]['type'] == '2')
				{
					$deactivate_interval[$o]['start'] = $plocvalue['valid_from'];
					$deactivate_interval[$o]['end'] = $plocvalue['valid_till'];

					if($plocvalue['valid_till'] == '0000-00-00 00:00:00')
					{
						$plocvalue['valid_till'] = date("Y-m-d H:i:s");
						$hospital_hospiz_open_location = '1';
					}
					else
					{
						$hospital_hospiz_open_location = '0';
					}

					$hdeactivate_interval[$o]['start'] = date("Y-m-d", strtotime("+1 day", strtotime($plocvalue['valid_from'])));
					$hdeactivate_interval[$o]['end'] = date("Y-m-d", strtotime("-1 day", strtotime($plocvalue['valid_till'])));

					$hospital_hospiz_inactive[] = $patientmaster->getDaysInBetween($hdeactivate_interval[$o]['start'], $hdeactivate_interval[$o]['end']);


					$current_location = date('Y-m-d', strtotime($patloc_array[$plockey]['valid_till']));
					$nextlocation = date('Y-m-d', strtotime($patloc_array[$plockey + 1]['valid_from']));

					if($master_locations[$patloc_array[$plockey + 1]['location_id']]['type'] == '1' || $master_locations[$patloc_array[$plockey + 1]['location_id']]['type'] == '2')
					{
						if($current_location == $nextlocation)
						{
							$hospital_hospiz_inactive_continue[] = $nextlocation;
						}
					}
				}
				else
				{
					$hospital_hospiz_open_location = '0';
				}

				$o++;
			}

			asort($hospital_hospiz_inactive_continue);

			/* ----------------Patient - Get SAPV -------------------------------------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('verordnungbis !="000-00-00 00:00:00" ')
				->andWhere('verordnungam !="000-00-00 00:00:00" ')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$sapv_array = $dropSapv->fetchArray();

			$s = 1;
			$active_sapv_interval = array();
			foreach($sapv_array as $sapvkey => $sapvvalue)
			{
				$patient_sapv[$sapvvalue['id']]['type'] = $sapvvalue['verordnet'];
				$patient_sapv[$sapvvalue['id']]['from'] = $sapvvalue['verordnungam'];
				$patient_sapv[$sapvvalue['id']]['till'] = $sapvvalue['verordnungbis'];

				$active_sapv_interval[$s]['start'] = date('Y-m-d', strtotime($sapvvalue['verordnungam']));
				$active_sapv_interval[$s]['end'] = date('Y-m-d', strtotime($sapvvalue['verordnungbis']));

				$patient_active_sapv[] = $patientmaster->getDaysInBetween($active_sapv_interval[$s]['start'], $active_sapv_interval[$s]['end']);
				$s++;
			}
			asort($patient_active_sapv);

			foreach($patient_active_sapv as $sinter => $sinterval_days)
			{
				foreach($sinterval_days as $sdays)
				{
					$all_active_sapv_days[] = $sdays;
				}
			}

			$all_active_sapv_days = array_unique($all_active_sapv_days);

			/* ----------------Client - Get PRICE VISITS-------------------------------------- */
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$this->view->shortcuts_visits = $shortcuts['visits'];

			$current_period['start'] = date("Y-m-d", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2]));
			$current_period['end'] = date("Y-m-d", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2]))));

			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			/* ----------------------Patient - get all "deleted visits"------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere("ipid='" . $ipid . "'")
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"')
				->andWhere('source_ipid = ""');
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ----------------Patient - Get NURSE VISITS-------------------------------------- */
			$nurse_visits_q = Doctrine_Query::create()
				->select("*")
				->from('KvnoNurse')
				->where("ipid='" . $ipid . "'")
				->andWhere('month(vizit_date) = ' . $selectedPeriod[1] . ' ')
				->andWhere('year(vizit_date) = ' . $selectedPeriod[0] . ' ')
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere('isdelete = 0')
				->orderBy('kvno_begin_date_h ASC');
			$nurse_visits_array = $nurse_visits_q->fetchArray();

			$i = 1;
			$nurse_visit_day = array();
			foreach($nurse_visits_array as $nvkey => $value_nur)
			{
				$visit_day = date('Y-m-d', strtotime($value_nur['vizit_date']));
				$price_visit_day = date('Y-m-d', strtotime($value_nur['vizit_date']));
				$nurse_visit_day[$visit_day][$i]['visit_id'] = $value_nur['id'];
				$nurse_visit_day[$visit_day][$i]['visit_day'] = $value_nur['vizit_date'];
				$nurse_visit_day[$visit_day][$i]['visit_kvno_begin_date_h'] = str_pad($value_nur['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT);
				$nurse_visit_day[$visit_day][$i]['visit_kvno_begin_date_m'] = str_pad($value_nur['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT);
				$nurse_visit_day[$visit_day][$i]['visit_kvno_end_date_h'] = str_pad($value_nur['kvno_end_date_h'], 2, "0", STR_PAD_LEFT);
				$nurse_visit_day[$visit_day][$i]['visit_kvno_end_date_m'] = str_pad($value_nur['kvno_end_date_m'], 2, "0", STR_PAD_LEFT);
				$nurse_visit_day[$visit_day][$i]['added_from'] = $value_nur['added_from'];

				if($nurse_visit_day[$visit_day][$i]['added_from'] == "bf")
				{
					$nurse_visit_day[$visit_day][$i]['visit_added_from'] = 'billing_form';
				}
				else
				{
					$nurse_visit_day[$visit_day][$i]['visit_added_from'] = '';
				}

				$nurse_visit_day[$visit_day][$i]['visit_action_day'] = date('d', strtotime($value_nur['vizit_date']));
				$nurse_visit_day[$visit_day][$i]['visit_start'] = str_pad($value_nur['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT) . ':' . str_pad($value_nur['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT);
				$nurse_visit_day[$visit_day][$i]['visit_end'] = str_pad($value_nur['kvno_end_date_h'], 2, "0", STR_PAD_LEFT) . ':' . str_pad($value_nur['kvno_end_date_m'], 2, "0", STR_PAD_LEFT);

				$nvizit_date_array = date('d.m.Y', strtotime($value_nur['vizit_date']));
				$nvizit_date_arr = explode(".", $nvizit_date_array);
				$start_date = mktime($value_nur['kvno_begin_date_h'], $value_nur['kvno_begin_date_m'], 0, $nvizit_date_arr[1], $nvizit_date_arr[0], $nvizit_date_arr[2]);
				$end_date = mktime($value_nur['kvno_end_date_h'], $value_nur['kvno_end_date_m'], 0, $nvizit_date_arr[1], $nvizit_date_arr[0], $nvizit_date_arr[2]);
				$nviz_minutes = round(($end_date - $start_date) / 60);
				$nviz_hi_display = gmdate("H:i", round(($end_date - $start_date)));
				$nurse_visit_day[$visit_day][$i]['visit_duration'] = $nviz_hi_display;
				$nurse_visit_day[$visit_day][$i]['visit_duration_count'] = $nviz_minutes;
				$nurse_visit_day_count[] = date('d', strtotime($value_nur['vizit_date']));

				// get status based on admission period
				$adm = 1;
				foreach($admissionsCycles as $admkey => $admper)
				{
					$admissionperios[$admkey][$adm]['start'] = $admper['start'];
					$admissionperios[$admkey][$adm]['end'] = $admper['end'];

					if(strtotime(date('d.m.Y', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) >= strtotime($admissionperios[$admkey][$adm]['start']) &&
						strtotime(date('d.m.Y', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) <= strtotime($admissionperios[$admkey][$adm]['end']))
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_adm'] = 'ACTIVE';
						break;
					}
					else
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_adm'] = 'INACTIVE';
					}
					$adm++;
				}

				// get status based on VALID SAPV
				if($nurse_visit_day[$visit_day][$i]['visit_status_adm'] == 'ACTIVE')
				{
					if(in_array($visit_day, $all_active_sapv_days))
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_sapv'] = 'ACTIVE';
					}
					else
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_sapv'] = 'INACTIV';
					}
				}

				if($nurse_visit_day[$visit_day][$i]['visit_status_sapv'] == 'ACTIVE')
				{
					//get status based on location type
					if(!empty($deactivate_interval))
					{
						$c = 1;
						foreach($deactivate_interval as $di => $intval)
						{
							if($intval['end'] == '0000-00-00 00:00:00')
							{
								$intval['end'] = date('Y-m-d H:i:s');
							}
							$interval_cond[$di][$c]['start'] = date('Y-m-d', strtotime($intval['start']));
							$interval_cond[$di][$c]['end'] = date('Y-m-d', strtotime($intval['end']));
							if(strtotime(date('Y-m-d', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) > strtotime($interval_cond[$di][$c]['start']) &&
								strtotime(date('Y-m-d', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) < strtotime($interval_cond[$di][$c]['end']))
							{
								$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'INACTIVE';
								$nurse_visit_day[$visit_day][$i]['visit_status'] = 'INACTIVE';
								$inactive_days[] = $visit_day;
								break;
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'ACTIVE';
								$nurse_visit_day[$visit_day][$i]['visit_status'] = 'ACTIVE';
							}
							$c++;
						}
					}
					else
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'ACTIVE';
						$nurse_visit_day[$visit_day][$i]['visit_status'] = 'ACTIVE';
					}

					// check in the visit day it is during hospital continuu
					if($nurse_visit_day[$visit_day][$i]['visit_status_loc'] == 'ACTIVE')
					{
						if(!in_array($visit_day, $hospital_hospiz_inactive_continue))
						{
							$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'ACTIVE';
							$nurse_visit_day[$visit_day][$i]['visit_status'] = 'ACTIVE';
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'INACTIVE';
							$nurse_visit_day[$visit_day][$i]['visit_status'] = 'INACTIVE';
						}
					}
				}
				else
				{
					$nurse_visit_day[$visit_day][$i]['visit_status'] = 'INACTIVE';
					$inactive_days[] = $visit_day;
				}

				if($nurse_visit_day[$visit_day][$i]['visit_status'] == 'ACTIVE')
				{
					// get price details
					if($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P1']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P1']['t_end'])
					{
						if($master_price_list[$visit_day][0]['P1']['price'] != '0.00')
						{
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P1']['shortcut'];
							$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P1']['list'];
							$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P1']['price'];
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
							$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
						}
					}
					elseif($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P2']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P2']['t_end'])
					{

						if($master_price_list[$visit_day][0]['P2']['price'] != '0.00')
						{
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P2']['shortcut'];
							$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P2']['list'];
							$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P2']['price'];
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
							$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
						}
					}
					elseif($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P3']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P3']['t_end'])
					{

						if($master_price_list[$visit_day][0]['P3']['price'] != '0.00')
						{
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P3']['shortcut'];
							$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P3']['list'];
							$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P3']['price'];
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
						}
					}
					else
					{
						$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
					}

					$nurse_visit_day_p[$visit_day]['day_price_shortcut_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] ++;
					$nurse_visit_day_p[$visit_day]['day_price_list_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
					$nurse_visit_day_p[$visit_day]['day_price_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price'];

					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['shortcut'] ++;
					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['list'] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['price'] = $nurse_visit_day[$visit_day][$i]['visit_price'];
				}
				else
				{
					$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
					$nurse_visit_day_p[$visit_day]['day_price_shortcut_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = 0;
					$nurse_visit_day_p[$visit_day]['day_price_list_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = 0;
					$nurse_visit_day_p[$visit_day]['day_price_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = 0;

					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['shortcut'] = 0;
					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['list'] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['price'] = $nurse_visit_day[$visit_day][$i]['visit_price'];
				}
				/* ------------------------------------------------------------------------------------------- */
				if($nurse_visit_day[$visit_day][$i]['no_price_shortcut'] == 'NOPR')
				{
					unset($nurse_visit_day[$visit_day][$i]); // REMOVE VISITS IF THE SHORTCUT HAS NO PRICE  !!!!!!!!!!
				}
				/* ------------------------------------------------------------------------------------------- */


				$i++;
			}
			ksort($nurse_visit_day);

			if($_REQUEST['vizit'] == '1')
			{
				print_R("visits");
				print_r($nurse_visit_day);
				print_R("\n");
			}

			//inactive from visits array
			$inactive_array_visits[] = "XXX";
			$this->view->inactive_array_visits = $inactive_array_visits;

			// inactive based on location - hospital - hospiz
			$all_hospital_hospiz_days[] = "XXX";
			foreach($hospital_hospiz_inactive as $inter => $hinterval_days)
			{
				foreach($hinterval_days as $ddays)
				{
					$all_hospital_hospiz_days[] = $ddays;
				}
			}

			if(!empty($hospital_hospiz_inactive_continue))
			{
				$all_hospital_hospiz_days = array_merge($hospital_hospiz_inactive_continue, $all_hospital_hospiz_days);
			}

			if($_REQUEST['vizit'] == '1')
			{
				print_R("\n");
				print_R("hospital");
				print_r($all_hospital_hospiz_days);
				print_R("\n");
			}

			if($hospital_hospiz_open_location == '1')
			{
				array_push($all_hospital_hospiz_days, date('Y-m-d'));
			}

			// get all inactive
			$all_inactive_days[] = "XXX";
			$all_inactive_days = array_merge($inactive_array_visits, $all_hospital_hospiz_days);
			$all_inactive_days = array_unique($all_inactive_days);

			$alv_active_days = array_diff($active_days, $all_inactive_days);
			if($_REQUEST['vizit'] == '1')
			{
				print_R("\n");
				print_r('sapv');
				print_r($all_active_sapv_days);
				print_R("\n");
			}

			//get sapv conditions
			$this->view->all_active_sapv_days = $all_active_sapv_days;
			if(!empty($all_active_sapv_days))
			{
				$days_without_sapv = array_diff($alv_active_days, $all_active_sapv_days);
			}
			else
			{
				$days_without_sapv = $alv_active_days;
			}

			$all_active_sapvs_days = array_diff($alv_active_days, $days_without_sapv);
			$all_active_sapvs_days = array_unique($all_active_sapvs_days);
			$all_active_days = array_values($all_active_sapvs_days);

			$this->view->total_active_days = $all_active_days;

			if($_REQUEST['vizit'] == '1')
			{
				print_r("\n");
				print_r("activ days");
				print_r($all_active_days);
				print_r("\n");
				exit;
			}


			$this->view->price_details = $price_details;
			$this->view->used_shortcuts = array('P1', 'P2', 'P3');

			foreach($nurse_visit_day as $kh => $vals)
			{
				$the_array_visits[$kh] = array_values($vals);
			}

			ksort($the_array_visits);

// 		print_r($the_array_visits); exit;
			$this->view->visits_array = $the_array_visits;
			$this->view->nurse_visit_day_p = $nurse_visit_day_p;

			$nr_visits = array("0", "1", "2");
			$this->view->nr_visits = $nr_visits;

			$current_day = date("Y-m-d 00:00:00");
			$this->view->current_day = $current_day;

			/* ----------------------------PDF EXPORT-------------------------------------- */
			if($this->getRequest()->isPost())
			{
				if($_POST['export_pdf'] == '1')
				{
					$monthsel = $_REQUEST['month'];

					$selectedPeriod[0] = substr($monthsel, 0, 4);
					$selectedPeriod[1] = substr($monthsel, 4);
					$this->view->monthsel = $selectedPeriod[1] . '.' . $selectedPeriod[0];

					$htmlform = Pms_Template::createTemplate($this->view, 'templates/nursebilling_pdf.html');
					$pdfname = "PFLEGE-LBG-Abrechnung";
					$pdf = new Pms_PDF('L', 'mm', 'A4', true, 'UTF-8', false);
					$pdf->setDefaults(true); //defaults with header
					$pdf->setImageScale(1.6);
					$pdf->SetMargins(10, 5, 10); //reset margins
					$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
					$pdf->setHTML($html);

					$tmpstmp = $pdf->uniqfolder(PDF_PATH);
					$file_name_real = basename($tmpstmp);

					$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
					$_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 					$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;

// 					exec($cmd);
					$zipname = $file_name_real . ".zip";
					$filename = "uploads/" . $file_name_real . ".zip";

					/*
					$con_id = Pms_FtpFileupload::ftpconnect();
					if($con_id)
					{
						$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
						Pms_FtpFileupload::ftpconclose($con_id);
					}
					*/
					$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
						

					$cust = new PatientFileUpload();
					$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdfname));
					$cust->ipid = $ipid;
					$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
					$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					$cust->system_generated = "1";
					$cust->save();
					$recordid = $cust->id;

					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $pdfname . ' wurde erstellt'));
					$cust->user_id = $logininfo->userid;
					$cust->save();
					ob_end_clean();
					ob_start();
					$pdf->toBrowser($pdfname . '.pdf', 'D');
					exit;
				}
			}
		}

		public function anlage6billingoldAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);

			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;

			if($this->getRequest()->isPost() && empty($_REQUEST['delid']))
			{
				$anlage6 = new Application_Form_Anlage6();
				$anlage_extra = new Application_Form_Anlage6Extra();

				if(strlen($_POST['save']) > 0)
				{
					$insert_anlage = $anlage6->InsertData($_POST, $ipid, $clientid, "e");
					$save_extra = $anlage_extra->InsertData($ipid, $_POST);
				}

				if(strlen($_POST['reset']) > 0)
				{
					$reset_anlage_month = $anlage6->clear_month_data($_POST['select_month'] . "-01", $clientid, $ipid, "e");
					$reset_anlage_extra = $anlage_extra->clear_period_extra($ipid, $_POST);
				}
			}

			if($this->getRequest()->isPost() && !empty($_REQUEST['delid']))
			{
				if(!empty($_REQUEST['mode']) && $_REQUEST['mode'] == 'del')
				{
					$del_id_exp = explode('d', $_REQUEST['delid']);
					if(!empty($del_id_exp[1]))
					{
						$nurse = new KvnoNurse();
						$delete_nurse_visit = $nurse->deleteNurseVisit($del_id_exp[1]);
						echo '1';
						exit;
					}
				}
			}

			$patientmaster = new PatientMaster();
// 			$pm = $patientmaster->getMasterData($decid, 0);
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$pm = $patientmaster->get_patientMasterData();
			$this->view->patientdetails = $pm;

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			//get client details name,address(street1, street2, zip, city), ik nummer and health insurance START
			if($clientid != '0' || !empty($clientid))
			{
				$cust = Doctrine_Query::create()
					->select("*,AES_DECRYPT(lbg_sapv_provider,'" . Zend_Registry::get('salt') . "') as lbg_sapv_provider,
					AES_DECRYPT(lbg_street,'" . Zend_Registry::get('salt') . "') as lbg_street,
					AES_DECRYPT(lbg_postcode,'" . Zend_Registry::get('salt') . "') as lbg_postcode,
					AES_DECRYPT(lbg_city,'" . Zend_Registry::get('salt') . "') as lbg_city,
					AES_DECRYPT(lbg_institutskennzeichen,'" . Zend_Registry::get('salt') . "') as lbg_institutskennzeichen")
					->from('Client')
					->where('id = ' . $clientid);
				$client_details = $cust->fetchArray();

				$this->view->lbg_client_name = $client_details[0]['lbg_sapv_provider'];

				$address = $client_details[0]['lbg_street'];

				if($client_details[0]['lbg_postcode'])
				{
					$address .= ', ' . $client_details[0]['lbg_postcode'];
				}

				if($client_details[0]['lbg_city'])
				{
					$address .= ', ' . $client_details[0]['lbg_city'];
				}

				$this->view->lbg_address = $address;
				$this->view->lbg_ik_nummer = $client_details[0]['lbg_institutskennzeichen'];
			}

			//health insurance
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$pathealthinsurancenr = "";
			if(strlen($healthinsu_array[0]['insurance_no']) > 0 && $healthinsu_array[0]['insurance_no'] != '0')
			{
				$pathealthinsurancenr = $healthinsu_array[0]['insurance_no'];
			}
			else
			{
				$pathealthinsurancenr = "--";
			}

			$this->view->health_insurance = $pathealthinsurancenr;
			//get client details name,address(street1, street2, zip, city), ik nummer and health insurance END

			/* ######################################################### */

			//get admission-readmission cycles to extract months where there is at least 1 day active START
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$months = array();
			$active_days = array();
			$active_days_per_admissions = array();
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));
						$discharge_dates[] = $end_with_discharge;

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						if(empty($active_days_per_admissions[$key_adm]))
						{
							$active_days_per_admissions[$key_adm] = array();
						}
						$active_days_per_admissions[$key_adm] = array_merge($active_days_per_admissions[$key_adm], $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));

						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end_with_discharge));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());
						$discharge_dates[] = $end_without_discharge;

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						if(empty($active_days_per_admissions[$key_adm]))
						{
							$active_days_per_admissions[$key_adm] = array();
						}
						$active_days_per_admissions[$key_adm] = array_merge($active_days_per_admissions[$key_adm], $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));

						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{
					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}

				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				if(empty($active_days_per_admissions[0]))
				{
					$active_days_per_admissions[0] = array();
				}
				$active_days_per_admissions[0] = array_merge($active_days_per_admissions[0], $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
			}
			$active_days = array_values(array_unique($active_days));
			$this->view->active_days = $active_days;
			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}
			//get number of days in each month + start/end day END
			//check if a month is selected START
			if(empty($_REQUEST['list']))
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_anlage_6';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];

			//find if there is a sapv for current period START!
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$all_sapv_res = $dropSapv->fetchArray();

			$all_sapv_days_arr = array();
			foreach($all_sapv_res as $k_sapv_res => $v_sapv_res)
			{
				$all_s_start = date('Y-m-d', strtotime($v_sapv_res['verordnungam']));
				$all_s_end = date('Y-m-d', strtotime($v_sapv_res['verordnungbis']));


				$temp_all_sapv_days = $patientmaster->getDaysInBetween($all_s_start, $all_s_end);
				$all_sapv_days_arr = array_merge($all_sapv_days_arr, $temp_all_sapv_days);
			}

			$dropSapv->andWhere('"' . date('Y-m-d', strtotime($current_period['start'])) . '" <= verordnungbis');
			$dropSapv->andWhere('"' . date('Y-m-d', strtotime($current_period['end'])) . '" >= verordnungam');
			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();

			foreach($droparray as $k_sapv => $v_sapv)
			{
				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);
				$all_sapv_days = array_merge($all_sapv_days, $temp_sapv_days);
			}
			//find if there is a sapv for current period END!
			//get patient locations START
			$disallowed_location_types = array('1', '2'); //hospital and hospiz
			$hospitalids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhereIn('location_type', $disallowed_location_types);
			$hosparray = $hospitalids->fetchArray();

			$hospital_ids[] = '999999999';
			$hospiz_ids[] = '999999999';
			foreach($hosparray as $hospital)
			{
				$hospital_ids[] = $hospital['id'];

				if($hospital['location_type'] == '2') //hospiz
				{
					$hospiz_ids[] = $hospital['id'];
				}
			}

			//	get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
				->andWhereIn('location_id', $hospital_ids)
				->orderBy('valid_from,id ASC');
			$pat_locations = $patloc->fetchArray();

			//get patient all locations
			$patloc_all = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid = "' . $ipid . '"')
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$pat_locations_res_all = $patloc_all->fetchArray();

			$hospital_days = array();
			$hosp_days = array();
			$hospizdays_arr = array();
			$hospiz_days_array = array();
			foreach($pat_locations as $k_pat_loc => $v_pat_loc)
			{
				if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
				{
					$till = date('Y-m-d', strtotime('+1 day'));
				}
				else
				{
					$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
				}

				$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
				$r1end = strtotime(date('Y-m-d', strtotime($till)));
				$r2start = strtotime($current_period['start']);
				$r2end = strtotime($current_period['end']);

				if(in_array($v_pat_loc['location_id'], $hospiz_ids))
				{
					$h_location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

					$hospiz_heads['start'][] = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
					$hospiz_heads['end'][] = date('Y-m-d', strtotime($v_pat_loc['valid_till']));

					$hospiz_days_arr = $patientmaster->getDaysInBetween($h_location_start, $till);
					//used in view
					$hospiz_days = array_merge($hospiz_days, $hospiz_days_arr);
				}

				if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
				{
					$period_hosp_locations[] = $v_pat_loc;
					$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

					$hosp = $patientmaster->getDaysInBetween($location_start, $till);
					$hospital_days = array_merge($hospital_days, $hosp);

					if(in_array($v_pat_loc['location_id'], $hospiz_ids))
					{
						$hospizdays_arr = $patientmaster->getDaysInBetween($location_start, $till);
						$hospiz_days_array = array_merge($hospiz_days_array, $hospizdays_arr);
					}
				}

//			find hosp heads
				$start_hosp_period = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
				$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
				$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
				$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));

				//remove end head
				if($end_hospital_period != $next_start_hosp && $start_hosp_period != $end_hospital_period)
				{
					$find = array_search($end_hospital_period_formatted, $hospital_days);
					$removed_days['e'][] = $hospital_days[$find];
					unset($hospital_days[$find]);

					//hospiz end head
					if(!in_array($end_hospital_period_formatted, $discharge_dates))
					{
						$find_hospiz = array_search($end_hospital_period_formatted, $hospiz_days_array);
						$removed_days['e_h'][] = $hospiz_days_array[$find_hospiz];
						unset($hospiz_days_array[$find_hospiz]);
					}
				}

				//remove start head
				if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
				{
					$find_s = '';
					$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
					$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
					$start_hospital_period = $r1start;
					$start_hospital_formatted = date('Y-m-d', $r1start);

					if($start_hosp_period != $previous_till && $start_hosp_period != $end_hospital_period)
					{
						//unset hospital start head
						$find_s = array_search($start_hospital_formatted, $hospital_days);
						$removed_days['s'][] = $hospital_days[$find_s];
						unset($hospital_days[$find_s]);

						if(!in_array($start_hospital_formatted, $admission_dates))
						{
							//unset hospiz start head
							$find_s_hospiz = array_search($start_hospital_formatted, $hospiz_days_array);
							$removed_days['s_h'][] = $hospiz_days_array[$find_s_hospiz];
							unset($hospiz_days_array[$find_s_hospiz]);
						}
					}
				}
				else
				{
					$find_s = '';
					$start_hospital_formatted = date('Y-m-d', $r1start);
					$find_s = array_search($start_hospital_formatted, $hospital_days);
					$removed_days['s2'][] = $hospital_days[$find_s];
					unset($hospital_days[$find_s]);

					if(!in_array($start_hospital_formatted, $admission_dates))
					{
						$find_s_h = '';
						$start_hospital_formatted = date('Y-m-d', $r1start);
						$find_s_h = array_search($start_hospital_formatted, $hospiz_days_array);
						$removed_days['s2_h'][] = $hospiz_days_array[$find_s_h];
						unset($hospiz_days_array[$find_s_h]);
					}
				}
			}
//		hospiz days for shortcut "B"
			$hospiz_days_arr = array_values(array_unique($hospiz_days_array));

			$full_hospital_days = array_values(array_unique($hospital_days));
			if($_REQUEST['dbg'])
			{
				print_r("pat loc :\n\n");
				print_r($pat_locations);
				print_r("active days:\n\n");
				print_r($active_days);
				print_r("full hosp days :\n\n");
				print_r($full_hospital_days);
				print_r("removed_days :\n\n");
				print_r($removed_days);
			}

			$this->view->full_hospital_days = $full_hospital_days;

			//get patient locations END
			//get price shortcuts START
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$this->view->shortcuts_admission = $shortcuts['admission'];
			$this->view->shortcuts_daily = $shortcuts['daily'];
			$this->view->shortcuts_visits = $shortcuts['visits'];
			$this->view->used_shortcuts = array('E', 'EH', 'B', 'P1', 'P2', 'P3', 'A1', 'A2');
			$this->view->used_shortcuts_summary = array('E', 'B', 'P1', 'P2', 'P3', 'A1', 'A2');
			$this->view->grouped_row = array('E', 'EH');
			$this->view->hospital_alowed_shortcuts = array('A1', 'A2');

			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			$this->view->price_list = $master_price_list;
			//get price shortcuts END
			//
		//get nurse visits START
			$nurse_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid ="' . $ipid . '"')
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');

			$nurse_v = $nurse_from_course->fetchArray();
			$deleted_nurse_visits[] = '9999999999999999';

			foreach($nurse_v as $k_nurse_k => $v_nurse_v)
			{
				$deleted_nurse_visits[] = $v_nurse_v['recordid'];
			}

			$knurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->where('ipid = "' . $ipid . '"')
				->andWhereNotIn('id', $deleted_nurse_visits)
				->andWhere('MONTH(vizit_date) = MONTH("' . $current_period['start'] . '") AND YEAR(vizit_date) = YEAR("' . $current_period['start'] . '") ')
				->andWhere('isdelete ="0"')
				->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
			$kvno_nurse_visits = $knurse_visits->fetchArray();
			$involved_users_ids[] = '999999999';
			//calculate nurse visits duration START
			foreach($kvno_nurse_visits as $k_nurse_v => $v_nurse_v)
			{
				$nurse_visit_date = date('Y-m-d', strtotime($v_nurse_v['vizit_date']));
				$duration = Pms_CommonData::calculate_visit_duration($v_nurse_v['kvno_begin_date_h'], $v_nurse_v['kvno_end_date_h'], $v_nurse_v['kvno_begin_date_m'], $v_nurse_v['kvno_end_date_m'], $v_nurse_v['vizit_date']);
				$kvno_nurse_visits[$k_nurse_v]['duration'] = $duration;
				$visit_type = '';
				$visit_type = '0';
				if(in_array($nurse_visit_date, $active_days))
				{
					$involved_users_ids[] = $v_nurse_v['create_user'];
					if($duration >= $master_price_list[$nurse_visit_date][0]['P1']['t_start'] && $duration <= $master_price_list[$nurse_visit_date][0]['P1']['t_end'])
					{
						$visit_type = 'P1';
					}
					else if($duration >= $master_price_list[$nurse_visit_date][0]['P2']['t_start'] && $duration <= $master_price_list[$nurse_visit_date][0]['P2']['t_end'])
					{
						$visit_type = 'P2';
					}
					else if($duration >= $master_price_list[$nurse_visit_date][0]['P3']['t_start'] && $duration <= $master_price_list[$nurse_visit_date][0]['P3']['t_end'])
					{
						$visit_type = 'P3';
					}
				}

				$kvno_nurse_visits[$k_nurse_v]['visit_type'] = $visit_type;
				$kvno_nurse_visits[$k_nurse_v]['visit_price'] = $master_price_list[$nurse_visit_date][0][$visit_type]['price'];
				$kvno_nurse_visits[$k_nurse_v]['visit_list'] = $master_price_list[$nurse_visit_date][0][$visit_type]['list'];
			}

			//calculate nurse visits duration END
			//get nurse visits END
			//
		//get doctor visits START
			$doc_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid ="' . $ipid . '"')
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$doc_v = $doc_from_course->fetchArray();

			$deleted_doctor_visits[] = '99999999999999999';
			foreach($doc_v as $k_doc_v => $v_doc_v)
			{
				$deleted_doctor_visits[] = $v_doc_v['recordid'];
			}

			$kdoctor_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoDoctor")
				->where('ipid = "' . $ipid . '"')
				->andWhereNotIn('id', $deleted_doctor_visits)
				->andWhere('MONTH(vizit_date) = MONTH("' . $current_period['start'] . '") AND YEAR(vizit_date) = YEAR("' . $current_period['start'] . '") ')
				->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
			$kvno_doctor_visits = $kdoctor_visits->fetchArray();

			//calculate doctor visits duration START
			foreach($kvno_doctor_visits as $k_doc_v => $v_doc_v)
			{
				$visit_date = date('Y-m-d', strtotime($v_doc_v['vizit_date']));

				$duration = Pms_CommonData::calculate_visit_duration($v_doc_v['kvno_begin_date_h'], $v_doc_v['kvno_end_date_h'], $v_doc_v['kvno_begin_date_m'], $v_doc_v['kvno_end_date_m'], $v_doc_v['vizit_date']);
				$kvno_doctor_visits[$k_doc_v]['duration'] = $duration;
				$visit_type = '0';
				if(in_array($visit_date, $active_days))
				{
					$involved_users_ids[] = $v_doc_v['create_user'];
					if($duration >= $master_price_list[$visit_date][0]['A1']['t_start'] && $duration <= $master_price_list[$visit_date][0]['A1']['t_end'])
					{
						$visit_type = 'A1';
					}
					else if($duration >= $master_price_list[$visit_date][0]['A2']['t_start'] && $duration <= $master_price_list[$visit_date][0]['A2']['t_end'])
					{
						$visit_type = 'A2';
					}
				}

				$kvno_doctor_visits[$k_doc_v]['visit_type'] = $visit_type;
				$kvno_doctor_visits[$k_doc_v]['visit_price'] = $master_price_list[$visit_date][0][$visit_type]['price'];
				$kvno_doctor_visits[$k_doc_v]['visit_list'] = $master_price_list[$visit_date][0][$visit_type]['list'];
			}
			//calculate doctor visits duration END
			//get doctor visits END
			//get admissions & discharge START
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid));

			foreach($admissions[$ipid]['admissionDates'] as $k_admission => $v_admission)
			{
				$a_start = strtotime(date('Y-m-d', strtotime($v_admission['date'])));
				$a_end = strtotime(date('Y-m-d', strtotime($v_admission['date'])));

				$p_start = strtotime($current_period['start']);
				$p_end = strtotime($current_period['end']);

				//get intersected discharge days
				if(!empty($admissions[$ipid]['dischargeDates'][$k_admission]['date']))
				{
					$d_start = strtotime(date('Y-m-d', strtotime($admissions[$ipid]['dischargeDates'][$k_admission]['date'])));
					$d_end = strtotime(date('Y-m-d', strtotime($admissions[$ipid]['dischargeDates'][$k_admission]['date'])));

					if(Pms_CommonData::isintersected($d_start, $d_end, $p_start, $p_end))
					{
						$readmission_limits['discharge'][] = date('Y-m-d', $d_start);
					}
				}

				//get intersected admitted days
				if(Pms_CommonData::isintersected($a_start, $a_end, $p_start, $p_end))
				{
					$admitted_days[date('Y-m-d', strtotime($v_admission['date']))] = date('Y-m-d', strtotime($v_admission['date']));
					$readmission_limits['admitted'][] = date('Y-m-d', strtotime($v_admission['date']));
					$involved_users_ids[] = $v_admission['create_user'];
				}
			}
			//end get admissions & discharge END
//		*** PREPARE DAYS ARRAY START***
			$days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			foreach($days as $k_day => $v_day)
			{
				if(empty($month_days_arr[date('Y-m-d', strtotime($v_day))]))
				{
					//setup base array
					$month_days_arr[date('Y-m-d', strtotime($v_day))]['visits'] = array();
					if(empty($month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']))
					{
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['E'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['EH'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['P1'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['P2'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['P3'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['A1'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['A2'] = 0;
					}
				}

				//exclude hospital and hospiz days (if admission is in hospiz then is counted as hospiz full day not added to price, same for discharge day)
				if(!in_array($v_day, $full_hospital_days) && !in_array($v_day, $hospiz_days_arr))
				{
					if(in_array($v_day, $active_days))
					{
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['B'] = 1;
					}
					else
					{
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['B'] = 0;
					}
				}
				else
				{
					$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['B'] = 0;
				}
			}
//		*** PREPARE DAYS ARRAY END ***
//		*** APPEND DATA TO DAYS ARRAY START ***
			//append nurse visits to main table ['nurse_visits'] START
			foreach($kvno_nurse_visits as $nv_key => $nv_value)
			{
				if(array_key_exists(date('Y-m-d', strtotime($nv_value['vizit_date'])), $month_days_arr))
				{
					if(!empty($nv_value['visit_type']) && !empty($nv_value['visit_price']) && $nv_value['visit_price'] != '0.00')
					{
						$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['nurse_visits'][] = $nv_value;
						$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['visit_types'][] = $nv_value['visit_type'];
						if(!empty($month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['shortcuts'][$nv_value['visit_type']]))
						{
							$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['shortcuts'][$nv_value['visit_type']] += '1';
						}
						else
						{
							$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['shortcuts'][$nv_value['visit_type']] = '1';
						}
					}
				}
			}
			//append nurse visits to main table ['nurse_visits'] END
			//append doctor visits to main table ['doctor_visits'] START
			foreach($kvno_doctor_visits as $dv_key => $dv_value)
			{
				if(array_key_exists(date('Y-m-d', strtotime($dv_value['vizit_date'])), $month_days_arr))
				{
					if(!empty($dv_value['visit_type']) && !empty($dv_value['visit_price']) && $dv_value['visit_price'] != '0.00')
					{
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['doctor_visits'][] = $dv_value;
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['visit_types'][] = $dv_value['visit_type'];
						if(!empty($month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['shortcuts'][$dv_value['visit_type']]))
						{
							$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['shortcuts'][$dv_value['visit_type']] += '1';
						}
						else
						{
							$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['shortcuts'][$dv_value['visit_type']] = '1';
						}
					}
					else if($dv_value['visit_type'] == '0' && empty($dv_value['visit_price']) && $dv_value['visit_price'] != '0.00' && !in_array(date('Y-m-d', strtotime($dv_value['vizit_date'])), $active_days))
					{
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['doctor_visits'][] = $dv_value;
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['visit_types'][] = $dv_value['visit_type'];
					}
				}
			}
//		print_r($month_days_arr);exit;
			//append doctor visits to main table ['doctor_visits'] END
			//append admission days if keys(day_of_admission) is in current month START
			$admission_dates_arr = array();
			foreach($active_days_per_admissions as $k_p_adm => $v_p_adm_arr)
			{
				foreach($v_p_adm_arr as $k_adm_day => $v_adm_day)
				{
					if(!in_array($v_adm_day, $hospiz_days_array) && in_array($v_adm_day, $all_sapv_days_arr) && empty($triggered_admission[$k_p_adm]))
					{
						$triggered_admission[$k_p_adm] = $v_adm_day;
						$admission_dates_arr[] = $v_adm_day;
					}
					else if(in_array($v_adm_day, $hospiz_days_array) && in_array($v_adm_day, $all_sapv_days_arr) && empty($triggered_admission_h[$k_p_adm]))
					{
						$triggered_admission_h[$k_p_adm] = $v_adm_day;
						$admission_dates_arr[] = $v_adm_day;
					}
				}
			}

			$this->view->admission_dates_arr = $admission_dates_arr;


			foreach($triggered_admission as $k_adm_shortcut => $v_adm_shortcut)
			{

				if(array_key_exists($v_adm_shortcut, $month_days_arr))
				{
					$month_days_arr[$v_adm_shortcut]['shortcuts']['E'] = '1';
					$month_days_arr[$v_adm_shortcut]['shortcuts']['EH'] = '0';
				}
			}

			foreach($triggered_admission_h as $k_hadm_shortcut => $v_hadm_shortcut)
			{
				if(array_key_exists($v_hadm_shortcut, $month_days_arr))
				{
					$month_days_arr[$v_hadm_shortcut]['shortcuts']['E'] = '1';
					$month_days_arr[$v_hadm_shortcut]['shortcuts']['EH'] = '1';
				}
			}
			//append admission days if keys(day_of_admission) is in current month END
			//add more data to involved users ids (assigned users and nurse services)
			//assigned users
			$ass_usr = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('epid="' . $epid . '"');
			$usignuser_arr = $ass_usr->fetchArray();

			foreach($usignuser_arr as $value)
			{
				$involved_users_ids[] = $value['userid'];
			}

			//nursing services
			$pfleg = Pflegedienstes::getPflegedienstes($ipid);

			if($pfleg)
			{
				foreach($pfleg as $k_pfl => $v_pfl)
				{
					//append nursing to involved users array
					$users_involved_str[] = $v_pfl['nursing'];
				}
			}

			$u_involved_users_ids = array_values(array_unique($involved_users_ids));

//		print_r($u_involved_users_ids);
			$user = new User();
			$user_details = $user->getMultipleUserDetails($u_involved_users_ids);

			foreach($user_details as $k_user => $v_user)
			{
				$users_involved_str[] = $v_user['last_name'] . ' ' . $v_user['first_name'];
			}

//		override admission values(E shortcut) START
//		10x
//		print_r($user_details);exit;
			$anlage_override = Anlage6::get_anlage_shortcut($ipid, $current_period['start'], 'E');
//		print_r("FIRST !! \n\n");
//		print_r($month_days_arr);
//		print_r($anlage_override);
			if($anlage_override)
			{
				foreach($anlage_override as $k_anlage => $v_anlage)
				{
					$current_date = date('Y-m-d', strtotime($v_anlage['date']));
					$month_days_arr[$current_date]['shortcuts'][strtoupper($v_anlage['shortcut'])] = $v_anlage['value'];
					if(in_array($current_date, $hospiz_days))
					{
						$month_days_arr[$current_date]['shortcuts']['EH'] = $v_anlage['value'];
					}
				}
			}
//		print_r("SECOND !! \n\n");
//		print_r($month_days_arr);exit;
//		override admission values(E shortcut) END
//		print_r($month_days_arr);exit;
//		print_r($month_days_arr);
//		exit;

			$this->view->month_days_arr = $month_days_arr;
			$this->view->all_sapv_days = $all_sapv_days;
			$this->view->hospiz_days = $hospiz_days;
			$operations = array('0' => 'operation_1', '1' => 'operation_2', '2' => 'operation_3');
			$this->view->operations = $operations;

			$this->view->first_name = $pm['first_name'];
			$this->view->last_name = $pm['last_name'];
			$this->view->dob = $pm['birthd'];
			$this->view->admission_dates = $admission_dates;
			$this->view->users_involved = $users_involved_str;

			$anlage_extra = new Anlage6Extra();
			$saved_extra_data = $anlage_extra->get_anlage_extra_data($ipid, $selected_month);
			$saved_users_involved = $saved_extra_data['related_users'];
			$this->view->saved_users_involved = $saved_users_involved;


			if($this->getRequest()->isPost())
			{
//			print_r($_POST);exit;
				if(strlen($_POST['pdf']) > 0 && strlen($_REQUEST['delid']) == '0')
				{
					$master_pdf['ipid'] = $this->view->ipid;
					$master_pdf['clientid'] = $this->view->clientid;
					$master_pdf['month_selected'] = $this->view->month_selected;
					$master_pdf['client_name'] = $this->view->client_name;
					$master_pdf['first_name'] = $this->view->first_name;
					$master_pdf['last_name'] = $this->view->last_name;
					$master_pdf['health_insurance'] = $this->view->health_insurance;
					$master_pdf['dob'] = $this->view->dob;
					$master_pdf['address'] = $this->view->address;
					$master_pdf['ik_nummer'] = $this->view->ik_nummer;
					$master_pdf['shortcuts_admission'] = $this->view->shortcuts_admission;
					$master_pdf['shortcuts_daily'] = $this->view->shortcuts_daily;
					$master_pdf['shortcuts_visits'] = $this->view->shortcuts_visits;
					$master_pdf['used_shortcuts'] = $this->view->used_shortcuts;
					$master_pdf['price_list'] = $this->view->price_list;
					$master_pdf['month_days_arr'] = $this->view->month_days_arr;
					$master_pdf['operations'] = $this->view->operations;
					$master_pdf['used_shortcuts'] = $this->view->used_shortcuts;
					$master_pdf['used_shortcuts_summary'] = $this->view->used_shortcuts_summary;
					$master_pdf['active_days'] = $this->view->active_days;
					$master_pdf['full_hospital_days'] = $this->view->full_hospital_days;
					$master_pdf['hospital_alowed_shortcuts'] = $this->view->hospital_alowed_shortcuts;
					$master_pdf['all_sapv_days'] = $all_sapv_days;
					$master_pdf['admission_dates'] = $admission_dates;
					$master_pdf['lbg_client_name'] = $this->view->lbg_client_name;
					$master_pdf['lbg_address'] = $this->view->lbg_address;
					$master_pdf['lbg_ik_nummer'] = $this->view->lbg_ik_nummer;
					$master_pdf['involved_users'] = $_POST['involved_users'];
					$master_pdf['post_data'] = $_POST;

					$gen_pdf = $this->generate_pdf($master_pdf, 'anlage6', 'anlage6pdf.html');
				}
			}
		}

		public function anlage6billingAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);

			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;


			/* Get client data */
			$client_data = new Client();
			$client_details = $client_data->getClientDataByid($clientid);

			/* ----------------------------- SAVE form ------------------------------- */
			if($this->getRequest()->isPost() && empty($_REQUEST['delid']))
			{
				$anlage6 = new Application_Form_Anlage6();
				$anlage_extra = new Application_Form_Anlage6Extra();

				if($_POST['form_action'] == "save")
				{
					$insert_anlage = $anlage6->InsertData($_POST, $ipid, $clientid, "e");
					$save_extra = $anlage_extra->InsertData($ipid, $_POST);
				}

				if($_POST['form_action'] == "reset")
				{
					$reset_anlage_month = $anlage6->clear_month_data($_POST['select_month'] . "-01", $clientid, $ipid, "e");
					$reset_anlage_extra = $anlage_extra->clear_period_extra($ipid, $_POST);
				}
			}

			/* ----------------------------- SAVE form -  delete visits ------------------------------- */
			if($this->getRequest()->isPost() && !empty($_REQUEST['delid']))
			{
				if(!empty($_REQUEST['mode']) && $_REQUEST['mode'] == 'del')
				{
					$del_id_exp = explode('d', $_REQUEST['delid']);
					if(!empty($del_id_exp[1]))
					{
						$nurse = new KvnoNurse();
						$delete_nurse_visit = $nurse->deleteNurseVisit($del_id_exp[1]);
						echo '1';
						exit;
					}
				}
			}


			/* ----------------------------- Get patient details ------------------------------- */
			$patientmaster = new PatientMaster();
// 			$pm = $patientmaster->getMasterData($decid, 0);
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$pm = $patientmaster->get_patientMasterData();
			$this->view->patientdetails = $pm;

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ----------------------------------Get client details ------------------------------------- */
			if($clientid != '0' || !empty($clientid))
			{
				$cust = Doctrine_Query::create()
					->select("*,AES_DECRYPT(lbg_sapv_provider,'" . Zend_Registry::get('salt') . "') as lbg_sapv_provider,
					AES_DECRYPT(lbg_street,'" . Zend_Registry::get('salt') . "') as lbg_street,
					AES_DECRYPT(lbg_postcode,'" . Zend_Registry::get('salt') . "') as lbg_postcode,
					AES_DECRYPT(lbg_city,'" . Zend_Registry::get('salt') . "') as lbg_city,
					AES_DECRYPT(lbg_institutskennzeichen,'" . Zend_Registry::get('salt') . "') as lbg_institutskennzeichen")
					->from('Client')
					->where('id = ' . $clientid);
				$client_details = $cust->fetchArray();

				$this->view->lbg_client_name = $client_details[0]['lbg_sapv_provider'];

				$address = $client_details[0]['lbg_street'];

				if($client_details[0]['lbg_postcode'])
				{
					$address .= ', ' . $client_details[0]['lbg_postcode'];
				}

				if($client_details[0]['lbg_city'])
				{
					$address .= ', ' . $client_details[0]['lbg_city'];
				}

				$this->view->lbg_address = $address;
				$this->view->lbg_ik_nummer = $client_details[0]['lbg_institutskennzeichen'];
			}


			/* ----------------------------- Get patient health insurance ------------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$pathealthinsurancenr = "";
			if(strlen($healthinsu_array[0]['insurance_no']) > 0 && $healthinsu_array[0]['insurance_no'] != '0')
			{
				$pathealthinsurancenr = $healthinsu_array[0]['insurance_no'];
			}
			else
			{
				$pathealthinsurancenr = "--";
			}

			$this->view->health_insurance = $pathealthinsurancenr;


			/* -------------------------- Get admission-readmission cycles to extract months where there is at least 1 day active START ------------------- */
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$months = array();
			$active_days = array();
			$active_days_per_admissions = array();
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));
						$discharge_dates[] = $end_with_discharge;

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						if(empty($active_days_per_admissions[$key_adm]))
						{
							$active_days_per_admissions[$key_adm] = array();
						}
						$active_days_per_admissions[$key_adm] = array_merge($active_days_per_admissions[$key_adm], $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));

						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end_with_discharge));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());
						$discharge_dates[] = $end_without_discharge;

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						if(empty($active_days_per_admissions[$key_adm]))
						{
							$active_days_per_admissions[$key_adm] = array();
						}
						$active_days_per_admissions[$key_adm] = array_merge($active_days_per_admissions[$key_adm], $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));

						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{
					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}

				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				if(empty($active_days_per_admissions[0]))
				{
					$active_days_per_admissions[0] = array();
				}
				$active_days_per_admissions[0] = array_merge($active_days_per_admissions[0], $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
			}
			$active_days = array_values(array_unique($active_days));





			/* ---------------------------------Get number of days in each month + start/end day  -------------------------------------------------- */
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}
			$this->view->months_periods = $months_details;

			/* ---------------------------------check if a month is selected  -------------------------------------------------- */
			if(empty($_REQUEST['list']))
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));


			/* --------------------------------- construct month_selector  -------------------------------------------------- */
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_anlage_6';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);

			/* ---------------------------------set current period to work with  -------------------------------------------------- */
			$current_period = $months_details[$selected_month];




			/* --------------------------------- Find if there is a sapv for current period   -------------------------------------------------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$all_sapv_res = $dropSapv->fetchArray();

			$all_sapv_days_arr = array();
			foreach($all_sapv_res as $k_sapv_res => $v_sapv_res)
			{
				$all_s_start = date('Y-m-d', strtotime($v_sapv_res['verordnungam']));
				$all_s_end = date('Y-m-d', strtotime($v_sapv_res['verordnungbis']));


				$temp_all_sapv_days = $patientmaster->getDaysInBetween($all_s_start, $all_s_end);
				$all_sapv_days_arr = array_merge($all_sapv_days_arr, $temp_all_sapv_days);
			}

			$dropSapv->andWhere('"' . date('Y-m-d', strtotime($current_period['start'])) . '" <= verordnungbis');
			$dropSapv->andWhere('"' . date('Y-m-d', strtotime($current_period['end'])) . '" >= verordnungam');
			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();

			foreach($droparray as $k_sapv => $v_sapv)
			{
				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);
				$all_sapv_days = array_merge($all_sapv_days, $temp_sapv_days);
			}

			##############################################################
			###################### Client settings #######################
			##############################################################
			$conditions['periods'] = array('0' => array('start' => "2008-01-01", 'end' => date("Y-m-d")));
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			foreach($patient_days as $k_ipid => $v_pat_data)
			{
			    $adm_substitute = 1;
			    foreach($v_pat_data['active_periods'] as $period_identification => $period_details)
			    {
			        	
			        $admission_periods[$ipid][$adm_substitute ]['start'] = $period_details['start'];
			        $admission_periods[$ipid][$adm_substitute ]['end'] = $period_details['end'];
			        $admission_ids[$ipid][] = $adm_substitute ;
			        $adm_substitute++;
			    }
			}
			
			$admission_periods = $admission_periods[$ipid];
			$this->view->admission_periods = $admission_periods;
			
			$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid));
			$sapv_periods = $patients_sapv_periods[$ipid];
			$this->view->sapv_periods = $sapv_periods;
			
			
			// all active days of patient including hospital and hospiz
			$real_active_days = $patient_days[$ipid]['real_active_days'];

			foreach($real_active_days as $k_ractive => $v_ractive)
			{
				$real_active_days[$k_ractive] = date('Y-m-d', strtotime($v_ractive));
			}

			$this->view->active_days = $real_active_days;

			// hospital days according to  client settings
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];

			foreach($hospital_days_cs as $k_hospital_cs => $v_hospital_cs)
			{
				$full_hospital_days_cs[$k_hospital_cs] = date('Y-m-d', strtotime($v_hospital_cs));
			}
			$this->view->full_hospital_days = $full_hospital_days_cs;


			// hospiz days according to  client settings
			$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];

			foreach($hospiz_days_cs as $k_hospiz_cs => $v_hospiz_cs)
			{
				$hospiz_days_cs[$k_hospiz_cs] = date('Y-m-d', strtotime($v_hospiz_cs));
			}

			// hospiz days - overall hopsiz days of patient - no client settings
			$overall_hospiz_days = $patient_days[$ipid]['hospiz']['real_days'];

			foreach($overall_hospiz_days as $k_hospiz => $v_hospiz)
			{
				$overall_hospiz_days[$k_hospiz] = date('Y-m-d', strtotime($v_hospiz));
			}

			// active days of patient according to client settings: no hospital, no hospiz
			$patient_cycle_days_cs = $patient_days[$ipid]['treatment_days'];

			foreach($patient_cycle_days_cs as $k_pat_cycle_cs => $v_pat_cycle_cs)
			{
				$active_days_cs[$k_pat_cycle_cs] = date('Y-m-d', strtotime($v_pat_cycle_cs));
			}

			// admission days of patient
			foreach($patient_days[$ipid]['active_periods'] as $per => $dper)
			{
				$admission_dates[] = date('Y-m-d', strtotime($dper['start']));
			}

			if($_REQUEST['csdbg'])
			{
				print_r($active_days_per_admissions);

				print_r("\n  active days of patient including hospital and hospiz\n");
				print_r($real_active_days);

				print_r("\n CS hospital_days\n");
				print_r($hospital_days_cs);

				print_r("CS hospiz_days\n");
				print_r($hospiz_days_cs);

				print_r("Old active_days\n");
				print_r($active_days);

				print_r("CS active_days\n");
				print_r($active_days_cs);

				print_r("Conditions\n");
				print_r($conditions);

				print_r($patient_days);
				exit;
			}
			######################################################

			/* --------------------------------- Get price shortcuts -------------------------------------------------- */
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$this->view->shortcuts_admission = $shortcuts['admission'];
			$this->view->shortcuts_daily = $shortcuts['daily'];
			$this->view->shortcuts_visits = $shortcuts['visits'];
			$this->view->used_shortcuts = array('E', 'EH', 'B', 'P1', 'P2', 'P3', 'A1', 'A2');
			$this->view->used_shortcuts_summary = array('E', 'B', 'P1', 'P2', 'P3', 'A1', 'A2');
			$this->view->grouped_row = array('E', 'EH');
			$this->view->hospital_alowed_shortcuts = array('A1', 'A2');

			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			$this->view->price_list = $master_price_list;


			/* --------------------------------- Get nurse visits (hardcoded visit form) -------------------------------------------------- */
			$nurse_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid ="' . $ipid . '"')
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');

			$nurse_v = $nurse_from_course->fetchArray();
			$deleted_nurse_visits[] = '9999999999999999';

			foreach($nurse_v as $k_nurse_k => $v_nurse_v)
			{
				$deleted_nurse_visits[] = $v_nurse_v['recordid'];
			}

			$knurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->where('ipid = "' . $ipid . '"')
				->andWhereNotIn('id', $deleted_nurse_visits)
				->andWhere('MONTH(vizit_date) = MONTH("' . $current_period['start'] . '") AND YEAR(vizit_date) = YEAR("' . $current_period['start'] . '") ')
				->andWhere('isdelete ="0"')
				->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
			$kvno_nurse_visits = $knurse_visits->fetchArray();
			$involved_users_ids[] = '999999999';

			//calculate nurse visits duration START
			foreach($kvno_nurse_visits as $k_nurse_v => $v_nurse_v)
			{
				$nurse_visit_date = date('Y-m-d', strtotime($v_nurse_v['vizit_date']));
				$duration = Pms_CommonData::calculate_visit_duration($v_nurse_v['kvno_begin_date_h'], $v_nurse_v['kvno_end_date_h'], $v_nurse_v['kvno_begin_date_m'], $v_nurse_v['kvno_end_date_m'], $v_nurse_v['vizit_date']);
				$kvno_nurse_visits[$k_nurse_v]['duration'] = $duration;
				$visit_type = '';
				$visit_type = '0';


				if(in_array($nurse_visit_date, $active_days_cs) && !in_array($nurse_visit_date, $full_hospital_days_cs) && !in_array($nurse_visit_date, $hospiz_days_cs))
				{
					$involved_users_ids[] = $v_nurse_v['create_user'];
					if($duration >= $master_price_list[$nurse_visit_date][0]['P1']['t_start'] && $duration <= $master_price_list[$nurse_visit_date][0]['P1']['t_end'])
					{
						$visit_type = 'P1';
					}
					else if($duration >= $master_price_list[$nurse_visit_date][0]['P2']['t_start'] && $duration <= $master_price_list[$nurse_visit_date][0]['P2']['t_end'])
					{
						$visit_type = 'P2';
					}
					else if($duration >= $master_price_list[$nurse_visit_date][0]['P3']['t_start'] && $duration <= $master_price_list[$nurse_visit_date][0]['P3']['t_end'])
					{
						$visit_type = 'P3';
					}
				}

				//source kvno nurse visit form(hardcoded)
				$kvno_nurse_visits[$k_nurse_v]['source'] = 'kvno_nurse_vf';

				$kvno_nurse_visits[$k_nurse_v]['visit_type'] = $visit_type;
				$kvno_nurse_visits[$k_nurse_v]['visit_price'] = $master_price_list[$nurse_visit_date][0][$visit_type]['price'];
				$kvno_nurse_visits[$k_nurse_v]['visit_list'] = $master_price_list[$nurse_visit_date][0][$visit_type]['list'];
			}


			/* --------------------------------- Get doctor visits (hardcoded doctor form) -------------------------------------------------- */
			$doc_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid ="' . $ipid . '"')
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$doc_v = $doc_from_course->fetchArray();

			$deleted_doctor_visits[] = '99999999999999999';
			foreach($doc_v as $k_doc_v => $v_doc_v)
			{
				$deleted_doctor_visits[] = $v_doc_v['recordid'];
			}

			$kdoctor_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoDoctor")
				->where('ipid = "' . $ipid . '"')
				->andWhereNotIn('id', $deleted_doctor_visits)
				->andWhere('MONTH(vizit_date) = MONTH("' . $current_period['start'] . '") AND YEAR(vizit_date) = YEAR("' . $current_period['start'] . '") ')
				->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
			$kvno_doctor_visits = $kdoctor_visits->fetchArray();

			//calculate doctor visits duration START
			foreach($kvno_doctor_visits as $k_doc_v => $v_doc_v)
			{
				$visit_date = date('Y-m-d', strtotime($v_doc_v['vizit_date']));

				$duration = Pms_CommonData::calculate_visit_duration($v_doc_v['kvno_begin_date_h'], $v_doc_v['kvno_end_date_h'], $v_doc_v['kvno_begin_date_m'], $v_doc_v['kvno_end_date_m'], $v_doc_v['vizit_date']);
				$kvno_doctor_visits[$k_doc_v]['duration'] = $duration;
				$visit_type = '0';

				if(in_array($visit_date, $real_active_days)) // overall active days including hospital and hospiz days
				{
					$involved_users_ids[] = $v_doc_v['create_user'];
					if($duration >= $master_price_list[$visit_date][0]['A1']['t_start'] && $duration <= $master_price_list[$visit_date][0]['A1']['t_end'])
					{
						$visit_type = 'A1';
					}
					else if($duration >= $master_price_list[$visit_date][0]['A2']['t_start'] && $duration <= $master_price_list[$visit_date][0]['A2']['t_end'])
					{
						$visit_type = 'A2';
					}
				}

				//source kvno doctor visit form(hardcoded)
				$kvno_doctor_visits[$k_doc_v]['source'] = 'kvno_doctor_vf';

				$kvno_doctor_visits[$k_doc_v]['visit_type'] = $visit_type;
				$kvno_doctor_visits[$k_doc_v]['visit_price'] = $master_price_list[$visit_date][0][$visit_type]['price'];
				$kvno_doctor_visits[$k_doc_v]['visit_list'] = $master_price_list[$visit_date][0][$visit_type]['list'];
			}

//CONTACT FORMS START
			//get doctor and nurse users
			//get all related users details
			$master_groups_first = array('4', '5');

			$client_user_groups_first = Usergroup::getUserGroups($master_groups_first);

			foreach($client_user_groups_first as $k_group_f => $v_group_f)
			{
				$master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
			}

			$client_users = User::get_clients_users_active($clientid,false,true);

			$nurse_users = array();
			$doctor_users = array();
			foreach($client_users as $k_cuser_det => $v_cuser_det)
			{
				$master_user_details[$v_cuser_det['id']] = $v_cuser_det;
				if(in_array($v_cuser_det['groupid'], $master2client['5']))
				{
					$nurse_users[] = $v_cuser_det['id'];
				}
				else if(in_array($v_cuser_det['groupid'], $master2client['4']))
				{
					$doctor_users[] = $v_cuser_det['id'];
				}
			}

			//get curent contact forms
			$contact_forms = $this->get_period_contact_forms($ipid, $current_period, true, false, true);
			
			$doctor_contact_forms = array();
			$nurse_contact_forms = array();

			foreach($contact_forms as $kcf => $day_cfs)
			{
				foreach($day_cfs as $k_dcf => $v_dcf)
				{
				    // TODO-2697  ISPC Göttingen: Bug after connection Ancuta 17.01.2020
				    //changed so only if create user is doctor- to be listed here
					// if(in_array($v_dcf['create_user'], $doctor_users) || in_array($v_dcf['change_user'], $doctor_users))
					if(in_array($v_dcf['create_user'], $doctor_users)  )
					{
						$doctor_contact_forms[] = $v_dcf;
					}

					// TODO-1734  ISPC:: NIE_Anlage 6 issue Ancuta 17.08.2018
					// changed so only if create user is nurse- to be listed here
					// if(in_array($v_dcf['create_user'], $nurse_users) || in_array($v_dcf['change_user'], $nurse_users))
					if(in_array($v_dcf['create_user'], $nurse_users) )
					{
						$nurse_contact_forms[] = $v_dcf;
					}
				}
			}

			/* --------------------------------- Get nurse visits (contactform) --------------------------------------------------- */
			foreach($nurse_contact_forms as $k_nurse_cf => $v_nurse_cf)
			{
				$nurse_visit_date_cf = date('Y-m-d', strtotime($v_nurse_cf['billable_date']));
				$cf_nurse_visit = array();
				$visit_type = '';
				$duration = $v_nurse_cf['visit_duration'];

				if(in_array($nurse_visit_date_cf, $active_days_cs) && !in_array($nurse_visit_date_cf, $full_hospital_days_cs) && !in_array($nurse_visit_date_cf, $hospiz_days_cs))
				{
					$involved_users_ids[] = $v_nurse_cf['create_user'];

					if($duration >= $master_price_list[$nurse_visit_date_cf][0]['P1']['t_start'] && $duration <= $master_price_list[$nurse_visit_date_cf][0]['P1']['t_end'])
					{
						$visit_type = 'P1';
					}
					else if($duration >= $master_price_list[$nurse_visit_date_cf][0]['P2']['t_start'] && $duration <= $master_price_list[$nurse_visit_date_cf][0]['P2']['t_end'])
					{
						$visit_type = 'P2';
					}
					else if($duration >= $master_price_list[$nurse_visit_date_cf][0]['P3']['t_start'] && $duration <= $master_price_list[$nurse_visit_date_cf][0]['P3']['t_end'])
					{
						$visit_type = 'P3';
					}
				}

				//nurse contact form source
				$v_nurse_cf['source'] = 'nurse_cf';

				$v_nurse_cf['duration'] = $duration;
				$v_nurse_cf['vizit_date'] = $v_nurse_cf['billable_date'];
				$v_nurse_cf['visit_type'] = $visit_type;
				$v_nurse_cf['visit_price'] = $master_price_list[$nurse_visit_date_cf][0][$visit_type]['price'];
				$v_nurse_cf['visit_list'] = $master_price_list[$nurse_visit_date_cf][0][$visit_type]['list'];

				$kvno_nurse_visits[] = $v_nurse_cf;
			}

			/* --------------------------------- Get doctor visits (contactform) -------------------------------------------------- */

			foreach($doctor_contact_forms as $k_doc_cf => $v_doc_cf)
			{
				$doctor_visit_date_cf = date('Y-m-d', strtotime($v_doc_cf['billable_date']));
				$duration = $v_doc_cf['visit_duration'];
				$visit_type = '';

				if(in_array($doctor_visit_date_cf, $real_active_days)) // overall active days including hospital and hospiz days
				{
				    $involved_users_ids[] = $v_doc_cf['create_user'];// pct2 fix - TODO-1734 @author Ancuta 14.08.2018
					if($duration >= $master_price_list[$doctor_visit_date_cf][0]['A1']['t_start'] && $duration <= $master_price_list[$doctor_visit_date_cf][0]['A1']['t_end'])
					{
						$visit_type = 'A1';
					}
					else if($duration >= $master_price_list[$doctor_visit_date_cf][0]['A2']['t_start'] && $duration <= $master_price_list[$doctor_visit_date_cf][0]['A2']['t_end'])
					{
						$visit_type = 'A2';
					}
				}

				//source doctor contactform
				$v_doc_cf['source'] = 'doctor_cf';

				$v_doc_cf['duration'] = $duration;
				//to be shown in anlage6 grid
				$v_doc_cf['kvno_begin_date_h'] = $v_doc_cf['begin_date_h'];
				$v_doc_cf['kvno_begin_date_m'] = $v_doc_cf['begin_date_m'];

				$v_doc_cf['kvno_end_date_h'] = $v_doc_cf['end_date_h'];
				$v_doc_cf['kvno_end_date_m'] = $v_doc_cf['end_date_m'];

				$v_doc_cf['vizit_date'] = $v_doc_cf['billable_date'];
				$v_doc_cf['visit_type'] = $visit_type;
				$v_doc_cf['visit_price'] = $master_price_list[$doctor_visit_date_cf][0][$visit_type]['price'];
				$v_doc_cf['visit_list'] = $master_price_list[$doctor_visit_date_cf][0][$visit_type]['list'];

				$kvno_doctor_visits[] = $v_doc_cf;
			}
//CONTACT FORMS END
			if($_REQUEST['dbgg'])
			{
				print_r("kvno_doctor_visits\n");
				print_r($kvno_doctor_visits);

				print_r("kvno_nurse_visits\n");
				print_r($kvno_nurse_visits);



				print_r("doctor_contact_forms\n");
				print_r($doctor_contact_forms);

				print_r("nurse_contact_forms\n");
				print_r($nurse_contact_forms);
				exit;
			}


			/* --------------------------------- Get admissions & discharge -------------------------------------------------- */
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid));

			foreach($admissions[$ipid]['admissionDates'] as $k_admission => $v_admission)
			{
				$a_start = strtotime(date('Y-m-d', strtotime($v_admission['date'])));
				$a_end = strtotime(date('Y-m-d', strtotime($v_admission['date'])));

				$p_start = strtotime($current_period['start']);
				$p_end = strtotime($current_period['end']);

				//get intersected discharge days
				if(!empty($admissions[$ipid]['dischargeDates'][$k_admission]['date']))
				{
					$d_start = strtotime(date('Y-m-d', strtotime($admissions[$ipid]['dischargeDates'][$k_admission]['date'])));
					$d_end = strtotime(date('Y-m-d', strtotime($admissions[$ipid]['dischargeDates'][$k_admission]['date'])));

					if(Pms_CommonData::isintersected($d_start, $d_end, $p_start, $p_end))
					{
						$readmission_limits['discharge'][] = date('Y-m-d', $d_start);
					}
				}

				//get intersected admitted days
				if(Pms_CommonData::isintersected($a_start, $a_end, $p_start, $p_end))
				{
					$admitted_days[date('Y-m-d', strtotime($v_admission['date']))] = date('Y-m-d', strtotime($v_admission['date']));
					$readmission_limits['admitted'][] = date('Y-m-d', strtotime($v_admission['date']));
					$involved_users_ids[] = $v_admission['create_user'];
				}
			}

			/*			 * * PREPARE DAYS ARRAY START** */
			$days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			foreach($days as $k_day => $v_day)
			{
				if(empty($month_days_arr[date('Y-m-d', strtotime($v_day))]))
				{
					//setup base array
					$month_days_arr[date('Y-m-d', strtotime($v_day))]['visits'] = array();
					if(empty($month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']))
					{
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['E'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['EH'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['P1'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['P2'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['P3'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['A1'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['A2'] = 0;
					}
				}

				//exclude hospital and hospiz days (if admission is in hospiz then is counted as hospiz full day not added to price, same for discharge day)
				if(!in_array($v_day, $full_hospital_days_cs) && !in_array($v_day, $hospiz_days_cs))
				{
					if(in_array($v_day, $active_days_cs))
					{
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['B'] = 1;
					}
					else
					{
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['B'] = 0;
					}
				}
				else
				{
					$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['B'] = 0;
				}
			}



			/*			 * * APPEND DATA TO DAYS ARRAY START ** */
			//append nurse visits to main table ['nurse_visits'] START
			foreach($kvno_nurse_visits as $nv_key => $nv_value)
			{
				if(array_key_exists(date('Y-m-d', strtotime($nv_value['vizit_date'])), $month_days_arr))
				{
					if(!empty($nv_value['visit_type']) && !empty($nv_value['visit_price']) && $nv_value['visit_price'] != '0.00')
					{
						$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['nurse_visits'][] = $nv_value;
						$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['visit_types'][] = $nv_value['visit_type'];
						if(!empty($month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['shortcuts'][$nv_value['visit_type']]))
						{
							$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['shortcuts'][$nv_value['visit_type']] += '1';
						}
						else
						{
							$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['shortcuts'][$nv_value['visit_type']] = '1';
						}
					}
				}
			}
			//append nurse visits to main table ['nurse_visits'] END
			//append doctor visits to main table ['doctor_visits'] START
			foreach($kvno_doctor_visits as $dv_key => $dv_value)
			{
				if(array_key_exists(date('Y-m-d', strtotime($dv_value['vizit_date'])), $month_days_arr))
				{
					if(!empty($dv_value['visit_type']) && !empty($dv_value['visit_price']) && $dv_value['visit_price'] != '0.00')
					{
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['doctor_visits'][] = $dv_value;
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['visit_types'][] = $dv_value['visit_type'];
						if(!empty($month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['shortcuts'][$dv_value['visit_type']]))
						{
							$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['shortcuts'][$dv_value['visit_type']] += '1';
						}
						else
						{
							$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['shortcuts'][$dv_value['visit_type']] = '1';
						}
					}
					else if($dv_value['visit_type'] == '0' && empty($dv_value['visit_price']) && $dv_value['visit_price'] != '0.00' && !in_array(date('Y-m-d', strtotime($dv_value['vizit_date'])), $active_days_cs))
					{
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['doctor_visits'][] = $dv_value;
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['visit_types'][] = $dv_value['visit_type'];
					}
				}
			}
			//append doctor visits to main table ['doctor_visits'] END
			//append admission days if keys(day_of_admission) is in current month START
			$admission_dates_arr = array();
			foreach($active_days_per_admissions as $k_p_adm => $v_p_adm_arr)
			{
				foreach($v_p_adm_arr as $k_adm_day => $v_adm_day)
				{
					// 	if(!in_array($v_adm_day, $hospiz_days_cs) && in_array($v_adm_day, $all_sapv_days_arr) && empty($triggered_admission[$k_p_adm]))
					if(
						!in_array($v_adm_day, $overall_hospiz_days) &&
						in_array($v_adm_day, $all_sapv_days_arr) &&
						in_array($v_adm_day, $admission_dates) &&
						empty($triggered_admission[$k_p_adm])
					)
					{
						$triggered_admission[$k_p_adm] = $v_adm_day;
						$admission_dates_arr[] = $v_adm_day;
					}
					//else if(in_array($v_adm_day, $hospiz_days_cs) && in_array($v_adm_day, $all_sapv_days_arr) && empty($triggered_admission_h[$k_p_adm]))
					else if(
						in_array($v_adm_day, $overall_hospiz_days) &&
						in_array($v_adm_day, $all_sapv_days_arr) &&
						in_array($v_adm_day, $admission_dates) &&
						empty($triggered_admission_h[$k_p_adm])
					)
					{
						$triggered_admission_h[$k_p_adm] = $v_adm_day;
						$admission_dates_arr[] = $v_adm_day;
					}
				}
			}

			$this->view->admission_dates_arr = $admission_dates_arr;


			foreach($triggered_admission as $k_adm_shortcut => $v_adm_shortcut)
			{

				if(array_key_exists($v_adm_shortcut, $month_days_arr))
				{
					$month_days_arr[$v_adm_shortcut]['shortcuts']['E'] = '1';
					$month_days_arr[$v_adm_shortcut]['shortcuts']['EH'] = '0';
				}
			}

			foreach($triggered_admission_h as $k_hadm_shortcut => $v_hadm_shortcut)
			{
				if(array_key_exists($v_hadm_shortcut, $month_days_arr))
				{
					$month_days_arr[$v_hadm_shortcut]['shortcuts']['E'] = '1';
					$month_days_arr[$v_hadm_shortcut]['shortcuts']['EH'] = '1';
				}
			}
			//append admission days if keys(day_of_admission) is in current month END
			//add more data to involved users ids (assigned users and nurse services)
			//assigned users
			$ass_usr = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('epid="' . $epid . '"');
			$usignuser_arr = $ass_usr->fetchArray();

			foreach($usignuser_arr as $value)
			{
				$involved_users_ids[] = $value['userid'];
			}
			
			$modules = new Modules();
			if(!$modules->checkModulePrivileges("99", $logininfo->clientid))
			{
				//nursing services
				$pfleg = Pflegedienstes::getPflegedienstes($ipid);
				
				if($pfleg)
				{
					foreach($pfleg as $k_pfl => $v_pfl)
					{
						//append nursing to involved users array
						$users_involved_str[] = $v_pfl['nursing'];
					}
				}
			}
			else 
			{

			}
			$u_involved_users_ids = array_values(array_unique($involved_users_ids));

			//		print_r($u_involved_users_ids);
			$user = new User();
			$user_details = $user->getMultipleUserDetails($u_involved_users_ids);

			foreach($user_details as $k_user => $v_user)
			{
				$users_involved_str[] = $v_user['user_title'] . ' ' . $v_user['last_name'] . ', ' . $v_user['first_name'];
			}

			//override admission values(E shortcut) START


			$nurse_visit_shortcuts = array("P1", "P2", "P3");

			krsort($nurse_visit_shortcuts);
			$nurse_visit_shortcuts = array_values($nurse_visit_shortcuts);

			foreach($month_days_arr as $k_day => $v_data)
			{
				//sort doctor visits by duration
				$month_days_arr[$k_day]['doctor_visits'] = $this->array_sort($month_days_arr[$k_day]['doctor_visits'], 'duration', SORT_DESC);
				$month_days_arr[$k_day]['doctor_visits'] = array_values($month_days_arr[$k_day]['doctor_visits']);

				$max_day_qty[$k_day] = $client_details[0]['max_nurse_visits'];

				foreach($nurse_visit_shortcuts as $k_short => $v_short)
				{
//					$v_shortcuts_details['day_price_shortcut_' . $v_short] == $v_data['shortcuts'][$v_short]
					if($v_data['shortcuts'][$v_short] > '0')
					{
//						print_r($max_day_qty[$k_day].".(IN)\n");
						if($v_data['shortcuts'][$v_short] >= $max_day_qty[$k_day] && $max_day_qty[$k_day] != '0')
						{
							$value = $max_day_qty[$k_day];
							if(($max_day_qty[$k_day] - $v_data['shortcuts'][$v_short]) > '0')
							{
								$value = ($max_day_qty[$k_day] - $v_data['shortcuts'][$v_short]);
							}
							else
							{
								$value = '0';
							}

							$month_days_arr[$k_day]['shortcuts'][$v_short] = $max_day_qty[$k_day];
						}
						else if($max_day_qty[$k_day] == '0')
						{
							$value = $max_day_qty[$k_day];
							$month_days_arr[$k_day]['shortcuts'][$v_short] = $max_day_qty[$k_day];
						}
						else
						{
							$value = ($max_day_qty[$k_day] - $v_data['shortcuts'][$v_short]);

							$month_days_arr[$k_day]['shortcuts'][$v_short] = $v_data['shortcuts'][$v_short];
						}

						$max_day_qty[$k_day] = $value;
					}
				}
			}

			$anlage_override = Anlage6::get_anlage_shortcut($ipid, $current_period['start'], 'E');
			//		print_r("FIRST !! \n\n");
			//		print_r($month_days_arr);
			//		print_r($anlage_override);

			$saved_data = 0;
			if($anlage_override)
			{
				foreach($anlage_override as $k_anlage => $v_anlage)
				{
					$current_date = date('Y-m-d', strtotime($v_anlage['date']));
					$month_days_arr[$current_date]['shortcuts'][strtoupper($v_anlage['shortcut'])] = $v_anlage['value'];
					if(in_array($current_date, $hospiz_days_cs))
					{
						$month_days_arr[$current_date]['shortcuts']['EH'] = $v_anlage['value'];
					}
				}
				
				$saved_data = 1; 
			}
			
			//		print_r("SECOND !! \n\n");
			//		print_r($month_days_arr);exit;
			//		override admission values(E shortcut) END
			//		print_r($month_days_arr);exit;

			$this->view->saved_data = $saved_data;
			$this->view->month_days_arr = $month_days_arr;
			$this->view->all_sapv_days = $all_sapv_days;
			$this->view->hospiz_days = $hospiz_days_cs;
			$operations = array('0' => 'operation_1', '1' => 'operation_2', '2' => 'operation_3');
			$this->view->operations = $operations;

			$this->view->first_name = $pm['first_name'];
			$this->view->last_name = $pm['last_name'];
			$this->view->dob = $pm['birthd'];
			$this->view->admission_dates = $admission_dates;
			$this->view->users_involved = $users_involved_str;

			$anlage_extra = new Anlage6Extra();
			$saved_extra_data = $anlage_extra->get_anlage_extra_data($ipid, $selected_month);
			$saved_users_involved = $saved_extra_data['related_users'];
			$this->view->saved_users_involved = $saved_users_involved;


			if($this->getRequest()->isPost())
			{
			if($_POST['form_action'] == "pdf" && strlen($_REQUEST['delid']) == '0')
				{
					$master_pdf['ipid'] = $this->view->ipid;
					$master_pdf['clientid'] = $this->view->clientid;
					$master_pdf['month_selected'] = $this->view->month_selected;
					$master_pdf['client_name'] = $this->view->client_name;
					$master_pdf['first_name'] = $this->view->first_name;
					$master_pdf['last_name'] = $this->view->last_name;
					$master_pdf['health_insurance'] = $this->view->health_insurance;
					$master_pdf['dob'] = $this->view->dob;
					$master_pdf['address'] = $this->view->address;
					$master_pdf['ik_nummer'] = $this->view->ik_nummer;
					$master_pdf['shortcuts_admission'] = $this->view->shortcuts_admission;
					$master_pdf['shortcuts_daily'] = $this->view->shortcuts_daily;
					$master_pdf['shortcuts_visits'] = $this->view->shortcuts_visits;
					$master_pdf['used_shortcuts'] = $this->view->used_shortcuts;
					$master_pdf['price_list'] = $this->view->price_list;
					$master_pdf['month_days_arr'] = $this->view->month_days_arr;
					$master_pdf['operations'] = $this->view->operations;
					$master_pdf['used_shortcuts'] = $this->view->used_shortcuts;
					$master_pdf['used_shortcuts_summary'] = $this->view->used_shortcuts_summary;
					$master_pdf['active_days'] = $this->view->active_days;
					$master_pdf['full_hospital_days'] = $this->view->full_hospital_days;
					$master_pdf['hospital_alowed_shortcuts'] = $this->view->hospital_alowed_shortcuts;
					$master_pdf['all_sapv_days'] = $all_sapv_days;
					$master_pdf['admission_dates'] = $admission_dates;
					$master_pdf['lbg_client_name'] = $this->view->lbg_client_name;
					$master_pdf['lbg_address'] = $this->view->lbg_address;
					$master_pdf['lbg_ik_nummer'] = $this->view->lbg_ik_nummer;
					$master_pdf['involved_users'] = $_POST['involved_users'];
					$master_pdf['post_data'] = $_POST;

					if($_REQUEST['old_version'] == "1" )
					{
    					$gen_pdf = $this->generate_pdf($master_pdf, 'anlage6', 'anlage6pdf.html');
					} 
					else
					{
    					$gen_pdf = $this->generate_pdf($master_pdf, 'anlage6', 'anlage6pdf_new.html');
					}
				}
			}
		}
		
		
		
		public function anlage6multipleAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);

			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;


			/* Get client data */
			$client_data = new Client();
			$client_details = $client_data->getClientDataByid($clientid);

			/* ----------------------------- SAVE form ------------------------------- */
			if($this->getRequest()->isPost() )
			{
			    
			    if(!empty($_POST['print_period'])){
			        $print_array = explode("_",$_POST['print_period']);
			        $type = $print_array[0]; 
			        $section_id = $print_array[1]; 
			        $current_period['start'] = date('Y-m-d',strtotime($print_array[2])); 
			        $current_period['end'] = date('Y-m-d',strtotime($print_array[3])); 
			    }
			}

			/* ----------------------------- Get patient details ------------------------------- */
			$patientmaster = new PatientMaster();
// 			$pm = $patientmaster->getMasterData($decid, 0);
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$pm = $patientmaster->get_patientMasterData();
			$this->view->patientdetails = $pm;

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ----------------------------------Get client details ------------------------------------- */
			if($clientid != '0' || !empty($clientid))
			{
				$cust = Doctrine_Query::create()
					->select("*,AES_DECRYPT(lbg_sapv_provider,'" . Zend_Registry::get('salt') . "') as lbg_sapv_provider,
					AES_DECRYPT(lbg_street,'" . Zend_Registry::get('salt') . "') as lbg_street,
					AES_DECRYPT(lbg_postcode,'" . Zend_Registry::get('salt') . "') as lbg_postcode,
					AES_DECRYPT(lbg_city,'" . Zend_Registry::get('salt') . "') as lbg_city,
					AES_DECRYPT(lbg_institutskennzeichen,'" . Zend_Registry::get('salt') . "') as lbg_institutskennzeichen")
					->from('Client')
					->where('id = ' . $clientid);
				$client_details = $cust->fetchArray();

				$this->view->lbg_client_name = $client_details[0]['lbg_sapv_provider'];

				$address = $client_details[0]['lbg_street'];

				if($client_details[0]['lbg_postcode'])
				{
					$address .= ', ' . $client_details[0]['lbg_postcode'];
				}

				if($client_details[0]['lbg_city'])
				{
					$address .= ', ' . $client_details[0]['lbg_city'];
				}

				$this->view->lbg_address = $address;
				$this->view->lbg_ik_nummer = $client_details[0]['lbg_institutskennzeichen'];
			}


			/* ----------------------------- Get patient health insurance ------------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$pathealthinsurancenr = "";
			if(strlen($healthinsu_array[0]['insurance_no']) > 0 && $healthinsu_array[0]['insurance_no'] != '0')
			{
				$pathealthinsurancenr = $healthinsu_array[0]['insurance_no'];
			}
			else
			{
				$pathealthinsurancenr = "--";
			}

			$this->view->health_insurance = $pathealthinsurancenr;


			/* -------------------------- Get admission-readmission cycles to extract months where there is at least 1 day active START ------------------- */
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$months = array();
			$active_days = array();
			$active_days_per_admissions = array();
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));
						$discharge_dates[] = $end_with_discharge;

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						if(empty($active_days_per_admissions[$key_adm]))
						{
							$active_days_per_admissions[$key_adm] = array();
						}
						$active_days_per_admissions[$key_adm] = array_merge($active_days_per_admissions[$key_adm], $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));

						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end_with_discharge));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());
						$discharge_dates[] = $end_without_discharge;

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						if(empty($active_days_per_admissions[$key_adm]))
						{
							$active_days_per_admissions[$key_adm] = array();
						}
						$active_days_per_admissions[$key_adm] = array_merge($active_days_per_admissions[$key_adm], $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));

						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{
					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}

				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				if(empty($active_days_per_admissions[0]))
				{
					$active_days_per_admissions[0] = array();
				}
				$active_days_per_admissions[0] = array_merge($active_days_per_admissions[0], $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
			}
			$active_days = array_values(array_unique($active_days));





			/* ---------------------------------Get number of days in each month + start/end day  -------------------------------------------------- */
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}
			$this->view->months_periods = $months_details;

			/* ---------------------------------check if a month is selected  -------------------------------------------------- */
			if(empty($_REQUEST['list']))
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));


			/* --------------------------------- construct month_selector  -------------------------------------------------- */
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_anlage_6';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);

			/* ---------------------------------set current period to work with  -------------------------------------------------- */
// 			$current_period = $months_details[$selected_month];




			/* --------------------------------- Find if there is a sapv for current period   -------------------------------------------------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$all_sapv_res = $dropSapv->fetchArray();

			$all_sapv_days_arr = array();
			foreach($all_sapv_res as $k_sapv_res => $v_sapv_res)
			{
				$all_s_start = date('Y-m-d', strtotime($v_sapv_res['verordnungam']));
				$all_s_end = date('Y-m-d', strtotime($v_sapv_res['verordnungbis']));


				$temp_all_sapv_days = $patientmaster->getDaysInBetween($all_s_start, $all_s_end);
				$all_sapv_days_arr = array_merge($all_sapv_days_arr, $temp_all_sapv_days);
			}

			$dropSapv->andWhere('"' . date('Y-m-d', strtotime($current_period['start'])) . '" <= verordnungbis');
			$dropSapv->andWhere('"' . date('Y-m-d', strtotime($current_period['end'])) . '" >= verordnungam');
			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();

			foreach($droparray as $k_sapv => $v_sapv)
			{
				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);
				$all_sapv_days = array_merge($all_sapv_days, $temp_sapv_days);
			}

			##############################################################
			###################### Client settings #######################
			##############################################################
			$conditions['periods'] = array('0' => array('start' => "2008-01-01", 'end' => date("Y-m-d")));
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			foreach($patient_days as $k_ipid => $v_pat_data)
			{
			    $adm_substitute = 1;
			    foreach($v_pat_data['active_periods'] as $period_identification => $period_details)
			    {
			        	
			        $admission_periods[$ipid][$adm_substitute ]['start'] = $period_details['start'];
			        $admission_periods[$ipid][$adm_substitute ]['end'] = $period_details['end'];
			        $admission_ids[$ipid][] = $adm_substitute ;
			        $adm_substitute++;
			    }
			}
			
			$admission_periods = $admission_periods[$ipid];
			$this->view->admission_periods = $admission_periods;
			
			$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid));
			$sapv_periods = $patients_sapv_periods[$ipid];
			$this->view->sapv_periods = $sapv_periods;
			
			
			// all active days of patient including hospital and hospiz
			$real_active_days = $patient_days[$ipid]['real_active_days'];

			foreach($real_active_days as $k_ractive => $v_ractive)
			{
				$real_active_days[$k_ractive] = date('Y-m-d', strtotime($v_ractive));
			}

			$this->view->active_days = $real_active_days;

			// hospital days according to  client settings
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];

			foreach($hospital_days_cs as $k_hospital_cs => $v_hospital_cs)
			{
				$full_hospital_days_cs[$k_hospital_cs] = date('Y-m-d', strtotime($v_hospital_cs));
			}
			$this->view->full_hospital_days = $full_hospital_days_cs;


			// hospiz days according to  client settings
			$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];

			foreach($hospiz_days_cs as $k_hospiz_cs => $v_hospiz_cs)
			{
				$hospiz_days_cs[$k_hospiz_cs] = date('Y-m-d', strtotime($v_hospiz_cs));
			}

			// hospiz days - overall hopsiz days of patient - no client settings
			$overall_hospiz_days = $patient_days[$ipid]['hospiz']['real_days'];

			foreach($overall_hospiz_days as $k_hospiz => $v_hospiz)
			{
				$overall_hospiz_days[$k_hospiz] = date('Y-m-d', strtotime($v_hospiz));
			}

			// active days of patient according to client settings: no hospital, no hospiz
			$patient_cycle_days_cs = $patient_days[$ipid]['treatment_days'];

			foreach($patient_cycle_days_cs as $k_pat_cycle_cs => $v_pat_cycle_cs)
			{
				$active_days_cs[$k_pat_cycle_cs] = date('Y-m-d', strtotime($v_pat_cycle_cs));
			}

			// admission days of patient
			foreach($patient_days[$ipid]['active_periods'] as $per => $dper)
			{
				$admission_dates[] = date('Y-m-d', strtotime($dper['start']));
			}

			if($_REQUEST['csdbg'])
			{
				print_r($active_days_per_admissions);

				print_r("\n  active days of patient including hospital and hospiz\n");
				print_r($real_active_days);

				print_r("\n CS hospital_days\n");
				print_r($hospital_days_cs);

				print_r("CS hospiz_days\n");
				print_r($hospiz_days_cs);

				print_r("Old active_days\n");
				print_r($active_days);

				print_r("CS active_days\n");
				print_r($active_days_cs);

				print_r("Conditions\n");
				print_r($conditions);

				print_r($patient_days);
				exit;
			}
			######################################################

			/* --------------------------------- Get price shortcuts -------------------------------------------------- */
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$this->view->shortcuts_admission = $shortcuts['admission'];
			$this->view->shortcuts_daily = $shortcuts['daily'];
			$this->view->shortcuts_visits = $shortcuts['visits'];
			$this->view->used_shortcuts = array('E', 'EH', 'B', 'P1', 'P2', 'P3', 'A1', 'A2');
			$this->view->used_shortcuts_summary = array('E', 'B', 'P1', 'P2', 'P3', 'A1', 'A2');
			$this->view->grouped_row = array('E', 'EH');
			$this->view->hospital_alowed_shortcuts = array('A1', 'A2');

			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			$this->view->price_list = $master_price_list;


			/* --------------------------------- Get nurse visits (hardcoded visit form) -------------------------------------------------- */
			$nurse_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid ="' . $ipid . '"')
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');

			$nurse_v = $nurse_from_course->fetchArray();
			$deleted_nurse_visits[] = '9999999999999999';

			foreach($nurse_v as $k_nurse_k => $v_nurse_v)
			{
				$deleted_nurse_visits[] = $v_nurse_v['recordid'];
			}

			$knurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->where('ipid = "' . $ipid . '"')
				->andWhereNotIn('id', $deleted_nurse_visits)
				//->andWhere('MONTH(vizit_date) = MONTH("' . $current_period['start'] . '") AND YEAR(vizit_date) = YEAR("' . $current_period['start'] . '") ')
				->andWhere('DATE(vizit_date) BETWEEN "' . $current_period['start'] . '" and "' . $current_period['end'] . '"')
				->andWhere('isdelete ="0"')
				->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
			$kvno_nurse_visits = $knurse_visits->fetchArray();
			$involved_users_ids[] = '999999999';

			//calculate nurse visits duration START
			foreach($kvno_nurse_visits as $k_nurse_v => $v_nurse_v)
			{
				$nurse_visit_date = date('Y-m-d', strtotime($v_nurse_v['vizit_date']));
				$duration = Pms_CommonData::calculate_visit_duration($v_nurse_v['kvno_begin_date_h'], $v_nurse_v['kvno_end_date_h'], $v_nurse_v['kvno_begin_date_m'], $v_nurse_v['kvno_end_date_m'], $v_nurse_v['vizit_date']);
				$kvno_nurse_visits[$k_nurse_v]['duration'] = $duration;
				$visit_type = '';
				$visit_type = '0';


				if(in_array($nurse_visit_date, $active_days_cs) && !in_array($nurse_visit_date, $full_hospital_days_cs) && !in_array($nurse_visit_date, $hospiz_days_cs))
				{
					$involved_users_ids[] = $v_nurse_v['create_user'];
					if($duration >= $master_price_list[$nurse_visit_date][0]['P1']['t_start'] && $duration <= $master_price_list[$nurse_visit_date][0]['P1']['t_end'])
					{
						$visit_type = 'P1';
					}
					else if($duration >= $master_price_list[$nurse_visit_date][0]['P2']['t_start'] && $duration <= $master_price_list[$nurse_visit_date][0]['P2']['t_end'])
					{
						$visit_type = 'P2';
					}
					else if($duration >= $master_price_list[$nurse_visit_date][0]['P3']['t_start'] && $duration <= $master_price_list[$nurse_visit_date][0]['P3']['t_end'])
					{
						$visit_type = 'P3';
					}
				}

				//source kvno nurse visit form(hardcoded)
				$kvno_nurse_visits[$k_nurse_v]['source'] = 'kvno_nurse_vf';

				$kvno_nurse_visits[$k_nurse_v]['visit_type'] = $visit_type;
				$kvno_nurse_visits[$k_nurse_v]['visit_price'] = $master_price_list[$nurse_visit_date][0][$visit_type]['price'];
				$kvno_nurse_visits[$k_nurse_v]['visit_list'] = $master_price_list[$nurse_visit_date][0][$visit_type]['list'];
			}


			/* --------------------------------- Get doctor visits (hardcoded doctor form) -------------------------------------------------- */
			$doc_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid ="' . $ipid . '"')
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$doc_v = $doc_from_course->fetchArray();

			$deleted_doctor_visits[] = '99999999999999999';
			foreach($doc_v as $k_doc_v => $v_doc_v)
			{
				$deleted_doctor_visits[] = $v_doc_v['recordid'];
			}

			$kdoctor_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoDoctor")
				->where('ipid = "' . $ipid . '"')
				->andWhereNotIn('id', $deleted_doctor_visits)
				//->andWhere('MONTH(vizit_date) = MONTH("' . $current_period['start'] . '") AND YEAR(vizit_date) = YEAR("' . $current_period['start'] . '") ')
				->andWhere('DATE(vizit_date) BETWEEN "' . $current_period['start'] . '" and "' . $current_period['end'] . '"')
				->orderBy('kvno_begin_date_h, kvno_begin_date_m ASC');
			$kvno_doctor_visits = $kdoctor_visits->fetchArray();

			//calculate doctor visits duration START
			foreach($kvno_doctor_visits as $k_doc_v => $v_doc_v)
			{
				$visit_date = date('Y-m-d', strtotime($v_doc_v['vizit_date']));

				$duration = Pms_CommonData::calculate_visit_duration($v_doc_v['kvno_begin_date_h'], $v_doc_v['kvno_end_date_h'], $v_doc_v['kvno_begin_date_m'], $v_doc_v['kvno_end_date_m'], $v_doc_v['vizit_date']);
				$kvno_doctor_visits[$k_doc_v]['duration'] = $duration;
				$visit_type = '0';

				if(in_array($visit_date, $real_active_days)) // overall active days including hospital and hospiz days
				{
					$involved_users_ids[] = $v_doc_v['create_user'];
					if($duration >= $master_price_list[$visit_date][0]['A1']['t_start'] && $duration <= $master_price_list[$visit_date][0]['A1']['t_end'])
					{
						$visit_type = 'A1';
					}
					else if($duration >= $master_price_list[$visit_date][0]['A2']['t_start'] && $duration <= $master_price_list[$visit_date][0]['A2']['t_end'])
					{
						$visit_type = 'A2';
					}
				}

				//source kvno doctor visit form(hardcoded)
				$kvno_doctor_visits[$k_doc_v]['source'] = 'kvno_doctor_vf';

				$kvno_doctor_visits[$k_doc_v]['visit_type'] = $visit_type;
				$kvno_doctor_visits[$k_doc_v]['visit_price'] = $master_price_list[$visit_date][0][$visit_type]['price'];
				$kvno_doctor_visits[$k_doc_v]['visit_list'] = $master_price_list[$visit_date][0][$visit_type]['list'];
			}

//CONTACT FORMS START
			//get doctor and nurse users
			//get all related users details
			$master_groups_first = array('4', '5');

			$client_user_groups_first = Usergroup::getUserGroups($master_groups_first);

			foreach($client_user_groups_first as $k_group_f => $v_group_f)
			{
				$master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
			}

			$client_users = User::getClientsUsers($clientid);

			$nurse_users = array();
			$doctor_users = array();
			foreach($client_users as $k_cuser_det => $v_cuser_det)
			{
				$master_user_details[$v_cuser_det['id']] = $v_cuser_det;
				if(in_array($v_cuser_det['groupid'], $master2client['5']))
				{
					$nurse_users[] = $v_cuser_det['id'];
				}
				else if(in_array($v_cuser_det['groupid'], $master2client['4']))
				{
					$doctor_users[] = $v_cuser_det['id'];
				}
			}

			//get curent contact forms
			$contact_forms = $this->get_period_contact_forms($ipid, $current_period, true,true);

			$doctor_contact_forms = array();
			$nurse_contact_forms = array();

			foreach($contact_forms as $kcf => $day_cfs)
			{
				foreach($day_cfs as $k_dcf => $v_dcf)
				{
				    //TODO-3021 Ancuta 25.03.2020
					//if(in_array($v_dcf['create_user'], $doctor_users) || in_array($v_dcf['change_user'], $doctor_users))
					if(in_array($v_dcf['create_user'], $doctor_users) )
					{
						$doctor_contact_forms[] = $v_dcf;
					}

					//TODO-3021 Ancuta 25.03.2020
					//if(in_array($v_dcf['create_user'], $nurse_users) || in_array($v_dcf['change_user'], $nurse_users))
					if(in_array($v_dcf['create_user'], $nurse_users) )
					{
						$nurse_contact_forms[] = $v_dcf;
					}
				}
			}

			/* --------------------------------- Get nurse visits (contactform) --------------------------------------------------- */
			foreach($nurse_contact_forms as $k_nurse_cf => $v_nurse_cf)
			{
				$nurse_visit_date_cf = date('Y-m-d', strtotime($v_nurse_cf['billable_date']));
				$cf_nurse_visit = array();
				$visit_type = '';
				$duration = $v_nurse_cf['visit_duration'];

				if(in_array($nurse_visit_date_cf, $active_days_cs) && !in_array($nurse_visit_date_cf, $full_hospital_days_cs) && !in_array($nurse_visit_date_cf, $hospiz_days_cs))
				{
					$involved_users_ids[] = $v_nurse_cf['create_user'];

					if($duration >= $master_price_list[$nurse_visit_date_cf][0]['P1']['t_start'] && $duration <= $master_price_list[$nurse_visit_date_cf][0]['P1']['t_end'])
					{
						$visit_type = 'P1';
					}
					else if($duration >= $master_price_list[$nurse_visit_date_cf][0]['P2']['t_start'] && $duration <= $master_price_list[$nurse_visit_date_cf][0]['P2']['t_end'])
					{
						$visit_type = 'P2';
					}
					else if($duration >= $master_price_list[$nurse_visit_date_cf][0]['P3']['t_start'] && $duration <= $master_price_list[$nurse_visit_date_cf][0]['P3']['t_end'])
					{
						$visit_type = 'P3';
					}
				}

				//nurse contact form source
				$v_nurse_cf['source'] = 'nurse_cf';

				$v_nurse_cf['duration'] = $duration;
				$v_nurse_cf['vizit_date'] = $v_nurse_cf['billable_date'];
				$v_nurse_cf['visit_type'] = $visit_type;
				$v_nurse_cf['visit_price'] = $master_price_list[$nurse_visit_date_cf][0][$visit_type]['price'];
				$v_nurse_cf['visit_list'] = $master_price_list[$nurse_visit_date_cf][0][$visit_type]['list'];

				$kvno_nurse_visits[] = $v_nurse_cf;
			}

			/* --------------------------------- Get doctor visits (contactform) -------------------------------------------------- */

			foreach($doctor_contact_forms as $k_doc_cf => $v_doc_cf)
			{
				$doctor_visit_date_cf = date('Y-m-d', strtotime($v_doc_cf['billable_date']));
				$duration = $v_doc_cf['visit_duration'];
				$visit_type = '';

				if(in_array($doctor_visit_date_cf, $real_active_days)) // overall active days including hospital and hospiz days
				{
					$involved_users_ids[] = $v_doc_v['create_user'];
					if($duration >= $master_price_list[$doctor_visit_date_cf][0]['A1']['t_start'] && $duration <= $master_price_list[$doctor_visit_date_cf][0]['A1']['t_end'])
					{
						$visit_type = 'A1';
					}
					else if($duration >= $master_price_list[$doctor_visit_date_cf][0]['A2']['t_start'] && $duration <= $master_price_list[$doctor_visit_date_cf][0]['A2']['t_end'])
					{
						$visit_type = 'A2';
					}
				}

				//source doctor contactform
				$v_doc_cf['source'] = 'doctor_cf';

				$v_doc_cf['duration'] = $duration;
				//to be shown in anlage6 grid
				$v_doc_cf['kvno_begin_date_h'] = $v_doc_cf['begin_date_h'];
				$v_doc_cf['kvno_begin_date_m'] = $v_doc_cf['begin_date_m'];

				$v_doc_cf['kvno_end_date_h'] = $v_doc_cf['end_date_h'];
				$v_doc_cf['kvno_end_date_m'] = $v_doc_cf['end_date_m'];

				$v_doc_cf['vizit_date'] = $v_doc_cf['billable_date'];
				$v_doc_cf['visit_type'] = $visit_type;
				$v_doc_cf['visit_price'] = $master_price_list[$doctor_visit_date_cf][0][$visit_type]['price'];
				$v_doc_cf['visit_list'] = $master_price_list[$doctor_visit_date_cf][0][$visit_type]['list'];

				$kvno_doctor_visits[] = $v_doc_cf;
			}
//CONTACT FORMS END
			if($_REQUEST['dbgg'])
			{
				print_r("kvno_doctor_visits\n");
				print_r($kvno_doctor_visits);

				print_r("kvno_nurse_visits\n");
				print_r($kvno_nurse_visits);



				print_r("doctor_contact_forms\n");
				print_r($doctor_contact_forms);

				print_r("nurse_contact_forms\n");
				print_r($nurse_contact_forms);
				exit;
			}


			/* --------------------------------- Get admissions & discharge -------------------------------------------------- */
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid));

			foreach($admissions[$ipid]['admissionDates'] as $k_admission => $v_admission)
			{
				$a_start = strtotime(date('Y-m-d', strtotime($v_admission['date'])));
				$a_end = strtotime(date('Y-m-d', strtotime($v_admission['date'])));

				$p_start = strtotime($current_period['start']);
				$p_end = strtotime($current_period['end']);

				//get intersected discharge days
				if(!empty($admissions[$ipid]['dischargeDates'][$k_admission]['date']))
				{
					$d_start = strtotime(date('Y-m-d', strtotime($admissions[$ipid]['dischargeDates'][$k_admission]['date'])));
					$d_end = strtotime(date('Y-m-d', strtotime($admissions[$ipid]['dischargeDates'][$k_admission]['date'])));

					if(Pms_CommonData::isintersected($d_start, $d_end, $p_start, $p_end))
					{
						$readmission_limits['discharge'][] = date('Y-m-d', $d_start);
					}
				}

				//get intersected admitted days
				if(Pms_CommonData::isintersected($a_start, $a_end, $p_start, $p_end))
				{
					$admitted_days[date('Y-m-d', strtotime($v_admission['date']))] = date('Y-m-d', strtotime($v_admission['date']));
					$readmission_limits['admitted'][] = date('Y-m-d', strtotime($v_admission['date']));
					$involved_users_ids[] = $v_admission['create_user'];
				}
			}

			/*			 * * PREPARE DAYS ARRAY START** */
			$days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			foreach($days as $k_day => $v_day)
			{
				if(empty($month_days_arr[date('Y-m-d', strtotime($v_day))]))
				{
					//setup base array
					$month_days_arr[date('Y-m-d', strtotime($v_day))]['visits'] = array();
					if(empty($month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']))
					{
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['E'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['EH'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['P1'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['P2'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['P3'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['A1'] = 0;
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['A2'] = 0;
					}
				}

				//exclude hospital and hospiz days (if admission is in hospiz then is counted as hospiz full day not added to price, same for discharge day)
				if(!in_array($v_day, $full_hospital_days_cs) && !in_array($v_day, $hospiz_days_cs))
				{
					if(in_array($v_day, $active_days_cs))
					{
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['B'] = 1;
					}
					else
					{
						$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['B'] = 0;
					}
				}
				else
				{
					$month_days_arr[date('Y-m-d', strtotime($v_day))]['shortcuts']['B'] = 0;
				}
				
				
				
				
				$ym = date('Y', strtotime($v_day)).'-'.date('m', strtotime($v_day));
				$year_months_array[$ym][] = $v_day;
					
				if(!function_exists('cal_days_in_month'))
				{
				    $system_year_months_array[$ym] = date('t', mktime(0, 0, 0, date("n", strtotime($ym . "-01")), 1, date("Y", strtotime($ym . "-01"))));
				}
				else
				{
				    $system_year_months_array[$ym] = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($ym . "-01")), date("Y", strtotime($ym . "-01")));
				}
				
			}

			/*			 * * APPEND DATA TO DAYS ARRAY START ** */
			//append nurse visits to main table ['nurse_visits'] START
			foreach($kvno_nurse_visits as $nv_key => $nv_value)
			{
				if(array_key_exists(date('Y-m-d', strtotime($nv_value['vizit_date'])), $month_days_arr))
				{
					if(!empty($nv_value['visit_type']) && !empty($nv_value['visit_price']) && $nv_value['visit_price'] != '0.00')
					{
						$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['nurse_visits'][] = $nv_value;
						$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['visit_types'][] = $nv_value['visit_type'];
						if(!empty($month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['shortcuts'][$nv_value['visit_type']]))
						{
							$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['shortcuts'][$nv_value['visit_type']] += '1';
						}
						else
						{
							$month_days_arr[date('Y-m-d', strtotime($nv_value['vizit_date']))]['shortcuts'][$nv_value['visit_type']] = '1';
						}
					}
				}
			}
			//append nurse visits to main table ['nurse_visits'] END
			//append doctor visits to main table ['doctor_visits'] START
			foreach($kvno_doctor_visits as $dv_key => $dv_value)
			{
				if(array_key_exists(date('Y-m-d', strtotime($dv_value['vizit_date'])), $month_days_arr))
				{
					if(!empty($dv_value['visit_type']) && !empty($dv_value['visit_price']) && $dv_value['visit_price'] != '0.00')
					{
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['doctor_visits'][] = $dv_value;
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['visit_types'][] = $dv_value['visit_type'];
						if(!empty($month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['shortcuts'][$dv_value['visit_type']]))
						{
							$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['shortcuts'][$dv_value['visit_type']] += '1';
						}
						else
						{
							$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['shortcuts'][$dv_value['visit_type']] = '1';
						}
					}
					else if($dv_value['visit_type'] == '0' && empty($dv_value['visit_price']) && $dv_value['visit_price'] != '0.00' && !in_array(date('Y-m-d', strtotime($dv_value['vizit_date'])), $active_days_cs))
					{
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['doctor_visits'][] = $dv_value;
						$month_days_arr[date('Y-m-d', strtotime($dv_value['vizit_date']))]['visit_types'][] = $dv_value['visit_type'];
					}
				}
			}
			//append doctor visits to main table ['doctor_visits'] END
			//append admission days if keys(day_of_admission) is in current month START
			$admission_dates_arr = array();
			foreach($active_days_per_admissions as $k_p_adm => $v_p_adm_arr)
			{
				foreach($v_p_adm_arr as $k_adm_day => $v_adm_day)
				{
					// 	if(!in_array($v_adm_day, $hospiz_days_cs) && in_array($v_adm_day, $all_sapv_days_arr) && empty($triggered_admission[$k_p_adm]))
					if(
						!in_array($v_adm_day, $overall_hospiz_days) &&
						in_array($v_adm_day, $all_sapv_days_arr) &&
						in_array($v_adm_day, $admission_dates) &&
						empty($triggered_admission[$k_p_adm])
					)
					{
						$triggered_admission[$k_p_adm] = $v_adm_day;
						$admission_dates_arr[] = $v_adm_day;
					}
					//else if(in_array($v_adm_day, $hospiz_days_cs) && in_array($v_adm_day, $all_sapv_days_arr) && empty($triggered_admission_h[$k_p_adm]))
					else if(
						in_array($v_adm_day, $overall_hospiz_days) &&
						in_array($v_adm_day, $all_sapv_days_arr) &&
						in_array($v_adm_day, $admission_dates) &&
						empty($triggered_admission_h[$k_p_adm])
					)
					{
						$triggered_admission_h[$k_p_adm] = $v_adm_day;
						$admission_dates_arr[] = $v_adm_day;
					}
				}
			}

			$this->view->admission_dates_arr = $admission_dates_arr;


			foreach($triggered_admission as $k_adm_shortcut => $v_adm_shortcut)
			{

				if(array_key_exists($v_adm_shortcut, $month_days_arr))
				{
					$month_days_arr[$v_adm_shortcut]['shortcuts']['E'] = '1';
					$month_days_arr[$v_adm_shortcut]['shortcuts']['EH'] = '0';
				}
			}

			foreach($triggered_admission_h as $k_hadm_shortcut => $v_hadm_shortcut)
			{
				if(array_key_exists($v_hadm_shortcut, $month_days_arr))
				{
					$month_days_arr[$v_hadm_shortcut]['shortcuts']['E'] = '1';
					$month_days_arr[$v_hadm_shortcut]['shortcuts']['EH'] = '1';
				}
			}
			//append admission days if keys(day_of_admission) is in current month END
			//add more data to involved users ids (assigned users and nurse services)
			//assigned users
			$ass_usr = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('epid="' . $epid . '"');
			$usignuser_arr = $ass_usr->fetchArray();

			foreach($usignuser_arr as $value)
			{
				$involved_users_ids[] = $value['userid'];
			}
			
			$modules = new Modules();
			if(!$modules->checkModulePrivileges("99", $logininfo->clientid))
			{
				//nursing services
				$pfleg = Pflegedienstes::getPflegedienstes($ipid);
				
				if($pfleg)
				{
					foreach($pfleg as $k_pfl => $v_pfl)
					{
						//append nursing to involved users array
						$users_involved_str[] = $v_pfl['nursing'];
					}
				}
			}
			else 
			{

			}
			$u_involved_users_ids = array_values(array_unique($involved_users_ids));

			//		print_r($u_involved_users_ids);
			$user = new User();
			$user_details = $user->getMultipleUserDetails($u_involved_users_ids);

			foreach($user_details as $k_user => $v_user)
			{
				$users_involved_str[] = $v_user['user_title'] . ' ' . $v_user['last_name'] . ', ' . $v_user['first_name'];
			}

			//override admission values(E shortcut) START


			$nurse_visit_shortcuts = array("P1", "P2", "P3");

			krsort($nurse_visit_shortcuts);
			$nurse_visit_shortcuts = array_values($nurse_visit_shortcuts);

			foreach($month_days_arr as $k_day => $v_data)
			{
				//sort doctor visits by duration
				$month_days_arr[$k_day]['doctor_visits'] = $this->array_sort($month_days_arr[$k_day]['doctor_visits'], 'duration', SORT_DESC);
				$month_days_arr[$k_day]['doctor_visits'] = array_values($month_days_arr[$k_day]['doctor_visits']);

				$max_day_qty[$k_day] = $client_details[0]['max_nurse_visits'];

				foreach($nurse_visit_shortcuts as $k_short => $v_short)
				{
//					$v_shortcuts_details['day_price_shortcut_' . $v_short] == $v_data['shortcuts'][$v_short]
					if($v_data['shortcuts'][$v_short] > '0')
					{
//						print_r($max_day_qty[$k_day].".(IN)\n");
						if($v_data['shortcuts'][$v_short] >= $max_day_qty[$k_day] && $max_day_qty[$k_day] != '0')
						{
							$value = $max_day_qty[$k_day];
							if(($max_day_qty[$k_day] - $v_data['shortcuts'][$v_short]) > '0')
							{
								$value = ($max_day_qty[$k_day] - $v_data['shortcuts'][$v_short]);
							}
							else
							{
								$value = '0';
							}

							$month_days_arr[$k_day]['shortcuts'][$v_short] = $max_day_qty[$k_day];
						}
						else if($max_day_qty[$k_day] == '0')
						{
							$value = $max_day_qty[$k_day];
							$month_days_arr[$k_day]['shortcuts'][$v_short] = $max_day_qty[$k_day];
						}
						else
						{
							$value = ($max_day_qty[$k_day] - $v_data['shortcuts'][$v_short]);

							$month_days_arr[$k_day]['shortcuts'][$v_short] = $v_data['shortcuts'][$v_short];
						}

						$max_day_qty[$k_day] = $value;
					}
				}
			}

// 			$anlage_override = Anlage6::get_anlage_shortcut($ipid, $current_period['start'], 'E');
			$anlage_override = Anlage6::get_all_anlage_shortcut($ipid, 'E');
// 			print_r($anlage_override); exit;
			$saved_data = 0;
			if($anlage_override)
			{
				foreach($anlage_override as $k_anlage => $v_anlage)
				{
					$current_date = date('Y-m-d', strtotime($v_anlage['date']));
					$month_days_arr[$current_date]['shortcuts'][strtoupper($v_anlage['shortcut'])] = $v_anlage['value'];
					if(in_array($current_date, $hospiz_days_cs))
					{
						$month_days_arr[$current_date]['shortcuts']['EH'] = $v_anlage['value'];
					}
				}
				
				$saved_data = 1; 
			}

			
			$this->view->sys_months_array = $system_year_months_array;
			
			
			foreach($system_year_months_array as $m=>$nrd){
			    $start_month[$m] = $m.'-01';
			    $end_month[$m] = $m.'-'.$nrd;
			    $months_days_listed[$m] = PatientMaster::getDaysInBetween($start_month[$m], $end_month[$m]);
			}
			
			
			
			// split details per month
			$month_id ="";
			foreach($month_days_arr as $date =>$details){
			    $month_id = date("Y-m",strtotime($date));
			    foreach($months_days_listed[$month_id ] as $k=>$mdate){
			        if($month_days_arr[$mdate] && in_array($mdate,$days)){
       			      $month_based[$month_id][$mdate] = $month_days_arr[$mdate];
			        } else{
       			      $month_based[$month_id][$mdate] = array();
			        }			            
			    }
			    
			}
			
			$this->view->saved_data = $saved_data;
			$this->view->month_days_arr = $month_days_arr;
			$this->view->all_sapv_days = $all_sapv_days;
			$this->view->hospiz_days = $hospiz_days_cs;
			$operations = array('0' => 'operation_1', '1' => 'operation_2', '2' => 'operation_3');
			$this->view->operations = $operations;

			$this->view->first_name = $pm['first_name'];
			$this->view->last_name = $pm['last_name'];
			$this->view->dob = $pm['birthd'];
			$this->view->admission_dates = $admission_dates;
			$this->view->users_involved = $users_involved_str;

			$anlage_extra = new Anlage6Extra();
			
			
			$all_saved_extra_data = $anlage_extra->get_all_anlage_extra_data($ipid); //get saved data for all period
			
			foreach($all_saved_extra_data as $k=>$spinfo){
			    $saved_involved_users[$spinfo['period']] = $spinfo['related_users']; 
			}
			$system_involved_users = implode(',',$users_involved_str); 
			
			
	      // saved datata - for admission - select all not only start period	
//         print_r($month_based); exit;
			
			
 
					$master_pdf['ipid'] = $this->view->ipid;
					$master_pdf['clientid'] = $this->view->clientid;
					$master_pdf['month_selected'] = $this->view->month_selected;
					$master_pdf['client_name'] = $this->view->client_name;
					$master_pdf['first_name'] = $this->view->first_name;
					$master_pdf['last_name'] = $this->view->last_name;
					$master_pdf['health_insurance'] = $this->view->health_insurance;
					$master_pdf['dob'] = $this->view->dob;
					$master_pdf['address'] = $this->view->address;
					$master_pdf['ik_nummer'] = $this->view->ik_nummer;
					$master_pdf['shortcuts_admission'] = $this->view->shortcuts_admission;
					$master_pdf['shortcuts_daily'] = $this->view->shortcuts_daily;
					$master_pdf['shortcuts_visits'] = $this->view->shortcuts_visits;
					$master_pdf['used_shortcuts'] = $this->view->used_shortcuts;
					$master_pdf['price_list'] = $this->view->price_list;
					$master_pdf['month_days_arr'] = $this->view->month_days_arr;
					$master_pdf['operations'] = $this->view->operations;
					$master_pdf['used_shortcuts'] = $this->view->used_shortcuts;
					$master_pdf['used_shortcuts_summary'] = $this->view->used_shortcuts_summary;
					$master_pdf['active_days'] = $this->view->active_days;
					$master_pdf['full_hospital_days'] = $this->view->full_hospital_days;
					$master_pdf['hospital_alowed_shortcuts'] = $this->view->hospital_alowed_shortcuts;
					$master_pdf['all_sapv_days'] = $all_sapv_days;
					$master_pdf['admission_dates'] = $admission_dates;
					$master_pdf['lbg_client_name'] = $this->view->lbg_client_name;
					$master_pdf['lbg_address'] = $this->view->lbg_address;
					$master_pdf['lbg_ik_nummer'] = $this->view->lbg_ik_nummer;
					$master_pdf['involved_users'] = $_POST['involved_users'];
					$master_pdf['post_data'] = $_POST;
					$master_pdf['system_year_months_array'] = $system_year_months_array;
					$master_pdf['month_based'] = $month_based;
					$master_pdf['saved_involved_users'] = $saved_involved_users;
					
					$master_pdf['system_involved_users'] = $system_involved_users;
					
					
					
					if(strlen($saved_users_involved)>0){
    					$master_pdf['involved_users'] = $saved_users_involved;
					} else{
					    
					}
 
 
    				$gen_pdf = $this->generate_pdf($master_pdf, 'anlage6_multiple', 'anlage6pdf_new_multiple.html');
 
		}

		private function generate_pdf($post_data, $pdfname, $filename, $pdf_extra_id = false)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			
			//$post_data = Pms_CommonData::clear_pdf_data($post_data, array('patientname', 'address', 'image', 'visits_array', 'fileuploadedimage'));
			$exclude=array('patientname', 'address', 'image', 'visits_array');
			$post_data = Pms_CommonData::clear_pdf_data($post_data, $exclude);
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			$htmlform = Pms_Template::createTemplate($post_data, 'templates/' . $filename);
			
			$wund_name = "";
			if(strlen($post_data['post_data']['w_name']) > 0 ){
			    $wund_name = ' - ('. $post_data['post_data']['w_name'] .')';
			}

			$pdf_names = array(
				'anlage6' => 'Anlage 6',
				'anlage6_multiple' => 'Anlage 6',
				'anlage3' => 'Einverständniss Leverkusen',
				'wl_doctor_letter' => 'Brief',
				'sapvperformanceoverview' => 'SAPV Leistungsübersicht',
				'anlage5part2' => 'Anlage 5 (Teil 2)',
				'recordingreport' => 'Aufnahmebericht',
				'nie_recordingreport' => 'Aufnahmebericht',
				'bresapvperformance' => 'Formular Leistungsnachweis',
				'barthelscore' => 'Barthel Index',
				'wounddocumentation' => 'Wunddokumentation'.' '.$wund_name ,
				'wounddocumentation_incr' => 'Wunddokumentation'.' '.$wund_name ,
				'therapyplan' => 'Therapieplan',
				'hospizperformance' => 'Hospiz - Leistungsbogen',
				'shimplementationproof' => 'Durchführungsnachweis',
			);

			$portrait_pdfs = array(
				'anlage3', 'wl_doctor_letter', 'recordingreport', 'nie_recordingreport', 'barthelscore', 'wounddocumentation', 'wounddocumentation_incr'
			);

			if(in_array($pdfname, $portrait_pdfs))
			{
				$orientation = 'P';
			}
			else
			{
				$orientation = 'L'; //anlage 6
			}
			$bottom_margin = false;
			if($pdfname == 'shimplementationproof')
			{
				$bottom_margin = '5';
			}
			if($pdfname == 'barthelscore')
			{
				$bottom_margin = '5';
			}
			$pdf = new Pms_PDF($orientation, 'mm', 'A4', true, 'UTF-8', false);
			$pdf->setDefaults(true, $orientation, $bottom_margin); //defaults with header
			$pdf->setImageScale(1.6);
// 			$pdf->setPrintFooter(false); // remove black line at bottom

			if ($pdfname == 'wounddocumentation' ||  $pdfname == 'wounddocumentation_incr')
			{
				$pdf->setPrintFooter(true);
				$pdf->footer_text = $this->view->translate("new_medication pdf footer text");
				$pdf->setFooterType('1 of n date');
			} else {
				$pdf->setPrintFooter(false);
			}
			
			
			
			if($pdfname == 'wl_doctor_letter' || $pdfname == 'wl_nurse_letter')
			{
				$pdf->SetMargins(20, 40, 30);
			}
			elseif($pdfname == 'hospizperformance')
			{
				$pdf->SetMargins(3, 5, 3); //reset margins
			}
			elseif($pdfname == 'shimplementationproof')
			{
				$pdf->SetMargins(3, 5, 3); //reset margins
			}
			elseif($pdfname == 'anlage6')
			{
				$pdf->SetMargins(3, 5, 5); //reset margins
			}
			elseif($pdfname == 'anlage6_multiple')
			{
				$pdf->SetMargins(3, 5, 5); //reset margins
			}
			else
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}

			if($pdfname == 'wounddocumentation')
			{
				$pdf->SetFont('', '', '11');
			}

			if($pdfname == 'therapyplan')
			{
				$pdf->SetFont('', '', '11');
			}

			$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

			//added background!
			if($pdf_extra_id)
			{
				$bg_image = Pms_CommonData::getPdfBackground($post_data['clientid'], $pdf_extra_id);
				if($bg_image !== false)
				{
					$bg_image_path = PDFBG_PATH . '/' . $post_data['clientid'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
					if(is_file($bg_image_path))
					{
						$pdf->setBackgroundImage($bg_image_path);
					}
				}
			}
			
			if($_REQUEST['show_letter'] == '1')
			{
				print_r($html);
				exit;
			}

			$pdf->setHTML($html);

			//$tmpstmp = substr(md5(time() . rand(0, 999)), 0, 12);
			//mkdir('uploads/' . $tmpstmp);
			$tmpstmp = $pdf->uniqfolder(PDF_PATH);
			
			$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
			$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
			/*
			$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
			exec($cmd);
			$zipname = $tmpstmp . ".zip";
			$filename = "uploads/" . $tmpstmp . ".zip";
			$con_id = Pms_FtpFileupload::ftpconnect();

			if($con_id)
			{
				$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
				Pms_FtpFileupload::ftpconclose($con_id);
			}
			*/
			$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
			

			if($pdfname == 'barthelscore')
			{
				$record_form_id = $post_data['fid'];
				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
			}
			elseif($pdfname == 'wounddocumentation_incr')
			{
				$record_form_id = $post_data['post_data']['fid'];
				$cust = new PatientFileUpload();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
			}
			else
			{
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
			}

			if($pdfname == "bresapvperformance")
			{
				//insert system file tags
				$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id, array('6'));
			}


			if($pdfname == 'wl_doctor_letter' || $pdfname == 'wl_nurse_letter')
			{
				$comment = '';
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
				$cust->recordid = $file_id;
				$cust->user_id = $userid;
				$cust->save();
			}
			else if($pdfname == 'barthelscore')
			{
				if($post_data['barthel_preview'] == '0')
				{
					//write score in verlauf
					$comment_score = 'Barthel Index Score: ' . $post_data['total_score'];
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment_score);
					$cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
					$cust->recordid = $file_id;
					$cust->user_id = $userid;
					$cust->save();
				}

				//write
				$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->tabname = Pms_CommonData::aesEncrypt($pdfname . 'pdf');
				$cust->recordid = $file_id;
				$cust->user_id = $userid;
				$cust->save();
			}

			if($pdfname != 'wl_doctor_letter' && $pdfname != 'barthelscore' && $pdfname != 'wounddocumentation_incr')
			{
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}

			if($pdfname == 'barthelscore' && $post_data['barthel_preview'] == '1')
			{
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}
			
			return $file_id;
			
		}

		public function contactformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			
			$this->view->userid = $userid;
			
			
			if($this->getRequest()->isPost() && $_POST['submitform'])
			{
// 			    dd($_POST);
			}
			/*			 * ***************** Contact forms inits *************************** */
			$contact_forms = new ContactForms();
			$contact_form_types = new FormTypes();
			$contact_form_blocks2type = new FormBlocks2Type();
			$contact_form_block_permissions = new FormBlockPermissions();
			$contact_form_type_permissions = new FormTypePermissions();
			$contact_form_sapv_block_permissions = new FormSapvBlockPermissions();
			$form_blocks_order = new FormBlocksOrder();
			$form_blocks_options = new FormBlocksOptions();
			$form_sgbv_items = new FormBlockSgbv();
			$form_additional_users = new FormBlockAdditionalUsers();

			$all_blocks = Pms_CommonData::contact_form_blocks();
            $patient_case_type = '';
			
			
			$karnofsky = Pms_CommonData::get_karnofsky();
			foreach($karnofsky as $k=>$kd){
			    $print_karnofsky[$kd['value']] = $kd['label'];
			}
            $this->view->karnofsky  = $karnofsky ;
			
            // ISPC 1719
			$karnofsky_clinik_arr = Pms_CommonData::get_karnofsky_clinic();
			foreach($karnofsky_clinik_arr as $k=>$kd){
			    $print_karnofsky_clinic[$kd['value']] = $kd['label'];
			}
            $this->view->karnofsky_clinik  = $karnofsky_clinik_arr ;

           
            /*
             * //TODO-4069  Ancuta - 14.05.2021 :: removed code for ISPC-2853
            //ISPC-2853
            if(isset($_POST['timedocumentation']) && strlen($_POST['timedocumentation']['minutes']) ){
                $offset=intval($_POST['timedocumentation']['minutes']);
                if($offset==0){
                    $offset=5;
                }
                $old_m=intval($_POST['begin_date_m']);
                $old_h=intval($_POST['begin_date_h']);
                $new_m=($old_m + $offset) %60;
                $new_h=$old_h + ($old_m + $offset - $new_m) /60;
                if($new_h>23){
                    $new_h=$new_h-24;
                }
                if($new_m<10){$new_m="0" . strval($new_m);}
                if($new_h<10){$new_h="0" . strval($new_h);}
                $_POST['end_date_m']=strval($new_m);
                $_POST['end_date_h']=strval($new_h);
            }
            */
            
            
			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge
			{
			    $acknowledge = "1";
			    $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			    $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);

			    if(in_array($userid,$change_users) || in_array($userid,$approval_users) || $logininfo->usertype == 'SA')
			    {
			    
			        $allow_change = "1";
			    }
			    else
			    {
			        $allow_change = "0";
			    }
			    
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			if($modules->checkModulePrivileges("135", $clientid))//Use xbdt actions in goa ii block
			{
		      $use_xbdt_actions = 1;  
			} 
			else 
			{
		      $use_xbdt_actions = 0;  
			}
			
			if($modules->checkModulePrivileges("162", $clientid))//Use xbdt actions in EBMii block
			{
		      $use_xbdt_actions_ebmii = 1;  
			} 
			else 
			{
		      $use_xbdt_actions_ebmii = 0;  
			}
			
			
			if($modules->checkModulePrivileges("139", $clientid))
			{
			    $show_head_circumference = "1";
			}
			else
			{
			    $show_head_circumference  = "0";
			}
			$this->view->show_head_circumference = $show_head_circumference;
			
            if($modules->checkModulePrivileges("139", $clientid))
            {
                $clinic_form = "1";
            }
			
			
            //TODO-4069 Ancuta 26.04.2021
            $companion_time_tracking = 0;
            if($modules->checkModulePrivileges("254", $clientid))//Medication acknowledge
            {
                $companion_time_tracking = 1;
            }
            // --
            
			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			
			//ISPC-2629 Carmen 10.08.2020
			if($_REQUEST['openinmodal'] == '1')
			{
				$this->_helper->layout->setLayout('layout_ajax');
			}
			//--
			$this->_patientMasterData = $patientmaster->get_patientMasterData();
			$this->view->patientMasterData = $patientmaster->get_patientMasterData();
			
			/* ------------------------------------------------ */

			$userdata = Pms_CommonData::getUserData($userid);
			$user_groupid = $userdata[0]['groupid'];
			$user_dateils['id'] = $userdata[0]['id'];
			$user_dateils['username'] = $userdata[0]['username'];
			$user_dateils['last_name'] = $userdata[0]['last_name'];
			$user_dateils['first_name'] = $userdata[0]['first_name'];
			
			$user_dateils['user_fl_name'] = $userdata[0]['first_name'].' '.$userdata[0]['last_name'];

			
			$ug = new Usergroup();
			$user_master_group = $ug->getMasterGroup($user_groupid);
			$contact_form_type_perms = $contact_form_type_permissions->get_group_permissions($clientid, $user_master_group);


            /* ------------------------ Create Reports/Berichte permissions ------------------------------------- */
            $hl7_create_final_reports_users=ClientConfig::getConfig($clientid, 'hl7_create_final_reports_users');
			$this->view->allowed_to_create_final_Report=0;
			if(is_array($hl7_create_final_reports_users) && in_array($userid,$hl7_create_final_reports_users)){
                $this->view->allowed_to_create_final_Report=1;
            }





			/* ------------------------ Patient health insurance ------------------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$patient_healthinsurance = $phelathinsurance->getPatientHealthInsurance($ipid);
			$private_patient = $patient_healthinsurance[0]['privatepatient'];

			/* -----------------Client Categories ------------------------- */
			$clientcat = new ClientFb3categories();
			$categ = $clientcat->getClientFb3categories($clientid);
			$category_defaultarray = $clientcat->defaultClientFb3categories();
			
			
			foreach($category_defaultarray as $def)
			{
			    $cats[$def['cid']]['cid'] = $def['cid'];
			    $cats[$def['cid']]['default'] = $def['title'];
			    foreach($categ as $val)
			    {
			        if($def['cid'] == $val['categoryid'])
			        {
			            $cats[$def['cid']]['title'] = $val['category_title'];
			        }
			    }
			}
			
			if(!empty($cats[1]['title']))
			{
			    $this->view->cat1 = $cats[1]['title'];
			}
			else
			{
			    $this->view->cat1 = $cats[1]['default'];
			}
			if(!empty($cats[2]['title']))
			{
			    $this->view->cat2 = $cats[2]['title'];
			}
			else
			{
			    $this->view->cat2 = $cats[2]['default'];
			}
			if(!empty($cats[3]['title']))
			{
			    $this->view->cat3 = $cats[3]['title'];
			}
			else
			{
			    $this->view->cat3 = $cats[3]['default'];
			}
			if(!empty($cats[4]['title']))
			{
			    $this->view->cat4 = $cats[4]['title'];
			}
			else
			{
			    $this->view->cat4 = $cats[4]['default'];
			}
			if(!empty($cats[5]['title']))
			{
			    $this->view->cat5 = $cats[5]['title'];
			}
			else
			{
			    $this->view->cat5 = $cats[5]['default'];
			}
			if(!empty($cats[6]['title']))
			{
			    $this->view->cat6 = $cats[6]['title'];
			}
			else
			{
			    $this->view->cat6 = $cats[6]['default'];
			}
			if(!empty($cats[7]['title']))
			{
			    $this->view->cat7 = $cats[7]['title'];
			}
			else
			{
			    $this->view->cat7 = $cats[7]['default'];
			}
			if(!empty($cats[8]['title']))
			{
			    $this->view->cat8 = $cats[8]['title'];
			}
			else
			{
			    $this->view->cat8 = $cats[8]['default'];
			}
			if(!empty($cats[9]['title']))
			{
			    $this->view->cat9 = $cats[9]['title'];
			}
			else
			{
			    $this->view->cat9 = $cats[9]['default'];
			}
			/* -----------------Client Categories ------------------------- */
			
			
			/* ------------------------ Patient Time dosage ------------------------------------- */
			/*
			$patient_time_scheme  = PatientDrugPlanDosageIntervals::get_patient_dosage_intervals($ipid,$clientid);
			
			if($patient_time_scheme['patient']){
			    $set = 0;
			    foreach($patient_time_scheme['patient']  as $int_id=>$int_data)
			    {
			        $interval_array['interval'][$int_id]['time'] = $int_data;
			        $interval_array['interval'][$int_id]['custom'] = '0';
			        $interval_array['interval'][$int_id]['interval_id'] = $int_id;
			
			        $dosage_settings[$set] = $int_data;
			        $set++;
			
			        $dosage_intervals[$int_data] = $int_data;
			    }
			}
			else
			{
			    $inf=1;
			    $setc= 0;
			    foreach($patient_time_scheme['client']  as $int_id=>$int_data)
			    {
			        $interval_array['interval'][$inf]['time'] = $int_data;
			        $interval_array['interval'][$inf]['custom'] = '1';
			        $dosage_settings[$setc] = $int_data;
			        $setc++;
			        $inf++;
			
			        $dosage_intervals[$int_data] = $int_data;
			    }
			}
			
			
			$this->view->interval_array = $interval_array;
			$this->view->dosage_intervals = $dosage_intervals;
			*/
			
			
			
			/* ================ MEDICATION :: CLIENT SETTINGS======================= */
			/*
			$clientdata_array = Pms_CommonData::getClientData($clientid);
			$clientdata = $clientdata_array[0];
			$show_new_fields = "0";
			if($clientdata['new_medication_fields'] == "1"){
			    $show_new_fields = "1";
			}
			*/
			$show_new_fields = 1; //ISPC-1848 F p.7
			$this->view->show_new_fileds = $show_new_fields;

			$this->view->clientModules = $modules->get_client_modules($clientid);
			//ISPC-2470 Carmen 
			if($this->view->clientModules['182'])
			{
				$this->view->vitalsign_colmax = 4;
			}
			else 
			{
				$this->view->vitalsign_colmax = 1;
			}
			
			$individual_medication_time_m = $modules->checkModulePrivileges("141", $clientid);
			if($individual_medication_time_m){
				$individual_medication_time = 1;
			}else {
				$individual_medication_time = 0;
			}
			$this->view->individual_medication_time = $individual_medication_time;
			
			
			 
			if($individual_medication_time == "1")
			{
				//get time scchedule options
				$client_med_options = MedicationOptions::client_saved_medication_options($clientid);
				$this->view->client_medication_options = $client_med_options;
			
				$time_blocks = array('all');
				foreach($client_med_options as $mtype=>$mtime_opt){
					if($mtime_opt['time_schedule'] == "1"){
						$time_blocks[]  = $mtype;
						$timed_scheduled_medications[]  = $mtype;
					}
				}
			}
			else
			{
				$timed_scheduled_medications = array("actual","isivmed"); // default
				$time_blocks = array("actual","isivmed"); // default
			}
			
			$this->view->timed_scheduled_medications = $timed_scheduled_medications;
			$this->view->js_timed_scheduled_medications = json_encode($timed_scheduled_medications);
			
			
			
			// ispc-2176
			$packaging_array = PatientDrugPlanExtra::intubated_packaging();
			$this->view->packaging_array = $packaging_array;
			
			
			
			
			
			
			$patient_time_scheme  = PatientDrugPlanDosageIntervals::get_patient_dosage_intervals($ipid,$clientid,$time_blocks);
			
			if($patient_time_scheme['patient']){
				foreach($patient_time_scheme['patient']  as $med_type => $dos_data)
				{
					if($med_type != "new"){
						$set = 0;
						foreach($dos_data  as $int_id=>$int_data)
						{
							if(in_array($med_type,$patient_time_scheme['patient']['new'])){
			
								$interval_array['interval'][$med_type][$int_id]['time'] = $int_data;
								$interval_array['interval'][$med_type][$int_id]['custom'] = '1';
			
								$dosage_settings[$med_type][$set] = $int_data;
								$set++;
			
								$dosage_intervals[$med_type][$int_data] = $int_data;
							}
							else
							{
			
			
								$interval_array['interval'][$med_type][$int_id]['time'] = $int_data;
								$interval_array['interval'][$med_type][$int_id]['custom'] = '0';
								$interval_array['interval'][$med_type][$int_id]['interval_id'] = $int_id;
			
								$dosage_settings[$med_type][$set] = $int_data;
								$set++;
			
								$dosage_intervals[$med_type][$int_data] = $int_data;
							}
						}
					}
				}
			}
			else
			{
				foreach($patient_time_scheme['client']  as $med_type=>$mtimes)
				{
			
					$inf=1;
					$setc= 0;
					foreach($mtimes as $int_id=>$int_data){
			
						$interval_array['interval'][$med_type][$inf]['time'] = $int_data;
						$interval_array['interval'][$med_type][$inf]['custom'] = '1';
						$dosage_settings[$med_type][$setc] = $int_data;
						$setc++;
						$inf++;
			
						$dosage_intervals[$med_type][$int_data] = $int_data;
					}
				}
			}
			
			$this->view->js_dosage_intervals = json_encode($dosage_intervals);
			$this->view->interval_array = $interval_array;
			$this->view->dosage_intervals = $dosage_intervals;
			$this->view->deleted_intervals_ids = "0";
			
			
			
			
			
			
			//die(print_r($time_blocks));
			
			/* ================ MEDICATION :: CLIENT EXTRA ======================= */
			//UNIT
			$medication_unit = MedicationUnit::client_medication_unit($clientid);
			
			foreach($medication_unit as $k=>$unit){
			    $client_medication_extra['unit'][$unit['id']] = $unit['unit'];
			}
			
			//DOSAGE FORM
			$medication_dosage_forms = MedicationDosageform::client_medication_dosage_form($clientid);
			
			foreach($medication_dosage_forms as $k=>$df){
			    $client_medication_extra['dosage_form'][$df['id']] = $df['dosage_form'];
			}
			$this->view->js_med_dosage_form = json_encode($client_medication_extra['dosage_form']);
						
			//TYPE
			$medication_types = MedicationType::client_medication_types($clientid);
			foreach($medication_types as $k=>$type){
			    $client_medication_extra['type'][$type['id']] = $type['type'];
			}
			
			//INDICATIONS
			$medication_indications = MedicationIndications::client_medication_indications($clientid);
			
			foreach($medication_indications as $k=>$indication){
			    $client_medication_extra['indication'][$indication['id']]['name'] = $indication['indication'];
			    $client_medication_extra['indication'][$indication['id']]['color'] = $indication['indication_color'];
			}
			$this->view->client_medication_extra = $client_medication_extra;
			
			$isBasisassessmentForm = false; //IM-116
            $form_type_id = null;
			if(strlen($_REQUEST['ftid']) > 0 || strlen($_REQUEST['cid']) > 0)
			{
				/* ------------------------ CONTACT FORM PERMISSIONS------------------------------------- */
				if(count($_REQUEST['cid']) > 0)
				{
					//edit mode
					$contact_form_id = $_REQUEST['cid'];
					if(strlen($_REQUEST['ftid']) == 0){
                        $contact_form_details = $contact_forms->get_contact_form($contact_form_id);
                        $form_type_id = $contact_form_details['form_type'];
                    }else{
					    $contact_form_details =array();
                        $form_type_id = $_REQUEST['ftid'];
                    }

				}
				else
				{
					//no edit
					$form_type_id = $_REQUEST['ftid'];

                    // IM-116 read from config, what is our ba form - elena
					$opsconfig = ClientConfig::getConfig($clientid, 'opsconfig');

                    // IM-116  is it a ba form? - elena
					if($form_type_id == $opsconfig['ba_formid']){
                        $isBasisassessmentForm = true;
                    }
				}
				$old_form_ids = null;

				//TODO-3843 Ancuta 11.02.2021
				// get all blocks that are allowed to write to recorddata
				$write2_recordata_blocks=array();
				$write2_recordata_blocks= FormBlocksOptions::write2course_recordata($clientid,$form_type_id);
                //--
				
				// IM-116 do we have a ba form yet? - elena
				if($isBasisassessmentForm){
                    $existingBasisassessmentFormsQuery = Doctrine_Query::create()
                        ->select("*")
                        ->from('ContactForms')
                        ->where("ipid='" . $ipid . "'")
                        ->andWhere("form_type='" . $form_type_id .  "'" )
                        ->andWhere('isdelete = 0')
                        ->orderBy('create_date DESC')
                        ->limit(1);

                    $existing_basisassessment_forms_array = $existingBasisassessmentFormsQuery->fetchArray();
                    if(is_array($existing_basisassessment_forms_array) && count($existing_basisassessment_forms_array)>0 && (strlen($_REQUEST['cid']) == 0) && (strlen($_REQUEST['continue']) == 0 )){
                        $this->view->formsarray = $existing_basisassessment_forms_array;
                        // popup for choice, edit last ba form or create new ba form - elena
                        $this->_helper->viewRenderer('baformchoice');
                        $this->view->form_type_id = $form_type_id;


                        $this->view->lastcid = $existing_basisassessment_forms_array[0]['id'];

                        //IM-116 if timedocumentation block exists, get patient_case_type (if not, patient_case_type remains empty) - elena
                        $last_cid_time_documentation_options = FormBlockTimedocumentationClinicTable::getInstance()->findOneByContactFormIdAndIpid((int)$existing_basisassessment_forms_array[0]['id'], $ipid, Doctrine_Core::HYDRATE_ARRAY);


                        if (is_array($last_cid_time_documentation_options) && isset($last_cid_time_documentation_options['patient_case_type'])) {
                            $patient_case_type = $last_cid_time_documentation_options['patient_case_type'];
                        }
                    }


                }
				$this->view->blocks_order = $form_blocks_order->get_blocks_order($clientid, $form_type_id);
				/* ---------------------------------------- */
				$form_blocks_options_arr = $form_blocks_options->get_blocks_options($clientid, $form_type_id);

				foreach($form_blocks_options_arr as $k => $open_block)
				{
					$opened_blocks[$open_block['block']] = $open_block['open'];
				}
				$this->view->opened_blocks = $opened_blocks;
				/* ---------------------------------------- */

				$contact_form_type_details = $contact_form_types->get_form_type($form_type_id);
				$this->view->formtype_name = $contact_form_type_details[0]['name'];
                if($contact_form_type_details[0]['action']==100){
                    if($_REQUEST['cid']>0){
                        $bericht_ids = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'generate_bericht', Doctrine_Core::HYDRATE_ARRAY);
                        $this->view->generate_bericht_rootid=$bericht_ids['v'];
                    }
                    if(!$this->view->generate_bericht_rootid){
                        $this->view->generate_bericht_rootid=Hl7DocSend::generate_root_id();
                    }

                    $this->view->report_enabled=true;
                }
				if($logininfo->usertype != 'SA' && $logininfo->usertype != 'CA')
				{
//				if (!array_key_exists($_REQUEST['ftid'], $contact_form_type_perms) && $contact_form_type_perms[$form_type_id] != '1')
					if(!array_key_exists($form_type_id, $contact_form_type_perms) && $contact_form_type_perms[$form_type_id] != '1')
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}
				}

				$assigned_blocks = $contact_form_blocks2type->get_form_types_blocks($clientid, $form_type_id, true);
				$allowed_user_group_blocks = $contact_form_block_permissions->get_group_permissions($clientid, $user_master_group);

				//uncomment this when in production
				if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
				{
					//cadmin, sadmin almighty can see all assigned stuffs
					$allowed_blocks = $assigned_blocks[$form_type_id];
				}
				else
				{
					foreach($assigned_blocks[$form_type_id] as $k_a_block => $v_a_block)
					{
						if($allowed_user_group_blocks[$v_a_block] == '1')
						{
							$allowed_blocks[] = $v_a_block;
						}
					}
				}

                $we_need_to_generate_pdf=false;
                if(isset($_REQUEST['generate_bericht_preview']) && $_REQUEST['generate_bericht_preview']>0){
                    $we_need_to_generate_pdf=true;
                }
                if(isset($_REQUEST['generate_bericht']) && $_REQUEST['generate_bericht']>0){
                    $we_need_to_generate_pdf=true;
                }
                if(isset($_REQUEST['pdfexport']) && $_REQUEST['pdfexport']>0){
                    $we_need_to_generate_pdf=true;
                }
                if(isset($_REQUEST['submitform']) && $_REQUEST['submitform']>0){
                    $we_need_to_generate_pdf=true;
                }

				$ebm_array = array('ebm', 'ebmii');
				$goa_array = array('goa', 'goaii');
				if($private_patient == '1')
				{ //  EBM block is visible for only NONE "Privatpatient" patients.
					$allowed_blocks = array_diff($allowed_blocks, $ebm_array);
				}
				else
				{ // GOÄ is only visible when the patients healtzh insurance is "PRIVATPATIENT".
					$allowed_blocks = array_diff($allowed_blocks, $goa_array);
				}


				//when we have allowed blocks get sapv required blocks
				$sapv_only_blocks = $contact_form_sapv_block_permissions->get_sapv_permissions($clientid, $allowed_blocks);
				

				//TODO-4069 Ancuta 26.04.2021
				if($companion_time_tracking == 1 ){
				    if (in_array('time_documentation_clinic', $allowed_blocks) && in_array('additional_users', $allowed_blocks)){
				        $allowed_blocks = array_diff($allowed_blocks, array('additional_users'));
				    }
				    //2) If module activated and block Zeitdokumentation NOT available in form - NO CHANGES!
				    if( !in_array('time_documentation_clinic', $allowed_blocks)){
				        $companion_time_tracking = 0;
				    }
				    
				}
				$this->view->companion_time_tracking = $companion_time_tracking;
				//--
				
				if($_REQUEST['dbg'] == "allowed")
				{
					print_r("user_type \n");
					print_r($logininfo->usertype);
					print_r("\n");
					
					print_r("allowed_blocks \n");
					print_r($allowed_blocks);
					print_r("sapv_only_blocks \n");
					print_r($sapv_only_blocks);
					exit;
				}
				
				$this->view->allowed_blocks = $allowed_blocks;
				$this->view->sapv_only_blocks = $sapv_only_blocks;
				/* ------------------------Client Additional users------------------------------------- */
				$form_additional_users;



                if (in_array('lmu_sign', $allowed_blocks)){
                    $us = new UserStamp();
                    $this->view->userstamp= $us->getLatestUsermStamp($userid);
                }
                if (in_array('pmd_rahmendaten', $allowed_blocks)){
                    $fbkv=new FormBlockKeyValue();
                    $my_lmu_pmba_psysoz=$fbkv->getLastBlockValues($ipid, 'pmd_rahmendaten');
                    if(isset($my_lmu_pmba_psysoz['vals'])) {
                        $my_lmu_pmba_psysoz=json_decode($my_lmu_pmba_psysoz['vals']);
                        $pv_vv_gb = array(
                            'vv' => $my_lmu_pmba_psysoz->vv,
                            'pv' => $my_lmu_pmba_psysoz->pv,
                            'gb' => $my_lmu_pmba_psysoz->gb
                        );
                        $this->view->pmd_rahmendaten_extradata=$pv_vv_gb;
                    }
                }
				if( in_array('lmu_pmba_psysoz', $allowed_blocks)){
				    $docid=$patientarr['familydoc_id'];
				    $fdoc=new FamilyDoctor();
				    $this->view->patient_fdoc = $fdoc->getFamilyDoc($docid);
				
				    if ($this->view->patient_fdoc )
				    {
				        $this->view->patient_fdoc = $this->view->patient_fdoc[0];
				    }
				
				    //ISPC-2244
				    $pacp = new PatientAcp();
				    $pacp_saved_values = $pacp->getByIpid($ipid);
				     
				    $acp_saved_values = [];
				     
				    if (isset($pacp_saved_values[$ipid])) {
				        foreach ($pacp_saved_values[$ipid] as $row) {
				            $acp_saved_values[$row['division_tab']] = $row;
				        }
				    }
				     
				    $pacp_select_options = $pacp->getDefaultRadios();
				     
				    if ( ! isset($lmu_pmba_psysoz)) {
				        $lmu_pmba_psysoz = [];
				    }
				    
				    $lmu_pmba_psysoz['PatientAcp'] = ['saved_values' => $acp_saved_values, 'select_options' => $pacp_select_options];
				    
				    if ( ! isset($this->view->patient_lmu_pmba_psysoz_values)) {
				        $this->view->patient_lmu_pmba_psysoz_values = $lmu_pmba_psysoz;
				    }
				    
                    //@cla this was not used in view or here, so i removed
// 				    $fdoc=new ContactPersonMaster();
// 				    $this->view->patient_contactpersons = $fdoc->getPatientContact($ipid);
				
				    //print_r($this->view->patient_contactpersons); exit;
				    
				    $pfleges=new Pflegedienstes();
				    $this->view->patient_fdienst = $pfleges->getPflegedienstes($ipid);
				
		
				    $rl = new PatientReligions();
				    $religions = $rl->getReligionsNames(true);
				    $this->view->religions = $religions;
				
				    $list_sterbeort = Pms_CommonData::death_wish_locations(true);
				    $this->view->list_sterbeort = $list_sterbeort;
				}
				
				/* ------------------------ EBM + EBM II + GOA + GOA II ------------------------------ */
				
				
				$current_date = date("d.m.Y",time());
				
				
				//if($use_xbdt_actions == "1" || $use_xbdt_actions_ebmii == "1" ){
					if(!empty($contact_form_details)){
						$cf_start_date = $contact_form_details['start_date'];
					}
					else
					{
						$cf_start_date = $current_date;
							
					}
					
					if($this->getRequest()->isPost())
					{
						$cf_start_date = $_POST['date'];
					}
				//}
				
				
				// special upload date - for LE actiosns 1779
				$upload_date = "29.08.2016";
				
				$blocks_settings = new FormBlocksSettings();
				
				if(!empty($contact_form_details))
				{
    				$blocks_settings_array= $blocks_settings->get_blocks_settings($clientid,date("Y-m-d",strtotime($cf_start_date)));
				} 
				else 
				{
                    $blocks_settings_array = $blocks_settings->get_blocks_settings($clientid);
				}

				foreach($blocks_settings_array as $key => $value)
				{
					$settings_array[$value['block']][$value['id']] = $value;
					$settings_array[$value['block']][$value['id']]['source'] = $value['block'];
				}
				$ebm_goa_blocks = $settings_array;
				
				if($use_xbdt_actions == "1"){
					
    				$ebm_goa_blocks['goaii'] = "";

    				// special for goa 
    				if(strtotime(date("d.m.Y",strtotime($cf_start_date))) < strtotime($upload_date) ){
    					
    				    $blocks_settings_array_goa = $blocks_settings->get_blocks_settings($clientid,date("Y-m-d",strtotime($cf_start_date)),"goaii");
    				    
    				    foreach($blocks_settings_array_goa  as $key => $value)
    				    {
    				        $ebm_goa_blocks['goaii'][$value['id']] = $value;
    				        $ebm_goa_blocks['goaii'][$value['id']]['source'] = "goaii";
    				    }
    	
    				    
    				} else {
    					
    				    if(strtotime($current_date) < strtotime($upload_date)){
        				    $ebm_goa_blocks['goaii'] = $blocks_settings->get_blocks_settings($clientid,false,"goaii");;
        				    
    				    } else{
            				/* ------------------------ XBDT ACTIONS/ GOA II ------------------------------ */
    				        $xam = new XbdtActions();
    				        $xa_array = $xam->client_xbdt_actions($clientid,true,$only_cf_available=true,"goaii");
    				        $xbdt_actions_goaii = array();
    				        foreach($xa_array as $key => $value)
    				        {
    				            $xbdt_actions_goaii[$value['id']] = $value;
    				            $xbdt_actions_goaii[$value['id']]['option_id'] = $value['action_id'];
    				            $xbdt_actions_goaii[$value['id']]['option_name'] = $value['name'];
    				            $xbdt_actions_goaii[$value['id']]['source'] = "xbdt";
    				        }
    				        
    				         $ebm_goa_blocks['goaii'] = $xbdt_actions_goaii;
    				    }
    				}
                }
                
				
				if($use_xbdt_actions_ebmii == "1"){
					// special upload date - for LE actiosns TODO-1414 (27.02.2018 < change on UPLOAD)
					$upload_date_ebmii = "06.03.2018";
    				//$ebm_goa_blocks['ebmii'] = "";
					$ebm_goa_blocks['ebmii'] = array(); //Carmen 14.12.2020
    				// special for ebmii
    				if(strtotime(date("d.m.Y",strtotime($cf_start_date))) < strtotime($upload_date_ebmii) ){
    
    				    $blocks_settings_array_ebmii = $blocks_settings->get_blocks_settings($clientid,date("Y-m-d",strtotime($cf_start_date)),"ebmii");; 
    
    				    foreach($blocks_settings_array_ebmii  as $key => $value)
    				    {
    				        $ebm_goa_blocks['ebmii'][$value['id']] = $value;
    				        $ebm_goa_blocks['ebmii'][$value['id']]['source'] = "ebmii";
    				    }
    				    
    				    
    				} else {
    				    if(strtotime($current_date) < strtotime($upload_date_ebmii)){
        				    $ebm_goa_blocks['ebmii'] = $blocks_settings->get_blocks_settings($clientid,false,"ebmii");;
        				    
    				    } else{
            				/* ------------------------ XBDT ACTIONS/ EBM II ------------------------------ */
    				        $xam = new XbdtActions();
    				        $xa_array = $xam->client_xbdt_actions($clientid,true,$only_cf_available=true,"ebmii");
    				        
    				        $xbdt_actions_ebmii = array();
    				        foreach($xa_array as $key => $value)
    				        {
    				            $xbdt_actions_ebmii[$value['id']] = $value;
    				            $xbdt_actions_ebmii[$value['id']]['option_id'] = $value['action_id'];
    				            $xbdt_actions_ebmii[$value['id']]['option_name'] = $value['name'];
    				            $xbdt_actions_ebmii[$value['id']]['source'] = "xbdt";
    				        }
    				        
    				         $ebm_goa_blocks['ebmii'] = $xbdt_actions_ebmii;
    				    }
    				}
                }
                
				$this->view->ebm_goa_blocks = $ebm_goa_blocks;

				/* ------------------------ ++ Maßnahmen  ------------------------------ */
				if(empty($settings_array['measures']) && in_array("measures", $allowed_blocks))
				{
					// 	add defaults - if no measures options exist
					//TODO-3561 Ancuta 02.12.2020 
				    /*
					$add_default_form = new Application_Form_FormBlockDefaultOptions();
					$return = $add_default_form->save_default_options("measures");
					*/
				}
				$measures_array['measures'] = $blocks_settings->get_block($clientid, "measures", true);

				$this->view->measures_blocks = $measures_array['measures'];

				//ISPC-2487 Ancuta 27.11.2019
				/* ------------------------ ++ Leistung / Koordination  ------------------------------ */
				if(empty($settings_array['coordinator_actions']) && in_array("coordinator_actions", $allowed_blocks))
				{
					// 	add defaults - if no coordinator_actions options exist
					$add_default_form = new Application_Form_FormBlockDefaultOptions();
					$return = $add_default_form->save_default_options("coordinator_actions");
				}
				$coordinator_actions_array['coordinator_actions'] = $blocks_settings->get_block($clientid, "coordinator_actions", false);

				$this->view->coordinator_actions_blocks = $coordinator_actions_array['coordinator_actions'];
				/* ------------------------------------------------------------------------------------- */

				
				
				
				/* ------------------------ ++ SGB XI Leistungen   ------------------------------ */
				$sgbxi_actions_array['sgbxi_actions'] = $blocks_settings->get_block($clientid, "sgbxi_actions", true);
				$this->view->sgbxi_actions_blocks = $sgbxi_actions_array['sgbxi_actions'];

				/* ------------------------------------------------------------------------------------- */

				/* ------------------------ ++ EBM ebm_ber   ------------------------------ */
				$blocks_settings_categories = new FormBlocksSettingsCategories();
				// get client categories for block ebm_ber
				$ebm_ber_categories = $blocks_settings_categories->get_block_categories($clientid, "ebm_ber");

				$this->view->ebm_ber_categories = $ebm_ber_categories;

				$ebm_ber_array['ebm_ber'] = $blocks_settings->get_block($clientid, "ebm_ber", true);

				foreach($ebm_ber_categories as $category_id => $category_item)
				{
					$ebm_ber_blocks[$category_id]['category'] = $category_item['category'];
					foreach($ebm_ber_array['ebm_ber'] as $ke => $ebm_ber_d)
					{
						if($ebm_ber_d['option_category'] == $category_id)
						{
							$ebm_ber_blocks[$category_id]['actions'][] = $ebm_ber_d;
						}
					}
				}
				$this->view->ebm_ber_blocks = $ebm_ber_blocks;
				/* ------------------------------------------------------------------------------------- */

				/* ------------------------ SGB v  Actions------------------------------------- */
				$sgbv_actions = new SocialCodeActions();
				$client_sgbv_actions = $sgbv_actions->getCientSocialCodeActions($clientid);

				$patient_sgbv_actions = new PatientCustomActions();

				$all_sgbv_actions_patient = array();
				if($patient_healthinsurance)
				{
					$health_insurance_id = $patient_healthinsurance[0]['companyid'];

					$hi_query = Doctrine_Query::create()
						->select('price_sheet, price_sheet_group')
						->from('HealthInsurance')
						->where("id='" . $health_insurance_id . "'");
					$hi_array = $hi_query->fetchArray();

					if(!empty($hi_array))
					{
						$price_sheet_group = $hi_array[0]['price_sheet_group'];

						$used_actions = array();
						if(strlen($_REQUEST['cid']) > 0)
						{
							$saved_actions = $form_sgbv_items->getAllPatientFormSavedActions($ipid, $_REQUEST['cid'], false); // ALL ACTIONS THAT WHERE SAVED IN CONTAC FORM -
							foreach($saved_actions as $kh => $aval)
							{
								$used_actions[] = $aval['action_id'];
							}
						}
						//RWH start
						if(strlen($_POST['date']) > '0')
						{
							//contact form in add/edit mode
							//
						//get selected date via POST
							$period_pricelist['start'] = date('Y-m-d', strtotime($_POST['date']));
							$period_pricelist['end'] = date('Y-m-d', strtotime($_POST['date']));
						}
						else if(strlen($_REQUEST['cid']) > '0')
						{
							//contact form in edit mode
							//
						//get saved contact form date
							$period_pricelist['start'] = date('Y-m-d', strtotime($contact_form_details['start_date']));
							$period_pricelist['end'] = date('Y-m-d', strtotime($contact_form_details['end_date']));
						}
						else
						{
							//contact form in add mode
							//
						//get curent day contact form date
							$period_pricelist['start'] = date('Y-m-01', time());
							$period_pricelist['end'] = date('Y-m-' . date('t', time()), time());
						}

						$socialcode_price = new SocialCodePriceList();
						$price_sheet = $socialcode_price->get_group_period_pricelist($price_sheet_group, $clientid, $period_pricelist);

//					print_r($period_pricelist);
//					exit;
						//RWH end
						$sgbv_actions_patient = $patient_sgbv_actions->getAllSgbvActionsPatient($clientid, $ipid, $price_sheet, $used_actions); // insert also used and deleted actions
//					$sgbv_actions_patient = $patient_sgbv_actions->getAllPatientSocialCodeActions($clientid,$ipid,$price_sheet,$used_actions); // insert also used and deleted actions
					}
				}

				$this->view->sgbv_actions = $sgbv_actions_patient;

				/* -------------------Patient Data--------------------------------------- */
				$epid = Pms_CommonData::getEpidFromId($decid);
// 				$patientarr = $patientmaster->getMasterData($decid, 0);
				$patientarr = $patientmaster->get_patientMasterData();
				$this->view->birth = $patientarr['birthd'];
				$this->view->lastname = $patientarr['last_name'];
				$this->view->firstname = $patientarr['first_name'];
				$this->view->street = $patientarr['street1'];
				$this->view->zip = $patientarr['zip'];
				$this->view->patcity = $patientarr['city'];
				$this->view->phone = $patientarr['phone'];
				$this->view->epid = strtoupper($epid);

				/* ---------------------------Get Client details --  address-------------------------- */
				$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
				$client_address = $clientdata[0]['street1'] . ',' . $clientdata[0]['postcode'] . ',' . $clientdata[0]['city'];

				/* ---------------------------Get User details --  address-------------------------- */
				$user_address = $userdata[0]['street1'] . ',' . $userdata[0]['zip'] . ',' . $userdata[0]['city'];

				$debug_googleapis_distace = [];
				
				if($userdata[0]['km_calculation_settings'] == "user")
				{
					$s = $user_address;
				    $debug_googleapis_distace[] = "km_calculation_settings = user address";
				    $debug_googleapis_distace[] = $s;
				}
				else if($userdata[0]['km_calculation_settings'] == "client")
				{
					$s = $client_address;
					$debug_googleapis_distace[] = "userdata km_calculation_settings = client address";
					$debug_googleapis_distace[] = $s;
				}
				else if($userdata[0]['km_calculation_settings'] == "disabled")
				{
					$s = "";
				    $debug_googleapis_distace[] = "userdata km_calculation_settings is disabled";
				}

				$ploc = new PatientLocation();
				$plocarray = $ploc->getActiveLocationPatInfo($ipid);

				if(empty($plocarray) || $plocarray[0]['location_type'] == '5')
				{ //if at home grab address from patient details
// 					$plocarray[0] = $patientmaster->getMasterData($decid, 0);
					$plocarray[0] = $patientmaster->get_patientMasterData();
					$plocarray[0]['street'] = $plocarray[0]['street1'];
				}
				$f = $plocarray[0]['street'] . ',' . $plocarray[0]['zip'] . ',' . $plocarray[0]['city'];

				if(strlen($f) > 2 && strlen($s) > 2)
				{
    				$debug_googleapis_distace[] = "destination is patient's current location address";
    				$debug_googleapis_distace[] = $f;
    				$debug_googleapis_distace[] = "* duration will be restricted to 90 minutes, if google's real_duration is more";
					$route = Pms_CommonData::getRouteLength($s, $f);
    				$debug_googleapis_distace[] = "route response from googleapis = ".print_r($route, true);

    				
    				if (APPLICATION_ENV != 'production') {
    				    
    				    $debug_googleapis_distace[] = "check block  Fahrtzeit or Fahrtzeit/Dokumentationszeit";
    				    
    				    $this->view->debug_googleapis_distace = Zend_Json::encode($debug_googleapis_distace);
    				}
    				
    				
					if(strlen($contact_form_details['fahrtstreke_km']) == 0)
					{
						$contact_form_details['fahrtstreke_km'] = $route['length'];
						$drivetime_doc_default['fahrtstreke_km1'] = $route['length'];
					}

					if(strlen($contact_form_details['fahrtzeit']) == 0)
					{
						$contact_form_details['fahrtzeit'] = $route['duration'];
				        $drivetime_doc_default['fahrtzeit1'] = $route['duration'];				
					}
					

					// TODO-1211
					$route_error = 0 ;
					if(empty($route['duration']) && $route['duration'] !== false && (in_array('drivetime',$allowed_blocks) || in_array('drivetime_doc',$allowed_blocks))  ){
						$route_error = 1 ;
					}
					$this->view->route_error = $route_error;
				}
// 				$modules = new Modules();
// 				$module_time = $modules->checkModulePrivileges("104", $clientid);
// 				$module_time_five = $modules->checkModulePrivileges("106", $clientid);
				

				/* ---------------------------Set default date for visit-------------------------- */
				if(empty($_REQUEST['cid']) || (!empty($_REQUEST['ftid'])))
				{
// 					if($module_time)
// 					{
// 					$contact_form_details['begin_date_h'] = date('H', strtotime('-5 minutes'));
// 					$contact_form_details['begin_date_m'] = date('i', strtotime('-5 minutes'));
// 					$contact_form_details['end_date_h'] = date('H', strtotime('+15 minutes'));
// 					$contact_form_details['end_date_m'] = date('i', strtotime('+15 minutes'));
// 					$contact_form_details['date'] = date('d.m.Y');
// 					}
// 					elseif($module_time_five)
// 					{
// 						$contact_form_details['begin_date_h'] = date('H');
// 						$contact_form_details['begin_date_m'] = date('i');
// 						$contact_form_details['end_date_h'] = date('H', strtotime('+5 minutes'));
// 						$contact_form_details['end_date_m'] = date('i', strtotime('+5 minutes'));
// 						$contact_form_details['date'] = date('d.m.Y');
// 					}
// 					else
					{
						$clientq = new Client();
						$clientdata = $clientq->getClientDataByid($clientid);
						if (isset($clientdata[0]['contactform_default_visit_length']) && (int)$clientdata[0]['contactform_default_visit_length'] > 0) {
										
							$contactform_default_visit_length = (int)$clientdata[0]['contactform_default_visit_length'];
							
							if ($contactform_default_visit_length <=5 ){
								$vl_before = 0;
								$vl_after = $contactform_default_visit_length;
								
							} elseif ($contactform_default_visit_length < 10) {
								$vl_before = $contactform_default_visit_length - 5 ;
								$vl_after = $contactform_default_visit_length - $vl_before;
							} else {
								$vl_before = 5 ;
								$vl_after = $contactform_default_visit_length - 5;
							}

							$contact_form_details['begin_date_h'] = date('H', strtotime('-'.$vl_before.' minutes'));
							$contact_form_details['begin_date_m'] = date('i', strtotime('-'.$vl_before.' minutes'));
							$contact_form_details['end_date_h'] = date('H', strtotime('+'.$vl_after.' minutes'));
							$contact_form_details['end_date_m'] = date('i', strtotime('+'.$vl_after.' minutes'));
							$contact_form_details['date'] = date('d.m.Y');
						} else {
							$contact_form_details['begin_date_h'] = date('H', strtotime('-5 minutes'));
							$contact_form_details['begin_date_m'] = date('i', strtotime('-5 minutes'));
							$contact_form_details['end_date_h'] = date('H', strtotime('+10 minutes'));
							$contact_form_details['end_date_m'] = date('i', strtotime('+10 minutes'));
							$contact_form_details['date'] = date('d.m.Y');
							
							$contactform_default_visit_length = 15;
						}
						
					}
					$this->view->contactform_default_visit_length = $contactform_default_visit_length;
					$this->view->contact_form_details = $contact_form_details;
					
						
				}

				/* ---------------GET Symptomatology  block DETAILS------------------ */
				$sympval = new SymptomatologyValues();
				$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set

				$symp = new Symptomatology();
				$symptomarr_ext = $symp->getPatientSymptpomatologyLast($ipid);
				
				foreach($symptomarr_ext as $k => $sv)
				{
					$symp_last[$sv['symptomid']]['last_value'] = $sv ['input_value'];
				}

				$form_symp = new ContactFormsSymp();
				$form_symps = $form_symp->getContactFormsSymp($_REQUEST['cid'], $ipid);
				//ISPC-2629 carmen 11.08.2020
				if(!empty($form_symps))
				{
					$this->view->sympt_hasvalues = 1;
				}
				//--
				foreach($set_details as $key => $sym)
				{
					$newsymptomarr[$key] = $sym;
					$newsymptomarr[$key]['symptomid'] = $sym['id'];
					$newsymptomarr[$key]['entered_value'] = $form_symps[$sym['id']]['current_value'];
					$newsymptomarr[$key]['input_value'] = $symp_last[$sym['id']]['last_value'];
					$newsymptomarr[$key]['comment'] = $form_symps[$sym['id']]['comment'];
				}
				$this->view->symptomarr = $newsymptomarr;

				/* ----------------GET Service Entry Block DETAILS------------------------- */

				$service_val = new FormBlockServiceEntry();
				$service_details = $service_val->getFormBlockServiceEntryData();

				$contactform_services = new ContactFormServiceEntry();
				$services_form = $contactform_services->getContactFormServiceEntry($_REQUEST['cid'], $ipid);
				$services_last = $contactform_services->getLastServiceEntry($ipid);
				
				//ISPC-2629 Carmen 10.08.2020				
				if(!empty($services_form) && $_REQUEST['openinmodal'] == '1')
				{
					$this->servarrclose = 1;
				}
				//--
				foreach($services_last as $key => $sv)
				{
					$serv_last[$sv['service_entry_id']]['last_value'] = $sv ['curent_value'];
				}

				foreach($service_details as $key => $serv)
				{
					$newservarr[$key] = $serv;
					$newservarr[$key]['service_id'] = $serv['id'];
					$newservarr[$key]['entered_value'] = $services_form[$serv['id']]['curent_value'];
					$newservarr[$key]['input_value'] = $serv_last[$serv['id']]['last_value'];
					$newservarr[$key]['comment'] = $services_form[$serv['id']]['comment'];
				}
				$this->view->servarr = $newservarr;

				/* ---------------GET Symptomatology ZAPV block DETAILS------------------ */
				$symp_zapv_details = new SymptomatologyZapvDetails();
// 			$set_details_zapv = $sympval->getSymptpomatologyValues(4); //HESSEN set

				$alias = false;
				$other_alias = true;
				$multi_array = true;
				$set_details_zapv = $symp_zapv_details->getSymptpomatologyZapvDetails(4, $alias, $other_alias, $multi_array); //HESSEN set
				$symptomarr_ext_zapv = $symp->getPatientSymptpomatologyLast($ipid, '4');

				foreach($symptomarr_ext_zapv as $k => $sv)
				{
					$symp_last_zapv[$sv['symptomid']]['last_value'] = $sv ['input_value'];
				}

				$form_symp_zapv = new ContactFormsSymp();
				$form_symps_zapv = $form_symp_zapv->getContactFormsSymp($_REQUEST['cid'], $ipid);
				//ISPC-2629 carmen 11.08.2020
				if(!empty($form_symps_zapv))
				{
					$this->view->symptzapv_hasvalues = 1;
				}
				//--
				foreach($set_details_zapv as $key_zapv => $sym_zapv)
				{
					$new_symptomarr_zapv[$key_zapv] = $sym_zapv;
					$new_symptomarr_zapv[$key_zapv]['symptomid'] = $sym_zapv['id'];
					$new_symptomarr_zapv[$key_zapv]['entered_value'] = $form_symps_zapv[$sym_zapv['id']]['current_value'];
					$new_symptomarr_zapv[$key_zapv]['input_value'] = $symp_last_zapv[$sym_zapv['id']]['last_value'];
					$new_symptomarr_zapv[$key_zapv]['comment'] = $form_symps_zapv[$sym_zapv['id']]['comment'];
				}
				$this->view->symptomarr_zapv = $new_symptomarr_zapv;

				/* ---------------GET Symptomatology ZAPV Complex block DETAILS------------------ */
				$symp = new Symptomatology();
				$symp_zapv_details_complex = new SymptomatologyZapvDetails();

				$alias = true;
				$other_alias = false;
				$multi_array = true;
				$set_details_zapv_complex = $symp_zapv_details_complex->getSymptpomatologyZapvDetails(4, $alias, $other_alias, $multi_array); //HESSEN set
				$zapv_details_items = $symp_zapv_details_complex->getSymptpomatologyZapvItems();
				$this->view->zapv_details_items = $zapv_details_items;

				$symptomarr_ext_zapv_complex = $symp->getPatientSymptpomatologyLast($ipid, '4');

				foreach($symptomarr_ext_zapv_complex as $k => $sv)
				{
					$symp_last_zapv_complex[$sv['symptomid']]['last_value'] = $sv ['input_value'];
				}

				$form_symp_zapv_complex = new ContactFormsSymp();
				$form_symps_zapv_complex = $form_symp_zapv_complex->getContactFormsSymp($_REQUEST['cid'], $ipid);
				//ISPC-2629 carmen 11.08.2020
				if(!empty($form_symps_zapv_complex))
				{
					$this->view->symptzapvcomplex_hasvalues = 1;
				}
				//--
				foreach($form_symps_zapv_complex as $sympid => $details)
				{
					if($details['details'] != 0)
					{
						$details_array[$sympid][] = $details['details'];
					}
				}

				if(empty($details_array))
				{
					$contac_form_symp_details = new ContactFormsSympDetails();
					if(strlen($_REQUEST['cid']) > 0 && $_REQUEST['cid']!=0){
    					$details_array = $contac_form_symp_details->get_contact_form_symptomatology_details($_REQUEST['cid']);
					} else{
    					$details_array = $contac_form_symp_details->get_last_contact_form_symptomatology_details($ipid);
					}
				}
				
				foreach($set_details_zapv_complex as $key_zapvc => $sym_zapvc)
				{
					$new_symptomarr_zapv_complex[$key_zapvc] = $sym_zapvc;
					$new_symptomarr_zapv_complex[$key_zapvc]['symptomid'] = $sym_zapvc['id'];
// 				$new_symptomarr_zapv_complex[$key_zapvc]['details'] = $form_symps_zapv_complex[$sym_zapvc['id']]['details'];
					$new_symptomarr_zapv_complex[$key_zapvc]['details'] = $details_array[$sym_zapvc['id']];
					$new_symptomarr_zapv_complex[$key_zapvc]['entered_value'] = $form_symps_zapv_complex[$sym_zapvc['id']]['current_value'];
					$new_symptomarr_zapv_complex[$key_zapvc]['input_value'] = $symp_last_zapv_complex[$sym_zapvc['id']]['last_value'];
					$new_symptomarr_zapv_complex[$key_zapvc]['comment'] = $form_symps_zapv_complex[$sym_zapvc['id']]['comment'];

					$complex_zapv_select[$key_zapvc] = $sym_zapvc['zapv_select'];
				}

// 			print_R($new_symptomarr_zapv_complex); exit;

				$this->view->symptomarr_zapv_complex = $new_symptomarr_zapv_complex;
				$this->view->complex_zapv_select = $complex_zapv_select;



				/* ---------------------------Get Client details --  symptomatology view options-------------------------- */
				// n-> NUmbers Scale(0-10);  a -> Attributes scale (none/weak/averge/strong)
				$this->view->sympt_view_select = $clientdata[0]['symptomatology_scale'];
				
				/* ---------------------------Get Client SYMPTOME II   ---------------------------------------------------- */
				
				$s_groups = ClientSymptomsGroups::get_client_symptoms_groups($clientid);
				$client_sym_details_arr = ClientSymptoms::get_client_symptoms($clientid,false, true);

				foreach($client_sym_details_arr as $group_id=>$syms){
				    if($group_id == "0"){
    				    $grouped_syms[$group_id]['name'] =  $this->view->translate("no sym_group");
				    }else{
    				    $grouped_syms[$group_id]['name'] = $s_groups[$group_id]['groupname'];
				    }
   				    $grouped_syms[$group_id]['symps'] = $syms;

   				    foreach($syms as $k=>$data){
       				    $all_sym_details[$data['id']] = $data;
   				    }
				}

				$this->view->client_syms = $grouped_syms;
			    $this->view->client_sym_details = $client_sym_details_arr;
			    $this->view->client_sym_groups_array = $s_groups;
			    $this->view->client_sym_all_details = $all_sym_details;
			    /* --------------------------------------------------------------------- */
			    
			    
				
				
				/* --------------------------------------------------------------------------------------------------------- */
				
				
				$pq = new User();
				$pqarr = $pq->getUserByClientid($clientid);
				$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);
				$this->view->client_users = $pq->getUserByClientid($clientid);
				

				$simpleblocks=Application_Form_FormBlockKeyValue::get_simpleblocks_config();

				$pmba_blocks = array(	'lmu_pmba_sympt',
				    'lmu_pmba_body',
				    'lmu_pmba_pain',
				    'lmu_pmba_psysoz',
				    'lmu_pmba_massnahmen',
				    'lmu_pmba_anamnese',
				    'lmu_pmba_wishes',
				    'lmu_pmba_aufklaerung',
				    'lmu_contactform_atem',
				    'lmu_contactform_letters',
				    'lmu_contactform_sozaphone',
				    'lmu_contactform_sozatalk',
				    'lmu_pflegephone',
				    'lmu_pflegetalk',
				    'lmu_empfehlung_soap',
				    'lmu_atem_contacttype',
				    'lmu_pharmainfo',
				    'medclinic',
				    'lmu_pmba_allergien',
				    'lmu_visite_summary',
				    'lmu_ltr_psysoz',
				    'lmu_ltr_pflege',
				    'lmu_ltr_doctor',
				    'lmu_sign',
				    'schicht',
				    'lebenshintergrund',
				    'medigabe',
                    'pmd_rahmendaten'
				);

				
			/*----------------GET LMU_PMBA_PSYSOZ DATA-----------------------*/
			if(in_array('lmu_pmba_psysoz', $allowed_blocks)){
			    
			    //ISPC-2244
			    /*
			     // living will
			     if($patientarr['living_will'] == "1"){
			     $lmu_pmba_psysoz['Patientenverfuegung_verfuegung'] = "Vorhanden";
			     } else{
			     $lmu_pmba_psysoz['Patientenverfuegung_verfuegung'] = "nicht vorhanden";
			     }
			     */
				
				// religion
				$rel = new PatientReligions();
				$pat_rel = $rel->getReligionsData($ipid);
				$lmu_pmba_psysoz['religion'] = $pat_rel[0]['religion'];
				
				// pflese
				$pms = new PatientMaintainanceStage();
				$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);
				if ( ! empty($pat_pms) ) {
					$lmu_pmba_psysoz['Pflegestufe_stufe'] = $pat_pms[0]['stage'];
					$lmu_pmba_psysoz['Pflegestufe_hoeher'] = $pat_pms[0]['horherstufung'];
					$lmu_pmba_psysoz['Pflegestufe_neuantrag'] = $pat_pms[0]['erstantrag'];
				} else {
					$lmu_pmba_psysoz['Pflegestufe_stufe'] = '';
				}
// 				$pflegestufen = array('keine'=>'Keine Pflegestufe', '0'=>'Pflegestufe 0','1'=>'Pflegestufe 1', '2'=>'Pflegestufe 2','3'=>'Pflegestufe 3','3+'=>'Pflegestufe 3+');
// 				$lmu_pmba_psysoz['Pflegestufe_stufe']=$pflegestufen[$pat_pms[0]['stage']];
				
				$this->view->patient_lmu_pmba_psysoz_values = $lmu_pmba_psysoz;
			}
			/*-----------------------------------------------------------------------*/
			
			
			/*----------------GET IPOS HISTORY DATA-----------------------*/
			if(in_array('ipos', $allowed_blocks) || in_array('visit',$allowed_blocks) || in_array('pflegeipos',$allowed_blocks)){

				$iposhistfb=new FormBlockIpos();
                $iposhista=$iposhistfb->getIposHistory($ipid);
				$this->view->patient_ipos_hist_values = $iposhista[0];
                $iposhista2=$iposhistfb->getIposHistory($ipid,1);
                $this->view->patient_ipos_hist_table = $iposhista2[1];
				}
			/*---------------- GET IPOS HISTORY DATA END ---------------------*/
				
				
			/*----------------GET TODOS DATA-----------------------*/
			if (in_array('todos', $allowed_blocks)) {
				 
				$blockname = 'block_todos';
				$blockname_val = array();
				$todo_users = $this->get_nice_name_multiselect();
				$blockname_val['todo_users'] = $todo_users;
				$this->view->{$blockname} = $blockname_val;
			} 
			/*----------------GET TODOS DATA end-----------------------*/
			//ISPC-2454				
			/*Pms_Form::setFnOptions([
			    'create_form_puncture' => ['opened' => $opened_blocks['puncture'], 'class' => $opened_blocks['puncture'] ? ' expanded ' : ' collapsed '],
			    'create_form_infusion' => ['opened' => $opened_blocks['infusion'], 'class' => $opened_blocks['infusion'] ? ' expanded ' : ' collapsed '],
			    'create_form_infusiontimes' => ['opened' => $opened_blocks['infusiontimes'], 'class' => $opened_blocks['infusiontimes'] ? ' expanded ' : ' collapsed '],
			    'create_form_adverseevents' => ['opened' => $opened_blocks['adverseevents'], 'class' => $opened_blocks['adverseevents'] ? ' expanded ' : ' collapsed '],
			    
			    // ISPC-2387
			    'create_form_visitclasification' => ['opened' => $opened_blocks['visitclasification'], 'class' => $opened_blocks['visitclasification'] ? ' expanded ' : ' collapsed '],
			]);*/
			
			
			
			
			
			$fn_options = array(
					'create_form_puncture' => ['opened' => $opened_blocks['puncture'], 'class' => $opened_blocks['puncture'] ? ' expanded ' : ' collapsed '],
					'create_form_infusion' => ['opened' => $opened_blocks['infusion'], 'class' => $opened_blocks['infusion'] ? ' expanded ' : ' collapsed '],
					'create_form_infusiontimes' => ['opened' => $opened_blocks['infusiontimes'], 'class' => $opened_blocks['infusiontimes'] ? ' expanded ' : ' collapsed '],
					'create_form_adverseevents' => ['opened' => $opened_blocks['adverseevents'], 'class' => $opened_blocks['adverseevents'] ? ' expanded ' : ' collapsed '],
					
					// ISPC-2387
					'create_form_visitclasification' => ['opened' => $opened_blocks['visitclasification'], 'class' => $opened_blocks['visitclasification'] ? ' expanded ' : ' collapsed '],
			        
			        // ISPC-2488 Lore 22.11.2019
			        'create_form_delegation' => ['opened' => $opened_blocks['delegation'], 'class' => $opened_blocks['delegation'] ? ' expanded ' : ' collapsed '],
					
					// ISPC-2508 Carmen 22.01.2020
			        // Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
					'create_form_block_artificial_entries_exits' => ['opened' => $opened_blocks['artificial_entries_exits'], 'class' => $opened_blocks['artificial_entries_exits'] ? ' expanded ' : ' collapsed '],
			    
			        //ISPC-2671 Lore 07.09.2020
			        'create_form_patient_acp' => ['opened' => $opened_blocks['patient_acp'], 'class' => $opened_blocks['patient_acp'] ? ' expanded ' : ' collapsed '],
			    
			        //ISPC-2668 Lore 11.09.2020
			        'create_form_patient_ms' => ['opened' => $opened_blocks['patient_ms'], 'class' => $opened_blocks['patient_ms'] ? ' expanded ' : ' collapsed '],
			    
			          //ISPC-2666 Lore 16.09.2020
			         'create_form_patient_hi' => ['opened' => $opened_blocks['patient_hi'], 'class' => $opened_blocks['patient_hi'] ? ' expanded ' : ' collapsed '],
			    
			         //ISPC-2667 Lore 21.09.2020
			         'create_form_patient_ci' => ['opened' => $opened_blocks['patient_ci'], 'class' => $opened_blocks['patient_ci'] ? ' expanded ' : ' collapsed '],
	
    			    //ISPC-2669 Lore 23.09.2020
    			    'create_form_patient_hc' => ['opened' => $opened_blocks['patient_hc'], 'class' => $opened_blocks['patient_hc'] ? ' expanded ' : ' collapsed '],
			    
			         //ISPC-2670 Lore 24.09.2020
			         'create_form_patient_evn' => ['opened' => $opened_blocks['patient_evn'], 'class' => $opened_blocks['patient_evn'] ? ' expanded ' : ' collapsed '],
			    
			         //ISPC-2673 Lore 25.09.2020
    			     'create_form_resources' => ['opened' => $opened_blocks['resources'], 'class' => $opened_blocks['resources'] ? ' expanded ' : ' collapsed '],

			    //ISPC-2773 Lore 14.12.2020
			    'create_form_patient_familyinfo' => ['opened' => $opened_blocks['patient_familyinfo'], 'class' => $opened_blocks['patient_familyinfo'] ? ' expanded ' : ' collapsed '],

			    //ISPC-2788 Lore 08.01.2021
			    'create_form_patient_nutritioninfo' => ['opened' => $opened_blocks['patient_nutritioninfo'], 'class' => $opened_blocks['patient_nutritioninfo'] ? ' expanded ' : ' collapsed '],
			    
			    //ISPC-2787 Lore 11.01.2021
			    'create_form_patient_stimulatorsinfo' => ['opened' => $opened_blocks['patient_stimulatorsinfo'], 'class' => $opened_blocks['patient_stimulatorsinfo'] ? ' expanded ' : ' collapsed '],
			    
			    //ISPC-2790 Lore 12.01.2021
			    'create_form_patient_finalphase' => ['opened' => $opened_blocks['patient_finalphase'], 'class' => $opened_blocks['patient_finalphase'] ? ' expanded ' : ' collapsed '],
			    
			    //ISPC-2791 Lore 13.01.2021
			    'create_form_patient_excretioninfo' => ['opened' => $opened_blocks['patient_excretioninfo'], 'class' => $opened_blocks['patient_excretioninfo'] ? ' expanded ' : ' collapsed '],

			    //ISPC-2792 Lore 15.01.2021
			    'create_form_patient_personalhygiene' => ['opened' => $opened_blocks['patient_personalhygiene'], 'class' => $opened_blocks['patient_personalhygiene'] ? ' expanded ' : ' collapsed '],
			    
			    //ISPC-2776 Lore 15.12.2020
			    'create_form_patient_childrendiseases' => ['opened' => $opened_blocks['patient_childrendiseases'], 'class' => $opened_blocks['patient_childrendiseases'] ? ' expanded ' : ' collapsed '],
			    
			    //ISPC-2793 Lore 18.01.2021
			    'create_form_patient_communicationemployment' => ['opened' => $opened_blocks['patient_comm_employ'], 'class' => $opened_blocks['patient_comm_employ'] ? ' expanded ' : ' collapsed '],
			    
			    //IM-131, open block if have to be opened by configuration
			    'create_form_clinic_diagnosis' => ['opened' => $opened_blocks['clinic_diagnosis'], 'class' => $opened_blocks['clinic_diagnosis'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_psychosocial_status' => ['opened' => $opened_blocks['psychosocial_status'], 'class' => $opened_blocks['psychosocial_status'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_treatmentplanclinic' => ['opened' => $opened_blocks['treatment_plan_clinic'], 'class' => $opened_blocks['treatment_plan_clinic'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_timedocumentationclinic' => ['opened' => $opened_blocks['time_documentation_clinic'], 'class' => $opened_blocks['time_documentation_clinic'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_clinic_shift' => ['opened' => $opened_blocks['clinic_shift'], 'class' => $opened_blocks['clinic_shift'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_actual_problems' => ['opened' => $opened_blocks['actual_problems'], 'class' => $opened_blocks['actual_problems'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_report_recipient' => ['opened' => $opened_blocks['report_recipient'], 'class' => $opened_blocks['report_recipient'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_clinic_soap' => ['opened' => $opened_blocks['clinic_soap'], 'class' => $opened_blocks['clinic_soap'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_talkcontent' => ['opened' => $opened_blocks['talkcontent'], 'class' => $opened_blocks['talkcontent'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_talkwith' => ['opened' => $opened_blocks['talkwith'], 'class' => $opened_blocks['talkwith'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_screeningdepressionclinic' => ['opened' => $opened_blocks['screen_depression_clinic'], 'class' => $opened_blocks['screen_depression_clinic'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_jobbackgroundclinic' => ['opened' => $opened_blocks['job_background_clinic'], 'class' => $opened_blocks['job_background_clinic'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_genogram' => ['opened' => $opened_blocks['genogram'], 'class' => $opened_blocks['genogram'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_dischargeplanningclinic' => ['opened' => $opened_blocks['discharge_planning_clinic'], 'class' => $opened_blocks['discharge_planning_clinic'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_medicationclinic' => ['opened' => $opened_blocks['medication_clinic'], 'class' => $opened_blocks['medication_clinic'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_palliativ_support' => ['opened' => $opened_blocks['palliativ_support'], 'class' => $opened_blocks['palliativ_support'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_palliativ_assessment' => ['opened' => $opened_blocks['palliativ_assessment'], 'class' => $opened_blocks['palliativ_assessment'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_careprocessclinic' => ['opened' => $opened_blocks['care_process_clinic'], 'class' => $opened_blocks['care_process_clinic'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_clinic_measure' => ['opened' => $opened_blocks['clinic_measure'], 'class' => $opened_blocks['clinic_measure'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_documentation' => ['opened' => $opened_blocks['documentation'], 'class' => $opened_blocks['documentation'] ? ' expanded ' : ' collapsed '],
			    
			    'create_form_pflegeba' => ['opened' => $opened_blocks['pflegeba'], 'class' => $opened_blocks['pflegeba'] ? ' expanded ' : ' collapsed '],
			    //ISPC-2610,  elena, 23.06.2020
			    'create_form_ipos' => ['opened' => $opened_blocks['ipos'], 'class' => $opened_blocks['ipos'] ? ' expanded ' : ' collapsed '],
			    'create_form_coordinationtime' => ['opened' => $opened_blocks['coordinationtime'], 'class' => $opened_blocks['coordinationtime'] ? ' expanded ' : ' collapsed '],
			    'create_form_fileupload' => ['opened' => $opened_blocks['fileupload'], 'class' => $opened_blocks['fileupload'] ? ' expanded ' : ' collapsed '],
			    'create_form_lmu_pmba2' => ['opened' => $opened_blocks['lmu_pmba2'], 'class' => $opened_blocks['lmu_pmba2'] ? ' expanded ' : ' collapsed '],
					
				//ISPC-2663 Carmen 02.09.2020
				'create_form_talkwithsingleselection' => ['opened' => $opened_blocks['talkwithsingleselection'], 'class' => $opened_blocks['talkwithsingleselection'] ? ' expanded ' : ' collapsed '],
				//--
			    
			     //ISPC-2697, elena, 09.11.2020
                'create_form_ventilation' => ['opened' => $opened_blocks['beatmung'], 'class' => $opened_blocks['beatmung'] ? ' expanded ' : ' collapsed '],

                //ISPC-2694, elena, 14.12.2020
                'create_form_anamnese' => ['opened' => $opened_blocks['anamnese'], 'class' => $opened_blocks['anamnese'] ? ' expanded ' : ' collapsed '],

                //ISPC-2657, elena, 11.01.2021
                'create_contact_form_reactions' => ['opened' => $opened_blocks['reactions'], 'class' => $opened_blocks['reactions'] ? ' expanded ' : ' collapsed '],


			);
			
            //ISPC-2577, elena, 07.09.2020
            $shortcodeblocks     = ShortcutTextBlock::getShortcutTextBlocks();
            if(!empty($shortcodeblocks)) {
                foreach ($shortcodeblocks as $shortcodeblock) {
                    $blockname = 'block_shortcode_' . $shortcodeblock['id'];
                    // although the function doesn't exist, we kann check whether the block habe to be expanded or closed
                    $fn_options['create_form_' . $blockname] = ['opened' => $opened_blocks[$blockname], 'class' => $opened_blocks[$blockname] ? ' expanded ' : ' collapsed '];
                }
            }
            //ISPC-2698, elena, 22.12.2020
            $optionsblocks     = ClientOptionsBlocks::getClientOptionsBlocks($clientid);
            if(!empty($optionsblocks)) {
                foreach ($optionsblocks as $optionsblock) {
                    $blockname = 'block_opt_' . $optionsblock['id'];
                    // although the function doesn't exist, we kann check whether the block habe to be expanded or closed
                    $fn_options['create_form_' . $blockname] = ['opened' => $opened_blocks[$blockname], 'class' => $opened_blocks[$blockname] ? ' expanded ' : ' collapsed '];
                }
            }




			$custom_form_blocks = FormBlockCustomSettingsTable::findByClientid($clientid);
				
			$custom_blocks_allowed = array();
			foreach($custom_form_blocks as $vcfb)
			{
			
				if(in_array($vcfb['block_abbrev'], $allowed_blocks))
				{
					$custom_blocks_allowed_abbrev[] = $vcfb['block_abbrev'];
					$custom_blocks_allowed[$vcfb['id']] = $vcfb;
				}
			}
			$this->view->custom_blocks_allowed = $custom_blocks_allowed_abbrev;
			
			if(!empty($custom_blocks_allowed_abbrev))
			{
				foreach($custom_blocks_allowed as $kfba => $cfba)
				{
					$blockname = 'block_'.$cfba['block_abbrev'];
			
					$fn_options += array('create_form_custom' => ['opened' => $opened_blocks[$cfba['block_abbrev']], 'class' => $opened_blocks[$cfba['block_abbrev']] ? ' expanded ' : ' collapsed ']);
					Pms_Form::setFnOptions($fn_options);
						
					$oldValues = $this->getRequest()->getPost($cfba['block_abbrev'], null); // use the post ones, maybe this is just a print
			
					if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
						$oldValues = FormBlockCustomTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, $cfba['id'], Doctrine_Core::HYDRATE_ARRAY);
						//ISPC-2629 Carmen 11.08.2020
						if(!empty($oldValues)) 
				        {
				        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($cfba['block_abbrev'], $opened_blocks))
				        	{
				        		$options['opened'] = '1';
				        		$options['class'] = ' expanded ';			        		
				        		Pms_Form::setFnOptions($options, $cfba['block_abbrev']);
				        	}
				        }
				        else 
				        {
					        if($_REQUEST['openinmodal'] == '1')
					        {
					        	if($opened_blocks[$cfba['block_abbrev']])
					        	{
					        		$options['opened'] = null;
				        			$options['class'] = ' collapsed ';
				        			Pms_Form::setFnOptions($options, $cfba['block_abbrev']);
					        	}
					        }
				        }
						//--
					}
			
					$af_fbae = new Application_Form_FormBlockCustom(array(
							'_block_setting_data' => $cfba
					));
					$form = $af_fbae->create_form_custom($oldValues, $cfba['block_abbrev']);
			
					$__formHTML = $form->render();
			
					$this->view->{$blockname} = [
							"__formHTML" => $__formHTML,
							"__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
					];
				}
			}
			else
			{
				Pms_Form::setFnOptions($fn_options);
			}
			
			$this->view->auto_add_blocks=array();
            //ISPC-2577, elena, 07.09.2020
            if(!empty($shortcodeblocks)){
                foreach($shortcodeblocks as $shortcodeblock){
                    $blockname = 'block_shortcode_' . $shortcodeblock['id'];
                    if (in_array($blockname, $allowed_blocks)) {
                        $this->view->auto_add_blocks[$blockname]=$blockname;
                        $oldValues = $this->getRequest()->getPost($blockname, null);

                        // use the post ones, maybe this is just a print
                        if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
                            $oldValues = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, $blockname, Doctrine_Core::HYDRATE_ARRAY); //TODO-3975,Elena,17.03.2021

                        }
                        if($we_need_to_generate_pdf){
                            $oldValues['formular_type'] = 'pdf';
                        }

                        $af_kv = new Application_Form_FormBlockKeyValue();
                        $form = $af_kv->create_form_dynamic($oldValues, $ipid, $shortcodeblock);

                        $__formHTML = $form->render();

                        $this->view->{$blockname} = [
                            "__formHTML" => $__formHTML,
                            "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
                        ];


                    }

                }

            }
            //ISPC-2698, elena, 22.12.2020
            if(!empty($optionsblocks)){
                foreach($optionsblocks as $optionsblock){
                    $blockname = 'block_opt_' . $optionsblock['id'];
                    //echo $blockname;
                    //print_r($allowed_blocks);
                    if (in_array($blockname, $allowed_blocks)) {
                        $this->view->auto_add_blocks[$blockname]=$blockname;
                        $oldValues = $this->getRequest()->getPost($blockname, null);

                        // use the post ones, maybe this is just a print
                        if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
                            $oldValues = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, $blockname, Doctrine_Core::HYDRATE_ARRAY);
                        }
                        if($we_need_to_generate_pdf){
                            $oldValues['formular_type'] = 'pdf';
                        }

                        $af_kv = new Application_Form_FormBlockKeyValue();
                        $form = $af_kv->create_client_options_form($oldValues, $ipid, $optionsblock);

                        $__formHTML = $form->render();

                        $this->view->{$blockname} = [
                            "__formHTML" => $__formHTML,
                            "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
                        ];


                    }

                }

            }
			
            // ISPC-2697, elena, 05.11.2020
            if (in_array('beatmung', $allowed_blocks))
			{
                $blockname = 'beatmung';
                $this->view->auto_add_blocks[$blockname]=$blockname;
                $oldValues = $this->getRequest()->getPost('FormBlockBeatmung', null);
//print_r($oldValues);
                // use the post ones, maybe this is just a print
                if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
                    $oldValues = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
                }elseif(is_null($oldValues) &&   empty($_REQUEST['cid'])){
                    $oldValues_otherform = FormBlockKeyValue::getLastBlockValues( $ipid, 'FormBlockBeatmung');
                    //print_r($oldValues_otherform);
                    $aOldData = json_decode($oldValues_otherform['returnvalue'], true);
                    if($aOldData == null){
                        $aOldData = json_decode($oldValues_otherform['returnvalue'][0], true);
                    }

                    $oldValues['used_machine'] = $aOldData['beatmung']['machine_opt'];
                }
                if($we_need_to_generate_pdf){
                    $oldValues['formular_type'] = 'pdf';
                }
                //print_r($oldValues);


                $af_kv = new Application_Form_FormBlockKeyValue();
                $form = $af_kv->create_form_ventilation($oldValues, $ipid);

                $__formHTML = $form->render();

                $this->view->{$blockname} = [
                    "__formHTML" => $__formHTML,
                    "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
                ];

            }			

          //ISPC-2694, elena, 14.12.2020
            if (in_array('anamnese', $allowed_blocks))
			{

			    $blockname = 'anamnese';
			    //$anamnese = new Anamnese();
			   // print_r($anamnese->getSql());
                $this->view->auto_add_blocks[$blockname]=$blockname;
                $oldValues = $this->getRequest()->getPost('FormBlockAnamnese', null);

                if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
                    $oldValues = [];
                    $oldValues['stored'] = true;
                    $oldValues['anamnese'] = AnamneseTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
                }elseif(is_null($oldValues) &&   empty($_REQUEST['cid'])){
                    $oldValues = [];
                    //these are the same data that you probably need to edit. One patient have own Anamnese, it's alway a same.
                    // Maybe you need to edit or fix something
                    // That's why i fill a form with previos saved data (for example, from Stammdaten) - elena, 20.12.2020
                    $aAnamnese =  Anamnese::getLastBlockValues( $ipid);
                    if(is_array( $aAnamnese)){
                        $oldValues['anamnese']  = $aAnamnese[0];
                    }
                   
                   
                }
                if($we_need_to_generate_pdf){
                    $oldValues['formular_type'] = 'pdf';
                }
                //print_r($oldValues);


                $af_an = new Application_Form_FormBlockAnamnese();
                $form = $af_an->create_form_anamnese($oldValues, $ipid);

                $__formHTML = $form->render();

                $this->view->{$blockname} = [
                    "__formHTML" => $__formHTML,
                    "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
                ];

            }
       //ISPC-2657, elena, 11.01.2021
            if (in_array('reactions', $allowed_blocks))
			{

			    $blockname = 'reactions';

                $this->view->auto_add_blocks[$blockname]=$blockname;
                $oldValues = [];

                $oldValues = $this->getRequest()->getPost('reactions', null);

                if (is_null($oldValues) ) {
                    $oldValues = [];
                    $oldValues['stored'] = true;
                    $oldValues['reactions']['allergy'] = Reactions::getPatientReactionsByType($ipid, 'allergy');
                    $oldValues['reactions']['intolerance'] = Reactions::getPatientReactionsByType($ipid, 'intolerance');
                    $oldValues['sae_reactions'] = SaeReactions::getPatientSaeReactions($ipid);
                }
                if($we_need_to_generate_pdf){
                    $oldValues['formular_type'] = 'pdf';
                }


                $af_r= new Application_Form_Reactions();
                $form = $af_r->create_contact_form_reactions($oldValues, $ipid, false);

                $__formHTML = $form->render();

                $this->view->{$blockname} = [
                    "__formHTML" => $__formHTML,
                    "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
                ];

            }			

			if (in_array('puncture', $allowed_blocks))
			{
			    $blockname = 'block_puncture';
			    
			    $oldValues = $this->getRequest()->getPost('FormBlockPuncture', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($oldValues) && ! empty($_REQUEST['cid'])) {
			        $oldValues = FormBlockPunctureTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($oldValues)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[str_replace('block_', '', $blockname)])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //var_dump(str_replace('block_', '', $blockname)); exit;
			        //--
			    }
			    
    			$af_fbp = new Application_Form_FormBlockPuncture();
    			$form = $af_fbp->create_form_puncture($oldValues, 'FormBlockPuncture');
			    
    			$__formHTML = $form->render();
    			
    			$this->view->{$blockname} = [
    			    "__formHTML" => $__formHTML,
    			    "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
    			];
			}

			////ISPC-2610,  elena, 23.06.2020
			if (in_array('ipos', $allowed_blocks))
			{
			    $blockname = 'ipos';
                $this->view->auto_add_blocks[$blockname]=$blockname;

			    $oldValues = $this->getRequest()->getPost('ipos', null); // use the post ones, maybe this is just a print

                $patient_iposadd_vals = $this->getRequest()->getPost('ipos_add', null);
                if (is_null($oldValues) && ! empty($_REQUEST['cid'])) {
                    $ipos_block = new FormBlockIpos();
                    $oldValues = $ipos_block->getPatientFormBlockIpos($ipid, (int)$_REQUEST['cid']);
                    //ISPC-2629 Carmen 11.08.2020
			        if(!empty($oldValues)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--

			    }
                $modifiedValues = [];
			    if(!isset($oldValues['ipos']['patient_ipos_values'] )){
			        if(!isset($oldValues['patient_ipos_values'] )){
                        $modifiedValues['ipos']['patient_ipos_values'] = $oldValues[0];
                    }else{
                        $modifiedValues['ipos']['patient_ipos_values'] = $oldValues['patient_ipos_values'];
                    }

                    $modifiedValues['ipos']['user'] = $allUserArray;
                }
                if($we_need_to_generate_pdf){
                    $modifiedValues['formular_type'] = 'pdf';
                }
                $modifiedValues['ipos']['all_users'] = $all_users;
                $modifiedValues['ipos']['client_users'] = $this->view->client_users;
                $modifiedValues['patient_ipos_hist_values'] = $this->view->patient_ipos_hist_values;
                if (empty($patient_iposadd_vals) && ! empty($_REQUEST['cid'])) {
                    $lmu_iposadd_block = new FormBlockKeyValue();
                    $patient_iposadd_vals = $lmu_iposadd_block->getPatientFormBlockKeyValues($ipid, $_REQUEST['cid'], false, 'ipos_add');
                }

                $modifiedValues['v'] = json_encode($modifiedValues);

			    $af_fbkv = new Application_Form_FormBlockKeyValue();
    			$form = $af_fbkv->create_form_ipos($modifiedValues, 'FormBlockIpos', false, $patient_iposadd_vals);

    			$__formHTML = $form->render();

    			$this->view->{$blockname} = [
    			    "__formHTML" => $__formHTML,
    			    "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
    			];
			}

			if (in_array('infusion', $allowed_blocks)) 
			{
			    $blockname = 'block_infusion';
			    
			    $oldValues = $this->getRequest()->getPost('FormBlockInfusion', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
			        $oldValues = FormBlockInfusionTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($oldValues)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[str_replace('block_', '', $blockname)])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }
			    //ISPC-2470
			    if($_POST['pdfexport'] == 1 || $_POST['submitform'] == 1)
			    {
			    	$oldValues['ampoules_sufix'] = true;
			    }
			    // --
			     
			    	//print_r($oldValues)	; exit;   
			    $af_fbi = new Application_Form_FormBlockInfusion();
			    $form = $af_fbi->create_form_infusion($oldValues, 'FormBlockInfusion');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
    			    "__formHTML" => $__formHTML,
    			    "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),    
    			];
			}

			//ISPC-2628 Fileupload, elena, 15.07.2020
			if(in_array('fileupload', $allowed_blocks) && $_REQUEST['openinmodal'] != '1'){
			    $blockname = 'fileupload';
                $this->view->auto_add_blocks[$blockname]=$blockname;
                $oldValues = $this->getRequest()->getPost('fileupload', null);

                // use the post ones, maybe this is just a print
                if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
                    $oldValues = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
                    //ISPC-2629 Carmen 11.08.2020
			        if(!empty($oldValues)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
                }
                if($we_need_to_generate_pdf){
                    $oldValues['formular_type'] = 'pdf';
                }

                $af_kv = new Application_Form_FormBlockKeyValue();
                $form = $af_kv->create_form_fileupload($oldValues, $ipid);

                $__formHTML = $form->render();

                $this->view->{$blockname} = [
                    "__formHTML" => $__formHTML,
                    "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
                ];

            }
			//print_r($allowed_blocks);
			//ISPC-2631 ELSA: körperliche Untersuchung, elena, 22.07.2020
			if(in_array('lmu_pmba2', $allowed_blocks)){
 
			    $blockname = 'lmu_pmba2';
                $this->view->auto_add_blocks[$blockname]=$blockname;
                $oldValues = $this->getRequest()->getPost('lmu_pmba2', null); // use the post ones, maybe this is just a print
                if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
                    $oldValues = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
                    //ISPC-2629 Carmen 11.08.2020
                    if(!empty($oldValues))
                    {
                    	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
                    	{
                    		$options['opened'] = '1';
                    		$options['class'] = ' expanded ';
                    		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
                    	}
                    }
                    else
                    {
                    	if($_REQUEST['openinmodal'] == '1')
                    	{
                    		if($opened_blocks[$blockname])
                    		{
                    			$options['opened'] = null;
                    			$options['class'] = ' collapsed ';
                    			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
                    		}
                    	}
                    }
                    //--
                }
                if($we_need_to_generate_pdf){
                    $oldValues['formular_type'] = 'pdf';
                }

                $af_kv = new Application_Form_FormBlockKeyValue();
                $form = $af_kv->create_form_lmu_pmba2($oldValues, $ipid);

                $__formHTML = $form->render();

                $this->view->{$blockname} = [
                    "__formHTML" => $__formHTML,
                    "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
                ];

            }

			if (in_array('infusiontimes', $allowed_blocks)) 
			{
			    $blockname = 'block_infusiontimes';
			    
			    $oldValues = $this->getRequest()->getPost('FormBlockInfusiontimes', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
			        $oldValues = FormBlockInfusiontimesTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($oldValues)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[str_replace('block_', '', $blockname)])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }			    
			    
			    $af_fbit = new Application_Form_FormBlockInfusiontimes();
			    $form = $af_fbit->create_form_infusiontimes($oldValues, 'FormBlockInfusiontimes');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
    			    "__formHTML" => $__formHTML,
    			    "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
    			];
			}
			
			
			if (in_array('adverseevents', $allowed_blocks)) 
			{
			    $blockname = 'block_adverseevents';
			    
			    $oldValues = $this->getRequest()->getPost('FormBlockAdverseevents', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
			        $oldValues = FormBlockAdverseeventsTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($oldValues)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[str_replace('block_', '', $blockname)])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }
			    			    
			    $af_fbae = new Application_Form_FormBlockAdverseevents();
			    $form = $af_fbae->create_form_adverseevents($oldValues, 'FormBlockAdverseevents');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
    			    "__formHTML" => $__formHTML,
    			    "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
    			];		    
			}
			
			
			//ISPC-2387
			if (in_array('visitclasification', $allowed_blocks)) 
			{
			    $blockname = 'block_visitclasification';
			    
			    $oldValues = $this->getRequest()->getPost('FormBlockVisitClasification', null); // use the post ones, maybe this is just a print
 
			    if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
			        $oldValues = FormBlockVisitClasificationTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($oldValues)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[str_replace('block_', '', $blockname)])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }
			    			    
			    $af_fbae = new Application_Form_FormBlockVisitClasification();
			    $form = $af_fbae->create_form_visitclasification($oldValues, 'FormBlockVisitClasification');
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
    			    "__formHTML" => $__formHTML,
    			    "__formOLDValues" => $oldValues,
    			    "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
    			];		    
			}
			
			
			//ISPC-2488 Lore 22.11.2019
			if (in_array('delegation', $allowed_blocks))
			{
			    $blockname = 'block_delegation';
			    
			    $oldValues = $this->getRequest()->getPost('FormBlockDelegation', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
			        $oldValues = FormBlockDelegationTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($oldValues)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[str_replace('block_', '', $blockname)])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }
			    
			    $af_fbae = new Application_Form_FormBlockDelegation();
			    $form = $af_fbae->create_form_delegation($oldValues, 'FormBlockDelegation');
			    $__formHTML = $form->render();
// 			    dd($__formHTML);
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $oldValues,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			
			//ISPC-2508 Carmen 22.01.2020
			// Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
			if (in_array('artificial_entries_exits', $allowed_blocks))
			{
				$blockname = 'block_artificial_entries_exits';
				
				//get client artificial entries exits options
				$client_options = ArtificialEntriesExitsListTable::getInstance()->findByClientid($this->logininfo->clientid, Doctrine_Core::HYDRATE_ARRAY);
				foreach($client_options as $kr => $vr)
				{
					$client_options_byids[$vr['id']] = $vr;
				}
				
				//get the artificial entries exits of the patient
				$patenex = PatientArtificialEntriesExitsTable::getInstance()->findByIpidAndIsremove($ipid, '0', Doctrine_Core::HYDRATE_ARRAY);
				foreach($patenex as $kr => $vr)
				{
					$patient_artenex_byids[$vr['id']] = $vr; 
					$patient_art_ids[] = [$vr['id']];
				}				
				
				$oldValues = $this->getRequest()->getPost('FormBlockArtificialEntriesExits', null); // use the post ones, maybe this is just a print
			 
				if (is_null($oldValues) &&  ! empty($_REQUEST['cid'])) {
					$oldValuesfromdb = FormBlockArtificialEntriesExitsTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
					//ISPC-2629 Carmen 11.08.2020
			        if(!empty($oldValuesfromdb)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[str_replace('block_', '', $blockname)])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
				}
				
				if(is_null($oldValues) && !empty($patient_artenex_byids))
				{
					if(!empty($oldValuesfromdb))
					{
						$oldValues['id'] = $oldValuesfromdb['id'];
					}
					foreach($patient_artenex_byids as $kr => $vr)
					{
						$oldValues[$kr]['option_name'] = $client_options_byids[$vr['option_id']]['name'];
						$oldValues[$kr]['option_id'] = $vr['option_id'];
						$oldValues[$kr]['option_availability'] = $client_options_byids[$vr['option_id']]['days_availability'];
						$oldValues[$kr]['option_date'] = $patient_artenex_byids[$vr['id']]['option_date'];
						$option_age =  Pms_CommonData::get_days_number_between(date('Y-m-d H:i:s', time()), $oldValues[$kr]['option_date']);
						if($option_age > 0)
						{
							$oldValues[$kr]['option_age'] = $option_age;
						}
						else 
						{
							$oldValues[$kr]['option_age'] = 0;
						}
						$oldValues[$kr]['option_contactform_date'] = $contact_form_details['date'];
						if(array_key_exists($kr, $oldValuesfromdb['artificial_content']))
						{
							//$oldValues[$kr]['id'] = $oldValuesinitial[$vr['id']]['id'];
							//$oldValues[$kr]['contact_form_id'] = $oldValuesinitial[$vr['id']]['contact_form_id'];
							$oldValues[$kr]['patient_option_id'] = $kr;
							$oldValues[$kr]['option_status'] = $oldValuesfromdb['artificial_content'][$kr]['option_status'];
							$oldValues[$kr]['option_comment'] = $oldValuesfromdb['artificial_content'][$kr]['option_comment'];
						}
						else 
						{
							$oldValues[$kr]['patient_option_id'] = $kr;
						}
					}
				}
				elseif(!is_null($oldValues))
				{
					foreach($oldValues['artificial_content'] as $kr => $vr)
					{
						if($vr['action_option'] && ($vr['action_option'] == 'delete' || $vr['action_option'] == 'remove'))
						{
							continue;
						}
						else
						{
							$vr['option_name'] = $client_options_byids[$vr['option_id']]['name'];
							$vr['option_availability'] = $client_options_byids[$vr['option_id']]['days_availability'];							
							//$vr['option_date'] = $patient_artenex_byids[$kr]['option_date'];
							$option_age =  Pms_CommonData::get_days_number_between(date('Y-m-d H:i:s', time()), $vr['option_date']);
							if($option_age > 0)
							{
								$vr['option_age'] = $option_age;
							}
							else 
							{
								$vr['option_age'] = 0;
							}
							$vr['option_contactform_date'] = $contact_form_details['date'];
							$oldValues[$kr] = $vr;
						}
					}
				}
				unset($oldValues['artificial_content']);
				//print_r($oldValues); exit;
				$af_fbae = new Application_Form_FormBlockArtificialEntriesExits(array(
							'_patient_artificial_options' => $patient_artenex_byids,
							'_client_artificial_options' => $client_options_byids,
				));
				$form = $af_fbae->create_form_block_artificial_entries_exits($oldValues, 'FormBlockArtificialEntriesExits');
				$__formHTML = $form->render();
				// 			    dd($__formHTML);
				 
				$this->view->{$blockname} = [
						"__formHTML" => $__formHTML,
						"__formOLDValues" => $oldValues,
						"__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
				];
				
			}
			
			//ISPC-2671 Lore 07.09.2020
			if (in_array('patient_acp', $allowed_blocks))
			{
			    $blockname = 'block_patient_acp';
			    
			    //$options = $this->getRequest()->getPost('PatientACP', null); // use the post ones, maybe this is just a print
			    $options = $this->getRequest()->getPost('PatientAcp', []);
			    
			    if (is_null($options) || empty($options)) {
			        
    			    $saved_PatientAcp = array();
    			    $entity = new PatientAcp();
    			    $saved = $entity->getByIpid( array($ipid) );
                    //ISPC-2565,Elena,26.02.2021
    			    foreach($saved[$this->ipid] as $row) {
                        if ($row['division_tab'] == 'healthcare_proxy' || $row['division_tab'] == 'care_orders') {
                            if (($row['active'] == 'yes') && (!empty($row['contactperson_master_id']))) {
                               // $saved_PatientAcp[$row['division_tab']]['active'] = true;
                                $saved_PatientAcp[$row['division_tab']]['contacts'][$row['contactperson_master_id']] = $row;
                                //for older records
                                $saved_PatientAcp[$row['division_tab']]['files'] = $row['files'];
                            }elseif($row['contactperson_master_id'] == 0){
                                $saved_PatientAcp[$row['division_tab']]['active'] = $row['active'];
                                $saved_PatientAcp[$row['division_tab']]['comments'] = $row['comments'];
                                $saved_PatientAcp[$row['division_tab']]['files'] = $row['files'];
                            }
                        } else {
                            if (!empty($row['division_tab']) && (!empty($row['contactperson_master_id']))) {
    			        $saved_PatientAcp[$row['division_tab']] =  $row;
    			    }
    			    
                        }
                    }

    			    
    			    $options = $saved_PatientAcp; 

			    }else{//ISPC-2565,Elena,26.02.2021
                    $checked_PatientAcp = array();
			        $care_orders_ids = $options['care_orders']['contactperson_master_id'];
                    $entity = new PatientAcp();
                    foreach($care_orders_ids as $coid){
                        //$row = $entity->getById( $coid );
                        $checked_PatientAcp['care_orders']['contacts'][$coid] = ['contactperson_master_id' => $coid,
                            'active' => 'yes',
                        'ipid' => $ipid];


                    }
                    $healthcare_proxy_ids = $options['healthcare_proxy']['contactperson_master_id'];

                    foreach($healthcare_proxy_ids as $hoid){
                        //$row = $entity->getById( $coid );
                        $checked_PatientAcp['healthcare_proxy']['contacts'][$hoid] = ['contactperson_master_id' => $hoid,
                            'active' => 'yes',
                            'ipid' => $ipid];


                    }
                    $options['healthcare_proxy']['contacts'] = $checked_PatientAcp['healthcare_proxy']['contacts'];
                    $options['care_orders']['contacts'] = $checked_PatientAcp['care_orders']['contacts'];




			    }
			    if(!empty($options))
		        {
		            if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
		            {
		                $options['opened'] = '1';
		                $options['class'] = ' expanded ';
		                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
		            }
		        }
		        else
		        {
		            if($_REQUEST['openinmodal'] == '1')
		            {
		                if($opened_blocks[str_replace('block_', '', $blockname)])
		                {
		                    $options['opened'] = null;
		                    $options['class'] = ' collapsed ';
		                    Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
		                }
		            }
		        }

		        if($we_need_to_generate_pdf){
		            $options['formular_type'] = 'pdf';
		            
		        } else {
		            
		            $this->view->headScript()->appendFile(RES_FILE_PATH . '/javascript/views/patientnew/patientdetailscontactform.js' );
		           
		            $this->view->headScript()->appendFile( RES_FILE_PATH . '/javascript/pms/jquery.changeEventOrder.js' );
		            $this->view->headLink()->appendStylesheet(RES_FILE_PATH . '/css/page-css/versorger.css?');
		            //add file uploader
		            $this->view->headScript()->appendFile(RES_FILE_PATH . '/javascript/fine-uploader/fine-uploader.min.js');
		            $this->view->headLink()->appendStylesheet(RES_FILE_PATH .'/javascript/fine-uploader/fine-uploader.css');
		            
		            //rendered-add the fine-uploader file-uploader template
		            //$qqtemplate = $this->render("/templates/qq_fileupload_template_small_2017_09");
		            $newview = new Zend_View();
		            $newview->setScriptPath(APPLICATION_PATH."/views/scripts/templates/");
		            $qqtemplate=$newview->render('qq_fileupload_template_small_2017_09.html');
		            $this->view->headScript()->setAllowArbitraryAttributes(true)->appendScript($qqtemplate, 'text/template', array("id" => "qq-template", "noescape" => true));
		        }
		        
			    $af_pacp = new Application_Form_PatientACP(
			        array(
                        "_patientMasterData" => $patientmaster->get_patientMasterData()
			        )
			    );
			    $form = $af_pacp->create_form_block_patient_acp($options, 'PatientAcp');
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2668 Lore 11.09.2020
 			if (in_array('patient_ms', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_ms';
			    
			    $options = $this->getRequest()->getPost('PatientMaintainanceStage', []); // use the post ones, maybe this is just a print
			     
			    if(is_null($options) || empty($options)){
			        
    			    $saved_PatientMs = array();
    			    $entity = new PatientMaintainanceStage();
    			    $saved_PatientMs = $entity->getLastpatientMaintainanceStage( array($this->ipid) );
    			    $options = $saved_PatientMs[0]; 
			    } 
			    
 
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			        
			    }
			    //$af_pacp = new Application_Form_PatientMaintainanceStage();
			    $af_pm =  new Application_Form_PatientMaintainanceStage(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_ms($options, 'PatientMaintainanceStage');
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2666 Lore 16.09.2020
			if (in_array('patient_hi', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_hi';
			    
			    $options = $this->getRequest()->getPost('PatientHealthInsurance', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientHi = array();
			        $entity = new PatientHealthInsurance();
			        $saved_PatientHi = $entity->getPatientHealthInsurance( $this->ipid );
			        $options = $saved_PatientHi[0];
			    }
			    
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    } 
			    
			    $af_pm =  new Application_Form_PatientHealthInsurance(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_hi($options, 'PatientHealthInsurance');
			    $form->setAttrib("class", "wlassessment_form_class livesearchFormEvents w100percent"); //ISPC-2666 Lore 18.09.2020 
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}

			
			//ISPC-2667 Lore 21.09.2020
			if (in_array('patient_ci', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_ci';
			    
			    $options = $this->getRequest()->getPost('PatientCareInsurance', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientCi = array();
			        $entity = new PatientCareInsurance();
			        $saved_PatientCi = $entity->getPatientCareInsurance( $this->ipid );
			        $options = $saved_PatientCi[0];
			    }
			    
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_pm =  new Application_Form_PatientCareInsurance(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_ci($options, 'PatientCareInsurance');
			    $form->setAttrib("class", "w100percent");   
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2669 Lore 23.09.2020
			if (in_array('patient_hc', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_hc';
			    
			    $options = $this->getRequest()->getPost('PatientHandicappedCard', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientCi = array();
			        $entity = new PatientHandicappedCard();
			        $saved_PatientCi = $entity->getPatientHandicappedCard( $this->ipid );
			        $options = $saved_PatientCi[0];
			    }
			    
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_pm =  new Application_Form_PatientHandicappedCard(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_hc($options, 'PatientHandicappedCard');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2773 Lore 14.12.2020
			if (in_array('patient_familyinfo', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_familyinfo';
			    
			    $options = $this->getRequest()->getPost('PatientFamilyInfo', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientFi = array();
			        $entity = new PatientFamilyInfo();
			        $saved_PatientFi = $entity->getPatientFamilyInfo( $this->ipid );
			        $options = $saved_PatientFi[0];
			    }
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_pm =  new Application_Form_PatientFamilyInfo(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_familyinfo($options, 'PatientFamilyInfo');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2776 Lore 15.12.2020
			if (in_array('patient_childrendiseases', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_childrendiseases';
			    
			    $options = $this->getRequest()->getPost('PatientChildrenDiseases', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientFi = array();
			        $entity = new PatientChildrenDiseases();
			        $saved_PatientFi = $entity->getPatientChildrenDiseases( $this->ipid );
			        $options = $saved_PatientFi[0];
			    }
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_pm =  new Application_Form_PatientChildrenDiseases(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_childrendiseases($options, 'PatientChildrenDiseases');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2788 Lore 08.01.2021
			if (in_array('patient_nutritioninfo', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_nutritioninfo';
			    
			    $options = $this->getRequest()->getPost('PatientNutritionInfo', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientNi = array();
			        $entity = new PatientNutritionInfo();
			        $saved_PatientNi = $entity->getPatientNutritionInfo( $this->ipid );
			        $options = $saved_PatientNi[0];
			    }
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_pm =  new Application_Form_PatientNutritionInfo(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_nutritioninfo($options, 'PatientNutritionInfo');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			
			//ISPC-2787 Lore 11.01.2021
			if (in_array('patient_stimulatorsinfo', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_stimulatorsinfo';
			    
			    $options = $this->getRequest()->getPost('PatientStimulatorsInfo', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientSi = array();
			        $entity = new PatientStimulatorsInfo();
			        $saved_PatientSi = $entity->getPatientStimulatorsInfo( $this->ipid );
			        $options = $saved_PatientSi[0];
			    }
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_pm =  new Application_Form_PatientStimulatorsInfo(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_stimulatorsinfo($options, 'PatientStimulatorsInfo');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2790 Lore 12.01.2021
			if (in_array('patient_finalphase', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_finalphase';
			    
			    $options = $this->getRequest()->getPost('PatientFinalPhase', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientFp = array();
			        $entity = new PatientFinalPhase();
			        $saved_PatientFp = $entity->getPatientFinalPhase( $this->ipid );
			        $options = $saved_PatientFp[0];
			    }
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_pm =  new Application_Form_PatientFinalPhase(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_finalphase($options, 'PatientFinalPhase');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2791 Lore 13.01.2021
			if (in_array('patient_excretioninfo', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_excretioninfo';
			    
			    $options = $this->getRequest()->getPost('PatientExcretionInfo', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientEi = array();
			        $entity = new PatientExcretionInfo();
			        $saved_PatientEi = $entity->getPatientExcretionInfo( $this->ipid );
			        $options = $saved_PatientEi[0];
			    }
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_pm =  new Application_Form_PatientExcretionInfo(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_excretioninfo($options, 'PatientExcretionInfo');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2792 Lore 14.01.2021
			if (in_array('patient_personalhygiene', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_personalhygiene';
			    
			    $options = $this->getRequest()->getPost('PatientPersonalHygiene', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientPh = array();
			        $entity = new PatientPersonalHygiene();
			        $saved_PatientPh = $entity->getPatientPersonalHygiene( $this->ipid );
			        $options = $saved_PatientPh[0];
			    }
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_pm =  new Application_Form_PatientPersonalHygiene(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_personalhygiene($options, 'PatientPersonalHygiene');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2793 Lore 18.01.2021
			if (in_array('patient_comm_employ', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_comm_employ';
			    
			    $options = $this->getRequest()->getPost('PatientCommunicationEmployment', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientCe = array();
			        $entity = new PatientCommunicationEmployment();
			        $saved_PatientCe = $entity->getPatientCommunicationEmployment( $this->ipid );
			        $options = $saved_PatientCe[0];
			    }
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_pm =  new Application_Form_PatientCommunicationEmployment(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_communicationemployment($options, 'PatientCommunicationEmployment');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2670 Lore 24.09.2020
			if (in_array('patient_evn', $allowed_blocks))
			{
			    
			    $blockname = 'block_patient_evn';
			    
			    $options = $this->getRequest()->getPost('PatientEvn', []); // use the post ones, maybe this is just a print
			    
			    if(is_null($options) || empty($options)){
			        
			        $saved_PatientCi = array();
			        $entity = new PatientEvn();
			        $saved_PatientCi = $entity->getPatientEvn( $this->ipid );
			        $options = $saved_PatientCi[0];
			    }
			    
			    
			    if(!empty($options))
			    {
			        if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        {
			            $options['opened'] = '1';
			            $options['class'] = ' expanded ';
			            Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        }
			    }
			    else
			    {
			        if($_REQUEST['openinmodal'] == '1')
			        {
			            if($opened_blocks[str_replace('block_', '', $blockname)])
			            {
			                $options['opened'] = null;
			                $options['class'] = ' collapsed ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			    }
			    
			    
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_pm =  new Application_Form_PatientEvn(array(
			        '_patientMasterData'    => $this->_patientMasterData
			    ));
			    
			    $form = $af_pm->create_form_block_patient_evn($options, 'PatientEvn');
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2673 Lore 25.09.2020
			if (in_array('resources', $allowed_blocks))
			{
			    $blockname = 'block_resources';
			    
			    $options = $this->getRequest()->getPost('FormBlockResources', null); // use the post ones, maybe this is just a print
			    
/* 			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockResourcesTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
			        
			        if(!empty($options))
			        {
			            if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			            {
			                $options['opened'] = '1';
			                $options['class'] = ' expanded ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			        else
			        {
			            if($_REQUEST['openinmodal'] == '1')
			            {
			                if($opened_blocks[str_replace('block_', '', $blockname)])
			                {
			                    $options['opened'] = null;
			                    $options['class'] = ' collapsed ';
			                    Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			                }
			            }
			        }
			        //--
			    } */
			    
			    if (is_null($options)) {
			        
			        if( ! empty($_REQUEST['cid'])){          // open an old contactform
			            $options = FormBlockResourcesTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
			        } else {
			            $contactform_id = 0;         //  open new contactform with info if i have stamdaten saved
			            $options = FormBlockResourcesTable::getInstance()->findOneByContactFormIdAndIpid( (int)$contactform_id, $ipid, Doctrine_Core::HYDRATE_ARRAY);
			        }
			        
			        if(!empty($options))
			        {
			            if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			            {
			                $options['opened'] = '1';
			                $options['class'] = ' expanded ';
			                Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			            }
			        }
			        else
			        {
			            if($_REQUEST['openinmodal'] == '1')
			            {
			                if($opened_blocks[str_replace('block_', '', $blockname)])
			                {
			                    $options['opened'] = null;
			                    $options['class'] = ' collapsed ';
			                    Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			                }
			            }
			        }
			        //--
			    }
			    
			    
			    $af_fbae = new Application_Form_FormBlockResources();
			    $form = $af_fbae->create_form_resources($options, 'FormBlockResources');
			    $__formHTML = $form->render();
			    // 			    dd($__formHTML);
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formOLDValues" => $options,
			        "__formPDF"  => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			
			




            //IM-159, elena, 27.10.2020
			$patientdetailscontactform_bound = false;
			
			// ISPC-Migration//IM-4//Care Process Clinic
			if (in_array('care_process_clinic', $allowed_blocks)) {
			    $blockname = 'block_careprocessclinic';
			    
			    $options = $this->getRequest()->getPost('FormBlockCareProcessClinic', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockCareprocessClinic', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists('care_process_clinic', $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks['care_process_clinic'])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_careprocessclinic($options, 'FormBlockCareProcessClinic', $ipid);
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}

			
			
			// ISPC-Migration//IM-16//Time Documentation Clinic
			if (in_array('time_documentation_clinic', $allowed_blocks)) {
			    $blockname = 'block_timedocumentationclinic';
			    
			    $options = $this->getRequest()->getPost('FormBlockTimedocumentationClinic', null); // use the post ones, maybe this is just a print
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockTimedocumentationClinicTable::getInstance()->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists('time_documentation_clinic', $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks['time_documentation_clinic'])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }
			    
			    if(isset($options['patient_case_type'])){
			        $patient_case_type = $options['patient_case_type'];
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    // IM-116, if it is a new BA-Form with data of old BA-Form, remove Timedocumetation - elena
			    if(strlen($_REQUEST['ftid']) > 0 && strlen($_REQUEST['cid'] > 0  && $_REQUEST['continue'] == 'continue')){
			        unset($options['id']);
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockTimedocumentationClinic();
			    $form = $af_fbkv->create_form_timedocumentationclinic($options, 'FormBlockTimedocumentationClinic', $ipid);
			    $__formHTML = $form->render();
			    
			    
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			$this->view->patient_case_type = $patient_case_type;
			
			
			
			
			// ISPC-Migration//IM-26//Treatment-plan Clinic
			if (in_array('treatment_plan_clinic', $allowed_blocks)) {
			    $blockname = 'block_treatmentplanclinic';
			    
			    $options = $this->getRequest()->getPost('FormBlockTreatmentPlanClinic', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockTreatmentPlanClinic', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists('treatment_plan_clinic', $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks['treatment_plan_clinic'])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_treatmentplanclinic($options, 'FormBlockTreatmentPlanClinic', $decid);
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
            //ISPC-2868,Elena,18.03.2021
			if(in_array('talkback', $allowed_blocks)){
			    $blockname = 'talkback';
                $options = $this->getRequest()->getPost($blockname, null);
                if(is_null($options) &&  ! empty($_REQUEST['cid'])){
                    $opts = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'talkback', Doctrine_Core::HYDRATE_ARRAY);
                    $options_array = json_decode($opts['v'], true);
                    $options = $options_array[$blockname];

                }
                if($we_need_to_generate_pdf){
                    $options['formular_type'] = 'pdf';
                }
                //print_r($write2_recordata_blocks['talkback']);
                $patient_talkback_values['freetext'] = $options['freetext'];
                $patient_talkback_values['optionvalue'] = $options['optionvalue'];
                //talkback part exists in contactform.html
                $this->view->patient_talkback_values = $patient_talkback_values;

            }
			
			
			// ISPC-Migration//IM-25 Versorger
			if (in_array('versorger', $allowed_blocks)) {
			    $blockname = 'versorger';
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    
			    $options=array();
			    $options['formular_type']="html";
			    
			    $post_vals = $this->getRequest()->getPost($blockname, null); // use the post ones, maybe this is just a print
			    
			    if (is_null($post_vals) &&  ! empty($_REQUEST['cid'])) {
			        //$post_vals = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, $blockname, Doctrine_Core::HYDRATE_ARRAY);
			        $fbkv=new FormBlockKeyValue();
			        $post_vals  = $fbkv->getPatientFormBlockKeyValues($ipid, $_REQUEST['cid'], false, $blockname);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($post_vals)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
			        //$post_vals  =   json_decode($post_vals['vals'],1);
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }else{
			        $this->view->headScript()
			        ->appendFile(RES_FILE_PATH . '/javascript/views/patientnew/versorger.js' );			       
			        $this->view->headLink()
			        ->appendStylesheet(RES_FILE_PATH . '/css/page-css/versorger.css?');
			    }
			    
			    if(! ($options['formular_type'] === 'pdf')) {
			        $vv = new ClinicVersorger();
			        $vdata = $vv->getPatientData($ipid);
			        $html_json = json_encode($vv->renderreportextract($vdata));
			    }
			    
			    $options['patient_html_json']=$html_json;
			    $options['encid']=Pms_Uuid::encrypt($decid);
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $options['opened'] = $opened_blocks['versorger'] ;
			    $options['class'] =  $opened_blocks['versorger'] == 1 ? ' expanded ' : ' collapsed ';
			    $hform=$af_fbkv->create_simple_template_form($blockname, 'form_block_'.$blockname.'.html',$post_vals,$options);
			    $__formHTML = $hform->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			
			// ISPC-Migration//IM-46- Conversation content
			if (in_array('talkcontent', $allowed_blocks)) {
			    $blockname = 'talkcontent';
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    $this->getHelper('viewRenderer')->setViewSuffix('phtml');
			    
			    $options = $this->getRequest()->getPost('FormBlockTalkContent', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockTalkContent', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_talkcontent($options, $ipid, $form_type_id);
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			// ISPC-Migration//IM-47- Jobbackground of Clinic-Patient
			if (in_array('job_background_clinic', $allowed_blocks)) {
			    $blockname = 'block_jobbackgroundclinic';
			    
			    $options = $this->getRequest()->getPost('FormBlockJobBackgroundClinic', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockJobBackgroundClinic', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists('job_background_clinic', $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks['job_background_clinic'])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_jobbackgroundclinic($options, 'FormBlockJobBackgroundClinic', $decid);
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			
			// ISPC-Migration//IM-48 discharge planning clinic
			if (in_array('discharge_planning_clinic', $allowed_blocks)) {
			    $blockname = 'block_dischargeplanningclinic';
			    
			    $options = $this->getRequest()->getPost('FormBlockDischargePlanningClinic', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockDischargePlanningClinic', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists('discharge_planning_clinic', $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks['discharge_planning_clinic'])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_dischargeplanningclinic($options, 'FormBlockDischargePlanningClinic', $decid);
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			
			// ISPC-Migration//IM-51- Screening for Depression Clinic
			if (in_array('screen_depression_clinic', $allowed_blocks)) {
			    $blockname = 'block_screeningdepressionclinic';
			    
			    $options = $this->getRequest()->getPost('FormBlockScreeningDepressionClinic', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockScreeningDepressionClinic', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists('screen_depression_clinic', $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks['screen_depression_clinic'])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_screeningdepressionclinic($options, 'FormBlockScreeningDepressionClinic', $decid);
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			
			// ISPC-Migration//IM-53 Medication Clinic
			if (in_array('medication_clinic', $allowed_blocks)) {
			    $blockname = 'medication_clinic';
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    $this->getHelper('viewRenderer')->setViewSuffix('phtml');
			    
			    
			    $options = $this->getRequest()->getPost('FormBlockMedicationClinic', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockMedicationClinic', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_medicationclinic');
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_medicationclinic');
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_medicationclinic($options, $ipid);
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			
			
			// ISPC-Migration//IM-55- Genogramm
			if (in_array('genogram', $allowed_blocks)) {
			    $blockname = 'genogram';
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    $this->getHelper('viewRenderer')->setViewSuffix('phtml');
			    
			    $options = $this->getRequest()->getPost('FormBlockGenogram', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockGenogram', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    else{
			        $this->view->headScript()
			        ->appendFile(RES_FILE_PATH . '/javascript/views/patientnew/patientdetailscontactform.js' );
			       
			        $this->view->headLink()
			        ->appendStylesheet(RES_FILE_PATH . '/css/page-css/versorger.css?');
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_genogram($options, $ipid , $patientarr);
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			// ISPC-Migration//IM-56- Talk with
			if (in_array('talkwith', $allowed_blocks)) {
			    $blockname = 'block_talkwith';
			    
			    $options = $this->getRequest()->getPost('FormBlockTalkWith', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockTalkWith', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[str_replace('block_', '', $blockname)])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_talkwith($options, 'FormBlockTalkWith', $decid);
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			
			// ISPC-Migration//IM-62- psychosocial status
			if (in_array('psychosocial_status', $allowed_blocks)) {
			    $blockname = 'psychosocial_status';
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    $this->getHelper('viewRenderer')->setViewSuffix('phtml');
			    
			    $options = $this->getRequest()->getPost('FormBlockPsychosocialStatus', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockPsychosocialStatus', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    else{
			        $this->view->headScript()
			        ->appendFile(RES_FILE_PATH . '/javascript/views/patientnew/patientdetailscontactform.js' );
			        
			        $this->view->headScript()->appendFile( RES_FILE_PATH . '/javascript/pms/jquery.changeEventOrder.js' );
			        $this->view->headLink()
			        ->appendStylesheet(RES_FILE_PATH . '/css/page-css/versorger.css?');
			        //add file uploader
			        $this->view->headScript()->appendFile(RES_FILE_PATH . '/javascript/fine-uploader/fine-uploader.min.js');
			        $this->view->headLink()->appendStylesheet(RES_FILE_PATH .'/javascript/fine-uploader/fine-uploader.css');
			        
			        //rendered-add the fine-uploader file-uploader template
			        //$qqtemplate = $this->render("/templates/qq_fileupload_template_small_2017_09");
			        $newview = new Zend_View();
			        $newview->setScriptPath(APPLICATION_PATH."/views/scripts/templates/");
			        $qqtemplate=$newview->render('qq_fileupload_template_small_2017_09.html');
			        $this->view->headScript()->setAllowArbitraryAttributes(true)->appendScript($qqtemplate, 'text/template', array("id" => "qq-template", "noescape" => true));
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_psychosocial_status($options, $ipid);
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			// ISPC-Migration//IM-65- palliativ_support
			if (in_array('palliativ_support', $allowed_blocks)) {
			    $blockname = 'block_palliativsupport';
			    
			    $options = $this->getRequest()->getPost('FormBlockPalliativSupport', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockPalliativSupport', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists('palliativ_support', $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_palliativ_support');
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks['palliativ_support'])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_palliativ_support');
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_palliativ_support($options, $ipid);
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			// ISPC-Migration//IM-66- palliativ_assessment
			if (in_array('palliativ_assessment', $allowed_blocks)) {
			    $blockname = 'block_palliativassessment';
			    
			    $options = $this->getRequest()->getPost('FormBlockPalliativAssessment', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockPalliativAssessment', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists('palliativ_assessment', $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_palliativ_assessment');
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks['palliativ_assessment'])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_palliativ_assessment');
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_palliativ_assessment($options, $ipid);
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			// ISPC-Migration//IM-87- SOAP (Subjective - Objective - Assessment - Plan)
			if (in_array('clinic_soap', $allowed_blocks)) {
			    $blockname = 'block_clinicsoap';
			    
			    $options = $this->getRequest()->getPost('FormBlockSOAP', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockSOAP', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists('clinic_soap', $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_clinic_soap');
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks['clinic_soap'])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_clinic_soap');
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_clinic_soap($options, $ipid);
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			// ISPC-Migration//IM-91- Clinic diagnosis by admission
			if (in_array('clinic_diagnosis', $allowed_blocks)) {
			    $blockname = 'block_clinicdiagnosis';
			    
			    $options = $this->getRequest()->getPost('FormBlockDiagnosisClinic', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockDiagnosisClinic', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists('clinic_diagnosis', $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_clinic_diagnosis');
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks['clinic_diagnosis'])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_clinic_diagnosis');
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    else{
			        $this->view->headScript()->appendFile(RES_FILE_PATH . '/javascript/views/patientformnew/wlassessment.js');
			        $this->view->headScript()->appendFile(RES_FILE_PATH . '/javascript/livesearch/getdiagnosisicd.js');
			        $this->view->headScript()->appendFile(RES_FILE_PATH.'/javascript/views/patientnew/medicationeditblocks.js');
			        $this->view->headScript()->appendFile(RES_FILE_PATH.'/javascript/jquery.tablesorter.js');
			        //$this->view->headScript()->appendFile(RES_FILE_PATH.'/javascript/pharmaindex/medi_pharmaindex.js');
			        //$this->view->headScript()->appendFile(RES_FILE_PATH .'/javascript/livesearch_new/livesearch.js');
			        $this->view->headLink()->appendStylesheet(RES_FILE_PATH . '/css/medicationnew_edit.css');
			        $this->view->headLink()->appendStylesheet(RES_FILE_PATH.'/css/pharmaindex/medi_pharmaindex.css?'.date('Ymd'));
			        $this->view->headLink()->appendStylesheet(RES_FILE_PATH . '/css/page-css/wlassessment.css');
			        
			        
			        $modules =  new Modules();
			        $this->view->ModulePrivileges = $modules->get_client_modules($clientid);
			        //ISPC-2629 Carmen 13.08.2020
			        if($_REQUEST['openinmodal'] == '1')
			        {
			        	$options['reloadDiagnosis'] = true;
			        }
			        //--
			    }
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_clinic_diagnosis($options, $ipid);
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			//ISPC-2663 Carmen 02.09.2020
			if (in_array('talkwithsingleselection', $allowed_blocks)) {
				$blockname = 'block_talkwithsingleselection';
				 
				$options = $this->getRequest()->getPost('FormBlockTalkWithSingleSelection', null); // use the post ones, maybe this is just a print
				 
				if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
					$options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockTalkWithSingleSelection', Doctrine_Core::HYDRATE_ARRAY);
					//ISPC-2629 Carmen 11.08.2020
					if(!empty($options))
					{
						if($_REQUEST['openinmodal'] == '1' && !array_key_exists(str_replace('block_', '', $blockname), $opened_blocks))
						{
							$options['opened'] = '1';
							$options['class'] = ' expanded ';
							Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
						}
					}
					else
					{
						if($_REQUEST['openinmodal'] == '1')
						{
							if($opened_blocks[str_replace('block_', '', $blockname)])
							{
								$options['opened'] = null;
								$options['class'] = ' collapsed ';
								Pms_Form::setFnOptions($options, 'create_form_'.str_replace('block_', '', $blockname));
							}
						}
					}
					//--
				}
				if($we_need_to_generate_pdf){
					$options['formular_type'] = 'pdf';
				}
				 
				$af_fbkv = new Application_Form_FormBlockKeyValue();
				$form = $af_fbkv->create_form_talkwithsingleselection($options, 'FormBlockTalkWithSingleSelection', $decid);
				$__formHTML = $form->render();
				 
				$this->view->{$blockname} = [
						"__formHTML" => $__formHTML,
						"__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
				];
			}
			//--
			
			// ISPC-Migration//IM-92- Shift
			if (in_array('clinic_shift', $allowed_blocks)) {
			    $blockname = 'block_clinicshift';
			    
			    $options = $this->getRequest()->getPost('FormBlockShift', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockShift', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists('clinic_shift', $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_clinic_shift');
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks['clinic_shift'])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_clinic_shift');
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    $options['cf_start_date'] = $cf_start_date;
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_clinic_shift($options, $ipid);
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			
			// ISPC-Migration//IM-93- PMBA-Measures
			if (in_array('clinic_measure', $allowed_blocks)) {
			    $blockname = 'clinic_measure';
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    $this->getHelper('viewRenderer')->setViewSuffix('phtml');
			    
			    
			    $options = $this->getRequest()->getPost('FormBlockClinicMeasure', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockClinicMeasure', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_clinic_measure($options, $ipid);
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			// ISPC-Migration//IM-104- Empfänger des Berichts
			if (in_array('report_recipient', $allowed_blocks)) {
			    $blockname = 'report_recipient';
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    $this->getHelper('viewRenderer')->setViewSuffix('phtml');
			    $options = $this->getRequest()->getPost('FormBlockReportRecipient', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockReportRecipient', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_report_recipient($options, $ipid);
			    
			    $__formHTML = $form->render();
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			
			// ISPC-Migration//IM-105- Actualproblems
			if (in_array('actual_problems', $allowed_blocks)) {
			    $blockname = 'actual_problems';
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    $this->getHelper('viewRenderer')->setViewSuffix('phtml');
			    
			    
			    $options = $this->getRequest()->getPost('FormBlockActualproblems', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockActualproblems', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_actual_problems($options, $ipid);
			    
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			    
			}
			// IM-137, documentation
			if (in_array('documentation', $allowed_blocks)) {
			    $blockname = 'documentation'; // ! for auto_add_blocks, names convention is important, otherwise 'auto_add_blocks' 'magic' doesn't work (blockname as in CommonData.php) - elena
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    $this->getHelper('viewRenderer')->setViewSuffix('phtml');
			    
			    
			    $options = $this->getRequest()->getPost('FormBlockDocumentation', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockDocumentation', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_documentation($options, 'FormBlockDocumentation', $ipid);
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			
			// ISPC-2626, coordinationtime, elena, 10.07.2020
			if (in_array('coordinationtime', $allowed_blocks)) {
			    $blockname = 'coordinationtime'; // ! for auto_add_blocks, names convention is important, otherwise 'auto_add_blocks' 'magic' doesn't work (blockname as in CommonData.php) - elena
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    
			    $this->getHelper('viewRenderer')->setViewSuffix('phtml');
			    
			    
			    $options = $this->getRequest()->getPost('FormBlockCoordinationtime', null); // use the post ones, maybe this is just a print
			    
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockCoordinationtime', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_coordinationtime($options, 'FormBlockCoordinationtime', $ipid);
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			// ISPC-2599, basisassessment pflege
			if (in_array('pflegeba', $allowed_blocks)) {
			    $blockname = 'pflegeba'; // ! for auto_add_blocks, names convention is important, otherwise 'auto_add_blocks' 'magic' doesn't work (blockname as in CommonData.php) - elena
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    $this->getHelper('viewRenderer')->setViewSuffix('phtml');
			    
			    
			    $options = $this->getRequest()->getPost('FormBlockPflegeba', null); // use the post ones, maybe this is just a print
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockPflegeba', Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
			    }
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    $af_fbkv = new Application_Form_FormBlockKeyValue();
			    $form = $af_fbkv->create_form_pflegeba($options, 'pflegeba', $ipid);
			    $__formHTML = $form->render();
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			// IM-147
			if (in_array('pcoc', $allowed_blocks)) {
			    $blockname = 'pcoc'; // ! for auto_add_blocks, names convention is important, otherwise 'auto_add_blocks' 'magic' doesn't work (blockname as in CommonData.php) - elena
			    $this->view->auto_add_blocks[$blockname]=$blockname;
			    
			    $options = $this->getRequest()->getPost('FormBlockPcoc', null); // use the post ones, maybe this is just a print
			    if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
			        $options = Doctrine::getTable('FormBlockPcoc')->findOneByContactFormIdAndIpid((int)$_REQUEST['cid'], $ipid, Doctrine_Core::HYDRATE_ARRAY);
			        //ISPC-2629 Carmen 11.08.2020
			        if(!empty($options)) 
			        {
			        	if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
			        	{
			        		$options['opened'] = '1';
			        		$options['class'] = ' expanded ';			        		
			        		Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
			        	}
			        }
			        else 
			        {
				        if($_REQUEST['openinmodal'] == '1')
				        {
				        	if($opened_blocks[$blockname])
				        	{
				        		$options['opened'] = null;
			        			$options['class'] = ' collapsed ';
			        			Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
				        	}
				        }
			        }
			        //--
			    }
			    $options['box_open']=$opened_blocks['pcoc'];
			    if($we_need_to_generate_pdf){
			        $options['formular_type'] = 'pdf';
			    }
			    $options['contact_form_id']=$contact_form_id;
			    $options['form_type_id']=$form_type_id;
			    
			    $af_fbkv = new Application_Form_FormBlockPcoc();
			    $__formHTML = $af_fbkv->render_cf_block_form($options, $ipid, $clientid);
			    
			    $this->view->{$blockname} = [
			        "__formHTML" => $__formHTML,
			        "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
			    ];
			}
			
			// ISPC-2775 Carmen 04.01.2021
			if (in_array('new_diagnosis', $allowed_blocks)) {
				$blockname = 'new_diagnosis';
				$this->view->auto_add_blocks[$blockname]=$blockname;
				 
				$options=array();
				$options['formular_type']="html";
				 
				$post_vals = $this->getRequest()->getPost($blockname, null); // use the post ones, maybe this is just a print
				 
				if (is_null($post_vals) &&  ! empty($_REQUEST['cid'])) {
					//$post_vals = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, $blockname, Doctrine_Core::HYDRATE_ARRAY);
					$fbkv=new FormBlockKeyValue();
					$post_vals  = $fbkv->getPatientFormBlockKeyValues($ipid, $_REQUEST['cid'], false, $blockname);
					//ISPC-2629 Carmen 11.08.2020
					if(!empty($post_vals))
					{
						if($_REQUEST['openinmodal'] == '1' && !array_key_exists($blockname, $opened_blocks))
						{
							$options['opened'] = '1';
							$options['class'] = ' expanded ';
							Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
						}
					}
					else
					{
						if($_REQUEST['openinmodal'] == '1')
						{
							if($opened_blocks[$blockname])
							{
								$options['opened'] = null;
								$options['class'] = ' collapsed ';
								Pms_Form::setFnOptions($options, 'create_form_'.$blockname);
							}
						}
					}
					//--
					//$post_vals  =   json_decode($post_vals['vals'],1);
				}
				if($we_need_to_generate_pdf || $_POST['pdfexport']){
					$options['formular_type'] = 'pdf';
				}else{
					/* $this->view->headScript()
					->appendFile(RES_FILE_PATH . '/javascript/views/patientdiagnosis/overview.js' ); */
					$this->view->headLink()
					->appendStylesheet(RES_FILE_PATH . '/css/page-css/patientdiagnosis.css?');
					$this->view->headLink()
					->appendStylesheet(RES_FILE_PATH . '/css/page-css/versorger.css?');
				}
				 
				if($options['formular_type'] === 'pdf') {
					$blockformname = 'icd'; // similar to patientform/contactform
					$modules =  new Modules();
					$clientModules = $modules->get_client_modules($clientid); 
					
					$pform_icd = new Application_Form_PatientDiagnosis(array(
							'_block_name'           => $blockformname,
							'_clientModules'        => $clientModules,
					));
					 
					 
					if (is_null($icd_options) &&  ! empty($ipid)) {
						 
						$entity = new PatientDiagnosis();
						$saved = $entity->getAllDiagnosisClinical($ipid,$clientid); //APPLY SORITNG!!!!
						 
						$icd_options =  ! empty($saved[$this->ipid]) ? $saved[$this->ipid] : array();
						 
					}
					$icd_options['formular_type'] = $options['formular_type'];
					$ops_data = $pform_icd->create_diagnosis_clinical($blockformname, $icd_options, $ipid,$clientid);
					$__formHTML = $ops_data;
					
					$this->view->{$blockname} = [
							"__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
					];
					
					$html_json = json_encode($__formHTML);
				}
				else 
				{
					$this->view->{$blockname} = array();
				}
				 
				$options['patient_html_json']=$html_json;
				$options['encid']=Pms_Uuid::encrypt($decid);
				 
				$af_fbkv = new Application_Form_FormBlockKeyValue();
				$options['opened'] = $opened_blocks['new_diagnosis'] ;
				$options['class'] =  $opened_blocks['new_diagnosis'] == 1 ? ' expanded ' : ' collapsed ';
				$hform=$af_fbkv->create_simple_template_form($blockname, 'form_block_'.$blockname.'.html',$post_vals,$options);
				$__formHTML = $hform->render();
				
				$this->view->{$blockname}["__formHTML"] = $__formHTML;
				/* $this->view->{$blockname} = [
						"__formHTML" => $__formHTML,
						//"__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
				]; */
			}
			
			
			
			//simpleblocks
			/* ------------------gen PDF-HTML for  Simpleboxes  ------------------- */
			
			
			$this->view->simpleblocks=array();
			foreach ($simpleblocks as $blockname=>$blockconfig)
			{
			    if (
			        in_array($blockname, $allowed_blocks)
			        
			        ){
			            $lmu_pmba_block = new FormBlockKeyValue();
			            $patient_pmba_vals = $this->getRequest()->getPost($blockname, null); // use the post ones, maybe this is just a print
			            
			            if (is_null($patient_pmba_vals) &&  ! empty($_REQUEST['cid'])) {
			                $patient_pmba_vals = $lmu_pmba_block->getPatientFormBlockKeyValues($ipid, $_REQUEST['cid'], false, $blockname);
			            }
			            
			            $newview = new Zend_View();
			            $newview->pdf=false;
			            if($we_need_to_generate_pdf){
			                $newview->pdf = true;
			            }
			            $newview->config=$blockconfig;
			            $newview->f_values=$patient_pmba_vals;
			            
			            if(isset($blockconfig['extradata'])){
			                foreach ($blockconfig['extradata'] as $blockextradata){
			                    $newview->$blockextradata=array();
			                    if(isset($this->view->$blockextradata)) {
			                        $newview->$blockextradata = $this->view->$blockextradata;
			                    }
			                }
			            }
			            if(isset($blockconfig['extrapatientdata'])){
			                $fun=$blockconfig['extrapatientdata'];
			                $newview->extrapatientdata=$fun($ipid);
			            }
			            
			            $newview->setScriptPath(APPLICATION_PATH."/views/scripts/templates/");
			            $html = $newview->render($blockconfig['template']);
			            $blocktitle=$this->translate('block_'.$blockname);
			            
			            $this->view->simpleblocks[$blockname] = array('title'=>$blocktitle,'html'=>$html, 'raw'=>$patient_pmba_vals);
			    }
			}
			
			//ISPC-2629 Carmen 07.08.2020
			if($this->view->clientModules['235'])
			{
				$this->view->has_floatingbox = 1;
				$ctfrmt = $contact_form_types->get_form_types($clientid, false, true);
				foreach($ctfrmt as $kr => $vr)
				{
					$ctformtypes[$vr['id']] = $vr;
				}
				
				foreach($this->view->client_users as $kr => $vr)
				{
					$client_users[$vr['id']] = $vr;
				}
				
				User::beautifyName($client_users);
				
			
				$old_ctf = $contact_forms->get_contactforms_multiple($ipid);
				$old_contactforms = array();
				//print_R($old_ctf); exit;
				foreach($old_ctf as $kr => $vr)
				{
					$old_contactforms[$kr]['oldcontactform_date'] = date('d.m.Y H:s', strtotime($vr["date"]));
					if($ctformtypes[$vr['form_type']]['isdelete'] == '1')
					{
						$old_contactforms[$kr]['oldcontactform_type'] = sprintf($ctformtypes[$vr['form_type']]['name'].'<span style="color: red;">*</span>');
					}
					else 
					{
						$old_contactforms[$kr]['oldcontactform_type'] = $ctformtypes[$vr['form_type']]['name'];
					}					
					if($vr['change_user'] != '0')
					{
						$old_contactforms[$kr]['oldcontactform_author'] = $client_users[$vr['change_user']]['nice_name'];
					}
					else 
					{
						$old_contactforms[$kr]['oldcontactform_author'] = $client_users[$vr['create_user']]['nice_name'];
					}
					//$old_contactforms[$ctf]['oldcontactform_date'] = '<input type="hidden" class="cid" value="'.$kr.'" />';
					
				}
				
				$this->view->old_contactforms = $old_contactforms;
			}
			else
			{
				$this->view->has_floatingbox = 0;
			}
			//--
			
			
			
				//medication edit procedure start
				if($this->getRequest()->isPost() && $_POST['submitform'])
				{
				    if($acknowledge =="1")
				    {
				        $_POST['skip_trigger'] = "1";
				    }
				    
					//check sgbv
					$patient_data['id'] = $patientarr['id'];
					$patient_data['first_name'] = $patientarr['first_name'];
					$patient_data['last_name'] = $patientarr['last_name'];
					$patient_data['epid'] = $patientarr['epid'];

					if(count($_POST['social_action']) > 0)
					{
						$post_social_code_action = $_POST['social_action'];

						//check if the actions are already used in this contact form - don't generate a new sgbv for them
						foreach($post_social_code_action as $action => $value)
						{
							if(in_array($action, $used_actions))
							{
								unset($post_social_code_action[$action]);
							}
						}


						$sgbv = new SgbvForms();
						$active_sgbv = $sgbv->validate_sgbv($ipid, $_POST['date'], $post_social_code_action, $patient_data);
					}
					
					
					// #########################################################
                    // MEDIATION BLOCK OLD   ------ START  
					// #########################################################
					$patient_medication_form = new Application_Form_Medication();
					$a_post = $_POST;
					for($i = 1; $i <= count($_POST['medication']); $i++)
					{
						if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
						{
							$a_post['newmids'][$i] = $_POST['drid'][$i];
							$a_post['newmedication'][$i] = $_POST['medication'][$i];
						}
					}

					if(is_array($a_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($a_post);

						foreach($dts as $key => $dt)
						{
							$a_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					$med_form = new Application_Form_PatientDrugPlan();
					$med_form->UpdateMultiData($a_post);
					//medication edit procedure end
					//

				//medication add procedure start
					$add_post = $_POST['add'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 0;
					$add_post['done_date'] = date('Y-m-d ' . $_POST['begin_date_h'] . ':' . $_POST['begin_date_m'] . ':20', strtotime($_POST['date']));

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}

					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);
						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}
					$med_form->InsertMultiData($add_post);
					if(count($_POST['addbedarf']) > 0)
					{
					    if($acknowledge =="1")
					    {
					        $_POST['skip_trigger'] = "1";
					    }
					    
						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();

						$add_post_bedarf = $_POST['addbedarf'];
						$add_post_bedarf['ipid'] = $ipid;
						$add_post_bedarf['isbedarfs'] = 1;
						$add_post_bedarf['verordnetvon'] = $_POST['verordnetvon'];
						$add_post_bedarf['done_date'] = date('Y-m-d ' . $_POST['begin_date_h'] . ':' . $_POST['begin_date_m'] . ':20', strtotime($_POST['date']));

						foreach($add_post_bedarf['medication'] as $key => $val)
						{
							if(strlen($add_post_bedarf['medication'][$key]) > 0 && strlen($add_post_bedarf['hidd_medication'][$key]) < 1)
							{
								$add_post_bedarf['newmedication'][$key] = $add_post_bedarf['medication'][$key];
							}
						}

						if(is_array($add_post_bedarf['newmedication']))
						{
							$dts = $patient_medication_form->InsertNewData($add_post_bedarf);
							foreach($dts as $key => $dt)
							{
								$add_post_bedarf['newhidd_medication'][$key] = $dt->id;
							}
						}
						$med_form->InsertMultiData($add_post_bedarf);
					}
					if(count($_POST['addcrisis']) > 0)
					{
					    if($acknowledge =="1")
					    {
					        $_POST['skip_trigger'] = "1";
					    }

						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();

						$add_post_crisis = $_POST['addcrisis'];
						$add_post_crisis['ipid'] = $ipid;
						$add_post_crisis['iscrisis'] = 1;
						$add_post_crisis['verordnetvon'] = $_POST['verordnetvon'];
						$add_post_crisis['done_date'] = date('Y-m-d ' . $_POST['begin_date_h'] . ':' . $_POST['begin_date_m'] . ':20', strtotime($_POST['date']));

						foreach($add_post_crisis['medication'] as $key => $val)
						{
							if(strlen($add_post_crisis['medication'][$key]) > 0 && strlen($add_post_crisis['hidd_medication'][$key]) < 1)
							{
								$add_post_crisis['newmedication'][$key] = $add_post_crisis['medication'][$key];
							}
						}

						if(is_array($add_post_crisis['newmedication']))
						{
							$dts = $patient_medication_form->InsertNewData($add_post_crisis);
							foreach($dts as $key => $dt)
							{
								$add_post_crisis['newhidd_medication'][$key] = $dt->id;
							}
						}
						$med_form->InsertMultiData($add_post_crisis);
					}

					//add iv medis
					if(count($_POST['addiv']) > 0)
					{
					    if($acknowledge =="1")
					    {
					        $_POST['skip_trigger'] = "1";
					    }
					    
						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();

						$add_post_iv = $_POST['addiv'];
						$add_post_iv['ipid'] = $ipid;
						$add_post_iv['isbedarfs'] = 0;
						$add_post_iv['isivmed'] = 1;
						$add_post_iv['verordnetvon'] = $_POST['verordnetvon'];
						$add_post_iv['done_date'] = date('Y-m-d ' . $_POST['begin_date_h'] . ':' . $_POST['begin_date_m'] . ':20', strtotime($_POST['date']));

						foreach($add_post_iv['medication'] as $key => $val)
						{
							if(strlen($add_post_iv['medication'][$key]) > 0 && strlen($add_post_iv['hidd_medication'][$key]) < 1)
							{
								$add_post_iv['newmedication'][$key] = $add_post_iv['medication'][$key];
							}
						}

						if(is_array($add_post_iv['newmedication']))
						{
							$dts = $patient_medication_form->InsertNewData($add_post_iv);
							foreach($dts as $key => $dt)
							{
								$add_post_iv['newhidd_medication'][$key] = $dt->id;
							}
						}

						$med_form->InsertMultiData($add_post_iv);
					}
				}
				// medication add procedure start
				//add schmerzepumpe medis START
				if(count($_POST['add_schmerze']) > 0)
				{
					$s_post = $_POST['add_schmerze'];
					$s_post['cocktailDescription'] = $_POST['cocktailDescription'];
					$s_post['bolus'] = $_POST['bolus'];
					$s_post['flussrate'] = $_POST['flussrate'];
					$s_post['sperrzeit'] = $_POST['sperrzeit'];
					$s_post['cocktailhid'] = $_POST['cocktailhid'];
					$s_post['isschmerzpumpe'] = '1';
					$s_post['done_date'] = date('Y-m-d ' . $_POST['begin_date_h'] . ':' . $_POST['begin_date_m'] . ':20', strtotime($_POST['date']));

					foreach($s_post['medication'] as $amedikey => $amedi)
					{
						if(strlen($amedi) > 0 && empty($s_post['hidd_medication'][$amedikey]) && !empty($s_post['drid'][$amedikey]) && !empty($s_post['medication'][$amedikey]))
						{
							$s_post['newmids'][$amedikey] = $s_post['drid'][$amedikey];
							$s_post['newmedication'][$amedikey] = $amedi;
						}

						if(strlen($amedi) > 0 && (!empty($s_post['hidd_medication'][$amedikey]) && empty($s_post['drid'][$amedikey]) && !empty($s_post['medication'][$amedikey])))
						{
							$s_post['newmids'][$amedikey] = $s_post['hidd_medication'][$amedikey];
							$s_post['newmedication'][$amedikey] = $amedi;
						}

						if(strlen($amedi) > 0 && (empty($s_post['hidd_medication'][$amedikey]) && empty($s_post['drid'][$amedikey]) && !empty($s_post['medication'][$amedikey])))
						{
							$s_post['newmedication'][$amedikey] = $amedi;
						}
					}


					if(is_array($s_post['newmedication']))
					{
						$patient_medication_form = new Application_Form_Medication();
						$dts = $patient_medication_form->InsertNewData($s_post);
						foreach($dts as $key => $dt)
						{
							$s_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					$med_form = new Application_Form_PatientDrugPlan();

					if($_POST['cocktailhid'] > "0")
					{
						// get cocktailid details 
						$c_ids = array($_POST['cocktailhid']);
						$cocktails = new PatientDrugPlanCocktails();
						$cocktails_drugs = $cocktails->getDrugCocktails($c_ids);

                        if(!empty($cocktails_drugs[$_POST['cocktailhid']])){
                            $cocktail_details = $cocktails_drugs[$_POST['cocktailhid']];
                        }
						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();
						$med_form->UpdateSchmerzepumpeMultiData($s_post);

						
						
						//find out edited/added medis

						//show schmerze details if medis are changed
						foreach($s_post['medication'] as $k_meds => $v_meds)
						{
							$cust = Doctrine::getTable('PatientDrugPlan')->find($s_post['drid'][$k_meds]);
    						$list = false;
							if($cust)
							{

								if($cust->dosage != $s_post['dosage'][$k_meds] ||
									$cust->medication_master_id != $s_post['hidd_medication'][$k_meds] ||
									$cust->verordnetvon != $s_post['verordnetvon'][$k_meds]
								    || $s_post['cocktailDescription'] != $cocktail_details['description']
								    || $s_post['bolus'] != $cocktail_details['bolus']
								    || $s_post['flussrate'] != $cocktail_details['flussrate']
								    || $s_post['sperrzeit'] != $cocktail_details['sperrzeit'])
								{
									$list = true; //list shmerze details
								}
							}
							
							if(!array_key_exists($k_meds, $s_post['newmedication']) && $list) //new medis
							{
							    $meds[] = $v_meds . " | " . $s_post['dosage'][$k_meds] . "\n";
							}
							
						}

                        if($acknowledge == "1" && $allow_change =="0"){
                            $list = false;
                        }

						if($list == true)
						{
							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("Q");
							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes(implode('', $meds) . "Kommentar: " . $s_post['cocktailDescription'] . "\n  Bolus: " . $s_post['bolus'] . "\nFlussrate: " . $s_post['flussrate'] . "\nSperrzeit: " . $s_post['sperrzeit'] . " "));
							$cust->user_id = $logininfo->userid;
							$cust->done_date = date('Y-m-d ' . $_POST['begin_date_h'] . ':' . $_POST['begin_date_m'] . ':20', strtotime($_POST['date']));
							$cust->save();
						}
					}
					else
					{
						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();
						$med_form->InsertMultiData($s_post);

						if($s_post['isschmerzpumpe'] == 1)
						{
						    if($acknowledge == "1"){
						        if($allow_change =="1")
						        {
        							$cust = new PatientCourse();
        							$cust->ipid = $ipid;
        							$cust->course_date = date("Y-m-d H:i:s", time());
        							$cust->course_type = Pms_CommonData::aesEncrypt("Q");
        							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes(implode('', $meds) . "Kommentar: " . $s_post['cocktailDescription'] . "\n  Bolus: " . $s_post['bolus'] . "\nFlussrate: " . $s_post['flussrate'] . "\nSperrzeit: " . $s_post['sperrzeit'] . " "));
        							$cust->user_id = $logininfo->userid;
        							$cust->done_date = date('Y-m-d ' . $_POST['begin_date_h'] . ':' . $_POST['begin_date_m'] . ':20', strtotime($_POST['date']));
        							$cust->save();
						        }						    
						    } 
						    else
						    {
    							$cust = new PatientCourse();
    							$cust->ipid = $ipid;
    							$cust->course_date = date("Y-m-d H:i:s", time());
    							$cust->course_type = Pms_CommonData::aesEncrypt("Q");
    							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes(implode('', $meds) . "Kommentar: " . $s_post['cocktailDescription'] . "\n  Bolus: " . $s_post['bolus'] . "\nFlussrate: " . $s_post['flussrate'] . "\nSperrzeit: " . $s_post['sperrzeit'] . " "));
    							$cust->user_id = $logininfo->userid;
    							$cust->done_date = date('Y-m-d ' . $_POST['begin_date_h'] . ':' . $_POST['begin_date_m'] . ':20', strtotime($_POST['date']));
    							$cust->save();
						    }
						}
					}
				}
				//add schmerzepumpe medis END
				//medis edit grid procedure start
				if(strlen($_REQUEST['mid']) > 0)
				{
					$previleges = new Pms_Acl_Assertion();
					$return = $previleges->checkPrevilege('patientmedication', $userid, 'candelete');

					if(!$return)
					{
						$this->_redirect(APP_BASE . "error/previlege");
					}

					if($_GET['act'] == "del")
					{
						//delete medication
						$mid = $_GET['mid'];
						$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
						$mod->isdelete = 1;
						$mod->save();
						$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
					}
				}


				$this->view->kvnodelicon = "1";

				$comma = ",";
				$userval = "'0'";

				foreach($pqarr as $key => $val)
				{
					$userval .= $comma . "'" . $val['id'] . "'";
					$comma = ",";
				}

				$usergroup = new Usergroup();
				$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));

				$users = $pq->getuserbyidsandGroupId($userval, $groupid, 1);
				$this->view->users = $users;
				$this->view->jsusers = json_encode($users);

				//get all client users -> For medis dropdown
				$allUserArray = $pq->getUserByClientid($clientid);
				$userarraylastall[] = $this->view->translate('selectuser');
				foreach($allUserArray as $user)
				{
					$userarraylastall[$user['id']] = trim($user['last_name']) . " " . trim($user['first_name']);
				}
				$this->view->allUsers = $userarraylastall;
				$this->view->pid = $_GET['id'];
				$this->view->caseclass = "active";

				//normal medis
				$medic = new PatientDrugPlan();
				$medicarr1 = $medic->getMedicationPlan($decid);

				if(count($medicarr1 < 1))
				{
					$this->view->mcntr = 0;
				}

				
				$medication_master_ids = array();
				foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
				{
					$medication_master_ids['normal'][] = $v_medicarr1['medication_master_id'];
				}

				if (empty ($medication_master_ids)) {
					$medication_master_ids[] = '999999999';
				}

				$med = new Medication();
				$medarr1 = $med->getMedicationById($medication_master_ids['normal']);

				foreach($medarr1 as $k_medarr1 => $v_medarr1)
				{
					$med_arr1[$v_medarr1['id']] = $v_medarr1;
				}

				$this->view->medarr1 = $med_arr1;

				$med= array();
				//medication Hospiz I
				$med = new PatientDrugPlan();
				$med_arr= $med-> getPatientDrugPlan($decid,true);
			
				
				
				foreach ($med_arr as $k_med => $val_med)
				{
					if($val_med['isbedarfs']==1)
					{
						
						$medication_hp['bedarf'][$val_med['id']]['dosage']=$val_med['dosage'];
						$medication_hp['bedarf'][$val_med['id']]['medication']=$val_med['medication'];
						
					
					}elseif($val_med['isivmed']==1)
					{
						
						$medication_hp['iv'][$val_med['id']]['dosage']=$val_med['dosage'];
						$medication_hp['iv'][$val_med['id']]['medication']=$val_med['medication'];
						
						
					}elseif($val_med['iscrisis']==1)
					{

						$medication_hp['crisis'][$val_med['id']]['dosage']=$val_med['dosage'];
						$medication_hp['crisis'][$val_med['id']]['medication']=$val_med['medication'];


					}
					elseif($val_med['isschmerzpumpe']==1)
					{
						
						$medication_hp['schmerz'][$val_med['id']]['dosage']=$val_med['dosage'];
						$medication_hp['schmerz'][$val_med['id']]['medication']=$val_med['medication'];
						
					}
					//ISPC-2833 Ancuta 0.03.2021
					elseif($val_med['ispumpe']==1)
					{
						
						$medication_hp['ispumpe'][$val_med['id']]['dosage']=$val_med['dosage'];
						$medication_hp['ispumpe'][$val_med['id']]['medication']=$val_med['medication'];
						
					}
					else{
						if($val_med['treatment_care'] !=1  && $val_med['isnutrition'] !=1 )
						{
						
						$medication_hp['actuel'][$val_med['id']]['dosage']=$val_med['dosage'];
						$medication_hp['actuel'][$val_med['id']]['medication']=$val_med['medication'];
						
						$this->view->medication_n = $med_m;
						}
					}
				}
				
				$this->view->medication_hp = $medication_hp;
				
// 				print_r($medication_hp); exit;
				//print_r($med_m); exit;
				
				$medication_master_i = array();
				foreach($med_bedarf as $k_medicarr1 => $v_medicarr1)
				{
					$medication_master_i['normal'][] = $v_medicarr1['medication_master_id'];
				} 
				if (empty($medication_master_i)) {
					$medication_master_i[] = '999999999';
				}
				$med_b= new Medication();
				$medarr1_b = $med_b->getMedicationById($medication_master_i['normal']);
				
				
				
				
				//medication i.v.
				$medic_iv = new PatientDrugPlan();
				$mediciv = $medic_iv->getivMedication($decid);
				
				
				foreach( $mediciv as $k => $val)
				{
					$med_arr1_iv['dosaj'][$val['medication_master_id']]= $val['dosage'];
				}
				$medication_master_iv = array();
				foreach($mediciv as $k_medicarr1_iv => $v_medicarr1_iv)
				{
					$medication_master_iv['normal'][] = $v_medicarr1_iv['medication_master_id'];
				}
				if (empty($medication_master_iv)){
					$medication_master_iv[] = '999999999';
				}
				// var_dump($medication_master_ids['normal']);
				$med1 = new Medication();
				$medarr1_iv = $med1->getMedicationById($medication_master_iv['normal']);
				
				foreach($medarr1_iv as $k_medarr1 => $v_medarr1)
				{
					$med_arr1_iv['name'][$v_medarr1['id']] = $v_medarr1;
				}
				//print_r($med_arr1_iv);exit;
				//$this->view->med_iv = $med_arr1_iv;
				//=================================
				
				
				
				
				if($this->getRequest()->isPost())
				{
					$medicarr1 = Pms_CommonData::clear_pdf_data($medicarr1);
					$grid_pdf_med = new Pms_Grid($medicarr1, 1, count($medicarr1), "newpatientmedicationedit_pdf.html");
					$this->view->medications_pdf = $grid_pdf_med->renderGrid();
				}
 
				
				$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "new_listpatientmedicationedit.html");
				$this->view->medications = $grid->renderGrid();
                $this->view->counter = count($medicarr1)  ;

				//deleted medis
				$this->view->ajx = 1;
				$this->view->cntr = count($medicarr1);

				$medicarr2 = $medic->getDeletedMedication($decid);
				$c_ids[] = '-1';
				$cocktail_medis[] = '99999999';

				foreach($medicarr2 as $k_med_del => $v_med_del)
				{
					if($v_med_del['cocktailid'] > 0)
					{
						$c_ids[] = $v_med_del['cocktailid'];
						$cocktail_medis[$v_med_del['cocktailid']][] = $v_med_del['id'];
					}
					$medication_master_ids['deleted'][] = $v_med_del['medication_master_id'];
				}
				$c_ids = array_values(array_unique($c_ids));
				$cocktail_id = max($c_ids);

				$cocktails = new PatientDrugPlanCocktails();
				$cocktails_drugs = $cocktails->countDrugsPerCocktail($c_ids);

				$this->view->cocktailNo = $cocktails_drugs;
				$this->view->cocktail_medis = $cocktail_medis;
				$this->view->cocktail_id = $cocktail_id;

				$med = new Medication();
				$medarr2 = $med->getMedicationById($medication_master_ids['deleted']);
				foreach($medarr2 as $k_medarr2 => $v_medarr2)
				{
					$med_arr2[$v_medarr2['id']] = $v_medarr2;
				}
				$this->view->medarr2 = $med_arr2;


				$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "new_listdelpatientmedication_ajax.html");
				$this->view->delmedications = $grid->renderGrid();

				//bedarf medis
				$medicarr = $medic->getbedarfMedication($decid);
				foreach($medicarr as $k_medicarr => $v_medicarr)
				{
					$medication_master_ids['bedarfs'][] = $v_medicarr['medication_master_id'];
				}

				$med = new Medication();
				$medarr = $med->getMedicationById($medication_master_ids['bedarfs']);

				foreach($medarr as $k_medarr => $v_medarr)
				{
					$med_arr[$v_medarr['id']] = $v_medarr;
				}

				$this->view->medarr1 = $med_arr;
 
				
				$grid = new Pms_Grid($medicarr, 1, count($medicarr), "new_listpatientmedicationbedarfsedit.html");
				$this->view->bedarfsmedications = $grid->renderGrid();
				// Attention! Count exactly back-to-back, no overlapping (repeating) name/id in input fields and no "holes", otherwise you can't edit inline - elena
                $this->view->counter = count($medicarr1) +  count($medicarr) ;

				if($this->getRequest()->isPost())
				{
					$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
					$grid_pdf = new Pms_Grid($medicarr, 1, count($medicarr), "newpatientmedicationedit_pdf.html");
					$this->view->bedarfsmedications_pdf = $grid_pdf->renderGrid();
				}

                // display crisis medication
                $medicarr_crisis = $medic->getCrisisMedication($decid);
                foreach($medicarr_crisis as $k_medicarr => $v_medicarr)
                {
                    $medication_master_ids['crisis'][] = $v_medicarr['medication_master_id'];
                }
                $medarr_crisis = $med->getMedicationById($medication_master_ids['crisis']);

                foreach($medarr_crisis as $k_medarr => $v_medarr)
                {
                    $med_arr_crisis[$v_medarr['id']] = $v_medarr;
                    $med_arr[$v_medarr['id']] = $v_medarr;
                }
                $this->view->medarr1 = $med_arr;


                $this->view->medarr_crisis = $med_arr_crisis;

                $grid = new Pms_Grid($medicarr_crisis, 1, count($medicarr_crisis)  , "new_listpatientmedicationcrisisedit.html");


                //$grid->medication_master_array = $medication_master_array;
                $this->view->crisismedications = $grid->renderGrid();
                $this->view->counter = count($medicarr) + count($medicarr1) +  count($medicarr_crisis);

                if($this->getRequest()->isPost())
                {
                    $medicarr_crisis = Pms_CommonData::clear_pdf_data($medicarr_crisis);
                    $grid_pdf = new Pms_Grid($medicarr_crisis, 1, count($medicarr_crisis), "newpatientmedicationedit_pdf.html");
                    $this->view->crisismedications_pdf = $grid_pdf->renderGrid();
                }


				//ivmedis
				$medicarr_iv = $medic->getivMedication($decid);
				foreach($medicarr_iv as $k_medicarr => $v_medicarr)
				{
					$medication_master_ids['ivmedis'][] = $v_medicarr['medication_master_id'];
				}

				$med = new Medication();
				$medarr = $med->getMedicationById($medication_master_ids['ivmedis']);

				foreach($medarr as $k_medarr => $v_medarr)
				{
					$med_arr[$v_medarr['id']] = $v_medarr;
				}
				$this->view->medarr1 = $med_arr;

				//$this->view->counter = count($medicarr) + count($medicarr1) + count($medicarr2)  + count($medicarr_crisis)+ count($medicarr_iv);

				$grid = new Pms_Grid($medicarr_iv, 1, count($medicarr_iv), "new_listpatientmedicationivedit.html");
				$this->view->ivmedications = $grid->renderGrid();

				if($this->getRequest()->isPost())
				{
					$medicarr_iv = Pms_CommonData::clear_pdf_data($medicarr_iv);
					$grid_pdf = new Pms_Grid($medicarr_iv, 1, count($medicarr_iv), "newpatientmedicationedit_pdf.html");
					$this->view->ivmedications_pdf = $grid_pdf->renderGrid();
				}

				$this->view->counter = count($medicarr1) + count($medicarr2) + count($medicarr) + count($medicarr_crisis) + count($medicarr_iv);

				
				
				//schmerzpumpe list START
				$smparr = $medic->getSchmerzpumpeMedication($decid);

				foreach($smparr as $smpMedication)
				{
					$smpMedicationArr[] = $smpMedication['cocktailid'];
				}
				$smpMedicationArray = array_values(array_unique($smpMedicationArr));

				$cocktails = new PatientDrugPlanCocktails();
				$cocktails = $cocktails->getDrugCocktails($smpMedicationArray);

				foreach($smparr as $smpkey => $medicationsmp)
				{
					$smpFinalArr[] = $medicationsmp;
					if($smparr[($smpkey + 1)]['cocktailid'] != $medicationsmp['cocktailid'])
					{
						$smpFinalArr[$smpkey]['smpdescription'] = $cocktails[$medicationsmp['cocktailid']];
					}
					else
					{
						$smpFinalArr[$smpkey]['smpdescription'] = "0";
					}
					$medication_master_ids['schmerze'][] = $medicationsmp['medication_master_id'];
				}


				$med = new Medication();
				$medarr = $med->getMedicationById($medication_master_ids['schmerze']);

				foreach($medarr as $k_medarr => $v_medarr)
				{
					$med_arr[$v_medarr['id']] = $v_medarr;
				}
				
				$this->view->medarr1 = $med_arr;

				$grid = new Pms_Grid($smpFinalArr, 1, count($smpFinalArr), "newschmerzemedicationedit.html");

				if(count($smpFinalArr) < 1)
				{
					$this->view->mcntr_s = 0;
				}
				else
				{
					$this->view->mcntr_s = (count($smpFinalArr) + 1);
				}

				if($smpFinalArr)
				{
					$this->view->schmerze_medicgrid = $grid->renderGrid();
				}
				else
				{
					for($i = 0; $i < 0; $i++)
					{
						$a_medic[$i] = array('cnt' => $i);
					}
					$grid = new Pms_Grid($a_medic, 1, count($a_medic), "schmerzpumpemedisadd.html");
					$meds_grid[0]['medicgrid'] = $grid->renderGrid();

					$grid_f = new Pms_Grid($meds_grid, 1, count($meds_grid), "newschmerzemedicationadd.html");
					$this->view->schmerze_medicgrid = $grid_f->renderGrid();
				}

				if($this->getRequest()->isPost())
				{
					$grid_pdf = new Pms_Grid($smpFinalArr, 1, count($smpFinalArr), "newpatientmedicationedit_pdf.html");
					$this->view->schmerzemedications_pdf = $grid_pdf->renderGrid();
				}
				//schmerzpumpe add/edit END
				//medis edit grid procedure end
				//medis add grid procedure start
				$comma = ",";
				$userval = "'0'";

				foreach($pqarr as $key => $val)
				{
					$userval .= $comma . "'" . $val['id'] . "'";
					$comma = ",";
				}

				$MasterGroups = array("4", "5", "6");
				$usersgroups = $usergroup->getUserGroups($MasterGroups);

				if(count($usersgroups) > 0)
				{
					foreach($usersgroups as $group)
					{
						if($group['groupmaster'] == 4)
						{
							$groupsDocArray[] = $group['id'];
						}
						else
						{
							$groupsarray[] = $group['id'];
						}
					}
				}

				$usersPflegeKoordArray = $pq->getuserbyGroupId($groupsarray, $clientid);
				$pflegeKoords['0'] = "Select User";

				foreach($usersPflegeKoordArray as $user)
				{
					$pflegeKoords[$user['id']] = $user['last_name'] . ", " . $user['first_name'];
				}

				$this->view->pfleges = $pflegeKoords;

				$usersDoctorsArray = $pq->getuserbyGroupId($groupsDocArray, $clientid);
				$doctors['0'] = "Auswahl";
				foreach($usersDoctorsArray as $doctor)
				{
					$doctors[$doctor['id']] = $doctor['last_name'] . ", " . $doctor['first_name'];
				}
				$this->view->doctors = $doctors;


				$doctors['-1'] = "Anderer Arzt";
				$doctors['-2'] = "Hausarzt";
				$this->view->users = $doctors;

				$a_medic = array();

				if(is_array($_POST['hidd_medication']))
				{
					foreach($_POST['hidd_medication'] as $key => $val)
					{
						$a_medic[$key]['medication'] = $_POST['medication'][$key];
						$a_medic[$key]['hidd_medication'] = $_POST['hidd_medication'][$key];
					}
				}
				else
				{
					for($i = 0; $i < 0; $i++)
					{
						$a_medic[$i] = array('cnt' => $i);
					}
				}

				$this->view->mcntr = count($medicarr) + count($medicarr1) + count($medicar2) + count($medicarr_iv) + count($a_medic);

				if($this->getRequest()->isPost())
				{
				    
				    if($acknowledge =="1")
				    {
				        $_POST['skip_trigger'] = "1";
				    }
// 				    dd($_POST);
					//print_r($_POST); exit;
					/* ---------------------------SAVE - ADD -------------------------- */
					if(strlen($_REQUEST['cid']) > 0 && strlen($_REQUEST['ftid']) == 0)
					{
						$_POST['old_contact_form_id'] = $_REQUEST['cid'];
					}else if(strlen($_REQUEST['cid']) > 0 && strlen($_REQUEST['ftid'])> 0){
                        $_POST['old_contact_form_id'] = '0';
					}
					else
					{
						$_POST['old_contact_form_id'] = '0';
					}

					if($_POST['submitform'])
					{
						$_POST['form_type'] = $form_type_id;
						if($error > 0)
						{

						}
						
						if(in_array('bavaria_options', $allowed_blocks))
						{
						    if(strlen($_REQUEST['cid']) == 0)
						    {
						        $_POST['symptom'] = $_POST['symptom'];
						    }
						    else
						    {
						        foreach($_POST['checkbox'] as $key => $value)
						        {
						            $_POST['symptom'] = $value;
						        }
						    }
						    	
						}
						
						$_POST['contact_form_change_date'] = ' ['.date("d.m.Y H:i", time()).']';
						
						//@author claudiu on 29.01.2018 added next line; ISPC-2071
						$_POST['ipid'] = $ipid;

						$sanfr = new Application_Form_ContactForms();
						$result = $sanfr->InsertData($_POST, $allowed_blocks, $patientarr);



						if($result)
						{
							$_POST['ipid'] = $ipid;
							$_POST['contact_form_id'] = $result; // get the id of contact form
							
							
							/*if this formular is new, link deleted medication patient course with this*/
							if ( ! $this->getRequest()->getQuery('cid') && ($deleted_medis_contactform_cid_patientcourse_id = $this->getRequest()->getPost('deleted_medis_contactform_cid_patientcourse_id'))) 
							{
							    $deleted_medis_contactform_cid_patientcourse_id = is_array($deleted_medis_contactform_cid_patientcourse_id) ? array_values(array_unique($deleted_medis_contactform_cid_patientcourse_id)) : [$deleted_medis_contactform_cid_patientcourse_id];
							    
							    $q = Doctrine_Query::create()
							    ->update('PatientCourse')
							    ->set('done_id', "?", $result)
							    ->set('done_name', "?", Pms_CommonData::aesEncrypt(ContactForms::PatientCourse_DONE_NAME))
							    ->whereIn('id', $deleted_medis_contactform_cid_patientcourse_id)
							    ->andWhere('ipid = ?', $ipid)
							    ->andwhere("done_id = 0")
							    ->andwhere("done_name = ''")
							    //->andwhere("tabname = ?", Pms_CommonData::aesEncrypt('patient_drugplan_deleted')) // this check was left out, because of pumpe
							    ->execute();							    
							}
							
                            
							/* ------------------SAVE BLOCK BEFUND------------------- DONE */
							$befund_block = new Application_Form_FormBlockBefund();
							$result_befund = $befund_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */

							/* ------------------SAVE BLOCK EBM------------------- */
							$ebmi_block = new Application_Form_FormBlockEbmi();
							$result_ebmi = $ebmi_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */

							/* ------------------SAVE BLOCK EBM II------------------- */
							//verlauf edit DONE - VERIFIED
							$ebmii_block = new Application_Form_FormBlockEbmii();
							$result_ebmii = $ebmii_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */
							/* ------------------SAVE BLOCK XBDT EBM II------------------- */
							$ebmii_block = new Application_Form_FormBlockXbdtEbmii();
							$result_ebmii = $ebmii_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */

							
							
							
							/* ------------------SAVE BLOCK GOA------------------- */
							$goai_block = new Application_Form_FormBlockGoai();
							$result_goai = $goai_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */

							/* ------------------SAVE BLOCK GOA II------------------- */
							$goaii_block = new Application_Form_FormBlockGoaii();
							$result_goaii = $goaii_block->InsertData($_POST, $allowed_blocks);
							
							
							/* ------------------SAVE BLOCK XBDT GOA II------------------- */
							$goaii_block = new Application_Form_FormBlockXbdtGoaii();
							$result_goaii = $goaii_block->InsertData($_POST, $allowed_blocks);
							

							/* ------------------SAVE BLOCK Measures------------------- */
							$measures_block = new Application_Form_FormBlockMeasures();
							$result_measures = $measures_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */

							//ISPC-2487 Ancuta 27.11.2019
							/* ------------------SAVE BLOCK Leistung / Koordination ------------------- */
							$coordinator_actions_block = new Application_Form_FormBlockCoordinatorActions();
							$result_coordinator_actions = $coordinator_actions_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */
							//-- 

							/* ------------------SAVE BLOCK Sgbxi Actions------------------- */
							$sgbxi_actions_block = new Application_Form_FormBlockSgbxiActions();
							$result_sgbxi_actions = $sgbxi_actions_block->InsertData($_POST, $allowed_blocks, $patientarr, $user_dateils);
							/* ---------------------------------------------------- */

							/* ------------------SAVE BLOCK Ebm Ber------------------- */
							$form_ebm_ber_block = new Application_Form_FormBlockEbmBer();
							$result_ebm_ber = $form_ebm_ber_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */

							/* ------------------SAVE BLOCK SGBV------------------- DONE */
							$sgbv_block = new Application_Form_FormBlockSgbv();
							$result_sgbv = $sgbv_block->InsertData($_POST, $allowed_blocks, $price_sheet, $used_actions);
							/* ---------------------------------------------------- */

							/* ------------------SAVE BLOCK Classification------------------- DONE */
							$classification_block = new Application_Form_FormBlockClassification();
							$result_classification = $classification_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */

							/* ------------------SAVE BLOCK BRA SAPV------------------- DONE */
							$bra_sapv_block = new Application_Form_FormBlockBraSapv();
							$result_bra_sapv = $bra_sapv_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */

							/* ------------------SAVE BLOCK ADDITIONAL USERS------------------- */
							
							if($companion_time_tracking == 1 && in_array('time_documentation_clinic', $allowed_blocks)){//TODO-4069 Ancuta 26.04.2021 
							    //Do not save this - as it is no longer listed in form
							    
							} else{
							    
	       						$additional_users_block = new Application_Form_FormBlockAdditionalUsers();
    							$result_additional_users = $additional_users_block->InsertData($_POST, $allowed_blocks);
							}
							/* ---------------------------------------------------- */

							/* ------------------SAVE BLOCK SERVICE ENTRY------------------- */
							$service_entry_block = new Application_Form_ContactFormServiceEntry();
							$result_service_entry = $service_entry_block->InsertData($_POST, $allowed_blocks);
							//print_r($_POST);exit;
							/* ---------------------------------------------------- */
							
							/* ------------------SAVE  VITAL SIGNS------------------- */
							$vitalsigns_block = new Application_Form_FormBlockVitalSigns();
							//ISPC-2470 Carmen
							//$result_vitalsigns = $vitalsigns_block->InsertData($_POST, $allowed_blocks);
							$post = $_POST;
							$post['vitalsign_colmax'] = $this->view->vitalsign_colmax;
							$result_vitalsigns = $vitalsigns_block->InsertData($post, $allowed_blocks);
							//--
							
							/* ------------------SAVE  VITAL SIGNS------------------- */
							$bowelmovement_block = new Application_Form_FormBlockBowelMovement();
							$result_bowelmovement = $bowelmovement_block->InsertData($_POST, $allowed_blocks);
							
							/* ---------------------------------------------------- */
							
							/* ------------------SAVE  Hospiz II------------------- */
							$hospiz_block = new Application_Form_FormBlockHospizimex();
							$result_hospiz= $hospiz_block ->InsertData($_POST, $allowed_blocks);
							
							/* ------------------SAVE  Hospiz I------------------- */
							$hospizmedi_block = new Application_Form_FormBlockHospizmedi();
 							$result_hospizmedi= $hospizmedi_block->InsertData($_POST, $allowed_blocks);
						 	
							/* ---------------------------------------------------- */
 							
 							/* ----------------SAVE Fahrtzeit / Dokumentationszeit---- */
 							$drivetimedoc_block = new Application_Form_FormBlockDrivetimedoc();
 							$result_drivetimedoc=$drivetimedoc_block->InsertData($_POST, $allowed_blocks);
 							
 							/* ---------------------------------------------------- */

 							
 							/* ----------------SAVE NEW MEDICATION BLOCK---- */
 							if(!empty($_POST['medication_block'])){
								
 								$post_medication_data = $_POST;
								$post_medication_data['clientid'] = $clientid;
								$post_medication_data['userid'] = $userid;
 							    $med_form = new Application_Form_PatientDrugPlan();
 							    $med_form->save_medication($ipid,$post_medication_data);

 							    
 							    $old_post = 0 ;
 							    if($old_post == "1"){
 							    	
	 							    $patient_medication_form = new Application_Form_Medication();
	 							    $patient_medication_isnutrition_form = new Application_Form_Nutrition();
	 							    $patient_medication_tr_form = new Application_Form_MedicationTreatmentCare();
	 							    $med_form = new Application_Form_PatientDrugPlan();
	 							    
	 							    /*===============================*/
	 							    /* update dosages hours:minutes  Dosierung from top of the table*/
	 							    /*===============================*/
	 							    if (!empty($_POST['interval'])) {
		 							    $dosage_column_inputs_array = array(
		 							    		'interval' => $_POST['interval'],
		 							    		'deleted_intervals_ids' => $_POST['deleted_intervals_ids'],
		 							    		'ipid' => $ipid
		 							    );
		 							    // 		        die(print_r($dosage_column_inputs_array));
		 							    $drugplan_intervals_form = new Application_Form_PatientDrugPlanDosageIntervals();
		 							    
		 							    if($drugplan_intervals_form->validate_v2($dosage_column_inputs_array))
		 							    {
		 							    	$drugplan_intervals_form->insert_data($dosage_column_inputs_array);
		 							    }
		 							    else
		 							    {
		 							    	//$this->retainValues($_POST);
		 							    	 
	// 	 							    	$this->view->errors = $drugplan_intervals_form->getErrorMessages();
		 							    	//retain values as a session for the ajax?.. and return
	// 	 							    	return true;
		 							    
		 							    }
		 							}
	 							    
	 							    foreach($_POST['medication_block'] as $type => $med_values)
	 							    {
	 							        if($type == "isschmerzpumpe")
	 							        {
	 							            foreach($med_values as $pumpe_number=>$sch_med_values)
	 							            {
	 							                $sch_post_data = $sch_med_values;
	 							                foreach($sch_med_values['medication'] as $amedikey => $amedi)
	 							                {
	 							                    if(strlen($amedi) > 0 && empty($sch_med_values['hidd_medication'][$amedikey]) && !empty($sch_med_values['drid'][$amedikey]) && !empty($sch_med_values['medication'][$amedikey]))
	 							                    {
	 							        
	 							                        $sch_post_data['newmids'][$amedikey] = $sch_med_values['drid'][$amedikey];
	 							                        $sch_post_data['newmedication'][$amedikey] = $amedi;
	 							                    }
	 							        
	 							                    if(strlen($amedi) > 0 && (!empty($sch_med_values['hidd_medication'][$amedikey]) && empty($sch_med_values['drid'][$amedikey]) && !empty($sch_med_values['medication'][$amedikey])))
	 							                    {
	 							                        $sch_post_data['newmids'][$amedikey] = $sch_med_values['hidd_medication'][$amedikey];
	 							                        $sch_post_data['newmedication'][$amedikey] = $amedi;
	 							                    }
	 							        
	 							                    if(strlen($amedi) > 0 && (empty($sch_med_values['hidd_medication'][$amedikey]) && empty($sch_med_values['drid'][$amedikey]) && !empty($sch_med_values['medication'][$amedikey])))
	 							                    {
	 							                        $sch_post_data['newmedication'][$amedikey] = $amedi;
	 							                    }
	 							                }
	 							        
	 							                if(is_array($sch_post_data['newmedication']))
	 							                {
	 							                    $dts = $patient_medication_form->InsertNewData($sch_post_data);
	 							                    foreach($dts as $key => $dt)
	 							                    {
	 							                        $sch_post_data['newhidd_medication'][$key] = $dt->id;
	 							                    }
	 							                }
	 							                $sch_post_data[$type] =  "1";
	 							                $sch_post_data['ipid'] =  $ipid;
	 							                if($acknowledge =="1")
	 							                {
	 							                    $sch_post_data['skip_trigger'] = "1";
	 							                }
	 							        
	 							        
	 							                // save data for each pumpe
	 							                $med_form->update_schmerzpumpe_data($sch_post_data);
	 							        
	 							        
	 							                //find out edited/added medis
	 							                foreach($sch_med_values['medication'] as $k_meds => $v_meds)
	 							                {
	 							                    $cust = Doctrine::getTable('PatientDrugPlan')->find($sch_med_values['drid'][$k_meds]);
	 							                    $list = true; //list curent medi
	 							                    
	 							                    if($cust)
	 							                    {
	 							                        $post_sch[$k_meds]= "";
	 							                        $existing_sch[$k_meds]= "";
	 							                        
	 							                        $post_sch[$k_meds] = trim($sch_med_values['dosage'][$k_meds]);
	 							                        $post_sch[$k_meds] .= trim($sch_med_values['hidd_medication'][$k_meds]);
	 							                        $post_sch[$k_meds] .= trim($sch_med_values['verordnetvon'][$k_meds]);
	 							                        
	 							                        
	 							                        $existing_sch[$k_meds] = trim($cust->dosage);
	 							                        $existing_sch[$k_meds] .= trim($cust->medication_master_id);
	 							                        $existing_sch[$k_meds] .= trim($cust->verordnetvon);
	 							                        
	 							                        
	 							                        /* if($cust->dosage != $sch_med_values['dosage'][$k_meds] ||
	 							                            $cust->medication_master_id != $sch_med_values['hidd_medication'][$k_meds] ||
	 							                            $cust->verordnetvon != $sch_med_values['verordnetvon'][$k_meds]) */
	 							                        
	 							                        if($sch_med_values['edited'][$k_meds] == "1" && $post_sch[$k_meds]!= $existing_sch[$k_meds])
	 							                        {
	 							                            $list = false; //don`t list curent medi
	 							                        }
	 							                    }
	 							        
	 							                    if(!array_key_exists($k_meds, $sch_post_data['newmedication']) && $list) //new medis
	 							                    {
	 							                        $meds[$sch_med_values['cocktail']['id']][] = $v_meds . " | " . $sch_med_values['dosage'][$k_meds] . "\n";
	 							                    }
	 							                }
	 							        
	 							                if($list)
	 							                {
	 							                    $current_sh_ck = $sch_med_values['cocktail']['id'];
	 							                    
	 							                    // check if current cocktail is differnt from post 
	 							                    $post_sch_cocktail[$current_sh_ck] ="";
	 							                    $post_sch_cocktail[$current_sh_ck] .= trim($sch_med_values['cocktail']['description']);
	 							                    $post_sch_cocktail[$current_sh_ck] .= trim($sch_med_values['cocktail']['pumpe_medication_type']);
	 							                    $post_sch_cocktail[$current_sh_ck] .= trim($sch_med_values['cocktail']['flussrate']);
	 							                    $post_sch_cocktail[$current_sh_ck] .= trim($sch_med_values['cocktail']['carrier_solution']);
	 							                    
	 							                    if($sch_med_values['cocktail']['pumpe_type'] == "pca") {
	 							                        $post_sch_cocktail[$current_sh_ck] .=trim($sch_med_values['cocktail']['bolus']);
	 							                        $post_sch_cocktail[$current_sh_ck] .= trim($sch_med_values['cocktail']['sperrzeit']);
	 							                    }
	 							                    
	 							                    
	 							                    $existing_sch_cocktail[$current_sh_ck] ="";
	 							                    $existing_sch_cocktail[$current_sh_ck] .= trim($cocktails[$current_sh_ck]['description']);
	 							                    $existing_sch_cocktail[$current_sh_ck] .= trim($cocktails[$current_sh_ck]['pumpe_medication_type']);
	 							                    $existing_sch_cocktail[$current_sh_ck] .= trim($cocktails[$current_sh_ck]['flussrate']);
	 							                    $existing_sch_cocktail[$current_sh_ck] .= trim($cocktails[$current_sh_ck]['carrier_solution']);
	 							                    
	 							                    if($cocktails[$current_sh_ck]['pumpe_type'] == "pca") {
	 							                        $existing_sch_cocktail[$current_sh_ck] .=trim($cocktails[$current_sh_ck]['bolus']);
	 							                        $existing_sch_cocktail[$current_sh_ck] .= trim($cocktails[$current_sh_ck]['sperrzeit']);
	 							                    }
	 							                    
	 							                    
	 							                    if( $existing_sch_cocktail[$current_sh_ck] != $post_sch_cocktail[$current_sh_ck]){
	 							                        
	 							                    
	     							                    $course_cocktail_entry ="";
	     							                    $course_cocktail_entry .= "Kommentar: " . $sch_med_values['cocktail']['description'];
	     							                    $course_cocktail_entry .= "\nApplikationsweg: " . $sch_med_values['cocktail']['pumpe_medication_type'];
	     							                    $course_cocktail_entry .= "\nFlussrate: " . $sch_med_values['cocktail']['flussrate'];
	     							                    $course_cocktail_entry .= "\nTrägerlösung: " . $sch_med_values['cocktail']['carrier_solution'];
	     							        
	     							                    if($sch_med_values['cocktail']['pumpe_type'] == "pca") {
	     							                        $course_cocktail_entry .= "\nBolus: " . $sch_med_values['cocktail']['bolus'];
	     							                        $course_cocktail_entry .= "\nSperrzeit: " . $sch_med_values['cocktail']['sperrzeit'] ;
	     							                    }
	 
	     							                    $cust = new PatientCourse();
	     							                    $cust->ipid = $ipid;
	     							                    $cust->course_date = date("Y-m-d H:i:s", time());
	     							                    $cust->course_type = Pms_CommonData::aesEncrypt("Q");
	//      							                    $cust->course_title = Pms_CommonData::aesEncrypt(addslashes(implode('', $meds).$course_cocktail_entry));
	     							                    $cust->course_title = Pms_CommonData::aesEncrypt(addslashes(implode('', $meds[$sch_med_values['cocktail']['id']]).$course_cocktail_entry));
	     							                    $cust->user_id = $userid;
	     							                    $cust->save();
	                                                }
	 							                }
	 							            }
	 							            
	 							            
	 							            
	 							            
	 							            
	 							        }
	 							        else
	 							        {
	 							            $post_data = $med_values;
	 							            foreach($med_values['medication'] as $amedikey => $amedi)
	 							            {
	 							                if(strlen($amedi) > 0 && empty($med_values['hidd_medication'][$amedikey]) && !empty($med_values['drid'][$amedikey]) && !empty($med_values['medication'][$amedikey]))
	 							                {
	 							        
	 							                    $post_data['newmids'][$amedikey] = $med_values['drid'][$amedikey];
	 							                    $post_data['newmedication'][$amedikey] = $amedi;
	 							                }
	 							        
	 							                if(strlen($amedi) > 0 && (!empty($med_values['hidd_medication'][$amedikey]) && empty($med_values['drid'][$amedikey]) && !empty($med_values['medication'][$amedikey])))
	 							                {
	 							                    $post_data['newmids'][$amedikey] = $med_values['hidd_medication'][$amedikey];
	 							                    $post_data['newmedication'][$amedikey] = $amedi;
	 							                }
	 							        
	 							                if(strlen($amedi) > 0 && (empty($med_values['hidd_medication'][$amedikey]) && empty($med_values['drid'][$amedikey]) && !empty($med_values['medication'][$amedikey])))
	 							                {
	 							                    $post_data['newmedication'][$amedikey] = $amedi;
	 							                }
	 							            }
	 							        
	 							            if(is_array($post_data['newmedication']))
	 							            {
	 							                if($type == 'treatment_care')
	 							                {
	 							                    $dts = $patient_medication_tr_form->InsertNewData($post_data);
	 							                }
	 							                elseif ($type == 'isnutrition')
	 							                {
	 							                    $dts = $patient_medication_isnutrition_form->InsertNewData($post_data);
	 							                }
	 							                else
	 							                {
	 							                    $dts = $patient_medication_form->InsertNewData($post_data);
	 							                }
	 							        
	 							                foreach($dts as $key => $dt)
	 							                {
	 							                    $post_data['newhidd_medication'][$key] = $dt->id;
	 							                }
	 							            }
	 							        
	 							            $post_data[$type] =  "1";
	 							            $post_data['ipid'] =  $ipid;
	 							            if($acknowledge =="1")
	 							            {
	 							                $post_data['skip_trigger'] = "1";
	 							            }
	 							        
	 							            // save medication changes
	 							            $med_form->update_multiple_data($post_data);
	 							        }
	 							        
	 							    } // END foreach
 								} // END if old post
 							}
 							
 							/* ---------------------------------------------------- */
 							
    						/* ------------------SAVE BLOCK IPOS-------------------*/
    						if (in_array('ipos', $allowed_blocks) || in_array('pflegeipos', $allowed_blocks) || (in_array('lmu_visit', $allowed_blocks) && is_array($_POST['ipos']) && $_POST['lmu_visit'] && $_POST['lmu_visit']['iposenabled'])){
    							$ipos_block = new Application_Form_FormBlockIpos();
                                if(isset($_POST['ipos']['patient_ipos_values'])){
                                   foreach($_POST['ipos']['patient_ipos_values'] as $key => $value) {
                                       $_POST['ipos'][$key] = $value;
                                   }
                                }
    
    							$ipos_block->InsertData($_POST,$allowed_blocks);
    							$iposaddnew=array();
    							foreach($_POST['ipos_add'] as $ipaddkey=>$ipaddval){
    								if($ipaddval['key']){
    									$iposaddnew[$ipaddval['key']]=$ipaddval['value'];
    									}
    								}
    							$_POST['ipos_add'] = $iposaddnew;
    
    							$lmu_ipos_add_block = new Application_Form_FormBlockKeyValue();
                                $ablocks=$allowed_blocks;
                                $ablocks[]='ipos_add';
    							$lmu_ipos_add_block->InsertData($_POST,$ablocks,'ipos_add');
    
    							}
    						/* ---------------------------------------------------- */

    							
							/* ------------------SAVE BLOCK TODOS-------------------*/
// 							if (in_array('todos', $allowed_blocks)){
							    $todos_block = new Application_Form_FormBlockTodos(array(
							    		"_block_name" => "todos",
							    		"_patientMasterData" => $patientmaster->get_patientMasterData()		
							    ));
							    $todos_block->InsertData($_POST, $allowed_blocks);
// 							}
							/* ---------------------------------------------------- */    							
							
							/* ----- SAVE BLOCK LMU_Visit -------*/
							if (in_array('lmu_visit', $allowed_blocks)){
							    $lmu_visit_block = new Application_Form_FormBlockLmuVisit();
							    $lmu_visit_block->InsertData($_POST,$allowed_blocks);
							}
							/* ---------------------------------------------------- */ 							
							
							/* ----------------- SAVE LMU_pmba-BLOCKS --------------*/
							foreach ($pmba_blocks as $blockname)
							{
							    if (in_array($blockname, $allowed_blocks)){
							        $lmu_pmba_block = new Application_Form_FormBlockKeyValue(array(
							    		"_block_name" => "lmu_pmba_psysoz",
							    		"_patientMasterData" => $patientmaster->get_patientMasterData(),
							            "_clientModules" => $this->view->clientModules,//TODO-3219 Ancuta 09.07.2020
							    ) );
							        $lmu_pmba_block->InsertData($_POST,$allowed_blocks,$blockname);
							    } else{

							    //why this else
							        $lmu_pmba_block = new FormBlockKeyValue();
							        $patient_pmba_vals  = $lmu_pmba_block->getPatientFormBlockKeyValues($ipid, $_REQUEST['cid'], false, $blockname);
							        
							        $lmu_pmba_block = new Application_Form_FormBlockKeyValue();
							        $lmu_pmba_block->InsertData($patient_pmba_vals,$allowed_blocks,$blockname);
							        
							    }
							}
							
							/* ---------------------------------------------------- */
							/* ---------------------------------------------------- */
							/* ---------------------------------------------------- */
							//START add form data to sync-packet
							if(    in_array('lmu_pmba_body',        $allowed_blocks)
							    && in_array('lmu_pmba_pain',        $allowed_blocks)
							    && in_array('lmu_pmba_wishes',      $allowed_blocks)
							    && in_array('lmu_pmba_aufklaerung', $allowed_blocks)
							    && in_array('lmu_pmba_psysoz', $allowed_blocks)
							){
							    $syncpacket=array(
							        'lmu_pmba_body'         =>$_POST['lmu_pmba_body'],
							        'lmu_pmba_pain'         =>$_POST['lmu_pmba_pain'],
							        'lmu_pmba_wishes'       =>$_POST['lmu_pmba_wishes'],
							        'lmu_pmba_aufklaerung'  =>$_POST['lmu_pmba_aufklaerung'],
							        'lmu_pmba_psysoz'       =>$_POST['lmu_pmba_psysoz']
							    );
							    SystemsSyncPackets::createPacket($ipid, $syncpacket, 'BA', 1);
							}
							//END add form data to sync-packet
							
							/* ---------------------------------------------------- */
							/* ---------------------------------------------------- */
							/* ---------------------------------------------------- */
							/* ---------------------------------------------------- */
 							
							/* ------------------SAVE  VISIT TYPE - NORDHEIN------------------- */
							$visit_type_block = new Application_Form_FormBlockVisitType();
							$result_visit_type = $visit_type_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */
							
							/* ------------------SAVE  time_division_block ------------------- */
							if (in_array('time_division', $allowed_blocks)){
								$time_division_block = new Application_Form_FormBlockTimeDivision();
								$time_division_value = $time_division_block->InsertData($_POST, $allowed_blocks);
							}
							/* ---------------------------------------------------- */
									
							/* ------------------SAVE   tracheostomy_block ------------------- */
							if (in_array('tracheostomy', $allowed_blocks)){
								$tracheostomy_block = new Application_Form_FormBlockTracheostomy();
								$tracheostomy_value = $tracheostomy_block->InsertData($_POST, $allowed_blocks);
							}
							/* ---------------------------------------------------- */
							
							/* ------------------SAVE BLOCK Symptome II------------------- */
							$cl_sympt_block = new Application_Form_FormBlockClientSymptoms();
							$result_cl_sympt = $cl_sympt_block->InsertData($_POST, $allowed_blocks);
							/* ---------------------------------------------------- */
							
							
							/* ------------------SAVE  ventilation_block ------------------- */
							if (in_array('ventilation', $allowed_blocks)){
								$af_fbv = new Application_Form_FormBlockVentilation();
								$ventilation_block_id = $af_fbv->InsertData($_POST, $allowed_blocks);
							}
							
							
							//ispc-2291
							$data_post = [
							    'contact_form_id' => $_POST['contact_form_id'],
							    '__formular' => [
							        'contact_form_id'    => $_POST['contact_form_id'],
							        'old_contact_form_id'=> (int)$_POST['old_contact_form_id'],
							        'date'               => $_POST['date'],
							        'begin_date_h'       => $_POST['begin_date_h'],
							        'begin_date_m'       => $_POST['begin_date_m'],
							        'allowed_blocks'     => $allowed_blocks,
							        'blocks2recorddata'     => $write2_recordata_blocks, //TODO-3843 Ancuta 11.02.2021
							    ]
							];
							
							/* ------------------SAVE  puncture ------------------- */
							if (in_array('puncture', $allowed_blocks)) 
							{		

							    $data_block = $this->getRequest()->getPost('FormBlockPuncture', []);    
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbp = new Application_Form_FormBlockPuncture();
							    $form = $af_fbp->save_form_puncture($ipid, $data_block);
							}
								
							/* ------------------SAVE  infusion  ------------------- */
							if (in_array('infusion', $allowed_blocks)) 
							{
							    $data_block = $this->getRequest()->getPost('FormBlockInfusion', []); 	
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbi = new Application_Form_FormBlockInfusion();
							    $form = $af_fbi->save_form_infusion($ipid, $data_block);
							}
								
							/* ------------------SAVE  infusiontimes  ------------------- */
							if (in_array('infusiontimes', $allowed_blocks)) 
							{
							    $data_block = $this->getRequest()->getPost('FormBlockInfusiontimes', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbit = new Application_Form_FormBlockInfusiontimes();
							    $form = $af_fbit->save_form_infusiontimes($ipid, $data_block);
							}
								
							/* ------------------SAVE  adverseevents  ------------------- */
							if (in_array('adverseevents', $allowed_blocks)) 
							{
							    $data_block = $this->getRequest()->getPost('FormBlockAdverseevents', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockAdverseevents();
							    $form = $af_fbae->save_form_adverseevents($ipid, $data_block);
							}
							
							/* ------------------SAVE  visitclasification  ------------------- */
							// ISPC-2387
							if (in_array('visitclasification', $allowed_blocks)) 
							{
							    $data_block = $this->getRequest()->getPost('FormBlockVisitClasification', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockVisitClasification();
							    $form = $af_fbae->save_form_visitclasification($ipid, $data_block);
							}
							
							/* ------------------SAVE  delegation  ------------------- */
							// ISPC-2488 Lore 22.11.2019
							if (in_array('delegation', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockDelegation', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockDelegation();
							    $form = $af_fbae->save_form_delegation($ipid, $data_block);
							}
							
							/* ------------------SAVE  PatientACP  ------------------- */
							// ISPC-2671 Lore 07.09.2020
							if (in_array('patient_acp', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientAcp', []);
							    $data_block = array_merge($data_post, $data_block);
							    //ISPC-2565,Elena,26.02.2021
                                $patientdata = new PatientMaster();
                                $patientModelData = $patientdata->get_patientMasterData($patientdata->getMasterData_extradata($ipid, 'PatientAcp'));
                                $data_block['savedAcp'][0] = $patientModelData['PatientAcp'];
							    
							    $af_fbae = new Application_Form_PatientACP();
							    $form = $af_fbae->save_form_acp_all_tabs($ipid, $data_block, $data_post['contact_form_id']);
							    
							}
							
							/* ------------------SAVE  Pflegegrade - PatientMaintainanceStage  ------------------- */
							//ISPC-2668 Lore 11.09.2020
							if (in_array('patient_ms', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientMaintainanceStage', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientMaintainanceStage();
							    $form = $af_fbae->save_maintenancestage($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  Pflegegrade - PatientHealthInsurance  ------------------- */
							//ISPC-2666 Lore 16.09.2020
							if (in_array('patient_hi', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientHealthInsurance', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientHealthInsurance();
							    $form = $af_fbae->save_form_health_insurance($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  Pflegeversicherung - PatientCareInsurance  ------------------- */
							//ISPC-2667 Lore 21.09.2020
							if (in_array('patient_ci', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientCareInsurance', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientCareInsurance();
							    $form = $af_fbae->save_form_care_insurance($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  Schwerbehindertenausweis - PatientHandicappedCard  ------------------- */
							//ISPC-2669 Lore 23.09.2020
							if (in_array('patient_hc', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientHandicappedCard', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientHandicappedCard();
							    $form = $af_fbae->save_form_handicapped_card($ipid, $data_block, $data_post['contact_form_id']);
							}
			
							/* ------------------SAVE  Familie - PatientFamilyInfo  ------------------- */
							//ISPC-2773 Lore 14.12.2020
							if (in_array('patient_familyinfo', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientFamilyInfo', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientFamilyInfo();
							    $form = $af_fbae->save_form_family_info($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  (Kinder)Krankheiten - PatientChildrenDiseases  ------------------- */
							//ISPC-2776 Lore 15.12.2020
							if (in_array('patient_childrendiseases', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientChildrenDiseases', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientChildrenDiseases();
							    $form = $af_fbae->save_form_children_diseases($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  Ernährung - PatientNutritionInfo  ------------------- */
							//ISPC-2788 Lore 08.01.2021
							if (in_array('patient_nutritioninfo', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientNutritionInfo', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientNutritionInfo();
							    $form = $af_fbae->save_form_nutrition_info($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  Stimulatoren - PatientStimulatorsInfo  ------------------- */
							//ISPC-2787 Lore 11.01.2021
							if (in_array('patient_stimulatorsinfo', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientStimulatorsInfo', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientStimulatorsInfo();
							    $form = $af_fbae->save_form_stimulators_info($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  Finale Phase - PatientFinalPhase  ------------------- */
							//ISPC-2790 Lore 12.01.2021
							if (in_array('patient_finalphase', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientFinalPhase', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientFinalPhase();
							    $form = $af_fbae->save_form_final_phase($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  Ausscheidung - PatientExcretionInfo  ------------------- */
							//ISPC-2791 Lore 13.01.2021
							if (in_array('patient_excretioninfo', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientExcretionInfo', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientExcretionInfo();
							    $form = $af_fbae->save_form_excretion_info($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  Haut- und Körperpflege - PatientPersonalHygiene  ------------------- */
							//ISPC-2792 Lore 14.01.2021
							if (in_array('patient_personalhygiene', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientPersonalHygiene', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientPersonalHygiene();
							    $form = $af_fbae->save_form_personal_hygiene($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  Kommunikation und Beschäftigung  - PatientCommunicationEmployment  ------------------- */
							//ISPC-2793 Lore 18.01.2021
							if (in_array('patient_comm_employ', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientCommunicationEmployment', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientCommunicationEmployment();
							    $form = $af_fbae->save_form_communication_employment($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  EVN   ------------------- */
							//ISPC-2670 Lore 24.09.2020
							if (in_array('patient_evn', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('PatientEvn', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_PatientEvn();
							    $form = $af_fbae->save_form_patient_evn($ipid, $data_block, $data_post['contact_form_id']);
							}
							
							/* ------------------SAVE  resources  ------------------- */
							// ISPC-2673 Lore 25.09.2020
							if (in_array('resources', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockResources', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockResources();
							    $form = $af_fbae->save_form_resources($ipid, $data_block);
							}
							
							//ISPC-2454 - custom form blocks
							/* ------------------SAVE  custom form block  ------------------- */
							foreach($custom_form_blocks as $kb=>$vb)
							{
								//if (in_array($vb, $allowed_blocks))
								//{
								$data_block = $this->getRequest()->getPost($vb['block_abbrev'], []);
								$data_block = array_merge($data_post, $data_block);
								//var_dump($data_block); exit;
								$af_fbae = new Application_Form_FormBlockCustom(array(
										'_block_setting_data' => $vb
								));
								
								$form = $af_fbae->save_form_custom($ipid, $data_block);
								//}
							}
							
							/* ------------------SAVE  artificial entries exits  ------------------- */
							// ISPC-2508 Carmen 22.01.2020
							// Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
						
							$data_block = $this->getRequest()->getPost('FormBlockArtificialEntriesExits', []);
							$data_block = array_merge($data_post, $data_block);
							//var_dump($data_block['artificial_content']); exit;
							// update patient artificial settings
							$pattient_settings  = array();
							foreach($data_block['artificial_content'] as $kr => $vr)
							{
								if($vr['action_option'] != "")
								{
									$pattient_settings[$vr['action_option']][$kr]['id'] = $kr;
									$pattient_settings[$vr['action_option']][$kr]['option_id'] = $vr['option_id'];
									$pattient_settings[$vr['action_option']][$kr]['option_date'] = date('Y-m-d H:i:s', strtotime($vr['option_date']));
									$pattient_settings[$vr['action_option']][$kr]['remove_date'] = $vr['remove_date'] != '' ? date('Y-m-d H:i:s', strtotime($vr['remove_date'])): '';
									$pattient_settings[$vr['action_option']][$kr]['option_localization'] = $vr['option_localization'];
									$pattient_settings[$vr['action_option']][$kr]['option_availability'] = $vr['option_availability'];
									if($vr['action_option'] == 'delete' || $vr['action_option'] == 'remove')
									{
										unset($data_block['artificial_content'][$kr]);
									}
								}
							}
							
							if(!empty($pattient_settings))
							{
								$data = array();
								if(array_key_exists('edit', $pattient_settings))
								{
									foreach($pattient_settings['edit'] as $kr => $vr)
									{
										$data = $vr;
										unset($data[0]['id']);
										$patsett = PatientArtificialEntriesExitsTable::getInstance()->findOrCreateOneBy(['id', 'ipid'], [$vr['id'], $ipid], $data);

										if($vr['patient_option_id'] == '')
										{
											$new_entry_arr = $data_block['artificial_content'][$kr];
											$new_entry_arr['patient_option_id'] = $patsett->id;
											unset($data_block['artificial_content'][$kr]);
											$data_block['artificial_content'][$patsett->id] = $new_entry_arr;
										}
									}
								}
								
								if(array_key_exists('delete', $pattient_settings))
								{
									foreach($pattient_settings['delete'] as $kr => $vr)
									{
										$patsett = PatientArtificialEntriesExitsTable::getInstance()->findOneById($kr, Doctrine_Core::HYDRATE_RECORD);
										$patsett->isdelete = 1;
										$patsett->save();
									}
								}
								
								if(array_key_exists('remove', $pattient_settings))
								{
									
									foreach($pattient_settings['remove'] as $kr => $vr)
									{
										$patsett = PatientArtificialEntriesExitsTable::getInstance()->findOneById($kr, Doctrine_Core::HYDRATE_RECORD);
										//$patsett->remove_date = date('Y-m-d H:i:s', time());
										$patsett->remove_date = date('Y-m-d H:i:s', strtotime($vr['remove_date'].' '.$vr['remove_time'])); //ISPC-2508 Carmen new design
										$patsett->isremove = 1;
										$patsett->save();
									}
									
									
								}
								
								if(array_key_exists('refresh', $pattient_settings))
								{
									foreach($pattient_settings['refresh'] as $kr => $vr)
									{
										//remove the record and create a new one starting now
										$patsett = PatientArtificialEntriesExitsTable::getInstance()->findOneById($kr, Doctrine_Core::HYDRATE_RECORD);
										//$patsett->remove_date = date('Y-m-d H:i:s', time());
										$patsett->remove_date = date('Y-m-d H:i:s', strtotime($vr['remove_date'].' '.$vr['remove_time'])); //ISPC-2508 Carmen new design
										$patsett->isremove = 1;
										$patsett->save();
										
										$data['id'] = null;
										$data['ipid'] = $ipid;
										$data['option_id'] = $vr['option_id'];
										$data['option_date'] = date('Y-m-d H:i:s', time());
										$data['option_localization'] = $vr['option_localization'];
											
										$newpatsett = PatientArtificialEntriesExitsTable::getInstance()->createIfNotExistsOneBy(array('id', 'ipid'), array($data['id'], $ipid), $data);
								
										if($newpatsett->id)
										{
											$new_entry_arr = $data_block['artificial_content'][$kr];
											$new_entry_arr['patient_option_id'] = $newpatsett->id;
											unset($data_block['artificial_content'][$kr]);
											$data_block['artificial_content'][$newpatsett->id] = $new_entry_arr;
										}
									}
								}
							}
							

							//print_r($data_block);exit;
							//update data form block for artificial settings
							$af_fbae = new Application_Form_FormBlockArtificialEntriesExits(array(
									'_patient_artificial_options' => $patient_artenex_byids,
									'_client_artificial_options' => $client_options_byids,
							));
							$form = $af_fbae->save_form_block_artificial_entries_exits($ipid, $data_block);
							
							
							// --
							
							
							/* ------------------SAVE  care_process_clinic  ------------------- */
							// IM-4
							if (in_array('care_process_clinic', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockCareProcessClinic', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_careprocessclinic($ipid, $data_block);
							}
							
							/* ------------------SAVE  time_documentation_clinic  ------------------- */
							// IM-16
							if (in_array('time_documentation_clinic', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockTimeDocumentationClinic', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockTimedocumentationClinic();
							    $af_fbae->save_form_timedocumentationclinic($ipid, $data_block);
							}
							
							/* ------------------SAVE  Treatment-plan Clinic  ------------------- */
							// IM-26
							if (in_array('treatment_plan_clinic', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockTreatmentPlanClinic', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_treatmentplanclinic($ipid, $data_block);
							}
							/* ------------------SAVE  Jobbackground Clinic-Patient  ------------------- */
							// IM-46
							if (in_array('talkcontent', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockTalkContent', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_talkcontent($ipid, $data_post, $data_block, $form_type_id);
							}
							
							// ISPC-2626, elena, 10.07.2020
							if (in_array('coordinationtime', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockCoordinationtime', []);
							    //$data_block = array_merge($data_post, $data_block);
							    $data_block['coordinationtime'] = intval($data_block['coordinationtime']);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_coordinationtime($ipid, $data_post, $data_block);
							}
							//ISPC-2577, elena, 04.09.2020
                            if(!empty($shortcodeblocks)){
                                foreach($shortcodeblocks as $shortcodeblock){
                                    $blockname = 'block_shortcode_' . $shortcodeblock['id'];
                                    if(in_array($blockname, $allowed_blocks)){
                                        $data_block[$blockname] = $this->getRequest()->getPost($blockname, []);
                                        $data_block['blockname'] = $blockname;
                                        $data_block = array_merge($data_post, $data_block);
                                        //print_r($data_block);
                                        //exit();


                                        $af_fbae = new Application_Form_FormBlockKeyValue();
                                        $af_fbae->save_form_dynamic($ipid, $data_post, $data_block);
                                    }


                                }

                            }

                            //ISPC-2698, elena, 22.12.2020
                            if(!empty($optionsblocks)){
                                foreach($optionsblocks as $optionsblock){
                                    $blockname = 'block_opt_' . $optionsblock['id'];
                                    if(in_array($blockname, $allowed_blocks)){
                                        $data_block[$blockname] = $this->getRequest()->getPost($blockname, []);
                                        $data_block['blockname'] = $blockname;
                                        $data_block['headline'] = $optionsblock['headline'];
                                        $data_block = array_merge($data_post, $data_block);
                                        //print_r($data_block);
                                        //exit();


                                        $af_fbae = new Application_Form_FormBlockKeyValue();
                                        $af_fbae->save_client_options_form($ipid, $data_post, $data_block);
                                    }


                                }

                            }

							
                            // ISPC-2631, elena, 28.07.2020//Maria:: Migration CISPC to ISPC 20.08.2020
                            if (in_array('lmu_pmba2', $allowed_blocks))
                            {
                                $data_block = $this->getRequest()->getPost('lmu_pmba2', []);
                                //$data_block = array_merge($data_post, $data_block);
                                $data_block['lmu_pmba2'] = intval($data_block['lmu_pmba2']);

                                $af_fbae = new Application_Form_FormBlockKeyValue();
                                $af_fbae->save_form_lmu_pmba2($ipid, $data_post, $data_block);
                            }
							// ISPC-2628, elena, 16.07.2020
							if (in_array('fileupload', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('fileupload', []);
							    $data_block = array_merge($data_post, $data_block);
							    //echo $encid;
							    $action_name = "upload_patient_files{$decid}";
							    
							    $qquuid = $this->getRequest()->getPost('qquuid');
							    $qquuid_title = $this->getRequest()->getPost('qquuid_title');
							    $qquuid = $this->getRequest()->getPost('qquuid');
							    $qquuid_title = $this->getRequest()->getPost('qquuid_title');
							    $user2 = new User();
							    $userarray2 = $user2->getUserDetails($userid);
							    
							    
							    if (is_array($qquuid) && ! empty($qquuid) && ($last_uploaded_files = $this->get_last_uploaded_file($action_name, $qquuid, $clientid))) {
							        
							        $upload_form = new Application_Form_PatientFileUpload();
							        foreach ($qquuid as $k=>$qquuidID) {
							            
							            if (($last_uploaded_file = $last_uploaded_files[$qquuidID]) ) {
							                
							                $file_name = pathinfo($last_uploaded_file['filepath'], PATHINFO_FILENAME) . "/" . $last_uploaded_file['fileInfo']['name'];
							                $file_type = strtoupper(pathinfo($last_uploaded_file['filename'], PATHINFO_EXTENSION));
							                if($this->getRequest()->getPost('active_version') != 0) //ISPC - 2129
							                {
							                    $post = [
							                        'ipid'      => $ipid,
							                        'clientid'  => $clientid,
							                        'title'     => ! empty($qquuid_title[$k]) ? $qquuid_title[$k] : $last_uploaded_file['filename'] ,
							                        'filetype'  => $file_type,
							                        'file_name' => $file_name,
							                        'zipname'   => $last_uploaded_file['filepath'], //filepath
							                        'pat_files_tags_rights' => $userarray2[0]['patient_file_tag_rights'],
							                        'tag_name'   => $this->getRequest()->getPost('fileupload[tag_name]'),
							                        'active_version' => $this->getRequest()->getPost('active_version')
							                        
							                    ];
							                    
							                }
							                else
							                {
							                    $post = [
							                        'ipid'      => $ipid,
							                        'clientid'  => $clientid,
							                        'title'     => ! empty($qquuid_title[$k]) ? $qquuid_title[$k] : $last_uploaded_file['filename'] ,
							                        'filetype'  => $file_type,
							                        'file_name' => $file_name,
							                        'zipname'   => $last_uploaded_file['filepath'], //filepath
							                        'pat_files_tags_rights' => $userarray2[0]['patient_file_tag_rights'],
							                        'tag_name'   => $this->getRequest()->getPost('fileupload[tag_name]'),
							                        'active_version' => '0'
							                    ];
							                    
							                }
							                
							                
							                $rec = $upload_form->insertData($post);
							                
							                //$this->delete_last_uploaded_file($action_name, $qquuidID, $clientid);
							            }
							            
							            
							        }
							    }
							    
							    $data_block['action_name'] = $action_name;
							    $data_block['qquuid_title'] = $qquuid_title ;
							    $data_block['qquuid '] = $qquuid ;
							    
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_fileupload($ipid, $data_post, $data_block);
							}

                            // ISPC-2697, elena, 05.11.2020
                            if (in_array('beatmung', $allowed_blocks))
                            {
                                $data_block = $this->getRequest()->getPost('FormBlockBeatmung', []);

                                //$data_block = json_encode($data_block);

                                $af_fbae = new Application_Form_FormBlockKeyValue();
                                $af_fbae->save_form_ventilation($ipid, $data_post, $data_block);
                            }
							
							// ISPC-2657, elena, 14.01.2021
                            if (in_array('reactions', $allowed_blocks))
                            {
                                $data_block = $this->getRequest()->getPost('reactions', []);

                                $data_block = array_merge($data_post, $data_block);

                                $af_fbre = new Application_Form_Reactions();
                                $af_fbre->save_contact_form_reactions($ipid, $data_block);
                            }

							/* ------------------SAVE  Jobbackground Clinic-Patient  ------------------- */
							// IM-47
							if (in_array('job_background_clinic', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockJobBackgroundClinic', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_jobbackgroundclinic($ipid, $data_block);
							}
							
							
							/* ------------------SAVE  Discharge-Planning Clinic  ------------------- */
							// IM-48
							if (in_array('discharge_planning_clinic', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockDischargePlanningClinic', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_dischargeplaningclinic($ipid, $data_block);
							}
							
							/* ------------------SAVE  Screening for Depression Clinic  ------------------- */
							// IM-51
							if (in_array('screen_depression_clinic', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockScreeningDepressionClinic', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_screeningdepressionclinic($ipid, $data_block);
							}
							
							/* ------------------SAVE  Medication Block Clinic  ------------------- */
							// IM-53
							if (in_array('medication_clinic', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockMedicationClinic', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_medicationclinic($ipid, $data_post, $data_block);
							}

							/* ------------------SAVE  Genogram  ------------------- */
							// IM-55
							if (in_array('genogram', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockGenogram', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_genogram($ipid, $data_block);
							}
							
							/* ------------------SAVE  Talk with ------------------- */
							// IM-56
							if (in_array('talkwith', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockTalkWith', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_talkwith($ipid, $data_block);
							}
							
							/* ------------------SAVE  Talk with Single Selection ------------------- */
							//ISPC-2663 Carmen 02.09.2020
							if (in_array('talkwithsingleselection', $allowed_blocks))
							{
								$data_block = $this->getRequest()->getPost('FormBlockTalkWithSingleSelection', []);
								$data_block = array_merge($data_post, $data_block);
									
								$af_fbae = new Application_Form_FormBlockKeyValue();
								$af_fbae->save_form_talkwithsingleselection($ipid, $data_block);
							}
							//--
							/* ------------------SAVE  Psychosozial Status  ------------------- */
							// IM-62
							if (in_array('psychosocial_status', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockPsychosocialStatus', []);
							    $data_block = array_merge($data_post, $data_block);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_psychosocial_status($ipid, $data_block);
							}
							
							/* ------------------SAVE  Palliativ Support ------------------- */
							// IM-65
							if (in_array('palliativ_support', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockPalliativSupport', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_palliativ_support($ipid, $data_post, $data_block);
							}
							/* ------------------SAVE  Palliativ Assessment ------------------- */
							// IM-66
							if (in_array('palliativ_assessment', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockPalliativAssessment', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_palliativ_assessment($ipid, $data_post, $data_block);
							}
							/* ------------------SAVE  SOAP (Subjective - Objective - Assessment - Plan) ------------------- */
							// IM-87
							if (in_array('clinic_soap', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockSOAP', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_clinic_soap($ipid, $data_post, $data_block);
							}
							/* ------------------SAVE  Clinic-Diagnosis ------------------- */
							// IM-91
							if (in_array('clinic_diagnosis', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockDiagnosisClinic', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_clinic_diagnosis($ipid, $data_post, $data_block);
							}
							/* ------------------SAVE  Clinic-Shift ------------------- */
							// IM-92
							if (in_array('clinic_shift', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockShift', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_clinic_shift($ipid, $data_post, $data_block);
							}
							/* ------------------SAVE  PMBA-Measure ------------------- */
							// IM-93
							if (in_array('clinic_measure', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockClinicMeasure', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_clinic_measure($ipid, $data_post, $data_block);
							}
							/* ------------------SAVE  Actual Problems ------------------- */
							// IM-105
							if (in_array('actual_problems', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockActualproblems', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_actual_problems($ipid, $data_post, $data_block);
							}
							/* ------------------SAVE  Report  Recipient ------------------- */
							// IM-104
							if (in_array('report_recipient', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockReportRecipient', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_report_recipient($ipid, $data_post, $data_block);
							}
							/* ------------------SAVE  Dokumentation ------------------- */
							// IM-137
							if (in_array('documentation', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockDocumentation', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_documentation($ipid, $data_post, $data_block);
							}
							
							/* ------------------SAVE  Basisassessment Pflege ------------------- */
							// IM-137
							if (in_array('pflegeba', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockPflegeba', []);
							    
							    $af_fbae = new Application_Form_FormBlockKeyValue();
							    $af_fbae->save_form_pflegeba($ipid, $data_post, $data_block);
							}
							
							/* ------------------SAVE  Basisassessment Pflege ------------------- */
							// IM-147
							if (in_array('pcoc', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('FormBlockPcoc', []);
							    
							    $af_fbae = new Application_Form_FormBlockPcoc();
							    $af_fbae->save_form_pcoc($ipid, $data_post, $data_block, $clientid);
							}
							
							 /*--------------------------- SAVE Anamnese -- */
                            //ISPC-2694, elena, 15.12.2020
                            if (in_array('anamnese', $allowed_blocks))
                            {
                                $data_block = $this->getRequest()->getPost('FormBlockAnamnese', []);
                                //$data_block['contact_form_id'] = $_POST['contact_form_id'];
                                $data_block = array_merge($data_post, $data_block);

                                $af_fba = new Application_Form_FormBlockAnamnese();
                                $af_fba->save_form_anamnese($ipid, $data_block);
                                //die();

                            }
                            //ISPC-2868,Elena,18.03.2021
                            if (in_array('talkback', $allowed_blocks)){
                                $data_block = $this->getRequest()->getPost('talkback', []);
							
                                $af_bkv = new Application_Form_FormBlockKeyValue();
                                $af_bkv->save_form_talkback($ipid, $data_post, $data_block);
                            }


							
							/* ------------------SAVE  Versorger  ------------------- */
							// IM-25
							if (in_array('versorger', $allowed_blocks))
							{
							    $data_block = $this->getRequest()->getPost('versorger', []);
							    $add=[
							        'old_contact_form_id'=>$this->getRequest()->getPost('old_contact_form_id', []),
							        'contact_form_id'=>$this->getRequest()->getPost('contact_form_id', []),
							        'ipid'=>$this->getRequest()->getPost('ipid', []),
							        'versorger'=>$data_block
							    ];
							    $data_block = array_merge($data_post, $data_block, $add);
							    
							    $lmu_pmba_block = new Application_Form_FormBlockKeyValue();
							    $lmu_pmba_block->InsertData($data_block, $allowed_blocks, 'versorger');
							}
							/* ------------------SAVE  Simpleboxes  ------------------- */
							foreach ($simpleblocks as $blockname => $blockconfig) {
							    if (
							        in_array($blockname, $allowed_blocks)
							        ){
							            
							            $tmpblocks=$allowed_blocks;
							            
							            $lmu_pmba_block = new Application_Form_FormBlockKeyValue();
							            $post_data_Arr  = array_merge($_POST,$data_post);//TODO-3843
							            //$lmu_pmba_block->InsertData($_POST, $tmpblocks, $blockname);
							            $lmu_pmba_block->InsertData($post_data_Arr, $tmpblocks, $blockname);
							            if (isset($blockconfig['onsave'])) {
							                $fun_onsave = $blockconfig['onsave'];
							                //$fun_onsave($_POST, $blockname);
							                $fun_onsave($post_data_Arr, $blockname);
							                unset($fun_onsave);
							            }
							    }
							}
							
							
							
							if(strlen($_REQUEST['cid']) > 0)
							{
							    $sanfr = new Application_Form_ContactForms();
							    $update_sympt = $sanfr->UpdateContactFormsSympt($_POST);
							    
							    
							    $service_entry = new Application_Form_ContactFormServiceEntry();
							    $result_service = $service_entry->UpdateData($_POST);
							    
							    //@author claudiu on 29.01.2018 removed next 2 lines; ISPC-2071
							    $vitalsigns_entry = new Application_Form_FormBlockVitalSigns();
							    $upd_vitalsign = $vitalsigns_entry->UpdateData($_POST);
							}
							
							/* ------------------SAVE  treatment_plan_block - ISPC - 2277 ------------------- */
							$treatment_plan_block = new Application_Form_FormBlockTreatmentPlan();							
							$result_treatmentplan = $treatment_plan_block->InsertData($_POST, $allowed_blocks);							

							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
							/* -------------------------------  SAVE PDF 2 FILES -------------------------- */
							$post = $_POST;
							
                            $post['simpleblocks_html']=$this->view->simpleblocks;
							$post['user_details'] = $user_dateils;
							$post['contact_form_type_id'] = $form_type_id;
							$post['ipid'] = $ipid;
							$post['contact_form_id'] = $result;
							$post['medications'] = $this->view->medications_pdf;
							$post['bedarfmedications'] = $this->view->bedarfsmedications_pdf;
                            $post['crisismedications'] = $this->view->crisismedications_pdf;
							$post['sympt_view_select'] = $this->view->sympt_view_select;
							$post['ivmedications'] = $this->view->ivmedications_pdf;
							$post['schmerzemedications'] = $this->view->schmerzemedications_pdf;
							$post['schmerze_comment'] = $post['cocktailDescription'];
							$post['schmerze_bolus'] = $post['bolus'];
							$post['schmerze_flussrate'] = $post['flussrate'];
							$post['schmerze_sperrzeit'] = $post['sperrzeit'];
							$post['sgbv_actions'] = $this->view->sgbv_actions;
							$post['patient_sgbv'] = $post['social_action'];
							$post['allowed_blocks'] = $this->view->allowed_blocks;
							$post['sapv_only_blocks'] = $this->view->sapv_only_blocks;
							$post['blocks_order'] = $this->view->blocks_order;
							$post['sonstiges'] = $_POST['comment_block'];
							$post['formtype_name'] = $this->view->formtype_name;
							
							$post['ebm_goa_blocks'] = $this->view->ebm_goa_blocks;
							
							$post['measures_blocks'] = $this->view->measures_blocks;
							$post['coordinator_actions_blocks'] = $this->view->coordinator_actions_blocks;//ISPC-2487 Ancuta 27.11.2019
							$post['sgbxi_actions_blocks'] = $this->view->sgbxi_actions_blocks;
							$post['ebm_ber_blocks'] = $this->view->ebm_ber_blocks;
							if(count($_POST['egblock']) == '0')
							{
								$post['egblock'] = array();
							}
							$post['egblock'] = $_POST['egblock'];
							$post['client_users'] = $this->view->client_users;
							$post['form_create_user'] = $this->view->form_create_user;
							$post['done_date'] = date('Y-m-d H:i:s', strtotime($post['date'] . ' ' . $post['begin_date_h'] . ':' . $post['begin_date_m'] . ':' . date('s', time())));
							$post['zapv_details_items'] = $zapv_details_items;
							$post['symptomarr_zapv'] = $this->view->symptomarr_zapv;
							$post['symptomarr_zapv_complex'] = $this->view->symptomarr_zapv_complex;
							$post['servarr'] = $this->view->servarr;
							//ISPC-2470 Carmen 29.10.2019
							for($krv = 0; $krv < $this->view->vitalsign_colmax; $krv++)
							{
								$post['vital_signs_arr'][$krv]['signs_date'] = $post['signs_date'][$krv];
								$post['vital_signs_arr'][$krv]['signs_date_h'] = $post['signs_date_h'][$krv];
								$post['vital_signs_arr'][$krv]['signs_date_m'] = $post['signs_date_m'][$krv];
								$post['vital_signs_arr'][$krv]['blood_pressure_a'] = Pms_CommonData::str2num($post['blood_pressure_a'][$krv]);
								$post['vital_signs_arr'][$krv]['blood_pressure_b'] = Pms_CommonData::str2num($post['blood_pressure_b'][$krv]);
								$post['vital_signs_arr'][$krv]['puls'] = Pms_CommonData::str2num($post['puls'][$krv]);
								$post['vital_signs_arr'][$krv]['respiratory_frequency'] = Pms_CommonData::str2num($post['respiratory_frequency'][$krv]);
								$post['vital_signs_arr'][$krv]['temperature'] = Pms_CommonData::str2num($post['temperature'][$krv]);
								$post['vital_signs_arr'][$krv]['temperature_dd'] = Pms_CommonData::str2num($post['temperature_dd'][$krv]);
								$post['vital_signs_arr'][$krv]['oxygen_saturation'] = Pms_CommonData::str2num($post['oxygen_saturation'][$krv]);
								$post['vital_signs_arr'][$krv]['blood_sugar'] = Pms_CommonData::str2num($post['blood_sugar'][$krv]);
								$post['vital_signs_arr'][$krv]['weight'] = Pms_CommonData::str2num($post['weight'][$krv]);
								$post['vital_signs_arr'][$krv]['height'] = Pms_CommonData::str2num($post['height'][$krv]);
								$post['vital_signs_arr'][$krv]['head_circumference'] = Pms_CommonData::str2num($post['head_circumference'][$krv]);
								$post['vital_signs_arr'][$krv]['waist_circumference'] = Pms_CommonData::str2num($post['waist_circumference'][$krv]);
							}
							
							$post['patient_hzimex']['import'] =  $_POST['import'];
							$post['patient_hzimex']['export'] =  $_POST['export'];
							$post['medication_hp'] = $this->view->medication_hp;
							$post['patient_hzmedi'] = $_POST['hospiz_med'];
							$post['fahrtzeit1'] =  $_POST['fahrtzeit1'];
							$post['fahrtstreke_km1'] =  $_POST['fahrtstreke_km1'];
							$post['fahrt_doc1'] =  $_POST['fahrt_doc1'];							
							$post['medication_block'] =  $_POST['medication_block'];
							$post['dosage_intervals'] =  $this->view->dosage_intervals;
							$post['client_medication_extra'] =  $this->view->client_medication_extra;
							$post['show_new_fields'] =  $show_new_fields;
							$post['karnofsky_arr'] = $print_karnofsky;
							
							
							
							$post['karnofsky_clinic_arr'] = $print_karnofsky_clinic;
							
							
							

							$post['patient_ipos_values']=$_POST['ipos'];
							$post['patient_pflegeipos_values']=$_POST['pflegeipos'];
							$post['patient_ipos_add_values']=$_POST['ipos_add'];
							
							$post['patient_talkwith_values']=$_POST['talkwith'];
							$post['patient_beobachtungen_values']=$_POST['beobachtungen'];
							$post['patient_vitalzeichen_values']=$_POST['vitalzeichen'];
							$post['patient_zugaenge_values']=$_POST['zugaenge'];
							$post['patient_sonden_values']=$_POST['sonden'];
							$post['patient_harnableitung_values']=$_POST['harnableitung'];
							$post['patient_soap_values']=$_POST['soap'];
							$post['patient_soap_pflege_values']=$_POST['soap_pflege'];
							$post['patient_soap_soza_values']=$_POST['soap_soza'];
							
							$post['patient_procedures_values']=$_POST['procedures'];
							$post['patient_timedocumentation_values']=$_POST['timedocumentation'];
// 							$post['patient_todos_values']=$_POST['todos'];

							$post['patient_post_todos_values']=$_POST['todos'];
							$post['patient_block_todos']= $this->view->block_todos;
								
							
							
							$post['patient_symp_verl_values']=$_POST['symp_verl'];
							$post['patient_talkback_values']=$_POST['talkback'];
							$post['patient_lmu_physmed_documentation_values']=$_POST['lmu_physmed_documentation'];
							$post['patient_lmu_psydoc_values']=$_POST['lmu_psydoc'];
							$post['patient_lmu_spirit_values']=$_POST['lmu_spirit'];
							$post['patient_lmu_phone_values']=$_POST['lmu_phone'];
							$post['patient_lmu_psy_contacttype_values']=$_POST['lmu_psy_contacttype'];
							$post['patient_lmu_physmed_contacttype_values']=$_POST['lmu_physmed_contacttype'];
							
							$post['patient_lmu_documentation_values']=$_POST['lmu_documentation'];
							$post['patient_lmu_visit_values']=$_POST['lmu_visit'];
							$post['patient_lmu_nursing_talkcontents_values']=$_POST['lmu_nursing_talkcontents'];
							$post['patient_lmu_doc_talkcontents_values']=$_POST['lmu_doc_talkcontents'];
							$post['patient_lmu_empfehlung_values']=$_POST['lmu_empfehlung'];
							$post['patient_lmu_pharmatalk_values']=$_POST['lmu_pharmatalk'];
							$post['patient_lmu_pharmaambulant_values']=$_POST['lmu_pharmaambulant'];
							$post['patient_lmu_pharmaschulung_values']=$_POST['lmu_pharmaschulung'];
							$post['patient_lmu_pharmafamilydoc_values']=$_POST['lmu_pharmafamilydoc'];
							$post['patient_lmu_pharmafamilypharmacy_values']=$_POST['lmu_pharmafamilypharmacy'];
							$post['patient_sapvleistung_values']=$_POST['sapvleistung'];
							$post['patient_bayernleistung_values']=$_POST['bayernleistung'];
							foreach ($pmba_blocks as $blockname)
							{
							    $post['patient_'.$blockname.'_values'] = $_POST[$blockname];
							}
							
							$post['lmu_bericht_pmd_doc_values']=$_POST['lmu_bericht_pmd_doc'];
							$post['lmu_bericht_pmd_pflege_values']=$_POST['lmu_bericht_pmd_pflege'];
							$post['lmu_bericht_pmd_soza_values']=$_POST['lmu_bericht_pmd_soza'];
							
							
							
// 							$post['show_block']=  $this->view->show_block;
							
							$post['religions'] = $this->view->religions;
							
							if(strlen($_REQUEST['cid']) == 0)
							{
							    $post['symptom'] = $post['symptom'];
							}
							else
							{
							    foreach($post['checkbox'] as $key => $value)
							    {
							        $post['symptom'] = $value;
							    }
							}
							
							$post['clientsymptoms']= $_POST['clientsymptoms'];
							$post['client_syms']= $this->view->client_sym_all_details;
							$post['show_head_circumference']= $this->view->show_head_circumference;
							$post['timed_scheduled_medications']= $this->view->timed_scheduled_medications;
							// ISPC-2176
							$post['packaging_array']= $this->view->packaging_array;
							
							//ispc-2291
							$post['clientModules'] = $this->view->clientModules;
							$post['block_puncture'] = $this->view->block_puncture['__formPDF'];
							$post['block_infusion'] = $this->view->block_infusion['__formPDF'];
							$post['block_infusiontimes'] = $this->view->block_infusiontimes['__formPDF'];
							$post['block_adverseevents'] = $this->view->block_adverseevents['__formPDF'];
							
							//ISPC-2387
							$post['block_visitclasification'] = $this->view->block_visitclasification['__formPDF'];

							//ISPC-2488 Lore 22.11.2019
							$post['block_delegation'] = $this->view->block_delegation['__formPDF'];
							
							//ISPC-2454
							$post['custom_blocks_allowed'] = $custom_blocks_allowed_abbrev;
							foreach($custom_blocks_allowed_abbrev as $kb => $vb)
							{
								$blockname = 'block_'.$vb;
								$post[$blockname] = $this->view->{$blockname}['__formPDF'];
							}
							$post['vitalsign_colmax'] = $this->view->vitalsign_colmax; //ISPC-2470 Carmen 29.10.2019
						
							//ISPC-2508 Carmen 22.01.2020
							// Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
							$post['block_artificial_entries_exits'] = $this->view->block_artificial_entries_exits['__formPDF'];
							
							//ISPC-2671 Lore 07.09.2020
							$post['block_patient_acp'] = $this->view->block_patient_acp['__formPDF'];
							
							//ISPC-2668 Lore 11.09.2020
							$post['block_patient_ms'] = $this->view->block_patient_ms['__formPDF'];
							
							//ISPC-2666 Lore 16.09.2020
							$post['block_patient_hi'] = $this->view->block_patient_hi['__formPDF'];
							
							//ISPC-2667 Lore 21.09.2020
							$post['block_patient_ci'] = $this->view->block_patient_ci['__formPDF'];
							
							//ISPC-2669 Lore 23.09.2020
							$post['block_patient_hc'] = $this->view->block_patient_hc['__formPDF'];
							
							//ISPC-2773 Lore 14.12.2020
							$post['block_patient_familyinfo'] = $this->view->block_patient_familyinfo['__formPDF'];

							//ISPC-2776 Lore 15.12.2020
							$post['block_patient_childrendiseases'] = $this->view->block_patient_childrendiseases['__formPDF'];
							
							//ISPC-2788 Lore 08.01.2021
							$post['block_patient_nutritioninfo'] = $this->view->block_patient_nutritioninfo['__formPDF'];
							
							//ISPC-2787 Lore 11.01.2021
							$post['block_patient_stimulatorsinfo'] = $this->view->block_patient_stimulatorsinfo['__formPDF'];
							
							//ISPC-2790 Lore 12.01.2021
							$post['block_patient_finalphase'] = $this->view->block_patient_finalphase['__formPDF'];

							//ISPC-2791 Lore 13.01.2021
							$post['block_patient_excretioninfo'] = $this->view->block_patient_excretioninfo['__formPDF'];
	
							//ISPC-2792 Lore 15.01.2021
							$post['block_patient_personalhygiene'] = $this->view->block_patient_personalhygiene['__formPDF'];
							
							//ISPC-2793 Lore 18.01.2021
							$post['block_patient_comm_employ'] = $this->view->block_patient_comm_employ['__formPDF'];
							
							//ISPC-2670 Lore 24.09.2020
							$post['block_patient_evn'] = $this->view->block_patient_evn['__formPDF'];
							
							//ISPC-2673 Lore 25.09.2020
							$post['block_resources'] = $this->view->block_resources['__formPDF'];
							
							//IM-4
							$post['block_careprocessclinic'] = $this->view->block_careprocessclinic['__formPDF'];
							//IM-16
							$post['block_timedocumentationclinic'] = $this->view->block_timedocumentationclinic['__formPDF'];
							//IM-26
							$post['block_treatmentplanclinic'] = $this->view->block_treatmentplanclinic['__formPDF'];
							//IM-46
							$post['block_talkcontent'] = $this->view->block_talkcontent['__formPDF'];
							//IM-47
							$post['block_jobbackgroundclinic'] = $this->view->block_jobbackgroundclinic['__formPDF'];
							//IM-48
							$post['block_dischargeplanningclinic'] = $this->view->block_dischargeplanningclinic['__formPDF'];
							//IM-51
							$post['block_screeningdepressionclinic'] = $this->view->block_screeningdepressionclinic['__formPDF'];
							//IM-56
							$post['block_talkwith'] = $this->view->block_talkwith['__formPDF'];
							//ISPC-2663 Carmen 02.09.2020
							$post['block_talkwithsingleselection'] = $this->view->block_talkwithsingleselection['__formPDF'];
							//--
							//IM-65
							$post['block_palliativsupport'] = $this->view->block_palliativsupport['__formPDF'];
							$post['patient_block_palliativsupport_values'] = $_POST['FormBlockPalliativSupport'];
							//IM-66
							$post['block_palliativassessment'] = $this->view->block_palliativassessment['__formPDF'];
							$post['patient_block_palliativassessment_values'] = $_POST['FormBlockPalliativAssessment'];
							//IM-87
							$post['block_clinicsoap'] = $this->view->block_clinicsoap['__formPDF'];
							//IM-91
							$post['block_clinicdiagnosis'] = $this->view->block_clinicdiagnosis['__formPDF'];
							//IM-92
							$post['block_clinicshift'] = $this->view->block_clinicshift['__formPDF'];
							//IM-104
							$post['block_report_recipient'] = $this->view->report_recipient['__formPDF'];
							
							$post['pflegeba'] = $this->view->pflegeba['__formPDF'];
							$post['coordinationtime'] = $this->view->coordinationtime['__formPDF'];
							$post['fileupload'] = $this->view->fileupload['__formPDF'];
							
							//IM-25
							$post['auto_add_blocks']=$this->view->auto_add_blocks;
							foreach($this->view->auto_add_blocks as $block){
							    $post[$block] = $this->view->{$block}['__formPDF'];
							}
							
							
							$this->generateformPdf(4, $post, 'ContactFormSave', "contact_form_pdf.html");
							
							
							if(isset($_POST['generate_bericht_rootid'])){
							    $lmu_pmba_block = new Application_Form_FormBlockKeyValue();
							    $a=['rootid'=>$_POST['generate_bericht_rootid']];
							    $post['generate_bericht']=$a;
							    $lmu_pmba_block->InsertData($post, ['generate_bericht'], 'generate_bericht');
							}
                            if(isset($_POST['generate_bericht']) && $_POST['generate_bericht']){
                                $report_data=$post;
							
                                //save report along with pdf
                                $report_data['report_tags']=Hl7DocSend::get_pmdreporttag($clientid,$report_data['contact_form_type_id']);
                                $report_data['patname']=$this->view->lastname.", ".$this->view->firstname;
                                $report_data['patbirth']=$this->view->birth;
                                $report_data['pataddress']=$this->view->street.", ".$this->view->zip." ".$this->view->patcity;
                                $report_data['epid']=$this->view->epid;
                                $recipientData = $this->getRecipientData($post);
                                $report_data['mainaddress'] = $recipientData['mainaddress'];
                                $report_data['anrede'] = $recipientData['anrede'];
                                $report_data['nachrichtlich'] = (count($recipientData['nachrichtlich']) > 0) ? implode($recipientData['nachrichtlich'], '; ') : '';
							
                                $return_array=$this->generate_cf_report(0,$ipid, $report_data);
                                $signed_status=1;
                                if($post['generate_bericht_draft']){
                                    $signed_status=0;
                                }

                                Hl7DocSend::register_saved_report($ipid, $clientid, $post['contact_form_id'], $_POST['generate_bericht_rootid'], $return_array['pdfid'], $signed_status);

                            }
						}

						
						//ISPC-2882 ANcuta 22.02.2021
						if(isset($_POST['go_2_anlage2kinder']) && $_POST['go_2_anlage2kinder'] == 1){
						    
						    $this->_redirect(APP_BASE . "patientformnew/anlage2kinder?id=" . $_REQUEST['id'].'&cf_id='.$result);
						    return;
						}
						//--
						
						
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
					}
				}

				/* ---------------------------GET Form DETAILS -------------------------- */
				if(strlen($_REQUEST['cid']) > 0 || strlen($_REQUEST['ftid']) > 0)
				{
					$contact_form_details['date'] = date('d.m.Y', strtotime($contact_form_details['date']));
					$contact_form_details['start_date'] = date('d.m.Y', strtotime($contact_form_details['start_date']));
					$this->view->contact_form_details = $contact_form_details;


					
					/* ---------------GET BEFUND block DETAILS------------------ */
					$befund_block = new FormBlockBefund();
					$patient_befund = $befund_block->getPatientFormBlockBefund($ipid, $_REQUEST['cid']);
					$this->view->patient_befund_values = $patient_befund[0];
					//ISPC-2629 Carmen 11.08.2020
					$befundvalarr = $patient_befund[0];
					unset($befundvalarr['id']);
					unset($befundvalarr['ipid']);
					unset($befundvalarr['contact_form_id']);
					unset($befundvalarr['create_user']);
					unset($befundvalarr['change_user']);
					unset($befundvalarr['create_date']);
					unset($befundvalarr['change_date']);
					unset($befundvalarr['isdelete']);
					foreach($befundvalarr as $kr => $vr)
					{
						if($vr != '0')
						{
							if($vr != '')
							{
								$this->view->befund_hasvalues = 1;
								break;
							}
						}
					}
					//var_dump($befundvalarr); exit;
					//--
					/* --------------------- GET OLD EBM block DETAILS --------------------- */
					$ebm_block = new FormBlockEbm();
					$patient_ebm = $ebm_block->getPatientFormBlockEbm($ipid, $_REQUEST['cid']);
					$this->view->patient_ebm_values = $patient_ebm[0];
					/* --------------------------------------------------------------------- */

					/* --------------------- GET NEW EBMI block DETAILS --------------------- */
					$ebmi_block = new FormBlockEbmi();
					$patient_ebmi = $ebmi_block->getPatientFormBlockEbmi($ipid, $_REQUEST['cid']);
					$this->view->patient_ebmi_values = $patient_ebmi;
					/* --------------------------------------------------------------------- */

					/* --------------------- GET NEW EBMII block DETAILS --------------------- */
					$ebmii_block = new FormBlockEbmii();
					$patient_ebmii = $ebmii_block->getPatientFormBlockEbmii($ipid, $_REQUEST['cid']);
					$this->view->patient_ebmii_values = $patient_ebmii;
					/* --------------------------------------------------------------------- */
					/* ------------------  GET  XBDT EBMII block DETAILS TODO-1414  ------------------------ */
					$xbdt_ebmii_block = new FormBlockXbdtEbmii();
					$patient_xbdt_ebmii = $xbdt_ebmii_block->getPatientFormBlockXbdtEbmii($ipid, $_REQUEST['cid']);
					$this->view->patient_xbdt_ebmii_values = $patient_xbdt_ebmii;
					/* --------------------------------------------------------------------- */
					
					
					
					/* ------------------  GET  OLD  GOA block DETAILS --------------------- */
					$goa_block = new FormBlockGoa();
					$patient_goa = $goa_block->getPatientFormBlockGoa($ipid, $_REQUEST['cid']);
					$this->view->patient_goa_values = $patient_goa[0];
					/* ---------------------------------------------------------------------- */

					/* ------------------  GET  NEW GOAI block DETAILS --------------------- */
					$goai_block = new FormBlockGoai();
					$patient_goai = $goai_block->getPatientFormBlockGoai($ipid, $_REQUEST['cid']);
					$this->view->patient_goai_values = $patient_goai;
					/* -------------------------------------------------------------------------- */

					/* ------------------  GET  NEW GOAII block DETAILS ------------------------ */
					$goaii_block = new FormBlockGoaii();
					$patient_goaii_array = $goaii_block->getPatientFormBlockGoaii($ipid, $_REQUEST['cid']);

					$this->view->patient_goaii_values = $patient_goaii_array;
					/* ------------------------------------------------------------------------- */

					/* ------------------  GET  XBDT GOAII block DETAILS ISPC-1779  ------------------------ */
					$xbdt_goaii_block = new FormBlockXbdtGoaii();
					$patient_xbdt_goaii = $xbdt_goaii_block->getPatientFormBlockXbdtGoaii($ipid, $_REQUEST['cid']);
					$this->view->patient_xbdt_goaii_values = $patient_xbdt_goaii;
					/* ------------------------------------------------------------------------- */

					/* ------------------  GET  MEASURES block DETAILS ------------------------ */
					$measures_block = new FormBlockMeasures();
					$patient_measures = $measures_block->getPatientFormBlockMeasures($ipid, $_REQUEST['cid']);
					$this->view->patient_measures_values = $patient_measures;
					//ISPC-2629 Carmen 11.08.2020
					foreach($patient_measures as $vr)
					{
						if($vr != '0')
						{
							$this->view->measures_hasvalues = 1;
						}
					}
					//--
					/* ------------------------------------------------------------------------- */
					
					
					//ISPC-2487 Ancuta 27.11.2019
					/* ------------------  GET Leistung / Koordination  block DETAILS ------------------------ */
					$coordinator_actions_block = new FormBlockCoordinatorActions();
					$patient_coordinator_actions = $coordinator_actions_block->getPatientFormBlockCoordinatorActions($ipid, $_REQUEST['cid']);
					$this->view->patient_coordinator_actions_values = $patient_coordinator_actions;
					
					if(in_array("coordinator_actions", $allowed_blocks) && empty($_REQUEST['cid'])){
					    $last_patient_coordinator_actions = $coordinator_actions_block->get_filled_PatientFormBlockCoordinatorActions($ipid,true);
					    $this->view->last_patient_coordinator_actions_values = $last_patient_coordinator_actions;
					}
					
					if(in_array("coordinator_actions", $allowed_blocks)){
					    $history_patient_coordinator_actions = $coordinator_actions_block->get_filled_PatientFormBlockCoordinatorActions($ipid,false,true);
					    $this->view->history_patient_coordinator_actions  = $history_patient_coordinator_actions;
					    
					}
					/* ------------------------------------------------------------------------- */
                    // --
                    
					
					
					/* ------------------  GET  SGBXI actions block DETAILS ------------------------ */
					$sgbxiactions_block = new FormBlockSgbxiActions();
					$patient_sgbxiactions = $sgbxiactions_block->getPatientFormBlockSgbxiActions($ipid, $_REQUEST['cid']);

					$this->view->patient_sgbxi_actions_values = $patient_sgbxiactions;
					//ISPC-2629 Carmen 11.08.2020
					foreach($patient_sgbxiactions as $vr)
					{
						if($vr != '0')
						{
							$this->view->sgbxi_hasvalues = 1;
						}
					}
					//--
					/* ------------------------------------------------------------------------- */

					/* ------------------  GET  EBM BER block DETAILS ------------------------ */
					$ebmber_block = new FormBlockEbmBer();
					$patient_ebm_ber = $ebmber_block->getPatientFormBlockEbmBer($ipid, $_REQUEST['cid']);
					//ISPC-2629 Carmen 11.08.2020
					foreach($patient_ebm_ber as $kr => $vr)
					{
						if($vr != '0')
						{
							$this->view->ebm_ber_hasvalues = 1;
							break;
						}
					}
					//--
					$this->view->patient_ebm_ber_values = $patient_ebm_ber;
					/* ------------------------------------------------------------------------- */

					/* ---------------GET SGBV block DETAILS------------------ */
					$sgbv_block = new FormBlockSgbv();
					$patient_sgbv = $sgbv_block->getPatientFormBlockSgbv($ipid, $_REQUEST['cid']);
					$this->view->patient_sgbv = $patient_sgbv;

					/* ---------------GET Classification block DETAILS------------------ */
					$classification_block = new FormBlockClassification();
					$patient_classification = $classification_block->getPatientFormBlockClassification($ipid, $_REQUEST['cid']);
					$this->view->patient_classification_values = $patient_classification[0];
					//ISPC-2629 Carmen 11.08.2020
					$classvalarr = $patient_classification[0];
					unset($classvalarr['id']);
					unset($classvalarr['ipid']);
					unset($classvalarr['contact_form_id']);
					unset($classvalarr['create_user']);
					unset($classvalarr['change_user']);
					unset($classvalarr['create_date']);
					unset($classvalarr['change_date']);
					unset($classvalarr['isdelete']);
					foreach($classvalarr as $kr => $vr)
					{
						if($vr != '0')
						{
							if($vr != '')
							{
								$this->view->classif_hasvalues = 1;
								break;
							}
						}
					}
					//--
					/* ---------------GET BraSapv block DETAILS------------------ */
					$bra_sapv_block = new FormBlockBraSapv();
					$patient_bra_sapv = $bra_sapv_block->getPatientFormBlockBraSapv($ipid, $_REQUEST['cid']);
					$this->view->patient_bra_sapv_values = $patient_bra_sapv[0];
					
					/* ---------------GET Stuhlgang block DETAILS------------------ */
					$bm_block = new FormBlockBowelMovement();
					$patient_bm = $bm_block->getPatientFormBlockBowelMovement($ipid, $_REQUEST['cid']);
					$this->view->patient_bowel_movement_values = $patient_bm[0];
					
					//ISPC-2629 Carmen 11.08.2020
					$bowelvalarr = $patient_bm[0];
					unset($bowelvalarr['id']);
					unset($bowelvalarr['ipid']);
					unset($bowelvalarr['contact_form_id']);
					unset($bowelvalarr['create_user']);
					unset($bowelvalarr['change_user']);
					unset($bowelvalarr['create_date']);
					unset($bowelvalarr['change_date']);
					unset($classvalarr['isdelete']);
					foreach($bowelvalarr as $kr => $vr)
					{
						if($vr != '0')
						{
							if($vr != '')
							{
								if($vr != '0000-00-00 00:00:00' && $vr != '1970-01-01 00:00:00')
								{
									$this->view->bowelmov_hasvalues = 1;
									break;
								}
							}
						}
					}
					//--
					
					/* ---------------GET Hospiz I block DETAILS------------------ */
					$hzmedi_block = new FormBlockHospizmedi();
					$patient_hzmedi = $hzmedi_block->getPatientFormBlockHospizmedi($ipid, $_REQUEST['cid']);
					$this->view->patient_hzmedi = $patient_hzmedi;
					//print_r($this->view->patient_hzmedi); exit;
					
					/* ---------------GET Hospiz II block DETAILS------------------ */
					$hzimex_block = new FormBlockHospizimex();
					$patient_hzimex = $hzimex_block->getPatientFormBlockHospizimex($ipid, $_REQUEST['cid']);
					$this->view->patient_hzimex = $patient_hzimex[0];
					//print_r($this->view->patient_hzimex); exit;
					
					/* ---------------GET Hospiz II block DETAILS------------------ */
					$hzimex_block = new FormBlockHospizimex();
					$patient_hzimex = $hzimex_block->getPatientFormBlockHospizimex($ipid, $_REQUEST['cid']);
					$this->view->patient_hzimex = $patient_hzimex[0];
				   
					/* ---------------GET Fahrtzeit / Dokumentationszeit users block DETAILS------------------ */
					$drivetimedoc_block = new FormBlockDrivetimedoc();
					$drivetimedoc_users_array = $drivetimedoc_block->getPatientFormBlockDrivetimedoc($ipid, $_REQUEST['cid']);

					if(empty($_REQUEST['cid']))
					{
					    $this->view->drivetime_doc = $drivetime_doc_default; // Default route calculation :: ISPC-1624
					} 
					else
					{
    					$this->view->drivetime_doc =$drivetimedoc_users_array[0];
					}
					
					/* ---------------GET Additional users block DETAILS------------------ */
					$additional_users_block = new FormBlockAdditionalUsers();
					$patient_additional_users_array = $additional_users_block->getPatientFormBlockAdditionalUsers($ipid, $_REQUEST['cid']);
						
					$additonal_create_user = 0;
					foreach($patient_additional_users_array as $ksy => $pau)
					{
						$patient_additional_users[] = $pau['additional_user'];
						if($pau['creator'] == 1)
						{
							$additonal_create_user = $pau['additional_user'];
						}
					}

					if($additonal_create_user == 0)
					{
						$additonal_create_user = $contact_form_details['create_user'];
					}
					$this->view->additional_users = $patient_additional_users;

					if(empty($_REQUEST['cid']))
					{
						$form_create_user = $userid; // logged in user ;
					}
					else
					{
						$form_create_user = $additonal_create_user; // logged in user ;
					}

					$this->view->form_create_user = $form_create_user;

					/* ---------------GET FILES block DETAILS------------------ */
					$cf = new ContactForms();
					$child_forms = $cf->get_child_forms($contact_form_id, true);
					$child_forms[] = $contact_form_id;

					$fileupload = new PatientFileUpload();
					$contact_form_files = $fileupload->getContactFormFileData($ipid, $child_forms);
					$users_ids[] = '999999999';
					foreach($contact_form_files as $k_file => $v_file)
					{
						$users_ids[] = $v_file['create_user'];
					}
					$this->view->users_data = Pms_CommonData::getUsersData($users_ids);

					$this->view->form_files = $contact_form_files;
						
					/* ---------------GET Vital Signs Block DETAILS--------------------------- */
					if(empty($_REQUEST['cid']))
					{
						$vital_signs_arr['signs_date'] = date('d.m.Y',time());
						$this->view->vital_signs_arr = $vital_signs_arr;
					}
					else
					{
						$vital_signs = new FormBlockVitalSigns();
						$vital_signs_arr = $vital_signs->getPatientFormBlockVitalSigns($ipid, $_REQUEST['cid']);
					
						
						//ISPC-2629 Carmen 11.08.2020
						$vitalvalues = $vital_signs_arr[0];
						unset($vitalvalues['id']);
						unset($vitalvalues['ipid']);
						unset($vitalvalues['contact_form_id']);
						unset($vitalvalues['source']);
						unset($vitalvalues['signs_date']);
						unset($vitalvalues['temperature_dd']);
						unset($vitalvalues['create_user']);
						unset($vitalvalues['change_user']);
						unset($vitalvalues['create_date']);
						unset($vitalvalues['change_date']);
						unset($vitalvalues['isdelete']);
						foreach($vitalvalues as $vr)
						{
							if($vr != '0.00')
							{
								$this->view->vital_hasvalues = 1;
								break;
							}
						}
						//--						
						
							//$this->view->vital_signs_arr = $vital_signs_arr[0];
						
							$this->view->vital_signs_arr = $vital_signs_arr; //ISPC-2470 Carmen 29.10.2019
						
					
					}
					
				/* --------------------------------------------------------------------- */
				/* --------------------- GET IPOS block DETAILS --------------------- */
				if (in_array('kvno_visit_type', $allowed_blocks) ){
					$visit_type = new FormBlockVisitType();
					$visit_type_arr = $visit_type->getPatientFormBlockVisitType($ipid, $_REQUEST['cid']);
				
					$this->view->kvno_visit_type = $visit_type_arr[0];
					//ISPC-2629 Carmen 11.08.2020
					$kvnovalues = $visit_type_arr[0];;
					unset($kvnovalues['id']);
					unset($kvnovalues['ipid']);
					unset($kvnovalues['contact_form_id']);
					unset($kvnovalues['create_user']);
					unset($kvnovalues['change_user']);
					unset($kvnovalues['create_date']);
					unset($kvnovalues['change_date']);
					unset($kvnovalues['isdelete']);
					foreach($kvnovalues as $vr)
					{
						if($vr != '0')
						{
							$this->view->kvno_hasvalues = 1;
							break;
						}
					}
					//--
				}
					
				/* --------------------------------------------------------------------- */
				/* --------------------- GET IPOS block DETAILS --------------------- */
                if (in_array('ipos', $allowed_blocks) || in_array('lmu_visit', $allowed_blocks) ){
                    $ipos_block = new FormBlockIpos();
                    $patient_ipos = $ipos_block->getPatientFormBlockIpos($ipid, $_REQUEST['cid']);
                    $this->view->patient_ipos_values = $patient_ipos[0];
                    $lmu_iposadd_block = new FormBlockKeyValue();
                    $patient_iposadd_vals  = $lmu_iposadd_block->getPatientFormBlockKeyValues($ipid, $_REQUEST['cid'], false, 'ipos_add');
                    $this->view->patient_ipos_add_values = $patient_iposadd_vals;
                    }
				/* --------------------------------------------------------------------- */

                /* --------------------- GET TODOS block DETAILS --------------------- */
                if (in_array('todos', $allowed_blocks)) {
                	
                	$blockname = 'block_todos';
                	$blockname_val = array();
                	
                	if ( strlen($_REQUEST['cid'])>0 ) {
	                    $todos_block = new FormBlockTodos();
	                    $patient_todos = $todos_block->getPatientFormBlockTodos($ipid, $_REQUEST['cid']);
// 	                    $this->view->patient_todos_values = $patient_todos;
	                    $blockname_val['patient_todos_values'] = $patient_todos;
                	}                	                    
                    
//                     $blockname_val['todo_users'] = $this->get_nice_name_multiselect();
                    $blockname_val['todo_users'] = $todo_users;
                    $this->view->{$blockname} = $blockname_val; 
                }
                /* --------------------------------------------------------------------- */

                
                /* ------------ GET LMU_VISIT block DETAILS ------------ */
                if (in_array('lmu_visit', $allowed_blocks)){
                    $lmu_visit_block = new FormBlockLmuVisit();
                   	//ISPC-2683 Carmen 16.10.2020
                   	if($_REQUEST['cid'])
                   	{
	                    $patient_lmu_visit = $lmu_visit_block->getPatientFormBlockLmuVisit($ipid, $_REQUEST['cid'], false);
	                    $this->view->patient_lmu_visit_values = $patient_lmu_visit;
                   	}
                }
                /* --------------------------------------------------------------------- */                    
                    

                /* ------------------- GET LMU_pmba-BLOCKS DETAILS ------------------------*/
                if(strlen( $_REQUEST['cid']) > 0 ){
                    foreach ($pmba_blocks as $blockname)
                    {
                        if (in_array($blockname, $allowed_blocks)){
                            $lmu_pmba_block = new FormBlockKeyValue();
                            $patient_pmba_vals  = $lmu_pmba_block->getPatientFormBlockKeyValues($ipid, $_REQUEST['cid'], false, $blockname);
                            
                            //ISPC-2244
                            if ($blockname == "lmu_pmba_psysoz") {
                                $patient_pmba_vals['PatientAcp'] = $lmu_pmba_psysoz['PatientAcp'];
                            }
                            
                            if($blockname == 'lmu_pmba_psysoz'){
                                // IM-121 it is array, you can show/hide not only the whole form, but groups in form too
                                $lmu_pmba_psysoz_groups_empty = $this->check_lmu_pmba_psysoz_empty($patient_pmba_vals);
                                $patient_lmu_pmba_psysoz_value_empty = true;
                                foreach($lmu_pmba_psysoz_groups_empty as $key => $value){
                                    if(!$value){
                                        $patient_lmu_pmba_psysoz_value_empty = false;
                                        break;
                                    }
                                }
                                $patient_pmba_vals['patient_lmu_pmba_psysoz_value_empty'] = $patient_lmu_pmba_psysoz_value_empty;
                            }

                            $blockname = 'patient_'.$blockname.'_values';
                            $this->view->patient_lmu_pmba_psysoz_value_empty = $patient_lmu_pmba_psysoz_value_empty;
                            $this->view->$blockname = $patient_pmba_vals;
                        } 
                    }
                }
                /* ---------------------------------------------------- */                    
                    
					
                /* ------------------- GET BAYERN -BLOCKS DETAILS (from bayer doctor visit) -----------------*/
                if ( strlen($_REQUEST['cid'])>0 && in_array('bavaria_options', $allowed_blocks)){
                    $sp = Doctrine_Query::create()
                    ->select('*')
                    ->from('Sapsymptom')
                    ->where("ipid='" . $ipid . "'")
                    ->andwhere('visit_id = ?', $_REQUEST['cid'])
                    ->andwhere('visit_type = "contactform"')
                    ->andWhere('isdelete = 0')
                    ->orderBy('create_date ASC');
                    $sparr = $sp->fetchArray();
                    
                    $this->view->sparr = $sparr;
                    
                    if(is_array($sparr) && sizeof($sparr) > 0)
                    {
                        foreach($sparr as $sap)
                        {
                            $sapvalarr = split(",", $sap['sapvalues']);
                            $sapv_id = $sap['id'];
                        }
                    }
                    
                    $this->view->sapvalarr = $sapvalarr;
                    $this->view->sapv_id = $sapv_id;
                }
                /* ------------------------------------------------------------------------- */                    
 
                /* ------------ GET time_division block DETAILS ------------ */
                if ( strlen($_REQUEST['cid'])>0 && in_array('time_division', $allowed_blocks)){
                	$time_division_block = new FormBlockTimeDivision();
                	$time_division_get = $time_division_block->getPatientFormBlockTimeDivision($ipid, $_REQUEST['cid'], false, false);
                	$this->view->time_division_block = $time_division_get;
                }
                /* --------------------------------------------------------------------- */
                
                /* ------------ GET tracheostomy block DETAILS ------------ */
                $tracheostomy_get = array();
                if ( strlen($_REQUEST['cid'])>0 && in_array('tracheostomy', $allowed_blocks)){
                	$tracheostomy_block = new FormBlockTracheostomy();
                	$tracheostomy_get = $tracheostomy_block->getPatientFormBlockTracheostomy($ipid, $_REQUEST['cid'], false, false, 1);
                }elseif(in_array('tracheostomy', $allowed_blocks)){
                	$tracheostomy_block = new FormBlockTracheostomy();
                	$tracheostomy_get = $tracheostomy_block->getPatientFormBlockTracheostomy($ipid, false, false, false, 1);
                	          	
                }
                if ($tracheostomy_get[0]['last_change'] == '0000-00-00') {
                    //deleted date value
                    $tracheostomy_get[0]['last_change'] = date('Y-m-d');
                }
                $this->view->tracheostomy_block = $tracheostomy_get;
                
                /* --------------------------------------------------------------------- */

                /* --------------------- GET NEW SYMPTOME II block DETAILS --------------------- */
                 $client_symptoms_block = new FormBlockClientSymptoms();

                if(strlen($_REQUEST['cid']) > 0 && $_REQUEST['cid']!=0){
                    $patient_client_symptoms = $client_symptoms_block->getPatientFormBlockClientSymptoms($ipid, $_REQUEST['cid']);
                } else{
    			    $patient_client_symptoms = $client_symptoms_block->get_last_patients_client_symptoms($ipid,false);
                    
                }			     
                   $this->view->patient_client_symptoms = $patient_client_symptoms;
                 
                
                /* ------------ GET ventilation = Beatmung block DETAILS ------------ */
                $blockname = 'block_ventilation';
                $this->view->$blockname = array();
                
                if ( strlen($_REQUEST['cid'])>0 && in_array('ventilation', $allowed_blocks)){ 	
                   	$fbv = new FormBlockVentilation();
                   	$values = $fbv->get_by_ipid_and_formularid($ipid, $_REQUEST['cid']);
                  	
                   	$blockname = 'block_ventilation';
                   	$this->view->$blockname = $values;
                } else {
                   	$blockname = 'block_ventilation';
                   	$this->view->$blockname = array();
                }
                /* --------------------------------------------------------------------- */
                   
            
                /* ------------ GET invoice_condition = Abrechnung Niedersachsen ------------ */
                $blockname = 'block_invoice_condition';
                $blockname_val = array();

                $values = array(
                		'uncheckedValue'	=> 'show_on_invoice',
                		'checkedValue'		=> 'hide_on_invoice'
				);
                if ( strlen($_REQUEST['cid'])>0 && in_array('invoice_condition', $allowed_blocks)){
                	
                	if ( ! empty($contact_form_details['invoice_condition'])) {
                		$blockname_val = array(
                				"selected"	=> $contact_form_details['invoice_condition'],
                				"values"	=> $values
                		);
                	} else {
                		//get the default
                		$default = $contact_forms->getTable()->getDefaultValueOf("invoice_condition");
                		$blockname_val = array(
                				"selected"	=> $default,
                				"values" => $values
                		);
                	}   
                } else {
                	//get the default
               		$default = $contact_forms->getTable()->getDefaultValueOf("invoice_condition");
               		$blockname_val = array(
               				"selected"	=> $default,
               				"values" => $values
               		);                	
                }
                $this->view->{$blockname} = $blockname_val;
                /* --------------------------------------------------------------------- */
                
                /* ------------ GET treatment plan = Behandlungsplan block DETAILS - ISPC - 2277 ------------ */
                               
                if (in_array('treatment_plan', $allowed_blocks)){
                	$values = $this->_formblocktreatmentplan_GatherDetails($_REQUEST['cid']);
                	
                	//ISPC-2629 Carmen 11.08.2020
                	if(!empty($values))
                	{
	                	$valtreatpl = $values;
	                	unset($valtreatpl['id']);
	                	unset($valtreatpl['ipid']);
	                	unset($valtreatpl['contact_form_id']);
	                	unset($valtreatpl['create_user']);
	                	unset($valtreatpl['change_user']);
	                	unset($valtreatpl['create_date']);
	                	unset($valtreatpl['change_date']);
	                	unset($valtreatpl['isdelete']);
                	
	                	foreach($valtreatpl as $vr)
	                	{
	                		if(!empty($vr['value']))
	                		{
	                			$this->view->treatpl_hasvalues = '1';
	                			break;
	                		}
	                	}
                	
                		
                	}
                	//--
                	$fbt = new Application_Form_FormBlockTreatmentPlan();
                	$this->view->formblocktreatmentplan = $fbt->create_form_formblocktreatmentplan($values);
                }
                /* --------------------------------------------------------------------- */
                          
                          
                      
                /* --------------------------------------------------------------------- */
                /* --------------------------------------------------------------------- */
                /* --------------------------------------------------------------------- */
                /* --------------------------------------------------------------------- */
                /* --------------------------------------------------------------------- */
                
               // START Sync-Prefill
               // To prefill synced BA-Blocks a popup comes up and triggers a reload with the prefill-parameter.
               // If that happened, overwrite the blocks data with that from the sync
               if(isset($_GET['prefill_bassis'])) {
                   $prefill_id=intval($_GET['prefill_bassis']);
                   $data=SystemsSyncPackets::get_ba_data($prefill_id, 1);   //mark done after fetch data

                   $this->view->patient_lmu_pmba_body_values           = isset($data['lmu_pmba_body'])?$data['lmu_pmba_body']:$this->view->patient_lmu_pmba_body_values;
                   $this->view->patient_lmu_pmba_pain_values           = isset($data['lmu_pmba_pain'])?$data['lmu_pmba_pain']:$this->view->patient_lmu_pmba_pain_values;
                   $this->view->patient_lmu_pmba_wishes_values         = isset($data['lmu_pmba_wishes'])?$data['lmu_pmba_wishes']:$this->view->patient_lmu_pmba_wishes_values;
                   $this->view->patient_lmu_pmba_aufklaerung_values    = isset($data['lmu_pmba_aufklaerung'])?$data['lmu_pmba_aufklaerung']:$this->view->patient_lmu_pmba_aufklaerung_values;
                   $this->view->patient_lmu_pmba_psysoz_values         = isset($data['lmu_pmba_psysoz'])?$data['lmu_pmba_psysoz']:$this->view->patient_lmu_pmba_psysoz_values;
               
               }
               
               $this->view_prefill_widget="";
                $this->view->bassis_prefill ="0";// 0 - don not show sync modal; 1- show modal 
               
               if(  in_array('lmu_pmba_body',        $allowed_blocks)
                   && in_array('lmu_pmba_pain',        $allowed_blocks)
                   && in_array('lmu_pmba_wishes',      $allowed_blocks)
                   && in_array('lmu_pmba_aufklaerung', $allowed_blocks)
                   && in_array('lmu_pmba_psysoz',      $allowed_blocks)
               ){
                   //$this->view->prefill_widget=SystemsSyncPackets::get_ba_widget($ipid);

                   $this->view->bassis_prefill ="1";// show sync modal
                   $prefill_details = SystemsSyncPackets::get_ba_widget($ipid);
                   
                   if(!empty($prefill_details)){
                       $this->view->bassis_data = $prefill_details; 
                   } else{
                       $this->view->bassis_prefill ="0";
                   }
                   
               }
               // END Sync-Prefill
                   
                   
					/* ---------------------------SAVE - EDIT VISIT -------------------------- */
					if($this->getRequest()->isPost())
					{
					    
						/* -------------------------------  PDF EXPORT -------------------------- */
						if(strlen($_POST['pdfexport']) > 0 || strlen($_POST['generate_bericht_preview']) > 0 )
						{ 
							$post = $_POST;
							$post['user_details'] = $user_dateils;
                            $post['simpleblocks_html']=$this->view->simpleblocks;
							$post['contact_form_id'] = $_REQUEST['cid'];
							$post['contact_form_type_id'] = $form_type_id;
							$post['medications'] = $this->view->medications_pdf;
							$post['bedarfmedications'] = $this->view->bedarfsmedications_pdf;
                            $post['crisismedications'] = $this->view->crisismedications_pdf;
							$post['ivmedications'] = $this->view->ivmedications_pdf;
							$post['schmerzemedications'] = $this->view->schmerzemedications_pdf;
							$post['schmerze_comment'] = $post['cocktailDescription'];
							$post['schmerze_bolus'] = $post['bolus'];
							$post['schmerze_flussrate'] = $post['flussrate'];
							$post['schmerze_sperrzeit'] = $post['sperrzeit'];
							$post['sympt_view_select'] = $this->view->sympt_view_select;
							$post['sgbv_actions'] = $this->view->sgbv_actions;
							$post['patient_sgbv'] = $post['social_action'];
							$post['allowed_blocks'] = $this->view->allowed_blocks;
							$post['sapv_only_blocks'] = $this->view->sapv_only_blocks;
							$post['formtype_name'] = $this->view->formtype_name;
							$post['sonstiges'] = $_POST['comment_block'];
							$post['blocks_order'] = $this->view->blocks_order;
							$post['ebm_goa_blocks'] = $this->view->ebm_goa_blocks;
							
							$post['measures_blocks'] = $this->view->measures_blocks;
							$post['coordinator_actions_blocks'] = $this->view->coordinator_actions_blocks;//ISPC-2487 Ancuta 27.11.2019
							$post['sgbxi_actions_blocks'] = $this->view->sgbxi_actions_blocks;
							$post['ebm_ber_blocks'] = $this->view->ebm_ber_blocks;
							
							if(count($_POST['egblock']) == '0')
							{
								$post['egblock'] = array();
							}
							$post['egblock'] = $post['egblock'];

// 						additional_users
							$post['client_users'] = $this->view->client_users;
							$post['additional_users'] = $_POST['additional_users'];
							$post['symptomarr_zapv'] = $this->view->symptomarr_zapv;
							$post['symptomarr_zapv_complex'] = $this->view->symptomarr_zapv_complex;
							$post['zapv_details_items'] = $zapv_details_items;
							$post['servarr'] = $this->view->servarr;
							//ISPC-2470 Carmen 29.10.2019
							for($krv = 0; $krv < $this->view->vitalsign_colmax; $krv++)
							{
								$post['vital_signs_arr'][$krv]['signs_date'] = $post['signs_date'][$krv];
								$post['vital_signs_arr'][$krv]['signs_date_h'] = $post['signs_date_h'][$krv];
								$post['vital_signs_arr'][$krv]['signs_date_m'] = $post['signs_date_m'][$krv];
								$post['vital_signs_arr'][$krv]['blood_pressure_a'] = Pms_CommonData::str2num($post['blood_pressure_a'][$krv]);
								$post['vital_signs_arr'][$krv]['blood_pressure_b'] = Pms_CommonData::str2num($post['blood_pressure_b'][$krv]);
								$post['vital_signs_arr'][$krv]['puls'] = Pms_CommonData::str2num($post['puls'][$krv]);
								$post['vital_signs_arr'][$krv]['respiratory_frequency'] = Pms_CommonData::str2num($post['respiratory_frequency'][$krv]);
								$post['vital_signs_arr'][$krv]['temperature'] = Pms_CommonData::str2num($post['temperature'][$krv]);
								$post['vital_signs_arr'][$krv]['temperature_dd'] = Pms_CommonData::str2num($post['temperature_dd'][$krv]);
								$post['vital_signs_arr'][$krv]['oxygen_saturation'] = Pms_CommonData::str2num($post['oxygen_saturation'][$krv]);
								$post['vital_signs_arr'][$krv]['blood_sugar'] = Pms_CommonData::str2num($post['blood_sugar'][$krv]);
								$post['vital_signs_arr'][$krv]['weight'] = Pms_CommonData::str2num($post['weight'][$krv]);
								$post['vital_signs_arr'][$krv]['height'] = Pms_CommonData::str2num($post['height'][$krv]);
								$post['vital_signs_arr'][$krv]['head_circumference'] = Pms_CommonData::str2num($post['head_circumference'][$krv]);
								$post['vital_signs_arr'][$krv]['waist_circumference'] = Pms_CommonData::str2num($post['waist_circumference'][$krv]);
							}
							
							$post['patient_hzimex']['import'] =  $_POST['import'];
							$post['patient_hzimex']['export'] =  $_POST['export'];
							$post['medication_hp'] = $this->view->medication_hp;
							$post['patient_hzmedi'] = $_POST['hospiz_med'];
							$post['fahrtzeit1'] =  $_POST['fahrtzeit1'];
							$post['fahrtstreke_km1'] =  $_POST['fahrtstreke_km1'];
							$post['fahrt_doc1'] =  $_POST['fahrt_doc1'];
							$post['medication_block'] =  $_POST['medication_block'];
							$post['dosage_intervals'] =  $this->view->dosage_intervals;
							$post['client_medication_extra'] =  $this->view->client_medication_extra;
							$post['show_new_fields'] =  $show_new_fields;
// 							$post['patient_hzimex'] = $this->view->patient_hzimex;
							$post['karnofsky_arr'] = $print_karnofsky;
							$post['karnofsky_clinic_arr'] = $print_karnofsky_clinic;

							$post['patient_ipos_values']=$_POST['ipos'];
							$post['patient_pflegeipos_values']=$_POST['pflegeipos'];
							//print_r($_POST['ipos_add']); 
							if(!empty($_POST['ipos_add'])){
							    foreach($_POST['ipos_add'] as $line=>$line_details){
							        if(strlen($line_details['key']) > 0 ){
                                        $post['patient_ipos_add_values'][$line_details['key']] =$line_details['value']; 
							        }
							    }
							}else{
    							$post['patient_ipos_add_values']=$_POST['ipos_add'];
							}
							
							$post['patient_talkwith_values']=$_POST['talkwith'];
							$post['patient_beobachtungen_values']=$_POST['beobachtungen'];
							$post['patient_vitalzeichen_values']=$_POST['vitalzeichen'];
							$post['patient_zugaenge_values']=$_POST['zugaenge'];
							$post['patient_sonden_values']=$_POST['sonden'];
							$post['patient_harnableitung_values']=$_POST['harnableitung'];
							$post['patient_soap_values']=$_POST['soap'];
							$post['patient_soap_pflege']=$_POST['soap_pflege'];
							$post['patient_soap_soza']=$_POST['soap_soza'];
							
							$post['patient_procedures_values']=$_POST['procedures'];
							$post['patient_timedocumentation_values']=$_POST['timedocumentation'];
							
							$post['patient_post_todos_values']=$_POST['todos'];
							$post['patient_block_todos']= $this->view->block_todos;
							
							$post['patient_symp_verl_values']=$_POST['symp_verl'];
							$post['patient_talkback_values']=$_POST['talkback'];
							$post['patient_lmu_physmed_documentation_values']=$_POST['lmu_physmed_documentation'];
							$post['patient_lmu_psydoc_values']=$_POST['lmu_psydoc'];
							$post['patient_lmu_spirit_values']=$_POST['lmu_spirit'];
							$post['patient_lmu_phone_values']=$_POST['lmu_phone'];
							$post['patient_lmu_psy_contacttype_values']=$_POST['lmu_psy_contacttype'];
							$post['patient_lmu_physmed_contacttype_values']=$_POST['lmu_physmed_contacttype'];
							$post['patient_lmu_documentation_values']=$_POST['lmu_documentation'];
							$post['patient_lmu_visit_values']=$_POST['lmu_visit'];
							$post['patient_lmu_nursing_talkcontents_values']=$_POST['lmu_nursing_talkcontents'];
							$post['patient_lmu_doc_talkcontents_values']=$_POST['lmu_doc_talkcontents'];
							$post['patient_lmu_pharmaschulung_values']=$_POST['lmu_pharmaschulung'];
							$post['patient_lmu_pharmaambulant_values']=$_POST['lmu_pharmaambulant'];
							$post['patient_lmu_pharmafamilydoc_values']=$_POST['lmu_pharmafamilydoc'];
							$post['patient_lmu_pharmafamilypharmacy_values']=$_POST['lmu_pharmafamilypharmacy'];
							$post['patient_lmu_sapvleistung_values']=$_POST['sapvleistung'];
							$post['patient_lmu_bayernleistung_values']=$_POST['bayernleistung'];
							foreach ($pmba_blocks as $blockname)
							{
							    $post['patient_'.$blockname.'_values'] = $_POST[$blockname];
							}
							
							$post['patient_lmu_empfehlung_values']=$_POST['lmu_empfehlung'];
							$post['patient_lmu_pharmatalk_values']=$_POST['lmu_pharmatalk'];
							
							
							$post['religions'] = $this->view->religions;
							
							
 
							if(strlen($_REQUEST['cid']) == 0)
							{
							    $post['symptom'] = $post['symptom'];
							}
							else
							{
							    foreach($post['checkbox'] as $key => $value)
							    {
							        $post['symptom'] = $value;
							    }
							}
							

							// goa options
							/* $post['xbdt_goaii'] = $this->view->xbdt_goaii;
							$post['xbdt_actions'] = $_POST['xbdt_actions'];
							if(strtotime(date("d.m.Y",strtotime($_POST['date']))) < strtotime($upload_date)){
							    $post['show_block'] = "goaii";
							} else{
							    $post['show_block'] = "xbdt_goaii";
							}
							$p_blocks_settings_array = $blocks_settings->get_blocks_settings($clientid,date("Y-m-d",strtotime($_POST['date'])));
								
							foreach($p_blocks_settings_array as $key => $value)
							{
							    if($value['block'] == "goaii"){
							        $p_settings_array[$value['block']][] = $value;
							    }
							}
							$post['ebm_goa_blocks']['goaii'] = $p_settings_array[$value['block']]; */
							
// 							clientsymptoms
							$post['clientsymptoms']= $_POST['clientsymptoms'];
							$post['client_syms']= $this->view->client_sym_all_details;
							
							
							$post['show_head_circumference']= $this->view->show_head_circumference;
							$post['timed_scheduled_medications']= $this->view->timed_scheduled_medications;
 
							// ISPC-2176
							$post['packaging_array']= $this->view->packaging_array;
							
							//ispc-2291
							$post['clientModules'] = $this->view->clientModules;
							$post['block_puncture'] = $this->view->block_puncture['__formPDF'];
							$post['block_infusion'] = $this->view->block_infusion['__formPDF'];
							$post['block_infusiontimes'] = $this->view->block_infusiontimes['__formPDF'];
							$post['block_adverseevents'] = $this->view->block_adverseevents['__formPDF'];
							
							//ISPC-2387
							$post['block_visitclasification'] = $this->view->block_visitclasification['__formPDF'];
							
							//ISPC-2488 Lore 22.11.2019
							$post['block_delegation'] = $this->view->block_delegation['__formPDF'];
							
							//ISPC-2454
							$post['custom_blocks_allowed'] = $custom_blocks_allowed_abbrev;
							
							foreach($custom_blocks_allowed_abbrev as $kb => $vb)
							{
								$blockname = 'block_'.$vb;
								$post[$blockname] = $this->view->{$blockname}['__formPDF'];
							}	
							$post['vitalsign_colmax'] = $this->view->vitalsign_colmax; //ISPC-2470 Carmen 29.10.2019
							
							//ISPC-2508 Carmen 22.01.2020
							// Ancuta added to Clinic ISPC (CISPC)  on 18.03.2020
							$post['block_artificial_entries_exits'] = $this->view->block_artificial_entries_exits['__formPDF'];
							//echo $post['block_artificial_entries_exits']; exit;
							
							//ISPC-2671 Lore 07.09.2020
							$post['block_patient_acp'] = $this->view->block_patient_acp['__formPDF'];
							
							//ISPC-2668 Lore 11.09.2020
							$post['block_patient_ms'] = $this->view->block_patient_ms['__formPDF'];
							
							//ISPC-2666 Lore 16.09.2020
							$post['block_patient_hi'] = $this->view->block_patient_hi['__formPDF'];
							
							//ISPC-2667 Lore 21.09.2020
							$post['block_patient_ci'] = $this->view->block_patient_ci['__formPDF'];
							
							//ISPC-2669 Lore 23.09.2020
							$post['block_patient_hc'] = $this->view->block_patient_hc['__formPDF'];
							
							//ISPC-2773 Lore 14.12.2020
							$post['block_patient_familyinfo'] = $this->view->block_patient_familyinfo['__formPDF'];
							
							//ISPC-2776 Lore 15.12.2020
							$post['block_patient_childrendiseases'] = $this->view->block_patient_childrendiseases['__formPDF'];
							
							//ISPC-2788 Lore 08.01.2021
							$post['block_patient_nutritioninfo'] = $this->view->block_patient_nutritioninfo['__formPDF'];
							
							//ISPC-2787 Lore 11.01.2021
							$post['block_patient_stimulatorsinfo'] = $this->view->block_patient_stimulatorsinfo['__formPDF'];
							
							//ISPC-2790 Lore 12.01.2021
							$post['block_patient_finalphase'] = $this->view->block_patient_finalphase['__formPDF'];
							
							//ISPC-2791 Lore 13.01.2021
							$post['block_patient_excretioninfo'] = $this->view->block_patient_excretioninfo['__formPDF'];
							
							//ISPC-2792 Lore 15.01.2021
							$post['block_patient_personalhygiene'] = $this->view->block_patient_personalhygiene['__formPDF'];
							
							//ISPC-2793 Lore 18.01.2021
							$post['block_patient_comm_employ'] = $this->view->block_patient_comm_employ['__formPDF'];
							
							//ISPC-2670 Lore 24.09.2020
							$post['block_patient_evn'] = $this->view->block_patient_evn['__formPDF'];
							
							//ISPC-2673 Lore 25.09.2020
							$post['block_resources'] = $this->view->block_resources['__formPDF'];
							
							//IM-4
							$post['block_careprocessclinic'] = $this->view->block_careprocessclinic['__formPDF'];
							//IM-16
							$post['block_timedocumentationclinic'] = $this->view->block_timedocumentationclinic['__formPDF'];
							//IM-26
							$post['block_treatmentplanclinic'] = $this->view->block_treatmentplanclinic['__formPDF'];
							//IM-46
							$post['block_talkcontent'] = $this->view->block_talkcontent['__formPDF'];
							//IM-47
							$post['block_jobbackgroundclinic'] = $this->view->block_jobbackgroundclinic['__formPDF'];
							//IM-48
							$post['block_dischargeplanningclinic'] = $this->view->block_dischargeplanningclinic['__formPDF'];
							//IM-51
							$post['block_screeningdepressionclinic'] = $this->view->block_screeningdepressionclinic['__formPDF'];
							//IM-56
							$post['block_talkwith'] = $this->view->block_talkwith['__formPDF'];
							//ISPC-2663 Carmen 02.09.2020
							$post['block_talkwithsingleselection'] = $this->view->block_talkwithsingleselection['__formPDF'];
							//--
							//IM-65
							$post['block_palliativsupport'] = $this->view->block_palliativsupport['__formPDF'];
							$post['patient_block_palliativsupport_values'] = $_POST['FormBlockPalliativSupport'];
							//IM-66
							$post['block_palliativassessment'] = $this->view->block_palliativassessment['__formPDF'];
							$post['patient_block_palliativassessment_values'] = $_POST['FormBlockPalliativAssessment'];
							//IM-87
							$post['block_clinicsoap'] = $this->view->block_clinicsoap['__formPDF'];
							//IM-91
							$post['block_clinicdiagnosis'] = $this->view->block_clinicdiagnosis['__formPDF'];
							//IM-92
							$post['block_clinicshift'] = $this->view->block_clinicshift['__formPDF'];
							
							$post['block_report_recipient'] = $this->view->report_recipient['__formPDF'];
							$post['pflegeba'] = $this->view->pflegeba['__formPDF'];
							$post['coordinationtime'] = $this->view->coordinationtime['__formPDF'];
							
							//IM-25
							$post['auto_add_blocks']=$this->view->auto_add_blocks;
							foreach($this->view->auto_add_blocks as $block){
							    $post[$block] = $this->view->{$block}['__formPDF'];
							}
							if(strlen($_POST['pdfexport']) > 0) {
								$this->generateformPdf(3, $post, 'ContactForm', "contact_form_pdf.html");
							}else{
							    $report_data=$post;
							    $report_data['patname']=$this->view->lastname.", ".$this->view->firstname;
							    $report_data['patbirth']=$this->view->birth;
							    $report_data['pataddress']=$this->view->street.", ".$this->view->zip." ".$this->view->patcity;
							    $report_data['epid']=$this->view->epid;
							    $recipientData = $this->getRecipientData($post);
							    $report_data['mainaddress'] = $recipientData['mainaddress'];
							    $report_data['anrede'] = $recipientData['anrede'];
							    $report_data['nachrichtlich'] = (count($recipientData['nachrichtlich']) > 0) ? implode($recipientData['nachrichtlich'], '; ') : '';
							    //send preview to browser
							    $this->generate_cf_report(1,$ipid, $report_data);
							}
						}
					}
				}
			}
			else
			{
				$this->_helper->viewRenderer('contactformempty');
				//load contact forms types
				$form_types = new FormTypes();
				$contact_form_types = $form_types->get_form_types($clientid);

				if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
				{
					$contact_form_types_final = $contact_form_types;
				}
				else
				{
					foreach($contact_form_types as $k_form_type => $v_form_type)
					{
						if(array_key_exists($v_form_type['id'], $contact_form_type_perms) && $contact_form_type_perms[$v_form_type['id']]['value'] == '1')
						{
							$contact_form_types_final[] = $v_form_type;
						}
					}
				}

				if(!empty($contact_form_types_final) && count($contact_form_types_final) == '1')
				{
					$contact_form_types_final  = array_values($contact_form_types_final); //     TODO-1486 Can not get into the Kontaktformular( 06.04.2018)
					
					$this->_redirect(APP_BASE . 'patientform/contactform?id=' . $_REQUEST['id'] . '&ftid=' . $contact_form_types_final[0]['id']);
					exit;
				}

				$this->view->client_form_types = $contact_form_types_final;
			}
			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
		}

		
		/**
		 * builds array of recipient data for report
		 *
		 * @param $post array post data
		 * @return array
		 */
		private function getRecipientData($post)
		{
		    $retValue = array();
		    $retValue['mainaddress'] = (isset($post['FormBlockReportRecipient']['report_recipient']['report_recipient_mainaddress'])) ? $post['FormBlockReportRecipient']['report_recipient']['report_recipient_mainaddress'] : '';
		    $retValue['anrede'] = (isset($post['FormBlockReportRecipient']['report_recipient']['report_recipient_anrede'])) ? $post['FormBlockReportRecipient']['report_recipient']['report_recipient_anrede'] : '';
		    $retValue['nachrichtlich'] = array();
		    if (isset($post['FormBlockReportRecipient']['report_recipient']['addrs']) && is_array($post['FormBlockReportRecipient']['report_recipient']['addrs'])) {
		        foreach ($post['FormBlockReportRecipient']['report_recipient']['addrs'] as $addr) {
		            if ($addr['check'] == 1) {
		                $retValue['nachrichtlich'][] = str_replace(';', ' ', $addr['address']);
		            }
		            
		        }
		    }
		    return $retValue;
		    
		}
		
		
		
		
		
		function dischargeplanningAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
// 			$this->view->patid = $decid;
			$this->view->patid = $_GET['id'];

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ------------------------------------------------ */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();

			/* -------------------PATIENT Data--------------------------------------- */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->phone = $patientarr['phone'];
			$this->view->epid = strtoupper($epid);

			/* ---------------------------Set default date for visit-------------------------- */
			$plan['start_time'] = date('H:i');
			$plan['end_time'] = date('H:i', strtotime('+45 minutes'));
			$plan['plan_date'] = date('d.m.Y');

			/* --------------------------- USER - User details -------------------------- */
			$user = Doctrine::getTable('User')->find($logininfo->userid);

			if($user)
			{
				$uarray = $user->toArray();
				$plan['user_details'] = $uarray['user_title'] . ' ' . $uarray['last_name'] . ', ' . $uarray['first_name'];
				$plan['user_phone'] = $uarray['phone'];
			}

			/* --------------------------- CLIENT details --  address-------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$client_address = $clientdata[0]['street1'] . ',' . $clientdata[0]['postcode'] . ',' . $clientdata[0]['city'];

			/* ---------------------------Get User details --  address-------------------------- */
			$userdata = Pms_CommonData::getUserData($logininfo->userid);
			$user_address = $userdata[0]['street1'] . ',' . $userdata[0]['zip'] . ',' . $userdata[0]['city'];

			if($userdata[0]['km_calculation_settings'] == "user")
			{
				$s = $user_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "client")
			{
				$s = $client_address;
			}
			else if($userdata[0]['km_calculation_settings'] == "disabled")
			{
				$s = "";
			}

			/* --------------------------- PATIENT -- active location -------------------------- */
			$ploc = new PatientLocation();
			$plocarray = $ploc->getActiveLocationPatInfo($ipid);

			if(!empty($plocarray))
			{
				if(!empty($plocarray[0]['station']))
				{
					$plan['location'] = $plocarray[0]['station']['station'];
					$plan['location_phone'] = $plocarray[0]['station']['phone1'];
					$plan['location_fax'] = $plocarray[0]['station']['phone2'];
				}
				else
				{
					$plan['location'] = $plocarray[0]['location'];
					$plan['location_phone'] = $plocarray[0]['phone1'];
					$plan['location_fax'] = $plocarray[0]['fax'];
				}
			}

			if(empty($plocarray) || $plocarray[0]['location_type'] == '5')
			{
				//if at home grab address from patient details
// 				$plocarray[0] = $patientmaster->getMasterData($decid, 0);
				$plocarray[0] = $patientmaster->get_patientMasterData();
				$plocarray[0]['street'] = $plocarray[0]['street1'];
			}

			/* --------------------------- PATIENT -- Driving time  -------------------------- */
			$f = $plocarray[0]['street'] . ',' . $plocarray[0]['zip'] . ',' . $plocarray[0]['city'];

			if(strlen($f) > 2 && strlen($s) > 2)
			{
				$route = Pms_CommonData::getRouteLength($s, $f);
				$plan['driving_distance'] = substr($route['length'], 0, -3);
				$plan['driving_time'] = $route['duration'];

				// TODO-1211
				$route_error = 0 ;
				if(empty($route['duration']) && $route['duration'] !== false ){
					$route_error = 1 ;
				}
				$this->view->route_error = $route_error;
			}

			/* --------------------------- PATIENT - Angehörigen - Contact person -------------------------- */
			$familydegree = new FamilyDegree();
			$status = $familydegree->getFamilyDegrees(1);

			$this->view->familydegree = $status;
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);

			/* --------------------------- PATIENT - Pflegedienst - Nursing ------------------------------- */
			$pat_pfl = new PatientPflegedienste();
			$existing_pflege = $pat_pfl->getPatientFirstPflegediensteDetails($ipid);

			if(!empty($existing_pflege))
			{
				$plan['existing_care_service'] = 1;
				$plan['existing_care_service_text'] = $existing_pflege['nursing'];
				$plan['existing_care_service_text'] .= "\n" . $existing_pflege['last_name'] . ", " . $existing_pflege['first_name'];
				$plan['existing_care_service_text'] .= "\n" . $existing_pflege['street1'];
				$plan['existing_care_service_text'] .= "\n" . $existing_pflege['zip'] . " " . $existing_pflege['city'];
			}

			/* --------------------------- PATIENT - HILFSMITTEL  - Aid ---------------------------------- */
			$st = new Stammdatenerweitert();
			$weit = $st->getStammdatenerweitert($ipid);

			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			$hilfsmittel_name = array('1' => "O2", '2' => "Toilettensitz", '3' => "Pflegebett", '4' => "Rollstuhl", "5" => "Rollator", "6" => "Nachtstuhl", "7" => "Wechseldruckmatratze", "8" => "Pumpe");

			if($weit[0]['hilfsmittel'] != '0' && $weit[0]['hilfsmittel'] != "")
			{
				$hilfsmittel_values = explode(',', $weit[0]['hilfsmittel']);

				foreach($hilfsmittel_values as $key => $value)
				{
					$hilfsmittel_arr[$value]['aid_item'] = $hilfsmittel_name[$value];
				}
			}

			if($pat_moreinfo[0]['pumps'] == '1')
			{
				$hilfsmittel_arr[8]['aid_item'] = $hilfsmittel_name[8]; // force to get Pumpe
			}

			$plan['existing_aid'] = $hilfsmittel_arr;

			/* --------------------------- PATIENT - Pflegestufe - care Level -------------------------- */
			$pms = new PatientMaintainanceStage();
			$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);

			if($pat_pms[0]['stage'] > 0 && !empty($pat_pms[0]['stage']) && $pat_pms[0]['stage'] > 0)
			{
				$this->view->stage = $pat_pms[0]['stage'];
			}
			else
			{
				$this->view->stage = "--";
			}
			$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
			$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
			$this->view->carelevellist = $grid->renderGrid();

			/* --------------------------- PATIENT - Discharge Planning -------------------------- */
			$planning = new PatientDischargePlanning();
			$plan_details = $planning->get_discharge_planning($ipid);

			if(!empty($plan_details))
			{
				$plan = $plan_details;
				$plan_id = $plan_details['id'];
			}

			$planning_aid = new PatientDischargePlanningAid();
			$plan_aid_details = $planning_aid->get_discharge_planning_aid($ipid);

			if(!empty($plan_aid_details))
			{
				foreach($plan_aid_details as $ko => $aid_va)
				{
					$plan['existing_aid'][$aid_va['aid_item_id']] = $aid_va;
				}
			}

			ksort($plan['existing_aid']);
			$last_key = end(array_keys($plan['existing_aid']));

			$plan['zkey'] = $last_key + 10;
			$this->view->plan = $plan;

			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$discharge_planning = new Application_Form_PatientDischargePlanning();

				if(!$_POST['pdfexport'])
				{
					if(strlen($_POST['save']) > 0 && empty($plan_id))
					{
						// new plan
						/* -------------------SAVE - Discharge Planning--------------------------------------- */
						$discharge_planning_result = $discharge_planning->InsertData($post['plan']);

						/* -------------------SAVE - Pflegedienst--------------------------------------- */
						if(!empty($post['pflege']))
						{
							$insert = 0;
							foreach($post['pflege'] as $label => $inputs)
							{
								if(!empty($inputs))
								{
									$insert += 1;
								}
								else
								{
									$insert += 0;
								}
							}

							if($insert > 0)
							{
								$pflegedienst_name = $post['plan']['another_service_text'];
								$pflege_array = $post['pflege'];
								$docform = new Application_Form_Pflegedienstes();
								$docinfo = $docform->InsertFromDischargePlanning($pflege_array, $pflegedienst_name);

								$post['pflegeid'] = $docinfo->id;

								$pfl_cl = new PatientPflegedienste();
								$pfl_cl->ipid = $ipid;
								$pfl_cl->pflid = $post['pflegeid'];
								$pfl_cl->pflege_comment = $post['pflege']['comment'];
								$pfl_cl->save();
							}
						}

						/* -------------------SAVE - Supplier--------------------------------------- */
						if(!empty($post['supplier']))
						{
							$docform = new Application_Form_Supplies();

							$insert = 0;
							foreach($post['supplier'] as $label => $values)
							{
								foreach($values as $sl => $inputs)
								{
									if(!empty($inputs))
									{
										$insert += 1;
									}
									else
									{
										$insert += 0;
									}
								}
							}

							if($insert > 0)
							{
								$supplier_ids = array();
								$supplier_names = array();
								foreach($post['supplier'] as $aid_key => $supplier_values)
								{
									$supplier_idv[$aid_key] = $supplier_values['supplier_id'];

									if(!empty($supplier_values['supplier_id']))
									{

										if(!in_array($supplier_idv[$aid_key], $supplier_ids))
										{
											array_push($supplier_ids, $supplier_idv[$aid_key]);

											if(!empty($supplier_values['supplier']))
											{
												$supp_info = $docform->InsertFromDischargePlanning($supplier_values);
												if($supp_info)
												{
													$pfl_cl = new PatientSupplies();
													$pfl_cl->ipid = $ipid;
													$pfl_cl->supplier_id = $supp_info;
													$pfl_cl->supplier_comment = $supplier_values['comment'];
													$pfl_cl->save();
												}
											}
										}
									}
									else
									{
										if(!in_array($supplier_values['supplier'], $supplier_names))
										{
											array_push($supplier_names, $supplier_values['supplier']);

											if(!empty($supplier_values['supplier']))
											{
												$supp_info = $docform->InsertFromDischargePlanning($supplier_values);
												if($supp_info)
												{
													$pfl_cl = new PatientSupplies();
													$pfl_cl->ipid = $ipid;
													$pfl_cl->supplier_id = $supp_info;
													$pfl_cl->supplier_comment = $supplier_values['comment'];
													$pfl_cl->save();
												}
											}
										}
									}
								}
							}
						}
						/* -------------------SAVE - AID--------------------------------------- */
						if(!empty($post['aid']))
						{

							$aid_form = new Application_Form_PatientDischargePlanningAid();

							$insert = 0;
							foreach($post['aid'] as $label => $values)
							{
								foreach($values as $sl => $inputs)
								{
									if(!empty($inputs))
									{
										$insert += 1;
									}
									else
									{
										$insert += 0;
									}
								}
							}

							if($insert > 0)
							{
								$aid_info = $aid_form->InsertData($post, $discharge_planning_result);
							}
						}

						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
					else if(strlen($_POST['save']) > 0 && !empty($plan_id))
					{
						//edit existing plan
						/* -------------------EDIT - Discharge Planning--------------------------------------- */
						$discharge_planning = $discharge_planning->UpdateData($post['plan'], $plan_id);

						/* -------------------SAVE - Supplier--------------------------------------- */
						if(!empty($post['supplier']))
						{
							$docform = new Application_Form_Supplies();

							$insert = 0;
							foreach($post['supplier'] as $label => $values)
							{
								foreach($values as $sl => $inputs)
								{
									if(!empty($inputs))
									{
										$insert += 1;
									}
									else
									{
										$insert += 0;
									}
								}
							}

							if($insert > 0)
							{
								$supplier_ids = array();
								$supplier_enames = array();
								foreach($post['supplier'] as $aid_key => $supplier_values)
								{

									if(!in_array($supplier_values['supplier'], $supplier_enames))
									{
										array_push($supplier_enames, $supplier_values['supplier']);


										if($supplier_values['supplier'] != '')
										{
											if($supplier_values['first_name'] != '' || $supplier_values['last_name'] != '')
											{
												$supp_info = $docform->InsertFromDischargePlanning($supplier_values);
												if($supp_info)
												{
													$pfl_cl = new PatientSupplies();
													$pfl_cl->ipid = $ipid;
													$pfl_cl->supplier_id = $supp_info;
													$pfl_cl->supplier_comment = $supplier_values['comment'];
													$pfl_cl->save();
												}
											}
										}
									}
								}
							}
						}

						/* -------------------SAVE - Pflegedienst--------------------------------------- */
						if(!empty($post['pflege']))
						{
							$insert = 0;
							foreach($post['pflege'] as $label => $inputs)
							{
								if(!empty($inputs))
								{
									$insert += 1;
								}
								else
								{
									$insert += 0;
								}
							}

							if($insert > 0)
							{
								$pflegedienst_name = $post['plan']['another_service_text'];
								$pflege_array = $post['pflege'];
								$docform = new Application_Form_Pflegedienstes();
								$docinfo = $docform->InsertFromDischargePlanning($pflege_array, $pflegedienst_name);

								$post['pflegeid'] = $docinfo->id;

								$pfl_cl = new PatientPflegedienste();
								$pfl_cl->ipid = $ipid;
								$pfl_cl->pflid = $post['pflegeid'];
								$pfl_cl->pflege_comment = $post['pflege']['comment'];
								$pfl_cl->save();
							}
						}

						/* -------------------SAVE - AID--------------------------------------- */
						if(!empty($post['aid']))
						{

							$aid_form = new Application_Form_PatientDischargePlanningAid();
							$insert = 0;
							foreach($post['aid'] as $label => $values)
							{
								foreach($values as $sl => $inputs)
								{
									if(!empty($inputs))
									{
										$insert += 1;
									}
									else
									{
										$insert += 0;
									}
								}
							}

							if($insert > 0)
							{
								$aid_info = $aid_form->InsertData($post, $plan_id);
							}
						}

						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}
				else if(strlen($_POST['pdfexport']) > 0)
				{
					$post['stage'] = $this->view->stage;
					$this->generateformPdf(3, $post, 'DischargePlanning', "dischargeplanning_pdf.html");
				}
			}
		}

		
		/**
		 * Feature "Dischargeplanning for clinic" (IM-3).
		 * Original created for ISPC Clinic.
		 *
		 * Enable the Feature:
		 * Create the Menu "Entlassplanung":
		 * Administration -> Navigation – Patient -> Formulare
		 *
		 * Call the Feature: patientcourse -> Formulare -> Entlassplanung.
		 * Maria:: Migration CISPC to ISPC 22.07.2020
		 */
		function dischargeplanningclinicAction()
		{
		    $decid = Pms_Uuid::decrypt($_GET['id']);
		    $ipid = Pms_CommonData::getIpid($decid);
		    $this->view->epid = Pms_Uuid::encrypt($decid);
		    
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    
		    /* ----------------------Tab menus START-------------------------- */
		    $patientmaster = new PatientMaster();
		    $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
		    
		    $tm = new TabMenus();
		    $this->view->tabmenus = $tm->getMenuTabs();
		    
		    
		    //get the user info
		    $users = User::getUsersNiceName(array($logininfo->userid));
		    $this->view->username = $users[$logininfo->userid]['nice_name'];
		    
		    /* ----------------------init User-Request Info-------------------------- */
		    $modus = array();
		    
		    $modus['SUBMIT'] = $this->translate('submit');
		    $modus['FINISH'] = $this->translate('finish');
		    $modus['PREVIEW'] = $this->translate('preview_without_letterhead');
		    $modus['LETTERHEAD'] = $this->translate('preview_with_letterhead');
		    
		    
		    $this->view->modus = $modus;
		    
		    /* ----------------------init Layout-------------------------- */
		    $this->view->layout = 'HTML';
		    
		    $listsmodel = new Selectboxlist();
		    $simpleformmodel = new FormGenericSimpleForm();
		    
		    if ($this->getRequest()->isPost()) {
		        
		        $values = array(
		            'entlassplanung' => $_POST['entlassplanung'],
		            'entlassvorbereitung' => $_POST['entlassvorbereitung'],
		            'ansprechpartner' => $_POST['ansprechpartner'],
		            'entlassziele' => $_POST['entlassziele'],
		        );
		        
		        $vals = json_encode($values);
		        
		        if ($_POST['modus'] === $modus['SUBMIT'] || $_POST['modus'] === $modus['FINISH']) {
		            
		            $form = new FormGenericSimpleForm();
		            $form->formname = FormGenericSimpleForm::DISCHARGEPLANNING_CLINIC;
		            $form->ipid = $ipid;
		            $form->json1 = $vals;
		            $form->save();
		            
		            if (intval($_POST['fid']) > 0) {
		                $find = Doctrine::getTable('FormGenericSimpleForm')->findOneById(intval($_POST['fid']));
		                $find->isdelete = 1;
		                $find->save();
		            }
		        }
		        
		        //it's all done here for Modus "Submit"
		        if ($_POST['modus'] === $modus['SUBMIT']) {
		            $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_POST['epid']);
		        }
		        
		        //set the print-layout
		        $this->_helper->layout->setLayout('layout_ajax');
		        $this->_helper->viewRenderer->setNoRender();
		        $this->view->layout = 'PDF';
		        $this->view->data = $values; //set the view data for print
		        
		        $patientinfo = array();
		        $masterdata = $patientmaster->getMasterData($decid, 0);
		        $patientinfo['street'] = $masterdata ['street1'];
		        $patientinfo['city'] = $masterdata['zip'] . ' ' . $masterdata['city'];
		        $patientinfo['patient_name'] = $masterdata['first_name'] . " " . $masterdata['last_name'];
		        
		        $this->view->patientinfo = $patientinfo;
		        $this->view->logo = '';
		        //set page background for a defined page key in $background_pages array
		        if ($_POST['modus'] === $modus['LETTERHEAD'] || $_POST['modus'] === $modus['FINISH']) {
		            $bg_image = Pms_CommonData::getPdfBackground($clientid, 73);
		            if ($bg_image !== false) {
		                $bg_image_path = PDFBG_PATH . '/' . $clientid . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
		                if (is_file($bg_image_path)) {
		                    $this->view->logo = $bg_image_path;
		                }
		            }
		        }
		        
		        $rend = $this->view->render('patientform/dischargeplanningclinic.html');
		        
		        $footer_text = $this->view->translate('[Page %s from %s]');
		        $options = array(
		            "orientation" => "P",
		            "customheader" => "Entlassplan",
		            "footer_type" => "1 of n",
		            "footer_text" => $footer_text,
		            "margins" => array(25, 10, 20)
		        );
		        
		        if ($_POST['modus'] === $modus['FINISH']) {
		            
		            //generate and store the pdf
		            $pdfid = Pms_PDFUtil::generate_pdf_to_patient_file($rend, 'Entlassplanung', 'entlassplanung', $ipid, $options);
		            
		            //generate the PatientCourse-Entry
		            $cust = new PatientCourse();
		            $cust->ipid = $ipid;
		            $cust->course_date = date("Y-m-d H:i:s", time());
		            $cust->tabname = Pms_CommonData::aesEncrypt('fileupload');
		            $cust->course_type = Pms_CommonData::aesEncrypt("K");
		            $cust->course_title = Pms_CommonData::aesEncrypt('Entlassplanung');
		            $cust->user_id = $logininfo->userid;
		            $cust->recordid = $pdfid;
		            $cust->save();
		            
		            $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_POST['epid']);
		        } else {
		            
		            Pms_PDFUtil::generate_pdf_to_browser($rend, 'Entlassplanung', $options);
		        }
		    }
		    
		    if ($this->getRequest()->isGet()) {
		        $fid = 0;
		        if(isset($_GET['fid'])) { //selection "stored form data" => read the data from previous form
		            $fid = intval($_GET['fid']);
		        }
		        if(isset($_GET['continue'])){ //come by click of the system_icon 'entlassplan'
		            $formlist=Doctrine::getTable('FormGenericSimpleForm')->findByIpidAndIsdelete($ipid, 0);
		            if(count($formlist)>0) {
		                $lf = $formlist[count($formlist) - 1];
		                $fid = $lf->id;
		            }
		        }
		        if ($fid>0) {
		            $find = Doctrine::getTable('FormGenericSimpleForm')->findOneById($fid);
		            $vals = $find->json1;
		            $this->view->data = json_decode($vals, 1);
		        } else {
		            
		            // fill the user-infos
		            $data = array();
		            $find = $simpleformmodel->get_list_patient_dischargeplanning($ipid, true);
		            
		            if(!$find){
		                //this is the first discharge-planning. get the data from the Contactform Discharge-planning (IM-48)
		                //which is a part of the Basis-Assessment (IM-25)
		                $model = new FormBlockKeyValue();
		                $l = $model->getLastBlockValues($ipid, 'FormBlockDischargePlanningClinic');
		                if (count($l)>0){
		                    $previousdata = json_decode($l['returnvalue'],TRUE);
		                    $data['entlassplanung']['date'] = $previousdata['fbkvdisdate'];
		                    $data['entlassplanung']['entlassziel'] = $previousdata['fbkvdissuppl'];
		                }
		            }
		            else{
		                //this is not the first discharge-planning. get the data from the previous form
		                $data = $find[0];
		            }
		            
		            
		            
		            //Pflegegrad
		            $pflggrd = PatientMaintainanceStage::getLastpatientMaintainanceStage($ipid);
		            $pflegegrad = ($pflggrd[0]['stage'] == '') ? 'Kein Pflegegrad' : 'Pflegegrad ' . $pflggrd[0]['stage'];
		            $data['entlassplanung']['pflegegrad'] = $pflegegrad;
		            
		            //Remedies
		            $patient_remedies = new PatientRemedies();
		            $remedies = $patient_remedies->get_remedies($ipid);
		            $text = '';
		            foreach ($remedies as $key => $value) {
		                $text .= trim($value['remedies']);
		                if (($key + 1) != count($remedies)) {
		                    $text .= ', ';
		                }
		            }
		            
		            $data['entlassplanung']['hilfsmittel'] = $text;
		            
		            $this->view->data = $data;
		        }
		        
		        $this->view->fid = $fid;
		        
		        //read the list of stored form data = > show it in the selection "stored form data"
		        $this->view->formlist = Doctrine::getTable('FormGenericSimpleForm')->findByIpidAndIsdelete($ipid, 0);
		        
		        $this->view->supplieslist = $listsmodel->getListOrDefault('supplieslist'); //read the list of supplies
		        
		        //init the discharge-list
		        $dischargelist = array();
		        
		        foreach ($listsmodel->getListOrDefault('dischargelist', true) as $discharge) { //read the list of discharge preparation
		            
		            $values = explode("\n", $discharge[1]);
		            
		            $input = array();
		            foreach ($values as $value) {
		                $split_text = array();
		                
		                //the search-pattern is at positon 0 => check the type
		                if ($i = strpos($value, '###') === 0) {
		                    $split_text[] = '###';
		                    $value = substr($value, $i + 3);
		                }
		                
		                //the search-pattern is not at positon 0 => check the value
		                while ($i = strpos($value, '###')) {
		                    $split_text[] = substr($value, 0, $i);
		                    $split_text[] = '###';
		                    $value = substr($value, $i + 3);
		                }
		                if (strlen(trim($value))) {
		                    $split_text[] = trim($value);
		                }
		                $input[] = $split_text;
		                $dischargelist[$discharge[0]][] = $split_text;
		                $input = array();
		            }
		            
		            
		        }
		        
		        
		        $this->view->dischargelist = $dischargelist;
		        
		        //init the contact-list
		        $contactlist = array();
		        $versorger = new ClinicVersorger();
		        $categories = $versorger->getAllCategories(); //get all categories
		        
		        $contacts = $listsmodel->getList('contactlist', true); //read the list of contacts
		        
		        foreach ($contacts as $contact) {
		            if ($contact[0] != 'suppliers')
		                $erg[$contact[0]][] = $categories[$contact[0]]['label'];
		                else
		                    $erg[$contact[0]][] = $contact[1];
		        }
		        $this->view->contactlist = $erg;
		        
		        //init the suggestion list
		        $suggestion = array();
		        $patientsupplier = $versorger->getPatientdataPrettyline($ipid, 'name_phone_fax'); // get suppliers for the patient
		        $suggestion['patientsupplier'] = $patientsupplier;
		        $this->view->suggestionlist = $suggestion;
		    }
		    
		}
		
		public function anlage3Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ---------------------------------------------------------- */
			$details['patientname'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']) . "\n" . htmlspecialchars($parr['street1']) . "&nbsp;" . htmlspecialchars($parr['zip']) . "\n" . htmlspecialchars($parr['city']);
			$details['birthdate'] = $parr['birthd'];
			$details['patientname1'] = $parr['last_name'] . ", " . $parr['first_name'];
			$details['patientaddress'] = $parr['street1'] . "\n" . $parr['zip'] . " " . $parr['city'];
			$details['patientaddress2'] = htmlspecialchars($parr['street1']) . "&nbsp;" . htmlspecialchars($parr['zip']) . "&nbsp;" . htmlspecialchars($parr['city']);
			$details['patient_city'] = htmlspecialchars($parr['city']);

			if($parr['sex'] == 1)
			{
				$details['male'] = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$details['female'] = "checked='checked'";
			}

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$details['client_city'] = $clientdata[0]['city'];

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$details['refarray'] = $ref['referred_name'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$details['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$details['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$details['insurance_status'] = $healthinsu_array[0]['insurance_status'];

			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
			$details['kvnumber'] = $healthinsu_array[0]['kvk_no'];

			$epid = Pms_CommonData::getEpidFromId($decid);
			$details['epid'] = $epid;

			$brenmber = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where("epid='" . $epid . "'");
			$bexec = $brenmber->execute();
			$barray = $bexec->toArray();

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$details['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
				$details['arzt_nr'] = $uarray['LANR'];
			}

			$this->view->anlage_3 = $details;
			$details['patientname'] = $details['patientname'];
			$details['patientaddress'] = $details['patientaddress'];

			$this->generate_pdf($details, 'anlage3', "anlage3_pdf.html");
		}

		public function consentAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpidFromId($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->patid = $decid;
			$patient_id = $_REQUEST['id'];
			$this->view->patient_id = $patient_id;
			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */

			/* ------------------------------------------------ */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$patient['birthd'] = $patientarr['birthd'];
			$patient['lastname'] = $patientarr['last_name'];
			$patient['firstname'] = $patientarr['first_name'];
			$patient['street'] = $patientarr['street1'];
			$patient['zip'] = $patientarr['zip'];
			$patient['patcity'] = $patientarr['city'];
			$patient['phone'] = $patientarr['phone'];
			$patient['epid'] = strtoupper($epid);
			$patient['address'] .= "";

			if(strlen($patientarr['street1']) > 1)
			{
				$patient['address'] .= $patientarr['street1'] . "\n";
			}
			else
			{
				$patient['address'] .= '\n';
			}

			if(strlen($patientarr['zip']) > 1)
			{
				$patient['address'] .= '' . $patientarr['zip'] . ', ';
			}

			if(strlen($patientarr['city']) > 1)
			{
				$patient['address'] .= '' . $patientarr['city'];
			}
			else
			{
				$patient['address'] .= ' ';
			}

			$this->view->patient = $patient;

			if($this->getRequest()->isPost())
			{
				$patient_details['patient_details'] = $this->view->patient;
				$this->generateformPdf(3, $patient_details, 'consent', "consent_pdf.html");
			}
		}

		public function hospizquestionnaireAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpidFromId($decid);

			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->patid = $decid;
			$this->view->enc_patid = $_REQUEST['id'];

			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$hospizq = new HospizQuestionnaire();

			//ISPC-2647 Lore 05.08.2020
			$hospiz_nord = 0;
			if($_REQUEST['qid'])
			{
				//$hospiz_results = $hospizq->get_hospiz_questionarie($_REQUEST['qid']);
			    $hospiz_results = $hospizq->get_hospiz_questionarie($_REQUEST['qid'], $hospiz_nord);     //ISPC-2647 Lore 05.08.2020
				
			}
			else
			{
				//$hospiz_results = $hospizq->getPatientHospizQuestionnaire($ipid);
			    $hospiz_results = $hospizq->getPatientHospizQuestionnaire($ipid, $hospiz_nord);          //ISPC-2647 Lore 05.08.2020
			    
				$_REQUEST['qid'] = $hospiz_results['0']['id']; // force to edit first one - just one needed
			}
			$hospiz_questionnaire_details = $hospiz_results['0'];

			/* ------------------------------ SAVE FORM BEFORE DISPLAY --------------------------------- */
			if($this->getRequest()->isPost() && strlen($_POST['pdf_export']) == 0)
			{
				/* ----------------Patient save Hospiz questionaire START -------------------------------------- */
				$init = new Application_Form_HospizQuestionnaire();

				if($_REQUEST['qid'])
				{
					$result = $init->updateHospizQuestionnaire($_POST['hospiz_q_insert'], $_REQUEST['qid'], $ipid);
				}
				else
				{
					$result = $init->insertHospizQuestionnaire($_POST['hospiz_q_insert'], $ipid);
				}

				if($result)
				{
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
				}
				/* ----------------Patient save Hospiz questionaire END-------------------------------------- */
			}

			/* ----------------Patient general details-------------------------------------- */
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();
			$patient_details['last_name'] = $patientinfo['last_name'];
			$patient_details['first_name'] = $patientinfo['first_name'];
			$patient_details['birthd'] = $patientinfo['birthd'];
			$patient_details['admission_date'] = date('d.m.Y', strtotime($patientinfo['admission_date']));

			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* ----------------Get Client details-------------------------------------- */
			$client_det = Pms_CommonData::getClientData($clientid);

			$client_details['city'] = $client_det[0]['city'];

			$this->view->client_details = $client_details;

			/* ----------------Get Client User details-------------------------------------- */
			$users = new User();
			$userarray = $users->getUserByClientid($clientid);

			$users_groups = new Usergroup();
			$ClientGroups = $users_groups->getClientGroups($clientid);

			foreach($ClientGroups as $kh => $gr_details)
			{
				$grup_details[$gr_details['id']] = $gr_details['groupname'];
			}

			foreach($userarray as $user)
			{
				$userarraylast[$grup_details[$user['groupid']]][$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
				$selected_user[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
			}

			$users_details['selected_user'] = $selected_user;
			$users_details['client_users'] = $userarraylast;
			$users_details['current_user'] = $userid;

// 		print_r($users_details); exit;
			$this->view->users_details = $users_details;

			/* ----------------Patient HealthInsurance details-------------------------------------- */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if($phi)
			{
				$health_insurance = $phi[0]['company_name'];
				$patient_details['health_insurance'] = $health_insurance;
			}
			else
			{
				$patient_details['health_insurance'] = '';
			}

			if(strlen($_REQUEST['qid'])>'0' && $hospiz_questionnaire_details['admission_date'] != '0000-00-00 00:00:00')
			{
				$patient_details['admission_date'] = date('d.m.Y', strtotime($hospiz_questionnaire_details['admission_date']));
			}
			
			$this->view->patient_details = $patient_details;

			/* ----------------Patient - Medication details------------------ */
			$pdrug = new PatientDrugPlan();
			$drugarray = $pdrug->getPatientDrugPlan($decid);

			$comma = "";
			foreach($drugarray as $key => $val)
			{
				$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
				if(!empty($medca))
				{
					$medcaarray = $medca->toArray();
				}
				$medication .= $comma . $medcaarray['name'] . " " . $val['dosage'] . "";
				$comma = "; ";
			}

			/* ----------------Patient - Stammdaten - More info--------------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->zvk = $pat_moreinfo[0]['zvk'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];
			$this->view->magensonde = $pat_moreinfo[0]['magensonde'];

			/* ------------------- Maindiagnosis & Sidediagnosis------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);

			if(count($metaids) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = ",";
				$metadiagnosis = "";
				foreach($metaids as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle)
					{
						$metadiagnosis .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			if(strlen($diagnosis) > 0 || strlen($metadiagnosis) > 0)
			{
				$main_diagnosis = $diagnosis;
			}
			else
			{
				$main_diagnosis = "";
			}

			$abb = "'ND','AD','DD'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($clientid, $abb);
			//print_r($ddarr);
			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}
			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
				//echo $val1['id'];
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);

				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						if(strlen($val['icdnumber']) > 0)
						{
							$other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
						}
						else
						{
							$other_diagnosis .= $comma . $val['diagnosis'];
						}
						$dia++;
						$comma = ",";
					}
				}
			}

			$side_diagnosis = $other_diagnosis;

			$diagnostics_details = $main_diagnosis . $side_diagnosis;

			/* ------------------------------ Get Metastasen details ------------------------- */
			$patientmeta = new PatientDiagnosisMeta();
			$metaids = $patientmeta->getPatientDiagnosismeta($ipid);

			if(count($metaids) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = "";
				$metadiagnosis = "";
				foreach($metaids as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle)
					{
						$metadiagnosis .= $comma . $metatitle['meta_title'];
						$comma = ",";
					}
				}
			}

			$metadiagnosis_details = $metadiagnosis;

			/* ------------------------------ Get SapvQuestionnaire  details ------------------------- */
			$sapvq = new SapvQuestionnaire();
			$sapvq_res = $sapvq->getPatientSapvQuestionnaire($ipid);

			if(!empty($sapvq_res[0]))
			{
				$sapv_questionnaire['family_social_environment'] = $sapvq_res[0]['family_social_environment'];
			}

			/* ------------------------------ IF NO HOSPIZ QUESTIONNAIRE - prefill ------------------------- */
			if(!$hospiz_questionnaire_details)
			{
				$hospiz_questionnaire_details['diagnostic_details'] = $diagnostics_details;
				$hospiz_questionnaire_details['family_social_environment'] = $sapv_questionnaire['family_social_environment'];
				$hospiz_questionnaire_details['metastasen_details'] = $metadiagnosis_details;
				$hospiz_questionnaire_details['med_details'] = $medication;
				$hospiz_questionnaire_details['user'] = $users_details['current_user'];
			}

			/* ------------------------------ DISPLAY HOSPIZ DETAILS  ------------------------------------- */
			$this->view->hospiz_questionnaire_details = $hospiz_questionnaire_details;

			/* ------------------------------ PDF  ------------------------------------- */
			if(strlen($_POST['pdf_export']) > 0)
			{
				$post = $_POST;
				$post['client_details'] = $client_details;
				$post['users_details'] = $users_details;
				$post['patient_details'] = $patient_details;
				$post['hospiz_questionnaire_details'] = $_POST['hospiz_q_insert'];

				if(strlen($_POST['hospiz_q_insert']['admission_date'])>'0')
				{
					$post['patient_details']['admission_date'] = date('d.m.Y', strtotime($_POST['hospiz_q_insert']['admission_date']));
				}
				
				$this->generateformPdf(3, $post, 'hospizquestionnaire', "hospiz_questionnaire_pdf.html");
			}
		}

		public function anlage5part1Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpidFromId($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->patid = $decid;
			$this->view->enc_patid = $_REQUEST['id'];
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();
			$this->view->isdischarged = $patientinfo['isdischarged'];
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/*			 * ******************************************** */
			$anlage5p1 = new Anlage5Part1();
			$anlage5_data = $anlage5p1->get_anlage5_data($ipid);
			//current problems table
			$current_problems = $anlage5p1->get_current_problems();
			$problem_options = $anlage5p1->get_problem_options();
			$this->view->current_problems = $current_problems;
			$this->view->problem_options = $problem_options;
			//pretreatment table
			$pretreatment_problems = $anlage5p1->get_pretreatment_problems();
			$pretreatment_options = $anlage5p1->get_pretreatment_options();
			$this->view->pretreatment_problems = $pretreatment_problems;
			$this->view->pretreatment_options = $pretreatment_options;

			if($anlage5_data)
			{
				$status = "update";
			}
			else
			{
				$status = "insert";
			}

			if($this->getRequest()->isPost())
			{
				if($_POST['save'])
				{
					$anlage5_form = new Application_Form_Anlage5part1();
					$anlage5_save = $anlage5_form->InsertData($_POST, $ipid, $clientid, $status);
					$this->_redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
					exit;
				}
				else if($_POST['reset'])
				{
					$anlage5_form = new Application_Form_Anlage5part1();
					$anlage5_reset = $anlage5_form->reset($ipid);
					$anlage5_cp = $anlage5_form->reset_current_problems($ipid);
					$anlage5_pr = $anlage5_form->reset_pretreatment_problems($ipid);
					$this->_redirect(APP_BASE . 'patientform/anlage5part1?id=' . $_REQUEST['id']);
					exit;
				}
			}

			if($anlage5_data)
			{
				$this->view->current_problems_data = $anlage5_data[0]['current_problems_data'];
				$this->view->pretreatment_data = $anlage5_data[0]['pretreatment_data'];
				$this->retainValues($anlage5_data[0]);
			}
			else
			{
				//non saved data
				$client_data = Pms_CommonData::getClientData($clientid);
				$users = new User();
				$users_details = $users->getUsersDetails(array($userid));

				//C
				$this->view->team_name = $client_data[0]['team_name'];

				//D
				$this->view->user_details = $users_details[$userid]['user_title'] . " " . $users_details[$userid]['last_name'] . ", " . $users_details[$userid]['first_name'] . ' / ' . $users_details[$userid]['phone'];

				//E
				$hi_perms = new HealthInsurancePermissions();
				$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
				$hi_perms_divisions = $divisions;

				$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
				$hi_number = $healthinsu_array[0]['institutskennzeichen'];

				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
					{
						$hi_number = $healtharray['iknumber'];
					}
				}

				$this->view->patient_name = $patientinfo['last_name'] . ', ' . $patientinfo['first_name'];

				$healthinsurancenumber = '';
				if(!empty($hi_number))
				{
					$healthinsurancenumber .= $hi_number . ' / ';
				}
				$healthinsurancenumber .= $patientinfo['birthd'];

				$this->view->hi_number_dob = $healthinsurancenumber;

				//I
				$this->view->living_will = $patientinfo['living_will'];

				if($patientinfo['living_will_from'] != "0000-00-00" && $patientinfo['living_will_from'] != "0000-00-00 00:00" && !empty($patientinfo['living_will_from']) && $patientinfo['living_will_from'] != 0)
				{
					$this->view->living_will_more = date("d.m.Y", strtotime($patientinfo['living_will_from']));
				}
				else
				{
					$this->view->living_will_more = "";
				}
			}

			//L
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			$this->view->sp_peg_sonde = $pat_moreinfo[0]['peg'];
			$this->view->sp_port = $pat_moreinfo[0]['port'];
			$this->view->sp_zvk = $pat_moreinfo[0]['zvk'];
			$this->view->sp_pumpe = $pat_moreinfo[0]['pumps'];
			$this->view->sp_catheter = $pat_moreinfo[0]['dk'];

			if($this->getRequest()->isPost())
			{
				if($_POST['pdf'])
				{
					$post = $_POST;
					$post['current_problems'] = $current_problems;
					$post['problem_options'] = $problem_options;
					$post['pretreatment_problems'] = $pretreatment_problems;
					$post['pretreatment_options'] = $pretreatment_options;

					$this->generateformPdf(3, $post, 'anlage5', "anlage5part1pdf.html");
				}
			}
		}

		public function anlage7planAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpidFromId($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->patid = $decid;
			$patient_id = $_REQUEST['id'];
			$this->view->patient_id = $patient_id;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			unset($plan);
			/* ------------------------------------------------ */

			/* ----------------Client get general details-------------------------------------- */
			$clients = Pms_CommonData::getClientData($logininfo->clientid);
			$plan['client']['betriebsstattennummer'] = $clients[0]['betriebsstattennummer'];

			/* ----------------Patient general details-------------------------------------- */
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();
			$plan['patient']['last_name'] = $patientinfo['last_name'];
			$plan['patient']['first_name'] = $patientinfo['first_name'];
			$plan['patient']['birthd'] = $patientinfo['birthd'];
			$plan['patient']['special_medical_assistance'] = $patientinfo['special_medical_assistance'];

			/* ----------------Patient HealthInsurance details-------------------------------------- */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if($phi)
			{
				$health_insurance_nr = $phi[0]['insurance_no'];
				$plan['patient']['patient_health_insurance_nr'] = $health_insurance_nr;
			}
			else
			{
				$plan['patient']['patient_health_insurance_nr'] = '--';
			}

			/* ----------------Patient FamilyDoctor-------------------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($patientinfo['familydoc_id']);

			$plan['family_doc']['name'] = trim($docarray[0]['last_name']) . ', ' . $docarray[0]['first_name'];

			if($docarray[0]['kv_no'] != 0)
			{
				$plan['family_doc']['iknr'] = ', ' . $docarray[0]['kv_no'];
			}
			else
			{
				$plan['family_doc']['iknr'] = '';
			}

			/* ----------------Patient Assigned Users-------------------------------------- */
			$assigned_users = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('clientid =' . $logininfo->clientid)
				->andWhere('epid = "' . $epid . '"');
			$assigned_users_res = $assigned_users->fetchArray();

			$a_users[] = '99999999999';
			foreach($assigned_users_res as $k_au => $v_au)
			{
				$a_users[] = $v_au['userid'];
			}

			$users_det_q = Doctrine_Query::create()
				->select('*')
				->from('User')
				->whereIn('id', $a_users)
				->andWhere('isdelete="0"');
			$users_det_res = $users_det_q->fetchArray();

			$usergroup = new Usergroup();
			$c_groups = $usergroup->getClientGroups($clientid);

			$usergroup = new Usergroup();
			$MasterGroups = array("4", "5");
			$usersgroups = $usergroup->getUserGroups($MasterGroups);

			if(count($usersgroups) > 0)
			{
				foreach($usersgroups as $group)
				{
					if($group['groupmaster'] == 4) // doctors
					{
						$groupsDocArray[] = $group['id'];
					}
					elseif($group['groupmaster'] == 5)//pflege
					{
						$groupsPfleArray[] = $group['id'];
					}
					else
					{
						$groupsArray[] = $group['id'];
					}
				}
			}

			foreach($c_groups as $k_gr => $v_gr)
			{
				$client_groups[$v_gr['id']] = $v_gr['groupname'];
			}

			$plan['patient']['assigned_nurse'] = "";
			$plan['patient']['assigned_doctors'] = "";

			foreach($users_det_res as $k_as_user => $v_as_user)
			{
				if(in_array($v_as_user['groupid'], $groupsDocArray))
				{
					$users_det_res[$k_as_user]['doctors'] = $client_groups[$v_as_user['groupid']];
					if(!empty($v_as_user['city']))
					{
						$plan['patient']['assigned_doctors'] .=$v_as_user['last_name'] . ', ' . $v_as_user['first_name'] . ', ' . $v_as_user['city'] . '; ';
					}
					else
					{
						$plan['patient']['assigned_doctors'] .=$v_as_user['last_name'] . ',  ' . $v_as_user['first_name'] . '; ';
					}
				}
				elseif(in_array($v_as_user['groupid'], $groupsPfleArray))
				{
					$users_det_res[$k_as_user]['nurse'] = $client_groups[$v_as_user['groupid']];
					if(!empty($v_as_user['city']))
					{
						$plan['patient']['assigned_nurse'] .=$v_as_user['last_name'] . ', ' . $v_as_user['first_name'] . ', ' . $v_as_user['city'] . '; ';
					}
					else
					{
						$plan['patient']['assigned_nurse'] .=$v_as_user['last_name'] . ', ' . $v_as_user['first_name'] . '; ';
					}
				}
				else
				{
					$users_det_res[$k_as_user]['other'] = $client_groups[$v_as_user['groupid']];
				}
			}

			/* ----------------Patient - GET ACTIVE DAYS ------------------------------------- */
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);

			$plan['patient']['admission_days'] = array();
			$admCycle[-1] = "gesamt";
			if(count($admissions[$ipid]['admissionDates']) != "0")
			{
				foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
				{
					$plan['patient']['admission_days'][] = date("Y-m-d", strtotime($admitedDate['date']));

					if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}

					$admCycle[$keyAdm] = date("d.m.Y", strtotime($admitedDate['date'])) . " - " . date("d.m.Y", strtotime($dischargeDate));
					$admissionsCycles[$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
					$admissionsCycles[$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));

					$newadmissionsCycles[$keyAdm]['start'] = date("Y-m-d", strtotime($admitedDate['date']));
					$newadmissionsCycles[$keyAdm]['end'] = date("Y-m-d", strtotime($dischargeDate));

					if($keyAdm == (count($admissions[$ipid]['admissionDates']) - 1))
					{

					}
				}
			}
			else
			{
				$plan['patient']['admission_days'][] = date("Y-m-d", strtotime($admissions[$ipid]['admission_date']));

				if(empty($admissions[$ipid]['discharge_date']))
				{
					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($admissions[$ipid]['discharge_date']));
				}

				$admCycle[0] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date'])) . " - " . date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
				//gesamt if no admision-readmission cycle
				$admissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$admissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
				$newadmissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$newadmissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
			}


			if(count($admissions[$ipid]['dischargeDates']) != "0")
			{
				foreach($admissions[$ipid]['dischargeDates'] as $keydis => $discharge_date)
				{
					$plan['patient']['discharge_days_array'][] = date("Y-m-d", strtotime($discharge_date['date']));
				}
			}
			else
			{

			}
			$plan['patient']['discharge_days_array'][] = date('Y-m-d', strtotime($admissions[$ipid]['discharge_date']));

			$new_active_days = array();
			foreach($newadmissionsCycles as $cicle)
			{
				$new_active_days[] = $patientmaster->getDaysInBetween($cicle['start'], $cicle['end']);
			}

			$all_active_daysc = array();
			foreach($new_active_days as $acinter => $cainterval_days)
			{
				foreach($cainterval_days as $acdays)
				{
					$all_active_daysc[] = $acdays;
				}
			}
			$active_days = array_unique($all_active_daysc);
			$plan['patient']['active_days'] = $active_days;

			if($_REQUEST['dbg'])
			{
				print_r("active_days \n");
				print_r($plan['patient']['active_days']);
				print_r("admission_days \n");
				print_r($plan['patient']['admission_days']);
				print_r("discharge_days_array \n");
				print_r($plan['patient']['discharge_days_array']);
			}

			$montharray = array(date('m', mktime(0, 0, 0, date("m") - 1, date("d"), date("Y"))), date('m'));
			$cnt = 1;
			foreach($admissionsCycles as $moth => $keyd)
			{
				$selectmonths[$cnt++] = $this->get_months($keyd['start'], $keyd['end'], true);
			}

			if(count($selectmonths) > 0)
			{
				foreach($selectmonths as $keym => $valm)
				{
					foreach($valm as $keylistmonth => $valuelm)
					{
						if(!in_array($valuelm, $montharray))
						{
							$verdung .=$comma . $valuelm;
							$comma = ",";
							$arrayMonthsSelect[$keylistmonth] = $valuelm;
						}
					}
				}
			}

			$present = date("Ym");
			$presentl = date("m") . "." . date("Y");

			if(!in_array($present, $arrayMonthsSelect))
			{
				$arrayMonthsSelect[$present] = $presentl;
			}

			$plan['month']['montharray'] = $arrayMonthsSelect;

			if(!empty($_REQUEST['list']))
			{
				$selectedPeriod[0] = substr($_REQUEST['list'], 0, 4);
				$selectedPeriod[1] = substr($_REQUEST['list'], 4);
			}
			else
			{
				$selectedPeriod[0] = date("Y");
				$selectedPeriod[1] = date("m");
			}
			$selectedPeriod[2] = "01";

			$formdays[] = $patientmaster->getDaysInBetween(date("Y-m-d H:i:s", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])), date("Y-m-d H:i:s", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])))));

			foreach($formdays as $keyd => $vald)
			{
				$day = 1;
				foreach($vald as $keylistday => $valueld)
				{
					$dmonth_array[str_pad($day, 2, "0", STR_PAD_LEFT)] = $valueld;
					$complete_month_days[$valueld . ' 00:00:00'] = $valueld;
					$complete_days_time[str_pad($day, 2, "0", STR_PAD_LEFT)] = $valueld . '';
					$day++;
					$days_in_period[] = $valueld;
				}
			}

			$selected_period['start'] = $dmonth_array[0];
			$selected_period['end'] = end($dmonth_array);
			$plan['month']['month_days'] = $dmonth_array;
			$plan['month']['current_month_days'] = $complete_days_time;

			foreach($active_days as $k_active_day => $v_active_day)
			{
				if(in_array($v_active_day, $days_in_period))
				{
					$plan['patient']['active_days_in_period'][] = $v_active_day;
				}
			}

			asort($plan['patient']['active_days_in_period']);
			if(count($plan['patient']['active_days_in_period']) > 0)
			{
				$start = date('d.m.Y', strtotime($plan['patient']['active_days_in_period'][0]));
				$plan['patient']['first_active_day'] = $start;
				$last_day = end($plan['patient']['active_days_in_period']);
				$end = date('d.m.Y', strtotime($last_day));
				$plan['patient']['last_active_day'] = $end;
			}

			/* ----------------Patient - HOSPITAL AND HOSPIZ LOCATIONS -------------------------------------- */
			$ploc = new PatientLocation();
			$hospital_hospiz_locations = $ploc->patient_hospital_hospiz_locations($ipid);
			$plan['patient']['hospital_hospiz_active'] = $hospital_hospiz_locations['hh_active_location']; // 1- if the active location of patient it is hospital or hospiz
			$plan['patient']['hospital_hospiz_days'] = $hospital_hospiz_locations['hh_days'];
			$plan['patient']['hospital_days'] = $hospital_hospiz_locations['hospital_days'];
			$plan['patient']['hospiz_days'] = $hospital_hospiz_locations['hospiz_days'];

			/* ----------------Patient - SAPV DETAILS -------------------------------------- */
			$pat_master = new PatientMaster();
			$patient_sapv_details = $pat_master->patient_valid_sapv($ipid);
			$plan['patient']['sapv_days'] = $patient_sapv_details['sapv_days'];
			$plan['patient']['tv_days'] = $patient_sapv_details['tv_days'];
			$plan['patient']['vv_days'] = $patient_sapv_details['vv_days'];
			$plan['patient']['sapv_start_days'] = $patient_sapv_details['sapv_start_days'];

			if($_REQUEST['dbg'])
			{
				print_r("all hospital and hospiz days \n");
				print_r($plan['patient']['hospital_hospiz_days']);
				print_r("all hospital days \n");
				print_r($plan['patient']['hospital_days']);
				print_r("all hospiz days \n");
				print_r($plan['patient']['hospiz_days']);
				print_r("all sapv days \n");
				print_r($plan['patient']['sapv_days']);
				print_r("tv_days\n");
				print_r($plan['patient']['tv_days']);
				print_r("vv_days\n");
				print_r($plan['patient']['vv_days']);
			}

			/* ----------------Patient - Discharge DETAILS -------------------------------------- */
			if($patientinfo['isdischarged'] == '1')
			{
				$distod = Doctrine_Query::create()
					->select("*")
					->from('DischargeMethod')
					->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
				$todarray = $distod->fetchArray();

				$todIds[] = "9999999999999";
				foreach($todarray as $todmethod)
				{
					$todIds[] = $todmethod['id'];
				}

				$dispat = Doctrine_Query::create()
					->select("*")
					->from("PatientDischarge")
					->where("ipid LIKE '" . $ipid . "'")
					->andWhere('isdelete = 0')
					->andWhereIn("discharge_method", $todIds);
				$dischargedArr = $dispat->fetchArray();

				if(!empty($dischargedArr) && count($dischargedArr) == 1)
				{
					$plan['patient']['death_date'] = date('d.m.Y', strtotime($dischargedArr[0]['discharge_date']));
				}
			}

			/* ----------------Client - Get PRICE VISITS-------------------------------------- */
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$plan['shortcuts'][] = $shortcuts['bra_sapv'];

			$current_period['start'] = date("Y-m-d", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2]));
			$current_period['end'] = date("Y-m-d", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2]))));

			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']); //get bra sapv pricelist and then shortcuts

			$shortcuts = Pms_CommonData::get_prices_shortcuts();

			/* #########################################  PCT01  ###################################### */
			$plan['shortcut']['pct01']['admission_date'] = "";
			$plan['shortcut']['pct01']['days'] = "";
			$plan['shortcut']['pct01']['qty'] = 0;
			$plan['shortcut']['pct01']['price'] = 0;
			$plan['shortcut']['pct01']['total'] = 0;

			foreach($plan['patient']['admission_days'] as $kad => $admd_value)
			{
				if(in_array($admd_value, $plan['month']['current_month_days']) && // exists in current month
					in_array($admd_value, $plan['patient']['sapv_days'])) // has sapv
				{
					$plan['shortcut']['pct01']['qty'] += 1;
					$plan['shortcut']['pct01']['price'] = $master_price_list[$admd_value][0]['pct01']['price'];
					$plan['shortcut']['pct01']['total'] = $plan['shortcut']['pct01']['qty'] * $plan['shortcut']['pct01']['price'];
				}

				if(strtotime($admd_value) <= strtotime($current_period['end']))
				{
					$plan['shortcut']['pct01']['days'] = date('d.m.Y', strtotime($admd_value));
				}
			}

			/* ##################  PCT02 - current month (first admission ever)##################### */
			$plan['shortcut']['pct02']['qty'] = 0;
			$plan['shortcut']['pct02']['price'] = 0;
			$plan['shortcut']['pct02']['total'] = 0;

			if(in_array($plan['patient']['admission_days'][0], $plan['month']['current_month_days']) && in_array($plan['patient']['admission_days'][0], $plan['patient']['sapv_days']))
			{
				$plan['shortcut']['pct02']['qty'] = 1;
				$plan['shortcut']['pct02']['price'] = $master_price_list[$plan['patient']['admission_days'][0]][0]['pct02']['price'];
				$plan['shortcut']['pct02']['total'] = $plan['shortcut']['pct02']['qty'] * $plan['shortcut']['pct02']['price'];
			}

			/* ##################  HF01 - current month (first admission ever)##################### */

			$plan['shortcut']['hf01']['qty'] = 0;
			$plan['shortcut']['hf01']['price'] = 0;
			$plan['shortcut']['hf01']['total'] = 0;

			foreach($admissions[$ipid]['admissionDates'] as $kadd => $admdd_value)
			{
				if($admdd_value['special_medical_assistance'] == '1')
				{
					$adm_date = date('Y-m-d', strtotime($admdd_value['date']));
					if(in_array($adm_date, $plan['month']['current_month_days']))
					{
						$plan['shortcut']['hf01']['qty'] += 1;
						$plan['shortcut']['hf01']['price'] = $master_price_list[$adm_date][0]['hf01']['price'];
						$plan['shortcut']['hf01']['total'] = $plan['shortcut']['hf01']['qty'] * $plan['shortcut']['hf01']['price'];
					}
				}
			}

			/* #########################################  PCT03a,PCT04a,   PCT03b,PCT04b  ###################################### */
			$plan['shortcut']['pct03a']['qty'] = 0;
			$plan['shortcut']['pct03b']['qty'] = 0;
			$plan['shortcut']['pct04a']['qty'] = 0;
			$plan['shortcut']['pct04b']['qty'] = 0;
			$plan['shortcut']['pct03a']['total'] = 0;
			$plan['shortcut']['pct03b']['total'] = 0;
			$plan['shortcut']['pct04a']['total'] = 0;
			$plan['shortcut']['pct04b']['total'] = 0;
			$plan['shortcut']['pct03a']['price'] = 0;
			$plan['shortcut']['pct03b']['price'] = 0;
			$plan['shortcut']['pct04a']['price'] = 0;
			$plan['shortcut']['pct04b']['price'] = 0;

			$week_prices = $this->get_patient_week_prices($ipid, $plan['patient']['admission_days'], $plan['patient']['active_days'], $plan['patient']['discharge_days_array'], $current_period, $plan['patient']['hospital_days'], $plan['patient']['hospiz_days']);

			$totals = array();
			foreach($week_prices as $k_weekprice => $v_weekprice)
			{
				if(in_array($v_weekprice['start'], $plan['patient']['active_days_in_period']))
				{
					if($v_weekprice['verordnet'] == '3')
					{
						$plan['shortcut']['pct03a']['qty'] += 1;
						$plan['shortcut']['pct03a']['price'] = $master_price_list[$v_weekprice['start']][0]['pct03a']['price'];
						$plan['shortcut']['pct03a']['total'] = $plan['shortcut']['pct03a']['qty'] * $plan['shortcut']['pct03a']['price'];
						$plan['shortcut']['pct03b']['qty'] += 1;
						$plan['shortcut']['pct03b']['price'] = $master_price_list[$v_weekprice['start']][0]['pct03b']['price'];
						$plan['shortcut']['pct03b']['total'] = $plan['shortcut']['pct03b']['qty'] * $plan['shortcut']['pct03b']['price'];
					}
					else if($v_weekprice['verordnet'] == '4')
					{
						$plan['shortcut']['pct04a']['qty'] += 1;
						$plan['shortcut']['pct04a']['price'] = $master_price_list[$v_weekprice['start']][0]['pct04a']['price'];
						$plan['shortcut']['pct04a']['total'] = $plan['shortcut']['pct04a']['qty'] * $plan['shortcut']['pct04a']['price'];
						$plan['shortcut']['pct04b']['qty'] += 1;
						$plan['shortcut']['pct04b']['price'] = $master_price_list[$v_weekprice['start']][0]['pct04b']['price'];
						$plan['shortcut']['pct04b']['total'] = $plan['shortcut']['pct04b']['qty'] * $plan['shortcut']['pct04b']['price'];
					}
				}
			}
			/* #########################################  PCT05  &  HF02 ###################################### */

			/* ----------------------Patient - get all "deleted visits"------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere("ipid='" . $ipid . "'")
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . '  ')
				->andWhere('source_ipid = ""');
			$deleted_visits_array = $deleted_visits->fetchArray();


			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ----------------Patient -Contact forms in period-------------------------------------- */
			$nurse_visits_q = Doctrine_Query::create()
				->select("*")
				->from('ContactForms')
				->where("ipid='" . $ipid . "'")
				->andWhere('DATE(billable_date) BETWEEN ? AND ? ',array(date("Y-m-d",strtotime($selected_period['start'])),date("Y-m-d",strtotime($selected_period['end'])) ));
				if(!empty($del_visits['contact_form'])){
					$nurse_visits_q->andWhereNotIn('id', $del_visits['contact_form']);
				}
				$nurse_visits_q->andWhere('isdelete = 0')
				->orderBy('start_date ASC');
			$nurse_visits_array = $nurse_visits_q->fetchArray();

			foreach($nurse_visits_array as $kid => $cvalue)
			{
				$plan['patient']['contact_forms_ids'][] = $cvalue['id'];
				$plan['patient']['contact_forms_dates'][$cvalue['id']] = date('Y-m-d', strtotime($cvalue['billable_date']));
			}

			if(empty($plan['patient']['contact_forms_ids']))
			{
				$plan['patient']['contact_forms_ids'][] = "999999";
			}

			/* ----------------Patient - all BRA sapv values(contact form) -------------------------------------- */
			$blockbra = new FormBlockBraSapv();
			$block_bra_sapv_values = $blockbra->get_multiple_block_bra_sapv($ipid, $plan['patient']['contact_forms_ids']);

			$plan['shortcut']['pct05']['qty'] = 0;
			$plan['shortcut']['pct05']['price'] = 0;
			$plan['shortcut']['pct05']['total'] = 0;
			$plan['shortcut']['hf02']['qty'] = 0;
			$plan['shortcut']['hf02']['price'] = 0;
			$plan['shortcut']['hf02']['total'] = 0;
			$plan['shortcut']['pct05']['days'] = '';

			foreach($block_bra_sapv_values as $bk => $bvalue)
			{

				if($bvalue['sapv_team_doctor'] == '1')
				{

					$plan['shortcut']['pct05']['qty'] += 1;
					$plan['shortcut']['pct05']['price'] = $master_price_list[$plan['patient']['contact_forms_dates'][$bvalue['contact_form_id']]][0]['pct05']['price'];
					$plan['shortcut']['pct05']['total'] = $plan['shortcut']['pct05']['qty'] * $plan['shortcut']['pct05']['price'];
					$plan['shortcut']['pct05']['days_array'][] = date('d.m.Y', strtotime($plan['patient']['contact_forms_dates'][$bvalue['contact_form_id']]));
					$plan['shortcut']['hf02']['qty'] +=1;
					$plan['shortcut']['hf02']['price'] = $master_price_list[$plan['patient']['contact_forms_dates'][$bvalue['contact_form_id']]][0]['hf02']['price'];
					$plan['shortcut']['hf02']['total'] = $plan['shortcut']['hf02']['qty'] * $plan['shortcut']['hf02']['price'];
				}
			}

			$plan['shortcut']['pct05']['days'] = implode(', ', array_unique($plan['shortcut']['pct05']['days_array']));
			$plan['shortcut']['hf']['qty'] = 0;
			$plan['shortcut']['hf']['total'] = 0;
			foreach($plan['shortcut'] as $shcut => $sh_value)
			{
				$plan['shortcut']['hf']['qty'] += $sh_value['qty'];
				$plan['shortcut']['hf']['total'] += $sh_value['total'];
			}

			$weekprice_shortcuts = array('pct03a', 'pct03b', 'pct04a', 'pct04b');
			/* ------------------------------------------------------------------ */
			$bra_saved = new BraSapvControl();
			$bra_saved_values = $bra_saved->get_bra_sapv_controlsheet($ipid, $current_period['start'], $weekprice_shortcuts, $master_price_list);

			$plan['system'] = true;
// 		print_r($bra_saved_values); exit;
			if($bra_saved_values && !empty($bra_saved_values))
			{
//			overwrite system details
				foreach($bra_saved_values as $sh => $sh_dates)
				{
					if($sh != "totals")
					{
						foreach($sh_dates as $item => $values)
						{
							if($item != "sub_group_days")
							{
								$plan_saved['shortcut'][$sh]['qty'] += $values['qty'];
								$plan_saved['shortcut'][$sh]['price'] = $values['price'];

// 						$plan_saved['shortcut'][$sh]['total'] = $plan_saved['shortcut'][$sh]['price'] * $plan_saved['shortcut'][$sh]['qty'];
								$plan_saved['shortcut'][$sh]['total'] += $values['qty'] * $values['price'];

								$plan_saved['shortcut'][$sh]['days_array'][] = date('d.m.Y', strtotime($item));
								asort($plan_saved['shortcut'][$sh]['days_array']);
								if($sh == 'pct01')
								{
									$plan_saved['shortcut'][$sh]['days'] = end($plan_saved['shortcut'][$sh]['days_array']);
								}
								else
								{
									$plan_saved['shortcut'][$sh]['days'] = implode(', ', $plan_saved['shortcut'][$sh]['days_array']);
								}
							}
						}
					}
				}
				$plan['shortcut']['hf']['qty'] = 0;
				$plan['shortcut']['hf']['total'] = 0;
				foreach($plan_saved['shortcut'] as $pshcut => $psh_value)
				{
					$plan_saved['shortcut']['hf']['qty'] += $psh_value['qty'];
					$plan_saved['shortcut']['hf']['total'] += $psh_value['total'];
				}

				$plan['system'] = false;
				$plan['shortcut'] = $plan_saved['shortcut'];
			}

			$this->view->plan = $plan;

			/* ----------------------------PDF EXPORT-------------------------------------- */
			if($this->getRequest()->isPost())
			{
				if($_POST['export_pdf'] == '1')
				{
					$post = $_POST;
					$monthsel = $_REQUEST['month'];

					$selectedPeriod[0] = substr($monthsel, 0, 4);
					$selectedPeriod[1] = substr($monthsel, 4);
					$this->view->monthsel = $selectedPeriod[1] . '.' . $selectedPeriod[0];

					$post['plan'] = $this->view->plan;
					$this->generateformPdf(3, $post, 'Anlage7plan', "anlage7plan_pdf.html");
				}
			}
		}

		public function sapvperformanceoverviewoldAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);

			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;

			$patientmaster = new PatientMaster();
// 			$pm = $patientmaster->getMasterData($decid, 0);
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$pm = $patientmaster->get_patientMasterData();
			$this->view->patientdetails = $pm;

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			//enable grouping js
			$weekprice_shortcuts = array('pct03a', 'pct03b', 'pct04a', 'pct04b');
			$verordnet2shortcut = array('3' => array('pct03a', 'pct03b'), '4' => array('pct04a', 'pct04b'));
			/* ------------------------------------------------------------------ */

			//get admission-readmission cycles to extract months where there is at least 1 day active START
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$months = array();
			$active_days = array();
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));
						$discharge_dates[] = $end_with_discharge;

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end_with_discharge));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());
						$discharge_dates[] = $end_without_discharge;

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{

					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}

				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
				$admission_dates[] = $cycle_start_period;
				$discharge_dates[] = $cycle_end_period;
			}

			$admission_dates = array_values(array_unique($admission_dates));
			$discharge_dates = array_values(array_unique($discharge_dates));
			$active_days = array_values(array_unique($active_days));
			$months = array_values(array_unique($months));

			if($_REQUEST['dbgx'])
			{
				print_r('Active days' . "\n");
				print_r($active_days);
				print_r('Start period' . "\n");
				print_r($cycle_start_period);
				print_r('Cycles');
				print_r($cycles);
				print_r('period months' . "\n");
				print_r($period_months);
				print_r('months' . "\n");
				print_r($months);
			}

			$this->view->active_days = $active_days;

			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}

			//get number of days in each month + start/end day END
			//check if a month is selected START
			if(empty($_REQUEST['list']))
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_bra_sapv';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$current_period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			//find if there is a sapv for current period START!
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('"' . date('Y-m-d', strtotime($current_period['start'])) . '" <= verordnungbis')
				->andWhere('"' . date('Y-m-d', strtotime($current_period['end'])) . '" >= verordnungam')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();

			foreach($droparray as $k_sapv => $v_sapv)
			{
				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);
				$all_sapv_days = array_merge($all_sapv_days, $temp_sapv_days);

				foreach($temp_sapv_days as $k_tmp_sapv => $v_tmp_sapv)
				{
					if(!$days2verordnet[$v_tmp_sapv])
					{
						$days2verordnet[$v_tmp_sapv] = array();
					}

					$current_verordnet = explode(',', $v_sapv['verordnet']);
					$days2verordnet[$v_tmp_sapv] = array_merge($days2verordnet[$v_tmp_sapv], $current_verordnet);

					asort($days2verordnet[$v_tmp_sapv]);
					$days2verordnet[$v_tmp_sapv] = array_values(array_unique($days2verordnet[$v_tmp_sapv]));
				}
			}

			$all_sapv_days = array_values(array_unique($all_sapv_days));
			//find if there is a sapv for current period END!
			//get patient locations START
			$disallowed_location_types = array('1', '2'); //hospital and hospiz
			$hospitalids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhereIn('location_type', $disallowed_location_types);
			$hosparray = $hospitalids->fetchArray();

			$hospital_ids[] = '999999999';
			$hospiz_ids[] = '999999999';
			foreach($hosparray as $hospital)
			{
				$hospital_ids[] = $hospital['id'];

				if($hospital['location_type'] == '2') //hospiz
				{
					$hospiz_ids[] = $hospital['id'];
				}
			}

			//get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
//			->andWhereIn('location_id', $hospital_ids)
				->orderBy('valid_from,id ASC');
			$pat_locations = $patloc->fetchArray();

			//get patient all locations
			$patloc_all = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid = "' . $ipid . '"')
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$pat_locations_res_all = $patloc_all->fetchArray();

			$hospital_days = array();
			$hosp_days = array();
			$hospizdays_arr = array();
			$hospiz_days_array = array();
			foreach($pat_locations as $k_pat_loc => $v_pat_loc)
			{
				if(in_array($v_pat_loc['location_id'], $hospital_ids))
				{
					if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
					{
						$till = date('Y-m-d', strtotime('+1 day'));
					}
					else
					{
						$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
					}

					$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
					$r1end = strtotime(date('Y-m-d', strtotime($till)));
					$r2start = strtotime($current_period['start']);
					$r2end = strtotime($current_period['end']);

					if(in_array($v_pat_loc['location_id'], $hospiz_ids))
					{
						$h_location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

						$hospiz_heads['start'][] = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
						$hospiz_heads['end'][] = date('Y-m-d', strtotime($v_pat_loc['valid_till']));

						$hospiz_days_arr = $patientmaster->getDaysInBetween($h_location_start, $till);
						//used in view
						$hospiz_days = array_merge($hospiz_days, $hospiz_days_arr);
					}

					if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
					{
						$period_hosp_locations[] = $v_pat_loc;
						$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

						$hosp = $patientmaster->getDaysInBetween($location_start, $till);
						$hospital_days = array_merge($hospital_days, $hosp);

						if(in_array($v_pat_loc['location_id'], $hospiz_ids))
						{
							$hospizdays_arr = $patientmaster->getDaysInBetween($location_start, $till);
							$hospiz_days_array = array_merge($hospiz_days_array, $hospizdays_arr);
						}
					}

					//			find hosp heads
					$start_hosp_period = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
					$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
					$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
					$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));

					if($_REQUEST['dbg'])
					{
						print_r("Start hosp period\n");
						print_r(date('Y-m-d', $start_hosp_period));
						print_r("\n");
						print_r("End Hosp Period\n");
						print_r($end_hospital_period_formatted);
						print_r("\n");
						print_r("Next Hosp Period\n");
						print_r(date("Y-m-d", $next_start_hosp));
						print_r("\n");
						print_r("Hospital Days");
						print_r($hospital_days);
						print_r("\n");
						print_r("\n");
						print_r("\n");
					}

					//remove end head
					if($end_hospital_period != $next_start_hosp && $start_hosp_period != $end_hospital_period)
					{
						$find = array_search($end_hospital_period_formatted, $hospital_days);
						$removed_days['e'][] = $hospital_days[$find];
						unset($hospital_days[$find]);

						//hospiz end head
						if(!in_array($end_hospital_period_formatted, $discharge_dates))
						{
							$find_hospiz = array_search($end_hospital_period_formatted, $hospiz_days_array);
							$removed_days['e_h'][] = $hospiz_days_array[$find_hospiz];
							unset($hospiz_days_array[$find_hospiz]);
						}
					}

					//remove start head
					if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
					{
						$find_s = '';
						$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
						$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
						$start_hospital_period = $r1start;
						$start_hospital_formatted = date('Y-m-d', $r1start);

						if($start_hosp_period != $previous_till && $start_hosp_period != $end_hospital_period)
						{
							//unset hospital start head
							$find_s = array_search($start_hospital_formatted, $hospital_days);
							$removed_days['s'][] = $hospital_days[$find_s];
							unset($hospital_days[$find_s]);

							if(!in_array($start_hospital_formatted, $admission_dates))
							{
								//unset hospiz start head
								$find_s_hospiz = array_search($start_hospital_formatted, $hospiz_days_array);
								$removed_days['s_h'][] = $hospiz_days_array[$find_s_hospiz];
								unset($hospiz_days_array[$find_s_hospiz]);
							}
						}
					}
					else
					{
						$find_s = '';
						$start_hospital_formatted = date('Y-m-d', $r1start);
						$find_s = array_search($start_hospital_formatted, $hospital_days);
						$removed_days['s2'][] = $hospital_days[$find_s];
						unset($hospital_days[$find_s]);

						if(!in_array($start_hospital_formatted, $admission_dates))
						{
							$find_s_h = '';
							$start_hospital_formatted = date('Y-m-d', $r1start);
							$find_s_h = array_search($start_hospital_formatted, $hospiz_days_array);
							$removed_days['s2_h'][] = $hospiz_days_array[$find_s_h];
							unset($hospiz_days_array[$find_s_h]);
						}
					}
				}
			}

			//hospiz days
			$hospiz_days_arr = array_values(array_unique($hospiz_days_array));
			$full_hospital_days = array_values(array_unique($hospital_days));

			if($_REQUEST['dbg'])
			{
				print_r("pat loc :\n\n");
				print_r($pat_locations);
				print_r("active days:\n\n");
				print_r($active_days);
				print_r("full hosp days :\n\n");
				print_r($full_hospital_days);
				print_r("removed_days :\n\n");
				print_r($removed_days);
				print_r("hospiz days\n");
				print_r($hospiz_days_arr);
			}
			//get patient locations END
			//
		//
		//get shortcuts and saved pricelist or default pricelist
			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']); //get bra sapv pricelist and then shortcuts

			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$totals = array();
			foreach($shortcuts['bra_sapv'] as $k_sh => $v_sh)
			{
				$totals[$v_sh] = '0';
				$totals_pdf[$v_sh] = '0';
			}

			//get form saved data
			$bra_sapv = new BraSapvControl();
			$bra_sapv_data = $bra_sapv->get_bra_sapv_controlsheet($ipid, $current_period['start'], $weekprice_shortcuts, $master_price_list);


			if($bra_sapv_data === false)
			{
				//get deleted cf from patient course
				$deleted_cf = Doctrine_Query::create()
					->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->where('wrong=1')
					->andWhere("ipid='" . $ipid . "'")
					->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
					->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
					->andWhere('source_ipid = ""');
				$deleted_cf_array = $deleted_cf->fetchArray();

				foreach($deleted_cf_array as $k_dcf => $v_dcf)
				{
					$excluded_cf_ids[] = $v_dcf['recordid'];
				}

				//get cf in period - deleted cf
				$cf = new ContactForms();
				$p_contactforms = $cf->get_contact_form_period($ipid, $current_period, $excluded_cf_ids);

				$contact_forms_ids[] = '9999999999999';
				foreach($p_contactforms as $k_cf => $v_cf)
				{
					$contact_forms_ids[] = $v_cf['id'];
					$contact_forms2dates[$v_cf['id']]['start_date'] = $v_cf['start_date'];
					$contact_forms2dates[$v_cf['id']]['end_date'] = $v_cf['end_date'];
					$contact_forms2dates[$v_cf['id']]['date'] = $v_cf['billable_date'];
				}

				//get required form block data for existing cf
				$form_block_bra_sapv = new FormBlockBraSapv();
				$form_block_data = $form_block_bra_sapv->get_multiple_block_bra_sapv($ipid, $contact_forms_ids);

				//calculate doctor/nurse week price periods
				$week_prices = $this->get_patient_week_prices($ipid, $admission_dates, $active_days, $discharge_dates, $current_period, $full_hospital_days, $hospiz_days_arr);
//			print_r($week_prices);
//			exit;
				//append weekprices to master data along with shortcut details
				foreach($week_prices as $k_weekprice => $v_weekprice)
				{
					if(!$master_data['pct03a']['sub_group_days'])
					{
						$master_data['pct03a']['sub_group_days'] = array();
					}

					if(!$master_data['pct03b']['sub_group_days'])
					{
						$master_data['pct03b']['sub_group_days'] = array();
					}

					if(count($master_data['pct04a']['sub_group_days']) == 0)
					{
						$master_data['pct04a']['sub_group_days'] = array();
					}

					if(count($master_data['pct04b']['sub_group_days']) == 0)
					{
						$master_data['pct04b']['sub_group_days'] = array();
					}


					if(in_array($v_weekprice['start'], $current_period_days))
					{
						if($v_weekprice['verordnet'] == '3')
						{
							$master_data['pct03a']['sub_group_days'] = array_merge($master_data['pct03a']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct03a']['sub_group_days2'][] = $v_weekprice['sub_group_days'];
							$master_data['pct03a'][$v_weekprice['start']] = $master_price_list[$v_weekprice['start']][0]['pct03a'];
							$master_data['pct03a'][$v_weekprice['start']]['qty'] = '1';
							$totals['pct03a'] += '1';

							$master_data['pct03b']['sub_group_days'] = array_merge($master_data['pct03b']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct03b']['sub_group_days2'][] = $v_weekprice['sub_group_days'];
							$master_data['pct03b'][$v_weekprice['start']] = $master_price_list[$v_weekprice['start']][0]['pct03b'];
							$master_data['pct03b'][$v_weekprice['start']]['qty'] = '1';
							$totals['pct03b'] += '1';
						}
						else if($v_weekprice['verordnet'] == '4')
						{
							$master_data['pct04a']['sub_group_days'] = array_merge($master_data['pct04a']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct04a'][$v_weekprice['start']] = $master_price_list[$v_weekprice['start']][0]['pct04a'];
							$master_data['pct04a'][$v_weekprice['start']]['qty'] = '1';
							$totals['pct04a'] += '1';

							$master_data['pct04b']['sub_group_days'] = array_merge($master_data['pct04b']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct04b'][$v_weekprice['start']] = $master_price_list[$v_weekprice['start']][0]['pct04b'];
							$master_data['pct04b'][$v_weekprice['start']]['qty'] = '1';
							$totals['pct04b'] += '1';
						}
					}
					else if(strtotime($v_weekprice['start']) >= strtotime('-7 days', strtotime($current_period['start'])) && strtotime($v_weekprice['start']) < strtotime($current_period['start']))
					{
						if($v_weekprice['verordnet'] == '3' && strlen($v_weekprice['shortcut']) == '0')
						{
							$master_data['pct03a']['sub_group_days'] = array_merge($master_data['pct03a']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct03b']['sub_group_days'] = array_merge($master_data['pct03b']['sub_group_days'], $v_weekprice['sub_group_days']);
						}
						else if($v_weekprice['verordnet'] == '4' && strlen($v_weekprice['shortcut']) == '0')
						{
							$master_data['pct04a']['sub_group_days'] = array_merge($master_data['pct04a']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct04b']['sub_group_days'] = array_merge($master_data['pct04b']['sub_group_days'], $v_weekprice['sub_group_days']);
						}
						else if(empty($v_weekprice['verordnet']) && strlen($v_weekprice['shortcut']) > 0)
						{
							//load remaining group days from previous month
							$master_data[$v_weekprice['shortcut']]['sub_group_days'] = array_merge($master_data[$v_weekprice['shortcut']]['sub_group_days'], $v_weekprice['sub_group_days']);
						}
					}
				}

				foreach($shortcuts['bra_sapv'] as $k_short => $v_short)
				{
					if($v_short == 'pct01')
					{
						foreach($admission_dates as $k_adm => $v_adm)
						{
							if(in_array($v_adm, $active_days) && in_array($v_adm, $all_sapv_days) && !in_array($v_adm, $full_hospital_days) && !in_array($v_adm, $hospiz_days_arr) && in_array($v_adm, $current_period_days))
							{
								$master_data[$v_short][$v_adm] = $master_price_list[$v_adm][0][$v_short];
								$master_data[$v_short][$v_adm]['qty'] = '1';
								$totals[$v_short] += '1';
							}
						}
					}


					if($v_short == 'pct02')
					{
						if(in_array($admission_dates[0], $active_days) && in_array($admission_dates[0], $all_sapv_days) && !in_array($admission_dates[0], $full_hospital_days) && !in_array($admission_dates[0], $hospiz_days_arr) && in_array($v_adm, $current_period_days))
						{
							$master_data[$v_short][$admission_dates[0]] = $master_price_list[$admission_dates[0]][0][$v_short];
							$master_data[$v_short][$admission_dates[0]]['qty'] = '1';
							$totals[$v_short] += '1';
						}
					}

					if($v_short == 'hf01')
					{
						foreach($cycles[$ipid]['admissionDates'] as $k_adm => $v_adm)
						{
							if($v_adm['special_medical_assistance'] == '1')
							{
								$adm_date = date('Y-m-d', strtotime($v_adm['date']));

								if(in_array($adm_date, $current_period_days))
								{
									$master_data[$v_short][$adm_date] = $master_price_list[$adm_date][0][$v_short];
									$master_data[$v_short][$adm_date]['qty'] = '1';
									$totals[$v_short] += '1';
								}
							}
						}
					}

					if($v_short == 'pct05')
					{
						foreach($form_block_data as $k_cf_id => $v_form_block_data)
						{
							$cf_date = date('Y-m-d', strtotime($contact_forms2dates[$k_cf_id]['date']));

							if($v_form_block_data['sapv_team_doctor'] == '1' && in_array($cf_date, $active_days) && in_array($cf_date, $current_period_days))
							{
								if(!$master_data[$v_short][$cf_date])
								{
									$master_data[$v_short][$cf_date] = $master_price_list[$cf_date][0][$v_short];
								}
								$master_data[$v_short][$cf_date]['qty'] += '1';
								$totals[$v_short] += '1';

								//create shortcut hf02 which is linked with pct05
								if(!$master_data['hf02'][$cf_date])
								{
									$master_data['hf02'][$cf_date] = $master_price_list[$cf_date][0]['hf02'];
								}
								$master_data['hf02'][$cf_date]['qty'] += '1';
								$totals['hf02'] += '1';
							}
						}
					}
				}
			}
			else
			{
				$master_data = $bra_sapv_data;
				$totals = array_merge($totals, $bra_sapv_data['totals']);
			}

			if($this->getRequest()->isPost())
			{
				if(strlen($_REQUEST['list']) > 0)
				{
					$period_list = '&list=' . $_REQUEST['list'];
				}
				else
				{
					$period_list = '';
				}

				if($_POST['save'])
				{
					//clear old entries for curent month
					$reset_sapv_form_data = Application_Form_BraSapv::reset_bra_sapv($ipid, $current_period['start']);

					//insert
					$insert_sapv_form_data = Application_Form_BraSapv::insert_bra_sapv_values($ipid, $_POST, $current_period_days, $shortcuts['bra_sapv'], $weekprice_shortcuts);
					$this->_redirect(APP_BASE . 'patientform/sapvperformanceoverview?id=' . $_REQUEST['id'] . $period_list);
					exit;
				}
				else if($_POST['pdf'])
				{
					$post['post_data'] = $_POST;
					$post['shortcuts'] = $shortcuts['bra_sapv'];
					$post['totals'] = $totals_pdf; //empty totals per shortcut
					$post['month_days'] = $current_period_days;
					$post['active_days'] = $active_days;
					$post['all_sapv_days'] = $all_sapv_days;
					$post['full_hospital_days'] = $full_hospital_days;
					$post['full_hospiz_days'] = $hospiz_days_arr;
					$post['master_price_list'] = $master_price_list;
					$post['current_period'] = $current_period;
					$post['verordnet2shortcut'] = $verordnet2shortcut;
					$post['days2verordnet'] = $days2verordnet;
					$post['week_price_shortcuts'] = $week_price_shortcuts;

					$gen_pdf = $this->generate_pdf($post, 'sapvperformanceoverview', 'sapvperformanceoverview_pdf.html');
				}
				else if($_POST['reset'])
				{
					$reset_sapv_form_data = Application_Form_BraSapv::reset_bra_sapv($ipid, $current_period['start']);
					$this->_redirect(APP_BASE . 'patientform/sapvperformanceoverview?id=' . $_REQUEST['id'] . $period_list);
					exit;
				}
			}

			$this->view->shortcuts = $shortcuts['bra_sapv'];
			$this->view->master_data = $master_data;
			$this->view->month_days = $current_period_days;
			$this->view->active_days = $active_days;
			$this->view->all_sapv_days = $all_sapv_days;
			$this->view->full_hospital_days = $full_hospital_days;
			$this->view->full_hospiz_days = $hospiz_days_arr;
			$this->view->totals = $totals;
			$this->view->week_price_shortcuts = $weekprice_shortcuts;
			$this->view->verordnet2shortcuts = $verordnet2shortcut;
			$this->view->days2verordnet = $days2verordnet;
			$this->view->master_price_list = $master_price_list;
			$this->view->current_period = $current_period;
		}

		public function sapvperformanceoverviewAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);

			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;

			$patientmaster = new PatientMaster();
// 			$pm = $patientmaster->getMasterData($decid, 0);
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$pm = $patientmaster->get_patientMasterData();
			$this->view->patientdetails = $pm;

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			//enable grouping js
			$weekprice_shortcuts = array('pct03a', 'pct03b', 'pct04a', 'pct04b');
			$verordnet2shortcut = array('3' => array('pct03a', 'pct03b'), '4' => array('pct04a', 'pct04b'));
			/* ------------------------------------------------------------------ */

			//get admission-readmission cycles to extract months where there is at least 1 day active START
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$months = array();
			$active_days = array();
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));
						$discharge_dates[] = $end_with_discharge;

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end_with_discharge));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());
						$discharge_dates[] = $end_without_discharge;

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(empty($cycles[$ipid]['discharge_date']))
				{

					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}

				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
				$admission_dates[] = $cycle_start_period;
				$discharge_dates[] = $cycle_end_period;
			}

			$admission_dates = array_values(array_unique($admission_dates));
			$discharge_dates = array_values(array_unique($discharge_dates));
			$active_days = array_values(array_unique($active_days));
			$months = array_values(array_unique($months));

			if($_REQUEST['dbgx'])
			{
				print_r('Active days' . "\n");
				print_r($active_days);
				print_r('Start period' . "\n");
				print_r($cycle_start_period);
				print_r('Cycles');
				print_r($cycles);
				print_r('period months' . "\n");
				print_r($period_months);
				print_r('months' . "\n");
				print_r($months);
			}

			$this->view->active_days = $active_days;

			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}

			//get number of days in each month + start/end day END
			//check if a month is selected START
			if(empty($_REQUEST['list']))
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_bra_sapv';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$current_period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);

			//find if there is a sapv for current period START!
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('"' . date('Y-m-d', strtotime($current_period['start'])) . '" <= verordnungbis')
				->andWhere('"' . date('Y-m-d', strtotime($current_period['end'])) . '" >= verordnungam')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();

			foreach($droparray as $k_sapv => $v_sapv)
			{
				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);
				$all_sapv_days = array_merge($all_sapv_days, $temp_sapv_days);

				foreach($temp_sapv_days as $k_tmp_sapv => $v_tmp_sapv)
				{
					if(!$days2verordnet[$v_tmp_sapv])
					{
						$days2verordnet[$v_tmp_sapv] = array();
					}

					$current_verordnet = explode(',', $v_sapv['verordnet']);
					$days2verordnet[$v_tmp_sapv] = array_merge($days2verordnet[$v_tmp_sapv], $current_verordnet);

					asort($days2verordnet[$v_tmp_sapv]);
					$days2verordnet[$v_tmp_sapv] = array_values(array_unique($days2verordnet[$v_tmp_sapv]));
				}
			}

			$all_sapv_days = array_values(array_unique($all_sapv_days));
			//find if there is a sapv for current period END!
			//get patient locations START
//		$disallowed_location_types = array('1', '2'); //hospital and hospiz
//		$hospitalids = Doctrine_Query::create()
//			->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
//			->from('Locations')
//			->where('isdelete = 0')
//			->andWhere('client_id ="' . $clientid . '"')
//			->andWhereIn('location_type', $disallowed_location_types);
//		$hosparray = $hospitalids->fetchArray();
//
//		$hospital_ids[] = '999999999';
//		$hospiz_ids[] = '999999999';
//		foreach ($hosparray as $hospital)
//		{
//			$hospital_ids[] = $hospital['id'];
//
//			if ($hospital['location_type'] == '2') //hospiz
//			{
//				$hospiz_ids[] = $hospital['id'];
//			}
//		}
//
//		//get patient hospital locations if it has
//		$patloc = Doctrine_Query::create()
//			->select('*')
//			->from('PatientLocation')
//			->where('ipid ="' . $ipid . '"')
//			->andWhere('isdelete="0"')
////			->andWhereIn('location_id', $hospital_ids)
//			->orderBy('valid_from,id ASC');
//		$pat_locations = $patloc->fetchArray();
//
//		//get patient all locations
//		$patloc_all = Doctrine_Query::create()
//			->select('*')
//			->from('PatientLocation')
//			->where('ipid = "' . $ipid . '"')
//			->andWhere('isdelete="0"')
//			->orderBy('valid_from,id ASC');
//		$pat_locations_res_all = $patloc_all->fetchArray();
//
//		$hospital_days = array();
//		$hosp_days = array();
//		$hospizdays_arr = array();
//		$hospiz_days_array = array();
//		foreach ($pat_locations as $k_pat_loc => $v_pat_loc)
//		{
//			if(in_array($v_pat_loc['location_id'], $hospital_ids))
//			{
//				if ($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
//				{
//					$till = date('Y-m-d', strtotime('+1 day'));
//				}
//				else
//				{
//					$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
//				}
//
//				$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
//				$r1end = strtotime(date('Y-m-d', strtotime($till)));
//				$r2start = strtotime($current_period['start']);
//				$r2end = strtotime($current_period['end']);
//
//				if (in_array($v_pat_loc['location_id'], $hospiz_ids))
//				{
//					$h_location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
//
//					$hospiz_heads['start'][] = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
//					$hospiz_heads['end'][] = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
//
//					$hospiz_days_arr = $patientmaster->getDaysInBetween($h_location_start, $till);
//					//used in view
//					$hospiz_days = array_merge($hospiz_days, $hospiz_days_arr);
//				}
//
//				if (Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
//				{
//					$period_hosp_locations[] = $v_pat_loc;
//					$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
//
//					$hosp = $patientmaster->getDaysInBetween($location_start, $till);
//					$hospital_days = array_merge($hospital_days, $hosp);
//
//					if (in_array($v_pat_loc['location_id'], $hospiz_ids))
//					{
//						$hospizdays_arr = $patientmaster->getDaysInBetween($location_start, $till);
//						$hospiz_days_array = array_merge($hospiz_days_array, $hospizdays_arr);
//					}
//				}
//
//	//			find hosp heads
//				$start_hosp_period = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
//				$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
//				$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
//				$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));
//
//				if($_REQUEST['dbg'])
//				{
//					print_r("Start hosp period\n");
//					print_r(date('Y-m-d', $start_hosp_period));
//					print_r("\n");
//					print_r("End Hosp Period\n");
//					print_r($end_hospital_period_formatted);
//					print_r("\n");
//					print_r("Next Hosp Period\n");
//					print_r(date("Y-m-d", $next_start_hosp));
//					print_r("\n");
//					print_r("Hospital Days");
//					print_r($hospital_days);
//					print_r("\n");
//					print_r("\n");
//					print_r("\n");
//				}
//
//				//remove end head
//				if ($end_hospital_period != $next_start_hosp && $start_hosp_period != $end_hospital_period)
//				{
//					$find = array_search($end_hospital_period_formatted, $hospital_days);
//					$removed_days['e'][] = $hospital_days[$find];
//					unset($hospital_days[$find]);
//
//					//hospiz end head
//					if (!in_array($end_hospital_period_formatted, $discharge_dates))
//					{
//						$find_hospiz = array_search($end_hospital_period_formatted, $hospiz_days_array);
//						$removed_days['e_h'][] = $hospiz_days_array[$find_hospiz];
//						unset($hospiz_days_array[$find_hospiz]);
//					}
//				}
//
//				//remove start head
//				if (!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
//				{
//					$find_s = '';
//					$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
//					$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
//					$start_hospital_period = $r1start;
//					$start_hospital_formatted = date('Y-m-d', $r1start);
//
//					if ($start_hosp_period != $previous_till && $start_hosp_period != $end_hospital_period)
//					{
//						//unset hospital start head
//						$find_s = array_search($start_hospital_formatted, $hospital_days);
//						$removed_days['s'][] = $hospital_days[$find_s];
//						unset($hospital_days[$find_s]);
//
//						if (!in_array($start_hospital_formatted, $admission_dates))
//						{
//							//unset hospiz start head
//							$find_s_hospiz = array_search($start_hospital_formatted, $hospiz_days_array);
//							$removed_days['s_h'][] = $hospiz_days_array[$find_s_hospiz];
//							unset($hospiz_days_array[$find_s_hospiz]);
//						}
//					}
//				}
//				else
//				{
//					$find_s = '';
//					$start_hospital_formatted = date('Y-m-d', $r1start);
//					$find_s = array_search($start_hospital_formatted, $hospital_days);
//					$removed_days['s2'][] = $hospital_days[$find_s];
//					unset($hospital_days[$find_s]);
//
//					if (!in_array($start_hospital_formatted, $admission_dates))
//					{
//						$find_s_h = '';
//						$start_hospital_formatted = date('Y-m-d', $r1start);
//						$find_s_h = array_search($start_hospital_formatted, $hospiz_days_array);
//						$removed_days['s2_h'][] = $hospiz_days_array[$find_s_h];
//						unset($hospiz_days_array[$find_s_h]);
//					}
//				}
//			}
//		}
//
//		//hospiz days
//		$hospiz_days_arr = array_values(array_unique($hospiz_days_array));
//		$full_hospital_days = array_values(array_unique($hospital_days));
//
//
//Client Hospital Settings START
			//curent period
			$conditions['periods'][0]['start'] = $current_period['start'];
			$conditions['periods'][0]['end'] = $current_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$patient_days = Pms_CommonData::patients_days($conditions);

			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
			$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];
			$active_days_cs = $patient_days[$ipid]['active_days'];


			foreach($hospital_days_cs as $k_hospital_cs => $v_hospital_cs)
			{
				$hospital_days_cs[$k_hospital_cs] = date('Y-m-d', strtotime($v_hospital_cs));
			}

			foreach($hospiz_days_cs as $k_hospiz_cs => $v_hospiz_cs)
			{
				$hospiz_days_cs[$k_hospiz_cs] = date('Y-m-d', strtotime($v_hospiz_cs));
			}

			foreach($active_days_cs as $k_pat_cycle_cs => $v_pat_cycle_cs)
			{
				$active_days_cs[$k_pat_cycle_cs] = date('Y-m-d', strtotime($v_pat_cycle_cs));
			}

			if($_REQUEST['csdbg'])
			{
				print_r("Old hospital_days\n");
				print_r($full_hospital_days);

				print_r("CS hospital_days\n");
				print_r($hospital_days_cs);

				print_r("Old hospiz_days\n");
				print_r($hospiz_days_arr);

				print_r("CS hospiz_days\n");
				print_r($hospiz_days_cs);

				print_r("Old active_days_in_period\n");
				print_r($active_days_in_period);

				print_r("CS active_days_in_period\n");
				print_r($active_days_in_period_cs);

				print_r("Old active_days\n");
				print_r($active_days);

				print_r("CS active_days\n");
				print_r($active_days_cs);

				print_r("OLD Admission Dates\n");
				print_r($admission_dates);

				print_r("OLD Discharge Dates\n");
				print_r($discharge_dates);

				print_r($patient_days);

				exit;
			}
//Client Hospital Settings END


			if($_REQUEST['dbg'])
			{
				print_r("pat loc :\n\n");
				print_r($pat_locations);
				print_r("active days:\n\n");
				print_r($active_days);
				print_r("full hosp days :\n\n");
				print_r($full_hospital_days);
				print_r("removed_days :\n\n");
				print_r($removed_days);
				print_r("hospiz days\n");
				print_r($hospiz_days_arr);
			}
			//get patient locations END
			//
		//
		//get shortcuts and saved pricelist or default pricelist
			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']); //get bra sapv pricelist and then shortcuts

			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$totals = array();
			foreach($shortcuts['bra_sapv'] as $k_sh => $v_sh)
			{
				$totals[$v_sh] = '0';
				$totals_pdf[$v_sh] = '0';
			}

			//get form saved data
			$bra_sapv = new BraSapvControl();
			$bra_sapv_data = $bra_sapv->get_bra_sapv_controlsheet($ipid, $current_period['start'], $weekprice_shortcuts, $master_price_list);

			if($bra_sapv_data === false)
			{
				//get deleted cf from patient course
				$deleted_cf = Doctrine_Query::create()
					->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->where('wrong=1')
					->andWhere("ipid='" . $ipid . "'")
					->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
					->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
					->andWhere('source_ipid = ""');
				$deleted_cf_array = $deleted_cf->fetchArray();

				foreach($deleted_cf_array as $k_dcf => $v_dcf)
				{
					$excluded_cf_ids[] = $v_dcf['recordid'];
				}

				//get cf in period - deleted cf
				$cf = new ContactForms();
				$p_contactforms = $cf->get_contact_form_period($ipid, $current_period, $excluded_cf_ids);

				$contact_forms_ids[] = '9999999999999';
				foreach($p_contactforms as $k_cf => $v_cf)
				{
					$contact_forms_ids[] = $v_cf['id'];
					$contact_forms2dates[$v_cf['id']]['start_date'] = $v_cf['start_date'];
					$contact_forms2dates[$v_cf['id']]['end_date'] = $v_cf['end_date'];
					$contact_forms2dates[$v_cf['id']]['date'] = $v_cf['billable_date'];
				}

				//get required form block data for existing cf
				$form_block_bra_sapv = new FormBlockBraSapv();
				$form_block_data = $form_block_bra_sapv->get_multiple_block_bra_sapv($ipid, $contact_forms_ids);

				//calculate doctor/nurse week price periods
				$week_prices = $this->get_patient_week_prices($ipid, $admission_dates, $active_days_cs, $discharge_dates, $current_period, $hospital_days_cs, $hospiz_days_cs);
//			print_r($week_prices);
//			exit;
				//append weekprices to master data along with shortcut details
				foreach($week_prices as $k_weekprice => $v_weekprice)
				{
					if(!$master_data['pct03a']['sub_group_days'])
					{
						$master_data['pct03a']['sub_group_days'] = array();
					}

					if(!$master_data['pct03b']['sub_group_days'])
					{
						$master_data['pct03b']['sub_group_days'] = array();
					}

					if(count($master_data['pct04a']['sub_group_days']) == 0)
					{
						$master_data['pct04a']['sub_group_days'] = array();
					}

					if(count($master_data['pct04b']['sub_group_days']) == 0)
					{
						$master_data['pct04b']['sub_group_days'] = array();
					}


					if(in_array($v_weekprice['start'], $current_period_days))
					{
						if($v_weekprice['verordnet'] == '3')
						{
							$master_data['pct03a']['sub_group_days'] = array_merge($master_data['pct03a']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct03a']['sub_group_days2'][] = $v_weekprice['sub_group_days'];
							$master_data['pct03a'][$v_weekprice['start']] = $master_price_list[$v_weekprice['start']][0]['pct03a'];
							$master_data['pct03a'][$v_weekprice['start']]['qty'] = '1';
							$totals['pct03a'] += '1';

							$master_data['pct03b']['sub_group_days'] = array_merge($master_data['pct03b']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct03b']['sub_group_days2'][] = $v_weekprice['sub_group_days'];
							$master_data['pct03b'][$v_weekprice['start']] = $master_price_list[$v_weekprice['start']][0]['pct03b'];
							$master_data['pct03b'][$v_weekprice['start']]['qty'] = '1';
							$totals['pct03b'] += '1';
						}
						else if($v_weekprice['verordnet'] == '4')
						{
							$master_data['pct04a']['sub_group_days'] = array_merge($master_data['pct04a']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct04a'][$v_weekprice['start']] = $master_price_list[$v_weekprice['start']][0]['pct04a'];
							$master_data['pct04a'][$v_weekprice['start']]['qty'] = '1';
							$totals['pct04a'] += '1';

							$master_data['pct04b']['sub_group_days'] = array_merge($master_data['pct04b']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct04b'][$v_weekprice['start']] = $master_price_list[$v_weekprice['start']][0]['pct04b'];
							$master_data['pct04b'][$v_weekprice['start']]['qty'] = '1';
							$totals['pct04b'] += '1';
						}
					}
					else if(strtotime($v_weekprice['start']) >= strtotime('-7 days', strtotime($current_period['start'])) && strtotime($v_weekprice['start']) < strtotime($current_period['start']))
					{
						if($v_weekprice['verordnet'] == '3' && strlen($v_weekprice['shortcut']) == '0')
						{
							$master_data['pct03a']['sub_group_days'] = array_merge($master_data['pct03a']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct03b']['sub_group_days'] = array_merge($master_data['pct03b']['sub_group_days'], $v_weekprice['sub_group_days']);
						}
						else if($v_weekprice['verordnet'] == '4' && strlen($v_weekprice['shortcut']) == '0')
						{
							$master_data['pct04a']['sub_group_days'] = array_merge($master_data['pct04a']['sub_group_days'], $v_weekprice['sub_group_days']);
							$master_data['pct04b']['sub_group_days'] = array_merge($master_data['pct04b']['sub_group_days'], $v_weekprice['sub_group_days']);
						}
						else if(empty($v_weekprice['verordnet']) && strlen($v_weekprice['shortcut']) > 0)
						{
							//load remaining group days from previous month
							$master_data[$v_weekprice['shortcut']]['sub_group_days'] = array_merge($master_data[$v_weekprice['shortcut']]['sub_group_days'], $v_weekprice['sub_group_days']);
						}
					}
				}

				foreach($shortcuts['bra_sapv'] as $k_short => $v_short)
				{
					if($v_short == 'pct01')
					{
						foreach($admission_dates as $k_adm => $v_adm)
						{
							if(in_array($v_adm, $active_days_cs) && in_array($v_adm, $all_sapv_days) && !in_array($v_adm, $hospital_days_cs) && !in_array($v_adm, $hospiz_days_cs) && in_array($v_adm, $current_period_days))
							{
								$master_data[$v_short][$v_adm] = $master_price_list[$v_adm][0][$v_short];
								$master_data[$v_short][$v_adm]['qty'] = '1';
								$totals[$v_short] += '1';
							}
						}
					}


					if($v_short == 'pct02')
					{
						if(in_array($admission_dates[0], $active_days_cs) && in_array($admission_dates[0], $all_sapv_days) && !in_array($admission_dates[0], $hospital_days_cs) && !in_array($admission_dates[0], $hospiz_days_cs) && in_array($v_adm, $current_period_days))
						{
							$master_data[$v_short][$admission_dates[0]] = $master_price_list[$admission_dates[0]][0][$v_short];
							$master_data[$v_short][$admission_dates[0]]['qty'] = '1';
							$totals[$v_short] += '1';
						}
					}

					if($v_short == 'hf01')
					{
						foreach($cycles[$ipid]['admissionDates'] as $k_adm => $v_adm)
						{
							if($v_adm['special_medical_assistance'] == '1')
							{
								$adm_date = date('Y-m-d', strtotime($v_adm['date']));

								if(in_array($adm_date, $current_period_days))
								{
									$master_data[$v_short][$adm_date] = $master_price_list[$adm_date][0][$v_short];
									$master_data[$v_short][$adm_date]['qty'] = '1';
									$totals[$v_short] += '1';
								}
							}
						}
					}

					if($v_short == 'pct05')
					{
						foreach($form_block_data as $k_cf_id => $v_form_block_data)
						{
							$cf_date = date('Y-m-d', strtotime($contact_forms2dates[$k_cf_id]['date']));

							if($v_form_block_data['sapv_team_doctor'] == '1' && in_array($cf_date, $active_days_cs) && in_array($cf_date, $current_period_days))
							{
								if(!$master_data[$v_short][$cf_date])
								{
									$master_data[$v_short][$cf_date] = $master_price_list[$cf_date][0][$v_short];
								}
								$master_data[$v_short][$cf_date]['qty'] += '1';
								$totals[$v_short] += '1';

								//create shortcut hf02 which is linked with pct05
								if(!$master_data['hf02'][$cf_date])
								{
									$master_data['hf02'][$cf_date] = $master_price_list[$cf_date][0]['hf02'];
								}
								$master_data['hf02'][$cf_date]['qty'] += '1';
								$totals['hf02'] += '1';
							}
						}
					}
				}
			}
			else
			{
				$master_data = $bra_sapv_data;
				$totals = array_merge($totals, $bra_sapv_data['totals']);
			}

			if($this->getRequest()->isPost())
			{
				if(strlen($_REQUEST['list']) > 0)
				{
					$period_list = '&list=' . $_REQUEST['list'];
				}
				else
				{
					$period_list = '';
				}

				if($_POST['save'])
				{
					//clear old entries for curent month
					$reset_sapv_form_data = Application_Form_BraSapv::reset_bra_sapv($ipid, $current_period['start']);

					//insert
					$insert_sapv_form_data = Application_Form_BraSapv::insert_bra_sapv_values($ipid, $_POST, $current_period_days, $shortcuts['bra_sapv'], $weekprice_shortcuts);
					$this->_redirect(APP_BASE . 'patientform/sapvperformanceoverview?id=' . $_REQUEST['id'] . $period_list);
					exit;
				}
				else if($_POST['pdf'])
				{
					$post['post_data'] = $_POST;
					$post['shortcuts'] = $shortcuts['bra_sapv'];
					$post['totals'] = $totals_pdf; //empty totals per shortcut
					$post['month_days'] = $current_period_days;
					$post['active_days'] = $active_days_cs;
					$post['all_sapv_days'] = $all_sapv_days;
					$post['full_hospital_days'] = $hospital_days_cs;
					$post['full_hospiz_days'] = $hospiz_days_cs;
					$post['master_price_list'] = $master_price_list;
					$post['current_period'] = $current_period;
					$post['verordnet2shortcut'] = $verordnet2shortcut;
					$post['days2verordnet'] = $days2verordnet;
					$post['week_price_shortcuts'] = $week_price_shortcuts;

					$gen_pdf = $this->generate_pdf($post, 'sapvperformanceoverview', 'sapvperformanceoverview_pdf.html');
				}
				else if($_POST['reset'])
				{
					$reset_sapv_form_data = Application_Form_BraSapv::reset_bra_sapv($ipid, $current_period['start']);
					$this->_redirect(APP_BASE . 'patientform/sapvperformanceoverview?id=' . $_REQUEST['id'] . $period_list);
					exit;
				}
			}

			$this->view->shortcuts = $shortcuts['bra_sapv'];
			$this->view->master_data = $master_data;
			$this->view->month_days = $current_period_days;
			$this->view->active_days = $active_days_cs;
			$this->view->all_sapv_days = $all_sapv_days;
			$this->view->full_hospital_days = $hospital_days_cs;
			$this->view->full_hospiz_days = $hospiz_days_cs;
			$this->view->totals = $totals;
			$this->view->week_price_shortcuts = $weekprice_shortcuts;
			$this->view->verordnet2shortcuts = $verordnet2shortcut;
			$this->view->days2verordnet = $days2verordnet;
			$this->view->master_price_list = $master_price_list;
			$this->view->current_period = $current_period;
		}

		private function get_patient_week_prices($ipid, $admission_dates, $active_days, $discharge_dates, $current_period, $full_hospital_days, $hospiz_days_arr)
		{
			$pm = new PatientMaster();

			//construct dishcarged days arr
			$discharged_days = array();
			foreach($discharge_dates as $k_dis => $v_dis)
			{
				$next_key = ($k_dis + 1);

				if(array_key_exists($next_key, $admission_dates))
				{
					$disdays = $pm->getDaysInBetween($v_dis, $admission_dates[$next_key]);
					$discharged_days = array_merge($discharged_days, $disdays);
				}
				else
				{
					$discharged_days[] = $v_dis;
				}
			}

			//construct current period days
			$current_period_days = $pm->getDaysInBetween($current_period['start'], $current_period['end']);

			//get all patient sapvs and locate first sapv
			//find if there is a sapv for current period START!
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->andWhere('verordnet LIKE "%4%" or verordnet LIKE "%3%"')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();

			foreach($droparray as $k_sapv => $v_sapv)
			{
				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $pm->getDaysInBetween($s_start, $s_end);
				$all_sapv_days = array_merge($all_sapv_days, $temp_sapv_days);

				//verordnet per days
				foreach($temp_sapv_days as $k_tmp_sapv => $v_tmp_sapv)
				{
					if(!$days2verordnet[$v_tmp_sapv])
					{
						$days2verordnet[$v_tmp_sapv] = array();
					}

					$current_verordnet = explode(',', $v_sapv['verordnet']);
					$days2verordnet[$v_tmp_sapv] = array_merge($days2verordnet[$v_tmp_sapv], $current_verordnet);

					asort($days2verordnet[$v_tmp_sapv]);
					$days2verordnet[$v_tmp_sapv] = array_values(array_unique($days2verordnet[$v_tmp_sapv]));
				}
			}

			$all_sapv_days = array_values(array_unique($all_sapv_days));

			//find if there is a sapv for current period END!
			//find first week period start day
			foreach($all_sapv_days as $k_sapv_day => $v_sapv_day)
			{
				if(in_array($v_sapv_day, $active_days) && !in_array($v_sapv_day, $full_hospital_days) && !in_array($v_sapv_day, $hospiz_days_arr) && strlen($first_sapv_weekprice_start) == 0)
				{
					$first_sapv_weekprice_start = $v_sapv_day;
				}
			}

			$starter_previous_month = date('Y-m-d', strtotime('-6 days', strtotime($current_period['start'])));
			$end_previous_month = date('Y-m-d', strtotime('-1 day', strtotime($current_period['start'])));

			//search for previous month incomplete saved group
			$query = Doctrine_Query::create()
				->select('*')
				->from('BraSapvControl')
				->whereIn('ipid', $ipid)
				->andWhere('DATE(date) BETWEEN "' . $starter_previous_month . '" AND "' . $end_previous_month . '"')
				->andwhere('value="1"')
				->andwhere('starter="1"');
			$q_res = $query->fetchArray();

			if(strlen($first_sapv_weekprice_start) > 0)
			{
				//loop: 7 days from start weekprice
				$current_time = strtotime($first_sapv_weekprice_start);
				$end_time = strtotime(end($discharge_dates));
				$format = 'Y-m-d';

				$incr = 0;
				while($current_time <= $end_time)
				{
					$current_date = date($format, $current_time);
					if(in_array($current_date, $active_days) && in_array($current_date, $all_sapv_days) && !in_array($current_date, $full_hospital_days) && !in_array($current_date, $hospiz_days_arr))
					{

						if(!$start_days[$incr]['sub_group_days'])
						{
							$start_days[$incr]['sub_group_days'] = array();
						}

						$group_next_day = date($format, strtotime('+1 day', $current_time));
						$group_last_day = date($format, strtotime('+6 day', $current_time));

						$start_days[$incr]['start'] = date($format, $current_time);
						$start_days[$incr]['verordnet'] = end($days2verordnet[$current_date]);
						$start_days_first = $pm->getDaysInBetween($group_next_day, $group_last_day);
						$start_days[$incr]['sub_group_days'] = array_merge($start_days[$incr]['sub_group_days'], $start_days_first);
						$incr++;
					}

					$current_time = strtotime('+1 week', $current_time);
				}

				if($q_res)
				{
					$incr++;
					foreach($q_res as $k_res => $v_res)
					{
						if(!$start_days[$incr]['sub_group_days'])
						{
							$start_days[$incr]['sub_group_days'] = array();
						}
						$group_prev_next_day = date($format, strtotime('+1 day', strtotime($v_res['date'])));
						$group_prev_last_day = date($format, strtotime('+6 day', strtotime($v_res['date'])));

						$start_days[$incr]['start'] = date($format, strtotime($v_res['date']));

						$start_days[$incr]['shortcut'] = $v_res['shortcut'];
						$start_days_second = $pm->getDaysInBetween($group_prev_next_day, $group_prev_last_day);
						$start_days[$incr]['sub_group_days'] = array_merge($start_days[$incr]['sub_group_days'], $start_days_second);
						$incr++;
					}
				}

				return $start_days;
			}
			else
			{
				return false;
			}
		}

		public function anlage5part2Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpidFromId($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->patid = $decid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();
			$this->view->patient_details = $patientinfo;
			$this->view->isdischarged = $patientinfo['isdischarged'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$pdh = new PatientDrugPlanHistory();
			$pdp = new PatientDrugPlan();
			$mm = new Medication();

			$predefined_diagnosis = Pms_CommonData::anlage5_part2_diagnosis();
			$this->view->predefined_diagnosis = $predefined_diagnosis;
			/*			 * ******************************************** */

			//GET DATA
			//calculate number of weeks to show from admission
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);
			$periods_selector[-1] = $this->view->translate('select_period');
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));
					}
					else
					{
						$start = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end = date('Y-m-d', time());
					}

					$start_formated = date('d.m.Y', strtotime($start));
					$end_formated = date('d.m.Y', strtotime($end));
					$periods_selector[$key_adm] = $start_formated . ' - ' . $end_formated;

					$periods[$key_adm]['start'] = $start;
					$periods[$key_adm]['end'] = $end;

					$fall_weeks[$key_adm]['start'] = $start;
					$fall_weeks[$key_adm]['end'] = $end;
					$fall_weeks[$key_adm]['period'] = $key_adm;
				}
			}
			else
			{
				$start = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

				if(strlen($cycles[$ipid]['discharge_date']))
				{

					$end = date('Y-m-d', time());
				}
				else
				{
					$end = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}

				$start_formated = date('d.m.Y', strtotime($start));
				$end_formated = date('d.m.Y', strtotime($end));
				$periods_selector[0] = $start_formated . ' - ' . $end_formated;

				$periods[0]['start'] = $start;
				$periods[0]['end'] = $end;

				$fall_weeks['0']['start'] = $start;
				$fall_weeks['0']['end'] = $end;
				$fall_weeks['0']['period'] = '0';
			}

			//calculate weeks for each period and start-end range
			$incr = '0';
			foreach($periods as $k_period => $v_period)
			{
				$weeks_days[$k_period] = $pdh->get_period_weeks($v_period['start'], $v_period['end']);

				foreach($weeks_days[$k_period] as $k_week_days => $v_week_days)
				{
					$week_periods[$k_period][$incr]['start'] = $v_week_days[0];
					$last_week_day = end($v_week_days);
					$week_periods[$k_period][$incr]['end'] = $last_week_day;

					$incr++;
				}
				$week_periods[$k_period] = array_values($week_periods[$k_period]);
			}

			if($_REQUEST['dbgx'])
			{
				print_r("periods\n");
				print_r($periods);
				print_r("weeks_days \n");
				print_r($weeks_days);
				print_r("weeks_days calendaristic\n");
				print_r($weeks_days_calendaristic);
				print_r("week_periods \n");
				print_r($week_periods);
				exit;
			}

			$current_period = array();
			if(strlen($_REQUEST['period']) > '0')
			{
				$current_period = $fall_weeks[$_REQUEST['period']];
			}
			else //no period selected
			{
				$current_period = end($fall_weeks);
			}

			$hi_perms = new HealthInsurancePermissions();
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			$hi_perms_divisions = $divisions;

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
			$hi_number = $healthinsu_array[0]['institutskennzeichen'];

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
				{
					$hi_number = $healtharray['iknumber'];
				}
			}

			$this->view->patient_name = $patientinfo['last_name'] . ', ' . $patientinfo['first_name'];
			$healthinsurancenumber = '';

			if(!empty($hi_number))
			{
				$healthinsurancenumber .= $hi_number . ' / ';
			}
			$healthinsurancenumber .= $patientinfo['birthd'];

			$this->view->hi_number_dob = $healthinsurancenumber;

			//POST
			if($this->getRequest()->isPost())
			{
				$anlage5part2 = new Application_Form_Anlage5part2();
				if(!$_POST['pdf'] && !$_POST['save'])
				{
					//add/update from wizzard
					$save = $anlage5part2->insert_data($ipid, $_POST, $current_period);
				}
				else if($_POST['save'])
				{
					//update as edit from grid
					$upodate = $anlage5part2->edit_anlage5part2_entries($_POST);
				}
			}

			//patient active periods
			$this->view->periods_selector = $periods_selector;
			$this->view->periods = $periods;

			//number of weeks for each period
			$this->view->fall_weeks = $fall_weeks;

			//get grid data
			$anlage5p2 = new Anlage5Part2();
			$anlage5p2_data = $anlage5p2->get_anlage5part2_details($ipid, $current_period);

			//gather patient drugplan and drugplan history by fall
			$pdp_data_arr = $pdp->get_patient_drugplan($ipid, $current_period);
			$pdh_data_arr = $pdh->get_patient_drugplan_history($ipid, $current_period);

			$pdp_ids[] = '999999999';
			foreach($pdp_data_arr as $k_pdp => $v_pdp)
			{
				$pdp_ids[] = $v_pdp['medication_master_id'];
				$pdp_data[$v_pdp['medication_master_id']] = $v_pdp;
				$pdp_data[$v_pdp['medication_master_id']]['pd_id'] = 'm_' . $v_pdp['id'];
				$pdp_data[$v_pdp['medication_master_id']]['active_medi'] = '1';
				$pdp_data[$v_pdp['medication_master_id']]['pd_dosage'] = $v_pdp['dosage'];
			}

			$medications_data = $mm->master_medications_get($pdp_ids);
			foreach($medications_data as $k_medi => $v_medi)
			{
				$pdp_data[$k_medi]['medication'] = $v_medi;
				$pdp_data[$k_medi]['pd_medication_name'] = $v_medi;
			}

			foreach($pdh_data_arr as $k_pdh => $v_pdh)
			{
				$pdh_data[$v_pdh['id']] = $v_pdh;
				$pdh_data[$v_pdh['id']]['pd_id'] = $v_pdh['id'];
			}

			if($_REQUEST['dbg'])
			{
				print_r($pdp_data_arr);
				print_r($pdh_data);
				exit;
			}

//		group medis per weeks to be shown in wizzard
			foreach($week_periods[$current_period['period']] as $k_week => $v_week)
			{
//			anlage5 data
				if($anlage5p2_data)
				{
					foreach($anlage5p2_data as $k_saved_data => $v_saved_data)
					{
						$r1start = strtotime(date('Y-m-d', strtotime($v_saved_data['date'])));
						$r1end = strtotime(date('Y-m-d', strtotime($v_saved_data['date'])));

						$r2start = strtotime($v_week['start']);
						$r2end = strtotime($v_week['end']);
						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
						{
							$master_data_saved[$k_week]['start'] = $v_week['start'];
							$master_data_saved[$k_week]['end'] = $v_week['end'];
							$master_data_saved[$k_week]['medi'][$v_saved_data['diagnosis']] = $v_saved_data;
						}
						else
						{
							$master_data_saved[$k_week]['start'] = $v_week['start'];
							$master_data_saved[$k_week]['end'] = $v_week['end'];
						}
						ksort($master_data_saved[$k_week]['medi']);
					}
				}
				else
				{
					$master_data_saved[$k_week]['start'] = $v_week['start'];
					$master_data_saved[$k_week]['end'] = $v_week['end'];
				}

				//patient drugplan
				if($pdp_data)
				{
					foreach($pdp_data as $k_medi_data => $v_medi_data)
					{
						if($v_medi_data['medication_change'] != '0000-00-00 00:00:00')
						{
							$r1start = strtotime(date('Y-m-d', strtotime($v_medi_data['medication_change'])));
							$r1end = strtotime(date('Y-m-d', strtotime($v_medi_data['medication_change'])));
						}
						else if($v_medi_data['change_date'] != '0000-00-00 00:00:00')
						{
							$r1start = strtotime(date('Y-m-d', strtotime($v_medi_data['change_date'])));
							$r1end = strtotime(date('Y-m-d', strtotime($v_medi_data['change_date'])));
						}
						else
						{
							$r1start = strtotime(date('Y-m-d', strtotime($v_medi_data['create_date'])));
							$r1end = strtotime(date('Y-m-d', strtotime($v_medi_data['create_date'])));
						}

						$r2start = strtotime($v_week['start']);
						$r2end = strtotime($v_week['end']);
						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
						{
							$master_data[$k_week]['start'] = $v_week['start'];
							$master_data[$k_week]['end'] = $v_week['end'];
							$master_data[$k_week]['medi'][$v_medi_data['id']] = $v_medi_data;
							$master_data[$k_week]['medi'][$v_medi_data['id']]['create_date_week'] = date('Y-m-d', $r1start);
						}
						else
						{
							$master_data[$k_week]['start'] = $v_week['start'];
							$master_data[$k_week]['end'] = $v_week['end'];
						}
					}
				}
				else
				{
					$master_data[$k_week]['start'] = $v_week['start'];
					$master_data[$k_week]['end'] = $v_week['end'];
				}

				//patient drugplan history
				if($pdh_data)
				{
					foreach($pdh_data as $k_hist_data => $v_hist_data)
					{
						if($v_hist_data['pd_change_date'] != '0000-00-00 00:00:00')
						{
							$r1start = strtotime(date('Y-m-d', strtotime($v_hist_data['pd_change_date'])));
							$r1end = strtotime(date('Y-m-d', strtotime($v_hist_data['pd_change_date'])));
						}
						else
						{
							$r1start = strtotime(date('Y-m-d', strtotime($v_hist_data['pd_create_date'])));
							$r1end = strtotime(date('Y-m-d', strtotime($v_hist_data['pd_create_date'])));
						}

						$r2start = strtotime($v_week['start']);
						$r2end = strtotime($v_week['end']);
						if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
						{
							$master_data[$k_week]['start'] = $v_week['start'];
							$master_data[$k_week]['end'] = $v_week['end'];
							$master_data[$k_week]['medi'][$v_hist_data['id']] = $v_hist_data;
							$master_data[$k_week]['medi'][$v_hist_data['id']]['create_date_week'] = date('Y-m-d', $r1start);
						}
						else
						{
							$master_data[$k_week]['start'] = $v_week['start'];
							$master_data[$k_week]['end'] = $v_week['end'];
						}
					}
				}
				else
				{
					$master_data[$k_week]['start'] = $v_week['start'];
					$master_data[$k_week]['end'] = $v_week['end'];
				}
			}

			$this->view->grid_data = $master_data_saved;
			$this->view->wizard_data = $master_data;
			$this->view->current_period_weeks = $week_periods;

			$cols = '6';
			$incr = '1';

			foreach($master_data_saved as $k_mds => $v_mds)
			{
				$master_data_grouped[$incr][$k_mds] = $v_mds;
				if(($k_mds + 1) % $cols == 0)
				{
					$incr++;
				}
			}

			if($_POST['pdf'])
			{
				$post['post_data'] = $_POST;
				$post['master_data_grouped'] = $master_data_grouped;
				$post['predefined_diagnosis'] = $predefined_diagnosis;
				$post['patient_details'] = $patientinfo;
				$post['hi_number_dob'] = $healthinsurancenumber;

				$gen_pdf = $this->generate_pdf($post, 'anlage5part2', 'anlage5part2pdf.html');
				exit;
			}
			$this->view->master_data_grouped = $master_data_grouped;
		}

		public function bresapvperformanceoldAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$breinvoices = new BreInvoices();

			if(strlen($_REQUEST['iid']) > 0)
			{
				//get invoice address/footer
				$breinvoice_details = $breinvoices->getBreInvoice($_REQUEST['iid']);
				$ipid = $breinvoice_details['ipid'];
				$decid = Pms_CommonData::getIdfromIpid($ipid);
				$invoicenumber = $breinvoice_details['invoice_number'];
				$prefix = $breinvoice_details['prefix'];
				$post['address'] = Pms_CommonData::br2nl($breinvoice_details['address']);
				$post['sapv_footer'] = $breinvoice_details['footer'];
				$post['reminder_text'] = Pms_CommonData::br2nl($breinvoice_details['reminder_text']);
				$post['healthinsurance_name'] = $breinvoice_details['healthinsurance_name'];
				$post['unique_id'] = $breinvoice_details['id'];
				$post['prefix'] = $breinvoice_details['prefix'];
				$list = date('Y-m', strtotime($breinvoice_details['invoice_start']));

				if(strlen($_REQUEST['completed_date']) > 0)
				{
					$post['completed_date'] = date('Y-m-d H:i:s', $_REQUEST['completed_date']);
				}
				else
				{
					if($breinvoice_details['completed_date'] != '0000-00-00 00:00:00')
					{
						$post['completed_date'] = $breinvoice_details['completed_date'];
					}
					else
					{
						$post['completed_date'] = $breinvoice_details['create_date'];
					}
				}
			}
			else
			{
				$decid = Pms_Uuid::decrypt($_REQUEST['id']);
				$ipid = Pms_CommonData::getIpid($decid);
				$post['sapv_footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
 				// $post['reminder_text'] = Pms_CommonData::br2nl('Bitte überweisen Sie den Betrag bis zum (' . date('d.m.Y', strtotime('+21 days')) . ') auf unser Konto.<br /> Bei Rückfragen erreichen Sie uns unter der Rufnummer: 0421-879 15 45');
				// TODO-1233
				$post['reminder_text'] = Pms_CommonData::br2nl('Bitte überweisen Sie den Betrag bis zum ' . date('d.m.Y', strtotime('+21 days')) . ' auf unser Konto.');
				$post['completed_date'] = date('d.m.Y', time());

				$tm = new TabMenus();
				$this->view->tabmenus = $tm->getMenuTabs();
			}

			$epid = Pms_CommonData::getEpid($ipid);
			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;

			$patientmaster = new PatientMaster();
// 			$pm = $patientmaster->getMasterData($decid, 0);
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$pm = $patientmaster->get_patientMasterData();
			$this->view->patientdetails = $pm;

			if($clientid != '0' || !empty($clientid))
			{
				$cust = Doctrine_Query::create()
					->select("*,
				AES_DECRYPT(client_name,'" . Zend_Registry::get('salt') . "') as client_name,
				AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') as city,
				AES_DECRYPT(lbg_sapv_provider,'" . Zend_Registry::get('salt') . "') as lbg_sapv_provider,
				AES_DECRYPT(lbg_street,'" . Zend_Registry::get('salt') . "') as lbg_street,
				AES_DECRYPT(lbg_postcode,'" . Zend_Registry::get('salt') . "') as lbg_postcode,
				AES_DECRYPT(lbg_city,'" . Zend_Registry::get('salt') . "') as lbg_city,
				AES_DECRYPT(institutskennzeichen,'" . Zend_Registry::get('salt') . "') as institutskennzeichen,
				AES_DECRYPT(lbg_institutskennzeichen,'" . Zend_Registry::get('salt') . "') as lbg_institutskennzeichen")
					->from('Client')
					->where('id = ' . $clientid);
				$client_details = $cust->fetchArray();

				$this->view->lbg_client_name = $client_details[0]['lbg_sapv_provider'];

				$address = $client_details[0]['lbg_street'];

				if($client_details[0]['lbg_postcode'])
				{
					$address .= ', ' . $client_details[0]['lbg_postcode'];
				}

				if($client_details[0]['lbg_city'])
				{
					$address .= ', ' . $client_details[0]['lbg_city'];
				}

				$this->view->lbg_address = $address;
				$lbg_ik_nummer = $client_details[0]['lbg_institutskennzeichen'];
				$this->view->lbg_ik_nummer = $lbg_ik_nummer;
			}

			$operations = array('0' => 'operation_1', '1' => 'operation_2', '2' => 'operation_3');
			$this->view->operations = $operations;

			/* ------------------------------------------------------------------ */
			//get admission-readmission cycles to extract months where there is at least 1 day active START
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$months = array();
			$active_days = array();
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));
						$discharge_dates[] = $end_with_discharge;

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
						$active_days[] = date('Y-m-d', strtotime($end_with_discharge));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());
						$discharge_dates[] = $end_without_discharge;

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
						$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));
				if(empty($cycles[$ipid]['discharge_date']))
				{
					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}

				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
				$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

				$active_days[] = $cycle_end_period;
				$admission_dates[] = $cycle_start_period;
				$discharge_dates[] = $cycle_end_period;
			}

			$admission_dates = array_values(array_unique($admission_dates));
			$discharge_dates = array_values(array_unique($discharge_dates));
			$active_days = array_values(array_unique($active_days));
			$months = array_values(array_unique($months));

			if($_REQUEST['dbgx'])
			{
				print_r('Active days' . "\n");
				print_r($active_days);
				print_r('Start period' . "\n");
				print_r($cycle_start_period);
				print_r('Cycles');
				print_r($cycles);
				print_r('period months' . "\n");
				print_r($period_months);
				print_r('months' . "\n");
				print_r($months);
			}

			$this->view->active_days = $active_days;

			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}

			//get number of days in each month + start/end day END
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}

			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_bra_sapv';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$current_period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);
			$this->view->month_days = $current_period_days;

			foreach($active_days as $k_active_day => $v_active_day)
			{
				if(in_array($v_active_day, $current_period_days))
				{
					$active_days_in_period[] = $v_active_day;
				}
			}

			//find if there is a sapv for current period START!
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('"' . date('Y-m-d', strtotime($current_period['start'])) . '" <= verordnungbis')
				->andWhere('"' . date('Y-m-d', strtotime($current_period['end'])) . '" >= verordnungam')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');

			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();
			foreach($droparray as $k_sapv => $v_sapv)
			{
				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);
				$all_sapv_days = array_merge($all_sapv_days, $temp_sapv_days);

				foreach($temp_sapv_days as $k_tmp_sapv => $v_tmp_sapv)
				{
					if(!$days2verordnet[$v_tmp_sapv])
					{
						$days2verordnet[$v_tmp_sapv] = array();
					}

					$current_verordnet = explode(',', $v_sapv['verordnet']);
					$days2verordnet[$v_tmp_sapv] = array_merge($days2verordnet[$v_tmp_sapv], $current_verordnet);

					asort($days2verordnet[$v_tmp_sapv]);
					$days2verordnet[$v_tmp_sapv] = array_values(array_unique($days2verordnet[$v_tmp_sapv]));
				}
			}

			$all_sapv_days = array_values(array_unique($all_sapv_days));
			$this->view->all_sapv_days = $all_sapv_days;
			//find if there is a sapv for current period END!
			//get patient locations START
			$disallowed_location_types = array('1', '2'); //hospital and hospiz
			$hospitalids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhereIn('location_type', $disallowed_location_types);
			$hosparray = $hospitalids->fetchArray();

			$hospital_ids[] = '999999999';
			$hospiz_ids[] = '999999999';
			foreach($hosparray as $hospital)
			{
				$hospital_ids[] = $hospital['id'];
				if($hospital['location_type'] == '2') //hospiz
				{
					$hospiz_ids[] = $hospital['id'];
				}
			}

			//	get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
//			->andWhereIn('location_id', $hospital_ids)
				->orderBy('valid_from,id ASC');
			$pat_locations = $patloc->fetchArray();

			//get patient all locations
			$patloc_all = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid = "' . $ipid . '"')
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$pat_locations_res_all = $patloc_all->fetchArray();

			$hospital_days = array();
			$hosp_days = array();
			$hospizdays_arr = array();
			$hospiz_days_array = array();
			foreach($pat_locations as $k_pat_loc => $v_pat_loc)
			{
				if(in_array($v_pat_loc['location_id'], $hospital_ids))
				{
					if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
					{
						$till = date('Y-m-d', strtotime('+1 day'));
					}
					else
					{
						$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
					}

					$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
					$r1end = strtotime(date('Y-m-d', strtotime($till)));
					$r2start = strtotime($current_period['start']);
					$r2end = strtotime($current_period['end']);

					if(in_array($v_pat_loc['location_id'], $hospiz_ids))
					{
						$h_location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

						$hospiz_heads['start'][] = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
						$hospiz_heads['end'][] = date('Y-m-d', strtotime($v_pat_loc['valid_till']));

						$hospiz_days_arr = $patientmaster->getDaysInBetween($h_location_start, $till);
						//used in view
						$hospiz_days = array_merge($hospiz_days, $hospiz_days_arr);
					}

					if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
					{
						$period_hosp_locations[] = $v_pat_loc;
						$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

						$hosp = $patientmaster->getDaysInBetween($location_start, $till);
						$hospital_days = array_merge($hospital_days, $hosp);

						if(in_array($v_pat_loc['location_id'], $hospiz_ids))
						{
							$hospizdays_arr = $patientmaster->getDaysInBetween($location_start, $till);
							$hospiz_days_array = array_merge($hospiz_days_array, $hospizdays_arr);
						}
					}

					//find hosp heads
					$start_hosp_period = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
					$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
					$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
					$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));

					//remove end head
					if($end_hospital_period != $next_start_hosp && $start_hosp_period != $end_hospital_period)
					{
						$find = array_search($end_hospital_period_formatted, $hospital_days);
						$removed_days['e'][] = $hospital_days[$find];
						unset($hospital_days[$find]);

						//hospiz end head
						if(!in_array($end_hospital_period_formatted, $discharge_dates))
						{
							$find_hospiz = array_search($end_hospital_period_formatted, $hospiz_days_array);
							$removed_days['e_h'][] = $hospiz_days_array[$find_hospiz];
							unset($hospiz_days_array[$find_hospiz]);
						}
					}

					//remove start head
					if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
					{
						$find_s = '';
						$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
						$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
						$start_hospital_period = $r1start;
						$start_hospital_formatted = date('Y-m-d', $r1start);

						if($start_hosp_period != $previous_till && $start_hosp_period != $end_hospital_period)
						{
							//unset hospital start head
							$find_s = array_search($start_hospital_formatted, $hospital_days);
							$removed_days['s'][] = $hospital_days[$find_s];
							unset($hospital_days[$find_s]);

							if(!in_array($start_hospital_formatted, $admission_dates))
							{
								//unset hospiz start head
								$find_s_hospiz = array_search($start_hospital_formatted, $hospiz_days_array);
								$removed_days['s_h'][] = $hospiz_days_array[$find_s_hospiz];
								unset($hospiz_days_array[$find_s_hospiz]);
							}
						}
					}
					else
					{
						$find_s = '';
						$start_hospital_formatted = date('Y-m-d', $r1start);
						$find_s = array_search($start_hospital_formatted, $hospital_days);
						$removed_days['s2'][] = $hospital_days[$find_s];
						unset($hospital_days[$find_s]);

						if(!in_array($start_hospital_formatted, $admission_dates))
						{
							$find_s_h = '';
							$start_hospital_formatted = date('Y-m-d', $r1start);
							$find_s_h = array_search($start_hospital_formatted, $hospiz_days_array);
							$removed_days['s2_h'][] = $hospiz_days_array[$find_s_h];
							unset($hospiz_days_array[$find_s_h]);
						}
					}
				}
			}
			//hospiz days
			$hospiz_days_arr = array_values(array_unique($hospiz_days_array));
			$full_hospital_days = array_values(array_unique($hospital_days));

			$this->view->full_hospital_days = $full_hospital_days;
			$this->view->hospiz_days_arr = $hospiz_days_arr;

			if($_REQUEST['dbgz'])
			{
				print_r($full_hospital_days);
				exit;
			}
			//get patient locations END
			//get health insurance data START
			$hi_perms = new HealthInsurancePermissions();
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			$hi_perms_divisions = $divisions;

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
			$this->view->health_insurance_name = $healthinsu_array[0]['company_name'];
			$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
			$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
			$this->view->healthinsurance_versnr = $healthinsu_array[0]['insurance_no'];

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(empty($healthinsu_array[0]['name']))
				{
					$healthinsu_array[0]['name'] = $healtharray['name'];
				}
				if(empty($healthinsu_array[0]['ins_street']))
				{
					$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
				}
				if(empty($healthinsu_array[0]['ins_city']))
				{
					$healthinsu_array[0]['ins_city'] = $healtharray['city'];
				}
				if(empty($healthinsu_array[0]['ins_zip']))
				{
					$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
				}

				if(strlen($healthinsu_array[0]['company_name']) == 0)
				{
					$this->view->health_insurance_name = $healtharray['name'];
				}

				if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
				{
					$this->view->health_insurance_ik = $healtharray['iknumber'];
				}

				if(strlen($healthinsu_array[0]['kvk_no']) == 0)
				{
					$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
				}
			}

			if($hi_perms_divisions)
			{
				$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
			}

			if($_REQUEST['dbgq'])
			{
				print_r($ipid);
				print_r($hi_perms_divisions);
				print_r($healthinsu_array);
				exit;
			}
			$pathealthinsurancenr = "";

			if(count($healthinsu_array[0]))
			{
				$phi_details = $healthinsu_array[0]['company_name'];
			}
			else
			{
				$phi_details = "--";
			}

			if(strlen($healthinsu_subdiv_arr[3]['name']) == '0' && strlen($healthinsu_subdiv_arr[3]['street1']) == '0')
			{
				$phi_name = $healthinsu_array[0]['company_name'];
				$phi_details_sub = $healthinsu_array[0]['company_name'] . '<br/> ' . $healthinsu_array[0]['ins_street'] . '<br/> ' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];
			}
			else
			{
				$phi_name = $healthinsu_subdiv_arr[3]['name'];
				$phi_details_sub = $healthinsu_subdiv_arr[3]['name'] . '<br/> ' . $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];
			}

			$this->view->health_insurance = $phi_details;
			$this->view->hi_subdiv_address = $phi_details_sub;
			//get health insurance data END
			//
	//get pflegestuffe for current period START
			$pflege = new PatientMaintainanceStage();
			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $current_period['start'], $current_period['end']);
			if($pflege_arr)
			{
				$last_pflege = end($pflege_arr);
				$this->view->patient_pflegestufe = $last_pflege['stage'];
			}
			else
			{
				$this->view->patient_pflegestufe = ' - ';
			}
			//get pflegestuffe for current period END
			//
	//get client users
			$user = new User();
			$c_users = $user->getUserByClientid($clientid, 0, true);

			foreach($c_users as $k_c_users => $v_c_users)
			{
				$client_users[$v_c_users['id']] = $v_c_users;
			}

			//get contact forms START
			//get deleted cf from patient course
			$deleted_cf = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere("ipid='" . $ipid . "'")
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhere('source_ipid = ""');
			$deleted_cf_array = $deleted_cf->fetchArray();

			foreach($deleted_cf_array as $k_dcf => $v_dcf)
			{
				$excluded_cf_ids[] = $v_dcf['recordid'];
			}

			//get cf in period - deleted cf
			$cf = new ContactForms();
			$p_contactforms = $cf->get_contact_form_period($ipid, $current_period, $excluded_cf_ids);

			$contact_forms_ids[] = '9999999999999';
			foreach($p_contactforms as $kk_cf => $vv_cf)
			{
				$contact_forms_ids[] = $vv_cf['id'];
			}

			$block_aditional_users = new FormBlockAdditionalUsers();
			$block_au_data = $block_aditional_users->getPatientFormBlockAdditionalUsers($ipid, $contact_forms_ids, false, true);

			$cnt = array();
			foreach($p_contactforms as $k_cf => $v_cf)
			{
				$visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));

				$contact_forms2dates[$visit_date][$v_cf['id']]['start_date'] = $v_cf['start_date'];
				$contact_forms2dates[$visit_date][$v_cf['id']]['end_date'] = $v_cf['end_date'];
				$contact_forms2dates[$visit_date][$v_cf['id']]['del_id'] = 'cf_' . $v_cf['id'];
				$contact_forms2dates[$visit_date][$v_cf['id']]['date'] = $v_cf['billable_date'];
				$contact_forms2dates[$visit_date][$v_cf['id']]['extra_forms'] = '0';
				$has_creator = false;

				if(count($cnt[$visit_date]) >= '3')
				{
					$contact_forms2dates[$visit_date]['2']['extra_forms'] += '1'; //show the remaining
				}

				if(count($block_au_data[$v_cf['id']]) != 0)
				{
					foreach($block_au_data[$v_cf['id']] as $k_block_au_data => $v_block_au)
					{
						$visit_user = $client_users[$v_block_au['additional_user']];
						if($v_block_au['creator'] == '1')
						{
							$has_creator = true;
						}

						if($_REQUEST['dbg'])
						{
							print_r("visit_user 1\n");
							print_r($visit_user);
						}

						if(count($client_users[$v_block_au['additional_user']]) != 0)
						{
							if(strlen($visit_user['shortname']) > '0')
							{
								$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = $visit_user['shortname'];
							}
							else
							{
// 							$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(substr($visit_user['first_name'], 0, 1) . substr($visit_user['last_name'], 0, 1));
								$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(mb_substr($visit_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_user['last_name'], 0, 1, "UTF-8"));
							}
						}
					}
				}

				if(count($block_au_data[$v_cf['id']]) == '0' || $has_creator === false)
				{
					$visit_create_user = $client_users[$v_cf['create_user']];
					if(count($client_users[$v_cf['create_user']]) != 0)
					{
						if(strlen($visit_user['shortname']) > '0')
						{
							$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = $visit_create_user['shortname'];
						}
						else
						{
// 						$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(substr($visit_create_user['first_name'], 0, 1) . substr($visit_create_user['last_name'], 0, 1));
							$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(mb_substr($visit_create_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_create_user['last_name'], 0, 1, "UTF-8"));
						}
					}
				}

				foreach($contact_forms2dates as $k_cf_dates => $v_cf_dates)
				{
					$contact_forms2dates[$k_cf_dates] = array_values($v_cf_dates);
				}

				$cnt[$visit_date][] = $v_cf['id'];
			}
			if($_REQUEST['dbg'])
			{
				print_r($client_users);
				print_r($block_data);
				print_r($cnt);
				print_r($contact_forms2dates);
				exit;
			}
			//get contact forms END
			$visits_array = $contact_forms2dates;
			$this->view->visits_array = $visits_array;

			//get shortcuts and saved pricelist or default pricelist
			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']); //get bra sapv pricelist and then shortcuts

			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$totals = array();
			foreach($shortcuts['bre_sapv'] as $k_sh => $v_sh)
			{
				$totals[$v_sh] = '0';
				$totals_pdf[$v_sh] = '0';
			}

			//get form saved data
			$bre_sapv = new BreSapvControl();
			$bre_sapv_data = $bre_sapv->get_bre_sapv_controlsheet($ipid, $current_period['start'], $master_price_list, $active_days, $full_hospital_days, $hospiz_days_arr);

			if($bre_sapv_data) //read saved data
			{
				$master_data = $bre_sapv_data;
				$totals = $bre_sapv_data['totals'];
			}
			else //load system wide date
			{
				foreach($shortcuts['bre_sapv'] as $k_short => $v_short)
				{
					foreach($current_period_days as $k_c_day => $v_c_day)
					{
						//Assessment, Beratung und Koordination
						if($v_short == 'abk' && in_array($v_c_day, $admission_dates))
						{
							$master_data[$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							$master_data[$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_short][$v_c_day]['qty'] = '1';
							$totals[$v_short] += '1';
						}

						//Beratung und Koordination
						if($v_short == 'bk' && in_array($v_c_day, $admission_dates))
						{
							$master_data[$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							$master_data[$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_short][$v_c_day]['qty'] = '1';
							$totals[$v_short] += '1';
						}
					}

					foreach($days2verordnet as $k_vv_day => $v_vv_values)
					{
						//Additiv unterstützte Teilversorgung
						if($v_short == 'aut' && in_array('3', $v_vv_values) && !in_array('4', $v_vv_values) && in_array($k_vv_day, $current_period_days) && in_array($k_vv_day, $active_days) && !in_array($k_vv_day, $full_hospital_days) && !in_array($k_vv_day, $hospiz_days_arr) && count($visits_array[$k_vv_day]) > '0') //tv reqired
						{
							$master_data[$v_short][$k_vv_day] = $master_price_list[$k_vv_day][0][$v_short];
							$master_data[$v_short]['price'] = $master_price_list[$k_vv_day][0][$v_short]['price'];
							$master_data[$v_short][$k_vv_day]['vv'] = $v_vv_values;
							$master_data[$v_short][$k_vv_day]['qty'] = '1';
							$totals[$v_short] += '1';
						}

						//Vollständige Versorgung
						if($v_short == 'vv' && in_array('4', $v_vv_values) && in_array($k_vv_day, $current_period_days) && in_array($k_vv_day, $active_days) && !in_array($k_vv_day, $full_hospital_days) && !in_array($k_vv_day, $hospiz_days_arr) && count($visits_array[$k_vv_day]) > '0') //vv required
						{
							$master_data[$v_short][$k_vv_day] = $master_price_list[$k_vv_day][0][$v_short];
							$master_data[$v_short]['price'] = $master_price_list[$k_vv_day][0][$v_short]['price'];
							$master_data[$v_short][$k_vv_day]['vv'] = $v_vv_values;
							$master_data[$v_short][$k_vv_day]['qty'] = '1';
							$totals[$v_short] += '1';
						}
					}
				}
			}

			if($this->getRequest()->isPost())
			{
				if(strlen($_REQUEST['list']) > 0)
				{
					$period_list = '&list=' . $_REQUEST['list'];
				}
				else
				{
					$period_list = '';
				}

				if($_POST['save'])
				{
					//clear old entries for curent month
					$reset_sapv_form_data = Application_Form_BreSapv::reset_bre_sapv($ipid, $current_period['start']);

					//insert
					$insert_sapv_form_data = Application_Form_BreSapv::insert_bre_sapv_values($ipid, $_POST, $current_period_days, $shortcuts['bre_sapv']);
					$this->_redirect(APP_BASE . 'patientform/bresapvperformance?id=' . $_REQUEST['id'] . $period_list);
					exit;
				}
				else if($_POST['pdf'])
				{
					$post['post_data'] = $_POST;
					$post['patient_details'] = $pm;
					$post['shortcuts'] = $shortcuts['bre_sapv'];
					$post['health_insurance_name'] = $this->view->health_insurance_name;
					$post['health_insurance_ik'] = $this->view->health_insurance_ik;
					$post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;
					$post['healthinsurance_versnr'] = $this->view->healthinsurance_versnr;
					$post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
					$post['month_selected'] = date('m.Y', strtotime($current_period['start']));
					$post['totals'] = $totals_pdf; //empty totals per shortcut
					$post['month_days'] = $current_period_days;
					$post['active_days'] = $active_days;
					$post['all_sapv_days'] = $all_sapv_days;
					$post['full_hospital_days'] = $full_hospital_days;
					$post['full_hospiz_days'] = $hospiz_days_arr;
					$post['master_price_list'] = $master_price_list;
					$post['current_period'] = $current_period;
					$post['days2verordnet'] = $days2verordnet;
					$post['operations'] = $operations;
					$post['lbg_client_name'] = $client_details[0]['lbg_sapv_provider'];
					$post['lbg_address'] = $address;
					$post['lbg_ik_nummer'] = $client_details[0]['lbg_institutskennzeichen'];
					$post['all_sapv_days'] = $all_sapv_days;
					$post['visits_array'] = $visits_array;

					$gen_pdf = $this->generate_pdf($post, 'bresapvperformance', 'bresapvperformance_pdf_old.html');
				}
				else if($_POST['reset'])
				{
					$reset_sapv_form_data = Application_Form_BreSapv::reset_bre_sapv($ipid, $current_period['start']);
					$this->_redirect(APP_BASE . 'patientform/bresapvperformance?id=' . $_REQUEST['id'] . $period_list);
					exit;
				}
				elseif(!empty($_REQUEST['mode']) && $_REQUEST['mode'] == 'del')
				{
					$del_id_exp = explode('_', $_REQUEST['delid']);

					if(!empty($del_id_exp[1]) && $del_id_exp[0] == 'n')
					{
						$nurse = new KvnoNurse();
						$delete_nurse_visit = $nurse->deleteNurseVisit($del_id_exp[1]);
						echo '1';
						exit;
					}
					else if(!empty($del_id_exp[1]) && $del_id_exp[0] == 'd')
					{
						$doctor_visit = new KvnoDoctor();
						$delete_doc_visit = $doctor_visit->deleteDoctorVisit($del_id_exp[1]);
						echo '1';
						exit;
					}
					else if(!empty($del_id_exp[1]) && $del_id_exp[0] == 'cf')
					{
						$contact_forms = new ContactForms();
						$delete_contact_forms = $contact_forms->deleteContactForm($del_id_exp[1], $ipid);
						echo '1';
						exit;
					}
				}
			}
			else if($_REQUEST['mode'] == 'pdfs')
			{
				if(empty($_REQUEST['iid']))
				{
					$bre_inv_number = $breinvoices->get_next_invoice_number($clientid, true);
					$prefix = $bre_inv_number['prefix'];
					$invoicenumber = $bre_inv_number['invoicenumber'];

					$post['completed_date'] = date('Y-m-d H:i:s', time());
				}

				$sapvs = new SapvVerordnung();
				$period_sapv = $sapvs->getSapvInPeriod($ipid, $current_period['start'], $current_period['end']);

				if($period_sapv[0]['approved_date'] != '0000-00-00 00:00:00' && strlen($period_sapv[0]['approved_date']) > 0 && $period_sapv[0]['approved_date'] != '1970-01-01 00:00:00')
				{
					$post['sapv_approve_date'] = date('d.m.Y', strtotime($period_sapv[0]['approved_date']));
				}
				else
				{
					$post['sapv_approve_date'] = ' - ';
				}

				if(strlen($period_sapv[0]['approved_number']) > 0)
				{
					$post['sapv_approve_nr'] = $period_sapv[0]['approved_number'];
				}
				else
				{
					$post['sapv_approve_nr'] = ' - ';
				}

				asort($active_days_in_period);
				if(count($active_days_in_period) > 0)
				{
					$start = date('d.m.Y', strtotime($active_days_in_period[0]));
					$post['first_active_day'] = $start;
					$last_day = end($active_days_in_period);
					$end = date('d.m.Y', strtotime($last_day));
					$post['last_active_day'] = $end;
				}

				if(empty($_REQUEST['iid']))
				{
					foreach($master_data as $k_master_data => $v_master_data)
					{

						if($k_master_data != 'totals' && $active_days)
						{
							foreach($v_master_data as $k_day => $v_data_values)
							{
								if($v_data_values['qty'] != '0' && in_array($k_day, $active_days) && !in_array($k_day, $full_hospital_days) && !in_array($k_day, $hospiz_days_arr))
								{
									$final_pdf_master_data[$k_master_data][date('d', strtotime($k_day))] = $v_data_values['qty'];
									$invoice_items[$k_master_data]['qty'] += $v_data_values['qty'];
									$invoice_items[$k_master_data]['price'] = $v_data_values['price'];
									$invoice_items[$k_master_data]['shortcut_total'] += ($v_data_values['qty'] * $v_data_values['price']);
									$grand_total += ($v_data_values['qty'] * $v_data_values['price']);
								}
							}
						}
					}
				}


				if(strlen($_REQUEST['iid']) > '0' && count($breinvoice_details['items']) > 0)
				{
					foreach($breinvoice_details['items'] as $k_inv_item => $v_inv_item)
					{
						$invoice_items[$v_inv_item['shortcut']] = $breinvoice_details['items'][$k_inv_item];
						$invoice_items[$v_inv_item['shortcut']]['shortcut_total'] = ($v_inv_item['qty'] * $v_inv_item['price']);
						$grand_total = $breinvoice_details['invoice_total'];
					}
				}

				if(empty($_REQUEST['pdfquick']) && empty($_REQUEST['iid']))
				{
					//insert invoice data and items
					$ins_inv = new BreInvoices();
					$ins_inv->invoice_start = $current_period['start'];
					$ins_inv->invoice_end = $current_period['end'];
					$ins_inv->start_active = date('Y-m-d H:i:s', strtotime($post['first_active_day']));
					$ins_inv->end_active = date('Y-m-d H:i:s', strtotime($post['last_active_day']));
					$ins_inv->sapv_approve_date = date('Y-m-d H:i:s', strtotime($post['sapv_approve_date']));
					$ins_inv->sapv_approve_nr = $post['sapv_approve_nr'];
					$ins_inv->ipid = $ipid;
					$ins_inv->client = $clientid;
					$ins_inv->prefix = $prefix;
					$ins_inv->healthinsurance_name = $phi_name;
					$ins_inv->healthinsurance_ik = $this->view->health_insurance_ik;
					$ins_inv->healthinsurance_ver = $this->view->healthinsurance_versnr;
					$ins_inv->invoice_number = $invoicenumber;
					$ins_inv->invoice_total = $grand_total;
					$ins_inv->address = $phi_details_sub;
 					// $ins_inv->reminder_text = 'Bitte überweisen Sie den Betrag bis zum (' . date('d.m.Y', strtotime('+21 days')) . ') auf unser Konto.<br /> Bei Rückfragen erreichen Sie uns unter der Rufnummer: 0421-879 15 45';
					// TODO-1233
					$ins_inv->reminder_text  = 'Bitte überweisen Sie den Betrag bis zum ' . date('d.m.Y', strtotime('+21 days')) . ' auf unser Konto.';
					$ins_inv->status = '1';
					$ins_inv->save();

					$ins_id = $ins_inv->id;
					if($ins_id)
					{
						foreach($invoice_items as $k_shortcut_inv => $v_values_inv)
						{
							$invoice_items_arr[] = array(
								'invoice' => $ins_id,
								'client' => $clientid,
								'shortcut' => $k_shortcut_inv,
								'qty' => $v_values_inv['qty'],
								'price' => $v_values_inv['price']
							);
						}

						if(count($invoice_items_arr) > 0)
						{
							//insert many records with one query!!
							$collection = new Doctrine_Collection('BreInvoiceItems');
							$collection->fromArray($invoice_items_arr);
							$collection->save();
						}
					}
					$post['unique_id'] = $ins_id;
				}

				if(strlen($breinvoice_details['healthinsurance_ik']) > '0')
				{
					$health_insurance_ik = $breinvoice_details['healthinsurance_ik'];
				}
				else
				{
					$health_insurance_ik = $this->view->health_insurance_ik;
				}

				if(strlen($breinvoice_details['healthinsurance_ver']) > '0')
				{
					$healthinsurance_ver = $breinvoice_details['healthinsurance_ver'];
				}
				else
				{
					$healthinsurance_ver = $this->view->healthinsurance_versnr;
				}

				$post['health_insurance'] = $phi_details;

				if(!$post['address'])
				{
					$post['hi_subdiv_address'] = Pms_CommonData::br2nl($phi_details_sub);
				}
				else
				{
					$post['hi_subdiv_address'] = Pms_CommonData::br2nl($post['address']);
				}

				$post['post_data'] = $final_pdf_master_data;
				$post['invoice_items'] = $invoice_items;
				$post['grand_total'] = $grand_total;

				if(!$post['healthinsurance_name'])
				{
					$post['healthinsurance_name'] = $phi_name;
				}

				$post['client_city'] = $client_details[0]['city'];
				$post['current_period_start'] = date('d.m.Y', strtotime($current_period['start']));
				$post['current_period_end'] = date('d.m.Y', strtotime($current_period['end']));
				$post['invoice_number'] = $invoicenumber;
				$post['prefix'] = $prefix;
				$post['hide_visits'] = '1';
				$post['patient_details'] = $pm;
				$post['shortcuts'] = $shortcuts['bre_sapv'];
				$post['health_insurance_name'] = $this->view->health_insurance_name;
				$post['health_insurance_ik'] = $health_insurance_ik;
				$post['healthinsurance_versnr'] = $healthinsurance_ver;
				//client ik number is required in invoice
				$post['lbg_ik_nummer'] = $lbg_ik_nummer;
				$post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;
				$post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
				$post['month_selected'] = date('m.Y', strtotime($current_period['start']));
				$post['totals'] = $totals_pdf; //empty totals per shortcut
				$post['month_days'] = $current_period_days;
				$post['active_days'] = $active_days;
				$post['all_sapv_days'] = $all_sapv_days;
				$post['full_hospital_days'] = $full_hospital_days;
				$post['full_hospiz_days'] = $hospiz_days_arr;
				$post['master_price_list'] = $master_price_list;
				$post['current_period'] = $current_period;
				$post['days2verordnet'] = $days2verordnet;
				$post['operations'] = $operations;
				$post['lbg_client_name'] = $client_details[0]['lbg_sapv_provider'];
				$post['lbg_address'] = $address;
				$post['ik_nummer'] = $client_details[0]['institutskennzeichen'];
				$post['all_sapv_days'] = $all_sapv_days;
				$post['visits_array'] = $visits_array;

				if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
				{
					$storno_data = $breinvoices->getBreInvoice($_REQUEST['storno']);
					
					//ISPC-2532 Lore 09.11.2020
					$post['storned_invoice_number'] = $post['prefix'].$post['invoice_number'];
					
					$post['address'] = $storno_data['address'];
					$post['prefix'] = $storno_data['prefix'];
					$post['invoice_number'] = $storno_data['invoice_number'];
					$post['client_city'] = $client_details[0]['city'];
					$post['ik_nummer'] = $client_details[0]['institutskennzeichen'];
					if($storno_data['completed_date'] != '0000-00-00 00:00:00')
					{
						$post['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
					}

					$post['first_active_day'] = date('d.m.Y', strtotime($storno_data['start_active']));
					$post['last_active_day'] = date('d.m.Y', strtotime($storno_data['end_active']));
					if(strlen($storno_data['healthinsurance_name']) > '0')
					{
						$post['healthinsurance_name'] = $storno_data['healthinsurance_name'];
					}
					if(strlen($storno_data['health_insurance_ik']) > '0')
					{
						$post['health_insurance_ik'] = $storno_data['health_insurance_ik'];
					}
					if(strlen($post['healthinsurance_versnr']) > '0')
					{
						$post['healthinsurance_versnr'] = $storno_data['healthinsurance_versnr'];
					}

					$post['unique_id'] = $storno_data['record_id'];
					$post['sapv_footer'] = $storno_data['footer'];
					$post['reminder_text'] = $storno_data['reminder_text'];

					$post['grand_total'] = ($storno_data['invoice_total'] * (-1));

					if($storno_data['invoice_start'] != '0000-00-00 00:00:00' && $storno_data['invoice_end'] != '0000-00-00 00:00:00')
					{
						$post['current_period_start'] = date('d.m.Y', strtotime($storno_data['invoice_start']));
						$post['current_period_end'] = date('d.m.Y', strtotime($storno_data['invoice_end']));
					}

					$template_files = array('storno_invoice_bre_sapv_pdf.html');
				}
				else
				{
					$template_files = array('invoice_bre_sapv_pdf.html');
				}


				$orientation = array('P');
				$background_pages = array('0'); //0 is first page;

				if($_REQUEST['pdfquick'])
				{
					$excluded = array('address', 'sapv_footer', 'reminder_text', 'hi_subdiv_address');
				}
				else
				{
					$excluded = array('address', 'sapv_footer', 'reminder_text', 'hi_subdiv_address');
				}
				$post = Pms_CommonData::clear_pdf_data($post, $excluded);
				$gen_pdf = $this->generate_multiple_page_pdf($post, "bresapvperformance", $template_files, $orientation, $background_pages);
			}


			$this->view->shortcuts = $shortcuts['bre_sapv'];
			$this->view->master_data = $master_data;
			$this->view->month_days = $current_period_days;
			$this->view->active_days = $active_days;
			$this->view->all_sapv_days = $all_sapv_days;
			$this->view->full_hospital_days = $full_hospital_days;
			$this->view->full_hospiz_days = $hospiz_days_arr;
			$this->view->master_price_list = $master_price_list;
			$this->view->current_period = $current_period;
			$this->view->totals = $totals;
			$this->view->days2verordnet = $days2verordnet;
		}

		//ISPC-2609 + ISPC-2000
		public function bresapvperformanceAction($params = array())
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			if(isset($params) && !empty($params)){
			    $_REQUEST = $params;
			    $this->_helper->viewRenderer->setNoRender();
			}
		
			//ISPC-2609 + ISPC-2000 Ancuta 22.09.2020
			$clientid = isset($_REQUEST['clientid']) && ! empty($_REQUEST['clientid']) ? $_REQUEST['clientid'] :  $logininfo->clientid;
			$userid = isset($_REQUEST['userid']) && ! empty($_REQUEST['userid']) ? $_REQUEST['userid'] : $logininfo->userid;
			
			//$clientid = $logininfo->clientid;
			//$userid = $logininfo->userid;
			$boxes = new LettersTextBoxes();
			$letter_boxes_details = $boxes->client_letter_boxes($clientid);
			$breinvoices = new BreInvoices();

			
			//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
			if($_REQUEST['bulk_print'] == '1' && strlen($_REQUEST['iid']) > 0){
			    $bwinvoice_details = $breinvoices->getBreInvoice($_REQUEST['iid']);
			    if($bwinvoice_details['storno'] == '1'){
			        $_REQUEST['iid'] = $bwinvoice_details['record_id'];
			        $_REQUEST['stornopdf'] = 1;
			        $_REQUEST['storno'] = $bwinvoice_details['id'];
			    }
			}
			//--

			if(strlen($_REQUEST['iid']) > 0)
			{
				//get invoice address/footer
				$breinvoice_details = $breinvoices->getBreInvoice($_REQUEST['iid']);
				$ipid = $breinvoice_details['ipid'];
				$decid = Pms_CommonData::getIdfromIpid($ipid);
				$invoicenumber = $breinvoice_details['invoice_number'];
				$prefix = $breinvoice_details['prefix'];
				$post['address'] = Pms_CommonData::br2nl($breinvoice_details['address']);
				$post['sapv_footer'] = $breinvoice_details['footer'];
				$post['reminder_text'] = Pms_CommonData::br2nl($breinvoice_details['reminder_text']);
				$post['healthinsurance_name'] = $breinvoice_details['healthinsurance_name'];
				$post['unique_id'] = $breinvoice_details['id'];
				$post['prefix'] = $breinvoice_details['prefix'];
				$list = date('Y-m', strtotime($breinvoice_details['invoice_start']));

				if(strlen($_REQUEST['completed_date']) > 0)
				{
					$post['completed_date'] = date('Y-m-d H:i:s', $_REQUEST['completed_date']);
				}
				else
				{
					if($breinvoice_details['completed_date'] != '0000-00-00 00:00:00')
					{
						$post['completed_date'] = $breinvoice_details['completed_date'];
					}
					else
					{
						$post['completed_date'] = $breinvoice_details['create_date'];
					}
				}
				
				//ISPC-2747 Lore 27.11.2020
				if(strpos($breinvoice_details['show_boxes'], 'show_box_active') === false ){
				    $post['show_box_active'] = '0';
				}else {
				    $post['show_box_active'] = '1';
				}
				if(strpos($breinvoice_details['show_boxes'], 'show_box_patient') === false ){
				    $post['show_box_patient'] = '0';
				}else {
				    $post['show_box_patient'] = '1';
				}
				if(strpos($breinvoice_details['show_boxes'], 'show_box_sapv') === false ){
				    $post['show_box_sapv'] = '0';
				}else {
				    $post['show_box_sapv'] = '1';
				}
				
			}
			else
			{
				$decid = Pms_Uuid::decrypt($_REQUEST['id']);
				$ipid = Pms_CommonData::getIpid($decid);
				$post['sapv_footer'] = $letter_boxes_details[0]['sapv_invoice_footer'];
 				//$post['reminder_text'] = Pms_CommonData::br2nl('Bitte überweisen Sie den Betrag bis zum (' . date('d.m.Y', strtotime('+21 days')) . ') auf unser Konto.<br /> Bei Rückfragen erreichen Sie uns unter der Rufnummer: 0421-879 15 45');
				// TODO-1233
				$post['reminder_text'] = Pms_CommonData::br2nl('Bitte überweisen Sie den Betrag bis zum ' . date('d.m.Y', strtotime('+21 days')) . ' auf unser Konto.');
				$post['completed_date'] = date('d.m.Y', time());

				$tm = new TabMenus();
				$this->view->tabmenus = $tm->getMenuTabs();
			}

			$epid = Pms_CommonData::getEpid($ipid);
			$this->view->patid = $decid;
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;

			
			$patientmaster = new PatientMaster();
			//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020
			if($_REQUEST['bulk_print'] == '1'){
			    
			    $pdet = $patientmaster->get_patients_details_By_Ipids(array($ipid));
			    $pm = $pdet[$ipid];
			    $pseudo_post['patientdetails'] = $pm;
			    
			} else{
    			
    // 			$pm = $patientmaster->getMasterData($decid, 0);
    			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
    			$pm = $patientmaster->get_patientMasterData();
    			$this->view->patientdetails = $pm;
			}
			



			if($clientid != '0' || !empty($clientid))
			{
				/* ------------------- Client Data--------------------------------------- */
				$clientdata = Pms_CommonData::getClientData($clientid);



				$client_details['client_name'] = $clientdata[0]['team_name'];
				$client_details['client_city'] = $clientdata[0]['city'];
				$client_details['client_street'] = $clientdata[0]['street1'];
				$client_details['client_zip'] = $clientdata[0]['postcode'];
				$client_details['client_phone'] = $clientdata[0]['phone'];
				$client_details['client_fax'] = $clientdata[0]['fax'];
				$client_details['client_email'] = $clientdata[0]['emailid'];
				$client_details['institutskennzeichen'] = $clientdata[0]['institutskennzeichen'];

				$this->view->lbg_client_name = $client_details['client_name'];

				$client_details['address'] = $client_details['client_street'];

				if($client_details['client_zip'])
				{
					$client_details['address'] .= ', ' . $client_details['client_zip'];
				}

				if($client_details['client_city'])
				{
					$client_details['address'] .= ', ' . $client_details['client_city'];
				}
				$this->view->client_details = $client_details;


				$this->view->lbg_address = $client_details['address'];
				$lbg_ik_nummer = $client_details['institutskennzeichen'];
				$this->view->lbg_ik_nummer = $lbg_ik_nummer;
			}

			$operations = array('0' => 'operation_1', '1' => 'operation_2', '2' => 'operation_3');
			$this->view->operations = $operations;

			/* ------------------------------------------------------------------ */
			//get admission-readmission cycles to extract months where there is at least 1 day active START
			//$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid));
			$cycles = $patientmaster->getTreatedDaysRealMultiple(array($ipid),true,$clientid);//ISPC-2609 + ISPC-2000 Ancuta 24.09.2020 - add client param
			$months = array();
//		$active_days = array();
			if(!empty($cycles[$ipid]['admissionDates']))
			{
				foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
				{
					$admission_dates[] = date('Y-m-d', strtotime($v_adm['date']));

					if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
					{
						$start_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_with_discharge = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));
						$discharge_dates[] = $end_with_discharge;

						$period_months = $this->get_period_months($start_with_discharge, $end_with_discharge, "Y-m");
//					$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_with_discharge, $end_with_discharge));
						$months = array_merge($months, $period_months);

						//discharge date is active!
//					$active_days[] = date('Y-m-d', strtotime($end_with_discharge));
					}
					else
					{
						$start_without_discharge = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
						$end_without_discharge = date('Y-m-d', time());
						$discharge_dates[] = $end_without_discharge;

						$period_months_till_now = $this->get_period_months($start_without_discharge, $end_without_discharge, "Y-m");
//					$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($start_without_discharge, $end_without_discharge));
						$months = array_merge($months, $period_months_till_now);
					}
				}
			}
			else
			{
				$cycle_start_period = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));
				if(empty($cycles[$ipid]['discharge_date']))
				{
					$cycle_end_period = date('Y-m-d', time());
				}
				else
				{
					$cycle_end_period = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
				}

				$period_months = $this->get_period_months($cycle_start_period, $cycle_end_period, "Y-m");
//			$active_days = array_merge($active_days, $patientmaster->getDaysInBetween($cycle_start_period, $cycle_end_period));
				$months = array_merge($months, $period_months);

//			$active_days[] = $cycle_end_period;
				$admission_dates[] = $cycle_start_period;
				$discharge_dates[] = $cycle_end_period;
			}

			$admission_dates = array_values(array_unique($admission_dates));
			$discharge_dates = array_values(array_unique($discharge_dates));
//		$active_days = array_values(array_unique($active_days));
			$months = array_values(array_unique($months));

			if($_REQUEST['dbgx'])
			{
				print_r('Active days' . "\n");
				print_r($active_days);
				print_r('Start period' . "\n");
				print_r($cycle_start_period);
				print_r('Cycles');
				print_r($cycles);
				print_r('period months' . "\n");
				print_r($period_months);
				print_r('months' . "\n");
				print_r($months);
			}

//		$this->view->active_days = $active_days;
			//get admission-readmission cycles to extract months where there is at least 1 day active END
			//get number of days in each month + start/end day START
			$months = array_values(array_unique($months));
			$months_array = array_values(array_unique($months));

			foreach($months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}

			//get number of days in each month + start/end day END
			//check if a month is selected START
			if(empty($_REQUEST['list']) && strlen($list) == '0')
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				if(strlen($list) == 0)
				{
					$list = $_REQUEST['list'];
				}
				$selected_month = $month_select_array[$list];
			}

			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
			//check if a month is selected END
			//construct month_selector START
			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_bra_sapv';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//construct month_selector END
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$current_period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);
			$this->view->month_days = $current_period_days;


			//find if there is a sapv for current period START!
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('"' . date('Y-m-d', strtotime($current_period['start'])) . '" <= verordnungbis')
				->andWhere('"' . date('Y-m-d', strtotime($current_period['end'])) . '" >= verordnungam')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->orderBy('verordnungam ASC');

			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();
			foreach($droparray as $k_sapv => $v_sapv)
			{
				
				if($v_sapv['status'] == 1 && ($v_sapv['verorddisabledate'] == '0000-00-00 00:00:00' || $v_sapv['verorddisabledate'] == '1970-01-01 00:00:00') ){
					// this means the sapv is fully denied					
				}
				else
				{	// this means the sapv it is partialy denied and the sapv si Valid until rejection date
					if($v_sapv['status'] == 1 && ($v_sapv['verorddisabledate'] != '0000-00-00 00:00:00'  || $v_sapv['verorddisabledate'] != '1970-01-01 00:00:00') )
					{
						$v_sapv['verordnungbis'] = date("Y-m-d H:i", strtotime($v_sapv['verorddisabledate']));
					}
					$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
					$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
	
					$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);
					$all_sapv_days = array_merge($all_sapv_days, $temp_sapv_days);
	
					foreach($temp_sapv_days as $k_tmp_sapv => $v_tmp_sapv)
					{
						if(!$days2verordnet[$v_tmp_sapv])
						{
							$days2verordnet[$v_tmp_sapv] = array();
						}
	
						$current_verordnet = explode(',', $v_sapv['verordnet']);
						$days2verordnet[$v_tmp_sapv] = array_merge($days2verordnet[$v_tmp_sapv], $current_verordnet);
	
						asort($days2verordnet[$v_tmp_sapv]);
						$days2verordnet[$v_tmp_sapv] = array_values(array_unique($days2verordnet[$v_tmp_sapv]));
					}
				}
			}

			$all_sapv_days = array_values(array_unique($all_sapv_days));
			$this->view->all_sapv_days = $all_sapv_days;
			//find if there is a sapv for current period END!
			//Client Hospital Settings START
			//curent period
			$conditions['periods'][0]['start'] = $current_period['start'];
			$conditions['periods'][0]['end'] = $current_period['end'];
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$conditions['include_standby'] = true;
			//ISPC - 2365 - for privatepatient add patient address
			$sql = 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			
			$patient_days = Pms_CommonData::patients_days($conditions, $sql);

			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
			$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];
//			$hospital_overall_days_cs = $patient_days_overall[$ipid]['hospital']['real_days_cs'];
			$active_days_in_period_cs = $patient_days[$ipid]['real_active_days'];
			$treatment_days_cs = $patient_days[$ipid]['treatment_days'];
			$active_days_cs = $patient_days[$ipid]['active_days'];
			$this->view->active_days = $active_days_cs;

			if($_REQUEST['csdbg'])
			{
				print_r("Old hospital_days\n");
				print_r($full_hospital_days);

				print_r("CS hospital_days\n");
				print_r($hospital_days_cs);

				print_r("Oldhospiz_days\n");
				print_r($hospiz_days_arr);

				print_r("CS hospiz_days\n");
				print_r($hospiz_days_cs);

				print_r("Old active_days_in_period\n");
				print_r($active_days_in_period);

				print_r("CS active_days_in_period\n");
				print_r($active_days_in_period_cs);

				print_r("Old active_days\n");
				print_r($active_days);

				print_r("CS active_days\n");
				print_r($active_days_cs);

				print_r($patient_days);

				exit;
			}
//Client Hospital Settings END

			if($_REQUEST['dbgz'])
			{
				print_r($full_hospital_days);
				exit;
			}
			//get patient locations END
			//get health insurance data START
			$hi_perms = new HealthInsurancePermissions();
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			$hi_perms_divisions = $divisions;

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
			$this->view->health_insurance_name = $healthinsu_array[0]['company_name'];
			$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
			$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
			$this->view->healthinsurance_versnr = $healthinsu_array[0]['insurance_no'];

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(empty($healthinsu_array[0]['name']))
				{
					$healthinsu_array[0]['name'] = $healtharray['name'];
				}
				if(empty($healthinsu_array[0]['ins_street']))
				{
					$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
				}
				if(empty($healthinsu_array[0]['ins_city']))
				{
					$healthinsu_array[0]['ins_city'] = $healtharray['city'];
				}
				if(empty($healthinsu_array[0]['ins_zip']))
				{
					$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
				}

				if(strlen($healthinsu_array[0]['company_name']) == 0)
				{
					$this->view->health_insurance_name = $healtharray['name'];
				}

				if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
				{
					$this->view->health_insurance_ik = $healtharray['iknumber'];
				}

				if(strlen($healthinsu_array[0]['kvk_no']) == 0)
				{
					$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
				}
			}

			if($hi_perms_divisions)
			{
				$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
			}

			if($_REQUEST['dbgq'])
			{
				print_r($ipid);
				print_r($hi_perms_divisions);
				print_r($healthinsu_array);
				exit;
			}
			$pathealthinsurancenr = "";

			if(count($healthinsu_array[0]))
			{
				$phi_details = $healthinsu_array[0]['company_name'];
			}
			else
			{
				$phi_details = "--";
			}
			

			if($healthinsu_array[0]['privatepatient'] == "1")
			{
				//get patient name and adress
				$patient_address = '&nbsp;' . htmlspecialchars($patient_days[$ipid]['details']['first_name']) . ' ' . htmlspecialchars($patient_days[$ipid]['details']['last_name']) . '<br />';
				$patient_address .= '&nbsp;' . htmlspecialchars($patient_days[$ipid]['details']['street1']) . '<br />';
				if($patients_days[$ipid]['details']['zip'] != "")
				{
					$patient_address .= '&nbsp;' . htmlspecialchars($patient_days[$ipid]['details']['zip']) . ' ' . '&nbsp;' . htmlspecialchars($patient_days[$ipid]['details']['city']);
				}
				else 
				{
					$patient_address .= '&nbsp;' . htmlspecialchars($patient_days[$ipid]['details']['city']);
				}
				$phi_details_sub = $patient_address;
			}
			elseif(strlen(trim(rtrim($healthinsu_subdiv_arr[3]['name']))) == '0' && strlen(trim(rtrim($healthinsu_subdiv_arr[3]['street1']))) == '0')
			{
				$phi_name = $healthinsu_array[0]['company_name'];
				$phi_details_sub = $healthinsu_array[0]['company_name'] . '<br/> '. $healthinsu_array[0]['ins_insurance_provider'] . '<br/> ' . $healthinsu_array[0]['ins_street'] . '<br/> ' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];
			}
			else
			{
				$phi_name = $healthinsu_subdiv_arr[3]['name'];
				$phi_details_sub = $healthinsu_subdiv_arr[3]['name'] . '<br/> ' . $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br/> ' . $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];
			}

			$this->view->health_insurance = $phi_details;
			$this->view->hi_subdiv_address = $phi_details_sub;
			//get health insurance data END
			//
	//get pflegestuffe for current period START
			$pflege = new PatientMaintainanceStage();
			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $current_period['start'], $current_period['end']);
			if($pflege_arr)
			{
				$last_pflege = end($pflege_arr);
				$this->view->patient_pflegestufe = $last_pflege['stage'];
			}
			else
			{
				$this->view->patient_pflegestufe = ' - ';
			}
			//get pflegestuffe for current period END
			//
	//get client users
			$user = new User();
			$c_users = $user->getUserByClientid($clientid, 0, true);

			foreach($c_users as $k_c_users => $v_c_users)
			{
				$client_users[$v_c_users['id']] = $v_c_users;
			}

			//get contact forms START
			//get deleted cf from patient course
			$deleted_cf = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere("ipid='" . $ipid . "'")
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhere('source_ipid = ""');
			$deleted_cf_array = $deleted_cf->fetchArray();

			$excluded_cf_ids[] = '99999999999';
			foreach($deleted_cf_array as $k_dcf => $v_dcf)
			{
				$excluded_cf_ids[] = $v_dcf['recordid'];
			}

			//get cf in period - deleted cf
			$cf = new ContactForms();
			$p_contactforms = $cf->get_contact_form_period($ipid, $current_period, $excluded_cf_ids);

			$contact_forms_ids[] = '9999999999999';
			foreach($p_contactforms as $kk_cf => $vv_cf)
			{
				$contact_forms_ids[] = $vv_cf['id'];
			}

			$block_aditional_users = new FormBlockAdditionalUsers();
			$block_au_data = $block_aditional_users->getPatientFormBlockAdditionalUsers($ipid, $contact_forms_ids, false, true);

			$cnt = array();
			foreach($p_contactforms as $k_cf => $v_cf)
			{
				$visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));

				$contact_forms2dates[$visit_date][$v_cf['id']]['start_date'] = $v_cf['start_date'];
				$contact_forms2dates[$visit_date][$v_cf['id']]['end_date'] = $v_cf['end_date'];
				$contact_forms2dates[$visit_date][$v_cf['id']]['del_id'] = 'cf_' . $v_cf['id'];
				$contact_forms2dates[$visit_date][$v_cf['id']]['date'] = $v_cf['billable_date'];
				$contact_forms2dates[$visit_date][$v_cf['id']]['extra_forms'] = '0';
				$has_creator = false;

				if(count($cnt[$visit_date]) >= '3')
				{
					$contact_forms2dates[$visit_date]['2']['extra_forms'] += '1'; //show the remaining
				}

				if(count($block_au_data[$v_cf['id']]) != 0)
				{
					foreach($block_au_data[$v_cf['id']] as $k_block_au_data => $v_block_au)
					{
						$visit_user = $client_users[$v_block_au['additional_user']];
						if($v_block_au['creator'] == '1')
						{
							$has_creator = true;
						}

						if($_REQUEST['dbg'])
						{
							print_r("visit_user 1\n");
							print_r($visit_user);
						}

						if(count($client_users[$v_block_au['additional_user']]) != 0)
						{
							if(strlen($visit_user['shortname']) > '0')
							{
								$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = $visit_user['shortname'];
							}
							else
							{
// 							$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(substr($visit_user['first_name'], 0, 1) . substr($visit_user['last_name'], 0, 1));
								$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(mb_substr($visit_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_user['last_name'], 0, 1, "UTF-8"));
							}
						}
					}
				}

				if(count($block_au_data[$v_cf['id']]) == '0' || $has_creator === false)
				{
					$visit_create_user = $client_users[$v_cf['create_user']];
					if(count($client_users[$v_cf['create_user']]) != 0)
					{
						if(strlen($visit_user['shortname']) > '0')
						{
							$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = $visit_create_user['shortname'];
						}
						else
						{
// 						$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(substr($visit_create_user['first_name'], 0, 1) . substr($visit_create_user['last_name'], 0, 1));
							$contact_forms2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(mb_substr($visit_create_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_create_user['last_name'], 0, 1, "UTF-8"));
						}
					}
				}

				foreach($contact_forms2dates as $k_cf_dates => $v_cf_dates)
				{
					$contact_forms2dates[$k_cf_dates] = array_values($v_cf_dates);
				}

				$cnt[$visit_date][] = $v_cf['id'];
			}
			if($_REQUEST['dbg'])
			{
				print_r($client_users);
				print_r($block_data);
				print_r($cnt);
				print_r($contact_forms2dates);
				exit;
			}
			//get contact forms END
			$visits_array = $contact_forms2dates;
			$this->view->visits_array = $visits_array;

			//get shortcuts and saved pricelist or default pricelist
			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end'],$clientid); //get bra sapv pricelist and then shortcuts

			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$totals = array();
			foreach($shortcuts['bre_sapv'] as $k_sh => $v_sh)
			{
				$totals[$v_sh] = '0';
				$totals_pdf[$v_sh] = '0';
			}

			//get form saved data
			$bre_sapv = new BreSapvControl();
//		$bre_sapv_data = $bre_sapv->get_bre_sapv_controlsheet($ipid, $current_period['start'], $master_price_list, $active_days, $full_hospital_days, $hospiz_days_arr);
			$bre_sapv_data = $bre_sapv->get_bre_sapv_controlsheetnew($ipid, $current_period['start'], $master_price_list, $active_days_cs, $hospital_days_cs, $hospiz_days_cs);

			if($_REQUEST['dbgdata'])
			{
				print_r($bre_sapv_data);
				exit;
			}

			
			$saved_data = 0;
			if($bre_sapv_data) //read saved data
			{
				$master_data = $bre_sapv_data;
				$totals = $bre_sapv_data['totals'];
				$saved_data = 1;
			}
			else //load system wide date
			{
			    $saved_data = 0;
				if($_REQUEST['dbgzadm'])
				{
					print_r($admission_dates);
				}

				foreach($shortcuts['bre_sapv'] as $k_short => $v_short)
				{
					foreach($current_period_days as $k_c_day => $v_c_day)
					{
						//Assessment, Beratung und Koordination
						if($v_short == 'abk' && in_array($v_c_day, $admission_dates) && in_array(date('d.m.Y', strtotime($v_c_day)), $treatment_days_cs))
						{
							$master_data[$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							$master_data[$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_short][$v_c_day]['qty'] = '1';
							$totals[$v_short] += '1';
						}

						//Beratung und Koordination
						if($v_short == 'bk' && in_array($v_c_day, $admission_dates) && in_array(date('d.m.Y', strtotime($v_c_day)), $treatment_days_cs))
						{
							$master_data[$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							$master_data[$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_short][$v_c_day]['qty'] = '1';
							$totals[$v_short] += '1';
						}
					}

					foreach($days2verordnet as $k_vv_day => $v_vv_values)
					{
						$k_vv_day_alt = date('d.m.Y', strtotime($k_vv_day));
						//Additiv unterstützte Teilversorgung
						if($v_short == 'aut' && in_array('3', $v_vv_values) && !in_array('4', $v_vv_values) && in_array($k_vv_day, $current_period_days) && in_array($k_vv_day_alt, $active_days_cs) && !in_array($k_vv_day_alt, $hospital_days_cs) && !in_array($k_vv_day_alt, $hospiz_days_cs) && count($visits_array[$k_vv_day]) > '0') //tv reqired
						{
							$master_data[$v_short][$k_vv_day] = $master_price_list[$k_vv_day][0][$v_short];
							$master_data[$v_short]['price'] = $master_price_list[$k_vv_day][0][$v_short]['price'];
							$master_data[$v_short][$k_vv_day]['vv'] = $v_vv_values;
							$master_data[$v_short][$k_vv_day]['qty'] = '1';
							$totals[$v_short] += '1';
						}

						//Vollständige Versorgung
						if($v_short == 'vv' && in_array('4', $v_vv_values) && in_array($k_vv_day, $current_period_days) && in_array($k_vv_day_alt, $active_days_cs) && !in_array($k_vv_day_alt, $hospital_days_cs) && !in_array($k_vv_day_alt, $hospiz_days_cs) && count($visits_array[$k_vv_day]) > '0') //vv required
						{
							$master_data[$v_short][$k_vv_day] = $master_price_list[$k_vv_day][0][$v_short];
							$master_data[$v_short]['price'] = $master_price_list[$k_vv_day][0][$v_short]['price'];
							$master_data[$v_short][$k_vv_day]['vv'] = $v_vv_values;
							$master_data[$v_short][$k_vv_day]['qty'] = '1';
							$totals[$v_short] += '1';
						}
					}
				}
			}

			if($this->getRequest()->isPost())
			{
				if(strlen($_REQUEST['list']) > 0)
				{
					$period_list = '&list=' . $_REQUEST['list'];
				}
				else
				{
					$period_list = '';
				}

				if($_POST['form_action'] == "save")
				{
					//clear old entries for curent month
					$reset_sapv_form_data = Application_Form_BreSapv::reset_bre_sapv($ipid, $current_period['start']);

					//insert
					$insert_sapv_form_data = Application_Form_BreSapv::insert_bre_sapv_values($ipid, $_POST, $current_period_days, $shortcuts['bre_sapv'], $days2verordnet);
					$this->_redirect(APP_BASE . 'patientform/bresapvperformance?id=' . $_REQUEST['id'] . $period_list);
					exit;
				}
				else if($_POST['form_action'] == "pdf")
				{
					$post['post_data'] = $_POST;
					$post['patient_details'] = $pm;
					$post['shortcuts'] = $shortcuts['bre_sapv'];
					$post['health_insurance_name'] = $this->view->health_insurance_name;
					$post['health_insurance_ik'] = $this->view->health_insurance_ik;
					$post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;
					$post['healthinsurance_versnr'] = $this->view->healthinsurance_versnr;
					$post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
					$post['month_selected'] = date('m.Y', strtotime($current_period['start']));
					$post['totals'] = $totals_pdf; //empty totals per shortcut
					$post['month_days'] = $current_period_days;
					$post['all_sapv_days'] = $all_sapv_days;
//				$post['active_days'] = $active_days;
//				$post['full_hospital_days'] = $full_hospital_days;
//				$post['full_hospiz_days'] = $hospiz_days_arr;
					$post['active_days'] = $active_days_cs;
					$post['full_hospital_days'] = $hospital_days_cs;
					$post['hospiz_days_arr'] = $hospiz_days_cs;
					$post['master_price_list'] = $master_price_list;
					$post['current_period'] = $current_period;
					$post['days2verordnet'] = $days2verordnet;
					$post['operations'] = $operations;




					$post['lbg_client_name'] = $client_details['client_name'];
					$post['lbg_address'] = $client_details['address'];
					$post['lbg_ik_nummer'] = $client_details['institutskennzeichen'];

					$post['all_sapv_days'] = $all_sapv_days;
					$post['visits_array'] = $visits_array;

					$gen_pdf = $this->generate_pdf($post, 'bresapvperformance', 'bresapvperformance_pdf.html');
				}
				else if($_POST['form_action'] == "reset")
				{
					$reset_sapv_form_data = Application_Form_BreSapv::reset_bre_sapv($ipid, $current_period['start']);
					$this->_redirect(APP_BASE . 'patientform/bresapvperformance?id=' . $_REQUEST['id'] . $period_list);
					exit;
				}
				elseif(!empty($_REQUEST['mode']) && $_REQUEST['mode'] == 'del')
				{
					$del_id_exp = explode('_', $_REQUEST['delid']);

					if(!empty($del_id_exp[1]) && $del_id_exp[0] == 'n')
					{
						$nurse = new KvnoNurse();
						$delete_nurse_visit = $nurse->deleteNurseVisit($del_id_exp[1]);
						echo '1';
						exit;
					}
					else if(!empty($del_id_exp[1]) && $del_id_exp[0] == 'd')
					{
						$doctor_visit = new KvnoDoctor();
						$delete_doc_visit = $doctor_visit->deleteDoctorVisit($del_id_exp[1]);
						echo '1';
						exit;
					}
					else if(!empty($del_id_exp[1]) && $del_id_exp[0] == 'cf')
					{
						$contact_forms = new ContactForms();
						$delete_contact_forms = $contact_forms->deleteContactForm($del_id_exp[1], $ipid);
						echo '1';
						exit;
					}
				}
			}
			else if($_REQUEST['mode'] == 'pdfs')
			{
				if(empty($_REQUEST['iid']))
				{
					$bre_inv_number = $breinvoices->get_next_invoice_number($clientid, true);
					$prefix = $bre_inv_number['prefix'];
					$invoicenumber = $bre_inv_number['invoicenumber'];

					$post['completed_date'] = date('Y-m-d H:i:s', time());
				}

				$sapvs = new SapvVerordnung();
				$period_sapv = $sapvs->getSapvInPeriod($ipid, $current_period['start'], $current_period['end']);

				if($period_sapv[0]['approved_date'] != '0000-00-00 00:00:00' && strlen($period_sapv[0]['approved_date']) > 0 && $period_sapv[0]['approved_date'] != '1970-01-01 00:00:00')
				{
					$post['sapv_approve_date'] = date('d.m.Y', strtotime($period_sapv[0]['approved_date']));
				}
				else
				{
					$post['sapv_approve_date'] = ' - ';
				}

				if(strlen($period_sapv[0]['approved_number']) > 0)
				{
					$post['sapv_approve_nr'] = $period_sapv[0]['approved_number'];
				}
				else
				{
					$post['sapv_approve_nr'] = ' - ';
				}

				asort($active_days_in_period_cs);
				$active_days_in_period_cs = array_values($active_days_in_period_cs);
				if(count($active_days_in_period_cs) > 0)
				{
//				$start = date('d.m.Y', strtotime($active_days_in_period[0]));
					$start = $active_days_in_period_cs[0];
					$post['first_active_day'] = $start;
					$last_day = end($active_days_in_period_cs);
//				$end = date('d.m.Y', strtotime($last_day));
					$post['last_active_day'] = $last_day;
				}

				if(empty($_REQUEST['iid']))
				{
					foreach($master_data as $k_master_data => $v_master_data)
					{

						if($k_master_data != 'totals' && $active_days_cs)
						{
							foreach($v_master_data as $k_day => $v_data_values)
							{
								$k_day_alt = date('d.m.Y', strtotime($k_day));
								if($v_data_values['qty'] != '0' && in_array($k_day_alt, $active_days_cs) && !in_array($k_day_alt, $hospital_days_cs) && !in_array($k_day_alt, $hospiz_days_cs))
								{
									$final_pdf_master_data[$k_master_data][date('d', strtotime($k_day))] = $v_data_values['qty'];
									$invoice_items[$k_master_data]['qty'] += $v_data_values['qty'];
									$invoice_items[$k_master_data]['price'] = $v_data_values['price'];
									$invoice_items[$k_master_data]['shortcut_total'] += ($v_data_values['qty'] * $v_data_values['price']);
									$invoice_items[$k_master_data]['shortcut_total'] = str_replace(",", ".", $invoice_items[$k_master_data]['shortcut_total']);//todo-1299
									$grand_total += $v_data_values['qty'] * $v_data_values['price'];
									$grand_total = str_replace(",", ".", $grand_total); //todo-1299
								}
							}
						}
					}
				}


				if(strlen($_REQUEST['iid']) > '0' && count($breinvoice_details['items']) > 0)
				{
					foreach($breinvoice_details['items'] as $k_inv_item => $v_inv_item)
					{
						$invoice_items[$v_inv_item['shortcut']] = $breinvoice_details['items'][$k_inv_item];
						$invoice_items[$v_inv_item['shortcut']]['shortcut_total'] = ($v_inv_item['qty'] * $v_inv_item['price']);
						$invoice_items[$v_inv_item['shortcut']]['shortcut_total'] = str_replace(",", ".", $invoice_items[$v_inv_item['shortcut']]['shortcut_total']);
						$grand_total = $breinvoice_details['invoice_total'];
					}
				}



				if(empty($_REQUEST['pdfquick']) && empty($_REQUEST['iid']))
				{
					//insert invoice data and items
					$ins_inv = new BreInvoices();
					$ins_inv->invoice_start = $current_period['start'];
					$ins_inv->invoice_end = $current_period['end'];
					$ins_inv->start_active = date('Y-m-d H:i:s', strtotime($post['first_active_day']));
					$ins_inv->end_active = date('Y-m-d H:i:s', strtotime($post['last_active_day']));
					$ins_inv->sapv_approve_date = date('Y-m-d H:i:s', strtotime($post['sapv_approve_date']));
					$ins_inv->sapv_approve_nr = $post['sapv_approve_nr'];
					$ins_inv->ipid = $ipid;
					$ins_inv->client = $clientid;
					$ins_inv->prefix = $prefix;
					$ins_inv->healthinsurance_name = $phi_name;
					$ins_inv->healthinsurance_ik = $this->view->health_insurance_ik;
					$ins_inv->healthinsurance_ver = $this->view->healthinsurance_versnr;
					$ins_inv->invoice_number = $invoicenumber;
					$ins_inv->invoice_total = $grand_total;
					$ins_inv->address = $phi_details_sub;
 					// $ins_inv->reminder_text = 'Bitte überweisen Sie den Betrag bis zum (' . date('d.m.Y', strtotime('+21 days')) . ') auf unser Konto.<br /> Bei Rückfragen erreichen Sie uns unter der Rufnummer: 0421-879 15 45';
					// TODO-1233
					$ins_inv->reminder_text = 'Bitte überweisen Sie den Betrag bis zum ' . date('d.m.Y', strtotime('+21 days')) . ' auf unser Konto.';
					$ins_inv->status = '1';
					$ins_inv->save();

					$ins_id = $ins_inv->id;
					if($ins_id)
					{
						foreach($invoice_items as $k_shortcut_inv => $v_values_inv)
						{
							$invoice_items_arr[] = array(
								'invoice' => $ins_id,
								'client' => $clientid,
								'shortcut' => $k_shortcut_inv,
								'qty' => $v_values_inv['qty'],
								'price' => $v_values_inv['price']
							);
						}

						if(count($invoice_items_arr) > 0)
						{
							//insert many records with one query!!
							$collection = new Doctrine_Collection('BreInvoiceItems');
							$collection->fromArray($invoice_items_arr);
							$collection->save();
						}
					}
					$post['unique_id'] = $ins_id;
				}

				if(strlen($breinvoice_details['healthinsurance_ik']) > '0')
				{
					$health_insurance_ik = $breinvoice_details['healthinsurance_ik'];
				}
				else
				{
					$health_insurance_ik = $this->view->health_insurance_ik;
				}

				if(strlen($breinvoice_details['healthinsurance_ver']) > '0')
				{
					$healthinsurance_ver = $breinvoice_details['healthinsurance_ver'];
				}
				else
				{
					$healthinsurance_ver = $this->view->healthinsurance_versnr;
				}

				$post['health_insurance'] = $phi_details;

				if(!$post['address'])
				{
					$post['hi_subdiv_address'] = Pms_CommonData::br2nl($phi_details_sub);
				}
				else
				{
					$post['hi_subdiv_address'] = Pms_CommonData::br2nl($post['address']);
				}

				$post['post_data'] = $final_pdf_master_data;
				$post['invoice_items'] = $invoice_items;
				$post['grand_total'] = $grand_total;

				if(!$post['healthinsurance_name'])
				{
					$post['healthinsurance_name'] = $phi_name;
				}


				$post['current_period_start'] = date('d.m.Y', strtotime($current_period['start']));
				$post['current_period_end'] = date('d.m.Y', strtotime($current_period['end']));
				$post['invoice_number'] = $invoicenumber;
				$post['prefix'] = $prefix;
				$post['hide_visits'] = '1';
				$post['patient_details'] = $pm;
				$post['shortcuts'] = $shortcuts['bre_sapv'];
				$post['health_insurance_name'] = $this->view->health_insurance_name;
				$post['health_insurance_ik'] = $health_insurance_ik;
				$post['healthinsurance_versnr'] = $healthinsurance_ver;
				$post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;
				$post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
				$post['month_selected'] = date('m.Y', strtotime($current_period['start']));
				$post['totals'] = $totals_pdf; //empty totals per shortcut
				$post['month_days'] = $current_period_days;
				$post['all_sapv_days'] = $all_sapv_days;
//			$post['active_days'] = $active_days;
//			$post['full_hospital_days'] = $full_hospital_days;
//			$post['full_hospiz_days'] = $hospiz_days_arr;
				$post['active_days'] = $active_days_cs;
				$post['full_hospital_days'] = $hospital_days_cs;
				$post['full_hospiz_days'] = $hospiz_days_cs;
				$post['master_price_list'] = $master_price_list;
				$post['current_period'] = $current_period;
				$post['days2verordnet'] = $days2verordnet;
				$post['operations'] = $operations;
				$post['lbg_address'] = $address;
				$post['all_sapv_days'] = $all_sapv_days;
				$post['visits_array'] = $visits_array;



				$post['client_city'] = $client_details['client_city'];
				//client ik number is required in invoice
				$post['lbg_ik_nummer'] = $client_details['institutskennzeichen'];
				$post['lbg_client_name'] = $client_details['client_name'];
				$post['ik_nummer'] = $client_details['institutskennzeichen'];
				$post['client_details'] = $client_details;

				if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'] > '0')
				{
					$storno_data = $breinvoices->getBreInvoice($_REQUEST['storno']);
					
					//ISPC-2532 Lore 09.11.2020
					$post['storned_invoice_number'] = $post['prefix'].$post['invoice_number'];
					
					$post['address'] = $storno_data['address'];
					$post['prefix'] = $storno_data['prefix'];
					$post['invoice_number'] = $storno_data['invoice_number'];
					$post['client_city'] = $client_details[0]['city'];
					$post['ik_nummer'] = $client_details[0]['institutskennzeichen'];
					if($storno_data['completed_date'] != '0000-00-00 00:00:00')
					{
						$post['completed_date'] = date('d.m.Y', strtotime($storno_data['completed_date']));
					}

					$post['first_active_day'] = date('d.m.Y', strtotime($storno_data['start_active']));
					$post['last_active_day'] = date('d.m.Y', strtotime($storno_data['end_active']));
					if(strlen($storno_data['healthinsurance_name']) > '0')
					{
						$post['healthinsurance_name'] = $storno_data['healthinsurance_name'];
					}
					if(strlen($storno_data['health_insurance_ik']) > '0')
					{
						$post['health_insurance_ik'] = $storno_data['health_insurance_ik'];
					}
					if(strlen($post['healthinsurance_versnr']) > '0')
					{
						$post['healthinsurance_versnr'] = $storno_data['healthinsurance_versnr'];
					}

					//$post['unique_id'] = $storno_data['record_id'];
					
					//ISPC-2609 + ISPC-2000 Ancuta 22-24.09.2020
					if($_REQUEST['bulk_print'] == '1'){
					    $pseudo_post['unique_id'] = $storno_data['id'];
					}else{
					    $pseudo_post['unique_id'] = $storno_data['record_id'];
					}
					
					
					$post['sapv_footer'] = $storno_data['footer'];
					$post['reminder_text'] = $storno_data['reminder_text'];

					$post['grand_total'] = ($storno_data['invoice_total'] * (-1));

					if($storno_data['invoice_start'] != '0000-00-00 00:00:00' && $storno_data['invoice_end'] != '0000-00-00 00:00:00')
					{
						$post['current_period_start'] = date('d.m.Y', strtotime($storno_data['invoice_start']));
						$post['current_period_end'] = date('d.m.Y', strtotime($storno_data['invoice_end']));
					}

					$template_files = array('storno_invoice_bre_sapv_pdf.html');
				}
				else
				{
					$template_files = array('invoice_bre_sapv_pdf.html');
				}



				$orientation = array('P');
				$background_pages = array('0'); //0 is first page;

				if($_REQUEST['pdfquick'])
				{
					$excluded = array('address', 'sapv_footer', 'reminder_text', 'hi_subdiv_address');
				}
				else
				{
					$excluded = array('address', 'sapv_footer', 'reminder_text', 'hi_subdiv_address');
				}
				$post = Pms_CommonData::clear_pdf_data($post, $excluded);

				//todo-1299
				if($_REQUEST['show_pdf_data'] == "1"){
					print_r($post['invoice_items']); exit;
				}
				
				

				// ISPC-2472 @Ancuta 07.11.2019
				$pdf_file_name =  "bresapvperformance";
				
				$invoice_number_full="";
				$invoice_number_full .=  (strlen($post['prefix']) > 0) ? $post['prefix'] : '';
				$invoice_number_full .= $post['invoice_number'];
				
				if(strlen($invoice_number_full) > 0 ){
				    $pdf_file_name = $invoice_number_full;
				}
				// --
				
				
				
				if($_REQUEST['bulk_print'] == '1'){
				    $post['bulk_print'] = 1;
				    $post['batch_temp_folder'] = $_REQUEST['batch_temp_folder'];
				    $post['clientid'] = $clientid;
				        
				    $files = $this->generate_multiple_page_pdf($post, $pdf_file_name, $template_files, $orientation, $background_pages);
			 
				    
				    return $files;
				    exit();
				    
				} else{
					
					//ISPC-2745 Carmen 17.11.2020
					//create batch name
					$Batch_name = false;
					$Batch_name = $post['prefix'].$post['invoice_number'];
					
					$template_data = InvoiceTemplates::get_template($clientid, false, '1', 'bre_sapv_invoice');
					
					if($template_data)
					{
						// generate invoice page
						$tokenfilter = array();
						$tokenfilter['invoice']['address'] = $post['hi_subdiv_address'];
						$tokenfilter['client']['city'] = $post['client_city'];
						$tokenfilter['client']['institutskennzeichen'] = $post['ik_nummer'];
						if($post['completed_date'] != "0000-00-00 00:00:00" && $post['completed_date'] != "1970-01-01 00:00:00")
						{
							$tokenfilter['invoice']['invoicedate'] = date('d.m.Y', strtotime($post['completed_date']));
						}
						else
						{
							$tokenfilter['invoice']['invoicedate'] = "";
						}
						
						$tokenfilter['invoice']['prefix'] = $post['prefix'];
						$tokenfilter['invoice']['invoicenumber'] = $post['invoice_number'];
						$tokenfilter['invoice']['full_invoice_number'] = $post['prefix'].$post['invoice_number'];
						if($post['first_active_day'] != "0000-00-00 00:00:00" && $post['first_active_day'] != "1970-01-01 00:00:00")
						{
							$tokenfilter['invoice']['first_active_day'] = date('d.m.Y', strtotime($post['first_active_day']));
						}
						else
						{
							$tokenfilter['invoice']['first_active_day'] = "-";
						}
						if($post['last_active_day'] != "0000-00-00 00:00:00" && $post['last_active_day'] != "1970-01-01 00:00:00")
						{
							$tokenfilter['invoice']['last_active_day'] = date('d.m.Y', strtotime($post['last_active_day']));
						}
						else
						{
							$tokenfilter['invoice']['last_active_day'] = "-";
						}
						
						$tokenfilter['invoice']['healthinsurancenumber'] = $post['insurance_no'];
						$tokenfilter['invoice']['health_insurance_ik'] = $post['health_insurance_ik'];
						$tokenfilter['invoice']['healthinsurance_versnr'] = $post['healthinsurance_versnr'];
						
						
						$tokenfilter['patient'] = $post['patient_details'];
						$tokenfilter['invoice']['patient_pflegestufe'] = $post['patient_pflegestufe'];
						
						if($post['healthinsurance_name'] != "")
						{
							$tokenfilter['healthinsurance']['healthinsurance_name'] = $post['healthinsurance_name'];
						}
						else 
						{
							$tokenfilter['healthinsurance']['healthinsurance_name'] = "--";
						}
						
						$tokenfilter['invoice']['unique_id'] = $post['unique_id'];
						
						if($post['current_period']['start'] != "0000-00-00 00:00:00" && $post['current_period']['start'] != "1970-01-01 00:00:00")
						{
							$tokenfilter['invoice']['invoice_period_start'] = date('d.m.Y', strtotime($post['current_period']['start']));
						}
						else
						{
							$tokenfilter['invoice']['invoice_period_start'] = "-";
						}
						if($post['current_period']['end'] != "0000-00-00 00:00:00" && $post['current_period']['end'] != "1970-01-01 00:00:00")
						{
							$tokenfilter['invoice']['invoice_period_end'] = date('d.m.Y', strtotime($post['current_period']['end']));
						}
						else
						{
							$tokenfilter['invoice']['invoice_period_end'] = "-";
						}
						
						if($_REQUEST['stornopdf'] == '1' && $_REQUEST['storno'])
						{
							$tokenfilter['invoice']['invoiceamount'] = number_format($post['grand_total'], '2', ',', '.');
						}
						else
						{
							$tokenfilter['invoice']['invoiceamount'] = number_format($post['grand_total'], '2', ',', '.');
						}
							
						$keyi = 0;
						foreach($post['invoice_items'] as $kivi => $vivi)
						{
								$bre_sapv_invoice_items['items'][$keyi]['shortcuts'][$kivi] = $vivi;
								$keyi++;
					
						}
						
						if(count($post['invoice_items']) > '0')
						{
							$rows = count($bre_sapv_invoice_items['items']);
							$grid = new Pms_Grid($bre_sapv_invoice_items['items'], 1, $rows, "bre_sapv_invoice_items_list_pdf.html");
							//$grid_short = new Pms_Grid($sgbxi_invoice_items['items'], 1, $rows, "bw_sgbxi_invoice_items_list_pdf_short.html");
					
							$grid->invoice_total = $tokenfilter['invoice']['invoiceamount'];
							$grid->max_entries = $rows;
					
							/* $grid_short->invoice_total = $tokenfilter['invoice']['invoiceamount'];
							$grid_short->max_entries = $rows; */
								
							$html_items = $grid->renderGrid();
							//$html_items_short = $grid_short->renderGrid();
						}
						else
						{
							$html_items = "";
							$html_items_short = "";
						}
					
						$tokenfilter['invoice']['invoice_items_html'] = $html_items;
						//$tokenfilter['invoice']['invoice_items_html_short'] = $html_items_short;
						//print_r($tokenfilter); exit;
					
						$docx_helper = $this->getHelper('CreateDocxFromTemplate');
						$docx_helper->setTokenController('invoice');
					
						//create public/joined_files/ dir
						while(!is_dir(PDFJOIN_PATH))
						{
							mkdir(PDFJOIN_PATH);
							if($i >= 50)
							{
								exit; //failsafe
							}
							$i++;
						}
					
						//create public/joined_files/$clientid dir
						$pdf_path = PDFJOIN_PATH . '/' . $clientid;
					
						while(!is_dir($pdf_path))
						{
							mkdir($pdf_path);
							if($i >= 50)
							{
								exit; //failsafe
							}
							$i++;
						}
					
						$tmpstmp = isset($this->view->folder_stamp) ? $this->view->folder_stamp : time();
					
						while(!is_dir($pdf_path . '/' . $tmpstmp))
						{
							mkdir($pdf_path . '/' . $tmpstmp);
							if($i >= 50)
							{
								exit; //failsafe
							}
							$i++;
						}
					
						$template = INVOICE_TEMPLATE_PATH . '/' . $template_data[0]['file_path'];
					
						$destination_path = $pdf_path . '/' . $tmpstmp . '/';
					
						$docx_helper->setOutputFile($destination_path.$Batch_name);

						//do not add extension !
						$docx_helper->setBrowserFilename($Batch_name);
					
						$docx_helper->create_pdf ($template, $tokenfilter) ;
							
						$docx_helper->download_file();
						exit;
					}
					else
					{				    
				    	$gen_pdf = $this->generate_multiple_page_pdf($post, $pdf_file_name, $template_files, $orientation, $background_pages);
					}
				}
			}


			$this->view->shortcuts = $shortcuts['bre_sapv'];
			$this->view->saved_data = $saved_data;
			$this->view->master_data = $master_data;
			$this->view->month_days = $current_period_days;
			$this->view->all_sapv_days = $all_sapv_days;
//		$this->view->active_days = $active_days;
//		$this->view->full_hospital_days = $full_hospital_days;
//		$this->view->full_hospiz_days = $hospiz_days_arr;
			$this->view->active_days = $active_days_cs;
			$this->view->full_hospital_days = $hospital_days_cs;
			$this->view->full_hospiz_days = $hospiz_days_cs;
			$this->view->hospiz_days_arr = $hospiz_days_cs;
			$this->view->master_price_list = $master_price_list;
			$this->view->current_period = $current_period;
			$this->view->totals = $totals;
			$this->view->days2verordnet = $days2verordnet;
		}

		public function entranceassessmentAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->patid = $decid;
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$userid = $logininfo->userid;
			$this->view->pid = $_GET['id'];
			$this->view->enc_patid = $_GET['id'];

			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge
			{
			    $acknowledge = "1";
			    $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			    $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			/* ----------------------Patient Info & Tab menus-------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* -------------------Patient Data--------------------------------------- */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();

			$eas['patient_details']['last_name'] = $patientarr['last_name'];
			$eas['patient_details']['first_name'] = $patientarr['first_name'];
			$eas['patient_details']['birthd'] = $patientarr['birthd'];
			$eas['patient_details']['address'] = "";

			if(!empty($patientarr['street1']))
			{
				$eas['patient_details']['address'] .= $patientarr['street1'];
			}

			if(!empty($patientarr['zip']))
			{
				$eas['patient_details']['address'] .= '<br/>' . $patientarr['zip'];
			}

			if(!empty($patientarr['city']))
			{
				$eas['patient_details']['address'] .= ' ' . $patientarr['city'];
			}

			$this->view->living_will = $patientarr['living_will'];

			/* ---------------------------Get patient details from Stammdaten -------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];

			/* ---------------------- Patient Client validations & data-------------------------- */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$clientq = new Client();
			$clientdata = $clientq->getClientDataByid($clientid);
			$eas['client']['city'] = $clientdata['0']['city'];

			if(!empty($clientdata['0']['city']))
			{
				$eas['client']['city_date'] = $clientdata['0']['city'] . ', ' . date('d.m.Y', time());
			}
			else
			{
				$eas['client']['city_date'] = date('d.m.Y', time());
			}
			$eas['assessment']['sapv_date'] = date('d.m.Y', time());

			/* ---------------------- Patient - check discharge -------------------------- */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			/* ---------------------- MASTER DIAGNOSIS DATA----------------------- */
			$dm = new DiagnosisIcd();
			$this->view->icddiagnosisarr = $dm->getDiagnosisData(1);

			$dm = new DiagnosisMeta();
			$diagnosismeta = $dm->getDiagnosisMetaData(1);

			$this->view->diagnosismeta = $diagnosismeta;
			$this->view->jsdiagnosismeta = json_encode($diagnosismeta);

			$dm = new PatientDiagnosisMeta();
			$dmarray = $dm->getPatientDiagnosismeta($ipid);
			/* ---------------------- User list ----------------------- */
			$usr = new User();
			$pqarr = $usr->getUserByClientid($clientid);
			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));
			$users = $usr->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;

			/* ----------------------FORM SAVE  -start ----------------------- */
			//check for assessment in db
			$Q = Doctrine_Query::create()
				->select('*')
				->from('EntranceAssessment')
				->where("ipid=?", $ipid)
				->orderBy('id DESC')
				->limit('1');
			$last_assessment_saved = $Q->fetcharray();

			$new_allowed = 0;
			$existing_assessment = 0;

			if($last_assessment_saved && $last_assessment_saved [0]['status'] == 0 && $last_assessment_saved [0]['completed_date'] == "0000-00-00 00:00:00")
			{
				$new_allowed = 1;
				$existing_assessment = 1;
			}
			$this->view->new_allowed = $new_allowed;

			/* ################################################################################## */
			if($this->getRequest()->isPost())
			{
				if($_REQUEST['dbgg'])
				{
					print_r($_POST);
					exit;
				}
				
				if($acknowledge =="1")
				{
				    $_POST['skip_trigger'] = "1";
				}

				$init = new Application_Form_EntranceAssessment();

				$field_names = array(
					"pain_symptom" => "Schmerzen:",
					"pain_localisation" => "Schmerzen Lokalisation: ",
					"pain_symptom_2" => "Schmerzen:",
					"pain_localisation_2" => "Schmerzen Lokalisation: ",
					"pain_symptom_3" => "Schmerzen:",
					"pain_localisation_3" => "Schmerzen Lokalisation: ",
					"pain_symptom_4" => "Schmerzen:",
					"pain_localisation_4" => "Schmerzen Lokalisation: ",
					"last_hospital" => "Letzte Krankenhausbehandlung am",
					"last_hospital_period" => "Letzte Krankenhausbehandlung wo",
					"other_text" => "Sonstiges: ",
					"psychosocial_care" => "Psychosoziale Betreuung durch: ",
					"social_environment" => "amilie / soziales Umfeld: ",
					"psychosocial_interventions" => "Erforderliche psychosoziale Interventionen: "
				);

				$field_tumor = array("tumor_brain" => "Hirn", "tumor_lung" => "Lunge", "tumor_liver" => "Leber", "tumor_bone" => "Knochen", "tumor_other_text" => "Sonstige");
				$field_therapy = array(
					"therapy_op" => "OP",
					"therapy_radio" => "Strahlentherapie",
					"therapy_chemo" => "Chemotherapie",
					"therapy_other_text" => "Sonstige"
				);
				$field_adm = array(
					"adm_oral" => "oral",
					"adm_iv" => "i.v.",
					"adm_sc" => "s.c.",
					"adm_im" => "i.m.",
				    "adm_transdermal" => "transdermal",
					"adm_infusion" => "Infusion",
					"adm_inhalation" => "Inhalation",
					"adm_schmerzpumpe" => "Schmerzpumpe",
					"adm_port" => "Port",
					"adm_nasogastric_tube" => "nasale Magensonde" //ISPC - 2289
				);

				$field_req_t = array(
					"required_chemo" => "Chemotherapie",
					"required_antibiosis" => "Antibiose",
					"required_kg" => "KG",
					"required_enteral_nutrition" => "enterale Ernährung",
					"required_radiatio" => "Radiatio",
					"required_lymphatic" => "Lymphdrainage",
					"required_o2_ventilation" => "O2 Gabe / Beatmung",
					"required_parental_nutrition" => "parenterale Ernährung",
				);

				$field_special = array(
					"administer_oxigen" => "Sauerstoffgabe",
					"colostomy" => "Anus praeter",
					"urostomy" => "Urostoma",
					"tracheostomy" => "Tracheostoma",
					"warehousing" => "Lagerung",
					"wound_treatment" => "Wundbehandlung",
				);


				$pain_values = array(
					"1" => "mild 1-2",
					"2" => "mild 1-2",
					"3" => "mild 1-2",
					"4" => "mäßig stark 3-4 ",
					"5" => "mäßig stark 3-4 ",
					"6" => "stark 5-6 ",
					"7" => "stark 5-6 ",
					"8" => "sehr stark 7-8 ",
					"9" => "sehr stark 7-8 ",
					"10" => "unerträglich 9-10 ",
					"11" => "unerträglich 9-10 "
				);

				/* ========================================== */
				if($_POST['eas']['assessment']['new_assessment'] == '1')
				{
					$_POST['eas']['assessment']['first_form'] = 2;

					$update_old = $init->set_completed_entrance_assessment($_POST['eas']['assessment'], $ipid, '1');
					$create_new = $init->insertEntranceAssessment($_POST['eas']['assessment'], $ipid);

					$custcourse = new PatientCourse();
					$custcourse->ipid = $ipid;
					$custcourse->course_date = date("Y-m-d H:i:s", time());
					$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					$comment = "Eingangsassessment von " . $_POST['eas']['assessment']['completed_date'];
					$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					$custcourse->user_id = $userid;
					$custcourse->save();

					//completed!
					$custcourse = new PatientCourse();
					$custcourse->ipid = $ipid;
					$custcourse->course_date = date("Y-m-d H:i:s", time());
					$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					$comment = "Eingangsassessment wurde abgeschlossen";
					$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					$custcourse->user_id = $userid;
					$custcourse->save();

					$course_type = Pms_CommonData::aesEncrypt("K");
					foreach($_POST['eas']['assessment'] as $key_p => $val_p)
					{
						//all fields and their values
						if((array_key_exists($key_p, $field_names) || array_key_exists($key_p, $field_tumor) || array_key_exists($key_p, $field_therapy) ||
							array_key_exists($key_p, $field_adm) || array_key_exists($key_p, $field_special)) && strlen($val_p) > 0)
						{

							if(array_key_exists($key_p, $field_therapy))
							{
								if($key_p == "therapy_other_text")
								{
									$comment = "Bisherige Therapien: Sonstiges " . $val_p;
								}
								else
								{
									$comment = "Bisherige Therapien: " . $field_therapy[$key_p];
								}
							}
							else if(array_key_exists($key_p, $field_tumor))
							{
								if($key_p == "tumor_other_text")
								{
									$comment = "Tumorausbreitung / Metastasierung: Sonstiges " . $val_p;
								}
								else
								{
									$comment = "Tumorausbreitung / Metastasierung: " . $field_tumor[$key_p];
								}
							}
							else if(array_key_exists($key_p, $field_adm))
							{
								$comment = "Art der Verabreichung: " . $field_adm[$key_p];
							}
							else if(array_key_exists($key_p, $field_req_t))
							{
								$comment = "Weitere erforderliche Behandlungen: " . $field_req_t[$key_p];
							}
							else if(array_key_exists($key_p, $field_req_t))
							{
								$comment = "Weitere erforderliche Behandlungen: " . $field_req_t[$key_p];
							}
							else if(array_key_exists($key_p, $field_special))
							{
								$comment = "Erforderliche besondere palliativpflegerische Maßnahmen: " . $field_special[$key_p];
							}
							else
							{
								$comment = $field_names[$key_p] . " " . $val_p;
								if($key_p == "pain_symptom" || $key_p == "pain_symptom_2" || $key_p == "pain_symptom_3" || $key_p == "pain_symptom_4")
								{
									$comment = $field_names[$key_p] . " " . $pain_values[$val_p];
								}
							}

							//write in verlauf all *more textareas if has >0 string lenght
							$custcourse = new PatientCourse();
							$custcourse->ipid = $ipid;
							$custcourse->course_date = date("Y-m-d H:i:s", time());
							$custcourse->course_type = $course_type;
							$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
							$custcourse->user_id = $userid;
							$custcourse->save();
						}
					}
					$custcourse = new PatientCourse();
					$custcourse->ipid = $ipid;
					$custcourse->course_date = date("Y-m-d H:i:s", time());
					$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					$comment = "New Eingangsassessment was created";
					$comment = "neues Assessment wurde erstellt.";
					$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					$custcourse->user_id = $userid;
					$custcourse->save();
				}
				/* ========================================== */

				if($_POST['save_form'] == 1)
				{
					if($init->validate($_POST))
					{
						/* --------------------HEALTH INSURANCE SAVE --------------------------- */
						if(!empty($_POST['eas']['health_insurance']))
						{
							$patient_insurance_form = new Application_Form_PatientHealthInsurance();
							$this->insurance = $patient_insurance_form->validate($_POST['eas']['health_insurance']);

							if($this->insurance)
							{
								/* ------------------------------- ADD NEW HEATH INSURANCE (NOT FROM LIST) --------------------------- */
								if(empty($_POST['eas']['health_insurance']['hdn_companyid']))
								{
									$post = $_POST['eas']['health_insurance'];
									$hinsu = new HealthInsurance();
									$hinsu->clientid = $logininfo->clientid; //logininfo
									$hinsu->name = $post['company_name'];
									$hinsu->kvnumber = $post['kvk_no'];
									$hinsu->iknumber = $post['institutskennzeichen'];
									$hinsu->street1 = $post['ins_street'];
									$hinsu->city = $post['ins_city'];
									$hinsu->phone = $post['ins_phone'];
									$hinsu->phone2 = $post['ins_phone2'];
									$hinsu->phonefax = $post['ins_phonefax'];
									$hinsu->post_office_box = $post['ins_post_office_box'];
									$hinsu->zip_mailbox = $post['ins_zip_mailbox'];
									$hinsu->post_office_box_location = $post['ins_post_office_box_location'];
									$hinsu->email = $post['ins_email'];
									$hinsu->zip = $post['ins_zip'];
									$hinsu->comments = $post['comment'];
									$hinsu->valid_from = date("Y-m-d", time());
									$hinsu->extra = 1;
									$hinsu->save();
									$lastId = $hinsu->id;

									$_POST['eas']['health_insurance']['hdn_companyid'] = $lastId;
								}
// 							$patient_insurance_form->UpdateData($_POST['eas']['health_insurance']);


								$Mhi2s = Doctrine_Query::create()
									->select("*")
									->from("PatientHealthInsurance")
									->where("ipid like  '" . $ipid . "' ");
								$custarr = $Mhi2s->fetchArray();

								if(count($custarr) > 0)
								{
									$post = $_POST['eas']['health_insurance'];

									$cust = Doctrine::getTable('PatientHealthInsurance')->find($custarr[0]['id']);
									$cust->kvk_no = $post['kvk_no'];
									$cust->institutskennzeichen = $post['institutskennzeichen'];
									$cust->ins_contactperson = Pms_CommonData::aesEncrypt($post['ins_contactperson']);
									$cust->company_name = Pms_CommonData::aesEncrypt($post['company_name']);
									$cust->companyid = $post['hdn_companyid'];
									$cust->ins_insurance_provider = Pms_CommonData::aesEncrypt($post['ins_insurance_provider']);
									$cust->ins_zip = Pms_CommonData::aesEncrypt($post['ins_zip']);
									$cust->ins_street = Pms_CommonData::aesEncrypt($post['ins_street']);
									$cust->ins_city = Pms_CommonData::aesEncrypt($post['ins_city']);
									$cust->ins_phone = Pms_CommonData::aesEncrypt($post['ins_phone']);
									$cust->ins_phone2 = Pms_CommonData::aesEncrypt($post['ins_phone2']);
									$cust->ins_phonefax = Pms_CommonData::aesEncrypt($post['ins_phonefax']);
									$cust->ins_post_office_box = Pms_CommonData::aesEncrypt($post['ins_post_office_box']);
									$cust->ins_zip_mailbox = Pms_CommonData::aesEncrypt($post['ins_zip_mailbox']);
									$cust->ins_post_office_box_location = Pms_CommonData::aesEncrypt($post['ins_post_office_box_location']);
									$cust->ins_email = Pms_CommonData::aesEncrypt($post['ins_email']);
									$cust->save();
								}
								else
								{
									$post = $_POST['eas']['health_insurance'];

									$cust = new PatientHealthInsurance();
									$cust->ipid = $ipid;
									$cust->kvk_no = $post['kvk_no'];
									$cust->institutskennzeichen = $post['institutskennzeichen'];
									$cust->ins_contactperson = Pms_CommonData::aesEncrypt($post['ins_contactperson']);
									$cust->company_name = Pms_CommonData::aesEncrypt($post['company_name']);
									$cust->companyid = $post['hdn_companyid'];
									$cust->ins_insurance_provider = Pms_CommonData::aesEncrypt($post['ins_insurance_provider']);
									$cust->ins_zip = Pms_CommonData::aesEncrypt($post['ins_zip']);
									$cust->ins_street = Pms_CommonData::aesEncrypt($post['ins_street']);
									$cust->ins_city = Pms_CommonData::aesEncrypt($post['ins_city']);
									$cust->ins_phone = Pms_CommonData::aesEncrypt($post['ins_phone']);
									$cust->ins_phone2 = Pms_CommonData::aesEncrypt($post['ins_phone2']);
									$cust->ins_phonefax = Pms_CommonData::aesEncrypt($post['ins_phonefax']);
									$cust->ins_post_office_box = Pms_CommonData::aesEncrypt($post['ins_post_office_box']);
									$cust->ins_zip_mailbox = Pms_CommonData::aesEncrypt($post['ins_zip_mailbox']);
									$cust->ins_post_office_box_location = Pms_CommonData::aesEncrypt($post['ins_post_office_box_location']);
									$cust->ins_email = Pms_CommonData::aesEncrypt($post['ins_email']);
									$cust->save();
								}
							}
							else
							{
								$patient_insurance_form->assignErrorMessages();
								$this->retainValues($_POST['eas']['health_insurance']);
							}
						}
					}
				}

				/* ----------------------DIAGNOSIS SAVE  -start ----------------------- */
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('Patientdiagnosis', $logininfo->userid, 'canadd');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$pat_diagnosis = new Application_Form_PatientDiagnosis();
				$diagno_text = new Application_Form_DiagnosisText();

				$a_post = $_POST;
				$a_post['clientid'] = $clientid;
				$a_post['ipid'] = $ipid;

//			for($i = 1; $i <= sizeof($_POST['diagnosis']); $i++)
				foreach($_POST['diagnosis'] as $k_i => $v_i)
				{
					if(strlen($v_i) > 0 && strlen($_POST['hidd_diagnosis'][$k_i]) < 1)
					{
						$a_post['newdiagnosis'][$k_i] = $v_i;
						$a_post['newdiagnosistype'][$k_i] = $_POST['dtype'][$k_i];
						$a_post['newdiagnosisicd'][$k_i] = $_POST['icdnumber'][$k_i];
					}
				}

				if(is_array($a_post['newdiagnosis']))
				{
					$dt = $diagno_text->InsertEditData($a_post);
					foreach($dt as $key => $val)
					{
						$a_post['newhidd_diagnosis'][$key] = $val['id'];
					}
				}

				for($i = 1; $i <= sizeof($_POST['diagnosis_ed']); $i++)
				{
					if(strlen($_POST['diagnosis_ed'][$i]) > 0 && strlen($_POST['hidd_diagnosis_ed'][$i]) < 1)
					{
						$a_post['newdiagnosis_ed'][$i] = $_POST['diagnosis_ed'][$i];
						$a_post['newdiagnosistype_ed'][$i] = $_POST['dtype_ed'][$i];
					}
				}

				if(is_array($a_post['newdiagnosis_ed']))
				{
					$dt = $diagno_text->Insert_EdData($a_post);

					foreach($dt as $key => $val)
					{
						$a_post['newhidd_diagnosis_ed'][$key] = $val['id'];
					}
				}

				$reorder = $pat_diagnosis->UpdateData($a_post);
				$dm_form = new Application_Form_PatientDiagnosisMeta();
				$dm_form->UpdateData($a_post);
				//TODO-2493 Lore 13.08.2019
				$data['diagno_order'] = $reorder;
				$entity = PatientDiagnoOrderTable::getInstance()->findOrCreateOneBy('ipid', $ipid, $data);
				
				/* ----------------------DIAGNOSIS SAVE  -end ----------------------- */

				/* ----------------------MEDICATION EDIT  -start ----------------------- */
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'canedit');
				$patient_medication_form = new Application_Form_Medication();

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$a_post = $_POST;
				for($i = 1; $i <= count($_POST['medication']); $i++)
				{
					if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
					{
						$a_post['newmids'][$i] = $_POST['drid'][$i];
						$a_post['newmedication'][$i] = $_POST['medication'][$i];
					}
				}

				if(is_array($a_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($a_post);

					foreach($dts as $key => $dt)
					{
						$a_post['newhidd_medication'][$key] = $dt->id;
					}
				}
				$a_post['add_sets'] = "1";
				$med_form = new Application_Form_PatientDrugPlan();
				$med_form->UpdateMultiData($a_post);
				/* ----------------------MEDICATION EDIT  -end ----------------------- */

				/* ----------------------MEDICATION ADD  -start ----------------------- */
				$med_form = new Application_Form_PatientDrugPlan();
				$patient_medication_form = new Application_Form_Medication();

				$add_post = $_POST['add'];
				$add_post['ipid'] = $ipid;
				$add_post['isbedarfs'] = 0;
				$add_post['add_sets'] = "1";
				foreach($add_post['medication'] as $key => $val)
				{
					if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
					{
						$add_post['newmedication'][$key] = $add_post['medication'][$key];
					}
				}

				if(is_array($add_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($add_post);

					foreach($dts as $key => $dt)
					{
						$add_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form->InsertMultiData($add_post);

				if(count($_POST['addbedarf']) > 0)
				{
					$med_form = new Application_Form_PatientDrugPlan();
					$patient_medication_form = new Application_Form_Medication();

					$add_post = $_POST['addbedarf'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 1;

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}
					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);

						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}
					$med_form->InsertMultiData($add_post);
				}
				/* ----------------------MEDICATION ADD  -end ----------------------- */

				//post insert procedure btnsave submit
				if($_POST['save_form'] == '1')
				{

					$post = $_POST;
					$post['issaved'] = $firstsave[0]['issaved'];
					$post['wascompleted'] = $firstsave[0]['iscompleted'];

					//only if new assessment is not pressed
					if($_POST['eas']['assessment']['new_assessment'] != 1)
					{
						$assessment_form = new Application_Form_EntranceAssessment();

						//IF WE ALREADY HAVE A SAVED FORM
						if($existing_assessment > 0)
						{
							//UPDATE
							if(!empty($post['eas']['assessment']['id']))
							{

								$result = $init->updateEntranceAssessment($post['eas']['assessment'], $ipid);

								$custcourse = new PatientCourse();
								$custcourse->ipid = $ipid;
								$custcourse->course_date = date("Y-m-d H:i:s", time());
								$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
								$comment = "Eingangsassessment wurde editiert";
								$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
								$custcourse->user_id = $userid;
								$custcourse->tabname = Pms_CommonData::aesEncrypt('entrance_assessment_from');
								$custcourse->save();

								$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
							}
						}
						else
						{

							$result = $init->insertEntranceAssessment($post['eas']['assessment'], $ipid);

							$custcourse = new PatientCourse();
							$custcourse->ipid = $ipid;
							$custcourse->course_date = date("Y-m-d H:i:s", time());
							$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
							$comment = "Eingangsassessment wurde gespeichert";
							$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
							$custcourse->tabname = Pms_CommonData::aesEncrypt('entrance_assessment_from');
							$custcourse->user_id = $userid;
							$custcourse->save();


							$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
						}
					}

					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
				}
			}

			//get all assessments in insert order
			$Q = Doctrine_Query::create()
				->select('*')
				->from('EntranceAssessment')
				->where("ipid='" . $ipid . "'")
				->orderBy('id ASC');
			$all_assessment = $Q->fetcharray();

			if(count($all_assessment) <= 1)
			{
				$eas['assessment']['first_form'] = 1;
			}
			else
			{
				$eas['assessment']['first_form'] = 2;
			}

			//save data post procedure end
			/* ---------------------- Patient - Diagnosis ----------------------- */
			if($dmarray)
			{
				$metatitle[0] = $dmarray[0]['metaid'];
				$metatitle[1] = $dmarray[1]['metaid'];
				$metatitle[2] = $dmarray[2]['metaid'];

				$meta_title_hidd[0] = $dmarray[0]['id'];
				$meta_title_hidd[1] = $dmarray[1]['id'];
				$meta_title_hidd[2] = $dmarray[2]['id'];
			}

			/* ---------------------- Patient - Diagnosis Metastasen start ----------------------- */
			if(count($dmarray) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = "";
				$metadiagnosis = "";
				foreach($dmarray as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle_value)
					{
						$metadiagnosis .= $comma . $metatitle_value['meta_title'];
						$comma = ",";
					}
				}
			}

			$eas['diagnosis']['metastasen'] = $metadiagnosis;

			/* ---------------------- Patient - Diagnosis Metastasen end----------------------- */
			$this->view->metatitle = $metatitle;
			$this->view->meta_title_hidd = $meta_title_hidd;

			$abb = "'HD','ND'";
			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($clientid, $abb);
			$this->view->dtypearray = $darr;
			$this->view->jdarr = json_encode($darr);

			$comma = ",";
			$idval = "'0'";

			if(is_array($darr))
			{
				foreach($darr as $key => $val)
				{
					$idval .= $comma . "'" . $val['id'] . "'";
					$comma = ",";
				}
			}

			$diagns = new PatientDiagnosis();
			$a_diagno = $diagns->getFinalData($ipid, $idval);

			$diagno_cnt = count($a_diagno);
			
			/*ISPC - 2364 - sorted by user */
			$pdiaord = PatientDiagnoOrderTable::getInstance()->findDiagnoOrder($ipid);
			//RWH - ISPC-950
			//sort by icd
			if(empty($pdiaord))
			{
				$a_diagno = $this->array_sort($a_diagno, 'icdnumber', SORT_ASC);
				$a_diagno = array_values($a_diagno);
			
				//sort by type
				foreach($darr as $k_diag_type => $v_diag_type)
				{
					foreach($a_diagno as $k_diag => $v_diag)
					{
						if($v_diag_type['id'] == $v_diag['diagnosis_type_id'])
						{
							$a_diagno_sorted[] = $v_diag;
						}
					}
				}
				//RWH end
			}
			else
			{
				$a_diagno = array_column($a_diagno, null, 'pdid');
				$pdorder = $pdiaord[0]['diagno_order'];
					
				$diagnaddother = array_diff(array_keys($a_diagno), $pdorder);
				$diagnremoveother = array_diff($pdorder, array_keys($a_diagno));
					
				if($diagnaddother)
				{
					$pdorder = array_merge($pdorder, $diagnaddother);
				}
					
				if($diagnremoveother)
				{
					$pdorder = array_diff($pdorder, $diagnremoveother);
				}
					
				$a_diagno_sorted = [];
				foreach ($pdorder as $pdid) {
					$a_diagno_sorted[] = $a_diagno[$pdid];
				}
			}
			$a_diagno = $a_diagno_sorted;
			
			if(strlen($_POST['pdf']) == 0 && strlen($_POST['save_form']) == 0)
			{
				if($diagno_cnt < 6)
				{
					for($i = ($diagno_cnt + 1); $i <= 6; $i++)
					{
						$a_diagno[$i]['tabname'] = "";
						$a_diagno[$i]['icdnumber'] = "";
						$a_diagno[$i]['hidd_icdnumber'] = "";
						$a_diagno[$i]['diagnosis'] = "";
						$a_diagno[$i]['pdid'] = "";
						$a_diagno[$i]['hidd_diagnosis'] = "";
						$a_diagno[$i]['diagnosis_type_id'] = "";
						$a_diagno[$i]['meta_title1'] = "";
						$a_diagno[$i]['meta_title2'] = "";
						$a_diagno[$i]['meta_title3'] = "";
					}
				}
			}

			// DIAGNOSIS GRID
			$meta_data = PatientDiagnosisMeta::getPatientDiagnosismeta($ipid);

			foreach($meta_data as $kx => $mvas_data)
			{
				$meta_diagnosis[$mvas_data['diagnoid']][] = $mvas_data['metaid'];
			}

			$grid_diagno = new Pms_Grid($a_diagno, 1, count($a_diagno), "listdiagnosis.html");
			$grid_diagno->meta_diagnosis = $meta_diagnosis;
			$grid_diagno->gridview->dtypearray = $darr;
			$this->view->diagno = $grid_diagno->renderGrid();

			// PDF - disgnosis grid
			if($this->getRequest()->isPost())
			{
				$a_diagno = Pms_CommonData::clear_pdf_data($a_diagno);
				$grid_pdf = new Pms_Grid($a_diagno, 1, count($a_diagno), "listdiagnosis_pdf.html");
				$grid->meta_diagnosis = $meta_diagnosis;
				$grid_pdf->gridview->dtypearray = $darr;
				$this->view->diagno_pdf = $grid_pdf->renderGrid();
			}

			//DIAGNO COUNT
			$this->view->jscount = count($a_diagno);
			$this->view->rowcount = count($a_diagno);
			/* ---------------------- Patient - Diagnosis end ----------------------- */

			/* ---------------------- Patient - Diagnosis MAIN start----------------------- */
			$dg = new DiagnosisType();
			$abb_main = "'HD'";
			$ddarr_main = $dg->getDiagnosisTypes($logininfo->clientid, $abb_main);
			$commas = ",";
			$typeid_main = "'0'";

			foreach($ddarr_main as $key => $valdia_maine)
			{
				$typeid_main .=$commas . "'" . $valdia_maine['id'] . "'";
				$commas = ",";
			}
			$diagns = new PatientDiagnosis();
			$dianoarray = $diagns->getFinalData($ipid, $typeid_main);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $keym => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}
			$eas['diagnosis']['main'] = $diagnosis;
			/* ---------------------- Patient - Diagnosis MAIN end ----------------------- */

			/* ---------------------- Patient - Diagnosis SIDE start----------------------- */
			$dg = new DiagnosisType();
			$abb_side = "'ND'";
			$ddarr_side = $dg->getDiagnosisTypes($logininfo->clientid, $abb_side);
			$commass = ",";
			$typeid_side = "'0'";

			foreach($ddarr_side as $keys => $valdia_sidee)
			{
				$typeid_side .= $commass . "'" . $valdia_sidee['id'] . "'";
				$commass = ",";
			}

			$diano_side_array = $diagns->getFinalData($ipid, $typeid_side);

			if(count($diano_side_array) > 0)
			{
				$comma = "";
				$diagnosis_side = "";
				foreach($diano_side_array as $key => $valdias)
				{
					if(strlen($valdias['diagnosis']) > 0)
					{
						$diagnosis_side .= $comma . $valdias['diagnosis'] . ' (' . $valdias['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			$eas['diagnosis']['side'] = $diagnosis_side;
			/* ---------------------- Patient - Diagnosis MAIN end ------------------ */
			/* ---------------------- Patient - Diagnosis end ----------------------- */

			/* ---------------------- Patient - MEDICATION EDIT---------------------- */

			$pq = new User();
			$pqarr = $pq->getUserByClientid($logininfo->clientid);
			$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);
			$this->view->kvnodelicon = "1";

			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";

			#######################################
			$medic = new PatientDrugPlan();

			// get bedarf medication
			$medicarr = $medic->getbedarfMedication($decid);

			$medication_master_ids['bedarf'][] = "XXXXXX";
			foreach($medicarr as $k_medicarr => $v_medicarr)
			{
				$medication_master_ids['bedarf'][] = $v_medicarr['medication_master_id'];
			}

			// get active medication
			$medicarr1 = $medic->getMedicationPlan($decid);

			$medication_master_ids['active'][] = "XXXXXX";
			foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
			{
				$medication_master_ids['active'][] = $v_medicarr1['medication_master_id'];
			}


			// get deleted medication
			$medicarr2 = $medic->getDeletedMedication($decid);

			$medication_master_ids['deleted'][] = "XXXXXX";
			foreach($medicarr2 as $k_medicarr2 => $v_medicarr2)
			{
				$medication_master_ids['deleted'][] = $v_medicarr2['medication_master_id'];
			}

			// get master medication data
			$medication_master_ids = array_merge($medication_master_ids['bedarf'], $medication_master_ids['active'], $medication_master_ids['deleted']);

			$med = new Medication();
			$medarr1 = $med->getMedicationById($medication_master_ids);

			foreach($medarr1 as $k_medarr1 => $v_medarr1)
			{
				$medication_master_array[$v_medarr1['id']] = $v_medarr1;
			}

			// display active medication
			if(count($medicarr1 < 1))
			{
				$this->view->mcntr = 0;
			}

			$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->medications = $grid->renderGrid();

			// count medication
			$this->view->ajx = 1;
			$this->view->cntr = count($medicarr1);

			// discplay deleted medication
			$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "listdelpatientmedication_ajax.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->delmedications = $grid->renderGrid();


			// count medication
			$this->view->counter = count($medicarr1) + count($medicarr2);

			// display bedarf medication
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationbedarfsedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->bedarfsmedications = $grid->renderGrid();

			#######################################################




			if(($this->getRequest()->isPost() && strlen($_POST['pdf']) > 0) || ($this->getRequest()->isPost() && $_POST['eas']['assessment']['new_assessment'] == '1')) // PDF
			{
				// PDF MEDICATION LIST
				$commam = "";
				foreach($medicarr1 as $keym => $valm)
				{
					$medcam = Doctrine::getTable('Medication')->find($valm['medication_master_id']);
					if($medcam)
					{
						$medcaarray = $medcam->toArray();
						$medication_list.= $commam . $medcaarray['name'] . " (" . $valm['dosage'] . ")";
						$commam = "; ";
					}
				}
				$eas['medication']['normal'] = $medication_list;

				// PDF BEDARF LIST
				$comma = "";
				foreach($medicarr as $key => $val)
				{

					$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
					if($medca)
					{
						$bedarf_medcaarray = $medca->toArray();
						$bedarf_medication_list.= $comma . $bedarf_medcaarray['name'] . " (" . $val['dosage'] . ")";
						$comma = "; ";
					}
				}

				$eas['medication']['bedarf'] = $bedarf_medication_list;
			}

			// PATIENT MEDICATION - COUNTS
// 		$this->view->counter = count($med_array) + count($medi_deleted_arr);
			$this->view->counter = count($medicarr) + count($medicarr1) + count($medicarr2);
			$med_counter = count($medicarr) + count($medicarr1) + count($medicarr2);

			if(count($med_counter < 1))
			{
				$this->view->mcntr = 0;
			}
			$this->view->ajx = 1;
			$this->view->cntr = count($med_counter);

			/* ---------------------- Patient - MEDICATION ADD----------------------- */
			$a_medic = array();
			for($i = 0; $i < 6; $i++)
			{
				$a_medic[$i] = array('cnt' => $i);
			}
			$this->view->jsmedcount = count($a_medic);
			$this->view->rowcount = count($a_medic);

			// PATIENT MEDICATION ADD
			$grid_med_add = new Pms_Grid($a_medic, 1, count($a_medic) + 9999, "listpatientmedicationadd.html");
			$this->view->medicgrid = $grid_med_add->renderGrid();

			// PATIENT BEDARF MEDICATION ADD
			$grid_med_bedarf_add = new Pms_Grid($a_medic, 1, count($a_medic) + 99999, "listpatientbedarfmedicationadd.html");
			$this->view->bedarfmedicgrid = $grid_med_bedarf_add->renderGrid();

			/* ---------------------- Patient - PFLEGEDIENST ADD----------------------- */
			$pat_pfl = new PatientPflegedienste();

			$res_pfledge = $pat_pfl->getPatientLastPflegediensteNew($ipid, false);
			$res_pfledge_palliativ = $pat_pfl->getPatientLastPflegediensteNew($ipid, true);

			$this->view->ppd_id = $res_pfledge_palliativ[0]['pflege_id'];
			$this->view->pfledge_id = $res_pfledge[0]['pflege_id'];

			/* ----------------Patient - Health insurance details-------------------------------------- */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if($phi)
			{
				/* -------------------------GET HEALTH INSURANCE DETAILS------------------------------- */
				if(empty($phi[0]['institutskennzeichen']) || $phi[0]['institutskennzeichen'] == 0)
				{
					if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
					{
						$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
						$healtharray = $helathins->toArray();
						$institutskennzeichen = $healtharray['iknumber'];
						$phi[0]['institutskennzeichen'] = $institutskennzeichen;
					}
				}

				if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($phi[0]['ins_street']))
					{
						$phi[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($phi[0]['ins_city']))
					{
						$phi[0]['ins_city'] = $healtharray['city'];
					}
					if(empty($phi[0]['ins_zip']))
					{
						$phi[0]['ins_zip'] = $healtharray['zip'];
					}
				}

				if($phi[0]['privatepatient'] == '1' && $phi[0]['direct_billing'] == '1')
				{
					$phi[0]['direct_billing'] = '0';
				}

				$eas['health_insurance'] = $phi[0];
			}

			/* ----------------Patient - Location details-------------------------------------- */
			$hospitalids = Doctrine_Query::create()
				->select("*,(CONVERT(AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') using latin1)) as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type = 1');
			$hosparray = $hospitalids->fetchArray();

			$hosparr[] = "9999999999";
			foreach($hosparray as $hospital)
			{
				$hosparr[] = $hospital['id'];
				$hospital_location_array[$hospital['id']] = $hospital['location'];
			}

			//get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
				->andWhereIn('location_id', $hosparr)
				->orderBy('valid_from DESC')
				->limit('1');
			$patlocationsArr = $patloc->fetchArray();

			if($patlocationsArr)
			{
				$last_hospital = $hospital_location_array[$patlocationsArr[0]['location_id']];

				if($patlocationsArr[0]['valid_till'] != '' && $patlocationsArr[0]['valid_till'] != '0000-00-00 00:00:00')
				{
					$valid_till = date('d.m.Y', strtotime($patlocationsArr[0]['valid_till']));
				}
				else
				{
					$valid_till = date('d.m.Y');
				}

				$valid_from = date('d.m.Y', strtotime($patlocationsArr[0]['valid_from']));
				$last_hospital_period = $valid_from . ' - ' . $valid_till;

				$eas['assessment']['last_hospital'] = $last_hospital;
				$eas['assessment']['last_hospital_period'] = $last_hospital_period;
			}

			/* ----------------------------------- Patient Maintainance Stage --------------------------- */
			$pms = new PatientMaintainanceStage();
			$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);
			$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
			$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
			$this->view->carelevellist = $grid->renderGrid();
			$this->view->stage = $pat_pms[0]['stage'];
			$this->view->erstantrag = $pat_pms[0]['erstantrag'];
			$this->view->horherstufung = $pat_pms[0]['horherstufung'];

			/* ----------------------------------- Patient Maintainance Stage --------------------------- */
			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);
			$this->view->alone = $pat_lives[0]['alone'];
			$this->view->house_of_relatives = $pat_lives[0]['house_of_relatives'];
			$this->view->apartment = $pat_lives[0]['apartment'];
			$this->view->home = $pat_lives[0]['home'];
			$this->view->hospiz = $pat_lives[0]['hospiz'];
			$this->view->with_partner = $pat_lives[0]['with_partner'];
			$this->view->with_child = $pat_lives[0]['with_child'];
			$this->view->sonstiges = $pat_lives[0]['sonstiges'];

			/* --------------Stammdaten -  Patient details	---------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->zvk = $pat_moreinfo[0]['zvk'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];
			$this->view->magensonde = $pat_moreinfo[0]['magensonde'];
			$this->view->pegmore = $pat_moreinfo[0]['pegmore'];
			$this->view->portmore = $pat_moreinfo[0]['portmore'];

			/* --------------Patient - family doctor	---------------------------- */
			$eas['patient_details']['familly_doctor'] = "0";
			$eas['patient_details']['familly_doctor_details'] = "";
			if($patientarr['familydoc_id'] > 0)
			{
				$fdoc = Doctrine_Core::getTable('FamilyDoctor')->find($patientarr['familydoc_id']);
				if($fdoc)
				{
					$docarr = $fdoc->toArray();
					$doc_title = "";
					if($docarr['title'] == "")
					{
						$doc_title = $docarr['title'];
					}
					else
					{
						$doc_title = $docarr['title'] . " ";
					}
				}

				if(empty($docarr['last_name']) && empty($docarr['first_name']) && empty($docarr['street1']) && empty($docarr['zip']) && empty($docarr['city']))
				{

					$doctor_data['familly_doctor_details'] = "";
				}
				else
				{
					$doctor_data['familly_doctor_details'] = $doc_title . "" . $docarr['last_name'] . ", " . $docarr['first_name'] . "; " . $docarr['street1'] . ", " . $docarr['zip'] . " " . $docarr['city'];
				}
			}
			else
			{
				$doctor_data['familly_doctor_details'] = "";
			}
			if(strlen($doctor_data['familly_doctor_details']) > 3)
			{
				$eas['patient_details']['familly_doctor'] = 1;
				$eas['patient_details']['familly_doctor_details'] = $doctor_data['familly_doctor_details'];
			}

			/* --------------Patient -  Pflegedienste ---------------------------- */
			$eas['patient_details']['pflegedienst'] = 0;
			$eas['patient_details']['pflegedienst_details'] = "";
			$pat_pfl = new PatientPflegedienste();
			$ppflearray = $pat_pfl->getPatientLastPflegediensteDetails($ipid);

			if($ppflearray)
			{
				if(empty($ppflearray['nursing']) && empty($ppflearray['last_name']) && empty($ppflearray['first_name']) && empty($ppflearray['street1']) && empty($ppflearray['zip']) && empty($ppflearray['city']))
				{

					$pflege_data['pflegedienst_details'] = "";
				}
				else
				{
					$pflege_data['pflegedienst_details'] = $ppflearray['nursing'] . "; " . $ppflearray['last_name'] . ", " . $ppflearray['first_name'] . "; " . $ppflearray['street1'] . ", " . $ppflearray['zip'] . " " . $ppflearray['city'];
				}
				$eas['patient_details']['pflegedienst'] = 1;
				$eas['patient_details']['pflegedienst_details'] = $pflege_data['pflegedienst_details'];
			}

			/* --------------Patient -  Contact person ---------------------------- */
			$eas['patient_details']['contact_person'] = 0;
			$eas['patient_details']['contact_person_details'] = "";
			$pc = new ContactPersonMaster();
			$pcster = $pc->getPatientContact($ipid);
			$pcs = $pcster[0];
			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);

			if($pcs)
			{
				if(empty($pcs['cnt_last_name']) && empty($pcs['cnt_first_name']) && empty($pcs['cnt_street1']) && empty($pcs['cnt_zip']) && empty($pcs['cnt_city']))
				{
					$cnt_data['contact_person_details'] = "";
				}
				else
				{
					$cnt_data['contact_person_details'] = $pcs['cnt_last_name'] . ", " . $pcs['cnt_first_name'] . "; " . $pcs['cnt_street1'] . ", " . $pcs['cnt_zip'] . " " . $pcs['cnt_city'];
				}
				$eas['patient_details']['contact_person'] = 1;
				$eas['patient_details']['contact_person_details'] = $cnt_data['contact_person_details'];
			}

			/* --------------Patient - Hospizdienst ---------------------------- */
			$eas['patient_details']['hospiceassociations'] = 0;
			$eas['patient_details']['hospiceassociations_details'] = "";
			$hp_assoc = new PatientHospiceassociation ();
			$hp_assoc_array = $hp_assoc->getPatientHospiceassociation($ipid);
			$hp_assoc_array = $hp_assoc_array[0];

			if($hp_assoc_array)
			{
				if(empty($hp_assoc_array['last_name']) && empty($hp_assoc_array['first_name']) && empty($hp_assoc_array['street1']) && empty($hp_assoc_array['zip']) && empty($hp_assoc_array['city']))
				{

					$hps_data['hospiceassociations_details'] = "";
				}
				else
				{
					$hps_data['hospiceassociations_details'] = $hp_assoc_array['last_name'] . ", " . $hp_assoc_array['first_name'] . "; " . $hp_assoc_array['street1'] . ", " . $hp_assoc_array['zip'] . " " . $hp_assoc_array['city'];
				}
				$eas['patient_details']['hospiceassociations'] = 1;
				$eas['patient_details']['hospiceassociations_details'] = $hps_data['hospiceassociations_details'];
			}

			/* -------------- ENTRANCE ASSESSMENT FILE HISTORY	---------------------------- */
			$fileupload = new PatientFileUpload();
			$form_files = $fileupload->get_entrance_assessment_file_data($ipid);

			foreach($form_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}
			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			$this->view->form_files = $form_files;

			/* -------------- Entrance Assessment details	---------------------------- */
			$Q = Doctrine_Query::create()
				->select('*')
				->from('EntranceAssessment')
				->where("ipid='" . $ipid . "'")
				->orderBy('id DESC')
				->limit('1');
			$resarr = $Q->fetchArray();

			if(count($resarr) > 0)
			{
				$this->view->assessment_id = $resarr[0]['id'];
				$this->retainValues($resarr[0]);
				$eas['assessment'] = $resarr[0];
			}

			if(!empty($eas['assessment']['sapv_date']) && $eas['assessment']['sapv_date'] != "0000-00-00 00:00:00")
			{
				$eas['assessment']['sapv_date'] = date('d.m.Y', strtotime($eas['assessment']['sapv_date']));
			}

			$this->view->eas = $eas;


			/* ------------------------ PDF PROCEDURE -------------------------------------- */
			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['eas']['diagnosis'] = $eas['diagnosis'];
				$post['eas']['patient_details'] = $eas['patient_details'];
				$post['eas']['medication'] = $eas['medication'];
				$post['entrance_assessment_id'] = $_POST['eas']['assessment']['id'];

				/* =================== if new assessment generated ======================= */
				if($_POST['eas']['assessment']['new_assessment'] == '1')
				{
					$Q = Doctrine_Query::create()
						->select('*')
						->from('EntranceAssessment')
						->where("ipid='" . $ipid . "'")
						->andWhere('status = 1 ')
						->orderBy('id ASC');
					$all_completed_assessment = $Q->fetcharray();

					$post['assessment_version'] = count($all_completed_assessment);
					$post['assessment_version_complete'] = $_POST['eas']['assessment']['completed_date'];

					$this->generateformPdf(4, $post, 'entrance_assessment_save', "entranceassessment_pdf.html");

					$this->_redirect(APP_BASE . "patientform/entranceassessment?id=" . $_REQUEST['id']);
				}
				/* ========================================== */

				if(strlen($_POST['pdf']) > 0)
				{
					$this->generateformPdf(3, $post, 'entrance_assessment', "entranceassessment_pdf.html");
				}
			}
		}
		
		
		public function kinderentranceassessmentAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->patid = $decid;
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->ipid = $ipid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$userid = $logininfo->userid;
			$this->view->pid = $_GET['id'];

			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge
			{
			    $acknowledge = "1";
			    $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			    $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			/* ----------------------Patient Info & Tab menus-------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* -------------------Patient Data--------------------------------------- */
			$epid = Pms_CommonData::getEpidFromId($decid);
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();

			$eas['patient_details']['last_name'] = $patientarr['last_name'];
			$eas['patient_details']['first_name'] = $patientarr['first_name'];
			$eas['patient_details']['birthd'] = $patientarr['birthd'];
			$eas['patient_details']['address'] = "";

			if(!empty($patientarr['street1']))
			{
				$eas['patient_details']['address'] .= $patientarr['street1'];
			}

			if(!empty($patientarr['zip']))
			{
				$eas['patient_details']['address'] .= '<br/>' . $patientarr['zip'];
			}

			if(!empty($patientarr['city']))
			{
				$eas['patient_details']['address'] .= ' ' . $patientarr['city'];
			}

			$this->view->living_will = $patientarr['living_will'];

			/* ---------------------------Get patient details from Stammdaten -------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];

			/* ---------------------- Patient Client validations & data-------------------------- */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			$clientq = new Client();
			$clientdata = $clientq->getClientDataByid($clientid);
			$eas['client']['city'] = $clientdata['0']['city'];

			if(!empty($clientdata['0']['city']))
			{
				$eas['client']['city_date'] = $clientdata['0']['city'] . ', ' . date('d.m.Y', time());
			}
			else
			{
				$eas['client']['city_date'] = date('d.m.Y', time());
			}
			$eas['assessment']['sapv_date'] = date('d.m.Y', time());

			/* ---------------------- Patient - check discharge -------------------------- */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);

			/* ---------------------- MASTER DIAGNOSIS DATA----------------------- */
			$dm = new DiagnosisIcd();
			$this->view->icddiagnosisarr = $dm->getDiagnosisData(1);

			$dm = new DiagnosisMeta();
			$diagnosismeta = $dm->getDiagnosisMetaData(1);

			$this->view->diagnosismeta = $diagnosismeta;
			$this->view->jsdiagnosismeta = json_encode($diagnosismeta);

			$dm = new PatientDiagnosisMeta();
			$dmarray = $dm->getPatientDiagnosismeta($ipid);
			/* ---------------------- User list ----------------------- */
			$usr = new User();
			$pqarr = $usr->getUserByClientid($clientid);
			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));
			$users = $usr->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;

			/* ----------------------FORM SAVE  -start ----------------------- */
			//check for assessment in db
			$Q = Doctrine_Query::create()
				->select('*')
				->from('KinderEntranceAssessment')
				->where("ipid='" . $ipid . "'")
				->orderBy('id DESC')
				->limit('1');
			$last_assessment_saved = $Q->fetcharray();

			$new_allowed = 0;
			$existing_assessment = 0;

			if($last_assessment_saved && $last_assessment_saved [0]['status'] == 0 && $last_assessment_saved [0]['completed_date'] == "0000-00-00 00:00:00")
			{
				$new_allowed = 1;
				$existing_assessment = 1;
			}
			$this->view->new_allowed = $new_allowed;

			/* ################################################################################## */
			if($this->getRequest()->isPost())
			{
				if($_REQUEST['dbgg'])
				{
					print_r($_POST);
					exit;
				}
				if($acknowledge =="1")
				{
				    $_POST['skip_trigger'] = "1";
				}

				$init = new Application_Form_KinderEntranceAssessment();

				$field_names = array(
					"pain_symptom" => "Schmerzen:",
					"pain_localisation" => "Schmerzen Lokalisation: ",
					"pain_symptom_2" => "Schmerzen:",
					"pain_localisation_2" => "Schmerzen Lokalisation: ",
					"pain_symptom_3" => "Schmerzen:",
					"pain_localisation_3" => "Schmerzen Lokalisation: ",
					"pain_symptom_4" => "Schmerzen:",
					"pain_localisation_4" => "Schmerzen Lokalisation: ",
					"last_hospital" => "Letzte Krankenhausbehandlung am",
					"last_hospital_period" => "Letzte Krankenhausbehandlung wo",
					"case_history" => "Anamnese: ",
					"social_environment" => "amilie / soziales Umfeld: ",
					"psychosocial_interventions" => "Psychosoziale Betreuung durch / Erforderliche psychosoziale Interventionen: ",
					"other_text" => "Sonstiges: "
				);

				$field_tumor = array("tumor_brain" => "Hirn", "tumor_lung" => "Lunge", "tumor_liver" => "Leber", "tumor_bone" => "Knochen", "tumor_other_text" => "Sonstige");
				$field_therapy = array(
					"therapy" => "Therapien"
				);
				$field_adm = array(
					"adm_oral" => "oral",
					"adm_peg" => "PEG",
					"adm_iv" => "i.v.",
					"adm_sc" => "s.c.",
					"adm_im" => "i.m.",
				    "adm_transdermal" => "transdermal",
					"adm_infusion" => "Infusion",
					"adm_inhalation" => "Inhalation",
					"adm_schmerzpumpe" => "Schmerzpumpe",
					"adm_port" => "Port",
					"adm_broviak" => "Broviak",
				);

				$field_req_t = array(
					"required_antibiosis" => "Antibiose",
					"required_kg" => "KG",
					"required_enteral_nutrition" => "enterale Ernährung",
					"required_o2_ventilation" => "O2 Gabe / Beatmung",
					"required_parental_nutrition" => "parenterale Ernährung",
					"required_pain_therapy" => "Schmerztherapie",
					"required_antiepileptic_therapy" => "antiepileptische Therapie",
					"required_muscle_relaxants" => "Muskelrelaxantien",
				);

				$field_special = array(
					"administer_oxigen" => "Sauerstoffgabe",
					"colostomy" => "Anus praeter",
					"urostomy" => "Urostoma",
					"tracheostomy" => "Tracheostoma",
					"warehousing" => "Lagerung",
					"wound_treatment" => "Wundbehandlung",
				);


				$pain_values = array(
					"1" => "mild 1-2",
					"2" => "mild 1-2",
					"3" => "mild 1-2",
					"4" => "mäßig stark 3-4 ",
					"5" => "mäßig stark 3-4 ",
					"6" => "stark 5-6 ",
					"7" => "stark 5-6 ",
					"8" => "sehr stark 7-8 ",
					"9" => "sehr stark 7-8 ",
					"10" => "unerträglich 9-10 ",
					"11" => "unerträglich 9-10 "
				);

				/* ========================================== */
				if($_POST['eas']['assessment']['new_assessment'] == '1')
				{
					$_POST['eas']['assessment']['first_form'] = 2;

					$update_old = $init->set_completed_entrance_assessment($_POST['eas']['assessment'], $ipid, '1');
					$create_new = $init->insertKinderEntranceAssessment($_POST['eas']['assessment'], $ipid);

					$custcourse = new PatientCourse();
					$custcourse->ipid = $ipid;
					$custcourse->course_date = date("Y-m-d H:i:s", time());
					$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					$comment = "Eingangsassessment KINDER von " . $_POST['eas']['assessment']['completed_date'];
					$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					$custcourse->user_id = $userid;
					$custcourse->save();

					//completed!
					$custcourse = new PatientCourse();
					$custcourse->ipid = $ipid;
					$custcourse->course_date = date("Y-m-d H:i:s", time());
					$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					$comment = "Eingangsassessment KINDER wurde abgeschlossen";
					$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					$custcourse->user_id = $userid;
					$custcourse->save();

					$course_type = Pms_CommonData::aesEncrypt("K");
					foreach($_POST['eas']['assessment'] as $key_p => $val_p)
					{
						//all fields and their values
						if((array_key_exists($key_p, $field_names) || array_key_exists($key_p, $field_therapy) ||
							array_key_exists($key_p, $field_adm) || array_key_exists($key_p, $field_special)) && strlen($val_p) > 0)
						{
 
 
					       if(array_key_exists($key_p, $field_adm))
							{
								$comment = "Art der Verabreichung: " . $field_adm[$key_p];
							}
							else if(array_key_exists($key_p, $field_req_t))
							{
								$comment = "Weitere erforderliche Behandlungen: " . $field_req_t[$key_p];
							}
							else if(array_key_exists($key_p, $field_req_t))
							{
								$comment = "Weitere erforderliche Behandlungen: " . $field_req_t[$key_p];
							}
							else if(array_key_exists($key_p, $field_special))
							{
								$comment = "Erforderliche besondere palliativpflegerische Maßnahmen: " . $field_special[$key_p];
							}
							else
							{
								$comment = $field_names[$key_p] . " " . $val_p;
								if($key_p == "pain_symptom" || $key_p == "pain_symptom_2" || $key_p == "pain_symptom_3" || $key_p == "pain_symptom_4")
								{
									$comment = $field_names[$key_p] . " " . $pain_values[$val_p];
								}
							}

							//write in verlauf all *more textareas if has >0 string lenght
							$custcourse = new PatientCourse();
							$custcourse->ipid = $ipid;
							$custcourse->course_date = date("Y-m-d H:i:s", time());
							$custcourse->course_type = $course_type;
							$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
							$custcourse->user_id = $userid;
							$custcourse->save();
						}
					}
					$custcourse = new PatientCourse();
					$custcourse->ipid = $ipid;
					$custcourse->course_date = date("Y-m-d H:i:s", time());
					$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					$comment = "New Eingangsassessment was created";
					$comment = "neues Assessment KINDER wurde erstellt.";
					$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					$custcourse->user_id = $userid;
					$custcourse->save();
				}
				/* ========================================== */

				if($_POST['save_form'] == 1)
				{
					if($init->validate($_POST))
					{
						/* --------------------HEALTH INSURANCE SAVE --------------------------- */
						if(!empty($_POST['eas']['health_insurance']))
						{
							$patient_insurance_form = new Application_Form_PatientHealthInsurance();
							$this->insurance = $patient_insurance_form->validate($_POST['eas']['health_insurance']);

							if($this->insurance)
							{
								/* ------------------------------- ADD NEW HEATH INSURANCE (NOT FROM LIST) --------------------------- */
								if(empty($_POST['eas']['health_insurance']['hdn_companyid']))
								{
									$post = $_POST['eas']['health_insurance'];
									$hinsu = new HealthInsurance();
									$hinsu->clientid = $logininfo->clientid; //logininfo
									$hinsu->name = $post['company_name'];
									$hinsu->kvnumber = $post['kvk_no'];
									$hinsu->iknumber = $post['institutskennzeichen'];
									$hinsu->street1 = $post['ins_street'];
									$hinsu->city = $post['ins_city'];
									$hinsu->phone = $post['ins_phone'];
									$hinsu->phone2 = $post['ins_phone2'];
									$hinsu->phonefax = $post['ins_phonefax'];
									$hinsu->post_office_box = $post['ins_post_office_box'];
									$hinsu->zip_mailbox = $post['ins_zip_mailbox'];
									$hinsu->post_office_box_location = $post['ins_post_office_box_location'];
									$hinsu->email = $post['ins_email'];
									$hinsu->zip = $post['ins_zip'];
									$hinsu->comments = $post['comment'];
									$hinsu->valid_from = date("Y-m-d", time());
									$hinsu->extra = 1;
									$hinsu->save();
									$lastId = $hinsu->id;

									$_POST['eas']['health_insurance']['hdn_companyid'] = $lastId;
								}
// 							$patient_insurance_form->UpdateData($_POST['eas']['health_insurance']);


								$Mhi2s = Doctrine_Query::create()
									->select("*")
									->from("PatientHealthInsurance")
									->where("ipid like  '" . $ipid . "' ");
								$custarr = $Mhi2s->fetchArray();

								if(count($custarr) > 0)
								{
									$post = $_POST['eas']['health_insurance'];

									$cust = Doctrine::getTable('PatientHealthInsurance')->find($custarr[0]['id']);
									$cust->kvk_no = $post['kvk_no'];
									$cust->institutskennzeichen = $post['institutskennzeichen'];
									$cust->ins_contactperson = Pms_CommonData::aesEncrypt($post['ins_contactperson']);
									$cust->company_name = Pms_CommonData::aesEncrypt($post['company_name']);
									$cust->companyid = $post['hdn_companyid'];
									$cust->ins_insurance_provider = Pms_CommonData::aesEncrypt($post['ins_insurance_provider']);
									$cust->ins_zip = Pms_CommonData::aesEncrypt($post['ins_zip']);
									$cust->ins_street = Pms_CommonData::aesEncrypt($post['ins_street']);
									$cust->ins_city = Pms_CommonData::aesEncrypt($post['ins_city']);
									$cust->ins_phone = Pms_CommonData::aesEncrypt($post['ins_phone']);
									$cust->ins_phone2 = Pms_CommonData::aesEncrypt($post['ins_phone2']);
									$cust->ins_phonefax = Pms_CommonData::aesEncrypt($post['ins_phonefax']);
									$cust->ins_post_office_box = Pms_CommonData::aesEncrypt($post['ins_post_office_box']);
									$cust->ins_zip_mailbox = Pms_CommonData::aesEncrypt($post['ins_zip_mailbox']);
									$cust->ins_post_office_box_location = Pms_CommonData::aesEncrypt($post['ins_post_office_box_location']);
									$cust->ins_email = Pms_CommonData::aesEncrypt($post['ins_email']);
									$cust->save();
								}
								else
								{
									$post = $_POST['eas']['health_insurance'];

									$cust = new PatientHealthInsurance();
									$cust->ipid = $ipid;
									$cust->kvk_no = $post['kvk_no'];
									$cust->institutskennzeichen = $post['institutskennzeichen'];
									$cust->ins_contactperson = Pms_CommonData::aesEncrypt($post['ins_contactperson']);
									$cust->company_name = Pms_CommonData::aesEncrypt($post['company_name']);
									$cust->companyid = $post['hdn_companyid'];
									$cust->ins_insurance_provider = Pms_CommonData::aesEncrypt($post['ins_insurance_provider']);
									$cust->ins_zip = Pms_CommonData::aesEncrypt($post['ins_zip']);
									$cust->ins_street = Pms_CommonData::aesEncrypt($post['ins_street']);
									$cust->ins_city = Pms_CommonData::aesEncrypt($post['ins_city']);
									$cust->ins_phone = Pms_CommonData::aesEncrypt($post['ins_phone']);
									$cust->ins_phone2 = Pms_CommonData::aesEncrypt($post['ins_phone2']);
									$cust->ins_phonefax = Pms_CommonData::aesEncrypt($post['ins_phonefax']);
									$cust->ins_post_office_box = Pms_CommonData::aesEncrypt($post['ins_post_office_box']);
									$cust->ins_zip_mailbox = Pms_CommonData::aesEncrypt($post['ins_zip_mailbox']);
									$cust->ins_post_office_box_location = Pms_CommonData::aesEncrypt($post['ins_post_office_box_location']);
									$cust->ins_email = Pms_CommonData::aesEncrypt($post['ins_email']);
									$cust->save();
								}
							}
							else
							{
								$patient_insurance_form->assignErrorMessages();
								$this->retainValues($_POST['eas']['health_insurance']);
							}
						}
					}
				}

				/* ----------------------DIAGNOSIS SAVE  -start ----------------------- */
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('Patientdiagnosis', $logininfo->userid, 'canadd');

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$pat_diagnosis = new Application_Form_PatientDiagnosis();
				$diagno_text = new Application_Form_DiagnosisText();

				$a_post = $_POST;
				$a_post['clientid'] = $clientid;
				$a_post['ipid'] = $ipid;

//			for($i = 1; $i <= sizeof($_POST['diagnosis']); $i++)
				foreach($_POST['diagnosis'] as $k_i => $v_i)
				{
					if(strlen($v_i) > 0 && strlen($_POST['hidd_diagnosis'][$k_i]) < 1)
					{
						$a_post['newdiagnosis'][$k_i] = $v_i;
						$a_post['newdiagnosistype'][$k_i] = $_POST['dtype'][$k_i];
						$a_post['newdiagnosisicd'][$k_i] = $_POST['icdnumber'][$k_i];
					}
				}

				if(is_array($a_post['newdiagnosis']))
				{
					$dt = $diagno_text->InsertEditData($a_post);
					foreach($dt as $key => $val)
					{
						$a_post['newhidd_diagnosis'][$key] = $val['id'];
					}
				}

				for($i = 1; $i <= sizeof($_POST['diagnosis_ed']); $i++)
				{
					if(strlen($_POST['diagnosis_ed'][$i]) > 0 && strlen($_POST['hidd_diagnosis_ed'][$i]) < 1)
					{
						$a_post['newdiagnosis_ed'][$i] = $_POST['diagnosis_ed'][$i];
						$a_post['newdiagnosistype_ed'][$i] = $_POST['dtype_ed'][$i];
					}
				}

				if(is_array($a_post['newdiagnosis_ed']))
				{
					$dt = $diagno_text->Insert_EdData($a_post);

					foreach($dt as $key => $val)
					{
						$a_post['newhidd_diagnosis_ed'][$key] = $val['id'];
					}
				}

				$pat_diagnosis->UpdateData($a_post);
				$dm_form = new Application_Form_PatientDiagnosisMeta();
				$dm_form->UpdateData($a_post);

				/* ----------------------DIAGNOSIS SAVE  -end ----------------------- */

				/* ----------------------MEDICATION EDIT  -start ----------------------- */
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('patientmedication', $logininfo->userid, 'canedit');
				$patient_medication_form = new Application_Form_Medication();

				if(!$return)
				{
					$this->_redirect(APP_BASE . "error/previlege");
				}

				$a_post = $_POST;
				for($i = 1; $i <= count($_POST['medication']); $i++)
				{
					if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
					{
						$a_post['newmids'][$i] = $_POST['drid'][$i];
						$a_post['newmedication'][$i] = $_POST['medication'][$i];
					}
				}

				if(is_array($a_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($a_post);

					foreach($dts as $key => $dt)
					{
						$a_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form = new Application_Form_PatientDrugPlan();
				$med_form->UpdateMultiData($a_post);
				/* ----------------------MEDICATION EDIT  -end ----------------------- */

				/* ----------------------MEDICATION ADD  -start ----------------------- */
				$med_form = new Application_Form_PatientDrugPlan();
				$patient_medication_form = new Application_Form_Medication();

				$add_post = $_POST['add'];
				$add_post['ipid'] = $ipid;
				$add_post['isbedarfs'] = 0;

				foreach($add_post['medication'] as $key => $val)
				{
					if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
					{
						$add_post['newmedication'][$key] = $add_post['medication'][$key];
					}
				}

				if(is_array($add_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($add_post);

					foreach($dts as $key => $dt)
					{
						$add_post['newhidd_medication'][$key] = $dt->id;
					}
				}

				$med_form->InsertMultiData($add_post);

				if(count($_POST['addbedarf']) > 0)
				{
					$med_form = new Application_Form_PatientDrugPlan();
					$patient_medication_form = new Application_Form_Medication();

					$add_post = $_POST['addbedarf'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 1;

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}
					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);

						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}
					$med_form->InsertMultiData($add_post);
				}
				/* ----------------------MEDICATION ADD  -end ----------------------- */

				//post insert procedure btnsave submit
				if($_POST['save_form'] == '1')
				{

					$post = $_POST;
					$post['issaved'] = $firstsave[0]['issaved'];
					$post['wascompleted'] = $firstsave[0]['iscompleted'];

					//only if new assessment is not pressed
					if($_POST['eas']['assessment']['new_assessment'] != 1)
					{
						$assessment_form = new Application_Form_KinderEntranceAssessment();

						//IF WE ALREADY HAVE A SAVED FORM
						if($existing_assessment > 0)
						{
							//UPDATE
							if(!empty($post['eas']['assessment']['id']))
							{

								$result = $init->updateKinderEntranceAssessment($post['eas']['assessment'], $ipid);

								$custcourse = new PatientCourse();
								$custcourse->ipid = $ipid;
								$custcourse->course_date = date("Y-m-d H:i:s", time());
								$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
								$comment = "Eingangsassessment KINDER wurde editiert";
								$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
								$custcourse->user_id = $userid;
								$custcourse->tabname = Pms_CommonData::aesEncrypt('kinder_entrance_assessment_from');
								$custcourse->save();

								$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
							}
						}
						else
						{

							$result = $init->insertkinderEntranceAssessment($post['eas']['assessment'], $ipid);

							$custcourse = new PatientCourse();
							$custcourse->ipid = $ipid;
							$custcourse->course_date = date("Y-m-d H:i:s", time());
							$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
							$comment = "Eingangsassessment KINDER wurde gespeichert";
							$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
							$custcourse->tabname = Pms_CommonData::aesEncrypt('kinder_entrance_assessment_from');
							$custcourse->user_id = $userid;
							$custcourse->save();


							$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
						}
					}

					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
				}
			}

			//get all assessments in insert order
			$Q = Doctrine_Query::create()
				->select('*')
				->from('KinderEntranceAssessment')
				->where("ipid='" . $ipid . "'")
				->orderBy('id ASC');
			$all_assessment = $Q->fetcharray();

			if(count($all_assessment) <= 1)
			{
				$eas['assessment']['first_form'] = 1;
			}
			else
			{
				$eas['assessment']['first_form'] = 2;
			}

			//save data post procedure end
			/* ---------------------- Patient - Diagnosis ----------------------- */
			if($dmarray)
			{
				$metatitle[0] = $dmarray[0]['metaid'];
				$metatitle[1] = $dmarray[1]['metaid'];
				$metatitle[2] = $dmarray[2]['metaid'];

				$meta_title_hidd[0] = $dmarray[0]['id'];
				$meta_title_hidd[1] = $dmarray[1]['id'];
				$meta_title_hidd[2] = $dmarray[2]['id'];
			}

			/* ---------------------- Patient - Diagnosis Metastasen start ----------------------- */
			if(count($dmarray) > 0)
			{
				$diagnosismeta = new DiagnosisMeta();
				$comma = "";
				$metadiagnosis = "";
				foreach($dmarray as $keymeta => $valmeta)
				{
					$metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);

					foreach($metaarray as $keytit => $metatitle_value)
					{
						$metadiagnosis .= $comma . $metatitle_value['meta_title'];
						$comma = ",";
					}
				}
			}

			$eas['diagnosis']['metastasen'] = $metadiagnosis;

			/* ---------------------- Patient - Diagnosis Metastasen end----------------------- */
			$this->view->metatitle = $metatitle;
			$this->view->meta_title_hidd = $meta_title_hidd;

			$abb = "'HD','ND'";
			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($clientid, $abb);
			$this->view->dtypearray = $darr;
			$this->view->jdarr = json_encode($darr);

			$comma = ",";
			$idval = "'0'";

			if(is_array($darr))
			{
				foreach($darr as $key => $val)
				{
					$idval .= $comma . "'" . $val['id'] . "'";
					$comma = ",";
				}
			}

			$diagns = new PatientDiagnosis();
			$a_diagno = $diagns->getFinalData($ipid, $idval);

			$diagno_cnt = count($a_diagno);
			
			/*ISPC - 2364 - sorted by user */
			$pdiaord = PatientDiagnoOrderTable::getInstance()->findDiagnoOrder($ipid);
			//RWH - ISPC-950
			//sort by icd
			if(empty($pdiaord))
			{
				$a_diagno = $this->array_sort($a_diagno, 'icdnumber', SORT_ASC);
				$a_diagno = array_values($a_diagno);
			
				//sort by type
				foreach($darr as $k_diag_type => $v_diag_type)
				{
					foreach($a_diagno as $k_diag => $v_diag)
					{
						if($v_diag_type['id'] == $v_diag['diagnosis_type_id'])
						{
							$a_diagno_sorted[] = $v_diag;
						}
					}
				}
				//RWH end
			}
			else
			{
				$a_diagno = array_column($a_diagno, null, 'pdid');
				$pdorder = $pdiaord[0]['diagno_order'];
					
				$diagnaddother = array_diff(array_keys($a_diagno), $pdorder);
				$diagnremoveother = array_diff($pdorder, array_keys($a_diagno));
					
				if($diagnaddother)
				{
					$pdorder = array_merge($pdorder, $diagnaddother);
				}
					
				if($diagnremoveother)
				{
					$pdorder = array_diff($pdorder, $diagnremoveother);
				}
					
				$a_diagno_sorted = [];
				foreach ($pdorder as $pdid) {
					$a_diagno_sorted[] = $a_diagno[$pdid];
				}
			}
			$a_diagno = $a_diagno_sorted;
			
			if(strlen($_POST['pdf']) == 0 && strlen($_POST['save_form']) == 0)
			{
				if($diagno_cnt < 6)
				{
					for($i = ($diagno_cnt + 1); $i <= 6; $i++)
					{
						$a_diagno[$i]['tabname'] = "";
						$a_diagno[$i]['icdnumber'] = "";
						$a_diagno[$i]['hidd_icdnumber'] = "";
						$a_diagno[$i]['diagnosis'] = "";
						$a_diagno[$i]['pdid'] = "";
						$a_diagno[$i]['hidd_diagnosis'] = "";
						$a_diagno[$i]['diagnosis_type_id'] = "";
						$a_diagno[$i]['meta_title1'] = "";
						$a_diagno[$i]['meta_title2'] = "";
						$a_diagno[$i]['meta_title3'] = "";
					}
				}
			}

			// DIAGNOSIS GRID
			$meta_data = PatientDiagnosisMeta::getPatientDiagnosismeta($ipid);

			foreach($meta_data as $kx => $mvas_data)
			{
				$meta_diagnosis[$mvas_data['diagnoid']][] = $mvas_data['metaid'];
			}

			$grid_diagno = new Pms_Grid($a_diagno, 1, count($a_diagno), "listdiagnosis.html");
			$grid_diagno->meta_diagnosis = $meta_diagnosis;
			$grid_diagno->gridview->dtypearray = $darr;
			$this->view->diagno = $grid_diagno->renderGrid();

			// PDF - disgnosis grid
			if($this->getRequest()->isPost())
			{
				$a_diagno = Pms_CommonData::clear_pdf_data($a_diagno);
				$grid_pdf = new Pms_Grid($a_diagno, 1, count($a_diagno), "listdiagnosis_pdf.html");
				$grid->meta_diagnosis = $meta_diagnosis;
				$grid_pdf->gridview->dtypearray = $darr;
				$this->view->diagno_pdf = $grid_pdf->renderGrid();
			}

			//DIAGNO COUNT
			$this->view->jscount = count($a_diagno);
			$this->view->rowcount = count($a_diagno);
			/* ---------------------- Patient - Diagnosis end ----------------------- */

			/* ---------------------- Patient - Diagnosis MAIN start----------------------- */
			$dg = new DiagnosisType();
			$abb_main = "'HD'";
			$ddarr_main = $dg->getDiagnosisTypes($logininfo->clientid, $abb_main);
			$commas = ",";
			$typeid_main = "'0'";

			foreach($ddarr_main as $key => $valdia_maine)
			{
				$typeid_main .=$commas . "'" . $valdia_maine['id'] . "'";
				$commas = ",";
			}
			$diagns = new PatientDiagnosis();
			$dianoarray = $diagns->getFinalData($ipid, $typeid_main);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $keym => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}
			$eas['diagnosis']['main'] = $diagnosis;
			/* ---------------------- Patient - Diagnosis MAIN end ----------------------- */

			/* ---------------------- Patient - Diagnosis SIDE start----------------------- */
			$dg = new DiagnosisType();
			$abb_side = "'ND'";
			$ddarr_side = $dg->getDiagnosisTypes($logininfo->clientid, $abb_side);
			$commass = ",";
			$typeid_side = "'0'";

			foreach($ddarr_side as $keys => $valdia_sidee)
			{
				$typeid_side .= $commass . "'" . $valdia_sidee['id'] . "'";
				$commass = ",";
			}

			$diano_side_array = $diagns->getFinalData($ipid, $typeid_side);

			if(count($diano_side_array) > 0)
			{
				$comma = "";
				$diagnosis_side = "";
				foreach($diano_side_array as $key => $valdias)
				{
					if(strlen($valdias['diagnosis']) > 0)
					{
						$diagnosis_side .= $comma . $valdias['diagnosis'] . ' (' . $valdias['icdnumber'] . ')';
						$comma = ",";
					}
				}
			}

			$eas['diagnosis']['side'] = $diagnosis_side;
			/* ---------------------- Patient - Diagnosis MAIN end ------------------ */
			/* ---------------------- Patient - Diagnosis end ----------------------- */

			/* ---------------------- Patient - MEDICATION EDIT---------------------- */

			$pq = new User();
			$pqarr = $pq->getUserByClientid($logininfo->clientid);
			$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);
			$this->view->kvnodelicon = "1";

			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";

			#######################################
			$medic = new PatientDrugPlan();

			// get bedarf medication
			$medicarr = $medic->getbedarfMedication($decid);

			$medication_master_ids['bedarf'][] = "XXXXXX";
			foreach($medicarr as $k_medicarr => $v_medicarr)
			{
				$medication_master_ids['bedarf'][] = $v_medicarr['medication_master_id'];
			}

			// get active medication
			$medicarr1 = $medic->getMedicationPlan($decid);

			$medication_master_ids['active'][] = "XXXXXX";
			foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
			{
				$medication_master_ids['active'][] = $v_medicarr1['medication_master_id'];
			}


			// get deleted medication
			$medicarr2 = $medic->getDeletedMedication($decid);

			$medication_master_ids['deleted'][] = "XXXXXX";
			foreach($medicarr2 as $k_medicarr2 => $v_medicarr2)
			{
				$medication_master_ids['deleted'][] = $v_medicarr2['medication_master_id'];
			}

			// get master medication data
			$medication_master_ids = array_merge($medication_master_ids['bedarf'], $medication_master_ids['active'], $medication_master_ids['deleted']);

			$med = new Medication();
			$medarr1 = $med->getMedicationById($medication_master_ids);

			foreach($medarr1 as $k_medarr1 => $v_medarr1)
			{
				$medication_master_array[$v_medarr1['id']] = $v_medarr1;
			}

			// display active medication
			if(count($medicarr1 < 1))
			{
				$this->view->mcntr = 0;
			}

			$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "listpatientmedicationedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->medications = $grid->renderGrid();

			// count medication
			$this->view->ajx = 1;
			$this->view->cntr = count($medicarr1);

			// discplay deleted medication
			$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "listdelpatientmedication_ajax.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->delmedications = $grid->renderGrid();


			// count medication
			$this->view->counter = count($medicarr1) + count($medicarr2);

			// display bedarf medication
			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "listpatientmedicationbedarfsedit.html");
			$grid->medication_master_array = $medication_master_array;
			$this->view->bedarfsmedications = $grid->renderGrid();

			#######################################################




			if(($this->getRequest()->isPost() && strlen($_POST['pdf']) > 0) || ($this->getRequest()->isPost() && $_POST['eas']['assessment']['new_assessment'] == '1')) // PDF
			{
				// PDF MEDICATION LIST
				$commam = "";
				foreach($medicarr1 as $keym => $valm)
				{
					$medcam = Doctrine::getTable('Medication')->find($valm['medication_master_id']);
					if($medcam)
					{
						$medcaarray = $medcam->toArray();
						$medication_list.= $commam . $medcaarray['name'] . " (" . $valm['dosage'] . ")";
						$commam = "; ";
					}
				}
				$eas['medication']['normal'] = $medication_list;

				// PDF BEDARF LIST
				$comma = "";
				foreach($medicarr as $key => $val)
				{

					$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
					if($medca)
					{
						$bedarf_medcaarray = $medca->toArray();
						$bedarf_medication_list.= $comma . $bedarf_medcaarray['name'] . " (" . $val['dosage'] . ")";
						$comma = "; ";
					}
				}

				$eas['medication']['bedarf'] = $bedarf_medication_list;
			}

			// PATIENT MEDICATION - COUNTS
// 		$this->view->counter = count($med_array) + count($medi_deleted_arr);
			$this->view->counter = count($medicarr) + count($medicarr1) + count($medicarr2);
			$med_counter = count($medicarr) + count($medicarr1) + count($medicarr2);

			if(count($med_counter < 1))
			{
				$this->view->mcntr = 0;
			}
			$this->view->ajx = 1;
			$this->view->cntr = count($med_counter);

			/* ---------------------- Patient - MEDICATION ADD----------------------- */
			$a_medic = array();
			for($i = 0; $i < 6; $i++)
			{
				$a_medic[$i] = array('cnt' => $i);
			}
			$this->view->jsmedcount = count($a_medic);
			$this->view->rowcount = count($a_medic);

			// PATIENT MEDICATION ADD
			$grid_med_add = new Pms_Grid($a_medic, 1, count($a_medic) + 9999, "listpatientmedicationadd.html");
			$this->view->medicgrid = $grid_med_add->renderGrid();

			// PATIENT BEDARF MEDICATION ADD
			$grid_med_bedarf_add = new Pms_Grid($a_medic, 1, count($a_medic) + 99999, "listpatientbedarfmedicationadd.html");
			$this->view->bedarfmedicgrid = $grid_med_bedarf_add->renderGrid();

			/* ---------------------- Patient - PFLEGEDIENST ADD----------------------- */
			$pat_pfl = new PatientPflegedienste();

			$res_pfledge = $pat_pfl->getPatientLastPflegediensteNew($ipid, false);
			$res_pfledge_palliativ = $pat_pfl->getPatientLastPflegediensteNew($ipid, true);

			$this->view->ppd_id = $res_pfledge_palliativ[0]['pflege_id'];
			$this->view->pfledge_id = $res_pfledge[0]['pflege_id'];

			/* ----------------Patient - Health insurance details-------------------------------------- */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if($phi)
			{
				/* -------------------------GET HEALTH INSURANCE DETAILS------------------------------- */
				if(empty($phi[0]['institutskennzeichen']) || $phi[0]['institutskennzeichen'] == 0)
				{
					if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
					{
						$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
						$healtharray = $helathins->toArray();
						$institutskennzeichen = $healtharray['iknumber'];
						$phi[0]['institutskennzeichen'] = $institutskennzeichen;
					}
				}

				if(!empty($phi[0]['companyid']) && $phi[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($phi[0]['companyid']);
					$healtharray = $helathins->toArray();

					if(empty($phi[0]['ins_street']))
					{
						$phi[0]['ins_street'] = $healtharray['street1'];
					}
					if(empty($phi[0]['ins_city']))
					{
						$phi[0]['ins_city'] = $healtharray['city'];
					}
					if(empty($phi[0]['ins_zip']))
					{
						$phi[0]['ins_zip'] = $healtharray['zip'];
					}
				}

				if($phi[0]['privatepatient'] == '1' && $phi[0]['direct_billing'] == '1')
				{
					$phi[0]['direct_billing'] = '0';
				}

				$eas['health_insurance'] = $phi[0];
			}

			/* ----------------Patient - Location details-------------------------------------- */
			$hospitalids = Doctrine_Query::create()
				->select("*,(CONVERT(AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') using latin1)) as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type = 1');
			$hosparray = $hospitalids->fetchArray();

			$hosparr[] = "9999999999";
			foreach($hosparray as $hospital)
			{
				$hosparr[] = $hospital['id'];
				$hospital_location_array[$hospital['id']] = $hospital['location'];
			}

			//get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
				->andWhereIn('location_id', $hosparr)
				->orderBy('valid_from DESC')
				->limit('1');
			$patlocationsArr = $patloc->fetchArray();

			if($patlocationsArr)
			{
				$last_hospital = $hospital_location_array[$patlocationsArr[0]['location_id']];

				if($patlocationsArr[0]['valid_till'] != '' && $patlocationsArr[0]['valid_till'] != '0000-00-00 00:00:00')
				{
					$valid_till = date('d.m.Y', strtotime($patlocationsArr[0]['valid_till']));
				}
				else
				{
					$valid_till = date('d.m.Y');
				}

				$valid_from = date('d.m.Y', strtotime($patlocationsArr[0]['valid_from']));
				$last_hospital_period = $valid_from . ' - ' . $valid_till;

				$eas['assessment']['last_hospital'] = $last_hospital;
				$eas['assessment']['last_hospital_period'] = $last_hospital_period;
			}

			/* ----------------------------------- Patient Maintainance Stage --------------------------- */
			$pms = new PatientMaintainanceStage();
			$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);
			$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
			$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
			$this->view->carelevellist = $grid->renderGrid();
			$this->view->stage = $pat_pms[0]['stage'];
			$this->view->erstantrag = $pat_pms[0]['erstantrag'];
			$this->view->horherstufung = $pat_pms[0]['horherstufung'];

			/* ----------------------------------- Patient Maintainance Stage --------------------------- */
			$pl = new PatientLives();
			$pat_lives = $pl->getpatientLivesData($ipid);
			$this->view->alone = $pat_lives[0]['alone'];
			$this->view->house_of_relatives = $pat_lives[0]['house_of_relatives'];
			$this->view->apartment = $pat_lives[0]['apartment'];
			$this->view->home = $pat_lives[0]['home'];
			$this->view->hospiz = $pat_lives[0]['hospiz'];
			$this->view->with_partner = $pat_lives[0]['with_partner'];
			$this->view->with_child = $pat_lives[0]['with_child'];
			$this->view->sonstiges = $pat_lives[0]['sonstiges'];

			/* --------------Stammdaten -  Patient details	---------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->zvk = $pat_moreinfo[0]['zvk'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];
			$this->view->magensonde = $pat_moreinfo[0]['magensonde'];
			$this->view->pegmore = $pat_moreinfo[0]['pegmore'];
			$this->view->portmore = $pat_moreinfo[0]['portmore'];

			/* --------------Patient - family doctor	---------------------------- */
			$eas['patient_details']['familly_doctor'] = "0";
			$eas['patient_details']['familly_doctor_details'] = "";
			if($patientarr['familydoc_id'] > 0)
			{
				$fdoc = Doctrine_Core::getTable('FamilyDoctor')->find($patientarr['familydoc_id']);
				if($fdoc)
				{
					$docarr = $fdoc->toArray();
					$doc_title = "";
					if($docarr['title'] == "")
					{
						$doc_title = $docarr['title'];
					}
					else
					{
						$doc_title = $docarr['title'] . " ";
					}
				}

				if(empty($docarr['last_name']) && empty($docarr['first_name']) && empty($docarr['street1']) && empty($docarr['zip']) && empty($docarr['city']))
				{

					$doctor_data['familly_doctor_details'] = "";
				}
				else
				{
					$doctor_data['familly_doctor_details'] = $doc_title . "" . $docarr['last_name'] . ", " . $docarr['first_name'] . "; " . $docarr['street1'] . ", " . $docarr['zip'] . " " . $docarr['city'];
				}
			}
			else
			{
				$doctor_data['familly_doctor_details'] = "";
			}
			if(strlen($doctor_data['familly_doctor_details']) > 3)
			{
				$eas['patient_details']['familly_doctor'] = 1;
				$eas['patient_details']['familly_doctor_details'] = $doctor_data['familly_doctor_details'];
			}

			/* --------------Patient -  Pflegedienste ---------------------------- */
			$eas['patient_details']['pflegedienst'] = 0;
			$eas['patient_details']['pflegedienst_details'] = "";
			$pat_pfl = new PatientPflegedienste();
			$ppflearray = $pat_pfl->getPatientLastPflegediensteDetails($ipid);

			if($ppflearray)
			{
				if(empty($ppflearray['nursing']) && empty($ppflearray['last_name']) && empty($ppflearray['first_name']) && empty($ppflearray['street1']) && empty($ppflearray['zip']) && empty($ppflearray['city']))
				{

					$pflege_data['pflegedienst_details'] = "";
				}
				else
				{
					$pflege_data['pflegedienst_details'] = $ppflearray['nursing'] . "; " . $ppflearray['last_name'] . ", " . $ppflearray['first_name'] . "; " . $ppflearray['street1'] . ", " . $ppflearray['zip'] . " " . $ppflearray['city'];
				}
				$eas['patient_details']['pflegedienst'] = 1;
				$eas['patient_details']['pflegedienst_details'] = $pflege_data['pflegedienst_details'];
			}

			/* --------------Patient -  Contact person ---------------------------- */
			$eas['patient_details']['contact_person'] = 0;
			$eas['patient_details']['contact_person_details'] = "";
			$pc = new ContactPersonMaster();
			$pcster = $pc->getPatientContact($ipid);
			$pcs = $pcster[0];
			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);

			if($pcs)
			{
				if(empty($pcs['cnt_last_name']) && empty($pcs['cnt_first_name']) && empty($pcs['cnt_street1']) && empty($pcs['cnt_zip']) && empty($pcs['cnt_city']))
				{
					$cnt_data['contact_person_details'] = "";
				}
				else
				{
					$cnt_data['contact_person_details'] = $pcs['cnt_last_name'] . ", " . $pcs['cnt_first_name'] . "; " . $pcs['cnt_street1'] . ", " . $pcs['cnt_zip'] . " " . $pcs['cnt_city'];
				}
				$eas['patient_details']['contact_person'] = 1;
				$eas['patient_details']['contact_person_details'] = $cnt_data['contact_person_details'];
			}

			/* --------------Patient - Hospizdienst ---------------------------- */
			$eas['patient_details']['hospiceassociations'] = 0;
			$eas['patient_details']['hospiceassociations_details'] = "";
			$hp_assoc = new PatientHospiceassociation ();
			$hp_assoc_array = $hp_assoc->getPatientHospiceassociation($ipid);
			$hp_assoc_array = $hp_assoc_array[0];

			if($hp_assoc_array)
			{
				if(empty($hp_assoc_array['last_name']) && empty($hp_assoc_array['first_name']) && empty($hp_assoc_array['street1']) && empty($hp_assoc_array['zip']) && empty($hp_assoc_array['city']))
				{

					$hps_data['hospiceassociations_details'] = "";
				}
				else
				{
					$hps_data['hospiceassociations_details'] = $hp_assoc_array['last_name'] . ", " . $hp_assoc_array['first_name'] . "; " . $hp_assoc_array['street1'] . ", " . $hp_assoc_array['zip'] . " " . $hp_assoc_array['city'];
				}
				$eas['patient_details']['hospiceassociations'] = 1;
				$eas['patient_details']['hospiceassociations_details'] = $hps_data['hospiceassociations_details'];
			}

			/* -------------- ENTRANCE ASSESSMENT FILE HISTORY	---------------------------- */
			$fileupload = new PatientFileUpload();
			$form_files = $fileupload->get_kinder_entrance_assessment_file_data($ipid);

			foreach($form_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}
			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			$this->view->form_files = $form_files;

			/* -------------- Entrance Assessment details	---------------------------- */
			$Q = Doctrine_Query::create()
				//->select('*')
				->from('KinderEntranceAssessment k')
			
				->leftJoin("k.KinderEntranceAssessmentSorrowfully")			
				
				->where("ipid='" . $ipid . "'")
				->orderBy('id DESC')
				->limit('1');
			$resarr = $Q->fetchArray();

			if(count($resarr) > 0)
			{
				$this->view->assessment_id = $resarr[0]['id'];
				$this->retainValues($resarr[0]);
				$eas['assessment'] = $resarr[0];
			}

			if(!empty($eas['assessment']['sapv_date']) && $eas['assessment']['sapv_date'] != "0000-00-00 00:00:00")
			{
				$eas['assessment']['sapv_date'] = date('d.m.Y', strtotime($eas['assessment']['sapv_date']));
			}
			
			$this->view->eas = $eas;
			

			/* ------------------------ PDF PROCEDURE -------------------------------------- */
			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['eas']['diagnosis'] = $eas['diagnosis'];
				$post['eas']['patient_details'] = $eas['patient_details'];
				$post['eas']['medication'] = $eas['medication'];
				$post['entrance_assessment_id'] = $_POST['eas']['assessment']['id'];

				/* =================== if new assessment generated ======================= */
				if($_POST['eas']['assessment']['new_assessment'] == '1')
				{
					$Q = Doctrine_Query::create()
						->select('*')
						->from('KinderEntranceAssessment')
						->where("ipid='" . $ipid . "'")
						->andWhere('status = 1 ')
						->orderBy('id ASC');
					$all_completed_assessment = $Q->fetcharray();

					$post['assessment_version'] = count($all_completed_assessment);
					$post['assessment_version_complete'] = $_POST['eas']['assessment']['completed_date'];

					$this->generateformPdf(4, $post, 'kinder_entrance_assessment_save', "kinderentranceassessment_pdf.html");

					$this->_redirect(APP_BASE . "patientform/kinderentranceassessment?id=" . $_REQUEST['id']);
				}
				/* ========================================== */

				if(strlen($_POST['pdf']) > 0)
				{
					$this->generateformPdf(3, $post, 'kinder_entrance_assessment', "kinderentranceassessment_pdf.html");
				}
			}
		}

		public function recordingreportAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			$this->view->patid = $decid;
			$this->view->enc_patid = $_REQUEST['id'];
			$this->view->ipid = $ipid;
			$this->view->clientid = $clientid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$patient_master_details = $patientmaster->getMasterData($decid, 0);
			$patient_master_details = $patientmaster->get_patientMasterData();
			$this->view->isdischarged = $patient_master_details['isdischarged'];
			$this->view->patientdetails = $patient_master_details;
// 			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);

			$hidemagic = Zend_Registry::get('hidemagic');
			$sql = "*,AES_DECRYPT(cnt_first_name,'" . Zend_Registry::get('salt') . "') as cnt_first_name";
			$sql .=",AES_DECRYPT(cnt_middle_name,'" . Zend_Registry::get('salt') . "') as cnt_middle_name";
			$sql .=",AES_DECRYPT(cnt_last_name,'" . Zend_Registry::get('salt') . "') as cnt_last_name";
			$sql .= ",AES_DECRYPT(cnt_title,'" . Zend_Registry::get('salt') . "') as cnt_title";
			$sql .=",AES_DECRYPT(cnt_street1,'" . Zend_Registry::get('salt') . "') as cnt_street1";
			$sql .= ",AES_DECRYPT(cnt_street2,'" . Zend_Registry::get('salt') . "') as cnt_street2";
			$sql .= ",AES_DECRYPT(cnt_zip,'" . Zend_Registry::get('salt') . "') as cnt_zip";
			$sql .=",AES_DECRYPT(cnt_city,'" . Zend_Registry::get('salt') . "') as cnt_city";
			$sql .=",AES_DECRYPT(cnt_phone,'" . Zend_Registry::get('salt') . "') as cnt_phone";
			$sql .= ",AES_DECRYPT(cnt_mobile,'" . Zend_Registry::get('salt') . "') as cnt_mobile";
			$sql .= ",AES_DECRYPT(cnt_comment,'" . Zend_Registry::get('salt') . "') as cnt_comment";
			$sql .=",AES_DECRYPT(cnt_nation,'" . Zend_Registry::get('salt') . "') as cnt_nation";

			$adminvisible = PatientMaster::getAdminVisibility($ipid);
			if($logininfo->usertype == 'SA' && $adminvisible != 1)
			{
				$sql = "*,'" . $hidemagic . "' as cnt_first_name";
				$sql .=",'" . $hidemagic . "' as cnt_middle_name";
				$sql .=",'" . $hidemagic . "' as cnt_last_name";
				$sql .=",'" . $hidemagic . "' as cnt_title";
				$sql .=",'" . $hidemagic . "' as cnt_street1";
				$sql .=",'" . $hidemagic . "' as cnt_street2";
				$sql .=",'" . $hidemagic . "' as cnt_zip";
				$sql .=",'" . $hidemagic . "' as cnt_city";
				$sql .=",'" . $hidemagic . "' as cnt_phone";
				$sql .=",AES_DECRYPT(cnt_phone,'" . Zend_Registry::get('salt') . "') as cnt_phone_dec";
				$sql .=",'" . $hidemagic . "' as cnt_mobile";
				$sql .=",'" . $hidemagic . "' as cnt_comment";
				$sql .=",'" . $hidemagic . "' as cnt_nation";
			}

			if($_REQUEST['fid'])
			{
				$bre_recording = new BreRecordingReport();
				$bre_recording_data = $bre_recording->getBreRecording($_REQUEST['fid'], $ipid);
				$this->view->master_data = $bre_recording_data[0];
				$this->retainValues($bre_recording_data[0]);
			}

			//get patient contactpersons
			$drop = Doctrine_Query::create()
				->select($sql)
				->from('ContactPersonMaster')
				->where("ipid='" . $ipid . "'")
				->andWhere('isdelete = 0')
				->orderby('create_date ASC');
			$droparray = $drop->fetchArray();

			foreach($droparray as $key => $val)
			{
				$drop_array[$key]['id'] = $val['id'];
				$drop_array[$key]['first_name'] = $val['cnt_first_name'];
				$drop_array[$key]['last_name'] = $val['cnt_last_name'];
			}

			$this->view->contact_person = $drop_array;
			$therapy = new PatientTherapieplanung();
			$patienttherapy = $therapy->getTherapieplanungData($ipid);

			$this->retainValues($patienttherapy[0]);
			/* ------------------------------------------------------------------ */

			if($this->getRequest()->isPost())
			{
				if($_POST['save'])
				{
					$post = $_POST;
					$bre_record_form = new Application_Form_BreRecordingReport();

					if(strlen($_REQUEST['fid']) == '0')
					{
						$save_bre_record = $bre_record_form->insert_data($post);
					}
					else
					{
						$update_bre_record = $bre_record_form->update_data($post, $_REQUEST['fid']);
					}

					$this->_redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
					exit;
				}
				elseif($_POST['pdf'])
				{
					$post['post_data'] = $_POST;
					$post['therapieplanung'] = $patienttherapy[0];

					//generate human body image from post data
					$tmp_file = $this->temporary_image_create($_POST['human'], 'base64');
					$tmp_file = basename($tmp_file);
					$post['image'] = '<img border="0" src="' . str_replace('/_ipad', '', RES_FILE_PATH) . '/temp/' . $tmp_file . '" />';

					$gen_pdf = $this->generate_pdf($post, 'recordingreport', 'recordingreport_pdf.html');
					exit;
				}
			}
		}

		private function temporary_files_delete($folder, $age = '86400')
		{
			if($handle = opendir($folder))
			{
				while(false !== ($entry = readdir($handle)))
				{
					$filename = $folder . '/' . $entry;
					$mtime = @filemtime($filename);
					if(is_file($filename) && $mtime && (time() - $mtime > $age))
					{
						@unlink($filename);
					}
				}
				closedir($handle);
			}
		}

		private function temporary_image_create($data, $type = 'svg', $stype = 'human')
		{
			$tmp_file = uniqid('img' . rand(1000, 9999));
			$tmp_file_path = APPLICATION_PATH . '/../public/temp/' . $tmp_file . '.png';
			$tmp_folder = APPLICATION_PATH . '/../public/temp';
			$this->temporary_files_delete($tmp_folder, '7200'); //delete all files older than 2 hours

			switch($type)
			{
				case 'svg':
					if(get_magic_quotes_gpc())
					{
						$data = stripslashes($data);
					}

					$data = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>' . $data;

					$handle = fopen($tmp_file_path, 'w+');
					fclose($handle);

					$im = new Imagick();
					$im->readImageBlob($data);
					$im->setImageFormat("jpeg");
					$im->writeImage($tmp_file_path);
					$im->clear();
					$im->destroy();

					break;

				case 'base64':
					$data = substr($data, stripos($data, '64,') + 3);
					$data = base64_decode($data);

					//transparent answer image
					$im = @imagecreatefromstring($data);
					$rgb = imagecolorat($im, 1, 1);
					$colors = imagecolorsforindex($im, $rgb);

					if($colors['alpha'] > 0 && $colors['red'] == 0)
					{
						//stupid hack CHANGE THIS!!!!!
						imagecolortransparent($im, imagecolorallocatealpha($im, 0, 0, 0, 127));
					}
					elseif($colors['red'] == 255)
					{
						imagecolortransparent($im, imagecolorallocatealpha($im, 255, 255, 255, 127));
					}

					//human body background
					if($stype == 'human-big')
					{
						$bg = imagecreatefromjpeg(APPLICATION_PATH . '/../public/images/human_big.jpg');
					}
					else if($stype == 'human-huge')
					{
						$bg = imagecreatefrompng(APPLICATION_PATH . '/../public/images/wundlocation.png');
					}
					else
					{
						$bg = imagecreatefromjpeg(APPLICATION_PATH . '/../public/images/human_small.jpg');
					}

					if($stype == 'human-big')
					{
						imagecopymerge($bg, $im, 0, 0, 0, 0, 850, 600, 100);
					}
					else
					{
						imagecopymerge($bg, $im, 0, 0, 0, 0, 550, 388, 100);
					}

					imagepng($bg, $tmp_file_path);
					imagedestroy($bg);

					break;

				default:
					break;
			}

			if(is_readable($tmp_file_path))
			{
				return $tmp_file_path;
			}
			else
			{
				return false;
			}
		}

		public function nursebillingformoldAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpidFromId($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->patid = $decid;
			$patient_id = $_REQUEST['id'];
			$this->view->patient_id = $patient_id;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ----------------------------------------------------- */
			if($this->getRequest()->isPost())
			{
				if(!$_POST['export_pdf'] && $_POST['save_form'] == '1')
				{
					foreach($_POST['visit'] as $date => $visit_values)
					{
						foreach($visit_values as $nr_vis => $visit_details)
						{
							if(!empty($visit_details['id']) && $visit_details['active'] == 1)
							{
								if((!empty($visit_details['old_start_time']) && !empty($visit_details['start_time']) && $visit_details['old_start_time'] != $visit_details['start_time']) || (!empty($visit_details['old_end_time']) && !empty($visit_details['end_time']) && $visit_details['old_end_time'] != $visit_details['end_time']))
								{
//								check if there are visits that were edited
									$post_visits['edit'][] = $visit_details;
								}
							}
							else if(empty($visit_details['id']) && !empty($visit_details['start_time']) && !empty($visit_details['end_time']) && $visit_details['active'] == 1)
							{
								$post_visits['new'][] = $visit_details;
							}
						}
					}

					if(!empty($post_visits))
					{
						$sanfr = new Application_Form_KvnoNurse();

						/* --------------------------- ADD MULTIPLE VISITS-------------------------- */
						if(!empty($post_visits['new']))
						{
							$result_new = $sanfr->insert_multiple_nurse_visits($post_visits['new'], 'bf');
						}

						/* --------------------------- ADD MULTIPLE VISITS-------------------------- */
						if(!empty($post_visits['edit']))
						{
							$result_edit = $sanfr->update_multiple_nurse_visits($post_visits['edit']);
						}

						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}

						if(!empty($_REQUEST['list']))
						{
							$this->_redirect(APP_BASE . "patientform/nursebillingform?id=" . $_GET['id'] . '&list=' . $_REQUEST['list']);
						}
						else
						{
							$this->_redirect(APP_BASE . "patientform/nursebillingform?id=" . $_GET['id']);
						}
						exit;
					}
				}

				/* --------------------------- DELETE VISIT start -------------------------- */
				if(!$_POST['export_pdf'] && !empty($_REQUEST['delid']) && !$_POST['save_form'])
				{
					if(!empty($_REQUEST['mode']) && $_REQUEST['mode'] == 'del')
					{
						$del_id_exp = explode('d', $_REQUEST['delid']);

						if(!empty($del_id_exp[1]))
						{
							$kvno_nurse = Doctrine_Query::create()
								->select('*')
								->from('KvnoNurse')
								->where('id = ' . $del_id_exp[1] . ' ');
							$kvno_nurse_res = $kvno_nurse->fetchArray();

							if($kvno_nurse_res)
							{
								$visit_date = date('d.m.Y', strtotime($kvno_nurse_res[0]['vizit_date']));
							}

							$nurse = new KvnoNurse();
							$delete_nurse_visit = $nurse->deleteNurseVisit($del_id_exp[1]);

							if($delete_nurse_visit === true)
							{
								$cust = new PatientCourse ();
								$cust->ipid = $ipid;
								$cust->course_date = date("Y-m-d H:i:s", time());
								$cust->course_type = Pms_CommonData::aesEncrypt("K");
								$cust->course_title = Pms_CommonData::aesEncrypt(addslashes(' Besuch vom ' . $visit_date . ' wurde gelöscht'));
								$cust->user_id = $logininfo->userid;
								$cust->save();
							}

							echo '1';
							exit;
						}
					}
				}
				/* --------------------------- DELETE VISIT end -------------------------- */
			}

			/* ----------------Patient general details-------------------------------------- */
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();
			$this->view->patient_name = $patientinfo['last_name'] . ', ' . $patientinfo['first_name'];
			$this->view->patient_birthd = $patientinfo['birthd'];

			/* -----------------Check if Discharge     ------------------------------- */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ----------------Patient  ALL Pflegedienst -------------------------------------- */

			/* ----------------Patient  FIRST Pflegedienst -------------------------------------- */
			$pat_pfl = new PatientPflegedienste();
			$first_pflege = $pat_pfl->getPatientFirstPflegediensteDetails($ipid);

			if(!empty($first_pflege))
			{
				$nurse['nursing_service'] = $first_pflege['nursing'];
				$nurse['nursing_service_contact'] = $first_pflege['last_name'] . " " . $first_pflege['first_name'];
				$nurse['nursing_service_iknumber'] = $first_pflege['ik_number'];
				$nurse['nursing_service_address'] = $first_pflege['street1'] . ', ';
				$nurse['nursing_service_address'] .= $first_pflege['zip'] . " " . $first_pflege['city'];
			}

			$this->view->nurse_details = $nurse;

			/* ----------------Patient HealthInsurance details-------------------------------------- */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if($phi)
			{
				$health_insurance_nr = $phi[0]['insurance_no'];
				$this->view->patient_health_insurance_nr = $health_insurance_nr;
			}
			else
			{
				$this->view->patient_health_insurance_nr = '--';
			}

			/* ----------------Patient - GET ACTIVE DAYS ------------------------------------- */
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);

			$admCycle[-1] = "gesamt";
			if(count($admissions[$ipid]['admissionDates']) != "0")
			{
				foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
				{
					if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}

					$admCycle[$keyAdm] = date("d.m.Y", strtotime($admitedDate['date'])) . " - " . date("d.m.Y", strtotime($dischargeDate));
					$admissionsCycles[$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
					$admissionsCycles[$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));

					$newadmissionsCycles[$keyAdm]['start'] = date("Y-m-d", strtotime($admitedDate['date']));
					$newadmissionsCycles[$keyAdm]['end'] = date("Y-m-d", strtotime($dischargeDate));

					if($keyAdm == (count($admissions[$ipid]['admissionDates']) - 1))
					{

					}
				}
			}
			else
			{
				$admCycle[0] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date'])) . " - " . date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
				//gesamt if no admision-readmission cycle
				$admissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$admissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));

				$newadmissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$newadmissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
			}


			$new_active_days = array();
			foreach($newadmissionsCycles as $cicle)
			{
				$new_active_days[] = $patientmaster->getDaysInBetween($cicle['start'], $cicle['end']);
			}

			$all_active_daysc = array();
			foreach($new_active_days as $acinter => $cainterval_days)
			{
				foreach($cainterval_days as $acdays)
				{
					$all_active_daysc[] = $acdays;
				}
			}

			$active_days = array_unique($all_active_daysc);
			$this->view->active_days = $active_days;

			if($_REQUEST['vizit'] == '1')
			{
				print_r("\n");
				print_r("new activ days");
				print_r($active_days);
				print_r("\n");
			}

			$this->view->active_days = $active_days;
			if($_REQUEST['vizit'] == '1')
			{
				print_r("\n");
				print_r("first activ days");
				print_r($active_days);
				print_r("\n");
			}

			$montharray = array(date('m', mktime(0, 0, 0, date("m") - 1, date("d"), date("Y"))), date('m'));
			$cnt = 1;
			foreach($admissionsCycles as $moth => $keyd)
			{
				$selectmonths[$cnt++] = $this->get_months($keyd['start'], $keyd['end'], true);
			}

			if(count($selectmonths) > 0)
			{
				foreach($selectmonths as $keym => $valm)
				{
					foreach($valm as $keylistmonth => $valuelm)
					{
						if(!in_array($valuelm, $montharray))
						{
							$verdung .=$comma . $valuelm;
							$comma = ",";
							$arrayMonthsSelect[$keylistmonth] = $valuelm;
						}
					}
				}
			}

			$present = date("Ym");
			$presentl = date("m") . "." . date("Y");

			if(!in_array($present, $arrayMonthsSelect))
			{
				$arrayMonthsSelect[$present] = $presentl;
			}

			$this->view->montharray = $arrayMonthsSelect;

			if(!empty($_REQUEST['list']))
			{
				$selectedPeriod[0] = substr($_REQUEST['list'], 0, 4);
				$selectedPeriod[1] = substr($_REQUEST['list'], 4);
			}
			else
			{
				$selectedPeriod[0] = date("Y");
				$selectedPeriod[1] = date("m");
			}
			$selectedPeriod[2] = "01";

			$formdays[] = $patientmaster->getDaysInBetween(date("Y-m-d H:i:s", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])), date("Y-m-d H:i:s", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])))));

			foreach($formdays as $keyd => $vald)
			{
				$day = 1;
				foreach($vald as $keylistday => $valueld)
				{
					$dmonth_array[str_pad($day, 2, "0", STR_PAD_LEFT)] = $valueld;
					$complete_month_days[$valueld . ' 00:00:00'] = $valueld;
					$complete_days_time[str_pad($day, 2, "0", STR_PAD_LEFT)] = $valueld . '';
					$complete_period_days[] = $valueld;
					$day++;
				}
			}
			$period['start_date'] = $complete_period_days[0];
			$period['end_date'] = end($complete_period_days);

			$this->view->month_days = $dmonth_array;
			$this->view->complete_month_days = $complete_days_time;

			/* ----------------Client - Get All LOCATIONS  -------------------------------------- */
			$clocation_q = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"');
			$clocation_array = $clocation_q->fetchArray();

			foreach($clocation_array as $lkey => $lvalue)
			{
				$master_locations[$lvalue['id']]['type'] = $lvalue['location_type'];
			}

			/* ----------------Patient - Get LOCATIONS -------------------------------------- */
			$patloc_q = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$patloc_array = $patloc_q->fetchArray();

			// we need to check in patient has hospital or hospiz
			$o = 1;
			$deactivate_interval = array();
			$hospital_hospiz_inactive_continue = array();
			$hospital_hospiz_open_location = '0';
			foreach($patloc_array as $plockey => $plocvalue)
			{
				$patient_locations[$plocvalue['location_id']]['type'] = $master_locations[$plocvalue['location_id']]['type'];
				$patient_locations[$plocvalue['location_id']]['from'] = $plocvalue['valid_from'];
				$patient_locations[$plocvalue['location_id']]['till'] = $plocvalue['valid_till'];

				if($patient_locations[$plocvalue['location_id']]['type'] == '1' || $patient_locations[$plocvalue['location_id']]['type'] == '2')
				{
					$deactivate_interval[$o]['start'] = $plocvalue['valid_from'];
					$deactivate_interval[$o]['end'] = $plocvalue['valid_till'];

					if($plocvalue['valid_till'] == '0000-00-00 00:00:00')
					{
						$plocvalue['valid_till'] = date("Y-m-d H:i:s");
						$hospital_hospiz_open_location = '1';
					}
					else
					{
						$hospital_hospiz_open_location = '0';
					}

					$hdeactivate_interval[$o]['start'] = date("Y-m-d", strtotime("+1 day", strtotime($plocvalue['valid_from'])));
					$hdeactivate_interval[$o]['end'] = date("Y-m-d", strtotime("-1 day", strtotime($plocvalue['valid_till'])));

					$hospital_hospiz_inactive[] = $patientmaster->getDaysInBetween($hdeactivate_interval[$o]['start'], $hdeactivate_interval[$o]['end']);

					$current_location = date('Y-m-d', strtotime($patloc_array[$plockey]['valid_till']));
					$nextlocation = date('Y-m-d', strtotime($patloc_array[$plockey + 1]['valid_from']));

					if($master_locations[$patloc_array[$plockey + 1]['location_id']]['type'] == '1' || $master_locations[$patloc_array[$plockey + 1]['location_id']]['type'] == '2')
					{
						if($current_location == $nextlocation)
						{
							$hospital_hospiz_inactive_continue[] = $nextlocation;
						}
					}
				}
				else
				{
					$hospital_hospiz_open_location = '0';
				}
				$o++;
			}
			asort($hospital_hospiz_inactive_continue);

			/* ----------------Patient - Get SAPV -------------------------------------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('verordnungbis !="000-00-00 00:00:00" ')
				->andWhere('verordnungam !="000-00-00 00:00:00" ')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$sapv_array = $dropSapv->fetchArray();

			$s = 1;
			$active_sapv_interval = array();
			foreach($sapv_array as $sapvkey => $sapvvalue)
			{
				$patient_sapv[$sapvvalue['id']]['type'] = $sapvvalue['verordnet'];
				$patient_sapv[$sapvvalue['id']]['from'] = $sapvvalue['verordnungam'];
				$patient_sapv[$sapvvalue['id']]['till'] = $sapvvalue['verordnungbis'];

				$active_sapv_interval[$s]['start'] = date('Y-m-d', strtotime($sapvvalue['verordnungam']));
				$active_sapv_interval[$s]['end'] = date('Y-m-d', strtotime($sapvvalue['verordnungbis']));

				$patient_active_sapv[] = $patientmaster->getDaysInBetween($active_sapv_interval[$s]['start'], $active_sapv_interval[$s]['end']);
				$s++;
			}
			asort($patient_active_sapv);

			foreach($patient_active_sapv as $sinter => $sinterval_days)
			{
				foreach($sinterval_days as $sdays)
				{
					$all_active_sapv_days[] = $sdays;
				}
			}

			$all_active_sapv_days = array_unique($all_active_sapv_days);

			/* ----------------Patient - Get Approved visits type-------------------------------------- */
//		if nothing saved -> get default
			$default_pavt = Pms_CommonData::default_approved_visit_type();
			$pavt_mod = new PatientApprovedVisitTypes();
			$existing_pavt_array = $pavt_mod->patients_approved_visits_overall($ipid);
			$pavt_array = $pavt_mod->patients_approved_visits_in_period($ipid, $period['start_date'], $period['end_date']);

			if(!$existing_pavt_array[$ipid])
			{
				$pavt_array[$ipid][0]['ipid'] = $ipid;
				$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
//			start period
				$pavt_array[$ipid][0]['start_date'] = date('d.m.Y', strtotime($period['start_date']));
//			end period
				$pavt_array[$ipid][0]['end_date'] = date('d.m.Y', strtotime($period['end_date']));
				$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
			}

			$x = 0;
			foreach($pavt_array as $p_ipid => $pavtvalue)
			{
				foreach($pavtvalue as $k => $tv)
				{
					$pavt[$tv['ipid']][$x]['visit_type'] = $tv['visit_type'];
					$pavt[$tv['ipid']][$x]['start_date'] = $tv['start_date'];

					if(empty($tv['end_date']) || $tv['end_date'] == "0000-00-00 00:00:00")
					{
						$pavt[$tv['ipid']][$x]['end_date'] = date('Y-m-d H:i:s');
					}
					else
					{
						$pavt[$tv['ipid']][$x]['end_date'] = $tv['end_date'];
					}

					$pavt_days[$tv['ipid']][$tv['visit_type']] = $patientmaster->getDaysInBetween(date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['start_date'])), date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['end_date'])));

					if(empty($patient_vists_type_int[$tv['ipid']][$tv['visit_type']]))
					{
						$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array();
					}
					$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array_merge($patient_vists_type_int[$tv['ipid']][$tv['visit_type']], $pavt_days[$tv['ipid']][$tv['visit_type']]);

					$x++;
				}
			}

			if($_REQUEST['approved'] == "1")
			{
				print_R("\n patient approved visits in period \n");
				print_R($pavt_array);
				print_R("\n patient approved visits interval\n");
				print_R($patient_vists_type_int);
				exit;
			}

			/* ----------------Client - Get PRICE VISITS-------------------------------------- */
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$this->view->shortcuts_visits = $shortcuts['visits'];

			$current_period['start'] = date("Y-m-d", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2]));
			$current_period['end'] = date("Y-m-d", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2]))));

			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			/* ----------------------Patient - get all "deleted visits"------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere("ipid='" . $ipid . "'")
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"')
				->andWhere('source_ipid = ""');
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ----------------Patient - Get NURSE VISITS-------------------------------------- */
			$nurse_visits_q = Doctrine_Query::create()
				->select("*")
				->from('KvnoNurse')
				->where("ipid='" . $ipid . "'")
				->andWhere('month(start_date) = ' . $selectedPeriod[1] . ' ')
				->andWhere('year(start_date) = ' . $selectedPeriod[0] . ' ')
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere('isdelete = 0')
				->orderBy('kvno_begin_date_h ASC');
			$nurse_visits_array = $nurse_visits_q->fetchArray();

			if($_REQUEST['visit_q'])
			{
				print_r("nurse visits from query\n");
				print_r($nurse_visits_array);
			}

			$nurse_visit_shortcuts = array("P1", "P2", "P3");

			$i = 1;
			$nurse_visit_day = array();
			foreach($nurse_visits_array as $nvkey => $value_nur)
			{
				$visit_day = date('Y-m-d', strtotime($value_nur['start_date']));
				$price_visit_day = date('Y-m-d', strtotime($value_nur['start_date']));
				$nurse_visit_day[$visit_day][$i]['visit_id'] = $value_nur['id'];
				$nurse_visit_day[$visit_day][$i]['create_user'] = $value_nur['create_user'];
				$nurse_visit_day[$visit_day][$i]['visit_day'] = $value_nur['start_date'];
				$nurse_visit_day[$visit_day][$i]['added_from'] = $value_nur['added_from'];

				if($nurse_visit_day[$visit_day][$i]['added_from'] == "bf")
				{
					$nurse_visit_day[$visit_day][$i]['visit_added_from'] = 'billing_form';
				}
				else
				{
					$nurse_visit_day[$visit_day][$i]['visit_added_from'] = '';
				}

				$nurse_visit_day[$visit_day][$i]['visit_action_day'] = date('d', strtotime($value_nur['start_date']));
				$nurse_visit_day[$visit_day][$i]['visit_start'] = date('H:i', strtotime($value_nur['start_date']));
				$nurse_visit_day[$visit_day][$i]['visit_end'] = date('H:i', strtotime($value_nur['end_date']));

				$start_date = strtotime($value_nur['start_date']);
				$end_date = strtotime($value_nur['end_date']);
				$nviz_minutes = round(($end_date - $start_date) / 60);
				$nviz_hi_display = gmdate("H:i", round(($end_date - $start_date)));

				$nurse_visit_day[$visit_day][$i]['visit_duration'] = $nviz_hi_display;
				$nurse_visit_day[$visit_day][$i]['visit_duration_count'] = $nviz_minutes;
				$nurse_visit_day_count[] = date('d', strtotime($value_nur['start_date']));

				// get status based on admission period
				$adm = 1;
				foreach($admissionsCycles as $admkey => $admper)
				{
					$admissionperios[$admkey][$adm]['start'] = $admper['start'];
					$admissionperios[$admkey][$adm]['end'] = $admper['end'];

					if(strtotime(date('d.m.Y', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) >= strtotime($admissionperios[$admkey][$adm]['start']) &&
						strtotime(date('d.m.Y', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) <= strtotime($admissionperios[$admkey][$adm]['end']))
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_adm'] = 'ACTIVE';
						break;
					}
					else
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_adm'] = 'INACTIVE';
					}
					$adm++;
				}

				// get status based on VALID SAPV
				if($nurse_visit_day[$visit_day][$i]['visit_status_adm'] == 'ACTIVE')
				{
					if(in_array($visit_day, $all_active_sapv_days))
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_sapv'] = 'ACTIVE';
					}
					else
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_sapv'] = 'INACTIV';
					}
				}

				if($nurse_visit_day[$visit_day][$i]['visit_status_sapv'] == 'ACTIVE')
				{
					//get status based on location type
					if(!empty($deactivate_interval))
					{
						$c = 1;
						foreach($deactivate_interval as $di => $intval)
						{
							if($intval['end'] == '0000-00-00 00:00:00')
							{
								$intval['end'] = date('Y-m-d H:i:s');
							}
							$interval_cond[$di][$c]['start'] = date('Y-m-d', strtotime($intval['start']));
							$interval_cond[$di][$c]['end'] = date('Y-m-d', strtotime($intval['end']));
							if(strtotime(date('Y-m-d', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) > strtotime($interval_cond[$di][$c]['start']) &&
								strtotime(date('Y-m-d', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) < strtotime($interval_cond[$di][$c]['end']))
							{
								$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'INACTIVE';
								$nurse_visit_day[$visit_day][$i]['visit_status'] = 'INACTIVE';
								$inactive_days[] = $visit_day;
								break;
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'ACTIVE';
								$nurse_visit_day[$visit_day][$i]['visit_status'] = 'ACTIVE';
							}
							$c++;
						}
					}
					else
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'ACTIVE';
						$nurse_visit_day[$visit_day][$i]['visit_status'] = 'ACTIVE';
					}

					// check in the visit day it is during hospital continuu
					if($nurse_visit_day[$visit_day][$i]['visit_status_loc'] == 'ACTIVE')
					{
						if(!in_array($visit_day, $hospital_hospiz_inactive_continue))
						{
							$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'ACTIVE';
							$nurse_visit_day[$visit_day][$i]['visit_status'] = 'ACTIVE';
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'INACTIVE';
							$nurse_visit_day[$visit_day][$i]['visit_status'] = 'INACTIVE';
						}
					}
				}
				else
				{
					$nurse_visit_day[$visit_day][$i]['visit_status'] = 'INACTIVE';
					$inactive_days[] = $visit_day;
				}

				if($nurse_visit_day[$visit_day][$i]['visit_status'] == 'ACTIVE')
				{
					if(in_array($visit_day, $patient_vists_type_int[$ipid]['p3']))
					{
						// get price details
						if($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P1']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P1']['t_end'])
						{
							if($master_price_list[$visit_day][0]['P1']['price'] != '0.00')
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P1']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P1']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P1']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
							}
						}
						elseif($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P2']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P2']['t_end'])
						{
							if($master_price_list[$visit_day][0]['P2']['price'] != '0.00')
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P2']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P2']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P2']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
							}
						}
						elseif($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P3']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P3']['t_end'])
						{
							if($master_price_list[$visit_day][0]['P3']['price'] != '0.00')
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P3']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P3']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P3']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
							}
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
						}

						$nurse_visit_day_p[$visit_day]['day_price_shortcut_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] ++;
						$nurse_visit_day_p[$visit_day]['day_price_list_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$nurse_visit_day_p[$visit_day]['day_price_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price'];

						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['shortcut'] ++;
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['list'] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['price'] = $nurse_visit_day[$visit_day][$i]['visit_price'];
					}
					else if(in_array($visit_day, $patient_vists_type_int[$ipid]['p2']))
					{
						// get price details
						if($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P1']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P1']['t_end'])
						{
							if($master_price_list[$visit_day][0]['P1']['price'] != '0.00')
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P1']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P1']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P1']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
							}
						}
						elseif(
							($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P2']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P2']['t_end']) ||
							($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P3']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P3']['t_end'])
						)
						{
							if($master_price_list[$visit_day][0]['P2']['price'] != '0.00')
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P2']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P2']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P2']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
							}
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
						}

						$nurse_visit_day_p[$visit_day]['day_price_shortcut_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] ++;
						$nurse_visit_day_p[$visit_day]['day_price_list_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$nurse_visit_day_p[$visit_day]['day_price_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price'];

						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['shortcut'] ++;
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['list'] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['price'] = $nurse_visit_day[$visit_day][$i]['visit_price'];
					}
					else if(in_array($visit_day, $patient_vists_type_int[$ipid]['p1']) && $master_price_list[$visit_day][0]['P1']['price'] != '0.00')
					{
						// get price details
						if(
							($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P1']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P1']['t_end']) ||
							($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P2']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P2']['t_end']) ||
							($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P3']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P3']['t_end'])
						)
						{
							if($master_price_list[$visit_day][0]['P1']['price'] != '0.00')
							{

								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P1']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P1']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P1']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
							}
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
						}

						$nurse_visit_day_p[$visit_day]['day_price_shortcut_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] ++;
						$nurse_visit_day_p[$visit_day]['day_price_list_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$nurse_visit_day_p[$visit_day]['day_price_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price'];

						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['shortcut'] ++;
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['list'] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['price'] = $nurse_visit_day[$visit_day][$i]['visit_price'];
					}
				}
				else
				{
					$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
					$nurse_visit_day_p[$visit_day]['day_price_shortcut_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = 0;
					$nurse_visit_day_p[$visit_day]['day_price_list_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = 0;
					$nurse_visit_day_p[$visit_day]['day_price_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = 0;

					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['shortcut'] = 0;
					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['list'] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['price'] = $nurse_visit_day[$visit_day][$i]['visit_price'];
				}
				/* ------------------------------------------------------------------------------------------- */
				if($nurse_visit_day[$visit_day][$i]['no_price_shortcut'] == 'NOPR')
				{
					// REMOVE VISITS IF THE SHORTCUT HAS NO PRICE  !!!!!!!!!!
					unset($nurse_visit_day[$visit_day][$i]);
				}
				/* ------------------------------------------------------------------------------------------- */
				$i++;
			}
			ksort($nurse_visit_day);

			if($_REQUEST['visit_q'])
			{
				print_R("\n");
				print_r("nurse visits after conditions\n");
				print_r($nurse_visit_day);
				exit;
			}

			if($_REQUEST['vizit'] == '1')
			{
				print_R("visits");
				print_r($nurse_visit_day);
				print_R("\n");
			}

			//inactive from visits array
			$inactive_array_visits[] = "XXX";
			$this->view->inactive_array_visits = $inactive_array_visits;

			// inactive based on location - hospital - hospiz
			$all_hospital_hospiz_days [] = "XXX";
			foreach($hospital_hospiz_inactive as $inter => $hinterval_days)
			{
				foreach($hinterval_days as $ddays)
				{
					$all_hospital_hospiz_days[] = $ddays;
				}
			}

			if(!empty($hospital_hospiz_inactive_continue))
			{
				$all_hospital_hospiz_days = array_merge($hospital_hospiz_inactive_continue, $all_hospital_hospiz_days);
			}

			if($_REQUEST['vizit'] == '1')
			{
				print_R("\n");
				print_R("hospital");
				print_r($all_hospital_hospiz_days);
				print_R("\n");
			}

			if($hospital_hospiz_open_location == '1')
			{
				array_push($all_hospital_hospiz_days, date('Y-m-d'));
			}

			// get all inactive
			$all_inactive_days[] = "XXX";
			$all_inactive_days = array_merge($inactive_array_visits, $all_hospital_hospiz_days);
			$all_inactive_days = array_unique($all_inactive_days);

			$alv_active_days = array_diff($active_days, $all_inactive_days);
			if($_REQUEST['vizit'] == '1')
			{
				print_R("\n");
				print_r('sapv');
				print_r($all_active_sapv_days);
				print_R("\n");
			}

			//get sapv conditions
			$this->view->all_active_sapv_days = $all_active_sapv_days;
			if(!empty($all_active_sapv_days))
			{
				$days_without_sapv = array_diff($alv_active_days, $all_active_sapv_days);
			}
			else
			{
				$days_without_sapv = $alv_active_days;
			}

			$all_active_sapvs_days = array_diff($alv_active_days, $days_without_sapv);
			$all_active_sapvs_days = array_unique($all_active_sapvs_days);
			$all_active_days = array_values($all_active_sapvs_days);


			$this->view->total_active_days = $all_active_days;

			if($_REQUEST['vizit'] == '1')
			{
				print_r("\n");
				print_r("activ days");
				print_r($all_active_days);
				print_r("\n");
				exit;
			}

			$this->view->price_details = $price_details;
			$this->view->used_shortcuts = array('P1', 'P2', 'P3');

			foreach($nurse_visit_day as $kh => $vals)
			{
				$the_array_visits[$kh] = array_values($vals);
			}

			ksort($the_array_visits);

			$this->view->visits_array = $the_array_visits;
			$this->view->nurse_visit_day_p = $nurse_visit_day_p;

			$nr_visits = array("0", "1", "2");
			$this->view->nr_visits = $nr_visits;
			$current_day = date("Y-m-d 00:00:00");
			$this->view->current_day = $current_day;

			/* ----------------------------PDF EXPORT-------------------------------------- */
			if($this->getRequest()->isPost())
			{
				if($_POST['export_pdf'] == '1' && $_POST['save_form'] == '0')
				{
					$monthsel = $_REQUEST['month'];

					$selectedPeriod[0] = substr($monthsel, 0, 4);
					$selectedPeriod[1] = substr($monthsel, 4);
					$this->view->monthsel = $selectedPeriod[1] . '.' . $selectedPeriod[0];

					$this->view->visits_array = $_POST['visit'];

					$htmlform = Pms_Template::createTemplate($this->view, 'templates/nursebillingform_pdf.html');
					$pdfname = "PFLEGE-LBG-Abrechnung";
					$pdf = new Pms_PDF('L', 'mm', 'A4', true, 'UTF-8', false);
					$pdf->setDefaults(true); //defaults with header
					$pdf->setImageScale(1.6);
					$pdf->SetMargins(10, 5, 10); //reset margins
					$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
					$pdf->setHTML($html);

					$tmpstmp = $pdf->uniqfolder(PDF_PATH);
					$file_name_real = basename($tmpstmp);

					$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
					$_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 					$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
// 					exec($cmd);
					$zipname = $file_name_real . ".zip";
					$filename = "uploads/" . $file_name_real . ".zip";

					/*
					$con_id = Pms_FtpFileupload::ftpconnect();
					if($con_id)
					{
						$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
						Pms_FtpFileupload::ftpconclose($con_id);
					}
					*/
					$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
					

					$cust = new PatientFileUpload();
					$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdfname));
					$cust->ipid = $ipid;
					$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
					$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					$cust->system_generated = "1";
					$cust->save();
					$recordid = $cust->id;

					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $pdfname . ' wurde erstellt'));
					$cust->user_id = $logininfo->userid;
					$cust->save();
					ob_end_clean();
					ob_start();
					$pdf->toBrowser($pdfname . '.pdf', 'D');
					exit;
				}
			}
		}

		public function nursebillingformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpidFromId($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->patid = $decid;
			$patient_id = $_REQUEST['id'];
			$this->view->patient_id = $patient_id;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* Get client data */
			$client_data = new Client();
			$client_details = $client_data->getClientDataByid($logininfo->clientid);

			
			/* =====module =================  */
			$modules = new Modules();
			$module_nie = $modules->checkModulePrivileges("107", $logininfo->clientid);
			$this->view->module_nie_anlage6 = $module_nie;
			if($module_nie)
			{
				//get Anlage6 details 
				/* ----------------------------------Get client details ------------------------------------- */
				if($clientid != '0' || !empty($clientid))
				{
					$cust = Doctrine_Query::create()
					->select("*,AES_DECRYPT(lbg_sapv_provider,'" . Zend_Registry::get('salt') . "') as lbg_sapv_provider,
					AES_DECRYPT(lbg_street,'" . Zend_Registry::get('salt') . "') as lbg_street,
					AES_DECRYPT(lbg_postcode,'" . Zend_Registry::get('salt') . "') as lbg_postcode,
					AES_DECRYPT(lbg_city,'" . Zend_Registry::get('salt') . "') as lbg_city,
					AES_DECRYPT(lbg_institutskennzeichen,'" . Zend_Registry::get('salt') . "') as lbg_institutskennzeichen")
									->from('Client')
									->where('id = ' . $clientid);
					$client_details = $cust->fetchArray();
				
					$this->view->lbg_client_name = $client_details[0]['lbg_sapv_provider'];
					
					$address = $client_details[0]['lbg_street'];
				
					if($client_details[0]['lbg_postcode'])
					{
						$address .= ', ' . $client_details[0]['lbg_postcode'];
					}
				
					if($client_details[0]['lbg_city'])
					{
						$address .= ', ' . $client_details[0]['lbg_city'];
					}
				
					$this->view->lbg_address = $address;
					$this->view->lbg_ik_nummer = $client_details[0]['lbg_institutskennzeichen'];
				}
				
				

				/* ----------------Patient  FIRST Pflegedienst -------------------------------------- */
				$pat_pfl = new PatientPflegedienste();
				$first_pflege = $pat_pfl->getPatientFirstPflegediensteDetails($ipid);
				
				if(!empty($first_pflege))
				{
					$nurse['nursing_service'] = $first_pflege['nursing'];
				}
				$this->view->nurse_details1 = $nurse;
				
			}
			
			
			/* ----------------------------------------------------- */
			if($this->getRequest()->isPost())
			{
				if(!$_POST['export_pdf'] && $_POST['save_form'] == '1')
				{
					foreach($_POST['visit'] as $date => $visit_values)
					{
						foreach($visit_values as $nr_vis => $visit_details)
						{
							if(!empty($visit_details['id']) && $visit_details['active'] == 1)
							{
								if((!empty($visit_details['old_start_time']) && !empty($visit_details['start_time']) && $visit_details['old_start_time'] != $visit_details['start_time']) || (!empty($visit_details['old_end_time']) && !empty($visit_details['end_time']) && $visit_details['old_end_time'] != $visit_details['end_time']))
								{
//								check if there are visits that were edited
									$post_visits['edit'][] = $visit_details;
								}
							}
							else if(empty($visit_details['id']) && !empty($visit_details['start_time']) && !empty($visit_details['end_time']) && $visit_details['active'] == 1)
							{
								$post_visits['new'][] = $visit_details;
							}
						}
					}

					if(!empty($post_visits))
					{
						$sanfr = new Application_Form_KvnoNurse();

						/* --------------------------- ADD MULTIPLE VISITS-------------------------- */
						if(!empty($post_visits['new']))
						{
							$result_new = $sanfr->insert_multiple_nurse_visits($post_visits['new'], 'bf');
						}

						/* --------------------------- ADD MULTIPLE VISITS-------------------------- */
						if(!empty($post_visits['edit']))
						{
							$result_edit = $sanfr->update_multiple_nurse_visits($post_visits['edit']);
						}

						if($result)
						{
							$this->view->error_message = $this->view->translate('recordinsertsucessfully');
						}

						if(!empty($_REQUEST['list']))
						{
							$this->_redirect(APP_BASE . "patientform/nursebillingform?id=" . $_GET['id'] . '&list=' . $_REQUEST['list']);
						}
						else
						{
							$this->_redirect(APP_BASE . "patientform/nursebillingform?id=" . $_GET['id']);
						}
						exit;
					}
				}

				/* --------------------------- DELETE VISIT start -------------------------- */
				if(!$_POST['export_pdf'] && !empty($_REQUEST['delid']) && !$_POST['save_form'])
				{
					if(!empty($_REQUEST['mode']) && $_REQUEST['mode'] == 'del')
					{
						$del_id_exp = explode('d', $_REQUEST['delid']);

						if(!empty($del_id_exp[1]))
						{
							$kvno_nurse = Doctrine_Query::create()
								->select('*')
								->from('KvnoNurse')
								->where('id = ' . $del_id_exp[1] . ' ');
							$kvno_nurse_res = $kvno_nurse->fetchArray();

							if($kvno_nurse_res)
							{
								$visit_date = date('d.m.Y', strtotime($kvno_nurse_res[0]['vizit_date']));
							}

							$nurse = new KvnoNurse();
							$delete_nurse_visit = $nurse->deleteNurseVisit($del_id_exp[1]);

							if($delete_nurse_visit === true)
							{
								$cust = new PatientCourse ();
								$cust->ipid = $ipid;
								$cust->course_date = date("Y-m-d H:i:s", time());
								$cust->course_type = Pms_CommonData::aesEncrypt("K");
								$cust->course_title = Pms_CommonData::aesEncrypt(addslashes(' Besuch vom ' . $visit_date . ' wurde gelöscht'));
								$cust->user_id = $logininfo->userid;
								$cust->save();
							}

							echo '1';
							exit;
						}
					}
				}
				/* --------------------------- DELETE VISIT end -------------------------- */
			}

			/* ----------------Patient general details-------------------------------------- */
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();
			$this->view->patient_name = $patientinfo['last_name'] . ', ' . $patientinfo['first_name'];
			$this->view->patient_birthd = $patientinfo['birthd'];

			/* -----------------Check if Discharge     ------------------------------- */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
			/* ----------------Patient  ALL Pflegedienst -------------------------------------- */

			/* ----------------Patient  FIRST Pflegedienst -------------------------------------- */
			$pat_pfl = new PatientPflegedienste();
			$first_pflege = $pat_pfl->getPatientFirstPflegediensteDetails($ipid);

			if(!empty($first_pflege))
			{
				$nurse['nursing_service'] = $first_pflege['nursing'];
				$nurse['nursing_service_contact'] = $first_pflege['last_name'] . " " . $first_pflege['first_name'];
				$nurse['nursing_service_iknumber'] = $first_pflege['ik_number'];
				$nurse['nursing_service_address'] = $first_pflege['street1'] . ', ';
				$nurse['nursing_service_address'] .= $first_pflege['zip'] . " " . $first_pflege['city'];
			}

			$this->view->nurse_details = $nurse;

			/* ----------------Patient HealthInsurance details-------------------------------------- */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if($phi)
			{
				$health_insurance_nr = $phi[0]['insurance_no'];
				$this->view->patient_health_insurance_nr = $health_insurance_nr;
			}
			else
			{
				$this->view->patient_health_insurance_nr = '--';
			}

			/* ----------------Patient - GET ACTIVE DAYS ------------------------------------- */
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);

			$admCycle[-1] = "gesamt";
			if(count($admissions[$ipid]['admissionDates']) != "0")
			{
				foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
				{
					if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}

					$admCycle[$keyAdm] = date("d.m.Y", strtotime($admitedDate['date'])) . " - " . date("d.m.Y", strtotime($dischargeDate));
					$admissionsCycles[$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
					$admissionsCycles[$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));

					$newadmissionsCycles[$keyAdm]['start'] = date("Y-m-d", strtotime($admitedDate['date']));
					$newadmissionsCycles[$keyAdm]['end'] = date("Y-m-d", strtotime($dischargeDate));

					if($keyAdm == (count($admissions[$ipid]['admissionDates']) - 1))
					{

					}
				}
			}
			else
			{
				$admCycle[0] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date'])) . " - " . date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
				//gesamt if no admision-readmission cycle
				$admissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$admissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));

				$newadmissionsCycles[0]['start'] = date("d.m.Y", strtotime($admissions[$ipid]['admission_date']));
				$newadmissionsCycles[0]['end'] = date("d.m.Y", strtotime($admissions[$ipid]['discharge_date']));
			}


			$new_active_days = array();
			foreach($newadmissionsCycles as $cicle)
			{
				$new_active_days[] = $patientmaster->getDaysInBetween($cicle['start'], $cicle['end']);
			}

			$all_active_daysc = array();
			foreach($new_active_days as $acinter => $cainterval_days)
			{
				foreach($cainterval_days as $acdays)
				{
					$all_active_daysc[] = $acdays;
				}
			}

			$active_days = array_unique($all_active_daysc);
			$this->view->active_days = $active_days;

			if($_REQUEST['vizit'] == '1')
			{
				print_r("\n");
				print_r("new activ days");
				print_r($active_days);
				print_r("\n");
			}

			$this->view->active_days = $active_days;
			if($_REQUEST['vizit'] == '1')
			{
				print_r("\n");
				print_r("first activ days");
				print_r($active_days);
				print_r("\n");
			}

			$montharray = array(date('m', mktime(0, 0, 0, date("m") - 1, date("d"), date("Y"))), date('m'));
			$cnt = 1;
			foreach($admissionsCycles as $moth => $keyd)
			{
				$selectmonths[$cnt++] = $this->get_months($keyd['start'], $keyd['end'], true);
			}

			if(count($selectmonths) > 0)
			{
				foreach($selectmonths as $keym => $valm)
				{
					foreach($valm as $keylistmonth => $valuelm)
					{
						if(!in_array($valuelm, $montharray))
						{
							$verdung .=$comma . $valuelm;
							$comma = ",";
							$arrayMonthsSelect[$keylistmonth] = $valuelm;
						}
					}
				}
			}

			$present = date("Ym");
			$presentl = date("m") . "." . date("Y");

			if(!in_array($present, $arrayMonthsSelect))
			{
				$arrayMonthsSelect[$present] = $presentl;
			}

			$this->view->montharray = $arrayMonthsSelect;

			if(!empty($_REQUEST['list']))
			{
				$selectedPeriod[0] = substr($_REQUEST['list'], 0, 4);
				$selectedPeriod[1] = substr($_REQUEST['list'], 4);
			}
			else
			{
				$selectedPeriod[0] = date("Y");
				$selectedPeriod[1] = date("m");
			}
			$selectedPeriod[2] = "01";

			$formdays[] = $patientmaster->getDaysInBetween(date("Y-m-d H:i:s", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])), date("Y-m-d H:i:s", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2])))));

			foreach($formdays as $keyd => $vald)
			{
				$day = 1;
				foreach($vald as $keylistday => $valueld)
				{
					$dmonth_array[str_pad($day, 2, "0", STR_PAD_LEFT)] = $valueld;
					$complete_month_days[$valueld . ' 00:00:00'] = $valueld;
					$complete_days_time[str_pad($day, 2, "0", STR_PAD_LEFT)] = $valueld . '';
					$complete_period_days[] = $valueld;
					$day++;
				}
			}
			$period['start_date'] = $complete_period_days[0];
			$period['end_date'] = end($complete_period_days);

			$this->view->month_days = $dmonth_array;
			$this->view->complete_month_days = $complete_days_time;

			/* ----------------Client - Get All LOCATIONS  -------------------------------------- */
			$clocation_q = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"');
			$clocation_array = $clocation_q->fetchArray();

			foreach($clocation_array as $lkey => $lvalue)
			{
				$master_locations[$lvalue['id']]['type'] = $lvalue['location_type'];
			}

			/* ----------------Patient - Get LOCATIONS -------------------------------------- */
			//replaced with Client Hospital Settings

			/* ----------------Patient - Get SAPV -------------------------------------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('verordnungbis !="000-00-00 00:00:00" ')
				->andWhere('verordnungam !="000-00-00 00:00:00" ')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$sapv_array = $dropSapv->fetchArray();

			$s = 1;
			$active_sapv_interval = array();
			foreach($sapv_array as $sapvkey => $sapvvalue)
			{
				$patient_sapv[$sapvvalue['id']]['type'] = $sapvvalue['verordnet'];
				$patient_sapv[$sapvvalue['id']]['from'] = $sapvvalue['verordnungam'];
				$patient_sapv[$sapvvalue['id']]['till'] = $sapvvalue['verordnungbis'];

				$active_sapv_interval[$s]['start'] = date('Y-m-d', strtotime($sapvvalue['verordnungam']));
				$active_sapv_interval[$s]['end'] = date('Y-m-d', strtotime($sapvvalue['verordnungbis']));

				$patient_active_sapv[] = $patientmaster->getDaysInBetween($active_sapv_interval[$s]['start'], $active_sapv_interval[$s]['end']);
				$s++;
			}
			asort($patient_active_sapv);

			foreach($patient_active_sapv as $sinter => $sinterval_days)
			{
				foreach($sinterval_days as $sdays)
				{
					$all_active_sapv_days[] = $sdays;
				}
			}

			$all_active_sapv_days = array_unique($all_active_sapv_days);


//Client Hospital Settings START
// 		$conditions['periods'][0]['start'] = date('Y-m-d',strtotime($cicle['start']));
// 		$conditions['periods'][0]['end'] = date('Y-m-d',strtotime($cicle['end']));
			$conditions['periods'] = array('0' => array('start' => "2008-01-01", 'end' => date("Y-m-d")));
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);

			$patient_days = Pms_CommonData::patients_days($conditions);
			//final resulted data
			$hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
			$hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];

			$active_days_cs = $patient_days[$ipid]['treatment_days'];

			foreach($hospital_days_cs as $k_hospital_cs => $v_hospital_cs)
			{
				$hospital_days_cs[$k_hospital_cs] = date('Y-m-d', strtotime($v_hospital_cs));
			}

			foreach($hospiz_days_cs as $k_hospiz_cs => $v_hospiz_cs)
			{
				$hospiz_days_cs[$k_hospiz_cs] = date('Y-m-d', strtotime($v_hospiz_cs));
			}

			foreach($active_days_cs as $k_act_day_cs => $v_act_day_cs)
			{
				$active_days_cs[$k_act_day_cs] = date('Y-m-d', strtotime($v_act_day_cs));
			}
			//avoid array_merge  empty result if one of the elements are not arrays
			if(empty($hospital_days_cs))
			{
				$hospital_days_cs = array();
			}
			if(empty($hospiz_days_cs))
			{
				$hospiz_days_cs = array();
			}

			$hospital_hospiz_days_cs = array_merge($hospital_days_cs, $hospiz_days_cs);
			$all_hospital_hospiz_days = $hospital_hospiz_days_cs;

			$all_active_sapv_days = array_intersect($all_active_sapv_days, $active_days_cs);

			if($_REQUEST['dbgq'])
			{
				print_r("hospital_days_cs\n");
				print_r($hospital_days_cs);
				print_r("hospiz_days_cs\n");
				print_r($hospiz_days_cs);
				print_r("hospital_hospiz_days_cs\n");
				print_r($hospital_hospiz_days_cs);

				print_r("all_active_sapv_days\n");
				print_r($all_active_sapv_days);
			}
//Client Hospital Settings END

			/* ----------------Patient - Get Approved visits type-------------------------------------- */
//		if nothing saved -> get default
			$default_pavt = Pms_CommonData::default_approved_visit_type();
			$pavt_mod = new PatientApprovedVisitTypes();
			$existing_pavt_array = $pavt_mod->patients_approved_visits_overall($ipid);
			$pavt_array = $pavt_mod->patients_approved_visits_in_period($ipid, $period['start_date'], $period['end_date']);

			if(!$existing_pavt_array[$ipid])
			{
				$pavt_array[$ipid][0]['ipid'] = $ipid;
				$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
//			start period
				$pavt_array[$ipid][0]['start_date'] = date('d.m.Y', strtotime($period['start_date']));
//			end period
				$pavt_array[$ipid][0]['end_date'] = date('d.m.Y', strtotime($period['end_date']));
				$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
			}

			$x = 0;
			foreach($pavt_array as $p_ipid => $pavtvalue)
			{
				foreach($pavtvalue as $k => $tv)
				{
					$pavt[$tv['ipid']][$x]['visit_type'] = $tv['visit_type'];
					$pavt[$tv['ipid']][$x]['start_date'] = $tv['start_date'];

					if(empty($tv['end_date']) || $tv['end_date'] == "0000-00-00 00:00:00")
					{
						$pavt[$tv['ipid']][$x]['end_date'] = date('Y-m-d H:i:s');
					}
					else
					{
						$pavt[$tv['ipid']][$x]['end_date'] = $tv['end_date'];
					}

					$pavt_days[$tv['ipid']][$tv['visit_type']] = $patientmaster->getDaysInBetween(date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['start_date'])), date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['end_date'])));

					if(empty($patient_vists_type_int[$tv['ipid']][$tv['visit_type']]))
					{
						$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array();
					}
					$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array_merge($patient_vists_type_int[$tv['ipid']][$tv['visit_type']], $pavt_days[$tv['ipid']][$tv['visit_type']]);

					$x++;
				}
			}

			if($_REQUEST['approved'] == "1")
			{
				print_R("\n patient approved visits in period \n");
				print_R($pavt_array);
				print_R("\n patient approved visits interval\n");
				print_R($patient_vists_type_int);
				exit;
			}

			/* ----------------Client - Get PRICE VISITS-------------------------------------- */
			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$this->view->shortcuts_visits = $shortcuts['visits'];

			$current_period['start'] = date("Y-m-d", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2]));
			$current_period['end'] = date("Y-m-d", strtotime("-1 day", strtotime("+1 month", strtotime($selectedPeriod[0] . "-" . $selectedPeriod[1] . "-" . $selectedPeriod[2]))));

			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			/* ----------------------Patient - get all "deleted visits"------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere("ipid='" . $ipid . "'")
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"')
				->andWhere('source_ipid = ""');
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}
			
			//TODO-3260 Carmen 07.07.2020
			//get nurse users
			$master_groups_first = array('5');
			$nurse_user_groups = Usergroup::getUserGroups($master_groups_first);
			
			foreach($nurse_user_groups as $k_group_f => $v_group_f)
			{
				$usergroups[] = $v_group_f['id'];
			}
			
			$client_users = User::getClientsUsers($clientid);
			
			$nurse_users = array();
			
			foreach($client_users as $k_cuser_det => $v_cuser_det)
			{
				$master_user_details[$v_cuser_det['id']] = $v_cuser_det;
			
				if(in_array($v_cuser_det['groupid'], $usergroups))
				{
					$nurse_users[] = $v_cuser_det['id'];
				}
			}
			
			$nurse_users_details = User::getUsersNiceName($nurse_users, $clientid);	
			//var_dump($nurse_users_details); exit;
			
			/* ----------------- Get Patients Assigned nurses  -------------------- */
			$treatedbyQ = Doctrine_Query::create()
			->select('*')
			->from('PatientQpaMapping')
			->where('epid = ?', $epid);
			$treatedbyarr = $treatedbyQ->fetchArray();
			
			$assigned_user2ipid[] = $this->view->translate('select_user');
			foreach($treatedbyarr as $k => $qvalues)
			{
				if(in_array($qvalues['userid'],$nurse_users))
				{
					$assigned_user2ipid[$qvalues['userid']] = $nurse_users_details[$qvalues['userid']]['nice_name'];
				}
			}
			$this->view->assigned_users = $assigned_user2ipid;
			//var_dump($assigned_user2ipid); exit;
			//--
			/* ----------------Patient - Get NURSE VISITS-------------------------------------- */
			$nurse_visits_q = Doctrine_Query::create()
				->select("*")
				->from('KvnoNurse')
				->where("ipid='" . $ipid . "'")
				->andWhere('month(start_date) = ' . $selectedPeriod[1] . ' ')
				->andWhere('year(start_date) = ' . $selectedPeriod[0] . ' ')
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere('isdelete = 0')
				->orderBy('kvno_begin_date_h ASC');
			$nurse_visits_array = $nurse_visits_q->fetchArray();

			if($_REQUEST['dbgg'])
			{
				print_r("nurse visits from query\n");
				print_r($nurse_visits_array);
			}

			//LE: 06.11.2014 - added and sorted by visit duration
			foreach($nurse_visits_array as $k_nurse_visit => $v_nurse_visit)
			{
				$duration = Pms_CommonData::calculate_visit_duration($v_nurse_visit['kvno_begin_date_h'], $v_nurse_visit['kvno_end_date_h'], $v_nurse_visit['kvno_begin_date_m'], $v_nurse_visit['kvno_end_date_m'], $v_nurse_visit['vizit_date']);
				$nurse_visits_array[$k_nurse_visit]['duration'] = $duration;
			}

//CONTACT FORM START
		/* 	//get nurse users
			$master_groups_first = array('5');
			$nurse_user_groups = Usergroup::getUserGroups($master_groups_first);

			foreach($nurse_user_groups as $k_group_f => $v_group_f)
			{
				$usergroups[] = $v_group_f['id'];
			}

			$client_users = User::getClientsUsers($clientid);

			$nurse_users = array();

			foreach($client_users as $k_cuser_det => $v_cuser_det)
			{
				$master_user_details[$v_cuser_det['id']] = $v_cuser_det;

				if(in_array($v_cuser_det['groupid'], $usergroups))
				{
					$nurse_users[] = $v_cuser_det['id'];
				}
			} */

			//get curent contact forms
			$contact_forms = $this->get_period_contact_forms($ipid, $current_period, true,false,true);

			foreach($contact_forms as $kcf => $day_cfs)
			{
				foreach($day_cfs as $k_dcf => $v_dcf)
				{
					//if(in_array($v_dcf['create_user'], $nurse_users) || in_array($v_dcf['change_user'], $nurse_users))
					if(in_array($v_dcf['create_user'], $nurse_users)) // ONLY create user - TODO-1734 @author Ancuta 14.08.2018
					{

						$v_dcf['added_from'] = 'cf';
						$nurse_visits_array[] = $v_dcf;
					}
				}
			}

			if($_REQUEST['dbgg'])
			{
				print_r("contact_forms\n");
				print_r($contact_forms);
				exit;
			}
//CONTACT FORM END

			$nurse_visit_shortcuts = array("P1", "P2", "P3");
			$nurse_visits_array = $this->array_sort($nurse_visits_array, 'start_date', SORT_ASC);


			//TODO-3260 carmen 08.07.2020				
			if($_REQUEST['user'] > '0')
			{			
				$nurse_visits_array = array_filter($nurse_visits_array, function($row){return $row['create_user'] == $_REQUEST['user'];});
				$this->view->requested_user = $_REQUEST['user'];
			}
			else 
			{
				$this->view->requested_user = '0';
			}
			//--			
			//print_r($_REQUEST['user']); exit;
			$i = 1;
			$nurse_visit_day = array();
			foreach($nurse_visits_array as $nvkey => $value_nur)
			{
				$visit_day = date('Y-m-d', strtotime($value_nur['start_date']));
				$price_visit_day = date('Y-m-d', strtotime($value_nur['start_date']));
				$nurse_visit_day[$visit_day][$i]['visit_id'] = $value_nur['id'];
				$nurse_visit_day[$visit_day][$i]['create_user'] = $value_nur['create_user'];
				$nurse_visit_day[$visit_day][$i]['visit_day'] = $value_nur['start_date'];
				$nurse_visit_day[$visit_day][$i]['added_from'] = $value_nur['added_from'];

				if($nurse_visit_day[$visit_day][$i]['added_from'] == "bf")
				{
					$nurse_visit_day[$visit_day][$i]['visit_added_from'] = 'billing_form';
				}
				elseif($nurse_visit_day[$visit_day][$i]['added_from'] == "cf")
				{
					$nurse_visit_day[$visit_day][$i]['visit_added_from'] = 'contact_form';
				}
				else
				{
					$nurse_visit_day[$visit_day][$i]['visit_added_from'] = '';
				}

				$nurse_visit_day[$visit_day][$i]['visit_action_day'] = date('d', strtotime($value_nur['start_date']));
				$nurse_visit_day[$visit_day][$i]['visit_start'] = date('H:i', strtotime($value_nur['start_date']));
				$nurse_visit_day[$visit_day][$i]['visit_end'] = date('H:i', strtotime($value_nur['end_date']));

				$start_date = strtotime($value_nur['start_date']);
				$end_date = strtotime($value_nur['end_date']);
				$nviz_minutes = round(($end_date - $start_date) / 60);
				$nviz_hi_display = gmdate("H:i", round(($end_date - $start_date)));

				$nurse_visit_day[$visit_day][$i]['visit_duration'] = $nviz_hi_display;
				$nurse_visit_day[$visit_day][$i]['visit_duration_count'] = $nviz_minutes;
				$nurse_visit_day_count[] = date('d', strtotime($value_nur['start_date']));

				// get status based on admission period
				$adm = 1;
				foreach($admissionsCycles as $admkey => $admper)
				{
					$admissionperios[$admkey][$adm]['start'] = $admper['start'];
					$admissionperios[$admkey][$adm]['end'] = $admper['end'];

					if(strtotime(date('d.m.Y', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) >= strtotime($admissionperios[$admkey][$adm]['start']) &&
						strtotime(date('d.m.Y', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) <= strtotime($admissionperios[$admkey][$adm]['end']))
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_adm'] = 'ACTIVE';
						break;
					}
					else
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_adm'] = 'INACTIVE';
					}
					$adm++;
				}

				// get status based on VALID SAPV
				if($nurse_visit_day[$visit_day][$i]['visit_status_adm'] == 'ACTIVE')
				{
					if(in_array($visit_day, $all_active_sapv_days))
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_sapv'] = 'ACTIVE';
					}
					else
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_sapv'] = 'INACTIV';
					}
				}

				if($nurse_visit_day[$visit_day][$i]['visit_status_sapv'] == 'ACTIVE')
				{
					//get status based on location type
					if(!empty($deactivate_interval))
					{
						$c = 1;
						foreach($deactivate_interval as $di => $intval)
						{
							if($intval['end'] == '0000-00-00 00:00:00')
							{
								$intval['end'] = date('Y-m-d H:i:s');
							}
							$interval_cond[$di][$c]['start'] = date('Y-m-d', strtotime($intval['start']));
							$interval_cond[$di][$c]['end'] = date('Y-m-d', strtotime($intval['end']));
							if(strtotime(date('Y-m-d', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) > strtotime($interval_cond[$di][$c]['start']) &&
								strtotime(date('Y-m-d', strtotime($nurse_visit_day[$visit_day][$i]['visit_day']))) < strtotime($interval_cond[$di][$c]['end']))
							{
								$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'INACTIVE';
								$nurse_visit_day[$visit_day][$i]['visit_status'] = 'INACTIVE';
								$inactive_days[] = $visit_day;
								break;
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'ACTIVE';
								$nurse_visit_day[$visit_day][$i]['visit_status'] = 'ACTIVE';
							}
							$c++;
						}
					}
					else
					{
						$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'ACTIVE';
						$nurse_visit_day[$visit_day][$i]['visit_status'] = 'ACTIVE';
					}

					// check in the visit day it is during hospital continuu
					if($nurse_visit_day[$visit_day][$i]['visit_status_loc'] == 'ACTIVE')
					{
						if(!in_array($visit_day, $hospital_hospiz_inactive_continue))
						{
							$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'ACTIVE';
							$nurse_visit_day[$visit_day][$i]['visit_status'] = 'ACTIVE';
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['visit_status_loc'] = 'INACTIVE';
							$nurse_visit_day[$visit_day][$i]['visit_status'] = 'INACTIVE';
						}
					}
				}
				else
				{
					$nurse_visit_day[$visit_day][$i]['visit_status'] = 'INACTIVE';
					$inactive_days[] = $visit_day;
				}

				if($nurse_visit_day[$visit_day][$i]['visit_status'] == 'ACTIVE')
				{
					if(in_array($visit_day, $patient_vists_type_int[$ipid]['p3']))
					{
						// get price details
						if($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P1']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P1']['t_end'])
						{
							if($master_price_list[$visit_day][0]['P1']['price'] != '0.00')
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P1']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P1']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P1']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
							}
						}
						elseif($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P2']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P2']['t_end'])
						{
							if($master_price_list[$visit_day][0]['P2']['price'] != '0.00')
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P2']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P2']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P2']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
							}
						}
						elseif($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P3']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P3']['t_end'])
						{
							if($master_price_list[$visit_day][0]['P3']['price'] != '0.00')
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P3']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P3']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P3']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
							}
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
						}

						$nurse_visit_day_p[$visit_day]['day_price_shortcut_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] ++;
						$nurse_visit_day_p[$visit_day]['day_price_list_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$nurse_visit_day_p[$visit_day]['day_price_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price'];
						$nurse_visit_day_p[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] ++;


						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['shortcut'] ++;
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['list'] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['price'] = $nurse_visit_day[$visit_day][$i]['visit_price'];
					}
					else if(in_array($visit_day, $patient_vists_type_int[$ipid]['p2']))
					{
						// get price details
						if($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P1']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P1']['t_end'])
						{
							if($master_price_list[$visit_day][0]['P1']['price'] != '0.00')
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P1']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P1']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P1']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
							}
						}
						elseif(
							($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P2']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P2']['t_end']) ||
							($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P3']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P3']['t_end'])
						)
						{
							if($master_price_list[$visit_day][0]['P2']['price'] != '0.00')
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P2']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P2']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P2']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
							}
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
						}

						$nurse_visit_day_p[$visit_day]['day_price_shortcut_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] ++;
						$nurse_visit_day_p[$visit_day]['day_price_list_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$nurse_visit_day_p[$visit_day]['day_price_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price'];
						$nurse_visit_day_p[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] ++;

						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['shortcut'] ++;
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['list'] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['price'] = $nurse_visit_day[$visit_day][$i]['visit_price'];
					}
					else if(in_array($visit_day, $patient_vists_type_int[$ipid]['p1']) && $master_price_list[$visit_day][0]['P1']['price'] != '0.00')
					{
						// get price details
						if(
							($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P1']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P1']['t_end']) ||
							($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P2']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P2']['t_end']) ||
							($nurse_visit_day[$visit_day][$i]['visit_duration_count'] >= $master_price_list[$visit_day][0]['P3']['t_start'] && $nurse_visit_day[$visit_day][$i]['visit_duration_count'] <= $master_price_list[$visit_day][0]['P3']['t_end'])
						)
						{
							if($master_price_list[$visit_day][0]['P1']['price'] != '0.00')
							{

								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = $master_price_list[$visit_day][0]['P1']['shortcut'];
								$nurse_visit_day[$visit_day][$i]['visit_price_list'] = $master_price_list[$visit_day][0]['P1']['list'];
								$nurse_visit_day[$visit_day][$i]['visit_price'] = $master_price_list[$visit_day][0]['P1']['price'];
							}
							else
							{
								$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
								$nurse_visit_day[$visit_day][$i]['no_price_shortcut'] = "NOPR";
							}
						}
						else
						{
							$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
						}

						$nurse_visit_day_p[$visit_day]['day_price_shortcut_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] ++;
						$nurse_visit_day_p[$visit_day]['day_price_list_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$nurse_visit_day_p[$visit_day]['day_price_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = $nurse_visit_day[$visit_day][$i]['visit_price'];
						$nurse_visit_day_p[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] ++;


						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['shortcut'] ++;
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['list'] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
						$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['price'] = $nurse_visit_day[$visit_day][$i]['visit_price'];
					}
				}
				else
				{
					$nurse_visit_day[$visit_day][$i]['visit_price_shortcut'] = "XX";
					$nurse_visit_day_p[$visit_day]['day_price_shortcut_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = 0;
					$nurse_visit_day_p[$visit_day]['day_price_list_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = 0;
					$nurse_visit_day_p[$visit_day]['day_price_' . $nurse_visit_day[$visit_day][$i]['visit_price_shortcut']] = 0;
					$nurse_visit_day_p[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']];

					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['shortcut'] = 0;
					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['list'] = $nurse_visit_day[$visit_day][$i]['visit_price_list'];
					$price_details[$visit_day][$nurse_visit_day[$visit_day][$i]['visit_price_shortcut']]['price'] = $nurse_visit_day[$visit_day][$i]['visit_price'];
				}
				/* ------------------------------------------------------------------------------------------- */


				if($nurse_visit_day[$visit_day][$i]['no_price_shortcut'] == 'NOPR')
				{
					// REMOVE VISITS IF THE SHORTCUT HAS NO PRICE  !!!!!!!!!!
					unset($nurse_visit_day[$visit_day][$i]);
				}
				/* ------------------------------------------------------------------------------------------- */
				$i++;
			}

			ksort($nurse_visit_day);

			if($_REQUEST['visit_q'])
			{
				print_R("\n");
				print_r("nurse visits after conditions\n");
				print_r($nurse_visit_day);
				exit;
			}

			if($_REQUEST['vizit'] == '1')
			{
				print_R("visits");
				print_r($nurse_visit_day);
				print_R("\n");
			}

			//inactive from visits array
			$inactive_array_visits[] = "XXX";
			$this->view->inactive_array_visits = $inactive_array_visits;

			// get all inactive
			$all_inactive_days[] = "XXX";
			$all_inactive_days = array_merge($inactive_array_visits, $all_hospital_hospiz_days);
			$all_inactive_days = array_unique($all_inactive_days);

			$alv_active_days = array_diff($active_days, $all_inactive_days);
			if($_REQUEST['vizit'] == '1')
			{
				print_R("\n");
				print_r('sapv');
				print_r($all_active_sapv_days);
				print_R("\n");
			}

			//get sapv conditions
			$this->view->all_active_sapv_days = $all_active_sapv_days;
			if(!empty($all_active_sapv_days))
			{
				$days_without_sapv = array_diff($alv_active_days, $all_active_sapv_days);
			}
			else
			{
				$days_without_sapv = $alv_active_days;
			}

			$all_active_sapvs_days = array_diff($alv_active_days, $days_without_sapv);
			$all_active_sapvs_days = array_unique($all_active_sapvs_days);
			$all_active_days = array_values($all_active_sapvs_days);

			$this->view->total_active_days = $all_active_days;

			if($_REQUEST['vizit'] == '1')
			{
				print_r("\n");
				print_r("activ days");
				print_r($all_active_days);
				print_r("\n");
				exit;
			}


			$this->view->used_shortcuts = array('P1', 'P2', 'P3');

			foreach($nurse_visit_day as $kh => $vals)
			{
				$the_array_visits[$kh] = $this->array_sort($nurse_visit_day[$kh], 'visit_duration_count', SORT_DESC);
				$the_array_visits[$kh] = array_values($the_array_visits[$kh]);
			}

			krsort($nurse_visit_shortcuts);
			$nurse_visit_shortcuts = array_values($nurse_visit_shortcuts);
//			print_r("price_details 1 \n");
//			print_r($price_details);

			foreach($nurse_visit_day_p as $k_day => $v_shortcuts_details)
			{
				$max_day_qty[$k_day] = $client_details[0]['max_nurse_visits'];
//				print_r($k_day."\n");

				foreach($nurse_visit_shortcuts as $k_short => $v_short)
				{
					if($v_shortcuts_details['day_price_shortcut_' . $v_short] > '0')
					{
//						print_r($max_day_qty[$k_day].".(IN)\n");
						if($v_shortcuts_details['day_price_shortcut_' . $v_short] >= $max_day_qty[$k_day] && $max_day_qty[$k_day] != '0')
						{
							$value = $max_day_qty[$k_day];
							if(($max_day_qty[$k_day] - $v_shortcuts_details['day_price_shortcut_' . $v_short]) > '0')
							{
								$value = ($max_day_qty[$k_day] - $v_shortcuts_details['day_price_shortcut_' . $v_short]);
							}
							else
							{
								$value = '0';
							}

//							print_r("(S1) -> ");
//							print_r($max_day_qty[$k_day].' - '. $v_shortcuts_details['day_price_shortcut_' . $v_short]."[".($value)."]\n");

							$price_details[$k_day][$v_short]['shortcut'] = $max_day_qty[$k_day];
							$nurse_visit_day_p[$k_day]['day_price_shortcut_' . $v_short] = $max_day_qty[$k_day];
						}
						else if($max_day_qty[$k_day] == '0')
						{
							$value = $max_day_qty[$k_day];
//							print_r("(S2) -> ");
//							print_r($value);
//							print_r("[".$value."] \n");


							$price_details[$k_day][$v_short]['shortcut'] = $max_day_qty[$k_day];
							$nurse_visit_day_p[$k_day]['day_price_shortcut_' . $v_short] = $max_day_qty[$k_day];
						}
						else
						{
							$value = ($max_day_qty[$k_day] - $v_shortcuts_details['day_price_shortcut_' . $v_short]);
//							print_r("(S3) -> ");
//							print_r($max_day_qty[$k_day].' - '. $v_shortcuts_details['day_price_shortcut_' . $v_short]);
//							print_r("[".$value."]\n");


							$price_details[$k_day][$v_short]['shortcut'] = $v_shortcuts_details['day_price_shortcut_' . $v_short];
							$nurse_visit_day_p[$k_day]['day_price_shortcut_' . $v_short] = $v_shortcuts_details['day_price_shortcut_' . $v_short];
						}
//
//                      $price_details[$k_day][$v_short]['shortcut'] = $value;
//                      $nurse_visit_day_p[$k_day]['day_price_shortcut_' . $v_short] = $value;
						$max_day_qty[$k_day] = $value;
//                      print_r($max_day_qty[$k_day].".(OUT)\n");
					}
				}
			}
//			print_r("price_details 2 \n");
//			print_r($price_details);
//			exit;
//			print_r($the_array_visits);
//			exit;
			$nr_visits = array("0", "1", "2");
			
		
			foreach($the_array_visits as $k_visit => $v_visit)
			{
				foreach($nr_visits as $visit_nr)
				{
					if(!empty($v_visit[$visit_nr]))
					{
						$array_longvisits[$k_visit][$visit_nr]= $v_visit[$visit_nr];
					}
				}
			}
			

			foreach($array_longvisits as $k_lv => $v_lv)
			{
					$array_visits_sorted[$k_lv]= $this->array_sort($array_longvisits[$k_lv],'visit_start', SORT_ASC);
					$array_visits_sorted[$k_lv]= array_values($array_visits_sorted[$k_lv]);
					
			}

			$this->view->price_details = $price_details;
			//$this->view->visits_array = $the_array_visits;
			$this->view->visits_array = $array_visits_sorted;

			$this->view->nurse_visit_day_p = $nurse_visit_day_p;

			$this->view->nr_visits = $nr_visits;
			$current_day = date("Y-m-d 00:00:00");
			$this->view->current_day = $current_day;

			/* ----------------------------PDF EXPORT-------------------------------------- */
			if($this->getRequest()->isPost())
			{
				if($_POST['export_pdf'] == '1' && $_POST['save_form'] == '0')
				{
					$monthsel = $_REQUEST['month'];

					$selectedPeriod[0] = substr($monthsel, 0, 4);
					$selectedPeriod[1] = substr($monthsel, 4);
					$this->view->monthsel = $selectedPeriod[1] . '.' . $selectedPeriod[0];

					$this->view->visits_array = $_POST['visit'];

					$htmlform = Pms_Template::createTemplate($this->view, 'templates/nursebillingform_pdf.html');
					$pdfname = "PFLEGE-LBG-Abrechnung";
					$pdf = new Pms_PDF('L', 'mm', 'A4', true, 'UTF-8', false);
					$pdf->setDefaults(true); //defaults with header
					$pdf->setImageScale(1.6);
					$pdf->SetMargins(10, 5, 10); //reset margins
					$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
					$pdf->setHTML($html);

					$tmpstmp = $pdf->uniqfolder(PDF_PATH);
					$file_name_real = basename($tmpstmp);

					$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
					$_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
					
// 					$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
// 					exec($cmd);
					$zipname = $file_name_real . ".zip";
					$filename = "uploads/" . $file_name_real . ".zip";
					/*
					$con_id = Pms_FtpFileupload::ftpconnect();
					if($con_id)
					{
						$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
						Pms_FtpFileupload::ftpconclose($con_id);
					}
					*/
					$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
						
					$cust = new PatientFileUpload();
					$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdfname));
					$cust->ipid = $ipid;
					$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
					$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					$cust->system_generated = "1";
					$cust->save();
					$recordid = $cust->id;

					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $pdfname . ' wurde erstellt'));
					$cust->user_id = $logininfo->userid;
					$cust->save();
					ob_end_clean();
					ob_start();
					$pdf->toBrowser($pdfname . '.pdf', 'D');
					exit;
				}
			}
		}

		public function palliativeemergencyAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ------------------- User Data--------------------------------------- */
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$palliative['loginusername'] = $loguserarray['user_title'] . " " . $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
			}

			/* ------------------- Client Data--------------------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$palliative['client_name'] = $clientdata[0]['client_name'];
			$palliative['client_city'] = $clientdata[0]['city'];
			$palliative['client_street'] = $clientdata[0]['street1'];
			$palliative['client_zip'] = $clientdata[0]['postcode'];
			$palliative['client_phone'] = $clientdata[0]['phone'];
			$palliative['client_fax'] = $clientdata[0]['fax'];
			$palliative['client_email'] = $clientdata[0]['emailid'];

			/* -------------------Patient Data--------------------------------------- */
// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();

			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
			$palliative['insurance_company_name'] = $healthinsu_array[0]['company_name'];

			/* --------------Patient Contact persons Data ---------------------------- */
			$familydegree = new FamilyDegree();
			$status = $familydegree->getFamilyDegrees(1);

			$pc = new ContactPersonMaster();
			$contact_persons = $pc->getPatientContact($ipid);
			$cnt_legal_check = 0;
			foreach($contact_persons as $kc => $vc)
			{
				$cnt_first[] = $vc['cnt_last_name'] . ', ' . $vc['cnt_first_name'] . '; ' . $vc['cnt_street1'] . ', ' . $vc['cnt_zip'] . ' ' . $vc['cnt_city'] . ', ' . $vc['cnt_phone'] . ', ' . $vc['cnt_mobile'];

				if($vc['cnt_hatversorgungsvollmacht'] == 1)
				{
					$cnt_legal_check = 1;
				}

				if($vc['cnt_hatversorgungsvollmacht'] == 1 || $vc['cnt_legalguardian'] == 1)
				{
					if(!empty($vc['cnt_mobile']))
					{
						$cnt_legal[] = $vc['cnt_last_name'] . ', ' . $vc['cnt_first_name'] . '; ' . $vc['cnt_street1'] . ', ' . $vc['cnt_zip'] . ' ' . $vc['cnt_city'] . ', ' . $vc['cnt_phone'] . ', ' . $vc['cnt_mobile'];
					}
					else
					{
						$cnt_legal[] = $vc['cnt_last_name'] . ', ' . $vc['cnt_first_name'] . '; ' . $vc['cnt_street1'] . ', ' . $vc['cnt_zip'] . ' ' . $vc['cnt_city'] . ', ' . $vc['cnt_phone'];
					}
				}
			}

			$palliative['cnt_first_details'] = $cnt_first[0];
			$palliative['cnt_legal'] = $cnt_legal_check;
			$palliative['cnt_legal_details'] = implode("\r\n", $cnt_legal);

			/* ------------------- Patient Medication Data  ------------------------------- */

			$medic = new PatientDrugPlan();

			//BEDARF LIST
			$bedarf_medicarr = $medic->getbedarfMedication($decid);
			$comma = "";
			foreach($bedarf_medicarr as $key => $val)
			{

				$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
				if($medca)
				{
					$bedarf_medcaarray = $medca->toArray();
					$bedarf_medication_list.= $comma . $bedarf_medcaarray['name'] . " (" . $val['dosage'] . ")";
					$comma = "; ";
				}
			}
			$palliative['bedarf_medication'] = $bedarf_medication_list;

			//SCHMERZPUMPE  LIST
			$schme_medicarr = $medic->getSchmerzpumpeMedication($decid);
			$commam = "";
			foreach($schme_medicarr as $keym => $valm)
			{
				$medcam = Doctrine::getTable('Medication')->find($valm['medication_master_id']);
				if($medcam)
				{
					$medcaarray = $medcam->toArray();
					$medication_list.= $commam . $medcaarray['name'] . " (" . $valm['dosage'] . ")";
					$commam = "; ";
				}
			}
			$palliative['schmerzp_medication'] = $medication_list;

			/* ------------------- Patient diagnosis Data  ------------------------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . ' (' . $valdia['icdnumber'] . ')' . $valdia['diagnosis'];
						$comma = ",";
					}
				}
			}

			$dgND = new DiagnosisType();
			$abb2ND = "'ND'";
			$ddarr2ND = $dgND->getDiagnosisTypes($logininfo->clientid, $abb2ND);
			$comma = ",";
			$typeidND = "'0'";
			foreach($ddarr2ND as $key => $valdia)
			{
				$typeidND .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdiaND = new PatientDiagnosis();
			$dianoNDarray = $patdiaND->getFinalData($ipid, $typeidND);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosisND = "";
				foreach($dianoNDarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosisND .= $comma . ' (' . $valdia['icdnumber'] . ')' . $valdia['diagnosis'];
						$comma = ",";
					}
				}
			}

			$palliative['diagnosen'] = "";
			if(strlen($diagnosis) > 0)
			{
				$palliative['diagnosen'] .= $diagnosis . ', ';
			}

			if(strlen($diagnosisND) > 0)
			{
				$palliative['diagnosen'] .= $diagnosisND;
			}

			/* ------------------- Patient stage Data--------------------------------- */
			$pms = new PatientMaintainanceStage();
			$pat_pmsinfo = $pms->getLastpatientMaintainanceStage($patientarr['ipid']);
			$stage = array();
			if($pat_pmsinfo)
			{
				$stage[] = $pat_pmsinfo[0]['stage'];
				$palliative['erstantrag'] = $pat_pmsinfo[0]['erstantrag'];
				$palliative['horherstufung'] = $pat_pmsinfo[0]['horherstufung'];
			}
			$palliative['pflegeversicherung'] = $stage;

			/* ------------------- Patient Pflegedienst--------------------------------- */
			$pat_pfl = new PatientPflegedienste();
			$res_pfledge = $pat_pfl->getPatientPflegedienste($ipid);

			foreach($res_pfledge as $k => $pfleg)
			{
				if($pfleg['palliativpflegedienst'] == '1')
				{
					$ppd_details_str .= $pfleg['nursing'] . ", \r\n" . $pfleg['phone_practice'] . "\r\n";
				}
				else
				{
					$pflegedienst_details_str .= $pfleg['nursing'] . ", \r\n" . $pfleg['phone_practice'] . "\r\n";
				}
			}
			$palliative['pflege_ppd_details'] = $ppd_details_str;
			$palliative['pflege_details'] = $pflegedienst_details_str;

			/* ------------------- Patient family doctor --------------------------------- */
			if($patientarr['familydoc_id'] > 0)
			{
				$fdoc = Doctrine_Core::getTable('FamilyDoctor')->find($patientarr['familydoc_id']);
				if($fdoc)
				{
					$docarr = $fdoc->toArray();

					$doc_title = "";
					if($docarr['title'] == "")
					{
						$doc_title = $docarr['title'];
					}
					else
					{
						$doc_title = $docarr['title'] . " ";
					}
				}

				if(empty($docarr['last_name']) && empty($docarr['first_name']) && empty($docarr['street1']) && empty($docarr['zip']) && empty($docarr['city']))
				{

					$palliative['family_doc_details'] = "";
				}
				else
				{
					$palliative['family_doc_details'] = $doc_title . "" . $docarr['last_name'] . ", " . $docarr['first_name'] . " \r\n" . $docarr['phone_practice'];
				}
			}
			else
			{
				$palliative['family_doc_details'] = "";
			}

			/* ------------------- Patient Assigned doctors--------------------------------- */
			$epid = Pms_CommonData::getEpidFromId($decid);

			$assigned_users = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('clientid =' . $logininfo->clientid)
				->andWhere('epid = "' . $epid . '"');
			$assigned_users_res = $assigned_users->fetchArray();

			$a_users[] = '99999999999';
			foreach($assigned_users_res as $k_au => $v_au)
			{
				$a_users[] = $v_au['userid'];
			}

			// get user details
			$users_det_q = Doctrine_Query::create()
				->select('*')
				->from('User')
				->whereIn('id', $a_users)
				->andWhere('isdelete="0"');
			$users_det_res = $users_det_q->fetchArray();
			foreach($users_det_res as $ku => $vu)
			{
				$assigned_users_str .= $vu['title'] . ' ' . $vu['last_name'] . ', ' . $vu['first_name'] . ', ' . $vu['phone'] . "\r\n";
			}

			$palliative['assigned_details'] = $assigned_users_str;

			/* ----------------Patient - Location details-------------------------------------- */
			$hospitalids = Doctrine_Query::create()
				->select("*,(CONVERT(AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') using latin1)) as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $logininfo->clientid . '"')
				->andWhere('location_type = 1');
			$hosparray = $hospitalids->fetchArray();

			$hosparr[] = "9999999999";
			foreach($hosparray as $hospital)
			{
				$hosparr[] = $hospital['id'];
				$hospital_location_array[$hospital['id']] = $hospital['location'];
			}

			//get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid ="' . $ipid . '"')
				->andWhere('isdelete="0"')
				->andWhereIn('location_id', $hosparr)
				->orderBy('valid_from DESC')
				->limit('1');
			$patlocationsArr = $patloc->fetchArray();

			if($patlocationsArr)
			{
				$palliative['last_hospital_name'] = $hospital_location_array[$patlocationsArr[0]['location_id']];
				if($patlocationsArr[0]['valid_till'] != '' && $patlocationsArr[0]['valid_till'] != '0000-00-00 00:00:00')
				{
					$valid_till = date('d.m.Y', strtotime($patlocationsArr[0]['valid_till']));
				}
				else
				{
					$valid_till = date('d.m.Y');
				}
				$valid_from = date('d.m.Y', strtotime($patlocationsArr[0]['valid_from']));
				$palliative['last_hospital_stay'] = $valid_from . ' - ' . $valid_till;
			}

			$palliative['kv_emergency_call'] = "116 117 ";
			$palliative['kv_rescue'] = "112";

			/* --------------------Patient -Living will  --------------------- */
			$palliative['living_will'] = "0";
			$palliative['living_will_more'] = "";
			$palliative['living_will'] = $patientarr['living_will'];

			if($patientarr['living_will'] == 1)
			{
				$palliative['living_will_more'] = $patientarr['living_will_deposited'];
			}
			/* --------------------PalliativeEmergency- get data if form exists--------------------- */

			/* ------------------- Palliative emergency form  Information ------------------------------- */
			$fd = new PalliativeEmergency();
			$form_details = $fd->get_last_palliative_emergency_details($ipid);

			if($form_details)
			{
				$ple_id = $form_details[0]['id'];
				$palliative = $form_details[0];
			}
			else
			{
				$ple_id = '';
			}
			$palliative['ple_id'] = $ple_id;

			/* Patient details */
			$palliative['birth'] = $patientarr['birthd'];
			$palliative['lastname'] = $patientarr['last_name'];
			$palliative['firstname'] = $patientarr['first_name'];
			$palliative['patient_name'] = $patientarr['last_name'] . ', ' . $patientarr['first_name'];
			$palliative['street'] = $patientarr['street1'];
			$palliative['zip_city'] = "";

			if(!empty($patientarr['zip']))
			{
				$palliative['zip_city'] .= $patientarr['zip'] . ', ';
			}

			if(!empty($patientarr['city']))
			{
				$palliative['zip_city'] .= $patientarr['city'];
			}

			$palliative['zip'] = $patientarr['zip'];
			$palliative['patcity'] = $patientarr['city'];
			$palliative['phone'] = $patientarr['phone'];

			$this->view->palliative = $palliative;
			if($this->getRequest()->isPost())
			{
				/* -------------------SAVE Actions-------------------------------- */
				if(strlen($_POST['btnsave']) > 0 && empty($_POST['ple_id']))
				{
					$kvno = new Application_Form_PalliativeEmergency();
					$result = $kvno->insertPalliativeEmergency($_POST);

					if($result)
					{
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
						exit;
					}
				}

				/* -------------------EDIT Actions-------------------------------- */
				else if(strlen($_POST['btnsave']) > 0 && !empty($_POST['ple_id']))
				{
					$kvno = new Application_Form_PalliativeEmergency();
					$result = $kvno->UpdatePalliativeEmergency($_POST);

					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					exit;
				}
				else if(strlen($_POST['btnsubmit']) > 0)
				{
					$this->retainValues($_POST);
					$post = $_POST;

					$post['palliative']['pflege_ppd_details'] = nl2br($post['palliative']['pflege_ppd_details']);
					$post['palliative']['assigned_details'] = nl2br($post['palliative']['assigned_details']);
					$post['palliative']['family_doc_details'] = nl2br($post['palliative']['family_doc_details']);
					$post['palliative']['pflege_details'] = nl2br($post['palliative']['pflege_details']);
					$post['palliative']['technical_emergency'] = nl2br($post['palliative']['technical_emergency']);
					$post['palliative']['diagnosen'] = nl2br($post['palliative']['diagnosen']);
					$post['palliative']['cnt_first_details'] = nl2br($post['palliative']['cnt_first_details']);
					$post['palliative']['bedarf_medication'] = nl2br($post['palliative']['bedarf_medication']);
					$post['palliative']['cnt_legal_details'] = nl2br($post['palliative']['cnt_legal_details']);
					$post['palliative']['schmerzp_medication'] = nl2br($post['palliative']['schmerzp_medication']);

					$this->generateformPdf(3, $post, 'Palliativ-Notfallbogen', "palliative_emergency_pdf.html");
				}
			}
			/* -------------------END UPDATE Action-------------------------------- */
		}

		private function generate_multiple_page_pdf($post_data, $pdfname, $filename, $orientation, $background_pages)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$pdf_names = array(
				'bresapvperformance' => 'BRE SAPV Leistungsnachweis',
			);

			if($pdfname == 'bresapvperformance')
			{
			    if(strlen($post_data['address']) > 0)
			    {
			        if(strpos($post_data['address'],"style"))
			        {
			            $post_data['address'] = preg_replace('/style=\"(.*)\"/i', '', $post_data['address']);
			        }
			    
			        $post_data['address'] = str_replace(array("<p>","<p >"), "", $post_data['address']);
			        $post_data['address'] = str_replace("</p>", "", $post_data['address']);
			        $post_data['address'] = str_replace("\n", "<br/>", $post_data['address']);
			    }
			    
			    if(strlen($post_data['hi_subdiv_address']) > 0)
			    {
			        if(strpos($post_data['hi_subdiv_address'],"style"))
			        {
			            $post_data['hi_subdiv_address'] = preg_replace('/style=\"(.*)\"/i', '', $post_data['hi_subdiv_address']);
			        }
			    
			        $post_data['hi_subdiv_address'] = str_replace(array("<p>","<p >"), "", $post_data['hi_subdiv_address']);
			        $post_data['hi_subdiv_address'] = str_replace("</p>", "", $post_data['hi_subdiv_address']);
			        $post_data['hi_subdiv_address'] = str_replace("\n", "<br/>", $post_data['hi_subdiv_address']);
			    }
			}
			
			if(is_array($filename))
			{
				foreach($filename as $k_file => $v_file)
				{
					$htmlform[$k_file] = Pms_Template::createTemplate($post_data, 'templates/' . $v_file);
					$html[$k_file] = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform[$k_file]);
				}
			}
			else
			{
				$htmlform = Pms_Template::createTemplate($post_data, 'templates/' . $filename);
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
			}

			if($pdfname == 'bresapvperformance')
			{
				$pdf_type = '23';
			}

			$pdf = new Pms_PDF('L', 'mm', 'A4', true, 'UTF-8', false);
			$pdf->setDefaults(true); //defaults with header
			$pdf->setImageScale(1.6);
			$pdf->SetMargins(15, 5, 10); //reset margins
			$pdf->setPrintFooter(false); // remove black line at bottom
			$pdf->SetAutoPageBreak(TRUE, 10);

			//set page background for a defined page key in $background_pages array
			$bg_image = Pms_CommonData::getPdfBackground($post_data['clientid'], $pdf_type);
			if($bg_image !== false)
			{
				$bg_image_path = PDFBG_PATH . '/' . $post_data['clientid'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
				if(is_file($bg_image_path))
				{
					$pdf->setBackgroundImage($bg_image_path);
				}
			}

//		print_r($html);
//		exit;

			if(is_array($html))
			{
				foreach($html as $k_html => $v_html)
				{
					if(is_array($orientation))
					{
						if(is_array($background_pages))
						{
							if(!in_array($k_html, $background_pages))
							{
								//unset page background for a nondefined page key in $background_pages array
								$pdf->setBackgroundImage();
							}
						}
						//each page has it`s own orientation
						$pdf->setHTML($v_html, $orientation[$k_html]);
					}
					else
					{
						//all pages one custom orientation
						$pdf->setHTML($v_html, $orientation);
					}
				}
			}
			else
			{
				if(empty($background_pages))
				{
					$pdf->setBackgroundImage();
				}
				$pdf->setHTML($html, $orientation);
			}

// 			$tmpstmp = substr(md5(time() . rand(0, 999)), 0, 12);
// 			mkdir('uploads/' . $tmpstmp);
			$tmpstmp = $pdf->uniqfolder(PDF_PATH);
			
			
			if($post_data['bulk_print'] == 1){
			    
			    
			    $batch_temp_folder = $post_data['batch_temp_folder'];
			    
			    if(!is_dir(PDFDOCX_PATH))
			    {
			        while(!is_dir(PDFDOCX_PATH))
			        {
			            mkdir(PDFDOCX_PATH);
			            if($i >= 50)
			            {
			                //exit; //failsafe
			                break;
			            }
			            $i++;
			        }
			    }
			    
			    if(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid']))
			    {
			        while(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid']))
			        {
			            mkdir(PDFDOCX_PATH . '/' . $post_data['clientid']);
			            if($i >= 50)
			            {
			                //exit; //failsafe
			                break;
			            }
			            $i++;
			        }
			    }
			    
			    
			    
			    if(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder))
			    {
			        while(!is_dir(PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder))
			        {
			            mkdir(PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder);
			            if($i >= 50)
			            {
			                exit; //failsafe
			            }
			            $i++;
			        }
			    }
			    
			    
			    $destination_path = PDFDOCX_PATH . '/' . $post_data['clientid'] . '/' . $batch_temp_folder . '/pdf_invoice_' . $post_data['unique_id'].'.pdf';
			    
			    $pdf->toFile($destination_path);
			    
			    return $destination_path;
			    
			} else{
			    
    			$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
    			$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
    // 			$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
    // 			exec($cmd);
    			$zipname = $tmpstmp . ".zip";
    			$filename = "uploads/" . $tmpstmp . ".zip";
    			/*
    			$con_id = Pms_FtpFileupload::ftpconnect();
    
    			if($con_id)
    			{
    				$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
    				Pms_FtpFileupload::ftpconclose($con_id);
    			}
    			*/
    			$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
    				
    
    			if($pdfname == 'bresapvperformance')
    			{
    				$tabname = 'bresapvinvoice';
    			}
    
    			ob_end_clean();
    			ob_start();
    			$pdf->toBrowser($pdfname . '.pdf', 'D');
    			exit;
    			
    		}
		}

		private function visitform_changes($ipid, $visit_form_id, $visit_form_type, $new_visit_form_data)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;

			switch($visit_form_type)
			{
				case "kvno_doctor_visit":

					$db_fields_to_exclude = array(
						'id',
						'ipid',
						'quality',
						'kvno_peg',
						'kvno_peg_text',
						'kvno_port',
						'kvno_port_text',
						'kvno_pumps',
						'kvno_pumps_text',
						'kvno_dk',
						'kvno_dk_text',
						'kvno_kunstliche',
						'kvno_kunstliche_text',
						'kvno_darm',
						'kvno_darm_text',
						'kvno_blase',
						'kvno_blase_text',
						'kvno_luftrohre',
						'kvno_luftrohre_text',
						'kvno_ablaufsonde',
						'kvno_ablaufsonde_text',
						'kvno_medizini_b',
						'sub_user',
						'isdelete',
						'create_date',
						'change_date',
						'create_user',
						'change_user',
					);

					$kvno_global_values = array("1" => "schlechter", "2" => "besser", "3" => "gleich");
					$kvno_medizini = array(1 => "wie geplant gelaufen", 2 => "werden fortgesetzt", 3 => "nicht wie geplant verlaufen");

					$korp_befund = array(1 => "krankheitsentsprechend", 2 => "Befund");

					$field2data = array(
						'visit_period' => array('shortcut' => 'K', 'string' => 'Besuchszeit: [visit_period]'),
						'fahrtzeit' => array('shortcut' => 'K', 'string' => 'Fahrtzeit: [fahrtzeit]'),
						'kvno_port_text' => array('shortcut' => 'K', 'string' => 'Port - nicht ok: [kvno_port_text]'),
						'kvno_kunstliche_text' => array('shortcut' => 'K', 'string' => 'besonderer Aus-/ Eingang ([kunstlichemore])- nicht ok: [kvno_kunstliche_text]'),
						'quality' => array('shortcut' => 'K', 'string' => 'Qualität des Besuches: [quality]'),
						'kopf' => array('shortcut' => 'B', 'string' => 'Kopf: [kopf]'),
						'thorax' => array('shortcut' => 'B', 'string' => 'Thorax: [thorax]'),
						'abdomen' => array('shortcut' => 'B', 'string' => 'Abdomen: [abdomen]'),
						'extremitaten' => array('shortcut' => 'B', 'string' => 'Extremitaten: [extremitaten]'),
						'haut_wunden' => array('shortcut' => 'B', 'string' => 'Haut/Wunden: [haut_wunden]'),
						'neurologisch_psychiatrisch' => array('shortcut' => 'B', 'string' => 'Neurologisch / Psychiatrisch: [neurologisch_psychiatrisch]'),
						'kvno_ablaufsonde_text' => array('shortcut' => 'K', 'string' => 'Ablaufsonde  - nicht ok: [kvno_ablaufsonde_text]'),
						'kopf_text' => array('shortcut' => 'B', 'string' => 'Kopf: [kopf_text]'),
						'thorax_text' => array('shortcut' => 'B', 'string' => 'Thorax: [thorax_text]'),
						'abdomen_text' => array('shortcut' => 'B', 'string' => 'Abdomen: [abdomen_text]'),
						'extremitaten_text' => array('shortcut' => 'B', 'string' => 'Extremitaten: [extremitaten_text]'),
						'haut_wunden_text' => array('shortcut' => 'B', 'string' => 'Haut/Wunden: [haut_wunden_text]'),
						'neurologisch_psychiatrisch_text' => array('shortcut' => 'B', 'string' => 'Neurologisch / Psychiatrisch: [neurologisch_psychiatrisch_text]'),
						'kvno_sonstiges' => array('shortcut' => 'K', 'string' => 'Sonstiges / Kommentar: [kvno_sonstiges]'),
						'kvno_global' => array('shortcut' => 'K', 'string' => 'Globale Einschätzung: [kvno_global].'),
						'comment_apotheke' => array('shortcut' => 'Q', 'string' => 'Kommentar Medikation / Pumpe / Apotheke: [comment_apotheke]'),
						'kvno_medizini_a' => array('shortcut' => 'K', 'string' => 'Medizinische Maßnahmen: [kvno_medizini_a]'),
						'kvno_fotodocumentation' => array('shortcut' => '', 'string' => 'Fotodokumentation: [kvno_fotodocumentation]'),
						'care_instructions' => array('shortcut' => '', 'string' => 'Pflege-Anweisung: [care_instructions]'),
					);

//				get old form data
					$old_form_data = KvnoDoctor::getDoctorVisits(array($visit_form_id));

//				processing old saved data
					if(count($old_form_data) > 0)
					{
						$visit_date = date('Y-m-d', strtotime($old_form_data[0]['vizit_date']));
						$old_form_data[0]['vizit_date'] = $visit_date;
						$old_form_data[0]['visit_date'] = date("d.m.Y", strtotime($visit_date));

						$old_form_data[0]['kvno_global_text'] = $kvno_global_values[$old_form_data[0]['kvno_global']];
						$old_form_data[0]['kvno_medizini_a_text'] = $kvno_medizini[$old_form_data[0]['kvno_medizini_a']];
					}

//				processing incoming data
//				create start_date end_date from hour - minute fields
					if(count($new_visit_form_data) > 0)
					{
						$visit_date = date('Y-m-d', strtotime($new_visit_form_data['vizit_date']));

						$start = $visit_date . ' ' . $new_visit_form_data['kvno_begin_date_h'] . ':' . $new_visit_form_data['kvno_begin_date_m'] . ':00';
						$end = $visit_date . ' ' . $new_visit_form_data['kvno_end_date_h'] . ':' . $new_visit_form_data['kvno_end_date_m'] . ':00';

						$new_visit_form_data['start_date'] = $start;
						$new_visit_form_data['end_date'] = $end;

						$new_visit_form_data['vizit_date'] = date('Y-m-d', strtotime($new_visit_form_data['vizit_date']));
						$new_visit_form_data['visit_date'] = date('d.m.Y', strtotime($new_visit_form_data['vizit_date']));
					}

					//processing old data against new data
					foreach($old_form_data[0] as $k_saved_data => $v_saved_data)
					{
						if(!in_array($k_saved_data, $db_fields_to_exclude))
						{
							if(array_key_exists($k_saved_data, $new_visit_form_data))
							{
								//do checks
								//handle array radios
								if(is_array($new_visit_form_data[$k_saved_data]) && ($k_saved_data == 'kvno_ecog' || $k_saved_data == 'kvno_global'))
								{
									$new_visit_form_data[$k_saved_data] = $new_visit_form_data[$k_saved_data][0];
								}

								//add mapped values to new data array
								if($kvno_global_values[$new_visit_form_data[$k_saved_data]] && ($k_saved_data == 'kvno_global' || $k_saved_data == 'kvno_medizini_a'))
								{
									$new_visit_form_data[$k_saved_data . '_text'] = $kvno_global_values[$new_visit_form_data[$k_saved_data]];
								}

								//handle simple diff bewteen db and post values
								if($new_visit_form_data[$k_saved_data] != $v_saved_data && $k_saved_data != 'kvno_global' && $k_saved_data != 'kvno_medizini_a' && !in_array($k_saved_data . '_text', $field2data))
								{
									$changed_data[$k_saved_data]['old'] = $v_saved_data;
									$changed_data[$k_saved_data]['new'] = $new_visit_form_data[$k_saved_data];
								}
								//compare mapped values (check db values against post values and show coresponding mapped value)
								else if($new_visit_form_data[$k_saved_data] != $v_saved_data && ($k_saved_data == 'kvno_global' || $k_saved_data == 'kvno_medizini_a'))
								{
									$changed_data[$k_saved_data]['old'] = $old_form_data[0][$k_saved_data . '_text'];
									$changed_data[$k_saved_data]['new'] = $new_visit_form_data[$k_saved_data . '_text'];
								}

								if(array_key_exists($k_saved_data . '_text', $field2data) && $new_visit_form_data[$k_saved_data] != $v_saved_data)
								{
									$changed_data[$k_saved_data]['old'] = $korp_befund[$v_saved_data];
									$changed_data[$k_saved_data]['new'] = $korp_befund[$new_visit_form_data[$k_saved_data]];
								}
							}
						}

						$new_start_ts = strtotime($new_visit_form_data['start_date']);
						$new_end_ts = strtotime($new_visit_form_data['end_date']);

						$old_start_ts = strtotime($old_form_data[0]['start_date']);
						$old_end_ts = strtotime($old_form_data[0]['end_date']);

						if($new_start_ts != $old_start_ts || $new_end_ts != $old_end_ts)
						{
							$changed_data['visit_period']['old'] = date('H:i', $old_start_ts) . ' - ' . date('H:i d.m.Y', $old_end_ts);
							$changed_data['visit_period']['new'] = date('H:i', $new_start_ts) . ' - ' . date('H:i d.m.Y', $new_end_ts);
						}
					}

					//process changes and build final query array
					foreach($changed_data as $k_field => $v_field_data)
					{
						if(array_key_exists($k_field, $field2data))
						{
							if(strlen($v_field_data['old']) > 0)
							{
								$course_title_dif = $v_field_data['old'] . ' -> ' . $v_field_data['new'];
							}
							else
							{
								$course_title_dif = $v_field_data['new'];
							}

							if($course_title_dif)
							{
								$course_title = str_replace('[' . $k_field . ']', $course_title_dif, $field2data[$k_field]['string']);
							}

							$records[] = array(
								'ipid' => $ipid,
								'user_id' => $userid,
								'course_date' => date('Y-m-d H:i:d', time()),
								'course_type' => Pms_CommonData::aesEncrypt($field2data[$k_field]['shortcut'], Zend_Registry::get('salt')),
								'course_title' => Pms_CommonData::aesEncrypt($course_title, Zend_Registry::get('salt')),
								'tabname' => Pms_CommonData::aesEncrypt("kvno_doctor_visit", Zend_Registry::get('salt'))
							);
						}
					}

					break;

				case "kvno_nurse_visit":

					$db_fields_to_exclude = array(
						'id',
						'ipid',
						'quality',
						'kvno_peg',
						'kvno_peg_text',
						'kvno_port',
						'kvno_port_text',
						'kvno_pumps',
						'kvno_pumps_text',
						'kvno_dk',
						'kvno_dk_text',
						'kvno_kunstliche',
						'kvno_kunstliche_text',
						'kvno_darm',
						'kvno_darm_text',
						'kvno_blase',
						'kvno_blase_text',
						'kvno_luftrohre',
						'kvno_luftrohre_text',
						'kvno_ablaufsonde',
						'kvno_ablaufsonde_text',
						'kvno_medizini_b',
						'sub_user',
						'isdelete',
						'create_date',
						'change_date',
						'create_user',
						'change_user',
					);

					$kvno_global_values = array("1" => "schlechter", "2" => "besser", "3" => "gleich");
					$kvno_medizini = array(1 => "wie geplant gelaufen", 2 => "werden fortgesetzt", 3 => "nicht wie geplant verlaufen");

					$korp_befund = array(1 => "krankheitsentsprechend", 2 => "Befund");

					$field2data = array(
						'visit_period' => array('shortcut' => 'K', 'string' => 'Besuchszeit: [visit_period]'),
						'fahrtzeit' => array('shortcut' => 'K', 'string' => 'Fahrtzeit: [fahrtzeit]'),
						'kvno_port_text' => array('shortcut' => 'K', 'string' => 'Port - nicht ok: [kvno_port_text]'),
						'kvno_kunstliche_text' => array('shortcut' => 'K', 'string' => 'besonderer Aus-/ Eingang ([kunstlichemore])- nicht ok: [kvno_kunstliche_text]'),
						'quality' => array('shortcut' => 'K', 'string' => 'Qualität des Besuches: [quality]'),
						'kopf' => array('shortcut' => 'B', 'string' => 'Kopf: [kopf]'),
						'thorax' => array('shortcut' => 'B', 'string' => 'Thorax: [thorax]'),
						'abdomen' => array('shortcut' => 'B', 'string' => 'Abdomen: [abdomen]'),
						'extremitaten' => array('shortcut' => 'B', 'string' => 'Extremitaten: [extremitaten]'),
						'haut_wunden' => array('shortcut' => 'B', 'string' => 'Haut/Wunden: [haut_wunden]'),
						'neurologisch_psychiatrisch' => array('shortcut' => 'B', 'string' => 'Neurologisch / Psychiatrisch: [neurologisch_psychiatrisch]'),
						'kvno_ablaufsonde_text' => array('shortcut' => 'K', 'string' => 'Ablaufsonde  - nicht ok: [kvno_ablaufsonde_text]'),
						'kopf_text' => array('shortcut' => 'B', 'string' => 'Kopf: [kopf_text]'),
						'thorax_text' => array('shortcut' => 'B', 'string' => 'Thorax: [thorax_text]'),
						'abdomen_text' => array('shortcut' => 'B', 'string' => 'Abdomen: [abdomen_text]'),
						'extremitaten_text' => array('shortcut' => 'B', 'string' => 'Extremitaten: [extremitaten_text]'),
						'haut_wunden_text' => array('shortcut' => 'B', 'string' => 'Haut/Wunden: [haut_wunden_text]'),
						'neurologisch_psychiatrisch_text' => array('shortcut' => 'B', 'string' => 'Neurologisch / Psychiatrisch: [neurologisch_psychiatrisch_text]'),
						'kvno_sonstiges' => array('shortcut' => 'K', 'string' => 'Sonstiges / Kommentar: [kvno_sonstiges]'),
						'kvno_global' => array('shortcut' => 'K', 'string' => 'Globale Einschätzung: [kvno_global].'),
						'comment_apotheke' => array('shortcut' => 'Q', 'string' => 'Kommentar Medikation / Pumpe / Apotheke: [comment_apotheke]'),
						'kvno_medizini_a' => array('shortcut' => 'K', 'string' => 'Medizinische Maßnahmen: [kvno_medizini_a]'),
						'kvno_fotodocumentation' => array('shortcut' => '', 'string' => 'Fotodokumentation: [kvno_fotodocumentation]'),
						'care_instructions' => array('shortcut' => '', 'string' => 'Pflege-Anweisung: [care_instructions]'),
					);

//				get old form data
					$old_form_data = KvnoNurse::getNurseVisits(array($visit_form_id));
//print_r($old_form_data);exit;
//				processing old saved data
					if(count($old_form_data) > 0)
					{
						$visit_date = date('Y-m-d', strtotime($old_form_data[0]['vizit_date']));
						$old_form_data[0]['vizit_date'] = $visit_date;
						$old_form_data[0]['visit_date'] = date("d.m.Y", strtotime($visit_date));

						$old_form_data[0]['kvno_global_text'] = $kvno_global_values[$old_form_data[0]['kvno_global']];
						$old_form_data[0]['kvno_medizini_a_text'] = $kvno_medizini[$old_form_data[0]['kvno_medizini_a']];
					}

//				processing incoming data
//				create start_date end_date from hour - minute fields
					if(count($new_visit_form_data) > 0)
					{
						$visit_date = date('Y-m-d', strtotime($new_visit_form_data['vizit_date']));

						$start = $visit_date . ' ' . $new_visit_form_data['kvno_begin_date_h'] . ':' . $new_visit_form_data['kvno_begin_date_m'] . ':00';
						$end = $visit_date . ' ' . $new_visit_form_data['kvno_end_date_h'] . ':' . $new_visit_form_data['kvno_end_date_m'] . ':00';

						$new_visit_form_data['start_date'] = $start;
						$new_visit_form_data['end_date'] = $end;

						$new_visit_form_data['vizit_date'] = date('Y-m-d', strtotime($new_visit_form_data['vizit_date']));
						$new_visit_form_data['visit_date'] = date('d.m.Y', strtotime($new_visit_form_data['vizit_date']));
					}

					//processing old data against new data
					foreach($old_form_data[0] as $k_saved_data => $v_saved_data)
					{
						if(!in_array($k_saved_data, $db_fields_to_exclude))
						{
							if(array_key_exists($k_saved_data, $new_visit_form_data))
							{
								//do checks
								//handle array radios
								if(is_array($new_visit_form_data[$k_saved_data]) && ($k_saved_data == 'kvno_ecog' || $k_saved_data == 'kvno_global'))
								{
									$new_visit_form_data[$k_saved_data] = $new_visit_form_data[$k_saved_data][0];
								}

								//add mapped values to new data array
								if($kvno_global_values[$new_visit_form_data[$k_saved_data]] && ($k_saved_data == 'kvno_global' || $k_saved_data == 'kvno_medizini_a'))
								{
									$new_visit_form_data[$k_saved_data . '_text'] = $kvno_global_values[$new_visit_form_data[$k_saved_data]];
								}

								//handle simple diff bewteen db and post values
								if($new_visit_form_data[$k_saved_data] != $v_saved_data && $k_saved_data != 'kvno_global' && $k_saved_data != 'kvno_medizini_a' && !in_array($k_saved_data . '_text', $field2data))
								{
									$changed_data[$k_saved_data]['old'] = $v_saved_data;
									$changed_data[$k_saved_data]['new'] = $new_visit_form_data[$k_saved_data];
								}
								//compare mapped values (check db values against post values and show coresponding mapped value)
								else if($new_visit_form_data[$k_saved_data] != $v_saved_data && ($k_saved_data == 'kvno_global' || $k_saved_data == 'kvno_medizini_a'))
								{
									$changed_data[$k_saved_data]['old'] = $old_form_data[0][$k_saved_data . '_text'];
									$changed_data[$k_saved_data]['new'] = $new_visit_form_data[$k_saved_data . '_text'];
								}

								if(array_key_exists($k_saved_data . '_text', $field2data) && $new_visit_form_data[$k_saved_data] != $v_saved_data)
								{
									$changed_data[$k_saved_data]['old'] = $korp_befund[$v_saved_data];
									$changed_data[$k_saved_data]['new'] = $korp_befund[$new_visit_form_data[$k_saved_data]];
								}
							}
						}

						$new_start_ts = strtotime($new_visit_form_data['start_date']);
						$new_end_ts = strtotime($new_visit_form_data['end_date']);

						$old_start_ts = strtotime($old_form_data[0]['start_date']);
						$old_end_ts = strtotime($old_form_data[0]['end_date']);

						if($new_start_ts != $old_start_ts || $new_end_ts != $old_end_ts)
						{
							$changed_data['visit_period']['old'] = date('H:i', $old_start_ts) . ' - ' . date('H:i d.m.Y', $old_end_ts);
							$changed_data['visit_period']['new'] = date('H:i', $new_start_ts) . ' - ' . date('H:i d.m.Y', $new_end_ts);
						}
					}

					//process changes and build final query array
					foreach($changed_data as $k_field => $v_field_data)
					{
						if(array_key_exists($k_field, $field2data))
						{
							if(strlen($v_field_data['old']) > 0)
							{
								$course_title_dif = $v_field_data['old'] . ' -> ' . $v_field_data['new'];
							}
							else
							{
								$course_title_dif = $v_field_data['new'];
							}

							if($course_title_dif)
							{
								$course_title = str_replace('[' . $k_field . ']', $course_title_dif, $field2data[$k_field]['string']);
							}

							$records[] = array(
								'ipid' => $ipid,
								'user_id' => $userid,
								'course_date' => date('Y-m-d H:i:d', time()),
								'course_type' => Pms_CommonData::aesEncrypt($field2data[$k_field]['shortcut'], Zend_Registry::get('salt')),
								'course_title' => Pms_CommonData::aesEncrypt($course_title, Zend_Registry::get('salt')),
								'tabname' => Pms_CommonData::aesEncrypt("kvno_nurse_visit", Zend_Registry::get('salt'))
							);
						}
					}

					break;

				case "wl_doctor_visit":

					$db_fields_to_exclude = array(
						'id',
						'ipid',
						'quality',
						'kvno_peg',
						'kvno_peg_text',
						'kvno_port',
						'kvno_port_text',
						'kvno_pumps',
						'kvno_pumps_text',
						'kvno_dk',
						'kvno_dk_text',
						'kvno_kunstliche',
						'kvno_kunstliche_text',
						'kvno_darm',
						'kvno_darm_text',
						'kvno_blase',
						'kvno_blase_text',
						'kvno_luftrohre',
						'kvno_luftrohre_text',
						'kvno_ablaufsonde',
						'kvno_ablaufsonde_text',
						'kvno_medizini_b',
						'sub_user',
						'isdelete',
						'create_date',
						'change_date',
						'create_user',
						'change_user',
					);

					$kvno_global_values = array("1" => "schlechter", "2" => "besser", "3" => "gleich");
					$kvno_medizini = array(1 => "wie geplant gelaufen", 2 => "werden fortgesetzt", 3 => "nicht wie geplant verlaufen");

					$korp_befund = array(1 => "krankheitsentsprechend", 2 => "Befund");

					$field2data = array(
						'visit_period' => array('shortcut' => 'K', 'string' => 'Besuchszeit: [visit_period]'),
						'fahrtzeit' => array('shortcut' => 'K', 'string' => 'Fahrtzeit: [fahrtzeit]'),
						'kvno_port_text' => array('shortcut' => 'K', 'string' => 'Port - nicht ok: [kvno_port_text]'),
						'kvno_kunstliche_text' => array('shortcut' => 'K', 'string' => 'besonderer Aus-/ Eingang ([kunstlichemore])- nicht ok: [kvno_kunstliche_text]'),
						'kopf' => array('shortcut' => 'B', 'string' => 'Kopf: [kopf]'),
						'thorax' => array('shortcut' => 'B', 'string' => 'Thorax: [thorax]'),
						'abdomen' => array('shortcut' => 'B', 'string' => 'Abdomen: [abdomen]'),
						'extremitaten' => array('shortcut' => 'B', 'string' => 'Extremitaten: [extremitaten]'),
						'haut_wunden' => array('shortcut' => 'B', 'string' => 'Haut/Wunden: [haut_wunden]'),
						'neurologisch_psychiatrisch' => array('shortcut' => 'B', 'string' => 'Neurologisch / Psychiatrisch: [neurologisch_psychiatrisch]'),
						'kvno_ablaufsonde_text' => array('shortcut' => 'K', 'string' => 'Ablaufsonde  - nicht ok: [kvno_ablaufsonde_text]'),
						'kopf_text' => array('shortcut' => 'B', 'string' => 'Kopf: [kopf_text]'),
						'thorax_text' => array('shortcut' => 'B', 'string' => 'Thorax: [thorax_text]'),
						'abdomen_text' => array('shortcut' => 'B', 'string' => 'Abdomen: [abdomen_text]'),
						'extremitaten_text' => array('shortcut' => 'B', 'string' => 'Extremitaten: [extremitaten_text]'),
						'haut_wunden_text' => array('shortcut' => 'B', 'string' => 'Haut/Wunden: [haut_wunden_text]'),
						'neurologisch_psychiatrisch_text' => array('shortcut' => 'B', 'string' => 'Neurologisch / Psychiatrisch: [neurologisch_psychiatrisch_text]'),
						'kvno_sonstiges' => array('shortcut' => 'K', 'string' => 'Sonstiges / Kommentar: [kvno_sonstiges]'),
						'kvno_global' => array('shortcut' => 'K', 'string' => 'Globale Einschätzung: [kvno_global].'),
						'comment_apotheke' => array('shortcut' => 'Q', 'string' => 'Kommentar Medikation / Pumpe / Apotheke: [comment_apotheke]'),
						'kvno_medizini_a' => array('shortcut' => 'K', 'string' => 'Medizinische Maßnahmen: [kvno_medizini_a]'),
					);

//				get old form data
					$old_form_data = KvnoDoctor::getDoctorVisits(array($visit_form_id));

//				processing old saved data
					if(count($old_form_data) > 0)
					{
						$visit_date = date('Y-m-d', strtotime($old_form_data[0]['vizit_date']));
						$old_form_data[0]['vizit_date'] = $visit_date;
						$old_form_data[0]['visit_date'] = date("d.m.Y", strtotime($visit_date));

						$old_form_data[0]['kvno_global_text'] = $kvno_global_values[$old_form_data[0]['kvno_global']];
						$old_form_data[0]['kvno_medizini_a_text'] = $kvno_medizini[$old_form_data[0]['kvno_medizini_a']];
					}

//				processing incoming data
//				create start_date end_date from hour - minute fields
					if(count($new_visit_form_data) > 0)
					{
						$visit_date = date('Y-m-d', strtotime($new_visit_form_data['vizit_date']));

						$start = $visit_date . ' ' . $new_visit_form_data['kvno_begin_date_h'] . ':' . $new_visit_form_data['kvno_begin_date_m'] . ':00';
						$end = $visit_date . ' ' . $new_visit_form_data['kvno_end_date_h'] . ':' . $new_visit_form_data['kvno_end_date_m'] . ':00';

						$new_visit_form_data['start_date'] = $start;
						$new_visit_form_data['end_date'] = $end;

						$new_visit_form_data['vizit_date'] = date('Y-m-d', strtotime($new_visit_form_data['vizit_date']));
						$new_visit_form_data['visit_date'] = date('d.m.Y', strtotime($new_visit_form_data['vizit_date']));
					}

					//processing old data against new data
					foreach($old_form_data[0] as $k_saved_data => $v_saved_data)
					{
						if(!in_array($k_saved_data, $db_fields_to_exclude))
						{
							if(array_key_exists($k_saved_data, $new_visit_form_data))
							{
								//do checks
								//handle array radios
								if(is_array($new_visit_form_data[$k_saved_data]) && ($k_saved_data == 'kvno_ecog' || $k_saved_data == 'kvno_global'))
								{
									$new_visit_form_data[$k_saved_data] = $new_visit_form_data[$k_saved_data][0];
								}

								//add mapped values to new data array
								if($kvno_global_values[$new_visit_form_data[$k_saved_data]] && ($k_saved_data == 'kvno_global' || $k_saved_data == 'kvno_medizini_a'))
								{
									$new_visit_form_data[$k_saved_data . '_text'] = $kvno_global_values[$new_visit_form_data[$k_saved_data]];
								}

								//handle simple diff bewteen db and post values
								if($new_visit_form_data[$k_saved_data] != $v_saved_data && $k_saved_data != 'kvno_global' && $k_saved_data != 'kvno_medizini_a' && !in_array($k_saved_data . '_text', $field2data))
								{
									$changed_data[$k_saved_data]['old'] = $v_saved_data;
									$changed_data[$k_saved_data]['new'] = $new_visit_form_data[$k_saved_data];
								}
								//compare mapped values (check db values against post values and show coresponding mapped value)
								else if($new_visit_form_data[$k_saved_data] != $v_saved_data && ($k_saved_data == 'kvno_global' || $k_saved_data == 'kvno_medizini_a'))
								{
									$changed_data[$k_saved_data]['old'] = $old_form_data[0][$k_saved_data . '_text'];
									$changed_data[$k_saved_data]['new'] = $new_visit_form_data[$k_saved_data . '_text'];
								}

								if(array_key_exists($k_saved_data . '_text', $field2data) && $new_visit_form_data[$k_saved_data] != $v_saved_data)
								{
									$changed_data[$k_saved_data]['old'] = $korp_befund[$v_saved_data];
									$changed_data[$k_saved_data]['new'] = $korp_befund[$new_visit_form_data[$k_saved_data]];
								}
							}
						}

						$new_start_ts = strtotime($new_visit_form_data['start_date']);
						$new_end_ts = strtotime($new_visit_form_data['end_date']);

						$old_start_ts = strtotime($old_form_data[0]['start_date']);
						$old_end_ts = strtotime($old_form_data[0]['end_date']);

						if($new_start_ts != $old_start_ts || $new_end_ts != $old_end_ts)
						{
							$changed_data['visit_period']['old'] = date('H:i', $old_start_ts) . ' - ' . date('H:i d.m.Y', $old_end_ts);
							$changed_data['visit_period']['new'] = date('H:i', $new_start_ts) . ' - ' . date('H:i d.m.Y', $new_end_ts);
						}
					}

					//process changes and build final query array
					foreach($changed_data as $k_field => $v_field_data)
					{
						if(array_key_exists($k_field, $field2data))
						{
							if(strlen($v_field_data['old']) > 0)
							{
								$course_title_dif = $v_field_data['old'] . ' -> ' . $v_field_data['new'];
							}
							else
							{
								$course_title_dif = $v_field_data['new'];
							}

							if($course_title_dif)
							{
								$course_title = str_replace('[' . $k_field . ']', $course_title_dif, $field2data[$k_field]['string']);
							}

							$records[] = array(
								'ipid' => $ipid,
								'user_id' => $userid,
								'course_date' => date('Y-m-d H:i:d', time()),
								'course_type' => Pms_CommonData::aesEncrypt($field2data[$k_field]['shortcut'], Zend_Registry::get('salt')),
								'course_title' => Pms_CommonData::aesEncrypt($course_title, Zend_Registry::get('salt')),
								'tabname' => Pms_CommonData::aesEncrypt("wl_doctor_visit", Zend_Registry::get('salt'))
							);
						}
					}

					break;

				case "wl_nurse_visit":

					$db_fields_to_exclude = array(
						'id',
						'ipid',
						'quality',
						'kvno_peg',
						'kvno_peg_text',
						'kvno_port',
						'kvno_port_text',
						'kvno_pumps',
						'kvno_pumps_text',
						'kvno_dk',
						'kvno_dk_text',
						'kvno_kunstliche',
						'kvno_kunstliche_text',
						'kvno_darm',
						'kvno_darm_text',
						'kvno_blase',
						'kvno_blase_text',
						'kvno_luftrohre',
						'kvno_luftrohre_text',
						'kvno_ablaufsonde',
						'kvno_ablaufsonde_text',
						'kvno_medizini2',
						'added_from',
						'sub_user',
						'isdelete',
						'create_date',
						'change_date',
						'create_user',
						'change_user',
					);

					$kvno_global_values = array("1" => "schlechter", "2" => "besser", "3" => "gleich");
					$kvno_medizini = array(1 => "wie geplant gelaufen", 2 => "werden fortgesetzt", 3 => "nicht wie geplant verlaufen");

					$field2data = array(
						'visit_period' => array('shortcut' => 'K', 'string' => 'Besuchszeit: [visit_period]'),
						'fahrtzeit' => array('shortcut' => 'K', 'string' => 'Fahrtzeit: [fahrtzeit]'),
						'kvno_sonstiges' => array('shortcut' => 'K', 'string' => 'Sonstiges / Kommentar: [kvno_sonstiges]'),
						'kvno_global' => array('shortcut' => 'K', 'string' => 'Globale Einschätzung: [kvno_global].'),
						'comment_apotheke' => array('shortcut' => 'Q', 'string' => 'Kommentar Medikation / Pumpe / Apotheke: [comment_apotheke]'),
						'kvno_medizini1' => array('shortcut' => 'K', 'string' => 'Medizinische Maßnahmen: [kvno_medizini1]'),
					);

//				1. get old form data
					$old_form_data = KvnoNurse::getNurseVisits(array($visit_form_id));

//				processing old saved data
					if(count($old_form_data) > 0)
					{
						$visit_date = date('Y-m-d', strtotime($old_form_data[0]['vizit_date']));
						$old_form_data[0]['vizit_date'] = $visit_date;
						$old_form_data[0]['visit_date'] = date("d.m.Y", strtotime($visit_date));

						$old_form_data[0]['kvno_global_text'] = $kvno_global_values[$old_form_data[0]['kvno_global']];
						$old_form_data[0]['kvno_medizini1_text'] = $kvno_medizini[$old_form_data[0]['kvno_medizini1']];
					}

//				processing incoming data
//				create start_date end_date from hour - minute fields
					if(count($new_visit_form_data) > 0)
					{
						$visit_date = date('Y-m-d', strtotime($new_visit_form_data['vizit_date']));

						$start = $visit_date . ' ' . $new_visit_form_data['kvno_begin_date_h'] . ':' . $new_visit_form_data['kvno_begin_date_m'] . ':00';
						$end = $visit_date . ' ' . $new_visit_form_data['kvno_end_date_h'] . ':' . $new_visit_form_data['kvno_end_date_m'] . ':00';

						$new_visit_form_data['start_date'] = $start;
						$new_visit_form_data['end_date'] = $end;

						$new_visit_form_data['vizit_date'] = date('Y-m-d', strtotime($new_visit_form_data['vizit_date']));
						$new_visit_form_data['visit_date'] = date('d.m.Y', strtotime($new_visit_form_data['vizit_date']));
					}

					//processing old data against new data
					foreach($old_form_data[0] as $k_saved_data => $v_saved_data)
					{
						if(!in_array($k_saved_data, $db_fields_to_exclude))
						{
							if(array_key_exists($k_saved_data, $new_visit_form_data))
							{
								//do checks
								//handle array radios
								if(is_array($new_visit_form_data[$k_saved_data]) && ($k_saved_data == 'kvno_ecog' || $k_saved_data == 'kvno_global'))
								{
									$new_visit_form_data[$k_saved_data] = $new_visit_form_data[$k_saved_data][0];
								}

								//add mapped values to new data array
								if($kvno_global_values[$new_visit_form_data[$k_saved_data]] && ($k_saved_data == 'kvno_global' || $k_saved_data == 'kvno_medizini1'))
								{
									$new_visit_form_data[$k_saved_data . '_text'] = $kvno_global_values[$new_visit_form_data[$k_saved_data]];
								}

								//handle simple diff bewteen db and post values
								if($new_visit_form_data[$k_saved_data] != $v_saved_data && $k_saved_data != 'kvno_global' && $k_saved_data != 'kvno_medizini1' && !in_array($k_saved_data . '_text', $field2data))
								{
									$changed_data[$k_saved_data]['old'] = $v_saved_data;
									$changed_data[$k_saved_data]['new'] = $new_visit_form_data[$k_saved_data];
								}
								//compare mapped values (check db values against post values and show coresponding mapped value)
								else if($new_visit_form_data[$k_saved_data] != $v_saved_data && ($k_saved_data == 'kvno_global' || $k_saved_data == 'kvno_medizini1'))
								{
									$changed_data[$k_saved_data]['old'] = $old_form_data[0][$k_saved_data . '_text'];
									$changed_data[$k_saved_data]['new'] = $new_visit_form_data[$k_saved_data . '_text'];
								}
							}
						}

						$new_start_ts = strtotime($new_visit_form_data['start_date']);
						$new_end_ts = strtotime($new_visit_form_data['end_date']);

						$old_start_ts = strtotime($old_form_data[0]['start_date']);
						$old_end_ts = strtotime($old_form_data[0]['end_date']);

						if($new_start_ts != $old_start_ts || $new_end_ts != $old_end_ts)
						{
							$changed_data['visit_period']['old'] = date('H:i', $old_start_ts) . ' - ' . date('H:i d.m.Y', $old_end_ts);
							$changed_data['visit_period']['new'] = date('H:i', $new_start_ts) . ' - ' . date('H:i d.m.Y', $new_end_ts);
						}
					}

					//process changes and build final query array
					foreach($changed_data as $k_field => $v_field_data)
					{
						if(array_key_exists($k_field, $field2data))
						{
							if(strlen($v_field_data['old']) > 0)
							{
								$course_title_dif = $v_field_data['old'] . ' -> ' . $v_field_data['new'];
							}
							else
							{
								$course_title_dif = $v_field_data['new'];
							}

							if($course_title_dif)
							{
								$course_title = str_replace('[' . $k_field . ']', $course_title_dif, $field2data[$k_field]['string']);
							}

							$records[] = array(
								'ipid' => $ipid,
								'user_id' => $userid,
								'course_date' => date('Y-m-d H:i:d', time()),
								'course_type' => Pms_CommonData::aesEncrypt($field2data[$k_field]['shortcut'], Zend_Registry::get('salt')),
								'course_title' => Pms_CommonData::aesEncrypt($course_title, Zend_Registry::get('salt')),
								'tabname' => Pms_CommonData::aesEncrypt($visit_form_type, Zend_Registry::get('salt'))
							);
						}
					}


					break;

				case "bayern_doctor_visit":
					$db_fields_to_exclude = array(
						'id',
						'ipid',
						'quality',
						'sub_user',
						'isdelete',
						'create_date',
						'change_date',
						'create_user',
						'change_user',
					);

					$global_values = array("1" => "schlechter", "2" => "besser", "3" => "gleich");
					$medizini = array(1 => "wie geplant gelaufen", 2 => "werden fortgesetzt", 3 => "nicht wie geplant verlaufen");

					$korp_befund = array(1 => "Ohne Befund", 2 => "Befund");

					$field2data = array(
						'visit_period' => array('shortcut' => 'K', 'string' => 'Besuchszeit: [visit_period]'),
						'fahrtzeit' => array('shortcut' => 'K', 'string' => 'Fahrtzeit: [fahrtzeit]'),
						'kopf' => array('shortcut' => 'B', 'string' => 'Kopf: [kopf]'),
						'thorax' => array('shortcut' => 'B', 'string' => 'Thorax: [thorax]'),
						'abdomen' => array('shortcut' => 'B', 'string' => 'Abdomen: [abdomen]'),
						'extremitaten' => array('shortcut' => 'B', 'string' => 'Extremitaten: [extremitaten]'),
						'haut_wunden' => array('shortcut' => 'B', 'string' => 'Haut/Wunden: [haut_wunden]'),
						'neurologisch_psychiatrisch' => array('shortcut' => 'B', 'string' => 'Neurologisch / Psychiatrisch: [neurologisch_psychiatrisch]'),
						'ablaufsonde_text' => array('shortcut' => 'K', 'string' => 'Ablaufsonde  - nicht ok: [ablaufsonde_text]'),
						'kopf_text' => array('shortcut' => 'B', 'string' => 'Kopf: [kopf_text]'),
						'thorax_text' => array('shortcut' => 'B', 'string' => 'Thorax: [thorax_text]'),
						'abdomen_text' => array('shortcut' => 'B', 'string' => 'Abdomen: [abdomen_text]'),
						'extremitaten_text' => array('shortcut' => 'B', 'string' => 'Extremitaten: [extremitaten_text]'),
						'haut_wunden_text' => array('shortcut' => 'B', 'string' => 'Haut/Wunden: [haut_wunden_text]'),
						'neurologisch_psychiatrisch_text' => array('shortcut' => 'B', 'string' => 'Neurologisch / Psychiatrisch: [neurologisch_psychiatrisch_text]'),
						'sonstiges' => array('shortcut' => 'K', 'string' => 'Sonstiges / Kommentar: [sonstiges]'),
						'global' => array('shortcut' => 'K', 'string' => 'Globale Einschätzung: [global].'),
						'comment_apotheke' => array('shortcut' => 'Q', 'string' => 'Kommentar Medikation / Pumpe / Apotheke: [comment_apotheke]'),
						'case_history' => array('shortcut' => 'K', 'string' => 'Anamnese: [case_history]'),
						'conversation_phonecall' => array('shortcut' => 'K', 'string' => 'Gespräch / Telefonat: [conversation_phonecall]'),
					);

//				get old form data
					$old_form_data = BayernDoctorVisit::get_doctor_visits(array($visit_form_id));

//				processing old saved data
					if(count($old_form_data) > 0)
					{
						$visit_date = date('Y-m-d', strtotime($old_form_data[0]['visit_date']));

						$old_form_data[0]['visit_date'] = date("d.m.Y", strtotime($visit_date));

						$old_form_data[0]['global_text'] = $global_values[$old_form_data[0]['global']];
					}

//				processing incoming data
//				create start_date end_date from hour - minute fields
					if(count($new_visit_form_data) > 0)
					{
						$visit_date = date('Y-m-d', strtotime($new_visit_form_data['visit_date']));

						$start = $visit_date . ' ' . $new_visit_form_data['begin_date_h'] . ':' . $new_visit_form_data['begin_date_m'] . ':00';
						$end = $visit_date . ' ' . $new_visit_form_data['end_date_h'] . ':' . $new_visit_form_data['end_date_m'] . ':00';

						$new_visit_form_data['start_date'] = $start;
						$new_visit_form_data['end_date'] = $end;


						$new_visit_form_data['visit_date'] = date('d.m.Y', strtotime($new_visit_form_data['visit_date']));
					}

					//processing old data against new data
					foreach($old_form_data[0] as $k_saved_data => $v_saved_data)
					{
						if(!in_array($k_saved_data, $db_fields_to_exclude))
						{
							if(array_key_exists($k_saved_data, $new_visit_form_data))
							{
								//do checks
								//handle array radios
								if(is_array($new_visit_form_data[$k_saved_data]) && ($k_saved_data == 'ecog' || $k_saved_data == 'global'))
								{
									$new_visit_form_data[$k_saved_data] = $new_visit_form_data[$k_saved_data][0];
								}

								//add mapped values to new data array
								if($global_values[$new_visit_form_data[$k_saved_data]] && $k_saved_data == 'global')
								{
									$new_visit_form_data[$k_saved_data . '_text'] = $global_values[$new_visit_form_data[$k_saved_data]];
								}

								//handle simple diff bewteen db and post values
								if($new_visit_form_data[$k_saved_data] != $v_saved_data && $k_saved_data != 'global' && !in_array($k_saved_data . '_text', $field2data))
								{
									$changed_data[$k_saved_data]['old'] = $v_saved_data;
									$changed_data[$k_saved_data]['new'] = $new_visit_form_data[$k_saved_data];
								}
								//compare mapped values (check db values against post values and show coresponding mapped value)
								else if($new_visit_form_data[$k_saved_data] != $v_saved_data && $k_saved_data == 'global')
								{
									$changed_data[$k_saved_data]['old'] = $old_form_data[0][$k_saved_data . '_text'];
									$changed_data[$k_saved_data]['new'] = $new_visit_form_data[$k_saved_data . '_text'];
								}

								if(array_key_exists($k_saved_data . '_text', $field2data) && $new_visit_form_data[$k_saved_data] != $v_saved_data)
								{
									$changed_data[$k_saved_data]['old'] = $korp_befund[$v_saved_data];
									$changed_data[$k_saved_data]['new'] = $korp_befund[$new_visit_form_data[$k_saved_data]];
								}
							}
						}

						$new_start_ts = strtotime($new_visit_form_data['start_date']);
						$new_end_ts = strtotime($new_visit_form_data['end_date']);

						$old_start_ts = strtotime($old_form_data[0]['start_date']);
						$old_end_ts = strtotime($old_form_data[0]['end_date']);

						if($new_start_ts != $old_start_ts || $new_end_ts != $old_end_ts)
						{
							$changed_data['visit_period']['old'] = date('H:i', $old_start_ts) . ' - ' . date('H:i d.m.Y', $old_end_ts);
							$changed_data['visit_period']['new'] = date('H:i', $new_start_ts) . ' - ' . date('H:i d.m.Y', $new_end_ts);
						}
					}

					//process changes and build final query array
					foreach($changed_data as $k_field => $v_field_data)
					{
						if(array_key_exists($k_field, $field2data))
						{
							if(strlen($v_field_data['old']) > 0)
							{
								$course_title_dif = $v_field_data['old'] . ' -> ' . $v_field_data['new'];
							}
							else
							{
								$course_title_dif = $v_field_data['new'];
							}

							if($course_title_dif)
							{
								$course_title = str_replace('[' . $k_field . ']', $course_title_dif, $field2data[$k_field]['string']);
							}

							$records[] = array(
								'ipid' => $ipid,
								'user_id' => $userid,
								'course_date' => date('Y-m-d H:i:d', time()),
								'course_type' => Pms_CommonData::aesEncrypt($field2data[$k_field]['shortcut'], Zend_Registry::get('salt')),
								'course_title' => Pms_CommonData::aesEncrypt($course_title, Zend_Registry::get('salt')),
//							'course_title' => $course_title,
								'tabname' => Pms_CommonData::aesEncrypt("wl_doctor_visit", Zend_Registry::get('salt'))
							);
						}
					}

					break;


				default:
					break;
			}

			if($records)
			{
				$collection = new Doctrine_Collection('PatientCourse');
				$collection->fromArray($records);
				$collection->save();
			}
		}

		private function symptomatology_changes($ipid, $visit_form_id, $post)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			if(strlen($post['vizit_date']) > '0')
			{
				$done_date = date('Y-m-d H:i:s', strtotime($post['vizit_date'] . ' ' . $post['kvno_begin_date_h'] . ':' . $post['kvno_begin_date_m'] . ':' . date('s', time())));
			}
			else
			{
				$done_date = date('Y-m-d H:i:s', strtotime($post['visit_date'] . ' ' . $post['begin_date_h'] . ':' . $post['begin_date_m'] . ':' . date('s', time())));
			}

			foreach($post['input_value'] as $symp_id => $val)
			{
				if(strlen($val) > 0 && $post['entered_value'][$symp_id] != $val)
				{
					if(strlen($post['entered_value'][$symp_id]) == '0')
					{
						$old_value = '';
					}
					else
					{
						$old_value = $post['entered_value'][$symp_id] . '->';
					}

					if(strlen($val) == '0')
					{
						$new_value = '';
					}
					else
					{
						$new_value = $val;
					}

					$tocourse['input_value'] = $old_value . $new_value;
					$tocourse['second_value'] = $post['comment'][$symp_id];
					$tocourse['symptid'] = $symp_id;
					$tocourse['setid'] = 1;
					$tocourse['iskvno'] = '0';
					$coursecomment[] = $tocourse;
				}
			}

			if($coursecomment)
			{
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("S");
				$cust->isserialized = 1;
				$cust->user_id = $userid;
				$cust->course_title = Pms_CommonData::aesEncrypt(serialize($coursecomment));
				$cust->done_date = $done_date;
				$cust->done_name = Pms_CommonData::aesEncrypt($tab_name = "");
				$cust->done_id = $result;
				$cust->save();
			}
		}

		private function generate_receipt($clientid, $userid, $ipid, $epid, $patientarr, $pdf_background_type = false)
		{

//		1. get all asigned users qpa mapping
			$assigned_users = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('clientid =' . $clientid)
				->andWhere('epid = "' . $epid . '"');
			$assigned_users_res = $assigned_users->fetchArray();

			$a_users[] = '99999999999';
			foreach($assigned_users_res as $k_au => $v_au)
			{
				$a_users[] = $v_au['userid'];
			}
//		2. get assigned users details + current submiting user details
			$users_det_q = Doctrine_Query::create()
				->select('*')
				->from('User')
				->whereIn('id', $a_users)
				->andWhere('isdelete="0"');
			$users_det_res = $users_det_q->fetchArray();

			$c_user = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('id="' . $userid . '"')
				->andWhere('isdelete="0"');
			$c_user_res = $c_user->fetchArray();


//		3.get client groups
			$usergroup = new Usergroup();
			$c_groups = $usergroup->getClientGroups($clientid);
			foreach($c_groups as $k_gr => $v_gr)
			{
				$client_groups[$v_gr['id']] = $v_gr['groupname'];
			}

//		4. loop through users and add group data
			foreach($users_det_res as $k_as_user => $v_as_user)
			{
				$users_det_res[$k_as_user]['groupname'] = $client_groups[$v_as_user['groupid']];
			}

//		5. get patient family doctor
			if($patientarr['familydoc_id'] > 0)
			{
				$fdoc = Doctrine_Core::getTable('FamilyDoctor')->find($patientarr['familydoc_id']);
				if($fdoc)
				{
					$docarr = $fdoc->toArray();
					$doc_title = "";
					if($docarr['title'] == "" || $docarr['title'] == " ")
					{
						$doc_title = $docarr['title'];
					}
					else
					{
						$doc_title = $docarr['title'] . " ";
					}
				}

				if(empty($docarr['last_name']) && empty($docarr['first_name']) && empty($docarr['street1']) && empty($docarr['zip']) && empty($docarr['city']))
				{

					$doctor_letter_data['address'] = "";
				}
				else
				{
					$doctor_letter_data['address'] = $doc_title . "" . trim($docarr['first_name']) . " " . trim($docarr['last_name']) . "  <br />" . $docarr['street1'] . "<br />" . $docarr['zip'] . " " . $docarr['city'];
				}
			}
			else
			{
				$doctor_letter_data['address'] = "";
			}

			if($_POST['vizit_date'])
			{
				$visit_date = $_POST['vizit_date'];
			}
			else
			{
				$visit_date = $_POST['visit_date'];
			}
			if($_POST['kvno_sonstiges'])
			{
				$comment = $_POST['kvno_sonstiges'];
			}
			else
			{
				$comment = $_POST['sonstiges'];
			}
			$doctor_letter_data['clientid'] = $clientid;
			$doctor_letter_data['fm'] = $patientarr['familydoc_id'];
			$doctor_letter_data['birthd'] = $patientarr['birthd'];
			$doctor_letter_data['lastname'] = $patientarr['last_name'];
			$doctor_letter_data['firstname'] = $patientarr['first_name'];
			$doctor_letter_data['assigned_users_details'] = $users_det_res;
			$doctor_letter_data['curent_user'] = $c_user_res;
			$doctor_letter_data['visit_date'] = $visit_date;
			$doctor_letter_data['comment'] = $comment;
			$doctor_letter_data['ipid'] = $ipid;

			$this->generate_pdf($doctor_letter_data, 'wl_doctor_letter', "wldoctorletterpdf.html", $pdf_background_type);
		}

		public function nierecordingformAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$patientmaster = new PatientMaster();
			$form = new Application_Form_NieRecordingReport();
			$tm = new TabMenus();

			/* ------------------- Patient Data --------------------------------------- */
			$patient_details = $patientmaster->getMasterData($decid, 0);
			$admission_date = date('d.m.Y', strtotime($patient_details['admission_date']));

			$this->view->admission_date = $admission_date;
			$this->view->first_name = $patient_details['first_name'];
			$this->view->last_name = $patient_details['last_name'];
			$this->view->birthd = date('d.m.Y', strtotime($patient_details['birthd']));

			/* ------------------- Client Data--------------------------------------- */
			$clientdata = Pms_CommonData::getClientData($clientid);
			$client_details['client_name'] = $clientdata[0]['client_name'];
			$client_details['client_city'] = $clientdata[0]['city'];
			$client_details['client_street'] = $clientdata[0]['street1'];
			$client_details['client_zip'] = $clientdata[0]['postcode'];
			$client_details['client_phone'] = $clientdata[0]['phone'];
			$client_details['client_fax'] = $clientdata[0]['fax'];
			$client_details['client_email'] = $clientdata[0]['emailid'];

			$this->view->client_details = $client_details;

			if($this->getRequest()->isPost())
			{
				if($_POST['save'])
				{
					if(empty($_REQUEST['fid']))
					{
						$insert_data = $form->insert_data($_POST);
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
					}
					else
					{
						$update_data = $form->update_data($_POST, $_REQUEST['fid']);
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
					}
				}
				else if($_POST['pdf'])
				{
					$post = $_POST;
//					$post['admission_date'] = $admission_date;
					$post['admission_date'] = $_POST['admission_date'];
					$post['first_name'] = $patient_details['first_name'];
					$post['last_name'] = $patient_details['last_name'];
					$post['birthd'] = $patient_details['birthd'];
					$post['client_details'] = $client_details;
					$gen_pdf = $this->generate_pdf($post, 'nie_recordingreport', 'nie_recordingreport_pdf.html');
					exit;
				}
			}


			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->tabmenus = $tm->getMenuTabs();

			$drug_plan = new PatientDrugPlan();
			$medication = new Medication();
			$diagnosis_types = new DiagnosisType();
			$patient_diagnosis = new PatientDiagnosis();
			/* ------------------------------------------------ */

			if(strlen($_REQUEST['fid']) == 0)
			{
				//get normal patient medications
				$medications_arr = $drug_plan->getMedicationPlan($decid);

				//get patient iv medications
				$iv_medications_arr = $drug_plan->getivMedication($decid);

				//get  patient sc medications
				$sc_medications_arr = $drug_plan->getSchmerzpumpeMedicationall($decid);

				//get bedarf patient medications
				$bedarf_medications_arr = $drug_plan->getbedarfMedication($decid);

				$medication_master_ids[] = '999999999999999999';
				foreach($medications_arr as $k_medi_plan => $v_medi_plan)
				{
					$medication_master_ids[] = $v_medi_plan['medication_master_id'];
					$normal_medis_ids[] = $v_medi_plan['medication_master_id'];
					$medication_dosage[$v_medi_plan['medication_master_id']] = $v_medi_plan['dosage'];
				}

				foreach($iv_medications_arr as $k_iv_medi_plan => $v_iv_medi_plan)
				{
					$medication_master_ids[] = $v_iv_medi_plan['medication_master_id'];
					$iv_medis_ids[] = $v_iv_medi_plan['medication_master_id'];
					$iv_medication_dosage[$v_iv_medi_plan['medication_master_id']] = $v_iv_medi_plan['dosage'];
				}


				foreach($sc_medications_arr as $k_sc_medi_plan => $v_sc_medi_plan)
				{
					$medication_master_ids[] = $v_sc_medi_plan['medication_master_id'];
					$sc_medis_ids[] = $v_sc_medi_plan['medication_master_id'];
					$sc_medication_dosage[$v_sc_medi_plan['medication_master_id']] = $v_sc_medi_plan['dosage'];
				}

				foreach($bedarf_medications_arr as $k_bmedi_plan => $v_bmedi_plan)
				{
					$medication_master_ids[] = $v_bmedi_plan['medication_master_id'];
					$bedarf_medis_ids[] = $v_bmedi_plan['medication_master_id'];
					$bedarf_medication_dosage[$v_bmedi_plan['medication_master_id']] = $v_bmedi_plan['dosage'];
					$bedarf_medication_comment[$v_bmedi_plan['medication_master_id']] = $v_bmedi_plan['comments'];
				}

				$medication_master_ids = array_values(array_unique($medication_master_ids));
				$medications = $medication->getMedicationById($medication_master_ids);

				foreach($medications as $k_med => $v_med)
				{
					if(strlen($v_med['name']) > '0')
					{
						if(in_array($v_med['id'], $normal_medis_ids))
						{
							$medications_names['normal'][] = $v_med['name'];
							$medications_details['normal'][] = $v_med['name'] . ' (' . $medication_dosage[$v_med['id']] . ")";
						}
						if(in_array($v_med['id'], $iv_medis_ids))
						{
							$medications_names['normal'][] = $v_med['name'];
							$medications_details['normal'][] = $v_med['name'] . ' (' . $iv_medication_dosage[$v_med['id']] . ")";
						}
						if(in_array($v_med['id'], $sc_medis_ids))
						{
							$medications_names['normal'][] = $v_med['name'];
							$medications_details['normal'][] = $v_med['name'] . ' (' . $sc_medication_dosage[$v_med['id']] . ")";
						}
						if(in_array($v_med['id'], $bedarf_medis_ids))
						{
							$medications_names['bedarfs'][] = $v_med['name'];
							$medications_details['bedarfs'][] = $v_med['name'] . ' (' . $bedarf_medication_dosage[$v_med['id']] . ', ' . $bedarf_medication_comment[$v_med['id']] . ")";
						}
					}
				}

				$this->view->medication_text = $medications_details['normal'];
				$this->view->bedarfsmedication_text = $medications_details['bedarfs'];

				//get patient diagnosis
				$abbr = "'HD'";
				$diagnosis_array = $diagnosis_types->getDiagnosisTypes($clientid, $abbr);

				if(!$diagnosis_array[0]['id'])
				{
					$diagnosis_array[0]['id'] = 0;
				}

				foreach($diagnosis_array as $k_diag => $v_diag)
				{
					$diagnosis_ids[] = $v_diag['id'];
				}
				$diagnosis_ids = array_values(array_unique($diagnosis_ids));

				$p_diagnosis_array = $patient_diagnosis->getFinalData($ipid, implode(", ", $diagnosis_ids));

				foreach($p_diagnosis_array as $k_diag => $v_diag)
				{
					if(strlen($v_diag['diagnosis']) > 0)
					{
						if(strlen($v_diag['icdnumber']) > 0)
						{
							$icd_number = ' (' . $v_diag['icdnumber'] . ')';
						}
						else
						{
							$icd_number = '';
						}

						$dgn = $v_diag['diagnosis'] . $icd_number;
						$patient_main_diagnosis[] = trim($dgn);
					}
				}

				$this->view->diagnosis_text = $patient_main_diagnosis;
			}

			if($_REQUEST['fid'])
			{
				$nie_recording = new NieRecordingReport();
				$nie_recording_data = $nie_recording->getNieRecording($_REQUEST['fid'], $ipid);
				
				if($nie_recording_data[0]['admission_date'] != '0000-00-00 00:00:00')
				{
					$nie_recording_data['0']['admission_date'] = date('d.m.Y', strtotime($nie_recording_data[0]['admission_date']));
				}
				else
				{
					$nie_recording_data['0']['admission_date'] = $admission_date;
				}
				
				$this->retainValues($nie_recording_data[0]);
			}
		}

		public function stickers70x36Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ------------------------------------------------ */

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->lanr = $uarray['LANR'];
				$lanr = $uarray['LANR'];
			}
// 			$patientmaster = new PatientMaster();
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();

			$this->view->patientfirstname = $parr['first_name'];
			$this->view->patientlastname = $parr['last_name'];
			$this->view->street = $parr['street1'];
			$this->view->street2 = $parr['street2'];
			$this->view->zip = $parr['zip'];
			$this->view->city = $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}

			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();

			$this->view->bdate = $patientinfo['birthd'];

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				$this->view->getiuval = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
			}

			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_com_name = $healthinsu_array[0]['company_name'];
			$insurance_com_name = $healthinsu_array[0]['company_name'];

			if(empty($healthinsu_array[0]['institutskennzeichen']) || $healthinsu_array[0]['institutskennzeichen'] == 0)
			{
				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();
					$institutskennzeichen = $healtharray['iknumber'];
					$healthinsu_array[0]['institutskennzeichen'] = $institutskennzeichen;
				}
			}

			//due to some changes this kesse no is now the kasse number from patient stamdatem - 14-06-2012
			$this->view->kassen_no = $healthinsu_array[0]['kvk_no'];
			$kassen_no = $healthinsu_array[0]['kvk_no'];


			$this->view->insurance_ik_number = $healthinsu_array[0]['institutskennzeichen'];
			$insurance_ik_number = $healthinsu_array[0]['institutskennzeichen'];

			$st = new KbvKeytabs();
			$status_array = $st->getKbvKeytabs(1);

			$status_int_array = array("M" => "1", "F" => "3", "R" => "5");

			if($healthinsu_array[0]['insurance_status'] != "")
			{
				if(array_key_exists($healthinsu_array[0]['insurance_status'], $status_int_array))
				{
					$this->view->insurance_status = $status_int_array[$healthinsu_array[0]['insurance_status']];
					$insurance_status = $status_int_array[$healthinsu_array[0]['insurance_status']];
				}
				else
				{
					$this->view->insurance_status = "";
					$insurance_status = "";
				}
			}

			$datum = date('d.m.Y');
			$epid = Pms_CommonData::getEpidFromId($decid);

			$post = $_POST;
			$post['insurancecomname'] = $insurance_com_name;
			$post['geb'] = $insurance_ik_number;
			$post['patientfirstname'] = $parr['first_name'];
			$post['patientlastname'] = $parr['last_name'];
			$post['street'] = $parr['street1'];
			$post['street2'] = $parr['street2'];
			$post['zipcode'] = $parr['zip'];
			$post['patcity'] = $parr['city'];
			$post['telephone'] = $parr['phone'];
			$post['mobile'] = $parr['mobile'];
			$post['birthdate'] = $patientinfo['birthd'];
			$post['kassenno'] = $kassen_no;
			$post['insuranceno'] = $insurance_no;
			$post['status'] = $insurance_status;
			$post['betriebsstatten_nr'] = $betriebsstatten_nr;
			$post['lanr'] = $lanr;
			$post['datum'] = "";

			$this->generateformPdf(3, $post, 'Stickers70x36', "receipt_stickers70x36.html");
		}

		public function barthelscoreAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$patient_barthel = new PatientBarthel();
			$fileupload = new PatientFileUpload();
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			$patientname = $parr['last_name'] . ", " . $parr['first_name'];
			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* ------------------------------------------------ */
			if($_REQUEST['fid'])
			{
				//load custom form data
				$form_data = $patient_barthel->get_patient_form_data($_REQUEST['fid'], $ipid);
			}
			else
			{
				//load last form data
				$form_data = $patient_barthel->get_patient_lastform_data($ipid);
			}

			if($form_data)
			{
				$formid = $form_data['id'];
				$this->view->form_data = $form_data;
			}

			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['fid'] = $formid;
				$post['ipid'] = $ipid;
				$post['userid'] = $userid;
				$post['patientname'] = $patientname;
				$form = new Application_Form_PatientBarthel();
				if(empty($_POST['pdf']))
				{
					$post['barthel_preview'] = '0';

					//save || update
					if($_REQUEST['fid'])
					{
						$insert_data_id = $form->update_data($post);
					}
					else
					{
						$insert_data_id = $form->insert_data($post, $ipid);
					}

					$post['fid'] = $insert_data_id;
					
					$gen_pdf = $this->generate_pdf($post, 'barthelscore', 'barthelscore_pdf.html');

					//redirect after things where done
					$this->_redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
					exit;
				}
				else
				{	
					$post['barthel_preview'] = '1';
					$gen_pdf = $this->generate_pdf($post, 'barthelscore', 'barthelscore_pdf.html');
				}
			}

			/* ---------------GET FILES block DETAILS------------------ */
			$form_ids[] = '999999999';
			$form_ids[] = $_REQUEST['fid'];

			$barthel_score_files = $fileupload->getBarthelScoreFileData($ipid, $form_ids);

			$users_ids[] = '999999999';
			foreach($barthel_score_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}
			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);

			$this->view->form_files = $barthel_score_files;
		}

		public function zapvassessmentAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$assessment_type = 'admission';
			$userid = $logininfo->userid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			$this->view->epid = $epid;
			$this->view->clientid = $clientid;
			$this->view->id_record = $ipid;
			$this->view->ipid = $ipid;

			/* --------------Get patient info and menus--------------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* --------------Check permissions	---------------------------------------- */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			/* --------------Check if patient is discharge	---------------------------- */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* --------------Get form data ---------------------------------------------- */
			/* --------------Client information ---------------------------------------- */
			$client_data = Pms_CommonData::getClientData($clientid);

			$client['details']['team_name'] = $client_data[0]['team_name'];
			$this->view->client = $client;

			/* --------------Patient Information ---------------------------------------- */
// 			$patientmaster = new PatientMaster();
// 			$patientdetails = $patientmaster->getMasterData($decid, 0);
			$patientdetails = $patientmaster->get_patientMasterData();

			$patient['details']['last_name'] = $patientdetails['last_name'];
			$patient['details']['first_name'] = $patientdetails['first_name'];
			$patient['details']['birthd'] = $patientdetails['birthd'];
			$patient['details']['street'] = $patientdetails['street1'];
			$patient['details']['city'] = $patientdetails['city'];
			$patient['details']['phone'] = $patientdetails['phone'];
			$patient['details']['gender'] = $patientdetails['sex'];

			/* -------------------------------Patient admission falls ---------------------------------------- */
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);
			if(count($admissions[$ipid]['admissionDates']) != "0")
			{
				foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
				{
					if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}

					$patient_falls[$keyAdm]['start'] = date("Y-m-d", strtotime($admitedDate['date']));
					$patient_falls[$keyAdm]['end'] = date("Y-m-d", strtotime($dischargeDate));
				}
			}
			else
			{
				$patient_falls[0]['start'] = date("Y-m-d", strtotime($admissions[$ipid]['admission_date']));
				$patient_falls[0]['end'] = date("Y-m-d", strtotime($admissions[$ipid]['discharge_date']));
			}

			/* --------------Patient - saved files --------------------------------- */
			$fileupload = new PatientFileUpload();
			$contact_form_files = $fileupload->get_zapv_assessment_file_data($ipid, $assessment_type);
			$users_ids[] = '999999999';

			foreach($contact_form_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}

			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			$this->view->form_files = $contact_form_files;

			/* --------------Patient - Contact persons --------------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid, false);

			$patient['details']['legal_contact_person'] = '';
			$patient['details']['contact_persons'] = '';

			$legual_guardiens = array();
			foreach($pcs as $k => $pc_values)
			{
				if($pc_values['cnt_legalguardian'] == '1')
				{
					$legual_guardiens[] = $pc_values['id'];
					$patient['details']['legal_contact_person'] .= $pc_values['cnt_last_name'] . ', ' . $pc_values['cnt_first_name'];
				}
				else
				{
					$patient['details']['contact_persons'] .= $pc_values['cnt_last_name'] . ', ' . $pc_values['cnt_first_name'] . '; ';
				}
			}
			$patient['details']['contact_persons'] = substr($patient['details']['contact_persons'], 0, -2);

			/* --------------Patient -health insurance ---------------------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$patient['details']['health_insurance'] = $healthinsu_array[0]['company_name'];
			$patient['details']['health_insurance_no'] = $healthinsu_array[0]['insurance_no'];

			/* --------------Patient -sapv details ---------------------------------------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$sapv_array = $dropSapv->fetchArray();

			if(is_array($sapv_array) && !empty($sapv_array))
			{
				$latest_sapv = end($sapv_array);
				$form_data['first_sapv_till'] = date('d.m.Y', strtotime($sapv_array[0]['verordnungbis']));
				$form_data['first_sapv_type'] = explode(',', $sapv_array[0]['verordnet']);

				$form_data['latest_sapv_till'] = date('d.m.Y', strtotime($latest_sapv['verordnungbis']));
				$form_data['latest_sapv_type'] = explode(',', $latest_sapv['verordnet']);
			}

			/* --------------Patient - family doctor ---------------------------------------- */
			if($patientdetails['familydoc_id'] > 0)
			{
				$fdoc = Doctrine_Core::getTable('FamilyDoctor')->find($patientdetails['familydoc_id']);
				if($fdoc)
				{
					$docarr = $fdoc->toArray();
					$doc_title = "";
					if($docarr['title'] == "")
					{
						$doc_title = $docarr['title'];
					}
					else
					{
						$doc_title = $docarr['title'] . " ";
					}
				}

				if(empty($docarr['last_name']) && empty($docarr['first_name']) && empty($docarr['street1']) && empty($docarr['zip']) && empty($docarr['city']))
				{

					$patient['details']['family_doctor'] = "";
				}
				else
				{
					$patient['details']['family_doctor'] = $doc_title . "" . $docarr['last_name'] . ", " . $docarr['first_name'] . " <br />" . $docarr['street1'] . "<br />" . $docarr['zip'] . " " . $docarr['city'];

					$patient['details']['family_doctor_pdf']['title'] = $doc_title . ' ';
					$patient['details']['family_doctor_pdf']['last_name'] = $docarr['last_name'];
					$patient['details']['family_doctor_pdf']['first_name'] = $docarr['first_name'];
					$patient['details']['family_doctor_pdf']['street'] = $docarr['street1'];
					$patient['details']['family_doctor_pdf']['zip'] = $docarr['zip'];
					$patient['details']['family_doctor_pdf']['city'] = $docarr['city'];
				}
			}
			else
			{
				$patient['details']['family_doctor'] = "";
				$patient['details']['family_doctor_pdf'] = array();
			}


			/* --------------Patient Pfllegedienst---------------------------- */

			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($patientdetails['ipid']);

			$patient['details']['nurse_service'] = '';
			foreach($ppflearray as $kp => $pp)
			{
				$patient['details']['nurse_service'] .= htmlspecialchars($pp['nursing']) . "; ";
			}

			/* ------------------- Maindiagnosis & Sidediagnosis------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . "" . $valdia['icdnumber'];
						$comma = ", ";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$form_data['diagnosis'] = $diagnosis;
			}
			else
			{
				$form_data['diagnosis'] = "";
			}

			/* ------------------------------- Patient deleted in verlaufvisits ---------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhere('ipid = ?', $ipid)
				->andWhere('source_ipid = ""');
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['contact_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ------------------------------- get maste form types by action ---------------------- */
			$actions_array = array("5", "6");

			$types = Doctrine_Query::create()
				->select('*')
				->from('FormTypes')
				->where('clientid="' . $clientid . '"')
				->andWhere('isdelete = ?','0')
				->andWhereIn('action', $actions_array);
			$types_res = $types->fetchArray();

			$first_ids[] = '99999999999';
			$follow_ids[] = '99999999999';
			$form_type_ids[] = '99999999999';
			foreach($types_res as $k_ft => $v_ft)
			{
				if($v_ft['action'] == '5')
				{
					$first_ids[] = $v_ft['id'];
				}
				elseif($v_ft['action'] == '6')
				{
					$follow_ids[] = $v_ft['id'];
				}
				$form_type_ids[] = $v_ft['id'];
				$contact2types[$v_ft['id']] = $v_ft['action'];
			}

			$last_cycle = end($patient_falls);
			/* ----------------------Get all "contact forms" details from patients------------------------------------- */
			$contact_form_q = Doctrine_Query::create()
				->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
				->from("ContactForms c")
				->where('c.isdelete = 0')
				->andWhere('c.ipid = ?', $ipid )
				->andWhere('date(c.billable_date) BETWEEN ? AND ?',array(date("Y-m-d", strtotime($last_cycle['start'])), date("Y-m-d", strtotime($last_cycle['end']))))
				->andWhereIn('c.form_type', $follow_ids)
				->andWhereNotIn('c.id', $del_visits['contact_form'])
				->orderBy('c.start_date DESC')
				->limit(1);
			$contact_form_arr = $contact_form_q->fetchArray();

			if(empty($contact_form_arr))
			{
				$contact_form_q = Doctrine_Query::create()
					->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
					->from("ContactForms c")
					->where('c.isdelete = 0')
					->andWhere('c.ipid = ?', $ipid)
					->andWhere('date(c.billable_date) BETWEEN ? AND ?',array(date("Y-m-d", strtotime($last_cycle['start'])), date("Y-m-d", strtotime($last_cycle['end']))))
					->andWhereIn('c.form_type', $first_ids)
					->andWhereNotIn('c.id', $del_visits['contact_form'])
					->orderBy('c.start_date DESC')
					->limit(1);
				$contact_form_arr = $contact_form_q->fetchArray();
			}

			foreach($contact_form_arr as $kcf => $contact_forms)
			{
				$required_cf[] = $contact_forms['id'];
			}

			if(empty($required_cf))
			{
				$required_cf[] = "XXXXXX";
			}
			$required_cf = array_unique($required_cf);

			$setv = Doctrine_Query::create()
				->select('*, sv.value as sym_description')
				->from('SymptomatologyValues sv')
				->where('isdelete = 0')
				->orderBy('id');
			$svalue_array = $setv->fetchArray();

			foreach($svalue_array as $ki => $svv)
			{
				$symptoms_values[$svv['id']]['sym_description'] = utf8_encode($svv['sym_description']);
			}

			$symp_zapv_details = new SymptomatologyZapvDetails();
			$zapv_details_items = $symp_zapv_details->getSymptpomatologyZapvItems();

			$symps = Doctrine_Query::create()
				->select('*')
				->from('ContactFormsSymp')
				->where('ipid = ?', $ipid)
				->andWhereIn('contact_form_id', $required_cf)
				->orderBy('current_value DESC');
			$symarr = $symps->fetchArray();

			//show subcategories instead of values
			foreach($symarr as $k_symarr => $v_symarr)
			{
				$cf_symp_ids[$v_symarr['id']] = $v_symarr['symp_id'];
			}

			$symptoms_details = Doctrine_Query::create()
				->select('*')
				->from('ContactFormsSympDetails')
				->whereIn('contact_form_id', $required_cf)
				->orderBy('id ASC');
			$symptoms_details_res = $symptoms_details->fetchArray();

			foreach($symptoms_details_res as $k_sym_det => $v_sym_det)
			{
				$subcat_symptoms[$cf_symp_ids[$v_sym_det['entry_id']]][] = $zapv_details_items[$v_sym_det['detail_id']];
			}

			foreach($symarr as $ksy => $vsy)
			{
				$form_data['symptom_' . $vsy['symp_id'] . '_checked'] = "1";

				if($subcat_symptoms[$vsy['symp_id']])
				{
					$form_data['symptom_' . $vsy['symp_id'] . '_description'] = implode(', ', $subcat_symptoms[$vsy['symp_id']]);
				}

//				if(strlen($zapv_details_items[$vsy['details']]) > 0)
//				{
//					$form_data['symptom_' . $vsy['symp_id'] . '_description'] = $zapv_details_items[$vsy['details']] . ' (' . $vsy['current_value'] . ')';
//				}
//				else
//				{
//					$form_data['symptom_' . $vsy['symp_id'] . '_description'] = $symptoms_values[$vsy['symp_id']]['sym_description'] . ' (' . $vsy['current_value'] . ')';
//				}
			}

			/* ============================= DEFAULT DATA =============================== */
			$form_data['providers'] = array('family_doctor', 'pharmacy');
			$form_data['treatment_plan'] = array('emergency', 'organized_call');
			$form_data['support_needs'] = array('special_coordination', 'advice_guidance', 'specific_treatment', 'specific_followup', 'crissis_anticipation', 'preparedness');
			$form_data['sapv'] = array('claimed_before');
			$form_data['done_date'] = date("d.m.Y");

			$zapv_data = new ZapvAssessment();

			$current_status = 'active';
			if(!empty($_REQUEST['form_id']))
			{
				$saved_form_data = $zapv_data->get_zapv_assessment_by_id($ipid, $_REQUEST['form_id']);
				$current_status = $saved_form_data[0]['status'];
			}
			else
			{
				$saved_form_data = $zapv_data->get_zapv_assessment($ipid, $assessment_type, $current_status);
			}

			$form_data['status'] = $current_status;

			if(!empty($saved_form_data))
			{
				$form_id = $saved_form_data[0]['id'];
				$form_data = $saved_form_data[0];

				$form_data['form_id'] = $form_id;

				if($form_data['first_sapv_till'] != "0000-00-00 00:00:00")
				{
					$form_data['first_sapv_till'] = date('d.m.Y', strtotime($form_data['first_sapv_till']));
				}
				else
				{
					$form_data['first_sapv_till'] = '';
				}
				$form_data['first_sapv_type'] = explode(',', $form_data['first_sapv_type']);
				if($form_data['latest_sapv_till'] != "0000-00-00 00:00:00")
				{
					$form_data['latest_sapv_till'] = date('d.m.Y', strtotime($form_data['latest_sapv_till']));
				}
				else
				{
					$form_data['latest_sapv_till'] = '';
				}
				$form_data['latest_sapv_type'] = explode(',', $form_data['latest_sapv_type']);
				$form_data['providers'] = explode(',', $form_data['providers']);
				$form_data['treatment_plan'] = explode(',', $form_data['treatment_plan']);
				$form_data['support_needs'] = explode(',', $form_data['support_needs']);
				$form_data['sapv'] = explode(',', $form_data['sapv']);
				$form_data['reason_of_termination'] = explode(',', $form_data['reason_of_termination']);

				if($form_data['sapv_requierments_until'] != "0000-00-00 00:00:00")
				{
					$form_data['sapv_requierments_until'] = date('d.m.Y', strtotime($form_data['sapv_requierments_until']));
				}
				else
				{
					$form_data['sapv_requierments_until'] = '';
				}

				if($form_data['done_date'] != "0000-00-00 00:00:00")
				{
					$form_data['done_date'] = date('d.m.Y', strtotime($form_data['done_date']));
				}
				else
				{
					$form_data['done_date'] = '';
				}
			}

			$this->view->patient = $patient;
			$this->view->form_data = $form_data;

			if($this->getRequest()->isPost())
			{
				$zapv_form = new Application_Form_ZapvAssessment();

				if(strlen($_POST['start_new_assessment']) > 0 && empty($_POST['generate_pdf']) && empty($_POST['save_form']))
				{

					if(!empty($saved_form_data) && !empty($form_id) && $current_status == 'active')
					{
						$generate_new = $zapv_form->generate_new($form_id, $ipid, $assessment_type);

						$post = $_POST;
						$post['form_id'] = $form_data['form_id'];
						$post['patient'] = $patient;
						$post['patient']['details']['family_doctor'] = $patient['details']['family_doctor_pdf'];
						$post['client'] = $client;

						$this->generateformPdf(4, $post, 'ZAPV_Assessment_save', "zapv_assessment_pdf.html");
						$this->_redirect(APP_BASE . "patientform/zapvassessment?id=" . $_GET['id']);
					}
				}
				elseif(strlen($_POST['save_form']) > 0 && empty($_POST['generate_pdf']) && empty($_POST['start_new_assessment']))
				{
					if(!empty($saved_form_data) && !empty($form_id))
					{
						$update = $zapv_form->update_form_data($form_id, $_POST['form_data'], $ipid, $assessment_type);
					}
					else
					{
						$insert = $zapv_form->insert_form_data($_POST['form_data'], $ipid, $assessment_type);
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				elseif(strlen($_POST['generate_pdf']) > 0 && empty($_POST['save_form']) && empty($_POST['start_new_assessment']))
				{
					$post = $_POST;
					if(empty($form_data['form_id']))
					{
						$form_data['form_id'] = 1;
					}
					$post['form_id'] = $form_data['form_id'];
					$post['patient'] = $patient;
					$post['patient']['details']['family_doctor'] = $patient['details']['family_doctor_pdf'];
					$post['client'] = $client;
					$this->generateformPdf(3, $post, 'ZAPV_Assessment', "zapv_assessment_pdf.html");
				}
			}
		}

		public function zapvberatungassessmentAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$assessment_type = 'consulting';
			$userid = $logininfo->userid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			$this->view->epid = $epid;
			$this->view->clientid = $clientid;
			$this->view->id_record = $ipid;
			$this->view->ipid = $ipid;

			/* --------------Get patient info and menus--------------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* --------------Check permissions	---------------------------------------- */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* --------------Check if patient is discharge	---------------------------- */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* --------------Get form data ---------------------------------------------- */
			/* --------------Client information ---------------------------------------- */
			$client_data = Pms_CommonData::getClientData($clientid);

			$client['details']['team_name'] = $client_data[0]['team_name'];
			$this->view->client = $client;

			/* --------------Patient Information ---------------------------------------- */
// 			$patientmaster = new PatientMaster();
// 			$patientdetails = $patientmaster->getMasterData($decid, 0);
			$patientdetails = $patientmaster->get_patientMasterData();

			$patient['details']['last_name'] = $patientdetails['last_name'];
			$patient['details']['first_name'] = $patientdetails['first_name'];
			$patient['details']['birthd'] = $patientdetails['birthd'];
			$patient['details']['street'] = $patientdetails['street1'];
			$patient['details']['city'] = $patientdetails['city'];
			$patient['details']['phone'] = $patientdetails['phone'];
			$patient['details']['gender'] = $patientdetails['sex'];

			/* -------------------------------Patient admission falls ---------------------------------------- */
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);
			if(count($admissions[$ipid]['admissionDates']) != "0")
			{
				foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
				{
					if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}

					$patient_falls[$keyAdm]['start'] = date("Y-m-d", strtotime($admitedDate['date']));
					$patient_falls[$keyAdm]['end'] = date("Y-m-d", strtotime($dischargeDate));
				}
			}
			else
			{
				$patient_falls[0]['start'] = date("Y-m-d", strtotime($admissions[$ipid]['admission_date']));
				$patient_falls[0]['end'] = date("Y-m-d", strtotime($admissions[$ipid]['discharge_date']));
			}
			/* --------------Patient - saved files --------------------------------- */
			$fileupload = new PatientFileUpload();
			$contact_form_files = $fileupload->get_zapv_assessment_file_data($ipid, $assessment_type);
			$users_ids[] = '999999999';
			foreach($contact_form_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}

			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			$this->view->form_files = $contact_form_files;

			/* --------------Patient - Contact persons --------------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid, false);

			$patient['details']['legal_contact_person'] = '';
			$patient['details']['contact_persons'] = '';

			$legual_guardiens = array();
			foreach($pcs as $k => $pc_values)
			{
				if($pc_values['cnt_legalguardian'] == '1')
				{
					$legual_guardiens[] = $pc_values['id'];
					$patient['details']['legal_contact_person'] .= $pc_values['cnt_last_name'] . ', ' . $pc_values['cnt_first_name'];
				}
				else
				{
					$patient['details']['contact_persons'] .= $pc_values['cnt_last_name'] . ', ' . $pc_values['cnt_first_name'] . '; ';
				}
			}
			$patient['details']['contact_persons'] = substr($patient['details']['contact_persons'], 0, -2);

			/* --------------Patient -health insurance ---------------------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$patient['details']['health_insurance'] = $healthinsu_array[0]['company_name'];
			$patient['details']['health_insurance_no'] = $healthinsu_array[0]['insurance_no'];

			/* --------------Patient -sapv details ---------------------------------------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$sapv_array = $dropSapv->fetchArray();

			if(is_array($sapv_array) && !empty($sapv_array))
			{
				$latest_sapv = end($sapv_array);
				$form_data['first_sapv_till'] = date('d.m.Y', strtotime($sapv_array[0]['verordnungbis']));
				$form_data['first_sapv_type'] = explode(',', $sapv_array[0]['verordnet']);

				$form_data['latest_sapv_till'] = date('d.m.Y', strtotime($latest_sapv['verordnungbis']));
				$form_data['latest_sapv_type'] = explode(',', $latest_sapv['verordnet']);
			}

			/* --------------Patient - family doctor ---------------------------------------- */
			if($patientdetails['familydoc_id'] > 0)
			{
				$fdoc = Doctrine_Core::getTable('FamilyDoctor')->find($patientdetails['familydoc_id']);
				if($fdoc)
				{
					$docarr = $fdoc->toArray();
					$doc_title = "";
					if($docarr['title'] == "")
					{
						$doc_title = $docarr['title'];
					}
					else
					{
						$doc_title = $docarr['title'] . " ";
					}
				}

				if(empty($docarr['last_name']) && empty($docarr['first_name']) && empty($docarr['street1']) && empty($docarr['zip']) && empty($docarr['city']))
				{

					$patient['details']['family_doctor'] = "";
				}
				else
				{
					$patient['details']['family_doctor'] = $doc_title . "" . $docarr['last_name'] . ", " . $docarr['first_name'] . " <br />" . $docarr['street1'] . "<br />" . $docarr['zip'] . " " . $docarr['city'];

					$patient['details']['family_doctor_pdf']['title'] = $doc_title . ' ';
					$patient['details']['family_doctor_pdf']['last_name'] = $docarr['last_name'];
					$patient['details']['family_doctor_pdf']['first_name'] = $docarr['first_name'];
					$patient['details']['family_doctor_pdf']['street'] = $docarr['street1'];
					$patient['details']['family_doctor_pdf']['zip'] = $docarr['zip'];
					$patient['details']['family_doctor_pdf']['city'] = $docarr['city'];
				}
			}
			else
			{
				$patient['details']['family_doctor'] = "";
				$patient['details']['family_doctor_pdf'] = array();
			}

			/* --------------Patient Pfllegedienst---------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($patientdetails['ipid']);

			$patient['details']['nurse_service'] = '';
			foreach($ppflearray as $kp => $pp)
			{
				$patient['details']['nurse_service'] .= htmlspecialchars($pp['nursing']) . "; ";
			}

			/* ------------------- Maindiagnosis & Sidediagnosis------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . "" . $valdia['icdnumber'];
						$comma = ", ";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$form_data['diagnosis'] = $diagnosis;
			}
			else
			{
				$form_data['diagnosis'] = "";
			}

			/* ------------------------------- Patient deleted in verlaufvisits ---------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhere('ipid = ?',$ipid)
				->andWhere('source_ipid = ""');
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['contact_form'][] = '999999999999';
			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}
			/* ------------------------------- get maste form types by action ---------------------- */
			$actions_array = array("5", "6");

			$types = Doctrine_Query::create()
				->select('*')
				->from('FormTypes')
				->where('clientid="' . $clientid . '"')
				->andWhere('isdelete = ?','0')
				->andWhereIn('action', $actions_array);
			$types_res = $types->fetchArray();

			$first_ids[] = '99999999999';
			$follow_ids[] = '99999999999';
			$form_type_ids[] = '99999999999';
			foreach($types_res as $k_ft => $v_ft)
			{
				if($v_ft['action'] == '5')
				{
					$first_ids[] = $v_ft['id'];
				}
				elseif($v_ft['action'] == '6')
				{
					$follow_ids[] = $v_ft['id'];
				}
				$form_type_ids[] = $v_ft['id'];
				$contact2types[$v_ft['id']] = $v_ft['action'];
			}

			$last_cycle = end($patient_falls);

			/* ----------------------Get all "contact forms" details from patients------------------------------------- */
			$contact_form_q = Doctrine_Query::create()
				->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
				->from("ContactForms c")
				->where('c.isdelete = 0')
				->andWhere('c.ipid = ?', $ipid)
// 				->andWhere('date(c.billable_date) BETWEEN ? AND ?',array(date("Y-m-d", strtotime($last_cycle['start'])), date("Y-m-d", strtotime($last_cycle['end']))))
				->andWhere('date(c.billable_date) BETWEEN "' . date("Y-m-d", strtotime($last_cycle['start'])) . '" AND "' . date("Y-m-d", strtotime($last_cycle['end'])) . '"')
				->andWhereIn('c.form_type', $follow_ids)
				->andWhereNotIn('c.id', $del_visits['contact_form'])
				->orderBy('c.start_date DESC')
				->limit(1);
			$contact_form_arr = $contact_form_q->fetchArray();

			if(empty($contact_form_arr))
			{
				$contact_form_q = Doctrine_Query::create()
					->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
					->from("ContactForms c")
					->where('c.isdelete = 0')
					->andWhere('c.ipid = ?', $ipid)
// 					->andWhere('date(c.billable_date) BETWEEN ? AND ?',array(date("Y-m-d", strtotime($last_cycle['start'])), date("Y-m-d", strtotime($last_cycle['end']))))
					->andWhere('date(c.billable_date) BETWEEN "' . date("Y-m-d", strtotime($last_cycle['start'])) . '" AND "' . date("Y-m-d", strtotime($last_cycle['end'])) . '"')
					->andWhereIn('c.form_type', $first_ids)
					->andWhereNotIn('c.id', $del_visits['contact_form'])
					->orderBy('c.start_date DESC')
					->limit(1);
				$contact_form_arr = $contact_form_q->fetchArray();
			}

			foreach($contact_form_arr as $kcf => $contact_forms)
			{
				$required_cf[] = $contact_forms['id'];
			}

			if(empty($required_cf))
			{
				$required_cf[] = "XXXXXX";
			}
			$required_cf = array_unique($required_cf);

			$setv = Doctrine_Query::create()
				->select('*, sv.value as sym_description')
				->from('SymptomatologyValues sv')
				->where('isdelete = 0')
				->orderBy('id');
			$svalue_array = $setv->fetchArray();

			foreach($svalue_array as $ki => $svv)
			{
				$symptoms_values[$svv['id']]['sym_description'] = utf8_encode($svv['sym_description']);
			}

			$symp_zapv_details = new SymptomatologyZapvDetails();
			$zapv_details_items = $symp_zapv_details->getSymptpomatologyZapvItems();

			$symps = Doctrine_Query::create()
				->select('*')
				->from('ContactFormsSymp')
				->where('ipid = ?',$ipid)
				->andWhereIn('contact_form_id', $required_cf)
				->orderBy('current_value DESC');
			$symarr = $symps->fetchArray();

			foreach($symarr as $ksy => $vsy)
			{
				$form_data['symptom_' . $vsy['symp_id'] . '_checked'] = "1";
				if(strlen($zapv_details_items[$vsy['details']]) > 0)
				{
					$form_data['symptom_' . $vsy['symp_id'] . '_description'] = $zapv_details_items[$vsy['details']] . ' (' . $vsy['current_value'] . ')';
				}
				else
				{
					$form_data['symptom_' . $vsy['symp_id'] . '_description'] = $symptoms_values[$vsy['symp_id']]['sym_description'] . ' (' . $vsy['current_value'] . ')';
				}
			}

			/* ============================= DEFAULT DATA =============================== */
			$form_data['advice_checked'] = '1';
			$form_data['providers'] = array('family_doctor', 'nurse');
			$form_data['treatment_plan'] = array();
			$form_data['support_needs'] = array('preparedness');
			$form_data['sapv'] = array('claimed_before');
			$form_data['done_date'] = date("d.m.Y");

			$zapv_data = new ZapvAssessment();

			$current_status = 'active';
			if(!empty($_REQUEST['form_id']))
			{
				$saved_form_data = $zapv_data->get_zapv_assessment_by_id($ipid, $_REQUEST['form_id']);
				$current_status = $saved_form_data[0]['status'];
			}
			else
			{
				$saved_form_data = $zapv_data->get_zapv_assessment($ipid, $assessment_type, $current_status);
			}

			$form_data['status'] = $current_status;

			if(!empty($saved_form_data))
			{
				$form_id = $saved_form_data[0]['id'];
				$form_data = $saved_form_data[0];

				$form_data['form_id'] = $form_id;

				if($form_data['first_sapv_till'] != "0000-00-00 00:00:00")
				{
					$form_data['first_sapv_till'] = date('d.m.Y', strtotime($form_data['first_sapv_till']));
				}
				else
				{
					$form_data['first_sapv_till'] = '';
				}
				$form_data['first_sapv_type'] = explode(',', $form_data['first_sapv_type']);
				if($form_data['latest_sapv_till'] != "0000-00-00 00:00:00")
				{
					$form_data['latest_sapv_till'] = date('d.m.Y', strtotime($form_data['latest_sapv_till']));
				}
				else
				{
					$form_data['latest_sapv_till'] = '';
				}
				$form_data['latest_sapv_type'] = explode(',', $form_data['latest_sapv_type']);
				$form_data['providers'] = explode(',', $form_data['providers']);
				$form_data['treatment_plan'] = explode(',', $form_data['treatment_plan']);
				$form_data['support_needs'] = explode(',', $form_data['support_needs']);
				$form_data['sapv'] = explode(',', $form_data['sapv']);
				$form_data['reason_of_termination'] = explode(',', $form_data['reason_of_termination']);

				if($form_data['sapv_requierments_until'] != "0000-00-00 00:00:00")
				{
					$form_data['sapv_requierments_until'] = date('d.m.Y', strtotime($form_data['sapv_requierments_until']));
				}
				else
				{
					$form_data['sapv_requierments_until'] = '';
				}

				if($form_data['done_date'] != "0000-00-00 00:00:00")
				{
					$form_data['done_date'] = date('d.m.Y', strtotime($form_data['done_date']));
				}
				else
				{
					$form_data['done_date'] = '';
				}
			}
			$this->view->patient = $patient;
			$this->view->form_data = $form_data;

			if($this->getRequest()->isPost())
			{
				$zapv_form = new Application_Form_ZapvAssessment();
				if(strlen($_POST['start_new_assessment']) > 0 && empty($_POST['generate_pdf']) && empty($_POST['save_form']))
				{
					if(!empty($saved_form_data) && !empty($form_id) && $current_status == 'active')
					{
						$generate_new = $zapv_form->generate_new($form_id, $ipid, $assessment_type);

						$post = $_POST;
						$post['form_id'] = $form_data['form_id'];
						$post['patient'] = $patient;
						$post['patient']['details']['family_doctor'] = $patient['details']['family_doctor_pdf'];
						$post['client'] = $client;
						$this->generateformPdf(4, $post, 'ZAPV_Beratung_Assessment_save', "zapv_beratung_assessment_pdf.html");
						$this->_redirect(APP_BASE . "patientform/zapvberatungassessment?id=" . $_GET['id']);
					}
				}
				elseif(strlen($_POST['save_form']) > 0 && empty($_POST['generate_pdf']) && empty($_POST['start_new_assessment']))
				{
					if(!empty($saved_form_data) && !empty($form_id))
					{
						$update = $zapv_form->update_form_data($form_id, $_POST['form_data'], $ipid, $assessment_type);
					}
					else
					{
						$insert = $zapv_form->insert_form_data($_POST['form_data'], $ipid, $assessment_type);
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				elseif(strlen($_POST['generate_pdf']) > 0 && empty($_POST['save_form']) && empty($_POST['start_new_assessment']))
				{
					$post = $_POST;
					if(empty($form_data['form_id']))
					{
						$form_data['form_id'] = 1;
					}
					$post['form_id'] = $form_data['form_id'];
					$post['patient'] = $patient;
					$post['patient']['details']['family_doctor'] = $patient['details']['family_doctor_pdf'];
					$post['client'] = $client;
					$this->generateformPdf(3, $post, 'ZAPV_Beratung_Assessment', "zapv_beratung_assessment_pdf.html");
				}
			}
		}

		public function zapvendeassessmentAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$assessment_type = 'end';
			$userid = $logininfo->userid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			$this->view->epid = $epid;
			$this->view->clientid = $clientid;
			$this->view->id_record = $ipid;
			$this->view->ipid = $ipid;

			/* --------------Get patient info and menus--------------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			/* --------------Check permissions	---------------------------------------- */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}

			/* --------------Check if patient is discharge	---------------------------- */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}

			/* --------------Get form data ---------------------------------------------- */
			/* --------------Client information ---------------------------------------- */
			$client_data = Pms_CommonData::getClientData($clientid);

			$client['details']['team_name'] = $client_data[0]['team_name'];
			$this->view->client = $client;

			/* --------------Patient Information ---------------------------------------- */
// 			$patientmaster = new PatientMaster();
// 			$patientdetails = $patientmaster->getMasterData($decid, 0);
			$patientdetails = $patientmaster->get_patientMasterData();

			$patient['details']['last_name'] = $patientdetails['last_name'];
			$patient['details']['first_name'] = $patientdetails['first_name'];
			$patient['details']['birthd'] = $patientdetails['birthd'];
			$patient['details']['street'] = $patientdetails['street1'];
			$patient['details']['city'] = $patientdetails['city'];
			$patient['details']['phone'] = $patientdetails['phone'];
			$patient['details']['gender'] = $patientdetails['sex'];

			/* -------------------------------Patient admission falls ---------------------------------------- */
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);
			if(count($admissions[$ipid]['admissionDates']) != "0")
			{
				foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
				{
					if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}
					$patient_falls[$keyAdm]['start'] = date("Y-m-d", strtotime($admitedDate['date']));
					$patient_falls[$keyAdm]['end'] = date("Y-m-d", strtotime($dischargeDate));
				}
			}
			else
			{
				$patient_falls[0]['start'] = date("Y-m-d", strtotime($admissions[$ipid]['admission_date']));
				$patient_falls[0]['end'] = date("Y-m-d", strtotime($admissions[$ipid]['discharge_date']));
			}
			/* --------------Patient - saved files --------------------------------- */
			$fileupload = new PatientFileUpload();
			$contact_form_files = $fileupload->get_zapv_assessment_file_data($ipid, $assessment_type);
			$users_ids[] = '999999999';
			foreach($contact_form_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}
			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			$this->view->form_files = $contact_form_files;

			/* --------------Patient - Contact persons --------------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid, false);

			$patient['details']['legal_contact_person'] = '';
			$patient['details']['contact_persons'] = '';

			$legual_guardiens = array();
			foreach($pcs as $k => $pc_values)
			{
				if($pc_values['cnt_legalguardian'] == '1')
				{
					$legual_guardiens[] = $pc_values['id'];
					$patient['details']['legal_contact_person'] .= $pc_values['cnt_last_name'] . ', ' . $pc_values['cnt_first_name'];
				}
				else
				{
					$patient['details']['contact_persons'] .= $pc_values['cnt_last_name'] . ', ' . $pc_values['cnt_first_name'] . '; ';
				}
			}
			$patient['details']['contact_persons'] = substr($patient['details']['contact_persons'], 0, -2);

			/* --------------Patient -health insurance ---------------------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$patient['details']['health_insurance'] = $healthinsu_array[0]['company_name'];
			$patient['details']['health_insurance_no'] = $healthinsu_array[0]['insurance_no'];

			/* --------------Patient -sapv details ---------------------------------------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$sapv_array = $dropSapv->fetchArray();

			if(is_array($sapv_array) && !empty($sapv_array))
			{
				$latest_sapv = end($sapv_array);
				$form_data['first_sapv_till'] = date('d.m.Y', strtotime($sapv_array[0]['verordnungbis']));
				$form_data['first_sapv_type'] = explode(',', $sapv_array[0]['verordnet']);

				$form_data['latest_sapv_till'] = date('d.m.Y', strtotime($latest_sapv['verordnungbis']));
				$form_data['latest_sapv_type'] = explode(',', $latest_sapv['verordnet']);
			}

			/* --------------Patient - family doctor ---------------------------------------- */
			if($patientdetails['familydoc_id'] > 0)
			{
				$fdoc = Doctrine_Core::getTable('FamilyDoctor')->find($patientdetails['familydoc_id']);
				if($fdoc)
				{
					$docarr = $fdoc->toArray();
					$doc_title = "";
					if($docarr['title'] == "")
					{
						$doc_title = $docarr['title'];
					}
					else
					{
						$doc_title = $docarr['title'] . " ";
					}
				}

				if(empty($docarr['last_name']) && empty($docarr['first_name']) && empty($docarr['street1']) && empty($docarr['zip']) && empty($docarr['city']))
				{
					$patient['details']['family_doctor'] = "";
				}
				else
				{
					$patient['details']['family_doctor'] = $doc_title . "" . $docarr['last_name'] . ", " . $docarr['first_name'] . " <br />" . $docarr['street1'] . "<br />" . $docarr['zip'] . " " . $docarr['city'];
					$patient['details']['family_doctor_pdf']['title'] = $doc_title . ' ';
					$patient['details']['family_doctor_pdf']['last_name'] = $docarr['last_name'];
					$patient['details']['family_doctor_pdf']['first_name'] = $docarr['first_name'];
					$patient['details']['family_doctor_pdf']['street'] = $docarr['street1'];
					$patient['details']['family_doctor_pdf']['zip'] = $docarr['zip'];
					$patient['details']['family_doctor_pdf']['city'] = $docarr['city'];
				}
			}
			else
			{
				$patient['details']['family_doctor'] = "";
				$patient['details']['family_doctor_pdf'] = array();
			}

			/* --------------Patient Pfllegedienst---------------------------- */

			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($patientdetails['ipid']);

			$patient['details']['nurse_service'] = '';
			foreach($ppflearray as $kp => $pp)
			{
				$patient['details']['nurse_service'] .= htmlspecialchars($pp['nursing']) . "; ";
			}

			/* ------------------- Maindiagnosis & Sidediagnosis------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);

			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . "" . $valdia['icdnumber'];
						$comma = ", ";
					}
				}
			}

			if(strlen($diagnosis) > 0)
			{
				$form_data['diagnosis'] = $diagnosis;
			}
			else
			{
				$form_data['diagnosis'] = "";
			}

			/* ------------------------------- Patient deleted in verlaufvisits ---------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhere('ipid = ?', $ipid)
				->andWhere('source_ipid = ""');
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['contact_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}
			/* ------------------------------- get maste form types by action ---------------------- */
			$actions_array = array("5", "6");

			$types = Doctrine_Query::create()
				->select('*')
				->from('FormTypes')
				->where('clientid= ?', $clientid)
				->andWhere('isdelete = ?','0')
				->andWhereIn('action', $actions_array);
			$types_res = $types->fetchArray();

			$first_ids[] = '99999999999';
			$follow_ids[] = '99999999999';
			$form_type_ids[] = '99999999999';
			foreach($types_res as $k_ft => $v_ft)
			{
				if($v_ft['action'] == '5')
				{
					$first_ids[] = $v_ft['id'];
				}
				elseif($v_ft['action'] == '6')
				{
					$follow_ids[] = $v_ft['id'];
				}
				$form_type_ids[] = $v_ft['id'];
				$contact2types[$v_ft['id']] = $v_ft['action'];
			}

			$last_cycle = end($patient_falls);
			/* ----------------------Get all "contact forms" details from patients------------------------------------- */
			$contact_form_q = Doctrine_Query::create()
				->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
				->from("ContactForms c")
				->where('c.isdelete = 0')
				->andWhere('c.ipid = ?', $ipid)
// 				->andWhere('date(c.billable_date) BETWEEN  DATE(?) AND ?',array(date("Y-m-d", strtotime($last_cycle['start'])),date("Y-m-d", strtotime($last_cycle['end'])))) 
				->andWhere('date(c.billable_date) BETWEEN "' . date("Y-m-d", strtotime($last_cycle['start'])) . '" AND "' . date("Y-m-d", strtotime($last_cycle['end'])) . '"')
				->andWhereIn('c.form_type', $follow_ids)
				->andWhereNotIn('c.id', $del_visits['contact_form'])
				->orderBy('c.start_date DESC')
				->limit(1);
			$contact_form_arr = $contact_form_q->fetchArray();

			if(empty($contact_form_arr))
			{
				$contact_form_q = Doctrine_Query::create()
					->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
					->from("ContactForms c")
					->where('c.isdelete = 0')
					->andWhere('c.ipid = ?', $ipid)
// 					->andWhere('date(c.billable_date) BETWEEN  ? AND ?',array(date("Y-m-d", strtotime($last_cycle['start'])),date("Y-m-d", strtotime($last_cycle['end']))))
					->andWhere('date(c.billable_date) BETWEEN "' . date("Y-m-d", strtotime($last_cycle['start'])) . '" AND "' . date("Y-m-d", strtotime($last_cycle['end'])) . '"')
					->andWhereIn('c.form_type', $first_ids)
					->andWhereNotIn('c.id', $del_visits['contact_form'])
					->orderBy('c.start_date DESC')
					->limit(1);
				$contact_form_arr = $contact_form_q->fetchArray();
			}

			foreach($contact_form_arr as $kcf => $contact_forms)
			{
				$required_cf[] = $contact_forms['id'];
			}

			if(empty($required_cf))
			{
				$required_cf[] = "XXXXXX";
			}

			$required_cf = array_unique($required_cf);

			$setv = Doctrine_Query::create()
				->select('*, sv.value as sym_description')
				->from('SymptomatologyValues sv')
				->where('isdelete = 0')
				->orderBy('id');
			$svalue_array = $setv->fetchArray();

			foreach($svalue_array as $ki => $svv)
			{
				$symptoms_values[$svv['id']]['sym_description'] = utf8_encode($svv['sym_description']);
			}

			$symp_zapv_details = new SymptomatologyZapvDetails();
			$zapv_details_items = $symp_zapv_details->getSymptpomatologyZapvItems();

			$symps = Doctrine_Query::create()
				->select('*')
				->from('ContactFormsSymp')
				->where('ipid = ?', $ipid)
				->andWhereIn('contact_form_id', $required_cf)
				->orderBy('current_value DESC');
			$symarr = $symps->fetchArray();

			foreach($symarr as $ksy => $vsy)
			{
				$form_data['symptom_' . $vsy['symp_id'] . '_checked'] = "1";
				if(strlen($zapv_details_items[$vsy['details']]) > 0)
				{
					$form_data['symptom_' . $vsy['symp_id'] . '_description'] = $zapv_details_items[$vsy['details']] . ' (' . $vsy['current_value'] . ')';
				}
				else
				{
					$form_data['symptom_' . $vsy['symp_id'] . '_description'] = $symptoms_values[$vsy['symp_id']]['sym_description'] . ' (' . $vsy['current_value'] . ')';
				}
			}

			/* ============================= DEFAULT DATA =============================== */
			$form_data['providers'] = array();
			$form_data['treatment_plan'] = array();
			$form_data['support_needs'] = array();
			$form_data['sapv'] = array('sapv_ended');
			$form_data['done_date'] = date("d.m.Y");

			$zapv_data = new ZapvAssessment();

			$current_status = 'active';
			if(!empty($_REQUEST['form_id']))
			{
				$saved_form_data = $zapv_data->get_zapv_assessment_by_id($ipid, $_REQUEST['form_id']);
				$current_status = $saved_form_data[0]['status'];
			}
			else
			{
				$saved_form_data = $zapv_data->get_zapv_assessment($ipid, $assessment_type, $current_status);
			}

			$form_data['status'] = $current_status;

			if(!empty($saved_form_data))
			{
				$form_id = $saved_form_data[0]['id'];
				$form_data = $saved_form_data[0];

				$form_data['form_id'] = $form_id;

				if($form_data['first_sapv_till'] != "0000-00-00 00:00:00")
				{
					$form_data['first_sapv_till'] = date('d.m.Y', strtotime($form_data['first_sapv_till']));
				}
				else
				{
					$form_data['first_sapv_till'] = '';
				}
				$form_data['first_sapv_type'] = explode(',', $form_data['first_sapv_type']);

				if($form_data['latest_sapv_till'] != "0000-00-00 00:00:00")
				{
					$form_data['latest_sapv_till'] = date('d.m.Y', strtotime($form_data['latest_sapv_till']));
				}
				else
				{
					$form_data['latest_sapv_till'] = '';
				}
				$form_data['latest_sapv_type'] = explode(',', $form_data['latest_sapv_type']);
				$form_data['providers'] = explode(',', $form_data['providers']);
				$form_data['treatment_plan'] = explode(',', $form_data['treatment_plan']);
				$form_data['support_needs'] = explode(',', $form_data['support_needs']);
				$form_data['sapv'] = explode(',', $form_data['sapv']);
				$form_data['reason_of_termination'] = explode(',', $form_data['reason_of_termination']);

				if($form_data['sapv_requierments_until'] != "0000-00-00 00:00:00")
				{
					$form_data['sapv_requierments_until'] = date('d.m.Y', strtotime($form_data['sapv_requierments_until']));
				}
				else
				{
					$form_data['sapv_requierments_until'] = '';
				}

				if($form_data['done_date'] != "0000-00-00 00:00:00")
				{
					$form_data['done_date'] = date('d.m.Y', strtotime($form_data['done_date']));
				}
				else
				{
					$form_data['done_date'] = '';
				}
			}

			$this->view->patient = $patient;
			$this->view->form_data = $form_data;

			if($this->getRequest()->isPost())
			{
				$zapv_form = new Application_Form_ZapvAssessment();

				if(strlen($_POST['start_new_assessment']) > 0 && empty($_POST['generate_pdf']) && empty($_POST['save_form']))
				{

					if(!empty($saved_form_data) && !empty($form_id) && $current_status == 'active')
					{

						$generate_new = $zapv_form->generate_new($form_id, $ipid, $assessment_type);

						$post = $_POST;
						$post['form_id'] = $form_data['form_id'];
						$post['patient'] = $patient;
						$post['patient']['details']['family_doctor'] = $patient['details']['family_doctor_pdf'];
						$post['client'] = $client;

						$this->generateformPdf(4, $post, 'ZAPV_Ende_Assessment_save', "zapv_ende_assessment_pdf.html");
						$this->_redirect(APP_BASE . "patientform/zapvendeassessment?id=" . $_GET['id']);
					}
				}
				elseif(strlen($_POST['save_form']) > 0 && empty($_POST['generate_pdf']) && empty($_POST['start_new_assessment']))
				{
					if(!empty($saved_form_data) && !empty($form_id))
					{
						$update = $zapv_form->update_form_data($form_id, $_POST['form_data'], $ipid, $assessment_type);
					}
					else
					{
						$insert = $zapv_form->insert_form_data($_POST['form_data'], $ipid, $assessment_type);
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				elseif(strlen($_POST['generate_pdf']) > 0 && empty($_POST['save_form']) && empty($_POST['start_new_assessment']))
				{
					$post = $_POST;
					if(empty($form_data['form_id']))
					{
						$form_data['form_id'] = 1;
					}
					$post['form_id'] = $form_data['form_id'];
					$post['patient'] = $patient;
					$post['patient']['details']['family_doctor'] = $patient['details']['family_doctor_pdf'];
					$post['client'] = $client;
					$this->generateformPdf(3, $post, 'ZAPV_Ende_Assessment', "zapv_ende_assessment_pdf.html");
				}
			}
		}

		public function bayernemergencyplanAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			/* ----------------------Patient Info & Tab menus-------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

// 			$patientmaster = new PatientMaster();
// 			$parr = $patientmaster->getMasterData($decid, 0);
			$parr = $patientmaster->get_patientMasterData();
			$this->view->first_name = $parr['first_name'];
			$this->view->last_name = $parr['last_name'];
			$this->view->birthd = $parr['birthd'];
			$this->view->pat_address = $parr['street1'] . ", " . $parr['zip'] . " " . $parr['city'];
			$this->view->pat_phone = $parr['phone'];

			/* --------------Patient family doctor---------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($parr['familydoc_id']);
			$this->view->hausarzt = $docarray[0]['last_name'] . ", " . $docarray[0]['first_name'];

			$cl = new Client();
			$clarray = $cl->getClientDataByid($clientid);
			$this->view->client_phone = $clarray[0]['phone'];
			$this->view->notarzt = '112';
			$this->view->client_cellphone = $clarray[0]['emergencynr_a'];

			/* ==================================================================== */
			$fd = new BayEmergencyPlan();
			$form_details = $fd->get_bayemergencyplan_details($ipid);

			if($form_details)
			{
				$be_id = $form_details[0]['id'];
				$bayemergencyplan = $form_details[0];
				$this->view->notfallplan = $bayemergencyplan['notfallplan'];
				$this->view->pat_address = $bayemergencyplan['pat_address'];
				$this->view->pat_phone = $bayemergencyplan['pat_phone'];
				$this->view->hausarzt = $bayemergencyplan['hausarzt'];
				$this->view->client_phone = $bayemergencyplan['client_phone'];
				$this->view->client_cellphone = $bayemergencyplan['client_cellphone'];
				$this->view->notarzt = $bayemergencyplan['notarzt'];
				$this->view->mobil = $bayemergencyplan['mobil'];
				$this->view->akuteblutungen_vompat = $bayemergencyplan['akuteblutungen_vompat'];
				$this->view->akuteblutungen_vomart = $bayemergencyplan['akuteblutungen_vomart'];
				$this->view->akuteblutungen_dosierung = $bayemergencyplan['akuteblutungen_dosierung'];
				$this->view->akuteblutungen_24std = $bayemergencyplan['akuteblutungen_24std'];
				$this->view->atemnot_vompat = $bayemergencyplan['atemnot_vompat'];
				$this->view->atemnot_vomart = $bayemergencyplan['atemnot_vomart'];
				$this->view->atemnot_dosierung = $bayemergencyplan['atemnot_dosierung'];
				$this->view->atemnot_24std = $bayemergencyplan['atemnot_24std'];
				$this->view->rasselatmung_vompat = $bayemergencyplan['rasselatmung_vompat'];
				$this->view->rasselatmung_vomart = $bayemergencyplan['rasselatmung_vomart'];
				$this->view->rasselatmung_dosierung = $bayemergencyplan['rasselatmung_dosierung'];
				$this->view->rasselatmung_24std = $bayemergencyplan['rasselatmung_24std'];
				$this->view->unruhe_vompat = $bayemergencyplan['unruhe_vompat'];
				$this->view->unruhe_vomart = $bayemergencyplan['unruhe_vomart'];
				$this->view->unruhe_dosierung = $bayemergencyplan['unruhe_dosierung'];
				$this->view->unruhe_24std = $bayemergencyplan['unruhe_24std'];
				$this->view->darmverschluss_vompat = $bayemergencyplan['darmverschluss_vompat'];
				$this->view->darmverschluss_vomart = $bayemergencyplan['darmverschluss_vomart'];
				$this->view->darmverschluss_dosierung = $bayemergencyplan['darmverschluss_dosierung'];
				$this->view->darmverschluss_24std = $bayemergencyplan['darmverschluss_24std'];
				$this->view->schmerzen_vompat = $bayemergencyplan['schmerzen_vompat'];
				$this->view->schmerzen_vomart = $bayemergencyplan['schmerzen_vomart'];
				$this->view->schmerzen_dosierung = $bayemergencyplan['schmerzen_dosierung'];
				$this->view->schmerzen_24std = $bayemergencyplan['schmerzen_24std'];
				$this->view->fieber_vompat = $bayemergencyplan['fieber_vompat'];
				$this->view->fieber_vomart = $bayemergencyplan['fieber_vomart'];
				$this->view->fieber_dosierung = $bayemergencyplan['fieber_dosierung'];
				$this->view->fieber_24std = $bayemergencyplan['fieber_24std'];
				$this->view->rasselatmung_24std = $bayemergencyplan['rasselatmung_24std'];
				$this->view->ubelkeit_vompat = $bayemergencyplan['ubelkeit_vompat'];
				$this->view->ubelkeit_vomart = $bayemergencyplan['ubelkeit_vomart'];
				$this->view->ubelkeit_dosierung = $bayemergencyplan['ubelkeit_dosierung'];
				$this->view->ubelkeit_24std = $bayemergencyplan['ubelkeit_24std'];
				$this->view->delir_vompat = $bayemergencyplan['delir_vompat'];
				$this->view->delir_vomart = $bayemergencyplan['delir_vomart'];
				$this->view->delir_dosierung = $bayemergencyplan['delir_dosierung'];
				$this->view->delir_24std = $bayemergencyplan['delir_24std'];
				$this->view->krampfanfall_vompat = $bayemergencyplan['krampfanfall_vompat'];
				$this->view->krampfanfall_vomart = $bayemergencyplan['krampfanfall_vomart'];
				$this->view->krampfanfall_dosierung = $bayemergencyplan['krampfanfall_dosierung'];
				$this->view->krampfanfall_24std = $bayemergencyplan['krampfanfall_24std'];
			}
			else
			{
				$be_id = '';
			}

			$bayemergencyplan['be_id'] = $be_id;

			// 		$this->view->bayemergencyplan=$bayemergencyplan;

			$this->view->be_id = $be_id;

			if($this->getRequest()->isPost())
			{
				if(strlen($_POST['btnsave']) > 0 && empty($_POST['btnsubmit']))
				{
					$post = $_POST;
					$post['first_name'] = $this->view->first_name;
					$post['last_name'] = $this->view->last_name;
					$post['birthd'] = $this->view->birthd;

					if(empty($_POST['be_id']))
					{/* -----------------------save action----------------------------------- */
						$bepfr = new Application_Form_BayEmergencyPlan();
						$result = $bepfr->insertBayEmergencyPlan($_POST);
					}
					else
					{/* ------------------------edit action------------------------------------ */
						$kvno = new Application_Form_BayEmergencyPlan();
						$result_update = $kvno->updateBayEmergencyPlan($_POST);
					}

					$this->generateformPdf(4, $post, "notfallplan_medis_save", "bayernemergency_pdf.html"); // generate pdf after save
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				else if(strlen($_POST['btnsubmit']) > 0 && empty($_POST['btnsave']))
				{
					$post = $_POST;

					$post['first_name'] = $this->view->first_name;
					$post['last_name'] = $this->view->last_name;
					$post['birthd'] = $this->view->birthd;

					$this->generateformPdf(3, $post, 'NotfallplanMedis', "bayernemergency_pdf.html");
				}
			}
		}

		public function rpassessmentAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;

			$rpassessment = new Rpassessment();
			$rpassessment_form = new Application_Form_RpAssessment();
			$ph = new PatientHealthInsurance();
			$pc = new ContactPersonMaster();
			$sapv = new SapvVerordnung();
			$pat_loc = new PatientLocation();
			$pat_diagnosis = new PatientDiagnosis();
			$family_doctor = new FamilyDoctor();
			$nursing = new PatientPflegedienste();
			$client = Pms_CommonData::getClientData($clientid);

			
			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge
			{
			    $acknowledge = "1";
			    $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			    $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			/* ----------------------Patient Info & Tab menus-------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

// 			$patient_details = $patientmaster->getMasterData($decid, 0);
			$patient_details = $patientmaster->get_patientMasterData();
			$this->view->patient_details = $patient_details;
			$this->view->all_assessments = $rpassessment->get_patient_all_rpassessment($ipid);
			
			//get doctors user list
			
			$usergroup = new Usergroup();
			$MasterGroups = array("4", "5", "6");
			$usersgroups = $usergroup->getUserGroups($MasterGroups);
			
			if(count($usersgroups) > 0)
			{
				foreach($usersgroups as $group)
				{
					if($group['groupmaster'] == 4)
					{
						$groupsDocArray[] = $group['id'];
					}
					else
					{
						$groupsarray[] = $group['id'];
					}
				}
			}
			$pq = new User();
			$usersDoctorsArray = $pq->getuserbyGroupId($groupsDocArray, $clientid, true);
			$doctors['0'] = "Auswahl";
			foreach($usersDoctorsArray as $doctor)
			{
				$doctors[$doctor['id']] = $doctor['user_title'] . " " . $doctor['last_name'] . ", " . $doctor['first_name'];
			}
			$this->view->doctors = $doctors;

			$doctors['-1'] = "Anderer Arzt";
			
			$this->view->users = $doctors;
			
			
			if($this->getRequest()->isPost())
			{
			    if($acknowledge =="1")
			    {
			        $_POST['skip_trigger'] = "1";
			    }
			    
				if(empty($_POST['pdf']) && empty($_POST['new']))
				{
					$patient_medication_form = new Application_Form_Medication();
					$a_post = $_POST;
					for($i = 1; $i <= count($_POST['medication']); $i++)
					{
						if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
						{
							$a_post['newmids'][$i] = $_POST['drid'][$i];
							$a_post['newmedication'][$i] = $_POST['medication'][$i];
						}
					}

					if(is_array($a_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($a_post);

						foreach($dts as $key => $dt)
						{
							$a_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					$med_form = new Application_Form_PatientDrugPlan();
					$med_form->UpdateMultiData($a_post);
					//medication edit procedure end
					//medication add procedure start
					$add_post = $_POST['add'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 0;

					foreach($add_post['medication'] as $key => $val)
					{
						if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
						{
							$add_post['newmedication'][$key] = $add_post['medication'][$key];
						}
					}

					if(is_array($add_post['newmedication']))
					{
						$dts = $patient_medication_form->InsertNewData($add_post);
						foreach($dts as $key => $dt)
						{
							$add_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					$med_form->InsertMultiData($add_post);
					if(count($_POST['addbedarf']) > 0)
					{
						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();

						$add_post_bedarf = $_POST['addbedarf'];
						$add_post_bedarf['ipid'] = $ipid;
						$add_post_bedarf['isbedarfs'] = 1;
						$add_post_bedarf['verordnetvon'] = $_POST['verordnetvon'];

						foreach($add_post_bedarf['medication'] as $key => $val)
						{
							if(strlen($add_post_bedarf['medication'][$key]) > 0 && strlen($add_post_bedarf['hidd_medication'][$key]) < 1)
							{
								$add_post_bedarf['newmedication'][$key] = $add_post_bedarf['medication'][$key];
							}
						}

						if(is_array($add_post_bedarf['newmedication']))
						{
							$dts = $patient_medication_form->InsertNewData($add_post_bedarf);
							foreach($dts as $key => $dt)
							{
								$add_post_bedarf['newhidd_medication'][$key] = $dt->id;
							}
						}
						$med_form->InsertMultiData($add_post_bedarf);
					}
                    if(count($_POST['addcrisis']) > 0)
					{
						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();

						$add_post_crisis = $_POST['addcrisis'];
						$add_post_crisis['ipid'] = $ipid;
						$add_post_crisis['iscrisis'] = 1;
                        $add_post_crisis['isbedarfs'] = 0;
						$add_post_crisis['verordnetvon'] = $_POST['verordnetvon'];

						foreach($add_post_crisis['medication'] as $key => $val)
						{
							if(strlen($add_post_crisis['medication'][$key]) > 0 && strlen($add_post_crisis['hidd_medication'][$key]) < 1)
							{
								$add_post_crisis['newmedication'][$key] = $add_post_crisis['medication'][$key];
							}
						}

						if(is_array($add_post_crisis['newmedication']))
						{
							$dts = $patient_medication_form->InsertNewData($add_post_crisis);
							foreach($dts as $key => $dt)
							{
								$add_post_crisis['newhidd_medication'][$key] = $dt->id;
							}
						}
						$med_form->InsertMultiData($add_post_crisis);
					}

					//add iv medis
					if(count($_POST['addiv']) > 0)
					{
						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();

						$add_post_iv = $_POST['addiv'];
						$add_post_iv['ipid'] = $ipid;
						$add_post_iv['isbedarfs'] = 0;
						$add_post_iv['isivmed'] = 1;
						$add_post_iv['verordnetvon'] = $_POST['verordnetvon'];

						foreach($add_post_iv['medication'] as $key => $val)
						{
							if(strlen($add_post_iv['medication'][$key]) > 0 && strlen($add_post_iv['hidd_medication'][$key]) < 1)
							{
								$add_post_iv['newmedication'][$key] = $add_post_iv['medication'][$key];
							}
						}

						if(is_array($add_post_iv['newmedication']))
						{
							$dts = $patient_medication_form->InsertNewData($add_post_iv);
							foreach($dts as $key => $dt)
							{
								$add_post_iv['newhidd_medication'][$key] = $dt->id;
							}
						}

						$med_form->InsertMultiData($add_post_iv);
					}
				}
				// medication add procedure start
				//add schmerzepumpe medis START
				if(count($_POST['add_schmerze']) > 0)
				{
					$s_post = $_POST['add_schmerze'];
					$s_post['cocktailDescription'] = $_POST['cocktailDescription'];
					$s_post['bolus'] = $_POST['bolus'];
					$s_post['flussrate'] = $_POST['flussrate'];
					$s_post['sperrzeit'] = $_POST['sperrzeit'];
					$s_post['cocktailhid'] = $_POST['cocktailhid'];
					$s_post['isschmerzpumpe'] = '1';

					foreach($s_post['medication'] as $amedikey => $amedi)
					{
						if(strlen($amedi) > 0 && empty($s_post['hidd_medication'][$amedikey]) && !empty($s_post['drid'][$amedikey]) && !empty($s_post['medication'][$amedikey]))
						{
							$s_post['newmids'][$amedikey] = $s_post['drid'][$amedikey];
							$s_post['newmedication'][$amedikey] = $amedi;
						}

						if(strlen($amedi) > 0 && (!empty($s_post['hidd_medication'][$amedikey]) && empty($s_post['drid'][$amedikey]) && !empty($s_post['medication'][$amedikey])))
						{
							$s_post['newmids'][$amedikey] = $s_post['hidd_medication'][$amedikey];
							$s_post['newmedication'][$amedikey] = $amedi;
						}

						if(strlen($amedi) > 0 && (empty($s_post['hidd_medication'][$amedikey]) && empty($s_post['drid'][$amedikey]) && !empty($s_post['medication'][$amedikey])))
						{
							$s_post['newmedication'][$amedikey] = $amedi;
						}
					}


					if(is_array($s_post['newmedication']))
					{
						$patient_medication_form = new Application_Form_Medication();
						$dts = $patient_medication_form->InsertNewData($s_post);
						foreach($dts as $key => $dt)
						{
							$s_post['newhidd_medication'][$key] = $dt->id;
						}
					}

					$med_form = new Application_Form_PatientDrugPlan();

					if($_POST['cocktailhid'] > "0")
					{
						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();
						$med_form->UpdateSchmerzepumpeMultiData($s_post);

						//find out edited/added medis
						$list = false;

						//show schmerze details if medis are changed
						foreach($s_post['medication'] as $k_meds => $v_meds)
						{
							$cust = Doctrine::getTable('PatientDrugPlan')->find($s_post['drid'][$k_meds]);
							if($cust)
							{

								if($cust->dosage != $s_post['dosage'][$k_meds] ||
									$cust->medication_master_id != $s_post['hidd_medication'][$k_meds] ||
									$cust->verordnetvon != $s_post['verordnetvon'][$k_meds])
								{
									$list = true; //list shmerze details
								}
							}
						}

						if($list == true)
						{
							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("Q");
							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Kommentar: " . $s_post['cocktailDescription'] . "\n  Bolus: " . $s_post['bolus'] . "\nFlussrate: " . $s_post['flussrate'] . "\nSperrzeit: " . $s_post['sperrzeit'] . ""));
// 							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Kommentar: " . $s_post['cocktailDescription'] . "\n  Bolus: " . $s_post['bolus'] . "\nFlussrate: " . $s_post['flussrate'] . ""));
							$cust->user_id = $logininfo->userid;
							$cust->save();
						}
					}
					else
					{
						$med_form = new Application_Form_PatientDrugPlan();
						$patient_medication_form = new Application_Form_Medication();
						$med_form->InsertMultiData($s_post);

						if($s_post['isschmerzpumpe'] == 1)
						{
							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("Q");
// 							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Kommentar: " . $s_post['cocktailDescription'] . "\n  Bolus: " . $s_post['bolus'] . "\nFlussrate: " . $s_post['flussrate'] . ""));
							$cust->course_title = Pms_CommonData::aesEncrypt(addslashes("Kommentar: " . $s_post['cocktailDescription'] . "\n  Bolus: " . $s_post['bolus'] . "\nFlussrate: " . $s_post['flussrate'] . "\nSperrzeit: " . $s_post['sperrzeit'] . ""));
							$cust->user_id = $logininfo->userid;
							$cust->save();
						}
					}
				}
				
				//get medis pdf
				$pq = new User();
				$pqarr = $pq->getUserByClientid($clientid);
				$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);
				$this->view->client_users = $pq->getUserByClientid($clientid);
				$this->view->kvnodelicon = "1";
				$comma = ",";
				$userval = "'0'";

				foreach($pqarr as $key => $val)
				{
					$userval .= $comma . "'" . $val['id'] . "'";
					$comma = ",";
				}

				$usergroup = new Usergroup();
				$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));

				$users = $pq->getuserbyidsandGroupId($userval, $groupid, 1);
				$this->view->users = $users;
				$this->view->jsusers = json_encode($users);

//					get all client users -> For medis dropdown
				$allUserArray = $pq->getUserByClientid($clientid);
				$userarraylastall[] = $this->view->translate('selectuser');
				foreach($allUserArray as $user)
				{
					$userarraylastall[$user['id']] = trim($user['last_name']) . ", " . trim($user['first_name']);
				}
				$this->view->allUsers = $userarraylastall;
				$this->view->pid = $_GET['id'];
				$this->view->caseclass = "active";

				//normal medis
				$medic = new PatientDrugPlan();
				$medicarr1 = $medic->getMedicationPlan($decid);

				if(count($medicarr1 < 1))
				{
					$this->view->mcntr = 0;
				}

				$medication_master_ids[] = '999999999';
				foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
				{
					$medication_master_ids['normal'][] = $v_medicarr1['medication_master_id'];
				}


				$medarr1 = Medication::getMedicationById($medication_master_ids['normal']);

				foreach($medarr1 as $k_medarr1 => $v_medarr1)
				{
					$med_arr1[$v_medarr1['id']] = $v_medarr1;
				}

				$this->view->medarr1 = $med_arr1;

				if($this->getRequest()->isPost())
				{
					$medi_str = array();
					foreach($medicarr1 as $k_medi1 => $v_medi1)
					{
						$medi_str[] = $med_arr1[$v_medi1['medication_master_id']]['name'] . ' | ' . $v_medi1['dosage'] . ' | ' . $v_medi1['comments'];
					}

					$_POST['medications_pdf'] = $medi_str;
				}

				//deleted medis
				$this->view->ajx = 1;
				$this->view->cntr = count($medicarr1);

				$medicarr2 = $medic->getDeletedMedication($decid);
				$c_ids[] = '-1';
				$cocktail_medis[] = '99999999';

				foreach($medicarr2 as $k_med_del => $v_med_del)
				{
					if($v_med_del['cocktailid'] > 0)
					{
						$c_ids[] = $v_med_del['cocktailid'];
						$cocktail_medis[$v_med_del['cocktailid']][] = $v_med_del['id'];
					}
					$medication_master_ids['deleted'][] = $v_med_del['medication_master_id'];
				}
				$c_ids = array_values(array_unique($c_ids));
				$cocktail_id = max($c_ids);

				$cocktails = new PatientDrugPlanCocktails();
				$cocktails_drugs = $cocktails->countDrugsPerCocktail($c_ids);

				$this->view->cocktailNo = $cocktails_drugs;
				$this->view->cocktail_medis = $cocktail_medis;
				$this->view->cocktail_id = $cocktail_id;

				$medarr2 = Medication::getMedicationById($medication_master_ids['deleted']);
				foreach($medarr2 as $k_medarr2 => $v_medarr2)
				{
					$med_arr2[$v_medarr2['id']] = $v_medarr2;
				}
				$this->view->medarr2 = $med_arr2;


				//bedarf medis
				$medicarr = $medic->getbedarfMedication($decid);
				foreach($medicarr as $k_medicarr => $v_medicarr)
				{
					$medication_master_ids['bedarfs'][] = $v_medicarr['medication_master_id'];
				}

				$medarr = Medication::getMedicationById($medication_master_ids['bedarfs']);

				foreach($medarr as $k_medarr => $v_medarr)
				{
					$med_arr[$v_medarr['id']] = $v_medarr;
				}

				$this->view->medarr1 = $med_arr;
				$this->view->counter = count($medicarr1);


				if($this->getRequest()->isPost())
				{
					$medi_str_b = array();
					foreach($medicarr as $k_medi => $v_medi)
					{
						$medi_str_b[] = $med_arr[$v_medi['medication_master_id']]['name'] . ' | ' . $v_medi['dosage'] . ' | ' . $v_medi['comments'];
					}

					$_POST['bedarfsmedications_pdf'] = $medi_str_b;
				}

                //ISPC-2563, Elena 25.06.2020
				// display crisis medication
                $medicarr_crisis = $medic->getCrisisMedication($decid);
				//print_r($medicarr_crisis);
                foreach($medicarr_crisis as $k_medicarr => $v_medicarr)
                {
                    $medication_master_ids['crisis'][] = $v_medicarr['medication_master_id'];
                }
                $medarr_crisis = Medication::getMedicationById($medication_master_ids['crisis']);

                foreach($medarr_crisis as $k_medarr => $v_medarr)
                {
                    $med_arr_crisis[$v_medarr['id']] = $v_medarr;
                    $med_arr[$v_medarr['id']] = $v_medarr;
                }
                //$this->view->medarr1 = $med_arr;


                $this->view->medarr_crisis = $med_arr_crisis;

                $grid = new Pms_Grid($medicarr_crisis, 1, count($medicarr_crisis)  , "new_listpatientmedicationcrisisedit.html");


                //$grid->medication_master_array = $medication_master_array;
                $this->view->crisismedications = $grid->renderGrid();
                $this->view->counter = count($medicarr) + count($medicarr1) +  count($medicarr_crisis);

                if($this->getRequest()->isPost())
                {
                    $medicarr_crisis = Pms_CommonData::clear_pdf_data($medicarr_crisis);
                    $grid_pdf = new Pms_Grid($medicarr_crisis, 1, count($medicarr_crisis), "newpatientmedicationedit_pdf.html");
                    $this->view->crisismedications_pdf = $grid_pdf->renderGrid();


                }
                if($this->getRequest()->isPost())
                {
                    $medi_str_c = array();
                    foreach($medicarr_crisis as $k_medi => $v_medi)
                    {
                        $medi_str_c[] = $med_arr[$v_medi['medication_master_id']]['name'] . ' | ' . $v_medi['dosage'] . ' | ' . $v_medi['comments'];
                    }

                    $_POST['crisismedications_pdf'] = $medi_str_c;
                }


                //ivmedis
				$medicarr_iv = $medic->getivMedication($decid);
				foreach($medicarr_iv as $k_medicarr => $v_medicarr)
				{
					$medication_master_ids['ivmedis'][] = $v_medicarr['medication_master_id'];
				}


				$medarr = Medication::getMedicationById($medication_master_ids['ivmedis']);

				foreach($medarr as $k_medarr => $v_medarr)
				{
					$med_arr[$v_medarr['id']] = $v_medarr;
				}
				$this->view->medarr1 = $med_arr;

				$this->view->counter = count($medicarr1) + count($medicarr);

				if($this->getRequest()->isPost())
				{
					$medi_str_iv = array();
					foreach($medicarr_iv as $k_medi => $v_medi)
					{
						$medi_str_iv[] = $med_arr[$v_medi['medication_master_id']]['name'] . ' | ' . $v_medi['dosage'] . ' | ' . $v_medi['comments'];
					}

					$_POST['ivmedications_pdf'] = $medi_str_iv;
				}

				$this->view->counter = count($medicarr1) + count($medicarr2) + count($medicarr) + count($medicarr_iv);

				
				
				//deleted medis
				//TODO-1495
				$medicarr_deleted = $medic->getMedicationPlanAll($decid,true,true);

				foreach($medicarr_deleted as $k_medicarr => $v_medicarr)
				{
				    if ($v_medicarr['isdelete'] == 1){
    					$medication_master_ids['del_medis'][] = $v_medicarr['medication_master_id'];
				    }
				}


				$medarr_del = Medication::getMedicationById($medication_master_ids['del_medis']);

				$med_arr_del = array();
				foreach($medarr_del as $k_medarr => $v_medarr)
				{
					$med_arr_del[$v_medarr['id']] = $v_medarr;
				}
				if($this->getRequest()->isPost())
				{
					$medi_str_del = array();
					foreach($medicarr_deleted as $k_medi => $v_medi)
					{
					    if ($v_medi['isdelete'] == "1"){
    						$medi_str_del[] = $med_arr_del[$v_medi['medication_master_id']]['name'] . ' | ' . $v_medi['dosage'] . ' | ' . $v_medi['comments'];
					    }
					}

					$_POST['del_medications_pdf'] = $medi_str_del;
				}

				//END deleted medis
				
				
				
				
				
				//schmerzpumpe list START
				$smparr = $medic->getSchmerzpumpeMedication($decid);

				foreach($smparr as $smpMedication)
				{
					$smpMedicationArr[] = $smpMedication['cocktailid'];
				}
				$smpMedicationArray = array_values(array_unique($smpMedicationArr));

				$cocktails = new PatientDrugPlanCocktails();
				$cocktails = $cocktails->getDrugCocktails($smpMedicationArray);

				foreach($smparr as $smpkey => $medicationsmp)
				{
					$smpFinalArr[] = $medicationsmp;
					if($smparr[($smpkey + 1)]['cocktailid'] != $medicationsmp['cocktailid'])
					{
						$smpFinalArr[$smpkey]['smpdescription'] = $cocktails[$medicationsmp['cocktailid']];
					}
					else
					{
						$smpFinalArr[$smpkey]['smpdescription'] = "0";
					}
					$medication_master_ids['schmerze'][] = $medicationsmp['medication_master_id'];
				}


				$medarr = Medication::getMedicationById($medication_master_ids['schmerze']);

				foreach($medarr as $k_medarr => $v_medarr)
				{
					$med_arr[$v_medarr['id']] = $v_medarr;
				}

				$this->view->medarr1 = $med_arr;
				if($this->getRequest()->isPost())
				{
					$medi_str_sch = array();
					foreach($smpFinalArr as $k_medi_s => $v_medi_s)
					{
						$medi_str_sch[$v_medi_s['cocktailid']]['medis'][] = $med_arr[$v_medi_s['medication_master_id']]['name'] . ' | ' . $v_medi_s['dosage'];
						$medi_str_sch[$v_medi_s['cocktailid']]['comment'] = $v_medi_s['smpdescription']['description'];
						$medi_str_sch[$v_medi_s['cocktailid']]['bolus'] = $v_medi_s['smpdescription']['bolus'];
						$medi_str_sch[$v_medi_s['cocktailid']]['flussrate'] = $v_medi_s['smpdescription']['flussrate'];
						$medi_str_sch[$v_medi_s['cocktailid']]['sperrzeit'] = $v_medi_s['smpdescription']['sperrzeit'];
					}

					$_POST['schmerzemedications_pdf'] = $medi_str_sch;
				}
				//schmerzpumpe add/edit END
				//end get MEDICATIONS PDF
				
				if($_POST['save'] && empty($_POST['fid']))
				{
					$post = $_POST;
					$rp_assessment_id = $rpassessment_form->insert_rp_assessment($post, $ipid);

					// ISPC-2406 Lore 15.01.2020
					FormsEditmodeTable::finishedEditing([
					    'pathname' => $this->getRequest()->getControllerName() . "/" . $this->getRequest()->getActionName(),
					    'client_id' => $this->logininfo->clientid,
					    'patient_master_id' => $decid,
					    'user_id' => $this->logininfo->userid,
					    'search' => 'rpassessment_id=0',
					    'is_edited' => 'yes',
					]);
					//.
					
					if($rp_assessment_id)
					{
						if($post['iscompleted'][0] == '1')
						{
							//write in verlauf "Assesment von DATE OF COMPLETION"
							$end_date = end($post['completed_date']);
							$custcourse = new PatientCourse();
							$custcourse->ipid = $ipid;
							$custcourse->course_date = date("Y-m-d H:i:s", time());
							$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
							$comment = "RP-Assesment von " . $end_date;
							$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
							$custcourse->user_id = $userid;
							$custcourse->save();

							//completed!
							$custcourse = new PatientCourse();
							$custcourse->ipid = $ipid;
							$custcourse->course_date = date("Y-m-d H:i:s", time());
							$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
							$comment = "RP-Assessment wurde abgeschlossen";
							$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
							$custcourse->user_id = $userid;
							$custcourse->save();

							$post['rpassessment_header_text'] = $this->view->translate('rpassessment_header_text');
														
							$post['iscompleted'] = "1";
							$post['completed_date'] = $end_date;
							
							$this->generateformPdf(4, $post, 'rpassessment', "rpassessment_pdf.html");

							$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
							exit;
						}
						else
						{

							$this->redirect(APP_BASE . 'patientform/rpassessment?id=' . $_REQUEST['id']);
							exit;
						}
					}
					else
					{
						$this->retainValues($_POST);
					}
				}
				else if($_POST['save'] && strlen($_POST['fid']) > 0)
				{
					$post = $_POST;

					$rp_assessment = $rpassessment_form->update_rp_assessment($post, $ipid);
					$last_iscompleted = end($post['iscompleted']);

					// ISPC-2406 Lore 15.01.2020
					FormsEditmodeTable::finishedEditing([
					    'pathname' => $this->getRequest()->getControllerName() . "/" . $this->getRequest()->getActionName(),
					    'client_id' => $this->logininfo->clientid,
					    'patient_master_id' => $decid,
					    'user_id' => $this->logininfo->userid,
					    'search' => 'rpassessment_id='.$_POST['fid'] ,
					    'is_edited' => 'yes',
					]);
					//.
					
					if($last_iscompleted == '1')
					{
						//write in verlauf "Assesment von DATE OF COMPLETION"
						$end_date = end($post['completed_date']);
						$custcourse = new PatientCourse();
						$custcourse->ipid = $ipid;
						$custcourse->course_date = date("Y-m-d H:i:s", time());
						$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
						$comment = "RP-Assesment von " . $end_date;
						$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
						$custcourse->user_id = $userid;
						$custcourse->save();

						//completed!
						$custcourse = new PatientCourse();
						$custcourse->ipid = $ipid;
						$custcourse->course_date = date("Y-m-d H:i:s", time());
						$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
						$comment = "RP-Assessment wurde abgeschlossen";
						$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
						$custcourse->user_id = $userid;
						$custcourse->save();

						$post['rpassessment_header_text'] = $this->view->translate('rpassessment_header_text');
						
						
						$post['iscompleted'] = "1";
						$end_date = end($post['completed_date']);
						$post['completed_date'] = $end_date;
						
						$this->generateformPdf(4, $post, 'rpassessment', "rpassessment_pdf.html");

						$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
						exit;
					}
					else
					{
						$this->redirect(APP_BASE . 'patientform/rpassessment?id=' . $_REQUEST['id']);
						exit;
					}
				}
				else if($_POST['new'])
				{
					//close assessment forms in order to get system data
					$rp_assessment_id = $rpassessment_form->close_forms($ipid);

					$this->redirect(APP_BASE . 'patientform/rpassessment?id=' . $_REQUEST['id'] . '&new=1');
					exit;
				}
						
			}
			
			//get last saved assessment
			$last_assessment_data = $rpassessment->get_patient_last_rpassessment($ipid, true);

			if($last_assessment_data && $_REQUEST['new'] != 1 && $_REQUEST['load_old'] != 1)
			{
				$last_assessment_id = $last_assessment_data['id'];
				$this->view->last_assessment_id = $last_assessment_data['id'];
			}

			if(($last_assessment_id > 0 && !$this->getRequest()->isPost()) && $_REQUEST['new'] != 1)
			{
				$rpa_id = $last_assessment_id;
				$patient_rpassessment_data = $last_assessment_data;

				//process data before we bind it to $this-view
				if($patient_rpassessment_data['rp_pat_birthd'] != '0000-00-00 00:00:00')
				{
					$patient_rpassessment_data['rp_pat_birthd'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_pat_birthd']));
				}
				else
				{
					$patient_rpassessment_data['rp_pat_birthd'] = '';
				}

				if($patient_rpassessment_data['rp_start_date_erst'] != '0000-00-00 00:00:00')
				{
					$patient_rpassessment_data['rp_start_date_erst'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_start_date_erst']));
				}
				else
				{
					$patient_rpassessment_data['rp_start_date_erst'] = '';
				}

				if($patient_rpassessment_data['rp_date_erst'] != '0000-00-00 00:00:00')
				{
					$patient_rpassessment_data['rp_date_erst'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_date_erst']));
				}
				else
				{
					$patient_rpassessment_data['rp_date_erst'] = '';
				}

				if($patient_rpassessment_data['rp_start_date_folge'] != '0000-00-00 00:00:00')
				{
					$patient_rpassessment_data['rp_start_date_folge'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_start_date_folge']));
				}
				else
				{
					$patient_rpassessment_data['rp_start_date_folge'] = '';
				}

				if($patient_rpassessment_data['rp_date_folge'] != '0000-00-00 00:00:00')
				{
					$patient_rpassessment_data['rp_date_folge'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_date_folge']));
				}
				else
				{
					$patient_rpassessment_data['rp_date_folge'] = '';
				}

				if($patient_rpassessment_data['rp_last_day_sapv'] != '0000-00-00 00:00:00')
				{
					$patient_rpassessment_data['rp_last_day_sapv'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_last_day_sapv']));
				}
				else
				{
					$patient_rpassessment_data['rp_last_day_sapv'] = '';
				}

				if($patient_rpassessment_data['rp_last_hosp_date'] != '0000-00-00 00:00:00')
				{
					$patient_rpassessment_data['rp_last_hosp_date'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_last_hosp_date']));
				}
				else
				{
					$patient_rpassessment_data['rp_last_hosp_date'] = '';
				}

				if($patient_rpassessment_data['sapv_support_date'] != '0000-00-00 00:00:00')
				{
					$patient_rpassessment_data['sapv_support_date'] = date('d.m.Y', strtotime($patient_rpassessment_data['sapv_support_date']));
				}
				else
				{
					$patient_rpassessment_data['sapv_support_date'] = '';
				}

				if($patient_rpassessment_data['completed_date'] !== '0000-00-00 00:00:00')
				{
					$patient_rpassessment_data['completed_date'] = date('d.m.Y', strtotime($patient_rpassessment_data['completed_date']));
				}
				else
				{
					$patient_rpassessment_data['completed_date'] = date('d.m.Y', time());
				}


				$patient_rpassessment_data['rp_sapv_erst'] = explode(',', $patient_rpassessment_data['rp_sapv_erst']);
				$patient_rpassessment_data['rp_sapv_folge'] = explode(',', $patient_rpassessment_data['rp_sapv_folge']);
				$patient_rpassessment_data['rp_patient_located'] = explode(',', $patient_rpassessment_data['rp_patient_located']);
				$patient_rpassessment_data['rp_patient_supervised'] = explode(',', $patient_rpassessment_data['rp_patient_supervised']);
				$patient_rpassessment_data['rp_death_image'] = explode(',', $patient_rpassessment_data['rp_death_image']);
				$patient_rpassessment_data['rp_disease_phase'] = explode(',', $patient_rpassessment_data['rp_disease_phase']);
				$patient_rpassessment_data['rp_symptom_factor'] = explode(',', $patient_rpassessment_data['rp_symptom_factor']);
				$patient_rpassessment_data['rp_facts_advice'] = explode(',', $patient_rpassessment_data['rp_facts_advice']);
				$patient_rpassessment_data['rp_involved_options'] = explode(',', $patient_rpassessment_data['rp_involved_options']);
				$patient_rpassessment_data['rp_care_needs'] = explode(',', $patient_rpassessment_data['rp_care_needs']);
				$patient_rpassessment_data['rp_treatment_plan_providers'] = explode(',', $patient_rpassessment_data['rp_treatment_plan_providers']);
				$patient_rpassessment_data['rp_treatment_plan'] = explode(',', $patient_rpassessment_data['rp_treatment_plan']);
				$patient_rpassessment_data['rp_effort_estimated'] = explode(',', $patient_rpassessment_data['rp_effort_estimated']);
				$patient_rpassessment_data['rp_sapv_reg'] = explode(',', $patient_rpassessment_data['rp_sapv_reg']);

				$patient_rpassessment_data['iscompleted'] = $patient_rpassessment_data['iscompleted'];

				$this->retainValues($patient_rpassessment_data);
			}
			else
			{
				if($_REQUEST['load_old'] == 1)
				{
					$patient_rpassessment_data = $last_assessment_data;
				
					//process data before we bind it to $this-view
					if($patient_rpassessment_data['rp_pat_birthd'] != '0000-00-00 00:00:00')
					{
						$patient_rpassessment_data['rp_pat_birthd'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_pat_birthd']));
					}
					else
					{
						$patient_rpassessment_data['rp_pat_birthd'] = '';
					}
					
					if($patient_rpassessment_data['rp_start_date_erst'] != '0000-00-00 00:00:00')
					{
						$patient_rpassessment_data['rp_start_date_erst'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_start_date_erst']));
					}
					else
					{
						$patient_rpassessment_data['rp_start_date_erst'] = '';
					}
					
					if($patient_rpassessment_data['rp_date_erst'] != '0000-00-00 00:00:00')
					{
						$patient_rpassessment_data['rp_date_erst'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_date_erst']));
					}
					else
					{
						$patient_rpassessment_data['rp_date_erst'] = '';
					}
					
					//ISPC-2690 pct.2 Lore 16.10.2020
					$patient_rpassessment_data['rp_start_date_folge'] = '';
					$patient_rpassessment_data['rp_date_folge'] = '';
/* 					if($patient_rpassessment_data['rp_start_date_folge'] != '0000-00-00 00:00:00')
					{
						$patient_rpassessment_data['rp_start_date_folge'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_start_date_folge']));
					}
					else
					{
						$patient_rpassessment_data['rp_start_date_folge'] = '';
					} 
								
					if($patient_rpassessment_data['rp_date_folge'] != '0000-00-00 00:00:00')
					{
						$patient_rpassessment_data['rp_date_folge'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_date_folge']));
					}
					else
					{
						$patient_rpassessment_data['rp_date_folge'] = '';
					}*/


					if($patient_rpassessment_data['rp_last_day_sapv'] != '0000-00-00 00:00:00')
					{
						$patient_rpassessment_data['rp_last_day_sapv'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_last_day_sapv']));
					}
					else
					{
						$patient_rpassessment_data['rp_last_day_sapv'] = '';
					}
					
					if($patient_rpassessment_data['rp_last_hosp_date'] != '0000-00-00 00:00:00')
					{
						$patient_rpassessment_data['rp_last_hosp_date'] = date('d.m.Y', strtotime($patient_rpassessment_data['rp_last_hosp_date']));
					}
					else
					{
						$patient_rpassessment_data['rp_last_hosp_date'] = '';
					}
					
					if($patient_rpassessment_data['sapv_support_date'] != '0000-00-00 00:00:00')
					{
						$patient_rpassessment_data['sapv_support_date'] = date('d.m.Y', strtotime($patient_rpassessment_data['sapv_support_date']));
					}
					else
					{
						$patient_rpassessment_data['sapv_support_date'] = '';
					}
					
					if($patient_rpassessment_data['completed_date'] !== '0000-00-00 00:00:00')
					{
						$patient_rpassessment_data['completed_date'] = date('d.m.Y', strtotime($patient_rpassessment_data['completed_date']));
					}
					else
					{
						$patient_rpassessment_data['completed_date'] = date('d.m.Y', time());
					}
					
					//ISPC-2690 pct.2 Lore 16.10.2020
					$patient_main_diag = $pat_diagnosis->get_main_diagnosis($ipid, $clientid);
					$patient_side_diag = $pat_diagnosis->get_side_diagnosis($ipid, $clientid);
					$patient_rpassessment_data['rp_icd_values'] = implode(', ', $patient_main_diag['icd']);
					$patient_rpassessment_data['rp_main_diagnosis'] = implode(', ', $patient_main_diag['all_str']);
					$patient_rpassessment_data['rp_side_diagnosis'] = implode(', ', $patient_side_diag['all_str']);
					//.
					
					$patient_rpassessment_data['rp_sapv_erst'] = explode(',', $patient_rpassessment_data['rp_sapv_erst']);
					//$patient_rpassessment_data['rp_sapv_folge'] = explode(',', $patient_rpassessment_data['rp_sapv_folge']);
					//ISPC-2690 pct.2 Lore 16.10.2020
					$patient_rpassessment_data['rp_sapv_folge'] = array();
					
					$patient_rpassessment_data['rp_patient_located'] = explode(',', $patient_rpassessment_data['rp_patient_located']);
					$patient_rpassessment_data['rp_patient_supervised'] = explode(',', $patient_rpassessment_data['rp_patient_supervised']);
					$patient_rpassessment_data['rp_death_image'] = explode(',', $patient_rpassessment_data['rp_death_image']);
					$patient_rpassessment_data['rp_disease_phase'] = explode(',', $patient_rpassessment_data['rp_disease_phase']);
					$patient_rpassessment_data['rp_symptom_factor'] = explode(',', $patient_rpassessment_data['rp_symptom_factor']);
					$patient_rpassessment_data['rp_facts_advice'] = explode(',', $patient_rpassessment_data['rp_facts_advice']);
					$patient_rpassessment_data['rp_involved_options'] = explode(',', $patient_rpassessment_data['rp_involved_options']);
					$patient_rpassessment_data['rp_care_needs'] = explode(',', $patient_rpassessment_data['rp_care_needs']);
					$patient_rpassessment_data['rp_treatment_plan_providers'] = explode(',', $patient_rpassessment_data['rp_treatment_plan_providers']);
					$patient_rpassessment_data['rp_treatment_plan'] = explode(',', $patient_rpassessment_data['rp_treatment_plan']);
					$patient_rpassessment_data['rp_effort_estimated'] = explode(',', $patient_rpassessment_data['rp_effort_estimated']);
					$patient_rpassessment_data['rp_sapv_reg'] = explode(',', $patient_rpassessment_data['rp_sapv_reg']);
					
					$patient_rpassessment_data['iscompleted'] = '0';
					
					$this->retainValues($patient_rpassessment_data);
				}
				else
				{
				//patient details
				$this->view->rp_pat_first_name = $patient_details['first_name'];
				$this->view->rp_pat_last_name = $patient_details['last_name'];

				$this->view->rp_pat_birthd = $patient_details['birthd'];

				$this->view->rp_pat_address = $patient_details['street1'];
				if(strlen($patient_details['street2']) > '0')
				{
					$this->view->rp_pat_address .= ', ' . $patient_details['street2'];
				}

				if(strlen($patient_details['zip']) > '0')
				{
					$this->view->rp_pat_zip_city = $patient_details['zip'];
				}

				if(strlen($patient_details['city']) > '0')
				{
					$this->view->rp_pat_zip_city .= ' ' . $patient_details['city'];
				}

				$this->view->rp_pat_phone = $patient_details['phone'];
				$this->view->rp_pat_epid = strtoupper($patient_details['epid']);

				if(strlen(trim($client[0]['team_name'])) > 0)
				{
					$team_parts[] = trim($client[0]['team_name']);
				}

				if(strlen(trim($client[0]['street1'])) > 0)
				{
					$team_parts[] = trim($client[0]['street1']);
				}

				if(strlen(trim($client[0]['postcode'])) > 0)
				{
					$team_parts[] = trim($client[0]['postcode']);
				}

				if(strlen(trim($client[0]['city'])) > 0)
				{
					$team_parts[] = trim($client[0]['city']);
				}
                //ISPC-2931,Elena,28.05.2021
                if(strlen(trim($client[0]['phone'])) > 0)
				{
					$team_parts[] = 'Tel. ' . trim($client[0]['phone']);
				}
                if(strlen(trim($client[0]['fax'])) > 0)
				{
					$team_parts[] = 'Fax ' . trim($client[0]['fax']);
				}

				$this->view->rp_sapv_team = implode(', ', $team_parts);



				//1. health insurance
				$patient_hi = $ph->getPatientHealthInsurance($ipid);

				$rp_health_insurance = array();
				if(strlen($patient_hi[0]['company_name']) > '0')
				{
					$rp_health_insurance[] = $patient_hi[0]['company_name'];
				}

				if(strlen($patient_hi[0]['ins_street']) > '0' || strlen($patient_hi[0]['ins_zip']) > '0' || strlen($patient_hi[0]['ins_city']) > '0')
				{
					$rp_health_insurance[] = $patient_hi[0]['ins_street'] . ' ' . $patient_hi[0]['ins_zip'] . ' ' . $patient_hi[0]['ins_city'];
				}

				if(strlen($patient_hi[0]['ins_phonefax']))
				{
					$rp_health_insurance[] = $patient_hi[0]['ins_phonefax'];
				}
				$this->view->rp_health_insurance = implode(', ', $rp_health_insurance);

				//2. get contact person legal guardian
				$pat_cnt_lg = $pc->getPatientLegalguardian($ipid);

				$lg_arr = array();
				if($pat_cnt_lg)
				{
					foreach($pat_cnt_lg as $k_lg => $v_lg)
					{
						$lg_arr[] = $v_lg['cnt_last_name'] . ', ' . $v_lg['cnt_first_name'] . ' ' . $v_lg['cnt_street1'] . ' ' . $v_lg['cnt_zip'] . ' ' . $v_lg['cnt_city'];
					}
				}
				//legal guardian
				$this->view->rp_vat_representative = implode('; ', $lg_arr);


				//3. get contact person (Ist Kontakt-Telefonnummer checked)
				//ISPC-2045
				$pcp_ids = array();
				foreach ($patient_details['PatientContactphone'] as $PatientContactphone) {
					if ($PatientContactphone['parent_table'] == 'ContactPersonMaster') {
						$pcp_ids[] = $PatientContactphone['table_id'];
					}
				}
				$contact_persons = $pc->getById($pcp_ids);
				
				$real_contact_person = '';
				$from_old_Kontakt_Telefonnummer = false;
				if( empty($contact_persons) && $patient_details['kontactnumbertype'] == '2' && strlen($patient_details['kontactnumber']))
				{
					//get all contact persons
					$contact_persons = $pc->getPatientContact($ipid);
					$from_old_Kontakt_Telefonnummer = true;
				}

				$rp_info_dependant = array();
				if($contact_persons)
				{
					foreach($contact_persons as $k_cnt_pers => $v_cnt_pers)
					{
						$contact_pers_parts = array();
						if( ! $from_old_Kontakt_Telefonnummer || $v_cnt_pers['cnt_phone'] == $patient_details['kontactnumber'])
						{
							if(strlen(trim($v_cnt_pers['cnt_last_name'])) > 0)
							{
								$contact_pers_parts[0] = trim($v_cnt_pers['cnt_last_name']);
							}
							if(strlen(trim($v_cnt_pers['cnt_first_name'])) > 0)
							{
								if(strlen($v_cnt_pers['cnt_last_name']) > 0)
								{
									$contact_pers_parts[0] .= ', ' . trim($v_cnt_pers['cnt_first_name']);
								}
								else
								{
									$contact_pers_parts[0] = trim($v_cnt_pers['cnt_first_name']);
								}
							}

							if(strlen(trim($v_cnt_pers['cnt_zip'])) > 0)
							{
								$contact_pers_parts[] = trim($v_cnt_pers['cnt_zip']);
							}

							if(strlen(trim($v_cnt_pers['cnt_city'])) > 0)
							{
								$contact_pers_parts[] = trim($v_cnt_pers['cnt_city']);
							}
						}
						
						$rp_info_dependant[] = implode(', ', $contact_pers_parts);
					}
				}
				
				
				//real contact person
// 				$this->view->rp_info_dependant = implode(', ', $contact_pers_parts);
				$this->view->rp_info_dependant = implode('; ', $rp_info_dependant);
				
				
				

				//4. health insurance number
				if(strlen($patient_hi[0]['insurance_no']) > 0)
				{
					$this->view->rp_insurance_number = $patient_hi[0]['insurance_no'];
				}


				//5. get patient first sapv details
// 				$patient_first_sapv = $sapv->get_patient_first_sapv($ipid);

// 				if($patient_first_sapv)
// 				{
// 					$start_first_sapv = date('d.m.Y', strtotime($patient_first_sapv[0]['verordnungam']));
// 					$end_first_sapv = date('d.m.Y', strtotime($patient_first_sapv[0]['verordnungbis']));
// 					$end_first_sapv_verord = explode(',', $patient_first_sapv[0]['verordnet']);


// 					$this->view->rp_start_date_erst = $start_first_sapv;
// 					$this->view->rp_date_erst = $end_first_sapv;
// 					$this->view->rp_sapv_erst = $end_first_sapv_verord;
// 				}


				//6. get patient last/actual sapv details
// 				$patient_last_sapv = $sapv->get_patient_last_sapv($ipid);

// 				if($patient_last_sapv)
// 				{
// 					$start_last_sapv = date('d.m.Y', strtotime($patient_last_sapv[0]['verordnungam']));
// 					$end_last_sapv = date('d.m.Y', strtotime($patient_last_sapv[0]['verordnungbis']));
// 					$end_last_sapv_verord = explode(',', $patient_last_sapv[0]['verordnet']);


// 					$this->view->rp_start_date_folge = $start_last_sapv;
// 					$this->view->rp_date_folge = $end_last_sapv;
// 					$this->view->rp_sapv_folge = $end_last_sapv_verord;
// 				}
				//TODO-1035 - i've replace the get_patient_first_sapv and get_patient_last_sapv
                $used_sapv_id = 0;
				$get_patient_sapv_order_first = $sapv->get_patient_sapv_order_first($ipid);
				if( ! empty($get_patient_sapv_order_first) 
						&& ($get_patient_sapv_order_first['sapv_order'] == 1 || $get_patient_sapv_order_first['sapv_order'] == 0 )
				    )
				{
					$start_first_sapv = date('d.m.Y', strtotime($get_patient_sapv_order_first['verordnungam']));
					$end_first_sapv = date('d.m.Y', strtotime($get_patient_sapv_order_first['verordnungbis']));
					$end_first_sapv_verord = explode(',', $get_patient_sapv_order_first['verordnet']);
					$used_sapv_id = $get_patient_sapv_order_first['id'];
					$this->view->rp_start_date_erst = $start_first_sapv;
					$this->view->rp_date_erst = $end_first_sapv;
					$this->view->rp_sapv_erst = $end_first_sapv_verord;
				}
					
				$get_patient_sapv_order_last = $sapv->get_patient_sapv_order_last($ipid,$used_sapv_id);
				if( ! empty($get_patient_sapv_order_last) 
						//&& $get_patient_sapv_order_last['id'] != $get_patient_sapv_order_first['id']
						&& $get_patient_sapv_order_last['sapv_order'] != 1)
				{
					$start_last_sapv = date('d.m.Y', strtotime($get_patient_sapv_order_last['verordnungam']));
					$end_last_sapv = date('d.m.Y', strtotime($get_patient_sapv_order_last['verordnungbis']));
					$end_last_sapv_verord = explode(',', $get_patient_sapv_order_last['verordnet']);
				
				
					$this->view->rp_start_date_folge = $start_last_sapv;
					$this->view->rp_date_folge = $end_last_sapv;
					$this->view->rp_sapv_folge = $end_last_sapv_verord;
				}
				
				//7. get patient last/actual location
				$active_pat_loc = $pat_loc->getActiveLocationPatInfo($ipid);

				if($active_pat_loc)
				{
					$rp_patient_located = array();
					if(strlen($active_pat_loc[0]['location_type']) == '0' && strpos($active_pat_loc[0]['location'], 'bei Kontaktperson') !== false)
					{
						//bei kontact person (input val  =2)
						$rp_patient_located[] = '2';
					}
					else if($active_pat_loc[0]['location_type'] == '2')
					{
						//hospiz (input val  =4)
						$rp_patient_located[] = '4';
					}
					else if($active_pat_loc[0]['location_type'] == '5')
					{
						//zu house (input val  =1)
						$rp_patient_located[] = '1';
					}
					else if($active_pat_loc[0]['location_type'] == '3')
					{
						//pflegeheim (input val  =3)
						$rp_patient_located[] = '3';
					}

					$this->view->rp_patient_located = $rp_patient_located;
				}

				//8. Get patient all hospital locations
				$last_patient_hospital = $pat_loc->get_patient_last_hospital($ipid, $clientid);

				if(count($last_patient_hospital[0]) > '0')
				{
					$this->view->rp_last_hosp_date = date('d.m.Y', strtotime($last_patient_hospital[0]['valid_from']));
					$this->view->rp_last_hosp_name = $last_patient_hospital[0]['location_name'];
				}


				//9. get family doctor
				$pat_family_doc = $family_doctor->getFamilyDoc($patient_details['familydoc_id']);

				if(strlen(trim($pat_family_doc[0]['last_name'])) > 0)
				{
					$fam_doctor_parts[0] = trim($pat_family_doc[0]['last_name']);
				}

				if(strlen(trim($pat_family_doc[0]['first_name'])) > 0)
				{
					if(strlen($fam_doctor_parts[0]) > 0)
					{
						$fam_doctor_parts[0] .= ', ' . trim($pat_family_doc[0]['first_name']);
					}
					else
					{
						$fam_doctor_parts[0] = trim($pat_family_doc[0]['first_name']);
					}
				}

				if(strlen(trim($pat_family_doc[0]['street1'])) > 0)
				{
					$fam_doctor_parts[] = trim($pat_family_doc[0]['street1']);
				}

				if(strlen(trim($pat_family_doc[0]['zip'])) > 0)
				{
					$fam_doctor_parts[] = trim($pat_family_doc[0]['zip']);
				}                
				
				
				if(strlen(trim($pat_family_doc[0]['city'])) > 0)
				{
					$fam_doctor_parts[] = trim($pat_family_doc[0]['city']);
				}
				//ISPC-2835 CRISTI C. 22.02.2021			
				
				if(strlen(trim($pat_family_doc[0]['phone_practice'])) > 0)
				{
				    $fam_doctor_parts[] = $this->translate('fam_doctor_parts_phone').trim($pat_family_doc[0]['phone_practice']);
				}
				
				if(strlen(trim($pat_family_doc[0]['fax'])) > 0)
				{
				    $fam_doctor_parts[] = $this->translate('fam_doctor_parts_fax').trim($pat_family_doc[0]['fax']);
				}
                //
				$this->view->rp_hausarzt_details = implode(', ', $fam_doctor_parts);
			
			
				//10. get nursing service
				$ppflearray = $nursing->getPatientPflegedienste($ipid);

				if(strlen(trim($ppflearray[0]['nursing'])) > 0)
				{
					$pflege_parts[0] = trim($ppflearray[0]['nursing']);
				}

				if(strlen(trim($ppflearray[0]['street1'])) > 0)
				{
					$pflege_parts[] = trim($ppflearray[0]['street1']);
				}

				if(strlen(trim($ppflearray[0]['zip'])) > 0)
				{
					$pflege_parts[] = trim($ppflearray[0]['zip']);
				}

				if(strlen(trim($ppflearray[0]['city'])) > 0)
				{
					$pflege_parts[] = trim($ppflearray[0]['city']);
				}

				$this->view->rp_home_care = implode(', ', $pflege_parts);

				//11. get patient diagnosis
				//11.1 main diagnosis
				$patient_main_diag = $pat_diagnosis->get_main_diagnosis($ipid, $clientid);
				//11.2 side diagnosis
				$patient_side_diag = $pat_diagnosis->get_side_diagnosis($ipid, $clientid);
				$this->view->rp_icd_values = implode(', ', $patient_main_diag['icd']);

				//12. get full details main diagnosis
				$this->view->rp_main_diagnosis = implode(', ', $patient_main_diag['all_str']);

				//13. get full details main diagnosis
				$this->view->rp_side_diagnosis = implode(', ', $patient_side_diag['all_str']);
			}
			}

			//13.Medications - LIST ONLY
			$pq = new User();
			$pqarr = $pq->getUserByClientid($clientid);
			$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);
			$this->view->client_users = $pq->getUserByClientid($clientid);
			$this->view->kvnodelicon = "1";
			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));

			$users = $pq->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;
			$this->view->jsusers = json_encode($users);

//					get all client users -> For medis dropdown
			$allUserArray = $pq->getUserByClientid($clientid);
			$userarraylastall[] = $this->view->translate('selectuser');
			foreach($allUserArray as $user)
			{
				$userarraylastall[$user['id']] = trim($user['last_name']) . " " . trim($user['first_name']);
			}
			$this->view->allUsers = $userarraylastall;
			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";

			//normal medis
			$medic = new PatientDrugPlan();
			$medicarr1 = $medic->getMedicationPlan($decid);

			if(count($medicarr1 < 1))
			{
				$this->view->mcntr = 0;
			}

			$medication_master_ids[] = '999999999';
			foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
			{
				$medication_master_ids['normal'][] = $v_medicarr1['medication_master_id'];
			}


			$medarr1 = Medication::getMedicationById($medication_master_ids['normal']);

			foreach($medarr1 as $k_medarr1 => $v_medarr1)
			{
				$med_arr1[$v_medarr1['id']] = $v_medarr1;
			}

			$this->view->medarr1 = $med_arr1;

			if($this->getRequest()->isPost() && $_POST['pdf'])
			{
				$medi_str = array();
				foreach($medicarr1 as $k_medi1 => $v_medi1)
				{
					$medi_str[] = htmlentities($med_arr1[$v_medi1['medication_master_id']]['name'], ENT_QUOTES, "UTF-8") . ' | ' . $v_medi1['dosage'] . ' | ' . $v_medi1['comments'];
				}

				$this->view->medications_pdf = $medi_str;
			}

 
			$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "new_listpatientmedicationedit.html");
			$this->view->medications = $grid->renderGrid();

			//deleted medis
			$this->view->ajx = 1;
			$this->view->cntr = count($medicarr1);

			$medicarr2 = $medic->getDeletedMedication($decid);
			$c_ids[] = '-1';
			$cocktail_medis[] = '99999999';

			foreach($medicarr2 as $k_med_del => $v_med_del)
			{
				if($v_med_del['cocktailid'] > 0)
				{
					$c_ids[] = $v_med_del['cocktailid'];
					$cocktail_medis[$v_med_del['cocktailid']][] = $v_med_del['id'];
				}
				$medication_master_ids['deleted'][] = $v_med_del['medication_master_id'];
			}
			$c_ids = array_values(array_unique($c_ids));
			$cocktail_id = max($c_ids);

			$cocktails = new PatientDrugPlanCocktails();
			$cocktails_drugs = $cocktails->countDrugsPerCocktail($c_ids);

			$this->view->cocktailNo = $cocktails_drugs;
			$this->view->cocktail_medis = $cocktail_medis;
			$this->view->cocktail_id = $cocktail_id;

			$medarr2 = Medication::getMedicationById($medication_master_ids['deleted']);
			foreach($medarr2 as $k_medarr2 => $v_medarr2)
			{
				$med_arr2[$v_medarr2['id']] = $v_medarr2;
			}
			$this->view->medarr2 = $med_arr2;


			$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "new_listdelpatientmedication_ajax.html");
			$this->view->delmedications = $grid->renderGrid();

			//bedarf medis
			$medicarr = $medic->getbedarfMedication($decid);
			foreach($medicarr as $k_medicarr => $v_medicarr)
			{
				$medication_master_ids['bedarfs'][] = $v_medicarr['medication_master_id'];
			}


			$medarr = Medication::getMedicationById($medication_master_ids['bedarfs']);

			foreach($medarr as $k_medarr => $v_medarr)
			{
				$med_arr[$v_medarr['id']] = $v_medarr;
			}

			$this->view->medarr1 = $med_arr;
			$this->view->counter = count($medicarr1);

			$grid = new Pms_Grid($medicarr, 1, count($medicarr), "new_listpatientmedicationbedarfsedit.html");
			$this->view->bedarfsmedications = $grid->renderGrid();

			if($this->getRequest()->isPost() && $_POST['pdf'])
			{
				$medi_str_b = array();
				foreach($medicarr as $k_medi => $v_medi)
				{
					$medi_str_b[] = htmlentities($med_arr[$v_medi['medication_master_id']]['name'], ENT_QUOTES, "UTF-8") . ' | ' . $v_medi['dosage'] . ' | ' . $v_medi['comments'];
				}

				$this->view->bedarfsmedications_pdf = $medi_str_b;
			}
            //ISPC-2563, Elena 25.06.2020
			//crisis medis
			$medicarr_crisis = $medic->getCrisisMedication($decid);
			foreach($medicarr_crisis as $k_medicarr => $v_medicarr)
			{
				$medication_master_ids['crisis'][] = $v_medicarr['medication_master_id'];
			}


			$medarr_crisis = Medication::getMedicationById($medication_master_ids['crisis']);

			foreach($medarr_crisis as $k_medarr => $v_medarr)
			{
				$med_arr[$v_medarr['id']] = $v_medarr;
			}

			$this->view->medarr1 = $med_arr;
			$this->view->counter = count($medicarr1) + count($medicarr);

			$grid = new Pms_Grid($medicarr_crisis, 1, count($medicarr), "new_listpatientmedicationcrisisedit.html");
			$this->view->crisismedications = $grid->renderGrid();

			if($this->getRequest()->isPost() && $_POST['pdf'])
			{
				$medi_str_b = array();
				foreach($medicarr as $k_medi => $v_medi)
				{
					$medi_str_b[] = htmlentities($med_arr[$v_medi['medication_master_id']]['name'], ENT_QUOTES, "UTF-8") . ' | ' . $v_medi['dosage'] . ' | ' . $v_medi['comments'];
				}

				$this->view->crisismedications_pdf = $medi_str_b;
			}

			//ivmedis
			$medicarr_iv = $medic->getivMedication($decid);
			foreach($medicarr_iv as $k_medicarr => $v_medicarr)
			{
				$medication_master_ids['ivmedis'][] = $v_medicarr['medication_master_id'];
			}


			$medarr = Medication::getMedicationById($medication_master_ids['ivmedis']);

			foreach($medarr as $k_medarr => $v_medarr)
			{
				$med_arr[$v_medarr['id']] = $v_medarr;
			}
			$this->view->medarr1 = $med_arr;

            //ISPC-2563, Elena 25.06.2020
			$this->view->counter = count($medicarr1) + count($medicarr) + count($medicarr_crisis);

			$grid = new Pms_Grid($medicarr_iv, 1, count($medicarr_iv), "new_listpatientmedicationivedit.html");
			$this->view->ivmedications = $grid->renderGrid();

			if($this->getRequest()->isPost() && $_POST['pdf'])
			{
				$medi_str_iv = array();
				foreach($medicarr_iv as $k_medi => $v_medi)
				{
					$medi_str_iv[] = htmlentities($med_arr[$v_medi['medication_master_id']]['name'], ENT_QUOTES, "UTF-8") . ' | ' . $v_medi['dosage'] . ' | ' . $v_medi['comments'];
				}

				$this->view->ivmedications_pdf = $medi_str_iv;
			}

			//ISPC-2563, Elena 25.06.2020
			$this->view->counter = count($medicarr1) + count($medicarr2) + count($medicarr) + count($medicarr_iv) + count($medicarr_crisis);;

			//schmerzpumpe list START
			$smpFinalArr = array();
			$smparr = $medic->getSchmerzpumpeMedication($decid);

			foreach($smparr as $smpMedication)
			{
				$smpMedicationArr[] = $smpMedication['cocktailid'];
			}
			$smpMedicationArray = array_values(array_unique($smpMedicationArr));

			$cocktails = new PatientDrugPlanCocktails();
			$cocktails = $cocktails->getDrugCocktails($smpMedicationArray);

			foreach($smparr as $smpkey => $medicationsmp)
			{
				$smpFinalArr[] = $medicationsmp;
				if($smparr[($smpkey + 1)]['cocktailid'] != $medicationsmp['cocktailid'])
				{
					$smpFinalArr[$smpkey]['smpdescription'] = $cocktails[$medicationsmp['cocktailid']];
				}
				else
				{
					$smpFinalArr[$smpkey]['smpdescription'] = "0";
				}
				$medication_master_ids['schmerze'][] = $medicationsmp['medication_master_id'];
			}


			$medarr = Medication::getMedicationById($medication_master_ids['schmerze']);

			foreach($medarr as $k_medarr => $v_medarr)
			{
				$med_arr[$v_medarr['id']] = $v_medarr;
			}

			$this->view->medarr1 = $med_arr;

			$grid = new Pms_Grid($smpFinalArr, 1, count($smpFinalArr), "newschmerzemedicationedit.html");

			if(count($smpFinalArr) < 1)
			{
				$this->view->mcntr_s = 0;
			}
			else
			{
				$this->view->mcntr_s = (count($smpFinalArr) + 1);
			}

			if($smpFinalArr)
			{
				$this->view->schmerze_medicgrid = $grid->renderGrid();
			}
			else
			{
				for($i = 0; $i < 0; $i++)
				{
					$a_medic[$i] = array('cnt' => $i);
				}
				$grid = new Pms_Grid($a_medic, 1, count($a_medic), "schmerzpumpemedisadd.html");
				$meds_grid[0]['medicgrid'] = $grid->renderGrid();

				$grid_f = new Pms_Grid($meds_grid, 1, count($meds_grid), "newschmerzemedicationadd.html");
				$this->view->schmerze_medicgrid = $grid_f->renderGrid();
			}

			if($this->getRequest()->isPost() && $_POST['pdf'])
			{
				$medi_str_sch = array();
				foreach($smpFinalArr as $k_medi_s => $v_medi_s)
				{
					//$medi_str_sch[] = htmlentities($med_arr[$v_medi_s['medication_master_id']]['name'], ENT_QUOTES, "UTF-8") . ' + ' . $v_medi_s['dosage'];
					$medi_str_sch[$v_medi_s['cocktailid']]['medis'][] = $med_arr[$v_medi_s['medication_master_id']]['name'] . ' | ' . $v_medi_s['dosage'];
					$medi_str_sch[$v_medi_s['cocktailid']]['comment'] = $v_medi_s['smpdescription']['description'];
					$medi_str_sch[$v_medi_s['cocktailid']]['bolus'] = $v_medi_s['smpdescription']['bolus'];
					$medi_str_sch[$v_medi_s['cocktailid']]['flussrate'] = $v_medi_s['smpdescription']['flussrate'];
					$medi_str_sch[$v_medi_s['cocktailid']]['sperrzeit'] = $v_medi_s['smpdescription']['sperrzeit'];
						
				}
				$this->view->schmerzemedications_pdf = $medi_str_sch;
			}
			//schmerzpumpe add/edit END
			//medis edit grid procedure end
			//medis add grid procedure start
			$comma = ",";
			$userval = "'0'";

			foreach($pqarr as $key => $val)
			{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}

		

			$usersPflegeKoordArray = $pq->getuserbyGroupId($groupsarray, $clientid);
			$pflegeKoords['0'] = "Select User";

			foreach($usersPflegeKoordArray as $user)
			{
				$pflegeKoords[$user['id']] = $user['last_name'] . ", " . $user['first_name'];
			}

			$this->view->pfleges = $pflegeKoords;

			

			$a_medic = array();

			if(is_array($_POST['hidd_medication']))
			{
				foreach($_POST['hidd_medication'] as $key => $val)
				{
					$a_medic[$key]['medication'] = $_POST['medication'][$key];
					$a_medic[$key]['hidd_medication'] = $_POST['hidd_medication'][$key];
				}
			}
			else
			{
				for($i = 0; $i < 0; $i++)
				{
					$a_medic[$i] = array('cnt' => $i);
				}
			}

			$this->view->mcntr = count($medicarr) + count($medicarr1) + count($medicar2) + count($medicarr_iv) + count($a_medic) + count($medicarr_crisis);
			//end get MEDICATIONS

			if($_POST['pdf'])
			{
				$post = $_POST;
				$post['medications_pdf'] = $this->view->medications_pdf;
				$post['bedarfsmedications_pdf'] = $this->view->bedarfsmedications_pdf;
				$post['ivmedications_pdf'] = $this->view->ivmedications_pdf;
				$post['schmerzemedications_pdf'] = $this->view->schmerzemedications_pdf;

				$post['rpassessment_header_text'] = $this->view->translate('rpassessment_header_text');
				if(!empty($_POST['iscompleted']))
				{
					$post['iscompleted'] = end($post['iscompleted']);
					$post['completed_date'] = end($post['completed_date']);
				}
				else if(!empty($last_assessment_data))
				{
					$post['iscompleted'] = $last_assessment_data['iscompleted'];
					if($last_assessment_data['completed_date'] != '0000-00-00 00:00:00')
					{
						$post['completed_date'] = date('d.m.Y', strtotime($last_assessment_data['completed_date']));
					}
					else
					{
						$post['completed_date'] = '';
					}
				}

				if($_REQUEST['dbgq'])
				{
					print_r($post);

					print_r("patient_rpassessment_data\n");
					print_r($patient_rpassessment_data);

					print_r("last_assessment_data\n");
					print_r($last_assessment_data);
					exit;
				}


				$this->generateformPdf(3, $post, 'rpassessment', "rpassessment_pdf.html");
			}
		}

		//TODO-3998 Ancuta 24.03.2021 - Added a new param $hide_no_billing_types  - default true 
		private function get_period_contact_forms($ipid, $current_period, $duration = false, $exclude_intern = false, $hide_on_invoice = false, $hide_no_billing_types = true)
		{
		    // TODO-3998 Ancuta 24.03.2021
		    if($hide_no_billing_types){
    		    $logininfo = new Zend_Session_Namespace('Login_Info');
    		    $clientid = $logininfo->clientid;
    		    
    		    $form_types = new FormTypes();
    		    $no_billing_types_array = $form_types->get_form_types($clientid, '200');//Ohne Berechnung
    		    
    		    $no_billing_types = array();
    		    foreach($no_billing_types_array as $k => $type_data)
    		    {
                    $no_billing_types[] = $type_data['id'];
    		    }
            }
		    // --
		    
		    
			$contact_from_course = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid = ?',$ipid)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');

			$contact_v = $contact_from_course->fetchArray();

			$deleted_contact_forms[] = '9999999999999999';
			foreach($contact_v as $k_contact_v => $v_contact_v)
			{
				$deleted_contact_forms[] = $v_contact_v['recordid'];
			}

			$contact_form_visits = Doctrine_Query::create()
				->select("*")
				->from("ContactForms")
				->where('ipid = ?', $ipid)
				->andWhereNotIn('id', $deleted_contact_forms)
				->andWhere('DATE(date) BETWEEN ? AND ? ',array($current_period['start'], $current_period['end']))
				->andWhere('isdelete ="0"')
				->andWhere('parent ="0"');
			if($hide_on_invoice){
				$contact_form_visits->andWhere('invoice_condition = "show_on_invoice"');
			}
			//TODO-3998 Ancuta 24.03.2021
			if($hide_no_billing_types && !empty($no_billing_types)){
			    $contact_form_visits->andWhereNotIN('form_type',$no_billing_types);
			}
			// --
			$contact_form_visits->orderBy('begin_date_h, begin_date_m ASC');
			$contact_form_visits_res = $contact_form_visits->fetchArray();
			
			
			if($exclude_intern ){
				foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
				{
					$contact_forms_ids[] = $v_contact_visit['id'];
				}
				if($contact_forms_ids){
					
					$fbc = new FormBlockClassification();
					$classification = $fbc->get_multiple_block_classification($ipid,$contact_forms_ids);
					$intern_cf_ids = array();
					foreach($classification as $cfid=>$class){
						if($class['intern'] == "1"){
							$intern_cf_ids[] = $cfid;
						}
					}
				}
			}
			
			
			foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
			{
				if($exclude_intern ){

					if(!in_array($v_contact_visit['id'],$intern_cf_ids)){
						$contact_form_visit_date = date('Y-m-d', strtotime($v_contact_visit['date']));
						
						if($duration)
						{
// 							$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_duration(str_pad($v_contact_visit['begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_m'], 2, "0", STR_PAD_LEFT), $v_contact_visit['date']);
							$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_durationbydates($v_contact_visit['start_date'],$v_contact_visit['end_date']);
						}
						
						$cf_visit_days[$contact_form_visit_date][] = $v_contact_visit;
						
					}
				}
				else
				{
				
					$contact_form_visit_date = date('Y-m-d', strtotime($v_contact_visit['date']));
	
					if($duration)
					{
// 						$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_duration(str_pad($v_contact_visit['begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_m'], 2, "0", STR_PAD_LEFT), $v_contact_visit['date']);
						$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_durationbydates($v_contact_visit['start_date'],$v_contact_visit['end_date']);
					}
	
					$cf_visit_days[$contact_form_visit_date][] = $v_contact_visit;
				}
			}

			return $cf_visit_days;
		}

		public function wounddocumentationAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$wound_form = new Application_Form_WoundDocumentation();
			$this->view->show_preview_modal = '0';

			/* ----------------------Patient Info & Tab menus START-------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			 
			/* ------------------- Lore ISPC-2294-------------------------------------------- */
			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->bdate = $parr['birthd'];

			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ----------------------Patient Info & Tab menus END -------------------------- */

			//prepare client users
			$users = new User();
			$userarray = $users->getUserByClientid($clientid, '0', true);


			foreach($userarray as $user)
			{
				if(strlen(trim($user['last_name'])) > 0)
				{
					$user_fullname[$user['id']][] = trim(rtrim($user['last_name']));
				}

				if(strlen(trim($user['first_name'])))
				{
					$user_fullname[$user['id']][] = trim(rtrim($user['first_name']));
				}

				$userarraylast[$user['id']] = implode(', ', $user_fullname[$user['id']]);
			}

			$this->view->users = $userarraylast;


			if($this->getRequest()->isPost())
			{
				//print_r( $_POST); exit;
				$use_temp = "1"; //if 1 create temporary file for uploaded images, if 0 use base64 string as src for img tag
				if($_POST['submit_status'] == 'save')
				{
					$post['post_data'] = $_POST;

					
					
					if(strlen($_REQUEST['fid']) == '0')
					{
					    $inserted_id = $wound_form->insert($ipid, $_POST);
					    $post['post_data']['fid'] = $inserted_id;
					}
					else
					{
					    $post['post_data']['fid'] = $_REQUEST['fid'];
					    $_POST['ipid'] = $ipid;
					    $wound_form->update($_REQUEST['fid'], $_POST);
					}
					
					// ISPC-2294
					$post['post_data']['w_patient_name'] =  $this->view->patientname;
					$post['post_data']['w_patient_bdate'] = $this->view->bdate;
					//generate human body image from post data
					$tmp_file = $this->temporary_image_create($_POST['human'], 'base64', 'human-huge');
					$tmp_file = basename($tmp_file);
					$post['image'] = '<img border="0" src="' . str_replace(array('/_ipad', '_ipad'), array('', ''), RES_FILE_PATH) . '/temp/' . $tmp_file . '" width="600" />';
					
					//ISPC-2465 Carmen 11.10.2019
					foreach($post['post_data']['qqusrc'] as $fileuploaded)
					{
						if($use_temp == '1')
						{
							$tmp_file = $this->temporary_image_create_new($fileuploaded, 'base64');
							$tmp_file = basename($tmp_file);
							$post['fileuploadedimage'][] = '<img border="0" src="' . str_replace(array('/_ipad', '_ipad'), array('', ''), RES_FILE_PATH) . '/temp/' . $tmp_file . '" width="600" />';
						}
						else 
						{
							$post['fileuploadedimage'][] = '<img border="0" src="@' .  preg_replace('#^data:image/[^;]+;base64,#', '', $fileuploaded) . '" width="600" />';
						}
					}
					
					//gen pdf on save to track each change
					$gen_pdf = $this->generate_pdf($post, 'wounddocumentation_incr', 'wounddocumentation_pdf.html');
					$img_record_id = $gen_pdf;
					// If you remove the pdf-generation on save - the images will not be related to the form pdf any more
					
					
					$filesave_options = array(
							'ipid'		=> $ipid,
							'qquuid'	=> array(),
							'remove_after_save'	=> true, //remove files from local hdd after success save on ftp
							'options'	=> array(
									'file_details' => array(),
									'extra options go here' => array(), // this is for demo
									'extra options2 go here' => "",// this is for demo
							));
						
					$filesave_options['qquuid'] = $_POST['qquuid'];
					$filesave_options['options']['file_details'] = array(
							'tabname'		=> "wounddocumentation_uploaded_img",
							'recordid'		=> $img_record_id,
							'title_prefix'	=> "Wund-Dokumentation-"
							//'file_date'		=> $file_date
					);
						
					$result_filesave = $this->_filesave( "wounddocumentation_uploaded_img",  $filesave_options);
					
					
					if(strlen($_REQUEST['fid']) == '0')
					{
						$this->redirect(APP_BASE . 'patientform/wounddocumentation?id=' . $_REQUEST['id'] . '&fid=' . $inserted_id . '&flg=suc');
						exit;
					}
					else
					{
						$formid = $_REQUEST['fid'];
						$this->redirect(APP_BASE . 'patientform/wounddocumentation?id=' . $_REQUEST['id'] . '&fid=' . $formid . '&flg=suc');
						exit;
					}
				}
				else if($_POST['submit_status'] == 'pdf')
				{
					$post['post_data'] = $_POST;
					$post['post_data']['fid'] = $_REQUEST['fid'];
					// ISPC-2294
					$post['post_data']['w_patient_name'] =  $this->view->patientname;
					$post['post_data']['w_patient_bdate'] = $this->view->bdate;

					//generate human body image from post data

					$tmp_file = $this->temporary_image_create($_POST['human'], 'base64', 'human-huge');
					$tmp_file = basename($tmp_file);
					$post['image'] = '<img border="0" src="' . str_replace(array('/_ipad', '_ipad'), array('', ''), RES_FILE_PATH) . '/temp/' . $tmp_file . '" width="600" />';
				
					//print_r($post); exit;
					//ISPC-2465 Carmen 11.10.2019
					foreach($post['post_data']['qqusrc'] as $fileuploaded)
					{
						if($use_temp == '1')
						{
							$tmp_file = $this->temporary_image_create_new($fileuploaded, 'base64');
							$tmp_file = basename($tmp_file);
							$post['fileuploadedimage'][] = '<img border="0" src="' . str_replace(array('/_ipad', '_ipad'), array('', ''), RES_FILE_PATH) . '/temp/' . $tmp_file . '" width="600" />';
						}
						else 
						{
							$post['fileuploadedimage'][] = '<img border="0" src="@' . preg_replace('#^data:image/[^;]+;base64,#', '', $fileuploaded) . '" width="600" />';
						}
						
					}
					
					$gen_pdf = $this->generate_pdf($post, 'wounddocumentation', 'wounddocumentation_pdf.html');
					exit;
				}else if($_POST['isclosed'] == '1')
				 {
				 	$post['post_data'] = $_POST;
				 	
				 	if(strlen($_REQUEST['fid']) > '0')
				 	{
				 		$post['post_data']['fid'] = $_REQUEST['fid'];
					    $_POST['ipid'] = $ipid;
					    $wound_form->update_isclosed($_REQUEST['fid'], $_POST);
					    $this->redirect(APP_BASE . 'patientform/wounddocumentation?id=' . $_REQUEST['id'] . '');
				 	}
				 }
			}
			//get ipid wound documentations
			$patient_forms = WoundDocumentation::get_patient_wound_documentations($ipid, true);


			/* -------------- WOUND DOCUMENTATION FILE HISTORY	---------------------------- */
			if($_REQUEST['fid'])
			{
				$fileupload = new PatientFileUpload();
				$form_files = $fileupload->get_wound_documentation_file_data($ipid);
				
				$images_array = array();
				foreach($form_files as $k_file => $v_file)
				{
					if($v_file['tabname'] == "wounddocumentation_uploaded_img" ){
						$images_array[$v_file['recordid']][] = $v_file; 
					}
				}
				
				$users_ids = array();
				$file_array = array();
				foreach($form_files as $k_file => $v_file)
				{
					if($v_file['recordid'] ==  $_REQUEST['fid'] &&  $v_file['tabname'] == "wounddocumentation_incr" ){
						$file_array[$v_file['id']] = $v_file;
						$file_array[$v_file['id']]['images'] = $images_array[$v_file['id']];
					}
					$users_ids[] = $v_file['create_user'];
				}
				
				$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
				$this->view->wound_files_history = $file_array;
			}
			
			
			if(strlen($_REQUEST['fid']) > '0')
			{
				$form_data = WoundDocumentation::get_wound_documentation($_REQUEST['fid']);
                 
				
				if($form_data)
				{
					$this->retainValues($form_data[0]);
					$this->view->w_type = explode(',', $this->view->w_type);
					$this->view->w_treatment_goals = explode(',', $this->view->w_treatment_goals);
					$this->view->w_wet = explode(',', $this->view->w_wet);
					$this->view->w_clean = explode(',', $this->view->w_clean);
					$this->view->w_disinfection = explode(',', $this->view->w_disinfection);
					$this->view->w_dressings = explode(',', $this->view->w_dressings);
					$this->view->w_dressings_second = explode(',', $this->view->w_dressings_second);
					$this->view->w_surrounding_skin_protect = explode(',', $this->view->w_surrounding_skin_protect);
					$this->view->w_odor = explode(',', $this->view->w_odor);
					$this->view->w_exudation_therapy = explode(',', $this->view->w_exudation_therapy);
				}
				
			}
			else if($_REQUEST['mode'] == 'new')
			{
				$this->view->w_name = $_POST['w_name'];
			}
			else if(strlen($_REQUEST['fid']) == '0' && empty($_REQUEST['flg']) && count($patient_forms) != '0' && strlen($_REQUEST['mode']) == '0')
			{
				$this->view->show_preview_modal = '1';
			}

			$this->view->all_saved_forms = $patient_forms;
		}

		public function therapyplanAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$therapy_plan_form = new Application_Form_Therapyplan();

			/* ----------------------Patient Info & Tab menus START-------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$patient_details = $patientmaster->getMasterData($decid, 0);
			$patient_details = $patientmaster->get_patientMasterData();

			$this->view->first_name = $patient_details['first_name'];
			$this->view->last_name = $patient_details['last_name'];
			$this->view->birthd = $patient_details['birthd'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ----------------------Patient Info & Tab menus END -------------------------- */

			$this->view->form_tabnames = array(
				'emergency_help',
				'basic_care',
				'treatment_care',
				'paliative_medicine',
				'medication',
				'tools',
				'coord_services',
				'other_med_purposes',
				'days_of_life',
				'emergency_plan',
			);

			//prepare client users
			$users = new User();
			$userarray = $users->getUserByClientid($clientid, '0', false);

			$userarraylast[0] = $this->view->translate('select_user');
			foreach($userarray as $user)
			{
				if(strlen(trim($user['last_name'])) > 0)
				{
					$user_fullname[$user['id']][] = trim(rtrim($user['last_name']));
				}

				if(strlen(trim($user['first_name'])))
				{
					$user_fullname[$user['id']][] = trim(rtrim($user['first_name']));
				}

				$userarraylast[$user['id']] = implode(', ', $user_fullname[$user['id']]);
			}

			$this->view->users = $userarraylast;

			$has_form = Therapyplan::get_patient_form($ipid);
			if($has_form)
			{
				$form_id = $has_form[0]['id'];
				$this->view->special_field = $has_form[0]['special_field'];
				//load items
				$therapyplan_items = TherapyplanItems::get_therapyplan_data($form_id);

				foreach($therapyplan_items as $k_item => $v_item)
				{
					$final_data_arr[$v_item['tabname']][] = $v_item;

					$tabnames_qty[$v_item['tabname']] = count($final_data_arr[$v_item['tabname']]);
				}

				$this->view->form_data = $final_data_arr;

				$this->view->tabnames_qty = $tabnames_qty;
			}

			/* -------------- THERAPY PLAN FILE HISTORY	---------------------------- */
			$fileupload = new PatientFileUpload();
			$form_files = $fileupload->get_therapyplan_file_data($ipid);

			foreach($form_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}

			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			$this->view->form_files = $form_files;


			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['first_name'] = $this->view->first_name;
				$post['last_name'] = $this->view->last_name;
				$post['birthd'] = $this->view->birthd;
				if(strlen($post['special_field']) == '0')
				{
					$post['special_field'] = $this->view->special_field;
				}

				if($_POST['save'])
				{
					$post['fid'] = $form_id;

					if(!$has_form)
					{
						//create_main_form_data
						$ins_data = $therapy_plan_form->create_main_form($ipid);
						$post['fid'] = $ins_data;
					}

					$save_data = $therapy_plan_form->insert_data($ipid, $post, $this->view->form_tabnames);

					$this->generateformPdf(4, $post, 'therapyplan', "therapyplan_pdf.html");
					$this->redirect(APP_BASE . 'patientform/therapyplan?id=' . $_REQUEST['id'] . '&flg=suc');
					exit;
				}
				else if($_POST['pdf'])
				{
					$post['tabnames'] = $this->view->form_tabnames;

					$this->generateformPdf(3, $post, 'therapyplan', "therapyplan_pdf.html");
				}
			}
		}

		private function array_sort($array, $on = NULL, $order = SORT_ASC)
		{
			$new_array = array();
			$sortable_array = array();

			if(count($array) > 0)
			{
				foreach($array as $k => $v)
				{
					if(is_array($v))
					{
						foreach($v as $k2 => $v2)
						{
							if($k2 == $on)
							{
								if($on == 'birthd' || $on == 'admissiondate' || $on == 'admission_date' || $on == 'discharge_date' || $on == 'diedon' || $on == 'birthdyears' || $on == 'dischargedate' || $on == 'beginvisit' || $on == 'endvisit' || $on == 'dateofbirth' || $on == 'date' || $on == 'letter_date' || $on == "start_date")
								{

									if($on == 'birthdyears')
									{
										$v2 = substr($v2, 0, 10);
									}
									$sortable_array[$k] = strtotime($v2);
								}
								elseif($on == 'epid')
								{
									$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v2);
								}
								elseif($on == 'percentage')
								{
									$sortable_array[$k] = preg_replace('/[^\d\.]/', '', $v2);
								}
								else
								{
									$sortable_array[$k] = ucfirst($v2);
								}
							}
						}
					}
					else
					{
						if($on == 'birthd' || $on == 'admission_date' || $on == 'admissiondate' || $on == 'discharge_date' || $on == 'diedon' || $on == 'birthdyears' || $on == 'dischargedate' || $on == 'beginvisit' || $on == 'endvisit' || $on == 'dateofbirth' || $on == 'date' || $on == 'letter_date' || $on = "start_date")
						{
							if($on == 'birthdyears')
							{
								$v = substr($v, 0, 10);
							}
							$sortable_array[$k] = strtotime($v);
						}
						elseif($on == 'epid' || $on == 'percentage')
						{
							$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v);
						}
						elseif($on == 'percentage')
						{
							$sortable_array[$k] = preg_replace('/[^\d\.]/', '', $v2);
						}
						else
						{
							$sortable_array[$k] = ucfirst($v);
						}
					}
				}

				switch($order)
				{
					case SORT_ASC:
//						asort($sortable_array);
						$sortable_array = Pms_CommonData::a_sort($sortable_array);
						break;
					case SORT_DESC:
//						arsort($sortable_array);
						$sortable_array = Pms_CommonData::ar_sort($sortable_array);
						break;
				}
				foreach($sortable_array as $k => $v)
				{
					$new_array[$k] = $array[$k];
				}
			}

			return $new_array;
		}

		public function questionnairebAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$qb_form = new Application_Form_QuestionnaireB();

			/* ----------------------Patient Info & Tab menus START-------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$patient_details = $patientmaster->getMasterData($decid, 0);
			$patient_details = $patientmaster->get_patientMasterData();

			$this->view->first_name = $patient_details['first_name'];
			$this->view->last_name = $patient_details['last_name'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ----------------------Patient Info & Tab menus END -------------------------- */

			$header_string = $this->view->translate('questionnaire_b');
			$header_string = str_replace('%patient_name', $patient_details['last_name'] . ', ' . $patient_details['first_name'], $header_string);
			$this->view->header_string = $header_string;


			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['ipid'] = $ipid;
				//used in pdf
				$post['header_string'] = $header_string;

				if(strlen($_POST['btnsave']) > '0')
				{
					if($post['update'] == '1')
					{
						$qb_form->update_data($post);
					}
					else
					{
						$qb_form->insert_new_data($post);
					}
					$this->generateformPdf(4, $post, 'questionnaireb', "questionnaireb_pdf.html");
					$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
					exit;
				}
				else if(strlen($_POST['generatepdf']) > '0')
				{
					$this->generateformPdf(3, $post, 'questionnaireb', "questionnaireb_pdf.html");
				}
			}

			$patient_form = QuestionnaireB::get_patient_form($ipid);

			//found existing form
			if(count($patient_form) > 0)
			{
				$this->view->form_values = $patient_form;
			}
			
		}

		public function questionnairecAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$qc_form = new Application_Form_QuestionnaireC();

			/* ----------------------Patient Info & Tab menus START-------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
// 			$patient_details = $patientmaster->getMasterData($decid, 0);
			$patient_details = $patientmaster->get_patientMasterData();

			$this->view->first_name = $patient_details['first_name'];
			$this->view->last_name = $patient_details['last_name'];

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ----------------------Patient Info & Tab menus END -------------------------- */
			$client_data = Pms_CommonData::getClientData($clientid);

			$header_string = $this->view->translate('questionnaire_c');
			$header_string = str_replace('%client_phone', $client_data[0]['phone'], $header_string);
			$header_string = str_replace('%client_fax', $client_data[0]['fax'], $header_string);
			$this->view->header_string = $header_string;

			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['ipid'] = $ipid;
				//used in pdf
				$post['header_string'] = $header_string;

				if(strlen($_POST['btnsave']) > '0')
				{
					if($post['update'] == '1')
					{
						$qc_form->update_data($post);
					}
					else
					{
						$qc_form->insert_new_data($post);
					}
					$this->generateformPdf(4, $post, 'questionnairec', "questionnairec_pdf.html");

					$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
					exit;
				}
				else if(strlen($_POST['generatepdf']) > '0')
				{
					$this->generateformPdf(3, $post, 'questionnairec', "questionnairec_pdf.html");
				}
			}

			$patient_form = QuestionnaireC::get_patient_form($ipid);

			//found existing form
			if(count($patient_form) > 0)
			{
				$this->view->form_values = $patient_form;
			}
		}

		public function hospizperformancerecordAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;


			$patientmaster = new PatientMaster();
// 			$pm = $patientmaster->getMasterData($decid, 0);
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$pm = $patientmaster->get_patientMasterData();
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$this->view->patient_details = $pm;

			if($clientid != '0' || !empty($clientid))
			{
				/* ------------------- Client Data--------------------------------------- */
				$clientdata = Pms_CommonData::getClientData($logininfo->clientid);



				$client_details['client_name'] = $clientdata[0]['team_name'];
				$client_details['client_city'] = $clientdata[0]['city'];
				$client_details['client_street'] = $clientdata[0]['street1'];
				$client_details['client_zip'] = $clientdata[0]['postcode'];
				$client_details['client_phone'] = $clientdata[0]['phone'];
				$client_details['client_fax'] = $clientdata[0]['fax'];
				$client_details['client_email'] = $clientdata[0]['emailid'];
				$client_details['institutskennzeichen'] = $clientdata[0]['institutskennzeichen'];

				$this->view->lbg_client_name = $client_details['client_name'];

				$client_details['address'] = $client_details['client_street'];

				if($client_details['client_zip'])
				{
					$client_details['address'] .= ', ' . $client_details['client_zip'];
				}

				if($client_details['client_city'])
				{
					$client_details['address'] .= ', ' . $client_details['client_city'];
				}
				$this->view->client_details = $client_details;


				$this->view->lbg_address = $client_details['address'];
				$lbg_ik_nummer = $client_details['institutskennzeichen'];
				$this->view->lbg_ik_nummer = $lbg_ik_nummer;
			}
			//patient days
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			//beware of date d.m.Y format here
			$patient_days = Pms_CommonData::patients_days($conditions);

			//get number of days in each month + start/end day START
			foreach($patient_days[$ipid]['active_periods'] as $k_period => $v_period)
			{
				$months = $this->get_period_months($v_period['start'], $v_period['end'], 'Y-m');
				if(empty($patient_active_months))
				{
					$patient_active_months = array();
				}
				$patient_active_months = array_merge($patient_active_months, $months);
			}
			$patient_active_months = array_values($patient_active_months);

			foreach($patient_active_months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}

			//get number of days in each month + start/end day END
			//check if a month is selected START
			if(empty($_REQUEST['list']))
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$attrs['onChange'] = 'changeMonth(this.value);';
			$attrs['class'] = 'select_month_hospiz_performance';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$this->view->current_period = $current_period;
			//print_r($current_period);exit;
			//get selected month days
			if($months_details[$selected_month])
			{
				$selected_month_days = $patientmaster->getDaysInBetween($months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
			}

			//format array days to d.m.Y
			array_walk($selected_month_days, function(&$value) {
				$value = date("d.m.Y", strtotime($value));
			});

			$active_days = $patient_days[$ipid]['active_days'];
			$patient_admission_days = $patient_days[$ipid]['admission_days'];
			$hospiz_days_client_settings = $patient_days[$ipid]['hospiz']['real_days'];


			/* ----------------Patient - Healthinsurance & pflegestufe header data START -------------------------------------- */
			$hi_perms = new HealthInsurancePermissions();
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			$hi_perms_divisions = $divisions;

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
			$this->view->health_insurance_name = $healthinsu_array[0]['company_name'];
			$this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
			$this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
			$this->view->healthinsurance_versnr = $healthinsu_array[0]['insurance_no'];

			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();

				if(empty($healthinsu_array[0]['name']))
				{
					$healthinsu_array[0]['name'] = $healtharray['name'];
				}
				if(empty($healthinsu_array[0]['ins_street']))
				{
					$healthinsu_array[0]['ins_street'] = $healtharray['street1'];
				}
				if(empty($healthinsu_array[0]['ins_city']))
				{
					$healthinsu_array[0]['ins_city'] = $healtharray['city'];
				}
				if(empty($healthinsu_array[0]['ins_zip']))
				{
					$healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
				}

				if(strlen($healthinsu_array[0]['company_name']) == 0)
				{
					$this->view->health_insurance_name = $healtharray['name'];
				}

				if(strlen($healthinsu_array[0]['institutskennzeichen']) == 0)
				{
					$this->view->health_insurance_ik = $healtharray['iknumber'];
				}

				if(strlen($healthinsu_array[0]['kvk_no']) == 0)
				{
					$this->view->health_insurance_kassenr = $healtharray['kvnumber'];
				}
			}

			if($hi_perms_divisions)
			{
				$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
			}

			$pathealthinsurancenr = "";
			if(count($healthinsu_array[0]))
			{
				$phi_details = $healthinsu_array[0]['company_name'];
			}
			else
			{
				$phi_details = "--";
			}

			if(strlen($healthinsu_subdiv_arr[3]['name']) == '0' && strlen($healthinsu_subdiv_arr[3]['street1']) == '0')
			{
				$phi_name = $healthinsu_array[0]['company_name'];
				$phi_details_sub = $healthinsu_array[0]['company_name'] . '<br/> ' . $healthinsu_array[0]['ins_street'] . '<br/> ' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];
			}
			else
			{
				$phi_name = $healthinsu_subdiv_arr[3]['name'];
				$phi_details_sub = $healthinsu_subdiv_arr[3]['name'] . '<br/> ' . $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];
			}

			$this->view->health_insurance = $phi_details;
			$this->view->hi_subdiv_address = $phi_details_sub;

			//get pflegestuffe for current period START
			$pflege = new PatientMaintainanceStage();
			$pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
			if($pflege_arr)
			{
				$last_pflege = end($pflege_arr);
				$this->view->patient_pflegestufe = $last_pflege['stage'];
			}
			else
			{
				$this->view->patient_pflegestufe = ' - ';
			}
			/* ----------------Patient - Healthinsurance & pflegestufe header data END -------------------------------------- */

			/* ----------------Patient - Get SAPV -------------------------------------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('ipid LIKE "' . $ipid . '"')
				->andWhere('verordnungbis !="000-00-00 00:00:00" ')
				->andWhere('verordnungam !="000-00-00 00:00:00" ')
				->andWhere('isdelete=0')
// 				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$sapv_array = $dropSapv->fetchArray();

			$s = 1;
			$active_sapv_interval = array();
			foreach($sapv_array as $sapvkey => $sapvvalue)
			{

				if($sapvvalue['status'] == 1 && ($sapvvalue['verorddisabledate'] == '0000-00-00 00:00:00' || $sapvvalue['verorddisabledate'] == '1970-01-01 00:00:00') ){
					// no sapv taken here - becouse it is considered to be fully denied
				}
				else
				{

					$active_sapv_interval[$s]['start'] = date('Y-m-d', strtotime($sapvvalue['verordnungam']));
					
					if($sapvvalue['status'] == '1' && $sapvvalue['verorddisabledate'] != '0000-00-00 00:00:00' && $sapvvalue['verorddisabledate'] != '1970-01-01 00:00:00')
					{
						$active_sapv_interval[$s]['end'] = date('Y-m-d', strtotime($sapvvalue['verorddisabledate']));
					} else{
						$active_sapv_interval[$s]['end'] = date('Y-m-d', strtotime($sapvvalue['verordnungbis']));
					}
					
					
					$patient_active_sapv = $patientmaster->getDaysInBetween($active_sapv_interval[$s]['start'], $active_sapv_interval[$s]['end']);
	
					if(empty($pat_active_sapv))
					{
						$pat_active_sapv = array();
					}
	
					$pat_active_sapv = array_merge($pat_active_sapv, $patient_active_sapv);
	
					$s++;
				}
			}

			//transform sapv days in d.m.Y
			array_walk($pat_active_sapv, function(&$value) {
				$value = date("d.m.Y", strtotime($value));
			});
			$pat_active_sapv = array_values(array_unique($pat_active_sapv));
			asort($pat_active_sapv);

			$all_active_sapv_days = array_intersect($pat_active_sapv, $active_days);
			/* ----------------Patient - Get SAPV END -------------------------------------- */

			//get client users
			$user = new User();
			$c_users = $user->getUserByClientid($clientid, 0, true);

			foreach($c_users as $k_c_users => $v_c_users)
			{
				$client_users[$v_c_users['id']] = $v_c_users;
			}

			/* ----------------Patient - Get contact forms START -------------------------------------- */
			$deleted_cf = Doctrine_Query::create()
				->select("id,recordid,ipid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere("ipid = ?", $ipid)
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhere('source_ipid = ""');
			$deleted_cf_array = $deleted_cf->fetchArray();

			foreach($deleted_cf_array as $k_dcf => $v_dcf)
			{
				$excluded_cf_ids[] = $v_dcf['recordid'];
			}

			//get cf in period - deleted cf
			$cf = new ContactForms();
			$p_contactforms = $cf->get_contact_form_period($ipid, $months_details[$selected_month], $excluded_cf_ids);

			$contact_forms_ids[] = '99999999999';
			foreach($p_contactforms as $k_cf => $v_cf)
			{
				$cf_day = date('d.m.Y', strtotime($v_cf['billable_date']));
				$days_contact_forms[$cf_day][] = $v_cf['id'];

				$contact_forms_ids[] = $v_cf['id'];
				$all_month_cf[$v_cf['id']] = $v_cf;

				$days_product[$k_cf . 'v']['date'] = $v_cf['billable_date'];
				$days_product[$k_cf . 'v']['type'] = 'visit';
			}

			/* ----------------Patient - aditional users -------------------------------------- */
			$block_aditional_users = new FormBlockAdditionalUsers();
			$block_au_data = $block_aditional_users->getPatientFormBlockAdditionalUsers($ipid, $contact_forms_ids, false, true);
			$cnt = array();

			foreach($p_contactforms as $k_cf => $v_cf)
			{
				$visit_date = date('d.m.Y', strtotime($v_cf['billable_date']));

				if(count($block_au_data[$v_cf['id']]) != 0)
				{
					foreach($block_au_data[$v_cf['id']] as $k_block_au_data => $v_block_au)
					{
						$visit_user = $client_users[$v_block_au['additional_user']];
						if($v_block_au['creator'] == '1')
						{
							$has_creator = true;
						}

						if(count($client_users[$v_block_au['additional_user']]) != 0)
						{
							if(strlen($visit_user['shortname']) > '0')
							{
								$contact_forms[$visit_date][] = $visit_user['shortname'];
							}
							else
							{
								$contact_forms[$visit_date][] = strtoupper(mb_substr($visit_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_user['last_name'], 0, 1, "UTF-8"));
							}
						}
					}
				}

				if(count($block_au_data[$v_cf['id']]) == '0' || $has_creator === false)
				{
					$visit_create_user = $client_users[$v_cf['create_user']];

					if(count($client_users[$v_cf['create_user']]) != 0)
					{
						if(strlen($visit_create_user['shortname']) > '0')
						{
							$contact_forms[$visit_date][] = $visit_create_user['shortname'];
						}
						else
						{

							$contact_forms[$visit_date][] = strtoupper(mb_substr($visit_create_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_create_user['last_name'], 0, 1, "UTF-8"));
						}
					}
				}
			}
			
			$visits_users = array();
			foreach($contact_forms as $k_u => $v_u)
			{
				if(!$visits_users[$k_u])
				{
					$visits_users[$k_u] = array();
				}
				$visits_users[$k_u] = array_unique(array_merge($visits_users[$k_u], $v_u));
			}

			/* ----------------Patient - Get contact forms END -------------------------------------- */

			$master_price_list = PriceList::get_period_price_list($months_details[$selected_month]['start'], $months_details[$selected_month]['end']); //get bra sapv pricelist and then shortcuts
			$this->view->master_price_list = $master_price_list;


			/* ----------------Patient - Get telefonat START -------------------------------------- */
			$course = new PatientCourse();
			$patient_course = $course->getCourseDataByShortcut($ipid, "XT", false, true);

			foreach($patient_course as $k_tel => $v_tel)
			{
				$course_day = date('d.m.Y', strtotime($v_tel['done_date']));
				$days_phone[$course_day][] = $v_tel['id'];
				$phone_userid[$course_day][] = $v_tel['user_id'];

				$days_contactforms[$course_day]['phone'][] = $v_tel['done_date'];
				$all_month_course[$v_tel['id']] = $v_tel;

				$days_product[$k_tel . 'p']['date'] = $v_tel['done_date'];
				$days_product[$k_tel . 'p']['type'] = 'phone';

				//$phone_users[$course_day][] = $phone_userid[$course_day][]
			}
			
			$phone_user = array();
			foreach($phone_userid as $k_user => $v_user)
			{
				$phone_user[$k_user] = array();
				foreach($v_user as $k_phoneu => $v_phoneu)
				{
					if(!empty($client_users[$v_phoneu]['shortname']))
					{
						$phone_user[$k_user][] = $client_users[$v_phoneu]['shortname'];
					}
					else
					{
						$phone_user[$k_user][] = strtoupper(mb_substr($client_users[$v_phoneu]['first_name'], 0, 1, "UTF-8") . mb_substr($client_users[$v_phoneu]['last_name'], 0, 1, "UTF-8"));
					}
				}
			}

			
			$product_usershort = array_merge_recursive($visits_users, $phone_user);

			foreach($product_usershort as $k_short => $v_short)
			{
				$prod_short[$k_short] = array_values(array_unique($v_short));
			}

			/* ----------------Patient - Get telefonat END -------------------------------------- */

			$days_product = array_values($days_product);

			$days_product2 = $this->array_sort($days_product, 'date', SORT_ASC);

			foreach($days_product2 as $key_prod => $val_prod)
			{
				$date_pr = date('d.m.Y', strtotime($val_prod['date']));
				$formated_day = date('Y-m-d', strtotime($val_prod['date']));

				$val_prod['price'] = $master_price_list[$formated_day][0][$val_prod['type']]['price'];
				$products[$date_pr][] = $val_prod;
			}


			/* ---------------- Client- Get pricelist START -------------------------------------- */

			$shortcuts = Pms_CommonData::get_prices_shortcuts();

			$totals = array();
			$subtotal = array();
			foreach($shortcuts['bre_hospiz'] as $k_sh => $v_sh)
			{
				$totals[$v_sh] = '0';
				$totals_pdf[$v_sh] = '0';

				if($v_sh == 'visit' || $v_sh == 'phone')
				{
					$subtotal[$v_sh] = '0';
					$v_sh = 'product';
					$shortcuts_pr[] = $v_sh;
				}
				else if($v_sh == 'assessment')
				{
					$shortcuts_pr[] = $v_sh;
				}
			}
			$shortcuts_bre = array_values(array_unique($shortcuts_pr));

			foreach($shortcuts_bre as $k_sha => $v_sha)
			{
				$totals_bre[$v_sha] = '0';
				$totals_bre_pdf[$v_sha] = '0';
				if($v_sha == 'product')
				{
					$subtotal_bre[$v_sha] = '0';
				}
			}

			/* ---------------- Client- Get pricelist END -------------------------------------- */

			/* ---------------- POST START -------------------------------------- */
			if($this->getRequest()->isPost())
			{
				//insert
				$post = $_POST;
				$post['client'] = $clientid;

				if(strlen($_REQUEST['list']) > 0)
				{
					$period_list = '&list=' . $_REQUEST['list'];
				}
				else
				{
					$period_list = '';
				}

				if($_POST['save'])
				{
					//clear old entries for curent month
					$reset_sapv_form_data = Application_Form_HospizPerformance::reset_hospiz_performance($ipid, $months_details[$selected_month]['start']);
					$insert_sapv_form_data = Application_Form_HospizPerformance::insert_hospiz_performance($ipid, $post, $selected_month_days, $shortcuts['bre_hospiz']);
					$this->_redirect(APP_BASE . 'patientform/hospizperformancerecord?id=' . $_REQUEST['id'] . $period_list);
					exit;
				}
				else if($_POST['reset'])
				{
					$reset_form_data = Application_Form_HospizPerformance::reset_hospiz_performance($ipid, $months_details[$selected_month]['start']);
					$this->_redirect(APP_BASE . 'patientform/hospizperformancerecord?id=' . $_REQUEST['id'] . $period_list);
					exit;
				}
			}
			/* ---------------- POST END -------------------------------------- */


			/* ---------------- Patient - Get saved hospiz control START -------------------------------------- */
			$hospiz_control_data = HospizControl::get_hospiz_controlsheet($ipid, $months_details[$selected_month]['start']);

			$has_data = '0';
			if($hospiz_control_data)
			{
				$has_data = '1';
			}
			$this->view->has_data = $has_data;
			/* ---------------- Patient - Get saved hospiz control END-------------------------------------- */
			$this->view->active_days = $active_days;
			$this->view->sapv_days = $pat_active_sapv;
			$this->view->hospiz_days = $hospiz_days_client_settings;



			foreach($days_contactforms as $k => $val)
			{
				foreach($val as $kp => $vp)
				{
					$days_product[$k][$kp] = $vp;
				}
			}
			//print_r($hospiz_days_client_settings);
			//print_r($all_active_sapv_days)	;exit;
			foreach($selected_month_days as $k_m_day => $v_m_day)
			{
				$formated_day = date('Y-m-d', strtotime($v_m_day));
				$has_assesment = false;

				$master_data[$v_m_day]['qty']['assessment'] = '0';
				$master_data[$v_m_day]['qty']['visit'] = '0';
				$master_data[$v_m_day]['qty']['phone'] = '0';
				$master_data[$v_m_day]['qty']['product'] = '0';
				if(in_array($v_m_day, $hospiz_days_client_settings) && in_array($v_m_day, $all_active_sapv_days))
				{
					//get admission days in hospiz location (assessment shortcut triggered)
					if((in_array($v_m_day, $patient_admission_days) && $has_data == '0') ||
						(array_key_exists($v_m_day, $hospiz_control_data['assessment']) && $hospiz_control_data['assessment'][$v_m_day] != '0' && $has_data == '1') ||
						array_key_exists(date('Y-m-d', strtotime($v_m_day)), $_POST['assessment'])
					)
					{
						$master_data[$v_m_day]['qty']['assessment'] = '1';
						$has_assesment = true;
					}

					//contact forms this day
					if(array_key_exists($v_m_day, $days_contact_forms))
					{
						$visit_item_price = $master_price_list[$formated_day][0]['visit']['price'];

						$master_data[$v_m_day]['qty']['visit'] += count($days_contact_forms[$v_m_day]);
						$master_data[$v_m_day]['price']['visit'] = $visit_item_price;
						$master_data[$v_m_day]['ammount']['visit'] = (count($days_contact_forms[$v_m_day]) * $visit_item_price);
						//$product_data[$v_m_day]['']
					}
					//phones this days  
					if(array_key_exists($v_m_day, $days_phone))
					{
						$phone_item_price = $master_price_list[$formated_day][0]['phone']['price'];

						$master_data[$v_m_day]['qty']['phone'] += count($days_phone[$v_m_day]);
						$master_data[$v_m_day]['price']['phone'] = $phone_item_price;
						$master_data[$v_m_day]['ammount']['phone'] += (count($days_phone[$v_m_day]) * $phone_item_price);
					}
					$masterfinal_data[$v_m_day]['qty']['assessment'] = $master_data[$v_m_day]['qty']['assessment'];
					$masterfinal_data[$v_m_day]['qty']['product'] = $master_data[$v_m_day]['qty']['phone'] + $master_data[$v_m_day]['qty']['visit'];
					$masterfinal_data[$v_m_day]['price']['product'] = $master_data[$v_m_day]['price']['visit'] + $master_data[$v_m_day]['price']['phone'];
					$masterfinal_data[$v_m_day]['ammount']['product'] = $master_data[$v_m_day]['ammount']['visit'] + $master_data[$v_m_day]['ammount']['phone'];
				}

				if(array_sum($masterfinal_data[$v_m_day]['qty']) > '0')
				{
					$masterfinal_data[$v_m_day]['total'] = array_sum($masterfinal_data[$v_m_day]['ammount']);

					//check if ammount exceeds the limit
					if($masterfinal_data[$v_m_day]['total'] >= $master_price_list[$formated_day][0]['v_p_limit']['price'])
					{
						$masterfinal_data[$v_m_day]['total'] = $master_price_list[$formated_day][0]['v_p_limit']['price'];
					}

					//add assessment price after visit/phone calculation and limitation
					if($has_assesment === true)
					{
						$masterfinal_data[$v_m_day]['total'] += $master_price_list[$formated_day][0]['assessment']['price'];
					}
				}
				elseif(array_sum($masterfinal_data[$v_m_day]['qty']) == '0')
				{
					$masterfinal_data[$v_m_day]['total'] = '0.00';
					$prod_short[$v_m_day] = '';
				}
				else
				{
					$masterfinal_data[$v_m_day]['total'] = '0.00';
				}

				$master_total += $masterfinal_data[$v_m_day]['total'];
			}

			$this->view->visits_users = $prod_short; // modified from $visits_users (add phone users)
			/* ---------------- Calculate Totals per visits and phone-------------------------------------- */

			foreach($selected_month_days as $k_mday => $v_mday)
			{
				$formated_day = date('Y-m-d', strtotime($v_mday));

				if(in_array($v_mday, $hospiz_days_client_settings) && in_array($v_mday, $all_active_sapv_days))
				{
					$limit_day[$formated_day] = $master_price_list[$formated_day][0]['v_p_limit']['price'];
					foreach($products[$v_mday] as $kp => $vp)
					{

						if($limit_day[$formated_day] > 0)
						{
							$subtotal[$vp['type']] += $vp['price'];

							$limit_day[$formated_day]-= $vp['price'];
							if($limit_day[$formated_day] <= 0)
							{
								$underpriced[$vp['type']]+= $limit_day[$formated_day];
							}
						}
					}
				}
			}
			//print_r($subtotal); 
			foreach($subtotal as $key_s => $val_s)
			{
				$subtotal[$key_s]-= ($underpriced[$key_s] * (-1));
			}

			foreach($subtotal as $k_sub => $v_sub)
			{
				$subtotal_bre['product'] += $v_sub;
			}
			//print_r($subtotal_bre);exit;


			/* ----------------------------------------------------------------------- */
			unset($shortcuts['bre_hospiz'][array_search("v_p_limit", $shortcuts_bre)]);
			$this->view->shortcuts = $shortcuts_bre;
			$this->view->selected_month_days = $selected_month_days;
			$this->view->master_data = $masterfinal_data;
			$this->view->master_total = $master_total;
			$this->view->subtotal = $subtotal_bre;

			if($this->getRequest()->isPost())
			{
				if($_POST['pdf'])
				{
					$post = $_POST;
					$post['active_days'] = $active_days;
					$post['sapv_days'] = $pat_active_sapv;
					$post['hospiz_days'] = $hospiz_days_client_settings;
					$post['shortcuts'] = $shortcuts_bre;
					$post['selected_month_days'] = $selected_month_days;
					$post['master_data'] = $masterfinal_data;

					$post['patient_details'] = $pm;
					$post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
					$post['health_insurance_ik'] = $this->view->health_insurance_ik;
					$post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;
					$post['healthinsurance_versnr'] = $this->view->healthinsurance_versnr;
					$post['visits_users'] = $prod_short; // modified from $visits_users
					$post['health_insurance_name'] = $this->view->health_insurance_name;

					$post['price_list'] = $this->view->master_price_list;
					$post['current_period'] = $current_period;
					$post['month_selected'] = date('m.Y', strtotime($current_period['start']));

					$post['subtotal'] = $subtotal_bre;
					$post['lbg_client_name'] = $client_details['client_name'];
					$post['lbg_address'] = $client_details['address'];
					$post['lbg_ik_nummer'] = $client_details['institutskennzeichen'];

					if($_REQUEST['show_pdf_data'] == "1"){
						print_r($post); exit;
					}
					
					$gen_pdf = $this->generate_pdf($post, 'hospizperformance', 'hospizperformance_pdf.html');
				}
			}
		}

		public function shimplementationproofAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF-8'); 
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$userid = $logininfo->userid;

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

// 			$patientmaster = new PatientMaster();
// 			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$patientinfo = $patientmaster->get_patientMasterData();
			$this->view->first_name = $patientinfo['first_name'];
			$this->view->last_name = $patientinfo['last_name'];
			$this->view->birthd = $patientinfo['birthd'];
			
			
			$nhollyday = new NationalHolidays();
			$national_holidays_arr = $nhollyday->getNationalHoliday($clientid, $current_period['start'], true);

			foreach($national_holidays_arr as $k_natholliday => $v_natholliday)
			{
				$national_holidays[] = date('d.m.Y', strtotime($v_natholliday['NationalHolidays']['date']));
			}

			$this->view->national_holidays = $national_holidays;
			
			
			//patient days
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			//beware of date d.m.Y format here
			$patient_days = Pms_CommonData::patients_days($conditions);

			//get number of days in each month + start/end day START
			foreach($patient_days[$ipid]['active_periods'] as $k_period => $v_period)
			{
				$last_active = end($patient_days[$ipid]['active_periods']);
				if($v_period['end'] == $last_active['end'])
				{
					$v_period['end'] = date('Y-m-d', strtotime('+1 month', strtotime($v_period['end'])));
				}
				$months = $this->get_period_months($v_period['start'], $v_period['end'], 'Y-m');
				if(empty($patient_active_months))
				{
					$patient_active_months = array();
				}
				$patient_active_months = array_merge($patient_active_months, $months);

			}

			$patient_active_months = array_values($patient_active_months);

			foreach($patient_active_months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}

			//get number of days in each month + start/end day END
			//check if a month is selected START
			if(empty($_REQUEST['list']))
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$attrs['onChange'] = 'changeMonth(this.value);';
//			$attrs['class'] = 'select_month_hospiz_performance';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$this->view->current_period = $current_period;
			$this->view->month_year = strftime('%B %Y', strtotime($current_period['start']));

			//get selected month days
			if($months_details[$selected_month])
			{
				$selected_month_days = $patientmaster->getDaysInBetween($months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
			}

			//format array days to d.m.Y
			array_walk($selected_month_days, function(&$value) {
				$value = date("d.m.Y", strtotime($value));
			});

			// NOT USED
			$this->view->shortcuts_old = array(
				'usage_1', 'usage_2', 'usage_3', 'usage_4', 'usage_5',
				'spacer', 'empty', 'empty', 'empty', 'empty', 'empty','empty', 'empty','empty', 'empty','empty', 'empty', 'empty'
			);
			//USED ISPC-2207 11.06.2017
			$this->view->shortcuts = array(
				'usage_1_new',
				'spacer',
				'sh_title',
				'spacer',
			    'sh_bowel movement',
			    'sh_symptom control', 
			    'sh_control material', 
			    'sh_order_marerial', 
			    'empty','empty', 'empty','empty', 'empty','empty', 'empty', 'empty', 'empty'
			);

			$this->view->selected_month_days = $selected_month_days;
			if($this->getRequest()->isPost())
			{
				if($_POST['pdf'])
				{
					$post = $_POST;
					$post['current_period'] = $this->view->current_period;
					$post['shortcuts'] = $this->view->shortcuts;
					$post['national_holidays'] = $this->view->national_holidays;
					$post['selected_month_days'] = $this->view->selected_month_days;
					$post['first_name'] = $this->view->first_name;
					$post['last_name'] = $this->view->last_name;
					$post['birthd'] = $this->view->birthd;
					$post['month_year'] = $this->view->month_year;
					
					$gen_pdf = $this->generate_pdf($post, 'shimplementationproof', 'shimplementationproof_pdf.html');
					exit;
				}
			}
		}
		
		public function shsapvquestionnaireAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpidFromId($decid);
			
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->patid = $decid;
			$this->view->enc_patid = $_REQUEST['id'];
			
			$client_details = Pms_CommonData::getClientData($clientid);

			$this->view->lbg_sapv_provider = $client_details['0']['lbg_sapv_provider'];
			$this->view->lbg_postcode = $client_details['0']['lbg_postcode'];
			$this->view->lbg_city = $client_details['0']['lbg_city'];
			$this->view->lbg_street = $client_details['0']['lbg_street'];
			$this->view->lbg_institutskennzeichen = $client_details['0']['lbg_institutskennzeichen'];
			
			$user_m = new User;
			
			
			$modules = new Modules();
			if($modules->checkModulePrivileges("111", $clientid))//Medication acknowledge
			{
			    $acknowledge = "1";
			    $approval_users = MedicationApprovalUsers::get_medication_approval_users($clientid,true);
			    $change_users = MedicationChangeUsers::get_medication_change_users($clientid,true);
			}
			else
			{
			    $acknowledge = "0";
			}
			$this->view->acknowledge = $acknowledge;
			
			/* ------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
		
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
		
			$sapvq = new ShSapvQuestionnaire();
		
			if($_REQUEST['qid'])
			{
				$sapvq_res = $sapvq->get_shsapv_questionarie($_REQUEST['qid']);
				
				$user_id = $sapvq_res['0']['create_user'];
				
				$user_details = $user_m->getUserDetails($user_id);
				$user_firstname = $user_details['0']['first_name'];
				$user_lastname = $user_details['0']['last_name'];
				$this->view->user_name = $user_firstname .' ' .$user_lastname;
				$this->view->stamp_users =$user_details['0']['stampusers'];
				
								
			}
			else
			{
				$sapvq_res = $sapvq->getPatientShSapvQuestionnaire($ipid);
				// force to edit first one - just one needed
				$_REQUEST['qid'] = $sapvq_res['0']['id'];
				
				$user_id = $sapvq_res['0']['create_user'];
				$this->view->stamp_users =$sapvq_res['0']['stampusers'];
		
				$user_details = $user_m->getUserDetails($user_id);
				$user_firstname = $user_details['0']['first_name'];
				$user_lastname = $user_details['0']['last_name'];
				$this->view->user_name = $user_firstname .' ' .$user_lastname;
			}
			$this->retainValues($sapvq_res['0']);
			
			if(strlen($sapvq_res['0']['stampusers'] ) > 0 )
			{
				$stamp_info = explode('-', $sapvq_res['0']['stampusers'] );
				
				$user = $stamp_info[0];
				$stamp = $stamp_info[1];

				$ustamp = new UserStamp();
				$userstatmp = $ustamp->getUserStampById($user, $stamp);
				
				if(!empty($userstatmp))
				{
					$user_stamp_info['bsnr'] = $userstatmp[0]['stamp_bsnr'];
					$user_stamp_info['lanr'] = $userstatmp[0]['stamp_lanr'];
				
					$user_stamp_info['row1'] = $userstatmp[0]['row1'];
					$user_stamp_info['row2'] = $userstatmp[0]['row2'];
					$user_stamp_info['row3'] = $userstatmp[0]['row3'];
					$user_stamp_info['row4'] = $userstatmp[0]['row4'];
					$user_stamp_info['row5'] = $userstatmp[0]['row5'];
					$user_stamp_info['row6'] = $userstatmp[0]['row6'];
					$user_stamp_info['row7'] = $userstatmp[0]['row7'];
					
					$this->view->user_stamp_hidden = '<textarea name="stamp_block" style="display: none">' .$userstatmp[0]['row1']. '<br/>' .$userstatmp[0]['row2']. '<br/>'.$userstatmp[0]['row3'].'<br/>'.$userstatmp[0]['row4'].'<br/>'.$userstatmp[0]['row5'].'<br/>'.$userstatmp[0]['row6'].'<br/>'.$userstatmp[0]['row7'].'</textarea>';
					}
			}
			
		
			
			
			
			/* ------------------------------------------------ */
			
			/* --------------------Check for MultipleArzstemple- 29.10.2015---------------------------- */
			$multiplestamps_previleges = new Modules();
			
			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}
			
			$this->view->multiplestamps_option = $multiplestamps_option;
			
			/* -------------------------------29.10.2015------------------------------------------------ */
			
         if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
			
			$users = new User();
			$userarray = $users->getUserByClientid($logininfo->clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();

			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['user_title']) . " " .trim($user['last_name']) . ", " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;
			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				$showselect = 1; // show select to all
			}

			$this->view->showselect = $showselect;

			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);

			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;
			
			$sapvq = new ShSapvQuestionnaire();
			
			if($_REQUEST['qid'])
			{
				$sapvq_res = $sapvq->get_shsapv_questionarie($_REQUEST['qid']);
					
				$stamp = $sapvq_res['0']['stampusers'];
				$this->view->stamp_users = 	$stamp;
					
				$user_id = $sapvq_res['0']['create_user'];
			
				$user_details = $user_m->getUserDetails($user_id);
				$user_firstname = $user_details['0']['first_name'];
				$user_lastname = $user_details['0']['last_name'];
				$this->view->user_name = $user_firstname .' ' .$user_lastname;
					
			}
			else
			{
				$sapvq_res = $sapvq->getPatientShSapvQuestionnaire($ipid);
				// force to edit first one - just one needed
				$stamp = $sapvq_res['0']['stampusers'];
				$this->view->stamp_users = 	$stamp;
					
				$_REQUEST['qid'] = $sapvq_res['0']['id'];
			
				$user_id = $sapvq_res['0']['create_user'];
				$this->view->stamp_users =$sapvq_res['0']['stampusers'];
			
				$user_details = $user_m->getUserDetails($user_id);
				$user_firstname = $user_details['0']['first_name'];
				$user_lastname = $user_details['0']['last_name'];
				$this->view->user_name = $user_firstname .' ' .$user_lastname;
			
			
			
			}
			
			
			/* ------------------------------ SAVE FORM BEFORE DISPLAY --------------------------------- */
			if($this->getRequest()->isPost() && strlen($_POST['pdf_export']) == 0)
			{
				
			    if($acknowledge =="1")
			    {
			        $_POST['skip_trigger'] = "1";
			    }
			    
				/* ----------------Patient save diagnosis -------------------------------------- */
				$pat_diagnosis = new Application_Form_PatientDiagnosis();
				$diagno_text = new Application_Form_DiagnosisText();
				//	print_r($_POST);exit;
				$a_post = $_POST;
				$a_post['clientid'] = $clientid;
				$a_post['ipid'] = $ipid;
		
				//			for($i = 1; $i <= sizeof($_POST['diagnosis']); $i++)
				foreach($_POST['diagnosis'] as $k_i => $diagnosis_value)
				{
					if(strlen($diagnosis_value) > 0 && strlen($_POST['hidd_diagnosis'][$k_i]) < 1)
					{
						$a_post['newdiagnosis'][$k_i] = $diagnosis_value;
						$a_post['newdiagnosistype'][$k_i] = $_POST['dtype'][$k_i];
						$a_post['newdiagnosisicd'][$k_i] = $_POST['icdnumber'][$k_i];
					}
				}
		
				if(is_array($a_post['newdiagnosis']))
				{
					$dt = $diagno_text->InsertEditData($a_post);
		
					foreach($dt as $key => $val)
					{
						$a_post['newhidd_diagnosis'][$key] = $val['id'];
					}
				}
		
				for($i = 1; $i <= sizeof($_POST['diagnosis_ed']); $i++)
				{
				if(strlen($_POST['diagnosis_ed'][$i]) > 0 && strlen($_POST['hidd_diagnosis_ed'][$i]) < 1)
				{
				$a_post['newdiagnosis_ed'][$i] = $_POST['diagnosis_ed'][$i];
				$a_post['newdiagnosistype_ed'][$i] = $_POST['dtype_ed'][$i];
				}
				}
		
				if(is_array($a_post['newdiagnosis_ed']))
				{
				$dt = $diagno_text->Insert_EdData($a_post);
		
				foreach($dt as $key => $val)
				{
				$a_post['newhidd_diagnosis_ed'][$key] = $val['id'];
				}
				}
		
				/* ----------------Patient save diagnosis -------------------------------------- */
				$pat_diagnosis->UpdateData($a_post);
		
				$dm_form = new Application_Form_PatientDiagnosisMeta();
				$dm_form->UpdateData($a_post);
		
				/* ----------------Patient save medications -------------------------------------- */
				$patient_medication_form = new Application_Form_Medication();
				for($i = 1; $i <= count($_POST['medication']); $i++)
				{
				if(strlen($_POST['medication'][$i]) > 0 && $_POST['hidd_medication'][$i] < 1)
				{
				$a_post['newmids'][$i] = $_POST['drid'][$i];
				$a_post['newmedication'][$i] = $_POST['medication'][$i];
				}
				}
		
				if(is_array($a_post['newmedication']))
				{
				$dts = $patient_medication_form->InsertNewData($a_post);
		
				foreach($dts as $key => $dt)
				{
				$a_post['newhidd_medication'][$key] = $dt->id;
				}
				}
		
				$med_form = new Application_Form_PatientDrugPlan();
				$med_form->UpdateMultiData($a_post);
				//medication edit procedure end
				//
				//medication add procedure start
				$med_form = new Application_Form_PatientDrugPlan();
				$patient_medication_form = new Application_Form_Medication();
		
				$add_post = $_POST['add'];
				$add_post['ipid'] = $ipid;
				$add_post['isbedarfs'] = 0;
		
				foreach($add_post['medication'] as $key => $val)
				{
				if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
				{
				$add_post['newmedication'][$key] = $add_post['medication'][$key];
				}
		}
		
		if(is_array($add_post['newmedication']))
				{
					$dts = $patient_medication_form->InsertNewData($add_post);
		
					foreach($dts as $key => $dt)
					{
					$add_post['newhidd_medication'][$key] = $dt->id;
					}
					}
		
					$med_form->InsertMultiData($add_post);
		
					if(count($_POST['addbedarf']) > 0)
					{
					$med_form = new Application_Form_PatientDrugPlan();
					$add_post = $_POST['addbedarf'];
					$add_post['ipid'] = $ipid;
					$add_post['isbedarfs'] = 1;
		
					foreach($add_post['medication'] as $key => $val)
					{
					if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
					{
					$add_post['newmedication'][$key] = $add_post['medication'][$key];
					}
					}
		
		
					if(is_array($add_post['newmedication']))
					{
							$dts = $patient_medication_form->InsertNewData($add_post);
		
							foreach($dts as $key => $dt)
							{
							$add_post['newhidd_medication'][$key] = $dt->id;
					}
					}
		
							/* ------------------------------------------------ */
							$med_form->InsertMultiData($add_post);
							}
		
					if(count($_POST['addiv']) > 0)
					{
									$med_form = new Application_Form_PatientDrugPlan();
		
									$add_post = $_POST['addiv'];
									$add_post['ipid'] = $ipid;
									$add_post['isivmed'] = 1;
									$add_post['verordnetvon'] = $_POST['verordnetvon'];
		
									foreach($add_post['medication'] as $key => $val)
									{
									if(strlen($add_post['medication'][$key]) > 0 && strlen($add_post['hidd_medication'][$key]) < 1)
									{
									$add_post['newmedication'][$key] = $add_post['medication'][$key];
									}
									}
		
									if(is_array($add_post['newmedication']))
									{
									 $dts = $patient_medication_form->InsertNewData($add_post);
									 foreach($dts as $key => $dt)
									 {
											$add_post['newhidd_medication'][$key] = $dt->id;
									 }
									}
											/* ------------------------------------------------ */
					   $med_form->InsertMultiData($add_post);
					 }
					/* ----------------Patient save medications -------------------------------------- */
		
					
											
					/* ----------------Stampt---------29.10.2015---------------------------- */
							if($_POST['stampusers'] > 0)
							{
								//print_r($_POST['stampusers']);exit;
							  if($multiplestamps_option === true)	
							  {			
							      $stamp_info = explode('-', $_POST['stampusers']);
								  $stamp_user = $stamp_info[0];
								  $stamp_id = $stamp_info[1];
							
								   $ustamp = new UserStamp();
								   $userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
											
				                   $_POST['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
								   $_POST['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
								}
								 else
									 {
									  $userst = Doctrine::getTable('User')->find($_POST['stampusers']);
										if($userst)
										{
										 $uarray = $userst->toArray();
										  $_POST['arzt_nr'] = $uarray['LANR'];
										  $_POST['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
										 }
								      }
								}					
					/* ----------------end Stampt---------29.10.2015---------------------------- */
								
					/* ----------------Patient save sapv questionaire -------------------------------------- */
								
					$init = new Application_Form_SHSapvQuestionnaire();
					
			   if($_REQUEST['qid'])
				{
					$result = $init->updateSapvQuestionnaire($_POST, $_REQUEST['qid'], $ipid, $userid);
				}
				else
				{
					$result = $init->insertSapvQuestionnaire($_POST, $ipid, $userid);
				}
					
		
					if($result)
					{
					 $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
					}
					/* ----------------Patient save sapv questionaire -------------------------------------- */
				} //END POST
		
				
				
											/* ----------------Patient general details-------------------------------------- */
// 											$patientinfo = $patientmaster->getMasterData($decid, 0);
											$patientinfo = $patientmaster->get_patientMasterData();
											$this->view->patient_lname = $patientinfo['last_name'];
											$this->view->patient_fname = $patientinfo['first_name'];
											$this->view->patient_birthd = $patientinfo['birthd'];
		
											if(strlen($patientinfo['street1']) > 0)
											{
											$patient_address.= $patientinfo['street1'] . "\n";
											}
											if(strlen($patientinfo['zip']) > 0)
											{
											$patient_address.= $patientinfo['zip'] . ', ';
											}
		
											if(strlen($patientinfo['city']) > 0)
											{
											$patient_address.= $patientinfo['city'];
											}
		
											$this->view->patient_address = $patient_address;
		
											$isdicharged = PatientDischarge::isDischarged($decid);
											$this->view->isdischarged = 0;
											if($isdicharged)
											{
											$this->view->isdischarged = 1;
											}
		
											/* ----------------Patient HealthInsurance details-------------------------------------- */
											$ph = new PatientHealthInsurance();
											$phi = $ph->getPatientHealthInsurance($ipid);
		
													if($phi)
													{
													$health_insurance = $phi[0]['company_name'];
													$this->view->patient_health_insurance = $health_insurance;
													}
													else
													{
													$this->view->patient_health_insurance = '';
		                                            }
		
		/* ----------------Patient - Pflegestufe -------------------------------------- */
		$pms = new PatientMaintainanceStage();
		$pat_pms = $pms->getLastpatientMaintainanceStage($ipid);
		
		$this->view->stage = $pat_pms[0]['stage'];
		$this->view->erstantrag = $pat_pms[0]['erstantrag'];
		$this->view->horherstufung = $pat_pms[0]['horherstufung'];
		
		$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
		$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
		$this->view->carelevellist = $grid->renderGrid();
		
		/* ----------------Patient - Family doctor -------------------------------------- */
		$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($patientinfo['familydoc_id']);
		
			if($docarray)
			{
			$this->view->familydoctor = 1;
			}
			else
			{
			$this->view->familydoctor = 0;
			}
		
			/* ----------------Patient - Pflegedienst -------------------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($ipid);
		
			if($ppflearray)
			{
			$this->view->pflegedienst = 1;
			}
			else
			{
			$this->view->pflegedienst = 0;
			}
		
			/* ----------------Patient - Contact person -------------------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->get2PatientContact($ipid);
			if($pcs)
			{
			$this->view->contactperson = 1;
			}
			else
			{
			$this->view->contactperson = 0;
			}
		
			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);
		
			/* ----------------Patient - Ambulanter Hospizdienst -------------------------------------- */
			$hp_assoc = new PatientHospiceassociation ();
			$hp_assoc_array = $hp_assoc->getPatientHospiceassociation($ipid);
		
			if($hp_assoc_array)
			{
			$this->view->hospizdienst = 1;
			}
			else
			{
			$this->view->hospizdienst = 0;
			}
		
			/* ----------------Patient - Main diagnosis------------------ */
			$dm = new DiagnosisIcd();
			$this->view->icddiagnosisarr = $dm->getDiagnosisData(1);
		
			$dm = new DiagnosisMeta();
			$diagnosismeta = $dm->getDiagnosisMetaData(1);
		
			$this->view->diagnosismeta = $diagnosismeta;
			$this->view->jsdiagnosismeta = json_encode($diagnosismeta);
		
			$this->view->ipid = $ipid;
		
			$a_diagno = array();
		
			$abb = "'HD','ND'";
			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($clientid, $abb);
			$this->view->dtypearray = $darr;
			$this->view->jdarr = json_encode($darr);
		
			$abb = "'ND'";
			$dg = new DiagnosisType();
			$dsad = $dg->getDiagnosisTypes($clientid, $abb);
			$uptype = $dsad[0]['id'];
		
			$abb = "'AD'";
			$dg = new DiagnosisType();
			$dad = $dg->getDiagnosisTypes($clientid, $abb);
			$dtype = $dad[0]['id'];
		
			if($dtype == "")
			{
				$dtype = "0";
			}
		
			$diagns = new PatientDiagnosis();
			$b_diagno = $diagns->getFinalData($ipid, $dtype);
		
			foreach($b_diagno as $key => $val)
			{
			if(strlen($val['diagnosis']) > 0)
			{
			$loc = Doctrine_Query::create()
			->update("PatientDiagnosis")
			->set('diagnosis_type_id', "'" . $uptype . "'")
					->where("id='" . $val['pdid'] . "'");
							$loc->execute();
			}
			}
		
							$diagns = new PatientDiagnosis();
			$main = $diagns->getPatientMainDiagnosis($ipid, "diagnosis_icd");
		
			/*			 * ******************************************************************************************** */
			$a_diagno = array();
			$comma = ",";
			$ipidval = "'0'";
		
			if(is_array($darr))
					{
					foreach($darr as $key => $val)
					{
			$ipidval .= $comma . "'" . $val['id'] . "'";
			$comma = ",";
			}
			}
		
			$diagns = new PatientDiagnosis();
			$a_diagno = $diagns->getFinalData($ipid, $ipidval);
			$diagno_cnt = count($a_diagno);
			
			/*ISPC - 2364 - sorted by user */
			$pdiaord = PatientDiagnoOrderTable::getInstance()->findDiagnoOrder($ipid);
			//RWH - ISPC-950
			//sort by icd
			if(empty($pdiaord))
			{
				$a_diagno = $this->array_sort($a_diagno, 'icdnumber', SORT_ASC);
				$a_diagno = array_values($a_diagno);
			
				//sort by type
				foreach($darr as $k_diag_type => $v_diag_type)
				{
					foreach($a_diagno as $k_diag => $v_diag)
					{
						if($v_diag_type['id'] == $v_diag['diagnosis_type_id'])
						{
							$a_diagno_sorted[] = $v_diag;
						}
					}
				}
				//RWH end
			}
			else
			{
				$a_diagno = array_column($a_diagno, null, 'pdid');
				$pdorder = $pdiaord[0]['diagno_order'];
					
				$diagnaddother = array_diff(array_keys($a_diagno), $pdorder);
				$diagnremoveother = array_diff($pdorder, array_keys($a_diagno));
					
				if($diagnaddother)
				{
					$pdorder = array_merge($pdorder, $diagnaddother);
				}
					
				if($diagnremoveother)
				{
					$pdorder = array_diff($pdorder, $diagnremoveother);
				}
					
				$a_diagno_sorted = [];
				foreach ($pdorder as $pdid) {
					$a_diagno_sorted[] = $a_diagno[$pdid];
				}
			}
			$a_diagno = $a_diagno_sorted;
		
			if($diagno_cnt < 6)
			{
			for($i = ($diagno_cnt + 1); $i <= 6; $i++)
			{
			$a_diagno[$i]['tabname'] = "";
			$a_diagno[$i]['icdnumber'] = "";
			$a_diagno[$i]['hidd_icdnumber'] = "";
			$a_diagno[$i]['diagnosis'] = "";
			$a_diagno[$i]['pdid'] = "";
			$a_diagno[$i]['hidd_diagnosis'] = "";
			$a_diagno[$i]['diagnosis_type_id'] = "";
			$a_diagno[$i]['meta_title1'] = "";
			$a_diagno[$i]['meta_title2'] = "";
			$a_diagno[$i]['meta_title3'] = "";
			}
			}
		
			$this->view->jscount = count($a_diagno);
					$meta_data = PatientDiagnosisMeta::getPatientDiagnosismeta($ipid);
		
					foreach($meta_data as $kx => $mvas_data)
			{
			$meta_diagnosis[$mvas_data['diagnoid']][] = $mvas_data['metaid'];
			}
			$grid = new Pms_Grid($a_diagno, 1, count($a_diagno), "listdiagnosis.html");
			$grid->meta_diagnosis = $meta_diagnosis;
			$grid->gridview->dtypearray = $darr;
			$this->view->diagno = $grid->renderGrid();
			$this->view->rowcount = count($a_diagno);
		
			$pc = new PatientDiagnosis();
			$maindiagnoarr = $pc->getPatientMainDiagnosis($ipid, "diagnosis_icd");
		
			if($maindiagnoarr)
			{
			$dt = new DiagnosisIcd();
			$dtarr = $dt->getDiagnosisDataById($maindiagnoarr[0]['diagnosis_id']);
			$this->view->meta_icdnumber = $dtarr[0]['icd_primary'];
			$this->view->meta_diagnosis = $dtarr[0]['id'];
			$this->view->hidd_meta_diagnosis = $maindiagnoarr[0]['id'];
			}
		
			$dm = new PatientDiagnosisMeta();
			$dmarray = $dm->getPatientDiagnosismeta($ipid);
			if($dmarray)
			{
			$metatitle[0] = $dmarray[0]['metaid'];
			$metatitle[1] = $dmarray[1]['metaid'];
			$metatitle[2] = $dmarray[2]['metaid'];
		
			$meta_title_hidd[0] = $dmarray[0]['id'];
			$meta_title_hidd[1] = $dmarray[1]['id'];
				$meta_title_hidd[2] = $dmarray[2]['id'];
			}
			$this->view->metatitle = $metatitle;
			$this->view->meta_title_hidd = $meta_title_hidd;
		
			/* ----------------Patient - Main diagnosis------------------ */
		
			/* ----------------Patient - Location details-------------------------------------- */
		
			$hospitalids = Doctrine_Query::create()
			->select("*,(CONVERT(AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') using latin1)) as location")
			->from('Locations')
			->where('isdelete = 0')
			->andWhere('client_id ="' . $clientid . '"')
			->andWhere('location_type = 1');
			$hosparray = $hospitalids->fetchArray();
		
			$hosparr[] = "9999999999";
			foreach($hosparray as $hospital)
			{
			$hosparr[] = $hospital['id'];
			$hospital_location_array[$hospital['id']] = $hospital['location'];
			}
		
			//get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
			->select('*')
					->from('PatientLocation')
					->where('ipid ="' . $ipid . '"')
					->andWhere('isdelete="0"')
					->andWhereIn('location_id', $hosparr)
					->orderBy('valid_from DESC')
			->limit('1');
			$patlocationsArr = $patloc->fetchArray();
		
			if($patlocationsArr)
			{
			$this->view->hospital_location = $hospital_location_array[$patlocationsArr[0]['location_id']];
			if($patlocationsArr[0]['valid_till'] != '' && $patlocationsArr[0]['valid_till'] != '0000-00-00 00:00:00')
			{
			$valid_till = date('d.m.Y', strtotime($patlocationsArr[0]['valid_till']));
			}
				else
				{
				$valid_till = date('d.m.Y');
			}
			$valid_from = date('d.m.Y', strtotime($patlocationsArr[0]['valid_from']));
			$this->view->hospital_period = $valid_from . ' - ' . $valid_till;
			}
		
			/* ----------------Patient - Medication -------------------------------------------- */
			//medis edit grid procedure start
					if(strlen($_REQUEST['mid']) > 0)
					{
					$previleges = new Pms_Acl_Assertion();
					$return = $previleges->checkPrevilege('patientmedication', $userid, 'candelete');
		
							if(!$return)
							{
							 $this->_redirect(APP_BASE . "error/previlege");
							 }
		
							 if($_GET['act'] == "del")
							 {
		
							//delete medication
							$mid = $_GET['mid'];
							$mod = Doctrine::getTable('PatientDrugPlan')->find($mid);
							$mod->isdelete = 1;
							$mod->save();
							$this->view->error_message = $this->view->translate("medicationdeletedsuccessfully");
							}
							}
							$pq = new User();
							$pqarr = $pq->getUserByClientid($clientid);
								$this->view->all_users = $pq->getUserByClientid($clientid, '1', true);
		
										$this->view->kvnodelicon = "1";
		
										$comma = ",";
										$userval = "'0'";
		
										foreach($pqarr as $key => $val)
										{
										$userval .= $comma . "'" . $val['id'] . "'";
										$comma = ",";
			}
		
			$usergroup = new Usergroup();
			$groupid = $usergroup->getMastergroupGroups($clientid, array('4'));
		
			$users = $pq->getuserbyidsandGroupId($userval, $groupid, 1);
			$this->view->users = $users;
			$this->view->jsusers = json_encode($users);
		
			//get all client users -> For medis dropdown
			$allUserArray = $pq->getUserByClientid($clientid);
			$userarraylastall[] = $this->view->translate('selectuser');
			foreach($allUserArray as $user)
			{
			$userarraylastall[$user['id']] = trim($user['last_name']) . " " . trim($user['first_name']);
			}
			$this->view->allUsers = $userarraylastall;
		
			$this->view->pid = $_GET['id'];
			$this->view->caseclass = "active";
		
		
		
		
			#######################################
			$medic = new PatientDrugPlan();
		
				// get bedarf medication
				$medicarr = $medic->getbedarfMedication($decid);
		
						$medication_master_ids['bedarf'][] = "XXXXXX";
						foreach($medicarr as $k_medicarr => $v_medicarr)
						{
						$medication_master_ids['bedarf'][] = $v_medicarr['medication_master_id'];
			}
		
				// get active medication
				$medicarr1 = $medic->getMedicationPlan($decid);
		
				$medication_master_ids['active'][] = "XXXXXX";
				foreach($medicarr1 as $k_medicarr1 => $v_medicarr1)
				{
				$medication_master_ids['active'][] = $v_medicarr1['medication_master_id'];
				}
		
		
				// get deleted medication
				$medicarr2 = $medic->getDeletedMedication($decid);
		
				$medication_master_ids['deleted'][] = "XXXXXX";
				foreach($medicarr2 as $k_medicarr2 => $v_medicarr2)
				{
				$medication_master_ids['deleted'][] = $v_medicarr2['medication_master_id'];
				}
		
				// get iv medication
				$ivarr = $medic->getivMedication($decid);
		
				$medication_master_ids['ivmed'][] = "XXXXXX";
				foreach($ivarr as $k_ivarr => $v_ivarr)
				{
				$medication_master_ids['ivmed'][] = $v_ivarr['medication_master_id'];
				}
		
				// get master medication data
				$medication_master_ids = array_merge($medication_master_ids['bedarf'], $medication_master_ids['active'], $medication_master_ids['deleted'], $medication_master_ids['ivmed']);
		
				$med = new Medication();
				$medarr1 = $med->getMedicationById($medication_master_ids);
		
				foreach($medarr1 as $k_medarr1 => $v_medarr1)
				{
				$medication_master_array[$v_medarr1['id']] = $v_medarr1;
			}
		
			// display active medication
			if(count($medicarr1 < 1))
			{
			$this->view->mcntr = 0;
			}
			
			
			
			$medicarr1 = Pms_CommonData::clear_pdf_data($medicarr1);
				$grid_pdf = new Pms_Grid($medicarr1, 1, count($medicarr1), "shlistpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->medications_pdf = $grid_pdf->renderGrid();
		
				
				$grid = new Pms_Grid($medicarr1, 1, count($medicarr1), "shlistpatientmedicationedit.html");
				$grid->medication_master_array = $medication_master_array;
				$this->view->medications = $grid->renderGrid();
		
				// count medication
				$this->view->ajx = 1;
				$this->view->cntr = count($medicarr1);
		
				// discplay deleted medication
				$grid = new Pms_Grid($medicarr2, 1, count($medicarr2), "shlistdelpatientmedication_ajax.html");
				$grid->medication_master_array = $medication_master_array;
				$this->view->delmedications = $grid->renderGrid();
		
		
				// count medication
				$this->view->counter = count($medicarr1) + count($medicarr2);
		
				// display bedarf medication
				$grid = new Pms_Grid($medicarr, 1, count($medicarr), "shlistpatientmedicationbedarfsedit.html");
				$grid->medication_master_array = $medication_master_array;
				$this->view->bedarfsmedications = $grid->renderGrid();
		
				$medicarr = Pms_CommonData::clear_pdf_data($medicarr);
				$grid_pdf = new Pms_Grid($medicarr, 1, count($medicarr), "shlistpatientmedicationedit_pdf.html");
				$grid_pdf->medication_master_array = $medication_master_array;
				$this->view->bedarfsmedications_pdf = $grid_pdf->renderGrid();
		
		
		
				//iv medis
				$ivarr = $medic->getivMedication($decid);
				$this->view->counter = count($medicarr1) + count($medicarr) + count($medicarr2);
		
				$grid_iv = new Pms_Grid($ivarr, 1, (count($medicarr) + count($ivarr) + count($medicarr2)), "shlistpatientmedicationivedit.html");
				$grid_iv->medication_master_array = $medication_master_array;
				$this->view->ivmedications = $grid_iv->renderGrid();
		
				$ivarr = Pms_CommonData::clear_pdf_data($ivarr);
				$grid_iv_pdf = new Pms_Grid($ivarr, 1, count($ivarr), "shlistpatientmedicationedit_pdf.html");
				$grid_iv_pdf->medication_master_array = $medication_master_array;
				$this->view->ivmedications_pdf = $grid_iv_pdf->renderGrid();
				#######################################################
				//medis edit grid procedure end
				//medis add grid procedure start
				$comma = ",";
				$userval = "'0'";
		
				foreach($pqarr as $key => $val)
				{
				$userval .= $comma . "'" . $val['id'] . "'";
				$comma = ",";
			}
		
			$MasterGroups = array("4", "5", "6");
			$usersgroups = $usergroup->getUserGroups($MasterGroups);
		
			if(count($usersgroups) > 0)
			{
				foreach($usersgroups as $group)
				{
					if($group['groupmaster'] == 4)
					{
						$groupsDocArray[] = $group['id'];
					}
					else
					{
						$groupsarray[] = $group['id'];
					}
				}
			}
		
			$usersPflegeKoordArray = $pq->getuserbyGroupId($groupsarray, $clientid);
			$pflegeKoords['0'] = "Select User";
		
			foreach($usersPflegeKoordArray as $user)
				{
				$pflegeKoords[$user['id']] = $user['last_name'] . ", " . $user['first_name'];
			}
		
		
			$this->view->pfleges = $pflegeKoords;
		
			$usersDoctorsArray = $pq->getuserbyGroupId($groupsDocArray, $clientid,true);
			$doctors['0'] = "Auswahl";
			foreach($usersDoctorsArray as $doctor)
			{
			$doctors[$doctor['id']] = $doctor['last_name'] . ", " . $doctor['first_name'];
			}
			$this->view->doctors = $doctors;
		
			$doctors['-1'] = "Anderer Arzt";
			$doctors['-2'] = "Hausarzt";
			$this->view->users = $doctors;
		
			$a_medic = array();
		
			if(is_array($_POST['hidd_medication']))
			{
			foreach($_POST['hidd_medication'] as $key => $val)
			{
			$a_medic[$key]['medication'] = $_POST['medication'][$key];
			$a_medic[$key]['hidd_medication'] = $_POST['hidd_medication'][$key];
			}
			}
			else
			{
				for($i = 0; $i < 6; $i++)
			{
			$a_medic[$i] = array('cnt' => $i);
			}
			}
		
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 9999, "shlistpatientmedicationadd.html");
			$this->view->medicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//medis add grid procedure end
			//bedarf medis add start
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 99999, "shlistpatientbedarfmedicationadd.html");
			$this->view->bedarfmedicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//bedarf medis add end
			//iv medis add start
			$this->view->jsmedcount = count($a_medic);
			$grid = new Pms_Grid($a_medic, 1, count($a_medic) + 999999, "shlistpatientivmedicationadd.html");
			$this->view->ivmedicgrid = $grid->renderGrid();
			$this->view->rowcount = count($a_medic);
			//iv edis add end
		
			/* ----------------Patient - Stammdaten - More info--------------------------------- */
			$pmf = new PatientMoreInfo();
			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
			$this->view->dk = $pat_moreinfo[0]['dk'];
			$this->view->peg = $pat_moreinfo[0]['peg'];
			$this->view->port = $pat_moreinfo[0]['port'];
			$this->view->zvk = $pat_moreinfo[0]['zvk'];
			$this->view->pumps = $pat_moreinfo[0]['pumps'];
			$this->view->magensonde = $pat_moreinfo[0]['magensonde'];
		
			/* ----------------Patient - Living Will--------------------------------- */
			$this->view->living_will = $patientinfo['living_will'];
		
		
			/* ------------------------------ PDF  ------------------------------------- */
		
			if(strlen($_POST['pdf_export']) > 0)
			{
			$post = $_POST;
			//print_r($post);exit;
			$post['patient_health_insurance'] = $this->view->patient_health_insurance;
			$post['patient_lname'] = $this->view->patient_lname;
			$post['patient_fname'] = $this->view->patient_fname;
			$post['patient_birthd'] = $this->view->patient_birthd;
			$post['patient_address'] = $this->view->patient_address;
			$post['medications_pdf'] = $this->view->medications_pdf;
			$post['bedarfsmedications_pdf'] = $this->view->bedarfsmedications_pdf;
			$post['ivmedications_pdf'] = $this->view->ivmedications_pdf;
			$post['lbg_sapv_provider'] = $this->view->lbg_sapv_provider;
			$post['lbg_postcode'] = $this->view->lbg_postcode;
			$post['lbg_city'] = $this->view->lbg_city;
			$post['lbg_street'] = $this->view->lbg_street;
			$post['lbg_institutskennzeichen'] = $this->view->lbg_institutskennzeichen;
			//$post['sh_doctor_user'] = $this->view->sh_doctor_user;
			$post['user_name'] = $this->view->user_name;
			$post['stamp_block'] = strip_tags(str_replace('<br/>', "\n", $_POST['stamp_block']));
			$this->generateformPdf(3, $post, 'shsapvquestionnaire', "shsapv_questionnaire_pdf.html");
			}
			}
		
			public function stammblatt5Action()
			{
				$logininfo = new Zend_Session_Namespace('Login_Info');
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$ipid = Pms_CommonData::getIpid($decid);
				$clientid = $logininfo->clientid;
				$userid = $logininfo->userid;
				$patientmaster = new PatientMaster();
				$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
				$tm = new TabMenus();
				$this->view->tabmenus = $tm->getMenuTabs();
			
				/* ------------------- User Data--------------------------------------- */
				$loguser = Doctrine::getTable('User')->find($logininfo->userid);
				if($loguser)
				{
					$loguserarray = $loguser->toArray();
					$this->view->loginusername = $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
				}
			
				/* ------------------- Client Data--------------------------------------- */
				$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
				$this->view->client_name = $clientdata[0]['client_name'];
				$this->view->client_team_name = $clientdata[0]['team_name'];
				$this->view->client_city = $clientdata[0]['city'];
				$this->view->client_street = $clientdata[0]['street1'];
				$this->view->client_zip = $clientdata[0]['postcode'];
				$this->view->client_phone = $clientdata[0]['phone'];
				$this->view->client_fax = $clientdata[0]['fax'];
				$this->view->client_email = $clientdata[0]['emailid'];
			
				/* -------------------Patient Data--------------------------------------- */
// 				$patientarr = $patientmaster->getMasterData($decid, 0);
				$patientarr = $patientmaster->get_patientMasterData();
				$this->view->pid = $ipid;
				$this->view->birth = $patientarr['birthd'];
				$this->view->lastname = $patientarr['last_name'];
				$this->view->firstname = $patientarr['first_name'];
				$this->view->street = $patientarr['street1'];
				$this->view->zip = $patientarr['zip'];
				$this->view->patcity = $patientarr['city'];
				$this->view->pattel = $patientarr['phone'];
				$this->view->pathandy = $patientarr['mobile'];
				$this->view->patientenverfugung = $patientarr['living_will'];
				
				//TODO-2496
				$acp = new PatientAcp();
				$acp_data = $acp->getByIpid(array($ipid));
				$current_acp_data = $acp_data[$ipid];
				if ( ! empty($current_acp_data)) {
				    foreach ($current_acp_data as $k => $block) {
				        
				        switch ($block['division_tab']) {
				            
				            case "living_will" :
				                $this->view->patientenverfugung = ($block['active'] == "yes") ? "1" : "0";
				                break;
				                
						}
				    }
				}
				//dd($this->view->patientenverfugung);

				
				/* ------------------- Health Insurance Data----------------------------- */
				$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
				$this->view->healthinsurance_company = $healthinsu_array[0]['company_name'];
				$this->view->healthinsurance_kknr = $healthinsu_array[0]['kvk_no'];
				$this->view->healthinsurance_versnr = $healthinsu_array[0]['insurance_no'];
				$this->view->healthinsurance_companytel = $healthinsu_array[0]['ins_phone'];
				$this->view->healthinsurance_companyfax = $healthinsu_array[0]['ins_phonefax'];
				//according to ISPC-834
				if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '1')
				{
					$this->view->zuzahlung = '0';
				}
				else if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '2')
				{
					$this->view->zuzahlung = '1';
				}
				else
				{
					$this->view->zuzahlung = '1';
				}
				//according to ISPC-1403
				/* if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
					$healtharray = $helathins->toArray();
					$this->view->healthinsurance_companytel = $healtharray['phone'];
					$this->view->healthinsurance_companyfax = $healtharray['phonefax'];
				} */
			
				/* --------------Patient family doctor---------------------------- */
				$fdoc = new FamilyDoctor();
				$docarray = $fdoc->getFamilyDoc($patientarr['familydoc_id']);
				$this->view->hausarzt_details = $docarray[0]['last_name'] . ", " . $docarray[0]['first_name'] . "<br/> " . $docarray[0]['street1'] . ", " . $docarray[0]['zip'] . " " . $docarray[0]['city'];
				$this->view->hausarzt_tel = $docarray[0]['phone_practice'];
				$this->view->hausarzt_fax = $docarray[0]['fax'];
			
				/* --------------Patient First Pfllegedienst---------------------------- */
				$ppfle = new PatientPflegedienste();
				$ppflearray = $ppfle->getPatientPflegedienste($patientarr['ipid']);
				$this->view->pflegedienst_details = htmlspecialchars($ppflearray[0]['nursing']) . "<br/>" . htmlspecialchars($ppflearray[0]['street1']) . ", " . htmlspecialchars($ppflearray[0]['zip']) . " " . htmlspecialchars($ppflearray[0]['city']);
				$this->view->pflegedienst_tel = $ppflearray[0]['pf_phone_practice'];
				$this->view->pflegedienst_fax = $ppflearray[0]['pf_fax'];
								
				/* --------------Patient Doctor Users Assigned---------------------------- */
				$usergroup = new Usergroup();
				$doctorgroups = $usergroup->getDoctorGroupid($clientid);

				$epid_ipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->whereIn('ipid', $ipid)
				->andWhere('epid IS NOT NULL');
				$epid_ipid_res = $epid_ipid->fetchArray();

				$epid[] = '999999999';
				foreach($epid_ipid_res as $k_epid => $v_epid)
				{
					$epid2ipid[$v_epid['epid']] = $v_epid['ipid'];
					$epids[] = $v_epid['epid'];
				}
				// get active patients asigned to users
				
				$pats_users = Doctrine_Query::create()
				->select('userid, count(epid) as user_epids')
				->from('PatientQpaMapping')
				->whereIn('epid',$epids)
				->andWhere(' clientid = '. $clientid)
				->andWhere('epid!=""')
				->groupBy('userid');
				// ->andWhere("till_assign='0000-00-00 00:00:00'");
				$assigned_users = $pats_users->fetchArray() ;
				
				$usersids[] = '9999999999';
				if(!empty($assigned_users))
				{
					foreach ($assigned_users as $kuuser => $vuser)
					{
						$usersids[] = $vuser['userid'];
					}	
				}
				if(!empty($doctorgroups)){
				    
    				$usr = Doctrine_Query::create()
    				->select('*')
    				->from('User')
    				->whereIn('id', $usersids)
    				->andWhereIn('groupid', $doctorgroups)
    				->orderby("last_name ASC");
    				$dr = $usr->fetchArray();
				}
				
				if($dr)
				{
					foreach($dr as $kd => $vd)
					{
						$users[$vd['id']]['name'] = $vd['last_name'].', ' . $vd['first_name'];
						$users[$vd['id']]['phone'] = $vd['phone'];
						$users_names[$vd['id']] = $vd['last_name'].' ' . $vd['first_name'];
						
					}
				}
	
				$this->view->users = $users;
				$this->view->users_names = $users_names;
				
				/* --------------	Patient Familienstand	---------------------------- */
				$st = new Stammdatenerweitert();
				$weit = $st->getStammdatenerweitert($ipid);
				$this->view->familienstands = $st->getFamilienstandfun();
				$this->view->familienstand_notfrom_Stammblatt = $weit[0]['familienstand'];
				/*
				if(!empty($weit[0]['familienstand']))
				{
					if($weit[0]['familienstand'] == 1)
					{
						$this->view->ledig = "checked='checked'";
					}
			
					if($weit[0]['familienstand'] == 2)
					{
						$this->view->verwitwet = "checked='checked'";
					}
			
					if($weit[0]['familienstand'] == 3)
					{
						$this->view->geschieden = "checked='checked'";
					}
				}
				*/
			
				/* --------------Patient Wohnsituation---------------------------- */
				$pl = new PatientLives();
				$pat_lives = $pl->getpatientLivesData($ipid);
				if($pat_lives[0]['alone'] == 1)
				{
					$this->view->allein = "checked='checked'";
				}
			
				if($pat_lives[0]['house_of_relatives'] == 1)
				{
					$this->view->mit_angeh = "checked='checked'";
				}
			
// 				if($pat_lives[0]['home'] == 1)
// 				{
// 					$this->view->heim = "checked='checked'";
// 				}
			
// 				if($pat_lives[0]['hospiz'] == 1)
// 				{
// 					$this->view->hospiz = "checked='checked'";
// 				}
			
				if($pat_lives[0]['sonstiges'] == 1)
				{
					$this->view->sonstiges = "checked='checked'";
				}
			
				/* --------------Patient Contact persons Data ---------------------------- */
				$pc = new ContactPersonMaster();
				$pcs = $pc->getPatientContact($ipid);
			
				$familydegree = new FamilyDegree();
				$status = $familydegree->getFamilyDegrees(1);
			
				//ISPC-2590 Andrei 22.05.2020 added checkboxes for legal guardian and legal attorney at every contact person
				if(!empty($pcs[0]))
				{
					$cntpers1name = $pcs[0]['cnt_last_name'] . ', ' . $pcs[0]['cnt_first_name'];
					$cntpers1tel = $pcs[0]['cnt_phone'];
					$cntpers1handy = $pcs[0]['cnt_mobile'];
					$cntpers1hatversorgungsvollmacht = $pcs[0]['cnt_hatversorgungsvollmacht'];
					$cntpers1legalguardian = $pcs[0]['cnt_legalguardian'];
				}
				else
				{
					$cntpers1name = "";
					$cntpers1tel = "";
					$cntpers1handy = "";
					$cntpers1hatversorgungsvollmacht = "";
					$cntpers1legalguardian = "";
				}
			
				if(!empty($pcs[1]))
				{
					$cntpers2name = $pcs[1]['cnt_last_name'] . ', ' . $pcs[1]['cnt_first_name'];
					$cntpers2tel = $pcs[1]['cnt_phone'];
					$cntpers2handy = $pcs[1]['cnt_mobile'];
					$cntpers2hatversorgungsvollmacht = $pcs[1]['cnt_hatversorgungsvollmacht'];
					$cntpers2legalguardian = $pcs[1]['cnt_legalguardian'];
				}
				else
				{
					$cntpers2name = "";
					$cntpers2tel = "";
					$cntpers2handy = "";
					$cntpers2hatversorgungsvollmacht = "";
					$cntpers2legalguardian = "";
				}
				$this->view->cntpers1name = $cntpers1name;
				$this->view->cntpers_1_tel = $cntpers1tel;
				$this->view->cntpers_1_handy = $cntpers1handy;
				$this->view->cntpers_1_hatversorgungsvollmacht = $cntpers1hatversorgungsvollmacht;
				$this->view->cntpers_1_legalguardian = $cntpers1legalguardian;
				$this->view->cntpers2name = $cntpers2name;
				$this->view->cntpers_2_tel = $cntpers2tel;
				$this->view->cntpers_2_handy = $cntpers2handy;
				$this->view->cntpers_2_hatversorgungsvollmacht = $cntpers2hatversorgungsvollmacht;
				$this->view->cntpers_2_legalguardian = $cntpers2legalguardian;
			
				foreach($pcs as $k => $cnt_details)
				{
			
					if($cnt_details['cnt_hatversorgungsvollmacht'] == "1")
					{
						$voll_cnt_name = $cnt_details['cnt_last_name'] . ', ' . $cnt_details['cnt_first_name'];
						$voll_cnt_phone = $cnt_details['cnt_phone'];
						$this->view->vorsorgevollmacht = '1';
					}
				}
				$this->view->bevollmachtigter = $voll_cnt_name;
				$this->view->bevollmachtigter_tel = $voll_cnt_phone;
			
				/* -------------------Patient Religions  ------------------------------- */
				$rel = new PatientReligions();
				$pat_rel = $rel->getReligionsData($ipid);
				$relcnt = $pat_rel[0]['religion'];
				if(!empty($pat_rel[0]['religion']))
				{	$this->view->religion = $pat_rel[0]['religion'];
					if($pat_rel[0]['religion'] == 1)
					{
						$this->view->evange = "checked='checked'";
					}
			
					if($pat_rel[0]['religion'] == 2)
					{
						$this->view->katolic = "checked='checked'";
					}
			
					if($pat_rel[0]['religion'] == 6)
					{
						$this->view->keine = "checked='checked'";
					}
					if($pat_rel[0]['religion'] == 7)
					{
						$this->view->andere = "checked='checked'";
					}
				}
			
				/* ------------------- Patient Pharmacy--------------------------------- */
				$pha = new PatientPharmacy();
				$phaarray = $pha->getPatientPharmacy($ipid);
				$this->view->apotheke_details = $phaarray[0]['apotheke'] . "<br/>" . $phaarray[0]['street1'] . ", " . $phaarray[0]['zip'] . " " . $phaarray[0]['city'];
				$this->view->apotheke_tel = $phaarray[0]['phone'];
				$this->view->apotheke_fax = $phaarray[0]['fax'];
			
			
				/* --------------------Patient Main Diagnosis ------------------ */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ",";
				}
			
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipid, $typeid);
			
				if(count($dianoarray) > 0)
				{
					$comma = "";
					$diagnosis = "";
					foreach($dianoarray as $key => $valdia)
					{
						if(strlen($valdia['diagnosis']) > 0)
						{
							if(!empty($valdia['icdnumber']))
							{
								$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
							}
							else
							{
								$diagnosis .= $comma . $valdia['diagnosis'];
							}
							$comma = ", ";
						}
					}
				}
			
				if(strlen($diagnosis) > 0)
				{
					$this->view->main_diagnosis = $diagnosis;
				}
				/* ------------------- Patient stage Data--------------------------------- */
				$pms = new PatientMaintainanceStage();
				$pat_pmsinfo = $pms->getLastpatientMaintainanceStage($patientarr['ipid']);
				$stage = array();

				if($pat_pmsinfo)
				{
					$stage[] = $pat_pmsinfo[0]['stage'];
// 					if($pat_pmsinfo[0]['horherstufung'] == 1)
// 					{
// 						$this->view->beatragt = 'checked="checked"';
// 					}
				}
				$this->view->pflegestufe = $stage;
				
				//ispc 1872 - this ignores the form and uses from stammdaten
				if (isset($pat_pmsinfo[0]['stage'])) {
					$this->view->pflegeversicherung  = $pat_pmsinfo[0]['stage'];
					$this->view->horherstufung  = $pat_pmsinfo[0]['horherstufung'];
					$this->view->erstantrag  = $pat_pmsinfo[0]['erstantrag'];
				
				} else {
					$this->view->pflegeversicherung = null;
					$this->view->horherstufung  = null;
					$this->view->erstantrag  = null;
				}
					
					
			
				/* ------------------- Patient Allergies--------------------------------- */
				
				$aller = new PatientDrugPlanAllergies();
				$allergies = $aller->getPatientDrugPlanAllergies($decid);
				
				
				if(!empty($allergies))
				{
					$patient_allergies = $allergies[0];
					$this->view->allergien = htmlspecialchars(strip_tags($patient_allergies['allergies_comment'], '<br />'));
				}
				/* -------------------Prefill ECOG-------------------------------- */
				$this->view->ecog = array("1");
				
				/* ------------------- PAtient Active location -------------------------------- */

				$ploc = new PatientLocation();
				$plocarray = $ploc->getActiveLocationPatInfo($ipid);
				

				if(!empty($plocarray))
				{
					$w_hospiz = "";
					if($plocarray[0]['location_type'] == '2')
					{
						$w_hospiz =  "checked='checked'";
					}
					
					$heim_locations = array("3","4");
					$w_heim = "";
					if( in_array($plocarray[0]['location_type'],$heim_locations))
					{
						$w_heim =  "checked='checked'";
					}
					$this->view->hospiz =  $w_hospiz;
					$this->view->heim =  $w_heim;
				}
				
				
				/* -------------------SAVE Actions-------------------------------- */
				if(strlen($_POST['btnsave']) > 0)
				{

					if($_POST['beantragt'] == "1"){
						$_POST['pflegestufe'][] = "beantragt";
					} 
	
					
					$kvno = new Application_Form_Stammblatt5();
					$result = $kvno->insertStammblatt5($_POST);
					
					$post_mainstage['ipid'] = $ipid;
					$post_mainstage['horherstufung'] = "0";
					$post_mainstage['erstantrag'] = "0";
					
					if(!empty($_POST['pflegestufe'])){
						foreach($_POST['pflegestufe'] as $value){
							if($value == "6"){
								$post_mainstage['horherstufung'] = "1";
							}elseif($value == "7"){
								$post_mainstage['erstantrag'] = "1";
							} elseif($value != 'beantragt'){
								$post_mainstage['stage'] = $value ; 
							}
						}
					}
					
					$mainform =  new Application_Form_PatientMaintainanceStage();
					$mainform->InsertData($post_mainstage);
					
					
					//ISPC-1891
					//update the patient >> Stammdaten >> Pflegegrade
					$post_familienstand = array(
							"modname" => "Familienstand",
							"fldname" => "familienstand",
							"chkval" => $_POST['familienstand'],
							"patid" => $_GET['id'],
							"formid" => "grow16",
							"ipid" => $ipid,
					);
					$af_s = new Application_Form_Stammdatenerweitert();
					$af_s->InsertStamdatenData($post_familienstand);
					$this->view->familienstand_notfrom_Stammblatt = $_POST['familienstand'];
					
					if($result)
					{
						$this->view->error_message = $this->view->translate('recordinsertsucessfully');
					}
					
					$this->_redirect(APP_BASE . "patientform/stammblatt5?id=" . $_GET['id']);
				}
				else if(strlen($_POST['btnsubmit']) > 0)
				{

					if($_POST['beantragt'] == "1"){
						$_POST['pflegestufe'][] = "beantragt";
					}
					
					$this->retainValues($_POST);
					$post = $_POST;
					$post['birth'] = $this->view->birth;
					$post['lastname'] = $this->view->lastname;
					$post['firstname'] = $this->view->firstname;
					$post['street'] = $this->view->street;
					$post['zip'] = $this->view->zip;
					$post['patcity'] = $this->view->patcity;
					$post['pattel'] = $this->view->pattel;
					$post['pathandy'] = $this->view->pathandy;
					$post['cntpers1name'] = $cntpers1name;
					$post['cntpers2name'] = $cntpers2name;
					$post['hausarzt_details'] = $this->view->hausarzt_details;
					$post['pflegedienst_details'] = $this->view->pflegedienst_details;
					$post['apotheke_details'] = $this->view->apotheke_details;
					$post['healthinsurance_company'] = $this->view->healthinsurance_company;
					$post['healthinsurance_kknr'] = $this->view->healthinsurance_kknr;
					$post['healthinsurance_versnr'] = $this->view->healthinsurance_versnr;
					$post['healthinsurance_companytel'] = $this->view->healthinsurance_companytel;
					$post['healthinsurance_companyfax'] = $this->view->healthinsurance_companyfax;
					$post['ambulant'] = $_POST['ambulant'];
					$post['stationar'] = $_POST['stationar'];
					$post['patient_main_diagnosis'] = $_POST['main_diagnosis'];
					$post['users_phones'] = $_POST['users_phones'];
					$post['users_names'] = $this->view->users_names;
					//print_r($post);exit;
					
					$this->generateformPdf(3, $post, 'Stammblatt5', "stammblatt5_pdf.html");
				}
			
				$stamq = Doctrine_Core::getTable('Stammblatt5')->findBy('ipid', $ipid);
				$stamqarr = $stamq->toArray();
				if($stamqarr[0]['ipid'] != $ipid)
				{
			
				}
			
				if(count($stamqarr) > 0)
				{
					$this->view->familienstand = $stamqarr[0]['familienstand'];
					$wohnsituation = explode(",", $stamqarr[0]['wohnsituation']);
					if($wohnsituation)
					{
						$this->view->allein = "";
						$this->view->mit_angeh = "";
						$this->view->heim = "";
						$this->view->hospiz = "";
						$this->view->sonstiges = "";
						$this->view->wohnsituation = $wohnsituation;
					}
					$this->view->allergien = $stamqarr[0]['allergien'];
					$this->view->zuzahlung = $stamqarr[0]['zuzahlung'];
					$pflegestufe = explode(",", $stamqarr[0]['pflegestufe']);
					if($pflegestufe)
					{
						$this->view->beatragt = '';
						$this->view->pflegestufe = $pflegestufe;
					}
					$this->view->patientenverfugung = $stamqarr[0]['patientenverfugung'];
					$this->view->vorsorgevollmacht = $stamqarr[0]['vorsorgevollmacht'];
					$this->view->bevollmachtigter = $stamqarr[0]['bevollmachtigter'];
					$this->view->bevollmachtigter_tel = $stamqarr[0]['bevollmachtigter_tel'];
					$this->view->betreuung = $stamqarr[0]['betreuung'];
					$this->view->betreuer = $stamqarr[0]['betreuer'];
					$this->view->betreuer_handy = $stamqarr[0]['betreuer_handy'];
					$this->view->betreuer_tel = $stamqarr[0]['betreuer_tel'];
					$this->view->betreuer_fax = $stamqarr[0]['betreuer_fax'];
					$this->view->erstkontakt_am = $stamqarr[0]['erstkontakt_am'];
					$this->view->erstkontakt_durch = $stamqarr[0]['erstkontakt_durch'];
					$this->view->ambulant = $stamqarr[0]['ambulant'];
					$this->view->stationar = $stamqarr[0]['stationar'];
					$ecog = explode(",", $stamqarr[0]['ecog']);
					$this->view->ecog = $ecog;
					$this->view->religion = $stamqarr[0]['religion'];
					$this->view->genogramm = $stamqarr[0]['genogramm'];
					$this->view->main_diagnosis = $stamqarr[0]['main_diagnosis'];
					//ISPC-1790 
					$this->view->cntpers_1_tel = $stamqarr[0]['cntpers_1_tel'];
					$this->view->cntpers_1_handy = $stamqarr[0]['cntpers_1_handy'];
					$this->view->cntpers_2_tel = $stamqarr[0]['cntpers_2_tel'];
					$this->view->cntpers_2_handy = $stamqarr[0]['cntpers_2_handy'];
					$this->view->hausarzt_tel = $stamqarr[0]['hausarzt_tel'];
					$this->view->hausarzt_fax = $stamqarr[0]['hausarzt_fax'];
					$this->view->pflegedienst_tel = $stamqarr[0]['pflegedienst_tel'];
					$this->view->pflegedienst_fax = $stamqarr[0]['pflegedienst_fax'];
					$this->view->apotheke_tel = $stamqarr[0]['apotheke_tel'];
					$this->view->apotheke_fax = $stamqarr[0]['apotheke_fax'];
					$this->view->religion = $stamqarr[0]['religion'];
					$this->view->pattel = $stamqarr[0]['pattel'];
					$this->view->pathandy = $stamqarr[0]['pathandy'];
					
					// ISPC-2590 Andrei 22.05.2020
					$this->view->cntpers_1_hatversorgungsvollmacht = $stamqarr[0]['cntpers_1_hatversorgungsvollmacht'];
					$this->view->cntpers_1_legalguardian = $stamqarr[0]['cntpers_1_legalguardian'];
					$this->view->cntpers_2_hatversorgungsvollmacht = $stamqarr[0]['cntpers_2_hatversorgungsvollmacht'];
					$this->view->cntpers_2_legalguardian = $stamqarr[0]['cntpers_2_legalguardian'];
					
					
					
					//TODO-2496
					$acp = new PatientAcp();
					$acp_data = $acp->getByIpid(array($ipid));
					$current_acp_data = $acp_data[$ipid];
					if ( ! empty($current_acp_data)) {
					    foreach ($current_acp_data as $k => $block) {
					        
					        switch ($block['division_tab']) {
					            
					            case "living_will" :
					                $this->view->patientenverfugung = ($block['active'] == "yes") ? "1" : "0";
					                break;
					                
					            case "healthcare_proxy" :
					                $bevollmachtigter = ($block['active'] == "yes" && !empty($block['contactperson_master_id'])) ? $contacts_names[$block['contactperson_master_id']] : "";
					                break;
					        }
					    }
					}
					
				}
				/* -------------------END UPDATE Action-------------------------------- */
			}
			public function medicationformnewpdfAction()
			{
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$logininfo = new Zend_Session_Namespace('Login_Info');
				$userinfo = Pms_CommonData::getUserData($logininfo->userid);
				$clientinfo = Pms_CommonData::getClientData($logininfo->clientid);
				$ipid = Pms_CommonData::getIpid($decid);
				
			
				$patientmaster = new PatientMaster();
				$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			
// 				$parr = $patientmaster->getMasterData($decid, 0);
				$parr = $patientmaster->get_patientMasterData();
			
				$patient_name = $parr['last_name'] . ", " . $parr['first_name'];
				$patient_birth = $parr['birthd'];
				//$this->view->patient_name = $patient_name;
				
				$tm = new TabMenus();
				$this->view->tabmenus = $tm->getMenuTabs();
				
				$previleges = new Modules();
				if($previleges->checkModulePrivileges("131", $logininfo->clientid)){
				    $med_module = "1";
				} else{
				    $med_module = "0";
				}
				
				if($_GET['pst'] == 'post')
				{
					//Normal medication - Regelmedikation
					$medic = new PatientDrugPlan();
					$this->view->medicarr = $medic->getMedicationPlan($decid,false,false,true);
					$gridmedi = $medic->getMedicationPlan($decid,false,false,true);
					
					if(count($gridmedi) > 0)
					{
						$totalpage = (int) (count($gridmedi) / 18);
						if(count($gridmedi) % 18 != 0)
						{
							$totalpage++;
						}
					}
					for($t = 0; $t < $totalpage; $t++)
					{
						$control_medication = array();
						for($i = $t * 18; $i < ($t + 1) * 18; $i++)
						{
							if($i < count($gridmedi))
							{	
								$control_medication[] = $gridmedi[$i];
							}
						}
						
						$grid = new Pms_Grid($control_medication , 1 , count($control_medication) , "medicationpdf_new.html" );
						$medicationgrid .= $grid->renderGrid();
					}
					
					$this->view->medicationcontent = $medicationgrid;
		
					//Bedarfs medication
					$gridbedarfs = $medic->getbedarfMedication($decid,true);
					if(count($gridbedarfs) > 0)
					{
						$totalpage = (int) (count($gridbedarfs) / 18);
						if(count($gridbedarfs) % 18 != 0)
						{
							$totalpage++;
						}
					}
					for($t = 0; $t < $totalpage; $t++)
					{
						$bedarf_medication = array();
						for($i = $t * 18; $i < ($t + 1) * 18; $i++)
						{
							if($i < count($gridbedarfs))
							{
								$bedarf_medication[] = $gridbedarfs[$i];
							}
						}
						$gridbed = new Pms_Grid($bedarf_medication , 1 , count($bedarf_medication) , "medicationbedarfpdf_new.html" );
						$medicationbedarfgrid .= $gridbed->renderGrid();
					}
					$this->view->medicationbedarfgrid = $medicationbedarfgrid;
					
					// i.v./s.c. medikation 
					$gridivmedic = $medic->getivMedication($decid,true);
					if(count($gridivmedic) > 0)
					{
						$totalpage = (int) (count($gridivmedic) / 18);
						if(count($gridivmedic) % 18 != 0)
						{
							$totalpage++;
						}
					}
					for($t = 0; $t < $totalpage; $t++)
					{
						$iv_medication = array();
						for($i = $t * 18; $i < ($t + 1) * 18; $i++)
						{
							if($i < count($gridivmedic))
							{
								$iv_medication[] = $gridivmedic[$i];
							}
						}
						if(count($iv_medication) > 0)
						{
						$gridiv = new Pms_Grid($iv_medication , 1 , count($iv_medication) , "medicationivpdf_new.html" );
						$medicationivgrid .= $gridiv->renderGrid();
						}
					}
					$this->view->medicationivgrid = $medicationivgrid;
				//var_dump($medicationivgrid);exit;	
					$htmlform = $this->view->render('patientform/medicationformnewpdf.html');
					
					
					$pdf = new Pms_PDF('L', 'mm', 'A4', true, 'UTF-8', false);
					//			defaults with header, landscape
					$pdf->setDefaults(true, 'L');
					$pdf->setImageScale(1.5);
					//			reset margins
					$pdf->SetMargins(20, 30, 20);
					$pdf->SetFont('helvetica', 'b', 11);
					$pdf->SetHeaderMargin(10);
					$pdf->setHeaderFont(Array('helvetica', 'b', 11));
					$header_text .= '<table width="100%">';
					$header_text .= '<tr><td align="left" width="85%"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:bold; text-decoration:none; font-size:20pt; color:#000000;"> ' . Medikamentenplan . ' </font></td><td style="text-align: left;"  width="15%">Seite  ' . $pdf->getAliasNumPage() . '</td></tr>';
					
					if($ipid == "XXXXXXXX"){ // Special for resoring some pdfs
// 					if($ipid == "7b84b651d862118aacda7c6c7c76c79b16f2df87"){ // Special for resoring some pdfs
						$pdf_date = "22.02.2017 04:22";
					} else{
						$pdf_date = date("d.m.Y H:i");
					}
					
					$header_text .= '<tr><td align="left" width="85%"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:bold; text-decoration:none; font-size:12pt; color:#000000;"> ' . $patient_name . '  ' . $patient_birth . ' </font></td><td style="text-align: left;"  width="15%">' . $pdf_date . '</td></tr>';
					$header_text .= '<tr><td align="left" colspan="2">&nbsp;</td></tr>';
					$header_text .= '</table>';
					$pdf->HeaderText = $header_text;
					
					$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], 57); //
					if($bg_image !== false)
					{
						$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
						if(is_file($bg_image_path))
						{
							$pdf->setBackgroundImage($bg_image_path);
						}
					}
					// add a page
					$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
					
					$html = preg_replace('/<img(.*)\/>/i', '', $html);
					$pdf->setHTML($html);
					
					$pname = 'medicationpdf';
					
					/* $tmpstmp = $pdf->uniqfolder(PDF_PATH);
					$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf');
					
					$_SESSION ['filename'] = $tmpstmp . '/' . $pname . '.pdf';
					$cmd = "zip -9 -r -P " . $logininfo->filepass . " " . PDF_PATH . "/" . $tmpstmp . ".zip " . PDF_PATH . "/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
					
					exec($cmd);
					$zipname = $tmpstmp . ".zip";
					$filename = "uploads/" . $tmpstmp . ".zip"; */

					

					$tmpstmp = $pdf->uniqfolder(PDF_PATH);
					$file_name_real = basename($tmpstmp);
					$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf');
					$_SESSION ['filename'] = $tmpstmp . '/' . $pname . '.pdf';
// 					$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
// 					exec($cmd);
					$zipname = $file_name_real . ".zip";
					$filename = "uploads/" . $file_name_real . ".zip";
					/*
					$con_id = Pms_FtpFileupload::ftpconnect();
					if($con_id)
					{
					    $upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
					    Pms_FtpFileupload::ftpconclose($con_id);
					}	
					*/		
					$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pname . '.pdf' , "uploads" );
					
					

					if($med_module == "1"){
					    
					    
					   /*  $tmpstmp = $pdf->uniqfolder(PDF_PATH);
					    $file_name_real = basename($tmpstmp);
					    $pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
					    $_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
					    $cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
					    exec($cmd);
					    $zipname = $file_name_real . ".zip";
					    $filename = "uploads/" . $file_name_real . ".zip";
					    
					    $con_id = Pms_FtpFileupload::ftpconnect();
					    if($con_id)
					    {
					        $upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
					        Pms_FtpFileupload::ftpconclose($con_id);
					    } */
					    
					
					    $cust = new PatientFileUpload();
					    $cust->title = Pms_CommonData::aesEncrypt("Medikamentenplan");
					    $cust->ipid = $ipid;
					    $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
					    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					    $cust->system_generated = "1";
					    $cust->tabname = "medikamentenplan";
					    $cust->save();
					    $recordid = $cust->id;
					
					    $custcourse = new PatientCourse();
					    $custcourse->ipid = $ipid;
					    $custcourse->course_date = date("Y-m-d H:i:s", time());
					    $custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					    $comment = 'Medikamentenplan wurde erstellt';
					    $custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					    $custcourse->user_id = $logininfo->userid;
					    $custcourse->recordid = $recordid;
					    $custcourse->tabname = Pms_CommonData::aesEncrypt('medikamentenplan');
					    $custcourse->save();
					}
					
					
					
					ob_end_clean();
					ob_start();
					
					$pdf->toBrowser($pname . '.pdf', 'D');
					
					exit;
				}
				
			}
			

			public function vitalsignsAction()
			{
    			$this->_helper->viewRenderer->setNoRender();
                $this->_helper->layout->setLayout('layout_ajax');
            
			    $logininfo = new Zend_Session_Namespace('Login_Info');
			    //ISPC-2515 Carmen 16.04.2020
			    if($_REQUEST['vs_source'])
			    {
			    	$vs_source = $_REQUEST['vs_source'];
			    }
			    
			    if($_REQUEST['subaction'])
			    {
			    	$subaction = $_REQUEST['subaction'];
			    }
				//--
			    if($this->getRequest()->isPost())
			    {
			         /* ------------------SAVE  VITAL SIGNS------------------- */
			         if(!empty($_POST['vital_signs'])){
			         //ISPC-2515 Carmen 16.04.2020
			         	if($vs_source){
			         		$_POST['vital_signs']['vs_source'] = $vs_source;
			         	}
			        
			         
			         	switch($subaction)
			         	{
			         		case 'delete':
			         			$entity = FormBlockVitalSignsTable::getInstance()->find($_POST['vital_signs']['id']);
			         				
			         			if($entity)
			         			{
			         				$entity->delete();
			         			}
			         			break;
			         	
			         		default:
			         		
		    			         $vitalsigns_block = new Application_Form_FormBlockVitalSigns();
			       		         $result_vitalsigns = $vitalsigns_block->insert_from_icon($_POST['vital_signs']);
			       		         break;
			         	}
			        //--
			         }
			    }
			
			    return json_encode("Done");
			    exit;
			}
			
		/**
		 * fn used to populate the selectboxe from todos.. where you can select multiple user,group, pseudogroup
		 * Jul 13, 2017 @claudiu 
		 * 
		 * @return multitype:
		 */
		private function get_nice_name_multiselect ()
		{
			
			$selectbox_separator_string = Pms_CommonData::get_users_selectbox_separator_string();
			
			$todousersarr = array(
					"0" => $this->view->translate('select'),
					$selectbox_separator_string['all'] => $this->view->translate('all')
			);
			
			$usergroup = new Usergroup();
			$todogroups = $usergroup->getClientGroups($this->logininfo->clientid);
			$grouparraytodo = array();
			foreach ($todogroups as $group)
			{
				$grouparraytodo[$selectbox_separator_string['group'] .  $group['id']] = trim($group['groupname']);
			}
			 
			if (isset( $this->{'_patientMasterData'}['User'])){
				$userarray = $this->{'_patientMasterData'}['User'];
			
				$userarray = array_filter($userarray,function($row){
				    return $row['isactive'] == 0 && $row['isdelete'] == 0; 
				});
			} else {
				$users = new User();
				$userarray = $users->getUserByClientid($this->logininfo->clientid);
			}		

			
			User::beautifyName($userarray);
			
			$userarraytodo = array();
			foreach ($userarray as $user)
			{
				$userarraytodo[$selectbox_separator_string['user'] . $user['id']] = $user['nice_name'];
			}
			 
			asort($userarraytodo);
			asort($grouparraytodo);
			
			$todousersarr[$this->view->translate('group_name')] = $grouparraytodo;
			
			 
			$user_pseudo =  new UserPseudoGroup();
			$user_ps =  $user_pseudo->get_pseudogroups_for_todo($this->logininfo->clientid);
			$pseudogrouparraytodo = array();
			if ( ! empty ($user_ps)) {
				
				//pseudogroup must have users in order to display 
				$user_ps_ids =  array_column($user_ps, 'id');
				$user_pseudo_users = new PseudoGroupUsers();
				$users_in_pseudogroups = $user_pseudo_users->get_users_by_groups($user_ps_ids);				
				
				foreach($user_ps as $row) {
					if ( ! empty($users_in_pseudogroups[$row['id']]))
					$pseudogrouparraytodo[$selectbox_separator_string['pseudogroup'] . $row['id']] = $row['servicesname'];
				}
			
				$todousersarr[$this->view->translate('liste_user_pseudo_group')] = $pseudogrouparraytodo;
			}
			$todousersarr[$this->view->translate('users')] = $userarraytodo;
			return $todousersarr;
		}		


		private function _filesave( $action_name = '',  $options = array() ) {
				
			$result = array();
				
			$ipid = $options['ipid'];
				
			$qquuid = $options['qquuid'];
				
			$remove_after_save =  $options['remove_after_save'];
				
			$save_options = $options['options'];
				
			$last_files = $this->get_last_uploaded_file( $action_name );

			if ( ! empty($last_files)) {
					
				$af_pfu_obj = new Application_Form_PatientFileUpload();
				$result = $af_pfu_obj->saveFiles( $ipid, $last_files, $qquuid, $save_options);
		
				//result should containn an array with ids from saved files
				if ( ! empty($result)) {
						
					$result['redirect'] = true;
					//$response['redirect_location'] = true;
						
					if ( $remove_after_save == true ) {
						//$this->set_last_uploaded_file( $action_name, $qquuid); //unlink last saved files from this action
						$this->set_last_uploaded_file( $action_name); //unlink all files from this action
					}
						
						
				}
		
		
					
			} //else we have no files to upload
				
			return $result;
		}
		
		private function _formblocktreatmentplan_GatherDetails( $form_id = null)
		{
			$entity = new FormBlockTreatmentPlan();			
			$saved_formular_final = array();
		
			if($form_id)
			{
				$saved_formular = $entity->getTable()->findOneBy('contact_form_id', $form_id, Doctrine_Core::HYDRATE_RECORD);
				
				if(!$saved_formular)
				{
					$saved_formular= $entity->getTable()->getFieldNames();
					//var_dump($saved_formular); exit;
					foreach($saved_formular as $kcol=>$vcol)
					{
						$saved_formular_final[$vcol]['colprop'] = $entity->getTable()->getColumnDefinition($vcol);
						$saved_formular_final[$vcol]['value'] = null;
					}
				}
				else 
				{
					//print_r($saved_formular);
					foreach($saved_formular as $kcol=>$vcol)
					{
			
						$saved_formular_final[$kcol]['colprop'] = $entity->getTable()->getColumnDefinition($kcol);
						$saved_formular_final[$kcol]['value'] = $vcol;
					}
				}
			}
			else
			{
				//$saved_formular= $entity->findOrCreateOneByIdAndIpid($form_id , $this->ipid);
		
				//if(!$saved_formular)
				//{
				$saved_formular= $entity->getTable()->getFieldNames();
				//var_dump($saved_formular); exit;
				foreach($saved_formular as $kcol=>$vcol)
				{
					$saved_formular_final[$vcol]['colprop'] = $entity->getTable()->getColumnDefinition($vcol);
					$saved_formular_final[$vcol]['value'] = null;
				}
			}
		
		
			//print_r($saved_formular_final); exit;
		
			return $saved_formular_final;
		}
		
		/**
		 * @carmen 11.10.2019
		 * ISPC-2465
		 */
		
		public function getwounddescriptionoptAction()
		{
			set_time_limit(0);
			$this->_helper->layout->setLayout('layout_ajax');
			$this->_helper->viewRenderer->setNoRender();				

			$wounddescriptionoptions = WoundDocumentation::_getWoundDescriptionOptions();
			$optiontext = "";
			//var_dump($newtextareaoptions); exit;
			if(!empty($wounddescriptionoptions))
			{
				foreach($wounddescriptionoptions as $gropt => $vopt)
				{
					$elementsBelongTo = 'wounddescriptionoptions';
					if(is_array($vopt))
					{
						$options = count($vopt);
						$optvalues = $vopt;
						
						$groupbutopt = array(
								'name' => $gropt,
								'type' => 'checkbox',
								//'alignment' => 'vertical',
								'butnr' => $options,
								'first_but_pos_left' => '19',
								'first_but_pos_top' => '76',
								'first_but_pos_right' => '0',
								'first_but_pos_bottom' => '0',
								'x_offset' => array('0', '0', '0'),
								'y_offset' => array('0', '46', '92'),
								'width_dummy' => '26',
								'height_dummy' => '26',
								'label_text' => $vopt,
								'label_wrap' => array(false, false, false),
								'x_offset_label' => array('10', '10','10'),
								'label_width' => array('250', '250', '250'),
								'label_height' => array('25', '25', '25'),
								'has_external_obj' => false,
								'label' => true,
								'has_dummy' => false,
								'values' => $vopt,
								//'class' => 'rcbyrightv'
						);
						
						$groupbut_details_form = $this->_init_group($groupbutopt, $elementsBelongTo);
						$groupbut_details_form->clearDecorators()->setDecorators( array(
								'FormElements',
								array(array('ttag' => 'HtmlTag'), array('tag'=>'table', 'style' => 'width: 100%;')),
								array('Fieldset', array('legend' => $gropt)),
						));
					}
					else 
					{
						$sf_grouptext = (new Application_Form_TextForm(array(
								'elementsBelongTo' => $elementsBelongTo,
								'_set_options'    => $gropt
						)));						
						$groupbut_details_form = $sf_grouptext->create_form_text();
						$groupbut_details_form->clearDecorators()->setDecorators( array(
								'FormElements',
								array(array('ttag' => 'HtmlTag'), array('tag'=>'table', 'style' => 'width: 100%;')),
								array('Fieldset', array('legend' => $gropt)),
						));
					}
					
					$optiontext .= $groupbut_details_form . "<br />";
				}
				echo $optiontext;
			}
			else
			{
				exit;
			}
		}
		
		private function _init_group($groupbutt, $elementsBelongTo = null, $saved_values = array(), $type = 'button', $external_obj = null)
		{
			if($type == 'button')
			{
				if(!$groupbutt['has_dummy'])
				{
					$sf_groupbut = (new Application_Form_FormGroupButton(array(
							'elementsBelongTo' => $elementsBelongTo,
							'_setgroup_but'    => $groupbutt,
							'_external_obj' => $external_obj,
							'_forme_mode' => "without_dummy",
					)));
				}
				else
				{
					$sf_groupbut = (new Application_Form_FormGroupButton(array(
							'elementsBelongTo' => $elementsBelongTo,
							'_setgroup_but'    => $groupbutt,
							'_external_obj' => $external_obj,
					)));
				}
				$creategroup_fn = '_create_form_groupbutton';
			}
			else
			{
				$sf_groupbut = (new Application_Form_FormGroupOther(array(
						'elementsBelongTo' => $elementsBelongTo,
						'_setgroup_oth'    => $groupbutt,
						'_external_obj' => $external_obj,
				)));
				$creategroup_fn = '_create_form_groupother';
			}
		
			$groupbut_details_form = $sf_groupbut->{$creategroup_fn}();
		
			return $groupbut_details_form;
		}
		
		private function temporary_image_create_new($data, $type = 'svg')
		{
			$tmp_file = uniqid('img' . rand(1000, 9999));
			$tmp_file_path = APPLICATION_PATH . '/../public/temp/' . $tmp_file . '.png';
			$tmp_folder = APPLICATION_PATH . '/../public/temp';
			$this->temporary_files_delete($tmp_folder, '7200'); //delete all files older than 2 hours
		
			switch($type)
			{
				case 'svg':
					if(get_magic_quotes_gpc())
					{
						$data = stripslashes($data);
					}
		
					$data = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>' . $data;
		
					$handle = fopen($tmp_file_path, 'w+');
					fclose($handle);
		
					$im = new Imagick();
					$im->readImageBlob($data);
					$im->setImageFormat("jpeg");
					$im->writeImage($tmp_file_path);
					$im->clear();
					$im->destroy();
		
					break;
		
				case 'base64':
					$data = substr($data, stripos($data, '64,') + 3);
					$data = base64_decode($data);
		
					$im = @imagecreatefromstring($data);
					imagepng($im, $tmp_file_path);
					imagedestroy($im);
		
					break;
		
				default:
					break;
			}
		
			if(is_readable($tmp_file_path))
			{
				return $tmp_file_path;
			}
			else
			{
				return false;
			}
		}
		



    /**
     * Feature "Weekly (Team)-Meeting" (IM-1).
     * Original created for ISPC Clinic.
     *
     * Enable the Feature:
     * Create the Menu "Woechentliche Fallbesprechung":
     * Administration -> Navigation – Patient -> Formulare
     *
     * Call the Feature: patientcourse -> Formulare -> Woechentliche Fallbesprechung.
     */
    public function weeklymeetingAction()
    {
        $decid = Pms_Uuid::decrypt($_GET['id']);
        $ipid = Pms_CommonData::getIpid($decid);
        $this->view->epid = Pms_Uuid::encrypt($decid);

        $logininfo= new Zend_Session_Namespace('Login_Info');
        $clientid = $logininfo->clientid;



        $patientmaster = new PatientMaster();

        $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

        $this->view->string_woche="Woche";
        $this->view->timedoc=0;
        $patient_details = $patientmaster->getMasterData($decid, 0);
        $this->view->patient_details=$patient_details;
        $pq = new User();
        $this->view->client_users = $pq->getUserByClientid($clientid);
        $usernames=User::getUsersFast($clientid);
        $users_to_group=User::getUsersWithGroupnameFast($clientid);
        $this->view->users_to_group=$users_to_group;
        $postweek=0;

        $upmdl=new WeeklyUserprivileges();
        $lmuteammeetingsaveusers=$upmdl->getPrevilegedUsers($clientid, 'lmuteammeetingsave');
        $this->view->can_finalsave=true;
        if(count($lmuteammeetingsaveusers)>0){
            if(in_array($logininfo->userid, $lmuteammeetingsaveusers)){
                $this->view->can_finalsave=true;
            }else{
                $this->view->can_finalsave=false;
            }
        }

        //POST BEGIN
        if ($this->getRequest()->isPost()){
            $lmu_tm_time=Client::getClientconfig($clientid, 'lmu_tm_time');
            if(strlen($lmu_tm_time)>0){
                $lmu_tm_time=$lmu_tm_time;
            }else{
                $lmu_tm_time="10:00:00";
            }
            $record = Doctrine::getTable('WeeklyMeeting')->find($_POST['lmutm_id']);
            if ($record){
                if($_POST['lmutm_create_new']){
                    $record->finished=1;
                }

                $record->week = $_POST['lmutm_week'];
                if ($_POST['lmutm_week']==5) $record->week = $_POST['lmutm_week_more'];
                $postweek=$record->week;
                $postweek_text=$postweek;

                if(isset($this->view->cases)){
                    foreach ($this->view->cases as $case){
                        if($case['case_id']===$_POST['lmutm_case']){
                            $record->week=$_POST['lmutm_week'];
                            $record->caseid=$_POST['lmutm_case'];
                            $record->casedate=date("d.m.Y",$case['case_start']);
                            $postweek_text = $postweek . " im Fall vom " . $record->casedate;
                            break;
                        }
                    }
                }

                $postweek_text = $this->view->string_woche . " " . $postweek_text;

                $record->course = Pms_CommonData::aesEncrypt($_POST['lmutm_course']);
                $record->main_problems = Pms_CommonData::aesEncrypt($_POST['lmutm_mainproblems']);
                $record->date=strftime("%Y-%m-%d 12:00:00", strtotime($_POST['lmutm_date']));
                $cat_list = array('medic', 'care', 'psy', 'social', 'spiritual', 'physio', 'breath');

                foreach($cat_list as $cat){
                    $plan = $cat.'_plan';
                    $goal = $cat.'_goal';
                    $record->$plan = Pms_CommonData::aesEncrypt($_POST['lmutm_'.$plan]);
                    $record->$goal = Pms_CommonData::aesEncrypt($_POST['lmutm_'.$goal]);

                }
                $record->mins=$_POST['lmutm_mins'];
                $record->save();


                $addusers=array();


                $attending_users_names=array();
                foreach($_POST['additional_users'] as $ukey=>$uval){
                    $addusers[]=$ukey;
                    $attending_users_names[]=$users_to_group[$ukey]['name'] . " (" . $users_to_group[$ukey]['group'] .")";
                }

                $attending_users_names=implode(', ', $attending_users_names);
                $tmu=new WeeklyMeetingusers();
                $tmu->setMeetingUsers($_POST['lmutm_id'],$addusers);

                $logininfo->wbmeeting_addusers=$addusers;

                if ($_POST['lmutm_create_new']==1){
                    $lmu_tm = new WeeklyMeeting();
                    $lmu_tm->week=$_POST['lmutm_week']+1;
                    if(isset($this->view->cases)){
                        foreach ($this->view->cases as $case){
                            if($case['case_id']===$_POST['lmutm_case']){
                                $lmu_tm->caseid=$_POST['lmutm_case'];
                                $lmu_tm->casedate=date("d.m.Y",$case['case_start']);
                                break;
                            }
                        }
                    }

                    $lmu_tm->ipid=$ipid;
                    $lmu_tm->clientid=$clientid;
                    $lmu_tm->date=date('Y-m-d 12:00:00');
                    $lmu_tm->main_problems = Pms_CommonData::aesEncrypt($_POST['lmutm_mainproblems']);
                    foreach($cat_list as $cat){
                        $plan = $cat.'_plan';
                        $goal = $cat.'_goal';
                        $lmu_tm->$plan = Pms_CommonData::aesEncrypt($_POST['lmutm_'.$plan]);
                        $lmu_tm->$goal = Pms_CommonData::aesEncrypt($_POST['lmutm_'.$goal]);

                    }

                    $lmu_tm->save();

                    $cust = new PatientCourse();
                    $cust->ipid = $ipid;
                    $cust->course_date = date('Y-m-d H:i:s');
                    $cust->course_type = Pms_CommonData::aesEncrypt('WB');
                    $cust->course_title = Pms_CommonData::aesEncrypt($postweek_text);
                    $cust->user_id = $logininfo->userid;
                    $cust->done_date = strftime("%Y-%m-%d ".$lmu_tm_time, strtotime($_POST['lmutm_date']));
                    $cust->done_name = "";
                    $cust->tabname = Pms_CommonData::aesEncrypt('lmu_teammeeting');
                    $cust->recordid = $record->id;
                    $cust->recorddata="Teilnehmer: ".$attending_users_names;
                    $cust->save();

                    $form_id=$_POST['lmutm_id'];
                    $lmu_tm = new WeeklyMeeting();
                    $forms = $lmu_tm->getPatientform($form_id);

                    ///Generate and store pdf-file
                    $tmu=new WeeklyMeetingusers();;
                    $additional_users=	$tmu->getMeetingUsers($form_id);

                    //set the print-layout
                    $this->_helper->layout->setLayout('layout_ajax');
                    $this->_helper->viewRenderer->setNoRender();


                    $post_data = array(
                        'forms'=>$forms,
                        'patient_details'=>$this->view->patient_details,
                        'client_users'=>$this->view->client_users,
                        'additional_users'=>$additional_users,
                        'string_woche'=>$this->view->string_woche,
                        'timedoc'=>$this->view->timedoc,
                        'professions_conf'=>Client::getClientconfig($clientid, 'lmutm_profsmap'),
                        'users_to_group'=>$users_to_group
                    );
                    $post_data = Pms_CommonData::clear_pdf_data($post_data, array('professions_conf', 'string_woche'));
                    $rend = Pms_Template::createTemplate($post_data, 'templates/weeklymeeting_pdf.html');

                    $footer_text = $this->view->translate('[Page %s from %s]');
                    $title = 'Teammeeting'. " Woche ". $forms[0]['week'];
                    $recordid = $forms[0]['id'];

                    $options = array(
                        "orientation" => "P",
                        "customheader" => "Teammeeting",
                        "footer_type" => "1 of n",
                        "footer_text" => $footer_text,
                        "recordid" => $recordid,
                        "tabname" => "weekly_teammeeting"
                    );

                    $pdfid = Pms_PDFUtil::generate_pdf_to_patient_file($rend, 'teammeeting', $title, $ipid, $options);

                    $cust = new PatientCourse();
                    $cust->ipid = $ipid;
                    $cust->course_date = date('Y-m-d H:i:s');
                    $cust->course_type = Pms_CommonData::aesEncrypt('WB');
                    $cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Wöchentliche multiprofessionelle Teambesprechung - '.$postweek_text));
                    $cust->user_id = $logininfo->userid;
                    $cust->done_date = strftime("%Y-%m-%d ".$lmu_tm_time, strtotime($_POST['lmutm_date']));
                    $cust->done_name = "";
                    $cust->tabname = Pms_CommonData::aesEncrypt("fileupload");
                    $cust->recordid = $pdfid;
                    $cust->save();


                    $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=".$_REQUEST['id']);
                } else {
                    $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=".$_REQUEST['id']);
                }
            }
        }
        //POST END


        $tmu=new WeeklyMeetingusers();
        $this->view->recent_users=$tmu->getRecentGroup();



        $session_recentusers=$logininfo->wbmeeting_addusers;

        if(isset($session_recentusers)){
            $this->view->recent_users=$session_recentusers;
        }

        $listsmodel= new SelectboxlistPlangoal();
        $this->view->list_goalsandplans = json_encode($listsmodel->getListOrDefault('goalsandplans'));


        //get previous forms for prefill
        $lmu_tm = new WeeklyMeeting();
        $this->view->readonly=0;

        $this->view->forms = $lmu_tm->getAllPatientforms($ipid);

        //ISPC-2819 Lore 11.02.2021
        $fbtp = new FormBlockTreatmentPlan();
        $fbtp_arr = $fbtp->getPatientFormBlockTreatmentPlanByIpid($ipid);
        $this->view->forms_behand = $fbtp_arr;
        //.
        
        $this->view->forms[0]['id'];
        $tmu=new WeeklyMeetingusers();
        $this->view->additional_users=	$tmu->getMeetingUsers($this->view->forms[0]['id']);

        //load the history-pdf-files
        $files = new PatientFileUpload();
        $history =$files->getFilesByTabname($ipid, "weekly_teammeeting");
        $this->view->files_history = $history;

        if (intval($_GET['fid'])>0){
            $form_id=intval($_GET['fid']);
            if ($this->view->forms[0]['id'] != $form_id) {
                $this->view->readonly=1;
                $this->view->forms = $lmu_tm->getPatientform($form_id);

                $tmu=new WeeklyMeetingusers();
                $this->view->additional_users=	$tmu->getMeetingUsers($form_id);

            }
        }

        //the first week
        if (count ($this->view->forms )==0){
            $lmu_tm = new WeeklyMeeting();
            $model = new FormBlockKeyValue();
            //$l=$lmu_tm->getAllPatientforms($ipid,1);
            $l = $model->getLastBlockValues($ipid, 'FormBlockTreatmentPlanClinic');
            $lmu_tm->week=1;
            $postweek=1;
            $lmu_tm->ipid=$ipid;
            $lmu_tm->clientid=$clientid;
            $lmu_tm->date=date('Y-m-d 00:00:00');

            if (count($l)>0){

                $lmu_tm->course = Pms_CommonData::aesEncrypt($l[0]['course']);
                $lmu_tm->main_problems = Pms_CommonData::aesEncrypt($l[0]['main_problems']);

                $cat_list = array('medic', 'care', 'psy', 'social', 'spiritual', 'physio', 'breath');

                $oldvalues = json_decode($l['returnvalue'],TRUE);

                foreach($cat_list as $cat){
                    $plan = $cat.'_plan';
                    $goal = $cat.'_goal';
                    $lmu_tm->$plan = Pms_CommonData::aesEncrypt($oldvalues[$cat]['plan'][0]);
                    $lmu_tm->$goal = Pms_CommonData::aesEncrypt($oldvalues[$cat]['goal'][0]);
                }
            }

            $lmu_tm->save();

            $cust = new PatientCourse();
            $cust->ipid = $ipid;
            $cust->course_date = date('Y-m-d H:i:s');
            $cust->course_type = Pms_CommonData::aesEncrypt('WB');
            $cust->course_title = Pms_CommonData::aesEncrypt('1');
            $cust->user_id = $logininfo->userid;
            $cust->done_date = date('Y-m-d H:i:s');
            $cust->done_name = "";
            $cust->tabname = Pms_CommonData::aesEncrypt('lmu_teammeeting');
            $cust->recordid = $lmu_tm->id;
            //$cust->save();

            $lmu_tm = new WeeklyMeeting();

            $this->view->forms = $lmu_tm->getAllPatientforms($ipid);
        }



        if (intval($_GET['fid'])>0 && intval($_GET['pdf'])==1){
            $postarray = array(
                'forms'=>$this->view->forms,
                'patient_details'=>$this->view->patient_details,
                'client_users'=>$this->view->client_users,
                'additional_users'=>$this->view->additional_users,
                'string_woche'=>$this->view->string_woche,
                'timedoc'=>$this->view->timedoc,
                'professions_conf'=>Client::getClientconfig($clientid, 'lmutm_profsmap'),
                'users_to_group'=>$users_to_group
            );

        }

        if ($this->view->readonly==0){
            $fbi=new FormBlockIpos();
            $lastmps=$fbi->getMostRecentMainprobs($ipid, 1);
            if ($this->view->forms[0]['date']<$lastmps[1]){
                $this->view->forms[0]['main_problems']=implode('$n',$lastmps[0]);
            }
        }

        $this->view->professions_conf=Client::getClientconfig($clientid, 'lmutm_profsmap');

        $tm = new TabMenus();
        $this->view->tabmenus = $tm->getMenuTabs();
    }


    /**
     * checks whether groups in "Psychosoziale Anamnese" (such as "Familie und soziale Strukturen", "Beruf/Interessen/Kontext", "Psychosozialer Status", "Lebenshintergrund") are empty
     *
     * @param $lmu_pmba_vals
     * @return array
     */
    function check_lmu_pmba_psysoz_empty($lmu_pmba_vals)
    {
        //input fields for block
        $fam = array(
            "vater" => array(
                "is_array" => false,
                "fields" => array(
                    "vater_age" => array("type" => "text"),
                    "vater_note" => array("type" => "text"),
                    "vater_died" => array("type" => "radio"),
                    "vater_contacty" => array("type" => "radio"),
                    "vater_contactn" => array("type" => "radio"),
                )
            ),
            "mutter" => array(
                "is_array" => false,
                "fields" => array(
                    "mutter_age" => array("type" => "text"),
                    "mutter_note" => array("type" => "text"),
                    "mutter_died" => array("type" => "radio"),
                    "mutter_contacty" => array("type" => "radio"),
                    "mutter_contactn" => array("type" => "radio")
                )

            ),
            "partner" => array(
                "is_array" => false,
                "fields" => array(
                    "partner_age" => array("type" => "text"),
                    "partner_note" => array("type" => "text"),
                    "partner_died" => array("type" => "radio"),
                    "partner_contacty" => array("type" => "radio"),
                    "partner_contactn" => array("type" => "radio")
                )

            ),

            "geschwister" => array(
                "is_array" => true,
                "count" => 3,
                "fields" => array(
                    "geschwister_age" => array("type" => "text"),
                    "geschwister_note" => array("type" => "text"),
                    "geschwister_died" => array("type" => "radio"),
                    "geschwister_contacty" => array("type" => "radio"),
                    "geschwister_contactn" => array("type" => "radio")
                )

            ),

            "kinder" => array(
                "is_array" => true,
                "count" => 3,
                "fields" => array(
                    "kinder_age" => array("type" => "text"),
                    "kinder_note" => array("type" => "text"),
                    "kinder_died" => array("type" => "radio"),
                    "kinder_contacty" => array("type" => "radio"),
                    "kinder_contactn" => array("type" => "radio")
                )

            )
        );


        $status = array(
            "wohnsituation_allein" => array("type" => "checkbox"),
            "wohnsituation_angehoerige" => array("type" => "checkbox"),
            "wohnsituation_Zuhause" => array("type" => "checkbox"),
            "wohnsituation_Pflegeheim" => array("type" => "checkbox"),
            "Patientenverfuegung_verfuegung" => array("type" => "select"),
            "Vorsorgevollmacht_vollmacht" =>  array("type" => "select"),
            "Vorsorgevollmacht_selectedname" => array("type" => "select"),
            "betreuung_betreuung" => array("type" => "select"),
            "betreuung_selectedname"=> array("type" => "select"),
            "Pflegestufe_stufe" => array("type" => "select"),
            "Pflegestufe_hoeher" => array("type" => "checkbox"),
            "Pflegestufe_neuantrag"  => array("type" => "checkbox"),
            "Hilfsmittelversorgung_freetext" => array("type" => "text"),
            "wunschsterbeort_val" => array("type" => "select"),
            "memopsysoz_freetext"  => array("type" => "text")
        );
        $leben = array(
            "migrationshintergrund" => array("type" => "checkbox"),
            "migrationshintergrund_freetext" => array("type" => "text"),
            //"migrationshintergrund",
            "dolmetscher" => array("type" => "checkbox"),
            "dolmetscher_freetext" => array("type" => "text"),
            "religion" => array("type" => "select"),
            "religion_freetext" => array("type" => "text"),
        );
        $fam_empty = true;
        $leben_empty = true;
        $beruf_empty = true;
        $status_empty = true;
        foreach($fam as $famKey => $famEntry){
            if($famEntry['is_array']){
                for($famCounter=0;$famCounter< $famEntry['count'];$famCounter++){
                    foreach($famEntry['fields'] as $persKey => $person){
                        foreach($person as $fieldKey => $field){
                            if($person['type'] == 'text' && strlen(trim($lmu_pmba_vals[$persKey][$famCounter])) > 0){
                                $fam_empty = false;
                            }else if($person['type'] == 'radio' && intval($lmu_pmba_vals[$persKey][$famCounter]) == 1){
                                $fam_empty = false;
                            }
                        }
                };

                }
            }else{
                foreach($famEntry['fields'] as $fieldKey => $field){
                    if($field['type'] == 'text' && strlen(trim($lmu_pmba_vals[$fieldKey])) > 0){
                        $fam_empty = false;
                    }else if($field['type'] == 'radio' && intval($lmu_pmba_vals[$fieldKey]) == 1){
                        $fam_empty = false;
                    }
                }
            }
        }

        //echo $fam_empty ? 'fam_empty' : 'fam not empty';
        if(strlen(trim($lmu_pmba_vals['beruf'])) > 0){
            $beruf_empty = false;
        }
       //for simple groups (status and leben)
       $check_group_empty = function($aGroup) use ($lmu_pmba_vals) {
           $group_empty = true;
           foreach($aGroup as $groupKey => $groupEntry){
               //print_r($groupEntry );
               //echo $groupKey . ' ' . ' ' . $lmu_pmba_vals[$groupKey] . '<br>';
               if($groupEntry['type'] == 'text' && strlen(trim($lmu_pmba_vals[$groupKey])) > 0){
                   $group_empty = false;
               }else if($groupEntry['type'] == 'select' && strlen(trim($lmu_pmba_vals[$groupKey])) > 0 && trim($lmu_pmba_vals[$groupKey]) != $this->translate('select death wish location') && intval($lmu_pmba_vals[$groupKey]) > 0){
                   $group_empty = false;
               }else if($groupEntry['type'] == 'checkbox' && intval($lmu_pmba_vals[$groupKey]) == 1){
                   $group_empty = false;
               }
           }
           return $group_empty;
       };

         $status_empty = $check_group_empty($status);
         $leben_empty = $check_group_empty($leben);
         $retValue = [
             'beruf_empty' => $beruf_empty,
             'leben_empty' => $leben_empty,
             'status_empty' => $status_empty,
             'fam_empty' => $fam_empty
         ];
         //print_r($retValue);
         return $retValue;

    }

    /*
     * ISPC-2647 Lore 05.08.2020
     */
    public function hospizquestionnairenordAction()
    {
        
        $logininfo = new Zend_Session_Namespace('Login_Info');
        $decid = Pms_Uuid::decrypt($_REQUEST['id']);
        $ipid = Pms_CommonData::getIpid($decid);
        $epid = Pms_CommonData::getEpidFromId($decid);
        
        $userid = $logininfo->userid;
        $clientid = $logininfo->clientid;
        $this->view->patid = $decid;
        $this->view->enc_patid = $_REQUEST['id'];
        
        /* ------------------------------------------------ */
        $patientmaster = new PatientMaster();
        $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        
        $tm = new TabMenus();
        $this->view->tabmenus = $tm->getMenuTabs();
        
        $hospizq = new HospizQuestionnaire();
        
        //ISPC-2647 Lore 05.08.2020
        $hospiz_nord = 1;
        if($_REQUEST['qid'])
        {
            $hospiz_results = $hospizq->get_hospiz_questionarie($_REQUEST['qid'], $hospiz_nord);    
        }
        else
        {
            $hospiz_results = $hospizq->getPatientHospizQuestionnaire($ipid, $hospiz_nord);          
            
            $_REQUEST['qid'] = $hospiz_results['0']['id']; // force to edit first one - just one needed
        }
        $hospiz_questionnaire_details = $hospiz_results['0'];
        
        /* ------------------------------ SAVE FORM BEFORE DISPLAY --------------------------------- */
        if($this->getRequest()->isPost() && strlen($_POST['pdf_export']) == 0)
        {
            /* ----------------Patient save Hospiz questionaire START -------------------------------------- */
            $init = new Application_Form_HospizQuestionnaire();
            
            $_POST['hospiz_q_insert']['hospiz_nord'] = 1;
            
            if($_REQUEST['qid'])
            {
                $result = $init->updateHospizQuestionnaire($_POST['hospiz_q_insert'], $_REQUEST['qid'], $ipid);
            }
            else
            {
                $result = $init->insertHospizQuestionnaire($_POST['hospiz_q_insert'], $ipid);
            }
            
            if($result)
            {
                $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
            }
            /* ----------------Patient save Hospiz questionaire END-------------------------------------- */
        }
        
        /* ----------------Patient general details-------------------------------------- */
        // 			$patientinfo = $patientmaster->getMasterData($decid, 0);
        $patientinfo = $patientmaster->get_patientMasterData();
        $patient_details['last_name'] = $patientinfo['last_name'];
        $patient_details['first_name'] = $patientinfo['first_name'];
        $patient_details['birthd'] = $patientinfo['birthd'];
        $patient_details['admission_date'] = date('d.m.Y', strtotime($patientinfo['admission_date']));
        
        $isdicharged = PatientDischarge::isDischarged($decid);
        $this->view->isdischarged = 0;
        if($isdicharged)
        {
            $this->view->isdischarged = 1;
        }
        
        /* ----------------Get Client details-------------------------------------- */
        $client_det = Pms_CommonData::getClientData($clientid);
        
        $client_details['city'] = $client_det[0]['city'];
        
        $this->view->client_details = $client_details;
        
        /* ----------------Get Client User details-------------------------------------- */
        $users = new User();
        $userarray = $users->getUserByClientid($clientid);
        
        $users_groups = new Usergroup();
        $ClientGroups = $users_groups->getClientGroups($clientid);
        
        foreach($ClientGroups as $kh => $gr_details)
        {
            $grup_details[$gr_details['id']] = $gr_details['groupname'];
        }
        
        foreach($userarray as $user)
        {
            $userarraylast[$grup_details[$user['groupid']]][$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
            $selected_user[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
        }
        
        $users_details['selected_user'] = $selected_user;
        $users_details['client_users'] = $userarraylast;
        $users_details['current_user'] = $userid;
        
        // 		print_r($users_details); exit;
        $this->view->users_details = $users_details;
        
        /* ----------------Patient HealthInsurance details-------------------------------------- */
        $ph = new PatientHealthInsurance();
        $phi = $ph->getPatientHealthInsurance($ipid);
        
        if($phi)
        {
            $health_insurance = $phi[0]['company_name'];
            $patient_details['health_insurance'] = $health_insurance;
        }
        else
        {
            $patient_details['health_insurance'] = '';
        }
        
        if(strlen($_REQUEST['qid'])>'0' && $hospiz_questionnaire_details['admission_date'] != '0000-00-00 00:00:00')
        {
            $patient_details['admission_date'] = date('d.m.Y', strtotime($hospiz_questionnaire_details['admission_date']));
        }
        
        $this->view->patient_details = $patient_details;
        
        /* ----------------Patient - Medication details------------------ */
        $pdrug = new PatientDrugPlan();
        $drugarray = $pdrug->getPatientDrugPlan($decid);
        
        $comma = "";
        foreach($drugarray as $key => $val)
        {
            $medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
            if(!empty($medca))
            {
                $medcaarray = $medca->toArray();
            }
            $medication .= $comma . $medcaarray['name'] . " " . $val['dosage'] . "";
            $comma = "; ";
        }
        
        /* ----------------Patient - Stammdaten - More info--------------------------------- */
        $pmf = new PatientMoreInfo();
        $pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
        $this->view->dk = $pat_moreinfo[0]['dk'];
        $this->view->peg = $pat_moreinfo[0]['peg'];
        $this->view->port = $pat_moreinfo[0]['port'];
        $this->view->zvk = $pat_moreinfo[0]['zvk'];
        $this->view->pumps = $pat_moreinfo[0]['pumps'];
        $this->view->magensonde = $pat_moreinfo[0]['magensonde'];
        
        /* ------------------- Maindiagnosis & Sidediagnosis------------- */
        $dg = new DiagnosisType();
        $abb2 = "'HD'";
        $ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
        $comma = ",";
        $typeid = "'0'";
        foreach($ddarr2 as $key => $valdia)
        {
            $typeid .=$comma . "'" . $valdia['id'] . "'";
            $comma = ",";
        }
        
        $patdia = new PatientDiagnosis();
        $dianoarray = $patdia->getFinalData($ipid, $typeid);
        
        $patientmeta = new PatientDiagnosisMeta();
        $metaids = $patientmeta->getPatientDiagnosismeta($ipid);
        
        if(count($metaids) > 0)
        {
            $diagnosismeta = new DiagnosisMeta();
            $comma = ",";
            $metadiagnosis = "";
            foreach($metaids as $keymeta => $valmeta)
            {
                $metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);
                
                foreach($metaarray as $keytit => $metatitle)
                {
                    $metadiagnosis .= $comma . $metatitle['meta_title'];
                    $comma = ",";
                }
            }
        }
        
        if(count($dianoarray) > 0)
        {
            $comma = "";
            $diagnosis = "";
            foreach($dianoarray as $key => $valdia)
            {
                if(strlen($valdia['diagnosis']) > 0)
                {
                    $diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
                    $comma = ",";
                }
            }
        }
        
        if(strlen($diagnosis) > 0 || strlen($metadiagnosis) > 0)
        {
            $main_diagnosis = $diagnosis;
        }
        else
        {
            $main_diagnosis = "";
        }
        
        $abb = "'ND','AD','DD'";
        $dg = new DiagnosisType();
        $ddarr = $dg->getDiagnosisTypes($clientid, $abb);
        //print_r($ddarr);
        if(!$ddarr[0]['id'])
        {
            $ddarr[0]['id'] = 0;
        }
        $comma = "";
        foreach($ddarr as $key1 => $val1)
        {
            //echo $val1['id'];
            $stam_diagno = array();
            $diagns = new PatientDiagnosis();
            $stam_diagno = $diagns->getFinalData($ipid, $val1['id']);
            
            $dia = 1;
            foreach($stam_diagno as $key => $val)
            {
                if(strlen($val['diagnosis']) > 0)
                {
                    if(strlen($val['icdnumber']) > 0)
                    {
                        $other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
                    }
                    else
                    {
                        $other_diagnosis .= $comma . $val['diagnosis'];
                    }
                    $dia++;
                    $comma = ",";
                }
            }
        }
        
        $side_diagnosis = $other_diagnosis;
        
        $diagnostics_details = $main_diagnosis . $side_diagnosis;
        
        /* ------------------------------ Get Metastasen details ------------------------- */
        $patientmeta = new PatientDiagnosisMeta();
        $metaids = $patientmeta->getPatientDiagnosismeta($ipid);
        
        if(count($metaids) > 0)
        {
            $diagnosismeta = new DiagnosisMeta();
            $comma = "";
            $metadiagnosis = "";
            foreach($metaids as $keymeta => $valmeta)
            {
                $metaarray = $diagnosismeta->getDiagnosisMetaDataById($valmeta['metaid']);
                
                foreach($metaarray as $keytit => $metatitle)
                {
                    $metadiagnosis .= $comma . $metatitle['meta_title'];
                    $comma = ",";
                }
            }
        }
        
        $metadiagnosis_details = $metadiagnosis;
        
        /* ------------------------------ Get SapvQuestionnaire  details ------------------------- */
        $sapvq = new SapvQuestionnaire();
        $sapvq_res = $sapvq->getPatientSapvQuestionnaire($ipid);
        
        if(!empty($sapvq_res[0]))
        {
            $sapv_questionnaire['family_social_environment'] = $sapvq_res[0]['family_social_environment'];
        }
        
        /* ------------------------------ IF NO HOSPIZ QUESTIONNAIRE - prefill ------------------------- */
        if(!$hospiz_questionnaire_details)
        {
            $hospiz_questionnaire_details['diagnostic_details'] = $diagnostics_details;
            $hospiz_questionnaire_details['family_social_environment'] = $sapv_questionnaire['family_social_environment'];
            $hospiz_questionnaire_details['metastasen_details'] = $metadiagnosis_details;
            $hospiz_questionnaire_details['med_details'] = $medication;
            $hospiz_questionnaire_details['user'] = $users_details['current_user'];
        }
        
        /* ------------------------------ DISPLAY HOSPIZ DETAILS  ------------------------------------- */
        $this->view->hospiz_questionnaire_details = $hospiz_questionnaire_details;
        
        /* ------------------------------ PDF  ------------------------------------- */
        if(strlen($_POST['pdf_export']) > 0)
        {
            $post = $_POST;
            $post['client_details'] = $client_details;
            $post['users_details'] = $users_details;
            $post['patient_details'] = $patient_details;
            $post['hospiz_questionnaire_details'] = $_POST['hospiz_q_insert'];
            
            if(strlen($_POST['hospiz_q_insert']['admission_date'])>'0')
            {
                $post['patient_details']['admission_date'] = date('d.m.Y', strtotime($_POST['hospiz_q_insert']['admission_date']));
            }
            
            $this->generateformPdf(3, $post, 'hospizquestionnairenord', "hospiz_questionnaire_nord_pdf.html");
        }
    }
    
		
	}

?>