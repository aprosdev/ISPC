<?php

use Dompdf\Dompdf;
use Dompdf\Options;
// Maria:: Migration ISPC to CISPC 08.08.2020
// Maria:: Migration CISPC to ISPC 02.09.2020
class PatientformnewController extends Pms_Controller_Action {

// 		private $_patientMasterData = null;
// 		private $dec_id = null; 
// 		private $ipid = null; 

		protected $allow_with_no_patient_id = array("shbulkfiles");
		
		public function init()
		{
		    
// 		    $export = new DoctrineExport();
// 		    $export->out(array('patient_contactphone'));
		    
			/* Initialize action controller here */

			if( strlen($_GET['id']) > '0')	{
				$this->dec_id = Pms_Uuid::decrypt($_GET['id']);
				$this->enc_id = $_GET['id'];
			}
			elseif(strlen($_REQUEST['id'])>'0')
			{
				$this->dec_id = Pms_Uuid::decrypt($_REQUEST['id']);
				$this->enc_id = $_REQUEST['id'];
			}
			else
			{
				$actionName = $this->getRequest()->getActionName();
				
				if( ! in_array($actionName, $this->allow_with_no_patient_id)) {
					//redir to overview if patient encripted is is empty
	// 				$this->_redirect(APP_BASE . "overview/overview");
	// 				exit;
				}
			}
			
			//ISPC-791 secrecy tracker
			$user_access = PatientPermissions::document_user_acces();

			//Check patient permissions on controller and action
			$patient_privileges = PatientPermissions::checkPermissionOnRun();
			if(!$patient_privileges)
			{
				$this->_redirect(APP_BASE . 'error/previlege');
			}
			
			
			$this->logininfo = new Zend_Session_Namespace('Login_Info');
			$this
			->setActionsWithPatientinfoAndTabmenus([
			    /*
			     * actions that have the patient header
			     */
			    'zapvassessment',
			    'zapvberatungassessment',
			    'sgbvleistungsnachweispdf',
			    'sgbxileistungsnachweispdf',
			    'sisambulant',
			    'wlassessment',
			    'savoir',
			    'rlppatientcontrol',
			    'complaintform',
			    'patientactionslist',
				'careregulationnew',
				'careregulationnew2020', //ISPC-2777 Dragos 22.01.2021
			    'mdksapvquestionnaire',
                'mdksapvquestionnaire2020',//ISPC-2765,Elena,26.01.2021
			    'brekinderperformance',
			    'sisstationary',
			    'kindersapvhospiz',
			    'besdsurvey',
			    'must',
			    'nrbillingform',
				'treatmentplan',
				'sapvevaluation',
				'entlassungsmanagement',// Maria:: Migration CISPC to ISPC 22.07.2020
				'rubin',
				'munster4new',
				'muster4072020', //ISPC-2627 ISPC: new form Krankenbeförderung 2020, elena, 18.08.2020
				'demstepcarecontrol',
			    "standarddocumentation",  //ISPC-2494 Lore 04.12.2019
            "stressvalues",  //ISPC-2499 Lore 12.12.2019
            'patientrass', // ISPC-2564 Andrei 20.05.2020
			    ($this->logininfo->isEfaClient == '1' && $this->logininfo->isEfaUser == '1') ? '' : 'anlage2kinder',   // ISPC-2882 Ancuta 21.04.2021
                'careplanning', // ISPC-2921 Ancuta 12.05.2021
			    'privatecontactform', // ISPC-2909 Ancuta 01.06.2021
			    
			])
			->setActionsWithJsFile([
			    /*
			     * actions that will include in the <head>:  /public {_ipad} /javascript/views / CONTROLLER / ACTION .js"
			     */
			    'zapvassessment',
			    'zapvberatungassessment',
			    'sgbvleistungsnachweispdf',
			    'sgbxileistungsnachweispdf',
			    'receiptpinew',
			    'sisambulant',//ISPC-2020
			    'wlassessment',//ISPC-2070
			    'savoir',//ISPC-2144
			    'rlppatientcontrol',//ISPC-2143
			    'complaintform',// ISPC-2157
			    'careregulationnew',// ISPC-2192
				'careregulationnew2020', //ISPC-2777 Dragos 22.01.2021
			    'mdksapvquestionnaire',//ISPC-2083
                'mdksapvquestionnaire2020',//ISPC-2765,Elena,26.01.2021
			    'brekinderperformance',// TODO-2214
			    'sisstationary',// ISPC-2240 - duplicate form sisambulant to sisstationary
			    'kindersapvhospiz',// ISPC-2234 - create a form in Formulare/Allgemein/Kinderhospiz
			    'besdsurvey',// ISPC-2253 - create a form in BESD Survey
			    'must',// ISPC-2262 - create a form MUST
				'treatmentplan', //ISPC - 2296 - create a form Behandlungsplan
                'entlassungsmanagement',
				'rubin', //ISPC -2353 - create a form RUBIN - Mini Nutritional Assessment
				'munster4new', //ISPC-2370 - create a new form Krankenbeförderung
			    'emergencyplansapv24', //ISPC-2359
			    'demstepcarecontrol',//ISPC-2461
			    "standarddocumentation",  //ISPC-2494 Lore 04.12.2019
            "stressvalues",  //ISPC-2499 Lore 12.12.2019
            "patientrass", // ISPC-2564 Andrei 20.05.2020
			    'emergencyplansapvii', //ISPC-2736 Lore 12.11.2020
			    ($this->logininfo->isEfaClient == '1' && $this->logininfo->isEfaUser == '1') ? '' : 'anlage2kinder',   // ISPC-2882 Ancuta 21.04.2021
			    'careplanning', // ISPC-2921 Ancuta 12.05.2021
			    'privatecontactform', // ISPC-2909 Ancuta 01.06.2021
			    
			])
			->setActionsWithLayoutNew([
			    /*
			     * actions that will use layout_new.phtml
			     * Actions With Patientinfo And Tabmenus also use layout_new.phtml 
			     */
            'patientrass', // ISPC-2564 Andrei 20.05.2020 - e nevoie de asta sau nu?
			    ($this->logininfo->isEfaClient == '1' && $this->logininfo->isEfaUser == '1') ? '' : 'anlage2kinder',   // ISPC-2882 Ancuta 21.04.2021
			])
			;
				
			// ISPC-2609 Ancuta 22.09.2020
			$this->user_print_jobs = 1;
			//
			
		}
		
		//@todo move this singularity dispach into my view
		public function preDispatch()
		{
		    parent::preDispatch();
		    	
		    $this_controler = $this->getRequest()->getActionName();
		    $controlers_with_zip_city_livesearch = array(
		        'wlassessment',
		    );
		    	
		    if(in_array($this_controler, $controlers_with_zip_city_livesearch)){
		        $layout = new Zend_Layout(); 
		        $layout->getView()->headScript()->appendFile( APP_BASE . '/javascript/livesearch/getzipcities.js' );
		        $layout->getView()->headScript()->appendFile( APP_BASE . '/javascript/livesearch/gethealthinsurance.js' );
		        $layout->getView()->headScript()->appendFile( APP_BASE . '/javascript/livesearch/getdiagnosisicd.js' );
		        $layout->getView()->headScript()->appendFile( APP_BASE . '/javascript/livesearch/getfamilydoctor.js' );
		        $layout->getView()->headScript()->appendFile( APP_BASE . '/javascript/livesearch/getspecialist.js' );
		        $layout->getView()->headScript()->appendFile( APP_BASE . '/javascript/livesearch/getcareservice.js' );
// 		        $layout->getView()->headScript()->appendFile( APP_BASE . 'javascript/views/patient/patientdetails.js' );
		    }
		}
		
		private function generatePdfNew($chk, $post, $pdfname, $filename)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$clientinfo = Pms_CommonData::getClientData($clientid);
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$excluded_keys = array(
				'stamp_block',
				'stamp_block_repr',
				'stamp_block_pfle',
			);
			$post = Pms_CommonData::clear_pdf_data($post, $excluded_keys);

			$post['ipid'] = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);

			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;

			$post['patientname'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']) . " \n" . htmlspecialchars($parr['street1']) . "\n" . htmlspecialchars($parr['zip']) . "&nbsp;" . htmlspecialchars($parr['city']);
			$post['patientaddress'] = htmlspecialchars($parr['street1']) . " \n " . htmlspecialchars($parr['zip']) . " " . htmlspecialchars($parr['city']);
			$post['pataddress'] = htmlspecialchars($parr['street1']) . ", " . htmlspecialchars($parr['zip']) . " " . htmlspecialchars($parr['city']);
			$post['patname'] = htmlspecialchars($parr['last_name']) . ", " . htmlspecialchars($parr['first_name']);
			$post['patbirth'] = $parr['birthd'];
			$post['epid'] = $epid;

			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}

			if($parr['sex'] == 1)
			{
			    $this->view->gender = $this->view->translate("male");
			}
			elseif($parr['sex'] == 2)
			{
			    $this->view->gender = $this->view->translate("female");
			}
			elseif($parr['sex'] != null && $parr['sex'] == 0) 
			{
			    $this->view->gender = $this->view->translate("divers");  //ISPC-2442 @Lore   30.09.2019
			}
			else{
			    $this->view->gender = $this->view->translate("gender_not_documented");
			}



			$dian = new Application_Form_Diagnosis();
			$sortarr = $dian->getHDdiagnosis($parr['ipid']);
			foreach($sortarr as $key => $diagnosis)
			{
				$maind .= ' ' . $diagnosis['description'] . ',';
			}

			$post['maindiagnosis'] = substr($maind, 0, -1);

			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];

			$loguser = Doctrine::getTable('User')->find($logininfo->userid);

			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
			}

			$symp = new Symptomatology();
			$symptomarr = $symp->getPatientSymptpomatologyLast($ipid);

			if(empty($symptomarr))
			{
				$sympval = new SymptomatologyValues();
				$set_details = $sympval->getSymptpomatologyValues(1); //HOPE set
				foreach($set_details as $key => $sym)
				{
					$symptomarr[$key] = $sym;
					$symptomarr[$key]['symptomid'] = $sym['id'];
				}
			}
			else
			{
				foreach($symptomarr as $key => $sym)
				{
					$symptomarr[$key]['sym_desc_array'] = $sym['sym_description'];
					$symptomarr[$key]['sym_description'] = utf8_encode($sym['sym_description']['value']);
				}
			}

			$post['symptomarr'] = $symptomarr;

			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['clientname'] = $clientdata[0]['clientname'];
			$post['clientfax'] = $clientdata[0]['fax'];
			$post['clientphone'] = $clientdata[0]['phone'];
			$post['clientemail'] = $clientdata[0]['emailid'];
			$post['clientcity'] = $clientdata[0]['city'];
			//ISPC-2530, elena, 14.10.2020
			if($pdfname == 'muster13' || $pdfname == 'muster13_pre'){
			    $post['verordungsgruppen'] = Muster13::getVerordungGroups();
            }
			//TODO-3892 Ancuta Added "mdksapvquestionnaire2020" to condition
			if($pdfname != "mdksapvquestionnaire" && $pdfname != "mdksapvquestionnaire2020") //ISPC - 2083 - to generate pdf without take them from patient
			{
    			$pmf = new PatientMoreInfo();
    			$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
    
    			$post['dk'] = $pat_moreinfo[0]['dk'];
    			$post['peg'] = $pat_moreinfo[0]['peg'];
    			$post['port'] = $pat_moreinfo[0]['port'];
    			$post['pumps'] = $pat_moreinfo[0]['pumps'];
			}
			$post['sapsymp'] = Sapsymptom::get_patient_sapvsymptom(Pms_CommonData::getIpid($decid));
			
			
			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

			$post['bdate'] = $patientinfo['birthd'];

			if($patientinfo['isdischarged'] != 1)
			{
				$sav = new SapvVerordnung();
				$post['savarry'] = $sav->getSapvVerordnungData($patientinfo['ipid']);
			}

			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$post['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$post['insurance_status'] = $healthinsu_array[0]['insurance_status'];

			$hquery = Doctrine_Query::create()
				->select('*')
				->from('HealthInsurance')
				->where("id='" . $healthinsu_array[0]['companyid'] . "' or name='" . htmlentities($healthinsu_array[0]['company_name'], ENT_QUOTES) . "'");
			$harray = $hquery->fetchArray();
			$post['kvnumber'] = $harray[0]['kvnumber'];

			/* analage3 */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$imgtag = Doctrine::getTable('SapfiveImagetags')->findBy('ipid', $ipid);
			$post['tagarray'] = $imgtag->toArray();

			$post['tablepatientinfo'] = Pms_Template::createTemplate($parr, 'templates/pdfprofile.html');

			$post['tag'] = date("d");
			$post['month'] = date("m");
			$post['jahr'] = date("Y");

			//get main diagnosis types
			$abb = "'HD','ND'";
			$dg = new DiagnosisType();
			$darr = $dg->getDiagnosisTypes($clientid, $abb);

			foreach($darr as $k_dt => $v_dt)
			{
				$dtypearray[$v_dt['abbrevation']] = $v_dt['id'];
			}

			foreach($post['dtype'] as $k_dtype => $v_dtype)
			{
				if(in_array($v_dtype, $dtypearray))
				{
					if(!empty($post['diagnosis'][$k_dtype]))
					{
						$current_diagnosis_type = array_search($v_dtype, $dtypearray);
						$diagnosis_arr[$current_diagnosis_type][] = trim(rtrim($post['icdnumber'][$k_dtype] . ' ' . $post['diagnosis'][$k_dtype]));
					}
				}
			}

			$metas = array('');
			foreach($post['meta_title'] as $k_meta => $v_meta)
			{
				$metas = array_merge($metas, $v_meta);
			}

			//get all metastases
			$dm = new DiagnosisMeta();
			$diagnosismeta = $dm->getDiagnosisMetaData(1);

			foreach($metas as $k_metas => $v_metas)
			{
				if(!empty($v_metas))
				{
					$metastases[] = trim(rtrim($diagnosismeta[$v_metas]));
				}
			}

			$post['main_diagnosis'] = implode(', ', $diagnosis_arr['HD']);
			$post['metastases'] = implode(', ', $metastases);
			$post['side_diagnosis'] = implode(', ', $diagnosis_arr['ND']);

			// sapv questionnaire
			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);
			/* print_r($htmlform);exit; */
			/*
			if($chk == 1)
			{
				// $dlSession = new Zend_Session_Namespace('doctorLetterSession');
				$tmpstmp = time();
				mkdir("uploads/" . $tmpstmp);
				$pdf->Output('uploads/' . $tmpstmp . '/' . $pdfname . '.pdf', 'F');
				$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
				exec($cmd);
				$zipname = $tmpstmp . ".zip";
				$filename = "uploads/" . $tmpstmp . ".zip";
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
			}
			*/
			if($chk == 2)
			{
				ob_end_clean();
				ob_start();
				$pdf->Output($pdfname . '.pdf', 'D');
				exit;
			}

			if($chk == 3)
			{

				$navnames = array(
					"sgbvverordungen" => 'SGB V Verordungen',
					"sgbvverordungen_pre" => 'SGB V Verordungen',
					"verordnungtp_pre" => 'Muster 63',
					"verordnungtpside" => "Muster 63 Seite 2",
					"verordnungtpside_pre" => "Muster 63 Seite 2 Pre",
					"Muster4pdf" => 'Krankenbeförderung',
					"Muster4pdfsave" => 'Krankenbeförderung',
					"Muster4prepdfsave" => 'Krankenbeförderung Pre',
					"Anlage_3" => 'Teilnahmeerklärung (Anlage 3)',
					"Anlage_3a" => 'Stammdatenblatt für den PKD (Anlage 3a)',
					"Anlage4wl" => 'Anlage 4',
					"Anlage4awlx" => 'Anlage 4a WL',
					"KvnoAnlage3a" => 'Anlage 3a',
					"KvnoAnlage3b" => 'Anlage 3b',
					"anlage15" => 'Anlage 15',
					"shwrapper" => 'Deckblatt',
					"messagecoordinator" => "Mitteilung Koord.",
					"muster13_pre" => "Heilmittelverordnung (preprint)",
					"muster13" => "Heilmittelverordnung",
					"anlage5" => "Anlage 5",
					"painquestionnaire" => "Schmerzbogen",
					"kvno_education" => "Nordrhein Aufklärung",
					"anlage2" => "Anlage 2",
					"vdekanlage2"=>"VdEK Anlage 2",
					"anlage3nordrhein" => "Anlage 3",
					"participationpolicy_save"	=> "Einverstädniserklärung",		
					"participationpolicy"	=> "Einverstädniserklärung",		
					"SisAmbulant"	=> "Sis - ambulant",
					"nraapv" => "Nordrhein - AAPV",
					"verordnungtpkinder" => 'Muster 63 - Kinder',
					"verordnungtpkinder_pre" => 'Muster 63 - Kinder',
					"Stammblatt7" => 'Stammblatt VII',
					"Stammblatt8" => 'Stammblatt VIII',
					"SAPVF_B42" => 'Überleitung II',
					"mdksapvquestionnaire" => "MDK bogen NORD",
				    "mdksapvquestionnaire2020" => "Hospizbedarfsbogen 2020",//TODO-3892 Ancuta 22.02.2021
					"anlage3nordrhein_new" => "Anlage 3 Nordrhein",
					"careregulationnew_save" => "Verordnung häuslicher Krankenpflege",
					"careregulationnew_page1_pre" => "Verordnung häuslicher Krankenpflege Pag.1",
					"careregulationnew_page2_pre" => "Verordnung häuslicher Krankenpflege Pag.2",
					"careregulationnew_page1" => "Verordnung häuslicher Krankenpflege Pag.1",
					"careregulationnew_page2" => "Verordnung häuslicher Krankenpflege Pag.2",
                    "entlassungsmanagement_save" => "Entlassungamanagement",
					SisStationary::PATIENT_FILE_TABNAME => 'Sis - stationär',
					'kindersapvhospiz',
					PatientTreatmentPlan::PATIENT_FILE_TABNAME => 'Behandlungsplan',
					'anlage2kinder'=>'Anlage 2 - Kinderarzt',//ISPC-2882 Ancuta 21.04.2021
                    "privatecontactform_pdf" => "Kontaktformular PV",//ISPC-2909 Ancuta 01.06.2021
				);

				//$pdf = new Pms_PDF($orientation, 'mm', 'A4', true, 'UTF-8', false);
				if($pdfname == 'Muster4pdf' || $pdfname == 'Muster4pdfsave'|| $pdfname == 'Muster4prepdfsave')
				{
					$orientation = 'P';
					$bottom_margin = '10';
					$format = "A5";
				}
				else if($pdfname == 'muster13' || $pdfname == 'muster13_pre' || $pdfname == 'muster13_save')
				{
					$orientation = 'P';
					$bottom_margin = '0';
					$format = "A5";
				}
				else if($pdfname == 'shwrapper')
				{
					$orientation = 'L';
					$bottom_margin = '20';
					$format = "A4";
				}
				else if($pdfname == 'painquestionnaire')
				{
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
				}
				else
				{
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
				}

				$pdf = new Pms_PDF($orientation, 'mm', $format, true, 'UTF-8', false);
				$pdf->SetMargins(10, 5, 10); //reset margins
				$pdf->setDefaults(true, $orientation, $bottom_margin); //defaults with header
				$pdf->setImageScale(1.6);
				$pdf->format = $format;
				$pdf->setPrintFooter(false); // remove black line at bottom
				$pdf->SetMargins(10, 5, 10); //reset margins
				
				$pdf->HeaderText = false;
				
				switch($pdfname)
				{
					case 'sgbvverordungen_pre':
						$pdf->SetAutoPageBreak(false);
						$background_type = '20';
						break;

					case 'verordnungtp_pre':
						$pdf->SetAutoPageBreak(false);
						$background_type = '21';
						break;

					case 'verordnungtpside_pre':
						$pdf->SetAutoPageBreak(false);
						$pdf->setPrintFooter(false);
						$background_type = '52';
						break;

					case 'verordnungtpside':
						$pdf->SetAutoPageBreak(false);
						$pdf->setPrintFooter(false);
						break;

					case 'Muster4prepdfsave':
						$pdf->SetAutoPageBreak(false);
						$pdf->HeaderText = false;
						$pdf->SetMargins(0, 3.5, 10); //reset margins
						$pdf->setCellHeightRatio(1);
						$pdf->setPrintFooter(false);
						$background_type = '74';
						break;

					case 'Muster4pdf':
					case 'Muster4pdfsave':
						$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(2, 2, 2); //reset margins
						$pdf->setPrintFooter(false);
						$pdf->setCellHeightRatio(1);
						break;

					case 'Anlage4awlx':
						$background_type = false;
						$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(10, 5, 10); //reset margins
						$pdf->setPrintFooter(false); //remove footer black line
						break;

					case 'anlage15':
						$background_type = false;
						$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(20, 10, 20); //reset margins
						$pdf->setPrintFooter(false); //remove footer black line
						break;
					case 'shwrapper':
						$background_type = '54';
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(20, 10, 20); //reset margins
						$pdf->setPrintFooter(false); //remove footer black line
						break;
					case 'messagecoordinator':
						$pdf->setPrintFooter(false);
						//$pdf->setfooter_text(true);
						break;
					case 'muster13':
						$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(2, 2, 2); //reset margins
						$pdf->setPrintFooter(false);
						$pdf->setCellHeightRatio(1);
						break;
					/*case 'muster13_save':
						$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(2, 2, 2); //reset margins
						$pdf->setPrintFooter(false);
						$pdf->setCellHeightRatio(1);
						break;*/
					case 'muster13_pre':
						$pdf->bottom_margin = $bottom_margin; //reset margins
						$pdf->SetAutoPageBreak(false);
						$pdf->HeaderText = false;
						$pdf->SetMargins(2, 2, 1, true); //reset margins
						$pdf->setCellHeightRatio(1);
						$pdf->setPrintFooter(false);
						$background_type = '56';
						break;
					case 'anlage5':
						$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(20, 5, 20); //reset margins
						$pdf->setPrintFooter(false);
						break;
							
					case 'painquestionnaire':
						$pdf->SetFont('', '', '11');
						break;
						
					case 'kvno_education':
                        $pdf->SetAutoPageBreak(false);
                        $pdf->HeaderText = false;
                        $pdf->SetMargins(10, 10, 10); //reset margins
                        $pdf->setCellHeightRatio(1);
                        $pdf->setPrintFooter(false);
                        // $background_type = '58';
					    break;	
					    					
					 case 'anlage2':
					    $pdf->SetAutoPageBreak(false);
					    $pdf->SetMargins(20, 5, 20); //reset margins
					    $pdf->setPrintFooter(true);
					    $pdf->footer_text = '<table style="font-size:7pt;"><tr><td  style="text-align:left;" width="50%">Anlage 2 zur Vereinbarung über die palliativmedizinische Versorgung</td><td width="25%" style="text-align:center;">ab 01.07.2015</td><td width="25%" style="text-align:right;">Seite 1 von 1</td></tr>
					    	<tr><td colspan="3" style="text-align:left;">von unheilbar erkrankten Patienten im häuslichen Umfeld</td></tr><tr><td colspan="3" style="text-align:left;">KV Nordrhein – Verband der Ersatzkassen e.V. (vdek)</td></tr></table>';
					     break;
					  
					 case 'anlage3nordrhein':
                        $pdf->SetAutoPageBreak(false);
                        $pdf->SetMargins(20, 5, 20); //reset margins
                        $pdf->setPrintFooter(true);
                        $pdf->footer_text = '<table style="font-size:7pt;"><tr><td  style="text-align:left;" width="50%">Anlage 3 zur Vereinbarung über die palliativmedizinische Versorgung</td><td width="25%" style="text-align:center;">ab 01.07.2015</td><td width="25%" style="text-align:right;">Seite 1 von 1</td></tr>
                        <tr><td colspan="3" style="text-align:left;">von unheilbar erkrankten Patienten im häuslichen Umfeld</td></tr><tr><td colspan="3" style="text-align:left;">KV Nordrhein – Verband der Ersatzkassen e.V. (vdek)</td></tr></table>';
                        break;
					    
					 case 'participationpolicy_save':
                        $pdf->SetAutoPageBreak(false);
                        $pdf->SetMargins(20, 10, 30); //reset margins
                        $pdf->setPrintFooter(true);
                        $pdf->footer_text = '<table style="font-size:10pt;"><tr><td  style="text-align:left;" ><b>Datum / Unterschrift der / des Versicherten, ggf. gesetzlicher Vertreter oder Betreuer</b></td></tr></table>';
                        break;
					   
                    case 'participationpolicy':
                        $pdf->SetAutoPageBreak(false);
                        $pdf->SetMargins(20,10, 30); //reset margins
                        $pdf->setPrintFooter(true);
                        $pdf->footer_text = '<table style="font-size:10pt;"><tr><td  style="text-align:left;" ><b>Datum / Unterschrift der / des Versicherten, ggf. gesetzlicher Vertreter oder Betreuer</b></td></tr></table>';
                        break;
					   
                    case 'SisAmbulant':
                        $pdf->SetMargins(5,5,5); //reset margins
                        break;
                    case 'verordnungtpkinder':
                        	$pdf->SetAutoPageBreak(true);
                        	//$background_type = '21';
                        $pdf->SetMargins(20, 10, 20); 	break;
                    case 'verordnungtpkinder_pre':
                        	$pdf->SetAutoPageBreak(false);
                        	$background_type = '21';
                        	break;
					//TODO-3892 Ancuta 22.02.2021 - separated mdksapvquestionnaire from mdksapvquestionnaire2020
					case 'mdksapvquestionnaire':
							$pdf->SetAutoPageBreak(true);
                        	$pdf->SetMargins(20, 20, 20); //reset margins
                        	$pdf->SetHeaderMargin(5);
                        	$pdf->SetFont('helvetica', '', 11);
                        	$header_text ='<table border="0" cellspacing="0" cellpadding="0" style="padding:0px">';
                            $header_text .='<tr><td width="800" align="left"><img src="'.PUBLIC_PATH.'/images/forms_images/mdk/header.jpg" height="100"/></td></tr></table><br/>';
                        	$pdf->HeaderText = $header_text;
                        	$pdf->setPrintFooter(true);
                        	$pdf->first_page_header=true;
                        	$pdf->setFooterType('1 of n date');
                        	$pdf->footer_border = "0";
                        	$pdf->footer_text = $this->view->translate($pdfname." pdf footer text");;
                        	
					break;            
					
					//TODO-3892 Ancuta 22.02.2021
					case 'mdksapvquestionnaire2020':
							$pdf->SetAutoPageBreak(true);
                        	$pdf->SetMargins(20, 20, 20); //reset margins
                        	$pdf->SetHeaderMargin(5);
                        	$pdf->SetFont('helvetica', '', 11);
                        	$header_text ='<table border="0" cellspacing="0" cellpadding="0" style="padding:0px">';
                            $header_text .='<tr><td width="800" align="left"><img src="'.PUBLIC_PATH.'/images/forms_images/mdk/header2020.jpg" height="100"/></td></tr></table><br/>';
                        	$pdf->HeaderText = $header_text;
                        	$pdf->setPrintFooter(true);
                        	$pdf->first_page_header=true;
                        	$pdf->setFooterType('1 of n date');
                        	$pdf->footer_border = "0";
                        	$pdf->footer_text = $this->view->translate($pdfname." pdf footer text");;
					break;                    
					//-- 
					case 'anlage3nordrhein_new':
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(25, 20, 20); //reset margins
						$pdf->setPrintFooter(true);
						//$pdf->setFooterType(' ');
						$pdf->invoice_footer = true;
						$pdf->no_first_page_invoice_footer = true;
						$pdf->footer_text = '<table style="font-size:9pt; color: #808080;"><tr><td  style="text-align:left; border-bottom: 1px solid #808080;" width="100%">Anlage 3 &#45; Vertrag über die Erbringung Spezialisierter ambulanter Palliativversorgung&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Seite '.$pdf->getAliasNumPage().' von '.$pdf->getAliasNbPages().' in</td></tr>
                        	<tr><td colspan="2" style="text-align:left;">Nordrhein gemäß &#167; 132 d SGB V i. V. m. &#167; 37 b SGB V</td></tr></table>';
						//$pdf->footer_text = "Vertrag über die Erbringung Spezialisierter ambulanter Palliativversorgung";
						break;
					case 'careregulationnew_page1_pre':
						//$background_type = '71';
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(5, 8, 5); //reset margins
						break;
					case 'careregulationnew_page2_pre':
						//$background_type = '72';
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(5, 5, 5); //reset margins
						break;
					case 'careregulationnew_page1':
						//$background_type = '71';
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(2, 2, 2); //reset margins
						break;
					case 'careregulationnew_page2':
						$background_type = '72';
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(5, 5, 5); //reset margins
						break;
					//ISPC-2777 Dragos 25.01.2021
					case 'careregulationnew2020_page1_pre':
						//$background_type = '80';
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(5, 2, 5); //reset margins
						break;
					//ISPC-2777 Dragos 25.01.2021
					case 'careregulationnew2020_page1':
						//$background_type = '71';
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(2, 2, 2); //reset margins
						break;
					case SisStationary::PATIENT_FILE_TABNAME:
						$pdf->SetMargins(5,5,5); //reset margins
						$pdf->setPrintFooter(false);
						$record_id = $post['form_id'];
						$form_tabname = SisStationary::PATIENT_FILE_TABNAME;
						break;
					case 'kindersapvhospiz':
						$pdf->SetMargins(25, 15, 15); //reset margins
						$pdf->setPrintFooter(false);
						//$record_id = $post['form_id'];
						$form_tabname = SisStationary::PATIENT_FILE_TABNAME;
						break;
					case PatientTreatmentPlan::PATIENT_FILE_TABNAME:
						$pdf->SetMargins(20, 10, 20); //reset margins
						$pdf->setPrintFooter(true);
						//$record_id = $post['form_id'];
						//$form_tabname = PatientTreatmentPlan::PATIENT_FILE_TABNAME;
						break;
					default:
						$background_type = false;
						$pdf->SetMargins(10, 5, 10); //reset margins
						break;
				}

				
				if($background_type != false)
				{
					$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], $background_type);
					
					if($bg_image !== false)
					{
						$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
						if(is_file($bg_image_path))
						{
							$pdf->setBackgroundImage($bg_image_path);
						}
					}
				}

				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

				$excluded_css_cleanup_pdfs = array(
					'Muster4pdf',
					'Muster4pdfsave',
					'Muster4prepdfsave',
					'Anlage_3',
					'Anlage_3a',
					'Anlage4awlx',
					'Anlage4wl',
					'KvnoAnlage3a',
					'KvnoAnlage3b',
					'anlage15',
					'shwrapper',
					'muster13_pre',
					'kvno_education',
					'anlage2',
					'vdekanlage2',
					'anlage3nordrhein',
					'participationpolicy_save',
					'SisAmbulant',
					'nraapv',
					'verordnungtpkinder',
					'Stammblatt7',
					'SAPVF_B42',
					"mdksapvquestionnaire",
					"mdksapvquestionnaire2020",//TODO-3892 Ancuta 22.02.2021
					'anlage3nordrhein_new',
					'careregulationnew_page1_pre',
					'careregulationnew_page2_pre',
					'careregulationnew_save',
					'careregulationnew_page1',
					'careregulationnew_page2',
					'careregulationnew2020_page1',// ISPC-2777 Dragos 22.01.2021
					'careregulationnew2020_page1_pre',// ISPC-2777 Dragos 22.01.2021
					SisStationary::PATIENT_FILE_TABNAME,
					'kindersapvhospiz',
					PatientTreatmentPlan::PATIENT_FILE_TABNAME,
				    'anlage2kinder',//ISPC-2882 Ancuta 21.04.2021
				);

				if(!in_array($pdfname, $excluded_css_cleanup_pdfs))
				{
					$html = preg_replace('/style=\"(.*)\"/i', '', $html);
				}
// 				echo $html; exit;
				$pdf->setHTML($html);
				$tmpstmp = $pdf->uniqfolder(PDF_PATH);

				$file_name_real = basename($tmpstmp);

				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');

				$_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
				
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;

// 				exec($cmd);
				$zipname = $file_name_real . ".zip";

				$filename = "uploads/" . $file_name_real . ".zip";

				/*
				$con_id = Pms_FtpFileupload::ftpconnect();

				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/

				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				
				
				if($pdfname == 'sgbvverordungen' || $pdfname == 'sgbvverordungen_pre')
				{
					$record_id = $post['sgbv_form_id'];
					$form_tabname = 'sgbv_form';
				}
				elseif($pdfname == 'Anlage4wl')
				{
					$record_id = "";
					$form_tabname = 'anlage4wl';
				}
				elseif($pdfname == 'KvnoAnlage3a')
				{
					$form_tabname = 'kvnoanlage3a';
				}
				elseif($pdfname == 'KvnoAnlage3b')
				{
					$form_tabname = 'kvnoanlage3b';
				}
				elseif($pdfname == 'muster13')
				{
					$form_tabname = 'muster13';
				}
				elseif($pdfname == 'muster13_pre')
				{
					$form_tabname = 'muster13_pre';
				}
				elseif($pdfname == 'anlage2')
				{
					$form_tabname = 'anlage2_pdf';
				}
				elseif($pdfname == 'vdekanlage2')
				{
					$form_tabname = 'vdek_anlage_2_pdf';
				}
				elseif($pdfname == 'anlage3nordrhein')
				{
					$form_tabname = 'anlage3nordrhein_pdf';
				}
				elseif($pdfname == 'participationpolicy_save')
				{
					$record_id = "";
					$form_tabname = 'participationpolicy_save';
				}
				elseif($pdfname == 'anlage3nordrhein_new')
				{
					$form_tabname = 'anlage3nordrhein_pdf';
				}
				elseif($pdfname == 'Muster4prepdfsave')
				{
					$form_tabname = 'munster4new_pre_pdf';
				}
				elseif($pdfname == 'Muster4pdfsave')
				{
					$form_tabname = 'munster4new_pdf';
				}
				//ISPC-2909 Ancuta 01.06.2021
				elseif($pdfname == 'privatecontactform_pdf')
				{
					$form_tabname = 'privatecontactform_pdf';
				}
				// --
				else
				{
					$record_id = '';
					$form_tabname = '';
				}

				if($pdfname != "muster13_save" && $pdfname != "participationpolicy" && $pdfname != PatientTreatmentPlan::PATIENT_FILE_TABNAME && $pdfname != "Muster4pdf"){// do not save in patient file if muster 13 save
					
					$cust = new PatientFileUpload ();
					$cust->title = Pms_CommonData::aesEncrypt(addslashes($navnames[$pdfname]));
					$cust->ipid = $ipid;
					$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
					$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					$cust->recordid = $record_id;
					$cust->tabname = $form_tabname;
					$cust->system_generated = "1";
					$cust->save();
					$recordid = $cust->id;
				}

				if($pdfname == "verordnungtp_pre" || $pdfname == "verordnungtpside_pre" || $pdfname == "verordnungtpside")
				{
					//insert system file tags (muster63) Tag
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('5'));
				}
				if($pdfname == "anlage2")
				{
					//insert system file tags (anlage2) Tag
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid,false, 'anlage2_tag');
				}
				if($pdfname == "anlage3nordrhein")
				{
					//insert system file tags (anlage3nordrhein_tag) Tag
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid,false, 'anlage3_tag');
				}
				if($pdfname == "verordnungtpkinder" || $pdfname == "verordnungtpkinder_pre")
				{
					//insert system file tags (muster63 kinder) Tag
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('5'));
				}
				if($pdfname == "Stammblatt7")
				{
					//insert system file tags (muster63 kinder) Tag
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('8'));
				}
				if($pdfname == "Stammblatt8")
				{
					//insert system file tags (muster63 kinder) Tag
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, array('8'));
				}
				if($pdfname == "anlage3nordrhein_new")
				{
					//insert system file tags (anlage3nordrhein_tag) Tag
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid,false, 'anlage3_tag');
				}
				/* if($pdfname == "munster4prepdfsave")
				{
					//insert system file tags (anlage3nordrhein_tag) Tag
					$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid,false, 'munster4prepdfsave');
				} */
				// generate comment in verlauf when pdf generated 
				if($pdfname == "Anlage4wl")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $navnames [$pdfname] . ' wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				elseif($pdfname == "KvnoAnlage3a")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $navnames[$pdfname] . ' wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				elseif($pdfname == "KvnoAnlage3b")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $navnames[$pdfname] . ' wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				
				elseif($pdfname == "muster13")
				{
					//prepare log data
					$ipid = $post['ipid'];
					$data['user'] = $userid;
					$data['muster13id'] = $post['saved_id'];
					$data['date'] = date('Y-m-d H:i:s', time());
					$data['operation'] = "printed";
					$data['comment'] = 'PDF';
						
					//save log
					$muster13_log = new Application_Form_Muster13Log();
					$write_muster13_log = $muster13_log->insert_muster13_log($ipid, $clientid, $data);
					
					if($post['post_status'] == 'save')
					{
						$cust = new PatientCourse ();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $navnames[$pdfname] .' wurde erstellt'));
						//$cust->tabname = $form_tabname;
						//$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
						$cust->tabname = Pms_CommonData::aesEncrypt('muster13upload');
						$cust->recordid = $recordid;
						$cust->user_id = $logininfo->userid;
						$cust->done_id = $post['saved_id'];
						
						$cust->save();
						return true;
					}
				}
				elseif($pdfname == "muster13_pre")
				{
					//prepare log data
					$ipid = $post['ipid'];
					$data['user'] = $userid;
					$data['muster13id'] = $post['saved_id'];
					$data['date'] = date('Y-m-d H:i:s', time());
					$data['operation'] = "printed";
					$data['comment'] = 'PREPRINT';
					
					//save log
					$muster13_log = new Application_Form_Muster13Log();
					$write_muster13_log = $muster13_log->insert_muster13_log($ipid, $clientid, $data);
					
					if($post['post_status'] == 'save')
					{
						$cust = new PatientCourse ();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $navnames[$pdfname] . ' wurde erstellt'));
						//$cust->tabname = $form_tabname;
						//$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
						$cust->tabname = Pms_CommonData::aesEncrypt('muster13upload');
						$cust->recordid = $recordid;
						$cust->user_id = $logininfo->userid;
						$cust->done_id = $post['saved_id'];
						$cust->save();
						return true;
					}
				}
				elseif($pdfname == "anlage2")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				elseif($pdfname == "vdekanlage2")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes(' ' . $navnames[$pdfname] . ' wurde erstellt'));
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				elseif($pdfname == "anlage3nordrhein")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				elseif($pdfname == "participationpolicy")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				elseif($pdfname == "anlage3nordrhein_new")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				elseif($pdfname == "Muster4prepdfsave" || $pdfname == "Muster4pdfsave")
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				//ISPC-2909 Ancuta 01.06.2021
				elseif($pdfname == "privatecontactform_pdf" )
				{
					$cust = new PatientCourse ();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Kontaktformular PV (PDF) wurde erstellt'));
					$cust->tabname = $form_tabname;
					$cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
					$cust->recordid = $recordid;
					$cust->user_id = $logininfo->userid;
					$cust->save();
				}
				// --
				else
				{					
					if($pdfname != "muster13_save" && $pdfname != "participationpolicy_save" && $pdfname != "Muster4pdf"){ // do not write in verlauf in muster 13 save					
						$cust = new PatientCourse ();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Formular ' . $navnames[$pdfname] . ' wurde erstellt'));
						$cust->user_id = $logininfo->userid;
						$cust->save();
					}
				}

				if($pdfname != "participationpolicy_save"){					
    				ob_end_clean();
    				ob_start();
    				$pdf->toBrowser($pdfname . '.pdf', "d");
    				exit;
				}
			}

			//dont return the pdf file to user
			if($chk == 4)
			{
				
			    if($pdfname == "sgbvverordungen")
				{
					$record_id = $post['sgbv_form_id'];
					$form_tabname = 'sgbv_form';
				}
				else if($pdfname == "FormFiveInstance")
				{
					$record_id = $post['form_id'];
					$form_tabname = 'final_documentation_form'; // fromfive
				} 
				else if($pdfname == "SisAmbulant")
				{
					$record_id = $post['form_id'];
					$form_tabname = 'sis_ambulant_form';
				}
				else if($pdfname == "nraapv")
				{
					$record_id = $post['form_id'];
					$form_tabname = 'nraapv_form';
				}
				else if($pdfname == "verordnungtpkinder_save")
				{
					$record_id = $post['saved_id'];
					$form_tabname = 'verordnungtpkinder_save'; // muster 63 kinder save
				}
				
				if($pdfname == "anlage2save")
				{
					$record_id = $post['id'];
					$form_tabname = 'anlage2_form';
				}
				
				//ISPC-2921 Ancuta 28.05.2021
				if($pdfname == "careplanning_save")
				{
					$record_id = $post['id'];
					$form_tabname = 'careplanning_form';
				}
				// ---
				
				//ISPC-2909 Ancuta 01.06.2021
				if($pdfname == "privatecontactform_save")
				{
					$record_id = $post['id'];
					$form_tabname = 'privatecontactform_save';
				}
				// ---
				if($pdfname == "painquestionnaire_save" && strlen($post['pain_date']) > 0 && $post['pain_date'] != "0000-00-00 00:00:00")
				{
				    $pain_date = '('.date("d.m.Y H:i", strtotime($post['pain_date'])).')';
				}
				
				$navnames = array(
					"sgbvverordungen" => 'SGB V Verordungen',
					"FormFiveInstance" => 'Abschlussdokumentation_' . date('d-m-Y').'',
					"painquestionnaire_save" => 'Schmerzerhebungsbogen '.$pain_date,
					"SisAmbulant_save" => 'Sis - ambulant',
					"nraapv_save" => 'Nordrhein - AAPV',
					"verordnungtpkinder_save" => "Muster 63 - Kinder " . date('d.m.Y')."",
					"treatmentplan_save" => "Behandlungsplan",
                    "careplanning_save" => "Pflegeplanung",//ISPC-2921 Ancuta 28.05.2021
				    "privatecontactform_save" => "Kontaktformular PV",//ISPC-2909 Ancuta 01.06.2021
                    "entlassungsmanagement_save" => "Entlassungsmanagement"
					
					
				);

				//ISPC-2921 Ancuta 28.05.2021
   				//$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
				if($pdfname == "careplanning_save")
				{
				    $orientation = "L";
				} else{
				    $orientation = "P";
				}
				$pdf = new Pms_PDF($orientation, 'mm', 'A4', true, 'UTF-8', false);
                //
				$pdf->setDefaults(true);
				$pdf->setImageScale(1.6);
				
				if($pdfname == "SisAmbulant_save")
				{
				    $pdf->SetMargins(5,5,5);
				    $pdf->setPrintFooter(false);
				}
				elseif($pdfname == SisStationary::PATIENT_FILE_TABNAME)
				{
					$pdf->SetMargins(5,5,5);
					$pdf->setPrintFooter(false);
					$record_id = $post['form_id'];
					$form_tabname = SisStationary::PATIENT_FILE_TABNAME;
					
				}
				elseif($pdfname == 'treatmentplan_save')
				{
					$pdf->SetMargins(20,10,20);
					$pdf->setPrintFooter(true);
					$record_id = $post['form_id'];
					$form_tabname = PatientTreatmentPlan::PATIENT_FILE_TABNAME;
						
				}
				else
				{
				    $pdf->SetMargins(10, 5, 10); //reset margins
				    
				}
				if($pdfname == 'verordnungtpkinder_save') {
						$pdf->setPrintFooter(false); // remove black line at bottom
						$pdf->format = "A4";
				}
				
				
				if($pdfname == 'careplanning_save') {
						$pdf->setPrintFooter(false); // remove black line at bottom
				}
				
				
				$background_type = false;
				$pdf->HeaderText = false;

				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
				
				$excluded_css_cleanup_pdfs = array(
						'verordnungtpkinder_save',
						'treatmentplan_save',
						'careplanning_save'
				);
				
				if(!in_array($pdfname, $excluded_css_cleanup_pdfs))
				{
					$html = preg_replace('/style=\"(.*)\"/i', '', $html);
				}
				//$html = preg_replace('/style=\"(.*)\"/i', '', $html);
// 				echo "<pre>";
// 				print_R($post);
// 				echo $html; exit;
				$pdf->setHTML($html);

				$tmpstmp = $pdf->uniqfolder(PDF_PATH);
				
				$file_name_real = basename($tmpstmp);
				
				$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
				$_SESSION ['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 				$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip " . "uploads/" . $tmpstmp . "; rm -r " . PDF_PATH . "/" . $tmpstmp;
// 				exec($cmd);
				$zipname = $file_name_real . ".zip";
				$filename = "uploads/" . $file_name_real . ".zip";
				
				/*
				$con_id = Pms_FtpFileupload::ftpconnect();
				if($con_id)
				{
					$upload = Pms_FtpFileupload::fileupload($con_id, PDF_PATH . "/" . $zipname, $filename);
					Pms_FtpFileupload::ftpconclose($con_id);
				}
				*/
				$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue ( PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($navnames[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_id;
				$cust->tabname = $form_tabname;
				$cust->system_generated = "1";
				$cust->save();
				$recordid = $cust->id;

				if($pdfname == "FormFiveInstance")
				{
					$comment = 'Abschlussdokumentation hinzugefügt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("FinalDocumentation_form");
					$cust->user_id = $userid;
					$cust->save();

					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("FinalDocumentation_instance");
					$cust->user_id = $userid;
					$cust->save();
				} 
				elseif($pdfname == "SisAmbulant_save")
				{
					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("SisAmbulant_save");
					$cust->user_id = $userid;
					$cust->save();
				    
				    
				}
				elseif($pdfname == SisStationary::PATIENT_FILE_TABNAME)
				{
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($this->translate(SisStationary::PATIENT_FILE_TITLE));
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt(SisStationary::PATIENT_FILE_TABNAME);
					$cust->user_id = $userid;
					$cust->save();
				
				
				}
				elseif($pdfname == "nraapv_save")
				{
					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("nraapv_save");
					$cust->user_id = $userid;
					$cust->save();
				
				
				}
				elseif($pdfname == "verordnungtpkinder_save")
				{
					$comment = 'Neue Version wurde erstellt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("muster_63kinder_form");
					$cust->user_id = $userid;
					$cust->save();
				
					$comment = 'PDF des ' . $navnames [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt("muster_63kinder_instance");
					$cust->user_id = $userid;
					$cust->save();
				}
				elseif ($pdfname == 'treatmentplan_save')
				{
					$comment = PatientTreatmentPlan::PATIENT_COURSE_TITLE_SAVE;
					$cust = new PatientCourse();
					$cust->ipid = $this->ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt(PatientTreatmentPlan::PATIENT_COURSE_TABNAME_SAVE);
					$cust->user_id = $this->logininfo->userid;
					$cust->save();
				}
				//ISPC-2921 Ancuta 28.05.2021
				elseif ($pdfname == 'careplanning_save')
				{
				    $comment = "Pflegeplanung (PDF) wurde erstellt";
					$cust = new PatientCourse();
					$cust->ipid = $this->ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt(Careplanning::PATIENT_COURSE_TABNAME_SAVE);
					$cust->user_id = $this->logininfo->userid;
					$cust->save();
				}
				// --
				//ISPC-2921 Ancuta 28.05.2021
				elseif ($pdfname == 'privatecontactform_save')
				{
				    $comment = "Kontaktformular PV (PDF) wurde erstellt";
					$cust = new PatientCourse();
					$cust->ipid = $this->ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $recordid;
					$cust->tabname = Pms_CommonData::aesEncrypt('privatecontactform_save');
					$cust->user_id = $this->logininfo->userid;
					$cust->save();
				}
				// --
				
			}
		}

		private function retain_values($values, $prefix = '')
		{
			foreach($values as $key => $val)
			{
				if(!is_array($val))
				{
					$this->view->$key = $val;
				}
				else
				{
					foreach($val as $k_val => $v_val)
					{
						if(!is_array($v_val))
						{
							$this->view->{$prefix . $key . $k_val} = $v_val;
						}
					}
				}
			}
		}

		public function shanlage14Action()
		{
			setlocale(LC_ALL, 'de_DE');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$sapv = new SapvVerordnung();
			$userid = $logininfo->userid;
			$client_details = Pms_CommonData::getClientData($clientid);

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$this->view->first_name = $patientinfo['first_name'];
			$this->view->last_name = $patientinfo['last_name'];
			$this->view->birthd = $patientinfo['birthd'];

			//ISPC-2478 Ancuta 29.10.2020
			$modules = new Modules();
			$fisrt_Sapv_trigger_flatrate = $modules->checkModulePrivileges("246", $clientid);
			// --
			
			
			//user data
			$user = User::getUserDetails($userid);
	 

			if($client_details)
			{
				$this->view->betriebsstatten_nr = $client_details[0]['betriebsstattennummer'];
				$this->view->sapv_team = $client_details[0]['team_name'];
			}

			//patient days
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			$conditions['include_standby'] = true;// TODO-2873 Ancuta 03.02.2020 [add standby condition, for patients thata are NOW standby but had active periods]

			//beware of date d.m.Y format here
			$patient_days = Pms_CommonData::patients_days($conditions);

			//get number of days in each month + start/end day START
			foreach($patient_days[$ipid]['active_periods'] as $k_period => $v_period)
			{
				$last_active = end($patient_days[$ipid]['active_periods']);
				if($v_period['end'] == $last_active['end'])
				{
					$v_period['end'] = date('Y-m-d', strtotime($v_period['end']));
				}
				$months = Pms_CommonData::get_period_months($v_period['start'], $v_period['end'], 'Y-m');
				if(empty($patient_active_months))
				{
					$patient_active_months = array();
				}
				$patient_active_months = array_merge($patient_active_months, $months);
			}
			// usort - Lore 13.11.2019
			usort($patient_active_months, array(new Pms_Sorter(), "_date_compare"));
			$patient_active_months = array_values($patient_active_months);
			
			foreach($patient_active_months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}

			//get number of days in each month + start/end day END
			
			// get hospital days
			if(!empty($patient_days[$ipid]['hospital']['real_days_cs'])){
    			$patient_data['hospitail_days_cs'] = $patient_days[$ipid]['hospital']['real_days_cs'];
			} else{
    			$patient_data['hospitail_days_cs']  = array("9999999999");
			}
			
			// TODO-2957 Ancuta 28.02.2020
			if(!empty($patient_days[$ipid]['hospiz']['real_days_cs'])){
    			$patient_data['hospiz_days_cs'] = $patient_days[$ipid]['hospiz']['real_days_cs'];
			} 
			//--
			
			//check if a month is selected START
			if(empty($_REQUEST['list']))
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$attrs['onChange'] = 'changeMonth(this.value);';
//			$attrs['class'] = 'select_month_hospiz_performance';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$this->view->current_period = $current_period;
			$this->view->month_year = strftime('%B %Y', strtotime($current_period['start']));

			//get selected month days
			if($months_details[$selected_month])
			{
				$selected_month_days = $patientmaster->getDaysInBetween($months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
			}
			$this->view->selected_month_days = $selected_month_days;

			$shortcuts_arr = array(
				'sh_beko',
				'sh_folgeko',
				'sh_doc_non_hospiz_visits',
				'sh_nur_non_hospiz_visits',
				'sh_other_visits',
				'sh_doc_hospiz_visits',
				'sh_telefonat',
				'sh_flatrate',
				//used only in custom totals
				'sh_nur_visits',
				'sh_nur_hospiz_visits',
			);

			$visits_shortcuts = array(
				'sh_doc_non_hospiz_visits',
				'sh_nur_non_hospiz_visits',
				'sh_other_visits',
				'sh_doc_hospiz_visits',
				//used only in custom totals
				'sh_nur_hospiz_visits',
				'sh_nur_non_hospiz_visits',
			);

			//shortcuts calculated internaly but not shown in view
			$excluded_shortcuts = array(
				'sh_nur_visits',
				'sh_nur_hospiz_visits',
			);
			
			//get client national hollidays
			$nhollyday = new NationalHolidays();
			$national_holidays_arr = $nhollyday->getNationalHoliday($clientid, $current_period['start'], true);

			foreach($national_holidays_arr as $k_natholliday => $v_natholliday)
			{
				$national_holidays[] = strtotime(date('Y-m-d', strtotime($v_natholliday['NationalHolidays']['date'])));
			}

			$this->view->national_holidays = $national_holidays;

			$this->view->shortcuts = $shortcuts_arr;
			$this->view->excluded_shortcuts = $excluded_shortcuts;
			$this->view->map_excluded_shortcuts = $map_excluded_shortcuts;

			$this->view->patient_first_name = $patientinfo['first_name'];
			$this->view->patient_last_name = $patientinfo['last_name'];
			$this->view->patient_dob = $patientinfo['birthd'];

			//patient HEALTH INSURANCE START
			//patient health insurance
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->hi_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			//patient HEALTH INSURANCE START
			//get patient hospital location in curent period START

			$patient_locations = new PatientLocation();
			$patient_period_locations = $patient_locations->get_period_locations($ipid, $months_details[$selected_month], '1');
			if($_REQUEST['ddd'] == '1')
			{
				print_r($patient_period_locations);
				exit;
			}
			$format = 'd.m.Y';
			foreach($patient_period_locations as $k_loc => $v_loc)
			{
				$pat_hosp['start'] = date($format, strtotime($v_loc['valid_from']));

				if($v_loc['valid_till'] == '0000-00-00 00:00:00')
				{
					$pat_hosp['end'] = date($format, time());
				}
				else
				{
					$pat_hosp['end'] = date($format, strtotime($v_loc['valid_till']));
				}

				$pat_hosp_period[] = $pat_hosp;
			}

			$this->view->patient_hospitals = $pat_hosp_period;
			//get patient hospital location in curent period END
			//patient SAPV START
			//get patient first sapv from date if the curent month sapv is the first sapv
			$patient_first_sapv = $sapv->get_patient_first_sapv($ipid);

			if($patient_first_sapv)
			{
				$first_sapv_id = $patient_first_sapv[0]['id'];
				$sapv_start = date('Y-m-d', strtotime($patient_first_sapv[0]['verordnungam']));
				$sapv_end = date('Y-m-d', strtotime($patient_first_sapv[0]['verordnungbis']));

				if(Pms_CommonData::isintersected(strtotime($sapv_start), strtotime($sapv_end), strtotime($months_details[$selected_month]['start']), strtotime($months_details[$selected_month]['end'])))
				{
					$start_first_sapv = date('d.m.Y', strtotime($patient_first_sapv[0]['verordnungam']));
				}
				else
				{
					$start_first_sapv = '-';
				}

				$this->view->start_date_erst = $start_first_sapv;
			}

			//get patient sapvs but not the first one(following sapv)
			$patient_following_sapv = $sapv->get_patient_following_sapvs($ipid, $first_sapv_id);

			if($patient_following_sapv)
			{
				$first_follower = false;

				foreach($patient_following_sapv as $k_sapv => $v_sapv_data)
				{
					if($first_follower === false)
					{
						$sapv_start = date('Y-m-d', strtotime($v_sapv_data['verordnungam']));
						$sapv_end = date('Y-m-d', strtotime($v_sapv_data['verordnungbis']));

						if(Pms_CommonData::isintersected(strtotime($sapv_start), strtotime($sapv_end), strtotime($months_details[$selected_month]['start']), strtotime($months_details[$selected_month]['end'])))
						{
							$start_following_sapv = date('d.m.Y', strtotime($v_sapv_data['verordnungam']));
							$first_follower === true;
						}
						else
						{
							$start_following_sapv = '-';
						}
					}
				}

				$this->view->start_date_folge = $start_following_sapv;
			}
			//patient SAPV END
			//get last sapv START
			$last_sapv = $sapv->get_patient_last_sapv($ipid);
			//get last sapv END
			//patient discharged dead START
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$todarray = $distod->fetchArray();

			$tod_ids[] = "9999999999999";
			foreach($todarray as $k_tod => $tod_method)
			{
				$tod_ids[] = $tod_method['id'];
			}

			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $tod_ids)
				->andWhere('isdelete = "0"');
			$discharged_tod_res = $dispat->fetchArray();

			$discharge_death_date = array();
			if($discharged_tod_res)
			{
			    $discharge_death_date[$ipid] = $discharged_tod_res[0]['discharge_date'];
			    
				if($last_sapv)
				{
					if(strtotime($last_sapv[0]['verordnungbis']) <= strtotime($discharged_tod_res[0]['discharge_date']))
					{
						$dead_sapv_date = date('d.m.Y', strtotime($last_sapv[0]['verordnungbis']));
					}
					else
					{
						$dead_sapv_date = date('d.m.Y', strtotime($discharged_tod_res[0]['discharge_date']));
					}
				}
				else
				{
					$dead_sapv_date = '';
				}
			}
			else
			{
				$dead_sapv_date = '';
			}
			//patient discharged dead END

			$dis_methods = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0")
				->andWhere("clientid=" . $clientid . " and (abbr = 'RAAPV' or abbr = 'Raapv' or abbr='raapv' OR abbr = 'KHWS' or abbr = 'khws' or abbr =' Khws' OR abbr = 'STATHOSPIZ' or abbr = 'Stathospiz' or abbr='stathospiz' OR abbr = 'PWUNSCH' or abbr = 'Pwunsch' or abbr='pwunsch')");
			$dis_methods_res = $dis_methods->fetchArray();

			if($dis_methods_res)
			{
				foreach($dis_methods_res as $k_dis_method => $v_dis_method)
				{
					$discharge_methods_arr[strtolower($v_dis_method['abbr'])][] = $v_dis_method['id'];
				}
			}

			//patient discharged returned AAPV (Rückführung AAPV) START
			$discharge_methods_arr['raapv'][] = '999999999999';
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $discharge_methods_arr['raapv'])
				->andWhere('isdelete = "0"');
			$discharged_raapv_res = $dispat->fetchArray();


			if($discharged_raapv_res)
			{
				if($last_sapv)
				{
					$raapv_sapv_date = date('d.m.Y', strtotime($last_sapv[0]['verordnungbis']));
				}
				else
				{
					$raapv_sapv_date = '';
				}
			}
			else
			{
				$raapv_sapv_date = '';
			}
			//patient discharged returned AAPV (Rückführung AAPV) END
			//patient discharged hospitalization (Krankenhauseinweisung) START
			$discharge_methods_arr['khws'][] = '999999999999';
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $discharge_methods_arr['khws'])
				->andWhere('isdelete = "0"');
			$discharged_khws_res = $dispat->fetchArray();

			if($discharged_khws_res)
			{
				if($last_sapv)
				{
					$khws_sapv_date = date('d.m.Y', strtotime($last_sapv[0]['verordnungbis']));
				}
				else
				{
					$khws_sapv_date = '';
				}
			}
			else
			{
				$khws_sapv_date = '';
			}
			//patient discharged hospitalization (Krankenhauseinweisung) END
			//patient discharged inhospice (stationäres Hospiz) START
			$discharge_methods_arr['stathospiz'][] = '999999999';
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $discharge_methods_arr['stathospiz'])
				->andWhere('isdelete = "0"');
			$discharged_stathospiz_res = $dispat->fetchArray();

			if($discharged_stathospiz_res)
			{
				if($last_sapv)
				{
					$stathospiz_sapv_date = date('d.m.Y', strtotime($last_sapv[0]['verordnungbis']));
				}
				else
				{
					$stathospiz_sapv_date = '';
				}
			}
			else
			{
				$stathospiz_sapv_date = '';
			}
			//patient discharged inhospice (stationäres Hospiz) END
			//get sapv data START
			$sapv_array = SapvVerordnung::get_all_sapvs($ipid);
			//ISPC-2478 Ancuta 27.10.2020
			$patient_Erstsapv_days = array();
			//--
			foreach($sapv_array as $k_sapv => $v_sapv)
			{
				$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

				if($v_sapv['status'] == '1' && $v_sapv['verordnungam'] != '0000-00-00 00:00:00')
				{
					$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
				}
				else
				{
					$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
				}

				if(empty($patient_sapv_days))
				{
					$patient_sapv_days = array();
				}

				$patient_sapv_days = array_merge($patient_sapv_days, PatientMaster::getDaysInBetween($start, $end));
				
				//ISPC-2478 Ancuta 27.10.2020
				if($v_sapv['sapv_order'] == '1'){
    				$patient_Erstsapv_days[$v_sapv['id']] =  PatientMaster::getDaysInBetween($start, $end);
				}
				// --

				$curent_month_sapv_days = array_intersect($selected_month_days, $patient_sapv_days);
			}
			//get sapv data END
			//patient discharged "patient wish" (Patientenwunsch) START
			$discharge_methods_arr['pwunsch'][] = '999999999';
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $discharge_methods_arr['pwunsch']);
			$discharged_pwunsch_res = $dispat->fetchArray();

			if($discharged_pwunsch_res)
			{
				if($last_sapv)
				{
					$pwunsch_sapv_date = date('d.m.Y', strtotime($last_sapv[0]['verordnungbis']));
				}
				else
				{
					$pwunsch_sapv_date = '';
				}
			}
			else
			{
				$pwunsch_sapv_date = '';
			}
			//patient discharged "patient wish" (Patientenwunsch) END
			//get patient TELEFONAT (XT) START
			$tel_array = PatientCourse::get_patient_shortcuts_course($ipid, array('XT'), $months_details[$selected_month]);
			$patient_phones = array();
			foreach($tel_array as $k_tel => $v_tel)
			{
				$v_tel_date = date('Y-m-d', strtotime($v_tel['done_date']));

				if(in_array($v_tel_date, $curent_month_sapv_days) &&  in_array (date('d.m.Y', strtotime($v_tel['done_date'])),$patient_days[$ipid]['real_active_days'] ))
				{
				    // REMOVE CONTACTS AFTER Death time
				    if($v_tel_date == date('Y-m-d', strtotime($discharge_death_date[$ipid])) && strtotime(date('Y-m-d H:i:s', strtotime($v_tel['done_date']))) > strtotime($discharge_death_date[$ipid])){
				        // do not add
				    }
				    else{
    					$patient_phones[$v_tel_date]['sh_telefonat'][] = $v_tel;
				    }
				}
			}
			
			
			//get patient TELEFONAT (XT) END
			//get contact forms (ALL) START
			$contact_forms_all = $this->get_period_contact_forms($ipid, $months_details[$selected_month]);
			
			$current_form = array('shanlage14');
			$form_items = FormsItems::get_all_form_items($clientid, $current_form, 'v');

			foreach($form_items[$current_form[0]] as $k_item => $v_item)
			{
				$items_arr[] = $v_item['id'];
			}

			$items_contact_forms = Forms2Items::get_items_forms($clientid, $items_arr);

			// REMOVE CONTACTS AFTER Death time
			foreach($contact_forms_all as $kcf => $day_cfs)
			{
			    foreach($day_cfs as $k_dcf => $v_cf)
			    {
			        if(is_numeric($k_dcf) && !empty($discharge_death_date[$v_cf['ipid']]))
			        {
        			     if(strtotime(date('Y-m-d H:i:s', strtotime($v_cf['start_date']))) > strtotime($discharge_death_date[$v_cf['ipid']]) && $patient_days[$v_cf['ipid']]['details']['isdischarged'] == '1'){
        
        			        unset($contact_forms_all[$kcf][$k_dcf]); 
        			     }
			        }
			    }
			}
			
			
			foreach($contact_forms_all as $kcf => $day_cfs)
			{
				foreach($day_cfs as $k_dcf => $v_dcf)
				{
					//format contact form date to fit the format used in patients_days()
					$day_cfs_formated = date('d.m.Y', strtotime($kcf));

					if(in_array($day_cfs_formated, $patient_days[$ipid]['real_active_days'])){
					    
    					//all contact forms mapped with id as key
    					$contact_forms_details[$v_dcf['id']] = $v_dcf;
    					$contact_form_date = date('Y-m-d', strtotime($v_dcf['billable_date']));
    
    					if(
    					    in_array($v_dcf['form_type'], $items_contact_forms['sh_other_visits'])
    					    && (!in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs']) && !in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['real_days_cs']))
    					    )
    					{
    						//catch the contact forms added by users which belong to the client setting selected groups
    						$contact_forms[$contact_form_date]['sh_other_visits'][] = $v_dcf['id'];
    					}
    
    					if(in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']) || in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_non_hospiz_visits']))
    					{
    						//all doctor contactforms
    						$contact_forms[$contact_form_date]['doctor_all'][] = $v_dcf['id'];
    						
    						//split doctors contact forms into 2 entities (hospiz and non-hospiz)
    						//TODO-3562 Carmen 05.11.2020
    						/* if((in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs']) || in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']))
    						{ */
    						if((in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']))
    						{
    						//--
    							$contact_forms[$contact_form_date]['sh_doc_hospiz_visits'][] = $v_dcf['id'];
    						}
    						else if((!in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs']) && !in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_non_hospiz_visits']))
    						{
    							$contact_forms[$contact_form_date]['sh_doc_non_hospiz_visits'][] = $v_dcf['id'];
    						}
    					}
    
    					if(in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']) || in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_non_hospiz_visits']))
    					{
    						//all nurse contactforms
    						$contact_forms[$contact_form_date]['sh_nur_visits'][] = $v_dcf['id'];
    
    						//nurse contact forms in hospiz and non hospiz(non hospiz is used in "Anzahl Tagespauschale")
    						//TODO-3562 Carmen 05.11.2020
    						/* if((in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs']) || in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']))
    						{ */
    						if((in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']))
    						{
    							$contact_forms[$contact_form_date]['sh_nur_hospiz_visits'][] = $v_dcf['id'];
    						}
    						//--
    						//nurse contact forms in hospiz and non hospiz(non hospiz is used in "Anzahl Tagespauschale")
    						else if((!in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs']) && !in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_non_hospiz_visits']))
    						{
    							$contact_forms[$contact_form_date]['sh_nur_non_hospiz_visits'][] = $v_dcf['id'];
    						}
    					}
    					
				    }
					
				}
			}
			//get contact forms (ALL) END
			//get saved data if any START
			$anlage14ctrl = new Anlage14Control();
			$anlage14_res = $anlage14ctrl->get_anlage14_controlsheet($ipid, $months_details[$selected_month]['start'],false,$patient_days);//TODO-2957 Ancuta 02.03.2020 Added new param $patient_days
			if($_REQUEST['ddd'] == '1')
			{
				print_r($anlage14_res);
				exit;
			}
			$this->view->has_data = '0';

			if(!empty($anlage14_res))
			{
				$this->view->has_data = '1';
				$this->view->master_data = $anlage14_res;
				$this->view->patient_hospitals = $anlage14_res['patient_hospitals'];
			}
			//get saved data if any END
						
			

			$this->view->real_active_days = $patient_days[$ipid]['real_active_days'];
			$this->view->hospital_days = $patient_days[$ipid]['hospital']['real_days_cs'];
				
			
			
			//POST START
			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['clientid'] = $clientid;
				$post['curent_month'] = $months_details[$selected_month]['start'];
				$post['selected_month_days'] = $selected_month_days;
				$post['current_period'] = $current_period;
				$post['shortcuts'] = $shortcuts_arr;
				$post['excluded_shortcuts'] = $excluded_shortcuts;

				$post['national_holidays'] = $national_holidays;
				$post['patient_last_name'] = $patientinfo['last_name'];
				$post['patient_first_name'] = $patientinfo['first_name'];
				$post['patient_dob'] = $patientinfo['birthd'];

				$post['hi_company_name'] = $healthinsu_array[0]['company_name'];
				$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];

				$post['start_date_erst'] = $start_first_sapv;
				$post['start_date_folge'] = $start_following_sapv;

	 
				$post['betriebsstatten_nr'] = $client_details[0]['betriebsstattennummer'];
				$post['sapv_team'] = $client_details[0]['team_name'];


				$anlage14_form = new Application_Form_Anlage14();

				if($_POST['form_action'] == "save")
				{
					//save submited data and redirect to form
					$save_form = $anlage14_form->insert_data($ipid, $post, $this->view->shortcuts, $selected_month_days);
					if($_REQUEST['list'])
					{
						$list_url = '&list=' . $_REQUEST['list'];
					}
					else
					{
						$list_url = '';
					}
					$this->redirect(APP_BASE . 'patientformnew/shanlage14?id=' . $_REQUEST['id'] . $list_url);
					exit;
				}
				else if($_POST['form_action'] == "pdf")
				{
					//create pdf master data from posted data START

					$post_master_data['raapv_sapv_date'] = $post['raapv_sapv_date'];
					$post_master_data['aapv_start'] = $post['aapv_start'];
					$post_master_data['aapv_end'] = $post['aapv_end'];

					$post_master_data['khws_sapv_date'] = $post['khws_sapv_date'];
					$post_master_data['stathospiz_sapv_date'] = $post['stathospiz_sapv_date'];
					$post_master_data['hospiz_start'] = $post['hospiz_start'];
					$post_master_data['hospiz_end'] = $post['hospiz_end'];

					$post_master_data['pwunsch_sapv_date'] = $post['pwunsch_sapv_date'];
					$post_master_data['patient_wish_start'] = $post['patient_wish_start'];
					$post_master_data['patient_wish_end'] = $post['patient_wish_end'];

					$post_master_data['dead_sapv_date'] = $post['dead_sapv_date'];
					
					$post_master_data['real_active_days'] = $this->view->real_active_days;
					$post_master_data['hospital_days'] = $this->view->hospital_days;

					$post['master_data'] = $post_master_data;

					$gen_pdf = $this->generate_pdf($post, 'shanlage14', 'shanlage14_pdf.html');
					//create pdf master data from posted data END
				}
				else if($_POST['form_action'] == "reset")
				{
					//reset saved data and redirect to same form
					$anlage14_form->clear_form_data($clientid, $ipid, $months_details[$selected_month]['start']);
					$anlage14_form->clear_hospitals_data($post, $ipid);

					$this->redirect(APP_BASE . 'patientformnew/shanlage14?id=' . $_REQUEST['id'] . '&list=' . date('Y-m', strtotime($months_details[$selected_month]['start'])));
					exit;
				}
			}
			//POST END
//			load saved data and create master data array START
			$treated_days_all = array_values($patient_days[$ipid]['treatment_days']);

			$pat_sapv_days_dmy = $patient_sapv_days;
			array_walk($pat_sapv_days_dmy, function(&$value) {
				$value = date('d.m.Y', strtotime($value));
			});

			$treated_days_all = array_intersect($treated_days_all, $pat_sapv_days_dmy);

			$treated_days_all_ts = $treated_days_all;// Active AND SAPV
			array_walk($treated_days_all_ts, function(&$value) {
				$value = strtotime($value);
			});

			asort($treated_days_all_ts, SORT_NUMERIC);

			$treated_days_all_ts = array_values(array_unique($treated_days_all_ts));

			
			//TODO-3669 Ancuta 11.10.2020
            $treated_days_all = $treated_days_all_ts;
            array_walk($treated_days_all, function(&$value) {
				$value = date('d.m.Y', $value);
			});
            
			//TODO-3691 Ancuta 18.12.2020
            $pat_treatment_days = $treated_days_all_ts;
            array_walk($pat_treatment_days, function(&$value) {
                $value = date('Y-m-d', $value);
            });
            // -- 
	 
            
            //TODO-3724 Ancuta 21-25.01.2021 Start + TODO-3743 Ancuta 25.01.2021
            $Valid_patient_Erstsapv_days = array();
            foreach($patient_Erstsapv_days as $sid =>$s_days){
                foreach($s_days as $k=>$se){
                    if(in_array(date('d.m.Y',strtotime($se)),$treated_days_all)){
                        $Valid_patient_Erstsapv_days[$sid][]=$se;
                    }
                }
            }
            
            $valid_erst_sapv_starts = array();
            $all_valid_erst_sapv_starts = array();
            foreach($Valid_patient_Erstsapv_days as $ksi=>$es_dates_v){
                $valid_erst_sapv_starts[$ipid][] = date('d.m.Y',strtotime($es_dates_v[0]));
                $all_valid_erst_sapv_starts[$ipid][] = date('d.m.Y',strtotime($es_dates_v[0]));
            }
            //--  END
            
            
			if($_REQUEST['dbg'])
			{
				print_r("patient_days\n");
				print_r($patient_days);
				print_r("treated_days_all ordered\n");
				print_r($pat_treatment_days);


				//show the final treated days arr (from which we get the 29th day)
				array_walk($treated_days_all_ts, function(&$value) {
					$value = date('Y-m-d', $value);
				});

				print_r("treated_days_all_ts final\n");
				print_r($treated_days_all_ts);
				exit;
			}

			if($this->view->has_data == '0')
			{
				$flatrate_treatment_days = $treated_days_all_ts;

				if(count($flatrate_treatment_days) > 0)
				{
					$flatrate_start = $flatrate_treatment_days[0];
					$fl_days = array();
					while(count($fl_days) < '7')
					{
						if(in_array($flatrate_start, $flatrate_treatment_days))
						{
							$fl_days[] = $flatrate_start;
						}
						else
						{
							$fl_days[] = $flatrate_treatment_days[0];
						}

						$flatrate_start = strtotime('+1 day', $flatrate_start);
					}
				}
				
				//ISPC-2478 Ancuta 27.10.2020 START
				$days29ths = array();
				$days29ths[$ipid] = array();
				if($fisrt_Sapv_trigger_flatrate){ // check module
    				foreach($patient_Erstsapv_days as $sid=>$s_days){
    				    array_walk($s_days, function(&$value) {
    				        $value = date('d.m.Y', strtotime($value));
    				    });
    			        $patient_Erstsapv_days[$sid] = array_values(array_intersect($treated_days_all, $s_days));
    			        array_walk($patient_Erstsapv_days[$sid], function(&$value) {
    				        $value = date('Y-m-d', strtotime($value));
    				    });
    				}
    				$flatrate_start_sapv  =array();
                    foreach ($patient_Erstsapv_days as $sid => $s_days) {
        
                        $s_days_ts = $s_days;
                        array_walk($s_days_ts, function (&$value) {
                            $value = strtotime($value);
                        });
        
                        // if existing flatrates - are in the current $s sapv days then skip
                        if (array_intersect($fl_days, $s_days_ts)) {
                            
                        } else {
        
                            $flatrate_treatment_days_sapv[$sid] = $s_days_ts;
        
                            if (count($flatrate_treatment_days_sapv[$sid]) > 0) {
                                $flatrate_start_sapv[$sid] = $flatrate_treatment_days_sapv[$sid][0];
                                $flatrate_start_days_sapv[$sid] = $flatrate_treatment_days_sapv[$sid][0];
                                $fl_days_Sapv[$sid] = array();
                                while (count($fl_days_Sapv[$sid]) < '7') {
                                    if (in_array($flatrate_start_sapv[$sid], $flatrate_treatment_days_sapv[$sid])) {
                                        $fl_days_Sapv[$sid][] = $flatrate_start_sapv[$sid];
                                    } else {
                                        $fl_days_Sapv[$sid][] = $flatrate_treatment_days_sapv[$sid][0];
                                    }
        
                                    $flatrate_start_sapv[$sid] = strtotime('+1 day', $flatrate_start_sapv[$sid]);
                                }
        
                                $fl_days = array_merge($fl_days, $fl_days_Sapv[$sid]);
                            }
                        }
                    }
                    
    				//split treatment days - break at every flatrate start
                    
//                     array_walk($treated_days_all_ts , function(&$value) {
//                         $value = date('Y-m-d', $value);
//                     });
//                         dd($flatrate_start_sapv,$treated_days_all_ts);
                    $fl_rts  =array();
                    $fl_rts[$ipid]  =array();
                    foreach($flatrate_start_days_sapv as $sapv_id=>$start_flartare_Date){
            	        $fl_rts[$ipid][$sapv_id][] = $start_flartare_Date;
//             	        $fl_rts[$ipid][$sapv_id][] =date('Y.m.d',$start_flartare_Date);
    			        
    		      		foreach($treated_days_all_ts as $kdt => $day_treatment){
    		      		    if($day_treatment > $start_flartare_Date && count($fl_rts[$ipid][$sapv_id]) <=  29){
    		      		        $fl_rts[$ipid][$sapv_id][] = $day_treatment;
//     		      		        $fl_rts[$ipid][$sapv_id][] = date('Y.m.d',$day_treatment);
    				        }
    				    }
    				}
    				foreach($fl_rts[$ipid] as $sids=>$trsdays){
    				    if(count($trsdays) >=29){
    				        $days29ths[$ipid][] = end($trsdays);
    				    }
    				}
    				
                    //TODO-3724 Ancuta 21-25.01.2021 Start
    				$fall_sapv_treatment_days = array();
    				foreach($patient_days as $pipid=>$pdata){
    				    $flnr= 0;
    				    foreach($pdata['patient_active'] as $pid=>$pa){
    				        if($pa['end'] == "0000-00-00" ){
    				            $pa['end'] = date("Y-m-d");
    				        }
    				        foreach($pdata['treatment_days'] as $tk=>$tr_day){
    				            if(Pms_CommonData::isintersected(strtotime($tr_day), strtotime($tr_day), strtotime($pa['start']), strtotime($pa['end']))
    				                && in_array($tr_day,$pat_sapv_days_dmy)
    				                ){
    				                    $fall_sapv_treatment_days[$pipid][$flnr][] = $tr_day;
    				            }
    				        }
    				        
    				        $flnr++;
    				    }
    				}
    				
    				$patient_29th_days = array();
    				$erst_29_days = array();

    				foreach($valid_erst_sapv_starts[$ipid] as $k=>$ss_start_date){
    				    
    				    if($valid_erst_sapv_starts[$ipid][$k+1]){
    				        $per_sapv_start_dates[$ss_start_date] = PatientMaster::getDaysInBetween(date('Y-m-d',strtotime($ss_start_date)), date('Y-m-d',strtotime($valid_erst_sapv_starts[$ipid][$k+1])),null,"d.m.Y");
    				        
    				        foreach($per_sapv_start_dates[$ss_start_date] as $l=>$sdate){
    			                $erst_29_days[$ipid][$ss_start_date][] = $sdate;
    				        }
    				        
    				        if(count($erst_29_days[$ipid][$ss_start_date]) < 29){
    				            unset($valid_erst_sapv_starts[$ipid][$k+1]);
    				        }
    				    }
    				}
    				
    			    foreach ($fall_sapv_treatment_days[$ipid] as $fall_nr=>$tr_sapv_fall_days){ //date fromat d.m.Y
    				    if( count($tr_sapv_fall_days) <  29 ){
    				        // SKIP
    				        
    				    } else {
    				        // If it is the first period ever - we add the FIrst 29days  no matter the  sapv type (ERST or not)
    				        if($fall_nr == 0){
        				        // first - we add the FIRST EVER 29th date  
    				            $patient_29th_days[$ipid][]  = $tr_sapv_fall_days[28]; // starts with key 0
    				            
    				            // we check if here we have additional ERST falls
    				            foreach($tr_sapv_fall_days as $k=>$d){
    				                if(strtotime($d) > strtotime($tr_sapv_fall_days[28])){
    				                    $fall_remaining_days[$fall_nr][] = $d;
    				                }
    				            }
    				            
    				            if(count($fall_remaining_days[$fall_nr]) < 29){
    				                //skip
    				                
    				            } else {
    				                
    				                $esdays = array();
    				                foreach($valid_erst_sapv_starts as $k=>$se_dates_arr){
    				                    foreach($se_dates_arr as $sk=>$se_date){
    				                        if( in_array($se_date, $fall_remaining_days[$fall_nr]))
    				                        {
    				                            $esdays[$se_date][] = $se_date;
    				                            
    				                            foreach($fall_remaining_days[$fall_nr] as $kl=>$ftrd){
    				                                if( strtotime($ftrd) > strtotime($se_date) && !in_array($ftrd,$esdays[$se_date]) && count($esdays[$se_date] )< 29){
    				                                    $esdays[$se_date][] = $ftrd;
    				                                }
    				                            }
    				                            $patient_29th_days[$ipid][] = $esdays[$se_date][28];// starts with key 0
    				                        }
    				                    }
    				                }
    				            }
    				        }
    				        //If it is a following fall - we check if the we have ERST and we start counting from it  
    				        elseif($fall_nr > 0){
    				            $esdays = array();
    				            foreach($valid_erst_sapv_starts as $k=>$se_dates_arr){
    				                foreach($se_dates_arr as $sk=>$se_date){
    				                    
        				                if( in_array($se_date, $fall_sapv_treatment_days[$ipid][$fall_nr]))
        				                {
        				                    $esdays[$se_date][] = $se_date;
        				                    
        				                    foreach($fall_sapv_treatment_days[$ipid][$fall_nr] as $kl=>$ftrd){
        				                        if( strtotime($ftrd) > strtotime($se_date) && !in_array($ftrd,$esdays[$se_date]) && count($esdays[$se_date] )< 29){
        				                            $esdays[$se_date][] = $ftrd;
        				                        }
        				                    }
        				                    $patient_29th_days[$ipid][] = $esdays[$se_date][28];// starts with key 0
        				                }
    				                }
    				            }
    				        }
    				    }
    				}
				    //TODO-3724 Ancuta 21-25.01.2021 END
    				
				}
				//ISPC-2478 Ancuta 27.10.2020 END
				
				//TODO-3743 Ancuta 25.01.2021 $beck_array
				$beck_array[$ipid][] = $pat_treatment_days[0];
				foreach($all_valid_erst_sapv_starts[$ipid] as $k=>$pm_day){
				    
				    $last_beck = end($beck_array[$ipid]);
				    $per_sapv_start_dates[$ipid][$pm_day] = PatientMaster::getDaysInBetween($last_beck, date('Y-m-d',strtotime($pm_day)) ,null,"Y-m-d");
				    
				    if(count($per_sapv_start_dates[$ipid][$pm_day]) > 28){
				        $beck_array[$ipid][] = date('Y-m-d',strtotime($pm_day));
				    }
				    
				}
				//-- 
				
				
				// --- 
				if($_REQUEST['dbgfl'])
				{
					array_walk($fl_days, function(&$value) {
						$value = date('Y-m-d', $value);
					});

					print_r("flatrate_treatment_days\n");
					print_r($flatrate_treatment_days);

					print_r("fl_days\n");
					print_r($fl_days);
					//print_r($patient_days);
					exit;
				}
				//get FLATRATE DAYS - END
				
				foreach($selected_month_days as $k_day => $v_day)
				{
					if(in_array($v_day, $curent_month_sapv_days) && in_array(date('d.m.Y',strtotime($v_day)), $patient_days[$ipid]['real_active_days'])   )
					{
						foreach($shortcuts_arr as $k_short => $v_short)
						{
							if(in_array($v_short, $visits_shortcuts))
							{
								//handle visitable shortcuts here
								//stop if day is in flatrate days
								//reverted ISPC-1131 - show visits in flatrate days

								if(count($contact_forms[$v_day][$v_short]) > '0')
								{
									$master_data[$v_day][$v_short]['checked'] = '1';
									$master_data[$v_day][$v_short]['qty'] = count($contact_forms[$v_day][$v_short]);
								}
								else
								{
									$master_data[$v_day][$v_short]['checked'] = '0';
									$master_data[$v_day][$v_short]['qty'] = '0';
								}

								//add to totals
								$master_data['totals'][$v_short] += $master_data[$v_day][$v_short]['checked'];

								//add to custom overall totals
								if(
								       $v_short == 'sh_nur_non_hospiz_visits' 
								    || $v_short == 'sh_doc_non_hospiz_visits'
								    || $v_short == 'sh_other_visits'
								    )
								{
									//Anzahl Tagespauschale - total days doc/nurse non hospiz
									if($master_data[$v_day][$v_short]['checked'] == '1')
									{
										$master_overall_data['overall_doc_nur_non_hospiz'][] = $v_day;
										$master_overall_data['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data['overall_doc_nur_non_hospiz']));
									}
								}
								else if($v_short == 'sh_nur_hospiz_visits' || $v_short == 'sh_doc_hospiz_visits')
								{
									//Tagespauschalen Hospiz - total visits doc/nurse in hospiz
									if($master_data[$v_day][$v_short]['checked'] == '1')
									{
										$master_overall_data['overall_doc_nur_hospiz'][] = $v_day;
										$master_overall_data['overall_doc_nur_hospiz'] = array_unique(array_values($master_overall_data['overall_doc_nur_hospiz']));
									}
								}

								$master_data['custom_totals']['overall_doc_nur_non_hospiz'] = count($master_overall_data['overall_doc_nur_non_hospiz']);
								$master_data['custom_totals']['overall_doc_nur_hospiz'] = count($master_overall_data['overall_doc_nur_hospiz']);
							}
							else
							{
								//handle the rest of shortcuts here
								if($v_short == 'sh_beko')
								{
									//if(strtotime($v_day) == strtotime($pat_treatment_days[0]))
									//TODO-3743 Ancuta 25.01.2021 $beck_array
									if(in_array($v_day,$beck_array[$ipid]))
									{
										$master_data[$v_day][$v_short]['checked'] = '1';
										$master_data[$v_day][$v_short]['qty'] = '1';
									}
									else
									{
										$master_data[$v_day][$v_short]['checked'] = '0';
										$master_data[$v_day][$v_short]['qty'] = '0';
									}

									$master_data['custom_totals']['overall_beko'] += $master_data[$v_day][$v_short]['qty'];
								}

								if($v_short == 'sh_folgeko')
								{
								    if($fisrt_Sapv_trigger_flatrate){//TODO-3724 Ancuta 21-25.01.2021 Start
								        
    								    if(in_array(date('d.m.Y',strtotime($v_day)), $patient_29th_days[$ipid]))
    									{
    										$master_data[$v_day][$v_short]['checked'] = '1';
    										$master_data[$v_day][$v_short]['qty'] = '1';
    									}
    									else
    									{
    										$master_data[$v_day][$v_short]['checked'] = '0';
    										$master_data[$v_day][$v_short]['qty'] = '0';
    									}
    
    									$master_data['custom_totals']['overall_folgeko'] += $master_data[$v_day][$v_short]['qty'];
								        
								        
								    } else{

    								    if(count($treated_days_all_ts) >= '26' && strtotime($v_day) == $treated_days_all_ts[28] )
    									{
    										$master_data[$v_day][$v_short]['checked'] = '1';
    										$master_data[$v_day][$v_short]['qty'] = '1';
    									}
    									else
    									{
    										$master_data[$v_day][$v_short]['checked'] = '0';
    										$master_data[$v_day][$v_short]['qty'] = '0';
    									}
    
    									$master_data['custom_totals']['overall_folgeko'] += $master_data[$v_day][$v_short]['qty'];
								        
								    }
								    
								    
								}

								if($v_short == 'sh_flatrate')
								{
									if(!empty($fl_days))
									{
										if(in_array(strtotime($v_day), $fl_days))
										{
											$master_data[$v_day][$v_short]['checked'] = '1';
											$master_data[$v_day][$v_short]['qty'] = '1';

											//append flatrate into the Anzahl Tagespauschale
											$master_overall_data['overall_doc_nur_non_hospiz'][] = $v_day;
											$master_overall_data['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data['overall_doc_nur_non_hospiz']));
										}
										else
										{
											$master_data[$v_day][$v_short]['checked'] = '0';
											$master_data[$v_day][$v_short]['qty'] = '0';
										}
									}
									else
									{
										$master_data[$v_day][$v_short]['checked'] = '0';
										$master_data[$v_day][$v_short]['qty'] = '0';
									}
								}

								//added limit to shown/calculate phones only in days with no Anzahl Tagepauschale triggered(has visit and/or flatrate)
								// TODO-2957 Ancuta 02.03.2020  
								// #1)  do not count phone, even if it si done during visit in hospiz 
								// #2) If patient it is in hospiz location, max amount per day it is  1, if  NOT in hospiz, max amount is 2
								if($v_short == 'sh_telefonat')
								{
// 								    $patient_data['hospitail_days_cs']
									$qty_limit = '0';

								    //TODO-2957 Ancuta 28.02.2020  #1) 									
									if(!in_array($v_day, $master_overall_data['overall_doc_nur_non_hospiz']) && !in_array(strtotime($v_day), $fl_days) && !in_array(date("d.m.Y",strtotime($v_day)), $patient_data['hospitail_days_cs']) && !in_array($v_day, $master_overall_data['overall_doc_nur_hospiz']) )
									{
									    //TODO-2957 Ancuta 28.02.2020  #2) 
									    $sh_telefonat_max_amount = 2;
									    if(in_array(date("d.m.Y",strtotime($v_day)), $patient_data['hospiz_days_cs'] )){
									        $sh_telefonat_max_amount = 1;
									    }
										//changed to show maximum 2 phones (same way as it was calculated)
									    if(count($patient_phones[$v_day][$v_short]) >= $sh_telefonat_max_amount)
										{
										    $qty_limit = $sh_telefonat_max_amount;
										}
										else
										{
											$qty_limit = count($patient_phones[$v_day][$v_short]);
										}

										if(count($patient_phones[$v_day][$v_short]) > '0')
										{
											$master_data[$v_day][$v_short]['checked'] = '1';
											$master_data[$v_day][$v_short]['qty'] = $qty_limit;
										}
										else
										{
											$master_data[$v_day][$v_short]['checked'] = '0';
											$master_data[$v_day][$v_short]['qty'] = '0';
										}
									}
									else
									{
										$master_data[$v_day][$v_short]['checked'] = '0';
										$master_data[$v_day][$v_short]['qty'] = '0';
									}

									//Anzahl Telefonpauschale - total phones with limit per day of 2 qty
									$master_data['custom_totals']['overall_phones'] += $qty_limit;
								}

								//add to totals
								$master_data['totals'][$v_short] += $master_data[$v_day][$v_short]['qty'];
							}

							$master_data['custom_totals']['overall_doc_nur_non_hospiz'] = count($master_overall_data['overall_doc_nur_non_hospiz']);
							$master_data['custom_totals']['overall_doc_nur_hospiz'] = count($master_overall_data['overall_doc_nur_hospiz']);
						}
					}
				}

				//rest of gathered data here
				$master_data['dead_sapv_date'] = $dead_sapv_date;
				$master_data['raapv_sapv_date'] = $raapv_sapv_date;
				$master_data['khws_sapv_date'] = $khws_sapv_date;
				$master_data['stathospiz_sapv_date'] = $stathospiz_sapv_date;
				$master_data['pwunsch_sapv_date'] = $pwunsch_sapv_date;
				
			
				if($_REQUEST['mas'] == '1'){
				    print_R($master_data);
				    exit;
				}
				
				$this->view->master_data = $master_data;
			}
			
			//load saved data and create master data array END
		}

		
		
		
		public function nrbillingformAction()
		{
		    $client =  new Client();
		    $client_data = $client->findOneById($this->clientid);
		    
		    $frm = new ExtraForms();
		    $clientForms = $frm->get_client_forms($this->logininfo->clientid);
		    
		    $modules =  new Modules();
		    $clientModules = $modules->get_client_modules($this->logininfo->clientid);
		    
			$clientid = $this->logininfo->clientid;
			$userid = $this->logininfo->userid;
			
		    
			$decid = $this->dec_id ;
			$ipid = Pms_CommonData::getIpId($decid);
			

			if (empty($ipid)) {
			    $this->redirect(APP_BASE . 'error/previlege');
			    exit;
			}
			
			
			setlocale(LC_ALL, 'de_DE');
			$sapv = new SapvVerordnung();
			$client_details = Pms_CommonData::getClientData($clientid);

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$this->view->first_name = $patientinfo['first_name'];
			$this->view->last_name = $patientinfo['last_name'];
			$this->view->birthd = $patientinfo['birthd'];

			//user data
			$user = User::getUserDetails($userid);
	 
			if($client_details)
			{
				$this->view->betriebsstatten_nr = $client_details[0]['betriebsstattennummer'];
				$this->view->sapv_team = $client_details[0]['team_name'];
			}

			
			//patient days
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);

			//beware of date d.m.Y format here
			$patient_days = Pms_CommonData::patients_days($conditions);

			
			//get number of days in each month + start/end day START
			foreach($patient_days[$ipid]['active_periods'] as $k_period => $v_period)
			{
				$last_active = end($patient_days[$ipid]['active_periods']);
				if($v_period['end'] == $last_active['end'])
				{
					$v_period['end'] = date('Y-m-d', strtotime($v_period['end']));
				}
				$months = Pms_CommonData::get_period_months($v_period['start'], $v_period['end'], 'Y-m');
				if(empty($patient_active_months))
				{
					$patient_active_months = array();
				}
				$patient_active_months = array_merge($patient_active_months, $months);
			}

			$patient_active_months = array_values($patient_active_months);

			foreach($patient_active_months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}

			//get number of days in each month + start/end day END
			
			// get hospital days
			if(!empty($patient_days[$ipid]['hospital']['real_days_cs'])){
    			$patient_data['hospitail_days_cs'] = $patient_days[$ipid]['hospital']['real_days_cs'];
			} else{
    			$patient_data['hospitail_days_cs']  = array("9999999999");
			}
			
			//check if a month is selected START
			if(empty($_REQUEST['list']))
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$attrs['onChange'] = 'changeMonth(this.value);';

			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$this->view->current_period = $current_period;
			$this->view->month_year = strftime('%B %Y', strtotime($current_period['start']));

			//get selected month days
			if($months_details[$selected_month])
			{
				$selected_month_days = $patientmaster->getDaysInBetween($months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
			}
			$this->view->selected_month_days = $selected_month_days;

 
			$nr_billing_obj = new NordrheinBilling();
			$billable_actions = $nr_billing_obj->nr_billable_actions($clientid,array($ipid),$current_period);
			   

			if(!empty($billable_actions['invoices'][$ipid]))
			{
			    
			    $master_data_all = $billable_actions['invoices'][$ipid];
			    
			    $master_data = array();
			    foreach($master_data_all as $date =>$values){
			        $master_data[date("Y-m-d",strtotime($date))] = $values; 
			    }
			    
			    $this->view->master_data = $master_data;
			}

			
			$shortcuts_arr = InvoiceSystem::invoice_products('nr_invoice');

			//get client national hollidays
			$nhollyday = new NationalHolidays();
			$national_holidays_arr = $nhollyday->getNationalHoliday($clientid, $current_period['start'], true);

			foreach($national_holidays_arr as $k_natholliday => $v_natholliday)
			{
				$national_holidays[] = strtotime(date('Y-m-d', strtotime($v_natholliday['NationalHolidays']['date'])));
			}

			$this->view->national_holidays = $national_holidays;

			$this->view->shortcuts = $shortcuts_arr;
			$this->view->excluded_shortcuts = $excluded_shortcuts;

			$this->view->patient_first_name = $patientinfo['first_name'];
			$this->view->patient_last_name = $patientinfo['last_name'];
			$this->view->patient_dob = $patientinfo['birthd'];

			//patient HEALTH INSURANCE START
			//patient health insurance
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$this->view->hi_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			//patient HEALTH INSURANCE END
			
			
			// sapv
			//get sapv data START
			$sapv_array = SapvVerordnung::get_patients_sapv_periods(array($ipid),true);
			
			$patients2highest_sapv = array();
			$patients2sapv_type = array();
			foreach($sapv_array as $sapv_ipid => $sapv_item)
			{
			    foreach($sapv_item as $sapv_id => $sapv_data)
			    {
			        foreach($sapv_data['days'] as $ks => $s_day)
			        {
			            $patient_days[$sapv_ipid]['sapv_days'][] = date("Y-m-d",strtotime($s_day));
			            $patient_days[$sapv_ipid]['sapv_days'][] = $s_day;
			        }
			    }
			}
			
			$this->view->sapv_days = $patient_days[$ipid]['sapv_days'];
						
			$saved_period[$ipid] = $months_details[$selected_month]; 
			$saved_values = array();
			$saved_values = $nr_billing_obj->saved_data(array($ipid),$saved_period);
			
			if(!empty($saved_values))
			{
			    $this->view->has_data = '1';
			}

			$this->view->real_active_days = $patient_days[$ipid]['real_active_days'];
			$this->view->hospital_days = $patient_days[$ipid]['hospital']['real_days_cs'];
				
			
			//POST START
			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['clientid'] = $clientid;
				$post['curent_month'] = $months_details[$selected_month]['start'];
				$post['selected_month_days'] = $selected_month_days;
				$post['current_period'] = $current_period;
				$post['shortcuts'] = $shortcuts_arr;
				$post['excluded_shortcuts'] = $excluded_shortcuts;

				$post['national_holidays'] = $national_holidays;
				$post['patient_last_name'] = $patientinfo['last_name'];
				$post['patient_first_name'] = $patientinfo['first_name'];
				$post['patient_dob'] = $patientinfo['birthd'];

				$post['hi_company_name'] = $healthinsu_array[0]['company_name'];
				$post['insurance_no'] = $healthinsu_array[0]['insurance_no'];

				$post['start_date_erst'] = $start_first_sapv;
				$post['start_date_folge'] = $start_following_sapv;

				$post['betriebsstatten_nr'] = $client_details[0]['betriebsstattennummer'];
				$post['sapv_team'] = $client_details[0]['team_name'];


				$nordrhein_billing_form = new Application_Form_NordrheinBilling();

				if($_POST['form_action'] == "save")
				{
					//save submited data and redirect to form
					$save_form = $nordrhein_billing_form->insert_data($ipid, $post, $this->view->shortcuts, $selected_month_days);
					if($_REQUEST['list'])
					{
						$list_url = '&list=' . $_REQUEST['list'];
					}
					else
					{
						$list_url = '';
					}
					$this->redirect(APP_BASE . 'patientformnew/nrbillingform?id=' . $_REQUEST['id'] . $list_url);
					exit;
				}
				else if($_POST['form_action'] == "pdf")
				{
					//create pdf master data from posted data START
					
					$post_master_data['real_active_days'] = $this->view->real_active_days;
					$post_master_data['hospital_days'] = $this->view->hospital_days;

					$post['master_data'] = $post_master_data;
					$post['master_data_full'] = $master_data;
					
					$gen_pdf = $this->generate_pdf($post, 'nrbillingform', 'nrbillingform_pdf.html');
					//create pdf master data from posted data END
				}
				else if($_POST['form_action'] == "reset")
				{
					//reset saved data and redirect to same form
					$nordrhein_billing_form->clear_form_data($clientid, $ipid, $months_details[$selected_month]['start']);

					$this->redirect(APP_BASE . 'patientformnew/nrbillingform?id=' . $_REQUEST['id'] . '&list=' . date('Y-m', strtotime($months_details[$selected_month]['start'])));
					exit;
				}
			}
			//POST END
		}

		public function mappeAction()
		{
			setlocale(LC_ALL, 'de_DE');
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$userid = $logininfo->userid;

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			if($this->getRequest()->isPost())
			{
				if($_POST['generate_mappe'])
				{
					$this->_redirect(APP_BASE . 'patientformnew/shfilesmacro?id=' . $_REQUEST['id']);
					exit;
				}
			}
		}

		public function shfilesmacroAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$this->_helper->layout->setLayout('layout_ajax');
			$this->_helper->viewRenderer->setNoRender();

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patient_epid = strtoupper(Pms_CommonData::getEpid($ipid));
			$userid = $logininfo->userid;
			$sapv = new SapvVerordnung();
			$this->view->folder_stamp = time();
 

			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);

//			/1. SH Deckblatt - ISPC-1075 START
			$post['shwrapper']['patient_only_name'] = $patientinfo['last_name'] . ", " . $patientinfo['first_name'];
			$post['patient_address_data'] = $patientinfo;

			//get client phones
			$client_data = new Client();
			$client_details = $client_data->getClientDataByid($clientid);

			$emergency_nr = array('0' => '', '1' => '');
			if(!empty($client_details[0]['emergencynr_a']) && strlen(trim(rtrim($client_details[0]['emergencynr_a']))) != '0')
			{
				$emergency_nr[0] = $client_details[0]['emergencynr_a'];
			}

			if(!empty($client_details[0]['emergencynr_b']) && strlen(trim(rtrim($client_details[0]['emergencynr_b']))) != '0')
			{
				$emergency_nr[1] = $client_details[0]['emergencynr_b'];
			}

			$post['shwrapper']['emergency_nr'] = $emergency_nr;
//save pdf as file
			$files[] = $this->generate_joined_files_pdf(4, $post['shwrapper'], 'shwrapper', "shwrapper_pdf.html");
			//1. SH Deckblatt - ISPC-1075 END
			//2. SH Anlage 15 - ISPC-1074 START
			$post['anlage15']['kv_header']['patientname'] = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] . " \r\n " . $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "&nbsp;" . $patientinfo['city'];
			$post['anlage15']['kv_header']['birthdate'] = $patientinfo['birthd'];
			$post['anlage15']['kv_header']['patbirth'] = $patientinfo['birthd'];

			//red box data #1
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);

			$post['anlage15']['kv_header']['insurance_company_name'] = $healthinsu_array[0]['company_name'];
			$post['anlage15']['kv_header']['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			$post['anlage15']['kv_header']['insurance_status'] = $healthinsu_array[0]['insurance_status'];
			$post['anlage15']['kv_header']['kvnumber'] = $healthinsu_array[0]['kvk_no'];

			//cityofclient
			$loguser = Doctrine::getTable('User')->find($userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
//				$this->view->lastname = $loguserarray['last_name'];
//				$this->view->firstname = $loguserarray['first_name'];
				$post['anlage15']['kv_header']['betriebsstatten_nr'] = $loguserarray['betriebsstattennummer'];
				$post['anlage15']['kv_header']['arzt_nr'] = $loguserarray['LANR'];
				$post['anlage15']['kv_header']['topdatum'] = date('d.m.Y', time());
			}
//save pdf as file
			$files[] = $this->generate_joined_files_pdf(4, $post['anlage15'], 'anlage15', "anlage15_pdf.html");
			//2. SH Anlage 15 - ISPC-1074 END
			//3. Muster 63 back side (print and pre print) - ISPC-998 START
			//get active SAPV
			$sav = new SapvVerordnung();
			$verordungdata = $sav->get_today_active_sapvs($ipid);
			if($verordungdata)
			{
				foreach($verordungdata as $kveror => $value)
				{
					$verordate['vom'] = $value['verordnungam'];
					$verordate['bis'] = $value['verordnungbis'];
				}
				$post['muster']['vom'] = date('d.m.Y', strtotime($verordate['vom']));
				$post['muster']['bis'] = date('d.m.Y', strtotime($verordate['bis']));
			}

			/* ---------- curent user stamp ----------------- */
			$user = $_REQUEST['stamp-info'];
			$userstatmp = UserStamp::getLastUserStamp($userid);
			$user_res = Doctrine::getTable('User')->find($userid);

			if($user_res)
			{
				$uarray = $user_res->toArray();
				//get user bsnr and lanr no matter if user has stamp or not
				$user_stamp_info = '';
				$user_stamp_info .= $uarray['betriebsstattennummer'] . "\n";
				$user_stamp_info .= $uarray['LANR'] . "\n";

				if(!empty($userstatmp))
				{
					$user_stamp_info .= $userstatmp[0]['row1'] . "\n";
					$user_stamp_info .= $userstatmp[0]['row2'] . "\n";
					$user_stamp_info .= $userstatmp[0]['row3'] . "\n";
					$user_stamp_info .= $userstatmp[0]['row4'] . "\n";
					$user_stamp_info .= $userstatmp[0]['row5'] . "\n";
					$user_stamp_info .= $userstatmp[0]['row6'] . "\n";
					$user_stamp_info .= $userstatmp[0]['row7'] . "\n";
				}
			}
			$post['muster']['stamp_block'] = $user_stamp_info;

			/* ------------------- Client Data--------------------------------------- */
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$post['muster']['clientname'] = $clientdata[0]['team_name'];
			$post['muster']['ggf_stempel'] = $clientdata[0]['team_name'];

			$post['muster']['client_address'] = $clientdata[0]['street1'] . ", " . $clientdata[0]['postcode'] . " " . $clientdata[0]['city'];
			$post['muster']['anschrift_ggf_stempel'] = $clientdata[0]['street1'] . ", " . $clientdata[0]['postcode'] . " " . $clientdata[0]['city'];

			$post['muster']['client_iknr'] = $clientdata[0]['institutskennzeichen'];
			$post['muster']['institutionskennzeichen'] = $clientdata[0]['institutskennzeichen'];

			$post['muster']['client_pr'] = $clientdata[0]['lastname'] . ", " . $clientdata[0]['firstname'];
			$post['muster']['ansprechpartner'] = $clientdata[0]['lastname'] . ", " . $clientdata[0]['firstname'];

			$post['muster']['client_phone'] = $clientdata[0]['phone'];
			$post['muster']['telefonnummer'] = $clientdata[0]['phone'];

			$post['muster']['client_fax'] = $clientdata[0]['fax'];
			$post['muster']['fax_nummer'] = $clientdata[0]['fax'];

			$post['muster']['client_email'] = $clientdata[0]['emailid'];
			$post['muster']['e_mail'] = $clientdata[0]['emailid'];

			$post['muster']['twodatum'] = date('d.m.Y', time());
			$post['muster']['threedatum'] = date('d.m.Y', time());
//save pdf as file
			$files[] = $this->generate_joined_files_pdf(4, $post['muster'], 'verordnungtpside_pre', "verordnungtpside_pre_pdf.html");
			$files[] = $this->generate_joined_files_pdf(4, $post['muster'], 'verordnungtpside', "verordnungtpsidepdf.html");
			//3. Muster 63 back side (print and pre print) - ISPC-998 END
			//4. SH Durchführungsnachweis - ISPC-1079 START

			$post['shimplementationproof']['first_name'] = $patientinfo['first_name'];
			$post['shimplementationproof']['last_name'] = $patientinfo['last_name'];
			$post['shimplementationproof']['birthd'] = $patientinfo['birthd'];


			$nhollyday = new NationalHolidays();
			$national_holidays_arr = $nhollyday->getNationalHoliday($clientid, $current_period['start'], true);

			foreach($national_holidays_arr as $k_natholliday => $v_natholliday)
			{
				$national_holidays[] = date('d.m.Y', strtotime($v_natholliday['NationalHolidays']['date']));
			}

			$post['shimplementationproof']['national_holidays'] = $national_holidays;


			//patient days
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
			//beware of date d.m.Y format here
			$patient_days = Pms_CommonData::patients_days($conditions);

			//get number of days in each month + start/end day START
			foreach($patient_days[$ipid]['active_periods'] as $k_period => $v_period)
			{
				$last_active = end($patient_days[$ipid]['active_periods']);
				if($v_period['end'] == $last_active['end'])
				{
					$v_period['end'] = date('Y-m-d', strtotime('+1 month', strtotime($v_period['end'])));
				}
				$months = $this->get_period_months($v_period['start'], $v_period['end'], 'Y-m');
				if(empty($patient_active_months))
				{
					$patient_active_months = array();
				}
				$patient_active_months = array_merge($patient_active_months, $months);
			}

			$patient_active_months = array_values($patient_active_months);

			foreach($patient_active_months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}

			//get number of days in each month + start/end day END
			//check if a month is selected START
			if(empty($_REQUEST['list']))
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$attrs['onChange'] = 'changeMonth(this.value);';
//			$attrs['class'] = 'select_month_hospiz_performance';
//			$this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$post['shimplementationproof']['current_period'] = $current_period;
			$post['shimplementationproof']['month_year'] = strftime('%B %Y', strtotime($current_period['start']));

			//get selected month days
			if($months_details[$selected_month])
			{
				$selected_month_days = $patientmaster->getDaysInBetween($months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
			}

			//format array days to d.m.Y
			array_walk($selected_month_days, function(&$value) {
				$value = date("d.m.Y", strtotime($value));
			});

//			$post['shimplementationproof']['shortcuts'] = array(
//				'usage_1', 'usage_2', 'usage_3', 'usage_4', 'usage_5',
//				'spacer', 'bowel_movement',
//				'palliative_measures_spacer', 'medi_materials_order',
//				'spacer', 'resp_stimulating_liniments',
//				'spacer', 'basal_stimulation');
            // NOT USED
			$post['shimplementationproof']['shortcuts_old'] = array(
				'usage_1', 'usage_2', 'usage_3', 'usage_4', 'usage_5',
				'spacer', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'
			);
			// USED ISPC-2207 11.06.2018 
			$post['shimplementationproof']['shortcuts'] = array(
				'usage_1_new',
			    'spacer',
			    'sh_title',
			    'spacer',
			    'sh_bowel movement',
			    'sh_symptom control',
			    'sh_control material',
			    'sh_order_marerial',
			    'empty','empty', 'empty','empty', 'empty','empty', 'empty', 'empty', 'empty'
			);

			$post['shimplementationproof']['selected_month_days'] = $selected_month_days;
//save pdf as file
			$files[] = $gen_pdf = $this->generate_joined_files_pdf('4', $post['shimplementationproof'], 'shimplementationproof', 'shimplementationproof_pdf.html');
			//4. SH Durchführungsnachweis - ISPC-1079 END
			//5. SH Anlage 14 - ISPC-1080 START
			//reset some vars which are used in both 1079 and 1080!!!!
			unset($v_period);
			unset($patient_active_months);
			unset($month_days);
			unset($months);
			unset($months_details);
			unset($selected_month);
			unset($current_period);
			unset($month_select_array);

			$post['shanlage14']['first_name'] = $patientinfo['first_name'];
			$post['shanlage14']['last_name'] = $patientinfo['last_name'];
			$post['shanlage14']['birthd'] = $patientinfo['birthd'];

			//user data
			$user = User::getUserDetails($userid);

			if($client_details)
			{
				$post['shanlage14']['betriebsstatten_nr'] = $client_details[0]['betriebsstattennummer'];
				$post['shanlage14']['sapv_team'] = $client_details[0]['team_name'];
			}

//			these are loaded in 1079 first!!!
//			//patient days
//			$conditions['periods'][0]['start'] = '2009-01-01';
//			$conditions['periods'][0]['end'] = date('Y-m-d');
//			$conditions['client'] = $clientid;
//			$conditions['ipids'] = array($ipid);
//
//			//beware of date d.m.Y format here
//			$patient_days = Pms_CommonData::patients_days($conditions);
			//get number of days in each month + start/end day START
			foreach($patient_days[$ipid]['active_periods'] as $k_period => $v_period)
			{
				$last_active = end($patient_days[$ipid]['active_periods']);
				if($v_period['end'] == $last_active['end'])
				{
					$v_period['end'] = date('Y-m-d', strtotime($v_period['end']));
				}
				$months = Pms_CommonData::get_period_months($v_period['start'], $v_period['end'], 'Y-m');
				if(empty($patient_active_months))
				{
					$patient_active_months = array();
				}
				$patient_active_months = array_merge($patient_active_months, $months);
			}

			$patient_active_months = array_values($patient_active_months);

			foreach($patient_active_months as $k_month => $v_month)
			{
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
				}

				$months_details[$v_month]['start'] = $v_month . "-01";
				$months_details[$v_month]['days_in_month'] = $month_days;
				$months_details[$v_month]['end'] = $v_month . '-' . $month_days;

				$month_select_array[$v_month] = $v_month;
			}

			//get number of days in each month + start/end day END
			//check if a month is selected START
			if(empty($_REQUEST['list']))
			{
				$selected_month = end($month_select_array);
			}
			else
			{
				$selected_month = $month_select_array[$_REQUEST['list']];
			}

			$attrs['onChange'] = 'changeMonth(this.value);';
//			$attrs['class'] = 'select_month_hospiz_performance';
			//set current period to work with
			$current_period = $months_details[$selected_month];
			$post['shanlage14']['current_period'] = $current_period;
			$post['shanlage14']['month_year'] = strftime('%B %Y', strtotime($current_period['start']));

			//get selected month days
			if($months_details[$selected_month])
			{
				$selected_month_days = $patientmaster->getDaysInBetween($months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
			}
			$post['shanlage14']['selected_month_days'] = $selected_month_days;

			$shortcuts_arr = array(
				'sh_beko',
				'sh_folgeko',
				'sh_doc_non_hospiz_visits',
				'sh_nur_non_hospiz_visits',
				'sh_other_visits',
				'sh_doc_hospiz_visits',
				'sh_telefonat',
				'sh_flatrate',
				//used only in custom totals
				'sh_nur_visits',
				'sh_nur_hospiz_visits',
			);

			$visits_shortcuts = array(
				'sh_doc_non_hospiz_visits',
				'sh_nur_non_hospiz_visits',
				'sh_other_visits',
				'sh_doc_hospiz_visits',
				//used only in custom totals
				'sh_nur_hospiz_visits',
				'sh_nur_non_hospiz_visits',
			);

			//shortcuts calculated internaly but not shown in view
			$excluded_shortcuts = array(
				'sh_nur_visits',
				'sh_nur_hospiz_visits',
			);

			$post['shanlage14']['shortcuts'] = $shortcuts_arr;
			$post['shanlage14']['excluded_shortcuts'] = $excluded_shortcuts;
			
			$post['shanlage14']['patient_first_name'] = $patientinfo['first_name'];
			$post['shanlage14']['patient_last_name'] = $patientinfo['last_name'];
			$post['shanlage14']['patient_dob'] = $patientinfo['birthd'];

			//patient HEALTH INSURANCE START
			//patient health insurance
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			$post['shanlage14']['hi_company_name'] = $healthinsu_array[0]['company_name'];
			$post['shanlage14']['insurance_no'] = $healthinsu_array[0]['insurance_no'];
			//patient HEALTH INSURANCE START
			//get patient hospital location in curent period START

			$patient_locations = new PatientLocation();
			$patient_period_locations = $patient_locations->get_period_locations($ipid, $months_details[$selected_month], '1');

			$format = 'd.m.Y';
			foreach($patient_period_locations as $k_loc => $v_loc)
			{
				$pat_hosp['start'] = date($format, strtotime($v_loc['valid_from']));

				if($v_loc['valid_till'] == '0000-00-00 00:00:00')
				{
					$pat_hosp['end'] = date($format, time());
				}
				else
				{
					$pat_hosp['end'] = date($format, strtotime($v_loc['valid_till']));
				}

				$pat_hosp_period[] = $pat_hosp;
			}

			$this->view->patient_hospitals = $pat_hosp_period;
			$post['shanlage14']['patient_hospitals'] = $pat_hosp_period;
			//get patient hospital location in curent period END
			//patient SAPV START
			//get patient first sapv from date if the curent month sapv is the first sapv
			$patient_first_sapv = $sapv->get_patient_first_sapv($ipid);

			if($patient_first_sapv)
			{
				$first_sapv_id = $patient_first_sapv[0]['id'];
				$sapv_start = date('Y-m-d', strtotime($patient_first_sapv[0]['verordnungam']));
				$sapv_end = date('Y-m-d', strtotime($patient_first_sapv[0]['verordnungbis']));

				if(Pms_CommonData::isintersected(strtotime($sapv_start), strtotime($sapv_end), strtotime($months_details[$selected_month]['start']), strtotime($months_details[$selected_month]['end'])))
				{
					$start_first_sapv = date('d.m.Y', strtotime($patient_first_sapv[0]['verordnungam']));
				}
				else
				{
					$start_first_sapv = '-';
				}

				$this->view->start_date_erst = $start_first_sapv;
				$post['shanlage14']['start_date_erst'] = $start_first_sapv;
			}

			//get patient sapvs but not the first one(following sapv)
			$patient_following_sapv = $sapv->get_patient_following_sapvs($ipid, $first_sapv_id);

			if($patient_following_sapv)
			{
				$first_follower = false;

				foreach($patient_following_sapv as $k_sapv => $v_sapv_data)
				{
					if($first_follower === false)
					{
						$sapv_start = date('Y-m-d', strtotime($v_sapv_data['verordnungam']));
						$sapv_end = date('Y-m-d', strtotime($v_sapv_data['verordnungbis']));

						if(Pms_CommonData::isintersected(strtotime($sapv_start), strtotime($sapv_end), strtotime($months_details[$selected_month]['start']), strtotime($months_details[$selected_month]['end'])))
						{
							$start_following_sapv = date('d.m.Y', strtotime($v_sapv_data['verordnungam']));
							$first_follower === true;
						}
						else
						{
							$start_following_sapv = '-';
						}
					}
				}

				$this->view->start_date_folge = $start_following_sapv;
				$post['shanlage14']['start_date_folge'] = $start_following_sapv;
			}
			//patient SAPV END
			//get last sapv START
			$last_sapv = $sapv->get_patient_last_sapv($ipid);
			//get last sapv END
			//patient discharged dead START
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$todarray = $distod->fetchArray();

			$tod_ids[] = "9999999999999";
			foreach($todarray as $k_tod => $tod_method)
			{
				$tod_ids[] = $tod_method['id'];
			}

			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $tod_ids);
			$discharged_tod_res = $dispat->fetchArray();


			$discharge_death_date = array();
			if($discharged_tod_res)
			{
			    $discharge_death_date[$ipid] = $discharged_tod_res[0]['discharge_date'];
				if($last_sapv)
				{
					$dead_sapv_date = date('d.m.Y', strtotime($last_sapv[0]['verordnungbis']));
				}
				else
				{
					$dead_sapv_date = '';
				}
			}
			else
			{
				$dead_sapv_date = '';
			}
			//patient discharged dead END

			$dis_methods = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0")
				->andWhere("clientid=" . $clientid . " and (abbr = 'RAAPV' or abbr = 'Raapv' or abbr='raapv' OR abbr = 'KHWS' or abbr = 'khws' or abbr =' Khws' OR abbr = 'STATHOSPIZ' or abbr = 'Stathospiz' or abbr='stathospiz' OR abbr = 'PWUNSCH' or abbr = 'Pwunsch' or abbr='pwunsch')");
			$dis_methods_res = $dis_methods->fetchArray();

			if($dis_methods_res)
			{
				foreach($dis_methods_res as $k_dis_method => $v_dis_method)
				{
					$discharge_methods_arr[strtolower($v_dis_method['abbr'])][] = $v_dis_method['id'];
				}
			}

			//patient discharged returned AAPV (Rückführung AAPV) START
			$discharge_methods_arr['raapv'][] = '999999999999';
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $discharge_methods_arr['raapv']);
			$discharged_raapv_res = $dispat->fetchArray();


			if($discharged_raapv_res)
			{
				if($last_sapv)
				{
					$raapv_sapv_date = date('d.m.Y', strtotime($last_sapv[0]['verordnungbis']));
				}
				else
				{
					$raapv_sapv_date = '';
				}
			}
			else
			{
				$raapv_sapv_date = '';
			}
			//patient discharged returned AAPV (Rückführung AAPV) END
			//patient discharged hospitalization (Krankenhauseinweisung) START
			$discharge_methods_arr['khws'][] = '999999999999';
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $discharge_methods_arr['khws']);
			$discharged_khws_res = $dispat->fetchArray();

			if($discharged_khws_res)
			{
				if($last_sapv)
				{
					$khws_sapv_date = date('d.m.Y', strtotime($last_sapv[0]['verordnungbis']));
				}
				else
				{
					$khws_sapv_date = '';
				}
			}
			else
			{
				$khws_sapv_date = '';
			}
			//patient discharged hospitalization (Krankenhauseinweisung) END
			//patient discharged inhospice (stationäres Hospiz) START
			$discharge_methods_arr['stathospiz'][] = '999999999';
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $discharge_methods_arr['stathospiz']);
			$discharged_stathospiz_res = $dispat->fetchArray();

			if($discharged_stathospiz_res)
			{
				if($last_sapv)
				{
					$stathospiz_sapv_date = date('d.m.Y', strtotime($last_sapv[0]['verordnungbis']));
				}
				else
				{
					$stathospiz_sapv_date = '';
				}
			}
			else
			{
				$stathospiz_sapv_date = '';
			}
			//patient discharged inhospice (stationäres Hospiz) END
			//patient discharged "patient wish" (Patientenwunsch) START
			$discharge_methods_arr['pwunsch'][] = '999999999';
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where("ipid LIKE '" . $ipid . "'")
				->andWhereIn("discharge_method", $discharge_methods_arr['pwunsch']);
			$discharged_pwunsch_res = $dispat->fetchArray();

			if($discharged_pwunsch_res)
			{
				if($last_sapv)
				{
					$pwunsch_sapv_date = date('d.m.Y', strtotime($last_sapv[0]['verordnungbis']));
				}
				else
				{
					$pwunsch_sapv_date = '';
				}
			}
			else
			{
				$pwunsch_sapv_date = '';
			}
			//patient discharged "patient wish" (Patientenwunsch) END
			//get patient TELEFONAT (XT) START
			$tel_array = PatientCourse::get_patient_shortcuts_course($ipid, array('XT'), $months_details[$selected_month]);

			foreach($tel_array as $k_tel => $v_tel)
			{
				$v_tel_date = date('Y-m-d', strtotime($v_tel['done_date']));

				//$patient_phones[$v_tel_date]['sh_telefonat'][] = $v_tel;
				// REMOVE CONTACTS AFTER Death time
				if($v_tel_date == date('Y-m-d', strtotime($discharge_death_date[$ipid])) && strtotime(date('Y-m-d H:i:s', strtotime($v_tel['done_date']))) > strtotime($discharge_death_date[$ipid])){
				    // do not add
				}
				else{
				    $patient_phones[$v_tel_date]['sh_telefonat'][] = $v_tel;
				}
			}
			//get patient TELEFONAT (XT) END
			//get contact forms (ALL) START
			$contact_forms_all = $this->get_period_contact_forms($ipid, $months_details[$selected_month]);

			$current_form = array('shanlage14');
			$form_items = FormsItems::get_all_form_items($clientid, $current_form, 'v');

			foreach($form_items[$current_form[0]] as $k_item => $v_item)
			{
				$items_arr[] = $v_item['id'];
			}

			$items_contact_forms = Forms2Items::get_items_forms($clientid, $items_arr);

			// REMOVE CONTACTS AFTER Death time
			foreach($contact_forms_all as $kcf => $day_cfs)
			{
			    foreach($day_cfs as $k_dcf => $v_cf)
			    {
			        if(is_numeric($k_dcf) && !empty($discharge_death_date[$v_cf['ipid']]))
			        {
			            if(strtotime(date('Y-m-d H:i:s', strtotime($v_cf['start_date']))) > strtotime($discharge_death_date[$v_cf['ipid']]) && $patient_days[$v_cf['ipid']]['details']['isdischarged'] == '1'){
			
			                unset($contact_forms_all[$kcf][$k_dcf]);
			            }
			        }
			    }
			}			
			
			
			foreach($contact_forms_all as $kcf => $day_cfs)
			{
				foreach($day_cfs as $k_dcf => $v_dcf)
				{
					//format contact form date to fit the format used in patients_days()
					$day_cfs_formated = date('d.m.Y', strtotime($kcf));

					if(in_array($day_cfs_formated, $patient_days[$ipid]['real_active_days'])){
    					//all contact forms mapped with id as key
    					$contact_forms_details[$v_dcf['id']] = $v_dcf;
    					$contact_form_date = date('Y-m-d', strtotime($v_dcf['billable_date']));
    
    					if(
    					    in_array($v_dcf['form_type'], $items_contact_forms['sh_other_visits'])
    					    && (!in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs']) && !in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['real_days_cs']))
    					    )
    					{
    						//catch the contact forms added by users which belong to the client setting selected groups
    						$contact_forms[$contact_form_date]['sh_other_visits'][] = $v_dcf['id'];
    					}
    
    					if(in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']) || in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_non_hospiz_visits']))
    					{
    						//all doctor contactforms
    						$contact_forms[$contact_form_date]['doctor_all'][] = $v_dcf['id'];
    
    						//split doctors contact forms into 2 entities (hospiz and non-hospiz)
    						//TODO-3562 Carmen 06.11.2020
    						/* if((in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['days']) || in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['days'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']))
    						{ */
    						if((in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['days'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']))
    						{
    						//--	
    							$contact_forms[$contact_form_date]['sh_doc_hospiz_visits'][] = $v_dcf['id'];
    						}
    						else if((!in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['days']) && !in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['days'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_non_hospiz_visits']))
    						{
    							$contact_forms[$contact_form_date]['sh_doc_non_hospiz_visits'][] = $v_dcf['id'];
    						}
    					}
    
    					if(in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']) || in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_non_hospiz_visits']))
    					{
    						//all nurse contactforms
    						$contact_forms[$contact_form_date]['sh_nur_visits'][] = $v_dcf['id'];
    
    						//nurse contact forms in hospiz and non hospiz(non hospiz is used in "Anzahl Tagespauschale")
    						//TODO-3562 Carmen 06.11.2020
    						/* if((in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['days']) || in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['days'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']))
    						{ */
    						if((in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['days'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']))
    						{
    						//--
    							$contact_forms[$contact_form_date]['sh_nur_hospiz_visits'][] = $v_dcf['id'];
    						}
    						//nurse contact forms in hospiz and non hospiz(non hospiz is used in "Anzahl Tagespauschale")
    						else if((!in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['days']) && !in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['days'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_non_hospiz_visits']))
    						{
    							$contact_forms[$contact_form_date]['sh_nur_non_hospiz_visits'][] = $v_dcf['id'];
    						}
    					}
					}
				}
			}
			//get contact forms (ALL) END
			//get saved data if any START
			$anlage14ctrl = new Anlage14Control();
			$anlage14_res = $anlage14ctrl->get_anlage14_controlsheet($ipid, $months_details[$selected_month]['start'], true,$patient_days);//TODO-2957 Ancuta 02.03.2020 Added new param $patient_days 

			$this->view->has_data = '0';
			$post['shanlage14']['has_data'] = '0';

			if(!empty($anlage14_res))
			{
				$this->view->has_data = '1';
				$post['shanlage14']['has_data'] = '1';
				$post['shanlage14'] = $anlage14_res;
				$post['shanlage14']['patient_hospitals'] = $anlage14_res['patient_hospitals'];
			}
			//get saved data if any END
			

			$post['shanlage14'] ['real_active_days'] = $patient_days[$ipid]['real_active_days'];
			$post['shanlage14'] ['hospital_days'] = $patient_days[$ipid]['hospital']['real_days_cs'];
			
			
			//get sapv data START
			$sapv_array = SapvVerordnung::get_all_sapvs($ipid);
			foreach($sapv_array as $k_sapv => $v_sapv)
			{
				$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));

				if($v_sapv['status'] == '1' && $v_sapv['verordnungam'] != '0000-00-00 00:00:00')
				{
					$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
				}
				else
				{
					$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
				}

				if(empty($patient_sapv_days))
				{
					$patient_sapv_days = array();
				}

				$patient_sapv_days = array_merge($patient_sapv_days, PatientMaster::getDaysInBetween($start, $end));

				$curent_month_sapv_days = array_intersect($selected_month_days, $patient_sapv_days);
			}
			//get sapv data END
//			load saved data and create master data array START
			$treated_days_all = array_values($patient_days[$ipid]['treatment_days']);

			$pat_sapv_days_dmy = $patient_sapv_days;
			array_walk($pat_sapv_days_dmy, function(&$value) {
				$value = date('d.m.Y', strtotime($value));
			});

			$treated_days_all = array_intersect($treated_days_all, $pat_sapv_days_dmy);

			$treated_days_all_ts = $treated_days_all;
			array_walk($treated_days_all_ts, function(&$value) {
				$value = strtotime($value);
			});

			asort($treated_days_all_ts, SORT_NUMERIC);

			$treated_days_all_ts = array_values(array_unique($treated_days_all_ts));

			$pat_treatment_days = $treated_days_all_ts;
			array_walk($pat_treatment_days, function(&$value) {
				$value = date('Y-m-d', $value);
			});

			$post['shanlage14']['clientid'] = $clientid;
			$post['shanlage14']['curent_month'] = $months_details[$selected_month]['start'];
			$post['shanlage14']['selected_month_days'] = $selected_month_days;
			$post['shanlage14']['current_period'] = $current_period;
			$post['shanlage14']['shortcuts'] = $shortcuts_arr;
			$post['shanlage14']['excluded_shortcuts'] = $excluded_shortcuts;

			$post['shanlage14']['patient_last_name'] = $patientinfo['last_name'];
			$post['shanlage14']['patient_first_name'] = $patientinfo['first_name'];
			$post['shanlage14']['patient_dob'] = $patientinfo['birthd'];

			$post['shanlage14']['hi_company_name'] = $healthinsu_array[0]['company_name'];
			$post['shanlage14']['insurance_no'] = $healthinsu_array[0]['insurance_no'];

			$post['shanlage14']['start_date_erst'] = $start_first_sapv;
			$post['shanlage14']['start_date_folge'] = $start_following_sapv;


			$post['betriebsstatten_nr'] = $client_details[0]['betriebsstattennummer'];
			$post['sapv_team'] = $client_details[0]['team_name'];

			if($this->view->has_data == '0')
			{
				$flatrate_treatment_days = $treated_days_all_ts;

				if(count($flatrate_treatment_days) > 0)
				{
					$flatrate_start = $flatrate_treatment_days[0];
					$fl_days = array();
					while(count($fl_days) < '7')
					{
						if(in_array($flatrate_start, $flatrate_treatment_days))
						{
							$fl_days[] = $flatrate_start;
						}
						else
						{
							$fl_days[] = $flatrate_treatment_days[0];
						}

						$flatrate_start = strtotime('+1 day', $flatrate_start);
					}
				}
				//get FLATRATE DAYS - END


				$post['shanlage14']['overall_beko'] = '0';
				$post['shanlage14']['overall_folgeko'] = '0';
				$post['shanlage14']['overall_doc_nur_non_hospiz'] = '0';
				$post['shanlage14']['overall_doc_nur_hospiz'] = '0';
				$post['shanlage14']['overall_phones'] = '0';

				foreach($selected_month_days as $k_day => $v_day)
				{
					if(in_array($v_day, $curent_month_sapv_days)  && in_array(date('d.m.Y',strtotime($v_day)), $patient_days[$ipid]['real_active_days'])  )
					{
						foreach($shortcuts_arr as $k_short => $v_short)
						{
							if(in_array($v_short, $visits_shortcuts))
							{
								//handle visitable shortcuts here
								if(count($contact_forms[$v_day][$v_short]) > '0')
								{
									$post['shanlage14'][$v_short][$v_day]['checked'] = '1';
									$post['shanlage14'][$v_short][$v_day]['qty'] = count($contact_forms[$v_day][$v_short]);
								}
								else
								{
									$post['shanlage14'][$v_short][$v_day]['checked'] = '0';
									$post['shanlage14'][$v_short][$v_day]['qty'] = '0';
								}

								//add to totals								
								$master_data['totals'][$v_short] += $post['shanlage14'][$v_short][$v_day]['checked'];
								
							
								//add to custom overall totals
								if(
								        $v_short == 'sh_nur_non_hospiz_visits' 
								    || $v_short == 'sh_doc_non_hospiz_visits'
								    || $v_short == 'sh_other_visits'
								    )
								{
									//Anzahl Tagespauschale - total visits doc/nurse non hospiz
									if($post['shanlage14'][$v_short][$v_day]['checked'] == '1')
									{
										$master_overall_data['overall_doc_nur_non_hospiz'][] = $v_day;
										$master_overall_data['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data['overall_doc_nur_non_hospiz']));
									}
								}
								else if($v_short == 'sh_nur_hospiz_visits' || $v_short == 'sh_doc_hospiz_visits')
								{
									//Tagespauschalen Hospiz - total visits doc/nurse in hospiz
									if($post['shanlage14'][$v_short][$v_day]['checked'] == '1')
									{
										$master_overall_data['overall_doc_nur_hospiz'][] = $v_day;
										$master_overall_data['overall_doc_nur_hospiz'] = array_unique(array_values($master_overall_data['overall_doc_nur_hospiz']));
									}
								}

								$post['shanlage14']['overall_doc_nur_non_hospiz'] = count($master_overall_data['overall_doc_nur_non_hospiz']);
								$post['shanlage14']['overall_doc_nur_hospiz'] = count($master_overall_data['overall_doc_nur_hospiz']);
							}
							else
							{
								//handle the rest of shortcuts here
								if($v_short == 'sh_beko')
								{
									if(strtotime($v_day) == strtotime($pat_treatment_days[0]))
									{
										$post['shanlage14'][$v_short][$v_day]['checked'] = '1';
										$post['shanlage14'][$v_short][$v_day]['qty'] = '1';
									}
									else
									{
										$post['shanlage14'][$v_short][$v_day]['checked'] = '0';
										$post['shanlage14'][$v_short][$v_day]['qty'] = '0';
									}

									$post['shanlage14']['overall_beko'] += $post['shanlage14'][$v_short][$v_day]['qty'];
								}

								if($v_short == 'sh_folgeko')
								{
									if(count($treated_days_all_ts) >= '26' && strtotime($v_day) == $treated_days_all_ts[28])
									{
										$post['shanlage14'][$v_short][$v_day]['checked'] = '1';
										$post['shanlage14'][$v_short][$v_day]['qty'] = '1';
									}
									else
									{
										$post['shanlage14'][$v_short][$v_day]['checked'] = '0';
										$post['shanlage14'][$v_short][$v_day]['qty'] = '0';
									}

									$post['shanlage14']['overall_folgeko'] += $post['shanlage14'][$v_short][$v_day]['qty'];
								}

								if($v_short == 'sh_flatrate')
								{
									if(!empty($fl_days))
									{
										if(in_array(strtotime($v_day), $fl_days))
										{
											$post['shanlage14'][$v_short][$v_day]['checked'] = '1';
											$post['shanlage14'][$v_short][$v_day]['qty'] = '1';

											//append flatrate into the Anzahl Tagespauschale
											$master_overall_data['overall_doc_nur_non_hospiz'][] = $v_day;
											$master_overall_data['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data['overall_doc_nur_non_hospiz']));
										}
										else
										{
											$post['shanlage14'][$v_short][$v_day]['checked'] = '0';
											$post['shanlage14'][$v_short][$v_day]['qty'] = '0';
										}
									}
									else
									{
										$post['shanlage14'][$v_short][$v_day]['checked'] = '0';
										$post['shanlage14'][$v_short][$v_day]['qty'] = '0';
									}
								}

								// TODO-2957 Ancuta 02.03.2020  
								// #1)  do not count phone, even if it si done during visit in hospiz 
								// #2) If patient it is in hospiz location, max amount per day it is  1, if  NOT in hospiz, max amount is 2
								if($v_short == 'sh_telefonat')
								{
									$qty_limit = '0';
									//Anzahl Telefonpauschale - total phones with limit per day of 2 qty
									// TODO-2957 Ancuta 02.03.2020 #1 
									if(!in_array($v_day, $master_overall_data['overall_doc_nur_non_hospiz']) && !in_array(strtotime($v_day), $fl_days) && !in_array($v_day, $master_overall_data['overall_doc_nur_hospiz']) )
									{
									    
										// TODO-2957 Ancuta 02.03.2020  #2
									    $sh_telefonat_max = 2;
									    if(in_array(date('d.m.Y',strtotime($v_day)), $patient_days[$ipid]['hospiz']['real_days_cs']) ){
									       $sh_telefonat_max = 1;
									    }

									    if(count($patient_phones[$v_day][$v_short]) >= $sh_telefonat_max)
										{
										    $qty_limit = $sh_telefonat_max;
										}
										else
										{
											$qty_limit = count($patient_phones[$v_day][$v_short]);
										}

										if(count($patient_phones[$v_day][$v_short]) > '0')
										{
											$post['shanlage14'][$v_short][$v_day]['checked'] = '1';
											$post['shanlage14'][$v_short][$v_day]['qty'] = $qty_limit;
										}
										else
										{
											$post['shanlage14'][$v_short][$v_day]['checked'] = '0';
											$post['shanlage14'][$v_short][$v_day]['qty'] = '0';
										}
									}
									else
									{
										$post['shanlage14'][$v_short][$v_day]['checked'] = '0';
										$post['shanlage14'][$v_short][$v_day]['qty'] = '0';
									}

									$post['shanlage14']['overall_phones'] += $qty_limit;
								}

								//add to totals
								$master_data['totals'][$v_short] += $post['shanlage14'][$v_short][$v_day]['qty'];

								$post['shanlage14']['overall_doc_nur_non_hospiz'] = count($master_overall_data['overall_doc_nur_non_hospiz']);
								$post['shanlage14']['overall_doc_nur_hospiz'] = count($master_overall_data['overall_doc_nur_hospiz']);
							}
						}
					}
				}

				//rest of gathered data here
				$master_data['master_data']['dead_sapv_date'] = $dead_sapv_date;
				$master_data['master_data']['raapv_sapv_date'] = $raapv_sapv_date;
				$master_data['master_data']['khws_sapv_date'] = $khws_sapv_date;
				$master_data['master_data']['stathospiz_sapv_date'] = $stathospiz_sapv_date;
				$master_data['master_data']['pwunsch_sapv_date'] = $pwunsch_sapv_date;
				
				$master_data['master_data']['real_active_days'] = $patient_days[$ipid]['real_active_days'];;
				$master_data['master_data']['hospital_days'] = $patient_days[$ipid]['hospital']['real_days_cs'];;

				foreach($post['shanlage14']['patient_hospitals'] as $k_res => $v_res)
				{
					$post['shanlage14']['hospital_start'][$k_res] = $v_res['start'];
					$post['shanlage14']['hospital_end'][$k_res] = $v_res['end'];
				}
				unset($post['shanlage14']['patient_hospitals']);

				$post['shanlage14'] = array_merge($post['shanlage14'], $master_data);
			}
			else
			{
				//create pdf master data from application wide data START
				$post['shanlage14']['master_data']['raapv_sapv_date'] = $anlage14_res['raapv_sapv_date'];
				$post['shanlage14']['master_data']['aapv_start'] = $anlage14_res['aapv_start'];
				$post['shanlage14']['master_data']['aapv_end'] = $anlage14_res['aapv_start'];

				$post['shanlage14']['master_data']['khws_sapv_date'] = $anlage14_res['khws_sapv_date'];


				$post['shanlage14']['master_data']['stathospiz_sapv_date'] = $anlage14_res['stathospiz_sapv_date'];
				$post['shanlage14']['master_data']['hospiz_start'] = $anlage14_res['hospiz_start'];
				$post['shanlage14']['master_data']['hospiz_end'] = $anlage14_res['hospiz_end'];

				$post['shanlage14']['master_data']['pwunsch_sapv_date'] = $anlage14_res['pwunsch_sapv_date'];
				$post['shanlage14']['master_data']['patient_wish_start'] = $anlage14_res['patient_wish_start'];
				$post['shanlage14']['master_data']['patient_wish_end'] = $anlage14_res['patient_wish_end'];

				$post['shanlage14']['master_data']['real_active_days'] = $patient_days[$ipid]['real_active_days'];
				$post['shanlage14']['master_data']['hospital_days'] = $patient_days[$ipid]['hospital']['real_days_cs'];

				
				
				
				$post['shanlage14']['master_data']['dead_sapv_date'] = $anlage14_res['dead_sapv_date'];

				foreach($anlage14_res['patient_hospitals'] as $k_res => $v_res)
				{
					$post['shanlage14']['hospital_start'][$k_res] = $v_res['start'];
					$post['shanlage14']['hospital_end'][$k_res] = $v_res['end'];
				}
				unset($anlage14_res['patient_hospitals']);


				$post['shanlage14']['overall_beko'] = $anlage14_res['custom_totals']['overall_beko'];
				$post['shanlage14']['overall_folgeko'] = $anlage14_res['custom_totals']['overall_folgeko'];
				$post['shanlage14']['overall_doc_nur_non_hospiz'] = $anlage14_res['custom_totals']['overall_doc_nur_non_hospiz'];
				$post['shanlage14']['overall_doc_nur_hospiz'] = $anlage14_res['custom_totals']['overall_doc_nur_hospiz'];
				$post['shanlage14']['overall_phones'] = $anlage14_res['custom_totals']['overall_phones'];				
//				//create pdf master data from application wide data END
			}

			$files[] = $this->generate_joined_files_pdf('4', $post['shanlage14'], 'shanlage14', 'shanlage14_pdf.html');
			//5. SH Anlage 14 - ISPC-1080 END
			//6. Generate blank pdf with patient address START
			$files[] = $this->generate_joined_files_pdf('4', $post['patient_address_data'], 'patient_address', 'patient_address_pdf.html');
			//6. Generate blank pdf with patient address END
			//Final step merge generated files!
			$patient_data['ipid'] = $ipid;
			$patient_data['epid'] = $patient_epid;
			$source = 'Mappe';
			$this->join_pdfs($files, $patient_data ,$source);
// 			$this->join_pdfs_new($files, $patient_data ,$source);
		}

		public function join_pdfs($files = false, $patient_data = false, $source , $params = false)
		{
		    if(isset($params) && !empty($params)) {
		        $clientid = $params['clientid'];
		        $clientdata = Pms_CommonData::getClientDataFp($clientid);
		        $filepass = $clientdata[0]['fileupoadpass'];
		        
		    } else{
                $logininfo = new Zend_Session_Namespace('Login_Info');
                $filepass = $logininfo->filepass;
		    }

			if($files)
			{
				// initiate PDF
				$pdf = new Pms_PDFJoin();
				$pdf->setFontSubsetting(true);

				foreach($files as $file)
				{
					$pdf->_source = $file;

					// add a page
					$pdf->AddPage();

					// The new content
					$pdf->SetFont("helvetica", "B", 14);

					// How to get the number of pages of original pdf???
					$numPages = $pdf->getNumPages();

					// Carry on adding all remaining pages starting from page 2
					if($pdf->numPages > 1)
					{
						for($i = 2; $i <= $pdf->numPages; $i++)
						{
							$pdf->endPage();
							$pdf->_tplIdx = $pdf->importPage($i);
							$pdf->AddPage();
						}
					}
				}
				
				if($source == 'MDK-Bericht')
				{
					$file_data['pdfname'] = $patient_data['epid'] . '_MDK';
					$output_name = '_MDK.pdf';
				}
				else if ($source == 'Mappe')
				{
					$file_data['pdfname'] = $patient_data['epid'] . '_shmappe';
					$output_name = '_Mappe.pdf';
				}
				else if ($source == 'ShBulk')
				{
					$file_data['pdfname'] = '_shBULK';
					$output_name = 'Sh_BULK.pdf';
				}
				else if ($source == 'ShBulkfilled')
				{
					$file_data['pdfname'] = '_shBULKfilled';
					$output_name = 'Sh_BULK_filled.pdf';
				}
				else if ($source == 'RPBulk')
				{
					$file_data['pdfname'] = '_rpBULK';
					$output_name = 'Rp_BULK.pdf';
				}
				//$file_data['password'] = $logininfo->filepass;
				$file_data['password'] = $filepass;
 
				$uploaded = $pdf->upload_pdf($file_data);

				if($uploaded && strlen($uploaded['pdf_filename']) > '0' && $params['bulk_print'] != '1')
				{
					$cust = new PatientFileUpload();
					$cust->title = Pms_CommonData::aesEncrypt($source);
					$cust->ipid = $patient_data['ipid'];
					$cust->file_name = Pms_CommonData::aesEncrypt($uploaded['pdf_filename']);
					$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					$cust->save();

					//remove each file
					foreach($files as $file)
					{
						exec("rm " . $file . ";");
					}
				}

				// Output the file as forced download
				//$pdf->Output($patient_data['epid'] . '_Mappe.pdf', 'D');
				if($params['bulk_print'] == '1'){
				    
				    
				    $batch_temp_folder = $params['batch_temp_folder'];
				    
				    if(!is_dir(PDFDOCX_PATH))
				    {
				        while(!is_dir(PDFDOCX_PATH))
				        {
				            mkdir(PDFDOCX_PATH);
				            if($i >= 50)
				            {
				                //exit; //failsafe
				                break;
				            }
				            $i++;
				        }
				    }
				    
				    if(!is_dir(PDFDOCX_PATH . '/' . $clientid))
				    {
				        while(!is_dir(PDFDOCX_PATH . '/' . $clientid))
				        {
				            mkdir(PDFDOCX_PATH . '/' . $clientid);
				            if($i >= 50)
				            {
				                //exit; //failsafe
				                break;
				            }
				            $i++;
				        }
				    }
				    
				    if(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
				    {
				        while(!is_dir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder))
				        {
				            mkdir(PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder);
				            if($i >= 50)
				            {
				                exit; //failsafe
				            }
				            $i++;
				        }
				    }
				    
				    
				    $epid = Pms_CommonData::getEpid($params['ipid']);
				    
				    $destination_path = PDFDOCX_PATH . '/' . $clientid . '/' . $batch_temp_folder . '/pdf_sh_' . $epid.'.pdf';
				    
				    $pdf->toFile($destination_path);
				    
				    return $destination_path;
				    
				} else  {
    				$pdf->Output($patient_data['epid'] . $output_name , 'D');
				}
			}
		}	
				
		/* ################################ */
		
		public function join_pdfs_new($files = false, $patient_data = false, $source)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			
		    $file_data['ipid'] = $patient_data['ipid'];
		    $file_data['password'] = $logininfo->filepass;
		    $file_data['file_title'] = $source;
		    
			if($source == 'MDK-Bericht')
			{
			    $file_data['pdfname'] = $patient_data['epid'] . '_MDK';
			    $output_name = $patient_data['epid'].'_MDK.pdf';
			}
			else if ($source == 'Mappe')
			{
			    $file_data['pdfname'] = $patient_data['epid'] . '_shmappe';
			    $output_name = $patient_data['epid'].'_Mappe.pdf';
			}
			else if ($source == 'RPBulk')
			{
				$file_data['pdfname'] = '_rpBULK';
				$output_name = 'Rp_BULK.pdf';
			}
			
			//create public/joined_files/ dir
			while(!is_dir(PDFJOIN_PATH))
			{
			    mkdir(PDFJOIN_PATH);
			    if($i >= 50)
			    {
			        exit; //failsafe
			    }
			    $i++;
			}
			
			//create public/joined_files/$clientid dir
			$pdf_path = PDFJOIN_PATH . '/' . $clientid;
			
			while(!is_dir($pdf_path))
			{
			    mkdir($pdf_path);
			    if($i >= 50)
			    {
			        exit; //failsafe
			    }
			    $i++;
			}
			
			$outputh_path = $pdf_path . '/' . $output_name;
			
			if($files)
			{
			     $pdf = new Pms_PDFMerger();
			    
			    foreach($files AS $file) {
			        $pdf->addPDF($file, 'all');
			    }
   			    $pdf->merge('download', $output_name, $file_data);
			}
			
		}

		//USE IN SH MAPPE ONLY!!!
		//returns the file path of generated pdf file
		private function generate_joined_files_pdf($chk, $post, $pdfname, $filename,$export_data = false)
		{
		    if($export_data){
		        
    			$logininfo = new Zend_Session_Namespace('Login_Info');
    			$clientid = $export_data['clientid'];
    			$clientinfo = Pms_CommonData::getClientData($clientid);
    			if(is_array($export_data['ipids'])){
        			$ipid = $export_data['ipids'][0];
    			} else{
        			$ipid = $export_data['ipids'];
    			}
		    }
		    else
		    {
    			$logininfo = new Zend_Session_Namespace('Login_Info');
    			$clientid = $logininfo->clientid;
    			$clientinfo = Pms_CommonData::getClientData($clientid);
    			$decid = Pms_Uuid::decrypt($_GET['id']);
    			$ipid = Pms_CommonData::getIpid($decid);
		    }
			
			$excluded_keys = array(
				'stamp_block',
				'kv_header',
				'hausarzt_details',
				'apotheke_details',
				'pflegedienst_details',
				'header_string',
				'image'	,
				'Mmedicationgridcontent',
				'IVmedicationgridcontent',
				'Nmedicationgridcontent',
				"symptom_array"
			);
			//print_r($post);exit;
			$post = Pms_CommonData::clear_pdf_data($post, $excluded_keys);
			if($pdfname == 'newmedikamentenplan')
			{
				$htmlform = Pms_Template::createTemplate($post, 'patientform/' . $filename);
				
			}
			else 
			{
			// sapv questionnaire
				$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);
			}
			/* if($pdfname != 'newmedikamentenplan')
			{
				$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);
				
			} */
			//dont return the pdf file to user
			if($chk == 4)
			{
				$navnames = array(
					"anlage15" => 'Anlage 15',
					"shanlage14" => 'Anlage 14',
					"shanlage14filled" => 'Anlage14',
					"shwrapper" => 'Deckblatt',
					"bra_anlage_5" => 'Anlage 5',
					"questionnaire_b" => 'Erhebungsbogen B',
					"questionnaire_c" => 'Erhebungsbogen C',
					"daystructure" => 'Tagesstrukturplan',
					"newmedikamentenplan" => 'Medikation / Dosierung Plan',
					"stammblatt" => "Stammblatt II",
					"symptomatics" => "Symptomatik",
					"berprintcourse" => "Printcourse XP",
					"patient_actions_list_bulk" => "RP Leistungsnachweis",
				);

				if($pdfname == 'shwrapper')
				{
					$orientation = 'L';
					$bottom_margin = '20';
					$format = "A4";
				}
				else if($pdfname == 'shimplementationproof')
				{
					$orientation = 'L';
					$bottom_margin = '20';
					$format = "A4";
				}
				else if($pdfname == 'shanlage14')
				{
					$orientation = 'L';
					$bottom_margin = '20';
					$format = "A4";
				}
				else if($pdfname == 'shanlage14filled')
				{
					$orientation = 'L';
					$bottom_margin = '20';
					$format = "A4";
				}
				else if($pdfname == 'bra_anlage_5')
				{
					$orientation = 'L';
					$bottom_margin = '20';
					$format = "A4";
				}
				else if($pdfname == 'patient_actions_list')
				{
					$orientation = 'L';
					$bottom_margin = '20';
					$format = "A4";
				}
				else if($pdfname == 'patient_actions_list_bulk')
				{
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
				}
				else
				{
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
				}

				$pdf = new Pms_PDF($orientation, 'mm', $format, true, 'UTF-8', false);
				$pdf->setDefaults(true, $orientation, $bottom_margin); //defaults with header
				$pdf->setImageScale(1.6);
				$pdf->format = $format;
				$pdf->SetMargins(10, 5, 10); //reset margins

				switch($pdfname)
				{
					case 'anlage15':
						$background_type = false;
						$pdf->SetAutoPageBreak(false);
						$pdf->SetMargins(20, 10, 20); //reset margins
						$pdf->setPrintFooter(false); //remove footer black line
						break;
					case 'shwrapper':
						$background_type = '54';
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(20, 10, 20); //reset margins
						$pdf->setPrintFooter(false); //remove footer black line
						break;
					case 'patient_address':
						$pdf->SetAutoPageBreak(true);
						$pdf->SetMargins(20, 10, 20); //reset margins
						$pdf->setPrintFooter(false); //remove footer black line
						break;

					case 'verordnungtpside_pre':
						$pdf->SetAutoPageBreak(false);
						$pdf->setPrintFooter(false);
						$background_type = '52';
						break;

					case 'verordnungtpside':
						$pdf->SetAutoPageBreak(false);
						$pdf->setPrintFooter(false);
						break;
					case 'shimplementationproof':
						$pdf->SetMargins(3, 5, 3);
						$pdf->SetAutoPageBreak(false);
						$pdf->setPrintFooter(false);
						break;
					case 'shanlage14':
						$pdf->SetMargins(3, 5, 3);
						$pdf->SetAutoPageBreak(false);
						$pdf->setPrintFooter(false);
						break;
					case 'shanlage14filled':
						$pdf->SetMargins(3, 5, 3);
						$pdf->SetAutoPageBreak(false);
						$pdf->setPrintFooter(false);
						break;
					case 'bra_anlage_5':
						$pdf->SetMargins(3, 5, 3);
						$pdf->SetAutoPageBreak(false);
						$pdf->setPrintFooter(false);
						break;
					case 'daystructure':
						$pdf->SetMargins(10, 5, 10); //reset marginsgenerate_joined_files_pdf
						$pdf->setPrintFooter(true);
						break;
					case 'newmedikamentenplan':
						$pdf->SetMargins(15, 25, 15); //reset margins
						$pdf->SetFont('helvetica', '', 11);
						$pdf->SetHeaderMargin(2);
						$header_text .='<table style="width: 180mm" border="0" align="center" cellpadding="0" cellspacing="0">';
						$header_text .='<tr><td width="80%" height="67" align="left"></td>';
						$header_text .='<td width="20%" height="67" align="center"><font style="font-family:Arial, Helvetica, sans-serif;  text-decoration:none; line-height="1"; font-size:11pt; color:#000000;"><b>'.$post['clientname'].'</b></font></td></tr>';
						$header_text .='<tr><td colspan="2"><table width="100%" border="0" cellspacing="0" cellpadding="0">';
						$header_text .='<tr><td style="width: 75mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">Name: ' . utf8_decode($post['patient_name']) . ' </font></td>
						<td style="width: 40mm;" align="left"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;">geb:' . $post['birthdate'] . '</font></td>
						<td style="width: 65mm;" align="center"><font style="font-family:Arial, Helvetica, sans-serif; font-weight:normal; text-decoration:none; font-size:12pt; color:#000000;"> ' . date("d.m.Y H:i") . '&nbsp;</font></td>';
						$header_text .='</tr></table></td></tr></table>';
						$pdf->HeaderText = $header_text;
					case 'stammblatt':
						$background_type = false;
						$pdf->setDefaults(false, 'P', '10');
						$pdf->setImageScale(1.6);
							//reset margins
						$pdf->SetMargins(10, 5, 10);
						$pdf->setPrintFooter(false);
						break;
					case 'questionnaireb':
						$pdf->SetMargins(10, 20, 10);
						$pdf->SetFont('', '', 11);
						break;
					case 'questionnairec':
						$pdf->SetMargins(10, 20, 10);
						$pdf->SetFont('', '', 11);
						break;
					case 'symptomatics':
						$pdf->SetMargins(10, 10, 10);
						$pdf->SetAutoPageBreak(true);
						$pdf->setPrintFooter(false);
						break;
					case 'patient_actions_list_bulk':
						$pdf->SetMargins(10, 5, 10);
						
						// ISPC-1603
						$pdf->SetAutoPageBreak(TRUE, 35);
						$pdf->setFooterFont(Array('helvetica', '', 7));
						
						$pdf->invoice_footer = true; // set special footer
						
						$footer_text = '<table width="100%">
                               	<tr>
                               		<td width="45%">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                               		<td width="10%"></td>
                               		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                               	</tr>
                               	<tr>
                                       <td colsapn="3">&nbsp;</td>
                               	</tr>
                               	<tr>
                               		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                               		<td></td>
                               		<td style="border-bottom:1px solid #000000;"></td>
                               	</tr>
                               	<tr>
                               		<td>Verantwortlicher Leistungserbinger PCT</td>
                               		<td></td>
                               		<td>Versicherter / Bezugsperson</td>
                               	</tr>
								<tr>
                                	<td colsapn="3">&nbsp;</td>
                                </tr>
                                <tr>
                                	<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                	<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                	<td style="border-bottom:1px solid #000000;"></td>
                                </tr>
                                <tr>
                                	<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                	<td></td>
                                	<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                </tr>
							</table>';
						
							$pdf->footer_text = $footer_text;
							$pdf->setPrintFooter(true); // remove black line at bottomC
							break;
				}


				if($background_type != false)
				{
					$bg_image = Pms_CommonData::getPdfBackground($clientinfo[0]['id'], $background_type);
					if($bg_image !== false)
					{
						$bg_image_path = PDFBG_PATH . '/' . $clientinfo[0]['id'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
						if(is_file($bg_image_path))
						{
							$pdf->setBackgroundImage($bg_image_path);
						}
					}
				}

				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
				
				$excluded_css_cleanup_pdfs = array(
					'anlage15',
					'shwrapper',
					'patient_address',
//					'verordnungtpside',
//					'verordnungtpside_pre',
					'shimplementationproof',
					'shanlage14',
					'shanlage14filled',
					'bra_anlage_5',
					"berprintcourse",
					"symptomatics",
					"patient_actions_list_bulk",
				);

				if(!in_array($pdfname, $excluded_css_cleanup_pdfs))
				{
					$html = preg_replace('/style=\"(.*)\"/i', '', $html);
				}

// 				print_r($html); exit;
				$pdf->setHTML($html);

				//create public/joined_files/ dir
				while(!is_dir(PDFJOIN_PATH))
				{
					mkdir(PDFJOIN_PATH);
					if($i >= 50)
					{
						exit; //failsafe
					}
					$i++;
				}

				//create public/joined_files/$clientid dir
				$pdf_path = PDFJOIN_PATH . '/' . $clientid;
				
				while(!is_dir($pdf_path))
				{
					mkdir($pdf_path);
					if($i >= 50)
					{
						exit; //failsafe
					}
					$i++;
				}

				$tmpstmp = $this->view->folder_stamp;
				while(!is_dir($pdf_path . '/' . $tmpstmp))
				{
					mkdir($pdf_path . '/' . $tmpstmp);
					if($i >= 50)
					{
						exit; //failsafe
					}
					$i++;
				}

				if($pdfname == 'shimplementationproof' || $pdfname == 'shanlage14' || $pdfname == 'shanlage14filled')
				{
				    $pdfname = $pdfname.'_'.$post['epid'];
				}
				elseif($pdfname == 'patient_actions_list_bulk')
				{
					$pdfname = $pdfname.'_'.$post['patientdetails']['epid'];
				}
				
				$pdf->toFile($pdf_path . '/' . $tmpstmp . '/' . $pdfname . '.pdf');

				return $pdf_path . '/' . $tmpstmp . '/' . $pdfname . '.pdf';
			}
		}

		private function generate_pdf($post_data, $pdfname, $filename, $pdf_extra_id = false)
		{ 						
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			//Maria:: Migration CISPC to ISPC 20.08.2020
			//Maria:: Migration CISPC to ISPC 02.09.2020
			$post_data = Pms_CommonData::clear_pdf_data($post_data, array('patientname', 'address', 'image', 'visits_array', 'ipos_pdf', 'karnofsky_pdf', 'interventions_pdf', 'reactions_pdf'));
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			$htmlform = Pms_Template::createTemplate($post_data, 'templates/' . $filename);

			
		    $date_fall = "";
			if(strlen($post_data['date_fall']) > 0 ){
			
				if(!empty($post_data['time_fall']) >0){
				    $pdf_time_fall = ' '.$post_data['time_fall'];
				}else{
				    $pdf_time_fall = " 00:00";
				}
				
			    $date_fall = '('.$post_data['date_fall'].$pdf_time_fall.')';
			}
			if(strlen($post_data['pain_date']) > 0){
			    $pain_date = '('.date('d.m.Y H:i',strtotime($post_data['pain_date'])).')';
			}
			
			
			
			
			$pdf_names = array(
				'shanlage14' => 'Anlage 14 ' . date('m.Y', strtotime($post_data['curent_month'])),
				'painquestionnaire' => 'Schmerzbogen '.$pain_date,
				'painquestionnaire_save' => 'Schmerzbogen '.$pain_date ,
				'fallprotocolform' => 'Sturzprotokoll '.$date_fall,
				'fallprotocolform_save' => 'Sturzprotokoll '.$date_fall,
				'daystructure' => 'Tagesstrukturplan',
				'daystructure_save' => 'Tagesstrukturplan',
// 				'careservices' => 'Pflegeleistungen ' . date('d.m.Y', strtotime($post_data['care_service_date'])),
// 				'careservices_save' => 'Pflegeleistungen ' . date('d.m.Y', strtotime($post_data['care_service_date'])),
				'careservices' => 'Pflegeleistungen',
				'careservices_save' => 'Pflegeleistungen',
				'bra_anlage_5' => 'Anlage5',
				'anlage2_save' => 'Anlage 2',
				'anlage2' => 'Anlage 2',
				'anlage3nordrhein_save' => 'Anlage 3',
				'emergencyplansapv' => 'Notfallplan',
				'rptermination' => 'Beendigung',
				'sapvevaluation' => 'SAPV Einzelfallevaluation II ',
				'vdekanlage2' => 'VdEK Anlage 2',
				'emergencyplansapv24' => 'Notfallplan 24',
				'emergencyplansapv24_save' => 'Notfallplan 24',
				"ZAPV_Assessment_ii" => "Assessment II - Aufnahme",
				"ZAPV_Beratung_Assessment_ii" => "Assessment II - Beratung",
				"ZAPV_Assessment_ii_save" => "Assessment II - Aufnahme : " . $post_data['form_data']['done_date'],
				"ZAPV_Beratung_Assessment_ii_save" => "Assessment II - Beratung : " . $post_data['form_data']['done_date'],
			    "ethicalform" => $this->translate('ethicalform'),
			    "brekinderperformance" => $this->translate('brekinderperformance'),
			    "nrbillingform" => $this->translate('nrbillingform'),
			    "standarddocumentation_save" => "Einheitliche Dokumentation Hessen ".$post_data['period_title'],
                "entlassungsmanagement" => "Entlassungsmanagement",
                "entlassungsmanagement_save" => "Entlassungsmanagement",
                "reassessment_nr_save" => "Reassessment",
                "therapiesteuerung" => "Therapiesteuerung",
                "herzinsuffizienz" => "Herzinsuffizienz",
                "copd" => "COPD",
                "cat" => "CAT",
                "interventions" => "Interventionen",
                "reactions" => "Reactionen", //Maria:: Migration CISPC to ISPC 02.09.2020
			    "emergencyplansapvii" => "Notfallplan II", //ISPC-2736 Lore 12.11.2020
			    'emergencyplansapvii_save' => 'Notfallplan II',  //ISPC-2736 Lore 12.11.2020
			    
			);

			
			$portrait_pdfs = array(
				'painquestionnaire',
				'painquestionnaire_save',
				'daystructure',
				'daystructure_save',
				'careservices',
				'careservices_save',
				'anlage2_save',
				'anlage2',
				'anlage3nordrhein_save',
				'emergencyplansapv',
				'rptermination',
				'ethicalform',
				'fallprotocolform',
				'fallprotocolform_save',
				'sapvevaluation',
				'vdekanlage2',
				'ZAPV_Assessment_ii',
				'ZAPV_Beratung_Assessment_ii',
				'ZAPV_Assessment_ii_save',
				'ZAPV_Beratung_Assessment_ii_save',
				'StandardDocumentationPDF',
			    'standarddocumentation_save',
                'entlassungsmanagement_save',
                'reassessment_nr_save',
                'therapiesteuerung',
                'herzinsuffizienz',
                'copd',
                'cat'
			);

			if(in_array($pdfname, $portrait_pdfs))
			{
				$orientation = 'P';
			}
			else
			{
				$orientation = 'L'; //anlage 14 (all pdfnames which are not in $portrait_pdf
			}


			if($pdfname == 'sapvevaluation')
			{
			    $bottom_margin = '0';
			}
			else
			{
			    $bottom_margin = '20';
			}
			
			
			
			
			$pdf = new Pms_PDF($orientation, 'mm', 'A4', true, 'UTF-8', false);
// 			$pdf->setDefaults(true); //defaults with header
			$pdf->setDefaults(true, $orientation, $bottom_margin); //defaults with header
			
			
			$pdf->setImageScale(1.6);
			$pdf->setPrintFooter(false); // remove black line at bottom
			
			if($pdfname == 'shanlage14')
			{
				$pdf->SetMargins(3, 5, 3); //reset margins
				
			}
			if($pdfname == 'nrbillingform')
			{
				$pdf->SetMargins(3, 5, 3); //reset margins

				
				
				    $pdf->SetAutoPageBreak(TRUE, 35);
				    $pdf->setFooterFont(Array('helvetica', '', 7));
				
				    $pdf->no_first_page_invoice_footer = false; //remove footer from the first page
				
				    $pdf->invoice_footer = true; // set special footer
				    $footer_text = '<table width="100%">
                                        	<tr>
                                        		<td width="45%" style="text-align: left;">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                                        		<td width="10%"></td>
                                        		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                                        	</tr>
                                        	<tr>
                                                <td colsapn="3">&nbsp;</td>
                                        	</tr>
                                        	<tr>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td></td>
                                        		<td style="border-bottom:1px solid #000000;"></td>
                                        	</tr>
                                        	<tr>
                                        		<td>Verantwortlicher Leistungserbinger PCT</td>
                                        		<td></td>
                                        		<td>Versicherter / Bezugsperson</td>
                                        	</tr>
                                            <tr>
                                        		<td colsapn="3">&nbsp;</td>
                                        	</tr>
                                        	<tr>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td style="border-bottom:1px solid #000000;"></td>
                                        	</tr>
                                        	<tr>
                                        		<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                        		<td></td>
                                        		<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                        	</tr>
                                        </table>';
				
				
				    $pdf->footer_text = $footer_text; // set pdf background only for the first page
				    $pdf->setPrintFooter(true); // remove black line at bottomC
				
			}
						
			if($pdfname == 'painquestionnaire' || $pdfname == 'painquestionnaire_save')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
                //ISPC-2802,Elena,16.03.2021
                $pdf->setFooterType("1 of n");
                $footer_text = $post_data['patientname'] . ", " . "Schmerzerhebungsbogen ". $pain_date . ", Seite %s von %s ";
                $pdf->footer_text = $footer_text;
                $pdf->setPrintFooter(true);
			}
			if($pdfname == 'daystructure' || $pdfname == 'daystructure_save')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
				$pdf->setPrintFooter(true);
			}
			if($pdfname == 'careservices' || $pdfname == 'careservices_save')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
				$pdf->setPrintFooter(true);
			}
			if($pdfname == 'emergencyplansapv')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}
			
			if($pdfname == 'emergencyplansapv24' || $pdfname == 'emergencyplansapv24_save')
			{
				$pdf->SetMargins(15, 10, 15); //reset margins
			}
			
			//ISPC-2736 Lore 12.11.2020
			if($pdfname == 'emergencyplansapvii' || $pdfname == 'emergencyplansapvii_save')
			{
			    $pdf->SetMargins(15, 10, 15); //reset margins
			}
			
			if($pdfname == 'rptermination')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}
			
			if($pdfname == 'bra_anlage_5')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}
			if($pdfname == 'ethicalform')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}
			if($pdfname == 'fallprotocolform' ||$pdfname == 'fallprotocolform_save' )
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}
			if($pdfname == 'entlassungsmanagement' ||$pdfname == 'entlassungsmanagement_save' )
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}
            if($pdfname == 'reassessment_nr_save' ||$pdfname == 'reassessment_nr' )
			{
				$pdf->SetMargins(10, 20, 10); //reset margins
                $pdf->setFooterType("1 of n");
                $footer_text = "Seite %s von %s ";
                $pdf->footer_text = $footer_text;
                $pdf->setPrintFooter(true);

                $headerText = '<table border="0" width="100%" align="left" cellpadding="1" cellspacing="0" style="line-height: 12px; font-family: Arial, Helvetica, sans-serif; "><tr  style="font-family:Arial, Helvetica, sans-serif; font-size:1.0em; color:#000000;">';

                $headerText .= '
        <td  align="left" style="font-size:1.2em;"><strong>Re-Assessment</strong></td>
        <td  align="right"><strong>Datum: ' . $post_data['completed_at'] . '</strong></td>
         
    </tr>
    <tr>
        <td colspan="2" height="1" align="left"><img src="'. PUBLIC_PATH . '/images/black-line.jpg" width="860" height="1" /></td>
    </tr>';
                $headerText .= '<tr><td><span >Name:</span> <span  style="font-size: 1.0em;">' . $post_data['patientname'] . '</span></td>
                    <td align="right"><span >Geburtsdatum:</span> <span  style="font-size: 1.0em;">' . $post_data['birthd'] . '</span></td>

                </tr></table>';
                $pdf->customheadertext=$headerText;
                $pdf->customheader = function ($obj) {
                    $headtext= $obj->customheadertext;
                    $obj->writeHTMLCell(0, 0, $x='', $y=5,  $headtext, $border=0, $ln=1, $fill=0, $reseth=true, $align='', $autopadding=false);
                };


			}
            if($pdfname == 'interventions'  )
			{//Maria:: Migration CISPC to ISPC 20.08.2020
				$pdf->SetMargins(10, 20, 10); //reset margins
                $pdf->setFooterType("1 of n");
                $footer_text = "Seite %s von %s ";
                $pdf->footer_text = $footer_text;
                $pdf->setPrintFooter(true);
                $date_now = new DateTime();


                $headerText = '<table border="0" width="100%" align="left" cellpadding="1" cellspacing="0" style="line-height: 12px; font-family: Arial, Helvetica, sans-serif; "><tr  style="font-family:Arial, Helvetica, sans-serif; font-size:1.0em; color:#000000;">';

                $headerText .= '
        <td  align="left" style="font-size:1.2em;"><strong>Interventionen</strong></td>
        <td  align="right"><strong>Datum: ' . date_format($date_now, 'd.m.Y') . '</strong></td>
         
    </tr>
    <tr>
        <td colspan="2" height="1" align="left"><hr></td>
    </tr>';
                $headerText .= '<tr><td><span >Name:</span> <span  style="font-size: 1.0em;">' . $post_data['patientname'] . '</span></td>
                    <td align="right"><span >Geburtsdatum:</span> <span  style="font-size: 1.0em;">' . $post_data['birthd'] . '</span></td>

                </tr></table>';
                $pdf->customheadertext=$headerText;
                $pdf->customheader = function ($obj) {
                    $headtext= $obj->customheadertext;
                    $obj->writeHTMLCell(0, 0, $x='', $y=5,  $headtext, $border=0, $ln=1, $fill=0, $reseth=true, $align='', $autopadding=false);
                };


			}
            if($pdfname == 'therapiesteuerung' ||
                $pdfname == 'herzinsuffizienz' ||
                $pdfname == 'copd' ||
                $pdfname == 'cat'
            )
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
                $footer_text = '<table width="100%">
                                        	<tr>
                                        		<td  style="text-align: right;">Datum: ' . date("d.m.Y", time()) .  '</td>
				
                                        	</tr>
                                        </table>';


                $pdf->footer_text = $footer_text; // set pdf background only for the first page
                $pdf->setPrintFooter(true); // remove black line at bottomC
			}

			if($pdfname == 'sapvevaluation')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}

			if($pdfname == 'vdekanlage2')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}
			

			if($pdfname == 'brekinderperformance')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}
			
			if($pdfname == 'StandardDocumentationPDF' || $pdfname == 'standarddocumentation_save')
			{
			    $pdf->SetMargins(15, 10, 15); //reset margins
			}

			if($pdfname == 'ethicalform')
			{
				$pdf_extra_id = '61';
			}
			
			
			if($pdfname == 'ZAPV_Assessment_ii' || $pdfname == 'ZAPV_Assessment_ii_save')
			{
				$pdf_extra_id = '67';
			}
			if($pdfname == 'ZAPV_Beratung_Assessment_ii'  || $pdfname == 'ZAPV_Beratung_Assessment_ii_save')
			{
				$pdf_extra_id = '68';
			}
			
 
			
			if($pdfname == 'anlage2_save' || $pdfname == 'anlage2')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
				$pdf->setPrintFooter(true);
				$pdf->footer_text = '<table style="font-size:7pt;"><tr><td  style="text-align:left;" width="50%">Anlage 2 zur Vereinbarung über die palliativmedizinische Versorgung</td><td width="25%" style="text-align:center;">ab 01.07.2015</td><td width="25%" style="text-align:right;">Seite 1 von 1</td></tr>
					<tr><td colspan="3" style="text-align:left;">von unheilbar erkrankten Patienten im häuslichen Umfeld</td></tr><tr><td colspan="3" style="text-align:left;">KV Nordrhein – Verband der Ersatzkassen e.V. (vdek)</td></tr></table>';
			}	
			
			if($pdfname == 'anlage3nordrhein_save' || $pdfname == 'anlage3nordrhein')
			{	
				$pdf->SetMargins(10, 5, 10); //reset margins
				$pdf->setPrintFooter(true);
				$pdf->footer_text = '<table style="font-size:7pt;"><tr><td  style="text-align:left;" width="50%">Anlage 3 zur Vereinbarung über die palliativmedizinische Versorgung</td><td width="25%" style="text-align:center;">ab 01.07.2015</td><td width="25%" style="text-align:right;">Seite 1 von 1</td></tr>
					<tr><td colspan="3" style="text-align:left;">von unheilbar erkrankten Patienten im häuslichen Umfeld</td></tr><tr><td colspan="3" style="text-align:left;">KV Nordrhein – Verband der Ersatzkassen e.V. (vdek)</td></tr></table>';
			}
			
			if($pdfname == 'ZAPV_Assessment_ii' || $pdfname == 'ZAPV_Beratung_Assessment_ii' || $pdfname == 'ZAPV_Assessment_ii_save' || $pdfname == 'ZAPV_Beratung_Assessment_ii_save')
			{
				$pdf->SetMargins(10, 20, 10);
				$pdf->SetFont('dejavusans', '', 9);
			}
			
			$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

			$excluded_css_cleanup_pdfs = array(
			    'emergencyplansapv',
			    'shanlage14',
				'ethicalform',
				'careservices',
				'careservices_save',
				'fallprotocolform',
				'sapvevaluation',
				'vdekanlage2',
				'emergencyplansapv24',
				'emergencyplansapv24_save',
				'brekinderperformance',
				'nrbillingform',
				'StandardDocumentationPDF',
			    'standarddocumentation_save',
			    'emergencyplansapvii',
			    'emergencyplansapvii_save',
			);
			
			if(!in_array($pdfname, $excluded_css_cleanup_pdfs))
			{
			    $html = preg_replace('/style=\"(.*)\"/i', '', $html);
			}
			//echo $html;exit;
			//added background!
			if($pdf_extra_id)
			{
				$bg_image = Pms_CommonData::getPdfBackground($post_data['clientid'], $pdf_extra_id);
				if($bg_image !== false)
				{
					$bg_image_path = PDFBG_PATH . '/' . $post_data['clientid'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
					if(is_file($bg_image_path))
					{
						$pdf->setBackgroundImage($bg_image_path);
					}
				}
			}

			if($_REQUEST['show_letter'] == '1')
			{
				print_r($html);
				exit;
			}

			$pdf->setHTML($html);
			
			//$tmpstmp = substr(md5(time() . rand(0, 999)), 0, 12);
			$tmpstmp = $pdf->uniqfolder(PDF_PATH);
			
			//mkdir('uploads/' . $tmpstmp);
			
			$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
			$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
			
			/*
			$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
			exec($cmd);
			$zipname = $tmpstmp . ".zip";
			$filename = "uploads/" . $tmpstmp . ".zip";
			$con_id = Pms_FtpFileupload::ftpconnect();

			if($con_id)
			{
				$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
				Pms_FtpFileupload::ftpconclose($con_id);
			}
			*/
			
			$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );

			
			

				
			
			if($pdfname == 'barthelscore')
			{
				$record_form_id = $post_data['fid'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
			}
			elseif($pdfname == 'wounddocumentation_incr')
			{
				$record_form_id = $post_data['fid'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
			}
			elseif($pdfname == 'painquestionnaire_save')
			{
				$record_form_id = $post_data['post_data']['formid'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
 
					// link to pdf
					$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt'; 
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $file_id;
					$cust->tabname = Pms_CommonData::aesEncrypt("painquestionnaire_save");
					$cust->user_id = $userid;
					$cust->done_date = date("Y-m-d H:i:s",strtotime($post_data['pain_date']));
					$cust->save();
			}
			elseif($pdfname == 'standarddocumentation_save')
			{
       		    $cust = new PatientFileUpload ();
			    $cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
			    $cust->ipid = $ipid;
			    $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
			    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
			    $cust->tabname = $pdfname;
			    $cust->system_generated = "1";
			    $cust->save();
			    $file_id = $cust->id;
			    
			    // link to pdf
			    $comment = 'PDF Formular: ' . $pdf_names [$pdfname] .' wurde hinterlegt';
			    $cust = new PatientCourse();
			    $cust->ipid = $ipid;
			    $cust->course_date = date("Y-m-d H:i:s", time());
			    $cust->course_type = Pms_CommonData::aesEncrypt("K");
			    $cust->course_title = Pms_CommonData::aesEncrypt($comment);
			    $cust->recordid = $file_id;
			    $cust->tabname = Pms_CommonData::aesEncrypt("standarddocumentation_save");
			    $cust->user_id = $userid;
			    $cust->done_date = date('Y-m-d H:i:s');			    
			    $cust->save();
			}
			elseif( $pdfname== 'fallprotocolform_save')
			{
				$record_form_id = $post_data['form_id'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
				
				// link to pdf
				$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->recordid = $file_id;
				
				if(!empty($post_data['date_fall']) >0)
				{
    				
    				if(!empty($post_data['time_fall']) > 0 ){
    				    $time_fall = ' '.$post_data['time_fall'].":00";
    				} else {
    				    $time_fall = " 00:00:00";
    				}
    				
    				$fal_done_date = $post_data['date_fall'].$time_fall;
    				
    				$cust->done_date = date("Y-m-d H:i:s", strtotime($fal_done_date));
				}
				else 
				{
					$cust->done_date = date("Y-m-d H:i:s", time());
				}
				$cust->tabname = Pms_CommonData::aesEncrypt("fallprotocolform_save");
				$cust->user_id = $userid;
				$cust->save();
			}
			elseif($pdfname == 'daystructure_save')
			{
				$record_form_id = $post_data['form_id'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
 
					// link to pdf
					$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt'; 
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $file_id;
					$cust->tabname = Pms_CommonData::aesEncrypt("daystructure_save");
					$cust->user_id = $userid;
					$cust->save();
			}
			elseif($pdfname == 'careservices_save')
			{
				$record_form_id = $post_data['form_id'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
 
					// link to pdf
					$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt'; 
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $file_id;
					$cust->tabname = Pms_CommonData::aesEncrypt("careservices_save");
					$cust->user_id = $userid;
					$cust->save();
			}
			elseif($pdfname == 'anlage2_save')
			{
				$record_form_id = $post_data['formid'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
			
    				// link to pdf
    				$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
    				$cust = new PatientCourse();
    				$cust->ipid = $ipid;
    				$cust->course_date = date("Y-m-d H:i:s", time());
    				$cust->course_type = Pms_CommonData::aesEncrypt("K");
    				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
    				$cust->recordid = $file_id;
    				$cust->tabname = Pms_CommonData::aesEncrypt("anlage2_save");
    				$cust->user_id = $userid;
    				$cust->save();
			}
			elseif($pdfname == 'anlage3nordrhein_save')
			{
				$record_form_id = $post_data['formid'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
					
				// link to pdf
				$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->recordid = $file_id;
				$cust->tabname = Pms_CommonData::aesEncrypt("anlage3nordrhein_save");
				$cust->user_id = $userid;
				$cust->save();
			}
			elseif($pdfname == 'emergencyplansapv24')
			{
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
					
				// link to pdf
				$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->recordid = $file_id;
				$cust->tabname = Pms_CommonData::aesEncrypt("emergencyplansapv24");
				$cust->user_id = $userid;
				$cust->save();
			}
			//ISPC-2736 Lore 12.11.2020
			elseif($pdfname == 'emergencyplansapvii')
			{
			    $cust = new PatientFileUpload ();
			    $cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
			    $cust->ipid = $ipid;
			    $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
			    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
			    $cust->tabname = $pdfname;
			    $cust->system_generated = "1";
			    $cust->save();
			    $file_id = $cust->id;
			    
			    // link to pdf
			    $comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
			    $cust = new PatientCourse();
			    $cust->ipid = $ipid;
			    $cust->course_date = date("Y-m-d H:i:s", time());
			    $cust->course_type = Pms_CommonData::aesEncrypt("K");
			    $cust->course_title = Pms_CommonData::aesEncrypt($comment);
			    $cust->recordid = $file_id;
			    $cust->tabname = Pms_CommonData::aesEncrypt("emergencyplansapvii");
			    $cust->user_id = $userid;
			    $cust->save();
			}
			elseif($pdfname == 'entlassungsmanagement_save'){

                    $cust = new PatientFileUpload ();
                    $cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
                    $cust->ipid = $ipid;
                    $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
                    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
                    $cust->tabname = $pdfname;
                    $cust->system_generated = "1";
                    $cust->save();
                    $file_id = $cust->id;

                    //add tag for uploaded file
                    $res = Doctrine_Query::create()
                        ->select('*')
                        ->from('PatientFileTags')
                        ->where('client = "' . $clientid . '"')
                        ->where('tag = "' .  $this->translate('discharge_form') . '"')
                        ->andWhere('isdelete = "0"')
                        ->orderBy('tag ASC');
                    $res_result = $res->fetchArray();
                    $tag_id = 0;

                    if(!is_array($res_result) || count($res_result) == 0){
                        //if tag doesn't exist, create it and find id
                        $patientFileTag = new PatientFileTags();
                        $patientFileTag->tag = $this->translate('discharge_form');
                        $patientFileTag->client = $clientid;
                        $patientFileTag->save();
                        $tag_id = $patientFileTag->id;
                    }else{
                        //if tag exists, find its id
                        $tag_array = $res_result[0];
                        $tag_id = $tag_array['id'];
                    }
                    $insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id,[$tag_id]);

                    // link to pdf
                    $comment =  $pdf_names[$pdfname] ;
                    $cust = new PatientCourse();
                    $cust->ipid = $ipid;
                    $cust->course_date = date("Y-m-d H:i:s", time());
                    $cust->course_type = Pms_CommonData::aesEncrypt("K");
                    $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                    $cust->recordid = $file_id;
                    $cust->tabname = Pms_CommonData::aesEncrypt("fileupload");
                    $cust->user_id = $userid;
                    $cust->save();

            }elseif($pdfname == 'reassessment_nr_save' || $pdfname == 'reassessment_nr'){ //ISPC2476, Reassessment Nordrhein
                $cust = new PatientFileUpload ();
                $cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
                $cust->ipid = $ipid;
                $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
                $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
                $cust->tabname = $pdfname;
                $cust->system_generated = "1";
                $cust->save();
                $file_id = $cust->id;

                //add tag for uploaded file
                $res = Doctrine_Query::create()
                    ->select('*')
                    ->from('PatientFileTags')
                    ->where('client = "' . $clientid . '"')
                    ->where('tag = "' .  'Reassessment Nordrhein' . '"')
                    ->andWhere('isdelete = "0"')
                    ->orderBy('tag ASC');
                $res_result = $res->fetchArray();
                $tag_id = 0;

                if(!is_array($res_result) || count($res_result) == 0){
                    //if tag doesn't exist, create it and find id
                    $patientFileTag = new PatientFileTags();
                    $patientFileTag->tag = 'Reassessment Nordrhein';
                    $patientFileTag->client = $clientid;
                    $patientFileTag->save();
                    $tag_id = $patientFileTag->id;
                }else{
                    //if tag exists, find its id
                    $tag_array = $res_result[0];
                    $tag_id = $tag_array['id'];
                }
                $insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id,[$tag_id]);

                // link to pdf
                $comment =  $pdf_names[$pdfname] ;
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                $cust->recordid = $file_id;
                $cust->tabname = Pms_CommonData::aesEncrypt("fileupload");
                $cust->user_id = $userid;
                $cust->save();
                //Maria:: Migration CISPC to ISPC 20.08.2020
                $comment =  "Karnofsky: " . $post_data['karnofsky']['value'] ;
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                $cust->recordid = $file_id;
                $cust->tabname = Pms_CommonData::aesEncrypt("reassessment");
                $cust->user_id = $userid;
                $cust->save();

                $comment =  "IPOS Score: " . $post_data['ipos']['patient_ipos_values']['score'] ;
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                $cust->recordid = $file_id;
                $cust->tabname = Pms_CommonData::aesEncrypt("reassessment");
                $cust->user_id = $userid;
                $cust->save();

                if(strlen(trim($post_data['comment']['text'])) > 0){
                    $comment =  "Kommentar: " . $post_data['comment']['text'] ;
                    $cust = new PatientCourse();
                    $cust->ipid = $ipid;
                    $cust->course_date = date("Y-m-d H:i:s", time());
                    $cust->course_type = Pms_CommonData::aesEncrypt("K");
                    $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                    $cust->recordid = $file_id;
                    $cust->tabname = Pms_CommonData::aesEncrypt("reassessment");
                    $cust->user_id = $userid;
                    $cust->save();

                }

                if(strlen(trim($post_data['befund']['text'])) > 0){
                    $comment =  "Befund: " . $post_data['befund']['text'] ;
                    $cust = new PatientCourse();
                    $cust->ipid = $ipid;
                    $cust->course_date = date("Y-m-d H:i:s", time());
                    $cust->course_type = Pms_CommonData::aesEncrypt("K");
                    $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                    $cust->recordid = $file_id;
                    $cust->tabname = Pms_CommonData::aesEncrypt("reassessment");
                    $cust->user_id = $userid;
                    $cust->save();

                }

                if(strlen(trim($post_data['summary']['text'])) > 0){
                    $comment =  "Zusammenfassung/Auftrag: " . $post_data['summary']['text'] ;
                    $cust = new PatientCourse();
                    $cust->ipid = $ipid;
                    $cust->course_date = date("Y-m-d H:i:s", time());
                    $cust->course_type = Pms_CommonData::aesEncrypt("K");
                    $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                    $cust->recordid = $file_id;
                    $cust->tabname = Pms_CommonData::aesEncrypt("reassessment");
                    $cust->user_id = $userid;
                    $cust->save();

                }


            }elseif($pdfname == 'therapiesteuerung'){

			    //ISPC-2622, elena, 02.07.2020
                $cust = new PatientFileUpload ();
                $cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
                $cust->ipid = $ipid;
                $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
                $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
                $cust->tabname = $pdfname;
                $cust->system_generated = "1";
                $cust->save();
                $file_id = $cust->id;

                //add tag for uploaded file
                $res = Doctrine_Query::create()
                    ->select('*')
                    ->from('PatientFileTags')
                    ->where('client = "' . $clientid . '"')
                    ->where('tag = "' .  'Therapiesteuerung' . '"')
                    ->andWhere('isdelete = "0"')
                    ->orderBy('tag ASC');
                $res_result = $res->fetchArray();
                $tag_id = 0;

                if(!is_array($res_result) || count($res_result) == 0){
                    //if tag doesn't exist, create it and find id
                    $patientFileTag = new PatientFileTags();
                    $patientFileTag->tag = 'Therapiesteuerung';
                    $patientFileTag->client = $clientid;
                    $patientFileTag->save();
                    $tag_id = $patientFileTag->id;
                }else{
                    //if tag exists, find its id
                    $tag_array = $res_result[0];
                    $tag_id = $tag_array['id'];
                }
                $insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id,[$tag_id]);


                //write  in verlauf
                $comment_score = 'Herzinsuffizienz Formular wurde ausgefüllt.';
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment_score);
                $cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
                $cust->recordid = $file_id;
                $cust->user_id = $userid;
                $cust->save();
               


                // link to pdf
                $comment =  $pdf_names[$pdfname] ;
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                $cust->recordid = $file_id;
                $cust->tabname = Pms_CommonData::aesEncrypt("fileupload");
                $cust->user_id = $userid;
                $cust->save();


            }elseif($pdfname == 'herzinsuffizienz'){

			    //ISPC-2621, elena, 03.07.2020
                $cust = new PatientFileUpload ();
                $cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
                $cust->ipid = $ipid;
                $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
                $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
                $cust->tabname = $pdfname;
                $cust->system_generated = "1";
                $cust->save();
                $file_id = $cust->id;

                //add tag for uploaded file
                $res = Doctrine_Query::create()
                    ->select('*')
                    ->from('PatientFileTags')
                    ->where('client = "' . $clientid . '"')
                    ->where('tag = "' .  'Therapiesteuerung' . '"')
                    ->andWhere('isdelete = "0"')
                    ->orderBy('tag ASC');
                $res_result = $res->fetchArray();
                $tag_id = 0;

                if(!is_array($res_result) || count($res_result) == 0){
                    //if tag doesn't exist, create it and find id
                    $patientFileTag = new PatientFileTags();
                    $patientFileTag->tag = 'Herzinsuffizienz';
                    $patientFileTag->client = $clientid;
                    $patientFileTag->save();
                    $tag_id = $patientFileTag->id;
                }else{
                    //if tag exists, find its id
                    $tag_array = $res_result[0];
                    $tag_id = $tag_array['id'];
                }
                $insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id,[$tag_id]);


                //write  in verlauf
                $comment_score = 'Herzinsuffienz Formular wurde ausgefüllt.';
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment_score);
                $cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
                $cust->recordid = $file_id;
                $cust->user_id = $userid;
                $cust->save();



                // link to pdf
                $comment =  $pdf_names[$pdfname] ;
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                $cust->recordid = $file_id;
                $cust->tabname = Pms_CommonData::aesEncrypt("fileupload");
                $cust->user_id = $userid;
                $cust->save();


            }elseif($pdfname == 'copd'){

			    //ISPC-2620, elena, 06.07.2020
                $cust = new PatientFileUpload ();
                $cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
                $cust->ipid = $ipid;
                $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
                $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
                $cust->tabname = $pdfname;
                $cust->system_generated = "1";
                $cust->save();
                $file_id = $cust->id;

                //add tag for uploaded file
                $res = Doctrine_Query::create()
                    ->select('*')
                    ->from('PatientFileTags')
                    ->where('client = "' . $clientid . '"')
                    ->where('tag = "' .  'COPD' . '"')
                    ->andWhere('isdelete = "0"')
                    ->orderBy('tag ASC');
                $res_result = $res->fetchArray();
                $tag_id = 0;

                if(!is_array($res_result) || count($res_result) == 0){
                    //if tag doesn't exist, create it and find id
                    $patientFileTag = new PatientFileTags();
                    $patientFileTag->tag = 'COPD';
                    $patientFileTag->client = $clientid;
                    $patientFileTag->save();
                    $tag_id = $patientFileTag->id;
                }else{
                    //if tag exists, find its id
                    $tag_array = $res_result[0];
                    $tag_id = $tag_array['id'];
                }
                $insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id,[$tag_id]);


                //write  in verlauf
                $comment_score = 'COPD Formular wurde ausgefüllt.';
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment_score);
                $cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
                $cust->recordid = $file_id;
                $cust->user_id = $userid;
                $cust->save();



                // link to pdf
                $comment =  $pdf_names[$pdfname] ;
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                $cust->recordid = $file_id;
                $cust->tabname = Pms_CommonData::aesEncrypt("fileupload");
                $cust->user_id = $userid;
                $cust->save();


            }elseif($pdfname == 'cat'){

			    //ISPC-2620, elena, 06.07.2020
                $cust = new PatientFileUpload ();
                $cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
                $cust->ipid = $ipid;
                $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
                $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
                $cust->tabname = $pdfname;
                $cust->system_generated = "1";
                $cust->save();
                $file_id = $cust->id;

                //add tag for uploaded file
                $res = Doctrine_Query::create()
                    ->select('*')
                    ->from('PatientFileTags')
                    ->where('client = "' . $clientid . '"')
                    ->where('tag = "' .  'CAT' . '"')
                    ->andWhere('isdelete = "0"')
                    ->orderBy('tag ASC');
                $res_result = $res->fetchArray();
                $tag_id = 0;

                if(!is_array($res_result) || count($res_result) == 0){
                    //if tag doesn't exist, create it and find id
                    $patientFileTag = new PatientFileTags();
                    $patientFileTag->tag = 'CAT';
                    $patientFileTag->client = $clientid;
                    $patientFileTag->save();
                    $tag_id = $patientFileTag->id;
                }else{
                    //if tag exists, find its id
                    $tag_array = $res_result[0];
                    $tag_id = $tag_array['id'];
                }
                $insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id,[$tag_id]);


                //write  in verlauf
                $comment_score = 'CAT Formular wurde ausgefüllt. Score ' . $post_data['cat']['points'];
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment_score);
                $cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
                $cust->recordid = $file_id;
                $cust->user_id = $userid;
                $cust->save();



                // link to pdf
                $comment =  $pdf_names[$pdfname] ;
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                $cust->recordid = $file_id;
                $cust->tabname = Pms_CommonData::aesEncrypt("fileupload");
                $cust->user_id = $userid;
                $cust->save();


            }elseif($pdfname == 'interventions'  ){

			    //ISPC-2530, elena, 12.08.2020
                $cust = new PatientFileUpload ();
                $cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
                $cust->ipid = $ipid;
                $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
                $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
                $cust->tabname = $pdfname;
                $cust->system_generated = "1";
                $cust->save();
                $file_id = $cust->id;

                //add tag for uploaded file
                $res = Doctrine_Query::create()
                    ->select('*')
                    ->from('PatientFileTags')
                    ->where('client = "' . $clientid . '"')
                    ->where('tag = "' .  'Interventionen' . '"')
                    ->andWhere('isdelete = "0"')
                    ->orderBy('tag ASC');
                $res_result = $res->fetchArray();
                $tag_id = 0;

                if(!is_array($res_result) || count($res_result) == 0){
                    //if tag doesn't exist, create it and find id
                    $patientFileTag = new PatientFileTags();
                    $patientFileTag->tag = 'Interventionen';
                    $patientFileTag->client = $clientid;
                    $patientFileTag->save();
                    $tag_id = $patientFileTag->id;
                }else{
                    //if tag exists, find its id
                    $tag_array = $res_result[0];
                    $tag_id = $tag_array['id'];
                }
                $insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id,[$tag_id]);


                //write  in verlauf
                $comment = 'PDF für Interventionen wurde angelegt.';
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                $cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
                $cust->recordid = $file_id;
                $cust->user_id = $userid;
                $cust->save();



                // link to pdf
                $comment =  $pdf_names[$pdfname] ;
                $cust = new PatientCourse();
                $cust->ipid = $ipid;
                $cust->course_date = date("Y-m-d H:i:s", time());
                $cust->course_type = Pms_CommonData::aesEncrypt("K");
                $cust->course_title = Pms_CommonData::aesEncrypt($comment);
                $cust->recordid = $file_id;
                $cust->tabname = Pms_CommonData::aesEncrypt("fileupload");
                $cust->user_id = $userid;
                $cust->save();


            }
			//ISPC - 2129
			elseif($pdfname == 'emergencyplansapv24_save')
			{
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
					
				// link to pdf
				$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->recordid = $file_id;
				$cust->tabname = Pms_CommonData::aesEncrypt("emergencyplansapv24");
				$cust->user_id = $userid;
				$cust->save();
				
				//insert system file tags
				$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id, array('21'));
				//set active version
				$actv = new PatientFileVersion();
				$data= array();
				if($post_data['active_version'] == '1')
				{
					$data['file'] = $file_id;
					$data['active_version'] = '1';
					
					$factv = $actv->get_reset_active_version($ipid);
						
					$actconn = $actv->getTable()->getConnection();
					$acttable = new PatientFileVersionTable('', $actconn);
					$record = $acttable->findOrCreateOneBy('file', $file_id, $data);
				}
				else
				{
					$data['file'] = $file_id;
					$data['active_version'] = '0';
					$actconn = $actv->getTable()->getConnection();
					$acttable = new PatientFileVersionTable('', $actconn);
					$record = $acttable->findOrCreateOneBy('file', $file_id, $data);
				}
			}
			//ISPC-2736 Lore 12.11.2020
			elseif($pdfname == 'emergencyplansapvii_save')
			{
			    $cust = new PatientFileUpload ();
			    $cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
			    $cust->ipid = $ipid;
			    $cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
			    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
			    $cust->tabname = $pdfname;
			    $cust->system_generated = "1";
			    $cust->save();
			    $file_id = $cust->id;
			    
			    // link to pdf
			    $comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
			    $cust = new PatientCourse();
			    $cust->ipid = $ipid;
			    $cust->course_date = date("Y-m-d H:i:s", time());
			    $cust->course_type = Pms_CommonData::aesEncrypt("K");
			    $cust->course_title = Pms_CommonData::aesEncrypt($comment);
			    $cust->recordid = $file_id;
			    $cust->tabname = Pms_CommonData::aesEncrypt("emergencyplansapvii");
			    $cust->user_id = $userid;
			    $cust->save();
			    
			    //insert system file tags
			    $insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id, array('21'));
			    //set active version
			    $actv = new PatientFileVersion();
			    $data= array();
			    if($post_data['active_version'] == '1')
			    {
			        $data['file'] = $file_id;
			        $data['active_version'] = '1';
			        
			        $factv = $actv->get_reset_active_version($ipid);
			        
			        $actconn = $actv->getTable()->getConnection();
			        $acttable = new PatientFileVersionTable('', $actconn);
			        $record = $acttable->findOrCreateOneBy('file', $file_id, $data);
			    }
			    else
			    {
			        $data['file'] = $file_id;
			        $data['active_version'] = '0';
			        $actconn = $actv->getTable()->getConnection();
			        $acttable = new PatientFileVersionTable('', $actconn);
			        $record = $acttable->findOrCreateOneBy('file', $file_id, $data);
			    }
			}
			elseif($pdfname == 'ZAPV_Assessment_ii_save' || $pdfname == 'ZAPV_Beratung_Assessment_ii_save')
			{
				if($pdfname == 'ZAPV_Assessment_ii_save')
				{
					$record_id = $post['form_id'];
// 					$form_tabname = 'zapv_assessment_ii_admission';
					$form_tabname = 'save_zapv_assessment_ii_admission';
				}
				elseif($pdfname == 'ZAPV_Beratung_Assessment_ii_save')
				{
					$record_id = $post['form_id'];
// 					$form_tabname = 'zapv_assessment_ii_consulting';
					$form_tabname = 'save_zapv_assessment_ii_consulting';
				}
				
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']);
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_id;
				$cust->tabname = $form_tabname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
				
					
				// link to pdf
				$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->recordid = $file_id;
				$cust->tabname = Pms_CommonData::aesEncrypt($form_tabname);
				$cust->user_id = $userid;
				$cust->save();
			}
			else
			{
				if($pdfname != 'daystructure' && $pdfname != 'careservices' )
				{
					
					if($pdfname == 'ZAPV_Beratung_Assessment_ii')
					{
						$form_tabname_simple = 'zapv_assessment_ii_admission';
					}
					elseif($pdfname == 'ZAPV_Beratung_Assessment_ii')
					{
						$form_tabname_simple = 'zapv_assessment_ii_consulting';
					}
					
					$cust = new PatientFileUpload ();
					$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
					$cust->ipid = $ipid;
					$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
					$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					
					if(isset($form_tabname_simple)){
						$cust->tabname = Pms_CommonData::aesEncrypt($form_tabname_simple);
					}
					
					$cust->system_generated = "1";
					$cust->save();
					$file_id = $cust->id;
				}
				
				if($pdfname == "fallprotocolform")
				{
				    
				    $cust = new PatientCourse ();
				    $cust->ipid = $ipid;
				    $cust->course_date = date("Y-m-d H:i:s", time());
				    $cust->course_type = Pms_CommonData::aesEncrypt("K");
				    $cust->course_title = Pms_CommonData::aesEncrypt(addslashes('' . $pdf_names [$pdfname] . ' wurde erstellt'));
				    $cust->tabname = $form_tabname;
				    $cust->tabname = Pms_CommonData::aesEncrypt('' . $pdfname . '');
				    $cust->user_id = $userid;
				    $cust->save();
				}
				
			}

			if($pdfname == "bresapvperformance" || $pdfname == "shanlage14")
			{
				//insert system file tags
				$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id, array('6'));
			}


			if($pdfname == 'wl_doctor_letter' || $pdfname == 'wl_nurse_letter')
			{
				$comment = '';
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
				$cust->recordid = $file_id;
				$cust->user_id = $userid;
				$cust->save();
			}
			else if($pdfname == 'barthelscore')
			{
				if($post_data['barthel_preview'] == '0')
				{
					//write score in verlauf
					$comment_score = 'Barthel Index Score: ' . $post_data['total_score'];
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment_score);
					$cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
					$cust->recordid = $file_id;
					$cust->user_id = $userid;
					$cust->save();
				}

				//write
				$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->tabname = Pms_CommonData::aesEncrypt($pdfname . 'pdf');
				$cust->recordid = $file_id;
				$cust->user_id = $userid;
				$cust->save();
			}
 
			if($pdfname != 'wl_doctor_letter' 
			    && $pdfname != 'barthelscore' 
			    && $pdfname != 'wounddocumentation_incr' 
			    && $pdfname != 'painquestionnaire_save'  
			    && $pdfname != 'daystructure_save' 
			    && $pdfname != 'anlage2_save'
				&& $pdfname != 'emergencyplansapv24_save' 
			    && $pdfname != 'emergencyplansapvii_save'
			    && $pdfname != 'anlage3nordrhein_save'
			    && $pdfname != 'careservices_save'	
			    && $pdfname != 'fallprotocolform_save'
			    && $pdfname != 'ZAPV_Assessment_ii_save'
			    && $pdfname != 'ZAPV_Beratung_Assessment_ii_save'
			    && $pdfname != 'standarddocumentation_save'
                 && $pdfname != 'reassessment_nr_save'
                && $pdfname != 'therapiesteuerung'
                && $pdfname != 'herzinsuffizienz'
                && $pdfname != 'copd'
                && $pdfname != 'cat'
				
			    )
			{
				// pdf sent to download in browser and then nothing more happens. If you need to do something else later in action, avoid this if clause - elena, 24.06.2020
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}

			
			if($pdfname == 'barthelscore' && $post_data['barthel_preview'] == '1')
			{
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}
			
			
			if($pdfname == 'daystructure_save' && $post_data['preview'] == '1')
			{
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}
		}
		
		private function generate_pdf_docx($post_data, $pdfname, $filename, $pdf_extra_id = false)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			$post_data = Pms_CommonData::clear_pdf_data($post_data, array('patientname', 'address', 'image', 'visits_array'));
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);

			$htmlform = Pms_Template::createTemplate($post_data, 'templates/' . $filename);

			$pdf_names = array(
				'shanlage14' => 'Anlage 14 ' . date('m.Y', strtotime($post_data['curent_month'])),
				'painquestionnaire' => 'Schmerzbogen',
				'painquestionnaire_save' => 'Schmerzbogen',
				'daystructure' => 'Tagesstrukturplan',
				'daystructure_save' => 'Tagesstrukturplan',
				'bra_anlage_5' => 'Anlage5'
			);

			$portrait_pdfs = array(
				'painquestionnaire',
				'painquestionnaire_save',
				'daystructure',
				'daystructure_save'
//				'anlage3', 'wl_doctor_letter', 'recordingreport', 'nie_recordingreport', 'barthelscore', 'wounddocumentation', 'wounddocumentation_incr'
			);

			if(in_array($pdfname, $portrait_pdfs))
			{
				$orientation = 'P';
			}
			else
			{
				$orientation = 'L'; //anlage 14 (all pdfnames which are not in $portrait_pdf
			}

// 			$pdf = new Pms_PDF($orientation, 'mm', 'A4', true, 'UTF-8', false);
			$pdf = new Pms_DocxPDF($orientation, 'mm', $format, true, 'UTF-8', false);
			$pdf->setDefaults(true); //defaults with header
			$pdf->setImageScale(1.6);
			$pdf->setPrintFooter(false); // remove black line at bottom

			if($pdfname == 'shanlage14')
			{
				$pdf->SetMargins(3, 5, 3); //reset margins
			}
			if($pdfname == 'painquestionnaire' || $pdfname == 'painquestionnaire_save')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}
			if($pdfname == 'daystructure' || $pdfname == 'daystructure_save')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}
			if($pdfname == 'bra_anlage_5')
			{
				$pdf->SetMargins(10, 5, 10); //reset margins
			}


			$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

			//added background!
			if($pdf_extra_id)
			{
				$bg_image = Pms_CommonData::getPdfBackground($post_data['clientid'], $pdf_extra_id);
				if($bg_image !== false)
				{
					$bg_image_path = PDFBG_PATH . '/' . $post_data['clientid'] . '/' . $bg_image['id'] . '_' . $bg_image['filename'];
					if(is_file($bg_image_path))
					{
						$pdf->setBackgroundImage($bg_image_path);
					}
				}
			}

			if($_REQUEST['show_letter'] == '1')
			{
				print_r($html);
				exit;
			}

			$pdf->setHTML($html);
			
// 			$tmpstmp = substr(md5(time() . rand(0, 999)), 0, 12);
// 			mkdir('uploads/' . $tmpstmp);
			$tmpstmp = $pdf->uniqfolder(PDF_PATH);
			$pdf->toFile(PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf');
			$_SESSION['filename'] = $tmpstmp . '/' . $pdfname . '.pdf';
// 			$cmd = "zip -9 -r -P " . $logininfo->filepass . " uploads/" . $tmpstmp . ".zip uploads/" . $tmpstmp . "; rm -r uploads/" . $tmpstmp;
// 			exec($cmd);
			$zipname = $tmpstmp . ".zip";
			$filename = "uploads/" . $tmpstmp . ".zip";
			$con_id = Pms_FtpFileupload::ftpconnect();
/*
			if($con_id)
			{
				$upload = Pms_FtpFileupload::fileupload($con_id, $filename, 'uploads/' . $zipname);
				Pms_FtpFileupload::ftpconclose($con_id);
			}
			*/
			$ftp_put_queue_result = Pms_CommonData :: ftp_put_queue (PDF_PATH . '/' . $tmpstmp . '/' . $pdfname . '.pdf' , "uploads" );
				

			if($pdfname == 'barthelscore')
			{
				$record_form_id = $post_data['fid'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
			}
			elseif($pdfname == 'wounddocumentation_incr')
			{
				$record_form_id = $post_data['fid'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
			}
			elseif($pdfname == 'painquestionnaire_save')
			{
				$record_form_id = $post_data['post_data']['formid'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
 
					// link to pdf
					$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt'; 
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $file_id;
					$cust->tabname = Pms_CommonData::aesEncrypt("painquestionnaire_save");
					$cust->user_id = $userid;
					$cust->save();
			}
			elseif($pdfname == 'daystructure_save')
			{
				$record_form_id = $post_data['form_id'];
				$cust = new PatientFileUpload ();
				$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
				$cust->ipid = $ipid;
				$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION['filename']); //$post['fileinfo']['filename']['name'];
				$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
				$cust->recordid = $record_form_id;
				$cust->tabname = $pdfname;
				$cust->system_generated = "1";
				$cust->save();
				$file_id = $cust->id;
 
					// link to pdf
					$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt'; 
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment);
					$cust->recordid = $file_id;
					$cust->tabname = Pms_CommonData::aesEncrypt("daystructure_save");
					$cust->user_id = $userid;
					$cust->save();
			}
			else
			{
				if($pdfname != 'daystructure'){
					$cust = new PatientFileUpload ();
					$cust->title = Pms_CommonData::aesEncrypt(addslashes($pdf_names[$pdfname]));
					$cust->ipid = $ipid;
					$cust->file_name = Pms_CommonData::aesEncrypt($_SESSION ['filename']); //$post['fileinfo']['filename']['name'];
					$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
					$cust->system_generated = "1";
					$cust->save();
					$file_id = $cust->id;
				}
			}

			if($pdfname == "bresapvperformance" || $pdfname == "shanlage14")
			{
				//insert system file tags
				$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($file_id, array('6'));
			}


			if($pdfname == 'wl_doctor_letter' || $pdfname == 'wl_nurse_letter')
			{
				$comment = '';
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
				$cust->recordid = $file_id;
				$cust->user_id = $userid;
				$cust->save();
			}
			else if($pdfname == 'barthelscore')
			{
				if($post_data['barthel_preview'] == '0')
				{
					//write score in verlauf
					$comment_score = 'Barthel Index Score: ' . $post_data['total_score'];
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->course_title = Pms_CommonData::aesEncrypt($comment_score);
					$cust->tabname = Pms_CommonData::aesEncrypt($pdfname);
					$cust->recordid = $file_id;
					$cust->user_id = $userid;
					$cust->save();
				}

				//write
				$comment = 'PDF des ' . $pdf_names [$pdfname] . ' in Dateien und Dokumente wurde hinterlegt';
				$cust = new PatientCourse();
				$cust->ipid = $ipid;
				$cust->course_date = date("Y-m-d H:i:s", time());
				$cust->course_type = Pms_CommonData::aesEncrypt("K");
				$cust->course_title = Pms_CommonData::aesEncrypt($comment);
				$cust->tabname = Pms_CommonData::aesEncrypt($pdfname . 'pdf');
				$cust->recordid = $file_id;
				$cust->user_id = $userid;
				$cust->save();
			}

			if($pdfname != 'wl_doctor_letter' && $pdfname != 'barthelscore' && $pdfname != 'wounddocumentation_incr' && $pdfname != 'painquestionnaire_save'  && $pdfname != 'daystructure_save')
			{
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}

			if($pdfname == 'barthelscore' && $post_data['barthel_preview'] == '1')
			{
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}
			if($pdfname == 'daystructure_save' && $post_data['preview'] == '1')
			{
				ob_end_clean();
				ob_start();
				$pdf->toBrowser($pdfname . '.pdf', 'D');
				exit;
			}
		}

		private function get_period_contact_forms($ipid, $current_period, $duration = false)
		{
			$contact_from_course = Doctrine_Query::create()
				->select("id,ipid,recordid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('ipid = ?', $ipid)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->orderBy('course_date ASC');

			$contact_v = $contact_from_course->fetchArray();

			$deleted_contact_forms[] = '9999999999999999';
			foreach($contact_v as $k_contact_v => $v_contact_v)
			{
				$deleted_contact_forms[] = $v_contact_v['recordid'];
			}

			$contact_form_visits = Doctrine_Query::create()
				->select("*")
				->from("ContactForms")
				->where('ipid = ?', $ipid)
				->andWhereNotIn('id', $deleted_contact_forms)
				->andWhere('DATE(billable_date) BETWEEN ? AND ? ', array($current_period['start'],$current_period['end']))
				->andWhere('isdelete = ?',0)
				->andWhere('parent = ?',0);
			$contact_form_visits->orderBy('begin_date_h, begin_date_m ASC');
			$contact_form_visits_res = $contact_form_visits->fetchArray();

			foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
			{
				$contact_form_visit_date = date('Y-m-d', strtotime($v_contact_visit['billable_date']));

				if($duration)
				{
// 					$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_duration(str_pad($v_contact_visit['begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_contact_visit['end_date_m'], 2, "0", STR_PAD_LEFT), $v_contact_visit['date']);
					$v_contact_visit['visit_duration'] = Pms_CommonData::calculate_visit_durationbydates($v_contact_visit['start_date'],$v_contact_visit['end_date']);
				}

				$cf_visit_days[$contact_form_visit_date][] = $v_contact_visit;
			}

			return $cf_visit_days;
		}

		private function get_period_months($date1, $date2, $format = "Ym")
		{
			$time1 = strtotime(date('Y-m', strtotime($date1) . "-01")); //
			$time2 = strtotime($date2);
			$my = date('mY', $time2);

			while($time1 < $time2)
			{
				if(!in_array(date($format, $time1), $months))
				{
					$months[] = date($format, $time1);
				}
				$time1 = strtotime(' +1 month', $time1);
			}

			if(!in_array(date($format, $time2), $months))
			{
				$months[] = date($format, $time2);
			}
			return $months;
		}

		public function receiptpiAction()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$this->view->encid = Pms_Uuid::encrypt($decid);
			$ipid = Pms_CommonData::getIpid($decid);

			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->clientid = $logininfo->clientid;


			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;
			/* --------------------Check for MMI module -- used only for livesearch in MMI Receipt-- --------- */
			$modules = new Modules();
			if($modules->checkModulePrivileges("87", $logininfo->clientid))
			{
				$this->view->show_mmi = "1";
			}
			else
			{
				$this->view->show_mmi = "0";
			}
			/* ------------------------------------------------------------------------------ */

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
			}

			$isadmin = 0;
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}

//			if($user->mmi_k)
			if(strlen(Zend_Registry::get('mmilicserial')) > '0')
			{
				$this->view->show_pi = 1;
			}

			/* ----------------------------------POST------------------- */
			if($_POST)
			{
				if($_POST['stampusers'] > 0)
				{
					if($multiplestamps_option === true)
					{

						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);

						$userstamp1 = $userstatmp[0]['row1'];
						$userstamp2 = $userstatmp[0]['row2'];
						$userstamp3 = $userstatmp[0]['row3'];
						$userstamp4 = $userstatmp[0]['row4'];
						$userstamp5 = $userstatmp[0]['row5'];
						$userstamp6 = $userstatmp[0]['row6'];
						$userstamp7 = $userstatmp[0]['row7'];
					}
					else
					{
						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getLastUserStamp($_POST['stampusers']);

						$userstamp1 = $userstatmp[0]['row1'];
						$userstamp2 = $userstatmp[0]['row2'];
						$userstamp3 = $userstatmp[0]['row3'];
						$userstamp4 = $userstatmp[0]['row4'];
						$userstamp5 = $userstatmp[0]['row5'];
						$userstamp6 = $userstatmp[0]['row6'];
						$userstamp7 = $userstatmp[0]['row7'];
					}
				}
				else
				{
					$_SESSION['lanr'] = $_POST['lanr'];
					$_SESSION['betriebsstatten_nr'] = $_POST['betriebsstatten_nr'];

					$userstamp1 = $_POST['userstamp1'];
					$userstamp2 = $_POST['userstamp2'];
					$userstamp3 = $_POST['userstamp3'];
					$userstamp4 = $_POST['userstamp4'];
					$userstamp5 = $_POST['userstamp5'];
					$userstamp6 = $_POST['userstamp6'];
					$userstamp7 = $_POST['userstamp7'];
				}

				/**				 * *********************LAYOUT PDF********************************* */
				$pdf = new Pms_SIMPLETCPDF('L', PDF_UNIT, 'A6', true, 'UTF-8', false);

				$pdf->SetMargins(0, 0, 0, 0);
				$pdf->SetHeaderMargin(1);
				$pdf->SetFooterMargin(1);

				$pdf->AddPage();
				$pdf->SetAutoPageBreak(false, 0);

				$bg_image_path = PDFBG_PATH . '/scaled_x.jpg';
				if(is_file($bg_image_path))
				{
//					$pdf->Image($bg_image_path, 0, 0, 148, 105, '', '', '', false, 300, '', false, false, 0, false, false, true);
				}

				$border = '0';

				$marginLeft = 8;
				$marginLeft2 = $marginLeft + 12;
				$marginLeft3 = $marginLeft + 58;

				$xMark = '<span style="font-size: 14px; font-family: Arial;">X</span>';

				$html = '<span style="font-size: 10px; font-family: Arial;">' . $_POST['insurancecomname'] . '</span>';
				$pdf->writeHTMLCell(85, 3, $marginLeft, 7, $html, $border, '', 0, true, 'L', true);

				$html = '<span style="font-size: 10px; font-family: Arial;">' . $_POST['patientlastname'] . '</span>';
				$pdf->writeHTMLCell(60, 3, $marginLeft, 17, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size: 10px; font-family: Arial;">' . $_POST['patientfirstname'] . '</span>';
				$pdf->writeHTMLCell(60, 3, $marginLeft, 21, $html, $border, 1, 0, true, 'L', true);

//				$html = '<span style="font-size: 9px; font-family: courier;">' . $_POST['patientlastname'] . '</span>';
//				$pdf->writeHTMLCell(60, 3, $marginLeft, 21, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size: 9px; font-family: Arial;">' . $_POST['street'] . '</span>';
				$pdf->writeHTMLCell(60, 3, $marginLeft, 25, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size: 9px; font-family: Arial;">' . $_POST['zipcode'] . '</span>';
				$pdf->writeHTMLCell(50, 3, $marginLeft, 29, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size: 9px; font-family: Arial;">' . $_POST['city'] . '</span>';
				$pdf->writeHTMLCell(50, 3, $marginLeft2, 29, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size: 9px; font-family: Arial;">' . $_POST['birthdate'] . '</span>';
				$pdf->writeHTMLCell(50, 3, ($marginLeft3 + 6), 22, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size: 9px; font-family: Arial;">' . $_POST['kassenno'] . '</span>';
				$pdf->writeHTMLCell(50, 3, $marginLeft, 38, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size: 9px; font-family: Arial;">' . $_POST['insuranceno'] . '</span>';
				$pdf->writeHTMLCell(50, 3, $marginLeft + 23, 38, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size: 9px; font-family: Arial;">' . $_POST['status'] . '</span>';
				$pdf->writeHTMLCell(50, 3, $marginLeft + 58, 38, $html, $border, 1, 0, true, 'L', true);

				$font_size_bsnr = "9px";
				if(strlen(trim(rtrim($_POST['betriebsstatten_nr']))) > '15')
				{
					$font_size_bsnr = "6px";
				}

				$font_size_lanr = "9px";
				if(strlen(trim(rtrim($_POST['lanr']))) > '15')
				{
					$font_size_lanr = "6px";
				}

				$html = '<span style="font-size:' . $font_size_bsnr . '; font-family: Arial;">' . $_POST['betriebsstatten_nr'] . '</span>';
				$pdf->writeHTMLCell(50, 3, $marginLeft, 47, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size:' . $font_size_lanr . '; font-family: Arial;">' . $_POST['lanr'] . '</span>';
				$pdf->writeHTMLCell(50, 3, $marginLeft + 29, 47, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size: 9px; font-family: Arial;">' . $_POST['datum'] . '</span>';
				$pdf->writeHTMLCell(50, 3, $marginLeft + 58, 47, $html, $border, 1, 0, true, 'L', true);

				if(in_array('1', $_POST['getiuhrfrei']))
				{
					$pdf->writeHTMLCell(50, 3, 1, 6.5, $xMark, $border, 1, 0, true, 'L', true);
				}

				if(in_array('2', $_POST['getiuhrfrei']))
				{
					$pdf->writeHTMLCell(50, 3, 1, 13.2, $xMark, $border, 1, 0, true, 'L', true);
				}

				if(in_array('3', $_POST['getiuhrfrei']))
				{
					$pdf->writeHTMLCell(50, 3, 1, 20, $xMark, $border, 1, 0, true, 'L', true);
				}

				if(in_array('4', $_POST['getiuhrfrei']))
				{
					$pdf->writeHTMLCell(50, 3, 1, 28.75, $xMark, $border, 1, 0, true, 'L', true);
				}

				if(in_array('5', $_POST['getiuhrfrei']))
				{
					$pdf->writeHTMLCell(50, 3, 1, 37.75, $xMark, $border, 1, 0, true, 'L', true);
				}

				if(in_array('6', $_POST['getiuhrfrei']))
				{
					$pdf->writeHTMLCell(50, 3, 1, 46.75, $xMark, $border, 1, 0, true, 'L', true);
				}

				if(in_array('8', $_POST['getiuhrfrei']))
				{
					$pdf->writeHTMLCell(50, 3, 1, 59.75, $xMark, $border, 1, 0, true, 'L', true);
				}

				if(in_array('9', $_POST['getiuhrfrei']))
				{
					$pdf->writeHTMLCell(50, 3, 1, 68.75, $xMark, $border, 1, 0, true, 'L', true);
				}

				if(in_array('10', $_POST['getiuhrfrei']))
				{
					$pdf->writeHTMLCell(50, 3, 1, 77.75, $xMark, $border, 1, 0, true, 'L', true);
				}

				if($_POST['bvg'] == 6)
				{
					$pdf->writeHTMLCell(50, 3, 92, 7, $xMark, $border, 1, 0, true, 'L', true);
				}

				if($_POST['mttel'] == 7)
				{
					$pdf->writeHTMLCell(50, 3, 97, 7, $xMark, $border, 1, 0, true, 'L', true);
				}

				if($_POST['soff'] == 8)
				{
					$pdf->writeHTMLCell(10, 3, 102, 7, $xMark, $border, 1, 0, true, 'L', true);
				}

				if($_POST['bedaf'] == 9)
				{
					$pdf->writeHTMLCell(50, 3, 107, 7, $xMark, $border, 1, 0, true, 'L', true);
				}

				if($_POST['pricht'] == 10)
				{
					$pdf->writeHTMLCell(50, 3, 114, 7, $xMark, $border, 1, 0, true, 'L', true);
				}

				$html = '<p style="font-size: 9px; font-family: Arial;">' . trim(rtrim(substr($_POST['med1'], 0, 46))) . '<br /> ' . $_POST['line1'] . '</p>';
				$pdf->writeHTMLCell(79, 3, $marginLeft, 59.5, $html, $border, 1, 0, true, 'L', true);

//				$html = '<p style="font-size: 9px; font-family: Arial;">' . $_POST['line1'] . '</p>';
//				$pdf->writeHTMLCell(79, 3, $marginLeft, 63, $html, $border, 1, 0, true, 'L', true);

				$html = '<p style="font-size: 9px; font-family: Arial;">' . trim(rtrim(substr($_POST['med4'], 0, 46))) . ' <br />' . $_POST['line2'] . '</p>';
				$pdf->writeHTMLCell(79, 3, $marginLeft, 68.5, $html, $border, 1, 0, true, 'L', true);

//				$html = '<p style="font-size: 9px; font-family: Arial;">' . $_POST['line2'] . '</p>';
//				$pdf->writeHTMLCell(79, 3, $marginLeft, 71, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size: 9px; font-family: Arial;">' . trim(rtrim(substr($_POST['med7'], 0, 46))) . '<br /> ' . $_POST['line3'] . '</p>';
				$pdf->writeHTMLCell(79, 3, $marginLeft, 77.5, $html, $border, 1, 0, true, 'L', true);

//				$html = '<span style="font-size: 9px; font-family: Arial;">' . $_POST['line3'] . '</p>';
//				$pdf->writeHTMLCell(79, 3, $marginLeft, 80, $html, $border, 1, 0, true, 'L', true);

				$html = '<span style="font-size: 9px; font-family: Arial;"><b>' . $userstamp1 . "</b><br />" . $userstamp2 . "<br /></span><span style=\"font-size:7px;\">" . $userstamp3 . "<br /></span><span style=\"font-size:9px;\"><b>" . $userstamp4 . "</b><br /></span><span style=\"font-size:7px;\">" . $userstamp5 . "<br /></span><span style=\"font-size:7px;\">" . $userstamp6 . "<br /></span><span style=\"font-size:7px;\">" . $userstamp7 . '</span></span>';
				$pdf->writeHTMLCell(60, 23, $marginLeft + 78, 57, $html, $border, 1, 0, true, 'C', true);


				//$this->_redirect('pdfrezeptdruck/pdf.php?case=0');

				if(strlen($_POST['btnsavepdf']) > 0)
				{
					$filename = "";

					foreach($_POST as $field => $value)
					{
						if(($field == "med1" && strlen($value) > 0 ) || ($field == "med4" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med5" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med8" && strlen($value) > 0 ) || ($field == "med9" && strlen($value) > 0 ))
						{
							$medication_array[] = $value;
						}
					}

					if(!empty($medication_array))
					{
						$medication = implode(", ", $medication_array);
						$medication_str = " (" . $medication . ")";
					}
					else
					{
						$medication_str = "";
					}

					//upload file to pdf
					$file_data['pdfname'] = 'mmi_rezept';
					$file_data['password'] = $logininfo->filepass;
					$uploaded_pdf = $pdf->upload_pdf($file_data);

					//add to Patient Files(Datein & Dokumente)
					if($uploaded_pdf && strlen($uploaded_pdf['pdf_filename']) > '0')
					{
						$cust = new PatientFileUpload();
						$cust->title = Pms_CommonData::aesEncrypt('Rezept MMI ' . $medication_str . '');
						$cust->ipid = $ipid;
						$cust->file_name = Pms_CommonData::aesEncrypt($uploaded_pdf['pdf_filename']);
						$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
						$cust->save();
						$recordid = $cust->id;

						//insert system file tags - ISPC-1247 (each mmi receipt type has its own tag)
						if(!empty($_POST['receipt_type']) && strlen($_POST['receipt_type']) > '0')
						{
							$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, false, $_POST['receipt_type']);
						}
					}

					if($recordid)
					{
						//insert comment in verlauf
						$ctitle = "Rezept erstellt " . $medication_str;

						$cust = new PatientCourse();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->user_id = $logininfo->userid;
						$cust->recordid = $recordid;
						$cust->tabname = Pms_CommonData::aesEncrypt("receiptupload");
						$cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
						$cust->save();
					}

					//return to course
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}

				//show pdf
				$pdf->toBrowser('Rezept', 'D');
				exit();
			}



			if(!$_POST)
			{
				//Show blank form, prefill patient data
				$this->view->fdata = array();

				/*				 * * ******************PATIENT************************* */
				$parr = $patientmaster->getMasterData($decid, 0);
				$this->view->fdata['patientfirstname'] = $parr['first_name'];
				$this->view->fdata['patientlastname'] = $parr['last_name'];
				$this->view->fdata['street'] = $parr['street1'];
				$this->view->fdata['zip'] = $parr['zip'];
				$this->view->fdata['city'] = $parr['city'];
				$this->view->fdata['bdate'] = $parr['birthd'];

				/*				 * * ******************INSURANCE************************* */
				$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($parr['ipid']);
				if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
				{
					$this->view->fdata['getiuval'] = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
				}
				$this->view->fdata['insurance_com_name'] = $healthinsu_array[0]['company_name'];
				$this->view->fdata['insurance_no'] = $healthinsu_array[0]['insurance_no'];
				$this->view->fdata['kassen_no'] = $healthinsu_array[0]['kvk_no'];

				if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == 1)
				{
					$this->view->fdata['bvg'] = 6;
				}

				$status_int_array = array("M" => "1", "F" => "3", "R" => "5");

				if($healthinsu_array[0]['insurance_status'] != "")
				{
					if(array_key_exists($healthinsu_array[0]['insurance_status'], $status_int_array))
					{
						$this->view->insurance_status = $status_int_array[$healthinsu_array[0]['insurance_status']];
					}
					else
					{
						$this->view->insurance_status = "";
					}
				}
				$this->view->fdata['insurance_status'] = $this->view->insurance_status;


				/* ------------------------------BEGIN USER------------------------------- */
				$this->view->fdata['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
				$this->view->fdata['lanr'] = $uarray['LANR'];


				/* ------------------------------BEGIN USERS------------------------------ */
				$users = new User();
				$userarray = $users->getUserByClientid($logininfo->clientid);
				$userarraylast[] = $this->view->translate('selectuser');

				$userarraylast_ids = array();

				foreach($userarray as $user)
				{
					$userarraylast[$user['id']] = trim($user['user_title']) . " " .trim($user['last_name']) . ", " . trim($user['first_name']);
					$userarraylast_ids[] = $user['id'];
				}
				$this->view->users = $userarraylast;


				/*				 * * ******************BEGIN STAMPS************************* */
				$users = new User();
				$userarray = $users->getUserByClientid($logininfo->clientid);
				$userarraylast[] = $this->view->translate('selectuser');

				$userarraylast_ids = array();

				foreach($userarray as $user)
				{
					$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
					$userarraylast_ids[] = $user['id'];
				}
				$this->view->users = $userarraylast;


				$ustamp = new UserStamp();

				$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
				foreach($multipleuser_stamp as $ks => $uspamp)
				{
					$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
					$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
					$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
				}
				$this->view->users_mstamps = $users_mstamps;


				if($isadmin == 1)
				{
					$showselect = 1;
				}
				else
				{
					$showselect = 1; // show select to all
				}
				$this->view->showselect = $showselect;


				$userstatmp = $ustamp->getLastUserStamp($logininfo->userid);

				$this->view->userstamp1 = $userstatmp[0]['row1'];
				$this->view->userstamp2 = $userstatmp[0]['row2'];
				$this->view->userstamp3 = $userstatmp[0]['row3'];
				$this->view->userstamp4 = $userstatmp[0]['row4'];
				$this->view->userstamp5 = $userstatmp[0]['row5'];
				$this->view->userstamp6 = $userstatmp[0]['row6'];
				$this->view->userstamp7 = $userstatmp[0]['row7'];

				/*				 * * ******************************************* */
				$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
				$this->view->clientid = $logininfo->clientid;

				$tm = new TabMenus();
				$this->view->tabmenus = $tm->getMenuTabs();
			}
		}
		
		public function muster13listAction()
		{
			set_time_limit(0);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			
			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */
			$this->view->rec_id = $_REQUEST['id'];
		}
		public function getmuster13listAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$id = $_REQUEST['id'];
			$decid = Pms_Uuid::decrypt($id);
			$ipid = Pms_CommonData::getIpid($decid);
			
			if(!$_REQUEST['length'])
			{
				$_REQUEST['length'] = "150";
			}
			
			$limit = $_REQUEST['length'];
			$offset = $_REQUEST['start'];
			
			$search_value = $_REQUEST['search']['value'];
			
			if(!empty($_REQUEST['order'][0]['column']))
			{
				$order_column = $_REQUEST['order'][0]['column'];
			}
			else
			{
				$order_column = "0";
			}
			$order_dir = $_REQUEST['order'][0]['dir'];
			
			$columns_array = array(
					"0" => "remedies",
					"1" => "title"					
			);
				
			$order_by_str = $columns_array[$order_column].' '.$order_dir.' ';
			
			// ########################################
			// #####  Query for count ###############
			$ms13 = Doctrine_Query::create();
			$ms13->select('count(*)');
			$ms13->from('Muster13');
			$ms13->where("isdelete = 0  ");
			$ms13->andWhere("ipid = '".$ipid."'");
			$ms13->andWhere("client = '".$clientid."'");
			
			$ms13array = $ms13->fetchArray();
			$full_count = $ms13array[0]['count'];
			
			
			/* ------------- Search options ------------------------- 
			if (isset($search_value) && strlen($search_value) > 0)
			{
				$chs->andWhere("name like '%" . trim($search_value) . "%'  or contact_lastname like '%" . trim($search_value) . "%'  or contact_firstname like '%" . trim($search_value) . "%'     ");
			}
				*/
			//$ms13array = $ms13->fetchArray();
			$filter_count  = $ms13array[0]['count'];
			
			// ########################################
			// #####  Query for details ###############
			$sql = '*,';
			$ms13->select($sql);
			$ms13->From('Muster13');
			$ms13->where("isdelete = 0  ");
			$ms13->andWhere("ipid = '".$ipid."'");
			$ms13->andWhere("client = '".$clientid."'");
			
			/* ------------- Search options ------------------------- 
			if (isset($search_value) && strlen($search_value) > 0)
			{
				$chs->andWhere("name like '%" . trim($search_value) . "%'  or contact_lastname like '%" . trim($search_value) . "%'  or contact_firstname like '%" . trim($search_value) . "%'     ");
			}*/
			$ms13->orderBy("create_date desc");
			$ms13total = $ms13->fetchArray();
			
			foreach($ms13total as $kt=>$rept)
			{
				$ms13users[$kt] = $rept['create_user'];
			}
			
			$users = new User();
			$userarray = $users->getUsersDetails($ms13users);
			
			$userdata = array();
			foreach($userarray as $ku=>$du)
			{
				$userdata[$du['id']] = $du;
			}			
			
			$ms13->limit($limit);
			$ms13->offset($offset);
			$ms13limit = Pms_CommonData::array_stripslashes($ms13->fetchArray());
			
			$report_ids[] = '99999999999999';
			foreach ($ms13limit as $key => $report)
			{
				$ms13limit_arr[$report['id']] = $report;
				$report_ids[] = $report['id'];
			}
			$row_id = 0;
			$link = "";
			$resulted_data = array();
			
			foreach($ms13limit_arr as $report_id =>$mdata)
			{
				$link = '%s ';
				$crdate = date('d.m.Y H:i', strtotime($mdata['create_date']));
				
				$resulted_data[$row_id]['id'] = $mdata['id'];
				if($mdata['heilmittel_1'])
				{
					$resulted_data[$row_id]['remedies'] = sprintf($link, $mdata['verordnungs_menge_1'] . " | " . $mdata['heilmittel_1']) . " | " . $mdata['anzahl_woche_1'] ."<br/>";
				}
				else
				{
					$resulted_data[$row_id]['remedies'] = ""."<br/>";
				}
				if($mdata['heilmittel_2'])
				{
					$resulted_data[$row_id]['remedies'] .= sprintf($link, $mdata['verordnungs_menge_2'] . " | " . $mdata['heilmittel_2']) . " | " . $mdata['anzahl_woche_2'] ."<br/>";
				}
				else
				{
					$resulted_data[$row_id]['remedies'] .= "";
				}
                //ISPC-2530  Elena 15-20.01.2021
                $data_form_time = "old";
                if($mdata['formvalid'] == '01102020'){
                    $data_form_time = "new";
                }
				$resulted_data[$row_id]['title'] = 'Heilmittelverordnung'.'('.sprintf($link, $crdate).')';
				$resulted_data[$row_id]['created_by'] = sprintf($link,($userdata[$mdata['create_user']]['first_name'] != '' ? $userdata[$mdata['create_user']]['last_name'].', '.$userdata[$mdata['create_user']]['first_name'] : $userdata[$mdata['create_user']]['last_name']));
				$resulted_data[$row_id]['created_date'] = sprintf($link, $crdate);
                //ISPC-2530  Elena 15-20.01.2021
				$resulted_data[$row_id]['actions'] = '<a href="javascript:void(0);"  class="printpdf" rel_form="' . $data_form_time .'" rel_prid="'.$mdata['id'].'" rel_id="'.$id.'" id="printpdf_'.$mdata['id'].'" title="'.$this->view->translate("muster 13 print pdf").'"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/print_black.png" width="18"></a>';
				$resulted_data[$row_id]['actions'] .= '<a href="javascript:void(0);"  class="printpre" rel_form="' . $data_form_time .'" rel_prid="'.$mdata['id'].'" rel_id="'.$id.'" id="printpre_'.$mdata['id'].'" title="'.$this->view->translate("muster13 preprint").'"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/print_black.png" width="18"></a>';
				$resulted_data[$row_id]['actions'] .= '<a href="javascript:void(0);"  class="duplicate" rel_form="' . $data_form_time .'" rel_prid="'.$mdata['id'].'" rel_id="'.$id.'" id="duplicate_'.$mdata['id'].'" title="Heilmittelverordnung duplizieren"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/redo_black.png" width="18"></a>';
// 				$resulted_data[$row_id]['actions'] .= '<a href="'.APP_BASE .'patientformnew/muster132020?id='. $id . '&prid='. $mdata['id'] . '" title="Dieses Heilmittelverordnung bearbeiten"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/edit_black.png" width="18"/> </a>';
                //ISPC-2530  Elena 15-20.01.2021
                if($mdata['formvalid'] == '01102020'){
                    $resulted_data[$row_id]['actions'] .= '<a href="'.APP_BASE .'patientformnew/muster132020?id='. $id . '&prid='. $mdata['id'] . '" title="Dieses Heilmittelverordnung bearbeiten"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/edit_black.png" width="18"/> </a>';
                }else{
				$resulted_data[$row_id]['actions'] .= '<a href="'.APP_BASE .'patientformnew/muster13?id='. $id . '&prid='. $mdata['id'] . '" title="Dieses Heilmittelverordnung bearbeiten"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/edit_black.png" width="18"/> </a>';
                }

                //$resulted_data[$row_id]['actions'] .= '<a href="'.APP_BASE .'patientformnew/muster13?id='. $id . '&prid='. $mdata['id'] . '" title="Dieses Heilmittelverordnung bearbeiten"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/edit_black.png" width="18"/> </a>';
				$resulted_data[$row_id]['actions'] .= '<a href="javascript:void(0);"  class="delete" rel_prid="'.$mdata['id'].'" rel_id="'.$id.'" id="delete_'.$mdata['id'].'" title="Dieses Heilmittelverordnung 13 löschen"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/remove_black.png" width="18">';
				$row_id++;
			}
			
			$response['draw'] = (int)$_REQUEST['draw']; //? get the sent draw from data table
			$response['recordsTotal'] = $full_count;
			$response['recordsFiltered'] = $filter_count; // ??
			$response['data'] = $resulted_data;
			
			header("Content-type: application/json; charset=UTF-8");
			
			echo json_encode($response);
			exit;
				
		}
		
		public function deletemuster13Action ()
		{		
			if ($_GET['prid'] > 0)
			{
				$ms13_id = $_GET['prid'];
			}
			
			if ($_GET['id'] != '')
			{
				$id= $_GET['id'];
			}
			
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($id);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
			}
		
			$ms13_form = new Application_Form_Muster13();
			$ms13_form->delete_data($ms13_id, $ipid, $clientid, $userid); //TODO-1584 Can not delete Heilmittelverordnung 
			
			$qpc = Doctrine_Query::create()
			->select("id,ipid,recordid,done_id,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,
				     AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title,
				     AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname
					")
					 ->from('PatientCourse')
					 ->where("ipid=?",  $ipid)
					 ->andWhere("done_id = ?", $ms13_id)
					 ->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'muster13upload' OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'muster13_save'")
					 ->andWhere('source_ipid = ""')
					 ->orderby('create_date desc');
					$pcarr = $qpc->fetchArray();

					if(count($pcarr) > 0)
					{
						foreach($pcarr as $key=>$pcdata)
						{
							if($key == 0 && $pcdata['done_id'] == $ms13_id)
							{
								$updcourse = Doctrine::getTable('PatientCourse')->find($pcdata['id']);
								$course_text = $pcdata['course_title'];
								$course_text .= "\n Das Heilmittelverordnung  wurde am ".date('d.m.Y H:i:s', time())." von ".($uarray['first_name'] != '' ? $uarray['last_name'].', '.$uarray['first_name'] : $uarray['last_name'])." gelöscht";
								$updcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($course_text));
								$updcourse->tabname = Pms_CommonData::aesEncrypt(addslashes("muster13_save_deleted"));
								$updcourse->save();
				  			}
				  			
				  			if($pcdata['tabname'] == "muster13upload"){
					   			$updfile = Doctrine::getTable('PatientFileUpload')->find($pcdata['recordid']);
								$updfile->isdeleted = 1;
								$updfile->save();					
				  			}
						}
					}
		
			$this->_redirect(APP_BASE . "patientformnew/muster13list?id=". $id);
			exit;
		
		}
		
		public function duplicatemuster13Action ()
		{
			if ($_GET['prid'] > 0)
			{
				$ms13_id= $_GET['prid'];
			}
			if ($_GET['id'] != '')
			{
				$id= $_GET['id'];
			}
			
			//$decid = Pms_Uuid::decrypt($id);
			$ipid = Pms_CommonData::getIpid($this->dec_id);
			
			$ms13_form = new Application_Form_Muster13();
			$ms13_form->duplicate_data($ipid, $ms13_id);
			
			$ctitle = "Ein Heilmittelrezept wurde erstellt.";
			
			$cust = new PatientCourse();
			$cust->ipid = $ipid;
			$cust->course_date = date("Y-m-d H:i:s", time());
			$cust->course_type = Pms_CommonData::aesEncrypt("K");
			$cust->user_id = $this->logininfo->userid;
			$cust->recordid = $post['saved_id'];
			$cust->done_id = $post['saved_id'];
			$cust->tabname = Pms_CommonData::aesEncrypt("muster13_duplicate");
			$cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
			$cust->save();
		
			$this->_redirect(APP_BASE . "patientformnew/muster13list?id=". $id);
			exit;
		
		}
		
		public function printmuster13Action()
		{
			//ISPC - 1968 - the  Rezepte -> Heilmittelverordnung (patientformnew/muster13)   should have the same LIST like receipts (Rezepte->Rezepte :: patientformnew/listreceipts).
			//so users could duplicate receipts etc and see old Heilmittelverordnungen
				
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			if($_REQUEST['prid'])
			{
				$prid = $_REQUEST['prid'];
			}
		
			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();
		
			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}
		
			$post['multiplestamps_option'] = $multiplestamps_option;
		
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
			}
		
			$isadmin = 0;
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
			
			//get saved form data
				
			if(isset($prid))
			{
				$muster13 = new Muster13();
				$muster13_data = $muster13->get_muster13_patient_data($ipid, $prid);
			}
				
			if($muster13_data)
			{
				$post['saved_id'] = $prid;
				if($muster13_data['stampuser'] > 0)
				{
					$stampuserid = $muster13_data['stampuser'];
					$stampid = $muster13_data['stampid'];
				
					$ustamp = new UserStamp();
					$userstatmp = $ustamp->getUserStampById($stampuserid, $stampid);
					
					$post['stamp_block'] = $userstatmp[0]['row1'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row2'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row3'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row4'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row5'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row6'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row7'].'<br/>';
					
				}
				
				$verordnung_radio = explode(',', $muster13_data['verordnung_radio']);
				$gebuhr_radio = explode(',', $muster13_data['gebuhr_radio']);
				
				/*if(empty($this->behandlungsbeginn_date))
				 {
				 $this->behandlungsbeginn_date = date('d.m.Y',time());
				 $behandlungsbeginn_date = date('d.m.y',strtotime($this->behandlungsbeginn_date));
				 }
				 else*/
				
				$post['client_ik_number'] = ($muster13_data['client_ik_number'] == 0 ? '' : $muster13_data['client_ik_number']);
				
				$post['insurance_com_name'] = $muster13_data['insurance_name'];
				
				$post['patient_name'] = $muster13_data['patient_name'];
				$post['street'] = $muster13_data['street'];
				$post['zip'] = $muster13_data['zipcode'];
				$post['city'] = $muster13_data['city'];				
				$post['birthd'] = ($muster13_data['birthdate'] == '0000-00-00' ? '' : date('d.m.Y', strtotime($muster13_data['birthdate'])));					
				
				$post['insurance_number'] = $muster13_data['ins_insuranceno'];
				$post['kassen_no'] = $muster13_data['ins_kassenno'];
				$post['insurance_stat'] = $muster13_data['ins_status'];
					
				$post['betriebsstatten_nr'] = $muster13_data['bsnr'];
				$post['lanr'] = $muster13_data['lanr'];
					
				$post['insurance_datum'] = ($muster13_data['datum'] == '0000-00-00' ? '' : date('d.m.Y', strtotime($muster13_data['datum'])));
				
				$post['gesamt_zuzahlung'] = ($muster13_data['gesamt_zuzahlung'] == 0.00 ? '' : $muster13_data['gesamt_zuzahlung']);
				$post['gesamt_brutto'] = ($muster13_data['gesamt_brutto'] == 0.00 ? '' : $muster13_data['gesamt_brutto']);
				$post['heilmittel_pos_1'] = ($muster13_data['heilmittel_pos_1'] == 0 ? '' : $muster13_data['heilmittel_pos_1']);
				$post['faktor_1'] = ($muster13_data['faktor_1'] == 0 ? '' : $muster13_data['faktor_1']);
				$post['heilmittel_pos_2'] = ($muster13_data['heilmittel_pos_2'] == 0 ? '' : $muster13_data['heilmittel_pos_2']);
				$post['faktor_2'] = ($muster13_data['faktor_2'] == 0 ? '' : $muster13_data['faktor_2']);
				$post['wegegeld'] = ($muster13_data['wegegeld'] == 0 ? '' : $muster13_data['wegegeld']);
				$post['faktor_3'] = ($muster13_data['faktor_3'] == 0 ? '' : $muster13_data['faktor_3']);
				$post['km'] = ($muster13_data['km'] == 0 ? '' : $muster13_data['km']);
				$post['hausbesuch_1'] = ($muster13_data['hausbesuch_1'] == 0 ? '' : $muster13_data['hausbesuch_1']);
				$post['faktor_4'] = ($muster13_data['faktor_4'] == 0 ? '' : $muster13_data['faktor_4']);
				$post['hausbesuch_2'] = ($muster13_data['hausbesuch_2'] == 0 ? '' : $muster13_data['hausbesuch_2']);
				
				$post['behandlungsbeginn_date'] = ($muster13_data['behandlungsbeginn_date'] == '0000-00-00' ? '' : date('d.m.y', strtotime($muster13_data['behandlungsbeginn_date'])));
				$behandlungsbeginn_date = explode('.', $post['behandlungsbeginn_date']);
				$post['behandlungsbeginn_date'] = $behandlungsbeginn_date[0].$behandlungsbeginn_date[1].$behandlungsbeginn_date[2];
				
				$post['faktor_5'] = ($muster13_data['faktor_5'] == 0 ? '' : $muster13_data['faktor_5']);
				$post['rechnungsnummer'] = $muster13_data['rechnungsnummer'];
				$post['belegnummer'] = $muster13_data['belegnummer'];
				$post['verordnungs_menge_1'] = ($muster13_data['verordnungs_menge_1'] == 0 ? '' : $muster13_data['verordnungs_menge_1']);
				$post['heilmittel_1'] = $muster13_data['heilmittel_1'];
				$post['anzahl_woche_1'] = ($muster13_data['anzahl_woche_1'] == 0 ? '' : $muster13_data['anzahl_woche_1']);
				$post['verordnungs_menge_2'] = ($muster13_data['verordnungs_menge_2'] == 0 ? '' : $muster13_data['verordnungs_menge_2']);
				$post['heilmittel_2'] = $muster13_data['heilmittel_2'];
				$post['anzahl_woche_2'] = ($muster13_data['anzahl_woche_2'] == 0 ? '' : $muster13_data['anzahl_woche_2']);
				$post['indikation_key'] = $muster13_data['indikation_key'];
				$post['indikation_name'] = $muster13_data['indikation_name'];
				
				$post['icd_code1'] = $muster13_data['icd_code1'];
				$post['icd_diagnosis_1'] = $muster13_data['icd_diagnosis1'];
				
				$post['icd_code2'] = $muster13_data['icd_code2'];
				$post['icd_diagnosis_2'] = $muster13_data['icd_diagnosis2'];
				
				$post['gegebenenfalls_spezifizierung'] = $muster13_data['gegebenenfalls_spezifizierung'];
				$post['medizinische_begrundung_verordnungen'] = $muster13_data['medizinische_begrundung_verordnungen'];
				
				if($post['gegebenenfalls_spezifizierung'] != null)
				{
					$gegebenenfalls_spezifizierung = explode("\n",$post['gegebenenfalls_spezifizierung']);
					$post['gegebenenfalls_spezifizierung_1'] = $gegebenenfalls_spezifizierung[0];
					$post['gegebenenfalls_spezifizierung_2'] = $gegebenenfalls_spezifizierung[1];
					$post['gegebenenfalls_spezifizierung_3'] = $gegebenenfalls_spezifizierung[2];
				}
				
				if($post['medizinische_begrundung_verordnungen'] != null)
				{				
					$medizinische_begrundung_verordnungen = explode("\n",$post['medizinische_begrundung_verordnungen']);
				
					$post['medizinische_begrundung_verordnungen_1'] = $medizinische_begrundung_verordnungen[0];
					$post['medizinische_begrundung_verordnungen_2'] = $medizinische_begrundung_verordnungen[1];
					$post['medizinische_begrundung_verordnungen_3'] = $medizinische_begrundung_verordnungen[2];
					$post['medizinische_begrundung_verordnungen_4'] = $medizinische_begrundung_verordnungen[3];
					$post['medizinische_begrundung_verordnungen_5'] = $medizinische_begrundung_verordnungen[4];
				}
				
				
				
				$post['verordnung_radio'] = $verordnung_radio;
				
				$post['hausbesuch_radio'] = $muster13_data['hausbesuch_radio'];
				$post['therapiebericht_radio'] = $muster13_data['therapiebericht_radio'];
				
				$post['gebuhr_radio'] = $gebuhr_radio;
				
				$post['unfall_radio'] = $muster13_data['unfall_radio'];
                //ISPC-2530, elena, 15.10.2020
                $post['verordnung_gruppe'] = $muster13_data['verordnung_gruppe'];
                $post['formvalid'] = $muster13_data['formvalid'];
                $post['anzahl_woche_3'] = ($muster13_data['anzahl_woche_3'] == 0 ? '' : $muster13_data['anzahl_woche_3']);
                $post['heilmittel_4'] = $muster13_data['heilmittel_4'];
                //ISPC-2530  Elena 15-20.01.2021
                $post['anzahl_woche_4'] = ($muster13_data['anzahl_woche_4'] == 0 ? '' : $muster13_data['anzahl_woche_4']);
                $post['diagnosis_freetext'] = $muster13_data['diagnosis_freetext'];
                $post['diaggroup'] = $muster13_data['diaggroup'];   
                //TODO-3735 CRISTI.C 
                $post['mainsymptomatic_letter'] = explode(",", $muster13_data['mainsymptomatic_letter']);                                
                $post['therapie_frequenz'] = $muster13_data['therapie_frequenz'];
                //
                $post['mainsymptomatic_freetext'] = $muster13_data['mainsymptomatic_freetext'];
                $post['dringlicher_behandlungsbedarf']  = $muster13_data['dringlicher_behandlungsbedarf'];
                $post['therapieziele'] = $muster13_data['therapieziele'];
			}
			
				if($_REQUEST['print'] == "prepdf")
				{
                    //ISPC-2530, elena, 15.10.2020
// 					$this->generatePdfNew(3, $post, 'muster13_pre', "muster132020_pre_pdf.html");
					$this->generatePdfNew(3, $post, 'muster13_pre', "muster13_pre_pdf.html");
				}
				/*else if($_POST['post_status'] == "save")
				 {
				 $this->generatePdfNew(3, $_POST, 'muster13_save', "muster13_pdf.html");
				 }*/
				else 
				{
                    //ISPC-2530, elena, 15.10.2020
// 					$this->generatePdfNew(3, $post, 'muster13', "muster132020_pdf.html");
					$this->generatePdfNew(3, $post, 'muster13', "muster13_pdf.html");
				}
				$this->_redirect(APP_BASE . "patientformnew/muster13list?id=". $id);
				exit;
		}
		
		
		/**
		 * // ISPC-2530 + TODO-3572 Ancuta 11.11.2020
		 */
		public function muster132020listAction()
		{
			set_time_limit(0);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			
			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */
			$this->view->rec_id = $_REQUEST['id'];
		}
		
		/**
		 *  // ISPC-2530 + TODO-3572 Ancuta 11.11.2020
		 */
		public function getmuster132020listAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$this->_helper->viewRenderer->setNoRender();
			$id = $_REQUEST['id'];
			$decid = Pms_Uuid::decrypt($id);
			$ipid = Pms_CommonData::getIpid($decid);
			
			if(!$_REQUEST['length'])
			{
				$_REQUEST['length'] = "150";
			}
			
			$limit = $_REQUEST['length'];
			$offset = $_REQUEST['start'];
			
			$search_value = $_REQUEST['search']['value'];
			
			if(!empty($_REQUEST['order'][0]['column']))
			{
				$order_column = $_REQUEST['order'][0]['column'];
			}
			else
			{
				$order_column = "0";
			}
			$order_dir = $_REQUEST['order'][0]['dir'];
			
			$columns_array = array(
					"0" => "remedies",
					"1" => "title"					
			);
				
			$order_by_str = $columns_array[$order_column].' '.$order_dir.' ';
			
			// ########################################
			// #####  Query for count ###############
			$ms13 = Doctrine_Query::create();
			$ms13->select('count(*)');
			$ms13->from('Muster13');
			$ms13->where("isdelete = 0  ");
			$ms13->andWhere("ipid = '".$ipid."'");
			$ms13->andWhere("client = '".$clientid."'");
			
			$ms13array = $ms13->fetchArray();
			$full_count = $ms13array[0]['count'];
			
			
			/* ------------- Search options ------------------------- 
			if (isset($search_value) && strlen($search_value) > 0)
			{
				$chs->andWhere("name like '%" . trim($search_value) . "%'  or contact_lastname like '%" . trim($search_value) . "%'  or contact_firstname like '%" . trim($search_value) . "%'     ");
			}
				*/
			//$ms13array = $ms13->fetchArray();
			$filter_count  = $ms13array[0]['count'];
			
			// ########################################
			// #####  Query for details ###############
			$sql = '*,';
			$ms13->select($sql);
			$ms13->From('Muster13');
			$ms13->where("isdelete = 0  ");
			$ms13->andWhere("ipid = '".$ipid."'");
			$ms13->andWhere("client = '".$clientid."'");
			
			/* ------------- Search options ------------------------- 
			if (isset($search_value) && strlen($search_value) > 0)
			{
				$chs->andWhere("name like '%" . trim($search_value) . "%'  or contact_lastname like '%" . trim($search_value) . "%'  or contact_firstname like '%" . trim($search_value) . "%'     ");
			}*/
			$ms13->orderBy("create_date desc");
			$ms13total = $ms13->fetchArray();
			
			foreach($ms13total as $kt=>$rept)
			{
				$ms13users[$kt] = $rept['create_user'];
			}
			
			$users = new User();
			$userarray = $users->getUsersDetails($ms13users);
			
			$userdata = array();
			foreach($userarray as $ku=>$du)
			{
				$userdata[$du['id']] = $du;
			}			
			
			$ms13->limit($limit);
			$ms13->offset($offset);
			$ms13limit = Pms_CommonData::array_stripslashes($ms13->fetchArray());
			
			$report_ids[] = '99999999999999';
			foreach ($ms13limit as $key => $report)
			{
				$ms13limit_arr[$report['id']] = $report;
				$report_ids[] = $report['id'];
			}
			$row_id = 0;
			$link = "";
			$resulted_data = array();
			
			foreach($ms13limit_arr as $report_id =>$mdata)
			{
				$link = '%s ';
				$crdate = date('d.m.Y H:i', strtotime($mdata['create_date']));
				
				$resulted_data[$row_id]['id'] = $mdata['id'];
				if($mdata['heilmittel_1'])
				{
					$resulted_data[$row_id]['remedies'] = sprintf($link, $mdata['verordnungs_menge_1'] . " | " . $mdata['heilmittel_1']) . " | " . $mdata['anzahl_woche_1'] ."<br/>";
				}
				else
				{
					$resulted_data[$row_id]['remedies'] = ""."<br/>";
				}
				if($mdata['heilmittel_2'])
				{
					$resulted_data[$row_id]['remedies'] .= sprintf($link, $mdata['verordnungs_menge_2'] . " | " . $mdata['heilmittel_2']) . " | " . $mdata['anzahl_woche_2'] ."<br/>";
				}
				else
				{
					$resulted_data[$row_id]['remedies'] .= "";
				}
                //ISPC-2530  Elena 15-20.01.2021 //split old and new forms
				$data_form_time = "old";
				if($mdata['formvalid'] == '01102020'){
                    $data_form_time = "new";
                }

				$resulted_data[$row_id]['title'] = 'Heilmittelverordnung'.'('.sprintf($link, $crdate).')';
				$resulted_data[$row_id]['created_by'] = sprintf($link,($userdata[$mdata['create_user']]['first_name'] != '' ? $userdata[$mdata['create_user']]['last_name'].', '.$userdata[$mdata['create_user']]['first_name'] : $userdata[$mdata['create_user']]['last_name']));
				$resulted_data[$row_id]['created_date'] = sprintf($link, $crdate);
                //ISPC-2530  Elena 15-20.01.2021
				$resulted_data[$row_id]['actions'] = '<a href="javascript:void(0);" rel_form="' . $data_form_time .'" class="printpdf" rel_prid="'.$mdata['id'].'" rel_id="'.$id.'" id="printpdf_'.$mdata['id'].'" title="'.$this->view->translate("muster 13 print pdf").'"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/print_black.png" width="18"></a>';
				$resulted_data[$row_id]['actions'] .= '<a href="javascript:void(0);"  rel_form="' . $data_form_time .'" class="printpre" rel_prid="'.$mdata['id'].'" rel_id="'.$id.'" id="printpre_'.$mdata['id'].'" title="'.$this->view->translate("muster13 preprint").'"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/print_black.png" width="18"></a>';
				$resulted_data[$row_id]['actions'] .= '<a href="javascript:void(0);"  rel_form="' . $data_form_time .'" class="duplicate" rel_prid="'.$mdata['id'].'" rel_id="'.$id.'" id="duplicate_'.$mdata['id'].'" title="Heilmittelverordnung duplizieren"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/redo_black.png" width="18"></a>';

				if($mdata['formvalid'] == '01102020'){
				$resulted_data[$row_id]['actions'] .= '<a href="'.APP_BASE .'patientformnew/muster132020?id='. $id . '&prid='. $mdata['id'] . '" title="Dieses Heilmittelverordnung bearbeiten"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/edit_black.png" width="18"/> </a>';
                }else{
                    $resulted_data[$row_id]['actions'] .= '<a href="'.APP_BASE .'patientformnew/muster13?id='. $id . '&prid='. $mdata['id'] . '" title="Dieses Heilmittelverordnung bearbeiten"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/edit_black.png" width="18"/> </a>';
                }

				$resulted_data[$row_id]['actions'] .= '<a href="javascript:void(0);"  class="delete" rel_form="' . $data_form_time .'" rel_prid="'.$mdata['id'].'" rel_id="'.$id.'" id="delete_'.$mdata['id'].'" title="Dieses Heilmittelverordnung 13 löschen"><img class="image_action" border="0" src="'.RES_FILE_PATH.'/images/receipt_org/remove_black.png" width="18">';
				$row_id++;
			}
			
			$response['draw'] = (int)$_REQUEST['draw']; //? get the sent draw from data table
			$response['recordsTotal'] = $full_count;
			$response['recordsFiltered'] = $filter_count; // ??
			$response['data'] = $resulted_data;
			
			header("Content-type: application/json; charset=UTF-8");
			
			echo json_encode($response);
			exit;
				
		}
		
		
		/**
		 * // ISPC-2530 + TODO-3572 Ancuta 11.11.2020
		 */
		public function deletemuster132020Action ()
		{		
			if ($_GET['prid'] > 0)
			{
				$ms13_id = $_GET['prid'];
			}
			
			if ($_GET['id'] != '')
			{
				$id= $_GET['id'];
			}
			
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($id);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
			}
		
			$ms13_form = new Application_Form_Muster13();
			$ms13_form->delete_data($ms13_id, $ipid, $clientid, $userid); //TODO-1584 Can not delete Heilmittelverordnung 
			
			$qpc = Doctrine_Query::create()
			->select("id,ipid,recordid,done_id,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,
				     AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title,
				     AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname
					")
					 ->from('PatientCourse')
					 ->where("ipid=?",  $ipid)
					 ->andWhere("done_id = ?", $ms13_id)
					 ->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'muster13upload' OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'muster13_save'")
					 ->andWhere('source_ipid = ""')
					 ->orderby('create_date desc');
					$pcarr = $qpc->fetchArray();

					if(count($pcarr) > 0)
					{
						foreach($pcarr as $key=>$pcdata)
						{
							if($key == 0 && $pcdata['done_id'] == $ms13_id)
							{
								$updcourse = Doctrine::getTable('PatientCourse')->find($pcdata['id']);
								$course_text = $pcdata['course_title'];
								$course_text .= "\n Das Heilmittelverordnung  wurde am ".date('d.m.Y H:i:s', time())." von ".($uarray['first_name'] != '' ? $uarray['last_name'].', '.$uarray['first_name'] : $uarray['last_name'])." gelöscht";
								$updcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($course_text));
								$updcourse->tabname = Pms_CommonData::aesEncrypt(addslashes("muster13_save_deleted"));
								$updcourse->save();
				  			}
				  			
				  			if($pcdata['tabname'] == "muster13upload"){
					   			$updfile = Doctrine::getTable('PatientFileUpload')->find($pcdata['recordid']);
								$updfile->isdeleted = 1;
								$updfile->save();					
				  			}
						}
					}
		
			$this->_redirect(APP_BASE . "patientformnew/muster132020list?id=". $id);
			exit;
		
		}
		
		
		/**
		 * // ISPC-2530 + TODO-3572 Ancuta 11.11.2020
		 */
		public function duplicatemuster132020Action ()
		{
			if ($_GET['prid'] > 0)
			{
				$ms13_id= $_GET['prid'];
			}
			if ($_GET['id'] != '')
			{
				$id= $_GET['id'];
			}
			
			//$decid = Pms_Uuid::decrypt($id);
			$ipid = Pms_CommonData::getIpid($this->dec_id);
			
			$ms13_form = new Application_Form_Muster13();
			$ms13_form->duplicate_data($ipid, $ms13_id);
			
			$ctitle = "Ein Heilmittelrezept wurde erstellt.";
			
			$cust = new PatientCourse();
			$cust->ipid = $ipid;
			$cust->course_date = date("Y-m-d H:i:s", time());
			$cust->course_type = Pms_CommonData::aesEncrypt("K");
			$cust->user_id = $this->logininfo->userid;
			$cust->recordid = $post['saved_id'];
			$cust->done_id = $post['saved_id'];
			$cust->tabname = Pms_CommonData::aesEncrypt("muster132020_duplicate");
			$cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
			$cust->save();
		
			$this->_redirect(APP_BASE . "patientformnew/muster132020list?id=". $id);
			exit;
		
		}
		/**
		 * // ISPC-2530 + TODO-3572 Ancuta 11.11.2020
		 */
		public function printmuster132020Action()
		{
			//ISPC - 1968 - the  Rezepte -> Heilmittelverordnung (patientformnew/muster13)   should have the same LIST like receipts (Rezepte->Rezepte :: patientformnew/listreceipts).
			//so users could duplicate receipts etc and see old Heilmittelverordnungen
				
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			if($_REQUEST['prid'])
			{
				$prid = $_REQUEST['prid'];
			}
		
			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();
		
			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}
		
			$post['multiplestamps_option'] = $multiplestamps_option;
		
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
			}
		
			$isadmin = 0;
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
			
			//get saved form data
				
			if(isset($prid))
			{
				$muster13 = new Muster13();
				$muster13_data = $muster13->get_muster13_patient_data($ipid, $prid);
			}
			
			if($muster13_data)
			{
				$post['saved_id'] = $prid;
				if($muster13_data['stampuser'] > 0)
				{
					$stampuserid = $muster13_data['stampuser'];
					$stampid = $muster13_data['stampid'];
				
					$ustamp = new UserStamp();
					$userstatmp = $ustamp->getUserStampById($stampuserid, $stampid);
					
					$post['stamp_block'] = $userstatmp[0]['row1'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row2'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row3'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row4'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row5'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row6'].'<br/>';
					$post['stamp_block'] .= $userstatmp[0]['row7'].'<br/>';
					
				}
				
				$verordnung_radio = explode(',', $muster13_data['verordnung_radio']);
				$gebuhr_radio = explode(',', $muster13_data['gebuhr_radio']);
				
				/*if(empty($this->behandlungsbeginn_date))
				 {
				 $this->behandlungsbeginn_date = date('d.m.Y',time());
				 $behandlungsbeginn_date = date('d.m.y',strtotime($this->behandlungsbeginn_date));
				 }
				 else*/
				
				$post['client_ik_number'] = ($muster13_data['client_ik_number'] == 0 ? '' : $muster13_data['client_ik_number']);
				
				$post['insurance_com_name'] = $muster13_data['insurance_name'];
				
				$post['patient_name'] = $muster13_data['patient_name'];
				$post['street'] = $muster13_data['street'];
				$post['zip'] = $muster13_data['zipcode'];
				$post['city'] = $muster13_data['city'];				
				$post['birthd'] = ($muster13_data['birthdate'] == '0000-00-00' ? '' : date('d.m.Y', strtotime($muster13_data['birthdate'])));					
				
				$post['insurance_number'] = $muster13_data['ins_insuranceno'];
				$post['kassen_no'] = $muster13_data['ins_kassenno'];
				$post['insurance_stat'] = $muster13_data['ins_status'];
					
				$post['betriebsstatten_nr'] = $muster13_data['bsnr'];
				$post['lanr'] = $muster13_data['lanr'];
					
				$post['insurance_datum'] = ($muster13_data['datum'] == '0000-00-00' ? '' : date('d.m.Y', strtotime($muster13_data['datum'])));
				
				$post['gesamt_zuzahlung'] = ($muster13_data['gesamt_zuzahlung'] == 0.00 ? '' : $muster13_data['gesamt_zuzahlung']);
				$post['gesamt_brutto'] = ($muster13_data['gesamt_brutto'] == 0.00 ? '' : $muster13_data['gesamt_brutto']);
				$post['heilmittel_pos_1'] = ($muster13_data['heilmittel_pos_1'] == 0 ? '' : $muster13_data['heilmittel_pos_1']);
				$post['faktor_1'] = ($muster13_data['faktor_1'] == 0 ? '' : $muster13_data['faktor_1']);
				$post['heilmittel_pos_2'] = ($muster13_data['heilmittel_pos_2'] == 0 ? '' : $muster13_data['heilmittel_pos_2']);
				$post['faktor_2'] = ($muster13_data['faktor_2'] == 0 ? '' : $muster13_data['faktor_2']);
				$post['wegegeld'] = ($muster13_data['wegegeld'] == 0 ? '' : $muster13_data['wegegeld']);
				$post['faktor_3'] = ($muster13_data['faktor_3'] == 0 ? '' : $muster13_data['faktor_3']);
				$post['km'] = ($muster13_data['km'] == 0 ? '' : $muster13_data['km']);
				$post['hausbesuch_1'] = ($muster13_data['hausbesuch_1'] == 0 ? '' : $muster13_data['hausbesuch_1']);
				$post['faktor_4'] = ($muster13_data['faktor_4'] == 0 ? '' : $muster13_data['faktor_4']);
				$post['hausbesuch_2'] = ($muster13_data['hausbesuch_2'] == 0 ? '' : $muster13_data['hausbesuch_2']);
				
				$post['behandlungsbeginn_date'] = ($muster13_data['behandlungsbeginn_date'] == '0000-00-00' ? '' : date('d.m.y', strtotime($muster13_data['behandlungsbeginn_date'])));
				$behandlungsbeginn_date = explode('.', $post['behandlungsbeginn_date']);
				$post['behandlungsbeginn_date'] = $behandlungsbeginn_date[0].$behandlungsbeginn_date[1].$behandlungsbeginn_date[2];
				
				$post['faktor_5'] = ($muster13_data['faktor_5'] == 0 ? '' : $muster13_data['faktor_5']);
				$post['rechnungsnummer'] = $muster13_data['rechnungsnummer'];
				$post['belegnummer'] = $muster13_data['belegnummer'];
				$post['verordnungs_menge_1'] = ($muster13_data['verordnungs_menge_1'] == 0 ? '' : $muster13_data['verordnungs_menge_1']);
				$post['heilmittel_1'] = $muster13_data['heilmittel_1'];
				$post['anzahl_woche_1'] = ($muster13_data['anzahl_woche_1'] == 0 ? '' : $muster13_data['anzahl_woche_1']);
				$post['verordnungs_menge_2'] = ($muster13_data['verordnungs_menge_2'] == 0 ? '' : $muster13_data['verordnungs_menge_2']);
				$post['heilmittel_2'] = $muster13_data['heilmittel_2'];
				$post['anzahl_woche_2'] = ($muster13_data['anzahl_woche_2'] == 0 ? '' : $muster13_data['anzahl_woche_2']);
				$post['indikation_key'] = $muster13_data['indikation_key'];
				$post['indikation_name'] = $muster13_data['indikation_name'];
				
				$post['icd_code1'] = $muster13_data['icd_code1'];
				$post['icd_diagnosis_1'] = $muster13_data['icd_diagnosis1'];
				
				$post['icd_code2'] = $muster13_data['icd_code2'];
				$post['icd_diagnosis_2'] = $muster13_data['icd_diagnosis2'];
				
				$post['gegebenenfalls_spezifizierung'] = $muster13_data['gegebenenfalls_spezifizierung'];
				$post['medizinische_begrundung_verordnungen'] = $muster13_data['medizinische_begrundung_verordnungen'];
				
				if($post['gegebenenfalls_spezifizierung'] != null)
				{
					$gegebenenfalls_spezifizierung = explode("\n",$post['gegebenenfalls_spezifizierung']);
					$post['gegebenenfalls_spezifizierung_1'] = $gegebenenfalls_spezifizierung[0];
					$post['gegebenenfalls_spezifizierung_2'] = $gegebenenfalls_spezifizierung[1];
					$post['gegebenenfalls_spezifizierung_3'] = $gegebenenfalls_spezifizierung[2];
				}
				
				if($post['medizinische_begrundung_verordnungen'] != null)
				{				
					$medizinische_begrundung_verordnungen = explode("\n",$post['medizinische_begrundung_verordnungen']);
				
					$post['medizinische_begrundung_verordnungen_1'] = $medizinische_begrundung_verordnungen[0];
					$post['medizinische_begrundung_verordnungen_2'] = $medizinische_begrundung_verordnungen[1];
					$post['medizinische_begrundung_verordnungen_3'] = $medizinische_begrundung_verordnungen[2];
					$post['medizinische_begrundung_verordnungen_4'] = $medizinische_begrundung_verordnungen[3];
					$post['medizinische_begrundung_verordnungen_5'] = $medizinische_begrundung_verordnungen[4];
				}
				
				
				
				$post['verordnung_radio'] = $verordnung_radio;
				
				$post['hausbesuch_radio'] = $muster13_data['hausbesuch_radio'];
				$post['therapiebericht_radio'] = $muster13_data['therapiebericht_radio'];
				
				$post['gebuhr_radio'] = $gebuhr_radio;
				
				$post['unfall_radio'] = $muster13_data['unfall_radio'];
                //ISPC-2530, elena, 15.10.2020
                $post['verordnung_gruppe'] = $muster13_data['verordnung_gruppe'];
                $post['formvalid'] = $muster13_data['formvalid'];
                $post['heilmittel_3'] = $muster13_data['heilmittel_3'];
                //ISPC-2530  Elena 15-20.01.2021
                $post['anzahl_woche_3'] =  ($muster13_data['anzahl_woche_3'] == 0 ? '' : $muster13_data['anzahl_woche_3']);
                $post['heilmittel_4'] = $muster13_data['heilmittel_4'];
                //ISPC-2530  Elena 15-20.01.2021
                $post['anzahl_woche_4'] =  ($muster13_data['anzahl_woche_4'] == 0 ? '' : $muster13_data['anzahl_woche_4']);
                $post['diagnosis_freetext'] = $muster13_data['diagnosis_freetext'];
                $post['diaggroup'] = $muster13_data['diaggroup'];
                //TODO-3735 Cristi. C
                $post['mainsymptomatic_letter'] = explode(",", $muster13_data['mainsymptomatic_letter']);
                //
                $post['mainsymptomatic_freetext'] = $muster13_data['mainsymptomatic_freetext'];
                $post['dringlicher_behandlungsbedarf']  = $muster13_data['dringlicher_behandlungsbedarf'];
                $post['therapieziele'] = $muster13_data['therapieziele'];

                //ISPC-2530  Elena 15-20.01.2021
                $post['therapie_frequenz'] = $muster13_data['therapie_frequenz'];
			}
			
				if($_REQUEST['print'] == "prepdf")
				{
                    //ISPC-2530, elena, 15.10.2020
					$this->generatePdfNew(3, $post, 'muster13_pre', "muster132020_pre_pdf.html");
				}
				/*else if($_POST['post_status'] == "save")
				 {
				 $this->generatePdfNew(3, $_POST, 'muster13_save', "muster13_pdf.html");
				 }*/
				else 
				{
                    //ISPC-2530, elena, 15.10.2020
					$this->generatePdfNew(3, $post, 'muster13', "muster132020_pdf.html");
				}
				$this->_redirect(APP_BASE . "patientformnew/muster132020list?id=". $id);
				exit;
		}
		
		

		public function muster13Action()
		{
			//ISPC - 1968 - the  Rezepte -> Heilmittelverordnung (patientformnew/muster13)   should have the same LIST like receipts (Rezepte->Rezepte :: patientformnew/listreceipts).
			//so users could duplicate receipts etc and see old Heilmittelverordnungen
			
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			if(isset($_REQUEST['prid']))
			{
				$prid = $_REQUEST['prid'];
			}

			/*			 * ******************************************** */
			//header ..tried the init actions_with_patientinfo_and_tabmenus .. it breaks the css for the navigation.. no time to repair
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
			}

			$isadmin = 0;
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
			/* ------------------- get first Maindiagnosis		------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .= $comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
			
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
			
			if(count($dianoarray) > 0)
			{
				$icd_diagnosis = array();
				$icd_code = array();
				foreach($dianoarray as $diano) {
					$icd_diagnosis[] = $diano['diagnosis'];
					$icd_code[] = $diano['icdnumber'];
				}
			}
			
			if(!empty($icd_diagnosis))
			{
				foreach($icd_diagnosis as $kd=>$vd)
				{
					$nvd = 'icd_diagnosis'.($kd+1);
					$this->view->$nvd = $vd;
				}
			}
			
			if(!empty($icd_code))
			{
				foreach($icd_code as $kc=>$vc)
				{
					$nvc = 'icd_code'.($kc+1);
					$this->view->$nvc = $vc;
				}
			}
						
			/* ------------------------------------------------------------------------------ 
			$this->view->id = '';*/
			
			/* ------------------------------------------------------------------------------ */
			if($this->getRequest()->isPost())
			{
				$muster13_form = new Application_Form_Muster13();
				
				if($_POST['stampusers'] > 0)
				{
					if($multiplestamps_option === true)
					{
				
						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];
					}
					else
					{
						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getLastUserStamp($_POST['stampusers']);
						$stamp_user = $userstatmp[0]['userid'];
						$stamp_id = $userstatmp[0]['id'];
					}
				}
				
				$post = $_POST;
				$post['stampuser'] = $stamp_user;
				$post['stampid'] = $stamp_id;
				
				if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) == 0)
				{					
					$muster13_save_data = $muster13_form->insert_data($ipid, $post);
					$post['saved_id'] = $muster13_save_data;
// 					$this->generatePdfNew(3, $post, 'muster13', "muster13_pdf.html");
// 					$this->generatePdfNew(3, $post, 'muster13_pre', "muster13_pre_pdf.html");
					
					
					
					$ctitle = "Heilmittelverordnung wurde erstellt";
						
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->user_id = $logininfo->userid;
					$cust->recordid = $post['saved_id'];
					$cust->done_id = $post['saved_id'];
					$cust->tabname = Pms_CommonData::aesEncrypt("muster13_save");
					$cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
					$cust->save();
					
					
					$this->_redirect(APP_BASE . "patientformnew/muster13list?id=" . $_GET['id']);
				}
				else if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) > 0)
				{
					$muster13_update_data = $muster13_form->update_data($post);
// 					$this->generatePdfNew(3, $post, 'muster13', "muster13_pdf.html");
// 					$this->generatePdfNew(3, $post, 'muster13_pre', "muster13_pre_pdf.html");
					$this->_redirect(APP_BASE . "patientformnew/muster13list?id=" . $_GET['id']);
				}
			}
			$this->view->fdata = array();
			if(isset($prid))
			{	
				$muster13 = new Muster13();
				$muster13_data = $muster13->get_muster13_patient_data($ipid, $prid);
			}
			
			if($muster13_data)
			{
				$this->view->id = $muster13_data['id'];
				
				if($muster13_data['stampuser'] > 0)
				{					
						$this->view->stampuserid = $muster13_data['stampuser'];
						$this->view->stampid = $muster13_data['stampid'];

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($this->view->stampuserid, $this->view->stampid);
						
						$this->view->userstamp1 = $userstatmp[0]['row1'];
						$this->view->userstamp2 = $userstatmp[0]['row2'];
						$this->view->userstamp3 = $userstatmp[0]['row3'];
						$this->view->userstamp4 = $userstatmp[0]['row4'];
						$this->view->userstamp5 = $userstatmp[0]['row5'];
						$this->view->userstamp6 = $userstatmp[0]['row6'];
						$this->view->userstamp7 = $userstatmp[0]['row7'];
					
						
				}
				
				$verordnung_radio = explode(',', $muster13_data['verordnung_radio']);
				$gebuhr_radio = explode(',', $muster13_data['gebuhr_radio']);				
				
				/*if(empty($this->behandlungsbeginn_date))
				 {
				 $this->behandlungsbeginn_date = date('d.m.Y',time());
				 $behandlungsbeginn_date = date('d.m.y',strtotime($this->behandlungsbeginn_date));
				 }
				 else*/
		
				/* if($muster13_data['behandlungsbeginn_date'] != '0000-00-00' && date('Y', strtotime($muster13_data['behandlungsbeginn_date'])) != '1970' && strlen($muster13_data['behandlungsbeginn_date']) != '0')
				 {
				 $muster13_data['behandlungsbeginn_date'] = $muster13_data['behandlungsbeginn_date'];
				 }
				 else
				 {
				 $muster13_data['behandlungsbeginn_date'] = date('Y-m-d', time());
				 } */
				
				$this->view->client_ik_number = $muster13_data['client_ik_number'];
				
				$this->view->fdata['insurance_com_name'] = $muster13_data['insurance_name'];
				$this->view->fdata['patient_name'] = $muster13_data['patient_name'];
				$this->view->fdata['street'] = $muster13_data['street'];
				$this->view->fdata['zip'] = $muster13_data['zipcode'];
				$this->view->fdata['city'] = $muster13_data['city'];
				$this->view->fdata['birthd'] = ($muster13_data['birthdate'] == '0000-00-00' ? '' : date('d.m.Y', strtotime($muster13_data['birthdate'])));
				$this->view->fdata['insurance_number'] = $muster13_data['ins_insuranceno'];
				$this->view->fdata['kassen_no'] = $muster13_data['ins_kassenno'];
				$this->view->fdata['insurance_stat'] = $muster13_data['ins_status'];;
				
				$this->view->fdata['betriebsstatten_nr'] = $muster13_data['bsnr'];
				$this->view->fdata['lanr'] = $muster13_data['lanr'];
				
				$this->view->fdata['insurance_datum'] = ($muster13_data['datum'] == '0000-00-00' ? '' : date('d.m.Y', strtotime($muster13_data['datum'])));
				
				$this->view->gesamt_zuzahlung = $muster13_data['gesamt_zuzahlung'];
				$this->view->gesamt_brutto = $muster13_data['gesamt_brutto'];
				$this->view->heilmittel_pos_1 = $muster13_data['heilmittel_pos_1'];
				$this->view->faktor_1 = $muster13_data['faktor_1'];
				$this->view->heilmittel_pos_2 = $muster13_data['heilmittel_pos_2'];
				$this->view->faktor_2 = $muster13_data['faktor_2'];
				$this->view->wegegeld = $muster13_data['wegegeld'];
				$this->view->faktor_3 = $muster13_data['faktor_3'];
				$this->view->km = $muster13_data['km'];
				$this->view->hausbesuch_1 = $muster13_data['hausbesuch_1'];
				$this->view->faktor_4 = $muster13_data['faktor_4'];
				$this->view->hausbesuch_2 = $muster13_data['hausbesuch_2'];				
				
				$this->view->behandlungsbeginn_date_saved = ($muster13_data['behandlungsbeginn_date'] == '0000-00-00' ? '' : date('d.m.y', strtotime($muster13_data['behandlungsbeginn_date'])));
				
				$this->view->faktor_5 = $muster13_data['faktor_5'];
				$this->view->rechnungsnummer = $muster13_data['rechnungsnummer'];
				$this->view->belegnummer = $muster13_data['belegnummer'];
				$this->view->verordnungs_menge_1 = $muster13_data['verordnungs_menge_1'];
				$this->view->heilmittel_1 = $muster13_data['heilmittel_1'];
				$this->view->anzahl_woche_1 = $muster13_data['anzahl_woche_1'];
				$this->view->verordnungs_menge_2 = $muster13_data['verordnungs_menge_2'];
				$this->view->heilmittel_2 = $muster13_data['heilmittel_2'];
				$this->view->anzahl_woche_2 = $muster13_data['anzahl_woche_2'];
				$this->view->indikation_key = $muster13_data['indikation_key'];
				$this->view->indikation_name = $muster13_data['indikation_name'];
				
				$this->view->icd_code1 = $muster13_data['icd_code1'];
				$this->view->icd_diagnosis1 = $muster13_data['icd_diagnosis1'];
				
				$this->view->icd_code2 = $muster13_data['icd_code2'];
				$this->view->icd_diagnosis2 = $muster13_data['icd_diagnosis2'];
				
				$this->view->gegebenenfalls_spezifizierung = $muster13_data['gegebenenfalls_spezifizierung'];
				$this->view->medizinische_begrundung_verordnungen = $muster13_data['medizinische_begrundung_verordnungen'];				
				
				$this->view->verordnung_radio = $verordnung_radio;
				
				$this->view->hausbesuch_radio = $muster13_data['hausbesuch_radio'];
				$this->view->therapiebericht_radio = $muster13_data['therapiebericht_radio'];
				
				$this->view->gebuhr_radio = $gebuhr_radio;
				
				$this->view->unfall_radio = $muster13_data['unfall_radio'];
			}
			else
			{
				$this->view->id = '';

				//===================================================
				$client = new Client();
				$client_data = $client->getClientDataByid($clientid);
				$client_ik_number = $client_data[0]['institutskennzeichen'];
	// 			$this->view->fdata['client_ik_number'] = $client_ik_number;

				/*			 * * ******************PATIENT************************* */
				
				$parr = $patientmaster->getMasterData($decid, 0);
				
				$this->view->fdata['street'] = $parr['street1'];
				$this->view->fdata['zip'] = $parr['zip'];
				$this->view->fdata['city'] = $parr['city'];
				$this->view->fdata['patient_name'] = $parr['last_name'] . ", " . $parr['first_name'];
				$this->view->fdata['patient_adress'] = $parr['street1'] . "," . $parr['zip'] . "," . $parr['city'];
				$this->view->fdata['birthd'] = $parr['birthd'];

				/*			 * * ******************INSURANCE************************* */
				$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($parr['ipid']);

				$this->view->fdata['insurance_com_name'] = $healthinsu_array[0]['company_name'];
				$this->view->fdata['insurance_number'] = $healthinsu_array[0]['insurance_no'];
				$this->view->fdata['kassen_no'] = $healthinsu_array[0]['kvk_no'];
				$this->view->fdata['rezeptgebuhrenbefreiung'] = (int)$healthinsu_array[0]['rezeptgebuhrenbefreiung'];//TODO-1398
				
				
				$status_int_array = array("M" => "1", "F" => "3", "R" => "5");
			
				if($healthinsu_array[0]['insurance_status'] != "")
				{
					$this->view->insurance_status = $status_int_array[$healthinsu_array[0]['insurance_status']];
				}
				else
				{
					$this->view->insurance_status = "";
				}

				$this->view->fdata['insurance_stat'] = $this->view->insurance_status;
				
				
				
				//TODO-1398
				$stampDetails = null; // this holds the selected UserStamp row
				
				if ($multiplestamps_option) {
				    
				    //checkModulePrivileges("64", $logininfo->clientid)) => multiple => get LANR from UserStamp table
				    if (empty($uarray['default_stampusers'])) {
				        
				        $stamp = new UserStamp();
				        $stamp_detail = $stamp->getAllActiveUserStamp($logininfo->userid);
				        //print_r($stemp_detail); exit;
				        if (count($stamp_detail) == 1) {
				
				            $this->view->stampuserid = $stamp_detail[0]['userid'];
				            $this->view->stampid = $stamp_detail[0]['id'];
				
				            $this->view->fdata['betriebsstatten_nr'] = $stamp_detail[0]['stamp_bsnr'];
				            $this->view->fdata['lanr'] = $stamp_detail[0]['stamp_lanr'];
				            
				            $stampDetails = $stamp_detail[0];
				        }
				         
				    } else {

				        $this->view->stampuserid = $uarray['default_stampusers'];
				        $this->view->stampid = $uarray['default_stampid'];
				        
				        $userstamp = Doctrine::getTable('UserStamp')->find( $uarray['default_stampid'] );
				        
				        if ($userstamp) {
				            $userstamp_arr =  $userstamp ->toArray();
				            
				            $this->view->fdata['betriebsstatten_nr'] = $userstamp_arr['stamp_bsnr'];
				            $this->view->fdata['lanr'] = $userstamp_arr['stamp_lanr'];
				            
				            $stampDetails = $userstamp_arr;
				        }
				    }
				
				} else {
				    
				    // ! checkModulePrivileges("64", $logininfo->clientid)) => simple => get LANR from User table 
				    
				    if (empty($uarray['default_stampusers'])) {
				        
				        $stemp = new UserStamp();
				        $stemp_detail = $stemp->getLastUserStamp($logininfo->userid);
				         
				        if (count($stemp_detail) == 1) {
				            
				            $this->view->stampuserid = $logininfo->userid;
				            $this->view->stampid = $stemp_detail[0]['id'];
				            
				            $this->view->fdata['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
				            $this->view->fdata['lanr'] = $uarray['LANR'];
				            
				            $stampDetails =  $stemp_detail[0];
				        }
				        
				    } else {
				        
				        $this->view->stampuserid = $uarray['default_stampusers'];
				        $this->view->stampid = $uarray['default_stampid'];
				        
				        $user_of_stamp = Doctrine::getTable('User')->find($uarray['default_stampusers']);
				        if($user_of_stamp) {
				            $user_of_stamp_arr = $user_of_stamp->toArray();

				            $this->view->fdata['betriebsstatten_nr'] = $user_of_stamp_arr['betriebsstattennummer'];
				            $this->view->fdata['lanr'] = $user_of_stamp_arr['LANR'];
				            
				            $userstamp = Doctrine::getTable('UserStamp')->find( $uarray['default_stampid'] );
				            if ($userstamp) {
				                $stampDetails = $userstamp ->toArray();
				            }
				            
				        }
				    }
				}
				
				
				if ( ! empty($stampDetails)) {
				    $this->view->userstamp1 = $stampDetails['row1'];
				    $this->view->userstamp2 = $stampDetails['row2'];
				    $this->view->userstamp3 = $stampDetails['row3'];
				    $this->view->userstamp4 = $stampDetails['row4'];
				    $this->view->userstamp5 = $stampDetails['row5'];
				    $this->view->userstamp6 = $stampDetails['row6'];
				    $this->view->userstamp7 = $stampDetails['row7'];
				}
				
				//TODO-1398 added comment
// 				if(!$multiplestamps_option)
// 				{
// 					/* ------------------------------BEGIN USER------------------------------- */			
// 					$this->view->fdata['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
// 					$this->view->fdata['lanr'] = $uarray['LANR'];
					
// 					$this->view->stampuserid = $logininfo->userid;
					
					
// 					$ustamp = new UserStamp();
// 					$userstatmp = $ustamp->getLastUserStamp($logininfo->userid);
					
// 					$this->view->stampid = $userstatmp[0]['id'];
					
// 					$this->view->userstamp1 = $userstatmp[0]['row1'];
// 					$this->view->userstamp2 = $userstatmp[0]['row2'];
// 					$this->view->userstamp3 = $userstatmp[0]['row3'];
// 					$this->view->userstamp4 = $userstatmp[0]['row4'];
// 					$this->view->userstamp5 = $userstatmp[0]['row5'];
// 					$this->view->userstamp6 = $userstatmp[0]['row6'];
// 					$this->view->userstamp7 = $userstatmp[0]['row7'];
// 				}
				
				
				$this->view->fdata['insurance_datum'] = date('d.m.Y');
			}
			
			
			/* ------------------------------BEGIN USERS------------------------------ */
			$users = new User();
			$userarray = $users->getUserByClientid($clientid);
			User::beautifyName($userarray);
			
			$userarraylast = array();
			$userarraylast[] = $this->view->translate('selectuser');
			
			$userarraylast_ids = array();
			
			if ( ! empty($userarray)) {
			    $userarraylast_ids = array_column($userarray, 'id');
			}

			$userarrayIndexbyId = array();
			foreach($userarray as $user) {
			    $userarrayIndexbyId[$user['id']] = $user['nice_name'];
// 				$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
// 				$userarraylast_ids[] = $user['id'];
			}
			

			/*			 * * ******************BEGIN STAMPS************************* */
			
			$ustamp = new UserStamp();

			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
			$users_mstamps = array();
			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarrayIndexbyId[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			//TODO-1398 :
			//changes: list in the selectbox only the users that have stamps, why do you want all ?
			foreach($userarray as $user)
			{
			    if ( ! isset($users_mstamps[$user['id']])) 
			        continue;
			    
			    $userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
			}
			
			$this->view->users = $userarraylast;
			$this->view->users_mstamps = $users_mstamps;
			
// 			if($isadmin == 1)
// 			{
// 				$showselect = 1;
// 			}
// 			else
// 			{
// 				$showselect = 1; // show select to all
// 			}
            $showselect = 1;
			$this->view->showselect = $showselect;
			
			if($this->getRequest()->isPost())
			{

				if($_POST['post_status'] == "pdf_pre_print")
				{
					$this->generatePdfNew(3, $_POST, 'muster13_pre', "muster13_pre_pdf.html");
				}
				/*else if($_POST['post_status'] == "save")
				{
					$this->generatePdfNew(3, $_POST, 'muster13_save', "muster13_pdf.html");
				}*/
				else if($_POST['post_status'] == "pdf_print")
				{
					$this->generatePdfNew(3, $_POST, 'muster13', "muster13_pdf.html");
				}
			}
		}


    /**
     * ISPC-2530, elena, 14.10.2020
     * @throws Exception
     */
		public function muster132020Action()
		{
			//ISPC - 1968 - the  Rezepte -> Heilmittelverordnung (patientformnew/muster13)   should have the same LIST like receipts (Rezepte->Rezepte :: patientformnew/listreceipts).
			//so users could duplicate receipts etc and see old Heilmittelverordnungen
			
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			if(isset($_REQUEST['prid']))
			{
				$prid = $_REQUEST['prid'];
			}

			/*			 * ******************************************** */
			//header ..tried the init actions_with_patientinfo_and_tabmenus .. it breaks the css for the navigation.. no time to repair
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
            $this->view->verordungsgruppen = Muster13::getVerordungGroups();
			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
			}

			$isadmin = 0;
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
			/* ------------------- get first Maindiagnosis		------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .= $comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
			
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
			
			if(count($dianoarray) > 0)
			{
				$icd_diagnosis = array();
				$icd_code = array();
				foreach($dianoarray as $diano) {
					$icd_diagnosis[] = $diano['diagnosis'];
					$icd_code[] = $diano['icdnumber'];
				}
			}
			
			if(!empty($icd_diagnosis))
			{
				foreach($icd_diagnosis as $kd=>$vd)
				{
					$nvd = 'icd_diagnosis'.($kd+1);
					$this->view->$nvd = $vd;
				}
			}
			
			if(!empty($icd_code))
			{
				foreach($icd_code as $kc=>$vc)
				{
					$nvc = 'icd_code'.($kc+1);
					$this->view->$nvc = $vc;
				}
			}
						
			/* ------------------------------------------------------------------------------ 
			$this->view->id = '';*/
			
			/* ------------------------------------------------------------------------------ */
			if($this->getRequest()->isPost())
			{
				$muster13_form = new Application_Form_Muster13();
				
				if($_POST['stampusers'] > 0)
				{
					if($multiplestamps_option === true)
					{
				
						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];
					}
					else
					{
						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getLastUserStamp($_POST['stampusers']);
						$stamp_user = $userstatmp[0]['userid'];
						$stamp_id = $userstatmp[0]['id'];
					}
				}
				
				$post = $_POST;
				$post['stampuser'] = $stamp_user;
				$post['stampid'] = $stamp_id;
				
				if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) == 0)
				{					
					$muster13_save_data = $muster13_form->insert_data($ipid, $post);
					$post['saved_id'] = $muster13_save_data;
// 					$this->generatePdfNew(3, $post, 'muster13', "muster13_pdf.html");
// 					$this->generatePdfNew(3, $post, 'muster13_pre', "muster13_pre_pdf.html");
					
					
					
					$ctitle = "Heilmittelverordnung wurde erstellt";
						
					$cust = new PatientCourse();
					$cust->ipid = $ipid;
					$cust->course_date = date("Y-m-d H:i:s", time());
					$cust->course_type = Pms_CommonData::aesEncrypt("K");
					$cust->user_id = $logininfo->userid;
					$cust->recordid = $post['saved_id'];
					$cust->done_id = $post['saved_id'];
					$cust->tabname = Pms_CommonData::aesEncrypt("muster13_save");
					$cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
					$cust->save();
					
					
					$this->_redirect(APP_BASE . "patientformnew/muster132020list?id=" . $_GET['id']);
				}
				else if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) > 0)
				{
					$muster13_update_data = $muster13_form->update_data($post);
// 					$this->generatePdfNew(3, $post, 'muster13', "muster13_pdf.html");
// 					$this->generatePdfNew(3, $post, 'muster13_pre', "muster13_pre_pdf.html");
					$this->_redirect(APP_BASE . "patientformnew/muster132020list?id=" . $_GET['id']);
				}
			}
			$this->view->fdata = array();
			if(isset($prid))
			{	
				$muster13 = new Muster13();
				$muster13_data = $muster13->get_muster13_patient_data($ipid, $prid);
                //ISPC-2530  Elena 15-20.01.2021 (2)
                // if it is "old" form, redirect to route for old form
                // can be extended for future
				if(isset($muster13_data) && $muster13_data['formvalid'] != '01102020'){
                    $this->_redirect(APP_BASE . "patientformnew/muster13?id=" . $_GET['id'] . '&prid='. $prid);
			}
			}
			
			if($muster13_data)
			{
				$this->view->id = $muster13_data['id'];
				
				if($muster13_data['stampuser'] > 0)
				{					
						$this->view->stampuserid = $muster13_data['stampuser'];
						$this->view->stampid = $muster13_data['stampid'];

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($this->view->stampuserid, $this->view->stampid);
						
						$this->view->userstamp1 = $userstatmp[0]['row1'];
						$this->view->userstamp2 = $userstatmp[0]['row2'];
						$this->view->userstamp3 = $userstatmp[0]['row3'];
						$this->view->userstamp4 = $userstatmp[0]['row4'];
						$this->view->userstamp5 = $userstatmp[0]['row5'];
						$this->view->userstamp6 = $userstatmp[0]['row6'];
						$this->view->userstamp7 = $userstatmp[0]['row7'];
					
						
				}
				
				$verordnung_radio = explode(',', $muster13_data['verordnung_radio']);
				$gebuhr_radio = explode(',', $muster13_data['gebuhr_radio']);				
				
				/*if(empty($this->behandlungsbeginn_date))
				 {
				 $this->behandlungsbeginn_date = date('d.m.Y',time());
				 $behandlungsbeginn_date = date('d.m.y',strtotime($this->behandlungsbeginn_date));
				 }
				 else*/
		
				/* if($muster13_data['behandlungsbeginn_date'] != '0000-00-00' && date('Y', strtotime($muster13_data['behandlungsbeginn_date'])) != '1970' && strlen($muster13_data['behandlungsbeginn_date']) != '0')
				 {
				 $muster13_data['behandlungsbeginn_date'] = $muster13_data['behandlungsbeginn_date'];
				 }
				 else
				 {
				 $muster13_data['behandlungsbeginn_date'] = date('Y-m-d', time());
				 } */
				
				$this->view->client_ik_number = $muster13_data['client_ik_number'];
				
				$this->view->fdata['insurance_com_name'] = $muster13_data['insurance_name'];
				$this->view->fdata['patient_name'] = $muster13_data['patient_name'];
				$this->view->fdata['street'] = $muster13_data['street'];
				$this->view->fdata['zip'] = $muster13_data['zipcode'];
				$this->view->fdata['city'] = $muster13_data['city'];
				$this->view->fdata['birthd'] = ($muster13_data['birthdate'] == '0000-00-00' ? '' : date('d.m.Y', strtotime($muster13_data['birthdate'])));
				$this->view->fdata['insurance_number'] = $muster13_data['ins_insuranceno'];
				$this->view->fdata['kassen_no'] = $muster13_data['ins_kassenno'];
				$this->view->fdata['insurance_stat'] = $muster13_data['ins_status'];;
				
				$this->view->fdata['betriebsstatten_nr'] = $muster13_data['bsnr'];
				$this->view->fdata['lanr'] = $muster13_data['lanr'];
				
				$this->view->fdata['insurance_datum'] = ($muster13_data['datum'] == '0000-00-00' ? '' : date('d.m.Y', strtotime($muster13_data['datum'])));
				
				$this->view->gesamt_zuzahlung = $muster13_data['gesamt_zuzahlung'];
				$this->view->gesamt_brutto = $muster13_data['gesamt_brutto'];
				$this->view->heilmittel_pos_1 = $muster13_data['heilmittel_pos_1'];
				$this->view->faktor_1 = $muster13_data['faktor_1'];
				$this->view->heilmittel_pos_2 = $muster13_data['heilmittel_pos_2'];
				$this->view->faktor_2 = $muster13_data['faktor_2'];
				$this->view->wegegeld = $muster13_data['wegegeld'];
				$this->view->faktor_3 = $muster13_data['faktor_3'];
				$this->view->km = $muster13_data['km'];
				$this->view->hausbesuch_1 = $muster13_data['hausbesuch_1'];
				$this->view->faktor_4 = $muster13_data['faktor_4'];
				$this->view->hausbesuch_2 = $muster13_data['hausbesuch_2'];				
				
				$this->view->behandlungsbeginn_date_saved = ($muster13_data['behandlungsbeginn_date'] == '0000-00-00' ? '' : date('d.m.y', strtotime($muster13_data['behandlungsbeginn_date'])));
				
				$this->view->faktor_5 = $muster13_data['faktor_5'];
				$this->view->rechnungsnummer = $muster13_data['rechnungsnummer'];
				$this->view->belegnummer = $muster13_data['belegnummer'];
				$this->view->verordnungs_menge_1 = $muster13_data['verordnungs_menge_1'];
				$this->view->heilmittel_1 = $muster13_data['heilmittel_1'];
				$this->view->anzahl_woche_1 = $muster13_data['anzahl_woche_1'];
				$this->view->verordnungs_menge_2 = $muster13_data['verordnungs_menge_2'];
				$this->view->heilmittel_2 = $muster13_data['heilmittel_2'];
				$this->view->anzahl_woche_2 = $muster13_data['anzahl_woche_2'];
				$this->view->indikation_key = $muster13_data['indikation_key'];
				$this->view->indikation_name = $muster13_data['indikation_name'];
				
				$this->view->icd_code1 = $muster13_data['icd_code1'];
				$this->view->icd_diagnosis1 = $muster13_data['icd_diagnosis1'];
				
				$this->view->icd_code2 = $muster13_data['icd_code2'];
				$this->view->icd_diagnosis2 = $muster13_data['icd_diagnosis2'];
				
				$this->view->gegebenenfalls_spezifizierung = $muster13_data['gegebenenfalls_spezifizierung'];
				$this->view->medizinische_begrundung_verordnungen = $muster13_data['medizinische_begrundung_verordnungen'];				
				
				$this->view->verordnung_radio = $verordnung_radio;
				
				$this->view->hausbesuch_radio = $muster13_data['hausbesuch_radio'];
				$this->view->therapiebericht_radio = $muster13_data['therapiebericht_radio'];
				
				$this->view->gebuhr_radio = $gebuhr_radio;
				
				$this->view->unfall_radio = $muster13_data['unfall_radio'];

				$this->view->therapieziele = $muster13_data['therapieziele'];
				$this->view->diagnosis_freetext = $muster13_data['diagnosis_freetext'];
				$this->view->diaggroup = $muster13_data['diaggroup'];	
				//TODO-3735 CRISTI.C
				$this->view->mainsymptomatic_letter = $muster13_data['mainsymptomatic_letter'];  								
				$this->view->therapie_frequenz = $muster13_data['therapie_frequenz'];
				//
				$this->view->mainsymptomatic_freetext = $muster13_data['mainsymptomatic_freetext'];
				$this->view->verordnung_gruppe = $muster13_data['verordnung_gruppe'];
                $this->view->heilmittel_3 = $muster13_data['heilmittel_3'];
                $this->view->anzahl_woche_3 = $muster13_data['anzahl_woche_3'];
                $this->view->heilmittel_4 = $muster13_data['heilmittel_4'];
                $this->view->anzahl_woche_4 = $muster13_data['anzahl_woche_4'];
                //ISPC-2530,elena,15.01.2021
                $this->view->therapie_frequenz = $muster13_data['therapie_frequenz'];

			}
			else
			{
				$this->view->id = '';

				//===================================================
				$client = new Client();
				$client_data = $client->getClientDataByid($clientid);
				$client_ik_number = $client_data[0]['institutskennzeichen'];
	// 			$this->view->fdata['client_ik_number'] = $client_ik_number;

				/*			 * * ******************PATIENT************************* */
				
				$parr = $patientmaster->getMasterData($decid, 0);
				
				$this->view->fdata['street'] = $parr['street1'];
				$this->view->fdata['zip'] = $parr['zip'];
				$this->view->fdata['city'] = $parr['city'];
				$this->view->fdata['patient_name'] = $parr['last_name'] . ", " . $parr['first_name'];
				$this->view->fdata['patient_adress'] = $parr['street1'] . "," . $parr['zip'] . "," . $parr['city'];
				$this->view->fdata['birthd'] = $parr['birthd'];

				/*			 * * ******************INSURANCE************************* */
				$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($parr['ipid']);

				$this->view->fdata['insurance_com_name'] = $healthinsu_array[0]['company_name'];
				$this->view->fdata['insurance_number'] = $healthinsu_array[0]['insurance_no'];
				$this->view->fdata['kassen_no'] = $healthinsu_array[0]['kvk_no'];
				$this->view->fdata['rezeptgebuhrenbefreiung'] = (int)$healthinsu_array[0]['rezeptgebuhrenbefreiung'];//TODO-1398
				
				
				$status_int_array = array("M" => "1", "F" => "3", "R" => "5");
			
				if($healthinsu_array[0]['insurance_status'] != "")
				{
					$this->view->insurance_status = $status_int_array[$healthinsu_array[0]['insurance_status']];
				}
				else
				{
					$this->view->insurance_status = "";
				}

				$this->view->fdata['insurance_stat'] = $this->view->insurance_status;
				
				
				
				//TODO-1398
				$stampDetails = null; // this holds the selected UserStamp row
				
				if ($multiplestamps_option) {
				    
				    //checkModulePrivileges("64", $logininfo->clientid)) => multiple => get LANR from UserStamp table
				    if (empty($uarray['default_stampusers'])) {
				        
				        $stamp = new UserStamp();
				        $stamp_detail = $stamp->getAllActiveUserStamp($logininfo->userid);
				        //print_r($stemp_detail); exit;
				        if (count($stamp_detail) == 1) {
				
				            $this->view->stampuserid = $stamp_detail[0]['userid'];
				            $this->view->stampid = $stamp_detail[0]['id'];
				
				            $this->view->fdata['betriebsstatten_nr'] = $stamp_detail[0]['stamp_bsnr'];
				            $this->view->fdata['lanr'] = $stamp_detail[0]['stamp_lanr'];
				            
				            $stampDetails = $stamp_detail[0];
				        }
				         
				    } else {

				        $this->view->stampuserid = $uarray['default_stampusers'];
				        $this->view->stampid = $uarray['default_stampid'];
				        
				        $userstamp = Doctrine::getTable('UserStamp')->find( $uarray['default_stampid'] );
				        
				        if ($userstamp) {
				            $userstamp_arr =  $userstamp ->toArray();
				            
				            $this->view->fdata['betriebsstatten_nr'] = $userstamp_arr['stamp_bsnr'];
				            $this->view->fdata['lanr'] = $userstamp_arr['stamp_lanr'];
				            
				            $stampDetails = $userstamp_arr;
				        }
				    }
				
				} else {
				    
				    // ! checkModulePrivileges("64", $logininfo->clientid)) => simple => get LANR from User table 
				    
				    if (empty($uarray['default_stampusers'])) {
				        
				        $stemp = new UserStamp();
				        $stemp_detail = $stemp->getLastUserStamp($logininfo->userid);
				         
				        if (count($stemp_detail) == 1) {
				            
				            $this->view->stampuserid = $logininfo->userid;
				            $this->view->stampid = $stemp_detail[0]['id'];
				            
				            $this->view->fdata['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
				            $this->view->fdata['lanr'] = $uarray['LANR'];
				            
				            $stampDetails =  $stemp_detail[0];
				        }
				        
				    } else {
				        
				        $this->view->stampuserid = $uarray['default_stampusers'];
				        $this->view->stampid = $uarray['default_stampid'];
				        
				        $user_of_stamp = Doctrine::getTable('User')->find($uarray['default_stampusers']);
				        if($user_of_stamp) {
				            $user_of_stamp_arr = $user_of_stamp->toArray();

				            $this->view->fdata['betriebsstatten_nr'] = $user_of_stamp_arr['betriebsstattennummer'];
				            $this->view->fdata['lanr'] = $user_of_stamp_arr['LANR'];
				            
				            $userstamp = Doctrine::getTable('UserStamp')->find( $uarray['default_stampid'] );
				            if ($userstamp) {
				                $stampDetails = $userstamp ->toArray();
				            }
				            
				        }
				    }
				}
				
				
				if ( ! empty($stampDetails)) {
				    $this->view->userstamp1 = $stampDetails['row1'];
				    $this->view->userstamp2 = $stampDetails['row2'];
				    $this->view->userstamp3 = $stampDetails['row3'];
				    $this->view->userstamp4 = $stampDetails['row4'];
				    $this->view->userstamp5 = $stampDetails['row5'];
				    $this->view->userstamp6 = $stampDetails['row6'];
				    $this->view->userstamp7 = $stampDetails['row7'];
				}
				
				//TODO-1398 added comment
// 				if(!$multiplestamps_option)
// 				{
// 					/* ------------------------------BEGIN USER------------------------------- */			
// 					$this->view->fdata['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
// 					$this->view->fdata['lanr'] = $uarray['LANR'];
					
// 					$this->view->stampuserid = $logininfo->userid;
					
					
// 					$ustamp = new UserStamp();
// 					$userstatmp = $ustamp->getLastUserStamp($logininfo->userid);
					
// 					$this->view->stampid = $userstatmp[0]['id'];
					
// 					$this->view->userstamp1 = $userstatmp[0]['row1'];
// 					$this->view->userstamp2 = $userstatmp[0]['row2'];
// 					$this->view->userstamp3 = $userstatmp[0]['row3'];
// 					$this->view->userstamp4 = $userstatmp[0]['row4'];
// 					$this->view->userstamp5 = $userstatmp[0]['row5'];
// 					$this->view->userstamp6 = $userstatmp[0]['row6'];
// 					$this->view->userstamp7 = $userstatmp[0]['row7'];
// 				}
				
				
				$this->view->fdata['insurance_datum'] = date('d.m.Y');
			}
			
			
			/* ------------------------------BEGIN USERS------------------------------ */
			$users = new User();
			$userarray = $users->getUserByClientid($clientid);
			User::beautifyName($userarray);
			
			$userarraylast = array();
			$userarraylast[] = $this->view->translate('selectuser');
			
			$userarraylast_ids = array();
			
			if ( ! empty($userarray)) {
			    $userarraylast_ids = array_column($userarray, 'id');
			}

			$userarrayIndexbyId = array();
			foreach($userarray as $user) {
			    $userarrayIndexbyId[$user['id']] = $user['nice_name'];
// 				$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
// 				$userarraylast_ids[] = $user['id'];
			}
			

			/*			 * * ******************BEGIN STAMPS************************* */
			
			$ustamp = new UserStamp();

			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
			$users_mstamps = array();
			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarrayIndexbyId[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			//TODO-1398 :
			//changes: list in the selectbox only the users that have stamps, why do you want all ?
			foreach($userarray as $user)
			{
			    if ( ! isset($users_mstamps[$user['id']])) 
			        continue;
			    
			    $userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
			}
			
			$this->view->users = $userarraylast;
			$this->view->users_mstamps = $users_mstamps;
			
// 			if($isadmin == 1)
// 			{
// 				$showselect = 1;
// 			}
// 			else
// 			{
// 				$showselect = 1; // show select to all
// 			}
            $showselect = 1;
			$this->view->showselect = $showselect;
			
			if($this->getRequest()->isPost())
			{

				if($_POST['post_status'] == "pdf_pre_print")
				{
					$this->generatePdfNew(3, $_POST, 'muster13_pre', "muster132020_pre_pdf.html");
				}
				/*else if($_POST['post_status'] == "save")
				{
					$this->generatePdfNew(3, $_POST, 'muster13_save', "muster13_pdf.html");
				}*/
				else if($_POST['post_status'] == "pdf_print")
				{
					$this->generatePdfNew(3, $_POST, 'muster13', "muster132020_pdf.html");
				}
			}
		}
		
		
		
		public function muster13_150602Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;


			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */

			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
			}

			$isadmin = 0;
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
			/* ------------------- get first Maindiagnosis		------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .= $comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
			
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
			
			if(count($dianoarray) > 0 && (empty($muster13_data['icd_code']) || empty($muster13_data['icd_diagnosis'])))
			{
				$icd_diagnosis = $dianoarray[0]['diagnosis'];
				$icd_code = $dianoarray[0]['icdnumber'];
			}
			
			
			if($icd_diagnosis)
			{
				$this->view->icd_diagnosis = $icd_diagnosis;
			}
			/* else
			 {
			$this->view->icd_diagnosis = '';
			} */
			if($icd_code)
			{
				$this->view->icd_code = $icd_code;
			}
			/* else
			 {
			$this->view->icd_code = '';
			} */
			//print_r($this->view->icd_code);exit;
			/* ------------------------------------------------------------------------------ */
			if($this->getRequest()->isPost())
			{
				$muster13_form = new Application_Form_Muster13();

				if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) == 0)
				{
					$muster13_save_data = $muster13_form->insert_data($ipid, $_POST);
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				else if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) > 0)
				{
					$muster13_update_data = $muster13_form->update_data($_POST);
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
			}

			//get saved form data
			$muster13 = new Muster13();
			$muster13_data = $muster13->get_muster_patient_data($ipid);

			if($muster13_data)
			{
				$this->view->id = $muster13_data['id'];
				/* if($muster13_data['behandlungsbeginn_date'] != '0000-00-00' && date('Y', strtotime($muster13_data['behandlungsbeginn_date'])) != '1970' && strlen($muster13_data['behandlungsbeginn_date']) != '0')
				  {
				  $muster13_data['behandlungsbeginn_date'] = $muster13_data['behandlungsbeginn_date'];
				  }
				  else
				  {
				  $muster13_data['behandlungsbeginn_date'] = date('Y-m-d', time());
				  } */

				$this->view->gesamt_zuzahlung = $muster13_data['gesamt_zuzahlung'];
				$this->view->gesamt_brutto = $muster13_data['gesamt_brutto'];
				$this->view->heilmittel_pos_1 = $muster13_data['heilmittel_pos_1'];
				$this->view->faktor_1 = $muster13_data['faktor_1'];
				$this->view->heilmittel_pos_2 = $muster13_data['heilmittel_pos_2'];
				$this->view->faktor_2 = $muster13_data['faktor_2'];
				$this->view->wegegeld = $muster13_data['wegegeld'];
				$this->view->faktor_3 = $muster13_data['faktor_3'];
				$this->view->km = $muster13_data['km'];
				$this->view->hausbesuch_1 = $muster13_data['hausbesuch_1'];
				$this->view->faktor_4 = $muster13_data['faktor_4'];
				$this->view->hausbesuch_2 = $muster13_data['hausbesuch_2'];
				$this->view->behandlungsbeginn_date = $muster13_data['behandlungsbeginn_date'];
				$this->view->faktor_5 = $muster13_data['faktor_5'];
				$this->view->rechnungsnummer = $muster13_data['rechnungsnummer'];
				$this->view->belegnummer = $muster13_data['belegnummer'];
				$this->view->verordnungs_menge_1 = $muster13_data['verordnungs_menge_1'];
				$this->view->heilmittel_1 = $muster13_data['heilmittel_1'];
				$this->view->anzahl_woche_1 = $muster13_data['anzahl_woche_1'];
				$this->view->verordnungs_menge_2 = $muster13_data['verordnungs_menge_2'];
				$this->view->heilmittel_2 = $muster13_data['heilmittel_2'];
				$this->view->anzahl_woche_2 = $muster13_data['anzahl_woche_2'];
				$this->view->indikation_key = $muster13_data['indikation_key'];
				$this->view->indikation_name = $muster13_data['indikation_name'];
				$this->view->icd_code = $muster13_data['icd_code'];
				$this->view->icd_diagnosis = $muster13_data['icd_diagnosis'];
				$this->view->gegebenenfalls_spezifizierung = $muster13_data['gegebenenfalls_spezifizierung'];
				$this->view->medizinische_begrundung_verordnungen = $muster13_data['medizinische_begrundung_verordnungen'];
				$this->view->verordnung_radio = $muster13_data['verordnung_radio'];
				$this->view->hausbesuch_radio = $muster13_data['hausbesuch_radio'];
				$this->view->therapiebericht_radio = $muster13_data['therapiebericht_radio'];
				$this->view->gebuhr_radio = $muster13_data['gebuhr_radio'];
				$this->view->unfall_radio = $muster13_data['unfall_radio'];
			}
			else
			{
				$this->view->id = '';
			}


			
			//===================================================
			$this->view->fdata = array();
			$client = new Client();
			$client_data = $client->getClientDataByid($clientid);
			$client_ik_number = $client_data[0]['institutskennzeichen'];
			$this->view->fdata['client_ik_number'] = $client_ik_number;

			/*			 * * ******************PATIENT************************* */

			$parr = $patientmaster->getMasterData($decid, 0);

			$this->view->fdata['street'] = $parr['street1'];
			$this->view->fdata['zip'] = $parr['zip'];
			$this->view->fdata['city'] = $parr['city'];
			$this->view->fdata['patient_name'] = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->fdata['patient_adress'] = $parr['street1'] . "," . $parr['zip'] . "," . $parr['city'];
			$this->view->fdata['birthd'] = $parr['birthd'];

			/*			 * * ******************INSURANCE************************* */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($parr['ipid']);

			$this->view->fdata['insurance_com_name'] = $healthinsu_array[0]['company_name'];
			$this->view->fdata['insurance_number'] = $healthinsu_array[0]['insurance_no'];
			$this->view->fdata['kassen_no'] = $healthinsu_array[0]['kvk_no'];



			if($healthinsu_array[0]['insurance_status'] != "")
			{
				$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
			}
			else
			{
				$this->view->insurance_status = "";
			}

			$this->view->fdata['insurance_stat'] = $this->view->insurance_status;

			/* ------------------------------BEGIN USER------------------------------- */
			$this->view->fdata['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
			$this->view->fdata['lanr'] = $uarray['LANR'];


			/* ------------------------------BEGIN USERS------------------------------ */
			$users = new User();
			$userarray = $users->getUserByClientid($clientid);
			$userarraylast[] = $this->view->translate('selectuser');

			$userarraylast_ids = array();

			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['last_name']) . ", " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;

			/*			 * * ******************BEGIN STAMPS************************* */

			$ustamp = new UserStamp();

			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;


			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				$showselect = 1; // show select to all
			}
			$this->view->showselect = $showselect;

			if($this->getRequest()->isPost())
			{

				if($_POST['post_status'] == "pdf_pre_print")
				{

					//$_POST['behandlungsbeginn_date'] = $this->view->behandlungsbeginn_date;
					$this->generatePdfNew(3, $_POST, 'muster13_pre', "muster13_pre_pdf.html");
				}
				else if($_POST['post_status'] == "pdf_print")
				{//print_r($this->view->behandlungsbeginn_date);exit;
					//$_POST['behandlungsbeginn_date'] = $this->view->behandlungsbeginn_date;
					$this->generatePdfNew(3, $_POST, 'muster13', "muster13_pdf.html");
				}
			}
		}

		public function receiptpinewAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->view->usertype = $logininfo->usertype;
			$receipts_form = new Application_Form_Receipts();
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$this->view->encid = Pms_Uuid::encrypt($decid);
			$ipid = Pms_CommonData::getIpid($decid);
			$receipts_mdl = new Receipts();

			/* ------------------------------------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->clientid = $logininfo->clientid;

			
			$saved_receipt_profiles_preffered = UserTable::findAllPrintProfilesPreffered($this->logininfo->userid);
			
			$saved_receipt_profiles_preffered_arr = $saved_receipt_profiles_preffered[0]['receipt_print_settings'];
			if($saved_receipt_profiles_preffered_arr)
			{
			    if(!is_array($saved_receipt_profiles_preffered_arr))
			    {
			        $saved_receipt_profiles_preffered_arr = array($saved_receipt_profiles_preffered_arr);
			    }
			    $preffered_profiles_details = ReceiptPrintSettingsTable::findClientReceiptPrintSettingsbyId($saved_receipt_profiles_preffered_arr,$this->logininfo->clientid);
			}
			
			$has_profile = 0 ; 
			if($preffered_profiles_details && count($preffered_profiles_details) > 0)
			{
               $has_profile = count($preffered_profiles_details); 
               
               if(count($preffered_profiles_details) =="1"){
                   $single_prof = $preffered_profiles_details['0']['id'];
               } else{
                   $single_prof = 0;
               }
			} 
			
			$this->view->has_print_profiles = $has_profile;
			$this->view->single_prof = $single_prof;
			
			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;
			/* --------------------Check for MMI module -- used only for livesearch in MMI Receipt-- --------- */
			$modules = new Modules();
			if($modules->checkModulePrivileges("87", $logininfo->clientid))
			{
				$this->view->show_mmi = "1";
			}
			else
			{
				$this->view->show_mmi = "0";
			}
			/* ------------------------------------------------------------------------------ */
			
			/* ISPC-2781 Lore 04.01.2021 */
			/* -------Check for module Private Recipe only for private patient --------- */
			$module_private_recipe = "0";
			if($modules->checkModulePrivileges("248", $logininfo->clientid))	{
			    $module_private_recipe = "1";
			}
			
			$patienthealth = new PatientHealthInsurance();
			$hi_values = $patienthealth->getPatientHealthInsurance($ipid);
			
			if($module_private_recipe == '1' && $hi_values[0]['privatepatient'] == '1'){
			    $this->view->show_only_private_recipe = "1";
			} else {
			    $this->view->show_only_private_recipe = "0";
			}
            //.
			
			/* ------------------------------------------------------------------------------ */

			//ISPC-2711 Ancuta 08.03.2021
			/* 
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
			}
			 */
			$user_data_array = User::getUserDetails($logininfo->userid);
			$uarray = $user_data_array[0];
			
			$user_dosage_action = "do_nothing";
			$user_use_btm_text = false;
			if(!empty($uarray['UserSettings'])){
			    $user_dosage_action = $uarray['UserSettings']['user_receipt_dosage'];
			    $user_use_btm_text = $uarray['UserSettings']['user_btm_text'] == "1" ? true : false;
			} 
			$this->view->user_dosage_action =  $user_dosage_action ;
			$this->view->user_use_btm_text     =  $user_use_btm_text;
			// --
			
			
			$this->view->nr=  $uarray['betriebsstatten_nr'];
          
			$isadmin = 0;
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}

			if(strlen(Zend_Registry::get('mmilicserial')) > '0' && $this->view->show_mmi == "1")
			{
				$this->view->show_pi = 1;
			}
	
			/* ------------------------------------------------------------------------------ */

            $client_data = Pms_CommonData::getClientData($logininfo->clientid);

            if($client_data){
                $client_print_style =$client_data[0]['receipt_print_style']; 
            }

			
			//get colours css classes
			$this->view->receipt_status_colours_arr = Pms_CommonData::receipt_status_colours();
			$this->view->receipt_status_colours = json_encode(Pms_CommonData::receipt_status_colours());
			


			/* -------------- Diagnosis  - Get Main Diagnosis --------------------------------- */
			$abb = "'HD'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($logininfo->clientid, $abb);
			if(!$ddarr[0]['id'])
			{
			    $ddarr[0]['id'] = 0;
			}
			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
			    $stam_diagno = array();
			    $diagns = new PatientDiagnosis();
			    $stam_diagno = $diagns->get_latest_diagnosis($ipid, $val1['id']);
			    $dia = 1;
			    foreach($stam_diagno as $key => $val)
			    {
			        if(strlen($val['diagnosis']) > 0)
			        {
			            if(strlen($val['icdnumber']) > 0)
			            {
			                $other_diagnosis .= $comma . $val['diagnosis'];
			            }
			            else
			            {
			                $other_diagnosis .= $comma . $val['diagnosis'];
			            }
			            $dia++;
			            $comma = ", ";
			        }
			    }
			}
			
			$main_diagnosis = 'Diagnose: '.$other_diagnosis;
				
			
			
			/* ----------------------------------POST------------------- */
// 			if($_POST)
// 			{ 
			if( $this->getRequest()->isPost())
			{	
                if($client_print_style == "kv_receipt"){
    			    
    				if($_POST['stampusers'] > 0)
    				{
    					if($multiplestamps_option === true)
    					{
    
    						$stamp_info = explode('-', $_POST['stampusers']);
    						$stamp_user = $stamp_info[0];
    						$stamp_id = $stamp_info[1];
    
    						$ustamp = new UserStamp();
    						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
    
    						$userstamp1 = $userstatmp[0]['row1'];
    						$userstamp2 = $userstatmp[0]['row2'];
    						$userstamp3 = $userstatmp[0]['row3'];
    						$userstamp4 = $userstatmp[0]['row4'];
    						$userstamp5 = $userstatmp[0]['row5'];
    						$userstamp6 = $userstatmp[0]['row6'];
    						$userstamp7 = $userstatmp[0]['row7'];
    					}
    					else
    					{
    						$ustamp = new UserStamp();
    						$userstatmp = $ustamp->getLastUserStamp($_POST['stampusers']);
    
    						$userstamp1 = $userstatmp[0]['row1'];
    						$userstamp2 = $userstatmp[0]['row2'];
    						$userstamp3 = $userstatmp[0]['row3'];
    						$userstamp4 = $userstatmp[0]['row4'];
    						$userstamp5 = $userstatmp[0]['row5'];
    						$userstamp6 = $userstatmp[0]['row6'];
    						$userstamp7 = $userstatmp[0]['row7'];
    					}
    				}
    				
    				
    				
    				//save/update button
   				if(!empty($_POST['savereceipt']) || !empty($_POST['print_save_receipt']) || !empty($_POST['print_save_receipt_btm_a']))
//                     if((!empty($_POST['savereceipt']) || !empty($_POST['print_save_receipt'])) )     //ISPC-2711 Lore 01.04.2021 
                    {// ISPC-2711 Ancuta 12.03.2021 -  btm A
                        
    					$post = $_POST;
    					$post['ipid'] = $ipid;
    					$post['clientid'] = $logininfo->clientid;
    					$post['userid'] = $logininfo->userid;
    
    					$receipt_form = new Application_Form_Receipts();
    
    					if(strlen($_REQUEST['rpid']) > '0' && $_REQUEST['rpid'] > '0')
    					{
    						//do update
    						$receipt_form_res = $receipt_form->update_receipt($_REQUEST['rpid'], $post);
    					}
    					else
    					{
    						//do insert
    						$receipt_form_res = $receipt_form->insert_receipt($post);
    					}
    
    					if(!$receipt_form_res)
    					{
    						$this->retain_values($_POST);
    						$receipt_form->assignErrorMessages();
    						exit;
    					}
    					else
    					{
    						$post_data = $receipts_mdl->get_receipt($receipt_form_res);
    						
    						$post_data['med1'] = $post_data['medication_1'];
    						$post_data['med4'] = $post_data['medication_2'];
    						$post_data['med7'] = $post_data['medication_3'];
    						$post_data['line1'] = $post_data['custom_line_1'];
    						$post_data['line2'] = $post_data['custom_line_2'];
    						$post_data['line3'] = $post_data['custom_line_3'];
    						$post_data['insurancecomname'] = $post_data['insurance_name'];
    						$post_data['patientlastname'] = $post_data['last_name'];
    						$post_data['patientfirstname'] = $post_data['first_name'];
    						if($post_data['birthdate'] != '0000-00-00')
    						{
    							$post_data['birthdate'] = date('d.m.Y', strtotime($post_data['birthdate']));
    						}
    						$post_data['kassenno'] = $post_data['ins_kassenno'];
    						$post_data['insuranceno'] = $post_data['ins_insuranceno'];
    						$post_data['status'] = $post_data['ins_status'];
    						$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
    						$post_data['lanr'] = $post_data['lanr'];
    						if($post_data['datum'] != '0000-00-00')
    						{
    						    $post_data['datum'] = date("d.m.Y", strtotime($post_data['datum']));
    						}else{
    						    $post_data['datum'] = " ";
    						}
    						//checkboxes saved data
    						$post_data['getiuhrfrei'] = explode(",", $post_data['foc']);
    						$post_data['mttel'] = $post_data['aid'];
    						$post_data['soff'] = $post_data['vaccine'];
    						$post_data['bedaf'] = $post_data['bedarf'];
    						$post_data['pricht'] = $post_data['price'];
    
    						

    						$post_data["med2"] = $_POST['line1'];
    						$post_data["med5"] = $_POST['line2'];
//     						$post_data["med8"] = $_POST['line3'];

    						$limit_line3 = trim(rtrim(substr($_POST['line3'], 0, 92)));
    						$line_3_array = str_split($limit_line3,46);
    						$post_data["med8"] = $line_3_array;
    						
    						$post_data['zipcode_city'] = $_POST['zipcode'] . ' ' . $_POST['city'];
    						
    						$post_data["userstamp1"] = $userstamp1;
    						$post_data["userstamp2"] = $userstamp2;
    						$post_data["userstamp3"] = $userstamp3;
    						$post_data["userstamp4"] = $userstamp4;
    						$post_data["userstamp5"] = $userstamp5;
    						$post_data["userstamp6"] = $userstamp6;
    						$post_data["userstamp7"] = $userstamp7;
    					
    						$post_data['pdfname'] = 'mmi_rezept';
    						$post_data['password'] = $logininfo->filepass;
    						
    						// force print dialog
//     						$post_data['pdf_js'] = 'print();';
    						$post_data['auto_print'] = true;
    					}
    					
    					
    					// TODO-2537: change ONLY form PDF ( Ancuta )
    					if($post_data['birthdate'] != '0000-00-00')
    					{
    					    $post_data['birthdate'] = date('d.m.y', strtotime($post_data['birthdate']));
    					}
    					//--
    					
    					//TODO-3438 Ancuta 18.09.2020 - hack to replace  wierd symbol - added in ipad
    					foreach($post_data as $col=>$val){
    					    $post_data[$col] = str_replace("—", "-", $val);
    					}
    					// -
    					$old_style = new Pms_Oldpdf();
    					$uploaded_pdf = $old_style ->generate($post_data,false,true); // do not return for download , Upload  					
    					
    					$filename = "";
    					
    					$post_data['medication1line1'] = $_POST['medication1line1'] ;
    					$post_data['medication4line2'] = $_POST['medication4line2'] ;
    					$post_data['medication7line3'] = $_POST['medication7line3'] ;
    					
    					
    					foreach($post_data as $field => $value)
    					{
    					    if(($field == "med1" && strlen($value) > 0 ) || ($field == "med4" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med5" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med8" && strlen($value) > 0 ) || ($field == "med9" && strlen($value) > 0 ))
    					    {
    					        if( $post_data['medication1line1'] == "1" && ($field == "med1"  && strlen($value) > 0) ){
    					            $value = $post_data['med1'].$post_data['line1'];
    					        }
    					        	
    					        if( $post_data['medication4line2'] == "1" && ($field == "med4"  && strlen($value) > 0) ){
    					            $value = $post_data['med4'].$post_data['line2`'];
    					        }
    					        	
    					        if( $post_data['medication7line3'] == "1" && ($field == "med7"  && strlen($value) > 0) ){
    					            $value = $post_data['med7'].$post_data['line3`'];
    					        }
    					        
    					        $medication_array[] = $value;
    					    }
    					}
    					
    					if(!empty($medication_array))
    					{
    					    $medication = implode(", ", $medication_array);
    					    $medication_str = " (" . $medication . ")";
    					}
    					else
    					{
    					    $medication_str = "";
    					}
    					
    
    					
    					//add to Patient Files(Datein & Dokumente)
    					if($uploaded_pdf && strlen($uploaded_pdf['pdf_filename']) > '0')
    					{
    						
    						if ($post['receipt_type'] == 'kv_btm') {
    							
    							$file_title =  'BTM Rezept ';
    							
    						} else {
    							
    							$file_title =  'Rezept ';
    							
    						}
    						    						
    					    $cust = new PatientFileUpload();
    					    $cust->title = Pms_CommonData::aesEncrypt( $file_title . $medication_str );
    					    $cust->ipid = $ipid;
    					    $cust->file_name = Pms_CommonData::aesEncrypt($uploaded_pdf['pdf_filename']);
    					    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
    					    //$cust->recordid = $receipt_form_res;
    					    //$cust->tabname = "receiptupload";
    					    $cust->save();
    					    $recordid = $cust->id;
    					
    					    //insert system file tags - ISPC-1247 (each mmi receipt type has its own tag)
    					    if(!empty($_POST['receipt_type']) && strlen($_POST['receipt_type']) > '0')
    					    {
    					        $insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, false, $_POST['receipt_type']);
    					    }
    					    
    					    
    					    //    TODO-2791  ISPC : print history of recipe Ancuta 08.01.2020
    					    if( !empty($recordid) && ! empty($_POST['print_save_receipt']) && !empty($post_data['id'])){
    					        
    					        //prepare save receipt was printed log
    					        $ipid = $ipid;
    					        $client = $logininfo->clientid;
    					        $data['user'] = $logininfo->userid;
    					        $data['receipt'] = $post_data['id'];
    					        $data['date'] = date('Y-m-d H:i:s', time());
    					        $data['operation'] = "printed";
    					        
    					        //save log
    					        $receipt_log = new Application_Form_ReceiptLog();
    					        $write_receipt_log = $receipt_log->insert_receipt_log($ipid, $client, $data);
    					        
    					        
    					        if(substr($post_data['receipt_status'],'1','1') != "g")
    					        {
    					            //print default status
    					            $data['status'] = substr($post_data['receipt_status'],'0','1')."g".substr($post_data['receipt_status'],'2','1');
    					            $data['receipt'] = $post_data['id'];
    					            $update_status = $receipts_form->update_receipt_status($data);
    					        }
    					    }
    					    //-- 
    					}
    					
    					if($recordid && $receipt_form_res)
    					{
    					    //insert comment in verlauf
    					    $ctitle = "Rezept erstellt " . $medication_str;
    					
    					    $cust = new PatientCourse();
    					    $cust->ipid = $ipid;
    					    $cust->course_date = date("Y-m-d H:i:s", time());
    					    $cust->course_type = Pms_CommonData::aesEncrypt("K");
    					    $cust->user_id = $logininfo->userid;
    					    $cust->recordid = $recordid;
    					    $cust->done_id = $receipt_form_res;
    					    $cust->tabname = Pms_CommonData::aesEncrypt("receiptupload");
    					    $cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
    					    $cust->save();
    					}
    				}
    				else
    				{
    					//pdf from link
    					if(strlen($_REQUEST['rpid']) > '0' && $_REQUEST['rpid'] > '0' && $_REQUEST['mode'] == "pdf")
    					{
    						//get receipt data
    						$post_data = $receipts_mdl->get_receipt($_REQUEST['rpid']);
    
    						if($multiplestamps_option === true && $post_data['stampid'] > 0)
    						{
    							$ustamp = new UserStamp();
    							$userstatmp = $ustamp->getUserStampById($post_data['stampuser'], $post_data['stampid']);
    
    							$post_data['userstamp1'] = $userstatmp[0]['row1'];
    							$post_data['userstamp2'] = $userstatmp[0]['row2'];
    							$post_data['userstamp3'] = $userstatmp[0]['row3'];
    							$post_data['userstamp4'] = $userstatmp[0]['row4'];
    							$post_data['userstamp5'] = $userstatmp[0]['row5'];
    							$post_data['userstamp6'] = $userstatmp[0]['row6'];
    							$post_data['userstamp7'] = $userstatmp[0]['row7'];
    							
    							$userstamp1 = $userstatmp[0]['row1'];
    							$userstamp2 = $userstatmp[0]['row2'];
    							$userstamp3 = $userstatmp[0]['row3'];
    							$userstamp4 = $userstatmp[0]['row4'];
    							$userstamp5 = $userstatmp[0]['row5'];
    							$userstamp6 = $userstatmp[0]['row6'];
    							$userstamp7 = $userstatmp[0]['row7'];
    						}
    						else if($post_data['stampuser'])
    						{
    							$ustamp = new UserStamp();
    							$userstatmp = $ustamp->getLastUserStamp($post_data['stampuser']);
    
    							$post_data['userstamp1'] = $userstatmp[0]['row1'];
    							$post_data['userstamp2'] = $userstatmp[0]['row2'];
    							$post_data['userstamp3'] = $userstatmp[0]['row3'];
    							$post_data['userstamp4'] = $userstatmp[0]['row4'];
    							$post_data['userstamp5'] = $userstatmp[0]['row5'];
    							$post_data['userstamp6'] = $userstatmp[0]['row6'];
    							$post_data['userstamp7'] = $userstatmp[0]['row7'];
    							
    							$userstamp1 = $userstatmp[0]['row1'];
    							$userstamp2 = $userstatmp[0]['row2'];
    							$userstamp3 = $userstatmp[0]['row3'];
    							$userstamp4 = $userstatmp[0]['row4'];
    							$userstamp5 = $userstatmp[0]['row5'];
    							$userstamp6 = $userstatmp[0]['row6'];
    							$userstamp7 = $userstatmp[0]['row7'];
    						}
    						$post_data['med1'] = $post_data['medication_1'];
    						$post_data['med4'] = $post_data['medication_2'];
    						$post_data['med7'] = $post_data['medication_3'];
    						$post_data['line1'] = $post_data['custom_line_1'];
    						$post_data['line2'] = $post_data['custom_line_2'];
    						$post_data['line3'] = $post_data['custom_line_3'];
    						$post_data['insurancecomname'] = $post_data['insurance_name'];
    						$post_data['patientlastname'] = $post_data['last_name'];
    						$post_data['patientfirstname'] = $post_data['first_name'];
    						if($post_data['birthdate'] != '0000-00-00')
    						{
    						    // TODO-2537: change ONLY form PDF ( Ancuta )
    							$post_data['birthdate'] = date('d.m.y', strtotime($post_data['birthdate']));
    						}
    						$post_data['kassenno'] = $post_data['ins_kassenno'];
    						$post_data['insuranceno'] = $post_data['ins_insuranceno'];
    						$post_data['status'] = $post_data['ins_status'];
    						$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
    						$post_data['lanr'] = $post_data['lanr'];
    						if($post_data['datum'] != '0000-00-00')
    						{
    							$post_data['datum'] = date("d.m.Y", strtotime($post_data['datum']));
    						}else{
    							$post_data['datum'] = " ";
    						}
    						//checkboxes saved data
    						$post_data['getiuhrfrei'] = explode(",", $post_data['foc']);
    						$post_data['mttel'] = $post_data['aid'];
    						$post_data['soff'] = $post_data['vaccine'];
    						$post_data['bedaf'] = $post_data['bedarf'];
    						$post_data['pricht'] = $post_data['price'];
    
    						// force print dialog
    						$post_data['pdf_js'] = 'print();';
    						
    						$post_data['auto_print'] = true;

    						$post_data["med2"] = $post_data['line1'];
    						$post_data["med5"] = $post_data['line2'];
//     						$post_data["med8"] = $post_data['line3'];
    						$limit_line3 = trim(rtrim(substr($post_data['line3'], 0, 92)));
    						$line_3_array = str_split($limit_line3,46);
    						$post_data["med8"] = $line_3_array;
    						$post_data['zipcode_city'] = $post_data['zipcode'] . ' ' . $post_data['city'];
    						
    						
    						//TODO-3438 Ancuta 18.09.2020 - hack to replace  wierd symbol - added in ipad
    						foreach($post_data as $col=>$val){
    						    $post_data[$col] = str_replace("—", "-", $val);
    						}
    						// -
    						$old_style = new Pms_Oldpdf();
    						$uploaded_pdf = $old_style ->generate($post_data); // Return for download, do not upload  
    						
    					}
    					else if(strlen($_POST['rpid']) > '0' && $_POST['rpid'] > '0' && $_POST['mode'] == "fax")
    					{
    						$post_data_fax = $receipts_mdl->get_receipt($_REQUEST['rpid']);
    						
    						//prepare save receipt was faxed log
    						$client = $logininfo->clientid;
    						$data['user'] = $logininfo->userid;
    						$data['receipt'] = $_REQUEST['rpid'];
    						$data['date'] = date('Y-m-d H:i:s', time());
    						$data['operation'] = "faxed";
    						
    						//save log
    						$receipt_log = new Application_Form_ReceiptLog();
    						$write_receipt_log = $receipt_log->insert_receipt_log($ipid, $client, $data);
    						
    						$data['status'] = substr($post_data_fax['receipt_status'],'0','1').substr($post_data_fax['receipt_status'],'1','1')."g";
    						$data['receipt'] = $_REQUEST['rpid'];
    						$update_status = $receipts_form->update_receipt_status($data);
    						exit;
    					}
    					else
    					{
    						$post_data = $_POST;
    						$post_data["userstamp1"] = $userstamp1;
    						$post_data["userstamp2"] = $userstamp2;
    						$post_data["userstamp3"] = $userstamp3;
    						$post_data["userstamp4"] = $userstamp4;
    						$post_data["userstamp5"] = $userstamp5;
    						$post_data["userstamp6"] = $userstamp6;
    						$post_data["userstamp7"] = $userstamp7;
    						

    						$post_data["med2"] = $_POST['line1'];
    						$post_data["med5"] = $_POST['line2'];
//     						$post_data["med8"] = $_POST['line3'];

    						$limit_line3 = trim(rtrim(substr($_POST['line3'], 0, 92)));
                            $line_3_array = str_split($limit_line3,46);
    						$post_data["med8"] = $line_3_array;
    						
    						$post_data['zipcode_city'] = $_POST['zipcode'] . ' ' . $_POST['city'];
    						
    						
    						// TODO-2537: change ONLY form PDF ( Ancuta )
    						if($post_data['birthdate'] != '0000-00-00')
    						{
    						    $post_data['birthdate'] = date('d.m.y', strtotime($post_data['birthdate']));
    						}
    						// --
    						
    						//TODO-3438 Ancuta 18.09.2020 - hack to replace  wierd symbol - added in ipad
    						foreach($post_data as $col=>$val){
    						    $post_data[$col] = str_replace("—", "-", $val);
    						}
    						// -
    						$old_style = new Pms_Oldpdf();
    						$uploaded_pdf = $old_style ->generate($post_data); // Return for download, do not upload
    					}
    				}
    					 
					//update receipt status only if rpid is present(receipt is saved in db so we have a receipt to change status)
					if(!empty($_REQUEST['rpid']) && empty($post['savereceipt']) && empty($_POST['print_save_receipt']) && empty($_POST['print_save_receipt_btm_a']) )
					{
						//prepare save receipt was printed log
						$ipid = $ipid;
						$client = $logininfo->clientid;
						$data['user'] = $logininfo->userid;
						$data['receipt'] = $_REQUEST['rpid'];
						$data['date'] = date('Y-m-d H:i:s', time());
						$data['operation'] = "printed";
			
						//save log
						$receipt_log = new Application_Form_ReceiptLog();
						$write_receipt_log = $receipt_log->insert_receipt_log($ipid, $client, $data);
						

						if(substr($post_data['receipt_status'],'1','1') != "g")
						{
							//print default status
							$data['status'] = substr($post_data['receipt_status'],'0','1')."g".substr($post_data['receipt_status'],'2','1');
							$data['receipt'] = $_REQUEST['rpid'];
							$update_status = $receipts_form->update_receipt_status($data);
						}
					}
					
					if($post['savereceipt'])
					{
						$this->redirect(APP_BASE . 'patientformnew/listreceipts?id=' . $_REQUEST['id']);
						exit;
					}
					else
					{
						//ISPC-1892
						if( !empty($_POST['print_save_receipt']) || !empty($_POST['print_save_receipt_btm_a'])) {
							//download pdf
							$old_style->toBrowser("Rezept");
						}
						exit();
					}
    					
    					
    			    
    			} else {
			    #################################################################
			    	
				if($_POST['stampusers'] > 0)
				{
					if($multiplestamps_option === true)
					{

						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);

						$userstamp1 = $userstatmp[0]['row1'];
						$userstamp2 = $userstatmp[0]['row2'];
						$userstamp3 = $userstatmp[0]['row3'];
						$userstamp4 = $userstatmp[0]['row4'];
						$userstamp5 = $userstatmp[0]['row5'];
						$userstamp6 = $userstatmp[0]['row6'];
						$userstamp7 = $userstatmp[0]['row7'];
					}
					else
					{
						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getLastUserStamp($_POST['stampusers']);

						$userstamp1 = $userstatmp[0]['row1'];
						$userstamp2 = $userstatmp[0]['row2'];
						$userstamp3 = $userstatmp[0]['row3'];
						$userstamp4 = $userstatmp[0]['row4'];
						$userstamp5 = $userstatmp[0]['row5'];
						$userstamp6 = $userstatmp[0]['row6'];
						$userstamp7 = $userstatmp[0]['row7'];
					}
				}
 
				//save/update button
				if(!empty($_POST['savereceipt']) || !empty($_POST['print_save_receipt']) || !empty($_POST['print_save_receipt_btm_a']))
// 				if((!empty($_POST['savereceipt']) || !empty($_POST['print_save_receipt'])) )     //ISPC-2711 Lore 01.04.2021 
				    { //ISPC-2711 Ancuta 12.03.2021 btm A
				        
					$post = $_POST;
					$post['ipid'] = $ipid;
					$post['clientid'] = $logininfo->clientid;
					$post['userid'] = $logininfo->userid;

					$receipt_form = new Application_Form_Receipts();

					if(strlen($_REQUEST['rpid']) > '0' && $_REQUEST['rpid'] > '0')
					{
						//do update
						$receipt_form_res = $receipt_form->update_receipt($_REQUEST['rpid'], $post);
					}
					else
					{
						//do insert
						$receipt_form_res = $receipt_form->insert_receipt($post);
					}

					if(!$receipt_form_res)
					{
						$this->retain_values($_POST);
						$receipt_form->assignErrorMessages();
						exit;
					}
					else
					{
						$post_data = $receipts_mdl->get_receipt($receipt_form_res);
					
						$post_data['med1'] = $post_data['medication_1'];
						$post_data['med4'] = $post_data['medication_2'];
						$post_data['med7'] = $post_data['medication_3'];
						$post_data['line1'] = $post_data['custom_line_1'];
						$post_data['line2'] = $post_data['custom_line_2'];
						$post_data['line3'] = $post_data['custom_line_3'];
						$post_data['insurancecomname'] = $post_data['insurance_name'];
						$post_data['patientlastname'] = $post_data['last_name'];
						$post_data['patientfirstname'] = $post_data['first_name'];
						if($post_data['birthdate'] != '0000-00-00')
						{
							$post_data['birthdate'] = date('d.m.Y', strtotime($post_data['birthdate']));
						}
						$post_data['kassenno'] = $post_data['ins_kassenno'];
						$post_data['insuranceno'] = $post_data['ins_insuranceno'];
						$post_data['status'] = $post_data['ins_status'];
						$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
						$post_data['lanr'] = $post_data['lanr'];
						//TODO-2498 Lore 13.08.2019
						if($post_data['datum'] != '0000-00-00')
						{
						    $post_data['datum'] = date("d.m.Y", strtotime($post_data['datum']));
						}else{
						    $post_data['datum'] = " ";
						}
						//checkboxes saved data
						$post_data['getiuhrfrei'] = explode(",", $post_data['foc']);
						$post_data['mttel'] = $post_data['aid'];
						$post_data['soff'] = $post_data['vaccine'];
						$post_data['bedaf'] = $post_data['bedarf'];
						$post_data['pricht'] = $post_data['price'];

						// force print dialog
						$post_data['pdf_js'] = 'print();';
					}
				}
				else
				{
					//pdf from link
					if(strlen($_REQUEST['rpid']) > '0' && $_REQUEST['rpid'] > '0' && $_REQUEST['mode'] == "pdf")
					{
						//get receipt data
						$post_data = $receipts_mdl->get_receipt($_REQUEST['rpid']);

						if($multiplestamps_option === true && $post_data['stampid'] > 0)
						{
							$ustamp = new UserStamp();
							$userstatmp = $ustamp->getUserStampById($post_data['stampuser'], $post_data['stampid']);

							$post_data['userstamp1'] = $userstatmp[0]['row1'];
							$post_data['userstamp2'] = $userstatmp[0]['row2'];
							$post_data['userstamp3'] = $userstatmp[0]['row3'];
							$post_data['userstamp4'] = $userstatmp[0]['row4'];
							$post_data['userstamp5'] = $userstatmp[0]['row5'];
							$post_data['userstamp6'] = $userstatmp[0]['row6'];
							$post_data['userstamp7'] = $userstatmp[0]['row7'];
							
							$userstamp1 = $userstatmp[0]['row1'];
							$userstamp2 = $userstatmp[0]['row2'];
							$userstamp3 = $userstatmp[0]['row3'];
							$userstamp4 = $userstatmp[0]['row4'];
							$userstamp5 = $userstatmp[0]['row5'];
							$userstamp6 = $userstatmp[0]['row6'];
							$userstamp7 = $userstatmp[0]['row7'];
						}
						else if($post_data['stampuser'])
						{
							$ustamp = new UserStamp();
							$userstatmp = $ustamp->getLastUserStamp($post_data['stampuser']);

							$post_data['userstamp1'] = $userstatmp[0]['row1'];
							$post_data['userstamp2'] = $userstatmp[0]['row2'];
							$post_data['userstamp3'] = $userstatmp[0]['row3'];
							$post_data['userstamp4'] = $userstatmp[0]['row4'];
							$post_data['userstamp5'] = $userstatmp[0]['row5'];
							$post_data['userstamp6'] = $userstatmp[0]['row6'];
							$post_data['userstamp7'] = $userstatmp[0]['row7'];
							
							$userstamp1 = $userstatmp[0]['row1'];
							$userstamp2 = $userstatmp[0]['row2'];
							$userstamp3 = $userstatmp[0]['row3'];
							$userstamp4 = $userstatmp[0]['row4'];
							$userstamp5 = $userstatmp[0]['row5'];
							$userstamp6 = $userstatmp[0]['row6'];
							$userstamp7 = $userstatmp[0]['row7'];
						}
						
						$post_data['med1'] = $post_data['medication_1'];
						$post_data['med4'] = $post_data['medication_2'];
						$post_data['med7'] = $post_data['medication_3'];
						$post_data['line1'] = $post_data['custom_line_1'];
						$post_data['line2'] = $post_data['custom_line_2'];
						$post_data['line3'] = $post_data['custom_line_3'];
						$post_data['insurancecomname'] = $post_data['insurance_name'];
						$post_data['patientlastname'] = $post_data['last_name'];
						$post_data['patientfirstname'] = $post_data['first_name'];
						if($post_data['birthdate'] != '0000-00-00')
						{
							$post_data['birthdate'] = date('d.m.Y', strtotime($post_data['birthdate']));
						}
						$post_data['kassenno'] = $post_data['ins_kassenno'];
						$post_data['insuranceno'] = $post_data['ins_insuranceno'];
						$post_data['status'] = $post_data['ins_status'];
						$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
						$post_data['lanr'] = $post_data['lanr'];
						if($post_data['datum'] != '0000-00-00')
						{
							$post_data['datum'] = date("d.m.Y", strtotime($post_data['datum']));
						}else{
							$post_data['datum'] = "";
						}
						//checkboxes saved data
						$post_data['getiuhrfrei'] = explode(",", $post_data['foc']);
						$post_data['mttel'] = $post_data['aid'];
						$post_data['soff'] = $post_data['vaccine'];
						$post_data['bedaf'] = $post_data['bedarf'];
						$post_data['pricht'] = $post_data['price'];

						// force print dialog
						$post_data['pdf_js'] = 'print();';
					}
					else if(strlen($_POST['rpid']) > '0' && $_POST['rpid'] > '0' && $_POST['mode'] == "fax")
					{
						$post_data_fax = $receipts_mdl->get_receipt($_REQUEST['rpid']);
						
						//prepare save receipt was faxed log
						$client = $logininfo->clientid;
						$data['user'] = $logininfo->userid;
						$data['receipt'] = $_REQUEST['rpid'];
						$data['date'] = date('Y-m-d H:i:s', time());
						$data['operation'] = "faxed";
						
						//save log
						$receipt_log = new Application_Form_ReceiptLog();
						$write_receipt_log = $receipt_log->insert_receipt_log($ipid, $client, $data);
						
						$data['status'] = substr($post_data_fax['receipt_status'],'0','1').substr($post_data_fax['receipt_status'],'1','1')."g";
						$data['receipt'] = $_REQUEST['rpid'];
						$update_status = $receipts_form->update_receipt_status($data);
						exit;
					}
					else
					{
						$post_data = $_POST;
						$post_data["userstamp1"] = $userstamp1;
						$post_data["userstamp2"] = $userstamp2;
						$post_data["userstamp3"] = $userstamp3;
						$post_data["userstamp4"] = $userstamp4;
						$post_data["userstamp5"] = $userstamp5;
						$post_data["userstamp6"] = $userstamp6;
						$post_data["userstamp7"] = $userstamp7;
					}
				}
				
				//TODO-3438 Ancuta 18.09.2020 - hack to replace  wierd symbol - added in ipad
				foreach($post_data as $col=>$val){
				    $post_data[$col] = str_replace("—", "-", $val);
				}
				// -
				
					/* ----------------------------------------LAYOUT PDF-------------------------------------- */
					$pdf = new Pms_SIMPLETCPDF('L', PDF_UNIT, 'A6', true, 'UTF-8', false);

					$pdf->SetMargins(0, 0, 0, 0);
					$pdf->SetHeaderMargin(1);
					$pdf->SetFooterMargin(1);

					// set javascript
					if($post_data['pdf_js'])
					{
						$pdf->IncludeJS($post_data['pdf_js']);
					}


					$pdf->AddPage();
					$pdf->SetAutoPageBreak(false, 0);

					$bg_image_path = PDFBG_PATH . '/scaled_x.jpg';
					if(is_file($bg_image_path))
					{
//						$pdf->Image($bg_image_path, 0, 0, 148, 105, '', '', '', false, 300, '', false, false, 0, false, false, true);
					}

					$border = '0';

					//ISPC - 2162
					if($_POST['print_profile'])
					{
						if(!is_array($_POST['print_profile']))
						{
							$print_profile = array($_POST['print_profile']);
						}
					}
						
					if($print_profile)
					{
						$preffered_profile_details = ReceiptPrintSettingsTable::findClientReceiptPrintSettingsbyId($print_profile,$logininfo->clientid);
						$post_data['print_profile'] = $preffered_profile_details[0];
						$marginLeftset = $post_data['print_profile']['profile_settings']['margin_left'];
						$marginTopset = $post_data['print_profile']['profile_settings']['margin_top'];
						$marginLeft = 8 + $marginLeftset;
						$marginTop = $marginTopset;
					}
					else 
					{
						$marginLeft = 8;
						$marginTop = 0;
						$marginLeftset = 0;
						$marginTopset = 0;
					}
					
                    if(!empty($post_data['birthdate'])){
                        $post_data['birthdate'] = date("d.m.y",strtotime($post_data['birthdate']));
                    }
					$marginLeft2 = $marginLeft + 12;
					$marginLeft3 = $marginLeft + 58; 

					$xMark = '<span style="font-size: 14px; font-family: Arial;">X</span>';
					
					// ISPC-2947 Ancuta 16.06.2021
					$Mark7 = '<span style="font-size: 14px; font-family: Arial;">7</span>';
					$Mark8 = '<span style="font-size: 14px; font-family: Arial;">8</span>';
					$Mark9 = '<span style="font-size: 14px; font-family: Arial;">9</span>';
					//-- 

					$html = '<span style="font-size: 10px; font-family: Arial;">' . $post_data['insurancecomname'] . '</span>';
					$pdf->writeHTMLCell(85, 3, $marginLeft, $marginTop+7, $html, $border, '', 0, true, 'L', true);

					$html = '<span style="font-size: 10px; font-family: Arial;">' . $post_data['patientlastname'] . '</span>';
					$pdf->writeHTMLCell(60, 3, $marginLeft, $marginTop+17, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 10px; font-family: Arial;">' . $post_data['patientfirstname'] . '</span>';
					$pdf->writeHTMLCell(60, 3, $marginLeft, $marginTop+21, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['street'] . '</span>';
					$pdf->writeHTMLCell(60, 3, $marginLeft, $marginTop+25, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['zipcode'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft, $marginTop+29, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['city'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft2, $marginTop+29, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['birthdate'] . '</span>';
					$pdf->writeHTMLCell(50, 3, ($marginLeft3 + 3), $marginTop+22, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['kassenno'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft, $marginTop+38, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['insuranceno'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft + 29, $marginTop+38, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['status'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft + 63, $marginTop+38, $html, $border, 1, 0, true, 'L', true);

					$font_size_bsnr = "9px";
					if(strlen(trim(rtrim($post_data['betriebsstatten_nr']))) > '15')
					{
						$font_size_bsnr = "6px";
					}

					$font_size_lanr = "9px";
					if(strlen(trim(rtrim($post_data['lanr']))) > '15')
					{
						$font_size_lanr = "6px";
					}

					$html = '<span style="font-size:' . $font_size_bsnr . '; font-family: Arial;">' . $post_data['betriebsstatten_nr'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft, $marginTop+47, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size:' . $font_size_lanr . '; font-family: Arial;">' . $post_data['lanr'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft + 29, $marginTop+47, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['datum'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft + 58, $marginTop+47, $html, $border, 1, 0, true, 'L', true);

					if(in_array('1', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, $marginLeftset+1, $marginTopset+6.5, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('2', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, $marginLeftset+1, $marginTopset+13.2, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('3', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, $marginLeftset+1, $marginTopset+20, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('4', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, $marginLeftset+1, $marginTopset+28.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('5', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, $marginLeftset+1, $marginTopset+37.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('6', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, $marginLeftset+1, $marginTopset+46.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('8', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, $marginLeftset+1, $marginTopset+59.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('9', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, $marginLeftset+1, $marginTopset+68.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('10', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, $marginLeftset+1, $marginTopset+77.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if($post_data['bvg'] == 6)
					{
// 						$pdf->writeHTMLCell(50, 3, 92, 7, $xMark, $border, 1, 0, true, 'L', true);
						$pdf->writeHTMLCell(50, 3, $marginLeftset+90, $marginTopset+7, $xMark, $border, 1, 0, true, 'L', true);
					}

					if($post_data['mttel'] == 7)
					{
// 						$pdf->writeHTMLCell(50, 3, 97, 7, $xMark, $border, 1, 0, true, 'L', true);
					    $pdf->writeHTMLCell(50, 3, $marginLeftset+95, $marginTopset+7, $Mark7, $border, 1, 0, true, 'L', true); // ISPC-2947 Ancuta 16.06.2021 - changed from X to relevant number 
					}

					if($post_data['soff'] == 8)
					{
// 						$pdf->writeHTMLCell(10, 3, 102, 7, $xMark, $border, 1, 0, true, 'L', true);
					    $pdf->writeHTMLCell(10, 3, $marginLeftset+100, $marginTopset+7, $Mark8, $border, 1, 0, true, 'L', true); // ISPC-2947 Ancuta 16.06.2021 - changed from X to relevant number 
					}

					if($post_data['bedaf'] == 9)
					{
// 						$pdf->writeHTMLCell(50, 3, 107, 7, $xMark, $border, 1, 0, true, 'L', true);
					    $pdf->writeHTMLCell(50, 3, $marginLeftset+105, $marginTopset+7, $Mark9, $border, 1, 0, true, 'L', true); // ISPC-2947 Ancuta 16.06.2021 - changed from X to relevant number 
					}

					if($post_data['pricht'] == 10)
					{
// 						$pdf->writeHTMLCell(50, 3, 114, 7, $xMark, $border, 1, 0, true, 'L', true);
						$pdf->writeHTMLCell(50, 3, $marginLeftset+112, $marginTopset+7, $xMark, $border, 1, 0, true, 'L', true);
					}

					$html = '<p style="font-size: 9px; font-family: Arial;">' . trim(rtrim(mb_substr($post_data['med1'], 0, 46, "UTF-8"))) . '<br /> ' . $post_data['line1'] . '</p>';
					$pdf->writeHTMLCell(79, 3, $marginLeft, $marginTop+59.5, $html, $border, 1, 0, true, 'L', true);
//					$html = '<p style="font-size: 9px; font-family: Arial;">' . $post_data['line1'] . '</p>';
//					$pdf->writeHTMLCell(79, 3, $marginLeft, 63, $html, $border, 1, 0, true, 'L', true);

					$html = '<p style="font-size: 9px; font-family: Arial;">' . trim(rtrim(mb_substr($post_data['med4'], 0, 46, "UTF-8"))) . ' <br />' . $post_data['line2'] . '</p>';
					$pdf->writeHTMLCell(79, 3, $marginLeft, $marginTop+68.5, $html, $border, 1, 0, true, 'L', true);
//					$html = '<p style="font-size: 9px; font-family: Arial;">' . $post_data['line2'] . '</p>';
//					$pdf->writeHTMLCell(79, 3, $marginLeft, 71, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . trim(rtrim(mb_substr($post_data['med7'], 0, 46, "UTF-8"))) . '<br /> ' . trim(rtrim(mb_substr($post_data['line3'], 0, 92, "UTF-8"))) . '</p>';
					$pdf->writeHTMLCell(79, 3, $marginLeft, $marginTop+77.5, $html, $border, 1, 0, true, 'L', true);
//					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['line3'] . '</p>';
//					$pdf->writeHTMLCell(79, 3, $marginLeft, 80, $html, $border, 1, 0, true, 'L', true);
					
					//ISPC-2711 Ancuta 12.03.2021
					if(!empty($_POST['print_save_receipt_btm_a']) || $post_data['btm_a_symbol'] == '1'  ){
// 					if( $_POST['receipt_type'] == 'kv_btm'){         //ISPC-2711 Lore 31.03.2021
					    // For btm ONLY - if special button is 
                        $html = '<span style="font-size: 20px; font-family: Arial;">A</span>';
                        $pdf->writeHTMLCell(79, 3, 80, $marginTop+68.5, $html, $border, 1, 0, true, 'L', true);
					}
					//--

					$html = '<span style="font-size: 9px; font-family: Arial;"><b>' . $userstamp1 . "</b><br />" . $userstamp2 . "<br /></span><span style=\"font-size:7px;\">" . $userstamp3 . "<br /></span><span style=\"font-size:9px;\"><b>" . $userstamp4 . "</b><br /></span><span style=\"font-size:7px;\">" . $userstamp5 . "<br /></span><span style=\"font-size:7px;\">" . $userstamp6 . "<br /></span><span style=\"font-size:7px;\">" . $userstamp7 . '</span></span>';
					$pdf->writeHTMLCell(60, 23, $marginLeft + 78, $marginTop+57, $html, $border, 1, 0, true, 'C', true);

					if(!empty($_POST['savereceipt']) || !empty($_POST['print_save_receipt']))
					{
						$filename = "";

						$post_data['medication1line1'] = $_POST['medication1line1'] ;
						$post_data['medication4line2'] = $_POST['medication4line2'] ;
						$post_data['medication7line3'] = $_POST['medication7line3'] ;
						
						
						foreach($post_data as $field => $value)
						{
							if(($field == "med1" && strlen($value) > 0 ) || ($field == "med4" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med5" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med8" && strlen($value) > 0 ) || ($field == "med9" && strlen($value) > 0 ))
							{
							    if( $post_data['medication1line1'] == "1" && ($field == "med1"  && strlen($value) > 0) ){
							        $value = $post_data['med1'].$post_data['line1'];
							    }
							    
							    if( $post_data['medication4line2'] == "1" && ($field == "med4"  && strlen($value) > 0) ){
							        $value = $post_data['med4'].$post_data['line2'];
							    }
							    
							    if( $post_data['medication7line3'] == "1" && ($field == "med7"  && strlen($value) > 0) ){
							        $value = $post_data['med7'].$post_data['line3'];
							    }
							    
								$medication_array[] = $value;
							}
						}
 
						if(!empty($medication_array))
						{
							$medication = implode(", ", $medication_array);
							$medication_str = " (" . $medication . ")";
						}
						else
						{
							$medication_str = "";
						}

						//upload file to pdf
						$file_data['pdfname'] = 'mmi_rezept';
						$file_data['password'] = $logininfo->filepass;
						$uploaded_pdf = $pdf->upload_pdf($file_data);

						//add to Patient Files(Datein & Dokumente)
						if($uploaded_pdf && strlen($uploaded_pdf['pdf_filename']) > '0')
						{
							$cust = new PatientFileUpload();
							$cust->title = Pms_CommonData::aesEncrypt('Rezept MMI ' . $medication_str . '');
							$cust->ipid = $ipid;
							$cust->file_name = Pms_CommonData::aesEncrypt($uploaded_pdf['pdf_filename']);
							$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
							//$cust->recordid = $receipt_form_res;
							//$cust->tabname = "receiptupload";
							$cust->save();
							$recordid = $cust->id;

							//insert system file tags - ISPC-1247 (each mmi receipt type has its own tag)
							if(!empty($_POST['receipt_type']) && strlen($_POST['receipt_type']) > '0')
							{
								$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, false, $_POST['receipt_type']);
							}
							
							//    TODO-2791  ISPC : print history of recipe Ancuta 08.01.2020
							if( !empty($recordid) && ! empty($_POST['print_save_receipt']) && !empty($post_data['id'])){
							    
							    //prepare save receipt was printed log
							    $ipid = $ipid;
							    $client = $logininfo->clientid;
							    $data['user'] = $logininfo->userid;
							    $data['receipt'] = $post_data['id'];
							    $data['date'] = date('Y-m-d H:i:s', time());
							    $data['operation'] = "printed";
							    
							    //save log
							    $receipt_log = new Application_Form_ReceiptLog();
							    $write_receipt_log = $receipt_log->insert_receipt_log($ipid, $client, $data);
							    
							    
							    if(substr($post_data['receipt_status'],'1','1') != "g")
							    {
							        //print default status
							        $data['status'] = substr($post_data['receipt_status'],'0','1')."g".substr($post_data['receipt_status'],'2','1');
							        $data['receipt'] = $post_data['id'];
							        $update_status = $receipts_form->update_receipt_status($data);
							    }
							}
							//-- 
							
						}

						if($recordid && $receipt_form_res)
						{
							//insert comment in verlauf
							$ctitle = "Rezept erstellt " . $medication_str;

							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->user_id = $logininfo->userid;
							$cust->recordid = $recordid;
							$cust->done_id = $receipt_form_res;
							$cust->tabname = Pms_CommonData::aesEncrypt("receiptupload");
							$cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
							$cust->save();
						}
					}
					
					
					//update receipt status only if rpid is present(receipt is saved in db so we have a receipt to change status)
					if(!empty($_REQUEST['rpid']) && empty($post['savereceipt'])  && empty($_POST['print_save_receipt']))
					{
						//prepare save receipt was printed log
						$ipid = $ipid;
						$client = $logininfo->clientid;
						$data['user'] = $logininfo->userid;
						$data['receipt'] = $_REQUEST['rpid'];
						$data['date'] = date('Y-m-d H:i:s', time());
						$data['operation'] = "printed";
			
						//save log
						$receipt_log = new Application_Form_ReceiptLog();
						$write_receipt_log = $receipt_log->insert_receipt_log($ipid, $client, $data);
						

						if(substr($post_data['receipt_status'],'1','1') != "g")
						{
							//print default status
							$data['status'] = substr($post_data['receipt_status'],'0','1')."g".substr($post_data['receipt_status'],'2','1');
							$data['receipt'] = $_REQUEST['rpid'];
							$update_status = $receipts_form->update_receipt_status($data);
						}
					}
					
					if($post['savereceipt'])
					{
						$this->redirect(APP_BASE . 'patientformnew/listreceipts?id=' . $_REQUEST['id']);
						exit;
					}
					else
					{
						//show pdf
						$pdf->toBrowser('Rezept', 'D');
						exit();
					}
					
			}
								
			}
			
			if( ! $this->getRequest()->isPost()) 
			{
// 			if(!$_POST)
// 			{
$phelathinsurance = new PatientHealthInsurance();
$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

$this->view->kassenno = $healthinsu_array[0]['kvk_no']; //ISPC-2306 for GKV and Hilfsmittel receipt
$this->view->ik = $healthinsu_array[0]['institutskennzeichen']; //ISPC-2306 for GKV and Hilfsmittel receipt
//var_dump($healthinsu_array); exit;
				if(strlen($_REQUEST['rpid']) > 0 && (int)$_REQUEST['rpid'] > 0 )
				{
					//load receipt data
					$receipts_mdl = new Receipts();
					$post_data = $receipts_mdl->get_receipt($_REQUEST['rpid']);

					//pseudofix to not acces another receipt id
					if ($post_data['ipid'] != $ipid) {
						$this->redirect(APP_BASE . 'error/previlege', array("exit" => true));						
					}
					//ISPC-1941
					//get receipt_item was done in a JOIN on Receipts::get_receipt()... and then like below
					$receiptitems_mdl = new ReceiptItems();
					$receiptitems = $receiptitems_mdl->get_items_by_receipt_id($_REQUEST['rpid']);
					
					$post_data['ReceiptItems'] = $receiptitems;

					
					$post_data['insurance_com_name'] = $post_data['insurance_name'];
					$post_data['patientlastname'] = $post_data['last_name'];
					$post_data['patientfirstname'] = $post_data['first_name'];
					
					if($post_data['birthdate'] != '0000-00-00')
					{
						$post_data['bdate'] = date('d.m.Y', strtotime($post_data['birthdate']));
					}
					
					if($post_data['datum'] != '0000-00-00')
					{
						$post_data['datum'] = date('d.m.Y', strtotime($post_data['datum']));
					} else{
						$post_data['datum'] = "";
					}

					if($post_data['date'] != "0000-00-00 00:00:00")
					{
						$post_data['date'] = date('d.m.Y', strtotime($post_data['date']));
					}
					else
					{
						$post_data['date'] = date('d.m.Y', time());
					}

					$post_data['zip'] = $post_data['zipcode'];
					$post_data['kassen_no'] = $post_data['ins_kassenno'];
					$post_data['insurance_no'] = $post_data['ins_insuranceno'];
					$post_data['insurance_status'] = $post_data['ins_status'];
					$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
					$post_data['lanr'] = $post_data['lanr'];
					$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
					$post_data['getiuval'] = explode(',', $post_data['foc']);
					$post_data['main_diagnosis'] = $main_diagnosis;
					if($post_data['stampid'] != 0)
					{
						$this->view->stampusers = $post_data['stampuser'].'-'.$post_data['stampid'];
					}else {
						$this->view->stampusers = $post_data['stampuser'];
					}
					if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
					{
						//$form_data['getiuval'][] = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
						$this->view->rezeptgebuhrenbefreiung = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
					}
					else
					{
						$this->view->rezeptgebuhrenbefreiung = 0;
					}
					$this->view->emptyform = false;
					$this->view->fdata = $post_data;
					
					//========================
					// add $users_mstamps in mod edit
					$users = new User();
					$userarray = $users->getUserByClientid($logininfo->clientid);
					$userarraylast[] = $this->view->translate('selectuser');
					
					$userarraylast_ids = array();
					
					foreach($userarray as $user)
					{
						$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
						$userarraylast_ids[] = $user['id'];
					}
					$this->view->users = $userarraylast;
					
					
					$ustamp = new UserStamp();
					
					$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
					foreach($multipleuser_stamp as $ks => $uspamp)
					{
						$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
						$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
						$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
					}
					$this->view->users_mstamps = $users_mstamps;
					//========================
					
					
					$assigned_users_mdl = new PrintUsersAssigned();
					$assigned_users = $assigned_users_mdl->get_receipt_assigned_users($logininfo->clientid, array($post_data['id']));
					$assigned_users = $assigned_users;

					$assigned_fax_users_mdl = new FaxUsersAssigned();
					$assigned_fax_users = $assigned_fax_users_mdl->get_receipt_assigned_users($logininfo->clientid, array($post_data['id']));
					$assigned_fax_users = $assigned_fax_users;

					$receipt_creators = $post_data['create_user'];
		
					$disable_status_icon = "";
					if($receipt_creators != $logininfo->userid && !in_array($logininfo->userid, $assigned_fax_users[$post_data['id']]) && !in_array($logininfo->userid, $assigned_users[$post_data['id']]))
					{
						$disable_status_icon = "disabled_status_icon";
					}
					$this->view->disable_status_icon = $disable_status_icon;
				}
				else
				{
//					empty form data
					/* ----------------------------------------PATIENT-------------------------------------- */
					$parr = $patientmaster->getMasterData($decid, 0);
					$form_data['patientfirstname'] = $parr['first_name'];
					$form_data['patientlastname'] = $parr['last_name'];
					$form_data['street'] = $parr['street1'];
					$form_data['zip'] = $parr['zip'];
					$form_data['city'] = $parr['city'];
					
					
					//!!!!!!!
					// THIS IN HTML- should remain as 4 digits 
					//!!!!!!!
					//ISPC-2329 pct.i) Lore 26.08.2019
					if($parr['birthd'] != '0000-00-00')
					{
						$parr['birthd'] = date('d.m.Y', strtotime($parr['birthd']));
					}
					
					$form_data['bdate'] = $parr['birthd'];
					$form_data['datum'] = date('d.m.Y', time());
					/* ----------------------------------------INSURANCE-------------------------------------- */
					
					//if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
					if( strlen ($healthinsu_array[0]['companyid']) > 0 )//TODO-3580 Ancuta 09.11.2020
					{
						$form_data['getiuval'][] = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
						$this->view->rezeptgebuhrenbefreiung = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
					}
					else 
					{
						$this->view->rezeptgebuhrenbefreiung = 0;
					}
					$this->view->emptyform = true;
					
					$form_data['insurance_com_name'] = $healthinsu_array[0]['company_name'];
					$form_data['insurance_no'] = $healthinsu_array[0]['insurance_no'];
					//$form_data['kassen_no'] = $healthinsu_array[0]['kvk_no'];
					$form_data['kassen_no'] = $healthinsu_array[0]['institutskennzeichen']; //ISPC-2306 for GKV and Hilfsmittel receipt
					
					//removed according to ISPC-1415
//					if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == 1)
//					{
//						$form_data['bvg'] = 6;
//					}

					$form_data['main_diagnosis'] = $main_diagnosis;
					
					$status_int_array = array("M" => "1", "F" => "3", "R" => "5");

					if($healthinsu_array[0]['insurance_status'] != "")
					{
						if(array_key_exists($healthinsu_array[0]['insurance_status'], $status_int_array))
						{
							$this->view->insurance_status = $status_int_array[$healthinsu_array[0]['insurance_status']];
						}
						else
						{
							$this->view->insurance_status = "";
						}
					}
					$form_data['insurance_status'] = $this->view->insurance_status;
                     
					/*=========================BEGIN USER------------------------------- */
					
				$users = new User();
				$userarray = $users->getUserByClientid($logininfo->clientid);
					
				if($multiplestamps_option)
			        {
			        	
			        	
			        	if(empty($uarray['default_stampusers']))
			        	{
			        		
			        		
			        		
			        		$stemp = new UserStamp();
			        		$stemp_detail = $stemp->getAllActiveUserStamp($logininfo->userid);
			        		//print_r($stemp_detail); exit;
			        		if(count($stemp_detail) == 1)
			        		{
			        			//print(count($stemp_detail[0])); exit;
			        			
			        			$this->view->stampusers = $stemp_detail[0]['userid'].'-'. $stemp_detail[0]['id'];
			        			
			        			$form_data['betriebsstatten_nr'] = $stemp_detail[0]['stamp_bsnr'];
			        			$form_data['lanr'] = $stemp_detail[0]['stamp_lanr'];
			        		}
			        		
			        	}else{
			        		

			        		$this->view->stampusers = $uarray['default_stampusers'].'-'. $uarray['default_stampid'];
			        		$id=$uarray['default_stampid'];
			        		
			        		$userstamp = Doctrine::getTable('UserStamp')->find( $id);
			        		if($userstamp)
			        		{
			        			$uarray2 =  $userstamp ->toArray();
			        		}
			        		
			        		$form_data['betriebsstatten_nr'] = $uarray2['stamp_bsnr'];
			        		$form_data['lanr'] = $uarray2['stamp_lanr'];
			        	}
			        	
			        	
			        
				      
				      
				      
			        }
			         else 
			            {
				            
				            
				            if(empty($uarray['default_stampusers']))
				            {
				            	$stemp = new UserStamp();
				            	$stemp_detail = $stemp->getLastUserStamp($logininfo->userid);
				            	
				            	if(count($stemp_detail) == 1)
				            	{
				            		$this->view->stampusers = $logininfo->userid;
				            		
				            		$user1 = Doctrine::getTable('User')->find($logininfo->userid);
				            		if($user1)
				            		{
				            			$uarray1 = $user1->toArray();
				            		}
				            		$form_data['betriebsstatten_nr'] = $uarray1['betriebsstattennummer'];
				            		$form_data['lanr'] = $uarray1['LANR'];
				            	}
				            	
				            	
				            	
				            }else{
				            	$this->view->stampusers = $uarray['default_stampusers'];
				            	
				            	$user1 = Doctrine::getTable('User')->find($this->view->stampusers);
				            	if($user1)
				            	{
				            		$uarray1 = $user1->toArray();
				            	}
				            	$form_data['betriebsstatten_nr'] = $uarray1['betriebsstattennummer'];
				            	$form_data['lanr'] = $uarray1['LANR'];
				            }
				            
				           
			             }
						
						$form_data['date'] = date('d.m.Y', time());
						
					
					//print_r( 	$uarray2); exit;
					$this->view->fdata = $form_data;
				}
				
				/* ----------------------------------------BEGIN STAMPS-------------------------------------- */
				
				$userarraylast[] = $this->view->translate('selectuser');

				$userarraylast_ids = array();

				foreach($userarray as $user)
				{
					$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
					$userarraylast_ids[] = $user['id'];
				}
				$this->view->users = $userarraylast;


				$ustamp = new UserStamp();

				$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
				foreach($multipleuser_stamp as $ks => $uspamp)
				{
					$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
					$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
					$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
				}
				$this->view->users_mstamps = $users_mstamps;


				if($isadmin == 1)
				{
					$showselect = 1;
				}
				else
				{
					$showselect = 1; // show select to all
				}
				$this->view->showselect = $showselect;
				$userstatmp = $ustamp->getLastUserStamp($logininfo->userid);
				
				$this->view->userstamp1 = $userstatmp[0]['row1'];
				$this->view->userstamp2 = $userstatmp[0]['row2'];
				$this->view->userstamp3 = $userstatmp[0]['row3'];
				$this->view->userstamp4 = $userstatmp[0]['row4'];
				$this->view->userstamp5 = $userstatmp[0]['row5'];
				$this->view->userstamp6 = $userstatmp[0]['row6'];
				$this->view->userstamp7 = $userstatmp[0]['row7'];



				$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
				$this->view->clientid = $logininfo->clientid;

				$tm = new TabMenus();
				$this->view->tabmenus = $tm->getMenuTabs();
			}
			
			
		}
		
		public function receiptmmiAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->view->usertype = $logininfo->usertype;
			$receipts_form = new Application_Form_Receipts();
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$this->view->encid = Pms_Uuid::encrypt($decid);
			$ipid = Pms_CommonData::getIpid($decid);
			$receipts_mdl = new Receipts();

			/* ------------------------------------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$this->view->clientid = $logininfo->clientid;


			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();

			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}

			$this->view->multiplestamps_option = $multiplestamps_option;
			/* --------------------Check for MMI module -- used only for livesearch in MMI Receipt-- --------- */
			$modules = new Modules();
			if($modules->checkModulePrivileges("87", $logininfo->clientid))
			{
				$this->view->show_mmi = "1";
			}
			else
			{
				$this->view->show_mmi = "0";
			}
			/* ------------------------------------------------------------------------------ */

			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
			}

			$isadmin = 0;
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}

			if(strlen(Zend_Registry::get('mmilicserial')) > '0' && $this->view->show_mmi == "1")
			{
				$this->view->show_pi = 1;
			}
			/* ------------------------------------------------------------------------------ */

            $client_data = Pms_CommonData::getClientData($logininfo->clientid);

            if($client_data){
                $client_print_style =$client_data[0]['receipt_print_style']; 
            }

			
			//get colours css classes
			$this->view->receipt_status_colours_arr = Pms_CommonData::receipt_status_colours();
			$this->view->receipt_status_colours = json_encode(Pms_CommonData::receipt_status_colours());
			


			/* -------------- Diagnosis  - Get Main Diagnosis --------------------------------- */
			$abb = "'HD'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($logininfo->clientid, $abb);
			if(!$ddarr[0]['id'])
			{
			    $ddarr[0]['id'] = 0;
			}
			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
			    $stam_diagno = array();
			    $diagns = new PatientDiagnosis();
			    $stam_diagno = $diagns->get_latest_diagnosis($ipid, $val1['id']);
			    $dia = 1;
			    foreach($stam_diagno as $key => $val)
			    {
			        if(strlen($val['diagnosis']) > 0)
			        {
			            if(strlen($val['icdnumber']) > 0)
			            {
			                $other_diagnosis .= $comma . $val['diagnosis'];
			            }
			            else
			            {
			                $other_diagnosis .= $comma . $val['diagnosis'];
			            }
			            $dia++;
			            $comma = ", ";
			        }
			    }
			}
			
			$main_diagnosis = 'Diagnose: '.$other_diagnosis;
				
			
			
			/* ----------------------------------POST------------------- */
			if($_POST)
			{
                if($client_print_style == "kv_receipt"){
    			    
    				if($_POST['stampusers'] > 0)
    				{
    					if($multiplestamps_option === true)
    					{
    
    						$stamp_info = explode('-', $_POST['stampusers']);
    						$stamp_user = $stamp_info[0];
    						$stamp_id = $stamp_info[1];
    
    						$ustamp = new UserStamp();
    						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
    
    						$userstamp1 = $userstatmp[0]['row1'];
    						$userstamp2 = $userstatmp[0]['row2'];
    						$userstamp3 = $userstatmp[0]['row3'];
    						$userstamp4 = $userstatmp[0]['row4'];
    						$userstamp5 = $userstatmp[0]['row5'];
    						$userstamp6 = $userstatmp[0]['row6'];
    						$userstamp7 = $userstatmp[0]['row7'];
    					}
    					else
    					{
    						$ustamp = new UserStamp();
    						$userstatmp = $ustamp->getLastUserStamp($_POST['stampusers']);
    
    						$userstamp1 = $userstatmp[0]['row1'];
    						$userstamp2 = $userstatmp[0]['row2'];
    						$userstamp3 = $userstatmp[0]['row3'];
    						$userstamp4 = $userstatmp[0]['row4'];
    						$userstamp5 = $userstatmp[0]['row5'];
    						$userstamp6 = $userstatmp[0]['row6'];
    						$userstamp7 = $userstatmp[0]['row7'];
    					}
    				}
    				
    				
    				
    				//save/update button
    				if(!empty($_POST['savereceipt']))
    				{
    					$post = $_POST;
    					$post['ipid'] = $ipid;
    					$post['clientid'] = $logininfo->clientid;
    					$post['userid'] = $logininfo->userid;
    
    					$receipt_form = new Application_Form_Receipts();
    
    					if(strlen($_REQUEST['rpid']) > '0' && $_REQUEST['rpid'] > '0')
    					{
    						//do update
    						$receipt_form_res = $receipt_form->update_receipt($_REQUEST['rpid'], $post);
    					}
    					else
    					{
    						//do insert
    						$receipt_form_res = $receipt_form->insert_receipt($post);
    					}
    
    					if(!$receipt_form_res)
    					{
    						$this->retain_values($_POST);
    						$receipt_form->assignErrorMessages();
    						exit;
    					}
    					else
    					{
    						$post_data = $receipts_mdl->get_receipt($receipt_form_res);
    						
    						$post_data['med1'] = $post_data['medication_1'];
    						$post_data['med4'] = $post_data['medication_2'];
    						$post_data['med7'] = $post_data['medication_3'];
    						$post_data['line1'] = $post_data['custom_line_1'];
    						$post_data['line2'] = $post_data['custom_line_2'];
    						$post_data['line3'] = $post_data['custom_line_3'];
    						$post_data['insurancecomname'] = $post_data['insurance_name'];
    						$post_data['patientlastname'] = $post_data['last_name'];
    						$post_data['patientfirstname'] = $post_data['first_name'];
    						if($post_data['birthdate'] != '0000-00-00')
    						{
    						    $post_data['birthdate'] = date('d.m.Y', strtotime($post_data['birthdate']));
    						}
    						$post_data['kassenno'] = $post_data['ins_kassenno'];
    						$post_data['insuranceno'] = $post_data['ins_insuranceno'];
    						$post_data['status'] = $post_data['ins_status'];
    						$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
    						$post_data['lanr'] = $post_data['lanr'];
    						if($post_data['datum'] != '0000-00-00')
    						{
    							$post_data['datum'] = date("d.m.Y", strtotime($post_data['datum']));
    						}
    						//checkboxes saved data
    						$post_data['getiuhrfrei'] = explode(",", $post_data['foc']);
    						$post_data['mttel'] = $post_data['aid'];
    						$post_data['soff'] = $post_data['vaccine'];
    						$post_data['bedaf'] = $post_data['bedarf'];
    						$post_data['pricht'] = $post_data['price'];
    
    						

    						$post_data["med2"] = $_POST['line1'];
    						$post_data["med5"] = $_POST['line2'];
//     						$post_data["med8"] = $_POST['line3'];

    						$limit_line3 = trim(rtrim(substr($_POST['line3'], 0, 92)));
    						$line_3_array = str_split($limit_line3,46);
    						$post_data["med8"] = $line_3_array;
    						
    						$post_data['zipcode_city'] = $_POST['zipcode'] . ' ' . $_POST['city'];
    						
    						$post_data["userstamp1"] = $userstamp1;
    						$post_data["userstamp2"] = $userstamp2;
    						$post_data["userstamp3"] = $userstamp3;
    						$post_data["userstamp4"] = $userstamp4;
    						$post_data["userstamp5"] = $userstamp5;
    						$post_data["userstamp6"] = $userstamp6;
    						$post_data["userstamp7"] = $userstamp7;
    						
    						$post_data['pdfname'] = 'mmi_rezept';
    						$post_data['password'] = $logininfo->filepass;
    						
    						// force print dialog
//     						$post_data['pdf_js'] = 'print();';
    						$post_data['auto_print'] = true;
    					}
    					
    					$old_style = new Pms_Oldpdf();
    					$uploaded_pdf = $old_style ->generate($post_data,false,true); // do not return for download , Upload  
    					
    					$filename = "";
    					
    					$post_data['medication1line1'] = $_POST['medication1line1'] ;
    					$post_data['medication4line2'] = $_POST['medication4line2'] ;
    					$post_data['medication7line3'] = $_POST['medication7line3'] ;
    					
    					
    					foreach($post_data as $field => $value)
    					{
    					    if(($field == "med1" && strlen($value) > 0 ) || ($field == "med4" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med5" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med8" && strlen($value) > 0 ) || ($field == "med9" && strlen($value) > 0 ))
    					    {
    					        if( $post_data['medication1line1'] == "1" && ($field == "med1"  && strlen($value) > 0) ){
    					            $value = $post_data['med1'].$post_data['line1'];
    					        }
    					        	
    					        if( $post_data['medication4line2'] == "1" && ($field == "med4"  && strlen($value) > 0) ){
    					            $value = $post_data['med4'].$post_data['line2`'];
    					        }
    					        	
    					        if( $post_data['medication7line3'] == "1" && ($field == "med7"  && strlen($value) > 0) ){
    					            $value = $post_data['med7'].$post_data['line3`'];
    					        }
    					        
    					        $medication_array[] = $value;
    					    }
    					}
    					
    					if(!empty($medication_array))
    					{
    					    $medication = implode(", ", $medication_array);
    					    $medication_str = " (" . $medication . ")";
    					}
    					else
    					{
    					    $medication_str = "";
    					}
    					
    
    					
    					//add to Patient Files(Datein & Dokumente)
    					if($uploaded_pdf && strlen($uploaded_pdf['pdf_filename']) > '0')
    					{
    					    $cust = new PatientFileUpload();
    					    $cust->title = Pms_CommonData::aesEncrypt('Rezept MMI ' . $medication_str . '');
    					    $cust->ipid = $ipid;
    					    $cust->file_name = Pms_CommonData::aesEncrypt($uploaded_pdf['pdf_filename']);
    					    $cust->file_type = Pms_CommonData::aesEncrypt('PDF');
    					    $cust->save();
    					    $recordid = $cust->id;
    					
    					    //insert system file tags - ISPC-1247 (each mmi receipt type has its own tag)
    					    if(!empty($_POST['receipt_type']) && strlen($_POST['receipt_type']) > '0')
    					    {
    					        $insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, false, $_POST['receipt_type']);
    					    }
    					}
    					
    					if($recordid)
    					{
    					    //insert comment in verlauf
    					    $ctitle = "Rezept erstellt " . $medication_str;
    					
    					    $cust = new PatientCourse();
    					    $cust->ipid = $ipid;
    					    $cust->course_date = date("Y-m-d H:i:s", time());
    					    $cust->course_type = Pms_CommonData::aesEncrypt("K");
    					    $cust->user_id = $logininfo->userid;
    					    $cust->recordid = $recordid;
    					    $cust->tabname = Pms_CommonData::aesEncrypt("receiptupload");
    					    $cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
    					    $cust->save();
    					}
    				}
    				else
    				{
    					//pdf from link
    					if(strlen($_REQUEST['rpid']) > '0' && $_REQUEST['rpid'] > '0' && $_REQUEST['mode'] == "pdf")
    					{
    						//get receipt data
    						$post_data = $receipts_mdl->get_receipt($_REQUEST['rpid']);
    
    						if($multiplestamps_option === true && $post_data['stampid'] > 0)
    						{
    							$ustamp = new UserStamp();
    							$userstatmp = $ustamp->getUserStampById($post_data['stampuser'], $post_data['stampid']);
    
    							$post_data['userstamp1'] = $userstatmp[0]['row1'];
    							$post_data['userstamp2'] = $userstatmp[0]['row2'];
    							$post_data['userstamp3'] = $userstatmp[0]['row3'];
    							$post_data['userstamp4'] = $userstatmp[0]['row4'];
    							$post_data['userstamp5'] = $userstatmp[0]['row5'];
    							$post_data['userstamp6'] = $userstatmp[0]['row6'];
    							$post_data['userstamp7'] = $userstatmp[0]['row7'];
    							
    							$userstamp1 = $userstatmp[0]['row1'];
    							$userstamp2 = $userstatmp[0]['row2'];
    							$userstamp3 = $userstatmp[0]['row3'];
    							$userstamp4 = $userstatmp[0]['row4'];
    							$userstamp5 = $userstatmp[0]['row5'];
    							$userstamp6 = $userstatmp[0]['row6'];
    							$userstamp7 = $userstatmp[0]['row7'];
    						}
    						else if($post_data['stampuser'])
    						{
    							$ustamp = new UserStamp();
    							$userstatmp = $ustamp->getLastUserStamp($post_data['stampuser']);
    
    							$post_data['userstamp1'] = $userstatmp[0]['row1'];
    							$post_data['userstamp2'] = $userstatmp[0]['row2'];
    							$post_data['userstamp3'] = $userstatmp[0]['row3'];
    							$post_data['userstamp4'] = $userstatmp[0]['row4'];
    							$post_data['userstamp5'] = $userstatmp[0]['row5'];
    							$post_data['userstamp6'] = $userstatmp[0]['row6'];
    							$post_data['userstamp7'] = $userstatmp[0]['row7'];
    							
    							$userstamp1 = $userstatmp[0]['row1'];
    							$userstamp2 = $userstatmp[0]['row2'];
    							$userstamp3 = $userstatmp[0]['row3'];
    							$userstamp4 = $userstatmp[0]['row4'];
    							$userstamp5 = $userstatmp[0]['row5'];
    							$userstamp6 = $userstatmp[0]['row6'];
    							$userstamp7 = $userstatmp[0]['row7'];
    						}
    						
    						$post_data['med1'] = $post_data['medication_1'];
    						$post_data['med4'] = $post_data['medication_2'];
    						$post_data['med7'] = $post_data['medication_3'];
    						$post_data['line1'] = $post_data['custom_line_1'];
    						$post_data['line2'] = $post_data['custom_line_2'];
    						$post_data['line3'] = $post_data['custom_line_3'];
    						$post_data['insurancecomname'] = $post_data['insurance_name'];
    						$post_data['patientlastname'] = $post_data['last_name'];
    						$post_data['patientfirstname'] = $post_data['first_name'];
    						if($post_data['birthdate'] != '0000-00-00')
    						{
    							$post_data['birthdate'] = date('d.m.Y', strtotime($post_data['birthdate']));
    						}
    						$post_data['kassenno'] = $post_data['ins_kassenno'];
    						$post_data['insuranceno'] = $post_data['ins_insuranceno'];
    						$post_data['status'] = $post_data['ins_status'];
    						$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
    						$post_data['lanr'] = $post_data['lanr'];
    						if($post_data['datum'] != '0000-00-00')
    						{
    							$post_data['datum'] = date("d.m.Y", strtotime($post_data['datum']));
    						}
    						//checkboxes saved data
    						$post_data['getiuhrfrei'] = explode(",", $post_data['foc']);
    						$post_data['mttel'] = $post_data['aid'];
    						$post_data['soff'] = $post_data['vaccine'];
    						$post_data['bedaf'] = $post_data['bedarf'];
    						$post_data['pricht'] = $post_data['price'];
    
    						// force print dialog
    						$post_data['pdf_js'] = 'print();';
    						
    						$post_data['auto_print'] = true;

    						$post_data["med2"] = $post_data['line1'];
    						$post_data["med5"] = $post_data['line2'];
//     						$post_data["med8"] = $post_data['line3'];
    						$limit_line3 = trim(rtrim(substr($post_data['line3'], 0, 92)));
    						$line_3_array = str_split($limit_line3,46);
    						$post_data["med8"] = $line_3_array;
    						$post_data['zipcode_city'] = $post_data['zipcode'] . ' ' . $post_data['city'];
    						
    						$old_style = new Pms_Oldpdf();
    						$uploaded_pdf = $old_style ->generate($post_data); // Return for download, do not upload  
    						
    					}
    					else if(strlen($_POST['rpid']) > '0' && $_POST['rpid'] > '0' && $_POST['mode'] == "fax")
    					{
    						$post_data_fax = $receipts_mdl->get_receipt($_REQUEST['rpid']);
    						
    						//prepare save receipt was faxed log
    						$client = $logininfo->clientid;
    						$data['user'] = $logininfo->userid;
    						$data['receipt'] = $_REQUEST['rpid'];
    						$data['date'] = date('Y-m-d H:i:s', time());
    						$data['operation'] = "faxed";
    						
    						//save log
    						$receipt_log = new Application_Form_ReceiptLog();
    						$write_receipt_log = $receipt_log->insert_receipt_log($ipid, $client, $data);
    						
    						$data['status'] = substr($post_data_fax['receipt_status'],'0','1').substr($post_data_fax['receipt_status'],'1','1')."g";
    						$data['receipt'] = $_REQUEST['rpid'];
    						$update_status = $receipts_form->update_receipt_status($data);
    						exit;
    					}
    					else
    					{
    						$post_data = $_POST;
    						$post_data["userstamp1"] = $userstamp1;
    						$post_data["userstamp2"] = $userstamp2;
    						$post_data["userstamp3"] = $userstamp3;
    						$post_data["userstamp4"] = $userstamp4;
    						$post_data["userstamp5"] = $userstamp5;
    						$post_data["userstamp6"] = $userstamp6;
    						$post_data["userstamp7"] = $userstamp7;
    						

    						$post_data["med2"] = $_POST['line1'];
    						$post_data["med5"] = $_POST['line2'];
//     						$post_data["med8"] = $_POST['line3'];

    						$limit_line3 = trim(rtrim(substr($_POST['line3'], 0, 92)));
                            $line_3_array = str_split($limit_line3,46);
    						$post_data["med8"] = $line_3_array;
    						
    						$post_data['zipcode_city'] = $_POST['zipcode'] . ' ' . $_POST['city'];
    						
    						$old_style = new Pms_Oldpdf();
    						$uploaded_pdf = $old_style ->generate($post_data); // Return for download, do not upload
    					}
    				}
    					 
					//update receipt status only if rpid is present(receipt is saved in db so we have a receipt to change status)
					if(!empty($_REQUEST['rpid']) && empty($post['savereceipt']))
					{
						//prepare save receipt was printed log
						$ipid = $ipid;
						$client = $logininfo->clientid;
						$data['user'] = $logininfo->userid;
						$data['receipt'] = $_REQUEST['rpid'];
						$data['date'] = date('Y-m-d H:i:s', time());
						$data['operation'] = "printed";
			
						//save log
						$receipt_log = new Application_Form_ReceiptLog();
						$write_receipt_log = $receipt_log->insert_receipt_log($ipid, $client, $data);
						

						if(substr($post_data['receipt_status'],'1','1') != "g")
						{
							//print default status
							$data['status'] = substr($post_data['receipt_status'],'0','1')."g".substr($post_data['receipt_status'],'2','1');
							$data['receipt'] = $_REQUEST['rpid'];
							$update_status = $receipts_form->update_receipt_status($data);
						}
					}
					
					if($post['savereceipt'])
					{
						$this->redirect(APP_BASE . 'patientformnew/listreceipts?id=' . $_REQUEST['id']);
						exit;
					}
					else
					{
						exit();
					}
    					
    					
    			    
    			} else {
			    #################################################################
			    	
				if($_POST['stampusers'] > 0)
				{
					if($multiplestamps_option === true)
					{

						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];

						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);

						$userstamp1 = $userstatmp[0]['row1'];
						$userstamp2 = $userstatmp[0]['row2'];
						$userstamp3 = $userstatmp[0]['row3'];
						$userstamp4 = $userstatmp[0]['row4'];
						$userstamp5 = $userstatmp[0]['row5'];
						$userstamp6 = $userstatmp[0]['row6'];
						$userstamp7 = $userstatmp[0]['row7'];
					}
					else
					{
						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getLastUserStamp($_POST['stampusers']);

						$userstamp1 = $userstatmp[0]['row1'];
						$userstamp2 = $userstatmp[0]['row2'];
						$userstamp3 = $userstatmp[0]['row3'];
						$userstamp4 = $userstatmp[0]['row4'];
						$userstamp5 = $userstatmp[0]['row5'];
						$userstamp6 = $userstatmp[0]['row6'];
						$userstamp7 = $userstatmp[0]['row7'];
					}
				}
 
				//save/update button
				if(!empty($_POST['savereceipt']))
				{
					$post = $_POST;
					$post['ipid'] = $ipid;
					$post['clientid'] = $logininfo->clientid;
					$post['userid'] = $logininfo->userid;

					$receipt_form = new Application_Form_Receipts();

					if(strlen($_REQUEST['rpid']) > '0' && $_REQUEST['rpid'] > '0')
					{
						//do update
						$receipt_form_res = $receipt_form->update_receipt($_REQUEST['rpid'], $post);
					}
					else
					{
						//do insert
						$receipt_form_res = $receipt_form->insert_receipt($post);
					}

					if(!$receipt_form_res)
					{
						$this->retain_values($_POST);
						$receipt_form->assignErrorMessages();
						exit;
					}
					else
					{
						$post_data = $receipts_mdl->get_receipt($receipt_form_res);
						
						$post_data['med1'] = $post_data['medication_1'];
						$post_data['med4'] = $post_data['medication_2'];
						$post_data['med7'] = $post_data['medication_3'];
						$post_data['line1'] = $post_data['custom_line_1'];
						$post_data['line2'] = $post_data['custom_line_2'];
						$post_data['line3'] = $post_data['custom_line_3'];
						$post_data['insurancecomname'] = $post_data['insurance_name'];
						$post_data['patientlastname'] = $post_data['last_name'];
						$post_data['patientfirstname'] = $post_data['first_name'];
						if($post_data['birthdate'] != '0000-00-00')
						{
							$post_data['birthdate'] = date('d.m.Y', strtotime($post_data['birthdate']));
						}
						$post_data['kassenno'] = $post_data['ins_kassenno'];
						$post_data['insuranceno'] = $post_data['ins_insuranceno'];
						$post_data['status'] = $post_data['ins_status'];
						$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
						$post_data['lanr'] = $post_data['lanr'];
						if($post_data['datum'] != '0000-00-00')
						{
							$post_data['datum'] = date("d.m.Y", strtotime($post_data['datum']));
						}
						//checkboxes saved data
						$post_data['getiuhrfrei'] = explode(",", $post_data['foc']);
						$post_data['mttel'] = $post_data['aid'];
						$post_data['soff'] = $post_data['vaccine'];
						$post_data['bedaf'] = $post_data['bedarf'];
						$post_data['pricht'] = $post_data['price'];

						// force print dialog
						$post_data['pdf_js'] = 'print();';
					}
				}
				else
				{
					//pdf from link
					if(strlen($_REQUEST['rpid']) > '0' && $_REQUEST['rpid'] > '0' && $_REQUEST['mode'] == "pdf")
					{
						//get receipt data
						$post_data = $receipts_mdl->get_receipt($_REQUEST['rpid']);

						if($multiplestamps_option === true && $post_data['stampid'] > 0)
						{
							$ustamp = new UserStamp();
							$userstatmp = $ustamp->getUserStampById($post_data['stampuser'], $post_data['stampid']);

							$post_data['userstamp1'] = $userstatmp[0]['row1'];
							$post_data['userstamp2'] = $userstatmp[0]['row2'];
							$post_data['userstamp3'] = $userstatmp[0]['row3'];
							$post_data['userstamp4'] = $userstatmp[0]['row4'];
							$post_data['userstamp5'] = $userstatmp[0]['row5'];
							$post_data['userstamp6'] = $userstatmp[0]['row6'];
							$post_data['userstamp7'] = $userstatmp[0]['row7'];
							
							$userstamp1 = $userstatmp[0]['row1'];
							$userstamp2 = $userstatmp[0]['row2'];
							$userstamp3 = $userstatmp[0]['row3'];
							$userstamp4 = $userstatmp[0]['row4'];
							$userstamp5 = $userstatmp[0]['row5'];
							$userstamp6 = $userstatmp[0]['row6'];
							$userstamp7 = $userstatmp[0]['row7'];
						}
						else if($post_data['stampuser'])
						{
							$ustamp = new UserStamp();
							$userstatmp = $ustamp->getLastUserStamp($post_data['stampuser']);

							$post_data['userstamp1'] = $userstatmp[0]['row1'];
							$post_data['userstamp2'] = $userstatmp[0]['row2'];
							$post_data['userstamp3'] = $userstatmp[0]['row3'];
							$post_data['userstamp4'] = $userstatmp[0]['row4'];
							$post_data['userstamp5'] = $userstatmp[0]['row5'];
							$post_data['userstamp6'] = $userstatmp[0]['row6'];
							$post_data['userstamp7'] = $userstatmp[0]['row7'];
							
							$userstamp1 = $userstatmp[0]['row1'];
							$userstamp2 = $userstatmp[0]['row2'];
							$userstamp3 = $userstatmp[0]['row3'];
							$userstamp4 = $userstatmp[0]['row4'];
							$userstamp5 = $userstatmp[0]['row5'];
							$userstamp6 = $userstatmp[0]['row6'];
							$userstamp7 = $userstatmp[0]['row7'];
						}
						
						$post_data['med1'] = $post_data['medication_1'];
						$post_data['med4'] = $post_data['medication_2'];
						$post_data['med7'] = $post_data['medication_3'];
						$post_data['line1'] = $post_data['custom_line_1'];
						$post_data['line2'] = $post_data['custom_line_2'];
						$post_data['line3'] = $post_data['custom_line_3'];
						$post_data['insurancecomname'] = $post_data['insurance_name'];
						$post_data['patientlastname'] = $post_data['last_name'];
						$post_data['patientfirstname'] = $post_data['first_name'];
						if($post_data['birthdate'] != '0000-00-00')
						{
							$post_data['birthdate'] = date('d.m.Y', strtotime($post_data['birthdate']));
						}
						$post_data['kassenno'] = $post_data['ins_kassenno'];
						$post_data['insuranceno'] = $post_data['ins_insuranceno'];
						$post_data['status'] = $post_data['ins_status'];
						$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
						$post_data['lanr'] = $post_data['lanr'];
						if($post_data['datum'] != '0000-00-00')
						{
							$post_data['datum'] = date("d.m.Y", strtotime($post_data['datum']));
						}
						//checkboxes saved data
						$post_data['getiuhrfrei'] = explode(",", $post_data['foc']);
						$post_data['mttel'] = $post_data['aid'];
						$post_data['soff'] = $post_data['vaccine'];
						$post_data['bedaf'] = $post_data['bedarf'];
						$post_data['pricht'] = $post_data['price'];

						// force print dialog
						$post_data['pdf_js'] = 'print();';
					}
					else if(strlen($_POST['rpid']) > '0' && $_POST['rpid'] > '0' && $_POST['mode'] == "fax")
					{
						$post_data_fax = $receipts_mdl->get_receipt($_REQUEST['rpid']);
						
						//prepare save receipt was faxed log
						$client = $logininfo->clientid;
						$data['user'] = $logininfo->userid;
						$data['receipt'] = $_REQUEST['rpid'];
						$data['date'] = date('Y-m-d H:i:s', time());
						$data['operation'] = "faxed";
						
						//save log
						$receipt_log = new Application_Form_ReceiptLog();
						$write_receipt_log = $receipt_log->insert_receipt_log($ipid, $client, $data);
						
						$data['status'] = substr($post_data_fax['receipt_status'],'0','1').substr($post_data_fax['receipt_status'],'1','1')."g";
						$data['receipt'] = $_REQUEST['rpid'];
						$update_status = $receipts_form->update_receipt_status($data);
						exit;
					}
					else
					{
						$post_data = $_POST;
						$post_data["userstamp1"] = $userstamp1;
						$post_data["userstamp2"] = $userstamp2;
						$post_data["userstamp3"] = $userstamp3;
						$post_data["userstamp4"] = $userstamp4;
						$post_data["userstamp5"] = $userstamp5;
						$post_data["userstamp6"] = $userstamp6;
						$post_data["userstamp7"] = $userstamp7;
					}
				}

				
					/* ----------------------------------------LAYOUT PDF-------------------------------------- */
					$pdf = new Pms_SIMPLETCPDF('L', PDF_UNIT, 'A6', true, 'UTF-8', false);

					$pdf->SetMargins(0, 0, 0, 0);
					$pdf->SetHeaderMargin(1);
					$pdf->SetFooterMargin(1);

					// set javascript
					if($post_data['pdf_js'])
					{
						$pdf->IncludeJS($post_data['pdf_js']);
					}


					$pdf->AddPage();
					$pdf->SetAutoPageBreak(false, 0);

					$bg_image_path = PDFBG_PATH . '/scaled_x.jpg';
					if(is_file($bg_image_path))
					{
//						$pdf->Image($bg_image_path, 0, 0, 148, 105, '', '', '', false, 300, '', false, false, 0, false, false, true);
					}

					$border = '0';

					$marginLeft = 8;
					$marginLeft2 = $marginLeft + 12;
					$marginLeft3 = $marginLeft + 58;

					$xMark = '<span style="font-size: 14px; font-family: Arial;">X</span>';

					$html = '<span style="font-size: 10px; font-family: Arial;">' . $post_data['insurancecomname'] . '</span>';
					$pdf->writeHTMLCell(85, 3, $marginLeft, 7, $html, $border, '', 0, true, 'L', true);

					$html = '<span style="font-size: 10px; font-family: Arial;">' . $post_data['patientlastname'] . '</span>';
					$pdf->writeHTMLCell(60, 3, $marginLeft, 17, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 10px; font-family: Arial;">' . $post_data['patientfirstname'] . '</span>';
					$pdf->writeHTMLCell(60, 3, $marginLeft, 21, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['street'] . '</span>';
					$pdf->writeHTMLCell(60, 3, $marginLeft, 25, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['zipcode'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft, 29, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['city'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft2, 29, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['birthdate'] . '</span>';
					$pdf->writeHTMLCell(50, 3, ($marginLeft3 + 3), 22, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['kassenno'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft, 38, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['insuranceno'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft + 23, 38, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['status'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft + 58, 38, $html, $border, 1, 0, true, 'L', true);

					$font_size_bsnr = "9px";
					if(strlen(trim(rtrim($post_data['betriebsstatten_nr']))) > '15')
					{
						$font_size_bsnr = "6px";
					}

					$font_size_lanr = "9px";
					if(strlen(trim(rtrim($post_data['lanr']))) > '15')
					{
						$font_size_lanr = "6px";
					}

					$html = '<span style="font-size:' . $font_size_bsnr . '; font-family: Arial;">' . $post_data['betriebsstatten_nr'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft, 47, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size:' . $font_size_lanr . '; font-family: Arial;">' . $post_data['lanr'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft + 29, 47, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['datum'] . '</span>';
					$pdf->writeHTMLCell(50, 3, $marginLeft + 58, 47, $html, $border, 1, 0, true, 'L', true);

					if(in_array('1', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, 1, 6.5, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('2', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, 1, 13.2, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('3', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, 1, 20, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('4', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, 1, 28.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('5', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, 1, 37.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('6', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, 1, 46.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('8', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, 1, 59.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('9', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, 1, 68.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if(in_array('10', $post_data['getiuhrfrei']))
					{
						$pdf->writeHTMLCell(50, 3, 1, 77.75, $xMark, $border, 1, 0, true, 'L', true);
					}

					if($post_data['bvg'] == 6)
					{
						$pdf->writeHTMLCell(50, 3, 92, 7, $xMark, $border, 1, 0, true, 'L', true);
					}

					if($post_data['mttel'] == 7)
					{
						$pdf->writeHTMLCell(50, 3, 97, 7, $xMark, $border, 1, 0, true, 'L', true);
					}

					if($post_data['soff'] == 8)
					{
						$pdf->writeHTMLCell(10, 3, 102, 7, $xMark, $border, 1, 0, true, 'L', true);
					}

					if($post_data['bedaf'] == 9)
					{
						$pdf->writeHTMLCell(50, 3, 107, 7, $xMark, $border, 1, 0, true, 'L', true);
					}

					if($post_data['pricht'] == 10)
					{
						$pdf->writeHTMLCell(50, 3, 114, 7, $xMark, $border, 1, 0, true, 'L', true);
					}

					$html = '<p style="font-size: 9px; font-family: Arial;">' . trim(rtrim(mb_substr($post_data['med1'], 0, 46, "UTF-8"))) . '<br /> ' . $post_data['line1'] . '</p>';
					$pdf->writeHTMLCell(79, 3, $marginLeft, 59.5, $html, $border, 1, 0, true, 'L', true);
//					$html = '<p style="font-size: 9px; font-family: Arial;">' . $post_data['line1'] . '</p>';
//					$pdf->writeHTMLCell(79, 3, $marginLeft, 63, $html, $border, 1, 0, true, 'L', true);

					$html = '<p style="font-size: 9px; font-family: Arial;">' . trim(rtrim(mb_substr($post_data['med4'], 0, 46, "UTF-8"))) . ' <br />' . $post_data['line2'] . '</p>';
					$pdf->writeHTMLCell(79, 3, $marginLeft, 68.5, $html, $border, 1, 0, true, 'L', true);
//					$html = '<p style="font-size: 9px; font-family: Arial;">' . $post_data['line2'] . '</p>';
//					$pdf->writeHTMLCell(79, 3, $marginLeft, 71, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;">' . trim(rtrim(mb_substr($post_data['med7'], 0, 46, "UTF-8"))) . '<br /> ' . trim(rtrim(mb_substr($post_data['line3'], 0, 92, "UTF-8"))) . '</p>';
					$pdf->writeHTMLCell(79, 3, $marginLeft, 77.5, $html, $border, 1, 0, true, 'L', true);
//					$html = '<span style="font-size: 9px; font-family: Arial;">' . $post_data['line3'] . '</p>';
//					$pdf->writeHTMLCell(79, 3, $marginLeft, 80, $html, $border, 1, 0, true, 'L', true);

					$html = '<span style="font-size: 9px; font-family: Arial;"><b>' . $userstamp1 . "</b><br />" . $userstamp2 . "<br /></span><span style=\"font-size:7px;\">" . $userstamp3 . "<br /></span><span style=\"font-size:9px;\"><b>" . $userstamp4 . "</b><br /></span><span style=\"font-size:7px;\">" . $userstamp5 . "<br /></span><span style=\"font-size:7px;\">" . $userstamp6 . "<br /></span><span style=\"font-size:7px;\">" . $userstamp7 . '</span></span>';
					$pdf->writeHTMLCell(60, 23, $marginLeft + 78, 57, $html, $border, 1, 0, true, 'C', true);

					if(!empty($_POST['savereceipt']))
					{
						$filename = "";

						$post_data['medication1line1'] = $_POST['medication1line1'] ;
						$post_data['medication4line2'] = $_POST['medication4line2'] ;
						$post_data['medication7line3'] = $_POST['medication7line3'] ;
						
						
						foreach($post_data as $field => $value)
						{
							if(($field == "med1" && strlen($value) > 0 ) || ($field == "med4" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med5" && strlen($value) > 0 ) || ($field == "med7" && strlen($value) > 0 ) || ($field == "med8" && strlen($value) > 0 ) || ($field == "med9" && strlen($value) > 0 ))
							{
							    if( $post_data['medication1line1'] == "1" && ($field == "med1"  && strlen($value) > 0) ){
							        $value = $post_data['med1'].$post_data['line1'];
							    }
							    
							    if( $post_data['medication4line2'] == "1" && ($field == "med4"  && strlen($value) > 0) ){
							        $value = $post_data['med4'].$post_data['line2'];
							    }
							    
							    if( $post_data['medication7line3'] == "1" && ($field == "med7"  && strlen($value) > 0) ){
							        $value = $post_data['med7'].$post_data['line3'];
							    }
							    
								$medication_array[] = $value;
							}
						}
 
						if(!empty($medication_array))
						{
							$medication = implode(", ", $medication_array);
							$medication_str = " (" . $medication . ")";
						}
						else
						{
							$medication_str = "";
						}

						//upload file to pdf
						$file_data['pdfname'] = 'mmi_rezept';
						$file_data['password'] = $logininfo->filepass;
						$uploaded_pdf = $pdf->upload_pdf($file_data);

						//add to Patient Files(Datein & Dokumente)
						if($uploaded_pdf && strlen($uploaded_pdf['pdf_filename']) > '0')
						{
							$cust = new PatientFileUpload();
							$cust->title = Pms_CommonData::aesEncrypt('Rezept MMI ' . $medication_str . '');
							$cust->ipid = $ipid;
							$cust->file_name = Pms_CommonData::aesEncrypt($uploaded_pdf['pdf_filename']);
							$cust->file_type = Pms_CommonData::aesEncrypt('PDF');
							$cust->save();
							$recordid = $cust->id;

							//insert system file tags - ISPC-1247 (each mmi receipt type has its own tag)
							if(!empty($_POST['receipt_type']) && strlen($_POST['receipt_type']) > '0')
							{
								$insert_tag = Application_Form_PatientFile2tags::insert_file_tags($recordid, false, $_POST['receipt_type']);
							}
						}

						if($recordid)
						{
							//insert comment in verlauf
							$ctitle = "Rezept erstellt " . $medication_str;

							$cust = new PatientCourse();
							$cust->ipid = $ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->user_id = $logininfo->userid;
							$cust->recordid = $recordid;
							$cust->tabname = Pms_CommonData::aesEncrypt("receiptupload");
							$cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
							$cust->save();
						}
					}
					
					
					//update receipt status only if rpid is present(receipt is saved in db so we have a receipt to change status)
					if(!empty($_REQUEST['rpid']) && empty($post['savereceipt']))
					{
						//prepare save receipt was printed log
						$ipid = $ipid;
						$client = $logininfo->clientid;
						$data['user'] = $logininfo->userid;
						$data['receipt'] = $_REQUEST['rpid'];
						$data['date'] = date('Y-m-d H:i:s', time());
						$data['operation'] = "printed";
			
						//save log
						$receipt_log = new Application_Form_ReceiptLog();
						$write_receipt_log = $receipt_log->insert_receipt_log($ipid, $client, $data);
						

						if(substr($post_data['receipt_status'],'1','1') != "g")
						{
							//print default status
							$data['status'] = substr($post_data['receipt_status'],'0','1')."g".substr($post_data['receipt_status'],'2','1');
							$data['receipt'] = $_REQUEST['rpid'];
							$update_status = $receipts_form->update_receipt_status($data);
						}
					}
					
					if($post['savereceipt'])
					{
						$this->redirect(APP_BASE . 'patientformnew/listreceipts?id=' . $_REQUEST['id']);
						exit;
					}
					else
					{
						//show pdf
						$pdf->toBrowser('Rezept', 'D');
						exit();
					}
					
			}
								
			}

			if(!$_POST)
			{
				if(strlen($_REQUEST['rpid']) > '0' && $_REQUEST['rpid'] > '0')
				{
					//load receipt data
					$receipts_mdl = new Receipts();
					$post_data = $receipts_mdl->get_receipt($_REQUEST['rpid']);


					$post_data['insurance_com_name'] = $post_data['insurance_name'];
					$post_data['patientlastname'] = $post_data['last_name'];
					$post_data['patientfirstname'] = $post_data['first_name'];
					if($post_data['birthdate'] != '0000-00-00')
					{
						$post_data['bdate'] = date('d.m.Y', strtotime($post_data['birthdate']));
					}
					
					if($post_data['datum'] != '0000-00-00')
					{
						$post_data['datum'] = date('d.m.Y', strtotime($post_data['datum']));
					}

					if($post_data['date'] != "0000-00-00 00:00:00")
					{
						$post_data['date'] = date('d.m.Y', strtotime($post_data['date']));
					}
					else
					{
						$post_data['date'] = date('d.m.Y', time());
					}

					$post_data['zip'] = $post_data['zipcode'];
					$post_data['kassen_no'] = $post_data['ins_kassenno'];
					$post_data['insurance_no'] = $post_data['ins_insuranceno'];
					$post_data['insurance_status'] = $post_data['ins_status'];
					$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
					$post_data['lanr'] = $post_data['lanr'];
					$post_data['betriebsstatten_nr'] = $post_data['bsnr'];
					$post_data['getiuval'] = explode(',', $post_data['foc']);
					$post_data['main_diagnosis'] = $main_diagnosis;
					
					$this->view->stampuser = $post_data['stampuser'];
					$this->view->fdata = $post_data;
					
					
					$assigned_users_mdl = new PrintUsersAssigned();
					$assigned_users = $assigned_users_mdl->get_receipt_assigned_users($logininfo->clientid, array($post_data['id']));
					$assigned_users = $assigned_users;

					$assigned_fax_users_mdl = new FaxUsersAssigned();
					$assigned_fax_users = $assigned_fax_users_mdl->get_receipt_assigned_users($logininfo->clientid, array($post_data['id']));
					$assigned_fax_users = $assigned_fax_users;

					$receipt_creators = $post_data['create_user'];
		
					$disable_status_icon = "";
					if($receipt_creators != $logininfo->userid && !in_array($logininfo->userid, $assigned_fax_users[$post_data['id']]) && !in_array($logininfo->userid, $assigned_users[$post_data['id']]))
					{
						$disable_status_icon = "disabled_status_icon";
					}
					$this->view->disable_status_icon = $disable_status_icon;
				}
				else
				{
//					empty form data
					/* ----------------------------------------PATIENT-------------------------------------- */
					$parr = $patientmaster->getMasterData($decid, 0);
					$form_data['patientfirstname'] = $parr['first_name'];
					$form_data['patientlastname'] = $parr['last_name'];
					$form_data['street'] = $parr['street1'];
					$form_data['zip'] = $parr['zip'];
					$form_data['city'] = $parr['city'];
					$form_data['bdate'] = $parr['birthd'];
					$form_data['datum'] = date('d.m.Y', time());
					/* ----------------------------------------INSURANCE-------------------------------------- */
					$phelathinsurance = new PatientHealthInsurance();
					$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($parr['ipid']);
					if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
					{
						$form_data['getiuval'][] = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
					}

					$form_data['insurance_com_name'] = $healthinsu_array[0]['company_name'];
					$form_data['insurance_no'] = $healthinsu_array[0]['insurance_no'];
					$form_data['kassen_no'] = $healthinsu_array[0]['kvk_no'];

					//removed according to ISPC-1415
//					if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == 1)
//					{
//						$form_data['bvg'] = 6;
//					}

					$form_data['main_diagnosis'] = $main_diagnosis;
					
					$status_int_array = array("M" => "1", "F" => "3", "R" => "5");

					if($healthinsu_array[0]['insurance_status'] != "")
					{
						if(array_key_exists($healthinsu_array[0]['insurance_status'], $status_int_array))
						{
							$this->view->insurance_status = $status_int_array[$healthinsu_array[0]['insurance_status']];
						}
						else
						{
							$this->view->insurance_status = "";
						}
					}
					$form_data['insurance_status'] = $this->view->insurance_status;

					/* ------------------------------BEGIN USER------------------------------- */
					$form_data['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
					$form_data['lanr'] = $uarray['LANR'];
					$form_data['date'] = date('d.m.Y', time());

					$this->view->fdata = $form_data;
				}

				/* ----------------------------------------BEGIN STAMPS-------------------------------------- */
				$users = new User();
				$userarray = $users->getUserByClientid($logininfo->clientid);
				$userarraylast[] = $this->view->translate('selectuser');

				$userarraylast_ids = array();

				foreach($userarray as $user)
				{
					$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
					$userarraylast_ids[] = $user['id'];
				}
				$this->view->users = $userarraylast;


				$ustamp = new UserStamp();

				$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
				foreach($multipleuser_stamp as $ks => $uspamp)
				{
					$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
					$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
					$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
				}
				$this->view->users_mstamps = $users_mstamps;


				if($isadmin == 1)
				{
					$showselect = 1;
				}
				else
				{
					$showselect = 1; // show select to all
				}
				$this->view->showselect = $showselect;
				$userstatmp = $ustamp->getLastUserStamp($logininfo->userid);

				$this->view->userstamp1 = $userstatmp[0]['row1'];
				$this->view->userstamp2 = $userstatmp[0]['row2'];
				$this->view->userstamp3 = $userstatmp[0]['row3'];
				$this->view->userstamp4 = $userstatmp[0]['row4'];
				$this->view->userstamp5 = $userstatmp[0]['row5'];
				$this->view->userstamp6 = $userstatmp[0]['row6'];
				$this->view->userstamp7 = $userstatmp[0]['row7'];



				$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
				$this->view->clientid = $logininfo->clientid;

				$tm = new TabMenus();
				$this->view->tabmenus = $tm->getMenuTabs();
			}
		}

		public function listreceiptsAction()
		{
			$receipt_form = new Application_Form_Receipts();
			$user_form = new Application_Form_User();
			$print_users = new PrintUsers();
			$fax_users = new FaxUsers();

			$this->view->patient_id = $_REQUEST['id'];
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$this->view->encid = Pms_Uuid::encrypt($decid);
			$ipid = Pms_CommonData::getIpid($decid);

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->view->usertype = $logininfo->usertype;
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			if(empty($_REQUEST['id']))
			{
				$this->redirect(APP_BASE . 'error/previlege');
				exit;
			}
			
			$this->view->mmi_button = '0';
			if($logininfo->usertype == 'SA')
			{
			    $this->view->mmi_button = '1';
			}
			
			/* -------------------- Check for MMI duplicate module ------------ */
			$modules = new Modules();
			$duplicate_module = $modules->checkModulePrivileges("95", $logininfo->clientid);
			if($duplicate_module)
			{
				$this->view->duplicate_receipt = "1";
			}
			else
			{
				$this->view->duplicate_receipt = "0";
			}

			if($this->getRequest()->isPost() && !empty($_POST['assign_users_frm']))
			{
				$post = $_POST;
				$post['ipid'] = $ipid;
				$post['client'] = $clientid;
				$post['user'] = $userid;

				if($_POST['assign_users_frm'] == "1")
				{
					$save_users_assignation = $user_form->assign_print_users($post);
					$send_users_todos = $receipt_form->send_assigned_users_todos($clientid, $post);
					exit;
				}
				else if($_POST['assign_users_frm'] == "2")
				{
					$save_fax_users_assignation = $user_form->assign_fax_users($post);
					$send_users_todos = $receipt_form->send_assigned_users_todos($clientid, $post);
					exit;
				}
				else if($_POST['remove_receipt'] == "1")
				{
					if(strlen($_POST['rpid']) > '0' && $_POST['rpid'] > '0')
					{
						$receiptid = $_POST['rpid'];
						$delete = $receipt_form->delete_receipt($clientid, $receiptid);
					}
				}
			
				$this->redirect(APP_BASE . 'patientformnew/listreceipts?id=' . $_REQUEST['id']);
				exit;
			}
			else if($this->getRequest()->isPost() && empty($_POST['assign_users_frm']))
			{
				if($_POST['mode'] == "duplicate" && $duplicate_module == "1")
				{
					$phelathinsurance = new PatientHealthInsurance();
					$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
					//var_dump($healthinsu_array); exit;
					
					
					if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
					{
						//$form_data['getiuval'][] = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
						$rezeptgebuhrenbefreiung = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
					}
					else
					{
						$rezeptgebuhrenbefreiung = 0;
					}
					
					$receipt_id = $_POST['rpid'];
					$receipt_form->duplicate_receipt($clientid, $receipt_id, $ipid, $rezeptgebuhrenbefreiung);
					exit;
				}

			}

			

			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$this->view->clientid = $logininfo->clientid;

			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();


			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
				exit;
			}

			/* ------------------------------------------------------------------------------ */

			if($_GET['flg'] == 'suc')
			{
				$this->view->error_message = $this->view->translate("recordupdatedsuccessfully");
			}

			//print users specific
			$assigned_users_mdl = new PrintUsersAssigned();
			$assigned_users = $assigned_users_mdl->get_receipt_assigned_users($clientid, false);
			if($assigned_users)
			{
				$this->view->json_asigned_users = json_encode($assigned_users);
			}
			else
			{
				$this->view->json_asigned_users = json_encode(array("status" => '0'));
			}

			$print_users_res = $print_users->get_print_users($logininfo->clientid, false);

			$print_users_arr = array();
			foreach($print_users_res as $k_usr => $v_usr)
			{
				$print_users_arr[$v_usr['id']]['id'] = $v_usr['id'];
				$print_users_arr[$v_usr['id']]['user_title'] = trim(rtrim($v_usr['user_title']));
				$print_users_arr[$v_usr['id']]['last_name'] = trim(rtrim($v_usr['last_name']));
				$print_users_arr[$v_usr['id']]['first_name'] = trim(rtrim($v_usr['first_name']));
			}

			if(!empty($print_users_arr))
			{
				$this->view->print_users = json_encode($print_users_arr);
			}
			else
			{
				$this->view->print_users = json_encode(array("status" => '0'));
			}


			//fax users specific
			$assigned_fax_users_mdl = new FaxUsersAssigned();
			$assigned_fax_users = $assigned_fax_users_mdl->get_receipt_assigned_users($clientid, false);
			if($assigned_fax_users)
			{
				$this->view->json_asigned_fax_users = json_encode($assigned_fax_users);
			}
			else
			{
				$this->view->json_asigned_fax_users = json_encode(array("status" => '0'));
			}

			$fax_users_res = $fax_users->get_fax_users($clientid, false);

			$fax_users_arr = array();
			foreach($fax_users_res as $k_usr => $v_usr)
			{
				$fax_users_arr[$v_usr['id']]['id'] = $v_usr['id'];
				$fax_users_arr[$v_usr['id']]['user_title'] = trim(rtrim($v_usr['user_title']));
				$fax_users_arr[$v_usr['id']]['last_name'] = trim(rtrim($v_usr['last_name']));
				$fax_users_arr[$v_usr['id']]['first_name'] = trim(rtrim($v_usr['first_name']));
			}

			if(!empty($fax_users_arr))
			{
				$this->view->fax_users = json_encode($fax_users_arr);
			}
			else
			{
				$this->view->fax_users = json_encode(array("status" => '0'));
			}
			
			//get colours css classes
			$this->view->receipt_status_colours = json_encode(Pms_CommonData::receipt_status_colours());
		}

		public function receiptsremoveAction()
		{
			$receipts = new Receipts();
			$users = new User();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->view->patient_id = $_REQUEST['id'];
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->userid = $logininfo->userid;
			$this->view->receipt_statuses = Pms_CommonData::receipt_statuses();
			$receipt_form = new Application_Form_Receipts();
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}
			$this->_helper->viewRenderer->setNoRender();
			/* --------------------Check for MMI module -- used only for livesearch in MMI Receipt-- --------- */
			$modules = new Modules();
			$duplicate_module = $modules->checkModulePrivileges("95", $logininfo->clientid);
			if($duplicate_module)
			{
				$this->view->duplicate_receipt = "1";
			}
			else
			{
				$this->view->duplicate_receipt = "0";
			}

			$client_users = $users->getUserByClientid($clientid, true, true);
			unset($client_users[-1]);

			$this->view->client_users = $client_users;			

			$receipt_types = Pms_CommonData::receipt_types();


			if($_REQUEST['remove_receipt'] == "1")
			{
				if(strlen($_REQUEST['rpid']) > '0' && $_REQUEST['rpid'] > '0')
				{					
					$receiptid = $_REQUEST['rpid'];
					$other_data['ipid'] = $ipid;
					$other_data['userid'] = $logininfo->userid;
					$delete = $receipt_form->delete_receipt($clientid, $receiptid, $other_data);					
					
						$qpc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,
				              AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
						->from('PatientCourse')
						->where("ipid='" . $ipid . "' and done_id='" . $receiptid . "' and AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "')='receiptupload'")
						->andWhere('tabname= "'. addslashes(Pms_CommonData::aesEncrypt('receiptupload')).'"' )
						->andWhere('source_ipid = ""')
						->orderby('create_date desc');					
						
					
				/*		$pcarr = $qpc->fetchArray();
					if(count($pcarr) > 0)
					{
						$updcourse = Doctrine::getTable('PatientCourse')->find($pcarr[0]['id']);
						$course_text = $pcarr[0]['course_title'];								
						$course_text .= "\n Das Rezept wurde am ".date('d-m-Y H:i:s', time())." von ".$client_users[$logininfo->userid]." gelöscht";
						$updcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($course_text));
						$updcourse->save();
					}
					$qpc = Doctrine_Query::create()
					->select("*")
					->from('PatientFileUpload')
					->where("ipid='" . $ipid . "' and recordid='" . $receiptid . "'")
					->orderby('create_date desc');
									              	
					$pcarr = $qpc->fetchArray();
					if(count($pcarr) > 0)
					{
						foreach($pcarr as $pcdata)
						{
						$updcourse = Doctrine::getTable('PatientFileUpload')->find($pcdata['id']);
						$updcourse->isdeleted = 1;
						$updcourse->save();
					}
					}*/
						
						$pcarr = $qpc->fetchArray();
						if(count($pcarr) > 0)
						{
							foreach($pcarr as $key=>$pcdata) 
							{
								if($key == 0)
								{
									$updcourse = Doctrine::getTable('PatientCourse')->find($pcdata['id']);
									$course_text = $pcdata['course_title'];
									$course_text .= "\n Das Rezept wurde am ".date('d.m.Y H:i:s', time())." von ".$client_users[$logininfo->userid]." gelöscht";
									$updcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($course_text));
									$updcourse->tabname = Pms_CommonData::aesEncrypt('receiptupload_deleted');
									$updcourse->save();
								}
								$updfile = Doctrine::getTable('PatientFileUpload')->find($pcdata['recordid']);
								$updfile->isdeleted = 1;
								$updfile->save();
							}
						}					
				}
			}
			
			echo "1";
			exit;
		}

		public function fetchreceiptsAction()
		{
			$receipts = new Receipts();
			$users = new User();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$this->view->patient_id = $_REQUEST['id'];
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$this->view->userid = $logininfo->userid;
			$this->view->receipt_statuses = Pms_CommonData::receipt_statuses();
			$receipt_form = new Application_Form_Receipts();
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;

			if(!$logininfo->clientid)
			{
				$this->_redirect(APP_BASE . "error/noclient");
				exit;
			}

			/* --------------------Check for MMI module -- used only for livesearch in MMI Receipt-- --------- */
			$modules = new Modules();
			$duplicate_module = $modules->checkModulePrivileges("95", $logininfo->clientid);
			if($duplicate_module)
			{
				$this->view->duplicate_receipt = "1";
			}
			else
			{
				$this->view->duplicate_receipt = "0";
			}
            //ISPC-2290 Lore 06.09.2019
			$client_users = $users->getUserByClientid($clientid, true, true, false);
			unset($client_users[-1]);

			$this->view->client_users = $client_users;

			$receipt_types = Pms_CommonData::receipt_types();


			if($_REQUEST['remove_receipt'] == "1")
			{
				if(strlen($_REQUEST['rpid']) > '0' && $_REQUEST['rpid'] > '0')
				{
					$receiptid = $_REQUEST['rpid'];
					$other_data['ipid'] = $ipid;
					$other_data['userid'] = $logininfo->userid;
					$delete = $receipt_form->delete_receipt($clientid, $receiptid, $other_data);
				}
			}

			/* ISPC-2781 Lore 05.01.2021 */
			/* -------Check if module Private Recipe only for private patient && privat patient --------- */
			$this->view->modul_private_recipe = "0";
			$this->view->private_patient = "0";
			if($modules->checkModulePrivileges("248", $logininfo->clientid))	{
			    $this->view->modul_private_recipe = "1";
			}
			
			$patienthealth = new PatientHealthInsurance();
			$hi_values = $patienthealth->getPatientHealthInsurance($ipid);
			if($hi_values[0]['privatepatient'] == '1'){
			    $this->view->private_patient = "1";
			} 
			//.
			

			//construct types sql case
			if($receipt_types)
			{
				$sql_case = array();
				foreach($receipt_types as $k_receipt => $v_receipt)
				{
					$sql_case[] = " WHEN `type` = '" . $v_receipt . "' THEN '" . $this->view->translate($v_receipt . '_label') . "' ";
				}

				$sql_case_final = "(CASE " . implode("", $sql_case) . " END)";
			}
			else
			{
				$sql_case_final = "type";
			}

			$columnarray = array(
				"usr" => "CONCAT_WS(', ', `last_name`, `first_name`)",
				"status" => "`receipt_status`",
				"faxusr" => "CONCAT_WS(', ', `last_name`, `first_name`)",
				"med" => "CONCAT_WS(', ', `medication_1`, `medication_2`, `medication_3`)",
				"typ" => $sql_case_final,
				"cdate" => "`create_date`",
			);
			$orderarray = array("ASC" => "DESC", "DESC" => "ASC");
			$this->view->{"style" . $_REQUEST['pgno']} = "active";

			$this->view->order = $orderarray['ASC'];

			foreach($columnarray as $k_elem => $v_elem)
			{
				$this->view->{$k_elem . "order"} = $orderarray[$_REQUEST['ord']];
			}

			$this->view->{$_REQUEST['clm'] . "order"} = $orderarray[$_REQUEST['ord']];

			//get sort order of users START
			if($_REQUEST['clm'] == 'usr' || $_REQUEST['clm'] == 'faxusr')
			{
				$user = Doctrine_Query::create()
					->select('*, ' . $columnarray[$_REQUEST['clm']])
					->from('User')
					->where('clientid = "' . $clientid . '"')
					->andWhere('isdelete="0"')
					->andWhere('isactive="0"')
					->orderBy($columnarray[$_REQUEST['clm']] . " " . $_REQUEST['ord']);
				$users_res = $user->fetchArray();

				if($users_res)
				{
					foreach($users_res as $k_usr_res => $v_usr_res)
					{
						$sorted_users[] = $v_usr_res['id'];
					}
				}
			}

			if(empty($sorted_users))
			{
				$sorted_users[] = "99999999999999999";
			}
			//get sort order of users END

			$receipts = Doctrine_Query::create()
				->select('count(*)')
				->from('Receipts')
				->where('isdelete = "0"')
				->andWhere('client = "' . $clientid . '"')
				->andWhere('ipid LIKE "' . $ipid . '"');
			if($_REQUEST['clm'] == 'usr' || $_REQUEST['clm'] == 'faxusr')
			{
				$receipts->orderBy('FIELD(create_user, "' . implode('","', $sorted_users) . '")');
			}
			else
			{
				$receipts->orderBy($columnarray[$_REQUEST['clm']] . " " . $_REQUEST['ord']);
			}

			$receipts_stats = $receipts->fetchArray();

			$limit = 50;
			$receipts_sel = Doctrine_Query::create()
				->select("*")
				->from('Receipts')
				->where('`isdelete` = "0"')
				->andWhere('`client` = "' . $clientid . '"')
				->andWhere('ipid LIKE "' . $ipid . '"')
				->limit($limit);
			if($_REQUEST['clm'] == 'usr')
			{
				$receipts_sel->orderBy('FIELD(create_user, "' . implode('","', $sorted_users) . '")');
			}
			else if($_REQUEST['clm'] == 'faxusr')
			{
				$receipts_sel->orderBy('FIELD(fax_user, "' . implode('","', $sorted_users) . '")');
			}
			else
			{
				$receipts_sel->orderBy($columnarray[$_REQUEST['clm']] . " " . $_REQUEST['ord']);
			}


			$receipts_sel->offset($_REQUEST['pgno'] * $limit);
			$receipt_limit = $receipts_sel->fetchArray();

			$receipt_ids[] = '99999999999999999';
			foreach($receipt_limit as $k_receipt => $v_receipt)
			{
				$receipt_ids[] = $v_receipt['id'];
				$receipt_creators[$v_receipt['id']] = $v_receipt['create_user'];
			}

			$assigned_users_mdl = new PrintUsersAssigned();
			$assigned_users = $assigned_users_mdl->get_receipt_assigned_users($clientid, $receipt_ids);
			//to have a counter in grid
			$this->view->assigned_users = $assigned_users;

			$assigned_fax_users_mdl = new FaxUsersAssigned();
			$assigned_fax_users = $assigned_fax_users_mdl->get_receipt_assigned_users($clientid, $receipt_ids);
			//to have a counter in grid
			$this->view->assigned_fax_users = $assigned_fax_users;
			
			
			$this->view->receipt_creators = $receipt_creators;

			if($receipts_stats[0]['count'] != "0")
			{
				$grid = new Pms_Grid($receipt_limit, 1, $receipts_stats[0]['count'], "listreceipts.html");
				$this->view->receiptsgrid = $grid->renderGrid();
				$this->view->navigation = $grid->dotnavigation("receipts_navigation.html", 5, $_REQUEST['pgno'], $limit);
			}
			else
			{
				if($this->view->duplicate_receipt == "1")
				{
					$colspn = "11";
				}
				else
				{
					$colspn = "10";
				}

				$this->view->receiptsgrid = '<tr><td colspan="' . $colspn . '">' . $this->view->translate('receipts_no_results') . '</td></tr>';
			}

			$response['msg'] = "Success";
			$response['error'] = "";
			$response['callBack'] = "callBack";
			$response['callBackParameters'] = array();
			$response['callBackParameters']['receiptslist'] = $this->view->render('patientformnew/fetchreceipts.html');

			echo json_encode($response);
			exit;
		}
		
		public function anlage5Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
				
				
			/* ----------------------Patient Info & Tab menus-------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
				
				
			$parr = $patientmaster->getMasterData($decid, 0);
			$this->view->first_name = $parr['first_name'];
			$this->view->last_name = $parr['last_name'];
			$this->view->birthd = $parr['birthd'];
		
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
				
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
				
			
			/*------------------------Get SAPV Data------------------------------------ */
			$ordered = 'verordnungam, verordnungbis ASC';
			$verordnet = 'verordnet != ""';
			$sapv = new SapvVerordnung();
			$patient_sapvs = $sapv->get_all_sapvs_new($ipid, $clientid,",",false, false, $ordered, $verordnet);
			//var_dump($patient_sapvs); exit;
			//construct sapv_period_selector
			//if no sapvid requested then use the last sapv
						
			$sapv_selector[] = 'Select Verordnung period';
			$has_no_sapv = true;
			
			$verordnet_von = "";
			foreach($patient_sapvs as $k_sapv => $v_sapv)
			{
				$verordnet_von = str_replace("'"," ",$v_sapv['verordner']);
				
				$sapv_selector[$v_sapv['id']] =  date('d.m.Y', strtotime($v_sapv['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($v_sapv['verordnungbis'])).' '.$verordnet_von;
			
				$sapv_dates['id'] = $v_sapv['id'];
				$sapv_dates['from'] = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$sapv_dates['till'] = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
			
				$sapv_selector_source[$v_sapv['id']] = $sapv_dates;
				$has_no_sapv = false;
				
				$patient_sapv_data[$v_sapv['id']]['id'] = $v_sapv['id']; 
				$patient_sapv_data[$v_sapv['id']]['select'] = $sapv_selector[$v_sapv['id']]; 
				$patient_sapv_data[$v_sapv['id']]['from'] = date('d.m.Y', strtotime($v_sapv['verordnungam'])); 
				$patient_sapv_data[$v_sapv['id']]['till'] = date('d.m.Y', strtotime($v_sapv['verordnungbis']));
				
				$js_patient_sapv_data[$k_sapv]['id'] = $v_sapv['id']; 
				$js_patient_sapv_data[$k_sapv]['select'] = $sapv_selector[$v_sapv['id']]; 
				$js_patient_sapv_data[$k_sapv]['from'] = date('d.m.Y', strtotime($v_sapv['verordnungam'])); 
				$js_patient_sapv_data[$k_sapv]['till'] = date('d.m.Y', strtotime($v_sapv['verordnungbis']));
			}
			
			$this->view->json_patient_sapv_data = json_encode($patient_sapv_data);
			
			$this->view->patient_sapv_data = $patient_sapv_data;
  
			/*-----------------------Get client data------------------------------------*/
			if($clientid != '0' || !empty($clientid))
			{
				$client_details = Client::getClientDataByid($clientid);
//				print_r($client_details);
//				exit;
//				$this->view->anlage5_team_name = $client_details[0]['team_name'];
				$this->view->anlage5_team_name = $client_details[0]['lbg_sapv_provider'];
				
// 				$address = $client_details[0]['street1'];
				$address = $client_details['0']['lbg_street'];
				if($client_details[0]['postcode'])
				{
					$address .= ', ' . $client_details[0]['lbg_postcode'];
				}
					
				if($client_details[0]['city'])
				{
					$address .= ', ' . $client_details[0]['lbg_city'];
				}
				$this->view->anlage5_address = $address;
				
//				$this->view->client_city = $client_details[0]['city'];
				$this->view->client_city = $client_details[0]['lbg_city'];
// 				$this->view->anlage5_ik_nummer = $client_details[0]['institutskennzeichen'];

				
				$itfa = "";
				
//				$itfa = $client_details[0]['institutskennzeichen'];
				$itfa = $client_details[0]['lbg_institutskennzeichen'];
				
				if(strlen($client_details[0]['phone']) > 1)
				{
					$itfa  .= ' / '. $client_details[0]['phone'];
				} else{
					$itfa  .= ' /  ';
				}
				if(strlen($client_details[0]['fax'])>1)
				{
					$itfa  .= ' / '.$client_details[0]['fax'];
				} else{
					$itfa  .= ' /  ';
				}
				
				
				$anlage5_contact_name = "";
				$anlage5_contact_name =  $client_details[0]['lastname'];
				if(strlen($client_details[0]['firstname'])>0){
					$anlage5_contact_name .= ", ".$client_details[0]['firstname'];
				}
				
				if(strlen($anlage5_contact_name) > 3 ){
					$itfa  .= ' / '.$anlage5_contact_name;
				} else {
					$itfa  .= ' / - ';
				}
				$this->view->itfa= $itfa;

				
				$this->view->lbg_sapv_provider = $client_details['0']['lbg_sapv_provider'];
				$this->view->lbg_street = $client_details['0']['lbg_street'];
				$this->view->lbg_postcode = $client_details['0']['lbg_postcode'];
				$this->view->lbg_city = $client_details['0']['lbg_city'];
				$this->view->lbg_iknummer = $client_details[0]['lbg_institutskennzeichen'];
				
			}
			/* ------------------------------- POST DATA ---------------------------------------------- */
			if($this->getRequest()->isPost())
			{
					if($_POST['sapv_from_date']){
						$_POST['sapv_from'] = date('Y-m-d H:i:s',strtotime($_POST['sapv_from_date']));
					}
					if($_POST['sapv_to_date']){
						$_POST['sapv_to'] = date('Y-m-d H:i:s',strtotime($_POST['sapv_to_date']));
					}
				$anlage5_form = new Application_Form_Anlage5Nie();
				if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) == '0')
				{
					$anlage5_save_data = $anlage5_form->insert_anlage5($_POST);
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				else if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) > '0')
				{ 
					$anlage5_update_data = $anlage5_form->update_anlage5($_POST);
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				else if($_POST['post_status'] == "pdf_print")
				{
					$_POST['patient_sapv_data'] = $patient_sapv_data;
					$_POST['anlage5_team_name'] = $this->view->anlage5_team_name;
					$_POST['anlage5_address'] = $this->view->anlage5_address;
					$_POST['itfa'] = $this->view->itfa;
					$_POST['lbg_sapv_provider'] = $this->view->lbg_sapv_provider;
					$_POST['lbg_street'] = $this->view->lbg_street;
					$_POST['lbg_postcode'] = $this->view->lbg_postcode;
					$_POST['lbg_city'] = $this->view->lbg_city;
					$_POST['lbg_iknummer'] = $this->view->lbg_iknummer;

					$this->generatePdfNew(3, $_POST, 'anlage5', "anlage5_pdf.html");
				}
			}
			
			//get saved form data
			$anlage5 = new Anlage5Nie();
			$anlage5_data = $anlage5->get_anlage5_details($ipid);
			if($_REQUEST['dbg'])
			{
				print_r($anlage5_data);
				exit;
			}
			if($anlage5_data)
			{
				
				$this->view->id = $anlage5_data[0]['id'];
				$this->view->sapv_period = $anlage5_data[0]['sapv_period'];

				if( !empty($anlage5_data[0]['sapv_from']) && $anlage5_data[0]['sapv_from'] != "1970-01-01" && $anlage5_data[0]['sapv_from'] != "0000-00-00"){
					$this->view->sapv_from_date = date('d.m.Y',strtotime($anlage5_data[0]['sapv_from']));
				} else{
					$this->view->sapv_from_date = "";
				}
				if( !empty($anlage5_data[0]['sapv_to']) && $anlage5_data[0]['sapv_to'] != "1970-01-01" && $anlage5_data[0]['sapv_to'] != "0000-00-00"){
					$this->view->sapv_to_date = date('d.m.Y',strtotime($anlage5_data[0]['sapv_to']));
				} else{
					$this->view->sapv_to_date = "";
				}
				
				$this->view->erst_daily = $anlage5_data[0]['erst_daily'];
				$this->view->anlage5_checkbox = explode(',', $anlage5_data[0]['anlage5_checkbox']);
				$this->view->erst_daily = $anlage5_data[0]['erst_daily'];
				$this->view->erst_wtl = $anlage5_data[0]['erst_wtl'];
				$this->view->erst_time = $anlage5_data[0]['erst_time'];
				$this->view->beratung_daily = $anlage5_data[0]['beratung_daily'];
				$this->view->beratung_wtl = $anlage5_data[0]['beratung_wtl'];
				$this->view->beratung_time = $anlage5_data[0]['beratung_time'];
				$this->view->nurse1_daily = $anlage5_data[0]['nurse1_daily'];
				$this->view->nurse1_wtl = $anlage5_data[0]['nurse1_wtl'];
				$this->view->nurse1_time = $anlage5_data[0]['nurse1_time'];
				$this->view->nurse2_daily = $anlage5_data[0]['nurse2_daily'];
				$this->view->nurse2_wtl = $anlage5_data[0]['nurse2_wtl'];
				$this->view->nurse2_time = $anlage5_data[0]['nurse2_time'];
				$this->view->nurse3_daily = $anlage5_data[0]['nurse3_daily'];
				$this->view->nurse3_wtl = $anlage5_data[0]['nurse3_wtl'];
				$this->view->nurse3_time = $anlage5_data[0]['nurse3_time'];
				$this->view->doctor1_daily = $anlage5_data[0]['doctor1_daily'];
				$this->view->doctor1_wtl = $anlage5_data[0]['doctor1_wtl'];
				$this->view->doctor1_time = $anlage5_data[0]['doctor1_time'];
				$this->view->doctor2_daily = $anlage5_data[0]['doctor2_daily'];
				$this->view->doctor2_wtl = $anlage5_data[0]['doctor2_wtl'];
				$this->view->doctor2_time = $anlage5_data[0]['doctor2_time'];
				
			}
			else
			{
				$this->view->id = '';
				
				$this->view->erst_daily = "einmalig";
				$this->view->beratung_daily = "Kalendertäglich";
				$this->view->nurse1_daily = "1-3x tägl.";
				$this->view->nurse2_daily = "nach Bedarf";
				$this->view->doctor1_daily = "nach Bedarf";
				$this->view->doctor2_daily = "nach Bedarf";
				
			}
			
			if($this->getRequest()->isPost())
			{
			
			
			}
		
		}

		public function painquestionnaireAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$painq_form = new Application_Form_PainQuestionnaire();
		
			/* ----------------------Patient Info & Tab menus START-------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();

			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$this->view->patientname = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] ;
			$this->view->birthdate = $patientinfo['birthd'];
			/* ---------------------- POST -------------------------- */
			if($this->getRequest()->isPost())
			{
			    
			    
			    if(strlen($_POST['pain']['date']) > 0)
			    {
			        $form_date = date("Y-m-d",strtotime($_POST['pain']['date']));
			    }
			    else
			    {
			        $form_date = date("Y-m-d",time());
			    }
			    	
			    
			    if(strlen($_POST['pain']['time']) > 0)
			    {
			        $form_time = date("H:i:s",strtotime($_POST['pain']['time']));
			    }
			    else
			    {
			        $form_time = date("H:i:s",time());
			    }
			    	
			    $pain_date = $form_date.' '.$form_time;
			    
			    
				if($_POST['submit_status'] == 'save')
				{
					
					/* ---------------------- Insert form  -------------------------- */
					if(strlen($_REQUEST['formid']) == '0')
					{
						$post = $_POST['pain'];
						$inserted_id = $painq_form->insert($ipid, $post);
						$formid = $inserted_id;
					}
					/* ---------------------- Update form  -------------------------- */
					else
					{
						$formid = $_REQUEST['formid'];
						$post = $_POST['pain'];
						$post['ipid'] = $ipid;
						$painq_form->update($formid, $post);
					}

					/* ---------------------- gen pdf on save to track each change  ------------------- */
					$post['post_data'] = $_POST['pain'];
					$post['post_data']['formid'] = $formid;
					$post['pain_date'] = $pain_date;
					$post['patientname'] = $this->view->patientname ;
					$post['birthdate'] = $this->view->birthdate ;
					
					//generate human body image from post data
					$tmp_file = $this->temporary_image_create($_POST['pain']['human'], 'base64', 'human-huge');
					$tmp_file = basename($tmp_file);
					$post['image'] = '<img border="0" src="' . str_replace(array('/_ipad', '_ipad'), array('', ''), RES_FILE_PATH) . '/temp/' . $tmp_file . '" width="600" />';
					
					$gen_pdf = $this->generate_pdf($post, 'painquestionnaire_save', 'painquestionnaire_pdf.html');
					

					/* ---------------------- Redirect to verlauf  ------------------- */
					$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
					exit;
				}
				/* ---------------------- Generate pdf  ------------------- */
				else if($_POST['submit_status'] == 'pdf')
				{
					$post['post_data'] = $_POST['pain'];
					$post['post_data']['formid'] = $_REQUEST['formid'];
					$post['pain_date'] = $pain_date;
					$post['patientname'] = $this->view->patientname ;
					$post['birthdate'] = $this->view->birthdate ;
					
					//generate human body image from post data
					$tmp_file = $this->temporary_image_create($_POST['pain']['human'], 'base64', 'human-huge');
					$tmp_file = basename($tmp_file);
					$post['image'] = '<img border="0" src="' . str_replace(array('/_ipad', '_ipad'), array('', ''), RES_FILE_PATH) . '/temp/' . $tmp_file . '" width="600" />';
		
					$gen_pdf = $this->generate_pdf($post, 'painquestionnaire', 'painquestionnaire_pdf.html');
					exit;
				}
			}

			
							
			/* -------------- Get patient saved data ---------------------------- */
			if(strlen($_REQUEST['formid']) > '0' && $_REQUEST['formid'] != "0" )
			{
				/* -------------- Pain questionnaire - retirive form data	---------------------------- */
				$form_data = PainQuestionnaire::get_pain_questionnaire($_REQUEST['formid']);
				if($form_data)
				{
				    if($form_data[0]['date'] !="0000-00-00 00:00:00"){
    					$pain['date'] = date("d.m.Y",strtotime($form_data[0]['date']));
    					$pain['time'] = date("H:iY",strtotime($form_data[0]['date']));
				    }else{
    					$pain['date'] = date("d.m.Y",strtotime($form_data[0]['create_date']));
    					$pain['time'] = date("H:iY",strtotime($form_data[0]['create_date']));
				    }

					//1
					$pain['intensity'] = $form_data[0]['intensity'];
					//2
					$pain['quality'] =explode(',', $form_data[0]['quality']);
					//ISPC-2802,Elena,16.03.2021
                    $pain['quality_comment'] = $form_data[0]['quality_comment'];
					//3
					$pain['localisation'] =$form_data[0]['localisation']; // human
					$pain['point_location'] =explode(',', $form_data[0]['point_location']);
					$pain['point_location_comment'] = $form_data[0]['point_location_comment'];
					//4
					$pain['perception'] =explode(',', $form_data[0]['perception']);
					//5
					$pain['expression'] =explode(',', $form_data[0]['expression']);
					$pain['expression_other'] = $form_data[0]['expression_other'];
					//6
					$pain['relief'] =explode(',', $form_data[0]['relief']);
					$pain['relief_comment'] = $form_data[0]['relief_comment'];

					$pain['formid'] = $_REQUEST['formid'];
				}
			} else {
					$pain['formid'] = 0;
			}
			
			/* -------------- Display form data---------------------------- */
			$this->view->pain = $pain;
			
			/* -------------- Pain questionnaire file history	---------------------------- */
			$fileupload = new PatientFileUpload();
			$form_files = $fileupload->get_pain_questionnaire_file_data($ipid);
			
			$users_ids[] = '999999999999';
			foreach($form_files as $k_file => $v_file)
			{
			    $users_ids[] = $v_file['create_user'];
			}
			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			$this->view->pain_questionnaire_files_history = $form_files;
			
		}
		
		
		/**
		 *
		 * @deprecated, use Pms_CommonData::temporary_files_delete
		 */
		private function temporary_files_delete($folder, $age = '86400')
		{
			if($handle = opendir($folder))
			{
				while(false !== ($entry = readdir($handle)))
				{
					$filename = $folder . '/' . $entry;
					$mtime = @filemtime($filename);
					if(is_file($filename) && $mtime && (time() - $mtime > $age))
					{
						@unlink($filename);
					}
				}
				closedir($handle);
			}
		}
		/**
		 *
		 * @deprecated, use Pms_CommonData::temporary_image_create
		 */
		private function temporary_image_create($data, $type = 'svg', $stype = 'human')
		{
			$tmp_file = uniqid('img' . rand(1000, 9999));
			$tmp_file_path = APPLICATION_PATH . '/../public/temp/' . $tmp_file . '.png';
			$tmp_folder = APPLICATION_PATH . '/../public/temp';
			$this->temporary_files_delete($tmp_folder, '7200'); //delete all files older than 2 hours
		
			switch($type)
			{
				case 'svg':
					if(get_magic_quotes_gpc())
					{
						$data = stripslashes($data);
					}
		
					$data = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>' . $data;
		
					$handle = fopen($tmp_file_path, 'w+');
					fclose($handle);
		
					$im = new Imagick();
					$im->readImageBlob($data);
					$im->setImageFormat("jpeg");
					$im->writeImage($tmp_file_path);
					$im->clear();
					$im->destroy();
		
					break;
		
				case 'base64':
					$data = substr($data, stripos($data, '64,') + 3);
					$data = base64_decode($data);
		
					//transparent answer image
					$im = @imagecreatefromstring($data);
					$rgb = imagecolorat($im, 1, 1);
					$colors = imagecolorsforindex($im, $rgb);
		
					if($colors['alpha'] > 0 && $colors['red'] == 0)
					{
						//stupid hack CHANGE THIS!!!!!
						imagecolortransparent($im, imagecolorallocatealpha($im, 0, 0, 0, 127));
					}
					elseif($colors['red'] == 255)
					{
						imagecolortransparent($im, imagecolorallocatealpha($im, 255, 255, 255, 127));
					}
		
					//human body background
					if($stype == 'human-big')
					{
						$bg = imagecreatefromjpeg(APPLICATION_PATH . '/../public/images/human_big.jpg');
					}
					else if($stype == 'human-huge')
					{
						$bg = imagecreatefrompng(APPLICATION_PATH . '/../public/images/painlocation.png');
					}
					else
					{
						$bg = imagecreatefromjpeg(APPLICATION_PATH . '/../public/images/human_small.jpg');
					}
		
					if($stype == 'human-big')
					{
						imagecopymerge($bg, $im, 0, 0, 0, 0, 850, 600, 100);
					}
					else
					{
						imagecopymerge($bg, $im, 0, 0, 0, 0, 550, 388, 100);
					}
		
					imagepng($bg, $tmp_file_path);
					imagedestroy($bg);
		
					break;
		
				default:
					break;
			}
		
			if(is_readable($tmp_file_path))
			{
				return $tmp_file_path;
			}
			else
			{
				return false;
			}
		}
		
		

		public function daystructureAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			
			$pds_form = new Application_Form_PatientDayStructure();
			$pdsa_form = new Application_Form_PatientDayStructureActions();
		
			/* ----------------------Patient Info & Tab menus START-------------------------- */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
		
				

			/* -------------- day structure  - retirive form data	---------------------------- */
			$form_data = PatientDayStructure::get_patient_day_structure($ipid);
 
			//$form_id = $_REQUEST['formid']; // if needed
				
			/* -------------- day structure action  - retirive form data	---------------------------- */
			if($form_data){
			
				$form_id = $form_data[0]['id'];
				$form_data_items = PatientDayStructureActions::get_patient_day_structure_action($ipid,$form_id);
			
				foreach($form_data_items as $k_item =>$item_data){
					if(strlen($item_data['start']) > 0 ){
						$form_items[$item_data['id']]['start'] = date("H:i",strtotime($item_data['start']));
					}
					if(strlen($item_data['end']) > 0 ){
						$form_items[$item_data['id']]['end'] = date("H:i",strtotime($item_data['end']));
					}
					$form_items[$item_data['id']]['description'] = $item_data['description'];
					$form_items[$item_data['id']]['measures'] = $item_data['measures'];
				}
			} 
			
			$form_items = array_values($form_items);
			
			$this->view->form_id = $form_id;
			$this->view->form_items = $form_items;
			
			
			/* ---------------------- POST -------------------------- */
			if($this->getRequest()->isPost())
			{
				if(strlen($_POST['save']) > 0 )
				{
					/* ---------------------- Insert form  -------------------------- */
					if(strlen($_POST['form_id']) == '0')
					{
						$post = $_POST;
						$post['ipid'] = $ipid;
						$inserted_id = $pds_form->insert($post);
						$formid = $inserted_id;

						if($inserted_id){
							$post['ipid'] = $ipid;
							$post['form_id'] = $inserted_id;
							$insert_actions = $pdsa_form->insert($post);
						}
					}
					/* ---------------------- Update form  -------------------------- */
					else
					{
						$formid = $_POST['form_id'];
						$post = $_POST;
						$post['ipid'] = $ipid;
						$update = $pds_form->update($post);
						
						$insert_actions = $pdsa_form->insert($post);
					}
		
					/* ---------------------- gen pdf on save to track each change  ------------------- */
					$post_form_data_items = PatientDayStructureActions::get_patient_day_structure_action($ipid,$post['form_id']);
					
					foreach($post_form_data_items as $k_item =>$post_item_data){
						if(strlen($post_item_data['start']) > 0 ){
							$pdf_post['item'][$post_item_data['id']]['start'] = date("H:i",strtotime($post_item_data['start']));
						}
						if(strlen($post_item_data['end']) > 0 ){
							$pdf_post['item'][$post_item_data['id']]['end'] = date("H:i",strtotime($post_item_data['end']));
						}
						$pdf_post['item'][$post_item_data['id']]['description'] = $post_item_data['description'];
					}
					
					$pdf_post['form_id'] = $post['form_id'];
					$pdf_post['preview'] = $post['preview'];
					$gen_pdf = $this->generate_pdf($pdf_post, 'daystructure_save', 'daystructure_pdf.html');
						
		
 					/* ---------------------- Redirect to verlauf  ------------------- */
					$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
					exit;
				}
				/* ---------------------- Generate pdf  ------------------- */
				else if(strlen($_POST['pdf']) > 0 )
				{
					$post = $_POST;
					$post['ipid'] = $ipid;
					$gen_pdf = $this->generate_pdf($post, 'daystructure', 'daystructure_pdf.html');
					exit;
				}
			}
			
			/* -------------- Get patient saved data ---------------------------- */
			if(strlen($form_id) > '0' && $form_id != "0" )
			{
		
				/* -------------- Pain questionnaire file history	---------------------------- */
				$fileupload = new PatientFileUpload();
				$form_files = $fileupload->get_daystructure_file_data($ipid, $form_id);
		
				$users_ids[] = '999999999999';
				foreach($form_files as $k_file => $v_file)
				{
					$users_ids[] = $v_file['create_user'];
				}
				$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
				$this->view->day_structure_files_history = $form_files;
			} 
		}
		

		public function treatmentweeksAction()
		{
			setlocale(LC_ALL, 'de_DE');
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$sapv = new SapvVerordnung();
			$userid = $logininfo->userid;
			$client_details = Pms_CommonData::getClientData($clientid);
		
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			
			if($_GET['flg'] == 'invoice_created')
			{
			    $this->view->error_message = $this->view->translate("invoice was created");
			} 
			elseif($_GET['flg'] == 'anlage5_created')
			{
			    $this->view->error_message = $this->view->translate("anlage 5 was created");
			} 
			elseif($_GET['flg'] == 'select_weeks')
			{
			    $this->view->message_type = "error";
			    $this->view->error_message = $this->view->translate("Please select period !!!");
			} 
			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$this->view->first_name = $patientinfo['first_name'];
			$this->view->last_name = $patientinfo['last_name'];
			$this->view->birthd = $patientinfo['birthd'];
			$this->view->patient_first_name = $patientinfo['first_name'];
			$this->view->patient_last_name = $patientinfo['last_name'];
			$this->view->patient_dob = $patientinfo['birthd'];
		
			// Client Details
			$this->view->sapv_team = $client_details[0]['team_name'];
			
			//patient HEALTH INSURANCE START
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
				
			$this->view->hi_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			//patient HEALTH INSURANCE END
			
			//Client User details
			$client_users = User::getClientsUsers($clientid,true);
			foreach($client_users as $k_cuser_det => $v_cuser_det)
			{
			    $users_data[$v_cuser_det['id']] = $v_cuser_det['user_title'].' '.$v_cuser_det['first_name'].' '.$v_cuser_det['last_name'];
			}
            $this->view->users_data =$users_data;
			
			//get sapv data START
			$sapv_array = SapvVerordnung::get_all_sapvs($ipid);
			foreach($sapv_array as $k_sapv => $v_sapv)
			{
				$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
			
				if($v_sapv['status'] == '1' && $v_sapv['verordnungam'] != '0000-00-00 00:00:00')
				{
					$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
				}
				else
				{
					$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
				}
			
				if(empty($patient_sapv_days))
				{
					$patient_sapv_days = array();
				}
			
				$patient_sapv_days = array_merge($patient_sapv_days, PatientMaster::getDaysInBetween($start, $end));
				

				if(empty($temp_sapv_days))
				{
					$temp_sapv_days = array();
				}

				
				$temp_sapv_days = PatientMaster::getDaysInBetween($start, $end);
					
				
				foreach($temp_sapv_days as $k_tmp_sapv => $v_tmp_sapv)
				{
					if(!$days2bra_options[$v_tmp_sapv])
					{
						$days2bra_options[$v_tmp_sapv] = array();
					}
						
					$current_bra_options = explode(',', $v_sapv['bra_options']);
					$days2bra_options[$v_tmp_sapv] = array_merge($days2bra_options[$v_tmp_sapv], $current_bra_options);
						
					asort($days2bra_options[$v_tmp_sapv]);
					$days2bra_options[$v_tmp_sapv] = array_values(array_unique($days2bra_options[$v_tmp_sapv]));
				}
			}
			//get sapv data END

			
			
			array_walk($patient_sapv_days, function(&$value) {
				$value = date('d.m.Y', strtotime($value));
			});
			
			//patient days
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = array($ipid);
		
			//beware of date d.m.Y format here
			$patient_days = Pms_CommonData::patients_days($conditions);
			// patient active days
			$patient['overall']['active_days'] = $patient_days[$ipid]['active_days'];
			// patient hospital days
			$patient['overall']['hospital_days']= $patient_days[$ipid]['hospital']['real_days_cs']; // client settings applied
			// patient hospiz days
			$patient['overall']['hospiz_days']= $patient_days[$ipid]['hospiz']['real_days_cs']; // client settings applied
			// patient sapv days
			$patient['overall']['sapv_days'] = $patient_sapv_days;
			// patient treatment days -  active, no hospital, no hospiz
			$patient['overall']['treatment_days'] = $patient_days[$ipid]['treatment_days']; // client settings applied
			
			
			
			// add to treatment days -  hospiz days -->     ISPC-1424 BRA - Abrechnung TWEAK // 21.07.2015 
            if(empty($patient['overall']['hospiz_days'])){
                $patient['overall']['hospiz_days'] = array();
            }
            if(empty($patient['overall']['treatment_days'])){
                $patient['overall']['treatment_days'] = array();
            }
            $patient['overall']['treatment_days'] = array_merge($patient['overall']['treatment_days'],$patient['overall']['hospiz_days']);
            
            
			
			// All active sapv, no hospital no hospiz
			$patient['overall']['sapv_treatment_days'] = array_intersect($patient['overall']['treatment_days'], $patient['overall']['sapv_days']);
			
			$treated_days_all_ts = $patient['overall']['sapv_treatment_days'];
			array_walk($treated_days_all_ts, function(&$value) {
				$value = strtotime($value);
			});
			
			asort($treated_days_all_ts, SORT_NUMERIC);
		
			$treated_days_all_ts = array_values(array_unique($treated_days_all_ts));
			
			$patient['overall']['valid_days'] = $treated_days_all_ts;
			array_walk($patient['overall']['valid_days'], function(&$value) {
				$value = date('d.m.Y', $value);
			});
			
			// All active sapv, including hospital and hospiz
			$patient['overall']['sapv_treatment_days_hh'] = array_intersect($patient['overall']['active_days'], $patient['overall']['sapv_days']);
			
			$treated_days_all_hh = $patient['overall']['sapv_treatment_days_hh'];
			array_walk($treated_days_all_hh, function(&$value) {
				$value = strtotime($value);
			});
			
			asort($treated_days_all_hh, SORT_NUMERIC);
		
			$treated_days_all_hh = array_values(array_unique($treated_days_all_hh));
			
			$patient['overall']['valid_hh_days'] = $treated_days_all_hh;
			array_walk($patient['overall']['valid_hh_days'], function(&$value) {
				$value = date('d.m.Y', $value);
			});
			
			
			// create weeks from this days 
			$week_nr = 0;
			$i_nr = 1;
			$weeks_data = array();
			
			foreach ($patient['overall']['valid_days'] as $vd=>$vday){
				$weeks_data['sapv'][$week_nr][] = $vday;
				if($days2bra_options[date('Y-m-d',strtotime($vday))]){
					foreach($days2bra_options[date('Y-m-d',strtotime($vday))] as $br=>$bra_opt){
						if(!in_array($bra_opt,$weeks_data['bra'][$week_nr]) ){
							$weeks_data['bra'][$week_nr][] = $bra_opt; 
						}
					}
				}
				
				if(is_int(($i_nr)/7)){
					$week_nr++;
				}
				
				$i_nr++;
				
			}
			
			// for each week show hospital days
			foreach($weeks_data['sapv'] as $s_week_nr => $week_days_array){
				foreach($patient['overall']['hospital_days'] as $k=>$kh_day){
					if( strtotime($week_days_array[0]) < strtotime($kh_day) && strtotime($kh_day) < strtotime(end($week_days_array)) ){
						$weeks_data['kh'][$s_week_nr][] =$kh_day;
					}
				}
			}
			
			$this->view->weeks_data = $weeks_data; 
 
            $saved_bra_anlage_5_array = BraAnlage5::get_bra_anlage5($ipid);
            foreach ($saved_bra_anlage_5_array as $k=>$val){
                if($val['status'] == "1"){
                    $invoiced_anlage[] = $val['id'];
                }
                $saved_bra_anlage_5[$val['id']] = $val;
            }
            
            
            $this->view->saved_bra_anlage_5 = $saved_bra_anlage_5;

            $saved_bra_anlage_5_weeks = BraAnlage5Weeks::get_bra_anlage5weeks($ipid);
            
            foreach($saved_bra_anlage_5_weeks as $kw =>$vw){
                $anlage5_weeks[$vw['anlage5_id']][] = $vw;
                if(in_array($vw['anlage5_id'],$invoiced_anlage)){
                    $anlage5_weeks_invoiced[$vw['anlage5_id']][] = $vw;
                    $invoiced_period_weeks[] = date('d.m.Y',strtotime($vw['start_date'])).'-'.date('d.m.Y',strtotime($vw['end_date']));
                } else{
                    $not_invoiced_period_weeks[] = date('d.m.Y',strtotime($vw['start_date'])).'-'.date('d.m.Y',strtotime($vw['end_date']));
                }
                $weeks_by_anlage5[date('d.m.Y',strtotime($vw['start_date'])).'-'.date('d.m.Y',strtotime($vw['end_date']))] [] =$vw['anlage5_id']; 
            }
            
            $this->view->anlage5_weeks= $anlage5_weeks;
            $this->view->anlage5_weeks_invoiced= $anlage5_weeks_invoiced;

            $this->view->not_invoiced_period_weeks= array_unique($not_invoiced_period_weeks);
            $this->view->invoiced_period_weeks= array_unique($invoiced_period_weeks);
            $this->view->weeks_by_anlage5 = $weeks_by_anlage5;
 
            
			
		}

		public function braanlage5Action()
		{
			setlocale(LC_ALL, 'de_DE');
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_REQUEST['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$sapv = new SapvVerordnung();
			$p_list = new PriceList();
			$userid = $logininfo->userid;

			/* ################ */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
		
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/* ################ */

			/* -------------------- Client Details ---------------------------------- */ 
			$client_details = Pms_CommonData::getClientData($clientid);
			$anlage_data['client']['team_name'] = $client_details[0]['team_name'];
			$anlage_data['client']['ik'] = $client_details[0]['institutskennzeichen'];
			$anlage_data['client']['bsnr'] = $client_details[0]['betriebsstattennummer'];
			$anlage_data['client']['id'] = $clientid;

			/* -------------------- Patient Details ---------------------------------- */
			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);
			$this->view->first_name = $patientinfo['first_name'];
			$this->view->last_name = $patientinfo['last_name'];
			$this->view->birthd = $patientinfo['birthd'];
			
			$anlage_data['patient']['first_name'] = $patientinfo['first_name'];
			$anlage_data['patient']['last_name'] = $patientinfo['last_name'];
			$anlage_data['patient']['dob'] = $patientinfo['birthd'];
			
			//TODO-4101 Ancuta 07.05.2021
			$pat_loc = new PatientLocation();
			$active_pat_loc = $pat_loc->getActiveLocationPatInfo($ipid);
			
			if ($active_pat_loc) {
			    $anlage_data['patient']['zip'] = $active_pat_loc['0']['zip'];
			    $anlage_data['patient']['city'] = $active_pat_loc['0']['city'];
			}
			else
			{
			    $anlage_data['patient']['zip'] = "";
			    $anlage_data['patient']['city'] = "";
			}
			//$anlage_data['patient']['zip'] = $patientinfo['zip'];
			//$anlage_data['patient']['city'] = $patientinfo['city'];
			//-- 
			
			//$anlage_data['patient']['address'] = $patientinfo['first_name'].', '.$patientinfo['last_name'].'<br />'.$patientinfo['street1'].'<br />'.$patientinfo['zip'].' '.$patientinfo['city'];
			$anlage_data['patient']['address'] = $patientinfo['first_name'].' '.$patientinfo['last_name'].'<br />'.$patientinfo['street1'].'<br />'.$patientinfo['zip'].' '.$patientinfo['city'];
		
			/* -------------------- Patient Health insurance --------------------------- */
			$healthinsu_array  =array();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

			if(!empty($healthinsu_array)){
			    $patient_hi = $healthinsu_array[0];
			    
    			$insucom = new HealthInsurance();
    			$insucomarray = $insucom->getCompanyinfofromId($patient_hi['companyid']);
                if(!empty($insucomarray)){
                    $company_details = $insucomarray[0];
                }
                
    			$anlage_data['patient']['insurance_company'] = $patient_hi['company_name'];
    			$anlage_data['patient']['insurance_number'] = $patient_hi['insurance_no'];
    			// TODO-1925 Ancuta 19.11.2018
    			$anlage_data['patient']['insurance_address'] = "";
    			$anlage_data['patient']['insurance_address'] .= ( ! empty($patient_hi['company_name'])           ) ? $patient_hi['company_name']                    : $company_details['name'];
    			$anlage_data['patient']['insurance_address'] .= ( ! empty($patient_hi['ins_insurance_provider']) ) ? "<br />".$patient_hi['ins_insurance_provider'] :  (  !empty($company_details['insurance_provider']) ? "<br/>".$company_details['insurance_provider'] : "" ) ;
    			$anlage_data['patient']['insurance_address'] .= ( ! empty($patient_hi['ins_street'])             ) ? "<br />".$patient_hi['ins_street']             : "<br />".$company_details['street1'];
    			
    			if(!empty($patient_hi['ins_zip']) && !empty($patient_hi['ins_city']) ) {
                    $anlage_data['patient']['insurance_address'] .=  "<br />".$patient_hi['ins_zip'].' '.$patient_hi['ins_city'];
    			} else {
                    $anlage_data['patient']['insurance_address'] .=  "<br />".$company_details['zip'].' '.$company_details['city'];
    			}

    			// if patient is NOT private patient - then use health insurance address
    			if($patient_hi['privatepatient'] == "0"){
    			    $anlage_data['patient']['address'] = $anlage_data['patient']['insurance_address'];
    			}
    			
			}
			
			/* -------------------- Patient discharge data --------------------------- */
			$discharge_methods = DischargeMethod::getDischargeMethod($clientid);
			
			$dead_abbr = array("tod","verstorben");
			foreach($discharge_methods as $k=> $dis_data){
				if(in_array(strtolower($dis_data['abbr']),$dead_abbr  )){
					$dead_methods[] = $dis_data['id'];
				}
			}
			if(empty($dead_methods)){
				$dead_methods[] = "999999999";
			}
			
			$discharge_details = PatientDischarge::getPatientDischarge($ipid);
			$anlage_data['patient']['discharge_details'] = $discharge_details[0];
			
			if(!empty($discharge_details) && in_array($discharge_details[0]['discharge_method'],$dead_methods )){
				$anlage_data['patient']['date_of_death'] = date('d.m.Y',strtotime($discharge_details[0]['discharge_date']));
			} else{
				$anlage_data['patient']['date_of_death'] ="";
			}
			
			
			/* -------------------- Patient SAPV data --------------------------- */
			$sapv_array = SapvVerordnung::get_all_sapvs($ipid);
			
			if(!empty($sapv_array)){
				$anlage_data['patient']['sapv_first_day'] = date('d.m.Y',strtotime($sapv_array[0]['verordnungam']));
			}
			
			foreach($sapv_array as $k_sapv => $v_sapv)
			{
				$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
			
				if($v_sapv['status'] == '1' && $v_sapv['verordnungam'] != '0000-00-00 00:00:00')
				{
					$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
				}
				else
				{
					$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
				}
			
				if(empty($patient_sapv_days))
				{
					$patient_sapv_days = array();
				}
			
				$patient_sapv_days = array_merge($patient_sapv_days, PatientMaster::getDaysInBetween($start, $end));
				

				if(empty($temp_sapv_days))
				{
					$temp_sapv_days = array();
				}

				
				$temp_sapv_days = PatientMaster::getDaysInBetween($start, $end);
					
				
				foreach($temp_sapv_days as $k_tmp_sapv => $v_tmp_sapv)
				{
					if(!$days2bra_options[$v_tmp_sapv])
					{
						$days2bra_options[$v_tmp_sapv] = array();
					}
 
					$current_bra_options = explode(',', $v_sapv['bra_options']);
					$days2bra_options[$v_tmp_sapv] = array_merge($days2bra_options[$v_tmp_sapv], $current_bra_options);
					
					$days2approved_date[date('d.m.Y',strtotime($v_tmp_sapv))] = $v_sapv['approved_date'];
					$days2approved_number[date('d.m.Y',strtotime($v_tmp_sapv))] = $v_sapv['approved_number'];
						
					asort($days2bra_options[$v_tmp_sapv]);
					$days2bra_options[$v_tmp_sapv] = array_values(array_unique($days2bra_options[$v_tmp_sapv]));
				}
			}
			//get sapv data END

			
			/* -------------------- Users --------------------------- */
			$master_groups = array('4', '5');
			
			$client_user_groups_first = Usergroup::getUserGroups($master_groups);
			foreach($client_user_groups_first as $k_group_f => $v_group_f)
			{
				$master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
			}
			
			$client_users = User::getClientsUsers($clientid);

			$nurse_users = array();
			$doctor_users = array();
			foreach($client_users as $k_cuser_det => $v_cuser_det)
			{
			    $user_address[$v_cuser_det['id']] = $v_cuser_det['zip'].' '.$v_cuser_det['city'];
			    
				$master_user_details[$v_cuser_det['id']] = $v_cuser_det;
				if(in_array($v_cuser_det['groupid'], $master2client['5']))
				{
				    if(strlen(trim($user_address[$v_cuser_det['id']])) > 3 ){
    					$anlage_data['user']['nurse'][$v_cuser_det['id']] = $v_cuser_det['first_name'].' '.$v_cuser_det['last_name'].', '. $user_address[$v_cuser_det['id']];
				    } else{
    					$anlage_data['user']['nurse'][$v_cuser_det['id']] = $v_cuser_det['first_name'].' '.$v_cuser_det['last_name'];
				    }
					$anlage_data['user']['nurse_users'][] = $v_cuser_det['id'];
				}
				else if(in_array($v_cuser_det['groupid'], $master2client['4']))
				{
				    if(strlen(trim($user_address[$v_cuser_det['id']])) > 3 ){
    					$anlage_data['user']['doctor'][$v_cuser_det['id']] =  $v_cuser_det['user_title'].' '.$v_cuser_det['first_name'].' '.$v_cuser_det['last_name'].', '.$user_address[$v_cuser_det['id']];
				    } else{
    					$anlage_data['user']['doctor'][$v_cuser_det['id']] =  $v_cuser_det['user_title'].' '.$v_cuser_det['first_name'].' '.$v_cuser_det['last_name'];
				    }
				    
					$anlage_data['user']['doctor_users'][] = $v_cuser_det['id'];
				}
			}
			
			
			//get performance shortcuts
			$system_shortcuts = Pms_CommonData::get_prices_shortcuts();
			$bra_shortcuts['bra_sapv'] = $system_shortcuts['bra_sapv'];
			$bra_shortcuts['bra_sapv_weg'] = $system_shortcuts['bra_sapv_weg'];
			
			if(empty($_REQUEST['anlage_id']) && strlen($_REQUEST['anlage_id']) == 0){
    			/* ----------------------Transfer data from treatment weeks tot anlage5 -------------------------- */
    			if($this->getRequest()->isPost())
    			{
    			    if(strlen($_POST['transfer2anlage5']) > 0 ){
    			    	if(!empty($_POST['weeks'])){
        			    	$invoice_data = $_POST;
        			    	$anlage_data['anlage_id'] = 0;
    			        } else{
    			        	$invoice_data = array();
    			        	$this->redirect(APP_BASE . 'patientformnew/treatmentweeks?id=' . $_REQUEST['id'].'&flg=select_weeks');
    			        	exit;
    			        }
    			    }
    			}
    			$anlage5_invoice_data['date'] = date('d.m.Y');
    			// retrive data from post - in treatment weeks page
    			if(!empty($invoice_data['invoice'])){
    			    
    			    $anlage5_invoice_data['hospital_days'] = 0;
    			    
    				foreach($invoice_data['invoice'] as $week_number =>$week_data){
    				    if(in_array($week_number,$_POST['weeks']))
    				    {
        				    $invoice['dates']['start'] [ ] = $week_data['start_date'];
        				    $invoice['dates']['end'] [ ] = $week_data['end_date'];
        				    
        				    $posted_week_data[$week_number] = $week_data;
    				    }
    				}
    
    				$anlage5_invoice_data['start_date'] = $invoice['dates']['start']['0'];
    				$anlage5_invoice_data['end_date'] = end($invoice['dates']['end']);
    				
    				$anlage_5_period['start'] = $invoice['dates']['start']['0'];
    				$anlage_5_period['end']  = end($invoice['dates']['end']);
    				
    				$master_price_list = $p_list->get_period_price_list($anlage5_invoice_data['start_date'], $anlage5_invoice_data['end_date']);
    
    				foreach($invoice_data['invoice'] as $week_number =>$week_data){
    				    if(in_array($week_number,$_POST['weeks']))
    				    {
        				    $anlage5_invoice_data['hospital_days'] += $week_data['hospital_days'];
        				    
        				    foreach($week_data['products'] as $k=>$prod_id){
        				        $prod[strtolower($prod_id)][] = $master_price_list[date('Y-m-d',strtotime($anlage5_invoice_data['start_date']))][0][strtolower($prod_id)]['price'] ;
        				        $prod_sum[strtolower($prod_id)] += $master_price_list[date('Y-m-d',strtotime($anlage5_invoice_data['start_date']))][0][strtolower($prod_id)]['price'] ;
        				    }
        				    
        				    if(!empty($week_data['doctor_weg']) && strlen($week_data['doctor_weg']) > 0 && in_array("PCT03a",$week_data['products'])){
        				        $weg_data['pct03a']['pct03a.'.$week_data['doctor_weg']][] = $master_price_list[date('Y-m-d',strtotime($anlage5_invoice_data['start_date']))][0]['weg'.$week_data['doctor_weg']]['doctor'];
        				    } 
        				    if(!empty($week_data['doctor_weg']) && strlen($week_data['doctor_weg']) > 0 && in_array("PCT04a",$week_data['products'])){
        				        $weg_data['pct04a']['pct04a.'.$week_data['doctor_weg']][] = $master_price_list[date('Y-m-d',strtotime($anlage5_invoice_data['start_date']))][0]['weg'.$week_data['doctor_weg']]['doctor'];
        				    } 
        				    if(!empty($week_data['nurse_weg']) && strlen($week_data['nurse_weg']) > 0 && in_array("PCT03b",$week_data['products'])){
        				        $weg_data['pct03b']['pct03b.'.$week_data['nurse_weg']][] = $master_price_list[date('Y-m-d',strtotime($anlage5_invoice_data['start_date']))][0]['weg'.$week_data['nurse_weg']]['nurse'];
        				    } 
        				    if(!empty($week_data['nurse_weg']) && strlen($week_data['nurse_weg']) > 0 && in_array("PCT04b",$week_data['products'])){
        				        $weg_data['pct04b']['pct04b.'.$week_data['nurse_weg']][] = $master_price_list[date('Y-m-d',strtotime($anlage5_invoice_data['start_date']))][0]['weg'.$week_data['nurse_weg']]['nurse'];
        				    } 
    				    }
    				}
    				$anlage5_invoice_data['items']['overall_amount'] = 0;
    				foreach($bra_shortcuts['bra_sapv'] as $bra_shortcut){
    				    if(count($prod[$bra_shortcut]) > 0){
    				    
    				    $anlage5_invoice_data['items'][$bra_shortcut]['amount'] = count($prod[$bra_shortcut]);
    				    $anlage5_invoice_data['items'][$bra_shortcut]['price'] =$master_price_list[date('Y-m-d',strtotime($anlage5_invoice_data['start_date']))][0][strtolower($bra_shortcut)]['price'];
    				    $anlage5_invoice_data['items'][$bra_shortcut]['sum'] = Pms_CommonData::str2num($prod_sum[$bra_shortcut]);
    				    $anlage5_invoice_data['items']['overall_amount'] += $prod_sum[$bra_shortcut];
    				    
    				    foreach($weg_data[$bra_shortcut]  as $weg=>$weg_datax ){
    				        
        				    $anlage5_invoice_data['items'][$bra_shortcut][$weg]['amount'] = count($weg_datax);
        				    foreach($weg_datax as $k=>$weg_price){
        				        
            				    $anlage5_invoice_data['items'][$bra_shortcut][$weg]['price'] = $weg_price;
            				    $anlage5_invoice_data['items'][$bra_shortcut][$weg]['sum'] += $weg_price;
        				        $anlage5_invoice_data['items'][$bra_shortcut][$weg]['sum']= Pms_CommonData::str2num($anlage5_invoice_data['items'][$bra_shortcut][$weg]['sum']);
            				    $anlage5_invoice_data['items']['overall_amount'] += $weg_price;
        				    }
    				    }
    				    
    				    $anlage5_invoice_data['items']['overall_amount'] = Pms_CommonData::str2num($anlage5_invoice_data['items']['overall_amount']);
    				    }
    				    
    				    
    				}
    				
    				// contact form in period
    				$contact_forms_array = ContactForms::get_contact_form_period($ipid,$anlage_5_period);
    					
    				if(!empty($contact_forms_array)){
    				    $anlage_data['first_visit']['date'] = date('d.m.Y',strtotime($contact_forms_array[0]['billable_date']));
    				
    				    if(in_array($contact_forms_array[0]['create_user'],$anlage_data['user']['doctor_users'])){
    				        $anlage_data['first_visit']['doctor_user'] = trim($client_users[$contact_forms_array[0]['create_user']]['zip'].' '.$client_users[$contact_forms_array[0]['create_user']]['city'].' '.$client_users[$contact_forms_array[0]['create_user']]['user_title'].' '.$client_users[$contact_forms_array[0]['create_user']]['first_name'].' '.$client_users[$contact_forms_array[0]['create_user']]['last_name']);
    				    }
    				
    				    if(in_array($contact_forms_array[0]['create_user'],$anlage_data['user']['nurse_users'])){
    				        $nurse_address = $client_users[$contact_forms_array[0]['create_user']]['zip'].' '.$client_users[$contact_forms_array[0]['create_user']]['city'].',';
    				        if(strlen(trim($nurse_address))>3){
    				            $anlage_data['first_visit']['nurse_user'] = trim($nurse_address.' '.$client_users[$contact_forms_array[0]['create_user']]['first_name'].' '.$client_users[$contact_forms_array[0]['create_user']]['last_name']);
    				        } else{
    				            $anlage_data['first_visit']['nurse_user'] = trim($client_users[$contact_forms_array[0]['create_user']]['first_name'].' '.$client_users[$contact_forms_array[0]['create_user']]['last_name']);
    				        }
    				    }
    				}
    					
    			}
    			
			} elseif(!empty($_REQUEST['anlage_id']) && $_REQUEST['anlage_id'] != '0'){
			/* ----------------------Get saved Data -------------------------- */
			  $anlage5_id = $_REQUEST['anlage_id'];
			  $anlage_data['anlage_id'] = $anlage5_id;
			  $saved_data['invoice_data'] = BraAnlage5::get_bra_anlage5_by_id($ipid,$anlage5_id);
			  
			  if( $saved_data['invoice_data']['visit_date'] != "1970-01-01"){
    			  $anlage_data['first_visit']['date'] = date('d.m.Y',strtotime($saved_data['invoice_data']['visit_date']));
			  } else {
    			  $anlage_data['first_visit']['date'] = "";
			  }
			  $anlage_data['first_visit']['doctor_user'] =  $saved_data['invoice_data']['visit_doctor'];
			  $anlage_data['first_visit']['nurse_user'] =  $saved_data['invoice_data']['visit_nurse'];
			  
			  $anlage5_invoice_data['hospital_days'] = $saved_data['invoice_data']['hospital_days'];
			  $anlage5_invoice_data['start_date'] = date('d.m.Y',strtotime($saved_data['invoice_data']['start_date']));
			  $anlage5_invoice_data['end_date'] = date('d.m.Y',strtotime($saved_data['invoice_data']['end_date']));

			  $anlage5_invoice_data['doctor_data'] = $saved_data['invoice_data']['doctor_data'];
			  $anlage5_invoice_data['nurse_data_i'] = $saved_data['invoice_data']['nurse_data_i'];
			  $anlage5_invoice_data['nurse_data_ii'] = $saved_data['invoice_data']['nurse_data_ii'];
			  $anlage5_invoice_data['nurse_data_iii'] = $saved_data['invoice_data']['nurse_data_iii'];
			  $anlage5_invoice_data['status'] = $saved_data['invoice_data']['status'];

			  
			  if(date('Y-m-d',strtotime($saved_data['invoice_data']['date'])) != "1970-01-01"  ){
    			  $anlage5_invoice_data['date'] = date('d.m.Y',strtotime($saved_data['invoice_data']['date']));
			  } else{
    			  $anlage5_invoice_data['date'] = date('d.m.Y',time());
			  }
			  $anlage5_invoice_data['location_data'] = explode(",",$saved_data['invoice_data']['location_data']);
			  
			  
			  $saved_data['weeks'] = BraAnlage5Weeks::get_bra_anlage5weeks($ipid,$anlage5_id);
			  $posted_week_data = $saved_data['weeks'];
			  
			  $saved_data['products'] = BraAnlage5Products::get_bra_anlage5products($ipid,$anlage5_id);
			  $prod_sh="";
			  foreach($saved_data['products'] as $k=>$prod_ar){
			      
			      if(strpos($prod_ar['shortcut'],'.')){
			          $prod_sh = explode('.',$prod_ar['shortcut']);
			          $anlage5_invoice_data['items'][$prod_sh[0]][$prod_ar['shortcut']]['amount'] =  $prod_ar['qty']; 
			          $anlage5_invoice_data['items'][$prod_sh[0]][$prod_ar['shortcut']]['price'] =  $prod_ar['price']; 
			          $anlage5_invoice_data['items'][$prod_sh[0]][$prod_ar['shortcut']]['sum'] =  $prod_ar['total']; 
			      } else{
    			      $anlage5_invoice_data['items'][$prod_ar['shortcut']]['amount'] = $prod_ar['qty']; 
    			      $anlage5_invoice_data['items'][$prod_ar['shortcut']]['price'] = $prod_ar['price']; 
    			      $anlage5_invoice_data['items'][$prod_ar['shortcut']]['sum'] = $prod_ar['total']; 
			      }
			  
			      $anlage5_invoice_data['items']['overall_amount'] += $prod_ar['total'];
			  }
			}
			
			$anlage_data['invoice_data'] = $anlage5_invoice_data;
			$anlage_data['weeks_data'] = $posted_week_data;
			
			$this->view->anlage_data = $anlage_data;
			
			/* ---------------------- POST -------------------------- */
			if($this->getRequest()->isPost())
			{
			    $anlage5_form = new Application_Form_BraAnlage5();
			    $anlage5_weeks_form = new Application_Form_BraAnlage5Weeks();
			    $anlage5_products_form = new Application_Form_BraAnlage5Products();
			    
				if(strlen($_POST['save']) > 0 )
				{
 					/* ---------------------- Insert form  -------------------------- */
					if($_POST['anlage_id'] == '0')
					{
						$post = $_POST['anlage_data']['invoice'];
						$inserted_id = $anlage5_form->insert($ipid,$post);

						$formid = $inserted_id;
			
						if($inserted_id){
							/* --- insert week data --------*/ 
						    $post['anlage5_id'] = $inserted_id;
							$post['week_data'] = $_POST['week_data'];
							$insert_weeks = $anlage5_weeks_form->insert($ipid,$post);
							
							/* --- insert product data --------*/ 
							$post['product_data'] = $_POST['product_data'];
							$insert_products= $anlage5_products_form->insert($ipid,$post);
							
						}
						$this->redirect(APP_BASE . 'patientformnew/treatmentweeks?id=' . $_REQUEST['id'].'&flg=anlage5_created');
					}
					/* ---------------------- Update form  -------------------------- */
					else
					{
						$post = $_POST['anlage_data']['invoice'];
						$post['anlage_id'] = $_POST['anlage_id'];
						$update = $anlage5_form->update($ipid,$post);
						$this->redirect(APP_BASE . 'patientformnew/treatmentweeks?id=' . $_REQUEST['id'].'&flg=anlage5_created');
					}
				}
				else if(strlen($_POST['create_invoice']) > 0 )
				{
				    /*##########################################################*/
				    /*##########################################################*/
				    /*##########################################################*/
				    /*##########################################################*/
				    /*##########################################################*/
				    /*##########################################################*/
				    
				    
				    /* ---------------------- Insert form  -------------------------- */
				    if($_POST['anlage_id'] == '0')
				    {
				        $post = $_POST['anlage_data']['invoice'];
				        $post['create_invoice']  = $_POST['create_invoice'];
				        $inserted_id = $anlage5_form->insert($ipid,$post);
				    
				        if($inserted_id){
				            /* --- insert week data --------*/
				            $post['anlage5_id'] = $inserted_id;
				            $post['week_data'] = $_POST['week_data'];
				            $insert_weeks = $anlage5_weeks_form->insert($ipid,$post);
				            	
				            /* --- insert product data --------*/
				            $post['product_data'] = $_POST['product_data'];
				            $insert_products= $anlage5_products_form->insert($ipid,$post);
				            	
				        }
				    $invoice_anlage5_id =  $inserted_id;
				    }
				    /* ---------------------- Update form  -------------------------- */
				    else
				    {
				        $post = $_POST['anlage_data']['invoice'];
				        $post['anlage_id'] = $_POST['anlage_id'];
				        $post['create_invoice']  = $_POST['create_invoice'];
				        $update = $anlage5_form->update($ipid,$post);
				        $invoice_anlage5_id =  $_POST['anlage_id'];
				    }
				    				    
				    // save invoice
				    				    
// 				    $days2approved_date[$v_tmp_sapv] = $v_sapv['approved_date'];
// 				    $days2approved_number[$v_tmp_sapv] = $v_sapv['approved_number'];

				    $post['anlage_data']['id'] =  $invoice_anlage5_id;
				    $post['anlage_data']['client'] =  $anlage_data['client'];
				    $post['anlage_data']['patient'] =  $anlage_data['patient'];
				    $post['anlage_data']['patient']['ipid'] =  $ipid;
				    $post['anlage_data']['user'] =  $anlage_data['user'];
				    $post['anlage_data']['invoice']['items'] = $_POST['product_data'];
				    $post['anlage_data']['sapv']['approved_date'] =  $days2approved_date[$_POST['anlage_data']['invoice']['start_date']];
				    $post['anlage_data']['sapv']['approved_number'] =  $days2approved_number[$_POST['anlage_data']['invoice']['start_date']];;
				    
				    $bra_invoice_forms = new Application_Form_BraInvoices();
				    $invoice_id =  $bra_invoice_forms->insert_invoice($post);
				    
				    $this->redirect(APP_BASE . 'patientformnew/treatmentweeks?id=' . $_REQUEST['id'].'&flg=invoice_created');
				}
				/* ---------------------- Generate pdf  ------------------- */
				else if(strlen($_POST['pdf']) > 0 )
				{
				    
					$post = $_POST;
					$post['ipid'] = $ipid;
					
					$post['anlage_data']['client'] =  $anlage_data['client'];
					$post['anlage_data']['patient'] =  $anlage_data['patient'];
					$post['anlage_data']['user'] =  $anlage_data['user'];
					
					$post['anlage_data']['invoice']['items'] = $_POST['product_data'];
					$gen_pdf = $this->generate_pdf($post, 'bra_anlage_5', 'bra_anlage_5_pdf.html');
					exit;
				}
			}
		}
		
		
		public function kvnoeducationAction()
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $decid = Pms_Uuid::decrypt($_GET['id']);
		    $ipid = Pms_CommonData::getIpId($decid);
		    $patientmaster = new PatientMaster();
		    $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
		    $this->_helper->viewRenderer->setNoRender();
		    $tm = new TabMenus();
		    $this->view->tabmenus = $tm->getMenuTabs();
 
		    /* --------------------------------User select------------------------------------- */
		    $patientmaster = new PatientMaster();
		    $patientinfo = $patientmaster->getMasterData($decid, 0);
		
		    $this->view->patientname = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] . " \r\n " . $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "&nbsp;" . $patientinfo['city'];
		    $this->view->birthdate = $patientinfo['birthd'];
		    $this->view->addmissiondate = date('d.m.Y', strtotime($patientinfo['admission_date']));
		    $this->view->maxdate = date('d.m.Y');
		    $this->view->isDischarged = $patientinfo['isdischarged'];
		    $this->view->isstandby = $patientinfo['isstandby'];
		    $this->view->isstandbydelete = $patientinfo['isstandbydelete'];
		
		 
		    //red box data #1
		    $phelathinsurance = new PatientHealthInsurance();
		    $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);
		
		    $this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
		    $this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
		    $this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
		    $this->view->kvnumber = $healthinsu_array[0]['kvk_no'];
		
		    //cityofclient
		    $loguser = Doctrine::getTable('User')->find($logininfo->userid);
		    if($loguser)
		    {
		        $loguserarray = $loguser->toArray();
		
		        $this->view->lastname = $loguserarray['last_name'];
		        $this->view->firstname = $loguserarray['first_name'];
		
		        $this->view->betriebsstatten_nr = $loguserarray['betriebsstattennummer'];
		        $this->view->arzt_nr = $loguserarray['LANR'];
		    }
		
		    $clientdata = Pms_CommonData::getClientData($logininfo->clientid);
		    $post['clientname'] = $clientdata[0]['client_name'];
		    $post['clientfax'] = $clientdata[0]['fax'];
		    $post['clientphone'] = $clientdata[0]['phone'];
		    $post['clientemail'] = $clientdata[0]['emailid'];
		
		    $this->view->cityofclient = $clientdata[0]['city'];
		    $this->view->clientname = $clientdata[0]['client_name'];
		    $this->view->team_name = $clientdata[0]['team_name'];
		    $this->view->has_vollversorgung = $patientinfo['vollversorgung'];
		    $this->view->client_bsnr = $clientdata[0]['betriebsstattennummer'];
		
		    /* ---------------------- POST -------------------------- */
		 
	        $post['kv_header']['insurance_company_name'] = $healthinsu_array[0]['company_name'];;
	        $post['kv_header']['patientname'] =  $patientinfo['last_name'] . ", " . $patientinfo['first_name'] . " \r\n " . $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "  " . $patientinfo['city'];
	        $post['kv_header']['patbirth'] =  $patientinfo['birthd'];
	        $post['kv_header']['kvnumber'] = $healthinsu_array[0]['kvk_no'];
	        $post['kv_header']['insurance_no'] = $healthinsu_array[0]['insurance_no'];
	        $post['kv_header']['insurance_status'] = $healthinsu_array[0]['insurance_status'];
	        $post['kv_header']['betriebsstatten_nr'] = $loguserarray['betriebsstattennummer'];
	        $post['kv_header']['arzt_nr'] = $loguserarray['LANR'];
	        $post['topdatum'] = date('d.m.Y');
	 
	        $this->generatePdfNew(3, $post, 'kvno_education', "kvno_education_pdf.html");
		        
		}
		
		public function anlage2Action(){
				
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
				
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
		
			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();
		
			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}
		
			$this->view->multiplestamps_option = $multiplestamps_option;
		
		
			/* --------------------------------User select------------------------------------- */
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
		
			$users = new User();
			$userarray = $users->getUserByClientid($logininfo->clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();
		
			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;
		
			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				$showselect = 1; // show select to all
			}
		
			$this->view->showselect = $showselect;
		
		
		
			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
		
			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;
		
		
			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);
		
			$this->view->patientname = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] . " \r\n " . $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "&nbsp;" . $patientinfo['city'];
			$this->view->birthdate = $patientinfo['birthd'];
			$this->view->admission_date = date('d.m.Y', strtotime($patientinfo['admission_date']));
			$this->view->maxdate = date('d.m.Y');
			$this->view->isDischarged = $patientinfo['isdischarged'];
			$this->view->isstandby = $patientinfo['isstandby'];
			$this->view->isstandbydelete = $patientinfo['isstandbydelete'];
		
			$patient_readmission = new PatientReadmission();
			$patient_admissions = $patient_readmission->getPatientReadmission($ipid, '1');
		
			if(!empty($patient_admissions) && count($patient_admissions) > 1)
			{
				$this->view->admission = "2";
			}
			else
			{
				$this->view->admission = "1";
			}
		
			/* ------------------- Maindiagnosis------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
		
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
		
			if(count($dianoarray) > 0)
			{
				$diagnosis = $dianoarray[0]['icdnumber'];
				$diagnosis_date = date('m.Y', strtotime($dianoarray[0]['create_date']));
					
			}
		
			if(strlen($diagnosis) > 0)
			{
				$this->view->icd_diagnosis = $diagnosis;
				$this->view->diagnosis_date = $diagnosis_date;
			}
			else
			{
				$this->view->icd_diagnosis = "";
				$this->view->diagnosis_date = "";
			}
					
			//red box data #1
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);
		
			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];
		
			//cityofclient
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
		
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
		
				$this->view->betriebsstatten_nr = $loguserarray['betriebsstattennummer'];
				$this->view->arzt_nr = $loguserarray['LANR'];
			}
			
			/* -------------- Anlage2 DOCUMENTATION FILE HISTORY	---------------------------- */
			
			
			if(strlen($_REQUEST['fid']) > 0 )
				{
					$anlage_id = $_REQUEST['fid'];
					$saved_anlage2 = new Anlage2();
					$anlage2_details = $saved_anlage2->get_anlage2_details($anlage_id,$ipid);
					
					$this->view->id = $anlage2_details[0]['id'];

					if($anlage2_details[0]['admission_date']!= "1970-01-01"){
    					$this->view->admission_date = date('d.m.Y', strtotime($anlage2_details[0]['admission_date']));
					} else{
    					$this->view->admission_date = "";
					}
					
					$this->view->admission = $anlage2_details[0]['admission'];
					$this->view->location = $anlage2_details[0]['location'];
					$this->view->patient_care = $anlage2_details[0]['patient_care'];
					$this->view->members_included= $anlage2_details[0]['members_included'];
					$this->view->icd_diagnosis= $anlage2_details[0]['icd_diagnosis'];
					
					if($anlage2_details[0]['diagnosis_date'] != "0000-00-00" ){
    					$this->view->diagnosis_date = date('m.Y',strtotime($anlage2_details[0]['diagnosis_date']));
					}else{
    					$this->view->diagnosis_date = "";
					}					
					if(count($anlage2_details[0]['participants']) > 0 )
					{
						$this->view->participants = explode(',' ,$anlage2_details[0]['participants']);
					}
					$this->view->pain_therapy = $anlage2_details[0]['pain_therapy'];
					if(count($anlage2_details[0]['name_therapy']) > 0 )
					{
						$this->view->name_therapy = explode(',' ,$anlage2_details[0]['name_therapy']);
					}
					$this->view->pain_level = $anlage2_details[0]['pain_level'];
					if(count($anlage2_details[0]['medication_form']) > 0 )
					{
						$this->view->medication_form = explode(',' ,$anlage2_details[0]['medication_form']);
					}
		
					$this->view->wound_therapy = $anlage2_details[0]['wound_therapy'];
					
					//print_r($post['id']);	exit;
					$fileupload = new PatientFileUpload();
					$form_files = $fileupload->get_anlage2_file_data($ipid,$anlage_id);
						
					$users_ids[] = '999999999999';
					foreach($form_files as $k_file => $v_file)
					{
						$users_ids[] = $v_file['create_user'];
					}
					$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
					
					$this->view->anlage2_files_history = $form_files;
					//print_r($this->view->anlage2_files_history);exit;
								
				}
		
			/* -------------------------Post data----------------------------------------------------- */
			
			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['kv_header']['patientname'] = $_POST['kv_header']['patientname'];
		
				if($_POST['stampusers'] > 0)
				{
		
					if($multiplestamps_option === true)
					{
		
						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];
		
						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
		
						$post['kv_header']['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
						$post['kv_header']['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
					}
					else
					{
		
						$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
						if($userst)
						{
							$uarray = $userst->toArray();
							$post['kv_header']['arzt_nr'] = $uarray['LANR'];
							$post['kv_header']['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
						}
					}
				}
		
				$post['stamp_block'] = nl2br(htmlspecialchars($_POST['stamp_block']));
				$post['stamp_block'] = strip_tags(str_replace('<br />', "%r%", $post['stamp_block']));
				
		
				$anlage2_form = new Application_Form_Anlage2();
				
				if($_POST['post_status'] == "save" )
				{
					if( strlen($_POST['saved_id']) == '0')
					{
						$anlage2_save_data = $anlage2_form->insert_anlage2($_POST);
					
						$post = $_POST;
						$post['ipid'] = $ipid;
						$post['formid'] = $anlage2_save_data;
						$post['id'] = $anlage2_save_data;
					}
				
					else if (strlen($_POST['saved_id']) > '0')
					{					
						$anlage2_upd_data = $anlage2_form->update_anlage2($_POST);
					
						$post = $_POST;
						$post['ipid'] = $ipid;
						$post['formid'] = $_POST['saved_id'];
						$post['id'] =$_POST['saved_id'];
					}

					
					if(strlen($_POST['admission_date'])>0){
					    $post['admission_date'] = $_POST['admission_date'];
					} else{
					    $post['admission_date'] = "__.__.____";
					}
					
					if(strlen($_POST['diagnosis_date'])>0){
					    $post['diagnosis_date'] = $_POST['diagnosis_date'];
					} else{
					    $post['diagnosis_date'] = "__.____";
					}
				
					$this->generate_pdf($post, 'anlage2_save', "anlage2_pdf.html");
					
					/* ---------------------- Redirect to verlauf  ------------------- */
					$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
					exit;
					
				}
					
				else if($_POST['post_status'] == "pdf_print")
			
				{	
				    $post = $_POST;
				    $post['stamp_block'] = nl2br(htmlspecialchars($_POST['stamp_block']));
				    $post['stamp_block'] = strip_tags(str_replace('<br />', "%r%", $post['stamp_block']));
				    
				    
				    if(strlen($_POST['admission_date'])>0){
				        $post['admission_date'] = $_POST['admission_date'];
				    } else{
				        $post['admission_date'] = "__.__.____";
				    }
				    
				    if(strlen($_POST['diagnosis_date'])>0){
				        $post['diagnosis_date'] = $_POST['diagnosis_date'];
				    } else{
				        $post['diagnosis_date'] = "__.____";
				    }
				    
					$this->generatePdfNew(3, $post, 'anlage2', "anlage2_pdf.html");
					
					
				}
				
			}
			
		
		}
		
		public function anlage3nordrheinAction(){
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
		
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
		
			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();
		
			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}
		
			$this->view->multiplestamps_option = $multiplestamps_option;
		
		
			/* --------------------------------User select------------------------------------- */
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
		
			$users = new User();
			$userarray = $users->getUserByClientid($logininfo->clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();
		
			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;
		
			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				$showselect = 1; // show select to all
			}
		
			$this->view->showselect = $showselect;
		
		
		
			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
		
			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;
		
		
			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);
		
			$this->view->patientname = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] . " \r\n " . $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "&nbsp;" . $patientinfo['city'];
			$this->view->birthdate = $patientinfo['birthd'];
			$this->view->admission_date = date('d.m.Y', strtotime($patientinfo['admission_date']));
			$this->view->maxdate = date('d.m.Y');
			$this->view->isDischarged = $patientinfo['isdischarged'];
			$this->view->isstandby = $patientinfo['isstandby'];
			$this->view->isstandbydelete = $patientinfo['isstandbydelete'];
		
		if($patientinfo['isdischarged'] == '1')
			{
				// discharge_methods
				$dis = new DischargeMethod();
				$discharge_methods = $dis->getDischargeMethod($clientid, 0);

				foreach($discharge_methods as $dischargeM)
				{
					if($dischargeM['abbr'] == "TOD" || $dischargeM['abbr'] == "TODNA")
					{
						$death_methods[] = $dischargeM['id'];
						$death_description = $dischargeM['description'];
					}
				}

				// discharge_locations
				$dl = new DischargeLocation();
				$discharge_locations = $dl->getDischargeLocation($clientid);

				foreach($discharge_locations as $k => $dl_value)
				{
					$discharge_location[$dl_value['id']] = $dl_value['type'];
				}

				$patient_discharge_q = Doctrine_Query::create()
					->select("*,AES_DECRYPT(discharge_comment,'" . Zend_Registry::get('salt') . "') as discharge_comment")
					->from('PatientDischarge')
					->where("ipid='" . $ipid . "' and isdelete='0'");
				$patient_discharge = $patient_discharge_q->fetchArray();

				$discharge_date = date('d.m.Y', strtotime($patient_discharge[0]['discharge_date']));

				if(in_array($patient_discharge[0]['discharge_method'], $death_methods))
				{
					$death_date = date('d.m.Y', strtotime($patient_discharge[0]['discharge_date']));
					
				}

				$this->view->discharge_date = $discharge_date;
				$this->view->death_date = $death_date;
				
			}
		
			//red box data #1
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);
		
			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];
		
			//cityofclient
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
		
				$this->view->lastname = $loguserarray['last_name'];
				$this->view->firstname = $loguserarray['first_name'];
		
				$this->view->betriebsstatten_nr = $loguserarray['betriebsstattennummer'];
				$this->view->arzt_nr = $loguserarray['LANR'];
			}
			
			
			if(strlen($_REQUEST['fid']) > 0 )
			{
				$anlage_id = $_REQUEST['fid'];
				$saved_anlage3 = new Anlage3();
				$anlage3_details = $saved_anlage3->get_anlage3_details($anlage_id,$ipid);
				//print_r($anlage2_details);exit;
				$this->view->id = $anlage3_details[0]['id'];

				if($anlage3_details[0]['discharge_date'] != "1970-01-01"){
				    $this->view->discharge_date = date('d.m.Y',strtotime($anlage3_details[0]['discharge_date']));
				} else{
				    $this->view->discharge_date = "";
				}
				$this->view->discharge_reason = $anlage3_details[0]['discharge_reason'];
				
				if($anlage3_details[0]['death_date'] != "1970-01-01"){
    				$this->view->death_date = date('d.m.Y',strtotime($anlage3_details[0]['death_date']));
				} else{
    				$this->view->death_date = "";
				}
				$this->view->checkbox_death = $anlage3_details[0]['checkbox_death'];
				$this->view->discharge_location= $anlage3_details[0]['discharge_location'];
				$this->view->members_included= $anlage3_details[0]['members_included'];

				//print_r($post['id']);	exit;
				$fileupload = new PatientFileUpload();
				$form_files = $fileupload->get_anlage2_file_data($ipid,$anlage_id);
				
				$users_ids[] = '999999999999';
				foreach($form_files as $k_file => $v_file)
				{
					$users_ids[] = $v_file['create_user'];
				}
				$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
					
				$this->view->anlage2_files_history = $form_files;
				
				$fileupload = new PatientFileUpload();
				$form_files = $fileupload->get_anlage3_file_data($ipid,$anlage_id);
				
				$users_ids[] = '999999999999';
				foreach($form_files as $k_file => $v_file)
				{
					$users_ids[] = $v_file['create_user'];
				}
				$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
					
				$this->view->anlage3_files_history = $form_files;
				
			}
			/* -------------------------Post data----------------------------------------------------- */
			if($this->getRequest()->isPost())
			{
				$post = $_POST;
				$post['kv_header']['patientname'] = $_POST['kv_header']['patientname'];
		
				if($_POST['stampusers'] > 0)
				{
		
					if($multiplestamps_option === true)
					{
		
						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];
		
						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
		
						$post['kv_header']['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
						$post['kv_header']['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
					}
					else
					{
		
						$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
						if($userst)
						{
							$uarray = $userst->toArray();
							$post['kv_header']['arzt_nr'] = $uarray['LANR'];
							$post['kv_header']['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
						}
					}
				}
		
				$post['stamp_block'] = nl2br(htmlspecialchars($_POST['stamp_block']));
				$post['stamp_block'] = strip_tags(str_replace('<br />', " --\\-- ", $post['stamp_block']));
		
				$anlage3_form = new Application_Form_Anlage3nordrhein();
					
				if($_POST['post_status'] == "save")
				{
					 if(strlen($_POST['saved_id']) == '0')
					{						
						$anlage3_save_data = $anlage3_form->insert_anlage3($_POST);
						
						$post = $_POST;
						$post['ipid'] = $ipid;
						$post['formid'] = $anlage3_save_data;
						$post['id'] = $anlage3_save_data;
					}
					
					else if(strlen($_POST['saved_id']) > '0')
					{
						$anlage3_upd_data = $anlage3_form->update_anlage3($_POST);
												
						$post = $_POST;
						$post['ipid'] = $ipid;
						$post['formid'] = $_POST['saved_id'];
						$post['id'] = $_POST['saved_id'];
 
					}
					
				    if(strlen($post['discharge_date'])>0){
    				    $post['discharge_date']	= $post['discharge_date'];
				    } else{
    				    $post['discharge_date']	= "__.__.____";
				    }
				    if(strlen($post['death_date'])>0){
    				    $post['death_date']	= $post['death_date'];
				    } else{
    				    $post['death_date']	= "__.__.____";
				    }
				   
					$this->generate_pdf($post, 'anlage3nordrhein_save', "anlage3nordrhein_pdf.html");
					
					/* ---------------------- Redirect to verlauf  ------------------- */
					$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
					exit;
				}	
				else if($_POST['post_status'] == "pdf_print")
				{
				    $post = $_POST;
				    if(strlen($post['discharge_date'])>0){
    				    $post['discharge_date']	= $post['discharge_date'];
				    } else{
    				    $post['discharge_date']	= "__.__.____";
				    }
				    if(strlen($post['death_date'])>0){
    				    $post['death_date']	= $post['death_date'];
				    } else{
    				    $post['death_date']	= "__.__.____";
				    }
				    
				    $post['stamp_block'] = nl2br(htmlspecialchars($_POST['stamp_block']));
				    $post['stamp_block'] = strip_tags(str_replace('<br />', " --\\-- ", $post['stamp_block']));
				    
					$this->generatePdfNew(3, $post, 'anlage3nordrhein', "anlage3nordrhein_pdf.html");
				}
					
			}
		
		}
		
	   public function 	emergencyplansapvAction(){
	       $logininfo = new Zend_Session_Namespace('Login_Info');
	       $clientid = $logininfo->clientid;
	       $decid = Pms_Uuid::decrypt($_GET['id']);
	       $ipid = Pms_CommonData::getIpId($decid);
	       
	       $patientmaster = new PatientMaster();
	       $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
	       
	       $tm = new TabMenus();
	       $this->view->tabmenus = $tm->getMenuTabs();
	       
	       /*--------------- Patient  details --------------------------------------*/
	       $patientmaster = new PatientMaster();
	       $patientinfo = $patientmaster->getMasterData($decid, 0);
	       
	       $patient['name'] = $patientinfo['first_name'] . " " . $patientinfo['last_name'];
	       $patient['birthd'] = $patientinfo['birthd'];
	       $form['patient'] = $patient;
	       
	       
	       /* -------------- Diagnosis  - Get Main Diagnosis --------------------------------- */
	       $abb = "'HD'";
	       $dg = new DiagnosisType();
	       $ddarr = $dg->getDiagnosisTypes($clientid, $abb);
	       if(!$ddarr[0]['id'])
	       {
	           $ddarr[0]['id'] = 0;
	       }
	       $comma = "";
	       foreach($ddarr as $key1 => $val1)
	       {
	           $stam_diagno = array();
	           $diagns = new PatientDiagnosis();
	           $stam_diagno = $diagns->getFinalData($ipid, $val1['id']);
	       
	           $dia = 1;
	           foreach($stam_diagno as $key => $val)
	           {
	               if(strlen($val['diagnosis']) > 0)
	               {
	                   if(strlen($val['icdnumber']) > 0)
	                   {
	                       $other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
	                   }
	                   else
	                   {
	                       $other_diagnosis .= $comma . $val['diagnosis'];
	                   }
	                   $dia++;
	                   $comma = ",";
	               }
	           }
	       }
	       $form['data']['main_diagnosis'] = $other_diagnosis;
	       

	       
	       // get saved data
	       $existing_form_data = EmergencyPlanSapv::get_emergency_plan_sapv($ipid);
	       if($existing_form_data){
	           $form['data'] = $existing_form_data; 
	       } 
	       $this->view->form_data = $form;
	       
	       /* ---------------------- POST -------------------------- */
	       if($this->getRequest()->isPost())
	       {
	           
	           $eps_form = new Application_Form_EmergencyPlanSapv();
	           
	           if(strlen($_POST['save_form']) > 0 )
	           {
	               /* ---------------------- Insert form  -------------------------- */
	               if(strlen($_POST['formid']) == '0')
	               {
	             
	                   $post = $_POST['form'];
	                   $inserted_id = $eps_form->insert($ipid,$post);
	                   $formid = $inserted_id;
 
	                   $form_tabname = "emergency_plan_sapv"; 
	                   $cust = new PatientCourse ();
	                   $cust->ipid = $ipid;
	                   $cust->course_date = date("Y-m-d H:i:s", time());
	                   $cust->course_type = Pms_CommonData::aesEncrypt("F");
	                   $cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Notfallplan wurde erstellt'));
	                   $cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
	                   $cust->user_id = $logininfo->userid;
	                   $cust->save();
	               }
	               /* ---------------------- Update form  -------------------------- */
	               else
	               {
	                   $post = $_POST['form'];
	                   $post['formid'] = $_POST['formid'];
	                   $update = $eps_form->update($ipid,$post);
	                   
	                   $form_tabname = "emergency_plan_sapv";
	                   $cust = new PatientCourse ();
	                   $cust->ipid = $ipid;
	                   $cust->course_date = date("Y-m-d H:i:s", time());
	                   $cust->course_type = Pms_CommonData::aesEncrypt("F");
	                   $cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Notfallplan wurde editiert'));
	                   $cust->tabname = Pms_CommonData::aesEncrypt('' . $form_tabname . '');
	                   $cust->user_id = $logininfo->userid;
	                   $cust->save();
	               }
	       
	               /* ---------------------- Redirect to verlauf  ------------------- */
	               $this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
	               exit;
	           }
	           /* ---------------------- Generate pdf  ------------------- */
	           else if(strlen($_POST['pdf']) > 0 )
	           {
	               $post = $_POST;
	               $post['form_data']['patient']  =   $form['patient'];
	               $post['form_data']['data']  =   $post['form']['data'];
	               $gen_pdf = $this->generate_pdf($post, 'emergencyplansapv', 'emergencyplansapv_pdf.html');
	               exit;
	           }
	       }
	   }
		

        public function rpterminationAction(){
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpid($decid);
            $userid = $logininfo->userid;
            $clientid = $logininfo->clientid;
            $this->view->clientid = $clientid;
            
            $rptermination = new RpTermination();
            $rp_termination_form = new Application_Form_RpTermination();
            $ph = new PatientHealthInsurance();
            $pc = new ContactPersonMaster();
            $sapv = new SapvVerordnung();
            $pat_loc = new PatientLocation();
            $pat_diagnosis = new PatientDiagnosis();
            $family_doctor = new FamilyDoctor();
            $nursing = new PatientPflegedienste();
            $client = Pms_CommonData::getClientData($clientid);
            
            /* ----------------------Patient Info & Tab menus-------------------------- */
            $patientmaster = new PatientMaster();
            $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
            $tm = new TabMenus();
            $this->view->tabmenus = $tm->getMenuTabs();
            
            $patient_details = $patientmaster->getMasterData($decid, 0);
            $this->view->patient_details = $patient_details;
            
            if ($this->getRequest()->isPost()) {
                
                if ($_POST['save'] && empty($_POST['fid'])) {
                    $post = $_POST;
                    $rp_termination_id = $rp_termination_form->insert($post, $ipid);
                    
                    if ($rp_termination_id) {
                        $this->redirect(APP_BASE . 'patientformnew/rptermination?id=' . $_REQUEST['id']);
                        exit();
                    } else {
                        $this->retain_values($_POST);
                    }
                } else if ($_POST['save'] && strlen($_POST['fid']) > 0) {
                        $post = $_POST;
                        $rp_termination = $rp_termination_form->update($post, $ipid);
                        $this->redirect(APP_BASE . 'patientformnew/rptermination?id=' . $_REQUEST['id']);
                        exit();
                        
                } else if($_POST['pdf']){
                    $post = $_POST;
                    $gen_pdf = $this->generate_pdf($post, 'rptermination', 'rptermination_pdf.html');
                    exit;
                }
            }
            
            // get saved termination
            $termination_data = $rptermination->get_patient_rp_termination($ipid);
            if ($termination_data) {
                $termination_id = $termination_data['id'];
                $this->view->termination_id = $termination_data['id'];
                $this->view->formid = $termination_data['id'];
            }
           // print_r($termination_data);exit;
            //if (($termination_id > 0 && ! $this->getRequest()->isPost())) {
            //ISPC-2690 pct.1 Lore 16.10.2020   
            if (($termination_id > 0 && ! $this->getRequest()->isPost()) && $_REQUEST['reset_button'] != 'RESET') {
                    
                $rpa_id = $termination_id;
                $patient_rp_termination_data = $termination_data;
                
                // process data before we bind it to $this-view
                if ($patient_rp_termination_data['rp_pat_birthd'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_pat_birthd'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_pat_birthd']));
                } else {
                    $patient_rp_termination_data['rp_pat_birthd'] = '';
                }
                
                if ($patient_rp_termination_data['rp_start_date_erst'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_start_date_erst'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_start_date_erst']));
                } else {
                    $patient_rp_termination_data['rp_start_date_erst'] = '';
                }
                
                if ($patient_rp_termination_data['rp_date_erst'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_date_erst'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_date_erst']));
                } else {
                    $patient_rp_termination_data['rp_date_erst'] = '';
                }
                
                if ($patient_rp_termination_data['rp_start_date_folge'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_start_date_folge'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_start_date_folge']));
                } else {
                    $patient_rp_termination_data['rp_start_date_folge'] = '';
                }
                
                if ($patient_rp_termination_data['rp_date_folge'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_date_folge'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_date_folge']));
                } else {
                    $patient_rp_termination_data['rp_date_folge'] = '';
                }
                
                if ($patient_rp_termination_data['rp_last_day_sapv'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_last_day_sapv'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_last_day_sapv']));
                } else {
                    $patient_rp_termination_data['rp_last_day_sapv'] = '';
                }
                
                if ($patient_rp_termination_data['rp_last_hosp_date'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_last_hosp_date'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_last_hosp_date']));
                } else {
                    $patient_rp_termination_data['rp_last_hosp_date'] = '';
                }
                
                if ($patient_rp_termination_data['sapv_support_date'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['sapv_support_date'] = date('d.m.Y', strtotime($patient_rp_termination_data['sapv_support_date']));
                } else {
                    $patient_rp_termination_data['sapv_support_date'] = '';
                }
                
                
                $patient_rp_termination_data['rp_sapv_erst'] = explode(',', $termination_data['rp_sapv_erst']);
                $patient_rp_termination_data['rp_sapv_folge'] = explode(',', $termination_data['rp_sapv_folge']);
                
                
                $patient_rp_termination_data['rp_sapv_not_needed'] = $patient_rp_termination_data['rp_sapv_not_needed'];
    
                $patient_rp_termination_data['rp_sapv_ended'] = $patient_rp_termination_data['rp_sapv_ended'];
                if ($patient_rp_termination_data['rp_sapv_ended_day'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_sapv_ended_day'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_sapv_ended_day']));
                } else {
                    $patient_rp_termination_data['rp_sapv_ended_day'] = '';
                }
                
                $patient_rp_termination_data['rp_hospitalization'] = $patient_rp_termination_data['rp_hospitalization'];
                if ($patient_rp_termination_data['rp_hospitalization_day'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_hospitalization_day'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_hospitalization_day']));
                } else {
                    $patient_rp_termination_data['rp_hospitalization_day'] = '';
                }
                $patient_rp_termination_data['rp_patient_death'] = $patient_rp_termination_data['rp_patient_death'];
                if ($patient_rp_termination_data['rp_patient_death_day'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_patient_death_day'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_patient_death_day']));
                } else {
                    $patient_rp_termination_data['rp_patient_death_day'] = '';
                }
    
                $patient_rp_termination_data['rp_in_hospiz'] = $patient_rp_termination_data['rp_in_hospiz'];
                if ($patient_rp_termination_data['rp_in_hospiz_day'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_in_hospiz_day'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_in_hospiz_day']));
                } else {
                    $patient_rp_termination_data['rp_in_hospiz_day'] = '';
                }
                $patient_rp_termination_data['rp_sapv_accordance'] = $patient_rp_termination_data['rp_sapv_accordance'];
                if ($patient_rp_termination_data['rp_sapv_accordance_day'] != '0000-00-00 00:00:00') {
                    $patient_rp_termination_data['rp_sapv_accordance_day'] = date('d.m.Y', strtotime($patient_rp_termination_data['rp_sapv_accordance_day']));
                } else {
                    $patient_rp_termination_data['rp_sapv_accordance_day'] = '';
                }
                
                $patient_rp_termination_data['rp_power_requirement_a'] = $patient_rp_termination_data['rp_power_requirement_a'];
                $patient_rp_termination_data['rp_power_requirement_b'] = $patient_rp_termination_data['rp_power_requirement_b'];
                
                $this->retain_values($patient_rp_termination_data);
                $this->view->rp_sapv_erst = $patient_rp_termination_data['rp_sapv_erst'];
                $this->view->rp_sapv_folge = $patient_rp_termination_data['rp_sapv_folge'];
                $this->view->rp_sex = $patient_rp_termination_data['rp_sex'];
              
            } else {
                // patient details
                $this->view->rp_pat_first_name = $patient_details['first_name'];
                $this->view->rp_pat_last_name = $patient_details['last_name'];
                
                $this->view->rp_pat_birthd = $patient_details['birthd'];
                
                $this->view->rp_pat_address = $patient_details['street1'];
                if (strlen($patient_details['street2']) > '0') {
                    $this->view->rp_pat_address .= ', ' . $patient_details['street2'];
                }
                
                if (strlen($patient_details['zip']) > '0') {
                    $this->view->rp_pat_zip_city = $patient_details['zip'];
                }
                
                if (strlen($patient_details['city']) > '0') {
                    $this->view->rp_pat_zip_city .= ' ' . $patient_details['city'];
                }
                
                $this->view->rp_pat_phone = $patient_details['phone'];
                $this->view->rp_pat_epid = strtoupper($patient_details['epid']);
                
                if (strlen(trim($client[0]['team_name'])) > 0) {
                    $team_parts[] = trim($client[0]['team_name']);
                }
                
                if (strlen(trim($client[0]['street1'])) > 0) {
                    $team_parts[] = trim($client[0]['street1']);
                }
                
                if (strlen(trim($client[0]['postcode'])) > 0) {
                    $team_parts[] = trim($client[0]['postcode']);
                }
                
                if (strlen(trim($client[0]['city'])) > 0) {
                    $team_parts[] = trim($client[0]['city']);
                }

                //ISPC-2931,Elena,28.05.2021
                if(strlen(trim($client[0]['phone'])) > 0)
                {
                    $team_parts[] = 'Tel. ' . trim($client[0]['phone']);
                }
                if(strlen(trim($client[0]['fax'])) > 0)
                {
                    $team_parts[] = 'Fax ' . trim($client[0]['fax']);
                }
                
                $this->view->rp_sapv_team = implode(', ', $team_parts);
                
                // 1. health insurance
                $patient_hi = $ph->getPatientHealthInsurance($ipid);
                
                $rp_health_insurance = array();
                if (strlen($patient_hi[0]['company_name']) > '0') {
                    $rp_health_insurance[] = $patient_hi[0]['company_name'];
                }
                
                if (strlen($patient_hi[0]['ins_street']) > '0' || strlen($patient_hi[0]['ins_zip']) > '0' || strlen($patient_hi[0]['ins_city']) > '0') {
                    $rp_health_insurance[] = $patient_hi[0]['ins_street'] . ' ' . $patient_hi[0]['ins_zip'] . ' ' . $patient_hi[0]['ins_city'];
                }
                
                if (strlen($patient_hi[0]['ins_phonefax'])) {
                    $rp_health_insurance[] = $patient_hi[0]['ins_phonefax'];
                }
                $this->view->rp_health_insurance = implode(', ', $rp_health_insurance);
                
                // 2. get contact person legal guardian
                $pat_cnt_lg = $pc->getPatientLegalguardian($ipid);
                
                $lg_arr = array();
                if ($pat_cnt_lg) {
                    foreach ($pat_cnt_lg as $k_lg => $v_lg) {
                        $lg_arr[] = $v_lg['cnt_last_name'] . ', ' . $v_lg['cnt_first_name'] . ' ' . $v_lg['cnt_street1'] . ' ' . $v_lg['cnt_zip'] . ' ' . $v_lg['cnt_city'];
                    }
                }
                // legal guardian
                $this->view->rp_vat_representative = implode('; ', $lg_arr);
                
                // 3. get contact person (Ist Kontakt-Telefonnummer checked)
                
                //ISPC-2045
                $pcp_ids = array();
                foreach ($patient_details['PatientContactphone'] as $PatientContactphone) {
                	if ($PatientContactphone['parent_table'] == 'ContactPersonMaster') {
                		$pcp_ids[] = $PatientContactphone['table_id'];
                	}
                }
                $contact_persons = $pc->getById($pcp_ids);
                
                $real_contact_person = '';
                $from_old_Kontakt_Telefonnummer = false;
                if ( empty($contact_persons) && $patient_details['kontactnumbertype'] == '2' && strlen($patient_details['kontactnumber'])) {
                    // get all contact persons
                    $contact_persons = $pc->getPatientContact($ipid);
                    $from_old_kontact_Telefonnummer = true;
                }
                
                $rp_info_dependant = array();
                if ($contact_persons) {
                        foreach ($contact_persons as $k_cnt_pers => $v_cnt_pers) {
                           $contact_pers_parts = array();
                            if ( ! $from_old_Kontakt_Telefonnummer || $v_cnt_pers['cnt_phone'] == $patient_details['kontactnumber']) {
                                if (strlen(trim($v_cnt_pers['cnt_last_name'])) > 0) {
                                    $contact_pers_parts[0] = trim($v_cnt_pers['cnt_last_name']);
                                }
                                if (strlen(trim($v_cnt_pers['cnt_first_name'])) > 0) {
                                    if (strlen($v_cnt_pers['cnt_last_name']) > 0) {
                                        $contact_pers_parts[0] .= ', ' . trim($v_cnt_pers['cnt_first_name']);
                                    } else {
                                        $contact_pers_parts[0] = trim($v_cnt_pers['cnt_first_name']);
                                    }
                                }
                                
                                if (strlen(trim($v_cnt_pers['cnt_zip'])) > 0) {
                                    $contact_pers_parts[] = trim($v_cnt_pers['cnt_zip']);
                                }
                                
                                if (strlen(trim($v_cnt_pers['cnt_city'])) > 0) {
                                    $contact_pers_parts[] = trim($v_cnt_pers['cnt_city']);
                                }
                            }
                            $rp_info_dependant[] = implode(', ', $contact_pers_parts);
                        }
                        
                }
                
                
                // real contact person
//                 $this->view->rp_info_dependant = implode(', ', $contact_pers_parts);
                $this->view->rp_info_dependant = implode('; ', $rp_info_dependant);
                
                // 4. health insurance number
                if (strlen($patient_hi[0]['insurance_no']) > 0) {
                    $this->view->rp_insurance_number = $patient_hi[0]['insurance_no'];
                }
                
                // 5. get patient first sapv details
                //TODO-2626 @Lore 30.10.2019
                $order_first = '1';
                $patient_first_sapv = $sapv->get_patient_first_last_sapv($ipid, $order_first);
                
               // dd($patient_first_sapv);
                if ($patient_first_sapv) {
                    
                    $start_first_sapv = date('d.m.Y', strtotime($patient_first_sapv[0]['verordnungam']));
                    $end_first_sapv = date('d.m.Y', strtotime($patient_first_sapv[0]['verordnungbis']));
                    $end_first_sapv_verord = explode(',', $patient_first_sapv[0]['verordnet']);
                    
                    $this->view->rp_start_date_erst = $start_first_sapv;
                    $this->view->rp_date_erst = $end_first_sapv;
                    $this->view->rp_sapv_erst = $end_first_sapv_verord;
                }
                
                // 6. get patient last/actual sapv details
                //TODO-2626 @Lore 30.10.2019
                $order_last='2';
                $patient_last_sapv = $sapv->get_patient_first_last_sapv($ipid, $order_last);
                if ($patient_last_sapv) {

                    $start_last_sapv = date('d.m.Y', strtotime($patient_last_sapv[0]['verordnungam']));
                    $end_last_sapv = date('d.m.Y', strtotime($patient_last_sapv[0]['verordnungbis']));
                    $end_last_sapv_verord = explode(',', $patient_last_sapv[0]['verordnet']);
                    
                    $this->view->rp_start_date_folge = $start_last_sapv;
                    $this->view->rp_date_folge = $end_last_sapv;
                    $this->view->rp_sapv_folge = $end_last_sapv_verord;
                }
                
                // 7. get patient last/actual location
                $active_pat_loc = $pat_loc->getActiveLocationPatInfo($ipid);
                if ($active_pat_loc) {
                    $rp_patient_located = array();
                    
                    if (strlen($active_pat_loc[0]['location_type']) == '0' && strpos($active_pat_loc[0]['location'], 'bei Kontaktperson') !== false) {
                        // bei kontact person (input val =2)
                        $rp_patient_located[] = '2';
                    } else if ($active_pat_loc[0]['location_type'] == '2') {
                        // hospiz (input val =4)
                        $rp_patient_located[] = '4';
                    } else if ($active_pat_loc[0]['location_type'] == '5') {
                        // zu house (input val =1)
                        $rp_patient_located[] = '1';
                    } else if ($active_pat_loc[0]['location_type'] == '3') {
                        // pflegeheim (input val =3)
                        $rp_patient_located[] = '3';
                    }
                    
                    $this->view->rp_patient_located = $rp_patient_located;
                }
                
                // 8. Get patient all hospital locations
                $last_patient_hospital = $pat_loc->get_patient_last_hospital($ipid, $clientid);
                
                if (count($last_patient_hospital[0]) > '0') {
                    $this->view->rp_last_hosp_date = date('d.m.Y', strtotime($last_patient_hospital[0]['valid_from']));
                    $this->view->rp_last_hosp_name = $last_patient_hospital[0]['location_name'];
                }
                
                // 9. get family doctor
                $pat_family_doc = $family_doctor->getFamilyDoc($patient_details['familydoc_id']);
                
                if (strlen(trim($pat_family_doc[0]['last_name'])) > 0) {
                    $fam_doctor_parts[0] = trim($pat_family_doc[0]['last_name']);
                }
                
                if (strlen(trim($pat_family_doc[0]['first_name'])) > 0) {
                    if (strlen($fam_doctor_parts[0]) > 0) {
                        $fam_doctor_parts[0] .= ', ' . trim($pat_family_doc[0]['first_name']);
                    } else {
                        $fam_doctor_parts[0] = trim($pat_family_doc[0]['first_name']);
                    }
                }
                
                if (strlen(trim($pat_family_doc[0]['street1'])) > 0) {
                    $fam_doctor_parts[] = trim($pat_family_doc[0]['street1']);
                }
                
                if (strlen(trim($pat_family_doc[0]['zip'])) > 0) {
                    $fam_doctor_parts[] = trim($pat_family_doc[0]['zip']);
                }
                
                if (strlen(trim($pat_family_doc[0]['city'])) > 0) {
                    $fam_doctor_parts[] = trim($pat_family_doc[0]['city']);
                }
                
                //ISPC-2835 CRISTI C. 22.02.2021               
                
                if(strlen(trim($pat_family_doc[0]['phone_practice'])) > 0)
                {
                    $fam_doctor_parts[] = $this->translate('fam_doctor_parts_phone').trim($pat_family_doc[0]['phone_practice']);
                }
                
                if(strlen(trim($pat_family_doc[0]['fax'])) > 0)
                {
                    $fam_doctor_parts[] = $this->translate('fam_doctor_parts_fax').trim($pat_family_doc[0]['fax']);
                }
                //
                
                $this->view->rp_hausarzt_details = implode(', ', $fam_doctor_parts);
                
                
                // 10. get nursing service
                $ppflearray = $nursing->getPatientPflegedienste($ipid);
                
                if (strlen(trim($ppflearray[0]['nursing'])) > 0) {
                    $pflege_parts[0] = trim($ppflearray[0]['nursing']);
                }
                
                if (strlen(trim($ppflearray[0]['street1'])) > 0) {
                    $pflege_parts[] = trim($ppflearray[0]['street1']);
                }
                
                if (strlen(trim($ppflearray[0]['zip'])) > 0) {
                    $pflege_parts[] = trim($ppflearray[0]['zip']);
                }
                
                if (strlen(trim($ppflearray[0]['city'])) > 0) {
                    $pflege_parts[] = trim($ppflearray[0]['city']);
                }
                
                $this->view->rp_home_care = implode(', ', $pflege_parts);
     
            }
        }
        
        public function participationpolicyAction()
        {
        	$logininfo = new Zend_Session_Namespace('Login_Info');
        	$clientid = $logininfo->clientid;
        	$decid = Pms_Uuid::decrypt($_GET['id']);
        	$ipid = Pms_CommonData::getIpId($decid);
        	$patientmaster = new PatientMaster();
        	$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        		
        	$tm = new TabMenus();
        	$this->view->tabmenus = $tm->getMenuTabs();
        		
        	//===========================================================
        	$patientmaster = new PatientMaster();
        	$patientinfo = $patientmaster->getMasterData($decid, 0);
        		
        	$this->view->patientname = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] . " \r\n " . $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "&nbsp;" . $patientinfo['city'];
        	$this->view->patsurname = $patientinfo['last_name'];
        	$this->view->patfirstname = $patientinfo['first_name'];
        	$this->view->patadress = $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "&nbsp;" . $patientinfo['city'];
        		
        	$this->view->birthdate = $patientinfo['birthd'];
        		
        	//red box data #1
        	$phelathinsurance = new PatientHealthInsurance();
        	$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);
        		
        	$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
        	$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
        	$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
        	$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];
        		
        	//cityofclient
        	$loguser = Doctrine::getTable('User')->find($logininfo->userid);
        	if($loguser)
        	{
        		$loguserarray = $loguser->toArray();
        			
        		$this->view->lastname = $loguserarray['last_name'];
        		$this->view->firstname = $loguserarray['first_name'];
        			
        		$this->view->betriebsstatten_nr = $loguserarray['betriebsstattennummer'];
        		$this->view->arzt_nr = $loguserarray['LANR'];
        	}
        		
        	// =================Get main diagnosis==================================
        	$dg = new DiagnosisType();
        	$abb2 = "'HD'";
        	$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
        	$comma = ",";
        	$typeid = "'0'";
        	foreach($ddarr2 as $key => $valdia)
        	{
        		$typeid .= $comma . "'" . $valdia['id'] . "'";
        		$comma = ",";
        	}
        	$patdia = new PatientDiagnosis();
        	$dianoarray = $patdia->getFinalData($ipid, $typeid);
        
        	if(count($dianoarray) > 0)
        	{
        		$comma = "";
        		$diagnosis = "";
        		foreach($dianoarray as $key => $valdia)
        		{
        			if(strlen($valdia['diagnosis']) > 0)
        			{
        				$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
        				$comma = ",";
        			}
        		}
        	}
        
        	if(strlen($diagnosis) > 0)
        	{
        		$this->view->icd_diagnosis = $diagnosis;
        	}
        	else
        	{
        		$this->view->icd_diagnosis = '';
        	}
        	// =================Get family doctor information=======================
        		
        	$patmastarr = $patientmaster->getMasterData($decid, 0);
        	$doc_id = $patmastarr['familydoc_id'];
        
        	if($doc_id > 0)
        	{
        		$fdoc = Doctrine::getTable('FamilyDoctor')->find($doc_id);
        		if($fdoc)
        		{
        			$fdocarray = $fdoc->toArray();
        			$this->view->familydoc = trim($fdocarray['title']) ." " .  $fdocarray['last_name'] ."," . $fdocarray['first_name'] ."\r\n". $fdocarray['street1']. " ". $fdocarray['zip']. "\r\n" . $fdocarray['city'] ;
        		}
        	}
        		
        	/* -------------- Participation Policy FILE HISTORY	---------------------------- */
        		
        	$fileupload = new PatientFileUpload();
        	$form_files = $fileupload->get_participationpolicy_file_data($ipid);
        		
        	$users_ids[] = '999999999999';
        	foreach($form_files as $k_file => $v_file)
        	{
        		$users_ids[] = $v_file['create_user'];
        	}
        	$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
        		
        	$this->view->participation_files_history = $form_files;
        
        		
        	/* -------------------------Post data----------------------------------------------------- */
        	if($this->getRequest()->isPost())
        	{
        		$post = $_POST;
        		$post['familydoc'] = $_POST['familydoc'];
        		//print_r($post);exit;
        		if($_POST['post_status'] == "save")
        		{
        		    
        		    $comment = 'Einverstädniserklärung  hinzugefügt';
        		    $cust = new PatientCourse();
        		    $cust->ipid = $ipid;
        		    $cust->course_date = date("Y-m-d H:i:s", time());
        		    $cust->course_type = Pms_CommonData::aesEncrypt("K");
        		    $cust->course_title = Pms_CommonData::aesEncrypt($comment);
        		    $cust->recordid = 0;
        		    $cust->tabname = Pms_CommonData::aesEncrypt("participationpolicy_form");
        		    $cust->user_id = $logininfo->userid;
        		    $cust->save();
        		    
        			$this->generatePdfNew(3, $post, "participationpolicy_save", "partcipationpolicy_pdf.html");
        			
        			/* ---------------------- Redirect to verlauf  ------------------- */
        			$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
        			exit;
        		}
        		else if($_POST['post_status'] == "pdf_print")
        		{
        				
        			$this->generatePdfNew(3, $post, "participationpolicy", "partcipationpolicy_pdf.html");
        				
        			/*---------------------- Redirect to verlauf  ------------------- */
        			$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
        			exit;
        		}
        	}
        }
        
        public function mdkreportAction()
        {
        	setlocale(LC_ALL, 'de_DE');
        	$logininfo = new Zend_Session_Namespace('Login_Info');
        	$clientid = $logininfo->clientid;
        	$decid = Pms_Uuid::decrypt($_REQUEST['id']);
        	$ipid = Pms_CommonData::getIpId($decid);
        	$userid = $logininfo->userid;
        
        	$patientmaster = new PatientMaster();
        	$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        
        	$tm = new TabMenus();
        	$this->view->tabmenus = $tm->getMenuTabs();
        
        	if($this->getRequest()->isPost())
        	{
        		if($_POST['generate_mdk'])
        		{
        			$this->_redirect(APP_BASE . 'patientformnew/bermdkfiles?id=' . $_REQUEST['id']);
        			exit;
        		}
        	}
        }
        
        public function bermdkfilesAction()
        {
        	setlocale(LC_ALL, 'de_DE.UTF-8');
        	$logininfo = new Zend_Session_Namespace('Login_Info');
        	$clientid = $logininfo->clientid;
        	$userid = $logininfo->userid;

        	$this->_helper->layout->setLayout('layout_ajax');
        	$this->_helper->viewRenderer->setNoRender();
        	
        	$decid = Pms_Uuid::decrypt($_REQUEST['id']);
        	$ipid = Pms_CommonData::getIpId($decid);
        	$patient_epid = strtoupper(Pms_CommonData::getEpid($ipid));
        	
        	//GET PATIENT DETAILS 
        	$patientmaster = new PatientMaster();
        	$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        	$patient_details = $patientmaster->getMasterData($decid, 0);
   			$patient_details['patient_name'] = $patient_details['last_name'].', '.$patient_details['first_name'];        	 
   			$patient_details['name_lf'] = $patient_details['last_name'].', '.$patient_details['first_name'];        	 
   			
   			
        	//GET CLIENT DETAILS 
   			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
   			$client_details = $clientdata[0];
   			
        	$forms_to_pdf = array(
        	    "stammblatt",
        	    "questionnaire_b",
        	    "questionnaire_c",
        	    "daystructure",
        	    "newmedikamentenplan",
        	    "symptomatics",
        	    "wunddokumentation",
        	    "painquestionnaire",
        	    "berprintcourse"
        	);
        	
        	
           	//################################################################
           	
           	// 1.Start Stammblatt II
            if(in_array("stammblatt",$forms_to_pdf)){
                // empty fields 
                $post['stammblatt']['familienstand'] = "";
                $post['stammblatt']['allein'] = "";
                $post['stammblatt']['mit_angeh'] = "";
                $post['stammblatt']['heim'] = "";
                $post['stammblatt']['hospiz'] = "";
                $post['stammblatt']['sonstiges'] = "";
                $post['stammblatt']['wohnsituation'] = array("0");
                $post['stammblatt']['allergien'] = "";
                $post['stammblatt']['zuzahlung'] = "";
                $post['stammblatt']['beatragt'] = '';
                $post['stammblatt']['pflegestufe'] = array("0");
                $post['stammblatt']['patientenverfugung'] = "";
                $post['stammblatt']['vorsorgevollmacht'] = "";
                $post['stammblatt']['bevollmachtigter'] = "";
                $post['stammblatt']['bevollmachtigter_tel'] = "";
                $post['stammblatt']['betreuung'] = "";
                $post['stammblatt']['betreuer'] = "";
                $post['stammblatt']['betreuer_handy'] = "";
                $post['stammblatt']['betreuer_tel'] = "";
                $post['stammblatt']['betreuer_fax'] = "";
                $post['stammblatt']['erstkontakt_am'] = "";
                $post['stammblatt']['erstkontakt_durch'] ="";
                $post['stammblatt']['ambulant'] = "";
                $post['stammblatt']['stationar'] = "";
                $post['stammblatt']['ecog'] = array(0);
                $post['stammblatt']['religion'] = "";
                $post['stammblatt']['genogramm'] = "";
                $post['stammblatt']['patient_main_diagnosis'] = "";
    
                
                
    			/* ------------------- Client Data--------------------------------------- */
    			$post['stammblatt']['client_name'] = $client_details['team_name'];
    			$post['stammblatt']['client_city'] = $client_details['city'];
    			$post['stammblatt']['client_street'] = $client_details['street1'];
    			$post['stammblatt']['client_zip'] = $client_details['postcode'];
    			$post['stammblatt']['client_phone'] = $client_details['phone'];
    			$post['stammblatt']['client_fax'] = $client_details['fax'];
    			$post['stammblatt']['client_email'] = $client_details['emailid'];
    
    			/* -------------------Patient Data--------------------------------------- */
    			$post['stammblatt']['birth'] = $patient_details['birthd'];
    			$post['stammblatt']['lastname'] = $patient_details['last_name'];
    			$post['stammblatt']['firstname'] = $patient_details['first_name'];
    			$post['stammblatt']['street'] = $patient_details['street1'];
    			$post['stammblatt']['zip'] = $patient_details['zip'];
    			$post['stammblatt']['patcity'] = $patient_details['city'];
    			$post['stammblatt']['pattel'] = $patient_details['phone'];
    			$post['stammblatt']['pathandy'] = $patient_details['mobile'];
    			$post['stammblatt']['patientenverfugung'] = $patient_details['living_will'];
    
    			/* ------------------- Health Insurance Data----------------------------- */
    			$phelathinsurance = new PatientHealthInsurance();
    			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
    			$post['stammblatt']['healthinsurance_company'] = $healthinsu_array[0]['company_name'];
    			$post['stammblatt']['healthinsurance_kknr'] = $healthinsu_array[0]['kvk_no'];
    			$post['stammblatt']['healthinsurance_versnr'] = $healthinsu_array[0]['insurance_no'];
    			$post['stammblatt']['healthinsurance_companytel'] = $healthinsu_array[0]['ins_phone'];
    			$post['stammblatt']['healthinsurance_companyfax'] = $healthinsu_array[0]['ins_phonefax'];
    			
    			//according to ISPC-834
    			if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '1')
    			{
    				$post['stammblatt']['zuzahlung'] = '0';
    			}
    			else if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '2')
    			{
    				$post['stammblatt']['zuzahlung'] = '1';
    			}
    			else
    			{
    				$post['stammblatt']['zuzahlung'] = '1';
    			}
    			//according to ISPC-1403
    			/* if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
    			{
    				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
    				$healtharray = $helathins->toArray();
    				$this->view->healthinsurance_companytel = $healtharray['phone'];
    				$this->view->healthinsurance_companyfax = $healtharray['phonefax'];
    			} */
    
    			/* --------------Patient family doctor---------------------------- */
    			$fdoc = new FamilyDoctor();
    			$docarray = $fdoc->getFamilyDoc($patient_details['familydoc_id']);
    			$post['stammblatt']['hausarzt_details'] = $docarray[0]['last_name'] . ", " . $docarray[0]['first_name'] . "<br>" . $docarray[0]['street1'] . ", " . $docarray[0]['zip'] . " " . $docarray[0]['city'];
    			$post['stammblatt']['hausarzt_tel'] = $docarray[0]['phone_practice'];
    			$post['stammblatt']['hausarzt_fax'] = $docarray[0]['fax'];
    
    			/* --------------Patient First Pfllegedienst---------------------------- */
    			$ppfle = new PatientPflegedienste();
    			$ppflearray = $ppfle->getPatientPflegedienste($ipid);
    			$post['stammblatt']['pflegedienst_details'] = htmlspecialchars($ppflearray[0]['nursing']) . "<br />" . htmlspecialchars($ppflearray[0]['street1']) . ", " . htmlspecialchars($ppflearray[0]['zip']) . " " . htmlspecialchars($ppflearray[0]['city']);
    			$post['stammblatt']['pflegedienst_tel'] = $ppflearray[0]['pf_phone_practice'];
    			$post['stammblatt']['pflegedienst_fax'] = $ppflearray[0]['pf_fax'];
    
    			/* --------------	Patient Familienstand	---------------------------- */
    			$st = new Stammdatenerweitert();
    			$weit = $st->getStammdatenerweitert($ipid);
    
    			if(!empty($weit[0]['familienstand']))
    			{
    				if($weit[0]['familienstand'] == 1)
    				{
    					$post['stammblatt']['ledig'] = "checked='checked'";
    				}
    
    				if($weit[0]['familienstand'] == 2)
    				{
    					$post['stammblatt']['verwitwet'] = "checked='checked'";
    				}
    
    				if($weit[0]['familienstand'] == 3)
    				{
    					$post['stammblatt']['geschieden'] = "checked='checked'";
    				}
    			}
    
    			/* --------------Patient Wohnsituation---------------------------- */
    			$pl = new PatientLives();
    			$pat_lives = $pl->getpatientLivesData($ipid);

    			if($pat_lives[0]['home'] == 1)
    			{
    				$post['stammblatt']['heim'] = "checked='checked'";
    				$post['stammblatt']['wohnsituation'][] = "1";
    			}
    			
    			if($pat_lives[0]['alone'] == 1)
    			{
    				$post['stammblatt']['allein'] = "checked='checked'";
    				$post['stammblatt']['wohnsituation'][] = "2";
    			}
    
    			if($pat_lives[0]['house_of_relatives'] == 1)
    			{
    				$post['stammblatt']['mit_angeh'] = "checked='checked'";
    				$post['stammblatt']['wohnsituation'][] = "3";
    			}
    
    
    			if($pat_lives[0]['hospiz'] == 1)
    			{
    				$post['stammblatt']['hospiz'] = "checked='checked'";
    				$post['stammblatt']['wohnsituation'][] = "4";
    			}
    
    			if($pat_lives[0]['sonstiges'] == 1)
    			{
    				$post['stammblatt']['sonstiges'] = "checked='checked'";
    				$post['stammblatt']['wohnsituation'][] = "5";
    			}
    
    			/* --------------Patient Contact persons Data ---------------------------- */
    			$pc = new ContactPersonMaster();
    			$pcs = $pc->getPatientContact($ipid);
    
    			$familydegree = new FamilyDegree();
    			$status = $familydegree->getFamilyDegrees(1);
    
    			if(!empty($pcs[0]))
    			{
    				$cntpers1name = $pcs[0]['cnt_last_name'] . ', ' . $pcs[0]['cnt_first_name'];
    				$cntpers1tel = $pcs[0]['cnt_phone'];
    				$cntpers1handy = $pcs[0]['cnt_mobile'];
    			}
    			else
    			{
    				$cntpers1name = "";
    				$cntpers1tel = "";
    				$cntpers1handy = "";
    			}
    
    			if(!empty($pcs[1]))
    			{
    				$cntpers2name = $pcs[1]['cnt_last_name'] . ', ' . $pcs[1]['cnt_first_name'];
    				$cntpers2tel = $pcs[1]['cnt_phone'];
    				$cntpers2handy = $pcs[1]['cnt_mobile'];
    			}
    			else
    			{
    				$cntpers2name = "";
    				$cntpers2tel = "";
    				$cntpers2handy = "";
    			}
    			$post['stammblatt']['cntpers1name'] = $cntpers1name;
    			$post['stammblatt']['cntpers1tel'] = $cntpers1tel;
    			$post['stammblatt']['cntpers1handy'] = $cntpers1handy;
    			$post['stammblatt']['cntpers2name'] = $cntpers2name;
    			$post['stammblatt']['cntpers2tel'] = $cntpers2tel;
    			$post['stammblatt']['cntpers2handy'] = $cntpers2handy;
    
    			foreach($pcs as $k => $cnt_details)
    			{
    
    				if($cnt_details['cnt_hatversorgungsvollmacht'] == "1")
    				{
    					$voll_cnt_name = $cnt_details['cnt_last_name'] . ', ' . $cnt_details['cnt_first_name'];
    					$voll_cnt_phone = $cnt_details['cnt_phone'];
    					$post['stammblatt']['vorsorgevollmacht'] = '1';
    				}
    			}
    			$post['stammblatt']['bevollmachtigter'] = $voll_cnt_name;
    			$post['stammblatt']['bevollmachtigter_tel'] = $voll_cnt_phone;
    
    			/* -------------------Patient Religions  ------------------------------- */
    			$rel = new PatientReligions();
    			$pat_rel = $rel->getReligionsData($ipid);
    			$relcnt = $pat_rel[0]['religion'];
    			if(!empty($pat_rel[0]['religion']))
    			{
    				if($pat_rel[0]['religion'] == 1)
    				{
    					$post['stammblatt']['evange'] = "checked='checked'";
    				}
    
    				if($pat_rel[0]['religion'] == 2)
    				{
    					$post['stammblatt']['katolic'] = "checked='checked'";
    				}
    
    				if($pat_rel[0]['religion'] == 6)
    				{
    					$post['stammblatt']['keine'] = "checked='checked'";
    				}
    				if($pat_rel[0]['religion'] == 7)
    				{
    					$post['stammblatt']['andere'] = "checked='checked'";
    				}
    			}
    
    			/* ------------------- Patient Pharmacy--------------------------------- */
    			$pha = new PatientPharmacy();
    			$phaarray = $pha->getPatientPharmacy($ipid);
    			$post['stammblatt']['apotheke_details'] = $phaarray[0]['apotheke'] . "<br>" . $phaarray[0]['street1'] . ", " . $phaarray[0]['zip'] . " " . $phaarray[0]['city'];
    			$post['stammblatt']['apotheke_tel'] = $phaarray[0]['phone'];
    			$post['stammblatt']['apotheke_fax'] = $phaarray[0]['fax'];
    
    
    			/* --------------------Patient Main Diagnosis ------------------ */
    			$dg = new DiagnosisType();
    			$abb2 = "'HD'";
    			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
    			$comma = ",";
    			$typeid = "'0'";
    			foreach($ddarr2 as $key => $valdia)
    			{
    				$typeid .=$comma . "'" . $valdia['id'] . "'";
    				$comma = ",";
    			}
    
    			$patdia = new PatientDiagnosis();
    			$dianoarray = $patdia->getFinalData($ipid, $typeid);
    
    			if(count($dianoarray) > 0)
    			{
    				$comma = "";
    				$diagnosis = "";
    				foreach($dianoarray as $key => $valdia)
    				{
    					if(strlen($valdia['diagnosis']) > 0)
    					{
    						if(!empty($valdia['icdnumber']))
    						{
    							$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
    						}
    						else
    						{
    							$diagnosis .= $comma . $valdia['diagnosis'];
    						}
    						$comma = ", ";
    					}
    				}
    			}
    
    			if(strlen($diagnosis) > 0)
    			{
    				$post['stammblatt']['patient_main_diagnosis'] = $diagnosis;
    			}
    			/* ------------------- Patient stage Data--------------------------------- */
    			$pms = new PatientMaintainanceStage();
    			$pat_pmsinfo = $pms->getLastpatientMaintainanceStage($ipid);
    			$stage = array();
    			if($pat_pmsinfo)
    			{
    				$stage[] = $pat_pmsinfo[0]['stage'];
    				if($pat_pmsinfo[0]['horherstufung'] == 1)
    				{
    					$post['stammblatt']['beatragt'] = 'checked="checked"';
    				}
    			}
    			$post['stammblatt']['pflegestufe'] = $stage;
    			
    			/* ------------------- Patient Allergies--------------------------------- */
    				
    			$aller = new PatientDrugPlanAllergies();
    			$allergies = $aller->getPatientDrugPlanAllergies($decid);
    				
    				
    			if(!empty($allergies))
    			{
    				$patient_allergies = $allergies[0];
    				$post['stammblatt']['allergien'] = htmlspecialchars(strip_tags($patient_allergies['allergies_comment'], '<br />'));
    			}
    			
    			/* -------------------Prefill ECOG-------------------------------- */
    			$post['stammblatt']['ecog'] = array("1");
    			
    			$stamq = Doctrine_Core::getTable('Stammblattsapv')->findBy('ipid', $ipid);
    			$stamqarr = $stamq->toArray();
    
    			if(count($stamqarr) > 0)
    			{
    				$post['stammblatt']['familienstand'] = $stamqarr[0]['familienstand'];
    				$wohnsituation = explode(",", $stamqarr[0]['wohnsituation']);
    				if($wohnsituation)
    				{
    					$post['stammblatt']['allein'] = "";
    					$post['stammblatt']['mit_angeh'] = "";
    					$post['stammblatt']['heim'] = "";
    					$post['stammblatt']['hospiz'] = "";
    					$post['stammblatt']['sonstiges'] = "";
    					$post['stammblatt']['wohnsituation'] = $wohnsituation;
    				}
    				$post['stammblatt']['allergien'] = $stamqarr[0]['allergien'];
    				$post['stammblatt']['zuzahlung'] = $stamqarr[0]['zuzahlung'];
    				$pflegestufe = explode(",", $stamqarr[0]['pflegestufe']);
    				if($pflegestufe)
    				{
    					$post['stammblatt']['beatragt'] = '';
    					$post['stammblatt']['pflegestufe'] = $pflegestufe;
    				}
    				$post['stammblatt']['patientenverfugung'] = $stamqarr[0]['patientenverfugung'];
    				$post['stammblatt']['vorsorgevollmacht'] = $stamqarr[0]['vorsorgevollmacht'];
    				$post['stammblatt']['bevollmachtigter'] = $stamqarr[0]['bevollmachtigter'];
    				$post['stammblatt']['bevollmachtigter_tel'] = $stamqarr[0]['bevollmachtigter_tel'];
    				$post['stammblatt']['betreuung'] = $stamqarr[0]['betreuung'];
    				$post['stammblatt']['betreuer'] = $stamqarr[0]['betreuer'];
    				$post['stammblatt']['betreuer_handy'] = $stamqarr[0]['betreuer_handy'];
    				$post['stammblatt']['betreuer_tel'] = $stamqarr[0]['betreuer_tel'];
    				$post['stammblatt']['betreuer_fax'] = $stamqarr[0]['betreuer_fax'];
    				$post['stammblatt']['erstkontakt_am'] = $stamqarr[0]['erstkontakt_am'];
    				$post['stammblatt']['erstkontakt_durch'] = $stamqarr[0]['erstkontakt_durch'];
    				$post['stammblatt']['ambulant'] = $stamqarr[0]['ambulant'];
    				$post['stammblatt']['stationar'] = $stamqarr[0]['stationar'];
    				$ecog = explode(",", $stamqarr[0]['ecog']);
    				$post['stammblatt']['ecog'] = $ecog;
    				$post['stammblatt']['religion'] = $stamqarr[0]['religion'];
    				$post['stammblatt']['genogramm'] = $stamqarr[0]['genogramm'];
    				$post['stammblatt']['patient_main_diagnosis'] = $stamqarr[0]['main_diagnosis'];
    			}
    			
    			$files[] = $this->generate_joined_files_pdf(4,$post['stammblatt'],'stammblatt',"stammblattsapv_pdf.html");
             }   
           	// 1.End Stammblatt 
        	
        	//################################################################
        	
            //2. Start Erhebungsbogen B - ISPC-972
             if(in_array("questionnaire_b",$forms_to_pdf)){
            	 
            	
            	$header_string = $this->view->translate('questionnaire_b');
            	$header_string = str_replace('%patient_name', $patient_details['last_name'] . ', ' . $patient_details['first_name'], $header_string);
           
            	$post['questionnaire_b']['header_string'] = $header_string;
            	
            	$patient_form = QuestionnaireB::get_patient_form($ipid);
            	//found existing form
            	if(!empty($patient_form))
            	{
            		foreach($patient_form as $k_val=>$v_val)
            		{
            			$post['questionnaire_b']['row'][$v_val['row']]= $v_val['value'];
            		}
            	}
            	else 
            	{
            		for($i=1;$i<=10;$i++)
            		{
            			$post['questionnaire_b']['row'][$i]= "";
            		}
            	}
            	
            	 $files[] = $this->generate_joined_files_pdf(4,$post['questionnaire_b'],'questionnaire_b',"questionnaireb_pdf.html");
    
             }
          	 // 2. End Erhebungsbogen B - ISPC-972
        	 
        	//################################################################
             
       	     // 3. Start Erhebungsbogen C - ISPC-973
             if(in_array("questionnaire_c",$forms_to_pdf)){
                 
            	 $header_string = $this->view->translate('questionnaire_c');
            	 $header_string = str_replace('%client_phone', $client_details['phone'], $header_string);
            	 $header_string = str_replace('%client_fax', $client_details['fax'], $header_string);
            	 $post['questionnaire_c']['header_string'] = $header_string;
            	 
            	 $patient_form = QuestionnaireC::get_patient_form($ipid);
            	 
            	 //found existing form
            	 if(!empty($patient_form))
            	 {
            	 	foreach($patient_form as $k_val=>$v_val)
            	 	{
            	 		$post['questionnaire_c']['row'][$v_val['row']]= $v_val['value'];
            	 	}
            	 }
            	 else
            	 {
            	 	for($i=1;$i<=12;$i++)
            	 	{
            	 		$post['questionnaire_c']['row'][$i] = "";
            	 	}
            	 }
            	
            	 $files[] = $this->generate_joined_files_pdf(4,$post['questionnaire_c'],'questionnaire_c','questionnairec_pdf.html');
             }
           	 // 3. End Erhebungsbogen C - ISPC-973
             
        	 //################################################################
        	 
        	 // 4. Tagesstrukturplan -  ISPC - 1360
             if(in_array("daystructure",$forms_to_pdf)){
            	 /* -------------- day structure  - retirive form data	---------------------------- */
            	 $form_data = PatientDayStructure::get_patient_day_structure($ipid);
            	 
            	 if($form_data){
            	 		
            	 	$form_id = $form_data[0]['id'];
            	 	$form_data_items = PatientDayStructureActions::get_patient_day_structure_action($ipid,$form_id);
            	 		
            	 	foreach($form_data_items as $k_item =>$item_data){
            	 		if(strlen($item_data['start']) > 0 ){
            	 			$form_items[$item_data['id']]['start'] = date("H:i",strtotime($item_data['start']));
            	 		}
            	 		if(strlen($item_data['end']) > 0 ){
            	 			$form_items[$item_data['id']]['end'] = date("H:i",strtotime($item_data['end']));
            	 		}
            	 		$form_items[$item_data['id']]['description'] = $item_data['description'];
            	 	}
            	 }
            	 	
            	 $form_items = array_values($form_items);
            	         	 
            	 $post['daystructure']['item'] = $form_items;
            	        	 
            	 $files[] = $this->generate_joined_files_pdf(4,$post['daystructure'],'daystructure','daystructure_pdf.html');
             }
           	// 4. End  Tagesstrukturplan -  ISPC - 1360
        	 
        	//################################################################
        	
           	// 5. Start  "Medikation / Dosierung Plan" - Medikamente
            if(in_array("newmedikamentenplan",$forms_to_pdf)){
                 
    			$post['newmedikamentenplan']['clientname'] = $client_details['client_name'];
    
    			if(strlen($client_details['team_name']) > 0)
    			{
    				$post['newmedikamentenplan']['clientname'] = $client_details['team_name'];
    			}
    			else
    			{
    				$post['newmedikamentenplan']['clientname'] = $client_details['client_name'];
    			}
    			/*			 * ******* Patient Allergies ************ */
    			$aller = new PatientDrugPlanAllergies();
    			$allergies = $aller->getPatientDrugPlanAllergies($decid);
    			
    			if(!empty($allergies))
    			{
    				$post['newmedikamentenplan']['allergies_comment'] = $allergies[0]['allergies_comment'];
    			}
    			
    			$post['newmedikamentenplan']['patient_name'] = utf8_encode($patient_details['last_name'] . ", " . $patient_details['first_name']);
    			$post['newmedikamentenplan']['birthdate'] = $patient_details['birthd'];
    			
    			//get patient medication
    			$medic = new PatientDrugPlan();
    			$medicarr = $medic->getMedicationPlan($decid);
    			$newmedicarr = $medic->getbedarfMedication($decid);
    			$ivmedicarr = $medic->getivMedication($decid);
    			
    			$medicarr = array_merge($medicarr, $newmedicarr, $ivmedicarr);
    			if(count($medicarr) > 0)
    			{
    				$totalpage = (int) (count($medicarr) / 18);
    				if(count($medicarr) % 18 != 0)
    				{
    					$totalpage++;
    				}
    			}
    			for($t = 0; $t < $totalpage; $t++)
    			{
    				$a_meication = array();
    			
    				for($i = $t * 18; $i < ($t + 1) * 18; $i++)
    				{
    					if($i < count($medicarr))
    					{
    						$a_meication[] = $medicarr[$i];
    					}
    				}
    			
    				$grid = new Pms_Grid($a_meication, 1, count($a_meication), "medicationplanpdf_paging.html");
    				$Mmedicationgrid .= $grid->renderGrid();
    					
    				$grid = new Pms_Grid($ivmedicarr, 1, count($ivmedicarr), "medicationplanivpdf_paging.html");
    				$IVmedicationgrid = $grid->renderGrid();
    				
    				$grid = new Pms_Grid($a_meication, 1, count($a_meication), "medicationNplanpdf_paging.html");
    				$Nmedicationgrid .= $grid->renderGrid();
    			}
    			
    			$previleges = new Modules();
    						
    			$post['newmedikamentenplan']['showiv'] = $previleges->checkModulePrivileges("53", $logininfo->clientid);
    			$post['newmedikamentenplan']['Mmedicationgridcontent'] = $Mmedicationgrid;
    			$post['newmedikamentenplan']['IVmedicationgridcontent'] = $IVmedicationgrid;
    			$post['newmedikamentenplan']['Nmedicationgridcontent'] = $Nmedicationgrid;
    			$post['newmedikamentenplan']['header'] = "1";
    			
    			$files[] = $this->generate_joined_files_pdf(4,$post['newmedikamentenplan'],'newmedikamentenplan','newmedikamentenplanpdf.html');
            }
			// 5. End  "Medikation / Dosierung Plan" - Medikamente
            
			//################################################################

   			// 6. Start Symptomatics page
            if(in_array("symptomatics",$forms_to_pdf)){
                
    			$symperm = new SymptomatologyPermissions();
    			$clientsymsets = $symperm->getClientSymptomatology($clientid);
    			
    			if(is_array($clientsymsets))
    			{
    			 	$post['symptomatics']['symsets'] = $clientsymsets;// name of set
    			
    			$ss = new SymptomatologyValues();
    			$i = 1;
    			foreach($clientsymsets as $symset => $symdet)
    			{
    				$set_details = $ss->getSymptpomatologyValues($symset);
    				$patsym = new Symptomatology();
    				$patsymarr = $patsym->getPatientSymptpomatologyBySet($ipid, $symset);
    				
    				$set_description = '';
    				foreach($patsymarr as $patsym_cust)
    				{
    					if(!empty($patsym_cust['custom_description']))
    					{
    						$set_details[$patsym_cust['symptomid']]['custom_description'] = $patsym_cust['custom_description'];
    					}
    					
    				}
    				
    				/* ------------------Get user details - shotrcut ---------------------- */
    				$user = Doctrine_Query::create()
    				->select('*')
    				->from('User')
    				->where('isdelete=0')
    				->orderBy('last_name ASC');
    				
    				if($logininfo->usertype != 'SA')
    				{
    					$user->andwhere('clientid = ' . $logininfo->clientid);
    				}
    				else
    				{
    				
    				}
    				$user->andWhere('isactive=0');
    				$uarrae = $user->fetchArray();
    								
    				foreach($uarrae as $value)
    				{
    					if(strlen($value['shortname']) > 0)
    					{
    						$user_details[$value['id']] = $value['shortname'];
    					}
    					else
    					{
    						$last_name = mb_substr($value['last_name'], 0, 1, "UTF-8");
    						$first_name = mb_substr($value['first_name'], 0, 1, "UTF-8");
    						$user_details[$value['id']] = strtoupper($first_name . $last_name);
    					}
    				}
    				$cntr = 0;
    				$newdatearr = array();
    				$set_symptoms_name = array();
    				foreach($patsymarr as $key => $val)
    				{		
    					if($val['create_user'])
    					{
    						$val['user']= $user_details[$val['create_user']];
    					}
    					
    					$val['sym_description']= $set_details[$val['symptomid']]['sym_description'];
    					$set_symptoms_details[$val['setid']][$val['symptomid']][] = $val;
    					
    				}
    				
    				$i++;
    				$set_values[$symset] = $set_details;
    			}
    			
    			
    			
    			$symptom_array=array();
    			
    			foreach($set_symptoms_details as $k=>$symptoms)
    				{
    
    				foreach($symptoms as $key=>$value)
    					{
    					$col=1;
    						foreach($value as $ks=>$vdet)
    						{
    						$symptom_array[$vdet['setid']]['header'][$col]['user_entry']= $vdet['user']."<br />".date('d.m',strtotime($vdet['entry_date']))."<br />".date('H:i',strtotime($vdet['entry_date']));
    						$symptom_array[$vdet['setid']][$vdet['symptomid']]['sym_description']= $vdet['sym_description'];
    						$symptom_array[$vdet['setid']][$vdet['symptomid']]['values'][$col]['value']= $vdet['input_value'];
    						$col++;
    						}
    					}
    				}
    			}
    			else
    			{
    				$sm = new SymptomatologyMaster();
    				$symarr = $sm->getSymptpomatology($clientid);
    				
    				$i = 0;
    				$patsym = new Symptomatology();
    				$patsymarr = $patsym->getPatientSymptpomatology($ipid);
    				
    			}
    			
    			
    			$post['symptomatics']['symptom_array']= $symptom_array;
    			$post['symptomatics']['set_values'] = $set_values;
    			
    			$files[] = $this->generate_joined_files_pdf(4,$post['symptomatics'],'symptomatics','patsymptomatics_pdf.html');
    			
            }
   			// 6. End Symptomaticste
   			
			//################################################################
		
   			// 7. Start Wunddokumentation ISPC-896
            if(in_array("wunddokumentation",$forms_to_pdf)){			
                $patient_files = Doctrine_Query::create()
                ->select("*,AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
						AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') as file_name,
						AES_DECRYPT(file_type,'" . Zend_Registry::get('salt') . "') as file_type")
                						->from('PatientFileUpload')
                						->where('ipid="' . $ipid . '"')
                						->andWhere('tabname = "wounddocumentation_incr"')
                						->andWhere('date(create_date) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 4 WEEK) AND CURRENT_DATE()');
                $filearray = $patient_files->fetchArray();
                foreach($filearray as $k=>$fl)
                {
                    if(($wounddocumentation_incr_file = PatientFileUpload::get_downloaded_file_path($ipid,$fl['id'])) !== false){
                        //$files[] = PatientFileUpload::get_downloaded_file_path($ipid,$fl['id']);
                        $files[] = $wounddocumentation_incr_file;
                    }
                }
                
            }
   			// 7. End Wunddokumentation
			
			//################################################################
            
   			//8. Start Schmerzerhebungsbogen - ISPC- 1356
            if(in_array("painquestionnaire",$forms_to_pdf)){
    			/* -------------- Pain questionnaire - retirive form data	---------------------------- */
    			$form_data = PainQuestionnaire::get_last_patientpainquestionnaire($ipid);
    			if($form_data)
    			{
    				//1
    				$post['painquestionnaire']['post_data']['intensity'] = $form_data[0]['intensity'];
    				//2
    				$post['painquestionnaire']['post_data']['quality'] =explode(',', $form_data[0]['quality']);
    				//3
    				$post['painquestionnaire']['post_data']['localisation'] =$form_data[0]['localisation']; // human
    				$post['painquestionnaire']['post_data']['point_location'] =explode(',', $form_data[0]['point_location']);
    				$post['painquestionnaire']['post_data']['point_location_comment'] = $form_data[0]['point_location_comment'];
    				//4
    				$post['painquestionnaire']['post_data']['perception'] =explode(',', $form_data[0]['perception']);
    				//5
    				$post['painquestionnaire']['post_data']['expression'] =explode(',', $form_data[0]['expression']);
    				$post['painquestionnaire']['post_data']['expression_other'] = $form_data[0]['expression_other'];
    				//6
    				$post['painquestionnaire']['post_data']['relief'] =explode(',', $form_data[0]['relief']);
    				$post['painquestionnaire']['post_data']['relief_comment'] = $form_data[0]['relief_comment'];
    			
    				//generate human body image from post data
    					$tmp_file = $this->temporary_image_create($post['painquestionnaire']['post_data']['localisation'], 'base64', 'human-huge');
    					$tmp_file = basename($tmp_file);
    					$post['painquestionnaire']['image'] = '<img border="0" src="' . str_replace(array('/_ipad', '_ipad'), array('', ''), RES_FILE_PATH) . '/temp/' . $tmp_file . '" width="600" />';
    			} else{
    			    //generate human body image from post data
    			    $tmp_file = $this->temporary_image_create($post['painquestionnaire']['post_data']['localisation'], 'base64', 'human-huge');
    			    $tmp_file = basename($tmp_file);
    			    $post['painquestionnaire']['image'] = '<img border="0" src="' . str_replace(array('/_ipad', '_ipad'), array('', ''), RES_FILE_PATH) . '/temp/' . $tmp_file . '" width="600" />';    			    
    			}
    				
    			$files[] = $this->generate_joined_files_pdf(4,$post['painquestionnaire'],'painquestionnaire','painquestionnaire_pdf.html');
    			
    			
            }
   			// 8. End Schmerzerhebungsbogen
			
			//################################################################
			
            // 9. Start printcourse
            if(in_array("berprintcourse",$forms_to_pdf)){
    			
    			$post['printcourse']['patientname'] = $patient_details['patient_name']." (".$patient_details['birthd'].")";
    			$post['printcourse']['currdate'] = date("d.m.Y",time());
    			
    			$dth = explode(" ", $date);
    			$dt = date("d.m.Y", strtotime($dth[0]));
    			$hm = $dth[1];
        			
        		$shorcut= 'XP';
                $shortcuts .= '"'.$shorcut.'",';
                $shortcuts = substr($shortcuts,0,-1);
        		$pcourse = new PatientCourse();
        		$allblocks = $pcourse->getCourseData($decid,0,$shortcuts); //grab all existing data
        		
    		
        		foreach($allblocks as $dbb_key => $dbblock){
        			foreach($dbblock['summary'] as $spos) {
        				$existing_blocks[] = $spos['course_type'];
        			}
        		}
        		foreach($allblocks as $ablock){
        			$allusers[] = $ablock['user'];
        		}
    			
    			$allusers[] = '999999'; //prevent fehler on empty array
    			
    			//getting all user details
    			$allusers_details = User::getMultipleUserDetails($allusers);
    			
    			//adding user details to each block
    			if($allblocks)
    			{
    				foreach($allblocks as $key=>$block){
    					$allblocks[$key]['user_fname'] = $allusers_details[$block['user']]['first_name'];
    					$allblocks[$key]['user_lname'] = $allusers_details[$block['user']]['last_name'];
    				}
    			}
    			$post['printcourse']['allblocks'] = $allblocks;
          
    			$files[] = $this->generate_joined_files_pdf(4,$post['printcourse'],'berprintcourse','berprintcoursepdf.html');
            }
   			// 9. End printcourse
   			
           
           // ################################################################
           // ############# GENERATE PDF ####################################
           // ################################################################
			
        	 //Final step merge generated files!
        	 $patient_data['ipid'] = $ipid;
        	 $patient_data['epid'] = $patient_epid;
        	 $source = 'MDK-Bericht';
        	 $this->join_pdfs_new($files, $patient_data,$source);
//         	 $this->join_pdfs($files, $patient_data,$source);
        }
        

        public function ethicalassessmentAction()
        {
        	$decid = Pms_Uuid::decrypt($_GET['id']);
        	$logininfo = new Zend_Session_Namespace('Login_Info');
        	$clientid = $logininfo->clientid;
        	$ipid = Pms_CommonData::getIpId($decid);
        
        
        	/*			 * ******* Patient Information ************ */
        	$patientmaster = new PatientMaster();
        	$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        	$tm = new TabMenus();
        	$this->view->tabmenus = $tm->getMenuTabs();
        	/*			 * ****************************************** */
        	 	
        	 	 	
        	/* -------------------POST DATA--------------------------------------- */
        	if($this->getRequest()->isPost())
        	{
        		if(strlen($_POST['save']) > 0 )
        		{
        		  
        
        			$post = $_POST;
        			//print_r($post); exit;
        			//exit();
        			$post['ipid'] =$ipid;
        			 
        			$eth = new EthicalForm();
        			$eth_array = $eth->get_ethicaldetails($post['ipid']);
        			 
        
        			 
        			if(!empty($eth_array ))
        			{
        				$ethichal = new Application_Form_EthicalForm();
        				$ethicalinfo = $ethichal->UpdateData($post);
        			}
        			else{
        				$ethichal = new Application_Form_EthicalForm();
        				$ethicalinfo = $ethichal->InsertData($post);
        			}
        			 
        			if($post['expressionofwill'] == '2' &&(!empty($post['living_will_from'])))
        			{
        
        				//echo $post['living_will_from'];
        
        				$upd = new Application_Form_PatientMaster();
        				$updliving =$upd->UpdateLivingWillFrom($post);
        			}
        		}
        		else if(strlen($_POST['pdf']) > 0 )
        		{
        			$post = $_POST;
        			$post['ipid'] = $ipid;
        			$post['clientid'] = $clientid;
        			$gen_pdf = $this->generate_pdf($post, 'ethicalform', 'ethicalform_pdf.html');
        			exit;
        		}
        
        	}
        	
        	/* -------------------Get ethical details--------------------------------------- */
        	$eth = new EthicalForm();
        	$eth_array = $eth->get_ethicaldetails($ipid);
        	// print_r($eth_array);
        	if( $eth_array)
        	{
        		$ethicalinfo=$eth_array;
        		$this->view->ethical=$ethicalinfo;
        		
        		
        		$justificationforomission =  explode(",",$ethicalinfo['justificationforomission']);
        		$patientexpectations =  explode(",",$ethicalinfo['patientexpectations']);
        		$consentdiscussion =  explode(",",$ethicalinfo['consentdiscussion']);
        		$expectationsfamily =  explode(",",$ethicalinfo['expectationsfamily']);
        		$nolongerindexed =  explode(",",$ethicalinfo['nolongerindexed']);
        		$consensusbetween =  explode(",",$ethicalinfo['consensusbetween']);
        		
        		
        		
        		
        		$this->view->justarr= $justificationforomission;
        		$this->view->patientexpectations1= $patientexpectations;
        		$this->view->consentdiscussion1= $consentdiscussion;
        		$this->view->expectationsfamily1= $expectationsfamily;
        		$this->view->nolongerindexed1= $nolongerindexed;
        		$this->view->consensusbetween1= $consensusbetween;
        		//echo $ethicalinfo['$justificationforomission'] ; exit;
        		
        		
        		
        		
        		
    
        
        		if($ethicalinfo['expectationsfamily_withpatient'] != '0000-00-00')
        		{
        			$this->view->ethical['expectationsfamily_withpatient']= date('d.m.Y', strtotime($ethicalinfo['expectationsfamily_withpatient']));
        		}else{
        			$this->view->ethical['expectationsfamily_withpatient']="";
        		}
        		if($ethicalinfo['expectationsfamily_withsupervisor'] != '0000-00-00')
        		{
        			$this->view->ethical['expectationsfamily_withsupervisor']= date('d.m.Y', strtotime($ethicalinfo['expectationsfamily_withsupervisor']));
        		}else{
        			$this->view->ethical['expectationsfamily_withsupervisor']="";
        		}
        		if($ethicalinfo['expectationsfamily_withfamily'] != '0000-00-00')
        		{
        			$this->view->ethical['expectationsfamily_withfamily']= date('d.m.Y', strtotime($ethicalinfo['expectationsfamily_withfamily']));
        		}else{
        			$this->view->ethical['expectationsfamily_withfamily']="";
        		}
        		if($ethicalinfo['expectationsfamily_withotherservices'] != '0000-00-00')
        		{
        			$this->view->ethical['expectationsfamily_withotherservices']= date('d.m.Y', strtotime($ethicalinfo['expectationsfamily_withotherservices']));
        		}else{
        			$this->view->ethical['expectationsfamily_withotherservices']="";
        		}
        		 
        	}
        	 
        	/* -------------------Patient Data--------------------------------------- */
        	$patientarr = $patientmaster->getMasterData($decid, 0);
        	$this->view->birth = $patientarr['birthd'];
        	$this->view->lastname = $patientarr['last_name'];
        	$this->view->firstname = $patientarr['first_name'];
        	 
        	 
        	if($patientarr['living_will_from'] !='0000-00-00'  &&  $patientarr['living_will'] == 1  )
        	{
        		$this->view->patientenverfugung = date('d.m.Y', strtotime($patientarr['living_will_from']));
        	}
        	 
        }

        
        
        

        public function careservicesAction()
        {
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpid($decid);
            $userid = $logininfo->userid;
            $clientid = $logininfo->clientid;
            $this->view->clientid = $clientid;
            	
            $pcs_form = new Application_Form_PatientCareservices();
        
            /* ----------------------Patient Info & Tab menus START-------------------------- */
            $patientmaster = new PatientMaster();
            $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
            $patientinfo = $patientmaster->getMasterData($decid, 0);
            $this->view->patientname = $patientinfo['last_name'].' '.$patientinfo['first_name'];
            
            $tm = new TabMenus();
            $this->view->tabmenus = $tm->getMenuTabs();
        
            /* -------------- client care services  - retirive  data	---------------------------- */
            $groups_arr = CareservicesGroups::get_client_groups($clientid);
            
            foreach($groups_arr as $k=>$gr_data){
                $group_ids[] = $gr_data['id'];
                $group_details[$gr_data['id']]['groupname'] = $gr_data['groupname'];
            }
            
            $items_arr = CareservicesItems::get_groups_items($group_ids);
			$i_id2g_id = array();
            foreach($items_arr as $ki=>$item_data){
                $group_details[$item_data['group_id']]['items'][$item_data['id']] = $item_data;
                // ISPC-2463 @Lore 04.10.2019
                $i_id2g_id[$item_data['id']] = $group_details[$item_data['group_id']]['groupname'];
            }
            
            $this->view->group_details = $group_details;
            
            /* ###################### DEFAULTS - Current day - today ############################### */
            if($_REQUEST['date'])
            {
                if($_REQUEST['sel'] == 1)
                {
                    $date = date('Y-m-d 00:00:00', strtotime($_REQUEST['date']));
                }
                else
                {
                    $date = date('Y-m-d 00:00:00', $_REQUEST['date']);
                }
            }
            else
            {
                $date = date('Y-m-d 00:00:00', time());
            }
            
            $today = date('Y-m-d 00:00:00', time());
            
            $month_start = date('Y-m', strtotime($date))."-01";
            	
            if(!function_exists('cal_days_in_month'))
            {
                $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($month_start)), 1, date("Y", strtotime($month_start))));
            }
            else
            {
                $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($month_start)), date("Y", strtotime($month_start)));
            }
            	
            $month_end = date('Y-m', strtotime($month_start)).'-'.$month_days;
            	
            $selected_date_month_days = $patientmaster->getDaysInBetween($month_start, $month_end);
            
            $this->view->current_month_days = $selected_date_month_days;
            
            
            $previous_date = date('Y-m-d 00:00:00', mktime(date('H', strtotime($date)), date('i', strtotime($date)), 0, date('m', strtotime($date)), date('d', strtotime($date)) - 1, date('Y', strtotime($date))));
            $next_date = date('Y-m-d 00:00:00', mktime(date('H', strtotime($date)), date('i', strtotime($date)), 0, date('m', strtotime($date)), date('d', strtotime($date)) + 1, date('Y', strtotime($date))));
            
            /* ###################### DEFAULTS - Current day - today ############################### */
            $care_services['previous_date'] = date('d.m.Y', strtotime($previous_date));
            $care_services['current_date'] = date('d.m.Y', strtotime($date));
            $care_services['next_date'] = date('d.m.Y', strtotime($next_date));
            
            $this->view->care_services =$care_services;
            
           
            /* -------------- day structure  - retirive form data	---------------------------- */
            $saved_data = PatientCareservices::get_patient_services($ipid,$date);
           
            if($saved_data){
                
                foreach($saved_data as $k=>$sd){
                    $saved_items[$sd['item']][$sd['shift']]['full'] = $sd['full']; 
                    $saved_items[$sd['item']][$sd['shift']]['full_amount'] = $sd['full_amount'];
                    $saved_items[$sd['item']][$sd['shift']]['partial'] = $sd['partial']; 
                    $saved_items[$sd['item']][$sd['shift']]['partial_amount'] = $sd['partial_amount'];
                }
                $this->view->saved_items = $saved_items;
                
            }
            
            	
            /* ---------------------- POST -------------------------- */
            if($this->getRequest()->isPost())
            {
                if(strlen($_POST['save']) > 0 )
                {       
                    
                        $post = $_POST;
                        $post['ipid'] = $ipid;                       
                        $pcs_form->insert($post['care_services']);
                        
                        //ISPC-2463 @Lore 04.10.2019
                        $modules = new Modules();
                        
                        if($modules->checkModulePrivileges("206", $clientid)){
                            $diference =array();
                            foreach($post as $fk => $fv){
                                foreach($fv['items'] as $fik => $fiv){
                                    if (!array_key_exists($fik,$saved_items) || !is_array($saved_items[$fk]) || (empty($saved_items)) ){
                                        $have_save = $saved_items[$fik];
                                                                               
                                        foreach( $fiv as $key_id => $key_val){
                                            $check_diference = array_diff($key_val,$have_save[$key_id]);
                                            
                                            if (empty($saved_items)){
                                                $check_diference = $key_val;
                                            }
                                            if (!empty($check_diference)){
                                                foreach($check_diference as $cd => $cv){
                                                   
                                                    if(!empty($cv)){
                                                         $diference[$fik][$key_id][$cd] = $cv;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (!empty($diference)){
                                $dif_text = '';
                                $den_it = '';
                                $den_gr = '';
                                $last_gr = '';
                                foreach($diference as $gr_id => $gr_val){
                                    
                                    $dif_row = '';
                                    $den_it = $items_arr[$gr_id]['item'];
                                    $den_gr = $i_id2g_id[$gr_id];
                                    
                                    foreach($gr_val as $mom_id => $mom_val){
                                        $momofday =  $this->view->translate($mom_id.'_shift');
                                        
                                        foreach($mom_val as $lask => $valkey){
                                            // if (($lask == 'full_amount') || ($lask == 'partial_amount')){
                                            if (strpos($lask,'amount')){
                                                $lask_tr = explode("_", $lask);
                                                $lask_tr = $lask_tr[0];
                                                
                                                $lask_den =  $this->view->translate('done_'.$lask_tr.'y');
                                                $dif_row .= $momofday.' '.$lask_den.' ('.$valkey.')'." | ";
                                            } else {
                                                //(ISPC-1509) Lore 06.12.2019
                                                $lask_tr = $lask;
                                            
                                                $lask_den =  $this->view->translate('done_'.$lask_tr.'y');
                                                $dif_row .= $momofday.' '.$lask_den." | ";
                                            }
                                        }
                                    }
                                    if ($last_gr != $den_gr){
                                        $dif_text .= $den_gr."\n".'&emsp;'.$den_it.': '.$dif_row." \n";
                                    } else {
                                        $dif_text .=              '&emsp;'.$den_it.': '.$dif_row." \n";
                                    }
                                    $last_gr = $i_id2g_id[$gr_id];
                                }
                                $coursetitle =  $dif_text;
                                
                                $custcourse = new PatientCourse();
                                $custcourse->ipid = $ipid;
                                $custcourse->course_date = date("Y-m-d H:i:s", time());
                                $custcourse->course_type = Pms_CommonData::aesEncrypt("PF");
                                $custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($coursetitle));
                                $custcourse->user_id = $userid;
                                $custcourse->save();
                            }
                        }
                        
                        //.
                        
                        
                        $post['group_details'] = $this->view->group_details ;
                        $post['patientname'] = $patientinfo['last_name'].' '.$patientinfo['first_name'];
                        $post['care_service_date'] = $post['care_services']['date'];
                        
                        $gen_pdf = $this->generate_pdf($post, 'careservices_save', 'careservices_pdf.html');
        
        
                    /* ---------------------- Redirect to verlauf  ------------------- */
                    $this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
                    exit;
                }
                /* ---------------------- Generate pdf  ------------------- */
                else if(strlen($_POST['pdf']) > 0 )
                {
                    $post = $_POST;
                    $post['ipid'] = $ipid;
                    $post['group_details'] = $this->view->group_details ;
                    $post['patientname'] = $patientinfo['last_name'].' '.$patientinfo['first_name'];
                    $post['care_service_date'] = $post['care_services']['date'];
                    
                    $gen_pdf = $this->generate_pdf($post, 'careservices', 'careservices_pdf.html');
                    exit;
                }
            }
            	
        }



        /*
         * IM-145 Entlassungsmanagement
         */
        public function entlassungsmanagementAction(){
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $clientinfo = Pms_CommonData::getClientData($clientid);
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpid($decid);
            $userid = $logininfo->userid;
            $all_users=User::getUsersFast($clientid);
            $aTags = PatientFileTags::get_client_tags($clientid, true);
            //print_r($aTags);
            $this->view->pdf=false;

            $this->view->encid=Pms_Uuid::encrypt($decid);
            if($_POST) {
                $post = Pms_CommonData::clear_pdf_data($_POST);
                $post['ipid'] = $ipid;

                $entry=new FormBlockKeyValue();
                $entry->ipid=$ipid;
                $entry->block="entlassmanagement";
                $entry->k="entlassmanagement";

                if($post['formid']>0){
                    $entry = Doctrine::getTable('FormBlockKeyValue')->find(intval($post['formid']));
                }

                unset($post['formid']);

                $entry->v=json_encode($post);
                $entry->save();

                $this->generate_pdf($post,"entlassungsmanagement_save", "entlassungsmanagement_pdf.html");

                $this->redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
            }

            $fulllist=Doctrine::getTable('FormBlockKeyValue')->findByIpidAndBlockAndIsdelete($ipid, 'entlassmanagement',0);
            $fulllist=$fulllist->toArray();
            array_multisort(array_column($fulllist, 'create_date'),SORT_DESC, $fulllist);
            $this->view->fulllist=$fulllist;




            $prefilldata=array();
            $ma=User::getUsersWithGroupnameFast($clientid);
            $prefilldata['mitarbeiter']=array_column($ma,'name');
            $pd=new PatientDetails($ipid);
            $angeh=$pd->patientdata_get_by_cat('contactperson');
            $angeh_final=array();
            $vollmacht="";
            foreach ($angeh as $person){
                $beautyname=$person['data']['cnt_first_name']." ".$person['data']['cnt_last_name'];
                $angeh_final[]=$beautysname;
                if($person['data']['cnt_hatversorgungsvollmacht'] || $person['data']['cnt_legalguardian']){
                    $vollmacht=$beautyname;
                }
            }
            $prefilldata['angeh']=$angeh_final;
            $vv=new ClinicVersorger();
            $vers=$vv->getPatientData($ipid);

            $vers_final=array();
            foreach ($vers as $vcat){
                foreach ($vcat as $row){
                    $vers_final[]=$row['meta']['label'].": ".$row['extract'][0][1];
                }
            }
            $prefilldata['versorger']=$vers_final;

            $this->view->prefilldata=$prefilldata;



            $fdata=array();
            if($_GET['formid']>0){
                $entry = Doctrine::getTable('FormBlockKeyValue')->find(intval($_GET['formid']));
                $fdata=json_decode($entry->v,1);
                $fdata['formid']=$entry->id;
            }else{
                $patientmaster = new PatientMaster();
                $parr = $patientmaster->get_Masterdata_quick($ipid);
                $dg = new DiagnosisType();
                $abb2 = "'HD'";
                $ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
                $comma = ",";
                $typeid = "'0'";
                foreach($ddarr2 as $key => $valdia)
                {
                    $typeid .=$comma . "'" . $valdia['id'] . "'";
                    $comma = ",";
                }

                $patdia = new PatientDiagnosis();
                $dianoarray = $patdia->getFinalData($ipid, $typeid);
                $dia_as_text_array = [];

                foreach($dianoarray as $dia){
                    $dia_as_text_array[] = $dia['diagnosis'];
                }

                $fdata['diag']=implode(';', $dia_as_text_array);


                $fdata['datum']=date('d.m.Y');
                $fdata['bearbeitet']=$all_users[$userid]['name'];
                $fdata['patient']=$parr['name'];

                $fdata['mass4_bevoll_wer']=$vollmacht;
            }

            $this->view->fdata=$fdata;



            /*----------------- Patient Info & TabMenu ------------------------------*/
            $patientmaster = new PatientMaster();
            $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

            $tm = new TabMenus();
            $this->view->tabmenus = $tm->getMenuTabs();
        }



        /* ######################################################################################### */
        /* ############################### ISPC-1535 Bulk print SH ################################ */
        /* ######################################################################################### */
        
        public function shbulkAction()
        {

            
            setlocale(LC_ALL, 'de_DE');
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $decid = Pms_Uuid::decrypt($_REQUEST['id']);
            $ipid = Pms_CommonData::getIpId($decid);
            $userid = $logininfo->userid;
            $hidemagic = Zend_Registry::get('hidemagic');

            //construct months selector array START
            $start_period = date('Y-m-d', strtotime('-2 months'));
            $end_period = date('Y-m-d', strtotime('+4 months'));
            $period_months_array = Pms_CommonData::get_period_months($start_period, $end_period, 'Y-m');
            
            foreach($period_months_array as $k_month => $v_month)
            {
                $month_select_array[$v_month] = $v_month;
            }
            //construct months selector array END
            
           $selected_month = date('Y-m', strtotime('+1 months'));
            
            
           //TODO-3668 Ancuta 15.12.2020
           
           //ISPC-2609 Ancuta 28.08.2020 + Changes on  07.09.2020
           //get printjobs - active or completed - for client, user and invoice type
               $allowed_invoice_name =  'shbulkfiles';
               $this->view->allowed_invoice = $allowed_invoice_name;
               $invoice_user_printjobs = PrintJobsBulkTable::_find_invoices_print_jobs($clientid,$userid,$allowed_invoice_name );
               $print_html = '<div class="print_jobs_div">';
               $print_html .= "<h3> ".$this->view->translate('print_job_table_headline')."</h3>";
               $print_html .= '<span id="clear_user_jobs" class="clear_user_jobs" data-user="'.$userid.'"  data-invoice_type="'.$allowed_invoice_name .'" data-client="'.$clientid.'"> '.$this->view->translate('Clear_all_prints')."</span>";
               $table_html = $this->view->tabulate($invoice_user_printjobs,array("class"=>"datatable",'id'=>'print_jobs_table','escaped'=>false));
               $print_html .= $table_html;
               $print_html .= '</div>';
               $this->view->print_html  = "";
    
               if(count($invoice_user_printjobs) > 1 ){
                   $this->view->print_html =  $print_html;
               }
               
               $this->view->show_print_jobs = $this->user_print_jobs;
           //---
           
            
            //construct month_selector START
            $attrs['class'] = 'sh_month_selector';
            $this->view->months_selector = $this->view->formSelect("select_month", $selected_month, $attrs, $month_select_array);
            //construct month_selector END
            
            $this->view->selected_month = $selected_month;
            $this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
 
            
            //get active ipids details
            $sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
            $sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
            $sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
            $sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
            $sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
            $sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
            $sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
            $sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
            $sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
            $sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
            $sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
            $sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";
            
            // if super admin check if patient is visible or not
            if($logininfo->usertype == 'SA')
            {
                $sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex ";
            }
            
            $q = Doctrine_Query::create()
            ->select($sql)
            ->from('EpidIpidMapping e')
            ->leftJoin('e.PatientMaster p')
            ->leftJoin('e.PatientActive a')
            ->where('e.clientid = "'.$clientid.'" ')
            ->andWhere('p.isdelete = 0')
            ->andWhere('p.isstandby = 0')
            ->andWhere('p.isdischarged = 0')
            ->andWhere('p.isstandbydelete = 0');
            $active_ipids_details =   $q->fetchArray();
            
            
            foreach($active_ipids_details as $k_active_patient => $v_active_patient)
            {
                $active_patients[$v_active_patient['ipid']] = $v_active_patient;
            
                $active_ipids[] = $v_active_patient['ipid'];
            
                $last_period[$v_active_patient['ipid']] = end($v_active_patient['PatientActive']);
            
                $active_patients[$v_active_patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['start']));
            
                if($last_period[$v_active_patient['ipid']]['end'] != "0000-00-00")
                {
                    $active_patients[$v_active_patient['ipid']]['discharge_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['end']));
                }
                else
                {
                    $active_patients[$v_active_patient['ipid']]['discharge_date'] = "-";
                }
                $active_patients[$v_active_patient['ipid']]['id'] = $v_active_patient['PatientMaster']['id'];
            
                $active_patients[$v_active_patient['ipid']]['birthd'] =  date('d.m.Y', strtotime( $v_active_patient['PatientMaster']['birthd']));
            }
            
            $this->view->active_patients = $active_patients;
            
            if(empty($active_ipids))
            {
                $active_ipids[] = '99999999999999999';
            }
 
            
            if($this->getRequest()->isPost())
            {
                //TODO-3668 Ancuta 15.12.2020
                if( !isset($this->user_print_jobs) || $this->user_print_jobs == 0 ){
                    
                    if($_POST['generate_bulk'])
                    {
                        if($_POST['select_month'] ){
                            $month = $_POST['select_month'];
                        }
                        
                        $this->_redirect(APP_BASE . 'patientformnew/shbulkfiles?month='.$month);
                        exit;
                    }
                    
                } elseif( isset($this->user_print_jobs) && $this->user_print_jobs == 1 ){
                    
                    if($_POST['select_month'] ){
                        $month = $_POST['select_month'];
                    }
                    
                    $params['print_job'] = '1'; //stop downloading files, just save them //ISPC-2609 Ancuta 01.09.2020
                    $params['clientid'] = $clientid;
                    $params['userid'] = $userid;
                    $params['month'] = $month;
                    
                    $print_job_data = array();
                    $print_job_data['clientid'] = $clientid;
                    $print_job_data['user'] = $userid;
                    $print_job_data['page'] =  APP_BASE . $this->getRequest()->getControllerName() . '/' . $this->getRequest()->getActionName();;
                    $print_job_data['output_type'] = 'pdf';
                    $print_job_data['status'] = 'active';
                    $print_job_data['invoice_type'] = 'shbulkfiles';
                    $print_job_data['print_params'] = serialize($params);
                    $print_job_data['print_function'] = 'shbulkfilesAction';
                    $print_job_data['print_controller'] = 'patientformnew';

                    foreach($active_ipids_details as $k=>$pdata){
                        $print_job_data['PrintJobsItems'][] = array(
                            'clientid'=>$print_job_data['clientid'],
                            'user'=>$print_job_data['user'],
                            'item_type'=>'shbulkfiles',
                            'invoice_type'=>'shbulkfiles',
                            'ipid'=> $pdata['ipid'],
                            'status'=>"new"
                        );
                    }
                    
                    $PrintJobsBulk_obj = PrintJobsBulkTable::getInstance()->findOrCreateOneBy('id', null, $print_job_data);
                    $print_id = $PrintJobsBulk_obj->id;
                    
                    if($print_id){
                        $this->__StartPrintJobs();
                    }
                    
                    $msg="";
                    if($print_id){
                        $msg = '?flg=suc&msg=inform_print_job_created&jobid='.$print_id;
                    }
                    $this->_redirect(APP_BASE . 'patientformnew/shbulk'.$msg); //to avoid resubmission
                    exit;
                }
                //TODO-3668 Ancuta 15.12.2020 END
    
            }
        }        
        
        
        //TODO-3668 Ancuta 15.12.2020
        public function shbulkfilesAction($params = array())
        {
            setlocale(LC_ALL, 'de_DE.UTF-8');
            $this->_helper->layout->setLayout('layout_ajax');
            $this->_helper->viewRenderer->setNoRender();
        
            $patientmaster = new PatientMaster();
            $hidemagic = Zend_Registry::get('hidemagic');
            $sapv = new SapvVerordnung();
            
            if(isset($params) && !empty($params) && !empty($params['clientid']) ){
                $clientid = !empty($params['clientid']) && $params['clientid'] != 0 ? $params['clientid'] : $logininfo->clientid;
                $userid = !empty($params['userid']) && $params['userid'] != 0 ? $params['userid'] : $logininfo->userid;
                
                $_REQUEST['month'] = $params['month'];
            }
            else
            {
                $logininfo = new Zend_Session_Namespace('Login_Info');
                $clientid = $logininfo->clientid;
                $userid = $logininfo->userid;
            }
            
            
            $client_details = Pms_CommonData::getClientData($clientid);
            
            
            $posted_ipids= array();
            if($this->getRequest()->isPost())
            {
                //if($_POST['generate_sh'] == "1" && strlen($_POST['sh_month']) > 0  )
                if($_POST['generate_form'] == "1" && strlen($_POST['form_month']) > 0  )
                {
                    $selected_month = $_POST['form_month'];

                    $a_post = $_POST;
                    foreach($a_post['patients_ids'] as $$k => $enryptped_id)
                    {
                        $decripted_ids[] = Pms_Uuid::decrypt($enryptped_id);
                    }
                    
                    $patient_ipids_q = Doctrine_Query::create()
                    ->select('ipid')
                    ->from('PatientMaster')
                    ->where('isdelete = 0')
                    ->andWhereIn('id',$decripted_ids);
                    $patient_ipids_arr = $patient_ipids_q->fetchArray();
                    
                    foreach($patient_ipids_arr as $kip=>$p_ipid)
                    {
                        $posted_ipids[] = $p_ipid['ipid'];
                    }
                }
            }
            else
            {
                $selected_month = $_REQUEST['month'];
            }

            if( ! empty($params['ipids'])){
                $posted_ipids = $params['ipids'];
            }
            
            $forms2pdf = array(
                "shimplementationproof",
                "shanlage14"
                );
            
            $this->view->folder_stamp = time();
        
            
            $this->view->selected_month = $selected_month;
            $this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
            
            if(!function_exists('cal_days_in_month'))
            {
                $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
            }
            else
            {
                $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
            }
            
            
            $months_details[$selected_month]['start'] = $selected_month . "-01";
            $months_details[$selected_month]['days_in_month'] = $month_days;
            $months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
            //check if a month is selected END
 
            //get active ipids details
            $sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
            $sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
            $sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
            $sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
            $sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
            $sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
            $sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
            $sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
            $sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
            $sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
            $sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
            $sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";
            
            // if super admin check if patient is visible or not
            if($usertype == 'SA')
            {
                $sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
                $sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex ";
            }
            
            
            if(!empty($posted_ipids))
            {
                $q = Doctrine_Query::create()
                    ->select($sql)
                    ->from('EpidIpidMapping e')
                    ->leftJoin('e.PatientMaster p')
                    ->leftJoin('e.PatientActive a')
                    ->where('e.clientid = "'.$clientid.'" ')
                    ->andWhereIn('p.ipid',$posted_ipids);
                $active_ipids_details =   $q->fetchArray();
            } 
            else
            {
                $q = Doctrine_Query::create()
                    ->select($sql)
                    ->from('EpidIpidMapping e')
                    ->leftJoin('e.PatientMaster p')
                    ->leftJoin('e.PatientActive a')
                    ->where('e.clientid = "'.$clientid.'" ')
                    ->andWhere('p.isdelete = 0')
                    ->andWhere('p.isstandby = 0')
                    ->andWhere('p.isdischarged = 0')
                    ->andWhere('p.isstandbydelete = 0');
                $active_ipids_details =   $q->fetchArray();
            }
            
            foreach($active_ipids_details as $k_active_patient => $v_active_patient)
            {
                $active_patients[$v_active_patient['ipid']] = $v_active_patient;
            
                $active_ipids[] = $v_active_patient['ipid'];
            
                $last_period[$v_active_patient['ipid']] = end($v_active_patient['PatientActive']);
            
                $active_patients[$v_active_patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['start']));
            
                if($last_period[$v_active_patient['ipid']]['end'] != "0000-00-00")
                {
                    $active_patients[$v_active_patient['ipid']]['discharge_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['end']));
                }
                else
                {
                    $active_patients[$v_active_patient['ipid']]['discharge_date'] = "-";
                }
                $active_patients[$v_active_patient['ipid']]['id'] = $v_active_patient['PatientMaster']['id'];

                $active_patients[$v_active_patient['ipid']]['birthd'] =  date('d.m.Y', strtotime( $v_active_patient['PatientMaster']['birthd']));
            }
            
            $this->view->active_patients = $active_patients;

            if(empty($active_ipids))
            {
                $active_ipids[] = '99999999999999999';
            }
 
            $this->view->active_patients = $active_patients;
            
            // Current month
            $current_period = $months_details[$selected_month];
            
            
            //get selected month days
            if($months_details[$selected_month])
            {
                $selected_month_days = $patientmaster->getDaysInBetween($months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
                $selected_month_days_dmY = $patientmaster->getDaysInBetween($months_details[$selected_month]['start'], $months_details[$selected_month]['end'],false,"d.m.Y");
            }
            
            // Client National holidays 
            $nhollyday = new NationalHolidays();
            $national_holidays_arr = $nhollyday->getNationalHoliday($clientid, $current_period['start'], true);
            
            foreach($national_holidays_arr as $k_natholliday => $v_natholliday)
            {
                $client_national_holidays[] = date('d.m.Y', strtotime($v_natholliday['NationalHolidays']['date']));
            }

            
            // Patients health insurance
            $phelathinsurance = new PatientHealthInsurance();
            $healthinsu_array = $phelathinsurance->get_patients_healthinsurance($active_ipids);
            
            foreach($healthinsu_array as $k=>$ph){
                $patients_health[$ph['ipid']] = $ph; 
            }
            
            //user data
            $user = User::getUserDetails($userid);
            
            
            
            foreach($active_patients as $pipid => $pdata){
                
                if(in_array("shimplementationproof",$forms2pdf)){
                    
                    //#############################################################
                    // 1. SH Durchführungsnachweis - ISPC-1079   ----------  START
                    //#############################################################
                    $post['shimplementationproof'] = array();
                    $post['shimplementationproof']['epid'] = $pdata['epid'];
                    $post['shimplementationproof']['first_name'] = $pdata['first_name'];
                    $post['shimplementationproof']['last_name'] = $pdata['last_name'];
                    $post['shimplementationproof']['birthd'] = $pdata['birthd'];
                    $post['shimplementationproof']['national_holidays'] = $client_national_holidays;
         
                    //set current period to work with
                    $post['shimplementationproof']['current_period'] = $current_period;
                    $post['shimplementationproof']['month_year'] = strftime('%B %Y', strtotime($current_period['start']));
                
                    //format array days to d.m.Y
                    array_walk($selected_month_days, function(&$value) {
                        $value = date("d.m.Y", strtotime($value));
                    });
                    // NOT USED
                    $post['shimplementationproof']['shortcuts_old'] = array(
                        'usage_1', 'usage_2', 'usage_3', 'usage_4', 'usage_5',
                        'spacer', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'
                    );
                    // USED ISPC-2207 11.06.2018
                    $post['shimplementationproof']['shortcuts'] = array(
                        'usage_1_new',
                        'spacer',
                        'sh_title',
                        'spacer',
                        'sh_bowel movement',
                        'sh_symptom control',
                        'sh_control material',
                        'sh_order_marerial',
                        'empty','empty', 'empty','empty', 'empty','empty', 'empty', 'empty', 'empty'
                    );
                    $post['shimplementationproof']['selected_month_days'] = $selected_month_days;
    
                    //save pdf as file
                    $files[] = $this->generate_joined_files_pdf('4', $post['shimplementationproof'], 'shimplementationproof', 'shimplementationproof_pdf.html',$params);
     
                    //#############################################################
                    // 1. SH Durchführungsnachweis - ISPC-1079   ----------  END
                    //#############################################################
                }
                
                if(in_array("shanlage14",$forms2pdf)){
                    
                    //#############################################################
                    // 2. SH Anlage 14 - ISPC-1076    ---------------------  START
                    //#############################################################
                    $post['shanlage14']['epid'] = $pdata['epid'];
                    $post['shanlage14']['first_name'] = $pdata['first_name'];
                    $post['shanlage14']['last_name'] = $pdata['last_name'];
                    $post['shanlage14']['birthd'] = $pdata['birthd'];

            
                    if($client_details)
                    {
                        $post['shanlage14']['betriebsstatten_nr'] = $client_details[0]['betriebsstattennummer'];
                        $post['shanlage14']['sapv_team'] = $client_details[0]['team_name'];
                    }
            
                    //set current period to work with
                    $post['shanlage14']['current_period'] = $current_period;
                    $post['shanlage14']['month_year'] = strftime('%B %Y', strtotime($current_period['start']));
    
                    $post['shanlage14']['selected_month_days'] = $selected_month_days;
            
                    $shortcuts_arr = array(
                        'sh_beko',
                        'sh_folgeko',
                        'sh_doc_non_hospiz_visits',
                        'sh_nur_non_hospiz_visits',
                        'sh_other_visits',
                        'sh_doc_hospiz_visits',
                        'sh_telefonat',
                        'sh_flatrate',
                        //used only in custom totals
                        'sh_nur_visits',
                        'sh_nur_hospiz_visits',
                    );
            
                    $visits_shortcuts = array(
                        'sh_doc_non_hospiz_visits',
                        'sh_nur_non_hospiz_visits',
                        'sh_other_visits',
                        'sh_doc_hospiz_visits',
                        //used only in custom totals
                        'sh_nur_hospiz_visits',
                        'sh_nur_non_hospiz_visits',
                    );
            
                    //shortcuts calculated internaly but not shown in view
                    $excluded_shortcuts = array(
                        'sh_nur_visits',
                        'sh_nur_hospiz_visits',
                    );
            
                    $post['shanlage14']['shortcuts'] = $shortcuts_arr;
                    $post['shanlage14']['excluded_shortcuts'] = $excluded_shortcuts;
            
                    $post['shanlage14']['patient_first_name'] = $pdata['first_name'];
                    $post['shanlage14']['patient_last_name'] = $pdata['last_name'];
                    $post['shanlage14']['patient_dob'] = $pdata['birthd'];
            
                    //patient HEALTH INSURANCE START
                    $post['shanlage14']['hi_company_name'] = $patients_health[$pipid]['company_name'];
                    $post['shanlage14']['insurance_no'] = $patients_health[$pipid]['insurance_no'];
                    //patient HEALTH INSURANCE START
                    
                    $post['shanlage14']['start_date_erst'] = "";
                    $post['shanlage14']['start_date_folge'] = '';
                    
                    $post['shanlage14']['clientid'] = $clientid;
                    $post['shanlage14']['curent_month'] = $months_details[$selected_month]['start'];
                    $post['shanlage14']['selected_month_days'] = $selected_month_days;
                    $post['shanlage14']['current_period'] = $current_period;


                    $post['betriebsstatten_nr'] = $client_details[0]['betriebsstattennummer'];
                    $post['sapv_team'] = $client_details[0]['team_name'];
         
                    $post['shanlage14']['master_data']['raapv_sapv_date'] = '';
                    $post['shanlage14']['master_data']['aapv_start'] = '';
                    $post['shanlage14']['master_data']['aapv_end'] = '';

                    $post['shanlage14']['master_data']['khws_sapv_date'] = '';


                    $post['shanlage14']['master_data']['stathospiz_sapv_date'] = '';
                    $post['shanlage14']['master_data']['hospiz_start'] = '';
                    $post['shanlage14']['master_data']['hospiz_end'] = '';

                    $post['shanlage14']['master_data']['pwunsch_sapv_date'] = '';
                    $post['shanlage14']['master_data']['patient_wish_start'] ='';
                    $post['shanlage14']['master_data']['patient_wish_end'] = '';

                    $post['shanlage14']['master_data']['dead_sapv_date'] = '';

                    foreach($anlage14_res['patient_hospitals'] as $k_res => $v_res)
                    {
                        $post['shanlage14']['hospital_start'][$k_res] = $v_res['start'];
                        $post['shanlage14']['hospital_end'][$k_res] = $v_res['end'];
                    }
                    unset($anlage14_res['patient_hospitals']);


                    $post['shanlage14']['overall_beko'] = '0';
                    $post['shanlage14']['overall_folgeko'] = '0';
                    $post['shanlage14']['overall_doc_nur_non_hospiz'] = '0';
                    $post['shanlage14']['overall_doc_nur_hospiz'] = '0';
                    $post['shanlage14']['overall_phones'] = '0';
                    
                    $post['shanlage14']['master_data']['real_active_days'] = $selected_month_days_dmY;
                    $post['shanlage14']['master_data']['hospital_days'] = array();
            
                    
                    $files[] = $this->generate_joined_files_pdf('4', $post['shanlage14'], 'shanlage14', 'shanlage14_pdf.html',$params);
                    //#############################################################
                    // 2. SH Anlage 14 - ISPC-1076    --------------------- END
                    //#############################################################
                   }
            }

            
            //Final step merge generated files!
            $patient_data['ipid'] = $ipid;
            $patient_data['epid'] = $patient_epid;
            $source = 'ShBulk';
            if($params['bulk_print'] == '1'){
                     
                $f  = $this->join_pdfs($files, $patient_data ,$source,$params);
                return $f;
                
            } else{
                
                $this->join_pdfs($files, $patient_data ,$source);
            }
            
        }
        
        
        public function fallprotocolAction()
        {

        	$decid = Pms_Uuid::decrypt($_GET['id']);
        	$logininfo = new Zend_Session_Namespace('Login_Info');
        	$clientid = $logininfo->clientid;
        	$ipid = Pms_CommonData::getIpId($decid);
        	
        	
        	/*			 * ******* Patient Information ************ */
        	$patientmaster = new PatientMaster();
        	$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        	$tm = new TabMenus();
        	$this->view->tabmenus = $tm->getMenuTabs();
        	/*			 * ****************************************** */
        	 
        	//==========header form====================================
        	$patientmaster = new PatientMaster();
        	$patientinfo = $patientmaster->getMasterData($decid, 0);
        	
        	$this->view->patientname = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] ;
        	$this->view->birthdate = $patientinfo['birthd'];
        	 //===========end header form==============================

        	$fileupload = new PatientFileUpload();
        	$form_files = $fileupload->get_fall_protokol_file_data($ipid);
        	
        	$users_ids[] = '999999999999';
        	foreach($form_files as $k_file => $v_file)
        	{
        	    $users_ids[] = $v_file['create_user'];
        	}
        	$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
        	$this->view->fall_protocol_files_history = $form_files;
        	//============POST DATA=======================================
        	if($this->getRequest()->isPost())
        	{
        		if(strlen($_POST['save']) > 0 )
        		{
        	
        	
        			$post = $_POST;
        			//print_r($post); exit;
        			//exit();
        			$post['ipid'] =$ipid;
        	
        			
        		
        			$fallprotocol = new Application_Form_FallprotocolForm();
        			
        			
        			$fallprotocolinfo_id = $fallprotocol->InsertData($post);
        			$post['form_id'] = $fallprotocolinfo_id;
        			$post['patientname']= $patientinfo['last_name'] . ", " . $patientinfo['first_name'] ;
        			$post['birthdate'] = $patientinfo['birthd'];
        			
        			
        			$gen_pdf = $this->generate_pdf($post, 'fallprotocolform_save', 'fallprotocolform_pdf.html');
        			
        			/* ---------------------- Redirect to verlauf  ------------------- */
        			$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
        			exit;
        			
        		}
        		else if(strlen($_POST['pdf']) > 0 )
        		{
        			$post = $_POST;
        			$post['patientname']= $patientinfo['last_name'] . ", " . $patientinfo['first_name'] ;
        			$post['birthdate'] = $patientinfo['birthd'];
        			//print_r($post); exit;
        			$post['ipid'] = $ipid;
        			$gen_pdf = $this->generate_pdf($post, 'fallprotocolform', 'fallprotocolform_pdf.html');
        			exit;
        		}
        	
        	}
        	//===========end POST DATA============================================
        }
        
        
        public function sapvevaluationAction()
        {
            
        	//$decid = Pms_Uuid::decrypt($_GET['id']);
        	$decid = $this->dec_id;
        	//$logininfo = new Zend_Session_Namespace('Login_Info');
        	$clientid = $this->logininfo->clientid;
        	$userid = $this->logininfo->userid;
        	//$ipid = Pms_CommonData::getIpId($decid);
        	$ipid = $this->ipid;
        	 
        	/* ----------------- Patient Information:  Header & Tab menu ----------------------------------- */
        	$patientmaster = new PatientMaster();
        	//$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        	//$tm = new TabMenus();
        	//$this->view->tabmenus = $tm->getMenuTabs();
        	
        	/* ----------------- Client Details ------------------------------------------------------------ */
        	$clientinfo = Pms_CommonData::getClientData($clientid);
        	$client_details = $clientinfo[0];

        	$form['general']['client_bsnr'] = $client_details['betriebsstattennummer'];
        	$form['general']['client_iknumber'] = $client_details['institutskennzeichen'];
        	
        	/* ----------------- Patient Details ------------------------------------------------------------ */

        	$sql = 'e.epid, p.ipid, e.ipid,';
        	$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
        	$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
        	$sql .= "AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') as gender,";
        	$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
        	$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
        	$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
        	$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
        	$sql .= "IF(p.admission_date != '0000-00-00',DATE_FORMAT(p.admission_date,'%d\.%m\.%Y'),'') as day_of_admission,";
        	$sql .= "IF(p.birthd != '0000-00-00',DATE_FORMAT(p.birthd,'%d\.%m\.%Y'),'') as birthd,";

        	$conditions['periods'][0]['start'] = '2009-01-01';
        	$conditions['periods'][0]['end'] = date('Y-m-d');
        	$conditions['client'] = $clientid;
        	$conditions['include_standby'] = true;
        	$conditions['ipids'] = array($ipid);
        	 
        	$patient_days = Pms_CommonData::patients_days($conditions,$sql);

        	
        	//print_r($patient_days ); exit;
        	
        	foreach($patient_days as $pat_ipid => $data)
        	{
        	    $adm_substitute = 1; 
        	    foreach($data['active_periods'] as $period_identification => $period_details)
        	    {
        	        
        	        $admission_periods[$pat_ipid][$adm_substitute ]['start'] = $period_details['start'];
        	        $admission_periods[$pat_ipid][$adm_substitute ]['end'] = $period_details['end'];
        	        $admission_ids[$pat_ipid][] = $adm_substitute ;
        	        $adm_substitute++;
        	    }
        	
        	    $overall_periods[$ipid] = array_values($data['active_periods']);
        	    $overall[$ipid]['start'] = $overall_periods[$ipid][0]['start'];
        	    $last_period[$ipid] = end($overall_periods[$ipid]);
        	    $overall[$ipid]['end'] = $last_period[$ipid]['end'];
        	
        	    $patient_details[$pat_ipid]['last_name'] = $data['details']['last_name'];
        	    $patient_details[$pat_ipid]['first_name'] = $data['details']['first_name'];
        	    $patient_details[$pat_ipid]['street1'] = $data['details']['street1'];
        	    $patient_details[$pat_ipid]['zip'] = $data['details']['zip'];
        	    $patient_details[$pat_ipid]['birthd'] = date("d.m.Y",strtotime($data['details']['birthd']));
        	
        	    // days of treatment in  period
        	    $patient_details[$pat_ipid]['active_days'] = $data['real_active_days'];
        	    if(!empty( $data['hospital']['real_days_cs'])){
            	    $patient_details[$pat_ipid]['hospital_days'] = $data['hospital']['real_days_cs'];
        	    } else{
            	    $patient_details[$pat_ipid]['hospital_days'] = array();
        	    }
           	    $patient_details[$pat_ipid]['hospital_days_no'] = $data['hospital']['real_days_cs_no'];
        	}
        	
        	$this->view->admission_periods = $admission_periods[$ipid];
        	$last_admissionid[$ipid] = end($admission_ids[$ipid]);

        	
        	
        	//depending on fall
        	if(empty($_REQUEST['admissionid']))
        	{
        	    //show current admission if opened OR last admission in closed 
        	    //TODO-2562 - current admission is also the last admission
        	      /* foreach($admission_periods[$ipid] as $admisison_id =>$period_detailss ){

        	      $current_date = date("d.m.Y",time());
        	        if(Pms_CommonData::isintersected(strtotime($current_date), strtotime($current_date), strtotime($period_detailss['start']), strtotime($period_detailss['end'])))
        	        {
        	            $selected_period['start'] = $admission_periods[$ipid][$admisison_id]['start'];
        	            $selected_period['end'] =  $admission_periods[$ipid][$admisison_id]['end'];
        	             
        	            foreach($patient_details[$ipid]['active_days'] as $kd => $aval)
        	            {
        	                $r1start = strtotime($aval);
        	                $r1end = strtotime($aval);
        	                $r2start = strtotime($selected_period['start']);
        	                $r2end = strtotime($selected_period['end']);
        	                if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end)){
        	                    $active_days[$ipid][] =  $aval;
        	                }
        	            }
        	            $form_admissionid  = $admisison_id;
        	            
        	        }
        	        else
        	        { */
        	            
                        $selected_period['start'] = $admission_periods[$ipid][$last_admissionid[$ipid]]['start'];
        	            $selected_period['end'] =  $admission_periods[$ipid][$last_admissionid[$ipid]]['end'];
        	             
        	            /* foreach($patient_details[$ipid]['active_days'] as $kd => $aval)
        	            {
        	                $r1start = strtotime($aval);
        	                $r1end = strtotime($aval);
        	                $r2start = strtotime($selected_period['start']);
        	                $r2end = strtotime($selected_period['end']);
        	                if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end)){
        	                    $active_days[$ipid][] =  $aval;
        	                }
        	            } */
        	            $form_admissionid = $last_admissionid[$ipid];
        	        //}
        	    //}
        	    
        	    foreach($patient_details[$ipid]['active_days'] as $kd => $aval)
        	    {
        	    	$r1start = strtotime($aval);
        	    	$r1end = strtotime($aval);
        	    	$r2start = strtotime($selected_period['start']);
        	    	$r2end = strtotime($selected_period['end']);
        	    	if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end)){
        	    		$active_days[$ipid][] =  $aval;
        	    	}
        	    }
        	}
        	else
        	{
        	    $selected_period['start'] = $admission_periods[$ipid][$_REQUEST['admissionid']]['start'];
        	    $selected_period['end'] =  $admission_periods[$ipid][$_REQUEST['admissionid']]['end'];
        	
        	    foreach($patient_details[$ipid]['active_days'] as $kd => $aval)
        	    {
        	        $r1start = strtotime($aval);
        	        $r1end = strtotime($aval);
        	        $r2start = strtotime($selected_period['start']);
        	        $r2end = strtotime($selected_period['end']);
        	        if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end)){
        	            $active_days[$ipid][] =  $aval;
        	        }
        	    }
        	    
        	    $form_admissionid = $_REQUEST['admissionid'];
        	}

             // !!!!!!!         	
        	$this->view->admissionid = $form_admissionid;
        	
        	foreach($patient_days[$ipid]['active_periods'] as $aid =>$a_periods ){
        	    $admission_days[] = $a_periods['start'];
        	    $discharge_days[] = $a_periods['end'];
        	}
        	
        	$patient_epid = $patient_days[$ipid]['details']['epid']; 
        	$patient_last_name = $patient_days[$ipid]['details']['last_name']; 
        	$patient_first_name = $patient_days[$ipid]['details']['first_name']; 
        	$patient_birthd = $patient_days[$ipid]['details']['birthd']; 
        	$patient_zip = $patient_days[$ipid]['details']['zip']; 
        	$patient_gender = $patient_days[$ipid]['details']['gender']; 

        	
        	$form['msp1']['patient_epid'] = $patient_epid; 
        	$form['msp1']['patient_last_name'] = $patient_last_name; 
        	$form['msp1']['patient_first_name'] = $patient_first_name; 
        	$form['msp1']['patient_birthd'] = $patient_birthd; 
        	$form['msp1']['patient_zip'] = $patient_zip; 
        	$form['msp1']['patient_gender'] = $patient_gender; 
        	
        	
        	
        	$form['msp2']['patient_epid'] = $patient_epid; 
        	$form['msp2']['patient_last_name'] = $patient_last_name; 
        	$form['msp2']['patient_first_name'] = $patient_first_name; 
        	$form['msp2']['patient_birthd'] = $patient_birthd; 
        	$form['msp2']['patient_zip'] = $patient_zip; 
        	$form['msp2']['patient_gender'] = $patient_gender; 
        	
        	
        	
        	$form['ipos1']['patient_epid'] = $patient_epid; 
        	$form['ipos1']['patient_last_name'] = $patient_last_name; 
        	$form['ipos1']['patient_first_name'] = $patient_first_name; 
        	$form['ipos1']['patient_birthd'] = $patient_birthd; 
        	$form['ipos1']['patient_zip'] = $patient_zip; 
        	$form['ipos1']['patient_gender'] = $patient_gender; 
        	
        	
        	

        	
        	
        	
        	//$form['msp1']['first_admission'] = $admission_days[0]; 

        	if($patient_days[$ipid]['details']['isdischarged'] == "1")
        	{
        	   $form['msp2']['last_discharge'] = end($discharge_days); 
        	} 
        	else
        	{
        	   $form['msp2']['last_discharge'] = ""; 
        	}
        	

        	/* ----------------- Patient Details - SAPV ----------------------------------------- */
        	$sav = new SapvVerordnung();
        	$sapv_array =  $sav->get_all_sapvs($ipid);

        	if($sapv_array)
        	{
            	foreach($sapv_array as $k_sapv => $v_sapv)
            	{
            		$sapv_types = explode(",",$v_sapv['verordnet']); //TODO-2562 - correct 24h-Bereitschaft - filter by sapv vv, tv and status !=1
            		if((in_array('3', $sapv_types) || in_array('4', $sapv_types)) && $v_sapv['status'] != '1')
            		{
	            	    $start = $v_sapv['verordnungam'] != '0000-00-00 00:00:00' ? date('Y-m-d', strtotime($v_sapv['verordnungam'])) : "";
	            	    $end = $v_sapv['verordnungbis'] != '0000-00-00 00:00:00' ? date('Y-m-d', strtotime($v_sapv['verordnungbis'])) : "";
	            		
	            	    /* if($v_sapv['status'] == '1' && $v_sapv['verordnungam'] != '0000-00-00 00:00:00')
	            	    {
	            	        $end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
	            	    }
	            	    else
	            	    {
	            	        $end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
	            	    } */
	            	    
	            	    if(empty($patient_sapv_days))
	            	    {
	            	        $patient_sapv_days = array();
	            	    }
	            	
	            	    $patient_sapv_days = array_merge($patient_sapv_days, PatientMaster::getDaysInBetween($start, $end,false,"d.m.Y"));
            		}
            	
            	}
            	$patient_days[$ipid]['sapv_days'] = $patient_sapv_days;

            	
            	
            	$patient_details[$ipid]['sapv_days'] = $patient_sapv_days;
            	array_walk($patient_details[$ipid]['sapv_days'], function(&$value) {
            	    $patient_details[$ipid]['sapv_days'] = date('d.m.Y', strtotime($value));
            	});
            	
            	foreach($patient_details[$ipid]['sapv_days'] as  $sdata){
            	    if(in_array($sdata,$active_days[$ipid])){
            	       $patient_details[$ipid]['sapv_days_period'][] = $sdata; 
            	    }
            	}
            	
            	$sapv_in_period = $patient_details[$ipid]['sapv_days_period'];
            	array_walk($sapv_in_period, function(&$value) {
            	    $value = strtotime($value);
            	});
            	
            	    asort($sapv_in_period, SORT_NUMERIC);
            	
            	    $sapv_in_period = array_values(array_unique($sapv_in_period));
            	
            	    $patient_details[$ipid]['sapv_days_period'] = $sapv_in_period;
            	    array_walk($patient_details[$ipid]['sapv_days_period'], function(&$value) {
            	        $value = date('d.m.Y', $value);
            	    });
            	
            	if(!empty($patient_details[$ipid]['sapv_days_period'])){
            	    $form['msp1']['first_admission'] = $patient_details[$ipid]['sapv_days_period'][0];
            	}
            	
            	$first_sapv_ever = $sapv_array[0];
            	$first_sapv_types = explode(",",$first_sapv_ever['verordnet']);
            	$form['msp1']['first_sapv_types'] = $first_sapv_types;
            	
            	
        	    $last_sapv = end($sapv_array);
        	    $last_sapv_types = explode(",",$last_sapv['verordnet']);
            	$form['msp2']['latest_sapv'] = $last_sapv_types;
        	
        	}
        	
        	
        	//Tage mit 24h-Bereitschaft: counts all active days in period( non hospital and with active sapv in period ? !!!
        	$new_active_days = array();
        	foreach($active_days[$ipid] as $s => $day){
        	    if(in_array($day,$patient_days[$ipid]['sapv_days']) && !in_array($day,$patient_details[$ipid]['hospital_days']) ){
            	    $new_active_days[$ipid][]  = $day;
        	    }
        	}
        	
        	$form['msp2']['more_information_24'] = count($new_active_days[$ipid]);
 
        	// Intermittierung (Anzahl): counts all hospital days in period ?
        	$form['msp2']['intermittent_number'] = $patient_details[$pat_ipid]['hospital_days_no'];

        	
        	


        	/* ----------------- Patient Details - Health insurance ----------------------------------------- */
        	$phelathinsurance = new PatientHealthInsurance();
        	$healthinsu_array = $phelathinsurance->get_multiple_patient_healthinsurance(array($ipid),true); // get patient health insurance, including health insurance master data

        	$form['general']['health_insurance_name'] = $healthinsu_array[$ipid]['company_name'];
        	
        	
        	if(strlen($healthinsu_array[$ipid]['kvk_no']) > 0  )
        	{
            	$form['general']['health_insurance_kassen_nr'] = $healthinsu_array[$ipid]['kvk_no'];
        	} 
        	else
        	{
            	$form['general']['health_insurance_kassen_nr']  = $healthinsu_array[$ipid]['company']['kvnumber'];
        	}

        	/* ----------------- Patient Details - Contact froms ----------------------------------------- */
        	$deleted_visits = Doctrine_Query::create()
        	->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
        	->from('PatientCourse')
        	->where("ipid LIKE  '" . $ipid . "' ")
        	->andWhere('wrong=1')
        	->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
        	->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_doctor_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_nurse_form")) . '"   OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("bayern_doctorvisit")) . '"   OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("contact_form")) . '"  ');
        	$deleted_visits_array = $deleted_visits->fetchArray();

        	$del_visits['contact_form'][] = '999999999999';
        	foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
        	{
        	    $del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
        	}
        	
        	$m_contact_forms = new ContactForms();
        	$contact_forms = $m_contact_forms->get_contact_form_period($ipid);
            
        	$around_admission_days="";
            $around_admission_date['start']  = date("d.m.Y",strtotime("-3 days",strtotime( $patient_days[$ipid]['details']['admission_date'])));
            $around_admission_date['end']  = date("d.m.Y",strtotime("+3 days",strtotime( $patient_days[$ipid]['details']['admission_date'])));
            $around_admission_days = $patientmaster->getDaysInBetween($around_admission_date['start'],$around_admission_date['end'],false,"d.m.Y");
            
            $around_admission_days_start = $patientmaster->getDaysInBetween($patient_days[$ipid]['details']['day_of_admission'],$around_admission_date['end'],false,"d.m.Y");
            
        	foreach($contact_forms as $ck => $cf_visit)
        	{
        	    if(!in_array($cf_visit['id'],$del_visits['contact_form']))
        	    {
        	        $cf_visit_date = date('d.m.Y',strtotime( $cf_visit['billable_date'] ));
        	         
        	        if(in_array($cf_visit_date,$around_admission_days) )
        	        {
        	            $first_contact_forms[] =  $cf_visit;
        	        }
        	    }
        	}	
        	
        	if($first_contact_forms)
        	{
        	    $first_contact_form = $contact_forms[0];
        	    $form['msp1']['akps']  = $first_contact_form['karnofsky'];
        	}
        	

        	/* ----------------- Patient Details -Admission location----------------------------------------- */
        	$ploc = new PatientLocation();
        	
        	$patient_locations = new PatientLocation();
			$patient_period_locations = $patient_locations->getPatientLocations($ipid,true);

            foreach($patient_period_locations as $k=>$location_details){
                $location_start = date("d.m.Y",strtotime($location_details['valid_from']));
                if(in_array($location_start,$around_admission_days_start) )
                {
                    $admission_location[] = $location_details;
                }
            }

            
            if($admission_location){
                $first_location = $admission_location[0];    
                
                if($first_location['master_location']['location_type'] == "5")
                {
                    if($first_location['master_location']['location_sub_type'] == "alone")
                    {
                        $form['msp1']['living_conditions'] = 2;
                    }
                } 
                else if($first_location['master_location']['location_type'] == "2")
                {
                    $form['msp1']['living_conditions'] = 6;
                }                
                else if($first_location['master_location']['location_type'] == "9")
                {
                    $form['msp1']['living_conditions'] = 7;
                }                
                
                else if($first_location['master_location']['location_type'] == "3" || $first_location['master_location']['location_type'] == "4" )
                {
                    $form['msp1']['living_conditions'] = 8;
                }                
            }
 
			$format = 'd.m.Y';
			foreach($patient_period_locations as $k_loc => $v_loc)
			{
				$pat_hosp['start'] = date($format, strtotime($v_loc['valid_from']));

				if($v_loc['valid_till'] == '0000-00-00 00:00:00')
				{
					$pat_hosp['end'] = date($format, time());
				}
				else
				{
					$pat_hosp['end'] = date($format, strtotime($v_loc['valid_till']));
				}

				$pat_hosp_period[] = $pat_hosp;
			}
        	
        	
        	/* ----------------- Patient Details - Symptomatology ----------------------------------------- */
            $symp = new Symptomatology();
            $symptomarr = $symp->getPatientSymptpomatologyLast($ipid);
            
            if(!empty($symptomarr))
            {
                foreach($symptomarr as $k=> $svalue){
                    $symptom_value[$svalue['symptomid']] = $svalue['input_value']; 
                }
                    
                //Schmerzsymptomatik
                $mps2['pain_symptoms'] = array("1");
                //-- "Schmerzen"
    
                if($symptom_value['1'] >= 6 )
                {
                    $form['msp2']['pain_symptoms'] = "1";
                } else{
                    $form['msp2']['pain_symptoms'] = "2";
                }
                
                
                //Neurol./psychiatr./psych. Symptomatik
                $msp2['neurol_symptoms'] = array("9","12","13","14","15");
                //-- "Depressivität" and or
                //-- "Angst" and or
                //-- "Anspannung" and or
                //-- "Desorientiertheit, Verwirrtheit" and or
                //-- "Müdigkeit"
    
                if($symptom_value['9'] >=  "6" || $symptom_value['12'] >=  "6" || $symptom_value['13'] >=  "6" || $symptom_value['14'] >=  "6" || $symptom_value['15'] >=  "6" )
                {
                    $form['msp2']['neurol_symptoms'] = "1";
                } else{
                    $form['msp2']['neurol_symptoms'] = "2";
                }
                
                
                
                //Ulz./exulz.Wunden oder Tumore
                $msp2['wund_symptoms'] = array("10");
                //-- "Pflegeprobleme wegen Wunden / Dekubitus"
    
                if($symptom_value['10'] >= 6 )
                {
                    $form['msp2']['wund_symptoms'] = "1";
                } else{
                    $form['msp2']['wund_symptoms'] = "2";
                }
                
                
                //Gastrointestinale Symptomatik
                $msp2['gastrointestinal_symptoms'] = array("2","4","6","8");
                //-- "Übelkeit" and or "Erbrechen" and or
                //-- "Verstopfung" and or "Appetitmangel"
                if($symptom_value['2'] >=  6 || $symptom_value['4'] >=  6 || $symptom_value['6'] >=  6 || $symptom_value['8'] >=  6  )
                {
                    $form['msp2']['gastrointestinal_symptoms'] = "1";
                } else{
                    $form['msp2']['gastrointestinal_symptoms'] = "2";
                }
                
                
                //Urogenitale Symptomatik -> no mapping
                
                
                //Respir./kardiale Symptomatik
                $msp2['cardiac_symptoms'] = array("5");
                //-- "Luftnot"
                
                if($symptom_value['5'] >= 6 )
                {
                    $form['msp2']['cardiac_symptoms'] = "1";
                } else{
                    $form['msp2']['cardiac_symptoms'] = "2";
                }
                
                //Ethische Konflikte -> no mapping
                //Existentielle Not -> no mapping
                
                //Koordination/Unterstützung der allg. amb. Palliativversorgung
                $msp2['palliative_care'] = array("11","16");
                //-- "Hilfebedarf bei Aktivitäten des tägl. Lebens"
                //-- "Probleme mit Organisation der Versorgung"
                if($symptom_value['11'] >=  6 || $symptom_value['16'] >=  6 )
                {
                    $form['msp2']['palliative_care'] = "1";
                } else{
                    $form['msp2']['palliative_care'] = "2";
                }
                
                //Koordination/Unterstützung des privaten Bezugssystems
                $msp2['reference_system'] = array("11","16","17");
                //-- "Hilfebedarf bei Aktivitäten des tägl. Lebens" and or
                //-- "Probleme mit Organisation der Versorgung"
                //-- "Überforderung der Familie, des Umfeldes"
                if($symptom_value['11'] >=  6 || $symptom_value['16'] >=  6 || $symptom_value['17'] >=  6 )
                {
                    $form['msp2']['reference_system'] = "1";
                } else{
                    $form['msp2']['reference_system'] = "2";
                }
                
                //Betreuung/Beratung bei sozial-rechtlichen Problemen -> no mapping
                //Ausgeprägter Wunsch n. Kuration -> no mapping
                //Frage nach aktiver Lebensverkürzung -> no mapping 
            
            }
 
            
            
        	/* ----------------- Patient Details - Disgnosis ----------------------------------------- */
        	//get patient main diagnosis
        	$pat_diagnosis = new PatientDiagnosis();
        	$patient_main_diag = $pat_diagnosis->get_main_diagnosis($ipid, $clientid);
        	$form['msp1']['main_diagnosis'] = implode(', ', $patient_main_diag['icd']);
        	
        	//get patient main diagnosis
        	$pat_diagnosis = new PatientDiagnosis();
        	$patient_side_diag = $pat_diagnosis->get_side_diagnosis($ipid, $clientid);
        	if(!empty($patient_side_diag['icd'])){
        	    $i=1;
        	    foreach($patient_side_diag['icd'] as  $k=>$sicd){
        	        $form['msp1']['has_side_diagno'.$i] = "1";
        	        $form['msp1']['side_diagno'.$i] = $sicd;
        	        $i++;
        	    }
        	}
        	
        	/* ----------------- Patient Details - Admission details ----------------------------------------- */
        	$loc = Doctrine_Query::create()
        	->select("*")
        	->from('PatientReadmission')
        	->where("ipid='" . $ipid . "' and date_type = '1' ")
        	->orderBy("date ASC")
        	->limit(1);
        	$disarr = $loc->fetchArray();

        	
        	if(!empty($disarr)){
                $form['msp1']['first_contact'] = $disarr[0]['first_contact'];
        	}
        	
        	/* ----------------- Patient Details - Discharge data ----------------------------------------- */
        	$dm_dead = Doctrine_Query::create()
        	->select("*")
        	->from('DischargeMethod')
        	->where("clientid = ?", $clientid)
        	->andwhere('isdelete = 0');
        	$dm_deadarray = $dm_dead->fetchArray();
        	
        	$dm_deadfinal[] = '999999999';
        	$discharge_dead_abbr = array('TOD','tod','Verstorben','verstorben','VERSTORBEN','Tod','TODNA');
        	foreach($dm_deadarray as $key => $val)
        	{
        	    $client_discharge_methods = $val;
        	    if(in_array($val['abbr'],$discharge_dead_abbr)){
            	    $dm_deadfinal[] = $val['id'];
        	    } 
        	}

        	
        	
        	$todpatients = Doctrine_Query::create()
        	->select('*')
        	->from('PatientDischarge ')
        	->where("ipid LIKE  '" . $ipid . "' ")
        	->andWhere('isdelete = 0');
        	$todpatientarray = $todpatients->fetchArray();
        	
        	
        	$patient_dead = "0";
        	$patient_end_date = date("Y-m-d",time());
        	
        	if($todpatientarray){
        	    
        	    foreach($todpatientarray as $k=>$d_data){
        	        
        	        $form['msp2']['request_death'] = $d_data['death_wish']; 
        	        
        	        if(in_array($d_data['discharge_method'],$dm_deadfinal)){
                	    $patient_end_date = $d_data['discharge_date'];
                	    $patient_dead = "1";
        	        }
        	        else
        	        {
        	            $patient_end_date = date("Y-m-d",time());
        	            $patient_dead = "0";
        	        }
        	    }
        	}
        	
        	
        	if($patient_days[$ipid]['details']['isdischarged'] == "1"){
        	    /* ----------------- Patient Details - System Discharge details ----------------------------------------- */
                 // CLient discharge_locations and types
        	    $dl = new DischargeLocation();
        	    $discharge_locations = $dl->getDischargeLocation($clientid);
        	    
        	    foreach($discharge_locations as $k => $dl_value)
        	    {
        	        $discharge_location[$dl_value['id']] = $dl_value['type'];
        	        $dl_types[$dl_value['type']][] = $dl_value['id'];
        	    }

        	    // Stabilisierung method
        	    $dis_m_q1 = Doctrine_Query::create()
        	    ->select("*")
        	    ->from('DischargeMethod')
        	    ->where("clientid = ?", $clientid)
        	    ->andwhere('description like "Stabilisierung%" ')
        	    ->andwhere('isdelete = 0');
        	    $dis_m_arr1 = $dis_m_q1->fetchArray();
        	    
        	    
        	    $stabil_m[] = '999999999';
        	    foreach($dis_m_arr1 as $k=>$st_data)
        	    {
        	        $stabil_m[] = $st_data['id'];
        	    }
        	    
        	    
        	    // method that starts with Verlegung
        	    $dis_m_q2 = Doctrine_Query::create()
        	    ->select("*")
        	    ->from('DischargeMethod')
        	    ->where("clientid = ?", $clientid)
        	    ->andwhere(' description like "Verlegung%" ')
        	    ->andwhere('isdelete = 0');
        	    $dis_m_arr2 = $dis_m_q2->fetchArray();

        	    $ver_m[] = '999999999';
        	    foreach($dis_m_arr2 as $k=>$ver_data){
        	        $ver_m[] = $ver_data['id'];
        	    }
        	    // Discharge methos - verstorben
        	    
        	    
        	    
            	$m_discharge_data = new PatientDischarge();
            	$discharge_details = $m_discharge_data ->getPatientLastDischarge($ipid);

            	if( in_array($discharge_details[0]['discharge_method'],$stabil_m))// Stabilisierung verstorben
            	{ 
            	    $form['msp2']['sapv_termination'] = "1";
            	} 
            	else if( in_array($discharge_details[0]['discharge_method'],$ver_m)) //Verlegung
            	{
            	    $form['msp2']['sapv_termination'] = "4";
            	    
            	}
            	else if( in_array($discharge_details[0]['discharge_method'],$dm_deadfinal)) //Verstorben
            	{
            	    $form['msp2']['sapv_termination'] = "5";
            	    
            	}
            	else
            	{
            	    $form['msp2']['sapv_termination'] = "";
            	}
            	

        	    if($patient_dead == "1"){
        	        
        	        if( in_array($discharge_details[0]['discharge_location'],$dl_types['1'])) // zu Hause
        	        {
                	    $form['msp2']['additional_information'] = "1";
        	        }
        	        elseif( in_array($discharge_details[0]['discharge_location'],$dl_types['2'])) // Krankenhaus
        	        {
                	    $form['msp2']['additional_information'] = "5";
        	        }
        	        elseif( in_array($discharge_details[0]['discharge_location'],$dl_types['3'])) // Hospiz
        	        {
                	    $form['msp2']['additional_information'] = "3";
        	        }
        	        elseif( in_array($discharge_details[0]['discharge_location'],$dl_types['4']) || in_array($discharge_details[0]['discharge_location'],$dl_types['7'])) // Altenheim, Pflegeheim or Kurzzeitpflege
        	        {
                	    $form['msp2']['additional_information'] = "2";
        	        }
        	        elseif( in_array($discharge_details[0]['discharge_location'],$dl_types['5'])) // Palliativstation
        	        {
                	    $form['msp2']['additional_information'] = "4";
        	        }
        	        else
        	        {
                	    $form['msp2']['additional_information'] = "";
        	        }
        	        
        	    }
        	}
        	
        	if($patient_days[$ipid]['details']['birthd'] != "0000-00-00")
        	{
        	    $patient_age = str_replace(" Jahre", "", $patientmaster->GetAge(date("Y-m-d", strtotime($patient_days[$ipid]['details']['birthd'])),$patient_end_date));;
        	}
        	$form['msp1']['patient_age'] = $patient_age;
        	$form['msp2']['patient_age'] = $patient_age;
        	$form['ipos1']['patient_age'] = $patient_age;
        	$form['ipos2']['patient_age'] = $patient_age;
        	// default HEADER data
        	$tabs = array("msp1","msp2","ipos1","ipos2");
        	foreach($tabs as $tab_name){
            	$form[$tab_name]['client_bsnr'] = $form['general']['client_bsnr'];
            	$form[$tab_name]['client_iknumber'] = $form['general']['client_iknumber'];
            	$form[$tab_name]['health_insurance_name']= $form['general']['health_insurance_name'];
            	$form[$tab_name]['health_insurance_kassen_nr']=   $form['general']['health_insurance_kassen_nr'];  
        	}
        	
        	/* ----------------- Patient Details - Deleted visits ----------------------------------------- */
        	$deleted_visits = Doctrine_Query::create()
        	->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
        	->from('PatientCourse')
        	->where("ipid LIKE  '" . $ipid . "' ")
        	->andWhere('wrong=1')
        	->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
        	->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_doctor_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_nurse_form")) . '"   OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("bayern_doctorvisit")) . '"   OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("contact_form")) . '"  ');
        	$deleted_visits_array = $deleted_visits->fetchArray();
        	
        	$del_visits['kvno_doctor_form'][] = '999999999999';
        	$del_visits['kvno_nurse_form'][] = '999999999999';
        	$del_visits['wl_doctor_form'][] = '999999999999';
        	$del_visits['wl_nurse_form'][] = '999999999999';
        	$del_visits['visit_koordination_form'][] = '999999999999';
        	$del_visits['bayern_doctorvisit'][] = '999999999999';
        	$del_visits['contact_form'][] = '999999999999';
        	
        	foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
        	{
        	    $del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
        	}
        	
        	/* ----------------- Patient Details - Bayern visits ----------------------------------------- */
        	$bayern_visits = BayernDoctorVisit::getAllPatientBayernDoctorVisits($ipid);
        	
        	foreach($bayern_visits as $bk => $bay_visit)
        	{
        	   if(!in_array($bay_visit['id'],$del_visits['bayern_doctorvisit'])) 
        	   {
            	   $visit_date = date('d.m.Y',strtotime( $bay_visit['visit_date'] ));
            	   
            	   if(in_array($visit_date,$patient_days[$ipid]['treatment_days']) && in_array($visit_date,$patient_days[$ipid]['sapv_days']) ) // in report period    
            	   {
            	       $sapv_bay_visits[] = $bay_visit;
            	   }
        	   }
        	}
            /* ----------------- Patient Details - Contact froms ----------------------------------------- */
            $m_contact_forms = new ContactForms();
            $contact_forms = $m_contact_forms->get_contact_form_period($ipid);

            //Form Types for Patient
            $aFormTypes = [];
            foreach($contact_forms as $ck => $cf_visit)
            {

                $aFormTypes[] = $cf_visit['form_type'];
            }
            
            $aActions = array();
            if(!empty($aFormTypes)){
                // Actions for used FormTypes
                $dQuery = Doctrine_Query::create()
                    ->select("*")
                    ->from('FormTypes')
                    ->where("id in (" . implode(',', $aFormTypes) .  ")");
                $aActions = $dQuery->fetchArray();
            }

            foreach($contact_forms as $ck => $cf_visit)
            {
                if(!in_array($cf_visit['id'],$del_visits['contact_form']))
                {
                    $cf_visit_date = date('d.m.Y',strtotime( $cf_visit['billable_date'] ));

                    if(in_array($cf_visit_date,$patient_days[$ipid]['treatment_days']) && in_array($cf_visit_date,$patient_days[$ipid]['sapv_days']) )// in report period
                    {
                        foreach($aActions as $action_for_formtype){
                            // action 1 is for "Hausbesuch"
                            if($cf_visit['form_type'] == $action_for_formtype['id'] && $action_for_formtype['action'] == 1){
                                $sapv_contact_forms[] =  $cf_visit;
                            }

                        }

                    }
                }
            }

            $form['msp2']['visits_count'] = count($sapv_bay_visits) + count($sapv_contact_forms);
 
        	
        	//Saved data 
        	$m_sapv_evaluation = new  SapvEvaluation();
        	$m_sapv_evaluation_msp1 = new  SapvEvaluationMsp1();
        	$m_sapv_evaluation_msp2 = new  SapvEvaluationMsp2();
        	$m_sapv_evaluation_ipos1 = new  SapvEvaluationIpos1();
        	$m_sapv_evaluation_ipos2 = new  SapvEvaluationIpos2();
        	
        	
        	$sapv_evaluation_from = $m_sapv_evaluation->get_sapv_evaluation($ipid,$form_admissionid);

        	
        	if(!empty($sapv_evaluation_from)){
        	    $from_id = $sapv_evaluation_from[0]['id'];
        	    
        	    $saved_data['all'] = "1";
        	    
        	    
        	    
        	   // EXISTING DATA -Msp1  
        	   $msp1_data = $m_sapv_evaluation_msp1->get_sapv_evaluation_msp1($from_id,$ipid);

        	   if(!empty($msp1_data)) 
        	   {
            	   $msp1_id = $msp1_data[0]['id'];
            	   $form['msp1'] = $msp1_data[0];
            	   
            	   if($msp1_data[0]['first_admission'] != "0000-00-00 00:00:00")
            	   {
                	   $form['msp1']['first_admission'] = date('d.m.Y',strtotime($msp1_data[0]['first_admission']));
            	   } 
            	   else
            	   {
                	   $form['msp1']['first_admission'] = "";
            	   }
            	   $form['msp1']['first_sapv_types'] = explode(',',$msp1_data[0]['first_sapv_types']);
            	   $form['msp1']['extra_nursing_care'] = explode(',',$msp1_data[0]['extra_nursing_care']);
            	   
            	   $saved_data['msp1'] = "1";
        	   } else {
        	       
            	   $msp1_id = 0;
            	   $saved_data['msp1'] = "0";
            	   
        	   }
        	   
        	   // EXISTING DATA -    Msp2    	   
        	   $msp2_data = $m_sapv_evaluation_msp2->get_sapv_evaluation_msp2($from_id,$ipid);

        	   if(!empty($msp2_data))
        	   {
            	   $msp2_id = $msp2_data[0]['id'];
            	   $form['msp2'] = $msp2_data[0];
            	   
            	   if($msp2_data[0]['last_discharge'] != "0000-00-00 00:00:00")
            	   {
                	   $form['msp2']['last_discharge'] = date('d.m.Y',strtotime($msp2_data[0]['last_discharge']));
            	   }
            	   else
            	   {
                	   $form['msp2']['last_discharge'] = "";
            	   }
            	   
            	   $form['msp2']['sapv_completion'] = explode(',',$msp2_data[0]['sapv_completion']);
            	   $form['msp2']['latest_sapv'] = explode(',',$msp2_data[0]['latest_sapv']);
            	   
            	   $form['msp2']['patient_epid'] = $patient_epid;
            	   $form['msp2']['patient_last_name'] = $patient_last_name;
            	   $form['msp2']['patient_first_name'] = $patient_first_name;
            	   $form['msp2']['patient_birthd'] = $patient_birthd;
            	   $form['msp2']['patient_zip'] = $patient_zip;
            	   $form['msp2']['patient_gender'] = $patient_gender;
            	   $form['msp2']['patient_age'] = $patient_age;
            	   $saved_data['msp2'] = "1";
            	   
        	   } else {
        	       
            	   $msp2_id = 0;
            	   $saved_data['msp2'] = "0";
            	   
        	   }
        	   
        	   
        	   
        	   // EXISTING DATA -    Ipos1    	   
        	   $ipos1_data = $m_sapv_evaluation_ipos1->get_sapv_evaluation_ipos1($from_id,$ipid);
        	   if(!empty($ipos1_data))
        	   {
            	   $ipos1_id = $ipos1_data[0]['id'];
            	   $form['ipos1'] = $ipos1_data[0];
            	   $form['ipos1']['patient_epid'] = $patient_epid;
            	   $form['ipos1']['patient_last_name'] = $patient_last_name;
            	   $form['ipos1']['patient_first_name'] = $patient_first_name;
            	   $form['ipos1']['patient_birthd'] = $patient_birthd;
            	   $form['ipos1']['patient_zip'] = $patient_zip;
            	   $form['ipos1']['patient_gender'] = $patient_gender;
            	   $form['ipos1']['patient_age'] = $patient_age;
            	   $saved_data['ipos1'] = "1";
            	   
        	   } else {
        	       
            	   $ipos1_id = 0;
            	   $saved_data['ipos1'] = "0";
            	   
        	   }
        	   
        	   
        	   // EXISTING DATA -    Ipos2    	   
        	   $ipos2_data = $m_sapv_evaluation_ipos2->get_sapv_evaluation_ipos2($from_id,$ipid);
        	   if(!empty($ipos2_data))
        	   {
        	       $ipos2_id = $ipos2_data[0]['id'];
        	       $form['ipos2'] = $ipos2_data[0];
        	       
        	       $form['ipos2']['patient_epid'] = $patient_epid;
        	       $form['ipos2']['patient_last_name'] = $patient_last_name;
        	       $form['ipos2']['patient_first_name'] = $patient_first_name;
        	       $form['ipos2']['patient_birthd'] = $patient_birthd;
        	       $form['ipos2']['patient_zip'] = $patient_zip;
        	       $form['ipos2']['patient_gender'] = $patient_gender;
        	       $form['ipos2']['patient_age'] = $patient_age;
        	       
            	   $saved_data['ipos2'] = "1";
            	   
        	   } else{
        	       $ipos2_id = 0 ;
            	   $saved_data['ipos2'] = "0";
        	   }
        	} 
        	else 
        	{
        	    $from_id = 0;
        	    $this->view->saved_data = "0";
        	    $saved_data['all'] = "0";
        	}
        	
        	$this->view->from_id = $from_id;
        	$this->view->form_data = $form;
        	$this->view->saved_data = $saved_data;
        	
        	$ef = new ExtraForms();
        	$allowedFormBoxes = $ef->get_client_forms($clientid);
     	
        	$this->getMasterData_extradata($ipid);
        	$this->view->patientMasterData = $this->_patientMasterData;
        	
        	//print_r($this->view->patientMasterData); exit;
        	$patientDetailsForm = new Application_Form_PatientDetails(
        			array(
        					'_patientMasterData'   => &$this->_patientMasterData,
        					'_block_name'          => 'SapvEvaluationII',
        					'_clientForms'         => $allowedFormBoxes,
        			),
        			$ipid
        	);
        	
	        
                    $info_boxes = ['PatientReadmission', 'PatientLocation'];
                    $allCategories = $patientDetailsForm->getAllCategories();
                	foreach($info_boxes as $vr)
                	{
                		$infoCategories[$vr] = $allCategories[$vr];
                	}
                    
                    $boxesPlacement = [];
                     
                    foreach ($infoCategories as $key => $cat) {
                    	 
                    	if ( ! isset($allowedFormBoxes[$cat['extra_form_ID']])
                    			|| ! $allowedFormBoxes[$cat['extra_form_ID']])
                    	{
                    		//not allowed to this box (@dev you can go to /extraforms/formlist and assign a box to a client)
                    		continue;
                    	}
                    	 
                    	if ($cat['placement'] == 'left') {
                    		$boxesPlacement['left'][] = $key;
                    	} elseif ($cat['placement'] == 'right') {
                    		$boxesPlacement['right'][] = $key;
                    	}
                    }
                     
                    $userBoxOrder = BoxOrder::fetchUserCol($userid, $boxOrder);
                    if ( ! empty($userBoxOrder)) {
                    	 
                    	$newBoxesPlacement = ["left" => [], "right" => []];
                    	 
                    	foreach ($userBoxOrder as $order) {
                    		 
                    		$placement = $order['boxcol'] == 101 ? "left" : "right";
                    		 
                    		$boxID = $order['boxid'];
                    
                    		$boxes = array_filter($allCategories, function($item) use ($boxID) {
                    			return $item['extra_form_ID'] == $boxID;
                    		});
                    			 
                    			$newBoxesPlacement[$placement] = array_merge($newBoxesPlacement[$placement], array_keys($boxes));
                    	}
                    	 
                    	foreach ($boxesPlacement as $placement => $boxes) {
                    		foreach ($boxes as $box) {
                    			if ( ! in_array($box, $newBoxesPlacement ['left']) && ! in_array($box, $newBoxesPlacement ['right'])) {
                    				//newbox
                    				$newBoxesPlacement [$placement][] = $box;
                    			}
                    		}
                    	}
                    	 
                    	$boxesPlacement = $newBoxesPlacement;
                    
                    }
                     
                     
                    $this->view->boxesOpened       = $boxesOpen;
                    $this->view->boxesPlacement    = $boxesPlacement;
                    $this->view->mappings          = $allCategories;
                    $this->view->data              = $patientDetailsForm->getPatientData($ipid);
                     
                    $this->view->memos             = PatientVersorger::getEntry($ipid, $memoKey);
                    
        			$this->view->patient_info = $this->view->render('patientnew/patientdetails.phtml');
        	
        	 //============POST DATA=======================================
        	 if($this->getRequest()->isPost())
        	 {
    	        $sapv_evaluation = new Application_Form_SapvEvaluation();
                $sapv_evaluation_msp1 = new Application_Form_SapvEvaluationMsp1();
                $sapv_evaluation_msp2 = new Application_Form_SapvEvaluationMsp2();
                $sapv_evaluation_ipos1 = new Application_Form_SapvEvaluationIpos1();
                $sapv_evaluation_ipos2 = new Application_Form_SapvEvaluationIpos2();
                $post = $_POST;
                
//                 print_r($_POST); exit;
        	     // SAVE TAB
                if(strlen($_POST['save_page']) > 0 && strlen($_POST['print_page']) == 0 && strlen($_POST['reset_page']) == 0 && strlen($_POST['pdf']) == 0 )
                {
                    if($_POST['form_id'] != "0"){
        	              
                        $post['form_id'] = $_POST['form_id'];
                        $post['ipid'] = $ipid;
                        
                        // UPDATE EXISTING SAPV EVALUATION
                        $sapv_evaluation->update($post);
                        
                        if($_POST['save_page'] == "msp1")
                        {// MSP1
                            $post['msp1']['ipid'] = $ipid;
                            $post['msp1']['form_id'] = $_POST['form_id'];
                            $sapv_evaluation_msp1->update($msp1_id, $post['msp1']);
                        }
                        elseif($_POST['save_page'] == "msp2")
                        {// MSP2
                            $post['msp2']['ipid'] = $ipid;
                            $post['msp2']['form_id'] = $_POST['form_id'];
                            $sapv_evaluation_msp2->update($msp2_id, $post['msp2']);
                        }
                        elseif($_POST['save_page'] == "ipos1")
                        {// Ipos1
                            $post['ipos1']['ipid'] = $ipid;
                            $post['ipos1']['form_id'] = $_POST['form_id'];
                            $sapv_evaluation_ipos1->update($ipos1_id, $post['ipos1']);
                        }
                        elseif($_POST['save_page'] == "ipos2")
                        {// Ipos2
                            $post['ipos2']['ipid'] = $ipid;
                            $post['ipos2']['form_id'] = $_POST['form_id'];
                            $sapv_evaluation_ipos2->update($ipos2_id, $post['ipos2']);
                        }
                        else
                        {
                        // do nothing    
                        }
                        
                        $course_comment= "Formular SAPV Einzelfallevaluation II wurde editiert." ;
        	         }
        	         else
        	         {
        	             // INSET NEW SAPV EVALUATION
       	                 $post['ipid'] = $ipid;
        	             $new_form_id = $sapv_evaluation->insert($post);
        	              
        	             if($new_form_id){
        	                 	
        	                 $post['form_id'] = $new_form_id;
        	                 	
        	                 if($_POST['save_page'] == "msp1" && !empty($post['msp1']))
        	                 {// MSP1
        	                     $post['msp1']['form_id'] = $new_form_id;
        	                     $post['msp1']['ipid'] = $ipid;
        	                      
        	                     $sapv_evaluation_msp1->insert($post['msp1']);
        	                 }
        	                 elseif($_POST['save_page'] == "msp2" && !empty($post['msp2']))
        	                 {// MSP2
        	                     $post['msp2']['form_id'] = $new_form_id;
        	                     $post['msp2']['ipid'] = $ipid;
        	                      
        	                     $sapv_evaluation_msp2->insert($post['msp2']);
        	                 }
        	                 elseif($_POST['save_page'] == "ipos1" && !empty($post['ipos1']))
        	                 {// IPOS1
        	                     $post['ipos1']['form_id'] = $new_form_id;
        	                     $post['ipos1']['ipid'] = $ipid;
        	                      
        	                     $sapv_evaluation_ipos1->insert($post['ipos1']);
        	                 }
        	                 elseif($_POST['save_page'] == "ipos2" && !empty($post['ipos2']))
        	                 {// IPOS2
        	                     $post['ipos2']['form_id'] = $new_form_id;
        	                     $post['ipos2']['ipid'] = $ipid;
        	                      
        	                     $sapv_evaluation_ipos2->insert($post['ipos2']);
        	                 }
        	                 else
        	                 {
        	                   // do nothing
        	                 }
        	             }
        	             $course_comment= "Formular SAPV Einzelfallevaluation II hinzugefügt." ;
        	              
        	         }
        	         
        	         $post['form_id'] = $post['form_id'];// ???????????????????????
        	         $post['patientname']= $patientinfo['last_name'] . ", " . $patientinfo['first_name'] ;
        	         $post['birthdate'] = $patientinfo['birthd'];
        	          
        	         $cust = new PatientCourse();
        	         $cust->ipid = $ipid;
        	         $cust->course_date = date("Y-m-d H:i:s", time());
        	         $cust->course_type = Pms_CommonData::aesEncrypt("K");
        	         $cust->course_title = Pms_CommonData::aesEncrypt($course_comment);
        	         $cust->tabname = Pms_CommonData::aesEncrypt("sapvevaluation_form");
        	         $cust->user_id = $userid;
        	         $cust->done_date = date("Y-m-d H:i:s", time());
        	         $cust->save();
        	          
        	         // ---------------------- Redirect to verlauf  -------------------
        	         if(!empty($_POST['admissionid'])){
        	             $this->redirect(APP_BASE . 'patientformnew/sapvevaluation?id=' . $_REQUEST['id'].'&admissionid='.$_POST['admissionid']);
        	         } else {
        	             $this->redirect(APP_BASE . 'patientformnew/sapvevaluation?id=' . $_REQUEST['id']);
        	         }
        	         exit;
        	         
        	     }
        	     // RESET TAB
        	     elseif(strlen($_POST['save_page']) == 0 && strlen($_POST['print_page']) == 0 && strlen($_POST['reset_page']) > 0 && strlen($_POST['pdf']) == 0 )
        	     {
        	         
        	         $post = $_POST;
        	         $post['form_id'] = $_POST['form_id'];
        	         $post['ipid'] = $ipid;
        	         
        	         //$sapv_evaluation->reset($post);
        	         
        	         if($_POST['reset_page'] == "msp1")
        	         {// MSP1
            	         $sapv_evaluation_msp1->reset($post);
        	         }
        	         elseif($_POST['reset_page'] == "msp2")
        	         {// MSP2
            	         $sapv_evaluation_msp2->reset($post);
        	         }
        	         elseif($_POST['reset_page'] == "ipos1")
        	         {// IPOS1
            	         $sapv_evaluation_ipos1->reset($post);
        	         }
        	         elseif($_POST['reset_page'] == "ipos2")
        	         {// IPOS2
            	         $sapv_evaluation_ipos2->reset($post);
        	         } 
        	         else
        	         {
                        // do nothing            	               
        	         }
        	          
        	         /* ---------------------- Redirect to verlauf  ------------------- */
        	         if(!empty($_POST['admissionid'])){
        	             $this->redirect(APP_BASE . 'patientformnew/sapvevaluation?id=' . $_REQUEST['id'].'&admissionid='.$_POST['admissionid']);
        	         } else {
        	             $this->redirect(APP_BASE . 'patientformnew/sapvevaluation?id=' . $_REQUEST['id']);
        	         }
        	         exit;
        	     }
        	     // PRINT TAB
        	     elseif(strlen($_POST['save_page']) == 0 && strlen($_POST['print_page']) > 0 && strlen($_POST['reset_page']) == 0  && strlen($_POST['pdf']) == 0 )
        	     {
        	         $post = $_POST;
        	         $post['ipid'] = $ipid;
        	         $post['form_data'] = $post;
        	         $post['tabs'] = array($_POST['print_page']);
        	         $gen_pdf = $this->generate_pdf($post, 'sapvevaluation', 'sapvevaluation_pdf.html');
        	         exit;
        	         
        	     }
        	     // PRINT ALL
        	     elseif(strlen($_POST['save_page']) == 0 && strlen($_POST['print_page']) == 0 && strlen($_POST['reset_page']) == 0  && strlen($_POST['pdf']) > 0 )
        	     {
        	         $post = $_POST;
        	         $post['ipid'] = $ipid;
        	         $post['form_data'] = $post;
        	         $post['tabs'] = array("msp1","msp2","ipos1","ipos2"); // all tabs
        	         $gen_pdf = $this->generate_pdf($post, 'sapvevaluation', 'sapvevaluation_pdf.html');
        	         exit;
        	     }
        	     
        	     
        	     
        	     
        	     /*
        	     if(strlen($_POST['save']) > 0 && strlen($_POST['reset']) == 0)
        	     {

        	        $post = $_POST;
        	        $post['ipid'] = $ipid;
        	        
        	        if($_POST['form_id'] != "0"){
        	            
       	                $post['form_id'] = $_POST['form_id'];
       	                $post['ipid'] = $ipid;
       	                
        	            // update sapv evaluation
        	            $sapv_evaluation->update($post);

    	                // MSP1 
    	                if(!empty($post['msp1']) && $mps1_id != 0){
    	                    $post['msp1']['ipid'] = $ipid;
    	                    $sapv_evaluation_msp1->update($mps1_id, $post['msp1']);
    	                    
    	                }
    	                	
    	                // MSP2 
    	                if(!empty($post['msp2']) && $mps1_id != 0){
    	                     
    	                    $post['msp2']['ipid'] = $ipid;
    	                    $sapv_evaluation_msp2->update($mps2_id, $post['msp2']);
    	                }
    	                	
    	                // Ipos1 
    	                if(!empty($post['ipos1']) && $ipos1_id != 0){
    	                     
    	                    $post['ipos1']['ipid'] = $ipid;
    	                    $sapv_evaluation_ipos1->update($ipos1_id, $post['ipos1']);
    	                }
    	                
    	                // Ipos2 
    	                if(!empty($post['ipos2']) && $ipos2_id != 0){
    	                     
    	                    $post['ipos2']['ipid'] = $ipid;
    	                    $sapv_evaluation_ipos2->update($ipos2_id, $post['ipos2']);
    	                }
    	                
    	               $course_comment= "Formular SAPV Einzelfallevaluation II wurde editiert." ;
        	        } 
        	        else
        	        {
        	            // inset sapv evaluation
            	        $new_form_id = $sapv_evaluation->insert($post);
            	        
            	        if($new_form_id){
            	            
            	            $post['form_id'] = $new_form_id;
            	            $post['ipid'] = $ipid;
            	            
            	            // MSP1 - 
            	            if(!empty($post['msp1'])){
            	                
                	            $post['msp1']['form_id'] = $new_form_id;
                	            $post['msp1']['ipid'] = $ipid;
            	                
                                $sapv_evaluation_msp1->insert($post['msp1']);
            	            }
            	            
            	            // MSP2 - 
            	            if(!empty($post['msp2'])){
            	                
                	            $post['msp2']['form_id'] = $new_form_id;
                	            $post['msp2']['ipid'] = $ipid;
            	                
                                $sapv_evaluation_msp2->insert($post['msp2']);
            	            }
            	            
            	            // IPOS1 - 
            	            if(!empty($post['ipos1'])){
            	                
                	            $post['ipos1']['form_id'] = $new_form_id;
                	            $post['ipos1']['ipid'] = $ipid;
            	                
                                $sapv_evaluation_ipos1->insert($post['ipos1']);
            	            }
            	            // IPOS2 - 
            	            if(!empty($post['ipos2'])){
            	                
                	            $post['ipos2']['form_id'] = $new_form_id;
                	            $post['ipos2']['ipid'] = $ipid;
            	                
                                $sapv_evaluation_ipos2->insert($post['ipos2']);
            	            }
                        }
                        $course_comment= "Formular SAPV Einzelfallevaluation II hinzugefügt." ;
        	            
        	        }
        	         
                    
                    
                    
                    $post['form_id'] = $post['form_id'];// ???????????????????????
                    $post['patientname']= $patientinfo['last_name'] . ", " . $patientinfo['first_name'] ;
                    $post['birthdate'] = $patientinfo['birthd'];
        	          
                    $cust = new PatientCourse();
                    $cust->ipid = $ipid;
                    $cust->course_date = date("Y-m-d H:i:s", time());
                    $cust->course_type = Pms_CommonData::aesEncrypt("K");
                    $cust->course_title = Pms_CommonData::aesEncrypt($course_comment);
                    $cust->tabname = Pms_CommonData::aesEncrypt("sapvevaluation_form");
                    $cust->user_id = $userid;
                    $cust->done_date = date("Y-m-d H:i:s", time());
                    $cust->save();
        	          
        	          
        	         // ---------------------- Redirect to verlauf  ------------------- 
                     if(!empty($_POST['admissionid'])){
            	         $this->redirect(APP_BASE . 'patientformnew/sapvevaluation?id=' . $_REQUEST['id'].'&admissionid='.$_POST['admissionid']);
                     } else {
            	         $this->redirect(APP_BASE . 'patientformnew/sapvevaluation?id=' . $_REQUEST['id']);
                     }
        	         exit;
        	          
        	     }
        	     else if(strlen($_POST['reset']) > 0 )
        	     {
        	         $post = $_POST;
        	         $post['form_id'] = $_POST['form_id'];
        	         $post['ipid'] = $ipid;
        	         
                     $sapv_evaluation->reset($post);
                     $sapv_evaluation_msp1->reset($post);
                     $sapv_evaluation_msp2->reset($post);
                     $sapv_evaluation_ipos1->reset($post);
                     $sapv_evaluation_ipos2->reset($post);
                     
        	         // ---------------------- Redirect to verlauf  -------------------
                     if(!empty($_POST['admissionid'])){
            	         $this->redirect(APP_BASE . 'patientformnew/sapvevaluation?id=' . $_REQUEST['id'].'&admissionid='.$_POST['admissionid']);
                     } else {
            	         $this->redirect(APP_BASE . 'patientformnew/sapvevaluation?id=' . $_REQUEST['id']);
                     }
                     exit;
        	         
        	     }
        	     else if(strlen($_POST['pdf_msp1']) > 0 )
        	     {
        	         
        	         $post = $_POST;
        	         $post['ipid'] = $ipid;
        	         $post['form_data'] = $post;
        	         $post['tabs'] = array("mps1");
        	         $gen_pdf = $this->generate_pdf($post, 'sapvevaluation', 'sapvevaluation_pdf.html');
        	         exit;
        	     }
        	     else if(strlen($_POST['pdf_msp2']) > 0 )
        	     {
        	         
        	         $post = $_POST;
        	         $post['ipid'] = $ipid;
        	         $post['form_data'] = $post;
        	         $post['tabs'] = array("mps2");;
        	         $gen_pdf = $this->generate_pdf($post, 'sapvevaluation', 'sapvevaluation_pdf.html');
        	         exit;
        	     }
        	     else if(strlen($_POST['pdf_ipos1']) > 0 )
        	     {
        	         
        	         $post = $_POST;
        	         $post['ipid'] = $ipid;
        	         $post['form_data'] = $post;
        	         $post['tabs'] = array("ipos1");
        	         $gen_pdf = $this->generate_pdf($post, 'sapvevaluation', 'sapvevaluation_pdf.html');
        	         exit;
        	     }
        	     else if(strlen($_POST['pdf_ipos2']) > 0 )
        	     {
        	         
        	         $post = $_POST;
        	         $post['ipid'] = $ipid;
        	         $post['form_data'] = $post;
        	         $post['tabs'] = array("ipos2");
        	         $gen_pdf = $this->generate_pdf($post, 'sapvevaluation', 'sapvevaluation_pdf.html');
        	         exit;
        	     }
        	     else if(strlen($_POST['pdf']) > 0 )
        	     {
        	         
        	         $post = $_POST;
        	         $post['ipid'] = $ipid;
        	         $post['form_data'] = $post;
        	         $post['tabs'] = array("mps1","mps2","ipos1","ipos2");
        	         $gen_pdf = $this->generate_pdf($post, 'sapvevaluation', 'sapvevaluation_pdf.html');
        	         exit;
        	     }
        	     
        	     */
        	      
        	 }
        	 //===========end POST DATA============================================
        	 
        }
        
        
        public function vdekanlage2Action()
        {
        	$logininfo = new Zend_Session_Namespace('Login_Info');
        	$clientid = $logininfo->clientid;
        	$decid = Pms_Uuid::decrypt($_GET['id']);
        	$ipid = Pms_CommonData::getIpId($decid);
        	$patientmaster = new PatientMaster();
        	$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        
        	$tm = new TabMenus();
        	$this->view->tabmenus = $tm->getMenuTabs();
        
        	/* --------------------Check for MultipleArzstemple----------------------------- */
        	$multiplestamps_previleges = new Modules();
        
        	if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
        	{
        		$multiplestamps_option = true;
        	}
        	else
        	{
        		$multiplestamps_option = false;
        	}
        
        	$this->view->multiplestamps_option = $multiplestamps_option;
        
        
        	/* --------------------------------User select------------------------------------- */
        	if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
        	{
        		$isadmin = '1';
        	}
        
        	$users = new User();
        	$userarray = $users->getUserByClientid($logininfo->clientid);
        	$userarraylast[] = $this->view->translate('selectuser');
        	$userarraylast_ids = array();
        
        	foreach($userarray as $user)
        	{
        		$userarraylast[$user['id']] = trim($user['user_title']) . " " . trim($user['last_name']) . ", " . trim($user['first_name']);
        		$userarraylast_ids[] = $user['id'];
        	}
        	$this->view->users = $userarraylast;
        
        	if($isadmin == 1)
        	{
        		$showselect = 1;
        	}
        	else
        	{
        		$showselect = 1; // show select to all
        	}
        
        	$this->view->showselect = $showselect;
        
        
        
        	$ustamp = new UserStamp();
        	$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
        
        	foreach($multipleuser_stamp as $ks => $uspamp)
        	{
        		$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
        		$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
        		$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
        	}
        	$this->view->users_mstamps = $users_mstamps;
        
        
        	$patientmaster = new PatientMaster();
        	$patientinfo = $patientmaster->getMasterData($decid, 0);
        
        	$this->view->patientname = $patientinfo['last_name'] . ", " . $patientinfo['first_name'] . " \r\n " . $patientinfo['street1'] . "\r\n" . $patientinfo['zip'] . "&nbsp;" . $patientinfo['city'];
        	$this->view->birthdate = $patientinfo['birthd'];
        	$this->view->addmissiondate = date('d.m.Y', strtotime($patientinfo['admission_date']));
        	$this->view->maxdate = date('d.m.Y');
        	$this->view->isDischarged = $patientinfo['isdischarged'];
        	$this->view->isstandby = $patientinfo['isstandby'];
        	$this->view->isstandbydelete = $patientinfo['isstandbydelete'];
        
        	$patient_readmission = new PatientReadmission();
        	$patient_admissions = $patient_readmission->getPatientReadmission($ipid, '1');
        
        	if(!empty($patient_admissions) && count($patient_admissions) > 1)
        	{
        		$this->view->admission = "readmission";
        	}
        	else
        	{
        		$this->view->admission = "first";
        	}
        
        	$location_array = array();
        	$ploc = new PatientLocation();
        	$plocarray = $ploc->getActiveLocationPatInfoold($ipid);
        
        	if(!empty($plocarray))
        	{
        		if($plocarray[0]['location_type'] == '3' || $plocarray[0]['location_type'] == '4')
        		{
        			$location_array[] = 'pflegeheim';
        		}
        		elseif($plocarray[0]['location_type'] == '2')
        		{
        			$location_array[] = 'hospiz';
        		}
        		elseif($plocarray[0]['location_type'] == '5')
        		{
        			$location_array[] = 'home';
        		}
        		else
        		{
        				
        		}
        	}
        	$this->view->location = $location_array;
        
        	/* ------------------- Maindiagnosis------------- */
        	$dg = new DiagnosisType();
        	$abb2 = "'HD'";
        	$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
        	$comma = ",";
        	$typeid = "'0'";
        	foreach($ddarr2 as $key => $valdia)
        	{
        		$typeid .=$comma . "'" . $valdia['id'] . "'";
        		$comma = ",";
        	}
        
        	$patdia = new PatientDiagnosis();
        	$dianoarray = $patdia->getFinalData($ipid, $typeid);
        
        	if(count($dianoarray) > 0)
        	{
        		$comma = "";
        		$diagnosis = "";
        		foreach($dianoarray as $key => $valdia)
        		{
        			if(strlen($valdia['diagnosis']) > 0)
        			{
        				$diagnosis .= $comma . "" . $valdia['icdnumber'] . ' - ' . date('m.Y', strtotime($valdia['create_date']));
        				$comma = ", ";
        			}
        		}
        	}
        
        	if(strlen($diagnosis) > 0)
        	{
        		$patient_diagnosis = $diagnosis;
        	}
        	else
        	{
        		$patient_diagnosis = "";
        	}
        
        	$this->view->diagnosen = $patient_diagnosis;
        
        	//red box data #1
        	$phelathinsurance = new PatientHealthInsurance();
        	$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientinfo['ipid']);
        
        	$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
        	$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
        	$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
        	$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];
        
        	//cityofclient
        	$loguser = Doctrine::getTable('User')->find($logininfo->userid);
        	if($loguser)
        	{
        		$loguserarray = $loguser->toArray();
        
        		$this->view->lastname = $loguserarray['last_name'];
        		$this->view->firstname = $loguserarray['first_name'];
        
        		$this->view->betriebsstatten_nr = $loguserarray['betriebsstattennummer'];
        		$this->view->arzt_nr = $loguserarray['LANR'];
        	}
        
        	$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
        	$post['clientname'] = $clientdata[0]['client_name'];
        	$post['clientfax'] = $clientdata[0]['fax'];
        	$post['clientphone'] = $clientdata[0]['phone'];
        	$post['clientemail'] = $clientdata[0]['emailid'];
        
        	$this->view->cityofclient = $clientdata[0]['city'];
        	$this->view->clientname = $clientdata[0]['client_name'];
        	$this->view->team_name = $clientdata[0]['team_name'];
        	$this->view->has_vollversorgung = $patientinfo['vollversorgung'];
        	$this->view->client_bsnr = $clientdata[0]['betriebsstattennummer'];
        
        	if($this->getRequest()->isPost())
        	{
        		$post = $_POST;
        		$post['kv_header']['patientname'] = $_POST['kv_header']['patientname'];
        
        		if($_POST['stampusers'] > 0)
        		{
        
        			if($multiplestamps_option === true)
        			{
        
        				$stamp_info = explode('-', $_POST['stampusers']);
        				$stamp_user = $stamp_info[0];
        				$stamp_id = $stamp_info[1];
        
        				$ustamp = new UserStamp();
        				$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
        
        				$post['kv_header']['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
        				$post['kv_header']['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
        			}
        			else
        			{
        
        				$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
        				if($userst)
        				{
        					$uarray = $userst->toArray();
        					$post['kv_header']['arzt_nr'] = $uarray['LANR'];
        					$post['kv_header']['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
        				}
        			}
        		}
        
        		$post['stamp_block'] = nl2br(htmlspecialchars($_POST['stamp_block']));
        		$post['stamp_block'] = strip_tags(str_replace('<br />', " --\\-- ", $post['stamp_block']));
        
        		$this->generatePdfNew(3, $post, 'vdekanlage2', "vdek_anlage_2_pdf.html");
        	}
        }
        
        
        
        public function sisambulantAction(){
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpId($decid);
            
            if(isset($_REQUEST['test']) && $_REQUEST['test'] == 1)
            {
            	error_reporting(E_ALL & ~E_NOTICE & ~E_WARNING & ~E_STRICT);
            }
            $patientmaster = new PatientMaster();
            $this->view->patientinfo = $patientmaster->getMasterData($this->dec_id,1);
            $this->_patientMasterData = $patientmaster->get_patientMasterData();
            	
            /*--------------- Patient  details --------------------------------------*/
            $patientmaster = new PatientMaster();
            $patientinfo = $this->_patientMasterData;
            
            $form['patient_name'] = $patientinfo['first_name'] . " " . $patientinfo['last_name'];
            $form['patient_dob'] = $patientinfo['birthd'];
            
            /*--------------- Client users details --------------------------------------*/
            $users = new User();
            $userarray = $users->getUserByClientid($logininfo->clientid,0,true);
            $userarraylast_ids = array();
            
            foreach($userarray as $user)
            {
                $user_details[$user['id']]['name'] =   trim($user['first_name']) . " " . trim($user['last_name']);
            }
            
//             $thematics = array("movement","cognitive","mobility","diseaserelated","selfcatering","socialrelations","financialmanagement");
			
			$controller = Zend_Controller_Front::getInstance()->getRequest()->getControllerName();
			$action = Zend_Controller_Front::getInstance()->getRequest()->getActionName();
			$form_name = $controller.'/'.$action;
            $thematics = Pms_CommonData::getFormsTextareas($form_name);
            
            $thematics_codes = array_keys($thematics); 
            $thematics_colors = array("movement"=>"#d22027","cognitive"=>"#f35746","mobility"=>"#fbbd09","diseaserelated"=>"#66c76b","selfcatering"=>"#9e50ae","socialrelations"=>"#69b4e7","financialmanagement"=>"#f14770");
            $this->view->thematics = $thematics;
         	
            $formstextslist_model = new FormsTextsList();
            $standard_texts_arr =  $formstextslist_model->get_client_list($clientid,$form_name);
            
			foreach($standard_texts_arr as $k=>$st){
				$standard_texts[$st['field_name']][] = $st['field_value']; 
			}
			$this->view->form_name = $form_name;
			$this->view->standard_texts = $standard_texts;

			
			
            if($_GET['form_id']){
            	$edit_form_id = $_GET['form_id']; 
            }
            
            // get existing data 
            $sisform =  SisAmbulant::get_patient_sis_ambulant($ipid,$clientid,$edit_form_id);
            //ISPC-2658, elena, 08.09.2020
            // if form_id doesn't exist, take data from last changed form (if exists)
            if(/*!empty($edit_form_id) &&*/ $sisform && !empty($sisform))
            {
                $form_id = $sisform[0]['id'];
                $form['form_id']  = $form_id;
                $form['dependent_person']  = $sisform[0]['dependent_person'];
                if( $sisform[0]['change_date'] != "0000-00-00 00:00:00"){
                    $form['last_update']  = date("d.m.Y",strtotime($sisform[0]['change_date']));
                } 
                else
                {
                    $form['last_update']  = date("d.m.Y",strtotime($sisform[0]['create_date']));
                }
                
                if( $sisform[0]['change_user'] != "0"){
                    $form['last_update_user']  = $user_details[$sisform[0]['change_user']]['name'];
                } 
                else
                {
                    $form['last_update_user']  = $user_details[$sisform[0]['create_user']]['name'];
                }
                 
                $sisform_thematics =  SisAmbulantThematics::get_patient_sis_ambulant_thematics($ipid,$clientid,$form_id);
                if(!empty($sisform_thematics)){
                    foreach ($sisform_thematics as $k=>$theme_data){
                        $form['theme'][$theme_data['thematic']] = $theme_data;
                    }
                }
            } else {
                $form['last_update']  = date("d.m.Y",time());
                $form['last_update_user']  = $user_details[$logininfo->userid]['name'];
            }
            //TODO-3793 Ancuta 29.01.2021
            $form['last_update']  = date("d.m.Y",time());
            // -- 
            
            $this->view->form_data = $form;
            
            
            if($this->getRequest()->isPost())
            {
                
                $post = $_POST;
                $post['form']['thematics'] = $thematics_codes ;
                $post['form']['thematics_colors'] = $thematics_colors;
                $post['form']['ipid'] = $ipid;
                $post['form']['clientid'] = $clientid;
                $post['form']['patient_name'] =  $form['patient_name'] ;
                $post['form']['patient_dob'] = $form['patient_dob'];
                $post['form']['last_update'] = $form['last_update'];
                $post['form']['last_update_user'] = $form['last_update_user'];
                
                if($_POST['form_action'] == "save")
                {
                    $sis_form = new Application_Form_SisAmbulant();
                    $sis_theme_form = new Application_Form_SisAmbulantThematics();
                    
                    // save
                    if($_POST['form_id'] != 0 && !empty($_POST['form_id']))
                    {
                        // update existing
                        $post['form']['form_id'] = $_POST['form_id'];       
                        $sis_form->update($post['form']);
                    } 
                    else
                    {
                        //insert new 
                        $sis_id = $sis_form->insert($post['form']);
                        
                        if(!empty($sis_id)){
                            $post['form']['form_id'] = $sis_id;       
                        }
                    }

                    
                    if($post['form']['form_id'] != 0 && !empty($post['form']['form_id'])){
                         $sis_thematics = $sis_theme_form->insert($post['form']);
                    }

//                     if($ipid =="5a9e5ebf4946876bfa22b8472802c0f1810dc99d"){
                        
//                         $post['form']['last_update'] = $_POST['last_update'];
//                         $post['form']['last_update_user'] = $_POST['last_update_user'];
//                     }
                    
                    $this->generatePdfNew(4, $post, 'SisAmbulant_save', "sisambulant_pdf.html");
                     
                    /* ---------------------- Redirect to verlauf  ------------------- */
                    $this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
                    exit;
                } 
                elseif($_POST['form_action'] == "print")
                {
                    $this->generatePdfNew(3, $post, 'SisAmbulant', "sisambulant_pdf.html");
                } 
            
            }
        }
        
        
		public function xbdtactionsAction() {
			$logininfo = new Zend_Session_Namespace ( 'Login_Info' );
			$decid = Pms_Uuid::decrypt ( $_GET ['id'] );
			$ipid = Pms_CommonData::getIpid ( $decid );
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$this->view->clientid = $clientid;
			$this->view->userid = $userid;
			
			/* ----------------------Patient Info & Tab menus START-------------------------- */
			$patientmaster = new PatientMaster ();
			$this->view->patientinfo = $patientmaster->getMasterData ( $decid, 1 );
			$tm = new TabMenus ();
			$this->view->tabmenus = $tm->getMenuTabs ();
			
			// get client user list start
			$users = new User ();
			$userarray = $users->getUserByClientid ( $logininfo->clientid );
			$users_array ["-1"] = "Team";
			foreach ( $userarray as $user ) {
				$users_array [$user ['id']] = trim ( $user ['user_title'] ) . " " . trim ( $user ['last_name'] ) . ", " . trim ( $user ['first_name'] );
			}
			
			$this->view->users_le = $users_array;
			$this->view->jsusers = json_encode ( $users_array );
			
			/* -------------- Get actions---------------------------- */
			$form_data = PatientXbdtActions::get_actions ( $ipid );
			
			/* -------------- Xbdt action - retirive form data	---------------------------- */
			if ($form_data) {
				
				// get client actions
				$actions_data = XbdtActions::client_xbdt_actions ( $clientid,false );
				foreach ( $actions_data as $k => $ac ) {
					$action_details [$ac ['id']] = $ac;
				}
				
				foreach ( $form_data as $k_item => $item_data ) {
					
					$form_items [$item_data ['id']] ['ident'] = $item_data ['id'];
					$form_items [$item_data ['id']] ['db_row_id'] = $item_data ['id'];
					$form_items [$item_data ['id']] ['new'] = "0";
					$form_items [$item_data ['id']] ['course_ident'] = $item_data ['course_id'];
					$form_items [$item_data ['id']] ['master_action_id'] = $item_data ['action'];
					
					if (strlen ( $item_data ['action_date'] ) > 0) {
						$form_items [$item_data ['id']] ['date'] = date ( "d.m.Y", strtotime ( $item_data ['action_date'] ) );
						$form_items [$item_data ['id']] ['time'] = date ( "H:i", strtotime ( $item_data ['action_date'] ) );
					}
					
					if(empty($item_data ['file_id'])) {
						$form_items [$item_data ['id']] ['action_billed'] = 0;
					} else {
						$form_items [$item_data ['id']] ['action_billed'] = $item_data ['file_id'];
					}
					
					$form_items [$item_data ['id']] ['action_id'] = $action_details [$item_data ['action']] ['action_id'];
					$form_items [$item_data ['id']] ['action_name'] = $action_details [$item_data ['action']] ['name'];
					$form_items [$item_data ['id']] ['action_user'] = $item_data ['userid'];
				}
			}
			$form_items = array_values ( $form_items );
			
			$this->view->form_id = $form_id;
			$this->view->form_items = $form_items;
			
			/* ---------------------- POST -------------------------- */
			if ($this->getRequest ()->isPost ()) {
				// print_r($_POST); exit;
				
				$actions_form = new Application_Form_PatientXbdtActions ();
				
				if (strlen ( $_POST ['save'] ) > 0) {
					
					if ($actions_form->validate ( $_POST )) {
						$result = $actions_form->update_multiple_data ( $_POST );
						$this->redirect ( APP_BASE . 'patientformnew/xbdtactions?id=' . $_REQUEST ['id'] );
						exit ();
					} else {
						$actions_form->assignErrorMessages ();
						$this->view->form_items = $_POST ['item'];
					}
				}
			}
		}
		
		public function nraapvAction() {
			$logininfo = new Zend_Session_Namespace('Login_Info');			
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			
			$userid = $loginfo->userid;
			$clientid = $logininfo->clientid;
			
			/*----------------- Patient Info & TabMenu ------------------------------*/
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			
			$patientdata = $patientmaster->get_patientMasterData();
			
			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			
			// get existing data
			$nraapvform =  PatientNraapv::get_patient_nraapv($ipid);
			
			if(!empty($nraapvform)) {
				$form_id = $nraapvform[0]['id'];
				$form['form_id']  = $form_id;
				$form['client_fax'] = $nraapvform[0]['client_fax'];
				$form['patient_name'] = $nraapvform[0]['patient_name'];
				$form['patient_phone'] = $nraapvform[0]['patient_phone'];
				$form['patient_contactphone'] = $nraapvform[0]['patient_contactphone'];
				$form['qpa_name'] = $nraapvform[0]['qpa_name'];
				$form['qpa_phone'] = $nraapvform[0]['qpa_phone'];
				$form['qpa_fax'] = $nraapvform[0]['qpa_fax'];
				$form['fdoc_name'] = $nraapvform[0]['fdoc_name'];
				$form['fdoc_phone'] = $nraapvform[0]['fdoc_phone'];
				$form['fdoc_fax'] = $nraapvform[0]['fdoc_fax'];
				$form['pflege_name'] = $nraapvform[0]['pflege_name'];
				$form['pflege_phone'] = $nraapvform[0]['pflege_phone'];
				$form['pflege_fax'] = $nraapvform[0]['pflege_fax'];
				$form['other_info'] = $nraapvform[0]['other_info'];
				
			} else {
			/*--------------- Client  details ---------------------------------------*/
			$clientdata = Pms_CommonData::getClientData($clientid);
			$form['client_fax'] = $clientdata[0]['fax'];			
			
			/*--------------- Patient  details --------------------------------------*/
// 			$patientmaster = new PatientMaster();
// 			$patientdata = $patientmaster->getMasterData($decid, 0);

			//ISPC-2045
			if ( ! empty($patientdata['PatientContactphone']) ) {
			
				$PatientContactphone = array_column($patientdata['PatientContactphone'], 'phone_number');
				$patientdata['kontactnumber'] = implode("; ", $PatientContactphone);
			}
			
			$form['patient_name'] = $patientdata['first_name'] . " " . $patientdata['last_name'];
			$form['patient_phone'] = $patientdata['phone'];
			$form['patient_contactphone'] = $patientdata['kontactnumber'] ;
			
			
				
						
			/*--------------- QPA  details --------------------------------------*/
			$assignuser = new PatientQpaMapping();
			$assignuser_ids_arr = $assignuser->getPatientClientData($epid);
			
			foreach ($assignuser_ids_arr as $value) {
				$assigneduser_ids[] = $value['userid'];
			}
			
			$user = new User();
			$usersdata = $user->getMultipleUserDetails($assigneduser_ids, true);
			
			if(!empty($usersdata)) {
				foreach($usersdata as $k_user=>$v_user) {
					$usersinfo[$v_user['id']]['name'] = $v_user['first_name'] .' '. $v_user['last_name'];
					$usersinfo[$v_user['id']]['phone'] = $v_user['phone_practice'];
					$usersinfo[$v_user['id']]['fax'] = $v_user['fax'];
					if ($v_user['id'] == $userid) {
						$form['qpa_name'] = $usersinfo[$v_user['id']]['name'];
						$form['qpa_phone'] = $usersinfo[$v_user['id']]['phone'];
						$form['qpa_fax'] = $usersinfo[$v_user['id']]['fax'];
					}
				}
				if(!isset($form['qpa_name']) && !isset($form['qpa_phone']) && !isset($form['qpa_fax'])) {
					$form['qpa_name'] = $usersdata[$assigneduser_ids[0]]['first_name'] .' '. $usersdata[$assigneduser_ids[0]]['last_name'];
					$form['qpa_phone'] = $usersdata[$assigneduser_ids[0]]['phone_practice'];
					$form['qpa_fax'] = $usersdata[$assigneduser_ids[0]]['fax'];
				}
				}
				
				/*--------------- Hausarzt  details --------------------------------------*/
				$fdoc = new FamilyDoctor();
				$fdocdata = $fdoc->getFamilyDoc($patientdata['familydoc_id']);
				
				if(!empty($fdocdata)) {
					$form['fdoc_name'] = $fdocdata[0]['first_name'] .' '. $fdocdata[0]['last_name'];
					$form['fdoc_phone'] = $fdocdata[0]['phone_practice'];
					$form['fdoc_fax'] = $fdocdata[0]['fax'];
				}
				
				/*--------------- Pflegedienste  details --------------------------------------*/
				$pfle = new PatientPflegedienste();
				$pfledata = $pfle->getPatientPflegedienste($ipid);				
				
				if(!empty($pfledata)) {
					$form['pflege_name'] = $pfledata[0]['pf_nursing'];
					$form['pflege_phone'] = $pfledata[0]['pf_phone_practice'];
					$form['pflege_fax'] = $pfledata[0]['pf_fax'];
				}		
				
			}
				$this->view->form_data = $form;
				
				if($this->getRequest()->isPost())
				{
				
					$post = $_POST;
					$post['form']['ipid'] = $ipid;
					
					if($_POST['form_action'] == "save")
					{	
						$nraapv_form = new Application_Form_PatientNraapv();					
					
						// save
						if($_POST['form_id'] != 0 && !empty($_POST['form_id']))
						{
							// update existing
							$post['form']['form_id'] = $_POST['form_id'];
							$nraapv_form->updatedata($post['form']);
						}
						else
						{
							//insert new							
							$nraapv_id = $nraapv_form->insertdata($post['form']);
							
							if(!empty($nraapv_id)){
								$post['form']['form_id'] = $nraapv_id;
							}
						}
						$this->generatePdfNew(4, $post, 'nraapv_save', "nraapv_pdf.html");
						/* ---------------------- Redirect to verlauf  ------------------- */
                    	$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
                    	exit;
					}
					
					elseif($_POST['form_action'] == "pdf_print")
					{
						$this->generatePdfNew(3, $post, 'nraapv', "nraapv_pdf.html");
					}
					elseif($_POST['form_action'] == "reset")
					{						
						if($_POST['form_id'] != 0 && !empty($_POST['form_id']))
						{
							// reload form
							$nraapv_form = new Application_Form_PatientNraapv();
							$nraapv_form->reloaddata($ipid);
							
							/* ---------------------- Redirect to current page  ------------------- */
							$this->redirect(APP_BASE . 'patientformnew/nraapv?id=' . $_REQUEST['id']);
						}
					}
		}
		}
		
		public function verordnungtpkinderAction()
		{
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
		
			/*			 * ******************************************** */
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
		
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			/*			 * ******************************************** */
		
			/* --------------------Check for MultipleArzstemple----------------------------- */
			$multiplestamps_previleges = new Modules();
		
			if($multiplestamps_previleges->checkModulePrivileges("64", $logininfo->clientid))
			{
				$multiplestamps_option = true;
			}
			else
			{
				$multiplestamps_option = false;
			}
		
			$this->view->multiplestamps_option = $multiplestamps_option;
		
			/* ------------------------------------------------------------------------------ */
			if($this->getRequest()->isPost())
			{
		
		
				// 				print_r($_POST); exit;
				$munster63kinder_form = new Application_Form_Munster63kinder();
		
		
				if($_POST['post_status'] == "reset"){
		
					// mark as completed the old entry
					$munster63kinder_form->mark_as_completed($_POST);
					//var_dump($_POST); exit;
					if($_POST['stampusers'] > 0)
					{
						if($multiplestamps_option === true)
						{
		
							$stamp_info = explode('-', $_POST['stampusers']);
							$stamp_user = $stamp_info[0];
							$stamp_id = $stamp_info[1];
		
							$ustamp = new UserStamp();
							$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
		
							$_POST['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
							$_POST['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
						}
						else
						{
		
							$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
							if($userst)
							{
								$uarray = $userst->toArray();
								$_POST['arzt_nr'] = $uarray['LANR'];
								$_POST['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
							}
						}
					}
		
		
					$_POST['stamp_block'] = strip_tags(str_replace('<br/>', "\n", $_POST['stamp_block']));
					$_POST['patient_name'] = $_POST['patient_name'];
		
					// save pdf
					$this->generatePdfNew(4, $_POST, 'verordnungtpkinder_save', "verordnungtpkinderpdf.html");
		
					// redirect to blank form
					$this->_redirect(APP_BASE . "patientformnew/verordnungtpkinder?id=" . $_GET['id']);
					exit;
				}
				else{
					if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) == '0')
					{
						$munster63kinder_save_data = $munster63kinder_form->insert_data($ipid, $_POST);
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
					else if($_POST['post_status'] == "save" && strlen($_POST['saved_id']) > '0')
					{
						$munster63kinder_update_data = $munster63kinder_form->update_data($ipid,$_POST);
						$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
					}
				}
			}
		
			/* ------------------------------------------------------------------------------ */
			$patientmaster = new PatientMaster();
			$parr = $patientmaster->getMasterData($decid, 0);
		
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'] . "\n" . $parr['street1'] . "\n" . $parr['zip'] . "&nbsp;" . $parr['city'];
			$this->view->birthdate = $parr['birthd'];
			$this->view->patientname1 = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->patietnaddress = $parr['street1'] . "&nbsp;" . $parr['zip'] . "\n" . $parr['city'];
		
			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
		
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}
		
			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			$this->view->refarray = $ref['referred_name'];
		
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
		
			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			$this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
		
			$insucom = new HealthInsurance();
			$insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
			$this->view->kvnumber = $healthinsu_array[0]['kvk_no'];
		
			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
		
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}
		
			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;
		
			$brenmber = Doctrine_Query::create()
			->select('*')
			->from('PatientQpaMapping')
			->where("epid='" . $epid . "'");
			$bexec = $brenmber->execute();
			$barray = $bexec->toArray();
		
			$user = Doctrine::getTable('User')->find($logininfo->userid);
			if($user)
			{
				$uarray = $user->toArray();
				$this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
				$this->view->arzt_nr = $uarray['LANR'];
			}
		
			/* ------------------- 	Maindiagnosis		------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
		
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
		
			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = "; ";
					}
				}
			}
				
			$dg = new DiagnosisType();
			$abb2 = "'ND'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
				
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
				
			if(count($dianoarray) > 0)
			{
				if($diagnosis != '')
				{
					$comma = "; ";
				}
				else 
				{
					$comma = "";
				}
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . $valdia['diagnosis'] . ' (' . $valdia['icdnumber'] . ')';
						$comma = "; ";
					}
				}
			}
		
			if(strlen($diagnosis) > 0)
			{
				$this->view->relevante_Input = $diagnosis;
			}
			else
			{
				$this->view->relevante_Input = '';
			}
		
			/* ---------------------------------------------------- */
			// Get medication + bedarfs medication
			$pdrug = new PatientDrugPlan();
			$drugarray = $pdrug->getPatientDrugPlan($decid);
		
			$comma = "";
			$comma2 = "";
			$medicationbedarfs="";
			$medication_iv="";
			$medication_smtz="";
			$medication= "";
		
			foreach($drugarray as $key => $val)
			{
				$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
				if(!empty($medca))
				{
					$medcaarray = $medca->toArray();
		
				}
		
				if($val['isbedarfs'] == '1')
				{
		
					$med_array['b_bedarf'] .= $comma2 . $medcaarray['name'] . ", " . $val['dosage'];
					$comma2 = " | ";
				}
				else if($val['isivmed'] == '1')
				{
		
					$med_array['c_iv'] .= $comma2 . $medcaarray['name'] . ", " . $val['dosage'];
					$comma2 = " | ";
				}
				else if($val['isschmerzpumpe'] == '1')
				{
		
					$med_array['d_sc'] .= $comma2 . $medcaarray['name'] . ", " . $val['dosage'];
					$comma2 = " | ";
				}
				else
				{
					$med_array['a_med'] .= $comma . $medcaarray['name'] . ", " . $val['dosage'];
					$comma = " | ";
				}
				ksort($med_array);
			}
		
			foreach($med_array as $med_type){
				if(!empty($med_type)){
					$medicationverord_arr[]= $med_type;
				}
			}
		
			$medicationverord = implode("\n",$medicationverord_arr);
		
			$this->view->medication = $medicationverord;
		
		
		
		
			/* --------------------------------User select------------------------------------- */
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
		
			$users = new User();
			$userarray = $users->getUserByClientid($logininfo->clientid);
			$userarraylast[] = $this->view->translate('selectuser');
			$userarraylast_ids = array();
		
			foreach($userarray as $user)
			{
				$userarraylast[$user['id']] = trim($user['user_title']) . " " .trim($user['last_name']) . ", " . trim($user['first_name']);
				$userarraylast_ids[] = $user['id'];
			}
			$this->view->users = $userarraylast;
		
			if($isadmin == 1)
			{
				$showselect = 1;
			}
			else
			{
				$showselect = 1; // show select to all
			}
		
			$this->view->showselect = $showselect;
		
			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
		
			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;
		
			//get saved form data
			$munster63kinder = new Munster63kinder();
			$munster63kinder_data = $munster63kinder->get_munster_patient_data($ipid);
			$this->retainValues($munster63kinder_data);
			$this->view->bra_options = explode(',',$munster63kinder_data['bra_options']);
		
		
			/* -------------- Pain questionnaire file history	---------------------------- */
			$fileupload = new PatientFileUpload();
			$form_files = $fileupload->get_muster63kinder_file_data($ipid);
		
			$users_ids[] = '999999999999';
			foreach($form_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}
			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			$this->view->muster_files_history = $form_files;
		
			/* -------------- Bra options	---------------------------- */
			$modules = new Modules();
			$bra_options_array = Pms_CommonData::get_bra_options_checkboxes();
		
			// 			print_r($bra_options_array); exit;
			$bra_options_substitute = array(
					"PCT03a" => "Arzt Teilvers. (PCT03a)",
					"PCT04a" => "Arzt Vollvers. (PCT04a)",
					"PCT03b" => "Pflege Teilvers. (PCT03b)",
					"PCT04b" => "Pflege Vollvers. (PCT04b)",
			);
		
			foreach($bra_options_array as $bra_key =>$bra_value){
				if(isset($bra_options_substitute[$bra_value])){
					$new_bra_options_array[$bra_key] = $bra_options_substitute[$bra_value];
				} else{
					$new_bra_options_array[$bra_key] = $bra_value;
				}
			}
		
			$this->view->bra_options_array = $new_bra_options_array;
			if($modules->checkModulePrivileges("97", $logininfo->clientid)) // Bra options
			{
				$sapv_bra_options = 1;
			}
			else
			{
				$sapv_bra_options = 0;
			}
		
			$this->view->sapv_bra_options = $sapv_bra_options;
		
			if($this->getRequest()->isPost())
			{
				if($_POST['stampusers'] > 0)
				{
		
					if($multiplestamps_option === true)
					{
		
						$stamp_info = explode('-', $_POST['stampusers']);
						$stamp_user = $stamp_info[0];
						$stamp_id = $stamp_info[1];
		
						$ustamp = new UserStamp();
						$userstatmp = $ustamp->getUserStampById($stamp_user, $stamp_id);
		
						$_POST['arzt_nr'] = $userstatmp[0]['stamp_lanr'];
						$_POST['betriebsstatten_nr'] = $userstatmp[0]['stamp_bsnr'];
					}
					else
					{
		
						$userst = Doctrine::getTable('User')->find($_POST['stampusers']);
						if($userst)
						{
							$uarray = $userst->toArray();
							$_POST['arzt_nr'] = $uarray['LANR'];
							$_POST['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
						}
					}
				}
		
				$_POST['stamp_block'] = strip_tags(str_replace('<br/>', "\n", $_POST['stamp_block']));
		
		
				$_POST['patient_name'] = $_POST['patient_name'];
				$_POST['bra_options_array'] = $this->view->bra_options_array;
		
				$bra_options_substitute = array(
						"PCT03a" => "Arzt Teilvers. (PCT03a)",
						"PCT04a" => "Arzt Vollvers. (PCT04a)",
						"PCT03b" => "Pflege Teilvers. (PCT03b)",
						"PCT04b" => "Pflege Vollvers. (PCT04b)",
				);
				foreach($_POST['bra_options'] as $k =>$bra_value){
		
					if(isset($bra_options_substitute[$bra_value])){
						$post_bra_options[] = $bra_options_substitute[$bra_value];
					} else{
						$post_bra_options[] = $bra_value;
					}
				}
		
				$_POST['bra_options'] = $post_bra_options;
		
				if($_POST['post_status'] == "pdf_pre_print")
				{
					$_POST['bra_options_array'] = $this->view->bra_options_array;
					$_POST['sapv_bra_options'] = $this->view->sapv_bra_options;
		
					$this->generatePdfNew(3, $_POST, 'verordnungtpkinder_pre', "verordnungtpkinder_pre_pdf.html");
				}
				else if($_POST['post_status'] == "pdf_print")
				{
					$_POST['bra_options_array'] = $this->view->bra_options_array;
					$_POST['sapv_bra_options'] = $this->view->sapv_bra_options;
					// 					print_r($_POST); exit;
		
					$this->generatePdfNew(3, $_POST, 'verordnungtpkinder', "verordnungtpkinderpdf.html");
				}
			}
		}
		
		private function retainValues($values, $prefix = '')
		{
		
			foreach($values as $key => $val)
			{
				//var_dump($val);
				if(!is_array($val))
				{
					$this->view->$key = $val;
		
				}
				else
				{
					//retain 1 level array used in multiple hospizvbulk form
					foreach($val as $k_val => $v_val)
					{
						if(!is_array($v_val))
						{
							$this->view->{$prefix . $key . $k_val} = $v_val;
						}
					}
				}
			}
			//exit;
		}
		
		public function stammblatt7Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$userid = $logininfo->userid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
		
			/* ------------------- User Data--------------------------------------- */
			$loguser = Doctrine::getTable('User')->find($logininfo->userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->loginusername = $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
			}
		
			/* -------------------Patient Data--------------------------------------- */
			// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->patbirth = $patientarr['birthd'];
			$this->view->patlastname = $patientarr['last_name'];
			$this->view->patfirstname = $patientarr['first_name'];
			$this->view->patstreet = $patientarr['street1'];
			$this->view->patzip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->pattel = $patientarr['phone'];
			$this->view->pathandy = $patientarr['mobile'];
			
			/* -------------------Current location Data--------------------------------------- */
			$pl = new PatientLocation();
			$location = $pl->getActiveLocationPatInfo($ipid);
			
			if(!empty($location))
			{
			
				foreach($location as $valuel)
				{
					$llocation = $valuel['location'];
					$lstreet = $valuel['street'];
					$lzipcode = $valuel['zip'];
					$lcity = $valuel['city'];
					if($valuel['phone1'] != '')
					{
						$lphone = $valuel['phone1'];
					}
					else 
					{
						$lphone = $valuel['phone'];
					}
					$lfax = $valuel['fax'];
					$lhandy = $valuel['mobile'];
					
					if(!empty($valuel['station']))
					{
						$this->view->station_name = $valuel['station']['station'];
					}
				}
			
				if($location[0]['location_type'] != 5)
				{
					$this->view->location = $llocation;
					$this->view->locstreet = $lstreet;
					$this->view->loczip = $lzipcode;
					$this->view->loccity = $lcity;
					$this->view->loctel = $lphone;
					if($lfax != '') {
						$this->view->locfax = $lfax;
					}
					else 
					{
						$this->view->locfax = '';
					}
					$this->view->lochandy = $lhandy;
				}
				else
				{
					$this->view->location = "zu Hause";
					$this->view->locstreet = $patientarr['street1'];
					$this->view->loczip = $patientarr['zip'];
					$this->view->loccity = $patientarr['city'];
					$this->view->loctel = $patientarr['phone'];
					$this->view->locfax = $patientarr['fax'];
					$this->view->lochandy = $patientarr['mobile'];
				}
			}
			
			$this->view->location_name_pdf = trim($this->view->location);
			
			if($this->view->loczip != "") {
				$this->view->location_address_pdf = $this->view->loczip;
				if($this->view->loccity != "") {
					$this->view->location_address_pdf .= ", " . $this->view->loccity;
				}
				if($this->view->locstreet != "") {
					$this->view->location_address_pdf .= ", " . $this->view->locstreet;
				}
			}
			else {
				$this->view->location_address_pdf = "";
				if($this->view->loccity != "") {
					$this->view->location_address_pdf .= $this->view->loccity;
					if($this->view->locstreet != "") {
						$this->view->location_address_pdf .= ", " . $this->view->locstreet;
					}
				}
				else {
					$this->view->location_address_pdf = "";
					if($this->view->locstreet != "") {
						$this->view->location_address_pdf .= $this->view->locstreet;
					}
				}
			}
		
			/* -------------------Current location Data--------------------------------------- */
			
			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
			
			if($healthinsu_array) {
				$this->view->healthinsurance_company = $healthinsu_array[0]['company_name'];
				$this->view->healthinsurance_kknr = $healthinsu_array[0]['kvk_no'];
				$this->view->healthinsurance_versnr = $healthinsu_array[0]['insurance_no'];
				$this->view->healthinsurance_companytel = $healthinsu_array[0]['ins_phone'];
				$this->view->healthinsurance_companyfax = $healthinsu_array[0]['ins_phonefax'];
				$this->view->healthinsurance_comment = $healthinsu_array[0]['comment'];
			}
			else {
				$this->view->healthinsurance_company = "";
				$this->view->healthinsurance_kknr = "";
				$this->view->healthinsurance_versnr = "";
				$this->view->healthinsurance_companytel = "";
				$this->view->healthinsurance_companyfax = "";
				$this->view->healthinsurance_comment = "";
			}
			//according to ISPC-834
			if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '1')
			{
				$this->view->zuzahlung = '0';
			}
			else if($healthinsu_array[0]['rezeptgebuhrenbefreiung'] == '2')
			{
				$this->view->zuzahlung = '1';
			}
			else
			{
				$this->view->zuzahlung = '1';
			}
			//according to ISPC-1403
			/* if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
			$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
			$healtharray = $helathins->toArray();
			$this->view->healthinsurance_companytel = $healtharray['phone'];
			$this->view->healthinsurance_companyfax = $healtharray['phonefax'];
			} */
		
			/* --------------Patient family doctor---------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($patientarr['familydoc_id']);
			if($docarray)
			{
				$this->view->hausarzt_details = trim($docarray[0]['last_name']) . ", " . $docarray[0]['first_name'] . "<br/> " . $docarray[0]['street1'] . ", " . $docarray[0]['zip'] . " " . $docarray[0]['city'];
				$this->view->hausarzt_tel = $docarray[0]['phone_practice'];
				$this->view->hausarzt_fax = $docarray[0]['fax'];
				$this->view->hausarzt_name_pdf = trim($docarray[0]['last_name']) . ", " . $docarray[0]['first_name'];
				$this->view->hausarzt_address_pdf = $docarray[0]['zip'] . ", " . $docarray[0]['city'] . ", " . $docarray[0]['street1'];
			}
			else
			{
				$this->view->hausarzt_details = "";
				$this->view->hausarzt_tel = "";
				$this->view->hausarzt_fax = "";
				$this->view->hausarzt_name_pdf = "";
				$this->view->hausarzt_address_pdf = "";
			}

			/* ------------ Patient First Specialist -------------------- */
			$spec = new PatientSpecialists();
			$spec_array = $spec->get_patient_specialists($ipid, true);
				
			if($spec_array) {
				foreach($spec_array as $sp) {
					$patsp[] = $sp['master'];
				}
			}

			if($patsp)
			{
				$this->view->facharzt_details = trim($patsp[0]['last_name']) . ", " . $patsp[0]['first_name']. "<br/> ";
				$this->view->facharzt_tel = $patsp[0]['phone_practice'];
				$this->view->facharzt_fax = $patsp[0]['fax'];
				if($patsp[0]['first_name'] != "") {
					$this->view->facharzt_name_pdf = trim($patsp[0]['practice']) . " " . ($patsp[0]['last_name']) . ", " . $patsp[0]['first_name'];
				}
				else 
				{
					$this->view->facharzt_name_pdf = trim($patsp[0]['practice']) . " " . ($patsp[0]['last_name']);
				}
				$this->view->facharzt_address_pdf = $patsp[0]['zip'] . ", " . $patsp[0]['city'] . ", " . $patsp[0]['street1'];
			}
			else
			{
				$this->view->facharzt_details = "";
				$this->view->facharzt_tel = "";
				$this->view->facharzt_fax = "";
				$this->view->facharzt_name_pdf = "";
				$this->view->facharzt_address_pdf = "";
			}
			/* ------------ Patient First Specialist End -------------------- */
			
			/* --------------Patient First Pfllegedienst---------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($patientarr['ipid']);
			
			if($ppflearray)
			{
				$this->view->pflegedienst_details = htmlspecialchars($ppflearray[0]['nursing']) . "<br/>" . htmlspecialchars($ppflearray[0]['street1']) . ", " . htmlspecialchars($ppflearray[0]['zip']) . " " . htmlspecialchars($ppflearray[0]['city']);
				$this->view->pflegedienst_tel = $ppflearray[0]['pf_phone_practice'];
				$this->view->pflegedienst_fax = $ppflearray[0]['pf_fax'];
				$this->view->pflegedienst_name_pdf = htmlspecialchars($ppflearray[0]['nursing']);
				$this->view->pflegedienst_address_pdf = htmlspecialchars($ppflearray[0]['zip']) . ", " . htmlspecialchars($ppflearray[0]['city']) . ", " . htmlspecialchars($ppflearray[0]['street1']);
				$this->view->pflegedienst_comment = $ppflearray[0]['pf_com'];
			}
			else
			{
				$this->view->pflegedienst_details = "";
				$this->view->pflegedienst_tel = "";
				$this->view->pflegedienst_fax = "";
				$this->view->pflegedienst_name_pdf = "";
				$this->view->pflegedienst_address_pdf = "";
				$this->view->pflegedienst_comment = "";
				}
		
			/* --------------Patient Contact persons Data ---------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);
		
			if(!empty($pcs[0]))
			{
				$cntpers1name = $pcs[0]['cnt_last_name'] . ', ' . $pcs[0]['cnt_first_name'];
				$cntpers1tel = $pcs[0]['cnt_phone'];
				$cntpers1handy = $pcs[0]['cnt_mobile'];
				//<!-- ISPC-2794,Elena,05.02.2021 -->
                $cntpers1address = $pcs[0]['cnt_street1'] ;
                $cntpers1address .= (strlen(trim($pcs[0]['cnt_street2'])) > 0) ?  ' ' .  $pcs[0]['cnt_street2'] : '';
                $cntpers1address .= ' ' . $pcs[0]['cnt_zip'];
                $cntpers1address .= ' ' . $pcs[0]['cnt_city'];
			}
			else
			{
				$cntpers1name = "";
				$cntpers1tel = "";
				$cntpers1handy = "";
				//<!-- ISPC-2794,Elena,05.02.2021 -->
                $cntpers1address = "";
			}
		
			if(!empty($pcs[1]))
			{
				$cntpers2name = $pcs[1]['cnt_last_name'] . ', ' . $pcs[1]['cnt_first_name'];
				$cntpers2tel = $pcs[1]['cnt_phone'];
				$cntpers2handy = $pcs[1]['cnt_mobile'];
				//<!-- ISPC-2794,Elena,05.02.2021 -->
                $cntpers2address = $pcs[1]['cnt_street1'] ;
                $cntpers2address .= (strlen(trim($pcs[1]['cnt_street2'])) > 0) ?  ' ' .  $pcs[1]['cnt_street2'] : '';
                $cntpers2address .= ' ' . $pcs[1]['cnt_zip'];
                $cntpers2address .= ' ' . $pcs[1]['cnt_city'];
			}
			else
			{
				$cntpers2name = "";
				$cntpers2tel = "";
				$cntpers2handy = "";
                //<!-- ISPC-2794,Elena,05.02.2021 -->
				$cntpers2address = '';
			}
			
			if(!empty($pcs[2]))
			{
				$cntpers3name = $pcs[2]['cnt_last_name'] . ', ' . $pcs[2]['cnt_first_name'];
				$cntpers3tel = $pcs[2]['cnt_phone'];
				$cntpers3handy = $pcs[2]['cnt_mobile'];
				//<!-- ISPC-2794,Elena,05.02.2021 -->
                $cntpers3address = $pcs[3]['cnt_street1'] ;
                $cntpers3address .= (strlen(trim($pcs[2]['cnt_street2'])) > 0) ?  ' ' .  $pcs[2]['cnt_street2'] : '';
                $cntpers3address .= ' ' . $pcs[2]['cnt_zip'];
                $cntpers3address .= ' ' . $pcs[2]['cnt_city'];
			}
			else
			{
				$cntpers3name = "";
				$cntpers3tel = "";
				$cntpers3handy = "";
				//<!-- ISPC-2794,Elena,05.02.2021 -->
				$cntpers3address = "";
			}
			
			$this->view->cntpers1name = $cntpers1name;
			$this->view->cntpers1tel = $cntpers1tel;
			$this->view->cntpers1handy = $cntpers1handy;
			//<!-- ISPC-2794,Elena,05.02.2021 -->
            $this->view->cntpers1address = $cntpers1address;
			$this->view->cntpers2name = $cntpers2name;
			$this->view->cntpers2tel = $cntpers2tel;
			$this->view->cntpers2handy = $cntpers2handy;
			//<!-- ISPC-2794,Elena,05.02.2021 -->
            $this->view->cntpers2address = $cntpers2address;
			$this->view->cntpers3name = $cntpers3name;
			$this->view->cntpers3tel = $cntpers3tel;
			$this->view->cntpers3handy = $cntpers3handy;
			//<!-- ISPC-2794,Elena,05.02.2021 -->
            $this->view->cntpers3address = $cntpers3address;

            $_POST['cntpers3address'] = $cntpers3address;
		    $_POST['cntpers2address'] = $cntpers2address;
		    $_POST['cntpers1address'] = $cntpers1address;
		
			/* -------------------SAVE Actions-------------------------------- */
			if(strlen($_POST['btnsave']) > 0)
			{
		
				$kvno = new Application_Form_Stammblatt7();
				$result = $kvno->insertStammblatt7($_POST);
		
				if($result)
				{
					$this->view->error_message = $this->view->translate('recordinsertsucessfully');
				}
			}
			else if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->retain_Values($_POST);
				$post = $_POST;
				$post['patbirth'] = $this->view->patbirth;
				$post['patlastname'] = $this->view->patlastname;
				$post['patfirstname'] = $this->view->patfirstname;
				$post['patstreet'] = $this->view->patstreet;
				$post['patzip'] = $this->view->patzip;
				$post['patcity'] = $this->view->patcity;
				$post['location_name_pdf'] = $this->view->location_name_pdf;
				$post['location_address_pdf'] = $this->view->location_address_pdf;
				$post['station_name'] = $this->view->station_name;
				$post['cntpers1name'] = $cntpers1name;
				$post['cntpers2name'] = $cntpers2name;
				$post['cntpers3name'] = $cntpers3name;
				$post['hausarzt_name_pdf'] = $this->view->hausarzt_name_pdf;
				$post['facharzt_name_pdf'] = $this->view->facharzt_name_pdf;
				$post['pflegedienst_name_pdf'] = $this->view->pflegedienst_name_pdf;
				$post['hausarzt_address_pdf'] = $this->view->hausarzt_address_pdf;
				$post['facharzt_address_pdf'] = $this->view->facharzt_address_pdf;
				$post['pflegedienst_address_pdf'] = $this->view->pflegedienst_address_pdf;
				$post['healthinsurance_company'] = $this->view->healthinsurance_company;
				$post['healthinsurance_kknr'] = $this->view->healthinsurance_kknr;
				$post['healthinsurance_versnr'] = $this->view->healthinsurance_versnr;
				$post['healthinsurance_companytel'] = $this->view->healthinsurance_companytel;
				$post['healthinsurance_companyfax'] = $this->view->healthinsurance_companyfax;
		
				$this->generatePdfNew(3, $post, 'Stammblatt7', "stammblatt7_pdf.html");
			}
		
			$st7 = new Stammblatt7();
			$stamqarr = $st7->get_stammblatt7_details($ipid);
		
			if($stamqarr[0]['ipid'] != $ipid)
			{
		
			}
		
			if(count($stamqarr) > 0)
			{
				$this->view->zuzahlung = $stamqarr[0]['zuzahlung'];
				$this->view->comments = $stamqarr[0]['comments'];
				
				$this->view->pattel= $stamqarr[0]['pattel'];// 1234567890
				$this->view->pathandy= $stamqarr[0]['pathandy'];// pathandy
				$this->view->loctel= $stamqarr[0]['loctel'];// 1234567890
				$this->view->lochandy= $stamqarr[0]['lochandy'];// lochandy
				$this->view->locfax= $stamqarr[0]['locfax'];// locfax
				$this->view->cntpers1tel= $stamqarr[0]['cntpers1tel'];// 1234567890
				$this->view->cntpers1handy= $stamqarr[0]['cntpers1handy'];// cntpers1handy
				$this->view->cntpers2tel= $stamqarr[0]['cntpers2tel'];// 1234567890
				$this->view->cntpers2handy= $stamqarr[0]['cntpers2handy'];// cntpers2handy
				$this->view->cntpers3tel= $stamqarr[0]['cntpers3tel'];// 1234567890
				$this->view->cntpers3handy= $stamqarr[0]['cntpers3handy'];// cntpers3handy
 
				$this->view->healthinsurance_comment= $stamqarr[0]['healthinsurance_comment'];// healthinsurance_comment
				$this->view->hausarzt_tel= $stamqarr[0]['hausarzt_tel'];// 1234567890
				$this->view->hausarzt_fax= $stamqarr[0]['hausarzt_fax'];// hausarzt_fax
				$this->view->facharzt_tel= $stamqarr[0]['facharzt_tel'];// 1234567890
				$this->view->facharzt_fax= $stamqarr[0]['facharzt_fax'];// facharzt_fax
				$this->view->pflegedienst_tel= $stamqarr[0]['pflegedienst_tel'];// 1234567890
				$this->view->pflegedienst_fax= $stamqarr[0]['pflegedienst_fax'];// pflegedienst_fax
				$this->view->pflegedienst_comment= $stamqarr[0]['pflegedienst_comment'];// pflegedienst_comment
				
			}
			/* -------------------END UPDATE Action-------------------------------- */
		}

		//Ernährung = nutrition ISPC-1894
		public function nutritionformularAction()
		{
			
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$userid = $logininfo->userid;
			
			$this->enc_id = $_GET['id'];
			
			if (is_null($this->dec_id)) {
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$decid = empty($decid) ? 0 : $decid;
				$this->dec_id = $decid;
			}
			
			if (is_null($this->ipid)) {
				$ipid = Pms_CommonData::getIpid($this->dec_id);
				$ipid = empty($ipid) ? 0 : $ipid;
				$this->ipid = $ipid ;
			}
				
			if (is_null($this->_patientMasterData)) {
				$patientmaster = new PatientMaster();				
				$this->view->patientinfo = $patientmaster->getMasterData($this->dec_id,1);
				$this->_patientMasterData = $patientmaster->get_patientMasterData();
			}
			
		
			//get nutritionformularlist application selectbox values
			$application_values = array(
					"0" => $this->view->translate('pleaseselect')
			);
			$nfl = new NutritionFormularList();
			if ($application_list = $nfl->get_client_application_list($clientid)) {
				foreach ($application_list as $k=>$v) {
					$application_values[ $v['id']] = $v['field_value'];
				}
			}
			

			if( $this->getRequest()->isPost())
			{				
				
				$ap_form = new Application_Form_NutritionFormular();
								
				$insert_id = $ap_form->insert_data($this->ipid, $_POST['rows']);
				
				//generate pdf
				$chk = 1; 
				
				
				$post = array();
				$post['form_rows_data'] = $_POST['rows'];
				
				$application_values[0] = ""; //bitte wahlen has value 0... so display empty
				$post['application_values'] = $application_values;
								
				$pdfname = "nutritionformular"; // used also for tabname
				$filename = "nutritionformular_pdf.html";
				
				
				
				$record_id = $this->generatePdfNew_2017($chk, $post, $pdfname, $filename);			
				
				$nutritionform_lang = $this->view->translate("nutritionform");
				
				$cust = array();
				$cust['ipid'] = $this->ipid;
				$cust['course_date'] = date("Y-m-d H:i");
				$cust['course_type'] = "K";
				$cust['course_title'] = $nutritionform_lang['verlauf_entry'];
				$cust['tabname'] = $pdfname;
				$cust['user_id'] = $userid;
				$cust['recordid'] = $record_id;
				
				$pc = new PatientCourse();
				$pc_id = $pc->set_new_record($cust);

				$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $this->enc_id);
				
				return;
				//redirect to verlauf

			}
			
			if( ! $this->getRequest()->isPost() )
			{
				
				/* ------------- Patient Menu---------------------------------------- */
				$tm = new TabMenus();
				$this->view->tabmenus = $tm->getMenuTabs();				
				
				$form_rows_data =  array();				
				
				$formular_id = empty($_GET['formular_id']) ? 0 : (int)$_GET['formular_id'];
				
				if ($formular_id > 0) {					
					$formular_details = NutritionFormular::get_by_id($formular_id , $this->ipid ) ;
					$form_rows_data = $formular_details['formular_values'];
				} else {
 					$formular_details = NutritionFormular::get_by_ipid($this->ipid ) ;
					if (isset($formular_details['formular_values'])) {	
						$form_rows_data = $formular_details['formular_values'];
					}				
				}				

				
				$form_rows_data[] = array("hidden"=>true);
				$this->view->form_rows_data = $form_rows_data;								
				$this->view->application_values = $application_values;		
				$this->view->application_values_json = json_encode($application_values);
				
										
			}
		}
		
		

		private function generatePdfNew_2017($chk, $post, $pdfname, $filename, $extra_settings =  array())
		{
			$pdfname_translated = $this->view->translate($pdfname);
			
			if (is_null($this->dec_id)) {
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$decid = empty($decid) ? 0 : $decid; 
				$this->dec_id = $decid;
			}	

			if (is_null($this->ipid)) {
				$ipid = Pms_CommonData::getIpid($this->dec_id);
				$ipid = empty($ipid) ? 0 : $ipid;
				$this->ipid = $ipid ;
			}
			
			if (is_null($this->_patientMasterData)) {
				$patientmaster = new PatientMaster();
				$patientMasterData = $patientmaster->getMasterData($this->dec_id, 0);
				$this->_patientMasterData = $patientmaster->get_patientMasterData();
			}
					
			
			$excluded_css_cleanup_pdfs = array();// remove style attribute from elemenets
			
			$excluded_keys = array();// htmlspecialchars view values
			
						
			$final_action = false; //download, view, default
			
			//pdf setings for each form
			switch($pdfname) {
				
				case "nutritionformular":
					
					$final_action = 'return';
					
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
					
					$excluded_keys [] = "key_to_exclude_from_htmlspecialchars";					
					$excluded_css_cleanup_pdfs[] = $pdfname;
													
					break;				
						
				case "complaintform":
					$final_action = 'return';
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
					
					$excluded_keys [] = "key_to_exclude_from_htmlspecialchars";					
					$excluded_css_cleanup_pdfs[] = $pdfname;
													
					break;					
						
				case "complaintform_pdf":
					
					$final_action = 'download';

					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
					
					$excluded_keys [] = "key_to_exclude_from_htmlspecialchars";					
					$excluded_css_cleanup_pdfs[] = $pdfname;
													
					break;					
					
				case "add_your_pdfname":
					$final_action = 'view';
				break;
					
				case "sgbxileistungsnachweispdf":
				case "sgbvleistungsnachweispdf":{
					
					$final_action = 'download';
					
					$orientation = 'L';
					$bottom_margin = '10';
					$format = "A4";
										
// 					$html = $extra_settings['htmlform'];
					
					$excluded_keys [] = "key_to_exclude_from_htmlspecialchars";
					$excluded_css_cleanup_pdfs[] = $pdfname;					
					
				}break;
				case "rlppatientcontrol":{
					
					$final_action = 'download';
					
					$orientation = 'L';
					$bottom_margin = '10';
					$format = "A4";
										
// 					$html = $extra_settings['htmlform'];
					
					$excluded_keys [] = "key_to_exclude_from_htmlspecialchars";
// 					$excluded_css_cleanup_pdfs[] = $pdfname;					
					
				}
				break;
				case "demstepcarecontrol":{
					
					$final_action = 'download';
					
					$orientation = 'L';
					$bottom_margin = '10';
					$format = "A4";
										
// 					$html = $extra_settings['htmlform'];
					
					$excluded_keys [] = "key_to_exclude_from_htmlspecialchars";
// 					$excluded_css_cleanup_pdfs[] = $pdfname;					
					
				}
				break;
					
				case "patient_actions_list":{
					
					$final_action = 'download';
					
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
										
					$excluded_keys [] = "key_to_exclude_from_htmlspecialchars";
					$excluded_css_cleanup_pdfs[] = $pdfname;					
					
				}break;
					
					
				default: 
					
					$final_action = 'return';
					
					$orientation = 'P';
					$bottom_margin = '20';
					$format = "A4";
					
					$excluded_keys [] = "key_to_exclude_from_htmlspecialchars";
					
					$excluded_css_cleanup_pdfs[] = $pdfname; // remove style attribute from elemenets
					
					break;
				
			}
		

			
			$post = Pms_CommonData::clear_pdf_data($post, $excluded_keys);
						
			$htmlform = Pms_Template::createTemplate($post, 'templates/' . $filename);
			
			$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);
			
			if($pdfname == "rlppatientcontrol" || $pdfname == "complaintform"  || $pdfname == "complaintform_pdf" ){
				$html = $this->html_prepare_dompdf($html);
			}
	 
			if(!in_array($pdfname, $excluded_css_cleanup_pdfs))
			{
				$html = preg_replace('/style=\"(.*)\"/i', '', $html);
			}
			
			//create the pdf
			$pdf = new Pms_PDF($orientation, 'mm', $format, true, 'UTF-8', false);
			$pdf->SetMargins(10, 5, 10); //reset margins
			$pdf->setDefaults(true, $orientation, $bottom_margin); //defaults with header
			$pdf->setImageScale(1.6);
			$pdf->format = $format;
			$pdf->HeaderText = false;
			$pdf->setPrintFooter(false);
			
			$pdf->SetAutoPageBreak(true , 10);
			$pdf->SetMargins(5, 10, 5, true); //reset margins $left, $top, $right=-1, $keepmargins=false
			$pdf->setCellHeightRatio(1);
			
			
			switch($pdfname) {
				case "sgbxileistungsnachweispdf":
				case "sgbvleistungsnachweispdf":{
					$pdf->SetMargins(10, 20, 5, true);
					$pdf->SetAutoPageBreak(true , 5);

					$header_table = array();
					$header_row = array(
							array("", "attributes" => array("width"=>500)),
							array("", "attributes" => array("width"=>250)),
							array("für Datenträgeraustausch", "attributes" => array("width"=>400, "colspan"=>"2")),
					);
					$header_table[0]=$header_row;
										
					$header_row = array(
							array("Kostenträger: "."<input type=\"text\" name=\"kostentrager\" value=\"\" size=\"58\" />", "attributes" => array("width"=>500, "style"=>"border:1px solid black;", "escaped"=>0)),
							array("", "attributes" => array("width"=>250)),
							array("Rechnungs-Nr.:", "attributes" => array("width"=>150)),
							array("<input type=\"text\" name=\"beleg\" value=\"\" size=\"35\" />", "attributes" => array("width"=>250, "style"=>"border:1px solid black;", "escaped"=>0)),
								
					);
					$header_table[1]=$header_row;
						
					$header_row = array(
							array("", "attributes" => array("width"=>500)),
							array("", "attributes" => array("width"=>250)),
							array("Beleg-Nr.:", "attributes" => array("width"=>150)),
							array($this->_patientMasterData['EpidIpidMapping']['num'], "attributes" => array("width"=>250, "style"=>"border:1px solid black;")),
					
					);
					$header_table[2]=$header_row;
						
					$view = Zend_Layout::getMvcInstance()->getView();
					$HeaderText = $view->tabulate($header_table , array("class"=>"pdf_header_table", "no_header"=>true,  "cellpadding"=>2));
					//$header_table = $view->getHelper('tabulate')->tabulate($header_table);
					
					$pdf->SetHeaderMargin(3);
					//$pdf->setHeaderFont(Array('dejavusans', '', 11));
					$pdf->HeaderText = $HeaderText;
					
					$pdf->first_page_header =  false;
					
					$header_table_days = $this->view->pdf_table_header;
					$pdf->SubHeaderText = $this->_geTSubHeaderText() . $view->tabulate($header_table_days, array("class"=>"second_table pdf_table_header", "border"=>"1", "cellpadding"=>1));

					$pdf->SubHeaderText_pages = "not_first_page";
					
					
					$pdf->setPrintFooter(true);
					$pdf->footer_text = $this->view->translate($pdfname." pdf footer text");;
					$pdf->setFooterType('1 of n date');
					
					$pdfname_translated = $extra_settings['pdfname'];
					
				}break;
				case "rlppatientcontrol":{
					$pdf->SetMargins(10, 20, 5, true);
					$pdf->SetAutoPageBreak(true , 5);
					$pdf->setPrintFooter(true);
					$pdf->footer_text = $this->view->translate($pdfname." pdf footer text");;
					$pdf->setFooterType('1 of n date');
					
					$pdfname_translated = $extra_settings['pdfname'];
					
				}
				break; 
				case "demstepcarecontrol":{
					$pdf->SetMargins(10, 20, 5, true);
					$pdf->SetAutoPageBreak(true , 5);
					$pdf->setPrintFooter(true);
					$pdf->footer_text = $this->view->translate($pdfname." pdf footer text");;
					$pdf->setFooterType('1 of n date');
			 
					$pdfname_translated = $extra_settings['pdfname'];
					
				}
				break; 
				case "complaintform":{
					$pdf->SetMargins(20, 20, 10, true);
// 					$pdf->SetAutoPageBreak(true , 5);
// 					$pdf->setPrintFooter(true);
// 					$pdf->footer_text = $this->view->translate($pdfname." pdf footer text");;
// 					$pdf->setFooterType('1 of n date');
					
					$pdfname_translated = $extra_settings['pdfname'];
					
				}
				break;
				
				case "complaintform_pdf":{
					$pdf->SetMargins(20, 20, 10, true);
// 					$pdf->SetAutoPageBreak(true , 5);
// 					$pdf->setPrintFooter(true);
// 					$pdf->footer_text = $this->view->translate($pdfname." pdf footer text");;
// 					$pdf->setFooterType('1 of n date');
					
					$pdfname_translated = $extra_settings['pdfname'];
					
				}
				break;
				
				case "patient_actions_list":{
						$pdf->SetMargins(10, 5, 10);
						$pdf->SetAutoPageBreak(TRUE, 35);
						$pdf->setFooterFont(Array('helvetica', '', 7));
					
						$pdf->no_first_page_invoice_footer = false; //remove footer from the first page
					
						$pdf->invoice_footer = true; // set special footer
						$footer_text = '<table width="100%">
                                        	<tr>
                                        		<td width="45%" style="text-align: left;">Ich bestätige die vertragsgemäße Ausführung<br/>der oben angegebenen Leistungen</td>
                                        		<td width="10%"></td>
                                        		<td width="45%">Ich bestätige die Durchführung der oben<br/>angegebenen Leistungen</td>
                                        	</tr>
                                        	<tr>
                                                <td colsapn="3">&nbsp;</td>
                                        	</tr>
                                        	<tr>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td></td>
                                        		<td style="border-bottom:1px solid #000000;"></td>
                                        	</tr>
                                        	<tr>
                                        		<td>Verantwortlicher Leistungserbinger PCT</td>
                                        		<td></td>
                                        		<td>Versicherter / Bezugsperson</td>
                                        	</tr>
                                            <tr>
                                        		<td colsapn="3">&nbsp;</td>
                                        	</tr>
                                        	<tr>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td style="border-bottom:1px solid #000000;">&nbsp;</td>
                                        		<td style="border-bottom:1px solid #000000;"></td>
                                        	</tr>
                                        	<tr>
                                        		<td>Dieses Dokument wurde erstellt mit ISPC &reg;.</td>
                                        		<td></td>
                                        		<td>&copy; smart-Q Softwaresysteme GmbH 2015</td>
                                        	</tr>
                                        </table>';
					
					
						$pdf->footer_text = $footer_text; // set pdf background only for the first page
						$pdf->setPrintFooter(true); // remove black line at bottomC
					
				}
				break;
				
				
				
				
				
				
				
				
			}
			
			
// 			echo $html; exit;
			$pdf->setHTML($html);
			
		    //ISPC-2211 add empty rows for this 2 actions
			if ($pdfname == "sgbxileistungsnachweispdf" || $pdfname =="sgbvleistungsnachweispdf") {
			    if (($emptyHeight = $pdf->getPageHeight() - $pdf->GetY()) 
			        && ($max_rows = floor($emptyHeight / 8))) 
			    {			
			        $max_rows--;
			        $matches = [];
			        if ($max_rows > 0 && preg_match('/(<tr(\\s+)class="tr_hasValue EMPTY_ROW(.*?)>)(.*?)(<\/tr>)/s', $html, $matches)) {
			            $empty_row_ARRAY = array_fill(0, $max_rows, $matches[0]);			            
			            $html = str_replace($matches[1], implode(' ', $empty_row_ARRAY) . $matches[1] , $html);   
			        
			            for($i=1;  $i <=  $pdf->getNumPages(); $i++) {
			                $pdf->deletePage($i);
			            }
			            
			            $pdf->setHTML($html);
			        }
			    }
		    }
			
			
			//save pdf 2 ftp and add entry to patient Dokument tab
			$ftp_filename = $pdf->toFTP($pdfname_translated);		
			
		 
			if($ftp_filename !== false) 
			{
				$cust = new PatientFileUpload ();
				$recordid = $cust->set_new_record(
			 		array(		 				
							 "title" => $pdfname_translated,
							 "ipid" => $this->ipid,
							 "file_name" => $ftp_filename,
							 "file_type" => 'PDF',
							 //"recordid" => $record_id,
							 "tabname" => $pdfname,
							 "system_generated" => "0",
			 		));
			}

			//ISPC-2806 Dragos 28.01.2021
			if (!empty($post['save_and_sendTodo']) && intval($post['form_data']['complaint_email_to']) > 1) {
				//get mandant complaint email settings
				$client_complaint_settings = Doctrine::getTable('ClientComplaintSettings')->findOneBy('clientid', $post['clientid']);
				if ($client_complaint_settings['status'] == 'enabled') {
					//get clisnt smtp settings
					$c_smpt_s = new ClientSMTPSettings();
					$smtp_settings = $c_smpt_s->get_mail_transport_cfg( $this->logininfo->clientid );

					$name_parts = explode('/',$ftp_filename);
					$pdf_attachement_name = end($name_parts);

					if ($client_smtp_settings !== false && isset($smtp_settings['host'])) {
						//use client defined settings
						$mail_transport 	= new Zend_Mail_Transport_Smtp( $smtp_settings['host'], $smtp_settings['config'] );
						$mail_FromEmail		= $smtp_settings['sender_email'];
						$mail_FromName		= $smtp_settings['sender_name'];

					} else {
						//use ispc default smtp
						$mail_transport		= new Zend_Mail_Transport_Smtp(ISPC_SMTP_SERVER, Zend_Registry::get('mail_transport_cfg'));
						$mail_FromEmail		= ISPC_SENDER;
						$mail_FromName		= ISPC_SENDERNAME;
					}

					//setup attachment
					if ($ftp_filename !== false) {
						$att = new Zend_Mime_Part($pdf->Output($pdf_attachement_name,'S'));
						$att->type        = 'application/pdf'; //mime_content_type(PDF_PATH.'/'.$ftp_filename);
						$att->disposition = Zend_Mime::DISPOSITION_ATTACHMENT;
						$att->encoding    = Zend_Mime::ENCODING_BASE64;
						$att->filename    = $pdf_attachement_name;

					}

					//setup mail
					$mail = new Zend_Mail('UTF-8');
					$mail->setFrom($mail_FromEmail, $mail_FromName)
						->setReplyTo($mail_FromEmail, $mail_FromName)
						->setSubject($client_complaint_settings['email_subject']);

					if ($att && $att instanceof Zend_Mime_Part) {
						$mail->addAttachment($att);
					}

					if(Pms_CommonData::assertIsHtml($client_complaint_settings['email_body'])) {
						$mail->setBodyHtml($client_complaint_settings['email_body']);
					} else {
						$mail->setBodyText($client_complaint_settings['email_body']);
					}

					switch ($post['form_data']['complaint_email_to']) {
						case '2': //Apotheke am Kreisel
							$mail->addTo($client_complaint_settings['pharmacy_email'],'Apotheke am Kreisel');
							break;
						case '3': //Eurozyto GmbH
							$mail->addTo($client_complaint_settings['office_email'],'Eurozyto GmbH');
							break;
						default:
							break;
					}

					$mail->send($mail_transport);
				}
			}
			// -- //
			
			ob_end_clean();
			ob_start();
			
			switch($final_action){
				case"download":{
					$pdf->toBrowser($pdfname . '.pdf', "D");//D: Download PDF as file
				}break;
				
				case"view":{
					$pdf->toBrowser($pdfname . '.pdf', "I"); //I: Send PDF to the standard output
				}break;
				
				default:
					// F, FI, FD: Save PDF to a local file. +inline, +download
					// E: Return PDF as base64 mime multi-part email attachment (RFC 2045)
					// S: Returns PDF as a string
				break;
			}
			
			//exit;
			return $recordid;
		}
		
		
		private function _geTSubHeaderText() {
			$html = <<<EOT
			
	<style>
			.second_table {
				font-family: Arial, sans-serif;
				font-size:9pt;
				border:1px solid black;
				border-collapse:collapse;
				background-color:lightgray;
			}
			
			.second_table th{
				width:200px;
				padding:1px;
				text-align:center;
				font-size:9pt;
			}
			
			.second_table td{
				width:33px;
				text-align:center;
				font-size:9pt;
			}
			
			.second_table tr.action_row td{
				font-size:7pt;
			}
			.second_table th.first_column,
			.second_table td.first_column{	
				width:200px;
				text-align:left;
			}
			
			.second_table tr.gray_row td{
				background-color:#DCDCDC;
			}
			
			.second_table tr.empty_spacer_row td{
				background-color:#fff;
				font-size:2pt;
			}
			</style>
EOT;
			
			return $html;
			
		}
		
		
		
		
		public function emergencyplansapv24Action(){
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpId($decid);
		
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
		
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
			
			/*--------------- Client details --------------------------------------*/
			$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
			$form['data']['sapv24_city'] = $clientdata[0]['city'];
			$form['client']['emergencynr_a'] = $clientdata[0]['emergencynr_a'];
			$form['client']['emergencynr_b'] = $clientdata[0]['emergencynr_b'];
		
			/*--------------- Patient details --------------------------------------*/
			$patientmaster = new PatientMaster();
			$patientinfo = $patientmaster->getMasterData($decid, 0);
			
			$patient['name'] = $patientinfo['first_name'] . ", " . $patientinfo['last_name'];
			$patient['birthd'] = $patientinfo['birthd'];
			$form['data']['living_will'] = $patientinfo['living_will'];
			
			$form['patient'] = $patient;			
			
			/* -------------- Diagnosis  - Get Main Diagnosis --------------------------------- */
			$abb = "'HD'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($clientid, $abb);
			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}
			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);
		
				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						if(strlen($val['icdnumber']) > 0)
						{
							$other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
						}
						else
						{
							$other_diagnosis .= $comma . $val['diagnosis'];
						}
						$dia++;
						$comma = ",";
					}
				}
			}
			$form['data']['main_diagnosis'] = $other_diagnosis;
			
			// get patient drugplan
			$m_medication = new PatientDrugPlan();
			$medicarr = $m_medication->getMedicationPlanAll($decid);
			
			$medication_extra  = PatientDrugPlanExtra::get_patient_drugplan_extra($ipid,$clientid);
				
			$cnt = 0;
				
			foreach($medicarr as $k=>$medication_data)
			{
				if($medication_data['iscrisis'] == "1")
				{
				    if( strlen($medication_data['medication']) == "1" || $medication_data['medication'] == "-"){
    					$form['data']['medication_M'][$cnt]['medication'] = $medication_extra[$medication_data['id']]['drug'];
				    } else{
    					$form['data']['medication_M'][$cnt]['medication'] = $medication_data['medication'];
				        
				    }
					$form['data']['medication_M'][$cnt]['dosage'] = $medication_data['dosage'];
					$form['data']['medication_M'][$cnt]['indication'] = $medication_extra[$medication_data['id']]['indication']['name'];
					
					if(!empty($medication_extra[$medication_data['id']]['escalation_id'])){ // ISPC-2247 
					   $form['data']['medication_M'][$cnt]['indication'] = $medication_extra[$medication_data['id']]['indication']['name'].' (STUFE '.$medication_extra[$medication_data['id']]['escalation_id'].')';
					} else{
    					$form['data']['medication_M'][$cnt]['indication'] = $medication_extra[$medication_data['id']]['indication']['name'];
					}
					$form['data']['medication_M'][$cnt]['indication_color'] = $medication_extra[$medication_data['id']]['indication']['color'];
					$form['data']['medication_M'][$cnt]['nursing_measures'] = $existing_form_data_medication[$cnt]['nursing_measures'];
					$cnt++;
				}
			
			}		
			
			//ISPC-2736 Lore 12.11.2020
			//An-/Zugehörige
			$cpm_cpm = new ContactPersonMaster();
			$cpm_arr = $cpm_cpm->getPatientContact($ipid, false);
			if(!empty($cpm_arr)){
			    foreach($cpm_arr as $cp_key=>$cp_vals){
			        $form['data']['relatives'] .= $cp_vals['cnt_last_name'].' '.$cp_vals['cnt_first_name']."; ";
			    }
			}
			// ACP
			$acp = new PatientAcp();
			$acp_data = $acp->getByIpid(array($ipid));
			$current_acp_data = $acp_data[$ipid];
			if(!empty($current_acp_data)){
			    foreach($current_acp_data as $key=>$vals){
			        //Vorsorgevollmacht
			        if($vals['division_tab'] == 'healthcare_proxy'){
			            if($vals['active'] == 'yes'){
			                $form['data']['prev_attorney'] = '1';
			            } else {
			                $form['data']['prev_attorney'] = '0';
			            }
			        }
			        //Patientenverfügung
			        if($vals['division_tab'] == 'living_will'){
			            if($vals['active'] == 'yes'){
			                $form['data']['living_will'] = '1';
			            } else {
			                $form['data']['living_will'] = '0';
			            }
			        }
			        //Betreuungsverfügung
			        if($vals['division_tab'] == 'care_orders'){
			            if($vals['active'] == 'yes'){
			                $form['data']['serv_available'] = '1';
			            } else {
			                $form['data']['serv_available'] = '0';
			            }
			            
			            //Betreuer
			            if( (!empty($vals['contactperson_master_id'])) && $vals['contactperson_master_id'] != '0' ){
			                $cpm_obj = new ContactPersonMaster();
			                $cpm_data = $cpm_obj->getPatientContactById($vals['contactperson_master_id'], false);
			                $form['data']['supervisor'] = $cpm_data[0]['cnt_last_name'].' '.$cpm_data[0]['cnt_first_name'];
			            }
			        }
			    }
			}
			//.
			
			$this->view->saveddata = '0';
			// get saved data
			$existing_form_data = EmergencyPlanSapv24::get_emergency_plan_sapv24($ipid);
			if($existing_form_data)
			{
				$form['data'] = $existing_form_data;
				$this->view->saveddata = '1';
				
				$existing_form_data_medication = EmergencyPlanSapv24Medication::get_emergency_plan_sapv24_medication($existing_form_data['id']);
				
				if($existing_form_data_medication)
				{
					foreach($existing_form_data_medication as $med_f) 
					{
						if ($med_f[med_type] == 'F')
						{
							$form['data']['medication_F'][] = $med_f;
						}
						elseif ($med_f[med_type] == 'M') 
						{
							$form['data']['medication_M'][] = $med_f;
						}
					}
				}
			}
			
			$this->view->form_data = $form;
			
			//var_dump($form); exit;
			/* ---------------------- POST -------------------------- */
			if($this->getRequest()->isPost())
			{
				//var_dump($_POST['form']); exit;
				$eps_form = new Application_Form_EmergencyPlanSapv24();
				
				if($_POST['form_action'] == "save")
				{
					/*---------------------- Insert form  --------------------------*/
					if(strlen($_POST['formid']) == '0')
					{
						$post = $_POST['form'];
						$inserted_id = $eps_form->insert($ipid,$post);
						
						if($post['living_will'] != $patientinfo['living_will'])
						{
							$patinfo = Doctrine::getTable('PatientMaster')->find($patientinfo['id']);
							$patinfo->living_will = $post['data']['living_will'];
							$patinfo->living_will_from = date('y-m-d');
							$patinfo->save();
						}
						
						$formid = $inserted_id;
					
						$form_tabname = "emergency_plan_sapv24";
						$cust = new PatientCourse ();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("F");
						$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Notfallplan 24 wurde erstellt'));
						$cust->tabname = Pms_CommonData::aesEncrypt($form_tabname);
						$cust->user_id = $logininfo->userid;
						$cust->save();
					}
					/* ---------------------- Update form  --------------------------*/ 
					else
					{
						$post = $_POST['form'];
						$post['formid'] = $_POST['formid'];
						$update = $eps_form->update($ipid,$post);
						
						if($post['living_will'] != $patientinfo['living_will'])
						{
							$patinfo = Doctrine::getTable('PatientMaster')->find($patientinfo['id']);
							$patinfo->living_will = $post['data']['living_will'];
							$patinfo->living_will_from = date('y-m-d');
							$patinfo->save();
						}
		
						$form_tabname = "emergency_plan_sapv24";
						$cust = new PatientCourse ();
						$cust->ipid = $ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("F");
						$cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Notfallplan 24 wurde editiert'));
						$cust->tabname = Pms_CommonData::aesEncrypt($form_tabname);
						$cust->user_id = $logininfo->userid;
						$cust->save();
					}
					
					$post = $_POST;
					$post['form_data']['patient']  =   $form['patient'];
					$post['form_data']['client']  =   $form['client'];
					$post['form_data']['data']  =   $post['form']['data'];
						
					$sort_col = array();
					$med_array = array();
						
					foreach($post['form_data']['data']['medication'] as $keym=>$valm)
					{
						$sort_col[$keym] = strtolower($valm['indication']);
						$med_array[$keym]['indication_s'] = strtolower($valm['indication']);
						$med_array[$keym]['indication'] = $valm['indication'];
						$med_array[$keym]['indication_color'] = $valm['indication_color'];
						$med_array[$keym]['med_type'] = $valm['med_type'];
						$med_array[$keym]['medication'] = $valm['medication'];
						$med_array[$keym]['dosage'] = $valm['dosage'];
						$med_array[$keym]['nursing_measures'] = $valm['nursing_measures'];
					}
					//ISPC-2359 Lore 17.09.2019
					//array_multisort($sort_col, SORT_ASC, $med_array);
					$med_sort = array();
						
					foreach($med_array as $kmd=>$vmd)
					{
						$med_sort[$kmd]['indication'] = $vmd['indication'];
						$med_sort[$kmd]['indication_color'] = $vmd['indication_color'];
						$med_sort[$kmd]['med_type'] = $vmd['med_type'];
						$med_sort[$kmd]['medication'] = $vmd['medication'];
						$med_sort[$kmd]['dosage'] = $vmd['dosage'];
						$med_sort[$kmd]['nursing_measures'] = $vmd['nursing_measures'];
					}
						
					$post['form_data']['data']['medication'] = $med_sort;
					//var_dump($post['form_data']['data']['medication']);exit;
					$gen_pdf = $this->generate_pdf($post, 'emergencyplansapv24_save', 'emergencyplansapv24_pdf.html');					
					
					/* ---------------------- Redirect to verlauf  -------------------*/ 
					$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
					exit;
				}
				/* ---------------------- Generate pdf  -------------------*/ 
				elseif($_POST['form_action'] == "pdf_print")
				{
					$post = $_POST;
					$post['form_data']['patient']  =   $form['patient'];
					$post['form_data']['client']  =   $form['client'];
					$post['form_data']['data']  =   $post['form']['data'];
					
					$sort_col = array();
					$med_array = array();
					
					foreach($post['form_data']['data']['medication'] as $keym=>$valm)
					{
						$sort_col[$keym] = strtolower($valm['indication']);
						$med_array[$keym]['indication_s'] = strtolower($valm['indication']);
						$med_array[$keym]['indication'] = $valm['indication'];
						$med_array[$keym]['indication_color'] = $valm['indication_color'];
						$med_array[$keym]['med_type'] = $valm['med_type'];
						$med_array[$keym]['medication'] = $valm['medication'];
						$med_array[$keym]['dosage'] = $valm['dosage'];
						$med_array[$keym]['nursing_measures'] = $valm['nursing_measures'];
					}
					//ISPC-2359 Lore 17.09.2019
					//array_multisort($sort_col, SORT_ASC, $med_array);
					$med_sort = array();
					
					foreach($med_array as $kmd=>$vmd)
					{
						$med_sort[$kmd]['indication'] = $vmd['indication'];
						$med_sort[$kmd]['indication_color'] = $vmd['indication_color'];
						$med_sort[$kmd]['med_type'] = $vmd['med_type'];
						$med_sort[$kmd]['medication'] = $vmd['medication'];
						$med_sort[$kmd]['dosage'] = $vmd['dosage'];
						$med_sort[$kmd]['nursing_measures'] = $vmd['nursing_measures'];
					}
					
					$post['form_data']['data']['medication'] = $med_sort;
					//var_dump($post['form_data']['data']['medication']);exit;
					$gen_pdf = $this->generate_pdf($post, 'emergencyplansapv24', 'emergencyplansapv24_pdf.html');
					exit;
				}
				elseif($_POST['form_action'] == "reset")
				{
					if($_POST['formid'] != '0' && !empty($_POST['formid']))
					{
						// reload form
						$eps_form = new Application_Form_EmergencyPlanSapv24();
						$eps_form->reloaddata($ipid);
						
						/* ---------------------- Redirect to current page  ------------------- */
						$this->redirect(APP_BASE . 'patientformnew/emergencyplansapv24?id=' . $_REQUEST['id']);
					}
				}
			}
		}

	
	/**
	 * 
	 * Jul 28, 2017 @claudiu 
	 *
	 */
	public function sgbvleistungsnachweispdfAction() 
	{
		//the selected month from get/post 
		$query_date = isset($_REQUEST['selected_month']) ? date("Y-m", strtotime($_REQUEST['selected_month'])) : date("Y-m");
		$this->view->selected_month = $query_date;
		
		//language is an array
		$page_lang = $this->translate('sgbvleistungsnachweispdf_lang');
		
		//save a formular
		if($this->getRequest()->isPost())
		{			
			if( $_POST['action'] == "save" || $_POST['action'] == "save_and_pdf") {
				
				$form_obj = new Application_Form_SgbvFormsSignaturePdf( array(
						'_patientMasterData' => $this->_patientMasterData,
						'_block_name' => 'sgbvleistungsnachweispdf'
				));
				if($form_obj->validate($_POST)) {
			
					$form_obj->insert($_POST);
			
					if($_POST['action'] == "save") {
						//empty the post by using a redirect
						$this->redirect(
								APP_BASE .  $this->getRequest()->getControllerName(). "/". $this->getRequest()->getActionName()
								. "?id=" . Pms_Uuid::encrypt($this->_patientMasterData['id'])
								. "&selected_month=" . $query_date ,
								array("exit" => true));
					}
					elseif($_POST['action'] == "save_and_pdf") {
						//print the pdf also
						//the print is performed at the end of this function, so we have all the data
					}
						
				}
			}
		}
		
		//new instance
		$patientmaster = new PatientMaster();
		
		//get the actions of this client
		$actionslist_by_id_arr = array();//used later for display
		$socialcodeactions = new SocialCodeActions();
		$actionslist = $socialcodeactions->getCientSocialCodeActions($this->logininfo->clientid);
		$socialcodegroups = new SocialCodeGroups();
		$groupdetails = $socialcodegroups->getSocialCodeGroupName($this->logininfo->clientid);
		foreach( $actionslist as $row) {
			if ($row['groupid'] > 0 && isset($groupdetails[$row['groupid']])) {
				//grouped in another array maybe you want to sort this before array_merge
				$action_with_group[$groupdetails[$row['groupid']]] [$row['id']] = $row['action_name'];
			}
			else {
				//not grouped
				$action_without_group[$this->translate('no_group')][$row['id']] = $row['action_name'];
			}
			$actionslist_by_id_arr[$row['id']] = $row;
		}
		$this->view->action_actions_arr = array_merge( $action_with_group, $action_without_group);
		
		
		
	
		$selected_month_details['start'] = date('Y-m-01', strtotime($query_date));// First day of the month.
		$selected_month_details['end'] = date('Y-m-t', strtotime($query_date));// Last day of the month.
		
		$selected_month_details['minDate'] = date('01.m.Y', strtotime($query_date));// datapicked First day of the month.
		$selected_month_details['maxDate'] = date('t.m.Y', strtotime($query_date));//datapicked Last day of the month.
		$this->view->selected_month_details = $selected_month_details;


		$period_days_arr = $patientmaster->getDaysInBetween($selected_month_details['start'], $selected_month_details['end']);
		//select month arr	
		$selected_month_values_arr =  array();
		for( $i = -2; $i <= 9; $i++) {
			$curr_month = strtotime( date( 'Y-m-01' )." +$i months");
			$mont_id =  date( 'Y-m' , $curr_month);
// 			$selected_month_values_arr[$mont_id] = utf8_encode(strftime('%B %Y', $curr_month)); // this default works ok on my 10.0.0.36
			$selected_month_values_arr[$mont_id] = mb_convert_encoding(strftime('%B %Y', $curr_month) , 'utf8'); // this works on dev
// 			$selected_month_values_arr[$mont_id] = iconv('ISO-8859-1','UTF-8', (strftime('%B', $curr_month) . " " . date("Y", $curr_month)) );
// 			$selected_month_values_arr[$mont_id] = htmlentities(utf8_encode(strftime('%B', $curr_month)) , null, 'utf-8') . " " . date("Y", $curr_month);
		}
		$this->view->selected_month_arr = $selected_month_values_arr;

		//national holidays .. are unused ath this moment
		/*
		$nh = new NationalHolidays();
		$national_holiday = $nh->getNationalHoliday($this->logininfo->clientid, $selected_month_details['start'], true);
		
		foreach($national_holiday as $k_holiday => $v_holiday)
		{
			$holiday_dates[] = date('Y-m-d', strtotime($v_holiday['NationalHolidays']['date']));
		}
		$this->view->national_holidays_js = json_encode($holiday_dates);
		*/

		//days of the week 1-7 in locale
		$this->view->days_of_week_arr = Pms_CommonData::getDaysOfWeek();
		
	
		//get patients healthinsurance.. in $this->_patientMasterData is on an icon
		$phelathinsurance = new PatientHealthInsurance();
		//$healthinsu_array = $phelathinsurance->get_patients_healthinsurance_number($this->ipid);
		$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($this->ipid); //ISPC-2211 retive more info about healthinsurance.
		$healthinsu_array[$this->ipid]  = $healthinsu_array[0];
		
		//get client details
		$client_data = new Client();
		$client_details = $client_data->getClientDataByid($this->logininfo->clientid);
		$client_details =  $client_details[0];
		
		
		
		$nice_days_digits = array();
		$nice_days_letter = array();
		$empty_days = array();
		
		$nice_days_digits['first_column'] = array(
				"Leistungen",
				'attributes' => array(
				        //"rowspan" => "2",//TODO-3477 Ancuta 30.09.2020
						"class" => "first_column",
						"width" => "200px",
						"style" => "background-color:lightgray"
				)
		);
		
		
		//TODO-3477 Ancuta 30.09.2020
		$nice_days_letter[] = array(
		    "",
		    'attributes' => array(
		        "class" => "first_column",
		        "width" => "200px",
		        "style"=>"text-align:center;",
		    )
		);
		//-- 
		foreach($period_days_arr as $day) {
			

			$nice_days_digits[] = array(
					date("j", strtotime($day)),
					'attributes' => array(
							"width" => "33px",
							"style"=>"text-align:center;",
					)
			);
			
			$nice_days_letter_cell = array(
					strftime('%a', strtotime($day)),
					'attributes' => array(
							"style"=>"text-align:center;",
					)
			);
						
			$isweekend = date("N", strtotime($day)) >= 6 ? 1 : 0 ;
			
			$empty_days_cell = array(
					'',
					'attributes' => array(
						"data-day" => date("d.m.Y", strtotime($day)),
						"data-weekday" => date("N", strtotime($day)),
						"data-isweekend" => $isweekend,		
						"width" => "33px",
				));
			
			if ($isweekend) {
				$empty_days_cell['attributes']['class'] .= ' isweekend';
				$nice_days_letter_cell['attributes']['class'] .= ' isweekend';				
			} 
			
			$empty_days[] = $empty_days_cell;
			
			$nice_days_letter[] = $nice_days_letter_cell;
			
			
		}
		
		$this->view->count_days_in_month = count($period_days_arr);
	
		
		$nice_days_digits['last_column'] = array(
				"#",
				'attributes' => array(
						"rowspan" => "2",
						"width" => "33px",
		));
		$nice_days_digits['attributes'] = array(
						"class"=>"header_row",
						"rowspan" => "2"
		);	
		$nice_days_letter['attributes'] = array(
						"class"=>"head_shortday",
		);	
		
		$max_cells_number = count($empty_days) +2; // maximum cell in the action row
		
		
		$top_table = array();
		$top_table_cell_number = 5;
	

		
		//row1
		$top_table[] = array(
				array(
						$page_lang['sgb_v_pdf_title'],
						'attributes'=>array(
								'class' => "head1",
								'colspan' => $top_table_cell_number
						)
				),
				'attributes'=>array(
								'class' => "row1",
				)
				
		);
		//row2
		$top_table[] = array(
				array(
						$page_lang['head_pflegedienste'],
						'attributes'=>array(
								'class' => "td1 pixelated_background",
								'colspan' => 2
						)
				),
				array(
						$page_lang['head_patient'],
						'attributes'=>array(
								'class' => "td2 pixelated_background",
								'colspan' => 2
						)
				),
				array(
						$page_lang['head_period'],
						'attributes'=>array(
								'class' => "td3 pixelated_background",
								'colspan' => 1
						)
				),
				'attributes'=>array(
						'class' => "row2",
				)
		);
		
		//row3
		$top_table[] = array(
				//pflegedinst
				array(
						$page_lang['head_name'] . " " . $client_details['team_name'],
						'attributes'=>array(
								'class' => "td1",
						)
				),
				array(
						$page_lang['head_ik_nr'] . " " . $client_details['institutskennzeichen'],
						'attributes'=>array(
								'class' => "td2",
						)
				),
				//patient
				array(
						$page_lang['head_name'] ." ". $this->_patientMasterData['nice_name'], //
						'attributes'=>array(
								'class' => "td3",
						)
				),
				array(
						$page_lang['head_vers_nr'] . " " . $healthinsu_array[$this->ipid] ['insurance_no'],
						'attributes'=>array(
								'class' => "td4",
						)
				),
				array(
						"<br /><br />".mb_convert_encoding(strftime('%B %Y', strtotime($query_date)) , 'utf8'),
// 						"<br /><br />".date("m.Y", strtotime($query_date)),//ddd
						'attributes'=>array(
								'class' => "td5",
								'rowspan' => "3",
								'style' => "text-align:center;vertical-align:middle;",
								"escaped" => 0,
						)
				),
				'attributes'=>array(
						'class' => "row3",
				)
		);
		//row4
		$top_table[] = array(
				array(
						$page_lang['head_street'] ." ". $client_details['street1'],
						'attributes'=>array(
								'class' => "td1",
						)
				),
				array(
						"",
						'attributes'=>array(
								'class' => "td2",
						)
				),
				array(
						$page_lang['head_birthd'] ." ". $this->_patientMasterData['birthd'] . "<br/>". $this->translate("address") .": {$this->_patientMasterData['nice_address']}",
						'attributes'=>array(
								'class' => "td3",
						    'escaped' => false,
						)
				),
				array(
					   $page_lang['head_insurance_name'] . " " . $healthinsu_array[$this->ipid] ['company_name'],
						'attributes'=>array(
								'class' => "td4",
						)
				),
				'attributes'=>array(
						'class' => "row4",
				)		
		);
		
		
		
		//row5
		if($this->getRequest()->isPost())
		{
			if($_POST['action'] == "save_and_pdf")
			{
			    $ja = $this->getRequest()->getPost('ja_nein') == "ja" ? "02" : "01";
			    $nein = $this->getRequest()->getPost('ja_nein') == "nein" ? "02" : "01";
			     
			    $ja_nein_tcpdf = array();
				$ja_nein_tcpdf[] = array(
						//"§ 18 Abs. 2 u.3 ja*)",
						array("§ 18 Abs. 2 u.3 ja*)<img src=\"".PUBLIC_PATH."/images/check{$ja}.jpg\" class=\"head_18abs_pdf\" />" , 'attributes'=>array('escaped' => 0)),
						//"nein *),",
						array("nein *),<img src=\"".PUBLIC_PATH."/images/check{$nein}.jpg\" class=\"head_18abs_pdf\" />" , 'attributes'=>array('escaped' => 0)),
						array('attributes'=>array('escaped' => "0"))
				
				);
				
				$ja_nein_tcpdf = $this->view->tabulate($ja_nein_tcpdf, array("no_header"=>true, "class"=>"no_border"));
				
				$page_lang['head_18abs'] = $ja_nein_tcpdf;
			}
		}


		$top_table[] = array(
				array(
						$page_lang['head_plz_ort'] ." ". $client_details['postcode'] ."/".$client_details['city'],
						'attributes'=>array(
								'class' => "td1",
						)
				),
				array(
						$page_lang['head_professional'],
						'attributes'=>array(
								'class' => "td2",
						)
				),
				array(
						$page_lang['head_18abs'],
						'attributes'=>array(
								'class' => "td3",
								'colspan' =>2,
								"escaped" => 0,
						)
				),
				'attributes'=>array(
						'class' => "row5",
				)
		);
		$this->view->top_table = $top_table;
		
		
		$table_header = array();
		$table_header[] = $nice_days_digits;
		$table_header[] = $nice_days_letter;
		
		
		$data_group_actions = array(
				
				$this->view->formLabel("add_action", "", array("class"=>"add_action", "onclick"=>"add_action_dialog(this)" , "title"=>$page_lang['add_action_dialog_title'])) .
				$this->view->formLabel("add_hour", "", array("class"=>"add_hour",  "onclick"=>"add_hour_dialog(this)", "title"=>$page_lang['add_hour_title']) ) .
				$this->view->formLabel("remove_groupid", "", array("class"=>"remove_groupid",  "onclick"=>"remove_groupid_dialog(this)", "title"=>$page_lang['remove_groupid_dialog_title'] )) ,
				'attributes' => array(
						"escaped" => 0,
						"class" => "first_column"
				)
		);
		
		$data_group = array();

		$group_id_counter = 0;
		$data_arr = array();
		$data_arr['first_column'] = "-";
		$data_arr = array_merge($data_arr, $empty_days );
		$data_arr ['last_column'] = "-";
		
		//add the actions row
		$data_arr['first_column'] =  $data_group_actions; 
		$data_arr['last_column'] = "";
		$data_arr['attributes'] = array(
				"class"=>"action_row",
				"data-groupid" => $group_id_counter,
				"data-actionid" => null,
				"data-startdate" => null,
				"data-interval" => null,
				"data-interval_options" => null,
				"data-selected_hour" => null,
				"nobr" => "true",
		);
		$data_row_first_row_original =
		$data_group[] = 
		$data_arr;
		
		
		//add the 3 gray rown
		$data_arr['first_column'] = array(
				$page_lang["einsatz_std"],
				'attributes' => array(
						"class" => "first_column",
		));
		$data_arr['last_column'] = "";
		$data_arr['attributes'] = array(
				"class"=>"gray_row einsatz_std",
				"data-groupid" => $group_id_counter,
				"nobr" => "true",
		);
		$data_row_einsatz_std = 
		$data_group[] = 
		$data_arr;//einsatz_std
		
		$data_arr['first_column'] = array(
				$page_lang["einsatz_min"],
				'attributes' => array(
						"class" => "first_column"
		));
		$data_arr['last_column'] = "";
		$data_arr['attributes'] = array(
				"class"=>"gray_row einsatz_min",
				"data-groupid" => $group_id_counter,
				"nobr" => "true",
		);
		$data_row_einsatz_min = 
		$data_group[] = 
		$data_arr; //einsatz_min
		
		
		$data_arr['first_column'] = array(
				$page_lang["signature"],
				'attributes' => array(
						"class" => "first_column"
		));
		$data_arr['last_column'] = "";
		$data_arr['attributes'] = array(
				"class"=>"gray_row signature",
				"data-groupid" => $group_id_counter,
				"nobr" => "true",
		);
		$data_row_signature = 
		$data_group[] = 
		$data_arr; // signature
		$group_id_counter++;
		
	
		$this->view->blank_data_group = array_merge(array("header"), $data_group);
		
		$sgbv_obj = new SgbvFormsSignaturePdf();
		$saved_data_groups = $sgbv_obj->getMonth($this->ipid, $query_date);
		
		//the month you selected has no saved data... calculate based on last saved data
		if( empty($saved_data_groups)) {	
			
			//find last available month
			if( ($query_date_last_month = $sgbv_obj->findLastMonth($this->ipid, $query_date)) !== false) {
				
				//get data from the found last month
				if( ($saved_data_groups_old = $sgbv_obj->getMonth($this->ipid, $query_date_last_month)) !== false) {
					
					//calculate the forms until the end of this month
					$start = date('Y-m-01', strtotime($query_date_last_month));
					$end = date('Y-m-t', strtotime($query_date));
					
					$query_date_strtotime = strtotime(date('Y-m-01', strtotime($query_date)));
					
					$period_days_arr = $patientmaster->getDaysInBetween($start, $end);

					foreach($saved_data_groups_old as $groupid => $actions) {
						foreach($actions as $actionid => $action_settings) {
							
							$days_array2 = array();
							
							$xdays_counter = 0;
							
							$action_settings_startdate_strtotime = strtotime($action_settings['startdate']);
							
							$action_settings_interval_options = array_map('trim', explode(",", $action_settings['interval_options']));//only used for days of week
								
							$action_settings_interval_options_strtotime = array_map('strtotime', $action_settings_interval_options);
								
							
							foreach($period_days_arr as $period_day) {
								
								$period_day_strtotime = strtotime($period_day);
								
								switch( $action_settings['interval_action']) {
									case"daily":{
										if(	$query_date_strtotime <= $period_day_strtotime && $action_settings_startdate_strtotime <= $period_day_strtotime) {
											$days_array[$groupid][$actionid][$period_day] = 1;
											$days_array2[$period_day] = 1;
										}
										
									}break;
									
									case"every_x_days":{
										if(	$action_settings_startdate_strtotime <= $period_day_strtotime && (int)$action_settings['interval_options'] > 0) {
											if ( $query_date_strtotime <= $period_day_strtotime && $xdays_counter % $action_settings['interval_options'] == 0) {
												$days_array[$groupid][$actionid][$period_day] = 1;
												$days_array2[$period_day] = 1;
											}
											$xdays_counter++;
										}
									}break;
									
									case"selected_days_of_the_week":{
										
										if(	$query_date_strtotime <= $period_day_strtotime 
												&& $action_settings_startdate_strtotime <= $period_day_strtotime
												&& in_array( date("N", $period_day_strtotime), $action_settings_interval_options)) 
										{
											$days_array[$groupid][$actionid][$period_day] = 1;
											$days_array2[$period_day] = 1;
										}
									}break;
									
									case"user_defined_days":{
									    
									    if ($query_date_strtotime <= $period_day_strtotime 
									        && in_array($period_day_strtotime, $action_settings_interval_options_strtotime) )
									    {
									        $days_array[$groupid][$actionid][$period_day] = 1;
									        $days_array2[$period_day] = 1;
									    }
									}break;
									
								}
							}
							
							
							$saved_data_groups_old[$groupid][$actionid]['data'] = $days_array2;
							$saved_data_groups_old[$groupid][$actionid]['startdate'] = date('Y-m-01', $query_date_strtotime);
						}
						
						
					}
					if(! empty($saved_data_groups_old)) {
						$saved_data_groups = $saved_data_groups_old;
					}
					
				}
			}
		}
		
		
		$this->view->saved_data_groups = $saved_data_groups;//this is the final array with the [groupid][actionid]
		
		//create array with the rows of the table
		$saved_data_rows = array();
		$pdf_print_as_group = array();
		$count_saved_data_groups = 0;
		
		foreach($saved_data_groups as $groupid => $actions) {
			
			$pdf_print_as_group[$groupid] = array();
			
			
			$data_row_first_row = $data_row_first_row_original;
			
			$data_row_first_row_empty = $data_row_first_row_original;
			$data_row_first_row_empty['attributes']['data-groupid'] = $groupid;
			$data_row_first_row_empty['attributes']['class'] = "empty_spacer_row";
			$data_row_first_row_empty['attributes']['nobr'] = "false";
			$data_row_first_row_empty['first_column'][0] = "";
			
			$pdf_print_as_group[$groupid][]=
			$saved_data_rows[] = $data_row_first_row_empty;
			
			$pdf_print_as_group[$groupid][$groupid]=
			$saved_data_rows[$groupid] = array();
			
			foreach( $actions as $actionid => $row) {
				
				$data_row_first_row['attributes']['data-groupid'] = $groupid;
				$data_row_first_row['attributes']['data-actionid'] = $actionid;
				$data_row_first_row['attributes']['data-startdate'] = $row['startdate'];
				$data_row_first_row['attributes']['data-interval'] = $row['interval_action'];
				$data_row_first_row['attributes']['data-interval_options'] = $row['interval_options'];
				$data_row_first_row['attributes']['data-selected_hour'] = $row['selected_hour'];
				
				
				$first_column = array(array(
						$actionslist_by_id_arr[$actionid]['action_name'],
						"attributes" => array(
								"class"=>"first_column first_column_action",
						)
				));
				$last_column = array();
				
				$data_row_actions = $empty_days;
				
				$last_column_counter = 0;
				
				foreach($data_row_actions as $k => &$oneday) {
					if( isset($row['data'][ date("Y-m-d", strtotime($oneday['attributes']['data-day'])) ])) {
						
						$oneday[0] = $row['data'][ date("Y-m-d", strtotime($oneday['attributes']['data-day'])) ];
						
						$oneday['attributes']['class'] .= " hasValue";
						
						$last_column_counter = $last_column_counter + $oneday[0];
						
						$data_row_first_row[$k][0] = $row['selected_hour'];//add hour
					}
					
				}
				$last_column = array($last_column_counter);
				
				$data_row_attributes  = array(
						'attributes' => array(
						"class"=> "tr_hasValue",
						'data-groupid' => $groupid,
						'data-actionid' => $actionid,
						'data-startdate' => date('d.m.Y', strtotime($row['startdate'])),
						'data-interval' => $row['interval_action'],
						'data-interval_options' => $row['interval_options'],
						'data-selected_hour' => $row['selected_hour'],
						"nobr" => "true",
				));
				
				$pdf_print_as_group[$groupid][]=
				$saved_data_rows[] = array_merge($first_column , $data_row_actions , $last_column , $data_row_attributes);
	
			}

			//add the group actions row
			$pdf_print_as_group[$groupid][$groupid]=
			$saved_data_rows[$groupid] = $data_row_first_row;
			
			

			$count_saved_data_groups++;
			if ($count_saved_data_groups == count($saved_data_groups)) {
			    $pdf_print_as_group[$groupid][] = array_merge([[
			
			        "&nbsp;<br/>&nbsp;",
			        "attributes" => [
			            "class"=>"first_column first_column_action",
			            "escaped" => 0,
			        ]
			    ]],
			        $empty_days,
			        [''],
			        [ 'attributes' => [
			            "class"=> "tr_hasValue EMPTY_ROW",
			            "nobr" => "true",
			        ]]
			    );
			}
				
			
// 			$saved_data_rows[] = $saved_data_row_actions;
			
			//add the group last 3 rows
			$data_row_einsatz_std['attributes']['data-groupid'] = $groupid;
			$data_row_einsatz_min['attributes']['data-groupid'] = $groupid;
			$data_row_signature['attributes']['data-groupid'] = $groupid;
			$pdf_print_as_group[$groupid][]=
			$saved_data_rows[] = $data_row_einsatz_std;
			
			$pdf_print_as_group[$groupid][]=
			$saved_data_rows[] = $data_row_einsatz_min;
			
			$pdf_print_as_group[$groupid][]=
			$saved_data_rows[] = $data_row_signature;
			
		}


		$table_footer = array();
		$this->view->data_arr = array_merge($table_header , $saved_data_rows, $table_footer);// this are the rows of the table
		$this->view->pdf_print_as_group = $pdf_print_as_group;
		$this->view->pdf_table_header = $table_header;
		

		
		//print a pdf
		if($this->getRequest()->isPost())
		{
			if($_POST['action'] == "save_and_pdf")
			{
			
				$table_foot_pdf = array();
				$table_foot_pdf[] = array(array("&nbsp;", "attributes" => array("escaped"=>0, "height"=>"100px"))); //this is a forced empty row because if last page empty
				$table_foot_pdf[] = array(
						array(
								"Stempel und Unterschrift der Pflegeeinrichtung"  , 
								'attributes'=>array('escaped' => 0, "width"=>300 , "style"=>"border-top:2px solid black;")),
						
						array(	"" , 'attributes'=>array('escaped' => 0, "width"=>80)),
						
						array(
								"Datum" , 
								'attributes'=>array('escaped' => 0, "width"=>120 , "style"=>"border-top:2px solid black;")),
						
						array(	"" , 'attributes'=>array('escaped' => 0, "width"=>80)),
						
						array(
								"Unterschrift Patient, bzw. Angehöriger oder Bevollmächtigter" , 
								'attributes'=>array('escaped' => 0, "width"=>350 , "style"=>"border-top:2px solid black;")),
				);
				$this->view->table_foot_pdf = $table_foot_pdf;
							
				
				//print the pdf also
				$record_id = $this->generatePdfNew_2017(
						$chk=0,
						$post = $this->view,
						$pdfname = "sgbvleistungsnachweispdf",
						$filename = "sgbvleistungsnachweispdf.html",
						$extra = array(
								//"htmlform" => $this->view->render("patientformnew/sgbvleistungsnachweispdf.html")
								"pdfname"=> $this->view->translate('sgbvleistungsnachweispdf') . " (" . mb_convert_encoding(strftime('%B %Y', strtotime($query_date)) , 'utf8') . ")",
								
						)
				);
				exit;
			}
				
		}
		
	}
	

	
	public function sgbxileistungsnachweispdfAction()
	{
		//the selected month from get/post 
		$query_date = isset($_REQUEST['selected_month']) ? date("Y-m", strtotime($_REQUEST['selected_month'])) : date("Y-m");
		$this->view->selected_month = $query_date;
		
		//language is an array
		$page_lang = $this->translate('sgbxileistungsnachweispdf_lang');
		
		//save a formular
		if($this->getRequest()->isPost())
		{			
			if( $_POST['action'] == "save" || $_POST['action'] == "save_and_pdf") {
				
				$form_obj = new Application_Form_SgbxiFormsSignaturePdf( array(
						'_patientMasterData' => $this->_patientMasterData,
						'_block_name' => 'sgbxileistungsnachweispdf'
				));
				if($form_obj->validate($_POST)) {
			
					$form_obj->insert($_POST);
			
					if($_POST['action'] == "save") {
						//empty the post by using a redirect
						$this->redirect(
								APP_BASE .  $this->getRequest()->getControllerName(). "/". $this->getRequest()->getActionName() 
								. "?id=" . Pms_Uuid::encrypt($this->_patientMasterData['id'])
								. "&selected_month=" . $query_date ,
								array("exit" => true));
					}
					elseif($_POST['action'] == "save_and_pdf") {
						//print the pdf also
						//the print is performed at the end of this function, so we have all the data
					}
						
				}
			}
		}
		
		//new instance
		$patientmaster = new PatientMaster();
		
		//get the actions of this client
		// the "+" actions takes the possible actions from this list 
		// https://www.ispc-login.de/socialcode/blocksgbxiactions
		$actionslist_by_id_arr = array();//used later for display
		$blocks_settings = new FormBlocksSettings();		
		$sgbxi_actions = $blocks_settings->get_block($this->logininfo->clientid, "sgbxi_actions", true);
		foreach( $sgbxi_actions as $row) {
			//not grouped
			$action_without_group[$row['id']] = $row['option_name'];
			$actionslist_by_id_arr[$row['id']] = $row;
		}
		$action_without_group[-1] = ". ";
		$this->view->action_actions_arr = $action_without_group;

	
		$selected_month_details['start'] = date('Y-m-01', strtotime($query_date));// First day of the month.
		$selected_month_details['end'] = date('Y-m-t', strtotime($query_date));// Last day of the month.
		
		$selected_month_details['minDate'] = date('01.m.Y', strtotime($query_date));// datapicked First day of the month.
		$selected_month_details['maxDate'] = date('t.m.Y', strtotime($query_date));//datapicked Last day of the month.
		$this->view->selected_month_details = $selected_month_details;


		$period_days_arr = $patientmaster->getDaysInBetween($selected_month_details['start'], $selected_month_details['end']);
		//select month arr	
		$selected_month_values_arr =  array();
		for( $i = -2; $i <= 9; $i++) {
			$curr_month = strtotime( date( 'Y-m-01' )." +$i months");
			$mont_id =  date( 'Y-m' , $curr_month);
// 			$selected_month_values_arr[$mont_id] = utf8_encode(strftime('%B %Y', $curr_month)); // this default works ok on my 10.0.0.36
			$selected_month_values_arr[$mont_id] = mb_convert_encoding(strftime('%B %Y', $curr_month) , 'utf8'); // this works on dev
// 			$selected_month_values_arr[$mont_id] = iconv('ISO-8859-1','UTF-8', (strftime('%B', $curr_month) . " " . date("Y", $curr_month)) );
// 			$selected_month_values_arr[$mont_id] = htmlentities(utf8_encode(strftime('%B', $curr_month)) , null, 'utf-8') . " " . date("Y", $curr_month);
		}
		$this->view->selected_month_arr = $selected_month_values_arr;

		//national holidays .. are unused ath this moment
		/*
		$nh = new NationalHolidays();
		$national_holiday = $nh->getNationalHoliday($this->logininfo->clientid, $selected_month_details['start'], true);
		
		foreach($national_holiday as $k_holiday => $v_holiday)
		{
			$holiday_dates[] = date('Y-m-d', strtotime($v_holiday['NationalHolidays']['date']));
		}
		$this->view->national_holidays_js = json_encode($holiday_dates);
		*/

		//days of the week 1-7 in locale
		$this->view->days_of_week_arr = Pms_CommonData::getDaysOfWeek();
		
	
		//get patients healthinsurance.. in $this->_patientMasterData is on an icon
		$phelathinsurance = new PatientHealthInsurance();
		//$healthinsu_array = $phelathinsurance->get_patients_healthinsurance_number($this->ipid);
		$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($this->ipid); //ISPC-2211 retive more info about healthinsurance.
		$healthinsu_array[$this->ipid]  = $healthinsu_array[0];
		
		
		$pms = new PatientMaintainanceStage();
		$maintainancestage_array = $pms->getLastpatientMaintainanceStage($this->ipid);
		if(!empty($maintainancestage_array)){
		    $maintainancestage_array[$this->ipid] = $maintainancestage_array[0];
 		}
		
		//get client details
		$client_data = new Client();
		$client_details = $client_data->getClientDataByid($this->logininfo->clientid);
		$client_details =  $client_details[0];
		
		
		
		$nice_days_digits = array();
		$nice_days_letter = array();
		$empty_days = array();
		
		$nice_days_digits['first_column'] = array(
				"Leistungen",
				'attributes' => array(
						//"rowspan" => "2",
						"class" => "first_column",
						"width" => "200px",
						"style" => "background-color:lightgray"
				)
		);
		
		//TODO-3477 Ancuta 30.09.2020
		$nice_days_letter[] = array(
		    "",
		    'attributes' => array(
		        "class" => "first_column",
		        "width" => "200px",
		        "style"=>"text-align:center;",
		    )
		);
		//-- 
		foreach($period_days_arr as $day) {
			

			$nice_days_digits[] = array(
					date("j", strtotime($day)),
					'attributes' => array(
							"width" => "33px",
							"style"=>"text-align:center;",
					)
			);
			
			$nice_days_letter_cell = array(
					strftime('%a', strtotime($day)),
					'attributes' => array(
							"style"=>"text-align:center;",
					)
			);
						
			$isweekend = date("N", strtotime($day)) >= 6 ? 1 : 0 ;
			
			$empty_days_cell = array(
					'',
					'attributes' => array(
						"data-day" => date("d.m.Y", strtotime($day)),
						"data-weekday" => date("N", strtotime($day)),
						"data-isweekend" => $isweekend,		
						"width" => "33px",
				));
			
			if ($isweekend) {
				$empty_days_cell['attributes']['class'] .= ' isweekend';
				$nice_days_letter_cell['attributes']['class'] .= ' isweekend';				
			} 
			
			$empty_days[] = $empty_days_cell;
			
			$nice_days_letter[] = $nice_days_letter_cell;
			
			
		}
		
		$this->view->count_days_in_month = count($period_days_arr);
	
		
		$nice_days_digits['last_column'] = array(
				"#",
				'attributes' => array(
						"rowspan" => "2",
						"width" => "33px",
		));
		$nice_days_digits['attributes'] = array(
						"class"=>"header_row",
						"rowspan" => "2"
		);	
		$nice_days_letter['attributes'] = array(
						"class"=>"head_shortday",
		);	
		
		$max_cells_number = count($empty_days) +2; // maximum cell in the action row
		
		
		$top_table = array();
		$top_table_cell_number = 5;
	

		
		//row1
		$top_table[] = array(
				array(
						$page_lang['sgb_xi_pdf_title'],
						'attributes'=>array(
								'class' => "head1",
								'colspan' => $top_table_cell_number
						)
				),
				'attributes'=>array(
								'class' => "row1",
				)
				
		);
		//row2
		$top_table[] = array(
				array(
						$page_lang['head_pflegedienste'],
						'attributes'=>array(
								'class' => "td1 pixelated_background",
								'colspan' => 2
						)
				),
				array(
						$page_lang['head_patient'],
						'attributes'=>array(
								'class' => "td2 pixelated_background",
								'colspan' => 2
						)
				),
				array(
						$page_lang['head_period'],
						'attributes'=>array(
								'class' => "td3 pixelated_background",
								'colspan' => 1
						)
				),
				'attributes'=>array(
						'class' => "row2",
				)
		);
		
		//row3
		$top_table[] = array(
				//pflegedinst
				array(
						$page_lang['head_name'] . " " . $client_details['team_name'],
						'attributes'=>array(
								'class' => "td1",
						)
				),
				array(
						$page_lang['head_ik_nr'] . " " . $client_details['institutskennzeichen'],
						'attributes'=>array(
								'class' => "td2",
						)
				),
				//patient
				array(
						$page_lang['head_name'] ." ". $this->_patientMasterData['nice_name'], //
						'attributes'=>array(
								'class' => "td3",
						)
				),
				array(
						$page_lang['head_vers_nr'] . " " . $healthinsu_array[$this->ipid] ['insurance_no'],
						'attributes'=>array(
								'class' => "td4",
						)
				),
				array(
						"<br /><br />".mb_convert_encoding(strftime('%B %Y', strtotime($query_date)) , 'utf8'),
// 						"<br /><br />".date("m.Y", strtotime($query_date)),//ddd
						'attributes'=>array(
								'class' => "td5",
								'rowspan' => "4",
								'style' => "text-align:center;vertical-align:middle;",
								"escaped" => 0,
						)
				),
				'attributes'=>array(
						'class' => "row3",
				)
		);
		//row4
		$top_table[] = array(
				array(
						$page_lang['head_street'] ." ". $client_details['street1'],
						'attributes'=>array(
								'class' => "td1",
						)
				),
				array(
						"",
						'attributes'=>array(
								'class' => "td2",
						)
				),
				array(
						$page_lang['head_birthd'] ." ". $this->_patientMasterData['birthd'],
						'attributes'=>array(
								'class' => "td3",
						)
				),
				array(
					   $page_lang['head_insurance_name'] . " " . $healthinsu_array[$this->ipid] ['company_name'],
						'attributes'=>array(
								'class' => "td4",
						)
				),
				'attributes'=>array(
						'class' => "row4",
				)		
		);
		
		//row4.b
		$top_table[] = array(
				array(
						"",
						'attributes'=>array(
								'class' => "td1",
						)
				),
				array(
						"",
						'attributes'=>array(
								'class' => "td2",
						)
				),
				array(
						$this->translate("address") .": {$this->_patientMasterData['nice_address']}",
						'attributes'=>array(
								'class' => "td3",
						)
				),
				array(
					   $page_lang['head_maintenancestage'] . " " . (! empty($maintainancestage_array[$this->ipid] ['stage']) ? "PG{$maintainancestage_array[$this->ipid] ['stage']}" : ''),
						'attributes'=>array(
								'class' => "td4",
						)
				),
				'attributes'=>array(
						'class' => "row4",
				)		
		);
		
		
		//row5
		if($this->getRequest()->isPost())
		{
			if($_POST['action'] == "save_and_pdf")
			{
			    
			    $ja = $this->getRequest()->getPost('ja_nein') == "ja" ? "02" : "01";
			    $nein = $this->getRequest()->getPost('ja_nein') == "nein" ? "02" : "01";
			    
				$ja_nein_tcpdf = array();
				$ja_nein_tcpdf[] = array(
						//"§ 18 Abs. 2 u.3 ja*)",
						array("§ 18 Abs. 2 u.3 ja*)<img src=\"".PUBLIC_PATH."/images/check{$ja}.jpg\" class=\"head_18abs_pdf\" />" , 'attributes'=>array('escaped' => 0)),
						//"nein *),",
						array("nein *),<img src=\"".PUBLIC_PATH."/images/check{$nein}.jpg\" class=\"head_18abs_pdf\" />" , 'attributes'=>array('escaped' => 0)),
						array('attributes'=>array('escaped' => "0"))
				
				);
				
				$ja_nein_tcpdf = $this->view->tabulate($ja_nein_tcpdf, array("no_header"=>true, "class"=>"no_border"));
				
				$page_lang['head_18abs'] = $ja_nein_tcpdf;
			}
		}


		$top_table[] = array(
				array(
						$page_lang['head_plz_ort'] ." ". $client_details['postcode'] ."/".$client_details['city'],
						'attributes'=>array(
								'class' => "td1",
						)
				),
				array(
						$page_lang['head_professional'],
						'attributes'=>array(
								'class' => "td2",
						)
				),
				array(
						$page_lang['head_18abs'],
						'attributes'=>array(
								'class' => "td3",
								'colspan' =>2,
								"escaped" => 0,
						)
				),
				'attributes'=>array(
						'class' => "row5",
				)
		);
		$this->view->top_table = $top_table;
		
		
		$table_header = array();
		$table_header[] = $nice_days_digits;
		$table_header[] = $nice_days_letter;
		
		
		$data_group_actions = array(
				
				$this->view->formLabel("add_action", "", array("class"=>"add_action", "onclick"=>"add_action_dialog(this)" , "title"=>$page_lang['add_action_dialog_title'])) .
				$this->view->formLabel("add_hour", "", array("class"=>"add_hour",  "onclick"=>"add_hour_dialog(this)", "title"=>$page_lang['add_hour_title']) ) .
				$this->view->formLabel("remove_groupid", "", array("class"=>"remove_groupid",  "onclick"=>"remove_groupid_dialog(this)", "title"=>$page_lang['remove_groupid_dialog_title'] )) ,
				'attributes' => array(
						"escaped" => 0,
						"class" => "first_column"
				)
		);
		
		$data_group = array();

		$group_id_counter = 0;
		$data_arr = array();
		$data_arr['first_column'] = "-";
		$data_arr = array_merge($data_arr, $empty_days );
		$data_arr ['last_column'] = "-";
		
		//add the actions row
		$data_arr['first_column'] =  $data_group_actions; 
		$data_arr['last_column'] = "";
		$data_arr['attributes'] = array(
				"class"=>"action_row",
				"data-groupid" => $group_id_counter,
				"data-actionid" => null,
				"data-startdate" => null,
				"data-interval" => null,
				"data-interval_options" => null,
				"data-selected_hour" => null,
				"nobr" => "true",
		);
		$data_row_first_row_original =
		$data_group[] = 
		$data_arr;
		
		
		//add the 3 gray rown
		$data_arr['first_column'] = array(
				$page_lang["einsatz_std"],
				'attributes' => array(
						"class" => "first_column",
		));
		$data_arr['last_column'] = "";
		$data_arr['attributes'] = array(
				"class"=>"gray_row einsatz_std",
				"data-groupid" => $group_id_counter,
				"nobr" => "true",
		);
		$data_row_einsatz_std = 
		$data_group[] = 
		$data_arr;//einsatz_std
		
		$data_arr['first_column'] = array(
				$page_lang["einsatz_min"],
				'attributes' => array(
						"class" => "first_column"
		));
		$data_arr['last_column'] = "";
		$data_arr['attributes'] = array(
				"class"=>"gray_row einsatz_min",
				"data-groupid" => $group_id_counter,
				"nobr" => "true",
		);
		$data_row_einsatz_min = 
		$data_group[] = 
		$data_arr; //einsatz_min
		
		
		$data_arr['first_column'] = array(
				$page_lang["signature"],
				'attributes' => array(
						"class" => "first_column"
		));
		$data_arr['last_column'] = "";
		$data_arr['attributes'] = array(
				"class"=>"gray_row signature",
				"data-groupid" => $group_id_counter,
				"nobr" => "true",
		);
		$data_row_signature = 
		$data_group[] = 
		$data_arr; // signature
		$group_id_counter++;
		
	
		$this->view->blank_data_group = array_merge(array("header"), $data_group);
		
		$sgbxi_obj = new SgbxiFormsSignaturePdf();
		$saved_data_groups = $sgbxi_obj->getMonth($this->ipid, $query_date);
		
		//the month you selected has no saved data... calculate based on last saved data
		if( empty($saved_data_groups)) {	
			
			//find last available month
			if( ($query_date_last_month = $sgbxi_obj->findLastMonth($this->ipid, $query_date)) !== false) {
				
				//get data from the found last month
				if( ($saved_data_groups_old = $sgbxi_obj->getMonth($this->ipid, $query_date_last_month)) !== false) {
					
					//calculate the forms until the end of this month
					$start = date('Y-m-01', strtotime($query_date_last_month));
					$end = date('Y-m-t', strtotime($query_date));
					
					$query_date_strtotime = strtotime(date('Y-m-01', strtotime($query_date)));
					
					$period_days_arr = $patientmaster->getDaysInBetween($start, $end);

					foreach($saved_data_groups_old as $groupid => $actions) {
						foreach($actions as $actionid => $action_settings) {
							
							$days_array2 = array();
							
							$xdays_counter = 0;
							
							$action_settings_startdate_strtotime = strtotime($action_settings['startdate']);
							
							$action_settings_interval_options = array_map('trim', explode(",", $action_settings['interval_options']));//only used for days of week
							
							$action_settings_interval_options_strtotime = array_map('strtotime', $action_settings_interval_options);
							
							
							foreach($period_days_arr as $period_day) {
								
								$period_day_strtotime = strtotime($period_day);
								
								switch( $action_settings['interval_action']) {
									case"daily":{
										if(	$query_date_strtotime <= $period_day_strtotime && $action_settings_startdate_strtotime <= $period_day_strtotime) {
											$days_array[$groupid][$actionid][$period_day] = 1;
											$days_array2[$period_day] = 1;
										}
										
									}break;
									
									case"every_x_days":{
										if(	$action_settings_startdate_strtotime <= $period_day_strtotime && (int)$action_settings['interval_options'] > 0) {
											if ( $query_date_strtotime <= $period_day_strtotime && $xdays_counter % $action_settings['interval_options'] == 0) {
												$days_array[$groupid][$actionid][$period_day] = 1;
												$days_array2[$period_day] = 1;
											}
											$xdays_counter++;
										}
									}break;
									
									case"selected_days_of_the_week":{
										
										if(	$query_date_strtotime <= $period_day_strtotime 
												&& $action_settings_startdate_strtotime <= $period_day_strtotime
												&& in_array( date("N", $period_day_strtotime), $action_settings_interval_options)) 
										{
											$days_array[$groupid][$actionid][$period_day] = 1;
											$days_array2[$period_day] = 1;
										}
									}break;
									
									case"user_defined_days":{
									    
									    if ($query_date_strtotime <= $period_day_strtotime 
									        && in_array($period_day_strtotime, $action_settings_interval_options_strtotime) )
									    {
									        $days_array[$groupid][$actionid][$period_day] = 1;
									        $days_array2[$period_day] = 1;
									    }
									}break;
									
								}
							}
							
							
							$saved_data_groups_old[$groupid][$actionid]['data'] = $days_array2;
							$saved_data_groups_old[$groupid][$actionid]['startdate'] = date('Y-m-01', $query_date_strtotime);
						}
						
						
					}
					if(! empty($saved_data_groups_old)) {
						$saved_data_groups = $saved_data_groups_old;
					}
					
				}
			}
		}
		
		
		$this->view->saved_data_groups = $saved_data_groups;//this is the final array with the [groupid][actionid]
		
		//create array with the rows of the table
		$saved_data_rows = array();
		$pdf_print_as_group = array();
		
		$count_saved_data_groups = 0;
		foreach($saved_data_groups as $groupid => $actions) {
			
			$pdf_print_as_group[$groupid] = array();
			
			
			$data_row_first_row = $data_row_first_row_original;
			
			$data_row_first_row_empty = $data_row_first_row_original;
			$data_row_first_row_empty['attributes']['data-groupid'] = $groupid;
			$data_row_first_row_empty['attributes']['class'] = "empty_spacer_row";
			$data_row_first_row_empty['attributes']['nobr'] = "false";
			$data_row_first_row_empty['first_column'][0] = "";
			
			$pdf_print_as_group[$groupid][]=
			$saved_data_rows[] = $data_row_first_row_empty;
			
			$pdf_print_as_group[$groupid][$groupid]=
			$saved_data_rows[$groupid] = array();
			
			foreach( $actions as $actionid => $row) {
				
				$data_row_first_row['attributes']['data-groupid'] = $groupid;
				$data_row_first_row['attributes']['data-actionid'] = $actionid;
				$data_row_first_row['attributes']['data-startdate'] = $row['startdate'];
				$data_row_first_row['attributes']['data-interval'] = $row['interval_action'];
				$data_row_first_row['attributes']['data-interval_options'] = $row['interval_options'];
				$data_row_first_row['attributes']['data-selected_hour'] = $row['selected_hour'];
				
				
				$first_column = array(array(
						$actionslist_by_id_arr[$actionid]['option_name'],
						"attributes" => array(
								"class"=>"first_column first_column_action",
						)
				));
				$last_column = array();
				
				$data_row_actions = $empty_days;
				
				$last_column_counter = 0;
				
				foreach($data_row_actions as $k => &$oneday) {
					if( isset($row['data'][ date("Y-m-d", strtotime($oneday['attributes']['data-day'])) ])) {
						
						$oneday[0] = $row['data'][ date("Y-m-d", strtotime($oneday['attributes']['data-day'])) ];
						
						$oneday['attributes']['class'] .= " hasValue";
						
						$last_column_counter = $last_column_counter + $oneday[0];
						
						$data_row_first_row[$k][0] = $row['selected_hour'];//add hour
					}
					
				}
				$last_column = array($last_column_counter);
				
				$data_row_attributes  = array(
						'attributes' => array(
						"class"=> "tr_hasValue",
						'data-groupid' => $groupid,
						'data-actionid' => $actionid,
						'data-startdate' => date('d.m.Y', strtotime($row['startdate'])),
						'data-interval' => $row['interval_action'],
						'data-interval_options' => $row['interval_options'],
						'data-selected_hour' => $row['selected_hour'],
						"nobr" => "true",
				));
				
				$pdf_print_as_group[$groupid][]=
				$saved_data_rows[] = array_merge($first_column , $data_row_actions , $last_column , $data_row_attributes);
	
			}

			//add the group actions row
			$pdf_print_as_group[$groupid][$groupid]=
			$saved_data_rows[$groupid] = $data_row_first_row;
			
			
			$count_saved_data_groups++;
			if ($count_saved_data_groups == count($saved_data_groups)) {
    		    $pdf_print_as_group[$groupid][] = array_merge([[
    		        
    		        "&nbsp;<br/>&nbsp;",
    		        "attributes" => [
    		            "class"=>"first_column first_column_action",
    		            "escaped" => 0,
    		        ]
    		    ]],
    		        $empty_days,
    		        [''],
    		        [ 'attributes' => [
    		            "class"=> "tr_hasValue EMPTY_ROW",
    		            "nobr" => "true",
    		        ]]
    		    );
			}
			
			
			
			
// 			$saved_data_rows[] = $saved_data_row_actions;
			
			//add the group last 3 rows
			$data_row_einsatz_std['attributes']['data-groupid'] = $groupid;
			$data_row_einsatz_min['attributes']['data-groupid'] = $groupid;
			$data_row_signature['attributes']['data-groupid'] = $groupid;
			$pdf_print_as_group[$groupid][]=
			$saved_data_rows[] = $data_row_einsatz_std;
			
			$pdf_print_as_group[$groupid][]=
			$saved_data_rows[] = $data_row_einsatz_min;
			
			$pdf_print_as_group[$groupid][]=
			$saved_data_rows[] = $data_row_signature;
			
		}


		$table_footer = array();
		$this->view->data_arr = array_merge($table_header , $saved_data_rows, $table_footer);// this are the rows of the table
		$this->view->pdf_print_as_group = $pdf_print_as_group;
		$this->view->pdf_table_header = $table_header;
		

		
		//print a pdf
		if($this->getRequest()->isPost())
		{
			if($_POST['action'] == "save_and_pdf")
			{
			
				$table_foot_pdf = array();
				$table_foot_pdf[] = array(array("&nbsp;", "attributes" => array("escaped"=>0, "height"=>"100px"))); //this is a forced empty row because if last page empty
				$table_foot_pdf[] = array(
						array(
								"Stempel und Unterschrift der Pflegeeinrichtung"  , 
								'attributes'=>array('escaped' => 0, "width"=>300 , "style"=>"border-top:2px solid black;")),
						
						array(	"" , 'attributes'=>array('escaped' => 0, "width"=>80)),
						
						array(
								"Datum" , 
								'attributes'=>array('escaped' => 0, "width"=>120 , "style"=>"border-top:2px solid black;")),
						
						array(	"" , 'attributes'=>array('escaped' => 0, "width"=>80)),
						
						array(
								"Unterschrift Patient, bzw. Angehöriger oder Bevollmächtigter" , 
								'attributes'=>array('escaped' => 0, "width"=>350 , "style"=>"border-top:2px solid black;")),
				);
				$this->view->table_foot_pdf = $table_foot_pdf;
							
				
				//print the pdf also
				$record_id = $this->generatePdfNew_2017(
						$chk=0,
						$post = $this->view,
						$pdfname = "sgbxileistungsnachweispdf",
						$filename = "sgbxileistungsnachweispdf.html",
						$extra = array(
								//"htmlform" => $this->view->render("patientformnew/sgbxileistungsnachweispdf.html")
								"pdfname"=> $this->view->translate('sgbxileistungsnachweispdf') . " (" . mb_convert_encoding(strftime('%B %Y', strtotime($query_date)) , 'utf8') . ")",
						)
				);
				exit;
			}
				
		}
	}
		
		
		public function zapvassessmentAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $this->clientid;
			$assessment_type = 'admission';
			$userid = $this->userid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);

			$this->view->epid = $epid;
			$this->view->clientid = $clientid;
			$this->view->id_record = $ipid;
			$this->view->ipid = $ipid;
			
			
			/* --------------Get patient info and menus--------------------------------- */
			$patientmaster = new PatientMaster();
			//$patientinfo = $patientmaster->getMasterData($decid, 1);
			//$tm = new TabMenus();
			//$this->view->tabmenus = $tm->getMenuTabs();
			
			
			/* --------------Check permissions	---------------------------------------- */
			$isclient = Pms_CommonData::getPatientClient($decid, $this->logininfo->clientid);
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
		
			/* --------------Check if patient is discharge	---------------------------- */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
		
			/* --------------Get form data ---------------------------------------------- */
			/* --------------Client information ---------------------------------------- */
			$client_data = Pms_CommonData::getClientData($this->logininfo->clientid);
		
			$client['details']['team_name'] = $client_data[0]['team_name'];
			$this->view->client = $client;
			
			
			/* --------------Client Symptoms information ---------------------------------------- */
			//get client symptoms groups
			$client_symp_groups = ClientSymptomsGroups::get_client_symptoms_groups($this->logininfo->clientid);
			$this->view->client_symp_gr = $client_symp_groups;
			//get client symptoms groups
			$client_symps = ClientSymptoms::get_client_symptoms($this->logininfo->clientid);
			
			/* --------------Patient Information ---------------------------------------- */
			$patientdetails = $this->_patientMasterData;
			
			$patient['details']['last_name'] = $patientdetails['last_name'];
			$patient['details']['first_name'] = $patientdetails['first_name'];
			$patient['details']['birthd'] = $patientdetails['birthd'];
			$patient['details']['street'] = $patientdetails['street1'];
			$patient['details']['city'] = $patientdetails['city'];
			$patient['details']['phone'] = $patientdetails['phone'];
			$patient['details']['gender'] = $patientdetails['sex'];
		
			/* -------------------------------Patient admission falls ---------------------------------------- */
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);
			if(count($admissions[$ipid]['admissionDates']) != "0")
			{
				foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
				{
					if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}
		
					$patient_falls[$keyAdm]['start'] = date("Y-m-d", strtotime($admitedDate['date']));
					$patient_falls[$keyAdm]['end'] = date("Y-m-d", strtotime($dischargeDate));
				}
			}
			else
			{
				$patient_falls[0]['start'] = date("Y-m-d", strtotime($admissions[$ipid]['admission_date']));
				$patient_falls[0]['end'] = date("Y-m-d", strtotime($admissions[$ipid]['discharge_date']));
			}
		
			/* --------------Patient - saved files --------------------------------- */
			$fileupload = new PatientFileUpload();
			$contact_form_files = $fileupload->get_zapv_assessment_ii_file_data($ipid, $assessment_type);

			if(!empty($contact_form_files)){

				foreach($contact_form_files as $k_file => $v_file)
				{
					$users_ids[] = $v_file['create_user'];
				}
				
				if(!empty($users_ids)){
					$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
				}
				
				$this->view->form_files = $contact_form_files;
			}
		
			/* --------------Patient - Contact persons --------------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid, false);
		
			$patient['details']['legal_contact_person'] = '';
			$patient['details']['contact_persons'] = '';
		
			$legual_guardiens = array();
			foreach($pcs as $k => $pc_values)
			{
				if($pc_values['cnt_legalguardian'] == '1')
				{
					$legual_guardiens[] = $pc_values['id'];
					$patient['details']['legal_contact_person'] .= $pc_values['cnt_last_name'] . ', ' . $pc_values['cnt_first_name'];
				}
				else
				{
					$patient['details']['contact_persons'] .= $pc_values['cnt_last_name'] . ', ' . $pc_values['cnt_first_name'] . '; ';
				}
			}
			$patient['details']['contact_persons'] = substr($patient['details']['contact_persons'], 0, -2);
		
			/* --------------Patient -health insurance ---------------------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
		
			$patient['details']['health_insurance'] = $healthinsu_array[0]['company_name'];
			$patient['details']['health_insurance_no'] = $healthinsu_array[0]['insurance_no'];
		
			/* --------------Patient -sapv details ---------------------------------------- */
			$dropSapv = Doctrine_Query::create()
			->select('*')
			->from('SapvVerordnung')
			->where('ipid = ?', $ipid)
			->andWhere('isdelete=0')
			->andWhere('status != 1 ')
			->orderBy('verordnungam ASC');
			
			$sapv_array = $dropSapv->fetchArray();
			
			
			if(is_array($sapv_array) && !empty($sapv_array))
			{
				$latest_sapv = end($sapv_array);
				$form_data['first_sapv_till'] = date('d.m.Y', strtotime($sapv_array[0]['verordnungbis']));
				$form_data['first_sapv_type'] = explode(',', $sapv_array[0]['verordnet']);
		
				$form_data['latest_sapv_till'] = date('d.m.Y', strtotime($latest_sapv['verordnungbis']));
				$form_data['latest_sapv_type'] = explode(',', $latest_sapv['verordnet']);
			}
		
			/* --------------Patient - family doctor ---------------------------------------- */
			if($patientdetails['familydoc_id'] > 0)
			{
				$fdoc = Doctrine_Core::getTable('FamilyDoctor')->find($patientdetails['familydoc_id']);
				if($fdoc)
				{
					$docarr = $fdoc->toArray();
					$doc_title = "";
					if($docarr['title'] == "")
					{
						$doc_title = $docarr['title'];
					}
					else
					{
						$doc_title = $docarr['title'] . " ";
					}
				}
		
				if(empty($docarr['last_name']) && empty($docarr['first_name']) && empty($docarr['street1']) && empty($docarr['zip']) && empty($docarr['city']))
				{
		
					$patient['details']['family_doctor'] = "";
				}
				else
				{
					$patient['details']['family_doctor'] = $doc_title . "" . $docarr['last_name'] . ", " . $docarr['first_name'] . " <br />" . $docarr['street1'] . "<br />" . $docarr['zip'] . " " . $docarr['city'];
		
					$patient['details']['family_doctor_pdf']['title'] = $doc_title . ' ';
					$patient['details']['family_doctor_pdf']['last_name'] = $docarr['last_name'];
					$patient['details']['family_doctor_pdf']['first_name'] = $docarr['first_name'];
					$patient['details']['family_doctor_pdf']['street'] = $docarr['street1'];
					$patient['details']['family_doctor_pdf']['zip'] = $docarr['zip'];
					$patient['details']['family_doctor_pdf']['city'] = $docarr['city'];
				}
			}
			else
			{
				$patient['details']['family_doctor'] = "";
				$patient['details']['family_doctor_pdf'] = array();
			}
		
		
			/* --------------Patient Pfllegedienst---------------------------- */
		
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($patientdetails['ipid']);
		
			$patient['details']['nurse_service'] = '';
			foreach($ppflearray as $kp => $pp)
			{
				$patient['details']['nurse_service'] .= htmlspecialchars($pp['nursing']) . "; ";
			}
		
			/* ------------------- Maindiagnosis & Sidediagnosis------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($this->logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
		
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
		
			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . "" . $valdia['icdnumber'];
						$comma = ", ";
					}
				}
			}
		
			if(strlen($diagnosis) > 0)
			{
				$form_data['diagnosis'] = $diagnosis;
			}
			else
			{
				$form_data['diagnosis'] = "";
			}
		
			/* ------------------------------- Patient deleted in verlaufvisits ---------------------- */
			$deleted_visits = Doctrine_Query::create()
			->select("id,recordid,tabname")
			->from('PatientCourse')
			->where('wrong=1')
			->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
			->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
			->andWhere('ipid = ?', $ipid);
			$deleted_visits_array = $deleted_visits->fetchArray();
		
			if(!empty($deleted_visits_array)){
				foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
				{
					$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
				}
			}
			/* ------------------------------- get maste form types by action ---------------------- */
			$types = Doctrine_Query::create()
			->select('*')
			->from('FormTypes')
			->where('clientid= ?', $clientid)
			->andWhere('isdelete = ?','0');
			$types_res = $types->fetchArray();
			foreach($types_res as $k_ft => $v_ft)
			{
				$type_details[$v_ft['id']] = $v_ft['name']; 
			}
			
			/* ------------------------------- get all contact froms ---------------------- */
			$contact_form_q_all = Doctrine_Query::create()
			->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
			->from("ContactForms c")
			->where('c.isdelete = 0')
			->andWhere('c.ipid = ?', $ipid);
			if(isset($del_visits['contact_form']) && !empty($del_visits['contact_form'])){
				$contact_form_q_all->andWhereNotIn('c.id', $del_visits['contact_form']);
			}
			$contact_form_q_all->orderBy('c.start_date DESC');
			$contact_form_all_arr = $contact_form_q_all->fetchArray();

			
			if(!empty($contact_form_all_arr))
			{
				foreach($contact_form_all_arr as $k=>$cf_data){
					$cf_ids[] = $cf_data['id'];
				}
				
				$sym_blocks = FormBlockClientSymptoms::get_patients_form_block_ClientSymptoms($ipid,$cf_ids );

				foreach($sym_blocks[$ipid] as $cf_id=>$symptoms){
					$cf_symptom_no[$cf_id] = count($symptoms);
				}
				
				$cf_data = "";
				foreach($contact_form_all_arr as $k=>$cf_data){
					$cf_date = date("d.m.Y H:i:s",strtotime($cf_data['start_date'])).' - '.date("H:i",strtotime($cf_data['end_date']));
					if($cf_symptom_no[$cf_data['id']]){
						$patient_contact_forms[$cf_data['id']] = $type_details[$cf_data['form_type']].' '.$cf_date.' ('.$cf_symptom_no[$cf_data['id']].')';
					} else {
						$patient_contact_forms[$cf_data['id']] = $type_details[$cf_data['form_type']].' '.$cf_date.' (0)';
					}
					if(!isset($cf_symptom_no[$cf_data['id']])){
						$patient_contact_forms_disabled[] = $cf_data['id'];
					}
					
				}
				
			}else{
				$patient_contact_forms = array();
			}
			
			$this->view->patient_contact_forms = $patient_contact_forms;
			$this->view->patient_contact_forms_disabled = $patient_contact_forms_disabled;
			 
		
			/* ============================= DEFAULT DATA =============================== */
			$form_data['providers'] = array('family_doctor', 'pharmacy');
			$form_data['treatment_plan'] = array('emergency', 'organized_call');
			$form_data['support_needs'] = array('special_coordination', 'advice_guidance', 'specific_treatment', 'specific_followup', 'crissis_anticipation', 'preparedness');
			$form_data['sapv'] = array('claimed_before');
			$form_data['done_date'] = date("d.m.Y");

			$zapv_data = new ZapvAssessmentII();
			$zapv_symp_data = new ZapvAssessmentIISymp();

			$current_status = 'active';
			if(!empty($_REQUEST['form_id']))
			{
				$saved_form_data = $zapv_data->get_zapv_assessment_by_id($ipid, $_REQUEST['form_id']);
				$current_status = $saved_form_data[0]['status'];
			}
			else
			{
				$saved_form_data = $zapv_data->get_zapv_assessment($ipid, $assessment_type, $current_status);
			}

			$form_data['status'] = $current_status;

			if(!empty($saved_form_data))
			{
				$form_id = $saved_form_data[0]['id'];
				$form_data = $saved_form_data[0];

				$form_symptoms = $zapv_symp_data->get_zapv_assessment_symp($ipid,$form_id);
				
				foreach($form_symptoms as $k=>$symp){
					$form_data['symptom_group'][$symp['symp_group']] = $symp['symp_description'];
				}
				
				$form_data['form_id'] = $form_id;

				if($form_data['first_sapv_till'] != "0000-00-00 00:00:00")
				{
					$form_data['first_sapv_till'] = date('d.m.Y', strtotime($form_data['first_sapv_till']));
				}
				else
				{
					$form_data['first_sapv_till'] = '';
				}
				$form_data['first_sapv_type'] = explode(',', $form_data['first_sapv_type']);
				if($form_data['latest_sapv_till'] != "0000-00-00 00:00:00")
				{
					$form_data['latest_sapv_till'] = date('d.m.Y', strtotime($form_data['latest_sapv_till']));
				}
				else
				{
					$form_data['latest_sapv_till'] = '';
				}
				$form_data['latest_sapv_type'] = explode(',', $form_data['latest_sapv_type']);
				$form_data['providers'] = explode(',', $form_data['providers']);
				$form_data['treatment_plan'] = explode(',', $form_data['treatment_plan']);
				$form_data['support_needs'] = explode(',', $form_data['support_needs']);
				$form_data['sapv'] = explode(',', $form_data['sapv']);
				$form_data['reason_of_termination'] = explode(',', $form_data['reason_of_termination']);

				if($form_data['sapv_requierments_until'] != "0000-00-00 00:00:00")
				{
					$form_data['sapv_requierments_until'] = date('d.m.Y', strtotime($form_data['sapv_requierments_until']));
				}
				else
				{
					$form_data['sapv_requierments_until'] = '';
				}

				if($form_data['done_date'] != "0000-00-00 00:00:00")
				{
					$form_data['done_date'] = date('d.m.Y', strtotime($form_data['done_date']));
				}
				else
				{
					$form_data['done_date'] = '';
				}
				if(!empty($form_data['used_contact_forms'])){
					$form_data['contact_forms_selected'] = json_decode($form_data['used_contact_forms']);
				}
			}

			$this->view->patient = $patient;
			$this->view->form_data = $form_data;
			
			if($this->getRequest()->isPost())
			{
				$zapv_form = new Application_Form_ZapvAssessmentII();

				if(strlen($_POST['start_new_assessment']) > 0 && empty($_POST['generate_pdf']) && empty($_POST['save_form']))
				{

					if(!empty($saved_form_data) && !empty($form_id) && $current_status == 'active')
					{
						$generate_new = $zapv_form->generate_new($form_id, $ipid, $assessment_type);

						$post = $_POST;
						$post['client_symp_gr'] = $client_symp_groups;
						$post['form_id'] = $form_data['form_id'];
						$post['patient'] = $patient;
						$post['patient']['details']['family_doctor'] = $patient['details']['family_doctor_pdf'];
						$post['client'] = $client;

						$this->generate_pdf($post, 'ZAPV_Assessment_ii_save', "zapv_assessment_ii_pdf.html");
						$this->_redirect(APP_BASE . "patientformnew/zapvassessment?id=" . $_GET['id']);
					}
				}
				elseif(strlen($_POST['save_form']) > 0 && empty($_POST['generate_pdf']) && empty($_POST['start_new_assessment']))
				{
					if(!empty($saved_form_data) && !empty($form_id))
					{
						$update = $zapv_form->update_form_data($form_id, $_POST['form_data'], $ipid, $assessment_type);
					}
					else
					{
						$insert = $zapv_form->insert_form_data($_POST['form_data'], $ipid, $assessment_type);
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				elseif(strlen($_POST['generate_pdf']) > 0 && empty($_POST['save_form']) && empty($_POST['start_new_assessment']))
				{
					$post = $_POST;
					if(empty($form_data['form_id']))
					{
						$form_data['form_id'] = 1;
					}
					$post['client_symp_gr'] = $client_symp_groups;
					$post['form_id'] = $form_data['form_id'];
					$post['patient'] = $patient;
					$post['patient']['details']['family_doctor'] = $patient['details']['family_doctor_pdf'];
					$post['client'] = $client;
					$this->generate_pdf($post, 'ZAPV_Assessment_ii', "zapv_assessment_ii_pdf.html");
				}
			}
		}
		

		
		public function zapvberatungassessmentAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$assessment_type = 'consulting';
			$userid = $logininfo->userid;
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid = Pms_CommonData::getEpid($ipid);
			$this->view->epid = $epid;
			$this->view->clientid = $clientid;
			$this->view->id_record = $ipid;
			$this->view->ipid = $ipid;
		
			/* --------------Get patient info and menus--------------------------------- */
			$patientmaster = new PatientMaster();
			//$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			//$tm = new TabMenus();
			//$this->view->tabmenus = $tm->getMenuTabs();
		
			/* --------------Check permissions	---------------------------------------- */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
		
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* --------------Check if patient is discharge	---------------------------- */
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}
		
			/* --------------Get form data ---------------------------------------------- */
			/* --------------Client information ---------------------------------------- */
			$client_data = Pms_CommonData::getClientData($clientid);
		
			$client['details']['team_name'] = $client_data[0]['team_name'];
			$this->view->client = $client;
		

			/* --------------Client Symptoms information ---------------------------------------- */
			//get client symptoms groups
			$client_symp_groups = ClientSymptomsGroups::get_client_symptoms_groups($this->logininfo->clientid);
			$this->view->client_symp_gr = $client_symp_groups;
			//get client symptoms groups
			$client_symps = ClientSymptoms::get_client_symptoms($this->logininfo->clientid);
			
			
			/* --------------Patient Information ---------------------------------------- */
			$patientdetails = $this->_patientMasterData;
		
			$patient['details']['last_name'] = $patientdetails['last_name'];
			$patient['details']['first_name'] = $patientdetails['first_name'];
			$patient['details']['birthd'] = $patientdetails['birthd'];
			$patient['details']['street'] = $patientdetails['street1'];
			$patient['details']['city'] = $patientdetails['city'];
			$patient['details']['phone'] = $patientdetails['phone'];
			$patient['details']['gender'] = $patientdetails['sex'];
		
			/* -------------------------------Patient admission falls ---------------------------------------- */
			$admissions = $patientmaster->getTreatedDaysRealMultiple(array($ipid), true);
			if(count($admissions[$ipid]['admissionDates']) != "0")
			{
				foreach($admissions[$ipid]['admissionDates'] as $keyAdm => $admitedDate)
				{
					if(!empty($admissions[$ipid]['dischargeDates'][$keyAdm]['date']))
					{
						$dischargeDate = $admissions[$ipid]['dischargeDates'][$keyAdm]['date'];
					}
					else
					{
						$dischargeDate = date("d.m.Y");
					}
		
					$patient_falls[$keyAdm]['start'] = date("Y-m-d", strtotime($admitedDate['date']));
					$patient_falls[$keyAdm]['end'] = date("Y-m-d", strtotime($dischargeDate));
				}
			}
			else
			{
				$patient_falls[0]['start'] = date("Y-m-d", strtotime($admissions[$ipid]['admission_date']));
				$patient_falls[0]['end'] = date("Y-m-d", strtotime($admissions[$ipid]['discharge_date']));
			}
			/* --------------Patient - saved files --------------------------------- */
			$fileupload = new PatientFileUpload();
			$contact_form_files = $fileupload->get_zapv_assessment_ii_file_data($ipid, $assessment_type);
			$users_ids[] = '999999999';
			foreach($contact_form_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}
		
			$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			$this->view->form_files = $contact_form_files;
		
			/* --------------Patient - Contact persons --------------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid, false);
		
			$patient['details']['legal_contact_person'] = '';
			$patient['details']['contact_persons'] = '';
		
			$legual_guardiens = array();
			foreach($pcs as $k => $pc_values)
			{
				if($pc_values['cnt_legalguardian'] == '1')
				{
					$legual_guardiens[] = $pc_values['id'];
					$patient['details']['legal_contact_person'] .= $pc_values['cnt_last_name'] . ', ' . $pc_values['cnt_first_name'];
				}
				else
				{
					$patient['details']['contact_persons'] .= $pc_values['cnt_last_name'] . ', ' . $pc_values['cnt_first_name'] . '; ';
				}
			}
			$patient['details']['contact_persons'] = substr($patient['details']['contact_persons'], 0, -2);
		
			/* --------------Patient -health insurance ---------------------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
		
			$patient['details']['health_insurance'] = $healthinsu_array[0]['company_name'];
			$patient['details']['health_insurance_no'] = $healthinsu_array[0]['insurance_no'];
		
			/* --------------Patient -sapv details ---------------------------------------- */
			$dropSapv = Doctrine_Query::create()
			->select('*')
			->from('SapvVerordnung')
			->where('ipid LIKE "' . $ipid . '"')
			->andWhere('isdelete=0')
			->andWhere('status != 1 ')
			->orderBy('verordnungam ASC');
			$sapv_array = $dropSapv->fetchArray();
		
			if(is_array($sapv_array) && !empty($sapv_array))
			{
				$latest_sapv = end($sapv_array);
				$form_data['first_sapv_till'] = date('d.m.Y', strtotime($sapv_array[0]['verordnungbis']));
				$form_data['first_sapv_type'] = explode(',', $sapv_array[0]['verordnet']);
		
				$form_data['latest_sapv_till'] = date('d.m.Y', strtotime($latest_sapv['verordnungbis']));
				$form_data['latest_sapv_type'] = explode(',', $latest_sapv['verordnet']);
			}
		
			/* --------------Patient - family doctor ---------------------------------------- */
			if($patientdetails['familydoc_id'] > 0)
			{
				$fdoc = Doctrine_Core::getTable('FamilyDoctor')->find($patientdetails['familydoc_id']);
				if($fdoc)
				{
					$docarr = $fdoc->toArray();
					$doc_title = "";
					if($docarr['title'] == "")
					{
						$doc_title = $docarr['title'];
					}
					else
					{
						$doc_title = $docarr['title'] . " ";
					}
				}
		
				if(empty($docarr['last_name']) && empty($docarr['first_name']) && empty($docarr['street1']) && empty($docarr['zip']) && empty($docarr['city']))
				{
		
					$patient['details']['family_doctor'] = "";
				}
				else
				{
					$patient['details']['family_doctor'] = $doc_title . "" . $docarr['last_name'] . ", " . $docarr['first_name'] . " <br />" . $docarr['street1'] . "<br />" . $docarr['zip'] . " " . $docarr['city'];
		
					$patient['details']['family_doctor_pdf']['title'] = $doc_title . ' ';
					$patient['details']['family_doctor_pdf']['last_name'] = $docarr['last_name'];
					$patient['details']['family_doctor_pdf']['first_name'] = $docarr['first_name'];
					$patient['details']['family_doctor_pdf']['street'] = $docarr['street1'];
					$patient['details']['family_doctor_pdf']['zip'] = $docarr['zip'];
					$patient['details']['family_doctor_pdf']['city'] = $docarr['city'];
				}
			}
			else
			{
				$patient['details']['family_doctor'] = "";
				$patient['details']['family_doctor_pdf'] = array();
			}
		
			/* --------------Patient Pfllegedienst---------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($patientdetails['ipid']);
		
			$patient['details']['nurse_service'] = '';
			foreach($ppflearray as $kp => $pp)
			{
				$patient['details']['nurse_service'] .= htmlspecialchars($pp['nursing']) . "; ";
			}
		
			/* ------------------- Maindiagnosis & Sidediagnosis------------- */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ",";
			}
		
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipid, $typeid);
		
			if(count($dianoarray) > 0)
			{
				$comma = "";
				$diagnosis = "";
				foreach($dianoarray as $key => $valdia)
				{
					if(strlen($valdia['diagnosis']) > 0)
					{
						$diagnosis .= $comma . "" . $valdia['icdnumber'];
						$comma = ", ";
					}
				}
			}
		
			if(strlen($diagnosis) > 0)
			{
				$form_data['diagnosis'] = $diagnosis;
			}
			else
			{
				$form_data['diagnosis'] = "";
			}
		
			/* ------------------------------- Patient deleted in verlaufvisits ---------------------- */
			$deleted_visits = Doctrine_Query::create()
			->select("id,recordid,tabname")
			->from('PatientCourse')
			->where('wrong=1')
			->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
			->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
			->andWhere('ipid = ?', $ipid);
			$deleted_visits_array = $deleted_visits->fetchArray();
		
			if(!empty($deleted_visits_array)){
				foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
				{
					$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
				}
			}
			
			/* ------------------------------- get maste form types by action ---------------------- */
			$types = Doctrine_Query::create()
			->select('*')
			->from('FormTypes')
			->where('clientid= ?', $clientid)
			->andWhere('isdelete = ?','0');
			$types_res = $types->fetchArray();
			foreach($types_res as $k_ft => $v_ft)
			{
				$type_details[$v_ft['id']] = $v_ft['name'];
			}
			
			/* ------------------------------- get all contact froms ---------------------- */
			$contact_form_q_all = Doctrine_Query::create()
			->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
			->from("ContactForms c")
			->where('c.isdelete = 0')
			->andWhere('c.ipid = ?', $ipid);
			if(isset($del_visits['contact_form']) && !empty($del_visits['contact_form'])){
				$contact_form_q_all->andWhereNotIn('c.id', $del_visits['contact_form']);
			}
			$contact_form_q_all->orderBy('c.start_date DESC');
			$contact_form_all_arr = $contact_form_q_all->fetchArray();
			
				
			if(!empty($contact_form_all_arr))
			{
				foreach($contact_form_all_arr as $k=>$cf_data){
					$cf_ids[] = $cf_data['id'];
				}
			
				$sym_blocks = FormBlockClientSymptoms::get_patients_form_block_ClientSymptoms($ipid,$cf_ids );
			
				foreach($sym_blocks[$ipid] as $cf_id=>$symptoms){
					$cf_symptom_no[$cf_id] = count($symptoms);
				}
			
				$cf_data = "";
				foreach($contact_form_all_arr as $k=>$cf_data){
					$cf_date = date("d.m.Y H:i:s",strtotime($cf_data['start_date'])).' - '.date("H:i",strtotime($cf_data['end_date']));
					if($cf_symptom_no[$cf_data['id']]){
						$patient_contact_forms[$cf_data['id']] = $type_details[$cf_data['form_type']].' '.$cf_date.' ('.$cf_symptom_no[$cf_data['id']].')';
					} else {
						$patient_contact_forms[$cf_data['id']] = $type_details[$cf_data['form_type']].' '.$cf_date.' (0)';
					}
					if(!isset($cf_symptom_no[$cf_data['id']])){
						$patient_contact_forms_disabled[] = $cf_data['id'];
					}
						
				}
			
			}else{
				$patient_contact_forms = array();
			}
				
			$this->view->patient_contact_forms = $patient_contact_forms;
			$this->view->patient_contact_forms_disabled = $patient_contact_forms_disabled;
			
			 
			/* ============================= DEFAULT DATA =============================== */
			$form_data['advice_checked'] = '1';
			$form_data['providers'] = array('family_doctor', 'nurse');
			$form_data['treatment_plan'] = array();
			$form_data['support_needs'] = array('preparedness');
			$form_data['sapv'] = array('claimed_before');
			$form_data['done_date'] = date("d.m.Y");
		
			$zapv_data = new ZapvAssessmentII();
			$zapv_symp_data = new ZapvAssessmentIISymp();
		
			$current_status = 'active';
			if(!empty($_REQUEST['form_id']))
			{
				$saved_form_data = $zapv_data->get_zapv_assessment_by_id($ipid, $_REQUEST['form_id']);
				$current_status = $saved_form_data[0]['status'];
			}
			else
			{
				$saved_form_data = $zapv_data->get_zapv_assessment($ipid, $assessment_type, $current_status);
			}
		
			$form_data['status'] = $current_status;
		
			if(!empty($saved_form_data))
			{
				$form_id = $saved_form_data[0]['id'];
				$form_data = $saved_form_data[0];

				$form_symptoms = $zapv_symp_data->get_zapv_assessment_symp($ipid,$form_id);
				
				foreach($form_symptoms as $k=>$symp){
					$form_data['symptom_group'][$symp['symp_group']] = $symp['symp_description'];
				}
				
				$form_data['form_id'] = $form_id;
		
				if($form_data['first_sapv_till'] != "0000-00-00 00:00:00")
				{
					$form_data['first_sapv_till'] = date('d.m.Y', strtotime($form_data['first_sapv_till']));
				}
				else
				{
					$form_data['first_sapv_till'] = '';
				}
				$form_data['first_sapv_type'] = explode(',', $form_data['first_sapv_type']);
				if($form_data['latest_sapv_till'] != "0000-00-00 00:00:00")
				{
					$form_data['latest_sapv_till'] = date('d.m.Y', strtotime($form_data['latest_sapv_till']));
				}
				else
				{
					$form_data['latest_sapv_till'] = '';
				}
				$form_data['latest_sapv_type'] = explode(',', $form_data['latest_sapv_type']);
				$form_data['providers'] = explode(',', $form_data['providers']);
				$form_data['treatment_plan'] = explode(',', $form_data['treatment_plan']);
				$form_data['support_needs'] = explode(',', $form_data['support_needs']);
				$form_data['sapv'] = explode(',', $form_data['sapv']);
				$form_data['reason_of_termination'] = explode(',', $form_data['reason_of_termination']);
		
				if($form_data['sapv_requierments_until'] != "0000-00-00 00:00:00")
				{
					$form_data['sapv_requierments_until'] = date('d.m.Y', strtotime($form_data['sapv_requierments_until']));
				}
				else
				{
					$form_data['sapv_requierments_until'] = '';
				}
		
				if($form_data['done_date'] != "0000-00-00 00:00:00")
				{
					$form_data['done_date'] = date('d.m.Y', strtotime($form_data['done_date']));
				}
				else
				{
					$form_data['done_date'] = '';
				}
				
				if(!empty($form_data['used_contact_forms'])){
					$form_data['contact_forms_selected'] = json_decode($form_data['used_contact_forms']);
				}
				
			}
			$this->view->patient = $patient;
			$this->view->form_data = $form_data;
		
			if($this->getRequest()->isPost())
			{
				$zapv_form = new Application_Form_ZapvAssessmentII();
				if(strlen($_POST['start_new_assessment']) > 0 && empty($_POST['generate_pdf']) && empty($_POST['save_form']))
				{
					if(!empty($saved_form_data) && !empty($form_id) && $current_status == 'active')
					{
						$generate_new = $zapv_form->generate_new($form_id, $ipid, $assessment_type);
		
						$post = $_POST;
						$post['client_symp_gr'] = $client_symp_groups;
						$post['form_id'] = $form_data['form_id'];
						$post['patient'] = $patient;
						$post['patient']['details']['family_doctor'] = $patient['details']['family_doctor_pdf'];
						$post['client'] = $client;
						$this->generate_pdf($post, 'ZAPV_Beratung_Assessment_ii_save', "zapv_beratung_assessment_ii_pdf.html");
						$this->_redirect(APP_BASE . "patientformnew/zapvberatungassessment?id=" . $_GET['id']);
					}
				}
				elseif(strlen($_POST['save_form']) > 0 && empty($_POST['generate_pdf']) && empty($_POST['start_new_assessment']))
				{
					if(!empty($saved_form_data) && !empty($form_id))
					{
						$update = $zapv_form->update_form_data($form_id, $_POST['form_data'], $ipid, $assessment_type);
					}
					else
					{
						$insert = $zapv_form->insert_form_data($_POST['form_data'], $ipid, $assessment_type);
					}
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				}
				elseif(strlen($_POST['generate_pdf']) > 0 && empty($_POST['save_form']) && empty($_POST['start_new_assessment']))
				{
					$post = $_POST;
					if(empty($form_data['form_id']))
					{
						$form_data['form_id'] = 1;
					}
					$post['client_symp_gr'] = $client_symp_groups;
					$post['form_id'] = $form_data['form_id'];
					$post['patient'] = $patient;
					$post['patient']['details']['family_doctor'] = $patient['details']['family_doctor_pdf'];
					$post['client'] = $client;
					$this->generate_pdf($post, 'ZAPV_Beratung_Assessment_ii', "zapv_beratung_assessment_ii_pdf.html");
				}
			}
		}
		
		
		public function stammblatt8Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			$epid =  Pms_CommonData::getEpidFromId($decid);
			$userid = $logininfo->userid;
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
		
			/* -------------------Patient Data--------------------------------------- */
			// 			$patientarr = $patientmaster->getMasterData($decid, 0);
			$patientarr = $patientmaster->get_patientMasterData();
			$this->view->birth = $patientarr['birthd'];
			$this->view->lastname = $patientarr['last_name'];
			$this->view->firstname = $patientarr['first_name'];
			$this->view->street = $patientarr['street1'];
			$this->view->zip = $patientarr['zip'];
			$this->view->patcity = $patientarr['city'];
			$this->view->pattel = $patientarr['phone'];
			$this->view->pathandy = $patientarr['mobile'];
			$this->view->patientenverfugung = $patientarr['living_will'];
		
			/* ------------------- Health Insurance Data----------------------------- */
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($patientarr['ipid']);
			$this->view->healthinsurance_company = $healthinsu_array[0]['company_name'];
			$this->view->healthinsurance_kknr = $healthinsu_array[0]['kvk_no'];
			$this->view->healthinsurance_versnr = $healthinsu_array[0]['insurance_no'];
			$this->view->zuzahlung = $healthinsu_array[0]['rezeptgebuhrenbefreiung'];
			if(!empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0)
			{
		
				$helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
				$healtharray = $helathins->toArray();
				$this->view->healthinsurance_companytel = $healtharray['phone'];
				$this->view->healthinsurance_companyfax = $healtharray['phonefax'];
			}
				
			/* ------------------- voluntaryworkers ----------------------------- */
			//$this->view->vworkers = $this->view->translate('voluntaryworkers');
		
			$pvw = new PatientVoluntaryworkers();
			$pvwarray = $pvw->getPatientVoluntaryworkers($patientarr['ipid']);
			$this->view->vlabel = $this->view->translate('voluntaryworkers');
				
			if (is_array($pvwarray))
			{
				$lastelem = end($pvwarray);
				$this->view->vworkers = "";
				foreach ($pvwarray as $vw)
				{
					if ($vw['first_name'] != '')
					{
						$namep = $vw['first_name']." ".$vw['last_name'];
					}
					else
					{
						$namep = $vw['last_name'];
					}
						
					if($vw != $lastelem)
					{
						$this->view->vworkers .= $namep ."; ";
					}
					else
					{
						$this->view->vworkers .= $namep;
							
					}
				}
			}
				
			/* ----------------------Get assigned users------------------------------*/
			$assigned_users= PatientQpaMapping::get_patient_assigned_doctors(array($epid), $clientid, "details");
			//print_r($assigned_users); exit;
			foreach($assigned_users as $epid=> $user_array){
				foreach($user_array as $k=>$user_data){
					$assignedusers[] = $user_data;
				}
			}
			//print_r($assignedusers); exit;
			$names="";
			foreach ($assignedusers as $doc){
				if($doc['degree'])
				{
					$name=$doc['degree']. " ";
				}
				if($doc['title']){
					$name= $name . $doc['title']." ".$doc['first_name'] . " " . $doc['last_name'];
				} else{
					$name= $name . $doc['first_name'] . " " . $doc['last_name'];
				}
					
				if($doc['phone']){
					$name = $name . ", Tel.: " . $doc['phone'];
				}
		
				if($doc['mobile']){
					$name = $name . ", Hdy.: " . $doc['mobile'];
				}
		
				if($doc['fax']){
					$name = $name . ", Fax: " . $doc['fax'];
				}
		
				if($doc['emailid']){
					$name = $name . ", E-mail: " . $doc['emailid'];
				}
		
				if ($name){
					if($names == "")
					{
						$names=$names . $name;
					}
					else
					{
						$names=$names . "\n" . $name;
					}
					$name = "";
				}
			}
		
			$this->view->asslabel = $this->view->translate('assigned_doctors');
			$this->view->assigneds = $names;
		
			/* --------------Patient family doctor---------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($patientarr['familydoc_id']);
			$text = "";
			if($docarray[0])
			{
				if($docarray[0]['last_name'] != '')
				{
					if ($docarray[0]['first_name'] != '')
					{
						$text .= $docarray[0]['last_name'].", ".$docarray[0]['first_name'];
					}
					else
					{
						$text .= $docarray[0]['last_name'];
					}
				}
				else
				{
					if ($docarray[0]['first_name'] != '')
					{
						$text .= $docarray[0]['first_name'];
					}
					else
					{
						$text .= '';
					}
				}
				if($text != "")
				{
					$text .= "<br/>";
				}
				if($docarray[0]['street1'] != '')
				{
					$text .= $docarray[0]['street1'].", ".$docarray[0]['zip']." ".$docarray[0]['city'];
				}
				else
				{
					$text .= $docarray[0]['zip']." ".$docarray[0]['city'];
				}
		
				//$this->view->hausarzt_details = $docarray[0]['last_name'] . ", " . $docarray[0]['first_name'] . "<br/> " . $docarray[0]['street1'] . ", " . $docarray[0]['zip'] . " " . $docarray[0]['city'];
				$this->view->hausarzt_details = $text;
				$this->view->hausarzt_tel = $docarray[0]['phone_practice'];
				$this->view->hausarzt_fax = $docarray[0]['fax'];
			}
		
			/* --------------Patient First Pfllegedienst---------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($patientarr['ipid']);
			$text = "";
			if($ppflearray[0])
			{
				$text .= $ppflearray[0]['nursing'];
				if($text != "")
				{
					$text .= "<br/>";
				}
				if($ppflearray[0]['street1'] != '')
				{
					$text .= $ppflearray[0]['street1'].", ".$ppflearray[0]['zip']." ".$ppflearray[0]['city'];
				}
				else
				{
					$text .= $ppflearray[0]['zip']." ".$ppflearray[0]['city'];
				}
		
				//$this->view->pflegedienst_details = $ppflearray[0]['nursing'] . "<br/>" . $ppflearray[0]['street1'] . ", " . $ppflearray[0]['zip'] . " " . $ppflearray[0]['city'];
				$this->view->pflegedienst_details = $text;
				$this->view->pflegedienst_tel = $ppflearray[0]['pf_phone_practice'];
				$this->view->pflegedienst_fax = $ppflearray[0]['pf_fax'];
			}
		
			/* --------------Patient First Apotheke---------------------------- */
			$ppharmacy = new PatientPharmacy();
			$ppharmacy_array = $ppharmacy->getPatientPharmacy($patientarr['ipid']);
			$text = "";
			if($ppharmacy_array[0])
			{
				$text .= $ppharmacy_array[0]['apotheke'];
				if($text != "")
				{
					$text .= "<br/>";
				}
				if($ppharmacy_array[0]['street1'] != '')
				{
					$text .= $ppharmacy_array[0]['street1'].", ".$ppharmacy_array[0]['zip']." ".$ppharmacy_array[0]['city'];
				}
				else
				{
					$text .= $ppharmacy_array[0]['zip']." ".$ppharmacy_array[0]['city'];
				}
		
				//$this->view->pharmacy_details = $ppharmacy_array[0]['apotheke'] . "<br/>" . $ppharmacy_array[0]['street1'] . ", " . $ppharmacy_array[0]['zip'] . " " . $ppharmacy_array[0]['city'];
				$this->view->pharmacy_details = $text;
				$this->view->pharmacy_tel = $ppharmacy_array[0]['phone'];
				$this->view->pharmacy_fax = $ppharmacy_array[0]['fax'];
			}
		
			/* --------------Patient Theraphieplanung---------------------------- */
			$Therapieplanung = new PatientTherapieplanung();
			$therapy = $Therapieplanung->getTherapieplanungData($ipid);
			$therapy_str = "";
			if($therapy[0]['ipid'])
			{
				$a = 0;
				$b = 0;
				$c = 0;
				$d = 0;
				$e = 0;
				$f = 0;
				$g = 0;
				$h = 0;
				$i = 0;
				$j = 0;
				$k = 0;
				if($therapy[0]['ernahrungstherapie'] == 1)
				{
					$therapy_str .='Keine Ernährungstherapie, ';
				}
				if($therapy[0]['infusionstherapie'] == 1)
				{
					$therapy_str .='Keine Infusionstherapie, ';
				}
				if($therapy[0]['antibiose_bei_pneumonie'] == 1)
				{
					$therapy_str .='Keine Antibiose bei Pneumonie, ';
				}
				if($therapy[0]['antibiose_bei_HWI'] == 1)
				{
					$therapy_str .='Keine Antibiose bei HWI, ';
				}
				if($therapy[0]['tumorreduktionstherapie_chemo'] == 1)
				{
					$therapy_str .='Keine Tumorreduktionstherapie / Chemo, ';
				}
				if($therapy[0]['krankenhausverlegung'] == 1)
				{
					$therapy_str .='Keine Krankenhausverlegung im Notfall (z.B. Harnverhalt), ';
				}
				if($therapy[0]['lagerung_durch_pflege'] == 1)
				{
					$therapy_str .='Keine Lagerung durch Pflege, ';
				}
				if($therapy[0]['orale_medikation_mehr'] == 1)
				{
					$therapy_str .='Keine orale Medikation mehr, ';
				}
				if($therapy[0]['blut_volumenersatztherapie'] == 1)
				{
					$therapy_str .='Keine Blut- / Volumenersatztherapie, ';
				}
				if($therapy[0]['palliative'] == 1)
				{
					$therapy_str .='Palliative Sedierung bei unkontrollierbaren Symptomen, ';
				}
				if(!empty($therapy[0]['freetext']))
				{
					$therapy_str .= "" . $therapy[0]['freetext'] . ", ";
				}
			}
			$this->view->therapy = substr($therapy_str, 0, -2);
		
			/* --------------Patient Contact persons Data ---------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->getPatientContact($ipid);
			$familydegree = new FamilyDegree();
			$status = $familydegree->getFamilyDegrees(1);
		
			if(!empty($pcs[0]))
			{
				$cntpers1name = $pcs[0]['cnt_last_name'] . ', ' . $pcs[0]['cnt_first_name'];
				$cntpers1tel = $pcs[0]['cnt_phone'];
				$cntpers1handy = $pcs[0]['cnt_mobile'];
			}
			else
			{
				$cntpers1name = "";
				$cntpers1tel = "";
				$cntpers1handy = "";
			}
		
			if(!empty($pcs[1]))
			{
				$cntpers2name = $pcs[1]['cnt_last_name'] . ', ' . $pcs[1]['cnt_first_name'];
				$cntpers2tel = $pcs[1]['cnt_phone'];
				$cntpers2handy = $pcs[1]['cnt_mobile'];
			}
			else
			{
				$cntpers2name = "";
				$cntpers2tel = "";
				$cntpers2handy = "";
			}
			$this->view->cntpers1name = $cntpers1name;
			$this->view->cntpers1tel = $cntpers1tel;
			$this->view->cntpers1handy = $cntpers1handy;
			$this->view->cntpers2name = $cntpers2name;
			$this->view->cntpers2tel = $cntpers2tel;
			$this->view->cntpers2handy = $cntpers2handy;
		
			/* -------------------Patient Diagnosis  ------------------------------- */
			$abb = "'HD','ND','AD','DD'";
			$dg = new DiagnosisType();
			$ddarr = $dg->getDiagnosisTypes($clientid, $abb);
			if(!$ddarr[0]['id'])
			{
				$ddarr[0]['id'] = 0;
			}
			$comma = "";
			foreach($ddarr as $key1 => $val1)
			{
				//echo $val1['id'];
				$stam_diagno = array();
				$diagns = new PatientDiagnosis();
				$stam_diagno = $diagns->getFinalData($ipid, $val1['id']);
		
				$dia = 1;
				foreach($stam_diagno as $key => $val)
				{
					if(strlen($val['diagnosis']) > 0)
					{
						if(strlen($val['icdnumber']) > 0)
						{
							$other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
						}
						else
						{
							$other_diagnosis .= $comma . $val['diagnosis'];
						}
						$dia++;
						$comma = ",";
					}
				}
			}
			$this->view->diagnosis = $other_diagnosis;
		
			/* -------------------PDF Actions-------------------------------- */
			if(strlen($_POST['btnsubmit']) > 0)
			{
				$this->retainValues($_POST);
				$post = $_POST;
				$post['birth'] = $this->view->birth;
				$post['lastname'] = $this->view->lastname;
				$post['firstname'] = $this->view->firstname;
				$post['street'] = $this->view->street;
				$post['zip'] = $this->view->zip;
				$post['patcity'] = $this->view->patcity;
				$post['pattel'] = $this->view->pattel;
				$post['pathandy'] = $this->view->pathandy;
				$post['cntpers1name'] = $cntpers1name;
				$post['cntpers2name'] = $cntpers2name;
				$post['hausarzt_details'] = str_replace("<br/>", "\n", $this->view->hausarzt_details);
				$post['vworkers'] = $this->view->vworkers;
				$post['assigneds'] = $this->view->assigneds;
				$post['pflegedienst_details'] = str_replace("<br/>", "\n", $this->view->pflegedienst_details);
				$post['pharmacy_details'] = str_replace("<br/>", "\n", $this->view->pharmacy_details);
				$post['healthinsurance_company'] = $this->view->healthinsurance_company;
				$post['healthinsurance_versnr'] = $this->view->healthinsurance_versnr;
				$post['diagnosis'] = $this->view->diagnosis;
				$post['therapy'] = $this->view->therapy;
				$post['angehorige'] = $_POST['angehorige'];
		
				$this->generatePdfNew(3, $post, 'Stammblatt8', "stammblatt8_pdf.html");
			}
		}
		
		public function sapvfb42Action()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$ipid = Pms_CommonData::getIpid($decid);
			
			/* ######################################################### */
			$isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);
		
			if(!$isclient)
			{
				$this->_redirect(APP_BASE . "overview/overview");
			}
			/* ######################################################### */
		
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
			$tm = new TabMenus();
			$this->view->tabmenus = $tm->getMenuTabs();
		
			$this->view->frmb4class = "active";
		
			//$parr = $patientmaster->getMasterData($decid, 0);
			//Patient details
			$parr = $patientmaster->get_patientMasterData();
			$this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'];
			$this->view->street = $parr['street1'];
			$this->view->zip = $parr['zip'] . " " . $parr['city'];
			$this->view->telephone = $parr['phone'];
			$this->view->mobile = $parr['mobile'];
			$this->view->bdate = $patientinfo['birthd'];
			$familydoc_id = $parr['familydoc_id'];
		
			if($parr['sex'] == 1)
			{
				$this->view->male = "checked='checked'";
			}
		
			if($parr['sex'] == 2)
			{
				$this->view->female = "checked='checked'";
			}
		
			$ref = Doctrine::getTable('PatientReferredBy')->find($parr['referred_by']);
			if($ref)
			{
				$refarray = $ref->toArray();
				if($refarray['referred_name'] == trim("Hausarzt"))
				{
					$fd = new FamilyDoctor();
					$fdarr = $fd->getFamilyDoc($familydoc_id);
					if(count($fdarr) > 0)
					{
		
						$this->view->refarray = $fdarr[0]['first_name'] . " " . $fdarr[0]['last_name'] . ", " . $fdarr[0]['street1'] . ", " . $fdarr[0]['zip'] . " " . $fdarr[0]['city'] . ", " . $fdarr[0]['phone_practice'];
					}
				}
				else
				{
					$this->view->refarray = $refarray['referred_name'];
				}
			}
		
			$epid = Pms_CommonData::getEpidFromId($decid);
			$this->view->epid = $epid;
			
			$isadmin = 0;
			if($logininfo->usertype == 'SA' || $logininfo->usertype == 'CA')
			{
				$isadmin = '1';
			}
			// Teamname of client
			$cl = new Client();
			$clarr = $cl->getClientDataByid($logininfo->clientid);
			$this->view->teamname = $clarr[0]['team_name'];
			
			//Last Location	
			$lc = new Locations();
			$locationsdata = $lc->getLocations($logininfo->clientid, 0);
			$locType = $lc->checkLocationsClientByType($logininfo->clientid, 6);
			
			foreach($locationsdata as $locationdata)
			{
				$locdata[$locationdata['id']] = $locationdata;
			}
			//var_dump($locdata); exit;
			if($locType)
			{
				$pc = new ContactPersonMaster();
				$pcps = $pc->getPatientContact($ipid, false);
			}
			
			$loca = new PatientLocation();
			$locaarray = $loca->getPatientLocations($ipid);
			
			if ($locaarray) {
				$last_location = end($locaarray);				
			}
			
			if($locdata[$last_location['location_id']]['location_type'] != '5')
			{
				if(substr($last_location['location_id'], 0, 4) == '8888' && strlen($last_location['location_id'] > 4))
				{
					$this->view->last_location = 'bei Kontaktperson '.substr($last_location['location_id'], -1).' (' . $pcps[substr($last_location['location_id'], -1)-1]['cnt_last_name'] . ($pcps[substr($last_location['location_id'], -1)-1]['cnt_first_name'] != '' ? ', ' . $pcps[substr($last_location['location_id'], -1)-1]['cnt_first_name']: '' ) . ')';
				}
				else 
				{
					$this->view->last_location = $locdata[$last_location['location_id']]['location'];
				}
			}
			else 
			{
				$this->view->last_location = '';
			}
			
			//get stations			
			if(!empty($last_location['station']))
			{
				$loc_stations = new LocationsStations();
				$last_location_station = $loc_stations->getLocationsStationsById($logininfo->clientid, false, $last_location['station']);
				$this->view->last_location = $this->view->last_location . ' - ' . $last_location_station[0]['station'];
			}
			//var_dump($this->view->last_location); exit;
		
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($parr['ipid']);
		
			$this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
			$this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
			
			$isdicharged = PatientDischarge::isDischarged($decid);
			$this->view->isdischarged = 0;
			if($isdicharged)
			{
				$this->view->isdischarged = 1;
			}			
			
			//Patient stage data
			$pms = new PatientMaintainanceStage();
			$pat_pmsinfo = $pms->getLastpatientMaintainanceStage($parr['ipid']);
			//var_dump($pat_pmsinfo);exit;
			$stage = array();
			if($pat_pmsinfo)
			{
				$stage[] = $pat_pmsinfo[0]['stage'];
				/*if($pat_pmsinfo[0]['horherstufung'] == 1)
				{
					$this->view->beatragt = 'checked="checked"';
				}*/
			}
			$this->view->pflegestufe = $stage;
			//ispc 1872 - this ignores the form and uses from stammdaten
			if (isset($pat_pmsinfo[0]['stage'])) {
				$this->view->pflegeversicherung  = $pat_pmsinfo[0]['stage'];
				$this->view->horherstufung  = $pat_pmsinfo[0]['horherstufung'];
				$this->view->erstantrag  = $pat_pmsinfo[0]['erstantrag'];
			
			} else {
				$this->view->pflegeversicherung = null;
				$this->view->horherstufung  = null;
				$this->view->erstantrag  = null;
			}
			
			$_post = $_POST;
			$_post['teamname'] = $this->view->teamname;
			$_post['last_location'] = $this->view->last_location;
			if($this->getRequest()->isPost())
			{
				$this->generatePdfNew(3, $_post, 'SAPVF_B42', "sapvf_b42pdf.html");
			}
		}
		

		
    /**
     * WL Assessment
     * ISPC-2070
     */		
		
    private function _wlassessment_GatherDetails( $wlassessment_id = null)
    {
        //this works only with ipid
        if (empty($this->ipid)) {
            return;
        }
        
        //formular
        if ( ! empty($wlassessment_id)) {
            $entity  = new WlAssessment();
            $saved = $entity->getTable()->findOneByIdAndIpid($wlassessment_id, $this->ipid);
            $saved_formular = empty($saved) ? array() : $saved->toArray();
            $saved_formular['wlassessment_id'] = (int)$saved_formular['id'];
        }
        //TODO for some subforms... if no $wlassessment_id then get values from last formular?
        

        $allowed_formular_date = []; // this are NOT validated on submit... cause we validate nothing...
        $findFallsOfIpid = PatientReadmission::findFallsOfIpid($this->ipid);
        foreach ($findFallsOfIpid as $fall) {
            $allowed_formular_date[] = [
                'from' => ! empty($fall['admission']['date']) ? date("Y-n-j", strtotime($fall['admission']['date'])) : '', // this is for html-js
                'from_ID' => ! empty($fall['admission']['id']) ? $fall['admission']['id'] : '', //this next2 are used below for fetch dgp
                'from_date' => ! empty($fall['admission']['date']) ? $fall['admission']['date'] : '',
                
                'till' => ! empty($fall['discharge']['date']) ? date("Y-n-j", strtotime($fall['discharge']['date'])) : '',
                'till_ID' => ! empty($fall['discharge']['id']) ? $fall['discharge']['id'] : '',
                'till_date' => ! empty($fall['discharge']['date']) ? $fall['discharge']['date'] : '',
                
            ];
        }
        $saved_formular["__allowed_formular_date"] = $allowed_formular_date;
        
        
        
        $Artificial_exits_values = //kunstliche
        $Nationality_values = //stastszugehorigkeit
        $Excretion_values =
        $Port_values =
        $Contact_Person_values =
        $saved_Religion =
        $saved_Marital_status =
        $saved_Vigilance =
        array();
        
        $entity = new PatientOrientation();
        $saved = $entity->findByIpid($this->ipid);
        $saved_Orientation = $saved ? array('orientation'=>array_column($saved, 'orientation')) : array();
        
        
        $entity = new PatientMobility2();
        $saved = $entity->findByIpid($this->ipid);
        $saved_Mobility2 = $saved ? array('selected_value' => array_column($saved, 'selected_value')) : array();
        
        $entity = new PatientPort();
        $saved = $entity->findByIpid($this->ipid);
        $saved_Port = $saved ? array('port' => array_column($saved, 'port')) : array();
        
        $entity =  new ContactPersonMaster();
        $saved = $entity->getPatientContact($this->ipid);
        $entity->beautifyName($saved);
        $Contact_Person_values = $saved;
        
        $saved_PatientAcp = array();
        $entity = new PatientAcp();
        $saved = $entity->getByIpid( array($this->ipid) );
        foreach($saved[$this->ipid] as $row) {
            $saved_PatientAcp[$row['division_tab']] =  $row;
        }
        
        $saved_PatientFamilyDoctor = array();
        if ($this->_patientMasterData['familydoc_id'] > 0) {
            $entity = new FamilyDoctor();
            $saved_PatientFamilyDoctor = $entity->getTable()->find($this->_patientMasterData['familydoc_id'], Doctrine_Core::HYDRATE_ARRAY);
            FamilyDoctor::beautifyName($saved_PatientFamilyDoctor);
        }
        
        $entity = new PatientSpecialists();
        $saved = $entity->get_patient_specialists($this->ipid, true);
        $saved_PatientSpecialists = ! empty($saved) ? $saved : array();
        PatientSpecialists::beautifyName($saved_PatientSpecialists);
        
        $entity = new PatientPflegedienste();
        $saved = $entity->gatAllPatientPflegedienstes($this->ipid);
        $saved_PatientPflegediensts = ! empty($saved) ? $saved : array();
        PatientPflegedienste::beautifyName($saved_PatientPflegediensts);
        
        
        $entity = new Symptomatology();
        //@TODO: write your own NEW getPatientSymptpomatologyLast
        $saved = $entity->getPatientSymptpomatologyLast($this->ipid, 1);
        $saved_PatientSymptpomatologyLast = ! empty($saved) ? $saved : array();
        
        
        $entity = new PatientHospizverein();
        $saved = $entity->findOneByIpid($this->ipid);
        $saved_PatientHospizverein = ! empty($saved) ? $saved : array();
        
        
        
        //page1
        $entity = new PatientDiagnosis();
        $saved = $entity->getAllDiagnosis($this->ipid);
        $saved_PatientDiagnosis =  ! empty($saved[$this->ipid]) ? $saved[$this->ipid] : array();
        
        $entity = new PatientAnlage33a();
        $saved = $entity->findByIpid($this->ipid);
        $saved_PatientAnlage33a = array();
        if ( ! empty($saved)) {
            $saved_PatientAnlage33a = array(
                'selected_value'=> array_column($saved, 'selected_value'),
                'comment' => reset(array_filter(array_column($saved, 'comment'), 'trim'))
            );
        }
        
        
        $saved = $this->getPatientMasterData('PatientHealthInsurance');
        if (empty($saved)) {
            $entity = new PatientHealthInsurance();
            $saved = $entity->getPatientHealthInsurance($this->ipid);
        }
        $saved_PatientHealthInsurance = ! empty($saved) ? reset($saved) : array();
        //         $saved_PatientHealthInsurance = $this->findKeyInPatientMasterData('patient_hi_data');
        //         familydoc_id
        
        
        
        $patient_readmission_ID = 0;
        $form_type = 'adm';
        if (empty($saved_formular['formular_date'])) {
            //use the latest dgp .. from the current fall
            $last_fall = end($saved_formular['__allowed_formular_date']);
            $patient_readmission_ID = $last_fall['from_ID'];
           
        } else {
            
            $saved_formular_datetime = strtotime($saved_formular['formular_date'] . ' '. $saved_formular['start_time']);
            
            foreach ($saved_formular['__allowed_formular_date'] as $fall) {
    	        
    	        $admissionDate = empty($fall['from_date']) ? 0 : strtotime($fall['from_date']);
    	        $dischargeDate = empty($fall['till_date']) ? 0 : strtotime($fall['till_date']);
    	        
    	        if ( empty($dischargeDate) && $admissionDate <= $saved_formular_datetime) {
    	            //current fall, is active,
        	        $patient_readmission_ID = $fall['from_ID'];
        	        break 1;
        	            	    
        	    } else if ($admissionDate <= $saved_formular_datetime && $saved_formular_datetime <= $dischargeDate) {
        	        $patient_readmission_ID = $fall['from_ID'];
        	        break 1;
        	    } else {
        	        //error_day_notinrange
        	    }
    	    }
        }
        $saved_DgpKern = Doctrine_Core::getTable('DgpKern')->findOneByIpidAndFormTypeAndPatientReadmissionId($this->ipid, $form_type, $patient_readmission_ID, Doctrine_Core::HYDRATE_ARRAY);
        if ( ! empty($saved_DgpKern)) {
            $saved_DgpKern['begleitung'] = explode(',', $saved_DgpKern['begleitung'] );
        }
        
        //page2
        $stam = new Stammdatenerweitert();
        
        $stamarr = $stam->getStammdatenerweitert($this->ipid);
        if ($stamarr) {
        
            $stamarr = $stamarr[0];
        
            $Artificial_exits_values = array(
                'kunstliche' => explode(',', $stamarr['kunstliche']),
                'kunstlichemore' => $stamarr['kunstlichemore']
            );
        
            $Nationality_values = array(
                'stastszugehorigkeit' => $stamarr['stastszugehorigkeit'],
            	'anderefree' => $stamarr['anderefree'],
            	'2ndstastszugehorigkeit' => $stamarr['2ndstastszugehorigkeit'],
                '2ndanderefree' => $stamarr['2ndanderefree'],
            	'dolmetscher' => $stamarr['dolmetscher'],
            );
        
            $Excretion_values = explode(',', $stamarr['ausscheidung']);
        
            $saved_Marital_status = $stamarr['familienstand'];
        
            $saved_Vigilance = $stamarr['vigilanz'];
        }
        
        $entity = new PatientReligions();
        $saved = $entity->getTable()->findOneBy('ipid', $this->ipid, Doctrine_Core::HYDRATE_ARRAY);
        $saved_Religion = ! empty($saved) ? $saved : array();
        
        
        $entity = new PatientRemedies();
        $saved = $entity->get_remedies($this->ipid);
        $saved_Remedies = ! empty($saved) ? array_column($saved, 'remedies') : array();
        
        //page3
        
        

		$current_ms_arr = PatientMaintainanceStage::getLastpatientMaintainanceStage($this->_patientMasterData['ipid']);
        $saved_PatientMaintainanceStage = ! empty($current_ms_arr) ? $current_ms_arr[0] : array();
//          dd($saved_PatientMaintainanceStage);
        
        
        //page4
        
        $saved_WoundDocumentation = array();
        if ( ! empty($saved_formular['wound_documentation_id'])) {
            $entity = new WoundDocumentation();
            $saved = $entity->getTable()->findOneByIdAndIpid($saved_formular['wound_documentation_id'], $this->ipid, Doctrine_Core::HYDRATE_ARRAY);
            $saved_WoundDocumentation = ! empty($saved) ? $saved : array();
            $saved_WoundDocumentation['w_type'] = ! empty($saved_WoundDocumentation['w_type']) ? explode(',', $saved_WoundDocumentation['w_type']) : array();
        }
        
        
//         $saved_PatientKarnofsky = array();
//         if ( ! empty($saved_formular['patient_karnofsky_id'])) {
//             $entity = new PatientKarnofsky();
//             $saved = $entity->getTable()->findOneByIdAndIpid($saved_formular['patient_karnofsky_id'], $this->ipid, Doctrine_Core::HYDRATE_ARRAY);
//             $saved_PatientKarnofsky = ! empty($saved) ? $saved : array(); 
//         }

        
        $entity = new PatientDrugPlanAllergies();
        $saved = $entity->findByIpid($this->ipid); 
        $saved_Alergies = ! empty($saved) ? reset($saved) : array();
        
        
        
        
        //page5
        $entity = new PatientExpectedSymptoms();
        $saved = $entity->findByIpid($this->ipid);
        $saved_PatientExpectedSymptoms = array();
        if ( ! empty($saved)) {
            $saved_PatientExpectedSymptoms = array(
                'selected_value'=> array_column($saved, 'selected_value'),
                'comment' => reset(array_filter(array_column($saved, 'comment'), 'trim'))
            );
        }
                
        $entity = new PatientHospiceCertification();
        $saved = $entity->findByIpid($this->ipid);
        $saved_PatientHospiceCertification = ! empty($saved) ? reset($saved) : array();
        
        
        $entity = new PatientPsychooncological();
        $saved = $entity->findByIpid($this->ipid);
        $saved_PatientPsychooncological = ! empty($saved) ? reset($saved) : array();
        
        
        
        //page6
        
        $entity  = new PatientChildMourning();
        $saved = $entity->findByIpid($this->ipid);
        $saved_PatientChildMourning = ! empty($saved) ? reset($saved) : array();
        
        
        $entity  = new PatientSpiritualAttitude();
        $saved = $entity->findByIpid($this->ipid);
        $saved_PatientSpiritualAttitude = array(); //TODO change array structure
        if ( ! empty($saved)) {
            $saved_PatientSpiritualAttitude = array(
                'selected_value'=> array_column($saved, 'selected_value'),
                'comment' => reset(array_filter(array_column($saved, 'comment'), 'trim'))
            );
        }
        
        
        $entity  = new PatientDivergentAttitude();
        $saved = $entity->findByIpid($this->ipid);
        $saved_PatientDivergentAttitude = array(); //TODO change array structure
        if ( ! empty($saved)) {
            $saved_PatientDivergentAttitude = array(
                'selected_value'=> array_column($saved, 'selected_value'),
                'comment' => reset(array_filter(array_column($saved, 'comment'), 'trim'))
            );
        }
        
        $entity  = new PatientGeneralPractitionerInitial();
        $saved = $entity->findByIpid($this->ipid);
        $saved_PatientGeneralPractitionerInitial = array(); //TODO change array structure
        if ( ! empty($saved)) {
            $saved_PatientGeneralPractitionerInitial = array(
                'selected_value'=> array_column($saved, 'selected_value'),
                'comment' => reset(array_filter(array_column($saved, 'comment'), 'trim'))
            );
        }
        
        
        $entity  = new PatientNextContactBy();
        $saved = $entity->findByIpid($this->ipid);
        $saved_PatientNextContactBy = array();
        if ( ! empty($saved)) {
            $saved_PatientNextContactBy = array(
                'selected_value'=> array_column($saved, 'selected_value'),
                'comment' => reset(array_filter(array_column($saved, 'comment'), 'trim'))
            );
        }
         
        
        //page7
        $entity  = new PatientCloseContact();
        $saved = $entity->findByIpid($this->ipid);
        $saved_PatientCloseContact = array();
        if ( ! empty($saved)) {
            $saved_PatientCloseContact = array(
                'selected_value'=> array_column($saved, 'selected_value'),
                'comment' => reset(array_filter(array_column($saved, 'comment'), 'trim'))
            );
        }
        
        
        
        
        // 'values' is the current in stammtatem or whatever, others are boxes values
        $saved_values = array(
            'formular' => $saved_formular,
        
            '_page_1' => array(
                'PatientDiagnosis'          => $saved_PatientDiagnosis, 
                'PatientHealthInsurance'    => $saved_PatientHealthInsurance,
                'PatientDgpKern'            => $saved_DgpKern,
                'PatientAnlage33a'          => $saved_PatientAnlage33a,
            ),
        
            '_page_2' => array(
                'Contact_Persons'   => $Contact_Person_values,
                'Patient_ACP'       => $saved_PatientAcp,
                'Family_Doctor'     => $saved_PatientFamilyDoctor,
                'Specialists'       => $saved_PatientSpecialists,
                'Religion'          => $saved_Religion,
                'Marital_status'    => $saved_Marital_status,
                'Nationality'       => $Nationality_values,
                'Remedies'          => $saved_Remedies,
            ),
        
            '_page_3' => array(
                'Vigilance'             => $saved_Vigilance,
                'Orientation2'          => $saved_Orientation,
                'Mobility2'             => $saved_Mobility2,
                'PatientPflegediensts'  => $saved_PatientPflegediensts,
                'Artificial_exits'      => $Artificial_exits_values,
                'Excretion'             => $Excretion_values,
                'Port'                  => $saved_Port,
                'PatientMaintainanceStage' => $saved_PatientMaintainanceStage,
            ),
        
            '_page_4' => array(
                
                'Wound_Type' => $saved_WoundDocumentation,
                'Wound_Localization' => $saved_WoundDocumentation,
                
//                 'PatientKarnofsky' => $saved_PatientKarnofsky,
                'PatientDgpKern'            => $saved_DgpKern,
                
                'Alergies'=> $saved_Alergies,
            ),
        
            '_page_5' => array(
                'PatientSymptpomatology'        => $saved_PatientSymptpomatologyLast,
                'PatientHospizverein'           => $saved_PatientHospizverein,
                'PatientExpectedSymptoms'       => $saved_PatientExpectedSymptoms,
                'PatientHospiceCertification'   => $saved_PatientHospiceCertification,
                'PatientPsychooncological'      => $saved_PatientPsychooncological,
            ),
        
            '_page_6' =>array(
        
                'PatientChildMourning'              => $saved_PatientChildMourning,
                'PatientSpiritualAttitude'          => $saved_PatientSpiritualAttitude,
                'PatientDivergentAttitude'          => $saved_PatientDivergentAttitude,
                'PatientGeneralPractitionerInitial' => $saved_PatientGeneralPractitionerInitial,
                'PatientNextContactBy'              => $saved_PatientNextContactBy,
            ),
        
            '_page_7' => array(
                'PatientCloseContact'   => $saved_PatientCloseContact,
            )
        );
        
        return $saved_values;
    }
	
	/**
	 * WL Assessment
     * ISPC-2070
     * needs fn _wlassessment_GatherDetails()
	 */	
    public function wlassessmentAction() 
    {
        
        if (empty($this->ipid)) {
            $this->redirect(APP_BASE . 'error/previlege');
            exit;
        }
        
        $ipid = $this->ipid;
        $client =  new Client();
        $client_data = $client->findOneById($this->clientid);
        
        $frm = new ExtraForms();
        $clientForms = $frm->get_client_forms($this->logininfo->clientid);
        
        $modules =  new Modules();
        $clientModules = $modules->get_client_modules($this->logininfo->clientid);
        
        $form = new Application_Form_WlAssessment(array(
            '_patientMasterData'    => $this->_patientMasterData,
            '_block_name'           => 'WlAssessment',
            '_clientForms'          => $clientForms,
            '_clientModules'        => $clientModules,
            '_client'               => $client_data,  
        ));
        
        
        $request = $this->getRequest();
        
        if ( ! $request->isPost()) {
            
            $wlassessment_id = $this->getRequest()->getParam('wlassessment_id');
            
            $saved_values = $this->_wlassessment_GatherDetails($wlassessment_id);
            
          	$savdiagno = $saved_values['_page_1']['PatientDiagnosis'];
          	$a_diagno = array();
          	
          	$abb = "'HD','ND'";
          	if($clientModules['81'])
          	{
          		$abb .= ",'HS'";
          	}
          	$dg = new DiagnosisType();
          	$darr = $dg->getDiagnosisTypes($this->logininfo->clientid, $abb);
          	
          	$comma = ",";
          	$ipidval = "'0'";
          	
          	if(is_array($darr))
          	{
          		foreach($darr as $key => $val)
          		{
          			$ipidval .= $comma . "'" . $val['id'] . "'";
          			$comma = ",";
          		}
          	}
          	
          	foreach($savdiagno as $kr=>$vr)
          	{
          		$a_diagno[] = $vr;
          	}
          	
          	/*ISPC - 2364 - sorted by user */
          	$pdiaord = PatientDiagnoOrderTable::getInstance()->findDiagnoOrder($ipid);
          	//RWH - ISPC-950
          	//sort by icd
          	if(empty($pdiaord))
          	{
          		$a_diagno = $this->array_sort($a_diagno, 'icd_primary', SORT_ASC);
          		$a_diagno = array_values($a_diagno);
          	
          		//sort by type
          		foreach($darr as $k_diag_type => $v_diag_type)
          		{
          			foreach($a_diagno as $k_diag => $v_diag)
          			{
          				if($v_diag_type['id'] == $v_diag['diagnosis_type_id'])
          				{
          					$a_diagno_sorted[] = $v_diag;
          				}
          			}
          		}
          		//RWH end
          	}
          	else
          	{
          		$a_diagno = array_column($a_diagno, null, 'id');
          		$pdorder = $pdiaord[0]['diagno_order'];

          		$diagnaddother = array_diff(array_keys($a_diagno), $pdorder);
          		$diagnremoveother = array_diff($pdorder, array_keys($a_diagno));
          			
          		if($diagnaddother)
          		{
          			$pdorder = array_merge($pdorder, $diagnaddother);
          		}
          			
          		if($diagnremoveother)
          		{
          			$pdorder = array_diff($pdorder, $diagnremoveother);
          		}
          			
          		$a_diagno_sorted = [];
          		foreach ($pdorder as $pdid) {
          			$a_diagno_sorted[] = $a_diagno[$pdid];
          		}
          	}
          	//$a_diagno = $a_diagno_sorted;
          	//TODO-3049 Lore 03.04.2020
          	if(!empty($a_diagno_sorted)){
          	    $a_diagno = $a_diagno_sorted;
          	}
          	//.
          	
          	$a_diagno = array_column($a_diagno, null, 'id');
          	
          	$saved_values['_page_1']['PatientDiagnosis'] = $a_diagno;
          	
            $form->create_form_wl_assessment($saved_values);
            
            //TODO move to populate
            //$form->populate($options);
            
            //long live php > 5.3 empty(eval)
            //param page is sent on redirect - 10 lines below
            if ( is_null($request->getParam('page'))) {
                
                $this->_helper->flashMessenger->clearMessages('ErrorMessages');
                $this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');
    
                $this->_helper->flashMessenger->clearMessages('SuccessMessages');
                $this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');
            }
            
            
            
        } elseif ($request->isPost()) {
            
        	$post = $request->getPost();
            $form->create_form_wl_assessment($post);
                       
           
            if ( 1 || $form->isValid($post)) // no validation is implemented
            {
                
                $wlassessment  = $form->save_form_wl_assessment($this->ipid, $post);
                $this->_helper->flashMessenger->addMessage( $this->translate('message_info_suc'),  'SuccessMessages');
                
                $page = (int)$post['_page_1']['formular']['wlassessment_current_page'];
                
                switch($post['formular']['button_action']) {
                
                    case 'save' :
                
                        $wlassessment_id = 0;
                        if ($wlassessment instanceof WlAssessment) {
                           $wlassessment_id = $wlassessment->id;
                        }
                        $this->redirect(APP_BASE . 'patientformnew/wlassessment?id=' . $_REQUEST['id'] . "&wlassessment_id=" . $wlassessment_id . "&page=". $page );
                        
                        exit;
                        
                        break;
                
                    case 'print_pdf' :
                        
//                         $wlassessment_id = 0;
//                         if ($wlassessment instanceof WlAssessment) {
//                             $wlassessment_id = $wlassessment->id;
//                         }
//                         $saved_values = $this->_wlassessment_GatherDetails($wlassessment_id);
                        
                        $form->populate($post); //TODO check and remove this line
                        
                        $form->removeDisplayGroup('form_actions');
                        $form->removeDecorator('Form');
                        $form->removeSubForm('tabs_navi');
                        $form->removeSubForm('form_actions');
                
                
                        //save canvas as image for pdf
                        //TODO check dompdf bugfixes4svg and print as real svg 
                        //post['canvas_container'] is added on tab-change
                        $canvas_container = (reset($post['canvas_container']));
                        //get from post, 
                        $canvas_container = ! empty($canvas_container) ? $canvas_container : $post['_page_4']['Wound_Localization']['previous_w_localisation'];
                        
                        $tmp_file = $this->temporary_image_create($canvas_container, 'base64', 'human-huge');
                
                
                        //create medication2 block for print
                        $medicationSettings = $this->_medicationSettings();
                        $htmlform_medication = Pms_Template::createTemplate(
                            array_merge($medicationSettings, array( 'medication_block'  => $post['medication_block'])),
                            'templates/contact_form_pdf_medication.phtml'
                        );
                        //process form to remove or add block that are loaded via ajax
                        /**
                         * all the main subforms
                         * formular_details
                            patient_details
                            PatientDiagnosis
                            formular_reason
                            PatientAnlage33a
                            PatientHealthInsurance
                            PatientDgpKern
                            Contact_Persons
                            Patient_ACP
                            Family_Doctor
                            Specialists
                            Marital_status
                            Nationality
                            Religion
                            Remedies
                            Vigilance
                            Orientation2
                            Mobility2
                            maintenancestage
                            PatientPflegediensts
                            PatientLocation
                            Artificial_exits
                            Excretion
                            Port
                            Wound_Type
                            Wound_Localization
                            PatientDgpKern
                            Medications
                            Alergies
                            PatientSymptpomatology
                            PatientExpectedSymptoms
                            PatientHospizverein
                            PatientHospiceCertification
                            PatientPsychooncological
                            PatientChildMourning
                            PatientSpiritualAttitude
                            PatientDivergentAttitude
                            formular_details
                            PatientGeneralPractitionerInitial
                            PatientNextContactBy
                            PatientCloseContact
                            formular_details
                         * 
                         */
                        
                        
                        $remov_option_from_print_selectbox_options = array(
                            $this->translate('pleaseselect'),
                            $this->translate('please select'),
                        );
                        
                        $s1  = $form->getSubForms(); //s1 = pages = tabs
                         
                        foreach ($s1 as $subform) {
                            
                            //main form is grouped into tabs = pages = $subform
                            
                            $subform->removeDecorator('Fieldset');//remove div id=page-%i%
                            $subform->removeDecorator('HtmlTag');//remove div id=page-%i%
                            
                            $s2 = $subform->getSubForms();
                            foreach ($s2 as $sub_subform) {
                                //each pages = $subform, is grouped into fieldsets = 1 block = $sub_subform
                                
                                switch ($sub_subform->getName()) {
                                    
                                    case "Medications":
                                        
                                        //this block is made in the form via ajax
                                        //Medications block add
                                        $sub_subform->addElement('note', 'print_medis', array(
                                            'value'  => $htmlform_medication,
                                            'escape' => false,
                                            'decorators' => array(
                                                'ViewHelper'
                                            ),
                                        ));
                                        
                                        $sub_subform->removeDecorator('HtmlTag');//remove div.Medications2_holder_div
                                        $sub_subform->removeDecorator('Fieldset');//remove Medikamente:
                                        
                                        break;
                                        
                                    
                                    case "Contact_Persons":
                                    case "Specialists":
                                    case "PatientPflegediensts":
                                        //this contain multiple blocks of same structure, remove the main decorator
                                        
                                        
                                        $child_block = $sub_subform->getSubForms();
                                        
                                        $cntids = 0;
                                        foreach ($child_block as $child) {
                                            //add the id of the parent to his childrens
                                            if ($decorator = $child->getDecorator('Fieldset')) {
                                                
                                                $old_class = $decorator->getOption('class');
                                                $decorator->setOption('class', 'one_'.$sub_subform->getName() . ' '. $old_class);
                                                
                                                $old_id = $decorator->getOption('id');
                                                $old_id = empty($old_id) ? $cntids++ : $old_id;
                                                $decorator->setOption('id', $sub_subform->getName() . '_'. $old_id);
                                                
                                            }
                                            
                                        }
                                    
                                        $sub_subform->removeDecorator('Fieldset');
                                        $sub_subform->removeDecorator('HtmlTag');
                                        break;
                                        
                                }
                
                                $sub_subform_Elements = $sub_subform->getElements();
                                foreach ( $sub_subform_Elements as $element) {
                              	      
                                    //remove 'Please Seelect',Auswahl,'bitte wählen'
                                    if ($element->getType() == 'Zend_Form_Element_Select') {
                                        
                                        $listOptions = $element->getMultiOptions();
                                        $label = $listOptions[$element->getValue()];

                                        if (in_array($label, $remov_option_from_print_selectbox_options)) {
                                            //$element->setValue("NULL"); 
                                            // you can remove this 
                                            $sub_subform->removeElement($element->getName());
                                        }

                                        
                                    }
                  	      
                                    switch ($element->getName()) {
                                        
                                        case "human_canvas_holder":
                                            //add human body as image
                                            $element->setValue('<img src="'. $tmp_file . '" />');
                                            break;
                                            
                                        case "addnew_contactperson":
                                        case "addnew_specialist":
                                        case "addnew_diagnosis":
                                        case "addnew_patientpflegedienst":
                                            //remove buttons for ajax/add new 
                                            $sub_subform->removeElement($element->getName());
                                            break;
                                        
                                    }
                                }
                                 
                            }
                        }
                
                        
                        $today_date = date('d.m.Y');
                        $nice_name_epid = $this->_patientMasterData['nice_name_epid'];
                
                
                        
                        $html_form  = $form->__toString();
                        
                
//                        $html_form =  $this->html_prepare_dompdf($html_form);
                       $html_form =  Pms_CommonData::html_prepare_dompdf($html_form);
                       

                       $this->view->app_path = APPLICATION_PATH; // this is used for the css => app_path/../public/css/page-css/wlassessment_pdf.css
                       $this->view->wlassessment_form = $html_form; //this is the body of the pdf
                       
                       $html_print = $this->view->render("templates/wlassessment_pdf.phtml");
                       //TODO-3589 Ancuta 12.11.2020
                        ob_get_clean ( );
                        //--
                        $options = new Options();
                        $options->set('isRemoteEnabled', false);
                        $dompdf = new Dompdf($options);
                
                        //                 $dompdf = new Dompdf(array('isRemoteEnabled'=> false));
                        $dompdf->loadHtml($html_print);
                        // (Optional) Setup the paper size and orientation
                        $dompdf->setPaper('A4', 'portrait');
                
                        
                        

                        $dompdf->set_option("enable_php",true);
                        $dompdf->set_option('defaultFont', 'times');
                        $dompdf->set_option("fontHeightRatio",0.90);
                        
                        // Render the HTML as PDF
                        //TODO-3589 Ancuta 12.11.2020
                        ob_clean();
                        //--
                        $dompdf->render();
                        
                        
                        // add the footer
                        //TODO move this footer in to a config class, along with default font ant others
                        $canvas = $dompdf->get_canvas();
                        
                        $footer_font_family = $dompdf->getFontMetrics()->get_font("helvetica");
                        $footer_font_size = 10;
                        
                        $footer_text = "Seite: 1 von 1 | Datum: {$today_date} | {$nice_name_epid}"; // for align purpose i've used this
                        $text_width = $dompdf->getFontMetrics()->getTextWidth($footer_text, $footer_font_family, $footer_font_size);
                        $footer_text = "Seite: {PAGE_NUM} von {PAGE_COUNT} | Datum: {$today_date} | {$nice_name_epid}"; //footer text
                        
                        
                        $canvas->page_text(
                            ($canvas->get_width() - $text_width)/2, 
                            $canvas->get_height()-30, 
                            $footer_text,
                            $footer_font_family, 
                            $footer_font_size, 
                            array(0,0,0));
                        
                        

                       $output = $dompdf->output();
                
                        // Output the generated PDF to Browser
                       $dompdf->stream($this->translate(WlAssessment::PATIENT_FILE_TITLE), array('Attachment' => true));
//                        $dompdf->stream();
                       
                       $result = $this->dompdf_ToFTP($output, $this->translate(WlAssessment::PATIENT_FILE_TITLE));
                        
                        if ($result !== false) {
                            
                            $encrypted = Pms_CommonData::aesEncryptMultiple(array(
                                'title' => $this->translate(WlAssessment::PATIENT_FILE_TITLE),
                                'file_name' => $result,
                                'file_type' => 'PDF',
                            ));
                            
                            
                            $entity = new PatientFileUpload ();
                            //bypass triggers, we will use our own
                            $entity->triggerformid = null;
                            $entity->triggerformname = null;
                            
                            $entity->title = $encrypted['title'];
                            $entity->ipid = $this->ipid;
                            $entity->file_name = $encrypted['file_name']; //$post['fileinfo']['filename']['name'];
                            $entity->file_type = $encrypted['file_type'];
                            $entity->recordid = $wlassessment->id;
                            $entity->tabname = WlAssessment::PATIENT_FILE_TABNAME;
                            
                            
                            $entity->system_generated = "0"; //TODO this should be 0?
                            $entity->save();
                            
                            if ($wlassessment instanceof WlAssessment) {
                                $wlassessment->patient_file_id = $entity->id;
                                $wlassessment->save();
                            }
                            
                        }
                        
                        exit;
                        
                
                }
                
                
//                 $this->redirect(APP_BASE . 'patientformnew/wlassessment?id=' . $_REQUEST['id'] . "&page=". $page );
              
                
            } else {
                
                $this->_helper->flashMessenger->addMessage( $this->translate('message_info_err'),  'ErrorMessages');
                
                //tabs errors
                $error = $form->getMessages();
                foreach ($error as $k=>$page_err) {          

                    if ($form->getSubForm($k) !== null)
                        $this->_helper->flashMessenger->addMessage( sprintf($this->translate("You have errors on tab %s"), $form->getSubForm($k)->getLegend()),  'ErrorMessages');
                }
                

                $form->create_form_wl_assessment($post);
                //TODO populate with dinamicaly created fields
                $form->populate($post);
                
            }
        }
        
        
        
        
        
        
        //@todo : move messages in layout
        $this->view->SuccessMessages = array_merge(
            $this->_helper->flashMessenger->getMessages('SuccessMessages'),
            $this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
        );
        $this->view->ErrorMessages = array_merge(
            $this->_helper->flashMessenger->getMessages('ErrorMessages'),
            $this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
        );
        
        $this->_helper->flashMessenger->clearMessages('ErrorMessages');
        $this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');
        
        $this->_helper->flashMessenger->clearMessages('SuccessMessages');
        $this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');
        
        $this->view->form = $form;
        $this->view->enc_id = $this->enc_id;
        
        
    }
    
    // ISPC-2564 Andrei 20.05.2020 // Maria:: Migration ISPC to CISPC 08.08.2020
    private function _patientrass_GatherDetails( $patient_rass_id = null)
    {
        //this works only with ipid
        if (empty($this->ipid)) {
            return;
        }
        
        //formul
        if ( ! empty($patient_rass_id)) {
            $entity  = new PatientRass();
            $saved = $entity->getTable()->findOneByIdAndIpid($patient_rass_id, $this->ipid);
            $saved_form = empty($saved) ? array() : $saved->toArray();
            //$saved_form['patient_rass_id'] = (int)$saved_form['id'];
        }
        //var_dump($saved_form); exit;
        return $saved_form;
    }

   
    // ISPC-2564 Andrei 20.05.2020 NOT FINISHED!!!
    public function patientrassAction()
    {
        if (empty($this->ipid)) {
            $this->redirect(APP_BASE . 'error/previlege');
            exit;
        }
        $ipid = $this->ipid;
        $clientid = $this->logininfo->clientid;
        $userid = $this->logininfo->userid;
        
        $client =  new Client();
        $client_data = $client->findOneById($this->clientid);
        
        $form = new Application_Form_PatientRass(array(
            '_patientMasterData'    => $this->_patientMasterData,
            '_block_name'           => 'RASS',
            '_client_data'			=> $client_data
        ));
        
        //$form = new Application_Form_PatientRass();
        
        
        if($_REQUEST['msid'])
        {
            $form_id = $_REQUEST['msid'];
        }
        
        //last saved values
        $saved_values = $this->_patientrass_GatherDetails($form_id);
        //print_r($saved_values); exit;
//         dd($saved_values);
        
        $form->create_form_patient_rass($saved_values);
        
        $request = $this->getRequest();

        if ( ! $request->isPost()) {
           /*  $patient_rass_id = $this->getRequest()->getParam('patient_rass_id');
            
            $saved_values = $this->_patientrass_GatherDetails($patient_rass_id); */
        }
        elseif ($request->isPost())
        {
            $post = $request->getPost();
            //$form->create_form_patient_rass($post);
            $form->populate($post);
            
            if ( 1 || $form->isValid($post)) // no validation is implemented
            {
                $patient_rass  = $form->save_form_patient_rass($this->ipid, $post);
                $this->_helper->flashMessenger->addMessage( $this->translate('message_info_suc'),  'SuccessMessages');
              
                switch($post['button_action']) {
                    
                    case 'save' :
                        
                        $patient_rass_id = 0;
                        if ($patient_rass instanceof PatientRass) {
                            $patient_rass_id = $patient_rass->id;
                            if($patient_rass_id)
                            {
                            	$custcourse = new PatientCourse();
                            	$custcourse->ipid = $ipid;
                            	$custcourse->course_date = date("Y-m-d H:i:s", time());
                            	$custcourse->course_type = Pms_CommonData::aesEncrypt(PatientRass::PATIENT_COURSE_TYPE);
                            	$custcourse->course_title = Pms_CommonData::aesEncrypt(PatientRass::PATIENT_COURSE_TITLE);
                            	$custcourse->user_id = $userid;
                            	$custcourse->tabname = Pms_CommonData::aesEncrypt(PatientRass::PATIENT_COURSE_TABNAME);
                            	$custcourse->recordid = $patient_rass_id;
                            	$custcourse->done_name = Pms_CommonData::aesEncrypt(PatientRass::PATIENT_COURSE_TABNAME);
                            	$custcourse->done_id = $patient_rass_id;
                            	$custcourse->done_date = date("Y-m-d H:i:s", time());
                            	$custcourse->save();
                            		
                            }
                        }
                       
                        $this->redirect(APP_BASE . 'patientformnew/patientrass?id=' . $this->enc_id. "&msid=" . $patient_rass_id );

                        exit;
                        
                        break;
                        
                    case 'print_pdf' : //TREBUIE SI PDF?
                        
                        //                         $wlassessment_id = 0;
                        //                         if ($wlassessment instanceof WlAssessment) {
                        //                             $wlassessment_id = $wlassessment->id;
                        //                         }
                        //                         $saved_values = $this->_wlassessment_GatherDetails($wlassessment_id);
                        
                        $form->populate($post); //TODO check and remove this line
                        
                        $form->removeDisplayGroup('form_actions');
                        $form->removeDecorator('Form');
                        $form->removeSubForm('tabs_navi');
                        $form->removeSubForm('form_actions');
                        
                        //save canvas as image for pdf
                        //TODO check dompdf bugfixes4svg and print as real svg
                        //post['canvas_container'] is added on tab-change
                        $canvas_container = (reset($post['canvas_container']));
                        //get from post,
                        $canvas_container = ! empty($canvas_container) ? $canvas_container : $post['_page_4']['Wound_Localization']['previous_w_localisation'];
                        
                        $tmp_file = $this->temporary_image_create($canvas_container, 'base64', 'human-huge');
                        
                        $remov_option_from_print_selectbox_options = array(
                            $this->translate('pleaseselect'),
                            $this->translate('please select'),
                        );
                        
                        $today_date = date('d.m.Y');
                        $nice_name_epid = $this->_patientMasterData['nice_name_epid'];
                        
                        
                        
                        $html_form  = $form->__toString();
                        
                        
                        //                        $html_form =  $this->html_prepare_dompdf($html_form);
                        $html_form =  Pms_CommonData::html_prepare_dompdf($html_form);
                        
                        
                        $this->view->app_path = APPLICATION_PATH; // this is used for the css => app_path/../public/css/page-css/wlassessment_pdf.css
                        $this->view->patientrass_form = $html_form; //this is the body of the pdf
                        
                        $html_print = $this->view->render("templates/patientrass_pdf.phtml");
                        
                        
                        $options = new Options();
                        $options->set('isRemoteEnabled', false);
                        $dompdf = new Dompdf($options);
                        
                        //                 $dompdf = new Dompdf(array('isRemoteEnabled'=> false));
                        $dompdf->loadHtml($html_print);
                        // (Optional) Setup the paper size and orientation
                        $dompdf->setPaper('A4', 'portrait');
                        
                        
                        
                        
                        $dompdf->set_option("enable_php",true);
                        $dompdf->set_option('defaultFont', 'times');
                        $dompdf->set_option("fontHeightRatio",0.90);
                        
                        // Render the HTML as PDF
                        $dompdf->render();
                        
                        
                        // add the footer
                        //TODO move this footer in to a config class, along with default font ant others
                        $canvas = $dompdf->get_canvas();
                        
                        $footer_font_family = $dompdf->getFontMetrics()->get_font("helvetica");
                        $footer_font_size = 10;
                        
                        $footer_text = "Seite: 1 von 1 | Datum: {$today_date} | {$nice_name_epid}"; // for align purpose i've used this
                        $text_width = $dompdf->getFontMetrics()->getTextWidth($footer_text, $footer_font_family, $footer_font_size);
                        $footer_text = "Seite: {PAGE_NUM} von {PAGE_COUNT} | Datum: {$today_date} | {$nice_name_epid}"; //footer text
                        
                        
                        $canvas->page_text(
                            ($canvas->get_width() - $text_width)/2,
                            $canvas->get_height()-30,
                            $footer_text,
                            $footer_font_family,
                            $footer_font_size,
                            array(0,0,0));
                        
                        
                        
                        $output = $dompdf->output();
                        
                        // Output the generated PDF to Browser
                        $dompdf->stream($this->translate(PatientRass::PATIENT_FILE_TITLE), array('Attachment' => true));
                        //                        $dompdf->stream();
                        
                        $result = $this->dompdf_ToFTP($output, $this->translate(PatientRass::PATIENT_FILE_TITLE));
                        
                        if ($result !== false) {
                            
                            $encrypted = Pms_CommonData::aesEncryptMultiple(array(
                                'title' => $this->translate(PatientRass::PATIENT_FILE_TITLE),
                                'file_name' => $result,
                                'file_type' => 'PDF',
                            ));
                            
                            
                            $entity = new PatientFileUpload ();
                            //bypass triggers, we will use our own
                            $entity->triggerformid = null;
                            $entity->triggerformname = null;
                            
                            $entity->title = $encrypted['title'];
                            $entity->ipid = $this->ipid;
                            $entity->file_name = $encrypted['file_name']; //$post['fileinfo']['filename']['name'];
                            $entity->file_type = $encrypted['file_type'];
                            $entity->recordid = $rass->id;
                            $entity->tabname = PatientRass::PATIENT_FILE_TABNAME;
                            
                            
                            $entity->system_generated = "0"; //TODO this should be 0?
                            $entity->save();
                            
                            if ($rass instanceof PatientRass) {
                                $rass->patient_file_id = $entity->id;
                                $rass->save();
                            }
                            
                        }
                        
                        exit;
                        break;
                }
            }
            else
            {
                $this->_helper->flashMessenger->addMessage( $this->translate('message_info_err'),  'ErrorMessages');
                
                $form->create_form_patient_rass($post);
                //TODO populate with dinamicaly created fields
                $form->populate($post);
            }
        }
        
        
        //@todo : move messages in layout
        $this->view->SuccessMessages = array_merge(
            $this->_helper->flashMessenger->getMessages('SuccessMessages'),
            $this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
            );
        $this->view->ErrorMessages = array_merge(
            $this->_helper->flashMessenger->getMessages('ErrorMessages'),
            $this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
            );
        
        $this->_helper->flashMessenger->clearMessages('ErrorMessages');
        $this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');
        
        $this->_helper->flashMessenger->clearMessages('SuccessMessages');
        $this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');
        
        $this->view->form = $form;
        $this->view->enc_id = $this->enc_id;
        
    }
    
 





      
    /**
     * 
     * @deprecated, use Pms_CommonData::getMedicationSettings
     */
    private function _medicationSettings ()
    {
        


        $modules = new Modules();
        $individual_medication_time_m = $modules->checkModulePrivileges("141", $this->logininfo->clientid);
        if ($individual_medication_time_m) {
            $individual_medication_time = 1;
        } else {
            $individual_medication_time = 0;
        }
         
         
        
        if ($individual_medication_time == 1) {
            //get time scchedule options
            $client_med_options = MedicationOptions::client_saved_medication_options($this->logininfo->clientid);
            $time_blocks = array('all');
            foreach($client_med_options as $mtype=>$mtime_opt){
                if($mtime_opt['time_schedule'] == "1"){
                    $time_blocks[]  = $mtype;
                    $timed_scheduled_medications[]  = $mtype;
                }
            }
        }
        else
        {
            $timed_scheduled_medications = array("actual","isivmed"); // default
            $time_blocks = array("actual","isivmed"); // default
        }
        
        $patient_time_scheme  = PatientDrugPlanDosageIntervals::get_patient_dosage_intervals($this->ipid, $this->logininfo->clientid, $time_blocks);
         
        if($patient_time_scheme['patient']){
            foreach($patient_time_scheme['patient']  as $med_type => $dos_data)
            {
                if($med_type != "new"){
                    $set = 0;
                    foreach($dos_data  as $int_id=>$int_data)
                    {
                        if(in_array($med_type,$patient_time_scheme['patient']['new'])){
                             
                            $interval_array['interval'][$med_type][$int_id]['time'] = $int_data;
                            $interval_array['interval'][$med_type][$int_id]['custom'] = '1';
                             
                            $dosage_settings[$med_type][$set] = $int_data;
                            $set++;
                             
                            $dosage_intervals[$med_type][$int_data] = $int_data;
                        }
                        else
                        {
                             
                             
                            $interval_array['interval'][$med_type][$int_id]['time'] = $int_data;
                            $interval_array['interval'][$med_type][$int_id]['custom'] = '0';
                            $interval_array['interval'][$med_type][$int_id]['interval_id'] = $int_id;
                             
                            $dosage_settings[$med_type][$set] = $int_data;
                            $set++;
                             
                            $dosage_intervals[$med_type][$int_data] = $int_data;
                        }
                    }
                }
            }
        }
        else
        {
            foreach($patient_time_scheme['client']  as $med_type=>$mtimes)
            {
                 
                $inf=1;
                $setc= 0;
                foreach($mtimes as $int_id=>$int_data){
                     
                    $interval_array['interval'][$med_type][$inf]['time'] = $int_data;
                    $interval_array['interval'][$med_type][$inf]['custom'] = '1';
                    $dosage_settings[$med_type][$setc] = $int_data;
                    $setc++;
                    $inf++;
                     
                    $dosage_intervals[$med_type][$int_data] = $int_data;
                }
            }
        }
        
        
        
        
        
        //UNIT
        $medication_unit = MedicationUnit::client_medication_unit($this->logininfo->clientid);
        $client_medication_extra = array();
        foreach($medication_unit as $k=>$unit){
            $client_medication_extra['unit'][$unit['id']] = $unit['unit'];
        }
         
        //DOSAGE FORM
        $medication_dosage_forms = MedicationDosageform::client_medication_dosage_form($this->logininfo->clientid);
         
        foreach($medication_dosage_forms as $k=>$df){
            $client_medication_extra['dosage_form'][$df['id']] = $df['dosage_form'];
        }
        
        //TYPE
        $medication_types = MedicationType::client_medication_types($this->logininfo->clientid);
        foreach($medication_types as $k=>$type){
            $client_medication_extra['type'][$type['id']] = $type['type'];
        }
         
        //INDICATIONS
        $medication_indications = MedicationIndications::client_medication_indications($this->logininfo->clientid);
         
        foreach($medication_indications as $k=>$indication){
            $client_medication_extra['indication'][$indication['id']]['name'] = $indication['indication'];
            $client_medication_extra['indication'][$indication['id']]['color'] = $indication['indication_color'];
        }
        
        // Packaging - ISPC-2176
        $packaging_array = PatientDrugPlanExtra::intubated_packaging();
        
        
        return array(
            'dosage_intervals'  => $dosage_intervals,
            'interval_array'    => $interval_array,
            'timed_scheduled_medications'   => $timed_scheduled_medications,
            'client_medication_extra'       => $client_medication_extra,
            'packaging_array' => $packaging_array,
        );
        
    }

    

    //clean filename and extension
    private function clean_filename( $filename =  "ispc_download.pdf")
    {
        //sanitize filename
        $filename = Pms_CommonData::filter_filename($filename, true);
        	
        if ( ($ext = strtolower( substr($filename, strlen($filename) - 4, 4))) != '.pdf') {
            $filename .= '.pdf';
        }
        	
        return $filename;
    }
    
    
    /**
     * 
     * @deprecated, use Pms_CommonData::dompdf_ToFTP
     */
    public function dompdf_ToFTP($dompdf_output ='', $pdfname = 'ispc_document.pdf'  )
    {
        	
        $legacy_path    = "uploads";
        $is_zipped      = NULL;
        $foster_file    = false;
        $clientid       = NULL;
        $filepass       = NULL;
        
        $pdfname = $this->clean_filename($pdfname);
        
        $temp_folder_pdf = Pms_CommonData::uniqfolder_v2( PDF_PATH , 'dompdf_');
                
        $file_path = $temp_folder_pdf ."/". $pdfname ;
        
        @file_put_contents($file_path, $dompdf_output);
        
        $result =  Pms_CommonData::ftp_put_queue( $file_path , $legacy_path , $is_zipped, $foster_file, $clientid, $filepass);

     
        $file_path_for_db = false;
    
        if ($result !== false) {
            
            $pathinfo = pathinfo($file_path);
            $fulldir = $pathinfo['dirname'];
            $dir = pathinfo($fulldir , PATHINFO_BASENAME);
            
            $file_path_for_db = $dir . "/" . $pdfname;
            
        }
        
        return $file_path_for_db ;
        	
    }
    /*
    //?php echo PUBLIC_PATH;?>/images/<?php if($this->kopf == "1"){ echo "check02.jpg"; }else{ echo "check01.jpg";} ?>" />  krankheitsentsprechend </td>
    */
    /**
     *
     * @deprecated, use Pms_CommonData::html_prepare_dompdf
     */
    function html_prepare_dompdf($html) { // replaces form elements for PDF generating
    
        // define functions used for callbacks
        function radio_check($match) {
            if (stripos ( $match [0], 'checked="checked"' ) !== false) {
                return '<img src="' . PUBLIC_PATH . '/images/radio-selected-btn.jpg"  style="width:12px; margin:2px 2px 0 0;" alt="" />';
            } else {
                return '<img src="' . PUBLIC_PATH . '/images/radio-btn.jpg"  style="width:12px;margin:2px 2px 0 0;"  alt="" />';
            }
        }
        function checkbox_check($match) {
            if (stripos ( $match [0], 'checked="checked"' ) !== false) {
                return '<img src="' . PUBLIC_PATH . '/images/check02.jpg" style="width:12px; margin:2px 2px 0 0;" alt="" />&nbsp;';
            } else {
                return '<img src="' . PUBLIC_PATH . '/images/check01.jpg"  style="width:12px; margin:2px 2px 0 0;" alt="" />&nbsp;'; //ISPC-2157 ANCUTA 05.03.2018 :: added spacing after img - PLEASE CHECK
            }
        }
    
        // match checkboxes
        $checkbox_pat = "/<input.*type=[\"']?checkbox[\"']?.*>/iU";
    
        // match radios
        $radio_pat = "/<input.*type=[\"']?radio[\"']?.*>/iU";
    
        // match all css classes
        //$class_pat = "/class=\".*\"/iU"; // not needed for dompdf
    
        // replace
        $html = preg_replace_callback ( $radio_pat, 'radio_check', $html );
        $html = preg_replace_callback ( $checkbox_pat, 'checkbox_check', $html );
//         $html = str_replace ( DOMAIN, ABSPATH, $html ); // not needed for dompdf

        return $html;
    }
    
    
    
    
    private function _savoir_GatherDetails( $patient_savoir_id = null)
    {
        //one formular / patient
        $entity  = new PatientSavoir();
        $saved = $entity->findOneByIpid($this->ipid); 
        $saved_formular = empty($saved) ? array() : $saved;

        $sav = new SapvVerordnung();
        $savarry = $sav->getSapvVerordnungData($this->ipid);
        $saved_formular['SapvVerordnung'] = $savarry;
        
        return $saved_formular;
    }
    
    /**
     * ISPC-2144
     * @claudiu 05.01.2018
     */
    public function savoirAction()
    {
        //$this->_helper->viewRenderer->setRender('savoir');
        //$this->_helper->viewRenderer->setViewSuffix('phtml');
        
//         $client =  new Client();
//         $client_data = $client->findOneById($this->clientid);
        
//         $frm = new ExtraForms();
//         $clientForms = $frm->get_client_forms($this->logininfo->clientid);
        
        $modules =  new Modules();
        $clientModules = $modules->get_client_modules($this->logininfo->clientid);
        
        $form = new Application_Form_PatientSavoir(array(
            '_patientMasterData'    => $this->_patientMasterData,
            '_block_name'           => 'SAVOIR',
//             '_clientForms'          => $clientForms,
            '_clientModules'        => $clientModules,
//             '_client'               => $client_data,
        ));
        
        //last saved values
        $saved_values = $this->_savoir_GatherDetails($patient_savoir_id);
        
        $form->create_form_patient_savoir($saved_values);
        
        $request = $this->getRequest();
        
        $saved_values = array();
        
        if ( ! $request->isPost()) {

            //TODO move to populate
            //$form->populate($options);
        
        
        } elseif ($request->isPost()) {
        
            $post = $request->getPost();
            
            $form->populate($post);
             
            if ( $form->isValid($post)) // no validation is implemented
            {
        
                $patient_savoir  = $form->save_form_patient_savoir($this->ipid, $post);
                $this->_helper->flashMessenger->addMessage( $this->translate('message_info_suc'),  'SuccessMessages');
        
        
            } else {
        
                $this->_helper->flashMessenger->addMessage( $this->translate('message_info_err'),  'ErrorMessages');
        
//                 //tabs errors
//                 $error = $form->getMessages();
//                 foreach ($error as $k=>$page_err) {
        
//                     if ($form->getSubForm($k) !== null)
//                         $this->_helper->flashMessenger->addMessage( sprintf($this->translate("You have errors on tab %s"), $form->getSubForm($k)->getLegend()),  'ErrorMessages');
//                 }
                
                $form->populate($post);
        
            }
        }
        
        
        //@todo : move messages in layout
        $this->view->SuccessMessages = array_merge(
            $this->_helper->flashMessenger->getMessages('SuccessMessages'),
            $this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
        );
        $this->view->ErrorMessages = array_merge(
            $this->_helper->flashMessenger->getMessages('ErrorMessages'),
            $this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
        );
        
        $this->_helper->flashMessenger->clearMessages('ErrorMessages');
        $this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');
        
        $this->_helper->flashMessenger->clearMessages('SuccessMessages');
        $this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');
        
        $this->view->form = $form;
        $this->view->enc_id = $this->enc_id;
        
       
        
    }
    
    public function rlppatientcontrolAction(){
        
        setlocale(LC_ALL, 'de_DE');
		// language is an array
		$page_lang = $this->translate ( 'rlp_invoice_lang' );
		
		// save a formular
		if ($this->getRequest ()->isPost ()) {

			if ($_POST ['action'] == "save"  || $_POST ['action'] == "save_and_pdf" || $_POST ['action'] == "reset") {
				
				$form_obj = new Application_Form_RlpControl ( array (
						'_patientMasterData' => $this->_patientMasterData,
						'_block_name' => 'rlppatientcontrol' 
				) );
				
				if ($form_obj->validate ( $_POST )) {

 
					
					
					
					if ($_POST ['action'] == "save") {
						$form_obj->insert ( $_POST );
						
					
						// empty the post by using a redirect
						$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ) . "&selected_month=" . $_POST['selected_month'], array (
// 						$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ) . "&selected_month=" . $query_date, array (
								"exit" => true 
						) );
					} elseif ($_POST ['action'] == "save_and_pdf") {
						$form_obj->insert ( $_POST );
						// print the pdf also
						// the print is performed at the end of this function, so we have all the data
					} elseif ($_POST ['action'] == "reset") {
						$form_obj->reset ( $_POST );
						// print the pdf also
						// the print is performed at the end of this function, so we have all the data
					}
				}
			}
		}
		
		// new instance
		$patientmaster = new PatientMaster ();
		
		// get the actions of this client
		$actionslist_by_id_arr = array (); // used later for display
		
		$client_products = array();
		$client_products = RlpProductsTable::find_client_products($this->logininfo->clientid);
		
		$rlp_invoice = new RlpInvoices();
		$actionslist = $rlp_invoice->rlp_products();
 
		foreach ( $actionslist as $row=>$action ) {
			// not grouped
			$action_without_group [$this->translate ( 'no_group' )] [$action] = $action;
			$actionslist_by_id_arr [$action]['action_name'] = $page_lang['products'][$action.'_label'];
			if(!empty($client_products[$action])){
                $actionslist_by_id_arr [$action]['action_name'] .= ' - '.$client_products[$action];
			}
		}
		
		$this->view->action_actions_arr = array_merge ( $action_with_group, $action_without_group );
		
		
		// Get patients active days- create months 
		$conditions['periods'][0]['start'] = '2009-01-01';
		$conditions['periods'][0]['end'] = date('Y-m-d');
		$conditions['client'] = $this->logininfo->clientid;
		$conditions['ipids'] = array( $this->ipid);
		
		//beware of date d.m.Y format here
		$patient_days = Pms_CommonData::patients_days($conditions);
		//get number of days in each month + start/end day START
		
		$patient_active_days = array();
		$patient_active_days = $patient_days[ $this->ipid]['real_active_days'];
		if(!empty($patient_days[ $this->ipid]['hospital']['real_days_cs']) && !empty($patient_days[ $this->ipid]['real_active_days'])){
    		$patient_active_days = array_diff($patient_days[ $this->ipid]['real_active_days'],$patient_days[ $this->ipid]['hospital']['real_days_cs']);
		}

		foreach($patient_days[ $this->ipid]['active_periods'] as $k_period => $v_period)
		{
			$last_active = end($patient_days[ $this->ipid]['active_periods']);
			if($v_period['end'] == $last_active['end'])
			{
				$v_period['end'] = date('Y-m-d', strtotime($v_period['end']));
			}
			
			$months = Pms_CommonData::get_period_months($v_period['start'], $v_period['end'], 'Y-m');
			if(empty($patient_active_months))
			{
				$patient_active_months = array();
			}
			$patient_active_months = array_merge($patient_active_months, $months);
		}
		
		$patient_active_months = array_values($patient_active_months);
		
		foreach($patient_active_months as $k_month => $v_month)
		{
			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
			}
		
			$months_details[$v_month]['start'] = $v_month . "-01";
			$months_details[$v_month]['days_in_month'] = $month_days;
			$months_details[$v_month]['end'] = $v_month . '-' . $month_days;
		
			$month_select_array[$v_month] = $v_month;
		}
		
		// the selected month from get/post
		$query_date = isset ( $_REQUEST ['selected_month'] ) ? date ( "Y-m", strtotime ( $_REQUEST ['selected_month'] ) ) : $patient_active_months[0];
		$this->view->selected_month = $query_date;
		$selected_month = $query_date;
		
		
		// TODO-1493 Leistungsnachweis Rheinland Pfalz BUG 
		if(count($patient_active_months) == 1 && $query_date != $patient_active_months[0]){
			$query_date = $patient_active_months[0];
		}
		//-  END CHange for todo-1493 12.04.2018
		
		
		
		
		
		
		
		$selected_month_details ['start'] = date ( 'Y-m-01', strtotime ( $query_date ) ); // First day of the month.
		$selected_month_details ['end'] = date ( 'Y-m-t', strtotime ( $query_date ) ); // Last day of the month.
		
		$selected_month_details ['minDate'] = date ( '01.m.Y', strtotime ( $query_date ) ); // datapicked First day of the month.
		$selected_month_details ['maxDate'] = date ( 't.m.Y', strtotime ( $query_date ) ); // datapicked Last day of the month.
		$this->view->selected_month_details = $selected_month_details;
		
		$period_days_arr = $patientmaster->getDaysInBetween ( $selected_month_details ['start'], $selected_month_details ['end'] );
		
		array_walk($period_days_arr, function(&$value) {
			$value = date('d.m.Y', strtotime($value));
		});
		
 
		$this->view->selected_month_arr = $month_select_array;
		
		// days of the week 1-7 in locale
		$this->view->days_of_week_arr = Pms_CommonData::getDaysOfWeek ();
		
		// get patients healthinsurance.. in $this->_patientMasterData is on an icon
		$phelathinsurance = new PatientHealthInsurance ();
		$healthinsu_array = $phelathinsurance->get_patients_healthinsurance_number ( $this->ipid );
		
		
		// get patient sapv
		$sapv_obj = new SapvVerordnung();
		$patient_sapv_array = array();
		$patient_sapv_array = $sapv_obj->get_patients_sapv_periods(array($this->ipid ));
 
		$patient_sapvdays = array();
		foreach($patient_sapv_array as $pipid => $sdata){
			foreach($sdata as $sid=>$s_details){
			    if($s_details['status'] != 1 || ($s_details['status'] == "1" && $s_details['status_denied'] == "partially" )){
    				foreach($s_details['days'] as $k=>$sday){
    					
    					if(in_array($sday,$patient_active_days)){
    						$patient_sapvdays[] = $sday;
    					}
    				}
			    }
			}
		}
		
		// check if saved data - to create reset 
		
		
		
		// get client details
		$client_data = new Client ();
		$client_details = $client_data->getClientDataByid ( $this->logininfo->clientid );
		$client_details = $client_details [0];
		
		
		$nice_days_digits = array ();
		$nice_days_letter = array ();
		$empty_days = array ();
		
		$nice_days_digits ['first_column'] = array (
				"Leistungen <br/>".$selected_month,
				'attributes' => array (
						"rowspan" => "2",
						"class" => "first_column",
						"width" => "200px",
						"style" => "background-color:lightgray",
						"escaped"=>false 
				) 
		);
		
		foreach ( $period_days_arr as $day ) {
			
			$nice_days_digits [] = array (
					date ( "j", strtotime ( $day ) ),
					'attributes' => array (
							"width" => "33px",
							"style" => "text-align:center;" 
					) 
			);
			
			$nice_days_letter_cell = array (
					strftime ( '%a', strtotime ( $day ) ),
					'attributes' => array (
							"style" => "text-align:center;" 
					) 
			);
			
			$isweekend = date ( "N", strtotime ( $day ) ) >= 6 ? 1 : 0;
			
			$empty_days_cell = array (
					'attributes' => array (
							"data-day" => date ( "d.m.Y", strtotime ( $day ) ),
							"data-weekday" => date ( "N", strtotime ( $day ) ),
							"data-isweekend" => $isweekend,
							"width" => "33px", 
							"escaped"=>false
					) 
			);
			
			if ($isweekend) {
				$empty_days_cell ['attributes'] ['class'] .= ' isweekend';
				$nice_days_letter_cell ['attributes'] ['class'] .= ' isweekend';
			}
			
			$empty_days [] = $empty_days_cell;
			
			$nice_days_letter [] = $nice_days_letter_cell;
		}
		
		$this->view->count_days_in_month = count ( $period_days_arr );
		$nice_days_digits ['last_column'] = array (
				"#",
				'attributes' => array (
						"rowspan" => "2",
						"width" => "33px" 
				) 
		);
		$nice_days_digits ['attributes'] = array (
				"class" => "header_row",
				"rowspan" => "2" 
		);
		$nice_days_letter ['attributes'] = array (
				"class" => "head_shortday" 
		);
		
		
		$this->view->pname = $this->_patientMasterData['nice_name'];
		$this->view->pateint_birth= $this->_patientMasterData['birthd'];
		
		
		$max_cells_number = count ( $empty_days ) + 2; // maximum cell in the action row
		
		$top_table = array ();
		$top_table_cell_number = 5;
		$this->view->top_table = $top_table;
		
		
		
		
		$this->view->top_table = $top_table;
		
		$table_header = array ();
		$table_header [] = $nice_days_digits;
		$table_header [] = $nice_days_letter;
		$data_group_actions = array();
 
		$data_group = array ();
		
		$group_id_counter = 0;
		$data_arr = array ();
		$data_arr ['first_column'] = "-";
		$data_arr = array_merge ( $data_arr, $empty_days );
		$data_arr ['last_column'] = "-";
		
		// add the actions row
		$data_arr ['first_column'] = $data_group_actions;
		$data_arr ['last_column'] = "";
		$data_arr ['attributes'] = array (
				"class" => "action_row",
				"data-groupid" => $group_id_counter,
				"data-actionid" => null,
				"data-startdate" => null,
				"data-interval" => null,
				"data-interval_options" => null,
				"data-selected_hour" => null,
				"nobr" => "true" 
		);
		$data_row_first_row_original = $data_group [] = $data_arr;
		   
		$group_id_counter ++;
		
		$this->view->blank_data_group = array_merge ( array (
				"header" 
		), $data_group );
		
	 
		$rlp_control = new RlpControl ();
		$patient_period_days_arr[$this->ipid] = $period_days_arr;
		//only saved actions
		$rlp_saved_products = array();
		$rlp_saved_products = $rlp_control->saved_rlp_controlsheets ( array($this->ipid), $patient_period_days_arr,"form");
		
		$this->view->has_saved_data = 0 ;
		if(!empty($rlp_saved_products)){
			$this->view->has_saved_data = 1;
		}
		
		
		
		// saved or set by system
		$rlp_products = array();
		$rlp_products = $rlp_control->get_rlp_controlsheets ( array($this->ipid), $patient_period_days_arr,"form");

	
		
		if ($this->getRequest ()->isPost ()) {
		    if ($_POST ['action'] == "generate_pdf") {
		        $rlp_products = array();
		        
		        foreach($_POST['form']  as  $row=>$row_data ){
		            foreach($row_data as $rdate => $rvalue){
		                
		                if($rvalue!=0){
	       	                $rlp_products[$this->ipid][$row][$rdate]['qty'] = $rvalue; 
    		                $rlp_products[$this->ipid][$row][$rdate]['value'] = $rvalue; 
		                }
		            }
		        }
		    }
		}
		
		if( ! empty($rlp_products[$this->ipid])){
		 	foreach($rlp_products[$this->ipid] as $product_id=>$product_data){
		 		foreach($product_data as $date => $date_vals){
			 		$actionslist_by_id_arr [$product_id]['data'][$date] =  $date_vals;  
		 		}
		 	}
		}
		
		
		$this->view->saved_data_groups = $rlp_products; // this is the final array with the 
		                                                     
		// create array with the rows of the table
		$saved_data_rows = array ();
		$pdf_print_as_group = array ();
		$groupid = 0 ;
			
		$pdf_print_as_group [$groupid] = array ();
		
// 		$data_row_first_row = $data_row_first_row_original;
		
// 		$data_row_first_row_empty = $data_row_first_row_original;
// 		$data_row_first_row_empty ['attributes'] ['data-groupid'] = $groupid;
// 		$data_row_first_row_empty ['attributes'] ['class'] = "empty_spacer_row";
// 		$data_row_first_row_empty ['attributes'] ['nobr'] = "false";
// 		$data_row_first_row_empty ['first_column'] [0] = "";
		
// 		$pdf_print_as_group [$groupid] [] = $saved_data_rows [] = $data_row_first_row_empty;
		$pdf_print_as_group [$groupid] [] = $saved_data_rows;
		
		$pdf_print_as_group [$groupid] [$groupid] = $saved_data_rows [$groupid] = array ();
		
		foreach ( $actionslist_by_id_arr as $product_id => $product_data ) {
			
			$data_row_first_row ['attributes'] ['data-actionid'] = $product_id;
			
			$first_column = array (
					array (
							'<div><br/>'.$actionslist_by_id_arr [$product_id] ['action_name'].'</div>',
							"attributes" => array (
									"class" => "first_column first_column_action",
									 "escaped" => 0
							) 
					) 
			);
			$last_column = array ();
			
			$data_row_actions = $empty_days;
			
			$last_column_counter = 0;
			
			foreach ( $data_row_actions as $k => &$oneday ) {
				if(in_array($oneday ['attributes'] ['data-day'],$patient_sapvdays) ){
					
					if (isset ( $product_data ['data'] [ date ( "Y-m-d", strtotime ( $oneday ['attributes'] ['data-day'] ) )] )) {
						
						$oneday[0] = '&nbsp;<br/><input type="checkbox" class="products" data-day="'.date ( "Y-m-d", strtotime ( $oneday ['attributes'] ['data-day'] ) ).'"  name="form['.$product_id.']['.date ( "Y-m-d", strtotime ( $oneday ['attributes'] ['data-day'] ) ).']" value="1" checked="checked" />';
						$oneday ['attributes'] ['class'] .= " hasValue hasSapv";
						$oneday ['attributes'] ['value'] .= 1;
						
						$last_column_counter = $last_column_counter + 1;
						
					} else{
						$oneday[0] = '&nbsp;<br/><input type="checkbox" class="products" data-day="'.date ( "Y-m-d", strtotime ( $oneday ['attributes'] ['data-day'] ) ).'" name="form['.$product_id.']['.date ( "Y-m-d", strtotime ( $oneday ['attributes'] ['data-day'] ) ).']" value="1"  />';
					}
				} else {
					$oneday[0] = '';
					$oneday ['attributes'] ['class'] .= " hasValue noSapv";
					$oneday ['attributes'] ['value'] .= 0;
						
				}
			}
			$last_column = array (
					array (
							'<span>&nbsp;<br/>'.$last_column_counter.'</span>',
							"attributes" => array (
									"class" => "last_column",
									"escaped" => 0
							)
					)
			);
			
			
			
			
			$data_row_attributes = array (
					'attributes' => array (
							"class" => "tr_hasValue",
							'data-actionid' => $product_id,
							"nobr" => "true" 
					) 
			);
			
			$pdf_print_as_group [$groupid] [] = $saved_data_rows [] = array_merge ( $first_column, $data_row_actions, $last_column, $data_row_attributes );
		}
		
		// add the group actions row
		$pdf_print_as_group [$groupid] [$groupid] = $saved_data_rows [$groupid] = $data_row_first_row;
		
		// $saved_data_rows[] = $saved_data_row_actions;
			
 
		
		$table_footer = array ();
		
// 		dd(count($saved_data_rows));
		
		$this->view->data_arr = array_merge ( $table_header, $saved_data_rows, $table_footer ); // this are the rows of the table
		$this->view->pdf_print_as_group = $pdf_print_as_group;
		$this->view->pdf_table_header = $table_header;

		
		
		// print a pdf
		if ($this->getRequest ()->isPost ()) {
			if ($_POST ['action'] == "save_and_pdf" || $_POST ['action'] == "generate_pdf") {
				
				$FUCK_tcpdf = array();
				$FUCK_tcpdf[] = array(
						array('attributes'=>array('escaped' => "0"))
				);
		
				$FUCK_tcpdf = $this->view->tabulate($FUCK_tcpdf, array("no_header"=>true, "class"=>"no_border"));
				// print the pdf also
				
				$record_id = $this->generatePdfNew_2017 ( $chk = 0, $post = $this->view, $pdfname = "rlppatientcontrol", $filename = "rlppatientcontrol.html", $extra = array (
						
						// "htmlform" => $this->view->render("patientformnew/sgbvleistungsnachweispdf.html")
						"pdfname" => $this->view->translate ( 'rlppatientcontrol' ) . " (" . mb_convert_encoding ( strftime ( '%B %Y', strtotime ( $query_date ) ), 'utf8' ) . ")" 
				)
				 );
				exit ();
			}
		}
	}
	
	
	//Reklamations-Management  = complaint form ISPC-2157
	public function complaintformAction()
	{
// 		$this->_helper->viewRenderer->setRender('complaintform');
// 		$this->_helper->viewRenderer->setViewSuffix('phtml');
		$logininfo = new Zend_Session_Namespace('Login_Info');
		$clientid = $logininfo->clientid;
		$userid = $logininfo->userid;
			
		$this->enc_id = $_GET['id'];
			
		if (is_null($this->dec_id)) {
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$decid = empty($decid) ? 0 : $decid;
			$this->dec_id = $decid;
		}

		
		if (is_null($this->ipid)) {
			$ipid = Pms_CommonData::getIpid($this->dec_id);
			$ipid = empty($ipid) ? 0 : $ipid;
			$this->ipid = $ipid ;
		}
	
		if (is_null($this->_patientMasterData)) {
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($this->dec_id,1);
			$this->_patientMasterData = $patientmaster->get_patientMasterData();
		}
	
		// patient details
		$patient_data['city'] = $this->_patientMasterData['city'];
		$patient_data['name'] = $this->_patientMasterData['first_name'].' '. $this->_patientMasterData['last_name'];
		$patient_data['street'] = $this->_patientMasterData['street1'];
		$patient_data['address_zip_city'] = $this->_patientMasterData['zip'].' '.$this->_patientMasterData['city'];
		
		$this->view->patient_data = $patient_data;
		//
		$form_labels['infusion_drugs']= array("NaCl 0,9 %","Glucose 5 %");
		$form_labels['infusion_other'] = array("1-Kammer","2-Kammer Beutel","Perfusorspritze / Bolus");
		
		$form_labels['reason']  = array(
				"Kammern sind nicht mischbar",
				"Kammern sind vor der Aktivierung des Beutels bereits gemischt",
				"Partikel sind im Beutel identifizierbar",
				"Es konnte eine Trübung / Verfärbung identifiziert werden",
				"Der Beutel ist undicht / läuft aus",
				"Das Etikett ist falsch / unvollständig bedruckt oder nicht lesbar",
				"Das Infusionsbesteck ist undicht / funktioniert nicht oder ist unvollständig entlüftet",
				"Bei anderen Gründen bitte in Erläuterung eintragen"
		);
		$form_labels['complaint_products']  = array(
			"Tablette/Kapsel/Flüssigkeit zur oralen Einnahme (Bei oraler Medikation fahren Sie mit der Beschreibung des Reklamationshergangs unter 'Erläuterung' fort)",
			'Infusion (inkl. Zubehör)',
			"Injektion (inkl. Zubehör) Bei Injektion fahren Sie mit der Beschreibung des Reklamationshergangs unter 'Erläuterung' fort",
			'1-Kammerbeutel',
			'2-Kammerbeutel',
			'3-Kammerbeutel',
			'Perfusorspritze/Bolus',
			'7-Kammerbeutel (Heptatube)',
			'8-Kammerbeutel (Octatube)',
			'9-Kammerbeutel (Nonatube)',
			'Anderes Infusionsbehältnis '
		);
			
		$form_labels['chamber']  = array(
				"1","2","3","4","5","6","7","8","9"
		);			
		
		/*TODO-2888 Carmen 12.02.2020*/
		$form_labels['preparation']  = array(
				"Ja","Nein"
		);
		/*TODO-2888 Carmen 12.02.2020*/

		//ISPC-2806 Dragos 28.01.2021
		$previleges = new Modules();
		$has249module = $previleges->checkModulePrivileges('249', $logininfo->clientid);
		if ($has249module) {
			$form_labels['complaint_email_to'] = array(
				//dont change indexes unless you know what you are doing
				2 => 'Apotheke am Kreisel',
				3 => 'Eurozyto GmbH',
				1 => 'Sonstige'
			);
		}
		$this->view->has249module = $has249module;
		// -- //
		
		$this->view->form_labels = $form_labels;
		

		
// 		$this->view->form_labels = $form_labels;
		// get all saved files 
		
	
		if( $this->getRequest()->isPost())
		{
			$ap_form = new Application_Form_ComplaintForm();
			
			
			
			if(!empty($_POST['form']['form_date'])){
				$_POST['form']['form_date'] = date("Y-m-d",strtotime($_POST['form']['form_date']));
			}
			$formular_id = empty($_GET['formular_id']) ? 0 : (int)$_GET['formular_id'];
				
				
			if ($formular_id > 0) {
				$_POST['form']['id'] = $formular_id;
			} else{
				$_POST['form']['id'] = 0;
			}
			

			$unique_id = "";
			if( ! empty($_POST['form']['id'])){
			    if($_POST['form']['id'] < 10000){
			        $unique_id  = (10000 + $_POST['form']['id']);
			    } else {
			        $unique_id  = $_POST['form']['id'];
			    }
			}
			$id_str = "";
			if(!empty($unique_id)){
			    $id_str = " ID:".$unique_id.' ';
			}
			
			
			if(isset($_POST['generate_pdf']) && strlen($_POST['generate_pdf']) > 0 ){
				//generate pdf
				$chk = 1;
				
				$post = array();
				$post['form_labels'] = $form_labels;
				$post['form_data'] = $_POST['form'];
				$post['patient_data'] = $patient_data;

				
				$pdfname = "complaintform_pdf"; // used also for tabname
				$filename = "complaintform_pdf.html";
				
				
				
				$FUCK_tcpdf = array();
				$FUCK_tcpdf[] = array(
				    array('attributes'=>array('escaped' => "0"))
				);
				
				$FUCK_tcpdf = $this->view->tabulate($FUCK_tcpdf, array("no_header"=>true, "class"=>"no_border"));
				// print the pdf also
				
				$record_id = $this->generatePdfNew_2017 ( $chk = 0, $post, $pdfname , $filename , $extra = array (
    				    "pdfname" => $this->view->translate ( 'complaintform_name' ) .$id_str. " (" . date("d.m.Y",strtotime($_POST['form']['form_date'])) . ")"
				)
				);
				exit ();
				
				// add to verlauf that form was printed
				
				
			} else {
			    
                if ($ap_form->validate ( $_POST )) {
    				
    				$_POST['userid'] = $userid;
    				
    				if(isset($_POST['save_and_CloseFile_and_sendTodo']) && strlen($_POST['save_and_CloseFile_and_sendTodo']) > 0 ){
    					$_POST['form']['status'] = "closed";
    				}	
    				
    				$saved_data = $ap_form->save_compleiment_form($this->ipid, $_POST);
    	
    				
    				if(empty($id_str) && !empty($saved_data->id)){

    				    $unique_id = "";
				        if($saved_data->id < 10000){
				            $unique_id  = (10000 + $saved_data->id);
				        } else {
				            $unique_id  = $saved_data->id;
				        }
				        
    				    $id_str = "";
    				    if(!empty($unique_id)){
    				        $id_str = " ID:".$unique_id.' ';
    				    }
    				    
    				}
    				
    				//generate pdf
    				$chk = 1; 
    				$post = array();
    				$post['form_labels'] = $form_labels;
    				$post['form_data'] = $_POST['form'];
    				$post['patient_data'] = $patient_data;
					//ISPC-2806 Dragos 28.01.2021
    				if(!empty($_POST['save_and_sendTodo'])) {
    					$post['save_and_sendTodo'] = 1;
						$post['clientid'] = $logininfo->clientid;
					}
					// -- //
    								
    				$pdfname = "complaintform"; // used also for tabname
    				$filename = "complaintform_pdf.html";
    				
    				$record_id = $this->generatePdfNew_2017($chk, $post, $pdfname, $filename,$extra = array (
    							"pdfname" => $this->view->translate ( 'complaintform_name' ) .$id_str. " (" . date("d.m.Y",strtotime($_POST['form']['form_date'])) . ")" 
    				)
    						);
    							
    				$complaintform_lang = $this->view->translate("complaintform_lang");
    
    				
    				$cust = array();
    				$cust['ipid'] = $this->ipid;
    				$cust['course_date'] = date("Y-m-d H:i");
    				$cust['course_type'] = ComplaintForm::PATIENT_COURSE_TYPE;
    				if ($formular_id > 0) {
    					$cust['course_title'] = str_replace("%unique_id", $id_str, $complaintform_lang['verlauf_entry_edited']); //$complaintform_lang['verlauf_entry_edited'];
    				} else{
    					$cust['course_title'] = str_replace("%unique_id", $id_str, $complaintform_lang['verlauf_entry_saved']); //$complaintform_lang['verlauf_entry_saved'];
    				}
    				$cust['tabname'] = "complaintform_save_action";
    				$cust['user_id'] = $userid;
    				$cust['recordid'] = $saved_data->id;
    				$cust['done_name'] = "complaintform";
    				$pc = new PatientCourse();
    				$pc_id_save = $pc->set_new_record($cust);
    				
    				
    				if(isset($_POST['save_and_CloseFile_and_sendTodo']) && strlen($_POST['save_and_CloseFile_and_sendTodo']) > 0 ){
    				
    					$cust = array();
    					$cust['ipid'] = $this->ipid;
    					$cust['course_date'] = date("Y-m-d H:i");
    					$cust['course_type'] = "K";
    					if ($formular_id > 0) {
    						$cust['course_title'] = str_replace("%unique_id", $id_str, $complaintform_lang['verlauf_entry_edited_closed']); //$complaintform_lang['verlauf_entry_edited_closed'];
    					} else{
    						$cust['course_title'] = str_replace("%unique_id", $id_str, $complaintform_lang['verlauf_entry_saved_closed']); //$complaintform_lang['verlauf_entry_saved_closed'];
    					}
    					$cust['tabname'] = ComplaintForm::PATIENT_COURSE_TABNAME;
    					$cust['user_id'] = $userid;
    					$cust['recordid'] = $saved_data->id;
    					$cust['done_name'] = "complaintform";
    					
    					$pc = new PatientCourse();
    					$pc_id_save = $pc->set_new_record($cust);
    				}
    				
    				$cust = array();
    				$cust['ipid'] = $this->ipid;
    				$cust['course_date'] = date("Y-m-d H:i");
    				$cust['course_type'] = "K";
    				$cust['course_title'] =  str_replace("%unique_id", $id_str, $complaintform_lang['verlauf_entry_pdf_was_saved']);
    				$cust['tabname'] = ComplaintForm::PATIENT_COURSE_TABNAME_PDF;
    				$cust['user_id'] = $userid;
    				$cust['recordid'] = $record_id;
    				$cust['done_name'] = "complaintform";
    				$pc = new PatientCourse();
    				$pc_id = $pc->set_new_record($cust);
    
    				
    				$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $this->enc_id);
    				return;
				} else {
				    
				    $ap_form->assignErrorMessages ();
				    if(!empty($_POST['form']['form_date'])){
				        $_POST['form']['form_date'] = date("d.m.Y",strtotime($_POST['form']['form_date']));
				    }
				    $this->view->form_data = $_POST['form'];

				}
			}
	
		}
			
		if( ! $this->getRequest()->isPost() )
		{
			// get all saved forms
			$ComplaintForm_obj = new ComplaintForm();
			$saved_forms = $ComplaintForm_obj->findByIpid($this->ipid);
			$user_obj =new User();
			$users_details = $user_obj->getUserByClientid($clientid,2,true);
			$users_details_fn = $user_obj->getUserByClientid($clientid,3,true);
			
			$this->view->saved_forms  = $saved_forms;
			$this->view->users_details  = $users_details;
			
			$form_rows_data =  array();
			$formular_id = empty($_GET['formular_id']) ? 0 : (int)$_GET['formular_id'];
			
			$form_data['form_date'] = date("d.m.Y");
			$form_data['user_name'] = $users_details_fn[$userid];
			if ($formular_id > 0) {
				
				if($_GET['opt'] =="delete"){
					$ap_form = new Application_Form_ComplaintForm();
					$delete_id = $ap_form->delete_compleiment_form($this->ipid, $formular_id);
				}
				
				$formular_details = $ComplaintForm_obj->get_by_id($formular_id , $this->ipid ) ;
				if(!empty($formular_details)){
					
					$form_data = $formular_details;
					$form_data['form_date'] = date("d.m.Y",strtotime($formular_details['form_date']));
				}
				
				$formular_history = array();
				$ComplaintForm_history_obj = new ComplaintFormHistory();
				$formular_history = $ComplaintForm_history_obj->get_all_by_id($formular_id , $this->ipid ) ;
				$this->view->form_history = $formular_history;  

				
			}  
			$this->view->form_data = $form_data; 
		}
	}
	
	
	public function deletecomplaintformAction(){
		$this->_helper->layout->setLayout('layout_ajax');
		$this->_helper->viewRenderer->setNoRender();
		
		if(!empty($_REQUEST['formlar_id']) && !empty($_REQUEST['id'])){
			
		
			$this->enc_id = $_GET['id'];
			$formular_id = $_GET['formlar_id'];
				
			if (is_null($this->dec_id)) {
				$decid = Pms_Uuid::decrypt($_GET['id']);
				$decid = empty($decid) ? 0 : $decid;
				$this->dec_id = $decid;
			}
			
			
			if (is_null($this->ipid)) {
				$ipid = Pms_CommonData::getIpid($this->dec_id);
				$ipid = empty($ipid) ? 0 : $ipid;
				$this->ipid = $ipid ;
			}
			
			$ap_form = new Application_Form_ComplaintForm();
			$delete_id = $ap_form->delete_compleiment_form($this->ipid, $formular_id);
			$this->redirect(APP_BASE . 'patientformnew/complaintform?id=' . $this->enc_id);
			exit;
			
		}
	}
	
 
	public function patientactionslistAction(){
		$logininfo = new Zend_Session_Namespace('Login_Info');
		$clientid = $logininfo->clientid;
		$userid = $logininfo->userid;
			
		$this->enc_id = $_GET['id'];
			
		if (is_null($this->dec_id)) {
			$decid = Pms_Uuid::decrypt($_GET['id']);
			$decid = empty($decid) ? 0 : $decid;
			$this->dec_id = $decid;
		}
		
		
		if (is_null($this->ipid)) {
			$ipid = Pms_CommonData::getIpid($this->dec_id);
			$ipid = empty($ipid) ? 0 : $ipid;
			$this->ipid = $ipid ;
		}
		
		if (is_null($this->_patientMasterData)) {
			$patientmaster = new PatientMaster();
			$this->view->patientinfo = $patientmaster->getMasterData($this->dec_id,1);
			$this->_patientMasterData = $patientmaster->get_patientMasterData();
		}
		
		##############################################################
		###################### Client settings #######################
		##############################################################
		$sql = 'e.epid, p.ipid, e.ipid,';
		$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		$sql .= "AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') as gender,";
		$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		$sql .= "IF(p.admission_date != '0000-00-00',DATE_FORMAT(p.admission_date,'%d\.%m\.%Y'),'') as day_of_admission,";
		$sql .= "IF(p.birthd != '0000-00-00',DATE_FORMAT(p.birthd,'%d\.%m\.%Y'),'') as birthd,";
		
		
		$patient_days = array();
		$ipid = $this->ipid;
		$conditions['periods'] = array('0' => array('start' => "2008-01-01", 'end' => date("Y-m-d")));
		$conditions['client'] = $clientid;
		$conditions['ipids'] = array($ipid);
		$patient_days = Pms_CommonData::patients_days($conditions,$sql);
		
		$real_active_days= array();
		$admission_periods = array();
		
		foreach($patient_days as $k_ipid => $v_pat_data)
		{
			$real_active_days = $v_pat_data['real_active_days'];
			
			$adm_substitute = 1;
			foreach($v_pat_data['active_periods'] as $period_identification => $period_details)
			{
		
				$admission_periods[$ipid][$adm_substitute ]['start'] = $period_details['start'];
				$admission_periods[$ipid][$adm_substitute ]['end'] = $period_details['end'];
				$admission_ids[$ipid][] = $adm_substitute ;
				$adm_substitute++;
			}
		}
		
		usort($real_active_days, array(new Pms_Sorter(), "_date_compare"));
		$real_active_days = array_values($real_active_days);
		
		$admission_periods = $admission_periods[$ipid];
		$this->view->admission_periods = $admission_periods;

		$sapv_periods = array();
		$patients_sapv_periods = SapvVerordnung::get_patients_sapv_periods(array($ipid));
		$sapv_periods = $patients_sapv_periods[$ipid];
		$this->view->sapv_periods = $sapv_periods;
			

		/* ---------------------------------Get number of days in each month + start/end day  -------------------------------------------------- */
		$period_months = array();
		$period_months = $this->get_period_months($real_active_days[0], end($real_active_days), "Y-m"); // creat months from real active days 

		
		foreach($period_months as $k_month => $v_month)
		{
			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
			}
		
			$months_details[$v_month]['start'] = $v_month . "-01";
			$months_details[$v_month]['days_in_month'] = $month_days;
			$months_details[$v_month]['end'] = $v_month . '-' . $month_days;
		
			$month_select_array[$v_month] = $v_month;
		}
		$this->view->months_periods = $months_details;

		
		
		if( $this->getRequest()->isPost())
		{
			$client = new Client();
			$form_types = new FormTypes();
			$sapvs = new SapvVerordnung();
			$patientmaster = new PatientMaster();
			$sapvverordnung = new SapvVerordnung();
			$hi_perms = new HealthInsurancePermissions();
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
			$pat_diagnosis = new PatientDiagnosis();
			
			$current_period = array();
			if(!empty($_POST['print_period'])){
			        $print_array = explode("_",$_POST['print_period']);
			        $type = $print_array[0]; 
			        $section_id = $print_array[1]; 
			        $current_period['start'] = date('Y-m-d',strtotime($print_array[2])); 
			        $current_period['end'] = date('Y-m-d',strtotime($print_array[3])); 
			 }  
			 
			 if( empty($current_period)){
			 	echo '<div class="err">'.$this->view->translate('please select period for print').'</div> ';
			 	return false;
			 }
			 
			$params = array();
			$ipids = array($ipid);
			$ipids = array_values(array_unique($ipids));

			$patients_period_days = array();
			$patients_period_days[$ipid] = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end'], false,"d.m.Y");
			
			$patients_period_valid_days = array();
			foreach($patients_period_days[$ipid] as $k=>$day ){
				if( in_array($day,$real_active_days)){
					$patients_period_valid_days[$ipid][] = $day;
				}
			}

			$overall_performance_period = array();
			$overall_performance_period[$ipid] = $current_period;
			
			
			$usergroups = new Usergroup();
			$client_usergroups_array = $usergroups->getClientGroups($clientid);
			
			$ug_details = array();
			foreach($client_usergroups_array as $k=>$group_data){
				$ug_details[$group_data['id']] = $group_data;
			}
			$users = new User();
			$client_user_array = $users->getUserByClientid($clientid,0,true,false);
			
			foreach($client_user_array as $k=>$cu)
			{
				$user_array[$cu['id']] = $cu;
				$user_array[$cu['id']]['groupname'] = $ug_details[$cu['groupid']]['groupname'];
				if(strlen($cu['shortname']) >  0){
					$user_array[$cu['id']]['initials'] = $cu['shortname'];
				}
				else
				{
					$user_array[$cu['id']]['initials'] = mb_substr($cu['first_name'], 0, 1, "UTF-8") . "" . mb_substr($cu['last_name'], 0, 1, "UTF-8");
			
				}
			}
			
			//client_details
			$client_details = $client->getClientDataByid($clientid);
			
			//patient HEALTH INSURANCE START
			$healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);
			
			//multiple hi subdivisions && hi subdivisions permissions
			$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
			
			if($divisions)
			{
				foreach($healthinsu_multi_array as $k_hi => $v_hi)
				{
					$hi_companyids[] = $v_hi['companyid'];
				}
			
				$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($hi_companyids);
			}
			
			//patient HEALTH INSURANCE END
				
			$kv_header = array();
			$patient_address = "";
			$hi_name = "";
			$hi_address = "";
			foreach($ipids as $k_ipid => $v_ipid)
			{
				$pat_details = $patient_days[$v_ipid]['details'];
			
				// Kv header for the second page
				$kv_header[$v_ipid]['insurance_company_name'] = $healthinsu_multi_array[$v_ipid]['company_name'];
			
				if(strlen($healthinsu_multi_array[$v_ipid]['kvk_no']) > 0 )
				{
					$kv_header[$v_ipid]['kvnumber'] = $healthinsu_multi_array[$v_ipid]['kvk_no'];
				}
				else
				{
					$kv_header[$v_ipid]['kvnumber'] = $healthinsu_multi_array[$v_ipid]['company']['kvnumber'];
				}
			
				$kv_header[$v_ipid]['insurance_no'] = $healthinsu_multi_array[$v_ipid]['insurance_no'];
				$kv_header[$v_ipid]['insurance_status'] = $healthinsu_multi_array[$v_ipid]['insurance_status'];
			
				$master_user_details = new User();
				$users_details = $master_user_details->getUserDetails($userid); // ??????
			
				$kv_header[$v_ipid]['betriebsstatten_nr'] = $users_details[0]['betriebsstattennummer'];
				$kv_header[$v_ipid]['arzt_nr'] = $users_details[0]['LANR'];
				$kv_header[$v_ipid]['patient_name_address'] = htmlspecialchars($patient_days[$v_ipid]['details']['last_name']) . ", " . htmlspecialchars($patient_days[$v_ipid]['details']['first_name']) . "\n" . htmlspecialchars($patient_days[$v_ipid]['details']['street1']) . "\n" . htmlspecialchars($patient_days[$v_ipid]['details']['zip']) . " " . htmlspecialchars($patient_days[$v_ipid]['details']['city']);
				$kv_header[$v_ipid]['patient_birthdate'] =date("d.m.Y",strtotime($patient_days[$v_ipid]['details']['birthd']));
				$kv_header[$v_ipid]['patient_name'] = htmlspecialchars($patient_days[$v_ipid]['details']['last_name']) . ", " . htmlspecialchars($patient_days[$v_ipid]['details']['first_name']);
				$kv_header[$v_ipid]['patient_address'] = htmlspecialchars($patient_days[$v_ipid]['details']['street1']) . " " . htmlspecialchars($patient_days[$v_ipid]['details']['zip']) . "\n" . htmlspecialchars($patient_days[$v_ipid]['details']['city']);
				$kv_header[$v_ipid]['patient_address'] = htmlspecialchars($patient_days[$v_ipid]['details']['street1']) . " " . htmlspecialchars($patient_days[$v_ipid]['details']['zip']) . "\n" . htmlspecialchars($patient_days[$v_ipid]['details']['city']);
			
			
				//get patient main diagnosis
				$patient_main_diag[$v_ipid] = $pat_diagnosis->get_main_diagnosis($v_ipid, $clientid);
				$patient_data_diagnos[$v_ipid]['main_diagnosis'] = implode(', ', $patient_main_diag[$v_ipid]['icd']);
			}
			
			
			
			// Pateint days
			$all_patients_periods = array();
			$patient_days2locationtypes = array();
			$hospital_days_cs_dmY = array();
			$hospiz_days_cs_dmY = array();
			
			foreach($patient_days as $k_ipid => $patient_data)
			{
				//all patients periods
				$all_patients_periods = array_merge_recursive($all_patients_periods, $patient_data['active_periods']);
			
				//used in flatrate
				if(empty($patient_periods[$k_ipid]))
				{
					$patient_periods[$k_ipid] = array();
				}
			
				array_walk_recursive($patient_data['active_periods'], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$patient_periods[$k_ipid] = array_merge($patient_periods[$k_ipid], $patient_data['active_periods']);
			
				//hospital days cs
				if(!empty($patient_data['hospital']['real_days_cs']))
				{
					$hospital_days_cs_dmY[$k_ipid] = $patient_data['hospital']['real_days_cs'];
					$hospital_days_cs[$k_ipid] = $patient_data['hospital']['real_days_cs'];
					array_walk($hospital_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
			
				//hospiz days cs
				if(!empty($patient_data['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs_dmY[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
					$hospiz_days_cs[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
					array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
			
				//real active days
				if(!empty($patient_data['real_active_days']))
				{
					$active_days_in_period_cs[$k_ipid] = $patient_data['real_active_days'];
					array_walk($active_days_in_period_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
			
				//treatment days
				if(!empty($patient_data['treatment_days']))
				{
					$treatment_days_cs[$k_ipid] = $patient_data['treatment_days'];
					array_walk($treatment_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
			
				//active days
				if(!empty($patient_data['active_days']))
				{
					$active_days[$k_ipid] = $patient_data['active_days'];
					array_walk($active_days[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}
			
				if(empty($hospital_days_cs[$k_ipid]))
				{
					$hospital_days_cs[$k_ipid] = array();
				}
			
				if(empty($hospiz_days_cs[$k_ipid]))
				{
					$hospiz_days_cs[$k_ipid] = array();
				}
			
				$hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);
			}
			$sapv_days_cs = $sapvverordnung->get_period_sapvs($ipids, $overall_performance_period, $hospital_hospiz_days_cs);
			
			
			//get patients discharge dates
			$pat_dis = new PatientDischarge();
			$patients_discharge = $pat_dis->get_patients_discharge($ipids);
			
			$patients_discharge_date = array();
			foreach($patients_discharge as $k_dis => $v_dis)
			{
				$patients_discharge_date[$v_dis['ipid']] = $v_dis['discharge_date'];
			}
			
			
			/*--------------------------------------------------------------------------------*/			
			//PATIENT COURSES V , XT
			/*--------------------------------------------------------------------------------*/			
			$course_shortcuts =array("V","XT");
			$pc_obj = new PatientCourse();
			$course_days = $pc_obj->get_patients_period_course_by_shortcuts($ipids, $course_shortcuts, $patients_discharge_date, $overall_performance_period,true);
		
			$extra_details  = array();
			foreach($ipids as $k_ipid => $ipid)
			{
				foreach($course_days[$ipid] as $k_course_date => $v_course_details)
				{
					foreach($v_course_details as $k_couses => $v_courses)
					{
						$course[$ipid][$k_course_date][] = $v_courses['course_type'];
					}
						
					$k_course_date_alt = date('d.m.Y', strtotime($k_course_date));
					if(in_array($k_course_date_alt, $patients_period_valid_days[$ipid]))
					{
						foreach($v_course_details as $k_couse => $v_course)
						{
							if($v_course['course_type'] == 'XT')
							//if($v_course['course_type'] == 'XT' && in_array($k_course_date, $sapv_days_inperiod_cs[$ipid]) && in_array('1', $sapv_days_cs[$ipid][$k_course_date]))
							{
								$clasifizierung[$ipid][$k_course_date]['telefon'] += 1;
								$extra_details[$ipid][$k_course_date]['telefon'][] = $v_course;
							}
							else if($v_course['course_type'] == 'V')
							//else if($v_course['course_type'] == 'V' && in_array($k_course_date, $sapv_days_inperiod_cs[$ipid]) && in_array('2', $sapv_days_cs[$ipid][$k_course_date]))
							{
								$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
								$extra_details[$ipid][$k_course_date]['koordination'][] = $v_course;
							}
						}
					}
				}
			}
			
			/*--------------------------------------------------------------------------------*/
			// CONTACT FORMS
			/*--------------------------------------------------------------------------------*/
			$cf_obj = new ContactForms();
			$contact_forms_days = $cf_obj->get_patients_period_cf($ipids, $overall_performance_period);

			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($contact_forms_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							if(strtotime(date('Y-m-d H:i:s', strtotime($v_cf['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge[] = $v_cf['id'];
								unset($contact_forms_ids_overall[$k_cf_day][$k_cf]);
							}
							$contact_forms_ids[] = $v_cf['id'];
							$all_contact_forms[$v_cf['id']] = $v_cf;
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);
			}
			
			if( ! empty($contact_forms_ids)){
				$block_classification = new FormBlockClassification();
				$classification_data = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids);
				$classification_data_overall = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids_overall);
			}
				
			foreach($all_contact_forms as $k_cf => $v_cf)
			{
				$k_cf_day = date('Y-m-d', strtotime($v_cf['billable_date']));
			
				if(  in_array(date('d.m.Y', strtotime($v_cf['billable_date'])), $patients_period_valid_days[$v_cf['ipid']]))
				{
					$contact_forms_days_ids[$v_cf['ipid']][$k_cf_day][] = $v_cf['id'];
					$contact_forms_days_ids2details[$v_cf['ipid']][$v_cf['id']] = $v_cf;
					$contact_forms2form_types[$v_cf['ipid']][$v_cf['id']][] = $v_cf['form_type'];
				}
			}
				
			$contact_forms_ids = array_values(array_unique($contact_forms_ids));
				
			$master_data = array();
			$action_days = array();
			foreach($ipids as $k_ipid => $ipid)
			{
			
				foreach($active_days_in_period_cs[$ipid] as $k=>$v_period_day)
				{
			
					foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_id)
					{
						//check if contactform type for each days
						// 						if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids) && (in_array('4', $sapv_days_cs[$ipid][$v_period_day]) || in_array('3', $sapv_days_cs[$ipid][$v_period_day]) ))
						// 						{
							$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
							$extra_details[$ipid][$v_period_day]['home_visit'][] = $contact_forms_days_ids2details[$ipid][$v_cf_id];
							// 						}
					}
				}
			
				ksort($extra_details[$ipid]);
			}

			
			
			
// 			$extra_details_array = $extra_details;
			$extra_details_array = array();
			foreach($extra_details[$ipid] as $ddate=>$action_data){
			    foreach($action_data as $action_type => $actions_array){
			        foreach($actions_array as $k=>$act_data){
			            if($action_type == "home_visit"){
			                $action_date_full = $act_data['billable_date'];
			            }
			            elseif($action_type == "koordination" || $action_type == "telefon"){
			                if($act_data['done_date'] != "0000-00-00 00:00:00"){
    			                $action_date_full = $act_data['done_date'];
			                } else{
    			                $action_date_full = $act_data['course_date'];
			                }
			            }
			            $act_data['sort_date'] = $action_date_full;
			            $act_data['alias'] = $action_type;
			            $extra_details_array[$ipid][] = $act_data;
			        }
			    }
			}
			
			//TODO-2058
			//active and  in invoice period
			$act_data_24h = array();
			foreach($patients_period_valid_days[$ipid] as $k=>$active_day){
		        $act_data_24h['sort_date'] = $active_day;
		        $act_data_24h['alias'] = "24_h_shift";
		        $extra_details_array[$ipid][] = $act_data_24h;
			}
			//-- 
			
			
			usort($extra_details_array[$ipid], array(new Pms_Sorter('sort_date'), "_date_compare"));
			
			// Prepare print data 
			$alias['home_visit'] = "Hausbesuch";
			$alias['beratung'] = "Beratung";
			$alias['koordination'] = "Koordination";
			$alias['telefon'] = "Telefonat";
			$alias['24_h_shift'] = "24h-Rufbereitschaft";
			
 			$print_data = array();
			$print_data['kv_header'] = $kv_header[$ipid];
			$print_data['patient_data'] = $patient_data_diagnos[$ipid];
			$print_data['alias'] = $alias;
					
			//organize leistung data
			$print_data['patientdetails'] = $patient_days[$ipid]['details'];
			$print_data['extra_data_details'] = $extra_details_array[$ipid];
			$print_data['users_array'] = $user_array ;
			$print_data['client_details'] = $client_details[0];
			$print_data['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($current_period['start']));
			$print_data['invoice_data']['invoice_end']  = date('d.m.Y', strtotime($current_period['end']));	
 
			$record_id = $this->generatePdfNew_2017(
					$chk=0,
					$post = $print_data,
					$pdfname = "patient_actions_list",
					$filename = "patient_contacts_pdf_items.html",
					$extra = array(
							//"htmlform" => $this->view->render("patientformnew/sgbvleistungsnachweispdf.html")
							"pdfname"=> $this->view->translate('patient-actions-list') . " (" . mb_convert_encoding(strftime('%B %Y', strtotime($current_period['start'])) , 'utf8') . ")",
					
					)
			);
			exit;
		}
	}
	
	public function mdksapvquestionnaireAction()
	{
		$userid = $this->logininfo->userid;
		$clientid = $this->logininfo->clientid;
		$decid = $this->dec_id;
		$ipid = $this->ipid;
		$this->view->patid = $this->dec_id;
		$this->view->enc_patid = $this->enc_id;
		$ustamp = new UserStamp();
		
		/* ----------------Patient general details-------------------------------------- */
		$this->view->patient_lname = $this->_patientMasterData['last_name'];
		$this->view->patient_fname = $this->_patientMasterData['first_name'];
		$this->view->patient_birthd = $this->_patientMasterData['birthd'];
		
		if(strlen($this->_patientMasterData['street1']) > 0)
		{
			$patient_address.= $this->_patientMasterData['street1'] . PHP_EOL ;
		}
		if(strlen($this->_patientMasterData['zip']) > 0)
		{
			$patient_address.= $this->_patientMasterData['zip'] . ', ';
		}
		
		if(strlen($this->_patientMasterData['city']) > 0)
		{
			$patient_address.= $this->_patientMasterData['city'];
		}
		
		$this->view->patient_address = $patient_address;
			
		$isdicharged = PatientDischarge::isDischarged($decid);
		$this->view->isdischarged = 0;
		if($isdicharged)
		{
			$this->view->isdischarged = 1;
		}
		/* ------------------- Patient stage Data--------------------------------- */
		$pms = new PatientMaintainanceStage();
		$pat_pmsinfo = $pms->getLastpatientMaintainanceStage($ipid);
			
		$stage = array();
		if($pat_pmsinfo)
		{
			$stage[] = $pat_pmsinfo[0]['stage'];
			if($pat_pmsinfo[0]['horherstufung'] == 1)
			{
				$this->view->beatragt = 'checked="checked"';
			}
		}
		$this->view->pflegestufe = $stage;
			
		if (isset($pat_pmsinfo[0]['stage'])) {
			$this->view->pflegeversicherung  = $pat_pmsinfo[0]['stage'];
			$this->view->erstantrag = $pat_pmsinfo[0]['erstantrag'];
			$this->view->horherstufung = $pat_pmsinfo[0]['horherstufung'];
		
		} else {
			$this->view->pflegeversicherung = null;
			$this->view->horherstufung  = null;
			$this->view->erstantrag  = null;
		}
		//var_dump($pat_pmsinfo); exit;
		$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
		$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
		$this->view->carelevellist = $grid->renderGrid();
		
		
		
		/* ----------------Patient - Location details-------------------------------------- */
		
		$hospitalids = Doctrine_Query::create()
		->select("*,(CONVERT(AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') using latin1)) as location")
		->from('Locations')
		->where('isdelete = 0')
		->andWhere('client_id =?', $clientid)
		->andWhere('location_type = 1');
		$hosparray = $hospitalids->fetchArray();
		
		$hosparr = array();
		foreach($hosparray as $hospital)
		{
			$hosparr[] = $hospital['id'];
			$hospital_location_array[$hospital['id']] = $hospital['location'];
		}
		
		//get patient hospital locations if it has
		if(!empty($hosparr))
		{
			$patloc = Doctrine_Query::create()
			->select('*')
			->from('PatientLocation')
			->where('ipid = ?', $ipid)
			->andWhere('isdelete="0"')
			->andWhereIn('location_id', $hosparr)
			->orderBy('valid_from DESC')
			->limit('1');
			$patlocationsArr = $patloc->fetchArray();
		
			if($patlocationsArr)
			{
				$this->view->hospital_location = $hospital_location_array[$patlocationsArr[0]['location_id']];
				if($patlocationsArr[0]['valid_till'] != '' && $patlocationsArr[0]['valid_till'] != '0000-00-00 00:00:00')
				{
					$valid_till = date('d.m.Y', strtotime($patlocationsArr[0]['valid_till']));
				}
				else
				{
					$valid_till = date('d.m.Y');
				}
				$valid_from = date('d.m.Y', strtotime($patlocationsArr[0]['valid_from']));
				$this->view->hospital_period = $valid_from . ' - ' . $valid_till;
			}
		}
		/* ----------------Patient - Stammdaten - More info--------------------------------- */
		$pmf = new PatientMoreInfo();
		$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
		//$this->view->dk = $pat_moreinfo[0]['dk'];
		$this->view->peg = $pat_moreinfo[0]['peg'];
		$this->view->port = $pat_moreinfo[0]['port'];
		$this->view->zvk = $pat_moreinfo[0]['zvk'];
		$this->view->pumps = $pat_moreinfo[0]['pumps'];
		$this->view->magensonde = $pat_moreinfo[0]['magensonde'];
		
		/* ----------------Patient - Stammdaten - Ausscheidung--------------------------------- */
		$pst = new Stammdatenerweitert();
		$pstdata = $pst->getStammdatenerweitert($ipid);
		$aussdata = $pstdata[0]['ausscheidung'];
		$aussdataarr = explode(',', $aussdata);
		foreach($aussdataarr as $kass=>$vass)
		{
			$ausval = 'ausscheidung'.$vass;
			$this->view->$ausval = 'checked = checked';
		}
		
		/* ----------------Patient - Living Will--------------------------------- */
		$pacp_obj = new PatientAcp();
		$pacp_array = $pacp_obj->getByIpid( array($ipid) );
		//var_dump($pacp_array); exit;
		
		foreach($pacp_array[$ipid] as $kacp=>$vacp)
		{
			if($vacp['division_tab'] == 'living_will')
			{
		
				if($vacp['active'] == 'yes')
				{
					$this->view->living_will_yes = 'yes';
				}
				elseif($vacp['active'] == 'no')
				{
					$this->view->living_will_no = 'no';
				}
			}
		}
		
		/* ----------------Client users --------------------------------- */
		
		$users = new User();
		$userarray = $users->getUserByClientid($clientid);
		$userarraylast[] = $this->view->translate('selectuser');
		$userarraylast_ids = array();
		
		foreach($userarray as $user)
		{
			$userarraylast[$user['id']] = trim($user['user_title']) . " " .trim($user['last_name']) . ", " . trim($user['first_name']);
			$userarraylast_ids[] = $user['id'];
		}
		$this->view->users = $userarraylast;
		
		/* ----------------Users stamps --------------------------------- */
		
		if($this->logininfo->usertype == 'SA' || $this->logininfo->usertype == 'CA')
		{
			$isadmin = '1';
		}
		
		if($isadmin == 1)
		{
			$showselect = 1;
		}
		else
		{
			$showselect = 1; // show select to all
		}
		$this->view->showselect = $showselect;
		
		$multiplestamps_previleges = new Modules();
			
		if($multiplestamps_previleges->checkModulePrivileges("64", $clientid))
		{
			$multiplestamps_option = true;
		}
		else
		{
			$multiplestamps_option = false;
		}
			
		$this->view->multiplestamps_option = $multiplestamps_option;
		
		if($multiplestamps_option)
		{
			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);
				
			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;
		}
		
		$sapvq = new MdkSapvQuestionnaire();
		
		if($_REQUEST['qid'])
		{
			$sapvq_res = $sapvq->get_sapv_questionarie($_REQUEST['qid']);
		}
		else
		{
			$sapvq_res = $sapvq->getPatientSapvQuestionnaire($ipid);
			// force to edit first one - just one needed
			$_REQUEST['qid'] = $sapvq_res['0']['id'];
		}
		
		if($sapvq_res['0'])
		{
			$this->retainValues($sapvq_res['0']);
			$this->view->stamp_user = $sapvq_res['0']['stampuser'];
			
			if(strlen($sapvq_res['0']['stampuser'] ) > 0 )
			{
				$stamp_info = explode('-', $sapvq_res['0']['stampuser'] );
			
				$user = $stamp_info[0];
				$stamp = $stamp_info[1];
				
				if($multiplestamps_option)
				{
					
					$userstatmp = $ustamp->getUserStampById($user, $stamp);
				}
				else 
				{
					$userstatmp = $ustamp->getUserStamp($user);
				}
			
				if(!empty($userstatmp))
				{
					$user_stamp_info['bsnr'] = $userstatmp[0]['stamp_bsnr'];
					$user_stamp_info['lanr'] = $userstatmp[0]['stamp_lanr'];
			
					$user_stamp_info['row1'] = $userstatmp[0]['row1'];
					$user_stamp_info['row2'] = $userstatmp[0]['row2'];
					$user_stamp_info['row3'] = $userstatmp[0]['row3'];
					$user_stamp_info['row4'] = $userstatmp[0]['row4'];
					$user_stamp_info['row5'] = $userstatmp[0]['row5'];
					$user_stamp_info['row6'] = $userstatmp[0]['row6'];
					$user_stamp_info['row7'] = $userstatmp[0]['row7'];
						
					$this->view->user_stamp_hidden = '<textarea name="stamp_block" style="display: none">' .$userstatmp[0]['row1']. '<br/>' .$userstatmp[0]['row2']. '<br/>'.$userstatmp[0]['row3'].'<br/>'.$userstatmp[0]['row4'].'<br/>'.$userstatmp[0]['row5'].'<br/>'.$userstatmp[0]['row6'].'<br/>'.$userstatmp[0]['row7'].'</textarea>';
				}				
			}
		}
		else 
		{
			/* ------------------- User Data--------------------------------------- 
			$loguser = Doctrine::getTable('User')->find($userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->mdk_sapv_pallarz = $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
			}
			
			$client_details = Pms_CommonData::getClientData($clientid);
			if($client_details)
			{
				//$this->view->betriebsstatten_nr = $client_details[0]['betriebsstattennummer'];
				$this->view->mdk_sapv_team = $client_details[0]['team_name'];
			}*/
			
			$client_details = Pms_CommonData::getClientData($clientid);
			$this->view->mdk_sapv_team = $client_details['0']['lbg_sapv_provider'] . "\n";
			$this->view->mdk_sapv_team .= $client_details['0']['lbg_street'] . "\n";
			if($client_details['0']['lbg_postcode'] != "")
			{
				$this->view->mdk_sapv_team .= $client_details['0']['lbg_postcode'] . " " . $client_details['0']['lbg_city'] . "\n";
			}
			else 
			{
				$this->view->mdk_sapv_team .= $client_details['0']['lbg_city'] . "\n";
			}
			$this->view->mdk_sapv_team .= $client_details['0']['lbg_institutskennzeichen'] . "\n";
			//var_dump($this->view->mdk_sapv_team); exit;
			/* ----------------Patient HealthInsurance details-------------------------------------- */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);
			
			if($phi)
			{
				$health_insurance = $phi[0]['company_name'];
				$this->view->patient_health_insurance = $health_insurance;
			}
			else
			{
				$this->view->patient_health_insurance = '';
			}
			/* ----------------Patient - Diagnosis -------------------------------------- */
			$pat_diagnosis = new PatientDiagnosis();
			$patient_diagnosis = $pat_diagnosis->get_multiple_patients_diagnosis($ipid);
			//var_dump($patient_diagnosis); exit;
			$dg = new DiagnosisType();
			$darr = $dg->get_client_diagnosistypes($clientid);
			
			//var_dump($darr); exit;
			foreach($patient_diagnosis as $keydiogno=>$vdiagno)
			{
				if($darr[$vdiagno['diagnosis_type_id']]['abbrevation'] == 'HD')
				{
					$diagnosis_main['all_str'][]= $vdiagno['diagnosis'] . ' (' . $vdiagno['icdnumber'] . ')';
				}
				else if($darr[$vdiagno['diagnosis_type_id']]['abbrevation'] == 'ND' || $darr[$vdiagno['diagnosis_type_id']]['abbrevation'] == 'AD' || $darr[$vdiagno['diagnosis_type_id']]['abbrevation'] == 'AD')
				{
					$diagnosis_side['all_str'][]= $vdiagno['diagnosis'] . ' (' . $vdiagno['icdnumber'] . ')';
				}
			}
			
			//get full details main diagnosis
			$this->view->diagno_main = implode(', ', $diagnosis_main['all_str']);
			
			//get full details main diagnosis
			$this->view->diagno_side = implode(', ', $diagnosis_side['all_str']);
			//var_dump($this->view->mdk_side_diagnosis); exit;
			
			
			/* ----------------Patient - Aktuelle Medication + Beadarfs -------------------------------------- */
			$pdrug = new PatientDrugPlan();
			$drugarray = $pdrug->getPatientDrugPlan($decid);
			//var_dump($drugarray);exit;
			$medicationbedarfs="";
			$medication= "";
			
			foreach($drugarray as $key => $val)
			{
				$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
				if(!empty($medca))
				{
					$medcaarray = $medca->toArray();
			
				}
			
				if($val['isbedarfs'] == '1')
				{
					$med_array['isbedarfs'][] = $medcaarray['name'] . " - " . $val['dosage'];
				}
				else if($val['isivmed'] == '0' 
						&& $val['isschmerzpumpe'] == '0' 
						&& $val['iscrisis'] == '0' 
						&& $val['isnutrition'] == '0' 
						&& $val['treatment_care'] == '0'
						&& $val['isintubated'] == '0'
						&& $val['isbedarfs'] == '0'
						)
				{
					$med_array['akmed'][] = $medcaarray['name'] . " - " . $val['dosage'];
				}
			}
			
			$medication_akmed = implode("\n",$med_array['akmed']);
			$medication_isbedarfs = implode("\n",$med_array['isbedarfs']);
			if($medication_akmed != "")
			{
				$this->view->med_fest_text = $medication_akmed;
				$this->view->med_fest = '1';
			}
			if($medication_isbedarfs != "")
			{
				$this->view->med_bedarf_text = $medication_isbedarfs;
				$this->view->med_bedarf = '1';
			}
			//var_dump($medication_isbedarfs); exit;
			/* ----------------Patient - Family doctor -------------------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($this->_patientMasterData['familydoc_id']);
			
			if($docarray)
			{
				$this->view->familydoctor = 1;
			}
			else
			{
				$this->view->familydoctor = 0;
			}
			
			/* ----------------Patient - Pflegedienst -------------------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($ipid);
			
			if($ppflearray)
			{
				$this->view->pflegedienst = 1;
			}
			else
			{
				$this->view->pflegedienst = 0;
			}
			
			/* ----------------Patient - Contact person -------------------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->get2PatientContact($ipid);
			if($pcs)
			{
				$this->view->contactperson = 1;
			}
			else
			{
				$this->view->contactperson = 0;
			}
			
			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);
			
			/* ----------------Patient - Ambulanter Hospizdienst -------------------------------------- */
			$hp_assoc = new PatientHospiceassociation ();
			$hp_assoc_array = $hp_assoc->getPatientHospiceassociation($ipid);
			
			if($hp_assoc_array)
			{
				$this->view->hospizdienst = 1;
			}
			else
			{
				$this->view->hospizdienst = 0;
			}
		}
		

		/* ------------------------------ SAVE FORM BEFORE DISPLAY --------------------------------- */
		if($this->getRequest()->isPost() && strlen($_POST['pdf_export']) == 0)
		{
			//var_dump($_POST); exit;
		/* ----------------Patient save sapv questionaire -------------------------------------- */
			$init = new Application_Form_MdkSapvQuestionnaire();
		//var_dump($_POST); exit;
			if($_REQUEST['qid'])
			{
				$resultmdk = $init->updateSapvQuestionnaire($_POST, $_REQUEST['qid'], $ipid, $userid);
				if($resultmdk)
				{
					//formular editat
					$custcourse = new PatientCourse();
					$custcourse->ipid = $ipid;
					$custcourse->course_date = date("Y-m-d H:i:s", time());
					$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					$comment = "MDK bogen NORD wurde editiert";
					$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					$custcourse->user_id = $userid;
					$custcourse->recordid = $qid;
					$custcourse->tabname = Pms_CommonData::aesEncrypt(addslashes('mdk_sapv_questionnaire'));
					$custcourse->save();
				}
			}
			else
			{
				$resultmdk = $init->insertSapvQuestionnaire($_POST, $ipid, $userid);
				if($resultmdk)
				{
					//formular editat
					$custcourse = new PatientCourse();
					$custcourse->ipid = $ipid;
					$custcourse->course_date = date("Y-m-d H:i:s", time());
					$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					$comment = "MDK bogen NORD wurde hinzugefügt";
					$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					$custcourse->user_id = $userid;
					$custcourse->recordid = $qid;
					$custcourse->tabname = Pms_CommonData::aesEncrypt(addslashes('mdk_sapv_questionnaire'));
					$custcourse->save();
				}
			}
			
			if($resultmdk)
			{
				/* ----------------Patient save stammdatten -------------------------------------- */
				//update the patient >> Stammdaten >> Pflegegrade
				foreach($_POST['pflegestufe'] as $kpf=>$vpf)
				{
					if($vpf >= '0' && $vpf <= '5')
					{
						$post_pflegeversicherung = array(
								"modname" => "MaintainanceStage",
								"fldname" => "stage",
								"chkval" => $vpf,
								"patid" => $_GET['id'],
								"formid" => "grow7",
								"ipid" => $ipid,
							);
					}
					if($vpf == '6')
					{
						$post_erstantrag = array(
								"modname" => "MaintainanceStage",
								"fldname" => "erstantrag",
								"chkval" => 1,
								"patid" => $_GET['id'],
								"formid" => "grow7",
								"ipid" => $ipid,
						);
					}
					if($vpf == '7')
					{
						$post_horherstufung = array(
								"modname" => "MaintainanceStage",
								"fldname" => "horherstufung",
								"chkval" => 1,
								"patid" => $_GET['id'],
								"formid" => "grow7",
								"ipid" => $ipid,
						);
					}
				}
					$mainform = new Application_Form_PatientMaintainanceStage();
					$pms =  new PatientMaintainanceStage();
					$current_pms = $pms->getLastpatientMaintainanceStage($ipid);
					
					if($post_pflegeversicherung)
					{	
						
						if( ! empty($current_pms)){
							
							$dg = Doctrine::getTable('PatientMaintainanceStage')->find($current_pms[0]['id']);
							$dg->stage = $post_pflegeversicherung['chkval'];
							$dg->erstantrag = $post_pflegeversicherung['erstantrag'];
							$dg->horherstufung = $post_pflegeversicherung['horherstufung'];
							$dg->save();
						}
						else
							{ // no saved data ? ? ?? ?
							//$frm = new PatientMaintainanceStage();
							$pms->ipid = $post_pflegeversicherung['ipid'];
							$pms->stage = $post_pflegeversicherung['chkval'];
							$pms->erstantrag = $post_pflegeversicherung['erstantrag'];
							$pms->horherstufung = $post_pflegeversicherung['horherstufung'];
							$pms->fromdate = date("Y-m-d",time());
							$pms->save();
						}
						
						$history = new BoxHistory();
						$history->ipid = $ipid;
						$history->clientid = $clientid;
						$history->fieldname = $post['fldname'];
						$history->fieldvalue = $post['chkval'];
						$history->formid = $post['formid']; //grow7
						$history->save();
					}
					if($post_erstantrag)
					{
						/* $q = Doctrine_Query::create()
						 ->update('PatientMaintainanceStage')
						 ->set('erstantrag', '?', $_GET['chkval'])
						 ->where("ipid= ?", $ipid)
						 ->andwhere('tilldate="0000-00-00"')
						 ->limit(1)
						 ->orderBy('id desc');
						 $q->execute(); */
					
						if( ! empty($current_pms)){
							$dg = Doctrine::getTable('PatientMaintainanceStage')->find($current_pms[0]['id']);
							$dg->erstantrag = $post_erstantrag['chkval'];
							if($post_erstantrag['chkval'] == "1"){
								$dg->e_fromdate = date('Y-m-d');
							} else{
								$dg->e_fromdate = "0000-00-00";
							}
							$dg->save();
						}
					
					}
					if($post_horherstufung)
					{
						/* $q = Doctrine_Query::create()
						 ->update('PatientMaintainanceStage')
						 ->set('horherstufung','?', $_GET['chkval'])
						 ->where("ipid= ?", $ipid)
						 ->andwhere('tilldate="0000-00-00"');
						 $q->execute(); */
					
						if( ! empty($current_pms)){
							$dg = Doctrine::getTable('PatientMaintainanceStage')->find($current_pms[0]['id']);
							$dg->horherstufung = $post_horherstufung['chkval'];
							if($post_horherstufung['chkval'] == "1"){
								$dg->h_fromdate = date('Y-m-d');
							} else{
								$dg->h_fromdate = "0000-00-00";
							}
							$dg->save();
						}
					}
					//added family doctor
					//var_dump($_POST); exit;
					if($_POST['hidd_docid'] != "") 
					{
						$docform = new Application_Form_Familydoctor();
						$docinfo = $docform->InsertFromTabData($_POST);
					
					
						$f_post['hidd_docid'] = $docinfo->id;
					
						
						//var_dump($fdoc->id); exit;
						$fdoctor_form = new Application_Form_PatientMaster();
						
						$fdoctor_form->UpdateFamilydoc($f_post);
					}
						
					//added pflegedienste
					if($_POST['hidd_pflegeid'] != "")
					{
						$docform = new Application_Form_Pflegedienstes();
						$docinfo = $docform->InsertFromTabData($_POST);
							
						if($docinfo)
						{
							$pfl_cl = new PatientPflegedienste();
							$pfl_cl->ipid = $ipid;
							$pfl_cl->pflid = $docinfo->id;
							$pfl_cl->save();
						}
					}
					//added hospisdienst
					if($_POST[hidd_h_association_id] != "")
					{
						$pfl_cl = new PatientHospiceassociation();
						$pfl_cl->ipid = $ipid;
						$pfl_cl->h_association_id = $_POST['hidd_h_association_id'];
						$pfl_cl->h_association_comment = $_POST['h_association_comment'];
						$pfl_cl->save();
					}
					//added contact person
					if($_POST['cnt_first_name'] != "" || $_POST['cnt_last_name'] != "")
					{
						$contact_form = new Application_Form_ContactPersonMaster();
						
						$a_post = $_POST;
						$a_post['ipid'] = $ipid;
						//var_dump($a_post); exit;
						if($contact_form->validate($_POST))
						{
							$cf_response = $contact_form->InsertDataSingle($a_post, true);
						}
					}
					//update more info port, peg, zkv
					$pmi = new PatientMoreInfo();
					$pmidb = $pmi->getpatientMoreInfoData($ipid);
					
					$moreinfoarray = array('port', 'peg', 'zvk');
					$data = array();
					
					foreach($moreinfoarray as $kmi=>$vmi)
					{
						$post_mi[] = array(
								"modname" => "MoreInfo",
								"fldname" => $vmi,
								"chkval" => $_POST[$vmi],
								"patid" => $_GET['id'],
								"formid" => "grow20",
								"ipid" => $ipid,
						);
						$data[$vmi] = $_POST[$vmi];
					}
					if ($pmidb)
					{
						$data['id'] = $pmidb[0]['id'];
					}
					else
					{
						$data['id'] = '0';
					}
					$pmif = new Application_Form_PatientMoreInfo();
					$result = $pmif->InsertMoreInfoData($ipid,$data);
					if($result)
					{
						//var_dump($post_mi); exit;
						foreach($post_mi as $kpmi=>$vpmi)
						{					
							if(is_null($vpmi['chkval']) &&($vpmi['fldname'] == 'port' || $vpmi['fldname'] == 'peg'))
							{
								$q = Doctrine_Query::create()
								->update('Patient' . $vpmi['modname'] . '')
								->set($vpmi['fldname'] . 'more', "''")
								->where("ipid= ?", $ipid);
								$q->execute();
									
								$history = new BoxHistory();
								$history->ipid = $ipid;
								$history->clientid = $clientid;
								$history->fieldname = $vpmi['fldname'] . 'more';
								$history->fieldvalue = $vpmi['chkval'];
								$history->formid = $vpmi['formid'];
								$history->save();
							}
							else 
							{
								$history = new BoxHistory();
								$history->ipid = $ipid;
								$history->clientid = $clientid;
								$history->fieldvalue = $vpmi['chkval'];
								$history->formid = $vpmi['formid'];
								$history->save();
							}
						}
					}
					//update the patient >> Stammdaten >> Ausscheidung DK
					$post_ausscheidung = array(
						"modname" => "Ausscheidung",
						"fldname" => "ausscheidung",
						"chkval" => implode(',', $_POST['ausscheidung']),
						"patid" => $_GET['id'],
						"formid" => "grow21",
						"ipid" => $ipid,
					);
					
					//var_dump($_POST['ausscheidung']);exit;
					$pst = new Application_Form_Stammdatenerweitert();
					$pst->InsertStamdatenData($post_ausscheidung);
					//update the patient >> Stammdaten >> Patientenverfuengung
					$pacp = new PatientAcp();
					$pacparray = $pacp->getByIpid( array($ipid) );
					
					foreach($pacparray as $kp=>$vp)
					{
						foreach($vp as $kpd=>$vpd)
						{
							if($vpd['division_tab'] == 'living_will')
							{
								$id_living_will = $vpd['id'];
							}
						}
					}
					//var_dump($pacparray); exit;
				
				if($_POST['living_will_yes'])
				{
					if($id_living_will)
					{
						$data = array('division_tab'=>'living_will', 'active'=>'yes', 'id'=>$id_living_will);
					}
					else {
						$data = array('division_tab'=>'living_will', 'active'=>'yes', 'id'=>'0');
					}
					$post_patver = array(
							"modname" => "Acp",
							"fldname" => "active",
							"chkval" => $_POST['lliving_will_yes'],
							"patid" => $_GET['id'],
							"formid" => "grow6",
							"ipid" => $ipid,
					);
				}
				elseif($_POST['living_will_no']) 
				{
					if($id_living_will)
					{
						$data = array('division_tab'=>'living_will', 'active'=>'no', 'id'=>$id_living_will);
					}
					else {
						$data = array('division_tab'=>'living_will', 'active'=>'no', 'id'=>'0');
					}
					$post_patver = array(
							"modname" => "Acp",
							"fldname" => "active",
							"chkval" => $_POST['living_will_no'],
							"patid" => $_GET['id'],
							"formid" => "grow6",
							"ipid" => $ipid,
					);
				}
						
					//var_dump($_POST['ausscheidung']);exit;
					$pst = new Application_Form_PatientACP();
					$pst->save_form_acp($ipid , $data);
					
					$history = new BoxHistory();
					$history->ipid = $ipid;
					$history->clientid = $clientid;
					$history->fieldvalue = $post_patver['chkval'];
					$history->formid = $post_patver['formid'];
					$history->save();
			}
				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
			}
		
		/* ------------------------------ PDF  ------------------------------------- */
	
		if($this->getRequest()->isPost() && strlen($_POST['pdf_export']) > 0)
		{
			$post = $_POST;
			$post['stamp_block'] = str_replace('<br/>', "%r%", $post['stamp_block']);
			$post['stamp_block'] = htmlentities($post['stamp_block']);
			$post['stamp_block'] = str_replace("%r%", "<br/>", $post['stamp_block']);
			$post['second_header'] = '1';
			//$post['patient_health_insurance'] = $this->view->patient_health_insurance;
			//$post['patient_lname'] = $this->view->patient_lname;
			//$post['patient_fname'] = $this->view->patient_fname;
			//$post['patient_birthd'] = $this->view->patient_birthd;
			//$post['patient_address'] = $this->view->patient_address;
			//$post['medications_pdf'] = $this->view->medications_pdf;
			//$post['bedarfsmedications_pdf'] = $this->view->bedarfsmedications_pdf;
			//$post['ivmedications_pdf'] = $this->view->ivmedications_pdf;
			$this->generatePdfNew(3, $post, 'mdksapvquestionnaire', "mdksapv_questionnaire_pdf.html");
		}
	}

    /**
     * ISPC-2765,Elena,26.01.2021
     *
     * @throws Doctrine_Query_Exception
     * @throws Zend_Exception
     */
	public function mdksapvquestionnaire2020Action()
	{
		$userid = $this->logininfo->userid;
		$clientid = $this->logininfo->clientid;
		$decid = $this->dec_id;
		$ipid = $this->ipid;
		$this->view->patid = $this->dec_id;
		$this->view->enc_patid = $this->enc_id;
		$ustamp = new UserStamp();

		/* ----------------Patient general details-------------------------------------- */
		$this->view->patient_lname = $this->_patientMasterData['last_name'];
		$this->view->patient_fname = $this->_patientMasterData['first_name'];
		$this->view->patient_birthd = $this->_patientMasterData['birthd'];

		if(strlen($this->_patientMasterData['street1']) > 0)
		{
			$patient_address.= $this->_patientMasterData['street1'] . PHP_EOL ;
		}
		if(strlen($this->_patientMasterData['zip']) > 0)
		{
			$patient_address.= $this->_patientMasterData['zip'] . ', ';
		}

		if(strlen($this->_patientMasterData['city']) > 0)
		{
			$patient_address.= $this->_patientMasterData['city'];
		}

		$this->view->patient_address = $patient_address;

		$isdicharged = PatientDischarge::isDischarged($decid);
		$this->view->isdischarged = 0;
		if($isdicharged)
		{
			$this->view->isdischarged = 1;
		}


        $regulation_start = null;
        if(!$isdicharged)
        {
            $sav = new SapvVerordnung();
            $sapvData = $sav->getSapvVerordnungData($ipid);
            //print_r($sapvData);

            $no_sapv_data = null;
            $sapv_data_exists = false;
            foreach($sapvData as $sapv){
                if($regulation_start == null){
                    $regulation_start = $sapv['regulation_start'];
                }else{
                    $regulationAsDate = new DateTime($sapv['regulation_start']);
                    $regulationOldAsDate = new DateTime($regulation_start);
                    if($regulationAsDate > $regulationOldAsDate){
                        $regulation_start = $sapv['regulation_start'];
                        if($sapv['sapv_order'] == 2){
                            $no_sapv_data = false;
                            $sapv_data_exists = true;
                        }
                    }
                }

            }
            //echo 'start' . $regulation_start ;
            if($no_sapv_data !== null){
                $this->view->no_sapv_data = ($no_sapv_data) ? '1' : '0';;
            }

            $this->view->sapv_data_exists = ($sapv_data_exists) ? '1' : '0';
            $this->view->sapv_date = $regulation_start;
        }
		/* ------------------- Patient stage Data--------------------------------- */
		$pms = new PatientMaintainanceStage();
		$pat_pmsinfo = $pms->getLastpatientMaintainanceStage($ipid);

		$stage = array();
		if($pat_pmsinfo)
		{
			$stage[] = $pat_pmsinfo[0]['stage'];
			if($pat_pmsinfo[0]['horherstufung'] == 1)
			{
				$this->view->beatragt = 'checked="checked"';
			}
		}
		$this->view->pflegestufe = $stage;

		if (isset($pat_pmsinfo[0]['stage'])) {
			$this->view->pflegeversicherung  = $pat_pmsinfo[0]['stage'];
			$this->view->erstantrag = $pat_pmsinfo[0]['erstantrag'];
			$this->view->horherstufung = $pat_pmsinfo[0]['horherstufung'];

		} else {
			$this->view->pflegeversicherung = null;
			$this->view->horherstufung  = null;
			$this->view->erstantrag  = null;
		}
		//var_dump($pat_pmsinfo); exit;
		$pat_pmsinfo = $pms->getpatientMaintainanceStage($ipid);
		$grid = new Pms_Grid($pat_pmsinfo, 1, count($pat_pmsinfo), "carelevellist.html");
		$this->view->carelevellist = $grid->renderGrid();



		/* ----------------Patient - Location details-------------------------------------- */

		$hospitalids = Doctrine_Query::create()
		->select("*,(CONVERT(AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') using latin1)) as location")
		->from('Locations')
		->where('isdelete = 0')
		->andWhere('client_id =?', $clientid)
		->andWhere('location_type = 1');
		$hosparray = $hospitalids->fetchArray();

		$hosparr = array();
		foreach($hosparray as $hospital)
		{
			$hosparr[] = $hospital['id'];
			$hospital_location_array[$hospital['id']] = $hospital['location'];
		}

		//get patient hospital locations if it has
		if(!empty($hosparr))
		{
			$patloc = Doctrine_Query::create()
			->select('*')
			->from('PatientLocation')
			->where('ipid = ?', $ipid)
			->andWhere('isdelete="0"')
			->andWhereIn('location_id', $hosparr)
			->orderBy('valid_from DESC')
			->limit('1');
			$patlocationsArr = $patloc->fetchArray();

			if($patlocationsArr)
			{
				$this->view->hospital_location = $hospital_location_array[$patlocationsArr[0]['location_id']];
				if($patlocationsArr[0]['valid_till'] != '' && $patlocationsArr[0]['valid_till'] != '0000-00-00 00:00:00')
				{
					$valid_till = date('d.m.Y', strtotime($patlocationsArr[0]['valid_till']));
				}
				else
				{
					$valid_till = date('d.m.Y');
				}
				$valid_from = date('d.m.Y', strtotime($patlocationsArr[0]['valid_from']));
				$this->view->hospital_period = $valid_from . ' - ' . $valid_till;
			}
		}
		/* ----------------Patient - Stammdaten - More info--------------------------------- */
		$pmf = new PatientMoreInfo();
		$pat_moreinfo = $pmf->getpatientMoreInfoData($ipid);
		//$this->view->dk = $pat_moreinfo[0]['dk'];
		$this->view->peg = $pat_moreinfo[0]['peg'];
		$this->view->port = $pat_moreinfo[0]['port'];
		$this->view->zvk = $pat_moreinfo[0]['zvk'];
		$this->view->pumps = $pat_moreinfo[0]['pumps'];
		$this->view->magensonde = $pat_moreinfo[0]['magensonde'];

		/* ----------------Patient - Stammdaten - Ausscheidung--------------------------------- */
		$pst = new Stammdatenerweitert();
		$pstdata = $pst->getStammdatenerweitert($ipid);
		$aussdata = $pstdata[0]['ausscheidung'];
		$aussdataarr = explode(',', $aussdata);
		foreach($aussdataarr as $kass=>$vass)
		{
			$ausval = 'ausscheidung'.$vass;
			$this->view->$ausval = 'checked = checked';
		}
		/*-------------------- Patient Weight/Height ------------------------------ */
        $vital_signs_arr = array();
        $latest_vital_signs_weight = FormBlockVitalSigns::get_patients_chart_last_values_byelement($ipid, false, 'weight');
        $latest_vital_signs_height = FormBlockVitalSigns::get_patients_chart_last_values_byelement($ipid, false, 'height');

        if(!empty($latest_vital_signs_weight[$ipid])){
            $this->view->weight = number_format($latest_vital_signs_weight[$ipid]['weight'], 0, ',', '.');

        }
        if(!empty($latest_vital_signs_height[$ipid])){
            $this->view->height = number_format($latest_vital_signs_height[$ipid]['height'], 0, ',', '.');

        }

		/* ----------------Patient - Living Will--------------------------------- */
		$pacp_obj = new PatientAcp();
		$pacp_array = $pacp_obj->getByIpid( array($ipid) );
		//var_dump($pacp_array); exit;

		foreach($pacp_array[$ipid] as $kacp=>$vacp)
		{
			if($vacp['division_tab'] == 'living_will')
			{

				if($vacp['active'] == 'yes')
				{
					$this->view->living_will_yes = 'yes';
				}
				elseif($vacp['active'] == 'no')
				{
					$this->view->living_will_no = 'no';
				}
			}
		}

		/* ----------------Client users --------------------------------- */

		$users = new User();
		$userarray = $users->getUserByClientid($clientid);
		$userarraylast[] = $this->view->translate('selectuser');
		$userarraylast_ids = array();

		foreach($userarray as $user)
		{
			$userarraylast[$user['id']] = trim($user['user_title']) . " " .trim($user['last_name']) . ", " . trim($user['first_name']);
			$userarraylast_ids[] = $user['id'];
		}
		$this->view->users = $userarraylast;

		/* ----------------Users stamps --------------------------------- */

		if($this->logininfo->usertype == 'SA' || $this->logininfo->usertype == 'CA')
		{
			$isadmin = '1';
		}

		if($isadmin == 1)
		{
			$showselect = 1;
		}
		else
		{
			$showselect = 1; // show select to all
		}
		$this->view->showselect = $showselect;

		$multiplestamps_previleges = new Modules();

		if($multiplestamps_previleges->checkModulePrivileges("64", $clientid))
		{
			$multiplestamps_option = true;
		}
		else
		{
			$multiplestamps_option = false;
		}

		$this->view->multiplestamps_option = $multiplestamps_option;

		if($multiplestamps_option)
		{
			$ustamp = new UserStamp();
			$multipleuser_stamp = $ustamp->getAllUsersActiveStamps($userarraylast_ids);

			foreach($multipleuser_stamp as $ks => $uspamp)
			{
				$users_mstamps[$uspamp['userid']]['user_id'] = $uspamp['userid'];
				$users_mstamps[$uspamp['userid']]['user_name'] = $userarraylast[$uspamp['userid']];
				$users_mstamps[$uspamp['userid']]['user_stamps'][$uspamp['id']] = $uspamp['stamp_name'];
			}
			$this->view->users_mstamps = $users_mstamps;
		}

		$sapvq = new MdkSapvQuestionnaire();

		if($_REQUEST['qid'])
		{
			$sapvq_res = $sapvq->get_sapv_questionarie($_REQUEST['qid']);
		}
		else
		{
			$sapvq_res = $sapvq->getPatientSapvQuestionnaire($ipid);
			// force to edit first one - just one needed
			$_REQUEST['qid'] = $sapvq_res['0']['id'];
		}

		if($sapvq_res['0'])
		{

			$this->retainValues($sapvq_res['0']);

            //these values would be always actuallly
            $this->view->no_sapv_data = ($no_sapv_data) ? '1' : '0';
            $this->view->sapv_data_exists = ($sapv_data_exists) ? '1' : '0';
            if(($regulation_start !== null) && $sapv_data_exists){
                $this->view->sapv_date = $regulation_start;
            }
            //these values have to be always fresh from medication plan, that's why we reset it
            $this->view->med_fest_text = '';
            $this->view->med_fest = '0';

            $this->view->med_bedarf_text = '';
            $this->view->med_bedarf = '0';

            //and then we take these values from medication plan directly
            /* ----------------Patient - Aktuelle Medication + Beadarfs -------------------------------------- */
            $pdrug = new PatientDrugPlan();
            $drugarray = $pdrug->getPatientDrugPlan($decid);
            //var_dump($drugarray);exit;
            $medicationbedarfs="";
            $medication= "";

            foreach($drugarray as $key => $val)
            {
                $medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
                if(!empty($medca))
                {
                    $medcaarray = $medca->toArray();

                }

                if($val['isbedarfs'] == '1')
                {
                    $med_array['isbedarfs'][] = $medcaarray['name'] . " - " . $val['dosage'];
                }
                else if($val['isivmed'] == '0'
                    && $val['isschmerzpumpe'] == '0'
                    && $val['iscrisis'] == '0'
                    && $val['isnutrition'] == '0'
                    && $val['treatment_care'] == '0'
                    && $val['isintubated'] == '0'
                    && $val['isbedarfs'] == '0'
                )
                {
                    $med_array['akmed'][] = $medcaarray['name'] . " - " . $val['dosage'];
                }
            }

            $medication_akmed = implode("\n",$med_array['akmed']);
            $medication_isbedarfs = implode("\n",$med_array['isbedarfs']);
            if($medication_akmed != "")
            {
                $this->view->med_fest_text = $medication_akmed;
                $this->view->med_fest = '1';
            }
            if($medication_isbedarfs != "")
            {
                $this->view->med_bedarf_text = $medication_isbedarfs;
                $this->view->med_bedarf = '1';
            }
            //var_dump($medication_isbedarfs); exit;
			$this->view->stamp_user = $sapvq_res['0']['stampuser'];

			if(strlen($sapvq_res['0']['stampuser'] ) > 0 )
			{
				$stamp_info = explode('-', $sapvq_res['0']['stampuser'] );

				$user = $stamp_info[0];
				$stamp = $stamp_info[1];

				if($multiplestamps_option)
				{

					$userstatmp = $ustamp->getUserStampById($user, $stamp);
				}
				else
				{
					$userstatmp = $ustamp->getUserStamp($user);
				}

				if(!empty($userstatmp))
				{
					$user_stamp_info['bsnr'] = $userstatmp[0]['stamp_bsnr'];
					$user_stamp_info['lanr'] = $userstatmp[0]['stamp_lanr'];

					$user_stamp_info['row1'] = $userstatmp[0]['row1'];
					$user_stamp_info['row2'] = $userstatmp[0]['row2'];
					$user_stamp_info['row3'] = $userstatmp[0]['row3'];
					$user_stamp_info['row4'] = $userstatmp[0]['row4'];
					$user_stamp_info['row5'] = $userstatmp[0]['row5'];
					$user_stamp_info['row6'] = $userstatmp[0]['row6'];
					$user_stamp_info['row7'] = $userstatmp[0]['row7'];

					$this->view->user_stamp_hidden = '<textarea name="stamp_block" style="display: none">' .$userstatmp[0]['row1']. '<br/>' .$userstatmp[0]['row2']. '<br/>'.$userstatmp[0]['row3'].'<br/>'.$userstatmp[0]['row4'].'<br/>'.$userstatmp[0]['row5'].'<br/>'.$userstatmp[0]['row6'].'<br/>'.$userstatmp[0]['row7'].'</textarea>';
				}
			}
		}
		else
		{
			/* ------------------- User Data---------------------------------------
			$loguser = Doctrine::getTable('User')->find($userid);
			if($loguser)
			{
				$loguserarray = $loguser->toArray();
				$this->view->mdk_sapv_pallarz = $loguserarray['last_name'] . ", " . $loguserarray['first_name'];
			}

			$client_details = Pms_CommonData::getClientData($clientid);
			if($client_details)
			{
				//$this->view->betriebsstatten_nr = $client_details[0]['betriebsstattennummer'];
				$this->view->mdk_sapv_team = $client_details[0]['team_name'];
			}*/

			$client_details = Pms_CommonData::getClientData($clientid);
			$this->view->mdk_sapv_team = $client_details['0']['lbg_sapv_provider'] . "\n";
			$this->view->mdk_sapv_team .= $client_details['0']['lbg_street'] . "\n";
			if($client_details['0']['lbg_postcode'] != "")
			{
				$this->view->mdk_sapv_team .= $client_details['0']['lbg_postcode'] . " " . $client_details['0']['lbg_city'] . "\n";
			}
			else
			{
				$this->view->mdk_sapv_team .= $client_details['0']['lbg_city'] . "\n";
			}
			$this->view->mdk_sapv_team .= $client_details['0']['lbg_institutskennzeichen'] . "\n";
			//var_dump($this->view->mdk_sapv_team); exit;
			/* ----------------Patient HealthInsurance details-------------------------------------- */
			$ph = new PatientHealthInsurance();
			$phi = $ph->getPatientHealthInsurance($ipid);

			if($phi)
			{
				$health_insurance = $phi[0]['company_name'];
				$this->view->patient_health_insurance = $health_insurance;
			}
			else
			{
				$this->view->patient_health_insurance = '';
			}
			/* ----------------Patient - Diagnosis -------------------------------------- */
			$pat_diagnosis = new PatientDiagnosis();
			$patient_diagnosis = $pat_diagnosis->get_multiple_patients_diagnosis($ipid);
			//var_dump($patient_diagnosis); exit;
			$dg = new DiagnosisType();
			$darr = $dg->get_client_diagnosistypes($clientid);

			//var_dump($darr); exit;
			foreach($patient_diagnosis as $keydiogno=>$vdiagno)
			{
				if($darr[$vdiagno['diagnosis_type_id']]['abbrevation'] == 'HD')
				{
					$diagnosis_main['all_str'][]= $vdiagno['diagnosis'] . ' (' . $vdiagno['icdnumber'] . ')';
				}
				else if($darr[$vdiagno['diagnosis_type_id']]['abbrevation'] == 'ND' || $darr[$vdiagno['diagnosis_type_id']]['abbrevation'] == 'AD' || $darr[$vdiagno['diagnosis_type_id']]['abbrevation'] == 'AD')
				{
					$diagnosis_side['all_str'][]= $vdiagno['diagnosis'] . ' (' . $vdiagno['icdnumber'] . ')';
				}
			}

			//get full details main diagnosis
			$this->view->diagno_main = implode(', ', $diagnosis_main['all_str']);

			//get full details main diagnosis
			$this->view->diagno_side = implode(', ', $diagnosis_side['all_str']);
			//var_dump($this->view->mdk_side_diagnosis); exit;


			/* ----------------Patient - Aktuelle Medication + Beadarfs -------------------------------------- */
			$pdrug = new PatientDrugPlan();
			$drugarray = $pdrug->getPatientDrugPlan($decid);
			//var_dump($drugarray);exit;
			$medicationbedarfs="";
			$medication= "";

			foreach($drugarray as $key => $val)
			{
				$medca = Doctrine::getTable('Medication')->find($val['medication_master_id']);
				if(!empty($medca))
				{
					$medcaarray = $medca->toArray();

				}

				if($val['isbedarfs'] == '1')
				{
					$med_array['isbedarfs'][] = $medcaarray['name'] . " - " . $val['dosage'];
				}
				else if($val['isivmed'] == '0'
						&& $val['isschmerzpumpe'] == '0'
						&& $val['iscrisis'] == '0'
						&& $val['isnutrition'] == '0'
						&& $val['treatment_care'] == '0'
						&& $val['isintubated'] == '0'
						&& $val['isbedarfs'] == '0'
						)
				{
					$med_array['akmed'][] = $medcaarray['name'] . " - " . $val['dosage'];
				}
			}

			$medication_akmed = implode("\n",$med_array['akmed']);
			$medication_isbedarfs = implode("\n",$med_array['isbedarfs']);
			if($medication_akmed != "")
			{
				$this->view->med_fest_text = $medication_akmed;
				$this->view->med_fest = '1';
			}
			if($medication_isbedarfs != "")
			{
				$this->view->med_bedarf_text = $medication_isbedarfs;
				$this->view->med_bedarf = '1';
			}
			//var_dump($medication_isbedarfs); exit;
			/* ----------------Patient - Family doctor -------------------------------------- */
			$fdoc = new FamilyDoctor();
			$docarray = $fdoc->getFamilyDoc($this->_patientMasterData['familydoc_id']);

			if($docarray)
			{
				$this->view->familydoctor = 1;
			}
			else
			{
				$this->view->familydoctor = 0;
			}

			/* ----------------Patient - Pflegedienst -------------------------------------- */
			$ppfle = new PatientPflegedienste();
			$ppflearray = $ppfle->getPatientPflegedienste($ipid);

			if($ppflearray)
			{
				$this->view->pflegedienst = 1;
			}
			else
			{
				$this->view->pflegedienst = 0;
			}

			/* ----------------Patient - Contact person -------------------------------------- */
			$pc = new ContactPersonMaster();
			$pcs = $pc->get2PatientContact($ipid);
			if($pcs)
			{
				$this->view->contactperson = 1;
			}
			else
			{
				$this->view->contactperson = 0;
			}

			$fd = new FamilyDegree();
			$this->view->familydegree = $fd->getFamilyDegrees(1);

			/* ----------------Patient - Ambulanter Hospizdienst -------------------------------------- */
			$hp_assoc = new PatientHospiceassociation ();
			$hp_assoc_array = $hp_assoc->getPatientHospiceassociation($ipid);

			if($hp_assoc_array)
			{
				$this->view->hospizdienst = 1;
			}
			else
			{
				$this->view->hospizdienst = 0;
			}
		}


		/* ------------------------------ SAVE FORM BEFORE DISPLAY --------------------------------- */
		if($this->getRequest()->isPost() && strlen($_POST['pdf_export']) == 0)
		{
			//var_dump($_POST); exit;
		/* ----------------Patient save sapv questionaire -------------------------------------- */
			$init = new Application_Form_MdkSapvQuestionnaire();
		//var_dump($_POST); exit;
			if($_REQUEST['qid'])
			{
				$resultmdk = $init->updateSapvQuestionnaire($_POST, $_REQUEST['qid'], $ipid, $userid);
				if($resultmdk)
				{
					//formular editat
					$custcourse = new PatientCourse();
					$custcourse->ipid = $ipid;
					$custcourse->course_date = date("Y-m-d H:i:s", time());
					$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					$comment = "Hospizbedarfsbogen 2020 wurde editiert";//TODO-3892 Ancuta 22.02.2021
					$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					$custcourse->user_id = $userid;
					$custcourse->recordid = $_REQUEST['qid'];
					$custcourse->tabname = Pms_CommonData::aesEncrypt(addslashes('mdk_sapv_questionnaire'));
					$custcourse->save();
				}
			}
			else
			{
				$resultmdk = $init->insertSapvQuestionnaire($_POST, $ipid, $userid);
				if($resultmdk)
				{
					//formular editat
					$custcourse = new PatientCourse();
					$custcourse->ipid = $ipid;
					$custcourse->course_date = date("Y-m-d H:i:s", time());
					$custcourse->course_type = Pms_CommonData::aesEncrypt("K");
					$comment = "Hospizbedarfsbogen 2020 wurde hinzugefügt";//TODO-3892 Ancuta 22.02.2021
					$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($comment));
					$custcourse->user_id = $userid;
					$custcourse->recordid = $_REQUEST['qid'];
					$custcourse->tabname = Pms_CommonData::aesEncrypt(addslashes('mdk_sapv_questionnaire'));
					$custcourse->save();
				}
			}

			if($resultmdk)
			{
				/* ----------------Patient save stammdatten -------------------------------------- */
				//update the patient >> Stammdaten >> Pflegegrade
				foreach($_POST['pflegestufe'] as $kpf=>$vpf)
				{
					if($vpf >= '0' && $vpf <= '5')
					{
						$post_pflegeversicherung = array(
								"modname" => "MaintainanceStage",
								"fldname" => "stage",
								"chkval" => $vpf,
								"patid" => $_GET['id'],
								"formid" => "grow7",
								"ipid" => $ipid,
							);
					}
					if($vpf == '6')
					{
						$post_erstantrag = array(
								"modname" => "MaintainanceStage",
								"fldname" => "erstantrag",
								"chkval" => 1,
								"patid" => $_GET['id'],
								"formid" => "grow7",
								"ipid" => $ipid,
						);
					}
					if($vpf == '7')
					{
						$post_horherstufung = array(
								"modname" => "MaintainanceStage",
								"fldname" => "horherstufung",
								"chkval" => 1,
								"patid" => $_GET['id'],
								"formid" => "grow7",
								"ipid" => $ipid,
						);
					}
				}
					$mainform = new Application_Form_PatientMaintainanceStage();
					$pms =  new PatientMaintainanceStage();
					$current_pms = $pms->getLastpatientMaintainanceStage($ipid);

					if($post_pflegeversicherung)
					{

						if( ! empty($current_pms)){

							$dg = Doctrine::getTable('PatientMaintainanceStage')->find($current_pms[0]['id']);
							$dg->stage = $post_pflegeversicherung['chkval'];
							$dg->erstantrag = $post_pflegeversicherung['erstantrag'];
							$dg->horherstufung = $post_pflegeversicherung['horherstufung'];
							$dg->save();
						}
						else
							{ // no saved data ? ? ?? ?
							//$frm = new PatientMaintainanceStage();
							$pms->ipid = $post_pflegeversicherung['ipid'];
							$pms->stage = $post_pflegeversicherung['chkval'];
							$pms->erstantrag = $post_pflegeversicherung['erstantrag'];
							$pms->horherstufung = $post_pflegeversicherung['horherstufung'];
							$pms->fromdate = date("Y-m-d",time());
							$pms->save();
						}

						$history = new BoxHistory();
						$history->ipid = $ipid;
						$history->clientid = $clientid;
						$history->fieldname = $post['fldname'];
						$history->fieldvalue = $post['chkval'];
						$history->formid = $post['formid']; //grow7
						$history->save();
					}
					if($post_erstantrag)
					{
						/* $q = Doctrine_Query::create()
						 ->update('PatientMaintainanceStage')
						 ->set('erstantrag', '?', $_GET['chkval'])
						 ->where("ipid= ?", $ipid)
						 ->andwhere('tilldate="0000-00-00"')
						 ->limit(1)
						 ->orderBy('id desc');
						 $q->execute(); */

						if( ! empty($current_pms)){
							$dg = Doctrine::getTable('PatientMaintainanceStage')->find($current_pms[0]['id']);
							$dg->erstantrag = $post_erstantrag['chkval'];
							if($post_erstantrag['chkval'] == "1"){
								$dg->e_fromdate = date('Y-m-d');
							} else{
								$dg->e_fromdate = "0000-00-00";
							}
							$dg->save();
						}

					}
					if($post_horherstufung)
					{
						/* $q = Doctrine_Query::create()
						 ->update('PatientMaintainanceStage')
						 ->set('horherstufung','?', $_GET['chkval'])
						 ->where("ipid= ?", $ipid)
						 ->andwhere('tilldate="0000-00-00"');
						 $q->execute(); */

						if( ! empty($current_pms)){
							$dg = Doctrine::getTable('PatientMaintainanceStage')->find($current_pms[0]['id']);
							$dg->horherstufung = $post_horherstufung['chkval'];
							if($post_horherstufung['chkval'] == "1"){
								$dg->h_fromdate = date('Y-m-d');
							} else{
								$dg->h_fromdate = "0000-00-00";
							}
							$dg->save();
						}
					}
					//added family doctor
					//var_dump($_POST); exit;
					if($_POST['hidd_docid'] != "")
					{
						$docform = new Application_Form_Familydoctor();
						$docinfo = $docform->InsertFromTabData($_POST);


						$f_post['hidd_docid'] = $docinfo->id;


						//var_dump($fdoc->id); exit;
						$fdoctor_form = new Application_Form_PatientMaster();

						$fdoctor_form->UpdateFamilydoc($f_post);
					}

					//added pflegedienste
					if($_POST['hidd_pflegeid'] != "")
					{
						$docform = new Application_Form_Pflegedienstes();
						$docinfo = $docform->InsertFromTabData($_POST);

						if($docinfo)
						{
							$pfl_cl = new PatientPflegedienste();
							$pfl_cl->ipid = $ipid;
							$pfl_cl->pflid = $docinfo->id;
							$pfl_cl->save();
						}
					}
					//added hospisdienst
					if($_POST[hidd_h_association_id] != "")
					{
						$pfl_cl = new PatientHospiceassociation();
						$pfl_cl->ipid = $ipid;
						$pfl_cl->h_association_id = $_POST['hidd_h_association_id'];
						$pfl_cl->h_association_comment = $_POST['h_association_comment'];
						$pfl_cl->save();
					}
					//added contact person
					if($_POST['cnt_first_name'] != "" || $_POST['cnt_last_name'] != "")
					{
						$contact_form = new Application_Form_ContactPersonMaster();

						$a_post = $_POST;
						$a_post['ipid'] = $ipid;
						//var_dump($a_post); exit;
						if($contact_form->validate($_POST))
						{
							$cf_response = $contact_form->InsertDataSingle($a_post, true);
						}
					}
					//update more info port, peg, zkv
					$pmi = new PatientMoreInfo();
					$pmidb = $pmi->getpatientMoreInfoData($ipid);

					$moreinfoarray = array('port', 'peg', 'zvk');
					$data = array();

					foreach($moreinfoarray as $kmi=>$vmi)
					{
						$post_mi[] = array(
								"modname" => "MoreInfo",
								"fldname" => $vmi,
								"chkval" => $_POST[$vmi],
								"patid" => $_GET['id'],
								"formid" => "grow20",
								"ipid" => $ipid,
						);
						$data[$vmi] = $_POST[$vmi];
					}
					if ($pmidb)
					{
						$data['id'] = $pmidb[0]['id'];
					}
					else
					{
						$data['id'] = '0';
					}
					$pmif = new Application_Form_PatientMoreInfo();
					$result = $pmif->InsertMoreInfoData($ipid,$data);
					if($result)
					{
						//var_dump($post_mi); exit;
						foreach($post_mi as $kpmi=>$vpmi)
						{
							if(is_null($vpmi['chkval']) &&($vpmi['fldname'] == 'port' || $vpmi['fldname'] == 'peg'))
							{
								$q = Doctrine_Query::create()
								->update('Patient' . $vpmi['modname'] . '')
								->set($vpmi['fldname'] . 'more', "''")
								->where("ipid= ?", $ipid);
								$q->execute();

								$history = new BoxHistory();
								$history->ipid = $ipid;
								$history->clientid = $clientid;
								$history->fieldname = $vpmi['fldname'] . 'more';
								$history->fieldvalue = $vpmi['chkval'];
								$history->formid = $vpmi['formid'];
								$history->save();
							}
							else
							{
								$history = new BoxHistory();
								$history->ipid = $ipid;
								$history->clientid = $clientid;
								$history->fieldvalue = $vpmi['chkval'];
								$history->formid = $vpmi['formid'];
								$history->save();
							}
						}
					}
					//update the patient >> Stammdaten >> Ausscheidung DK
					$post_ausscheidung = array(
						"modname" => "Ausscheidung",
						"fldname" => "ausscheidung",
						"chkval" => implode(',', $_POST['ausscheidung']),
						"patid" => $_GET['id'],
						"formid" => "grow21",
						"ipid" => $ipid,
					);

					//var_dump($_POST['ausscheidung']);exit;
					$pst = new Application_Form_Stammdatenerweitert();
					$pst->InsertStamdatenData($post_ausscheidung);
					//update the patient >> Stammdaten >> Patientenverfuengung
					$pacp = new PatientAcp();
					$pacparray = $pacp->getByIpid( array($ipid) );

					foreach($pacparray as $kp=>$vp)
					{
						foreach($vp as $kpd=>$vpd)
						{
							if($vpd['division_tab'] == 'living_will')
							{
								$id_living_will = $vpd['id'];
							}
						}
					}
					//var_dump($pacparray); exit;

				if($_POST['living_will_yes'])
				{
					if($id_living_will)
					{
						$data = array('division_tab'=>'living_will', 'active'=>'yes', 'id'=>$id_living_will);
					}
					else {
						$data = array('division_tab'=>'living_will', 'active'=>'yes', 'id'=>'0');
					}
					$post_patver = array(
							"modname" => "Acp",
							"fldname" => "active",
							"chkval" => $_POST['lliving_will_yes'],
							"patid" => $_GET['id'],
							"formid" => "grow6",
							"ipid" => $ipid,
					);
				}
				elseif($_POST['living_will_no'])
				{
					if($id_living_will)
					{
						$data = array('division_tab'=>'living_will', 'active'=>'no', 'id'=>$id_living_will);
					}
					else {
						$data = array('division_tab'=>'living_will', 'active'=>'no', 'id'=>'0');
					}
					$post_patver = array(
							"modname" => "Acp",
							"fldname" => "active",
							"chkval" => $_POST['living_will_no'],
							"patid" => $_GET['id'],
							"formid" => "grow6",
							"ipid" => $ipid,
					);
				}

					//var_dump($_POST['ausscheidung']);exit;
					$pst = new Application_Form_PatientACP();
					$pst->save_form_acp($ipid , $data);

					$history = new BoxHistory();
					$history->ipid = $ipid;
					$history->clientid = $clientid;
					$history->fieldvalue = $post_patver['chkval'];
					$history->formid = $post_patver['formid'];
					$history->save();
			}
				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
			}

		/* ------------------------------ PDF  ------------------------------------- */

		if($this->getRequest()->isPost() && strlen($_POST['pdf_export']) > 0)
		{
			$post = $_POST;
			$post['stamp_block'] = str_replace('<br/>', "%r%", $post['stamp_block']);
			$post['stamp_block'] = htmlentities($post['stamp_block']);
			$post['stamp_block'] = str_replace("%r%", "<br/>", $post['stamp_block']);
			$post['second_header'] = '1';
			$post['height'] = $this->view->height;
            $post['weight'] = $this->view->weight;

			//$post['patient_health_insurance'] = $this->view->patient_health_insurance;
			//$post['patient_lname'] = $this->view->patient_lname;
			//$post['patient_fname'] = $this->view->patient_fname;
			//$post['patient_birthd'] = $this->view->patient_birthd;
			//$post['patient_address'] = $this->view->patient_address;
			//$post['medications_pdf'] = $this->view->medications_pdf;
			//$post['bedarfsmedications_pdf'] = $this->view->bedarfsmedications_pdf;
			//$post['ivmedications_pdf'] = $this->view->ivmedications_pdf;
			//TODO-3892 Ancuta 22.02.2021- changed from mdksapvquestionnaire to mdksapvquestionnaire2020
			//$this->generatePdfNew(3, $post, 'mdksapvquestionnaire', "mdksapv_questionnaire2020_pdf.html");
			$this->generatePdfNew(3, $post, 'mdksapvquestionnaire2020', "mdksapv_questionnaire2020_pdf.html");
			//--
		}
	}
	

	public function anlage3nordrheinnewAction()
	{
		//ISPC - 2200 - for NORDRHEIN we have a new form Teilnahmeerklärung (Anlage 3)
		$logininfo = new Zend_Session_Namespace('Login_Info');
	
		$decid = Pms_Uuid::decrypt($_GET['id']);
		$ipid = Pms_CommonData::getIpId($decid);
		$patientmaster = new PatientMaster();
		$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
		$parr = $patientmaster->getMasterData($decid, 0);
		
		$tm = new TabMenus();
		$this->view->tabmenus = $tm->getMenuTabs();
		/* --------------------------------------- */
	
		/* Patient - Details */
		$data['kv_header']['patientname'] = $parr['last_name'] . ", " . $parr['first_name'] . "\r\n" . $parr['street1'] . "\r\n" . $parr['zip'] . " " . $parr['city'];
		$data['kv_header']['patientaddress'] = $parr['street1'] . "\r\n" . $parr['zip'] . " " . $parr['city'];
		$data['kv_header']['pataddress'] = $parr['street1'] . ", " . $parr['zip'] . " " . $parr['city'];
		$data['kv_header']['patname'] = $parr['last_name'] . ", " . $parr['first_name'];
		$data['kv_header']['patbirth'] = $parr['birthd'];
		$data['kv_header']['epid'] = $epid;
	
		/* Patient - Health insurance */
		$phelathinsurance = new PatientHealthInsurance();
		$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
	
		$data['kv_header']['insurance_company_name'] = $healthinsu_array[0]['company_name'];
		$data['kv_header']['insurance_no'] = $healthinsu_array[0]['insurance_no'];
		$data['kv_header']['insurance_status'] = $healthinsu_array[0]['insurance_status'];
		$data['kv_header']['kvnumber'] = $healthinsu_array[0]['kvk_no'];
	
		/* User - Info */
		$userst = Doctrine::getTable('User')->find($logininfo->userid);
		if($userst)
		{
			$uarray = $userst->toArray();
			$data['kv_header']['arzt_nr'] = $uarray['LANR'];
			$data['kv_header']['betriebsstatten_nr'] = $uarray['betriebsstattennummer'];
		}
	
		/* Client - Info */
		$clientdata = Pms_CommonData::getClientData($logininfo->clientid);
		$data['content']['client_team_name'] = $clientdata[0]['team_name'];
		$data['content']['client_city'] = $clientdata[0]['city'];
		$data['content']['betriebsstattennummer'] = $clientdata[0]['betriebsstattennummer'];
		
		$this->view->form_data = $data;
		
		if($this->getRequest()->isPost())
		{
			$this->generatePdfNew(3, $_POST, 'anlage3nordrhein_new', "anlage3nordrheinnewpdf.html");
		}
	}
	
	
	public function brekinderperformanceAction()
	{

	    $clientid = $this->logininfo->clientid;
	    $userid = $this->logininfo->userid;
	    
	    
	    // language is an array
	    $page_lang = $this->translate ( 'brekinder_invoice_lang' );
	    
	    // save a formular
	    if ($this->getRequest ()->isPost ()) {
	        
	        if ($_POST ['form_action'] == "save" || $_POST ['form_action'] == "save_and_pdf" || $_POST ['form_action'] == "reset") {
	    
	            $form_obj = new Application_Form_BreKinderPerformance ( array (
	                '_patientMasterData' => $this->_patientMasterData,
	                '_block_name' => 'brekindercontrol'
	            ) );
	    
	            if ($form_obj->validate ( $_POST )) {
	                 
	                if ($_POST ['form_action'] == "save") {
	                    $form_obj->insert ( $_POST );
	                     
	                    // empty the post by using a redirect
	                    $controller = $this->getRequest ()->getControllerName ();
	                    $action = $this->getRequest ()->getActionName ();
	                    $this->redirect ( APP_BASE . $controller . "/" . $action . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ) . "&selected_month=" . $_POST['selected_month'], array (
	                        // 						$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ) . "&selected_month=" . $query_date, array (
	                        "exit" => true
	                    ) );
	                } elseif ($_POST ['form_action'] == "save_and_pdf") {
	                    $form_obj->insert ( $_POST );
	                    // print the pdf also
	                    // the print is performed at the end of this function, so we have all the data
	                } elseif ($_POST ['form_action'] == "reset") {
	                    $form_obj->reset ( $_POST );
	                    // print the pdf also
	                    // the print is performed at the end of this function, so we have all the data
	                }  
	            }
	        }
	    }
	    
	    
	    $patientmaster = new PatientMaster();
	    $this->enc_id = $_GET['id'];
	     
	    if (is_null($this->dec_id)) {
	        $decid = Pms_Uuid::decrypt($_GET['id']);
	        $decid = empty($decid) ? 0 : $decid;
	        $this->dec_id = $decid;
	    }
	    
	    
	    if (is_null($this->ipid)) {
	        $ipid = Pms_CommonData::getIpid($this->dec_id);
	        $ipid = empty($ipid) ? 0 : $ipid;
	        $this->ipid = $ipid ;
	    }
	    $ipid = $this->ipid ;
	    if (is_null($this->_patientMasterData)) {
	        $this->view->patientinfo = $patientmaster->getMasterData($this->dec_id,1);
	        $this->_patientMasterData = $patientmaster->get_patientMasterData();
	    }
	    // patient details
	    $patient_data = array();
	    $patient_data['city'] = $this->_patientMasterData['city'];
	    $patient_data['name'] = $this->_patientMasterData['first_name'].' '. $this->_patientMasterData['last_name'];
	    $patient_data['last_name'] = $this->_patientMasterData['last_name'];
	    $patient_data['first_name'] = $this->_patientMasterData['first_name'];
	    $patient_data['street'] = $this->_patientMasterData['street1'];
	    $patient_data['address_zip_city'] = $this->_patientMasterData['zip'].' '.$this->_patientMasterData['city'];
	    $patient_data['birthd'] = $this->_patientMasterData['birthd'];
	   
	    
	    //dd($patient_data);
	    $this->view->patient_data = $patient_data;
	   
	    $InvoiceSystem_obj =new InvoiceSystem();
	    $locations = $InvoiceSystem_obj->invoice_locations_mapping('bre_kinder_invoice');
	    $locations_types = array_keys($locations);
	    
        $loc_types2loc_ident = array();
        foreach ($locations as $loc_ident => $loc_details) {
            foreach ($loc_details['location_type'] as $k => $loc_type) {
                $loc_types2loc_ident[$loc_type] = $loc_ident;
            }
        }

	    $this->view->locations_types = $locations_types;
	    
	    // patient days
	    // Get patients active days- create months
	    $conditions['periods'][0]['start'] = '2009-01-01';
	    $conditions['periods'][0]['end'] = date('Y-m-d');
	    $conditions['client'] = $this->logininfo->clientid;
	    $conditions['ipids'] = array( $this->ipid);
	    
	    //beware of date d.m.Y format here
	    $patient_days = Pms_CommonData::patients_days($conditions);
	    //get number of days in each month + start/end day START
	    
	    foreach ($patient_days as $k_patient => $patient_data_details) {
	        foreach ($patient_data_details['locations'] as $pat_location_row_id => $pat_location_data) {
	            foreach ($pat_location_data['days'] as $kl => $lday) {
	                if (in_array($lday, $patient_data_details['real_active_days'])) {
	        
	                    if (empty($pat_location_data['type'])) {
	                        $pat_location_data['type'] = 0;
	                    }
	        
	                    if ($pat_location_data['discharge_location'] != 1) {
	                        $patient_days2locationtypes[$k_patient][$lday][] = $pat_location_data['type'];
	                    }
	                }
	            }
	        } 
	    }

	    foreach ($patient_days2locationtypes as $pipid => $locdata) {
	        foreach ($locdata as $loc_day => $day_loc_types) {
	            $del_val = "1";
	            if (! in_array($loc_day, $hospital_days_cs_dmY[$pipid]) && ($key = array_search($del_val, $day_loc_types)) !== false) {
	                unset($patient_days2locationtypes[$pipid][$loc_day][$key]);
	            }
	        }
	    }
	    // dd($patient_active_days,$patient_days2locationtypes,$hospital_days_cs_dmY);
	    foreach ($patient_days2locationtypes as $pipid => $locdata) {
	        foreach ($locdata as $loc_day => $day_loc_types) {
	            $patient_days2locationtypes[$pipid][$loc_day] = $loc_types2loc_ident[end($day_loc_types)];
	        }
	    }
	    
	    
	    $patient_active_days = array();
	    $patient_active_days = $patient_days[ $this->ipid]['real_active_days'];
	    if(!empty($patient_days[ $this->ipid]['hospital']['real_days_cs']) && !empty($patient_days[ $this->ipid]['real_active_days'])){
	        $patient_active_days = array_diff($patient_days[ $this->ipid]['real_active_days'],$patient_days[ $this->ipid]['hospital']['real_days_cs']);
	    }
	    
	    foreach($patient_days[ $this->ipid]['active_periods'] as $k_period => $v_period)
	    {
	        $last_active = end($patient_days[ $this->ipid]['active_periods']);
	        if($v_period['end'] == $last_active['end'])
	        {
	            $v_period['end'] = date('Y-m-d', strtotime($v_period['end']));
	        }
	         
	        $months = Pms_CommonData::get_period_months($v_period['start'], $v_period['end'], 'Y-m');
	        if(empty($patient_active_months))
	        {
	            $patient_active_months = array();
	        }
	        $patient_active_months = array_merge($patient_active_months, $months);
	    }
	    
	    $patient_active_months = array_values($patient_active_months);
	    
	    foreach($patient_active_months as $k_month => $v_month)
	    {
	        if(!function_exists('cal_days_in_month'))
	        {
	            $month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
	        }
	        else
	        {
	            $month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
	        }
	    
	        $months_details[$v_month]['start'] = $v_month . "-01";
	        $months_details[$v_month]['days_in_month'] = $month_days;
	        $months_details[$v_month]['end'] = $v_month . '-' . $month_days;
	    
	        $month_select_array[$v_month] = $v_month;
	    }
	    
	    $months = $month_select_array;
	    $months = array_values(array_unique($months));
	    // the selected month from get/post
	    $query_date = isset ( $_REQUEST ['selected_month'] ) ? date ( "Y-m", strtotime ( $_REQUEST ['selected_month'] ) ) : $patient_active_months[0];
	    $this->view->selected_month = $query_date;
	    $selected_month = $query_date;
	    $attrs['onChange'] = 'changeMonth(this.value);';
	    $attrs['class'] = 'select_month_bra_sapv';
	    
	    $this->view->months_selector = $this->view->formSelect("selected_month", $selected_month, $attrs, $month_select_array);
	    $current_period = $months_details[$selected_month];
	    $current_period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end']);
	    $this->view->month_days = $current_period_days;
	    
	    // test
// 	    $current_period ['start'] = "2018-06-01";
// 	    $current_period ['end'] = "2018-07-31";
	    
	    $period_days_arr = $patientmaster->getDaysInBetween ( $current_period ['start'], $current_period ['end'] );
	    array_walk($period_days_arr, function(&$value) {
	        $value = date('d.m.Y', strtotime($value));
	    });
	    
	    // curent period
	    $conditions['periods'][0]['start'] = $current_period['start'];
	    $conditions['periods'][0]['end'] = $current_period['end'];
	    $conditions['client'] = $clientid;
	    $conditions['ipids'] = array(
	        $ipid
	    );
	    $conditions['include_standby'] = true;
	    $patient_days = Pms_CommonData::patients_days($conditions);
	    
	    // final resulted data
	    $hospital_days_cs = $patient_days[$ipid]['hospital']['real_days_cs'];
	    $hospiz_days_cs = $patient_days[$ipid]['hospiz']['real_days_cs'];
	    // $hospital_overall_days_cs = $patient_days_overall[$ipid]['hospital']['real_days_cs'];
	    $active_days_in_period_cs = $patient_days[$ipid]['real_active_days'];
	    $treatment_days_cs = $patient_days[$ipid]['treatment_days'];
	    $active_days_cs = $patient_days[$ipid]['active_days'];
	    $this->view->active_days = $active_days_cs;
	    
	    
	    
	    // client details START
	    $Client_obj=  new Client();
	    $clientdata = $Client_obj->fetchById($clientid);
	    $client_details['client_name'] = $clientdata[$clientid]['team_name'];
	    $client_details['client_city'] = $clientdata[$clientid]['city'];
	    $client_details['client_street'] = $clientdata[$clientid]['street1'];
	    $client_details['client_zip'] = $clientdata[$clientid]['postcode'];
	    $client_details['client_phone'] = $clientdata[$clientid]['phone'];
	    $client_details['client_fax'] = $clientdata[$clientid]['fax'];
	    $client_details['client_email'] = $clientdata[$clientid]['emailid'];
	    $client_details['institutskennzeichen'] = $clientdata[$clientid]['institutskennzeichen'];
	    
	    $this->view->lbg_client_name = $client_details['client_name'];
	    
	    $client_details['address'] = $client_details['client_street'];
	    
	    if ($client_details['client_zip']) {
	        $client_details['address'] .= ', ' . $client_details['client_zip'];
	    }
	    
	    if ($client_details['client_city']) {
	        $client_details['address'] .= ', ' . $client_details['client_city'];
	    }
	    $this->view->client_details = $client_details;
	    $this->view->lbg_address = $client_details['address'];
	    $lbg_ik_nummer = $client_details['institutskennzeichen'];
	    $this->view->lbg_ik_nummer = $lbg_ik_nummer;
	    
	    // client details END
	    
	    
	    
	    // get health insurance data START
	    $hi_perms = new HealthInsurancePermissions();
	    $divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
	    $hi_perms_divisions = $divisions;
	    
	    $phelathinsurance = new PatientHealthInsurance();
	    $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
	    $this->view->health_insurance_name = $healthinsu_array[0]['company_name'];
	    $this->view->health_insurance_ik = $healthinsu_array[0]['institutskennzeichen'];
	    $this->view->health_insurance_kassenr = $healthinsu_array[0]['kvk_no'];
	    $this->view->healthinsurance_versnr = $healthinsu_array[0]['insurance_no'];
	    
	    if (! empty($healthinsu_array[0]['companyid']) && $healthinsu_array[0]['companyid'] != 0) {
	        $helathins = Doctrine::getTable('HealthInsurance')->find($healthinsu_array[0]['companyid']);
	        $healtharray = $helathins->toArray();
	    
	        if (empty($healthinsu_array[0]['name'])) {
	            $healthinsu_array[0]['name'] = $healtharray['name'];
	        }
	        if (empty($healthinsu_array[0]['ins_street'])) {
	            $healthinsu_array[0]['ins_street'] = $healtharray['street1'];
	        }
	        if (empty($healthinsu_array[0]['ins_city'])) {
	            $healthinsu_array[0]['ins_city'] = $healtharray['city'];
	        }
	        if (empty($healthinsu_array[0]['ins_zip'])) {
	            $healthinsu_array[0]['ins_zip'] = $healtharray['zip'];
	        }
	    
	        if (strlen($healthinsu_array[0]['company_name']) == 0) {
	            $this->view->health_insurance_name = $healtharray['name'];
	        }
	    
	        if (strlen($healthinsu_array[0]['institutskennzeichen']) == 0) {
	            $this->view->health_insurance_ik = $healtharray['iknumber'];
	        }
	    
	        if (strlen($healthinsu_array[0]['kvk_no']) == 0) {
	            $this->view->health_insurance_kassenr = $healtharray['kvnumber'];
	        }
	    }
	    
	    if ($hi_perms_divisions) {
	        $healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
	        $healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions($ipid, $healthinsu_array[0]['companyid']);
	    }
	    $pathealthinsurancenr = "";
	    
	    
	    if (count($healthinsu_array[0])) {
	        $phi_details = $healthinsu_array[0]['company_name'];
	    } else {
	        $phi_details = "--";
	    }
	    
	    if (strlen(trim(rtrim($healthinsu_subdiv_arr[3]['name']))) == '0' && strlen(trim(rtrim($healthinsu_subdiv_arr[3]['street1']))) == '0') {
	        $phi_name = $healthinsu_array[0]['company_name'];
	        $phi_details_sub = $healthinsu_array[0]['company_name'] . '<br/> ' . $healthinsu_array[0]['ins_insurance_provider'] . '<br/> ' . $healthinsu_array[0]['ins_street'] . '<br/> ' . $healthinsu_array[0]['ins_zip'] . ' ' . $healthinsu_array[0]['ins_city'];
	    } else {
	        $phi_name = $healthinsu_subdiv_arr[3]['name'];
	        $phi_details_sub = $healthinsu_subdiv_arr[3]['name'] . '<br/> ' . $healthinsu_subdiv_arr[3]['insurance_provider'] . '<br/> ' . $healthinsu_subdiv_arr[3]['street1'] . '<br/> ' . $healthinsu_subdiv_arr[3]['zip'] . ' ' . $healthinsu_subdiv_arr[3]['city'];
	    }
	    
	    $this->view->health_insurance = $phi_details;
	    $this->view->hi_subdiv_address = $phi_details_sub;
	    // get health insurance data END
	    
	    
	    
	    
	    /* ---------------------------------------------------------------------------- */
	    // get pflegestuffe for current period START
	    $pflege = new PatientMaintainanceStage();
	    $pflege_arr = $pflege->getpatientMaintainanceStageInPeriod($ipid, $current_period['start'], $current_period['end']);
	    if ($pflege_arr) {
	        $last_pflege = end($pflege_arr);
	        $this->view->patient_pflegestufe = $last_pflege['stage'];
	    } else {
	        $this->view->patient_pflegestufe = ' - ';
	    }
	    // get pflegestuffe for current period END
	    
	    
	    
	    /* ---------------------------------------------------------------------------- */
	    // contact froms details
	    // get client users
	    $user = new User();
	    $c_users = $user->getUserByClientid($clientid, 0, true);
	    
	    foreach ($c_users as $k_c_users => $v_c_users) {
	        $client_users[$v_c_users['id']] = $v_c_users;
	    }
	    
	    // get contact forms START
	    // get deleted cf from patient course
	    $deleted_cf = Doctrine_Query::create()->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
	    ->from('PatientCourse')
	    ->where('wrong=1')
	    ->andWhere("ipid=?",$ipid)
	    ->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
	    ->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
	    ->andWhere('source_ipid = ""');
	    $deleted_cf_array = $deleted_cf->fetchArray();
	    
	    $excluded_cf_ids[] = '99999999999';
	    foreach ($deleted_cf_array as $k_dcf => $v_dcf) {
	        $excluded_cf_ids[] = $v_dcf['recordid'];
	    }
	    
	    // get cf in period - deleted cf
	    $cf = new ContactForms();
	    $p_contactforms = $cf->get_contact_form_period($ipid, $current_period, $excluded_cf_ids);
	    
	    $contact_forms_ids[] = '9999999999999';
	    foreach ($p_contactforms as $kk_cf => $vv_cf) {
	        $contact_forms_ids[] = $vv_cf['id'];
	    }
	    
	    $block_aditional_users = new FormBlockAdditionalUsers();
	    $block_au_data = $block_aditional_users->getPatientFormBlockAdditionalUsers($ipid, $contact_forms_ids, false, true);
	    
	    $cnt = array();
	    $contact2dates = array();
	    foreach ($p_contactforms as $k_cf => $v_cf) {
	        $visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));
	    
	        $contact2dates[$visit_date][$v_cf['id']]['start_date'] = $v_cf['start_date'];
	        $contact2dates[$visit_date][$v_cf['id']]['end_date'] = $v_cf['end_date'];
	        $contact2dates[$visit_date][$v_cf['id']]['del_id'] = 'cf_' . $v_cf['id'];
	        $contact2dates[$visit_date][$v_cf['id']]['date'] = $v_cf['billable_date'];
	        $contact2dates[$visit_date][$v_cf['id']]['extra_forms'] = '0';
	        $has_creator = false;
	    
	        if (count($block_au_data[$v_cf['id']]) != 0) {
	            foreach ($block_au_data[$v_cf['id']] as $k_block_au_data => $v_block_au) {
	                $visit_user = $client_users[$v_block_au['additional_user']];
	                if ($v_block_au['creator'] == '1') {
	                    $has_creator = true;
	                }
	    
	                if (count($client_users[$v_block_au['additional_user']]) != 0) {
	                    if (strlen($visit_user['shortname']) > '0') {
	                        $contact2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = $visit_user['shortname'];
	                    } else {
	                        // $contact2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(substr($visit_user['first_name'], 0, 1) . substr($visit_user['last_name'], 0, 1));
	                        $contact2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(mb_substr($visit_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_user['last_name'], 0, 1, "UTF-8"));
	                    }
	                }
	            }
	        }
	    
	        if (count($block_au_data[$v_cf['id']]) == '0' || $has_creator === false) {
	            $visit_create_user = $client_users[$v_cf['create_user']];
	            if (count($client_users[$v_cf['create_user']]) != 0) {
	                if (strlen($visit_user['shortname']) > '0') {
	                    $contact2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = $visit_create_user['shortname'];
	                } else {
	                    // $contact2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(substr($visit_create_user['first_name'], 0, 1) . substr($visit_create_user['last_name'], 0, 1));
	                    $contact2dates[$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(mb_substr($visit_create_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_create_user['last_name'], 0, 1, "UTF-8"));
	                }
	            }
	        }
	    
	        $cnt[$visit_date][] = $v_cf['id'];
	    }
	    // get contact forms END
	    
	    /* ---------------------------------------------------------------------------- */
	    // phone calls details START
	    // XT and V actions
	    $course_arr = array();
	    $course_shortcuts = array("XT","V");
	    $PatientCourse_obj= new PatientCourse();
	    $course_arr = $PatientCourse_obj->get_patients_period_course_by_shortcuts(array($ipid),$course_shortcuts,false,false,true);
	    
	    if( ! empty($course_arr)){
            foreach($course_arr[$ipid] as $cs_date=>$couse_sh_arr)
            {
                foreach($couse_sh_arr as $k=>$cs_values)
                {
                    $coursearr = explode("|", $cs_values['course_title']);
                    $time = $coursearr[0];
                    $komment = $coursearr[1];
                    $phone_date = date('Y-m-d', strtotime($coursearr[2]));
                    $start_date = date('d.m.Y H:i:s', strtotime($coursearr[2]));
                    $phone_action = date('Y-m-d H:i:s', strtotime($coursearr[2]));
                    
                    
                    $duration = $coursearr[0];
                    $minutes = "";
                    $minutes = "+".$duration." minutes";
                    $end_date = date("d.m.Y H:i:s",strtotime($minutes, strtotime($coursearr[2])));
                    
                    $contact2dates[$phone_date][$cs_values['id']]['start_date'] = $start_date;
                    $contact2dates[$phone_date][$cs_values['id']]['end_date'] = $end_date;
                    $contact2dates[$phone_date][$cs_values['id']]['del_id'] = 'pc_' . $cs_values['id'];
                    $contact2dates[$phone_date][$cs_values['id']]['date'] = $cs_values['course_date'];
                    
                    if (strlen($client_users[$cs_values['create_user']]['shortname']) > '0') {
                        $contact2dates[$phone_date][$cs_values['id']]['user_shortcuts'][$cs_values['create_user']] = $client_users[$cs_values['create_user']]['shortname'];
                    } else {
                        $contact2dates[$phone_date][$cs_values['id']]['user_shortcuts'][$cs_values['create_user']]= strtoupper(mb_substr($client_users[$cs_values['create_user']]['first_name'], 0, 1, "UTF-8") . mb_substr($client_users[$cs_values['create_user']]['last_name'], 0, 1, "UTF-8"));
                    }
                    
                    $cnt[$phone_date][] = 'pc_' . $cs_values['id'];
                }
	    
	         }
	    }
	    
	    foreach ($contact2dates as $k_cf_dates => $v_cf_dates) {
	        $contact2dates[$k_cf_dates] = array_values($v_cf_dates);
	    }
	    
	    
	    foreach($contact2dates as $knt_day=>$knt_values){
	        if(count($knt_values) >= 3){
	            $contact2dates[$knt_day][2]['extra_forms'] = count($knt_values) -3;
	        }
	        
	    }
	    $visits_array = $contact2dates;
	    $this->view->visits_array = $visits_array;

	    
	    
	    /* ---------------------------------------------------------------------------- */
	    $operations = array(
	        '0' => 'operation_1',
	        '1' => 'operation_2',
	        '2' => 'operation_3'
	    );
	    $this->view->operations = $operations;
	    
	    
	    // saved data - for bre kinder performance (::used also in invoicesd)
	    
	    // get shortcuts and saved pricelist or default pricelist
	    $shortcuts = $InvoiceSystem_obj->invoice_products('bre_kinder_invoice');

	    
	    
	    $totals = array();
	    foreach ($shortcuts  as $k_sh => $v_sh) {
	        $totals[$v_sh] = '0';
	        $totals_pdf[$v_sh] = '0';
	    }
	    
	    // price list
	    $price_list_obj = new PriceList();
	    $master_price_list = array();
	    $master_price_list = $price_list_obj->period_price_list_specific_brekinder($current_period['start'], $current_period['end']);
	    	
	    
	    $bre_perf = new BreKinderPerformance();
	    $patient_period_days_arr[$this->ipid] = $period_days_arr;
	    //only saved actions
	    $saved_products = array();
	    $saved_products  = $bre_perf->saved_performancerecord ( array($this->ipid), $patient_period_days_arr,"form");
	     
	    $this->view->has_saved_data = 0 ;
	    if(!empty($saved_products )){
	        $this->view->has_saved_data = 1;
	    }
	    
	    

	    // saved or set by system
	    $products = array();
	    $products = $bre_perf->get_performancerecord ( array($this->ipid), $patient_period_days_arr,"invoice");
	    
	    
	    $master_data = array();
	    $master_data = $products[$this->ipid];
	    
	    $totals_simple = array();
	    $totals = array();
	    foreach($shortcuts as $k_sh => $v_sh)
	    {
	        $totals[$v_sh] = '0';
	        $totals_simple[$v_sh] = '0';
	    }
	    if( ! empty($products[$this->ipid])){
	        foreach($products[$this->ipid] as $product_id=>$product_data){
	            foreach($product_data as $date => $date_vals){
	                $totals_simple [$product_id]  +=  $date_vals['qty'];
	                $totals [$product_id.'_'.$date_vals['location_type']]  +=  $date_vals['qty'];
	            }
	        }
	    }
	    $this->view->totals_simple = $totals_simple; // this is the final array with the
	    $this->view->saved_data_groups = $products; // this is the final array with the

	    
	    
// 	    dd($master_price_list);
        /*
         * $price_list_obj = new PriceList();
         *
         * // price list
         * $master_price_list = array();
         * $ipids = array($this->ipid);
         * foreach($ipids as $kmp_ipid => $vmp_ipid)
         * {
         * $master_price_list[$vmp_ipid] = $price_list_obj->period_price_list_specific_brekinder($period[$vmp_ipid]['start'], $period[$vmp_ipid]['end']);
         * }
         */
            
        // dd($totals);
            // dd($master_data);
            // dd($master_price_list);
            
        // active days
            // hospiz days
            // hospital days
            
        // price
        if ($this->getRequest()->isPost()) {
            
            if ($_POST['form_action'] == "pdf") {
                $post['post_data'] = $_POST;
                $post['patient_details'] = $patient_data;
                $post['shortcuts'] = $shortcuts;
                $post['health_insurance_name'] = $this->view->health_insurance_name;
                $post['health_insurance_ik'] = $this->view->health_insurance_ik;
                $post['health_insurance_kassenr'] = $this->view->health_insurance_kassenr;
                $post['healthinsurance_versnr'] = $this->view->healthinsurance_versnr;
                $post['patient_pflegestufe'] = $this->view->patient_pflegestufe;
                $post['month_selected'] = date('m.Y', strtotime($current_period['start']));
                $post['totals'] = $totals_pdf; // empty totals per shortcut
                $post['month_days'] = $current_period_days;
                $post['all_sapv_days'] = $all_sapv_days;
                $post['active_days'] = $active_days_cs;
                $post['full_hospital_days'] = $hospital_days_cs;
                $post['hospiz_days_arr'] = $hospiz_days_cs;
                $post['master_price_list'] = $master_price_list;
                $post['current_period'] = $current_period;
                $post['days2verordnet'] = $days2verordnet;
                $post['operations'] = $operations;
                
                $post['lbg_client_name'] = $client_details['client_name'];
                $post['lbg_address'] = $client_details['address'];
                $post['lbg_ik_nummer'] = $client_details['institutskennzeichen'];
                
                $post['all_sapv_days'] = $all_sapv_days;
                $post['visits_array'] = $visits_array;
                
                $post['locations_types'] = $locations_types;
                $post['patient_days2locationtypes'] = $patient_days2locationtypes[$this->ipid];
                
                
//                 dd($post);
                $gen_pdf = $this->generate_pdf($post, 'brekinderperformance', 'brekinderperformance_pdf.html');
                
            }  elseif (! empty($_REQUEST['mode']) && $_REQUEST['mode'] == 'del') {
                /* 
                $del_id_exp = explode('_', $_REQUEST['delid']);

                if (! empty($del_id_exp[1]) && $del_id_exp[0] == 'n') {
                    $nurse = new KvnoNurse();
                    $delete_nurse_visit = $nurse->deleteNurseVisit($del_id_exp[1]);
                    echo '1';
                    exit();
                } else  if (! empty($del_id_exp[1]) && $del_id_exp[0] == 'd') {
                    $doctor_visit = new KvnoDoctor();
                    $delete_doc_visit = $doctor_visit->deleteDoctorVisit($del_id_exp[1]);
                    echo '1';
                    exit();
                } else  if (! empty($del_id_exp[1]) && $del_id_exp[0] == 'cf') {
                    $contact_forms = new ContactForms();
                    $delete_contact_forms = $contact_forms->deleteContactForm($del_id_exp[1], $ipid);
                    echo '1';
                    exit();
                }
                 */
            }
        }  
        
        $this->view->shortcuts = $shortcuts;
        $this->view->saved_data = $saved_data;
        $this->view->master_data = $master_data;
        $this->view->month_days = $current_period_days;
        $this->view->all_sapv_days = $all_sapv_days;
        $this->view->active_days = $active_days_cs;
        $this->view->full_hospital_days = $hospital_days_cs;
        $this->view->full_hospiz_days = $hospiz_days_cs;
        $this->view->hospiz_days_arr = $hospiz_days_cs;
        $this->view->master_price_list = $master_price_list;
        $this->view->current_period = $current_period;
        $this->view->totals = $totals;
        $this->view->days2verordnet = $days2verordnet;
	}
	
	/**
	 * ISPC - 2192 - new version of Pflegverordnung(patient/careregulation)
	 * @carmen 07.06.2018
	 */
	public function careregulationnewAction()
	{
		// language is an array
		//$kvheader_lang = $this->translate ( 'kvheader_lang' );
		$page_lang = $this->translate ( 'careregulationnew_lang' );
		$ipid = $this->_patientMasterData['ipid'];
		$clientid = $this->logininfo->clientid;
		
		$modules =  new Modules();
		$clientModules = $modules->get_client_modules($clientid);
		
		//PatientHealthInsurance
		$phelathinsurance = new PatientHealthInsurance();
		$phealthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
		
		$phealthinsurance_data['company_name'] = $phealthinsu_array[0]['company_name'];
		$phealthinsurance_data['insurance_no'] = $phealthinsu_array[0]['insurance_no'];
		$phealthinsurance_data['insurance_status'] = $phealthinsu_array[0]['insurance_status'];
		$phealthinsurance_data['kvnumber'] = $phealthinsu_array[0]['kvk_no'];
		//var_dump($phealthinsurance_data); exit;
		//User data
		
		// Maindiagnosis		
		$patdia = new PatientDiagnosis();
		$dianoarray = $patdia->get_main_diagnosis($ipid, $clientid);
		//var_dump($dianoarray); exit;
		if(count($dianoarray) > 0)
		{
			$diagnosis_data = $dianoarray['icd'];
		}
		else
		{
			$diagnosis_data = '';
		}
		//var_dump($diagnosis_data); exit;
		$form = new Application_Form_PatientCareregulationnew(array(
				'_patientMasterData'    => $this->_patientMasterData,
				'_block_name'           => 'careregulationnew',
				'_clientModules'        => $clientModules,
				'_phealthinsurance'		=> $phealthinsurance_data,
				'_diagnosis' 			=> $diagnosis_data
		));
		
		$form->create_form_patient_careregulationnew();		
		
		if($this->getRequest()->isPost())
		{
			$post = $_POST;
			//$post['stamp_block'] = strip_tags(str_replace('<br/>', "\n", $_POST['stamp_block']));			
			
			if($_POST['formular']['button_action'] == 'savepdf')
			{
				//var_dump($post); exit;
		
				// save pdf
				$this->generatePdfNew(4, $_POST, 'careregulationnew_save', "careregulationnew_pdf.html");
				//$this->generatePdfNew(3, $_POST, 'careregulation_save', "careregulation_pdf.html");
					
				// redirect to blank form
				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				exit;
					
			}
			if($_POST['formular']['button_action'] == 'print_pag1_pdf')
			{
				$page1 = $post['page1'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page1, $post);
				//print_r($post); exit;
				if($post['topform_details']['from'] != ""){
					$post['topform_details']['from'] =str_split($post['topform_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['topform_details']['to'] != ""){
					$post['topform_details']['to'] =str_split($post['topform_details']['to'], 1);
				}
				if($post['topform_details']['topform_textarea'] != "")
				{
					$post['topform_details']['topform_textarea'] = str_replace("\n", " ", $post['topform_details']['topform_textarea']);
					$post['topform_details']['topform_textarea'] = wordwrap($post['topform_details']['topform_textarea'], 100, "\n", false);
				}
				if($post['basiccare_details']['basic_textarea'] != "")
				{
					$post['basiccare_details']['basic_textarea'] = str_replace("\n", " ", $post['basiccare_details']['basic_textarea']);
					$post['basiccare_details']['basic_textarea'] = wordwrap($post['basiccare_details']['basic_textarea'], 105, "\n", false);
				}
				$this->generatePdfNew(3, $post, 'careregulationnew_page1', "careregulationnew_page1_pdf.html");
			}
			if($_POST['formular']['button_action'] == 'preprint_pag1_pdf')
			{
				$page1 = $post['page1'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page1, $post);
				//print_r($post); exit;
				if($post['topform_details']['from'] != ""){
					$post['topform_details']['from'] =str_split($post['topform_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['topform_details']['to'] != ""){
					$post['topform_details']['to'] =str_split($post['topform_details']['to'], 1);
				}
				if($post['topform_details']['topform_textarea'] != "")
				{
					$post['topform_details']['topform_textarea'] = str_replace("\n", " ", $post['topform_details']['topform_textarea']);
					$post['topform_details']['topform_textarea'] = wordwrap($post['topform_details']['topform_textarea'], 100, "\n", false);
				}
				if($post['basiccare_details']['basic_textarea'] != "")
				{
					$post['basiccare_details']['basic_textarea'] = str_replace("\n", " ", $post['basiccare_details']['basic_textarea']);
					$post['basiccare_details']['basic_textarea'] = wordwrap($post['basiccare_details']['basic_textarea'], 105, "\n", false);
				}
				$this->generatePdfNew(3, $post, 'careregulationnew_page1_pre', "careregulationnew_page1_pre_pdf.html");
			}
			if($_POST['formular']['button_action'] == 'preprint_pag2_pdf')
			{
				$page2 = $post['page2'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page2, $post);
				//print_r($post); exit;
				if($post['application_details']['from'] != ""){
					$post['application_details']['from'] =str_split($post['application_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['application_details']['to'] != ""){
					$post['application_details']['to'] =str_split($post['application_details']['to'], 1);
				}
				if($post['application_details']['appl_10'] != ""){
					$post['application_details']['appl_10'] =str_split($post['application_details']['appl_10'], 1);
				}
				if($post['application_details']['appl_data'] != ""){
					$post['application_details']['appl_data'] =str_split($post['application_details']['appl_data'], 1);
				}
				
				if($post['information_details']['from'] != ""){
					$post['information_details']['from'] =str_split($post['information_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['information_details']['to'] != ""){
					$post['information_details']['to'] =str_split($post['information_details']['to'], 1);
				}
				if($post['information_details']['inf_9'] != ""){
					$post['information_details']['inf_9'] =str_split($post['information_details']['inf_9'], 1);
				}
				if($post['information_details']['inf_11'] != ""){
					$post['information_details']['inf_11'] =str_split($post['information_details']['inf_11'], 1);
				}
				if($post['information_details']['inf_data'] != ""){
					$post['information_details']['inf_data'] =str_split($post['information_details']['inf_data'], 1);
				}
				
				$this->generatePdfNew(3, $post, 'careregulationnew_page2_pre', "careregulationnew_page2_pre_pdf.html");
			}
			if($_POST['formular']['button_action'] == 'preprint_pdf')
			{
				$page1 = $post['page1'];
				$page2 = $post['page2'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page1, $post);
				$post = array_merge($page2, $post);
				//print_r($post); exit;
				if($post['topform_details']['from'] != ""){
					$post['topform_details']['from'] =str_split($post['topform_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['topform_details']['to'] != ""){
					$post['topform_details']['to'] =str_split($post['topform_details']['to'], 1);
				}				
				
				//print_r($post); exit;
				if($post['application_details']['from'] != ""){
					$post['application_details']['from'] =str_split($post['application_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['application_details']['to'] != ""){
					$post['application_details']['to'] =str_split($post['application_details']['to'], 1);
				}
				if($post['application_details']['appl_10'] != ""){
					$post['application_details']['appl_10'] =str_split($post['application_details']['appl_10'], 1);
				}
				if($post['application_details']['appl_data'] != ""){
					$post['application_details']['appl_data'] =str_split($post['application_details']['appl_data'], 1);
				}
				
				if($post['information_details']['from'] != ""){
					$post['information_details']['from'] =str_split($post['information_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['information_details']['to'] != ""){
					$post['information_details']['to'] =str_split($post['information_details']['to'], 1);
				}
				if($post['information_details']['inf_9'] != ""){
					$post['information_details']['inf_9'] =str_split($post['information_details']['inf_9'], 1);
				}
				if($post['information_details']['inf_11'] != ""){
					$post['information_details']['inf_11'] =str_split($post['information_details']['inf_11'], 1);
				}
				if($post['information_details']['inf_data'] != ""){
					$post['information_details']['inf_data'] =str_split($post['information_details']['inf_data'], 1);
				}
				$this->generatePdfNew(3, $post, 'careregulationnew_page1_pre', "careregulationnew_pre_pdf.html");
			}
			/* if($_POST['formular']['button_action'] == 'print_pag1_pdf')
			{
				$page1 = $post['page1'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page1, $post);
				//print_r($post); exit;
				if($post['topform_details']['from'] != ""){
					$post['topform_details']['from'] =str_split($post['topform_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['topform_details']['to'] != ""){
					$post['topform_details']['to'] =str_split($post['topform_details']['to'], 1);
				}
				$this->generatePdfNew(3, $post, 'careregulationnew_page1', "careregulationnew_page1_pre_pdf.html");
				
				//$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
			}
			if($_POST['formular']['button_action'] == 'print_pag2_pdf')
			{
				$page2 = $post['page2'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page2, $post);
				//print_r($post); exit;
				if($post['application_details']['from'] != ""){
					$post['application_details']['from'] =str_split($post['application_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['application_details']['to'] != ""){
					$post['application_details']['to'] =str_split($post['application_details']['to'], 1);
				}
				if($post['application_details']['appl_10'] != ""){
					$post['application_details']['appl_10'] =str_split($post['application_details']['appl_10'], 1);
				}
				if($post['application_details']['appl_data'] != ""){
					$post['application_details']['appl_data'] =str_split($post['application_details']['appl_data'], 1);
				}
				
				if($post['information_details']['from'] != ""){
					$post['information_details']['from'] =str_split($post['information_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['information_details']['to'] != ""){
					$post['information_details']['to'] =str_split($post['information_details']['to'], 1);
				}
				if($post['information_details']['inf_9'] != ""){
					$post['information_details']['inf_9'] =str_split($post['information_details']['inf_9'], 1);
				}
				if($post['information_details']['inf_11'] != ""){
					$post['information_details']['inf_11'] =str_split($post['information_details']['inf_11'], 1);
				}
				if($post['information_details']['inf_data'] != ""){
					$post['information_details']['inf_data'] =str_split($post['information_details']['inf_data'], 1);
				}
				$this->generatePdfNew(3, $post, 'careregulationnew_page2', "careregulationnew_page2_pre_pdf.html");
				
				//$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
			} */
		}
		
		//@todo : move messages in layout
		$this->view->SuccessMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('SuccessMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
				);
		$this->view->ErrorMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('ErrorMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
				);
		
		$this->_helper->flashMessenger->clearMessages('ErrorMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');
		
		$this->_helper->flashMessenger->clearMessages('SuccessMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');
		
		$this->view->form = $form;
		$this->view->enc_id = $this->enc_id;		
		
	}

	//ISPC-2777 Dragos 25.01.2021 (full action)
	public function careregulationnew2020Action()
	{
		// language is an array
		//$kvheader_lang = $this->translate ( 'kvheader_lang' );
		$page_lang = $this->translate ( 'careregulationnew_lang' );
		$ipid = $this->_patientMasterData['ipid'];
		$clientid = $this->logininfo->clientid;

		$modules =  new Modules();
		$clientModules = $modules->get_client_modules($clientid);

		//PatientHealthInsurance
		$phelathinsurance = new PatientHealthInsurance();
		$phealthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

		$phealthinsurance_data['company_name'] = $phealthinsu_array[0]['company_name'];
		$phealthinsurance_data['insurance_no'] = $phealthinsu_array[0]['insurance_no'];
		$phealthinsurance_data['insurance_status'] = $phealthinsu_array[0]['insurance_status'];
		$phealthinsurance_data['kvnumber'] = $phealthinsu_array[0]['kvk_no'];
		//var_dump($phealthinsurance_data); exit;
		//User data

		// Maindiagnosis
		$patdia = new PatientDiagnosis();
		$dianoarray = $patdia->get_main_diagnosis($ipid, $clientid);
		//var_dump($dianoarray); exit;
		if(count($dianoarray) > 0)
		{
			$diagnosis_data = $dianoarray['icd'];
		}
		else
		{
			$diagnosis_data = '';
		}
		//var_dump($diagnosis_data); exit;
		$form = new Application_Form_PatientCareregulationnew2020(array(
			'_patientMasterData'    => $this->_patientMasterData,
			'_block_name'           => 'careregulationnew',
			'_clientModules'        => $clientModules,
			'_phealthinsurance'		=> $phealthinsurance_data,
			'_diagnosis' 			=> $diagnosis_data
		));

		$form->create_form_patient_careregulationnew2020();

		if($this->getRequest()->isPost())
		{
			$post = $_POST;
			//$post['stamp_block'] = strip_tags(str_replace('<br/>', "\n", $_POST['stamp_block']));

			if($_POST['formular']['button_action'] == 'savepdf')
			{
				//var_dump($post); exit;

				// save pdf
				//$this->generatePdfNew(4, $_POST, 'careregulationnew2020_save', "careregulationnew_pdf.html");
				//$this->generatePdfNew(3, $_POST, 'careregulation_save', "careregulation_pdf.html");

				// redirect to blank form
				$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
				exit;

			}
			if($_POST['formular']['button_action'] == 'print_pag1_pdf')
			{
				$page1 = $post['page1'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page1, $post);
				//print_r($post); exit;
				if($post['topform_details']['from'] != ""){
					$post['topform_details']['from'] =str_split($post['topform_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['topform_details']['to'] != ""){
					$post['topform_details']['to'] =str_split($post['topform_details']['to'], 1);
				}
				if($post['topform_details']['topform_textarea'] != "")
				{
					$post['topform_details']['topform_textarea'] = str_replace("\n", " ", $post['topform_details']['topform_textarea']);
					$post['topform_details']['topform_textarea'] = wordwrap($post['topform_details']['topform_textarea'], 100, "\n", false);
				}
				if($post['basiccare_details']['basic_textarea'] != "")
				{
					$post['basiccare_details']['basic_textarea'] = str_replace("\n", " ", $post['basiccare_details']['basic_textarea']);
					$post['basiccare_details']['basic_textarea'] = wordwrap($post['basiccare_details']['basic_textarea'], 105, "\n", false);
				}
				$this->generatePdfNew(3, $post, 'careregulationnew2020_page1', "careregulationnew2020_page1_pdf.phtml");
			}
			if($_POST['formular']['button_action'] == 'preprint_pag1_pdf')
			{
				$page1 = $post['page1'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page1, $post);
				//print_r($post); exit;
				if($post['topform_details']['from'] != ""){
					$post['topform_details']['from'] =str_split($post['topform_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['topform_details']['to'] != ""){
					$post['topform_details']['to'] =str_split($post['topform_details']['to'], 1);
				}
				if($post['topform_details']['topform_textarea'] != "")
				{
					$post['topform_details']['topform_textarea'] = str_replace("\n", " ", $post['topform_details']['topform_textarea']);
					$post['topform_details']['topform_textarea'] = wordwrap($post['topform_details']['topform_textarea'], 100, "\n", false);
				}
				if($post['basiccare_details']['basic_textarea'] != "")
				{
					$post['basiccare_details']['basic_textarea'] = str_replace("\n", " ", $post['basiccare_details']['basic_textarea']);
					$post['basiccare_details']['basic_textarea'] = wordwrap($post['basiccare_details']['basic_textarea'], 105, "\n", false);
				}
				$this->generatePdfNew(3, $post, 'careregulationnew2020_page1_pre', "careregulationnew2020_page1_pre_pdf.phtml");
			}
			if($_POST['formular']['button_action'] == 'preprint_pag2_pdf')
			{
				$page2 = $post['page2'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page2, $post);
				//print_r($post); exit;
				if($post['application_details']['from'] != ""){
					$post['application_details']['from'] =str_split($post['application_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['application_details']['to'] != ""){
					$post['application_details']['to'] =str_split($post['application_details']['to'], 1);
				}
				if($post['application_details']['appl_10'] != ""){
					$post['application_details']['appl_10'] =str_split($post['application_details']['appl_10'], 1);
				}
				if($post['application_details']['appl_data'] != ""){
					$post['application_details']['appl_data'] =str_split($post['application_details']['appl_data'], 1);
				}

				if($post['information_details']['from'] != ""){
					$post['information_details']['from'] =str_split($post['information_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['information_details']['to'] != ""){
					$post['information_details']['to'] =str_split($post['information_details']['to'], 1);
				}
				if($post['information_details']['inf_9'] != ""){
					$post['information_details']['inf_9'] =str_split($post['information_details']['inf_9'], 1);
				}
				if($post['information_details']['inf_11'] != ""){
					$post['information_details']['inf_11'] =str_split($post['information_details']['inf_11'], 1);
				}
				if($post['information_details']['inf_data'] != ""){
					$post['information_details']['inf_data'] =str_split($post['information_details']['inf_data'], 1);
				}

				$this->generatePdfNew(3, $post, 'careregulationnew_page2_pre', "careregulationnew_page2_pre_pdf.html");
			}
			if($_POST['formular']['button_action'] == 'preprint_pdf')
			{
				$page1 = $post['page1'];
				$page2 = $post['page2'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page1, $post);
				$post = array_merge($page2, $post);
				//print_r($post); exit;
				if($post['topform_details']['from'] != ""){
					$post['topform_details']['from'] =str_split($post['topform_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['topform_details']['to'] != ""){
					$post['topform_details']['to'] =str_split($post['topform_details']['to'], 1);
				}

				//print_r($post); exit;
				if($post['application_details']['from'] != ""){
					$post['application_details']['from'] =str_split($post['application_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['application_details']['to'] != ""){
					$post['application_details']['to'] =str_split($post['application_details']['to'], 1);
				}
				if($post['application_details']['appl_10'] != ""){
					$post['application_details']['appl_10'] =str_split($post['application_details']['appl_10'], 1);
				}
				if($post['application_details']['appl_data'] != ""){
					$post['application_details']['appl_data'] =str_split($post['application_details']['appl_data'], 1);
				}

				if($post['information_details']['from'] != ""){
					$post['information_details']['from'] =str_split($post['information_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['information_details']['to'] != ""){
					$post['information_details']['to'] =str_split($post['information_details']['to'], 1);
				}
				if($post['information_details']['inf_9'] != ""){
					$post['information_details']['inf_9'] =str_split($post['information_details']['inf_9'], 1);
				}
				if($post['information_details']['inf_11'] != ""){
					$post['information_details']['inf_11'] =str_split($post['information_details']['inf_11'], 1);
				}
				if($post['information_details']['inf_data'] != ""){
					$post['information_details']['inf_data'] =str_split($post['information_details']['inf_data'], 1);
				}
				$this->generatePdfNew(3, $post, 'careregulationnew_page1_pre', "careregulationnew_pre_pdf.html");
			}
			/* if($_POST['formular']['button_action'] == 'print_pag1_pdf')
			{
				$page1 = $post['page1'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page1, $post);
				//print_r($post); exit;
				if($post['topform_details']['from'] != ""){
					$post['topform_details']['from'] =str_split($post['topform_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['topform_details']['to'] != ""){
					$post['topform_details']['to'] =str_split($post['topform_details']['to'], 1);
				}
				$this->generatePdfNew(3, $post, 'careregulationnew_page1', "careregulationnew_page1_pre_pdf.html");

				//$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
			}
			if($_POST['formular']['button_action'] == 'print_pag2_pdf')
			{
				$page2 = $post['page2'];
				unset($post['page1']);
				unset($post['page2']);
				$post = array_merge($page2, $post);
				//print_r($post); exit;
				if($post['application_details']['from'] != ""){
					$post['application_details']['from'] =str_split($post['application_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['application_details']['to'] != ""){
					$post['application_details']['to'] =str_split($post['application_details']['to'], 1);
				}
				if($post['application_details']['appl_10'] != ""){
					$post['application_details']['appl_10'] =str_split($post['application_details']['appl_10'], 1);
				}
				if($post['application_details']['appl_data'] != ""){
					$post['application_details']['appl_data'] =str_split($post['application_details']['appl_data'], 1);
				}

				if($post['information_details']['from'] != ""){
					$post['information_details']['from'] =str_split($post['information_details']['from'], 1);
					//var_dump($post['topform_details']['from']); exit;
				}
				if($post['information_details']['to'] != ""){
					$post['information_details']['to'] =str_split($post['information_details']['to'], 1);
				}
				if($post['information_details']['inf_9'] != ""){
					$post['information_details']['inf_9'] =str_split($post['information_details']['inf_9'], 1);
				}
				if($post['information_details']['inf_11'] != ""){
					$post['information_details']['inf_11'] =str_split($post['information_details']['inf_11'], 1);
				}
				if($post['information_details']['inf_data'] != ""){
					$post['information_details']['inf_data'] =str_split($post['information_details']['inf_data'], 1);
				}
				$this->generatePdfNew(3, $post, 'careregulationnew_page2', "careregulationnew_page2_pre_pdf.html");

				//$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
			} */
		}

		//@todo : move messages in layout
		$this->view->SuccessMessages = array_merge(
			$this->_helper->flashMessenger->getMessages('SuccessMessages'),
			$this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
		);
		$this->view->ErrorMessages = array_merge(
			$this->_helper->flashMessenger->getMessages('ErrorMessages'),
			$this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
		);

		$this->_helper->flashMessenger->clearMessages('ErrorMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');

		$this->_helper->flashMessenger->clearMessages('SuccessMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');

		$this->view->form = $form;
		$this->view->enc_id = $this->enc_id;

	}
	
	public function sisstationaryAction(){
		//$logininfo = new Zend_Session_Namespace('Login_Info');
		//$clientid = $logininfo->clientid;
		//$decid = Pms_Uuid::decrypt($_GET['id']);
		//$ipid = Pms_CommonData::getIpId($decid);
		
		$clientid = $this->logininfo->clientid;
		$decid = $this->dec_id;
		$ipid = $this->ipid;
		
		if(isset($_REQUEST['test']) && $_REQUEST['test'] == 1)
		{
			error_reporting(E_ALL & ~E_NOTICE & ~E_WARNING & ~E_STRICT);
		}
		//$patientmaster = new PatientMaster();
		//$this->view->patientinfo = $patientmaster->getMasterData($this->dec_id,1);
		//$this->_patientMasterData = $patientmaster->get_patientMasterData();
		 
		/*--------------- Patient  details --------------------------------------*/
		//$patientmaster = new PatientMaster();
		$patientinfo = $this->_patientMasterData;
	
		$form['patient_name'] = $patientinfo['first_name'] . " " . $patientinfo['last_name'];
		$form['patient_dob'] = $patientinfo['birthd'];
	
		/*--------------- Client users details --------------------------------------*/
		$users = new User();
		$userarray = $users->getUserByClientid($clientid,0,true);
		$userarraylast_ids = array();
		
		foreach($userarray as $user)
		{
			$user_details[$user['id']]['name'] =   trim($user['first_name']) . " " . trim($user['last_name']);
		}
	
		//             $thematics = array("movement","cognitive","mobility","diseaserelated","selfcatering","socialrelations","financialmanagement");
			
		$controller = Zend_Controller_Front::getInstance()->getRequest()->getControllerName();
		$action = Zend_Controller_Front::getInstance()->getRequest()->getActionName();
		$form_name = $controller.'/'.$action;
		$thematics = Pms_CommonData::getFormsTextareas($form_name);
	
		$thematics_codes = array_keys($thematics);
		$thematics_colors = array("movement"=>"#d22027","cognitive"=>"#f35746","mobility"=>"#fbbd09","diseaserelated"=>"#66c76b","selfcatering"=>"#9e50ae","socialrelations"=>"#69b4e7","financialmanagement"=>"#f14770");
		$this->view->thematics = $thematics;
	
		$formstextslist_model = new FormsTextsList();
		$standard_texts_arr =  $formstextslist_model->get_client_list($clientid,$form_name);
	
		foreach($standard_texts_arr as $k=>$st){
			$standard_texts[$st['field_name']][] = $st['field_value'];
		}
		$this->view->form_name = $form_name;
		$this->view->standard_texts = $standard_texts;
	
			
			
		if($_GET['form_id']){
			$edit_form_id = $_GET['form_id'];
		}
	
		// get existing data
		$sisf = new SisStationary();
		$sisform =  $sisf->get_patient_sis_stationary($ipid,$clientid,$edit_form_id);
		//var_dump($sisform); exit;
		if(!empty($edit_form_id) && $sisform && !empty($sisform))
		{
			$form_id = $sisform[0]['id'];
			$form['form_id']  = $form_id;
			$form['dependent_person']  = $sisform[0]['dependent_person'];
			if( $sisform[0]['change_date'] != "0000-00-00 00:00:00"){
				$form['last_update']  = date("d.m.Y",strtotime($sisform[0]['change_date']));
			}
			else
			{
				$form['last_update']  = date("d.m.Y",strtotime($sisform[0]['create_date']));
			}
	
			if( $sisform[0]['change_user'] != "0"){
				$form['last_update_user']  = $user_details[$sisform[0]['change_user']]['name'];
			}
			else
			{
				$form['last_update_user']  = $user_details[$sisform[0]['create_user']]['name'];
			}
			
			$sisft = new SisStationaryThematics();
			$sisform_thematics =  $sisft->get_patient_sis_stationary_thematics($ipid,$clientid,$edit_form_id);
			
			if(!empty($sisform_thematics)){
				foreach ($sisform_thematics as $k=>$theme_data){
					$form['theme'][$theme_data['thematic']] = $theme_data;
				}
			}
		} else {
			$form['last_update']  = date("d.m.Y",time());
			$form['last_update_user']  = $user_details[$logininfo->userid]['name'];
		}
		$this->view->form_data = $form;
	
	
		if($this->getRequest()->isPost())
		{
	
			$post = $_POST;
			$post['form']['thematics'] = $thematics_codes ;
			$post['form']['thematics_colors'] = $thematics_colors;
			$post['form']['ipid'] = $ipid;
			$post['form']['clientid'] = $clientid;
			$post['form']['patient_name'] =  $form['patient_name'] ;
			$post['form']['patient_dob'] = $form['patient_dob'];
			$post['form']['last_update'] = $form['last_update'];
			$post['form']['last_update_user'] = $form['last_update_user'];
			$post['form']['userid'] = $this->userid;
			
			if($_POST['form_id'] != 0 && !empty($_POST['form_id']))
			{
				// update existing
				$post['form']['form_id'] = $_POST['form_id'];
			}
			
			if($_POST['form_action'] == "save")
			{
				$sis_form = new Application_Form_SisStationary();
				$sis_form->save_form_sisstationary($ipid, $post['form']);
				/*$sis_theme_form = new Application_Form_SisAmbulantThematics();
	
				// save
				if($_POST['form_id'] != 0 && !empty($_POST['form_id']))
				{
					// update existing
					$post['form']['form_id'] = $_POST['form_id'];
					$sis_form->update($post['form']);
				}
				else
				{
					//insert new
					$sis_id = $sis_form->insert($post['form']);
	
					if(!empty($sis_id)){
						$post['form']['form_id'] = $sis_id;
					}
				}
	
	
				if($post['form']['form_id'] != 0 && !empty($post['form']['form_id'])){
					$sis_thematics = $sis_theme_form->insert($post['form']);
				}*/
	
				//                     if($ipid =="5a9e5ebf4946876bfa22b8472802c0f1810dc99d"){
	
				//                         $post['form']['last_update'] = $_POST['last_update'];
				//                         $post['form']['last_update_user'] = $_POST['last_update_user'];
				//                     }
	
				$this->generatePdfNew(4, $post, SisStationary::PATIENT_FILE_TABNAME, "sisstationary_pdf.html");
				 
				/* ---------------------- Redirect to verlauf  ------------------- */
				$this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
				exit;
			}
			elseif($_POST['form_action'] == "print")
			{
				$this->generatePdfNew(3, $post, SisStationary::PATIENT_FILE_TABNAME, "sisstationary_pdf.html");
			}
	
		}
	}
	
	/**
	 * ISPC-2234
	 * @carmen 17.08.2018
	 */
	public function kindersapvhospizAction()
	{
		$ipid = $this->ipid;
		$clientid = $this->logininfo->clientid;
		//PatientHealthInsurance
		$phelathinsurance = new PatientHealthInsurance();
		$phealthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
		//print_r($phealthinsu_array); exit;
		$phealthinsurance_data['company_name'] = $phealthinsu_array[0]['company_name'];
		$phealthinsurance_data['insurance_no'] = $phealthinsu_array[0]['insurance_no'];
		$phealthinsurance_data['insurance_status'] = $phealthinsu_array[0]['insurance_status'];
		$phealthinsurance_data['kvnumber'] = $phealthinsu_array[0]['kvk_no'];
		$phealthinsurance_data['zip'] = $phealthinsu_array[0]['ins_zip'];
		$phealthinsurance_data['city'] = $phealthinsu_array[0]['ins_city'];
		
		$phospiceassoc = new PatientHospiceassociation();
		$phospiceassoc_array = $phospiceassoc->getPatientHospiceassociation($ipid);
		
		$phospiceassoc_data['hospice_association'] = $phospiceassoc_array[0]['hospice_association'];
		$phospiceassoc_data['zip'] = $phospiceassoc_array[0]['zip'];
		$phospiceassoc_data['city'] = $phospiceassoc_array[0]['city'];
		
		$form = new Application_Form_KinderSapvHospiz(array(
				'_patientMasterData'    => $this->_patientMasterData,
				'_block_name'           => 'KINDERSAPVHOSPIZ',
				'_phealthinsurance'		=> $phealthinsurance_data,
				'_phospiceassoc'		=> $phospiceassoc_data,
		));
	
		//last saved values
		$saved_values = $this->_kindersapvhospiz_GatherDetails($form_id);
		//print_r($saved_values); exit;
		$form->create_form_kindersapvhospiz($saved_values);
	
		$request = $this->getRequest();
	
		$saved_values = array();
	
		if ( ! $request->isPost()) {
	
			//TODO move to populate
			//$form->populate($options);
	
	
		} elseif ($request->isPost()) {
	
			$post = $request->getPost();
	
			$form->populate($post);
			$post_form = array();
			$post_pdf = array();
			
			$post_form['id'] = $post['id'];
			foreach($post['page1']['first_details'] as $kr=>$vr)
			{				
					$post_form[] = $vr;
					foreach($vr as $kvv=>$vvv)
					{
						$post_pdf[$kvv] = $vvv;
					}
				
			}
			
			foreach($post['page1']['second_details'] as $kr=>$vr)
			{
			
				$post_form[] = $vr;
				foreach($vr as $kvv=>$vvv)
				{
					$post_pdf[$kvv] = $vvv;
				}
			
			}
			foreach($post['page2']['page2_details'] as $kr=>$vr)
			{
					
				$post_form[] = $vr;
				foreach($vr as $kvv=>$vvv)
				{
					$post_pdf[$kvv] = $vvv;
				}
					
			}
 
			if ( $form->isValid($post)) // no validation is implemented
			{
				// print a pdf
				
				
				if ($_POST['formular']['button_action'] == "printpdf") {
					
					/*$post_pdf['patientmasterdata'] = $this->_patientMasterData;
				
					$post_pdf['company_name'] = $phealthinsu_array[0]['company_name'];
					$post_pdf['insurance_no'] = $phealthinsu_array[0]['insurance_no'];
					$post_pdf['insurance_status'] = $phealthinsu_array[0]['insurance_status'];
					$post_pdf['kvnumber'] = $phealthinsu_array[0]['kvk_no'];
					$post_pdf['zip'] = $phealthinsu_array[0]['ins_zip'];
					$post_pdf['city'] = $phealthinsu_array[0]['ins_city'];
					
					$post_pdf['hospice_association'] = $phospiceassoc_array[0]['hospice_association'];
					$post_pdf['zip'] = $phospiceassoc_array[0]['zip'];
					$post_pdf['city'] = $phospiceassoc_array[0]['city'];*/
					//print_r($post_pdf); exit;
					//$this->generatePdfNew(3, $post_pdf, 'kindersapvhospiz', "kindersapvhospiz_pdf.html");
                       $form->removeDisplayGroup('form_actions');
                        $form->removeDecorator('Form');
                        $form->removeSubForm('tabs_navi');
                        $form->removeSubForm('form_actions');
                
                        
                      $today_date = date('d.m.Y');
                        $nice_name_epid = $this->_patientMasterData['nice_name_epid'];
                

                        $khHead = <<<EOT
<html>
    <head>
        <!--<link href="%s/css/page-css/kindersapvhospiz.css" rel="stylesheet" type="text/css" />-->
        <style>
            @page { margin: 20px 20px 60px 40px; }
                            
            body {
	           margin: 0 auto;
	           font-family: Arial, Helvetica, sans-serif;
	           font-size: 12px;
	           text-decoration: none;
	           font-weight: normal;
	           color: #4a565c;
            }
        </style>
    </head>
    <body >
    
        
EOT;
                     
                        $khFoot = <<<EOT
        
    </body>
</html>
EOT;
                        $html_form  = $form->__toString();
          
                
                       $html_form =  $this->html_prepare_dompdf($html_form);
                        
       
                      $html_print = sprintf($khHead, APP_BASE)
                       . $html_form
                       . $khFoot
                       ;
 //echo $html_print;exit;
                                        
                                        
                        $options = new Options();
                        $options->set('isRemoteEnabled', false);
                        $dompdf = new Dompdf($options);
                        
                        $dompdf->loadHtml($html_print);
                        // (Optional) Setup the paper size and orientation
                        $dompdf->setPaper('A4', 'portrait');                      

                        $dompdf->set_option("enable_php",true);
                        $dompdf->set_option('defaultFont', 'times');
                        $dompdf->set_option("fontHeightRatio",0.90);
                        
                        // Render the HTML as PDF
                        $dompdf->render();
                        
                      
                       $output = $dompdf->output();
                
                        // Output the generated PDF to Browser
                       $dompdf->stream($this->translate(KinderSapvHospiz::PATIENT_FILE_TITLE), array('Attachment' => true));
//                        $dompdf->stream();
                       
                       $result = $this->dompdf_ToFTP($output, $this->translate(KinderSapvHospiz::PATIENT_FILE_TITLE));
                        
                        if ($result !== false) {
                            
                            $encrypted = Pms_CommonData::aesEncryptMultiple(array(
                                'title' => $this->translate(KinderSapvHospiz::PATIENT_FILE_TITLE),
                                'file_name' => $result,
                                'file_type' => 'PDF',
                            ));
                            
                            
                            $entity = new PatientFileUpload ();
                            //bypass triggers, we will use our own
                            $entity->triggerformid = null;
                            $entity->triggerformname = null;
                            
                            $entity->title = $encrypted['title'];
                            $entity->ipid = $this->ipid;
                            $entity->file_name = $encrypted['file_name']; //$post['fileinfo']['filename']['name'];
                            $entity->file_type = $encrypted['file_type'];
                            $entity->recordid = $wlassessment->id;
                            $entity->tabname = KinderSapvHospiz::PATIENT_FILE_TABNAME;
                            
                            
                            $entity->system_generated = "0"; //TODO this should be 0?
                            $entity->save();
                            
                            
                            
                        }
                        
                       // exit;
				}
				elseif($_POST['formular']['button_action'] == "save")
				{
					$post_form['userid'] = $this->logininfo->userid;
					$patient_kinderhospiz  = $form->save_form_kindersapvhospiz($this->ipid, $post_form);
					if($post_form['id'])
					{
						$this->_helper->flashMessenger->addMessage( $this->translate('message_info_suc_edit'),  'SuccessMessages');
					}
					else 
					{
						$this->_helper->flashMessenger->addMessage( $this->translate('message_info_suc_create'),  'SuccessMessages');
					}
					// empty the post by using a redirect
					$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ), array (
					// 						$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ) . "&selected_month=" . $query_date, array (
							"exit" => true
					) );
				}
			
	
			} else {
	
				$this->_helper->flashMessenger->addMessage( $this->translate('message_info_err'),  'ErrorMessages');
	
					$form->populate($post);
	
			}
		
		}
	
		//@todo : move messages in layout
		$this->view->SuccessMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('SuccessMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
				);
		$this->view->ErrorMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('ErrorMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
				);
	
		$this->_helper->flashMessenger->clearMessages('ErrorMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');
	
		$this->_helper->flashMessenger->clearMessages('SuccessMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');
	
		$this->view->form = $form;
		$this->view->enc_id = $this->enc_id;
	
		 
	
	}
	
	private function _kindersapvhospiz_GatherDetails( $form_id = null)
	{
		//var_dump($this->ipid); exit;
		//one formular / patient
		$entity  = new KinderSapvHospiz();
		$saved_formular_final = array();
		$saved_formular= $entity->findOrCreateOneByIdAndIpid($form_id , $this->ipid);
		//print_r($saved_formular);exit;
		if(!$saved_formular)
		{
			$saved_formular= $entity->getTable()->getFieldNames();
			
			foreach($saved_formular as $kcol=>$vcol)
			{
				$saved_formular_final[$vcol]['colprop'] = $entity->getTable()->getDefinitionOf($vcol);
				$saved_formular_final[$kcol]['value'] = null;
			}
		}
		else 
		{
		//$saved_formular = empty($saved) ? array() : $saved;
		//$saved_formular = $saved->toArray();
		//print_r($saved_formular); exit;
		
		foreach($saved_formular as $kcol=>$vcol)
		{
			$saved_formular_final[$kcol]['colprop'] = $entity->getTable()->getDefinitionOf($kcol);
			$saved_formular_final[$kcol]['value'] = $vcol;
		}
		}
		//print_r($saved_formular_final); exit;
		return $saved_formular_final;
	}
	
	public function besdsurveyAction()
	{
		$ipid = $this->ipid;
		$clientid = $this->logininfo->clientid;
		$userid = $this->logininfo->userid;
		
		$catscor = new BesdCategoryScores();
		$catscores = $catscor->get_besd_category_scores();
		
		if($_REQUEST['bsid'])
		{
			$form_id = $_REQUEST['bsid'];
		}
	
		$catscores_arr = array();
		$rowspanscore = array();
		$categ_arr = array();
		$score = 0;
		$rowspan = 0;
		$category = $catscores[0]['category'];
		$categ_arr[0] = $catscores[0]['category'];
		foreach($catscores as $ksc=>$vsc)
		{
			$catscores_arr[$vsc['category']][$vsc['option']] = $vsc['score'];
			
			if($score == $vsc['score'])
			{
				$rowspan++;
			}
			else {
				if($category != $vsc['category'])
				{
					$rowspanscore[$category]['count'][$score] = $rowspan;
					$category = $vsc['category'];
					$categ_arr[] = $vsc['category'];
				}
				else
				{
					$rowspanscore[$vsc['category']]['count'][$score] = $rowspan;
				}
		
				$score = $vsc['score'];
				$rowspan = 1;
			}
		
		}
		$lastcat = end($catscores);
		$rowspanscore[$lastcat['category']]['count'][$score] = $rowspan;
		
		//print_r($rowspanscore); exit;
		$this->view->categ_arr = $categ_arr;
		$form = new Application_Form_PatientBesd(array(
				'_patientMasterData'    => $this->_patientMasterData,
				'_catscores' => $catscores_arr,
				'_rowspanscore' => $rowspanscore,
				'_block_name'           => 'BESDSURVEY',
		));
	
		//last saved values
		$saved_values = $this->_besdsurvey_GatherDetails($form_id);
		//var_dump($saved_values); exit;
		$scores_arr = array();
		foreach($catscores_arr as $kcat=>$vcat)
		{
			
			$scores_arr[$kcat] = 0;
			if(array_key_exists($kcat, $saved_values))
			{
				//var_dump($saved_values[$kcat]['value']);
				foreach($saved_values[$kcat]['value'] as $kopt=>$vopt)
				{
					
					if($vopt == 'yes')
					{
						
						$scores_arr[$kcat] += $catscores_arr[$kcat][$saved_values[$kcat]['colprop']['values'][$kopt]];
					}
				}
			}
		}
		//exit;
		//var_dump($scores_arr); exit;
		$this->view->scores_arr = $scores_arr;
		
		$form->create_form_besdsurvey($saved_values);
		
		/* --------------Patient - saved files --------------------------------- */
		$fileupload = new PatientFileUpload();
		$besd_form_files = $fileupload->get_besdsurvey_file_data($ipid);
		
		if(!empty($besd_form_files)){
		
			foreach($besd_form_files as $k_file => $v_file)
			{
				$users_ids[] = $v_file['create_user'];
			}
			
			if(!empty($users_ids)){
				$this->view->users_data = Pms_CommonData::getUsersData($users_ids);
			}
		
			$this->view->form_files = $besd_form_files;
		}
	//
		$request = $this->getRequest();
	
		$saved_values = array();
	
		if ( ! $request->isPost()) {
	
			//TODO move to populate
			//$form->populate($options);
	
	
		} elseif ($request->isPost()) {
	
			$post = $request->getPost();
			//print_r($post); exit;
			$form->populate($post);
			$post_form = array();
			
			foreach($post as $kpost=>$valpost)
			{
				if(!is_array($valpost))
				{
					$post_form[$kpost] = $valpost;
				}
				else 
				{
					if ($valpost == 'formular') continue;
					
					foreach($valpost as $kopt => $vopt)
					{
						foreach($vopt as $kinpt=>$vinpt)
						{
							$post_form[$kpost][$kopt] = $vinpt[0];
						}
					}
				}
			}
			//print_r($post_form); exit;
			
		
			if ( $form->isValid($post)) // no validation is implemented
			{
				
				if($_POST['formular']['button_action'] == "save")
				{
					
					$post_form['userid'] = $this->logininfo->userid;
					$patient_besdsurvey  = $form->save_form_besdsurvey($this->ipid, $post_form);
					
					/*if($patient_besdsurvey->id)
					{
					
						$custcourse = new PatientCourse();
						$custcourse->ipid = $ipid;
						$custcourse->course_date = date("Y-m-d H:i:s", time());
						$custcourse->course_type = Pms_CommonData::aesEncrypt(PatientBesd::PATIENT_COURSE_TYPE);
						$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes(PatientBesd::PATIENT_COURSE_TITLE_EDIT));
						$custcourse->user_id = $data['userid'];
						$custcourse->tabname = Pms_CommonData::aesEncrypt('besd_survey');
						$custcourse->recordid = $patient_besdsurvey->id;
						$custcourse->done_name = Pms_CommonData::aesEncrypt(PatientBesd::PATIENT_COURSE_TABNAME_SAVE);
						$custcourse->done_id = $besdsurvey->id;
						$custcourse->save();
							
					}*/
					
					$form->removeDisplayGroup('form_actions');
					$form->removeDecorator('Form');
					$form->removeSubForm('tabs_navi');
					$form->removeSubForm('form_actions');
					$today_date = date('d.m.Y');
					$nice_name_epid = $this->_patientMasterData['nice_name_epid'];
					
					
					$bsHead = <<<EOT
<html>
    <head>
        <link href="%s/css/page-css/besdsurvey.css" rel="stylesheet" type="text/css" />
        <style>
            @page { margin: 20px 20px 60px 60px; }
        </style>
    </head>
    <body >
					
					
EOT;
					
					$bsFoot = <<<EOT
					
    </body>
</html>
EOT;
					$html_form  = $form->__toString();
					
					
					$html_form =  $this->html_prepare_dompdf($html_form);
				
					
					$html_print = sprintf($bsHead, APP_BASE)
					. $html_form
					. $bsFoot
					;
					//echo $html_print;exit;
					
					
					$options = new Options();
					$options->set('isRemoteEnabled', false);
					$dompdf = new Dompdf($options);
					
					$dompdf->loadHtml($html_print);
					// (Optional) Setup the paper size and orientation
					$dompdf->setPaper('A4', 'portrait');
					
					$dompdf->set_option("enable_php",true);
					$dompdf->set_option('defaultFont', 'times');
					$dompdf->set_option("fontHeightRatio",0.90);
					
					// Render the HTML as PDF
					$dompdf->render();
					
					$output = $dompdf->output();
					
					// Output the generated PDF to Browser
					//$dompdf->stream($this->translate(PatientBesd::PATIENT_FILE_TITLE), array('Attachment' => true));
					//                        $dompdf->stream();
					
					$result = $this->dompdf_ToFTP($output, $this->translate(PatientBesd::PATIENT_FILE_TITLE));
					
					if ($result !== false) {
						
						$encrypted = Pms_CommonData::aesEncryptMultiple(array(
								'title' => $this->translate(PatientBesd::PATIENT_FILE_TITLE) . ' ' . $post['total_table']['total_row']['total'],
								'file_name' => $result,
								'file_type' => 'PDF',
						));
					
					
						$entity = new PatientFileUpload ();
						//bypass triggers, we will use our own
						$entity->triggerformid = null;
						$entity->triggerformname = null;
					
						$entity->title = $encrypted['title'];
						$entity->ipid = $this->ipid;
						$entity->file_name = $encrypted['file_name'];
						$entity->file_type = $encrypted['file_type'];
						$entity->recordid = $patient_besdsurvey->id;
						$entity->tabname = PatientBesd::PATIENT_FILE_TABNAME;
						
					
						$entity->system_generated = "0"; //TODO this should be 0?
						$entity->save();
						
						$recordid = $entity->id;
						
							$comment = PatientBesd::PATIENT_COURSE_TITLE_CREATE . ' ' . $post['total_table']['total_row']['total'];
							$cust = new PatientCourse();
							$cust->ipid = $this->ipid;							
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt($comment);
							$cust->recordid = $recordid;
							$cust->tabname = Pms_CommonData::aesEncrypt("besd_survey_save");
							$cust->user_id = $userid;
							$cust->save();
					
					
					
					}
					
					
					// empty the post by using a redirect
					//$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ), array (
							// 						$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ) . "&selected_month=" . $query_date, array (
							//"exit" => true
					//) );
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
				}
					
	
			} else {
	
				
				$form->populate($post);
	
			}
	
		}
	
		//@todo : move messages in layout
		$this->view->SuccessMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('SuccessMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
				);
		$this->view->ErrorMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('ErrorMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
				);
	
		$this->_helper->flashMessenger->clearMessages('ErrorMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');
	
		$this->_helper->flashMessenger->clearMessages('SuccessMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');
	
		$this->view->form = $form;
		$this->view->enc_id = $this->enc_id;
	
			
	
	}
	
	private function _besdsurvey_GatherDetails( $form_id = null)
	{
		//var_dump($this->ipid); exit;
		//one formular / patient
		$entity  = new PatientBesd();
		$saved_formular_final = array();
		
		if($form_id)
		{
			$saved_formular = $entity->getTable()->findOneBy('id', $form_id, Doctrine_Core::HYDRATE_RECORD);
			//print_r($saved_formular);
			foreach($saved_formular as $kcol=>$vcol)
			{
				
				$saved_formular_final[$kcol]['colprop'] = $entity->getTable()->getColumnDefinition($kcol);
				$saved_formular_final[$kcol]['value'] = $vcol;
			}
		}
		else
		{
		//$saved_formular= $entity->findOrCreateOneByIdAndIpid($form_id , $this->ipid);
		
		//if(!$saved_formular)
		//{
			$saved_formular= $entity->getTable()->getFieldNames();
			
			foreach($saved_formular as $kcol=>$vcol)
			{
				$saved_formular_final[$vcol]['colprop'] = $entity->getTable()->getColumnDefinition($vcol);
				$saved_formular_final[$vcol]['value'] = null;
			}
		}
		
		
	//print_r($saved_formular_final); exit;
		
		return $saved_formular_final;
	}
	
	public function mustAction()
	{
		$ipid = $this->ipid;
		$clientid = $this->logininfo->clientid;
		$userid = $this->logininfo->userid;
	
		if($_REQUEST['msid'])
		{
			$form_id = $_REQUEST['msid'];
		}
		
		$form = new Application_Form_PatientNutritionalStatus(array(
				'_patientMasterData'    => $this->_patientMasterData,
				'_block_name'           => 'BESDSURVEY',
		));
	
		//last saved values
		$saved_values = $this->_must_GatherDetails($form_id);
		//var_dump($saved_values); exit;
		//$saved_values = array();
		$form->create_form_must($saved_values);
		
		$request = $this->getRequest();
	
		if ( ! $request->isPost()) {
	
			//TODO move to populate
			//$form->populate($options);
	
	
		} elseif ($request->isPost()) {
	
			$post = $request->getPost();
			//print_r($post); exit;
			$form->populate($post);
			$post_form = array();
				
			foreach($post as $kpost=>$valpost)
			{
				if(!is_array($valpost))
				{
					$post_form[$kpost] = $valpost;
				}
				else
				{
					if ($valpost == 'formular') continue;
						
					foreach($valpost as $kopt => $vopt)
					{
						foreach($vopt as $kinpt=>$vinpt)
						{
							if($kinpt == 'acute_illness_yes' || $kinpt == 'acute_illness_no')
							{
								$post_form['acute_illness'] = $vinpt['0'];
							}
							else 
							{
								$post_form[$kinpt] = $vinpt;
							}
						}
					}
				}
			}
			//print_r($post_form); exit;
				
	
			if ( $form->isValid($post)) // no validation is implemented
			{
	
				if($_POST['formular']['button_action'] == "save")
				{
						
					//$post_form['userid'] = $this->logininfo->userid;
					$patient_must  = $form->save_form_nutritional_status($this->ipid, $post_form);
						
					if($patient_must->id)
					{
							
						$custcourse = new PatientCourse();
						$custcourse->ipid = $ipid;
						$custcourse->course_date = date("Y-m-d H:i:s", time());
						$custcourse->course_type = Pms_CommonData::aesEncrypt(PatientNutritionalStatus::PATIENT_COURSE_TYPE);
						$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes(PatientNutritionalStatus::PATIENT_COURSE_TITLE_CREATE));
						$custcourse->user_id = $userid;
						$custcourse->tabname = Pms_CommonData::aesEncrypt(PatientNutritionalStatus::PATIENT_COURSE_TABNAME);
						$custcourse->recordid = $patient_must->id;
						$custcourse->done_name = Pms_CommonData::aesEncrypt(PatientNutritionalStatus::PATIENT_COURSE_TABNAME);
						$custcourse->done_id = $patient_must->id;
						$custcourse->save();
							
					}
						
					$form->removeDisplayGroup('form_actions');
					$form->removeDecorator('Form');
					$form->removeSubForm('tabs_navi');
					$form->removeSubForm('form_actions');
					$today_date = date('d.m.Y');
					$nice_name_epid = $this->_patientMasterData['nice_name_epid'];
						
						
					$bsHead = <<<EOT
<html>
    <head>
        <link href="%s/css/page-css/must.css" rel="stylesheet" type="text/css" />
        <style>
            @page { margin: 20px 20px 20px 80px; }
        </style>
    </head>
    <body >
			
			
EOT;
						
					$bsFoot = <<<EOT
			
    </body>
</html>
EOT;
					$html_form  = $form->__toString();
						
						
					$html_form =  $this->html_prepare_dompdf($html_form);
	
						
					$html_print = sprintf($bsHead, APP_BASE)
					. $html_form
					. $bsFoot
					;
					//echo $html_print;exit;
						
						
					$options = new Options();
					$options->set('isRemoteEnabled', false);
					$dompdf = new Dompdf($options);
						
					$dompdf->loadHtml($html_print);
					// (Optional) Setup the paper size and orientation
					$dompdf->setPaper('A4', 'portrait');
						
					$dompdf->set_option("enable_php",true);
					$dompdf->set_option('defaultFont', 'times');
					$dompdf->set_option("fontHeightRatio",0.90);
						
					// Render the HTML as PDF
					$dompdf->render();
						
					$output = $dompdf->output();
						
					// Output the generated PDF to Browser
					//$dompdf->stream($this->translate(PatientBesd::PATIENT_FILE_TITLE), array('Attachment' => true));
					//                        $dompdf->stream();
						
					$result = $this->dompdf_ToFTP($output, $this->translate(PatientNutritionalStatus::PATIENT_FILE_TITLE));
						
					if ($result !== false) {
	
						$encrypted = Pms_CommonData::aesEncryptMultiple(array(
								'title' => $this->translate(PatientNutritionalStatus::PATIENT_FILE_TITLE),
								'file_name' => $result,
								'file_type' => 'PDF',
						));
							
							
						$entity = new PatientFileUpload ();
						//bypass triggers, we will use our own
						$entity->triggerformid = null;
						$entity->triggerformname = null;
							
						$entity->title = $encrypted['title'];
						$entity->ipid = $this->ipid;
						$entity->file_name = $encrypted['file_name'];
						$entity->file_type = $encrypted['file_type'];
						$entity->recordid = $patient_must->id;
						$entity->tabname = PatientNutritionalStatus::PATIENT_FILE_TABNAME;
	
							
						$entity->system_generated = "0"; //TODO this should be 0?
						$entity->save();
	
						$recordid = $entity->id;
						
						$comment = PatientNutritionalStatus::PATIENT_COURSE_TITLE_SAVE;
						$cust = new PatientCourse();
						$cust->ipid = $this->ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt($comment);
						$cust->recordid = $recordid;
						$cust->tabname = Pms_CommonData::aesEncrypt(PatientNutritionalStatus::PATIENT_COURSE_TABNAME_SAVE);
						$cust->user_id = $userid;
						$cust->save();
							
							
							
					}
						
						
					// empty the post by using a redirect
					//$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ), array (
					// 						$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ) . "&selected_month=" . $query_date, array (
					//"exit" => true
					//) );
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
				}
					
	
			} else {
	
	
				$form->populate($post);
	
			}
	
		}
	
		//@todo : move messages in layout
		$this->view->SuccessMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('SuccessMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
				);
		$this->view->ErrorMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('ErrorMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
				);
	
		$this->_helper->flashMessenger->clearMessages('ErrorMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');
	
		$this->_helper->flashMessenger->clearMessages('SuccessMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');
	
		$this->view->form = $form;
		$this->view->enc_id = $this->enc_id;
	
			
	
	}
	
	private function _must_GatherDetails( $form_id = null)
	{
		//var_dump($this->ipid); exit;
		$entity  = new PatientNutritionalStatus();
		$saved_formular_final = array();
	
		if($form_id)
		{
			$saved_formular = $entity->getTable()->findOneBy('id', $form_id, Doctrine_Core::HYDRATE_RECORD);
			
			foreach($saved_formular as $kcol=>$vcol)
			{
				if($kcol == 'acute_illness')
				{
					if ($vcol == 'yes')
					{
						$saved_formular_final['acute_illness_yes']['0'] = 'yes';
					}
					else if($vcol == 'no')
					{
						$saved_formular_final['acute_illness_no']['0'] = 'no';
					}
				}
				elseif($kcol == 'now_date' || $kcol == 'past_date')
				{
					if($vcol != '0000-00-00 00:00:00')
					{
						$saved_formular_final[$kcol] = date('d.m.Y', strtotime($vcol));
					}
					else 
					{
						$saved_formular_final[$kcol] = '';
					}
				}
					
				$saved_formular_final[$kcol] = $vcol;
			}
		}
		else
		{
			$saved_formular= $entity->findOrCreateOneByIdAndIpid('0' , $this->ipid);
			if($saved_formular)
			{
				$saved_data = $saved_formular;
			}
			
			$saved_formular= $entity->getTable()->getFieldNames();
			
			foreach($saved_formular as $kcol=>$vcol)
			{
				if($vcol == "height" && $saved_data)
				{
					$saved_formular_final[$vcol] = $saved_data['height'];
				}
				else 
				{
					$saved_formular_final[$vcol] = '';
				}
			}
			
		}
		
		$saved_formular_final['form_id'] = $form_id;
	
		return $saved_formular_final;
	}
	
	public function treatmentplanAction()
	{
		$ipid = $this->ipid;
		$clientid = $this->logininfo->clientid;
		$userid = $this->logininfo->userid;
		$this->view->userid = $userid;	
		
		//one formular/patient
		//last saved values or the first formular
		$cfbt_values = $this->_treatmentplan_GatherDetails($form_id);
		
		if(!array_key_exists('form_id', $cfbt_values))
		{		
			$cf = new ContactForms();
			$cfl = $cf->get_last_contactform_by_block($ipid, $clientid, "treatment_plan");
			
			$cfbt_values = $this->_formblocktreatmentplan_GatherDetails($cfl[$ipid]['id']);
			$cfbt_values['form_id'] = null;
		}
		
		/*if($_REQUEST['fsid'])
		{
			$form_id = $_REQUEST['fsid'];
			$cfbt_values = $this->_treatmentplan_GatherDetails($form_id);
			$cfbt_values['form_id'] = $form_id;
		}
		else
		{
		
			$cf = new ContactForms();
			$cfl = $cf->get_last_contactform_by_block($ipid, $clientid, "treatment_plan");
				
			$cfbt_values = $this->_formblocktreatmentplan_GatherDetails($cfl[$ipid]['id']);
			$cfbt_values['form_id'] = null;
		}*/
		
		//print_r($cfbt_values); exit;
		$cfbus = new FormBlockAdditionalUsers();
		$cfus_values = $cfbus->getPatientFormBlockAdditionalUsers($ipid, $cfl[$ipid]['id']);
		
		$cfus_ids = array();
		foreach($cfus_values as $vr)
		{
			$cfus_ids[] = $vr['additional_user'];
		}
		
		$users = new User();
		$client_users = $users->getUserByClientid($clientid);
		
		if ( ! empty($client_users)) {
			User::beautifyName($client_users);
		}
		$cl_users = array();
		foreach($client_users as $kr => $vr)
		{
			$cl_users[$vr['id']] = $vr;
		}
		//var_dump($client_users); exit;
		/*$cfb_users = array();
		foreach($cfb_userarray as $vr)
		{
			$cfb_users[] = $vr['last_name'] . ' ' . $vr['first_name'];
		}*/
		//var_dump($cfb_users); exit;
	
		$form = new Application_Form_PatientTreatmentPlan(array(
				'_patientMasterData'    => &$this->_patientMasterData,
				'_cf_block_values'      => $cfbt_values,
				'_cl_users'				=> $client_users,
				'_cf_users'  			=> $cfus_ids,
				'_block_name'           => 'TREATMENTPLAN',
		));
		
		
		$form->create_view_form_treatmentplan();
	
		$request = $this->getRequest();
	
		if ( ! $request->isPost()) {
	
			//TODO move to populate
			//$form->populate($options);
	
	
		} elseif ($request->isPost()) {
	
			$post = $request->getPost();
			//print_r($post); exit;
			//$form->populate($post);
			$post_form = $post['treatment_plan'];
			$post_form['contact_form_id'] = $post['contact_form_id'];
			$post_form['form_id'] = $post['form_id'];
			$post_form['additional_users'] = $post['additional_users'];
			//print_r($post_form); exit;
			$trentity = new PatientTreatmentPlan();
			
			if ( $form->isValid($post)) // no validation is implemented
			{
				$form_pdf = $form->create_pdf_form_treatmentplan($post_form);
					
				//$form_pdf->removeDisplayGroup('form_actions');
				$form_pdf->removeDecorator('Form');
				$form_pdf->removeSubForm('tabs_navi');
				$form_pdf->removeSubForm('form_actions');
				$today_date = date('d.m.Y');
				$nice_name_epid = $this->_patientMasterData['nice_name_epid'];
				
				
				/*$bsHead = <<<EOT
				 <html>
				 <head>
				 <link href="%s/css/page-css/must.css" rel="stylesheet" type="text/css" />
				 <style>
				 @page { margin: 20px 20px 20px 60px; }
				 </style>
				 </head>
				 <body >
				
				
				 EOT;
				
				 $bsFoot = <<<EOT
				
				 </body>
				 </html>
				 EOT;*/
				$html_form  = $form_pdf->__toString();
				
				
				$html_form =  Pms_CommonData::html_prepare_dompdf($html_form);
				
				
				/*$html_print = sprintf($bsHead, APP_BASE)
				 . $html_form
				 . $bsFoot
				 ;*/
				//echo $html_print;exit;
					
				//$this->view->app_path = APPLICATION_PATH; // this is used for the css => app_path/../public/css/page-css/wlassessment_pdf.css
				
				$this->view->form_pdf = $html_form; //this is the body of the pdf
					
				$html_print = $this->view->render("templates/treatmentplan_pdf.phtml");
				
				//echo $html_print;exit;
				$options = new Options();
				$options->set('isRemoteEnabled', false);
				$dompdf = new Dompdf($options);
					
				$dompdf->loadHtml($html_print);
				// (Optional) Setup the paper size and orientation
				$dompdf->setPaper('A4', 'portrait');
				
				$dompdf->set_option("enable_php",true);
				$dompdf->set_option('defaultFont', 'times');
				$dompdf->set_option("fontHeightRatio",0.90);
				
				// Render the HTML as PDF
				$dompdf->render();
				
				$output = $dompdf->output();
				
				if($_POST['formular']['button_action'] == "save")
				{
					
					//$post_form['userid'] = $this->logininfo->userid;
					$pat_trp  = $form->save_form_treatmentplan($this->ipid, $post_form);
					if($pat_trp)
					{
						if($post_form['form_id'] != "")
						{
							$comment = PatientTreatmentPlan::PATIENT_COURSE_TITLE;
							$cust = new PatientCourse();
							$cust->ipid = $this->ipid;
							$cust->course_date = date("Y-m-d H:i:s", time());
							$cust->course_type = Pms_CommonData::aesEncrypt("K");
							$cust->course_title = Pms_CommonData::aesEncrypt($comment);
							$cust->recordid = $post_form['form_id'];
							$cust->tabname = Pms_CommonData::aesEncrypt(PatientTreatmentPlan::PATIENT_COURSE_TABNAME);
							$cust->user_id = $userid;
							$cust->save();
						}
						else
						{
							$post_form['form_id'] = $pat_trp->id;
						}
					}
					
					$post_form['patient_data'] = $this->_patientMasterData;
					foreach($post_form['additional_users'] as $kr=>&$vr)
					{
						if(count($vr) > 1)
						{
							$vr['nice_name'] = $cl_users[$vr[0]]['nice_name'];
						}
						else
						{
							unset($post_form['additional_users'][$kr]);
						}
					
					}
					//print_r($post_form); exit;
					/*$result = $this->dompdf_ToFTP($output, $this->translate(PatientTreatmentPlan::PATIENT_FILE_TITLE));
					
					if ($result !== false) {
					
						$encrypted = Pms_CommonData::aesEncryptMultiple(array(
								'title' => $this->translate(PatientTreatmentPlan::PATIENT_FILE_TITLE),
								'file_name' => $result,
								'file_type' => 'PDF',
						));
							
							
						$entity = new PatientFileUpload ();
						//bypass triggers, we will use our own
						$entity->triggerformid = null;
						$entity->triggerformname = null;
							
						$entity->title = $encrypted['title'];
						$entity->ipid = $this->ipid;
						$entity->file_name = $encrypted['file_name'];
						$entity->file_type = $encrypted['file_type'];
						$entity->recordid = $pat_trp->id;
						$entity->tabname = PatientTreatmentPlan::PATIENT_FILE_TABNAME;
					
							
						$entity->system_generated = "0"; //TODO this should be 0?
						$entity->save();
					
						$recordid = $entity->id;
				
						$comment = PatientTreatmentPlan::PATIENT_COURSE_TITLE_SAVE;
						$cust = new PatientCourse();
						$cust->ipid = $this->ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt($comment);
						$cust->recordid = $recordid;
						$cust->tabname = Pms_CommonData::aesEncrypt(PatientTreatmentPlan::PATIENT_COURSE_TABNAME_SAVE);
						$cust->user_id = $userid;
						$cust->save();						
							
					}*/
					$this->generatePdfNew(4, $post_form, 'treatmentplan_save', "treatmentplan_tcpdf.html");
					
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
				}	
				else if($_POST['formular']['button_action'] == "printpdf")
				{
					$post_form['patient_data'] = $this->_patientMasterData;
					foreach($post_form['additional_users'] as $kr=>&$vr)
					{
						if(count($vr) > 1)
						{
							$vr['nice_name'] = $cl_users[$vr[0]]['nice_name'];
						}
						else
						{
							unset($post_form['additional_users'][$kr]);
						}
					
					}
					//print_r($post_form); exit;
					$this->generatePdfNew(3, $post_form, PatientTreatmentPlan::PATIENT_FILE_TABNAME, "treatmentplan_tcpdf.html");
					//$dompdf->stream($this->translate(PatientTreatmentPlan::PATIENT_FILE_TITLE), array('Attachment' => true));
					/*$result = $this->dompdf_ToFTP($output, $this->translate(PatientTreatmentPlan::PATIENT_FILE_TITLE));
	
					if ($result !== false) {
	
						$encrypted = Pms_CommonData::aesEncryptMultiple(array(
								'title' => $this->translate(PatientTreatmentPlan::PATIENT_FILE_TITLE),
								'file_name' => $result,
								'file_type' => 'PDF',
						));
							
							
						$entity = new PatientFileUpload ();
						//bypass triggers, we will use our own
						$entity->triggerformid = null;
						$entity->triggerformname = null;
							
						$entity->title = $encrypted['title'];
						$entity->ipid = $this->ipid;
						$entity->file_name = $encrypted['file_name'];
						$entity->file_type = $encrypted['file_type'];
						$entity->recordid = $patient_must->id;
						$entity->tabname = PatientTreatmentPlan::PATIENT_FILE_TABNAME;
	
							
						$entity->system_generated = "0"; //TODO this should be 0?
						$entity->save();
					}*/
				}
					
	
			} else {
	
	
				$form->populate($post);
	
			}
	
		}
	
		//@todo : move messages in layout
		$this->view->SuccessMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('SuccessMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
				);
		$this->view->ErrorMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('ErrorMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
				);
	
		$this->_helper->flashMessenger->clearMessages('ErrorMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');
	
		$this->_helper->flashMessenger->clearMessages('SuccessMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');
	
		$this->view->form = $form;
		$this->view->enc_id = $this->enc_id;
	
			
	
	}
	
	private function _formblocktreatmentplan_GatherDetails( $form_id = null)
	{
		$entity = new FormBlockTreatmentPlan();
		$saved_formular_final = array();
	
		if($form_id)
		{
			$saved_formular = $entity->getTable()->findOneBy('contact_form_id', $form_id, Doctrine_Core::HYDRATE_RECORD);
	
			if(!$saved_formular)
			{
				$saved_formular= $entity->getTable()->getFieldNames();
				//var_dump($saved_formular); exit;
				foreach($saved_formular as $kcol=>$vcol)
				{
					$saved_formular_final[$vcol]['colprop'] = $entity->getTable()->getColumnDefinition($vcol);
					$saved_formular_final[$vcol]['value'] = null;
				}
			}
			else
			{
				//print_r($saved_formular);
				foreach($saved_formular as $kcol=>$vcol)
				{
						
					$saved_formular_final[$kcol]['colprop'] = $entity->getTable()->getColumnDefinition($kcol);
					$saved_formular_final[$kcol]['value'] = $vcol;
				}
			}
		}
		else
		{
			//$saved_formular= $entity->findOrCreateOneByIdAndIpid($form_id , $this->ipid);
	
			//if(!$saved_formular)
			//{
			$saved_formular= $entity->getTable()->getFieldNames();
			//var_dump($saved_formular); exit;
			foreach($saved_formular as $kcol=>$vcol)
			{
				$saved_formular_final[$vcol]['colprop'] = $entity->getTable()->getColumnDefinition($vcol);
				$saved_formular_final[$vcol]['value'] = null;
			}
		}
	
	
			//print_r($saved_formular_final); exit;
	
			return $saved_formular_final;
	}
	
	private function _treatmentplan_GatherDetails( $form_id = null)
	{
		//var_dump($this->ipid); exit;
		//one formular / patient
		$saved_formular = PatientTreatmentPlanTable::getInstance()->findOneByIpid($this->ipid);
		//print_r($saved_formular);exit;
		$saved_formular_final = array();
		
		if(!$saved_formular)
		{
			$saved_formular= PatientTreatmentPlanTable::getInstance()->getFieldNames();
			//var_dump($saved_formular); exit;
			foreach($saved_formular as $kcol=>$vcol)
			{
				$saved_formular_final[$vcol]['colprop'] = PatientTreatmentPlanTable::getInstance()->getColumnDefinition($vcol);
				$saved_formular_final[$vcol]['value'] = null;
			}
		}
		else
		{
			//print_r($saved_formular);
			foreach($saved_formular as $kcol=>$vcol)
			{
	
				$saved_formular_final[$kcol]['colprop'] = PatientTreatmentPlanTable::getInstance()->getColumnDefinition($kcol);
				$saved_formular_final[$kcol]['value'] = $vcol;
			}
			
			$saved_formular_final['form_id'] = $saved_formular->id;
		}
		//print_r($saved_formular_final); exit;
		return $saved_formular_final;	
	}
	
	public function rubinAction()
	{
		$ipid = $this->ipid;
		$clientid = $this->logininfo->clientid;
		$userid = $this->logininfo->userid;
		
		$client =  new Client();
		$client_data = $client->findOneById($clientid);
		
		$form = new Application_Form_PatientRubin(array(
				'_patientMasterData'    => $this->_patientMasterData,
				'_block_name'           => 'RUBIN',
				'_client_data'			=> $client_data
		));
		
		if($_REQUEST['msid'])
		{
			$form_id = $_REQUEST['msid'];
		}
	
		//last saved values
		$saved_values = $this->_rubin_GatherDetails($form_id);
		//print_r($saved_values); exit;
	
		$form->create_form_rubin($saved_values, 'mini_nutritional_assessment');
	
		$request = $this->getRequest();
	
		//$saved_values = array();
	
		if ( ! $request->isPost()) {
	
			//TODO move to populate
			//$form->populate($options);
	
	
		} elseif ($request->isPost()) {
	
			$post = $request->getPost();
			//print_r($post); exit;
			$form->populate($post);
			$post_form = $post['mini_nutritional_assessment'];
			unset($post_form['formular']);
			
			foreach($post_form as $kpost=>$valpost)
			{
					if (strpos($kpost, 'total') !== false) {
						foreach($valpost as $ktotalhead=>$totalhead)
						{
							foreach($totalhead as $ktotalpost=>$totalpost)
							{
								$post_form[$ktotalpost] = $totalpost;
							}
						}
					}
						
					
			}
			
				
			
			if ( $form->isValid($post)) // no validation is implemented
			{
				
				
				if($_POST['mini_nutritional_assessment']['formular']['button_action'] == "save")
				{
					//$post_form['userid'] = $this->logininfo->userid;
				    
					$patient_rubin  = $form->save_form_rubin($this->ipid, $post_form);
					
					$form_date   = !empty($post_form['form_date']) ? date("Y-m-d H:i:s",strtotime($post_form['form_date'])) : date("Y-m-d H:i:s");
					
// 					RUBIN - Mini Nutritional Assessment
					
					if($patient_rubin->id)
					{
						if($post_form['total'] >= 17 && $post_form['total'] <= 23.5)
						{
							$coursetitle = "RUBIN - Mini Nutritional Assessment\nAuswertung des Gesamt-Index : " . $post_form['total'] . " => Risikobereich für Unterernährung";
						}
						else
						{
							$coursetitle = "RUBIN - Mini Nutritional Assessment\nAuswertung des Gesamt-Index : " . $post_form['total'] . " => schlechter Ernährungszustand";
						}
							
						$form_ident = "mna";
						$course_values[$form_ident]['course_type'] = "K";
						$course_values[$form_ident]['course_tabname'] = "patient_rubin_".$form_ident;
						$course_values[$form_ident]['course_done_name'] = "patient_rubin_".$form_ident;
						
						$custcourse = new PatientCourse();
						$custcourse->ipid = $ipid;
						$custcourse->course_date = date("Y-m-d H:i:s", time());
						$custcourse->course_type = Pms_CommonData::aesEncrypt($course_values[$form_ident]['course_type']);
						$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($coursetitle));
						$custcourse->user_id = $userid;
						$custcourse->tabname = Pms_CommonData::aesEncrypt($course_values[$form_ident]['course_tabname']);
						$custcourse->recordid = $patient_rubin->id;
						$custcourse->done_name = $course_values[$form_ident]['course_done_name'];
						$custcourse->done_id = $patient_rubin->id;
						$custcourse->done_date = $form_date ;
						$custcourse->save();
							
					}
						
					//$form->removeDisplayGroup('form_actions');
					$form->removeDecorator('Form');
					$form->removeSubForm('tabs_navi');
					$form->removeSubForm('form_actions');
					//ISPC - 2353
					/* if($post_form['before_anamnesis_total'] >=12)
					{
						$form->removeSubForm('anamnesis');
						$form->removeSubForm('anamnesis_total');
					} */
					$today_date = date('d.m.Y');
					$nice_name_epid = $this->_patientMasterData['nice_name_epid'];
						
						
					/*$bsHead = <<<EOT
<html>
    <head>
        <link href="%s/css/page-css/besdsurvey.css" rel="stylesheet" type="text/css" />
        <style>
            @page { margin: 20px 20px 60px 60px; }
        </style>
    </head>
    <body >
			
			
EOT;
						
					$bsFoot = <<<EOT
			
    </body>
</html>
EOT;*/
					$html_form  = $form->__toString();
						
						
					$html_form =  $this->html_prepare_dompdf($html_form);
	
						
					/*$html_print = sprintf($bsHead, APP_BASE)
					. $html_form
					. $bsFoot
					;*/
					//echo $html_print;exit;
						
					$this->view->form_pdf = $html_form; //this is the body of the pdf
						
					$html_print = $this->view->render("templates/rubin_pdf.phtml");
					//echo $html_print; exit;
					$options = new Options();
					$options->set('isRemoteEnabled', false);
					$dompdf = new Dompdf($options);
						
					$dompdf->loadHtml($html_print);
					// (Optional) Setup the paper size and orientation
					$dompdf->setPaper('A4', 'portrait');
						
					$dompdf->set_option("enable_php",true);
					$dompdf->set_option('defaultFont', 'times');
					$dompdf->set_option("fontHeightRatio",0.90);
						
					// Render the HTML as PDF
					$dompdf->render();
						
					$output = $dompdf->output();
						
					// Output the generated PDF to Browser
					//$dompdf->stream($this->translate(PatientBesd::PATIENT_FILE_TITLE), array('Attachment' => true));
					//                        $dompdf->stream();
						
					$result = $this->dompdf_ToFTP($output, $this->translate(PatientRubin::PATIENT_FILE_TITLE));
						
					if ($result !== false) {
	
						$encrypted = Pms_CommonData::aesEncryptMultiple(array(
								'title' => $this->translate(PatientRubin::PATIENT_FILE_TITLE),
								'file_name' => $result,
								'file_type' => 'PDF',
						));
							
							
						$entity = new PatientFileUpload ();
						//bypass triggers, we will use our own
						$entity->triggerformid = null;
						$entity->triggerformname = null;
							
						$entity->title = $encrypted['title'];
						$entity->ipid = $this->ipid;
						$entity->file_name = $encrypted['file_name'];
						$entity->file_type = $encrypted['file_type'];
						$entity->recordid = $patient_besdsurvey->id;
						$entity->tabname = PatientRubin::PATIENT_FILE_TABNAME;
	
							
						$entity->system_generated = "0"; //TODO this should be 0?
						$entity->save();
	
						$recordid = $entity->id;
						$form_ident="mna";
						$form_date_dmY = !empty($post_form['form_date']) ? date("d.m.Y",strtotime($post_form['form_date'])) : date("d.m.Y");     ;
						$comment =   $this->translate('patient_rubin_'.$form_ident.' PDF was created');
						$comment =   str_replace('%date', $form_date_dmY, $comment);
						$cust = new PatientCourse();
						$cust->ipid = $this->ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt($comment);
						$cust->recordid = $recordid;
						$cust->tabname =  Pms_CommonData::aesEncrypt('patient_rubin_'.$form_ident.'_saved');
						$cust->user_id = $userid;
						$cust->done_date = $form_date;
						$cust->save();
							
							
							
					}
						
						
					// empty the post by using a redirect
					//$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ), array (
					// 						$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ) . "&selected_month=" . $query_date, array (
					//"exit" => true
					//) );
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
				}
				/*
				elseif($_POST['mini_nutritional_assessment']['formular']['button_action'] == "printpdf") {
                    
                    // $form->removeDisplayGroup('form_actions');
                    $form->removeDecorator('Form');
                    $form->removeSubForm('tabs_navi');
                    $form->removeSubForm('form_actions');
  
                    $today_date = date('d.m.Y');
                    $nice_name_epid = $this->_patientMasterData['nice_name_epid'];
                    
                    $html_form = $form->__toString();
                    
                    $html_form = $this->html_prepare_dompdf($html_form);
           
                    $this->view->form_pdf = $html_form; // this is the body of the pdf
                    
                    $html_print = $this->view->render("templates/rubin_pdf.phtml");
                    // echo $html_print; exit;
                    $options = new Options();
                    $options->set('isRemoteEnabled', false);
                    $dompdf = new Dompdf($options);
                    
                    $dompdf->loadHtml($html_print);
                    // (Optional) Setup the paper size and orientation
                    $dompdf->setPaper('A4', 'portrait');
                    
                    $dompdf->set_option("enable_php", true);
                    $dompdf->set_option('defaultFont', 'times');
                    $dompdf->set_option("fontHeightRatio", 0.90);
                    
                    // Render the HTML as PDF
                    $dompdf->render();
                    
                    $output = $dompdf->output();
                    
                    // Output the generated PDF to Browser
                    $dompdf->stream($this->translate("RUBIN_MNA"), array(
                        'Attachment' => true
                    ));
                    $dompdf->stream();
				    
				} */
					
	
			} else {
	
	
				$form->populate($post);
	
			}
	
		}
	
		//@todo : move messages in layout
		$this->view->SuccessMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('SuccessMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
				);
		$this->view->ErrorMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('ErrorMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
				);
	
		$this->_helper->flashMessenger->clearMessages('ErrorMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');
	
		$this->_helper->flashMessenger->clearMessages('SuccessMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');
	
		$this->view->form = $form;
		$this->view->enc_id = $this->enc_id;
	
			
	
	}
	
	private function _rubin_GatherDetails( $form_id = null)
	{
		//var_dump($this->ipid); exit;
		//one formular / patient
		$entity  = new PatientRubin();
		$saved_formular_final = array();
	
		if($form_id)
		{
			$saved_formular = $entity->getTable()->findOneBy('id', $form_id, Doctrine_Core::HYDRATE_RECORD);
			//print_r($saved_formular);
			foreach($saved_formular as $kcol=>$vcol)
			{
	
				$saved_formular_final[$kcol]['colprop'] = $entity->getTable()->getColumnDefinition($kcol);
				$saved_formular_final[$kcol]['value'] = $vcol;
			}
			$saved_formular_final['form_id'] = $form_id;
		}
		else
		{
			//$saved_formular= $entity->findOrCreateOneByIdAndIpid($form_id , $this->ipid);
	
			//if(!$saved_formular)
			//{
			$saved_formular= $entity->getTable()->getFieldNames();
				
			foreach($saved_formular as $kcol=>$vcol)
			{
				$saved_formular_final[$vcol]['colprop'] = $entity->getTable()->getColumnDefinition($vcol);
				$saved_formular_final[$vcol]['value'] = null;
			}
		}
	
	
		//print_r($saved_formular_final); exit;
	
		return $saved_formular_final;
	}
	
	private function array_sort($array, $on = NULL, $order = SORT_ASC)
	{
		$new_array = array();
		$sortable_array = array();
	
		if(count($array) > 0)
		{
			foreach($array as $k => $v)
			{
				if(is_array($v))
				{
					foreach($v as $k2 => $v2)
					{
						if($k2 == $on)
						{
							if($on == 'birthd' || $on == 'admissiondate' || $on == 'admission_date' || $on == 'discharge_date' || $on == 'diedon' || $on == 'birthdyears' || $on == 'dischargedate' || $on == 'beginvisit' || $on == 'endvisit' || $on == 'dateofbirth' || $on == 'date' || $on == 'letter_date' || $on == "start_date")
							{
	
								if($on == 'birthdyears')
								{
									$v2 = substr($v2, 0, 10);
								}
								$sortable_array[$k] = strtotime($v2);
							}
							elseif($on == 'epid')
							{
								$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v2);
							}
							elseif($on == 'percentage')
							{
								$sortable_array[$k] = preg_replace('/[^\d\.]/', '', $v2);
							}
							else
							{
								$sortable_array[$k] = ucfirst(trim($v2));
							}
						}
					}
				}
				else
				{
					if($on == 'birthd' || $on == 'admission_date' || $on == 'admissiondate' || $on == 'discharge_date' || $on == 'diedon' || $on == 'birthdyears' || $on == 'dischargedate' || $on == 'beginvisit' || $on == 'endvisit' || $on == 'dateofbirth' || $on == 'date' || $on == 'letter_date' || $on = "start_date")
					{
						if($on == 'birthdyears')
						{
							$v = substr($v, 0, 10);
						}
						$sortable_array[$k] = strtotime($v);
					}
					elseif($on == 'epid' || $on == 'percentage')
					{
						$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v);
					}
					elseif($on == 'percentage')
					{
						$sortable_array[$k] = preg_replace('/[^\d\.]/', '', $v2);
					}
					else
					{
						$sortable_array[$k] = ucfirst($v);
					}
				}
			}
	
			switch($order)
			{
				case SORT_ASC:
					//						asort($sortable_array);
					$sortable_array = Pms_CommonData::a_sort($sortable_array);
					break;
				case SORT_DESC:
					//						arsort($sortable_array);
					$sortable_array = Pms_CommonData::ar_sort($sortable_array);
					break;
			}
			foreach($sortable_array as $k => $v)
			{
				$new_array[$k] = $array[$k];
			}
		}
	
		return $new_array;
	}
	
	public function getprintprofilesAction()
	{
		set_time_limit(0);
		$this->_helper->layout->setLayout('layout_ajax');
		
		$saved_receipt_profiles_preffered = UserTable::findAllPrintProfilesPreffered($this->logininfo->userid);
		
		$saved_receipt_profiles_preffered_arr = $saved_receipt_profiles_preffered[0]['receipt_print_settings'];
		if($saved_receipt_profiles_preffered_arr)
		{
			if(!is_array($saved_receipt_profiles_preffered_arr))
			{
				$saved_receipt_profiles_preffered_arr = array($saved_receipt_profiles_preffered_arr);
			}
			$preffered_profiles_details = ReceiptPrintSettingsTable::findClientReceiptPrintSettingsbyId($saved_receipt_profiles_preffered_arr,$this->logininfo->clientid);
		}
		
		if($preffered_profiles_details)
		{
			if(count($preffered_profiles_details) > 1)
			{
				$user_preffered_profiles = array();
				foreach($preffered_profiles_details as $kr => $vr)
				{
					$user_preffered_profiles[$vr['id']] = $vr['profile_name'];
				}
				
				$select_form = new Application_Form_SelectForm(array(
						'_block_name'           => null,
						'_set_options' => $user_preffered_profiles,
				
				));
			
				$this->view->form = $select_form->create_form_select();
			}
			else 
			{
				$this->_helper->viewRenderer->setNoRender();
				echo $preffered_profiles_details[0]['id'];
				exit;
			}
		}
		else 
		{
			$this->_helper->viewRenderer->setNoRender();
			exit;
		}
		
		if ($this->getRequest()->isPost()) {
			exit;
		}
	}
	
	public function patientactionsbulkfilesAction(){
		setlocale(LC_ALL, 'de_DE.UTF-8');
		$this->_helper->layout->setLayout('layout_ajax');
		$this->_helper->viewRenderer->setNoRender();
		
		$logininfo = new Zend_Session_Namespace('Login_Info');
		$clientid = $logininfo->clientid;
		$userid = $logininfo->userid;
		$hidemagic = Zend_Registry::get('hidemagic');

		$client = new Client();
		$form_types = new FormTypes();
		$sapvs = new SapvVerordnung();
		$patientmaster = new PatientMaster();
		$sapvverordnung = new SapvVerordnung();
		$hi_perms = new HealthInsurancePermissions();
		$phelathinsurance = new PatientHealthInsurance();
		$healthinsu_subdiv = new PatientHealthInsurance2Subdivisions();
		$pat_diagnosis = new PatientDiagnosis();
		$usergroups = new Usergroup();
		$users = new User();
		$pat_dis = new PatientDischarge();
		$pc_obj = new PatientCourse();
		
		$client_usergroups_array = $usergroups->getClientGroups($clientid);	
		
		$client_user_array = $users->getUserByClientid($clientid,0,true,false);
		
		//client_details
		$client_details = $client->getClientDataByid($clientid);
		
		$ug_details = array();
		foreach($client_usergroups_array as $k=>$group_data){
			$ug_details[$group_data['id']] = $group_data;
		}
			
		foreach($client_user_array as $k=>$cu)
		{
			$user_array[$cu['id']] = $cu;
			$user_array[$cu['id']]['groupname'] = $ug_details[$cu['groupid']]['groupname'];
			if(strlen($cu['shortname']) >  0){
				$user_array[$cu['id']]['initials'] = $cu['shortname'];
			}
			else
			{
				$user_array[$cu['id']]['initials'] = mb_substr($cu['first_name'], 0, 1, "UTF-8") . "" . mb_substr($cu['last_name'], 0, 1, "UTF-8");
					
			}
		}
		
		//multiple hi subdivisions && hi subdivisions permissions
		$divisions = $hi_perms->getClientHealthInsurancePermissions($clientid);
		
		$users_details = $users->getUserDetails($userid);
		
		$posted_ipids= array();
		if($this->getRequest()->isPost())
		{
			//if($_POST['generate_sh'] == "1" && strlen($_POST['sh_month']) > 0  )
			if($_POST['generate_form'] == "1" && strlen($_POST['form_month']) > 0  )
			{
				$selected_month = $_POST['form_month'];
				
				if(!function_exists('cal_days_in_month'))
				{
					$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
				}
				else
				{
					$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
				}

				$current_period['start'] = date('Y-m-d',strtotime($selected_month . "-01"));
				$current_period['end'] = date('Y-m-d',strtotime($selected_month . '-' . $month_days));
			
				$a_post = $_POST;
				foreach($a_post['patients_ids'] as $k => $enryptped_id)
				{
					$decripted_ids[] = Pms_Uuid::decrypt($enryptped_id);
				}
		
				$patient_ipids_q = Doctrine_Query::create()
				->select('ipid')
				->from('PatientMaster')
				->where('isdelete = 0')
				->andWhereIn('id',$decripted_ids);
				$patient_ipids_arr = $patient_ipids_q->fetchArray();
		
				foreach($patient_ipids_arr as $kip=>$p_ipid)
				{
					$posted_ipids[] = $p_ipid['ipid'];
				}
				
				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= "AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') as gender,";
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
				$sql .= "IF(p.admission_date != '0000-00-00',DATE_FORMAT(p.admission_date,'%d\.%m\.%Y'),'') as day_of_admission,";
				$sql .= "IF(p.birthd != '0000-00-00',DATE_FORMAT(p.birthd,'%d\.%m\.%Y'),'') as birthd,";
				
				
				$patient_days = array();
				$conditions['periods'] = array('0' => array('start' => "2008-01-01", 'end' => date("Y-m-d")));
				$conditions['client'] = $clientid;
				$conditions['ipids'] = $posted_ipids;
				$patient_days = Pms_CommonData::patients_days($conditions,$sql);
				

				// Patients days
				$real_active_days= array();
				$all_patients_periods = array();
				$patient_days2locationtypes = array();
				$hospital_days_cs_dmY = array();
				$hospiz_days_cs_dmY = array();
					
				foreach($patient_days as $k_ipid => $patient_data)
				{
					$real_active_days[$k_ipid] = $patient_data['real_active_days'];
					//all patients periods
					$all_patients_periods = array_merge_recursive($all_patients_periods, $patient_data['active_periods']);
						
					//used in flatrate
					if(empty($patient_periods[$k_ipid]))
					{
						$patient_periods[$k_ipid] = array();
					}
						
					array_walk_recursive($patient_data['active_periods'], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
						$patient_periods[$k_ipid] = array_merge($patient_periods[$k_ipid], $patient_data['active_periods']);
							
						//hospital days cs
						if(!empty($patient_data['hospital']['real_days_cs']))
						{
							$hospital_days_cs_dmY[$k_ipid] = $patient_data['hospital']['real_days_cs'];
							$hospital_days_cs[$k_ipid] = $patient_data['hospital']['real_days_cs'];
							array_walk($hospital_days_cs[$k_ipid], function(&$value) {
								$value = date("Y-m-d", strtotime($value));
							});
						}
							
						//hospiz days cs
						if(!empty($patient_data['hospiz']['real_days_cs']))
						{
							$hospiz_days_cs_dmY[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
							$hospiz_days_cs[$k_ipid] = $patient_data['hospiz']['real_days_cs'];
							array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
								$value = date("Y-m-d", strtotime($value));
							});
						}
							
						//real active days
						if(!empty($patient_data['real_active_days']))
						{
							$active_days_in_period_cs[$k_ipid] = $patient_data['real_active_days'];
							array_walk($active_days_in_period_cs[$k_ipid], function(&$value) {
								$value = date("Y-m-d", strtotime($value));
							});
						}
							
						//treatment days
						if(!empty($patient_data['treatment_days']))
						{
							$treatment_days_cs[$k_ipid] = $patient_data['treatment_days'];
							array_walk($treatment_days_cs[$k_ipid], function(&$value) {
								$value = date("Y-m-d", strtotime($value));
							});
						}
							
						//active days
						if(!empty($patient_data['active_days']))
						{
							$active_days[$k_ipid] = $patient_data['active_days'];
							array_walk($active_days[$k_ipid], function(&$value) {
								$value = date("Y-m-d", strtotime($value));
							});
						}
							
						if(empty($hospital_days_cs[$k_ipid]))
						{
							$hospital_days_cs[$k_ipid] = array();
						}
							
						if(empty($hospiz_days_cs[$k_ipid]))
						{
							$hospiz_days_cs[$k_ipid] = array();
						}
							
						$hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);
				}
				
				//$params = array();
				$ipids = $posted_ipids;
				$ipids = array_values(array_unique($ipids));
				
				$sapv_periods = array();
				$sapv_periods = SapvVerordnung::get_patients_sapv_periods($ipids);

				//patient HEALTH INSURANCE START
				$healthinsu_multi_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);

				if($divisions)
				{
					foreach($healthinsu_multi_array as $k_hi => $v_hi)
					{
						$hi_companyids[] = $v_hi['companyid'];
					}
						
					$healthinsu_subdiv_arr = $healthinsu_subdiv->get_hi_subdivisions_multiple($hi_companyids);
				}					
				//patient HEALTH INSURANCE END
			//var_dump($clientid); exit;	
				$patients_main_diag = $pat_diagnosis->get_ipids_main_diagnosis($ipids, $clientid);

				foreach($ipids as $kipid => $ipid)
				{
					$overall_performance_period[$ipid] = $current_period;
				}
				$patients_period_days = $patientmaster->getDaysInBetween($current_period['start'], $current_period['end'], false,"d.m.Y");
				
				$sapv_days_cs = $sapvverordnung->get_period_sapvs($ipids, $overall_performance_period, $hospital_hospiz_days_cs);
				
				//get patients discharge dates
				$patients_discharge = $pat_dis->get_patients_discharge($ipids);
					
				$patients_discharge_date = array();
				foreach($patients_discharge as $k_dis => $v_dis)
				{
					$patients_discharge_date[$v_dis['ipid']] = $v_dis['discharge_date'];
				}
				
				/*--------------------------------------------------------------------------------*/
				//PATIENT COURSES V , XT
				/*--------------------------------------------------------------------------------*/
				$course_shortcuts =array("V","XT");
				$course_days = $pc_obj->get_patients_period_course_by_shortcuts($ipids, $course_shortcuts, $patients_discharge_date, $overall_performance_period,true);
				
				/*--------------------------------------------------------------------------------*/
				// CONTACT FORMS
				/*--------------------------------------------------------------------------------*/
				$cf_obj = new ContactForms();
				$contact_forms_days = $cf_obj->get_patients_period_cf($ipids, $overall_performance_period);

				$action_days = array();
				$extra_details  = array();
				$patients_period_valid_days = array();
				
				foreach($ipids as $kipid => $ipid)
				{	
					foreach($patients_period_days as $k=>$day ){					
						if( in_array($day,$real_active_days[$ipid])){						
							$patients_period_valid_days[$ipid][] = $day;
						}
					}
					
					foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
					{
						foreach($v_cf_data as $k_cf => $v_cf)
						{
							if(is_numeric($k_cf))
							{
								if(strtotime(date('Y-m-d H:i:s', strtotime($v_cf['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
								{
									//excluded cf after last discharge
									$exclude_after_discharge[] = $v_cf['id'];
									unset($contact_forms_ids_overall[$k_cf_day][$k_cf]);
								}
								$contact_forms_ids[] = $v_cf['id'];
								$all_contact_forms[$v_cf['id']] = $v_cf;
							}
						}
					}
					ksort($contact_forms_days[$ipid]);
				}
				

				foreach($all_contact_forms as $k_cf => $v_cf)
				{
					$k_cf_day = date('Y-m-d', strtotime($v_cf['billable_date']));
				
					if(  in_array(date('d.m.Y', strtotime($v_cf['billable_date'])), $patients_period_valid_days[$v_cf['ipid']]))
					{
						$contact_forms_days_ids[$v_cf['ipid']][$k_cf_day][] = $v_cf['id'];
						$contact_forms_days_ids2details[$v_cf['ipid']][$v_cf['id']] = $v_cf;
						$contact_forms2form_types[$v_cf['ipid']][$v_cf['id']][] = $v_cf['form_type'];
					}
				}
				
				$contact_forms_ids = array_values(array_unique($contact_forms_ids));
					
				if( ! empty($contact_forms_ids)){
					$block_classification = new FormBlockClassification();
					$classification_data = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids);
					$classification_data_overall = $block_classification->get_multiple_block_classification($ipids, $contact_forms_ids_overall);
				}
				
				foreach($ipids as $kipid => $ipid)
				{					
					foreach($active_days_in_period_cs[$ipid] as $k=>$v_period_day)
					{
							
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_id)
						{
								$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
								$extra_details[$ipid][$v_period_day]['home_visit'][] = $contact_forms_days_ids2details[$ipid][$v_cf_id];								
						}
					}
					
					ksort($extra_details[$ipid]);
					
					foreach($course_days[$ipid] as $k_course_date => $v_course_details)
					{
						foreach($v_course_details as $k_couses => $v_courses)
						{
							$course[$ipid][$k_course_date][] = $v_courses['course_type'];
						}
							
						$k_course_date_alt = date('d.m.Y', strtotime($k_course_date));
						if(in_array($k_course_date_alt, $patients_period_valid_days[$ipid]))
						{
							foreach($v_course_details as $k_couse => $v_course)
							{
								if($v_course['course_type'] == 'XT')
								{
									$clasifizierung[$ipid][$k_course_date]['telefon'] += 1;
									$extra_details[$ipid][$k_course_date]['telefon'][] = $v_course;
								}
								else if($v_course['course_type'] == 'V')
								{
									$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
									$extra_details[$ipid][$k_course_date]['koordination'][] = $v_course;
								}
							}
						}
					}
					
					$extra_details_array = array();
					foreach($extra_details[$ipid] as $ddate=>$action_data){
						foreach($action_data as $action_type => $actions_array){
							foreach($actions_array as $k=>$act_data){
								if($action_type == "home_visit"){
									$action_date_full = $act_data['billable_date'];
								}
								elseif($action_type == "koordination" || $action_type == "telefon"){
									if($act_data['done_date'] != "0000-00-00 00:00:00"){
										$action_date_full = $act_data['done_date'];
									} else{
										$action_date_full = $act_data['course_date'];
									}
								}
								$act_data['sort_date'] = $action_date_full;
								$act_data['alias'] = $action_type;
								$extra_details_array[$ipid][] = $act_data;
							}
						}
					}
					
					//TODO-2058
					//active and  in invoice period
					$act_data_24h = array();
					foreach($patients_period_valid_days[$ipid] as $k=>$active_day){
						$act_data_24h['sort_date'] = $active_day;
						$act_data_24h['alias'] = "24_h_shift";
						$extra_details_array[$ipid][] = $act_data_24h;
					}
					//--
					
					
					usort($extra_details_array[$ipid], array(new Pms_Sorter('sort_date'), "_date_compare"));
					
					$kv_header = array();
					
					$pat_details = $patient_days[$ipid]['details'];

					$kv_header[$ipid]['insurance_company_name'] = $healthinsu_multi_array[$ipid]['company_name'];
						
					if(strlen($healthinsu_multi_array[$ipid]['kvk_no']) > 0 )
					{
						$kv_header[$ipid]['kvnumber'] = $healthinsu_multi_array[$ipid]['kvk_no'];
					}
					else
					{
						$kv_header[$ipid]['kvnumber'] = $healthinsu_multi_array[$ipid]['company']['kvnumber'];
					}
						
					$kv_header[$ipid]['insurance_no'] = $healthinsu_multi_array[$ipid]['insurance_no'];
					$kv_header[$ipid]['insurance_status'] = $healthinsu_multi_array[$ipid]['insurance_status'];
						
					$kv_header[$ipid]['betriebsstatten_nr'] = $users_details[0]['betriebsstattennummer'];
					$kv_header[$ipid]['arzt_nr'] = $users_details[0]['LANR'];
					$kv_header[$ipid]['patient_name_address'] = htmlspecialchars($patient_days[$ipid]['details']['last_name']) . ", " . htmlspecialchars($patient_days[$ipid]['details']['first_name']) . "\n" . htmlspecialchars($patient_days[$ipid]['details']['street1']) . "\n" . htmlspecialchars($patient_days[$ipid]['details']['zip']) . " " . htmlspecialchars($patient_days[$ipid]['details']['city']);
					$kv_header[$ipid]['patient_birthdate'] =date("d.m.Y",strtotime($patient_days[$ipid]['details']['birthd']));
					$kv_header[$ipid]['patient_name'] = htmlspecialchars($patient_days[$ipid]['details']['last_name']) . ", " . htmlspecialchars($patient_days[$ipid]['details']['first_name']);
					$kv_header[$ipid]['patient_address'] = htmlspecialchars($patient_days[$ipid]['details']['street1']) . " " . htmlspecialchars($patient_days[$ipid]['details']['zip']) . "\n" . htmlspecialchars($patient_days[$ipid]['details']['city']);
					$kv_header[$ipid]['patient_address'] = htmlspecialchars($patient_days[$ipid]['details']['street1']) . " " . htmlspecialchars($patient_days[$ipid]['details']['zip']) . "\n" . htmlspecialchars($patient_days[$ipid]['details']['city']);

					$patient_data_diagnos[$ipid]['main_diagnosis'] = implode(', ', $patients_main_diag[$ipid]['icd']);

					// Prepare print data
					$alias['home_visit'] = "Hausbesuch";
					$alias['beratung'] = "Beratung";
					$alias['koordination'] = "Koordination";
					$alias['telefon'] = "Telefonat";
					$alias['24_h_shift'] = "24h-Rufbereitschaft";
					
					$print_data = array();
					$print_data['kv_header'] = $kv_header[$ipid];
					$print_data['patient_data'] = $patient_data_diagnos[$ipid];
					$print_data['alias'] = $alias;
					
					//organize leistung data
					$print_data['patientdetails'] = $patient_days[$ipid]['details'];
					$print_data['extra_data_details'] = $extra_details_array[$ipid];
					$print_data['users_array'] = $user_array ;
					$print_data['client_details'] = $client_details[0];
					$print_data['invoice_data']['invoice_start'] = date('d.m.Y', strtotime($current_period['start']));
					$print_data['invoice_data']['invoice_end']  = date('d.m.Y', strtotime($current_period['end']));
					//print_r($print_data); exit;
					$files[] = $this->generate_joined_files_pdf('4', $print_data, 'patient_actions_list_bulk', 'patient_contacts_pdf_items.html');
				}
				
				/* $record_id = $this->generatePdfNew_2017(
						$chk=0,
						$post = $print_data,
						$pdfname = "patient_actions_list",
						$filename = "patient_contacts_pdf_items.html",
						$extra = array(
								//"htmlform" => $this->view->render("patientformnew/sgbvleistungsnachweispdf.html")
								"pdfname"=> $this->view->translate('patient-actions-list') . " (" . mb_convert_encoding(strftime('%B %Y', strtotime($current_period['start'])) , 'utf8') . ")",
				
						)
						); */
				

				//Final step merge generated files!
				//$patient_data['ipid'] = $ipid;
				//$patient_data['epid'] = $patient_epid;
				$patient_data = array();
				$source = 'RPBulk';
				$this->join_pdfs_new($files, $patient_data ,$source);
				
			}
		}
	}
	/**
	 * @author Carmen
	 * ISPC-2370
	 */
	public function munster4newAction()
	{
		$ipid = $this->ipid;
		$clientid = $this->logininfo->clientid;
		$userid = $this->logininfo->userid;
		
		$modules =  new Modules();
		$clientModules = $modules->get_client_modules($clientid);
		
		//PatientHealthInsurance
		$phelathinsurance = new PatientHealthInsurance();
		$phealthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
		
		$phealthinsurance_data['company_name'] = $phealthinsu_array[0]['company_name'];
		$phealthinsurance_data['insurance_no'] = $phealthinsu_array[0]['insurance_no'];
		$phealthinsurance_data['insurance_status'] = $phealthinsu_array[0]['insurance_status'];
		$phealthinsurance_data['kvnumber'] = $phealthinsu_array[0]['kvk_no'];
		//var_dump($phealthinsurance_data); exit;
	
		$form = new Application_Form_PatientMunster4(array(
				'_patientMasterData'    => $this->_patientMasterData,
				'_phealthinsurance'		=> $phealthinsurance_data,
				'_clientModules'        => $clientModules,
				'_block_name'           => 'MUNSTER4',
		));
	
		if($_REQUEST['msid'])
		{
			$form_id = $_REQUEST['msid'];
		}
	
		//last saved values
		//$saved_values = $this->_munster4_GatherDetails($form_id);
		//print_r($saved_values); exit;
	
		$form->create_form_munster4($saved_values);
	
		$request = $this->getRequest();
	
		//$saved_values = array();
	
		if ( ! $request->isPost()) {
	
			//TODO move to populate
			//$form->populate($options);
	
	
		} elseif ($request->isPost()) {
	
			$post = $request->getPost();
			//print_r($post); exit;
			//$form->populate($post);
			$post_form = array();
			$save_form = array();
			foreach($post as $kp => &$vp)
			{
				if($kp == 'stamp_block')
				{
					$post_form[$kp] = $vp;
				}
				if($kp == 'header')
				{
					foreach($vp['header'] as $kd => $vd)
					{
						$post_form[$kd] = $vd;
						$save_form[$kd] = $vd;
					}
				}
				foreach($vp as $kd => &$vd)
				{
					if($kd == 'users_stamps')
					{
						$userstamp = explode('-', $vd['userstamps']);
						if(count($userstamp) > 1)
						{
							$post_form['stampuser'] = $userstamp[0];
							$post_form['stampid'] = $userstamp[1];
						}
						else 
						{
							$post_form['stampuser'] = $userstamp[0];
						}
					}
					else 
					{						
						if($kp == 'header')
						{
							$post_form[$kd] = $vd;
						}
						else 
						{
							if($kd == "treatment_info"){
								if($vd['from_text'])
								{
									$vd['from_text'] = str_split($vd['from_text'], 1);
								}
								if($vd['till_text'])
								{
									$vd['till_text'] = str_split($vd['till_text'], 1);
								}
							}
							if($post['topform_details']['to'] != ""){
								$post['topform_details']['to'] =str_split($post['topform_details']['to'], 1);
							}
							$post_form[$kd] = $vd;
							$save_form[$kd] = $vd;
						}
					}
				}
			}
			unset($post_form['header']);
			unset($post_form['button_action']);
			unset($save_form['button_action']);
	//print_r($post_form); exit;
			if ( $form->isValid($post)) // no validation is implemented
			{
	
	
				if($_POST['formular']['button_action'] == "save")
				{
					
					//$post_form['userid'] = $this->logininfo->userid;
					$patient_munster4  = $form->save_form_munster4($this->ipid, $save_form);
	
					if($patient_munster4->id)
					{
						$coursetitle = PatientMunster4::PATIENT_COURSE_TITLE;
						$custcourse = new PatientCourse();
						$custcourse->ipid = $ipid;
						$custcourse->course_date = date("Y-m-d H:i:s", time());
						$custcourse->course_type = Pms_CommonData::aesEncrypt(PatientMunster4::PATIENT_COURSE_TYPE);
						$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($coursetitle));
						$custcourse->user_id = $userid;
						$custcourse->tabname = Pms_CommonData::aesEncrypt(PatientMunster4::PATIENT_COURSE_TABNAME);
						$custcourse->recordid = $patient_rubin->id;
						$custcourse->done_name = PatientMunster4::PATIENT_COURSE_TABNAME;
						$custcourse->done_id = $patient_rubin->id;
						$custcourse->save();
							
					}
					
					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
				}
				else if($_POST['formular']['button_action'] == "print_pdf")
				{
					$this->generatePdfNew(3, $post_form, 'Muster4pdf', "munster4new_pdf.html");
					/*//$form->removeDisplayGroup('form_actions');
					$form = new Application_Form_PatientMunster4(array(
							'_patientMasterData'    => $this->_patientMasterData,
							'_phealthinsurance'		=> $phealthinsurance_data,
							'_clientModules'        => $clientModules,
							'_forme_mode' => 'witout_dummy',
							'_block_name'           => 'MUNSTER4',
					));
					
					$form->create_form_munster4($post_form);
					
					$form->removeDecorator('Form');
					$form->removeSubForm('tabs_navi');
					$form->removeSubForm('form_actions');
					//ISPC - 2353
					/* if($post_form['before_anamnesis_total'] >=12)
					 {
					 $form->removeSubForm('anamnesis');
					 $form->removeSubForm('anamnesis_total');
					 } */
					/*$today_date = date('d.m.Y');
					$nice_name_epid = $this->_patientMasterData['nice_name_epid'];
					
					
					/*$bsHead = <<<EOT
					 <html>
					 <head>
					 <link href="%s/css/page-css/besdsurvey.css" rel="stylesheet" type="text/css" />
					 <style>
					 @page { margin: 20px 20px 60px 60px; }
					 </style>
					 </head>
					 <body >
					 	
					 	
					 EOT;
					
					 $bsFoot = <<<EOT
					 	
					 </body>
					 </html>
					 EOT;*/
					/*$html_form  = $form->__toString();
					
					
					$html_form =  $this->html_prepare_dompdf($html_form);
					
					
					/*$html_print = sprintf($bsHead, APP_BASE)
					 . $html_form
					 . $bsFoot
					 ;*/
					//echo $html_print;exit;
					
					/*$this->view->form_pdf = $html_form; //this is the body of the pdf
					
					$html_print = $this->view->render("templates/munster4new_pdf_new.phtml");
					echo $html_print; exit;
					$options = new Options();
					$options->set('isRemoteEnabled', false);
					$dompdf = new Dompdf($options);
					
					$dompdf->loadHtml($html_print);
					// (Optional) Setup the paper size and orientation
					$dompdf->setPaper('A4', 'portrait');
					
					$dompdf->set_option("enable_php",true);
					$dompdf->set_option('defaultFont', 'times');
					$dompdf->set_option("fontHeightRatio",0.90);
					
					// Render the HTML as PDF
					$dompdf->render();
					
					$output = $dompdf->output();
					
					// Output the generated PDF to Browser
					//$dompdf->stream($this->translate(PatientBesd::PATIENT_FILE_TITLE), array('Attachment' => true));
					//                        $dompdf->stream();
					
					$result = $this->dompdf_ToFTP($output, $this->translate(PatientRubin::PATIENT_FILE_TITLE));
					
					if ($result !== false) {
					
						$encrypted = Pms_CommonData::aesEncryptMultiple(array(
								'title' => "munster4new_pdf_new",
								'file_name' => $result,
								'file_type' => 'PDF',
						));
							
							
						$entity = new PatientFileUpload ();
						//bypass triggers, we will use our own
						$entity->triggerformid = null;
						$entity->triggerformname = null;
							
						$entity->title = $encrypted['title'];
						$entity->ipid = $this->ipid;
						$entity->file_name = $encrypted['file_name'];
						$entity->file_type = $encrypted['file_type'];
						//$entity->recordid = $patient_besdsurvey->id;
						$entity->tabname = "munster4new_pdf_new";
					
							
						$entity->system_generated = "0"; //TODO this should be 0?
						$entity->save();
					
						$recordid = $entity->id;
						//$form_ident="mna";
						//$form_date_dmY = date('d.m.Y', strtotime($post_form['form_date']));
						/* $comment =   $this->translate('patient_rubin_'.$form_ident.' PDF was created');
						$comment =   str_replace('%date', $form_date_dmY, $comment); */
						/*$comment = "munster4new_pdf_new was created";
						$cust = new PatientCourse();
						$cust->ipid = $this->ipid;
						$cust->course_date = date("Y-m-d H:i:s", time());
						$cust->course_type = Pms_CommonData::aesEncrypt("K");
						$cust->course_title = Pms_CommonData::aesEncrypt($comment);
						$cust->recordid = $recordid;
						$cust->tabname =  "munster4_new_pdf_new";
						$cust->user_id = $userid;
						$cust->save();
							
							
							
					}
					
					
					// empty the post by using a redirect
					//$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ), array (
					// 						$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ) . "&selected_month=" . $query_date, array (
					//"exit" => true
					//) );*/
				}
				else if($_POST['formular']['button_action'] == "print_pdf_and_save")
				{
					$this->generatePdfNew(3, $post_form, 'Muster4pdfsave', "munster4new_pdf.html");
				}
				else if($_POST['formular']['button_action'] == "preprint_pdf_and_save")
				{
					$this->generatePdfNew(3, $post_form, 'Muster4prepdfsave', "munster4new_pre_pdf.html");
				}					
	
			} else {
	
	
				$form->populate($post);
	
			}
	
		}
	
		//@todo : move messages in layout
		$this->view->SuccessMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('SuccessMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
				);
		$this->view->ErrorMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('ErrorMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
				);
	
		$this->_helper->flashMessenger->clearMessages('ErrorMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');
	
		$this->_helper->flashMessenger->clearMessages('SuccessMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');
	
		$this->view->form = $form;
		$this->view->enc_id = $this->enc_id;
	
			
	
	}
	
    /**
	 *
	 * @see ISPC-2370
     * ISPC-2627, ISPC: new form Krankenbeförderung 2020, elena, 18.08.2020
	 * //Maria:: Migration CISPC to ISPC 02.09.2020
	 */
	public function muster4072020Action()
	{
		$ipid = $this->ipid;
		$clientid = $this->logininfo->clientid;
		$userid = $this->logininfo->userid;

		$modules =  new Modules();
		$clientModules = $modules->get_client_modules($clientid);

		//PatientHealthInsurance
		$phelathinsurance = new PatientHealthInsurance();
		$phealthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);

		$phealthinsurance_data['company_name'] = $phealthinsu_array[0]['company_name'];
		$phealthinsurance_data['insurance_no'] = $phealthinsu_array[0]['insurance_no'];
		$phealthinsurance_data['insurance_status'] = $phealthinsu_array[0]['insurance_status'];
		$phealthinsurance_data['kvnumber'] = $phealthinsu_array[0]['kvk_no'];
		//var_dump($phealthinsurance_data); exit;


		$form = new Application_Form_PatientMuster4072020(array(
				'_patientMasterData'    => $this->_patientMasterData,
				'_phealthinsurance'		=> $phealthinsurance_data,
				'_clientModules'        => $clientModules,
				'_block_name'           => 'MUNSTER4',
		));

		if($_REQUEST['msid'])
		{
			$form_id = $_REQUEST['msid'];
		}

		//last saved values
		//$saved_values = $this->_munster4_GatherDetails($form_id);
		//print_r($saved_values); exit;

		$form->create_form_munster4($saved_values);

		$request = $this->getRequest();

		//$saved_values = array();

		if ( ! $request->isPost()) {

			//TODO move to populate
			//$form->populate($options);


		} elseif ($request->isPost()) {

			$post = $request->getPost();
			//print_r($post); exit;
            print_r($post);
			//$form->populate($post);
			$post_form = array();
			$save_form = array();
			foreach($post as $kp => &$vp)
			{
				if($kp == 'stamp_block')
				{
					$post_form[$kp] = $vp;
				}
				if($kp == 'header')
				{
					foreach($vp['header'] as $kd => $vd)
					{
						$post_form[$kd] = $vd;
						$save_form[$kd] = $vd;
					}
				}
				foreach($vp as $kd => &$vd)
				{
					if($kd == 'users_stamps')
					{
						$userstamp = explode('-', $vd['userstamps']);
						if(count($userstamp) > 1)
						{
							$post_form['stampuser'] = $userstamp[0];
							$post_form['stampid'] = $userstamp[1];
						}
						else
						{
							$post_form['stampuser'] = $userstamp[0];
						}
					}
					else
					{
						if($kp == 'header')
						{
							$post_form[$kd] = $vd;
						}
						else
						{
							if($kd == "treatment_info"){
								if($vd['from_text'])
								{
									$vd['from_text'] = str_split($vd['from_text'], 1);
								}
								if($vd['till_text'])
								{
									$vd['till_text'] = str_split($vd['till_text'], 1);
								}
							}
							if($post['topform_details']['to'] != ""){
								$post['topform_details']['to'] =str_split($post['topform_details']['to'], 1);
							}
							$post_form[$kd] = $vd;
							$save_form[$kd] = $vd;
						}
					}
				}
			}
			unset($post_form['header']);
			unset($post_form['button_action']);
			unset($save_form['button_action']);
	//print_r($post_form); exit;
			if ( $form->isValid($post)) // no validation is implemented
			{


				if($_POST['formular']['button_action'] == "save")
				{

					//$post_form['userid'] = $this->logininfo->userid;
					$patient_munster4  = $form->save_form_munster4($this->ipid, $save_form);

					if($patient_munster4->id)
					{
						$coursetitle = PatientMunster4::PATIENT_COURSE_TITLE;
						$custcourse = new PatientCourse();
						$custcourse->ipid = $ipid;
						$custcourse->course_date = date("Y-m-d H:i:s", time());
						$custcourse->course_type = Pms_CommonData::aesEncrypt(PatientMunster4::PATIENT_COURSE_TYPE);
						$custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($coursetitle));
						$custcourse->user_id = $userid;
						$custcourse->tabname = Pms_CommonData::aesEncrypt(PatientMunster4::PATIENT_COURSE_TABNAME);
						$custcourse->recordid = $patient_rubin->id;
						$custcourse->done_name = PatientMunster4::PATIENT_COURSE_TABNAME;
						$custcourse->done_id = $patient_rubin->id;
						$custcourse->save();

					}

					$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
				}
				else if($_POST['formular']['button_action'] == "print_pdf")
				{
					$this->generatePdfNew(3, $post_form, 'Muster4pdf', "muster4072020_pdf.html");

				}
				else if($_POST['formular']['button_action'] == "print_pdf_and_save")
				{
					$this->generatePdfNew(3, $post_form, 'Muster4pdfsave', "muster4072020_pdf.html");
				}
				else if($_POST['formular']['button_action'] == "preprint_pdf_and_save")
				{
					$this->generatePdfNew(3, $post_form, 'Muster4prepdfsave', "muster4072020pre_pdf.html");
				}

			} else {


				$form->populate($post);

			}

		}

		//@todo : move messages in layout
		$this->view->SuccessMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('SuccessMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('SuccessMessages')
				);
		$this->view->ErrorMessages = array_merge(
				$this->_helper->flashMessenger->getMessages('ErrorMessages'),
				$this->_helper->flashMessenger->getCurrentMessages('ErrorMessages')
				);

		$this->_helper->flashMessenger->clearMessages('ErrorMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('ErrorMessages');

		$this->_helper->flashMessenger->clearMessages('SuccessMessages');
		$this->_helper->flashMessenger->clearCurrentMessages('SuccessMessages');

		$this->view->form = $form;
		$this->view->enc_id = $this->enc_id;



	}



	private function _munster4_GatherDetails( $form_id = null)
	{
		//var_dump($this->ipid); exit;
		//one formular / patient
		$entity  = new PatientMunster4();
		$saved_formular_final = array();
	
		if($form_id)
		{
			$saved_formular = $entity->getTable()->findOneBy('id', $form_id, Doctrine_Core::HYDRATE_RECORD);
			//print_r($saved_formular);
			foreach($saved_formular as $kcol=>$vcol)
			{
	
				$saved_formular_final[$kcol]['colprop'] = $entity->getTable()->getColumnDefinition($kcol);
				$saved_formular_final[$kcol]['value'] = $vcol;
			}
			$saved_formular_final['form_id'] = $form_id;
		}
		else
		{
			//$saved_formular= $entity->findOrCreateOneByIdAndIpid($form_id , $this->ipid);
	
			//if(!$saved_formular)
			//{
			$saved_formular= $entity->getTable()->getFieldNames();
	
			foreach($saved_formular as $kcol=>$vcol)
			{
				$saved_formular_final[$vcol]['colprop'] = $entity->getTable()->getColumnDefinition($vcol);
				$saved_formular_final[$vcol]['value'] = null;
			}
			}
	
	
			//print_r($saved_formular_final); exit;
	
			//Teste
			return $saved_formular_final;
		}
	
	
		

		/**
		 * @author Ancuta
		 * 01.10.2019
		 * Copy of rlppateintcontroll
		 * ISPC-2461
		 * 
		 */
		public function demstepcarecontrolAction(){
		
		    setlocale(LC_ALL, 'de_DE');
		    // language is an array
		    $page_lang = $this->translate ( 'demstepcare_invoice_lang' );
		
		    // save a formular
		    if ($this->getRequest ()->isPost ()) {
// 		dd($_POST);
		        if ($_POST ['action'] == "save"  || $_POST ['action'] == "save_and_pdf" || $_POST ['action'] == "reset") {
		
		            $form_obj = new Application_Form_DemstepcareControl ( array (
		                '_patientMasterData' => $this->_patientMasterData,
		                '_block_name' => 'demstepcarecontrol'
		            ) );
		
		            if ($form_obj->validate ( $_POST )) {
		
		                	
		                if ($_POST ['action'] == "save") {
		                    $form_obj->insert ( $_POST );
		
		                    	
		                    // empty the post by using a redirect
		                    $this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ), array (
		                    // 						$this->redirect ( APP_BASE . $this->getRequest ()->getControllerName () . "/" . $this->getRequest ()->getActionName () . "?id=" . Pms_Uuid::encrypt ( $this->_patientMasterData ['id'] ) . "&selected_month=" . $query_date, array (
		                        "exit" => true
		                    ) );
		                } elseif ($_POST ['action'] == "save_and_pdf") {
		                    $form_obj->insert ( $_POST );
		                    // print the pdf also
		                    // the print is performed at the end of this function, so we have all the data
		                } elseif ($_POST ['action'] == "reset") {
		                    $form_obj->reset ( $_POST );
		                    // print the pdf also
		                    // the print is performed at the end of this function, so we have all the data
		                }
		            }
		        }
		    }
		
		    // new instance
		    $patientmaster = new PatientMaster ();
		

		    $this->view->pname = $this->_patientMasterData['nice_name'];
		    $this->view->pateint_birth= $this->_patientMasterData['birthd'];
		    
		    //ISPC-2585 Ancuta 15.06.2020
    		// GET PATIENT ASSIGNED DOCTORS 
    		// !!!!!!!!!!!!!!!!!!!!!!!
		    $master_groups = array('4');
		    
		    $client_user_groups_first = Usergroup::getUserGroups($master_groups);
		    $client_doctor_groups = array();
		    foreach($client_user_groups_first as $k_group_f => $v_group_f)
		    {
		        $client_doctor_groups[] = $v_group_f['id'];
		    }
		    
		    
		    $assigned_users = array();
		    $assigned_doctors = array();
		    $pqm = new PatientQpaMapping();
		    $assigned_users = $pqm->get_patient_assigned_doctors(array($this->_patientMasterData['epid']),$this->logininfo->clientid,'details');
		    if(!empty($assigned_users[$this->_patientMasterData['epid']])){
		        foreach($assigned_users[$this->_patientMasterData['epid']] as $k=>$user_details){
		            if(in_array($user_details['groupid'],$client_doctor_groups)){
		                $assigned_doctors[] = $user_details['id']; 
		            }
		        }
		    }
		    $assigned_doctor_id = 0 ;
		    $this->view->count_assigned_doctors = count($assigned_doctors);
		    if(count($assigned_doctors) == 1){
		        $assigned_doctor_id = $assigned_doctors[0];
		    }
		    //--
		    
		    // get patients healthinsurance.. in $this->_patientMasterData is on an icon
		    $phelathinsurance = new PatientHealthInsurance ();
		    $healthinsu_array = $phelathinsurance->get_patients_healthinsurance_number ( $this->ipid );
		    

		    // get client details
		    $client_data = new Client ();
		    $client_details = $client_data->getClientDataByid ( $this->logininfo->clientid );
		    $client_details = $client_details [0];
		    
		    
		    // get the actions of this client
		    $actionslist_by_id_arr = array (); // used later for display
		
		    
		    $InvoiceSystem_obj  = new InvoiceSystem();
		    $invoice_products = $InvoiceSystem_obj->invoice_products('demstepcare_invoice');
		
		    $sp_products = DemstepcareProductsTable::findPruductsByClient($this->clientid);
		    
		    $client_products_arr = array();
		    foreach($sp_products as $k=>$product_details){
		        if(in_array($product_details['shortcut'],$invoice_products)){
		            $products[$product_details['shortcut']] = $product_details['product_name'];
		            
		            $actionslist_by_id_arr [$product_details['shortcut']]['action_name'] = $product_details['product_name'];
		            $client_products_arr[$product_details['shortcut']] = $product_details['product_name'];
		        }
		    }
// 		    dd($actionslist_by_id_arr);
		
		    $this->view->action_actions_arr = $actionslist_by_id_arr;
		
		    // Get patients active days- create months
		    $conditions['periods'][0]['start'] = '2009-01-01';
		    $conditions['periods'][0]['end'] = date('Y-m-d');
		    $conditions['client'] = $this->logininfo->clientid;
		    $conditions['ipids'] = array( $this->ipid);
		
		    //beware of date d.m.Y format here
		    $patient_days = Pms_CommonData::patients_days($conditions);
		    //get number of days in each month + start/end day START
		
		    $patient_active_days = array();
		    $patient_active_days = $patient_days[ $this->ipid]['real_active_days'];
		    if(!empty($patient_days[ $this->ipid]['hospital']['real_days_cs']) && !empty($patient_days[ $this->ipid]['real_active_days'])){
		        $patient_active_days = array_diff($patient_days[ $this->ipid]['real_active_days'],$patient_days[ $this->ipid]['hospital']['real_days_cs']);
		    }
		    $patient_quart_arr = array();
		    $patient_active_years = array();
		    $patient_quart_dates_arr = array();
		    foreach($patient_active_days as $date){
		        $month = date("n", strtotime($date));
		        $yearQuarter = ceil($month / 3);
		        
		        $patient_quart_arr['0'.$yearQuarter.'/'.date("Y", strtotime($date))] = 'Q'.$yearQuarter.' '.date("Y", strtotime($date));
		        $patient_quart_dates_arr['0'.$yearQuarter.'/'.date("Y", strtotime($date))][] = date("Y-m-d", strtotime($date));
		        $patient_active_years[date("Y", strtotime($date))] = date("Y", strtotime($date));
// 		        get_dates_of_quarter
		    }
		    $patient_active_years = array_unique($patient_active_years);
		    
		    $patient_quart_arr= array_unique($patient_quart_arr);
		    $patient_quart_arr_show= array_values($patient_quart_arr);
		    
		    $this->view->patient_quart_dates_arr = $patient_quart_dates_arr;
		    $this->view->patient_q_period_show = $patient_quart_arr_show;
		    $this->view->patient_q_period = $patient_quart_arr;
		    $this->view->client_products_arr = $client_products_arr; 
		    
		    
		    
		    // Get Actions
		    $dsp_control = new DemstepcareControl();
		    $patient_period_days_arr[$this->ipid] = $patient_active_days;
		    //only saved actions
		    $dsp_saved_products = array();
// 		    $dsp_saved_products = $dsp_control->saved_dsc_controlsheets ( array($this->ipid), $patient_period_days_arr,"form");
		    $dsp_saved_products = $dsp_control->saved_dsc_controlsheets ( array($this->ipid), false,"form");
		    
		    
// 		    dd($dsp_saved_products);
		    $this->view->has_saved_data = 0 ;
		    if(!empty($dsp_saved_products)){
		        $this->view->has_saved_data = 1;
		    }
		    
		    $dsp_patient_products = $dsp_saved_products;
		    // saved or set by system
		    $dsp_final_products = array();
		    $dsp_final_products = $dsp_control->get_dsc_controlsheets ( array($this->ipid), $patient_period_days_arr,"form");
		    
		    
		    $this->view->dsp_patient_products = $dsp_final_products[$this->ipid]; 
		
		
 
		
		        // get client details
		        $client_data = new Client ();
		        $client_details = $client_data->getClientDataByid ( $this->logininfo->clientid );
		        $client_details = $client_details [0];
		
		
		        $nice_days_digits = array ();
		        $nice_days_letter = array ();
		        $empty_days = array ();
		 
		
// 		        dd( $saved_data_rows);
		        // 		dd(count($saved_data_rows));
		
		        $this->view->data_arr = array_merge ( $table_header, $saved_data_rows, $table_footer ); // this are the rows of the table
		        $this->view->pdf_print_as_group = $pdf_print_as_group;
		        $this->view->pdf_table_header = $table_header;
		
		
		
		        // print a pdf
		        if ($this->getRequest ()->isPost ()) {
		            if ($_POST ['action'] == "save_and_pdf" || $_POST ['action'] == "generate_pdf") {
// 		            dd($_POST);
		
// 		                $FUCK_tcpdf = array();
// 		                $FUCK_tcpdf[] = array(
// 		                    array('attributes'=>array('escaped' => "0"))
// 		                );
// 		                $FUCK_tcpdf = $this->view->tabulate($FUCK_tcpdf, array("no_header"=>true, "class"=>"no_border"));
		                // print the pdf also

		                $post = $_POST;
		                $post['pname']= $this->_patientMasterData['nice_name'];
		                $post['pateint_birth']= $this->_patientMasterData['birthd'];
		                
		                $post['action_actions_arr']= $actionslist_by_id_arr;
		                $post['patient_quart_dates_arr']= $patient_quart_dates_arr;
		                $post['patient_q_period_show']= $patient_quart_arr_show;
		                $post['patient_q_period']= $patient_quart_arr;
		                $post['client_products_arr']= $client_products_arr;
		                

		                
		                $record_id = $this->generatePdfNew_2017 ( $chk = 0, $post, $pdfname = "demstepcarecontrol", $filename = "demstepcarecontrol.html", $extra = array (
		                    "pdfname" => $this->view->translate ( 'rlppatientcontrol' ) . " (" . mb_convert_encoding ( strftime ( '%B %Y', strtotime ( $query_date ) ), 'utf8' ) . ")"
		                )
		                );
		                exit ();
		            } 
		            // ISPC-2585  Ancuta 15-16.06.2020	            
		            elseif ($_POST ['action'] == "generate_invoices") {
		                

		                $_REQUEST['patient'] = $this->_patientMasterData['epid'];
		                $_REQUEST['quarter'] = $_POST['form']['quarter_invoice'];
		                $_REQUEST['type'] = 'pdf';
		                
                        
		                
		                $_REQUEST['skip_pdf'] = 1; // go not generate pdsf, just create drafts 

		                include 'InvoicenewController.php';
		                $invoiceController = new InvoicenewController($this->_request, $this->_response);

		                // generate External invoice
                        $_REQUEST['external_invoice'] = true;
 		                $invoices_data = $invoiceController->systeminvoiceAction();
		                
		                
		                // generate internal invoice
		                $_REQUEST['internal_invoice'] = true;
		                $_REQUEST['internal_user_id'] = $assigned_doctor_id;
		                $_REQUEST['invoice_type'] = 'demstepcare_internal_invoice';
		                $_REQUEST['external_invoice_id'] = $invoices_data['invoice_id'];
		                $internal_invoices_data = $invoiceController->systeminvoiceAction();
		                
		                
		                $this->_redirect(APP_BASE . "patientformnew/demstepcarecontrol?id=" . $_REQUEST['id'].'&msg=succ');
		            }
		            // -- 
		            
		        }
		}
		
		//ISPC-2426 Carmen 06.11.2019
		public function shbulkfilledfilesAction()
		{
			setlocale(LC_ALL, 'de_DE.UTF-8');
			$this->_helper->layout->setLayout('layout_ajax');
			$this->_helper->viewRenderer->setNoRender();
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$client_details = Pms_CommonData::getClientData($clientid);
			$patientmaster = new PatientMaster();
			$userid = $logininfo->userid;
			$hidemagic = Zend_Registry::get('hidemagic');
			$sapv = new SapvVerordnung();
			
			$posted_ipids= array();
			if($this->getRequest()->isPost())
			{
				//if($_POST['generate_sh'] == "1" && strlen($_POST['sh_month']) > 0  )
				if($_POST['generate_form'] == "1" && strlen($_POST['form_month']) > 0  )
				{
					$selected_month = $_POST['form_month'];
		
					$a_post = $_POST;
					
					//$sh_pdf = unserialize($a_post['sh_pdfs_data']);
					
					foreach($a_post['patients_ids'] as $$k => $enryptped_id)
					{
						$decripted_ids[] = Pms_Uuid::decrypt($enryptped_id);
					}
		
					$patient_ipids_q = Doctrine_Query::create()
					->select('ipid')
					->from('PatientMaster')
					->where('isdelete = 0')
					->andWhereIn('id',$decripted_ids);
					$patient_ipids_arr = $patient_ipids_q->fetchArray();
		
					foreach($patient_ipids_arr as $kip=>$p_ipid)
					{
						$posted_ipids[] = $p_ipid['ipid'];
					}
				}
			}
			else
			{
				$selected_month = $_REQUEST['month'];
			}
			

			//ISPC-2426
			$month_select_array_filled = array($selected_month);
			$sh_pdf = $this->_shanlage14bulk_GatherDetails($posted_ipids, $month_select_array_filled);
			//ISPC-2426

			$forms2pdf = array(
					"shimplementationproof",
					"shanlage14"
			);
		
/* 			//var_dump($sh_pdf); exit;
			if(in_array("shanlage14",$forms2pdf)){
				foreach($posted_ipids as $posted_ipid)
				{				
					foreach($sh_pdf[$posted_ipid] as $keyp => $valp)
					{
						
						if($keyp == 'month_det')
						{
							foreach($valp as $km => $vm)
							{								
								switch($km)
								{
									case $selected_month:
										$val_month = $vm;
										break;
									default:
										unset($valp[$km]);
										break;
								}
							}
						}
						else 
						{
							$post['shanlage14'][$keyp] = $valp;
						}
					}
					$post['shanlage14'] = array_merge($post['shanlage14'], $val_month);
					//var_dump($post['shanlage14']);
					$files[] = $this->generate_joined_files_pdf('4', $post['shanlage14'], 'shanlage14filled', 'shanlage14_pdf.html');
				}
			} */

			
			$this->view->folder_stamp = time();
		
			$this->view->selected_month = $selected_month;
			$this->view->month_selected = date('m.Y', strtotime($selected_month . '-01'));
		
			if(!function_exists('cal_days_in_month'))
			{
				$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($selected_month . "-01")), 1, date("Y", strtotime($selected_month . "-01"))));
			}
			else
			{
				$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($selected_month . "-01")), date("Y", strtotime($selected_month . "-01")));
			}
		
		
			$months_details[$selected_month]['start'] = $selected_month . "-01";
			$months_details[$selected_month]['days_in_month'] = $month_days;
			$months_details[$selected_month]['end'] = $selected_month . '-' . $month_days;
			//check if a month is selected END
		
			//get active ipids details
			$sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,CONVERT(AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') using latin1) as first_name,";
			$sql .= "CONVERT(AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
			$sql .= "CONVERT(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
			$sql .= "CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
			$sql .= "CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
			$sql .= "CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
			$sql .= "CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
			$sql .= "CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
			$sql .= "CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
			$sql .= "CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
			$sql .= "CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
			$sql .= "CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex";
		
			// if super admin check if patient is visible or not
			if($logininfo->usertype == 'SA')
			{
				$sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.isadminvisible,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as first_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as middle_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as last_name, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as title, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as salutation, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street1, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as street2, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as zip, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as city, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as phone, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as mobile, ";
				$sql .= "IF(p.isadminvisible = 1,CONVERT(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1),'" . $hidemagic . "') as sex ";
			}
		
		
			if(!empty($posted_ipids))
			{
				$q = Doctrine_Query::create()
				->select($sql)
				->from('EpidIpidMapping e')
				->leftJoin('e.PatientMaster p')
				->leftJoin('e.PatientActive a')
				->where('e.clientid = "'.$clientid.'" ')
				->andWhereIn('p.ipid',$posted_ipids);
				$active_ipids_details =   $q->fetchArray();
			}
			else
			{
				$q = Doctrine_Query::create()
				->select($sql)
				->from('EpidIpidMapping e')
				->leftJoin('e.PatientMaster p')
				->leftJoin('e.PatientActive a')
				->where('e.clientid = "'.$clientid.'" ')
				->andWhere('p.isdelete = 0')
				->andWhere('p.isstandby = 0')
				->andWhere('p.isdischarged = 0')
				->andWhere('p.isstandbydelete = 0');
				$active_ipids_details =   $q->fetchArray();
			}
			foreach($active_ipids_details as $k_active_patient => $v_active_patient)
			{
				$active_patients[$v_active_patient['ipid']] = $v_active_patient;
		
				$active_ipids[] = $v_active_patient['ipid'];
		
				$last_period[$v_active_patient['ipid']] = end($v_active_patient['PatientActive']);
		
				$active_patients[$v_active_patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['start']));
		
				if($last_period[$v_active_patient['ipid']]['end'] != "0000-00-00")
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = date('d.m.Y', strtotime($last_period[$v_active_patient['ipid']]['end']));
				}
				else
				{
					$active_patients[$v_active_patient['ipid']]['discharge_date'] = "-";
				}
				$active_patients[$v_active_patient['ipid']]['id'] = $v_active_patient['PatientMaster']['id'];
		
				$active_patients[$v_active_patient['ipid']]['birthd'] =  date('d.m.Y', strtotime( $v_active_patient['PatientMaster']['birthd']));
			}
		
			$this->view->active_patients = $active_patients;
		
			if(empty($active_ipids))
			{
				$active_ipids[] = '99999999999999999';
			}
		
			$this->view->active_patients = $active_patients;
		
			// Current month
			$current_period = $months_details[$selected_month];
		
		
			//get selected month days
			if($months_details[$selected_month])
			{
				$selected_month_days = $patientmaster->getDaysInBetween($months_details[$selected_month]['start'], $months_details[$selected_month]['end']);
				$selected_month_days_dmY = $patientmaster->getDaysInBetween($months_details[$selected_month]['start'], $months_details[$selected_month]['end'],false,"d.m.Y");
			}
		
			// Client National holidays
			$nhollyday = new NationalHolidays();
			$national_holidays_arr = $nhollyday->getNationalHoliday($clientid, $current_period['start'], true);
		
			foreach($national_holidays_arr as $k_natholliday => $v_natholliday)
			{
				$client_national_holidays[] = date('d.m.Y', strtotime($v_natholliday['NationalHolidays']['date']));
			}
		
		
			// Patients health insurance
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($active_ipids);
		
			foreach($healthinsu_array as $k=>$ph){
				$patients_health[$ph['ipid']] = $ph;
			}
		
			//user data
			$user = User::getUserDetails($userid);
		
			foreach($active_patients as $pipid => $pdata){
		
				if(in_array("shimplementationproof",$forms2pdf)){
		
					//#############################################################
					// 1. SH Durchführungsnachweis - ISPC-1079   ----------  START
					//#############################################################
					$post['shimplementationproof'] = array();
					$post['shimplementationproof']['epid'] = $pdata['epid'];
					$post['shimplementationproof']['first_name'] = $pdata['first_name'];
					$post['shimplementationproof']['last_name'] = $pdata['last_name'];
					$post['shimplementationproof']['birthd'] = $pdata['birthd'];
					$post['shimplementationproof']['national_holidays'] = $client_national_holidays;
					 
					//set current period to work with
					$post['shimplementationproof']['current_period'] = $current_period;
					$post['shimplementationproof']['month_year'] = strftime('%B %Y', strtotime($current_period['start']));
		
					//format array days to d.m.Y
					array_walk($selected_month_days, function(&$value) {
						$value = date("d.m.Y", strtotime($value));
					});
						// NOT USED
						$post['shimplementationproof']['shortcuts_old'] = array(
								'usage_1', 'usage_2', 'usage_3', 'usage_4', 'usage_5',
								'spacer', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'
						);
						// USED ISPC-2207 11.06.2018
						$post['shimplementationproof']['shortcuts'] = array(
								'usage_1_new',
								'spacer',
								'sh_title',
								'spacer',
								'sh_bowel movement',
								'sh_symptom control',
								'sh_control material',
								'sh_order_marerial',
								'empty','empty', 'empty','empty', 'empty','empty', 'empty', 'empty', 'empty'
						);
						$post['shimplementationproof']['selected_month_days'] = $selected_month_days;
		
						//save pdf as file
						$files[] = $this->generate_joined_files_pdf('4', $post['shimplementationproof'], 'shimplementationproof', 'shimplementationproof_pdf.html');
						//#############################################################
						// 1. SH Durchführungsnachweis - ISPC-1079   ----------  END
						//#############################################################
				}
				
				if(in_array("shanlage14",$forms2pdf)){
					$post['shanlage14'] = array();
						foreach($sh_pdf[$pipid] as $keyp => $valp)
						{
				
							if($keyp == 'month_det')
							{
								foreach($valp as $km => $vm)
								{
									switch($km)
									{
										case $selected_month:
											$val_month = $vm;
											break;
										default:
											unset($valp[$km]);
											break;
									}
								}
							}
							else
							{
								$post['shanlage14'][$keyp] = $valp;
							}
						}
						$post['shanlage14'] = array_merge($post['shanlage14'], $val_month);
						//print_r($post['shanlage14']); exit;
						$files[] = $this->generate_joined_files_pdf('4', $post['shanlage14'], 'shanlage14filled', 'shanlage14_pdf.html');
				}
			}
		
				/* if(in_array("shanlage14",$forms2pdf)){
		
					//#############################################################
					// 2. SH Anlage 14 - ISPC-1076    ---------------------  START
					//#############################################################
					$post['shanlage14']['epid'] = $pdata['epid'];
					$post['shanlage14']['first_name'] = $pdata['first_name'];
					$post['shanlage14']['last_name'] = $pdata['last_name'];
					$post['shanlage14']['birthd'] = $pdata['birthd'];
		
		
					if($client_details)
					{
						$post['shanlage14']['betriebsstatten_nr'] = $client_details[0]['betriebsstattennummer'];
						$post['shanlage14']['sapv_team'] = $client_details[0]['team_name'];
					}
		
					//set current period to work with
					$post['shanlage14']['current_period'] = $current_period;
					$post['shanlage14']['month_year'] = strftime('%B %Y', strtotime($current_period['start']));
		
					$post['shanlage14']['selected_month_days'] = $selected_month_days;
		
					$shortcuts_arr = array(
							'sh_beko',
							'sh_folgeko',
							'sh_doc_non_hospiz_visits',
							'sh_nur_non_hospiz_visits',
							'sh_other_visits',
							'sh_doc_hospiz_visits',
							'sh_telefonat',
							'sh_flatrate',
							//used only in custom totals
							'sh_nur_visits',
							'sh_nur_hospiz_visits',
					);
		
					$visits_shortcuts = array(
							'sh_doc_non_hospiz_visits',
							'sh_nur_non_hospiz_visits',
							'sh_other_visits',
							'sh_doc_hospiz_visits',
							//used only in custom totals
							'sh_nur_hospiz_visits',
							'sh_nur_non_hospiz_visits',
					);
		
					//shortcuts calculated internaly but not shown in view
					$excluded_shortcuts = array(
							'sh_nur_visits',
							'sh_nur_hospiz_visits',
					);
		
					$post['shanlage14']['shortcuts'] = $shortcuts_arr;
					$post['shanlage14']['excluded_shortcuts'] = $excluded_shortcuts;
		
					$post['shanlage14']['patient_first_name'] = $pdata['first_name'];
					$post['shanlage14']['patient_last_name'] = $pdata['last_name'];
					$post['shanlage14']['patient_dob'] = $pdata['birthd'];
		
					//patient HEALTH INSURANCE START
					$post['shanlage14']['hi_company_name'] = $patients_health[$pipid]['company_name'];
					$post['shanlage14']['insurance_no'] = $patients_health[$pipid]['insurance_no'];
					//patient HEALTH INSURANCE START
		
					$post['shanlage14']['start_date_erst'] = "";
					$post['shanlage14']['start_date_folge'] = '';
		
					$post['shanlage14']['clientid'] = $clientid;
					$post['shanlage14']['curent_month'] = $months_details[$selected_month]['start'];
					$post['shanlage14']['selected_month_days'] = $selected_month_days;
					$post['shanlage14']['current_period'] = $current_period;
		
		
					$post['betriebsstatten_nr'] = $client_details[0]['betriebsstattennummer'];
					$post['sapv_team'] = $client_details[0]['team_name'];
					 
					$post['shanlage14']['master_data']['raapv_sapv_date'] = '';
					$post['shanlage14']['master_data']['aapv_start'] = '';
					$post['shanlage14']['master_data']['aapv_end'] = '';
		
					$post['shanlage14']['master_data']['khws_sapv_date'] = '';
		
		
					$post['shanlage14']['master_data']['stathospiz_sapv_date'] = '';
					$post['shanlage14']['master_data']['hospiz_start'] = '';
					$post['shanlage14']['master_data']['hospiz_end'] = '';
		
					$post['shanlage14']['master_data']['pwunsch_sapv_date'] = '';
					$post['shanlage14']['master_data']['patient_wish_start'] ='';
					$post['shanlage14']['master_data']['patient_wish_end'] = '';
		
					$post['shanlage14']['master_data']['dead_sapv_date'] = '';
		
					foreach($anlage14_res['patient_hospitals'] as $k_res => $v_res)
					{
						$post['shanlage14']['hospital_start'][$k_res] = $v_res['start'];
						$post['shanlage14']['hospital_end'][$k_res] = $v_res['end'];
					}
					unset($anlage14_res['patient_hospitals']);
		
		
					$post['shanlage14']['overall_beko'] = '0';
					$post['shanlage14']['overall_folgeko'] = '0';
					$post['shanlage14']['overall_doc_nur_non_hospiz'] = '0';
					$post['shanlage14']['overall_doc_nur_hospiz'] = '0';
					$post['shanlage14']['overall_phones'] = '0';
		
					$post['shanlage14']['master_data']['real_active_days'] = $selected_month_days_dmY;
					$post['shanlage14']['master_data']['hospital_days'] = array();
		
		
					$files[] = $this->generate_joined_files_pdf('4', $post['shanlage14'], 'shanlage14', 'shanlage14_pdf.html');
					//#############################################################
					// 2. SH Anlage 14 - ISPC-1076    --------------------- END
					//#############################################################
				}
			} */
		
			//Final step merge generated files!
			/* $patient_data['ipid'] = $ipid;
			$patient_data['epid'] = $patient_epid; */
			$source = 'ShBulkfilled';
			$this->join_pdfs($files, $patient_data ,$source);
		
		}
		
		private function _shanlage14bulk_GatherDetails( $ipids = null, $month_select_array_filled = null)
		{
			if(empty($ipids) || empty($month_select_array_filled))
			{
				return;
			}
			$clientid = $this->logininfo->clientid;
			$client_details = Pms_CommonData::getClientData($clientid);
			$pm = new PatientMaster();
			$phelathinsurance = new PatientHealthInsurance();
			$locations = new Locations();
			$sapv = new SapvVerordnung();
			$disch_met = new DischargeMethod();
			$pat_disch = new PatientDischarge();
			$fit = new FormsItems();
			$ftoit = new Forms2Items();
			//$pat_course = new PatientCourse;
				
			//patient days
			$sql = 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
				
			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $ipids;
		
			$current_form = array('shanlage14');
			$form_items = $fit->get_all_form_items($clientid, array('shanlage14'), 'v');
			$items_arr = array_column($form_items[$current_form[0]], 'id');
			$items_contact_forms = $ftoit->get_items_forms($clientid, $items_arr);
				
			$patients_course_wrong = PatientCourseTable::findAllPatientsDeletedShortcutsOrByShortcutsOrbyTabname($ipids, array('F'), 'contact_form');
			$pat_wrong_recids = array_column($patients_course_wrong, 'recordid');
			$patients_tel = PatientCourseTable::findAllPatientsCourseOrByShortcutsOrNotWrong($ipids, array('XT'), true);
			$patients_tel_ipids =array();
			foreach($patients_tel as $v_tel)
			{
				$patients_tel_ipids[$v_tel['ipid']][] = $v_tel;
			}
				//var_dump($patients_tel_ipids); exit;
			$patients_cf_ipids =array();
			$patients_cf = ContactFormsTable::findAllPatientsContactFormsOrNotWrongs($ipids, $pat_wrong_recids);
			foreach($patients_cf as $v_cf)
			{
				$patients_cf_ipids[$v_cf['ipid']][] = $v_cf;
			}
			
			//var_dump($patients_cf_ipids); exit;
			$healthinsu_array = $phelathinsurance->get_multiple_patient_healthinsurance($ipids, true);
				
			$client_disch_met = $disch_met->getDischargeMethod($clientid, '3');
			$tod_ids = array();
			$raapv_ids = array();
			$khv_ids = array();
			$stathosp_ids = array();
			$pwu_ids = array();
				
			foreach($client_disch_met as $key => $abbvr)
			{
				switch($abbvr)
				{
					case 'TOD':
					case 'tod':
					case 'Tod':
					case 'Verstorben':
					case 'verstorben':
					case 'VERSTORBEN':
						$tod_ids[] = $key;
						break;
					case 'RAAPV':
					case 'Raapv':
					case 'raapv':
						$raapv_ids[] = $key;
						break;
					case 'KHWS':
					case 'khws':
					case 'Khws':
						$khv_ids[] = $key;
						break;
					case 'STATHOSPIZ':
					case 'Stathospiz':
					case 'stathospiz':
						$stathosp_ids[] = $key;
						break;
					case 'PWUNSCH':
					case 'Pwunsch':
					case 'pwunsch':
						$pwu_ids[] = $key;
						break;
					default:
						break;
				}
			}
			//var_dump($client_disch_met); exit;
		
			$patients_discharged = $pat_disch->get_patients_discharge($ipids);
			$discharged_tod_res = array();
			$discharged_raapv_res = array();
			$discharged_khws_res = array();
			$discharged_stathospiz_res = array();
			$discharged_pwunsch_res = array();
				
			foreach($patients_discharged as $pat_disch_det)
			{
				if(in_array($pat_disch_det['discharge_method'], $tod_ids))
				{
					$discharged_tod_res[$pat_disch_det['ipid']][] =  $pat_disch_det;
				}
				else if(in_array($pat_disch_det['discharge_method'], $raapv_ids))
				{
					$discharged_raapv_res[$pat_disch_det['ipid']][] =  $pat_disch_det;
				}
				else if(in_array($pat_disch_det['discharge_method'], $khv_ids))
				{
					$discharged_khws_res[$pat_disch_det['ipid']][] =  $pat_disch_det;
				}
				else if(in_array($pat_disch_det['discharge_method'], $stathosp_ids))
				{
					$discharged_stathospiz_res[$pat_disch_det['ipid']][] =  $pat_disch_det;
				}
				else if(in_array($pat_disch_det['discharge_method'], $pwu_ids))
				{
					$discharged_pwunsch_res[$pat_disch_det['ipid']][] =  $pat_disch_det;
				}
			}
			//var_dump($discharged_raapv_res); exit;
			$sapvs = $sapv->getSapvVerordnungData($ipids);
				
				
			array_walk($sapvs, function(&$value, $key) {
				if(($value['verordnungam'] == '0000-00-00 00:00:00' || $value['verordnungam'] == date('Y-m-d', strtotime($value['verordnungam'])))
						&& ($value['verordnungbis'] == '0000-00-00 00:00:00' || $value['verordnungbis'] == date('Y-m-d', strtotime($value['verordnungbis'])))
						&& $value['verordnet'] == '')
				{
					unset($key);
				}
			});
		
				array_multisort(array_column($sapvs, 'ipid'), SORT_ASC,
						array_column($sapvs, 'verordnungam'), SORT_ASC,	$sapvs);
					
					
				foreach($sapvs as $pat_sapv)
				{
					$patients_sapvs[$pat_sapv['ipid']][] = $pat_sapv;
				}
				
				$patients_first_sapv = array();
				$patients_following_sapv = array();
				$patients_last_sapv = array();
				foreach($patients_sapvs as $kipid => $vsapv)
				{
					$patients_first_sapv[$kipid] = $vsapv[0];
					if(count($vsapv) > 1)
					{
						$vsapv_temp = $vsapv;
						$all_sapv = count($vsapv);
						unset($vsapv_temp[0]);
						//$patients_following_sapvs[$kipid] = $vsapv_temp;
						for($ks = 1; $ks < $all_sapv; $ks++)
						{
							$patients_following_sapv[$kipid][] = $vsapv_temp[$ks];
//							unset($vsapv_temp[$ks]);
						}
						$patients_last_sapv[$kipid] = $vsapv_temp[$all_sapv-1];
					}
					foreach($vsapv as $v_sapv)
					{
						$start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
						if($v_sapv['status'] == '1')
						{
							$end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
						}
						else
						{
							$end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
						}
		
						if(empty($patient_sapv_days[$kipid]))
						{
							$patient_sapv_days[$kipid] = array();
						}
		
						$patient_sapv_days[$kipid] = array_merge($patient_sapv_days[$kipid], PatientMaster::getDaysInBetween($start, $end));
							
					}
				}

				//beware of date d.m.Y format here
				$patient_days = Pms_CommonData::patients_days($conditions, $sql);
				//var_dump($patient_days); exit;
				//get number of days in each month + start/end day START
				foreach($patient_days as $ipid => $v_patient_days)
				{
					foreach($v_patient_days['active_periods'] as $k_period => $v_period)
					{
						$last_active = end($v_patient_days['active_periods']);
						if($v_period['end'] == $last_active['end'])
						{
							$v_period['end'] = date('Y-m-d', strtotime($v_period['end']));
						}
						$months = Pms_CommonData::get_period_months($v_period['start'], $v_period['end'], 'Y-m');
						if(empty($patient_active_months[$ipid]))
						{
							$patient_active_months[$ipid] = array();
						}
						$patient_active_months[$ipid] = array_merge($patient_active_months[$ipid], $months);
						// get hospital days
						if(!empty($v_patient_days['hospital']['real_days_cs'])){
							$patient_data[$ipid]['hospitail_days_cs'] = $v_patient_days['hospital']['real_days_cs'];
						} /* else{
						$patient_data[$ipid]['hospitail_days_cs']  = array("9999999999");
						} */
					}
		
						
					$patient_active_months[$ipid] = array_values($patient_active_months[$ipid]);
		
					foreach($patient_active_months[$ipid] as $k_month => $v_month)
					{
						if(!function_exists('cal_days_in_month'))
						{
							$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($v_month . "-01")), 1, date("Y", strtotime($v_month . "-01"))));
						}
						else
						{
							$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($v_month . "-01")), date("Y", strtotime($v_month . "-01")));
						}
		
						$months_details[$ipid][$v_month]['start'] = $v_month . "-01";
						$months_details[$ipid][$v_month]['days_in_month'] = $month_days;
						$months_details[$ipid][$v_month]['end'] = $v_month . '-' . $month_days;
		
						//$month_select_array[$v_month] = $v_month;
					}
				}
				//var_dump($months_details); exit;
				//patients hospital locations by period
				$patients_periods_locations = PatientLocationTable::findAllPatientsLocations($ipids);
				//var_dump($patients_periods_locations); exit;
		
				//get locations master
				$master_loc = $locations->checkLocationsClientByType($clientid, '1');
				foreach($master_loc as $vall)
				{
					$master_loc_details[$vall['id']] = $vall;
				}
				//var_dump($master_loc_details); exit;
				$patients_cf_ipids_period = array();
				foreach($ipids as $ipid)
				{
					foreach($month_select_array_filled as $month_sel)
					{
						if(!function_exists('cal_days_in_month'))
						{
							$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($month_sel . "-01")), 1, date("Y", strtotime($month_sel . "-01"))));
						}
						else
						{
							$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($month_sel . "-01")), date("Y", strtotime($month_sel . "-01")));
						}
		
						$month_det[$month_sel]['start'] = $month_sel.'-01';
						$month_det[$month_sel]['days_in_month'] = $month_days;
						$month_det[$month_sel]['end'] = $month_sel . '-' . $month_days;
						$days_in_period = $pm->getAllDaysInBetween($month_det[$month_sel]['start'], $month_det[$month_sel]['end']);
						
						//locations details	
						$locations_details = array();
						if($days_in_period)
						{
							foreach($patients_periods_locations[$ipid] as $kl => $vl)
							{
								if($vl['valid_till'] == '0000-00-00 00:00:00')
								{
									$till = date('Y-m-d');
								}
								else
								{
									$till = $vl['valid_till'];
								}
									
								$loc_days = $pm->getAllDaysInBetween($vl['valid_from'], $till);
									
								$location_allowed_days = array_intersect($loc_days, $days_in_period);
									
								if(!empty($location_allowed_days))
								{
									$locations_details[$vl['id']] = $vl;
									$loc_period = array_values(array_unique($location_allowed_days));
									$locations_details[$vl['id']]['days']['start'] = $loc_period[0];
									$locations_details[$vl['id']]['days']['end'] = end($loc_period);
									$locations_details[$vl['id']]['counted_days'] = count($loc_period);
									$locations_details[$vl['id']]['all_days'] = $loc_period;
								}
							}
		
							foreach($locations_details as $k_loc => $v_loc)
							{
								if($master_loc_details[$v_loc['location_id']]['location_type'] != '1')
								{
									unset($locations_details[$k_loc]);
								}
								if(count($locations_details[$k_loc]))
								{
									$locations_details[$k_loc]['master_loc_details'] = $master_loc_details[$v_loc['location_id']];
								}
							}
		
							$locations_details = array_values($locations_details);
						}
						$locations_det_final[$ipid][$month_sel] = $locations_details;
						
						//contact forms details
						foreach($patients_cf_ipids as $kipid => $vcfipid)
						{
							foreach($vcfipid as $kcf => $vcf)
							{
								if(strtotime(date('Y-m-d', strtotime($vcf['billable_date']))) >= strtotime($month_det[$month_sel]['start']) && strtotime(date('Y-m-d', strtotime($vcf['billable_date']))) <= strtotime($month_det[$month_sel]['end']))
								{
									$patients_cf_ipids_period[$kipid][date('Y-m-d', strtotime($vcf['billable_date']))][] = $vcf;									
								}
							}
						}
					}
				}
				//var_dump($locations_det_final[$ipid][$month_sel]); exit;	
				
				$anlage14_formdata = Anlage14Table::findAllAnlage14savedandAnlage14Hospitalrelated($ipids, $month_select_array_filled);
				$anlage14control_formdata = Anlage14ControlTable::findAllAnlage14Controlsaved($ipids, $month_select_array_filled);
				
				array_walk($anlage14_formdata, function(&$value, $key) {
					$value['master_data']['raapv_sapv_date'] = $value['raapv_sapv_date'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['raapv_sapv_date'])) : '';
					$value['master_data']['khws_sapv_date'] = $value['khws_sapv_date'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['khws_sapv_date'])) : '';
					$value['master_data']['stathospiz_sapv_date'] = $value['stathospiz_sapv_date'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['stathospiz_sapv_date'])) : '';
					$value['master_data']['pwunsch_sapv_date'] = $value['pwunsch_sapv_date'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['pwunsch_sapv_date'])) : '';
					$value['master_data']['dead_sapv_date'] = $value['dead_sapv_date'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['dead_sapv_date'])) : '';
					$value['master_data']['aapv_start'] = $value['aapv_start'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['aapv_start'])) : '';
					$value['master_data']['aapv_end'] = $value['aapv_end'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['aapv_end'])) : '';
					$value['master_data']['hospiz_start'] = $value['hospiz_start'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['hospiz_start'])) : '';
					$value['master_data']['hospiz_end'] = $value['hospiz_end'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['hospiz_end'])) : '';
					$value['master_data']['patient_wish_start'] = $value['patient_wish_start'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['patient_wish_start'])) : '';
					$value['master_data']['patient_wish_end'] = $value['patient_wish_end'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['patient_wish_end'])) : '';
					$value['master_data']['patient_wish_end'] = $value['patient_wish_end'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($value['patient_wish_end'])) : '';
					unset($value['overall_beko']);
					unset($value['overall_phones']);
					unset($value['overall_folgeko']);
					foreach($value['Anlage14Hospitals'] as $valueh) {
						$hosp['start'] = $valueh['hospital_start'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($valueh['hospital_start'])) : '';
						$hosp['end'] = $valueh['hospital_end'] != '0000-00-00 00:00:00' ? date('d.m.Y', strtotime($valueh['hospital_end'])) : '';
						$value['patient_hospitals'][] = $hosp;
						$hosp = array();
					}
				});
					//var_dump($anlage14_formdata[0]['Anlage14Hospitals']); exit;
					$control_data = array();
					foreach($anlage14control_formdata as $value) {
						$control_data[$value['ipid']][$value['shortcut']][date('Y-m-d', strtotime($value['date']))]['qty'] = $value['qty'];
						$control_data[$value['ipid']][$value['shortcut']][date('Y-m-d', strtotime($value['date']))]['checked'] = $value['value'];
						if($value['shortcut'] == 'sh_beko' && $value['value'] == '1')
						{
							$control_data[$value['ipid']]['overall_beko'] += $value['value'];
						}
						if($value['shortcut'] == 'sh_folgeko' && $value['value'] == '1')
						{
							$control_data[$value['ipid']]['overall_folgeko'] +=  $value['value'];
						}
						if($value['shortcut'] == 'sh_telefonat')
						{
						    // TODO-2957 Ancuta 02.03.2020
						    // #2) If patient it is in hospiz location, max amount per day it is  1, if  NOT in hospiz, max amount is 2
					        $sh_telefonat_max_ammount = 2;
						    if(in_array(date('d.m.Y', strtotime($value['date'])),$patient_days[$value['ipid']]['hospiz']['real_days_cs']) ){
						        $sh_telefonat_max_ammount = 1;
						    }
						    
						    if($value['qty'] >= $sh_telefonat_max_ammount)
							{
							    $control_data[$value['ipid']]['overall_phones'] += $sh_telefonat_max_ammount;
							}
							else 
							{
								$control_data[$value['ipid']]['overall_phones'] += $value['qty'];
							}
						}
						//$control_data[$value['ipid']]['overall_phones'] += ($value['shortcut'] == 'sh_telefonat' && $value['qty'] >= '2') ? 2 : $value['qty'];
						if(($value['shortcut'] == 'sh_doc_non_hospiz_visits' || $value['shortcut'] == 'sh_nur_non_hospiz_visits' || $value['shortcut'] == 'sh_flatrate' || $value['shortcut'] == 'sh_other_visits') && $value['value'] == '1')
						{
							$master_overall_data[$value['ipid']]['overall_doc_nur_non_hospiz'][] = date('Y-m-d', strtotime($value['date']));
							$master_overall_data[$value['ipid']]['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data[$value['ipid']]['overall_doc_nur_non_hospiz']));
						}
						$control_data[$value['ipid']]['overall_doc_nur_non_hospiz'] = count($master_overall_data[$value['ipid']]['overall_doc_nur_non_hospiz']);
						if(($value['shortcut'] == 'sh_doc_hospiz_visits' && $value['value'] == '1') || $value['shortcut'] == 'sh_nur_hospiz_visits')
						{
							$control_data[$value['ipid']]['overall_doc_nur_hospiz'] += $value['value'];
						}
					}
		//var_dump($control_data);exit;
					$anlage14_data_final = array();
					foreach($anlage14_formdata as $anlage14_ipid)
					{
						$anlage14_data_final[$anlage14_ipid['ipid']][date('Y-m', strtotime($anlage14_ipid['date']))] = array_merge($control_data[$anlage14_ipid['ipid']], $anlage14_ipid);
					}
					
					

					
					$shortcuts_arr = array(
							'sh_beko',
							'sh_folgeko',
							'sh_doc_non_hospiz_visits',
							'sh_nur_non_hospiz_visits',
							'sh_other_visits',
							'sh_doc_hospiz_visits',
							'sh_telefonat',
							'sh_flatrate',
							//used only in custom totals
							'sh_nur_visits',
							'sh_nur_hospiz_visits',
					);
						
					$visits_shortcuts = array(
							'sh_doc_non_hospiz_visits',
							'sh_nur_non_hospiz_visits',
							'sh_other_visits',
							'sh_doc_hospiz_visits',
							//used only in custom totals
							'sh_nur_hospiz_visits',
							'sh_nur_non_hospiz_visits',
					);
						
					//shortcuts calculated internaly but not shown in view
					$excluded_shortcuts = array(
							'sh_nur_visits',
							'sh_nur_hospiz_visits',
					);
						
					foreach($ipids as $ipid)
					{
						$master_data[$ipid]['betriebsstatten_nr'] = $client_details[0]['betriebsstattennummer'];
						$master_data[$ipid]['sapv_team'] = $client_details[0]['team_name'];
						//$master_data[$ipid]['master_data']['real_active_days'] = $patient_days[$ipid]['real_active_days'];
						//$master_data[$ipid]['master_data']['hospital']['real_days_cs'] = $patient_days[$ipid]['hospital']['real_days_cs'];
						$master_data[$ipid]['shortcuts'] = $shortcuts_arr;
						$master_data[$ipid]['excluded_shortcuts'] = $excluded_shortcuts;
		
						//patient details
						$master_data[$ipid]['epid'] = $patient_days[$ipid]['details']['epid'];
						$master_data[$ipid]['patient_first_name'] = $patient_days[$ipid]['details']['first_name'];
						$master_data[$ipid]['patient_last_name'] = $patient_days[$ipid]['details']['last_name'];
						$master_data[$ipid]['patient_dob'] = date('d.m.Y', strtotime($patient_days[$ipid]['details']['birthd']));
		
						//patient health insurance
						$master_data[$ipid]['hi_company_name'] = $healthinsu_array[$ipid]['company_name'] != "" ? $healthinsu_array[$ipid]['company_name'] : $healthinsu_array[$ipid]['company']['name'];
						$master_data[$ipid]['insurance_no'] = $healthinsu_array[$ipid]['insurance_no'];
		
						$master_data[$ipid]['clientid'] = $clientid;
		
						$dead_sapv_date = array();
						$raapv_sapv_date = array();
						$khws_sapv_date = array();
						$stathospiz_sapv_date = array();
						$pwunsch_sapv_date = array();
		
						if($discharged_tod_res[$ipid])
						{
							//$discharge_death_date[$ipid] = $discharged_tod_res[$ipid][0]['discharge_date'];
		
							if($patients_last_sapv[$ipid])
							{
								if(strtotime($patients_last_sapv[$ipid][0]['verordnungbis']) <= strtotime($discharged_tod_res[$ipid][0]['discharge_date']))
								{
									$dead_sapv_date[$ipid] = date('d.m.Y', strtotime($patients_last_sapv[$ipid]['verordnungbis']));
								}
								else
								{
									$dead_sapv_date[$ipid] = date('d.m.Y', strtotime($discharged_tod_res[0]['discharge_date']));
								}
							}
							else
							{
								$dead_sapv_date[$ipid] = '';
							}
						}
						else
						{
							$dead_sapv_date[$ipid] = '';
						}
		
						if($discharged_raapv_res[$ipid])
						{
							if($patients_last_sapv[$ipid])
							{
								$raapv_sapv_date[$ipid] = date('d.m.Y', strtotime($patients_last_sapv[$ipid]['verordnungbis']));
							}
							else
							{
								$raapv_sapv_date[$ipid] = '';
							}
						}
						else
						{
							$raapv_sapv_date[$ipid] = '';
						}
		
						if($discharged_khws_res[$ipid])
						{
							if($patients_last_sapv[$ipid])
							{
								$khws_sapv_date[$ipid] = date('d.m.Y', strtotime($patients_last_sapv[$ipid]['verordnungbis']));
							}
							else
							{
								$khws_sapv_date[$ipid] = '';
							}
						}
						else
						{
							$khws_sapv_date[$ipid] = '';
						}
		
						if($discharged_stathospiz_res[$ipid])
						{
							if($patients_last_sapv[$ipid])
							{
								$stathospiz_sapv_date[$ipid] = date('d.m.Y', strtotime($patients_last_sapv[$ipid]['verordnungbis']));
							}
							else
							{
								$stathospiz_sapv_date[$ipid] = '';
							}
						}
						else
						{
							$stathospiz_sapv_date[$ipid] = '';
						}
		
		
						if($discharged_pwunsch_res[$ipid])
						{
							if($patients_last_sapv[$ipid])
							{
								$pwunsch_sapv_date[$ipid] = date('d.m.Y', strtotime($patients_last_sapv[$ipid]['verordnungbis']));
							}
							else
							{
								$pwunsch_sapv_date[$ipid] = '';
							}
						}
						else
						{
							$pwunsch_sapv_date[$ipid] = '';
						}
		
		
						// REMOVE CONTACTS AFTER Death time
						foreach($patients_cf_ipids[$ipid] as $kcf => $day_cfs)
						{
							foreach($day_cfs as $k_dcf => $v_cf)
							{
								if(is_numeric($k_dcf) && !empty($discharge_death_date[$v_cf['ipid']]))
								{
									if(strtotime(date('Y-m-d H:i:s', strtotime($v_cf['start_date']))) > strtotime($discharge_death_date[$v_cf['ipid']]) && $patient_days[$v_cf['ipid']]['details']['isdischarged'] == '1'){
		
										unset($patients_cf_ipids[$ipid][$kcf][$k_dcf]);
									}
								}
							}
						}
							
							
						foreach($patients_cf_ipids_period[$ipid] as $kcf => $day_cfs)
						{
							foreach($day_cfs as $k_dcf => $v_dcf)
							{
								//format contact form date to fit the format used in patients_days()
								$day_cfs_formated = date('d.m.Y', strtotime($kcf));
		
								if(in_array($day_cfs_formated, $patient_days[$ipid]['real_active_days'])){
		
									//all contact forms mapped with id as key
									$contact_forms_details[$ipid][$v_dcf['id']] = $v_dcf;
									$contact_form_date = date('Y-m-d', strtotime($v_dcf['billable_date']));
		
									if(
											in_array($v_dcf['form_type'], $items_contact_forms['sh_other_visits'])
											&& (!in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs']) && !in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['real_days_cs']))
											)
									{
										//catch the contact forms added by users which belong to the client setting selected groups
										$contact_forms[$ipid][$contact_form_date]['sh_other_visits'][] = $v_dcf['id'];
									}
		
									if(in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']) || in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_non_hospiz_visits']))
									{
										//all doctor contactforms
										$contact_forms[$ipid][$contact_form_date]['doctor_all'][] = $v_dcf['id'];
		
										//split doctors contact forms into 2 entities (hospiz and non-hospiz)
										if((in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs']) || in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']))
										{
											$contact_forms[$ipid][$contact_form_date]['sh_doc_hospiz_visits'][] = $v_dcf['id'];
										}
										else if((!in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs']) && !in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_non_hospiz_visits']))
										{
											$contact_forms[$ipid][$contact_form_date]['sh_doc_non_hospiz_visits'][] = $v_dcf['id'];
										}
									}
		
									if(in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']) || in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_non_hospiz_visits']))
									{
										//all nurse contactforms
										$contact_forms[$ipid][$contact_form_date]['sh_nur_visits'][] = $v_dcf['id'];
		
										//nurse contact forms in hospiz and non hospiz(non hospiz is used in "Anzahl Tagespauschale")
										if((in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs']) || in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']))
										{
											$contact_forms[$ipid][$contact_form_date]['sh_nur_hospiz_visits'][] = $v_dcf['id'];
										}
										//nurse contact forms in hospiz and non hospiz(non hospiz is used in "Anzahl Tagespauschale")
										else if((!in_array($day_cfs_formated, $patient_days[$ipid]['hospiz']['real_days_cs']) && !in_array($day_cfs_formated, $patient_days[$ipid]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_non_hospiz_visits']))
										{
											$contact_forms[$ipid][$contact_form_date]['sh_nur_non_hospiz_visits'][] = $v_dcf['id'];
										}
									}
		
								}
									
							}
						}

						
						$treated_days_all[$ipid] = array_values($patient_days[$ipid]['treatment_days']);
						
						$pat_sapv_days_dmy[$ipid] = $patient_sapv_days[$ipid];
						array_walk($pat_sapv_days_dmy[$ipid], function(&$value) {
							$value = date('d.m.Y', strtotime($value));
						});
						
							$treated_days_all[$ipid] = array_intersect($treated_days_all[$ipid], $pat_sapv_days_dmy[$ipid]);
							
							$treated_days_all_ts[$ipid] = $treated_days_all[$ipid];
							array_walk($treated_days_all_ts[$ipid], function(&$value) {
								$value = strtotime($value);
							});
								
								asort($treated_days_all_ts[$ipid], SORT_NUMERIC);
								
								$treated_days_all_ts[$ipid] = array_values(array_unique($treated_days_all_ts[$ipid]));
								
								$pat_treatment_days[$ipid] = $treated_days_all_ts[$ipid];
								array_walk($pat_treatment_days[$ipid], function(&$value) {
									$value = date('Y-m-d', $value);
								});
									
									$flatrate_treatment_days[$ipid] = $treated_days_all_ts[$ipid];
									
									if(count($flatrate_treatment_days[$ipid]) > 0)
									{
										
										$flatrate_start = $flatrate_treatment_days[$ipid][0];
										$fl_days[$ipid] = array();
										while(count($fl_days[$ipid]) < '7')
										{
											
											if(in_array($flatrate_start, $flatrate_treatment_days[$ipid]))
											{
												$fl_days[$ipid][] = $flatrate_start;
											}
											else
											{
												$fl_days[$ipid][] = $flatrate_treatment_days[$ipid][0];
											}
		
											$flatrate_start = strtotime('+1 day', $flatrate_start);
											
										}
										
									}
								
									
									foreach($month_select_array_filled as $month_selected)
									{
										$month_det = array();
										//var_dump($anlage14_data_final[$ipid][$month_selected]);	 exit;
										//$month_selected_full = $month_selected.'-01';
										if(!function_exists('cal_days_in_month'))
										{
											$month_days = date('t', mktime(0, 0, 0, date("n", strtotime($month_selected . "-01")), 1, date("Y", strtotime($month_selected . "-01"))));
										}
										else
										{
											$month_days = cal_days_in_month(CAL_GREGORIAN, date("n", strtotime($month_selected . "-01")), date("Y", strtotime($month_selected . "-01")));
										}
											
										$month_det[$month_selected]['start'] = $month_selected.'-01';
										$month_det[$month_selected]['days_in_month'] = $month_days;
										$month_det[$month_selected]['end'] = $month_selected . '-' . $month_days;
									
										$days_in_period = $pm->getAllDaysInBetween($month_det[$month_selected]['start'], $month_det[$month_selected]['end']);
										$curent_month_sapv_days[$ipid] = array_intersect($days_in_period, $patient_sapv_days[$ipid]);
										
										$master_data[$ipid]['month_det'][$month_selected]['curent_month'] = $month_det[$month_selected]['start'];
										$master_data[$ipid]['month_det'][$month_selected]['selected_month_days'] = $days_in_period;
										$master_data[$ipid]['month_det'][$month_selected]['current_period'] = $month_det[$month_selected];
										$master_data[$ipid]['month_det'][$month_selected]['master_data']['hospital_days'] = $patient_days[$ipid]['hospital']['real_days_cs'];
										$master_data[$ipid]['month_det'][$month_selected]['master_data']['real_active_days'] = $patient_days[$ipid]['real_active_days'];
										if($patients_first_sapv[$ipid])
										{
											$first_sapv_id = $patients_first_sapv[$ipid]['id'];
											$sapv_start = date('Y-m-d', strtotime($patients_first_sapv[$ipid]['verordnungam']));
											$sapv_end = date('Y-m-d', strtotime($patients_first_sapv[$ipid]['verordnungbis']));
										
											if(Pms_CommonData::isintersected(strtotime($sapv_start), strtotime($sapv_end), strtotime($month_det[$month_selected]['start']), strtotime($month_det[$month_selected]['end'])))
											{
												$master_data[$ipid]['month_det'][$month_selected]['start_date_erst'] = date('d.m.Y', strtotime($patients_first_sapv[$ipid]['verordnungam']));
											}
											else
											{
												$master_data[$ipid]['month_det'][$month_selected]['start_date_erst'] = '-';
											}
										}
										
										if($patients_following_sapv[$ipid])
										{
											$first_follower = false;
											
											foreach($patients_following_sapv[$ipid] as $k_sapv => $v_sapv_data)
											{
												
												if($first_follower === false)
												{
													$sapv_start = date('Y-m-d', strtotime($v_sapv_data['verordnungam']));
													$sapv_end = date('Y-m-d', strtotime($v_sapv_data['verordnungbis']));
										
													if(Pms_CommonData::isintersected(strtotime($sapv_start), strtotime($sapv_end), strtotime($month_det[$month_selected]['start']), strtotime($month_det[$month_selected]['end'])))
													{
														$master_data[$ipid]['month_det'][$month_selected]['start_date_folge'] = date('d.m.Y', strtotime($v_sapv_data['verordnungam']));
														$first_follower === true;
													}
													else
													{
														$master_data[$ipid]['month_det'][$month_selected]['start_date_folge'] = '-';
													}
												}
											}
										}
										
										if($anlage14_data_final[$ipid][$month_selected])
										{
											$anlage14_data_final[$ipid][$month_selected]['master_data'] = array_merge($anlage14_data_final[$ipid][$month_selected]['master_data'], $master_data[$ipid]['month_det'][$month_selected]['master_data']);
											$master_data[$ipid]['month_det'][$month_selected] = array_merge($master_data[$ipid]['month_det'][$month_selected], $anlage14_data_final[$ipid][$month_selected]);
											$patient_hospitals[$ipid][$month_selected] = $anlage14_data_final[$ipid][$month_selected]['patient_hospitals'];
											foreach($patient_hospitals[$ipid][$month_selected] as $k_res => $v_res)
											{
												$master_data[$ipid]['month_det'][$month_selected]['hospital_start'][$k_res] = $v_res['start'];
												$master_data[$ipid]['month_det'][$month_selected]['hospital_end'][$k_res] = $v_res['end'];
											}
											
										}
										else
										{
											//get client national hollidays
											$nhollyday = new NationalHolidays();
											$national_holidays_arr = $nhollyday->getNationalHoliday($clientid, $month_det[$month_selected]['start'], true);
											
											foreach($national_holidays_arr as $k_natholliday => $v_natholliday)
											{
												$master_data[$ipid]['month_det'][$month_selected]['national_holidays'][] = strtotime(date('Y-m-d', strtotime($v_natholliday['NationalHolidays']['date'])));
											}
		
											//get patient hospital location in curent period START
											$patient_hospitals[$ipid][$month_selected] = array();
											foreach($locations_det_final[$ipid][$month_selected] as $k_loc => $v_loc)
											{
												$pat_hosp['start'] = date('d.m.Y', strtotime($v_loc['valid_from']));
		
												if($v_loc['valid_till'] == '0000-00-00 00:00:00')
												{
													$pat_hosp['end'] = date('d.m.Y', time());
												}
												else
												{
													$pat_hosp['end'] = date('d.m.Y', strtotime($v_loc['valid_till']));
												}
		
												$patient_hospitals[$ipid][$month_selected][] = $pat_hosp;
											}
		
											foreach($patient_hospitals[$ipid][$month_selected] as $k_res => $v_res)
											{
												$master_data[$ipid]['month_det'][$month_selected]['hospital_start'][$k_res] = $v_res['start'];
												$master_data[$ipid]['month_det'][$month_selected]['hospital_end'][$k_res] = $v_res['end'];
											}
		
											/* $days_in_period = $pm->getAllDaysInBetween($month_det[$month_selected]['start'], $month_det[$month_selected]['end']);
											$curent_month_sapv_days[$ipid] = array_intersect($days_in_period, $patient_sapv_days[$ipid]);
		
											$master_data[$ipid]['month_det'][$month_selected]['curent_month'] = $month_det[$month_selected]['start'];
											$master_data[$ipid]['month_det'][$month_selected]['selected_month_days'] = $days_in_period;
											$master_data[$ipid]['month_det'][$month_selected]['current_period'] = $month_det[$month_selected]; */
		
											/* if($patient_first_sapv[$ipid])
											{
												$first_sapv_id = $patient_first_sapv[$ipid][0]['id'];
												$sapv_start = date('Y-m-d', strtotime($patient_first_sapv[$ipid][0]['verordnungam']));
												$sapv_end = date('Y-m-d', strtotime($patient_first_sapv[$ipid][0]['verordnungbis']));
		
												if(Pms_CommonData::isintersected(strtotime($sapv_start), strtotime($sapv_end), strtotime($month_det[$month_selected]['start']), strtotime($month_det[$month_selected]['end'])))
												{
													$master_data[$ipid]['month_det'][$month_selected]['start_date_erst'] = date('d.m.Y', strtotime($patient_first_sapv[0]['verordnungam']));
												}
												else
												{
													$master_data[$ipid]['month_det'][$month_selected]['start_date_erst'] = '-';
												}
											}
		
											if($patient_following_sapv[$ipid])
											{
												$first_follower = false;
		
												foreach($patient_following_sapv[$ipid] as $k_sapv => $v_sapv_data)
												{
													if($first_follower === false)
													{
														$sapv_start = date('Y-m-d', strtotime($v_sapv_data['verordnungam']));
														$sapv_end = date('Y-m-d', strtotime($v_sapv_data['verordnungbis']));
		
														if(Pms_CommonData::isintersected(strtotime($sapv_start), strtotime($sapv_end), strtotime($month_det[$month_selected]['start']), strtotime($month_det[$month_selected]['end'])))
														{
															$master_data[$ipid]['month_det'][$month_selected]['start_date_folge'] = date('d.m.Y', strtotime($v_sapv_data['verordnungam']));
															$first_follower === true;
														}
														else
														{
															$master_data[$ipid]['month_det'][$month_selected]['start_date_folge'] = '-';
														}
													}
												}
											} */
		
											$patient_phones[$ipid][$month_selected] = array();
											foreach($patients_tel_ipids[$ipid] as $k_tel => $v_tel)
											{
												$v_tel_date = date('Y-m-d', strtotime($v_tel['done_date']));
		
												if(in_array($v_tel_date, $curent_month_sapv_days[$ipid]) &&  in_array (date('d.m.Y', strtotime($v_tel['done_date'])),$patient_days[$ipid]['real_active_days'] ))
												{
													// REMOVE CONTACTS AFTER Death time
													if($v_tel_date == date('Y-m-d', strtotime($discharge_death_date[$ipid])) && strtotime(date('Y-m-d H:i:s', strtotime($v_tel['done_date']))) > strtotime($discharge_death_date[$ipid])){
														// do not add
													}
													else{
														$patient_phones[$ipid][$month_selected][$v_tel_date]['sh_telefonat'][] = $v_tel;
													}
												}
											}
		
		
											foreach($days_in_period as $k_day => $v_day)
											{
												if(in_array($v_day, $curent_month_sapv_days[$ipid]) && in_array(date('d.m.Y',strtotime($v_day)), $patient_days[$ipid]['real_active_days'])   )
												{
													foreach($shortcuts_arr as $k_short => $v_short)
													{
														if(in_array($v_short, $visits_shortcuts))
														{
															//handle visitable shortcuts here
															//stop if day is in flatrate days
															//reverted ISPC-1131 - show visits in flatrate days
		
															if(count($contact_forms[$ipid][$v_day][$v_short]) > '0')
															{
																$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '1';
																$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = count($contact_forms[$ipid][$v_day][$v_short]);
															}
															else
															{
																$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '0';
																$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = '0';
															}
		
															//add to totals
															$master_data[$ipid]['month_det'][$month_selected]['totals'][$v_short] += $master_data[$ipid]['month_det'][$month_selected][$v_day][$v_short]['checked'];
		
															//add to custom overall totals
															if(
																	$v_short == 'sh_nur_non_hospiz_visits'
																	|| $v_short == 'sh_doc_non_hospiz_visits'
																	|| $v_short == 'sh_other_visits'
																	)
															{
																//Anzahl Tagespauschale - total days doc/nurse non hospiz
																if($master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] == '1')
																{
																	$master_overall_data[$ipid][$month_selected]['overall_doc_nur_non_hospiz'][] = $v_day;
																	$master_overall_data[$ipid][$month_selected]['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data[$ipid][$month_selected]['overall_doc_nur_non_hospiz']));
																}
															}
															else if($v_short == 'sh_nur_hospiz_visits' || $v_short == 'sh_doc_hospiz_visits')
															{
																//Tagespauschalen Hospiz - total visits doc/nurse in hospiz
																if($master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] == '1')
																{
																	$master_overall_data[$ipid][$month_selected]['overall_doc_nur_hospiz'][] = $v_day;
																	$master_overall_data[$ipid][$month_selected]['overall_doc_nur_hospiz'] = array_unique(array_values($master_overall_data[$ipid][$month_selected]['overall_doc_nur_hospiz']));
																}
															}
		
															$master_data[$ipid]['month_det'][$month_selected]['overall_doc_nur_non_hospiz'] = count($master_overall_data[$ipid][$month_selected]['overall_doc_nur_non_hospiz']);
															$master_data[$ipid]['month_det'][$month_selected]['overall_doc_nur_hospiz'] = count($master_overall_data[$ipid][$month_selected]['overall_doc_nur_hospiz']);
														}
														else
														{
															//handle the rest of shortcuts here
															if($v_short == 'sh_beko')
															{
																if(strtotime($v_day) == strtotime($pat_treatment_days[$ipid][0]))
																{
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '1';
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = '1';
																}
																else
																{
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '0';
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = '0';
																}
		
																$master_data[$ipid]['month_det'][$month_selected]['overall_beko'] += $master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'];
															}
		
															if($v_short == 'sh_folgeko')
															{
																if(count($treated_days_all_ts[$ipid]) >= '26' && strtotime($v_day) == $treated_days_all_ts[$ipid][28])
																{
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '1';
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = '1';
																}
																else
																{
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '0';
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = '0';
																}
		
																$master_data[$ipid]['month_det'][$month_selected]['overall_folgeko'] += $master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'];
															}
		
															if($v_short == 'sh_flatrate')
															{
																if(!empty($fl_days[$ipid]))
																{
																	if(in_array(strtotime($v_day), $fl_days[$ipid]))
																	{
																		$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '1';
																		$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = '1';
		
																		//append flatrate into the Anzahl Tagespauschale
																		$master_overall_data[$ipid][$month_selected]['overall_doc_nur_non_hospiz'][] = $v_day;
																		$master_overall_data[$ipid][$month_selected]['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data[$ipid][$month_selected]['overall_doc_nur_non_hospiz']));
																	}
																	else
																	{
																		$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '0';
																		$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = '0';
																	}
																}
																else
																{
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '0';
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = '0';
																}
															}
		
															//added limit to shown/calculate phones only in days with no Anzahl Tagepauschale triggered(has visit and/or flatrate)
															// TODO-2957 Ancuta 02.03.2020
															// #1)  do not count phone, even if it si done during visit in hospiz
															// #2) If patient it is in hospiz location, max amount per day it is  1, if  NOT in hospiz, max amount is 2
															if($v_short == 'sh_telefonat')
															{
																
																$qty_limit = '0';
																// TODO-2957 Ancuta 02.03.2020  #1
																if(!in_array($v_day, $master_overall_data[$ipid][$month_selected]['overall_doc_nur_non_hospiz']) && !in_array(strtotime($v_day), $fl_days[$ipid]) && !in_array(date("d.m.Y",strtotime($v_day)), $patient_data[$ipid]['hospitail_days_cs']) && !in_array($v_day, $master_overall_data[$ipid][$month_selected]['overall_doc_nur_hospiz']) )
																{
																    //TODO-2957 Ancuta 28.02.2020  #2)
																    $sh_telefonat_max_amount = 2;
																    if(in_array(date("d.m.Y",strtotime($v_day)),  $patient_days[$ipid]['hospiz']['real_days_cs'])){
																        $sh_telefonat_max_amount = 1;
																    }
																    
																	//changed to show maximum 2 phones (same way as it was calculated)
																    if(count($patient_phones[$ipid][$month_selected][$v_day][$v_short]) >= $sh_telefonat_max_amount)
																	{
																	    $qty_limit = $sh_telefonat_max_amount;
																	}
																	else
																	{
																		$qty_limit = count($patient_phones[$ipid][$month_selected][$v_day][$v_short]);
																	}
		
																	if(count($patient_phones[$ipid][$month_selected][$v_day][$v_short]) > '0')
																	{
																		
																		$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '1';
																		$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = $qty_limit;
																	}
																	else
																	{
																		$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '0';
																		$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = '0';
																	}
																}
																else
																{
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['checked'] = '0';
																	$master_data[$ipid]['month_det'][$month_selected][$v_short][$v_day]['qty'] = '0';
																}
		
																//Anzahl Telefonpauschale - total phones with limit per day of 2 qty
																$master_data[$ipid]['month_det'][$month_selected]['overall_phones'] += $qty_limit;
															}
		
															//add to totals
															$master_data[$ipid]['month_det'][$month_selected]['totals'][$v_short] += $master_data[$v_day][$v_short]['qty'];
														}
		
														$master_data[$ipid]['month_det'][$month_selected]['overall_doc_nur_non_hospiz'] = count($master_overall_data[$ipid][$month_selected]['overall_doc_nur_non_hospiz']);
														$master_data[$ipid]['month_det'][$month_selected]['overall_doc_nur_hospiz'] = count($master_overall_data[$ipid][$month_selected]['overall_doc_nur_hospiz']);
													}
												}
											}
											
		
											//rest of gathered data here
											$master_data[$ipid]['month_det'][$month_selected]['master_data']['dead_sapv_date'] = $dead_sapv_date[$ipid];
											$master_data[$ipid]['month_det'][$month_selected]['master_data']['raapv_sapv_date'] = $raapv_sapv_date[$ipid];
											$master_data[$ipid]['month_det'][$month_selected]['master_data']['aapv_start'] = '';
											$master_data[$ipid]['month_det'][$month_selected]['master_data']['aapv_end'] = '';
											$master_data[$ipid]['month_det'][$month_selected]['master_data']['khws_sapv_date'] = $khws_sapv_date[$ipid];
											$master_data[$ipid]['month_det'][$month_selected]['master_data']['stathospiz_sapv_date'] = $stathospiz_sapv_date[$ipid];
											$master_data[$ipid]['month_det'][$month_selected]['master_data']['hospiz_start'] = '';
											$master_data[$ipid]['month_det'][$month_selected]['master_data']['hospiz_end'] = '';
											$master_data[$ipid]['month_det'][$month_selected]['master_data']['pwunsch_sapv_date'] = $pwunsch_sapv_date[$ipid];
											$master_data[$ipid]['month_det'][$month_selected]['master_data']['patient_wish_start'] ='';
											$master_data[$ipid]['month_det'][$month_selected]['master_data']['patient_wish_end'] = '';
										}
											
									}
					}
						
					//var_dump($master_data); exit;
					return $master_data;
						
		
		}		
		
		/*
		 * ISPC-2494 Lore 04.12.2019
		 */
		public function standarddocumentationAction()
		{
		    
		    $clientid = $this->clientid;
		    $userid = $this->userid;
		    $decid = $this->dec_id;
		    $ipid = $this->ipid;
		    		    
		    $lbs = new StandardDocumentation();
		    $labelsarr = $lbs->getLabelsArray();

		    $this->view->opt_labels_symp = $labelsarr['opt_labels_symp'];
		    $this->view->opt_labels_life = $labelsarr['opt_labels_life'];
		    $this->view->opt_labels_free = $labelsarr['opt_labels_free'];
		    $this->view->opt_labels_nofree = $labelsarr['opt_labels_nofree'];
		    
		    $patientarr = $this->getPatientMasterData();
		    $this->view->patinfo = $patientarr;
		   
		    
		    $patient_periods = PatientReadmission::findFallsOfIpid($ipid);
		    $readmission_info[$patient_periods['id']] = $patient_periods;
		    
		   		    
		    $fall_readmid = 0; 
		    $last_period_start_id = 0;
		    
		    $patient_periods_array = array();
		    $this->view->patient_periods_array = array();
		    $patient_periods_selectbox = array();     //only to populate a formSelect
		    $readmision_info= array();
		    
		    foreach ($patient_periods as $period) {
		        
		        foreach($period as $p_type => $per_data){
		            $readmision_info[$per_data['id']] = $per_data;
		            $readmision_info[$per_data['id']]['form_type'] = $per_data['date_type'] == '1' ? 'adm' : 'dis';
		        }		        
		        
		        $start = ! empty($period['admission']['date']) && $period['admission']['date'] != '0000-00-00' ? date('d.m.Y', strtotime($period['admission']['date'])) : '' ;
		        $end = ! empty($period['discharge']['date']) && $period['discharge']['date'] != '0000-00-00' ? date('d.m.Y', strtotime($period['discharge']['date'])) : '' ;
		        
		        $patient_periods_array[$period['admission']['id']] = array(
		            'start' => ! empty($period['admission']['date']) && $period['admission']['date'] != '0000-00-00' ? $period['admission']['date'] : null,
		            'end' => ! empty($period['discharge']['date']) && $period['discharge']['date'] != '0000-00-00' ? $period['discharge']['date'] : null,
		            
		            'start_ID' => ! empty($period['admission']['id']) ? $period['admission']['id'] : null,
		            'end_ID' => ! empty($period['discharge']['id']) ? $period['discharge']['id'] : null,
		        );
		        
		        $adm_id = $period['admission']['id'];
		        $dis_id = $period['discharge']['id'];
		        
		        $last_period_start_id = $period['admission']['id']; 
		        
		        $period['admission']['id'] = $start . " - " . $end;   //afisarea grupului perioadei
		        		        
		        $patient_periods_selectbox[$period['admission']['id']][$adm_id] = 'Aufnahme '.$start;  //'start '.$start ;
		        if($dis_id){
		            $patient_periods_selectbox[$period['admission']['id']][$dis_id] = 'Entlasung '.$end; //  'end '.$end;
		        }
		        		        
		    }
		   
		    $this->view->patient_periods_selectbox = $patient_periods_selectbox;
		    $this->view->patient_periods_array = $patient_periods_array;
		    $last_period = array();
		    $last_period  = end($patient_periods_array);    
		    
		    $request = $this->getRequest();
		    		    
		    if ($this->getRequest()->isPost()) {
		       		        
		       if($_POST['save'] == '1'){
		           $fall_readmid = $this->getRequest()->getPost('fall_readmid') ;
		           $readm_id = $fall_readmid;
		           $_POST['period_type'] = $readmision_info[$fall_readmid]['form_type'];
		           $_POST['patient_readmission_ID'] = $readm_id;
		           $_POST['form_date'] = $readmision_info[$fall_readmid]['date'];
		           
		           $data = $_POST;
		           $data['id'] = !empty($data['form_id'])  ? $data['form_id'] : null;
		           $data['ipid'] = $ipid;
		           
		           $insert_update_course = (empty($data['form_id'])) ? " erstellt" : " bearbeitet";
		           //dd($insert_update_course);
		           $sh_insertOrUpdate =  StandardDocumentationTable::getInstance()->findOrCreateOneBy('id', $data['id'], $data);
		           
		           
		           /// verlauf 
		           $values_array_not_scores = array('form_id','fall_readmid','main_problem_a','main_problem_b','main_problem_c','another_symptom_a_text','another_symptom_b_text','another_symptom_c_text',
		               'period_type','patient_readmission_ID','id','ipid','save','print');
		           $score_text = 0 ;
		           foreach($data as $post_id => $post_val){
		               
		               if (!in_array($post_id, $values_array_not_scores)){
		                   $score_text += $post_val;
		               }
		           }
		           
		           if(!empty($sh_insertOrUpdate['id'])){
		               $form_ident = 'standard_documentation';
		               $form_date   = !empty($_POST['form_date']) ? $_POST['form_date'] : date("Y-m-d H:i:s");
		               $form_date_dmY   = date('d.m.Y',strtotime($form_date));
		               
		               if ($_POST['period_type']=='adm'){
		                   $period_title = 'Aufnahme ';
		               }else{
		                   $period_title = 'Entlassung ';
		                   
		               }
		               $course_values[$form_ident]['course_type'] = "K";
		               $course_values[$form_ident]['course_tabname'] = $form_ident;
		               $course_values[$form_ident]['course_done_name'] = $form_ident;
		          
 		
		               $coursetitle =  "Formular: Einheitliche Dokumentation Hessen ".$period_title." ".$form_date_dmY." ".$insert_update_course."\n"  ;
		               //$coursetitle =  "Einheitliche Dokumentation Hessen (".$score_text.")\n"  ;
		               //$coursetitle .= "Datum der Befragung: ".$form_date_dmY." \n";
		               //$coursetitle .=  $form_total." (".$score_text.")";
		               
		               $custcourse = new PatientCourse();
		               $custcourse->ipid = $ipid;
		               $custcourse->course_date = date("Y-m-d H:i:s", time());
		               $custcourse->course_type = Pms_CommonData::aesEncrypt($course_values[$form_ident]['course_type']);
		               $custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($coursetitle));
		               $custcourse->user_id = $userid;
		               $custcourse->tabname = Pms_CommonData::aesEncrypt( $course_values[$form_ident]['course_tabname']);
		               $custcourse->recordid = $sh_insertOrUpdate['id'];
		               $custcourse->done_name = $course_values[$form_ident]['course_done_name'] ;
		               $custcourse->done_id = $sh_insertOrUpdate['id'];
// 		               $custcourse->done_date = $form_date ;
		               $custcourse->done_date = date('Y-m-d H:i:s') ;
		               $custcourse->save();

		           
		           //pdf in verlauf
 
    		           $patientMasterData = $this->getPatientMasterData();
    		           $nice_name_epid = $patientMasterData['nice_name_epid'];
    		           $post = $_POST;
    		           $post['opt_labels_symp'] = $this->view->opt_labels_symp;
    		           $post['opt_labels_life'] = $this->view->opt_labels_life ;
    		           $post['opt_labels_free'] = $this->view->opt_labels_free ;
    		           $post['opt_labels_nofree'] = $this->view->opt_labels_nofree ;
    		           $post['stddocum'] = $post;
    		           $post['patinfo'] = $patientMasterData;
    		           $post['period_title'] = $period_title." ".$form_date_dmY;
    		           
    		           $gen_pdf = $this->generate_pdf($post, 'standarddocumentation_save', 'standarddocumentation_pdf.html');
    		           //exit;
		           }
		           //.
		           $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
		           
		           
		       }elseif($_POST['print'] == '1'){ 
		           // only for "PDF erst... button commented on view"
		           
		           $patientMasterData = $this->getPatientMasterData();
		           $nice_name_epid = $patientMasterData['nice_name_epid'];
		           $post = $_POST;
		           $post['opt_labels_symp'] = $this->view->opt_labels_symp;
		           $post['opt_labels_life'] = $this->view->opt_labels_life ;
		           $post['opt_labels_free'] = $this->view->opt_labels_free ;
		           $post['opt_labels_nofree'] = $this->view->opt_labels_nofree ;
		           $post['stddocum'] = $post;
		           $post['patinfo'] = $patientMasterData;
		           		          
		           $gen_pdf = $this->generate_pdf($post, "StandardDocumentationPDF", 'standarddocumentation_pdf.html');
		           exit;

		       }
  
		        
		        
		        
		    } else {
		        
                $fall_readmid = $this->getRequest()->getParam('fall_readmid');
		        if($fall_readmid || !isset($fall_readmid)){
	                $fall_readmid = !empty($last_period['end_ID'])? $last_period['end_ID'] : $last_period['start_ID'];
	            }
		        
		        
		        $admission_id = null;
		        $fall_readmid = $this->getRequest()->getParam('fall_readmid', $last_period_start_id) ; //defaults to last period
		    }
		 
		    $this->view->fall_readmid = $fall_readmid;
		    
		    //fetch all forms of this ipid
		    $allSDForms = StandardDocumentation::findFormsOfIpids(array($ipid));

		    $selectedSDForm = array_filter ( $allSDForms, function($val) use ($fall_readmid, $admission_id) {
		        if ($admission_id) {
		            return $val['patient_readmission_ID'] == $fall_readmid && $val['id'] == $admission_id;
		        } else {
		            return $val['patient_readmission_ID'] == $fall_readmid ;
		        }
		    });
		    

		    $selectedSDForm = reset($selectedSDForm);
		    
		    $sd = array();
		    
		    if ( ! empty($selectedSDForm)) {
		        
		        $sd['docum'] = $selectedSDForm;
		        
		    } else { 
		        
		        // this is the first time you want to fill this form, for this period
		        $sd['docum'] = $this->_gatherData_standarddocumentation($ipid , $patient_periods_array[$fall_readmid]['start'], $patient_periods_array[$fall_readmid]['end']);
           
		    }
		    
		    $this->view->stddocum = $sd['docum'];
		    
		    return;
		        
		}
		
		/**
		 * ISPC-2494 Lore 05.12.2019
		 * @param string $ipid
		 * @param string $start_date
		 * @param unknown $end_date
		 */
		private function _gatherData_standarddocumentation($ipid = '' , $start_date = 'date(Y-m-d)', $end_date = null)
		{
		    $clientid = $this->clientid;
		    
		    
		    if (empty($ipid) || empty($start_date) || $start_date == 'date(Y-m-d)') {
		        return; //fail-safe
		    }
		    
		    
		    $start_date = date('Y-m-d', strtotime($start_date));
		    $end_date = ! empty($end_date) ? date('Y-m-d', strtotime($end_date)) : date('Y-m-d');
		    
		    $patientmaster = new PatientMaster();
		    
		    $sd = array(); // this will be the result
		    $sd['docum']=array();
		     
		     $sql = 'e.epid, p.ipid, e.ipid,';
		     $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		     $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		     $sql .= "AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') as gender,";
		     $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		     $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		     $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		     $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		     $sql .= "IF(p.admission_date != '0000-00-00',DATE_FORMAT(p.admission_date,'%d\.%m\.%Y'),'') as day_of_admission,";
		     $sql .= "IF(p.birthd != '0000-00-00',DATE_FORMAT(p.birthd,'%d\.%m\.%Y'),'') as birthd,";
		     
		     $conditions['periods'][0]['start'] = '2009-01-01';
		     $conditions['periods'][0]['end'] = date('Y-m-d');
		     $conditions['client'] = $clientid;
		     $conditions['include_standby'] = true;
		     $conditions['ipids'] = array($ipid);
		     
		     $patient_days = Pms_CommonData::patients_days($conditions,$sql);
		     
		     $sd['docum']['ipid'] = $ipid;
		     $sd['docum']['patientmaster'] = $patientmaster;
		     
		     

		     return $sd['docum'];
		}
		
		/*
		 * ISPC-2499 Lore 12.12.2019
		 */
		public function stressvaluesAction()
		{
		    
		    $clientid = $this->clientid;
		    $userid = $this->userid;
		    $decid = $this->dec_id;
		    $ipid = $this->ipid;
		    
		    $patientarr = $this->getPatientMasterData();
		    $this->view->patinfo = $patientarr;
		    
		    if ($this->getRequest()->isPost()) {
		               
	            $data = $_POST;
	            $data['id'] = !empty($data['form_id'])  ? $data['form_id'] : null;
	            $data['ipid'] = $ipid;
	            $data['datetime']=$data['form_date'].' '.$data['form_date_h'].':'.$data['form_date_m'];
	            $data['form_date'] = date('Y-m-d H:i',strtotime($data['datetime']));
	            
	            $sh_insertOrUpdate =  PatientStressValuesTable::getInstance()->findOrCreateOneBy('id', $data['id'], $data);
	            
	            if(!empty($sh_insertOrUpdate['id'])){
	                
	                $form_ident = 'stress_values';
	                $form_date   = !empty($_POST['form_date']) ? date('Y-m-d H:i',strtotime($data['form_date'])) : date("Y-m-d H:i:s");
	                $form_date_dmY   = date('d.m.Y ',strtotime($form_date));
	                
	                $course_values[$form_ident]['course_type'] = "DS";
	                $course_values[$form_ident]['course_tabname'] = $form_ident;
	                $course_values[$form_ident]['course_done_name'] = $form_ident;
	                
	                
	                $coursetitle =  "Stresserleben: ".$data['stres_value']  ;
	               // $coursetitle .= "Datum der Befragung: ".$form_date_dmY." \n";
	                
	                $custcourse = new PatientCourse();
	                $custcourse->ipid = $ipid;
	                $custcourse->course_date = date("Y-m-d H:i:s", time());
	                $custcourse->course_type = Pms_CommonData::aesEncrypt($course_values[$form_ident]['course_type']);
	                $custcourse->course_title = Pms_CommonData::aesEncrypt(addslashes($coursetitle));
	                $custcourse->user_id = $userid;
	                $custcourse->tabname = Pms_CommonData::aesEncrypt( $course_values[$form_ident]['course_tabname']);
	                $custcourse->recordid = $sh_insertOrUpdate['id'];
	                $custcourse->done_name = $course_values[$form_ident]['course_done_name'] ;
	                $custcourse->done_id = $sh_insertOrUpdate['id'];
  	                $custcourse->done_date = $form_date ;
	                $custcourse->save();
	                
	            }
	            //.
	            $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);
	            
		        
		    } 
		    
		    $sv = array();
		    $sv['form_date'] = date('d.m.Y');
		    $sv['form_date_h'] = date('H');
		    $sv['form_date_m'] = date('i');
		   
		    /*  $allSDForms = PatientStressValues::findFormsOfIpids(array($ipid));

     	        if ( ! empty($allSDForms)) {
    	            $sv = $allSDForms;
    		    }  */
		        
		    $this->view->stresval = $sv;
		        
		    return;
		        
		}
		

    /**
     * ISPC-2476 RE-Assessment Nordrhein
	 * Maria:: Migration CISPC to ISPC 20.08.2020
     */
	public function reassessmentAction(){

        $logininfo = new Zend_Session_Namespace('Login_Info');
        $clientid = $logininfo->clientid;

        $userid = $logininfo->userid;
        $decid = Pms_Uuid::decrypt($_GET['id']);
        $ipid = Pms_CommonData::getIpid($decid);
        $epid = Pms_CommonData::getEpid($ipid);
        $this->view->epid = $epid;
        $this->view->clientid = $clientid;
        $this->view->id_record = $ipid;
        $this->view->ipid = $ipid;
        $we_need_to_generate_pdf = false;
        $form_id = 0;


        /* --------------Get patient info and menus--------------------------------- */
        $patientmaster = new PatientMaster();
        $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        $patientinfo = $patientmaster->getMasterData($decid, 0);
        $patientname = $patientinfo['last_name'].' '.$patientinfo['first_name'];
        //print_r($this->view->patientname );
        $birthd = $patientinfo['birthd'];
        //print_r($this->view->patientinfo);
        $tm = new TabMenus();
        $this->view->tabmenus = $tm->getMenuTabs();

        /* --------------Check permissions	---------------------------------------- */
        $isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

        if(!$isclient)
        {
            $this->_redirect(APP_BASE . "overview/overview");
        }

        $allowed_blocks = [
            'ipos',
            'karnofsky'
        ];
        $this->view->allowed_blocks = $allowed_blocks;
        $this->view->opened_blocks = $allowed_blocks;
        $detailscookies = '""';
        $this->view->detailscookies = $detailscookies;

        if($this->getRequest()->isPost())
        {
            //print_r($_POST);
            $post = $_POST;
            $post['ipid'] = $ipid;
            $we_need_to_generate_pdf = true;

            $entry=new FormBlockKeyValue();
            $entry->ipid=$ipid;
            if(isset($_POST['form_id']) && intval($_POST['form_id']) > 0 ){
                $entry->id = intval($_POST['form_id']);
                //$we_need_to_generate_pdf = false;
            }
            if(($_POST['completed_at']) === 'false'){
                $we_need_to_generate_pdf = false;
            }
            $entry->block="reassessment";
            $entry->k="returnvalue";
            $entry->change_date = date('Y-m-d H:i:s', time());

            if($post['formid']>0){
                $entry = Doctrine::getTable('FormBlockKeyValue')->find(intval($post['formid']));
            }

            unset($post['formid']);

            $entry->v=json_encode($post);

            //print_r($entry->v);
            if(!isset($entry->id)){
                $entry->save();
            }else{
                $entry->replace();
            }
            //$this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);


        }

        /*----------------GET IPOS HISTORY DATA-----------------------*/
        $patientdata = [];
        if(in_array('ipos', $allowed_blocks) ){

            $iposhistfb=new FormBlockIpos();
            $iposhista=$iposhistfb->getIposHistory($ipid);
            $this->view->patient_ipos_hist_values = $iposhista[0];
            $iposhista2=$iposhistfb->getIposHistory($ipid,1);
            $this->view->patient_ipos_hist_table = $iposhista2[1];
        }
        $patientdata['ipos']['patient_ipos_hist_table'] =  $this->view->patient_ipos_hist_table;
        $patientdata['ipos']['patient_ipos_hist_values'] =  $this->view->patient_ipos_hist_values;

        //last reassessment form
        $form_values_sql = $iposdata_sql = Doctrine_Query::create()
            ->select('*')
            ->from('FormBlockKeyValue')
            ->where('ipid=?', $ipid )
            ->andWhere('block=?', 'reassessment')
            ->andWhere('isdelete=?', 0)
            ->orderBy('id DESC')
            ->limit(1);
        $form_values_arr =  $form_values_sql->fetchArray();

        if(isset($form_values_arr[0])){
            $patientdata = json_decode($form_values_arr[0]['v'], true);
            $ipos_add = [];

            foreach($patientdata['ipos_add'] as $key_add => $data){
                if(trim($data['key']) != ''){
                    $ipos_add[$data['key']] = $data['value'];
                   // $ipos_add[] = $data;
                }

            }
            $patientdata['ipos']['patient_ipos_add_values'] = $ipos_add;
            $form_id =  $form_values_arr[0]['id'] ;
            //echo $form_id;
        }else{
            $iposdata_sql = Doctrine_Query::create()
                ->select('*')
                ->from('FormBlockIpos')
                ->where('ipid=', $ipid )
                ->orderBy('create_date DESC')
                ->limit(1);
            $iposdata_arr = $iposdata_sql->fetchArray();

            $patientdata['ipos']['patient_ipos_values'] = $iposdata_arr[0];
        }

        Pms_Form::setFnOptions([
            'create_form_karnofsky' => ['opened' => true, 'class' => ' expanded ' ],
            'create_form_ipos' => ['opened' => true, 'class' => ' expanded ']
        ]);


        $pq = new User();
        $pqarr = $pq->getUserByClientid($clientid);
        $this->view->all_users = $pq->getUserByClientid($clientid, '1', true);
        $this->view->client_users = $pq->getUserByClientid($clientid);
        $patientdata['ipos']['all_users'] = $this->view->all_users;
        $patientdata['ipos']['client_users'] = $this->view->client_users;

        $this->view->patientdata = $patientdata;
        //echo $patientdata['completed_at'];
        if($patientdata['completed_at'] == 'false'){
            $this->view->form_id = $form_id;
        }else{
            $this->view->form_id = 0;
            $patientdata['form_id'] = 0;
        }



        $blockname = 'ipos'; // similar to patientform/contactform
        //$this->view->auto_add_blocks[$blockname]=$blockname;
        $this->getHelper('viewRenderer')->setViewSuffix('phtml');


        $options = $this->getRequest()->getPost('ipos', null); // use the post ones, maybe this is just a print
        if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
            $options = FormBlockKeyValueTable::getInstance()->findOneByContactFormIdAndIpidAndBlock((int)$_REQUEST['cid'], $ipid, 'FormBlockIpos', Doctrine_Core::HYDRATE_ARRAY);
        }
        $options = [];
        if($we_need_to_generate_pdf){
            $options['formular_type'] = 'pdf';
        }
        $af_fbkv = new Application_Form_FormBlockKeyValue();
        $form = $af_fbkv->create_form_ipos($options, $ipid, $patientdata);
        $__formHTML = $form->render();

        $this->view->{$blockname} = [
            "__formHTML" => $__formHTML,
            "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
        ];


        /*---------------- GET IPOS HISTORY DATA END ---------------------*/
        $karnofsky = Pms_CommonData::get_karnofsky();
        foreach($karnofsky as $k=>$kd){
            $print_karnofsky[$kd['value']] = $kd['label'];
        }

        $blockname = 'karnofsky'; // ! for auto_add_blocks, names convention is important, otherwise 'auto_add_blocks' 'magic' doesn't work (blockname as in CommonData.php) - elena
        $this->view->auto_add_blocks[$blockname]=$blockname;
        $this->getHelper('viewRenderer')->setViewSuffix('phtml');


        $options = [];

        if($we_need_to_generate_pdf){
            $options['formular_type'] = 'pdf';
        }
        $af_fbkv = new Application_Form_FormBlockKeyValue();
        $form = $af_fbkv->create_form_karnofsky($options, $ipid, $patientdata);
        $__formHTML = $form->render();

        $this->view->{$blockname} = [
            "__formHTML" => $__formHTML,
            "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
        ];

        if($we_need_to_generate_pdf){

            $post['ipos_pdf'] = $this->view->ipos['__formPDF'];
            $post['karnofsky_pdf'] = $this->view->karnofsky['__formPDF'];
            $post['patientdata'] = $patientdata;
            $post['patientname'] = $patientname;
            $post['birthd'] = $birthd;
            $this->generate_pdf($post,"reassessment_nr_save", "reassessment_nr_pdf.html");
            //$this->_redirect(APP_BASE . "patientformnew/reassessment?id=" . $_REQUEST['id']);
            $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_REQUEST['id']);



        }


    }

    /**
     * ISPC-2581 Netzwerkarte
     * @author elena, 29.06.2020
     */
    public function networkmapAction(){
	    //echo 'docs';
        $logininfo = $this->logininfo;
        $clientid = $logininfo->clientid;
        $userid = $logininfo->userid;
        $decid = Pms_Uuid::decrypt($_GET['id']);
        $ipid = Pms_CommonData::getIpid($decid);
        $epid = Pms_CommonData::getEpid($ipid);
        $this->view->epid = $epid;
        $this->view->clientid = $clientid;
        $this->view->id_record = $ipid;
        $this->view->ipid = $ipid;


        /* --------------Get patient info and menus--------------------------------- */
        $patientmaster = new PatientMaster();
        $patientinfo = $patientmaster->getMasterData($decid, 0);
        $patientname = $patientinfo['last_name'].' '.$patientinfo['first_name'];
        //print_r($this->view->patientname );
        $birthd = $patientinfo['birthd'];

        //netzwerk selber
        /* ------------------------------------------------------------------------------ */
        /* ------------- Get all partners of Patient---------------------------------- */
        /* ------------------------------------------------------------------------------ */
        $partners = array();

        /* ------------- Patient Pharmacy ---------------------------------------- */
        $pharmacy = new PatientPharmacy();
        $pharm_pat = $pharmacy->getPatientPharmacy($ipid);

        if(sizeof($pharm_pat) > 0){
            $partners_data['pharmacy'] = $pharm_pat;
            foreach($pharm_pat as $k=>$value){
                $partners[] =  $value['apotheke'].', '.$value['street1'].', '.$value['zip'].' '.$value['city'];;
            }
        }

        /* ------------- Patient Pflegedienst ---------------------------------------- */
        $pfleg = Pflegedienstes::getPflegedienstes($ipid);


        /* ------------- Patient sonst. Versorger ---------------------------------------- */
        $suppliers = new PatientSuppliers();
        $pat_suppliers = $suppliers->getPatientSuppliers($ipid);


        /* ------------- Patient Voluntaryworkers ---------------------------------------- */
        $pvw = new PatientVoluntaryworkers();
        $pvwarray = $pvw->getPatientVoluntaryworkers($ipid);

        // formatting functions (context ralated)
        $setBoldText = function($headline){
            $item = new WordFragment($docx);
            $text = array();
            $text[] = array('text' => $headline, 'bold' => true, 'font' => 'Calibri', 'sz' => 10);
            $item->addText($text);
            return $item;
        };
        $setColoredText = function($str, $color, $isHeadline = false){
            $item = new WordFragment($docx);
            $paragraphOptions = [];
            $sz = 10;
            if($isHeadline){
                $sz = 11;
                $paragraphOptions = array( 'textAlign' => 'center');
            }
            $text = array();
            $text[] = array('text' => $str, 'color' => $color, 'bold' => true, 'font' => 'Calibri', 'sz' => $sz);

            $item->addText($text, $paragraphOptions);
            return $item;
        };
        $setSimpleText = function($str){
            $item = new WordFragment($docx);
            $text = array();
            $text[] = array('text' => $str,   'font' => 'Calibri', 'sz' => 10);
            $item->addText($text);
            return $item;
        };

        $setTelefon = function($tel, $emergency = ''){

            $item = new WordFragment($docx);
            $text = array();
            $text[] = array('text' => $tel, 'color' => '000000', 'font' => 'Calibri', 'sz' => 10);
            if(strlen($emergency) > 0){
                $text[] = array('text' => ' Notfall:', 'color' => 'ff0000', 'font' => 'Calibri', 'sz' => 10);
                $text[] = array('text' => $emergency, 'color' => 'ff0000', 'font' => 'Calibri', 'sz' => 10);
            }

            $item->addText($text);
            return $item;

        };

        $specialists_for_table = [];

        // Table header
        $specialists_for_table[] = [

            $setBoldText('Ansprechpartner'),
            $setBoldText('Organisation'),
            $setBoldText('Funktion'),
            $setBoldText('Telefonnummer'),
            $setBoldText('Fax'),
            $setBoldText('Adresse'),
            $setBoldText('E-Mail'),
        ];

        //$specialists_for_table[] = [array('value' => 'Medizinische Versorgung ', 'colspan' => 7)];
        $specialists_for_table[] = [
           array( 'value' =>  $setColoredText('Medizinische Versorgung', '009900', true),  'colspan' => 7, 'textAlign' => 'center')
        ];
        //$specialists_for_table[] = [array('value' => ' ', 'colspan' => 7, 'align' => 'center')];
        /* ------------- Patient Hausarzt---------------------------------------- */
        $famdoc = FamilyDoctor::getFamilyDoctors($ipid);

        if($famdoc){
            $fam_doctor = $famdoc[0]['first_name'].' '.$famdoc[0]['last_name'].', '.$famdoc[0]['street1'].', '.$famdoc[0]['zip'].' '.$famdoc[0]['city'];
            $partners[] = $fam_doctor;
            $partners_data['fam_doctor'] = $fam_doctor;
            $specialists_for_table[] = array(

                $setSimpleText($famdoc[0]['first_name'].' '.$famdoc[0]['last_name']),
                $setSimpleText(trim($famdoc[0]['practice'])),
                $setSimpleText('Hausarzt'),
                $setTelefon($famdoc[0]['phone_practice'], $famdoc[0]['phone_emergency']),
                $setSimpleText($famdoc[0]['fax']),
                $setSimpleText($famdoc[0]['street1'].', '.$famdoc[0]['zip'].' '.$famdoc[0]['city']),
                $setSimpleText($famdoc[0]['email'])
                );

        }

        /* ------------- Patient Facharzt---------------------------------------- */
        $m_specialists_types = new SpecialistsTypes();
        $specialists_types  =$m_specialists_types->get_specialists_types($logininfo->clientid);

        if(!empty($specialists_types)){
            foreach($specialists_types as $k=>$tp){
                $s_type[$tp['id']] = $tp['name'];
            }
        }
        //echo $ipid;
        $this->view->s_type =$s_type;
        $specialists = new PatientSpecialists();
        $specialists_arr = $specialists->get_patient_specialists($ipid, true);
        //print_r($specialists_arr);

        if(count($specialists_arr) > 0)
        {

            foreach($specialists_arr as $k=>$value){
                //print_r($value);

                $specialists_for_table[] = array(

                    $setSimpleText($value['master']['first_name'].' '.$value['master']['last_name']),
                    $setSimpleText(trim($value['master']['practice'])),

                    $setSimpleText($s_type[$value['master']['medical_speciality']]),
                    $setTelefon($value['master']['phone_practice'], $value['master']['phone_emergency']),
                    $setSimpleText($value['master']['fax']),
                    $setSimpleText($value['master']['street1'].', '.$value['master']['zip'].' '.$value['master']['city']),
                    $setSimpleText($value['master']['email'])



                );

            }
        }

        //to fill manually if empty
        if(empty($specialists_arr)  && empty($famdoc) ){
            $specialists_for_table[] = array(
                $setSimpleText(' '),
                $setSimpleText(' '),

                $setSimpleText(' '),
                $setTelefon(' '),
                $setSimpleText(' '),
                $setSimpleText(' '),
                $setSimpleText(' ')
            );

        };


        //--------------Patient (First) All Physiotherapeuten----------------------------
        $pphys = new PatientPhysiotherapist();
        $pkphysarray = $pphys->get_patient_physiotherapists($ipid, true);

        if(sizeof($pkphysarray) > 0){

            $specialists_for_table[] = [['value' => $setColoredText('Physiotherapeute', '009900', true), 'colspan' => 7, 'textAlign' => 'center']];
            foreach($pkphysarray as $k=>$value){
                //print_r($value);
                $specialists_for_table[] = array(
                    $setSimpleText($value['master']['first_name'].' '.$value['master']['last_name']),
                    $setSimpleText(trim($value['master']['physiotherapist'])),

                    $setSimpleText(' '),
                    $setSimpleText($value['master']['phone_practice'], $value['master']['phone_emergency']),
                    $setSimpleText($value['master']['fax']),
                    $setSimpleText($value['master']['street'].', '.$value['master']['zip'].' '.$value['master']['city']),
                    $setSimpleText($value['master']['email'])

                );
            }
        }


        //-------------------Sanitätshäuser---------------------------------------------------
        $pat_pfl = new PatientSupplies();
        $supplies_arr = $pat_pfl->getPatientSupplies($ipid);
        //-------------------Homecare---------------------------------------------------
        $phcare = new PatientHomecare();
        $pkhcarearray = $phcare->get_patient_homecares($ipid, true);
        // --------------------- ambulanter Hospizdienst ----------------------
        $hp_assoc = new PatientHospiceassociation ();
        $hp_assoc_array = $hp_assoc->getPatientHospiceassociation($ipid);

        //Apotheken/
        //$specialists_for_table[] = [' '];
        $specialists_for_table[] = [['value' => $setColoredText('Hilfsmittelversorger/Apotheken', '009900', true), 'colspan' => 7, 'textAlign' => 'center']];
        //$specialists_for_table[] = [' '];
        if(sizeof($pharm_pat) > 0){
            $partners_data['pharmacy'] = $pharm_pat;
            foreach($pharm_pat as $k=>$value){
                //print_r($value);
                $specialists_for_table[] = array(
                    $setSimpleText($value['Pharmacy']['first_name'].' '.$value['Pharmacy']['last_name']),
                    $setSimpleText(trim($value['apotheke'])),

                    $setSimpleText('Apotheke'),
                    $setSimpleText($value['phone']),
                    $setSimpleText($value['fax']),
                    $setSimpleText($value['street1'].', '.$value['zip'].' '.$value['city']),
                    $setSimpleText($value['email'])

                );
            }
        }

        //print_r($specialists_for_table);
        if(sizeof($supplies_arr) > 0)
        {

            foreach($supplies_arr as $k=>$value){
                //print_r($value);
                $specialists_for_table[] = array(
                    $setSimpleText($value['first_name'].' '.$value['last_name']),
                    $setSimpleText($value['m_supplier']),
                    $setSimpleText('Sanitätshaus'),
                    $setSimpleText($value['phone']),
                    $setSimpleText($value['fax']),
                    $setSimpleText($value['street1'].', '.$value['zip'].' '.$value['city']),
                    $setSimpleText($value['email'])

                );

            }
        }
        //exit();



        if(sizeof($pat_suppliers) > 0)
        {
            foreach($pat_suppliers as $k=>$value){
                //print_r($value);
                $specialists_for_table[] = array(
                    $setSimpleText($value['first_name'].' '.$value['last_name']),
                    $setSimpleText($value['m_supplier']),
                    $setSimpleText($value['typ']),
                    $setSimpleText($value['phone']),
                    $setSimpleText($value['fax']),
                    $setSimpleText($value['street1'].', '.$value['zip'].' '.$value['city']),
                    $setSimpleText($value['email'])

                );
                $partners[] =  $value['m_supplier'].', '.$value['street1'].', '.$value['zip'].' '.$value['city'];;
            }
        }

        //to fill manually if empty
        if(sizeof($pat_suppliers) == 0 && sizeof($supplies_arr) == 0 && sizeof($pharm_pat) == 0){
            $specialists_for_table[] = array(
                $setSimpleText(' '),
                $setSimpleText(' '),

                $setSimpleText(' '),
                $setTelefon(' '),
                $setSimpleText(' '),
                $setSimpleText(' '),
                $setSimpleText(' ')
            );

        }

        //Pflege
        $specialists_for_table[] = [array('value' => $setColoredText('Pflegedienst' , '009900', true), 'colspan' => 7, 'textAlign' => 'center')];

        if(sizeof($pfleg) > 0)
        {
            //$specialists_for_table[] = [array('value' => $setColoredText('Pflegedienst' , '009900', true), 'colspan' => 7, 'textAlign' => 'center')];

            foreach($pfleg as $k=>$value){
                //print_r($value);
                $specialists_for_table[] = array(
                    $setSimpleText($value['first_name'].' '.$value['last_name']),
                    $setSimpleText($value['nursing']),

                    $setSimpleText('Pflegedienst'),
                    $setTelefon($value['phone_practice'], $value['phone_emergency']),
                    $setSimpleText($value['fax']),
                    $setSimpleText($value['street1'].', '.$value['zip'].' '.$value['city']),
                    $setSimpleText($value['email'])

                );

            }
        }else{
            $specialists_for_table[] = array(
                $setSimpleText(' '),
                $setSimpleText(' '),

                $setSimpleText(' '),
                $setTelefon(' '),
                $setSimpleText(' '),
                $setSimpleText(' '),
                $setSimpleText(' ')

            );
        }

        //Homecare
        $specialists_for_table[] = [array('value' => $setColoredText('Homecare' , '009900', true), 'colspan' => 7, 'textAlign' => 'center')];
        if(sizeof($pkhcarearray) > 0)
        {

            foreach($pkhcarearray as $k=>$value){
                $specialists_for_table[] = array(
                    $setSimpleText($value['master']['first_name'].' '.$value['master']['last_name']),
                    $setSimpleText($value['master']['homecare']),

                    $setSimpleText('Homecare'),
                    $setTelefon($value['master']['phone_practice'], $value['master']['phone_emergency']),
                    $setSimpleText($value['master']['fax']),
                    $setSimpleText($value['master']['street1'].', '.$value['master']['zip'].' '.$value['master']['city']),
                    $setSimpleText($value['master']['email'])

                );

            }
        }else{
            $specialists_for_table[] = array(
                $setSimpleText(' '),
                $setSimpleText(' '),

                $setSimpleText(' '),
                $setTelefon(' '),
                $setSimpleText(' '),
                $setSimpleText(' '),
                $setSimpleText(' ')

            );
        }
       //Hospizverein
        $specialists_for_table[] = [array('value' => $setColoredText('Hospizvereine' , '009900', true), 'colspan' => 7, 'textAlign' => 'center')];
        if(sizeof($hp_assoc_array) > 0)
        {

            foreach($hp_assoc_array as $k=>$value){
                $specialists_for_table[] = array(
                    $setSimpleText($value['first_name'].' '.$value['last_name']),
                    $setSimpleText($value['hospice_association']),

                    $setSimpleText('Hospiz'),
                    $setTelefon($value['phone_practice'], $value['phone_emergency']),
                    $setSimpleText($value['fax']),
                    $setSimpleText($value['street1'].', '.$value['zip'].' '.$value['city']),
                    $setSimpleText($value['email'])

                );

            }
        }else{
            $specialists_for_table[] = array(
                $setSimpleText(' '),
                $setSimpleText(' '),

                $setSimpleText(' '),
                $setTelefon(' '),
                $setSimpleText(' '),
                $setSimpleText(' '),
                $setSimpleText(' ')

            );
        }


        $pc = new ContactPersonMaster();
        $pcs = $pc->getPatientContact($ipid);
        $familydegree = new FamilyDegree();
        $cnt_degree_array = $familydegree->getFamilyDegrees(1);
        $specialists_for_table[] = [array('value' => $setColoredText('Angehörige' , '009900', true), 'colspan' => 7, 'textAlign' => 'center')];


        if(sizeof($pcs) > 0)
        {

            foreach($pcs as $k=>$value){
                $vollmacht = ($value['cnt_hatversorgungsvollmacht']) ? 'hat Vorsorgevollmacht' : ' ';

                $vollmacht .= ($value['cnt_legalguardian']) ? ' gesetzlicher Betreuer' : ' ';
                $specialists_for_table[] = array(
                    $setSimpleText($value['cnt_first_name'].' '.$value['cnt_last_name']),
                    $setSimpleText($vollmacht),

                    $setSimpleText($cnt_degree_array[$value['cnt_familydegree_id']]),
                    $setTelefon($value['cnt_phone'] . ', ' . $value['cnt_mobile'], ''),
                    $setSimpleText($value['cnt_fax']),
                    $setSimpleText($value['cnt_street1'].', '.$value['cnt_zip'].' '.$value['cnt_city']),
                    $setSimpleText($value['cnt_email'])



                );

            }
        }else{
            $specialists_for_table[] = array(
                $setSimpleText(' '),
                $setSimpleText(' '),

                $setSimpleText(' '),
                $setTelefon(' '),
                $setSimpleText(' '),
                $setSimpleText(' '),
                $setSimpleText(' ')

            );
        }


        $specialists_for_table[] = [array('value' => $setColoredText('Ehrenamtlichen / Koordinator' , '009900', true), 'colspan' => 7, 'textAlign' => 'center')];
         if(sizeof($pvwarray) > 0)
        {
            foreach($pvwarray as $k=>$value){
                //print_r($value);
                $phone = $value['phone'];
                if(strlen(trim($phone)) > 0  && strlen( $value['mobile'] > 0)){
                    $phone .= ', ';
                }
                $phone .= $value['mobile'];
                $specialists_for_table[] = array(

                    $setSimpleText($value['first_name'].' '.$value['last_name']),
                    $setSimpleText(' '),

                    $setSimpleText($cnt_degree_array[$value['cnt_familydegree_id']]),
                    $setTelefon($phone, ''),
                    $setSimpleText(' '),
                    $setSimpleText($value['street'].', '.$value['zip'].' '.$value['city']),
                    $setSimpleText($value['email'])
                );

            }
        }else{
             $specialists_for_table[] = array(
                 $setSimpleText(' '),
                 $setSimpleText(' '),

                 $setSimpleText(' '),
                 $setTelefon(' '),
                 $setSimpleText(' '),
                 $setSimpleText(' '),
                 $setSimpleText(' ')

             );
         }

        //Patient churches
        $chsp = new PatientChurches();
        $chsparray = $chsp->getPatientChurch($ipid);
        $specialists_for_table[] = [array('value' => $setColoredText('Pfarreien' , '009900', true), 'colspan' => 7, 'textAlign' => 'center')];

        if(sizeof($chsparray) > 0)
        {

            foreach($chsparray as $k=>$value){
                //print_r($value);
                $specialists_for_table[] = array(
                    $setSimpleText($value['contact_firstname'].' '.$value['contact_lastname']),
                    $setSimpleText($value['name']),

                    $setSimpleText(' '),
                    $setTelefon($value['phone']),
                    $setSimpleText(' '),
                    $setSimpleText($value['street'].', '.$value['zip'].' '.$value['city']),
                    $setSimpleText($value['email'])

                );

            }
        }else{
            $specialists_for_table[] = array(
                $setSimpleText(' '),
                $setSimpleText(' '),

                $setSimpleText(' '),
                $setTelefon(' '),
                $setSimpleText(' '),
                $setSimpleText(' '),
                $setSimpleText(' ')

            );
        }


        //load template
        $template = DocxTemplates::getDefaultTemplate($clientid, "networktempl_4.docx");

        $date = new DateTime();

        $docx = new CreateDocxFromTemplate($template['fullPath']);
        // seems to have no influence - elena
        $docx->setDefaultFont('Calibri');
        // set table properties
        $tableProperties = array(

            'border' => 'single',
            'tableAlign' => 'center',
            'borderWidth' => 10,
            'borderColor' => '666666',

            'sz' => 10,
            'font' => 'Calibri',
            'firstRowStyle' => array(
                'backgroundColor' => '60E1DE',
                'bold' => true,
                'vAlign' => 'center',
                'align' => 'center'
            ),
            'cellMargin' => array('top' => 100, 'left' => 100, 'right' => 100, 'bottom' => 100),

            //'tableStyle' => 'MediumGrid3-accent5PHPDOCX'
        );
        $trProperties = array();

        // useful: to repeat table header on each new page
        $trProperties[0] = array(
            'tableHeader' => true
        );
        $docx->replaceVariableByText(array('VAR_DATUM' => $date->format('d.m.Y')), array('target' => 'header'));
        $docx->replaceVariableByText(array('networkdata' => $patientname . ', Geb. ' . $birthd));

        $docx->replaceVariableByText(array('networkdata' =>$patientname . ', Geb. ' . $birthd), array('target' => 'footer'));

        $docx->replaceVariableByText(array('today' =>  $date->format('d.m.Y')), array('target' => 'footer'));
        // it's strange, but it works. The table is correctly formatted only if you add empty tables before and after your table. I don't know why.
        // without empty table below i got rows instead cells
        // without empty table befofe i got two line breaks at the very beginning of first cell, it looks ugly.
        // PHPDOCX Version was 6.5 - elena, 29.06.2020
        $docx->addTable(array(), array());

        $docx->addTable($specialists_for_table, $tableProperties, $trProperties);


        $docx->addTable(array(), array());

        $docx->createDocxAndDownload(APPLICATION_PATH . '/../public/temp/netzwerkkarte');
        exit();
    }

    /*
     * ISPC-2622, AOK Projekt - Therapiesteuerung, elena, 03.07.2020
     */
    public function therapiesteuerungAction(){
        $logininfo = new Zend_Session_Namespace('Login_Info');
        $clientid = $logininfo->clientid;
        $aotable = new AokprojectsTherapiesteuerung();
        //echo $aotable->getSql();

        $userid = $logininfo->userid;
        $decid = Pms_Uuid::decrypt($_GET['id']);
        $ipid = Pms_CommonData::getIpid($decid);
        $epid = Pms_CommonData::getEpid($ipid);
        $this->view->epid = $epid;
        $this->view->clientid = $clientid;
        $this->view->id_record = $ipid;
        $this->view->ipid = $ipid;
        $we_need_to_generate_pdf = false;
        $form_id = 0;
        $detailscookies = '""';
        $this->view->detailscookies = $detailscookies;
        $modules = new Modules();
        if(!$modules->checkModulePrivileges('1009', $clientid))
        {
            //exit();
            $this->_redirect(APP_BASE . 'error/previlege');
        }


        /* --------------Get patient info and menus--------------------------------- */
        $patientmaster = new PatientMaster();
        $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        $patientinfo = $patientmaster->getMasterData($decid, 0);
        $patientname = $patientinfo['last_name'].' '.$patientinfo['first_name'];
        //print_r($this->view->patientname );
        $birthd = $patientinfo['birthd'];
        //print_r($this->view->patientinfo);
        $tm = new TabMenus();
        $this->view->tabmenus = $tm->getMenuTabs();

        /* --------------Check permissions	---------------------------------------- */
        $isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

        if(!$isclient)
        {
            $this->_redirect(APP_BASE . "overview/overview");
        }

        if(isset($_POST['therapiesteuerung'])){
            $post = [];
            $post['patientname'] = $patientname;
            $post['birthd'] = $birthd;
            $post['datum'] = date("d.m.Y ", time());
            $post['therapiesteuerung'] = $_POST['therapiesteuerung'];
            //$post
            $entry=new AokprojectsTherapiesteuerung();
            $entry->ipid=$ipid;
            $entry->clientid = $clientid;

            $entry->gewicht_erhoeht = (isset($_POST['therapiesteuerung']['gewicht_erhoeht'])) ? $_POST['therapiesteuerung']['gewicht_erhoeht'] : '';
            $entry->gewicht_erhoehung = $_POST['therapiesteuerung']['gewicht_erhoehung'];
            $entry->appetitlos = (isset($_POST['therapiesteuerung']['appetitlos'])) ? $_POST['therapiesteuerung']['appetitlos'] : '';
            $entry->length = strval($_POST['therapiesteuerung']['length']);
            $entry->weight = strval($_POST['therapiesteuerung']['weight']);
            $entry->bmi = strval($_POST['therapiesteuerung']['bmi']);
            $entry->geschwollen = (isset($_POST['therapiesteuerung']['geschwollen'])) ? $_POST['therapiesteuerung']['geschwollen'] : '';
            $entry->wasser_bauch = (isset($_POST['therapiesteuerung']['wasser_bauch'])) ? $_POST['therapiesteuerung']['wasser_bauch'] : '';
            $entry->oefter_wasser_lassen = (isset($_POST['therapiesteuerung']['oefter_wasser_lassen'])) ? $_POST['therapiesteuerung']['oefter_wasser_lassen'] : '';
            $entry->trinken_mehr = (isset($_POST['therapiesteuerung']['trinken_mehr'])) ? $_POST['therapiesteuerung']['trinken_mehr'] : '';
            $entry->trinken_mehr_wieviel = strval($_POST['therapiesteuerung']['trinken_mehr_wieviel']);
            $entry->trinken_weniger = (isset($_POST['therapiesteuerung']['trinken_weniger'])) ? $_POST['therapiesteuerung']['trinken_weniger'] : '';
            $entry->trinken_weniger_wieviel = strval($_POST['therapiesteuerung']['trinken_weniger_wieviel']);

            $entry->medikamente_alle = (isset($_POST['therapiesteuerung']['medikamente_alle'])) ? $_POST['therapiesteuerung']['medikamente_alle'] : '';
            $entry->medikamente_dosierung = (isset($_POST['therapiesteuerung']['medikamente_dosierung'])) ? $_POST['therapiesteuerung']['medikamente_dosierung'] : '';
            $entry->medikamente_frei = (isset($_POST['therapiesteuerung']['medikamente_frei'])) ? $_POST['therapiesteuerung']['medikamente_frei'] : '';

            $entry->medikamente_frei_text = strval($_POST['therapiesteuerung']['medikamente_frei_text']);

            $entry->medikamente_bedarf_oefter = (isset($_POST['therapiesteuerung']['medikamente_bedarf_oefter'])) ? $_POST['therapiesteuerung']['medikamente_bedarf_oefter'] : '';
            $entry->medikamente_weglassen = (isset($_POST['therapiesteuerung']['medikamente_weglassen'])) ? $_POST['therapiesteuerung']['medikamente_weglassen'] : '';
            $entry->freitext_medikamente = strval($_POST['therapiesteuerung']['freitext_medikamente']);

            $entry->husten = (isset($_POST['therapiesteuerung']['husten'])) ? $_POST['therapiesteuerung']['husten'] : '';
            $entry->atemnot = (isset($_POST['therapiesteuerung']['atemnot'])) ? $_POST['therapiesteuerung']['atemnot'] : '';
            $entry->auswurf = (isset($_POST['therapiesteuerung']['auswurf'])) ? $_POST['therapiesteuerung']['auswurf'] : '';

            $entry->druck_syst = intval($_POST['therapiesteuerung']['druck_syst']);
            $entry->druck_diast = intval($_POST['therapiesteuerung']['druck_diast']);
            $entry->puls = intval($_POST['therapiesteuerung']['puls']);
            $entry->herzrhythmus = intval($_POST['therapiesteuerung']['herzrhythmus']);
            $entry->sauerstoffssaettigung = intval($_POST['therapiesteuerung']['sauerstoffssaettigung']);
            $entry->herzkatheter = (isset($_POST['therapiesteuerung']['herzkatheter'])) ? $_POST['therapiesteuerung']['herzkatheter'] : '';
            $entry->schrittmacher = (isset($_POST['therapiesteuerung']['schrittmacher'])) ? $_POST['therapiesteuerung']['schrittmacher'] : '';
            $entry->defibrilator = (isset($_POST['therapiesteuerung']['defibrilator'])) ? $_POST['therapiesteuerung']['defibrilator'] : '';
            $entry->sauerstoff = (isset($_POST['therapiesteuerung']['sauerstoff'])) ? $_POST['therapiesteuerung']['sauerstoff'] : '';
            $entry->stent = (isset($_POST['therapiesteuerung']['stent'])) ? $_POST['therapiesteuerung']['stent'] : '';
            $entry->dev_termin = (isset($_POST['therapiesteuerung']['dev_termin'])) ? $_POST['therapiesteuerung']['dev_termin'] : '';
            $entry->dev_termin_date = strval($_POST['therapiesteuerung']['dev_termin_date']);
            $entry->dmp_khk = (isset($_POST['therapiesteuerung']['dmp_khk'])) ? $_POST['therapiesteuerung']['dmp_khk'] : '';
            $entry->dmp_copd = (isset($_POST['therapiesteuerung']['dmp_copd'])) ? $_POST['therapiesteuerung']['dmp_copd'] : '';
            $entry->facharzt_termin = (isset($_POST['therapiesteuerung']['facharzt_termin'])) ? $_POST['therapiesteuerung']['facharzt_termin'] : '';
            $entry->facharzt_termin_date = strval($_POST['therapiesteuerung']['facharzt_termin_date']);
            $entry->tagebuch_regelmaessig = (isset($_POST['therapiesteuerung']['tagebuch_regelmaessig'])) ? $_POST['therapiesteuerung']['tagebuch_regelmaessig'] : '';
            $entry->sauerstoff_termin = (isset($_POST['therapiesteuerung']['sauerstoff_termin'])) ? $_POST['therapiesteuerung']['sauerstoff_termin'] : '';
            $entry->sauerstoff_termin_date = strval($_POST['therapiesteuerung']['sauerstoff_termin_date']);
            $entry->pneumo_termin = (isset($_POST['therapiesteuerung']['pneumo_termin'])) ? $_POST['therapiesteuerung']['pneumo_termin'] : '';
            $entry->pneumo_termin_date = strval($_POST['therapiesteuerung']['pneumo_termin_date']);

            $entry->save();


            $this->generate_pdf($post,"therapiesteuerung", "therapiesteuerung_pdf.html");
            $this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
            exit;
        }


    }

    /**
     * ISPC-2621 AOK Projekt - Herzinsuffizienz , elena, 03.07.2020
     *
     * @throws Exception
     */
    public function herzinsuffienzAction(){
        $logininfo = new Zend_Session_Namespace('Login_Info');
        $clientid = $logininfo->clientid;
        //$aotable = new AokprojectsHerzinsuffienz();
        //print_r( $aotable->getSql());

        $userid = $logininfo->userid;
        $decid = Pms_Uuid::decrypt($_GET['id']);
        $ipid = Pms_CommonData::getIpid($decid);
        $epid = Pms_CommonData::getEpid($ipid);
        $this->view->epid = $epid;
        $this->view->clientid = $clientid;
        $this->view->id_record = $ipid;
        $this->view->ipid = $ipid;
        $we_need_to_generate_pdf = false;
        $form_id = 0;
        $detailscookies = '""';
        $this->view->detailscookies = $detailscookies;
        $modules = new Modules();
        if(!$modules->checkModulePrivileges('1009', $clientid))
        {
            $this->_redirect(APP_BASE . 'error/previlege');
            //exit();
        }
        
        /* --------------Get patient info and menus--------------------------------- */
        $patientmaster = new PatientMaster();
        $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        $patientinfo = $patientmaster->getMasterData($decid, 0);
        $patientname = $patientinfo['last_name'].' '.$patientinfo['first_name'];
        //print_r($this->view->patientname );
        $birthd = $patientinfo['birthd'];
        //print_r($this->view->patientinfo);
        $tm = new TabMenus();
        $this->view->tabmenus = $tm->getMenuTabs();

        /* --------------Check permissions	---------------------------------------- */
        $isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

        if(!$isclient)
        {
            $this->_redirect(APP_BASE . "overview/overview");
        }
        if(isset($_POST['herzinsuffizienz'])) {
            $post = [];
            $post['patientname'] = $patientname;
            $post['birthd'] = $birthd;
            $post['datum'] = date("d.m.Y ", time());
            $post['herzinsuffizienz'] = $_POST['herzinsuffizienz'];
            //$post
            $entry = new AokprojectsHerzinsuffienz();
            $entry->ipid = $ipid;
            $entry->clientid = $clientid;
            $entry->datum_plan = date_format(date_create_from_format('d.m.Y', $_POST['herzinsuffizienz']['datum_plan']), 'Y-m-d');
            $entry->betablocker = (isset($_POST['herzinsuffizienz']['betablocker'])) ? $_POST['herzinsuffizienz']['betablocker'] : '';
            $entry->acehemmer = (isset($_POST['herzinsuffizienz']['acehemmer'])) ? $_POST['herzinsuffizienz']['acehemmer'] : '';
            $entry->antikoagulantien = (isset($_POST['herzinsuffizienz']['antikoagulantien'])) ? $_POST['herzinsuffizienz']['antikoagulantien'] : '';
            $entry->glukokortikosteroide = (isset($_POST['herzinsuffienz']['glukokortikosteroide'])) ? $_POST['herzinsuffizienz']['glukokortikosteroide'] : '';
            $entry->antidepressiva = (isset($_POST['herzinsuffizienz']['antidepressiva'])) ? $_POST['herzinsuffizienz']['antidepressiva'] : '';
            $entry->nsar = (isset($_POST['herzinsuffizienz']['nsar'])) ? $_POST['herzinsuffizienz']['nsar'] : '';
            $entry->diuretika = (isset($_POST['herzinsuffizienz']['diuretika'])) ? $_POST['herzinsuffizienz']['diuretika'] : '';
            $entry->save();
            $this->generate_pdf($post,"herzinsuffizienz", "herzinsuffizienz_pdf.html");
            $this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
            exit;

        }



        }
   /**
     * ISPC-2620 AOK Projekt - Copd , elena, 03.07.2020
     *
     * @throws Exception
     */
    public function copdAction(){
        $logininfo = new Zend_Session_Namespace('Login_Info');
        $clientid = $logininfo->clientid;
        //$aotable = new AokprojectsCopd();
        //print_r( $aotable->getSql());

        $userid = $logininfo->userid;
        $decid = Pms_Uuid::decrypt($_GET['id']);
        $ipid = Pms_CommonData::getIpid($decid);
        $epid = Pms_CommonData::getEpid($ipid);
        $this->view->epid = $epid;
        $this->view->clientid = $clientid;
        $this->view->id_record = $ipid;
        $this->view->ipid = $ipid;

        $detailscookies = '""';
        $this->view->detailscookies = $detailscookies;
        $modules = new Modules();
        if(!$modules->checkModulePrivileges('1009', $clientid))
        {
            $this->_redirect(APP_BASE . 'error/previlege');
            //exit();
        }

        /* --------------Get patient info and menus--------------------------------- */
        $patientmaster = new PatientMaster();
        $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
        $patientinfo = $patientmaster->getMasterData($decid, 0);
        $patientname = $patientinfo['last_name'].' '.$patientinfo['first_name'];
        $birthd = $patientinfo['birthd'];
        $tm = new TabMenus();
        $this->view->tabmenus = $tm->getMenuTabs();

        /* --------------Check permissions	---------------------------------------- */
        $isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

        if(!$isclient)
        {
            $this->_redirect(APP_BASE . "overview/overview");
        }
        if(isset($_POST['copd'])) {
            $post = [];
            $post['patientname'] = $patientname;
            $post['birthd'] = $birthd;
            $post['datum'] = date("d.m.Y ", time());
            $post['copd'] = $_POST['copd'];
            //$post
            $entry = new AokprojectsCopd();
            $entry->ipid = $ipid;
            $entry->clientid = $clientid;
            $entry->datum_plan = date_format(date_create_from_format('d.m.Y', $_POST['copd']['datum_plan']), 'Y-m-d');
            $entry->isc = (isset($_POST['copd']['isc'])) ? $_POST['copd']['isc'] : '';
            $entry->glukokortikosteroide = (isset($_POST['copd']['glukokortikosteroide'])) ? $_POST['copd']['glukokortikosteroide'] : '';
            $entry->anticholinergikum = (isset($_POST['copd']['anticholinergikum'])) ? $_POST['copd']['anticholinergikum'] : '';
            $entry->beta = (isset($_POST['copd']['beta'])) ? $_POST['copd']['beta'] : '';
            $entry->kombi = (isset($_POST['copd']['kombi'])) ? $_POST['copd']['kombi'] : '';

            $entry->save();
            $this->generate_pdf($post,"copd", "copd_pdf.html");
            $this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
            exit;

        }



        }

    /**
     * ISPC-2619 AOK Projekt - Cat , elena, 06.07.2020
     *
     * @throws Exception
     *
     */
        public function catAction(){
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            //$aotable = new AokprojectsCat();
            //print_r( $aotable->getSql());

            $userid = $logininfo->userid;
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpid($decid);
            $epid = Pms_CommonData::getEpid($ipid);
            $this->view->epid = $epid;
            $this->view->clientid = $clientid;
            $this->view->id_record = $ipid;
            $this->view->ipid = $ipid;

            $detailscookies = '""';
            $this->view->detailscookies = $detailscookies;
            $modules = new Modules();
            if(!$modules->checkModulePrivileges('1009', $clientid))
            {
                $this->_redirect(APP_BASE . 'error/previlege');
                //exit();
            }

            /* --------------Get patient info and menus--------------------------------- */
            $patientmaster = new PatientMaster();
            $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
            $patientinfo = $patientmaster->getMasterData($decid, 0);
            $patientname = $patientinfo['last_name'].' '.$patientinfo['first_name'];
            $birthd = $patientinfo['birthd'];
            $tm = new TabMenus();
            $this->view->tabmenus = $tm->getMenuTabs();

            /* --------------Check permissions	---------------------------------------- */
            $isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

            if(!$isclient)
            {
                $this->_redirect(APP_BASE . "overview/overview");
            }
            if(isset($_POST['cat'])) {
                $post = [];
                $post['patientname'] = $patientname;
                $post['birthd'] = $birthd;
                $post['datum'] = date("d.m.Y ", time());
                $post['cat'] = $_POST['cat'];
                //$post
                $entry = new AokprojectsCat();
                $entry->ipid = $ipid;
                $entry->clientid = $clientid;
                $entry->points = intval($_POST['cat']['points']);
                $entry->husten = (isset($_POST['cat']['husten'])) ? $_POST['cat']['husten'] : '';
                $entry->verschleimt = (isset($_POST['cat']['verschleimt'])) ? $_POST['cat']['verschleimt'] : '';
                $entry->engegefuehl = (isset($_POST['cat']['engegefuehl'])) ? $_POST['cat']['engegefuehl'] : '';
                $entry->ausser_atem = (isset($_POST['cat']['ausser_atem'])) ? $_POST['cat']['ausser_atem'] : '';
                $entry->eingeschraenkt = (isset($_POST['cat']['eingeschraenkt'])) ? $_POST['cat']['eingeschraenkt'] : '';
                $entry->bedenken_haus_verlassen = (isset($_POST['cat']['bedenken_haus_verlassen'])) ? $_POST['cat']['bedenken_haus_verlassen'] : '';
                $entry->probleme_schlafen = (isset($_POST['cat']['probleme_schlafen'])) ? $_POST['cat']['probleme_schlafen'] : '';
                $entry->keine_energie = (isset($_POST['cat']['keine_energie'])) ? $_POST['cat']['keine_energie'] : '';

                $entry->save();
                $this->generate_pdf($post,"cat", "cat_pdf.html");
                $this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
                exit;

            }




        }

		//Maria:: Migration CISPC to ISPC 20.08.2020
        public function interventionsAction()
        {

            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            //$aotable = new AokprojectsCat();
            //print_r( $aotable->getSql());

            $userid = $logininfo->userid;
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpid($decid);
            $epid = Pms_CommonData::getEpid($ipid);
            $this->view->epid = $epid;
            $this->view->clientid = $clientid;
            $this->view->id_record = $ipid;
            $this->view->ipid = $ipid;
            $we_need_to_generate_pdf = false;

            $detailscookies = '""';
            $this->view->detailscookies = $detailscookies;
            $modules = new Modules();
            if(!$modules->checkModulePrivileges('1009', $clientid))
            {
               // exit();
            }

            /* --------------Get patient info and menus--------------------------------- */
            $patientmaster = new PatientMaster();
            $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
            $patientinfo = $patientmaster->getMasterData($decid, 0);
            $patientname = $patientinfo['last_name'].' '.$patientinfo['first_name'];
            $birthd = $patientinfo['birthd'];
            $tm = new TabMenus();
            $this->view->tabmenus = $tm->getMenuTabs();

            /* --------------Check permissions	---------------------------------------- */
            $isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

            if(!$isclient)
            {
                $this->_redirect(APP_BASE . "overview/overview");
            }

            if(isset($_POST['pdf_generate'])) {
                //print_r($_POST['interventions']);
                $we_need_to_generate_pdf = true;

            }
            $allowed_blocks = [
                'interventions'

            ];
            $this->view->allowed_blocks = $allowed_blocks;
            $this->view->opened_blocks = $allowed_blocks;

            Pms_Form::setFnOptions([
                'create_form_interventions' => ['opened' => true, 'class' => ' expanded ' ]
            ]);


            $blockname = 'interventions'; // similar to patientform/contactform
            //$this->view->auto_add_blocks[$blockname]=$blockname;
            $this->getHelper('viewRenderer')->setViewSuffix('phtml');

            $interventions = new Interventions();
            //print_r($interventions->getSql());


            $options = $this->getRequest()->getPost('interventions', null); // use the post ones, maybe this is just a print
            if (is_null($options) &&  ! empty($_REQUEST['cid'])) {
                $options = InterventionsTable::getInstance()->findOneByIpid($ipid);
            }
            //$options = [];
            //print_r($options);
            if($we_need_to_generate_pdf){
                $options['formular_type'] = 'pdf';
            }
            $af_i= new Application_Form_Interventions();
            //ISPC-2630, elena, 29.09.2020, fixes
            $form_data = $af_i->create_form_interventions($options, $ipid);
            $__formHTML = $form_data['html'];//we need html only;

            $this->view->{$blockname} = [
                "__formHTML" => $__formHTML,
                "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
            ];

            if($we_need_to_generate_pdf){
                $post = [];
                $post['patientname'] = $patientname;
                $post['birthd'] = $birthd;
                $post['datum'] = date("d.m.Y ", time());
                $post['interventions_pdf'] = $this->view->interventions['__formPDF'];
                $this->generate_pdf($post, 'interventions', 'interventions_pdf.html');
            }



        }

    /**
     * ISPC-2657, elena, 25.08.2020 (ELSA: Reaktionen)
	 * //Maria:: Migration CISPC to ISPC 02.09.2020	
     */
        public function reactionsAction(){

            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;

            $userid = $logininfo->userid;
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpid($decid);
            $epid = Pms_CommonData::getEpid($ipid);
            $this->view->epid = $epid;
            $this->view->clientid = $clientid;
            $this->view->id_record = $ipid;
            $this->view->ipid = $ipid;
            $we_need_to_generate_pdf = false;

            $detailscookies = '""';
            $this->view->detailscookies = $detailscookies;
            $modules = new Modules();


            /* --------------Get patient info and menus--------------------------------- */
            $patientmaster = new PatientMaster();
            $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
            $patientinfo = $patientmaster->getMasterData($decid, 0);
            $patientname = $patientinfo['last_name'].' '.$patientinfo['first_name'];
            $birthd = $patientinfo['birthd'];
            $tm = new TabMenus();
            $this->view->tabmenus = $tm->getMenuTabs();

            /* --------------Check permissions	---------------------------------------- */
            $isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

            if(!$isclient)
            {
                $this->_redirect(APP_BASE . "overview/overview");
            }

            if(isset($_POST['pdf_generate'])) {
                $we_need_to_generate_pdf = true;

            }
            $allowed_blocks = [
                'reactions'

            ];
            $this->view->allowed_blocks = $allowed_blocks;
            $this->view->opened_blocks = $allowed_blocks;

            Pms_Form::setFnOptions([
                'create_form_reactions' => ['opened' => true, 'class' => ' expanded ' ]
            ]);


            $blockname = 'reactions'; // similar to patientform/contactform

            $this->getHelper('viewRenderer')->setViewSuffix('phtml');

            if($we_need_to_generate_pdf){
                $options['formular_type'] = 'pdf';
            }
            $af_r= new Application_Form_Reactions();
            $__formHTML = $af_r->create_form_reactions($options, $ipid, true); //ISPC-2720, elena, 30.11.2020

            $this->view->{$blockname} = [
                "__formHTML" => $__formHTML,
                "__formPDF" => Pms_CommonData::html_prepare_fpdf(Pms_CommonData::html_prepare_dompdf($__formHTML, '12px', 'auto', false)),
            ];

            if($we_need_to_generate_pdf){

                // outsources to form,  $patientname and $birthd are already known, html already rendered
                $af_r->generate_pdf($patientname, $birthd, $this->view->reactions['__formPDF']);

                $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);

            }

        }
        
        //ISPC-2736 Lore 12.11.2020
        public function emergencyplansapviiAction(){
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpId($decid);
            
            $patientmaster = new PatientMaster();
            $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
            
            $tm = new TabMenus();
            $this->view->tabmenus = $tm->getMenuTabs();
            
            /*--------------- Client details --------------------------------------*/
            $clientdata = Pms_CommonData::getClientData($logininfo->clientid);
            $form['data']['sapv24_city'] = $clientdata[0]['city'];
            $form['client']['emergencynr_a'] = $clientdata[0]['emergencynr_a'];
            $form['client']['emergencynr_b'] = $clientdata[0]['emergencynr_b'];
            
            /*--------------- Patient details --------------------------------------*/
            $patientmaster = new PatientMaster();
            $patientinfo = $patientmaster->getMasterData($decid, 0);
            
            $patient['name'] = $patientinfo['first_name'] . ", " . $patientinfo['last_name'];
            $patient['birthd'] = $patientinfo['birthd'];
            $form['data']['living_will'] = $patientinfo['living_will'];
            
            $form['patient'] = $patient;
            
            /* -------------- Diagnosis  - Get Main Diagnosis --------------------------------- */
            $abb = "'HD'";
            $dg = new DiagnosisType();
            $ddarr = $dg->getDiagnosisTypes($clientid, $abb);
            if(!$ddarr[0]['id'])
            {
                $ddarr[0]['id'] = 0;
            }
            $comma = "";
            foreach($ddarr as $key1 => $val1)
            {
                $stam_diagno = array();
                $diagns = new PatientDiagnosis();
                $stam_diagno = $diagns->getFinalData($ipid, $val1['id']);
                
                $dia = 1;
                foreach($stam_diagno as $key => $val)
                {
                    if(strlen($val['diagnosis']) > 0)
                    {
                        if(strlen($val['icdnumber']) > 0)
                        {
                            $other_diagnosis .= $comma . $val['diagnosis'] . ' (' . $val['icdnumber'] . ')';
                        }
                        else
                        {
                            $other_diagnosis .= $comma . $val['diagnosis'];
                        }
                        $dia++;
                        $comma = ",";
                    }
                }
            }
            $form['data']['main_diagnosis'] = $other_diagnosis;
            
            // get patient drugplan
            $m_medication = new PatientDrugPlan();
            $medicarr = $m_medication->getMedicationPlanAll($decid);
            
            $medication_extra  = PatientDrugPlanExtra::get_patient_drugplan_extra($ipid,$clientid);
            
            $cnt = 0;
            
            foreach($medicarr as $k=>$medication_data)
            {
                if($medication_data['iscrisis'] == "1")
                {
                    if( strlen($medication_data['medication']) == "1" || $medication_data['medication'] == "-"){
                        $form['data']['medication_M'][$cnt]['medication'] = $medication_extra[$medication_data['id']]['drug'];
                    } else{
                        $form['data']['medication_M'][$cnt]['medication'] = $medication_data['medication'];
                        
                    }
                    $form['data']['medication_M'][$cnt]['dosage'] = $medication_data['dosage'];
                    $form['data']['medication_M'][$cnt]['indication'] = $medication_extra[$medication_data['id']]['indication']['name'];
                    
                    if(!empty($medication_extra[$medication_data['id']]['escalation_id'])){ // ISPC-2247
                        $form['data']['medication_M'][$cnt]['indication'] = $medication_extra[$medication_data['id']]['indication']['name'].' (STUFE '.$medication_extra[$medication_data['id']]['escalation_id'].')';
                    } else{
                        $form['data']['medication_M'][$cnt]['indication'] = $medication_extra[$medication_data['id']]['indication']['name'];
                    }
                    $form['data']['medication_M'][$cnt]['indication_color'] = $medication_extra[$medication_data['id']]['indication']['color'];
                    $form['data']['medication_M'][$cnt]['nursing_measures'] = $medication_data['comments'];;
                    $cnt++;
                }
                
            }
            
            //An-/Zugehörige
            $cpm_cpm = new ContactPersonMaster();
            $cpm_arr = $cpm_cpm->getPatientContact($ipid, false);
            if(!empty($cpm_arr)){
                foreach($cpm_arr as $cp_key=>$cp_vals){
                    $form['data']['relatives'] .= $cp_vals['cnt_last_name'].' '.$cp_vals['cnt_first_name']."; ";
                }
            }
            // ACP
            $acp = new PatientAcp();
            $acp_data = $acp->getByIpid(array($ipid));
            $current_acp_data = $acp_data[$ipid];
            if(!empty($current_acp_data)){
                foreach($current_acp_data as $key=>$vals){
                    //Vorsorgevollmacht
                    if($vals['division_tab'] == 'healthcare_proxy'){
                        if($vals['active'] == 'yes'){
                            $form['data']['prev_attorney'] = '1';
                        } else {
                            $form['data']['prev_attorney'] = '0';
                        }
                    }
                    //Patientenverfügung
                    if($vals['division_tab'] == 'living_will'){
                        if($vals['active'] == 'yes'){
                            $form['data']['living_will'] = '1';
                        } else {
                            $form['data']['living_will'] = '0';
                        }
                    }
                    //Betreuungsverfügung
                    if($vals['division_tab'] == 'care_orders'){
                        if($vals['active'] == 'yes'){
                            $form['data']['serv_available'] = '1';
                        } else {
                            $form['data']['serv_available'] = '0';
                        }
                        
                        //Betreuer
                        if( (!empty($vals['contactperson_master_id'])) && $vals['contactperson_master_id'] != '0' ){
                            $cpm_obj = new ContactPersonMaster();
                            $cpm_data = $cpm_obj->getPatientContactById($vals['contactperson_master_id'], false);
                            $form['data']['supervisor'] = $cpm_data[0]['cnt_last_name'].' '.$cpm_data[0]['cnt_first_name'];
                        }
                    }
                }
            }
            //.
            
            $this->view->saveddata = '0';
            // get saved data
            $existing_form_data = EmergencyPlanSapvII::get_emergency_plan_sapv_ii($ipid);
            if($existing_form_data)
            {
                $form['data'] = $existing_form_data;
                $this->view->saveddata = '1';
                
                $existing_form_data_medication = EmergencyPlanSapvIIMedication::get_emergency_plan_sapv_ii_medication($existing_form_data['id']);
                
                if($existing_form_data_medication)
                {
                    foreach($existing_form_data_medication as $med_f)
                    {
                        if ($med_f[med_type] == 'F')
                        {
                            $form['data']['medication_F'][] = $med_f;
                        }
                        elseif ($med_f[med_type] == 'M')
                        {
                            $form['data']['medication_M'][] = $med_f;
                        }
                    }
                }
            }
            
            $this->view->form_data = $form;
            
            //var_dump($form); exit;
            /* ---------------------- POST -------------------------- */
            if($this->getRequest()->isPost())
            {
                //var_dump($_POST['form']); exit;
                $eps_form = new Application_Form_EmergencyPlanSapvII();
                
                if($_POST['form_action'] == "save")
                {
                    /*---------------------- Insert form  --------------------------*/
                    if(strlen($_POST['formid']) == '0')
                    {
                        $post = $_POST['form'];
                        $inserted_id = $eps_form->insert($ipid,$post);
                        
                        if($post['living_will'] != $patientinfo['living_will'])
                        {
                            $patinfo = Doctrine::getTable('PatientMaster')->find($patientinfo['id']);
                            $patinfo->living_will = $post['data']['living_will'];
                            $patinfo->living_will_from = date('y-m-d');
                            $patinfo->save();
                        }
                        
                        $formid = $inserted_id;
                        
                        $form_tabname = "emergency_plan_sapv_ii";
                        $cust = new PatientCourse ();
                        $cust->ipid = $ipid;
                        $cust->course_date = date("Y-m-d H:i:s", time());
                        $cust->course_type = Pms_CommonData::aesEncrypt("F");
                        $cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Notfallplan II wurde erstellt'));
                        $cust->tabname = Pms_CommonData::aesEncrypt($form_tabname);
                        $cust->user_id = $logininfo->userid;
                        $cust->save();
                    }
                    /* ---------------------- Update form  --------------------------*/
                    else
                    {
                        $post = $_POST['form'];
                        $post['formid'] = $_POST['formid'];
                        $update = $eps_form->update($ipid,$post);
                        
                        if($post['living_will'] != $patientinfo['living_will'])
                        {
                            $patinfo = Doctrine::getTable('PatientMaster')->find($patientinfo['id']);
                            $patinfo->living_will = $post['data']['living_will'];
                            $patinfo->living_will_from = date('y-m-d');
                            $patinfo->save();
                        }
                        
                        $form_tabname = "emergency_plan_sapv_ii";
                        $cust = new PatientCourse ();
                        $cust->ipid = $ipid;
                        $cust->course_date = date("Y-m-d H:i:s", time());
                        $cust->course_type = Pms_CommonData::aesEncrypt("F");
                        $cust->course_title = Pms_CommonData::aesEncrypt(addslashes('Notfallplan II wurde editiert'));
                        $cust->tabname = Pms_CommonData::aesEncrypt($form_tabname);
                        $cust->user_id = $logininfo->userid;
                        $cust->save();
                    }
                    
                    $post = $_POST;
                    $post['form_data']['patient']  =   $form['patient'];
                    $post['form_data']['client']  =   $form['client'];
                    $post['form_data']['data']  =   $post['form']['data'];
                    
                    $sort_col = array();
                    $med_array = array();
                    
                    foreach($post['form_data']['data']['medication'] as $keym=>$valm)
                    {
                        $sort_col[$keym] = strtolower($valm['indication']);
                        $med_array[$keym]['indication_s'] = strtolower($valm['indication']);
                        $med_array[$keym]['indication'] = $valm['indication'];
                        $med_array[$keym]['indication_color'] = $valm['indication_color'];
                        $med_array[$keym]['med_type'] = $valm['med_type'];
                        $med_array[$keym]['medication'] = $valm['medication'];
                        $med_array[$keym]['dosage'] = $valm['dosage'];
                        $med_array[$keym]['nursing_measures'] = $valm['nursing_measures'];
                    }
                    //ISPC-2359 Lore 17.09.2019
                    //array_multisort($sort_col, SORT_ASC, $med_array);
                    $med_sort = array();
                    
                    foreach($med_array as $kmd=>$vmd)
                    {
                        $med_sort[$kmd]['indication'] = $vmd['indication'];
                        $med_sort[$kmd]['indication_color'] = $vmd['indication_color'];
                        $med_sort[$kmd]['med_type'] = $vmd['med_type'];
                        $med_sort[$kmd]['medication'] = $vmd['medication'];
                        $med_sort[$kmd]['dosage'] = $vmd['dosage'];
                        $med_sort[$kmd]['nursing_measures'] = $vmd['nursing_measures'];
                    }
                    
                    $post['form_data']['data']['medication'] = $med_sort;
                    //var_dump($post['form_data']['data']['medication']);exit;
                    $gen_pdf = $this->generate_pdf($post, 'emergencyplansapvii_save', 'emergencyplansapvii_pdf.html');
                    
                    /* ---------------------- Redirect to verlauf  -------------------*/
                    $this->redirect(APP_BASE . 'patientcourse/patientcourse?id=' . $_REQUEST['id']);
                    exit;
                }
                /* ---------------------- Generate pdf  -------------------*/
                elseif($_POST['form_action'] == "pdf_print")
                {
                    $post = $_POST;
                    $post['form_data']['patient']  =   $form['patient'];
                    $post['form_data']['client']  =   $form['client'];
                    $post['form_data']['data']  =   $post['form']['data'];
                    
                    $sort_col = array();
                    $med_array = array();
                    
                    foreach($post['form_data']['data']['medication'] as $keym=>$valm)
                    {
                        $sort_col[$keym] = strtolower($valm['indication']);
                        $med_array[$keym]['indication_s'] = strtolower($valm['indication']);
                        $med_array[$keym]['indication'] = $valm['indication'];
                        $med_array[$keym]['indication_color'] = $valm['indication_color'];
                        $med_array[$keym]['med_type'] = $valm['med_type'];
                        $med_array[$keym]['medication'] = $valm['medication'];
                        $med_array[$keym]['dosage'] = $valm['dosage'];
                        $med_array[$keym]['nursing_measures'] = $valm['nursing_measures'];
                    }
                    //ISPC-2359 Lore 17.09.2019
                    //array_multisort($sort_col, SORT_ASC, $med_array);
                    $med_sort = array();
                    
                    foreach($med_array as $kmd=>$vmd)
                    {
                        $med_sort[$kmd]['indication'] = $vmd['indication'];
                        $med_sort[$kmd]['indication_color'] = $vmd['indication_color'];
                        $med_sort[$kmd]['med_type'] = $vmd['med_type'];
                        $med_sort[$kmd]['medication'] = $vmd['medication'];
                        $med_sort[$kmd]['dosage'] = $vmd['dosage'];
                        $med_sort[$kmd]['nursing_measures'] = $vmd['nursing_measures'];
                    }
                    
                    $post['form_data']['data']['medication'] = $med_sort;
                    //var_dump($post['form_data']['data']['medication']);exit;
                    $gen_pdf = $this->generate_pdf($post, 'emergencyplansapvii', 'emergencyplansapvii_pdf.html');
                    exit;
                }
                elseif($_POST['form_action'] == "reset")
                {
                    if($_POST['formid'] != '0' && !empty($_POST['formid']))
                    {
                        // reload form
                        $eps_form = new Application_Form_EmergencyPlanSapvII();
                        $eps_form->reloaddata($ipid);
                        
                        /* ---------------------- Redirect to current page  ------------------- */
                        $this->redirect(APP_BASE . 'patientformnew/emergencyplansapvii?id=' . $_REQUEST['id']);
                    }
                }
            }
        }
        

        /**
         *  ISPC-2697, elena, 13.11.2020
         */
        public function beatmungAction(){

            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;

            $userid = $logininfo->userid;
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpid($decid);
            $epid = Pms_CommonData::getEpid($ipid);
            $this->view->epid = $epid;
            $this->view->clientid = $clientid;
            $this->view->id_record = $ipid;
            $this->view->ipid = $ipid;
            $we_need_to_generate_pdf = false;

            $detailscookies = '""';
            $this->view->detailscookies = $detailscookies;
            $modules = new Modules();


            /* --------------Get patient info and menus--------------------------------- */
            $patientmaster = new PatientMaster();
            $this->view->patientinfo = $patientmaster->getMasterData($decid, 1);
            $patientinfo = $patientmaster->getMasterData($decid, 0);
            $patientname = $patientinfo['last_name'].' '.$patientinfo['first_name'];
            $birthd = $patientinfo['birthd'];
            $tm = new TabMenus();
            $this->view->tabmenus = $tm->getMenuTabs();
            
            
            //ISPC-2891 Ancuta 27.04.2021
            $this->view->disable_edit_actions = 0;
            if($_REQUEST['step'] == 'show_ventilations' && $this->logininfo->isEfaClient == '1' && $this->logininfo->isEfaUser == '1') {
                $this->_helper->layout->setLayout('layout_ajax');
                $this->view->patientinfo="";
                $this->view->tabmenus="";
                $this->view->disable_edit_actions = 1;
                
                // get connected ipids 
                $p_share_obj = new PatientsShare();
                $p_share_info= $p_share_obj->get_connection_by_ipid($ipid);
                $allIpids [] = $ipid;
                $client_ids[$ipid] = $clientid;
                if (!empty($p_share_info)) {
                    foreach ($p_share_info as $link) {
                        if ($link['source'] == $ipid && $link['target'] != $ipid) {
                            $allIpids [] = $link['target'];
                            $client_ids[$link['target']] = $link['target_client'];
                        } elseif ($link['target'] == $ipid && $link['source'] != $ipid) {
                            $allIpids [] = $link['source'];
                            $client_ids[$link['source']] = $link['source_client'];
                        }
                    }
                }
            }
            //--
            
            
            
            if($this->getRequest())

            /* --------------Check permissions	---------------------------------------- */
            $isclient = Pms_CommonData::getPatientClient($decid, $logininfo->clientid);

            if(!$isclient)
            {
                $this->_redirect(APP_BASE . "overview/overview");
            }
            
            //ISPC-2891 Ancuta 27.04.2021
            if($_REQUEST['step'] == 'show_ventilations' && $this->logininfo->isEfaClient == '1' && $this->logininfo->isEfaUser == '1') {
                $anordnungen = Anordnung::getMultiplePatientBeatmungAnordnungen($allIpids, true);
            } else{
                $anordnungen = Anordnung::getPatientBeatmungAnordnungen($ipid, true);
            }
            $aDevices = [];

            
            //ISPC-2891 Ancuta 27.04.2021
            if($_REQUEST['step'] == 'show_ventilations' && $this->logininfo->isEfaClient == '1' && $this->logininfo->isEfaUser == '1') {
                $other_anordnungen = Anordnung::getMultiplePatientAnordnungenWithout($allIpids, 'beatmung');
            } else{
                $other_anordnungen = Anordnung::getPatientAnordnungenWithout($ipid, 'beatmung');
                
            }
            $current_device = null;
            //print_r($anordnungen);
            foreach($anordnungen as $anordnung){
                $device_id = $anordnung['machine'];
                $entity = new Machine();
                $device = $entity->getTable()->find($device_id,  Doctrine_Core::HYDRATE_RECORD);
                if($device->machine_type == 'beatmung'){
                    $aDevices[$anordnung['id']] = $device;
                    $this->view->current_device = $device_id;
                    $current_device = $device_id;
                }
            }
            if($current_device != null){
                $objM = new Machine();
                $beatmung_machine = $objM->getTable()->find($current_device);
                $this->view->beatmung_machine = $beatmung_machine;
            }

            $newOtherAnordnungen = [];
            foreach($other_anordnungen as $anordnung){
                $device_id = $anordnung['machine'];
                $entity = new Machine();
                $device = $entity->getTable()->find($device_id,  Doctrine_Core::HYDRATE_RECORD);
                $anordnung['device_name'] = $device->machine_name;
                $anordnung['device_type'] = $device->machine_type;
                $anordnung['params'] = json_decode($anordnung['parameters'], true);
                $newOtherAnordnungen[] = $anordnung;
            }

            $this->view->anordnungen = $anordnungen;
            //print_r($newOtherAnordnungen);
            $this->view->other_anordnungen = $newOtherAnordnungen;
            $this->view->anordnung_devices = $aDevices;
            $this->view->machine_types = Machine::getTypes();

        }
        
        
        
        
        
        
        
        
        /**
         * ISPC-2609 Ancuta 07.09.2020
         */
        public function printjobdeleteAction(){
            
            $this->_helper->viewRenderer->setNoRender();
            $this->_helper->layout->setLayout('layout_ajax');
            
            
            if ( !empty($_REQUEST['delete']) && !empty($_REQUEST['id']) && $_REQUEST['delete'] == "1" )
            {
                $pjb_obj = Doctrine::getTable('PrintJobsBulk')->find($_REQUEST['id']);
                if($pjb_obj){
                    $pjb_obj->delete();
                }
                
            }
            
        }
        
        
        /**
         * ISPC-2609 Ancuta 07.09.2020
         */
        public function printjobclearAction(){
            
            $this->_helper->viewRenderer->setNoRender();
            $this->_helper->layout->setLayout('layout_ajax');
            
            
            if ( !empty($_REQUEST['user']) && !empty($_REQUEST['client']) && !empty($_REQUEST['invoice_type']) )
            {
                //find all - and delete all
                
                
                $fdoc1 = Doctrine_Query::create();
                $fdoc1->select('*');
                $fdoc1->from('PrintJobsBulk');
                $fdoc1->where("clientid = ?", $_REQUEST['client']);
                $fdoc1->andWhere("user = ?", $_REQUEST['user']);
                $fdoc1->andWhere("print_controller = ?", $_REQUEST['print_controller']);
                $fdocarray = $fdoc1->fetchArray();
                
                if(!empty($fdocarray)){
                    foreach($fdocarray as $job_k=>$job_data){
                        
                        $pjb_obj = Doctrine::getTable('PrintJobsBulk')->find($job_data['id']);
                        if($pjb_obj){
                            $pjb_obj->delete();
                        }
                    }
                }
                
            }
            
        }
        
        
        /**
         * ISPC-2609 Ancuta 07.09.2020
         */
        public function printjobinfoAction(){
            $clientid = $this->clientid;
            $userid = $this->userid;
            
            $user = new User();
            $user_details = array();
            $user_details = $user->get_client_users($clientid,1,true);
            
            //populate the datatables
            if ($this->getRequest()->isXmlHttpRequest() && $this->getRequest()->isPost() && !empty($_REQUEST['print_controller'])) {
                $this->_helper->layout()->disableLayout();
                $this->_helper->viewRenderer->setNoRender(true);
                if(!$_REQUEST['length']){
                    $_REQUEST['length'] = "25";
                }
                $limit = (int)$_REQUEST['length'];
                $offset = (int)$_REQUEST['start'];
                $search_value = addslashes($_REQUEST['search']['value']);
                
                $columns_array = array(
                    "0" => "user"
                );
                $columns_search_array = $columns_array;
                
                if(isset($_REQUEST['order'][0]['column']))
                {
                    $order_column = $_REQUEST['order'][0]['column'];
                    $order_dir = $_REQUEST['order'][0]['dir'];
                }
                else
                {
                    array_push($columns_array, "id");
                    $nrcol = array_search ('id', $columns_array);
                    $order_column = $nrcol;
                    $order_dir = "ASC";
                }
                
                $order_by_str ='CONVERT(CONVERT('.addslashes(htmlspecialchars($columns_array[$order_column])).' USING BINARY) USING utf8) '.$order_dir;
                
                // ########################################
                // #####  Query for count ###############
                $fdoc1 = Doctrine_Query::create();
                $fdoc1->select('count(*)');
                $fdoc1->from('PrintJobsBulk');
                $fdoc1->where("clientid = ?", $clientid);
                $fdoc1->andWhere("user = ?", $userid);
                $fdoc1->andWhere("print_controller = ?", $_REQUEST['print_controller']);
                //$fdoc1->andWhere('DATE(create_date) = ? ', date('Y-m-d'));
                $fdocarray = $fdoc1->fetchArray();
                $full_count  = $fdocarray[0]['count'];
                
                // ########################################
                // #####  Query for details ###############
                $fdoc1->select('*');
                $fdoc1->orderBy('create_date DESC');
                $fdoc1->limit($limit);
                $fdoc1->offset($offset);
                
                $fdoclimit = Pms_CommonData::array_stripslashes($fdoc1->fetchArray());
                
                
                
                
                $qs = Doctrine_Query::create();
                $qs->select('*');
                $qs->from('PrintJobsBulk');
                $qs->where('status ="active" ');
                $qs->orderBy('create_date ASC');
                $act_result = $qs->fetchArray();
                
                $pnr = 0;
                foreach($act_result as $pk=>$pactive){
                    $pnr++;
                    $qnr[$pactive['id']] = $pnr;
                }
                
                $report_ids = array();
                $fdoclimit_arr = array();
                foreach ($fdoclimit as $key => $report)
                {
                    $fdoclimit_arr[$report['id']] = $report;
                    $report_ids[] = $report['id'];
                }
                
                $row_id = 0;
                $link = "";
                
                $resulted_data = array();
                
                $row_id = 0 ;
                foreach($fdoclimit_arr as $k=>$data){
                    if($data['status'] == 'active'  ) {
                        $resulted_data[$row_id]['queue_nr'] = $qnr[$data['id']];
                    } else{
                        $resulted_data[$row_id]['queue_nr'] =  '--';
                    }
                    
                    $resulted_data[$row_id]['print_user'] = $user_details[$data['user']];
                    $resulted_data[$row_id]['print_status'] = self::translate('ps_'.$data['status']);
                    $data['clientid_enc']= Pms_Uuid::encrypt($data['clientid']);
                    
                    if($data['status'] == 'completed' && $data['client_file_id'] != 0){
                        
                        $resulted_data[$row_id]['print_link'] = '<a href="'.APP_BASE.'misc/clientfile?doc_id='.$data['client_file_id'].'&cid='.$data['clientid_enc'].'">  <img border="0" src="'.RES_FILE_PATH.'/images/file_download.png" />  </a>';
                        
                    } else{
                        $resulted_data[$row_id]['print_link'] = '--';
                    }
                    $resulted_data[$row_id]['print_date'] = date('d.m.Y H:i',strtotime($data['create_date']));
                    
                    
                    $resulted_data[$row_id]['actions'] = '<a href="javascript:void(0);"  class="job_delete" rel="'.$data['id'].'" id="job_delete_'.$data['id'].'"><img border="0" src="'.RES_FILE_PATH.'/images/action_delete.png"></a>';
                    $row_id++;
                }
                
                $response['draw'] = $_REQUEST['draw']; //? get the sent draw from data table
                $response['recordsTotal'] = $full_count;
                $response['recordsFiltered'] = $filter_count; // ??
                $response['data'] = $resulted_data;
                
                $this->_helper->json->sendJson($response);
            }
            
        }
        
        
        
        /**
         * ISPC-2609
         */
        public function __StartPrintJobs(){
            $appInfo = Zend_Registry::get('appInfo');
            $app_path  = 	isset($appInfo['appCronPath']) && !empty($appInfo['appCronPath']) ? $appInfo['appCronPath'] : false;
            
            $function_path = $app_path.'/cron/processprintjobs';
            popen('curl -s '.$function_path.' &', 'r');
        }


        /**
         * ISPC-2825 Dragos 08.03.2021
         */
    //ISPC-2827+ISPC-2825 Dragos 14.04.2021 (shared cf)
        //ISPC-2944 Ancuta 15.06.2021  - multiple changes done in function 
        public function ambulatorycurveAction(){
           
            $start = microtime(true);
            
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $userid = $logininfo->userid;
            $groupid = $logininfo->groupid;

            $decid = Pms_Uuid::decrypt($_REQUEST['id']);
            $this->view->encid = $_REQUEST['id'];
            $ipid = Pms_CommonData::getIpid($decid);


            $p_share_obj = new PatientsShare();
            $p_share_info= $p_share_obj->get_connection_by_ipid($ipid);
            $allIpids [] = $ipid;
            $client_ids[$ipid] = $clientid;
            if (!empty($p_share_info)) {
                foreach ($p_share_info as $link) {
                    if ($link['source'] == $ipid && $link['target'] != $ipid) {
                        $allIpids [] = $link['target'];
                        $client_ids[$link['target']] = $link['target_client'];
                    } elseif ($link['target'] == $ipid && $link['source'] != $ipid) {
                        $allIpids [] = $link['source'];
                        $client_ids[$link['source']] = $link['source_client'];
                    }
                }
            }
            
            if($_REQUEST['show_dbg'] == "1"){
                $end = microtime(true) - $start;
                $time = round($end, 0);
                echo "<br/> #1: ".$time." / ";
            }
            $this->view->client_ids = $client_ids;

            $patientmaster = new PatientMaster();
            //$this->view->patientinfo = $patientmaster->getMasterData($decid, 1);

            $tm = new TabMenus();
            //$this->view->tabmenus = $tm->getMenuTabs();

            
            if($_REQUEST['show_dbg'] == "1"){
                $end = microtime(true) - $start;
                $time = round($end, 0);
                echo "<br/> #1.1: ".$time." / ";
            }
            $usr = new User();

            //$display_length = empty($_REQUEST['days']) ? 3 :  intval($_REQUEST['days']);
            $display_length = 1; // used for datepicker intervals
            $this->view->display_length = $display_length;

            //get all contact forms
            $contactFormSelect = Doctrine_Query::create()
                ->select('*,comment as comment_block')
                ->from('ContactForms')
                ->whereIn('ipid', $allIpids)
                ->andwhere('isdelete="0"');
            $contactFormSelect->orderBy('billable_date DESC');
            $patientContactForms = $contactFormSelect->fetchArray();
            
            $patientContactForms_ids = array();
            foreach($patientContactForms as $kd=>$pcds){
                $patientContactForms_ids[] = $pcds['id'];
            }

            if($_REQUEST['show_dbg'] == "1"){
                $end = microtime(true) - $start;
                $time = round($end, 0);
                echo "<br/> #1.2: ".$time." / ";
            }
            
            $this->view->client_details = Client::get_all_clients();

            $this->view->dates = [];

            /* INITIAL QUERIES REQUIRED FOR THE LOOPING PART... THIS SHOULD BE MERGED WITH THE QUERIES AFTER BUILDING THE FORM ID ARRAY BELOW*/
            if($_REQUEST['show_dbg'] == "1"){
                $end = microtime(true) - $start;
                $time = round($end, 0);
                echo "<br/> #2: ".$time." / ";
            }
            /* Symptomatology */
            $sympval = new SymptomatologyValues();
            $set_details = $sympval->getSymptpomatologyValues(1);

            $symp = new Symptomatology();
            foreach ($allIpids as $theIpid) {
                $symptomarr_ext = $symp->getPatientSymptpomatologyLast($theIpid);
                foreach($symptomarr_ext as $k => $sv)
                {
                    $symp_last[$theIpid][$sv['symptomid']]['last_value'] = $sv ['input_value'];
                }
            }



            $form_symp = new ContactFormsSymp();

            /* -- */

            /* -- client SYMPTOME II --*/
            foreach ($client_ids as $theIpid => $theClientId) {
                $s_groups = ClientSymptomsGroups::get_client_symptoms_groups($theClientId);
                $client_sym_details_arr = ClientSymptoms::get_client_symptoms($theClientId,false, true);

                foreach($client_sym_details_arr as $group_id=>$syms){
                    foreach($syms as $data){
                        $all_sym_details[$theIpid][$data['id']] = $data;
                    }
                }

                $this->view->client_sym_all_details = $all_sym_details;
            }

            /* -- */
            if($_REQUEST['show_dbg'] == "1"){
                $end = microtime(true) - $start;
                $time = round($end, 0);
                echo "<br/> #3: ".$time." / ";
            }
            /*art ent exit*/
//            $blockname = 'block_artificial_entries_exits';
            //get client artificial entries exits options

            foreach ($client_ids as $theIpid => $theClientId) {
                $client_options = ArtificialEntriesExitsListTable::getInstance()->findByClientid($theClientId, Doctrine_Core::HYDRATE_ARRAY);
                foreach($client_options as $kr => $vr)
                {
                    $client_options_byids[$theIpid][$vr['id']] = $vr;
                }
                //get the artificial entries exits of the patient
                $patenex = PatientArtificialEntriesExitsTable::getInstance()->findByIpidAndIsremove($theIpid, '0', Doctrine_Core::HYDRATE_ARRAY);
                foreach($patenex as $kr => $vr)
                {
                    $patient_artenex_byids[$theIpid][$vr['id']] = $vr;
//                    $patient_art_ids[] = [$vr['id']];
                }
            }


            // -- //

            /* END OF INITIAL QUERIES PART */

            $display_rows = [
                'admin' => false,
                'vital_signs' => false,
                'symptoms' => false,
                'symptoms_2' => false,
                'case_history' => false,
                'anamnese_2' => false,
                'art_en_exit' => false,
                'patient_hzimex' => false,
                'comment' => false,
            ];

            $formTypes = new FormTypes();
            $formBlockVitalSigns = new FormBlockVitalSigns();
            $formBlockClientSymptoms = new FormBlockClientSymptoms();
            $hzimex_block = new FormBlockHospizimex();
            $formsByDate = [];

            if($_REQUEST['show_dbg'] == "1"){
                $end = microtime(true) - $start;
                $time = round($end, 0);
                echo "<br/> #4: ".$time." / ";
            }
            //GET ALL ADDITIONAL DATA - REWRITE THIS TO NOT DO RECURSIVE QUERIES
            // BUILD ID ARRAY IN FOREACH, SELECT FROM VARIOUS TABLES AFTER

            //ISPC-2944 Ancuta 15.06.2021 
            $FormBlockVitalSigns_array = array();
            if(!empty($patientContactForms_ids)){
                $FormBlockVitalSigns_array = Doctrine_Query::create()
                ->select("*")
                ->from('FormBlockVitalSigns')
                ->whereIn('ipid',$allIpids)
                ->andwhereIn('contact_form_id',$patientContactForms_ids)
                ->andWhere('isdelete = 0')
                ->fetchArray();
            }
            
            $form_blocks = array();
            foreach($FormBlockVitalSigns_array as $kf=>$vs_data){
                $form_blocks['FormBlockVitalSigns'][$vs_data['ipid']][$vs_data['contact_form_id']][] = $vs_data;
            }

            if($_REQUEST['show_dbg'] == "1"){
                $end = microtime(true) - $start;
                $time = round($end, 0);
                echo "<br/> #4.0: ".$time." / ";
            }
            $FormBlockClientSymptoms_array = array();
            if(!empty($patientContactForms_ids)){
                $FormBlockClientSymptoms_array = Doctrine_Query::create()
                ->select("*")
                ->from('FormBlockClientSymptoms')
                ->whereIn('ipid',$allIpids)
                ->andwhereIn('contact_form_id',$patientContactForms_ids)
                ->andWhere('isdelete = 0')
                ->fetchArray();
            }
            foreach($FormBlockClientSymptoms_array as $kf=>$vs_data){
                $form_blocks['FormBlockClientSymptoms'][$vs_data['ipid']][$vs_data['contact_form_id']][$vs_data['id']] = $vs_data;
            }
            
            if($_REQUEST['show_dbg'] == "1"){
                $end = microtime(true) - $start;
                $time = round($end, 0);
                echo "<br/> #4.1: ".$time." / ";
            }
            $FormBlockHospizimex_array = array();
            if(!empty($patientContactForms_ids)){
                $FormBlockHospizimex_array = Doctrine_Query::create()
                ->select("*")
                ->from('FormBlockHospizimex')
                ->whereIn('ipid',$allIpids)
                ->andwhereIn('contact_form_id',$patientContactForms_ids)
                ->andWhere('isdelete = 0')
                ->fetchArray();
            }
            foreach($FormBlockHospizimex_array as $kf=>$vs_data){
                $form_blocks['FormBlockHospizimex'][$vs_data['ipid']][$vs_data['contact_form_id']][] = $vs_data;
            }
            
            if($_REQUEST['show_dbg'] == "1"){
                $end = microtime(true) - $start;
                $time = round($end, 0);
                echo "<br/> #4.2: ".$time." / ";
            }
            
            $FormBlockArtificialEntriesExits_array = array();
            if(!empty($patientContactForms_ids)){
                $FormBlockArtificialEntriesExits_array = Doctrine_Query::create()
                ->select("*")
                ->from('FormBlockArtificialEntriesExits')
                ->whereIn('ipid',$allIpids)
                ->andwhereIn('contact_form_id',$patientContactForms_ids)
                ->andWhere('isdelete = 0')
                ->fetchArray();
            }
            
            foreach($FormBlockArtificialEntriesExits_array as $kf=>$vs_data){
                $form_blocks['FormBlockArtificialEntriesExits'][$vs_data['ipid']][$vs_data['contact_form_id']] = $vs_data;
            }
            
            if($_REQUEST['show_dbg'] == "1"){
                $end = microtime(true) - $start;
                $time = round($end, 0);
                echo "<br/> #4.3: ".$time." / ";
            }
            
            $AnamneseTable_array = array();
            if(!empty($patientContactForms_ids)){
                $AnamneseTable_array = Doctrine_Query::create()
                ->select("*")
                ->from('Anamnese')
                ->whereIn('ipid',$allIpids)
                ->andwhereIn('contact_form_id',$patientContactForms_ids)
                ->andWhere('isdelete = 0')
                ->fetchArray();
            }
            
            foreach($AnamneseTable_array as $kf=>$vs_data){
                $form_blocks['Anamnese'][$vs_data['ipid']][$vs_data['contact_form_id']] = $vs_data;
            }
            
            
            $end = microtime(true) - $start;
            $time = round($end, 0);
            if($_REQUEST['show_dbg'] == "1"){
                echo "<br/> #4.4: ".$time." / ";
            }
 
            $ContactFormsSymp_array = array();
            if(!empty($patientContactForms_ids)){
                $ContactFormsSymp_array = Doctrine_Query::create()
                ->select("*")
                ->from('ContactFormsSymp')
                ->whereIn('ipid',$allIpids)
                ->andwhereIn('contact_form_id',$patientContactForms_ids)
                ->fetchArray();
            }
            
            foreach($ContactFormsSymp_array as $kf=>$vs_data){
                $form_blocks['ContactFormsSymp'][$vs_data['ipid']][$vs_data['contact_form_id']][$vs_data['symp_id']] = $vs_data;
            }

            $end = microtime(true) - $start;
            $time = round($end, 0);
            if($_REQUEST['show_dbg'] == "1"){
                echo "<br/> #4.5: ".$time." / ";
            }
            $old = 0;
            // --
            
            $end = microtime(true) - $start;
            $time = round($end, 0);
            if($_REQUEST['show_dbg'] == "1"){
                echo "<br/> #5: ".$time." / ";
            }
            foreach ($patientContactForms as $index => $contactForm) {

                $userDetails = $usr->getUserDetails($contactForm['create_user']);
                if (!empty($userDetails)) {
                    $patientContactForms[$index]['user'] = $userDetails[0];
                }

                $frm_type_details = $formTypes->get_form_type($contactForm['form_type']);
                if (!empty($frm_type_details)) {
                    $patientContactForms[$index]['form_type'] = $frm_type_details[0];
                }
                
                if($old==1){
                    $patientContactForms[$index]['vital_signs'] = $formBlockVitalSigns->getPatientFormBlockVitalSigns($contactForm['ipid'],$contactForm['id']);
                } else{
                    $patientContactForms[$index]['vital_signs'] = $form_blocks['FormBlockVitalSigns'][$contactForm['ipid']][$contactForm['id']];
                }

                /* symptomatology */
                if($old == 1){
                    $form_symps = $form_symp->getContactFormsSymp($contactForm['id'], $contactForm['ipid']); /// ????
                } else {
                    $form_symps = $form_blocks['ContactFormsSymp'][$contactForm['ipid']][$contactForm['id']];
                }
                
                $has_symp_values = false;
                foreach($set_details as $key => $sym)
                {
                    $newsymptomarr[$key] = $sym;
                    $newsymptomarr[$key]['symptomid'] = $sym['id'];
                    $newsymptomarr[$key]['entered_value'] = $form_symps[$sym['id']]['current_value'];
                    $newsymptomarr[$key]['input_value'] = $symp_last[$contactForm['ipid']][$sym['id']]['last_value'];
                    $newsymptomarr[$key]['comment'] = $form_symps[$sym['id']]['comment'];
                    if (!empty($form_symps[$sym['id']]['current_value'])) {
                        $has_symp_values = true;
                    }
                }

                $patientContactForms[$index]['symptoms'] = $has_symp_values ? $newsymptomarr : [];
                /* -- */

                if($old==1){
                    $patientContactForms[$index]['symptoms_2'] = $formBlockClientSymptoms->getPatientFormBlockClientSymptoms($contactForm['ipid'], $contactForm['id']);
                } else{
                    $patientContactForms[$index]['symptoms_2'] = $form_blocks['FormBlockClientSymptoms'][$contactForm['ipid']][$contactForm['id']];
                }

                /* ---------------GET Hospiz II block DETAILS------------------ */
                if($old == 1){
                    $patient_hzimex = $hzimex_block->getPatientFormBlockHospizimex($contactForm['ipid'], $contactForm['id']);
                } else{
                    $patient_hzimex = $form_blocks['FormBlockHospizimex'][$contactForm['ipid']][$contactForm['id']];
                }
                
                $patientContactForms[$index]['patient_hzimex'] = $patient_hzimex[0];
                /* -- */

                /* art ent exit */
                if($old == 1){
                    $oldValuesfromdb = FormBlockArtificialEntriesExitsTable::getInstance()->findOneByContactFormIdAndIpid($contactForm['id'], $contactForm['ipid'], Doctrine_Core::HYDRATE_ARRAY);
                } else{
                    $oldValuesfromdb = $form_blocks['FormBlockArtificialEntriesExits'][$contactForm['ipid']][$contactForm['id']];
                }
 
                $oldValues = [];
                $has_art_en_exit_values = false;
                if(!empty($patient_artenex_byids))
                {

                    $oldValues['id'] = $oldValuesfromdb['id'];

                    foreach($patient_artenex_byids[$contactForm['ipid']] as $kr => $vr)
                    {
                        $oldValues[$kr]['option_name'] = $client_options_byids[$contactForm['ipid']][$vr['option_id']]['name'];
                        $oldValues[$kr]['option_id'] = $vr['option_id'];
                        $oldValues[$kr]['option_availability'] = $client_options_byids[$contactForm['ipid']][$vr['option_id']]['days_availability'];
                        $oldValues[$kr]['option_date'] = $patient_artenex_byids[$contactForm['ipid']][$vr['id']]['option_date'];
                        $option_age =  Pms_CommonData::get_days_number_between(date('Y-m-d H:i:s', time()), $oldValues[$kr]['option_date']);
                        if($option_age > 0)
                        {
                            $oldValues[$kr]['option_age'] = $option_age;
                        }
                        else
                        {
                            $oldValues[$kr]['option_age'] = 0;
                        }
                        $oldValues[$kr]['option_contactform_date'] = $contactForm['date'];
                        if(array_key_exists($kr, $oldValuesfromdb['artificial_content']))
                        {
                            //$oldValues[$kr]['id'] = $oldValuesinitial[$vr['id']]['id'];
                            //$oldValues[$kr]['contact_form_id'] = $oldValuesinitial[$vr['id']]['contact_form_id'];
                            $oldValues[$kr]['patient_option_id'] = $kr;
                            $oldValues[$kr]['option_status'] = $oldValuesfromdb['artificial_content'][$kr]['option_status'];
                            $oldValues[$kr]['option_comment'] = $oldValuesfromdb['artificial_content'][$kr]['option_comment'];

                            if (!empty($oldValues[$kr]['option_status']) || !empty($oldValues[$kr]['option_comment'])) {
                                $has_art_en_exit_values = true;
                            }
                        }
                        else
                        {
                            $oldValues[$kr]['patient_option_id'] = $kr;
                        }
                    }
                }

                $patientContactForms[$index]['art_en_exit'] = $has_art_en_exit_values ? $oldValues : [];
                /* -- */

                // Anamnese II //
                if($old == 1){
                    $patientContactForms[$index]['anamnese_2'] = AnamneseTable::getInstance()->findOneByContactFormIdAndIpid($contactForm['id'], $contactForm['ipid'], Doctrine_Core::HYDRATE_ARRAY);
                } else{
                    $patientContactForms[$index]['anamnese_2'] = $form_blocks['Anamnese'][$contactForm['ipid']][$contactForm['id']];
                }
                /* -- */

                if (empty($patientContactForms[$index]['vital_signs'])
                    && empty($patientContactForms[$index]['symptoms'])
                    && empty($patientContactForms[$index]['symptoms_2'])
                    && empty($patientContactForms[$index]['art_en_exit'])
                    && empty($patientContactForms[$index]['case_history'])
                    && empty($patientContactForms[$index]['patient_hzimex']['import'])
                    && empty($patientContactForms[$index]['patient_hzimex']['export'])
                    && empty($patientContactForms[$index]['comment'])
                    && empty($patientContactForms[$index]['anamnese_2'])) {
                    //if no blocks filled, skip the form
                    unset($patientContactForms[$index]);
                }
            }

            /* END OF LOOP THAT NEEDS TO BE REWRITEN */


            //navigation
            if (!empty($_REQUEST['fid'])) {
                //start form provided
                $reqFormId = intval($_REQUEST['fid']);
                $allPatientContactForms = $patientContactForms;
                //parse array from end to requested form
                $counter = 0;
                $navigation['oneform']['next'] = null;
                $navigation['threeforms']['next'] = null;
                $navigation['oneform']['prev'] = null;
                $navigation['threeforms']['prev'] = null;
                foreach ($allPatientContactForms as $index => $contactForm) {
                    if ($contactForm['id'] == $reqFormId) {
                        $start_offset = ($index - 5) <= 0 ? 0 : $index - 5 ; // start slice 5 elements before, or at the beginning (these are forms after the selected one)
                        $selectedForms = array_slice($allPatientContactForms,$start_offset,6); //slice the last 6 forms
                        //set the next navigation
                        $slice_index = array_search($contactForm,$selectedForms);
                        $navigation['oneform']['next'] = !empty($selectedForms[$slice_index - 1]) && !empty($selectedForms[$slice_index - 3]) ? $selectedForms[$slice_index - 1]['id'] : null; //we get the next form (forms are ordered by billing date desc)
                        $navigation['threeforms']['next'] = !empty($selectedForms[$slice_index - 3]) && !empty($selectedForms[$slice_index - 5]) ? $selectedForms[$slice_index - 3]['id'] : null; // next 3 form

                        //reinit start offset to get only needed forms for previous
                        //this helps with finding the "prev" for when the requested form is not the first in the 3 set of displayed forms
                        $start_offset = ($index - 2) <= 0 ? 0 : $index - 2 ;
                        $selectedForms = array_slice($allPatientContactForms,$start_offset,6); //use this slice to determine previous elements

                        $navigation['oneform']['prev'] = !empty($selectedForms[3]) ? $selectedForms[3]['id'] : null; //we get the next form (forms are ordered by billing date desc)
                        $navigation['threeforms']['prev'] = !empty($selectedForms[5]) ? $selectedForms[5]['id'] : null; // next 3 form
                        //if prev 3 is null here... maybe i can navigate only 2 ahead

                        //finally slice the elemtns to display
                        $selectedForms = array_slice($allPatientContactForms,$start_offset,3);

                        $startDate = strtotime($selectedForms[$index]['billable_date']);
                        $endDate = strtotime($selectedForms[$index]['billable_date']);
                        $patientContactForms = array_reverse($selectedForms);

                        break;
                    }
                }
            } elseif (empty($_REQUEST['start_date'])) {
                //no navigation provided

                $navigation['oneform']['prev'] = !empty($patientContactForms[3]['id']) ? $patientContactForms[3]['id'] : null;
                $navigation['oneform']['next'] = null;
                $navigation['threeforms']['prev'] = !empty($patientContactForms[5]['id']) ? $patientContactForms[5]['id'] : null;
                $navigation['threeforms']['next'] = null;

                $startDate = strtotime($patientContactForms[2]['billable_date']);
                $endDate = strtotime($patientContactForms[0]['billable_date']);
                $patientContactForms = array_reverse(array_slice($patientContactForms,0, 3));
            } else {
                //start date provided
                $startDate = date('Y-m-d',strtotime($_REQUEST['start_date']));
                $patientContactForms = array_reverse($patientContactForms);
                $formCount = count($patientContactForms);
                $found_form = false;
                foreach ($patientContactForms as $index => $contactForm) {
                    $formDate = date('Y-m-d',strtotime($contactForm['date']));
                    if ($formDate >= $startDate) {
                        $found_form = true;
                        $offset = ($formCount - $index) <= 3 ? $formCount - $index + 1 : 0;
                        $navigation['oneform']['prev'] = !empty($patientContactForms[$index-1-$offset]['id']) ? $patientContactForms[$index-1-$offset]['id'] : null;
                        $navigation['threeforms']['prev'] = !empty($patientContactForms[$index-3-$offset]['id']) ? $patientContactForms[$index-3-$offset]['id'] : null;
                        $navigation['oneform']['next'] = !empty($patientContactForms[$index+3]['id']) ? $patientContactForms[$index+1]['id'] : null;
                        $navigation['threeforms']['next'] = !empty($patientContactForms[$index+5]['id']) ? $patientContactForms[$index+3]['id'] : null;
                        if (!empty($patientContactForms[$index+2])) {
                            $patientContactForms = array_slice($patientContactForms,$index,3);
                        } else {
                            $patientContactForms = array_slice($patientContactForms,-3,3);
                        }
                        if ($formDate > $startDate) {
                            $this->view->date_error_message = $this->view->translate('No form for specified date, presenting next available forms');
                        }
                        break;
                    }
                }
                //no form was found after the selected date... manually select last form and display
                if (!$found_form) {
                    $index = count($patientContactForms) - 1;
                    $offset = ($formCount - $index) <= 3 ? $formCount - $index + 1 : 0;
                    $navigation['oneform']['prev'] = !empty($patientContactForms[$index-1-$offset]['id']) ? $patientContactForms[$index-1-$offset]['id'] : null;
                    $navigation['threeforms']['prev'] = !empty($patientContactForms[$index-3-$offset]['id']) ? $patientContactForms[$index-3-$offset]['id'] : null;
                    $navigation['oneform']['next'] = !empty($patientContactForms[$index+3]['id']) ? $patientContactForms[$index+1]['id'] : null;
                    $navigation['threeforms']['next'] = !empty($patientContactForms[$index+5]['id']) ? $patientContactForms[$index+3]['id'] : null;

                    $patientContactForms = array_slice($patientContactForms,-3,3);
                    $this->view->date_error_message = $this->view->translate('No form after selected date, presenting latest patient forms');
                }
            }

            //process final form array

            foreach ($patientContactForms as $contactForm)
            {
                $formDate = date('d.m.Y',strtotime($contactForm['date']));
//                $this->view->dates[] = (new DateTime())->setTimestamp(strtotime($formDate));
                if (empty($formsByDate[$formDate])) {
                    $formsByDate[$formDate]['colspan'] = 1;
                    $this->view->dates[] = (new DateTime())->setTimestamp(strtotime($formDate));
                } else {
                    $formsByDate[$formDate]['colspan'] ++;
                }

                $formsByDate[$formDate]['forms'] [] = $contactForm;

                $display_rows['vital_signs'] = !empty($contactForm['vital_signs']) ? true : $display_rows['vital_signs'];
                $display_rows['symptoms'] = !empty($contactForm['symptoms']) ? true : $display_rows['symptoms'];
                $display_rows['symptoms_2'] = !empty($contactForm['symptoms_2']) ? true : $display_rows['symptoms_2'];
                $display_rows['art_en_exit'] = !empty($contactForm['art_en_exit']) ? true : $display_rows['art_en_exit'];
                $display_rows['case_history'] = !empty($contactForm['case_history']) ? true : $display_rows['case_history'];
                $display_rows['anamnese_2'] = !empty($contactForm['anamnese_2']) ? true : $display_rows['anamnese_2'];
                $display_rows['patient_hzimex'] = !empty($contactForm['patient_hzimex']['import']) || !empty($contactForm['patient_hzimex']['export']) ? true : $display_rows['patient_hzimex'];
                $display_rows['comment'] = !empty($contactForm['comment']) ? true : $display_rows['comment'];

            }

            $display_rows['admin'] = $display_rows['vital_signs']
            || $display_rows['symptoms']
            || $display_rows['symptoms_2']
            || $display_rows['art_en_exit']
            || $display_rows['case_history']
            || $display_rows['patient_hzimex']
            || $display_rows['comment'] ? true : $display_rows['admin'];

            $this->view->display_rows = $display_rows;
            $this->view->formsByDate = $formsByDate;

            $this->view->start_date_ts = date('Y-m-d',$startDate);
            $this->view->end_date_ts = date('Y-m-d',$endDate);

            $this->view->navigation  = $navigation;
            
            $end = microtime(true) - $start;
            $time = round($end, 0);
            if($_REQUEST['show_dbg'] == "1"){
                echo "<br/> #FINALLL : ".$time."";
            }

        }


        /**
         * ISPC-2882 Ancuta 21.04.2021
         */
        public function anlage2kinderAction($params = array())
        {
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpid($decid);
            
    
            /* ------------------------------------------------------------------------------ */
            if($this->getRequest()->isPost())
            {
                $form_obj = new Application_Form_PatientAnlage2Kinder();
                
                if($_POST['post_status'] == "save")
                {
                    $munster_save_data = $form_obj->save_form($ipid, $_POST);
                    $save_data = $munster_save_data->toArray();
                    
                    if (!empty($save_data) && $save_data['id'])
                    {
                        if(!empty($_POST['saved_id'])){
                            $comment = "Formular Anlage 2 - Kinderarzt wurde editiert";
                        } else{
                            $comment = "Formular Anlage 2 - Kinderarzt hinzugefügt";
                        }
                        
                        $pc_insert = new PatientCourse();
                        $pc_insert->ipid = $ipid;
                        $pc_insert->course_date = date("Y-m-d H:i:s", time());
                        $pc_insert->course_type = Pms_CommonData::aesEncrypt("F");
                        $pc_insert->course_title = Pms_CommonData::aesEncrypt($comment);
                        $pc_insert->user_id = $logininfo->userid;
                        $pc_insert->done_name = Pms_CommonData::aesEncrypt('anlage2_kinder_save');
                        $pc_insert->tabname = Pms_CommonData::aesEncrypt('anlage2_kinder_save');
                        $pc_insert->recordid = $save_data['id'];
                        $pc_insert->done_id = $save_data['id'];
                        $pc_insert->save();
                    }
                    
                    $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
                }
                
            }
            
            if($_REQUEST['form_id'])
            {
                $prid = $_REQUEST['form_id'];
            }
            
            $current_date = date('d.m.Y');
            $this->view->form_date = $current_date;
            $date = explode(".", $current_date);
            $date_2 = array(
                'tag' =>  $date[0],
                'month' =>  $date[1],
                'jahr' =>  $date[2],
            );
            
            $this->view->form_date_arr = $date_2;
            
            // IF edit page is entered 
            if(isset($prid))
            {
                $entity = PatientAnlage2KinderTable::getInstance()->find($prid);
                if($entity){
                    $saved_data  = $entity->toArray();
                    
                    $this->view->saved_id = $saved_data['id'];
                    $this->view->contact_form_id = $saved_data['contact_form_id'];
                    $this->view->crisis_intervention_doctor = $saved_data['crisis_intervention_doctor'];
                    $this->view->crisis_intervention_family = $saved_data['crisis_intervention_family'];
                    $this->view->crisis_intervention_text = $saved_data['crisis_intervention_text'];
                    $crisis_intervention_date = date('d.m.Y',strtotime($saved_data['crisis_intervention_date']));
                    $this->view->crisis_intervention_date = $crisis_intervention_date;
                    
                    $date = explode(".", $crisis_intervention_date);
                    $date_1 = array(
                        'tag' =>  $date[0],
                        'month' =>  $date[1],
                        'jahr' =>  $date[2],
                    );
                    
                    $this->view->crisis_intervention_date_arr = $date_1;
                    
                    $this->view->doctor_visit = $saved_data['doctor_visit'];
                    $this->view->doctor_visit_duration_min = $saved_data['doctor_visit_duration_min'];
                    $this->view->doctor_visit_total_duration_min = $saved_data['doctor_visit_total_duration_min'];
                    $this->view->nurse_visit = $saved_data['nurse_visit'];
                    $this->view->nurse_visit_duration_min = $saved_data['nurse_visit_duration_min'];
                    $this->view->nurse_visit_total_duration_min = $saved_data['nurse_visit_total_duration_min'];
                    $this->view->future_recomandation = $saved_data['future_recomandation'];
                    $this->view->future_colaboration_doctor = $saved_data['future_colaboration_doctor'];
                   
                    
                    $form_date = date('d.m.Y',strtotime($saved_data['form_date']));
                    $this->view->form_date = $form_date;
                    $date = explode(".", $form_date);
                    $date_2 = array(
                        'tag' =>  $date[0],
                        'month' =>  $date[1],
                        'jahr' =>  $date[2],
                    );
                    $this->view->form_date_arr = $date_2;
                    
                }
            }
            
            
            // IF User comes after saving a contact form
            if(isset($_REQUEST['cf_id']) && !empty($_REQUEST['cf_id'])){
                
                $contact_form_id = $_REQUEST['cf_id'];
                // get contact from data 
                $contact_forms = new ContactForms();
                $contact_form_details = $contact_forms->get_contact_form($contact_form_id);
 
                if(!empty($contact_form_details)){
          
                    $this->view->contact_form_id = $contact_form_id;
                     //Contact from date
                    $crisis_intervention_date = date('d.m.Y',strtotime($contact_form_details['start_date']));
                    $this->view->crisis_intervention_date = $crisis_intervention_date;
                    
                    $doctor_visit_duration_min = Pms_CommonData::calculate_visit_durationbydates($contact_form_details['start_date'],$contact_form_details['end_date']);
                    $this->view->doctor_visit_duration_min = $doctor_visit_duration_min;
                    
                    $drivetimedoc_block = new FormBlockDrivetimedoc();
                    $drivetimedoc_users_array = $drivetimedoc_block->getPatientFormBlockDrivetimedoc($ipid, $contact_form_id);
                    if($drivetimedoc_users_array['0']['fahrtzeit1'] != "0"){
                        $doctor_visit_total_duration_min = $doctor_visit_duration_min + $drivetimedoc_users_array['0']['fahrtzeit1'];
                    }
                    else
                    {
                        $doctor_visit_total_duration_min = $doctor_visit_duration_min + $contact_form_details['fahrtzeit'];
                    }
                    
                    $this->view->doctor_visit_total_duration_min = $doctor_visit_total_duration_min;
                
                    
                    $date = explode(".", $crisis_intervention_date);
                    $date_1 = array(
                        'tag' =>  $date[0],
                        'month' =>  $date[1],
                        'jahr' =>  $date[2],
                    );
                    
                    $this->view->crisis_intervention_date_arr = $date_1;
                    
                    
                    $master_groups_first = array('4','5');
                    $m_groups = Usergroup::getUserGroups($master_groups_first);
                    
                    $usergroups = array();
                    foreach($m_groups as $k_group_f => $v_group_f)
                    {
                        if($v_group_f['groupmaster'] =='4'){
                            $usergroups['doctors'][] = $v_group_f['id'];
                        }
                        elseif($v_group_f['groupmaster'] =='5'){
                            $usergroups['nurse'][] = $v_group_f['id'];
                        }
                    }
                    
                    $client_users = User::getClientsUsers($logininfo->clientid);
                    
                    $nurse_users = array();
                    $doctors_users = array();
                    
                    foreach($client_users as $k_cuser_det => $v_cuser_det)
                    {
                        if(in_array($v_cuser_det['groupid'], $usergroups['nurse']))
                        {
                            $nurse_users[] = $v_cuser_det['id'];
                        }
                        if(in_array($v_cuser_det['groupid'], $usergroups['doctors']))
                        {
                            $doctors_users[] = $v_cuser_det['id'];
                        }
                    }

                    if(in_array($contact_form_details['create_user'],$doctors_users)){
                        $this->view->doctor_visit= '1';
                    }
                    if(in_array($contact_form_details['create_user'],$nurse_users)){
                        $this->view->doctor_visit= '1';
                    }
                    
                    // get cf data -  and additional users
                    $additional_users_block = new FormBlockAdditionalUsers();
                    $patient_additional_users_array = $additional_users_block->getPatientFormBlockAdditionalUsers($ipid, $contact_form_id);
                        
                    if(!empty($patient_additional_users_array)){
                        foreach($patient_additional_users_array as $k=>$au_data){
                            if(in_array($au_data['additional_user'],$doctors_users)){
                                $selected_users['doctors'][] = $au_data['additional_user'];
                            }
                            if(in_array($au_data['additional_user'],$nurse_users)){
                                $selected_users['nurse'][] = $au_data['additional_user'];
                            }
                        }
                        
                        if(!empty($selected_users['doctors'])){
                            $this->view->doctor_visit= '1';
                        }
                        
                        if(!empty($selected_users['nurse'])){
                            $this->view->nurse_visit= '1';
                        }
                        
                    }
                    
                }
            }
            
            
            
            /* ------------------------------------------------------------------------------ */
            $patientmaster = new PatientMaster();
            $parr = $patientmaster->getMasterData($decid, 0);
            
            $this->view->patientname = $parr['last_name'] . ", " . $parr['first_name'] . "\n" . $parr['street1'] . "\n" . $parr['zip'] . "&nbsp;" . $parr['city'];
            $this->view->birthdate = $parr['birthd'];
            $this->view->patientname1 = $parr['last_name'] . ", " . $parr['first_name'];
            $this->view->patietnaddress = $parr['street1'] . "&nbsp;" . $parr['zip'] . "\n" . $parr['city'];
            
            if($parr['sex'] == 1)
            {
                $this->view->male = "checked='checked'";
            }
            
            if($parr['sex'] == 2)
            {
                $this->view->female = "checked='checked'";
            }
            
             
            
            $phelathinsurance = new PatientHealthInsurance();
            $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($ipid);
            
            $this->view->insurance_company_name = $healthinsu_array[0]['company_name'];
            $this->view->insurance_no = $healthinsu_array[0]['insurance_no'];
            $this->view->insurance_status = $healthinsu_array[0]['insurance_status'];
            
            $insucom = new HealthInsurance();
            $insucomarray = $insucom->getCompanyinfofromId($healthinsu_array[0]['companyid']);
            $this->view->kvnumber = $healthinsu_array[0]['kvk_no'];
            
            if($parr['sex'] == 1)
            {
                $this->view->male = "checked='checked'";
            }
            
            if($parr['sex'] == 2)
            {
                $this->view->female = "checked='checked'";
            }
            
            $epid = Pms_CommonData::getEpidFromId($decid);
            $this->view->epid = $epid;
            
            $brenmber = Doctrine_Query::create()
            ->select('*')
            ->from('PatientQpaMapping')
            ->where("epid='" . $epid . "'");
            $bexec = $brenmber->execute();
            $barray = $bexec->toArray();
            
            $user = Doctrine::getTable('User')->find($logininfo->userid);
            if($user)
            {
                $uarray = $user->toArray();
                $this->view->betriebsstatten_nr = $uarray['betriebsstattennummer'];
                $this->view->arzt_nr = $uarray['LANR'];
            }
            
 
              
 
 
            if($this->getRequest()->isPost())
            {
                $_POST['patient_name'] = $_POST['patient_name'];
 
                if($_POST['post_status'] == "pdf_print")
                {
                    $date = $_POST['crisis_intervention_date'] ;
                    $date = explode(".", $date);
                    $date_1 = array(
                        'tag' =>  $date[0],
                        'month' =>  $date[1],
                        'jahr' =>  $date[2],
                    );
                    
                    $_POST['crisis_intervention_date_arr'] = $date_1;
                    
                    $date = $_POST['form_date'];
                    $date = explode(".", $date);
                    $date_2 = array(
                        'tag' =>  $date[0],
                        'month' =>  $date[1],
                        'jahr' =>  $date[2],
                    );
                    $_POST['form_date_arr'] = $date_2;
 
                    $this->generatePdfNew(3, $_POST, 'anlage2kinder', "anlage2kinderpdf.html");
                }
            }
            
        }
        
        
        
        /**
         * ISPC-2921 Ancuta 17.05.2021
         */
        public function careplanningAction(){
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpid($decid);
            
            if(!empty($_REQUEST['plan_id'])){
                //- get data from plan id
                $plan_id = $_REQUEST['plan_id'];
            } else{
                // get data from latest form 
            }
            
            
            $q = Doctrine_Query::create()
            ->select("c.*,cp.*")
            ->from('Careplanning c')
            ->leftJoin('c.CareplanningProblems cp')
            ->where('c.ipid = ?',$ipid);
            $q->andWhere('c.isdelete = 0');
            if(!empty($_REQUEST['plan_id'])){
                $q->andWhere('c.id = ?',$_REQUEST['plan_id']);
            }
            $q->OrderBy('c.id DESC');
            $q->limit(1);
            $active_plans =   $q->fetchArray();
            
            $plan = array();
            if(!empty($active_plans)){
                $plan_array = $active_plans[0];
                if(!empty($_REQUEST['plan_id'])){
                    $plan['id'] = $plan_array['id'];
                } 
                $plan['resource_patient'] = $plan_array['resource_patient'];
                $plan['resource_family'] = $plan_array['resource_family'];
                $plan['future_topics'] = $plan_array['future_topics'];
                $plan['evaluation_todo_users'] = $plan_array['evaluation_todo_users'];
                
                foreach($plan_array['CareplanningProblems'] as $k => $cp){
                    if($cp['completed'] == 0){
                        $plan['CareplanningProblems'][$cp['category']][] = $cp;
                    } else{
//                         $plan['CareplanningProblemsCompleted'][$cp['category']][] = $cp;
                    }
                }
            }
            
            
            // get all completed  problems for patient 
            
            $qs = Doctrine_Query::create()
            ->select("c.*,cp.*")
            ->from('Careplanning c')
            ->leftJoin('c.CareplanningProblems cp')
            ->where('c.ipid = ?',$ipid);
            $q->andWhere('c.isdelete = 0');
            $all_active_plans =   $qs->fetchArray();
 
            if(!empty($all_active_plans)){
                foreach($all_active_plans  as $k=>$pl){
                    foreach($pl['CareplanningProblems'] as $k => $cp){
                        if($cp['completed'] == 1){
                            $plan['CareplanningProblemsCompleted'][$cp['category']][] = $cp;
                        }
                    }
                }
            }
 
            
            
            $this->view->plan = $plan;
            
//             dd($plan);
            // read the client-config
            $sections = ClientConfig::getConfig($clientid, 'careprocesslist');
            
            if (!$sections) {
                //read the deault-Values, if there are no client-config
                $sections = Client::get_clinic_careprocess_config();
            }
            $this->view->client_sections = $sections;
            
            $client_sections = array();
            foreach($sections  as $category =>$problems_array){
                foreach($problems_array as $line_key=>$line_info) {
                    $client_sections[$category]['main_options'][] = $line_info['col_thema'][0];

                    foreach($line_info as $sec_category => $options){
                        if( $sec_category != "col_thema"){
                            $client_sections[$category][$line_info['col_thema'][0]][$sec_category] = $options;
                        }
                    }
                }
            }
            $this->view->category_thema = $client_sections;
            
            //Users select for todos
            $this->view->usersnewtodos = Pms_CommonData::get_nice_name_multiselect($clientid, $include_all_option = false);
            
            
 
            //POST
            if($this->getRequest()->isPost())
            {
                if(!empty($_POST['plan'])){
                    
//                     dd($_POST);
                    $plan_data = $_POST['plan'];
                    $post_data['id'] = isset($_POST['plan']['id']) ? $_POST['plan']['id'] : null;
                    $post_data['ipid'] = $ipid;
                    $post_data['resource_patient'] = $_POST['plan']['resource_patient'] ;
                    $post_data['resource_family'] = $_POST['plan']['resource_family'] ;
                    $post_data['future_topics'] = $_POST['plan']['future_topics'] ;
                    
                    $post_data['evaluation_date'] = !empty($_POST['plan']['evaluation_date']) ? date('Y-m-d H:i:s',strtotime($_POST['plan']['evaluation_date'])) : date('Y-m-d H:i:s') ;
                    $post_data['evaluation_todo_users'] = !empty($_POST['plan']['evaluation_todo_users']) ? implode(';',$_POST['plan']['evaluation_todo_users']) : "";
                    
//                     $Careplanning_obj = CareplanningTable::getInstance()->findOrCreateOneBy(array('id','ipid'), array($post_data['id'],$ipid), $post_data);
                    $Careplanning_obj = CareplanningTable::getInstance()->findOrCreateOneBy('id', $post_data['id'], $post_data);
                    
                    if(!empty($_POST['plan']['CareplanningProblems']))
                    {
                        $ko = 0;
                        foreach($_POST['plan']['CareplanningProblems'] as $category => $cat_lines){
                            foreach($cat_lines as $line_id => $line ){
                                if(!empty($line['thema'])){
                                    
                                    $post_data_cp['CareplanningProblems'][$ko] = $line;
                                    $post_data_cp['CareplanningProblems'][$ko]['category'] = $category;
                                    if(isset($line['id']) && isset($_POST['plan']['id'])){
                                        $post_data_cp['CareplanningProblems'][$ko]['id'] = $line['id'];
                                    } else{
                                        $post_data_cp['CareplanningProblems'][$ko]['id'] = null;
                                    }
                                    $post_data_cp['CareplanningProblems'][$ko]['ipid'] = $ipid;
                                    $post_data_cp['CareplanningProblems'][$ko]['careplanning_id'] = $Careplanning_obj->id;
                                    $ko++;
                                }
                            }
                        }
                    }
                 
                    foreach( $post_data_cp['CareplanningProblems'] as $kcp =>$cpdata){
                        $Careplanning_obj_cp = CareplanningProblemsTable::getInstance()->findOrCreateOneBy('id',$cpdata['id'], $cpdata);
                    }
                    
                    
                    // save todos
                    // GROUP PER GROUPS 
                    if( !empty($_POST['plan']['evaluation_date']) && !empty($_POST['plan']['evaluation_todo_users']) ){
                        
                        $usrs = new User();
                        $postids = array();
                        $post_users = $usrs->get_client_users($clientid);
                        $usersdata = array();// TODO-3068 ISPC: TODO generate 09.04.2020
                        foreach($post_users as $userdata) {
                            $usersdata[$userdata['id']] = $userdata;
                            $postids[] = $userdata['id'];
                        }
                        $post_w_userids = array();
                        $pseudogroup_ids =  array();
                        
                        foreach($_POST['plan']['evaluation_todo_users'] as $post_w_user) {
                            
                            if(substr(trim($post_w_user), 0, 1) != 'u' && strpos($post_w_user, ("pseudogroup_"), 0) === false ) {
                                if(substr(trim($post_w_user), 0, 1) == 'g') {
                                    foreach($post_users as $post_user) {
                                        if($post_user['groupid'] == substr(trim($post_w_user), 1)) {
                                            array_push($post_w_userids, $post_user['id']);
                                        }
                                    }
                                }
                                else {
                                    foreach($post_users as $post_user) {
                                        array_push($post_w_userids, $post_user['id']);
                                    }
                                    
                                }
                            }
                            elseif (strpos($post_w_user, ("pseudogroup_"), 0) === 0) {
                                $pseudogroup_ids[] = substr($post_w_user, strlen('pseudogroup_'));
                            }
                            else {
                                array_push($post_w_userids, substr(trim($post_w_user), 1));
                            }
                        }
                        
                        if (! empty($pseudogroup_ids)) {
                            //get the users from this pseudogroup
                            $pgu_obj = new PseudoGroupUsers();
                            $users_in_pseudogroups = $pgu_obj->get_users_by_groups($pseudogroup_ids);
                            if ( ! empty($users_in_pseudogroups['all_user_id'])) {
                                $post_w_userids = array_merge($post_w_userids , $users_in_pseudogroups['all_user_id']);
                            }
                        }
                        $post_w_userids = array_unique($post_w_userids);
                        
                        $curent_date = date('Y-m-d H:i:s', time());
                        $until_date = date('Y-m-d H:i:s', strtotime($_POST['plan']['evaluation_date']));
                        
                        $todo_message = "Re-Evaluation Pflegeplanung";
                        foreach($post_w_userids as $post_w_userid) {
                            $todos[] = array(
                                'client_id' => $clientid,
                                'user_id' => $post_w_userid,
                                'group_id' => '0',
                                'ipid' => $ipid,
                                'todo' => $todo_message,
                                'triggered_by' => 'careplanning',
                                'isdelete' => '0',
                                'iscompleted' => '0',
                                'record_id' => $Careplanning_obj->id,
                                'create_date' => $curent_date,
                                'until_date' => $until_date,
                                'additional_info' => implode(";",$_POST['plan']['evaluation_todo_users'])
                            );
                        }
                        if(!empty($todos))
                        {
                            $collection = new Doctrine_Collection('ToDos');
                            $collection->fromArray($todos);
                            $collection->save();
                        }
                        
                    }
                    
                    
                    
                    // Save entry to verlauf 
                    if(!empty($_REQUEST['plan_id'])){
                        $ctitle = $this->translate("CAREPLANNING form was edited");
                    } else {
                        $ctitle = $this->translate("CAREPLANNING form was created");
                    }
                    
                    $cust = new PatientCourse();
                    $cust->ipid = $ipid;
                    $cust->course_date = date("Y-m-d H:i:s", time());
                    $cust->course_type = Pms_CommonData::aesEncrypt("K");
                    $cust->user_id = $logininfo->userid;
                    $cust->recordid = $Careplanning_obj->id;
                    $cust->tabname = Pms_CommonData::aesEncrypt("careplanning_form");
                    $cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
                    $cust->save();
                    
                    
                    // prepare for PDF 
                    $pdf_post_data['plan']['resource_patient'] = $_POST['plan']['resource_patient'] ;
                    $pdf_post_data['plan']['resource_family'] = $_POST['plan']['resource_family'] ;
                    $pdf_post_data['plan']['future_topics'] = $_POST['plan']['future_topics'] ;
                    foreach( $post_data_cp['CareplanningProblems'] as $k=>$cps){
                        $pdf_post_data['plan']['CareplanningProblems'][$cps['category']][] =$cps;
                    }
                    $pdf_post_data['client_sections'] = $this->view->client_sections;
                    $pdf_post_data['category_thema'] = $this->view->category_thema;
                    
                    // Generate and save PDF +  entry to verlauf 
                    $this->generatePdfNew(4, $pdf_post_data, 'careplanning_save', "careplanning_pdf.html");
                    
                    
    
                    
                    //return to course
                    $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
                }
                

                
                
                
            }
            
            
        }
        
        /**
         * ISPC-2921 Ancuta 17.05.2021
         */
        public function careplanningselectAction(){
            
            $this->_helper->layout->setLayout('layout_ajax');
            $this->_helper->viewRenderer->setNoRender();
            
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            
            // read the client-config
            $sections = ClientConfig::getConfig($clientid, 'careprocesslist');
            if (!$sections) {
                //read the deault-Values, if there are no client-config
                $sections = Client::get_clinic_careprocess_config();
            }
            $client_sections = array();
            foreach($sections  as $category =>$problems_array){
                foreach($problems_array as $line_key=>$line_info) {
                    $client_sections[$category]['main_options'][0] = "";
                    $client_sections[$category]['main_options'][$line_info['col_thema'][0]] = $line_info['col_thema'][0];
                    
                    foreach($line_info as $sec_category => $options){
                        if( $sec_category != "col_thema"){
                            $client_sections[$category][$line_info['col_thema'][0]][$sec_category][] = '---';
                            foreach($options as $opname){
                                    
                                $client_sections[$category][$line_info['col_thema'][0]][$sec_category][$opname] = $opname;
                            }
                        }
                    }
                }
            }
            
            if(!empty($_REQUEST['cat'])){
                $selects['main_options'] = $this->view->formSelect('plan[CareplanningProblems]['.$_REQUEST['cat'].']['.$_REQUEST['line_nr'].'][thema]', null, array('id'=>'thema_select_'.$_REQUEST['cat'].'_'.$_REQUEST['line_nr'],  'class'=>'thema_select','data-cat'=>$_REQUEST['cat']), $client_sections[$_REQUEST['cat']]['main_options']);
            }
            if(!empty($_REQUEST['problem'])){
                $selected_problem_info = $client_sections[$_REQUEST['cat']][$_REQUEST['problem']];
                foreach($selected_problem_info as $sec_cat => $arrays){
                    $sec_html = $this->view->formSelect('plan[CareplanningProblems]['.$_REQUEST['cat'].']['.$_REQUEST['line_nr'].']['.$sec_cat.']', null, array('class'=>'problem_select_items'), $arrays);
                    $sec_html .= '<textarea name="plan[CareplanningProblems]['.$_REQUEST['cat'].']['.$_REQUEST['line_nr'].']['.$sec_cat.'_text]"></textarea>';
                    $selects[$sec_cat] = $sec_html;
                }
            }
            echo json_encode($selects);
            exit;
            
        }
        
        /**
         * ISPC-2909 Ancuta 01.06.2021
         */
        public function privatecontactformAction(){
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $decid = Pms_Uuid::decrypt($_GET['id']);
            $ipid = Pms_CommonData::getIpid($decid);

            //Users select for todos
            $this->view->usersnewtodos = Pms_CommonData::get_nice_name_multiselect($clientid, $include_all_option = false);
            
            $patientmaster = new PatientMaster();
            $parr = $patientmaster->getMasterData($decid, 0);
            
            $form_data = array();
            $form_data['form_date'] = date('d.m.Y');
            $epid = Pms_CommonData::getEpidFromId($decid);
            $form_data['ident_patient'] = $epid;
            $form_data['ident_patient_gender'] = $parr['sex'];
            
            $patient_end_date = date('Y-m-d'); // Change to discharge tod date if patient is dead
            if($parr['birthd'] != "0000-00-00")
            {
                $form_data['ident_patient_age'] = str_replace(" Jahre", "", $patientmaster->GetAge(date('Y-m-d',strtotime($parr['birthd'])),$patient_end_date));
            }
            
            
            if(!empty($_REQUEST['form_id'])){
                $form_id = $_REQUEST['form_id'];
      
                $q = Doctrine_Query::create()
                ->select("*")
                ->from('PrivateContactform')
                ->where('ipid = ?',$ipid);
                $q->andWhere('isdelete = 0');
                $q->andWhere('id = ?',$form_id);
                $q->OrderBy('id DESC');
                $q->limit(1);
                $active_form =   $q->fetchArray();
                
                if(!empty($active_form)){
                    $form_data =  $active_form[0];
                    $form_data['form_date'] = date('d.m.Y',strtotime($active_form[0]['form_date']));
                }
            }
            
            $this->view->form_data = $form_data;
            
            
            
            if($this->getRequest()->isPost())
            {
                if(!empty($_POST['form'])){
                    //first   Blocks from 1) to 5) should be mandatory
                    if(empty($_POST['form']['form_date']) || empty($_POST['form']['ident_reporter']) || empty($_POST['form']['ident_patient']) || strlen($_POST['form']['ident_patient_gender'])<1 || empty($_POST['form']['ident_patient_age']) || empty($_POST['form']['ident_drugname']) || empty($_POST['form']['ident_drugdosage']) || empty($_POST['form']['ident_event'])){
                        $this->view->error_message  = $this->view->translate("Please fill data from 1 to 5");
                        $this->view->form_data = $_POST['form'];
                    } 
                    else
                    {
                        $post_data['id'] = isset($_POST['form']['id']) ? $_POST['form']['id'] : null;
                        $post_data['ipid'] = $ipid;
                        $post_data['form_date'] = !empty($_POST['form']['form_date']) ? date('Y-m-d H:i:s',strtotime($_POST['form']['form_date'])) : date('Y-m-d H:i:s') ;
                        $post_data['ident_reporter'] = $_POST['form']['ident_reporter'] ;
                        $post_data['ident_patient'] = $_POST['form']['ident_patient'] ;
                        $post_data['ident_patient_gender'] = $_POST['form']['ident_patient_gender'] ;
                        $post_data['ident_patient_age'] = $_POST['form']['ident_patient_age'] ;
                        $post_data['ident_drugname'] = $_POST['form']['ident_drugname'] ;
                        $post_data['ident_drugdosage'] = $_POST['form']['ident_drugdosage'] ;
                        $post_data['ident_event'] = $_POST['form']['ident_event'] ;
                        $post_data['ident_comment'] = $_POST['form']['ident_comment'] ;
                        
                        if(isset($_POST['form']['save_action'])){
                            
                            $PrivateContactform_obj = PrivateContactformTable::getInstance()->findOrCreateOneBy('id', $post_data['id'], $post_data);
                            
                            // save todos
                            if( !empty($_POST['form']['todo_text']) && !empty($_POST['form']['todo_users'])){
                                
                                $usrs = new User();
                                $postids = array();
                                $post_users = $usrs->get_client_users($clientid);
                                $usersdata = array();// TODO-3068 ISPC: TODO generate 09.04.2020
                                foreach($post_users as $userdata) {
                                    $usersdata[$userdata['id']] = $userdata;
                                    $postids[] = $userdata['id'];
                                }
                                $post_w_userids = array();
                                $pseudogroup_ids =  array();
                                
                                foreach($_POST['form']['todo_users'] as $post_w_user) {
                                    
                                    if(substr(trim($post_w_user), 0, 1) != 'u' && strpos($post_w_user, ("pseudogroup_"), 0) === false ) {
                                        if(substr(trim($post_w_user), 0, 1) == 'g') {
                                            foreach($post_users as $post_user) {
                                                if($post_user['groupid'] == substr(trim($post_w_user), 1)) {
                                                    array_push($post_w_userids, $post_user['id']);
                                                }
                                            }
                                        }
                                        else {
                                            foreach($post_users as $post_user) {
                                                array_push($post_w_userids, $post_user['id']);
                                            }
                                            
                                        }
                                    }
                                    elseif (strpos($post_w_user, ("pseudogroup_"), 0) === 0) {
                                        $pseudogroup_ids[] = substr($post_w_user, strlen('pseudogroup_'));
                                    }
                                    else {
                                        array_push($post_w_userids, substr(trim($post_w_user), 1));
                                    }
                                }
                                
                                if (! empty($pseudogroup_ids)) {
                                    //get the users from this pseudogroup
                                    $pgu_obj = new PseudoGroupUsers();
                                    $users_in_pseudogroups = $pgu_obj->get_users_by_groups($pseudogroup_ids);
                                    if ( ! empty($users_in_pseudogroups['all_user_id'])) {
                                        $post_w_userids = array_merge($post_w_userids , $users_in_pseudogroups['all_user_id']);
                                    }
                                }
                                $post_w_userids = array_unique($post_w_userids);
                                
                                $curent_date = date('Y-m-d H:i:s', time());
                                if(strlen($_POST['form']['todo_date']) > 0 ){
                                    $until_date = date('Y-m-d H:i:s', strtotime($_POST['form']['todo_date']));
                                } else{
                                    $until_date = date('Y-m-d H:i:s');
                                }
                                
                                $todo_message = $_POST['form']['todo_text'];
                                foreach($post_w_userids as $post_w_userid) {
                                    $todos[] = array(
                                        'client_id' => $clientid,
                                        'user_id' => $post_w_userid,
                                        'group_id' => '0',
                                        'ipid' => $ipid,
                                        'todo' => $todo_message,
                                        'triggered_by' => 'careplanning',
                                        'isdelete' => '0',
                                        'iscompleted' => '0',
                                        'record_id' => $PrivateContactform_obj->id,
                                        'create_date' => $curent_date,
                                        'until_date' => $until_date,
                                        'additional_info' => implode(";",$_POST['form']['todo_users'])
                                    );
                                }
                                if(!empty($todos))
                                {
                                    $collection = new Doctrine_Collection('ToDos');
                                    $collection->fromArray($todos);
                                    $collection->save();
                                }
                            }
                            
                            // Save entry to verlauf
                            if(!empty($_REQUEST['form_id'])){
                                $ctitle = $this->translate("Kontaktformular PV form was edited");
                            } else {
                                $ctitle = $this->translate("Kontaktformular PV form was created");
                            }
                            
                            $cust = new PatientCourse();
                            $cust->ipid = $ipid;
                            $cust->course_date = date("Y-m-d H:i:s", time());
                            $cust->course_type = Pms_CommonData::aesEncrypt("K");
                            $cust->user_id = $logininfo->userid;
                            $cust->recordid = $PrivateContactform_obj->id;
                            $cust->tabname = Pms_CommonData::aesEncrypt("privatecontactform");
                            $cust->course_title = Pms_CommonData::aesEncrypt($ctitle);
                            $cust->save();
        
                            // prepare for PDF
                            $pdf_post_data['form_data'] = $post_data;
                            
                            // Generate and save PDF +  entry to verlauf
                            $this->generatePdfNew(4, $pdf_post_data, 'privatecontactform_save', "privatecontactform_pdf.html");
                            
                            
                            //return to course
                            $this->_redirect(APP_BASE . "patientcourse/patientcourse?id=" . $_GET['id']);
                        } else if(isset($_POST['form']['pdf_action'])){
                            // prepare for PDF
                            $pdf_post_data['form_data'] = $post_data;
                            $pdf_post_data['form_data']['form_date'] =  $_POST['form']['form_date'];
                            // Generate and save PDF +  entry to verlauf
                            $this->generatePdfNew(3, $pdf_post_data, 'privatecontactform_pdf', "privatecontactform_pdf.html");
                            
                            
                        }
                    }
                    
                }
            }
            
        }
}
		
?>
